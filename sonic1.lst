00000000                            ; /=========================================================================\
00000000                            ; �	This file is generated by The Interactive Disassembler (IDA)	    �
00000000                            ; �	Copyright (c) 2003 by DataRescue sa/nv,	<ida@datarescue.com>	    �
00000000                            ; \=========================================================================/
00000000                            ;
00000000                            ; Disassembly created by Hivebrain
00000000                            ; thanks to drx and Stealth
00000000                            
00000000                            ; Processor:	    68000
00000000                            ; Target Assembler: 680x0 Assembler in MRI compatible mode
00000000                            ; This file should be compiled with "as	-M"
00000000                            
00000000                            ; ===========================================================================
00000000                            		include	"Equz80.asm"
00000000                            ; ===========================================================================
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; ListEqu.exe generated from "Dual PCM\Z80.lst"
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000 =00000E80                  E_BuffStart = $E80 ; Start of the buffer (ALWAYS keep it multiples of 20)
00000000 =00000FFF                  E_BuffFinish = $FFF ; End of the buffer (keep in multiples of 100 - 1, e.g. 0FFF, 0EFF, 0DFF, 0CFF, etc)
00000000 =00000020                  E_BuffSize = $20 ; Number of bytes to buffer ahead of time (keep at POT) (part of it is done manually, so just changing this value won't do it all).
00000000 =00001000                  E_CueStart = $1000 ; Start of the cue, (ALWAYS keep in multiples of 10)
00000000 =00002000                  E_CueFinish = $2000 ; End of the cue (keep in multiples of 10)
00000000 =00000300                  E_CueSize = $300 ; Number of bytes for the 68k to cue ahead (keep in multiples of 100)
00000000 =00000000                  M_Flush = $0 
00000000 =00000000                  Start = $0 
00000000 =00000008                  Switch_PCM = $8 
00000000 =0000000E                  SD_NextBit = $E 
00000000 =0000001F                  CUPCM1_Switch = $1F 
00000000 =0000002D                  CUPCM1_SwStack = $2D 
00000000 =00000031                  CUPCM2_Switch = $31 
00000000 =0000003F                  CUPCM2_SwStack = $3F 
00000000 =00000047                  CU_Stack = $47 
00000000 =00000049                  InitRout = $49 
00000000 =000000E0                  CUPCM1_Reset = $E0 
00000000 =000000F8                  CUPCM1_Mute = $F8 
00000000 =0000011B                  CatchUp_Exx = $11B 
00000000 =0000011C                  CatchUp = $11C 
00000000 =0000011C                  CUPCM1_Switch0 = $11C 
00000000 =0000011D                  CUPCM1_Switch1 = $11D 
00000000 =0000011E                  CUPCM1_Switch2 = $11E 
00000000 =0000011F                  CUPCM1_Switch3 = $11F 
00000000 =00000120                  CUPCM1_Switch4 = $120 
00000000 =00000121                  CUPCM1_Switch5 = $121 
00000000 =00000122                  CUPCM1_Switch6 = $122 
00000000 =00000123                  CUPCM1_Switch7 = $123 
00000000 =00000124                  CUPCM1_Switch8 = $124 
00000000 =00000132                  CUPCM1_Load = $132 
00000000 =0000015B                  CUPCM1_ResRet = $15B 
00000000 =0000015E                  CUPCM1_MuteRet = $15E 
00000000 =0000015F                  CUPCM2_Switch0 = $15F 
00000000 =00000160                  CUPCM2_Switch1 = $160 
00000000 =00000161                  CUPCM2_Switch2 = $161 
00000000 =00000162                  CUPCM2_Switch3 = $162 
00000000 =00000163                  CUPCM2_Switch4 = $163 
00000000 =00000164                  CUPCM2_Switch5 = $164 
00000000 =00000165                  CUPCM2_Switch6 = $165 
00000000 =00000166                  CUPCM2_Switch7 = $166 
00000000 =00000167                  CUPCM2_Switch8 = $167 
00000000 =00000173                  CUPCM2_Load = $173 
00000000 =000001B8                  CUPCM2_ResRet = $1B8 
00000000 =000001BB                  CUPCM2_MuteRet = $1BB 
00000000 =000001BE                  CU_ResBufINRet = $1BE 
00000000 =000001C3                  CU_ResBufOTRet = $1C3 
00000000 =000001D2                  CUPCM1_RET = $1D2 
00000000 =000001D3                  CUPCM2_RET = $1D3 
00000000 =000001D6                  Flush = $1D6 
00000000 =000001D9                  FL_Return = $1D9 
00000000 =000001DD                  BM_ResBufOTRet = $1DD 
00000000 =000001DD                  FL_FlushSwitch = $1DD 
00000000 =000001E0                  CUPCM2_Mute = $1E0 
00000000 =00000202                  CUPCM2_Reset = $202 
00000000 =0000021A                  CU_ResetBufferIN = $21A 
00000000 =00000227                  CU_ResetBufferOUT = $227 
00000000 =00000234                  BM_ResetBufferOUT = $234 
00000000 =00000241                  CUPCM2_NewSample = $241 
00000000 =00000264                  CUPCM1_NewSample = $264 
00000000 =00000287                  FL_Loop = $287 
00000000 =0000028D                  BM_NextByte = $28D 
00000000 =000002BE                  Valid = $2BE 
00000000 =000002D7                  OutRange = $2D7 
00000000 =000002E0                  PCM1_SampCur = $2E0 
00000000 =000002E2                  PCM1_BankCur = $2E2 
00000000 =000002E3                  PCM2_SampCur = $2E3 
00000000 =000002E5                  PCM2_BankCur = $2E5 
00000000 =000002E6                  PCM1_Sample = $2E6 
00000000 =000002E8                  PCM1_Bank = $2E8 
00000000 =000002E9                  PCM2_Sample = $2E9 
00000000 =000002EB                  PCM2_Bank = $2EB 
00000000 =000002EC                  MuteSample = $2EC 
00000000 =000002EF                  YM_Access = $2EF 
00000000 =000002F0                  YM_Point68k = $2F0 
00000000 =000002F2                  YM_PointZ80 = $2F2 
00000000 =00001000                  YM_List = $1000 
00000000                            
00000000                            ; ===========================================================================
00000000                            ; ===========================================================================
00000000                            		include	"Macros.asm"
00000000 =FFFFD000                  v_objspace:	equ $FFFFD000	; object variable space ($40 bytes per object) ($2000 bytes)
00000000 =FFFFD000                  v_player:	equ v_objspace	; object variable space for Sonic ($40 bytes)
00000000 =FFFFF700                  v_screenposx:	equ $FFFFF700
00000000 =FFFFFC00                  v_objstate:	equ $FFFFFC00
00000000                            
00000000                            ; Object variables
00000000 =00000001                  obRender:	equ 1	; bitfield for x/y flip, display mode
00000000 =00000002                  obGfx:		equ 2	; palette line & VRAM setting (2 bytes)
00000000 =00000004                  obMap:		equ 4	; mappings address (4 bytes)
00000000 =00000008                  obX:		equ 8	; x-axis position (2-4 bytes)
00000000 =0000000A                  obScreenY:	equ $A	; y-axis position for screen-fixed items (2 bytes)
00000000 =0000000C                  obY:		equ $C	; y-axis position (2-4 bytes)
00000000 =00000010                  obVelX:		equ $10	; x-axis velocity (2 bytes)
00000000 =00000012                  obVelY:		equ $12	; y-axis velocity (2 bytes)
00000000 =00000014                  obInertia:	equ $14	; potential speed (2 bytes)
00000000 =00000016                  obHeight:	equ $16	; height/2
00000000 =00000017                  obWidth:	equ $17	; width/2
00000000 =00000018                  obPriority:	equ $18	; sprite stack priority -- 0 is front
00000000 =00000019                  obActWid:	equ $19	; action width
00000000 =0000001A                  obFrame:	equ $1A	; current frame displayed
00000000 =0000001B                  obAniFrame:	equ $1B	; current frame in animation script
00000000 =0000001C                  obAnim:		equ $1C	; current animation
00000000 =0000001D                  obNextAni:	equ $1D	; next animation
00000000 =0000001E                  obTimeFrame:	equ $1E	; time to next frame
00000000 =0000001F                  obDelayAni:	equ $1F	; time to delay animation
00000000 =00000020                  obColType:	equ $20	; collision response type
00000000 =00000021                  obColProp:	equ $21	; collision extra property
00000000 =00000022                  obStatus:	equ $22	; orientation or mode
00000000 =00000023                  obRespawnNo:	equ $23	; respawn list index number
00000000 =00000024                  obRoutine:	equ $24	; routine number
00000000 =00000025                  ob2ndRout:	equ $25	; secondary routine number
00000000 =00000026                  obAngle:	equ $26	; angle
00000000 =00000028                  obSubtype:	equ $28	; object subtype
00000000 =00000025                  obSolid:	equ ob2ndRout ; solid status flag
00000000                            out_of_range:	macro exit,pos
00000000                            		if (narg=2)
00000000                            		move.w	pos,d0		; get object position (if specified as not obX)
00000000                            		else
00000000                            		move.w	obX(a0),d0	; get object position
00000000                            		endc
00000000                            		andi.w	#$FF80,d0	; round down to nearest $80
00000000                            		move.w	(v_screenposx).w,d1 ; get screen position
00000000                            		subi.w	#128,d1
00000000                            		andi.w	#$FF80,d1
00000000                            		sub.w	d1,d0		; approx distance between object and screen
00000000                            		cmpi.w	#128+320+192,d0
00000000                            		bhi.\0	exit
00000000                            		endm
00000000                            ; ===========================================================================
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Macros
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            	; --- Alignment ---
00000000                            
00000000                            align		macro	Size,Value
00000000                            		dcb.b	Size-(*%Size),Value
00000000                            		endm
00000000                            
00000000                            	; --- Stop Z80 ---
00000000                            
00000000                            StopZ80		macro
00000000                            		move.w	#$0100,($A11100).l			; request Z80 stop (ON)
00000000                            		btst.b	#$00,($A11100).l			; has the Z80 stopped yet?
00000000                            		bne.s	*-$08					; if not, branch
00000000                            		endm
00000000                            
00000000                            	; --- Start Z80 ---
00000000                            
00000000                            StartZ80	macro
00000000                            		move.w	#$0000,($A11100).l			; request Z80 stop (OFF)
00000000                            		endm
00000000                            
00000000                            	; --- Turning DMA mode on ---
00000000                            
00000000                            Z80DMA_ON	macro
00000000                            		StopZ80
00000000                            		move.b	#(Flush&$FF),($A00000+FL_FlushSwitch+1).l	; change the "jp" instruction address to "Flush" routine loop
00000000                            		StartZ80
00000000                            		move.w	#$0180,d7				; set delay time (give z80 time to get out of the "CatchUp" routine...
00000000                            		nop						; ...and into the "Flush" routine, so the 68k doesn't start DMA before...
00000000                            		nop						; ...the z80 has a chance to stop reading from the window
00000000                            		dbf	d7,*-$04				; loop back and perform the nops again...
00000000                            		endm
00000000                            
00000000                            	; --- Turning DMA mode off ---
00000000                            
00000000                            Z80DMA_OFF	macro
00000000                            		StopZ80
00000000                            		move.b	#(CatchUp&$FF),($A00000+FL_FlushSwitch+1).l	; change the "jp" instruction address to "CatchUp" routine loop
00000000                            		StartZ80
00000000                            		endm
00000000                            
00000000                            
00000000                            	; --- Storing 68k address for Z80 as dc ---
00000000                            
00000000                            dcz80		macro	Sample
00000000                            		dc.b	(Sample&$FF)
00000000                            		dc.b	(((Sample>>$08)&$7F)|$80)
00000000                            		dc.b	((Sample&$7F8000)>>$0F)
00000000                            		endm
00000000                            
00000000                            ; =============
00000000                            ;Sonic 2 Macros
00000000                            ; =============
00000000                            
00000000                            align macro
00000000                            	cnop 0,\1
00000000                            	endm
00000000                            ; >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
00000000                            ; Equates section - Names for variables.
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; size variables - you'll get an informational error if you need to change these...
00000000                            ; they are all in units of bytes
00000000 =00002F00                  Size_of_DAC_samples =		$2F00
00000000 =00006174                  Size_of_SEGA_sound =		$6174
00000000 =00000F64                  Size_of_Snd_driver_guess =	$F64 ; approximate post-compressed size of the Z80 sound driver
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Object Status Table offsets (for everything between Object_RAM and Primary_Collision)
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; universally followed object conventions:
00000000 =00000001                  render_flags =		  1 ; bitfield ; bit 7 = onscreen flag, bit 0 = x mirror, bit 1 = y mirror, bit 2 = coordinate system
00000000 =00000002                  art_tile =		  2 ; and 3 ; start of sprite's art
00000000 =00000004                  mappings =		  4 ; and 5 and 6 and 7
00000000 =00000008                  x_pos =			  8 ; and 9 ... some objects use $A and $B as well when extra precision is required (see ObjectMove) ... for screen-space objects this is called x_pixel instead
00000000 =0000000C                  y_pos =			 $C ; and $D ... some objects use $E and $F as well when extra precision is required ... screen-space objects use y_pixel instead
00000000 =00000018                  priority =		$18 ; 0 = front
00000000 =00000019                  width_pixels =		$19
00000000 =0000001A                  mapping_frame =		$1A
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; conventions followed by most objects:
00000000 =00000010                  x_vel =			$10 ; and $11 ; horizontal velocity
00000000 =00000012                  y_vel =			$12 ; and $13 ; vertical velocity
00000000 =00000016                  y_radius =		$16 ; collision width / 2
00000000 =00000017                  x_radius =		$17 ; collision height / 2
00000000 =0000001B                  anim_frame =		$1B
00000000 =0000001C                  anim =			$1C
00000000 =0000001D                  next_anim =		$1D
00000000 =0000001E                  anim_frame_duration =	$1E
00000000 =00000022                  status =		$22 ; note: exact meaning depends on the object... for sonic/tails: bit 0: leftfacing. bit 1: inair. bit 2: spinning. bit 3: onobject. bit 4: rolljumping. bit 5: pushing. bit 6: underwater.
00000000 =00000024                  routine =		$24
00000000 =00000025                  routine_secondary =	$25
00000000 =00000026                  angle =			$26 ; angle about the z=0 axis (360 degrees = 256)
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; conventions followed by many objects but NOT sonic/tails:
00000000 =00000020                  collision_flags =	$20
00000000 =00000021                  collision_property =	$21
00000000 =00000023                  respawn_index =		$23
00000000 =00000028                  subtype =		$28
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; conventions specific to sonic/tails (Obj01, Obj02, and ObjDB):
00000000                            ; note: $1F, $20, and $21 are unused and available
00000000 =00000014                  inertia =		$14 ; and $15 ; directionless representation of speed... not updated in the air
00000000 =00000027                  flip_angle =		$27 ; angle about the x=0 axis (360 degrees = 256) (twist/tumble)
00000000 =00000028                  air_left =		$28
00000000 =00000029                  flip_turned =		$29 ; 0 for normal, 1 to invert flipping (it's a 180 degree rotation about the axis of Sonic's spine, so he stays in the same position but looks turned around)
00000000 =0000002A                  obj_control =		$2A ; 0 for normal, 1 for hanging or for resting on a flipper, $81 for going through CNZ/OOZ/MTZ tubes or stopped in CNZ cages or stoppers or flying if Tails
00000000 =0000002B                  status_secondary =	$2B
00000000 =0000002C                  flips_remaining =	$2C ; number of flip revolutions remaining
00000000 =0000002D                  flip_speed =		$2D ; number of flip revolutions per frame / 256
00000000 =0000002E                  move_lock =		$2E ; and $2F ; horizontal control lock, counts down to 0
00000000 =00000030                  invulnerable_time =	$30 ; and $31 ; time remaining until you stop blinking
00000000 =00000032                  invincibility_time =	$32 ; and $33 ; remaining
00000000 =00000034                  speedshoes_time =	$34 ; and $35 ; remaining
00000000 =00000036                  next_tilt =		$36 ; angle on ground in front of sprite
00000000 =00000037                  tilt =			$37 ; angle on ground
00000000 =00000038                  stick_to_convex =	$38 ; 0 for normal, 1 to make Sonic stick to convex surfaces like the rotating discs in Sonic 1 and 3 (unused in Sonic 2 but fully functional)
00000000 =00000039                  spindash_flag =		$39 ; 0 for normal, 1 for charging a spindash or forced rolling
00000000 =0000003A                  spindash_counter =	$3A ; and $3B
00000000 =0000003C                  jumping =		$3C
00000000 =0000003D                  interact =		$3D ; RAM address of the last object Sonic stood on, minus $FFFFB000 and divided by $40
00000000 =0000003E                  layer =			$3E ; collision plane, track switching...
00000000 =0000003F                  layer_plus =		$3F ; always same as layer+1 ?? used for collision somehow
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; conventions followed by several objects but NOT sonic/tails:
00000000 =0000000A                  y_pixel =		2+x_pos ; and 3+x_pos ; y coordinate for objects using screen-space coordinate system
00000000 =00000008                  x_pixel =		x_pos ; and 1+x_pos ; x coordinate for objects using screen-space coordinate system
00000000 =0000003E                  parent =		$3E ; and $3F ; address of object that owns or spawned this one, if applicable
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; unknown or inconsistently used offsets that are not applicable to sonic/tails:
00000000                            ; (provided because rearrangement of the above values sometimes requires making space in here too)
00000000 =0000000A                  objoff_A =		2+x_pos ; note: x_pos can be 4 bytes, but sometimes the last 2 bytes of x_pos are used for other unrelated things
00000000 =0000000B                  objoff_B =		3+x_pos
00000000 =0000000E                  objoff_E =		2+y_pos
00000000 =0000000F                  objoff_F =		3+y_pos
00000000 =00000014                  objoff_14 =		$14
00000000 =00000015                  objoff_15 =		$15
00000000 =0000001F                  objoff_1F =		$1F
00000000 =00000027                  objoff_27 =		$27
00000000 =00000028                  objoff_28 =		$28 ; overlaps subtype, but a few objects use it for other things anyway
00000000 =00000029                  objoff_29 =		$29
00000000 =0000002A                  objoff_2A =		$2A
00000000 =0000002B                  objoff_2B =		$2B
00000000 =0000002C                  objoff_2C =		$2C
00000000 =0000002D                  objoff_2D =		$2D
00000000 =0000002E                  objoff_2E =		$2E
00000000 =0000002F                  objoff_2F =		$2F
00000000 =00000030                  objoff_30 =		$30
00000000 =00000031                  objoff_31 =		$31
00000000 =00000032                  objoff_32 =		$32
00000000 =00000033                  objoff_33 =		$33
00000000 =00000034                  objoff_34 =		$34
00000000 =00000035                  objoff_35 =		$35
00000000 =00000036                  objoff_36 =		$36
00000000 =00000037                  objoff_37 =		$37
00000000 =00000038                  objoff_38 =		$38
00000000 =00000039                  objoff_39 =		$39
00000000 =0000003A                  objoff_3A =		$3A
00000000 =0000003B                  objoff_3B =		$3B
00000000 =0000003C                  objoff_3C =		$3C
00000000 =0000003D                  objoff_3D =		$3D
00000000 =0000003E                  objoff_3E =		$3E
00000000 =0000003F                  objoff_3F =		$3F
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; property of all objects:
00000000 =00000040                  next_object =		$40 ; the size of an object
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; RAM variables
00000000 =FFFF0000                  RAM_Start =			$FFFF0000
00000000 =FFFF0000                  Metablock_Table =		$FFFF0000
00000000 =FFFF8000                  Level_Layout =			$FFFF8000
00000000 =FFFF9000                  Block_Table =			$FFFF9000
00000000 =FFFFAA00                  Decomp_Buffer =			$FFFFAA00
00000000 =FFFFAC00                  Sprite_Table_Input = 		$FFFFAC00 ; in custom format before being converted and stored in Sprite_Table/Sprite_Table_2
00000000 =FFFFB000                  Object_RAM =			$FFFFB000 ; through $FFFFD5FF
00000000 =FFFFB000                  MainCharacter =			$FFFFB000 ; first object (usually Sonic except in a Tails Alone game)
00000000 =FFFFB040                  Sidekick =			$FFFFB040 ; second object (Tails in a Sonic and Tails game)
00000000 =FFFFD000                  Tails_Tails =			$FFFFD000 ; address of the Tail's Tails object
00000000 =FFFFD100                  Sonic_Dust =			$FFFFD100
00000000 =FFFFD140                  Tails_Dust =			$FFFFD140
00000000                            
00000000 =FFFFD000                  PNT_Buffer =			$FFFFD000 ; in special stage
00000000 =FFFFD600                  Primary_Collision =		$FFFFD600
00000000 =FFFFD700                  Horiz_Scroll_Buf_2 =		$FFFFD700 ; in special stage
00000000 =FFFFD900                  Secondary_Collision =		$FFFFD900
00000000 =FFFFDC00                  VDP_Command_Buffer =		$FFFFDC00 ; stores VDP commands to issue the next time ProcessDMAQueue is called
00000000 =FFFFDCFC                  VDP_Command_Buffer_Slot =	$FFFFDCFC ; stores the address of the next open slot for a queued VDP command
00000000 =FFFFDD00                  Sprite_Table_2 =		$FFFFDD00 ; Sprite attribute table buffer for the bottom split screen in 2-player mode
00000000 =FFFFE000                  Horiz_Scroll_Buf =		$FFFFE000
00000000 =FFFFE400                  Sonic_Stat_Record_Buf =		$FFFFE400
00000000 =FFFFE500                  Sonic_Pos_Record_Buf =		$FFFFE500
00000000 =FFFFE600                  Tails_Pos_Record_Buf =		$FFFFE600
00000000 =FFFFE800                  Ring_Positions =		$FFFFE800
00000000 =FFFFEE00                  Camera_RAM =			$FFFFEE00
00000000 =FFFFEE00                  Camera_X_pos =			$FFFFEE00
00000000 =FFFFEE04                  Camera_Y_pos =			$FFFFEE04
00000000 =FFFFEEC6                  Camera_Max_Y_pos =		$FFFFEEC6
00000000 =FFFFEEC8                  Camera_Min_X_pos =		$FFFFEEC8
00000000 =FFFFEECA                  Camera_Max_X_pos =		$FFFFEECA
00000000 =FFFFEECC                  Camera_Min_Y_pos =		$FFFFEECC
00000000 =FFFFEECE                  Camera_Max_Y_pos_now =		$FFFFEECE ; was "Camera_max_scroll_spd"...
00000000 =FFFFEED2                  Sonic_Pos_Record_Index =	$FFFFEED2 ; into Sonic_Pos_Record_Buf and Sonic_Stat_Record_Buf
00000000 =FFFFEED6                  Tails_Pos_Record_Index =	$FFFFEED6 ; into Tails_Pos_Record_Buf
00000000 =FFFFEED8                  Camera_Y_pos_bias =		$FFFFEED8 ; added to y position for lookup/lookdown, $60 is center
00000000 =FFFFEEDA                  Camera_Y_pos_bias_2P =		$FFFFEEDA ; for Tails
00000000 =FFFFEEDF                  Dynamic_Resize_Routine =	$FFFFEEDF
00000000 =FFFFEEF8                  Tails_Min_X_pos =		$FFFFEEF8
00000000 =FFFFEEFA                  Tails_Max_X_pos =		$FFFFEEFA
00000000 =FFFFEEFE                  Tails_Max_Y_pos =		$FFFFEEFE
00000000                            
00000000 =FFFFF000                  Underwater_palette_2 = 		$FFFFF000 ; not sure what it's used for but it's only used when there's water
00000000 =FFFFF080                  Underwater_palette = 		$FFFFF080 ; main palette for underwater parts of the screen
00000000 =FFFFF0E0                  Underwater_palette_line4 = 	$FFFFF0E0
00000000                            
00000000 =FFFFF600                  Game_Mode =			$FFFFF600 ; 1 byte ; see GameModesArray (master level trigger, Mstr_Lvl_Trigger)
00000000 =FFFFF602                  Ctrl_1_Logical =		$FFFFF602 ; 2 bytes
00000000 =FFFFF602                  Ctrl_1_Held_Logical =		$FFFFF602 ; 1 byte
00000000 =FFFFF603                  Ctrl_1_Press_Logical =		$FFFFF603 ; 1 byte
00000000 =FFFFF604                  Ctrl_1 =			$FFFFF604 ; 2 bytes
00000000 =FFFFF604                  Ctrl_1_Held =			$FFFFF604 ; 1 byte ; (pressed and held were switched around before)
00000000 =FFFFF605                  Ctrl_1_Press =			$FFFFF605 ; 1 byte
00000000 =FFFFF606                  Ctrl_2 =			$FFFFF606 ; 2 bytes
00000000 =FFFFF606                  Ctrl_2_Held =			$FFFFF606 ; 1 byte
00000000 =FFFFF607                  Ctrl_2_Press =			$FFFFF607 ; 1 byte
00000000 =FFFFF614                  Demo_Time_left =		$FFFFF614 ; 2 bytes
00000000                            
00000000 =FFFFF616                  Vscroll_Factor =		$FFFFF616
00000000 =FFFFF624                  Hint_counter_reserve =		$FFFFF624 ; Must contain a VDP command word, preferably a write to register $0A. Executed every V-INT.
00000000 =FFFFF62A                  Delay_Time =			$FFFFF62A ; number of frames to delay the game
00000000 =FFFFF636                  RNG_seed =			$FFFFF636 ; used for random number generation
00000000 =FFFFF63A                  Game_paused =			$FFFFF63A
00000000 =FFFFF640                  DMA_data_thunk =		$FFFFF640 ; Used as a RAM holder for the final DMA command word. Data will NOT be preserved across V-INTs, so consider this space reserved.
00000000                            
00000000 =FFFFF646                  Water_Level_1 =			$FFFFF646
00000000 =FFFFF648                  Water_Level_2 =			$FFFFF648
00000000 =FFFFF64A                  Water_Level_3 =			$FFFFF64A
00000000 =FFFFF64D                  Water_routine =			$FFFFF64D
00000000 =FFFFF64E                  Water_move =			$FFFFF64E
00000000 =FFFFF64C                  Water_on =			$FFFFF64C ; is set based on Water_flag
00000000 =FFFFF650                  New_Water_Level =		$FFFFF650
00000000 =FFFFF652                  Water_change_speed =		$FFFFF652
00000000 =FFFFF65E                  Palette_frame_count =		$FFFFF65E
00000000                            
00000000 =FFFFF66A                  Ctrl_2_Logical =		$FFFFF66A ; 2 bytes
00000000 =FFFFF66A                  Ctrl_2_Held_Logical =		$FFFFF66A ; 1 byte
00000000 =FFFFF66B                  Ctrl_2_Press_Logical =		$FFFFF66B ; 1 byte
00000000 =FFFFF66C                  Sonic_Look_delay_counter = 	$FFFFF66C ; 2 bytes
00000000 =FFFFF66E                  Tails_Look_delay_counter = 	$FFFFF66E ; 2 bytes
00000000 =FFFFF670                  Super_Sonic_frame_count =	$FFFFF670
00000000 =FFFFF680                  Plc_Buffer =			$FFFFF680 ; Pattern load queue
00000000                            
00000000 =FFFFF700                  Misc_Variables =		$FFFFF700
00000000                            
00000000                            ; extra variables for the second player (CPU) in 1-player mode
00000000 =FFFFF702                  Tails_control_counter =		$FFFFF702 ; how long until the CPU takes control
00000000 =FFFFF704                  Tails_respawn_counter =		$FFFFF704
00000000 =FFFFF708                  Tails_CPU_routine =		$FFFFF708
00000000 =FFFFF70A                  Tails_CPU_target_x =		$FFFFF70A
00000000 =FFFFF70C                  Tails_CPU_target_y =		$FFFFF70C
00000000 =FFFFF70E                  Tails_interact_ID =		$FFFFF70E ; object ID of last object stood on
00000000                            
00000000 =FFFFF711                  Level_started_flag =		$FFFFF711
00000000 =FFFFF71A                  CNZ_Bumper_routine =		$FFFFF71A
00000000 =FFFFF72C                  Dirty_flag =			$FFFFF72C ; if whole screen needs to redraw
00000000 =FFFFF730                  Water_flag =			$FFFFF730 ; if the level has water or oil
00000000                            
00000000 =FFFFF760                  Sonic_top_speed =		$FFFFF760
00000000 =FFFFF762                  Sonic_acceleration =		$FFFFF762
00000000 =FFFFF764                  Sonic_deceleration =		$FFFFF764
00000000 =FFFFF76C                  Obj_placement_routine =		$FFFFF76C
00000000 =FFFFF770                  Obj_load_addr_0 =		$FFFFF770
00000000 =FFFFF774                  Obj_load_addr_1 =		$FFFFF774
00000000 =FFFFF778                  Obj_load_addr_2 =		$FFFFF778
00000000 =FFFFF77C                  Obj_load_addr_3 =		$FFFFF77C
00000000 =FFFFF790                  Demo_button_index =		$FFFFF790 ; index into button press demo data, for player 1
00000000 =FFFFF792                  Demo_press_counter =		$FFFFF792 ; frames remaining until next button press, for player 1
00000000 =FFFFF732                  Demo_button_index_2P =		$FFFFF732 ; index into button press demo data, for player 2
00000000 =FFFFF734                  Demo_press_counter_2P =		$FFFFF734 ; frames remaining until next button press, for player 2
00000000 =FFFFF796                  Collision_addr =		$FFFFF796
00000000 =FFFFF7AA                  Current_Boss_ID =		$FFFFF7AA
00000000 =FFFFF7CC                  Control_Locked =		$FFFFF7CC
00000000 =FFFFF7D0                  Chain_Bonus_counter =		$FFFFF7D0 ; counts up when you destroy things that give points, resets when you touch the ground
00000000 =FFFFF7D2                  Bonus_Countdown_1 =		$FFFFF7D2 ; level results time bonus or special stage sonic ring bonus
00000000 =FFFFF7D4                  Bonus_Countdown_2 =		$FFFFF7D4 ; level results ring bonus or special stage tails ring bonus
00000000 =FFFFF7D6                  Update_Bonus_score =		$FFFFF7D6
00000000 =FFFFF7DA                  Camera_X_pos_coarse =		$FFFFF7DA ; (Camera_X_pos - 128) / 256
00000000                            
00000000 =FFFFF800                  Sprite_Table =			$FFFFF800 ; Sprite attribute table buffer
00000000                            
00000000 =FFFFFB00                  Normal_palette =		$FFFFFB00
00000000 =FFFFFB20                  Normal_palette_line2 =		$FFFFFB20
00000000 =FFFFFB40                  Normal_palette_line3 =		$FFFFFB40
00000000 =FFFFFB60                  Normal_palette_line4 =		$FFFFFB60
00000000 =FFFFFB80                  Second_palette =		$FFFFFB80
00000000 =FFFFFBA0                  Second_palette_line2 =		$FFFFFBA0
00000000 =FFFFFBC0                  Second_palette_line3 =		$FFFFFBC0
00000000 =FFFFFBE0                  Second_palette_line4 =		$FFFFFBE0
00000000                            
00000000 =FFFFFC00                  Object_Respawn_Table =		$FFFFFC00
00000000 =FFFFFE00                  System_Stack =			$FFFFFE00
00000000 =FFFFFE02                  Level_Inactive_flag = 		$FFFFFE02 ; (2 bytes)
00000000 =FFFFFE04                  Timer_frames =			$FFFFFE04 ; (2 bytes)
00000000 =FFFFFE06                  Debug_object =			$FFFFFE06
00000000 =FFFFFE08                  Debug_placement_mode =		$FFFFFE08
00000000 =FFFFFE10                  Current_ZoneAndAct =		$FFFFFE10 ; 2 bytes
00000000 =FFFFFE10                  Current_Zone =			$FFFFFE10 ; 1 byte
00000000 =FFFFFE11                  Current_Act =			$FFFFFE11 ; 1 byte
00000000 =FFFFFE12                  Life_count =			$FFFFFE12
00000000 =FFFFFE16                  Current_Special_Stage =		$FFFFFE16
00000000 =FFFFFE18                  Continue_count =		$FFFFFE18
00000000 =FFFFFE19                  Super_Sonic_flag =		$FFFFFE19
00000000 =FFFFFE1A                  Time_Over_flag =		$FFFFFE1A
00000000 =FFFFFE1B                  Extra_life_flags =		$FFFFFE1B
00000000                            
00000000                            ; If set, the respective HUD element will be updated.
00000000 =FFFFFE1C                  Update_HUD_lives =		$FFFFFE1C
00000000 =FFFFFE1D                  Update_HUD_rings =		$FFFFFE1D
00000000 =FFFFFE1E                  Update_HUD_timer =		$FFFFFE1E
00000000 =FFFFFE1F                  Update_HUD_score =		$FFFFFE1F
00000000                            
00000000 =FFFFFE20                  Ring_count =			$FFFFFE20 ; 2 bytes
00000000 =FFFFFE22                  Timer =				$FFFFFE22 ; 4 bytes
00000000 =FFFFFE22                  Timer_minute_word =		$FFFFFE22 ; 2 bytes
00000000 =FFFFFE23                  Timer_minute =			$FFFFFE23 ; 1 byte
00000000 =FFFFFE24                  Timer_second =			$FFFFFE24 ; 1 byte
00000000 =FFFFFE25                  Timer_centisecond =		$FFFFFE25 ; 1 byte
00000000 =FFFFFE26                  Score =				$FFFFFE26 ; 4 bytes
00000000 =FFFFFE30                  Last_star_pole_hit =		$FFFFFE30 ; 1 byte -- max activated starpole ID in this act
00000000                            
00000000 =FFFFFE31                  Saved_Last_star_pole_hit =	$FFFFFE31
00000000 =FFFFFE32                  Saved_x_pos =			$FFFFFE32
00000000 =FFFFFE34                  Saved_y_pos =			$FFFFFE34
00000000 =FFFFFE36                  Saved_Ring_count =		$FFFFFE36
00000000 =FFFFFE38                  Saved_Timer =			$FFFFFE38
00000000 =FFFFFE3C                  Saved_art_tile =		$FFFFFE3C
00000000 =FFFFFE3E                  Saved_layer =			$FFFFFE3E
00000000 =FFFFFE40                  Saved_Camera_X_pos =		$FFFFFE40
00000000 =FFFFFE42                  Saved_Camera_Y_pos =		$FFFFFE42
00000000 =FFFFFE50                  Saved_Water_Level =		$FFFFFE50
00000000 =FFFFFE52                  Saved_Water_routine =		$FFFFFE52
00000000 =FFFFFE53                  Saved_Water_move =		$FFFFFE53
00000000 =FFFFFE54                  Saved_Extra_life_flags =	$FFFFFE54
00000000 =FFFFFE55                  Saved_Extra_life_flags_2P =	$FFFFFE55
00000000 =FFFFFE56                  Saved_Camera_Max_Y_pos =	$FFFFFE56
00000000 =FFFFFE58                  Saved_Dynamic_Resize_Routine =	$FFFFFE58
00000000                            
00000000 =FFFFFEA0                  Logspike_anim_counter =		$FFFFFEA0
00000000 =FFFFFEA1                  Logspike_anim_frame =		$FFFFFEA1
00000000 =FFFFFEA2                  Rings_anim_counter =		$FFFFFEA2
00000000 =FFFFFEA3                  Rings_anim_frame =		$FFFFFEA3
00000000 =FFFFFEA4                  Unknown_anim_counter =		$FFFFFEA4 ; I think this was $FFFFFEC4 in the alpha
00000000 =FFFFFEA5                  Unknown_anim_frame =		$FFFFFEA5
00000000 =FFFFFEA6                  Ring_spill_anim_counter =	$FFFFFEA6 ; scattered rings
00000000 =FFFFFEA7                  Ring_spill_anim_frame =		$FFFFFEA7
00000000 =FFFFFEA8                  Ring_spill_anim_accum =		$FFFFFEA8
00000000                            
00000000                            ; values for the second player (some of these only apply to 2-player games)
00000000 =FFFFFEC0                  Tails_top_speed =		$FFFFFEC0 ; Tails_max_vel
00000000 =FFFFFEC2                  Tails_acceleration =		$FFFFFEC2
00000000 =FFFFFEC4                  Tails_deceleration =		$FFFFFEC4
00000000 =FFFFFEC6                  Life_count_2P =			$FFFFFEC6
00000000 =FFFFFEC7                  Extra_life_flags_2P =		$FFFFFEC7
00000000 =FFFFFEC8                  Update_HUD_lives_2P =		$FFFFFEC8
00000000 =FFFFFEC9                  Update_HUD_rings_2P =		$FFFFFEC9
00000000 =FFFFFECA                  Update_HUD_timer_2P =		$FFFFFECA
00000000 =FFFFFECB                  Update_HUD_score_2P =		$FFFFFECB ; mostly unused
00000000 =FFFFFECC                  Time_Over_flag_2P =		$FFFFFECC
00000000 =FFFFFED0                  Ring_count_2P =			$FFFFFED0
00000000 =FFFFFED2                  Timer_2P =			$FFFFFED2 ; 4 bytes
00000000 =FFFFFED2                  Timer_minute_word_2P =		$FFFFFED2 ; 2 bytes
00000000 =FFFFFED3                  Timer_minute_2P =		$FFFFFED3 ; 1 byte
00000000 =FFFFFED4                  Timer_second_2P =		$FFFFFED4 ; 1 byte
00000000 =FFFFFED5                  Timer_centisecond_2P =		$FFFFFED5 ; 1 byte
00000000 =FFFFFED6                  Score_2P =			$FFFFFED6
00000000 =FFFFFEE0                  Last_star_pole_hit_2P =		$FFFFFEE0
00000000                            
00000000 =FFFFFEE1                  Saved_Last_star_pole_hit_2P =	$FFFFFEE1
00000000 =FFFFFEE2                  Saved_x_pos_2P =		$FFFFFEE2
00000000 =FFFFFEE4                  Saved_y_pos_2P =		$FFFFFEE4
00000000 =FFFFFEE6                  Saved_Ring_count_2P =		$FFFFFEE6
00000000 =FFFFFEE8                  Saved_Timer_2P =		$FFFFFEE8
00000000 =FFFFFEEC                  Saved_art_tile_2P =		$FFFFFEEC
00000000 =FFFFFEEE                  Saved_layer_2P =		$FFFFFEEE
00000000                            
00000000 =FFFFFEF8                  Loser_Time_Left =		$FFFFFEF8
00000000 =FFFFFF10                  Results_Screen_2P =		$FFFFFF10 ; 0 = act, 1 = zone, 2 = game, 3 = SS, 4 = SS all
00000000 =FFFFFF20                  Results_Data_2P =		$FFFFFF20 ; $18 bytes
00000000 =FFFFFF20                  EHZ_Results_2P =		$FFFFFF20 ; 6 bytes
00000000 =FFFFFF26                  MCZ_Results_2P =		$FFFFFF26 ; 6 bytes
00000000 =FFFFFF2C                  CNZ_Results_2P =		$FFFFFF2C ; 6 bytes
00000000 =FFFFFF32                  SS_Results_2P =			$FFFFFF32 ; 6 bytes
00000000 =FFFFFF38                  SS_Total_Won =			$FFFFFF38 ; 2 bytes (player 1 then player 2)
00000000 =FFFFFF40                  Perfect_rings_left =		$FFFFFF40
00000000 =FFFFFF70                  Player_mode =			$FFFFFF70 ; 0 = Sonic and Tails, 1 = Sonic, 2 = Tails
00000000 =FFFFFF72                  Player_option =			$FFFFFF72 ; 0 = Sonic and Tails, 1 = Sonic, 2 = Tails
00000000                            
00000000 =FFFFFF74                  Two_player_items =		$FFFFFF74
00000000 =FFFFFF82                  Level_select_zone =		$FFFFFF82
00000000 =FFFFFF84                  Sound_test_sound =		$FFFFFF84
00000000 =FFFFFF86                  Title_screen_option =		$FFFFFF86
00000000 =FFFFFF88                  Current_Zone_2P =		$FFFFFF88
00000000 =FFFFFF89                  Current_Act_2P =		$FFFFFF89
00000000 =FFFFFF8A                  Two_player_mode_copy =		$FFFFFF8A
00000000 =FFFFFF8C                  Options_menu_box =		$FFFFFF8C
00000000 =FFFFFF90                  Level_Music =			$FFFFFF90
00000000 =FFFFFF98                  Game_Over_2P =			$FFFFFF98
00000000 =FFFFFFB0                  Got_Emerald =			$FFFFFFB0
00000000 =FFFFFFB1                  Emerald_count =			$FFFFFFB1
00000000 =FFFFFFB2                  Got_Emeralds_array =		$FFFFFFB2 ; 7 bytes
00000000 =FFFFFFC0                  Next_Extra_life_score =		$FFFFFFC0
00000000 =FFFFFFC4                  Next_Extra_life_score_2P =	$FFFFFFC4
00000000 =FFFFFFC8                  Level_Has_Signpost =		$FFFFFFC8 ; 1 byte ; 1 = signpost, 0 = boss or nothing
00000000 =FFFFFFD0                  Level_select_flag =		$FFFFFFD0
00000000 =FFFFFFD4                  Correct_cheat_entries =		$FFFFFFD4
00000000 =FFFFFFD6                  Correct_cheat_entries_2 =	$FFFFFFD6 ; for 14 continues or 7 emeralds codes
00000000 =FFFFFFD8                  Two_player_mode =		$FFFFFFD8 ; flag (0 for main game)
00000000                            
00000000                            ; Values in these variables are passed to the sound driver during V-INT.
00000000                            ; They use a playlist index, not a sound test index.
00000000 =FFFFFFE0                  Music_to_play =			$FFFFFFE0
00000000 =FFFFFFE1                  SFX_to_play =			$FFFFFFE1 ; normal
00000000 =FFFFFFE2                  SFX_to_play_2 =			$FFFFFFE2 ; alternating stereo
00000000 =FFFFFFE4                  Music_to_play_2 =		$FFFFFFE4 ; alternate (higher priority?) slot
00000000                            
00000000 =FFFFFFF0                  Demo_mode_flag =		$FFFFFFF0 ; 1 if a demo is playing (2 bytes)
00000000 =FFFFFFF2                  Demo_number =			$FFFFFFF2 ; which demo will play next (2 bytes)
00000000 =FFFFFFF8                  Graphics_Flags =		$FFFFFFF8 ; misc. bitfield
00000000 =FFFFFFFC                  Checksum_fourcc =		$FFFFFFFC ; (4 bytes)
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; VDP addressses
00000000 =00C00000                  VDP_data_port =			$C00000 ; (8=r/w, 16=r/w)
00000000 =00C00004                  VDP_control_port =		$C00004 ; (8=r/w, 16=r/w)
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Z80 addresses
00000000 =00A00000                  Z80_RAM =			$A00000 ; start of Z80 RAM
00000000 =00A02000                  Z80_RAM_End =			$A02000 ; end of non-reserved Z80 RAM
00000000 =00A10001                  Z80_Version =			$A10001
00000000 =00A10002                  Z80_Port_1_Data =		$A10002
00000000 =00A10008                  Z80_Port_1_Control =		$A10008
00000000 =00A1000A                  Z80_Port_2_Control =		$A1000A
00000000 =00A1000C                  Z80_Expansion_Control =		$A1000C
00000000 =00A11100                  Z80_Bus_Request =		$A11100
00000000 =00A11200                  Z80_Reset =			$A11200
00000000                            
00000000 =00A14000                  Security_Addr =			$A14000	
00000000 =00A14000                  Security_Addr =			$A14000	
00000000                            StartOfRom:
00000000 00FF FE00 0000 0000 0000+  Vectors:    dc.l $FFFE00, EntryPoint, BusError, AddressError
00000010 0000 0000 0000 0000 0000+          dc.l IllegalInstr, ZeroDivide, ChkInstr, TrapvInstr
00000020 0000 0000 0000 0000 0000+          dc.l PrivilegeViol, Trace, Line1010Emu, Line1111Emu
00000030 0000 0000 0000 0000 0000+          dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000040 0000 0000 0000 0000 0000+          dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000050 0000 0000 0000 0000 0000+          dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000060 0000 0000 0000 0000 0000+          dc.l ErrorExcept, ErrorTrap, ErrorTrap, ErrorTrap
00000070 0000 0000 0000 0000 0000+          dc.l PalToCRAM,    ErrorTrap, loc_B10, ErrorTrap
00000080 0000 0000 0000 0000 0000+          dc.l ErrorTrap, ErrorTrap, ErrorTrap, ErrorTrap
00000090 0000 0000 0000 0000 0000+          dc.l ErrorTrap, ErrorTrap, ErrorTrap, ErrorTrap
000000A0 0000 0000 0000 0000 0000+          dc.l ErrorTrap, ErrorTrap, ErrorTrap, ErrorTrap
000000B0 0000 0000 0000 0000 0000+          dc.l ErrorTrap, ErrorTrap, ErrorTrap, ErrorTrap
000000C0 0000 0000 0000 0000 0000+          dc.l ErrorTrap, ErrorTrap, ErrorTrap, ErrorTrap
000000D0 0000 0000 0000 0000 0000+          dc.l ErrorTrap, ErrorTrap, ErrorTrap, ErrorTrap
000000E0 0000 0000 0000 0000 0000+          dc.l ErrorTrap, ErrorTrap, ErrorTrap, ErrorTrap
000000F0 0000 0000 0000 0000 0000+          dc.l ErrorTrap, ErrorTrap, ErrorTrap, ErrorTrap
00000100                            
00000100 5345 4741 204D 4547 4120+  Console:	dc.b 'SEGA MEGA DRIVE ' ; Hardware system ID
00000110 2843 2953 4547 4120 3139+  Date:		dc.b '(C)SEGA 1991.APR' ; Release date
00000120 534F 4E49 4320 5448 4520+  Title_Local:	dc.b 'SONIC THE               HEDGEHOG 4 EPISODE I    ' ; Domestic name
00000150 534F 4E49 4320 5448 4520+  Title_Int:	dc.b 'SONIC THE               HEDGEHOG 4 EPISODE I    ' ; International name
00000180 474D 2030 3030 3031 3030+  Serial:		dc.b 'GM 00001009-00'   ; Serial/version number
0000018E 0000                       Checksum:	dc.w 0
00000190 4A20 2020 2020 2020 2020+  		dc.b 'J               ' ; I/O support
000001A0 0000 0000                  RomStartLoc:	dc.l StartOfRom		; ROM start
000001A4 0000 0000                  RomEndLoc:	dc.l EndOfRom-1		; ROM end
000001A8 00FF 0000                  RamStartLoc:	dc.l $FF0000		; RAM start
000001AC 00FF FFFF                  RamEndLoc:	dc.l $FFFFFF		; RAM end
000001B0 2020 2020                  SRAMSupport:	dc.l $20202020		; change to $5241E020 to create	SRAM
000001B4 2020 2020                  		dc.l $20202020		; SRAM start
000001B8 2020 2020                  		dc.l $20202020		; SRAM end
000001BC 2020 2020 2020 2020 2020+  Notes:		dc.b '                                                    '
000001F0 4A55 4520 2020 2020 2020+  Region:		dc.b 'JUE             ' ; Region
00000200                            
00000200                            ; ===========================================================================
00000200                            
00000200                            ErrorTrap:
00000200 4E71                       		nop	
00000202 4E71                       		nop	
00000204 60FA                       		bra.s	ErrorTrap
00000206                            ; ===========================================================================
00000206                            
00000206                            EntryPoint:
00000206 4AB9 00A1 0008             		tst.l	($A10008).l	; test port A control
0000020C 6600                       		bne.s	PortA_Ok
0000020E 4A79 00A1 000C             		tst.w	($A1000C).l	; test port C control
00000214                            
00000214                            PortA_Ok:
00000214 6600                       		bne.s	PortC_Ok
00000216 4BFA 0000                  		lea	SetupValues(pc),a5
0000021A 4C9D 00E0                  		movem.w	(a5)+,d5-d7
0000021E 4CDD 1F00                  		movem.l	(a5)+,a0-a4
00000222 1029 EF01                  		move.b	-$10FF(a1),d0	; get hardware version
00000226 0200 000F                  		andi.b	#$F,d0
0000022A 6700                       		beq.s	SkipSecurity
0000022C 237C 5345 4741 2F00        		move.l	#'SEGA',$2F00(a1)
00000234                            
00000234                            SkipSecurity:
00000234 3014                       		move.w	(a4),d0		; check	if VDP works
00000236 7000                       		moveq	#0,d0
00000238 2C40                       		movea.l	d0,a6
0000023A 4E66                       		move.l	a6,usp		; set usp to $0
0000023C 7217                       		moveq	#$17,d1
0000023E                            
0000023E                            VDPInitLoop:
0000023E 1A1D                       		move.b	(a5)+,d5	; add $8000 to value
00000240 3885                       		move.w	d5,(a4)		; move value to	VDP register
00000242 DA47                       		add.w	d7,d5		; next register
00000244 51C9 FFF8                  		dbf	d1,VDPInitLoop
00000248 289D                       		move.l	(a5)+,(a4)
0000024A 3680                       		move.w	d0,(a3)		; clear	the screen
0000024C 3287                       		move.w	d7,(a1)		; stop the Z80
0000024E 3487                       		move.w	d7,(a2)		; reset	the Z80
00000250                            
00000250                            WaitForZ80:
00000250 0111                       		btst	d0,(a1)		; has the Z80 stopped?
00000252 66FC                       		bne.s	WaitForZ80	; if not, branch
00000254 7425                       		moveq	#$25,d2
00000256                            
00000256                            Z80InitLoop:
00000256 10DD                       		move.b	(a5)+,(a0)+
00000258 51CA FFFC                  		dbf	d2,Z80InitLoop
0000025C 3480                       		move.w	d0,(a2)
0000025E 3280                       		move.w	d0,(a1)		; start	the Z80
00000260 3487                       		move.w	d7,(a2)		; reset	the Z80
00000262                            
00000262                            ClrRAMLoop:
00000262 2D00                       		move.l	d0,-(a6)
00000264 51CE FFFC                  		dbf	d6,ClrRAMLoop	; clear	the entire RAM
00000268 289D                       		move.l	(a5)+,(a4)	; set VDP display mode and increment
0000026A 289D                       		move.l	(a5)+,(a4)	; set VDP to CRAM write
0000026C 761F                       		moveq	#$1F,d3
0000026E                            
0000026E                            ClrCRAMLoop:
0000026E 2680                       		move.l	d0,(a3)
00000270 51CB FFFC                  		dbf	d3,ClrCRAMLoop	; clear	the CRAM
00000274 289D                       		move.l	(a5)+,(a4)
00000276 7813                       		moveq	#$13,d4
00000278                            
00000278                            ClrVDPStuff:
00000278 2680                       		move.l	d0,(a3)
0000027A 51CC FFFC                  		dbf	d4,ClrVDPStuff
0000027E 7A03                       		moveq	#3,d5
00000280                            
00000280                            PSGInitLoop:
00000280 175D 0011                  		move.b	(a5)+,$11(a3)	; reset	the PSG
00000284 51CD FFFA                  		dbf	d5,PSGInitLoop
00000288 3480                       		move.w	d0,(a2)
0000028A 4CD6 7FFF                  		movem.l	(a6),d0-a6	; clear	all registers
0000028E 46FC 2700                  		move	#$2700,sr	; set the sr
00000292                            
00000292                            PortC_Ok:
00000292 6000                       		bra.s	GameProgram
00000294                            ; ===========================================================================
00000294 8000                       SetupValues:	dc.w $8000		; XREF: PortA_Ok
00000296 3FFF                       		dc.w $3FFF
00000298 0100                       		dc.w $100
0000029A                            
0000029A 00A0 0000                  		dc.l $A00000		; start	of Z80 RAM
0000029E 00A1 1100                  		dc.l $A11100		; Z80 bus request
000002A2 00A1 1200                  		dc.l $A11200		; Z80 reset
000002A6 00C0 0000                  		dc.l $C00000
000002AA 00C0 0004                  		dc.l $C00004		; address for VDP registers
000002AE                            
000002AE 0414 303C                  		dc.b 4,	$14, $30, $3C	; values for VDP registers
000002B2 076C 0000                  		dc.b 7,	$6C, 0,	0
000002B6 0000 FF00                  		dc.b 0,	0, $FF,	0
000002BA 8137 0001                  		dc.b $81, $37, 0, 1
000002BE 0100 00FF                  		dc.b 1,	0, 0, $FF
000002C2 FF00 0080                  		dc.b $FF, 0, 0,	$80
000002C6                            
000002C6 4000 0080                  		dc.l $40000080
000002CA                            
000002CA AF01 D91F 1127 0021 2600+  		dc.b $AF, 1, $D9, $1F, $11, $27, 0, $21, $26, 0, $F9, $77 ; Z80	instructions
000002D6 EDB0 DDE1 FDE1 ED47 ED4F   		dc.b $ED, $B0, $DD, $E1, $FD, $E1, $ED,	$47, $ED, $4F
000002E0 D1E1 F108 D9C1 D1E1 F1F9+  		dc.b $D1, $E1, $F1, 8, $D9, $C1, $D1, $E1, $F1,	$F9, $F3
000002EB ED56 36E9 E9               		dc.b $ED, $56, $36, $E9, $E9
000002F0                            
000002F0 8104                       		dc.w $8104		; value	for VDP	display	mode
000002F2 8F02                       		dc.w $8F02		; value	for VDP	increment
000002F4 C000 0000                  		dc.l $C0000000		; value	for CRAM write mode
000002F8 4000 0010                  		dc.l $40000010
000002FC                            
000002FC 9FBF DFFF                  		dc.b $9F, $BF, $DF, $FF	; values for PSG channel volumes
00000300                            ; ===========================================================================
00000300                            
00000300                            jmp_DisplaySprite:
00000300 4EF9 0000 0000             	jmp DisplaySprite
00000306                            
00000306                            GameProgram:
00000306 4A79 00C0 0004             		tst.w	($C00004).l
0000030C 0839 0006 00A1 000D        		btst	#6,($A1000D).l
00000314 6700                       		beq.s	CheckSumCheck
00000316 0CB8 696E 6974 FFFC        		cmpi.l	#'init',($FFFFFFFC).w ; has checksum routine already run?
0000031E 6700 0000                  		beq.w	GameInit	; if yes, branch
00000322                            
00000322                            CheckSumCheck:
00000322 207C 0000 0200             		movea.l	#ErrorTrap,a0	; start	checking bytes after the header	($200)
00000328 227C 0000 01A4             		movea.l	#RomEndLoc,a1	; stop at end of ROM
0000032E 2011                       		move.l	(a1),d0
00000330 7200                       		moveq	#0,d1
00000332                            
00000332                            loc_32C:
00000332 D258                       		add.w	(a0)+,d1
00000334 B088                       		cmp.l	a0,d0
00000336 64FA                       		bcc.s	loc_32C
00000338 227C 0000 018E             		movea.l	#Checksum,a1	; read the checksum
0000033E                            	;	cmp.w	(a1),d1		; compare correct checksum to the one in ROM
0000033E                            	;	bne.w	CheckSumError	; if they don't match, branch
0000033E 4DF8 FE00                  		lea	($FFFFFE00).w,a6
00000342 7E00                       		moveq	#0,d7
00000344 3C3C 007F                  		move.w	#$7F,d6
00000348                            
00000348                            loc_348:
00000348 2CC7                       		move.l	d7,(a6)+
0000034A 51CE FFFC                  		dbf	d6,loc_348
0000034E 1039 00A1 0001             		move.b	($A10001).l,d0
00000354 0200 00C0                  		andi.b	#$C0,d0
00000358 11C0 FFF8                  		move.b	d0,($FFFFFFF8).w
0000035C 21FC 696E 6974 FFFC        		move.l	#'init',($FFFFFFFC).w ; set flag so checksum won't be run again
00000364                            
00000364                            GameInit:
00000364 4DF9 00FF 0000             		lea	($FF0000).l,a6
0000036A 7E00                       		moveq	#0,d7
0000036C 3C3C 3F7F                  		move.w	#$3F7F,d6
00000370                            
00000370                            GameClrRAM:
00000370 2CC7                       		move.l	d7,(a6)+
00000372 51CE FFFC                  		dbf	d6,GameClrRAM	; fill RAM ($0000-$FDFF) with $0
00000376 6100 0000                  		bsr.w	VDPSetupGame
0000037A 6100 0000                  		bsr.w	SoundDriverLoad
0000037E 6100 0000                  		bsr.w	JoypadInit
00000382 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set Game Mode to Sega Screen
00000388                            
00000388                            MainGameLoop:
00000388 1038 F600                  		move.b	($FFFFF600).w,d0 ; load	Game Mode
0000038C 0240 001C                  		andi.w	#$1C,d0
00000390 4EBB 0000                  		jsr	GameModeArray(pc,d0.w) ; jump to apt location in ROM
00000394 60F2                       		bra.s	MainGameLoop
00000396                            ; ===========================================================================
00000396                            ; ---------------------------------------------------------------------------
00000396                            ; Main game mode array
00000396                            ; ---------------------------------------------------------------------------
00000396                            
00000396                            GameModeArray:
00000396 6000 0000                  		bra.w	SegaScreen	; Sega Screen ($00)
0000039A                            ; ===========================================================================
0000039A 6000 0000                  		bra.w	TitleScreen	; Title	Screen ($04)
0000039E                            ; ===========================================================================
0000039E 6000 0000                  		bra.w	Level		; Demo Mode ($08)
000003A2                            ; ===========================================================================
000003A2 6000 0000                  		bra.w	Level		; Normal Level ($0C)
000003A6                            ; ===========================================================================
000003A6 6000 0000                  		bra.w	SpecialStage	; Special Stage	($10)
000003AA                            ; ===========================================================================
000003AA 6000 0000                  		bra.w	ContinueScreen	; Continue Screen ($14)
000003AE                            ; ===========================================================================
000003AE 6000 0000                  		bra.w	EndingSequence	; End of game sequence ($18)
000003B2                            ; ===========================================================================
000003B2 6000 0000                  		bra.w	Credits		; Credits ($1C)
000003B6                            ; ===========================================================================
000003B6 4E75                       		rts
000003B8                            ; ===========================================================================
000003B8                            
000003B8                            CheckSumError:
000003B8 6100 0000                  		bsr.w	VDPSetupGame
000003BC 23FC C000 0000 00C0 0004   		move.l	#$C0000000,($C00004).l ; set VDP to CRAM write
000003C6 7E3F                       		moveq	#$3F,d7
000003C8                            
000003C8                            CheckSum_Red:
000003C8 33FC 000E 00C0 0000        		move.w	#$E,($C00000).l	; fill screen with colour red
000003D0 51CF FFF6                  		dbf	d7,CheckSum_Red	; repeat $3F more times
000003D4                            
000003D4                            CheckSum_Loop:
000003D4 60FE                       		bra.s	CheckSum_Loop
000003D6                            ; ===========================================================================
000003D6                            
000003D6                            loc_43A:
000003D6 46FC 2700                  		move	#$2700,sr
000003DA 544F                       		addq.w	#2,sp
000003DC 21DF FC40                  		move.l	(sp)+,($FFFFFC40).w
000003E0 544F                       		addq.w	#2,sp
000003E2 48F8 FFFF FC00             		movem.l	d0-a7,($FFFFFC00).w
000003E8 6100 0000                  		bsr.w	ShowErrorMsg
000003EC 202F 0002                  		move.l	2(sp),d0
000003F0 6100 0000                  		bsr.w	sub_5BA
000003F4 2038 FC40                  		move.l	($FFFFFC40).w,d0
000003F8 6100 0000                  		bsr.w	sub_5BA
000003FC 6000                       		bra.s	loc_478
000003FE                            ; ===========================================================================
000003FE                            
000003FE                            loc_462:
000003FE 46FC 2700                  		move	#$2700,sr
00000402 48F8 FFFF FC00             		movem.l	d0-a7,($FFFFFC00).w
00000408 6100 0000                  		bsr.w	ShowErrorMsg
0000040C 202F 0002                  		move.l	2(sp),d0
00000410 6100 0000                  		bsr.w	sub_5BA
00000414                            
00000414                            loc_478:
00000414 6100 0000                  		bsr.w	ErrorWaitForC
00000418 4CF8 FFFF FC00             		movem.l	($FFFFFC00).w,d0-a7
0000041E 46FC 2300                  		move	#$2300,sr
00000422 4E73                       		rte	
00000424                            
00000424                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000424                            
00000424                            
00000424                            ShowErrorMsg:				; XREF: loc_43A; loc_462
00000424 4DF9 00C0 0000             		lea	($C00000).l,a6
0000042A 23FC 7800 0003 00C0 0004   		move.l	#$78000003,($C00004).l
00000434 41F9 0000 0000             		lea	(Art_Text).l,a0
0000043A 323C 027F                  		move.w	#$27F,d1
0000043E                            
0000043E                            Error_LoadGfx:
0000043E 3C98                       		move.w	(a0)+,(a6)
00000440 51C9 FFFC                  		dbf	d1,Error_LoadGfx
00000444 7000                       		moveq	#0,d0		; clear	d0
00000446 1038 FC44                  		move.b	($FFFFFC44).w,d0 ; load	error code
0000044A 303B 0000                  		move.w	ErrorText(pc,d0.w),d0
0000044E 41FB 0000                  		lea	ErrorText(pc,d0.w),a0
00000452 23FC 4604 0003 00C0 0004   		move.l	#$46040003,($C00004).l ; position
0000045C 7212                       		moveq	#$12,d1		; number of characters
0000045E                            
0000045E                            Error_LoopChars:
0000045E 7000                       		moveq	#0,d0
00000460 1018                       		move.b	(a0)+,d0
00000462 0640 0790                  		addi.w	#$790,d0
00000466 3C80                       		move.w	d0,(a6)
00000468 51C9 FFF4                  		dbf	d1,Error_LoopChars ; repeat for	number of characters
0000046C 4E75                       		rts	
0000046E                            ; End of function ShowErrorMsg
0000046E                            
0000046E                            ; ===========================================================================
0000046E 0000 0000                  ErrorText:	dc.w asc_4E8-ErrorText,	asc_4FB-ErrorText ; XREF: ShowErrorMsg
00000472 0000 0000                  		dc.w asc_50E-ErrorText,	asc_521-ErrorText
00000476 0000 0000                  		dc.w asc_534-ErrorText,	asc_547-ErrorText
0000047A 0000 0000                  		dc.w asc_55A-ErrorText,	asc_56D-ErrorText
0000047E 0000 0000                  		dc.w asc_580-ErrorText,	asc_593-ErrorText
00000482 0000                       		dc.w asc_5A6-ErrorText
00000484 4552 524F 5220 4558 4345+  asc_4E8:	dc.b 'ERROR EXCEPTION    '
00000497 4255 5320 4552 524F 5220+  asc_4FB:	dc.b 'BUS ERROR          '
000004AA 4144 4452 4553 5320 4552+  asc_50E:	dc.b 'ADDRESS ERROR      '
000004BD 494C 4C45 4741 4C20 494E+  asc_521:	dc.b 'ILLEGAL INSTRUCTION'
000004D0 4045 524F 2044 4956 4944+  asc_534:	dc.b '@ERO DIVIDE        '
000004E3 4348 4B20 494E 5354 5255+  asc_547:	dc.b 'CHK INSTRUCTION    '
000004F6 5452 4150 5620 494E 5354+  asc_55A:	dc.b 'TRAPV INSTRUCTION  '
00000509 5052 4956 494C 4547 4520+  asc_56D:	dc.b 'PRIVILEGE VIOLATION'
0000051C 5452 4143 4520 2020 2020+  asc_580:	dc.b 'TRACE              '
0000052F 4C49 4E45 2031 3031 3020+  asc_593:	dc.b 'LINE 1010 EMULATOR '
00000542 4C49 4E45 2031 3131 3120+  asc_5A6:	dc.b 'LINE 1111 EMULATOR '
00000556 00                         		even
00000556                            
00000556                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000556                            
00000556                            
00000556                            sub_5BA:				; XREF: loc_43A; loc_462
00000556 3CBC 07CA                  		move.w	#$7CA,(a6)
0000055A 7407                       		moveq	#7,d2
0000055C                            
0000055C                            loc_5C0:
0000055C E998                       		rol.l	#4,d0
0000055E 6100                       		bsr.s	sub_5CA
00000560 51CA FFFA                  		dbf	d2,loc_5C0
00000564 4E75                       		rts	
00000566                            ; End of function sub_5BA
00000566                            
00000566                            
00000566                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000566                            
00000566                            
00000566                            sub_5CA:				; XREF: sub_5BA
00000566 3200                       		move.w	d0,d1
00000568 0241 000F                  		andi.w	#$F,d1
0000056C 0C41 000A                  		cmpi.w	#$A,d1
00000570 6500                       		bcs.s	loc_5D8
00000572 5E41                       		addq.w	#7,d1
00000574                            
00000574                            loc_5D8:
00000574 0641 07C0                  		addi.w	#$7C0,d1
00000578 3C81                       		move.w	d1,(a6)
0000057A 4E75                       		rts	
0000057C                            ; End of function sub_5CA
0000057C                            
0000057C                            
0000057C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000057C                            
0000057C                            
0000057C                            ErrorWaitForC:				; XREF: loc_478
0000057C 6100 0000                  		bsr.w	ReadJoypads
00000580 0C38 0020 F605             		cmpi.b	#$20,($FFFFF605).w ; is	button C pressed?
00000586 6600 FFF4                  		bne.w	ErrorWaitForC	; if not, branch
0000058A 4E75                       		rts	
0000058C                            ; End of function ErrorWaitForC
0000058C                            
0000058C                            ; ===========================================================================
0000058C                            
0000058C                            Art_Text:	incbin	artunc\menutext.bin	; text used in level select and debug mode
00000AAC                            		even
00000AAC                            
00000AAC                            ; ===========================================================================
00000AAC                            
00000AAC                            loc_B10:				; XREF: Vectors
00000AAC 48E7 FFFE                  		movem.l	d0-a6,-(sp)
00000AB0 4A38 F62A                  		tst.b	($FFFFF62A).w
00000AB4 6700                       		beq.s	loc_B88
00000AB6 3039 00C0 0004             		move.w	($C00004).l,d0
00000ABC 23FC 4000 0010 00C0 0004   		move.l	#$40000010,($C00004).l
00000AC6 23F8 F616 00C0 0000        		move.l	($FFFFF616).w,($C00000).l
00000ACE 0838 0006 FFF8             		btst	#6,($FFFFFFF8).w
00000AD4 6700                       		beq.s	loc_B42
00000AD6 303C 0700                  		move.w	#$700,d0
00000ADA                            
00000ADA                            loc_B3E:
00000ADA 51C8 FFFE                  		dbf	d0,loc_B3E
00000ADE                            
00000ADE                            loc_B42:
00000ADE 1038 F62A                  		move.b	($FFFFF62A).w,d0
00000AE2 11FC 0000 F62A             		move.b	#0,($FFFFF62A).w
00000AE8 31FC 0001 F644             		move.w	#1,($FFFFF644).w
00000AEE 0240 003E                  		andi.w	#$3E,d0
00000AF2 303B 0000                  		move.w	off_B6E(pc,d0.w),d0
00000AF6 4EBB 0000                  		jsr	off_B6E(pc,d0.w)
00000AFA                            
00000AFA                            loc_B5E:				; XREF: loc_B88
00000AFA 4EB9 0000 0000             		jsr	sub_71B4C
00000B00                            
00000B00                            loc_B64:				; XREF: loc_D50
00000B00 52B8 FE0C                  		addq.l	#1,($FFFFFE0C).w
00000B04 4CDF 7FFF                  		movem.l	(sp)+,d0-a6
00000B08 4E73                       		rte
00000B0A                            ; ===========================================================================
00000B0A 0000 0000                  off_B6E:	dc.w loc_B88-off_B6E, loc_C32-off_B6E
00000B0E 0000 0000                  		dc.w loc_C44-off_B6E, loc_C5E-off_B6E
00000B12 0000 0000                  		dc.w loc_C6E-off_B6E, loc_DA6-off_B6E
00000B16 0000 0000                  		dc.w loc_E72-off_B6E, loc_F8A-off_B6E
00000B1A 0000 0000                  		dc.w loc_C64-off_B6E, loc_F9A-off_B6E
00000B1E 0000 0000                  		dc.w loc_C36-off_B6E, loc_FA6-off_B6E
00000B22 0000                       		dc.w loc_E72-off_B6E
00000B24                            ; ===========================================================================
00000B24                            
00000B24                            loc_B88:				; XREF: loc_B10; off_B6E
00000B24 0C38 008C F600             		cmpi.b	#$8C,($FFFFF600).w
00000B2A 6700                       		beq.s	loc_B9A
00000B2C 0C38 000C F600             		cmpi.b	#$C,($FFFFF600).w
00000B32 6600 FFC6                  		bne.w	loc_B5E
00000B36                            
00000B36                            loc_B9A:
00000B36 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ ?
00000B3C 6600 FFBC                  		bne.w	loc_B5E		; if not, branch
00000B40 3039 00C0 0004             		move.w	($C00004).l,d0
00000B46 0838 0006 FFF8             		btst	#6,($FFFFFFF8).w
00000B4C 6700                       		beq.s	loc_BBA
00000B4E 303C 0700                  		move.w	#$700,d0
00000B52                            
00000B52                            loc_BB6:
00000B52 51C8 FFFE                  		dbf	d0,loc_BB6
00000B56                            
00000B56                            loc_BBA:
00000B56 31FC 0001 F644             		move.w	#1,($FFFFF644).w
00000B5C 33FC 0100 00A1 1100 0839+  	Z80DMA_ON
00000B8A 4A38 F64E                  		tst.b	($FFFFF64E).w
00000B8E 6600                       		bne.s	loc_BFE
00000B90 4BF9 00C0 0004             		lea	($C00004).l,a5
00000B96 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000B9C 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000BA2 3ABC 977F                  		move.w	#$977F,(a5)
00000BA6 3ABC C000                  		move.w	#$C000,(a5)
00000BAA 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000BB0 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000BB4 6000                       		bra.s	loc_C22
00000BB6                            ; ===========================================================================
00000BB6                            
00000BB6                            loc_BFE:				; XREF: loc_BC8
00000BB6 4BF9 00C0 0004             		lea	($C00004).l,a5
00000BBC 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000BC2 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
00000BC8 3ABC 977F                  		move.w	#$977F,(a5)
00000BCC 3ABC C000                  		move.w	#$C000,(a5)
00000BD0 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000BD6 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000BDA                            
00000BDA                            loc_C22:				; XREF: loc_BC8
00000BDA 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000BDE 33FC 0100 00A1 1100 0839+  	Z80DMA_OFF
00000C00 6000 FEF8                  		bra.w	loc_B5E
00000C04                            ; ===========================================================================
00000C04                            
00000C04                            loc_C32:				; XREF: off_B6E
00000C04 6100 0000                  		bsr.w	sub_106E
00000C08                            
00000C08                            loc_C36:				; XREF: off_B6E
00000C08 4A78 F614                  		tst.w	($FFFFF614).w
00000C0C 6700 0000                  		beq.w	locret_C42
00000C10 5378 F614                  		subq.w	#1,($FFFFF614).w
00000C14                            
00000C14                            locret_C42:
00000C14 4E75                       		rts
00000C16                            ; ===========================================================================
00000C16                            
00000C16                            loc_C44:				; XREF: off_B6E
00000C16 6100 0000                  		bsr.w	sub_106E
00000C1A 6100 0000                  		bsr.w	sub_6886
00000C1E 6100 0000                  		bsr.w	sub_1642
00000C22 4A78 F614                  		tst.w	($FFFFF614).w
00000C26 6700 0000                  		beq.w	locret_C5C
00000C2A 5378 F614                  		subq.w	#1,($FFFFF614).w
00000C2E                            
00000C2E                            locret_C5C:
00000C2E 4E75                       		rts
00000C30                            ; ===========================================================================
00000C30                            
00000C30                            loc_C5E:				; XREF: off_B6E
00000C30 6100 0000                  		bsr.w	sub_106E
00000C34 4E75                       		rts
00000C36                            
00000C36                            Return:
00000C36 6100 0000                  		bsr.w	ReadJoypads
00000C3A 4E75                       		rts
00000C3C                            ; ===========================================================================
00000C3C                            
00000C3C                            loc_C64:				; XREF: off_B6E
00000C3C 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode = $10	(special stage)	?
00000C42 6700 0000                  		beq.w	loc_DA6		; if yes, branch
00000C46                            
00000C46                            loc_C6E:				; XREF: off_B6E
00000C46 33FC 0100 00A1 1100 0839+  	Z80DMA_ON
00000C74 6100 0000                  		bsr.w	ReadJoypads
00000C78 4A38 F64E                  		tst.b	($FFFFF64E).w
00000C7C 6600                       		bne.s	loc_CB0
00000C7E 4BF9 00C0 0004             		lea	($C00004).l,a5
00000C84 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000C8A 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000C90 3ABC 977F                  		move.w	#$977F,(a5)
00000C94 3ABC C000                  		move.w	#$C000,(a5)
00000C98 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000C9E 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000CA2 6000                       		bra.s	loc_CD4
00000CA4                            ; ===========================================================================
00000CA4                            
00000CA4                            loc_CB0:				; XREF: loc_C76
00000CA4 4BF9 00C0 0004             		lea	($C00004).l,a5
00000CAA 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000CB0 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
00000CB6 3ABC 977F                  		move.w	#$977F,(a5)
00000CBA 3ABC C000                  		move.w	#$C000,(a5)
00000CBE 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000CC4 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000CC8                            
00000CC8                            loc_CD4:				; XREF: loc_C76
00000CC8 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000CCC 4BF9 00C0 0004             		lea	($C00004).l,a5
00000CD2 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00000CD8 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00000CDE 3ABC 977F                  		move.w	#$977F,(a5)
00000CE2 3ABC 7C00                  		move.w	#$7C00,(a5)
00000CE6 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000CEC 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000CF0 4BF9 00C0 0004             		lea	($C00004).l,a5
00000CF6 2ABC 9401 9340             		move.l	#$94019340,(a5)
00000CFC 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00000D02 3ABC 977F                  		move.w	#$977F,(a5)
00000D06 3ABC 7800                  		move.w	#$7800,(a5)
00000D0A 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000D10 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000D14 4EB9 0000 0000             		jsr	(ProcessDMAQueue).l
00000D1A                            
00000D1A                            loc_D50:
00000D1A 33FC 0100 00A1 1100 0839+  	Z80DMA_OFF
00000D3C 4CF8 00FF F700             		movem.l	($FFFFF700).w,d0-d7
00000D42 48F8 00FF FF10             		movem.l	d0-d7,($FFFFFF10).w
00000D48 4CF8 0003 F754             		movem.l	($FFFFF754).w,d0-d1
00000D4E 48F8 0003 FF30             		movem.l	d0-d1,($FFFFFF30).w
00000D54 0C38 0060 F625             		cmpi.b	#$60,($FFFFF625).w
00000D5A 6400                       		bcc.s	Demo_Time
00000D5C 11FC 0001 F64F             		move.b	#1,($FFFFF64F).w
00000D62 588F                       		addq.l	#4,sp
00000D64 6000 FD9A                  		bra.w	loc_B64
00000D68                            
00000D68                            ; ---------------------------------------------------------------------------
00000D68                            ; Subroutine to	run a demo for an amount of time
00000D68                            ; ---------------------------------------------------------------------------
00000D68                            
00000D68                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000D68                            
00000D68                            
00000D68                            Demo_Time:				; XREF: loc_D50; PalToCRAM
00000D68 6100 0000                  		bsr.w	LoadTilesAsYouMove
00000D6C 4EB9 0000 0000             		jsr	AniArt_Load
00000D72 4EB9 0000 0000             		jsr	HudUpdate
00000D78 6100 0000                  		bsr.w	sub_165E
00000D7C 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
00000D80 6700 0000                  		beq.w	Demo_TimeEnd	; if not, branch
00000D84 5378 F614                  		subq.w	#1,($FFFFF614).w ; subtract 1 from time	left
00000D88                            
00000D88                            Demo_TimeEnd:
00000D88 4E75                       		rts
00000D8A                            ; End of function Demo_Time
00000D8A                            
00000D8A                            ; ===========================================================================
00000D8A                            
00000D8A                            loc_DA6:				; XREF: off_B6E
00000D8A 6100 0000                  		bsr.w	ReadJoypads
00000D8E 33FC 0100 00A1 1100 0839+  	Z80DMA_ON
00000DBC 4BF9 00C0 0004             		lea	($C00004).l,a5
00000DC2 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000DC8 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000DCE 3ABC 977F                  		move.w	#$977F,(a5)
00000DD2 3ABC C000                  		move.w	#$C000,(a5)
00000DD6 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000DDC 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000DE0 4BF9 00C0 0004             		lea	($C00004).l,a5
00000DE6 2ABC 9401 9340             		move.l	#$94019340,(a5)
00000DEC 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00000DF2 3ABC 977F                  		move.w	#$977F,(a5)
00000DF6 3ABC 7800                  		move.w	#$7800,(a5)
00000DFA 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000E00 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000E04 4BF9 00C0 0004             		lea	($C00004).l,a5
00000E0A 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00000E10 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00000E16 3ABC 977F                  		move.w	#$977F,(a5)
00000E1A 3ABC 7C00                  		move.w	#$7C00,(a5)
00000E1E 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000E24 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000E28 6100 0000                  		bsr.w	PalCycle_SS
00000E2C 4A38 F767                  		tst.b	($FFFFF767).w
00000E30 6700                       		beq.s	loc_E64
00000E32 4BF9 00C0 0004             		lea	($C00004).l,a5
00000E38 2ABC 9401 9370             		move.l	#$94019370,(a5)
00000E3E 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
00000E44 3ABC 977F                  		move.w	#$977F,(a5)
00000E48 3ABC 7000                  		move.w	#$7000,(a5)
00000E4C 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000E52 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000E56 11FC 0000 F767             		move.b	#0,($FFFFF767).w
00000E5C                            
00000E5C                            loc_E64:
00000E5C 33FC 0100 00A1 1100 0839+  	Z80DMA_OFF
00000E7E 4A78 F614                  		tst.w	($FFFFF614).w
00000E82 6700 0000                  		beq.w	locret_E70
00000E86 5378 F614                  		subq.w	#1,($FFFFF614).w
00000E8A                            
00000E8A                            locret_E70:
00000E8A 4E75                       		rts	
00000E8C                            ; ===========================================================================
00000E8C                            
00000E8C                            loc_E72:				; XREF: off_B6E
00000E8C 6100 0000                  		bsr.w	ReadJoypads
00000E90 33FC 0100 00A1 1100 0839+  	Z80DMA_ON
00000EBE 4A38 F64E                  		tst.b	($FFFFF64E).w
00000EC2 6600                       		bne.s	loc_EB4
00000EC4 4BF9 00C0 0004             		lea	($C00004).l,a5
00000ECA 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000ED0 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000ED6 3ABC 977F                  		move.w	#$977F,(a5)
00000EDA 3ABC C000                  		move.w	#$C000,(a5)
00000EDE 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000EE4 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000EE8 6000                       		bra.s	loc_ED8
00000EEA                            ; ===========================================================================
00000EEA                            
00000EEA                            loc_EB4:				; XREF: loc_E7A
00000EEA 4BF9 00C0 0004             		lea	($C00004).l,a5
00000EF0 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000EF6 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
00000EFC 3ABC 977F                  		move.w	#$977F,(a5)
00000F00 3ABC C000                  		move.w	#$C000,(a5)
00000F04 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000F0A 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F0E                            
00000F0E                            loc_ED8:				; XREF: loc_E7A
00000F0E 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000F12 4BF9 00C0 0004             		lea	($C00004).l,a5
00000F18 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00000F1E 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00000F24                            
00000F24                            loc_EEE:
00000F24 3ABC 977F                  		move.w	#$977F,(a5)
00000F28 3ABC 7C00                  		move.w	#$7C00,(a5)
00000F2C 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000F32 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F36 4BF9 00C0 0004             		lea	($C00004).l,a5
00000F3C 2ABC 9401 9340             		move.l	#$94019340,(a5)
00000F42 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00000F48 3ABC 977F                  		move.w	#$977F,(a5)
00000F4C 3ABC 7800                  		move.w	#$7800,(a5)
00000F50 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000F56 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F5A 4A38 F767                  		tst.b	($FFFFF767).w
00000F5E 6700                       		beq.s	loc_F54
00000F60 4BF9 00C0 0004             		lea	($C00004).l,a5
00000F66 2ABC 9401 9370             		move.l	#$94019370,(a5)
00000F6C 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
00000F72 3ABC 977F                  		move.w	#$977F,(a5)
00000F76 3ABC 7000                  		move.w	#$7000,(a5)
00000F7A 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000F80 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F84 11FC 0000 F767             		move.b	#0,($FFFFF767).w
00000F8A                            
00000F8A                            loc_F54:
00000F8A 33FC 0100 00A1 1100 0839+  	Z80DMA_OFF
00000FAC 4CF8 00FF F700             		movem.l	($FFFFF700).w,d0-d7
00000FB2 48F8 00FF FF10             		movem.l	d0-d7,($FFFFFF10).w
00000FB8 4CF8 0003 F754             		movem.l	($FFFFF754).w,d0-d1
00000FBE 48F8 0003 FF30             		movem.l	d0-d1,($FFFFFF30).w
00000FC4 6100 0000                  		bsr.w	LoadTilesAsYouMove
00000FC8 4EB9 0000 0000             		jsr	AniArt_Load
00000FCE 4EB9 0000 0000             		jsr	HudUpdate
00000FD4 6100 0000                  		bsr.w	sub_1642
00000FD8 4E75                       		rts	
00000FDA                            ; ===========================================================================
00000FDA                            
00000FDA                            loc_F8A:				; XREF: off_B6E
00000FDA 6100 0000                  		bsr.w	sub_106E
00000FDE 5238 F628                  		addq.b	#1,($FFFFF628).w
00000FE2 11FC 000E F62A             		move.b	#$E,($FFFFF62A).w
00000FE8 4E75                       		rts	
00000FEA                            ; ===========================================================================
00000FEA                            
00000FEA                            loc_F9A:				; XREF: off_B6E
00000FEA 6100 0000                  		bsr.w	sub_106E
00000FEE 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000FF2 6000 0000                  		bra.w	sub_1642
00000FF6                            ; ===========================================================================
00000FF6                            
00000FF6                            loc_FA6:				; XREF: off_B6E
00000FF6 6100 0000                  		bsr.w	ReadJoypads
00000FFA 33FC 0100 00A1 1100 0839+  	Z80DMA_ON
00001028 4BF9 00C0 0004             		lea	($C00004).l,a5
0000102E 2ABC 9400 9340             		move.l	#$94009340,(a5)
00001034 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
0000103A 3ABC 977F                  		move.w	#$977F,(a5)
0000103E 3ABC C000                  		move.w	#$C000,(a5)
00001042 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00001048 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000104C 4BF9 00C0 0004             		lea	($C00004).l,a5
00001052 2ABC 9401 9340             		move.l	#$94019340,(a5)
00001058 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
0000105E 3ABC 977F                  		move.w	#$977F,(a5)
00001062 3ABC 7800                  		move.w	#$7800,(a5)
00001066 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
0000106C 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001070 4BF9 00C0 0004             		lea	($C00004).l,a5
00001076 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
0000107C 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00001082 3ABC 977F                  		move.w	#$977F,(a5)
00001086 3ABC 7C00                  		move.w	#$7C00,(a5)
0000108A 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001090 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001094 4A38 F767                  		tst.b	($FFFFF767).w
00001098 6700                       		beq.s	loc_1060
0000109A 4BF9 00C0 0004             		lea	($C00004).l,a5
000010A0 2ABC 9401 9370             		move.l	#$94019370,(a5)
000010A6 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
000010AC 3ABC 977F                  		move.w	#$977F,(a5)
000010B0 3ABC 7000                  		move.w	#$7000,(a5)
000010B4 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
000010BA 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000010BE 11FC 0000 F767             		move.b	#0,($FFFFF767).w
000010C4                            
000010C4                            loc_1060:
000010C4 33FC 0100 00A1 1100 0839+  	Z80DMA_OFF
000010E6 4A78 F614                  		tst.w	($FFFFF614).w
000010EA 6700 0000                  		beq.w	locret_106C
000010EE 5378 F614                  		subq.w	#1,($FFFFF614).w
000010F2                            
000010F2                            locret_106C:
000010F2 4E75                       		rts	
000010F4                            
000010F4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000010F4                            
000010F4                            
000010F4                            sub_106E:				; XREF: loc_C32; et al
000010F4 6100 0000                  		bsr.w	ReadJoypads
000010F8 33FC 0100 00A1 1100 0839+  	Z80DMA_ON
00001126 4A38 F64E                  		tst.b	($FFFFF64E).w
0000112A 6600                       		bne.s	loc_10B0
0000112C 4BF9 00C0 0004             		lea	($C00004).l,a5
00001132 2ABC 9400 9340             		move.l	#$94009340,(a5)
00001138 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
0000113E 3ABC 977F                  		move.w	#$977F,(a5)
00001142 3ABC C000                  		move.w	#$C000,(a5)
00001146 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
0000114C 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001150                            
00001150                            PAL1_LOAD:
00001150 6000                       		bra.s	loc_10D4
00001152                            ; ===========================================================================
00001152                            
00001152                            loc_10B0:
00001152 4BF9 00C0 0004             		lea	($C00004).l,a5
00001158 2ABC 9400 9340             		move.l	#$94009340,(a5)
0000115E 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
00001164 3ABC 977F                  		move.w	#$977F,(a5)
00001168 3ABC C000                  		move.w	#$C000,(a5)
0000116C 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00001172 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001176                            loc_10D4:
00001176 4BF9 00C0 0004             		lea	($C00004).l,a5
0000117C 2ABC 9401 9340             		move.l	#$94019340,(a5)
00001182 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00001188 3ABC 977F                  		move.w	#$977F,(a5)
0000118C 3ABC 7800                  		move.w	#$7800,(a5)
00001190 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001196 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000119A 4BF9 00C0 0004             		lea	($C00004).l,a5
000011A0 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
000011A6 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
000011AC 3ABC 977F                  		move.w	#$977F,(a5)
000011B0 3ABC 7C00                  		move.w	#$7C00,(a5)
000011B4 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
000011BA 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000011BE 33FC 0100 00A1 1100 0839+  	Z80DMA_OFF
000011E0 4E75                       		rts	
000011E2                            ; End of function sub_106E
000011E2                            
000011E2                            ; ---------------------------------------------------------------------------
000011E2                            ; Subroutine to	move pallets from the RAM to CRAM
000011E2                            ; ---------------------------------------------------------------------------
000011E2                            
000011E2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000011E2                            
000011E2                            
000011E2                            PalToCRAM:
000011E2 46FC 2700                  		move	#$2700,sr
000011E6 4A78 F644                  		tst.w	($FFFFF644).w
000011EA 6700                       		beq.s	locret_119C
000011EC 31FC 0000 F644             		move.w	#0,($FFFFF644).w
000011F2 48E7 00C0                  		movem.l	a0-a1,-(sp)
000011F6 43F9 00C0 0000             		lea	($C00000).l,a1
000011FC 41F8 FA80                  		lea	($FFFFFA80).w,a0 ; load	pallet from RAM
00001200 237C C000 0000 0004        		move.l	#$C0000000,4(a1) ; set VDP to CRAM write
00001208 2298                       		move.l	(a0)+,(a1)	; move pallet to CRAM
0000120A 2298                       		move.l	(a0)+,(a1)
0000120C 2298                       		move.l	(a0)+,(a1)
0000120E 2298                       		move.l	(a0)+,(a1)
00001210 2298                       		move.l	(a0)+,(a1)
00001212 2298                       		move.l	(a0)+,(a1)
00001214 2298                       		move.l	(a0)+,(a1)
00001216 2298                       		move.l	(a0)+,(a1)
00001218 2298                       		move.l	(a0)+,(a1)
0000121A 2298                       		move.l	(a0)+,(a1)
0000121C 2298                       		move.l	(a0)+,(a1)
0000121E 2298                       		move.l	(a0)+,(a1)
00001220 2298                       		move.l	(a0)+,(a1)
00001222 2298                       		move.l	(a0)+,(a1)
00001224 2298                       		move.l	(a0)+,(a1)
00001226 2298                       		move.l	(a0)+,(a1)
00001228 2298                       		move.l	(a0)+,(a1)
0000122A 2298                       		move.l	(a0)+,(a1)
0000122C 2298                       		move.l	(a0)+,(a1)
0000122E 2298                       		move.l	(a0)+,(a1)
00001230 2298                       		move.l	(a0)+,(a1)
00001232 2298                       		move.l	(a0)+,(a1)
00001234 2298                       		move.l	(a0)+,(a1)
00001236 2298                       		move.l	(a0)+,(a1)
00001238 2298                       		move.l	(a0)+,(a1)
0000123A 2298                       		move.l	(a0)+,(a1)
0000123C 2298                       		move.l	(a0)+,(a1)
0000123E 2298                       		move.l	(a0)+,(a1)
00001240 2298                       		move.l	(a0)+,(a1)
00001242 2298                       		move.l	(a0)+,(a1)
00001244 2298                       		move.l	(a0)+,(a1)
00001246 2298                       		move.l	(a0)+,(a1)
00001248 337C 8ADF 0004             		move.w	#$8ADF,4(a1)
0000124E 4CDF 0300                  		movem.l	(sp)+,a0-a1
00001252 4A38 F64F                  		tst.b	($FFFFF64F).w
00001256 6600                       		bne.s	loc_119E
00001258                            
00001258                            locret_119C:
00001258 4E73                       		rte	
0000125A                            ; ===========================================================================
0000125A                            
0000125A                            loc_119E:				; XREF: PalToCRAM
0000125A 4238 F64F                  		clr.b	($FFFFF64F).w
0000125E 48E7 FFFE                  		movem.l	d0-a6,-(sp)
00001262 6100 FB04                  		bsr.w	Demo_Time
00001266 4EB9 0000 0000             		jsr	sub_71B4C
0000126C 4CDF 7FFF                  		movem.l	(sp)+,d0-a6
00001270 4E73                       		rte	
00001272                            ; End of function PalToCRAM
00001272                            
00001272                            ; ---------------------------------------------------------------------------
00001272                            ; Subroutine to	initialise joypads
00001272                            ; ---------------------------------------------------------------------------
00001272                            
00001272                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001272                            
00001272                            
00001272                            JoypadInit:				; XREF: GameClrRAM
00001272 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
0000127A                            
0000127A                            Joypad_WaitZ80:
0000127A 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has the Z80 stopped?
00001282 66F6                       		bne.s	Joypad_WaitZ80	; if not, branch
00001284 7040                       		moveq	#$40,d0
00001286 13C0 00A1 0009             		move.b	d0,($A10009).l	; init port 1 (joypad 1)
0000128C 13C0 00A1 000B             		move.b	d0,($A1000B).l	; init port 2 (joypad 2)
00001292 13C0 00A1 000D             		move.b	d0,($A1000D).l	; init port 3 (extra)
00001298 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
000012A0 4E75                       		rts	
000012A2                            ; End of function JoypadInit
000012A2                            
000012A2                            ; ---------------------------------------------------------------------------
000012A2                            ; Subroutine to	read joypad input, and send it to the RAM
000012A2                            ; ---------------------------------------------------------------------------
000012A2                            
000012A2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000012A2                            
000012A2                            
000012A2                            ReadJoypads:
000012A2 41F8 F604                  		lea	($FFFFF604).w,a0 ; address where joypad	states are written
000012A6 43F9 00A1 0003             		lea	($A10003).l,a1	; first	joypad port
000012AC 6100                       		bsr.s	Joypad_Read	; do the first joypad
000012AE 5449                       		addq.w	#2,a1		; do the second	joypad
000012B0                            
000012B0                            Joypad_Read:
000012B0 12BC 0000                  		move.b	#0,(a1)
000012B4 4E71                       		nop	
000012B6 4E71                       		nop	
000012B8 1011                       		move.b	(a1),d0
000012BA E508                       		lsl.b	#2,d0
000012BC 0200 00C0                  		andi.b	#$C0,d0
000012C0 12BC 0040                  		move.b	#$40,(a1)
000012C4 4E71                       		nop	
000012C6 4E71                       		nop	
000012C8 1211                       		move.b	(a1),d1
000012CA 0201 003F                  		andi.b	#$3F,d1
000012CE 8001                       		or.b	d1,d0
000012D0 4600                       		not.b	d0
000012D2 1210                       		move.b	(a0),d1
000012D4 B101                       		eor.b	d0,d1
000012D6 10C0                       		move.b	d0,(a0)+
000012D8 C200                       		and.b	d0,d1
000012DA 10C1                       		move.b	d1,(a0)+
000012DC 4E75                       		rts	
000012DE                            ; End of function ReadJoypads
000012DE                            
000012DE                            
000012DE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000012DE                            
000012DE                            
000012DE                            VDPSetupGame:				; XREF: GameClrRAM; ChecksumError
000012DE 41F9 00C0 0004             		lea	($C00004).l,a0
000012E4 43F9 00C0 0000             		lea	($C00000).l,a1
000012EA 45F9 0000 0000             		lea	(VDPSetupArray).l,a2
000012F0 7E12                       		moveq	#$12,d7
000012F2                            
000012F2                            VDP_Loop:
000012F2 309A                       		move.w	(a2)+,(a0)
000012F4 51CF FFFC                  		dbf	d7,VDP_Loop	; set the VDP registers
000012F8                            
000012F8 3039 0000 0000             		move.w	(VDPSetupArray+2).l,d0
000012FE 31C0 F60C                  		move.w	d0,($FFFFF60C).w
00001302 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
00001308 7000                       		moveq	#0,d0
0000130A 23FC C000 0000 00C0 0004   		move.l	#$C0000000,($C00004).l ; set VDP to CRAM write
00001314 3E3C 003F                  		move.w	#$3F,d7
00001318                            
00001318                            VDP_ClrCRAM:
00001318 3280                       		move.w	d0,(a1)
0000131A 51CF FFFC                  		dbf	d7,VDP_ClrCRAM	; clear	the CRAM
0000131E                            
0000131E 42B8 F616                  		clr.l	($FFFFF616).w
00001322 42B8 F61A                  		clr.l	($FFFFF61A).w
00001326 2F01                       		move.l	d1,-(sp)
00001328 4BF9 00C0 0004             		lea	($C00004).l,a5
0000132E 3ABC 8F01                  		move.w	#$8F01,(a5)
00001332 2ABC 94FF 93FF             		move.l	#$94FF93FF,(a5)
00001338 3ABC 9780                  		move.w	#$9780,(a5)
0000133C 2ABC 4000 0080             		move.l	#$40000080,(a5)
00001342 33FC 0000 00C0 0000        		move.w	#0,($C00000).l	; clear	the screen
0000134A                            
0000134A                            loc_128E:
0000134A 3215                       		move.w	(a5),d1
0000134C 0801 0001                  		btst	#1,d1
00001350 66F8                       		bne.s	loc_128E
00001352                            
00001352 3ABC 8F02                  		move.w	#$8F02,(a5)
00001356 221F                       		move.l	(sp)+,d1
00001358 4E75                       		rts	
0000135A                            ; End of function VDPSetupGame
0000135A                            
0000135A                            ; ===========================================================================
0000135A 8004 8134 8230 8328        VDPSetupArray:	dc.w $8004, $8134, $8230, $8328	; XREF: VDPSetupGame
00001362 8407 857C 8600 8700        		dc.w $8407, $857C, $8600, $8700
0000136A 8800 8900 8A00 8B00        		dc.w $8800, $8900, $8A00, $8B00
00001372 8C81 8D3F 8E00 8F02        		dc.w $8C81, $8D3F, $8E00, $8F02
0000137A 9001 9100 9200             		dc.w $9001, $9100, $9200
00001380                            
00001380                            ; ---------------------------------------------------------------------------
00001380                            ; Subroutine to	clear the screen
00001380                            ; ---------------------------------------------------------------------------
00001380                            
00001380                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001380                            
00001380                            
00001380                            ClearScreen:
00001380 4BF9 00C0 0004             		lea	($C00004).l,a5
00001386 3ABC 8F01                  		move.w	#$8F01,(a5)
0000138A 2ABC 940F 93FF             		move.l	#$940F93FF,(a5)
00001390 3ABC 9780                  		move.w	#$9780,(a5)
00001394 2ABC 4000 0083             		move.l	#$40000083,(a5)
0000139A 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
000013A2                            
000013A2                            loc_12E6:
000013A2 3215                       		move.w	(a5),d1
000013A4 0801 0001                  		btst	#1,d1
000013A8 66F8                       		bne.s	loc_12E6
000013AA                            
000013AA 3ABC 8F02                  		move.w	#$8F02,(a5)
000013AE 4BF9 00C0 0004             		lea	($C00004).l,a5
000013B4 3ABC 8F01                  		move.w	#$8F01,(a5)
000013B8 2ABC 940F 93FF             		move.l	#$940F93FF,(a5)
000013BE 3ABC 9780                  		move.w	#$9780,(a5)
000013C2 2ABC 6000 0083             		move.l	#$60000083,(a5)
000013C8 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
000013D0                            
000013D0                            loc_1314:
000013D0 3215                       		move.w	(a5),d1
000013D2 0801 0001                  		btst	#1,d1
000013D6 66F8                       		bne.s	loc_1314
000013D8                            
000013D8 3ABC 8F02                  		move.w	#$8F02,(a5)
000013DC 21FC 0000 0000 F616        		move.l	#0,($FFFFF616).w
000013E4 21FC 0000 0000 F61A        		move.l	#0,($FFFFF61A).w
000013EC 43F8 F800                  		lea	($FFFFF800).w,a1
000013F0 7000                       		moveq	#0,d0
000013F2 323C 00A0                  		move.w	#$A0,d1
000013F6                            
000013F6                            loc_133A:
000013F6 22C0                       		move.l	d0,(a1)+
000013F8 51C9 FFFC                  		dbf	d1,loc_133A
000013FC                            
000013FC 43F8 CC00                  		lea	($FFFFCC00).w,a1
00001400 7000                       		moveq	#0,d0
00001402 323C 0100                  		move.w	#$100,d1
00001406                            
00001406                            loc_134A:
00001406 22C0                       		move.l	d0,(a1)+
00001408 51C9 FFFC                  		dbf	d1,loc_134A
0000140C 4E75                       		rts	
0000140E                            ; End of function ClearScreen
0000140E                            
0000140E                            ; ---------------------------------------------------------------------------
0000140E                            ; Subroutine to	load the sound driver
0000140E                            ; ---------------------------------------------------------------------------
0000140E                            
0000140E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000140E                            
0000140E                            
0000140E                            SoundDriverLoad:
0000140E 41F9 0000 0000             		lea	(Z80ROM).l,a0				; load Z80 ROM data
00001414 43F9 00A0 0000             		lea	($A00000).l,a1				; load Z80 RAM space address
0000141A 323C 0000                  		move.w	#(Z80ROM_End-Z80ROM)-$01,d1		; set repeat times
0000141E 33FC 0100 00A1 1100        		move.w	#$0100,($A11100).l			; request Z80 stop (ON)
00001426 33FC 0100 00A1 1200        		move.w	#$0100,($A11200).l			; request Z80 reset (OFF)
0000142E 0839 0000 00A1 1100        		btst.b	#$00,($A11100).l			; has the Z80 stopped yet?
00001436 66F6                       		bne.s	*-$08					; if not, branch
00001438                            
00001438                            SM_LoadZ80:
00001438 12D8                       		move.b	(a0)+,(a1)+				; dump Z80 data to Z80 space
0000143A 51C9 FFFC                  		dbf	d1,SM_LoadZ80				; repeat til done
0000143E 41F9 0000 0000             		lea	(StopSample).l,a0			; load stop/mute sample address
00001444 43F9 00A0 02EC             		lea	($A00000+MuteSample).l,a1		; load Z80 RAM space where the pointer is to be stored
0000144A 12D8                       		move.b	(a0)+,(a1)+				; copy pointer over into Z80
0000144C 12D8                       		move.b	(a0)+,(a1)+				; ''
0000144E 12D8                       		move.b	(a0)+,(a1)+				; ''
00001450 33FC 0000 00A1 1200        		move.w	#$0000,($A11200).l			; request Z80 reset (ON)
00001458 727F                       		moveq	#$7F,d1					; set repeat times
0000145A 51C9 FFFE                  		dbf	d1,*					; there's no way of checking for reset, so a manual delay is necessary
0000145E 33FC 0000 00A1 1100        		move.w	#$0000,($A11100).l			; request Z80 stop (OFF)
00001466 33FC 0100 00A1 1200        		move.w	#$0100,($A11200).l			; request Z80 reset (OFF)
0000146E 4E75                       		rts						; return
00001470                            
00001470                            ; ---------------------------------------------------------------------------
00001470                            ; Subroutine to	play a sound or	music track
00001470                            ; ---------------------------------------------------------------------------
00001470                            
00001470                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001470                            
00001470                            
00001470                            PlaySound:
00001470 11C0 F00A                  		move.b	d0,($FFFFF00A).w
00001474 4E75                       		rts	
00001476                            ; End of function PlaySound
00001476                            
00001476                            ; ---------------------------------------------------------------------------
00001476                            ; Subroutine to	play a special sound/music (E0-E4)
00001476                            ;
00001476                            ; E0 - Fade out
00001476                            ; E1 - Sega
00001476                            ; E2 - Speed up
00001476                            ; E3 - Normal speed
00001476                            ; E4 - Stop
00001476                            ; ---------------------------------------------------------------------------
00001476                            
00001476                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001476                            
00001476                            
00001476                            PlaySound_Special:
00001476 11C0 F00B                  		move.b	d0,($FFFFF00B).w
0000147A 4E75                       		rts	
0000147C                            ; End of function PlaySound_Special
0000147C                            
0000147C                            ; ===========================================================================
0000147C                            ; ---------------------------------------------------------------------------
0000147C                            ; Unused sound/music subroutine
0000147C                            ; ---------------------------------------------------------------------------
0000147C                            
0000147C                            PlaySound_Unk:
0000147C 11C0 F00C                  		move.b	d0,($FFFFF00C).w
00001480 4E75                       		rts	
00001482                            
00001482                            ; ---------------------------------------------------------------------------
00001482                            ; Subroutine to	pause the game
00001482                            ; ---------------------------------------------------------------------------
00001482                            
00001482                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001482                            
00001482                            
00001482                            PauseGame:				; XREF: Level_MainLoop; et al
00001482 4E71                       		nop	
00001484 4A38 FE12                  		tst.b	($FFFFFE12).w	; do you have any lives	left?
00001488 6700                       		beq.s	Unpause		; if not, branch
0000148A 4A78 F63A                  		tst.w	($FFFFF63A).w	; is game already paused?
0000148E 6600                       		bne.s	loc_13BE	; if yes, branch
00001490 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
00001496 6700                       		beq.s	Pause_DoNothing	; if not, branch
00001498                            
00001498                            loc_13BE:
00001498 31FC 0001 F63A             		move.w	#1,($FFFFF63A).w ; freeze time
0000149E 11FC 0001 F003             		move.b	#1,($FFFFF003).w ; pause music
000014A4                            
000014A4                            loc_13CA:
000014A4 11FC 0010 F62A             		move.b	#$10,($FFFFF62A).w
000014AA 6100 0000                  		bsr.w	DelayProgram
000014AE 4A38 FFE1                  		tst.b	($FFFFFFE1).w	; is slow-motion cheat on?
000014B2 6700                       		beq.s	Pause_ChkStart	; if not, branch
000014B4 0838 0006 F605             		btst	#6,($FFFFF605).w ; is button A pressed?
000014BA 6700                       		beq.s	Pause_ChkBC	; if not, branch
000014BC 11FC 0004 F600             		move.b	#4,($FFFFF600).w ; set game mode to 4 (title screen)
000014C2 4E71                       		nop	
000014C4 6000                       		bra.s	loc_1404
000014C6                            ; ===========================================================================
000014C6                            
000014C6                            Pause_ChkBC:				; XREF: PauseGame
000014C6 0838 0004 F604             		btst	#4,($FFFFF604).w ; is button B pressed?
000014CC 6600                       		bne.s	Pause_SlowMo	; if yes, branch
000014CE 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
000014D4 6600                       		bne.s	Pause_SlowMo	; if yes, branch
000014D6                            
000014D6                            Pause_ChkStart:				; XREF: PauseGame
000014D6 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
000014DC 67C6                       		beq.s	loc_13CA	; if not, branch
000014DE                            
000014DE                            loc_1404:				; XREF: PauseGame
000014DE 11FC 0080 F003             		move.b	#$80,($FFFFF003).w
000014E4                            
000014E4                            Unpause:				; XREF: PauseGame
000014E4 31FC 0000 F63A             		move.w	#0,($FFFFF63A).w ; unpause the game
000014EA                            
000014EA                            Pause_DoNothing:			; XREF: PauseGame
000014EA 4E75                       		rts	
000014EC                            ; ===========================================================================
000014EC                            
000014EC                            Pause_SlowMo:				; XREF: PauseGame
000014EC 31FC 0001 F63A             		move.w	#1,($FFFFF63A).w
000014F2 11FC 0080 F003             		move.b	#$80,($FFFFF003).w
000014F8 4E75                       		rts	
000014FA                            ; End of function PauseGame
000014FA                            
000014FA                            ; ---------------------------------------------------------------------------
000014FA                            ; Subroutine to	display	patterns via the VDP
000014FA                            ; ---------------------------------------------------------------------------
000014FA                            
000014FA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000014FA                            
000014FA                            
000014FA                            ShowVDPGraphics:			; XREF: SegaScreen; TitleScreen; SS_BGLoad
000014FA 4DF9 00C0 0000             		lea	($C00000).l,a6
00001500 283C 0080 0000             		move.l	#$800000,d4
00001506                            
00001506                            loc_142C:
00001506 2D40 0004                  		move.l	d0,4(a6)
0000150A 3601                       		move.w	d1,d3
0000150C                            
0000150C                            loc_1432:
0000150C 3C99                       		move.w	(a1)+,(a6)
0000150E 51CB FFFC                  		dbf	d3,loc_1432
00001512 D084                       		add.l	d4,d0
00001514 51CA FFF0                  		dbf	d2,loc_142C
00001518 4E75                       		rts	
0000151A                            ; End of function ShowVDPGraphics
0000151A                            
0000151A                            ; ---------------------------------------------------------------------------
0000151A                            ; Subroutine for queueing VDP commands (seems to only queue transfers to VRAM),
0000151A                            ; to be issued the next time ProcessDMAQueue is called.
0000151A                            ; Can be called a maximum of 18 times before the buffer needs to be cleared
0000151A                            ; by issuing the commands (this subroutine DOES check for overflow)
0000151A                            ; ---------------------------------------------------------------------------
0000151A                            ; In case you wish to use this queue system outside of the spin dash, this is the
0000151A                            ; registers in which it expects data in:
0000151A                            ; d1.l: Address to data (In 68k address space)
0000151A                            ; d2.w: Destination in VRAM
0000151A                            ; d3.w: Length of data
0000151A                            ; ---------------------------------------------------------------------------
0000151A                            
0000151A                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
0000151A                            
0000151A                            ; sub_144E: DMA_68KtoVRAM: QueueCopyToVRAM: QueueVDPCommand: Add_To_DMA_Queue:
0000151A                            QueueDMATransfer:
0000151A 2278 C8FC                  		movea.l	($FFFFC8FC).w,a1
0000151E B2FC C8FC                  		cmpa.w	#$C8FC,a1
00001522 6700                       		beq.s	QueueDMATransfer_Done ; return if there's no more room in the buffer
00001524                            
00001524                            		; piece together some VDP commands and store them for later...
00001524 303C 9300                  		move.w	#$9300,d0 ; command to specify DMA transfer length & $00FF
00001528 1003                       		move.b	d3,d0
0000152A 32C0                       		move.w	d0,(a1)+ ; store command
0000152C                            
0000152C 303C 9400                  		move.w	#$9400,d0 ; command to specify DMA transfer length & $FF00
00001530 E04B                       		lsr.w	#8,d3
00001532 1003                       		move.b	d3,d0
00001534 32C0                       		move.w	d0,(a1)+ ; store command
00001536                            
00001536 303C 9500                  		move.w	#$9500,d0 ; command to specify source address & $0001FE
0000153A E289                       		lsr.l	#1,d1
0000153C 1001                       		move.b	d1,d0
0000153E 32C0                       		move.w	d0,(a1)+ ; store command
00001540                            
00001540 303C 9600                  		move.w	#$9600,d0 ; command to specify source address & $01FE00
00001544 E089                       		lsr.l	#8,d1
00001546 1001                       		move.b	d1,d0
00001548 32C0                       		move.w	d0,(a1)+ ; store command
0000154A                            
0000154A 303C 9700                  		move.w	#$9700,d0 ; command to specify source address & $FE0000
0000154E E089                       		lsr.l	#8,d1
00001550 1001                       		move.b	d1,d0
00001552 32C0                       		move.w	d0,(a1)+ ; store command
00001554                            
00001554 0282 0000 FFFF             		andi.l	#$FFFF,d2 ; command to specify destination address and begin DMA
0000155A E58A                       		lsl.l	#2,d2
0000155C E44A                       		lsr.w	#2,d2
0000155E 4842                       		swap	d2
00001560 0082 4000 0080             		ori.l	#$40000080,d2 ; set bits to specify VRAM transfer
00001566 22C2                       		move.l	d2,(a1)+ ; store command
00001568                            
00001568 21C9 C8FC                  		move.l	a1,($FFFFC8FC).w ; set the next free slot address
0000156C B2FC C8FC                  		cmpa.w	#$C8FC,a1
00001570 6700                       		beq.s	QueueDMATransfer_Done ; return if there's no more room in the buffer
00001572 32BC 0000                  		move.w	#0,(a1) ; put a stop token at the end of the used part of the buffer
00001576                            ; return_14AA:
00001576                            QueueDMATransfer_Done:
00001576 4E75                       		rts
00001578                            ; End of function QueueDMATransfer
00001578                            
00001578                            
00001578                            ; ---------------------------------------------------------------------------
00001578                            ; Subroutine for issuing all VDP commands that were queued
00001578                            ; (by earlier calls to QueueDMATransfer)
00001578                            ; Resets the queue when it's done
00001578                            ; ---------------------------------------------------------------------------
00001578                            
00001578                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
00001578                            
00001578                            ; sub_14AC: CopyToVRAM: IssueVDPCommands: Process_DMA: Process_DMA_Queue:
00001578                            ProcessDMAQueue:
00001578 4BF9 00C0 0004             		lea	($C00004).l,a5
0000157E 43F8 C800                  		lea	($FFFFC800).w,a1
00001582                            ; loc_14B6:
00001582                            ProcessDMAQueue_Loop:
00001582 3019                       		move.w	(a1)+,d0
00001584 6700                       		beq.s	ProcessDMAQueue_Done ; branch if we reached a stop token
00001586                            		; issue a set of VDP commands...
00001586 3A80                       		move.w	d0,(a5)		; transfer length
00001588 3A99                       		move.w	(a1)+,(a5)	; transfer length
0000158A 3A99                       		move.w	(a1)+,(a5)	; source address
0000158C 3A99                       		move.w	(a1)+,(a5)	; source address
0000158E 3A99                       		move.w	(a1)+,(a5)	; source address
00001590 3A99                       		move.w	(a1)+,(a5)	; destination
00001592 3A99                       		move.w	(a1)+,(a5)	; destination
00001594 B2FC C8FC                  		cmpa.w	#$C8FC,a1
00001598 66E8                       		bne.s	ProcessDMAQueue_Loop ; loop if we haven't reached the end of the buffer
0000159A                            ; loc_14CE:
0000159A                            ProcessDMAQueue_Done:
0000159A 31FC 0000 C800             		move.w	#0,($FFFFC800).w
000015A0 21FC FFFF C800 C8FC        		move.l	#$FFFFC800,($FFFFC8FC).w
000015A8 4E75                       		rts
000015AA                            ; End of function ProcessDMAQueue
000015AA                            
000015AA                            ; ---------------------------------------------------------------------------
000015AA                            ; Nemesis decompression	algorithm
000015AA                            ; ---------------------------------------------------------------------------
000015AA                            
000015AA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000015AA                            
000015AA                            
000015AA                            NemDec:
000015AA 48E7 FFDC                  		movem.l	d0-a1/a3-a5,-(sp)
000015AE 47F9 0000 0000             		lea	(loc_1502).l,a3
000015B4 49F9 00C0 0000             		lea	($C00000).l,a4
000015BA 6000                       		bra.s	loc_145C
000015BC                            ; ===========================================================================
000015BC 48E7 FFDC                  		movem.l	d0-a1/a3-a5,-(sp)
000015C0 47F9 0000 0000             		lea	(loc_1518).l,a3
000015C6                            
000015C6                            loc_145C:				; XREF: NemDec
000015C6 43F8 AA00                  		lea	($FFFFAA00).w,a1
000015CA 3418                       		move.w	(a0)+,d2
000015CC E34A                       		lsl.w	#1,d2
000015CE 6400                       		bcc.s	loc_146A
000015D0 D6FC 000A                  		adda.w	#$A,a3
000015D4                            
000015D4                            loc_146A:
000015D4 E54A                       		lsl.w	#2,d2
000015D6 3A42                       		movea.w	d2,a5
000015D8 7608                       		moveq	#8,d3
000015DA 7400                       		moveq	#0,d2
000015DC 7800                       		moveq	#0,d4
000015DE 6100 0000                  		bsr.w	NemDec4
000015E2 1A18                       		move.b	(a0)+,d5
000015E4 E145                       		asl.w	#8,d5
000015E6 1A18                       		move.b	(a0)+,d5
000015E8 3C3C 0010                  		move.w	#$10,d6
000015EC 6100                       		bsr.s	NemDec2
000015EE 4CDF 3BFF                  		movem.l	(sp)+,d0-a1/a3-a5
000015F2 4E75                       		rts	
000015F4                            ; End of function NemDec
000015F4                            
000015F4                            
000015F4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000015F4                            
000015F4                            
000015F4                            NemDec2:				; XREF: NemDec
000015F4 3E06                       		move.w	d6,d7
000015F6 5147                       		subq.w	#8,d7
000015F8 3205                       		move.w	d5,d1
000015FA EE69                       		lsr.w	d7,d1
000015FC 0C01 00FC                  		cmpi.b	#-4,d1
00001600 6400                       		bcc.s	loc_14D6
00001602 0241 00FF                  		andi.w	#$FF,d1
00001606 D241                       		add.w	d1,d1
00001608 1031 1000                  		move.b	(a1,d1.w),d0
0000160C 4880                       		ext.w	d0
0000160E 9C40                       		sub.w	d0,d6
00001610 0C46 0009                  		cmpi.w	#9,d6
00001614 6400                       		bcc.s	loc_14B2
00001616 5046                       		addq.w	#8,d6
00001618 E145                       		asl.w	#8,d5
0000161A 1A18                       		move.b	(a0)+,d5
0000161C                            
0000161C                            loc_14B2:
0000161C 1231 1001                  		move.b	1(a1,d1.w),d1
00001620 3001                       		move.w	d1,d0
00001622 0241 000F                  		andi.w	#$F,d1
00001626 0240 00F0                  		andi.w	#$F0,d0
0000162A                            
0000162A                            loc_14C0:				; XREF: NemDec3
0000162A E848                       		lsr.w	#4,d0
0000162C                            
0000162C                            loc_14C2:				; XREF: NemDec3
0000162C E98C                       		lsl.l	#4,d4
0000162E 8801                       		or.b	d1,d4
00001630 5343                       		subq.w	#1,d3
00001632 6600                       		bne.s	loc_14D0
00001634 4ED3                       		jmp	(a3)
00001636                            ; End of function NemDec2
00001636                            
00001636                            
00001636                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001636                            
00001636                            
00001636                            NemDec3:				; XREF: loc_1502
00001636 7800                       		moveq	#0,d4
00001638 7608                       		moveq	#8,d3
0000163A                            
0000163A                            loc_14D0:				; XREF: NemDec2
0000163A 51C8 FFF0                  		dbf	d0,loc_14C2
0000163E 60B4                       		bra.s	NemDec2
00001640                            ; ===========================================================================
00001640                            
00001640                            loc_14D6:				; XREF: NemDec2
00001640 5D46                       		subq.w	#6,d6
00001642 0C46 0009                  		cmpi.w	#9,d6
00001646 6400                       		bcc.s	loc_14E4
00001648 5046                       		addq.w	#8,d6
0000164A E145                       		asl.w	#8,d5
0000164C 1A18                       		move.b	(a0)+,d5
0000164E                            
0000164E                            loc_14E4:				; XREF: NemDec3
0000164E 5F46                       		subq.w	#7,d6
00001650 3205                       		move.w	d5,d1
00001652 EC69                       		lsr.w	d6,d1
00001654 3001                       		move.w	d1,d0
00001656 0241 000F                  		andi.w	#$F,d1
0000165A 0240 0070                  		andi.w	#$70,d0
0000165E 0C46 0009                  		cmpi.w	#9,d6
00001662 64C6                       		bcc.s	loc_14C0
00001664 5046                       		addq.w	#8,d6
00001666 E145                       		asl.w	#8,d5
00001668 1A18                       		move.b	(a0)+,d5
0000166A 60BE                       		bra.s	loc_14C0
0000166C                            ; End of function NemDec3
0000166C                            
0000166C                            ; ===========================================================================
0000166C                            
0000166C                            loc_1502:				; XREF: NemDec
0000166C 2884                       		move.l	d4,(a4)
0000166E 534D                       		subq.w	#1,a5
00001670 380D                       		move.w	a5,d4
00001672 66C2                       		bne.s	NemDec3
00001674 4E75                       		rts	
00001676                            ; ===========================================================================
00001676 B982                       		eor.l	d4,d2
00001678 2882                       		move.l	d2,(a4)
0000167A 534D                       		subq.w	#1,a5
0000167C 380D                       		move.w	a5,d4
0000167E 66B6                       		bne.s	NemDec3
00001680 4E75                       		rts	
00001682                            ; ===========================================================================
00001682                            
00001682                            loc_1518:				; XREF: NemDec
00001682 28C4                       		move.l	d4,(a4)+
00001684 534D                       		subq.w	#1,a5
00001686 380D                       		move.w	a5,d4
00001688 66AC                       		bne.s	NemDec3
0000168A 4E75                       		rts	
0000168C                            ; ===========================================================================
0000168C B982                       		eor.l	d4,d2
0000168E 28C2                       		move.l	d2,(a4)+
00001690 534D                       		subq.w	#1,a5
00001692 380D                       		move.w	a5,d4
00001694 66A0                       		bne.s	NemDec3
00001696 4E75                       		rts	
00001698                            
00001698                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001698                            
00001698                            
00001698                            NemDec4:				; XREF: NemDec
00001698 1018                       		move.b	(a0)+,d0
0000169A                            
0000169A                            loc_1530:
0000169A 0C00 00FF                  		cmpi.b	#-1,d0
0000169E 6600                       		bne.s	loc_1538
000016A0 4E75                       		rts	
000016A2                            ; ===========================================================================
000016A2                            
000016A2                            loc_1538:				; XREF: NemDec4
000016A2 3E00                       		move.w	d0,d7
000016A4                            
000016A4                            loc_153A:
000016A4 1018                       		move.b	(a0)+,d0
000016A6 0C00 0080                  		cmpi.b	#$80,d0
000016AA 64EE                       		bcc.s	loc_1530
000016AC 1200                       		move.b	d0,d1
000016AE 0247 000F                  		andi.w	#$F,d7
000016B2 0241 0070                  		andi.w	#$70,d1
000016B6 8E41                       		or.w	d1,d7
000016B8 0240 000F                  		andi.w	#$F,d0
000016BC 1200                       		move.b	d0,d1
000016BE E149                       		lsl.w	#8,d1
000016C0 8E41                       		or.w	d1,d7
000016C2 7208                       		moveq	#8,d1
000016C4 9240                       		sub.w	d0,d1
000016C6 6600                       		bne.s	loc_1568
000016C8 1018                       		move.b	(a0)+,d0
000016CA D040                       		add.w	d0,d0
000016CC 3387 0000                  		move.w	d7,(a1,d0.w)
000016D0 60D2                       		bra.s	loc_153A
000016D2                            ; ===========================================================================
000016D2                            
000016D2                            loc_1568:				; XREF: NemDec4
000016D2 1018                       		move.b	(a0)+,d0
000016D4 E368                       		lsl.w	d1,d0
000016D6 D040                       		add.w	d0,d0
000016D8 7A01                       		moveq	#1,d5
000016DA E36D                       		lsl.w	d1,d5
000016DC 5345                       		subq.w	#1,d5
000016DE                            
000016DE                            loc_1574:
000016DE 3387 0000                  		move.w	d7,(a1,d0.w)
000016E2 5440                       		addq.w	#2,d0
000016E4 51CD FFF8                  		dbf	d5,loc_1574
000016E8 60BA                       		bra.s	loc_153A
000016EA                            ; End of function NemDec4
000016EA                            
000016EA                            ; ---------------------------------------------------------------------------
000016EA                            ; Subroutine to	load pattern load cues
000016EA                            ; ---------------------------------------------------------------------------
000016EA                            
000016EA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000016EA                            
000016EA                            
000016EA                            LoadPLC:
000016EA 48E7 0060                  		movem.l	a1-a2,-(sp)
000016EE 43F9 0000 0000             		lea	(ArtLoadCues).l,a1
000016F4 D040                       		add.w	d0,d0
000016F6 3031 0000                  		move.w	(a1,d0.w),d0
000016FA 43F1 0000                  		lea	(a1,d0.w),a1
000016FE 45F8 F680                  		lea	($FFFFF680).w,a2
00001702                            
00001702                            loc_1598:
00001702 4A92                       		tst.l	(a2)
00001704 6700                       		beq.s	loc_15A0
00001706 5C4A                       		addq.w	#6,a2
00001708 60F8                       		bra.s	loc_1598
0000170A                            ; ===========================================================================
0000170A                            
0000170A                            loc_15A0:				; XREF: LoadPLC
0000170A 3019                       		move.w	(a1)+,d0
0000170C 6B00                       		bmi.s	loc_15AC
0000170E                            
0000170E                            loc_15A4:
0000170E 24D9                       		move.l	(a1)+,(a2)+
00001710 34D9                       		move.w	(a1)+,(a2)+
00001712 51C8 FFFA                  		dbf	d0,loc_15A4
00001716                            
00001716                            loc_15AC:
00001716 4CDF 0600                  		movem.l	(sp)+,a1-a2
0000171A 4E75                       		rts	
0000171C                            ; End of function LoadPLC
0000171C                            
0000171C                            
0000171C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000171C                            
0000171C                            
0000171C                            LoadPLC2:
0000171C 48E7 0060                  		movem.l	a1-a2,-(sp)
00001720 43F9 0000 0000             		lea	(ArtLoadCues).l,a1
00001726 D040                       		add.w	d0,d0
00001728 3031 0000                  		move.w	(a1,d0.w),d0
0000172C 43F1 0000                  		lea	(a1,d0.w),a1
00001730 6100                       		bsr.s	ClearPLC
00001732 45F8 F680                  		lea	($FFFFF680).w,a2
00001736 3019                       		move.w	(a1)+,d0
00001738 6B00                       		bmi.s	loc_15D8
0000173A                            
0000173A                            loc_15D0:
0000173A 24D9                       		move.l	(a1)+,(a2)+
0000173C 34D9                       		move.w	(a1)+,(a2)+
0000173E 51C8 FFFA                  		dbf	d0,loc_15D0
00001742                            
00001742                            loc_15D8:
00001742 4CDF 0600                  		movem.l	(sp)+,a1-a2
00001746 4E75                       		rts	
00001748                            ; End of function LoadPLC2
00001748                            
00001748                            ; ---------------------------------------------------------------------------
00001748                            ; Subroutine to	clear the pattern load cues
00001748                            ; ---------------------------------------------------------------------------
00001748                            
00001748                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001748                            
00001748                            
00001748                            ClearPLC:				; XREF: LoadPLC2
00001748 45F8 F680                  		lea	($FFFFF680).w,a2
0000174C 701F                       		moveq	#$1F,d0
0000174E                            
0000174E                            ClearPLC_Loop:
0000174E 429A                       		clr.l	(a2)+
00001750 51C8 FFFC                  		dbf	d0,ClearPLC_Loop
00001754 4E75                       		rts	
00001756                            ; End of function ClearPLC
00001756                            
00001756                            ; ---------------------------------------------------------------------------
00001756                            ; Subroutine to	use graphics listed in a pattern load cue
00001756                            ; ---------------------------------------------------------------------------
00001756                            
00001756                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001756                            
00001756                            
00001756                            RunPLC_RAM:				; XREF: Pal_FadeTo
00001756 4AB8 F680                  		tst.l	($FFFFF680).w
0000175A 6700                       		beq.s	locret_1640
0000175C 4A78 F6F8                  		tst.w	($FFFFF6F8).w
00001760 6600                       		bne.s	locret_1640
00001762 2078 F680                  		movea.l	($FFFFF680).w,a0
00001766 47F9 0000 166C             		lea	(loc_1502).l,a3
0000176C 43F8 AA00                  		lea	($FFFFAA00).w,a1
00001770 3418                       		move.w	(a0)+,d2
00001772 6A00                       		bpl.s	loc_160E
00001774 D6FC 000A                  		adda.w	#$A,a3
00001778                            
00001778                            loc_160E:
00001778 0242 7FFF                  		andi.w	#$7FFF,d2
0000177C 31C2 F6F8                  		move.w	d2,($FFFFF6F8).w
00001780 6100 FF16                  		bsr.w	NemDec4
00001784 1A18                       		move.b	(a0)+,d5
00001786 E145                       		asl.w	#8,d5
00001788 1A18                       		move.b	(a0)+,d5
0000178A 7C10                       		moveq	#$10,d6
0000178C 7000                       		moveq	#0,d0
0000178E 21C8 F680                  		move.l	a0,($FFFFF680).w
00001792 21CB F6E0                  		move.l	a3,($FFFFF6E0).w
00001796 21C0 F6E4                  		move.l	d0,($FFFFF6E4).w
0000179A 21C0 F6E8                  		move.l	d0,($FFFFF6E8).w
0000179E 21C0 F6EC                  		move.l	d0,($FFFFF6EC).w
000017A2 21C5 F6F0                  		move.l	d5,($FFFFF6F0).w
000017A6 21C6 F6F4                  		move.l	d6,($FFFFF6F4).w
000017AA                            
000017AA                            locret_1640:
000017AA 4E75                       		rts	
000017AC                            ; End of function RunPLC_RAM
000017AC                            
000017AC                            
000017AC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000017AC                            
000017AC                            
000017AC                            sub_1642:				; XREF: loc_C44; loc_F54; loc_F9A
000017AC 4A78 F6F8                  		tst.w	($FFFFF6F8).w
000017B0 6700 0000                  		beq.w	locret_16DA
000017B4 31FC 0009 F6FA             		move.w	#9,($FFFFF6FA).w
000017BA 7000                       		moveq	#0,d0
000017BC 3038 F684                  		move.w	($FFFFF684).w,d0
000017C0 0678 0120 F684             		addi.w	#$120,($FFFFF684).w
000017C6 6000                       		bra.s	loc_1676
000017C8                            ; End of function sub_1642
000017C8                            
000017C8                            
000017C8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000017C8                            
000017C8                            
000017C8                            sub_165E:				; XREF: Demo_Time
000017C8 4A78 F6F8                  		tst.w	($FFFFF6F8).w
000017CC 6700                       		beq.s	locret_16DA
000017CE 31FC 0003 F6FA             		move.w	#3,($FFFFF6FA).w
000017D4 7000                       		moveq	#0,d0
000017D6 3038 F684                  		move.w	($FFFFF684).w,d0
000017DA 0678 0060 F684             		addi.w	#$60,($FFFFF684).w
000017E0                            
000017E0                            loc_1676:				; XREF: sub_1642
000017E0 49F9 00C0 0004             		lea	($C00004).l,a4
000017E6 E588                       		lsl.l	#2,d0
000017E8 E448                       		lsr.w	#2,d0
000017EA 0040 4000                  		ori.w	#$4000,d0
000017EE 4840                       		swap	d0
000017F0 2880                       		move.l	d0,(a4)
000017F2 594C                       		subq.w	#4,a4
000017F4 2078 F680                  		movea.l	($FFFFF680).w,a0
000017F8 2678 F6E0                  		movea.l	($FFFFF6E0).w,a3
000017FC 2038 F6E4                  		move.l	($FFFFF6E4).w,d0
00001800 2238 F6E8                  		move.l	($FFFFF6E8).w,d1
00001804 2438 F6EC                  		move.l	($FFFFF6EC).w,d2
00001808 2A38 F6F0                  		move.l	($FFFFF6F0).w,d5
0000180C 2C38 F6F4                  		move.l	($FFFFF6F4).w,d6
00001810 43F8 AA00                  		lea	($FFFFAA00).w,a1
00001814                            
00001814                            loc_16AA:				; XREF: sub_165E
00001814 3A7C 0008                  		movea.w	#8,a5
00001818 6100 FE1C                  		bsr.w	NemDec3
0000181C 5378 F6F8                  		subq.w	#1,($FFFFF6F8).w
00001820 6700                       		beq.s	loc_16DC
00001822 5378 F6FA                  		subq.w	#1,($FFFFF6FA).w
00001826 66EC                       		bne.s	loc_16AA
00001828 21C8 F680                  		move.l	a0,($FFFFF680).w
0000182C 21CB F6E0                  		move.l	a3,($FFFFF6E0).w
00001830 21C0 F6E4                  		move.l	d0,($FFFFF6E4).w
00001834 21C1 F6E8                  		move.l	d1,($FFFFF6E8).w
00001838 21C2 F6EC                  		move.l	d2,($FFFFF6EC).w
0000183C 21C5 F6F0                  		move.l	d5,($FFFFF6F0).w
00001840 21C6 F6F4                  		move.l	d6,($FFFFF6F4).w
00001844                            
00001844                            locret_16DA:				; XREF: sub_1642
00001844 4E75                       		rts	
00001846                            ; ===========================================================================
00001846                            
00001846                            loc_16DC:				; XREF: sub_165E
00001846 41F8 F680                  		lea	($FFFFF680).w,a0
0000184A 7015                       		moveq	#$15,d0
0000184C                            
0000184C                            loc_16E2:				; XREF: sub_165E
0000184C 20E8 0006                  		move.l	6(a0),(a0)+
00001850 51C8 FFFA                  		dbf	d0,loc_16E2
00001854 4E75                       		rts	
00001856                            ; End of function sub_165E
00001856                            
00001856                            ; ---------------------------------------------------------------------------
00001856                            ; Subroutine to	execute	the pattern load cue
00001856                            ; ---------------------------------------------------------------------------
00001856                            
00001856                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001856                            
00001856                            
00001856                            RunPLC_ROM:
00001856 43F9 0000 0000             		lea	(ArtLoadCues).l,a1 ; load the PLC index
0000185C D040                       		add.w	d0,d0
0000185E 3031 0000                  		move.w	(a1,d0.w),d0
00001862 43F1 0000                  		lea	(a1,d0.w),a1
00001866 3219                       		move.w	(a1)+,d1	; load number of entries in the	PLC
00001868                            
00001868                            RunPLC_Loop:
00001868 2059                       		movea.l	(a1)+,a0	; get art pointer
0000186A 7000                       		moveq	#0,d0
0000186C 3019                       		move.w	(a1)+,d0	; get VRAM address
0000186E E588                       		lsl.l	#2,d0		; divide address by $20
00001870 E448                       		lsr.w	#2,d0
00001872 0040 4000                  		ori.w	#$4000,d0
00001876 4840                       		swap	d0
00001878 23C0 00C0 0004             		move.l	d0,($C00004).l	; put the VRAM address into VDP
0000187E 6100 FD2A                  		bsr.w	NemDec		; decompress
00001882 51C9 FFE4                  		dbf	d1,RunPLC_Loop	; loop for number of entries
00001886 4E75                       		rts	
00001888                            ; End of function RunPLC_ROM
00001888                            
00001888                            ; ---------------------------------------------------------------------------
00001888                            ; Enigma decompression algorithm
00001888                            ; ---------------------------------------------------------------------------
00001888                            
00001888                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001888                            
00001888                            
00001888                            EniDec:
00001888 48E7 FF7C                  		movem.l	d0-d7/a1-a5,-(sp)
0000188C 3640                       		movea.w	d0,a3
0000188E 1018                       		move.b	(a0)+,d0
00001890 4880                       		ext.w	d0
00001892 3A40                       		movea.w	d0,a5
00001894 1818                       		move.b	(a0)+,d4
00001896 E70C                       		lsl.b	#3,d4
00001898 3458                       		movea.w	(a0)+,a2
0000189A D4CB                       		adda.w	a3,a2
0000189C 3858                       		movea.w	(a0)+,a4
0000189E D8CB                       		adda.w	a3,a4
000018A0 1A18                       		move.b	(a0)+,d5
000018A2 E145                       		asl.w	#8,d5
000018A4 1A18                       		move.b	(a0)+,d5
000018A6 7C10                       		moveq	#$10,d6
000018A8                            
000018A8                            loc_173E:				; XREF: loc_1768
000018A8 7007                       		moveq	#7,d0
000018AA 3E06                       		move.w	d6,d7
000018AC 9E40                       		sub.w	d0,d7
000018AE 3205                       		move.w	d5,d1
000018B0 EE69                       		lsr.w	d7,d1
000018B2 0241 007F                  		andi.w	#$7F,d1
000018B6 3401                       		move.w	d1,d2
000018B8 0C41 0040                  		cmpi.w	#$40,d1
000018BC 6400                       		bcc.s	loc_1758
000018BE 7006                       		moveq	#6,d0
000018C0 E24A                       		lsr.w	#1,d2
000018C2                            
000018C2                            loc_1758:
000018C2 6100 0000                  		bsr.w	sub_188C
000018C6 0242 000F                  		andi.w	#$F,d2
000018CA E849                       		lsr.w	#4,d1
000018CC D241                       		add.w	d1,d1
000018CE 4EFB 1000                  		jmp	loc_17B4(pc,d1.w)
000018D2                            ; End of function EniDec
000018D2                            
000018D2                            ; ===========================================================================
000018D2                            
000018D2                            loc_1768:				; XREF: loc_17B4
000018D2 32CA                       		move.w	a2,(a1)+
000018D4 524A                       		addq.w	#1,a2
000018D6 51CA FFFA                  		dbf	d2,loc_1768
000018DA 60CC                       		bra.s	loc_173E
000018DC                            ; ===========================================================================
000018DC                            
000018DC                            loc_1772:				; XREF: loc_17B4
000018DC 32CC                       		move.w	a4,(a1)+
000018DE 51CA FFFC                  		dbf	d2,loc_1772
000018E2 60C4                       		bra.s	loc_173E
000018E4                            ; ===========================================================================
000018E4                            
000018E4                            loc_177A:				; XREF: loc_17B4
000018E4 6100 0000                  		bsr.w	loc_17DC
000018E8                            
000018E8                            loc_177E:
000018E8 32C1                       		move.w	d1,(a1)+
000018EA 51CA FFFC                  		dbf	d2,loc_177E
000018EE 60B8                       		bra.s	loc_173E
000018F0                            ; ===========================================================================
000018F0                            
000018F0                            loc_1786:				; XREF: loc_17B4
000018F0 6100 0000                  		bsr.w	loc_17DC
000018F4                            
000018F4                            loc_178A:
000018F4 32C1                       		move.w	d1,(a1)+
000018F6 5241                       		addq.w	#1,d1
000018F8 51CA FFFA                  		dbf	d2,loc_178A
000018FC 60AA                       		bra.s	loc_173E
000018FE                            ; ===========================================================================
000018FE                            
000018FE                            loc_1794:				; XREF: loc_17B4
000018FE 6100 0000                  		bsr.w	loc_17DC
00001902                            
00001902                            loc_1798:
00001902 32C1                       		move.w	d1,(a1)+
00001904 5341                       		subq.w	#1,d1
00001906 51CA FFFA                  		dbf	d2,loc_1798
0000190A 609C                       		bra.s	loc_173E
0000190C                            ; ===========================================================================
0000190C                            
0000190C                            loc_17A2:				; XREF: loc_17B4
0000190C 0C42 000F                  		cmpi.w	#$F,d2
00001910 6700                       		beq.s	loc_17C4
00001912                            
00001912                            loc_17A8:
00001912 6100 0000                  		bsr.w	loc_17DC
00001916 32C1                       		move.w	d1,(a1)+
00001918 51CA FFF8                  		dbf	d2,loc_17A8
0000191C 608A                       		bra.s	loc_173E
0000191E                            ; ===========================================================================
0000191E                            
0000191E                            loc_17B4:				; XREF: EniDec
0000191E 60B2                       		bra.s	loc_1768
00001920                            ; ===========================================================================
00001920 60B0                       		bra.s	loc_1768
00001922                            ; ===========================================================================
00001922 60B8                       		bra.s	loc_1772
00001924                            ; ===========================================================================
00001924 60B6                       		bra.s	loc_1772
00001926                            ; ===========================================================================
00001926 60BC                       		bra.s	loc_177A
00001928                            ; ===========================================================================
00001928 60C6                       		bra.s	loc_1786
0000192A                            ; ===========================================================================
0000192A 60D2                       		bra.s	loc_1794
0000192C                            ; ===========================================================================
0000192C 60DE                       		bra.s	loc_17A2
0000192E                            ; ===========================================================================
0000192E                            
0000192E                            loc_17C4:				; XREF: loc_17A2
0000192E 5348                       		subq.w	#1,a0
00001930 0C46 0010                  		cmpi.w	#$10,d6
00001934 6600                       		bne.s	loc_17CE
00001936 5348                       		subq.w	#1,a0
00001938                            
00001938                            loc_17CE:
00001938 3008                       		move.w	a0,d0
0000193A E248                       		lsr.w	#1,d0
0000193C 6400                       		bcc.s	loc_17D6
0000193E 5248                       		addq.w	#1,a0
00001940                            
00001940                            loc_17D6:
00001940 4CDF 3EFF                  		movem.l	(sp)+,d0-d7/a1-a5
00001944 4E75                       		rts	
00001946                            ; ===========================================================================
00001946                            
00001946                            loc_17DC:				; XREF: loc_17A2
00001946 360B                       		move.w	a3,d3
00001948 1204                       		move.b	d4,d1
0000194A D201                       		add.b	d1,d1
0000194C 6400                       		bcc.s	loc_17EE
0000194E 5346                       		subq.w	#1,d6
00001950 0D05                       		btst	d6,d5
00001952 6700                       		beq.s	loc_17EE
00001954 0043 8000                  		ori.w	#-$8000,d3
00001958                            
00001958                            loc_17EE:
00001958 D201                       		add.b	d1,d1
0000195A 6400                       		bcc.s	loc_17FC
0000195C 5346                       		subq.w	#1,d6
0000195E 0D05                       		btst	d6,d5
00001960 6700                       		beq.s	loc_17FC
00001962 0643 4000                  		addi.w	#$4000,d3
00001966                            
00001966                            loc_17FC:
00001966 D201                       		add.b	d1,d1
00001968 6400                       		bcc.s	loc_180A
0000196A 5346                       		subq.w	#1,d6
0000196C 0D05                       		btst	d6,d5
0000196E 6700                       		beq.s	loc_180A
00001970 0643 2000                  		addi.w	#$2000,d3
00001974                            
00001974                            loc_180A:
00001974 D201                       		add.b	d1,d1
00001976 6400                       		bcc.s	loc_1818
00001978 5346                       		subq.w	#1,d6
0000197A 0D05                       		btst	d6,d5
0000197C 6700                       		beq.s	loc_1818
0000197E 0043 1000                  		ori.w	#$1000,d3
00001982                            
00001982                            loc_1818:
00001982 D201                       		add.b	d1,d1
00001984 6400                       		bcc.s	loc_1826
00001986 5346                       		subq.w	#1,d6
00001988 0D05                       		btst	d6,d5
0000198A 6700                       		beq.s	loc_1826
0000198C 0043 0800                  		ori.w	#$800,d3
00001990                            
00001990                            loc_1826:
00001990 3205                       		move.w	d5,d1
00001992 3E06                       		move.w	d6,d7
00001994 9E4D                       		sub.w	a5,d7
00001996 6400                       		bcc.s	loc_1856
00001998 3C07                       		move.w	d7,d6
0000199A 0646 0010                  		addi.w	#$10,d6
0000199E 4447                       		neg.w	d7
000019A0 EF69                       		lsl.w	d7,d1
000019A2 1A10                       		move.b	(a0),d5
000019A4 EF3D                       		rol.b	d7,d5
000019A6 DE47                       		add.w	d7,d7
000019A8 CA7B 7000                  		and.w	word_186C-2(pc,d7.w),d5
000019AC D245                       		add.w	d5,d1
000019AE                            
000019AE                            loc_1844:				; XREF: loc_1868
000019AE 300D                       		move.w	a5,d0
000019B0 D040                       		add.w	d0,d0
000019B2 C27B 0000                  		and.w	word_186C-2(pc,d0.w),d1
000019B6 D243                       		add.w	d3,d1
000019B8 1A18                       		move.b	(a0)+,d5
000019BA E14D                       		lsl.w	#8,d5
000019BC 1A18                       		move.b	(a0)+,d5
000019BE 4E75                       		rts	
000019C0                            ; ===========================================================================
000019C0                            
000019C0                            loc_1856:				; XREF: loc_1826
000019C0 6700                       		beq.s	loc_1868
000019C2 EE69                       		lsr.w	d7,d1
000019C4 300D                       		move.w	a5,d0
000019C6 D040                       		add.w	d0,d0
000019C8 C27B 0000                  		and.w	word_186C-2(pc,d0.w),d1
000019CC D243                       		add.w	d3,d1
000019CE 300D                       		move.w	a5,d0
000019D0 6000                       		bra.s	sub_188C
000019D2                            ; ===========================================================================
000019D2                            
000019D2                            loc_1868:				; XREF: loc_1856
000019D2 7C10                       		moveq	#$10,d6
000019D4                            
000019D4                            loc_186A:
000019D4 60D8                       		bra.s	loc_1844
000019D6                            ; ===========================================================================
000019D6 0001 0003 0007 000F 001F+  word_186C:	dc.w 1,	3, 7, $F, $1F, $3F, $7F, $FF, $1FF, $3FF, $7FF
000019EC 0FFF 1FFF 3FFF 7FFF FFFF   		dc.w $FFF, $1FFF, $3FFF, $7FFF,	$FFFF	; XREF: loc_1856
000019F6                            
000019F6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000019F6                            
000019F6                            
000019F6                            sub_188C:				; XREF: EniDec
000019F6 9C40                       		sub.w	d0,d6
000019F8 0C46 0009                  		cmpi.w	#9,d6
000019FC 6400                       		bcc.s	locret_189A
000019FE 5046                       		addq.w	#8,d6
00001A00 E145                       		asl.w	#8,d5
00001A02 1A18                       		move.b	(a0)+,d5
00001A04                            
00001A04                            locret_189A:
00001A04 4E75                       		rts	
00001A06                            ; End of function sub_188C
00001A06                            
00001A06                            ; ---------------------------------------------------------------------------
00001A06                            ; Kosinski decompression algorithm
00001A06                            ; ---------------------------------------------------------------------------
00001A06                            
00001A06                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001A06                            
00001A06                            
00001A06                            KosDec:
00001A06                            
00001A06 =FFFFFFFE                  var_2		= -2
00001A06 =FFFFFFFF                  var_1		= -1
00001A06                            
00001A06 558F                       		subq.l	#2,sp
00001A08 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001A0C 1E98                       		move.b	(a0)+,(sp)
00001A0E 3A17                       		move.w	(sp),d5
00001A10 780F                       		moveq	#$F,d4
00001A12                            
00001A12                            loc_18A8:
00001A12 E24D                       		lsr.w	#1,d5
00001A14 40C6                       		move	sr,d6
00001A16 51CC 0000                  		dbf	d4,loc_18BA
00001A1A 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001A1E 1E98                       		move.b	(a0)+,(sp)
00001A20 3A17                       		move.w	(sp),d5
00001A22 780F                       		moveq	#$F,d4
00001A24                            
00001A24                            loc_18BA:
00001A24 44C6                       		move	d6,ccr
00001A26 6400                       		bcc.s	loc_18C2
00001A28 12D8                       		move.b	(a0)+,(a1)+
00001A2A 60E6                       		bra.s	loc_18A8
00001A2C                            ; ===========================================================================
00001A2C                            
00001A2C                            loc_18C2:				; XREF: KosDec
00001A2C 7600                       		moveq	#0,d3
00001A2E E24D                       		lsr.w	#1,d5
00001A30 40C6                       		move	sr,d6
00001A32 51CC 0000                  		dbf	d4,loc_18D6
00001A36 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001A3A 1E98                       		move.b	(a0)+,(sp)
00001A3C 3A17                       		move.w	(sp),d5
00001A3E 780F                       		moveq	#$F,d4
00001A40                            
00001A40                            loc_18D6:
00001A40 44C6                       		move	d6,ccr
00001A42 6500                       		bcs.s	loc_1906
00001A44 E24D                       		lsr.w	#1,d5
00001A46 51CC 0000                  		dbf	d4,loc_18EA
00001A4A 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001A4E 1E98                       		move.b	(a0)+,(sp)
00001A50 3A17                       		move.w	(sp),d5
00001A52 780F                       		moveq	#$F,d4
00001A54                            
00001A54                            loc_18EA:
00001A54 E353                       		roxl.w	#1,d3
00001A56 E24D                       		lsr.w	#1,d5
00001A58 51CC 0000                  		dbf	d4,loc_18FC
00001A5C 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001A60 1E98                       		move.b	(a0)+,(sp)
00001A62 3A17                       		move.w	(sp),d5
00001A64 780F                       		moveq	#$F,d4
00001A66                            
00001A66                            loc_18FC:
00001A66 E353                       		roxl.w	#1,d3
00001A68 5243                       		addq.w	#1,d3
00001A6A 74FF                       		moveq	#-1,d2
00001A6C 1418                       		move.b	(a0)+,d2
00001A6E 6000                       		bra.s	loc_191C
00001A70                            ; ===========================================================================
00001A70                            
00001A70                            loc_1906:				; XREF: loc_18C2
00001A70 1018                       		move.b	(a0)+,d0
00001A72 1218                       		move.b	(a0)+,d1
00001A74 74FF                       		moveq	#-1,d2
00001A76 1401                       		move.b	d1,d2
00001A78 EB4A                       		lsl.w	#5,d2
00001A7A 1400                       		move.b	d0,d2
00001A7C 0241 0007                  		andi.w	#7,d1
00001A80 6700                       		beq.s	loc_1928
00001A82 1601                       		move.b	d1,d3
00001A84 5243                       		addq.w	#1,d3
00001A86                            
00001A86                            loc_191C:
00001A86 1031 2000                  		move.b	(a1,d2.w),d0
00001A8A 12C0                       		move.b	d0,(a1)+
00001A8C 51CB FFF8                  		dbf	d3,loc_191C
00001A90 6080                       		bra.s	loc_18A8
00001A92                            ; ===========================================================================
00001A92                            
00001A92                            loc_1928:				; XREF: loc_1906
00001A92 1218                       		move.b	(a0)+,d1
00001A94 6700                       		beq.s	loc_1938
00001A96 0C01 0001                  		cmpi.b	#1,d1
00001A9A 6700 FF76                  		beq.w	loc_18A8
00001A9E 1601                       		move.b	d1,d3
00001AA0 60E4                       		bra.s	loc_191C
00001AA2                            ; ===========================================================================
00001AA2                            
00001AA2                            loc_1938:				; XREF: loc_1928
00001AA2 548F                       		addq.l	#2,sp
00001AA4 4E75                       		rts	
00001AA6                            ; End of function KosDec
00001AA6                            
00001AA6                            ; ---------------------------------------------------------------------------
00001AA6                            ; Pallet cycling routine loading subroutine
00001AA6                            ; ---------------------------------------------------------------------------
00001AA6                            
00001AA6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001AA6                            
00001AA6                            
00001AA6                            PalCycle_Load:				; XREF: Demo; Level_MainLoop; End_MainLoop
00001AA6 4EB9 0000 0000                 	jsr    PalCycle_SuperSonic
00001AAC 7400                       		moveq	#0,d2
00001AAE 7000                       		moveq	#0,d0
00001AB0 1038 FE10                  		move.b	($FFFFFE10).w,d0 ; get level number
00001AB4 D040                       		add.w	d0,d0		; multiply by 2
00001AB6 303B 0000                  		move.w	PalCycle(pc,d0.w),d0 ; load animated pallets offset index into d0
00001ABA 4EFB 0000                  		jmp	PalCycle(pc,d0.w) ; jump to PalCycle + offset index
00001ABE                            ; End of function PalCycle_Load
00001ABE                            
00001ABE                            ; ===========================================================================
00001ABE                            ; ---------------------------------------------------------------------------
00001ABE                            ; Pallet cycling routines
00001ABE                            ; ---------------------------------------------------------------------------
00001ABE 0000                       PalCycle:	dc.w PalCycle_GHZ-PalCycle
00001AC0 0000                       		dc.w PalCycle_LZ-PalCycle
00001AC2 0000                       		dc.w PalCycle_MZ-PalCycle
00001AC4 0000                       		dc.w PalCycle_SLZ-PalCycle
00001AC6 0000                       		dc.w PalCycle_SYZ-PalCycle
00001AC8 0000                       		dc.w PalCycle_SBZ-PalCycle
00001ACA 0000                       		dc.w PalCycle_GHZ-PalCycle
00001ACC                            
00001ACC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001ACC                            
00001ACC                            
00001ACC                            PalCycle_Title:				; XREF: TitleScreen
00001ACC 41F9 0000 0000             		lea	(Pal_TitleCyc).l,a0
00001AD2 6000                       		bra.s	loc_196A
00001AD4                            ; ===========================================================================
00001AD4                            
00001AD4                            PalCycle_GHZ:				; XREF: PalCycle
00001AD4 41F9 0000 0000             		lea	(Pal_GHZCyc).l,a0
00001ADA                            
00001ADA                            loc_196A:				; XREF: PalCycle_Title
00001ADA 5378 F634                  		subq.w	#1,($FFFFF634).w
00001ADE 6A00                       		bpl.s	locret_1990
00001AE0 31FC 0005 F634             		move.w	#5,($FFFFF634).w
00001AE6 3038 F632                  		move.w	($FFFFF632).w,d0
00001AEA 5278 F632                  		addq.w	#1,($FFFFF632).w
00001AEE 0240 0003                  		andi.w	#3,d0
00001AF2 E748                       		lsl.w	#3,d0
00001AF4 43F8 FB50                  		lea	($FFFFFB50).w,a1
00001AF8 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001AFC 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001B00                            
00001B00                            locret_1990:
00001B00 4E75                       		rts	
00001B02                            ; End of function PalCycle_Title
00001B02                            
00001B02                            
00001B02                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001B02                            
00001B02                            
00001B02                            PalCycle_LZ:				; XREF: PalCycle
00001B02 5378 F634                  		subq.w	#1,($FFFFF634).w
00001B06 6A00                       		bpl.s	loc_19D8
00001B08 31FC 0002 F634             		move.w	#2,($FFFFF634).w
00001B0E 3038 F632                  		move.w	($FFFFF632).w,d0
00001B12 5278 F632                  		addq.w	#1,($FFFFF632).w
00001B16 0240 0003                  		andi.w	#3,d0
00001B1A E748                       		lsl.w	#3,d0
00001B1C 41F9 0000 0000             		lea	(Pal_LZCyc1).l,a0
00001B22 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; check if level is SBZ3
00001B28 6600                       		bne.s	loc_19C0
00001B2A 41F9 0000 0000             		lea	(Pal_SBZ3Cyc1).l,a0 ; load SBZ3	pallet instead
00001B30                            
00001B30                            loc_19C0:
00001B30 43F8 FB56                  		lea	($FFFFFB56).w,a1
00001B34 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001B38 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001B3C 43F8 FAD6                  		lea	($FFFFFAD6).w,a1
00001B40 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001B44 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001B48                            
00001B48                            loc_19D8:
00001B48 3038 FE04                  		move.w	($FFFFFE04).w,d0
00001B4C 0240 0007                  		andi.w	#7,d0
00001B50 103B 0000                  		move.b	byte_1A3C(pc,d0.w),d0
00001B54 6700                       		beq.s	locret_1A3A
00001B56 7201                       		moveq	#1,d1
00001B58 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00001B5C 6700                       		beq.s	loc_19F0
00001B5E 4441                       		neg.w	d1
00001B60                            
00001B60                            loc_19F0:
00001B60 3038 F650                  		move.w	($FFFFF650).w,d0
00001B64 0240 0003                  		andi.w	#3,d0
00001B68 D041                       		add.w	d1,d0
00001B6A 0C40 0003                  		cmpi.w	#3,d0
00001B6E 6500                       		bcs.s	loc_1A0A
00001B70 3200                       		move.w	d0,d1
00001B72 7000                       		moveq	#0,d0
00001B74 4A41                       		tst.w	d1
00001B76 6A00                       		bpl.s	loc_1A0A
00001B78 7002                       		moveq	#2,d0
00001B7A                            
00001B7A                            loc_1A0A:
00001B7A 31C0 F650                  		move.w	d0,($FFFFF650).w
00001B7E D040                       		add.w	d0,d0
00001B80 3200                       		move.w	d0,d1
00001B82 D040                       		add.w	d0,d0
00001B84 D041                       		add.w	d1,d0
00001B86 41F9 0000 0000             		lea	(Pal_LZCyc2).l,a0
00001B8C 43F8 FB76                  		lea	($FFFFFB76).w,a1
00001B90 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001B94 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001B98 41F9 0000 0000             		lea	(Pal_LZCyc3).l,a0
00001B9E 43F8 FAF6                  		lea	($FFFFFAF6).w,a1
00001BA2 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001BA6 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001BAA                            
00001BAA                            locret_1A3A:
00001BAA 4E75                       		rts	
00001BAC                            ; End of function PalCycle_LZ
00001BAC                            
00001BAC                            ; ===========================================================================
00001BAC 0100 0001 0000 0100        byte_1A3C:	dc.b 1,	0, 0, 1, 0, 0, 1, 0
00001BB4                            ; ===========================================================================
00001BB4                            
00001BB4                            PalCycle_MZ:				; XREF: PalCycle
00001BB4 4E75                       		rts	
00001BB6                            
00001BB6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001BB6                            
00001BB6                            
00001BB6                            PalCycle_SLZ:				; XREF: PalCycle
00001BB6 5378 F634                  		subq.w	#1,($FFFFF634).w
00001BBA 6A00                       		bpl.s	locret_1A80
00001BBC 31FC 0007 F634             		move.w	#7,($FFFFF634).w
00001BC2 3038 F632                  		move.w	($FFFFF632).w,d0
00001BC6 5240                       		addq.w	#1,d0
00001BC8 0C40 0006                  		cmpi.w	#6,d0
00001BCC 6500                       		bcs.s	loc_1A60
00001BCE 7000                       		moveq	#0,d0
00001BD0                            
00001BD0                            loc_1A60:
00001BD0 31C0 F632                  		move.w	d0,($FFFFF632).w
00001BD4 3200                       		move.w	d0,d1
00001BD6 D241                       		add.w	d1,d1
00001BD8 D041                       		add.w	d1,d0
00001BDA D040                       		add.w	d0,d0
00001BDC 41F9 0000 0000             		lea	(Pal_SLZCyc).l,a0
00001BE2 43F8 FB56                  		lea	($FFFFFB56).w,a1
00001BE6 32B0 0000                  		move.w	(a0,d0.w),(a1)
00001BEA 2370 0002 0004             		move.l	2(a0,d0.w),4(a1)
00001BF0                            
00001BF0                            locret_1A80:
00001BF0 4E75                       		rts	
00001BF2                            ; End of function PalCycle_SLZ
00001BF2                            
00001BF2                            
00001BF2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001BF2                            
00001BF2                            
00001BF2                            PalCycle_SYZ:				; XREF: PalCycle
00001BF2 5378 F634                  		subq.w	#1,($FFFFF634).w
00001BF6 6A00                       		bpl.s	locret_1AC6
00001BF8 31FC 0005 F634             		move.w	#5,($FFFFF634).w
00001BFE 3038 F632                  		move.w	($FFFFF632).w,d0
00001C02 5278 F632                  		addq.w	#1,($FFFFF632).w
00001C06 0240 0003                  		andi.w	#3,d0
00001C0A E548                       		lsl.w	#2,d0
00001C0C 3200                       		move.w	d0,d1
00001C0E D040                       		add.w	d0,d0
00001C10 41F9 0000 0000             		lea	(Pal_SYZCyc1).l,a0
00001C16 43F8 FB6E                  		lea	($FFFFFB6E).w,a1
00001C1A 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001C1E 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001C22 41F9 0000 0000             		lea	(Pal_SYZCyc2).l,a0
00001C28 43F8 FB76                  		lea	($FFFFFB76).w,a1
00001C2C 32B0 1000                  		move.w	(a0,d1.w),(a1)
00001C30 3370 1002 0004             		move.w	2(a0,d1.w),4(a1)
00001C36                            
00001C36                            locret_1AC6:
00001C36 4E75                       		rts	
00001C38                            ; End of function PalCycle_SYZ
00001C38                            
00001C38                            
00001C38                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001C38                            
00001C38                            
00001C38                            PalCycle_SBZ:				; XREF: PalCycle
00001C38 45F9 0000 0000             		lea	(Pal_SBZCycList).l,a2
00001C3E 4A38 FE11                  		tst.b	($FFFFFE11).w
00001C42 6700                       		beq.s	loc_1ADA
00001C44 45F9 0000 0000             		lea	(Pal_SBZCycList2).l,a2
00001C4A                            
00001C4A                            loc_1ADA:
00001C4A 43F8 F650                  		lea	($FFFFF650).w,a1
00001C4E 321A                       		move.w	(a2)+,d1
00001C50                            
00001C50                            loc_1AE0:
00001C50 5311                       		subq.b	#1,(a1)
00001C52 6B00                       		bmi.s	loc_1AEA
00001C54 5489                       		addq.l	#2,a1
00001C56 5C8A                       		addq.l	#6,a2
00001C58 6000                       		bra.s	loc_1B06
00001C5A                            ; ===========================================================================
00001C5A                            
00001C5A                            loc_1AEA:				; XREF: PalCycle_SBZ
00001C5A 12DA                       		move.b	(a2)+,(a1)+
00001C5C 1011                       		move.b	(a1),d0
00001C5E 5200                       		addq.b	#1,d0
00001C60 B01A                       		cmp.b	(a2)+,d0
00001C62 6500                       		bcs.s	loc_1AF6
00001C64 7000                       		moveq	#0,d0
00001C66                            
00001C66                            loc_1AF6:
00001C66 12C0                       		move.b	d0,(a1)+
00001C68 0240 000F                  		andi.w	#$F,d0
00001C6C D040                       		add.w	d0,d0
00001C6E 305A                       		movea.w	(a2)+,a0
00001C70 365A                       		movea.w	(a2)+,a3
00001C72 36B0 0000                  		move.w	(a0,d0.w),(a3)
00001C76                            
00001C76                            loc_1B06:				; XREF: PalCycle_SBZ
00001C76 51C9 FFD8                  		dbf	d1,loc_1AE0
00001C7A 5378 F634                  		subq.w	#1,($FFFFF634).w
00001C7E 6A00                       		bpl.s	locret_1B64
00001C80 41F9 0000 0000             		lea	(Pal_SBZCyc4).l,a0
00001C86 31FC 0001 F634             		move.w	#1,($FFFFF634).w
00001C8C 4A38 FE11                  		tst.b	($FFFFFE11).w
00001C90 6700                       		beq.s	loc_1B2E
00001C92 41F9 0000 0000             		lea	(Pal_SBZCyc10).l,a0
00001C98 31FC 0000 F634             		move.w	#0,($FFFFF634).w
00001C9E                            
00001C9E                            loc_1B2E:
00001C9E 72FF                       		moveq	#-1,d1
00001CA0 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00001CA4 6700                       		beq.s	loc_1B38
00001CA6 4441                       		neg.w	d1
00001CA8                            
00001CA8                            loc_1B38:
00001CA8 3038 F632                  		move.w	($FFFFF632).w,d0
00001CAC 0240 0003                  		andi.w	#3,d0
00001CB0 D041                       		add.w	d1,d0
00001CB2 0C40 0003                  		cmpi.w	#3,d0
00001CB6 6500                       		bcs.s	loc_1B52
00001CB8 3200                       		move.w	d0,d1
00001CBA 7000                       		moveq	#0,d0
00001CBC 4A41                       		tst.w	d1
00001CBE 6A00                       		bpl.s	loc_1B52
00001CC0 7002                       		moveq	#2,d0
00001CC2                            
00001CC2                            loc_1B52:
00001CC2 31C0 F632                  		move.w	d0,($FFFFF632).w
00001CC6 D040                       		add.w	d0,d0
00001CC8 43F8 FB58                  		lea	($FFFFFB58).w,a1
00001CCC 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001CD0 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001CD4                            
00001CD4                            locret_1B64:
00001CD4 4E75                       		rts	
00001CD6                            ; End of function PalCycle_SBZ
00001CD6                            
00001CD6 =FFFFFFC4                  Palette_frame equ   $FFFFFFC4   ; < free RAM word (make sure its even or youll get errors!!!!)
00001CD6 =FFFFF65F                  Super_Sonic_palette equ $FFFFF65F    ; < free RAM byte
00001CD6 =FFFFF65C                  Palette_timer equ $FFFFF65C  ; < free RAM byte
00001CD6                            
00001CD6                            PalCycle_SuperSonic:
00001CD6 1038 F65F                          move.b    ($FFFFF65F).w,d0
00001CDA 6700                               beq.s    return_2186
00001CDC 6B00 0000                          bmi.w    loc_21E6
00001CE0 5300                               subq.b    #1,d0
00001CE2 6600                               bne.s    loc_2188
00001CE4 5338 F65E                          subq.b    #1,($FFFFF65E).w
00001CE8 6A00                               bpl.s    return_2186
00001CEA 11FC 0003 F65E                     move.b    #3,($FFFFF65E).w
00001CF0 41F9 0000 0000                     lea    (Pal_2246).l,a0
00001CF6 3038 F65C                          move.w    ($FFFFF65C).w,d0
00001CFA 5C78 F65C                          addq.w    #6,($FFFFF65C).w ; was 8
00001CFE 0C78 0030 F65C                     cmpi.w    #$30,($FFFFF65C).w
00001D04 6500                               bcs.s    PalCycleSS_1
00001D06 11FC 00FF F65F                     move.b    #-1,($FFFFF65F).w
00001D0C 11FC 0000 F7F2                     move.b    #0,($FFFFF7C8+$2A).w
00001D12                            
00001D12                            PalCycleSS_1:
00001D12 43F8 FB04                          lea    ($FFFFFB04).w,a1 ; 04
00001D16 22F0 0000                          move.l    (a0,d0.w),(a1)+ ; there was +
00001D1A 22B0 0004                          move.l    4(a0,d0.w),(a1)
00001D1E                            
00001D1E                            return_2186:
00001D1E 4E75                               rts
00001D20                            ; ===========================================================================
00001D20                            
00001D20                            loc_2188:
00001D20 5338 F65E                          subq.b    #1,($FFFFF65E).w
00001D24 6AF8                               bpl.s    return_2186
00001D26 11FC 0003 F65E                     move.b    #3,($FFFFF65E).w
00001D2C 41F9 0000 0000                     lea    (Pal_2246).l,a0
00001D32 3038 F65C                          move.w    ($FFFFF65C).w,d0
00001D36 5D78 F65C                          subq.w    #$6,($FFFFF65C).w ; it was 8
00001D3A 6400                               bcc.s     loc_21B0
00001D3C 11FC 0000 F65C                     move.b    #0,($FFFFF65C).w
00001D42 11FC 0000 F65F                     move.b    #0,($FFFFF65F).w
00001D48 4278 FB02                          clr.w 	  ($FFFFFB02).w
00001D4C 4278 FB04                          clr.w 	  ($FFFFFB04).w
00001D50 4E75                               rts
00001D52                            
00001D52                            loc_21B0:
00001D52 43F8 FB04                          lea    ($FFFFFB04).w,a1
00001D56 22F0 0000                          move.l    (a0,d0.w),(a1)+ ; there was +
00001D5A 22B0 0004                          move.l    4(a0,d0.w),(a1)
00001D5E 0C38 0001 FE10                     cmpi.b    #$1,($FFFFFE10).w
00001D64 6700                               beq.s    PalCycleSS_2
00001D66 4E75                               rts
00001D68                            ; ===========================================================================
00001D68                            
00001D68                            PalCycleSS_2:
00001D68 43F8 F084                          lea    ($FFFFF084).w,a1
00001D6C 22F0 0000                          move.l    (a0,d0.w),(a1)+
00001D70 22B0 0004                          move.l    4(a0,d0.w),(a1)
00001D74 4E75                               rts
00001D76                            ; ===========================================================================
00001D76                            
00001D76                            loc_21E6:
00001D76 5338 F65E                          subq.b    #1,($FFFFF65E).w
00001D7A 6AA2                               bpl.s    return_2186
00001D7C 11FC 0007 F65E                     move.b    #7,($FFFFF65E).w
00001D82 41F9 0000 0000                     lea    (Pal_2246).l,a0
00001D88 3038 F65C                          move.w    ($FFFFF65C).w,d0
00001D8C 5078 F65C                          addq.w    #8,($FFFFF65C).w ; it was 8
00001D90 0C78 0078 F65C                     cmpi.w    #$78,($FFFFF65C).w
00001D96 6500                               bcs.s    PalCycleSS_3
00001D98 31FC 0030 F65C                     move.w    #$30,($FFFFF65C).w
00001D9E                            
00001D9E                            PalCycleSS_3:
00001D9E 43F8 FB04                          lea    ($FFFFFB04).w,a1
00001DA2 22F0 0000                          move.l    (a0,d0.w),(a1)+ ; there was +
00001DA6 22B0 0004                          move.l    4(a0,d0.w),(a1)
00001DAA                            ;		cmpi.b  #$02,($FFFFFFBB).w ; is it Shadow?
00001DAA                            ;		beq.s   PalCycle_SSEnd ; if not, branch
00001DAA                            ;        lea    ($FFFFFB02).w,a1 ; it was 04
00001DAA                            ;        move.w    (a0,d0.w),(a1) ; there was +
00001DAA                            ;        move.w    4(a0,d0.w),(a1)
00001DAA 0C38 0001 FE10                     cmpi.b    #$1,($FFFFFE10).w
00001DB0 6700                               beq.s    PalCycleSS_4
00001DB2 4E75                               rts
00001DB4                            ; ===========================================================================
00001DB4                            PalCycleSS_4:
00001DB4 43F8 F084                          lea    ($FFFFF084).w,a1
00001DB8 22F0 0000                          move.l    (a0,d0.w),(a1)+
00001DBC 22B0 0004                          move.l    4(a0,d0.w),(a1)
00001DC0 4E75                               rts
00001DC2                            
00001DC2                            PalCycle_SSEnd:
00001DC2 4E75                       		rts
00001DC4                            ; End of function PalCycle_SuperSonic
00001DC4                            
00001DC4                            ; ===========================================================================
00001DC4                            ;----------------------------------------------------------------------------
00001DC4                            ;Palette for transformation to Super Sonic
00001DC4                            ;----------------------------------------------------------------------------
00001DC4                            Pal_2246:
00001DC4                            	incbin  "pallet/SuperSonic.bin"
00001E44                                even
00001E44                            ;----------------------------------------------------------------------------
00001E44                            ;Palette for transformation to Super Sonic while underwater in CPZ
00001E44                            ;----------------------------------------------------------------------------
00001E44                            ; Pal_22C6:
00001E44                            CyclingPal_CPZUWTransformation:
00001E44                            	incbin  "pallet/CPZWater SS transformation.bin"
00001E64                                even
00001E64                            ;----------------------------------------------------------------------------
00001E64                            ;Palette for transformation to Super Sonic while underwater in ARZ
00001E64                            ;----------------------------------------------------------------------------
00001E64                            ; Pal_2346:
00001E64                            CyclingPal_ARZUWTransformation:
00001E64                                incbin  "pallet/ARZWater SS transformation.bin"
00001E84                                even
00001E84                            
00001E84                            ; ===========================================================================
00001E84                            Pal_TitleCyc:	incbin	pallet\c_title.bin
00001EA4                            Pal_GHZCyc:	incbin	pallet\c_ghz.bin
00001EC4                            Pal_LZCyc1:	incbin	pallet\c_lz_wat.bin	; waterfalls pallet
00001EE4                            Pal_LZCyc2:	incbin	pallet\c_lz_bel.bin	; conveyor belt pallet
00001EF6                            Pal_LZCyc3:	incbin	pallet\c_lz_buw.bin	; conveyor belt (underwater) pallet
00001F08                            Pal_SBZ3Cyc1:	incbin	pallet\c_sbz3_w.bin	; waterfalls pallet
00001F70                            Pal_SLZCyc:	incbin	pallet\c_slz.bin
00001F94                            Pal_SYZCyc1:	incbin	pallet\c_syz_1.bin
00001FB4                            Pal_SYZCyc2:	incbin	pallet\c_syz_2.bin
00001FC4                            
00001FC4                            Pal_SBZCycList:
00001FC4                            	include "_inc\SBZ pallet script 1.asm"
00001FC4                            ; ---------------------------------------------------------------------------
00001FC4                            ; Scrap Brain Zone 1 pallet cycling script
00001FC4                            ; ---------------------------------------------------------------------------
00001FC4 0008                       	dc.w 8			; number of entries - 1
00001FC6 0708                       	dc.b 7,	8		; duration in frames, number of	colours
00001FC8 0000                       	dc.w Pal_SBZCyc1	; pallet pointer
00001FCA FB50                       	dc.w $FB50		; RAM address
00001FCC 0D08                       	dc.b $D, 8
00001FCE 0000                       	dc.w Pal_SBZCyc2
00001FD0 FB52                       	dc.w $FB52
00001FD2 0E08                       	dc.b $E, 8
00001FD4 0000                       	dc.w Pal_SBZCyc3
00001FD6 FB6E                       	dc.w $FB6E
00001FD8 0B08                       	dc.b $B, 8
00001FDA 0000                       	dc.w Pal_SBZCyc5
00001FDC FB70                       	dc.w $FB70
00001FDE 0708                       	dc.b 7,	8
00001FE0 0000                       	dc.w Pal_SBZCyc6
00001FE2 FB72                       	dc.w $FB72
00001FE4 1C10                       	dc.b $1C, $10
00001FE6 0000                       	dc.w Pal_SBZCyc7
00001FE8 FB7E                       	dc.w $FB7E
00001FEA 0303                       	dc.b 3,	3
00001FEC 0000                       	dc.w Pal_SBZCyc8
00001FEE FB78                       	dc.w $FB78
00001FF0 0303                       	dc.b 3,	3
00001FF2 0000                       	dc.w Pal_SBZCyc8+2
00001FF4 FB7A                       	dc.w $FB7A
00001FF6 0303                       	dc.b 3,	3
00001FF8 0000                       	dc.w Pal_SBZCyc8+4
00001FFA FB7C                       	dc.w $FB7C
00001FFC                            	even
00001FFC                            	even
00001FFC                            
00001FFC                            Pal_SBZCycList2:
00001FFC                            	include "_inc\SBZ pallet script 2.asm"
00001FFC                            ; ---------------------------------------------------------------------------
00001FFC                            ; Scrap Brain Zone 2 pallet cycling script
00001FFC                            ; ---------------------------------------------------------------------------
00001FFC 0006                       	dc.w 6
00001FFE 0708                       	dc.b 7,	8
00002000 0000                       	dc.w Pal_SBZCyc1
00002002 FB50                       	dc.w $FB50
00002004 0D08                       	dc.b $D, 8
00002006 0000                       	dc.w Pal_SBZCyc2
00002008 FB52                       	dc.w $FB52
0000200A 0908                       	dc.b 9,	8
0000200C 0000                       	dc.w Pal_SBZCyc9
0000200E FB70                       	dc.w $FB70
00002010 0708                       	dc.b 7,	8
00002012 0000                       	dc.w Pal_SBZCyc6
00002014 FB72                       	dc.w $FB72
00002016 0303                       	dc.b 3,	3
00002018 0000                       	dc.w Pal_SBZCyc8
0000201A FB78                       	dc.w $FB78
0000201C 0303                       	dc.b 3,	3
0000201E 0000                       	dc.w Pal_SBZCyc8+2
00002020 FB7A                       	dc.w $FB7A
00002022 0303                       	dc.b 3,	3
00002024 0000                       	dc.w Pal_SBZCyc8+4
00002026 FB7C                       	dc.w $FB7C
00002028                            	even
00002028                            	even
00002028                            
00002028                            Pal_SBZCyc1:	incbin	pallet\c_sbz_1.bin
00002038                            Pal_SBZCyc2:	incbin	pallet\c_sbz_2.bin
00002048                            Pal_SBZCyc3:	incbin	pallet\c_sbz_3.bin
00002058                            Pal_SBZCyc4:	incbin	pallet\c_sbz_4.bin
00002064                            Pal_SBZCyc5:	incbin	pallet\c_sbz_5.bin
00002074                            Pal_SBZCyc6:	incbin	pallet\c_sbz_6.bin
00002084                            Pal_SBZCyc7:	incbin	pallet\c_sbz_7.bin
000020A4                            Pal_SBZCyc8:	incbin	pallet\c_sbz_8.bin
000020AE                            Pal_SBZCyc9:	incbin	pallet\c_sbz_9.bin
000020BE                            Pal_SBZCyc10:	incbin	pallet\c_sbz_10.bin
000020CA                            ; ---------------------------------------------------------------------------
000020CA                            ; Subroutine to	fade out and fade in
000020CA                            ; ---------------------------------------------------------------------------
000020CA                            
000020CA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000020CA                            
000020CA                            
000020CA                            Pal_FadeTo:
000020CA 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
000020D0                            
000020D0                            Pal_FadeTo2:
000020D0 7000                       		moveq	#0,d0
000020D2 41F8 FB00                  		lea	($FFFFFB00).w,a0
000020D6 1038 F626                  		move.b	($FFFFF626).w,d0
000020DA D0C0                       		adda.w	d0,a0
000020DC 7200                       		moveq	#0,d1
000020DE 1038 F627                  		move.b	($FFFFF627).w,d0
000020E2                            
000020E2                            Pal_ToBlack:
000020E2 30C1                       		move.w	d1,(a0)+
000020E4 51C8 FFFC                  		dbf	d0,Pal_ToBlack	; fill pallet with $000	(black)
000020E8 780E                       		moveq	#$0E,d4					; MJ: prepare maximum colour check
000020EA 7C00                       		moveq	#$00,d6					; MJ: clear d6
000020EC                            
000020EC                            loc_1DCE:
000020EC 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
000020F2 6100 0000                  		bsr.w	DelayProgram
000020F6 0846 0000                  		bchg	#$00,d6					; MJ: change delay counter
000020FA 67F0                       		beq	loc_1DCE				; MJ: if null, delay a frame
000020FC 6100                       		bsr.s	Pal_FadeIn
000020FE 6100 F656                  		bsr.w	RunPLC_RAM
00002102 5504                       		subq.b	#$02,d4					; MJ: decrease colour check
00002104 66E6                       		bne	loc_1DCE				; MJ: if it has not reached null, branch
00002106 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w			; MJ: wait for V-blank again (so colours transfer)
0000210C 6000 0000                  		bra	DelayProgram				; MJ: ''
00002110                            
00002110                            ; End of function Pal_FadeTo
00002110                            
00002110                            ; ---------------------------------------------------------------------------
00002110                            ; Pallet fade-in subroutine
00002110                            ; ---------------------------------------------------------------------------
00002110                            
00002110                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002110                            
00002110                            
00002110                            Pal_FadeIn:				; XREF: Pal_FadeTo
00002110 7000                       		moveq	#0,d0
00002112 41F8 FB00                  		lea	($FFFFFB00).w,a0
00002116 43F8 FB80                  		lea	($FFFFFB80).w,a1
0000211A 1038 F626                  		move.b	($FFFFF626).w,d0
0000211E D0C0                       		adda.w	d0,a0
00002120 D2C0                       		adda.w	d0,a1
00002122 1038 F627                  		move.b	($FFFFF627).w,d0
00002126                            
00002126                            loc_1DFA:
00002126 6100                       		bsr.s	Pal_AddColor
00002128 51C8 FFFC                  		dbf	d0,loc_1DFA
0000212C 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00002132 6600                       		bne.s	locret_1E24
00002134 7000                       		moveq	#0,d0
00002136 41F8 FA80                  		lea	($FFFFFA80).w,a0
0000213A 43F8 FA00                  		lea	($FFFFFA00).w,a1
0000213E 1038 F626                  		move.b	($FFFFF626).w,d0
00002142 D0C0                       		adda.w	d0,a0
00002144 D2C0                       		adda.w	d0,a1
00002146 1038 F627                  		move.b	($FFFFF627).w,d0
0000214A                            
0000214A                            loc_1E1E:
0000214A 6100                       		bsr.s	Pal_AddColor
0000214C 51C8 FFFC                  		dbf	d0,loc_1E1E
00002150                            
00002150                            locret_1E24:
00002150 4E75                       		rts	
00002152                            ; End of function Pal_FadeIn
00002152                            
00002152                            
00002152                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002152                            
00002152                            
00002152                            Pal_AddColor:				; XREF: Pal_FadeIn
00002152 1A11                       		move.b	(a1),d5					; MJ: load blue
00002154 3219                       		move.w	(a1)+,d1				; MJ: load green and red
00002156 1401                       		move.b	d1,d2					; MJ: load red
00002158 E809                       		lsr.b	#$04,d1					; MJ: get only green
0000215A 0202 000E                  		andi.b	#$0E,d2					; MJ: get only red
0000215E 3610                       		move.w	(a0),d3					; MJ: load current colour in buffer
00002160 B805                       		cmp.b	d5,d4					; MJ: is it time for blue to fade?
00002162 6200 0000                  		bhi	FCI_NoBlue				; MJ: if not, branch
00002166 0643 0200                  		addi.w	#$0200,d3				; MJ: increase blue
0000216A                            
0000216A                            FCI_NoBlue:
0000216A B801                       		cmp.b	d1,d4					; MJ: is it time for green to fade?
0000216C 6200 0000                  		bhi	FCI_NoGreen				; MJ: if not, branch
00002170 0603 0020                  		addi.b	#$20,d3					; MJ: increase green
00002174                            
00002174                            FCI_NoGreen:
00002174 B802                       		cmp.b	d2,d4					; MJ: is it time for red to fade?
00002176 6200 0000                  		bhi	FCI_NoRed				; MJ: if not, branch
0000217A 5403                       		addq.b	#$02,d3					; MJ: increase red
0000217C                            
0000217C                            FCI_NoRed:
0000217C 30C3                       		move.w	d3,(a0)+				; MJ: save colour
0000217E 4E75                       		rts						; MJ: return
00002180                            
00002180                            ; End of function Pal_AddColor
00002180                            
00002180                            
00002180                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002180                            
00002180                            
00002180                            Pal_FadeFrom:
00002180 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00002186 7807                       		moveq	#$07,d4					; MJ: set repeat times
00002188 7C00                       		moveq	#$00,d6					; MJ: clear d6
0000218A                            
0000218A                            loc_1E5C:
0000218A 6100 F5CA                  		bsr.w	RunPLC_RAM
0000218E 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00002194 6100 0000                  		bsr.w	DelayProgram
00002198 0846 0000                  		bchg	#$00,d6					; MJ: change delay counter
0000219C 67EC                       		beq	loc_1E5C				; MJ: if null, delay a frame
0000219E 6100                       		bsr.s	Pal_FadeOut
000021A0 51CC FFE8                  		dbf	d4,loc_1E5C
000021A4 4E75                       		rts	
000021A6                            ; End of function Pal_FadeFrom
000021A6                            
000021A6                            ; ---------------------------------------------------------------------------
000021A6                            ; Pallet fade-out subroutine
000021A6                            ; ---------------------------------------------------------------------------
000021A6                            
000021A6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000021A6                            
000021A6                            
000021A6                            Pal_FadeOut:				; XREF: Pal_FadeFrom
000021A6 7000                       		moveq	#0,d0
000021A8 41F8 FB00                  		lea	($FFFFFB00).w,a0
000021AC 1038 F626                  		move.b	($FFFFF626).w,d0
000021B0 D0C0                       		adda.w	d0,a0
000021B2 1038 F627                  		move.b	($FFFFF627).w,d0
000021B6                            
000021B6                            loc_1E82:
000021B6 6100                       		bsr.s	Pal_DecColor
000021B8 51C8 FFFC                  		dbf	d0,loc_1E82
000021BC                            
000021BC 7000                       		moveq	#0,d0
000021BE 41F8 FA80                  		lea	($FFFFFA80).w,a0
000021C2 1038 F626                  		move.b	($FFFFF626).w,d0
000021C6 D0C0                       		adda.w	d0,a0
000021C8 1038 F627                  		move.b	($FFFFF627).w,d0
000021CC                            
000021CC                            loc_1E98:
000021CC 6100                       		bsr.s	Pal_DecColor
000021CE 51C8 FFFC                  		dbf	d0,loc_1E98
000021D2 4E75                       		rts	
000021D4                            ; End of function Pal_FadeOut
000021D4                            
000021D4                            
000021D4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000021D4                            
000021D4                            
000021D4                            Pal_DecColor:				; XREF: Pal_FadeOut
000021D4 3A10                       		move.w	(a0),d5					; MJ: load colour
000021D6 3205                       		move.w	d5,d1					; MJ: copy to d1
000021D8 1401                       		move.b	d1,d2					; MJ: load green and red
000021DA 1601                       		move.b	d1,d3					; MJ: load red
000021DC 0241 0E00                  		andi.w	#$0E00,d1				; MJ: get only blue
000021E0 6700 0000                  		beq	FCO_NoBlue				; MJ: if blue is finished, branch
000021E4 0445 0200                  		subi.w	#$0200,d5				; MJ: decrease blue
000021E8                            
000021E8                            FCO_NoBlue:
000021E8 0242 00E0                  		andi.w	#$00E0,d2				; MJ: get only green (needs to be word)
000021EC 6700 0000                  		beq	FCO_NoGreen				; MJ: if green is finished, branch
000021F0 0405 0020                  		subi.b	#$20,d5					; MJ: decrease green
000021F4                            
000021F4                            FCO_NoGreen:
000021F4 0203 000E                  		andi.b	#$0E,d3					; MJ: get only red
000021F8 6700 0000                  		beq	FCO_NoRed				; MJ: if red is finished, branch
000021FC 5505                       		subq.b	#$02,d5					; MJ: decrease red
000021FE                            
000021FE                            FCO_NoRed:
000021FE 30C5                       		move.w	d5,(a0)+				; MJ: save new colour
00002200 4E75                       		rts						; MJ: return
00002202                            
00002202                            ; End of function Pal_DecColor
00002202                            
00002202                            ; ---------------------------------------------------------------------------
00002202                            ; Subroutine to	fill the pallet	with white (special stage)
00002202                            ; ---------------------------------------------------------------------------
00002202                            
00002202                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002202                            
00002202                            
00002202                            Pal_MakeWhite:				; XREF: SpecialStage
00002202 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00002208 7000                       		moveq	#0,d0
0000220A 41F8 FB00                  		lea	($FFFFFB00).w,a0
0000220E 1038 F626                  		move.b	($FFFFF626).w,d0
00002212 D0C0                       		adda.w	d0,a0
00002214 323C 0EEE                  		move.w	#$EEE,d1
00002218 1038 F627                  		move.b	($FFFFF627).w,d0
0000221C                            
0000221C                            PalWhite_Loop:
0000221C 30C1                       		move.w	d1,(a0)+
0000221E 51C8 FFFC                  		dbf	d0,PalWhite_Loop
00002222 383C 0015                  		move.w	#$15,d4
00002226                            
00002226                            loc_1EF4:
00002226 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
0000222C 6100 0000                  		bsr.w	DelayProgram
00002230 6100                       		bsr.s	Pal_WhiteToBlack
00002232 6100 F522                  		bsr.w	RunPLC_RAM
00002236 51CC FFEE                  		dbf	d4,loc_1EF4
0000223A 4E75                       		rts	
0000223C                            ; End of function Pal_MakeWhite
0000223C                            
0000223C                            
0000223C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000223C                            
0000223C                            
0000223C                            Pal_WhiteToBlack:			; XREF: Pal_MakeWhite
0000223C 7000                       		moveq	#0,d0
0000223E 41F8 FB00                  		lea	($FFFFFB00).w,a0
00002242 43F8 FB80                  		lea	($FFFFFB80).w,a1
00002246 1038 F626                  		move.b	($FFFFF626).w,d0
0000224A D0C0                       		adda.w	d0,a0
0000224C D2C0                       		adda.w	d0,a1
0000224E 1038 F627                  		move.b	($FFFFF627).w,d0
00002252                            
00002252                            loc_1F20:
00002252 6100                       		bsr.s	Pal_DecColor2
00002254 51C8 FFFC                  		dbf	d0,loc_1F20
00002258                            
00002258 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
0000225E 6600                       		bne.s	locret_1F4A
00002260 7000                       		moveq	#0,d0
00002262 41F8 FA80                  		lea	($FFFFFA80).w,a0
00002266 43F8 FA00                  		lea	($FFFFFA00).w,a1
0000226A 1038 F626                  		move.b	($FFFFF626).w,d0
0000226E D0C0                       		adda.w	d0,a0
00002270 D2C0                       		adda.w	d0,a1
00002272 1038 F627                  		move.b	($FFFFF627).w,d0
00002276                            
00002276                            loc_1F44:
00002276 6100                       		bsr.s	Pal_DecColor2
00002278 51C8 FFFC                  		dbf	d0,loc_1F44
0000227C                            
0000227C                            locret_1F4A:
0000227C 4E75                       		rts	
0000227E                            ; End of function Pal_WhiteToBlack
0000227E                            
0000227E                            
0000227E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000227E                            
0000227E                            
0000227E                            Pal_DecColor2:				; XREF: Pal_WhiteToBlack
0000227E 3419                       		move.w	(a1)+,d2
00002280 3610                       		move.w	(a0),d3
00002282 B642                       		cmp.w	d2,d3
00002284 6700                       		beq.s	loc_1F78
00002286 3203                       		move.w	d3,d1
00002288 0441 0200                  		subi.w	#$200,d1	; decrease blue	value
0000228C 6500                       		bcs.s	loc_1F64
0000228E B242                       		cmp.w	d2,d1
00002290 6500                       		bcs.s	loc_1F64
00002292 30C1                       		move.w	d1,(a0)+
00002294 4E75                       		rts	
00002296                            ; ===========================================================================
00002296                            
00002296                            loc_1F64:				; XREF: Pal_DecColor2
00002296 3203                       		move.w	d3,d1
00002298 0441 0020                  		subi.w	#$20,d1		; decrease green value
0000229C 6500                       		bcs.s	loc_1F74
0000229E B242                       		cmp.w	d2,d1
000022A0 6500                       		bcs.s	loc_1F74
000022A2 30C1                       		move.w	d1,(a0)+
000022A4 4E75                       		rts	
000022A6                            ; ===========================================================================
000022A6                            
000022A6                            loc_1F74:				; XREF: loc_1F64
000022A6 5558                       		subq.w	#2,(a0)+	; decrease red value
000022A8 4E75                       		rts	
000022AA                            ; ===========================================================================
000022AA                            
000022AA                            loc_1F78:				; XREF: Pal_DecColor2
000022AA 5448                       		addq.w	#2,a0
000022AC 4E75                       		rts	
000022AE                            ; End of function Pal_DecColor2
000022AE                            
000022AE                            ; ---------------------------------------------------------------------------
000022AE                            ; Subroutine to	make a white flash when	you enter a special stage
000022AE                            ; ---------------------------------------------------------------------------
000022AE                            
000022AE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000022AE                            
000022AE                            
000022AE                            Pal_MakeFlash:				; XREF: SpecialStage
000022AE 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
000022B4 383C 0015                  		move.w	#$15,d4
000022B8                            
000022B8                            loc_1F86:
000022B8 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
000022BE 6100 0000                  		bsr.w	DelayProgram
000022C2 6100                       		bsr.s	Pal_ToWhite
000022C4 6100 F490                  		bsr.w	RunPLC_RAM
000022C8 51CC FFEE                  		dbf	d4,loc_1F86
000022CC 4E75                       		rts	
000022CE                            ; End of function Pal_MakeFlash
000022CE                            
000022CE                            
000022CE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000022CE                            
000022CE                            
000022CE                            Pal_ToWhite:				; XREF: Pal_MakeFlash
000022CE 7000                       		moveq	#0,d0
000022D0 41F8 FB00                  		lea	($FFFFFB00).w,a0
000022D4 1038 F626                  		move.b	($FFFFF626).w,d0
000022D8 D0C0                       		adda.w	d0,a0
000022DA 1038 F627                  		move.b	($FFFFF627).w,d0
000022DE                            
000022DE                            loc_1FAC:
000022DE 6100                       		bsr.s	Pal_AddColor2
000022E0 51C8 FFFC                  		dbf	d0,loc_1FAC
000022E4 7000                       		moveq	#0,d0
000022E6 41F8 FA80                  		lea	($FFFFFA80).w,a0
000022EA 1038 F626                  		move.b	($FFFFF626).w,d0
000022EE D0C0                       		adda.w	d0,a0
000022F0 1038 F627                  		move.b	($FFFFF627).w,d0
000022F4                            
000022F4                            loc_1FC2:
000022F4 6100                       		bsr.s	Pal_AddColor2
000022F6 51C8 FFFC                  		dbf	d0,loc_1FC2
000022FA 4E75                       		rts	
000022FC                            ; End of function Pal_ToWhite
000022FC                            
000022FC                            
000022FC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000022FC                            
000022FC                            
000022FC                            Pal_AddColor2:				; XREF: Pal_ToWhite
000022FC 3410                       		move.w	(a0),d2
000022FE 0C42 0EEE                  		cmpi.w	#$EEE,d2
00002302 6700                       		beq.s	loc_2006
00002304 3202                       		move.w	d2,d1
00002306 0241 000E                  		andi.w	#$E,d1
0000230A 0C41 000E                  		cmpi.w	#$E,d1
0000230E 6700                       		beq.s	loc_1FE2
00002310 5458                       		addq.w	#2,(a0)+	; increase red value
00002312 4E75                       		rts	
00002314                            ; ===========================================================================
00002314                            
00002314                            loc_1FE2:				; XREF: Pal_AddColor2
00002314 3202                       		move.w	d2,d1
00002316 0241 00E0                  		andi.w	#$E0,d1
0000231A 0C41 00E0                  		cmpi.w	#$E0,d1
0000231E 6700                       		beq.s	loc_1FF4
00002320 0658 0020                  		addi.w	#$20,(a0)+	; increase green value
00002324 4E75                       		rts	
00002326                            ; ===========================================================================
00002326                            
00002326                            loc_1FF4:				; XREF: loc_1FE2
00002326 3202                       		move.w	d2,d1
00002328 0241 0E00                  		andi.w	#$E00,d1
0000232C 0C41 0E00                  		cmpi.w	#$E00,d1
00002330 6700                       		beq.s	loc_2006
00002332 0658 0200                  		addi.w	#$200,(a0)+	; increase blue	value
00002336 4E75                       		rts	
00002338                            ; ===========================================================================
00002338                            
00002338                            loc_2006:				; XREF: Pal_AddColor2
00002338 5448                       		addq.w	#2,a0
0000233A 4E75                       		rts	
0000233C                            ; End of function Pal_AddColor2
0000233C                            
0000233C                            ; ---------------------------------------------------------------------------
0000233C                            ; Pallet cycling routine - Sega	logo
0000233C                            ; ---------------------------------------------------------------------------
0000233C                            
0000233C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000233C                            
0000233C                            
0000233C                            PalCycle_Sega:				; XREF: SegaScreen
0000233C 4A38 F635                  		tst.b	($FFFFF635).w
00002340 6600                       		bne.s	loc_206A
00002342 43F8 FB20                  		lea	($FFFFFB20).w,a1
00002346 41F9 0000 0000             		lea	(Pal_Sega1).l,a0
0000234C 7205                       		moveq	#5,d1
0000234E 3038 F632                  		move.w	($FFFFF632).w,d0
00002352                            
00002352                            loc_2020:
00002352 6A00                       		bpl.s	loc_202A
00002354 5448                       		addq.w	#2,a0
00002356 5341                       		subq.w	#1,d1
00002358 5440                       		addq.w	#2,d0
0000235A 60F6                       		bra.s	loc_2020
0000235C                            ; ===========================================================================
0000235C                            
0000235C                            loc_202A:				; XREF: PalCycle_Sega
0000235C 3400                       		move.w	d0,d2
0000235E 0242 001E                  		andi.w	#$1E,d2
00002362 6600                       		bne.s	loc_2034
00002364 5440                       		addq.w	#2,d0
00002366                            
00002366                            loc_2034:
00002366 0C40 0060                  		cmpi.w	#$60,d0
0000236A 6400                       		bcc.s	loc_203E
0000236C 3398 0000                  		move.w	(a0)+,(a1,d0.w)
00002370                            
00002370                            loc_203E:
00002370 5440                       		addq.w	#2,d0
00002372 51C9 FFE8                  		dbf	d1,loc_202A
00002376 3038 F632                  		move.w	($FFFFF632).w,d0
0000237A 5440                       		addq.w	#2,d0
0000237C 3400                       		move.w	d0,d2
0000237E 0242 001E                  		andi.w	#$1E,d2
00002382 6600                       		bne.s	loc_2054
00002384 5440                       		addq.w	#2,d0
00002386                            
00002386                            loc_2054:
00002386 0C40 0064                  		cmpi.w	#$64,d0
0000238A 6D00                       		blt.s	loc_2062
0000238C 31FC 0401 F634             		move.w	#$401,($FFFFF634).w
00002392 70F4                       		moveq	#-$C,d0
00002394                            
00002394                            loc_2062:
00002394 31C0 F632                  		move.w	d0,($FFFFF632).w
00002398 7001                       		moveq	#1,d0
0000239A 4E75                       		rts	
0000239C                            ; ===========================================================================
0000239C                            
0000239C                            loc_206A:				; XREF: loc_202A
0000239C 5338 F634                  		subq.b	#1,($FFFFF634).w
000023A0 6A00                       		bpl.s	loc_20BC
000023A2 11FC 0004 F634             		move.b	#4,($FFFFF634).w
000023A8 3038 F632                  		move.w	($FFFFF632).w,d0
000023AC 0640 000C                  		addi.w	#$C,d0
000023B0 0C40 0030                  		cmpi.w	#$30,d0
000023B4 6500                       		bcs.s	loc_2088
000023B6 7000                       		moveq	#0,d0
000023B8 4E75                       		rts	
000023BA                            ; ===========================================================================
000023BA                            
000023BA                            loc_2088:				; XREF: loc_206A
000023BA 31C0 F632                  		move.w	d0,($FFFFF632).w
000023BE 41F9 0000 0000             		lea	(Pal_Sega2).l,a0
000023C4 41F0 0000                  		lea	(a0,d0.w),a0
000023C8 43F8 FB04                  		lea	($FFFFFB04).w,a1
000023CC 22D8                       		move.l	(a0)+,(a1)+
000023CE 22D8                       		move.l	(a0)+,(a1)+
000023D0 3298                       		move.w	(a0)+,(a1)
000023D2 43F8 FB20                  		lea	($FFFFFB20).w,a1
000023D6 7000                       		moveq	#0,d0
000023D8 722C                       		moveq	#$2C,d1
000023DA                            
000023DA                            loc_20A8:
000023DA 3400                       		move.w	d0,d2
000023DC 0242 001E                  		andi.w	#$1E,d2
000023E0 6600                       		bne.s	loc_20B2
000023E2 5440                       		addq.w	#2,d0
000023E4                            
000023E4                            loc_20B2:
000023E4 3390 0000                  		move.w	(a0),(a1,d0.w)
000023E8 5440                       		addq.w	#2,d0
000023EA 51C9 FFEE                  		dbf	d1,loc_20A8
000023EE                            
000023EE                            loc_20BC:
000023EE 7001                       		moveq	#1,d0
000023F0 4E75                       		rts	
000023F2                            ; End of function PalCycle_Sega
000023F2                            
000023F2                            ; ===========================================================================
000023F2                            
000023F2                            Pal_Sega1:	incbin	pallet\sega1.bin
000023FE                            Pal_Sega2:	incbin	pallet\sega2.bin
0000242E                            
0000242E                            ; ---------------------------------------------------------------------------
0000242E                            ; Subroutines to load pallets
0000242E                            ; ---------------------------------------------------------------------------
0000242E                            
0000242E                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
0000242E                            
0000242E                            PalLoad1:
0000242E 1238 FE11                  		move.b ($FFFFFE11),d1
00002432 43F9 0000 0000             		lea (PalPointers).l,a1
00002438 0C01 0000                  		cmp.b #0,d1
0000243C 6700 0000                  		beq.w PalLoad1_Continue
00002440 43F9 0000 0000             		lea (PalPointers2).l,a1
00002446 0C01 0001                  		cmp.b #1,d1
0000244A 6700 0000                  		beq.w PalLoad1_Continue
0000244E 43F9 0000 0000             		lea (PalPointers3).l,a1
00002454                            
00002454                            PalLoad1_Continue:
00002454 E748                       		lsl.w #3,d0
00002456 D2C0                       		adda.w d0,a1
00002458 2459                       		movea.l (a1)+,a2
0000245A 3659                       		movea.w (a1)+,a3
0000245C D6FC 0080                  		adda.w #$80,a3
00002460 3E19                       		move.w (a1)+,d7
00002462                            
00002462                            loc_2110:
00002462 26DA                       		move.l (a2)+,(a3)+
00002464 51CF FFFC                  		dbf d7,loc_2110
00002468 4E75                       		rts
0000246A                             ; End of function PalLoad1
0000246A                            
0000246A                            
0000246A                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
0000246A                            
0000246A                            PalLoad2:
0000246A 1238 FE11                  		move.b ($FFFFFE11),d1
0000246E 43F9 0000 0000             		lea (PalPointers).l,a1
00002474 0C01 0000                  		cmp.b #0,d1
00002478 6700 0000                  		beq.w PalLoad2_Continue
0000247C 43F9 0000 0000             		lea (PalPointers2).l,a1
00002482 0C01 0001                  		cmp.b #1,d1
00002486 6700 0000                  		beq.w PalLoad2_Continue
0000248A 43F9 0000 0000             		lea (PalPointers3).l,a1
00002490                            
00002490                            
00002490                            PalLoad2_Continue:
00002490 E748                       		lsl.w #3,d0
00002492 D2C0                       		adda.w d0,a1
00002494 2459                       		movea.l (a1)+,a2
00002496 3659                       		movea.w (a1)+,a3
00002498 3E19                       		move.w (a1)+,d7
0000249A                            
0000249A                            loc_2128:
0000249A 26DA                       		move.l (a2)+,(a3)+
0000249C 51CF FFFC                  		dbf d7,loc_2128
000024A0 4E75                       		rts
000024A2                            ; End of function PalLoad2
000024A2                            
000024A2                            
000024A2                            ; ---------------------------------------------------------------------------
000024A2                            ; Underwater pallet loading subroutine
000024A2                            ; ---------------------------------------------------------------------------
000024A2                            
000024A2                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
000024A2                            
000024A2                            PalLoad3_Water:
000024A2 1238 FE11                  		move.b ($FFFFFE11),d1
000024A6 43F9 0000 0000             		lea (PalPointers).l,a1
000024AC 0C01 0000                  		cmp.b #0,d1
000024B0 6700 0000                  		beq.w PalLoad3_Continue
000024B4 43F9 0000 0000             		lea (PalPointers2).l,a1
000024BA 0C01 0001                  		cmp.b #1,d1
000024BE 6700 0000                  		beq.w PalLoad3_Continue
000024C2 43F9 0000 0000             		lea (PalPointers3).l,a1
000024C8                            
000024C8                            PalLoad3_Continue:
000024C8 E748                       		lsl.w #3,d0
000024CA D2C0                       		adda.w d0,a1
000024CC 2459                       		movea.l (a1)+,a2
000024CE 3659                       		movea.w (a1)+,a3
000024D0 96FC 0080                  		suba.w #$80,a3
000024D4 3E19                       		move.w (a1)+,d7
000024D6                            
000024D6                            loc_2144:
000024D6 26DA                       		move.l (a2)+,(a3)+
000024D8 51CF FFFC                  		dbf d7,loc_2144
000024DC 4E75                       		rts
000024DE                            ; End of function PalLoad3_Water
000024DE                            
000024DE                            
000024DE                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
000024DE                            
000024DE                            
000024DE                            PalLoad4_Water:
000024DE 1238 FE11                  		move.b ($FFFFFE11),d1
000024E2 43F9 0000 0000             		lea (PalPointers).l,a1
000024E8 0C01 0000                  		cmp.b #0,d1
000024EC 6700 0000                  		beq.w PalLoad4_Continue
000024F0 43F9 0000 0000             		lea (PalPointers2).l,a1
000024F6 0C01 0001                  		cmp.b #1,d1
000024FA 6700 0000                  		beq.w PalLoad4_Continue
000024FE 43F9 0000 0000             		lea (PalPointers3).l,a1
00002504                            
00002504                            PalLoad4_Continue:
00002504 E748                       		lsl.w #3,d0
00002506 D2C0                       		adda.w d0,a1
00002508 2459                       		movea.l (a1)+,a2
0000250A 3659                       		movea.w (a1)+,a3
0000250C 96FC 0100                  		suba.w #$100,a3
00002510 3E19                       		move.w (a1)+,d7
00002512                            loc_2160:
00002512 26DA                       		move.l (a2)+,(a3)+
00002514 51CF FFFC                  		dbf d7,loc_2160
00002518 4E75                       		rts
0000251A                             ; End of function PalLoad4_Water
0000251A                            
0000251A                            ; ===========================================================================
0000251A                            ; ---------------------------------------------------------------------------
0000251A                            ; Pallet pointers
0000251A                            ; ---------------------------------------------------------------------------
0000251A                            PalPointers:
0000251A                            	include "_inc\Pallet pointers.asm"
0000251A                            ; ---------------------------------------------------------------------------
0000251A                            ; Pallet pointers
0000251A                            ; ---------------------------------------------------------------------------
0000251A 0000 0000                  	dc.l Pal_SegaBG		; pallet address
0000251E FB00                       	dc.w $FB00		; RAM address
00002520 001F                       	dc.w $1F		; (pallet length / 2) - 1
00002522 0000 0000                  	dc.l Pal_Title
00002526 FB00                       	dc.w $FB00
00002528 001F                       	dc.w $1F
0000252A 0000 0000                  	dc.l Pal_LevelSel
0000252E FB00                       	dc.w $FB00
00002530 001F                       	dc.w $1F
00002532 0000 0000                  	dc.l Pal_Sonic
00002536 FB00                       	dc.w $FB00
00002538 0007                       	dc.w 7
0000253A 0000 0000                  	dc.l Pal_GHZ
0000253E FB20                       	dc.w $FB20
00002540 0017                       	dc.w $17
00002542 0000 0000                  	dc.l Pal_LZ
00002546 FB20                       	dc.w $FB20
00002548 0017                       	dc.w $17
0000254A 0000 0000                  	dc.l Pal_MZ
0000254E FB20                       	dc.w $FB20
00002550 0017                       	dc.w $17
00002552 0000 0000                  	dc.l Pal_SLZ
00002556 FB20                       	dc.w $FB20
00002558 0017                       	dc.w $17
0000255A 0000 0000                  	dc.l Pal_SYZ
0000255E FB20                       	dc.w $FB20
00002560 0017                       	dc.w $17
00002562 0000 0000                  	dc.l Pal_SBZ1
00002566 FB20                       	dc.w $FB20
00002568 0017                       	dc.w $17
0000256A 0000 0000                  	dc.l Pal_Special
0000256E FB00                       	dc.w $FB00
00002570 001F                       	dc.w $1F
00002572 0000 0000                  	dc.l Pal_LZWater
00002576 FB00                       	dc.w $FB00
00002578 001F                       	dc.w $1F
0000257A 0000 0000                  	dc.l Pal_SBZ3
0000257E FB20                       	dc.w $FB20
00002580 0017                       	dc.w $17
00002582 0000 0000                  	dc.l Pal_SBZ3Water
00002586 FB00                       	dc.w $FB00
00002588 001F                       	dc.w $1F
0000258A 0000 0000                  	dc.l Pal_SBZ2
0000258E FB20                       	dc.w $FB20
00002590 0017                       	dc.w $17
00002592 0000 0000                  	dc.l Pal_LZSonWater
00002596 FB00                       	dc.w $FB00
00002598 0007                       	dc.w 7
0000259A 0000 0000                  	dc.l Pal_SBZ3SonWat
0000259E FB00                       	dc.w $FB00
000025A0 0007                       	dc.w 7
000025A2 0000 0000                  	dc.l Pal_SpeResult
000025A6 FB00                       	dc.w $FB00
000025A8 001F                       	dc.w $1F
000025AA 0000 0000                  	dc.l Pal_SpeContinue
000025AE FB00                       	dc.w $FB00
000025B0 000F                       	dc.w $F
000025B2 0000 0000                  	dc.l Pal_Ending
000025B6 FB00                       	dc.w $FB00
000025B8 001F                       	dc.w $1F
000025BA 0000 0000                  	dc.l Menu_Palette; pallet address
000025BE FB00                       	dc.w $FB00	; RAM address
000025C0 001F                       	dc.w $1F	; (pallet length / 2) - 1	
000025C0 001F                       	dc.w $1F	; (pallet length / 2) - 1	
000025C2                            PalPointers2:
000025C2                            		include "_inc\Pallet pointers2.asm"
000025C2                            	
000025C2                            ; ---------------------------------------------------------------------------
000025C2                            ; Pallet pointers 2
000025C2                            ; ---------------------------------------------------------------------------
000025C2 0000 0000                  	dc.l Pal_SegaBG		; pallet address
000025C6 FB00                       	dc.w $FB00		; RAM address
000025C8 001F                       	dc.w $1F		; (pallet length / 2) - 1
000025CA 0000 0000                  	dc.l Pal_Title
000025CE FB00                       	dc.w $FB00
000025D0 001F                       	dc.w $1F
000025D2 0000 0000                  	dc.l Pal_LevelSel
000025D6 FB00                       	dc.w $FB00
000025D8 001F                       	dc.w $1F
000025DA 0000 0000                  	dc.l Pal_Sonic
000025DE FB00                       	dc.w $FB00
000025E0 0007                       	dc.w 7
000025E2 0000 0000                  	dc.l Pal_GHZ2
000025E6 FB20                       	dc.w $FB20
000025E8 0017                       	dc.w $17
000025EA 0000 0000                  	dc.l Pal_LZ2
000025EE FB20                       	dc.w $FB20
000025F0 0017                       	dc.w $17
000025F2 0000 0000                  	dc.l Pal_MZ2
000025F6 FB20                       	dc.w $FB20
000025F8 0017                       	dc.w $17
000025FA 0000 0000                  	dc.l Pal_SLZ2
000025FE FB20                       	dc.w $FB20
00002600 0017                       	dc.w $17
00002602 0000 0000                  	dc.l Pal_SYZ2
00002606 FB20                       	dc.w $FB20
00002608 0017                       	dc.w $17
0000260A 0000 0000                  	dc.l Pal_SBZ1
0000260E FB20                       	dc.w $FB20
00002610 0017                       	dc.w $17
00002612 0000 0000                  	dc.l Pal_Special
00002616 FB00                       	dc.w $FB00
00002618 001F                       	dc.w $1F
0000261A 0000 0000                  	dc.l Pal_LZWater2
0000261E FB00                       	dc.w $FB00
00002620 001F                       	dc.w $1F
00002622 0000 0000                  	dc.l Pal_SBZ3
00002626 FB20                       	dc.w $FB20
00002628 0017                       	dc.w $17
0000262A 0000 0000                  	dc.l Pal_SBZ3Water
0000262E FB00                       	dc.w $FB00
00002630 001F                       	dc.w $1F
00002632 0000 0000                  	dc.l Pal_SBZ2
00002636 FB20                       	dc.w $FB20
00002638 0017                       	dc.w $17
0000263A 0000 0000                  	dc.l Pal_LZSonWater2
0000263E FB00                       	dc.w $FB00
00002640 0007                       	dc.w 7
00002642 0000 0000                  	dc.l Pal_SBZ3SonWat
00002646 FB00                       	dc.w $FB00
00002648 0007                       	dc.w 7
0000264A 0000 0000                  	dc.l Pal_SpeResult
0000264E FB00                       	dc.w $FB00
00002650 001F                       	dc.w $1F
00002652 0000 0000                  	dc.l Pal_SpeContinue
00002656 FB00                       	dc.w $FB00
00002658 000F                       	dc.w $F
0000265A 0000 0000                  	dc.l Pal_Ending
0000265E FB00                       	dc.w $FB00
00002660 001F                       	dc.w $1F
00002660 001F                       	dc.w $1F
00002662                            PalPointers3:
00002662                            		include "_inc\Pallet pointers3.asm"
00002662                            	
00002662                            ; ---------------------------------------------------------------------------
00002662                            ; Pallet pointers 3
00002662                            ; ---------------------------------------------------------------------------
00002662 0000 0000                  	dc.l Pal_SegaBG		; pallet address
00002666 FB00                       	dc.w $FB00		; RAM address
00002668 001F                       	dc.w $1F		; (pallet length / 2) - 1
0000266A 0000 0000                  	dc.l Pal_Title
0000266E FB00                       	dc.w $FB00
00002670 001F                       	dc.w $1F
00002672 0000 0000                  	dc.l Pal_LevelSel
00002676 FB00                       	dc.w $FB00
00002678 001F                       	dc.w $1F
0000267A 0000 0000                  	dc.l Pal_Sonic
0000267E FB00                       	dc.w $FB00
00002680 0007                       	dc.w 7
00002682 0000 0000                  	dc.l Pal_GHZ3
00002686 FB20                       	dc.w $FB20
00002688 0017                       	dc.w $17
0000268A 0000 0000                  	dc.l Pal_LZ3
0000268E FB20                       	dc.w $FB20
00002690 0017                       	dc.w $17
00002692 0000 0000                  	dc.l Pal_MZ3
00002696 FB20                       	dc.w $FB20
00002698 0017                       	dc.w $17
0000269A 0000 0000                  	dc.l Pal_SLZ3
0000269E FB20                       	dc.w $FB20
000026A0 0017                       	dc.w $17
000026A2 0000 0000                  	dc.l Pal_SYZ3
000026A6 FB20                       	dc.w $FB20
000026A8 0017                       	dc.w $17
000026AA 0000 0000                  	dc.l Pal_SBZ1
000026AE FB20                       	dc.w $FB20
000026B0 0017                       	dc.w $17
000026B2 0000 0000                  	dc.l Pal_Special
000026B6 FB00                       	dc.w $FB00
000026B8 001F                       	dc.w $1F
000026BA 0000 0000                  	dc.l Pal_LZWater3
000026BE FB00                       	dc.w $FB00
000026C0 001F                       	dc.w $1F
000026C2 0000 0000                  	dc.l Pal_SBZ3
000026C6 FB20                       	dc.w $FB20
000026C8 0017                       	dc.w $17
000026CA 0000 0000                  	dc.l Pal_SBZ3Water
000026CE FB00                       	dc.w $FB00
000026D0 001F                       	dc.w $1F
000026D2 0000 0000                  	dc.l Pal_SBZ2
000026D6 FB20                       	dc.w $FB20
000026D8 0017                       	dc.w $17
000026DA 0000 0000                  	dc.l Pal_LZSonWater3
000026DE FB00                       	dc.w $FB00
000026E0 0007                       	dc.w 7
000026E2 0000 0000                  	dc.l Pal_SBZ3SonWat
000026E6 FB00                       	dc.w $FB00
000026E8 0007                       	dc.w 7
000026EA 0000 0000                  	dc.l Pal_SpeResult
000026EE FB00                       	dc.w $FB00
000026F0 001F                       	dc.w $1F
000026F2 0000 0000                  	dc.l Pal_SpeContinue
000026F6 FB00                       	dc.w $FB00
000026F8 000F                       	dc.w $F
000026FA 0000 0000                  	dc.l Pal_Ending
000026FE FB00                       	dc.w $FB00
00002700 001F                       	dc.w $1F
00002700 001F                       	dc.w $1F
00002702                            ; ---------------------------------------------------------------------------
00002702                            ; Pallet data
00002702                            ; ---------------------------------------------------------------------------
00002702                            Pal_SegaBG:	incbin	pallet\sega_bg.bin
00002782                            Pal_Title:	incbin	pallet\title.bin
00002802                            Pal_LevelSel:	incbin	pallet\levelsel.bin
00002882                            Pal_Sonic:	incbin	pallet\sonic.bin
000028A2                            Pal_GHZ:	incbin	pallet\ghz.bin
00002902                            Pal_GHZ2: incbin pallet\ghz2.bin
00002962                            Pal_GHZ3: incbin pallet\ghz3.bin
000029C2                            Pal_LZ:		incbin	pallet\lz.bin
00002A22                            Pal_LZ2: incbin pallet\lz2.bin
00002A82                            Pal_LZ3: incbin pallet\lz3.bin
00002AE2                            Pal_LZWater: incbin pallet\lz_uw.bin; LZ underwater pallets
00002B62                            Pal_LZWater2: incbin pallet\lz_uw2.bin; LZ underwater pallets
00002BE2                            Pal_LZWater3: incbin pallet\lz_uw3.bin; LZ underwater pallets
00002C62                            Pal_MZ:		incbin	pallet\mz.bin
00002CC2                            Pal_MZ2: incbin pallet\mz2.bin
00002D22                            Pal_MZ3: incbin pallet\mz3.bin
00002D82                            Pal_SLZ:	incbin	pallet\slz.bin
00002DE2                            Pal_SLZ2: incbin pallet\slz2.bin
00002E42                            Pal_SLZ3: incbin pallet\slz3.bin
00002EA2                            Pal_SYZ:	incbin	pallet\syz.bin
00002F02                            Pal_SYZ2: incbin pallet\syz2.bin
00002F62                            Pal_SYZ3: incbin pallet\syz3.bin
00002FC2                            Pal_SBZ1:	incbin	pallet\sbz_act1.bin	; SBZ act 1 pallets
00003022                            Pal_SBZ2:	incbin	pallet\sbz_act2.bin	; SBZ act 2 & Final Zone pallets
00003082                            Pal_Special:	incbin	pallet\special.bin	; special stage pallets
00003102                            Pal_SBZ3:	incbin	pallet\sbz_act3.bin	; SBZ act 3 pallets
00003162                            Pal_SBZ3Water:	incbin	pallet\sbz_a3uw.bin	; SBZ act 3 (underwater) pallets
000031E2                            Pal_LZSonWater:	incbin	pallet\son_lzuw.bin	; Sonic (underwater in LZ) pallet
00003202                            Pal_LZSonWater2:	incbin	pallet\son_lzuw2.bin	; Sonic (underwater in LZ) pallet
00003222                            Pal_LZSonWater3:	incbin	pallet\son_lzuw3.bin	; Sonic (underwater in LZ) pallet
00003242                            Pal_SBZ3SonWat:	incbin	pallet\son_sbzu.bin	; Sonic (underwater in SBZ act 3) pallet
00003262                            Pal_SpeResult:	incbin	pallet\ssresult.bin	; special stage results screen pallets
000032E2                            Pal_SpeContinue:incbin	pallet\sscontin.bin	; special stage results screen continue pallet
00003322                            Pal_Ending:	incbin	pallet\ending.bin	; ending sequence pallets
000033A2                            
000033A2                            ; ---------------------------------------------------------------------------
000033A2                            ; Subroutine to	delay the program by ($FFFFF62A) frames
000033A2                            ; ---------------------------------------------------------------------------
000033A2                            
000033A2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000033A2                            
000033A2                            
000033A2                            DelayProgram:				; XREF: PauseGame
000033A2 46FC 2300                  		move	#$2300,sr
000033A6                            
000033A6                            loc_29AC:
000033A6 4A38 F62A                  		tst.b	($FFFFF62A).w
000033AA 66FA                       		bne.s	loc_29AC
000033AC 4E75                       		rts	
000033AE                            ; End of function DelayProgram
000033AE                            
000033AE                            ; ---------------------------------------------------------------------------
000033AE                            ; Subroutine to	generate a pseudo-random number	in d0
000033AE                            ; ---------------------------------------------------------------------------
000033AE                            
000033AE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000033AE                            
000033AE                            
000033AE                            RandomNumber:
000033AE 2238 F636                  		move.l	($FFFFF636).w,d1
000033B2 6600                       		bne.s	loc_29C0
000033B4 223C 2A6D 365A             		move.l	#$2A6D365A,d1
000033BA                            
000033BA                            loc_29C0:
000033BA 2001                       		move.l	d1,d0
000033BC E581                       		asl.l	#2,d1
000033BE D280                       		add.l	d0,d1
000033C0 E781                       		asl.l	#3,d1
000033C2 D280                       		add.l	d0,d1
000033C4 3001                       		move.w	d1,d0
000033C6 4841                       		swap	d1
000033C8 D041                       		add.w	d1,d0
000033CA 3200                       		move.w	d0,d1
000033CC 4841                       		swap	d1
000033CE 21C1 F636                  		move.l	d1,($FFFFF636).w
000033D2 4E75                       		rts	
000033D4                            ; End of function RandomNumber
000033D4                            
000033D4                            
000033D4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000033D4                            
000033D4                            
000033D4                            CalcSine:				; XREF: SS_BGAnimate; et al
000033D4 0240 00FF                  		andi.w	#$FF,d0
000033D8 D040                       		add.w	d0,d0
000033DA 0640 0080                  		addi.w	#$80,d0
000033DE 323B 0000                  		move.w	Sine_Data(pc,d0.w),d1
000033E2 0440 0080                  		subi.w	#$80,d0
000033E6 303B 0000                  		move.w	Sine_Data(pc,d0.w),d0
000033EA 4E75                       		rts	
000033EC                            ; End of function CalcSine
000033EC                            
000033EC                            ; ===========================================================================
000033EC                            
000033EC                            Sine_Data:	incbin	misc\sinewave.bin	; values for a 360� sine wave
0000366C                            
0000366C                            ; ===========================================================================
0000366C 48E7 6000                  		movem.l	d1-d2,-(sp)
00003670 3200                       		move.w	d0,d1
00003672 4841                       		swap	d1
00003674 7000                       		moveq	#0,d0
00003676 3200                       		move.w	d0,d1
00003678 7407                       		moveq	#7,d2
0000367A                            
0000367A                            loc_2C80:
0000367A E599                       		rol.l	#2,d1
0000367C D040                       		add.w	d0,d0
0000367E 5240                       		addq.w	#1,d0
00003680 9240                       		sub.w	d0,d1
00003682 6400                       		bcc.s	loc_2C9A
00003684 D240                       		add.w	d0,d1
00003686 5340                       		subq.w	#1,d0
00003688 51CA FFF0                  		dbf	d2,loc_2C80
0000368C E248                       		lsr.w	#1,d0
0000368E 4CDF 0006                  		movem.l	(sp)+,d1-d2
00003692 4E75                       		rts	
00003694                            ; ===========================================================================
00003694                            
00003694                            loc_2C9A:
00003694 5240                       		addq.w	#1,d0
00003696 51CA FFE2                  		dbf	d2,loc_2C80
0000369A E248                       		lsr.w	#1,d0
0000369C 4CDF 0006                  		movem.l	(sp)+,d1-d2
000036A0 4E75                       		rts	
000036A2                            
000036A2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000036A2                            
000036A2                            
000036A2                            CalcAngle:
000036A2 48E7 1800                  		movem.l	d3-d4,-(sp)
000036A6 7600                       		moveq	#0,d3
000036A8 7800                       		moveq	#0,d4
000036AA 3601                       		move.w	d1,d3
000036AC 3802                       		move.w	d2,d4
000036AE 8843                       		or.w	d3,d4
000036B0 6700                       		beq.s	loc_2D04
000036B2 3802                       		move.w	d2,d4
000036B4 4A43                       		tst.w	d3
000036B6 6A00 0000                  		bpl.w	loc_2CC2
000036BA 4443                       		neg.w	d3
000036BC                            
000036BC                            loc_2CC2:
000036BC 4A44                       		tst.w	d4
000036BE 6A00 0000                  		bpl.w	loc_2CCA
000036C2 4444                       		neg.w	d4
000036C4                            
000036C4                            loc_2CCA:
000036C4 B843                       		cmp.w	d3,d4
000036C6 6400 0000                  		bcc.w	loc_2CDC
000036CA E18C                       		lsl.l	#8,d4
000036CC 88C3                       		divu.w	d3,d4
000036CE 7000                       		moveq	#0,d0
000036D0 103B 4000                  		move.b	Angle_Data(pc,d4.w),d0
000036D4 6000                       		bra.s	loc_2CE6
000036D6                            ; ===========================================================================
000036D6                            
000036D6                            loc_2CDC:				; XREF: CalcAngle
000036D6 E18B                       		lsl.l	#8,d3
000036D8 86C4                       		divu.w	d4,d3
000036DA 7040                       		moveq	#$40,d0
000036DC 903B 3000                  		sub.b	Angle_Data(pc,d3.w),d0
000036E0                            
000036E0                            loc_2CE6:
000036E0 4A41                       		tst.w	d1
000036E2 6A00 0000                  		bpl.w	loc_2CF2
000036E6 4440                       		neg.w	d0
000036E8 0640 0080                  		addi.w	#$80,d0
000036EC                            
000036EC                            loc_2CF2:
000036EC 4A42                       		tst.w	d2
000036EE 6A00 0000                  		bpl.w	loc_2CFE
000036F2 4440                       		neg.w	d0
000036F4 0640 0100                  		addi.w	#$100,d0
000036F8                            
000036F8                            loc_2CFE:
000036F8 4CDF 0018                  		movem.l	(sp)+,d3-d4
000036FC 4E75                       		rts	
000036FE                            ; ===========================================================================
000036FE                            
000036FE                            loc_2D04:				; XREF: CalcAngle
000036FE 303C 0040                  		move.w	#$40,d0
00003702 4CDF 0018                  		movem.l	(sp)+,d3-d4
00003706 4E75                       		rts	
00003708                            ; End of function CalcAngle
00003708                            
00003708                            ; ===========================================================================
00003708                            
00003708                            Angle_Data:	incbin	misc\angles.bin
0000380A                            
0000380A                            ; ===========================================================================
0000380A                            
0000380A                            ; ---------------------------------------------------------------------------
0000380A                            ; Sega screen
0000380A                            ; ---------------------------------------------------------------------------
0000380A                            
0000380A                            SegaScreen:				; XREF: GameModeArray
0000380A 103C 00E4                  		move.b	#$E4,d0
0000380E 6100 DC66                  		bsr.w	PlaySound_Special ; stop music
00003812 6100 DF34                  		bsr.w	ClearPLC
00003816 6100 EA96                  		bsr.w	Pal_MakeFlash
0000381A 4DF9 00C0 0004             		lea	($C00004).l,a6
00003820 3CBC 8004                  		move.w	#$8004,(a6)
00003824 3CBC 8230                  		move.w	#$8230,(a6)
00003828 3CBC 8407                  		move.w	#$8407,(a6)
0000382C 3CBC 8700                  		move.w	#$8700,(a6)
00003830 3CBC 8B00                  		move.w	#$8B00,(a6)
00003834 4238 F64E                  		clr.b	($FFFFF64E).w
00003838 46FC 2700                  		move	#$2700,sr
0000383C 3038 F60C                  		move.w	($FFFFF60C).w,d0
00003840 0200 00BF                  		andi.b	#$BF,d0
00003844 33C0 00C0 0004             		move.w	d0,($C00004).l
0000384A 6100 DB34                  		bsr.w	ClearScreen
0000384E 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
00003858 41F9 0000 0000             		lea	(Nem_SegaLogo).l,a0 ; load Sega	logo patterns
0000385E 6100 DD4A                  		bsr.w	NemDec
00003862 43F9 00FF 0000             		lea	($FF0000).l,a1
00003868 41F9 0000 0000             		lea	(Eni_SegaLogo).l,a0 ; load Sega	logo mappings
0000386E 303C 0000                  		move.w	#0,d0
00003872 6100 E014                  		bsr.w	EniDec
00003876 43F9 00FF 0000             		lea	($FF0000).l,a1
0000387C 203C 6510 0003             		move.l	#$65100003,d0
00003882 7217                       		moveq	#$17,d1
00003884 7407                       		moveq	#7,d2
00003886 6100 DC72                  		bsr.w	ShowVDPGraphics
0000388A 43F9 00FF 0180             		lea	($FF0180).l,a1
00003890 203C 4000 0003             		move.l	#$40000003,d0
00003896 7227                       		moveq	#$27,d1
00003898 741B                       		moveq	#$1B,d2
0000389A 6100 DC5E                  		bsr.w	ShowVDPGraphics
0000389E 7000                       		moveq	#0,d0
000038A0 6100 EBC8                  		bsr.w	PalLoad2	; load Sega logo pallet
000038A4 31FC FFF6 F632             		move.w	#-$A,($FFFFF632).w
000038AA 31FC 0000 F634             		move.w	#0,($FFFFF634).w
000038B0 31FC 0000 F662             		move.w	#0,($FFFFF662).w
000038B6 31FC 0000 F660             		move.w	#0,($FFFFF660).w
000038BC 3038 F60C                  		move.w	($FFFFF60C).w,d0
000038C0 0000 0040                  		ori.b	#$40,d0
000038C4 33C0 00C0 0004             		move.w	d0,($C00004).l
000038CA                            
000038CA                            Sega_WaitPallet:
000038CA 11FC 0002 F62A             		move.b	#2,($FFFFF62A).w
000038D0 6100 FAD0                  		bsr.w	DelayProgram
000038D4 6100 EA66                  		bsr.w	PalCycle_Sega
000038D8 66F0                       		bne.s	Sega_WaitPallet
000038DA                            
000038DA 103C 00E1                  		move.b	#$E1,d0
000038DE 6100 DB96                  		bsr.w	PlaySound_Special ; play "SEGA"	sound
000038E2 11FC 0014 F62A             		move.b	#$14,($FFFFF62A).w
000038E8 6100 FAB8                  		bsr.w	DelayProgram
000038EC 31FC 001E F614             		move.w	#$1E,($FFFFF614).w
000038F2                            
000038F2                            Sega_WaitEnd:
000038F2 11FC 0002 F62A             		move.b	#2,($FFFFF62A).w
000038F8 6100 FAA8                  		bsr.w	DelayProgram
000038FC 4A78 F614                  		tst.w	($FFFFF614).w
00003900 6700                       		beq.s	Sega_GotoTitle
00003902 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
00003908 67E8                       		beq.s	Sega_WaitEnd	; if not, branch
0000390A                            
0000390A                            Sega_GotoTitle:
0000390A 11FC 0004 F600             		move.b	#4,($FFFFF600).w ; go to title screen
00003910 4E75                       		rts	
00003912                            ; ===========================================================================
00003912                            
00003912                            ; ---------------------------------------------------------------------------
00003912                            ; Title	screen
00003912                            ; ---------------------------------------------------------------------------
00003912                            
00003912                            TitleScreen:				; XREF: GameModeArray
00003912 103C 00E4                  		move.b	#$E4,d0
00003916 6100 DB5E                  		bsr.w	PlaySound_Special ; stop music
0000391A 6100 DE2C                  		bsr.w	ClearPLC
0000391E 6100 E860                  		bsr.w	Pal_FadeFrom
00003922 46FC 2700                  		move	#$2700,sr
00003926 6100 DAE6                  		bsr.w	SoundDriverLoad
0000392A 4DF9 00C0 0004             		lea	($C00004).l,a6
00003930 3CBC 8004                  		move.w	#$8004,(a6)
00003934 3CBC 8230                  		move.w	#$8230,(a6)
00003938 3CBC 8407                  		move.w	#$8407,(a6)
0000393C 3CBC 9001                  		move.w	#$9001,(a6)
00003940 3CBC 9200                  		move.w	#$9200,(a6)
00003944 3CBC 8B03                  		move.w	#$8B03,(a6)
00003948 3CBC 8720                  		move.w	#$8720,(a6)
0000394C 4238 F64E                  		clr.b	($FFFFF64E).w
00003950 6100 DA2E                  		bsr.w	ClearScreen
00003954 43F8 D000                  		lea	($FFFFD000).w,a1
00003958 7000                       		moveq	#0,d0
0000395A 323C 07FF                  		move.w	#$7FF,d1
0000395E                            
0000395E                            Title_ClrObjRam:
0000395E 22C0                       		move.l	d0,(a1)+
00003960 51C9 FFFC                  		dbf	d1,Title_ClrObjRam ; fill object RAM ($D000-$EFFF) with	$0
00003964                            
00003964 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
0000396E 41F9 0000 0000             		lea	(Nem_JapNames).l,a0 ; load Japanese credits
00003974 6100 DC34                  		bsr.w	NemDec
00003978 23FC 54C0 0000 00C0 0004   		move.l	#$54C00000,($C00004).l
00003982 41F9 0000 0000             		lea	(Nem_CreditText).l,a0 ;	load alphabet
00003988 6100 DC20                  		bsr.w	NemDec
0000398C 43F9 00FF 0000             		lea	($FF0000).l,a1
00003992 41F9 0000 0000             		lea	(Eni_JapNames).l,a0 ; load mappings for	Japanese credits
00003998 303C 0000                  		move.w	#0,d0
0000399C 6100 DEEA                  		bsr.w	EniDec
000039A0 43F9 00FF 0000             		lea	($FF0000).l,a1
000039A6 203C 4000 0003             		move.l	#$40000003,d0
000039AC 7227                       		moveq	#$27,d1
000039AE 741B                       		moveq	#$1B,d2
000039B0 6100 DB48                  		bsr.w	ShowVDPGraphics
000039B4 43F8 FB80                  		lea	($FFFFFB80).w,a1
000039B8 7000                       		moveq	#0,d0
000039BA 323C 001F                  		move.w	#$1F,d1
000039BE                            
000039BE                            Title_ClrPallet:
000039BE 22C0                       		move.l	d0,(a1)+
000039C0 51C9 FFFC                  		dbf	d1,Title_ClrPallet ; fill pallet with 0	(black)
000039C4                            
000039C4 7003                       		moveq	#3,d0		; load Sonic's pallet
000039C6 6100 EA66                  		bsr.w	PalLoad1
000039CA 11FC 008A D080             		move.b	#$8A,($FFFFD080).w ; load "SONIC TEAM PRESENTS"	object
000039D0 4EB9 0000 0000             		jsr	ObjectsLoad
000039D6 4EB9 0000 0000             		jsr	BuildSprites
000039DC 6100 E6EC                  		bsr.w	Pal_FadeTo
000039E0 46FC 2700                  		move	#$2700,sr
000039E4 23FC 4000 0001 00C0 0004   		move.l	#$40000001,($C00004).l
000039EE 41F9 0000 0000             		lea	(Nem_TitleFg).l,a0 ; load title	screen patterns
000039F4 6100 DBB4                  		bsr.w	NemDec
000039F8 23FC 6000 0001 00C0 0004   		move.l	#$60000001,($C00004).l
00003A02 41F9 0000 0000             		lea	(Nem_TitleSonic).l,a0 ;	load Sonic title screen	patterns
00003A08 6100 DBA0                  		bsr.w	NemDec
00003A0C 23FC 6200 0002 00C0 0004   		move.l	#$62000002,($C00004).l
00003A16 41F9 0000 0000             		lea	(Nem_TitleTM).l,a0 ; load "TM" patterns
00003A1C 6100 DB8C                  		bsr.w	NemDec
00003A20 4DF9 00C0 0000             		lea	($C00000).l,a6
00003A26 2D7C 5000 0003 0004        		move.l	#$50000003,4(a6)
00003A2E 4BF9 0000 058C             		lea	(Art_Text).l,a5
00003A34 323C 028F                  		move.w	#$28F,d1
00003A38                            
00003A38                            Title_LoadText:
00003A38 3C9D                       		move.w	(a5)+,(a6)
00003A3A                            
00003A3A 51C9 FFFC                  		dbf	d1,Title_LoadText ; load uncompressed text patterns
00003A3E 41F9 0000 0000                             lea	(Kos_Menu_art).l,a0	; load that art
00003A44 2279 00FF 0000             		move.l	($FF0000).l,a1	; don't wanna corrupt level loading in any way!!
00003A4A 4EB8 1A06                  		jsr	KosDec		; decompress that fucker
00003A4E 3609                       		move.w	a1,d3
00003A50 E24B                       		lsr.w	#1,d3
00003A52                            
00003A52 4DF9 00C0 0000             		lea	($C00000).l,a6 ; lea to video ram
00003A58 2D7C 60C0 0000 0004        		move.l	#$60C00000,4(a6)  ; its location on V ram
00003A60 2A7C 00FF 0000             		move.l	#$FF0000,a5 ; dump decompression to Video ram
00003A66 323C 010E                  		move.w	#$1B*10,d1	; Tile limit: $10 bytes/tile
00003A6A                            
00003A6A                            LoadMenuSelectThing:
00003A6A 3C9D                       		move.w	(a5)+,(a6)
00003A6C 51C9 FFFC                  		dbf	d1,LoadMenuSelectThing
00003A70                                           ; move.w	#$1B*10,d3
00003A70                                           ; divu.w  #$10,d3 ; devide this
00003A70                            
00003A70                                          ;  add.w
00003A70 11FC 0000 FE30             		move.b	#0,($FFFFFE30).w ; clear lamppost counter
00003A76 31FC 0000 FE08             		move.w	#0,($FFFFFE08).w ; disable debug item placement	mode
00003A7C 31FC 0000 FFF0             		move.w	#0,($FFFFFFF0).w ; disable debug mode
00003A82 31FC 0000 FFEA             		move.w	#0,($FFFFFFEA).w
00003A88 31FC 0000 FE10             		move.w	#0,($FFFFFE10).w ; set level to	GHZ (00)
00003A8E 31FC 0000 F634             		move.w	#0,($FFFFF634).w ; disable pallet cycling
00003A94 6100 0000                  		bsr.w	LevelSizeLoad
00003A98 6100 0000                  		bsr.w	DeformBgLayer
00003A9C 43F8 B000                  		lea	($FFFFB000).w,a1
00003AA0 41F9 0000 0000             		lea	(Blk16_TS).l,a0 ; load TS 16x16 mappings
00003AA6 303C 0000                  		move.w	#0,d0
00003AAA 6100 DDDC                  		bsr.w	EniDec
00003AAE 41F9 0000 0000             		lea	(Blk256_TS).l,a0 ; load TS 256x256 mappings
00003AB4 43F9 00FF 0000             		lea	($FF0000).l,a1
00003ABA 6100 DF4A                  		bsr.w	KosDec
00003ABE 6100 0000                  		bsr.w	LevelLayoutLoad
00003AC2 6100 E6BC                  		bsr.w	Pal_FadeFrom
00003AC6 46FC 2700                  		move	#$2700,sr
00003ACA 6100 D8B4                  		bsr.w	ClearScreen
00003ACE 4BF9 00C0 0004             		lea	($C00004).l,a5
00003AD4 4DF9 00C0 0000             		lea	($C00000).l,a6
00003ADA 47F8 F708                  		lea	($FFFFF708).w,a3
00003ADE 49F8 A440                  		lea	($FFFFA440).w,a4
00003AE2 343C 6000                  		move.w	#$6000,d2
00003AE6 6100 0000                  		bsr.w	LoadTilesFromStart2
00003AEA 43F9 00FF 0000             		lea	($FF0000).l,a1
00003AF0 41F9 0000 0000             		lea	(Eni_Title).l,a0 ; load	title screen mappings
00003AF6 303C 0000                  		move.w	#0,d0
00003AFA 6100 DD8C                  		bsr.w	EniDec
00003AFE 43F9 00FF 0000             		lea	($FF0000).l,a1
00003B04 203C 4208 0003             		move.l	#$42080003,d0
00003B0A 7221                       		moveq	#$21,d1
00003B0C 7415                       		moveq	#$15,d2
00003B0E 6100 D9EA                  		bsr.w	ShowVDPGraphics
00003B12 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
00003B1C 41F9 0000 0000             		lea	(Nem_TS_1st).l,a0 ; load TS patterns
00003B22 6100 DA86                  		bsr.w	NemDec
00003B26 7001                       		moveq	#1,d0		; load title screen pallet
00003B28 6100 E904                  		bsr.w	PalLoad1
00003B2C 103C 008A                  		move.b	#$8A,d0		; play title screen music
00003B30 6100 D944                  		bsr.w	PlaySound_Special
00003B34 11FC 0000 FFFA             		move.b	#0,($FFFFFFFA).w ; disable debug mode
00003B3A 31FC 0578 F614             		move.w	#$578,($FFFFF614).w ; run title	screen for 578 frames
00003B40 43F8 D080                  		lea	($FFFFD080).w,a1
00003B44 7000                       		moveq	#0,d0
00003B46 323C 000F                  		move.w	#$F,d1	; ($40 / 4) - 1
00003B4A                            
00003B4A                            Title_ClrObjRam2:
00003B4A 22C0                       		move.l	d0,(a1)+
00003B4C 51C9 FFFC                  		dbf	d1,Title_ClrObjRam2
00003B50                            
00003B50 11FC 000E D040             		move.b	#$E,($FFFFD040).w ; load big Sonic object
00003B56 11FC 000F D080             		move.b	#$F,($FFFFD080).w ; load "PRESS	START BUTTON" object
00003B5C 11FC 000F D0C0             		move.b	#$F,($FFFFD0C0).w ; load "TM" object
00003B62 11FC 0003 D0DA             		move.b	#3,($FFFFD0DA).w
00003B68 11FC 000F D100             		move.b	#$F,($FFFFD100).w
00003B6E 11FC 0002 D11A             		move.b	#2,($FFFFD11A).w
00003B74 4EB9 0000 0000             		jsr	ObjectsLoad
00003B7A 6100 0000                  		bsr.w	DeformBgLayer
00003B7E 4EB9 0000 0000             		jsr	BuildSprites
00003B84 7000                       		moveq	#0,d0
00003B86 6100 DB94                  		bsr.w	LoadPLC2
00003B8A 31FC 0000 FFE4             		move.w	#0,($FFFFFFE4).w
00003B90 31FC 0000 FFE6             		move.w	#0,($FFFFFFE6).w
00003B96 3038 F60C                  		move.w	($FFFFF60C).w,d0
00003B9A 0000 0040                  		ori.b	#$40,d0
00003B9E 33C0 00C0 0004             		move.w	d0,($C00004).l
00003BA4 6100 E524                  		bsr.w	Pal_FadeTo
00003BA8                            
00003BA8                            loc_317C:
00003BA8 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00003BAE 6100 F7F2                  		bsr.w	DelayProgram
00003BB2 4EB9 0000 0000             		jsr	ObjectsLoad
00003BB8 6100 0000                  		bsr.w	DeformBgLayer
00003BBC 4EB9 0000 0000             		jsr	BuildSprites
00003BC2 6100 DF08                  		bsr.w	PalCycle_Title
00003BC6 6100 DB8E                  		bsr.w	RunPLC_RAM
00003BCA 3038 D008                  		move.w	($FFFFD008).w,d0
00003BCE 5440                       		addq.w	#2,d0
00003BD0 31C0 D008                  		move.w	d0,($FFFFD008).w ; move	Sonic to the right
00003BD4 0C40 1C00                  		cmpi.w	#$1C00,d0	; has Sonic object passed x-position $1C00?
00003BD8 6500                       		bcs.s	Title_ChkRegion	; if not, branch
00003BDA 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
00003BE0 4E75                       		rts
00003BE2                            ; ===========================================================================
00003BE2                            
00003BE2                            Title_ChkRegion:
00003BE2 4A38 FFF8                  		tst.b	($FFFFFFF8).w	; check	if the machine is US or	Japanese
00003BE6 6A00                       		bpl.s	Title_RegionJ	; if Japanese, branch
00003BE8 41F9 0000 0000             		lea	(LevelSelectCode_US).l,a0 ; load US code
00003BEE 6000                       		bra.s	Title_EnterCheat
00003BF0                            ; ===========================================================================
00003BF0                            
00003BF0                            Title_RegionJ:				; XREF: Title_ChkRegion
00003BF0 41F9 0000 0000             		lea	(LevelSelectCode_J).l,a0 ; load	J code
00003BF6                            
00003BF6                            Title_EnterCheat:			; XREF: Title_ChkRegion
00003BF6 3038 FFE4                  		move.w	($FFFFFFE4).w,d0
00003BFA D0C0                       		adda.w	d0,a0
00003BFC 1038 F605                  		move.b	($FFFFF605).w,d0 ; get button press
00003C00 0200 000F                  		andi.b	#$F,d0		; read only up/down/left/right buttons
00003C04 B010                       		cmp.b	(a0),d0		; does button press match the cheat code?
00003C06 6600                       		bne.s	loc_3210	; if not, branch
00003C08 5278 FFE4                  		addq.w	#1,($FFFFFFE4).w ; next	button press
00003C0C 4A00                       		tst.b	d0
00003C0E 6600                       		bne.s	Title_CountC
00003C10 41F8 FFE0                  		lea	($FFFFFFE0).w,a0
00003C14 3238 FFE6                  		move.w	($FFFFFFE6).w,d1
00003C18 E249                       		lsr.w	#1,d1
00003C1A 0241 0003                  		andi.w	#3,d1
00003C1E 6700                       		beq.s	Title_PlayRing
00003C20 4A38 FFF8                  		tst.b	($FFFFFFF8).w
00003C24 6A00                       		bpl.s	Title_PlayRing
00003C26 7201                       		moveq	#1,d1
00003C28 1181 1001                  		move.b	d1,1(a0,d1.w)
00003C2C                            
00003C2C                            Title_PlayRing:
00003C2C 11BC 0001 1000             		move.b	#1,(a0,d1.w)	; activate cheat
00003C32 103C 00B5                  		move.b	#$B5,d0		; play ring sound when code is entered
00003C36 6100 D83E                  		bsr.w	PlaySound_Special
00003C3A 6000                       		bra.s	Title_CountC
00003C3C                            ; ===========================================================================
00003C3C                            
00003C3C                            loc_3210:				; XREF: Title_EnterCheat
00003C3C 4A00                       		tst.b	d0
00003C3E 6700                       		beq.s	Title_CountC
00003C40 0C78 0009 FFE4             		cmpi.w	#9,($FFFFFFE4).w
00003C46 6700                       		beq.s	Title_CountC
00003C48 31FC 0000 FFE4             		move.w	#0,($FFFFFFE4).w
00003C4E                            
00003C4E                            Title_CountC:
00003C4E 1038 F605                  		move.b	($FFFFF605).w,d0
00003C52 0200 0020                  		andi.b	#$20,d0		; is C button pressed?
00003C56 6700                       		beq.s	loc_3230	; if not, branch
00003C58 5278 FFE6                  		addq.w	#1,($FFFFFFE6).w ; increment C button counter
00003C5C                            
00003C5C                            loc_3230:
00003C5C 4A78 F614                  		tst.w	($FFFFF614).w
00003C60 6700 0000                  		beq.w	Demo
00003C64 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; check if Start is pressed
00003C6A 6700 FF3C                  		beq.w	loc_317C	; if not, branch
00003C6E                            
00003C6E                            Title_ChkLevSel:
00003C6E 4A38 FFE0                  		tst.b	($FFFFFFE0).w		; check	if level select	code is	on
00003C72 6700 0000                  		beq.w	PlayLevel		; if not, play level
00003C76                            	;	btst	#6,($FFFFF604).w ; check if A is pressed
00003C76                            	;	beq.w	PlayLevel		; if not, play level
00003C76 4EF9 0000 0000             		jmp	Level_Select_Menu	; if yes, goto Sonic 2 level select
00003C7C 7002                       		moveq	#2,d0
00003C7E 43F8 CC00                  		lea	($FFFFCC00).w,a1
00003C82 7000                       		moveq	#0,d0
00003C84 323C 00DF                  		move.w	#$DF,d1
00003C88                            
00003C88                            Title_ClrScroll:
00003C88 22C0                       		move.l	d0,(a1)+
00003C8A 51C9 FFFC                  		dbf	d1,Title_ClrScroll ; fill scroll data with 0
00003C8E                            
00003C8E 21C0 F616                  		move.l	d0,($FFFFF616).w
00003C92 46FC 2700                  		move	#$2700,sr
00003C96 4DF9 00C0 0000             		lea	($C00000).l,a6
00003C9C 23FC 6000 0003 00C0 0004   		move.l	#$60000003,($C00004).l
00003CA6 323C 03FF                  		move.w	#$3FF,d1
00003CAA                            
00003CAA                            Title_ClrVram:
00003CAA 2C80                       		move.l	d0,(a6)
00003CAC 51C9 FFFC                  		dbf	d1,Title_ClrVram ; fill	VRAM with 0
00003CB0                            
00003CB0 6100 0000                  		bsr.w	LevSelTextLoad
00003CB4                            
00003CB4                            ; ---------------------------------------------------------------------------
00003CB4                            ; Level	Select
00003CB4                            ; ---------------------------------------------------------------------------
00003CB4                            
00003CB4                            LevelSelect:
00003CB4 11FC 0002 F62A             		move.b	#2,($FFFFF62A).w
00003CBA 6100 F6E6                  		bsr.w	DelayProgram
00003CBE 6100 0000                  		bsr.w	LevSelControls
00003CC2 6100 DA92                  		bsr.w	RunPLC_RAM
00003CC6 4AB8 F680                  		tst.l	($FFFFF680).w
00003CCA 66E8                       		bne.s	LevelSelect
00003CCC 0238 00F0 F605             		andi.b	#$F0,($FFFFF605).w ; is	A, B, C, or Start pressed?
00003CD2 67E0                       		beq.s	LevelSelect	; if not, branch
00003CD4 3038 FF82                  		move.w	($FFFFFF82).w,d0
00003CD8 0C40 0014                  		cmpi.w	#$14,d0		; have you selected item $14 (sound test)?
00003CDC 6600                       		bne.s	LevSel_Level_SS	; if not, go to	Level/SS subroutine
00003CDE 3038 FF84                  		move.w	($FFFFFF84).w,d0
00003CE2 0640 0080                  		addi.w	#$80,d0
00003CE6 4A38 FFE3                  		tst.b	($FFFFFFE3).w	; is Japanese Credits cheat on?
00003CEA 6700                       		beq.s	LevSel_NoCheat	; if not, branch
00003CEC 0C40 009F                  		cmpi.w	#$9F,d0		; is sound $9F being played?
00003CF0 6700                       		beq.s	LevSel_Ending	; if yes, branch
00003CF2 0C40 009E                  		cmpi.w	#$9E,d0		; is sound $9E being played?
00003CF6 6700                       		beq.s	LevSel_Credits	; if yes, branch
00003CF8                            
00003CF8                            LevSel_NoCheat:
00003CF8 0C40 00A0                  		cmpi.w	#$A0,d0		; is sound $80-$94 being played?
00003CFC 6500                       		bcs.s	LevSel_PlaySnd	; if yes, branch
00003CFE 0C40 00A0                  		cmpi.w	#$A0,d0		; is sound $95-$A0 being played?
00003D02 65B0                       		bcs.s	LevelSelect	; if yes, branch
00003D04                            
00003D04                            LevSel_PlaySnd:
00003D04 6100 D770                  		bsr.w	PlaySound_Special
00003D08 60AA                       		bra.s	LevelSelect
00003D0A                            ; ===========================================================================
00003D0A                            
00003D0A                            LevSel_Ending:				; XREF: LevelSelect
00003D0A 11FC 0018 F600             		move.b	#$18,($FFFFF600).w ; set screen	mode to	$18 (Ending)
00003D10 31FC 0600 FE10             		move.w	#$600,($FFFFFE10).w ; set level	to 0600	(Ending)
00003D16 4E75                       		rts
00003D18                            ; ===========================================================================
00003D18                            
00003D18                            LevSel_Credits:				; XREF: LevelSelect
00003D18 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; set screen	mode to	$1C (Credits)
00003D1E 103C 0091                  		move.b	#$91,d0
00003D22 6100 D752                  		bsr.w	PlaySound_Special ; play credits music
00003D26 31FC 0000 FFF4             		move.w	#0,($FFFFFFF4).w
00003D2C 4E75                       		rts
00003D2E                            ; ===========================================================================
00003D2E                            
00003D2E                            LevSel_Level_SS:			; XREF: LevelSelect
00003D2E D040                       		add.w	d0,d0
00003D30 303B 0000                  		move.w	LSelectPointers(pc,d0.w),d0 ; load level number
00003D34 6B00 FF7E                  		bmi.w	LevelSelect
00003D38 0C40 0700                  		cmpi.w	#$700,d0	; check	if level is 0700 (Special Stage)
00003D3C 6600                       		bne.s	LevSel_Level	; if not, branch
00003D3E 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set screen	mode to	$10 (Special Stage)
00003D44 4278 FE10                  		clr.w	($FFFFFE10).w	; clear	level
00003D48 11FC 0003 FE12             		move.b	#3,($FFFFFE12).w ; set lives to	3
00003D4E 7000                       		moveq	#0,d0
00003D50 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00003D54 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00003D58 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00003D5C 4E75                       		rts
00003D5E                            ; ===========================================================================
00003D5E                            
00003D5E                            LevSel_Level:				; XREF: LevSel_Level_SS
00003D5E 0240 3FFF                  		andi.w	#$3FFF,d0
00003D62 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level number
00003D66                            
00003D66                            PlayLevel:	
00003D66                            		; XREF: ROM:00003246j ...
00003D66 6000 FE40                  		bra.w    loc_317C ; loop this bitch 
00003D6A 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
00003D70 11FC 0003 FE12             		move.b	#3,($FFFFFE12).w ; set lives to	3
00003D76 7000                       		moveq	#0,d0
00003D78 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00003D7C 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00003D80 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00003D84 11C0 FE16                  		move.b	d0,($FFFFFE16).w ; clear special stage number
00003D88 11C0 FE57                  		move.b	d0,($FFFFFE57).w ; clear emeralds
00003D8C 21C0 FE58                  		move.l	d0,($FFFFFE58).w ; clear emeralds
00003D90 21C0 FE5C                  		move.l	d0,($FFFFFE5C).w ; clear emeralds
00003D94 11C0 FE18                  		move.b	d0,($FFFFFE18).w ; clear continues
00003D98 103C 00E0                  		move.b	#$E0,d0
00003D9C 6100 D6D8                  		bsr.w	PlaySound_Special ; fade out music
00003DA0 4E75                       		rts
00003DA2                            ; ===========================================================================
00003DA2                            ; ---------------------------------------------------------------------------
00003DA2                            ; Level	select - level pointers
00003DA2                            ; ---------------------------------------------------------------------------
00003DA2                            LSelectPointers:
00003DA2                            		incbin	misc\ls_point.bin
00003DCC                            		even
00003DCC                            ; ---------------------------------------------------------------------------
00003DCC                            ; Level	select codes
00003DCC                            ; ---------------------------------------------------------------------------
00003DCC                            LevelSelectCode_J:
00003DCC                            		incbin	misc\ls_jcode.bin
00003DD2                            		even
00003DD2                            
00003DD2                            LevelSelectCode_US:
00003DD2                            		incbin	misc\ls_ucode.bin
00003DD8                            		even
00003DD8                            ; ===========================================================================
00003DD8                            
00003DD8                            ; ---------------------------------------------------------------------------
00003DD8                            ; Demo mode
00003DD8                            ; ---------------------------------------------------------------------------
00003DD8                            
00003DD8                            Demo:					; XREF: TitleScreen
00003DD8 31FC 001E F614             		move.w	#$1E,($FFFFF614).w
00003DDE                            
00003DDE                            loc_33B6:				; XREF: loc_33E4
00003DDE 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00003DE4 6100 F5BC                  		bsr.w	DelayProgram
00003DE8 6100 0000                  		bsr.w	DeformBgLayer
00003DEC 6100 DCB8                  		bsr.w	PalCycle_Load
00003DF0 6100 D964                  		bsr.w	RunPLC_RAM
00003DF4 3038 D008                  		move.w	($FFFFD008).w,d0
00003DF8 5440                       		addq.w	#2,d0
00003DFA 31C0 D008                  		move.w	d0,($FFFFD008).w
00003DFE 0C40 1C00                  		cmpi.w	#$1C00,d0
00003E02 6500                       		bcs.s	loc_33E4
00003E04 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set screen mode to 00 (level)
00003E0A 4E75                       		rts	
00003E0C                            ; ===========================================================================
00003E0C                            
00003E0C                            loc_33E4:				; XREF: Demo
00003E0C 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
00003E12 6600 FE5A                  		bne.w	Title_ChkLevSel	; if yes, branch
00003E16 4A78 F614                  		tst.w	($FFFFF614).w
00003E1A 6600 FFC2                  		bne.w	loc_33B6
00003E1E 103C 00E0                  		move.b	#$E0,d0
00003E22 6100 D652                  		bsr.w	PlaySound_Special ; fade out music
00003E26 3038 FFF2                  		move.w	($FFFFFFF2).w,d0 ; load	demo number
00003E2A 0240 0007                  		andi.w	#7,d0
00003E2E D040                       		add.w	d0,d0
00003E30 303B 0000                  		move.w	Demo_Levels(pc,d0.w),d0	; load level number for	demo
00003E34 31C0 FE10                  		move.w	d0,($FFFFFE10).w
00003E38 5278 FFF2                  		addq.w	#1,($FFFFFFF2).w ; add 1 to demo number
00003E3C 0C78 0004 FFF2             		cmpi.w	#4,($FFFFFFF2).w ; is demo number less than 4?
00003E42 6500                       		bcs.s	loc_3422	; if yes, branch
00003E44 31FC 0000 FFF2             		move.w	#0,($FFFFFFF2).w ; reset demo number to	0
00003E4A                            
00003E4A                            loc_3422:
00003E4A 31FC 0001 FFF0             		move.w	#1,($FFFFFFF0).w ; turn	demo mode on
00003E50 11FC 0008 F600             		move.b	#8,($FFFFF600).w ; set screen mode to 08 (demo)
00003E56 0C40 0600                  		cmpi.w	#$600,d0	; is level number 0600 (special	stage)?
00003E5A 6600                       		bne.s	Demo_Level	; if not, branch
00003E5C 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set screen	mode to	$10 (Special Stage)
00003E62 4278 FE10                  		clr.w	($FFFFFE10).w	; clear	level number
00003E66 4238 FE16                  		clr.b	($FFFFFE16).w	; clear	special	stage number
00003E6A                            
00003E6A                            Demo_Level:
00003E6A 11FC 0003 FE12             		move.b	#3,($FFFFFE12).w ; set lives to	3
00003E70 7000                       		moveq	#0,d0
00003E72 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00003E76 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00003E7A 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00003E7E 4E75                       		rts	
00003E80                            ; ===========================================================================
00003E80                            ; ---------------------------------------------------------------------------
00003E80                            ; Levels used in demos
00003E80                            ; ---------------------------------------------------------------------------
00003E80                            Demo_Levels:	incbin	misc\dm_ord1.bin
00003E88                            		even
00003E88                            
00003E88                            ; ---------------------------------------------------------------------------
00003E88                            ; Subroutine to	change what you're selecting in the level select
00003E88                            ; ---------------------------------------------------------------------------
00003E88                            
00003E88                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003E88                            
00003E88                            
00003E88                            LevSelControls:				; XREF: LevelSelect
00003E88 1238 F605                  		move.b	($FFFFF605).w,d1
00003E8C 0201 0003                  		andi.b	#3,d1		; is up/down pressed and held?
00003E90 6600                       		bne.s	LevSel_UpDown	; if yes, branch
00003E92 5378 FF80                  		subq.w	#1,($FFFFFF80).w ; subtract 1 from time	to next	move
00003E96 6A00                       		bpl.s	LevSel_SndTest	; if time remains, branch
00003E98                            
00003E98                            LevSel_UpDown:
00003E98 31FC 000B FF80             		move.w	#$B,($FFFFFF80).w ; reset time delay
00003E9E 1238 F604                  		move.b	($FFFFF604).w,d1
00003EA2 0201 0003                  		andi.b	#3,d1		; is up/down pressed?
00003EA6 6700                       		beq.s	LevSel_SndTest	; if not, branch
00003EA8 3038 FF82                  		move.w	($FFFFFF82).w,d0
00003EAC 0801 0000                  		btst	#0,d1		; is up	pressed?
00003EB0 6700                       		beq.s	LevSel_Down	; if not, branch
00003EB2 5340                       		subq.w	#1,d0		; move up 1 selection
00003EB4 6400                       		bcc.s	LevSel_Down
00003EB6 7014                       		moveq	#$14,d0		; if selection moves below 0, jump to selection	$14
00003EB8                            
00003EB8                            LevSel_Down:
00003EB8 0801 0001                  		btst	#1,d1		; is down pressed?
00003EBC 6700                       		beq.s	LevSel_Refresh	; if not, branch
00003EBE 5240                       		addq.w	#1,d0		; move down 1 selection
00003EC0 0C40 0015                  		cmpi.w	#$15,d0
00003EC4 6500                       		bcs.s	LevSel_Refresh
00003EC6 7000                       		moveq	#0,d0		; if selection moves above $14,	jump to	selection 0
00003EC8                            
00003EC8                            LevSel_Refresh:
00003EC8 31C0 FF82                  		move.w	d0,($FFFFFF82).w ; set new selection
00003ECC 6100 0000                  		bsr.w	LevSelTextLoad	; refresh text
00003ED0 4E75                       		rts	
00003ED2                            ; ===========================================================================
00003ED2                            
00003ED2                            LevSel_SndTest:				; XREF: LevSelControls
00003ED2 0C78 0014 FF82             		cmpi.w	#$14,($FFFFFF82).w ; is	item $14 selected?
00003ED8 6600                       		bne.s	LevSel_NoMove	; if not, branch
00003EDA 1238 F605                  		move.b	($FFFFF605).w,d1
00003EDE 0201 000C                  		andi.b	#$C,d1		; is left/right	pressed?
00003EE2 6700                       		beq.s	LevSel_NoMove	; if not, branch
00003EE4 3038 FF84                  		move.w	($FFFFFF84).w,d0
00003EE8 0801 0002                  		btst	#2,d1		; is left pressed?
00003EEC 6700                       		beq.s	LevSel_Right	; if not, branch
00003EEE 5340                       		subq.w	#1,d0		; subtract 1 from sound	test
00003EF0 6400                       		bcc.s	LevSel_Right
00003EF2 704F                       		moveq	#$4F,d0		; if sound test	moves below 0, set to $4F
00003EF4                            
00003EF4                            LevSel_Right:
00003EF4 0801 0003                  		btst	#3,d1		; is right pressed?
00003EF8 6700                       		beq.s	LevSel_Refresh2	; if not, branch
00003EFA 5240                       		addq.w	#1,d0		; add 1	to sound test
00003EFC 0C40 0050                  		cmpi.w	#$50,d0
00003F00 6500                       		bcs.s	LevSel_Refresh2
00003F02 7000                       		moveq	#0,d0		; if sound test	moves above $4F, set to	0
00003F04                            
00003F04                            LevSel_Refresh2:
00003F04 31C0 FF84                  		move.w	d0,($FFFFFF84).w ; set sound test number
00003F08 6100 0000                  		bsr.w	LevSelTextLoad	; refresh text
00003F0C                            
00003F0C                            LevSel_NoMove:
00003F0C 4E75                       		rts	
00003F0E                            ; End of function LevSelControls
00003F0E                            
00003F0E                            ; ---------------------------------------------------------------------------
00003F0E                            ; Subroutine to load level select text
00003F0E                            ; ---------------------------------------------------------------------------
00003F0E                            
00003F0E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003F0E                            
00003F0E                            
00003F0E                            LevSelTextLoad:				; XREF: TitleScreen
00003F0E 43F9 0000 0000             		lea	(LevelMenuText).l,a1
00003F14 4DF9 00C0 0000             		lea	($C00000).l,a6
00003F1A 283C 6210 0003             		move.l	#$62100003,d4	; screen position (text)
00003F20 363C E680                  		move.w	#$E680,d3	; VRAM setting
00003F24 7214                       		moveq	#$14,d1		; number of lines of text
00003F26                            
00003F26                            loc_34FE:				; XREF: LevSelTextLoad+26j
00003F26 2D44 0004                  		move.l	d4,4(a6)
00003F2A 6100 0000                  		bsr.w	LevSel_ChgLine
00003F2E 0684 0080 0000             		addi.l	#$800000,d4
00003F34 51C9 FFF0                  		dbf	d1,loc_34FE
00003F38 7000                       		moveq	#0,d0
00003F3A 3038 FF82                  		move.w	($FFFFFF82).w,d0
00003F3E 3200                       		move.w	d0,d1
00003F40 283C 6210 0003             		move.l	#$62100003,d4
00003F46 EF48                       		lsl.w	#7,d0
00003F48 4840                       		swap	d0
00003F4A D880                       		add.l	d0,d4
00003F4C 43F9 0000 0000             		lea	(LevelMenuText).l,a1
00003F52 E749                       		lsl.w	#3,d1
00003F54 3001                       		move.w	d1,d0
00003F56 D241                       		add.w	d1,d1
00003F58 D240                       		add.w	d0,d1
00003F5A D2C1                       		adda.w	d1,a1
00003F5C 363C C680                  		move.w	#$C680,d3
00003F60 2D44 0004                  		move.l	d4,4(a6)
00003F64 6100 0000                  		bsr.w	LevSel_ChgLine
00003F68 363C E680                  		move.w	#$E680,d3
00003F6C 0C78 0014 FF82             		cmpi.w	#$14,($FFFFFF82).w
00003F72 6600                       		bne.s	loc_3550
00003F74 363C C680                  		move.w	#$C680,d3
00003F78                            
00003F78                            loc_3550:
00003F78 23FC 6C30 0003 00C0 0004   		move.l	#$6C300003,($C00004).l ; screen	position (sound	test)
00003F82 3038 FF84                  		move.w	($FFFFFF84).w,d0
00003F86 0640 0080                  		addi.w	#$80,d0
00003F8A 1400                       		move.b	d0,d2
00003F8C E808                       		lsr.b	#4,d0
00003F8E 6100 0000                  		bsr.w	LevSel_ChgSnd
00003F92 1002                       		move.b	d2,d0
00003F94 6100 0000                  		bsr.w	LevSel_ChgSnd
00003F98 4E75                       		rts	
00003F9A                            ; End of function LevSelTextLoad
00003F9A                            
00003F9A                            
00003F9A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003F9A                            
00003F9A                            
00003F9A                            LevSel_ChgSnd:				; XREF: LevSelTextLoad
00003F9A 0240 000F                  		andi.w	#$F,d0
00003F9E 0C00 000A                  		cmpi.b	#$A,d0
00003FA2 6500                       		bcs.s	loc_3580
00003FA4 5E00                       		addi.b	#7,d0
00003FA6                            
00003FA6                            loc_3580:
00003FA6 D043                       		add.w	d3,d0
00003FA8 3C80                       		move.w	d0,(a6)
00003FAA 4E75                       		rts	
00003FAC                            ; End of function LevSel_ChgSnd
00003FAC                            
00003FAC                            
00003FAC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003FAC                            
00003FAC                            
00003FAC                            LevSel_ChgLine:				; XREF: LevSelTextLoad
00003FAC 7417                       		moveq	#$17,d2		; number of characters per line
00003FAE                            
00003FAE                            loc_3588:
00003FAE 7000                       		moveq	#0,d0
00003FB0 1019                       		move.b	(a1)+,d0
00003FB2 6A00                       		bpl.s	loc_3598
00003FB4 3CBC 0000                  		move.w	#0,(a6)
00003FB8 51CA FFF4                  		dbf	d2,loc_3588
00003FBC 4E75                       		rts	
00003FBE                            ; ===========================================================================
00003FBE                            
00003FBE                            loc_3598:				; XREF: LevSel_ChgLine
00003FBE D043                       		add.w	d3,d0
00003FC0 3C80                       		move.w	d0,(a6)
00003FC2 51CA FFEA                  		dbf	d2,loc_3588
00003FC6 4E75                       		rts	
00003FC8                            ; End of function LevSel_ChgLine
00003FC8                            
00003FC8                            ; ===========================================================================
00003FC8                            ; ---------------------------------------------------------------------------
00003FC8                            ; Level	select menu text
00003FC8                            ; ---------------------------------------------------------------------------
00003FC8                            LevelMenuText:	incbin	misc\menutext.bin
000041C0                            		even
000041C0                            ; ---------------------------------------------------------------------------
000041C0                            ; Music	playlist
000041C0                            ; ---------------------------------------------------------------------------
000041C0                            MusicList1:	incbin	misc\muslist1.bin
000041C6                            		even
000041C6                            MusicList2:	incbin	misc\muslist2.bin
000041CC                            		even
000041CC                            MusicList3:	incbin	misc\muslist3.bin
000041D2                            		even
000041D2                            MusicList4:	incbin	misc\muslist4.bin
000041D8                            		even
000041D8                            ; ===========================================================================
000041D8                            
000041D8                            ; ---------------------------------------------------------------------------
000041D8                            ; Level
000041D8                            ; ---------------------------------------------------------------------------
000041D8                            
000041D8                            Level:					; XREF: GameModeArray
000041D8 08F8 0007 F600             		bset	#7,($FFFFF600).w ; add $80 to screen mode (for pre level sequence)
000041DE 4A78 FFF0                  		tst.w	($FFFFFFF0).w
000041E2 6B00                       		bmi.s	loc_37B6
000041E4 103C 00E0                  		move.b	#$E0,d0
000041E8 6100 D28C                  		bsr.w	PlaySound_Special ; fade out music
000041EC                            
000041EC                            loc_37B6:
000041EC 6100 D55A                  		bsr.w	ClearPLC
000041F0 6100 DF8E                  		bsr.w	Pal_FadeFrom
000041F4 4A78 FFF0                  		tst.w	($FFFFFFF0).w
000041F8 6B00                       		bmi.s	Level_ClrRam
000041FA 46FC 2700                  		move	#$2700,sr
000041FE 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
00004208 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
0000420E 6100 D39A                  		bsr.w	NemDec
00004212 46FC 2300                  		move	#$2300,sr
00004216 7000                       		moveq	#0,d0
00004218 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000421C E948                       		lsl.w	#4,d0
0000421E 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2
00004224 45F2 0000                  		lea	(a2,d0.w),a2
00004228 7000                       		moveq	#0,d0
0000422A 1012                       		move.b	(a2),d0
0000422C 6700                       		beq.s	loc_37FC
0000422E 6100 D4BA                  		bsr.w	LoadPLC		; load level patterns
00004232                            
00004232                            loc_37FC:
00004232 7001                       		moveq	#1,d0
00004234 6100 D4B4                  		bsr.w	LoadPLC		; load standard	patterns
00004238                            
00004238                            Level_ClrRam:
00004238 43F8 D000                  		lea	($FFFFD000).w,a1
0000423C 7000                       		moveq	#0,d0
0000423E 323C 07FF                  		move.w	#$7FF,d1
00004242                            
00004242                            Level_ClrObjRam:
00004242 22C0                       		move.l	d0,(a1)+
00004244 51C9 FFFC                  		dbf	d1,Level_ClrObjRam ; clear object RAM
00004248                            
00004248 43F8 F628                  		lea	($FFFFF628).w,a1
0000424C 7000                       		moveq	#0,d0
0000424E 323C 0015                  		move.w	#$15,d1
00004252                            
00004252                            Level_ClrVars:
00004252 22C0                       		move.l	d0,(a1)+
00004254 51C9 FFFC                  		dbf	d1,Level_ClrVars ; clear misc variables
00004258                            
00004258 43F8 F700                  		lea	($FFFFF700).w,a1
0000425C 7000                       		moveq	#0,d0
0000425E 323C 003F                  		move.w	#$3F,d1
00004262                            
00004262                            Level_ClrVars2:
00004262 22C0                       		move.l	d0,(a1)+
00004264 51C9 FFFC                  		dbf	d1,Level_ClrVars2 ; clear misc variables
00004268                            
00004268 43F8 FE60                  		lea	($FFFFFE60).w,a1
0000426C 7000                       		moveq	#0,d0
0000426E 323C 0047                  		move.w	#$47,d1
00004272                            
00004272                            Level_ClrVars3:
00004272 22C0                       		move.l	d0,(a1)+
00004274 51C9 FFFC                  		dbf	d1,Level_ClrVars3 ; clear object variables
00004278                            
00004278 46FC 2700                  		move	#$2700,sr
0000427C 6100 D102                  		bsr.w	ClearScreen
00004280 4DF9 00C0 0004             		lea	($C00004).l,a6
00004286 3CBC 8B03                  		move.w	#$8B03,(a6)
0000428A 3CBC 8230                  		move.w	#$8230,(a6)
0000428E 3CBC 8407                  		move.w	#$8407,(a6)
00004292 3CBC 857C                  		move.w	#$857C,(a6)
00004296 3CBC 9001                  		move.w	#$9001,(a6)
0000429A 3CBC 8004                  		move.w	#$8004,(a6)
0000429E 3CBC 8720                  		move.w	#$8720,(a6)
000042A2 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
000042A8 3CB8 F624                  		move.w	($FFFFF624).w,(a6)
000042AC 4278 C800                  		clr.w	($FFFFC800).w
000042B0 21FC FFFF C800 C8FC        		move.l	#$FFFFC800,($FFFFC8FC).w
000042B8 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
000042BE 6600                       		bne.s	Level_LoadPal	; if not, branch
000042C0 3CBC 8014                  		move.w	#$8014,(a6)
000042C4 7000                       		moveq	#0,d0
000042C6 1038 FE11                  		move.b	($FFFFFE11).w,d0
000042CA D040                       		add.w	d0,d0
000042CC 43F9 0000 0000             		lea	(WaterHeight).l,a1 ; load water	height array
000042D2 3031 0000                  		move.w	(a1,d0.w),d0
000042D6 31C0 F646                  		move.w	d0,($FFFFF646).w ; set water heights
000042DA 31C0 F648                  		move.w	d0,($FFFFF648).w
000042DE 31C0 F64A                  		move.w	d0,($FFFFF64A).w
000042E2 4238 F64D                  		clr.b	($FFFFF64D).w	; clear	water routine counter
000042E6 4238 F64E                  		clr.b	($FFFFF64E).w	; clear	water movement
000042EA 11FC 0001 F64C             		move.b	#1,($FFFFF64C).w ; enable water
000042F0                            
000042F0                            Level_LoadPal:
000042F0 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
000042F6 46FC 2300                  		move	#$2300,sr
000042FA 7003                       		moveq	#3,d0
000042FC 6100 E16C                  		bsr.w	PalLoad2	; load Sonic's pallet line
00004300 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
00004306 6600                       		bne.s	Level_GetBgm	; if not, branch
00004308 700F                       		moveq	#$F,d0		; pallet number	$0F (LZ)
0000430A 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; is act number 3?
00004310 6600                       		bne.s	Level_WaterPal	; if not, branch
00004312 7010                       		moveq	#$10,d0		; pallet number	$10 (SBZ3)
00004314                            
00004314                            Level_WaterPal:
00004314 6100 E18C                  		bsr.w	PalLoad3_Water	; load underwater pallet (see d0)
00004318 4A38 FE30                  		tst.b	($FFFFFE30).w
0000431C 6700                       		beq.s	Level_GetBgm
0000431E 11F8 FE53 F64E             		move.b	($FFFFFE53).w,($FFFFF64E).w
00004324                            
00004324                            ; NineKode begins here - How to play different songs on different acts
00004324                             
00004324                            Level_GetBgm:
00004324 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00004328 6B00 0000                  		bmi.w	loc_3946	; change from bmi.s to bmi.w or you'll get an error
0000432C 7000                       		moveq	#0,d0
0000432E 1038 FE10                  		move.b	($FFFFFE10).w,d0
00004332                             
00004332 0C38 0000 FE11             		cmpi.b	#$0,($FFFFFE11).w	; is this act 1?
00004338 6600                       		bne.s	Level_GetBgm2	; if not, branch
0000433A 43F9 0000 41C0             		lea	(MusicList1).l,a1	; load Music Playlist for Acts 1
00004340 6000                       		bra.s	Level_PlayBgm	; go to PlayBgm
00004342                             
00004342                            Level_GetBgm2:
00004342 0C38 0001 FE11             		cmpi.b	#$1,($FFFFFE11).w	; is this act 2?
00004348 6600                       		bne.s	Level_GetBgm3	; if not, branch
0000434A 43F9 0000 41C6             		lea	(MusicList2).l,a1	; load Music Playlist for Acts 2
00004350 6000                       		bra.s	Level_PlayBgm	; go to PlayBgm
00004352                             
00004352                            Level_GetBgm3:
00004352 0C38 0002 FE11             		cmpi.b	#$2,($FFFFFE11).w	; is this act 3?
00004358 6600                       		bne.s	Level_GetBgm4	; if not, branch
0000435A 43F9 0000 41CC             		lea	(MusicList3).l,a1	; load Music Playlist for Acts 3
00004360 6000                       		bra.s	Level_PlayBgm	; go to PlayBgm
00004362                             
00004362                            Level_GetBgm4:
00004362 0C38 0003 FE11             		cmpi.b	#$3,($FFFFFE11).w	; is this act 4?
00004368 6600                       		bne.s	Level_PlayBgm	; if not, branch
0000436A 43F9 0000 41D2             		lea	(MusicList4).l,a1	; load Music Playlist for Acts 4
00004370                             
00004370                            Level_PlayBgm:
00004370 1031 0000                  		move.b	(a1,d0.w),d0	; get d0-th entry from the playlist
00004374 6100 D0FA                  		bsr.w	PlaySound	; play music
00004378 11FC 0034 D080             		move.b	#$34,($FFFFD080).w ; load title	card object
0000437E                             
0000437E                            ; NineKode ends here
0000437E                            
0000437E                            Level_TtlCard:
0000437E 11FC 000C F62A             		move.b	#$C,($FFFFF62A).w
00004384 6100 F01C                  		bsr.w	DelayProgram
00004388 4EB9 0000 0000             		jsr	ObjectsLoad
0000438E 4EB9 0000 0000             		jsr	BuildSprites
00004394 6100 D3C0                  		bsr.w	RunPLC_RAM
00004398 3038 D108                  		move.w	($FFFFD108).w,d0
0000439C B078 D130                  		cmp.w	($FFFFD130).w,d0 ; has title card sequence finished?
000043A0 66DC                       		bne.s	Level_TtlCard	; if not, branch
000043A2 4AB8 F680                  		tst.l	($FFFFF680).w	; are there any	items in the pattern load cue?
000043A6 66D6                       		bne.s	Level_TtlCard	; if yes, branch
000043A8 4EB9 0000 0000             		jsr	Hud_Base
000043AE                            
000043AE                            loc_3946:
000043AE 7003                       		moveq	#3,d0
000043B0 6100 E07C                  		bsr.w	PalLoad1	; load Sonic's pallet line
000043B4 6100 0000                  		bsr.w	LevelSizeLoad
000043B8 6100 0000                  		bsr.w	DeformBgLayer
000043BC 08F8 0002 F754             		bset	#2,($FFFFF754).w
000043C2 6100 0000                  		bsr.w	MainLoadBlockLoad ; load block mappings	and pallets
000043C6 6100 0000                  		bsr.w	LoadTilesFromStart
000043CA 4EB9 0000 0000             		jsr	FloorLog_Unk
000043D0 6100 0000                  		bsr.w	ColIndexLoad
000043D4 6100 0000                  		bsr.w	LZWaterEffects
000043D8 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
000043DE 4A78 FFF0                  		tst.w	($FFFFFFF0).w
000043E2 6B00                       		bmi.s	Level_ChkDebug
000043E4 11FC 0021 D040             		move.b	#$21,($FFFFD040).w ; load HUD object
000043EA                            
000043EA                            Level_ChkDebug:
000043EA 4A38 FFE2                  		tst.b	($FFFFFFE2).w	; has debug cheat been entered?
000043EE 6700                       		beq.s	Level_ChkWater	; if not, branch
000043F0 0838 0006 F604             		btst	#6,($FFFFF604).w ; is A	button pressed?
000043F6 6700                       		beq.s	Level_ChkWater	; if not, branch
000043F8 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
000043FE                            
000043FE                            Level_ChkWater:
000043FE 31FC 0000 F602             		move.w	#0,($FFFFF602).w
00004404 31FC 0000 F604             		move.w	#0,($FFFFF604).w
0000440A 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
00004410 6600                       		bne.s	Level_LoadObj	; if not, branch
00004412 11FC 001B D780             		move.b	#$1B,($FFFFD780).w ; load water	surface	object
00004418 31FC 0060 D788             		move.w	#$60,($FFFFD788).w
0000441E 11FC 001B D7C0             		move.b	#$1B,($FFFFD7C0).w
00004424 31FC 0120 D7C8             		move.w	#$120,($FFFFD7C8).w
0000442A                            
0000442A                            Level_LoadObj:
0000442A 4EB9 0000 0000             		jsr	ObjPosLoad
00004430 4EB9 0000 0000             		jsr	ObjectsLoad
00004436 4EB9 0000 0000             		jsr	BuildSprites
0000443C 7000                       		moveq	#0,d0
0000443E 4A38 FE30                  		tst.b	($FFFFFE30).w	; are you starting from	a lamppost?
00004442 6600                       		bne.s	loc_39E8	; if yes, branch
00004444 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00004448 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
0000444C 11C0 FEBF                          move.b  d0,($FFFFFEBF).w ; value used to increment centiseconds
00004450 11C0 FE1B                  		move.b	d0,($FFFFFE1B).w ; clear lives counter
00004454                            
00004454                            loc_39E8:
00004454 11C0 FE1A                  		move.b	d0,($FFFFFE1A).w
00004458 11C0 FE2C                  		move.b	d0,($FFFFFE2C).w ; clear shield
0000445C 11C0 FE2D                  		move.b	d0,($FFFFFE2D).w ; clear invincibility
00004460 11C0 FE2E                  		move.b	d0,($FFFFFE2E).w ; clear speed shoes
00004464 11C0 FE2F                  		move.b	d0,($FFFFFE2F).w
00004468 31C0 FE08                  		move.w	d0,($FFFFFE08).w
0000446C 31C0 FE02                  		move.w	d0,($FFFFFE02).w
00004470 31C0 FE04                  		move.w	d0,($FFFFFE04).w
00004474 6100 0000                  		bsr.w	OscillateNumInit
00004478 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; update score	counter
0000447E 11FC 0001 FE1D             		move.b	#1,($FFFFFE1D).w ; update rings	counter
00004484 31FC 0000 F790             		move.w	#0,($FFFFF790).w
0000448A 43F9 0000 0000             		lea	(Demo_Index).l,a1 ; load demo data
00004490 7000                       		moveq	#0,d0
00004492 1038 FE10                  		move.b	($FFFFFE10).w,d0
00004496 E548                       		lsl.w	#2,d0
00004498 2271 0000                  		movea.l	(a1,d0.w),a1
0000449C 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
000044A0 6A00                       		bpl.s	Level_Demo	; if yes, branch
000044A2 43F9 0000 0000             		lea	(Demo_EndIndex).l,a1 ; load ending demo	data
000044A8 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
000044AC 5340                       		subq.w	#1,d0
000044AE E548                       		lsl.w	#2,d0
000044B0 2271 0000                  		movea.l	(a1,d0.w),a1
000044B4                            
000044B4                            Level_Demo:
000044B4 11E9 0001 F792             		move.b	1(a1),($FFFFF792).w ; load key press duration
000044BA 5338 F792                  		subq.b	#1,($FFFFF792).w ; subtract 1 from duration
000044BE 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
000044C4 4A78 FFF0                  		tst.w	($FFFFFFF0).w
000044C8 6A00                       		bpl.s	Level_ChkWaterPal
000044CA 31FC 021C F614             		move.w	#540,($FFFFF614).w
000044D0 0C78 0004 FFF4             		cmpi.w	#4,($FFFFFFF4).w
000044D6 6600                       		bne.s	Level_ChkWaterPal
000044D8 31FC 01FE F614             		move.w	#510,($FFFFF614).w
000044DE                            
000044DE                            Level_ChkWaterPal:
000044DE 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ/SBZ3?
000044E4 6600                       		bne.s	Level_Delay	; if not, branch
000044E6 700B                       		moveq	#$B,d0		; pallet $0B (LZ underwater)
000044E8 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; is level SBZ3?
000044EE 6600                       		bne.s	Level_WaterPal2	; if not, branch
000044F0 700D                       		moveq	#$D,d0		; pallet $0D (SBZ3 underwater)
000044F2                            
000044F2                            Level_WaterPal2:
000044F2 6100 DFEA                  		bsr.w	PalLoad4_Water
000044F6                            
000044F6                            Level_Delay:
000044F6 323C 0003                  		move.w	#3,d1
000044FA                            
000044FA                            Level_DelayLoop:
000044FA 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
00004500 6100 EEA0                  		bsr.w	DelayProgram
00004504 51C9 FFF4                  		dbf	d1,Level_DelayLoop
00004508                            
00004508 31FC 202F F626             		move.w	#$202F,($FFFFF626).w
0000450E 6100 DBC0                  		bsr.w	Pal_FadeTo2
00004512 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00004516 6B00                       		bmi.s	Level_ClrCardArt
00004518 5438 D0A4                  		addq.b	#2,($FFFFD0A4).w ; make	title card move
0000451C 5838 D0E4                  		addq.b	#4,($FFFFD0E4).w
00004520 5838 D124                  		addq.b	#4,($FFFFD124).w
00004524 5838 D164                  		addq.b	#4,($FFFFD164).w
00004528 6000                       		bra.s	Level_StartGame
0000452A                            ; ===========================================================================
0000452A                            
0000452A                            Level_ClrCardArt:
0000452A 7002                       		moveq	#2,d0
0000452C 4EB9 0000 16EA             		jsr	(LoadPLC).l	; load explosion patterns
00004532 7000                       		moveq	#0,d0
00004534 1038 FE10                  		move.b	($FFFFFE10).w,d0
00004538 0640 0015                  		addi.w	#$15,d0
0000453C 4EB9 0000 16EA             		jsr	(LoadPLC).l	; load animal patterns (level no. + $15)
00004542                            
00004542                            Level_StartGame:
00004542 11FC 0001 FE1E                     move.b    #1,($FFFFFE1E).w ; update time counter
00004548 08B8 0007 F600                     bclr    #7,($FFFFF600).w ; subtract 80 from screen mode
0000454E                            
0000454E                            ; ---------------------------------------------------------------------------
0000454E                            ; Main level loop (when	all title card and loading sequences are finished)
0000454E                            ; ---------------------------------------------------------------------------
0000454E                            
0000454E                            Level_MainLoop:
0000454E 6100 CF32                  		bsr.w	PauseGame
00004552 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
00004558 6100 EE48                  		bsr.w	DelayProgram
0000455C 5278 FE04                  		addq.w	#1,($FFFFFE04).w ; add 1 to level timer
00004560 6100 0000                  		bsr.w	MoveSonicInDemo
00004564 6100 0000                  		bsr.w	LZWaterEffects
00004568 4EB9 0000 0000             		jsr	ObjectsLoad
0000456E 4A78 FE08                  		tst.w	($FFFFFE08).w
00004572 6600                       		bne.s	loc_3B10
00004574 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000457A 6400                       		bcc.s	loc_3B14
0000457C                            
0000457C                            loc_3B10:
0000457C 6100 0000                  		bsr.w	DeformBgLayer
00004580                            
00004580                            loc_3B14:
00004580 4EB9 0000 0000             		jsr	BuildSprites
00004586 4EB9 0000 0000             		jsr	ObjPosLoad
0000458C 6100 D518                  		bsr.w	PalCycle_Load
00004590 6100 D1C4                  		bsr.w	RunPLC_RAM
00004594 6100 0000                  		bsr.w	OscillateNumDo
00004598 6100 0000                  		bsr.w	ChangeRingFrame
0000459C 6100 0000                  		bsr.w	SignpostArtLoad
000045A0 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w
000045A6 6700                       		beq.s	Level_ChkDemo	; if screen mode is 08 (demo), branch
000045A8 4A78 FE02                  		tst.w	($FFFFFE02).w	; is the level set to restart?
000045AC 6600 FC2A                  		bne.w	Level		; if yes, branch
000045B0 0C38 000C F600             		cmpi.b	#$C,($FFFFF600).w
000045B6 6700 FF96                  		beq.w	Level_MainLoop	; if screen mode is $0C	(level), branch
000045BA 4E75                       		rts	
000045BC                            ; ===========================================================================
000045BC                            
000045BC                            Level_ChkDemo:				; XREF: Level_MainLoop
000045BC 4A78 FE02                  		tst.w	($FFFFFE02).w	; is level set to restart?
000045C0 6600                       		bne.s	Level_EndDemo	; if yes, branch
000045C2 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
000045C6 6700                       		beq.s	Level_EndDemo	; if not, branch
000045C8 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w
000045CE 6700 FF7E                  		beq.w	Level_MainLoop	; if screen mode is 08 (demo), branch
000045D2 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
000045D8 4E75                       		rts	
000045DA                            ; ===========================================================================
000045DA                            
000045DA                            Level_EndDemo:				; XREF: Level_ChkDemo
000045DA 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w ; is screen mode 08 (demo)?
000045E0 6600                       		bne.s	loc_3B88	; if not, branch
000045E2 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
000045E8 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
000045EC 6A00                       		bpl.s	loc_3B88	; if yes, branch
000045EE 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; go	to credits
000045F4                            
000045F4                            loc_3B88:
000045F4 31FC 003C F614             		move.w	#$3C,($FFFFF614).w
000045FA 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00004600 4278 F794                  		clr.w	($FFFFF794).w
00004604                            
00004604                            loc_3B98:
00004604 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
0000460A 6100 ED96                  		bsr.w	DelayProgram
0000460E 6100 0000                  		bsr.w	MoveSonicInDemo
00004612 4EB9 0000 0000             		jsr	ObjectsLoad
00004618 4EB9 0000 0000             		jsr	BuildSprites
0000461E 4EB9 0000 0000             		jsr	ObjPosLoad
00004624 5378 F794                  		subq.w	#1,($FFFFF794).w
00004628 6A00                       		bpl.s	loc_3BC8
0000462A 31FC 0002 F794             		move.w	#2,($FFFFF794).w
00004630 6100 DB74                  		bsr.w	Pal_FadeOut
00004634                            
00004634                            loc_3BC8:
00004634 4A78 F614                  		tst.w	($FFFFF614).w
00004638 66CA                       		bne.s	loc_3B98
0000463A 4E75                       		rts	
0000463C                            ; ===========================================================================
0000463C                            ; ---------------------------------------------------------------------------
0000463C                            ; Subroutine to	do special water effects in Labyrinth Zone
0000463C                            ; ---------------------------------------------------------------------------
0000463C                            
0000463C                            LZWaterEffects:				; XREF: Level
0000463C 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00004642 6600                       		bne.s	locret_3C28	; if not, branch
00004644 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000464A 6400                       		bcc.s	LZMoveWater
0000464C 6100 0000                  		bsr.w	LZWindTunnels
00004650 6100 0000                  		bsr.w	LZWaterSlides
00004654 6100 0000                  		bsr.w	LZDynamicWater
00004658                            
00004658                            LZMoveWater:
00004658 4238 F64E                  		clr.b	($FFFFF64E).w
0000465C 7000                       		moveq	#0,d0
0000465E 1038 FE60                  		move.b	($FFFFFE60).w,d0
00004662 E248                       		lsr.w	#1,d0
00004664 D078 F648                  		add.w	($FFFFF648).w,d0
00004668 31C0 F646                  		move.w	d0,($FFFFF646).w
0000466C 3038 F646                  		move.w	($FFFFF646).w,d0
00004670 9078 F704                  		sub.w	($FFFFF704).w,d0
00004674 6400                       		bcc.s	loc_3C1A
00004676 4A40                       		tst.w	d0
00004678 6A00                       		bpl.s	loc_3C1A
0000467A 11FC 00DF F625             		move.b	#-$21,($FFFFF625).w
00004680 11FC 0001 F64E             		move.b	#1,($FFFFF64E).w
00004686                            
00004686                            loc_3C1A:
00004686 0C40 00DF                  		cmpi.w	#$DF,d0
0000468A 6500                       		bcs.s	loc_3C24
0000468C 303C 00DF                  		move.w	#$DF,d0
00004690                            
00004690                            loc_3C24:
00004690 11C0 F625                  		move.b	d0,($FFFFF625).w
00004694                            
00004694                            locret_3C28:
00004694 4E75                       		rts	
00004696                            ; ===========================================================================
00004696                            ; ---------------------------------------------------------------------------
00004696                            ; Labyrinth default water heights
00004696                            ; ---------------------------------------------------------------------------
00004696                            WaterHeight:	incbin	misc\lz_heigh.bin
0000469E                            		even
0000469E                            
0000469E                            ; ===========================================================================
0000469E                            
0000469E                            ; ---------------------------------------------------------------------------
0000469E                            ; Labyrinth dynamic water routines
0000469E                            ; ---------------------------------------------------------------------------
0000469E                            
0000469E                            LZDynamicWater:				; XREF: LZWaterEffects
0000469E 7000                       		moveq	#0,d0
000046A0 1038 FE11                  		move.b	($FFFFFE11).w,d0
000046A4 D040                       		add.w	d0,d0
000046A6 303B 0000                  		move.w	DynWater_Index(pc,d0.w),d0
000046AA 4EBB 0000                  		jsr	DynWater_Index(pc,d0.w)
000046AE 7200                       		moveq	#0,d1
000046B0 1238 F64C                  		move.b	($FFFFF64C).w,d1
000046B4 3038 F64A                  		move.w	($FFFFF64A).w,d0
000046B8 9078 F648                  		sub.w	($FFFFF648).w,d0
000046BC 6700                       		beq.s	locret_3C5A
000046BE 6400                       		bcc.s	loc_3C56
000046C0 4441                       		neg.w	d1
000046C2                            
000046C2                            loc_3C56:
000046C2 D378 F648                  		add.w	d1,($FFFFF648).w
000046C6                            
000046C6                            locret_3C5A:
000046C6 4E75                       		rts	
000046C8                            ; ===========================================================================
000046C8 0000                       DynWater_Index:	dc.w DynWater_LZ1-DynWater_Index
000046CA 0000                       		dc.w DynWater_LZ2-DynWater_Index
000046CC 0000                       		dc.w DynWater_LZ3-DynWater_Index
000046CE 0000                       		dc.w DynWater_SBZ3-DynWater_Index
000046D0                            ; ===========================================================================
000046D0                            
000046D0                            DynWater_LZ1:				; XREF: DynWater_Index
000046D0 3038 F700                  		move.w	($FFFFF700).w,d0
000046D4 1438 F64D                  		move.b	($FFFFF64D).w,d2
000046D8 6600                       		bne.s	loc_3CD0
000046DA 323C 00B8                  		move.w	#$B8,d1
000046DE 0C40 0600                  		cmpi.w	#$600,d0
000046E2 6500                       		bcs.s	loc_3CB4
000046E4 323C 0108                  		move.w	#$108,d1
000046E8 0C78 0200 D00C             		cmpi.w	#$200,($FFFFD00C).w
000046EE 6500                       		bcs.s	loc_3CBA
000046F0 0C40 0C00                  		cmpi.w	#$C00,d0
000046F4 6500                       		bcs.s	loc_3CB4
000046F6 323C 0318                  		move.w	#$318,d1
000046FA 0C40 1080                  		cmpi.w	#$1080,d0
000046FE 6500                       		bcs.s	loc_3CB4
00004700 11FC 0080 F7E5             		move.b	#-$80,($FFFFF7E5).w
00004706 323C 05C8                  		move.w	#$5C8,d1
0000470A 0C40 1380                  		cmpi.w	#$1380,d0
0000470E 6500                       		bcs.s	loc_3CB4
00004710 323C 03A8                  		move.w	#$3A8,d1
00004714 B278 F648                  		cmp.w	($FFFFF648).w,d1
00004718 6600                       		bne.s	loc_3CB4
0000471A 11FC 0001 F64D             		move.b	#1,($FFFFF64D).w
00004720                            
00004720                            loc_3CB4:
00004720 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00004724 4E75                       		rts	
00004726                            ; ===========================================================================
00004726                            
00004726                            loc_3CBA:				; XREF: DynWater_LZ1
00004726 0C40 0C80                  		cmpi.w	#$C80,d0
0000472A 65F4                       		bcs.s	loc_3CB4
0000472C 323C 00E8                  		move.w	#$E8,d1
00004730 0C40 1500                  		cmpi.w	#$1500,d0
00004734 65EA                       		bcs.s	loc_3CB4
00004736 323C 0108                  		move.w	#$108,d1
0000473A 60E4                       		bra.s	loc_3CB4
0000473C                            ; ===========================================================================
0000473C                            
0000473C                            loc_3CD0:				; XREF: DynWater_LZ1
0000473C 5302                       		subq.b	#1,d2
0000473E 6600                       		bne.s	locret_3CF4
00004740 0C78 02E0 D00C             		cmpi.w	#$2E0,($FFFFD00C).w
00004746 6400                       		bcc.s	locret_3CF4
00004748 323C 03A8                  		move.w	#$3A8,d1
0000474C 0C40 1300                  		cmpi.w	#$1300,d0
00004750 6500                       		bcs.s	loc_3CF0
00004752 323C 0108                  		move.w	#$108,d1
00004756 11FC 0002 F64D             		move.b	#2,($FFFFF64D).w
0000475C                            
0000475C                            loc_3CF0:
0000475C 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00004760                            
00004760                            locret_3CF4:
00004760 4E75                       		rts	
00004762                            ; ===========================================================================
00004762                            
00004762                            DynWater_LZ2:				; XREF: DynWater_Index
00004762 3038 F700                  		move.w	($FFFFF700).w,d0
00004766 323C 0328                  		move.w	#$328,d1
0000476A 0C40 0500                  		cmpi.w	#$500,d0
0000476E 6500                       		bcs.s	loc_3D12
00004770 323C 03C8                  		move.w	#$3C8,d1
00004774 0C40 0B00                  		cmpi.w	#$B00,d0
00004778 6500                       		bcs.s	loc_3D12
0000477A 323C 0428                  		move.w	#$428,d1
0000477E                            
0000477E                            loc_3D12:
0000477E 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00004782 4E75                       		rts	
00004784                            ; ===========================================================================
00004784                            
00004784                            DynWater_LZ3:				; XREF: DynWater_Index
00004784 3038 F700                  		move.w	($FFFFF700).w,d0
00004788 1438 F64D                  		move.b	($FFFFF64D).w,d2
0000478C 6600                       		bne.s	loc_3D5E
0000478E 323C 0900                  		move.w	#$900,d1
00004792 0C40 0600                  		cmpi.w	#$600,d0
00004796 6500                       		bcs.s	loc_3D54
00004798 0C78 03C0 D00C             		cmpi.w	#$3C0,($FFFFD00C).w
0000479E 6500                       		bcs.s	loc_3D54
000047A0 0C78 0600 D00C             		cmpi.w	#$600,($FFFFD00C).w
000047A6 6400                       		bcc.s	loc_3D54
000047A8 323C 04C8                  		move.w	#$4C8,d1
000047AC 11FC 004B A506             		move.b	#$4B,($FFFFA506).w ; change level layout
000047B2 11FC 0001 F64D             		move.b	#1,($FFFFF64D).w
000047B8 303C 00B7                  		move.w	#$B7,d0
000047BC 6100 CCB8                  		bsr.w	PlaySound_Special ; play sound $B7 (rumbling)
000047C0                            
000047C0                            loc_3D54:
000047C0 31C1 F64A                  		move.w	d1,($FFFFF64A).w
000047C4 31C1 F648                  		move.w	d1,($FFFFF648).w
000047C8 4E75                       		rts	
000047CA                            ; ===========================================================================
000047CA                            
000047CA                            loc_3D5E:				; XREF: DynWater_LZ3
000047CA 5302                       		subq.b	#1,d2
000047CC 6600                       		bne.s	loc_3DA8
000047CE 323C 04C8                  		move.w	#$4C8,d1
000047D2 0C40 0770                  		cmpi.w	#$770,d0
000047D6 6500                       		bcs.s	loc_3DA2
000047D8 323C 0308                  		move.w	#$308,d1
000047DC 0C40 1400                  		cmpi.w	#$1400,d0
000047E0 6500                       		bcs.s	loc_3DA2
000047E2 0C78 0508 F64A             		cmpi.w	#$508,($FFFFF64A).w
000047E8 6700                       		beq.s	loc_3D8E
000047EA 0C78 0600 D00C             		cmpi.w	#$600,($FFFFD00C).w
000047F0 6400                       		bcc.s	loc_3D8E
000047F2 0C78 0280 D00C             		cmpi.w	#$280,($FFFFD00C).w
000047F8 6400                       		bcc.s	loc_3DA2
000047FA                            
000047FA                            loc_3D8E:
000047FA 323C 0508                  		move.w	#$508,d1
000047FE 31C1 F648                  		move.w	d1,($FFFFF648).w
00004802 0C40 1770                  		cmpi.w	#$1770,d0
00004806 6500                       		bcs.s	loc_3DA2
00004808 11FC 0002 F64D             		move.b	#2,($FFFFF64D).w
0000480E                            
0000480E                            loc_3DA2:
0000480E 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00004812 4E75                       		rts	
00004814                            ; ===========================================================================
00004814                            
00004814                            loc_3DA8:
00004814 5302                       		subq.b	#1,d2
00004816 6600                       		bne.s	loc_3DD2
00004818 323C 0508                  		move.w	#$508,d1
0000481C 0C40 1860                  		cmpi.w	#$1860,d0
00004820 6500                       		bcs.s	loc_3DCC
00004822 323C 0188                  		move.w	#$188,d1
00004826 0C40 1AF0                  		cmpi.w	#$1AF0,d0
0000482A 6400                       		bcc.s	loc_3DC6
0000482C B278 F648                  		cmp.w	($FFFFF648).w,d1
00004830 6600                       		bne.s	loc_3DCC
00004832                            
00004832                            loc_3DC6:
00004832 11FC 0003 F64D             		move.b	#3,($FFFFF64D).w
00004838                            
00004838                            loc_3DCC:
00004838 31C1 F64A                  		move.w	d1,($FFFFF64A).w
0000483C 4E75                       		rts	
0000483E                            ; ===========================================================================
0000483E                            
0000483E                            loc_3DD2:
0000483E 5302                       		subq.b	#1,d2
00004840 6600                       		bne.s	loc_3E0E
00004842 323C 0188                  		move.w	#$188,d1
00004846 0C40 1AF0                  		cmpi.w	#$1AF0,d0
0000484A 6500                       		bcs.s	loc_3E04
0000484C 323C 0900                  		move.w	#$900,d1
00004850 0C40 1BC0                  		cmpi.w	#$1BC0,d0
00004854 6500                       		bcs.s	loc_3E04
00004856 11FC 0004 F64D             		move.b	#4,($FFFFF64D).w
0000485C 31FC 0608 F64A             		move.w	#$608,($FFFFF64A).w
00004862 31FC 07C0 F648             		move.w	#$7C0,($FFFFF648).w
00004868 11FC 0001 F7E8             		move.b	#1,($FFFFF7E8).w
0000486E 4E75                       		rts	
00004870                            ; ===========================================================================
00004870                            
00004870                            loc_3E04:
00004870 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00004874 31C1 F648                  		move.w	d1,($FFFFF648).w
00004878 4E75                       		rts	
0000487A                            ; ===========================================================================
0000487A                            
0000487A                            loc_3E0E:
0000487A 0C40 1E00                  		cmpi.w	#$1E00,d0
0000487E 6500                       		bcs.s	locret_3E1A
00004880 31FC 0128 F64A             		move.w	#$128,($FFFFF64A).w
00004886                            
00004886                            locret_3E1A:
00004886 4E75                       		rts	
00004888                            ; ===========================================================================
00004888                            
00004888                            DynWater_SBZ3:				; XREF: DynWater_Index
00004888 323C 0228                  		move.w	#$228,d1
0000488C 0C78 0F00 F700             		cmpi.w	#$F00,($FFFFF700).w
00004892 6500                       		bcs.s	loc_3E2C
00004894 323C 04C8                  		move.w	#$4C8,d1
00004898                            
00004898                            loc_3E2C:
00004898 31C1 F64A                  		move.w	d1,($FFFFF64A).w
0000489C 4E75                       		rts
0000489E                            
0000489E                            ; ---------------------------------------------------------------------------
0000489E                            ; Labyrinth Zone "wind tunnels"	subroutine
0000489E                            ; ---------------------------------------------------------------------------
0000489E                            
0000489E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000489E                            
0000489E                            
0000489E                            LZWindTunnels:				; XREF: LZWaterEffects
0000489E 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
000048A2 6600 0000                  		bne.w	locret_3F0A	; if yes, branch
000048A6 45F9 0000 0000             		lea	(LZWind_Data).l,a2
000048AC 7000                       		moveq	#0,d0
000048AE 1038 FE11                  		move.b	($FFFFFE11).w,d0
000048B2 E748                       		lsl.w	#3,d0
000048B4 D4C0                       		adda.w	d0,a2
000048B6 7200                       		moveq	#0,d1
000048B8 4A38 FE11                  		tst.b	($FFFFFE11).w
000048BC 6600                       		bne.s	loc_3E56
000048BE 7201                       		moveq	#1,d1
000048C0 514A                       		subq.w	#8,a2
000048C2                            
000048C2                            loc_3E56:
000048C2 43F8 D000                  		lea	($FFFFD000).w,a1
000048C6                            
000048C6                            LZWind_Loop:
000048C6 3029 0008                  		move.w	8(a1),d0
000048CA B052                       		cmp.w	(a2),d0
000048CC 6500 0000                  		bcs.w	loc_3EF4
000048D0 B06A 0004                  		cmp.w	4(a2),d0
000048D4 6400 0000                  		bcc.w	loc_3EF4
000048D8 3429 000C                  		move.w	$C(a1),d2
000048DC B46A 0002                  		cmp.w	2(a2),d2
000048E0 6500                       		bcs.s	loc_3EF4
000048E2 B46A 0006                  		cmp.w	6(a2),d2
000048E6 6400                       		bcc.s	loc_3EF4
000048E8 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
000048EC 0200 003F                  		andi.b	#$3F,d0
000048F0 6600                       		bne.s	loc_3E90
000048F2 303C 00D0                  		move.w	#$D0,d0
000048F6 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play rushing water sound
000048FC                            
000048FC                            loc_3E90:
000048FC 4A38 F7C9                  		tst.b	($FFFFF7C9).w
00004900 6600 0000                  		bne.w	locret_3F0A
00004904 0C29 0004 0024             		cmpi.b	#4,$24(a1)
0000490A 6400                       		bcc.s	loc_3F06
0000490C 11FC 0001 F7C7             		move.b	#1,($FFFFF7C7).w
00004912 0440 0080                  		subi.w	#$80,d0
00004916 B052                       		cmp.w	(a2),d0
00004918 6400                       		bcc.s	LZWind_Move
0000491A 7002                       		moveq	#2,d0
0000491C 0C38 0001 FE11             		cmpi.b	#1,($FFFFFE11).w
00004922 6600                       		bne.s	loc_3EBA
00004924 4440                       		neg.w	d0
00004926                            
00004926                            loc_3EBA:
00004926 D169 000C                  		add.w	d0,$C(a1)
0000492A                            
0000492A                            LZWind_Move:
0000492A 5869 0008                  		addq.w	#4,8(a1)
0000492E 337C 0400 0010             		move.w	#$400,$10(a1)	; move Sonic horizontally
00004934 337C 0000 0012             		move.w	#0,$12(a1)
0000493A 137C 000F 001C             		move.b	#$F,$1C(a1)	; use floating animation
00004940 08E9 0001 0022             		bset	#1,$22(a1)
00004946 0838 0000 F602             		btst	#0,($FFFFF602).w ; is up pressed?
0000494C 6700                       		beq.s	LZWind_MoveDown	; if not, branch
0000494E 5369 000C                  		subq.w	#1,$C(a1)	; move Sonic up
00004952                            
00004952                            LZWind_MoveDown:
00004952 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
00004958 6700                       		beq.s	locret_3EF2	; if not, branch
0000495A 5269 000C                  		addq.w	#1,$C(a1)	; move Sonic down
0000495E                            
0000495E                            locret_3EF2:
0000495E 4E75                       		rts	
00004960                            ; ===========================================================================
00004960                            
00004960                            loc_3EF4:				; XREF: LZWindTunnels
00004960 504A                       		addq.w	#8,a2
00004962 51C9 FF62                  		dbf	d1,LZWind_Loop
00004966 4A38 F7C7                  		tst.b	($FFFFF7C7).w
0000496A 6700                       		beq.s	locret_3F0A
0000496C 137C 0000 001C             		move.b	#0,$1C(a1)
00004972                            
00004972                            loc_3F06:
00004972 4238 F7C7                  		clr.b	($FFFFF7C7).w
00004976                            
00004976                            locret_3F0A:
00004976 4E75                       		rts	
00004978                            ; End of function LZWindTunnels
00004978                            
00004978                            ; ===========================================================================
00004978 0A80 0300 0C10 0380        		dc.w $A80, $300, $C10, $380
00004980 0F80 0100 1410 0180 0460+  LZWind_Data:	dc.w $F80, $100, $1410,	$180, $460, $400, $710,	$480, $A20
00004992 0600 1610 06E0 0C80 0600+  		dc.w $600, $1610, $6E0,	$C80, $600, $13D0, $680
000049A0                            					; XREF: LZWindTunnels
000049A0                            		even
000049A0                            
000049A0                            ; ---------------------------------------------------------------------------
000049A0                            ; Labyrinth Zone water slide subroutine
000049A0                            ; ---------------------------------------------------------------------------
000049A0                            
000049A0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000049A0                            
000049A0                            
000049A0                            LZWaterSlides:				; XREF: LZWaterEffects
000049A0 43F8 D000                  		lea	($FFFFD000).w,a1
000049A4 0829 0001 0022             		btst	#1,$22(a1)
000049AA 6600                       		bne.s	loc_3F6A
000049AC 3029 000C                  		move.w	$C(a1),d0
000049B0 E248                       		lsr.w	#1,d0
000049B2 0240 0380                  		andi.w	#$380,d0
000049B6 1229 0008                  		move.b	8(a1),d1
000049BA 0241 007F                  		andi.w	#$7F,d1
000049BE D041                       		add.w	d1,d0
000049C0 45F8 A400                  		lea	($FFFFA400).w,a2
000049C4 1032 0000                  		move.b	(a2,d0.w),d0
000049C8 45FA 0000                  		lea	byte_3FCF(pc),a2
000049CC 7206                       		moveq	#6,d1
000049CE                            
000049CE                            loc_3F62:
000049CE B022                       		cmp.b	-(a2),d0
000049D0 57C9 FFFC                  		dbeq	d1,loc_3F62
000049D4 6700                       		beq.s	LZSlide_Move
000049D6                            
000049D6                            loc_3F6A:
000049D6 4A38 F7CA                  		tst.b	($FFFFF7CA).w
000049DA 6700                       		beq.s	locret_3F7A
000049DC 337C 0005 003E             		move.w	#5,$3E(a1)
000049E2 4238 F7CA                  		clr.b	($FFFFF7CA).w
000049E6                            
000049E6                            locret_3F7A:
000049E6 4E75                       		rts	
000049E8                            ; ===========================================================================
000049E8                            
000049E8                            LZSlide_Move:				; XREF: LZWaterSlides
000049E8 0C41 0003                  		cmpi.w	#3,d1
000049EC 6400                       		bcc.s	loc_3F84
000049EE 4E71                       		nop	
000049F0                            
000049F0                            loc_3F84:
000049F0 08A9 0000 0022             		bclr	#0,$22(a1)
000049F6 103B 1000                  		move.b	byte_3FC0(pc,d1.w),d0
000049FA 1340 0014                  		move.b	d0,$14(a1)
000049FE 6A00                       		bpl.s	loc_3F9A
00004A00 08E9 0000 0022             		bset	#0,$22(a1)
00004A06                            
00004A06                            loc_3F9A:
00004A06 4229 0015                  		clr.b	$15(a1)
00004A0A 137C 001B 001C             		move.b	#$1B,$1C(a1)	; use Sonic's "sliding" animation
00004A10 11FC 0001 F7CA             		move.b	#1,($FFFFF7CA).w ; lock	controls (except jumping)
00004A16 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00004A1A 0200 001F                  		andi.b	#$1F,d0
00004A1E 6600                       		bne.s	locret_3FBE
00004A20 303C 00D0                  		move.w	#$D0,d0
00004A24 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play water sound
00004A2A                            
00004A2A                            locret_3FBE:
00004A2A 4E75                       		rts	
00004A2C                            ; End of function LZWaterSlides
00004A2C                            
00004A2C                            ; ===========================================================================
00004A2C 0AF5 0AF6 F5F4 0B00 0207+  byte_3FC0:	dc.b $A, $F5, $A, $F6, $F5, $F4, $B, 0,	2, 7, 3, $4C, $4B, 8, 4
00004A3B 00                         byte_3FCF:	dc.b 0			; XREF: LZWaterSlides
00004A3C                            		even
00004A3C                            
00004A3C                            ; ---------------------------------------------------------------------------
00004A3C                            ; Subroutine to	move Sonic in demo mode
00004A3C                            ; ---------------------------------------------------------------------------
00004A3C                            
00004A3C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004A3C                            
00004A3C                            
00004A3C                            MoveSonicInDemo:			; XREF: Level_MainLoop; et al
00004A3C 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00004A40 6600                       		bne.s	MoveDemo_On	; if yes, branch
00004A42 4E75                       		rts	
00004A44                            ; ===========================================================================
00004A44                            
00004A44                            ; This is an unused subroutine for recording a demo
00004A44                            
00004A44                            MoveDemo_Record:
00004A44 43F9 0008 0000             		lea	($80000).l,a1
00004A4A 3038 F790                  		move.w	($FFFFF790).w,d0
00004A4E D2C0                       		adda.w	d0,a1
00004A50 1038 F604                  		move.b	($FFFFF604).w,d0
00004A54 B011                       		cmp.b	(a1),d0
00004A56 6600                       		bne.s	loc_3FFA
00004A58 5229 0001                  		addq.b	#1,1(a1)
00004A5C 0C29 00FF 0001             		cmpi.b	#$FF,1(a1)
00004A62 6700                       		beq.s	loc_3FFA
00004A64 4E75                       		rts	
00004A66                            ; ===========================================================================
00004A66                            
00004A66                            loc_3FFA:				; XREF: MoveDemo_Record
00004A66 1340 0002                  		move.b	d0,2(a1)
00004A6A 137C 0000 0003             		move.b	#0,3(a1)
00004A70 5478 F790                  		addq.w	#2,($FFFFF790).w
00004A74 0278 03FF F790             		andi.w	#$3FF,($FFFFF790).w
00004A7A 4E75                       		rts	
00004A7C                            ; ===========================================================================
00004A7C                            
00004A7C                            MoveDemo_On:				; XREF: MoveSonicInDemo
00004A7C 4A38 F604                  		tst.b	($FFFFF604).w
00004A80 6A00                       		bpl.s	loc_4022
00004A82 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00004A86 6B00                       		bmi.s	loc_4022
00004A88 11FC 0004 F600             		move.b	#4,($FFFFF600).w
00004A8E                            
00004A8E                            loc_4022:
00004A8E 43F9 0000 0000             		lea	(Demo_Index).l,a1
00004A94 7000                       		moveq	#0,d0
00004A96 1038 FE10                  		move.b	($FFFFFE10).w,d0
00004A9A 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w
00004AA0 6600                       		bne.s	loc_4038
00004AA2 7006                       		moveq	#6,d0
00004AA4                            
00004AA4                            loc_4038:
00004AA4 E548                       		lsl.w	#2,d0
00004AA6 2271 0000                  		movea.l	(a1,d0.w),a1
00004AAA 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00004AAE 6A00                       		bpl.s	loc_4056
00004AB0 43F9 0000 0000             		lea	(Demo_EndIndex).l,a1
00004AB6 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
00004ABA 5340                       		subq.w	#1,d0
00004ABC E548                       		lsl.w	#2,d0
00004ABE 2271 0000                  		movea.l	(a1,d0.w),a1
00004AC2                            
00004AC2                            loc_4056:
00004AC2 3038 F790                  		move.w	($FFFFF790).w,d0
00004AC6 D2C0                       		adda.w	d0,a1
00004AC8 1011                       		move.b	(a1),d0
00004ACA 41F8 F604                  		lea	($FFFFF604).w,a0
00004ACE 1200                       		move.b	d0,d1
00004AD0 1410                       		move.b	(a0),d2
00004AD2 B500                       		eor.b	d2,d0
00004AD4 10C1                       		move.b	d1,(a0)+
00004AD6 C001                       		and.b	d1,d0
00004AD8 10C0                       		move.b	d0,(a0)+
00004ADA 5338 F792                  		subq.b	#1,($FFFFF792).w
00004ADE 6400                       		bcc.s	locret_407E
00004AE0 11E9 0003 F792             		move.b	3(a1),($FFFFF792).w
00004AE6 5478 F790                  		addq.w	#2,($FFFFF790).w
00004AEA                            
00004AEA                            locret_407E:
00004AEA 4E75                       		rts	
00004AEC                            ; End of function MoveSonicInDemo
00004AEC                            
00004AEC                            ; ===========================================================================
00004AEC                            ; ---------------------------------------------------------------------------
00004AEC                            ; Demo sequence	pointers
00004AEC                            ; ---------------------------------------------------------------------------
00004AEC                            Demo_Index:
00004AEC                            	include "_inc\Demo pointers for intro.asm"
00004AEC                            ; ---------------------------------------------------------------------------
00004AEC                            ; Demo sequence	pointers
00004AEC                            ; ---------------------------------------------------------------------------
00004AEC 0000 0000                  	dc.l Demo_GHZ
00004AF0 0000 0000                  	dc.l Demo_GHZ
00004AF4 0000 0000                  	dc.l Demo_MZ
00004AF8 0000 0000                  	dc.l Demo_MZ
00004AFC 0000 0000                  	dc.l Demo_SYZ
00004B00 0000 0000                  	dc.l Demo_SYZ
00004B04 0000 0000                  	dc.l Demo_SS
00004B08 0000 0000                  	dc.l Demo_SS
00004B08 0000 0000                  	dc.l Demo_SS
00004B0C                            
00004B0C                            Demo_EndIndex:
00004B0C                            	include "_inc\Demo pointers for ending.asm"
00004B0C                            ; ---------------------------------------------------------------------------
00004B0C                            ; Demo (ending) sequence pointers
00004B0C                            ; ---------------------------------------------------------------------------
00004B0C 0000 0000                  	dc.l Demo_EndGHZ1
00004B10 0000 0000                  	dc.l Demo_EndMZ
00004B14 0000 0000                  	dc.l Demo_EndSYZ
00004B18 0000 0000                  	dc.l Demo_EndLZ
00004B1C 0000 0000                  	dc.l Demo_EndSLZ
00004B20 0000 0000                  	dc.l Demo_EndSBZ1
00004B24 0000 0000                  	dc.l Demo_EndSBZ2
00004B28 0000 0000                  	dc.l Demo_EndGHZ2
00004B28 0000 0000                  	dc.l Demo_EndGHZ2
00004B2C                            
00004B2C 008B 0837 0042 085C 006A+  		dc.b 0,	$8B, 8,	$37, 0,	$42, 8,	$5C, 0,	$6A, 8,	$5F, 0,	$2F, 8,	$2C
00004B3C 0021 0803 2830 0808 002E+  		dc.b 0,	$21, 8,	3, $28,	$30, 8,	8, 0, $2E, 8, $15, 0, $F, 8, $46
00004B4C 001A 08FF 08CA 0000 0000+  		dc.b 0,	$1A, 8,	$FF, 8,	$CA, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0
00004B5C                            		even
00004B5C                            
00004B5C                            ; ---------------------------------------------------------------------------
00004B5C                            ; Collision index loading subroutine
00004B5C                            ; ---------------------------------------------------------------------------
00004B5C                            
00004B5C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004B5C                            
00004B5C                            
00004B5C                            ColIndexLoad:				; XREF: Level
00004B5C 7000                       		moveq	#0,d0
00004B5E 1038 FE10                  		move.b	($FFFFFE10).w,d0
00004B62 E548                       		lsl.w	#2,d0
00004B64 21FB 0000 F796             		move.l	ColPointers(pc,d0.w),($FFFFF796).w
00004B6A 4E75                       		rts	
00004B6C                            ; End of function ColIndexLoad
00004B6C                            
00004B6C                            ; ===========================================================================
00004B6C                            ; ---------------------------------------------------------------------------
00004B6C                            ; Collision index pointers
00004B6C                            ; ---------------------------------------------------------------------------
00004B6C                            ColPointers:
00004B6C                            	include "_inc\Collision index pointers.asm"
00004B6C                            ; ---------------------------------------------------------------------------
00004B6C                            ; Collision index pointers
00004B6C                            ; ---------------------------------------------------------------------------
00004B6C 0000 0000                  	dc.l Col_GHZ
00004B70 0000 0000                  	dc.l Col_LZ
00004B74 0000 0000                  	dc.l Col_MZ
00004B78 0000 0000                  	dc.l Col_SLZ
00004B7C 0000 0000                  	dc.l Col_SYZ
00004B80 0000 0000                  	dc.l Col_SBZ
00004B80 0000 0000                  	dc.l Col_SBZ
00004B84                            
00004B84                            ; ---------------------------------------------------------------------------
00004B84                            ; Oscillating number subroutine
00004B84                            ; ---------------------------------------------------------------------------
00004B84                            
00004B84                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004B84                            
00004B84                            
00004B84                            OscillateNumInit:			; XREF: Level
00004B84 43F8 FE5E                  		lea	($FFFFFE5E).w,a1
00004B88 45F9 0000 0000             		lea	(Osc_Data).l,a2
00004B8E 7220                       		moveq	#$20,d1
00004B90                            
00004B90                            Osc_Loop:
00004B90 32DA                       		move.w	(a2)+,(a1)+
00004B92 51C9 FFFC                  		dbf	d1,Osc_Loop
00004B96 4E75                       		rts	
00004B98                            ; End of function OscillateNumInit
00004B98                            
00004B98                            ; ===========================================================================
00004B98 007C 0080                  Osc_Data:	dc.w $7C, $80		; baseline values
00004B9C 0000 0080                  		dc.w 0,	$80
00004BA0 0000 0080                  		dc.w 0,	$80
00004BA4 0000 0080                  		dc.w 0,	$80
00004BA8 0000 0080                  		dc.w 0,	$80
00004BAC 0000 0080                  		dc.w 0,	$80
00004BB0 0000 0080                  		dc.w 0,	$80
00004BB4 0000 0080                  		dc.w 0,	$80
00004BB8 0000 0080                  		dc.w 0,	$80
00004BBC 0000 50F0                  		dc.w 0,	$50F0
00004BC0 011E 2080                  		dc.w $11E, $2080
00004BC4 00B4 3080                  		dc.w $B4, $3080
00004BC8 010E 5080                  		dc.w $10E, $5080
00004BCC 01C2 7080                  		dc.w $1C2, $7080
00004BD0 0276 0080                  		dc.w $276, $80
00004BD4 0000 0080                  		dc.w 0,	$80
00004BD8 0000                       		dc.w 0
00004BDA                            		even
00004BDA                            
00004BDA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004BDA                            
00004BDA                            
00004BDA                            OscillateNumDo:				; XREF: Level
00004BDA 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00004BE0 6400                       		bcc.s	locret_41C4
00004BE2 43F8 FE5E                  		lea	($FFFFFE5E).w,a1
00004BE6 45F9 0000 0000             		lea	(Osc_Data2).l,a2
00004BEC 3619                       		move.w	(a1)+,d3
00004BEE 720F                       		moveq	#$F,d1
00004BF0                            
00004BF0                            loc_4184:
00004BF0 341A                       		move.w	(a2)+,d2
00004BF2 381A                       		move.w	(a2)+,d4
00004BF4 0303                       		btst	d1,d3
00004BF6 6600                       		bne.s	loc_41A4
00004BF8 3029 0002                  		move.w	2(a1),d0
00004BFC D042                       		add.w	d2,d0
00004BFE 3340 0002                  		move.w	d0,2(a1)
00004C02 D151                       		add.w	d0,0(a1)
00004C04 B811                       		cmp.b	0(a1),d4
00004C06 6200                       		bhi.s	loc_41BA
00004C08 03C3                       		bset	d1,d3
00004C0A 6000                       		bra.s	loc_41BA
00004C0C                            ; ===========================================================================
00004C0C                            
00004C0C                            loc_41A4:				; XREF: OscillateNumDo
00004C0C 3029 0002                  		move.w	2(a1),d0
00004C10 9042                       		sub.w	d2,d0
00004C12 3340 0002                  		move.w	d0,2(a1)
00004C16 D151                       		add.w	d0,0(a1)
00004C18 B811                       		cmp.b	0(a1),d4
00004C1A 6300                       		bls.s	loc_41BA
00004C1C 0383                       		bclr	d1,d3
00004C1E                            
00004C1E                            loc_41BA:
00004C1E 5849                       		addq.w	#4,a1
00004C20 51C9 FFCE                  		dbf	d1,loc_4184
00004C24 31C3 FE5E                  		move.w	d3,($FFFFFE5E).w
00004C28                            
00004C28                            locret_41C4:
00004C28 4E75                       		rts	
00004C2A                            ; End of function OscillateNumDo
00004C2A                            
00004C2A                            ; ===========================================================================
00004C2A 0002 0010                  Osc_Data2:	dc.w 2,	$10		; XREF: OscillateNumDo
00004C2E 0002 0018                  		dc.w 2,	$18
00004C32 0002 0020                  		dc.w 2,	$20
00004C36 0002 0030                  		dc.w 2,	$30
00004C3A 0004 0020                  		dc.w 4,	$20
00004C3E 0008 0008                  		dc.w 8,	8
00004C42 0008 0040                  		dc.w 8,	$40
00004C46 0004 0040                  		dc.w 4,	$40
00004C4A 0002 0050                  		dc.w 2,	$50
00004C4E 0002 0050                  		dc.w 2,	$50
00004C52 0002 0020                  		dc.w 2,	$20
00004C56 0003 0030                  		dc.w 3,	$30
00004C5A 0005 0050                  		dc.w 5,	$50
00004C5E 0007 0070                  		dc.w 7,	$70
00004C62 0002 0010                  		dc.w 2,	$10
00004C66 0002 0010                  		dc.w 2,	$10
00004C6A                            		even
00004C6A                            
00004C6A                            ; ---------------------------------------------------------------------------
00004C6A                            ; Subroutine to	change object animation	variables (rings, giant	rings)
00004C6A                            ; ---------------------------------------------------------------------------
00004C6A                            
00004C6A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004C6A                            
00004C6A                            
00004C6A                            ChangeRingFrame:			; XREF: Level
00004C6A 5338 FEC0                  		subq.b	#1,($FFFFFEC0).w
00004C6E 6A00                       		bpl.s	loc_421C
00004C70 11FC 000B FEC0             		move.b	#$B,($FFFFFEC0).w
00004C76 5338 FEC1                  		subq.b	#1,($FFFFFEC1).w
00004C7A 0238 0007 FEC1             		andi.b	#7,($FFFFFEC1).w
00004C80                            
00004C80                            loc_421C:
00004C80 5338 FEC2                  		subq.b	#1,($FFFFFEC2).w
00004C84 6A00                       		bpl.s	loc_4232
00004C86 11FC 0007 FEC2             		move.b	#7,($FFFFFEC2).w
00004C8C 5238 FEC3                  		addq.b	#1,($FFFFFEC3).w
00004C90 0238 0003 FEC3             		andi.b	#3,($FFFFFEC3).w
00004C96                            
00004C96                            loc_4232:
00004C96 5338 FEC4                  		subq.b	#1,($FFFFFEC4).w
00004C9A 6A00                       		bpl.s	loc_4250
00004C9C 11FC 0007 FEC4             		move.b	#7,($FFFFFEC4).w
00004CA2 5238 FEC5                  		addq.b	#1,($FFFFFEC5).w
00004CA6 0C38 0006 FEC5             		cmpi.b	#6,($FFFFFEC5).w
00004CAC 6500                       		bcs.s	loc_4250
00004CAE 11FC 0000 FEC5             		move.b	#0,($FFFFFEC5).w
00004CB4                            
00004CB4                            loc_4250:
00004CB4 4A38 FEC6                  		tst.b	($FFFFFEC6).w
00004CB8 6700                       		beq.s	locret_4272
00004CBA 7000                       		moveq	#0,d0
00004CBC 1038 FEC6                  		move.b	($FFFFFEC6).w,d0
00004CC0 D078 FEC8                  		add.w	($FFFFFEC8).w,d0
00004CC4 31C0 FEC8                  		move.w	d0,($FFFFFEC8).w
00004CC8 EF58                       		rol.w	#7,d0
00004CCA 0240 0003                  		andi.w	#3,d0
00004CCE 11C0 FEC7                  		move.b	d0,($FFFFFEC7).w
00004CD2 5338 FEC6                  		subq.b	#1,($FFFFFEC6).w
00004CD6                            
00004CD6                            locret_4272:
00004CD6 4E75                       		rts	
00004CD8                            ; End of function ChangeRingFrame
00004CD8                            
00004CD8                            ; ---------------------------------------------------------------------------
00004CD8                            ; End-of-act signpost pattern loading subroutine
00004CD8                            ; ---------------------------------------------------------------------------
00004CD8                            
00004CD8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004CD8                            
00004CD8                            
00004CD8                            SignpostArtLoad:			; XREF: Level
00004CD8 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
00004CDC 6600 0000                  		bne.w	Signpost_Exit	; if yes, branch
00004CE0 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w ; is act number 02 (act 3)?
00004CE6 6700                       		beq.s	Signpost_Exit	; if yes, branch
00004CE8 3038 F700                  		move.w	($FFFFF700).w,d0
00004CEC 3238 F72A                  		move.w	($FFFFF72A).w,d1
00004CF0 0441 0100                  		subi.w	#$100,d1
00004CF4 B041                       		cmp.w	d1,d0		; has Sonic reached the	edge of	the level?
00004CF6 6D00                       		blt.s	Signpost_Exit	; if not, branch
00004CF8 4A38 FE1E                  		tst.b	($FFFFFE1E).w
00004CFC 6700                       		beq.s	Signpost_Exit
00004CFE B278 F728                  		cmp.w	($FFFFF728).w,d1
00004D02 6700                       		beq.s	Signpost_Exit
00004D04 31C1 F728                  		move.w	d1,($FFFFF728).w ; move	left boundary to current screen	position
00004D08 7012                       		moveq	#$12,d0
00004D0A 6000 CA10                  		bra.w	LoadPLC2	; load signpost	patterns
00004D0E                            ; ===========================================================================
00004D0E                            
00004D0E                            Signpost_Exit:
00004D0E 4E75                       		rts	
00004D10                            ; End of function SignpostArtLoad
00004D10                            
00004D10                            ; ===========================================================================
00004D10                            Demo_GHZ:	incbin	demodata\i_ghz.bin
00004D90                            Demo_MZ:	incbin	demodata\i_mz.bin
00004EC0                            Demo_SYZ:	incbin	demodata\i_syz.bin
00004F40                            Demo_SS:	incbin	demodata\i_ss.bin
00005040                            ; ===========================================================================
00005040                            
00005040                            ; ---------------------------------------------------------------------------
00005040                            ; Special Stage
00005040                            ; ---------------------------------------------------------------------------
00005040                            
00005040                            SpecialStage:				; XREF: GameModeArray
00005040 303C 00CA                  		move.w	#$CA,d0
00005044 6100 C430                  		bsr.w	PlaySound_Special ; play special stage entry sound
00005048 6100 D264                  		bsr.w	Pal_MakeFlash
0000504C 46FC 2700                  		move	#$2700,sr
00005050 4DF9 00C0 0004             		lea	($C00004).l,a6
00005056 3CBC 8B03                  		move.w	#$8B03,(a6)
0000505A 3CBC 8004                  		move.w	#$8004,(a6)
0000505E 31FC 8AAF F624             		move.w	#$8AAF,($FFFFF624).w
00005064 3CBC 9011                  		move.w	#$9011,(a6)
00005068 3038 F60C                  		move.w	($FFFFF60C).w,d0
0000506C 0200 00BF                  		andi.b	#$BF,d0
00005070 33C0 00C0 0004             		move.w	d0,($C00004).l
00005076 6100 C308                  		bsr.w	ClearScreen
0000507A 46FC 2300                  		move	#$2300,sr
0000507E 4BF9 00C0 0004             		lea	($C00004).l,a5
00005084 3ABC 8F01                  		move.w	#$8F01,(a5)
00005088 2ABC 946F 93FF             		move.l	#$946F93FF,(a5)
0000508E 3ABC 9780                  		move.w	#$9780,(a5)
00005092 2ABC 5000 0081             		move.l	#$50000081,(a5)
00005098 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
000050A0                            
000050A0                            loc_463C:
000050A0 3215                       		move.w	(a5),d1
000050A2 0801 0001                  		btst	#1,d1
000050A6 66F8                       		bne.s	loc_463C
000050A8 3ABC 8F02                  		move.w	#$8F02,(a5)
000050AC 6100 0000                  		bsr.w	SS_BGLoad
000050B0 7014                       		moveq	#$14,d0
000050B2 6100 C7A2                  		bsr.w	RunPLC_ROM	; load special stage patterns
000050B6 43F8 D000                  		lea	($FFFFD000).w,a1
000050BA 7000                       		moveq	#0,d0
000050BC 323C 07FF                  		move.w	#$7FF,d1
000050C0                            
000050C0                            SS_ClrObjRam:
000050C0 22C0                       		move.l	d0,(a1)+
000050C2 51C9 FFFC                  		dbf	d1,SS_ClrObjRam	; clear	the object RAM
000050C6                            
000050C6 43F8 F700                  		lea	($FFFFF700).w,a1
000050CA 7000                       		moveq	#0,d0
000050CC 323C 003F                  		move.w	#$3F,d1
000050D0                            
000050D0                            SS_ClrRam:
000050D0 22C0                       		move.l	d0,(a1)+
000050D2 51C9 FFFC                  		dbf	d1,SS_ClrRam	; clear	variables
000050D6                            
000050D6 43F8 FE60                  		lea	($FFFFFE60).w,a1
000050DA 7000                       		moveq	#0,d0
000050DC 323C 0027                  		move.w	#$27,d1
000050E0                            
000050E0                            SS_ClrRam2:
000050E0 22C0                       		move.l	d0,(a1)+
000050E2 51C9 FFFC                  		dbf	d1,SS_ClrRam2	; clear	variables
000050E6                            
000050E6 43F8 AA00                  		lea	($FFFFAA00).w,a1
000050EA 7000                       		moveq	#0,d0
000050EC 323C 007F                  		move.w	#$7F,d1
000050F0                            
000050F0                            SS_ClrNemRam:
000050F0 22C0                       		move.l	d0,(a1)+
000050F2 51C9 FFFC                  		dbf	d1,SS_ClrNemRam	; clear	Nemesis	buffer
000050F6                            
000050F6 4238 F64E                  		clr.b	($FFFFF64E).w
000050FA 4278 FE02                  		clr.w	($FFFFFE02).w
000050FE 700A                       		moveq	#$A,d0
00005100 6100 D32C                  		bsr.w	PalLoad1	; load special stage pallet
00005104 4EB9 0000 0000             		jsr	SS_Load
0000510A 21FC 0000 0000 F700        		move.l	#0,($FFFFF700).w
00005112 21FC 0000 0000 F704        		move.l	#0,($FFFFF704).w
0000511A 11FC 0009 D000             		move.b	#9,($FFFFD000).w ; load	special	stage Sonic object
00005120 6100 0000                  		bsr.w	PalCycle_SS
00005124 4278 F780                  		clr.w	($FFFFF780).w	; set stage angle to "upright"
00005128 31FC 0040 F782             		move.w	#$40,($FFFFF782).w ; set stage rotation	speed
0000512E 303C 0089                  		move.w	#$89,d0
00005132 6100 C33C                  		bsr.w	PlaySound	; play special stage BG	music
00005136 31FC 0000 F790             		move.w	#0,($FFFFF790).w
0000513C 43F9 0000 4AEC             		lea	(Demo_Index).l,a1
00005142 7006                       		moveq	#6,d0
00005144 E548                       		lsl.w	#2,d0
00005146 2271 0000                  		movea.l	(a1,d0.w),a1
0000514A 11E9 0001 F792             		move.b	1(a1),($FFFFF792).w
00005150 5338 F792                  		subq.b	#1,($FFFFF792).w
00005154 4278 FE20                  		clr.w	($FFFFFE20).w
00005158 4238 FE1B                  		clr.b	($FFFFFE1B).w
0000515C 31FC 0000 FE08             		move.w	#0,($FFFFFE08).w
00005162 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
00005168 4A38 FFE2                  		tst.b	($FFFFFFE2).w	; has debug cheat been entered?
0000516C 6700                       		beq.s	SS_NoDebug	; if not, branch
0000516E 0838 0006 F604             		btst	#6,($FFFFF604).w ; is A	button pressed?
00005174 6700                       		beq.s	SS_NoDebug	; if not, branch
00005176 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
0000517C                            
0000517C                            SS_NoDebug:
0000517C 3038 F60C                  		move.w	($FFFFF60C).w,d0
00005180 0000 0040                  		ori.b	#$40,d0
00005184 33C0 00C0 0004             		move.w	d0,($C00004).l
0000518A 6100 D076                  		bsr.w	Pal_MakeWhite
0000518E                            
0000518E                            ; ---------------------------------------------------------------------------
0000518E                            ; Main Special Stage loop
0000518E                            ; ---------------------------------------------------------------------------
0000518E                            
0000518E                            SS_MainLoop:
0000518E 6100 C2F2                  		bsr.w	PauseGame
00005192 11FC 000A F62A             		move.b	#$A,($FFFFF62A).w
00005198 6100 E208                  		bsr.w	DelayProgram
0000519C 6100 F89E                  		bsr.w	MoveSonicInDemo
000051A0 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w
000051A6 4EB9 0000 0000             		jsr	ObjectsLoad
000051AC 4EB9 0000 0000             		jsr	BuildSprites
000051B2 4EB9 0000 0000             		jsr	SS_ShowLayout
000051B8 6100 0000                  		bsr.w	SS_BGAnimate
000051BC 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
000051C0 6700                       		beq.s	SS_ChkEnd	; if not, branch
000051C2 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
000051C6 6700 0000                  		beq.w	SS_ToSegaScreen	; if not, branch
000051CA                            
000051CA                            SS_ChkEnd:
000051CA 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode $10 (special stage)?
000051D0 6700 FFBC                  		beq.w	SS_MainLoop	; if yes, branch
000051D4                            
000051D4 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
000051D8 6600 0000                  		bne.w	SS_ToSegaScreen	; if yes, branch
000051DC 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
000051E2 0C78 0503 FE10             		cmpi.w	#$503,($FFFFFE10).w ; is level number higher than FZ?
000051E8 6500                       		bcs.s	SS_End		; if not, branch
000051EA 4278 FE10                  		clr.w	($FFFFFE10).w	; set to GHZ1
000051EE                            
000051EE                            SS_End:
000051EE 31FC 003C F614             		move.w	#60,($FFFFF614).w ; set	delay time to 1	second
000051F4 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
000051FA 4278 F794                  		clr.w	($FFFFF794).w
000051FE                            
000051FE                            SS_EndLoop:
000051FE 11FC 0016 F62A             		move.b	#$16,($FFFFF62A).w
00005204 6100 E19C                  		bsr.w	DelayProgram
00005208 6100 F832                  		bsr.w	MoveSonicInDemo
0000520C 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w
00005212 4EB9 0000 0000             		jsr	ObjectsLoad
00005218 4EB9 0000 0000             		jsr	BuildSprites
0000521E 4EB9 0000 0000             		jsr	SS_ShowLayout
00005224 6100 0000                  		bsr.w	SS_BGAnimate
00005228 5378 F794                  		subq.w	#1,($FFFFF794).w
0000522C 6A00                       		bpl.s	loc_47D4
0000522E 31FC 0002 F794             		move.w	#2,($FFFFF794).w
00005234 6100 D098                  		bsr.w	Pal_ToWhite
00005238                            
00005238                            loc_47D4:
00005238 4A78 F614                  		tst.w	($FFFFF614).w
0000523C 66C0                       		bne.s	SS_EndLoop
0000523E                            
0000523E 46FC 2700                  		move	#$2700,sr
00005242 4DF9 00C0 0004             		lea	($C00004).l,a6
00005248 3CBC 8230                  		move.w	#$8230,(a6)
0000524C 3CBC 8407                  		move.w	#$8407,(a6)
00005250 3CBC 9001                  		move.w	#$9001,(a6)
00005254 6100 C12A                  		bsr.w	ClearScreen
00005258 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
00005262 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
00005268 6100 C340                  		bsr.w	NemDec
0000526C 4EB9 0000 0000             		jsr	Hud_Base
00005272 4278 C800                  		clr.w	($FFFFC800).w
00005276 21FC FFFF C800 C8FC        		move.l	#$FFFFC800,($FFFFC8FC).w
0000527E 46FC 2300                  		move	#$2300,sr
00005282 7011                       		moveq	#$11,d0
00005284 6100 D1E4                  		bsr.w	PalLoad2	; load results screen pallet
00005288 7000                       		moveq	#0,d0
0000528A 6100 C490                  		bsr.w	LoadPLC2
0000528E 701B                       		moveq	#$1B,d0
00005290 6100 C458                  		bsr.w	LoadPLC		; load results screen patterns
00005294 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; update score	counter
0000529A 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; update ring bonus counter
000052A0 3038 FE20                  		move.w	($FFFFFE20).w,d0
000052A4 C0FC 000A                  		mulu.w	#10,d0		; multiply rings by 10
000052A8 31C0 F7D4                  		move.w	d0,($FFFFF7D4).w ; set rings bonus
000052AC 303C 008E                  		move.w	#$8E,d0
000052B0 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play end-of-level music
000052B6 43F8 D000                  		lea	($FFFFD000).w,a1
000052BA 7000                       		moveq	#0,d0
000052BC 323C 07FF                  		move.w	#$7FF,d1
000052C0                            
000052C0                            SS_EndClrObjRam:
000052C0 22C0                       		move.l	d0,(a1)+
000052C2 51C9 FFFC                  		dbf	d1,SS_EndClrObjRam ; clear object RAM
000052C6                            
000052C6 11FC 007E D5C0             		move.b	#$7E,($FFFFD5C0).w ; load results screen object
000052CC                            
000052CC                            SS_NormalExit:
000052CC 6100 C1B4                  		bsr.w	PauseGame
000052D0 11FC 000C F62A             		move.b	#$C,($FFFFF62A).w
000052D6 6100 E0CA                  		bsr.w	DelayProgram
000052DA 4EB9 0000 0000             		jsr	ObjectsLoad
000052E0 4EB9 0000 0000             		jsr	BuildSprites
000052E6 6100 C46E                  		bsr.w	RunPLC_RAM
000052EA 4A78 FE02                  		tst.w	($FFFFFE02).w
000052EE 67DC                       		beq.s	SS_NormalExit
000052F0 4AB8 F680                  		tst.l	($FFFFF680).w
000052F4 66D6                       		bne.s	SS_NormalExit
000052F6 303C 00CA                  		move.w	#$CA,d0
000052FA 6100 C17A                  		bsr.w	PlaySound_Special ; play special stage exit sound
000052FE 6100 CFAE                  		bsr.w	Pal_MakeFlash
00005302 4E75                       		rts	
00005304                            ; ===========================================================================
00005304                            
00005304                            SS_ToSegaScreen:
00005304 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set screen mode to 00 (Sega screen)
0000530A 4E75                       		rts
0000530C                            
0000530C                            ; ---------------------------------------------------------------------------
0000530C                            ; Special stage	background loading subroutine
0000530C                            ; ---------------------------------------------------------------------------
0000530C                            
0000530C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000530C                            
0000530C                            
0000530C                            SS_BGLoad:				; XREF: SpecialStage
0000530C 43F9 00FF 0000             		lea	($FF0000).l,a1
00005312 41F9 0000 0000             		lea	(Eni_SSBg1).l,a0 ; load	mappings for the birds and fish
00005318 303C 4051                  		move.w	#$4051,d0
0000531C 6100 C56A                  		bsr.w	EniDec
00005320 263C 5000 0001             		move.l	#$50000001,d3
00005326 45F9 00FF 0080             		lea	($FF0080).l,a2
0000532C 7E06                       		moveq	#6,d7
0000532E                            
0000532E                            loc_48BE:
0000532E 2003                       		move.l	d3,d0
00005330 7C03                       		moveq	#3,d6
00005332 7800                       		moveq	#0,d4
00005334 0C47 0003                  		cmpi.w	#3,d7
00005338 6400                       		bcc.s	loc_48CC
0000533A 7801                       		moveq	#1,d4
0000533C                            
0000533C                            loc_48CC:
0000533C 7A07                       		moveq	#7,d5
0000533E                            
0000533E                            loc_48CE:
0000533E 224A                       		movea.l	a2,a1
00005340 0A04 0001                  		eori.b	#1,d4
00005344 6600                       		bne.s	loc_48E2
00005346 0C47 0006                  		cmpi.w	#6,d7
0000534A 6600                       		bne.s	loc_48F2
0000534C 43F9 00FF 0000             		lea	($FF0000).l,a1
00005352                            
00005352                            loc_48E2:
00005352 48E7 F800                  		movem.l	d0-d4,-(sp)
00005356 7207                       		moveq	#7,d1
00005358 7407                       		moveq	#7,d2
0000535A 6100 C19E                  		bsr.w	ShowVDPGraphics
0000535E 4CDF 001F                  		movem.l	(sp)+,d0-d4
00005362                            
00005362                            loc_48F2:
00005362 0680 0010 0000             		addi.l	#$100000,d0
00005368 51CD FFD4                  		dbf	d5,loc_48CE
0000536C 0680 0380 0000             		addi.l	#$3800000,d0
00005372 0A04 0001                  		eori.b	#1,d4
00005376 51CE FFC4                  		dbf	d6,loc_48CC
0000537A 0683 1000 0000             		addi.l	#$10000000,d3
00005380 6A00                       		bpl.s	loc_491C
00005382 4843                       		swap	d3
00005384 0683 0000 C000             		addi.l	#$C000,d3
0000538A 4843                       		swap	d3
0000538C                            
0000538C                            loc_491C:
0000538C D4FC 0080                  		adda.w	#$80,a2
00005390 51CF FF9C                  		dbf	d7,loc_48BE
00005394 43F9 00FF 0000             		lea	($FF0000).l,a1
0000539A 41F9 0000 0000             		lea	(Eni_SSBg2).l,a0 ; load	mappings for the clouds
000053A0 303C 4000                  		move.w	#$4000,d0
000053A4 6100 C4E2                  		bsr.w	EniDec
000053A8 43F9 00FF 0000             		lea	($FF0000).l,a1
000053AE 203C 4000 0003             		move.l	#$40000003,d0
000053B4 723F                       		moveq	#$3F,d1
000053B6 741F                       		moveq	#$1F,d2
000053B8 6100 C140                  		bsr.w	ShowVDPGraphics
000053BC 43F9 00FF 0000             		lea	($FF0000).l,a1
000053C2 203C 5000 0003             		move.l	#$50000003,d0
000053C8 723F                       		moveq	#$3F,d1
000053CA 743F                       		moveq	#$3F,d2
000053CC 6100 C12C                  		bsr.w	ShowVDPGraphics
000053D0 4E75                       		rts	
000053D2                            ; End of function SS_BGLoad
000053D2                            
000053D2                            ; ---------------------------------------------------------------------------
000053D2                            ; Pallet cycling routine - special stage
000053D2                            ; ---------------------------------------------------------------------------
000053D2                            
000053D2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000053D2                            
000053D2                            
000053D2                            PalCycle_SS:				; XREF: loc_DA6; SpecialStage
000053D2 4A78 F63A                  		tst.w	($FFFFF63A).w
000053D6 6600                       		bne.s	locret_49E6
000053D8 5378 F79C                  		subq.w	#1,($FFFFF79C).w
000053DC 6A00                       		bpl.s	locret_49E6
000053DE 4DF9 00C0 0004             		lea	($C00004).l,a6
000053E4 3038 F79A                  		move.w	($FFFFF79A).w,d0
000053E8 5278 F79A                  		addq.w	#1,($FFFFF79A).w
000053EC 0240 001F                  		andi.w	#$1F,d0
000053F0 E548                       		lsl.w	#2,d0
000053F2 41F9 0000 0000             		lea	(byte_4A3C).l,a0
000053F8 D0C0                       		adda.w	d0,a0
000053FA 1018                       		move.b	(a0)+,d0
000053FC 6A00                       		bpl.s	loc_4992
000053FE 303C 01FF                  		move.w	#$1FF,d0
00005402                            
00005402                            loc_4992:
00005402 31C0 F79C                  		move.w	d0,($FFFFF79C).w
00005406 7000                       		moveq	#0,d0
00005408 1018                       		move.b	(a0)+,d0
0000540A 31C0 F7A0                  		move.w	d0,($FFFFF7A0).w
0000540E 43F9 0000 0000             		lea	(byte_4ABC).l,a1
00005414 43F1 0000                  		lea	(a1,d0.w),a1
00005418 303C 8200                  		move.w	#-$7E00,d0
0000541C 1019                       		move.b	(a1)+,d0
0000541E 3C80                       		move.w	d0,(a6)
00005420 11D1 F616                  		move.b	(a1),($FFFFF616).w
00005424 303C 8400                  		move.w	#-$7C00,d0
00005428 1018                       		move.b	(a0)+,d0
0000542A 3C80                       		move.w	d0,(a6)
0000542C 23FC 4000 0010 00C0 0004   		move.l	#$40000010,($C00004).l
00005436 23F8 F616 00C0 0000        		move.l	($FFFFF616).w,($C00000).l
0000543E 7000                       		moveq	#0,d0
00005440 1018                       		move.b	(a0)+,d0
00005442 6B00                       		bmi.s	loc_49E8
00005444 43F9 0000 0000             		lea	(Pal_SSCyc1).l,a1
0000544A D2C0                       		adda.w	d0,a1
0000544C 45F8 FB4E                  		lea	($FFFFFB4E).w,a2
00005450 24D9                       		move.l	(a1)+,(a2)+
00005452 24D9                       		move.l	(a1)+,(a2)+
00005454 24D9                       		move.l	(a1)+,(a2)+
00005456                            
00005456                            locret_49E6:
00005456 4E75                       		rts	
00005458                            ; ===========================================================================
00005458                            
00005458                            loc_49E8:				; XREF: PalCycle_SS
00005458 3238 F79E                  		move.w	($FFFFF79E).w,d1
0000545C 0C40 008A                  		cmpi.w	#$8A,d0
00005460 6500                       		bcs.s	loc_49F4
00005462 5241                       		addq.w	#1,d1
00005464                            
00005464                            loc_49F4:
00005464 C2FC 002A                  		mulu.w	#$2A,d1
00005468 43F9 0000 0000             		lea	(Pal_SSCyc2).l,a1
0000546E D2C1                       		adda.w	d1,a1
00005470 0240 007F                  		andi.w	#$7F,d0
00005474 0880 0000                  		bclr	#0,d0
00005478 6700                       		beq.s	loc_4A18
0000547A 45F8 FB6E                  		lea	($FFFFFB6E).w,a2
0000547E 24D1                       		move.l	(a1),(a2)+
00005480 24E9 0004                  		move.l	4(a1),(a2)+
00005484 24E9 0008                  		move.l	8(a1),(a2)+
00005488                            
00005488                            loc_4A18:
00005488 D2FC 000C                  		adda.w	#$C,a1
0000548C 45F8 FB5A                  		lea	($FFFFFB5A).w,a2
00005490 0C40 000A                  		cmpi.w	#$A,d0
00005494 6500                       		bcs.s	loc_4A2E
00005496 0440 000A                  		subi.w	#$A,d0
0000549A 45F8 FB7A                  		lea	($FFFFFB7A).w,a2
0000549E                            
0000549E                            loc_4A2E:
0000549E 3200                       		move.w	d0,d1
000054A0 D040                       		add.w	d0,d0
000054A2 D041                       		add.w	d1,d0
000054A4 D2C0                       		adda.w	d0,a1
000054A6 24D9                       		move.l	(a1)+,(a2)+
000054A8 34D9                       		move.w	(a1)+,(a2)+
000054AA 4E75                       		rts	
000054AC                            ; End of function PalCycle_SS
000054AC                            
000054AC                            ; ===========================================================================
000054AC 0300 0792 0300 0790 0300+  byte_4A3C:	dc.b 3,	0, 7, $92, 3, 0, 7, $90, 3, 0, 7, $8E, 3, 0, 7,	$8C
000054BC                            					; XREF: PalCycle_SS
000054BC 0300 078B 0300 0780 0300+  		dc.b 3,	0, 7, $8B, 3, 0, 7, $80, 3, 0, 7, $82, 3, 0, 7,	$84
000054CC 0300 0786 0300 0788 0708+  		dc.b 3,	0, 7, $86, 3, 0, 7, $88, 7, 8, 7, 0, 7,	$A, 7, $C
000054DC FF0C 0718 FF0C 0718 070A+  		dc.b $FF, $C, 7, $18, $FF, $C, 7, $18, 7, $A, 7, $C, 7,	8, 7, 0
000054EC 0300 0688 0300 0686 0300+  		dc.b 3,	0, 6, $88, 3, 0, 6, $86, 3, 0, 6, $84, 3, 0, 6,	$82
000054FC 0300 0681 0300 068A 0300+  		dc.b 3,	0, 6, $81, 3, 0, 6, $8A, 3, 0, 6, $8C, 3, 0, 6,	$8E
0000550C 0300 0690 0300 0692 0702+  		dc.b 3,	0, 6, $90, 3, 0, 6, $92, 7, 2, 6, $24, 7, 4, 6,	$30
0000551C FF06 063C FF06 063C 0704+  		dc.b $FF, 6, 6,	$3C, $FF, 6, 6,	$3C, 7,	4, 6, $30, 7, 2, 6, $24
0000552C                            		even
0000552C 1001 1800 1801 2000 2001+  byte_4ABC:	dc.b $10, 1, $18, 0, $18, 1, $20, 0, $20, 1, $28, 0, $28, 1
0000553A                            					; XREF: PalCycle_SS
0000553A                            		even
0000553A                            
0000553A                            Pal_SSCyc1:	incbin	pallet\c_ss_1.bin
00005582                            		even
00005582                            Pal_SSCyc2:	incbin	pallet\c_ss_2.bin
00005654                            		even
00005654                            
00005654                            ; ---------------------------------------------------------------------------
00005654                            ; Subroutine to	make the special stage background animated
00005654                            ; ---------------------------------------------------------------------------
00005654                            
00005654                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005654                            
00005654                            
00005654                            SS_BGAnimate:				; XREF: SpecialStage
00005654 3038 F7A0                  		move.w	($FFFFF7A0).w,d0
00005658 6600                       		bne.s	loc_4BF6
0000565A 31FC 0000 F70C             		move.w	#0,($FFFFF70C).w
00005660 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00005666                            
00005666                            loc_4BF6:
00005666 0C40 0008                  		cmpi.w	#8,d0
0000566A 6400                       		bcc.s	loc_4C4E
0000566C 0C40 0006                  		cmpi.w	#6,d0
00005670 6600                       		bne.s	loc_4C10
00005672 5278 F718                  		addq.w	#1,($FFFFF718).w
00005676 5278 F70C                  		addq.w	#1,($FFFFF70C).w
0000567A 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00005680                            
00005680                            loc_4C10:
00005680 7000                       		moveq	#0,d0
00005682 3038 F708                  		move.w	($FFFFF708).w,d0
00005686 4440                       		neg.w	d0
00005688 4840                       		swap	d0
0000568A 43F9 0000 0000             		lea	(byte_4CCC).l,a1
00005690 47F8 AA00                  		lea	($FFFFAA00).w,a3
00005694 7609                       		moveq	#9,d3
00005696                            
00005696                            loc_4C26:
00005696 302B 0002                  		move.w	2(a3),d0
0000569A 6100 DD38                  		bsr.w	CalcSine
0000569E 7400                       		moveq	#0,d2
000056A0 1419                       		move.b	(a1)+,d2
000056A2 C1C2                       		muls.w	d2,d0
000056A4 E080                       		asr.l	#8,d0
000056A6 36C0                       		move.w	d0,(a3)+
000056A8 1419                       		move.b	(a1)+,d2
000056AA 4882                       		ext.w	d2
000056AC D55B                       		add.w	d2,(a3)+
000056AE 51CB FFE6                  		dbf	d3,loc_4C26
000056B2 47F8 AA00                  		lea	($FFFFAA00).w,a3
000056B6 45F9 0000 0000             		lea	(byte_4CB8).l,a2
000056BC 6000                       		bra.s	loc_4C7E
000056BE                            ; ===========================================================================
000056BE                            
000056BE                            loc_4C4E:				; XREF: SS_BGAnimate
000056BE 0C40 000C                  		cmpi.w	#$C,d0
000056C2 6600                       		bne.s	loc_4C74
000056C4 5378 F718                  		subq.w	#1,($FFFFF718).w
000056C8 47F8 AB00                  		lea	($FFFFAB00).w,a3
000056CC 243C 0001 8000             		move.l	#$18000,d2
000056D2 7206                       		moveq	#6,d1
000056D4                            
000056D4                            loc_4C64:
000056D4 2013                       		move.l	(a3),d0
000056D6 9082                       		sub.l	d2,d0
000056D8 26C0                       		move.l	d0,(a3)+
000056DA 0482 0000 2000             		subi.l	#$2000,d2
000056E0 51C9 FFF2                  		dbf	d1,loc_4C64
000056E4                            
000056E4                            loc_4C74:
000056E4 47F8 AB00                  		lea	($FFFFAB00).w,a3
000056E8 45F9 0000 0000             		lea	(byte_4CC4).l,a2
000056EE                            
000056EE                            loc_4C7E:
000056EE 43F8 CC00                  		lea	($FFFFCC00).w,a1
000056F2 3038 F718                  		move.w	($FFFFF718).w,d0
000056F6 4440                       		neg.w	d0
000056F8 4840                       		swap	d0
000056FA 7600                       		moveq	#0,d3
000056FC 161A                       		move.b	(a2)+,d3
000056FE 3438 F70C                  		move.w	($FFFFF70C).w,d2
00005702 4442                       		neg.w	d2
00005704 0242 00FF                  		andi.w	#$FF,d2
00005708 E54A                       		lsl.w	#2,d2
0000570A                            
0000570A                            loc_4C9A:
0000570A 301B                       		move.w	(a3)+,d0
0000570C 544B                       		addq.w	#2,a3
0000570E 7200                       		moveq	#0,d1
00005710 121A                       		move.b	(a2)+,d1
00005712 5341                       		subq.w	#1,d1
00005714                            
00005714                            loc_4CA4:
00005714 2380 2000                  		move.l	d0,(a1,d2.w)
00005718 5842                       		addq.w	#4,d2
0000571A 0242 03FC                  		andi.w	#$3FC,d2
0000571E 51C9 FFF4                  		dbf	d1,loc_4CA4
00005722 51CB FFE6                  		dbf	d3,loc_4C9A
00005726 4E75                       		rts	
00005728                            ; End of function SS_BGAnimate
00005728                            
00005728                            ; ===========================================================================
00005728 0928 1810 2818 1030 1808+  byte_4CB8:	dc.b 9,	$28, $18, $10, $28, $18, $10, $30, $18,	8, $10,	0
00005734                            		even
00005734 0630 3030 2818 1818        byte_4CC4:	dc.b 6,	$30, $30, $30, $28, $18, $18, $18
0000573C                            		even
0000573C 0802 04FF 0203 08FF 0402+  byte_4CCC:	dc.b 8,	2, 4, $FF, 2, 3, 8, $FF, 4, 2, 2, 3, 8,	$FD, 4,	2, 2, 3, 2, $FF
00005750                            		even
00005750                            					; XREF: SS_BGAnimate
00005750                            ; ===========================================================================
00005750                            
00005750                            ; ---------------------------------------------------------------------------
00005750                            ; Continue screen
00005750                            ; ---------------------------------------------------------------------------
00005750                            
00005750                            ContinueScreen:				; XREF: GameModeArray
00005750 6100 CA2E                  		bsr.w	Pal_FadeFrom
00005754 46FC 2700                  		move	#$2700,sr
00005758 3038 F60C                  		move.w	($FFFFF60C).w,d0
0000575C 0200 00BF                  		andi.b	#$BF,d0
00005760 33C0 00C0 0004             		move.w	d0,($C00004).l
00005766 4DF9 00C0 0004             		lea	($C00004).l,a6
0000576C 3CBC 8004                  		move.w	#$8004,(a6)
00005770 3CBC 8700                  		move.w	#$8700,(a6)
00005774 6100 BC0A                  		bsr.w	ClearScreen
00005778 43F8 D000                  		lea	($FFFFD000).w,a1
0000577C 7000                       		moveq	#0,d0
0000577E 323C 07FF                  		move.w	#$7FF,d1
00005782                            
00005782                            Cont_ClrObjRam:
00005782 22C0                       		move.l	d0,(a1)+
00005784 51C9 FFFC                  		dbf	d1,Cont_ClrObjRam ; clear object RAM
00005788                            
00005788 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
00005792 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
00005798 6100 BE10                  		bsr.w	NemDec
0000579C 23FC 6000 0002 00C0 0004   		move.l	#$60000002,($C00004).l
000057A6 41F9 0000 0000             		lea	(Nem_ContSonic).l,a0 ; load Sonic patterns
000057AC 6100 BDFC                  		bsr.w	NemDec
000057B0 23FC 6A20 0002 00C0 0004   		move.l	#$6A200002,($C00004).l
000057BA 41F9 0000 0000             		lea	(Nem_MiniSonic).l,a0 ; load continue screen patterns
000057C0 6100 BDE8                  		bsr.w	NemDec
000057C4 720A                       		moveq	#10,d1
000057C6 4EB9 0000 0000             		jsr	ContScrCounter	; run countdown	(start from 10)
000057CC 7012                       		moveq	#$12,d0
000057CE 6100 CC5E                  		bsr.w	PalLoad1	; load continue	screen pallet
000057D2 103C 0090                  		move.b	#$90,d0
000057D6 6100 BC98                  		bsr.w	PlaySound	; play continue	music
000057DA 31FC 0293 F614             		move.w	#659,($FFFFF614).w ; set time delay to 11 seconds
000057E0 42B8 F700                  		clr.l	($FFFFF700).w
000057E4 21FC 0100 0000 F704        		move.l	#$1000000,($FFFFF704).w
000057EC 11FC 0081 D000             		move.b	#$81,($FFFFD000).w ; load Sonic	object
000057F2 11FC 0080 D040             		move.b	#$80,($FFFFD040).w ; load continue screen objects
000057F8 11FC 0080 D080             		move.b	#$80,($FFFFD080).w
000057FE 11FC 0003 D098             		move.b	#3,($FFFFD098).w
00005804 11FC 0004 D09A             		move.b	#4,($FFFFD09A).w
0000580A 11FC 0080 D0C0             		move.b	#$80,($FFFFD0C0).w
00005810 11FC 0004 D0E4             		move.b	#4,($FFFFD0E4).w
00005816 4EB9 0000 0000             		jsr	ObjectsLoad
0000581C 4EB9 0000 0000             		jsr	BuildSprites
00005822 3038 F60C                  		move.w	($FFFFF60C).w,d0
00005826 0000 0040                  		ori.b	#$40,d0
0000582A 33C0 00C0 0004             		move.w	d0,($C00004).l
00005830 6100 C898                  		bsr.w	Pal_FadeTo
00005834                            
00005834                            ; ---------------------------------------------------------------------------
00005834                            ; Continue screen main loop
00005834                            ; ---------------------------------------------------------------------------
00005834                            
00005834                            Cont_MainLoop:
00005834 11FC 0016 F62A             		move.b	#$16,($FFFFF62A).w
0000583A 6100 DB66                  		bsr.w	DelayProgram
0000583E 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00005844 6400                       		bcc.s	loc_4DF2
00005846 46FC 2700                  		move	#$2700,sr
0000584A 3238 F614                  		move.w	($FFFFF614).w,d1
0000584E 82FC 003C                  		divu.w	#$3C,d1
00005852 0281 0000 000F             		andi.l	#$F,d1
00005858 4EB9 0000 0000             		jsr	ContScrCounter
0000585E 46FC 2300                  		move	#$2300,sr
00005862                            
00005862                            loc_4DF2:
00005862 4EB9 0000 0000             		jsr	ObjectsLoad
00005868 4EB9 0000 0000             		jsr	BuildSprites
0000586E 0C78 0180 D008             		cmpi.w	#$180,($FFFFD008).w ; has Sonic	run off	screen?
00005874 6400                       		bcc.s	Cont_GotoLevel	; if yes, branch
00005876 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000587C 64B6                       		bcc.s	Cont_MainLoop
0000587E 4A78 F614                  		tst.w	($FFFFF614).w
00005882 6600 FFB0                  		bne.w	Cont_MainLoop
00005886 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
0000588C 4E75                       		rts	
0000588E                            ; ===========================================================================
0000588E                            
0000588E                            Cont_GotoLevel:				; XREF: Cont_MainLoop
0000588E 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
00005894 11FC 0003 FE12             		move.b	#3,($FFFFFE12).w ; set lives to	3
0000589A 7000                       		moveq	#0,d0
0000589C 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
000058A0 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
000058A4 11C0 FEBF                          move.b    d0,($FFFFFEBF).w ; value used to increment centiseconds
000058A8 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
000058AC 11C0 FE30                  		move.b	d0,($FFFFFE30).w ; clear lamppost count
000058B0 5338 FE18                  		subq.b	#1,($FFFFFE18).w ; subtract 1 from continues
000058B4 4E75                       		rts	
000058B6                            ; ===========================================================================
000058B6                            
000058B6                            ; ---------------------------------------------------------------------------
000058B6                            ; Object 80 - Continue screen elements
000058B6                            ; ---------------------------------------------------------------------------
000058B6                            
000058B6                            Obj80:					; XREF: Obj_Index
000058B6 7000                       		moveq	#0,d0
000058B8 1028 0024                  		move.b	$24(a0),d0
000058BC 323B 0000                  		move.w	Obj80_Index(pc,d0.w),d1
000058C0 4EFB 1000                  		jmp	Obj80_Index(pc,d1.w)
000058C4                            ; ===========================================================================
000058C4 0000                       Obj80_Index:	dc.w Obj80_Main-Obj80_Index
000058C6 0000                       		dc.w Obj80_Display-Obj80_Index
000058C8 0000                       		dc.w Obj80_MakeMiniSonic-Obj80_Index
000058CA 0000                       		dc.w Obj80_ChkType-Obj80_Index
000058CC                            ; ===========================================================================
000058CC                            
000058CC                            Obj80_Main:				; XREF: Obj80_Index
000058CC 5428 0024                  		addq.b	#2,$24(a0)
000058D0 217C 0000 0000 0004        		move.l	#Map_obj80,4(a0)
000058D8 317C 8500 0002             		move.w	#$8500,2(a0)
000058DE 117C 0000 0001             		move.b	#0,1(a0)
000058E4 117C 003C 0019             		move.b	#$3C,$19(a0)
000058EA 317C 0120 0008             		move.w	#$120,8(a0)
000058F0 317C 00C0 000A             		move.w	#$C0,$A(a0)
000058F6 31FC 0000 FE20             		move.w	#0,($FFFFFE20).w ; clear rings
000058FC                            
000058FC                            Obj80_Display:				; XREF: Obj80_Index
000058FC 4EF9 0000 0000             		jmp	DisplaySprite
00005902                            ; ===========================================================================
00005902                            Obj80_MiniSonicPos:
00005902 0116 012A 0102 013E 00EE+  		dc.w $116, $12A, $102, $13E, $EE, $152, $DA, $166, $C6
00005914 017A 00B2 018E 009E 01A2+  		dc.w $17A, $B2,	$18E, $9E, $1A2, $8A
00005920                            ; ===========================================================================
00005920                            
00005920                            Obj80_MakeMiniSonic:			; XREF: Obj80_Index
00005920 2248                       		movea.l	a0,a1
00005922 45F9 0000 5902             		lea	(Obj80_MiniSonicPos).l,a2
00005928 7200                       		moveq	#0,d1
0000592A 1238 FE18                  		move.b	($FFFFFE18).w,d1
0000592E 5501                       		subq.b	#2,d1
00005930 6400                       		bcc.s	loc_4EC4
00005932 4EF9 0000 0000             		jmp	DeleteObject
00005938                            ; ===========================================================================
00005938                            
00005938                            loc_4EC4:				; XREF: Obj80_MakeMiniSonic
00005938 7601                       		moveq	#1,d3
0000593A 0C01 000E                  		cmpi.b	#$E,d1
0000593E 6500                       		bcs.s	loc_4ED0
00005940 7600                       		moveq	#0,d3
00005942 720E                       		moveq	#$E,d1
00005944                            
00005944                            loc_4ED0:
00005944 1401                       		move.b	d1,d2
00005946 0202 0001                  		andi.b	#1,d2
0000594A                            
0000594A                            Obj80_MiniSonLoop:
0000594A 12BC 0080                  		move.b	#$80,0(a1)	; load mini Sonic object
0000594E 335A 0008                  		move.w	(a2)+,8(a1)
00005952 4A02                       		tst.b	d2
00005954 6700                       		beq.s	loc_4EEA
00005956 0469 000A 0008             		subi.w	#$A,8(a1)
0000595C                            
0000595C                            loc_4EEA:
0000595C 337C 00D0 000A             		move.w	#$D0,$A(a1)
00005962 137C 0006 001A             		move.b	#6,$1A(a1)
00005968 137C 0006 0024             		move.b	#6,$24(a1)
0000596E 237C 0000 0000 0004        		move.l	#Map_obj80,4(a1)
00005976 337C 8551 0002             		move.w	#$8551,2(a1)
0000597C 137C 0000 0001             		move.b	#0,1(a1)
00005982 43E9 0040                  		lea	$40(a1),a1
00005986 51C9 FFC2                  		dbf	d1,Obj80_MiniSonLoop ; repeat for number of continues
0000598A 43E9 FFC0                  		lea	-$40(a1),a1
0000598E 1343 0028                  		move.b	d3,$28(a1)
00005992                            
00005992                            Obj80_ChkType:				; XREF: Obj80_Index
00005992 4A28 0028                  		tst.b	$28(a0)
00005996 6700                       		beq.s	loc_4F40
00005998 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000599E 6500                       		bcs.s	loc_4F40
000059A0 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
000059A4 0200 0001                  		andi.b	#1,d0
000059A8 6600                       		bne.s	loc_4F40
000059AA 4A78 D010                  		tst.w	($FFFFD010).w
000059AE 6600                       		bne.s	Obj80_Delete
000059B0 4E75                       		rts	
000059B2                            ; ===========================================================================
000059B2                            
000059B2                            loc_4F40:				; XREF: Obj80_ChkType
000059B2 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
000059B6 0200 000F                  		andi.b	#$F,d0
000059BA 6600                       		bne.s	Obj80_Display2
000059BC 0868 0000 001A             		bchg	#0,$1A(a0)
000059C2                            
000059C2                            Obj80_Display2:
000059C2 4EF9 0000 0000             		jmp	DisplaySprite
000059C8                            ; ===========================================================================
000059C8                            
000059C8                            Obj80_Delete:				; XREF: Obj80_ChkType
000059C8 4EF9 0000 0000             		jmp	DeleteObject
000059CE                            ; ===========================================================================
000059CE                            
000059CE                            ; ---------------------------------------------------------------------------
000059CE                            ; Object 81 - Sonic on the continue screen
000059CE                            ; ---------------------------------------------------------------------------
000059CE                            
000059CE                            Obj81:					; XREF: Obj_Index
000059CE 7000                       		moveq	#0,d0
000059D0 1028 0024                  		move.b	$24(a0),d0
000059D4 323B 0000                  		move.w	Obj81_Index(pc,d0.w),d1
000059D8 4EBB 1000                  		jsr	Obj81_Index(pc,d1.w)
000059DC 4EF9 0000 0000             		jmp	DisplaySprite
000059E2                            ; ===========================================================================
000059E2 0000                       Obj81_Index:	dc.w Obj81_Main-Obj81_Index
000059E4 0000                       		dc.w Obj81_ChkLand-Obj81_Index
000059E6 0000                       		dc.w Obj81_Animate-Obj81_Index
000059E8 0000                       		dc.w Obj81_Run-Obj81_Index
000059EA                            ; ===========================================================================
000059EA                            
000059EA                            Obj81_Main:				; XREF: Obj81_Index
000059EA 5428 0024                  		addq.b	#2,$24(a0)
000059EE 317C 00A0 0008             		move.w	#$A0,8(a0)
000059F4 317C 00C0 000C             		move.w	#$C0,$C(a0)
000059FA 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
00005A02 317C 0780 0002             		move.w	#$780,2(a0)
00005A08 117C 0004 0001             		move.b	#4,1(a0)
00005A0E 117C 0002 0018             		move.b	#2,$18(a0)
00005A14 117C 001D 001C             		move.b	#$1D,$1C(a0)	; use "floating" animation
00005A1A 317C 0400 0012             		move.w	#$400,$12(a0)	; make Sonic fall from above
00005A20                            
00005A20                            Obj81_ChkLand:				; XREF: Obj81_Index
00005A20 0C68 01A0 000C             		cmpi.w	#$1A0,$C(a0)	; has Sonic landed yet?
00005A26 6600                       		bne.s	Obj81_ShowFall	; if not, branch
00005A28 5428 0024                  		addq.b	#2,$24(a0)
00005A2C 4268 0012                  		clr.w	$12(a0)		; stop Sonic falling
00005A30 217C 0000 0000 0004        		move.l	#Map_obj80,4(a0)
00005A38 317C 8500 0002             		move.w	#$8500,2(a0)
00005A3E 117C 0000 001C             		move.b	#0,$1C(a0)
00005A44 6000                       		bra.s	Obj81_Animate
00005A46                            ; ===========================================================================
00005A46                            
00005A46                            Obj81_ShowFall:				; XREF: Obj81_ChkLand
00005A46 4EB9 0000 0000             		jsr	SpeedToPos
00005A4C 4EB9 0000 0000             		jsr	Sonic_Animate
00005A52 4EF9 0000 0000             		jmp	LoadSonicDynPLC
00005A58                            ; ===========================================================================
00005A58                            
00005A58                            Obj81_Animate:				; XREF: Obj81_Index
00005A58 4A38 F605                  		tst.b	($FFFFF605).w	; is any button	pressed?
00005A5C 6B00                       		bmi.s	Obj81_GetUp	; if yes, branch
00005A5E 43F9 0000 0000             		lea	(Ani_obj81).l,a1
00005A64 4EF9 0000 0000             		jmp	AnimateSprite
00005A6A                            ; ===========================================================================
00005A6A                            
00005A6A                            Obj81_GetUp:				; XREF: Obj81_Animate
00005A6A 5428 0024                  		addq.b	#2,$24(a0)
00005A6E 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
00005A76 317C 0780 0002             		move.w	#$780,2(a0)
00005A7C 117C 001E 001C             		move.b	#$1E,$1C(a0)	; use "getting up" animation
00005A82 4268 0014                  		clr.w	$14(a0)
00005A86 5168 000C                  		subq.w	#8,$C(a0)
00005A8A 103C 00E0                  		move.b	#$E0,d0
00005A8E 6100 B9E6                  		bsr.w	PlaySound_Special ; fade out music
00005A92                            
00005A92                            Obj81_Run:				; XREF: Obj81_Index
00005A92 0C68 0800 0014             		cmpi.w	#$800,$14(a0)	; check	Sonic's "run speed" (not moving)
00005A98 6600                       		bne.s	Obj81_AddSpeed	; if too low, branch
00005A9A 317C 1000 0010             		move.w	#$1000,$10(a0)	; move Sonic to	the right
00005AA0 6000                       		bra.s	Obj81_ShowRun
00005AA2                            ; ===========================================================================
00005AA2                            
00005AA2                            Obj81_AddSpeed:				; XREF: Obj81_Run
00005AA2 0668 0020 0014             		addi.w	#$20,$14(a0)	; increase "run	speed"
00005AA8                            
00005AA8                            Obj81_ShowRun:				; XREF: Obj81_Run
00005AA8 4EB9 0000 0000             		jsr	SpeedToPos
00005AAE 4EB9 0000 0000             		jsr	Sonic_Animate
00005AB4 4EF9 0000 0000             		jmp	LoadSonicDynPLC
00005ABA                            ; ===========================================================================
00005ABA                            Ani_obj81:
00005ABA                            	include "_anim\obj81.asm"
00005ABA                            ; ---------------------------------------------------------------------------
00005ABA                            ; Animation script - Sonic on the continue screen
00005ABA                            ; ---------------------------------------------------------------------------
00005ABA 0000                       		dc.w byte_504A-Ani_obj81
00005ABC 0401 0101 0102 0202 0303+  byte_504A:	dc.b 4,	1, 1, 1, 1, 2, 2, 2, 3,	3, $FF
00005AC8 00                         		even
00005AC8 00                         		even
00005AC8                            
00005AC8                            ; ---------------------------------------------------------------------------
00005AC8                            ; Sprite mappings - Continue screen
00005AC8                            ; ---------------------------------------------------------------------------
00005AC8                            Map_obj80:
00005AC8                            	include "_maps\obj80.asm"
00005AC8                            ; ---------------------------------------------------------------------------
00005AC8                            ; Sprite mappings - Continue screen
00005AC8                            ; ---------------------------------------------------------------------------
00005AC8 0000 0000                  		dc.w byte_5066-Map_obj80, byte_509E-Map_obj80
00005ACC 0000 0000                  		dc.w byte_50AE-Map_obj80, byte_50BE-Map_obj80
00005AD0 0000 0000                  		dc.w byte_50CE-Map_obj80, byte_50D9-Map_obj80
00005AD4 0000 0000                  		dc.w byte_50D9-Map_obj80, byte_50DF-Map_obj80
00005AD8 0B                         byte_5066:	dc.b $B
00005AD9 F805 0088 C4               		dc.b $F8, 5, 0,	$88, $C4 ; "CONTINUE", stars and countdown
00005ADE F805 00B2 D4               		dc.b $F8, 5, 0,	$B2, $D4
00005AE3 F805 00AE E4               		dc.b $F8, 5, 0,	$AE, $E4
00005AE8 F805 00C2 F4               		dc.b $F8, 5, 0,	$C2, $F4
00005AED F801 00A0 04               		dc.b $F8, 1, 0,	$A0, 4
00005AF2 F805 00AE 0C               		dc.b $F8, 5, 0,	$AE, $C
00005AF7 F805 00C6 1C               		dc.b $F8, 5, 0,	$C6, $1C
00005AFC F805 0090 2C               		dc.b $F8, 5, 0,	$90, $2C
00005B01 3805 2021 E8               		dc.b $38, 5, $20, $21, $E8
00005B06 3805 2021 08               		dc.b $38, 5, $20, $21, 8
00005B0B 3605 01FC F8               		dc.b $36, 5, 1,	$FC, $F8
00005B10 03                         byte_509E:	dc.b 3
00005B11 0405 0015 FC               		dc.b 4,	5, 0, $15, $FC	; Sonic	on floor
00005B16 F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
00005B1B F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
00005B20 03                         byte_50AE:	dc.b 3
00005B21 0405 0019 FC               		dc.b 4,	5, 0, $19, $FC	; Sonic	on floor #2
00005B26 F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
00005B2B F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
00005B30 03                         byte_50BE:	dc.b 3
00005B31 0405 001D FC               		dc.b 4,	5, 0, $1D, $FC	; Sonic	on floor #3
00005B36 F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
00005B3B F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
00005B40 02                         byte_50CE:	dc.b 2
00005B41 6009 2000 E8               		dc.b $60, 9, $20, 0, $E8 ; circle on the floor
00005B46 6009 2800 00               		dc.b $60, 9, $28, 0, 0
00005B4B 01                         byte_50D9:	dc.b 1
00005B4C 0006 0012 00               		dc.b 0,	6, 0, $12, 0	; mini Sonic
00005B51 01                         byte_50DF:	dc.b 1
00005B52 0006 0018 00               		dc.b 0,	6, 0, $18, 0	; mini Sonic #2
00005B58 00                         		even
00005B58 00                         		even
00005B58                            
00005B58                            ; ===========================================================================
00005B58                            ; ---------------------------------------------------------------------------
00005B58                            ; Ending sequence in Green Hill	Zone
00005B58                            ; ---------------------------------------------------------------------------
00005B58                            
00005B58                            EndingSequence:				; XREF: GameModeArray
00005B58 103C 00E4                  		move.b	#$E4,d0
00005B5C 6100 B918                  		bsr.w	PlaySound_Special ; stop music
00005B60 6100 C61E                  		bsr.w	Pal_FadeFrom
00005B64 43F8 D000                  		lea	($FFFFD000).w,a1
00005B68 7000                       		moveq	#0,d0
00005B6A 323C 07FF                  		move.w	#$7FF,d1
00005B6E                            
00005B6E                            End_ClrObjRam:
00005B6E 22C0                       		move.l	d0,(a1)+
00005B70 51C9 FFFC                  		dbf	d1,End_ClrObjRam ; clear object	RAM
00005B74                            
00005B74 43F8 F628                  		lea	($FFFFF628).w,a1
00005B78 7000                       		moveq	#0,d0
00005B7A 323C 0015                  		move.w	#$15,d1
00005B7E                            
00005B7E                            End_ClrRam:
00005B7E 22C0                       		move.l	d0,(a1)+
00005B80 51C9 FFFC                  		dbf	d1,End_ClrRam	; clear	variables
00005B84                            
00005B84 43F8 F700                  		lea	($FFFFF700).w,a1
00005B88 7000                       		moveq	#0,d0
00005B8A 323C 003F                  		move.w	#$3F,d1
00005B8E                            
00005B8E                            End_ClrRam2:
00005B8E 22C0                       		move.l	d0,(a1)+
00005B90 51C9 FFFC                  		dbf	d1,End_ClrRam2	; clear	variables
00005B94                            
00005B94 43F8 FE60                  		lea	($FFFFFE60).w,a1
00005B98 7000                       		moveq	#0,d0
00005B9A 323C 0047                  		move.w	#$47,d1
00005B9E                            
00005B9E                            End_ClrRam3:
00005B9E 22C0                       		move.l	d0,(a1)+
00005BA0 51C9 FFFC                  		dbf	d1,End_ClrRam3	; clear	variables
00005BA4                            
00005BA4 46FC 2700                  		move	#$2700,sr
00005BA8 3038 F60C                  		move.w	($FFFFF60C).w,d0
00005BAC 0200 00BF                  		andi.b	#$BF,d0
00005BB0 33C0 00C0 0004             		move.w	d0,($C00004).l
00005BB6 6100 B7C8                  		bsr.w	ClearScreen
00005BBA 4DF9 00C0 0004             		lea	($C00004).l,a6
00005BC0 3CBC 8B03                  		move.w	#$8B03,(a6)
00005BC4 3CBC 8230                  		move.w	#$8230,(a6)
00005BC8 3CBC 8407                  		move.w	#$8407,(a6)
00005BCC 3CBC 857C                  		move.w	#$857C,(a6)
00005BD0 3CBC 9001                  		move.w	#$9001,(a6)
00005BD4 3CBC 8004                  		move.w	#$8004,(a6)
00005BD8 3CBC 8720                  		move.w	#$8720,(a6)
00005BDC 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
00005BE2 3CB8 F624                  		move.w	($FFFFF624).w,(a6)
00005BE6 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
00005BEC 31FC 0600 FE10             		move.w	#$600,($FFFFFE10).w ; set level	number to 0600 (extra flowers)
00005BF2 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
00005BF8 6700                       		beq.s	End_LoadData	; if yes, branch
00005BFA 31FC 0601 FE10             		move.w	#$601,($FFFFFE10).w ; set level	number to 0601 (no flowers)
00005C00                            
00005C00                            End_LoadData:
00005C00 701C                       		moveq	#$1C,d0
00005C02 6100 BC52                  		bsr.w	RunPLC_ROM	; load ending sequence patterns
00005C06 4EB9 0000 0000             		jsr	Hud_Base
00005C0C 6100 0000                  		bsr.w	LevelSizeLoad
00005C10 6100 0000                  		bsr.w	DeformBgLayer
00005C14 08F8 0002 F754             		bset	#2,($FFFFF754).w
00005C1A 6100 0000                  		bsr.w	MainLoadBlockLoad
00005C1E 6100 0000                  		bsr.w	LoadTilesFromStart
00005C22 21FC 0000 0000 F796        		move.l	#Col_GHZ,($FFFFF796).w ; load collision	index
00005C2A 46FC 2300                  		move	#$2300,sr
00005C2E 41F9 0000 0000             		lea	(Kos_EndFlowers).l,a0 ;	load extra flower patterns
00005C34 43F8 9400                  		lea	($FFFF9400).w,a1 ; RAM address to buffer the patterns
00005C38 6100 BDCC                  		bsr.w	KosDec
00005C3C 7003                       		moveq	#3,d0
00005C3E 6100 C7EE                  		bsr.w	PalLoad1	; load Sonic's pallet
00005C42 303C 008B                  		move.w	#$8B,d0
00005C46 6100 B828                  		bsr.w	PlaySound	; play ending sequence music
00005C4A 0838 0006 F604             		btst	#6,($FFFFF604).w ; is button A pressed?
00005C50 6700                       		beq.s	End_LoadSonic	; if not, branch
00005C52 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
00005C58                            
00005C58                            End_LoadSonic:
00005C58 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
00005C5E 08F8 0000 D022             		bset	#0,($FFFFD022).w ; make	Sonic face left
00005C64 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
00005C6A 31FC 0400 F602             		move.w	#$400,($FFFFF602).w ; move Sonic to the	left
00005C70 31FC F800 D014             		move.w	#$F800,($FFFFD014).w ; set Sonic's speed
00005C76 11FC 0021 D040             		move.b	#$21,($FFFFD040).w ; load HUD object
00005C7C 4EB9 0000 0000             		jsr	ObjPosLoad
00005C82 4EB9 0000 0000             		jsr	ObjectsLoad
00005C88 4EB9 0000 0000             		jsr	BuildSprites
00005C8E 7000                       		moveq	#0,d0
00005C90 31C0 FE20                  		move.w	d0,($FFFFFE20).w
00005C94 21C0 FE22                  		move.l	d0,($FFFFFE22).w
00005C98 11C0 FE1B                  		move.b	d0,($FFFFFE1B).w
00005C9C 11C0 FE2C                  		move.b	d0,($FFFFFE2C).w
00005CA0 11C0 FE2D                  		move.b	d0,($FFFFFE2D).w
00005CA4 11C0 FE2E                  		move.b	d0,($FFFFFE2E).w
00005CA8 11C0 FE2F                  		move.b	d0,($FFFFFE2F).w
00005CAC 31C0 FE08                  		move.w	d0,($FFFFFE08).w
00005CB0 31C0 FE02                  		move.w	d0,($FFFFFE02).w
00005CB4 31C0 FE04                  		move.w	d0,($FFFFFE04).w
00005CB8 6100 EECA                  		bsr.w	OscillateNumInit
00005CBC 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w
00005CC2 11FC 0001 FE1D             		move.b	#1,($FFFFFE1D).w
00005CC8 11FC 0000 FE1E             		move.b	#0,($FFFFFE1E).w
00005CCE 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
00005CD4 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
00005CDA 6100 D6C6                  		bsr.w	DelayProgram
00005CDE 3038 F60C                  		move.w	($FFFFF60C).w,d0
00005CE2 0000 0040                  		ori.b	#$40,d0
00005CE6 33C0 00C0 0004             		move.w	d0,($C00004).l
00005CEC 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00005CF2 6100 C3D6                  		bsr.w	Pal_FadeTo
00005CF6                            
00005CF6                            ; ---------------------------------------------------------------------------
00005CF6                            ; Main ending sequence loop
00005CF6                            ; ---------------------------------------------------------------------------
00005CF6                            
00005CF6                            End_MainLoop:
00005CF6 6100 B78A                  		bsr.w	PauseGame
00005CFA 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
00005D00 6100 D6A0                  		bsr.w	DelayProgram
00005D04 5278 FE04                  		addq.w	#1,($FFFFFE04).w
00005D08 6100 0000                  		bsr.w	End_MoveSonic
00005D0C 4EB9 0000 0000             		jsr	ObjectsLoad
00005D12 6100 0000                  		bsr.w	DeformBgLayer
00005D16 4EB9 0000 0000             		jsr	BuildSprites
00005D1C 4EB9 0000 0000             		jsr	ObjPosLoad
00005D22 6100 BD82                  		bsr.w	PalCycle_Load
00005D26 6100 EEB2                  		bsr.w	OscillateNumDo
00005D2A 6100 EF3E                  		bsr.w	ChangeRingFrame
00005D2E 0C38 0018 F600             		cmpi.b	#$18,($FFFFF600).w ; is	scene number $18 (ending)?
00005D34 6700                       		beq.s	loc_52DA	; if yes, branch
00005D36 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; set scene to $1C (credits)
00005D3C 103C 0091                  		move.b	#$91,d0
00005D40 6100 B734                  		bsr.w	PlaySound_Special ; play credits music
00005D44 31FC 0000 FFF4             		move.w	#0,($FFFFFFF4).w ; set credits index number to 0
00005D4A 4E75                       		rts	
00005D4C                            ; ===========================================================================
00005D4C                            
00005D4C                            loc_52DA:
00005D4C 4A78 FE02                  		tst.w	($FFFFFE02).w	; is level set to restart?
00005D50 6700 FFA4                  		beq.w	End_MainLoop	; if not, branch
00005D54                            
00005D54 4278 FE02                  		clr.w	($FFFFFE02).w
00005D58 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00005D5E 4278 F794                  		clr.w	($FFFFF794).w
00005D62                            
00005D62                            End_AllEmlds:				; XREF: loc_5334
00005D62 6100 B71E                  		bsr.w	PauseGame
00005D66 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
00005D6C 6100 D634                  		bsr.w	DelayProgram
00005D70 5278 FE04                  		addq.w	#1,($FFFFFE04).w
00005D74 6100 0000                  		bsr.w	End_MoveSonic
00005D78 4EB9 0000 0000             		jsr	ObjectsLoad
00005D7E 6100 0000                  		bsr.w	DeformBgLayer
00005D82 4EB9 0000 0000             		jsr	BuildSprites
00005D88 4EB9 0000 0000             		jsr	ObjPosLoad
00005D8E 6100 EE4A                  		bsr.w	OscillateNumDo
00005D92 6100 EED6                  		bsr.w	ChangeRingFrame
00005D96 5378 F794                  		subq.w	#1,($FFFFF794).w
00005D9A 6A00                       		bpl.s	loc_5334
00005D9C 31FC 0002 F794             		move.w	#2,($FFFFF794).w
00005DA2 6100 C52A                  		bsr.w	Pal_ToWhite
00005DA6                            
00005DA6                            loc_5334:
00005DA6 4A78 FE02                  		tst.w	($FFFFFE02).w
00005DAA 6700 FFB6                  		beq.w	End_AllEmlds
00005DAE 4278 FE02                  		clr.w	($FFFFFE02).w
00005DB2 31FC 2E2F A480             		move.w	#$2E2F,($FFFFA480).w ; modify level layout
00005DB8 4BF9 00C0 0004             		lea	($C00004).l,a5
00005DBE 4DF9 00C0 0000             		lea	($C00000).l,a6
00005DC4 47F8 F700                  		lea	($FFFFF700).w,a3
00005DC8 49F8 A400                  		lea	($FFFFA400).w,a4
00005DCC 343C 4000                  		move.w	#$4000,d2
00005DD0 6100 0000                  		bsr.w	LoadTilesFromStart2
00005DD4 7013                       		moveq	#$13,d0
00005DD6 6100 C656                  		bsr.w	PalLoad1	; load ending pallet
00005DDA 6100 C426                  		bsr.w	Pal_MakeWhite
00005DDE 6000 FF16                  		bra.w	End_MainLoop
00005DE2                            
00005DE2                            ; ---------------------------------------------------------------------------
00005DE2                            ; Subroutine controlling Sonic on the ending sequence
00005DE2                            ; ---------------------------------------------------------------------------
00005DE2                            
00005DE2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005DE2                            
00005DE2                            
00005DE2                            End_MoveSonic:				; XREF: End_MainLoop
00005DE2 1038 F7D7                  		move.b	($FFFFF7D7).w,d0
00005DE6 6600                       		bne.s	End_MoveSonic2
00005DE8 0C78 0090 D008             		cmpi.w	#$90,($FFFFD008).w ; has Sonic passed $90 on y-axis?
00005DEE 6400                       		bcc.s	End_MoveSonExit	; if not, branch
00005DF0 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
00005DF4 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	player's controls
00005DFA 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; move Sonic to the	right
00005E00 4E75                       		rts	
00005E02                            ; ===========================================================================
00005E02                            
00005E02                            End_MoveSonic2:				; XREF: End_MoveSonic
00005E02 5500                       		subq.b	#2,d0
00005E04 6600                       		bne.s	End_MoveSonic3
00005E06 0C78 00A0 D008             		cmpi.w	#$A0,($FFFFD008).w ; has Sonic passed $A0 on y-axis?
00005E0C 6500                       		bcs.s	End_MoveSonExit	; if not, branch
00005E0E 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
00005E12 7000                       		moveq	#0,d0
00005E14 11C0 F7CC                  		move.b	d0,($FFFFF7CC).w
00005E18 31C0 F602                  		move.w	d0,($FFFFF602).w ; stop	Sonic moving
00005E1C 31C0 D014                  		move.w	d0,($FFFFD014).w
00005E20 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w
00005E26 11FC 0003 D01A             		move.b	#3,($FFFFD01A).w
00005E2C 31FC 0505 D01C             		move.w	#$505,($FFFFD01C).w ; use "standing" animation
00005E32 11FC 0003 D01E             		move.b	#3,($FFFFD01E).w
00005E38 4E75                       		rts	
00005E3A                            ; ===========================================================================
00005E3A                            
00005E3A                            End_MoveSonic3:				; XREF: End_MoveSonic
00005E3A 5500                       		subq.b	#2,d0
00005E3C 6600                       		bne.s	End_MoveSonExit
00005E3E 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
00005E42 31FC 00A0 D008             		move.w	#$A0,($FFFFD008).w
00005E48 11FC 0087 D000             		move.b	#$87,($FFFFD000).w ; load Sonic	ending sequence	object
00005E4E 4278 D024                  		clr.w	($FFFFD024).w
00005E52                            
00005E52                            End_MoveSonExit:
00005E52 4E75                       		rts	
00005E54                            ; End of function End_MoveSonic
00005E54                            
00005E54                            ; ===========================================================================
00005E54                            ; ---------------------------------------------------------------------------
00005E54                            ; Object 87 - Sonic on ending sequence
00005E54                            ; ---------------------------------------------------------------------------
00005E54                            
00005E54                            Obj87:					; XREF: Obj_Index
00005E54 7000                       		moveq	#0,d0
00005E56 1028 0025                  		move.b	$25(a0),d0
00005E5A 323B 0000                  		move.w	Obj87_Index(pc,d0.w),d1
00005E5E 4EBB 1000                  		jsr	Obj87_Index(pc,d1.w)
00005E62 4EF9 0000 0000             		jmp	DisplaySprite
00005E68                            ; ===========================================================================
00005E68 0000 0000                  Obj87_Index:	dc.w Obj87_Main-Obj87_Index, Obj87_MakeEmlds-Obj87_Index
00005E6C 0000 0000                  		dc.w Obj87_Animate-Obj87_Index,	Obj87_LookUp-Obj87_Index
00005E70 0000 0000                  		dc.w Obj87_ClrObjRam-Obj87_Index, Obj87_Animate-Obj87_Index
00005E74 0000 0000                  		dc.w Obj87_MakeLogo-Obj87_Index, Obj87_Animate-Obj87_Index
00005E78 0000 0000                  		dc.w Obj87_Leap-Obj87_Index, Obj87_Animate-Obj87_Index
00005E7C                            ; ===========================================================================
00005E7C                            
00005E7C                            Obj87_Main:				; XREF: Obj87_Index
00005E7C 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
00005E82 6700                       		beq.s	Obj87_Main2	; if yes, branch
00005E84 0628 0010 0025             		addi.b	#$10,$25(a0)	; else,	skip emerald sequence
00005E8A 317C 00D8 0030             		move.w	#$D8,$30(a0)
00005E90 4E75                       		rts	
00005E92                            ; ===========================================================================
00005E92                            
00005E92                            Obj87_Main2:				; XREF: Obj87_Main
00005E92 5428 0025                  		addq.b	#2,$25(a0)
00005E96 217C 0000 0000 0004        		move.l	#Map_obj87,4(a0)
00005E9E 317C 03E1 0002             		move.w	#$3E1,2(a0)
00005EA4 117C 0004 0001             		move.b	#4,1(a0)
00005EAA 4228 0022                  		clr.b	$22(a0)
00005EAE 117C 0002 0018             		move.b	#2,$18(a0)
00005EB4 117C 0000 001A             		move.b	#0,$1A(a0)
00005EBA 317C 0050 0030             		move.w	#$50,$30(a0)	; set duration for Sonic to pause
00005EC0                            
00005EC0                            Obj87_MakeEmlds:			; XREF: Obj87_Index
00005EC0 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from duration
00005EC4 6600                       		bne.s	Obj87_Wait
00005EC6 5428 0025                  		addq.b	#2,$25(a0)
00005ECA 317C 0001 001C             		move.w	#1,$1C(a0)
00005ED0 11FC 0088 D400             		move.b	#$88,($FFFFD400).w ; load chaos	emeralds objects
00005ED6                            
00005ED6                            Obj87_Wait:
00005ED6 4E75                       		rts	
00005ED8                            ; ===========================================================================
00005ED8                            
00005ED8                            Obj87_LookUp:				; XREF: Obj87_Index
00005ED8 0C79 2000 00FF D43C        		cmpi.w	#$2000,($FFD43C).l
00005EE0 6600                       		bne.s	locret_5480
00005EE2 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; set level to	restart	(causes	flash)
00005EE8 317C 005A 0030             		move.w	#$5A,$30(a0)
00005EEE 5428 0025                  		addq.b	#2,$25(a0)
00005EF2                            
00005EF2                            locret_5480:
00005EF2 4E75                       		rts	
00005EF4                            ; ===========================================================================
00005EF4                            
00005EF4                            Obj87_ClrObjRam:			; XREF: Obj87_Index
00005EF4 5368 0030                  		subq.w	#1,$30(a0)
00005EF8 6600                       		bne.s	Obj87_Wait2
00005EFA 43F8 D400                  		lea	($FFFFD400).w,a1
00005EFE 323C 00FF                  		move.w	#$FF,d1
00005F02                            
00005F02                            Obj87_ClrLoop:
00005F02 4299                       		clr.l	(a1)+
00005F04 51C9 FFFC                  		dbf	d1,Obj87_ClrLoop ; clear the object RAM
00005F08 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w
00005F0E 5428 0025                  		addq.b	#2,$25(a0)
00005F12 117C 0001 001C             		move.b	#1,$1C(a0)
00005F18 317C 003C 0030             		move.w	#$3C,$30(a0)
00005F1E                            
00005F1E                            Obj87_Wait2:
00005F1E 4E75                       		rts	
00005F20                            ; ===========================================================================
00005F20                            
00005F20                            Obj87_MakeLogo:				; XREF: Obj87_Index
00005F20 5368 0030                  		subq.w	#1,$30(a0)
00005F24 6600                       		bne.s	Obj87_Wait3
00005F26 5428 0025                  		addq.b	#2,$25(a0)
00005F2A 317C 00B4 0030             		move.w	#$B4,$30(a0)
00005F30 117C 0002 001C             		move.b	#2,$1C(a0)
00005F36 11FC 0089 D400             		move.b	#$89,($FFFFD400).w ; load "SONIC THE HEDGEHOG" object
00005F3C                            
00005F3C                            Obj87_Wait3:
00005F3C 4E75                       		rts	
00005F3E                            ; ===========================================================================
00005F3E                            
00005F3E                            Obj87_Animate:				; XREF: Obj87_Index
00005F3E 43F9 0000 0000             		lea	(Ani_obj87).l,a1
00005F44 4EF9 0000 0000             		jmp	AnimateSprite
00005F4A                            ; ===========================================================================
00005F4A                            
00005F4A                            Obj87_Leap:				; XREF: Obj87_Index
00005F4A 5368 0030                  		subq.w	#1,$30(a0)
00005F4E 6600                       		bne.s	Obj87_Wait4
00005F50 5428 0025                  		addq.b	#2,$25(a0)
00005F54 217C 0000 0000 0004        		move.l	#Map_obj87,4(a0)
00005F5C 317C 03E1 0002             		move.w	#$3E1,2(a0)
00005F62 117C 0004 0001             		move.b	#4,1(a0)
00005F68 4228 0022                  		clr.b	$22(a0)
00005F6C 117C 0002 0018             		move.b	#2,$18(a0)
00005F72 117C 0005 001A             		move.b	#5,$1A(a0)
00005F78 117C 0002 001C             		move.b	#2,$1C(a0)	; use "leaping"	animation
00005F7E 11FC 0089 D400             		move.b	#$89,($FFFFD400).w ; load "SONIC THE HEDGEHOG" object
00005F84 60B8                       		bra.s	Obj87_Animate
00005F86                            ; ===========================================================================
00005F86                            
00005F86                            Obj87_Wait4:				; XREF: Obj87_Leap
00005F86 4E75                       		rts	
00005F88                            ; ===========================================================================
00005F88                            Ani_obj87:
00005F88                            	include "_anim\obj87.asm"
00005F88                            ; ---------------------------------------------------------------------------
00005F88                            ; Animation script - Sonic on the ending sequence
00005F88                            ; ---------------------------------------------------------------------------
00005F88 0000                       		dc.w byte_551C-Ani_obj87
00005F8A 0000                       		dc.w byte_552A-Ani_obj87
00005F8C 0000                       		dc.w byte_5534-Ani_obj87
00005F8E 0301 0001 0001 0001 0001+  byte_551C:	dc.b 3,	1, 0, 1, 0, 1, 0, 1, 0,	1, 0, 1, 2, $FA
00005F9C 0503 0403 0403 0403 FA00   byte_552A:	dc.b 5,	3, 4, 3, 4, 3, 4, 3, $FA, 0
00005FA6 0305 0505 0607 FE01        byte_5534:	dc.b 3,	5, 5, 5, 6, 7, $FE, 1
00005FAE                            		even
00005FAE                            		even
00005FAE                            
00005FAE                            ; ===========================================================================
00005FAE                            ; ---------------------------------------------------------------------------
00005FAE                            ; Object 88 - chaos emeralds on	the ending sequence
00005FAE                            ; ---------------------------------------------------------------------------
00005FAE                            
00005FAE                            Obj88:					; XREF: Obj_Index
00005FAE 7000                       		moveq	#0,d0
00005FB0 1028 0024                  		move.b	$24(a0),d0
00005FB4 323B 0000                  		move.w	Obj88_Index(pc,d0.w),d1
00005FB8 4EBB 1000                  		jsr	Obj88_Index(pc,d1.w)
00005FBC 4EF9 0000 0000             		jmp	DisplaySprite
00005FC2                            ; ===========================================================================
00005FC2 0000                       Obj88_Index:	dc.w Obj88_Main-Obj88_Index
00005FC4 0000                       		dc.w Obj88_Move-Obj88_Index
00005FC6                            ; ===========================================================================
00005FC6                            
00005FC6                            Obj88_Main:				; XREF: Obj88_Index
00005FC6 0C38 0002 D01A             		cmpi.b	#2,($FFFFD01A).w
00005FCC 6700                       		beq.s	Obj88_Main2
00005FCE 588F                       		addq.l	#4,sp
00005FD0 4E75                       		rts	
00005FD2                            ; ===========================================================================
00005FD2                            
00005FD2                            Obj88_Main2:				; XREF: Obj88_Main
00005FD2 3178 D008 0008             		move.w	($FFFFD008).w,8(a0) ; match X position with Sonic
00005FD8 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0) ; match Y position	with Sonic
00005FDE 2248                       		movea.l	a0,a1
00005FE0 7600                       		moveq	#0,d3
00005FE2 7401                       		moveq	#1,d2
00005FE4 7205                       		moveq	#5,d1
00005FE6                            
00005FE6                            Obj88_MainLoop:
00005FE6 12BC 0088                  		move.b	#$88,(a1)	; load chaos emerald object
00005FEA 5429 0024                  		addq.b	#2,$24(a1)
00005FEE 237C 0000 0000 0004        		move.l	#Map_obj88,4(a1)
00005FF6 337C 03C5 0002             		move.w	#$3C5,2(a1)
00005FFC 137C 0004 0001             		move.b	#4,1(a1)
00006002 137C 0001 0018             		move.b	#1,$18(a1)
00006008 3368 0008 0038             		move.w	8(a0),$38(a1)
0000600E 3368 000C 003A             		move.w	$C(a0),$3A(a1)
00006014 1342 001C                  		move.b	d2,$1C(a1)
00006018 1342 001A                  		move.b	d2,$1A(a1)
0000601C 5202                       		addq.b	#1,d2
0000601E 1343 0026                  		move.b	d3,$26(a1)
00006022 0603 002A                  		addi.b	#$2A,d3
00006026 43E9 0040                  		lea	$40(a1),a1
0000602A 51C9 FFBA                  		dbf	d1,Obj88_MainLoop ; repeat 5 more times
0000602E                            
0000602E                            Obj88_Move:				; XREF: Obj88_Index
0000602E 3028 003E                  		move.w	$3E(a0),d0
00006032 D168 0026                  		add.w	d0,$26(a0)
00006036 1028 0026                  		move.b	$26(a0),d0
0000603A 4EB9 0000 33D4             		jsr	(CalcSine).l
00006040 7800                       		moveq	#0,d4
00006042 1828 003C                  		move.b	$3C(a0),d4
00006046 C3C4                       		muls.w	d4,d1
00006048 E081                       		asr.l	#8,d1
0000604A C1C4                       		muls.w	d4,d0
0000604C E080                       		asr.l	#8,d0
0000604E D268 0038                  		add.w	$38(a0),d1
00006052 D068 003A                  		add.w	$3A(a0),d0
00006056 3141 0008                  		move.w	d1,8(a0)
0000605A 3140 000C                  		move.w	d0,$C(a0)
0000605E 0C68 2000 003C             		cmpi.w	#$2000,$3C(a0)
00006064 6700                       		beq.s	loc_55FA
00006066 0668 0020 003C             		addi.w	#$20,$3C(a0)
0000606C                            
0000606C                            loc_55FA:
0000606C 0C68 2000 003E             		cmpi.w	#$2000,$3E(a0)
00006072 6700                       		beq.s	loc_5608
00006074 0668 0020 003E             		addi.w	#$20,$3E(a0)
0000607A                            
0000607A                            loc_5608:
0000607A 0C68 0140 003A             		cmpi.w	#$140,$3A(a0)
00006080 6700                       		beq.s	locret_5614
00006082 5368 003A                  		subq.w	#1,$3A(a0)
00006086                            
00006086                            locret_5614:
00006086 4E75                       		rts	
00006088                            ; ===========================================================================
00006088                            ; ---------------------------------------------------------------------------
00006088                            ; Object 89 - "SONIC THE HEDGEHOG" text	on the ending sequence
00006088                            ; ---------------------------------------------------------------------------
00006088                            
00006088                            Obj89:					; XREF: Obj_Index
00006088 7000                       		moveq	#0,d0
0000608A 1028 0024                  		move.b	$24(a0),d0
0000608E 323B 0000                  		move.w	Obj89_Index(pc,d0.w),d1
00006092 4EFB 1000                  		jmp	Obj89_Index(pc,d1.w)
00006096                            ; ===========================================================================
00006096 0000                       Obj89_Index:	dc.w Obj89_Main-Obj89_Index
00006098 0000                       		dc.w Obj89_Move-Obj89_Index
0000609A 0000                       		dc.w Obj89_GotoCredits-Obj89_Index
0000609C                            ; ===========================================================================
0000609C                            
0000609C                            Obj89_Main:				; XREF: Obj89_Index
0000609C 5428 0024                  		addq.b	#2,$24(a0)
000060A0 317C FFE0 0008             		move.w	#-$20,8(a0)	; object starts	outside	the level boundary
000060A6 317C 00D8 000A             		move.w	#$D8,$A(a0)
000060AC 217C 0000 0000 0004        		move.l	#Map_obj89,4(a0)
000060B4 317C 05C5 0002             		move.w	#$5C5,2(a0)
000060BA 117C 0000 0001             		move.b	#0,1(a0)
000060C0 117C 0000 0018             		move.b	#0,$18(a0)
000060C6                            
000060C6                            Obj89_Move:				; XREF: Obj89_Index
000060C6 0C68 00C0 0008             		cmpi.w	#$C0,8(a0)	; has object reached $C0?
000060CC 6700                       		beq.s	Obj89_Delay	; if yes, branch
000060CE 0668 0010 0008             		addi.w	#$10,8(a0)	; move object to the right
000060D4 6000 A22A                  		bra.w	jmp_DisplaySprite
000060D8                            ; ===========================================================================
000060D8                            
000060D8                            Obj89_Delay:				; XREF: Obj89_Move
000060D8 5428 0024                  		addq.b	#2,$24(a0)
000060DC 317C 0078 0030             		move.w	#120,$30(a0)	; set duration for delay (2 seconds)
000060E2                            
000060E2                            Obj89_GotoCredits:			; XREF: Obj89_Index
000060E2 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from duration
000060E6 6A00                       		bpl.s	Obj89_Display
000060E8 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; exit to credits
000060EE                            
000060EE                            Obj89_Display:
000060EE 6000 A210                  		bra.w	jmp_DisplaySprite
000060F2                            ; ===========================================================================
000060F2                            ; ---------------------------------------------------------------------------
000060F2                            ; Sprite mappings - Sonic on the ending	sequence
000060F2                            ; ---------------------------------------------------------------------------
000060F2                            Map_obj87:
000060F2                            	include "_maps\obj87.asm"
000060F2                            ; ---------------------------------------------------------------------------
000060F2                            ; Sprite mappings - Sonic on the ending	sequence
000060F2                            ; ---------------------------------------------------------------------------
000060F2 0000 0000                  		dc.w byte_5690-Map_obj87, byte_569B-Map_obj87
000060F6 0000 0000                  		dc.w byte_56AB-Map_obj87, byte_56B6-Map_obj87
000060FA 0000 0000                  		dc.w byte_56C1-Map_obj87, byte_56CC-Map_obj87
000060FE 0000 0000                  		dc.w byte_56DC-Map_obj87, byte_5700-Map_obj87
00006102 02                         byte_5690:	dc.b 2
00006103 EC0B 0000 F8               		dc.b $EC, $B, 0, 0, $F8	; holding emeralds
00006108 0C0C 000C F0               		dc.b $C, $C, 0,	$C, $F0
0000610D 03                         byte_569B:	dc.b 3
0000610E FC0D 0010 F0               		dc.b $FC, $D, 0, $10, $F0 ; holding emeralds (glowing)
00006113 EC0B 0000 F8               		dc.b $EC, $B, 0, 0, $F8
00006118 0C0C 000C F0               		dc.b $C, $C, 0,	$C, $F0
0000611D 02                         byte_56AB:	dc.b 2
0000611E EC09 0018 F8               		dc.b $EC, 9, 0,	$18, $F8 ; looking up
00006123 FC0E 001E F0               		dc.b $FC, $E, 0, $1E, $F0
00006128 02                         byte_56B6:	dc.b 2
00006129 EC09 002A F8               		dc.b $EC, 9, 0,	$2A, $F8 ; confused
0000612E FC0E 0030 F0               		dc.b $FC, $E, 0, $30, $F0
00006133 02                         byte_56C1:	dc.b 2
00006134 EC09 082A F0               		dc.b $EC, 9, 8,	$2A, $F0 ; confused #2
00006139 FC0E 0830 F0               		dc.b $FC, $E, 8, $30, $F0
0000613E 03                         byte_56CC:	dc.b 3
0000613F EC06 003C F0               		dc.b $EC, 6, 0,	$3C, $F0 ; leaping
00006144 EC06 083C 00               		dc.b $EC, 6, 8,	$3C, 0
00006149 040D 0042 F0               		dc.b 4,	$D, 0, $42, $F0
0000614E 07                         byte_56DC:	dc.b 7
0000614F B20C 004A F8               		dc.b $B2, $C, 0, $4A, $F8 ; leaping #2
00006154 BA0F 004E F0               		dc.b $BA, $F, 0, $4E, $F0
00006159 BA05 005E 10               		dc.b $BA, 5, 0,	$5E, $10
0000615E CA02 0062 10               		dc.b $CA, 2, 0,	$62, $10
00006163 DA0C 0065 F0               		dc.b $DA, $C, 0, $65, $F0
00006168 E208 0069 F8               		dc.b $E2, 8, 0,	$69, $F8
0000616D EA05 006C F8               		dc.b $EA, 5, 0,	$6C, $F8
00006172 18                         byte_5700:	dc.b $18
00006173 800F 0070 F8               		dc.b $80, $F, 0, $70, $F8 ; leaping #3
00006178 900B 0080 E0               		dc.b $90, $B, 0, $80, $E0
0000617D 900B 008C 18               		dc.b $90, $B, 0, $8C, $18
00006182 980B 0098 30               		dc.b $98, $B, 0, $98, $30
00006187 A00F 00A4 58               		dc.b $A0, $F, 0, $A4, $58
0000618C 8800 00B4 F0               		dc.b $88, 0, 0,	$B4, $F0
00006191 8005 00B5 18               		dc.b $80, 5, 0,	$B5, $18
00006196 A00F 00B9 F8               		dc.b $A0, $F, 0, $B9, $F8
0000619B B00B 00C9 E0               		dc.b $B0, $B, 0, $C9, $E0
000061A0 B80F 00D5 38               		dc.b $B8, $F, 0, $D5, $38
000061A5 A805 00E5 48               		dc.b $A8, 5, 0,	$E5, $48
000061AA C002 00E9 58               		dc.b $C0, 2, 0,	$E9, $58
000061AF C00F 00EC F8               		dc.b $C0, $F, 0, $EC, $F8
000061B4 B80F 00FC 18               		dc.b $B8, $F, 0, $FC, $18
000061B9 B008 010C 18               		dc.b $B0, 8, 1,	$C, $18
000061BE D80D 010F 30               		dc.b $D8, $D, 1, $F, $30
000061C3 D808 0117 18               		dc.b $D8, 8, 1,	$17, $18
000061C8 D80F 011A D8               		dc.b $D8, $F, 1, $1A, $D8
000061CD E00D 012A F8               		dc.b $E0, $D, 1, $2A, $F8
000061D2 E000 0132 28               		dc.b $E0, 0, 1,	$32, $28
000061D7 D004 0133 E0               		dc.b $D0, 4, 1,	$33, $E0
000061DC E805 0135 C8               		dc.b $E8, 5, 1,	$35, $C8
000061E1 F80C 0139 C8               		dc.b $F8, $C, 1, $39, $C8
000061E6 F006 013D F8               		dc.b $F0, 6, 1,	$3D, $F8
000061EC 00                         		even
000061EC 00                         		even
000061EC                            
000061EC                            ; ---------------------------------------------------------------------------
000061EC                            ; Sprite mappings - chaos emeralds on the ending sequence
000061EC                            ; ---------------------------------------------------------------------------
000061EC                            Map_obj88:
000061EC                            	include "_maps\obj88.asm"
000061EC                            ; ---------------------------------------------------------------------------
000061EC                            ; Sprite mappings - chaos emeralds on the ending sequence
000061EC                            ; ---------------------------------------------------------------------------
000061EC 0000 0000                  		dc.w byte_5788-Map_obj88, byte_578E-Map_obj88
000061F0 0000 0000                  		dc.w byte_5794-Map_obj88, byte_579A-Map_obj88
000061F4 0000 0000                  		dc.w byte_57A0-Map_obj88, byte_57A6-Map_obj88
000061F8 0000                       		dc.w byte_57AC-Map_obj88
000061FA 01                         byte_5788:	dc.b 1
000061FB F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00006200 01                         byte_578E:	dc.b 1
00006201 F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
00006206 01                         byte_5794:	dc.b 1
00006207 F805 4010 F8               		dc.b $F8, 5, $40, $10, $F8
0000620C 01                         byte_579A:	dc.b 1
0000620D F805 2018 F8               		dc.b $F8, 5, $20, $18, $F8
00006212 01                         byte_57A0:	dc.b 1
00006213 F805 4014 F8               		dc.b $F8, 5, $40, $14, $F8
00006218 01                         byte_57A6:	dc.b 1
00006219 F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
0000621E 01                         byte_57AC:	dc.b 1
0000621F F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
00006224                            		even
00006224                            		even
00006224                            
00006224                            ; ---------------------------------------------------------------------------
00006224                            ; Sprite mappings - "SONIC THE HEDGEHOG" text on the ending sequence
00006224                            ; ---------------------------------------------------------------------------
00006224                            Map_obj89:
00006224                            	include "_maps\obj89.asm"
00006224                            ; ---------------------------------------------------------------------------
00006224                            ; Sprite mappings - "SONIC THE HEDGEHOG" text on the ending sequence
00006224                            ; ---------------------------------------------------------------------------
00006224 0000                       		dc.w byte_57B4-Map_obj89
00006226 03                         byte_57B4:	dc.b 3
00006227 F00F 0000 D0               		dc.b $F0, $F, 0, 0, $D0
0000622C F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
00006231 F00F 0020 10               		dc.b $F0, $F, 0, $20, $10
00006236                            		even
00006236                            		even
00006236                            
00006236                            ; ===========================================================================
00006236                            ; ---------------------------------------------------------------------------
00006236                            ; Credits ending sequence
00006236                            ; ---------------------------------------------------------------------------
00006236                            
00006236                            Credits:				; XREF: GameModeArray
00006236 6100 B510                  		bsr.w	ClearPLC
0000623A 6100 BF44                  		bsr.w	Pal_FadeFrom
0000623E 4DF9 00C0 0004             		lea	($C00004).l,a6
00006244 3CBC 8004                  		move.w	#$8004,(a6)
00006248 3CBC 8230                  		move.w	#$8230,(a6)
0000624C 3CBC 8407                  		move.w	#$8407,(a6)
00006250 3CBC 9001                  		move.w	#$9001,(a6)
00006254 3CBC 9200                  		move.w	#$9200,(a6)
00006258 3CBC 8B03                  		move.w	#$8B03,(a6)
0000625C 3CBC 8720                  		move.w	#$8720,(a6)
00006260 4238 F64E                  		clr.b	($FFFFF64E).w
00006264 6100 B11A                  		bsr.w	ClearScreen
00006268 43F8 D000                  		lea	($FFFFD000).w,a1
0000626C 7000                       		moveq	#0,d0
0000626E 323C 07FF                  		move.w	#$7FF,d1
00006272                            
00006272                            Cred_ClrObjRam:
00006272 22C0                       		move.l	d0,(a1)+
00006274 51C9 FFFC                  		dbf	d1,Cred_ClrObjRam ; clear object RAM
00006278                            
00006278 23FC 7400 0002 00C0 0004   		move.l	#$74000002,($C00004).l
00006282 41F9 0000 0000             		lea	(Nem_CreditText).l,a0 ;	load credits alphabet patterns
00006288 6100 B320                  		bsr.w	NemDec
0000628C 43F8 FB80                  		lea	($FFFFFB80).w,a1
00006290 7000                       		moveq	#0,d0
00006292 323C 001F                  		move.w	#$1F,d1
00006296                            
00006296                            Cred_ClrPallet:
00006296 22C0                       		move.l	d0,(a1)+
00006298 51C9 FFFC                  		dbf	d1,Cred_ClrPallet ; fill pallet	with black ($0000)
0000629C                            
0000629C 7003                       		moveq	#3,d0
0000629E 6100 C18E                  		bsr.w	PalLoad1	; load Sonic's pallet
000062A2 11FC 008A D080             		move.b	#$8A,($FFFFD080).w ; load credits object
000062A8 4EB9 0000 0000             		jsr	ObjectsLoad
000062AE 4EB9 0000 0000             		jsr	BuildSprites
000062B4 6100 0000                  		bsr.w	EndingDemoLoad
000062B8 7000                       		moveq	#0,d0
000062BA 1038 FE10                  		move.b	($FFFFFE10).w,d0
000062BE E948                       		lsl.w	#4,d0
000062C0 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2 ;	load block mappings etc
000062C6 45F2 0000                  		lea	(a2,d0.w),a2
000062CA 7000                       		moveq	#0,d0
000062CC 1012                       		move.b	(a2),d0
000062CE 6700                       		beq.s	loc_5862
000062D0 6100 B418                  		bsr.w	LoadPLC		; load level patterns
000062D4                            
000062D4                            loc_5862:
000062D4 7001                       		moveq	#1,d0
000062D6 6100 B412                  		bsr.w	LoadPLC		; load standard	level patterns
000062DA 31FC 0078 F614             		move.w	#120,($FFFFF614).w ; display a credit for 2 seconds
000062E0 6100 BDE8                  		bsr.w	Pal_FadeTo
000062E4                            
000062E4                            Cred_WaitLoop:
000062E4 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
000062EA 6100 D0B6                  		bsr.w	DelayProgram
000062EE 6100 B466                  		bsr.w	RunPLC_RAM
000062F2 4A78 F614                  		tst.w	($FFFFF614).w	; have 2 seconds elapsed?
000062F6 66EC                       		bne.s	Cred_WaitLoop	; if not, branch
000062F8 4AB8 F680                  		tst.l	($FFFFF680).w	; have level gfx finished decompressing?
000062FC 66E6                       		bne.s	Cred_WaitLoop	; if not, branch
000062FE 0C78 0009 FFF4             		cmpi.w	#9,($FFFFFFF4).w ; have	the credits finished?
00006304 6700 0000                  		beq.w	TryAgainEnd	; if yes, branch
00006308 4E75                       		rts	
0000630A                            
0000630A                            ; ---------------------------------------------------------------------------
0000630A                            ; Ending sequence demo loading subroutine
0000630A                            ; ---------------------------------------------------------------------------
0000630A                            
0000630A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000630A                            
0000630A                            
0000630A                            EndingDemoLoad:				; XREF: Credits
0000630A 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
0000630E 0240 000F                  		andi.w	#$F,d0
00006312 D040                       		add.w	d0,d0
00006314 303B 0000                  		move.w	EndDemo_Levels(pc,d0.w),d0 ; load level	array
00006318 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level from level	array
0000631C 5278 FFF4                  		addq.w	#1,($FFFFFFF4).w
00006320 0C78 0009 FFF4             		cmpi.w	#9,($FFFFFFF4).w ; have	credits	finished?
00006326 6400                       		bcc.s	EndDemo_Exit	; if yes, branch
00006328 31FC 8001 FFF0             		move.w	#$8001,($FFFFFFF0).w ; force demo mode
0000632E 11FC 0008 F600             		move.b	#8,($FFFFF600).w ; set game mode to 08 (demo)
00006334 11FC 0003 FE12             		move.b	#3,($FFFFFE12).w ; set lives to	3
0000633A 7000                       		moveq	#0,d0
0000633C 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00006340 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00006344 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00006348 11C0 FE30                  		move.b	d0,($FFFFFE30).w ; clear lamppost counter
0000634C 0C78 0004 FFF4             		cmpi.w	#4,($FFFFFFF4).w ; is SLZ demo running?
00006352 6600                       		bne.s	EndDemo_Exit	; if not, branch
00006354 43F9 0000 0000             		lea	(EndDemo_LampVar).l,a1 ; load lamppost variables
0000635A 45F8 FE30                  		lea	($FFFFFE30).w,a2
0000635E 303C 0008                  		move.w	#8,d0
00006362                            
00006362                            EndDemo_LampLoad:
00006362 24D9                       		move.l	(a1)+,(a2)+
00006364 51C8 FFFC                  		dbf	d0,EndDemo_LampLoad
00006368                            
00006368                            EndDemo_Exit:
00006368 4E75                       		rts	
0000636A                            ; End of function EndingDemoLoad
0000636A                            
0000636A                            ; ===========================================================================
0000636A                            ; ---------------------------------------------------------------------------
0000636A                            ; Levels used in the end sequence demos
0000636A                            ; ---------------------------------------------------------------------------
0000636A                            EndDemo_Levels:	incbin	misc\dm_ord2.bin
0000637A                            
0000637A                            ; ---------------------------------------------------------------------------
0000637A                            ; Lamppost variables in the end sequence demo (Star Light Zone)
0000637A                            ; ---------------------------------------------------------------------------
0000637A                            EndDemo_LampVar:
0000637A 0101                       		dc.b 1,	1		; XREF: EndingDemoLoad
0000637C 0A00 062C 000D             		dc.w $A00, $62C, $D
00006382 0000 0000                  		dc.l 0
00006386 0000                       		dc.b 0,	0
00006388 0800 0957 05CC 04AB 03A6+  		dc.w $800, $957, $5CC, $4AB, $3A6, 0, $28C, 0, 0, $308
0000639C 0101                       		dc.b 1,	1
0000639E                            ; ===========================================================================
0000639E                            ; ---------------------------------------------------------------------------
0000639E                            ; "TRY AGAIN" and "END"	screens
0000639E                            ; ---------------------------------------------------------------------------
0000639E                            
0000639E                            TryAgainEnd:				; XREF: Credits
0000639E 6100 B3A8                  		bsr.w	ClearPLC
000063A2 6100 BDDC                  		bsr.w	Pal_FadeFrom
000063A6 4DF9 00C0 0004             		lea	($C00004).l,a6
000063AC 3CBC 8004                  		move.w	#$8004,(a6)
000063B0 3CBC 8230                  		move.w	#$8230,(a6)
000063B4 3CBC 8407                  		move.w	#$8407,(a6)
000063B8 3CBC 9001                  		move.w	#$9001,(a6)
000063BC 3CBC 9200                  		move.w	#$9200,(a6)
000063C0 3CBC 8B03                  		move.w	#$8B03,(a6)
000063C4 3CBC 8720                  		move.w	#$8720,(a6)
000063C8 4238 F64E                  		clr.b	($FFFFF64E).w
000063CC 6100 AFB2                  		bsr.w	ClearScreen
000063D0 43F8 D000                  		lea	($FFFFD000).w,a1
000063D4 7000                       		moveq	#0,d0
000063D6 323C 07FF                  		move.w	#$7FF,d1
000063DA                            
000063DA                            TryAg_ClrObjRam:
000063DA 22C0                       		move.l	d0,(a1)+
000063DC 51C9 FFFC                  		dbf	d1,TryAg_ClrObjRam ; clear object RAM
000063E0                            
000063E0 701D                       		moveq	#$1D,d0
000063E2 6100 B472                  		bsr.w	RunPLC_ROM	; load "TRY AGAIN" or "END" patterns
000063E6 43F8 FB80                  		lea	($FFFFFB80).w,a1
000063EA 7000                       		moveq	#0,d0
000063EC 323C 001F                  		move.w	#$1F,d1
000063F0                            
000063F0                            TryAg_ClrPallet:
000063F0 22C0                       		move.l	d0,(a1)+
000063F2 51C9 FFFC                  		dbf	d1,TryAg_ClrPallet ; fill pallet with black ($0000)
000063F6                            
000063F6 7013                       		moveq	#$13,d0
000063F8 6100 C034                  		bsr.w	PalLoad1	; load ending pallet
000063FC 4278 FBC0                  		clr.w	($FFFFFBC0).w
00006400 11FC 008B D080             		move.b	#$8B,($FFFFD080).w ; load Eggman object
00006406 4EB9 0000 0000             		jsr	ObjectsLoad
0000640C 4EB9 0000 0000             		jsr	BuildSprites
00006412 31FC 0708 F614             		move.w	#1800,($FFFFF614).w ; show screen for 30 seconds
00006418 6100 BCB0                  		bsr.w	Pal_FadeTo
0000641C                            
0000641C                            ; ---------------------------------------------------------------------------
0000641C                            ; "TRY AGAIN" and "END"	screen main loop
0000641C                            ; ---------------------------------------------------------------------------
0000641C                            TryAg_MainLoop:
0000641C 6100 B064                  		bsr.w	PauseGame
00006420 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00006426 6100 CF7A                  		bsr.w	DelayProgram
0000642A 4EB9 0000 0000             		jsr	ObjectsLoad
00006430 4EB9 0000 0000             		jsr	BuildSprites
00006436 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
0000643C 6600                       		bne.s	TryAg_Exit	; if yes, branch
0000643E 4A78 F614                  		tst.w	($FFFFF614).w	; has 30 seconds elapsed?
00006442 6700                       		beq.s	TryAg_Exit	; if yes, branch
00006444 0C38 001C F600             		cmpi.b	#$1C,($FFFFF600).w
0000644A 67D0                       		beq.s	TryAg_MainLoop
0000644C                            
0000644C                            TryAg_Exit:
0000644C 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
00006452 4E75                       		rts	
00006454                            
00006454                            ; ===========================================================================
00006454                            ; ---------------------------------------------------------------------------
00006454                            ; Object 8B - Eggman on "TRY AGAIN" and "END"	screens
00006454                            ; ---------------------------------------------------------------------------
00006454                            
00006454                            Obj8B:					; XREF: Obj_Index
00006454 7000                       		moveq	#0,d0
00006456 1028 0024                  		move.b	$24(a0),d0
0000645A 323B 0000                  		move.w	Obj8B_Index(pc,d0.w),d1
0000645E 4EBB 1000                  		jsr	Obj8B_Index(pc,d1.w)
00006462 4EF9 0000 0000             		jmp	DisplaySprite
00006468                            ; ===========================================================================
00006468 0000                       Obj8B_Index:	dc.w Obj8B_Main-Obj8B_Index
0000646A 0000                       		dc.w Obj8B_Animate-Obj8B_Index
0000646C 0000                       		dc.w Obj8B_Juggle-Obj8B_Index
0000646E 0000                       		dc.w loc_5A8E-Obj8B_Index
00006470                            ; ===========================================================================
00006470                            
00006470                            Obj8B_Main:				; XREF: Obj8B_Index
00006470 5428 0024                  		addq.b	#2,$24(a0)
00006474 317C 0120 0008             		move.w	#$120,8(a0)
0000647A 317C 00F4 000A             		move.w	#$F4,$A(a0)
00006480 217C 0000 0000 0004        		move.l	#Map_obj8B,4(a0)
00006488 317C 03E1 0002             		move.w	#$3E1,2(a0)
0000648E 117C 0000 0001             		move.b	#0,1(a0)
00006494 117C 0002 0018             		move.b	#2,$18(a0)
0000649A 117C 0002 001C             		move.b	#2,$1C(a0)	; use "END" animation
000064A0 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
000064A6 6700                       		beq.s	Obj8B_Animate	; if yes, branch
000064A8 11FC 008A D0C0             		move.b	#$8A,($FFFFD0C0).w ; load credits object
000064AE 31FC 0009 FFF4             		move.w	#9,($FFFFFFF4).w ; use "TRY AGAIN" text
000064B4 11FC 008C D800             		move.b	#$8C,($FFFFD800).w ; load emeralds object on "TRY AGAIN" screen
000064BA 117C 0000 001C             		move.b	#0,$1C(a0)	; use "TRY AGAIN" animation
000064C0                            
000064C0                            Obj8B_Animate:				; XREF: Obj8B_Index
000064C0 43F9 0000 0000             		lea	(Ani_obj8B).l,a1
000064C6 4EF9 0000 0000             		jmp	AnimateSprite
000064CC                            ; ===========================================================================
000064CC                            
000064CC                            Obj8B_Juggle:				; XREF: Obj8B_Index
000064CC 5428 0024                  		addq.b	#2,$24(a0)
000064D0 7002                       		moveq	#2,d0
000064D2 0828 0000 001C             		btst	#0,$1C(a0)
000064D8 6700                       		beq.s	loc_5A6A
000064DA 4440                       		neg.w	d0
000064DC                            
000064DC                            loc_5A6A:
000064DC 43F8 D800                  		lea	($FFFFD800).w,a1
000064E0 7205                       		moveq	#5,d1
000064E2                            
000064E2                            loc_5A70:
000064E2 1340 003E                  		move.b	d0,$3E(a1)
000064E6 3400                       		move.w	d0,d2
000064E8 E742                       		asl.w	#3,d2
000064EA D529 0026                  		add.b	d2,$26(a1)
000064EE 43E9 0040                  		lea	$40(a1),a1
000064F2 51C9 FFEE                  		dbf	d1,loc_5A70
000064F6 5228 001A                  		addq.b	#1,$1A(a0)
000064FA 317C 0070 0030             		move.w	#112,$30(a0)
00006500                            
00006500                            loc_5A8E:				; XREF: Obj8B_Index
00006500 5368 0030                  		subq.w	#1,$30(a0)
00006504 6A00                       		bpl.s	locret_5AA0
00006506 0868 0000 001C             		bchg	#0,$1C(a0)
0000650C 117C 0002 0024             		move.b	#2,$24(a0)
00006512                            
00006512                            locret_5AA0:
00006512 4E75                       		rts	
00006514                            ; ===========================================================================
00006514                            Ani_obj8B:
00006514                            	include "_anim\obj8B.asm"
00006514                            ; ---------------------------------------------------------------------------
00006514                            ; Animation script - Eggman on the "TRY AGAIN" and "END" screens
00006514                            ; ---------------------------------------------------------------------------
00006514 0000                       		dc.w byte_5AA8-Ani_obj8B
00006516 0000                       		dc.w byte_5AAC-Ani_obj8B
00006518 0000                       		dc.w byte_5AB0-Ani_obj8B
0000651A 0500 FC01                  byte_5AA8:	dc.b 5,	0, $FC,	1
0000651E 0502 FC03                  byte_5AAC:	dc.b 5,	2, $FC,	3
00006522 0704 0506 0504 0506 0504+  byte_5AB0:	dc.b 7,	4, 5, 6, 5, 4, 5, 6, 5,	4, 5, 6, 5, 7, 5, 6, 5,	$FF
00006534                            		even
00006534                            		even
00006534                            
00006534                            ; ===========================================================================
00006534                            ; ---------------------------------------------------------------------------
00006534                            ; Object 8C - chaos emeralds on	the "TRY AGAIN"	screen
00006534                            ; ---------------------------------------------------------------------------
00006534                            
00006534                            Obj8C:					; XREF: Obj_Index
00006534 7000                       		moveq	#0,d0
00006536 1028 0024                  		move.b	$24(a0),d0
0000653A 323B 0000                  		move.w	Obj8C_Index(pc,d0.w),d1
0000653E 4EBB 1000                  		jsr	Obj8C_Index(pc,d1.w)
00006542 4EF9 0000 0000             		jmp	DisplaySprite
00006548                            ; ===========================================================================
00006548 0000                       Obj8C_Index:	dc.w Obj8C_Main-Obj8C_Index
0000654A 0000                       		dc.w Obj8C_Move-Obj8C_Index
0000654C                            ; ===========================================================================
0000654C                            
0000654C                            Obj8C_Main:				; XREF: Obj8C_Index
0000654C 2248                       		movea.l	a0,a1
0000654E 7400                       		moveq	#0,d2
00006550 7600                       		moveq	#0,d3
00006552 7205                       		moveq	#5,d1
00006554 9238 FE57                  		sub.b	($FFFFFE57).w,d1
00006558                            
00006558                            Obj8C_MakeEms:				; XREF: loc_5B42
00006558 12BC 008C                  		move.b	#$8C,(a1)	; load emerald object
0000655C 5429 0024                  		addq.b	#2,$24(a1)
00006560 237C 0000 61EC 0004        		move.l	#Map_obj88,4(a1)
00006568 337C 03C5 0002             		move.w	#$3C5,2(a1)
0000656E 137C 0000 0001             		move.b	#0,1(a1)
00006574 137C 0001 0018             		move.b	#1,$18(a1)
0000657A 337C 0104 0008             		move.w	#$104,8(a1)
00006580 337C 0120 0038             		move.w	#$120,$38(a1)
00006586 337C 00EC 000A             		move.w	#$EC,$A(a1)
0000658C 3369 000A 003A             		move.w	$A(a1),$3A(a1)
00006592 137C 001C 003C             		move.b	#$1C,$3C(a1)
00006598 47F8 FE58                  		lea	($FFFFFE58).w,a3
0000659C                            
0000659C                            Obj8C_ChkEms:
0000659C 7000                       		moveq	#0,d0
0000659E 1038 FE57                  		move.b	($FFFFFE57).w,d0
000065A2 5340                       		subq.w	#1,d0
000065A4 6500                       		bcs.s	loc_5B42
000065A6                            
000065A6                            Obj8C_ChkEmLoop:
000065A6 B433 0000                  		cmp.b	(a3,d0.w),d2
000065AA 6600                       		bne.s	loc_5B3E
000065AC 5202                       		addq.b	#1,d2
000065AE 60EC                       		bra.s	Obj8C_ChkEms
000065B0                            ; ===========================================================================
000065B0                            
000065B0                            loc_5B3E:
000065B0 51C8 FFF4                  		dbf	d0,Obj8C_ChkEmLoop ; checks which emeralds you have
000065B4                            
000065B4                            loc_5B42:
000065B4 1342 001A                  		move.b	d2,$1A(a1)
000065B8 5229 001A                  		addq.b	#1,$1A(a1)
000065BC 5202                       		addq.b	#1,d2
000065BE 137C 0080 0026             		move.b	#$80,$26(a1)
000065C4 1343 001E                  		move.b	d3,$1E(a1)
000065C8 1343 001F                  		move.b	d3,$1F(a1)
000065CC 0643 000A                  		addi.w	#$A,d3
000065D0 43E9 0040                  		lea	$40(a1),a1
000065D4 51C9 FF82                  		dbf	d1,Obj8C_MakeEms
000065D8                            
000065D8                            Obj8C_Move:				; XREF: Obj8C_Index
000065D8 4A68 003E                  		tst.w	$3E(a0)
000065DC 6700                       		beq.s	locret_5BBA
000065DE 4A28 001E                  		tst.b	$1E(a0)
000065E2 6700                       		beq.s	loc_5B78
000065E4 5328 001E                  		subq.b	#1,$1E(a0)
000065E8 6600                       		bne.s	loc_5B80
000065EA                            
000065EA                            loc_5B78:
000065EA 3028 003E                  		move.w	$3E(a0),d0
000065EE D168 0026                  		add.w	d0,$26(a0)
000065F2                            
000065F2                            loc_5B80:
000065F2 1028 0026                  		move.b	$26(a0),d0
000065F6 6700                       		beq.s	loc_5B8C
000065F8 0C00 0080                  		cmpi.b	#$80,d0
000065FC 6600                       		bne.s	loc_5B96
000065FE                            
000065FE                            loc_5B8C:
000065FE 4268 003E                  		clr.w	$3E(a0)
00006602 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
00006608                            
00006608                            loc_5B96:
00006608 4EB9 0000 33D4             		jsr	(CalcSine).l
0000660E 7800                       		moveq	#0,d4
00006610 1828 003C                  		move.b	$3C(a0),d4
00006614 C3C4                       		muls.w	d4,d1
00006616 E081                       		asr.l	#8,d1
00006618 C1C4                       		muls.w	d4,d0
0000661A E080                       		asr.l	#8,d0
0000661C D268 0038                  		add.w	$38(a0),d1
00006620 D068 003A                  		add.w	$3A(a0),d0
00006624 3141 0008                  		move.w	d1,8(a0)
00006628 3140 000A                  		move.w	d0,$A(a0)
0000662C                            
0000662C                            locret_5BBA:
0000662C 4E75                       		rts	
0000662E                            ; ===========================================================================
0000662E                            ; ---------------------------------------------------------------------------
0000662E                            ; Sprite mappings - Eggman on	the "TRY AGAIN"	and "END" screens
0000662E                            ; ---------------------------------------------------------------------------
0000662E                            Map_obj8B:
0000662E                            	include "_maps\obj8B.asm"
0000662E                            ; ---------------------------------------------------------------------------
0000662E                            ; Sprite mappings - Robotnik on	the "TRY AGAIN"	and "END" screens
0000662E                            ; ---------------------------------------------------------------------------
0000662E 0000 0000                  		dc.w byte_5BCC-Map_obj8B, byte_5BF5-Map_obj8B
00006632 0000 0000                  		dc.w byte_5C1E-Map_obj8B, byte_5C47-Map_obj8B
00006636 0000 0000                  		dc.w byte_5C70-Map_obj8B, byte_5CAD-Map_obj8B
0000663A 0000 0000                  		dc.w byte_5CE0-Map_obj8B, byte_5D13-Map_obj8B
0000663E 08                         byte_5BCC:	dc.b 8
0000663F E905 0000 F0               		dc.b $E9, 5, 0,	0, $F0
00006644 F90C 0004 E0               		dc.b $F9, $C, 0, 4, $E0
00006649 E904 0008 00               		dc.b $E9, 4, 0,	8, 0
0000664E F10D 000A 00               		dc.b $F1, $D, 0, $A, 0
00006653 0106 0023 F0               		dc.b 1,	6, 0, $23, $F0
00006658 0106 0823 00               		dc.b 1,	6, 8, $23, 0
0000665D 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00006662 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00006667 08                         byte_5BF5:	dc.b 8
00006668 E80D 0012 E0               		dc.b $E8, $D, 0, $12, $E0
0000666D F808 001A E8               		dc.b $F8, 8, 0,	$1A, $E8
00006672 E805 0800 00               		dc.b $E8, 5, 8,	0, 0
00006677 F80C 0804 00               		dc.b $F8, $C, 8, 4, 0
0000667C 0006 001D F0               		dc.b 0,	6, 0, $1D, $F0
00006681 0006 081D 00               		dc.b 0,	6, 8, $1D, 0
00006686 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
0000668B 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00006690 08                         byte_5C1E:	dc.b 8
00006691 E904 0808 F0               		dc.b $E9, 4, 8,	8, $F0
00006696 F10D 080A E0               		dc.b $F1, $D, 8, $A, $E0
0000669B E905 0800 00               		dc.b $E9, 5, 8,	0, 0
000066A0 F90C 0804 00               		dc.b $F9, $C, 8, 4, 0
000066A5 0106 0023 F0               		dc.b 1,	6, 0, $23, $F0
000066AA 0106 0823 00               		dc.b 1,	6, 8, $23, 0
000066AF 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
000066B4 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
000066B9 08                         byte_5C47:	dc.b 8
000066BA E805 0000 F0               		dc.b $E8, 5, 0,	0, $F0
000066BF F80C 0004 E0               		dc.b $F8, $C, 0, 4, $E0
000066C4 E80D 0812 00               		dc.b $E8, $D, 8, $12, 0
000066C9 F808 081A 00               		dc.b $F8, 8, 8,	$1A, 0
000066CE 0006 001D F0               		dc.b 0,	6, 0, $1D, $F0
000066D3 0006 081D 00               		dc.b 0,	6, 8, $1D, 0
000066D8 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
000066DD 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
000066E2 0C                         byte_5C70:	dc.b $C
000066E3 ED0A 002B E8               		dc.b $ED, $A, 0, $2B, $E8
000066E8 F500 0034 E0               		dc.b $F5, 0, 0,	$34, $E0
000066ED 0504 0035 F0               		dc.b 5,	4, 0, $35, $F0
000066F2 0D08 0037 E8               		dc.b $D, 8, 0, $37, $E8
000066F7 ED0A 082B 00               		dc.b $ED, $A, 8, $2B, 0
000066FC F500 0834 18               		dc.b $F5, 0, 8,	$34, $18
00006701 0504 0835 00               		dc.b 5,	4, 8, $35, 0
00006706 0D08 0837 00               		dc.b $D, 8, 8, $37, 0
0000670B 100D 0073 E0               		dc.b $10, $D, 0, $73, $E0
00006710 100D 007B 00               		dc.b $10, $D, 0, $7B, 0
00006715 1C0C 005B E0               		dc.b $1C, $C, 0, $5B, $E0
0000671A 1C0C 085B 00               		dc.b $1C, $C, 8, $5B, 0
0000671F 0A                         byte_5CAD:	dc.b $A
00006720 D207 003A F0               		dc.b $D2, 7, 0,	$3A, $F0
00006725 DA00 0042 E8               		dc.b $DA, 0, 0,	$42, $E8
0000672A F207 0043 F0               		dc.b $F2, 7, 0,	$43, $F0
0000672F D207 083A 00               		dc.b $D2, 7, 8,	$3A, 0
00006734 DA00 0842 10               		dc.b $DA, 0, 8,	$42, $10
00006739 F207 0843 00               		dc.b $F2, 7, 8,	$43, 0
0000673E 100D 0067 E8               		dc.b $10, $D, 0, $67, $E8
00006743 1005 006F 08               		dc.b $10, 5, 0,	$6F, 8
00006748 1C0C 005F E0               		dc.b $1C, $C, 0, $5F, $E0
0000674D 1C0C 085F 00               		dc.b $1C, $C, 8, $5F, 0
00006752 0A                         byte_5CE0:	dc.b $A
00006753 C40B 004B E8               		dc.b $C4, $B, 0, $4B, $E8
00006758 E408 0057 E8               		dc.b $E4, 8, 0,	$57, $E8
0000675D EC00 005A F0               		dc.b $EC, 0, 0,	$5A, $F0
00006762 C40B 084B 00               		dc.b $C4, $B, 8, $4B, 0
00006767 E408 0857 00               		dc.b $E4, 8, 8,	$57, 0
0000676C EC00 085A 08               		dc.b $EC, 0, 8,	$5A, 8
00006771 100D 0067 E8               		dc.b $10, $D, 0, $67, $E8
00006776 1005 006F 08               		dc.b $10, 5, 0,	$6F, 8
0000677B 1C0C 0063 E0               		dc.b $1C, $C, 0, $63, $E0
00006780 1C0C 0863 00               		dc.b $1C, $C, 8, $63, 0
00006785 0C                         byte_5D13:	dc.b $C
00006786 F40A 002B E8               		dc.b $F4, $A, 0, $2B, $E8
0000678B FC00 0034 E0               		dc.b $FC, 0, 0,	$34, $E0
00006790 0C04 0035 F0               		dc.b $C, 4, 0, $35, $F0
00006795 1408 0037 E8               		dc.b $14, 8, 0,	$37, $E8
0000679A F40A 082B 00               		dc.b $F4, $A, 8, $2B, 0
0000679F FC00 0834 18               		dc.b $FC, 0, 8,	$34, $18
000067A4 0C04 0835 00               		dc.b $C, 4, 8, $35, 0
000067A9 1408 0837 00               		dc.b $14, 8, 8,	$37, 0
000067AE 180C 0083 E0               		dc.b $18, $C, 0, $83, $E0
000067B3 180C 0087 00               		dc.b $18, $C, 0, $87, 0
000067B8 1C0C 005B E0               		dc.b $1C, $C, 0, $5B, $E0
000067BD 1C0C 085B 00               		dc.b $1C, $C, 8, $5B, 0
000067C2                            		even
000067C2                            		even
000067C2                            
000067C2                            ; ---------------------------------------------------------------------------
000067C2                            ; Ending sequence demos
000067C2                            ; ---------------------------------------------------------------------------
000067C2                            Demo_EndGHZ1:	incbin	demodata\e_ghz1.bin
000067F0                            		even
000067F0                            Demo_EndMZ:	incbin	demodata\e_mz.bin
00006830                            		even
00006830                            Demo_EndSYZ:	incbin	demodata\e_syz.bin
00006860                            		even
00006860                            Demo_EndLZ:	incbin	demodata\e_lz.bin
00006890                            		even
00006890                            Demo_EndSLZ:	incbin	demodata\e_slz.bin
000068B0                            		even
000068B0                            Demo_EndSBZ1:	incbin	demodata\e_sbz1.bin
000068D0                            		even
000068D0                            Demo_EndSBZ2:	incbin	demodata\e_sbz2.bin
00006900                            		even
00006900                            Demo_EndGHZ2:	incbin	demodata\e_ghz2.bin
00006930                            		even
00006930                            
00006930                            ; ---------------------------------------------------------------------------
00006930                            ; Subroutine to	load level boundaries and start	locations
00006930                            ; ---------------------------------------------------------------------------
00006930                            
00006930                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006930                            
00006930                            
00006930                            LevelSizeLoad:				; XREF: TitleScreen; Level; EndingSequence
00006930 7000                       		moveq	#0,d0
00006932 11C0 F740                  		move.b	d0,($FFFFF740).w
00006936 11C0 F741                  		move.b	d0,($FFFFF741).w
0000693A 11C0 F746                  		move.b	d0,($FFFFF746).w
0000693E 11C0 F748                  		move.b	d0,($FFFFF748).w
00006942 11C0 F742                  		move.b	d0,($FFFFF742).w
00006946 3038 FE10                  		move.w	($FFFFFE10).w,d0
0000694A ED08                       		lsl.b	#6,d0
0000694C E848                       		lsr.w	#4,d0
0000694E 3200                       		move.w	d0,d1
00006950 D040                       		add.w	d0,d0
00006952 D041                       		add.w	d1,d0
00006954 41FB 0000                  		lea	LevelSizeArray(pc,d0.w),a0 ; load level	boundaries
00006958 3018                       		move.w	(a0)+,d0
0000695A 31C0 F730                  		move.w	d0,($FFFFF730).w
0000695E 2018                       		move.l	(a0)+,d0
00006960 21C0 F728                  		move.l	d0,($FFFFF728).w
00006964 21C0 F720                  		move.l	d0,($FFFFF720).w
00006968 2018                       		move.l	(a0)+,d0
0000696A 21C0 F72C                  		move.l	d0,($FFFFF72C).w
0000696E 21C0 F724                  		move.l	d0,($FFFFF724).w
00006972 3038 F728                  		move.w	($FFFFF728).w,d0
00006976 0640 0240                  		addi.w	#$240,d0
0000697A 31C0 F732                  		move.w	d0,($FFFFF732).w
0000697E 31FC 1010 F74A             		move.w	#$1010,($FFFFF74A).w
00006984 3018                       		move.w	(a0)+,d0
00006986 31C0 F73E                  		move.w	d0,($FFFFF73E).w
0000698A 6000 0000                  		bra.w	LevSz_ChkLamp
0000698E                            ; ===========================================================================
0000698E                            ; ---------------------------------------------------------------------------
0000698E                            ; Level size array and ending start location array
0000698E                            ; ---------------------------------------------------------------------------
0000698E                            LevelSizeArray:	incbin	misc\lvl_size.bin
00006ADE                            		even
00006ADE                            
00006ADE                            EndingStLocArray:
00006ADE                            		incbin	misc\sloc_end.bin
00006AFE                            		even
00006AFE                            
00006AFE                            ; ===========================================================================
00006AFE                            
00006AFE                            LevSz_ChkLamp:				; XREF: LevelSizeLoad
00006AFE 4A38 FE30                  		tst.b	($FFFFFE30).w	; have any lampposts been hit?
00006B02 6700                       		beq.s	LevSz_StartLoc	; if not, branch
00006B04 4EB9 0000 0000             		jsr	Obj79_LoadInfo
00006B0A 3238 D008                  		move.w	($FFFFD008).w,d1
00006B0E 3038 D00C                  		move.w	($FFFFD00C).w,d0
00006B12 6000                       		bra.s	loc_60D0
00006B14                            ; ===========================================================================
00006B14                            
00006B14                            LevSz_StartLoc:				; XREF: LevelSizeLoad
00006B14 3038 FE10                  		move.w	($FFFFFE10).w,d0
00006B18 ED08                       		lsl.b	#6,d0
00006B1A E848                       		lsr.w	#4,d0
00006B1C 43FB 0000                  		lea	StartLocArray(pc,d0.w),a1 ; load Sonic's start location
00006B20 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00006B24 6A00                       		bpl.s	LevSz_SonicPos	; if not, branch
00006B26 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
00006B2A 5340                       		subq.w	#1,d0
00006B2C E548                       		lsl.w	#2,d0
00006B2E 43FB 00AE                  		lea	EndingStLocArray(pc,d0.w),a1 ; load Sonic's start location
00006B32                            
00006B32                            LevSz_SonicPos:
00006B32 7200                       		moveq	#0,d1
00006B34 3219                       		move.w	(a1)+,d1
00006B36 31C1 D008                  		move.w	d1,($FFFFD008).w ; set Sonic's position on x-axis
00006B3A 7000                       		moveq	#0,d0
00006B3C 3011                       		move.w	(a1),d0
00006B3E 31C0 D00C                  		move.w	d0,($FFFFD00C).w ; set Sonic's position on y-axis
00006B42                            
00006B42                            loc_60D0:				; XREF: LevSz_ChkLamp
00006B42 4278 F7A8                  		clr.w	($FFFFF7A8).w		; reset Sonic's position tracking index
00006B46 45F8 CB00                  		lea	($FFFFCB00).w,a2	; load the tracking array into a2
00006B4A 743F                       		moveq	#63,d2				; begin a 64-step loop
00006B4C                            @looppoint:
00006B4C 34C1                       		move.w	d1,(a2)+			; fill in X
00006B4E 34C0                       		move.w	d0,(a2)+			; fill in Y
00006B50 51CA FFFA                  		dbf	d2,@looppoint		; loop
00006B54 0441 00A0                  		subi.w	#$A0,d1
00006B58 6400                       		bcc.s	loc_60D8
00006B5A 7200                       		moveq	#0,d1
00006B5C                            
00006B5C                            loc_60D8:
00006B5C 3438 F72A                  		move.w	($FFFFF72A).w,d2
00006B60 B242                       		cmp.w	d2,d1
00006B62 6500                       		bcs.s	loc_60E2
00006B64 3202                       		move.w	d2,d1
00006B66                            
00006B66                            loc_60E2:
00006B66 31C1 F700                  		move.w	d1,($FFFFF700).w
00006B6A 0440 0060                  		subi.w	#$60,d0
00006B6E 6400                       		bcc.s	loc_60EE
00006B70 7000                       		moveq	#0,d0
00006B72                            
00006B72                            loc_60EE:
00006B72 B078 F72E                  		cmp.w	($FFFFF72E).w,d0
00006B76 6D00                       		blt.s	loc_60F8
00006B78 3038 F72E                  		move.w	($FFFFF72E).w,d0
00006B7C                            
00006B7C                            loc_60F8:
00006B7C 31C0 F704                  		move.w	d0,($FFFFF704).w
00006B80 6100 0000                  		bsr.w	BgScrollSpeed
00006B84 7000                       		moveq	#0,d0
00006B86 1038 FE10                  		move.b	($FFFFFE10).w,d0
00006B8A E508                       		lsl.b	#2,d0
00006B8C 21FB 0000 F7AC             		move.l	LoopTileNums(pc,d0.w),($FFFFF7AC).w
00006B92 6000 0000                  		bra.w	LevSz_Unk
00006B96                            ; ===========================================================================
00006B96                            ; ---------------------------------------------------------------------------
00006B96                            ; Sonic	start location array
00006B96                            ; ---------------------------------------------------------------------------
00006B96                            StartLocArray:	incbin	misc\sloc_lev.bin
00006C06                            		even
00006C06                            
00006C06                            ; ---------------------------------------------------------------------------
00006C06                            ; Which	256x256	tiles contain loops or roll-tunnels
00006C06                            ; ---------------------------------------------------------------------------
00006C06                            ; Format - 4 bytes per zone, referring to which 256x256 evoke special events:
00006C06                            ; loop,	loop, tunnel, tunnel
00006C06                            ; ---------------------------------------------------------------------------
00006C06                            LoopTileNums:	incbin	misc\loopnums.bin
00006C22                            		even
00006C22                            
00006C22                            ; ===========================================================================
00006C22                            
00006C22                            LevSz_Unk:				; XREF: LevelSizeLoad
00006C22 7000                       		moveq	#0,d0
00006C24 1038 FE10                  		move.b	($FFFFFE10).w,d0
00006C28 E748                       		lsl.w	#3,d0
00006C2A 43FB 0000                  		lea	dword_61B4(pc,d0.w),a1
00006C2E 45F8 F7F0                  		lea	($FFFFF7F0).w,a2
00006C32 24D9                       		move.l	(a1)+,(a2)+
00006C34 24D9                       		move.l	(a1)+,(a2)+
00006C36 4E75                       		rts	
00006C38                            ; End of function LevelSizeLoad
00006C38                            
00006C38                            ; ===========================================================================
00006C38 0070 0100 0100 0100        dword_61B4:	dc.l $700100, $1000100
00006C40 0800 0100 0100 0000        		dc.l $8000100, $1000000
00006C48 0800 0100 0100 0000        		dc.l $8000100, $1000000
00006C50 0800 0100 0100 0000        		dc.l $8000100, $1000000
00006C58 0800 0100 0100 0000        		dc.l $8000100, $1000000
00006C60 0800 0100 0100 0000        		dc.l $8000100, $1000000
00006C68 0070 0100 0100 0100        		dc.l $700100, $1000100
00006C70                            
00006C70                            ; ---------------------------------------------------------------------------
00006C70                            ; Subroutine to	set scroll speed of some backgrounds
00006C70                            ; ---------------------------------------------------------------------------
00006C70                            
00006C70                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006C70                            
00006C70                            
00006C70                            BgScrollSpeed:				; XREF: LevelSizeLoad
00006C70 4A38 FE30                  		tst.b	($FFFFFE30).w
00006C74 6600                       		bne.s	loc_6206
00006C76 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00006C7A 31C0 F714                  		move.w	d0,($FFFFF714).w
00006C7E 31C1 F708                  		move.w	d1,($FFFFF708).w
00006C82 31C1 F710                  		move.w	d1,($FFFFF710).w
00006C86 31C1 F718                  		move.w	d1,($FFFFF718).w
00006C8A                            
00006C8A                            loc_6206:
00006C8A 7400                       		moveq	#0,d2
00006C8C 1438 FE10                  		move.b	($FFFFFE10).w,d2
00006C90 D442                       		add.w	d2,d2
00006C92 343B 2000                  		move.w	BgScroll_Index(pc,d2.w),d2
00006C96 4EFB 2000                  		jmp	BgScroll_Index(pc,d2.w)
00006C9A                            ; End of function BgScrollSpeed
00006C9A                            
00006C9A                            ; ===========================================================================
00006C9A 0000 0000                  BgScroll_Index:	dc.w BgScroll_GHZ-BgScroll_Index, BgScroll_LZ-BgScroll_Index
00006C9E 0000 0000                  		dc.w BgScroll_MZ-BgScroll_Index, BgScroll_SLZ-BgScroll_Index
00006CA2 0000 0000                  		dc.w BgScroll_SYZ-BgScroll_Index, BgScroll_SBZ-BgScroll_Index
00006CA6 0000                       		dc.w BgScroll_End-BgScroll_Index
00006CA8                            ; ===========================================================================
00006CA8                            
00006CA8                            BgScroll_GHZ:				; XREF: BgScroll_Index
00006CA8 6000 0000                  		bra.w	Deform_GHZ
00006CAC                            ; ===========================================================================
00006CAC                            
00006CAC                            BgScroll_LZ:				; XREF: BgScroll_Index
00006CAC E280                       		asr.l	#1,d0
00006CAE 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00006CB2 4E75                       		rts	
00006CB4                            ; ===========================================================================
00006CB4                            
00006CB4                            BgScroll_MZ:				; XREF: BgScroll_Index
00006CB4 4E75                       		rts	
00006CB6                            ; ===========================================================================
00006CB6                            
00006CB6                            BgScroll_SLZ:				; XREF: BgScroll_Index
00006CB6 E280                       		asr.l	#1,d0
00006CB8 0640 00C0                  		addi.w	#$C0,d0
00006CBC 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00006CC0 4E75                       		rts	
00006CC2                            ; ===========================================================================
00006CC2                            
00006CC2                            BgScroll_SYZ:				; XREF: BgScroll_Index
00006CC2 E980                       		asl.l	#4,d0
00006CC4 2400                       		move.l	d0,d2
00006CC6 E380                       		asl.l	#1,d0
00006CC8 D082                       		add.l	d2,d0
00006CCA E080                       		asr.l	#8,d0
00006CCC 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00006CD0 31C0 F714                  		move.w	d0,($FFFFF714).w
00006CD4 4E75                       		rts	
00006CD6                            ; ===========================================================================
00006CD6                            
00006CD6                            BgScroll_SBZ:				; XREF: BgScroll_Index
00006CD6 E980                       		asl.l	#4,d0
00006CD8 E380                       		asl.l	#1,d0
00006CDA E080                       		asr.l	#8,d0
00006CDC 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00006CE0 4E75                       		rts	
00006CE2                            ; ===========================================================================
00006CE2                            
00006CE2                            BgScroll_End:				; XREF: BgScroll_Index
00006CE2 31FC 001E F70C             		move.w	#$1E,($FFFFF70C).w
00006CE8 31FC 001E F714             		move.w	#$1E,($FFFFF714).w
00006CEE 4E75                       		rts	
00006CF0                            ; ===========================================================================
00006CF0 31FC 00A8 F708             		move.w	#$A8,($FFFFF708).w
00006CF6 31FC 001E F70C             		move.w	#$1E,($FFFFF70C).w
00006CFC 31FC FFC0 F710             		move.w	#-$40,($FFFFF710).w
00006D02 31FC 001E F714             		move.w	#$1E,($FFFFF714).w
00006D08 4E75                       		rts
00006D0A                            
00006D0A                            ; ---------------------------------------------------------------------------
00006D0A                            ; Background layer deformation subroutines
00006D0A                            ; ---------------------------------------------------------------------------
00006D0A                            
00006D0A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006D0A                            
00006D0A                            
00006D0A                            DeformBgLayer:				; XREF: TitleScreen; Level; EndingSequence
00006D0A 4A38 F744                  		tst.b	($FFFFF744).w
00006D0E 6700                       		beq.s	loc_628E
00006D10 4E75                       		rts	
00006D12                            ; ===========================================================================
00006D12                            
00006D12                            loc_628E:
00006D12 4278 F754                  		clr.w	($FFFFF754).w
00006D16 4278 F756                  		clr.w	($FFFFF756).w
00006D1A 4278 F758                  		clr.w	($FFFFF758).w
00006D1E 4278 F75A                  		clr.w	($FFFFF75A).w
00006D22 6100 0000                  		bsr.w	ScrollHoriz
00006D26 6100 0000                  		bsr.w	ScrollVertical
00006D2A 6100 0000                  		bsr.w	DynScrResizeLoad
00006D2E 31F8 F700 F61A             		move.w	($FFFFF700).w,($FFFFF61A).w
00006D34 31F8 F704 F616             		move.w	($FFFFF704).w,($FFFFF616).w
00006D3A 31F8 F708 F61C             		move.w	($FFFFF708).w,($FFFFF61C).w
00006D40 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006D46 31F8 F718 F620             		move.w	($FFFFF718).w,($FFFFF620).w
00006D4C 31F8 F71C F61E             		move.w	($FFFFF71C).w,($FFFFF61E).w
00006D52 7000                       		moveq	#0,d0
00006D54 1038 FE10                  		move.b	($FFFFFE10).w,d0
00006D58 D040                       		add.w	d0,d0
00006D5A 303B 0000                  		move.w	Deform_Index(pc,d0.w),d0
00006D5E 4EFB 0000                  		jmp	Deform_Index(pc,d0.w)
00006D62                            ; End of function DeformBgLayer
00006D62                            
00006D62                            ; ===========================================================================
00006D62                            ; ---------------------------------------------------------------------------
00006D62                            ; Offset index for background layer deformation	code
00006D62                            ; ---------------------------------------------------------------------------
00006D62 0000 0000                  Deform_Index:	dc.w Deform_GHZ-Deform_Index, Deform_LZ-Deform_Index
00006D66 0000 0000                  		dc.w Deform_MZ-Deform_Index, Deform_SLZ-Deform_Index
00006D6A 0000 0000                  		dc.w Deform_SYZ-Deform_Index, Deform_SBZ-Deform_Index
00006D6E 0000                       		dc.w Deform_GHZ-Deform_Index
00006D70                            ; ---------------------------------------------------------------------------
00006D70                            ; Green	Hill Zone background layer deformation code
00006D70                            ; ---------------------------------------------------------------------------
00006D70                            
00006D70                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006D70                            
00006D70                            
00006D70                            Deform_GHZ:				; XREF: Deform_Index
00006D70 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006D74 48C4                       		ext.l	d4
00006D76 EB84                       		asl.l	#5,d4
00006D78 2204                       		move.l	d4,d1
00006D7A E384                       		asl.l	#1,d4
00006D7C D881                       		add.l	d1,d4
00006D7E 7A00                       		moveq	#0,d5
00006D80 6100 0000                  		bsr.w	ScrollBlock1
00006D84 6100 0000                  		bsr.w	ScrollBlock4
00006D88 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006D8C 3038 F704                  		move.w	($FFFFF704).w,d0
00006D90 0240 07FF                  		andi.w	#$7FF,d0
00006D94 EA48                       		lsr.w	#5,d0
00006D96 4440                       		neg.w	d0
00006D98 0640 0026                  		addi.w	#$26,d0
00006D9C 31C0 F714                  		move.w	d0,($FFFFF714).w
00006DA0 3800                       		move.w	d0,d4
00006DA2 6100 0000                  		bsr.w	ScrollBlock3
00006DA6 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006DAC 323C 006F                  		move.w	#$6F,d1
00006DB0 9244                       		sub.w	d4,d1
00006DB2 3038 F700                  		move.w	($FFFFF700).w,d0
00006DB6 0C38 0004 F600             		cmpi.b	#4,($FFFFF600).w
00006DBC 6600                       		bne.s	loc_633C
00006DBE 7000                       		moveq	#0,d0
00006DC0                            
00006DC0                            loc_633C:
00006DC0 4440                       		neg.w	d0
00006DC2 4840                       		swap	d0
00006DC4 3038 F708                  		move.w	($FFFFF708).w,d0
00006DC8 4440                       		neg.w	d0
00006DCA                            
00006DCA                            loc_6346:
00006DCA 22C0                       		move.l	d0,(a1)+
00006DCC 51C9 FFFC                  		dbf	d1,loc_6346
00006DD0 323C 0027                  		move.w	#$27,d1
00006DD4 3038 F710                  		move.w	($FFFFF710).w,d0
00006DD8 4440                       		neg.w	d0
00006DDA                            
00006DDA                            loc_6356:
00006DDA 22C0                       		move.l	d0,(a1)+
00006DDC 51C9 FFFC                  		dbf	d1,loc_6356
00006DE0 3038 F710                  		move.w	($FFFFF710).w,d0
00006DE4 0640 0000                  		addi.w	#0,d0
00006DE8 3438 F700                  		move.w	($FFFFF700).w,d2
00006DEC 0642 FE00                  		addi.w	#-$200,d2
00006DF0 9440                       		sub.w	d0,d2
00006DF2 48C2                       		ext.l	d2
00006DF4 E182                       		asl.l	#8,d2
00006DF6 85FC 0068                  		divs.w	#$68,d2
00006DFA 48C2                       		ext.l	d2
00006DFC E182                       		asl.l	#8,d2
00006DFE 7600                       		moveq	#0,d3
00006E00 3600                       		move.w	d0,d3
00006E02 323C 0047                  		move.w	#$47,d1
00006E06 D244                       		add.w	d4,d1
00006E08                            
00006E08                            loc_6384:
00006E08 3003                       		move.w	d3,d0
00006E0A 4440                       		neg.w	d0
00006E0C 22C0                       		move.l	d0,(a1)+
00006E0E 4843                       		swap	d3
00006E10 D682                       		add.l	d2,d3
00006E12 4843                       		swap	d3
00006E14 51C9 FFF2                  		dbf	d1,loc_6384
00006E18 4E75                       		rts	
00006E1A                            ; End of function Deform_GHZ
00006E1A                            
00006E1A                            ; ---------------------------------------------------------------------------
00006E1A                            ; Labyrinth Zone background layer deformation code
00006E1A                            ; ---------------------------------------------------------------------------
00006E1A                            
00006E1A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006E1A                            
00006E1A                            
00006E1A                            Deform_LZ:				; XREF: Deform_Index
00006E1A 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006E1E 48C4                       		ext.l	d4
00006E20 EF84                       		asl.l	#7,d4
00006E22 3A38 F73C                  		move.w	($FFFFF73C).w,d5
00006E26 48C5                       		ext.l	d5
00006E28 EF85                       		asl.l	#7,d5
00006E2A 6100 0000                  		bsr.w	ScrollBlock1
00006E2E 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006E34 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006E38 323C 00DF                  		move.w	#$DF,d1
00006E3C 3038 F700                  		move.w	($FFFFF700).w,d0
00006E40 4440                       		neg.w	d0
00006E42 4840                       		swap	d0
00006E44 3038 F708                  		move.w	($FFFFF708).w,d0
00006E48 4440                       		neg.w	d0
00006E4A                            
00006E4A                            loc_63C6:
00006E4A 22C0                       		move.l	d0,(a1)+
00006E4C 51C9 FFFC                  		dbf	d1,loc_63C6
00006E50 3038 F646                  		move.w	($FFFFF646).w,d0
00006E54 9078 F704                  		sub.w	($FFFFF704).w,d0
00006E58 4E75                       		rts	
00006E5A                            ; End of function Deform_LZ
00006E5A                            
00006E5A                            ; ---------------------------------------------------------------------------
00006E5A                            ; Marble Zone background layer deformation code
00006E5A                            ; ---------------------------------------------------------------------------
00006E5A                            
00006E5A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006E5A                            
00006E5A                            
00006E5A                            Deform_MZ:				; XREF: Deform_Index
00006E5A 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006E5E 48C4                       		ext.l	d4
00006E60 ED84                       		asl.l	#6,d4
00006E62 2204                       		move.l	d4,d1
00006E64 E384                       		asl.l	#1,d4
00006E66 D881                       		add.l	d1,d4
00006E68 7A00                       		moveq	#0,d5
00006E6A 6100 0000                  		bsr.w	ScrollBlock1
00006E6E 303C 0200                  		move.w	#$200,d0
00006E72 3238 F704                  		move.w	($FFFFF704).w,d1
00006E76 0441 01C8                  		subi.w	#$1C8,d1
00006E7A 6500                       		bcs.s	loc_6402
00006E7C 3401                       		move.w	d1,d2
00006E7E D241                       		add.w	d1,d1
00006E80 D242                       		add.w	d2,d1
00006E82 E441                       		asr.w	#2,d1
00006E84 D041                       		add.w	d1,d0
00006E86                            
00006E86                            loc_6402:
00006E86 31C0 F714                  		move.w	d0,($FFFFF714).w
00006E8A 6100 0000                  		bsr.w	ScrollBlock3
00006E8E 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006E94 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006E98 323C 00DF                  		move.w	#$DF,d1
00006E9C 3038 F700                  		move.w	($FFFFF700).w,d0
00006EA0 4440                       		neg.w	d0
00006EA2 4840                       		swap	d0
00006EA4 3038 F708                  		move.w	($FFFFF708).w,d0
00006EA8 4440                       		neg.w	d0
00006EAA                            
00006EAA                            loc_6426:
00006EAA 22C0                       		move.l	d0,(a1)+
00006EAC 51C9 FFFC                  		dbf	d1,loc_6426
00006EB0 4E75                       		rts	
00006EB2                            ; End of function Deform_MZ
00006EB2                            
00006EB2                            ; ---------------------------------------------------------------------------
00006EB2                            ; Star Light Zone background layer deformation code
00006EB2                            ; ---------------------------------------------------------------------------
00006EB2                            
00006EB2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006EB2                            
00006EB2                            
00006EB2                            Deform_SLZ:				; XREF: Deform_Index
00006EB2 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006EB6 48C4                       		ext.l	d4
00006EB8 EF84                       		asl.l	#7,d4
00006EBA 3A38 F73C                  		move.w	($FFFFF73C).w,d5
00006EBE 48C5                       		ext.l	d5
00006EC0 EF85                       		asl.l	#7,d5
00006EC2 6100 0000                  		bsr.w	ScrollBlock2
00006EC6 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006ECC 6100 0000                  		bsr.w	Deform_SLZ_2
00006ED0 45F8 A800                  		lea	($FFFFA800).w,a2
00006ED4 3038 F70C                  		move.w	($FFFFF70C).w,d0
00006ED8 3400                       		move.w	d0,d2
00006EDA 0440 00C0                  		subi.w	#$C0,d0
00006EDE 0240 03F0                  		andi.w	#$3F0,d0
00006EE2 E648                       		lsr.w	#3,d0
00006EE4 45F2 0000                  		lea	(a2,d0.w),a2
00006EE8 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006EEC 323C 000E                  		move.w	#$E,d1
00006EF0 3038 F700                  		move.w	($FFFFF700).w,d0
00006EF4 4440                       		neg.w	d0
00006EF6 4840                       		swap	d0
00006EF8 0242 000F                  		andi.w	#$F,d2
00006EFC D442                       		add.w	d2,d2
00006EFE 301A                       		move.w	(a2)+,d0
00006F00 4EFB 2000                  		jmp	loc_6482(pc,d2.w)
00006F04                            ; ===========================================================================
00006F04                            
00006F04                            loc_6480:				; XREF: Deform_SLZ
00006F04 301A                       		move.w	(a2)+,d0
00006F06                            
00006F06                            loc_6482:
00006F06 22C0                       		move.l	d0,(a1)+
00006F08 22C0                       		move.l	d0,(a1)+
00006F0A 22C0                       		move.l	d0,(a1)+
00006F0C 22C0                       		move.l	d0,(a1)+
00006F0E 22C0                       		move.l	d0,(a1)+
00006F10 22C0                       		move.l	d0,(a1)+
00006F12 22C0                       		move.l	d0,(a1)+
00006F14 22C0                       		move.l	d0,(a1)+
00006F16 22C0                       		move.l	d0,(a1)+
00006F18 22C0                       		move.l	d0,(a1)+
00006F1A 22C0                       		move.l	d0,(a1)+
00006F1C 22C0                       		move.l	d0,(a1)+
00006F1E 22C0                       		move.l	d0,(a1)+
00006F20 22C0                       		move.l	d0,(a1)+
00006F22 22C0                       		move.l	d0,(a1)+
00006F24 22C0                       		move.l	d0,(a1)+
00006F26 51C9 FFDC                  		dbf	d1,loc_6480
00006F2A 4E75                       		rts	
00006F2C                            ; End of function Deform_SLZ
00006F2C                            
00006F2C                            
00006F2C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006F2C                            
00006F2C                            
00006F2C                            Deform_SLZ_2:				; XREF: Deform_SLZ
00006F2C 43F8 A800                  		lea	($FFFFA800).w,a1
00006F30 3438 F700                  		move.w	($FFFFF700).w,d2
00006F34 4442                       		neg.w	d2
00006F36 3002                       		move.w	d2,d0
00006F38 E640                       		asr.w	#3,d0
00006F3A 9042                       		sub.w	d2,d0
00006F3C 48C0                       		ext.l	d0
00006F3E E980                       		asl.l	#4,d0
00006F40 81FC 001C                  		divs.w	#$1C,d0
00006F44 48C0                       		ext.l	d0
00006F46 E980                       		asl.l	#4,d0
00006F48 E180                       		asl.l	#8,d0
00006F4A 7600                       		moveq	#0,d3
00006F4C 3602                       		move.w	d2,d3
00006F4E 323C 001B                  		move.w	#$1B,d1
00006F52                            
00006F52                            loc_64CE:
00006F52 32C3                       		move.w	d3,(a1)+
00006F54 4843                       		swap	d3
00006F56 D680                       		add.l	d0,d3
00006F58 4843                       		swap	d3
00006F5A 51C9 FFF6                  		dbf	d1,loc_64CE
00006F5E 3002                       		move.w	d2,d0
00006F60 E640                       		asr.w	#3,d0
00006F62 323C 0004                  		move.w	#4,d1
00006F66                            
00006F66                            loc_64E2:
00006F66 32C0                       		move.w	d0,(a1)+
00006F68 51C9 FFFC                  		dbf	d1,loc_64E2
00006F6C 3002                       		move.w	d2,d0
00006F6E E440                       		asr.w	#2,d0
00006F70 323C 0004                  		move.w	#4,d1
00006F74                            
00006F74                            loc_64F0:
00006F74 32C0                       		move.w	d0,(a1)+
00006F76 51C9 FFFC                  		dbf	d1,loc_64F0
00006F7A 3002                       		move.w	d2,d0
00006F7C E240                       		asr.w	#1,d0
00006F7E 323C 001D                  		move.w	#$1D,d1
00006F82                            
00006F82                            loc_64FE:
00006F82 32C0                       		move.w	d0,(a1)+
00006F84 51C9 FFFC                  		dbf	d1,loc_64FE
00006F88 4E75                       		rts	
00006F8A                            ; End of function Deform_SLZ_2
00006F8A                            
00006F8A                            ; ---------------------------------------------------------------------------
00006F8A                            ; Spring Yard Zone background layer deformation	code
00006F8A                            ; ---------------------------------------------------------------------------
00006F8A                            
00006F8A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006F8A                            
00006F8A                            
00006F8A                            Deform_SYZ:				; XREF: Deform_Index
00006F8A 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006F8E 48C4                       		ext.l	d4
00006F90 ED84                       		asl.l	#6,d4
00006F92 3A38 F73C                  		move.w	($FFFFF73C).w,d5
00006F96 48C5                       		ext.l	d5
00006F98 E985                       		asl.l	#4,d5
00006F9A 2205                       		move.l	d5,d1
00006F9C E385                       		asl.l	#1,d5
00006F9E DA81                       		add.l	d1,d5
00006FA0 6100 0000                  		bsr.w	ScrollBlock1
00006FA4 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006FAA 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006FAE 323C 00DF                  		move.w	#$DF,d1
00006FB2 3038 F700                  		move.w	($FFFFF700).w,d0
00006FB6 4440                       		neg.w	d0
00006FB8 4840                       		swap	d0
00006FBA 3038 F708                  		move.w	($FFFFF708).w,d0
00006FBE 4440                       		neg.w	d0
00006FC0                            
00006FC0                            loc_653C:
00006FC0 22C0                       		move.l	d0,(a1)+
00006FC2 51C9 FFFC                  		dbf	d1,loc_653C
00006FC6 4E75                       		rts	
00006FC8                            ; End of function Deform_SYZ
00006FC8                            
00006FC8                            ; ---------------------------------------------------------------------------
00006FC8                            ; Scrap	Brain Zone background layer deformation	code
00006FC8                            ; ---------------------------------------------------------------------------
00006FC8                            
00006FC8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006FC8                            
00006FC8                            
00006FC8                            Deform_SBZ:				; XREF: Deform_Index
00006FC8 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006FCC 48C4                       		ext.l	d4
00006FCE ED84                       		asl.l	#6,d4
00006FD0 3A38 F73C                  		move.w	($FFFFF73C).w,d5
00006FD4 48C5                       		ext.l	d5
00006FD6 E985                       		asl.l	#4,d5
00006FD8 E385                       		asl.l	#1,d5
00006FDA 6100 0000                  		bsr.w	ScrollBlock1
00006FDE 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006FE4 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006FE8 323C 00DF                  		move.w	#$DF,d1
00006FEC 3038 F700                  		move.w	($FFFFF700).w,d0
00006FF0 4440                       		neg.w	d0
00006FF2 4840                       		swap	d0
00006FF4 3038 F708                  		move.w	($FFFFF708).w,d0
00006FF8 4440                       		neg.w	d0
00006FFA                            
00006FFA                            loc_6576:
00006FFA 22C0                       		move.l	d0,(a1)+
00006FFC 51C9 FFFC                  		dbf	d1,loc_6576
00007000 4E75                       		rts	
00007002                            ; End of function Deform_SBZ
00007002                            
00007002                            ; ---------------------------------------------------------------------------
00007002                            ; Subroutine to	scroll the level horizontally as Sonic moves
00007002                            ; ---------------------------------------------------------------------------
00007002                            
00007002                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007002                            
00007002                            
00007002                            ScrollHoriz:				; XREF: DeformBgLayer
00007002 3838 F700                  		move.w	($FFFFF700).w,d4
00007006 6100                       		bsr.s	ScrollHoriz2
00007008 3038 F700                  		move.w	($FFFFF700).w,d0
0000700C 0240 0010                  		andi.w	#$10,d0
00007010 1238 F74A                  		move.b	($FFFFF74A).w,d1
00007014 B300                       		eor.b	d1,d0
00007016 6600                       		bne.s	locret_65B0
00007018 0A38 0010 F74A             		eori.b	#$10,($FFFFF74A).w
0000701E 3038 F700                  		move.w	($FFFFF700).w,d0
00007022 9044                       		sub.w	d4,d0
00007024 6A00                       		bpl.s	loc_65AA
00007026 08F8 0002 F754             		bset	#2,($FFFFF754).w
0000702C 4E75                       		rts	
0000702E                            ; ===========================================================================
0000702E                            
0000702E                            loc_65AA:
0000702E 08F8 0003 F754             		bset	#3,($FFFFF754).w
00007034                            
00007034                            locret_65B0:
00007034 4E75                       		rts	
00007036                            ; End of function ScrollHoriz
00007036                            
00007036                            
00007036                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007036                            
00007036                            
00007036                            ScrollHoriz2:				; XREF: ScrollHoriz
00007036 3238 C904                  		move.w	($FFFFC904).w,d1
0000703A 6700                       		beq.s	@cont1
0000703C 0441 0100                  		sub.w	#$100,d1
00007040 31C1 C904                  		move.w	d1,($FFFFC904).w
00007044 7200                       		moveq	#0,d1
00007046 1238 C904                  		move.b	($FFFFC904).w,d1
0000704A E509                       		lsl.b	#2,d1
0000704C 5801                       		addq.b	#4,d1
0000704E 3038 F7A8                  		move.w	($FFFFF7A8).w,d0
00007052 9001                       		sub.b	d1,d0
00007054 43F8 CB00                  		lea	($FFFFCB00).w,a1
00007058 3031 0000                  		move.w	(a1,d0.w),d0
0000705C 0240 3FFF                  		and.w	#$3FFF,d0
00007060 6000                       		bra.s	@cont2
00007062                            		
00007062                            @cont1:
00007062 3038 D008                  		move.w	($FFFFD008).w,d0
00007066                            		
00007066                            @cont2:
00007066 9078 F700                  		sub.w	($FFFFF700).w,d0
0000706A 0440 0090                  		subi.w	#$90,d0
0000706E 6500                       		bcs.s	loc_65F6
00007070 0440 0010                  		subi.w	#$10,d0
00007074 6400                       		bcc.s	loc_65CC
00007076 4278 F73A                  		clr.w	($FFFFF73A).w
0000707A 4E75                       		rts	
0000707C                            ; ===========================================================================
0000707C                            
0000707C                            loc_65CC:
0000707C 0C40 0010                  		cmpi.w	#$10,d0
00007080 6500                       		bcs.s	loc_65D6
00007082 303C 0010                  		move.w	#$10,d0
00007086                            
00007086                            loc_65D6:
00007086 D078 F700                  		add.w	($FFFFF700).w,d0
0000708A B078 F72A                  		cmp.w	($FFFFF72A).w,d0
0000708E 6D00                       		blt.s	loc_65E4
00007090 3038 F72A                  		move.w	($FFFFF72A).w,d0
00007094                            
00007094                            loc_65E4:
00007094 3200                       		move.w	d0,d1
00007096 9278 F700                  		sub.w	($FFFFF700).w,d1
0000709A E141                       		asl.w	#8,d1
0000709C 31C0 F700                  		move.w	d0,($FFFFF700).w
000070A0 31C1 F73A                  		move.w	d1,($FFFFF73A).w
000070A4 4E75                       		rts	
000070A6                            ; ===========================================================================
000070A6                            
000070A6                            loc_65F6:				; XREF: ScrollHoriz2
000070A6 0C40 FFF0                  		cmpi.w	#-$10,d0
000070AA 6E00                       		bgt.s	@cont
000070AC 303C FFF0                  		move.w	#-$10,d0	
000070B0                            		
000070B0                            @cont:
000070B0 D078 F700                  		add.w	($FFFFF700).w,d0
000070B4 B078 F728                  		cmp.w	($FFFFF728).w,d0
000070B8 6EDA                       		bgt.s	loc_65E4
000070BA 3038 F728                  		move.w	($FFFFF728).w,d0
000070BE 60D4                       		bra.s	loc_65E4
000070C0                            ; End of function ScrollHoriz2
000070C0                            
000070C0                            ; ===========================================================================
000070C0 4A40                       		tst.w	d0
000070C2 6A00                       		bpl.s	loc_6610
000070C4 303C FFFE                  		move.w	#-2,d0
000070C8 60DC                       		bra.s	loc_65F6
000070CA                            ; ===========================================================================
000070CA                            
000070CA                            loc_6610:
000070CA 303C 0002                  		move.w	#2,d0
000070CE 60AC                       		bra.s	loc_65CC
000070D0                            
000070D0                            ; ---------------------------------------------------------------------------
000070D0                            ; Subroutine to	scroll the level vertically as Sonic moves
000070D0                            ; ---------------------------------------------------------------------------
000070D0                            
000070D0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000070D0                            
000070D0                            
000070D0                            ScrollVertical:				; XREF: DeformBgLayer
000070D0 7200                       		moveq	#0,d1
000070D2 3038 D00C                  		move.w	($FFFFD00C).w,d0
000070D6 9078 F704                  		sub.w	($FFFFF704).w,d0
000070DA 0838 0002 D022             		btst	#2,($FFFFD022).w
000070E0 6700                       		beq.s	loc_662A
000070E2 5B40                       		subq.w	#5,d0
000070E4                            
000070E4                            loc_662A:
000070E4 0838 0001 D022             		btst	#1,($FFFFD022).w
000070EA 6700                       		beq.s	loc_664A
000070EC 0640 0020                  		addi.w	#$20,d0
000070F0 9078 F73E                  		sub.w	($FFFFF73E).w,d0
000070F4 6500                       		bcs.s	loc_6696
000070F6 0440 0040                  		subi.w	#$40,d0
000070FA 6400                       		bcc.s	loc_6696
000070FC 4A38 F75C                  		tst.b	($FFFFF75C).w
00007100 6600                       		bne.s	loc_66A8
00007102 6000                       		bra.s	loc_6656
00007104                            ; ===========================================================================
00007104                            
00007104                            loc_664A:
00007104 9078 F73E                  		sub.w	($FFFFF73E).w,d0
00007108 6600                       		bne.s	loc_665C
0000710A 4A38 F75C                  		tst.b	($FFFFF75C).w
0000710E 6600                       		bne.s	loc_66A8
00007110                            
00007110                            loc_6656:
00007110 4278 F73C                  		clr.w	($FFFFF73C).w
00007114 4E75                       		rts	
00007116                            ; ===========================================================================
00007116                            
00007116                            loc_665C:
00007116 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w
0000711C 6600                       		bne.s	loc_6684
0000711E 3238 D014                  		move.w	($FFFFD014).w,d1
00007122 6A00                       		bpl.s	loc_666C
00007124 4441                       		neg.w	d1
00007126                            
00007126                            loc_666C:
00007126 0C41 0800                  		cmpi.w	#$800,d1
0000712A 6400                       		bcc.s	loc_6696
0000712C 323C 0600                  		move.w	#$600,d1
00007130 0C40 0006                  		cmpi.w	#6,d0
00007134 6E00                       		bgt.s	loc_66F6
00007136 0C40 FFFA                  		cmpi.w	#-6,d0
0000713A 6D00                       		blt.s	loc_66C0
0000713C 6000                       		bra.s	loc_66AE
0000713E                            ; ===========================================================================
0000713E                            
0000713E                            loc_6684:
0000713E 323C 0200                  		move.w	#$200,d1
00007142 0C40 0002                  		cmpi.w	#2,d0
00007146 6E00                       		bgt.s	loc_66F6
00007148 0C40 FFFE                  		cmpi.w	#-2,d0
0000714C 6D00                       		blt.s	loc_66C0
0000714E 6000                       		bra.s	loc_66AE
00007150                            ; ===========================================================================
00007150                            
00007150                            loc_6696:
00007150 323C 1000                  		move.w	#$1000,d1
00007154 0C40 0010                  		cmpi.w	#$10,d0
00007158 6E00                       		bgt.s	loc_66F6
0000715A 0C40 FFF0                  		cmpi.w	#-$10,d0
0000715E 6D00                       		blt.s	loc_66C0
00007160 6000                       		bra.s	loc_66AE
00007162                            ; ===========================================================================
00007162                            
00007162                            loc_66A8:
00007162 7000                       		moveq	#0,d0
00007164 11C0 F75C                  		move.b	d0,($FFFFF75C).w
00007168                            
00007168                            loc_66AE:
00007168 7200                       		moveq	#0,d1
0000716A 3200                       		move.w	d0,d1
0000716C D278 F704                  		add.w	($FFFFF704).w,d1
00007170 4A40                       		tst.w	d0
00007172 6A00 0000                  		bpl.w	loc_6700
00007176 6000 0000                  		bra.w	loc_66CC
0000717A                            ; ===========================================================================
0000717A                            
0000717A                            loc_66C0:
0000717A 4441                       		neg.w	d1
0000717C 48C1                       		ext.l	d1
0000717E E181                       		asl.l	#8,d1
00007180 D2B8 F704                  		add.l	($FFFFF704).w,d1
00007184 4841                       		swap	d1
00007186                            
00007186                            loc_66CC:
00007186 B278 F72C                  		cmp.w	($FFFFF72C).w,d1
0000718A 6E00                       		bgt.s	loc_6724
0000718C 0C41 FF00                  		cmpi.w	#-$100,d1
00007190 6E00                       		bgt.s	loc_66F0
00007192 0241 07FF                  		andi.w	#$7FF,d1
00007196 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
0000719C 0278 07FF F704             		andi.w	#$7FF,($FFFFF704).w
000071A2 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
000071A8 6000                       		bra.s	loc_6724
000071AA                            ; ===========================================================================
000071AA                            
000071AA                            loc_66F0:
000071AA 3238 F72C                  		move.w	($FFFFF72C).w,d1
000071AE 6000                       		bra.s	loc_6724
000071B0                            ; ===========================================================================
000071B0                            
000071B0                            loc_66F6:
000071B0 48C1                       		ext.l	d1
000071B2 E181                       		asl.l	#8,d1
000071B4 D2B8 F704                  		add.l	($FFFFF704).w,d1
000071B8 4841                       		swap	d1
000071BA                            
000071BA                            loc_6700:
000071BA B278 F72E                  		cmp.w	($FFFFF72E).w,d1
000071BE 6D00                       		blt.s	loc_6724
000071C0 0441 0800                  		subi.w	#$800,d1
000071C4 6500                       		bcs.s	loc_6720
000071C6 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
000071CC 0478 0800 F704             		subi.w	#$800,($FFFFF704).w
000071D2 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
000071D8 6000                       		bra.s	loc_6724
000071DA                            ; ===========================================================================
000071DA                            
000071DA                            loc_6720:
000071DA 3238 F72E                  		move.w	($FFFFF72E).w,d1
000071DE                            
000071DE                            loc_6724:
000071DE 3838 F704                  		move.w	($FFFFF704).w,d4
000071E2 4841                       		swap	d1
000071E4 2601                       		move.l	d1,d3
000071E6 96B8 F704                  		sub.l	($FFFFF704).w,d3
000071EA E09B                       		ror.l	#8,d3
000071EC 31C3 F73C                  		move.w	d3,($FFFFF73C).w
000071F0 21C1 F704                  		move.l	d1,($FFFFF704).w
000071F4 3038 F704                  		move.w	($FFFFF704).w,d0
000071F8 0240 0010                  		andi.w	#$10,d0
000071FC 1238 F74B                  		move.b	($FFFFF74B).w,d1
00007200 B300                       		eor.b	d1,d0
00007202 6600                       		bne.s	locret_6766
00007204 0A38 0010 F74B             		eori.b	#$10,($FFFFF74B).w
0000720A 3038 F704                  		move.w	($FFFFF704).w,d0
0000720E 9044                       		sub.w	d4,d0
00007210 6A00                       		bpl.s	loc_6760
00007212 08F8 0000 F754             		bset	#0,($FFFFF754).w
00007218 4E75                       		rts	
0000721A                            ; ===========================================================================
0000721A                            
0000721A                            loc_6760:
0000721A 08F8 0001 F754             		bset	#1,($FFFFF754).w
00007220                            
00007220                            locret_6766:
00007220 4E75                       		rts	
00007222                            ; End of function ScrollVertical
00007222                            
00007222                            
00007222                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007222                            
00007222                            
00007222                            ScrollBlock1:				; XREF: Deform_GHZ; et al
00007222 2438 F708                  		move.l	($FFFFF708).w,d2
00007226 2002                       		move.l	d2,d0
00007228 D084                       		add.l	d4,d0
0000722A 21C0 F708                  		move.l	d0,($FFFFF708).w
0000722E 2200                       		move.l	d0,d1
00007230 4841                       		swap	d1
00007232 0241 0010                  		andi.w	#$10,d1
00007236 1638 F74C                  		move.b	($FFFFF74C).w,d3
0000723A B701                       		eor.b	d3,d1
0000723C 6600                       		bne.s	loc_679C
0000723E 0A38 0010 F74C             		eori.b	#$10,($FFFFF74C).w
00007244 9082                       		sub.l	d2,d0
00007246 6A00                       		bpl.s	loc_6796
00007248 08F8 0002 F756             		bset	#2,($FFFFF756).w
0000724E 6000                       		bra.s	loc_679C
00007250                            ; ===========================================================================
00007250                            
00007250                            loc_6796:
00007250 08F8 0003 F756             		bset	#3,($FFFFF756).w
00007256                            
00007256                            loc_679C:
00007256 2638 F70C                  		move.l	($FFFFF70C).w,d3
0000725A 2003                       		move.l	d3,d0
0000725C D085                       		add.l	d5,d0
0000725E 21C0 F70C                  		move.l	d0,($FFFFF70C).w
00007262 2200                       		move.l	d0,d1
00007264 4841                       		swap	d1
00007266 0241 0010                  		andi.w	#$10,d1
0000726A 1438 F74D                  		move.b	($FFFFF74D).w,d2
0000726E B501                       		eor.b	d2,d1
00007270 6600                       		bne.s	locret_67D0
00007272 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
00007278 9083                       		sub.l	d3,d0
0000727A 6A00                       		bpl.s	loc_67CA
0000727C 08F8 0000 F756             		bset	#0,($FFFFF756).w
00007282 4E75                       		rts	
00007284                            ; ===========================================================================
00007284                            
00007284                            loc_67CA:
00007284 08F8 0001 F756             		bset	#1,($FFFFF756).w
0000728A                            
0000728A                            locret_67D0:
0000728A 4E75                       		rts	
0000728C                            ; End of function ScrollBlock1
0000728C                            
0000728C                            
0000728C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000728C                            
0000728C                            
0000728C                            ScrollBlock2:				; XREF: Deform_SLZ
0000728C 2438 F708                  		move.l	($FFFFF708).w,d2
00007290 2002                       		move.l	d2,d0
00007292 D084                       		add.l	d4,d0
00007294 21C0 F708                  		move.l	d0,($FFFFF708).w
00007298 2638 F70C                  		move.l	($FFFFF70C).w,d3
0000729C 2003                       		move.l	d3,d0
0000729E D085                       		add.l	d5,d0
000072A0 21C0 F70C                  		move.l	d0,($FFFFF70C).w
000072A4 2200                       		move.l	d0,d1
000072A6 4841                       		swap	d1
000072A8 0241 0010                  		andi.w	#$10,d1
000072AC 1438 F74D                  		move.b	($FFFFF74D).w,d2
000072B0 B501                       		eor.b	d2,d1
000072B2 6600                       		bne.s	locret_6812
000072B4 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
000072BA 9083                       		sub.l	d3,d0
000072BC 6A00                       		bpl.s	loc_680C
000072BE 08F8 0000 F756             		bset	#0,($FFFFF756).w
000072C4 4E75                       		rts	
000072C6                            ; ===========================================================================
000072C6                            
000072C6                            loc_680C:
000072C6 08F8 0001 F756             		bset	#1,($FFFFF756).w
000072CC                            
000072CC                            locret_6812:
000072CC 4E75                       		rts	
000072CE                            ; End of function ScrollBlock2
000072CE                            
000072CE                            
000072CE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000072CE                            
000072CE                            
000072CE                            ScrollBlock3:				; XREF: Deform_GHZ; et al
000072CE 3638 F70C                  		move.w	($FFFFF70C).w,d3
000072D2 31C0 F70C                  		move.w	d0,($FFFFF70C).w
000072D6 3200                       		move.w	d0,d1
000072D8 0241 0010                  		andi.w	#$10,d1
000072DC 1438 F74D                  		move.b	($FFFFF74D).w,d2
000072E0 B501                       		eor.b	d2,d1
000072E2 6600                       		bne.s	locret_6842
000072E4 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
000072EA 9043                       		sub.w	d3,d0
000072EC 6A00                       		bpl.s	loc_683C
000072EE 08F8 0000 F756             		bset	#0,($FFFFF756).w
000072F4 4E75                       		rts	
000072F6                            ; ===========================================================================
000072F6                            
000072F6                            loc_683C:
000072F6 08F8 0001 F756             		bset	#1,($FFFFF756).w
000072FC                            
000072FC                            locret_6842:
000072FC 4E75                       		rts	
000072FE                            ; End of function ScrollBlock3
000072FE                            
000072FE                            
000072FE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000072FE                            
000072FE                            
000072FE                            ScrollBlock4:				; XREF: Deform_GHZ
000072FE 3438 F710                  		move.w	($FFFFF710).w,d2
00007302 3638 F714                  		move.w	($FFFFF714).w,d3
00007306 3038 F73A                  		move.w	($FFFFF73A).w,d0
0000730A 48C0                       		ext.l	d0
0000730C EF80                       		asl.l	#7,d0
0000730E D1B8 F710                  		add.l	d0,($FFFFF710).w
00007312 3038 F710                  		move.w	($FFFFF710).w,d0
00007316 0240 0010                  		andi.w	#$10,d0
0000731A 1238 F74E                  		move.b	($FFFFF74E).w,d1
0000731E B300                       		eor.b	d1,d0
00007320 6600                       		bne.s	locret_6884
00007322 0A38 0010 F74E             		eori.b	#$10,($FFFFF74E).w
00007328 3038 F710                  		move.w	($FFFFF710).w,d0
0000732C 9042                       		sub.w	d2,d0
0000732E 6A00                       		bpl.s	loc_687E
00007330 08F8 0002 F758             		bset	#2,($FFFFF758).w
00007336 6000                       		bra.s	locret_6884
00007338                            ; ===========================================================================
00007338                            
00007338                            loc_687E:
00007338 08F8 0003 F758             		bset	#3,($FFFFF758).w
0000733E                            
0000733E                            locret_6884:
0000733E 4E75                       		rts	
00007340                            ; End of function ScrollBlock4
00007340                            
00007340                            
00007340                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007340                            
00007340                            
00007340                            sub_6886:				; XREF: loc_C44
00007340 4BF9 00C0 0004             		lea	($C00004).l,a5
00007346 4DF9 00C0 0000             		lea	($C00000).l,a6
0000734C 45F8 F756                  		lea	($FFFFF756).w,a2
00007350 47F8 F708                  		lea	($FFFFF708).w,a3
00007354 49F8 A440                  		lea	($FFFFA440).w,a4
00007358 343C 6000                  		move.w	#$6000,d2
0000735C 6100 0000                  		bsr.w	sub_6954
00007360 45F8 F758                  		lea	($FFFFF758).w,a2
00007364 47F8 F710                  		lea	($FFFFF710).w,a3
00007368 6000 0000                  		bra.w	sub_69F4
0000736C                            ; End of function sub_6886
0000736C                            
0000736C                            ; ---------------------------------------------------------------------------
0000736C                            ; Subroutine to	display	correct	tiles as you move
0000736C                            ; ---------------------------------------------------------------------------
0000736C                            
0000736C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000736C                            
0000736C                            
0000736C                            LoadTilesAsYouMove:			; XREF: Demo_Time
0000736C 4BF9 00C0 0004             		lea	($C00004).l,a5
00007372 4DF9 00C0 0000             		lea	($C00000).l,a6
00007378 45F8 FF32                  		lea	($FFFFFF32).w,a2
0000737C 47F8 FF18                  		lea	($FFFFFF18).w,a3
00007380 49F8 A440                  		lea	($FFFFA440).w,a4
00007384 343C 6000                  		move.w	#$6000,d2
00007388 6100 0000                  		bsr.w	sub_6954
0000738C 45F8 FF34                  		lea	($FFFFFF34).w,a2
00007390 47F8 FF20                  		lea	($FFFFFF20).w,a3
00007394 6100 0000                  		bsr.w	sub_69F4
00007398 45F8 FF30                  		lea	($FFFFFF30).w,a2
0000739C 47F8 FF10                  		lea	($FFFFFF10).w,a3
000073A0 49F8 A400                  		lea	($FFFFA400).w,a4
000073A4 343C 4000                  		move.w	#$4000,d2
000073A8 4A12                       		tst.b	(a2)
000073AA 6700                       		beq.s	locret_6952
000073AC 0892 0000                  		bclr	#0,(a2)
000073B0 6700                       		beq.s	loc_6908
000073B2 78F0                       		moveq	#-$10,d4
000073B4 7AF0                       		moveq	#-$10,d5
000073B6 6100 0000                  		bsr.w	sub_6C20
000073BA 78F0                       		moveq	#-$10,d4
000073BC 7AF0                       		moveq	#-$10,d5
000073BE 6100 0000                  		bsr.w	sub_6AD8
000073C2                            
000073C2                            loc_6908:
000073C2 0892 0001                  		bclr	#1,(a2)
000073C6 6700                       		beq.s	loc_6922
000073C8 383C 00E0                  		move.w	#$E0,d4
000073CC 7AF0                       		moveq	#-$10,d5
000073CE 6100 0000                  		bsr.w	sub_6C20
000073D2 383C 00E0                  		move.w	#$E0,d4
000073D6 7AF0                       		moveq	#-$10,d5
000073D8 6100 0000                  		bsr.w	sub_6AD8
000073DC                            
000073DC                            loc_6922:
000073DC 0892 0002                  		bclr	#2,(a2)
000073E0 6700                       		beq.s	loc_6938
000073E2 78F0                       		moveq	#-$10,d4
000073E4 7AF0                       		moveq	#-$10,d5
000073E6 6100 0000                  		bsr.w	sub_6C20
000073EA 78F0                       		moveq	#-$10,d4
000073EC 7AF0                       		moveq	#-$10,d5
000073EE 6100 0000                  		bsr.w	sub_6B04
000073F2                            
000073F2                            loc_6938:
000073F2 0892 0003                  		bclr	#3,(a2)
000073F6 6700                       		beq.s	locret_6952
000073F8 78F0                       		moveq	#-$10,d4
000073FA 3A3C 0140                  		move.w	#$140,d5
000073FE 6100 0000                  		bsr.w	sub_6C20
00007402 78F0                       		moveq	#-$10,d4
00007404 3A3C 0140                  		move.w	#$140,d5
00007408 6100 0000                  		bsr.w	sub_6B04
0000740C                            
0000740C                            locret_6952:
0000740C 4E75                       		rts	
0000740E                            ; End of function LoadTilesAsYouMove
0000740E                            
0000740E                            
0000740E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000740E                            
0000740E                            
0000740E                            sub_6954:				; XREF: sub_6886; LoadTilesAsYouMove
0000740E 4A12                       		tst.b	(a2)
00007410 6700 0000                  		beq.w	locret_69F2
00007414 0892 0000                  		bclr	#0,(a2)
00007418 6700                       		beq.s	loc_6972
0000741A 78F0                       		moveq	#-$10,d4
0000741C 7AF0                       		moveq	#-$10,d5
0000741E 6100 0000                  		bsr.w	sub_6C20
00007422 78F0                       		moveq	#-$10,d4
00007424 7AF0                       		moveq	#-$10,d5
00007426 7C1F                       		moveq	#$1F,d6
00007428 6100 0000                  		bsr.w	sub_6ADA
0000742C                            
0000742C                            loc_6972:
0000742C 0892 0001                  		bclr	#1,(a2)
00007430 6700                       		beq.s	loc_698E
00007432 383C 00E0                  		move.w	#$E0,d4
00007436 7AF0                       		moveq	#-$10,d5
00007438 6100 0000                  		bsr.w	sub_6C20
0000743C 383C 00E0                  		move.w	#$E0,d4
00007440 7AF0                       		moveq	#-$10,d5
00007442 7C1F                       		moveq	#$1F,d6
00007444 6100 0000                  		bsr.w	sub_6ADA
00007448                            
00007448                            loc_698E:
00007448 0892 0002                  		bclr	#2,(a2)
0000744C 6700                       		beq.s	loc_69BE
0000744E 78F0                       		moveq	#-$10,d4
00007450 7AF0                       		moveq	#-$10,d5
00007452 6100 0000                  		bsr.w	sub_6C20
00007456 78F0                       		moveq	#-$10,d4
00007458 7AF0                       		moveq	#-$10,d5
0000745A 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
0000745E 322B 0004                  		move.w	4(a3),d1
00007462 0241 FFF0                  		andi.w	#-$10,d1
00007466 9C41                       		sub.w	d1,d6
00007468 6D00                       		blt.s	loc_69BE
0000746A E84E                       		lsr.w	#4,d6
0000746C 0C46 000F                  		cmpi.w	#$F,d6
00007470 6500                       		bcs.s	loc_69BA
00007472 7C0F                       		moveq	#$F,d6
00007474                            
00007474                            loc_69BA:
00007474 6100 0000                  		bsr.w	sub_6B06
00007478                            
00007478                            loc_69BE:
00007478 0892 0003                  		bclr	#3,(a2)
0000747C 6700                       		beq.s	locret_69F2
0000747E 78F0                       		moveq	#-$10,d4
00007480 3A3C 0140                  		move.w	#$140,d5
00007484 6100 0000                  		bsr.w	sub_6C20
00007488 78F0                       		moveq	#-$10,d4
0000748A 3A3C 0140                  		move.w	#$140,d5
0000748E 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
00007492 322B 0004                  		move.w	4(a3),d1
00007496 0241 FFF0                  		andi.w	#-$10,d1
0000749A 9C41                       		sub.w	d1,d6
0000749C 6D00                       		blt.s	locret_69F2
0000749E E84E                       		lsr.w	#4,d6
000074A0 0C46 000F                  		cmpi.w	#$F,d6
000074A4 6500                       		bcs.s	loc_69EE
000074A6 7C0F                       		moveq	#$F,d6
000074A8                            
000074A8                            loc_69EE:
000074A8 6100 0000                  		bsr.w	sub_6B06
000074AC                            
000074AC                            locret_69F2:
000074AC 4E75                       		rts	
000074AE                            ; End of function sub_6954
000074AE                            
000074AE                            
000074AE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000074AE                            
000074AE                            
000074AE                            sub_69F4:				; XREF: sub_6886; LoadTilesAsYouMove
000074AE 4A12                       		tst.b	(a2)
000074B0 6700 0000                  		beq.w	locret_6A80
000074B4 0892 0002                  		bclr	#2,(a2)
000074B8 6700                       		beq.s	loc_6A3E
000074BA 0C53 0010                  		cmpi.w	#$10,(a3)
000074BE 6500                       		bcs.s	loc_6A3E
000074C0 3838 F7F0                  		move.w	($FFFFF7F0).w,d4
000074C4 322B 0004                  		move.w	4(a3),d1
000074C8 0241 FFF0                  		andi.w	#-$10,d1
000074CC 9841                       		sub.w	d1,d4
000074CE 3F04                       		move.w	d4,-(sp)
000074D0 7AF0                       		moveq	#-$10,d5
000074D2 6100 0000                  		bsr.w	sub_6C20
000074D6 381F                       		move.w	(sp)+,d4
000074D8 7AF0                       		moveq	#-$10,d5
000074DA 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
000074DE 322B 0004                  		move.w	4(a3),d1
000074E2 0241 FFF0                  		andi.w	#-$10,d1
000074E6 9C41                       		sub.w	d1,d6
000074E8 6D00                       		blt.s	loc_6A3E
000074EA E84E                       		lsr.w	#4,d6
000074EC 0446 000E                  		subi.w	#$E,d6
000074F0 6400                       		bcc.s	loc_6A3E
000074F2 4446                       		neg.w	d6
000074F4 6100 0000                  		bsr.w	sub_6B06
000074F8                            
000074F8                            loc_6A3E:
000074F8 0892 0003                  		bclr	#3,(a2)
000074FC 6700                       		beq.s	locret_6A80
000074FE 3838 F7F0                  		move.w	($FFFFF7F0).w,d4
00007502 322B 0004                  		move.w	4(a3),d1
00007506 0241 FFF0                  		andi.w	#-$10,d1
0000750A 9841                       		sub.w	d1,d4
0000750C 3F04                       		move.w	d4,-(sp)
0000750E 3A3C 0140                  		move.w	#$140,d5
00007512 6100 0000                  		bsr.w	sub_6C20
00007516 381F                       		move.w	(sp)+,d4
00007518 3A3C 0140                  		move.w	#$140,d5
0000751C 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
00007520 322B 0004                  		move.w	4(a3),d1
00007524 0241 FFF0                  		andi.w	#-$10,d1
00007528 9C41                       		sub.w	d1,d6
0000752A 6D00                       		blt.s	locret_6A80
0000752C E84E                       		lsr.w	#4,d6
0000752E 0446 000E                  		subi.w	#$E,d6
00007532 6400                       		bcc.s	locret_6A80
00007534 4446                       		neg.w	d6
00007536 6100 0000                  		bsr.w	sub_6B06
0000753A                            
0000753A                            locret_6A80:
0000753A 4E75                       		rts	
0000753C                            ; End of function sub_69F4
0000753C                            
0000753C                            ; ===========================================================================
0000753C 4A12                       		tst.b	(a2)
0000753E 6700                       		beq.s	locret_6AD6
00007540 0892 0002                  		bclr	#2,(a2)
00007544 6700                       		beq.s	loc_6AAC
00007546 383C 00D0                  		move.w	#$D0,d4
0000754A 322B 0004                  		move.w	4(a3),d1
0000754E 0241 FFF0                  		andi.w	#-$10,d1
00007552 9841                       		sub.w	d1,d4
00007554 3F04                       		move.w	d4,-(sp)
00007556 7AF0                       		moveq	#-$10,d5
00007558 6100 0000                  		bsr.w	sub_6C3C
0000755C 381F                       		move.w	(sp)+,d4
0000755E 7AF0                       		moveq	#-$10,d5
00007560 7C02                       		moveq	#2,d6
00007562 6100 0000                  		bsr.w	sub_6B06
00007566                            
00007566                            loc_6AAC:
00007566 0892 0003                  		bclr	#3,(a2)
0000756A 6700                       		beq.s	locret_6AD6
0000756C 383C 00D0                  		move.w	#$D0,d4
00007570 322B 0004                  		move.w	4(a3),d1
00007574 0241 FFF0                  		andi.w	#-$10,d1
00007578 9841                       		sub.w	d1,d4
0000757A 3F04                       		move.w	d4,-(sp)
0000757C 3A3C 0140                  		move.w	#$140,d5
00007580 6100 0000                  		bsr.w	sub_6C3C
00007584 381F                       		move.w	(sp)+,d4
00007586 3A3C 0140                  		move.w	#$140,d5
0000758A 7C02                       		moveq	#2,d6
0000758C 6100 0000                  		bsr.w	sub_6B06
00007590                            
00007590                            locret_6AD6:
00007590 4E75                       		rts	
00007592                            
00007592                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007592                            
00007592                            
00007592                            sub_6AD8:				; XREF: LoadTilesAsYouMove
00007592 7C15                       		moveq	#$15,d6
00007594                            ; End of function sub_6AD8
00007594                            
00007594                            
00007594                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007594                            
00007594                            
00007594                            sub_6ADA:				; XREF: sub_6954; LoadTilesFromStart2
00007594 2E3C 0080 0000             		move.l	#$800000,d7
0000759A 2200                       		move.l	d0,d1
0000759C                            
0000759C                            loc_6AE2:
0000759C 48E7 0C00                  		movem.l	d4-d5,-(sp)
000075A0 6100 0000                  		bsr.w	sub_6BD6
000075A4 2001                       		move.l	d1,d0
000075A6 6100 0000                  		bsr.w	sub_6B32
000075AA 5801                       		addq.b	#4,d1
000075AC 0201 007F                  		andi.b	#$7F,d1
000075B0 4CDF 0030                  		movem.l	(sp)+,d4-d5
000075B4 0645 0010                  		addi.w	#$10,d5
000075B8 51CE FFE2                  		dbf	d6,loc_6AE2
000075BC 4E75                       		rts	
000075BE                            ; End of function sub_6ADA
000075BE                            
000075BE                            
000075BE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000075BE                            
000075BE                            
000075BE                            sub_6B04:				; XREF: LoadTilesAsYouMove
000075BE 7C0F                       		moveq	#$F,d6
000075C0                            ; End of function sub_6B04
000075C0                            
000075C0                            
000075C0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000075C0                            
000075C0                            
000075C0                            sub_6B06:				; XREF: sub_6954
000075C0 2E3C 0080 0000             		move.l	#$800000,d7
000075C6 2200                       		move.l	d0,d1
000075C8                            
000075C8                            loc_6B0E:
000075C8 48E7 0C00                  		movem.l	d4-d5,-(sp)
000075CC 6100 0000                  		bsr.w	sub_6BD6
000075D0 2001                       		move.l	d1,d0
000075D2 6100 0000                  		bsr.w	sub_6B32
000075D6 0641 0100                  		addi.w	#$100,d1
000075DA 0241 0FFF                  		andi.w	#$FFF,d1
000075DE 4CDF 0030                  		movem.l	(sp)+,d4-d5
000075E2 0644 0010                  		addi.w	#$10,d4
000075E6 51CE FFE0                  		dbf	d6,loc_6B0E
000075EA 4E75                       		rts	
000075EC                            ; End of function sub_6B06
000075EC                            
000075EC                            
000075EC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000075EC                            
000075EC                            
000075EC                            sub_6B32:				; XREF: sub_6ADA; sub_6B06
000075EC 8042                       		or.w	d2,d0
000075EE 4840                       		swap	d0
000075F0 0810 0004                  		btst	#4,(a0)
000075F4 6600                       		bne.s	loc_6B6E
000075F6 0810 0003                  		btst	#3,(a0)
000075FA 6600                       		bne.s	loc_6B4E
000075FC 2A80                       		move.l	d0,(a5)
000075FE 2C99                       		move.l	(a1)+,(a6)
00007600 D087                       		add.l	d7,d0
00007602 2A80                       		move.l	d0,(a5)
00007604 2C99                       		move.l	(a1)+,(a6)
00007606 4E75                       		rts	
00007608                            ; ===========================================================================
00007608                            
00007608                            loc_6B4E:
00007608 2A80                       		move.l	d0,(a5)
0000760A 2819                       		move.l	(a1)+,d4
0000760C 0A84 0800 0800             		eori.l	#$8000800,d4
00007612 4844                       		swap	d4
00007614 2C84                       		move.l	d4,(a6)
00007616 D087                       		add.l	d7,d0
00007618 2A80                       		move.l	d0,(a5)
0000761A 2819                       		move.l	(a1)+,d4
0000761C 0A84 0800 0800             		eori.l	#$8000800,d4
00007622 4844                       		swap	d4
00007624 2C84                       		move.l	d4,(a6)
00007626 4E75                       		rts	
00007628                            ; ===========================================================================
00007628                            
00007628                            loc_6B6E:
00007628 0810 0003                  		btst	#3,(a0)
0000762C 6600                       		bne.s	loc_6B90
0000762E 2A80                       		move.l	d0,(a5)
00007630 2A19                       		move.l	(a1)+,d5
00007632 2819                       		move.l	(a1)+,d4
00007634 0A84 1000 1000             		eori.l	#$10001000,d4
0000763A 2C84                       		move.l	d4,(a6)
0000763C D087                       		add.l	d7,d0
0000763E 2A80                       		move.l	d0,(a5)
00007640 0A85 1000 1000             		eori.l	#$10001000,d5
00007646 2C85                       		move.l	d5,(a6)
00007648 4E75                       		rts	
0000764A                            ; ===========================================================================
0000764A                            
0000764A                            loc_6B90:
0000764A 2A80                       		move.l	d0,(a5)
0000764C 2A19                       		move.l	(a1)+,d5
0000764E 2819                       		move.l	(a1)+,d4
00007650 0A84 1800 1800             		eori.l	#$18001800,d4
00007656 4844                       		swap	d4
00007658 2C84                       		move.l	d4,(a6)
0000765A D087                       		add.l	d7,d0
0000765C 2A80                       		move.l	d0,(a5)
0000765E 0A85 1800 1800             		eori.l	#$18001800,d5
00007664 4845                       		swap	d5
00007666 2C85                       		move.l	d5,(a6)
00007668 4E75                       		rts	
0000766A                            ; End of function sub_6B32
0000766A                            
0000766A                            ; ===========================================================================
0000766A 4E75                       		rts	
0000766C                            ; ===========================================================================
0000766C 2A80                       		move.l	d0,(a5)
0000766E 3A3C 2000                  		move.w	#$2000,d5
00007672 3819                       		move.w	(a1)+,d4
00007674 D845                       		add.w	d5,d4
00007676 3C84                       		move.w	d4,(a6)
00007678 3819                       		move.w	(a1)+,d4
0000767A D845                       		add.w	d5,d4
0000767C 3C84                       		move.w	d4,(a6)
0000767E D087                       		add.l	d7,d0
00007680 2A80                       		move.l	d0,(a5)
00007682 3819                       		move.w	(a1)+,d4
00007684 D845                       		add.w	d5,d4
00007686 3C84                       		move.w	d4,(a6)
00007688 3819                       		move.w	(a1)+,d4
0000768A D845                       		add.w	d5,d4
0000768C 3C84                       		move.w	d4,(a6)
0000768E 4E75                       		rts	
00007690                            
00007690                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007690                            
00007690                            
00007690                            sub_6BD6:				; XREF: sub_6ADA; sub_6B06
00007690 43F8 B000                  		lea	($FFFFB000).w,a1
00007694 D86B 0004                  		add.w	4(a3),d4
00007698 DA53                       		add.w	(a3),d5
0000769A 3604                       		move.w	d4,d3
0000769C E24B                       		lsr.w	#1,d3
0000769E 0243 0380                  		andi.w	#$380,d3
000076A2 E64D                       		lsr.w	#3,d5
000076A4 3005                       		move.w	d5,d0
000076A6 EA48                       		lsr.w	#5,d0
000076A8 0240 007F                  		andi.w	#$7F,d0
000076AC D043                       		add.w	d3,d0
000076AE 76FF                       		moveq	#-1,d3
000076B0 1634 0000                  		move.b	(a4,d0.w),d3
000076B4 6700                       		beq.s	locret_6C1E
000076B6 5303                       		subq.b	#1,d3
000076B8 0243 007F                  		andi.w	#$7F,d3
000076BC EE5B                       		ror.w	#7,d3
000076BE D844                       		add.w	d4,d4
000076C0 0244 01E0                  		andi.w	#$1E0,d4
000076C4 0245 001E                  		andi.w	#$1E,d5
000076C8 D644                       		add.w	d4,d3
000076CA D645                       		add.w	d5,d3
000076CC 2043                       		movea.l	d3,a0
000076CE 3610                       		move.w	(a0),d3
000076D0 0243 03FF                  		andi.w	#$3FF,d3
000076D4 E74B                       		lsl.w	#3,d3
000076D6 D2C3                       		adda.w	d3,a1
000076D8                            
000076D8                            locret_6C1E:
000076D8 4E75                       		rts	
000076DA                            ; End of function sub_6BD6
000076DA                            
000076DA                            
000076DA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000076DA                            
000076DA                            
000076DA                            sub_6C20:				; XREF: LoadTilesAsYouMove; et al
000076DA D86B 0004                  		add.w	4(a3),d4
000076DE DA53                       		add.w	(a3),d5
000076E0 0244 00F0                  		andi.w	#$F0,d4
000076E4 0245 01F0                  		andi.w	#$1F0,d5
000076E8 E94C                       		lsl.w	#4,d4
000076EA E44D                       		lsr.w	#2,d5
000076EC D845                       		add.w	d5,d4
000076EE 7003                       		moveq	#3,d0
000076F0 4840                       		swap	d0
000076F2 3004                       		move.w	d4,d0
000076F4 4E75                       		rts	
000076F6                            ; End of function sub_6C20
000076F6                            
000076F6                            
000076F6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000076F6                            ; not used
000076F6                            
000076F6                            
000076F6                            sub_6C3C:
000076F6 D86B 0004                  		add.w	4(a3),d4
000076FA DA53                       		add.w	(a3),d5
000076FC 0244 00F0                  		andi.w	#$F0,d4
00007700 0245 01F0                  		andi.w	#$1F0,d5
00007704 E94C                       		lsl.w	#4,d4
00007706 E44D                       		lsr.w	#2,d5
00007708 D845                       		add.w	d5,d4
0000770A 7002                       		moveq	#2,d0
0000770C 4840                       		swap	d0
0000770E 3004                       		move.w	d4,d0
00007710 4E75                       		rts	
00007712                            ; End of function sub_6C3C
00007712                            
00007712                            ; ---------------------------------------------------------------------------
00007712                            ; Subroutine to	load tiles as soon as the level	appears
00007712                            ; ---------------------------------------------------------------------------
00007712                            
00007712                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007712                            
00007712                            
00007712                            LoadTilesFromStart:			; XREF: Level; EndingSequence
00007712 4BF9 00C0 0004             		lea	($C00004).l,a5
00007718 4DF9 00C0 0000             		lea	($C00000).l,a6
0000771E 47F8 F700                  		lea	($FFFFF700).w,a3
00007722 49F8 A400                  		lea	($FFFFA400).w,a4
00007726 343C 4000                  		move.w	#$4000,d2
0000772A 6100                       		bsr.s	LoadTilesFromStart2
0000772C 47F8 F708                  		lea	($FFFFF708).w,a3
00007730 49F8 A440                  		lea	($FFFFA440).w,a4
00007734 343C 6000                  		move.w	#$6000,d2
00007738                            ; End of function LoadTilesFromStart
00007738                            
00007738                            
00007738                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007738                            
00007738                            
00007738                            LoadTilesFromStart2:			; XREF: LoadTilesFromStart
00007738 78F0                       		moveq	#-$10,d4
0000773A 7C0F                       		moveq	#$F,d6
0000773C                            
0000773C                            loc_6C82:
0000773C 48E7 0E00                  		movem.l	d4-d6,-(sp)
00007740 7A00                       		moveq	#0,d5
00007742 3204                       		move.w	d4,d1
00007744 6100 FF94                  		bsr.w	sub_6C20
00007748 3801                       		move.w	d1,d4
0000774A 7A00                       		moveq	#0,d5
0000774C 7C1F                       		moveq	#$1F,d6
0000774E 6100 FE44                  		bsr.w	sub_6ADA
00007752 4CDF 0070                  		movem.l	(sp)+,d4-d6
00007756 0644 0010                  		addi.w	#$10,d4
0000775A 51CE FFE0                  		dbf	d6,loc_6C82
0000775E 4E75                       		rts	
00007760                            ; End of function LoadTilesFromStart2
00007760                            
00007760                            ; ---------------------------------------------------------------------------
00007760                            ; Main Load Block loading subroutine
00007760                            ; ---------------------------------------------------------------------------
00007760                            
00007760                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007760                            
00007760                            
00007760                            MainLoadBlockLoad:			; XREF: Level; EndingSequence
00007760 7000                       		moveq	#0,d0
00007762 1038 FE10                  		move.b	($FFFFFE10).w,d0
00007766 E948                       		lsl.w	#4,d0
00007768 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2
0000776E 45F2 0000                  		lea	(a2,d0.w),a2
00007772 2F0A                       		move.l	a2,-(sp)
00007774 588A                       		addq.l	#4,a2
00007776 205A                       		movea.l	(a2)+,a0
00007778 43F8 B000                  		lea	($FFFFB000).w,a1 ; RAM address for 16x16 mappings
0000777C 303C 0000                  		move.w	#0,d0
00007780 6100 A106                  		bsr.w	EniDec
00007784 205A                       		movea.l	(a2)+,a0
00007786 43F9 00FF 0000             		lea	($FF0000).l,a1	; RAM address for 256x256 mappings
0000778C 6100 A278                  		bsr.w	KosDec
00007790 6100 0000                  		bsr.w	LevelLayoutLoad
00007794 301A                       		move.w	(a2)+,d0
00007796 3012                       		move.w	(a2),d0
00007798 0240 00FF                  		andi.w	#$FF,d0
0000779C 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; is level SBZ3 (LZ4) ?
000077A2 6600                       		bne.s	MLB_ChkSBZPal	; if not, branch
000077A4 700C                       		moveq	#$C,d0		; use SB3 pallet
000077A6                            
000077A6                            MLB_ChkSBZPal:
000077A6 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w ; is level SBZ2?
000077AC 6700                       		beq.s	MLB_UsePal0E	; if yes, branch
000077AE 0C78 0502 FE10             		cmpi.w	#$502,($FFFFFE10).w ; is level FZ?
000077B4 6600                       		bne.s	MLB_NormalPal	; if not, branch
000077B6                            
000077B6                            MLB_UsePal0E:
000077B6 700E                       		moveq	#$E,d0		; use SBZ2/FZ pallet
000077B8                            
000077B8                            MLB_NormalPal:
000077B8 6100 AC74                  		bsr.w	PalLoad1	; load pallet (based on	d0)
000077BC 245F                       		movea.l	(sp)+,a2
000077BE 584A                       		addq.w	#4,a2
000077C0 7000                       		moveq	#0,d0
000077C2 1012                       		move.b	(a2),d0
000077C4 6700                       		beq.s	locret_6D10
000077C6 6100 9F22                  		bsr.w	LoadPLC		; load pattern load cues
000077CA                            
000077CA                            locret_6D10:
000077CA 4E75                       		rts	
000077CC                            ; End of function MainLoadBlockLoad
000077CC                            
000077CC                            ; ---------------------------------------------------------------------------
000077CC                            ; Level	layout loading subroutine
000077CC                            ; ---------------------------------------------------------------------------
000077CC                            
000077CC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000077CC                            
000077CC                            
000077CC                            LevelLayoutLoad:			; XREF: TitleScreen; MainLoadBlockLoad
000077CC 47F8 A400                  		lea	($FFFFA400).w,a3
000077D0 323C 01FF                  		move.w	#$1FF,d1
000077D4 7000                       		moveq	#0,d0
000077D6                            
000077D6                            LevLoad_ClrRam:
000077D6 26C0                       		move.l	d0,(a3)+
000077D8 51C9 FFFC                  		dbf	d1,LevLoad_ClrRam ; clear the RAM ($FFFFA400-A7FF)
000077DC                            
000077DC 47F8 A400                  		lea	($FFFFA400).w,a3 ; RAM address for level layout
000077E0 7200                       		moveq	#0,d1
000077E2 6100 0000                  		bsr.w	LevelLayoutLoad2 ; load	level layout into RAM
000077E6 47F8 A440                  		lea	($FFFFA440).w,a3 ; RAM address for background layout
000077EA 7202                       		moveq	#2,d1
000077EC                            ; End of function LevelLayoutLoad
000077EC                            
000077EC                            ; "LevelLayoutLoad2" is	run twice - for	the level and the background
000077EC                            
000077EC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000077EC                            
000077EC                            
000077EC                            LevelLayoutLoad2:			; XREF: LevelLayoutLoad
000077EC 3038 FE10                  		move.w	($FFFFFE10).w,d0
000077F0 ED08                       		lsl.b	#6,d0
000077F2 EA48                       		lsr.w	#5,d0
000077F4 3400                       		move.w	d0,d2
000077F6 D040                       		add.w	d0,d0
000077F8 D042                       		add.w	d2,d0
000077FA D041                       		add.w	d1,d0
000077FC 43F9 0000 0000             		lea	(Level_Index).l,a1
00007802 3031 0000                  		move.w	(a1,d0.w),d0
00007806 43F1 0000                  		lea	(a1,d0.w),a1
0000780A 7200                       		moveq	#0,d1
0000780C 3401                       		move.w	d1,d2
0000780E 1219                       		move.b	(a1)+,d1	; load level width (in tiles)
00007810 1419                       		move.b	(a1)+,d2	; load level height (in	tiles)
00007812                            
00007812                            LevLoad_NumRows:
00007812 3001                       		move.w	d1,d0
00007814 204B                       		movea.l	a3,a0
00007816                            
00007816                            LevLoad_Row:
00007816 10D9                       		move.b	(a1)+,(a0)+
00007818 51C8 FFFC                  		dbf	d0,LevLoad_Row	; load 1 row
0000781C 47EB 0080                  		lea	$80(a3),a3	; do next row
00007820 51CA FFF0                  		dbf	d2,LevLoad_NumRows ; repeat for	number of rows
00007824 4E75                       		rts	
00007826                            ; End of function LevelLayoutLoad2
00007826                            
00007826                            ; ---------------------------------------------------------------------------
00007826                            ; Dynamic screen resize	loading	subroutine
00007826                            ; ---------------------------------------------------------------------------
00007826                            
00007826                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007826                            
00007826                            
00007826                            DynScrResizeLoad:			; XREF: DeformBgLayer
00007826 7000                       		moveq	#0,d0
00007828 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000782C D040                       		add.w	d0,d0
0000782E 303B 0000                  		move.w	Resize_Index(pc,d0.w),d0
00007832 4EBB 0000                  		jsr	Resize_Index(pc,d0.w)
00007836 7202                       		moveq	#2,d1
00007838 3038 F726                  		move.w	($FFFFF726).w,d0
0000783C 9078 F72E                  		sub.w	($FFFFF72E).w,d0
00007840 6700                       		beq.s	locret_6DAA
00007842 6400                       		bcc.s	loc_6DAC
00007844 4441                       		neg.w	d1
00007846 3038 F704                  		move.w	($FFFFF704).w,d0
0000784A B078 F726                  		cmp.w	($FFFFF726).w,d0
0000784E 6300                       		bls.s	loc_6DA0
00007850 31C0 F72E                  		move.w	d0,($FFFFF72E).w
00007854 0278 FFFE F72E             		andi.w	#-2,($FFFFF72E).w
0000785A                            
0000785A                            loc_6DA0:
0000785A D378 F72E                  		add.w	d1,($FFFFF72E).w
0000785E 11FC 0001 F75C             		move.b	#1,($FFFFF75C).w
00007864                            
00007864                            locret_6DAA:
00007864 4E75                       		rts	
00007866                            ; ===========================================================================
00007866                            
00007866                            loc_6DAC:				; XREF: DynScrResizeLoad
00007866 3038 F704                  		move.w	($FFFFF704).w,d0
0000786A 5040                       		addq.w	#8,d0
0000786C B078 F72E                  		cmp.w	($FFFFF72E).w,d0
00007870 6500                       		bcs.s	loc_6DC4
00007872 0838 0001 D022             		btst	#1,($FFFFD022).w
00007878 6700                       		beq.s	loc_6DC4
0000787A D241                       		add.w	d1,d1
0000787C D241                       		add.w	d1,d1
0000787E                            
0000787E                            loc_6DC4:
0000787E D378 F72E                  		add.w	d1,($FFFFF72E).w
00007882 11FC 0001 F75C             		move.b	#1,($FFFFF75C).w
00007888 4E75                       		rts	
0000788A                            ; End of function DynScrResizeLoad
0000788A                            
0000788A                            ; ===========================================================================
0000788A                            ; ---------------------------------------------------------------------------
0000788A                            ; Offset index for dynamic screen resizing
0000788A                            ; ---------------------------------------------------------------------------
0000788A 0000 0000                  Resize_Index:	dc.w Resize_GHZ-Resize_Index, Resize_LZ-Resize_Index
0000788E 0000 0000                  		dc.w Resize_MZ-Resize_Index, Resize_SLZ-Resize_Index
00007892 0000 0000                  		dc.w Resize_SYZ-Resize_Index, Resize_SBZ-Resize_Index
00007896 0000                       		dc.w Resize_Ending-Resize_Index
00007898                            ; ===========================================================================
00007898                            ; ---------------------------------------------------------------------------
00007898                            ; Green	Hill Zone dynamic screen resizing
00007898                            ; ---------------------------------------------------------------------------
00007898                            
00007898                            Resize_GHZ:				; XREF: Resize_Index
00007898 7000                       		moveq	#0,d0
0000789A 1038 FE11                  		move.b	($FFFFFE11).w,d0
0000789E D040                       		add.w	d0,d0
000078A0 303B 0000                  		move.w	Resize_GHZx(pc,d0.w),d0
000078A4 4EFB 0000                  		jmp	Resize_GHZx(pc,d0.w)
000078A8                            ; ===========================================================================
000078A8 0000                       Resize_GHZx:	dc.w Resize_GHZ1-Resize_GHZx
000078AA 0000                       		dc.w Resize_GHZ2-Resize_GHZx
000078AC 0000                       		dc.w Resize_GHZ3-Resize_GHZx
000078AE                            ; ===========================================================================
000078AE                            
000078AE                            Resize_GHZ1:
000078AE 31FC 0300 F726             		move.w	#$300,($FFFFF726).w ; set lower	y-boundary
000078B4 0C78 1780 F700             		cmpi.w	#$1780,($FFFFF700).w ; has the camera reached $1780 on x-axis?
000078BA 6500                       		bcs.s	locret_6E08	; if not, branch
000078BC 31FC 0400 F726             		move.w	#$400,($FFFFF726).w ; set lower	y-boundary
000078C2                            
000078C2                            locret_6E08:
000078C2 4E75                       		rts	
000078C4                            ; ===========================================================================
000078C4                            
000078C4                            Resize_GHZ2:
000078C4 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
000078CA 0C78 0ED0 F700             		cmpi.w	#$ED0,($FFFFF700).w
000078D0 6500                       		bcs.s	locret_6E3A
000078D2 31FC 0200 F726             		move.w	#$200,($FFFFF726).w
000078D8 0C78 1600 F700             		cmpi.w	#$1600,($FFFFF700).w
000078DE 6500                       		bcs.s	locret_6E3A
000078E0 31FC 0400 F726             		move.w	#$400,($FFFFF726).w
000078E6 0C78 1D60 F700             		cmpi.w	#$1D60,($FFFFF700).w
000078EC 6500                       		bcs.s	locret_6E3A
000078EE 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
000078F4                            
000078F4                            locret_6E3A:
000078F4 4E75                       		rts	
000078F6                            ; ===========================================================================
000078F6                            
000078F6                            Resize_GHZ3:
000078F6 7000                       		moveq	#0,d0
000078F8 1038 F742                  		move.b	($FFFFF742).w,d0
000078FC 303B 0000                  		move.w	off_6E4A(pc,d0.w),d0
00007900 4EFB 0000                  		jmp	off_6E4A(pc,d0.w)
00007904                            ; ===========================================================================
00007904 0000                       off_6E4A:	dc.w Resize_GHZ3main-off_6E4A
00007906 0000                       		dc.w Resize_GHZ3boss-off_6E4A
00007908 0000                       		dc.w Resize_GHZ3end-off_6E4A
0000790A                            ; ===========================================================================
0000790A                            
0000790A                            Resize_GHZ3main:
0000790A 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
00007910 0C78 0380 F700             		cmpi.w	#$380,($FFFFF700).w
00007916 6500                       		bcs.s	locret_6E96
00007918 31FC 0310 F726             		move.w	#$310,($FFFFF726).w
0000791E 0C78 0960 F700             		cmpi.w	#$960,($FFFFF700).w
00007924 6500                       		bcs.s	locret_6E96
00007926 0C78 0280 F704             		cmpi.w	#$280,($FFFFF704).w
0000792C 6500                       		bcs.s	loc_6E98
0000792E 31FC 0400 F726             		move.w	#$400,($FFFFF726).w
00007934 0C78 1380 F700             		cmpi.w	#$1380,($FFFFF700).w
0000793A 6400                       		bcc.s	loc_6E8E
0000793C 31FC 04C0 F726             		move.w	#$4C0,($FFFFF726).w
00007942 31FC 04C0 F72E             		move.w	#$4C0,($FFFFF72E).w
00007948                            
00007948                            loc_6E8E:
00007948 0C78 1700 F700             		cmpi.w	#$1700,($FFFFF700).w
0000794E 6400                       		bcc.s	loc_6E98
00007950                            
00007950                            locret_6E96:
00007950 4E75                       		rts	
00007952                            ; ===========================================================================
00007952                            
00007952                            loc_6E98:
00007952 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
00007958 5438 F742                  		addq.b	#2,($FFFFF742).w
0000795C 4E75                       		rts	
0000795E                            ; ===========================================================================
0000795E                            
0000795E                            Resize_GHZ3boss:
0000795E 0C78 0960 F700             		cmpi.w	#$960,($FFFFF700).w
00007964 6400                       		bcc.s	loc_6EB0
00007966 5538 F742                  		subq.b	#2,($FFFFF742).w
0000796A                            
0000796A                            loc_6EB0:
0000796A 0C78 2960 F700             		cmpi.w	#$2960,($FFFFF700).w
00007970 6500                       		bcs.s	locret_6EE8
00007972 6100 0000                  		bsr.w	SingleObjLoad
00007976 6600                       		bne.s	loc_6ED0
00007978 12BC 003D                  		move.b	#$3D,0(a1)	; load GHZ boss	object
0000797C 337C 2A60 0008             		move.w	#$2A60,8(a1)
00007982 337C 0280 000C             		move.w	#$280,$C(a1)
00007988                            
00007988                            loc_6ED0:
00007988 303C 008C                  		move.w	#$8C,d0
0000798C 6100 9AE2                  		bsr.w	PlaySound	; play boss music
00007990 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007996 5438 F742                  		addq.b	#2,($FFFFF742).w
0000799A 7011                       		moveq	#$11,d0
0000799C 6000 9D4C                  		bra.w	LoadPLC		; load boss patterns
000079A0                            ; ===========================================================================
000079A0                            
000079A0                            locret_6EE8:
000079A0 4E75                       		rts	
000079A2                            ; ===========================================================================
000079A2                            
000079A2                            Resize_GHZ3end:
000079A2 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
000079A8 4E75                       		rts	
000079AA                            ; ===========================================================================
000079AA                            ; ---------------------------------------------------------------------------
000079AA                            ; Labyrinth Zone dynamic screen	resizing
000079AA                            ; ---------------------------------------------------------------------------
000079AA                            
000079AA                            Resize_LZ:				; XREF: Resize_Index
000079AA 7000                       		moveq	#0,d0
000079AC 1038 FE11                  		move.b	($FFFFFE11).w,d0
000079B0 D040                       		add.w	d0,d0
000079B2 303B 0000                  		move.w	Resize_LZx(pc,d0.w),d0
000079B6 4EFB 0000                  		jmp	Resize_LZx(pc,d0.w)
000079BA                            ; ===========================================================================
000079BA 0000                       Resize_LZx:	dc.w Resize_LZ12-Resize_LZx
000079BC 0000                       		dc.w Resize_LZ12-Resize_LZx
000079BE 0000                       		dc.w Resize_LZ3-Resize_LZx
000079C0 0000                       		dc.w Resize_SBZ3-Resize_LZx
000079C2                            ; ===========================================================================
000079C2                            
000079C2                            Resize_LZ12:
000079C2 4E75                       		rts	
000079C4                            ; ===========================================================================
000079C4                            
000079C4                            Resize_LZ3:
000079C4 4A38 F7EF                  		tst.b	($FFFFF7EF).w	; has switch $F	been pressed?
000079C8 6700                       		beq.s	loc_6F28	; if not, branch
000079CA 43F8 A506                  		lea	($FFFFA506).w,a1
000079CE 0C11 0007                  		cmpi.b	#7,(a1)
000079D2 6700                       		beq.s	loc_6F28
000079D4 12BC 0007                  		move.b	#7,(a1)		; modify level layout
000079D8 303C 00B7                  		move.w	#$B7,d0
000079DC 6100 9A98                  		bsr.w	PlaySound_Special ; play rumbling sound
000079E0                            
000079E0                            loc_6F28:
000079E0 4A38 F742                  		tst.b	($FFFFF742).w
000079E4 6600                       		bne.s	locret_6F64
000079E6 0C78 1CA0 F700             		cmpi.w	#$1CA0,($FFFFF700).w
000079EC 6500                       		bcs.s	locret_6F62
000079EE 0C78 0600 F704             		cmpi.w	#$600,($FFFFF704).w
000079F4 6400                       		bcc.s	locret_6F62
000079F6 6100 0000                  		bsr.w	SingleObjLoad
000079FA 6600                       		bne.s	loc_6F4A
000079FC 12BC 0077                  		move.b	#$77,0(a1)	; load LZ boss object
00007A00                            
00007A00                            loc_6F4A:
00007A00 303C 008C                  		move.w	#$8C,d0
00007A04 6100 9A6A                  		bsr.w	PlaySound	; play boss music
00007A08 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007A0E 5438 F742                  		addq.b	#2,($FFFFF742).w
00007A12 7011                       		moveq	#$11,d0
00007A14 6000 9CD4                  		bra.w	LoadPLC		; load boss patterns
00007A18                            ; ===========================================================================
00007A18                            
00007A18                            locret_6F62:
00007A18 4E75                       		rts	
00007A1A                            ; ===========================================================================
00007A1A                            
00007A1A                            locret_6F64:
00007A1A 4E75                       		rts	
00007A1C                            ; ===========================================================================
00007A1C                            
00007A1C                            Resize_SBZ3:
00007A1C 0C78 0D00 F700             		cmpi.w	#$D00,($FFFFF700).w
00007A22 6500                       		bcs.s	locret_6F8C
00007A24 0C78 0018 D00C             		cmpi.w	#$18,($FFFFD00C).w ; has Sonic reached the top of the level?
00007A2A 6400                       		bcc.s	locret_6F8C	; if not, branch
00007A2C 4238 FE30                  		clr.b	($FFFFFE30).w
00007A30 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
00007A36 31FC 0502 FE10             		move.w	#$502,($FFFFFE10).w ; set level	number to 0502 (FZ)
00007A3C 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; freeze Sonic
00007A42                            
00007A42                            locret_6F8C:
00007A42 4E75                       		rts	
00007A44                            ; ===========================================================================
00007A44                            ; ---------------------------------------------------------------------------
00007A44                            ; Marble Zone dynamic screen resizing
00007A44                            ; ---------------------------------------------------------------------------
00007A44                            
00007A44                            Resize_MZ:				; XREF: Resize_Index
00007A44 7000                       		moveq	#0,d0
00007A46 1038 FE11                  		move.b	($FFFFFE11).w,d0
00007A4A D040                       		add.w	d0,d0
00007A4C 303B 0000                  		move.w	Resize_MZx(pc,d0.w),d0
00007A50 4EFB 0000                  		jmp	Resize_MZx(pc,d0.w)
00007A54                            ; ===========================================================================
00007A54 0000                       Resize_MZx:	dc.w Resize_MZ1-Resize_MZx
00007A56 0000                       		dc.w Resize_MZ2-Resize_MZx
00007A58 0000                       		dc.w Resize_MZ3-Resize_MZx
00007A5A                            ; ===========================================================================
00007A5A                            
00007A5A                            Resize_MZ1:
00007A5A 7000                       		moveq	#0,d0
00007A5C 1038 F742                  		move.b	($FFFFF742).w,d0
00007A60 303B 0000                  		move.w	off_6FB2(pc,d0.w),d0
00007A64 4EFB 0000                  		jmp	off_6FB2(pc,d0.w)
00007A68                            ; ===========================================================================
00007A68 0000                       off_6FB2:	dc.w loc_6FBA-off_6FB2
00007A6A 0000                       		dc.w loc_6FEA-off_6FB2
00007A6C 0000                       		dc.w loc_702E-off_6FB2
00007A6E 0000                       		dc.w loc_7050-off_6FB2
00007A70                            ; ===========================================================================
00007A70                            
00007A70                            loc_6FBA:
00007A70 31FC 01D0 F726             		move.w	#$1D0,($FFFFF726).w
00007A76 0C78 0700 F700             		cmpi.w	#$700,($FFFFF700).w
00007A7C 6500                       		bcs.s	locret_6FE8
00007A7E 31FC 0220 F726             		move.w	#$220,($FFFFF726).w
00007A84 0C78 0D00 F700             		cmpi.w	#$D00,($FFFFF700).w
00007A8A 6500                       		bcs.s	locret_6FE8
00007A8C 31FC 0340 F726             		move.w	#$340,($FFFFF726).w
00007A92 0C78 0340 F704             		cmpi.w	#$340,($FFFFF704).w
00007A98 6500                       		bcs.s	locret_6FE8
00007A9A 5438 F742                  		addq.b	#2,($FFFFF742).w
00007A9E                            
00007A9E                            locret_6FE8:
00007A9E 4E75                       		rts	
00007AA0                            ; ===========================================================================
00007AA0                            
00007AA0                            loc_6FEA:
00007AA0 0C78 0340 F704             		cmpi.w	#$340,($FFFFF704).w
00007AA6 6400                       		bcc.s	loc_6FF8
00007AA8 5538 F742                  		subq.b	#2,($FFFFF742).w
00007AAC 4E75                       		rts	
00007AAE                            ; ===========================================================================
00007AAE                            
00007AAE                            loc_6FF8:
00007AAE 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
00007AB4 0C78 0E00 F700             		cmpi.w	#$E00,($FFFFF700).w
00007ABA 6400                       		bcc.s	locret_702C
00007ABC 31FC 0340 F72C             		move.w	#$340,($FFFFF72C).w
00007AC2 31FC 0340 F726             		move.w	#$340,($FFFFF726).w
00007AC8 0C78 0A90 F700             		cmpi.w	#$A90,($FFFFF700).w
00007ACE 6400                       		bcc.s	locret_702C
00007AD0 31FC 0500 F726             		move.w	#$500,($FFFFF726).w
00007AD6 0C78 0370 F704             		cmpi.w	#$370,($FFFFF704).w
00007ADC 6500                       		bcs.s	locret_702C
00007ADE 5438 F742                  		addq.b	#2,($FFFFF742).w
00007AE2                            
00007AE2                            locret_702C:
00007AE2 4E75                       		rts	
00007AE4                            ; ===========================================================================
00007AE4                            
00007AE4                            loc_702E:
00007AE4 0C78 0370 F704             		cmpi.w	#$370,($FFFFF704).w
00007AEA 6400                       		bcc.s	loc_703C
00007AEC 5538 F742                  		subq.b	#2,($FFFFF742).w
00007AF0 4E75                       		rts	
00007AF2                            ; ===========================================================================
00007AF2                            
00007AF2                            loc_703C:
00007AF2 0C78 0500 F704             		cmpi.w	#$500,($FFFFF704).w
00007AF8 6500                       		bcs.s	locret_704E
00007AFA 31FC 0500 F72C             		move.w	#$500,($FFFFF72C).w
00007B00 5438 F742                  		addq.b	#2,($FFFFF742).w
00007B04                            
00007B04                            locret_704E:
00007B04 4E75                       		rts	
00007B06                            ; ===========================================================================
00007B06                            
00007B06                            loc_7050:
00007B06 0C78 0E70 F700             		cmpi.w	#$E70,($FFFFF700).w
00007B0C 6500                       		bcs.s	locret_7072
00007B0E 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
00007B14 31FC 0500 F726             		move.w	#$500,($FFFFF726).w
00007B1A 0C78 1430 F700             		cmpi.w	#$1430,($FFFFF700).w
00007B20 6500                       		bcs.s	locret_7072
00007B22 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
00007B28                            
00007B28                            locret_7072:
00007B28 4E75                       		rts	
00007B2A                            ; ===========================================================================
00007B2A                            
00007B2A                            Resize_MZ2:
00007B2A 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
00007B30 0C78 1700 F700             		cmpi.w	#$1700,($FFFFF700).w
00007B36 6500                       		bcs.s	locret_7088
00007B38 31FC 0200 F726             		move.w	#$200,($FFFFF726).w
00007B3E                            
00007B3E                            locret_7088:
00007B3E 4E75                       		rts	
00007B40                            ; ===========================================================================
00007B40                            
00007B40                            Resize_MZ3:
00007B40 7000                       		moveq	#0,d0
00007B42 1038 F742                  		move.b	($FFFFF742).w,d0
00007B46 303B 0000                  		move.w	off_7098(pc,d0.w),d0
00007B4A 4EFB 0000                  		jmp	off_7098(pc,d0.w)
00007B4E                            ; ===========================================================================
00007B4E 0000                       off_7098:	dc.w Resize_MZ3boss-off_7098
00007B50 0000                       		dc.w Resize_MZ3end-off_7098
00007B52                            ; ===========================================================================
00007B52                            
00007B52                            Resize_MZ3boss:
00007B52 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
00007B58 0C78 1560 F700             		cmpi.w	#$1560,($FFFFF700).w
00007B5E 6500                       		bcs.s	locret_70E8
00007B60 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
00007B66 0C78 17F0 F700             		cmpi.w	#$17F0,($FFFFF700).w
00007B6C 6500                       		bcs.s	locret_70E8
00007B6E 6100 0000                  		bsr.w	SingleObjLoad
00007B72 6600                       		bne.s	loc_70D0
00007B74 12BC 0073                  		move.b	#$73,0(a1)	; load MZ boss object
00007B78 337C 19F0 0008             		move.w	#$19F0,8(a1)
00007B7E 337C 022C 000C             		move.w	#$22C,$C(a1)
00007B84                            
00007B84                            loc_70D0:
00007B84 303C 008C                  		move.w	#$8C,d0
00007B88 6100 98E6                  		bsr.w	PlaySound	; play boss music
00007B8C 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007B92 5438 F742                  		addq.b	#2,($FFFFF742).w
00007B96 7011                       		moveq	#$11,d0
00007B98 6000 9B50                  		bra.w	LoadPLC		; load boss patterns
00007B9C                            ; ===========================================================================
00007B9C                            
00007B9C                            locret_70E8:
00007B9C 4E75                       		rts	
00007B9E                            ; ===========================================================================
00007B9E                            
00007B9E                            Resize_MZ3end:
00007B9E 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
00007BA4 4E75                       		rts	
00007BA6                            ; ===========================================================================
00007BA6                            ; ---------------------------------------------------------------------------
00007BA6                            ; Star Light Zone dynamic screen resizing
00007BA6                            ; ---------------------------------------------------------------------------
00007BA6                            
00007BA6                            Resize_SLZ:				; XREF: Resize_Index
00007BA6 7000                       		moveq	#0,d0
00007BA8 1038 FE11                  		move.b	($FFFFFE11).w,d0
00007BAC D040                       		add.w	d0,d0
00007BAE 303B 0000                  		move.w	Resize_SLZx(pc,d0.w),d0
00007BB2 4EFB 0000                  		jmp	Resize_SLZx(pc,d0.w)
00007BB6                            ; ===========================================================================
00007BB6 0000                       Resize_SLZx:	dc.w Resize_SLZ12-Resize_SLZx
00007BB8 0000                       		dc.w Resize_SLZ12-Resize_SLZx
00007BBA 0000                       		dc.w Resize_SLZ3-Resize_SLZx
00007BBC                            ; ===========================================================================
00007BBC                            
00007BBC                            Resize_SLZ12:
00007BBC 4E75                       		rts	
00007BBE                            ; ===========================================================================
00007BBE                            
00007BBE                            Resize_SLZ3:
00007BBE 7000                       		moveq	#0,d0
00007BC0 1038 F742                  		move.b	($FFFFF742).w,d0
00007BC4 303B 0000                  		move.w	off_7118(pc,d0.w),d0
00007BC8 4EFB 0000                  		jmp	off_7118(pc,d0.w)
00007BCC                            ; ===========================================================================
00007BCC 0000                       off_7118:	dc.w Resize_SLZ3main-off_7118
00007BCE 0000                       		dc.w Resize_SLZ3boss-off_7118
00007BD0 0000                       		dc.w Resize_SLZ3end-off_7118
00007BD2                            ; ===========================================================================
00007BD2                            
00007BD2                            Resize_SLZ3main:
00007BD2 0C78 1E70 F700             		cmpi.w	#$1E70,($FFFFF700).w
00007BD8 6500                       		bcs.s	locret_7130
00007BDA 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
00007BE0 5438 F742                  		addq.b	#2,($FFFFF742).w
00007BE4                            
00007BE4                            locret_7130:
00007BE4 4E75                       		rts	
00007BE6                            ; ===========================================================================
00007BE6                            
00007BE6                            Resize_SLZ3boss:
00007BE6 0C78 2000 F700             		cmpi.w	#$2000,($FFFFF700).w
00007BEC 6500                       		bcs.s	locret_715C
00007BEE 6100 0000                  		bsr.w	SingleObjLoad
00007BF2 6600                       		bne.s	loc_7144
00007BF4 12BC 007A                  		move.b	#$7A,(a1)	; load SLZ boss	object
00007BF8                            
00007BF8                            loc_7144:
00007BF8 303C 008C                  		move.w	#$8C,d0
00007BFC 6100 9872                  		bsr.w	PlaySound	; play boss music
00007C00 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007C06 5438 F742                  		addq.b	#2,($FFFFF742).w
00007C0A 7011                       		moveq	#$11,d0
00007C0C 6000 9ADC                  		bra.w	LoadPLC		; load boss patterns
00007C10                            ; ===========================================================================
00007C10                            
00007C10                            locret_715C:
00007C10 4E75                       		rts	
00007C12                            ; ===========================================================================
00007C12                            
00007C12                            Resize_SLZ3end:
00007C12 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
00007C18 4E75                       		rts
00007C1A 4E75                       		rts
00007C1C                            ; ===========================================================================
00007C1C                            ; ---------------------------------------------------------------------------
00007C1C                            ; Spring Yard Zone dynamic screen resizing
00007C1C                            ; ---------------------------------------------------------------------------
00007C1C                            
00007C1C                            Resize_SYZ:				; XREF: Resize_Index
00007C1C 7000                       		moveq	#0,d0
00007C1E 1038 FE11                  		move.b	($FFFFFE11).w,d0
00007C22 D040                       		add.w	d0,d0
00007C24 303B 0000                  		move.w	Resize_SYZx(pc,d0.w),d0
00007C28 4EFB 0000                  		jmp	Resize_SYZx(pc,d0.w)
00007C2C                            ; ===========================================================================
00007C2C 0000                       Resize_SYZx:	dc.w Resize_SYZ1-Resize_SYZx
00007C2E 0000                       		dc.w Resize_SYZ2-Resize_SYZx
00007C30 0000                       		dc.w Resize_SYZ3-Resize_SYZx
00007C32                            ; ===========================================================================
00007C32                            
00007C32                            Resize_SYZ1:
00007C32 4E75                       		rts	
00007C34                            ; ===========================================================================
00007C34                            
00007C34                            Resize_SYZ2:
00007C34 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
00007C3A 0C78 25A0 F700             		cmpi.w	#$25A0,($FFFFF700).w
00007C40 6500                       		bcs.s	locret_71A2
00007C42 31FC 0420 F726             		move.w	#$420,($FFFFF726).w
00007C48 0C78 04D0 D00C             		cmpi.w	#$4D0,($FFFFD00C).w
00007C4E 6500                       		bcs.s	locret_71A2
00007C50 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
00007C56                            
00007C56                            locret_71A2:
00007C56 4E75                       		rts	
00007C58                            ; ===========================================================================
00007C58                            
00007C58                            Resize_SYZ3:
00007C58 7000                       		moveq	#0,d0
00007C5A 1038 F742                  		move.b	($FFFFF742).w,d0
00007C5E 303B 0000                  		move.w	off_71B2(pc,d0.w),d0
00007C62 4EFB 0000                  		jmp	off_71B2(pc,d0.w)
00007C66                            ; ===========================================================================
00007C66 0000                       off_71B2:	dc.w Resize_SYZ3main-off_71B2
00007C68 0000                       		dc.w Resize_SYZ3boss-off_71B2
00007C6A 0000                       		dc.w Resize_SYZ3end-off_71B2
00007C6C                            ; ===========================================================================
00007C6C                            
00007C6C                            Resize_SYZ3main:
00007C6C 0C78 2AC0 F700             		cmpi.w	#$2AC0,($FFFFF700).w
00007C72 6500                       		bcs.s	locret_71CE
00007C74 6100 0000                  		bsr.w	SingleObjLoad
00007C78 6600                       		bne.s	locret_71CE
00007C7A 12BC 0076                  		move.b	#$76,(a1)	; load blocks that boss	picks up
00007C7E 5438 F742                  		addq.b	#2,($FFFFF742).w
00007C82                            
00007C82                            locret_71CE:
00007C82 4E75                       		rts	
00007C84                            ; ===========================================================================
00007C84                            
00007C84                            Resize_SYZ3boss:
00007C84 0C78 2C00 F700             		cmpi.w	#$2C00,($FFFFF700).w
00007C8A 6500                       		bcs.s	locret_7200
00007C8C 31FC 04CC F726             		move.w	#$4CC,($FFFFF726).w
00007C92 6100 0000                  		bsr.w	SingleObjLoad
00007C96 6600                       		bne.s	loc_71EC
00007C98 12BC 0075                  		move.b	#$75,(a1)	; load SYZ boss	object
00007C9C 5438 F742                  		addq.b	#2,($FFFFF742).w
00007CA0                            
00007CA0                            loc_71EC:
00007CA0 303C 008C                  		move.w	#$8C,d0
00007CA4 6100 97CA                  		bsr.w	PlaySound	; play boss music
00007CA8 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007CAE 7011                       		moveq	#$11,d0
00007CB0 6000 9A38                  		bra.w	LoadPLC		; load boss patterns
00007CB4                            ; ===========================================================================
00007CB4                            
00007CB4                            locret_7200:
00007CB4 4E75                       		rts	
00007CB6                            ; ===========================================================================
00007CB6                            
00007CB6                            Resize_SYZ3end:
00007CB6 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
00007CBC 4E75                       		rts	
00007CBE                            ; ===========================================================================
00007CBE                            ; ---------------------------------------------------------------------------
00007CBE                            ; Scrap	Brain Zone dynamic screen resizing
00007CBE                            ; ---------------------------------------------------------------------------
00007CBE                            
00007CBE                            Resize_SBZ:				; XREF: Resize_Index
00007CBE 7000                       		moveq	#0,d0
00007CC0 1038 FE11                  		move.b	($FFFFFE11).w,d0
00007CC4 D040                       		add.w	d0,d0
00007CC6 303B 0000                  		move.w	Resize_SBZx(pc,d0.w),d0
00007CCA 4EFB 0000                  		jmp	Resize_SBZx(pc,d0.w)
00007CCE                            ; ===========================================================================
00007CCE 0000                       Resize_SBZx:	dc.w Resize_SBZ1-Resize_SBZx
00007CD0 0000                       		dc.w Resize_SBZ2-Resize_SBZx
00007CD2 0000                       		dc.w Resize_FZ-Resize_SBZx
00007CD4                            ; ===========================================================================
00007CD4                            
00007CD4                            Resize_SBZ1:
00007CD4 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
00007CDA 0C78 1880 F700             		cmpi.w	#$1880,($FFFFF700).w
00007CE0 6500                       		bcs.s	locret_7242
00007CE2 31FC 0620 F726             		move.w	#$620,($FFFFF726).w
00007CE8 0C78 2000 F700             		cmpi.w	#$2000,($FFFFF700).w
00007CEE 6500                       		bcs.s	locret_7242
00007CF0 31FC 02A0 F726             		move.w	#$2A0,($FFFFF726).w
00007CF6                            
00007CF6                            locret_7242:
00007CF6 4E75                       		rts	
00007CF8                            ; ===========================================================================
00007CF8                            
00007CF8                            Resize_SBZ2:
00007CF8 7000                       		moveq	#0,d0
00007CFA 1038 F742                  		move.b	($FFFFF742).w,d0
00007CFE 303B 0000                  		move.w	off_7252(pc,d0.w),d0
00007D02 4EFB 0000                  		jmp	off_7252(pc,d0.w)
00007D06                            ; ===========================================================================
00007D06 0000                       off_7252:	dc.w Resize_SBZ2main-off_7252
00007D08 0000                       		dc.w Resize_SBZ2boss-off_7252
00007D0A 0000                       		dc.w Resize_SBZ2boss2-off_7252
00007D0C 0000                       		dc.w Resize_SBZ2end-off_7252
00007D0E                            ; ===========================================================================
00007D0E                            
00007D0E                            Resize_SBZ2main:
00007D0E 31FC 0800 F726             		move.w	#$800,($FFFFF726).w
00007D14 0C78 1800 F700             		cmpi.w	#$1800,($FFFFF700).w
00007D1A 6500                       		bcs.s	locret_727A
00007D1C 31FC 0510 F726             		move.w	#$510,($FFFFF726).w
00007D22 0C78 1E00 F700             		cmpi.w	#$1E00,($FFFFF700).w
00007D28 6500                       		bcs.s	locret_727A
00007D2A 5438 F742                  		addq.b	#2,($FFFFF742).w
00007D2E                            
00007D2E                            locret_727A:
00007D2E 4E75                       		rts	
00007D30                            ; ===========================================================================
00007D30                            
00007D30                            Resize_SBZ2boss:
00007D30 0C78 1EB0 F700             		cmpi.w	#$1EB0,($FFFFF700).w
00007D36 6500                       		bcs.s	locret_7298
00007D38 6100 0000                  		bsr.w	SingleObjLoad
00007D3C 6600                       		bne.s	locret_7298
00007D3E 12BC 0083                  		move.b	#$83,(a1)	; load collapsing block	object
00007D42 5438 F742                  		addq.b	#2,($FFFFF742).w
00007D46 701E                       		moveq	#$1E,d0
00007D48 6000 99A0                  		bra.w	LoadPLC		; load SBZ2 Eggman patterns
00007D4C                            ; ===========================================================================
00007D4C                            
00007D4C                            locret_7298:
00007D4C 4E75                       		rts	
00007D4E                            ; ===========================================================================
00007D4E                            
00007D4E                            Resize_SBZ2boss2:
00007D4E 0C78 1F60 F700             		cmpi.w	#$1F60,($FFFFF700).w
00007D54 6500                       		bcs.s	loc_72B6
00007D56 6100 0000                  		bsr.w	SingleObjLoad
00007D5A 6600                       		bne.s	loc_72B0
00007D5C 12BC 0082                  		move.b	#$82,(a1)	; load SBZ2 Eggman object
00007D60 5438 F742                  		addq.b	#2,($FFFFF742).w
00007D64                            
00007D64                            loc_72B0:
00007D64 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007D6A                            
00007D6A                            loc_72B6:
00007D6A 6000                       		bra.s	loc_72C2
00007D6C                            ; ===========================================================================
00007D6C                            
00007D6C                            Resize_SBZ2end:
00007D6C 0C78 2050 F700             		cmpi.w	#$2050,($FFFFF700).w
00007D72 6500                       		bcs.s	loc_72C2
00007D74 4E75                       		rts	
00007D76                            ; ===========================================================================
00007D76                            
00007D76                            loc_72C2:
00007D76 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
00007D7C 4E75                       		rts	
00007D7E                            ; ===========================================================================
00007D7E                            
00007D7E                            Resize_FZ:
00007D7E 7000                       		moveq	#0,d0
00007D80 1038 F742                  		move.b	($FFFFF742).w,d0
00007D84 303B 0000                  		move.w	off_72D8(pc,d0.w),d0
00007D88 4EFB 0000                  		jmp	off_72D8(pc,d0.w)
00007D8C                            ; ===========================================================================
00007D8C 0000 0000                  off_72D8:	dc.w Resize_FZmain-off_72D8, Resize_FZboss-off_72D8
00007D90 0000 0000                  		dc.w Resize_FZend-off_72D8, locret_7322-off_72D8
00007D94 0000                       		dc.w Resize_FZend2-off_72D8
00007D96                            ; ===========================================================================
00007D96                            
00007D96                            Resize_FZmain:
00007D96 0C78 2148 F700             		cmpi.w	#$2148,($FFFFF700).w
00007D9C 6500                       		bcs.s	loc_72F4
00007D9E 5438 F742                  		addq.b	#2,($FFFFF742).w
00007DA2 701F                       		moveq	#$1F,d0
00007DA4 6100 9944                  		bsr.w	LoadPLC		; load FZ boss patterns
00007DA8                            
00007DA8                            loc_72F4:
00007DA8 60CC                       		bra.s	loc_72C2
00007DAA                            ; ===========================================================================
00007DAA                            
00007DAA                            Resize_FZboss:
00007DAA 0C78 2300 F700             		cmpi.w	#$2300,($FFFFF700).w
00007DB0 6500                       		bcs.s	loc_7312
00007DB2 6100 0000                  		bsr.w	SingleObjLoad
00007DB6 6600                       		bne.s	loc_7312
00007DB8 12BC 0085                  		move.b	#$85,(a1)	; load FZ boss object
00007DBC 5438 F742                  		addq.b	#2,($FFFFF742).w
00007DC0 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007DC6                            
00007DC6                            loc_7312:
00007DC6 60AE                       		bra.s	loc_72C2
00007DC8                            ; ===========================================================================
00007DC8                            
00007DC8                            Resize_FZend:
00007DC8 0C78 2450 F700             		cmpi.w	#$2450,($FFFFF700).w
00007DCE 6500                       		bcs.s	loc_7320
00007DD0 5438 F742                  		addq.b	#2,($FFFFF742).w
00007DD4                            
00007DD4                            loc_7320:
00007DD4 60A0                       		bra.s	loc_72C2
00007DD6                            ; ===========================================================================
00007DD6                            
00007DD6                            locret_7322:
00007DD6 4E75                       		rts	
00007DD8                            ; ===========================================================================
00007DD8                            
00007DD8                            Resize_FZend2:
00007DD8 609C                       		bra.s	loc_72C2
00007DDA                            ; ===========================================================================
00007DDA                            ; ---------------------------------------------------------------------------
00007DDA                            ; Ending sequence dynamic screen resizing (empty)
00007DDA                            ; ---------------------------------------------------------------------------
00007DDA                            
00007DDA                            Resize_Ending:				; XREF: Resize_Index
00007DDA 4E75                       		rts	
00007DDC                            ; ===========================================================================
00007DDC                            ; ---------------------------------------------------------------------------
00007DDC                            ; Object 11 - GHZ bridge
00007DDC                            ; ---------------------------------------------------------------------------
00007DDC                            
00007DDC                            Obj11:					; XREF: Obj_Index
00007DDC 7000                       		moveq	#0,d0
00007DDE 1028 0024                  		move.b	$24(a0),d0
00007DE2 323B 0000                  		move.w	Obj11_Index(pc,d0.w),d1
00007DE6 4EFB 1000                  		jmp	Obj11_Index(pc,d1.w)
00007DEA                            ; ===========================================================================
00007DEA 0000 0000                  Obj11_Index:	dc.w Obj11_Main-Obj11_Index, Obj11_Action-Obj11_Index
00007DEE 0000 0000                  		dc.w Obj11_Action2-Obj11_Index,	Obj11_Delete2-Obj11_Index
00007DF2 0000 0000                  		dc.w Obj11_Delete2-Obj11_Index,	Obj11_Display2-Obj11_Index
00007DF6                            ; ===========================================================================
00007DF6                            
00007DF6                            Obj11_Main:				; XREF: Obj11_Index
00007DF6 5428 0024                  		addq.b	#2,$24(a0)
00007DFA 217C 0000 0000 0004        		move.l	#Map_obj11,4(a0)
00007E02 317C 438E 0002             		move.w	#$438E,2(a0)
00007E08 117C 0004 0001             		move.b	#4,1(a0)
00007E0E 117C 0003 0018             		move.b	#3,$18(a0)
00007E14 117C 0080 0019             		move.b	#$80,$19(a0)
00007E1A 3428 000C                  		move.w	$C(a0),d2
00007E1E 3628 0008                  		move.w	8(a0),d3
00007E22 1810                       		move.b	0(a0),d4	; copy object number ($11) to d4
00007E24 45E8 0028                  		lea	$28(a0),a2	; copy bridge subtype to a2
00007E28 7200                       		moveq	#0,d1
00007E2A 1212                       		move.b	(a2),d1		; copy a2 to d1
00007E2C 14FC 0000                  		move.b	#0,(a2)+
00007E30 3001                       		move.w	d1,d0
00007E32 E248                       		lsr.w	#1,d0
00007E34 E948                       		lsl.w	#4,d0
00007E36 9640                       		sub.w	d0,d3
00007E38 5501                       		subq.b	#2,d1
00007E3A 6500                       		bcs.s	Obj11_Action
00007E3C                            
00007E3C                            Obj11_MakeBdg:
00007E3C 6100 0000                  		bsr.w	SingleObjLoad
00007E40 6600                       		bne.s	Obj11_Action
00007E42 5228 0028                  		addq.b	#1,$28(a0)
00007E46 B668 0008                  		cmp.w	8(a0),d3
00007E4A 6600                       		bne.s	loc_73B8
00007E4C 0643 0010                  		addi.w	#$10,d3
00007E50 3142 000C                  		move.w	d2,$C(a0)
00007E54 3142 003C                  		move.w	d2,$3C(a0)
00007E58 3A08                       		move.w	a0,d5
00007E5A 0445 D000                  		subi.w	#-$3000,d5
00007E5E EC4D                       		lsr.w	#6,d5
00007E60 0245 007F                  		andi.w	#$7F,d5
00007E64 14C5                       		move.b	d5,(a2)+
00007E66 5228 0028                  		addq.b	#1,$28(a0)
00007E6A                            
00007E6A                            loc_73B8:				; XREF: ROM:00007398j
00007E6A 3A09                       		move.w	a1,d5
00007E6C 0445 D000                  		subi.w	#-$3000,d5
00007E70 EC4D                       		lsr.w	#6,d5
00007E72 0245 007F                  		andi.w	#$7F,d5
00007E76 14C5                       		move.b	d5,(a2)+
00007E78 137C 000A 0024             		move.b	#$A,$24(a1)
00007E7E 1284                       		move.b	d4,0(a1)	; load bridge object (d4 = $11)
00007E80 3342 000C                  		move.w	d2,$C(a1)
00007E84 3342 003C                  		move.w	d2,$3C(a1)
00007E88 3343 0008                  		move.w	d3,8(a1)
00007E8C 237C 0000 0000 0004        		move.l	#Map_obj11,4(a1)
00007E94 337C 438E 0002             		move.w	#$438E,2(a1)
00007E9A 137C 0004 0001             		move.b	#4,1(a1)
00007EA0 137C 0003 0018             		move.b	#3,$18(a1)
00007EA6 137C 0008 0019             		move.b	#8,$19(a1)
00007EAC 0643 0010                  		addi.w	#$10,d3
00007EB0 51C9 FF8A                  		dbf	d1,Obj11_MakeBdg ; repeat d1 times (length of bridge)
00007EB4                            
00007EB4                            Obj11_Action:				; XREF: Obj11_Index
00007EB4 6100                       		bsr.s	Obj11_Solid
00007EB6 4A28 003E                  		tst.b	$3E(a0)
00007EBA 6700                       		beq.s	Obj11_Display
00007EBC 5928 003E                  		subq.b	#4,$3E(a0)
00007EC0 6100 0000                  		bsr.w	Obj11_Bend
00007EC4                            
00007EC4                            Obj11_Display:
00007EC4 6100 0000                  		bsr.w	DisplaySprite
00007EC8 6000 0000                  		bra.w	Obj11_ChkDel
00007ECC                            
00007ECC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007ECC                            
00007ECC                            
00007ECC                            Obj11_Solid:				; XREF: Obj11_Action
00007ECC 7200                       		moveq	#0,d1
00007ECE 1228 0028                  		move.b	$28(a0),d1
00007ED2 E749                       		lsl.w	#3,d1
00007ED4 3401                       		move.w	d1,d2
00007ED6 5041                       		addq.w	#8,d1
00007ED8 D442                       		add.w	d2,d2
00007EDA 43F8 D000                  		lea	($FFFFD000).w,a1
00007EDE 4A69 0012                  		tst.w	$12(a1)
00007EE2 6B00 0000                  		bmi.w	locret_751E
00007EE6 3029 0008                  		move.w	8(a1),d0
00007EEA 9068 0008                  		sub.w	8(a0),d0
00007EEE D041                       		add.w	d1,d0
00007EF0 6B00 0000                  		bmi.w	locret_751E
00007EF4 B042                       		cmp.w	d2,d0
00007EF6 6400 0000                  		bcc.w	locret_751E
00007EFA 6000                       		bra.s	Platform2
00007EFC                            ; End of function Obj11_Solid
00007EFC                            
00007EFC                            ; ---------------------------------------------------------------------------
00007EFC                            ; Platform subroutine
00007EFC                            ; ---------------------------------------------------------------------------
00007EFC                            
00007EFC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007EFC                            
00007EFC                            
00007EFC                            PlatformObject:
00007EFC 43F8 D000                  		lea	($FFFFD000).w,a1
00007F00 4A69 0012                  		tst.w	$12(a1)
00007F04 6B00 0000                  		bmi.w	locret_751E
00007F08 3029 0008                  		move.w	8(a1),d0
00007F0C 9068 0008                  		sub.w	8(a0),d0
00007F10 D041                       		add.w	d1,d0
00007F12 6B00 0000                  		bmi.w	locret_751E
00007F16 D241                       		add.w	d1,d1
00007F18 B041                       		cmp.w	d1,d0
00007F1A 6400 0000                  		bcc.w	locret_751E
00007F1E                            
00007F1E                            Platform2:
00007F1E 3028 000C                  		move.w	$C(a0),d0
00007F22 5140                       		subq.w	#8,d0
00007F24                            
00007F24                            Platform3:
00007F24 3429 000C                  		move.w	$C(a1),d2
00007F28 1229 0016                  		move.b	$16(a1),d1
00007F2C 4881                       		ext.w	d1
00007F2E D242                       		add.w	d2,d1
00007F30 5841                       		addq.w	#4,d1
00007F32 9041                       		sub.w	d1,d0
00007F34 6200 0000                  		bhi.w	locret_751E
00007F38 0C40 FFF0                  		cmpi.w	#-$10,d0
00007F3C 6500 0000                  		bcs.w	locret_751E
00007F40 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00007F44 6B00 0000                  		bmi.w	locret_751E
00007F48 0C29 0006 0024             		cmpi.b	#6,$24(a1)
00007F4E 6400 0000                  		bcc.w	locret_751E
00007F52 D440                       		add.w	d0,d2
00007F54 5642                       		addq.w	#3,d2
00007F56 3342 000C                  		move.w	d2,$C(a1)
00007F5A 5428 0024                  		addq.b	#2,$24(a0)
00007F5E                            
00007F5E                            loc_74AE:
00007F5E 0829 0003 0022             		btst	#3,$22(a1)
00007F64 6700                       		beq.s	loc_74DC
00007F66 7000                       		moveq	#0,d0
00007F68 1029 003D                  		move.b	$3D(a1),d0
00007F6C ED48                       		lsl.w	#6,d0
00007F6E 0680 00FF D000             		addi.l	#$FFD000,d0
00007F74 2440                       		movea.l	d0,a2
00007F76 08AA 0003 0022             		bclr	#3,$22(a2)
00007F7C 422A 0025                  		clr.b	$25(a2)
00007F80 0C2A 0004 0024             		cmpi.b	#4,$24(a2)
00007F86 6600                       		bne.s	loc_74DC
00007F88 552A 0024                  		subq.b	#2,$24(a2)
00007F8C                            
00007F8C                            loc_74DC:
00007F8C 3008                       		move.w	a0,d0
00007F8E 0440 D000                  		subi.w	#-$3000,d0
00007F92 EC48                       		lsr.w	#6,d0
00007F94 0240 007F                  		andi.w	#$7F,d0
00007F98 1340 003D                  		move.b	d0,$3D(a1)
00007F9C 137C 0000 0026             		move.b	#0,$26(a1)
00007FA2 337C 0000 0012             		move.w	#0,$12(a1)
00007FA8 3369 0010 0014             		move.w	$10(a1),$14(a1)
00007FAE 0829 0001 0022             		btst	#1,$22(a1)
00007FB4 6700                       		beq.s	loc_7512
00007FB6 2F08                       		move.l	a0,-(sp)
00007FB8 2049                       		movea.l	a1,a0
00007FBA 4EB9 0000 0000             		jsr	Sonic_ResetOnFloor
00007FC0 205F                       		movea.l	(sp)+,a0
00007FC2                            
00007FC2                            loc_7512:
00007FC2 08E9 0003 0022             		bset	#3,$22(a1)
00007FC8 08E8 0003 0022             		bset	#3,$22(a0)
00007FCE                            
00007FCE                            locret_751E:
00007FCE 4E75                       		rts	
00007FD0                            ; End of function PlatformObject
00007FD0                            
00007FD0                            ; ---------------------------------------------------------------------------
00007FD0                            ; Sloped platform subroutine (GHZ collapsing ledges and	SLZ seesaws)
00007FD0                            ; ---------------------------------------------------------------------------
00007FD0                            
00007FD0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007FD0                            
00007FD0                            
00007FD0                            SlopeObject:				; XREF: Obj1A_Slope; Obj5E_Slope
00007FD0 43F8 D000                  		lea	($FFFFD000).w,a1
00007FD4 4A69 0012                  		tst.w	$12(a1)
00007FD8 6B00 FFF4                  		bmi.w	locret_751E
00007FDC 3029 0008                  		move.w	8(a1),d0
00007FE0 9068 0008                  		sub.w	8(a0),d0
00007FE4 D041                       		add.w	d1,d0
00007FE6 6BE6                       		bmi.s	locret_751E
00007FE8 D241                       		add.w	d1,d1
00007FEA B041                       		cmp.w	d1,d0
00007FEC 64E0                       		bcc.s	locret_751E
00007FEE 0828 0000 0001             		btst	#0,1(a0)
00007FF4 6700                       		beq.s	loc_754A
00007FF6 4640                       		not.w	d0
00007FF8 D041                       		add.w	d1,d0
00007FFA                            
00007FFA                            loc_754A:
00007FFA E248                       		lsr.w	#1,d0
00007FFC 7600                       		moveq	#0,d3
00007FFE 1632 0000                  		move.b	(a2,d0.w),d3
00008002 3028 000C                  		move.w	$C(a0),d0
00008006 9043                       		sub.w	d3,d0
00008008 6000 FF1A                  		bra.w	Platform3
0000800C                            ; End of function SlopeObject
0000800C                            
0000800C                            
0000800C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000800C                            
0000800C                            
0000800C                            Obj15_Solid:				; XREF: Obj15_SetSolid
0000800C 43F8 D000                  		lea	($FFFFD000).w,a1
00008010 4A69 0012                  		tst.w	$12(a1)
00008014 6B00 FFB8                  		bmi.w	locret_751E
00008018 3029 0008                  		move.w	8(a1),d0
0000801C 9068 0008                  		sub.w	8(a0),d0
00008020 D041                       		add.w	d1,d0
00008022 6B00 FFAA                  		bmi.w	locret_751E
00008026 D241                       		add.w	d1,d1
00008028 B041                       		cmp.w	d1,d0
0000802A 6400 FFA2                  		bcc.w	locret_751E
0000802E 3028 000C                  		move.w	$C(a0),d0
00008032 9043                       		sub.w	d3,d0
00008034 6000 FEEE                  		bra.w	Platform3
00008038                            ; End of function Obj15_Solid
00008038                            
00008038                            ; ===========================================================================
00008038                            
00008038                            Obj11_Action2:				; XREF: Obj11_Index
00008038 6100                       		bsr.s	Obj11_WalkOff
0000803A 6100 0000                  		bsr.w	DisplaySprite
0000803E 6000 0000                  		bra.w	Obj11_ChkDel
00008042                            
00008042                            ; ---------------------------------------------------------------------------
00008042                            ; Subroutine allowing Sonic to walk off a bridge
00008042                            ; ---------------------------------------------------------------------------
00008042                            
00008042                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008042                            
00008042                            
00008042                            Obj11_WalkOff:				; XREF: Obj11_Action2
00008042 7200                       		moveq	#0,d1
00008044 1228 0028                  		move.b	$28(a0),d1
00008048 E749                       		lsl.w	#3,d1
0000804A 3401                       		move.w	d1,d2
0000804C 5041                       		addq.w	#8,d1
0000804E 6100                       		bsr.s	ExitPlatform2
00008050 6400                       		bcc.s	locret_75BE
00008052 E848                       		lsr.w	#4,d0
00008054 1140 003F                  		move.b	d0,$3F(a0)
00008058 1028 003E                  		move.b	$3E(a0),d0
0000805C 0C00 0040                  		cmpi.b	#$40,d0
00008060 6700                       		beq.s	loc_75B6
00008062 5828 003E                  		addq.b	#4,$3E(a0)
00008066                            
00008066                            loc_75B6:
00008066 6100 0000                  		bsr.w	Obj11_Bend
0000806A 6100 0000                  		bsr.w	Obj11_MoveSonic
0000806E                            
0000806E                            locret_75BE:
0000806E 4E75                       		rts	
00008070                            ; End of function Obj11_WalkOff
00008070                            
00008070                            ; ---------------------------------------------------------------------------
00008070                            ; Subroutine allowing Sonic to walk or jump off	a platform
00008070                            ; ---------------------------------------------------------------------------
00008070                            
00008070                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008070                            
00008070                            
00008070                            ExitPlatform:
00008070 3401                       		move.w	d1,d2
00008072                            
00008072                            ExitPlatform2:
00008072 D442                       		add.w	d2,d2
00008074 43F8 D000                  		lea	($FFFFD000).w,a1
00008078 0829 0001 0022             		btst	#1,$22(a1)
0000807E 6600                       		bne.s	loc_75E0
00008080 3029 0008                  		move.w	8(a1),d0
00008084 9068 0008                  		sub.w	8(a0),d0
00008088 D041                       		add.w	d1,d0
0000808A 6B00                       		bmi.s	loc_75E0
0000808C B042                       		cmp.w	d2,d0
0000808E 6500                       		bcs.s	locret_75F2
00008090                            
00008090                            loc_75E0:
00008090 08A9 0003 0022             		bclr	#3,$22(a1)
00008096 117C 0002 0024             		move.b	#2,$24(a0)
0000809C 08A8 0003 0022             		bclr	#3,$22(a0)
000080A2                            
000080A2                            locret_75F2:
000080A2 4E75                       		rts	
000080A4                            ; End of function ExitPlatform
000080A4                            
000080A4                            
000080A4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000080A4                            
000080A4                            
000080A4                            Obj11_MoveSonic:			; XREF: Obj11_WalkOff
000080A4 7000                       		moveq	#0,d0
000080A6 1028 003F                  		move.b	$3F(a0),d0
000080AA 1030 0029                  		move.b	$29(a0,d0.w),d0
000080AE ED48                       		lsl.w	#6,d0
000080B0 0680 00FF D000             		addi.l	#$FFD000,d0
000080B6 2440                       		movea.l	d0,a2
000080B8 43F8 D000                  		lea	($FFFFD000).w,a1
000080BC 302A 000C                  		move.w	$C(a2),d0
000080C0 5140                       		subq.w	#8,d0
000080C2 7200                       		moveq	#0,d1
000080C4 1229 0016                  		move.b	$16(a1),d1
000080C8 9041                       		sub.w	d1,d0
000080CA 3340 000C                  		move.w	d0,$C(a1)	; change Sonic's position on y-axis
000080CE 4E75                       		rts	
000080D0                            ; End of function Obj11_MoveSonic
000080D0                            
000080D0                            
000080D0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000080D0                            
000080D0                            
000080D0                            Obj11_Bend:				; XREF: Obj11_Action; Obj11_WalkOff
000080D0 1028 003E                  		move.b	$3E(a0),d0
000080D4 6100 B2FE                  		bsr.w	CalcSine
000080D8 3800                       		move.w	d0,d4
000080DA 49F9 0000 0000             		lea	(Obj11_BendData2).l,a4
000080E0 7000                       		moveq	#0,d0
000080E2 1028 0028                  		move.b	$28(a0),d0
000080E6 E948                       		lsl.w	#4,d0
000080E8 7600                       		moveq	#0,d3
000080EA 1628 003F                  		move.b	$3F(a0),d3
000080EE 3403                       		move.w	d3,d2
000080F0 D640                       		add.w	d0,d3
000080F2 7A00                       		moveq	#0,d5
000080F4 4BF9 0000 0000             		lea	(Obj11_BendData).l,a5
000080FA 1A35 3000                  		move.b	(a5,d3.w),d5
000080FE 0243 000F                  		andi.w	#$F,d3
00008102 E94B                       		lsl.w	#4,d3
00008104 47F4 3000                  		lea	(a4,d3.w),a3
00008108 45E8 0029                  		lea	$29(a0),a2
0000810C                            
0000810C                            loc_765C:
0000810C 7000                       		moveq	#0,d0
0000810E 101A                       		move.b	(a2)+,d0
00008110 ED48                       		lsl.w	#6,d0
00008112 0680 00FF D000             		addi.l	#$FFD000,d0
00008118 2240                       		movea.l	d0,a1
0000811A 7000                       		moveq	#0,d0
0000811C 101B                       		move.b	(a3)+,d0
0000811E 5240                       		addq.w	#1,d0
00008120 C0C5                       		mulu.w	d5,d0
00008122 C0C4                       		mulu.w	d4,d0
00008124 4840                       		swap	d0
00008126 D069 003C                  		add.w	$3C(a1),d0
0000812A 3340 000C                  		move.w	d0,$C(a1)
0000812E 51CA FFDC                  		dbf	d2,loc_765C
00008132 7000                       		moveq	#0,d0
00008134 1028 0028                  		move.b	$28(a0),d0
00008138 7600                       		moveq	#0,d3
0000813A 1628 003F                  		move.b	$3F(a0),d3
0000813E 5203                       		addq.b	#1,d3
00008140 9600                       		sub.b	d0,d3
00008142 4403                       		neg.b	d3
00008144 6B00                       		bmi.s	locret_76CA
00008146 3403                       		move.w	d3,d2
00008148 E94B                       		lsl.w	#4,d3
0000814A 47F4 3000                  		lea	(a4,d3.w),a3
0000814E D6C2                       		adda.w	d2,a3
00008150 5342                       		subq.w	#1,d2
00008152 6500                       		bcs.s	locret_76CA
00008154                            
00008154                            loc_76A4:
00008154 7000                       		moveq	#0,d0
00008156 101A                       		move.b	(a2)+,d0
00008158 ED48                       		lsl.w	#6,d0
0000815A 0680 00FF D000             		addi.l	#$FFD000,d0
00008160 2240                       		movea.l	d0,a1
00008162 7000                       		moveq	#0,d0
00008164 1023                       		move.b	-(a3),d0
00008166 5240                       		addq.w	#1,d0
00008168 C0C5                       		mulu.w	d5,d0
0000816A C0C4                       		mulu.w	d4,d0
0000816C 4840                       		swap	d0
0000816E D069 003C                  		add.w	$3C(a1),d0
00008172 3340 000C                  		move.w	d0,$C(a1)
00008176 51CA FFDC                  		dbf	d2,loc_76A4
0000817A                            
0000817A                            locret_76CA:
0000817A 4E75                       		rts	
0000817C                            ; End of function Obj11_Bend
0000817C                            
0000817C                            ; ===========================================================================
0000817C                            ; ---------------------------------------------------------------------------
0000817C                            ; GHZ bridge-bending data
0000817C                            ; (Defines how the bridge bends	when Sonic walks across	it)
0000817C                            ; ---------------------------------------------------------------------------
0000817C                            Obj11_BendData:	incbin	misc\ghzbend1.bin
0000828C                            		even
0000828C                            Obj11_BendData2:incbin	misc\ghzbend2.bin
0000838C                            		even
0000838C                            
0000838C                            ; ===========================================================================
0000838C                            
0000838C                            Obj11_ChkDel:				; XREF: Obj11_Display; Obj11_Action2
0000838C 3028 0008                  		move.w	8(a0),d0
00008390 0240 FF80                  		andi.w	#$FF80,d0
00008394 3238 F700                  		move.w	($FFFFF700).w,d1
00008398 0441 0080                  		subi.w	#$80,d1
0000839C 0241 FF80                  		andi.w	#$FF80,d1
000083A0 9041                       		sub.w	d1,d0
000083A2 0C40 0280                  		cmpi.w	#$280,d0
000083A6 6200 0000                  		bhi.w	Obj11_DelAll
000083AA 4E75                       		rts	
000083AC                            ; ===========================================================================
000083AC                            
000083AC                            Obj11_DelAll:				; XREF: Obj11_ChkDel
000083AC 7400                       		moveq	#0,d2
000083AE 45E8 0028                  		lea	$28(a0),a2	; load bridge length
000083B2 141A                       		move.b	(a2)+,d2	; move bridge length to	d2
000083B4 5302                       		subq.b	#1,d2		; subtract 1
000083B6 6500                       		bcs.s	Obj11_Delete
000083B8                            
000083B8                            Obj11_DelLoop:
000083B8 7000                       		moveq	#0,d0
000083BA 101A                       		move.b	(a2)+,d0
000083BC ED48                       		lsl.w	#6,d0
000083BE 0680 00FF D000             		addi.l	#$FFD000,d0
000083C4 2240                       		movea.l	d0,a1
000083C6 B048                       		cmp.w	a0,d0
000083C8 6700                       		beq.s	loc_791E
000083CA 6100 0000                  		bsr.w	DeleteObject2
000083CE                            
000083CE                            loc_791E:
000083CE 51CA FFE8                  		dbf	d2,Obj11_DelLoop ; repeat d2 times (bridge length)
000083D2                            
000083D2                            Obj11_Delete:
000083D2 6100 0000                  		bsr.w	DeleteObject
000083D6 4E75                       		rts	
000083D8                            ; ===========================================================================
000083D8                            
000083D8                            Obj11_Delete2:				; XREF: Obj11_Index
000083D8 6100 0000                  		bsr.w	DeleteObject
000083DC 4E75                       		rts	
000083DE                            ; ===========================================================================
000083DE                            
000083DE                            Obj11_Display2:				; XREF: Obj11_Index
000083DE 6100 0000                  		bsr.w	DisplaySprite
000083E2 4E75                       		rts	
000083E4                            ; ===========================================================================
000083E4                            ; ---------------------------------------------------------------------------
000083E4                            ; Sprite mappings - GHZ	bridge
000083E4                            ; ---------------------------------------------------------------------------
000083E4                            Map_obj11:
000083E4                            	include "_maps\obj11.asm"
000083E4                            ; ---------------------------------------------------------------------------
000083E4                            ; Sprite mappings - GHZ	bridge
000083E4                            ; ---------------------------------------------------------------------------
000083E4 0000 0000                  		dc.w byte_793A-Map_obj11, byte_7940-Map_obj11
000083E8 0000                       		dc.w byte_794B-Map_obj11
000083EA 01                         byte_793A:	dc.b 1
000083EB F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
000083F0 02                         byte_7940:	dc.b 2
000083F1 F804 0004 F0               		dc.b $F8, 4, 0,	4, $F0
000083F6 000C 0006 F0               		dc.b 0,	$C, 0, 6, $F0
000083FB 01                         byte_794B:	dc.b 1
000083FC FC04 0008 F8               		dc.b $FC, 4, 0,	8, $F8
00008402 00                         		even
00008402 00                         		even
00008402                            
00008402                            ; ===========================================================================
00008402                            ; ---------------------------------------------------------------------------
00008402                            ; Object 15 - swinging platforms (GHZ, MZ, SLZ)
00008402                            ;	    - spiked ball on a chain (SBZ)
00008402                            ; ---------------------------------------------------------------------------
00008402                            
00008402                            Obj15:					; XREF: Obj_Index
00008402 7000                       		moveq	#0,d0
00008404 1028 0024                  		move.b	$24(a0),d0
00008408 323B 0000                  		move.w	Obj15_Index(pc,d0.w),d1
0000840C 4EFB 1000                  		jmp	Obj15_Index(pc,d1.w)
00008410                            ; ===========================================================================
00008410 0000 0000                  Obj15_Index:	dc.w Obj15_Main-Obj15_Index, Obj15_SetSolid-Obj15_Index
00008414 0000 0000                  		dc.w Obj15_Action2-Obj15_Index,	Obj15_Delete-Obj15_Index
00008418 0000 0000                  		dc.w Obj15_Delete-Obj15_Index, Obj15_Display-Obj15_Index
0000841C 0000                       		dc.w Obj15_Action-Obj15_Index
0000841E                            ; ===========================================================================
0000841E                            
0000841E                            Obj15_Main:				; XREF: Obj15_Index
0000841E 5428 0024                  		addq.b	#2,$24(a0)
00008422 217C 0000 0000 0004        		move.l	#Map_obj15,4(a0) ; GHZ and MZ specific code
0000842A 317C 4380 0002             		move.w	#$4380,2(a0)
00008430 117C 0004 0001             		move.b	#4,1(a0)
00008436 117C 0003 0018             		move.b	#3,$18(a0)
0000843C 117C 0018 0019             		move.b	#$18,$19(a0)
00008442 117C 0008 0016             		move.b	#8,$16(a0)
00008448 3168 000C 0038             		move.w	$C(a0),$38(a0)
0000844E 3168 0008 003A             		move.w	8(a0),$3A(a0)
00008454 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
0000845A 6600                       		bne.s	Obj15_NotSLZ
0000845C 217C 0000 0000 0004        		move.l	#Map_obj15a,4(a0) ; SLZ	specific code
00008464 317C 43DC 0002             		move.w	#$43DC,2(a0)
0000846A 117C 0020 0019             		move.b	#$20,$19(a0)
00008470 117C 0010 0016             		move.b	#$10,$16(a0)
00008476 117C 0099 0020             		move.b	#$99,$20(a0)
0000847C                            
0000847C                            Obj15_NotSLZ:
0000847C 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
00008482 6600                       		bne.s	Obj15_SetLength
00008484 217C 0000 0000 0004        		move.l	#Map_obj15b,4(a0) ; SBZ	specific code
0000848C 317C 0391 0002             		move.w	#$391,2(a0)
00008492 117C 0018 0019             		move.b	#$18,$19(a0)
00008498 117C 0018 0016             		move.b	#$18,$16(a0)
0000849E 117C 0086 0020             		move.b	#$86,$20(a0)
000084A4 117C 000C 0024             		move.b	#$C,$24(a0)
000084AA                            
000084AA                            Obj15_SetLength:
000084AA 1810                       		move.b	0(a0),d4
000084AC 7200                       		moveq	#0,d1
000084AE 45E8 0028                  		lea	$28(a0),a2	; move chain length to a2
000084B2 1212                       		move.b	(a2),d1		; move a2 to d1
000084B4 3F01                       		move.w	d1,-(sp)
000084B6 0241 000F                  		andi.w	#$F,d1
000084BA 14FC 0000                  		move.b	#0,(a2)+
000084BE 3601                       		move.w	d1,d3
000084C0 E94B                       		lsl.w	#4,d3
000084C2 5003                       		addq.b	#8,d3
000084C4 1143 003C                  		move.b	d3,$3C(a0)
000084C8 5103                       		subq.b	#8,d3
000084CA 4A28 001A                  		tst.b	$1A(a0)
000084CE 6700                       		beq.s	Obj15_MakeChain
000084D0 5003                       		addq.b	#8,d3
000084D2 5341                       		subq.w	#1,d1
000084D4                            
000084D4                            Obj15_MakeChain:
000084D4 6100 0000                  		bsr.w	SingleObjLoad
000084D8 6600                       		bne.s	loc_7A92
000084DA 5228 0028                  		addq.b	#1,$28(a0)
000084DE 3A09                       		move.w	a1,d5
000084E0 0445 D000                  		subi.w	#-$3000,d5
000084E4 EC4D                       		lsr.w	#6,d5
000084E6 0245 007F                  		andi.w	#$7F,d5
000084EA 14C5                       		move.b	d5,(a2)+
000084EC 137C 000A 0024             		move.b	#$A,$24(a1)
000084F2 1284                       		move.b	d4,0(a1)	; load swinging	object
000084F4 2368 0004 0004             		move.l	4(a0),4(a1)
000084FA 3368 0002 0002             		move.w	2(a0),2(a1)
00008500 08A9 0006 0002             		bclr	#6,2(a1)
00008506 137C 0004 0001             		move.b	#4,1(a1)
0000850C 137C 0004 0018             		move.b	#4,$18(a1)
00008512 137C 0008 0019             		move.b	#8,$19(a1)
00008518 137C 0001 001A             		move.b	#1,$1A(a1)
0000851E 1343 003C                  		move.b	d3,$3C(a1)
00008522 0403 0010                  		subi.b	#$10,d3
00008526 6400                       		bcc.s	loc_7A8E
00008528 137C 0002 001A             		move.b	#2,$1A(a1)
0000852E 137C 0003 0018             		move.b	#3,$18(a1)
00008534 08E9 0006 0002             		bset	#6,2(a1)
0000853A                            
0000853A                            loc_7A8E:
0000853A 51C9 FF98                  		dbf	d1,Obj15_MakeChain ; repeat d1 times (chain length)
0000853E                            
0000853E                            loc_7A92:
0000853E 3A08                       		move.w	a0,d5
00008540 0445 D000                  		subi.w	#-$3000,d5
00008544 EC4D                       		lsr.w	#6,d5
00008546 0245 007F                  		andi.w	#$7F,d5
0000854A 14C5                       		move.b	d5,(a2)+
0000854C 317C 4080 0026             		move.w	#$4080,$26(a0)
00008552 317C FE00 003E             		move.w	#-$200,$3E(a0)
00008558 321F                       		move.w	(sp)+,d1
0000855A 0801 0004                  		btst	#4,d1		; is object type $8X ?
0000855E 6700                       		beq.s	loc_7AD4	; if not, branch
00008560 217C 0000 0000 0004        		move.l	#Map_obj48,4(a0) ; use GHZ ball	mappings
00008568 317C 43AA 0002             		move.w	#$43AA,2(a0)
0000856E 117C 0001 001A             		move.b	#1,$1A(a0)
00008574 117C 0002 0018             		move.b	#2,$18(a0)
0000857A 117C 0081 0020             		move.b	#$81,$20(a0)	; make object hurt when	touched
00008580                            
00008580                            loc_7AD4:
00008580 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; is zone SBZ?
00008586 6700                       		beq.s	Obj15_Action	; if yes, branch
00008588                            
00008588                            Obj15_SetSolid:				; XREF: Obj15_Index
00008588 7200                       		moveq	#0,d1
0000858A 1228 0019                  		move.b	$19(a0),d1
0000858E 7600                       		moveq	#0,d3
00008590 1628 0016                  		move.b	$16(a0),d3
00008594 6100 FA76                  		bsr.w	Obj15_Solid
00008598                            
00008598                            Obj15_Action:				; XREF: Obj15_Index
00008598 6100 0000                  		bsr.w	Obj15_Move
0000859C 6100 0000                  		bsr.w	DisplaySprite
000085A0 6000 0000                  		bra.w	Obj15_ChkDel
000085A4                            ; ===========================================================================
000085A4                            
000085A4                            Obj15_Action2:				; XREF: Obj15_Index
000085A4 7200                       		moveq	#0,d1
000085A6 1228 0019                  		move.b	$19(a0),d1
000085AA 6100 FAC4                  		bsr.w	ExitPlatform
000085AE 3F28 0008                  		move.w	8(a0),-(sp)
000085B2 6100 0000                  		bsr.w	Obj15_Move
000085B6 341F                       		move.w	(sp)+,d2
000085B8 7600                       		moveq	#0,d3
000085BA 1628 0016                  		move.b	$16(a0),d3
000085BE 5203                       		addq.b	#1,d3
000085C0 6100 0000                  		bsr.w	MvSonicOnPtfm
000085C4 6100 0000                  		bsr.w	DisplaySprite
000085C8 6000 0000                  		bra.w	Obj15_ChkDel
000085CC                            
000085CC 4E75                       		rts
000085CE                            
000085CE                            ; ---------------------------------------------------------------------------
000085CE                            ; Subroutine to	change Sonic's position with a platform
000085CE                            ; ---------------------------------------------------------------------------
000085CE                            
000085CE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000085CE                            
000085CE                            
000085CE                            MvSonicOnPtfm:
000085CE 43F8 D000                  		lea	($FFFFD000).w,a1
000085D2 3028 000C                  		move.w	$C(a0),d0
000085D6 9043                       		sub.w	d3,d0
000085D8 6000                       		bra.s	MvSonic2
000085DA                            ; End of function MvSonicOnPtfm
000085DA                            
000085DA                            ; ---------------------------------------------------------------------------
000085DA                            ; Subroutine to	change Sonic's position with a platform
000085DA                            ; ---------------------------------------------------------------------------
000085DA                            
000085DA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000085DA                            
000085DA                            
000085DA                            MvSonicOnPtfm2:
000085DA 43F8 D000                  		lea	($FFFFD000).w,a1
000085DE 3028 000C                  		move.w	$C(a0),d0
000085E2 0440 0009                  		subi.w	#9,d0
000085E6                            
000085E6                            MvSonic2:
000085E6 4A38 F7C8                  		tst.b	($FFFFF7C8).w
000085EA 6B00                       		bmi.s	locret_7B62
000085EC 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
000085F2 6400                       		bcc.s	locret_7B62
000085F4 4A78 FE08                  		tst.w	($FFFFFE08).w
000085F8 6600                       		bne.s	locret_7B62
000085FA 7200                       		moveq	#0,d1
000085FC 1229 0016                  		move.b	$16(a1),d1
00008600 9041                       		sub.w	d1,d0
00008602 3340 000C                  		move.w	d0,$C(a1)
00008606 9468 0008                  		sub.w	8(a0),d2
0000860A 9569 0008                  		sub.w	d2,8(a1)
0000860E                            
0000860E                            locret_7B62:
0000860E 4E75                       		rts	
00008610                            ; End of function MvSonicOnPtfm2
00008610                            
00008610                            
00008610                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008610                            
00008610                            
00008610                            Obj15_Move:				; XREF: Obj15_Action; Obj15_Action2
00008610 1038 FE78                  		move.b	($FFFFFE78).w,d0
00008614 323C 0080                  		move.w	#$80,d1
00008618 0828 0000 0022             		btst	#0,$22(a0)
0000861E 6700                       		beq.s	loc_7B78
00008620 4440                       		neg.w	d0
00008622 D041                       		add.w	d1,d0
00008624                            
00008624                            loc_7B78:
00008624 6000                       		bra.s	Obj15_Move2
00008626                            ; End of function Obj15_Move
00008626                            
00008626                            
00008626                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008626                            
00008626                            
00008626                            Obj48_Move:				; XREF: Obj48_Display2
00008626 4A28 003D                  		tst.b	$3D(a0)
0000862A 6600                       		bne.s	loc_7B9C
0000862C 3028 003E                  		move.w	$3E(a0),d0
00008630 5040                       		addq.w	#8,d0
00008632 3140 003E                  		move.w	d0,$3E(a0)
00008636 D168 0026                  		add.w	d0,$26(a0)
0000863A 0C40 0200                  		cmpi.w	#$200,d0
0000863E 6600                       		bne.s	loc_7BB6
00008640 117C 0001 003D             		move.b	#1,$3D(a0)
00008646 6000                       		bra.s	loc_7BB6
00008648                            ; ===========================================================================
00008648                            
00008648                            loc_7B9C:
00008648 3028 003E                  		move.w	$3E(a0),d0
0000864C 5140                       		subq.w	#8,d0
0000864E 3140 003E                  		move.w	d0,$3E(a0)
00008652 D168 0026                  		add.w	d0,$26(a0)
00008656 0C40 FE00                  		cmpi.w	#-$200,d0
0000865A 6600                       		bne.s	loc_7BB6
0000865C 117C 0000 003D             		move.b	#0,$3D(a0)
00008662                            
00008662                            loc_7BB6:
00008662 1028 0026                  		move.b	$26(a0),d0
00008666                            ; End of function Obj48_Move
00008666                            
00008666                            
00008666                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008666                            
00008666                            
00008666                            Obj15_Move2:				; XREF: Obj15_Move; Obj48_Display
00008666 6100 AD6C                  		bsr.w	CalcSine
0000866A 3428 0038                  		move.w	$38(a0),d2
0000866E 3628 003A                  		move.w	$3A(a0),d3
00008672 45E8 0028                  		lea	$28(a0),a2
00008676 7C00                       		moveq	#0,d6
00008678 1C1A                       		move.b	(a2)+,d6
0000867A                            
0000867A                            loc_7BCE:
0000867A 7800                       		moveq	#0,d4
0000867C 181A                       		move.b	(a2)+,d4
0000867E ED4C                       		lsl.w	#6,d4
00008680 0684 00FF D000             		addi.l	#$FFD000,d4
00008686 2244                       		movea.l	d4,a1
00008688 7800                       		moveq	#0,d4
0000868A 1829 003C                  		move.b	$3C(a1),d4
0000868E 2A04                       		move.l	d4,d5
00008690 C9C0                       		muls.w	d0,d4
00008692 E084                       		asr.l	#8,d4
00008694 CBC1                       		muls.w	d1,d5
00008696 E085                       		asr.l	#8,d5
00008698 D842                       		add.w	d2,d4
0000869A DA43                       		add.w	d3,d5
0000869C 3344 000C                  		move.w	d4,$C(a1)
000086A0 3345 0008                  		move.w	d5,8(a1)
000086A4 51CE FFD4                  		dbf	d6,loc_7BCE
000086A8 4E75                       		rts	
000086AA                            ; End of function Obj15_Move2
000086AA                            
000086AA                            ; ===========================================================================
000086AA                            
000086AA                            Obj15_ChkDel:				; XREF: Obj15_Action; Obj15_Action2
000086AA 3028 003A                  		move.w	$3A(a0),d0
000086AE 0240 FF80                  		andi.w	#$FF80,d0
000086B2 3238 F700                  		move.w	($FFFFF700).w,d1
000086B6 0441 0080                  		subi.w	#$80,d1
000086BA 0241 FF80                  		andi.w	#$FF80,d1
000086BE 9041                       		sub.w	d1,d0
000086C0 0C40 0280                  		cmpi.w	#$280,d0
000086C4 6200 0000                  		bhi.w	Obj15_DelAll
000086C8 4E75                       		rts	
000086CA                            ; ===========================================================================
000086CA                            
000086CA                            Obj15_DelAll:				; XREF: Obj15_ChkDel
000086CA 7400                       		moveq	#0,d2
000086CC 45E8 0028                  		lea	$28(a0),a2
000086D0 141A                       		move.b	(a2)+,d2
000086D2                            
000086D2                            Obj15_DelLoop:
000086D2 7000                       		moveq	#0,d0
000086D4 101A                       		move.b	(a2)+,d0
000086D6 ED48                       		lsl.w	#6,d0
000086D8 0680 00FF D000             		addi.l	#$FFD000,d0
000086DE 2240                       		movea.l	d0,a1
000086E0 6100 0000                  		bsr.w	DeleteObject2
000086E4 51CA FFEC                  		dbf	d2,Obj15_DelLoop ; repeat for length of	chain
000086E8 4E75                       		rts	
000086EA                            ; ===========================================================================
000086EA                            
000086EA                            Obj15_Delete:				; XREF: Obj15_Index
000086EA 6100 0000                  		bsr.w	DeleteObject
000086EE 4E75                       		rts	
000086F0                            ; ===========================================================================
000086F0                            
000086F0                            Obj15_Display:				; XREF: Obj15_Index
000086F0 6000 0000                  		bra.w	DisplaySprite
000086F4                            ; ===========================================================================
000086F4                            ; ---------------------------------------------------------------------------
000086F4                            ; Sprite mappings - GHZ	and MZ swinging	platforms
000086F4                            ; ---------------------------------------------------------------------------
000086F4                            Map_obj15:
000086F4                            	include "_maps\obj15ghz.asm"
000086F4                            ; ---------------------------------------------------------------------------
000086F4                            ; Sprite mappings - GHZ	and MZ swinging	platforms
000086F4                            ; ---------------------------------------------------------------------------
000086F4 0000                       		dc.w byte_7C4E-Map_obj15
000086F6 0000                       		dc.w byte_7C59-Map_obj15
000086F8 0000                       		dc.w byte_7C5F-Map_obj15
000086FA 02                         byte_7C4E:	dc.b 2
000086FB F809 0004 E8               		dc.b $F8, 9, 0,	4, $E8
00008700 F809 0004 00               		dc.b $F8, 9, 0,	4, 0
00008705 01                         byte_7C59:	dc.b 1
00008706 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000870B 01                         byte_7C5F:	dc.b 1
0000870C F805 000A F8               		dc.b $F8, 5, 0,	$A, $F8
00008712 00                         		even
00008712 00                         		even
00008712                            
00008712                            ; ---------------------------------------------------------------------------
00008712                            ; Sprite mappings - SLZ	swinging platforms
00008712                            ; ---------------------------------------------------------------------------
00008712                            Map_obj15a:
00008712                            	include "_maps\obj15slz.asm"
00008712                            ; ---------------------------------------------------------------------------
00008712                            ; Sprite mappings - SLZ	swinging platforms
00008712                            ; ---------------------------------------------------------------------------
00008712 0000                       		dc.w byte_7C6C-Map_obj15a
00008714 0000                       		dc.w byte_7C95-Map_obj15a
00008716 0000                       		dc.w byte_7C9B-Map_obj15a
00008718 08                         byte_7C6C:	dc.b 8
00008719 F00F 0004 E0               		dc.b $F0, $F, 0, 4, $E0
0000871E F00F 0804 00               		dc.b $F0, $F, 8, 4, 0
00008723 F005 0014 D0               		dc.b $F0, 5, 0,	$14, $D0
00008728 F005 0814 20               		dc.b $F0, 5, 8,	$14, $20
0000872D 1004 0018 E0               		dc.b $10, 4, 0,	$18, $E0
00008732 1004 0818 10               		dc.b $10, 4, 8,	$18, $10
00008737 1001 001A F8               		dc.b $10, 1, 0,	$1A, $F8
0000873C 1001 081A 00               		dc.b $10, 1, 8,	$1A, 0
00008741 01                         byte_7C95:	dc.b 1
00008742 F805 4000 F8               		dc.b $F8, 5, $40, 0, $F8
00008747 01                         byte_7C9B:	dc.b 1
00008748 F805 001C F8               		dc.b $F8, 5, 0,	$1C, $F8
0000874E 00                         		even
0000874E 00                         		even
0000874E                            
0000874E                            ; ===========================================================================
0000874E                            ; ---------------------------------------------------------------------------
0000874E                            ; Object 17 - helix of spikes on a pole	(GHZ)
0000874E                            ; ---------------------------------------------------------------------------
0000874E                            
0000874E                            Obj17:					; XREF: Obj_Index
0000874E 7000                       		moveq	#0,d0
00008750 1028 0024                  		move.b	$24(a0),d0
00008754 323B 0000                  		move.w	Obj17_Index(pc,d0.w),d1
00008758 4EFB 1000                  		jmp	Obj17_Index(pc,d1.w)
0000875C                            ; ===========================================================================
0000875C 0000                       Obj17_Index:	dc.w Obj17_Main-Obj17_Index
0000875E 0000                       		dc.w Obj17_Action-Obj17_Index
00008760 0000                       		dc.w Obj17_Action-Obj17_Index
00008762 0000                       		dc.w Obj17_Delete-Obj17_Index
00008764 0000                       		dc.w Obj17_Display-Obj17_Index
00008766                            ; ===========================================================================
00008766                            
00008766                            Obj17_Main:				; XREF: Obj17_Index
00008766 5428 0024                  		addq.b	#2,$24(a0)
0000876A 217C 0000 0000 0004        		move.l	#Map_obj17,4(a0)
00008772 317C 4398 0002             		move.w	#$4398,2(a0)
00008778 117C 0007 0022             		move.b	#7,$22(a0)
0000877E 117C 0004 0001             		move.b	#4,1(a0)
00008784 117C 0003 0018             		move.b	#3,$18(a0)
0000878A 117C 0008 0019             		move.b	#8,$19(a0)
00008790 3428 000C                  		move.w	$C(a0),d2
00008794 3628 0008                  		move.w	8(a0),d3
00008798 1810                       		move.b	0(a0),d4
0000879A 45E8 0028                  		lea	$28(a0),a2	; move helix length to a2
0000879E 7200                       		moveq	#0,d1
000087A0 1212                       		move.b	(a2),d1		; move a2 to d1
000087A2 14FC 0000                  		move.b	#0,(a2)+
000087A6 3001                       		move.w	d1,d0
000087A8 E248                       		lsr.w	#1,d0
000087AA E948                       		lsl.w	#4,d0
000087AC 9640                       		sub.w	d0,d3
000087AE 5501                       		subq.b	#2,d1
000087B0 6500                       		bcs.s	Obj17_Action
000087B2 7C00                       		moveq	#0,d6
000087B4                            
000087B4                            Obj17_MakeHelix:
000087B4 6100 0000                  		bsr.w	SingleObjLoad
000087B8 6600                       		bne.s	Obj17_Action
000087BA 5228 0028                  		addq.b	#1,$28(a0)
000087BE 3A09                       		move.w	a1,d5
000087C0 0445 D000                  		subi.w	#$D000,d5
000087C4 EC4D                       		lsr.w	#6,d5
000087C6 0245 007F                  		andi.w	#$7F,d5
000087CA 14C5                       		move.b	d5,(a2)+
000087CC 137C 0008 0024             		move.b	#8,$24(a1)
000087D2 1284                       		move.b	d4,0(a1)
000087D4 3342 000C                  		move.w	d2,$C(a1)
000087D8 3343 0008                  		move.w	d3,8(a1)
000087DC 2368 0004 0004             		move.l	4(a0),4(a1)
000087E2 337C 4398 0002             		move.w	#$4398,2(a1)
000087E8 137C 0004 0001             		move.b	#4,1(a1)
000087EE 137C 0003 0018             		move.b	#3,$18(a1)
000087F4 137C 0008 0019             		move.b	#8,$19(a1)
000087FA 1346 003E                  		move.b	d6,$3E(a1)
000087FE 5206                       		addq.b	#1,d6
00008800 0206 0007                  		andi.b	#7,d6
00008804 0643 0010                  		addi.w	#$10,d3
00008808 B668 0008                  		cmp.w	8(a0),d3
0000880C 6600                       		bne.s	loc_7D78
0000880E 1146 003E                  		move.b	d6,$3E(a0)
00008812 5206                       		addq.b	#1,d6
00008814 0206 0007                  		andi.b	#7,d6
00008818 0643 0010                  		addi.w	#$10,d3
0000881C 5228 0028                  		addq.b	#1,$28(a0)
00008820                            
00008820                            loc_7D78:
00008820 51C9 FF92                  		dbf	d1,Obj17_MakeHelix ; repeat d1 times (helix length)
00008824                            
00008824                            Obj17_Action:				; XREF: Obj17_Index
00008824 6100 0000                  		bsr.w	Obj17_RotateSpikes
00008828 6100 0000                  		bsr.w	DisplaySprite
0000882C 6000 0000                  		bra.w	Obj17_ChkDel
00008830                            
00008830                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008830                            
00008830                            
00008830                            Obj17_RotateSpikes:			; XREF: Obj17_Action; Obj17_Display
00008830 1038 FEC1                  		move.b	($FFFFFEC1).w,d0
00008834 117C 0000 0020             		move.b	#0,$20(a0)	; make object harmless
0000883A D028 003E                  		add.b	$3E(a0),d0
0000883E 0200 0007                  		andi.b	#7,d0
00008842 1140 001A                  		move.b	d0,$1A(a0)	; change current frame
00008846 6600                       		bne.s	locret_7DA6
00008848 117C 0084 0020             		move.b	#$84,$20(a0)	; make object harmful
0000884E                            
0000884E                            locret_7DA6:
0000884E 4E75                       		rts	
00008850                            ; End of function Obj17_RotateSpikes
00008850                            
00008850                            ; ===========================================================================
00008850                            
00008850                            Obj17_ChkDel:				; XREF: Obj17_Action
00008850 3028 0008                  		move.w	8(a0),d0
00008854 0240 FF80                  		andi.w	#$FF80,d0
00008858 3238 F700                  		move.w	($FFFFF700).w,d1
0000885C 0441 0080                  		subi.w	#$80,d1
00008860 0241 FF80                  		andi.w	#$FF80,d1
00008864 9041                       		sub.w	d1,d0
00008866 0C40 0280                  		cmpi.w	#$280,d0
0000886A 6200 0000                  		bhi.w	Obj17_DelAll
0000886E 4E75                       		rts	
00008870                            ; ===========================================================================
00008870                            
00008870                            Obj17_DelAll:				; XREF: Obj17_ChkDel
00008870 7400                       		moveq	#0,d2
00008872 45E8 0028                  		lea	$28(a0),a2	; move helix length to a2
00008876 141A                       		move.b	(a2)+,d2	; move a2 to d2
00008878 5502                       		subq.b	#2,d2
0000887A 6500                       		bcs.s	Obj17_Delete
0000887C                            
0000887C                            Obj17_DelLoop:
0000887C 7000                       		moveq	#0,d0
0000887E 101A                       		move.b	(a2)+,d0
00008880 ED48                       		lsl.w	#6,d0
00008882 0680 00FF D000             		addi.l	#$FFD000,d0
00008888 2240                       		movea.l	d0,a1
0000888A 6100 0000                  		bsr.w	DeleteObject2	; delete object
0000888E 51CA FFEC                  		dbf	d2,Obj17_DelLoop ; repeat d2 times (helix length)
00008892                            
00008892                            Obj17_Delete:				; XREF: Obj17_Index
00008892 6100 0000                  		bsr.w	DeleteObject
00008896 4E75                       		rts	
00008898                            ; ===========================================================================
00008898                            
00008898                            Obj17_Display:				; XREF: Obj17_Index
00008898 6100 FF96                  		bsr.w	Obj17_RotateSpikes
0000889C 6000 0000                  		bra.w	DisplaySprite
000088A0                            ; ===========================================================================
000088A0                            ; ---------------------------------------------------------------------------
000088A0                            ; Sprite mappings - helix of spikes on a pole (GHZ)
000088A0                            ; ---------------------------------------------------------------------------
000088A0                            Map_obj17:
000088A0                            	include "_maps\obj17.asm"
000088A0                            ; ---------------------------------------------------------------------------
000088A0                            ; Sprite mappings - helix of spikes on a pole (GHZ)
000088A0                            ; ---------------------------------------------------------------------------
000088A0 0000 0000                  		dc.w byte_7E08-Map_obj17, byte_7E0E-Map_obj17
000088A4 0000 0000                  		dc.w byte_7E14-Map_obj17, byte_7E1A-Map_obj17
000088A8 0000 0000                  		dc.w byte_7E20-Map_obj17, byte_7E26-Map_obj17
000088AC 0000 0000                  		dc.w byte_7E2D+1-Map_obj17, byte_7E2C-Map_obj17
000088B0 01                         byte_7E08:	dc.b 1
000088B1 F001 0000 FC               		dc.b $F0, 1, 0,	0, $FC
000088B6 01                         byte_7E0E:	dc.b 1
000088B7 F505 0002 F8               		dc.b $F5, 5, 0,	2, $F8
000088BC 01                         byte_7E14:	dc.b 1
000088BD F805 0006 F8               		dc.b $F8, 5, 0,	6, $F8
000088C2 01                         byte_7E1A:	dc.b 1
000088C3 FB05 000A F8               		dc.b $FB, 5, 0,	$A, $F8
000088C8 01                         byte_7E20:	dc.b 1
000088C9 0001 000E FC               		dc.b 0,	1, 0, $E, $FC
000088CE 01                         byte_7E26:	dc.b 1
000088CF 0400 0010 FD               		dc.b 4,	0, 0, $10, $FD
000088D4 01                         byte_7E2C:	dc.b 1
000088D5 F400 0011 FD               byte_7E2D:	dc.b $F4, 0, 0,	$11, $FD
000088DA                            		even
000088DA                            		even
000088DA                            
000088DA                            ; ===========================================================================
000088DA                            ; ---------------------------------------------------------------------------
000088DA                            ; Object 18 - platforms	(GHZ, SYZ, SLZ)
000088DA                            ; ---------------------------------------------------------------------------
000088DA                            
000088DA                            Obj18:					; XREF: Obj_Index
000088DA 7000                       		moveq	#0,d0
000088DC 1028 0024                  		move.b	$24(a0),d0
000088E0 323B 0000                  		move.w	Obj18_Index(pc,d0.w),d1
000088E4 4EFB 1000                  		jmp	Obj18_Index(pc,d1.w)
000088E8                            ; ===========================================================================
000088E8 0000                       Obj18_Index:	dc.w Obj18_Main-Obj18_Index
000088EA 0000                       		dc.w Obj18_Solid-Obj18_Index
000088EC 0000                       		dc.w Obj18_Action2-Obj18_Index
000088EE 0000                       		dc.w Obj18_Delete-Obj18_Index
000088F0 0000                       		dc.w Obj18_Action-Obj18_Index
000088F2                            ; ===========================================================================
000088F2                            
000088F2                            Obj18_Main:				; XREF: Obj18_Index
000088F2 5428 0024                  		addq.b	#2,$24(a0)
000088F6 317C 4000 0002             		move.w	#$4000,2(a0)
000088FC 217C 0000 0000 0004        		move.l	#Map_obj18,4(a0)
00008904 117C 0020 0019             		move.b	#$20,$19(a0)
0000890A 0C38 0004 FE10             		cmpi.b	#4,($FFFFFE10).w ; check if level is SYZ
00008910 6600                       		bne.s	Obj18_NotSYZ
00008912 217C 0000 0000 0004        		move.l	#Map_obj18a,4(a0) ; SYZ	specific code
0000891A 117C 0020 0019             		move.b	#$20,$19(a0)
00008920                            
00008920                            Obj18_NotSYZ:
00008920 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
00008926 6600                       		bne.s	Obj18_NotSLZ
00008928 217C 0000 0000 0004        		move.l	#Map_obj18b,4(a0) ; SLZ	specific code
00008930 117C 0020 0019             		move.b	#$20,$19(a0)
00008936 317C 4000 0002             		move.w	#$4000,2(a0)
0000893C 117C 0003 0028             		move.b	#3,$28(a0)
00008942                            
00008942                            Obj18_NotSLZ:
00008942 117C 0004 0001             		move.b	#4,1(a0)
00008948 117C 0004 0018             		move.b	#4,$18(a0)
0000894E 3168 000C 002C             		move.w	$C(a0),$2C(a0)
00008954 3168 000C 0034             		move.w	$C(a0),$34(a0)
0000895A 3168 0008 0032             		move.w	8(a0),$32(a0)
00008960 317C 0080 0026             		move.w	#$80,$26(a0)
00008966 7200                       		moveq	#0,d1
00008968 1028 0028                  		move.b	$28(a0),d0
0000896C 0C00 000A                  		cmpi.b	#$A,d0		; is object type $A (large platform)?
00008970 6600                       		bne.s	Obj18_SetFrame	; if not, branch
00008972 5201                       		addq.b	#1,d1		; use frame #1
00008974 117C 0020 0019             		move.b	#$20,$19(a0)	; set width
0000897A                            
0000897A                            Obj18_SetFrame:
0000897A 1141 001A                  		move.b	d1,$1A(a0)	; set frame to d1
0000897E                            
0000897E                            Obj18_Solid:				; XREF: Obj18_Index
0000897E 4A28 0038                  		tst.b	$38(a0)
00008982 6700                       		beq.s	loc_7EE0
00008984 5928 0038                  		subq.b	#4,$38(a0)
00008988                            
00008988                            loc_7EE0:
00008988 7200                       		moveq	#0,d1
0000898A 1228 0019                  		move.b	$19(a0),d1
0000898E 6100 F56C                  		bsr.w	PlatformObject
00008992                            
00008992                            Obj18_Action:				; XREF: Obj18_Index
00008992 6100 0000                  		bsr.w	Obj18_Move
00008996 6100 0000                  		bsr.w	Obj18_Nudge
0000899A 6100 0000                  		bsr.w	DisplaySprite
0000899E 6000 0000                  		bra.w	Obj18_ChkDel
000089A2                            ; ===========================================================================
000089A2                            
000089A2                            Obj18_Action2:				; XREF: Obj18_Index
000089A2 0C28 0040 0038             		cmpi.b	#$40,$38(a0)
000089A8 6700                       		beq.s	loc_7F06
000089AA 5828 0038                  		addq.b	#4,$38(a0)
000089AE                            
000089AE                            loc_7F06:
000089AE 7200                       		moveq	#0,d1
000089B0 1228 0019                  		move.b	$19(a0),d1
000089B4 6100 F6BA                  		bsr.w	ExitPlatform
000089B8 3F28 0008                  		move.w	8(a0),-(sp)
000089BC 6100 0000                  		bsr.w	Obj18_Move
000089C0 6100 0000                  		bsr.w	Obj18_Nudge
000089C4 341F                       		move.w	(sp)+,d2
000089C6 6100 FC12                  		bsr.w	MvSonicOnPtfm2
000089CA 6100 0000                  		bsr.w	DisplaySprite
000089CE 6000 0000                  		bra.w	Obj18_ChkDel
000089D2                            
000089D2 4E75                       		rts
000089D4                            
000089D4                            ; ---------------------------------------------------------------------------
000089D4                            ; Subroutine to	move platform slightly when you	stand on it
000089D4                            ; ---------------------------------------------------------------------------
000089D4                            
000089D4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000089D4                            
000089D4                            
000089D4                            Obj18_Nudge:				; XREF: Obj18_Action; Obj18_Action2
000089D4 1028 0038                  		move.b	$38(a0),d0
000089D8 6100 A9FA                  		bsr.w	CalcSine
000089DC 323C 0400                  		move.w	#$400,d1
000089E0 C1C1                       		muls.w	d1,d0
000089E2 4840                       		swap	d0
000089E4 D068 002C                  		add.w	$2C(a0),d0
000089E8 3140 000C                  		move.w	d0,$C(a0)
000089EC 4E75                       		rts	
000089EE                            ; End of function Obj18_Nudge
000089EE                            
000089EE                            ; ---------------------------------------------------------------------------
000089EE                            ; Subroutine to	move platforms
000089EE                            ; ---------------------------------------------------------------------------
000089EE                            
000089EE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000089EE                            
000089EE                            
000089EE                            Obj18_Move:				; XREF: Obj18_Action; Obj18_Action2
000089EE 7000                       		moveq	#0,d0
000089F0 1028 0028                  		move.b	$28(a0),d0
000089F4 0240 000F                  		andi.w	#$F,d0
000089F8 D040                       		add.w	d0,d0
000089FA 323B 0000                  		move.w	Obj18_TypeIndex(pc,d0.w),d1
000089FE 4EFB 1000                  		jmp	Obj18_TypeIndex(pc,d1.w)
00008A02                            ; End of function Obj18_Move
00008A02                            
00008A02                            ; ===========================================================================
00008A02 0000 0000                  Obj18_TypeIndex:dc.w Obj18_Type00-Obj18_TypeIndex, Obj18_Type01-Obj18_TypeIndex
00008A06 0000 0000                  		dc.w Obj18_Type02-Obj18_TypeIndex, Obj18_Type03-Obj18_TypeIndex
00008A0A 0000 0000                  		dc.w Obj18_Type04-Obj18_TypeIndex, Obj18_Type05-Obj18_TypeIndex
00008A0E 0000 0000                  		dc.w Obj18_Type06-Obj18_TypeIndex, Obj18_Type07-Obj18_TypeIndex
00008A12 0000 0000                  		dc.w Obj18_Type08-Obj18_TypeIndex, Obj18_Type00-Obj18_TypeIndex
00008A16 0000 0000                  		dc.w Obj18_Type0A-Obj18_TypeIndex, Obj18_Type0B-Obj18_TypeIndex
00008A1A 0000                       		dc.w Obj18_Type0C-Obj18_TypeIndex
00008A1C                            ; ===========================================================================
00008A1C                            
00008A1C                            Obj18_Type00:
00008A1C 4E75                       		rts			; platform 00 doesn't move
00008A1E                            ; ===========================================================================
00008A1E                            
00008A1E                            Obj18_Type05:
00008A1E 3028 0032                  		move.w	$32(a0),d0
00008A22 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
00008A26 4401                       		neg.b	d1		; reverse platform-motion
00008A28 0601 0040                  		addi.b	#$40,d1
00008A2C 6000                       		bra.s	Obj18_01_Move
00008A2E                            ; ===========================================================================
00008A2E                            
00008A2E                            Obj18_Type01:
00008A2E 3028 0032                  		move.w	$32(a0),d0
00008A32 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
00008A36 0401 0040                  		subi.b	#$40,d1
00008A3A                            
00008A3A                            Obj18_01_Move:
00008A3A 4881                       		ext.w	d1
00008A3C D041                       		add.w	d1,d0
00008A3E 3140 0008                  		move.w	d0,8(a0)	; change position on x-axis
00008A42 6000 0000                  		bra.w	Obj18_ChgMotion
00008A46                            ; ===========================================================================
00008A46                            
00008A46                            Obj18_Type0C:
00008A46 3028 0034                  		move.w	$34(a0),d0
00008A4A 1238 FE6C                  		move.b	($FFFFFE6C).w,d1 ; load	platform-motion	variable
00008A4E 4401                       		neg.b	d1		; reverse platform-motion
00008A50 0601 0030                  		addi.b	#$30,d1
00008A54 6000                       		bra.s	Obj18_02_Move
00008A56                            ; ===========================================================================
00008A56                            
00008A56                            Obj18_Type0B:
00008A56 3028 0034                  		move.w	$34(a0),d0
00008A5A 1238 FE6C                  		move.b	($FFFFFE6C).w,d1 ; load	platform-motion	variable
00008A5E 0401 0030                  		subi.b	#$30,d1
00008A62 6000                       		bra.s	Obj18_02_Move
00008A64                            ; ===========================================================================
00008A64                            
00008A64                            Obj18_Type06:
00008A64 3028 0034                  		move.w	$34(a0),d0
00008A68 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
00008A6C 4401                       		neg.b	d1		; reverse platform-motion
00008A6E 0601 0040                  		addi.b	#$40,d1
00008A72 6000                       		bra.s	Obj18_02_Move
00008A74                            ; ===========================================================================
00008A74                            
00008A74                            Obj18_Type02:
00008A74 3028 0034                  		move.w	$34(a0),d0
00008A78 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
00008A7C 0401 0040                  		subi.b	#$40,d1
00008A80                            
00008A80                            Obj18_02_Move:
00008A80 4881                       		ext.w	d1
00008A82 D041                       		add.w	d1,d0
00008A84 3140 002C                  		move.w	d0,$2C(a0)	; change position on y-axis
00008A88 6000 0000                  		bra.w	Obj18_ChgMotion
00008A8C                            ; ===========================================================================
00008A8C                            
00008A8C                            Obj18_Type03:
00008A8C 4A68 003A                  		tst.w	$3A(a0)		; is time delay	set?
00008A90 6600                       		bne.s	Obj18_03_Wait	; if yes, branch
00008A92 0828 0003 0022             		btst	#3,$22(a0)	; is Sonic standing on the platform?
00008A98 6700                       		beq.s	Obj18_03_NoMove	; if not, branch
00008A9A 317C 001E 003A             		move.w	#30,$3A(a0)	; set time delay to 0.5	seconds
00008AA0                            
00008AA0                            Obj18_03_NoMove:
00008AA0 4E75                       		rts	
00008AA2                            ; ===========================================================================
00008AA2                            
00008AA2                            Obj18_03_Wait:
00008AA2 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time
00008AA6 66F8                       		bne.s	Obj18_03_NoMove	; if time is > 0, branch
00008AA8 317C 0020 003A             		move.w	#32,$3A(a0)
00008AAE 5228 0028                  		addq.b	#1,$28(a0)	; change to type 04 (falling)
00008AB2 4E75                       		rts	
00008AB4                            ; ===========================================================================
00008AB4                            
00008AB4                            Obj18_Type04:
00008AB4 4A68 003A                  		tst.w	$3A(a0)
00008AB8 6700                       		beq.s	loc_8048
00008ABA 5368 003A                  		subq.w	#1,$3A(a0)
00008ABE 6600                       		bne.s	loc_8048
00008AC0 0828 0003 0022             		btst	#3,$22(a0)
00008AC6 6700                       		beq.s	loc_8042
00008AC8 08E9 0001 0022             		bset	#1,$22(a1)
00008ACE 08A9 0003 0022             		bclr	#3,$22(a1)
00008AD4 137C 0002 0024             		move.b	#2,$24(a1)
00008ADA 08A8 0003 0022             		bclr	#3,$22(a0)
00008AE0 4228 0025                  		clr.b	$25(a0)
00008AE4 3368 0012 0012             		move.w	$12(a0),$12(a1)
00008AEA                            
00008AEA                            loc_8042:
00008AEA 117C 0008 0024             		move.b	#8,$24(a0)
00008AF0                            
00008AF0                            loc_8048:
00008AF0 2628 002C                  		move.l	$2C(a0),d3
00008AF4 3028 0012                  		move.w	$12(a0),d0
00008AF8 48C0                       		ext.l	d0
00008AFA E180                       		asl.l	#8,d0
00008AFC D680                       		add.l	d0,d3
00008AFE 2143 002C                  		move.l	d3,$2C(a0)
00008B02 0668 0038 0012             		addi.w	#$38,$12(a0)
00008B08 3038 F72E                  		move.w	($FFFFF72E).w,d0
00008B0C 0640 00E0                  		addi.w	#$E0,d0
00008B10 B068 002C                  		cmp.w	$2C(a0),d0
00008B14 6400                       		bcc.s	locret_8074
00008B16 117C 0006 0024             		move.b	#6,$24(a0)
00008B1C                            
00008B1C                            locret_8074:
00008B1C 4E75                       		rts	
00008B1E                            ; ===========================================================================
00008B1E                            
00008B1E                            Obj18_Type07:
00008B1E 4A68 003A                  		tst.w	$3A(a0)		; is time delay	set?
00008B22 6600                       		bne.s	Obj18_07_Wait	; if yes, branch
00008B24 45F8 F7E0                  		lea	($FFFFF7E0).w,a2 ; load	switch statuses
00008B28 7000                       		moveq	#0,d0
00008B2A 1028 0028                  		move.b	$28(a0),d0	; move object type ($x7) to d0
00008B2E E848                       		lsr.w	#4,d0		; divide d0 by 8, round	down
00008B30 4A32 0000                  		tst.b	(a2,d0.w)	; has switch no. d0 been pressed?
00008B34 6700                       		beq.s	Obj18_07_NoMove	; if not, branch
00008B36 317C 003C 003A             		move.w	#60,$3A(a0)	; set time delay to 1 second
00008B3C                            
00008B3C                            Obj18_07_NoMove:
00008B3C 4E75                       		rts	
00008B3E                            ; ===========================================================================
00008B3E                            
00008B3E                            Obj18_07_Wait:
00008B3E 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time delay
00008B42 66F8                       		bne.s	Obj18_07_NoMove	; if time is > 0, branch
00008B44 5228 0028                  		addq.b	#1,$28(a0)	; change to type 08
00008B48 4E75                       		rts	
00008B4A                            ; ===========================================================================
00008B4A                            
00008B4A                            Obj18_Type08:
00008B4A 5568 002C                  		subq.w	#2,$2C(a0)	; move platform	up
00008B4E 3028 0034                  		move.w	$34(a0),d0
00008B52 0440 0200                  		subi.w	#$200,d0
00008B56 B068 002C                  		cmp.w	$2C(a0),d0	; has platform moved $200 pixels?
00008B5A 6600                       		bne.s	Obj18_08_NoStop	; if not, branch
00008B5C 4228 0028                  		clr.b	$28(a0)		; change to type 00 (stop moving)
00008B60                            
00008B60                            Obj18_08_NoStop:
00008B60 4E75                       		rts	
00008B62                            ; ===========================================================================
00008B62                            
00008B62                            Obj18_Type0A:
00008B62 3028 0034                  		move.w	$34(a0),d0
00008B66 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
00008B6A 0401 0040                  		subi.b	#$40,d1
00008B6E 4881                       		ext.w	d1
00008B70 E241                       		asr.w	#1,d1
00008B72 D041                       		add.w	d1,d0
00008B74 3140 002C                  		move.w	d0,$2C(a0)	; change position on y-axis
00008B78                            
00008B78                            Obj18_ChgMotion:
00008B78 1178 FE78 0026             		move.b	($FFFFFE78).w,$26(a0) ;	update platform-movement variable
00008B7E 4E75                       		rts	
00008B80                            ; ===========================================================================
00008B80                            
00008B80                            Obj18_ChkDel:				; XREF: Obj18_Action; Obj18_Action2
00008B80 3028 0032                  		move.w	$32(a0),d0
00008B84 0240 FF80                  		andi.w	#$FF80,d0
00008B88 3238 F700                  		move.w	($FFFFF700).w,d1
00008B8C 0441 0080                  		subi.w	#$80,d1
00008B90 0241 FF80                  		andi.w	#$FF80,d1
00008B94 9041                       		sub.w	d1,d0
00008B96 0C40 0280                  		cmpi.w	#$280,d0
00008B9A 6200                       		bhi.s	Obj18_Delete
00008B9C 4E75                       		rts	
00008B9E                            ; ===========================================================================
00008B9E                            
00008B9E                            Obj18_Delete:				; XREF: Obj18_Index
00008B9E 6000 0000                  		bra.w	DeleteObject
00008BA2                            ; ===========================================================================
00008BA2                            ; ---------------------------------------------------------------------------
00008BA2                            ; Sprite mappings - unused
00008BA2                            ; ---------------------------------------------------------------------------
00008BA2                            Map_obj18x:
00008BA2                            	include "_maps\obj18x.asm"
00008BA2                            ; ---------------------------------------------------------------------------
00008BA2                            ; Sprite mappings - unused
00008BA2                            ; ---------------------------------------------------------------------------
00008BA2 0000                       		dc.w byte_80FE-Map_obj18x
00008BA4 0000                       		dc.w byte_8109-Map_obj18x
00008BA6 02                         byte_80FE:	dc.b 2
00008BA7 F40B 003C E8               		dc.b $F4, $B, 0, $3C, $E8
00008BAC F40B 0048 00               		dc.b $F4, $B, 0, $48, 0
00008BB1 0A                         byte_8109:	dc.b $A
00008BB2 F40F 00CA E0               		dc.b $F4, $F, 0, $CA, $E0
00008BB7 040F 00DA E0               		dc.b 4,	$F, 0, $DA, $E0
00008BBC 240F 00DA E0               		dc.b $24, $F, 0, $DA, $E0
00008BC1 440F 00DA E0               		dc.b $44, $F, 0, $DA, $E0
00008BC6 640F 00DA E0               		dc.b $64, $F, 0, $DA, $E0
00008BCB F40F 08CA 00               		dc.b $F4, $F, 8, $CA, 0
00008BD0 040F 08DA 00               		dc.b 4,	$F, 8, $DA, 0
00008BD5 240F 08DA 00               		dc.b $24, $F, 8, $DA, 0
00008BDA 440F 08DA 00               		dc.b $44, $F, 8, $DA, 0
00008BDF 640F 08DA 00               		dc.b $64, $F, 8, $DA, 0
00008BE4                            		even
00008BE4                            		even
00008BE4                            
00008BE4                            ; ---------------------------------------------------------------------------
00008BE4                            ; Sprite mappings - GHZ	platforms
00008BE4                            ; ---------------------------------------------------------------------------
00008BE4                            Map_obj18:
00008BE4                            	include "_maps\obj18ghz.asm"
00008BE4                            ; ---------------------------------------------------------------------------
00008BE4                            ; Sprite mappings - GHZ	platforms
00008BE4                            ; ---------------------------------------------------------------------------
00008BE4 0000                       		dc.w byte_8140-Map_obj18
00008BE6 0000                       		dc.w byte_8155-Map_obj18
00008BE8 04                         byte_8140:	dc.b 4
00008BE9 F40B 003B E0               		dc.b $F4, $B, 0, $3B, $E0 ; small platform
00008BEE F407 003F F8               		dc.b $F4, 7, 0,	$3F, $F8
00008BF3 F407 003F 08               		dc.b $F4, 7, 0,	$3F, 8
00008BF8 F403 0047 18               		dc.b $F4, 3, 0,	$47, $18
00008BFD 0A                         byte_8155:	dc.b $A
00008BFE F40F 00C5 E0               		dc.b $F4, $F, 0, $C5, $E0 ; large column platform
00008C03 040F 00D5 E0               		dc.b 4,	$F, 0, $D5, $E0
00008C08 240F 00D5 E0               		dc.b $24, $F, 0, $D5, $E0
00008C0D 440F 00D5 E0               		dc.b $44, $F, 0, $D5, $E0
00008C12 640F 00D5 E0               		dc.b $64, $F, 0, $D5, $E0
00008C17 F40F 08C5 00               		dc.b $F4, $F, 8, $C5, 0
00008C1C 040F 08D5 00               		dc.b 4,	$F, 8, $D5, 0
00008C21 240F 08D5 00               		dc.b $24, $F, 8, $D5, 0
00008C26 440F 08D5 00               		dc.b $44, $F, 8, $D5, 0
00008C2B 640F 08D5 00               		dc.b $64, $F, 8, $D5, 0
00008C30                            		even
00008C30                            		even
00008C30                            
00008C30                            ; ---------------------------------------------------------------------------
00008C30                            ; Sprite mappings - SYZ	platforms
00008C30                            ; ---------------------------------------------------------------------------
00008C30                            Map_obj18a:
00008C30                            	include "_maps\obj18syz.asm"
00008C30                            ; ---------------------------------------------------------------------------
00008C30                            ; Sprite mappings - SYZ	platforms
00008C30                            ; ---------------------------------------------------------------------------
00008C30 0000                       		dc.w byte_818A-Map_obj18a
00008C32 03                         byte_818A:	dc.b 3
00008C33 F60B 0049 E0               		dc.b $F6, $B, 0, $49, $E0
00008C38 F607 0051 F8               		dc.b $F6, 7, 0,	$51, $F8
00008C3D F60B 0055 08               		dc.b $F6, $B, 0, $55, 8
00008C42                            		even
00008C42                            		even
00008C42                            
00008C42                            ; ---------------------------------------------------------------------------
00008C42                            ; Sprite mappings - SLZ	platforms
00008C42                            ; ---------------------------------------------------------------------------
00008C42                            Map_obj18b:
00008C42                            	include "_maps\obj18slz.asm"
00008C42                            ; ---------------------------------------------------------------------------
00008C42                            ; Sprite mappings - SLZ	platforms
00008C42                            ; ---------------------------------------------------------------------------
00008C42 0000                       		dc.w byte_819C-Map_obj18b
00008C44 02                         byte_819C:	dc.b 2
00008C45 F80F 0021 E0               		dc.b $F8, $F, 0, $21, $E0
00008C4A F80F 0021 00               		dc.b $F8, $F, 0, $21, 0
00008C50 00                         		even
00008C50 00                         		even
00008C50                            
00008C50                            ; ===========================================================================
00008C50                            ; ---------------------------------------------------------------------------
00008C50                            ; Object 19 - blank
00008C50                            ; ---------------------------------------------------------------------------
00008C50                            
00008C50                            Obj19:					; XREF: Obj_Index
00008C50 4E75                       		rts	
00008C52                            ; ===========================================================================
00008C52                            ; ---------------------------------------------------------------------------
00008C52                            ; Sprite mappings - swinging ball on a chain from GHZ boss
00008C52                            ; ---------------------------------------------------------------------------
00008C52                            Map_obj48:
00008C52                            	include "_maps\obj48.asm"
00008C52                            ; ---------------------------------------------------------------------------
00008C52                            ; Sprite mappings - swinging ball on a chain from GHZ boss
00008C52                            ; ---------------------------------------------------------------------------
00008C52 0000 0000                  		dc.w byte_81B2-Map_obj48, byte_81D1-Map_obj48
00008C56 0000 0000                  		dc.w byte_81E6-Map_obj48, byte_81FB-Map_obj48
00008C5A 06                         byte_81B2:	dc.b 6
00008C5B F004 0024 F0               		dc.b $F0, 4, 0,	$24, $F0
00008C60 F804 1024 F0               		dc.b $F8, 4, $10, $24, $F0
00008C65 E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
00008C6A E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
00008C6F 000A 1000 E8               		dc.b 0,	$A, $10, 0, $E8
00008C74 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
00008C79 04                         byte_81D1:	dc.b 4
00008C7A E80A 0009 E8               		dc.b $E8, $A, 0, 9, $E8
00008C7F E80A 0809 00               		dc.b $E8, $A, 8, 9, 0
00008C84 000A 1009 E8               		dc.b 0,	$A, $10, 9, $E8
00008C89 000A 1809 00               		dc.b 0,	$A, $18, 9, 0
00008C8E 04                         byte_81E6:	dc.b 4
00008C8F E80A 0012 E8               		dc.b $E8, $A, 0, $12, $E8
00008C94 E80A 001B 00               		dc.b $E8, $A, 0, $1B, 0
00008C99 000A 181B E8               		dc.b 0,	$A, $18, $1B, $E8
00008C9E 000A 1812 00               		dc.b 0,	$A, $18, $12, 0
00008CA3 04                         byte_81FB:	dc.b 4
00008CA4 E80A 081B E8               		dc.b $E8, $A, 8, $1B, $E8
00008CA9 E80A 0812 00               		dc.b $E8, $A, 8, $12, 0
00008CAE 000A 1012 E8               		dc.b 0,	$A, $10, $12, $E8
00008CB3 000A 101B 00               		dc.b 0,	$A, $10, $1B, 0
00008CB8                            		even
00008CB8                            		even
00008CB8                            
00008CB8                            ; ===========================================================================
00008CB8                            ; ---------------------------------------------------------------------------
00008CB8                            ; Object 1A - GHZ collapsing ledge
00008CB8                            ; ---------------------------------------------------------------------------
00008CB8                            
00008CB8                            Obj1A:					; XREF: Obj_Index
00008CB8 7000                       		moveq	#0,d0
00008CBA 1028 0024                  		move.b	$24(a0),d0
00008CBE 323B 0000                  		move.w	Obj1A_Index(pc,d0.w),d1
00008CC2 4EFB 1000                  		jmp	Obj1A_Index(pc,d1.w)
00008CC6                            ; ===========================================================================
00008CC6 0000 0000                  Obj1A_Index:	dc.w Obj1A_Main-Obj1A_Index, Obj1A_ChkTouch-Obj1A_Index
00008CCA 0000 0000                  		dc.w Obj1A_Touch-Obj1A_Index, Obj1A_Display-Obj1A_Index
00008CCE 0000 0000                  		dc.w Obj1A_Delete-Obj1A_Index, Obj1A_WalkOff-Obj1A_Index
00008CD2                            ; ===========================================================================
00008CD2                            
00008CD2                            Obj1A_Main:				; XREF: Obj1A_Index
00008CD2 5428 0024                  		addq.b	#2,$24(a0)
00008CD6 217C 0000 0000 0004        		move.l	#Map_obj1A,4(a0)
00008CDE 317C 4000 0002             		move.w	#$4000,2(a0)
00008CE4 0028 0004 0001             		ori.b	#4,1(a0)
00008CEA 117C 0004 0018             		move.b	#4,$18(a0)
00008CF0 117C 0007 0038             		move.b	#7,$38(a0)	; set time delay for collapse
00008CF6 117C 0064 0019             		move.b	#$64,$19(a0)
00008CFC 1168 0028 001A             		move.b	$28(a0),$1A(a0)
00008D02 117C 0038 0016             		move.b	#$38,$16(a0)
00008D08 08E8 0004 0001             		bset	#4,1(a0)
00008D0E                            
00008D0E                            Obj1A_ChkTouch:				; XREF: Obj1A_Index
00008D0E 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	platform?
00008D12 6700                       		beq.s	Obj1A_Slope	; if not, branch
00008D14 4A28 0038                  		tst.b	$38(a0)		; has time reached zero?
00008D18 6700 0000                  		beq.w	Obj1A_Collapse	; if yes, branch
00008D1C 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
00008D20                            
00008D20                            Obj1A_Slope:
00008D20 323C 0030                  		move.w	#$30,d1
00008D24 45F9 0000 0000             		lea	(Obj1A_SlopeData).l,a2
00008D2A 6100 F2A4                  		bsr.w	SlopeObject
00008D2E 6000 0000                  		bra.w	MarkObjGone
00008D32                            ; ===========================================================================
00008D32                            
00008D32                            Obj1A_Touch:				; XREF: Obj1A_Index
00008D32 4A28 0038                  		tst.b	$38(a0)
00008D36 6700 0000                  		beq.w	loc_847A
00008D3A 117C 0001 003A             		move.b	#1,$3A(a0)	; set object as	"touched"
00008D40 5328 0038                  		subq.b	#1,$38(a0)
00008D44                            
00008D44                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008D44                            
00008D44                            
00008D44                            Obj1A_WalkOff:				; XREF: Obj1A_Index
00008D44 323C 0030                  		move.w	#$30,d1
00008D48 6100 F326                  		bsr.w	ExitPlatform
00008D4C 323C 0030                  		move.w	#$30,d1
00008D50 45F9 0000 0000             		lea	(Obj1A_SlopeData).l,a2
00008D56 3428 0008                  		move.w	8(a0),d2
00008D5A 6100 0000                  		bsr.w	SlopeObject2
00008D5E 6000 0000                  		bra.w	MarkObjGone
00008D62                            ; End of function Obj1A_WalkOff
00008D62                            
00008D62                            ; ===========================================================================
00008D62                            
00008D62                            Obj1A_Display:				; XREF: Obj1A_Index
00008D62 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
00008D66 6700                       		beq.s	Obj1A_TimeZero	; if yes, branch
00008D68 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
00008D6C 6600 0000                  		bne.w	loc_82D0	; if yes, branch
00008D70 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
00008D74 6000 0000                  		bra.w	DisplaySprite
00008D78                            ; ===========================================================================
00008D78                            
00008D78                            loc_82D0:				; XREF: Obj1A_Display
00008D78 5328 0038                  		subq.b	#1,$38(a0)
00008D7C 6100 FFC6                  		bsr.w	Obj1A_WalkOff
00008D80 43F8 D000                  		lea	($FFFFD000).w,a1
00008D84 0829 0003 0022             		btst	#3,$22(a1)
00008D8A 6700                       		beq.s	loc_82FC
00008D8C 4A28 0038                  		tst.b	$38(a0)
00008D90 6600                       		bne.s	locret_8308
00008D92 08A9 0003 0022             		bclr	#3,$22(a1)
00008D98 08A9 0005 0022             		bclr	#5,$22(a1)
00008D9E 137C 0001 001D             		move.b	#1,$1D(a1)
00008DA4                            
00008DA4                            loc_82FC:
00008DA4 117C 0000 003A             		move.b	#0,$3A(a0)
00008DAA 117C 0006 0024             		move.b	#6,$24(a0)	; run "Obj1A_Display" routine
00008DB0                            
00008DB0                            locret_8308:
00008DB0 4E75                       		rts	
00008DB2                            ; ===========================================================================
00008DB2                            
00008DB2                            Obj1A_TimeZero:				; XREF: Obj1A_Display
00008DB2 6100 0000                  		bsr.w	ObjectFall
00008DB6 6100 0000                  		bsr.w	DisplaySprite
00008DBA 4A28 0001                  		tst.b	1(a0)
00008DBE 6A00                       		bpl.s	Obj1A_Delete
00008DC0 4E75                       		rts	
00008DC2                            ; ===========================================================================
00008DC2                            
00008DC2                            Obj1A_Delete:				; XREF: Obj1A_Index
00008DC2 6100 0000                  		bsr.w	DeleteObject
00008DC6 4E75                       		rts	
00008DC8                            ; ===========================================================================
00008DC8                            ; ---------------------------------------------------------------------------
00008DC8                            ; Object 53 - collapsing floors	(MZ, SLZ, SBZ)
00008DC8                            ; ---------------------------------------------------------------------------
00008DC8                            
00008DC8                            Obj53:					; XREF: Obj_Index
00008DC8 7000                       		moveq	#0,d0
00008DCA 1028 0024                  		move.b	$24(a0),d0
00008DCE 323B 0000                  		move.w	Obj53_Index(pc,d0.w),d1
00008DD2 4EFB 1000                  		jmp	Obj53_Index(pc,d1.w)
00008DD6                            ; ===========================================================================
00008DD6 0000 0000                  Obj53_Index:	dc.w Obj53_Main-Obj53_Index, Obj53_ChkTouch-Obj53_Index
00008DDA 0000 0000                  		dc.w Obj53_Touch-Obj53_Index, Obj53_Display-Obj53_Index
00008DDE 0000 0000                  		dc.w Obj53_Delete-Obj53_Index, Obj53_WalkOff-Obj53_Index
00008DE2                            ; ===========================================================================
00008DE2                            
00008DE2                            Obj53_Main:				; XREF: Obj53_Index
00008DE2 5428 0024                  		addq.b	#2,$24(a0)
00008DE6 217C 0000 0000 0004        		move.l	#Map_obj53,4(a0)
00008DEE 317C 42B8 0002             		move.w	#$42B8,2(a0)
00008DF4 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
00008DFA 6600                       		bne.s	Obj53_NotSLZ
00008DFC 317C 44E0 0002             		move.w	#$44E0,2(a0)	; SLZ specific code
00008E02 5428 001A                  		addq.b	#2,$1A(a0)
00008E06                            
00008E06                            Obj53_NotSLZ:
00008E06 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
00008E0C 6600                       		bne.s	Obj53_NotSBZ
00008E0E 317C 43F5 0002             		move.w	#$43F5,2(a0)	; SBZ specific code
00008E14                            
00008E14                            Obj53_NotSBZ:
00008E14 0028 0004 0001             		ori.b	#4,1(a0)
00008E1A 117C 0004 0018             		move.b	#4,$18(a0)
00008E20 117C 0007 0038             		move.b	#7,$38(a0)
00008E26 117C 0044 0019             		move.b	#$44,$19(a0)
00008E2C                            
00008E2C                            Obj53_ChkTouch:				; XREF: Obj53_Index
00008E2C 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
00008E30 6700                       		beq.s	Obj53_Solid	; if not, branch
00008E32 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
00008E36 6700 0000                  		beq.w	Obj53_Collapse	; if yes, branch
00008E3A 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
00008E3E                            
00008E3E                            Obj53_Solid:
00008E3E 323C 0020                  		move.w	#$20,d1
00008E42 6100 F0B8                  		bsr.w	PlatformObject
00008E46 4A28 0028                  		tst.b	$28(a0)
00008E4A 6A00                       		bpl.s	Obj53_MarkAsGone
00008E4C 0829 0003 0022             		btst	#3,$22(a1)
00008E52 6700                       		beq.s	Obj53_MarkAsGone
00008E54 08A8 0000 0001             		bclr	#0,1(a0)
00008E5A 3029 0008                  		move.w	8(a1),d0
00008E5E 9068 0008                  		sub.w	8(a0),d0
00008E62 6400                       		bcc.s	Obj53_MarkAsGone
00008E64 08E8 0000 0001             		bset	#0,1(a0)
00008E6A                            
00008E6A                            Obj53_MarkAsGone:
00008E6A 6000 0000                  		bra.w	MarkObjGone
00008E6E                            ; ===========================================================================
00008E6E                            
00008E6E                            Obj53_Touch:				; XREF: Obj53_Index
00008E6E 4A28 0038                  		tst.b	$38(a0)
00008E72 6700 0000                  		beq.w	loc_8458
00008E76 117C 0001 003A             		move.b	#1,$3A(a0)	; set object as	"touched"
00008E7C 5328 0038                  		subq.b	#1,$38(a0)
00008E80                            
00008E80                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008E80                            
00008E80                            
00008E80                            Obj53_WalkOff:				; XREF: Obj53_Index
00008E80 323C 0020                  		move.w	#$20,d1
00008E84 6100 F1EA                  		bsr.w	ExitPlatform
00008E88 3428 0008                  		move.w	8(a0),d2
00008E8C 6100 F74C                  		bsr.w	MvSonicOnPtfm2
00008E90 6000 0000                  		bra.w	MarkObjGone
00008E94                            ; End of function Obj53_WalkOff
00008E94                            
00008E94                            ; ===========================================================================
00008E94                            
00008E94                            Obj53_Display:				; XREF: Obj53_Index
00008E94 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
00008E98 6700                       		beq.s	Obj53_TimeZero	; if yes, branch
00008E9A 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
00008E9E 6600 0000                  		bne.w	loc_8402	; if yes, branch
00008EA2 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
00008EA6 6000 0000                  		bra.w	DisplaySprite
00008EAA                            ; ===========================================================================
00008EAA                            
00008EAA                            loc_8402:
00008EAA 5328 0038                  		subq.b	#1,$38(a0)
00008EAE 6100 FFD0                  		bsr.w	Obj53_WalkOff
00008EB2 43F8 D000                  		lea	($FFFFD000).w,a1
00008EB6 0829 0003 0022             		btst	#3,$22(a1)
00008EBC 6700                       		beq.s	loc_842E
00008EBE 4A28 0038                  		tst.b	$38(a0)
00008EC2 6600                       		bne.s	locret_843A
00008EC4 08A9 0003 0022             		bclr	#3,$22(a1)
00008ECA 08A9 0005 0022             		bclr	#5,$22(a1)
00008ED0 137C 0001 001D             		move.b	#1,$1D(a1)
00008ED6                            
00008ED6                            loc_842E:
00008ED6 117C 0000 003A             		move.b	#0,$3A(a0)
00008EDC 117C 0006 0024             		move.b	#6,$24(a0)	; run "Obj53_Display" routine
00008EE2                            
00008EE2                            locret_843A:
00008EE2 4E75                       		rts	
00008EE4                            ; ===========================================================================
00008EE4                            
00008EE4                            Obj53_TimeZero:				; XREF: Obj53_Display
00008EE4 6100 0000                  		bsr.w	ObjectFall
00008EE8 6100 0000                  		bsr.w	DisplaySprite
00008EEC 4A28 0001                  		tst.b	1(a0)
00008EF0 6A00                       		bpl.s	Obj53_Delete
00008EF2 4E75                       		rts	
00008EF4                            ; ===========================================================================
00008EF4                            
00008EF4                            Obj53_Delete:				; XREF: Obj53_Index
00008EF4 6100 0000                  		bsr.w	DeleteObject
00008EF8 4E75                       		rts	
00008EFA                            ; ===========================================================================
00008EFA                            
00008EFA                            Obj53_Collapse:				; XREF: Obj53_ChkTouch
00008EFA 117C 0000 003A             		move.b	#0,$3A(a0)
00008F00                            
00008F00                            loc_8458:				; XREF: Obj53_Touch
00008F00 49F9 0000 0000             		lea	(Obj53_Data2).l,a4
00008F06 0828 0000 0028             		btst	#0,$28(a0)
00008F0C 6700                       		beq.s	loc_846C
00008F0E 49F9 0000 0000             		lea	(Obj53_Data3).l,a4
00008F14                            
00008F14                            loc_846C:
00008F14 7207                       		moveq	#7,d1
00008F16 5228 001A                  		addq.b	#1,$1A(a0)
00008F1A 6000                       		bra.s	loc_8486
00008F1C                            ; ===========================================================================
00008F1C                            
00008F1C                            Obj1A_Collapse:				; XREF: Obj1A_ChkTouch
00008F1C 117C 0000 003A             		move.b	#0,$3A(a0)
00008F22                            
00008F22                            loc_847A:				; XREF: Obj1A_Touch
00008F22 49F9 0000 0000             		lea	(Obj53_Data1).l,a4
00008F28 7218                       		moveq	#$18,d1
00008F2A 5428 001A                  		addq.b	#2,$1A(a0)
00008F2E                            
00008F2E                            loc_8486:				; XREF: Obj53_Collapse
00008F2E 7000                       		moveq	#0,d0
00008F30 1028 001A                  		move.b	$1A(a0),d0
00008F34 D040                       		add.w	d0,d0
00008F36 2668 0004                  		movea.l	4(a0),a3
00008F3A D6F3 0000                  		adda.w	(a3,d0.w),a3
00008F3E 524B                       		addq.w	#1,a3
00008F40 08E8 0005 0001             		bset	#5,1(a0)
00008F46 1810                       		move.b	0(a0),d4
00008F48 1A28 0001                  		move.b	1(a0),d5
00008F4C 2248                       		movea.l	a0,a1
00008F4E 6000                       		bra.s	loc_84B2
00008F50                            ; ===========================================================================
00008F50                            
00008F50                            loc_84AA:
00008F50 6100 0000                  		bsr.w	SingleObjLoad
00008F54 6600                       		bne.s	loc_84F2
00008F56 5A4B                       		addq.w	#5,a3
00008F58                            
00008F58                            loc_84B2:
00008F58 137C 0006 0024             		move.b	#6,$24(a1)
00008F5E 1284                       		move.b	d4,0(a1)
00008F60 234B 0004                  		move.l	a3,4(a1)
00008F64 1345 0001                  		move.b	d5,1(a1)
00008F68 3368 0008 0008             		move.w	8(a0),8(a1)
00008F6E 3368 000C 000C             		move.w	$C(a0),$C(a1)
00008F74 3368 0002 0002             		move.w	2(a0),2(a1)
00008F7A 1368 0018 0018             		move.b	$18(a0),$18(a1)
00008F80 1368 0019 0019             		move.b	$19(a0),$19(a1)
00008F86 135C 0038                  		move.b	(a4)+,$38(a1)
00008F8A B3C8                       		cmpa.l	a0,a1
00008F8C 6400                       		bcc.s	loc_84EE
00008F8E 6100 0000                  		bsr.w	DisplaySprite2
00008F92                            
00008F92                            loc_84EE:
00008F92 51C9 FFBC                  		dbf	d1,loc_84AA
00008F96                            
00008F96                            loc_84F2:
00008F96 6100 0000                  		bsr.w	DisplaySprite
00008F9A 303C 00B9                  		move.w	#$B9,d0
00008F9E 4EF9 0000 1476             		jmp	(PlaySound_Special).l ;	play collapsing	sound
00008FA4                            ; ===========================================================================
00008FA4                            ; ---------------------------------------------------------------------------
00008FA4                            ; Disintegration data for collapsing ledges (MZ, SLZ, SBZ)
00008FA4                            ; ---------------------------------------------------------------------------
00008FA4 1C18 1410 1A16 120E 0A06+  Obj53_Data1:	dc.b $1C, $18, $14, $10, $1A, $16, $12,	$E, $A,	6, $18,	$14, $10, $C, 8, 4
00008FB4 1612 0E0A 0602 1410 0C00   		dc.b $16, $12, $E, $A, 6, 2, $14, $10, $C, 0
00008FBE 1E16 0E06 1A12 0A02        Obj53_Data2:	dc.b $1E, $16, $E, 6, $1A, $12,	$A, 2
00008FC6 161E 1A12 060E 0A02        Obj53_Data3:	dc.b $16, $1E, $1A, $12, 6, $E,	$A, 2
00008FCE                            
00008FCE                            ; ---------------------------------------------------------------------------
00008FCE                            ; Sloped platform subroutine (GHZ collapsing ledges and	MZ platforms)
00008FCE                            ; ---------------------------------------------------------------------------
00008FCE                            
00008FCE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008FCE                            
00008FCE                            
00008FCE                            SlopeObject2:				; XREF: Obj1A_WalkOff; et al
00008FCE 43F8 D000                  		lea	($FFFFD000).w,a1
00008FD2 0829 0003 0022             		btst	#3,$22(a1)
00008FD8 6700                       		beq.s	locret_856E
00008FDA 3029 0008                  		move.w	8(a1),d0
00008FDE 9068 0008                  		sub.w	8(a0),d0
00008FE2 D041                       		add.w	d1,d0
00008FE4 E248                       		lsr.w	#1,d0
00008FE6 0828 0000 0001             		btst	#0,1(a0)
00008FEC 6700                       		beq.s	loc_854E
00008FEE 4640                       		not.w	d0
00008FF0 D041                       		add.w	d1,d0
00008FF2                            
00008FF2                            loc_854E:
00008FF2 7200                       		moveq	#0,d1
00008FF4 1232 0000                  		move.b	(a2,d0.w),d1
00008FF8 3028 000C                  		move.w	$C(a0),d0
00008FFC 9041                       		sub.w	d1,d0
00008FFE 7200                       		moveq	#0,d1
00009000 1229 0016                  		move.b	$16(a1),d1
00009004 9041                       		sub.w	d1,d0
00009006 3340 000C                  		move.w	d0,$C(a1)
0000900A 9468 0008                  		sub.w	8(a0),d2
0000900E 9569 0008                  		sub.w	d2,8(a1)
00009012                            
00009012                            locret_856E:
00009012 4E75                       		rts	
00009014                            ; End of function SlopeObject2
00009014                            
00009014                            ; ===========================================================================
00009014                            ; ---------------------------------------------------------------------------
00009014                            ; Collision data for GHZ collapsing ledge
00009014                            ; ---------------------------------------------------------------------------
00009014                            Obj1A_SlopeData:
00009014                            		incbin	misc\ghzledge.bin
00009044                            		even
00009044                            
00009044                            ; ---------------------------------------------------------------------------
00009044                            ; Sprite mappings - GHZ	collapsing ledge
00009044                            ; ---------------------------------------------------------------------------
00009044                            Map_obj1A:
00009044                            	include "_maps\obj1A.asm"
00009044                            ; ---------------------------------------------------------------------------
00009044                            ; Sprite mappings - GHZ	collapsing ledge
00009044                            ; ---------------------------------------------------------------------------
00009044 0000 0000                  		dc.w byte_85A8-Map_obj1A, byte_85F9-Map_obj1A
00009048 0000 0000                  		dc.w byte_864A-Map_obj1A, byte_86C8-Map_obj1A
0000904C 10                         byte_85A8:	dc.b $10
0000904D C80E 0057 10               		dc.b $C8, $E, 0, $57, $10 ; ledge facing left
00009052 D00D 0063 F0               		dc.b $D0, $D, 0, $63, $F0
00009057 E00D 006B 10               		dc.b $E0, $D, 0, $6B, $10
0000905C E00D 0073 F0               		dc.b $E0, $D, 0, $73, $F0
00009061 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00009066 D806 0081 D0               		dc.b $D8, 6, 0,	$81, $D0
0000906B F00D 0087 10               		dc.b $F0, $D, 0, $87, $10
00009070 F00D 008F F0               		dc.b $F0, $D, 0, $8F, $F0
00009075 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
0000907A F005 009B D0               		dc.b $F0, 5, 0,	$9B, $D0
0000907F 000D 009F 10               		dc.b 0,	$D, 0, $9F, $10
00009084 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00009089 000D 00AB E0               		dc.b 0,	$D, 0, $AB, $E0
0000908E 0005 00B3 D0               		dc.b 0,	5, 0, $B3, $D0
00009093 100D 00AB 10               		dc.b $10, $D, 0, $AB, $10
00009098 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
0000909D 10                         byte_85F9:	dc.b $10
0000909E C80E 0057 10               		dc.b $C8, $E, 0, $57, $10 ; ledge facing right
000090A3 D00D 0063 F0               		dc.b $D0, $D, 0, $63, $F0
000090A8 E00D 006B 10               		dc.b $E0, $D, 0, $6B, $10
000090AD E00D 0073 F0               		dc.b $E0, $D, 0, $73, $F0
000090B2 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
000090B7 D806 00BB D0               		dc.b $D8, 6, 0,	$BB, $D0
000090BC F00D 0087 10               		dc.b $F0, $D, 0, $87, $10
000090C1 F00D 008F F0               		dc.b $F0, $D, 0, $8F, $F0
000090C6 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
000090CB F005 00C1 D0               		dc.b $F0, 5, 0,	$C1, $D0
000090D0 000D 009F 10               		dc.b 0,	$D, 0, $9F, $10
000090D5 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
000090DA 000D 00AB E0               		dc.b 0,	$D, 0, $AB, $E0
000090DF 0005 00B7 D0               		dc.b 0,	5, 0, $B7, $D0
000090E4 100D 00AB 10               		dc.b $10, $D, 0, $AB, $10
000090E9 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
000090EE 19                         byte_864A:	dc.b $19
000090EF C806 005D 20               		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	left in	pieces
000090F4 C806 0057 10               		dc.b $C8, 6, 0,	$57, $10
000090F9 D005 0067 00               		dc.b $D0, 5, 0,	$67, 0
000090FE D005 0063 F0               		dc.b $D0, 5, 0,	$63, $F0
00009103 E005 006F 20               		dc.b $E0, 5, 0,	$6F, $20
00009108 E005 006B 10               		dc.b $E0, 5, 0,	$6B, $10
0000910D E005 0077 00               		dc.b $E0, 5, 0,	$77, 0
00009112 E005 0073 F0               		dc.b $E0, 5, 0,	$73, $F0
00009117 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
0000911C D806 0081 D0               		dc.b $D8, 6, 0,	$81, $D0
00009121 F005 008B 20               		dc.b $F0, 5, 0,	$8B, $20
00009126 F005 0087 10               		dc.b $F0, 5, 0,	$87, $10
0000912B F005 0093 00               		dc.b $F0, 5, 0,	$93, 0
00009130 F005 008F F0               		dc.b $F0, 5, 0,	$8F, $F0
00009135 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
0000913A F005 009B D0               		dc.b $F0, 5, 0,	$9B, $D0
0000913F 0005 008B 20               		dc.b 0,	5, 0, $8B, $20
00009144 0005 008B 10               		dc.b 0,	5, 0, $8B, $10
00009149 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
0000914E 0005 00AB F0               		dc.b 0,	5, 0, $AB, $F0
00009153 0005 00AB E0               		dc.b 0,	5, 0, $AB, $E0
00009158 0005 00B3 D0               		dc.b 0,	5, 0, $B3, $D0
0000915D 1005 00AB 20               		dc.b $10, 5, 0,	$AB, $20
00009162 1005 00AB 10               		dc.b $10, 5, 0,	$AB, $10
00009167 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
0000916C 19                         byte_86C8:	dc.b $19
0000916D C806 005D 20               		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	right in pieces
00009172 C806 0057 10               		dc.b $C8, 6, 0,	$57, $10
00009177 D005 0067 00               		dc.b $D0, 5, 0,	$67, 0
0000917C D005 0063 F0               		dc.b $D0, 5, 0,	$63, $F0
00009181 E005 006F 20               		dc.b $E0, 5, 0,	$6F, $20
00009186 E005 006B 10               		dc.b $E0, 5, 0,	$6B, $10
0000918B E005 0077 00               		dc.b $E0, 5, 0,	$77, 0
00009190 E005 0073 F0               		dc.b $E0, 5, 0,	$73, $F0
00009195 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
0000919A D806 00BB D0               		dc.b $D8, 6, 0,	$BB, $D0
0000919F F005 008B 20               		dc.b $F0, 5, 0,	$8B, $20
000091A4 F005 0087 10               		dc.b $F0, 5, 0,	$87, $10
000091A9 F005 0093 00               		dc.b $F0, 5, 0,	$93, 0
000091AE F005 008F F0               		dc.b $F0, 5, 0,	$8F, $F0
000091B3 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
000091B8 F005 00C1 D0               		dc.b $F0, 5, 0,	$C1, $D0
000091BD 0005 008B 20               		dc.b 0,	5, 0, $8B, $20
000091C2 0005 008B 10               		dc.b 0,	5, 0, $8B, $10
000091C7 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
000091CC 0005 00AB F0               		dc.b 0,	5, 0, $AB, $F0
000091D1 0005 00AB E0               		dc.b 0,	5, 0, $AB, $E0
000091D6 0005 00B7 D0               		dc.b 0,	5, 0, $B7, $D0
000091DB 1005 00AB 20               		dc.b $10, 5, 0,	$AB, $20
000091E0 1005 00AB 10               		dc.b $10, 5, 0,	$AB, $10
000091E5 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
000091EA                            		even
000091EA                            		even
000091EA                            
000091EA                            ; ---------------------------------------------------------------------------
000091EA                            ; Sprite mappings - collapsing floors (MZ, SLZ,	SBZ)
000091EA                            ; ---------------------------------------------------------------------------
000091EA                            Map_obj53:
000091EA                            	include "_maps\obj53.asm"
000091EA                            ; ---------------------------------------------------------------------------
000091EA                            ; Sprite mappings - collapsing floors (MZ, SLZ,	SBZ)
000091EA                            ; ---------------------------------------------------------------------------
000091EA 0000 0000                  		dc.w byte_874E-Map_obj53, byte_8763-Map_obj53
000091EE 0000 0000                  		dc.w byte_878C-Map_obj53, byte_87A1-Map_obj53
000091F2 04                         byte_874E:	dc.b 4
000091F3 F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	; MZ and SBZ blocks
000091F8 080D 0000 E0               		dc.b 8,	$D, 0, 0, $E0
000091FD F80D 0000 00               		dc.b $F8, $D, 0, 0, 0
00009202 080D 0000 00               		dc.b 8,	$D, 0, 0, 0
00009207 08                         byte_8763:	dc.b 8
00009208 F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
0000920D F805 0000 F0               		dc.b $F8, 5, 0,	0, $F0
00009212 F805 0000 00               		dc.b $F8, 5, 0,	0, 0
00009217 F805 0000 10               		dc.b $F8, 5, 0,	0, $10
0000921C 0805 0000 E0               		dc.b 8,	5, 0, 0, $E0
00009221 0805 0000 F0               		dc.b 8,	5, 0, 0, $F0
00009226 0805 0000 00               		dc.b 8,	5, 0, 0, 0
0000922B 0805 0000 10               		dc.b 8,	5, 0, 0, $10
00009230 04                         byte_878C:	dc.b 4
00009231 F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	; SLZ blocks
00009236 080D 0008 E0               		dc.b 8,	$D, 0, 8, $E0
0000923B F80D 0000 00               		dc.b $F8, $D, 0, 0, 0
00009240 080D 0008 00               		dc.b 8,	$D, 0, 8, 0
00009245 08                         byte_87A1:	dc.b 8
00009246 F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
0000924B F805 0004 F0               		dc.b $F8, 5, 0,	4, $F0
00009250 F805 0000 00               		dc.b $F8, 5, 0,	0, 0
00009255 F805 0004 10               		dc.b $F8, 5, 0,	4, $10
0000925A 0805 0008 E0               		dc.b 8,	5, 0, 8, $E0
0000925F 0805 000C F0               		dc.b 8,	5, 0, $C, $F0
00009264 0805 0008 00               		dc.b 8,	5, 0, 8, 0
00009269 0805 000C 10               		dc.b 8,	5, 0, $C, $10
0000926E                            		even
0000926E                            		even
0000926E                            
0000926E                            ; ===========================================================================
0000926E                            ; ---------------------------------------------------------------------------
0000926E                            ; Object 1C - scenery (GHZ bridge stump, SLZ lava thrower)
0000926E                            ; ---------------------------------------------------------------------------
0000926E                            
0000926E                            Obj1C:					; XREF: Obj_Index
0000926E 7000                       		moveq	#0,d0
00009270 1028 0024                  		move.b	$24(a0),d0
00009274 323B 0000                  		move.w	Obj1C_Index(pc,d0.w),d1
00009278 4EFB 1000                  		jmp	Obj1C_Index(pc,d1.w)
0000927C                            ; ===========================================================================
0000927C 0000                       Obj1C_Index:	dc.w Obj1C_Main-Obj1C_Index
0000927E 0000                       		dc.w Obj1C_ChkDel-Obj1C_Index
00009280                            ; ===========================================================================
00009280                            
00009280                            Obj1C_Main:				; XREF: Obj1C_Index
00009280 5428 0024                  		addq.b	#2,$24(a0)
00009284 7000                       		moveq	#0,d0
00009286 1028 0028                  		move.b	$28(a0),d0	; copy object type to d0
0000928A C0FC 000A                  		mulu.w	#$A,d0		; multiply by $A
0000928E 43FB 0000                  		lea	Obj1C_Var(pc,d0.w),a1
00009292 2159 0004                  		move.l	(a1)+,4(a0)
00009296 3159 0002                  		move.w	(a1)+,2(a0)
0000929A 0028 0004 0001             		ori.b	#4,1(a0)
000092A0 1159 001A                  		move.b	(a1)+,$1A(a0)
000092A4 1159 0019                  		move.b	(a1)+,$19(a0)
000092A8 1159 0018                  		move.b	(a1)+,$18(a0)
000092AC 1159 0020                  		move.b	(a1)+,$20(a0)
000092B0                            
000092B0                            Obj1C_ChkDel:				; XREF: Obj1C_Index
000092B0 3028 0008                  		move.w	8(a0),d0
000092B4 0240 FF80                  		andi.w	#$FF80,d0
000092B8 3238 F700                  		move.w	($FFFFF700).w,d1
000092BC 0441 0080                  		subi.w	#$80,d1
000092C0 0241 FF80                  		andi.w	#$FF80,d1
000092C4 9041                       		sub.w	d1,d0
000092C6 0C40 0280                  		cmpi.w	#$280,d0
000092CA 6200 0000                  		bhi.w	DeleteObject
000092CE 6000 0000                  		bra.w	DisplaySprite
000092D2                            ; ===========================================================================
000092D2                            ; ---------------------------------------------------------------------------
000092D2                            ; Variables for	object $1C are stored in an array
000092D2                            ; ---------------------------------------------------------------------------
000092D2 0000 0000                  Obj1C_Var:	dc.l Map_obj1C		; mappings address
000092D6 44D8                       		dc.w $44D8		; VRAM setting
000092D8 0008 0200                  		dc.b 0,	8, 2, 0		; frame, width,	priority, collision response
000092DC 0000 0000                  		dc.l Map_obj1C
000092E0 44D8                       		dc.w $44D8
000092E2 0008 0200                  		dc.b 0,	8, 2, 0
000092E6 0000 0000                  		dc.l Map_obj1C
000092EA 44D8                       		dc.w $44D8
000092EC 0008 0200                  		dc.b 0,	8, 2, 0
000092F0 0000 83E4                  		dc.l Map_obj11
000092F4 438E                       		dc.w $438E
000092F6 0110 0100                  		dc.b 1,	$10, 1,	0
000092FA                            ; ---------------------------------------------------------------------------
000092FA                            ; Sprite mappings - SLZ	lava thrower
000092FA                            ; ---------------------------------------------------------------------------
000092FA                            Map_obj1C:
000092FA                            	include "_maps\obj1C.asm"
000092FA                            ; ---------------------------------------------------------------------------
000092FA                            ; Sprite mappings - SLZ	lava thrower
000092FA                            ; ---------------------------------------------------------------------------
000092FA 0000                       		dc.w byte_8858-Map_obj1C
000092FC 01                         byte_8858:	dc.b 1
000092FD F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
00009302                            		even
00009302                            		even
00009302                            
00009302                            ; ===========================================================================
00009302                            ; ---------------------------------------------------------------------------
00009302                            ; Object 1D - switch that activates when Sonic touches it
00009302                            ; (this	is not used anywhere in	the game)
00009302                            ; ---------------------------------------------------------------------------
00009302                            
00009302                            Obj1D:					; XREF: Obj_Index
00009302 7000                       		moveq	#0,d0
00009304 1028 0024                  		move.b	$24(a0),d0
00009308 323B 0000                  		move.w	Obj1D_Index(pc,d0.w),d1
0000930C 4EFB 1000                  		jmp	Obj1D_Index(pc,d1.w)
00009310                            ; ===========================================================================
00009310 0000                       Obj1D_Index:	dc.w Obj1D_Main-Obj1D_Index
00009312 0000                       		dc.w Obj1D_Action-Obj1D_Index
00009314 0000                       		dc.w Obj1D_Delete-Obj1D_Index
00009316                            ; ===========================================================================
00009316                            
00009316                            Obj1D_Main:				; XREF: Obj1D_Index
00009316 5428 0024                  		addq.b	#2,$24(a0)
0000931A 217C 0000 0000 0004        		move.l	#Map_obj1D,4(a0)
00009322 317C 4000 0002             		move.w	#$4000,2(a0)
00009328 117C 0004 0001             		move.b	#4,1(a0)
0000932E 3168 000C 0030             		move.w	$C(a0),$30(a0)	; save position	on y-axis
00009334 117C 0010 0019             		move.b	#$10,$19(a0)
0000933A 117C 0005 0018             		move.b	#5,$18(a0)
00009340                            
00009340                            Obj1D_Action:				; XREF: Obj1D_Index
00009340 3168 0030 000C             		move.w	$30(a0),$C(a0)	; restore position on y-axis
00009346 323C 0010                  		move.w	#$10,d1
0000934A 6100 0000                  		bsr.w	Obj1D_ChkTouch
0000934E 6700                       		beq.s	Obj1D_ChkDel
00009350 5468 000C                  		addq.w	#2,$C(a0)	; move object 2	pixels
00009354 7001                       		moveq	#1,d0
00009356 31C0 F7E0                  		move.w	d0,($FFFFF7E0).w ; set switch 0	as "pressed"
0000935A                            
0000935A                            Obj1D_ChkDel:
0000935A 6100 0000                  		bsr.w	DisplaySprite
0000935E 3028 0008                  		move.w	8(a0),d0
00009362 0240 FF80                  		andi.w	#$FF80,d0
00009366 3238 F700                  		move.w	($FFFFF700).w,d1
0000936A 0441 0080                  		subi.w	#$80,d1
0000936E 0241 FF80                  		andi.w	#$FF80,d1
00009372 9041                       		sub.w	d1,d0
00009374 0C40 0280                  		cmpi.w	#$280,d0
00009378 6200 0000                  		bhi.w	Obj1D_Delete
0000937C 4E75                       		rts	
0000937E                            ; ===========================================================================
0000937E                            
0000937E                            Obj1D_Delete:				; XREF: Obj1D_Index
0000937E 6100 0000                  		bsr.w	DeleteObject
00009382 4E75                       		rts	
00009384                            ; ---------------------------------------------------------------------------
00009384                            ; Subroutine to	check if Sonic touches the object
00009384                            ; ---------------------------------------------------------------------------
00009384                            
00009384                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009384                            
00009384                            
00009384                            Obj1D_ChkTouch:				; XREF: Obj1D_Action
00009384 43F8 D000                  		lea	($FFFFD000).w,a1
00009388 3029 0008                  		move.w	8(a1),d0
0000938C 9068 0008                  		sub.w	8(a0),d0
00009390 D041                       		add.w	d1,d0
00009392 6B00                       		bmi.s	loc_8918
00009394 D241                       		add.w	d1,d1
00009396 B041                       		cmp.w	d1,d0
00009398 6400                       		bcc.s	loc_8918
0000939A 3429 000C                  		move.w	$C(a1),d2
0000939E 1229 0016                  		move.b	$16(a1),d1
000093A2 4881                       		ext.w	d1
000093A4 D242                       		add.w	d2,d1
000093A6 3028 000C                  		move.w	$C(a0),d0
000093AA 0440 0010                  		subi.w	#$10,d0
000093AE 9041                       		sub.w	d1,d0
000093B0 6200                       		bhi.s	loc_8918
000093B2 0C40 FFF0                  		cmpi.w	#-$10,d0
000093B6 6500                       		bcs.s	loc_8918
000093B8 70FF                       		moveq	#-1,d0
000093BA 4E75                       		rts	
000093BC                            ; ===========================================================================
000093BC                            
000093BC                            loc_8918:
000093BC 7000                       		moveq	#0,d0
000093BE 4E75                       		rts	
000093C0                            ; End of function Obj1D_ChkTouch
000093C0                            
000093C0                            ; ===========================================================================
000093C0                            ; ---------------------------------------------------------------------------
000093C0                            ; Sprite mappings - object 1D
000093C0                            ; ---------------------------------------------------------------------------
000093C0                            Map_obj1D:
000093C0                            	include "_maps\obj1D.asm"
000093C0                            ; ---------------------------------------------------------------------------
000093C0                            ; Sprite mappings - object 1D
000093C0                            ; ---------------------------------------------------------------------------
000093C0 0000                       		dc.w byte_891E-Map_obj1D
000093C2 04                         byte_891E:	dc.b 4
000093C3 E807 0054 F0               		dc.b $E8, 7, 0,	$54, $F0
000093C8 0805 005C F0               		dc.b 8,	5, 0, $5C, $F0
000093CD E807 0054 00               		dc.b $E8, 7, 0,	$54, 0
000093D2 0805 005C 00               		dc.b 8,	5, 0, $5C, 0
000093D8 00                         		even
000093D8 00                         		even
000093D8                            
000093D8                            ; ===========================================================================
000093D8                            ; ---------------------------------------------------------------------------
000093D8                            ; Object 2A - doors (SBZ)
000093D8                            ; ---------------------------------------------------------------------------
000093D8                            
000093D8                            Obj2A:					; XREF: Obj_Index
000093D8 7000                       		moveq	#0,d0
000093DA 1028 0024                  		move.b	$24(a0),d0
000093DE 323B 0000                  		move.w	Obj2A_Index(pc,d0.w),d1
000093E2 4EFB 1000                  		jmp	Obj2A_Index(pc,d1.w)
000093E6                            ; ===========================================================================
000093E6 0000                       Obj2A_Index:	dc.w Obj2A_Main-Obj2A_Index
000093E8 0000                       		dc.w Obj2A_OpenShut-Obj2A_Index
000093EA                            ; ===========================================================================
000093EA                            
000093EA                            Obj2A_Main:				; XREF: Obj2A_Index
000093EA 5428 0024                  		addq.b	#2,$24(a0)
000093EE 217C 0000 0000 0004        		move.l	#Map_obj2A,4(a0)
000093F6 317C 42E8 0002             		move.w	#$42E8,2(a0)
000093FC 0028 0004 0001             		ori.b	#4,1(a0)
00009402 117C 0008 0019             		move.b	#8,$19(a0)
00009408 117C 0004 0018             		move.b	#4,$18(a0)
0000940E                            
0000940E                            Obj2A_OpenShut:				; XREF: Obj2A_Index
0000940E 323C 0040                  		move.w	#$40,d1
00009412 4228 001C                  		clr.b	$1C(a0)		; use "closing"	animation
00009416 3038 D008                  		move.w	($FFFFD008).w,d0
0000941A D041                       		add.w	d1,d0
0000941C B068 0008                  		cmp.w	8(a0),d0
00009420 6500                       		bcs.s	Obj2A_Animate
00009422 9041                       		sub.w	d1,d0
00009424 9041                       		sub.w	d1,d0
00009426 B068 0008                  		cmp.w	8(a0),d0
0000942A 6400                       		bcc.s	Obj2A_Animate
0000942C D041                       		add.w	d1,d0
0000942E B068 0008                  		cmp.w	8(a0),d0
00009432 6400                       		bcc.s	loc_899A
00009434 0828 0000 0022             		btst	#0,$22(a0)
0000943A 6600                       		bne.s	Obj2A_Animate
0000943C 6000                       		bra.s	Obj2A_Open
0000943E                            ; ===========================================================================
0000943E                            
0000943E                            loc_899A:				; XREF: Obj2A_OpenShut
0000943E 0828 0000 0022             		btst	#0,$22(a0)
00009444 6700                       		beq.s	Obj2A_Animate
00009446                            
00009446                            Obj2A_Open:				; XREF: Obj2A_OpenShut
00009446 117C 0001 001C             		move.b	#1,$1C(a0)	; use "opening"	animation
0000944C                            
0000944C                            Obj2A_Animate:				; XREF: Obj2A_OpenShut; loc_899A
0000944C 43F9 0000 0000             		lea	(Ani_obj2A).l,a1
00009452 6100 0000                  		bsr.w	AnimateSprite
00009456 4A28 001A                  		tst.b	$1A(a0)		; is the door open?
0000945A 6600                       		bne.s	Obj2A_MarkAsUsed ; if yes, branch
0000945C 323C 0011                  		move.w	#$11,d1
00009460 343C 0020                  		move.w	#$20,d2
00009464 3602                       		move.w	d2,d3
00009466 5243                       		addq.w	#1,d3
00009468 3828 0008                  		move.w	8(a0),d4
0000946C 6100 0000                  		bsr.w	SolidObject
00009470                            
00009470                            Obj2A_MarkAsUsed:
00009470 6000 0000                  		bra.w	MarkObjGone
00009474                            ; ===========================================================================
00009474                            Ani_obj2A:
00009474                            	include "_anim\obj2A.asm"
00009474                            ; ---------------------------------------------------------------------------
00009474                            ; Animation script - doors (SBZ)
00009474                            ; ---------------------------------------------------------------------------
00009474 0000                       		dc.w Ani_obj2A_Shut-Ani_obj2A
00009476 0000                       		dc.w Ani_obj2A_Open-Ani_obj2A
00009478 0008 0706 0504 0302 0100+  Ani_obj2A_Shut:	dc.b 0,	8, 7, 6, 5, 4, 3, 2, 1,	0, $FE,	1
00009484 0000 0102 0304 0506 0708+  Ani_obj2A_Open:	dc.b 0,	0, 1, 2, 3, 4, 5, 6, 7,	8, $FE,	1
00009490                            		even
00009490                            		even
00009490                            
00009490                            ; ---------------------------------------------------------------------------
00009490                            ; Sprite mappings - doors (SBZ)
00009490                            ; ---------------------------------------------------------------------------
00009490                            Map_obj2A:
00009490                            	include "_maps\obj2A.asm"
00009490                            ; ---------------------------------------------------------------------------
00009490                            ; Sprite mappings - doors (SBZ)
00009490                            ; ---------------------------------------------------------------------------
00009490 0000 0000                  		dc.w byte_89FE-Map_obj2A, byte_8A09-Map_obj2A
00009494 0000 0000                  		dc.w byte_8A14-Map_obj2A, byte_8A1F-Map_obj2A
00009498 0000 0000                  		dc.w byte_8A2A-Map_obj2A, byte_8A35-Map_obj2A
0000949C 0000 0000                  		dc.w byte_8A40-Map_obj2A, byte_8A4B-Map_obj2A
000094A0 0000                       		dc.w byte_8A56-Map_obj2A
000094A2 02                         byte_89FE:	dc.b 2
000094A3 E007 0800 F8               		dc.b $E0, 7, 8,	0, $F8	; door closed
000094A8 0007 0800 F8               		dc.b 0,	7, 8, 0, $F8
000094AD 02                         byte_8A09:	dc.b 2
000094AE DC07 0800 F8               		dc.b $DC, 7, 8,	0, $F8
000094B3 0407 0800 F8               		dc.b 4,	7, 8, 0, $F8
000094B8 02                         byte_8A14:	dc.b 2
000094B9 D807 0800 F8               		dc.b $D8, 7, 8,	0, $F8
000094BE 0807 0800 F8               		dc.b 8,	7, 8, 0, $F8
000094C3 02                         byte_8A1F:	dc.b 2
000094C4 D407 0800 F8               		dc.b $D4, 7, 8,	0, $F8
000094C9 0C07 0800 F8               		dc.b $C, 7, 8, 0, $F8
000094CE 02                         byte_8A2A:	dc.b 2
000094CF D007 0800 F8               		dc.b $D0, 7, 8,	0, $F8
000094D4 1007 0800 F8               		dc.b $10, 7, 8,	0, $F8
000094D9 02                         byte_8A35:	dc.b 2
000094DA CC07 0800 F8               		dc.b $CC, 7, 8,	0, $F8
000094DF 1407 0800 F8               		dc.b $14, 7, 8,	0, $F8
000094E4 02                         byte_8A40:	dc.b 2
000094E5 C807 0800 F8               		dc.b $C8, 7, 8,	0, $F8
000094EA 1807 0800 F8               		dc.b $18, 7, 8,	0, $F8
000094EF 02                         byte_8A4B:	dc.b 2
000094F0 C407 0800 F8               		dc.b $C4, 7, 8,	0, $F8
000094F5 1C07 0800 F8               		dc.b $1C, 7, 8,	0, $F8
000094FA 02                         byte_8A56:	dc.b 2
000094FB C007 0800 F8               		dc.b $C0, 7, 8,	0, $F8	; door fully open
00009500 2007 0800 F8               		dc.b $20, 7, 8,	0, $F8
00009506 00                         		even
00009506 00                         		even
00009506                            
00009506                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009506                            
00009506                            
00009506                            Obj44_SolidWall:			; XREF: Obj44_Solid
00009506 6100 0000                  		bsr.w	Obj44_SolidWall2
0000950A 6700                       		beq.s	loc_8AA8
0000950C 6B00 0000                  		bmi.w	loc_8AC4
00009510 4A40                       		tst.w	d0
00009512 6700 0000                  		beq.w	loc_8A92
00009516 6B00                       		bmi.s	loc_8A7C
00009518 4A69 0010                  		tst.w	$10(a1)
0000951C 6B00                       		bmi.s	loc_8A92
0000951E 6000                       		bra.s	loc_8A82
00009520                            ; ===========================================================================
00009520                            
00009520                            loc_8A7C:
00009520 4A69 0010                  		tst.w	$10(a1)
00009524 6A00                       		bpl.s	loc_8A92
00009526                            
00009526                            loc_8A82:
00009526 9169 0008                  		sub.w	d0,8(a1)
0000952A 337C 0000 0014             		move.w	#0,$14(a1)
00009530 337C 0000 0010             		move.w	#0,$10(a1)
00009536                            
00009536                            loc_8A92:
00009536 0829 0001 0022             		btst	#1,$22(a1)
0000953C 6600                       		bne.s	loc_8AB6
0000953E 08E9 0005 0022             		bset	#5,$22(a1)
00009544 08E8 0005 0022             		bset	#5,$22(a0)
0000954A 4E75                       		rts	
0000954C                            ; ===========================================================================
0000954C                            
0000954C                            loc_8AA8:
0000954C 0828 0005 0022             		btst	#5,$22(a0)
00009552 6700                       		beq.s	locret_8AC2
00009554 337C 0001 001C             		move.w	#1,$1C(a1)
0000955A                            
0000955A                            loc_8AB6:
0000955A 08A8 0005 0022             		bclr	#5,$22(a0)
00009560 08A9 0005 0022             		bclr	#5,$22(a1)
00009566                            
00009566                            locret_8AC2:
00009566 4E75                       		rts	
00009568                            ; ===========================================================================
00009568                            
00009568                            loc_8AC4:
00009568 4A69 0012                  		tst.w	$12(a1)
0000956C 6A00                       		bpl.s	locret_8AD8
0000956E 4A43                       		tst.w	d3
00009570 6A00                       		bpl.s	locret_8AD8
00009572 9769 000C                  		sub.w	d3,$C(a1)
00009576 337C 0000 0012             		move.w	#0,$12(a1)
0000957C                            
0000957C                            locret_8AD8:
0000957C 4E75                       		rts	
0000957E                            ; End of function Obj44_SolidWall
0000957E                            
0000957E                            
0000957E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000957E                            
0000957E                            
0000957E                            Obj44_SolidWall2:			; XREF: Obj44_SolidWall
0000957E 43F8 D000                  		lea	($FFFFD000).w,a1
00009582 3029 0008                  		move.w	8(a1),d0
00009586 9068 0008                  		sub.w	8(a0),d0
0000958A D041                       		add.w	d1,d0
0000958C 6B00                       		bmi.s	loc_8B48
0000958E 3601                       		move.w	d1,d3
00009590 D643                       		add.w	d3,d3
00009592 B043                       		cmp.w	d3,d0
00009594 6200                       		bhi.s	loc_8B48
00009596 1629 0016                  		move.b	$16(a1),d3
0000959A 4883                       		ext.w	d3
0000959C D443                       		add.w	d3,d2
0000959E 3629 000C                  		move.w	$C(a1),d3
000095A2 9668 000C                  		sub.w	$C(a0),d3
000095A6 D642                       		add.w	d2,d3
000095A8 6B00                       		bmi.s	loc_8B48
000095AA 3802                       		move.w	d2,d4
000095AC D844                       		add.w	d4,d4
000095AE B644                       		cmp.w	d4,d3
000095B0 6400                       		bcc.s	loc_8B48
000095B2 4A38 F7C8                  		tst.b	($FFFFF7C8).w
000095B6 6B00                       		bmi.s	loc_8B48
000095B8 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
000095BE 6400                       		bcc.s	loc_8B48
000095C0 4A78 FE08                  		tst.w	($FFFFFE08).w
000095C4 6600                       		bne.s	loc_8B48
000095C6 3A00                       		move.w	d0,d5
000095C8 B240                       		cmp.w	d0,d1
000095CA 6400                       		bcc.s	loc_8B30
000095CC D241                       		add.w	d1,d1
000095CE 9041                       		sub.w	d1,d0
000095D0 3A00                       		move.w	d0,d5
000095D2 4445                       		neg.w	d5
000095D4                            
000095D4                            loc_8B30:
000095D4 3203                       		move.w	d3,d1
000095D6 B443                       		cmp.w	d3,d2
000095D8 6400                       		bcc.s	loc_8B3C
000095DA 9644                       		sub.w	d4,d3
000095DC 3203                       		move.w	d3,d1
000095DE 4441                       		neg.w	d1
000095E0                            
000095E0                            loc_8B3C:
000095E0 BA41                       		cmp.w	d1,d5
000095E2 6200                       		bhi.s	loc_8B44
000095E4 7801                       		moveq	#1,d4
000095E6 4E75                       		rts	
000095E8                            ; ===========================================================================
000095E8                            
000095E8                            loc_8B44:
000095E8 78FF                       		moveq	#-1,d4
000095EA 4E75                       		rts	
000095EC                            ; ===========================================================================
000095EC                            
000095EC                            loc_8B48:
000095EC 7800                       		moveq	#0,d4
000095EE 4E75                       		rts	
000095F0                            ; End of function Obj44_SolidWall2
000095F0                            
000095F0                            ; ===========================================================================
000095F0                            ; ---------------------------------------------------------------------------
000095F0                            ; Object 1E - Ball Hog enemy (SBZ)
000095F0                            ; ---------------------------------------------------------------------------
000095F0                            
000095F0                            Obj1E:					; XREF: Obj_Index
000095F0 7000                       		moveq	#0,d0
000095F2 1028 0024                  		move.b	$24(a0),d0
000095F6 323B 0000                  		move.w	Obj1E_Index(pc,d0.w),d1
000095FA 4EFB 1000                  		jmp	Obj1E_Index(pc,d1.w)
000095FE                            ; ===========================================================================
000095FE 0000                       Obj1E_Index:	dc.w Obj1E_Main-Obj1E_Index
00009600 0000                       		dc.w Obj1E_Action-Obj1E_Index
00009602                            ; ===========================================================================
00009602                            
00009602                            Obj1E_Main:				; XREF: Obj1E_Index
00009602 117C 0013 0016             		move.b	#$13,$16(a0)
00009608 117C 0008 0017             		move.b	#8,$17(a0)
0000960E 217C 0000 0000 0004        		move.l	#Map_obj1E,4(a0)
00009616 317C 2302 0002             		move.w	#$2302,2(a0)
0000961C 117C 0004 0001             		move.b	#4,1(a0)
00009622 117C 0004 0018             		move.b	#4,$18(a0)
00009628 117C 0005 0020             		move.b	#5,$20(a0)
0000962E 117C 000C 0019             		move.b	#$C,$19(a0)
00009634 6100 0000                  		bsr.w	ObjectFall
00009638 4EB9 0000 0000             		jsr	ObjHitFloor
0000963E 4A41                       		tst.w	d1
00009640 6A00                       		bpl.s	locret_8BAC
00009642 D368 000C                  		add.w	d1,$C(a0)
00009646 317C 0000 0012             		move.w	#0,$12(a0)
0000964C 5428 0024                  		addq.b	#2,$24(a0)
00009650                            
00009650                            locret_8BAC:
00009650 4E75                       		rts	
00009652                            ; ===========================================================================
00009652                            
00009652                            Obj1E_Action:				; XREF: Obj1E_Index
00009652 43F9 0000 0000             		lea	(Ani_obj1E).l,a1
00009658 6100 0000                  		bsr.w	AnimateSprite
0000965C 0C28 0001 001A             		cmpi.b	#1,$1A(a0)	; is final frame (01) displayed?
00009662 6600                       		bne.s	Obj1E_SetBall	; if not, branch
00009664 4A28 0032                  		tst.b	$32(a0)		; is it	set to launch cannonball?
00009668 6700                       		beq.s	Obj1E_MakeBall	; if yes, branch
0000966A 6000                       		bra.s	Obj1E_MarkAsGone
0000966C                            ; ===========================================================================
0000966C                            
0000966C                            Obj1E_SetBall:				; XREF: Obj1E_Action
0000966C 4228 0032                  		clr.b	$32(a0)		; set to launch	cannonball
00009670                            
00009670                            Obj1E_MarkAsGone:			; XREF: Obj1E_Action
00009670 6000 0000                  		bra.w	MarkObjGone
00009674                            ; ===========================================================================
00009674                            
00009674                            Obj1E_MakeBall:				; XREF: Obj1E_Action
00009674 117C 0001 0032             		move.b	#1,$32(a0)
0000967A 6100 0000                  		bsr.w	SingleObjLoad
0000967E 6600                       		bne.s	loc_8C1A
00009680 12BC 0020                  		move.b	#$20,0(a1)	; load cannonball object ($20)
00009684 3368 0008 0008             		move.w	8(a0),8(a1)
0000968A 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009690 337C FF00 0010             		move.w	#-$100,$10(a1)	; cannonball bounces to	the left
00009696 337C 0000 0012             		move.w	#0,$12(a1)
0000969C 70FC                       		moveq	#-4,d0
0000969E 0828 0000 0022             		btst	#0,$22(a0)	; is Ball Hog facing right?
000096A4 6700                       		beq.s	loc_8C0A	; if not, branch
000096A6 4440                       		neg.w	d0
000096A8 4469 0010                  		neg.w	$10(a1)		; cannonball bounces to	the right
000096AC                            
000096AC                            loc_8C0A:
000096AC D169 0008                  		add.w	d0,8(a1)
000096B0 0669 000C 000C             		addi.w	#$C,$C(a1)
000096B6 1368 0028 0028             		move.b	$28(a0),$28(a1)	; copy object type from	Ball Hog
000096BC                            
000096BC                            loc_8C1A:
000096BC 60B2                       		bra.s	Obj1E_MarkAsGone
000096BE                            ; ===========================================================================
000096BE                            ; ---------------------------------------------------------------------------
000096BE                            ; Object 20 - cannonball that Ball Hog throws (SBZ)
000096BE                            ; ---------------------------------------------------------------------------
000096BE                            
000096BE                            Obj20:					; XREF: Obj_Index
000096BE 7000                       		moveq	#0,d0
000096C0 1028 0024                  		move.b	$24(a0),d0
000096C4 323B 0000                  		move.w	Obj20_Index(pc,d0.w),d1
000096C8 4EFB 1000                  		jmp	Obj20_Index(pc,d1.w)
000096CC                            ; ===========================================================================
000096CC 0000                       Obj20_Index:	dc.w Obj20_Main-Obj20_Index
000096CE 0000                       		dc.w Obj20_Bounce-Obj20_Index
000096D0                            ; ===========================================================================
000096D0                            
000096D0                            Obj20_Main:				; XREF: Obj20_Index
000096D0 5428 0024                  		addq.b	#2,$24(a0)
000096D4 117C 0007 0016             		move.b	#7,$16(a0)
000096DA 217C 0000 0000 0004        		move.l	#Map_obj1E,4(a0)
000096E2 317C 2302 0002             		move.w	#$2302,2(a0)
000096E8 117C 0004 0001             		move.b	#4,1(a0)
000096EE 117C 0003 0018             		move.b	#3,$18(a0)
000096F4 117C 0087 0020             		move.b	#$87,$20(a0)
000096FA 117C 0008 0019             		move.b	#8,$19(a0)
00009700 7000                       		moveq	#0,d0
00009702 1028 0028                  		move.b	$28(a0),d0	; move object type to d0
00009706 C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 frames	(1 second)
0000970A 3140 0030                  		move.w	d0,$30(a0)	; set explosion	time
0000970E 117C 0004 001A             		move.b	#4,$1A(a0)
00009714                            
00009714                            Obj20_Bounce:				; XREF: Obj20_Index
00009714 4EB9 0000 0000             		jsr	ObjectFall
0000971A 4A68 0012                  		tst.w	$12(a0)
0000971E 6B00                       		bmi.s	Obj20_ChkExplode
00009720 4EB9 0000 0000             		jsr	ObjHitFloor
00009726 4A41                       		tst.w	d1
00009728 6A00                       		bpl.s	Obj20_ChkExplode
0000972A D368 000C                  		add.w	d1,$C(a0)
0000972E 317C FD00 0012             		move.w	#-$300,$12(a0)
00009734 4A03                       		tst.b	d3
00009736 6700                       		beq.s	Obj20_ChkExplode
00009738 6B00                       		bmi.s	loc_8CA4
0000973A 4A68 0010                  		tst.w	$10(a0)
0000973E 6A00                       		bpl.s	Obj20_ChkExplode
00009740 4468 0010                  		neg.w	$10(a0)
00009744 6000                       		bra.s	Obj20_ChkExplode
00009746                            ; ===========================================================================
00009746                            
00009746                            loc_8CA4:				; XREF: Obj20_Bounce
00009746 4A68 0010                  		tst.w	$10(a0)
0000974A 6B00                       		bmi.s	Obj20_ChkExplode
0000974C 4468 0010                  		neg.w	$10(a0)
00009750                            
00009750                            Obj20_ChkExplode:			; XREF: Obj20_Bounce
00009750 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from explosion time
00009754 6A00                       		bpl.s	Obj20_Animate	; if time is > 0, branch
00009756 10BC 0024                  		move.b	#$24,0(a0)
0000975A 10BC 003F                  		move.b	#$3F,0(a0)	; change object	to an explosion	($3F)
0000975E 117C 0000 0024             		move.b	#0,$24(a0)	; reset	routine	counter
00009764 6000 0000                  		bra.w	Obj3F		; jump to explosion code
00009768                            ; ===========================================================================
00009768                            
00009768                            Obj20_Animate:				; XREF: Obj20_ChkExplode
00009768 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
0000976C 6A00                       		bpl.s	Obj20_Display
0000976E 117C 0005 001E             		move.b	#5,$1E(a0)	; set frame duration to	5 frames
00009774 0868 0000 001A             		bchg	#0,$1A(a0)	; change frame
0000977A                            
0000977A                            Obj20_Display:
0000977A 6100 0000                  		bsr.w	DisplaySprite
0000977E 3038 F72E                  		move.w	($FFFFF72E).w,d0
00009782 0640 00E0                  		addi.w	#$E0,d0
00009786 B068 000C                  		cmp.w	$C(a0),d0	; has object fallen off	the level?
0000978A 6500 0000                  		bcs.w	DeleteObject	; if yes, branch
0000978E 4E75                       		rts	
00009790                            ; ===========================================================================
00009790                            ; ---------------------------------------------------------------------------
00009790                            ; Object 24 - explosion	from a destroyed monitor
00009790                            ; ---------------------------------------------------------------------------
00009790                            
00009790                            Obj24:					; XREF: Obj_Index
00009790 7000                       		moveq	#0,d0
00009792 1028 0024                  		move.b	$24(a0),d0
00009796 323B 0000                  		move.w	Obj24_Index(pc,d0.w),d1
0000979A 4EFB 1000                  		jmp	Obj24_Index(pc,d1.w)
0000979E                            ; ===========================================================================
0000979E 0000                       Obj24_Index:	dc.w Obj24_Main-Obj24_Index
000097A0 0000                       		dc.w Obj24_Animate-Obj24_Index
000097A2                            ; ===========================================================================
000097A2                            
000097A2                            Obj24_Main:				; XREF: Obj24_Index
000097A2 5428 0024                  		addq.b	#2,$24(a0)
000097A6 217C 0000 0000 0004        		move.l	#Map_obj24,4(a0)
000097AE 317C 041C 0002             		move.w	#$41C,2(a0)
000097B4 117C 0004 0001             		move.b	#4,1(a0)
000097BA 117C 0001 0018             		move.b	#1,$18(a0)
000097C0 117C 0000 0020             		move.b	#0,$20(a0)
000097C6 117C 000C 0019             		move.b	#$C,$19(a0)
000097CC 117C 0009 001E             		move.b	#9,$1E(a0)
000097D2 117C 0000 001A             		move.b	#0,$1A(a0)
000097D8 303C 00A5                  		move.w	#$A5,d0
000097DC 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play explosion sound
000097E2                            
000097E2                            Obj24_Animate:				; XREF: Obj24_Index
000097E2 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
000097E6 6A00                       		bpl.s	Obj24_Display
000097E8 117C 0009 001E             		move.b	#9,$1E(a0)	; set frame duration to	9 frames
000097EE 5228 001A                  		addq.b	#1,$1A(a0)	; next frame
000097F2 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; is the final frame (04) displayed?
000097F8 6700 0000                  		beq.w	DeleteObject	; if yes, branch
000097FC                            
000097FC                            Obj24_Display:
000097FC 6000 0000                  		bra.w	DisplaySprite
00009800                            ; ===========================================================================
00009800                            ; ---------------------------------------------------------------------------
00009800                            ; Object 27 - explosion	from a destroyed enemy
00009800                            ; ---------------------------------------------------------------------------
00009800                            
00009800                            Obj27:					; XREF: Obj_Index
00009800 7000                       		moveq	#0,d0
00009802 1028 0024                  		move.b	$24(a0),d0
00009806 323B 0000                  		move.w	Obj27_Index(pc,d0.w),d1
0000980A 4EFB 1000                  		jmp	Obj27_Index(pc,d1.w)
0000980E                            ; ===========================================================================
0000980E 0000                       Obj27_Index:	dc.w Obj27_LoadAnimal-Obj27_Index
00009810 0000                       		dc.w Obj27_Main-Obj27_Index
00009812 0000                       		dc.w Obj27_Animate-Obj27_Index
00009814                            ; ===========================================================================
00009814                            
00009814                            Obj27_LoadAnimal:			; XREF: Obj27_Index
00009814 5428 0024                  		addq.b	#2,$24(a0)
00009818 6100 0000                  		bsr.w	SingleObjLoad
0000981C 6600                       		bne.s	Obj27_Main
0000981E 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
00009822 3368 0008 0008             		move.w	8(a0),8(a1)
00009828 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000982E 3368 003E 003E             		move.w	$3E(a0),$3E(a1)
00009834                            
00009834                            Obj27_Main:				; XREF: Obj27_Index
00009834 5428 0024                  		addq.b	#2,$24(a0)
00009838 217C 0000 0000 0004        		move.l	#Map_obj27,4(a0)
00009840 317C 05A0 0002             		move.w	#$5A0,2(a0)
00009846 117C 0004 0001             		move.b	#4,1(a0)
0000984C 117C 0001 0018             		move.b	#1,$18(a0)
00009852 117C 0000 0020             		move.b	#0,$20(a0)
00009858 117C 000C 0019             		move.b	#$C,$19(a0)
0000985E 117C 0007 001E             		move.b	#7,$1E(a0)	; set frame duration to	7 frames
00009864 117C 0000 001A             		move.b	#0,$1A(a0)
0000986A 303C 00C1                  		move.w	#$C1,d0
0000986E 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play breaking enemy sound
00009874                            
00009874                            Obj27_Animate:				; XREF: Obj27_Index
00009874 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
00009878 6A00                       		bpl.s	Obj27_Display
0000987A 117C 0007 001E             		move.b	#7,$1E(a0)	; set frame duration to	7 frames
00009880 5228 001A                  		addq.b	#1,$1A(a0)	; next frame
00009884 0C28 0005 001A             		cmpi.b	#5,$1A(a0)	; is the final frame (05) displayed?
0000988A 6700 0000                  		beq.w	DeleteObject	; if yes, branch
0000988E                            
0000988E                            Obj27_Display:
0000988E 6000 0000                  		bra.w	DisplaySprite
00009892                            ; ===========================================================================
00009892                            ; ---------------------------------------------------------------------------
00009892                            ; Object 3F - explosion	from a destroyed boss, bomb or cannonball
00009892                            ; ---------------------------------------------------------------------------
00009892                            
00009892                            Obj3F:					; XREF: Obj_Index
00009892 7000                       		moveq	#0,d0
00009894 1028 0024                  		move.b	$24(a0),d0
00009898 323B 0000                  		move.w	Obj3F_Index(pc,d0.w),d1
0000989C 4EFB 1000                  		jmp	Obj3F_Index(pc,d1.w)
000098A0                            ; ===========================================================================
000098A0 0000                       Obj3F_Index:	dc.w Obj3F_Main-Obj3F_Index
000098A2 FFD4                       		dc.w Obj27_Animate-Obj3F_Index
000098A4                            ; ===========================================================================
000098A4                            
000098A4                            Obj3F_Main:				; XREF: Obj3F_Index
000098A4 5428 0024                  		addq.b	#2,$24(a0)
000098A8 217C 0000 0000 0004        		move.l	#Map_obj3F,4(a0)
000098B0 317C 05A0 0002             		move.w	#$5A0,2(a0)
000098B6 117C 0004 0001             		move.b	#4,1(a0)
000098BC 117C 0001 0018             		move.b	#1,$18(a0)
000098C2 117C 0000 0020             		move.b	#0,$20(a0)
000098C8 117C 000C 0019             		move.b	#$C,$19(a0)
000098CE 117C 0007 001E             		move.b	#7,$1E(a0)
000098D4 117C 0000 001A             		move.b	#0,$1A(a0)
000098DA 303C 00C4                  		move.w	#$C4,d0
000098DE 4EF9 0000 1476             		jmp	(PlaySound_Special).l ;	play exploding bomb sound
000098E4                            ; ===========================================================================
000098E4                            Ani_obj1E:
000098E4                            	include "_anim\obj1E.asm"
000098E4                            ; ---------------------------------------------------------------------------
000098E4                            ; Animation script - doors (SBZ)
000098E4                            ; ---------------------------------------------------------------------------
000098E4 0000                       		dc.w byte_8E4A-Ani_obj1E
000098E6 0900 0002 0203 0200 0002+  byte_8E4A:	dc.b 9,	0, 0, 2, 2, 3, 2, 0, 0,	2, 2, 3, 2, 0, 0, 2, 2, 3, 2, 0, 0, 1, $FF
000098FE 00                         		even
000098FE 00                         		even
000098FE                            
000098FE                            ; ---------------------------------------------------------------------------
000098FE                            ; Sprite mappings - Ball Hog enemy (SBZ)
000098FE                            ; ---------------------------------------------------------------------------
000098FE                            Map_obj1E:
000098FE                            	include "_maps\obj1E.asm"
000098FE                            ; ---------------------------------------------------------------------------
000098FE                            ; Sprite mappings - Ball Hog enemy (SBZ)
000098FE                            ; ---------------------------------------------------------------------------
000098FE 0000 0000                  		dc.w byte_8E6E-Map_obj1E, byte_8E79-Map_obj1E
00009902 0000 0000                  		dc.w byte_8E84-Map_obj1E, byte_8E8F-Map_obj1E
00009906 0000 0000                  		dc.w byte_8E9A-Map_obj1E, byte_8EA0-Map_obj1E
0000990A 02                         byte_8E6E:	dc.b 2
0000990B EF09 0000 F4               		dc.b $EF, 9, 0,	0, $F4
00009910 FF0A 0006 F4               		dc.b $FF, $A, 0, 6, $F4
00009915 02                         byte_8E79:	dc.b 2
00009916 EF09 0000 F4               		dc.b $EF, 9, 0,	0, $F4
0000991B FF0A 000F F4               		dc.b $FF, $A, 0, $F, $F4
00009920 02                         byte_8E84:	dc.b 2
00009921 F409 0000 F4               		dc.b $F4, 9, 0,	0, $F4
00009926 0409 0018 F4               		dc.b 4,	9, 0, $18, $F4
0000992B 02                         byte_8E8F:	dc.b 2
0000992C E409 0000 F4               		dc.b $E4, 9, 0,	0, $F4
00009931 F40A 001E F4               		dc.b $F4, $A, 0, $1E, $F4
00009936 01                         byte_8E9A:	dc.b 1
00009937 F805 0027 F8               		dc.b $F8, 5, 0,	$27, $F8
0000993C 01                         byte_8EA0:	dc.b 1
0000993D F805 002B F8               		dc.b $F8, 5, 0,	$2B, $F8
00009942                            		even
00009942                            		even
00009942                            
00009942                            ; ---------------------------------------------------------------------------
00009942                            ; Sprite mappings - explosion
00009942                            ; ---------------------------------------------------------------------------
00009942                            Map_obj24:
00009942                            	include "_maps\obj24.asm"
00009942                            ; ---------------------------------------------------------------------------
00009942                            ; Sprite mappings - explosion
00009942                            ; ---------------------------------------------------------------------------
00009942 0000 0000                  		dc.w byte_8EAE-Map_obj24, byte_8EB4-Map_obj24
00009946 0000 0000                  		dc.w byte_8EBA-Map_obj24, byte_8EC0-Map_obj24
0000994A 01                         byte_8EAE:	dc.b 1
0000994B F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
00009950 01                         byte_8EB4:	dc.b 1
00009951 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
00009956 01                         byte_8EBA:	dc.b 1
00009957 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0000995C 01                         byte_8EC0:	dc.b 1
0000995D F40A 001B F4               		dc.b $F4, $A, 0, $1B, $F4
00009962                            		even
00009962                            		even
00009962                            
00009962                            ; ---------------------------------------------------------------------------
00009962                            ; Sprite mappings - explosion
00009962                            ; ---------------------------------------------------------------------------
00009962 0000 0000                  Map_obj27:	dc.w byte_8ED0-Map_obj27, byte_8ED6-Map_obj27
00009966 0000 0000                  		dc.w byte_8EDC-Map_obj27, byte_8EE2-Map_obj27
0000996A 0000                       		dc.w byte_8EF7-Map_obj27
0000996C 01                         byte_8ED0:	dc.b 1
0000996D F809 0000 F4               		dc.b $F8, 9, 0,	0, $F4
00009972 01                         byte_8ED6:	dc.b 1
00009973 F00F 0006 F0               		dc.b $F0, $F, 0, 6, $F0
00009978 01                         byte_8EDC:	dc.b 1
00009979 F00F 0016 F0               		dc.b $F0, $F, 0, $16, $F0
0000997E 04                         byte_8EE2:	dc.b 4
0000997F EC0A 0026 EC               		dc.b $EC, $A, 0, $26, $EC
00009984 EC05 002F 04               		dc.b $EC, 5, 0,	$2F, 4
00009989 0405 182F EC               		dc.b 4,	5, $18,	$2F, $EC
0000998E FC0A 1826 FC               		dc.b $FC, $A, $18, $26,	$FC
00009993 04                         byte_8EF7:	dc.b 4
00009994 EC0A 0033 EC               		dc.b $EC, $A, 0, $33, $EC
00009999 EC05 003C 04               		dc.b $EC, 5, 0,	$3C, 4
0000999E 0405 183C EC               		dc.b 4,	5, $18,	$3C, $EC
000099A3 FC0A 1833 FC               		dc.b $FC, $A, $18, $33,	$FC
000099A8                            		even
000099A8                            ; ---------------------------------------------------------------------------
000099A8                            ; Sprite mappings - explosion from when	a boss is destroyed
000099A8                            ; ---------------------------------------------------------------------------
000099A8 FFC4                       Map_obj3F:	dc.w byte_8ED0-Map_obj3F
000099AA 0000                       		dc.w byte_8F16-Map_obj3F
000099AC 0000                       		dc.w byte_8F1C-Map_obj3F
000099AE FFD6                       		dc.w byte_8EE2-Map_obj3F
000099B0 FFEB                       		dc.w byte_8EF7-Map_obj3F
000099B2 01                         byte_8F16:	dc.b 1
000099B3 F00F 0040 F0               		dc.b $F0, $F, 0, $40, $F0
000099B8 01                         byte_8F1C:	dc.b 1
000099B9 F00F 0050 F0               		dc.b $F0, $F, 0, $50, $F0
000099BE                            		even
000099BE                            ; ===========================================================================
000099BE                            ; ---------------------------------------------------------------------------
000099BE                            ; Object 28 - animals
000099BE                            ; ---------------------------------------------------------------------------
000099BE                            
000099BE                            Obj28:					; XREF: Obj_Index
000099BE 7000                       		moveq	#0,d0
000099C0 1028 0024                  		move.b	$24(a0),d0
000099C4 323B 0000                  		move.w	Obj28_Index(pc,d0.w),d1
000099C8 4EFB 1000                  		jmp	Obj28_Index(pc,d1.w)
000099CC                            ; ===========================================================================
000099CC 0000 0000                  Obj28_Index:	dc.w Obj28_Ending-Obj28_Index, loc_912A-Obj28_Index
000099D0 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_91C0-Obj28_Index
000099D4 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_9184-Obj28_Index
000099D8 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_91C0-Obj28_Index
000099DC 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_9240-Obj28_Index
000099E0 0000 0000                  		dc.w loc_9260-Obj28_Index, loc_9260-Obj28_Index
000099E4 0000 0000                  		dc.w loc_9280-Obj28_Index, loc_92BA-Obj28_Index
000099E8 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9332-Obj28_Index
000099EC 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9332-Obj28_Index
000099F0 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9370-Obj28_Index
000099F4 0000                       		dc.w loc_92D6-Obj28_Index
000099F6                            
000099F6 0005 0203 0603 0405 0401+  Obj28_VarIndex:	dc.b 0,	5, 2, 3, 6, 3, 4, 5, 4,	1, 0, 1
00009A02                            
00009A02 FE00 FC00                  Obj28_Variables:dc.w $FE00, $FC00
00009A06 0000 0000                  		dc.l Map_obj28
00009A0A FE00 FD00                  		dc.w $FE00, $FD00	; horizontal speed, vertical speed
00009A0E 0000 0000                  		dc.l Map_obj28a		; mappings address
00009A12 FE80 FD00                  		dc.w $FE80, $FD00
00009A16 0000 0000                  		dc.l Map_obj28
00009A1A FEC0 FE80                  		dc.w $FEC0, $FE80
00009A1E 0000 0000                  		dc.l Map_obj28a
00009A22 FE40 FD00                  		dc.w $FE40, $FD00
00009A26 0000 0000                  		dc.l Map_obj28b
00009A2A FD00 FC00                  		dc.w $FD00, $FC00
00009A2E 0000 0000                  		dc.l Map_obj28a
00009A32 FD80 FC80                  		dc.w $FD80, $FC80
00009A36 0000 0000                  		dc.l Map_obj28b
00009A3A                            
00009A3A FBC0 FC00 FBC0 FC00 FBC0+  Obj28_EndSpeed:	dc.w $FBC0, $FC00, $FBC0, $FC00, $FBC0,	$FC00, $FD00, $FC00
00009A4A FD00 FC00 FE80 FD00 FE80+  		dc.w $FD00, $FC00, $FE80, $FD00, $FE80,	$FD00, $FEC0, $FE80
00009A5A FE40 FD00 FE00 FD00 FD80+  		dc.w $FE40, $FD00, $FE00, $FD00, $FD80,	$FC80
00009A66                            
00009A66 0000 0000 0000 0000 0000+  Obj28_EndMap:	dc.l Map_obj28a, Map_obj28a, Map_obj28a, Map_obj28, Map_obj28
00009A7A 0000 0000 0000 0000 0000+  		dc.l Map_obj28,	Map_obj28, Map_obj28a, Map_obj28b, Map_obj28a
00009A8E 0000 0000                  		dc.l Map_obj28b
00009A92                            
00009A92 05A5 05A5 05A5 0553 0553+  Obj28_EndVram:	dc.w $5A5, $5A5, $5A5, $553, $553, $573, $573, $585, $593
00009AA4 0565 05B3                  		dc.w $565, $5B3
00009AA8                            ; ===========================================================================
00009AA8                            
00009AA8                            Obj28_Ending:				; XREF: Obj28_Index
00009AA8 4A28 0028                  		tst.b	$28(a0)		; did animal come from a destroyed enemy?
00009AAC 6700 0000                  		beq.w	Obj28_FromEnemy	; if yes, branch
00009AB0 7000                       		moveq	#0,d0
00009AB2 1028 0028                  		move.b	$28(a0),d0	; move object type to d0
00009AB6 D040                       		add.w	d0,d0		; multiply d0 by 2
00009AB8 1140 0024                  		move.b	d0,$24(a0)	; move d0 to routine counter
00009ABC 0440 0014                  		subi.w	#$14,d0
00009AC0 317B 00D0 0002             		move.w	Obj28_EndVram(pc,d0.w),2(a0)
00009AC6 D040                       		add.w	d0,d0
00009AC8 217B 009C 0004             		move.l	Obj28_EndMap(pc,d0.w),4(a0)
00009ACE 43FA FF6A                  		lea	Obj28_EndSpeed(pc),a1
00009AD2 3171 0000 0032             		move.w	(a1,d0.w),$32(a0) ; load horizontal speed
00009AD8 3171 0000 0010             		move.w	(a1,d0.w),$10(a0)
00009ADE 3171 0002 0034             		move.w	2(a1,d0.w),$34(a0) ; load vertical speed
00009AE4 3171 0002 0012             		move.w	2(a1,d0.w),$12(a0)
00009AEA 117C 000C 0016             		move.b	#$C,$16(a0)
00009AF0 117C 0004 0001             		move.b	#4,1(a0)
00009AF6 08E8 0000 0001             		bset	#0,1(a0)
00009AFC 117C 0006 0018             		move.b	#6,$18(a0)
00009B02 117C 0008 0019             		move.b	#8,$19(a0)
00009B08 117C 0007 001E             		move.b	#7,$1E(a0)
00009B0E 6000 0000                  		bra.w	DisplaySprite
00009B12                            ; ===========================================================================
00009B12                            
00009B12                            Obj28_FromEnemy:			; XREF: Obj28_Ending
00009B12 5428 0024                  		addq.b	#2,$24(a0)
00009B16 6100 9896                  		bsr.w	RandomNumber
00009B1A 0240 0001                  		andi.w	#1,d0
00009B1E 7200                       		moveq	#0,d1
00009B20 1238 FE10                  		move.b	($FFFFFE10).w,d1
00009B24 D241                       		add.w	d1,d1
00009B26 D240                       		add.w	d0,d1
00009B28 43FA FECC                  		lea	Obj28_VarIndex(pc),a1
00009B2C 1031 1000                  		move.b	(a1,d1.w),d0
00009B30 1140 0030                  		move.b	d0,$30(a0)
00009B34 E748                       		lsl.w	#3,d0
00009B36 43FA FECA                  		lea	Obj28_Variables(pc),a1
00009B3A D2C0                       		adda.w	d0,a1
00009B3C 3159 0032                  		move.w	(a1)+,$32(a0)	; load horizontal speed
00009B40 3159 0034                  		move.w	(a1)+,$34(a0)	; load vertical	speed
00009B44 2159 0004                  		move.l	(a1)+,4(a0)	; load mappings
00009B48 317C 0580 0002             		move.w	#$580,2(a0)	; VRAM setting for 1st animal
00009B4E 0828 0000 0030             		btst	#0,$30(a0)	; is 1st animal	used?
00009B54 6700                       		beq.s	loc_90C0	; if yes, branch
00009B56 317C 0592 0002             		move.w	#$592,2(a0)	; VRAM setting for 2nd animal
00009B5C                            
00009B5C                            loc_90C0:
00009B5C 117C 000C 0016             		move.b	#$C,$16(a0)
00009B62 117C 0004 0001             		move.b	#4,1(a0)
00009B68 08E8 0000 0001             		bset	#0,1(a0)
00009B6E 117C 0006 0018             		move.b	#6,$18(a0)
00009B74 117C 0008 0019             		move.b	#8,$19(a0)
00009B7A 117C 0007 001E             		move.b	#7,$1E(a0)
00009B80 117C 0002 001A             		move.b	#2,$1A(a0)
00009B86 317C FC00 0012             		move.w	#-$400,$12(a0)
00009B8C 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00009B90 6600                       		bne.s	loc_911C
00009B92 6100 0000                  		bsr.w	SingleObjLoad
00009B96 6600                       		bne.s	Obj28_Display
00009B98 12BC 0029                  		move.b	#$29,0(a1)	; load points object
00009B9C 3368 0008 0008             		move.w	8(a0),8(a1)
00009BA2 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009BA8 3028 003E                  		move.w	$3E(a0),d0
00009BAC E248                       		lsr.w	#1,d0
00009BAE 1340 001A                  		move.b	d0,$1A(a1)
00009BB2                            
00009BB2                            Obj28_Display:
00009BB2 6000 0000                  		bra.w	DisplaySprite
00009BB6                            ; ===========================================================================
00009BB6                            
00009BB6                            loc_911C:
00009BB6 117C 0012 0024             		move.b	#$12,$24(a0)
00009BBC 4268 0010                  		clr.w	$10(a0)
00009BC0 6000 0000                  		bra.w	DisplaySprite
00009BC4                            ; ===========================================================================
00009BC4                            
00009BC4                            loc_912A:				; XREF: Obj28_Index
00009BC4 4A28 0001                  		tst.b	1(a0)
00009BC8 6A00 0000                  		bpl.w	DeleteObject
00009BCC 6100 0000                  		bsr.w	ObjectFall
00009BD0 4A68 0012                  		tst.w	$12(a0)
00009BD4 6B00                       		bmi.s	loc_9180
00009BD6 4EB9 0000 0000             		jsr	ObjHitFloor
00009BDC 4A41                       		tst.w	d1
00009BDE 6A00                       		bpl.s	loc_9180
00009BE0 D368 000C                  		add.w	d1,$C(a0)
00009BE4 3168 0032 0010             		move.w	$32(a0),$10(a0)
00009BEA 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009BF0 117C 0001 001A             		move.b	#1,$1A(a0)
00009BF6 1028 0030                  		move.b	$30(a0),d0
00009BFA D000                       		add.b	d0,d0
00009BFC 5800                       		addq.b	#4,d0
00009BFE 1140 0024                  		move.b	d0,$24(a0)
00009C02 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00009C06 6700                       		beq.s	loc_9180
00009C08 0838 0004 FE0F             		btst	#4,($FFFFFE0F).w
00009C0E 6700                       		beq.s	loc_9180
00009C10 4468 0010                  		neg.w	$10(a0)
00009C14 0868 0000 0001             		bchg	#0,1(a0)
00009C1A                            
00009C1A                            loc_9180:
00009C1A 6000 0000                  		bra.w	DisplaySprite
00009C1E                            ; ===========================================================================
00009C1E                            
00009C1E                            loc_9184:				; XREF: Obj28_Index
00009C1E 6100 0000                  		bsr.w	ObjectFall
00009C22 117C 0001 001A             		move.b	#1,$1A(a0)
00009C28 4A68 0012                  		tst.w	$12(a0)
00009C2C 6B00                       		bmi.s	loc_91AE
00009C2E 117C 0000 001A             		move.b	#0,$1A(a0)
00009C34 4EB9 0000 0000             		jsr	ObjHitFloor
00009C3A 4A41                       		tst.w	d1
00009C3C 6A00                       		bpl.s	loc_91AE
00009C3E D368 000C                  		add.w	d1,$C(a0)
00009C42 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009C48                            
00009C48                            loc_91AE:
00009C48 4A28 0028                  		tst.b	$28(a0)
00009C4C 6600                       		bne.s	loc_9224
00009C4E 4A28 0001                  		tst.b	1(a0)
00009C52 6A00 0000                  		bpl.w	DeleteObject
00009C56 6000 0000                  		bra.w	DisplaySprite
00009C5A                            ; ===========================================================================
00009C5A                            
00009C5A                            loc_91C0:				; XREF: Obj28_Index
00009C5A 6100 0000                  		bsr.w	SpeedToPos
00009C5E 0668 0018 0012             		addi.w	#$18,$12(a0)
00009C64 4A68 0012                  		tst.w	$12(a0)
00009C68 6B00                       		bmi.s	loc_91FC
00009C6A 4EB9 0000 0000             		jsr	ObjHitFloor
00009C70 4A41                       		tst.w	d1
00009C72 6A00                       		bpl.s	loc_91FC
00009C74 D368 000C                  		add.w	d1,$C(a0)
00009C78 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009C7E 4A28 0028                  		tst.b	$28(a0)
00009C82 6700                       		beq.s	loc_91FC
00009C84 0C28 000A 0028             		cmpi.b	#$A,$28(a0)
00009C8A 6700                       		beq.s	loc_91FC
00009C8C 4468 0010                  		neg.w	$10(a0)
00009C90 0868 0000 0001             		bchg	#0,1(a0)
00009C96                            
00009C96                            loc_91FC:
00009C96 5328 001E                  		subq.b	#1,$1E(a0)
00009C9A 6A00                       		bpl.s	loc_9212
00009C9C 117C 0001 001E             		move.b	#1,$1E(a0)
00009CA2 5228 001A                  		addq.b	#1,$1A(a0)
00009CA6 0228 0001 001A             		andi.b	#1,$1A(a0)
00009CAC                            
00009CAC                            loc_9212:
00009CAC 4A28 0028                  		tst.b	$28(a0)
00009CB0 6600                       		bne.s	loc_9224
00009CB2 4A28 0001                  		tst.b	1(a0)
00009CB6 6A00 0000                  		bpl.w	DeleteObject
00009CBA 6000 0000                  		bra.w	DisplaySprite
00009CBE                            ; ===========================================================================
00009CBE                            
00009CBE                            loc_9224:				; XREF: Obj28_Index
00009CBE 3028 0008                  		move.w	8(a0),d0
00009CC2 9078 D008                  		sub.w	($FFFFD008).w,d0
00009CC6 6500                       		bcs.s	loc_923C
00009CC8 0440 0180                  		subi.w	#$180,d0
00009CCC 6A00                       		bpl.s	loc_923C
00009CCE 4A28 0001                  		tst.b	1(a0)
00009CD2 6A00 0000                  		bpl.w	DeleteObject
00009CD6                            
00009CD6                            loc_923C:
00009CD6 6000 0000                  		bra.w	DisplaySprite
00009CDA                            ; ===========================================================================
00009CDA                            
00009CDA                            loc_9240:				; XREF: Obj28_Index
00009CDA 4A28 0001                  		tst.b	1(a0)
00009CDE 6A00 0000                  		bpl.w	DeleteObject
00009CE2 5368 0036                  		subq.w	#1,$36(a0)
00009CE6 6600 0000                  		bne.w	loc_925C
00009CEA 117C 0002 0024             		move.b	#2,$24(a0)
00009CF0 117C 0003 0018             		move.b	#3,$18(a0)
00009CF6                            
00009CF6                            loc_925C:
00009CF6 6000 0000                  		bra.w	DisplaySprite
00009CFA                            ; ===========================================================================
00009CFA                            
00009CFA                            loc_9260:				; XREF: Obj28_Index
00009CFA 6100 0000                  		bsr.w	sub_9404
00009CFE 6400                       		bcc.s	loc_927C
00009D00 3168 0032 0010             		move.w	$32(a0),$10(a0)
00009D06 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009D0C 117C 000E 0024             		move.b	#$E,$24(a0)
00009D12 6000 FF46                  		bra.w	loc_91C0
00009D16                            ; ===========================================================================
00009D16                            
00009D16                            loc_927C:
00009D16 6000 FFA6                  		bra.w	loc_9224
00009D1A                            ; ===========================================================================
00009D1A                            
00009D1A                            loc_9280:				; XREF: Obj28_Index
00009D1A 6100 0000                  		bsr.w	sub_9404
00009D1E 6A00                       		bpl.s	loc_92B6
00009D20 4268 0010                  		clr.w	$10(a0)
00009D24 4268 0032                  		clr.w	$32(a0)
00009D28 6100 0000                  		bsr.w	SpeedToPos
00009D2C 0668 0018 0012             		addi.w	#$18,$12(a0)
00009D32 6100 0000                  		bsr.w	loc_93C4
00009D36 6100 0000                  		bsr.w	loc_93EC
00009D3A 5328 001E                  		subq.b	#1,$1E(a0)
00009D3E 6A00                       		bpl.s	loc_92B6
00009D40 117C 0001 001E             		move.b	#1,$1E(a0)
00009D46 5228 001A                  		addq.b	#1,$1A(a0)
00009D4A 0228 0001 001A             		andi.b	#1,$1A(a0)
00009D50                            
00009D50                            loc_92B6:
00009D50 6000 FF6C                  		bra.w	loc_9224
00009D54                            ; ===========================================================================
00009D54                            
00009D54                            loc_92BA:				; XREF: Obj28_Index
00009D54 6100 0000                  		bsr.w	sub_9404
00009D58 6A00                       		bpl.s	loc_9310
00009D5A 3168 0032 0010             		move.w	$32(a0),$10(a0)
00009D60 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009D66 117C 0004 0024             		move.b	#4,$24(a0)
00009D6C 6000 FEB0                  		bra.w	loc_9184
00009D70                            ; ===========================================================================
00009D70                            
00009D70                            loc_92D6:				; XREF: Obj28_Index
00009D70 6100 0000                  		bsr.w	ObjectFall
00009D74 117C 0001 001A             		move.b	#1,$1A(a0)
00009D7A 4A68 0012                  		tst.w	$12(a0)
00009D7E 6B00                       		bmi.s	loc_9310
00009D80 117C 0000 001A             		move.b	#0,$1A(a0)
00009D86 4EB9 0000 0000             		jsr	ObjHitFloor
00009D8C 4A41                       		tst.w	d1
00009D8E 6A00                       		bpl.s	loc_9310
00009D90 4628 0029                  		not.b	$29(a0)
00009D94 6600                       		bne.s	loc_9306
00009D96 4468 0010                  		neg.w	$10(a0)
00009D9A 0868 0000 0001             		bchg	#0,1(a0)
00009DA0                            
00009DA0                            loc_9306:
00009DA0 D368 000C                  		add.w	d1,$C(a0)
00009DA4 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009DAA                            
00009DAA                            loc_9310:
00009DAA 6000 FF12                  		bra.w	loc_9224
00009DAE                            ; ===========================================================================
00009DAE                            
00009DAE                            loc_9314:				; XREF: Obj28_Index
00009DAE 6100 0000                  		bsr.w	sub_9404
00009DB2 6A00                       		bpl.s	loc_932E
00009DB4 4268 0010                  		clr.w	$10(a0)
00009DB8 4268 0032                  		clr.w	$32(a0)
00009DBC 6100 0000                  		bsr.w	ObjectFall
00009DC0 6100 0000                  		bsr.w	loc_93C4
00009DC4 6100 0000                  		bsr.w	loc_93EC
00009DC8                            
00009DC8                            loc_932E:
00009DC8 6000 FEF4                  		bra.w	loc_9224
00009DCC                            ; ===========================================================================
00009DCC                            
00009DCC                            loc_9332:				; XREF: Obj28_Index
00009DCC 6100 0000                  		bsr.w	sub_9404
00009DD0 6A00                       		bpl.s	loc_936C
00009DD2 6100 0000                  		bsr.w	ObjectFall
00009DD6 117C 0001 001A             		move.b	#1,$1A(a0)
00009DDC 4A68 0012                  		tst.w	$12(a0)
00009DE0 6B00                       		bmi.s	loc_936C
00009DE2 117C 0000 001A             		move.b	#0,$1A(a0)
00009DE8 4EB9 0000 0000             		jsr	ObjHitFloor
00009DEE 4A41                       		tst.w	d1
00009DF0 6A00                       		bpl.s	loc_936C
00009DF2 4468 0010                  		neg.w	$10(a0)
00009DF6 0868 0000 0001             		bchg	#0,1(a0)
00009DFC D368 000C                  		add.w	d1,$C(a0)
00009E00 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009E06                            
00009E06                            loc_936C:
00009E06 6000 FEB6                  		bra.w	loc_9224
00009E0A                            ; ===========================================================================
00009E0A                            
00009E0A                            loc_9370:				; XREF: Obj28_Index
00009E0A 6100 0000                  		bsr.w	sub_9404
00009E0E 6A00                       		bpl.s	loc_93C0
00009E10 6100 0000                  		bsr.w	SpeedToPos
00009E14 0668 0018 0012             		addi.w	#$18,$12(a0)
00009E1A 4A68 0012                  		tst.w	$12(a0)
00009E1E 6B00                       		bmi.s	loc_93AA
00009E20 4EB9 0000 0000             		jsr	ObjHitFloor
00009E26 4A41                       		tst.w	d1
00009E28 6A00                       		bpl.s	loc_93AA
00009E2A 4628 0029                  		not.b	$29(a0)
00009E2E 6600                       		bne.s	loc_93A0
00009E30 4468 0010                  		neg.w	$10(a0)
00009E34 0868 0000 0001             		bchg	#0,1(a0)
00009E3A                            
00009E3A                            loc_93A0:
00009E3A D368 000C                  		add.w	d1,$C(a0)
00009E3E 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009E44                            
00009E44                            loc_93AA:
00009E44 5328 001E                  		subq.b	#1,$1E(a0)
00009E48 6A00                       		bpl.s	loc_93C0
00009E4A 117C 0001 001E             		move.b	#1,$1E(a0)
00009E50 5228 001A                  		addq.b	#1,$1A(a0)
00009E54 0228 0001 001A             		andi.b	#1,$1A(a0)
00009E5A                            
00009E5A                            loc_93C0:
00009E5A 6000 FE62                  		bra.w	loc_9224
00009E5E                            ; ===========================================================================
00009E5E                            
00009E5E                            loc_93C4:
00009E5E 117C 0001 001A             		move.b	#1,$1A(a0)
00009E64 4A68 0012                  		tst.w	$12(a0)
00009E68 6B00                       		bmi.s	locret_93EA
00009E6A 117C 0000 001A             		move.b	#0,$1A(a0)
00009E70 4EB9 0000 0000             		jsr	ObjHitFloor
00009E76 4A41                       		tst.w	d1
00009E78 6A00                       		bpl.s	locret_93EA
00009E7A D368 000C                  		add.w	d1,$C(a0)
00009E7E 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009E84                            
00009E84                            locret_93EA:
00009E84 4E75                       		rts	
00009E86                            ; ===========================================================================
00009E86                            
00009E86                            loc_93EC:
00009E86 08E8 0000 0001             		bset	#0,1(a0)
00009E8C 3028 0008                  		move.w	8(a0),d0
00009E90 9078 D008                  		sub.w	($FFFFD008).w,d0
00009E94 6400                       		bcc.s	locret_9402
00009E96 08A8 0000 0001             		bclr	#0,1(a0)
00009E9C                            
00009E9C                            locret_9402:
00009E9C 4E75                       		rts	
00009E9E                            
00009E9E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009E9E                            
00009E9E                            
00009E9E                            sub_9404:
00009E9E 3038 D008                  		move.w	($FFFFD008).w,d0
00009EA2 9068 0008                  		sub.w	8(a0),d0
00009EA6 0440 00B8                  		subi.w	#$B8,d0
00009EAA 4E75                       		rts	
00009EAC                            ; End of function sub_9404
00009EAC                            
00009EAC                            ; ===========================================================================
00009EAC                            ; ---------------------------------------------------------------------------
00009EAC                            ; Object 29 - points that appear when you destroy something
00009EAC                            ; ---------------------------------------------------------------------------
00009EAC                            
00009EAC                            Obj29:					; XREF: Obj_Index
00009EAC 7000                       		moveq	#0,d0
00009EAE 1028 0024                  		move.b	$24(a0),d0
00009EB2 323B 0000                  		move.w	Obj29_Index(pc,d0.w),d1
00009EB6 4EBB 1000                  		jsr	Obj29_Index(pc,d1.w)
00009EBA 6000 0000                  		bra.w	DisplaySprite
00009EBE                            ; ===========================================================================
00009EBE 0000                       Obj29_Index:	dc.w Obj29_Main-Obj29_Index
00009EC0 0000                       		dc.w Obj29_Slower-Obj29_Index
00009EC2                            ; ===========================================================================
00009EC2                            
00009EC2                            Obj29_Main:				; XREF: Obj29_Index
00009EC2 5428 0024                  		addq.b	#2,$24(a0)
00009EC6 217C 0000 0000 0004        		move.l	#Map_obj29,4(a0)
00009ECE 317C 2797 0002             		move.w	#$2797,2(a0)
00009ED4 117C 0004 0001             		move.b	#4,1(a0)
00009EDA 117C 0001 0018             		move.b	#1,$18(a0)
00009EE0 117C 0008 0019             		move.b	#8,$19(a0)
00009EE6 317C FD00 0012             		move.w	#-$300,$12(a0)	; move object upwards
00009EEC                            
00009EEC                            Obj29_Slower:				; XREF: Obj29_Index
00009EEC 4A68 0012                  		tst.w	$12(a0)		; is object moving?
00009EF0 6A00 0000                  		bpl.w	DeleteObject	; if not, branch
00009EF4 6100 0000                  		bsr.w	SpeedToPos
00009EF8 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce object	speed
00009EFE 4E75                       		rts	
00009F00                            ; ===========================================================================
00009F00                            ; ---------------------------------------------------------------------------
00009F00                            ; Sprite mappings - animals
00009F00                            ; ---------------------------------------------------------------------------
00009F00                            Map_obj28:
00009F00                            	include "_maps\obj28.asm"
00009F00                            ; ---------------------------------------------------------------------------
00009F00                            ; Sprite mappings - animals
00009F00                            ; ---------------------------------------------------------------------------
00009F00 0000                       		dc.w byte_9472-Map_obj28
00009F02 0000                       		dc.w byte_9478-Map_obj28
00009F04 0000                       		dc.w byte_946C-Map_obj28
00009F06 01                         byte_946C:	dc.b 1
00009F07 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
00009F0C 01                         byte_9472:	dc.b 1
00009F0D F406 0006 F8               		dc.b $F4, 6, 0,	6, $F8
00009F12 01                         byte_9478:	dc.b 1
00009F13 F406 000C F8               		dc.b $F4, 6, 0,	$C, $F8
00009F18                            		even
00009F18                            		even
00009F18                            
00009F18                            Map_obj28a:
00009F18                            	include "_maps\obj28a.asm"
00009F18                            ; ---------------------------------------------------------------------------
00009F18                            ; Sprite mappings - animals
00009F18                            ; ---------------------------------------------------------------------------
00009F18 0000                       		dc.w byte_948A-Map_obj28a
00009F1A 0000                       		dc.w byte_9490-Map_obj28a
00009F1C 0000                       		dc.w byte_9484-Map_obj28a
00009F1E 01                         byte_9484:	dc.b 1
00009F1F F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
00009F24 01                         byte_948A:	dc.b 1
00009F25 FC05 0006 F8               		dc.b $FC, 5, 0,	6, $F8
00009F2A 01                         byte_9490:	dc.b 1
00009F2B FC05 000A F8               		dc.b $FC, 5, 0,	$A, $F8
00009F30                            		even
00009F30                            		even
00009F30                            
00009F30                            Map_obj28b:
00009F30                            	include "_maps\obj28b.asm"
00009F30                            ; ---------------------------------------------------------------------------
00009F30                            ; Sprite mappings - animals
00009F30                            ; ---------------------------------------------------------------------------
00009F30 0000                       		dc.w byte_94A2-Map_obj28b
00009F32 0000                       		dc.w byte_94A8-Map_obj28b
00009F34 0000                       		dc.w byte_949C-Map_obj28b
00009F36 01                         byte_949C:	dc.b 1
00009F37 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
00009F3C 01                         byte_94A2:	dc.b 1
00009F3D FC09 0006 F4               		dc.b $FC, 9, 0,	6, $F4
00009F42 01                         byte_94A8:	dc.b 1
00009F43 FC09 000C F4               		dc.b $FC, 9, 0,	$C, $F4
00009F48                            		even
00009F48                            		even
00009F48                            
00009F48                            ; ---------------------------------------------------------------------------
00009F48                            ; Sprite mappings - points that	appear when you	destroy	something
00009F48                            ; ---------------------------------------------------------------------------
00009F48                            Map_obj29:
00009F48                            	include "_maps\obj29.asm"
00009F48                            ; ---------------------------------------------------------------------------
00009F48                            ; Sprite mappings - points that	appear when you	destroy	something
00009F48                            ; ---------------------------------------------------------------------------
00009F48 0000 0000                  		dc.w byte_94BC-Map_obj29, byte_94C2-Map_obj29
00009F4C 0000 0000                  		dc.w byte_94C8-Map_obj29, byte_94CE-Map_obj29
00009F50 0000 0000                  		dc.w byte_94D4-Map_obj29, byte_94DA-Map_obj29
00009F54 0000                       		dc.w byte_94E5-Map_obj29
00009F56 01                         byte_94BC:	dc.b 1
00009F57 FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8	; 100 points
00009F5C 01                         byte_94C2:	dc.b 1
00009F5D FC04 0002 F8               		dc.b $FC, 4, 0,	2, $F8	; 200 points
00009F62 01                         byte_94C8:	dc.b 1
00009F63 FC04 0004 F8               		dc.b $FC, 4, 0,	4, $F8	; 500 points
00009F68 01                         byte_94CE:	dc.b 1
00009F69 FC08 0006 F8               		dc.b $FC, 8, 0,	6, $F8	; 1000 points
00009F6E 01                         byte_94D4:	dc.b 1
00009F6F FC00 0006 FC               		dc.b $FC, 0, 0,	6, $FC	; 10 points
00009F74 02                         byte_94DA:	dc.b 2
00009F75 FC08 0006 F4               		dc.b $FC, 8, 0,	6, $F4	; 10,000 points
00009F7A FC04 0007 01               		dc.b $FC, 4, 0,	7, 1
00009F7F 02                         byte_94E5:	dc.b 2
00009F80 FC08 0006 F4               		dc.b $FC, 8, 0,	6, $F4	; 100,000 points
00009F85 FC04 0007 06               		dc.b $FC, 4, 0,	7, 6
00009F8A                            		even
00009F8A                            		even
00009F8A                            
00009F8A                            ; ===========================================================================
00009F8A                            ; ---------------------------------------------------------------------------
00009F8A                            ; Object 1F - Crabmeat enemy (GHZ, SYZ)
00009F8A                            ; ---------------------------------------------------------------------------
00009F8A                            
00009F8A                            Obj1F:					; XREF: Obj_Index
00009F8A 7000                       		moveq	#0,d0
00009F8C 1028 0024                  		move.b	$24(a0),d0
00009F90 323B 0000                  		move.w	Obj1F_Index(pc,d0.w),d1
00009F94 4EFB 1000                  		jmp	Obj1F_Index(pc,d1.w)
00009F98                            ; ===========================================================================
00009F98 0000                       Obj1F_Index:	dc.w Obj1F_Main-Obj1F_Index
00009F9A 0000                       		dc.w Obj1F_Action-Obj1F_Index
00009F9C 0000                       		dc.w Obj1F_Delete-Obj1F_Index
00009F9E 0000                       		dc.w Obj1F_BallMain-Obj1F_Index
00009FA0 0000                       		dc.w Obj1F_BallMove-Obj1F_Index
00009FA2                            ; ===========================================================================
00009FA2                            
00009FA2                            Obj1F_Main:				; XREF: Obj1F_Index
00009FA2 117C 0010 0016             		move.b	#$10,$16(a0)
00009FA8 117C 0008 0017             		move.b	#8,$17(a0)
00009FAE 217C 0000 0000 0004        		move.l	#Map_obj1F,4(a0)
00009FB6 317C 0400 0002             		move.w	#$400,2(a0)
00009FBC 117C 0004 0001             		move.b	#4,1(a0)
00009FC2 117C 0003 0018             		move.b	#3,$18(a0)
00009FC8 117C 0006 0020             		move.b	#6,$20(a0)
00009FCE 117C 0015 0019             		move.b	#$15,$19(a0)
00009FD4 6100 0000                  		bsr.w	ObjectFall
00009FD8 4EB9 0000 0000             		jsr	ObjHitFloor
00009FDE 4A41                       		tst.w	d1
00009FE0 6A00                       		bpl.s	locret_955A
00009FE2 D368 000C                  		add.w	d1,$C(a0)
00009FE6 1143 0026                  		move.b	d3,$26(a0)
00009FEA 317C 0000 0012             		move.w	#0,$12(a0)
00009FF0 5428 0024                  		addq.b	#2,$24(a0)
00009FF4                            
00009FF4                            locret_955A:
00009FF4 4E75                       		rts	
00009FF6                            ; ===========================================================================
00009FF6                            
00009FF6                            Obj1F_Action:				; XREF: Obj1F_Index
00009FF6 7000                       		moveq	#0,d0
00009FF8 1028 0025                  		move.b	$25(a0),d0
00009FFC 323B 0000                  		move.w	Obj1F_Index2(pc,d0.w),d1
0000A000 4EBB 1000                  		jsr	Obj1F_Index2(pc,d1.w)
0000A004 43F9 0000 0000             		lea	(Ani_obj1F).l,a1
0000A00A 6100 0000                  		bsr.w	AnimateSprite
0000A00E 6000 0000                  		bra.w	MarkObjGone
0000A012                            ; ===========================================================================
0000A012 0000                       Obj1F_Index2:	dc.w Obj1F_WaitFire-Obj1F_Index2
0000A014 0000                       		dc.w Obj1F_WalkOnFloor-Obj1F_Index2
0000A016                            ; ===========================================================================
0000A016                            
0000A016                            Obj1F_WaitFire:				; XREF: Obj1F_Index2
0000A016 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
0000A01A 6A00                       		bpl.s	locret_95B6
0000A01C 4A28 0001                  		tst.b	1(a0)
0000A020 6A00                       		bpl.s	Obj1F_Move
0000A022 0868 0001 0032             		bchg	#1,$32(a0)
0000A028 6600                       		bne.s	Obj1F_MakeFire
0000A02A                            
0000A02A                            Obj1F_Move:
0000A02A 5428 0025                  		addq.b	#2,$25(a0)
0000A02E 317C 007F 0030             		move.w	#127,$30(a0)	; set time delay to approx 2 seconds
0000A034 317C 0080 0010             		move.w	#$80,$10(a0)	; move Crabmeat	to the right
0000A03A 6100 0000                  		bsr.w	Obj1F_SetAni
0000A03E 5600                       		addq.b	#3,d0
0000A040 1140 001C                  		move.b	d0,$1C(a0)
0000A044 0868 0000 0022             		bchg	#0,$22(a0)
0000A04A 6600                       		bne.s	locret_95B6
0000A04C 4468 0010                  		neg.w	$10(a0)		; change direction
0000A050                            
0000A050                            locret_95B6:
0000A050 4E75                       		rts	
0000A052                            ; ===========================================================================
0000A052                            
0000A052                            Obj1F_MakeFire:				; XREF: Obj1F_WaitFire
0000A052 317C 003B 0030             		move.w	#$3B,$30(a0)
0000A058 117C 0006 001C             		move.b	#6,$1C(a0)	; use firing animation
0000A05E 6100 0000                  		bsr.w	SingleObjLoad
0000A062 6600                       		bne.s	Obj1F_MakeFire2
0000A064 12BC 001F                  		move.b	#$1F,0(a1)	; load left fireball
0000A068 137C 0006 0024             		move.b	#6,$24(a1)
0000A06E 3368 0008 0008             		move.w	8(a0),8(a1)
0000A074 0469 0010 0008             		subi.w	#$10,8(a1)
0000A07A 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A080 337C FF00 0010             		move.w	#-$100,$10(a1)
0000A086                            
0000A086                            Obj1F_MakeFire2:
0000A086 6100 0000                  		bsr.w	SingleObjLoad
0000A08A 6600                       		bne.s	locret_9618
0000A08C 12BC 001F                  		move.b	#$1F,0(a1)	; load right fireball
0000A090 137C 0006 0024             		move.b	#6,$24(a1)
0000A096 3368 0008 0008             		move.w	8(a0),8(a1)
0000A09C 0669 0010 0008             		addi.w	#$10,8(a1)
0000A0A2 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A0A8 337C 0100 0010             		move.w	#$100,$10(a1)
0000A0AE                            
0000A0AE                            locret_9618:
0000A0AE 4E75                       		rts	
0000A0B0                            ; ===========================================================================
0000A0B0                            
0000A0B0                            Obj1F_WalkOnFloor:			; XREF: Obj1F_Index2
0000A0B0 5368 0030                  		subq.w	#1,$30(a0)
0000A0B4 6B00                       		bmi.s	loc_966E
0000A0B6 6100 0000                  		bsr.w	SpeedToPos
0000A0BA 0868 0000 0032             		bchg	#0,$32(a0)
0000A0C0 6600                       		bne.s	loc_9654
0000A0C2 3628 0008                  		move.w	8(a0),d3
0000A0C6 0643 0010                  		addi.w	#$10,d3
0000A0CA 0828 0000 0022             		btst	#0,$22(a0)
0000A0D0 6700                       		beq.s	loc_9640
0000A0D2 0443 0020                  		subi.w	#$20,d3
0000A0D6                            
0000A0D6                            loc_9640:
0000A0D6 4EB9 0000 0000             		jsr	ObjHitFloor2
0000A0DC 0C41 FFF8                  		cmpi.w	#-8,d1
0000A0E0 6D00                       		blt.s	loc_966E
0000A0E2 0C41 000C                  		cmpi.w	#$C,d1
0000A0E6 6C00                       		bge.s	loc_966E
0000A0E8 4E75                       		rts	
0000A0EA                            ; ===========================================================================
0000A0EA                            
0000A0EA                            loc_9654:				; XREF: Obj1F_WalkOnFloor
0000A0EA 4EB9 0000 0000             		jsr	ObjHitFloor
0000A0F0 D368 000C                  		add.w	d1,$C(a0)
0000A0F4 1143 0026                  		move.b	d3,$26(a0)
0000A0F8 6100 0000                  		bsr.w	Obj1F_SetAni
0000A0FC 5600                       		addq.b	#3,d0
0000A0FE 1140 001C                  		move.b	d0,$1C(a0)
0000A102 4E75                       		rts	
0000A104                            ; ===========================================================================
0000A104                            
0000A104                            loc_966E:				; XREF: Obj1F_WalkOnFloor
0000A104 5528 0025                  		subq.b	#2,$25(a0)
0000A108 317C 003B 0030             		move.w	#59,$30(a0)
0000A10E 317C 0000 0010             		move.w	#0,$10(a0)
0000A114 6100 0000                  		bsr.w	Obj1F_SetAni
0000A118 1140 001C                  		move.b	d0,$1C(a0)
0000A11C 4E75                       		rts	
0000A11E                            ; ---------------------------------------------------------------------------
0000A11E                            ; Subroutine to	set the	correct	animation for a	Crabmeat
0000A11E                            ; ---------------------------------------------------------------------------
0000A11E                            
0000A11E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A11E                            
0000A11E                            
0000A11E                            Obj1F_SetAni:				; XREF: loc_966E
0000A11E 7000                       		moveq	#0,d0
0000A120 1628 0026                  		move.b	$26(a0),d3
0000A124 6B00                       		bmi.s	loc_96A4
0000A126 0C03 0006                  		cmpi.b	#6,d3
0000A12A 6500                       		bcs.s	locret_96A2
0000A12C 7001                       		moveq	#1,d0
0000A12E 0828 0000 0022             		btst	#0,$22(a0)
0000A134 6600                       		bne.s	locret_96A2
0000A136 7002                       		moveq	#2,d0
0000A138                            
0000A138                            locret_96A2:
0000A138 4E75                       		rts	
0000A13A                            ; ===========================================================================
0000A13A                            
0000A13A                            loc_96A4:				; XREF: Obj1F_SetAni
0000A13A 0C03 00FA                  		cmpi.b	#-6,d3
0000A13E 6200                       		bhi.s	locret_96B6
0000A140 7002                       		moveq	#2,d0
0000A142 0828 0000 0022             		btst	#0,$22(a0)
0000A148 6600                       		bne.s	locret_96B6
0000A14A 7001                       		moveq	#1,d0
0000A14C                            
0000A14C                            locret_96B6:
0000A14C 4E75                       		rts	
0000A14E                            ; End of function Obj1F_SetAni
0000A14E                            
0000A14E                            ; ===========================================================================
0000A14E                            
0000A14E                            Obj1F_Delete:				; XREF: Obj1F_Index
0000A14E 6100 0000                  		bsr.w	DeleteObject
0000A152 4E75                       		rts	
0000A154                            ; ===========================================================================
0000A154                            ; ---------------------------------------------------------------------------
0000A154                            ; Sub-object - missile that the	Crabmeat throws
0000A154                            ; ---------------------------------------------------------------------------
0000A154                            
0000A154                            Obj1F_BallMain:				; XREF: Obj1F_Index
0000A154 5428 0024                  		addq.b	#2,$24(a0)
0000A158 217C 0000 0000 0004        		move.l	#Map_obj1F,4(a0)
0000A160 317C 0400 0002             		move.w	#$400,2(a0)
0000A166 117C 0004 0001             		move.b	#4,1(a0)
0000A16C 117C 0003 0018             		move.b	#3,$18(a0)
0000A172 117C 0087 0020             		move.b	#$87,$20(a0)
0000A178 117C 0008 0019             		move.b	#8,$19(a0)
0000A17E 317C FC00 0012             		move.w	#-$400,$12(a0)
0000A184 117C 0007 001C             		move.b	#7,$1C(a0)
0000A18A                            
0000A18A                            Obj1F_BallMove:				; XREF: Obj1F_Index
0000A18A 43F9 0000 0000             		lea	(Ani_obj1F).l,a1
0000A190 6100 0000                  		bsr.w	AnimateSprite
0000A194 6100 0000                  		bsr.w	ObjectFall
0000A198 6100 0000                  		bsr.w	DisplaySprite
0000A19C 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000A1A0 0640 00E0                  		addi.w	#$E0,d0
0000A1A4 B068 000C                  		cmp.w	$C(a0),d0	; has object moved below the level boundary?
0000A1A8 6500                       		bcs.s	Obj1F_Delete2	; if yes, branch
0000A1AA 4E75                       		rts	
0000A1AC                            ; ===========================================================================
0000A1AC                            
0000A1AC                            Obj1F_Delete2:
0000A1AC 6000 0000                  		bra.w	DeleteObject
0000A1B0                            ; ===========================================================================
0000A1B0                            Ani_obj1F:
0000A1B0                            	include "_anim\obj1F.asm"
0000A1B0                            ; ---------------------------------------------------------------------------
0000A1B0                            ; Animation script - Crabmeat enemy
0000A1B0                            ; ---------------------------------------------------------------------------
0000A1B0 0000 0000 0000             		dc.w byte_972A-Ani_obj1F, byte_972E-Ani_obj1F, byte_9732-Ani_obj1F
0000A1B6 0000 0000 0000             		dc.w byte_9736-Ani_obj1F, byte_973C-Ani_obj1F, byte_9742-Ani_obj1F
0000A1BC 0000 0000                  		dc.w byte_9748-Ani_obj1F, byte_974C-Ani_obj1F
0000A1C0 0F00 FF00                  byte_972A:	dc.b $F, 0, $FF, 0
0000A1C4 0F02 FF00                  byte_972E:	dc.b $F, 2, $FF, 0
0000A1C8 0F22 FF00                  byte_9732:	dc.b $F, $22, $FF, 0
0000A1CC 0F01 2100 FF00             byte_9736:	dc.b $F, 1, $21, 0, $FF, 0
0000A1D2 0F21 0302 FF00             byte_973C:	dc.b $F, $21, 3, 2, $FF, 0
0000A1D8 0F01 2322 FF00             byte_9742:	dc.b $F, 1, $23, $22, $FF, 0
0000A1DE 0F04 FF00                  byte_9748:	dc.b $F, 4, $FF, 0
0000A1E2 0105 06FF                  byte_974C:	dc.b 1,	5, 6, $FF
0000A1E6                            		even
0000A1E6                            		even
0000A1E6                            
0000A1E6                            ; ---------------------------------------------------------------------------
0000A1E6                            ; Sprite mappings - Crabmeat enemy (GHZ, SYZ)
0000A1E6                            ; ---------------------------------------------------------------------------
0000A1E6                            Map_obj1F:
0000A1E6                            	include "_maps\obj1F.asm"
0000A1E6                            ; ---------------------------------------------------------------------------
0000A1E6                            ; Sprite mappings - Crabmeat enemy (GHZ, SYZ)
0000A1E6                            ; ---------------------------------------------------------------------------
0000A1E6 0000 0000                  		dc.w byte_975E-Map_obj1F, byte_9773-Map_obj1F
0000A1EA 0000 0000                  		dc.w byte_9788-Map_obj1F, byte_979D-Map_obj1F
0000A1EE 0000 0000                  		dc.w byte_97B2-Map_obj1F, byte_97D1-Map_obj1F
0000A1F2 0000                       		dc.w byte_97D7-Map_obj1F
0000A1F4 04                         byte_975E:	dc.b 4
0000A1F5 F009 0000 E8               		dc.b $F0, 9, 0,	0, $E8
0000A1FA F009 0800 00               		dc.b $F0, 9, 8,	0, 0
0000A1FF 0005 0006 F0               		dc.b 0,	5, 0, 6, $F0
0000A204 0005 0806 00               		dc.b 0,	5, 8, 6, 0
0000A209 04                         byte_9773:	dc.b 4
0000A20A F009 000A E8               		dc.b $F0, 9, 0,	$A, $E8
0000A20F F009 0010 00               		dc.b $F0, 9, 0,	$10, 0
0000A214 0005 0016 F0               		dc.b 0,	5, 0, $16, $F0
0000A219 0009 001A 00               		dc.b 0,	9, 0, $1A, 0
0000A21E 04                         byte_9788:	dc.b 4
0000A21F EC09 0000 E8               		dc.b $EC, 9, 0,	0, $E8
0000A224 EC09 0800 00               		dc.b $EC, 9, 8,	0, 0
0000A229 FC05 0806 00               		dc.b $FC, 5, 8,	6, 0
0000A22E FC06 0020 F0               		dc.b $FC, 6, 0,	$20, $F0
0000A233 04                         byte_979D:	dc.b 4
0000A234 EC09 000A E8               		dc.b $EC, 9, 0,	$A, $E8
0000A239 EC09 0010 00               		dc.b $EC, 9, 0,	$10, 0
0000A23E FC09 0026 00               		dc.b $FC, 9, 0,	$26, 0
0000A243 FC06 002C F0               		dc.b $FC, 6, 0,	$2C, $F0
0000A248 06                         byte_97B2:	dc.b 6
0000A249 F004 0032 F0               		dc.b $F0, 4, 0,	$32, $F0
0000A24E F004 0832 00               		dc.b $F0, 4, 8,	$32, 0
0000A253 F809 0034 E8               		dc.b $F8, 9, 0,	$34, $E8
0000A258 F809 0834 00               		dc.b $F8, 9, 8,	$34, 0
0000A25D 0804 003A F0               		dc.b 8,	4, 0, $3A, $F0
0000A262 0804 083A 00               		dc.b 8,	4, 8, $3A, 0
0000A267 01                         byte_97D1:	dc.b 1
0000A268 F805 003C F8               		dc.b $F8, 5, 0,	$3C, $F8
0000A26D 01                         byte_97D7:	dc.b 1
0000A26E F805 0040 F8               		dc.b $F8, 5, 0,	$40, $F8
0000A274 00                         		even
0000A274 00                         		even
0000A274                            
0000A274                            ; ===========================================================================
0000A274                            ; ---------------------------------------------------------------------------
0000A274                            ; Object 22 - Buzz Bomber enemy	(GHZ, MZ, SYZ)
0000A274                            ; ---------------------------------------------------------------------------
0000A274                            
0000A274                            Obj22:					; XREF: Obj_Index
0000A274 7000                       		moveq	#0,d0
0000A276 1028 0024                  		move.b	$24(a0),d0
0000A27A 323B 0000                  		move.w	Obj22_Index(pc,d0.w),d1
0000A27E 4EFB 1000                  		jmp	Obj22_Index(pc,d1.w)
0000A282                            ; ===========================================================================
0000A282 0000                       Obj22_Index:	dc.w Obj22_Main-Obj22_Index
0000A284 0000                       		dc.w Obj22_Action-Obj22_Index
0000A286 0000                       		dc.w Obj22_Delete-Obj22_Index
0000A288                            ; ===========================================================================
0000A288                            
0000A288                            Obj22_Main:				; XREF: Obj22_Index
0000A288 5428 0024                  		addq.b	#2,$24(a0)
0000A28C 217C 0000 0000 0004        		move.l	#Map_obj22,4(a0)
0000A294 317C 0444 0002             		move.w	#$444,2(a0)
0000A29A 117C 0004 0001             		move.b	#4,1(a0)
0000A2A0 117C 0003 0018             		move.b	#3,$18(a0)
0000A2A6 117C 0008 0020             		move.b	#8,$20(a0)
0000A2AC 117C 0018 0019             		move.b	#$18,$19(a0)
0000A2B2                            
0000A2B2                            Obj22_Action:				; XREF: Obj22_Index
0000A2B2 7000                       		moveq	#0,d0
0000A2B4 1028 0025                  		move.b	$25(a0),d0
0000A2B8 323B 0000                  		move.w	Obj22_Index2(pc,d0.w),d1
0000A2BC 4EBB 1000                  		jsr	Obj22_Index2(pc,d1.w)
0000A2C0 43F9 0000 0000             		lea	(Ani_obj22).l,a1
0000A2C6 6100 0000                  		bsr.w	AnimateSprite
0000A2CA 6000 0000                  		bra.w	MarkObjGone
0000A2CE                            ; ===========================================================================
0000A2CE 0000                       Obj22_Index2:	dc.w Obj22_Move-Obj22_Index2
0000A2D0 0000                       		dc.w Obj22_ChkNrSonic-Obj22_Index2
0000A2D2                            ; ===========================================================================
0000A2D2                            
0000A2D2                            Obj22_Move:				; XREF: Obj22_Index2
0000A2D2 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
0000A2D6 6A00                       		bpl.s	locret_986C	; if time remains, branch
0000A2D8 0828 0001 0034             		btst	#1,$34(a0)	; is Buzz Bomber near Sonic?
0000A2DE 6600                       		bne.s	Obj22_Fire	; if yes, branch
0000A2E0 5428 0025                  		addq.b	#2,$25(a0)
0000A2E4 317C 007F 0032             		move.w	#127,$32(a0)	; set time delay to just over 2	seconds
0000A2EA 317C 0400 0010             		move.w	#$400,$10(a0)	; move Buzz Bomber to the right
0000A2F0 117C 0001 001C             		move.b	#1,$1C(a0)	; use "flying" animation
0000A2F6 0828 0000 0022             		btst	#0,$22(a0)	; is Buzz Bomber facing	left?
0000A2FC 6600                       		bne.s	locret_986C	; if not, branch
0000A2FE 4468 0010                  		neg.w	$10(a0)		; move Buzz Bomber to the left
0000A302                            
0000A302                            locret_986C:
0000A302 4E75                       		rts	
0000A304                            ; ===========================================================================
0000A304                            
0000A304                            Obj22_Fire:				; XREF: Obj22_Move
0000A304 6100 0000                  		bsr.w	SingleObjLoad
0000A308 6600                       		bne.s	locret_98D0
0000A30A 12BC 0023                  		move.b	#$23,0(a1)	; load missile object
0000A30E 3368 0008 0008             		move.w	8(a0),8(a1)
0000A314 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A31A 0669 001C 000C             		addi.w	#$1C,$C(a1)
0000A320 337C 0200 0012             		move.w	#$200,$12(a1)	; move missile downwards
0000A326 337C 0200 0010             		move.w	#$200,$10(a1)	; move missile to the right
0000A32C 303C 0018                  		move.w	#$18,d0
0000A330 0828 0000 0022             		btst	#0,$22(a0)	; is Buzz Bomber facing	left?
0000A336 6600                       		bne.s	loc_98AA	; if not, branch
0000A338 4440                       		neg.w	d0
0000A33A 4469 0010                  		neg.w	$10(a1)		; move missile to the left
0000A33E                            
0000A33E                            loc_98AA:
0000A33E D169 0008                  		add.w	d0,8(a1)
0000A342 1368 0022 0022             		move.b	$22(a0),$22(a1)
0000A348 337C 000E 0032             		move.w	#$E,$32(a1)
0000A34E 2348 003C                  		move.l	a0,$3C(a1)
0000A352 117C 0001 0034             		move.b	#1,$34(a0)	; set to "already fired" to prevent refiring
0000A358 317C 003B 0032             		move.w	#$3B,$32(a0)
0000A35E 117C 0002 001C             		move.b	#2,$1C(a0)	; use "firing" animation
0000A364                            
0000A364                            locret_98D0:
0000A364 4E75                       		rts	
0000A366                            ; ===========================================================================
0000A366                            
0000A366                            Obj22_ChkNrSonic:			; XREF: Obj22_Index2
0000A366 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
0000A36A 6B00                       		bmi.s	Obj22_ChgDir
0000A36C 6100 0000                  		bsr.w	SpeedToPos
0000A370 4A28 0034                  		tst.b	$34(a0)
0000A374 6600                       		bne.s	locret_992A
0000A376 3038 D008                  		move.w	($FFFFD008).w,d0
0000A37A 9068 0008                  		sub.w	8(a0),d0
0000A37E 6A00                       		bpl.s	Obj22_SetNrSonic
0000A380 4440                       		neg.w	d0
0000A382                            
0000A382                            Obj22_SetNrSonic:
0000A382 0C40 0060                  		cmpi.w	#$60,d0		; is Buzz Bomber within	$60 pixels of Sonic?
0000A386 6400                       		bcc.s	locret_992A	; if not, branch
0000A388 4A28 0001                  		tst.b	1(a0)
0000A38C 6A00                       		bpl.s	locret_992A
0000A38E 117C 0002 0034             		move.b	#2,$34(a0)	; set Buzz Bomber to "near Sonic"
0000A394 317C 001D 0032             		move.w	#29,$32(a0)	; set time delay to half a second
0000A39A 6000                       		bra.s	Obj22_Stop
0000A39C                            ; ===========================================================================
0000A39C                            
0000A39C                            Obj22_ChgDir:				; XREF: Obj22_ChkNrSonic
0000A39C 117C 0000 0034             		move.b	#0,$34(a0)	; set Buzz Bomber to "normal"
0000A3A2 0868 0000 0022             		bchg	#0,$22(a0)	; change direction
0000A3A8 317C 003B 0032             		move.w	#59,$32(a0)
0000A3AE                            
0000A3AE                            Obj22_Stop:				; XREF: Obj22_SetNrSonic
0000A3AE 5528 0025                  		subq.b	#2,$25(a0)	; run "Obj22_Fire" routine
0000A3B2 317C 0000 0010             		move.w	#0,$10(a0)	; stop Buzz Bomber moving
0000A3B8 117C 0000 001C             		move.b	#0,$1C(a0)	; use "hovering" animation
0000A3BE                            
0000A3BE                            locret_992A:
0000A3BE 4E75                       		rts	
0000A3C0                            ; ===========================================================================
0000A3C0                            
0000A3C0                            Obj22_Delete:				; XREF: Obj22_Index
0000A3C0 6100 0000                  		bsr.w	DeleteObject
0000A3C4 4E75                       		rts	
0000A3C6                            ; ===========================================================================
0000A3C6                            ; ---------------------------------------------------------------------------
0000A3C6                            ; Object 23 - missile that Buzz	Bomber throws
0000A3C6                            ; ---------------------------------------------------------------------------
0000A3C6                            
0000A3C6                            Obj23:					; XREF: Obj_Index
0000A3C6 7000                       		moveq	#0,d0
0000A3C8 1028 0024                  		move.b	$24(a0),d0
0000A3CC 323B 0000                  		move.w	Obj23_Index(pc,d0.w),d1
0000A3D0 4EFB 1000                  		jmp	Obj23_Index(pc,d1.w)
0000A3D4                            ; ===========================================================================
0000A3D4 0000                       Obj23_Index:	dc.w Obj23_Main-Obj23_Index
0000A3D6 0000                       		dc.w Obj23_Animate-Obj23_Index
0000A3D8 0000                       		dc.w Obj23_FromBuzz-Obj23_Index
0000A3DA 0000                       		dc.w Obj23_Delete-Obj23_Index
0000A3DC 0000                       		dc.w Obj23_FromNewt-Obj23_Index
0000A3DE                            ; ===========================================================================
0000A3DE                            
0000A3DE                            Obj23_Main:				; XREF: Obj23_Index
0000A3DE 5368 0032                  		subq.w	#1,$32(a0)
0000A3E2 6A00                       		bpl.s	Obj23_ChkCancel
0000A3E4 5428 0024                  		addq.b	#2,$24(a0)
0000A3E8 217C 0000 0000 0004        		move.l	#Map_obj23,4(a0)
0000A3F0 317C 2444 0002             		move.w	#$2444,2(a0)
0000A3F6 117C 0004 0001             		move.b	#4,1(a0)
0000A3FC 117C 0003 0018             		move.b	#3,$18(a0)
0000A402 117C 0008 0019             		move.b	#8,$19(a0)
0000A408 0228 0003 0022             		andi.b	#3,$22(a0)
0000A40E 4A28 0028                  		tst.b	$28(a0)		; was object created by	a Newtron?
0000A412 6700                       		beq.s	Obj23_Animate	; if not, branch
0000A414 117C 0008 0024             		move.b	#8,$24(a0)	; run "Obj23_FromNewt" routine
0000A41A 117C 0087 0020             		move.b	#$87,$20(a0)
0000A420 117C 0001 001C             		move.b	#1,$1C(a0)
0000A426 6000                       		bra.s	Obj23_Animate2
0000A428                            ; ===========================================================================
0000A428                            
0000A428                            Obj23_Animate:				; XREF: Obj23_Index
0000A428 6100                       		bsr.s	Obj23_ChkCancel
0000A42A 43F9 0000 0000             		lea	(Ani_obj23).l,a1
0000A430 6100 0000                  		bsr.w	AnimateSprite
0000A434 6000 0000                  		bra.w	DisplaySprite
0000A438                            ; ---------------------------------------------------------------------------
0000A438                            ; Subroutine to	check if the Buzz Bomber which fired the missile has been
0000A438                            ; destroyed, and if it has, then cancel	the missile
0000A438                            ; ---------------------------------------------------------------------------
0000A438                            
0000A438                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A438                            
0000A438                            
0000A438                            Obj23_ChkCancel:			; XREF: Obj23_Main
0000A438 2268 003C                  		movea.l	$3C(a0),a1
0000A43C 0C11 0027                  		cmpi.b	#$27,0(a1)	; has Buzz Bomber been destroyed?
0000A440 6700                       		beq.s	Obj23_Delete	; if yes, branch
0000A442 4E75                       		rts	
0000A444                            ; End of function Obj23_ChkCancel
0000A444                            
0000A444                            ; ===========================================================================
0000A444                            
0000A444                            Obj23_FromBuzz:				; XREF: Obj23_Index
0000A444 0828 0007 0022             		btst	#7,$22(a0)
0000A44A 6600                       		bne.s	Obj23_Explode
0000A44C 117C 0087 0020             		move.b	#$87,$20(a0)
0000A452 117C 0001 001C             		move.b	#1,$1C(a0)
0000A458 6100 0000                  		bsr.w	SpeedToPos
0000A45C 43F9 0000 0000             		lea	(Ani_obj23).l,a1
0000A462 6100 0000                  		bsr.w	AnimateSprite
0000A466 6100 0000                  		bsr.w	DisplaySprite
0000A46A 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000A46E 0640 00E0                  		addi.w	#$E0,d0
0000A472 B068 000C                  		cmp.w	$C(a0),d0	; has object moved below the level boundary?
0000A476 6500                       		bcs.s	Obj23_Delete	; if yes, branch
0000A478 4E75                       		rts	
0000A47A                            ; ===========================================================================
0000A47A                            
0000A47A                            Obj23_Explode:				; XREF: Obj23_FromBuzz
0000A47A 10BC 0024                  		move.b	#$24,0(a0)	; change object	to an explosion	(Obj24)
0000A47E 117C 0000 0024             		move.b	#0,$24(a0)
0000A484 6000 F30A                  		bra.w	Obj24
0000A488                            ; ===========================================================================
0000A488                            
0000A488                            Obj23_Delete:				; XREF: Obj23_Index
0000A488 6100 0000                  		bsr.w	DeleteObject
0000A48C 4E75                       		rts	
0000A48E                            ; ===========================================================================
0000A48E                            
0000A48E                            Obj23_FromNewt:				; XREF: Obj23_Index
0000A48E 4A28 0001                  		tst.b	1(a0)
0000A492 6AF4                       		bpl.s	Obj23_Delete
0000A494 6100 0000                  		bsr.w	SpeedToPos
0000A498                            
0000A498                            Obj23_Animate2:				; XREF: Obj23_Main
0000A498 43F9 0000 0000             		lea	(Ani_obj23).l,a1
0000A49E 6100 0000                  		bsr.w	AnimateSprite
0000A4A2 6100 0000                  		bsr.w	DisplaySprite
0000A4A6 4E75                       		rts	
0000A4A8                            ; ===========================================================================
0000A4A8                            Ani_obj22:
0000A4A8                            	include "_anim\obj22.asm"
0000A4A8                            ; ---------------------------------------------------------------------------
0000A4A8                            ; Animation script - Buzz Bomber enemy
0000A4A8                            ; ---------------------------------------------------------------------------
0000A4A8 0000                       		dc.w byte_9A1E-Ani_obj22
0000A4AA 0000                       		dc.w byte_9A22-Ani_obj22
0000A4AC 0000                       		dc.w byte_9A26-Ani_obj22
0000A4AE 0100 01FF                  byte_9A1E:	dc.b 1,	0, 1, $FF
0000A4B2 0102 03FF                  byte_9A22:	dc.b 1,	2, 3, $FF
0000A4B6 0104 05FF                  byte_9A26:	dc.b 1,	4, 5, $FF
0000A4BA                            		even
0000A4BA                            		even
0000A4BA                            
0000A4BA                            Ani_obj23:
0000A4BA                            	include "_anim\obj23.asm"
0000A4BA                            ; ---------------------------------------------------------------------------
0000A4BA                            ; Animation script - missile that Buzz Bomber throws
0000A4BA                            ; ---------------------------------------------------------------------------
0000A4BA 0000                       		dc.w byte_9A2E-Ani_obj23
0000A4BC 0000                       		dc.w byte_9A32-Ani_obj23
0000A4BE 0700 01FC                  byte_9A2E:	dc.b 7,	0, 1, $FC
0000A4C2 0102 03FF                  byte_9A32:	dc.b 1,	2, 3, $FF
0000A4C6                            		even
0000A4C6                            		even
0000A4C6                            
0000A4C6                            ; ---------------------------------------------------------------------------
0000A4C6                            ; Sprite mappings - Buzz Bomber	enemy
0000A4C6                            ; ---------------------------------------------------------------------------
0000A4C6                            Map_obj22:
0000A4C6                            	include "_maps\obj22.asm"
0000A4C6                            ; ---------------------------------------------------------------------------
0000A4C6                            ; Sprite mappings - Buzz Bomber	enemy
0000A4C6                            ; ---------------------------------------------------------------------------
0000A4C6 0000 0000                  		dc.w byte_9A42-Map_obj22, byte_9A61-Map_obj22
0000A4CA 0000 0000                  		dc.w byte_9A80-Map_obj22, byte_9AA4-Map_obj22
0000A4CE 0000 0000                  		dc.w byte_9AC8-Map_obj22, byte_9AE7-Map_obj22
0000A4D2 06                         byte_9A42:	dc.b 6
0000A4D3 F409 0000 E8               		dc.b $F4, 9, 0,	0, $E8
0000A4D8 F409 000F 00               		dc.b $F4, 9, 0,	$F, 0
0000A4DD 0408 0015 E8               		dc.b 4,	8, 0, $15, $E8
0000A4E2 0404 0018 00               		dc.b 4,	4, 0, $18, 0
0000A4E7 F108 001A EC               		dc.b $F1, 8, 0,	$1A, $EC
0000A4EC F104 001D 04               		dc.b $F1, 4, 0,	$1D, 4
0000A4F1 06                         byte_9A61:	dc.b 6
0000A4F2 F409 0000 E8               		dc.b $F4, 9, 0,	0, $E8
0000A4F7 F409 000F 00               		dc.b $F4, 9, 0,	$F, 0
0000A4FC 0408 0015 E8               		dc.b 4,	8, 0, $15, $E8
0000A501 0404 0018 00               		dc.b 4,	4, 0, $18, 0
0000A506 F408 001F EC               		dc.b $F4, 8, 0,	$1F, $EC
0000A50B F404 0022 04               		dc.b $F4, 4, 0,	$22, 4
0000A510 07                         byte_9A80:	dc.b 7
0000A511 0400 0030 0C               		dc.b 4,	0, 0, $30, $C
0000A516 F409 0000 E8               		dc.b $F4, 9, 0,	0, $E8
0000A51B F409 000F 00               		dc.b $F4, 9, 0,	$F, 0
0000A520 0408 0015 E8               		dc.b 4,	8, 0, $15, $E8
0000A525 0404 0018 00               		dc.b 4,	4, 0, $18, 0
0000A52A F108 001A EC               		dc.b $F1, 8, 0,	$1A, $EC
0000A52F F104 001D 04               		dc.b $F1, 4, 0,	$1D, 4
0000A534 07                         byte_9AA4:	dc.b 7
0000A535 0404 0031 0C               		dc.b 4,	4, 0, $31, $C
0000A53A F409 0000 E8               		dc.b $F4, 9, 0,	0, $E8
0000A53F F409 000F 00               		dc.b $F4, 9, 0,	$F, 0
0000A544 0408 0015 E8               		dc.b 4,	8, 0, $15, $E8
0000A549 0404 0018 00               		dc.b 4,	4, 0, $18, 0
0000A54E F408 001F EC               		dc.b $F4, 8, 0,	$1F, $EC
0000A553 F404 0022 04               		dc.b $F4, 4, 0,	$22, 4
0000A558 06                         byte_9AC8:	dc.b 6
0000A559 F40D 0000 EC               		dc.b $F4, $D, 0, 0, $EC
0000A55E 040C 0008 EC               		dc.b 4,	$C, 0, 8, $EC
0000A563 0400 000C 0C               		dc.b 4,	0, 0, $C, $C
0000A568 0C04 000D F4               		dc.b $C, 4, 0, $D, $F4
0000A56D F108 001A EC               		dc.b $F1, 8, 0,	$1A, $EC
0000A572 F104 001D 04               		dc.b $F1, 4, 0,	$1D, 4
0000A577 04                         byte_9AE7:	dc.b 4
0000A578 F40D 0000 EC               		dc.b $F4, $D, 0, 0, $EC
0000A57D 040C 0008 EC               		dc.b 4,	$C, 0, 8, $EC
0000A582 0400 000C 0C               		dc.b 4,	0, 0, $C, $C
0000A587 0C04 000D F4               		dc.b $C, 4, 0, $D, $F4
0000A58C F408 001F EC               		dc.b $F4, 8, 0,	$1F, $EC
0000A591 F404 0022 04               		dc.b $F4, 4, 0,	$22, 4
0000A596                            		even
0000A596                            		even
0000A596                            
0000A596                            ; ---------------------------------------------------------------------------
0000A596                            ; Sprite mappings - missile that Buzz Bomber throws
0000A596                            ; ---------------------------------------------------------------------------
0000A596                            Map_obj23:
0000A596                            	include "_maps\obj23.asm"
0000A596                            ; ---------------------------------------------------------------------------
0000A596                            ; Sprite mappings - missile that Buzz Bomber throws
0000A596                            ; ---------------------------------------------------------------------------
0000A596 0000 0000                  		dc.w byte_9B0E-Map_obj23, byte_9B14-Map_obj23
0000A59A 0000 0000                  		dc.w byte_9B1A-Map_obj23, byte_9B20-Map_obj23
0000A59E 01                         byte_9B0E:	dc.b 1
0000A59F F805 0024 F8               		dc.b $F8, 5, 0,	$24, $F8
0000A5A4 01                         byte_9B14:	dc.b 1
0000A5A5 F805 0028 F8               		dc.b $F8, 5, 0,	$28, $F8
0000A5AA 01                         byte_9B1A:	dc.b 1
0000A5AB F805 002C F8               		dc.b $F8, 5, 0,	$2C, $F8
0000A5B0 01                         byte_9B20:	dc.b 1
0000A5B1 F805 0033 F8               		dc.b $F8, 5, 0,	$33, $F8
0000A5B6                            		even
0000A5B6                            		even
0000A5B6                            
0000A5B6                            ; ===========================================================================
0000A5B6                            ; ---------------------------------------------------------------------------
0000A5B6                            ; Object 25 - rings
0000A5B6                            ; ---------------------------------------------------------------------------
0000A5B6                            
0000A5B6                            Obj25:					; XREF: Obj_Index
0000A5B6 7000                       		moveq	#0,d0
0000A5B8 1028 0024                  		move.b	$24(a0),d0
0000A5BC 323B 0000                  		move.w	Obj25_Index(pc,d0.w),d1
0000A5C0 4EFB 1000                  		jmp	Obj25_Index(pc,d1.w)
0000A5C4                            ; ===========================================================================
0000A5C4 0000                       Obj25_Index:	dc.w Obj25_Main-Obj25_Index
0000A5C6 0000                       		dc.w Obj25_Animate-Obj25_Index
0000A5C8 0000                       		dc.w Obj25_Collect-Obj25_Index
0000A5CA 0000                       		dc.w Obj25_Sparkle-Obj25_Index
0000A5CC 0000                       		dc.w Obj25_Delete-Obj25_Index
0000A5CE                            ; ---------------------------------------------------------------------------
0000A5CE                            ; Distances between rings (format: horizontal, vertical)
0000A5CE                            ; ---------------------------------------------------------------------------
0000A5CE 1000                       Obj25_PosData:	dc.b $10, 0		; horizontal tight
0000A5D0 1800                       		dc.b $18, 0		; horizontal normal
0000A5D2 2000                       		dc.b $20, 0		; horizontal wide
0000A5D4 0010                       		dc.b 0,	$10		; vertical tight
0000A5D6 0018                       		dc.b 0,	$18		; vertical normal
0000A5D8 0020                       		dc.b 0,	$20		; vertical wide
0000A5DA 1010                       		dc.b $10, $10		; diagonal
0000A5DC 1818                       		dc.b $18, $18
0000A5DE 2020                       		dc.b $20, $20
0000A5E0 F010                       		dc.b $F0, $10
0000A5E2 E818                       		dc.b $E8, $18
0000A5E4 E020                       		dc.b $E0, $20
0000A5E6 1008                       		dc.b $10, 8
0000A5E8 1810                       		dc.b $18, $10
0000A5EA F008                       		dc.b $F0, 8
0000A5EC E810                       		dc.b $E8, $10
0000A5EE                            ; ===========================================================================
0000A5EE                            
0000A5EE                            Obj25_Main:				; XREF: Obj25_Index
0000A5EE 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000A5F2 7000                       		moveq	#0,d0
0000A5F4 1028 0023                  		move.b	$23(a0),d0
0000A5F8 45F2 0002                  		lea	2(a2,d0.w),a2
0000A5FC 1812                       		move.b	(a2),d4
0000A5FE 1228 0028                  		move.b	$28(a0),d1
0000A602 1001                       		move.b	d1,d0
0000A604 0241 0007                  		andi.w	#7,d1
0000A608 0C41 0007                  		cmpi.w	#7,d1
0000A60C 6600                       		bne.s	loc_9B80
0000A60E 7206                       		moveq	#6,d1
0000A610                            
0000A610                            loc_9B80:
0000A610 4841                       		swap	d1
0000A612 323C 0000                  		move.w	#0,d1
0000A616 E808                       		lsr.b	#4,d0
0000A618 D040                       		add.w	d0,d0
0000A61A 1A3B 00B2                  		move.b	Obj25_PosData(pc,d0.w),d5 ; load ring spacing data
0000A61E 4885                       		ext.w	d5
0000A620 1C3B 00AD                  		move.b	Obj25_PosData+1(pc,d0.w),d6
0000A624 4886                       		ext.w	d6
0000A626 2248                       		movea.l	a0,a1
0000A628 3428 0008                  		move.w	8(a0),d2
0000A62C 3628 000C                  		move.w	$C(a0),d3
0000A630 E20C                       		lsr.b	#1,d4
0000A632 6500                       		bcs.s	loc_9C02
0000A634 0892 0007                  		bclr	#7,(a2)
0000A638 6000                       		bra.s	loc_9BBA
0000A63A                            ; ===========================================================================
0000A63A                            
0000A63A                            Obj25_MakeRings:
0000A63A 4841                       		swap	d1
0000A63C E20C                       		lsr.b	#1,d4
0000A63E 6500                       		bcs.s	loc_9C02
0000A640 0892 0007                  		bclr	#7,(a2)
0000A644 6100 0000                  		bsr.w	SingleObjLoad
0000A648 6600                       		bne.s	loc_9C0E
0000A64A                            
0000A64A                            loc_9BBA:				; XREF: Obj25_Main
0000A64A 12BC 0025                  		move.b	#$25,0(a1)	; load ring object
0000A64E 5429 0024                  		addq.b	#2,$24(a1)
0000A652 3342 0008                  		move.w	d2,8(a1)	; set x-axis position based on d2
0000A656 3368 0008 0032             		move.w	8(a0),$32(a1)
0000A65C 3343 000C                  		move.w	d3,$C(a1)	; set y-axis position based on d3
0000A660 237C 0000 0000 0004        		move.l	#Map_obj25,4(a1)
0000A668 337C 27B2 0002             		move.w	#$27B2,2(a1)
0000A66E 137C 0004 0001             		move.b	#4,1(a1)
0000A674 137C 0002 0018             		move.b	#2,$18(a1)
0000A67A 137C 0047 0020             		move.b	#$47,$20(a1)
0000A680 137C 0008 0019             		move.b	#8,$19(a1)
0000A686 1368 0023 0023             		move.b	$23(a0),$23(a1)
0000A68C 1341 0034                  		move.b	d1,$34(a1)
0000A690                            
0000A690                            loc_9C02:
0000A690 5241                       		addq.w	#1,d1
0000A692 D445                       		add.w	d5,d2		; add ring spacing value to d2
0000A694 D646                       		add.w	d6,d3		; add ring spacing value to d3
0000A696 4841                       		swap	d1
0000A698 51C9 FFA0                  		dbf	d1,Obj25_MakeRings ; repeat for	number of rings
0000A69C                            
0000A69C                            loc_9C0E:
0000A69C 0812 0000                  		btst	#0,(a2)
0000A6A0 6600 0000                  		bne.w	DeleteObject
0000A6A4                            
0000A6A4                            Obj25_Animate:				; XREF: Obj25_Index
0000A6A4 1178 FEC3 001A             		move.b	($FFFFFEC3).w,$1A(a0) ;	set frame
0000A6AA 6100 0000                  		bsr.w	DisplaySprite
0000A6AE 3028 0032                  		move.w	$32(a0),d0
0000A6B2 0240 FF80                  		andi.w	#$FF80,d0
0000A6B6 3238 F700                  		move.w	($FFFFF700).w,d1
0000A6BA 0441 0080                  		subi.w	#$80,d1
0000A6BE 0241 FF80                  		andi.w	#$FF80,d1
0000A6C2 9041                       		sub.w	d1,d0
0000A6C4 0C40 0280                  		cmpi.w	#$280,d0
0000A6C8 6200                       		bhi.s	Obj25_Delete
0000A6CA 4E75                       		rts	
0000A6CC                            ; ===========================================================================
0000A6CC                            
0000A6CC                            Obj25_Collect:				; XREF: Obj25_Index
0000A6CC 5428 0024                  		addq.b	#2,$24(a0)
0000A6D0 117C 0000 0020             		move.b	#0,$20(a0)
0000A6D6 117C 0001 0018             		move.b	#1,$18(a0)
0000A6DC 6100 0000                  		bsr.w	CollectRing
0000A6E0 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000A6E4 7000                       		moveq	#0,d0
0000A6E6 1028 0023                  		move.b	$23(a0),d0
0000A6EA 1228 0034                  		move.b	$34(a0),d1
0000A6EE 03F2 0002                  		bset	d1,2(a2,d0.w)
0000A6F2                            
0000A6F2                            Obj25_Sparkle:				; XREF: Obj25_Index
0000A6F2 43F9 0000 0000             		lea	(Ani_obj25).l,a1
0000A6F8 6100 0000                  		bsr.w	AnimateSprite
0000A6FC 6000 0000                  		bra.w	DisplaySprite
0000A700                            ; ===========================================================================
0000A700                            
0000A700                            Obj25_Delete:				; XREF: Obj25_Index
0000A700 6000 0000                  		bra.w	DeleteObject
0000A704                            
0000A704                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A704                            
0000A704                            
0000A704                            CollectRing:				; XREF: Obj25_Collect
0000A704 5278 FE20                  		addq.w	#1,($FFFFFE20).w ; add 1 to rings
0000A708 0038 0001 FE1D             		ori.b	#1,($FFFFFE1D).w ; update the rings counter
0000A70E 303C 00B5                  		move.w	#$B5,d0		; play ring sound
0000A712 0C78 0064 FE20             		cmpi.w	#100,($FFFFFE20).w ; do	you have < 100 rings?
0000A718 6500                       		bcs.s	Obj25_PlaySnd	; if yes, branch
0000A71A 08F8 0001 FE1B             		bset	#1,($FFFFFE1B).w ; update lives	counter
0000A720 6700                       		beq.s	loc_9CA4
0000A722 0C78 00C8 FE20             		cmpi.w	#200,($FFFFFE20).w ; do	you have < 200 rings?
0000A728 6500                       		bcs.s	Obj25_PlaySnd	; if yes, branch
0000A72A 08F8 0002 FE1B             		bset	#2,($FFFFFE1B).w ; update lives	counter
0000A730 6600                       		bne.s	Obj25_PlaySnd
0000A732                            
0000A732                            loc_9CA4:
0000A732 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to the	number of lives	you have
0000A736 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to the	lives counter
0000A73A 303C 0088                  		move.w	#$88,d0		; play extra life music
0000A73E                            
0000A73E                            Obj25_PlaySnd:
0000A73E 4EF9 0000 1476             		jmp	(PlaySound_Special).l
0000A744                            ; End of function CollectRing
0000A744                            
0000A744                            ; ===========================================================================
0000A744                            ; ---------------------------------------------------------------------------
0000A744                            ; Object 37 - rings flying out of Sonic	when he's hit
0000A744                            ; ---------------------------------------------------------------------------
0000A744                            
0000A744                            Obj37:					; XREF: Obj_Index
0000A744 7000                       		moveq	#0,d0
0000A746 1028 0024                  		move.b	$24(a0),d0
0000A74A 323B 0000                  		move.w	Obj37_Index(pc,d0.w),d1
0000A74E 4EFB 1000                  		jmp	Obj37_Index(pc,d1.w)
0000A752                            ; ===========================================================================
0000A752 0000                       Obj37_Index:	dc.w Obj37_CountRings-Obj37_Index
0000A754 0000                       		dc.w Obj37_Bounce-Obj37_Index
0000A756 0000                       		dc.w Obj37_Collect-Obj37_Index
0000A758 0000                       		dc.w Obj37_Sparkle-Obj37_Index
0000A75A 0000                       		dc.w Obj37_Delete-Obj37_Index
0000A75C                            ; ===========================================================================
0000A75C                            
0000A75C                            Obj37_CountRings:			; XREF: Obj37_Index
0000A75C 2248                       		movea.l	a0,a1
0000A75E 7A00                       		moveq	#0,d5
0000A760 3A38 FE20                  		move.w	($FFFFFE20).w,d5 ; check number	of rings you have
0000A764 7020                       		moveq	#32,d0
0000A766 BA40                       		cmp.w	d0,d5		; do you have 32 or more?
0000A768 6500                       		bcs.s	loc_9CDE	; if not, branch
0000A76A 3A00                       		move.w	d0,d5		; if yes, set d5 to 32
0000A76C                            
0000A76C                            loc_9CDE:
0000A76C 5345                       		subq.w	#1,d5
0000A76E 383C 0288                  		move.w	#$288,d4
0000A772 6000                       		bra.s	Obj37_MakeRings
0000A774                            ; ===========================================================================
0000A774                            
0000A774                            Obj37_Loop:
0000A774 6100 0000                  		bsr.w	SingleObjLoad
0000A778 6600 0000                  		bne.w	Obj37_ResetCounter
0000A77C                            
0000A77C                            Obj37_MakeRings:			; XREF: Obj37_CountRings
0000A77C 12BC 0037                  		move.b	#$37,0(a1)	; load bouncing	ring object
0000A780 5429 0024                  		addq.b	#2,$24(a1)
0000A784 137C 0008 0016             		move.b	#8,$16(a1)
0000A78A 137C 0008 0017             		move.b	#8,$17(a1)
0000A790 3368 0008 0008             		move.w	8(a0),8(a1)
0000A796 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A79C 237C 0000 0000 0004        		move.l	#Map_obj25,4(a1)
0000A7A4 337C 27B2 0002             		move.w	#$27B2,2(a1)
0000A7AA 137C 0004 0001             		move.b	#4,1(a1)
0000A7B0 137C 0003 0018             		move.b	#3,$18(a1)
0000A7B6 137C 0047 0020             		move.b	#$47,$20(a1)
0000A7BC 137C 0008 0019             		move.b	#8,$19(a1)
0000A7C2 4A44                       		tst.w	d4
0000A7C4 6B00                       		bmi.s	loc_9D62
0000A7C6 3004                       		move.w	d4,d0
0000A7C8 6100 8C0A                  		bsr.w	CalcSine
0000A7CC 3404                       		move.w	d4,d2
0000A7CE E04A                       		lsr.w	#8,d2
0000A7D0 4A38 F64C                  		tst.b	($FFFFF64C).w		; Does the level have water?
0000A7D4 6700                       		beq.s	@skiphalvingvel		; If not, branch and skip underwater checks
0000A7D6 3C38 F646                  		move.w	($FFFFF646).w,d6	; Move water level to d6
0000A7DA BC68 000C                  		cmp.w	$C(a0),d6		; Is the ring object underneath the water level?
0000A7DE 6E00                       		bgt.s	@skiphalvingvel		; If not, branch and skip underwater commands
0000A7E0 E240                       		asr.w	d0			; Half d0. Makes the ring's x_vel bounce to the left/right slower
0000A7E2 E241                       		asr.w	d1			; Half d1. Makes the ring's y_vel bounce up/down slower
0000A7E4                            
0000A7E4                            @skiphalvingvel:		
0000A7E4 E560                       		asl.w	d2,d0
0000A7E6 E561                       		asl.w	d2,d1
0000A7E8 3400                       		move.w	d0,d2
0000A7EA 3601                       		move.w	d1,d3
0000A7EC 0604 0010                  		addi.b	#$10,d4
0000A7F0 6400                       		bcc.s	loc_9D62
0000A7F2 0444 0080                  		subi.w	#$80,d4
0000A7F6 6400                       		bcc.s	loc_9D62
0000A7F8 383C 0288                  		move.w	#$288,d4
0000A7FC                            
0000A7FC                            loc_9D62:
0000A7FC 3342 0010                  		move.w	d2,$10(a1)
0000A800 3343 0012                  		move.w	d3,$12(a1)
0000A804 4442                       		neg.w	d2
0000A806 4444                       		neg.w	d4
0000A808 51CD FF6A                  		dbf	d5,Obj37_Loop	; repeat for number of rings (max 31)
0000A80C                            
0000A80C                            Obj37_ResetCounter:			; XREF: Obj37_Loop
0000A80C 31FC 0000 FE20             		move.w	#0,($FFFFFE20).w ; reset number	of rings to zero
0000A812 11FC 0080 FE1D             		move.b	#$80,($FFFFFE1D).w ; update ring counter
0000A818 11FC 0000 FE1B             		move.b	#0,($FFFFFE1B).w
0000A81E 70FF                       		moveq	#-1,d0			; Move #-1 to d0
0000A820 1140 001F                  		move.b	d0,$1F(a0)	; Move d0 to new timer
0000A824 11C0 FEC6                  		move.b	d0,($FFFFFEC6).w	; Move d0 to old timer (for animated purposes)
0000A828 303C 00C6                  		move.w	#$C6,d0
0000A82C 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play ring loss sound
0000A832                            
0000A832                            Obj37_Bounce:				; XREF: Obj37_Index
0000A832 1178 FEC7 001A             		move.b	($FFFFFEC7).w,$1A(a0)
0000A838 6100 0000                  		bsr.w	SpeedToPos
0000A83C 0668 0018 0012             		addi.w	#$18,$12(a0)
0000A842 6B00                       		bmi.s	Obj37_ChkDel
0000A844 4A38 F64C                  		tst.b	($FFFFF64C).w		; Does the level have water?
0000A848 6700                       		beq.s	@skipbounceslow		; If not, branch and skip underwater checks
0000A84A 3C38 F646                  		move.w	($FFFFF646).w,d6	; Move water level to d6
0000A84E BC68 000C                  		cmp.w	$C(a0),d6		; Is the ring object underneath the water level?
0000A852 6E00                       		bgt.s	@skipbounceslow		; If not, branch and skip underwater commands
0000A854 0468 000E 0012             		subi.w	#$E,$12(a0)		; Reduce gravity by $E ($18-$E=$A), giving the underwater effect
0000A85A                            
0000A85A                            @skipbounceslow:
0000A85A 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000A85E D007                       		add.b	d7,d0
0000A860 0200 0003                  		andi.b	#3,d0
0000A864 6600                       		bne.s	Obj37_ChkDel
0000A866 4EB9 0000 0000             		jsr	ObjHitFloor
0000A86C 4A41                       		tst.w	d1
0000A86E 6A00                       		bpl.s	Obj37_ChkDel
0000A870 D368 000C                  		add.w	d1,$C(a0)
0000A874 3028 0012                  		move.w	$12(a0),d0
0000A878 E440                       		asr.w	#2,d0
0000A87A 9168 0012                  		sub.w	d0,$12(a0)
0000A87E 4468 0012                  		neg.w	$12(a0)
0000A882                            
0000A882                            Obj37_ChkDel:
0000A882 5328 001F                  		subq.b  #1,$1F(a0)  ; Subtract 1   ; RHS Ring Timer fix
0000A886 6700 0000                                  beq.w   DeleteObject       ; If 0, delete ; RHS Ring Timer fix
0000A88A 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000A88E 0640 00E0                  		addi.w	#$E0,d0
0000A892 B068 000C                  		cmp.w	$C(a0),d0	   ; has object moved below level boundary?
0000A896 6500                       		bcs.s	Obj37_Delete	   ; if yes, branch	
0000A898                            ;Mercury Lost Rings Flash
0000A898 0828 0000 001F             		btst	#0, $1F(a0) ; Test the first bit of the timer, so rings flash every other frame.
0000A89E 6700 0000                  		beq.w	DisplaySprite      ; If the bit is 0, the ring will appear.
0000A8A2 0C28 0050 001F             		cmpi.b	#80,$1F(a0) ; Rings will flash during last 80 steps of their life.
0000A8A8 6200 0000                  		bhi.w	DisplaySprite      ; If the timer is higher than 80, obviously the rings will STAY visible.
0000A8AC 4E75                       		rts
0000A8AE                            ;end Lost Rings Flash
0000A8AE                            ; ===========================================================================
0000A8AE                            
0000A8AE                            Obj37_Collect:				; XREF: Obj37_Index
0000A8AE 5428 0024                  		addq.b	#2,$24(a0)
0000A8B2 117C 0000 0020             		move.b	#0,$20(a0)
0000A8B8 117C 0001 0018             		move.b	#1,$18(a0)
0000A8BE 6100 FE44                  		bsr.w	CollectRing
0000A8C2                            
0000A8C2                            Obj37_Sparkle:				; XREF: Obj37_Index
0000A8C2 43F9 0000 0000             		lea	(Ani_obj25).l,a1
0000A8C8 6100 0000                  		bsr.w	AnimateSprite
0000A8CC 6000 0000                  		bra.w	DisplaySprite
0000A8D0                            ; ===========================================================================
0000A8D0                            
0000A8D0                            Obj37_Delete:				; XREF: Obj37_Index
0000A8D0 6000 0000                  		bra.w	DeleteObject
0000A8D4                            ; ===========================================================================
0000A8D4                            ; ---------------------------------------------------------------------------
0000A8D4                            ; Object 4B - giant ring for entry to special stage
0000A8D4                            ; ---------------------------------------------------------------------------
0000A8D4                            
0000A8D4                            Obj4B:					; XREF: Obj_Index
0000A8D4 7000                       		moveq	#0,d0
0000A8D6 1028 0024                  		move.b	$24(a0),d0
0000A8DA 323B 0000                  		move.w	Obj4B_Index(pc,d0.w),d1
0000A8DE 4EFB 1000                  		jmp	Obj4B_Index(pc,d1.w)
0000A8E2                            ; ===========================================================================
0000A8E2 0000                       Obj4B_Index:	dc.w Obj4B_Main-Obj4B_Index
0000A8E4 0000                       		dc.w Obj4B_Animate-Obj4B_Index
0000A8E6 0000                       		dc.w Obj4B_Collect-Obj4B_Index
0000A8E8 0000                       		dc.w Obj4B_Delete-Obj4B_Index
0000A8EA                            ; ===========================================================================
0000A8EA                            
0000A8EA                            Obj4B_Main:				; XREF: Obj4B_Index
0000A8EA 217C 0000 0000 0004        		move.l	#Map_obj4B,4(a0)
0000A8F2 317C 2400 0002             		move.w	#$2400,2(a0)
0000A8F8 0028 0004 0001             		ori.b	#4,1(a0)
0000A8FE 117C 0040 0019             		move.b	#$40,$19(a0)
0000A904 4A28 0001                  		tst.b	1(a0)
0000A908 6A00                       		bpl.s	Obj4B_Animate
0000A90A 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have 6 emeralds?
0000A910 6700 0000                  		beq.w	Obj4B_Delete	; if yes, branch
0000A914 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	at least 50 rings?
0000A91A 6400                       		bcc.s	Obj4B_Okay	; if yes, branch
0000A91C 4E75                       		rts	
0000A91E                            ; ===========================================================================
0000A91E                            
0000A91E                            Obj4B_Okay:				; XREF: Obj4B_Main
0000A91E 5428 0024                  		addq.b	#2,$24(a0)
0000A922 117C 0002 0018             		move.b	#2,$18(a0)
0000A928 117C 0052 0020             		move.b	#$52,$20(a0)
0000A92E 31FC 0C40 F7BE             		move.w	#$C40,($FFFFF7BE).w
0000A934                            
0000A934                            Obj4B_Animate:				; XREF: Obj4B_Index
0000A934 1178 FEC3 001A             		move.b	($FFFFFEC3).w,$1A(a0)
0000A93A 3028 0008                  		move.w	8(a0),d0
0000A93E 0240 FF80                  		andi.w	#$FF80,d0
0000A942 3238 F700                  		move.w	($FFFFF700).w,d1
0000A946 0441 0080                  		subi.w	#$80,d1
0000A94A 0241 FF80                  		andi.w	#$FF80,d1
0000A94E 9041                       		sub.w	d1,d0
0000A950 0C40 0280                  		cmpi.w	#$280,d0
0000A954 6200 0000                  		bhi.w	DeleteObject
0000A958 6000 0000                  		bra.w	DisplaySprite
0000A95C                            ; ===========================================================================
0000A95C                            
0000A95C                            Obj4B_Collect:				; XREF: Obj4B_Index
0000A95C 5528 0024                  		subq.b	#2,$24(a0)
0000A960 117C 0000 0020             		move.b	#0,$20(a0)
0000A966 6100 0000                  		bsr.w	SingleObjLoad
0000A96A 6600 0000                  		bne.w	Obj4B_PlaySnd
0000A96E 12BC 007C                  		move.b	#$7C,0(a1)	; load giant ring flash	object
0000A972 3368 0008 0008             		move.w	8(a0),8(a1)
0000A978 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A97E 2348 003C                  		move.l	a0,$3C(a1)
0000A982 3038 D008                  		move.w	($FFFFD008).w,d0
0000A986 B068 0008                  		cmp.w	8(a0),d0	; has Sonic come from the left?
0000A98A 6500                       		bcs.s	Obj4B_PlaySnd	; if yes, branch
0000A98C 08E9 0000 0001             		bset	#0,1(a1)	; reverse flash	object
0000A992                            
0000A992                            Obj4B_PlaySnd:
0000A992 303C 00C3                  		move.w	#$C3,d0
0000A996 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play giant ring	sound
0000A99C 6096                       		bra.s	Obj4B_Animate
0000A99E                            ; ===========================================================================
0000A99E                            
0000A99E                            Obj4B_Delete:				; XREF: Obj4B_Index
0000A99E 6000 0000                  		bra.w	DeleteObject
0000A9A2                            ; ===========================================================================
0000A9A2                            ; ---------------------------------------------------------------------------
0000A9A2                            ; Object 7C - flash effect when	you collect the	giant ring
0000A9A2                            ; ---------------------------------------------------------------------------
0000A9A2                            
0000A9A2                            Obj7C:					; XREF: Obj_Index
0000A9A2 7000                       		moveq	#0,d0
0000A9A4 1028 0024                  		move.b	$24(a0),d0
0000A9A8 323B 0000                  		move.w	Obj7C_Index(pc,d0.w),d1
0000A9AC 4EFB 1000                  		jmp	Obj7C_Index(pc,d1.w)
0000A9B0                            ; ===========================================================================
0000A9B0 0000                       Obj7C_Index:	dc.w Obj7C_Main-Obj7C_Index
0000A9B2 0000                       		dc.w Obj7C_ChkDel-Obj7C_Index
0000A9B4 0000                       		dc.w Obj7C_Delete-Obj7C_Index
0000A9B6                            ; ===========================================================================
0000A9B6                            
0000A9B6                            Obj7C_Main:				; XREF: Obj7C_Index
0000A9B6 5428 0024                  		addq.b	#2,$24(a0)
0000A9BA 217C 0000 0000 0004        		move.l	#Map_obj7C,4(a0)
0000A9C2 317C 2462 0002             		move.w	#$2462,2(a0)
0000A9C8 0028 0004 0001             		ori.b	#4,1(a0)
0000A9CE 117C 0000 0018             		move.b	#0,$18(a0)
0000A9D4 117C 0020 0019             		move.b	#$20,$19(a0)
0000A9DA 117C 00FF 001A             		move.b	#$FF,$1A(a0)
0000A9E0                            
0000A9E0                            Obj7C_ChkDel:				; XREF: Obj7C_Index
0000A9E0 6100                       		bsr.s	Obj7C_Collect
0000A9E2 3028 0008                  		move.w	8(a0),d0
0000A9E6 0240 FF80                  		andi.w	#$FF80,d0
0000A9EA 3238 F700                  		move.w	($FFFFF700).w,d1
0000A9EE 0441 0080                  		subi.w	#$80,d1
0000A9F2 0241 FF80                  		andi.w	#$FF80,d1
0000A9F6 9041                       		sub.w	d1,d0
0000A9F8 0C40 0280                  		cmpi.w	#$280,d0
0000A9FC 6200 0000                  		bhi.w	DeleteObject
0000AA00 6000 0000                  		bra.w	DisplaySprite
0000AA04                            
0000AA04                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000AA04                            
0000AA04                            
0000AA04                            Obj7C_Collect:				; XREF: Obj7C_ChkDel
0000AA04 5328 001E                  		subq.b	#1,$1E(a0)
0000AA08 6A00                       		bpl.s	locret_9F76
0000AA0A 117C 0001 001E             		move.b	#1,$1E(a0)
0000AA10 5228 001A                  		addq.b	#1,$1A(a0)
0000AA14 0C28 0008 001A             		cmpi.b	#8,$1A(a0)	; has animation	finished?
0000AA1A 6400                       		bcc.s	Obj7C_End	; if yes, branch
0000AA1C 0C28 0003 001A             		cmpi.b	#3,$1A(a0)	; is 3rd frame displayed?
0000AA22 6600                       		bne.s	locret_9F76	; if not, branch
0000AA24 2268 003C                  		movea.l	$3C(a0),a1
0000AA28 137C 0006 0024             		move.b	#6,$24(a1)	; delete giant ring object (Obj4B)
0000AA2E 11FC 001C D01C             		move.b	#$1C,($FFFFD01C).w ; make Sonic	invisible
0000AA34 11FC 0001 F7CD             		move.b	#1,($FFFFF7CD).w ; stop	Sonic getting bonuses
0000AA3A 4238 FE2D                  		clr.b	($FFFFFE2D).w	; remove invincibility
0000AA3E 4238 FE2C                  		clr.b	($FFFFFE2C).w	; remove shield
0000AA42                            
0000AA42                            locret_9F76:
0000AA42 4E75                       		rts	
0000AA44                            ; ===========================================================================
0000AA44                            
0000AA44                            Obj7C_End:				; XREF: Obj7C_Collect
0000AA44 5428 0024                  		addq.b	#2,$24(a0)
0000AA48 31FC 0000 D000             		move.w	#0,($FFFFD000).w ; remove Sonic	object
0000AA4E 588F                       		addq.l	#4,sp
0000AA50 4E75                       		rts	
0000AA52                            ; End of function Obj7C_Collect
0000AA52                            
0000AA52                            ; ===========================================================================
0000AA52                            
0000AA52                            Obj7C_Delete:				; XREF: Obj7C_Index
0000AA52 6000 0000                  		bra.w	DeleteObject
0000AA56                            ; ===========================================================================
0000AA56                            Ani_obj25:
0000AA56                            	include "_anim\obj25.asm"
0000AA56                            ; ---------------------------------------------------------------------------
0000AA56                            ; Animation script - ring
0000AA56                            ; ---------------------------------------------------------------------------
0000AA56 0000                       		dc.w byte_9F8C-Ani_obj25
0000AA58 0504 0506 07FC             byte_9F8C:	dc.b 5,	4, 5, 6, 7, $FC
0000AA5E                            		even
0000AA5E                            		even
0000AA5E                            
0000AA5E                            ; ---------------------------------------------------------------------------
0000AA5E                            ; Sprite mappings - rings
0000AA5E                            ; ---------------------------------------------------------------------------
0000AA5E                            Map_obj25:
0000AA5E                            	include "_maps\obj25.asm"
0000AA5E                            ; ---------------------------------------------------------------------------
0000AA5E                            ; Sprite mappings - rings
0000AA5E                            ; ---------------------------------------------------------------------------
0000AA5E 0000 0000                  		dc.w byte_9FA2-Map_obj25, byte_9FA8-Map_obj25
0000AA62 0000 0000                  		dc.w byte_9FAE-Map_obj25, byte_9FB4-Map_obj25
0000AA66 0000 0000                  		dc.w byte_9FBA-Map_obj25, byte_9FC0-Map_obj25
0000AA6A 0000 0000                  		dc.w byte_9FC6-Map_obj25, byte_9FCC-Map_obj25
0000AA6E 01                         byte_9FA2:	dc.b 1
0000AA6F F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000AA74 01                         byte_9FA8:	dc.b 1
0000AA75 F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
0000AA7A 01                         byte_9FAE:	dc.b 1
0000AA7B F801 0008 FC               		dc.b $F8, 1, 0,	8, $FC
0000AA80 01                         byte_9FB4:	dc.b 1
0000AA81 F805 0804 F8               		dc.b $F8, 5, 8,	4, $F8
0000AA86 01                         byte_9FBA:	dc.b 1
0000AA87 F805 000A F8               		dc.b $F8, 5, 0,	$A, $F8
0000AA8C 01                         byte_9FC0:	dc.b 1
0000AA8D F805 180A F8               		dc.b $F8, 5, $18, $A, $F8
0000AA92 01                         byte_9FC6:	dc.b 1
0000AA93 F805 080A F8               		dc.b $F8, 5, 8,	$A, $F8
0000AA98 01                         byte_9FCC:	dc.b 1
0000AA99 F805 100A F8               		dc.b $F8, 5, $10, $A, $F8
0000AA9E                            		even
0000AA9E                            		even
0000AA9E                            
0000AA9E                            ; ---------------------------------------------------------------------------
0000AA9E                            ; Sprite mappings - giant ring
0000AA9E                            ; ---------------------------------------------------------------------------
0000AA9E                            Map_obj4B:
0000AA9E                            	include "_maps\obj4B.asm"
0000AA9E                            ; ---------------------------------------------------------------------------
0000AA9E                            ; Sprite mappings - giant ring
0000AA9E                            ; ---------------------------------------------------------------------------
0000AA9E 0000 0000                  		dc.w byte_9FDA-Map_obj4B, byte_A00D-Map_obj4B
0000AAA2 0000 0000                  		dc.w byte_A036-Map_obj4B, byte_A04B-Map_obj4B
0000AAA6 0A                         byte_9FDA:	dc.b $A
0000AAA7 E008 0000 E8               		dc.b $E0, 8, 0,	0, $E8
0000AAAC E008 0003 00               		dc.b $E0, 8, 0,	3, 0
0000AAB1 E80C 0006 E0               		dc.b $E8, $C, 0, 6, $E0
0000AAB6 E80C 000A 00               		dc.b $E8, $C, 0, $A, 0
0000AABB F007 000E E0               		dc.b $F0, 7, 0,	$E, $E0
0000AAC0 F007 0016 10               		dc.b $F0, 7, 0,	$16, $10
0000AAC5 100C 001E E0               		dc.b $10, $C, 0, $1E, $E0
0000AACA 100C 0022 00               		dc.b $10, $C, 0, $22, 0
0000AACF 1808 0026 E8               		dc.b $18, 8, 0,	$26, $E8
0000AAD4 1808 0029 00               		dc.b $18, 8, 0,	$29, 0
0000AAD9 08                         byte_A00D:	dc.b 8
0000AADA E00C 002C F0               		dc.b $E0, $C, 0, $2C, $F0
0000AADF E808 0030 E8               		dc.b $E8, 8, 0,	$30, $E8
0000AAE4 E809 0033 00               		dc.b $E8, 9, 0,	$33, 0
0000AAE9 F007 0039 E8               		dc.b $F0, 7, 0,	$39, $E8
0000AAEE F805 0041 08               		dc.b $F8, 5, 0,	$41, 8
0000AAF3 0809 0045 00               		dc.b 8,	9, 0, $45, 0
0000AAF8 1008 004B E8               		dc.b $10, 8, 0,	$4B, $E8
0000AAFD 180C 004E F0               		dc.b $18, $C, 0, $4E, $F0
0000AB02 04                         byte_A036:	dc.b 4
0000AB03 E007 0052 F4               		dc.b $E0, 7, 0,	$52, $F4
0000AB08 E003 0852 04               		dc.b $E0, 3, 8,	$52, 4
0000AB0D 0007 005A F4               		dc.b 0,	7, 0, $5A, $F4
0000AB12 0003 085A 04               		dc.b 0,	3, 8, $5A, 4
0000AB17 08                         byte_A04B:	dc.b 8
0000AB18 E00C 082C F0               		dc.b $E0, $C, 8, $2C, $F0
0000AB1D E808 0830 00               		dc.b $E8, 8, 8,	$30, 0
0000AB22 E809 0833 E8               		dc.b $E8, 9, 8,	$33, $E8
0000AB27 F007 0839 08               		dc.b $F0, 7, 8,	$39, 8
0000AB2C F805 0841 E8               		dc.b $F8, 5, 8,	$41, $E8
0000AB31 0809 0845 E8               		dc.b 8,	9, 8, $45, $E8
0000AB36 1008 084B 00               		dc.b $10, 8, 8,	$4B, 0
0000AB3B 180C 084E F0               		dc.b $18, $C, 8, $4E, $F0
0000AB40                            		even
0000AB40                            		even
0000AB40                            
0000AB40                            ; ---------------------------------------------------------------------------
0000AB40                            ; Sprite mappings - flash effect when you collect the giant ring
0000AB40                            ; ---------------------------------------------------------------------------
0000AB40                            Map_obj7C:
0000AB40                            	include "_maps\obj7C.asm"
0000AB40                            ; ---------------------------------------------------------------------------
0000AB40                            ; Sprite mappings - flash effect when you collect the giant ring
0000AB40                            ; ---------------------------------------------------------------------------
0000AB40 0000 0000                  		dc.w byte_A084-Map_obj7C, byte_A08F-Map_obj7C
0000AB44 0000 0000                  		dc.w byte_A0A4-Map_obj7C, byte_A0B9-Map_obj7C
0000AB48 0000 0000                  		dc.w byte_A0CE-Map_obj7C, byte_A0E3-Map_obj7C
0000AB4C 0000 0000                  		dc.w byte_A0F8-Map_obj7C, byte_A103-Map_obj7C
0000AB50 02                         byte_A084:	dc.b 2
0000AB51 E00F 0000 00               		dc.b $E0, $F, 0, 0, 0
0000AB56 000F 1000 00               		dc.b 0,	$F, $10, 0, 0
0000AB5B 04                         byte_A08F:	dc.b 4
0000AB5C E00F 0010 F0               		dc.b $E0, $F, 0, $10, $F0
0000AB61 E007 0020 10               		dc.b $E0, 7, 0,	$20, $10
0000AB66 000F 1010 F0               		dc.b 0,	$F, $10, $10, $F0
0000AB6B 0007 1020 10               		dc.b 0,	7, $10,	$20, $10
0000AB70 04                         byte_A0A4:	dc.b 4
0000AB71 E00F 0028 E8               		dc.b $E0, $F, 0, $28, $E8
0000AB76 E00B 0038 08               		dc.b $E0, $B, 0, $38, 8
0000AB7B 000F 1028 E8               		dc.b 0,	$F, $10, $28, $E8
0000AB80 000B 1038 08               		dc.b 0,	$B, $10, $38, 8
0000AB85 04                         byte_A0B9:	dc.b 4
0000AB86 E00F 0834 E0               		dc.b $E0, $F, 8, $34, $E0
0000AB8B E00F 0034 00               		dc.b $E0, $F, 0, $34, 0
0000AB90 000F 1834 E0               		dc.b 0,	$F, $18, $34, $E0
0000AB95 000F 1034 00               		dc.b 0,	$F, $10, $34, 0
0000AB9A 04                         byte_A0CE:	dc.b 4
0000AB9B E00B 0838 E0               		dc.b $E0, $B, 8, $38, $E0
0000ABA0 E00F 0828 F8               		dc.b $E0, $F, 8, $28, $F8
0000ABA5 000B 1838 E0               		dc.b 0,	$B, $18, $38, $E0
0000ABAA 000F 1828 F8               		dc.b 0,	$F, $18, $28, $F8
0000ABAF 04                         byte_A0E3:	dc.b 4
0000ABB0 E007 0820 E0               		dc.b $E0, 7, 8,	$20, $E0
0000ABB5 E00F 0810 F0               		dc.b $E0, $F, 8, $10, $F0
0000ABBA 0007 1820 E0               		dc.b 0,	7, $18,	$20, $E0
0000ABBF 000F 1810 F0               		dc.b 0,	$F, $18, $10, $F0
0000ABC4 02                         byte_A0F8:	dc.b 2
0000ABC5 E00F 0800 E0               		dc.b $E0, $F, 8, 0, $E0
0000ABCA 000F 1800 E0               		dc.b 0,	$F, $18, 0, $E0
0000ABCF 04                         byte_A103:	dc.b 4
0000ABD0 E00F 0044 E0               		dc.b $E0, $F, 0, $44, $E0
0000ABD5 E00F 0844 00               		dc.b $E0, $F, 8, $44, 0
0000ABDA 000F 1044 E0               		dc.b 0,	$F, $10, $44, $E0
0000ABDF 000F 1844 00               		dc.b 0,	$F, $18, $44, 0
0000ABE4                            		even
0000ABE4                            		even
0000ABE4                            
0000ABE4                            ; ===========================================================================
0000ABE4                            ; ---------------------------------------------------------------------------
0000ABE4                            ; Object 26 - monitors
0000ABE4                            ; ---------------------------------------------------------------------------
0000ABE4                            
0000ABE4                            Obj26:					; XREF: Obj_Index
0000ABE4 7000                       		moveq	#0,d0
0000ABE6 1028 0024                  		move.b	$24(a0),d0
0000ABEA 323B 0000                  		move.w	Obj26_Index(pc,d0.w),d1
0000ABEE 4EFB 1000                  		jmp	Obj26_Index(pc,d1.w)
0000ABF2                            ; ===========================================================================
0000ABF2 0000                       Obj26_Index:	dc.w Obj26_Main-Obj26_Index
0000ABF4 0000                       		dc.w Obj26_Solid-Obj26_Index
0000ABF6 0000                       		dc.w Obj26_BreakOpen-Obj26_Index
0000ABF8 0000                       		dc.w Obj26_Animate-Obj26_Index
0000ABFA 0000                       		dc.w Obj26_Display-Obj26_Index
0000ABFC                            ; ===========================================================================
0000ABFC                            
0000ABFC                            Obj26_Main:				; XREF: Obj26_Index
0000ABFC 5428 0024                  		addq.b	#2,$24(a0)
0000AC00 117C 000E 0016             		move.b	#$E,$16(a0)
0000AC06 117C 000E 0017             		move.b	#$E,$17(a0)
0000AC0C 217C 0000 0000 0004        		move.l	#Map_obj26,4(a0)
0000AC14 317C 0680 0002             		move.w	#$680,2(a0)
0000AC1A 117C 0004 0001             		move.b	#4,1(a0)
0000AC20 117C 0003 0018             		move.b	#3,$18(a0)
0000AC26 117C 000F 0019             		move.b	#$F,$19(a0)
0000AC2C 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000AC30 7000                       		moveq	#0,d0
0000AC32 1028 0023                  		move.b	$23(a0),d0
0000AC36 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000AC3C 0832 0000 0002             		btst	#0,2(a2,d0.w)	; has monitor been broken?
0000AC42 6700                       		beq.s	Obj26_NotBroken	; if not, branch
0000AC44 117C 0008 0024             		move.b	#8,$24(a0)	; run "Obj26_Display" routine
0000AC4A 117C 000B 001A             		move.b	#$B,$1A(a0)	; use broken monitor frame
0000AC50 4E75                       		rts	
0000AC52                            ; ===========================================================================
0000AC52                            
0000AC52                            Obj26_NotBroken:			; XREF: Obj26_Main
0000AC52 117C 0046 0020             		move.b	#$46,$20(a0)
0000AC58 1168 0028 001C             		move.b	$28(a0),$1C(a0)
0000AC5E                            
0000AC5E                            Obj26_Solid:				; XREF: Obj26_Index
0000AC5E 1028 0025                  		move.b	$25(a0),d0	; is monitor set to fall?
0000AC62 6700                       		beq.s	loc_A1EC	; if not, branch
0000AC64 5500                       		subq.b	#2,d0
0000AC66 6600                       		bne.s	Obj26_Fall
0000AC68 7200                       		moveq	#0,d1
0000AC6A 1228 0019                  		move.b	$19(a0),d1
0000AC6E 0641 000B                  		addi.w	#$B,d1
0000AC72 6100 D3FC                  		bsr.w	ExitPlatform
0000AC76 0829 0003 0022             		btst	#3,$22(a1)
0000AC7C 6600 0000                  		bne.w	loc_A1BC
0000AC80 4228 0025                  		clr.b	$25(a0)
0000AC84 6000 0000                  		bra.w	Obj26_Animate
0000AC88                            ; ===========================================================================
0000AC88                            
0000AC88                            loc_A1BC:				; XREF: Obj26_Solid
0000AC88 363C 0010                  		move.w	#$10,d3
0000AC8C 3428 0008                  		move.w	8(a0),d2
0000AC90 6100 D93C                  		bsr.w	MvSonicOnPtfm
0000AC94 6000 0000                  		bra.w	Obj26_Animate
0000AC98                            ; ===========================================================================
0000AC98                            
0000AC98                            Obj26_Fall:				; XREF: Obj26_Solid
0000AC98 6100 0000                  		bsr.w	ObjectFall
0000AC9C 4EB9 0000 0000             		jsr	ObjHitFloor
0000ACA2 4A41                       		tst.w	d1
0000ACA4 6A00 0000                  		bpl.w	Obj26_Animate
0000ACA8 D368 000C                  		add.w	d1,$C(a0)
0000ACAC 4268 0012                  		clr.w	$12(a0)
0000ACB0 4228 0025                  		clr.b	$25(a0)
0000ACB4 6000 0000                  		bra.w	Obj26_Animate
0000ACB8                            ; ===========================================================================
0000ACB8                            
0000ACB8                            loc_A1EC:				; XREF: Obj26_Solid
0000ACB8 323C 001A                  		move.w	#$1A,d1
0000ACBC 343C 000F                  		move.w	#$F,d2
0000ACC0 6100 0000                  		bsr.w	Obj26_SolidSides
0000ACC4 6700 0000                  		beq.w	loc_A25C
0000ACC8 4A69 0012                  		tst.w	$12(a1)
0000ACCC 6B00                       		bmi.s	loc_A20A
0000ACCE 0C29 0002 001C             		cmpi.b	#2,$1C(a1)	; is Sonic rolling?
0000ACD4 6700                       		beq.s	loc_A25C	; if yes, branch
0000ACD6 0C29 001F 001C             		cmpi.b	#$1F,$1C(a1)	; is Sonic spin-dashing?
0000ACDC 6700                       		beq.s	loc_A25C	; if yes, branch
0000ACDE                            
0000ACDE                            loc_A20A:
0000ACDE 4A41                       		tst.w	d1
0000ACE0 6A00                       		bpl.s	loc_A220
0000ACE2 9769 000C                  		sub.w	d3,$C(a1)
0000ACE6 6100 D276                  		bsr.w	loc_74AE
0000ACEA 117C 0002 0025             		move.b	#2,$25(a0)
0000ACF0 6000 0000                  		bra.w	Obj26_Animate
0000ACF4                            ; ===========================================================================
0000ACF4                            
0000ACF4                            loc_A220:
0000ACF4 4A40                       		tst.w	d0
0000ACF6 6700 0000                  		beq.w	loc_A246
0000ACFA 6B00                       		bmi.s	loc_A230
0000ACFC 4A69 0010                  		tst.w	$10(a1)
0000AD00 6B00                       		bmi.s	loc_A246
0000AD02 6000                       		bra.s	loc_A236
0000AD04                            ; ===========================================================================
0000AD04                            
0000AD04                            loc_A230:
0000AD04 4A69 0010                  		tst.w	$10(a1)
0000AD08 6A00                       		bpl.s	loc_A246
0000AD0A                            
0000AD0A                            loc_A236:
0000AD0A 9169 0008                  		sub.w	d0,8(a1)
0000AD0E 337C 0000 0014             		move.w	#0,$14(a1)
0000AD14 337C 0000 0010             		move.w	#0,$10(a1)
0000AD1A                            
0000AD1A                            loc_A246:
0000AD1A 0829 0001 0022             		btst	#1,$22(a1)
0000AD20 6600                       		bne.s	loc_A26A
0000AD22 08E9 0005 0022             		bset	#5,$22(a1)
0000AD28 08E8 0005 0022             		bset	#5,$22(a0)
0000AD2E 6000                       		bra.s	Obj26_Animate
0000AD30                            ; ===========================================================================
0000AD30                            
0000AD30                            loc_A25C:
0000AD30 0828 0005 0022             		btst	#5,$22(a0)
0000AD36 6700                       		beq.s	Obj26_Animate
0000AD38 0C29 0002 001C             		cmp.b	#2,$1C(a1)	; check if in jumping/rolling animation
0000AD3E 6700                       		beq.s	loc_A26A
0000AD40 0C29 0017 001C             		cmp.b	#$17,$1C(a1)	; check if in drowning animation
0000AD46 6700                       		beq.s	loc_A26A
0000AD48 337C 0001 001C             		move.w	#1,$1C(a1)
0000AD4E                            
0000AD4E                            loc_A26A:
0000AD4E 08A8 0005 0022             		bclr	#5,$22(a0)
0000AD54 08A9 0005 0022             		bclr	#5,$22(a1)
0000AD5A                            
0000AD5A                            Obj26_Animate:				; XREF: Obj26_Index
0000AD5A 43F9 0000 0000             		lea	(Ani_obj26).l,a1
0000AD60 6100 0000                  		bsr.w	AnimateSprite
0000AD64                            
0000AD64                            Obj26_Display:				; XREF: Obj26_Index
0000AD64 6100 0000                  		bsr.w	DisplaySprite
0000AD68 3028 0008                  		move.w	8(a0),d0
0000AD6C 0240 FF80                  		andi.w	#$FF80,d0
0000AD70 3238 F700                  		move.w	($FFFFF700).w,d1
0000AD74 0441 0080                  		subi.w	#$80,d1
0000AD78 0241 FF80                  		andi.w	#$FF80,d1
0000AD7C 9041                       		sub.w	d1,d0
0000AD7E 0C40 0280                  		cmpi.w	#$280,d0
0000AD82 6200 0000                  		bhi.w	DeleteObject
0000AD86 4E75                       		rts	
0000AD88                            ; ===========================================================================
0000AD88                            
0000AD88                            Obj26_BreakOpen:			; XREF: Obj26_Index
0000AD88 5428 0024                  		addq.b	#2,$24(a0)
0000AD8C 117C 0000 0020             		move.b	#0,$20(a0)
0000AD92 6100 0000                  		bsr.w	SingleObjLoad
0000AD96 6600                       		bne.s	Obj26_Explode
0000AD98 12BC 002E                  		move.b	#$2E,0(a1)	; load monitor contents	object
0000AD9C 3368 0008 0008             		move.w	8(a0),8(a1)
0000ADA2 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000ADA8 1368 001C 001C             		move.b	$1C(a0),$1C(a1)
0000ADAE                            
0000ADAE                            Obj26_Explode:
0000ADAE 6100 0000                  		bsr.w	SingleObjLoad
0000ADB2 6600                       		bne.s	Obj26_SetBroken
0000ADB4 12BC 0027                  		move.b	#$27,0(a1)	; load explosion object
0000ADB8 5429 0024                  		addq.b	#2,$24(a1)
0000ADBC 3368 0008 0008             		move.w	8(a0),8(a1)
0000ADC2 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000ADC8                            
0000ADC8                            Obj26_SetBroken:
0000ADC8 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000ADCC 7000                       		moveq	#0,d0
0000ADCE 1028 0023                  		move.b	$23(a0),d0
0000ADD2 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0000ADD8 117C 0009 001C             		move.b	#9,$1C(a0)	; set monitor type to broken
0000ADDE 6000 0000                  		bra.w	DisplaySprite
0000ADE2                            ; ===========================================================================
0000ADE2                            ; ---------------------------------------------------------------------------
0000ADE2                            ; Object 2E - contents of monitors
0000ADE2                            ; ---------------------------------------------------------------------------
0000ADE2                            
0000ADE2                            Obj2E:					; XREF: Obj_Index
0000ADE2 7000                       		moveq	#0,d0
0000ADE4 1028 0024                  		move.b	$24(a0),d0
0000ADE8 323B 0000                  		move.w	Obj2E_Index(pc,d0.w),d1
0000ADEC 4EBB 1000                  		jsr	Obj2E_Index(pc,d1.w)
0000ADF0 6000 0000                  		bra.w	DisplaySprite
0000ADF4                            ; ===========================================================================
0000ADF4 0000                       Obj2E_Index:	dc.w Obj2E_Main-Obj2E_Index
0000ADF6 0000                       		dc.w Obj2E_Move-Obj2E_Index
0000ADF8 0000                       		dc.w Obj2E_Delete-Obj2E_Index
0000ADFA                            ; ===========================================================================
0000ADFA                            
0000ADFA                            Obj2E_Main:				; XREF: Obj2E_Index
0000ADFA 5428 0024                  		addq.b	#2,$24(a0)
0000ADFE 317C 0680 0002             		move.w	#$680,2(a0)
0000AE04 117C 0024 0001             		move.b	#$24,1(a0)
0000AE0A 117C 0003 0018             		move.b	#3,$18(a0)
0000AE10 117C 0008 0019             		move.b	#8,$19(a0)
0000AE16 317C FD00 0012             		move.w	#-$300,$12(a0)
0000AE1C 7000                       		moveq	#0,d0
0000AE1E 1028 001C                  		move.b	$1C(a0),d0
0000AE22 5400                       		addq.b	#2,d0
0000AE24 1140 001A                  		move.b	d0,$1A(a0)
0000AE28 227C 0000 0000             		movea.l	#Map_obj26,a1
0000AE2E D000                       		add.b	d0,d0
0000AE30 D2F1 0000                  		adda.w	(a1,d0.w),a1
0000AE34 5249                       		addq.w	#1,a1
0000AE36 2149 0004                  		move.l	a1,4(a0)
0000AE3A                            
0000AE3A                            Obj2E_Move:				; XREF: Obj2E_Index
0000AE3A 4A68 0012                  		tst.w	$12(a0)		; is object moving?
0000AE3E 6A00 0000                  		bpl.w	Obj2E_ChkEggman	; if not, branch
0000AE42 6100 0000                  		bsr.w	SpeedToPos
0000AE46 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce object	speed
0000AE4C 4E75                       		rts	
0000AE4E                            ; ===========================================================================
0000AE4E                            
0000AE4E                            Obj2E_ChkEggman:    ; XREF: Obj2E_Move
0000AE4E 5428 0024                          addq.b    #2,$24(a0)
0000AE52 317C 001D 001E                     move.w    #29,$1E(a0)
0000AE58 1028 001C                          move.b    $1C(a0),d0
0000AE5C 0C00 0001                          cmpi.b    #1,d0; does monitor contain Eggman?
0000AE60 6600                               bne.s    Obj2E_ChkSonic ; if not, go and check for the next monitor type (1-up icon)
0000AE62 2248                               move.l    a0,a1 ; move a0 to a1, because Touch_ChkHurt wants the damaging object to be in a1
0000AE64 2F08                               move.l    a0,-(sp) ; push a0 on the stack, and decrement stack pointer
0000AE66 41F8 D000                          lea    ($FFFFD000).w,a0 ; put Sonic's ram address in a0, because Touch_ChkHurt wants the damaged object to be in a0
0000AE6A 4EB9 0000 0000                     jsr    Sonic_CheckGoSuper ; run the Touch_ChkHurt routine
0000AE70 205F                               move.l    (sp)+,a0 ; pop the previous value of a0 from the stack, and increment stack pointer
0000AE72 4E75                               rts ; The Eggman monitor now does something!
0000AE74                            
0000AE74                            ; ===========================================================================
0000AE74                            
0000AE74                            Obj2E_ChkSonic:
0000AE74 0C00 0002                  		cmpi.b	#2,d0		; does monitor contain Sonic?
0000AE78 6600                       		bne.s	Obj2E_ChkShoes
0000AE7A                            
0000AE7A                            ExtraLife:
0000AE7A 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to the	number of lives	you have
0000AE7E 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to the	lives counter
0000AE82 303C 0088                  		move.w	#$88,d0
0000AE86 4EF9 0000 1470             		jmp	(PlaySound).l	; play extra life music
0000AE8C                            ; ===========================================================================
0000AE8C                            
0000AE8C                            Obj2E_ChkShoes:
0000AE8C 0C00 0003                  		cmpi.b	#3,d0		; does monitor contain speed shoes?
0000AE90 6600                       		bne.s	Obj2E_ChkShield
0000AE92 0C38 0001 FE19             		cmpi.b #1,(Super_Sonic_Flag).w ; Prevent Sonic from getting (invincibility, shoes) if Super
0000AE98 6700 0000                                  beq Obj2E_NoMusic		
0000AE9C 11FC 0001 FE2E             		move.b	#1,($FFFFFE2E).w ; speed up the	BG music
0000AEA2 31FC 04B0 D034             		move.w	#$4B0,($FFFFD034).w ; time limit for the power-up
0000AEA8 31FC 0C00 F760             		move.w	#$C00,($FFFFF760).w ; change Sonic's top speed
0000AEAE 31FC 0018 F762             		move.w	#$18,($FFFFF762).w
0000AEB4 31FC 0080 F764             		move.w	#$80,($FFFFF764).w
0000AEBA 303C 009E                  		move.w	#$9E,d0
0000AEBE 4EF9 0000 1470             		jmp	(PlaySound).l	; Speed	up the music
0000AEC4                            ; ===========================================================================
0000AEC4                            
0000AEC4                            Obj2E_ChkShield:
0000AEC4 0C00 0004                  		cmpi.b	#4,d0		; does monitor contain a shield?
0000AEC8 6600                       		bne.s	Obj2E_ChkInvinc
0000AECA 11FC 0001 FE2C             		move.b	#1,($FFFFFE2C).w ; give	Sonic a	shield
0000AED0 11FC 0038 D180             		move.b	#$38,($FFFFD180).w ; load shield object	($38)
0000AED6 303C 00AF                  		move.w	#$AF,d0
0000AEDA 4EF9 0000 1470             		jmp	(PlaySound).l	; play shield sound
0000AEE0                            ; ===========================================================================
0000AEE0                            
0000AEE0                            Obj2E_ChkInvinc:
0000AEE0 0C00 0005                  		cmpi.b	#5,d0		; does monitor contain invincibility?
0000AEE4 6600                       		bne.s	Obj2E_ChkRings
0000AEE6 0C38 0001 FE19             		cmpi.b #1,(Super_Sonic_Flag).w ; Prevent Sonic from getting (invincibility, shoes) if Super
0000AEEC 6700 0000                                  beq Obj2E_NoMusic		
0000AEF0 11FC 0001 FE2D             		move.b	#1,($FFFFFE2D).w ; make	Sonic invincible
0000AEF6 31FC 04B0 D032             		move.w	#$4B0,($FFFFD032).w ; time limit for the power-up
0000AEFC 11FC 0038 D200             		move.b	#$38,($FFFFD200).w ; load stars	object ($3801)
0000AF02 11FC 0001 D21C             		move.b	#1,($FFFFD21C).w
0000AF08 11FC 0038 D240             		move.b	#$38,($FFFFD240).w ; load stars	object ($3802)
0000AF0E 11FC 0002 D25C             		move.b	#2,($FFFFD25C).w
0000AF14 11FC 0038 D280             		move.b	#$38,($FFFFD280).w ; load stars	object ($3803)
0000AF1A 11FC 0003 D29C             		move.b	#3,($FFFFD29C).w
0000AF20 11FC 0038 D2C0             		move.b	#$38,($FFFFD2C0).w ; load stars	object ($3804)
0000AF26 11FC 0004 D2DC             		move.b	#4,($FFFFD2DC).w
0000AF2C 4A38 F7AA                  		tst.b	($FFFFF7AA).w	; is boss mode on?
0000AF30 6600                       		bne.s	Obj2E_NoMusic	; if yes, branch
0000AF32 303C 0087                  		move.w	#$87,d0
0000AF36 4EF9 0000 1470             		jmp	(PlaySound).l	; play invincibility music
0000AF3C                            ; ===========================================================================
0000AF3C                            
0000AF3C                            Obj2E_NoMusic:
0000AF3C 4E75                       		rts	
0000AF3E                            ; ===========================================================================
0000AF3E                            
0000AF3E                            Obj2E_ChkRings:
0000AF3E 0C00 0006                  		cmpi.b	#6,d0		; does monitor contain 10 rings?
0000AF42 6600                       		bne.s	Obj2E_ChkS
0000AF44 0678 004A FE20             		addi.w	#$4A,($FFFFFE20).w ; add	10 rings to the	number of rings	you have
0000AF4A 0038 0001 FE1D             		ori.b	#1,($FFFFFE1D).w ; update the ring counter
0000AF50 0C78 0064 FE20             		cmpi.w	#100,($FFFFFE20).w ; check if you have 100 rings
0000AF56 6500                       		bcs.s	Obj2E_RingSound
0000AF58 08F8 0001 FE1B             		bset	#1,($FFFFFE1B).w
0000AF5E 6700 FF1A                  		beq.w	ExtraLife
0000AF62 0C78 00C8 FE20             		cmpi.w	#200,($FFFFFE20).w ; check if you have 200 rings
0000AF68 6500                       		bcs.s	Obj2E_RingSound
0000AF6A 08F8 0002 FE1B             		bset	#2,($FFFFFE1B).w
0000AF70 6700 FF08                  		beq.w	ExtraLife
0000AF74                            
0000AF74                            Obj2E_RingSound:
0000AF74 303C 00B5                  		move.w	#$B5,d0
0000AF78 4EF9 0000 1470             		jmp	(PlaySound).l	; play ring sound
0000AF7E                            ; ===========================================================================
0000AF7E                            
0000AF7E                            Obj2E_ChkS:
0000AF7E 0C00 0007                  		cmpi.b	#7,d0		; does monitor contain 'S'
0000AF82 6600                       		bne.s	Obj2E_ChkEnd
0000AF84 4E71                       		nop	
0000AF86                            
0000AF86                            Obj2E_ChkEnd:
0000AF86 4E75                       		rts			; 'S' and goggles monitors do nothing
0000AF88                            ; ===========================================================================
0000AF88                            
0000AF88                            Obj2E_Delete:				; XREF: Obj2E_Index
0000AF88 5368 001E                  		subq.w	#1,$1E(a0)
0000AF8C 6B00 0000                  		bmi.w	DeleteObject
0000AF90 4E75                       		rts	
0000AF92                            ; ---------------------------------------------------------------------------
0000AF92                            ; Subroutine to	make the sides of a monitor solid
0000AF92                            ; ---------------------------------------------------------------------------
0000AF92                            
0000AF92                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000AF92                            
0000AF92                            
0000AF92                            Obj26_SolidSides:			; XREF: loc_A1EC
0000AF92 43F8 D000                  		lea	($FFFFD000).w,a1
0000AF96 3029 0008                  		move.w	8(a1),d0
0000AF9A 9068 0008                  		sub.w	8(a0),d0
0000AF9E D041                       		add.w	d1,d0
0000AFA0 6B00                       		bmi.s	loc_A4E6
0000AFA2 3601                       		move.w	d1,d3
0000AFA4 D643                       		add.w	d3,d3
0000AFA6 B043                       		cmp.w	d3,d0
0000AFA8 6200                       		bhi.s	loc_A4E6
0000AFAA 1629 0016                  		move.b	$16(a1),d3
0000AFAE 4883                       		ext.w	d3
0000AFB0 D443                       		add.w	d3,d2
0000AFB2 3629 000C                  		move.w	$C(a1),d3
0000AFB6 9668 000C                  		sub.w	$C(a0),d3
0000AFBA D642                       		add.w	d2,d3
0000AFBC 6B00                       		bmi.s	loc_A4E6
0000AFBE D442                       		add.w	d2,d2
0000AFC0 B642                       		cmp.w	d2,d3
0000AFC2 6400                       		bcc.s	loc_A4E6
0000AFC4 4A38 F7C8                  		tst.b	($FFFFF7C8).w
0000AFC8 6B00                       		bmi.s	loc_A4E6
0000AFCA 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000AFD0 6400                       		bcc.s	loc_A4E6
0000AFD2 4A78 FE08                  		tst.w	($FFFFFE08).w
0000AFD6 6600                       		bne.s	loc_A4E6
0000AFD8 B240                       		cmp.w	d0,d1
0000AFDA 6400                       		bcc.s	loc_A4DC
0000AFDC D241                       		add.w	d1,d1
0000AFDE 9041                       		sub.w	d1,d0
0000AFE0                            
0000AFE0                            loc_A4DC:
0000AFE0 0C43 0010                  		cmpi.w	#$10,d3
0000AFE4 6500                       		bcs.s	loc_A4EA
0000AFE6                            
0000AFE6                            loc_A4E2:
0000AFE6 7201                       		moveq	#1,d1
0000AFE8 4E75                       		rts	
0000AFEA                            ; ===========================================================================
0000AFEA                            
0000AFEA                            loc_A4E6:
0000AFEA 7200                       		moveq	#0,d1
0000AFEC 4E75                       		rts	
0000AFEE                            ; ===========================================================================
0000AFEE                            
0000AFEE                            loc_A4EA:
0000AFEE 7200                       		moveq	#0,d1
0000AFF0 1228 0019                  		move.b	$19(a0),d1
0000AFF4 5841                       		addq.w	#4,d1
0000AFF6 3401                       		move.w	d1,d2
0000AFF8 D442                       		add.w	d2,d2
0000AFFA D269 0008                  		add.w	8(a1),d1
0000AFFE 9268 0008                  		sub.w	8(a0),d1
0000B002 6BE2                       		bmi.s	loc_A4E2
0000B004 B242                       		cmp.w	d2,d1
0000B006 64DE                       		bcc.s	loc_A4E2
0000B008 72FF                       		moveq	#-1,d1
0000B00A 4E75                       		rts	
0000B00C                            ; End of function Obj26_SolidSides
0000B00C                            
0000B00C                            ; ===========================================================================
0000B00C                            Ani_obj26:
0000B00C                            	include "_anim\obj26.asm"
0000B00C                            ; ---------------------------------------------------------------------------
0000B00C                            ; Animation script - monitors
0000B00C                            ; ---------------------------------------------------------------------------
0000B00C 0000 0000 0000             		dc.w byte_A51C-Ani_obj26, byte_A522-Ani_obj26, byte_A52E-Ani_obj26
0000B012 0000 0000 0000             		dc.w byte_A53A-Ani_obj26, byte_A546-Ani_obj26, byte_A552-Ani_obj26
0000B018 0000 0000 0000             		dc.w byte_A55E-Ani_obj26, byte_A56A-Ani_obj26, byte_A576-Ani_obj26
0000B01E 0000                       		dc.w byte_A582-Ani_obj26
0000B020 0100 0102 FF00             byte_A51C:	dc.b 1,	0, 1, 2, $FF, 0
0000B026 0100 0303 0103 0302 0303+  byte_A522:	dc.b 1,	0, 3, 3, 1, 3, 3, 2, 3,	3, $FF,	0
0000B032 0100 0404 0104 0402 0404+  byte_A52E:	dc.b 1,	0, 4, 4, 1, 4, 4, 2, 4,	4, $FF,	0
0000B03E 0100 0505 0105 0502 0505+  byte_A53A:	dc.b 1,	0, 5, 5, 1, 5, 5, 2, 5,	5, $FF,	0
0000B04A 0100 0606 0106 0602 0606+  byte_A546:	dc.b 1,	0, 6, 6, 1, 6, 6, 2, 6,	6, $FF,	0
0000B056 0100 0707 0107 0702 0707+  byte_A552:	dc.b 1,	0, 7, 7, 1, 7, 7, 2, 7,	7, $FF,	0
0000B062 0100 0808 0108 0802 0808+  byte_A55E:	dc.b 1,	0, 8, 8, 1, 8, 8, 2, 8,	8, $FF,	0
0000B06E 0100 0909 0109 0902 0909+  byte_A56A:	dc.b 1,	0, 9, 9, 1, 9, 9, 2, 9,	9, $FF,	0
0000B07A 0100 0A0A 010A 0A02 0A0A+  byte_A576:	dc.b 1,	0, $A, $A, 1, $A, $A, 2, $A, $A, $FF, 0
0000B086 0200 0102 0BFE 0100        byte_A582:	dc.b 2,	0, 1, 2, $B, $FE, 1, 0
0000B08E                            		even
0000B08E                            		even
0000B08E                            
0000B08E                            ; ---------------------------------------------------------------------------
0000B08E                            ; Sprite mappings - monitors
0000B08E                            ; ---------------------------------------------------------------------------
0000B08E                            Map_obj26:
0000B08E                            	include "_maps\obj26.asm"
0000B08E                            ; ---------------------------------------------------------------------------
0000B08E                            ; Sprite mappings - monitors (Optimized) Ported by -paranoimia-
0000B08E                            ; ---------------------------------------------------------------------------
0000B08E 0000 0000                  		dc.w byte_A5A2-Map_obj26, byte_A5A8-Map_obj26
0000B092 0000 0000                  		dc.w byte_A5B3-Map_obj26, byte_A5BE-Map_obj26
0000B096 0000 0000                  		dc.w byte_A5C9-Map_obj26, byte_A5D4-Map_obj26
0000B09A 0000 0000                  		dc.w byte_A5DF-Map_obj26, byte_A5EA-Map_obj26
0000B09E 0000 0000                  		dc.w byte_A5F5-Map_obj26, byte_A600-Map_obj26
0000B0A2 0000 0000                  		dc.w byte_A60B-Map_obj26, byte_A616-Map_obj26
0000B0A6 01                         byte_A5A2:	dc.b 1			; static monitor
0000B0A7 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000B0AC 02                         byte_A5A8:	dc.b 2			; static monitor
0000B0AD F505 0010 F8               		dc.b $F5, 5, 0,	$10, $F8
0000B0B2 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000B0B7 02                         byte_A5B3:	dc.b 2			; static monitor
0000B0B8 F505 0014 F8               		dc.b $F5, 5, 0,	$14, $F8
0000B0BD EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000B0C2 02                         byte_A5BE:	dc.b 2			; Eggman monitor
0000B0C3 F505 0018 F8               		dc.b $F5, 5, 0,	$18, $F8
0000B0C8 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000B0CD 02                         byte_A5C9:	dc.b 2			; Sonic	monitor
0000B0CE F505 001C F8               		dc.b $F5, 5, 0,	$1C, $F8
0000B0D3 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000B0D8 02                         byte_A5D4:	dc.b 2			; speed	shoes monitor
0000B0D9 F505 0024 F8               		dc.b $F5, 5, 0,	$24, $F8
0000B0DE EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000B0E3 02                         byte_A5DF:	dc.b 2			; shield monitor
0000B0E4 F505 0028 F8               		dc.b $F5, 5, 0,	$28, $F8
0000B0E9 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000B0EE 02                         byte_A5EA:	dc.b 2			; invincibility	monitor
0000B0EF F505 002C F8               		dc.b $F5, 5, 0,	$2C, $F8
0000B0F4 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000B0F9 02                         byte_A5F5:	dc.b 2			; 10 rings monitor
0000B0FA F505 0020 F8               		dc.b $F5, 5, 0,	$20, $F8
0000B0FF EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000B104 02                         byte_A600:	dc.b 2			; 'S' monitor
0000B105 F505 003C F8               		dc.b $F5, 5, 0,	$3C, $F8
0000B10A EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000B10F 02                         byte_A60B:	dc.b 2			; goggles monitor
0000B110 F505 0038 F8               		dc.b $F5, 5, 0,	$38, $F8
0000B115 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000B11A 01                         byte_A616:	dc.b 1			; broken monitor
0000B11B FF0D 0030 F0               		dc.b $FF, $D, 0, $30, $F0
0000B120                            		even
0000B120                            		even
0000B120                            
0000B120                            ; ===========================================================================
0000B120                            ; ---------------------------------------------------------------------------
0000B120                            ; Object 0E - Sonic on the title screen
0000B120                            ; ---------------------------------------------------------------------------
0000B120                            
0000B120                            Obj0E:					; XREF: Obj_Index
0000B120 7000                       		moveq	#0,d0
0000B122 1028 0024                  		move.b	$24(a0),d0
0000B126 323B 0000                  		move.w	Obj0E_Index(pc,d0.w),d1
0000B12A 4EFB 1000                  		jmp	Obj0E_Index(pc,d1.w)
0000B12E                            ; ===========================================================================
0000B12E 0000                       Obj0E_Index:	dc.w Obj0E_Main-Obj0E_Index
0000B130 0000                       		dc.w Obj0E_Delay-Obj0E_Index
0000B132 0000                       		dc.w Obj0E_Move-Obj0E_Index
0000B134 0000                       		dc.w Obj0E_Animate-Obj0E_Index
0000B136                            ; ===========================================================================
0000B136                            
0000B136                            Obj0E_Main:				; XREF: Obj0E_Index
0000B136 5428 0024                  		addq.b	#2,$24(a0)
0000B13A 317C 00F8 0008             		move.w	#$F8,8(a0)
0000B140 317C 00DE 000A             		move.w	#$DE,$A(a0)
0000B146 217C 0000 0000 0004        		move.l	#Map_obj0E,4(a0)
0000B14E 317C 2300 0002             		move.w	#$2300,2(a0)
0000B154 117C 0001 0018             		move.b	#1,$18(a0)
0000B15A 117C 001D 001F             		move.b	#29,$1F(a0)	; set time delay to 0.5	seconds
0000B160 43F9 0000 0000             		lea	(Ani_obj0E).l,a1
0000B166 6100 0000                  		bsr.w	AnimateSprite
0000B16A                            
0000B16A                            Obj0E_Delay:				; XREF: Obj0E_Index
0000B16A 5328 001F                  		subq.b	#1,$1F(a0)	; subtract 1 from time delay
0000B16E 6A00                       		bpl.s	Obj0E_Wait	; if time remains, branch
0000B170 5428 0024                  		addq.b	#2,$24(a0)	; go to	next routine
0000B174 6000 0000                  		bra.w	DisplaySprite
0000B178                            ; ===========================================================================
0000B178                            
0000B178                            Obj0E_Wait:				; XREF: Obj0E_Delay
0000B178 4E75                       		rts	
0000B17A                            ; ===========================================================================
0000B17A                            
0000B17A                            Obj0E_Move:				; XREF: Obj0E_Index
0000B17A 5168 000A                  		subq.w	#8,$A(a0)
0000B17E 0C68 0096 000A             		cmpi.w	#$96,$A(a0)
0000B184 6600                       		bne.s	Obj0E_Display
0000B186 5428 0024                  		addq.b	#2,$24(a0)
0000B18A                            
0000B18A                            Obj0E_Display:
0000B18A 6000 0000                  		bra.w	DisplaySprite
0000B18E                            ; ===========================================================================
0000B18E 4E75                       		rts	
0000B190                            ; ===========================================================================
0000B190                            
0000B190                            Obj0E_Animate:				; XREF: Obj0E_Index
0000B190 43F9 0000 0000             		lea	(Ani_obj0E).l,a1
0000B196 6100 0000                  		bsr.w	AnimateSprite
0000B19A 6000 0000                  		bra.w	DisplaySprite
0000B19E                            ; ===========================================================================
0000B19E 4E75                       		rts	
0000B1A0                            ; ===========================================================================
0000B1A0                            ; ---------------------------------------------------------------------------
0000B1A0                            ; Object 0F - "PRESS START BUTTON" and "TM" from title screen
0000B1A0                            ; ---------------------------------------------------------------------------
0000B1A0                            
0000B1A0                            Obj0F:					; XREF: Obj_Index
0000B1A0 7000                       		moveq	#0,d0
0000B1A2 1028 0024                  		move.b	$24(a0),d0
0000B1A6 323B 0000                  		move.w	Obj0F_Index(pc,d0.w),d1
0000B1AA 4EBB 1000                  		jsr	Obj0F_Index(pc,d1.w)
0000B1AE 6000 0000                  		bra.w	DisplaySprite
0000B1B2                            ; ===========================================================================
0000B1B2 0000                       Obj0F_Index:	dc.w Obj0F_Main-Obj0F_Index
0000B1B4 0000                       		dc.w Obj0F_PrsStart-Obj0F_Index
0000B1B6 0000                       		dc.w locret_A6F8-Obj0F_Index
0000B1B8                            ; ===========================================================================
0000B1B8                            
0000B1B8                            Obj0F_Main:				; XREF: Obj0F_Index
0000B1B8 5428 0024                  		addq.b	#2,$24(a0)
0000B1BC 317C 00D8 0008             		move.w	#$D8,8(a0)
0000B1C2 317C 0130 000A             		move.w	#$130,$A(a0)
0000B1C8 217C 0000 0000 0004        		move.l	#Map_obj0F,4(a0)
0000B1D0 317C 0200 0002             		move.w	#$200,2(a0)
0000B1D6 0C28 0002 001A             		cmpi.b	#2,$1A(a0)	; is object "PRESS START"?
0000B1DC 6500                       		bcs.s	Obj0F_PrsStart	; if yes, branch
0000B1DE 5428 0024                  		addq.b	#2,$24(a0)
0000B1E2 0C28 0003 001A             		cmpi.b	#3,$1A(a0)	; is the object	"TM"?
0000B1E8 6600                       		bne.s	locret_A6F8	; if not, branch
0000B1EA 317C 2510 0002             		move.w	#$2510,2(a0)	; "TM" specific	code
0000B1F0 317C 0178 0008             		move.w	#$178,8(a0)
0000B1F6 317C 00F8 000A             		move.w	#$F8,$A(a0)
0000B1FC                            
0000B1FC                            locret_A6F8:				; XREF: Obj0F_Index
0000B1FC 4E75                       		rts	
0000B1FE                            ; ===========================================================================
0000B1FE                            
0000B1FE                            Obj0F_PrsStart:				; XREF: Obj0F_Index
0000B1FE 43F9 0000 0000             		lea	(Ani_obj0F).l,a1
0000B204 6000 0000                  		bra.w	AnimateSprite
0000B208                            ; ===========================================================================
0000B208                            Ani_obj0E:
0000B208                            	include "_anim\obj0E.asm"
0000B208                            ; ---------------------------------------------------------------------------
0000B208                            ; Animation script - Sonic on the title screen
0000B208                            ; ---------------------------------------------------------------------------
0000B208 0000                       		dc.w byte_A706-Ani_obj0E
0000B20A 0700 0102 0304 0506 07FE+  byte_A706:	dc.b 7,	0, 1, 2, 3, 4, 5, 6, 7,	$FE, 2,	0
0000B216                            		even
0000B216                            		even
0000B216                            
0000B216                            Ani_obj0F:
0000B216                            	include "_anim\obj0F.asm"
0000B216                            ; ---------------------------------------------------------------------------
0000B216                            ; Animation script - "TM" and "PRESS START BUTTON" on the title screen
0000B216                            ; ---------------------------------------------------------------------------
0000B216 0000                       		dc.w byte_A714-Ani_obj0F
0000B218 1F00 01FF                  byte_A714:	dc.b $1F, 0, 1,	$FF
0000B21C                            		even
0000B21C                            		even
0000B21C                            
0000B21C                            ; ---------------------------------------------------------------------------
0000B21C                            ; Subroutine to	animate	a sprite using an animation script
0000B21C                            ; ---------------------------------------------------------------------------
0000B21C                            
0000B21C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B21C                            
0000B21C                            
0000B21C                            AnimateSprite:
0000B21C 7000                       		moveq	#0,d0
0000B21E 1028 001C                  		move.b	$1C(a0),d0	; move animation number	to d0
0000B222 B028 001D                  		cmp.b	$1D(a0),d0	; is animation set to restart?
0000B226 6700                       		beq.s	Anim_Run	; if not, branch
0000B228 1140 001D                  		move.b	d0,$1D(a0)	; set to "no restart"
0000B22C 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
0000B232 117C 0000 001E             		move.b	#0,$1E(a0)	; reset	frame duration
0000B238                            
0000B238                            Anim_Run:
0000B238 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
0000B23C 6A00                       		bpl.s	Anim_Wait	; if time remains, branch
0000B23E D040                       		add.w	d0,d0
0000B240 D2F1 0000                  		adda.w	(a1,d0.w),a1	; jump to appropriate animation	script
0000B244 1151 001E                  		move.b	(a1),$1E(a0)	; load frame duration
0000B248 7200                       		moveq	#0,d1
0000B24A 1228 001B                  		move.b	$1B(a0),d1	; load current frame number
0000B24E 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number from script
0000B252 0C00 00FA                  		cmp.b	#$FA,d0					; MJ: is it a flag from FA to FF?
0000B256 6400 0000                  		bhs	Anim_End_FF				; MJ: if so, branch to flag routines
0000B25A                            
0000B25A                            Anim_Next:
0000B25A 1200                       		move.b	d0,d1
0000B25C 0200 001F                  		andi.b	#$1F,d0
0000B260 1140 001A                  		move.b	d0,$1A(a0)	; load sprite number
0000B264 1028 0022                  		move.b	$22(a0),d0
0000B268 E719                       		rol.b	#3,d1
0000B26A B101                       		eor.b	d0,d1
0000B26C 0201 0003                  		andi.b	#3,d1
0000B270 0228 00FC 0001             		andi.b	#$FC,1(a0)
0000B276 8328 0001                  		or.b	d1,1(a0)
0000B27A 5228 001B                  		addq.b	#1,$1B(a0)	; next frame number
0000B27E                            
0000B27E                            Anim_Wait:
0000B27E 4E75                       		rts	
0000B280                            ; ===========================================================================
0000B280                            
0000B280                            Anim_End_FF:
0000B280 5200                       		addq.b	#1,d0		; is the end flag = $FF	?
0000B282 6600                       		bne.s	Anim_End_FE	; if not, branch
0000B284 117C 0000 001B             		move.b	#0,$1B(a0)	; restart the animation
0000B28A 1029 0001                  		move.b	1(a1),d0	; read sprite number
0000B28E 60CA                       		bra.s	Anim_Next
0000B290                            ; ===========================================================================
0000B290                            
0000B290                            Anim_End_FE:
0000B290 5200                       		addq.b	#1,d0		; is the end flag = $FE	?
0000B292 6600                       		bne.s	Anim_End_FD	; if not, branch
0000B294 1031 1002                  		move.b	2(a1,d1.w),d0	; read the next	byte in	the script
0000B298 9128 001B                  		sub.b	d0,$1B(a0)	; jump back d0 bytes in	the script
0000B29C 9200                       		sub.b	d0,d1
0000B29E 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number
0000B2A2 60B6                       		bra.s	Anim_Next
0000B2A4                            ; ===========================================================================
0000B2A4                            
0000B2A4                            Anim_End_FD:
0000B2A4 5200                       		addq.b	#1,d0		; is the end flag = $FD	?
0000B2A6 6600                       		bne.s	Anim_End_FC	; if not, branch
0000B2A8 1171 1002 001C             		move.b	2(a1,d1.w),$1C(a0) ; read next byte, run that animation
0000B2AE                            
0000B2AE                            Anim_End_FC:
0000B2AE 5200                       		addq.b	#1,d0		; is the end flag = $FC	?
0000B2B0 6600                       		bne.s	Anim_End_FB	; if not, branch
0000B2B2 5428 0024                  		addq.b	#2,$24(a0)	; jump to next routine
0000B2B6                            
0000B2B6                            Anim_End_FB:
0000B2B6 5200                       		addq.b	#1,d0		; is the end flag = $FB	?
0000B2B8 6600                       		bne.s	Anim_End_FA	; if not, branch
0000B2BA 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
0000B2C0 4228 0025                  		clr.b	$25(a0)		; reset	2nd routine counter
0000B2C4                            
0000B2C4                            Anim_End_FA:
0000B2C4 5200                       		addq.b	#1,d0		; is the end flag = $FA	?
0000B2C6 6600                       		bne.s	Anim_End	; if not, branch
0000B2C8 5428 0025                  		addq.b	#2,$25(a0)	; jump to next routine
0000B2CC                            
0000B2CC                            Anim_End:
0000B2CC 4E75                       		rts	
0000B2CE                            ; End of function AnimateSprite
0000B2CE                            
0000B2CE                            ; ===========================================================================
0000B2CE                            ; ---------------------------------------------------------------------------
0000B2CE                            ; Sprite mappings - "PRESS START BUTTON" and "TM" from title screen
0000B2CE                            ; ---------------------------------------------------------------------------
0000B2CE                            Map_obj0F:
0000B2CE                            	include "_maps\obj0F.asm"
0000B2CE                            ; ---------------------------------------------------------------------------
0000B2CE                            ; Sprite mappings - "PRESS START BUTTON" and "TM" from title screen
0000B2CE                            ; ---------------------------------------------------------------------------
0000B2CE 0000                       		dc.w byte_A7CD-Map_obj0F
0000B2D0 0000                       		dc.w byte_A7CC-Map_obj0F
0000B2D2 0000                       		dc.w byte_A7EB-Map_obj0F
0000B2D4 0000                       		dc.w byte_A882-Map_obj0F
0000B2D6 06                         byte_A7CC:	dc.b 6			; "PRESS START BUTTON"
0000B2D7 000C 00F0 00               byte_A7CD:	dc.b 0,	$C, 0, $F0, 0
0000B2DC 0000 00F3 20               		dc.b 0,	0, 0, $F3, $20
0000B2E1 0000 00F3 30               		dc.b 0,	0, 0, $F3, $30
0000B2E6 000C 00F4 38               		dc.b 0,	$C, 0, $F4, $38
0000B2EB 0008 00F8 60               		dc.b 0,	8, 0, $F8, $60
0000B2F0 0008 00FB 78               		dc.b 0,	8, 0, $FB, $78
0000B2F5 1E                         byte_A7EB:	dc.b $1E		; sprite list filler
0000B2F6 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B2FB B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B300 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B305 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B30A B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B30F B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B314 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B319 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B31E B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B323 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B328 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B32D D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B332 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B337 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B33C D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B341 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B346 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B34B D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B350 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B355 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B35A F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B35F F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B364 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B369 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B36E F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B373 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B378 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B37D F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B382 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B387 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B38C 01                         byte_A882:	dc.b 1			; "TM"
0000B38D FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8
0000B392                            		even
0000B392                            		even
0000B392                            
0000B392                            ; ---------------------------------------------------------------------------
0000B392                            ; Sprite mappings - Sonic on the title screen
0000B392                            ; ---------------------------------------------------------------------------
0000B392                            Map_obj0E:
0000B392                            	include "_maps\obj0E.asm"
0000B392                            ; ---------------------------------------------------------------------------
0000B392                            ; Sprite mappings - Sonic on the title screen
0000B392                            ; ---------------------------------------------------------------------------
0000B392 0000                       		dc.w byte_A898-Map_obj0E
0000B394 0000                       		dc.w byte_A8CB-Map_obj0E
0000B396 0000                       		dc.w byte_A917-Map_obj0E
0000B398 0000                       		dc.w byte_A96D-Map_obj0E
0000B39A 0000                       		dc.w byte_A9AF-Map_obj0E
0000B39C 0000                       		dc.w byte_A9E7-Map_obj0E
0000B39E 0000                       		dc.w byte_AA47-Map_obj0E
0000B3A0 0000                       		dc.w byte_AAB1-Map_obj0E
0000B3A2 0A                         byte_A898:	dc.b $A
0000B3A3 0808 0000 08               		dc.b 8,	8, 0, 0, 8
0000B3A8 100F 0003 08               		dc.b $10, $F, 0, 3, 8
0000B3AD 100F 0013 28               		dc.b $10, $F, 0, $13, $28
0000B3B2 300E 0023 08               		dc.b $30, $E, 0, $23, 8
0000B3B7 300E 002F 28               		dc.b $30, $E, 0, $2F, $28
0000B3BC 480D 003B 00               		dc.b $48, $D, 0, $3B, 0
0000B3C1 4809 0043 20               		dc.b $48, 9, 0,	$43, $20
0000B3C6 4800 0049 38               		dc.b $48, 0, 0,	$49, $38
0000B3CB 580C 004A 08               		dc.b $58, $C, 0, $4A, 8
0000B3D0 5800 004E 28               		dc.b $58, 0, 0,	$4E, $28
0000B3D5 0F                         byte_A8CB:	dc.b $F
0000B3D6 480E 01BD 20               		dc.b $48, $E, 1, $BD, $20
0000B3DB 3805 01C9 38               		dc.b $38, 5, 1,	$C9, $38
0000B3E0 4000 01CD 30               		dc.b $40, 0, 1,	$CD, $30
0000B3E5 4800 01CE 40               		dc.b $48, 0, 1,	$CE, $40
0000B3EA 6000 01CF 20               		dc.b $60, 0, 1,	$CF, $20
0000B3EF 100E 004F 08               		dc.b $10, $E, 0, $4F, 8
0000B3F4 100E 005B 28               		dc.b $10, $E, 0, $5B, $28
0000B3F9 1801 0067 48               		dc.b $18, 1, 0,	$67, $48
0000B3FE 2802 0069 00               		dc.b $28, 2, 0,	$69, 0
0000B403 280F 006C 08               		dc.b $28, $F, 0, $6C, 8
0000B408 280F 007C 28               		dc.b $28, $F, 0, $7C, $28
0000B40D 3002 008C 48               		dc.b $30, 2, 0,	$8C, $48
0000B412 480E 008F 10               		dc.b $48, $E, 0, $8F, $10
0000B417 4809 009B 30               		dc.b $48, 9, 0,	$9B, $30
0000B41C 5804 00A1 30               		dc.b $58, 4, 0,	$A1, $30
0000B421 11                         byte_A917:	dc.b $11
0000B422 380E 01BD 28               		dc.b $38, $E, 1, $BD, $28
0000B427 2805 01C9 40               		dc.b $28, 5, 1,	$C9, $40
0000B42C 3000 01CD 38               		dc.b $30, 0, 1,	$CD, $38
0000B431 3800 01CE 48               		dc.b $38, 0, 1,	$CE, $48
0000B436 5000 01CF 28               		dc.b $50, 0, 1,	$CF, $28
0000B43B 200F 01A9 08               		dc.b $20, $F, 1, $A9, 8
0000B440 2003 01B9 28               		dc.b $20, 3, 1,	$B9, $28
0000B445 100E 004F 08               		dc.b $10, $E, 0, $4F, 8
0000B44A 100E 005B 28               		dc.b $10, $E, 0, $5B, $28
0000B44F 1801 0067 48               		dc.b $18, 1, 0,	$67, $48
0000B454 2802 0069 00               		dc.b $28, 2, 0,	$69, 0
0000B459 280F 006C 08               		dc.b $28, $F, 0, $6C, 8
0000B45E 280F 007C 28               		dc.b $28, $F, 0, $7C, $28
0000B463 3002 008C 48               		dc.b $30, 2, 0,	$8C, $48
0000B468 480E 008F 10               		dc.b $48, $E, 0, $8F, $10
0000B46D 4809 009B 30               		dc.b $48, 9, 0,	$9B, $30
0000B472 5804 00A1 30               		dc.b $58, 4, 0,	$A1, $30
0000B477 0D                         byte_A96D:	dc.b $D
0000B478 100F 00A3 08               		dc.b $10, $F, 0, $A3, 8
0000B47D 0808 00B3 28               		dc.b 8,	8, 0, $B3, $28
0000B482 100F 00B6 28               		dc.b $10, $F, 0, $B6, $28
0000B487 1800 00C6 48               		dc.b $18, 0, 0,	$C6, $48
0000B48C 2006 00C7 48               		dc.b $20, 6, 0,	$C7, $48
0000B491 3800 00CD 48               		dc.b $38, 0, 0,	$CD, $48
0000B496 300D 00CE 08               		dc.b $30, $D, 0, $CE, 8
0000B49B 300E 00D6 28               		dc.b $30, $E, 0, $D6, $28
0000B4A0 400B 00E2 10               		dc.b $40, $B, 0, $E2, $10
0000B4A5 4808 00EE 28               		dc.b $48, 8, 0,	$EE, $28
0000B4AA 5001 00F1 08               		dc.b $50, 1, 0,	$F1, 8
0000B4AF 5004 00F3 28               		dc.b $50, 4, 0,	$F3, $28
0000B4B4 5800 00F5 28               		dc.b $58, 0, 0,	$F5, $28
0000B4B9 0B                         byte_A9AF:	dc.b $B
0000B4BA 080F 00F6 10               		dc.b 8,	$F, 0, $F6, $10
0000B4BF 080B 0106 30               		dc.b 8,	$B, 1, 6, $30
0000B4C4 1006 0112 48               		dc.b $10, 6, 1,	$12, $48
0000B4C9 280E 0118 18               		dc.b $28, $E, 1, $18, $18
0000B4CE 280E 0124 38               		dc.b $28, $E, 1, $24, $38
0000B4D3 2801 0130 10               		dc.b $28, 1, 1,	$30, $10
0000B4D8 400E 0132 10               		dc.b $40, $E, 1, $32, $10
0000B4DD 4006 013E 30               		dc.b $40, 6, 1,	$3E, $30
0000B4E2 4004 0144 40               		dc.b $40, 4, 1,	$44, $40
0000B4E7 4800 0146 40               		dc.b $48, 0, 1,	$46, $40
0000B4EC 5808 0147 18               		dc.b $58, 8, 1,	$47, $18
0000B4F1 13                         byte_A9E7:	dc.b $13
0000B4F2 280E 01E4 38               		dc.b $28, $E, 1, $E4, $38
0000B4F7 1805 01F0 48               		dc.b $18, 5, 1,	$F0, $48
0000B4FC 4008 01F4 38               		dc.b $40, 8, 1,	$F4, $38
0000B501 4804 01F7 38               		dc.b $48, 4, 1,	$F7, $38
0000B506 100F 014A 10               		dc.b $10, $F, 1, $4A, $10
0000B50B 0804 015A 20               		dc.b 8,	4, 1, $5A, $20
0000B510 000B 015C 30               		dc.b 0,	$B, 1, $5C, $30
0000B515 0800 0168 48               		dc.b 8,	0, 1, $68, $48
0000B51A 1800 0169 48               		dc.b $18, 0, 1,	$69, $48
0000B51F 1805 016A 00               		dc.b $18, 5, 1,	$6A, 0
0000B524 2802 016E 08               		dc.b $28, 2, 1,	$6E, 8
0000B529 300F 0171 10               		dc.b $30, $F, 1, $71, $10
0000B52E 200D 0181 30               		dc.b $20, $D, 1, $81, $30
0000B533 2001 0189 50               		dc.b $20, 1, 1,	$89, $50
0000B538 3008 018B 30               		dc.b $30, 8, 1,	$8B, $30
0000B53D 380E 018E 30               		dc.b $38, $E, 1, $8E, $30
0000B542 500D 019A 08               		dc.b $50, $D, 1, $9A, 8
0000B547 500C 01A2 28               		dc.b $50, $C, 1, $A2, $28
0000B54C 5808 01A6 28               		dc.b $58, 8, 1,	$A6, $28
0000B551 15                         byte_AA47:	dc.b $15
0000B552 280E 01E4 38               		dc.b $28, $E, 1, $E4, $38
0000B557 1805 01F0 48               		dc.b $18, 5, 1,	$F0, $48
0000B55C 4008 01F4 38               		dc.b $40, 8, 1,	$F4, $38
0000B561 4804 01F7 38               		dc.b $48, 4, 1,	$F7, $38
0000B566 180F 01D0 08               		dc.b $18, $F, 1, $D0, 8
0000B56B 1803 01E0 28               		dc.b $18, 3, 1,	$E0, $28
0000B570 100F 014A 10               		dc.b $10, $F, 1, $4A, $10
0000B575 0804 015A 20               		dc.b 8,	4, 1, $5A, $20
0000B57A 000B 015C 30               		dc.b 0,	$B, 1, $5C, $30
0000B57F 0800 0168 48               		dc.b 8,	0, 1, $68, $48
0000B584 1800 0169 48               		dc.b $18, 0, 1,	$69, $48
0000B589 1805 016A 00               		dc.b $18, 5, 1,	$6A, 0
0000B58E 2802 016E 08               		dc.b $28, 2, 1,	$6E, 8
0000B593 300F 0171 10               		dc.b $30, $F, 1, $71, $10
0000B598 200D 0181 30               		dc.b $20, $D, 1, $81, $30
0000B59D 2001 0189 50               		dc.b $20, 1, 1,	$89, $50
0000B5A2 3008 018B 30               		dc.b $30, 8, 1,	$8B, $30
0000B5A7 380E 018E 30               		dc.b $38, $E, 1, $8E, $30
0000B5AC 500D 019A 08               		dc.b $50, $D, 1, $9A, 8
0000B5B1 500C 01A2 28               		dc.b $50, $C, 1, $A2, $28
0000B5B6 5808 01A6 28               		dc.b $58, 8, 1,	$A6, $28
0000B5BB 16                         byte_AAB1:	dc.b $16
0000B5BC 1804 01F9 38               		dc.b $18, 4, 1,	$F9, $38
0000B5C1 2000 01FB 38               		dc.b $20, 0, 1,	$FB, $38
0000B5C6 2808 01FC 30               		dc.b $28, 8, 1,	$FC, $30
0000B5CB 3001 01FF 30               		dc.b $30, 1, 1,	$FF, $30
0000B5D0 300B 0201 38               		dc.b $30, $B, 2, 1, $38
0000B5D5 180F 01D0 08               		dc.b $18, $F, 1, $D0, 8
0000B5DA 1803 01E0 28               		dc.b $18, 3, 1,	$E0, $28
0000B5DF 100F 014A 10               		dc.b $10, $F, 1, $4A, $10
0000B5E4 0804 015A 20               		dc.b 8,	4, 1, $5A, $20
0000B5E9 000B 015C 30               		dc.b 0,	$B, 1, $5C, $30
0000B5EE 0800 0168 48               		dc.b 8,	0, 1, $68, $48
0000B5F3 1800 0169 48               		dc.b $18, 0, 1,	$69, $48
0000B5F8 1805 016A 00               		dc.b $18, 5, 1,	$6A, 0
0000B5FD 2802 016E 08               		dc.b $28, 2, 1,	$6E, 8
0000B602 300F 0171 10               		dc.b $30, $F, 1, $71, $10
0000B607 200D 0181 30               		dc.b $20, $D, 1, $81, $30
0000B60C 2001 0189 50               		dc.b $20, 1, 1,	$89, $50
0000B611 3008 018B 30               		dc.b $30, 8, 1,	$8B, $30
0000B616 380E 018E 30               		dc.b $38, $E, 1, $8E, $30
0000B61B 500D 019A 08               		dc.b $50, $D, 1, $9A, 8
0000B620 500C 01A2 28               		dc.b $50, $C, 1, $A2, $28
0000B625 5808 01A6 28               		dc.b $58, 8, 1,	$A6, $28
0000B62A                            		even
0000B62A                            		even
0000B62A                            
0000B62A                            ; ===========================================================================
0000B62A                            ; ---------------------------------------------------------------------------
0000B62A                            ; Object 2B - Chopper enemy (GHZ)
0000B62A                            ; ---------------------------------------------------------------------------
0000B62A                            
0000B62A                            Obj2B:					; XREF: Obj_Index
0000B62A 7000                       		moveq	#0,d0
0000B62C 1028 0024                  		move.b	$24(a0),d0
0000B630 323B 0000                  		move.w	Obj2B_Index(pc,d0.w),d1
0000B634 4EBB 1000                  		jsr	Obj2B_Index(pc,d1.w)
0000B638 6000 0000                  		bra.w	MarkObjGone
0000B63C                            ; ===========================================================================
0000B63C 0000                       Obj2B_Index:	dc.w Obj2B_Main-Obj2B_Index
0000B63E 0000                       		dc.w Obj2B_ChgSpeed-Obj2B_Index
0000B640                            ; ===========================================================================
0000B640                            
0000B640                            Obj2B_Main:				; XREF: Obj2B_Index
0000B640 5428 0024                  		addq.b	#2,$24(a0)
0000B644 217C 0000 0000 0004        		move.l	#Map_obj2B,4(a0)
0000B64C 317C 047B 0002             		move.w	#$47B,2(a0)
0000B652 117C 0004 0001             		move.b	#4,1(a0)
0000B658 117C 0004 0018             		move.b	#4,$18(a0)
0000B65E 117C 0009 0020             		move.b	#9,$20(a0)
0000B664 117C 0010 0019             		move.b	#$10,$19(a0)
0000B66A 317C F900 0012             		move.w	#-$700,$12(a0)	; set vertical speed
0000B670 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000B676                            
0000B676                            Obj2B_ChgSpeed:				; XREF: Obj2B_Index
0000B676 43F9 0000 0000             		lea	(Ani_obj2B).l,a1
0000B67C 6100 FB9E                  		bsr.w	AnimateSprite
0000B680 6100 0000                  		bsr.w	SpeedToPos
0000B684 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce speed
0000B68A 3028 0030                  		move.w	$30(a0),d0
0000B68E B068 000C                  		cmp.w	$C(a0),d0
0000B692 6400                       		bcc.s	Obj2B_ChgAni
0000B694 3140 000C                  		move.w	d0,$C(a0)
0000B698 317C F900 0012             		move.w	#-$700,$12(a0)	; set vertical speed
0000B69E                            
0000B69E                            Obj2B_ChgAni:
0000B69E 117C 0001 001C             		move.b	#1,$1C(a0)	; use fast animation
0000B6A4 0440 00C0                  		subi.w	#$C0,d0
0000B6A8 B068 000C                  		cmp.w	$C(a0),d0
0000B6AC 6400                       		bcc.s	locret_ABB6
0000B6AE 117C 0000 001C             		move.b	#0,$1C(a0)	; use slow animation
0000B6B4 4A68 0012                  		tst.w	$12(a0)		; is Chopper at	its highest point?
0000B6B8 6B00                       		bmi.s	locret_ABB6	; if not, branch
0000B6BA 117C 0002 001C             		move.b	#2,$1C(a0)	; use stationary animation
0000B6C0                            
0000B6C0                            locret_ABB6:
0000B6C0 4E75                       		rts	
0000B6C2                            ; ===========================================================================
0000B6C2                            Ani_obj2B:
0000B6C2                            	include "_anim\obj2B.asm"
0000B6C2                            ; ---------------------------------------------------------------------------
0000B6C2                            ; Animation script - Chopper enemy
0000B6C2                            ; ---------------------------------------------------------------------------
0000B6C2 0000                       		dc.w byte_ABBE-Ani_obj2B
0000B6C4 0000                       		dc.w byte_ABC2-Ani_obj2B
0000B6C6 0000                       		dc.w byte_ABC6-Ani_obj2B
0000B6C8 0700 01FF                  byte_ABBE:	dc.b 7,	0, 1, $FF
0000B6CC 0300 01FF                  byte_ABC2:	dc.b 3,	0, 1, $FF
0000B6D0 0700 FF                    byte_ABC6:	dc.b 7,	0, $FF
0000B6D4 00                         		even
0000B6D4 00                         		even
0000B6D4                            
0000B6D4                            ; ---------------------------------------------------------------------------
0000B6D4                            ; Sprite mappings - Chopper enemy (GHZ)
0000B6D4                            ; ---------------------------------------------------------------------------
0000B6D4                            Map_obj2B:
0000B6D4                            	include "_maps\obj2B.asm"
0000B6D4                            ; ---------------------------------------------------------------------------
0000B6D4                            ; Sprite mappings - Chopper enemy (GHZ)
0000B6D4                            ; ---------------------------------------------------------------------------
0000B6D4 0000                       		dc.w byte_ABCE-Map_obj2B
0000B6D6 0000                       		dc.w byte_ABD4-Map_obj2B
0000B6D8 01                         byte_ABCE:	dc.b 1
0000B6D9 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0000B6DE 01                         byte_ABD4:	dc.b 1
0000B6DF F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
0000B6E4                            		even
0000B6E4                            		even
0000B6E4                            
0000B6E4                            ; ===========================================================================
0000B6E4                            ; ---------------------------------------------------------------------------
0000B6E4                            ; Object 2C - Jaws enemy (LZ)
0000B6E4                            ; ---------------------------------------------------------------------------
0000B6E4                            
0000B6E4                            Obj2C:					; XREF: Obj_Index
0000B6E4 7000                       		moveq	#0,d0
0000B6E6 1028 0024                  		move.b	$24(a0),d0
0000B6EA 323B 0000                  		move.w	Obj2C_Index(pc,d0.w),d1
0000B6EE 4EFB 1000                  		jmp	Obj2C_Index(pc,d1.w)
0000B6F2                            ; ===========================================================================
0000B6F2 0000                       Obj2C_Index:	dc.w Obj2C_Main-Obj2C_Index
0000B6F4 0000                       		dc.w Obj2C_Turn-Obj2C_Index
0000B6F6                            ; ===========================================================================
0000B6F6                            
0000B6F6                            Obj2C_Main:				; XREF: Obj2C_Index
0000B6F6 5428 0024                  		addq.b	#2,$24(a0)
0000B6FA 217C 0000 0000 0004        		move.l	#Map_obj2C,4(a0)
0000B702 317C 2486 0002             		move.w	#$2486,2(a0)
0000B708 0028 0004 0001             		ori.b	#4,1(a0)
0000B70E 117C 000A 0020             		move.b	#$A,$20(a0)
0000B714 117C 0004 0018             		move.b	#4,$18(a0)
0000B71A 117C 0010 0019             		move.b	#$10,$19(a0)
0000B720 7000                       		moveq	#0,d0
0000B722 1028 0028                  		move.b	$28(a0),d0	; load object subtype number
0000B726 ED48                       		lsl.w	#6,d0		; multiply d0 by 64
0000B728 5340                       		subq.w	#1,d0
0000B72A 3140 0030                  		move.w	d0,$30(a0)	; set turn delay time
0000B72E 3140 0032                  		move.w	d0,$32(a0)
0000B732 317C FFC0 0010             		move.w	#-$40,$10(a0)	; move Jaws to the left
0000B738 0828 0000 0022             		btst	#0,$22(a0)	; is Jaws facing left?
0000B73E 6700                       		beq.s	Obj2C_Turn	; if yes, branch
0000B740 4468 0010                  		neg.w	$10(a0)		; move Jaws to the right
0000B744                            
0000B744                            Obj2C_Turn:				; XREF: Obj2C_Index
0000B744 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from turn delay time
0000B748 6A00                       		bpl.s	Obj2C_Animate	; if time remains, branch
0000B74A 3168 0032 0030             		move.w	$32(a0),$30(a0)	; reset	turn delay time
0000B750 4468 0010                  		neg.w	$10(a0)		; change speed direction
0000B754 0868 0000 0022             		bchg	#0,$22(a0)	; change Jaws facing direction
0000B75A 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000B760                            
0000B760                            Obj2C_Animate:
0000B760 43F9 0000 0000             		lea	(Ani_obj2C).l,a1
0000B766 6100 FAB4                  		bsr.w	AnimateSprite
0000B76A 6100 0000                  		bsr.w	SpeedToPos
0000B76E 6000 0000                  		bra.w	MarkObjGone
0000B772                            ; ===========================================================================
0000B772                            Ani_obj2C:
0000B772                            	include "_anim\obj2C.asm"
0000B772                            ; ---------------------------------------------------------------------------
0000B772                            ; Animation script - Jaws enemy
0000B772                            ; ---------------------------------------------------------------------------
0000B772 0000                       		dc.w byte_AC6A-Ani_obj2C
0000B774 0700 0102 03FF             byte_AC6A:	dc.b 7,	0, 1, 2, 3, $FF
0000B77A                            		even
0000B77A                            		even
0000B77A                            
0000B77A                            ; ---------------------------------------------------------------------------
0000B77A                            ; Sprite mappings - Jaws enemy (LZ)
0000B77A                            ; ---------------------------------------------------------------------------
0000B77A                            Map_obj2C:
0000B77A                            	include "_maps\obj2C.asm"
0000B77A                            ; ---------------------------------------------------------------------------
0000B77A                            ; Sprite mappings - Jaws enemy (LZ)
0000B77A                            ; ---------------------------------------------------------------------------
0000B77A 0000                       		dc.w byte_AC78-Map_obj2C
0000B77C 0000                       		dc.w byte_AC83-Map_obj2C
0000B77E 0000                       		dc.w byte_AC8E-Map_obj2C
0000B780 0000                       		dc.w byte_AC99-Map_obj2C
0000B782 02                         byte_AC78:	dc.b 2
0000B783 F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
0000B788 F505 0018 10               		dc.b $F5, 5, 0,	$18, $10
0000B78D 02                         byte_AC83:	dc.b 2
0000B78E F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
0000B793 F505 001C 10               		dc.b $F5, 5, 0,	$1C, $10
0000B798 02                         byte_AC8E:	dc.b 2
0000B799 F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
0000B79E F505 1018 10               		dc.b $F5, 5, $10, $18, $10
0000B7A3 02                         byte_AC99:	dc.b 2
0000B7A4 F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
0000B7A9 F505 101C 10               		dc.b $F5, 5, $10, $1C, $10
0000B7AE                            		even
0000B7AE                            		even
0000B7AE                            
0000B7AE                            ; ===========================================================================
0000B7AE                            ; ---------------------------------------------------------------------------
0000B7AE                            ; Object 2D - Burrobot enemy (LZ)
0000B7AE                            ; ---------------------------------------------------------------------------
0000B7AE                            
0000B7AE                            Obj2D:					; XREF: Obj_Index
0000B7AE 7000                       		moveq	#0,d0
0000B7B0 1028 0024                  		move.b	$24(a0),d0
0000B7B4 323B 0000                  		move.w	Obj2D_Index(pc,d0.w),d1
0000B7B8 4EFB 1000                  		jmp	Obj2D_Index(pc,d1.w)
0000B7BC                            ; ===========================================================================
0000B7BC 0000                       Obj2D_Index:	dc.w Obj2D_Main-Obj2D_Index
0000B7BE 0000                       		dc.w Obj2D_Action-Obj2D_Index
0000B7C0                            ; ===========================================================================
0000B7C0                            
0000B7C0                            Obj2D_Main:				; XREF: Obj2D_Index
0000B7C0 5428 0024                  		addq.b	#2,$24(a0)
0000B7C4 117C 0013 0016             		move.b	#$13,$16(a0)
0000B7CA 117C 0008 0017             		move.b	#8,$17(a0)
0000B7D0 217C 0000 0000 0004        		move.l	#Map_obj2D,4(a0)
0000B7D8 317C 04A6 0002             		move.w	#$4A6,2(a0)
0000B7DE 0028 0004 0001             		ori.b	#4,1(a0)
0000B7E4 117C 0004 0018             		move.b	#4,$18(a0)
0000B7EA 117C 0005 0020             		move.b	#5,$20(a0)
0000B7F0 117C 000C 0019             		move.b	#$C,$19(a0)
0000B7F6 5C28 0025                  		addq.b	#6,$25(a0)	; run "Obj2D_ChkSonic" routine
0000B7FA 117C 0002 001C             		move.b	#2,$1C(a0)
0000B800                            
0000B800                            Obj2D_Action:				; XREF: Obj2D_Index
0000B800 7000                       		moveq	#0,d0
0000B802 1028 0025                  		move.b	$25(a0),d0
0000B806 323B 0000                  		move.w	Obj2D_Index2(pc,d0.w),d1
0000B80A 4EBB 1000                  		jsr	Obj2D_Index2(pc,d1.w)
0000B80E 43F9 0000 0000             		lea	(Ani_obj2D).l,a1
0000B814 6100 FA06                  		bsr.w	AnimateSprite
0000B818 6000 0000                  		bra.w	MarkObjGone
0000B81C                            ; ===========================================================================
0000B81C 0000                       Obj2D_Index2:	dc.w Obj2D_ChgDir-Obj2D_Index2
0000B81E 0000                       		dc.w Obj2D_Move-Obj2D_Index2
0000B820 0000                       		dc.w Obj2D_Jump-Obj2D_Index2
0000B822 0000                       		dc.w Obj2D_ChkSonic-Obj2D_Index2
0000B824                            ; ===========================================================================
0000B824                            
0000B824                            Obj2D_ChgDir:				; XREF: Obj2D_Index2
0000B824 5368 0030                  		subq.w	#1,$30(a0)
0000B828 6A00                       		bpl.s	locret_AD42
0000B82A 5428 0025                  		addq.b	#2,$25(a0)
0000B82E 317C 00FF 0030             		move.w	#$FF,$30(a0)
0000B834 317C 0080 0010             		move.w	#$80,$10(a0)
0000B83A 117C 0001 001C             		move.b	#1,$1C(a0)
0000B840 0868 0000 0022             		bchg	#0,$22(a0)	; change direction the Burrobot	is facing
0000B846 6700                       		beq.s	locret_AD42
0000B848 4468 0010                  		neg.w	$10(a0)		; change direction the Burrobot	is moving
0000B84C                            
0000B84C                            locret_AD42:
0000B84C 4E75                       		rts	
0000B84E                            ; ===========================================================================
0000B84E                            
0000B84E                            Obj2D_Move:				; XREF: Obj2D_Index2
0000B84E 5368 0030                  		subq.w	#1,$30(a0)
0000B852 6B00                       		bmi.s	loc_AD84
0000B854 6100 0000                  		bsr.w	SpeedToPos
0000B858 0868 0000 0032             		bchg	#0,$32(a0)
0000B85E 6600                       		bne.s	loc_AD78
0000B860 3628 0008                  		move.w	8(a0),d3
0000B864 0643 000C                  		addi.w	#$C,d3
0000B868 0828 0000 0022             		btst	#0,$22(a0)
0000B86E 6600                       		bne.s	loc_AD6A
0000B870 0443 0018                  		subi.w	#$18,d3
0000B874                            
0000B874                            loc_AD6A:
0000B874 4EB9 0000 0000             		jsr	ObjHitFloor2
0000B87A 0C41 000C                  		cmpi.w	#$C,d1
0000B87E 6C00                       		bge.s	loc_AD84
0000B880 4E75                       		rts	
0000B882                            ; ===========================================================================
0000B882                            
0000B882                            loc_AD78:				; XREF: Obj2D_Move
0000B882 4EB9 0000 0000             		jsr	ObjHitFloor
0000B888 D368 000C                  		add.w	d1,$C(a0)
0000B88C 4E75                       		rts	
0000B88E                            ; ===========================================================================
0000B88E                            
0000B88E                            loc_AD84:				; XREF: Obj2D_Move
0000B88E 0838 0002 FE0F             		btst	#2,($FFFFFE0F).w
0000B894 6700                       		beq.s	loc_ADA4
0000B896 5528 0025                  		subq.b	#2,$25(a0)
0000B89A 317C 003B 0030             		move.w	#$3B,$30(a0)
0000B8A0 317C 0000 0010             		move.w	#0,$10(a0)
0000B8A6 117C 0000 001C             		move.b	#0,$1C(a0)
0000B8AC 4E75                       		rts	
0000B8AE                            ; ===========================================================================
0000B8AE                            
0000B8AE                            loc_ADA4:
0000B8AE 5428 0025                  		addq.b	#2,$25(a0)
0000B8B2 317C FC00 0012             		move.w	#-$400,$12(a0)
0000B8B8 117C 0002 001C             		move.b	#2,$1C(a0)
0000B8BE 4E75                       		rts	
0000B8C0                            ; ===========================================================================
0000B8C0                            
0000B8C0                            Obj2D_Jump:				; XREF: Obj2D_Index2
0000B8C0 6100 0000                  		bsr.w	SpeedToPos
0000B8C4 0668 0018 0012             		addi.w	#$18,$12(a0)
0000B8CA 6B00                       		bmi.s	locret_ADF0
0000B8CC 117C 0003 001C             		move.b	#3,$1C(a0)
0000B8D2 4EB9 0000 0000             		jsr	ObjHitFloor
0000B8D8 4A41                       		tst.w	d1
0000B8DA 6A00                       		bpl.s	locret_ADF0
0000B8DC D368 000C                  		add.w	d1,$C(a0)
0000B8E0 317C 0000 0012             		move.w	#0,$12(a0)
0000B8E6 117C 0001 001C             		move.b	#1,$1C(a0)
0000B8EC 317C 00FF 0030             		move.w	#$FF,$30(a0)
0000B8F2 5528 0025                  		subq.b	#2,$25(a0)
0000B8F6 6100 0000                  		bsr.w	Obj2D_ChkSonic2
0000B8FA                            
0000B8FA                            locret_ADF0:
0000B8FA 4E75                       		rts	
0000B8FC                            ; ===========================================================================
0000B8FC                            
0000B8FC                            Obj2D_ChkSonic:				; XREF: Obj2D_Index2
0000B8FC 343C 0060                  		move.w	#$60,d2
0000B900 6100 0000                  		bsr.w	Obj2D_ChkSonic2
0000B904 6400                       		bcc.s	locret_AE20
0000B906 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000B90A 9068 000C                  		sub.w	$C(a0),d0
0000B90E 6400                       		bcc.s	locret_AE20
0000B910 0C40 FF80                  		cmpi.w	#-$80,d0
0000B914 6500                       		bcs.s	locret_AE20
0000B916 4A78 FE08                  		tst.w	($FFFFFE08).w
0000B91A 6600                       		bne.s	locret_AE20
0000B91C 5528 0025                  		subq.b	#2,$25(a0)
0000B920 3141 0010                  		move.w	d1,$10(a0)
0000B924 317C FC00 0012             		move.w	#-$400,$12(a0)
0000B92A                            
0000B92A                            locret_AE20:
0000B92A 4E75                       		rts	
0000B92C                            
0000B92C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B92C                            
0000B92C                            
0000B92C                            Obj2D_ChkSonic2:			; XREF: Obj2D_ChkSonic
0000B92C 323C 0080                  		move.w	#$80,d1
0000B930 08E8 0000 0022             		bset	#0,$22(a0)
0000B936 3038 D008                  		move.w	($FFFFD008).w,d0
0000B93A 9068 0008                  		sub.w	8(a0),d0
0000B93E 6400                       		bcc.s	loc_AE40
0000B940 4440                       		neg.w	d0
0000B942 4441                       		neg.w	d1
0000B944 08A8 0000 0022             		bclr	#0,$22(a0)
0000B94A                            
0000B94A                            loc_AE40:
0000B94A B042                       		cmp.w	d2,d0
0000B94C 4E75                       		rts	
0000B94E                            ; End of function Obj2D_ChkSonic2
0000B94E                            
0000B94E                            ; ===========================================================================
0000B94E                            Ani_obj2D:
0000B94E                            	include "_anim\obj2D.asm"
0000B94E                            ; ---------------------------------------------------------------------------
0000B94E                            ; Animation script - Burrobot enemy
0000B94E                            ; ---------------------------------------------------------------------------
0000B94E 0000                       		dc.w byte_AE4C-Ani_obj2D
0000B950 0000                       		dc.w byte_AE50-Ani_obj2D
0000B952 0000                       		dc.w byte_AE54-Ani_obj2D
0000B954 0000                       		dc.w byte_AE58-Ani_obj2D
0000B956 0300 06FF                  byte_AE4C:	dc.b 3,	0, 6, $FF
0000B95A 0300 01FF                  byte_AE50:	dc.b 3,	0, 1, $FF
0000B95E 0302 03FF                  byte_AE54:	dc.b 3,	2, 3, $FF
0000B962 0304 FF                    byte_AE58:	dc.b 3,	4, $FF
0000B966 00                         		even
0000B966 00                         		even
0000B966                            
0000B966                            ; ---------------------------------------------------------------------------
0000B966                            ; Sprite mappings - Burrobot enemy (LZ)
0000B966                            ; ---------------------------------------------------------------------------
0000B966                            Map_obj2D:
0000B966                            	include "_maps\obj2D.asm"
0000B966                            ; ---------------------------------------------------------------------------
0000B966                            ; Sprite mappings - Burrobot enemy (LZ)
0000B966                            ; ---------------------------------------------------------------------------
0000B966 0000                       		dc.w byte_AE6A-Map_obj2D
0000B968 0000                       		dc.w byte_AE75-Map_obj2D
0000B96A 0000                       		dc.w byte_AE80-Map_obj2D
0000B96C 0000                       		dc.w byte_AE8B-Map_obj2D
0000B96E 0000                       		dc.w byte_AE96-Map_obj2D
0000B970 0000                       		dc.w byte_AEA1-Map_obj2D
0000B972 0000                       		dc.w byte_AEAC-Map_obj2D
0000B974 02                         byte_AE6A:	dc.b 2
0000B975 EC0A 0000 F0               		dc.b $EC, $A, 0, 0, $F0
0000B97A 0409 0009 F4               		dc.b 4,	9, 0, 9, $F4
0000B97F 02                         byte_AE75:	dc.b 2
0000B980 EC0A 000F F0               		dc.b $EC, $A, 0, $F, $F0
0000B985 0409 0018 F4               		dc.b 4,	9, 0, $18, $F4
0000B98A 02                         byte_AE80:	dc.b 2
0000B98B E80A 001E F4               		dc.b $E8, $A, 0, $1E, $F4
0000B990 000A 0027 F4               		dc.b 0,	$A, 0, $27, $F4
0000B995 02                         byte_AE8B:	dc.b 2
0000B996 E80A 0030 F4               		dc.b $E8, $A, 0, $30, $F4
0000B99B 000A 0039 F4               		dc.b 0,	$A, 0, $39, $F4
0000B9A0 02                         byte_AE96:	dc.b 2
0000B9A1 E80A 000F F0               		dc.b $E8, $A, 0, $F, $F0
0000B9A6 000A 0042 F4               		dc.b 0,	$A, 0, $42, $F4
0000B9AB 02                         byte_AEA1:	dc.b 2
0000B9AC F406 004B E8               		dc.b $F4, 6, 0,	$4B, $E8
0000B9B1 F40A 0051 F8               		dc.b $F4, $A, 0, $51, $F8
0000B9B6 02                         byte_AEAC:	dc.b 2
0000B9B7 EC0A 000F F0               		dc.b $EC, $A, 0, $F, $F0
0000B9BC 0409 0009 F4               		dc.b 4,	9, 0, 9, $F4
0000B9C2 00                         		even
0000B9C2 00                         		even
0000B9C2                            
0000B9C2                            ; ===========================================================================
0000B9C2                            ; ---------------------------------------------------------------------------
0000B9C2                            ; Object 2F - large moving platforms (MZ)
0000B9C2                            ; ---------------------------------------------------------------------------
0000B9C2                            
0000B9C2                            Obj2F:					; XREF: Obj_Index
0000B9C2 7000                       		moveq	#0,d0
0000B9C4 1028 0024                  		move.b	$24(a0),d0
0000B9C8 323B 0000                  		move.w	Obj2F_Index(pc,d0.w),d1
0000B9CC 4EFB 1000                  		jmp	Obj2F_Index(pc,d1.w)
0000B9D0                            ; ===========================================================================
0000B9D0 0000                       Obj2F_Index:	dc.w Obj2F_Main-Obj2F_Index
0000B9D2 0000                       		dc.w Obj2F_Action-Obj2F_Index
0000B9D4                            
0000B9D4 0000                       Obj2F_Data:	dc.w Obj2F_Data1-Obj2F_Data 	; collision angle data
0000B9D6 0040                       		dc.b 0,	$40			; frame	number,	platform width
0000B9D8 0000                       		dc.w Obj2F_Data3-Obj2F_Data
0000B9DA 0140                       		dc.b 1,	$40
0000B9DC 0000                       		dc.w Obj2F_Data2-Obj2F_Data
0000B9DE 0220                       		dc.b 2,	$20
0000B9E0                            ; ===========================================================================
0000B9E0                            
0000B9E0                            Obj2F_Main:				; XREF: Obj2F_Index
0000B9E0 5428 0024                  		addq.b	#2,$24(a0)
0000B9E4 217C 0000 0000 0004        		move.l	#Map_obj2F,4(a0)
0000B9EC 317C C000 0002             		move.w	#$C000,2(a0)
0000B9F2 117C 0004 0001             		move.b	#4,1(a0)
0000B9F8 117C 0005 0018             		move.b	#5,$18(a0)
0000B9FE 3168 000C 002C             		move.w	$C(a0),$2C(a0)
0000BA04 3168 0008 002A             		move.w	8(a0),$2A(a0)
0000BA0A 7000                       		moveq	#0,d0
0000BA0C 1028 0028                  		move.b	$28(a0),d0
0000BA10 E448                       		lsr.w	#2,d0
0000BA12 0240 001C                  		andi.w	#$1C,d0
0000BA16 43FB 00BC                  		lea	Obj2F_Data(pc,d0.w),a1
0000BA1A 3019                       		move.w	(a1)+,d0
0000BA1C 45FB 00B6                  		lea	Obj2F_Data(pc,d0.w),a2
0000BA20 214A 0030                  		move.l	a2,$30(a0)
0000BA24 1159 001A                  		move.b	(a1)+,$1A(a0)
0000BA28 1151 0019                  		move.b	(a1),$19(a0)
0000BA2C 0228 000F 0028             		andi.b	#$F,$28(a0)
0000BA32 117C 0040 0016             		move.b	#$40,$16(a0)
0000BA38 08E8 0004 0001             		bset	#4,1(a0)
0000BA3E                            
0000BA3E                            Obj2F_Action:				; XREF: Obj2F_Index
0000BA3E 6100 0000                  		bsr.w	Obj2F_Types
0000BA42 4A28 0025                  		tst.b	$25(a0)
0000BA46 6700                       		beq.s	Obj2F_Solid
0000BA48 7200                       		moveq	#0,d1
0000BA4A 1228 0019                  		move.b	$19(a0),d1
0000BA4E 0641 000B                  		addi.w	#$B,d1
0000BA52 6100 C61C                  		bsr.w	ExitPlatform
0000BA56 0829 0003 0022             		btst	#3,$22(a1)
0000BA5C 6600 0000                  		bne.w	Obj2F_Slope
0000BA60 4228 0025                  		clr.b	$25(a0)
0000BA64 6000                       		bra.s	Obj2F_Display
0000BA66                            ; ===========================================================================
0000BA66                            
0000BA66                            Obj2F_Slope:				; XREF: Obj2F_Action
0000BA66 7200                       		moveq	#0,d1
0000BA68 1228 0019                  		move.b	$19(a0),d1
0000BA6C 0641 000B                  		addi.w	#$B,d1
0000BA70 2468 0030                  		movea.l	$30(a0),a2
0000BA74 3428 0008                  		move.w	8(a0),d2
0000BA78 6100 D554                  		bsr.w	SlopeObject2
0000BA7C 6000                       		bra.s	Obj2F_Display
0000BA7E                            ; ===========================================================================
0000BA7E                            
0000BA7E                            Obj2F_Solid:				; XREF: Obj2F_Action
0000BA7E 7200                       		moveq	#0,d1
0000BA80 1228 0019                  		move.b	$19(a0),d1
0000BA84 0641 000B                  		addi.w	#$B,d1
0000BA88 343C 0020                  		move.w	#$20,d2
0000BA8C 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000BA92 6600                       		bne.s	loc_AF8E
0000BA94 343C 0030                  		move.w	#$30,d2
0000BA98                            
0000BA98                            loc_AF8E:
0000BA98 2468 0030                  		movea.l	$30(a0),a2
0000BA9C 6100 0000                  		bsr.w	SolidObject2F
0000BAA0                            
0000BAA0                            Obj2F_Display:				; XREF: Obj2F_Action
0000BAA0 6100 0000                  		bsr.w	DisplaySprite
0000BAA4 6000 0000                  		bra.w	Obj2F_ChkDel
0000BAA8                            
0000BAA8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000BAA8                            
0000BAA8                            
0000BAA8                            Obj2F_Types:				; XREF: Obj2F_Action
0000BAA8 7000                       		moveq	#0,d0
0000BAAA 1028 0028                  		move.b	$28(a0),d0
0000BAAE 0240 0007                  		andi.w	#7,d0
0000BAB2 D040                       		add.w	d0,d0
0000BAB4 323B 0000                  		move.w	Obj2F_TypeIndex(pc,d0.w),d1
0000BAB8 4EFB 1000                  		jmp	Obj2F_TypeIndex(pc,d1.w)
0000BABC                            ; End of function Obj2F_Types
0000BABC                            
0000BABC                            ; ===========================================================================
0000BABC 0000                       Obj2F_TypeIndex:dc.w Obj2F_Type00-Obj2F_TypeIndex
0000BABE 0000                       		dc.w Obj2F_Type01-Obj2F_TypeIndex
0000BAC0 0000                       		dc.w Obj2F_Type02-Obj2F_TypeIndex
0000BAC2 0000                       		dc.w Obj2F_Type03-Obj2F_TypeIndex
0000BAC4 0000                       		dc.w Obj2F_Type04-Obj2F_TypeIndex
0000BAC6 0000                       		dc.w Obj2F_Type05-Obj2F_TypeIndex
0000BAC8                            ; ===========================================================================
0000BAC8                            
0000BAC8                            Obj2F_Type00:				; XREF: Obj2F_TypeIndex
0000BAC8 4E75                       		rts			; type 00 platform doesn't move
0000BACA                            ; ===========================================================================
0000BACA                            
0000BACA                            Obj2F_Type01:				; XREF: Obj2F_TypeIndex
0000BACA 1038 FE60                  		move.b	($FFFFFE60).w,d0
0000BACE 323C 0020                  		move.w	#$20,d1
0000BAD2 6000                       		bra.s	Obj2F_Move
0000BAD4                            ; ===========================================================================
0000BAD4                            
0000BAD4                            Obj2F_Type02:				; XREF: Obj2F_TypeIndex
0000BAD4 1038 FE64                  		move.b	($FFFFFE64).w,d0
0000BAD8 323C 0030                  		move.w	#$30,d1
0000BADC 6000                       		bra.s	Obj2F_Move
0000BADE                            ; ===========================================================================
0000BADE                            
0000BADE                            Obj2F_Type03:				; XREF: Obj2F_TypeIndex
0000BADE 1038 FE68                  		move.b	($FFFFFE68).w,d0
0000BAE2 323C 0040                  		move.w	#$40,d1
0000BAE6 6000                       		bra.s	Obj2F_Move
0000BAE8                            ; ===========================================================================
0000BAE8                            
0000BAE8                            Obj2F_Type04:				; XREF: Obj2F_TypeIndex
0000BAE8 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
0000BAEC 323C 0060                  		move.w	#$60,d1
0000BAF0                            
0000BAF0                            Obj2F_Move:
0000BAF0 0828 0003 0028             		btst	#3,$28(a0)
0000BAF6 6700                       		beq.s	loc_AFF2
0000BAF8 4440                       		neg.w	d0
0000BAFA D041                       		add.w	d1,d0
0000BAFC                            
0000BAFC                            loc_AFF2:
0000BAFC 3228 002C                  		move.w	$2C(a0),d1
0000BB00 9240                       		sub.w	d0,d1
0000BB02 3141 000C                  		move.w	d1,$C(a0)	; update position on y-axis
0000BB06 4E75                       		rts	
0000BB08                            ; ===========================================================================
0000BB08                            
0000BB08                            Obj2F_Type05:				; XREF: Obj2F_TypeIndex
0000BB08 1028 0034                  		move.b	$34(a0),d0
0000BB0C 4A28 0025                  		tst.b	$25(a0)
0000BB10 6600                       		bne.s	loc_B010
0000BB12 5500                       		subq.b	#2,d0
0000BB14 6400                       		bcc.s	loc_B01C
0000BB16 7000                       		moveq	#0,d0
0000BB18 6000                       		bra.s	loc_B01C
0000BB1A                            ; ===========================================================================
0000BB1A                            
0000BB1A                            loc_B010:
0000BB1A 5800                       		addq.b	#4,d0
0000BB1C 0C00 0040                  		cmpi.b	#$40,d0
0000BB20 6500                       		bcs.s	loc_B01C
0000BB22 103C 0040                  		move.b	#$40,d0
0000BB26                            
0000BB26                            loc_B01C:
0000BB26 1140 0034                  		move.b	d0,$34(a0)
0000BB2A 4EB9 0000 33D4             		jsr	(CalcSine).l
0000BB30 E848                       		lsr.w	#4,d0
0000BB32 3200                       		move.w	d0,d1
0000BB34 D068 002C                  		add.w	$2C(a0),d0
0000BB38 3140 000C                  		move.w	d0,$C(a0)
0000BB3C 0C28 0020 0034             		cmpi.b	#$20,$34(a0)
0000BB42 6600                       		bne.s	loc_B07A
0000BB44 4A28 0035                  		tst.b	$35(a0)
0000BB48 6600                       		bne.s	loc_B07A
0000BB4A 117C 0001 0035             		move.b	#1,$35(a0)
0000BB50 6100 0000                  		bsr.w	SingleObjLoad2
0000BB54 6600                       		bne.s	loc_B07A
0000BB56 12BC 0035                  		move.b	#$35,0(a1)	; load sitting flame object
0000BB5A 3368 0008 0008             		move.w	8(a0),8(a1)
0000BB60 3368 002C 002C             		move.w	$2C(a0),$2C(a1)
0000BB66 5069 002C                  		addq.w	#8,$2C(a1)
0000BB6A 5769 002C                  		subq.w	#3,$2C(a1)
0000BB6E 0469 0040 0008             		subi.w	#$40,8(a1)
0000BB74 2368 0030 0030             		move.l	$30(a0),$30(a1)
0000BB7A 2348 0038                  		move.l	a0,$38(a1)
0000BB7E 2448                       		movea.l	a0,a2
0000BB80 6100                       		bsr.s	sub_B09C
0000BB82                            
0000BB82                            loc_B07A:
0000BB82 7400                       		moveq	#0,d2
0000BB84 45E8 0036                  		lea	$36(a0),a2
0000BB88 141A                       		move.b	(a2)+,d2
0000BB8A 5302                       		subq.b	#1,d2
0000BB8C 6500                       		bcs.s	locret_B09A
0000BB8E                            
0000BB8E                            loc_B086:
0000BB8E 7000                       		moveq	#0,d0
0000BB90 101A                       		move.b	(a2)+,d0
0000BB92 ED48                       		lsl.w	#6,d0
0000BB94 0640 D000                  		addi.w	#-$3000,d0
0000BB98 3240                       		movea.w	d0,a1
0000BB9A 3341 003C                  		move.w	d1,$3C(a1)
0000BB9E 51CA FFEE                  		dbf	d2,loc_B086
0000BBA2                            
0000BBA2                            locret_B09A:
0000BBA2 4E75                       		rts	
0000BBA4                            
0000BBA4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000BBA4                            
0000BBA4                            
0000BBA4                            sub_B09C:
0000BBA4 45EA 0036                  		lea	$36(a2),a2
0000BBA8 7000                       		moveq	#0,d0
0000BBAA 1012                       		move.b	(a2),d0
0000BBAC 5212                       		addq.b	#1,(a2)
0000BBAE 45F2 0001                  		lea	1(a2,d0.w),a2
0000BBB2 3009                       		move.w	a1,d0
0000BBB4 0440 D000                  		subi.w	#-$3000,d0
0000BBB8 EC48                       		lsr.w	#6,d0
0000BBBA 0240 007F                  		andi.w	#$7F,d0
0000BBBE 1480                       		move.b	d0,(a2)
0000BBC0 4E75                       		rts	
0000BBC2                            ; End of function sub_B09C
0000BBC2                            
0000BBC2                            ; ===========================================================================
0000BBC2                            
0000BBC2                            Obj2F_ChkDel:				; XREF: Obj2F_Display
0000BBC2 4A28 0035                  		tst.b	$35(a0)
0000BBC6 6700                       		beq.s	loc_B0C6
0000BBC8 4A28 0001                  		tst.b	1(a0)
0000BBCC 6A00                       		bpl.s	Obj2F_DelFlames
0000BBCE                            
0000BBCE                            loc_B0C6:
0000BBCE 3028 002A                  		move.w	$2A(a0),d0
0000BBD2 0240 FF80                  		andi.w	#$FF80,d0
0000BBD6 3238 F700                  		move.w	($FFFFF700).w,d1
0000BBDA 0441 0080                  		subi.w	#$80,d1
0000BBDE 0241 FF80                  		andi.w	#$FF80,d1
0000BBE2 9041                       		sub.w	d1,d0
0000BBE4 0C40 0280                  		cmpi.w	#$280,d0
0000BBE8 6200 0000                  		bhi.w	DeleteObject
0000BBEC 4E75                       		rts	
0000BBEE                            ; ===========================================================================
0000BBEE                            
0000BBEE                            Obj2F_DelFlames:			; XREF: Obj2F_ChkDel
0000BBEE 7400                       		moveq	#0,d2
0000BBF0                            
0000BBF0                            loc_B0E8:
0000BBF0 45E8 0036                  		lea	$36(a0),a2
0000BBF4 1412                       		move.b	(a2),d2
0000BBF6 421A                       		clr.b	(a2)+
0000BBF8 5302                       		subq.b	#1,d2
0000BBFA 6500                       		bcs.s	locret_B116
0000BBFC                            
0000BBFC                            loc_B0F4:
0000BBFC 7000                       		moveq	#0,d0
0000BBFE 1012                       		move.b	(a2),d0
0000BC00 421A                       		clr.b	(a2)+
0000BC02 ED48                       		lsl.w	#6,d0
0000BC04 0640 D000                  		addi.w	#-$3000,d0
0000BC08 3240                       		movea.w	d0,a1
0000BC0A 6100 0000                  		bsr.w	DeleteObject2
0000BC0E 51CA FFEC                  		dbf	d2,loc_B0F4
0000BC12 117C 0000 0035             		move.b	#0,$35(a0)
0000BC18 117C 0000 0034             		move.b	#0,$34(a0)
0000BC1E                            
0000BC1E                            locret_B116:
0000BC1E 4E75                       		rts	
0000BC20                            ; ===========================================================================
0000BC20                            ; ---------------------------------------------------------------------------
0000BC20                            ; Collision data for large moving platforms (MZ)
0000BC20                            ; ---------------------------------------------------------------------------
0000BC20                            Obj2F_Data1:	incbin	misc\mz_pfm1.bin
0000BC6C                            		even
0000BC6C                            Obj2F_Data2:	incbin	misc\mz_pfm2.bin
0000BC98                            		even
0000BC98                            Obj2F_Data3:	incbin	misc\mz_pfm3.bin
0000BCE4                            		even
0000BCE4                            ; ===========================================================================
0000BCE4                            ; ---------------------------------------------------------------------------
0000BCE4                            ; Object 35 - fireball that sits on the	floor (MZ)
0000BCE4                            ; (appears when	you walk on sinking platforms)
0000BCE4                            ; ---------------------------------------------------------------------------
0000BCE4                            
0000BCE4                            Obj35:					; XREF: Obj_Index
0000BCE4 7000                       		moveq	#0,d0
0000BCE6 1028 0024                  		move.b	$24(a0),d0
0000BCEA 323B 0000                  		move.w	Obj35_Index(pc,d0.w),d1
0000BCEE 4EFB 1000                  		jmp	Obj35_Index(pc,d1.w)
0000BCF2                            ; ===========================================================================
0000BCF2 0000                       Obj35_Index:	dc.w Obj35_Main-Obj35_Index
0000BCF4 0000                       		dc.w loc_B238-Obj35_Index
0000BCF6 0000                       		dc.w Obj35_Move-Obj35_Index
0000BCF8                            ; ===========================================================================
0000BCF8                            
0000BCF8                            Obj35_Main:				; XREF: Obj35_Index
0000BCF8 5428 0024                  		addq.b	#2,$24(a0)
0000BCFC 217C 0000 0000 0004        		move.l	#Map_obj14,4(a0)
0000BD04 317C 0345 0002             		move.w	#$345,2(a0)
0000BD0A 3168 0008 002A             		move.w	8(a0),$2A(a0)
0000BD10 117C 0004 0001             		move.b	#4,1(a0)
0000BD16 117C 0001 0018             		move.b	#1,$18(a0)
0000BD1C 117C 008B 0020             		move.b	#$8B,$20(a0)
0000BD22 117C 0008 0019             		move.b	#8,$19(a0)
0000BD28 303C 00C8                  		move.w	#$C8,d0
0000BD2C 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play flame sound
0000BD32 4A28 0028                  		tst.b	$28(a0)
0000BD36 6700                       		beq.s	loc_B238
0000BD38 5428 0024                  		addq.b	#2,$24(a0)
0000BD3C 6000 0000                  		bra.w	Obj35_Move
0000BD40                            ; ===========================================================================
0000BD40                            
0000BD40                            loc_B238:				; XREF: Obj35_Index
0000BD40 2268 0030                  		movea.l	$30(a0),a1
0000BD44 3228 0008                  		move.w	8(a0),d1
0000BD48 9268 002A                  		sub.w	$2A(a0),d1
0000BD4C 0641 000C                  		addi.w	#$C,d1
0000BD50 3001                       		move.w	d1,d0
0000BD52 E248                       		lsr.w	#1,d0
0000BD54 1031 0000                  		move.b	(a1,d0.w),d0
0000BD58 4440                       		neg.w	d0
0000BD5A D068 002C                  		add.w	$2C(a0),d0
0000BD5E 3400                       		move.w	d0,d2
0000BD60 D068 003C                  		add.w	$3C(a0),d0
0000BD64 3140 000C                  		move.w	d0,$C(a0)
0000BD68 0C41 0084                  		cmpi.w	#$84,d1
0000BD6C 6400                       		bcc.s	loc_B2B0
0000BD6E 06A8 0001 0000 0008        		addi.l	#$10000,8(a0)
0000BD76 0C41 0080                  		cmpi.w	#$80,d1
0000BD7A 6400                       		bcc.s	loc_B2B0
0000BD7C 2028 0008                  		move.l	8(a0),d0
0000BD80 0680 0008 0000             		addi.l	#$80000,d0
0000BD86 0280 000F FFFF             		andi.l	#$FFFFF,d0
0000BD8C 6600                       		bne.s	loc_B2B0
0000BD8E 6100 0000                  		bsr.w	SingleObjLoad2
0000BD92 6600                       		bne.s	loc_B2B0
0000BD94 12BC 0035                  		move.b	#$35,0(a1)
0000BD98 3368 0008 0008             		move.w	8(a0),8(a1)
0000BD9E 3342 002C                  		move.w	d2,$2C(a1)
0000BDA2 3368 003C 003C             		move.w	$3C(a0),$3C(a1)
0000BDA8 137C 0001 0028             		move.b	#1,$28(a1)
0000BDAE 2468 0038                  		movea.l	$38(a0),a2
0000BDB2 6100 FDF0                  		bsr.w	sub_B09C
0000BDB6                            
0000BDB6                            loc_B2B0:
0000BDB6 6000                       		bra.s	Obj35_Animate
0000BDB8                            ; ===========================================================================
0000BDB8                            
0000BDB8                            Obj35_Move:				; XREF: Obj35_Index
0000BDB8 3028 002C                  		move.w	$2C(a0),d0
0000BDBC D068 003C                  		add.w	$3C(a0),d0
0000BDC0 3140 000C                  		move.w	d0,$C(a0)
0000BDC4                            
0000BDC4                            Obj35_Animate:				; XREF: loc_B238
0000BDC4 43F9 0000 0000             		lea	(Ani_obj35).l,a1
0000BDCA 6100 F450                  		bsr.w	AnimateSprite
0000BDCE 6000 0000                  		bra.w	DisplaySprite
0000BDD2                            ; ===========================================================================
0000BDD2                            Ani_obj35:
0000BDD2                            	include "_anim\obj35.asm"
0000BDD2                            ; ---------------------------------------------------------------------------
0000BDD2                            ; Animation script - fireball that sits on the	floor (MZ)
0000BDD2                            ; ---------------------------------------------------------------------------
0000BDD2 0000                       		dc.w byte_B2CE-Ani_obj35
0000BDD4 0500 2001 21FF             byte_B2CE:	dc.b 5,	0, $20,	1, $21,	$FF
0000BDDA                            		even
0000BDDA                            		even
0000BDDA                            
0000BDDA                            ; ---------------------------------------------------------------------------
0000BDDA                            ; Sprite mappings - large moving platforms (MZ)
0000BDDA                            ; ---------------------------------------------------------------------------
0000BDDA                            Map_obj2F:
0000BDDA                            	include "_maps\obj2F.asm"
0000BDDA                            ; ---------------------------------------------------------------------------
0000BDDA                            ; Sprite mappings - large moving platforms (MZ)
0000BDDA                            ; ---------------------------------------------------------------------------
0000BDDA 0000                       		dc.w byte_B2DA-Map_obj2F
0000BDDC 0000                       		dc.w byte_B31C-Map_obj2F
0000BDDE 0000                       		dc.w byte_B34F-Map_obj2F
0000BDE0 0D                         byte_B2DA:	dc.b $D
0000BDE1 D806 0057 C0               		dc.b $D8, 6, 0,	$57, $C0
0000BDE6 F005 0053 C0               		dc.b $F0, 5, 0,	$53, $C0
0000BDEB 000F 0001 C0               		dc.b 0,	$F, 0, 1, $C0
0000BDF0 D00F 0027 D0               		dc.b $D0, $F, 0, $27, $D0
0000BDF5 F00D 0037 D0               		dc.b $F0, $D, 0, $37, $D0
0000BDFA F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000BDFF D00F 0011 F0               		dc.b $D0, $F, 0, $11, $F0
0000BE04 D00F 003F 10               		dc.b $D0, $F, 0, $3F, $10
0000BE09 F00D 004F 10               		dc.b $F0, $D, 0, $4F, $10
0000BE0E F00F 0001 00               		dc.b $F0, $F, 0, 1, 0
0000BE13 000F 0001 20               		dc.b 0,	$F, 0, 1, $20
0000BE18 D806 0057 30               		dc.b $D8, 6, 0,	$57, $30
0000BE1D F005 0053 30               		dc.b $F0, 5, 0,	$53, $30
0000BE22 0A                         byte_B31C:	dc.b $A
0000BE23 D00F 0027 C0               		dc.b $D0, $F, 0, $27, $C0
0000BE28 F00D 0037 C0               		dc.b $F0, $D, 0, $37, $C0
0000BE2D 000F 0001 C0               		dc.b 0,	$F, 0, 1, $C0
0000BE32 C00F 0027 E0               		dc.b $C0, $F, 0, $27, $E0
0000BE37 E00D 0037 E0               		dc.b $E0, $D, 0, $37, $E0
0000BE3C F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000BE41 C00F 0011 00               		dc.b $C0, $F, 0, $11, 0
0000BE46 E00F 0001 00               		dc.b $E0, $F, 0, 1, 0
0000BE4B C00F 003F 20               		dc.b $C0, $F, 0, $3F, $20
0000BE50 E00D 004F 20               		dc.b $E0, $D, 0, $4F, $20
0000BE55 06                         byte_B34F:	dc.b 6
0000BE56 D00F 0011 E0               		dc.b $D0, $F, 0, $11, $E0
0000BE5B F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000BE60 100F 0001 E0               		dc.b $10, $F, 0, 1, $E0
0000BE65 D00F 0011 00               		dc.b $D0, $F, 0, $11, 0
0000BE6A F00F 0001 00               		dc.b $F0, $F, 0, 1, 0
0000BE6F 100F 0001 00               		dc.b $10, $F, 0, 1, 0
0000BE74                            		even
0000BE74                            		even
0000BE74                            
0000BE74                            ; ---------------------------------------------------------------------------
0000BE74                            ; Sprite mappings - lava balls (MZ, SLZ)
0000BE74                            ; ---------------------------------------------------------------------------
0000BE74                            Map_obj14:
0000BE74                            	include "_maps\obj14.asm"
0000BE74                            ; ---------------------------------------------------------------------------
0000BE74                            ; Sprite mappings - lava balls (MZ, SLZ)
0000BE74                            ; ---------------------------------------------------------------------------
0000BE74 0000                       		dc.w byte_B37A-Map_obj14
0000BE76 0000                       		dc.w byte_B380-Map_obj14
0000BE78 0000                       		dc.w byte_B386-Map_obj14
0000BE7A 0000                       		dc.w byte_B38C-Map_obj14
0000BE7C 0000                       		dc.w byte_B392-Map_obj14
0000BE7E 0000                       		dc.w byte_B398-Map_obj14
0000BE80 01                         byte_B37A:	dc.b 1
0000BE81 E807 0000 F8               		dc.b $E8, 7, 0,	0, $F8
0000BE86 01                         byte_B380:	dc.b 1
0000BE87 E807 0008 F8               		dc.b $E8, 7, 0,	8, $F8
0000BE8C 01                         byte_B386:	dc.b 1
0000BE8D F006 0010 F8               		dc.b $F0, 6, 0,	$10, $F8
0000BE92 01                         byte_B38C:	dc.b 1
0000BE93 F80D 0016 E8               		dc.b $F8, $D, 0, $16, $E8
0000BE98 01                         byte_B392:	dc.b 1
0000BE99 F80D 001E E8               		dc.b $F8, $D, 0, $1E, $E8
0000BE9E 01                         byte_B398:	dc.b 1
0000BE9F F809 0026 F0               		dc.b $F8, 9, 0,	$26, $F0
0000BEA4                            		even
0000BEA4                            		even
0000BEA4                            
0000BEA4                            ; ===========================================================================
0000BEA4                            ; ---------------------------------------------------------------------------
0000BEA4                            ; Object 30 - large green glassy blocks	(MZ)
0000BEA4                            ; ---------------------------------------------------------------------------
0000BEA4                            
0000BEA4                            Obj30:					; XREF: Obj_Index
0000BEA4 7000                       		moveq	#0,d0
0000BEA6 1028 0024                  		move.b	$24(a0),d0
0000BEAA 323B 0000                  		move.w	Obj30_Index(pc,d0.w),d1
0000BEAE 4EBB 1000                  		jsr	Obj30_Index(pc,d1.w)
0000BEB2 3028 0008                  		move.w	8(a0),d0
0000BEB6 0240 FF80                  		andi.w	#$FF80,d0
0000BEBA 3238 F700                  		move.w	($FFFFF700).w,d1
0000BEBE 0441 0080                  		subi.w	#$80,d1
0000BEC2 0241 FF80                  		andi.w	#$FF80,d1
0000BEC6 9041                       		sub.w	d1,d0
0000BEC8 0C40 0280                  		cmpi.w	#$280,d0
0000BECC 6200 0000                  		bhi.w	Obj30_Delete
0000BED0 6000 0000                  		bra.w	DisplaySprite
0000BED4                            ; ===========================================================================
0000BED4                            
0000BED4                            Obj30_Delete:
0000BED4 6000 0000                  		bra.w	DeleteObject
0000BED8                            ; ===========================================================================
0000BED8 0000                       Obj30_Index:	dc.w Obj30_Main-Obj30_Index
0000BEDA 0000                       		dc.w Obj30_Block012-Obj30_Index
0000BEDC 0000                       		dc.w Obj30_Reflect012-Obj30_Index
0000BEDE 0000                       		dc.w Obj30_Block34-Obj30_Index
0000BEE0 0000                       		dc.w Obj30_Reflect34-Obj30_Index
0000BEE2                            
0000BEE2 0200 00                    Obj30_Vars1:	dc.b 2,	0, 0	; routine num, y-axis dist from	origin,	frame num
0000BEE5 0400 01                    		dc.b 4,	0, 1
0000BEE8 0600 02                    Obj30_Vars2:	dc.b 6,	0, 2
0000BEEB 0800 01                    		dc.b 8,	0, 1
0000BEEE                            ; ===========================================================================
0000BEEE                            
0000BEEE                            Obj30_Main:				; XREF: Obj30_Index
0000BEEE 45F9 0000 BEE2             		lea	(Obj30_Vars1).l,a2
0000BEF4 7201                       		moveq	#1,d1
0000BEF6 117C 0048 0016             		move.b	#$48,$16(a0)
0000BEFC 0C28 0003 0028             		cmpi.b	#3,$28(a0)	; is object type 0/1/2 ?
0000BF02 6500                       		bcs.s	loc_B40C	; if yes, branch
0000BF04 45F9 0000 BEE8             		lea	(Obj30_Vars2).l,a2
0000BF0A 7201                       		moveq	#1,d1
0000BF0C 117C 0038 0016             		move.b	#$38,$16(a0)
0000BF12                            
0000BF12                            loc_B40C:
0000BF12 2248                       		movea.l	a0,a1
0000BF14 6000                       		bra.s	Obj30_Load	; load main object
0000BF16                            ; ===========================================================================
0000BF16                            
0000BF16                            Obj30_Loop:
0000BF16 6100 0000                  		bsr.w	SingleObjLoad2
0000BF1A 6600                       		bne.s	loc_B480
0000BF1C                            
0000BF1C                            Obj30_Load:				; XREF: Obj30_Main
0000BF1C 135A 0024                  		move.b	(a2)+,$24(a1)
0000BF20 12BC 0030                  		move.b	#$30,0(a1)
0000BF24 3368 0008 0008             		move.w	8(a0),8(a1)
0000BF2A 101A                       		move.b	(a2)+,d0
0000BF2C 4880                       		ext.w	d0
0000BF2E D068 000C                  		add.w	$C(a0),d0
0000BF32 3340 000C                  		move.w	d0,$C(a1)
0000BF36 237C 0000 0000 0004        		move.l	#Map_obj30,4(a1)
0000BF3E 337C C38E 0002             		move.w	#$C38E,2(a1)
0000BF44 137C 0004 0001             		move.b	#4,1(a1)
0000BF4A 3369 000C 0030             		move.w	$C(a1),$30(a1)
0000BF50 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000BF56 137C 0020 0019             		move.b	#$20,$19(a1)
0000BF5C 137C 0004 0018             		move.b	#4,$18(a1)
0000BF62 135A 001A                  		move.b	(a2)+,$1A(a1)
0000BF66 2348 003C                  		move.l	a0,$3C(a1)
0000BF6A 51C9 FFAA                  		dbf	d1,Obj30_Loop	; repeat once to load "reflection object"
0000BF6E                            
0000BF6E 137C 0010 0019             		move.b	#$10,$19(a1)
0000BF74 137C 0003 0018             		move.b	#3,$18(a1)
0000BF7A 5029 0028                  		addq.b	#8,$28(a1)
0000BF7E 0229 000F 0028             		andi.b	#$F,$28(a1)
0000BF84                            
0000BF84                            loc_B480:
0000BF84 317C 0090 0032             		move.w	#$90,$32(a0)
0000BF8A 08E8 0004 0001             		bset	#4,1(a0)
0000BF90                            
0000BF90                            Obj30_Block012:				; XREF: Obj30_Index
0000BF90 6100 0000                  		bsr.w	Obj30_Types
0000BF94 323C 002B                  		move.w	#$2B,d1
0000BF98 343C 0048                  		move.w	#$48,d2
0000BF9C 363C 0049                  		move.w	#$49,d3
0000BFA0 3828 0008                  		move.w	8(a0),d4
0000BFA4 6000 0000                  		bra.w	SolidObject
0000BFA8                            ; ===========================================================================
0000BFA8                            
0000BFA8                            Obj30_Reflect012:			; XREF: Obj30_Index
0000BFA8 2268 003C                  		movea.l	$3C(a0),a1
0000BFAC 3169 0032 0032             		move.w	$32(a1),$32(a0)
0000BFB2 6000 0000                  		bra.w	Obj30_Types
0000BFB6                            ; ===========================================================================
0000BFB6                            
0000BFB6                            Obj30_Block34:				; XREF: Obj30_Index
0000BFB6 6100 0000                  		bsr.w	Obj30_Types
0000BFBA 323C 002B                  		move.w	#$2B,d1
0000BFBE 343C 0038                  		move.w	#$38,d2
0000BFC2 363C 0039                  		move.w	#$39,d3
0000BFC6 3828 0008                  		move.w	8(a0),d4
0000BFCA 6000 0000                  		bra.w	SolidObject
0000BFCE                            ; ===========================================================================
0000BFCE                            
0000BFCE                            Obj30_Reflect34:			; XREF: Obj30_Index
0000BFCE 2268 003C                  		movea.l	$3C(a0),a1
0000BFD2 3169 0032 0032             		move.w	$32(a1),$32(a0)
0000BFD8 3169 000C 0030             		move.w	$C(a1),$30(a0)
0000BFDE 6000 0002                  		bra.w	*+4
0000BFE2                            
0000BFE2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000BFE2                            
0000BFE2                            
0000BFE2                            Obj30_Types:				; XREF: Obj30_Block012; et al
0000BFE2 7000                       		moveq	#0,d0
0000BFE4 1028 0028                  		move.b	$28(a0),d0
0000BFE8 0240 0007                  		andi.w	#7,d0
0000BFEC D040                       		add.w	d0,d0
0000BFEE 323B 0000                  		move.w	Obj30_TypeIndex(pc,d0.w),d1
0000BFF2 4EFB 1000                  		jmp	Obj30_TypeIndex(pc,d1.w)
0000BFF6                            ; End of function Obj30_Types
0000BFF6                            
0000BFF6                            ; ===========================================================================
0000BFF6 0000                       Obj30_TypeIndex:dc.w Obj30_Type00-Obj30_TypeIndex
0000BFF8 0000                       		dc.w Obj30_Type01-Obj30_TypeIndex
0000BFFA 0000                       		dc.w Obj30_Type02-Obj30_TypeIndex
0000BFFC 0000                       		dc.w Obj30_Type03-Obj30_TypeIndex
0000BFFE 0000                       		dc.w Obj30_Type04-Obj30_TypeIndex
0000C000                            ; ===========================================================================
0000C000                            
0000C000                            Obj30_Type00:				; XREF: Obj30_TypeIndex
0000C000 4E75                       		rts	
0000C002                            ; ===========================================================================
0000C002                            
0000C002                            Obj30_Type01:				; XREF: Obj30_TypeIndex
0000C002 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000C006 323C 0040                  		move.w	#$40,d1
0000C00A 6000                       		bra.s	loc_B514
0000C00C                            ; ===========================================================================
0000C00C                            
0000C00C                            Obj30_Type02:				; XREF: Obj30_TypeIndex
0000C00C 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000C010 323C 0040                  		move.w	#$40,d1
0000C014 4440                       		neg.w	d0
0000C016 D041                       		add.w	d1,d0
0000C018                            
0000C018                            loc_B514:				; XREF: Obj30_Type01
0000C018 0828 0003 0028             		btst	#3,$28(a0)
0000C01E 6700                       		beq.s	loc_B526
0000C020 4440                       		neg.w	d0
0000C022 D041                       		add.w	d1,d0
0000C024 E208                       		lsr.b	#1,d0
0000C026 0640 0020                  		addi.w	#$20,d0
0000C02A                            
0000C02A                            loc_B526:
0000C02A 6000 0000                  		bra.w	loc_B5EE
0000C02E                            ; ===========================================================================
0000C02E                            
0000C02E                            Obj30_Type03:				; XREF: Obj30_TypeIndex
0000C02E 0828 0003 0028             		btst	#3,$28(a0)
0000C034 6700                       		beq.s	loc_B53E
0000C036 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000C03A 0440 0010                  		subi.w	#$10,d0
0000C03E 6000 0000                  		bra.w	loc_B5EE
0000C042                            ; ===========================================================================
0000C042                            
0000C042                            loc_B53E:
0000C042 0828 0003 0022             		btst	#3,$22(a0)
0000C048 6600                       		bne.s	loc_B54E
0000C04A 08A8 0000 0034             		bclr	#0,$34(a0)
0000C050 6000                       		bra.s	loc_B582
0000C052                            ; ===========================================================================
0000C052                            
0000C052                            loc_B54E:
0000C052 4A28 0034                  		tst.b	$34(a0)
0000C056 6600                       		bne.s	loc_B582
0000C058 117C 0001 0034             		move.b	#1,$34(a0)
0000C05E 08E8 0000 0035             		bset	#0,$35(a0)
0000C064 6700                       		beq.s	loc_B582
0000C066 08E8 0007 0034             		bset	#7,$34(a0)
0000C06C 317C 0010 0036             		move.w	#$10,$36(a0)
0000C072 117C 000A 0038             		move.b	#$A,$38(a0)
0000C078 0C68 0040 0032             		cmpi.w	#$40,$32(a0)
0000C07E 6600                       		bne.s	loc_B582
0000C080 317C 0040 0036             		move.w	#$40,$36(a0)
0000C086                            
0000C086                            loc_B582:
0000C086 4A28 0034                  		tst.b	$34(a0)
0000C08A 6A00                       		bpl.s	loc_B5AA
0000C08C 4A28 0038                  		tst.b	$38(a0)
0000C090 6700                       		beq.s	loc_B594
0000C092 5328 0038                  		subq.b	#1,$38(a0)
0000C096 6600                       		bne.s	loc_B5AA
0000C098                            
0000C098                            loc_B594:
0000C098 4A68 0032                  		tst.w	$32(a0)
0000C09C 6700                       		beq.s	loc_B5A4
0000C09E 5368 0032                  		subq.w	#1,$32(a0)
0000C0A2 5368 0036                  		subq.w	#1,$36(a0)
0000C0A6 6600                       		bne.s	loc_B5AA
0000C0A8                            
0000C0A8                            loc_B5A4:
0000C0A8 08A8 0007 0034             		bclr	#7,$34(a0)
0000C0AE                            
0000C0AE                            loc_B5AA:
0000C0AE 3028 0032                  		move.w	$32(a0),d0
0000C0B2 6000                       		bra.s	loc_B5EE
0000C0B4                            ; ===========================================================================
0000C0B4                            
0000C0B4                            Obj30_Type04:				; XREF: Obj30_TypeIndex
0000C0B4 0828 0003 0028             		btst	#3,$28(a0)
0000C0BA 6700                       		beq.s	Obj30_ChkSwitch
0000C0BC 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000C0C0 0440 0010                  		subi.w	#$10,d0
0000C0C4 6000                       		bra.s	loc_B5EE
0000C0C6                            ; ===========================================================================
0000C0C6                            
0000C0C6                            Obj30_ChkSwitch:			; XREF: Obj30_Type04
0000C0C6 4A28 0034                  		tst.b	$34(a0)
0000C0CA 6600                       		bne.s	loc_B5E0
0000C0CC 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
0000C0D0 7000                       		moveq	#0,d0
0000C0D2 1028 0028                  		move.b	$28(a0),d0	; load object type number
0000C0D6 E848                       		lsr.w	#4,d0		; read only the	first nybble
0000C0D8 4A32 0000                  		tst.b	(a2,d0.w)	; has switch number d0 been pressed?
0000C0DC 6700                       		beq.s	loc_B5EA	; if not, branch
0000C0DE 117C 0001 0034             		move.b	#1,$34(a0)
0000C0E4                            
0000C0E4                            loc_B5E0:
0000C0E4 4A68 0032                  		tst.w	$32(a0)
0000C0E8 6700                       		beq.s	loc_B5EA
0000C0EA 5568 0032                  		subq.w	#2,$32(a0)
0000C0EE                            
0000C0EE                            loc_B5EA:
0000C0EE 3028 0032                  		move.w	$32(a0),d0
0000C0F2                            
0000C0F2                            loc_B5EE:
0000C0F2 3228 0030                  		move.w	$30(a0),d1
0000C0F6 9240                       		sub.w	d0,d1
0000C0F8 3141 000C                  		move.w	d1,$C(a0)
0000C0FC 4E75                       		rts	
0000C0FE                            ; ===========================================================================
0000C0FE                            ; ---------------------------------------------------------------------------
0000C0FE                            ; Sprite mappings - large green	glassy blocks (MZ)
0000C0FE                            ; ---------------------------------------------------------------------------
0000C0FE                            Map_obj30:
0000C0FE                            	include "_maps\obj30.asm"
0000C0FE                            ; ---------------------------------------------------------------------------
0000C0FE                            ; Sprite mappings - large green	glassy blocks (MZ)
0000C0FE                            ; ---------------------------------------------------------------------------
0000C0FE 0000                       		dc.w byte_B600-Map_obj30
0000C100 0000                       		dc.w byte_B63D-Map_obj30
0000C102 0000                       		dc.w byte_B648-Map_obj30
0000C104 0C                         byte_B600:	dc.b $C
0000C105 B80C 0000 E0               		dc.b $B8, $C, 0, 0, $E0
0000C10A B80C 0800 00               		dc.b $B8, $C, 8, 0, 0
0000C10F C00F 0004 E0               		dc.b $C0, $F, 0, 4, $E0
0000C114 C00F 0804 00               		dc.b $C0, $F, 8, 4, 0
0000C119 E00F 0004 E0               		dc.b $E0, $F, 0, 4, $E0
0000C11E E00F 0804 00               		dc.b $E0, $F, 8, 4, 0
0000C123 000F 0004 E0               		dc.b 0,	$F, 0, 4, $E0
0000C128 000F 0804 00               		dc.b 0,	$F, 8, 4, 0
0000C12D 200F 0004 E0               		dc.b $20, $F, 0, 4, $E0
0000C132 200F 0804 00               		dc.b $20, $F, 8, 4, 0
0000C137 400C 1000 E0               		dc.b $40, $C, $10, 0, $E0
0000C13C 400C 1800 00               		dc.b $40, $C, $18, 0, 0
0000C141 02                         byte_B63D:	dc.b 2
0000C142 0806 0014 F0               		dc.b 8,	6, 0, $14, $F0
0000C147 0006 0014 00               		dc.b 0,	6, 0, $14, 0
0000C14C 0A                         byte_B648:	dc.b $A
0000C14D C80C 0000 E0               		dc.b $C8, $C, 0, 0, $E0
0000C152 C80C 0800 00               		dc.b $C8, $C, 8, 0, 0
0000C157 D00F 0004 E0               		dc.b $D0, $F, 0, 4, $E0
0000C15C D00F 0804 00               		dc.b $D0, $F, 8, 4, 0
0000C161 F00F 0004 E0               		dc.b $F0, $F, 0, 4, $E0
0000C166 F00F 0804 00               		dc.b $F0, $F, 8, 4, 0
0000C16B 100F 0004 E0               		dc.b $10, $F, 0, 4, $E0
0000C170 100F 0804 00               		dc.b $10, $F, 8, 4, 0
0000C175 300C 1000 E0               		dc.b $30, $C, $10, 0, $E0
0000C17A 300C 1800 00               		dc.b $30, $C, $18, 0, 0
0000C180 00                         		even
0000C180 00                         		even
0000C180                            
0000C180                            ; ===========================================================================
0000C180                            ; ---------------------------------------------------------------------------
0000C180                            ; Object 31 - stomping metal blocks on chains (MZ)
0000C180                            ; ---------------------------------------------------------------------------
0000C180                            
0000C180                            Obj31:					; XREF: Obj_Index
0000C180 7000                       		moveq	#0,d0
0000C182 1028 0024                  		move.b	$24(a0),d0
0000C186 323B 0000                  		move.w	Obj31_Index(pc,d0.w),d1
0000C18A 4EFB 1000                  		jmp	Obj31_Index(pc,d1.w)
0000C18E                            ; ===========================================================================
0000C18E 0000                       Obj31_Index:	dc.w Obj31_Main-Obj31_Index
0000C190 0000                       		dc.w loc_B798-Obj31_Index
0000C192 0000                       		dc.w loc_B7FE-Obj31_Index
0000C194 0000                       		dc.w Obj31_Display2-Obj31_Index
0000C196 0000                       		dc.w loc_B7E2-Obj31_Index
0000C198                            
0000C198 0000                       Obj31_SwchNums:	dc.b 0,	0		; switch number, obj number
0000C19A 0100                       		dc.b 1,	0
0000C19C                            
0000C19C 0200 00                    Obj31_Var:	dc.b 2,	0, 0		; XREF: ROM:0000B6E0o
0000C19F 041C 01                    		dc.b 4,	$1C, 1		; routine number, y-position, frame number
0000C1A2 08CC 03                    		dc.b 8,	$CC, 3
0000C1A5 06F0 02                    		dc.b 6,	$F0, 2
0000C1A8                            
0000C1A8 7000 A000                  word_B6A4:	dc.w $7000, $A000
0000C1AC 5000 7800                  		dc.w $5000, $7800
0000C1B0 3800 5800                  		dc.w $3800, $5800
0000C1B4 B800                       		dc.w $B800
0000C1B6                            ; ===========================================================================
0000C1B6                            
0000C1B6                            Obj31_Main:				; XREF: Obj31_Index
0000C1B6 7000                       		moveq	#0,d0
0000C1B8 1028 0028                  		move.b	$28(a0),d0
0000C1BC 6A00                       		bpl.s	loc_B6CE
0000C1BE 0240 007F                  		andi.w	#$7F,d0
0000C1C2 D040                       		add.w	d0,d0
0000C1C4 45FB 00D2                  		lea	Obj31_SwchNums(pc,d0.w),a2
0000C1C8 115A 003A                  		move.b	(a2)+,$3A(a0)
0000C1CC 101A                       		move.b	(a2)+,d0
0000C1CE 1140 0028                  		move.b	d0,$28(a0)
0000C1D2                            
0000C1D2                            loc_B6CE:
0000C1D2 0200 000F                  		andi.b	#$F,d0
0000C1D6 D040                       		add.w	d0,d0
0000C1D8 343B 00CE                  		move.w	word_B6A4(pc,d0.w),d2
0000C1DC 4A40                       		tst.w	d0
0000C1DE 6600                       		bne.s	loc_B6E0
0000C1E0 3142 0032                  		move.w	d2,$32(a0)
0000C1E4                            
0000C1E4                            loc_B6E0:
0000C1E4 45F9 0000 C19C             		lea	(Obj31_Var).l,a2
0000C1EA 2248                       		movea.l	a0,a1
0000C1EC 7203                       		moveq	#3,d1
0000C1EE 6000                       		bra.s	Obj31_MakeStomper
0000C1F0                            ; ===========================================================================
0000C1F0                            
0000C1F0                            Obj31_Loop:
0000C1F0 6100 0000                  		bsr.w	SingleObjLoad2
0000C1F4 6600 0000                  		bne.w	Obj31_SetSize
0000C1F8                            
0000C1F8                            Obj31_MakeStomper:			; XREF: Obj31_Main
0000C1F8 135A 0024                  		move.b	(a2)+,$24(a1)
0000C1FC 12BC 0031                  		move.b	#$31,0(a1)
0000C200 3368 0008 0008             		move.w	8(a0),8(a1)
0000C206 101A                       		move.b	(a2)+,d0
0000C208 4880                       		ext.w	d0
0000C20A D068 000C                  		add.w	$C(a0),d0
0000C20E 3340 000C                  		move.w	d0,$C(a1)
0000C212 237C 0000 0000 0004        		move.l	#Map_obj31,4(a1)
0000C21A 337C 0300 0002             		move.w	#$300,2(a1)
0000C220 137C 0004 0001             		move.b	#4,1(a1)
0000C226 3369 000C 0030             		move.w	$C(a1),$30(a1)
0000C22C 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000C232 137C 0010 0019             		move.b	#$10,$19(a1)
0000C238 3342 0034                  		move.w	d2,$34(a1)
0000C23C 137C 0004 0018             		move.b	#4,$18(a1)
0000C242 135A 001A                  		move.b	(a2)+,$1A(a1)
0000C246 0C29 0001 001A             		cmpi.b	#1,$1A(a1)
0000C24C 6600                       		bne.s	loc_B76A
0000C24E 5341                       		subq.w	#1,d1
0000C250 1028 0028                  		move.b	$28(a0),d0
0000C254 0240 00F0                  		andi.w	#$F0,d0
0000C258 0C40 0020                  		cmpi.w	#$20,d0
0000C25C 679A                       		beq.s	Obj31_MakeStomper
0000C25E 137C 0038 0019             		move.b	#$38,$19(a1)
0000C264 137C 0090 0020             		move.b	#$90,$20(a1)
0000C26A 5241                       		addq.w	#1,d1
0000C26C                            
0000C26C                            loc_B76A:
0000C26C 2348 003C                  		move.l	a0,$3C(a1)
0000C270 51C9 FF7E                  		dbf	d1,Obj31_Loop
0000C274                            
0000C274 137C 0003 0018             		move.b	#3,$18(a1)
0000C27A                            
0000C27A                            Obj31_SetSize:
0000C27A 7000                       		moveq	#0,d0
0000C27C 1028 0028                  		move.b	$28(a0),d0
0000C280 E648                       		lsr.w	#3,d0
0000C282 0200 000E                  		andi.b	#$E,d0
0000C286 45FB 0000                  		lea	Obj31_Var2(pc,d0.w),a2
0000C28A 115A 0019                  		move.b	(a2)+,$19(a0)
0000C28E 115A 001A                  		move.b	(a2)+,$1A(a0)
0000C292 6000                       		bra.s	loc_B798
0000C294                            ; ===========================================================================
0000C294 3800                       Obj31_Var2:	dc.b $38, 0		; width, frame number
0000C296 3009                       		dc.b $30, 9
0000C298 100A                       		dc.b $10, $A
0000C29A                            ; ===========================================================================
0000C29A                            
0000C29A                            loc_B798:				; XREF: Obj31_Index
0000C29A 6100 0000                  		bsr.w	Obj31_Types
0000C29E 31E8 000C F7A4             		move.w	$C(a0),($FFFFF7A4).w
0000C2A4 7200                       		moveq	#0,d1
0000C2A6 1228 0019                  		move.b	$19(a0),d1
0000C2AA 0641 000B                  		addi.w	#$B,d1
0000C2AE 343C 000C                  		move.w	#$C,d2
0000C2B2 363C 000D                  		move.w	#$D,d3
0000C2B6 3828 0008                  		move.w	8(a0),d4
0000C2BA 6100 0000                  		bsr.w	SolidObject
0000C2BE 0828 0003 0022             		btst	#3,$22(a0)
0000C2C4 6700                       		beq.s	Obj31_Display
0000C2C6 0C28 0010 0032             		cmpi.b	#$10,$32(a0)
0000C2CC 6400                       		bcc.s	Obj31_Display
0000C2CE 2448                       		movea.l	a0,a2
0000C2D0 41F8 D000                  		lea	($FFFFD000).w,a0
0000C2D4 4EB9 0000 0000             		jsr	KillSonic
0000C2DA 204A                       		movea.l	a2,a0
0000C2DC                            
0000C2DC                            Obj31_Display:
0000C2DC 6100 0000                  		bsr.w	DisplaySprite
0000C2E0 6000 0000                  		bra.w	Obj31_ChkDel
0000C2E4                            ; ===========================================================================
0000C2E4                            
0000C2E4                            loc_B7E2:				; XREF: Obj31_Index
0000C2E4 117C 0080 0016             		move.b	#$80,$16(a0)
0000C2EA 08E8 0004 0001             		bset	#4,1(a0)
0000C2F0 2268 003C                  		movea.l	$3C(a0),a1
0000C2F4 1029 0032                  		move.b	$32(a1),d0
0000C2F8 EA08                       		lsr.b	#5,d0
0000C2FA 5600                       		addq.b	#3,d0
0000C2FC 1140 001A                  		move.b	d0,$1A(a0)
0000C300                            
0000C300                            loc_B7FE:				; XREF: Obj31_Index
0000C300 2268 003C                  		movea.l	$3C(a0),a1
0000C304 7000                       		moveq	#0,d0
0000C306 1029 0032                  		move.b	$32(a1),d0
0000C30A D068 0030                  		add.w	$30(a0),d0
0000C30E 3140 000C                  		move.w	d0,$C(a0)
0000C312                            
0000C312                            Obj31_Display2:				; XREF: Obj31_Index
0000C312 6100 0000                  		bsr.w	DisplaySprite
0000C316                            
0000C316                            Obj31_ChkDel:				; XREF: Obj31_Display
0000C316 3028 0008                  		move.w	8(a0),d0
0000C31A 0240 FF80                  		andi.w	#$FF80,d0
0000C31E 3238 F700                  		move.w	($FFFFF700).w,d1
0000C322 0441 0080                  		subi.w	#$80,d1
0000C326 0241 FF80                  		andi.w	#$FF80,d1
0000C32A 9041                       		sub.w	d1,d0
0000C32C 0C40 0280                  		cmpi.w	#$280,d0
0000C330 6200 0000                  		bhi.w	DeleteObject
0000C334 4E75                       		rts	
0000C336                            ; ===========================================================================
0000C336                            
0000C336                            Obj31_Types:				; XREF: loc_B798
0000C336 1028 0028                  		move.b	$28(a0),d0
0000C33A 0240 000F                  		andi.w	#$F,d0
0000C33E D040                       		add.w	d0,d0
0000C340 323B 0000                  		move.w	Obj31_TypeIndex(pc,d0.w),d1
0000C344 4EFB 1000                  		jmp	Obj31_TypeIndex(pc,d1.w)
0000C348                            ; ===========================================================================
0000C348 0000                       Obj31_TypeIndex:dc.w Obj31_Type00-Obj31_TypeIndex
0000C34A 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000C34C 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000C34E 0000                       		dc.w Obj31_Type03-Obj31_TypeIndex
0000C350 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000C352 0000                       		dc.w Obj31_Type03-Obj31_TypeIndex
0000C354 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000C356                            ; ===========================================================================
0000C356                            
0000C356                            Obj31_Type00:				; XREF: Obj31_TypeIndex
0000C356 45F8 F7E0                  		lea	($FFFFF7E0).w,a2 ; load	switch statuses
0000C35A 7000                       		moveq	#0,d0
0000C35C 1028 003A                  		move.b	$3A(a0),d0	; move number 0	or 1 to	d0
0000C360 4A32 0000                  		tst.b	(a2,d0.w)	; has switch (d0) been pressed?
0000C364 6700                       		beq.s	loc_B8A8	; if not, branch
0000C366 4A78 F7A4                  		tst.w	($FFFFF7A4).w
0000C36A 6A00                       		bpl.s	loc_B872
0000C36C 0C28 0010 0032             		cmpi.b	#$10,$32(a0)
0000C372 6700                       		beq.s	loc_B8A0
0000C374                            
0000C374                            loc_B872:
0000C374 4A68 0032                  		tst.w	$32(a0)
0000C378 6700                       		beq.s	loc_B8A0
0000C37A 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000C37E 0200 000F                  		andi.b	#$F,d0
0000C382 6600                       		bne.s	loc_B892
0000C384 4A28 0001                  		tst.b	1(a0)
0000C388 6A00                       		bpl.s	loc_B892
0000C38A 303C 00C7                  		move.w	#$C7,d0
0000C38E 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play rising chain sound
0000C394                            
0000C394                            loc_B892:
0000C394 0468 0080 0032             		subi.w	#$80,$32(a0)
0000C39A 6400                       		bcc.s	Obj31_Restart
0000C39C 317C 0000 0032             		move.w	#0,$32(a0)
0000C3A2                            
0000C3A2                            loc_B8A0:
0000C3A2 317C 0000 0012             		move.w	#0,$12(a0)
0000C3A8 6000                       		bra.s	Obj31_Restart
0000C3AA                            ; ===========================================================================
0000C3AA                            
0000C3AA                            loc_B8A8:				; XREF: Obj31_Type00
0000C3AA 3228 0034                  		move.w	$34(a0),d1
0000C3AE B268 0032                  		cmp.w	$32(a0),d1
0000C3B2 6700                       		beq.s	Obj31_Restart
0000C3B4 3028 0012                  		move.w	$12(a0),d0
0000C3B8 0668 0070 0012             		addi.w	#$70,$12(a0)	; make object fall
0000C3BE D168 0032                  		add.w	d0,$32(a0)
0000C3C2 B268 0032                  		cmp.w	$32(a0),d1
0000C3C6 6200                       		bhi.s	Obj31_Restart
0000C3C8 3141 0032                  		move.w	d1,$32(a0)
0000C3CC 317C 0000 0012             		move.w	#0,$12(a0)	; stop object falling
0000C3D2 4A28 0001                  		tst.b	1(a0)
0000C3D6 6A00                       		bpl.s	Obj31_Restart
0000C3D8 303C 00BD                  		move.w	#$BD,d0
0000C3DC 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play stomping sound
0000C3E2                            
0000C3E2                            Obj31_Restart:
0000C3E2 7000                       		moveq	#0,d0
0000C3E4 1028 0032                  		move.b	$32(a0),d0
0000C3E8 D068 0030                  		add.w	$30(a0),d0
0000C3EC 3140 000C                  		move.w	d0,$C(a0)
0000C3F0 4E75                       		rts	
0000C3F2                            ; ===========================================================================
0000C3F2                            
0000C3F2                            Obj31_Type01:				; XREF: Obj31_TypeIndex
0000C3F2 4A68 0036                  		tst.w	$36(a0)
0000C3F6 6700                       		beq.s	loc_B938
0000C3F8 4A68 0038                  		tst.w	$38(a0)
0000C3FC 6700                       		beq.s	loc_B902
0000C3FE 5368 0038                  		subq.w	#1,$38(a0)
0000C402 6000                       		bra.s	loc_B97C
0000C404                            ; ===========================================================================
0000C404                            
0000C404                            loc_B902:
0000C404 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000C408 0200 000F                  		andi.b	#$F,d0
0000C40C 6600                       		bne.s	loc_B91C
0000C40E 4A28 0001                  		tst.b	1(a0)
0000C412 6A00                       		bpl.s	loc_B91C
0000C414 303C 00C7                  		move.w	#$C7,d0
0000C418 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play rising chain sound
0000C41E                            
0000C41E                            loc_B91C:
0000C41E 0468 0080 0032             		subi.w	#$80,$32(a0)
0000C424 6400                       		bcc.s	loc_B97C
0000C426 317C 0000 0032             		move.w	#0,$32(a0)
0000C42C 317C 0000 0012             		move.w	#0,$12(a0)
0000C432 317C 0000 0036             		move.w	#0,$36(a0)
0000C438 6000                       		bra.s	loc_B97C
0000C43A                            ; ===========================================================================
0000C43A                            
0000C43A                            loc_B938:				; XREF: Obj31_Type01
0000C43A 3228 0034                  		move.w	$34(a0),d1
0000C43E B268 0032                  		cmp.w	$32(a0),d1
0000C442 6700                       		beq.s	loc_B97C
0000C444 3028 0012                  		move.w	$12(a0),d0
0000C448 0668 0070 0012             		addi.w	#$70,$12(a0)	; make object fall
0000C44E D168 0032                  		add.w	d0,$32(a0)
0000C452 B268 0032                  		cmp.w	$32(a0),d1
0000C456 6200                       		bhi.s	loc_B97C
0000C458 3141 0032                  		move.w	d1,$32(a0)
0000C45C 317C 0000 0012             		move.w	#0,$12(a0)	; stop object falling
0000C462 317C 0001 0036             		move.w	#1,$36(a0)
0000C468 317C 003C 0038             		move.w	#$3C,$38(a0)
0000C46E 4A28 0001                  		tst.b	1(a0)
0000C472 6A00                       		bpl.s	loc_B97C
0000C474 303C 00BD                  		move.w	#$BD,d0
0000C478 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play stomping sound
0000C47E                            
0000C47E                            loc_B97C:
0000C47E 6000 FF62                  		bra.w	Obj31_Restart
0000C482                            ; ===========================================================================
0000C482                            
0000C482                            Obj31_Type03:				; XREF: Obj31_TypeIndex
0000C482 3038 D008                  		move.w	($FFFFD008).w,d0
0000C486 9068 0008                  		sub.w	8(a0),d0
0000C48A 6400                       		bcc.s	loc_B98C
0000C48C 4440                       		neg.w	d0
0000C48E                            
0000C48E                            loc_B98C:
0000C48E 0C40 0090                  		cmpi.w	#$90,d0
0000C492 6400                       		bcc.s	loc_B996
0000C494 5228 0028                  		addq.b	#1,$28(a0)
0000C498                            
0000C498                            loc_B996:
0000C498 6000 FF48                  		bra.w	Obj31_Restart
0000C49C                            ; ===========================================================================
0000C49C                            ; ---------------------------------------------------------------------------
0000C49C                            ; Object 45 - spiked metal block from beta version (MZ)
0000C49C                            ; ---------------------------------------------------------------------------
0000C49C                            
0000C49C                            Obj45:					; XREF: Obj_Index
0000C49C 7000                       		moveq	#0,d0
0000C49E 1028 0024                  		move.b	$24(a0),d0
0000C4A2 323B 0000                  		move.w	Obj45_Index(pc,d0.w),d1
0000C4A6 4EFB 1000                  		jmp	Obj45_Index(pc,d1.w)
0000C4AA                            ; ===========================================================================
0000C4AA 0000                       Obj45_Index:	dc.w Obj45_Main-Obj45_Index
0000C4AC 0000                       		dc.w Obj45_Solid-Obj45_Index
0000C4AE 0000                       		dc.w loc_BA8E-Obj45_Index
0000C4B0 0000                       		dc.w Obj45_Display-Obj45_Index
0000C4B2 0000                       		dc.w loc_BA7A-Obj45_Index
0000C4B4                            
0000C4B4 0204 00                    Obj45_Var:	dc.b	2,   4,	  0	; routine number, x-position, frame number
0000C4B7 04E4 01                    		dc.b	4, $E4,	  1
0000C4BA 0834 03                    		dc.b	8, $34,	  3
0000C4BD 0628 02                    		dc.b	6, $28,	  2
0000C4C0                            
0000C4C0 3800                       word_B9BE:	dc.w $3800
0000C4C2 A000                       		dc.w -$6000
0000C4C4 5000                       		dc.w $5000
0000C4C6                            ; ===========================================================================
0000C4C6                            
0000C4C6                            Obj45_Main:				; XREF: Obj45_Index
0000C4C6 7000                       		moveq	#0,d0
0000C4C8 1028 0028                  		move.b	$28(a0),d0
0000C4CC D040                       		add.w	d0,d0
0000C4CE 343B 00F0                  		move.w	word_B9BE(pc,d0.w),d2
0000C4D2 45F9 0000 C4B4             		lea	(Obj45_Var).l,a2
0000C4D8 2248                       		movea.l	a0,a1
0000C4DA 7203                       		moveq	#3,d1
0000C4DC 6000                       		bra.s	Obj45_Load
0000C4DE                            ; ===========================================================================
0000C4DE                            
0000C4DE                            Obj45_Loop:
0000C4DE 6100 0000                  		bsr.w	SingleObjLoad2
0000C4E2 6600                       		bne.s	loc_BA52
0000C4E4                            
0000C4E4                            Obj45_Load:				; XREF: Obj45_Main
0000C4E4 135A 0024                  		move.b	(a2)+,$24(a1)
0000C4E8 12BC 0045                  		move.b	#$45,0(a1)
0000C4EC 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000C4F2 101A                       		move.b	(a2)+,d0
0000C4F4 4880                       		ext.w	d0
0000C4F6 D068 0008                  		add.w	8(a0),d0
0000C4FA 3340 0008                  		move.w	d0,8(a1)
0000C4FE 237C 0000 0000 0004        		move.l	#Map_obj45,4(a1)
0000C506 337C 0300 0002             		move.w	#$300,2(a1)
0000C50C 137C 0004 0001             		move.b	#4,1(a1)
0000C512 3369 0008 0030             		move.w	8(a1),$30(a1)
0000C518 3368 0008 003A             		move.w	8(a0),$3A(a1)
0000C51E 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000C524 137C 0020 0019             		move.b	#$20,$19(a1)
0000C52A 3342 0034                  		move.w	d2,$34(a1)
0000C52E 137C 0004 0018             		move.b	#4,$18(a1)
0000C534 0C12 0001                  		cmpi.b	#1,(a2)
0000C538 6600                       		bne.s	loc_BA40
0000C53A 137C 0091 0020             		move.b	#$91,$20(a1)
0000C540                            
0000C540                            loc_BA40:
0000C540 135A 001A                  		move.b	(a2)+,$1A(a1)
0000C544 2348 003C                  		move.l	a0,$3C(a1)
0000C548 51C9 FF94                  		dbf	d1,Obj45_Loop	; repeat 3 times
0000C54C                            
0000C54C 137C 0003 0018             		move.b	#3,$18(a1)
0000C552                            
0000C552                            loc_BA52:
0000C552 117C 0010 0019             		move.b	#$10,$19(a0)
0000C558                            
0000C558                            Obj45_Solid:				; XREF: Obj45_Index
0000C558 3F28 0008                  		move.w	8(a0),-(sp)
0000C55C 6100 0000                  		bsr.w	Obj45_Move
0000C560 323C 0017                  		move.w	#$17,d1
0000C564 343C 0020                  		move.w	#$20,d2
0000C568 363C 0020                  		move.w	#$20,d3
0000C56C 381F                       		move.w	(sp)+,d4
0000C56E 6100 0000                  		bsr.w	SolidObject
0000C572 6100 0000                  		bsr.w	DisplaySprite
0000C576 6000 0000                  		bra.w	Obj45_ChkDel
0000C57A                            ; ===========================================================================
0000C57A                            
0000C57A                            loc_BA7A:				; XREF: Obj45_Index
0000C57A 2268 003C                  		movea.l	$3C(a0),a1
0000C57E 1029 0032                  		move.b	$32(a1),d0
0000C582 0600 0010                  		addi.b	#$10,d0
0000C586 EA08                       		lsr.b	#5,d0
0000C588 5600                       		addq.b	#3,d0
0000C58A 1140 001A                  		move.b	d0,$1A(a0)
0000C58E                            
0000C58E                            loc_BA8E:				; XREF: Obj45_Index
0000C58E 2268 003C                  		movea.l	$3C(a0),a1
0000C592 7000                       		moveq	#0,d0
0000C594 1029 0032                  		move.b	$32(a1),d0
0000C598 4440                       		neg.w	d0
0000C59A D068 0030                  		add.w	$30(a0),d0
0000C59E 3140 0008                  		move.w	d0,8(a0)
0000C5A2                            
0000C5A2                            Obj45_Display:				; XREF: Obj45_Index
0000C5A2 6100 0000                  		bsr.w	DisplaySprite
0000C5A6                            
0000C5A6                            Obj45_ChkDel:				; XREF: Obj45_Solid
0000C5A6 3028 003A                  		move.w	$3A(a0),d0
0000C5AA 0240 FF80                  		andi.w	#$FF80,d0
0000C5AE 3238 F700                  		move.w	($FFFFF700).w,d1
0000C5B2 0441 0080                  		subi.w	#$80,d1
0000C5B6 0241 FF80                  		andi.w	#$FF80,d1
0000C5BA 9041                       		sub.w	d1,d0
0000C5BC 0C40 0280                  		cmpi.w	#$280,d0
0000C5C0 6200 0000                  		bhi.w	DeleteObject
0000C5C4 4E75                       		rts	
0000C5C6                            
0000C5C6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000C5C6                            
0000C5C6                            
0000C5C6                            Obj45_Move:				; XREF: Obj45_Solid
0000C5C6 7000                       		moveq	#0,d0
0000C5C8 1028 0028                  		move.b	$28(a0),d0
0000C5CC D040                       		add.w	d0,d0
0000C5CE 323B 0000                  		move.w	off_BAD6(pc,d0.w),d1
0000C5D2 4EFB 1000                  		jmp	off_BAD6(pc,d1.w)
0000C5D6                            ; End of function Obj45_Move
0000C5D6                            
0000C5D6                            ; ===========================================================================
0000C5D6 0000                       off_BAD6:	dc.w loc_BADA-off_BAD6
0000C5D8 0000                       		dc.w loc_BADA-off_BAD6
0000C5DA                            ; ===========================================================================
0000C5DA                            
0000C5DA                            loc_BADA:				; XREF: off_BAD6
0000C5DA 4A68 0036                  		tst.w	$36(a0)
0000C5DE 6700                       		beq.s	loc_BB08
0000C5E0 4A68 0038                  		tst.w	$38(a0)
0000C5E4 6700                       		beq.s	loc_BAEC
0000C5E6 5368 0038                  		subq.w	#1,$38(a0)
0000C5EA 6000                       		bra.s	loc_BB3C
0000C5EC                            ; ===========================================================================
0000C5EC                            
0000C5EC                            loc_BAEC:
0000C5EC 0468 0080 0032             		subi.w	#$80,$32(a0)
0000C5F2 6400                       		bcc.s	loc_BB3C
0000C5F4 317C 0000 0032             		move.w	#0,$32(a0)
0000C5FA 317C 0000 0010             		move.w	#0,$10(a0)
0000C600 317C 0000 0036             		move.w	#0,$36(a0)
0000C606 6000                       		bra.s	loc_BB3C
0000C608                            ; ===========================================================================
0000C608                            
0000C608                            loc_BB08:				; XREF: loc_BADA
0000C608 3228 0034                  		move.w	$34(a0),d1
0000C60C B268 0032                  		cmp.w	$32(a0),d1
0000C610 6700                       		beq.s	loc_BB3C
0000C612 3028 0010                  		move.w	$10(a0),d0
0000C616 0668 0070 0010             		addi.w	#$70,$10(a0)
0000C61C D168 0032                  		add.w	d0,$32(a0)
0000C620 B268 0032                  		cmp.w	$32(a0),d1
0000C624 6200                       		bhi.s	loc_BB3C
0000C626 3141 0032                  		move.w	d1,$32(a0)
0000C62A 317C 0000 0010             		move.w	#0,$10(a0)
0000C630 317C 0001 0036             		move.w	#1,$36(a0)
0000C636 317C 003C 0038             		move.w	#$3C,$38(a0)
0000C63C                            
0000C63C                            loc_BB3C:
0000C63C 7000                       		moveq	#0,d0
0000C63E 1028 0032                  		move.b	$32(a0),d0
0000C642 4440                       		neg.w	d0
0000C644 D068 0030                  		add.w	$30(a0),d0
0000C648 3140 0008                  		move.w	d0,8(a0)
0000C64C 4E75                       		rts	
0000C64E                            ; ===========================================================================
0000C64E                            ; ---------------------------------------------------------------------------
0000C64E                            ; Sprite mappings - metal stomping blocks on chains (MZ)
0000C64E                            ; ---------------------------------------------------------------------------
0000C64E                            Map_obj31:
0000C64E                            	include "_maps\obj31.asm"
0000C64E                            ; ---------------------------------------------------------------------------
0000C64E                            ; Sprite mappings - metal stomping blocks on chains (MZ)
0000C64E                            ; ---------------------------------------------------------------------------
0000C64E 0000                       		dc.w byte_BB64-Map_obj31
0000C650 0000                       		dc.w byte_BB7E-Map_obj31
0000C652 0000                       		dc.w byte_BB98-Map_obj31
0000C654 0000                       		dc.w byte_BB9E-Map_obj31
0000C656 0000                       		dc.w byte_BBA9-Map_obj31
0000C658 0000                       		dc.w byte_BBBE-Map_obj31
0000C65A 0000                       		dc.w byte_BBDD-Map_obj31
0000C65C 0000                       		dc.w byte_BC06-Map_obj31
0000C65E 0000                       		dc.w byte_BC06-Map_obj31
0000C660 0000                       		dc.w byte_BC39-Map_obj31
0000C662 0000                       		dc.w byte_BC53-Map_obj31
0000C664 05                         byte_BB64:	dc.b 5
0000C665 F406 0000 C8               		dc.b $F4, 6, 0,	0, $C8
0000C66A F40A 0006 D8               		dc.b $F4, $A, 0, 6, $D8
0000C66F EC0F 000F F0               		dc.b $EC, $F, 0, $F, $F0
0000C674 F40A 0806 10               		dc.b $F4, $A, 8, 6, $10
0000C679 F406 0800 28               		dc.b $F4, 6, 8,	0, $28
0000C67E 05                         byte_BB7E:	dc.b 5
0000C67F F003 121F D4               		dc.b $F0, 3, $12, $1F, $D4
0000C684 F003 121F E8               		dc.b $F0, 3, $12, $1F, $E8
0000C689 F003 121F FC               		dc.b $F0, 3, $12, $1F, $FC
0000C68E F003 121F 10               		dc.b $F0, 3, $12, $1F, $10
0000C693 F003 121F 24               		dc.b $F0, 3, $12, $1F, $24
0000C698 01                         byte_BB98:	dc.b 1
0000C699 DC0F 100F F0               		dc.b $DC, $F, $10, $F, $F0
0000C69E 02                         byte_BB9E:	dc.b 2
0000C69F 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C6A4 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C6A9 04                         byte_BBA9:	dc.b 4
0000C6AA E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000C6AF F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000C6B4 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C6B9 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C6BE 06                         byte_BBBE:	dc.b 6
0000C6BF C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000C6C4 D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000C6C9 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000C6CE F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000C6D3 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C6D8 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C6DD 08                         byte_BBDD:	dc.b 8
0000C6DE A001 003F FC               		dc.b $A0, 1, 0,	$3F, $FC
0000C6E3 B001 003F FC               		dc.b $B0, 1, 0,	$3F, $FC
0000C6E8 C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000C6ED D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000C6F2 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000C6F7 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000C6FC 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C701 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C706 0A                         byte_BC06:	dc.b $A
0000C707 8001 003F FC               		dc.b $80, 1, 0,	$3F, $FC
0000C70C 9001 003F FC               		dc.b $90, 1, 0,	$3F, $FC
0000C711 A001 003F FC               		dc.b $A0, 1, 0,	$3F, $FC
0000C716 B001 003F FC               		dc.b $B0, 1, 0,	$3F, $FC
0000C71B C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000C720 D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000C725 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000C72A F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000C72F 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C734 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C739 05                         byte_BC39:	dc.b 5
0000C73A F406 0000 D0               		dc.b $F4, 6, 0,	0, $D0
0000C73F F40A 0006 E0               		dc.b $F4, $A, 0, 6, $E0
0000C744 F40A 0806 08               		dc.b $F4, $A, 8, 6, 8
0000C749 F406 0800 20               		dc.b $F4, 6, 8,	0, $20
0000C74E EC0F 000F F0               		dc.b $EC, $F, 0, $F, $F0
0000C753 01                         byte_BC53:	dc.b 1
0000C754 EC0F 002F F0               		dc.b $EC, $F, 0, $2F, $F0
0000C75A 00                         		even
0000C75A 00                         		even
0000C75A                            
0000C75A                            ; ---------------------------------------------------------------------------
0000C75A                            ; Sprite mappings - spiked metal block from beta version (MZ)
0000C75A                            ; ---------------------------------------------------------------------------
0000C75A                            Map_obj45:
0000C75A                            	include "_maps\obj45.asm"
0000C75A                            ; ---------------------------------------------------------------------------
0000C75A                            ; Sprite mappings - spiked metal block from beta version (MZ)
0000C75A                            ; ---------------------------------------------------------------------------
0000C75A 0000                       		dc.w byte_BC6C-Map_obj45
0000C75C 0000                       		dc.w byte_BC7C-Map_obj45
0000C75E 0000                       		dc.w byte_BC8C-Map_obj45
0000C760 0000                       		dc.w byte_BC92-Map_obj45
0000C762 0000                       		dc.w byte_BC9D-Map_obj45
0000C764 0000                       		dc.w byte_BCB2-Map_obj45
0000C766 0000                       		dc.w byte_BCD1-Map_obj45
0000C768 0000                       		dc.w byte_BCFA-Map_obj45
0000C76A 0000                       		dc.w byte_BCFA-Map_obj45
0000C76C 03                         byte_BC6C:	dc.b 3
0000C76D E00B 001F F4               		dc.b $E0, $B, 0, $1F, $F4
0000C772 000B 101F F4               		dc.b 0,	$B, $10, $1F, $F4
0000C777 F003 002B 0C               		dc.b $F0, 3, 0,	$2B, $C
0000C77C 03                         byte_BC7C:	dc.b 3
0000C77D E80C 121B F0               		dc.b $E8, $C, $12, $1B,	$F0
0000C782 FC0C 121B F0               		dc.b $FC, $C, $12, $1B,	$F0
0000C787 100C 121B F0               		dc.b $10, $C, $12, $1B,	$F0
0000C78C 01                         byte_BC8C:	dc.b 1
0000C78D F003 082B FC               		dc.b $F0, 3, 8,	$2B, $FC
0000C792 02                         byte_BC92:	dc.b 2
0000C793 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C798 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C79D 04                         byte_BC9D:	dc.b 4
0000C79E F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C7A3 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C7A8 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000C7AD F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000C7B2 06                         byte_BCB2:	dc.b 6
0000C7B3 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C7B8 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C7BD F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000C7C2 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000C7C7 F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000C7CC F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000C7D1 08                         byte_BCD1:	dc.b 8
0000C7D2 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C7D7 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C7DC F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000C7E1 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000C7E6 F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000C7EB F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000C7F0 F805 0041 40               		dc.b $F8, 5, 0,	$41, $40
0000C7F5 F805 0041 50               		dc.b $F8, 5, 0,	$41, $50
0000C7FA 08                         byte_BCFA:	dc.b 8
0000C7FB F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C800 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C805 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000C80A F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000C80F F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000C814 F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000C819 F805 0041 40               		dc.b $F8, 5, 0,	$41, $40
0000C81E F805 0041 50               		dc.b $F8, 5, 0,	$41, $50
0000C823 F805 0041 60               		dc.b $F8, 5, 0,	$41, $60
0000C828 F805 0041 70               		dc.b $F8, 5, 0,	$41, $70
0000C82E 00                         		even
0000C82E 00                         		even
0000C82E                            
0000C82E                            ; ===========================================================================
0000C82E                            ; ---------------------------------------------------------------------------
0000C82E                            ; Object 32 - switches (MZ, SYZ, LZ, SBZ)
0000C82E                            ; ---------------------------------------------------------------------------
0000C82E                            
0000C82E                            Obj32:					; XREF: Obj_Index
0000C82E 7000                       		moveq	#0,d0
0000C830 1028 0024                  		move.b	$24(a0),d0
0000C834 323B 0000                  		move.w	Obj32_Index(pc,d0.w),d1
0000C838 4EFB 1000                  		jmp	Obj32_Index(pc,d1.w)
0000C83C                            ; ===========================================================================
0000C83C 0000                       Obj32_Index:	dc.w Obj32_Main-Obj32_Index
0000C83E 0000                       		dc.w Obj32_Pressed-Obj32_Index
0000C840                            ; ===========================================================================
0000C840                            
0000C840                            Obj32_Main:				; XREF: Obj32_Index
0000C840 5428 0024                  		addq.b	#2,$24(a0)
0000C844 217C 0000 0000 0004        		move.l	#Map_obj32,4(a0)
0000C84C 317C 4513 0002             		move.w	#$4513,2(a0)	; MZ specific code
0000C852 0C38 0002 FE10             		cmpi.b	#2,($FFFFFE10).w
0000C858 6700                       		beq.s	loc_BD60
0000C85A 317C 0513 0002             		move.w	#$513,2(a0)	; SYZ, LZ and SBZ specific code
0000C860                            
0000C860                            loc_BD60:
0000C860 117C 0004 0001             		move.b	#4,1(a0)
0000C866 117C 0010 0019             		move.b	#$10,$19(a0)
0000C86C 117C 0004 0018             		move.b	#4,$18(a0)
0000C872 5668 000C                  		addq.w	#3,$C(a0)
0000C876                            
0000C876                            Obj32_Pressed:				; XREF: Obj32_Index
0000C876 4A28 0001                  		tst.b	1(a0)
0000C87A 6A00                       		bpl.s	Obj32_Display
0000C87C 323C 001B                  		move.w	#$1B,d1
0000C880 343C 0005                  		move.w	#5,d2
0000C884 363C 0005                  		move.w	#5,d3
0000C888 3828 0008                  		move.w	8(a0),d4
0000C88C 6100 0000                  		bsr.w	SolidObject
0000C890 08A8 0000 001A             		bclr	#0,$1A(a0)	; use "unpressed" frame
0000C896 1028 0028                  		move.b	$28(a0),d0
0000C89A 0240 000F                  		andi.w	#$F,d0
0000C89E 47F8 F7E0                  		lea	($FFFFF7E0).w,a3
0000C8A2 47F3 0000                  		lea	(a3,d0.w),a3
0000C8A6 7600                       		moveq	#0,d3
0000C8A8 0828 0006 0028             		btst	#6,$28(a0)
0000C8AE 6700                       		beq.s	loc_BDB2
0000C8B0 7607                       		moveq	#7,d3
0000C8B2                            
0000C8B2                            loc_BDB2:
0000C8B2 4A28 0028                  		tst.b	$28(a0)
0000C8B6 6A00                       		bpl.s	loc_BDBE
0000C8B8 6100 0000                  		bsr.w	Obj32_MZBlock
0000C8BC 6600                       		bne.s	loc_BDC8
0000C8BE                            
0000C8BE                            loc_BDBE:
0000C8BE 4A28 0025                  		tst.b	$25(a0)
0000C8C2 6600                       		bne.s	loc_BDC8
0000C8C4 0793                       		bclr	d3,(a3)
0000C8C6 6000                       		bra.s	loc_BDDE
0000C8C8                            ; ===========================================================================
0000C8C8                            
0000C8C8                            loc_BDC8:
0000C8C8 4A13                       		tst.b	(a3)
0000C8CA 6600                       		bne.s	loc_BDD6
0000C8CC 303C 00CD                  		move.w	#$CD,d0
0000C8D0 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play switch sound
0000C8D6                            
0000C8D6                            loc_BDD6:
0000C8D6 07D3                       		bset	d3,(a3)
0000C8D8 08E8 0000 001A             		bset	#0,$1A(a0)	; use "pressed"	frame
0000C8DE                            
0000C8DE                            loc_BDDE:
0000C8DE 0828 0005 0028             		btst	#5,$28(a0)
0000C8E4 6700                       		beq.s	Obj32_Display
0000C8E6 5328 001E                  		subq.b	#1,$1E(a0)
0000C8EA 6A00                       		bpl.s	Obj32_Display
0000C8EC 117C 0007 001E             		move.b	#7,$1E(a0)
0000C8F2 0868 0001 001A             		bchg	#1,$1A(a0)
0000C8F8                            
0000C8F8                            Obj32_Display:
0000C8F8 6100 0000                  		bsr.w	DisplaySprite
0000C8FC 3028 0008                  		move.w	8(a0),d0
0000C900 0240 FF80                  		andi.w	#$FF80,d0
0000C904 3238 F700                  		move.w	($FFFFF700).w,d1
0000C908 0441 0080                  		subi.w	#$80,d1
0000C90C 0241 FF80                  		andi.w	#$FF80,d1
0000C910 9041                       		sub.w	d1,d0
0000C912 0C40 0280                  		cmpi.w	#$280,d0
0000C916 6200 0000                  		bhi.w	Obj32_Delete
0000C91A 4E75                       		rts	
0000C91C                            ; ===========================================================================
0000C91C                            
0000C91C                            Obj32_Delete:
0000C91C 6100 0000                  		bsr.w	DeleteObject
0000C920 4E75                       		rts	
0000C922                            
0000C922                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000C922                            
0000C922                            
0000C922                            Obj32_MZBlock:				; XREF: Obj32_Pressed
0000C922 3F03                       		move.w	d3,-(sp)
0000C924 3428 0008                  		move.w	8(a0),d2
0000C928 3628 000C                  		move.w	$C(a0),d3
0000C92C 0442 0010                  		subi.w	#$10,d2
0000C930 5143                       		subq.w	#8,d3
0000C932 383C 0020                  		move.w	#$20,d4
0000C936 3A3C 0010                  		move.w	#$10,d5
0000C93A 43F8 D800                  		lea	($FFFFD800).w,a1 ; begin checking object RAM
0000C93E 3C3C 005F                  		move.w	#$5F,d6
0000C942                            
0000C942                            Obj32_MZLoop:
0000C942 4A29 0001                  		tst.b	1(a1)
0000C946 6A00                       		bpl.s	loc_BE4E
0000C948 0C11 0033                  		cmpi.b	#$33,(a1)	; is the object	a green	MZ block?
0000C94C 6700                       		beq.s	loc_BE5E	; if yes, branch
0000C94E                            
0000C94E                            loc_BE4E:
0000C94E 43E9 0040                  		lea	$40(a1),a1	; check	next object
0000C952 51CE FFEE                  		dbf	d6,Obj32_MZLoop	; repeat $5F times
0000C956                            
0000C956 361F                       		move.w	(sp)+,d3
0000C958 7000                       		moveq	#0,d0
0000C95A                            
0000C95A                            locret_BE5A:
0000C95A 4E75                       		rts	
0000C95C                            ; ===========================================================================
0000C95C 1010                       Obj32_MZData:	dc.b $10, $10
0000C95E                            ; ===========================================================================
0000C95E                            
0000C95E                            loc_BE5E:				; XREF: Obj32_MZBlock
0000C95E 7001                       		moveq	#1,d0
0000C960 0240 003F                  		andi.w	#$3F,d0
0000C964 D040                       		add.w	d0,d0
0000C966 45FB 00F2                  		lea	Obj32_MZData-2(pc,d0.w),a2
0000C96A 121A                       		move.b	(a2)+,d1
0000C96C 4881                       		ext.w	d1
0000C96E 3029 0008                  		move.w	8(a1),d0
0000C972 9041                       		sub.w	d1,d0
0000C974 9042                       		sub.w	d2,d0
0000C976 6400                       		bcc.s	loc_BE80
0000C978 D241                       		add.w	d1,d1
0000C97A D041                       		add.w	d1,d0
0000C97C 6500                       		bcs.s	loc_BE84
0000C97E 60CE                       		bra.s	loc_BE4E
0000C980                            ; ===========================================================================
0000C980                            
0000C980                            loc_BE80:
0000C980 B044                       		cmp.w	d4,d0
0000C982 62CA                       		bhi.s	loc_BE4E
0000C984                            
0000C984                            loc_BE84:
0000C984 121A                       		move.b	(a2)+,d1
0000C986 4881                       		ext.w	d1
0000C988 3029 000C                  		move.w	$C(a1),d0
0000C98C 9041                       		sub.w	d1,d0
0000C98E 9043                       		sub.w	d3,d0
0000C990 6400                       		bcc.s	loc_BE9A
0000C992 D241                       		add.w	d1,d1
0000C994 D041                       		add.w	d1,d0
0000C996 6500                       		bcs.s	loc_BE9E
0000C998 60B4                       		bra.s	loc_BE4E
0000C99A                            ; ===========================================================================
0000C99A                            
0000C99A                            loc_BE9A:
0000C99A B045                       		cmp.w	d5,d0
0000C99C 62B0                       		bhi.s	loc_BE4E
0000C99E                            
0000C99E                            loc_BE9E:
0000C99E 361F                       		move.w	(sp)+,d3
0000C9A0 7001                       		moveq	#1,d0
0000C9A2 4E75                       		rts	
0000C9A4                            ; End of function Obj32_MZBlock
0000C9A4                            
0000C9A4                            ; ===========================================================================
0000C9A4                            ; ---------------------------------------------------------------------------
0000C9A4                            ; Sprite mappings - switches (MZ, SYZ, LZ, SBZ)
0000C9A4                            ; ---------------------------------------------------------------------------
0000C9A4                            Map_obj32:
0000C9A4                            	include "_maps\obj32.asm"
0000C9A4                            ; ---------------------------------------------------------------------------
0000C9A4                            ; Sprite mappings - switches (MZ, SYZ, LZ, SBZ)
0000C9A4                            ; ---------------------------------------------------------------------------
0000C9A4 0000                       		dc.w byte_BEAC-Map_obj32
0000C9A6 0000                       		dc.w byte_BEB7-Map_obj32
0000C9A8 0000                       		dc.w byte_BEC2-Map_obj32
0000C9AA 0000                       		dc.w byte_BEB7-Map_obj32
0000C9AC 02                         byte_BEAC:	dc.b 2
0000C9AD F505 0000 F0               		dc.b $F5, 5, 0,	0, $F0
0000C9B2 F505 0800 00               		dc.b $F5, 5, 8,	0, 0
0000C9B7 02                         byte_BEB7:	dc.b 2
0000C9B8 F505 0004 F0               		dc.b $F5, 5, 0,	4, $F0
0000C9BD F505 0804 00               		dc.b $F5, 5, 8,	4, 0
0000C9C2 02                         byte_BEC2:	dc.b 2
0000C9C3 F505 FFFC F0               		dc.b $F5, 5, $FF, $FC, $F0
0000C9C8 F505 07FC 00               		dc.b $F5, 5, 7,	$FC, 0
0000C9CD F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000C9D2                            		even
0000C9D2                            		even
0000C9D2                            
0000C9D2                            ; ===========================================================================
0000C9D2                            ; ---------------------------------------------------------------------------
0000C9D2                            ; Object 33 - pushable blocks (MZ, LZ)
0000C9D2                            ; ---------------------------------------------------------------------------
0000C9D2                            
0000C9D2                            Obj33:					; XREF: Obj_Index
0000C9D2 7000                       		moveq	#0,d0
0000C9D4 1028 0024                  		move.b	$24(a0),d0
0000C9D8 323B 0000                  		move.w	Obj33_Index(pc,d0.w),d1
0000C9DC 4EFB 1000                  		jmp	Obj33_Index(pc,d1.w)
0000C9E0                            ; ===========================================================================
0000C9E0 0000                       Obj33_Index:	dc.w Obj33_Main-Obj33_Index
0000C9E2 0000                       		dc.w loc_BF6E-Obj33_Index
0000C9E4 0000                       		dc.w loc_C02C-Obj33_Index
0000C9E6                            
0000C9E6 1000                       Obj33_Var:	dc.b $10, 0	; object width,	frame number
0000C9E8 4001                       		dc.b $40, 1
0000C9EA                            ; ===========================================================================
0000C9EA                            
0000C9EA                            Obj33_Main:				; XREF: Obj33_Index
0000C9EA 5428 0024                  		addq.b	#2,$24(a0)
0000C9EE 117C 000F 0016             		move.b	#$F,$16(a0)
0000C9F4 117C 000F 0017             		move.b	#$F,$17(a0)
0000C9FA 217C 0000 0000 0004        		move.l	#Map_obj33,4(a0)
0000CA02 317C 42B8 0002             		move.w	#$42B8,2(a0)	; MZ specific code
0000CA08 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
0000CA0E 6600                       		bne.s	loc_BF16
0000CA10 317C 43DE 0002             		move.w	#$43DE,2(a0)	; LZ specific code
0000CA16                            
0000CA16                            loc_BF16:
0000CA16 117C 0004 0001             		move.b	#4,1(a0)
0000CA1C 117C 0003 0018             		move.b	#3,$18(a0)
0000CA22 3168 0008 0034             		move.w	8(a0),$34(a0)
0000CA28 3168 000C 0036             		move.w	$C(a0),$36(a0)
0000CA2E 7000                       		moveq	#0,d0
0000CA30 1028 0028                  		move.b	$28(a0),d0
0000CA34 D040                       		add.w	d0,d0
0000CA36 0240 000E                  		andi.w	#$E,d0
0000CA3A 45FB 00AA                  		lea	Obj33_Var(pc,d0.w),a2
0000CA3E 115A 0019                  		move.b	(a2)+,$19(a0)
0000CA42 115A 001A                  		move.b	(a2)+,$1A(a0)
0000CA46 4A28 0028                  		tst.b	$28(a0)
0000CA4A 6700                       		beq.s	Obj33_ChkGone
0000CA4C 317C C2B8 0002             		move.w	#$C2B8,2(a0)
0000CA52                            
0000CA52                            Obj33_ChkGone:
0000CA52 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000CA56 7000                       		moveq	#0,d0
0000CA58 1028 0023                  		move.b	$23(a0),d0
0000CA5C 6700                       		beq.s	loc_BF6E
0000CA5E 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000CA64 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0000CA6A 6600 0000                  		bne.w	DeleteObject
0000CA6E                            
0000CA6E                            loc_BF6E:				; XREF: Obj33_Index
0000CA6E 4A28 0032                  		tst.b	$32(a0)
0000CA72 6600 0000                  		bne.w	loc_C046
0000CA76 7200                       		moveq	#0,d1
0000CA78 1228 0019                  		move.b	$19(a0),d1
0000CA7C 0641 000B                  		addi.w	#$B,d1
0000CA80 343C 0010                  		move.w	#$10,d2
0000CA84 363C 0011                  		move.w	#$11,d3
0000CA88 3828 0008                  		move.w	8(a0),d4
0000CA8C 6100 0000                  		bsr.w	loc_C186
0000CA90 0C78 0200 FE10             		cmpi.w	#$200,($FFFFFE10).w ; is the level MZ act 1?
0000CA96 6600                       		bne.s	loc_BFC6	; if not, branch
0000CA98 08A8 0007 0028             		bclr	#7,$28(a0)
0000CA9E 3028 0008                  		move.w	8(a0),d0
0000CAA2 0C40 0A20                  		cmpi.w	#$A20,d0
0000CAA6 6500                       		bcs.s	loc_BFC6
0000CAA8 0C40 0AA1                  		cmpi.w	#$AA1,d0
0000CAAC 6400                       		bcc.s	loc_BFC6
0000CAAE 3038 F7A4                  		move.w	($FFFFF7A4).w,d0
0000CAB2 0440 001C                  		subi.w	#$1C,d0
0000CAB6 3140 000C                  		move.w	d0,$C(a0)
0000CABA 08F8 0007 F7A4             		bset	#7,($FFFFF7A4).w
0000CAC0 08E8 0007 0028             		bset	#7,$28(a0)
0000CAC6                            
0000CAC6                            loc_BFC6:
0000CAC6 3028 0008                  		move.w	8(a0),d0
0000CACA 0240 FF80                  		andi.w	#$FF80,d0
0000CACE 3238 F700                  		move.w	($FFFFF700).w,d1
0000CAD2 0441 0080                  		subi.w	#$80,d1
0000CAD6 0241 FF80                  		andi.w	#$FF80,d1
0000CADA 9041                       		sub.w	d1,d0
0000CADC 0C40 0280                  		cmpi.w	#$280,d0
0000CAE0 6200                       		bhi.s	loc_BFE6
0000CAE2 6000 0000                  		bra.w	DisplaySprite
0000CAE6                            ; ===========================================================================
0000CAE6                            
0000CAE6                            loc_BFE6:
0000CAE6 3028 0034                  		move.w	$34(a0),d0
0000CAEA 0240 FF80                  		andi.w	#$FF80,d0
0000CAEE 3238 F700                  		move.w	($FFFFF700).w,d1
0000CAF2 0441 0080                  		subi.w	#$80,d1
0000CAF6 0241 FF80                  		andi.w	#$FF80,d1
0000CAFA 9041                       		sub.w	d1,d0
0000CAFC 0C40 0280                  		cmpi.w	#$280,d0
0000CB00 6200                       		bhi.s	loc_C016
0000CB02 3168 0034 0008             		move.w	$34(a0),8(a0)
0000CB08 3168 0036 000C             		move.w	$36(a0),$C(a0)
0000CB0E 117C 0004 0024             		move.b	#4,$24(a0)
0000CB14 6000                       		bra.s	loc_C02C
0000CB16                            ; ===========================================================================
0000CB16                            
0000CB16                            loc_C016:
0000CB16 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000CB1A 7000                       		moveq	#0,d0
0000CB1C 1028 0023                  		move.b	$23(a0),d0
0000CB20 6700                       		beq.s	loc_C028
0000CB22 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
0000CB28                            
0000CB28                            loc_C028:
0000CB28 6000 0000                  		bra.w	DeleteObject
0000CB2C                            ; ===========================================================================
0000CB2C                            
0000CB2C                            loc_C02C:				; XREF: Obj33_Index
0000CB2C 6100 0000                  		bsr.w	ChkObjOnScreen2
0000CB30 6700                       		beq.s	locret_C044
0000CB32 117C 0002 0024             		move.b	#2,$24(a0)
0000CB38 4228 0032                  		clr.b	$32(a0)
0000CB3C 4268 0010                  		clr.w	$10(a0)
0000CB40 4268 0012                  		clr.w	$12(a0)
0000CB44                            
0000CB44                            locret_C044:
0000CB44 4E75                       		rts	
0000CB46                            ; ===========================================================================
0000CB46                            
0000CB46                            loc_C046:				; XREF: loc_BF6E
0000CB46 3F28 0008                  		move.w	8(a0),-(sp)
0000CB4A 0C28 0004 0025             		cmpi.b	#4,$25(a0)
0000CB50 6400                       		bcc.s	loc_C056
0000CB52 6100 0000                  		bsr.w	SpeedToPos
0000CB56                            
0000CB56                            loc_C056:
0000CB56 0828 0001 0022             		btst	#1,$22(a0)
0000CB5C 6700                       		beq.s	loc_C0A0
0000CB5E 0668 0018 0012             		addi.w	#$18,$12(a0)
0000CB64 4EB9 0000 0000             		jsr	ObjHitFloor
0000CB6A 4A41                       		tst.w	d1
0000CB6C 6A00 0000                  		bpl.w	loc_C09E
0000CB70 D368 000C                  		add.w	d1,$C(a0)
0000CB74 4268 0012                  		clr.w	$12(a0)
0000CB78 08A8 0001 0022             		bclr	#1,$22(a0)
0000CB7E 3011                       		move.w	(a1),d0
0000CB80 0240 03FF                  		andi.w	#$3FF,d0
0000CB84 0C40 016A                  		cmpi.w	#$16A,d0
0000CB88 6500                       		bcs.s	loc_C09E
0000CB8A 3028 0030                  		move.w	$30(a0),d0
0000CB8E E640                       		asr.w	#3,d0
0000CB90 3140 0010                  		move.w	d0,$10(a0)
0000CB94 117C 0001 0032             		move.b	#1,$32(a0)
0000CB9A 4268 000E                  		clr.w	$E(a0)
0000CB9E                            
0000CB9E                            loc_C09E:
0000CB9E 6000                       		bra.s	loc_C0E6
0000CBA0                            ; ===========================================================================
0000CBA0                            
0000CBA0                            loc_C0A0:
0000CBA0 4A68 0010                  		tst.w	$10(a0)
0000CBA4 6700 0000                  		beq.w	loc_C0D6
0000CBA8 6B00                       		bmi.s	loc_C0BC
0000CBAA 7600                       		moveq	#0,d3
0000CBAC 1628 0019                  		move.b	$19(a0),d3
0000CBB0 4EB9 0000 0000             		jsr	ObjHitWallRight
0000CBB6 4A41                       		tst.w	d1		; has block touched a wall?
0000CBB8 6B00                       		bmi.s	Obj33_StopPush	; if yes, branch
0000CBBA 6000                       		bra.s	loc_C0E6
0000CBBC                            ; ===========================================================================
0000CBBC                            
0000CBBC                            loc_C0BC:
0000CBBC 7600                       		moveq	#0,d3
0000CBBE 1628 0019                  		move.b	$19(a0),d3
0000CBC2 4643                       		not.w	d3
0000CBC4 4EB9 0000 0000             		jsr	ObjHitWallLeft
0000CBCA 4A41                       		tst.w	d1		; has block touched a wall?
0000CBCC 6B00                       		bmi.s	Obj33_StopPush	; if yes, branch
0000CBCE 6000                       		bra.s	loc_C0E6
0000CBD0                            ; ===========================================================================
0000CBD0                            
0000CBD0                            Obj33_StopPush:
0000CBD0 4268 0010                  		clr.w	$10(a0)		; stop block moving
0000CBD4 6000                       		bra.s	loc_C0E6
0000CBD6                            ; ===========================================================================
0000CBD6                            
0000CBD6                            loc_C0D6:
0000CBD6 06A8 0000 2001 000C        		addi.l	#$2001,$C(a0)
0000CBDE 0C28 00A0 000F             		cmpi.b	#-$60,$F(a0)
0000CBE4 6400                       		bcc.s	loc_C104
0000CBE6                            
0000CBE6                            loc_C0E6:
0000CBE6 7200                       		moveq	#0,d1
0000CBE8 1228 0019                  		move.b	$19(a0),d1
0000CBEC 0641 000B                  		addi.w	#$B,d1
0000CBF0 343C 0010                  		move.w	#$10,d2
0000CBF4 363C 0011                  		move.w	#$11,d3
0000CBF8 381F                       		move.w	(sp)+,d4
0000CBFA 6100 0000                  		bsr.w	loc_C186
0000CBFE 6100                       		bsr.s	Obj33_ChkLava
0000CC00 6000 FEC4                  		bra.w	loc_BFC6
0000CC04                            ; ===========================================================================
0000CC04                            
0000CC04                            loc_C104:
0000CC04 381F                       		move.w	(sp)+,d4
0000CC06 43F8 D000                  		lea	($FFFFD000).w,a1
0000CC0A 08A9 0003 0022             		bclr	#3,$22(a1)
0000CC10 08A8 0003 0022             		bclr	#3,$22(a0)
0000CC16 6000 FECE                  		bra.w	loc_BFE6
0000CC1A                            ; ===========================================================================
0000CC1A                            
0000CC1A                            Obj33_ChkLava:
0000CC1A 0C78 0201 FE10             		cmpi.w	#$201,($FFFFFE10).w ; is the level MZ act 2?
0000CC20 6600                       		bne.s	Obj33_ChkLava2	; if not, branch
0000CC22 343C FFE0                  		move.w	#-$20,d2
0000CC26 0C68 0DD0 0008             		cmpi.w	#$DD0,8(a0)
0000CC2C 6700                       		beq.s	Obj33_LoadLava
0000CC2E 0C68 0CC0 0008             		cmpi.w	#$CC0,8(a0)
0000CC34 6700                       		beq.s	Obj33_LoadLava
0000CC36 0C68 0BA0 0008             		cmpi.w	#$BA0,8(a0)
0000CC3C 6700                       		beq.s	Obj33_LoadLava
0000CC3E 4E75                       		rts	
0000CC40                            ; ===========================================================================
0000CC40                            
0000CC40                            Obj33_ChkLava2:
0000CC40 0C78 0202 FE10             		cmpi.w	#$202,($FFFFFE10).w ; is the level MZ act 3?
0000CC46 6600                       		bne.s	Obj33_NoLava	; if not, branch
0000CC48 343C 0020                  		move.w	#$20,d2
0000CC4C 0C68 0560 0008             		cmpi.w	#$560,8(a0)
0000CC52 6700                       		beq.s	Obj33_LoadLava
0000CC54 0C68 05C0 0008             		cmpi.w	#$5C0,8(a0)
0000CC5A 6700                       		beq.s	Obj33_LoadLava
0000CC5C                            
0000CC5C                            Obj33_NoLava:
0000CC5C 4E75                       		rts	
0000CC5E                            ; ===========================================================================
0000CC5E                            
0000CC5E                            Obj33_LoadLava:
0000CC5E 6100 0000                  		bsr.w	SingleObjLoad
0000CC62 6600                       		bne.s	locret_C184
0000CC64 12BC 004C                  		move.b	#$4C,0(a1)	; load lava geyser object
0000CC68 3368 0008 0008             		move.w	8(a0),8(a1)
0000CC6E D569 0008                  		add.w	d2,8(a1)
0000CC72 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000CC78 0669 0010 000C             		addi.w	#$10,$C(a1)
0000CC7E 2348 003C                  		move.l	a0,$3C(a1)
0000CC82                            
0000CC82                            locret_C184:
0000CC82 4E75                       		rts	
0000CC84                            ; ===========================================================================
0000CC84                            
0000CC84                            loc_C186:				; XREF: loc_BF6E
0000CC84 1028 0025                  		move.b	$25(a0),d0
0000CC88 6700 0000                  		beq.w	loc_C218
0000CC8C 5500                       		subq.b	#2,d0
0000CC8E 6600                       		bne.s	loc_C1AA
0000CC90 6100 B3DE                  		bsr.w	ExitPlatform
0000CC94 0829 0003 0022             		btst	#3,$22(a1)
0000CC9A 6600                       		bne.s	loc_C1A4
0000CC9C 4228 0025                  		clr.b	$25(a0)
0000CCA0 4E75                       		rts	
0000CCA2                            ; ===========================================================================
0000CCA2                            
0000CCA2                            loc_C1A4:
0000CCA2 3404                       		move.w	d4,d2
0000CCA4 6000 B928                  		bra.w	MvSonicOnPtfm
0000CCA8                            ; ===========================================================================
0000CCA8                            
0000CCA8                            loc_C1AA:
0000CCA8 5500                       		subq.b	#2,d0
0000CCAA 6600                       		bne.s	loc_C1F2
0000CCAC 6100 0000                  		bsr.w	SpeedToPos
0000CCB0 0668 0018 0012             		addi.w	#$18,$12(a0)
0000CCB6 4EB9 0000 0000             		jsr	ObjHitFloor
0000CCBC 4A41                       		tst.w	d1
0000CCBE 6A00 0000                  		bpl.w	locret_C1F0
0000CCC2 D368 000C                  		add.w	d1,$C(a0)
0000CCC6 4268 0012                  		clr.w	$12(a0)
0000CCCA 4228 0025                  		clr.b	$25(a0)
0000CCCE 3011                       		move.w	(a1),d0
0000CCD0 0240 03FF                  		andi.w	#$3FF,d0
0000CCD4 0C40 016A                  		cmpi.w	#$16A,d0
0000CCD8 6500                       		bcs.s	locret_C1F0
0000CCDA 3028 0030                  		move.w	$30(a0),d0
0000CCDE E640                       		asr.w	#3,d0
0000CCE0 3140 0010                  		move.w	d0,$10(a0)
0000CCE4 117C 0001 0032             		move.b	#1,$32(a0)
0000CCEA 4268 000E                  		clr.w	$E(a0)
0000CCEE                            
0000CCEE                            locret_C1F0:
0000CCEE 4E75                       		rts	
0000CCF0                            ; ===========================================================================
0000CCF0                            
0000CCF0                            loc_C1F2:
0000CCF0 6100 0000                  		bsr.w	SpeedToPos
0000CCF4 3028 0008                  		move.w	8(a0),d0
0000CCF8 0240 000C                  		andi.w	#$C,d0
0000CCFC 6600 0000                  		bne.w	locret_C2E4
0000CD00 0268 FFF0 0008             		andi.w	#-$10,8(a0)
0000CD06 3168 0010 0030             		move.w	$10(a0),$30(a0)
0000CD0C 4268 0010                  		clr.w	$10(a0)
0000CD10 5528 0025                  		subq.b	#2,$25(a0)
0000CD14 4E75                       		rts	
0000CD16                            ; ===========================================================================
0000CD16                            
0000CD16                            loc_C218:
0000CD16 6100 0000                  		bsr.w	loc_FAC8
0000CD1A 4A44                       		tst.w	d4
0000CD1C 6700 0000                  		beq.w	locret_C2E4
0000CD20 6B00 0000                  		bmi.w	locret_C2E4
0000CD24 4A28 0032                  		tst.b	$32(a0)
0000CD28 6700                       		beq.s	loc_C230
0000CD2A 6000 0000                  		bra.w	locret_C2E4
0000CD2E                            ; ===========================================================================
0000CD2E                            
0000CD2E                            loc_C230:
0000CD2E 4A40                       		tst.w	d0
0000CD30 6700 0000                  		beq.w	locret_C2E4
0000CD34 6B00                       		bmi.s	loc_C268
0000CD36 0829 0000 0022             		btst	#0,$22(a1)
0000CD3C 6600 0000                  		bne.w	locret_C2E4
0000CD40 3F00                       		move.w	d0,-(sp)
0000CD42 7600                       		moveq	#0,d3
0000CD44 1628 0019                  		move.b	$19(a0),d3
0000CD48 4EB9 0000 0000             		jsr	ObjHitWallRight
0000CD4E 301F                       		move.w	(sp)+,d0
0000CD50 4A41                       		tst.w	d1
0000CD52 6B00 0000                  		bmi.w	locret_C2E4
0000CD56 06A8 0001 0000 0008        		addi.l	#$10000,8(a0)
0000CD5E 7001                       		moveq	#1,d0
0000CD60 323C 0040                  		move.w	#$40,d1
0000CD64 6000                       		bra.s	loc_C294
0000CD66                            ; ===========================================================================
0000CD66                            
0000CD66                            loc_C268:
0000CD66 0829 0000 0022             		btst	#0,$22(a1)
0000CD6C 6700                       		beq.s	locret_C2E4
0000CD6E 3F00                       		move.w	d0,-(sp)
0000CD70 7600                       		moveq	#0,d3
0000CD72 1628 0019                  		move.b	$19(a0),d3
0000CD76 4643                       		not.w	d3
0000CD78 4EB9 0000 0000             		jsr	ObjHitWallLeft
0000CD7E 301F                       		move.w	(sp)+,d0
0000CD80 4A41                       		tst.w	d1
0000CD82 6B00                       		bmi.s	locret_C2E4
0000CD84 04A8 0001 0000 0008        		subi.l	#$10000,8(a0)
0000CD8C 70FF                       		moveq	#-1,d0
0000CD8E 323C FFC0                  		move.w	#-$40,d1
0000CD92                            
0000CD92                            loc_C294:
0000CD92 43F8 D000                  		lea	($FFFFD000).w,a1
0000CD96 D169 0008                  		add.w	d0,8(a1)
0000CD9A 3341 0014                  		move.w	d1,$14(a1)
0000CD9E 337C 0000 0010             		move.w	#0,$10(a1)
0000CDA4 3F00                       		move.w	d0,-(sp)
0000CDA6 303C 00A7                  		move.w	#$A7,d0
0000CDAA 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play pushing sound
0000CDB0 301F                       		move.w	(sp)+,d0
0000CDB2 4A28 0028                  		tst.b	$28(a0)
0000CDB6 6B00                       		bmi.s	locret_C2E4
0000CDB8 3F00                       		move.w	d0,-(sp)
0000CDBA 4EB9 0000 0000             		jsr	ObjHitFloor
0000CDC0 301F                       		move.w	(sp)+,d0
0000CDC2 0C41 0004                  		cmpi.w	#4,d1
0000CDC6 6F00                       		ble.s	loc_C2E0
0000CDC8 317C 0400 0010             		move.w	#$400,$10(a0)
0000CDCE 4A40                       		tst.w	d0
0000CDD0 6A00                       		bpl.s	loc_C2D8
0000CDD2 4468 0010                  		neg.w	$10(a0)
0000CDD6                            
0000CDD6                            loc_C2D8:
0000CDD6 117C 0006 0025             		move.b	#6,$25(a0)
0000CDDC 6000                       		bra.s	locret_C2E4
0000CDDE                            ; ===========================================================================
0000CDDE                            
0000CDDE                            loc_C2E0:
0000CDDE D368 000C                  		add.w	d1,$C(a0)
0000CDE2                            
0000CDE2                            locret_C2E4:
0000CDE2 4E75                       		rts	
0000CDE4                            ; ===========================================================================
0000CDE4                            ; ---------------------------------------------------------------------------
0000CDE4                            ; Sprite mappings - pushable blocks (MZ, LZ)
0000CDE4                            ; ---------------------------------------------------------------------------
0000CDE4                            Map_obj33:
0000CDE4                            	include "_maps\obj33.asm"
0000CDE4                            ; ---------------------------------------------------------------------------
0000CDE4                            ; Sprite mappings - pushable blocks (MZ, LZ)
0000CDE4                            ; ---------------------------------------------------------------------------
0000CDE4 0000                       		dc.w byte_C2EA-Map_obj33
0000CDE6 0000                       		dc.w byte_C2F0-Map_obj33
0000CDE8 01                         byte_C2EA:	dc.b 1
0000CDE9 F00F 0008 F0               		dc.b $F0, $F, 0, 8, $F0	; single block
0000CDEE 04                         byte_C2F0:	dc.b 4
0000CDEF F00F 0008 C0               		dc.b $F0, $F, 0, 8, $C0	; row of 4 blocks
0000CDF4 F00F 0008 E0               		dc.b $F0, $F, 0, 8, $E0
0000CDF9 F00F 0008 00               		dc.b $F0, $F, 0, 8, 0
0000CDFE F00F 0008 20               		dc.b $F0, $F, 0, 8, $20
0000CE04 00                         		even
0000CE04 00                         		even
0000CE04                            
0000CE04                            ; ===========================================================================
0000CE04                            ; ---------------------------------------------------------------------------
0000CE04                            ; Object 34 - zone title cards
0000CE04                            ; ---------------------------------------------------------------------------
0000CE04                            
0000CE04                            Obj34:					; XREF: Obj_Index
0000CE04 7000                       		moveq	#0,d0
0000CE06 1028 0024                  		move.b	$24(a0),d0
0000CE0A 323B 0000                  		move.w	Obj34_Index(pc,d0.w),d1
0000CE0E 4EFB 1000                  		jmp	Obj34_Index(pc,d1.w)
0000CE12                            ; ===========================================================================
0000CE12 0000                       Obj34_Index:	dc.w Obj34_CheckSBZ3-Obj34_Index
0000CE14 0000                       		dc.w Obj34_ChkPos-Obj34_Index
0000CE16 0000                       		dc.w Obj34_Wait-Obj34_Index
0000CE18 0000                       		dc.w Obj34_Wait-Obj34_Index
0000CE1A                            ; ===========================================================================
0000CE1A                            
0000CE1A                            Obj34_CheckSBZ3:			; XREF: Obj34_Index
0000CE1A 2248                       		movea.l	a0,a1
0000CE1C 7000                       		moveq	#0,d0
0000CE1E 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000CE22 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; check if level is	SBZ 3
0000CE28 6600                       		bne.s	Obj34_CheckFZ
0000CE2A 7005                       		moveq	#5,d0		; load title card number 5 (SBZ)
0000CE2C                            
0000CE2C                            Obj34_CheckFZ:
0000CE2C 3400                       		move.w	d0,d2
0000CE2E 0C78 0502 FE10             		cmpi.w	#$502,($FFFFFE10).w ; check if level is	FZ
0000CE34 6600                       		bne.s	Obj34_LoadConfig
0000CE36 7006                       		moveq	#6,d0		; load title card number 6 (FZ)
0000CE38 740B                       		moveq	#$B,d2		; use "FINAL" mappings
0000CE3A                            
0000CE3A                            Obj34_LoadConfig:
0000CE3A 47F9 0000 0000             		lea	(Obj34_ConData).l,a3
0000CE40 E948                       		lsl.w	#4,d0
0000CE42 D6C0                       		adda.w	d0,a3
0000CE44 45F9 0000 0000             		lea	(Obj34_ItemData).l,a2
0000CE4A 7203                       		moveq	#3,d1
0000CE4C                            
0000CE4C                            Obj34_Loop:
0000CE4C 12BC 0034                  		move.b	#$34,0(a1)
0000CE50 3353 0008                  		move.w	(a3),8(a1)	; load start x-position
0000CE54 335B 0032                  		move.w	(a3)+,$32(a1)	; load finish x-position (same as start)
0000CE58 335B 0030                  		move.w	(a3)+,$30(a1)	; load main x-position
0000CE5C 335A 000A                  		move.w	(a2)+,$A(a1)
0000CE60 135A 0024                  		move.b	(a2)+,$24(a1)
0000CE64 101A                       		move.b	(a2)+,d0
0000CE66 6600                       		bne.s	Obj34_ActNumber
0000CE68 1002                       		move.b	d2,d0
0000CE6A                            
0000CE6A                            Obj34_ActNumber:
0000CE6A 0C00 0007                  		cmpi.b	#7,d0
0000CE6E 6600                       		bne.s	Obj34_MakeSprite
0000CE70 D038 FE11                  		add.b	($FFFFFE11).w,d0
0000CE74 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w
0000CE7A 6600                       		bne.s	Obj34_MakeSprite
0000CE7C 5300                       		subq.b	#1,d0
0000CE7E                            
0000CE7E                            Obj34_MakeSprite:
0000CE7E 1340 001A                  		move.b	d0,$1A(a1)	; display frame	number d0
0000CE82 237C 0000 0000 0004        		move.l	#Map_obj34,4(a1)
0000CE8A 337C 8580 0002             		move.w	#$8580,2(a1)
0000CE90 137C 0078 0019             		move.b	#$78,$19(a1)
0000CE96 137C 0000 0001             		move.b	#0,1(a1)
0000CE9C 137C 0000 0018             		move.b	#0,$18(a1)
0000CEA2 337C 003C 001E             		move.w	#60,$1E(a1)	; set time delay to 1 second
0000CEA8 43E9 0040                  		lea	$40(a1),a1	; next object
0000CEAC 51C9 FF9E                  		dbf	d1,Obj34_Loop	; repeat sequence another 3 times
0000CEB0                            
0000CEB0                            Obj34_ChkPos:				; XREF: Obj34_Index
0000CEB0 7210                       		moveq	#$10,d1		; set horizontal speed
0000CEB2 3028 0030                  		move.w	$30(a0),d0
0000CEB6 B068 0008                  		cmp.w	8(a0),d0	; has item reached the target position?
0000CEBA 6700                       		beq.s	loc_C3C8	; if yes, branch
0000CEBC 6C00                       		bge.s	Obj34_Move
0000CEBE 4441                       		neg.w	d1
0000CEC0                            
0000CEC0                            Obj34_Move:
0000CEC0 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000CEC4                            
0000CEC4                            loc_C3C8:
0000CEC4 3028 0008                  		move.w	8(a0),d0
0000CEC8 6B00                       		bmi.s	locret_C3D8
0000CECA 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000CECE 6400                       		bcc.s	locret_C3D8	; if yes, branch
0000CED0 6000 0000                  		bra.w	DisplaySprite
0000CED4                            ; ===========================================================================
0000CED4                            
0000CED4                            locret_C3D8:
0000CED4 4E75                       		rts	
0000CED6                            ; ===========================================================================
0000CED6                            
0000CED6                            Obj34_Wait:				; XREF: Obj34_Index
0000CED6 4A68 001E                  		tst.w	$1E(a0)		; is time remaining zero?
0000CEDA 6700                       		beq.s	Obj34_ChkPos2	; if yes, branch
0000CEDC 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time
0000CEE0 6000 0000                  		bra.w	DisplaySprite
0000CEE4                            ; ===========================================================================
0000CEE4                            
0000CEE4                            Obj34_ChkPos2:				; XREF: Obj34_Wait
0000CEE4 4A28 0001                  		tst.b	1(a0)
0000CEE8 6A00                       		bpl.s	Obj34_ChangeArt
0000CEEA 7220                       		moveq	#$20,d1
0000CEEC 3028 0032                  		move.w	$32(a0),d0
0000CEF0 B068 0008                  		cmp.w	8(a0),d0	; has item reached the finish position?
0000CEF4 6700                       		beq.s	Obj34_ChangeArt	; if yes, branch
0000CEF6 6C00                       		bge.s	Obj34_Move2
0000CEF8 4441                       		neg.w	d1
0000CEFA                            
0000CEFA                            Obj34_Move2:
0000CEFA D368 0008                  		add.w	d1,8(a0)	; change item's position
0000CEFE 3028 0008                  		move.w	8(a0),d0
0000CF02 6B00                       		bmi.s	locret_C412
0000CF04 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000CF08 6400                       		bcc.s	locret_C412	; if yes, branch
0000CF0A 6000 0000                  		bra.w	DisplaySprite
0000CF0E                            ; ===========================================================================
0000CF0E                            
0000CF0E                            locret_C412:
0000CF0E 4E75                       		rts	
0000CF10                            ; ===========================================================================
0000CF10                            
0000CF10                            Obj34_ChangeArt:			; XREF: Obj34_ChkPos2
0000CF10 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0000CF16 6600                       		bne.s	Obj34_Delete
0000CF18 7002                       		moveq	#2,d0
0000CF1A 4EB9 0000 16EA             		jsr	(LoadPLC).l	; load explosion patterns
0000CF20 7000                       		moveq	#0,d0
0000CF22 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000CF26 0640 0015                  		addi.w	#$15,d0
0000CF2A 4EB9 0000 16EA             		jsr	(LoadPLC).l	; load animal patterns
0000CF30                            
0000CF30                            Obj34_Delete:
0000CF30 6000 0000                  		bra.w	DeleteObject
0000CF34                            ; ===========================================================================
0000CF34 00D0                       Obj34_ItemData:	dc.w $D0	; y-axis position
0000CF36 0200                       		dc.b 2,	0	; routine number, frame	number (changes)
0000CF38 00E4                       		dc.w $E4
0000CF3A 0206                       		dc.b 2,	6
0000CF3C 00EA                       		dc.w $EA
0000CF3E 0207                       		dc.b 2,	7
0000CF40 00E0                       		dc.w $E0
0000CF42 020A                       		dc.b 2,	$A
0000CF44                            ; ---------------------------------------------------------------------------
0000CF44                            ; Title	card configuration data
0000CF44                            ; Format:
0000CF44                            ; 4 bytes per item (YYYY XXXX)
0000CF44                            ; 4 items per level (GREEN HILL, ZONE, ACT X, oval)
0000CF44                            ; ---------------------------------------------------------------------------
0000CF44 0000 0120 FEFC 013C 0414+  Obj34_ConData:	dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; GHZ
0000CF54 0000 0120 FEF4 0134 040C+  		dc.w 0,	$120, $FEF4, $134, $40C, $14C, $20C, $14C ; LZ
0000CF64 0000 0120 FEE0 0120 03F8+  		dc.w 0,	$120, $FEE0, $120, $3F8, $138, $1F8, $138 ; MZ
0000CF74 0000 0120 FEFC 013C 0414+  		dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; SLZ
0000CF84 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; SYZ
0000CF94 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; SBZ
0000CFA4 0000 0120 FEE4 0124 03EC+  		dc.w 0,	$120, $FEE4, $124, $3EC, $3EC, $1EC, $12C ; FZ
0000CFB4                            ; ===========================================================================
0000CFB4                            ; ---------------------------------------------------------------------------
0000CFB4                            ; Object 39 - "GAME OVER" and "TIME OVER"
0000CFB4                            ; ---------------------------------------------------------------------------
0000CFB4                            
0000CFB4                            Obj39:					; XREF: Obj_Index
0000CFB4 7000                       		moveq	#0,d0
0000CFB6 1028 0024                  		move.b	$24(a0),d0
0000CFBA 323B 0000                  		move.w	Obj39_Index(pc,d0.w),d1
0000CFBE 4EFB 1000                  		jmp	Obj39_Index(pc,d1.w)
0000CFC2                            ; ===========================================================================
0000CFC2 0000                       Obj39_Index:	dc.w Obj39_ChkPLC-Obj39_Index
0000CFC4 0000                       		dc.w loc_C50C-Obj39_Index
0000CFC6 0000                       		dc.w Obj39_Wait-Obj39_Index
0000CFC8                            ; ===========================================================================
0000CFC8                            
0000CFC8                            Obj39_ChkPLC:				; XREF: Obj39_Index
0000CFC8 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000CFCC 6700                       		beq.s	Obj39_Main	; if yes, branch
0000CFCE 4E75                       		rts	
0000CFD0                            ; ===========================================================================
0000CFD0                            
0000CFD0                            Obj39_Main:
0000CFD0 5428 0024                  		addq.b	#2,$24(a0)
0000CFD4 317C 0050 0008             		move.w	#$50,8(a0)	; set x-position
0000CFDA 0828 0000 001A             		btst	#0,$1A(a0)	; is the object	"OVER"?
0000CFE0 6700                       		beq.s	loc_C4EC	; if not, branch
0000CFE2 317C 01F0 0008             		move.w	#$1F0,8(a0)	; set x-position for "OVER"
0000CFE8                            
0000CFE8                            loc_C4EC:
0000CFE8 317C 00F0 000A             		move.w	#$F0,$A(a0)
0000CFEE 217C 0000 0000 0004        		move.l	#Map_obj39,4(a0)
0000CFF6 317C 855E 0002             		move.w	#$855E,2(a0)
0000CFFC 117C 0000 0001             		move.b	#0,1(a0)
0000D002 117C 0000 0018             		move.b	#0,$18(a0)
0000D008                            
0000D008                            loc_C50C:				; XREF: Obj39_Index
0000D008 7210                       		moveq	#$10,d1		; set horizontal speed
0000D00A 0C68 0120 0008             		cmpi.w	#$120,8(a0)	; has item reached its target position?
0000D010 6700                       		beq.s	Obj39_SetWait	; if yes, branch
0000D012 6500                       		bcs.s	Obj39_Move
0000D014 4441                       		neg.w	d1
0000D016                            
0000D016                            Obj39_Move:
0000D016 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000D01A 6000 0000                  		bra.w	DisplaySprite
0000D01E                            ; ===========================================================================
0000D01E                            
0000D01E                            Obj39_SetWait:				; XREF: Obj39_Main
0000D01E 317C 02D0 001E             		move.w	#720,$1E(a0)	; set time delay to 12 seconds
0000D024 5428 0024                  		addq.b	#2,$24(a0)
0000D028 4E75                       		rts	
0000D02A                            ; ===========================================================================
0000D02A                            
0000D02A                            Obj39_Wait:				; XREF: Obj39_Index
0000D02A 1038 F605                  		move.b	($FFFFF605).w,d0
0000D02E 0200 0070                  		andi.b	#$70,d0		; is button A, B or C pressed?
0000D032 6600                       		bne.s	Obj39_ChgMode	; if yes, branch
0000D034 0828 0000 001A             		btst	#0,$1A(a0)
0000D03A 6600                       		bne.s	Obj39_Display
0000D03C 4A68 001E                  		tst.w	$1E(a0)		; has time delay reached zero?
0000D040 6700                       		beq.s	Obj39_ChgMode	; if yes, branch
0000D042 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000D046 6000 0000                  		bra.w	DisplaySprite
0000D04A                            ; ===========================================================================
0000D04A                            
0000D04A                            Obj39_ChgMode:				; XREF: Obj39_Wait
0000D04A 4A38 FE1A                  		tst.b	($FFFFFE1A).w	; is time over flag set?
0000D04E 6600                       		bne.s	Obj39_ResetLvl	; if yes, branch
0000D050 11FC 0014 F600             		move.b	#$14,($FFFFF600).w ; set mode to $14 (continue screen)
0000D056 4A38 FE18                  		tst.b	($FFFFFE18).w	; do you have any continues?
0000D05A 6600                       		bne.s	Obj39_Display	; if yes, branch
0000D05C 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set mode to 0 (Sega screen)
0000D062 6000                       		bra.s	Obj39_Display
0000D064                            ; ===========================================================================
0000D064                            
0000D064                            Obj39_ResetLvl:				; XREF: Obj39_ChgMode
0000D064 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000D06A                            
0000D06A                            Obj39_Display:				; XREF: Obj39_ChgMode
0000D06A 6000 0000                  		bra.w	DisplaySprite
0000D06E                            ; ===========================================================================
0000D06E                            ; ---------------------------------------------------------------------------
0000D06E                            ; Object 3A - "SONIC GOT THROUGH" title	card
0000D06E                            ; ---------------------------------------------------------------------------
0000D06E                            
0000D06E                            Obj3A:					; XREF: Obj_Index
0000D06E 7000                       		moveq	#0,d0
0000D070 1028 0024                  		move.b	$24(a0),d0
0000D074 323B 0000                  		move.w	Obj3A_Index(pc,d0.w),d1
0000D078 4EFB 1000                  		jmp	Obj3A_Index(pc,d1.w)
0000D07C                            ; ===========================================================================
0000D07C 0000                       Obj3A_Index:	dc.w Obj3A_ChkPLC-Obj3A_Index
0000D07E 0000                       		dc.w Obj3A_ChkPos-Obj3A_Index
0000D080 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000D082 0000                       		dc.w Obj3A_TimeBonus-Obj3A_Index
0000D084 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000D086 0000                       		dc.w Obj3A_NextLevel-Obj3A_Index
0000D088 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000D08A 0000                       		dc.w Obj3A_ChkPos2-Obj3A_Index
0000D08C 0000                       		dc.w loc_C766-Obj3A_Index
0000D08E                            ; ===========================================================================
0000D08E                            
0000D08E                            Obj3A_ChkPLC:				; XREF: Obj3A_Index
0000D08E 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000D092 6700                       		beq.s	Obj3A_Main	; if yes, branch
0000D094 4E75                       		rts	
0000D096                            ; ===========================================================================
0000D096                            
0000D096                            Obj3A_Main:
0000D096 2248                       		movea.l	a0,a1
0000D098 45F9 0000 0000             		lea	(Obj3A_Config).l,a2
0000D09E 7206                       		moveq	#6,d1
0000D0A0                            
0000D0A0                            Obj3A_Loop:
0000D0A0 12BC 003A                  		move.b	#$3A,0(a1)
0000D0A4 3352 0008                  		move.w	(a2),8(a1)	; load start x-position
0000D0A8 335A 0032                  		move.w	(a2)+,$32(a1)	; load finish x-position (same as start)
0000D0AC 335A 0030                  		move.w	(a2)+,$30(a1)	; load main x-position
0000D0B0 335A 000A                  		move.w	(a2)+,$A(a1)	; load y-position
0000D0B4 135A 0024                  		move.b	(a2)+,$24(a1)
0000D0B8 101A                       		move.b	(a2)+,d0
0000D0BA 0C00 0006                  		cmpi.b	#6,d0
0000D0BE 6600                       		bne.s	loc_C5CA
0000D0C0 D038 FE11                  		add.b	($FFFFFE11).w,d0 ; add act number to frame number
0000D0C4                            
0000D0C4                            loc_C5CA:
0000D0C4 1340 001A                  		move.b	d0,$1A(a1)
0000D0C8 237C 0000 0000 0004        		move.l	#Map_obj3A,4(a1)
0000D0D0 337C 8580 0002             		move.w	#$8580,2(a1)
0000D0D6 137C 0000 0001             		move.b	#0,1(a1)
0000D0DC 43E9 0040                  		lea	$40(a1),a1
0000D0E0 51C9 FFBE                  		dbf	d1,Obj3A_Loop	; repeat 6 times
0000D0E4                            
0000D0E4                            Obj3A_ChkPos:				; XREF: Obj3A_Index
0000D0E4 7210                       		moveq	#$10,d1		; set horizontal speed
0000D0E6 3028 0030                  		move.w	$30(a0),d0
0000D0EA B068 0008                  		cmp.w	8(a0),d0	; has item reached its target position?
0000D0EE 6700                       		beq.s	loc_C61A	; if yes, branch
0000D0F0 6C00                       		bge.s	Obj3A_Move
0000D0F2 4441                       		neg.w	d1
0000D0F4                            
0000D0F4                            Obj3A_Move:
0000D0F4 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000D0F8                            
0000D0F8                            loc_C5FE:				; XREF: loc_C61A
0000D0F8 3028 0008                  		move.w	8(a0),d0
0000D0FC 6B00                       		bmi.s	locret_C60E
0000D0FE 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000D102 6400                       		bcc.s	locret_C60E	; if yes, branch
0000D104 6000 0000                  		bra.w	DisplaySprite
0000D108                            ; ===========================================================================
0000D108                            
0000D108                            locret_C60E:
0000D108 4E75                       		rts	
0000D10A                            ; ===========================================================================
0000D10A                            
0000D10A                            loc_C610:				; XREF: loc_C61A
0000D10A 117C 000E 0024             		move.b	#$E,$24(a0)
0000D110 6000 0000                  		bra.w	Obj3A_ChkPos2
0000D114                            ; ===========================================================================
0000D114                            
0000D114                            loc_C61A:				; XREF: Obj3A_ChkPos
0000D114 0C38 000E D724             		cmpi.b	#$E,($FFFFD724).w
0000D11A 67EE                       		beq.s	loc_C610
0000D11C 0C28 0004 001A             		cmpi.b	#4,$1A(a0)
0000D122 66D4                       		bne.s	loc_C5FE
0000D124 5428 0024                  		addq.b	#2,$24(a0)
0000D128 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000D12E                            
0000D12E                            Obj3A_Wait:				; XREF: Obj3A_Index
0000D12E 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000D132 6600                       		bne.s	Obj3A_Display
0000D134 5428 0024                  		addq.b	#2,$24(a0)
0000D138                            
0000D138                            Obj3A_Display:
0000D138 6000 0000                  		bra.w	DisplaySprite
0000D13C                            ; ===========================================================================
0000D13C                            
0000D13C                            Obj3A_TimeBonus:			; XREF: Obj3A_Index
0000D13C 6100 0000                  		bsr.w	DisplaySprite
0000D140 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; set time/ring bonus update flag
0000D146 7000                       		moveq	#0,d0
0000D148 4A78 F7D2                  		tst.w	($FFFFF7D2).w	; is time bonus	= zero?
0000D14C 6700                       		beq.s	Obj3A_RingBonus	; if yes, branch
0000D14E 0640 000A                  		addi.w	#10,d0		; add 10 to score
0000D152 0478 000A F7D2             		subi.w	#10,($FFFFF7D2).w ; subtract 10	from time bonus
0000D158                            
0000D158                            Obj3A_RingBonus:
0000D158 4A78 F7D4                  		tst.w	($FFFFF7D4).w	; is ring bonus	= zero?
0000D15C 6700                       		beq.s	Obj3A_ChkBonus	; if yes, branch
0000D15E 0640 000A                  		addi.w	#10,d0		; add 10 to score
0000D162 0478 000A F7D4             		subi.w	#10,($FFFFF7D4).w ; subtract 10	from ring bonus
0000D168                            
0000D168                            Obj3A_ChkBonus:
0000D168 4A40                       		tst.w	d0		; is there any bonus?
0000D16A 6600                       		bne.s	Obj3A_AddBonus	; if yes, branch
0000D16C 303C 00C5                  		move.w	#$C5,d0
0000D170 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play "ker-ching" sound
0000D176 5428 0024                  		addq.b	#2,$24(a0)
0000D17A 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w
0000D180 6600                       		bne.s	Obj3A_SetDelay
0000D182 5828 0024                  		addq.b	#4,$24(a0)
0000D186                            
0000D186                            Obj3A_SetDelay:
0000D186 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000D18C                            
0000D18C                            locret_C692:
0000D18C 4E75                       		rts	
0000D18E                            ; ===========================================================================
0000D18E                            
0000D18E                            Obj3A_AddBonus:				; XREF: Obj3A_ChkBonus
0000D18E 4EB9 0000 0000             		jsr	AddPoints
0000D194 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000D198 0200 0003                  		andi.b	#3,d0
0000D19C 66EE                       		bne.s	locret_C692
0000D19E 303C 00CD                  		move.w	#$CD,d0
0000D1A2 4EF9 0000 1476             		jmp	(PlaySound_Special).l ;	play "blip" sound
0000D1A8                            ; ===========================================================================
0000D1A8                            
0000D1A8                            Obj3A_NextLevel:			; XREF: Obj3A_Index
0000D1A8 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000D1AC 0240 0007                  		andi.w	#7,d0
0000D1B0 E748                       		lsl.w	#3,d0
0000D1B2 1238 FE11                  		move.b	($FFFFFE11).w,d1
0000D1B6 0241 0003                  		andi.w	#3,d1
0000D1BA D241                       		add.w	d1,d1
0000D1BC D041                       		add.w	d1,d0
0000D1BE 303B 0000                  		move.w	LevelOrder(pc,d0.w),d0 ; load level from level order array
0000D1C2 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level number
0000D1C6 4A40                       		tst.w	d0
0000D1C8 6600                       		bne.s	Obj3A_ChkSS
0000D1CA 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set game mode to level (00)
0000D1D0 6000                       		bra.s	Obj3A_Display2
0000D1D2                            ; ===========================================================================
0000D1D2                            
0000D1D2                            Obj3A_ChkSS:				; XREF: Obj3A_NextLevel
0000D1D2 4238 FE30                  		clr.b	($FFFFFE30).w	; clear	lamppost counter
0000D1D6 4A38 F7CD                  		tst.b	($FFFFF7CD).w	; has Sonic jumped into	a giant	ring?
0000D1DA 6700                       		beq.s	loc_C6EA	; if not, branch
0000D1DC 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set game mode to Special Stage (10)
0000D1E2 6000                       		bra.s	Obj3A_Display2
0000D1E4                            ; ===========================================================================
0000D1E4                            
0000D1E4                            loc_C6EA:				; XREF: Obj3A_ChkSS
0000D1E4 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000D1EA                            
0000D1EA                            Obj3A_Display2:				; XREF: Obj3A_NextLevel, Obj3A_ChkSS
0000D1EA 6000 0000                  		bra.w	DisplaySprite
0000D1EE                            ; ===========================================================================
0000D1EE                            ; ---------------------------------------------------------------------------
0000D1EE                            ; Level	order array
0000D1EE                            ; ---------------------------------------------------------------------------
0000D1EE                            LevelOrder:	incbin	misc\lvl_ord.bin
0000D21E                            		even
0000D21E                            ; ===========================================================================
0000D21E                            
0000D21E                            Obj3A_ChkPos2:				; XREF: Obj3A_Index
0000D21E 7220                       		moveq	#$20,d1		; set horizontal speed
0000D220 3028 0032                  		move.w	$32(a0),d0
0000D224 B068 0008                  		cmp.w	8(a0),d0	; has item reached its finish position?
0000D228 6700                       		beq.s	Obj3A_SBZ2	; if yes, branch
0000D22A 6C00                       		bge.s	Obj3A_Move2
0000D22C 4441                       		neg.w	d1
0000D22E                            
0000D22E                            Obj3A_Move2:
0000D22E D368 0008                  		add.w	d1,8(a0)	; change item's position
0000D232 3028 0008                  		move.w	8(a0),d0
0000D236 6B00                       		bmi.s	locret_C748
0000D238 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000D23C 6400                       		bcc.s	locret_C748	; if yes, branch
0000D23E 6000 0000                  		bra.w	DisplaySprite
0000D242                            ; ===========================================================================
0000D242                            
0000D242                            locret_C748:
0000D242 4E75                       		rts	
0000D244                            ; ===========================================================================
0000D244                            
0000D244                            Obj3A_SBZ2:				; XREF: Obj3A_ChkPos2
0000D244 0C28 0004 001A             		cmpi.b	#4,$1A(a0)
0000D24A 6600 0000                  		bne.w	DeleteObject
0000D24E 5428 0024                  		addq.b	#2,$24(a0)
0000D252 4238 F7CC                  		clr.b	($FFFFF7CC).w	; unlock controls
0000D256 303C 008D                  		move.w	#$8D,d0
0000D25A 4EF9 0000 1470             		jmp	(PlaySound).l	; play FZ music
0000D260                            ; ===========================================================================
0000D260                            
0000D260                            loc_C766:				; XREF: Obj3A_Index
0000D260 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0000D264 0C78 2100 F72A             		cmpi.w	#$2100,($FFFFF72A).w
0000D26A 6700 0000                  		beq.w	DeleteObject
0000D26E 4E75                       		rts	
0000D270                            ; ===========================================================================
0000D270 0004 0124 00BC             Obj3A_Config:	dc.w 4,	$124, $BC	; x-start, x-main, y-main
0000D276 0200                       		dc.b 2,	0		; routine number, frame	number (changes)
0000D278 FEE0 0120 00D0             		dc.w $FEE0, $120, $D0
0000D27E 0201                       		dc.b 2,	1
0000D280 040C 014C 00D6             		dc.w $40C, $14C, $D6
0000D286 0206                       		dc.b 2,	6
0000D288 0520 0120 00EC             		dc.w $520, $120, $EC
0000D28E 0202                       		dc.b 2,	2
0000D290 0540 0120 00FC             		dc.w $540, $120, $FC
0000D296 0203                       		dc.b 2,	3
0000D298 0560 0120 010C             		dc.w $560, $120, $10C
0000D29E 0204                       		dc.b 2,	4
0000D2A0 020C 014C 00CC             		dc.w $20C, $14C, $CC
0000D2A6 0205                       		dc.b 2,	5
0000D2A8                            ; ===========================================================================
0000D2A8                            ; ---------------------------------------------------------------------------
0000D2A8                            ; Object 7E - special stage results screen
0000D2A8                            ; ---------------------------------------------------------------------------
0000D2A8                            
0000D2A8                            Obj7E:					; XREF: Obj_Index
0000D2A8 7000                       		moveq	#0,d0
0000D2AA 1028 0024                  		move.b	$24(a0),d0
0000D2AE 323B 0000                  		move.w	Obj7E_Index(pc,d0.w),d1
0000D2B2 4EFB 1000                  		jmp	Obj7E_Index(pc,d1.w)
0000D2B6                            ; ===========================================================================
0000D2B6 0000                       Obj7E_Index:	dc.w Obj7E_ChkPLC-Obj7E_Index
0000D2B8 0000                       		dc.w Obj7E_ChkPos-Obj7E_Index
0000D2BA 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000D2BC 0000                       		dc.w Obj7E_RingBonus-Obj7E_Index
0000D2BE 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000D2C0 0000                       		dc.w Obj7E_Exit-Obj7E_Index
0000D2C2 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000D2C4 0000                       		dc.w Obj7E_Continue-Obj7E_Index
0000D2C6 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000D2C8 0000                       		dc.w Obj7E_Exit-Obj7E_Index
0000D2CA 0000                       		dc.w loc_C91A-Obj7E_Index
0000D2CC                            ; ===========================================================================
0000D2CC                            
0000D2CC                            Obj7E_ChkPLC:				; XREF: Obj7E_Index
0000D2CC 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000D2D0 6700                       		beq.s	Obj7E_Main	; if yes, branch
0000D2D2 4E75                       		rts	
0000D2D4                            ; ===========================================================================
0000D2D4                            
0000D2D4                            Obj7E_Main:
0000D2D4 2248                       		movea.l	a0,a1
0000D2D6 45F9 0000 0000             		lea	(Obj7E_Config).l,a2
0000D2DC 7203                       		moveq	#3,d1
0000D2DE 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	50 or more rings?
0000D2E4 6500                       		bcs.s	Obj7E_Loop	; if no, branch
0000D2E6 5241                       		addq.w	#1,d1		; if yes, add 1	to d1 (number of sprites)
0000D2E8                            
0000D2E8                            Obj7E_Loop:
0000D2E8 12BC 007E                  		move.b	#$7E,0(a1)
0000D2EC 335A 0008                  		move.w	(a2)+,8(a1)	; load start x-position
0000D2F0 335A 0030                  		move.w	(a2)+,$30(a1)	; load main x-position
0000D2F4 335A 000A                  		move.w	(a2)+,$A(a1)	; load y-position
0000D2F8 135A 0024                  		move.b	(a2)+,$24(a1)
0000D2FC 135A 001A                  		move.b	(a2)+,$1A(a1)
0000D300 237C 0000 0000 0004        		move.l	#Map_obj7E,4(a1)
0000D308 337C 8580 0002             		move.w	#$8580,2(a1)
0000D30E 137C 0000 0001             		move.b	#0,1(a1)
0000D314 43E9 0040                  		lea	$40(a1),a1
0000D318 51C9 FFCE                  		dbf	d1,Obj7E_Loop	; repeat sequence 3 or 4 times
0000D31C                            
0000D31C 7007                       		moveq	#7,d0
0000D31E 1238 FE57                  		move.b	($FFFFFE57).w,d1
0000D322 6700                       		beq.s	loc_C842
0000D324 7000                       		moveq	#0,d0
0000D326 0C01 0006                  		cmpi.b	#6,d1		; do you have all chaos	emeralds?
0000D32A 6600                       		bne.s	loc_C842	; if not, branch
0000D32C 7008                       		moveq	#8,d0		; load "Sonic got them all" text
0000D32E 317C 0018 0008             		move.w	#$18,8(a0)
0000D334 317C 0118 0030             		move.w	#$118,$30(a0)	; change position of text
0000D33A                            
0000D33A                            loc_C842:
0000D33A 1140 001A                  		move.b	d0,$1A(a0)
0000D33E                            
0000D33E                            Obj7E_ChkPos:				; XREF: Obj7E_Index
0000D33E 7210                       		moveq	#$10,d1		; set horizontal speed
0000D340 3028 0030                  		move.w	$30(a0),d0
0000D344 B068 0008                  		cmp.w	8(a0),d0	; has item reached its target position?
0000D348 6700                       		beq.s	loc_C86C	; if yes, branch
0000D34A 6C00                       		bge.s	Obj7E_Move
0000D34C 4441                       		neg.w	d1
0000D34E                            
0000D34E                            Obj7E_Move:
0000D34E D368 0008                  		add.w	d1,8(a0)	; change item's position
0000D352                            
0000D352                            loc_C85A:				; XREF: loc_C86C
0000D352 3028 0008                  		move.w	8(a0),d0
0000D356 6B00                       		bmi.s	locret_C86A
0000D358 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000D35C 6400                       		bcc.s	locret_C86A	; if yes, branch
0000D35E 6000 0000                  		bra.w	DisplaySprite
0000D362                            ; ===========================================================================
0000D362                            
0000D362                            locret_C86A:
0000D362 4E75                       		rts	
0000D364                            ; ===========================================================================
0000D364                            
0000D364                            loc_C86C:				; XREF: Obj7E_ChkPos
0000D364 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000D36A 66E6                       		bne.s	loc_C85A
0000D36C 5428 0024                  		addq.b	#2,$24(a0)
0000D370 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000D376 11FC 007F D800             		move.b	#$7F,($FFFFD800).w ; load chaos	emerald	object
0000D37C                            
0000D37C                            Obj7E_Wait:				; XREF: Obj7E_Index
0000D37C 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000D380 6600                       		bne.s	Obj7E_Display
0000D382 5428 0024                  		addq.b	#2,$24(a0)
0000D386                            
0000D386                            Obj7E_Display:
0000D386 6000 0000                  		bra.w	DisplaySprite
0000D38A                            ; ===========================================================================
0000D38A                            
0000D38A                            Obj7E_RingBonus:			; XREF: Obj7E_Index
0000D38A 6100 0000                  		bsr.w	DisplaySprite
0000D38E 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; set ring bonus update flag
0000D394 4A78 F7D4                  		tst.w	($FFFFF7D4).w	; is ring bonus	= zero?
0000D398 6700                       		beq.s	loc_C8C4	; if yes, branch
0000D39A 0478 000A F7D4             		subi.w	#10,($FFFFF7D4).w ; subtract 10	from ring bonus
0000D3A0 700A                       		moveq	#10,d0		; add 10 to score
0000D3A2 4EB9 0000 0000             		jsr	AddPoints
0000D3A8 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000D3AC 0200 0003                  		andi.b	#3,d0
0000D3B0 6600                       		bne.s	locret_C8EA
0000D3B2 303C 00CD                  		move.w	#$CD,d0
0000D3B6 4EF9 0000 1476             		jmp	(PlaySound_Special).l ;	play "blip" sound
0000D3BC                            ; ===========================================================================
0000D3BC                            
0000D3BC                            loc_C8C4:				; XREF: Obj7E_RingBonus
0000D3BC 303C 00C5                  		move.w	#$C5,d0
0000D3C0 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play "ker-ching" sound
0000D3C6 5428 0024                  		addq.b	#2,$24(a0)
0000D3CA 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000D3D0 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	at least 50 rings?
0000D3D6 6500                       		bcs.s	locret_C8EA	; if not, branch
0000D3D8 317C 003C 001E             		move.w	#60,$1E(a0)	; set time delay to 1 second
0000D3DE 5828 0024                  		addq.b	#4,$24(a0)	; goto "Obj7E_Continue"	routine
0000D3E2                            
0000D3E2                            locret_C8EA:
0000D3E2 4E75                       		rts	
0000D3E4                            ; ===========================================================================
0000D3E4                            
0000D3E4                            Obj7E_Exit:				; XREF: Obj7E_Index
0000D3E4 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000D3EA 6000 0000                  		bra.w	DisplaySprite
0000D3EE                            ; ===========================================================================
0000D3EE                            
0000D3EE                            Obj7E_Continue:				; XREF: Obj7E_Index
0000D3EE 11FC 0004 D6DA             		move.b	#4,($FFFFD6DA).w
0000D3F4 11FC 0014 D6E4             		move.b	#$14,($FFFFD6E4).w
0000D3FA 303C 00BF                  		move.w	#$BF,d0
0000D3FE 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play continues music
0000D404 5428 0024                  		addq.b	#2,$24(a0)
0000D408 317C 0168 001E             		move.w	#360,$1E(a0)	; set time delay to 6 seconds
0000D40E 6000 0000                  		bra.w	DisplaySprite
0000D412                            ; ===========================================================================
0000D412                            
0000D412                            loc_C91A:				; XREF: Obj7E_Index
0000D412 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000D416 0200 000F                  		andi.b	#$F,d0
0000D41A 6600                       		bne.s	Obj7E_Display2
0000D41C 0868 0000 001A             		bchg	#0,$1A(a0)
0000D422                            
0000D422                            Obj7E_Display2:
0000D422 6000 0000                  		bra.w	DisplaySprite
0000D426                            ; ===========================================================================
0000D426 0020 0120 00C4             Obj7E_Config:	dc.w $20, $120,	$C4	; start	x-pos, main x-pos, y-pos
0000D42C 0200                       		dc.b 2,	0		; rountine number, frame number
0000D42E 0320 0120 0118             		dc.w $320, $120, $118
0000D434 0201                       		dc.b 2,	1
0000D436 0360 0120 0128             		dc.w $360, $120, $128
0000D43C 0202                       		dc.b 2,	2
0000D43E 01EC 011C 00C4             		dc.w $1EC, $11C, $C4
0000D444 0203                       		dc.b 2,	3
0000D446 03A0 0120 0138             		dc.w $3A0, $120, $138
0000D44C 0206                       		dc.b 2,	6
0000D44E                            ; ===========================================================================
0000D44E                            ; ---------------------------------------------------------------------------
0000D44E                            ; Object 7F - chaos emeralds from the special stage results screen
0000D44E                            ; ---------------------------------------------------------------------------
0000D44E                            
0000D44E                            Obj7F:					; XREF: Obj_Index
0000D44E 7000                       		moveq	#0,d0
0000D450 1028 0024                  		move.b	$24(a0),d0
0000D454 323B 0000                  		move.w	Obj7F_Index(pc,d0.w),d1
0000D458 4EFB 1000                  		jmp	Obj7F_Index(pc,d1.w)
0000D45C                            ; ===========================================================================
0000D45C 0000                       Obj7F_Index:	dc.w Obj7F_Main-Obj7F_Index
0000D45E 0000                       		dc.w Obj7F_Flash-Obj7F_Index
0000D460                            
0000D460                            ; ---------------------------------------------------------------------------
0000D460                            ; X-axis positions for chaos emeralds
0000D460                            ; ---------------------------------------------------------------------------
0000D460 0110 0128 00F8 0140 00E0+  Obj7F_PosData:	dc.w $110, $128, $F8, $140, $E0, $158
0000D46C                            ; ===========================================================================
0000D46C                            
0000D46C                            Obj7F_Main:				; XREF: Obj7F_Index
0000D46C 2248                       		movea.l	a0,a1
0000D46E 45F9 0000 D460             		lea	(Obj7F_PosData).l,a2
0000D474 7400                       		moveq	#0,d2
0000D476 7200                       		moveq	#0,d1
0000D478 1238 FE57                  		move.b	($FFFFFE57).w,d1 ; d1 is number	of emeralds
0000D47C 5301                       		subq.b	#1,d1		; subtract 1 from d1
0000D47E 6500 0000                  		bcs.w	DeleteObject	; if you have 0	emeralds, branch
0000D482                            
0000D482                            Obj7F_Loop:
0000D482 12BC 007F                  		move.b	#$7F,0(a1)
0000D486 335A 0008                  		move.w	(a2)+,8(a1)	; set x-position
0000D48A 337C 00F0 000A             		move.w	#$F0,$A(a1)	; set y-position
0000D490 47F8 FE58                  		lea	($FFFFFE58).w,a3 ; check which emeralds	you have
0000D494 1633 2000                  		move.b	(a3,d2.w),d3
0000D498 1343 001A                  		move.b	d3,$1A(a1)
0000D49C 1343 001C                  		move.b	d3,$1C(a1)
0000D4A0 5202                       		addq.b	#1,d2
0000D4A2 5429 0024                  		addq.b	#2,$24(a1)
0000D4A6 237C 0000 0000 0004        		move.l	#Map_obj7F,4(a1)
0000D4AE 337C 8541 0002             		move.w	#$8541,2(a1)
0000D4B4 137C 0000 0001             		move.b	#0,1(a1)
0000D4BA 43E9 0040                  		lea	$40(a1),a1	; next object
0000D4BE 51C9 FFC2                  		dbf	d1,Obj7F_Loop	; loop for d1 number of	emeralds
0000D4C2                            
0000D4C2                            Obj7F_Flash:				; XREF: Obj7F_Index
0000D4C2 1028 001A                  		move.b	$1A(a0),d0
0000D4C6 117C 0006 001A             		move.b	#6,$1A(a0)	; load 6th frame (blank)
0000D4CC 0C00 0006                  		cmpi.b	#6,d0
0000D4D0 6600                       		bne.s	Obj7F_Display
0000D4D2 1168 001C 001A             		move.b	$1C(a0),$1A(a0)	; load visible frame
0000D4D8                            
0000D4D8                            Obj7F_Display:
0000D4D8 6000 0000                  		bra.w	DisplaySprite
0000D4DC                            ; ===========================================================================
0000D4DC                            ; ---------------------------------------------------------------------------
0000D4DC                            ; Sprite mappings - zone title cards
0000D4DC                            ; ---------------------------------------------------------------------------
0000D4DC                            Map_obj34:
0000D4DC                            	include "_maps\obj34.asm"
0000D4DC                            ; ---------------------------------------------------------------------------
0000D4DC                            ; Sprite mappings - zone title cards
0000D4DC                            ; ---------------------------------------------------------------------------
0000D4DC 0000                           	dc.w byte_C9FE-Map_obj34
0000D4DE 0000                       		dc.w byte_CA2C-Map_obj34
0000D4E0 0000                       		dc.w byte_CA5A-Map_obj34
0000D4E2 0000                       		dc.w byte_CA7A-Map_obj34
0000D4E4 0000                       		dc.w byte_CAA8-Map_obj34
0000D4E6 0000                       		dc.w byte_CADC-Map_obj34
0000D4E8 0000                       		dc.w byte_CB10-Map_obj34
0000D4EA 0000                       		dc.w byte_CB26-Map_obj34
0000D4EC 0000                       		dc.w byte_CB31-Map_obj34
0000D4EE 0000                       		dc.w byte_CB3C-Map_obj34
0000D4F0 0000                       		dc.w byte_CB47-Map_obj34
0000D4F2 0000                       		dc.w byte_CB8A-Map_obj34
0000D4F4 09                         byte_C9FE:	dc.b 9 			; GREEN HILL
0000D4F5 F805 0018 B4               		dc.b $F8, 5, 0,	$18, $B4
0000D4FA F805 003A C4               		dc.b $F8, 5, 0,	$3A, $C4
0000D4FF F805 0010 D4               		dc.b $F8, 5, 0,	$10, $D4
0000D504 F805 0010 E4               		dc.b $F8, 5, 0,	$10, $E4
0000D509 F805 002E F4               		dc.b $F8, 5, 0,	$2E, $F4
0000D50E F805 001C 14               		dc.b $F8, 5, 0,	$1C, $14
0000D513 F801 0020 24               		dc.b $F8, 1, 0,	$20, $24
0000D518 F805 0026 2C               		dc.b $F8, 5, 0,	$26, $2C
0000D51D F805 0026 3C               		dc.b $F8, 5, 0,	$26, $3C
0000D522 09                         byte_CA2C:	dc.b 9			; LABYRINTH
0000D523 F805 0026 BC               		dc.b $F8, 5, 0,	$26, $BC
0000D528 F805 0000 CC               		dc.b $F8, 5, 0,	0, $CC
0000D52D F805 0004 DC               		dc.b $F8, 5, 0,	4, $DC
0000D532 F805 004A EC               		dc.b $F8, 5, 0,	$4A, $EC
0000D537 F805 003A FC               		dc.b $F8, 5, 0,	$3A, $FC
0000D53C F801 0020 0C               		dc.b $F8, 1, 0,	$20, $C
0000D541 F805 002E 14               		dc.b $F8, 5, 0,	$2E, $14
0000D546 F805 0042 24               		dc.b $F8, 5, 0,	$42, $24
0000D54B F805 001C 34               		dc.b $F8, 5, 0,	$1C, $34
0000D550 06                         byte_CA5A:	dc.b 6			; MARBLE
0000D551 F805 002A CF               		dc.b $F8, 5, 0,	$2A, $CF
0000D556 F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
0000D55B F805 003A F0               		dc.b $F8, 5, 0,	$3A, $F0
0000D560 F805 0004 00               		dc.b $F8, 5, 0,	4, 0
0000D565 F805 0026 10               		dc.b $F8, 5, 0,	$26, $10
0000D56A F805 0010 20               		dc.b $F8, 5, 0,	$10, $20
0000D56F 00                         		dc.b 0
0000D570 09                         byte_CA7A:	dc.b 9			; STAR	LIGHT
0000D571 F805 003E B4               		dc.b $F8, 5, 0,	$3E, $B4
0000D576 F805 0042 C4               		dc.b $F8, 5, 0,	$42, $C4
0000D57B F805 0000 D4               		dc.b $F8, 5, 0,	0, $D4
0000D580 F805 003A E4               		dc.b $F8, 5, 0,	$3A, $E4
0000D585 F805 0026 04               		dc.b $F8, 5, 0,	$26, 4
0000D58A F801 0020 14               		dc.b $F8, 1, 0,	$20, $14
0000D58F F805 0018 1C               		dc.b $F8, 5, 0,	$18, $1C
0000D594 F805 001C 2C               		dc.b $F8, 5, 0,	$1C, $2C
0000D599 F805 0042 3C               		dc.b $F8, 5, 0,	$42, $3C
0000D59E 0A                         byte_CAA8:	dc.b $A			; SPRING YARD
0000D59F F805 003E AC               		dc.b $F8, 5, 0,	$3E, $AC
0000D5A4 F805 0036 BC               		dc.b $F8, 5, 0,	$36, $BC
0000D5A9 F805 003A CC               		dc.b $F8, 5, 0,	$3A, $CC
0000D5AE F801 0020 DC               		dc.b $F8, 1, 0,	$20, $DC
0000D5B3 F805 002E E4               		dc.b $F8, 5, 0,	$2E, $E4
0000D5B8 F805 0018 F4               		dc.b $F8, 5, 0,	$18, $F4
0000D5BD F805 004A 14               		dc.b $F8, 5, 0,	$4A, $14
0000D5C2 F805 0000 24               		dc.b $F8, 5, 0,	0, $24
0000D5C7 F805 003A 34               		dc.b $F8, 5, 0,	$3A, $34
0000D5CC F805 000C 44               		dc.b $F8, 5, 0,	$C, $44
0000D5D1 00                         		dc.b 0
0000D5D2 0A                         byte_CADC:	dc.b $A			; SCRAP BRAIN
0000D5D3 F805 003E AC               		dc.b $F8, 5, 0,	$3E, $AC
0000D5D8 F805 0008 BC               		dc.b $F8, 5, 0,	8, $BC
0000D5DD F805 003A CC               		dc.b $F8, 5, 0,	$3A, $CC
0000D5E2 F805 0000 DC               		dc.b $F8, 5, 0,	0, $DC
0000D5E7 F805 0036 EC               		dc.b $F8, 5, 0,	$36, $EC
0000D5EC F805 0004 0C               		dc.b $F8, 5, 0,	4, $C
0000D5F1 F805 003A 1C               		dc.b $F8, 5, 0,	$3A, $1C
0000D5F6 F805 0000 2C               		dc.b $F8, 5, 0,	0, $2C
0000D5FB F801 0020 3C               		dc.b $F8, 1, 0,	$20, $3C
0000D600 F805 002E 44               		dc.b $F8, 5, 0,	$2E, $44
0000D605 00                         		dc.b 0
0000D606 04                         byte_CB10:	dc.b 4			; ZONE
0000D607 F805 004E E0               		dc.b $F8, 5, 0,	$4E, $E0
0000D60C F805 0032 F0               		dc.b $F8, 5, 0,	$32, $F0
0000D611 F805 002E 00               		dc.b $F8, 5, 0,	$2E, 0
0000D616 F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000D61B 00                         		dc.b 0
0000D61C 02                         byte_CB26:	dc.b 2			; ACT 1
0000D61D 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000D622 F402 0057 0C               		dc.b $F4, 2, 0,	$57, $C
0000D627 02                         byte_CB31:	dc.b 2			; ACT 2
0000D628 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000D62D F406 005A 08               		dc.b $F4, 6, 0,	$5A, 8
0000D632 02                         byte_CB3C:	dc.b 2			; ACT 3
0000D633 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000D638 F406 0060 08               		dc.b $F4, 6, 0,	$60, 8
0000D63D 0D                         byte_CB47:	dc.b $D			; Oval
0000D63E E40C 0070 F4               		dc.b $E4, $C, 0, $70, $F4
0000D643 E402 0074 14               		dc.b $E4, 2, 0,	$74, $14
0000D648 EC04 0077 EC               		dc.b $EC, 4, 0,	$77, $EC
0000D64D F405 0079 E4               		dc.b $F4, 5, 0,	$79, $E4
0000D652 140C 1870 EC               		dc.b $14, $C, $18, $70,	$EC
0000D657 0402 1874 E4               		dc.b 4,	2, $18,	$74, $E4
0000D65C 0C04 1877 04               		dc.b $C, 4, $18, $77, 4
0000D661 FC05 1879 0C               		dc.b $FC, 5, $18, $79, $C
0000D666 EC08 007D FC               		dc.b $EC, 8, 0,	$7D, $FC
0000D66B F40C 007C F4               		dc.b $F4, $C, 0, $7C, $F4
0000D670 FC08 007C F4               		dc.b $FC, 8, 0,	$7C, $F4
0000D675 040C 007C EC               		dc.b 4,	$C, 0, $7C, $EC
0000D67A 0C08 007C EC               		dc.b $C, 8, 0, $7C, $EC
0000D67F 00                         		dc.b 0
0000D680 05                         byte_CB8A:	dc.b 5			; FINAL
0000D681 F805 0014 DC               		dc.b $F8, 5, 0,	$14, $DC
0000D686 F801 0020 EC               		dc.b $F8, 1, 0,	$20, $EC
0000D68B F805 002E F4               		dc.b $F8, 5, 0,	$2E, $F4
0000D690 F805 0000 04               		dc.b $F8, 5, 0,	0, 4
0000D695 F805 0026 14               		dc.b $F8, 5, 0,	$26, $14
0000D69A                            		even
0000D69A                            		even
0000D69A                            ; ---------------------------------------------------------------------------
0000D69A                            ; Sprite mappings - "GAME OVER"	and "TIME OVER"
0000D69A                            ; ---------------------------------------------------------------------------
0000D69A                            Map_obj39:
0000D69A                            	include "_maps\obj39.asm"
0000D69A                            ; ---------------------------------------------------------------------------
0000D69A                            ; Sprite mappings - "GAME OVER"	and "TIME OVER"
0000D69A                            ; ---------------------------------------------------------------------------
0000D69A 0000                       		dc.w byte_CBAC-Map_obj39
0000D69C 0000                       		dc.w byte_CBB7-Map_obj39
0000D69E 0000                       		dc.w byte_CBC2-Map_obj39
0000D6A0 0000                       		dc.w byte_CBCD-Map_obj39
0000D6A2 02                         byte_CBAC:	dc.b 2
0000D6A3 F80D 0000 B8               		dc.b $F8, $D, 0, 0, $B8
0000D6A8 F80D 0008 D8               		dc.b $F8, $D, 0, 8, $D8
0000D6AD 02                         byte_CBB7:	dc.b 2
0000D6AE F80D 0014 08               		dc.b $F8, $D, 0, $14, 8
0000D6B3 F80D 000C 28               		dc.b $F8, $D, 0, $C, $28
0000D6B8 02                         byte_CBC2:	dc.b 2
0000D6B9 F809 001C C4               		dc.b $F8, 9, 0,	$1C, $C4
0000D6BE F80D 0008 DC               		dc.b $F8, $D, 0, 8, $DC
0000D6C3 02                         byte_CBCD:	dc.b 2
0000D6C4 F80D 0014 0C               		dc.b $F8, $D, 0, $14, $C
0000D6C9 F80D 000C 2C               		dc.b $F8, $D, 0, $C, $2C
0000D6CE                            		even
0000D6CE                            		even
0000D6CE                            
0000D6CE                            ; ---------------------------------------------------------------------------
0000D6CE                            ; Sprite mappings - "SONIC HAS PASSED" title card
0000D6CE                            ; ---------------------------------------------------------------------------
0000D6CE 0000                       Map_obj3A:	dc.w byte_CBEA-Map_obj3A
0000D6D0 0000                       		dc.w byte_CC13-Map_obj3A
0000D6D2 0000                       		dc.w byte_CC32-Map_obj3A
0000D6D4 0000                       		dc.w byte_CC51-Map_obj3A
0000D6D6 0000                       		dc.w byte_CC75-Map_obj3A
0000D6D8 FF6F                       		dc.w byte_CB47-Map_obj3A
0000D6DA FF4E                       		dc.w byte_CB26-Map_obj3A
0000D6DC FF59                       		dc.w byte_CB31-Map_obj3A
0000D6DE FF64                       		dc.w byte_CB3C-Map_obj3A
0000D6E0 08                         byte_CBEA:	dc.b 8			; SONIC HAS
0000D6E1 F805 003E B8               		dc.b $F8, 5, 0,	$3E, $B8
0000D6E6 F805 0032 C8               		dc.b $F8, 5, 0,	$32, $C8
0000D6EB F805 002E D8               		dc.b $F8, 5, 0,	$2E, $D8
0000D6F0 F801 0020 E8               		dc.b $F8, 1, 0,	$20, $E8
0000D6F5 F805 0008 F0               		dc.b $F8, 5, 0,	8, $F0
0000D6FA F805 001C 10               		dc.b $F8, 5, 0,	$1C, $10
0000D6FF F805 0000 20               		dc.b $F8, 5, 0,	0, $20
0000D704 F805 003E 30               		dc.b $F8, 5, 0,	$3E, $30
0000D709 06                         byte_CC13:	dc.b 6			; PASSED
0000D70A F805 0036 D0               		dc.b $F8, 5, 0,	$36, $D0
0000D70F F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
0000D714 F805 003E F0               		dc.b $F8, 5, 0,	$3E, $F0
0000D719 F805 003E 00               		dc.b $F8, 5, 0,	$3E, 0
0000D71E F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000D723 F805 000C 20               		dc.b $F8, 5, 0,	$C, $20
0000D728 06                         byte_CC32:	dc.b 6			; SCORE
0000D729 F80D 014A B0               		dc.b $F8, $D, 1, $4A, $B0
0000D72E F801 0162 D0               		dc.b $F8, 1, 1,	$62, $D0
0000D733 F809 0164 18               		dc.b $F8, 9, 1,	$64, $18
0000D738 F80D 016A 30               		dc.b $F8, $D, 1, $6A, $30
0000D73D F704 006E CD               		dc.b $F7, 4, 0,	$6E, $CD
0000D742 FF04 186E CD               		dc.b $FF, 4, $18, $6E, $CD
0000D747 07                         byte_CC51:	dc.b 7			; TIME BONUS
0000D748 F80D 015A B0               		dc.b $F8, $D, 1, $5A, $B0
0000D74D F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000D752 F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000D757 F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000D75C FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000D761 F80D FFF0 28               		dc.b $F8, $D, $FF, $F0,	$28
0000D766 F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000D76B 07                         byte_CC75:	dc.b 7			; RING BONUS
0000D76C F80D 0152 B0               		dc.b $F8, $D, 1, $52, $B0
0000D771 F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000D776 F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000D77B F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000D780 FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000D785 F80D FFF8 28               		dc.b $F8, $D, $FF, $F8,	$28
0000D78A F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000D790 00                         		even
0000D790                            ; ---------------------------------------------------------------------------
0000D790                            ; Sprite mappings - special stage results screen
0000D790                            ; ---------------------------------------------------------------------------
0000D790 0000                       Map_obj7E:	dc.w byte_CCAC-Map_obj7E
0000D792 0000                       		dc.w byte_CCEE-Map_obj7E
0000D794 0000                       		dc.w byte_CD0D-Map_obj7E
0000D796 FEAD                       		dc.w byte_CB47-Map_obj7E
0000D798 0000                       		dc.w byte_CD31-Map_obj7E
0000D79A 0000                       		dc.w byte_CD46-Map_obj7E
0000D79C 0000                       		dc.w byte_CD5B-Map_obj7E
0000D79E 0000                       		dc.w byte_CD6B-Map_obj7E
0000D7A0 0000                       		dc.w byte_CDA8-Map_obj7E
0000D7A2 0D                         byte_CCAC:	dc.b $D			; "CHAOS EMERALDS"
0000D7A3 F805 0008 90               		dc.b $F8, 5, 0,	8, $90
0000D7A8 F805 001C A0               		dc.b $F8, 5, 0,	$1C, $A0
0000D7AD F805 0000 B0               		dc.b $F8, 5, 0,	0, $B0
0000D7B2 F805 0032 C0               		dc.b $F8, 5, 0,	$32, $C0
0000D7B7 F805 003E D0               		dc.b $F8, 5, 0,	$3E, $D0
0000D7BC F805 0010 F0               		dc.b $F8, 5, 0,	$10, $F0
0000D7C1 F805 002A 00               		dc.b $F8, 5, 0,	$2A, 0
0000D7C6 F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000D7CB F805 003A 20               		dc.b $F8, 5, 0,	$3A, $20
0000D7D0 F805 0000 30               		dc.b $F8, 5, 0,	0, $30
0000D7D5 F805 0026 40               		dc.b $F8, 5, 0,	$26, $40
0000D7DA F805 000C 50               		dc.b $F8, 5, 0,	$C, $50
0000D7DF F805 003E 60               		dc.b $F8, 5, 0,	$3E, $60
0000D7E4 06                         byte_CCEE:	dc.b 6			; "SCORE"
0000D7E5 F80D 014A B0               		dc.b $F8, $D, 1, $4A, $B0
0000D7EA F801 0162 D0               		dc.b $F8, 1, 1,	$62, $D0
0000D7EF F809 0164 18               		dc.b $F8, 9, 1,	$64, $18
0000D7F4 F80D 016A 30               		dc.b $F8, $D, 1, $6A, $30
0000D7F9 F704 006E CD               		dc.b $F7, 4, 0,	$6E, $CD
0000D7FE FF04 186E CD               		dc.b $FF, 4, $18, $6E, $CD
0000D803 07                         byte_CD0D:	dc.b 7
0000D804 F80D 0152 B0               		dc.b $F8, $D, 1, $52, $B0
0000D809 F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000D80E F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000D813 F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000D818 FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000D81D F80D FFF8 28               		dc.b $F8, $D, $FF, $F8,	$28
0000D822 F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000D827 04                         byte_CD31:	dc.b 4
0000D828 F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000D82D F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000D832 F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000D837 F806 1FE3 40               		dc.b $F8, 6, $1F, $E3, $40
0000D83C 04                         byte_CD46:	dc.b 4
0000D83D F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000D842 F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000D847 F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000D84C F806 1FE9 40               		dc.b $F8, 6, $1F, $E9, $40
0000D851 03                         byte_CD5B:	dc.b 3
0000D852 F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000D857 F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000D85C F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000D861 0C                         byte_CD6B:	dc.b $C			; "SPECIAL STAGE"
0000D862 F805 003E 9C               		dc.b $F8, 5, 0,	$3E, $9C
0000D867 F805 0036 AC               		dc.b $F8, 5, 0,	$36, $AC
0000D86C F805 0010 BC               		dc.b $F8, 5, 0,	$10, $BC
0000D871 F805 0008 CC               		dc.b $F8, 5, 0,	8, $CC
0000D876 F801 0020 DC               		dc.b $F8, 1, 0,	$20, $DC
0000D87B F805 0000 E4               		dc.b $F8, 5, 0,	0, $E4
0000D880 F805 0026 F4               		dc.b $F8, 5, 0,	$26, $F4
0000D885 F805 003E 14               		dc.b $F8, 5, 0,	$3E, $14
0000D88A F805 0042 24               		dc.b $F8, 5, 0,	$42, $24
0000D88F F805 0000 34               		dc.b $F8, 5, 0,	0, $34
0000D894 F805 0018 44               		dc.b $F8, 5, 0,	$18, $44
0000D899 F805 0010 54               		dc.b $F8, 5, 0,	$10, $54
0000D89E 0F                         byte_CDA8:	dc.b $F			; "SONIC GOT THEM ALL"
0000D89F F805 003E 88               		dc.b $F8, 5, 0,	$3E, $88
0000D8A4 F805 0032 98               		dc.b $F8, 5, 0,	$32, $98
0000D8A9 F805 002E A8               		dc.b $F8, 5, 0,	$2E, $A8
0000D8AE F801 0020 B8               		dc.b $F8, 1, 0,	$20, $B8
0000D8B3 F805 0008 C0               		dc.b $F8, 5, 0,	8, $C0
0000D8B8 F805 0018 D8               		dc.b $F8, 5, 0,	$18, $D8
0000D8BD F805 0032 E8               		dc.b $F8, 5, 0,	$32, $E8
0000D8C2 F805 0042 F8               		dc.b $F8, 5, 0,	$42, $F8
0000D8C7 F805 0042 10               		dc.b $F8, 5, 0,	$42, $10
0000D8CC F805 001C 20               		dc.b $F8, 5, 0,	$1C, $20
0000D8D1 F805 0010 30               		dc.b $F8, 5, 0,	$10, $30
0000D8D6 F805 002A 40               		dc.b $F8, 5, 0,	$2A, $40
0000D8DB F805 0000 58               		dc.b $F8, 5, 0,	0, $58
0000D8E0 F805 0026 68               		dc.b $F8, 5, 0,	$26, $68
0000D8E5 F805 0026 78               		dc.b $F8, 5, 0,	$26, $78
0000D8EA                            		even
0000D8EA                            ; ---------------------------------------------------------------------------
0000D8EA                            ; Sprite mappings - chaos emeralds from	the special stage results screen
0000D8EA                            ; ---------------------------------------------------------------------------
0000D8EA                            Map_obj7F:
0000D8EA                            	include "_maps\obj7F.asm"
0000D8EA                            ; ---------------------------------------------------------------------------
0000D8EA                            ; Sprite mappings - chaos emeralds from	the special stage results screen
0000D8EA                            ; ---------------------------------------------------------------------------
0000D8EA 0000                       		dc.w byte_CE02-Map_obj7F
0000D8EC 0000                       		dc.w byte_CE08-Map_obj7F
0000D8EE 0000                       		dc.w byte_CE0E-Map_obj7F
0000D8F0 0000                       		dc.w byte_CE14-Map_obj7F
0000D8F2 0000                       		dc.w byte_CE1A-Map_obj7F
0000D8F4 0000                       		dc.w byte_CE20-Map_obj7F
0000D8F6 0000                       		dc.w byte_CE26-Map_obj7F
0000D8F8 01                         byte_CE02:	dc.b 1
0000D8F9 F805 2004 F8               		dc.b $F8, 5, $20, 4, $F8
0000D8FE 01                         byte_CE08:	dc.b 1
0000D8FF F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000D904 01                         byte_CE0E:	dc.b 1
0000D905 F805 4004 F8               		dc.b $F8, 5, $40, 4, $F8
0000D90A 01                         byte_CE14:	dc.b 1
0000D90B F805 6004 F8               		dc.b $F8, 5, $60, 4, $F8
0000D910 01                         byte_CE1A:	dc.b 1
0000D911 F805 2008 F8               		dc.b $F8, 5, $20, 8, $F8
0000D916 01                         byte_CE20:	dc.b 1
0000D917 F805 200C F8               		dc.b $F8, 5, $20, $C, $F8
0000D91C 00                         byte_CE26:	dc.b 0			; Blank frame
0000D91E 00                         		even
0000D91E 00                         		even
0000D91E                            
0000D91E                            ; ===========================================================================
0000D91E                            ; ---------------------------------------------------------------------------
0000D91E                            ; Object 36 - spikes
0000D91E                            ; ---------------------------------------------------------------------------
0000D91E                            
0000D91E                            Obj36:					; XREF: Obj_Index
0000D91E 7000                       		moveq	#0,d0
0000D920 1028 0024                  		move.b	$24(a0),d0
0000D924 323B 0000                  		move.w	Obj36_Index(pc,d0.w),d1
0000D928 4EFB 1000                  		jmp	Obj36_Index(pc,d1.w)
0000D92C                            ; ===========================================================================
0000D92C 0000                       Obj36_Index:	dc.w Obj36_Main-Obj36_Index
0000D92E 0000                       		dc.w Obj36_Solid-Obj36_Index
0000D930                            
0000D930 0014                       Obj36_Var:	dc.b 0,	$14		; frame	number,	object width
0000D932 0110                       		dc.b 1,	$10
0000D934 0204                       		dc.b 2,	4
0000D936 031C                       		dc.b 3,	$1C
0000D938 0440                       		dc.b 4,	$40
0000D93A 0510                       		dc.b 5,	$10
0000D93C                            ; ===========================================================================
0000D93C                            
0000D93C                            Obj36_Main:				; XREF: Obj36_Index
0000D93C 5428 0024                  		addq.b	#2,$24(a0)
0000D940 217C 0000 0000 0004        		move.l	#Map_obj36,4(a0)
0000D948 317C 051B 0002             		move.w	#$51B,2(a0)
0000D94E 0028 0004 0001             		ori.b	#4,1(a0)
0000D954 117C 0004 0018             		move.b	#4,$18(a0)
0000D95A 1028 0028                  		move.b	$28(a0),d0
0000D95E 0228 000F 0028             		andi.b	#$F,$28(a0)
0000D964 0240 00F0                  		andi.w	#$F0,d0
0000D968 43F9 0000 D930             		lea	(Obj36_Var).l,a1
0000D96E E648                       		lsr.w	#3,d0
0000D970 D2C0                       		adda.w	d0,a1
0000D972 1159 001A                  		move.b	(a1)+,$1A(a0)
0000D976 1159 0019                  		move.b	(a1)+,$19(a0)
0000D97A 3168 0008 0030             		move.w	8(a0),$30(a0)
0000D980 3168 000C 0032             		move.w	$C(a0),$32(a0)
0000D986                            
0000D986                            Obj36_Solid:				; XREF: Obj36_Index
0000D986 6100 0000                  		bsr.w	Obj36_Type0x	; make the object move
0000D98A 343C 0004                  		move.w	#4,d2
0000D98E 0C28 0005 001A             		cmpi.b	#5,$1A(a0)	; is object type $5x ?
0000D994 6700                       		beq.s	Obj36_SideWays	; if yes, branch
0000D996 0C28 0001 001A             		cmpi.b	#1,$1A(a0)	; is object type $1x ?
0000D99C 6600                       		bne.s	Obj36_Upright	; if not, branch
0000D99E 343C 0014                  		move.w	#$14,d2
0000D9A2                            
0000D9A2                            ; Spikes types $1x and $5x face	sideways
0000D9A2                            
0000D9A2                            Obj36_SideWays:				; XREF: Obj36_Solid
0000D9A2 323C 001B                  		move.w	#$1B,d1
0000D9A6 3602                       		move.w	d2,d3
0000D9A8 5243                       		addq.w	#1,d3
0000D9AA 3828 0008                  		move.w	8(a0),d4
0000D9AE 6100 0000                  		bsr.w	SolidObject
0000D9B2 0828 0003 0022             		btst	#3,$22(a0)
0000D9B8 6600                       		bne.s	Obj36_Display
0000D9BA 0C44 0001                  		cmpi.w	#1,d4
0000D9BE 6700                       		beq.s	Obj36_Hurt
0000D9C0 6000                       		bra.s	Obj36_Display
0000D9C2                            ; ===========================================================================
0000D9C2                            
0000D9C2                            ; Spikes types $0x, $2x, $3x and $4x face up or	down
0000D9C2                            
0000D9C2                            Obj36_Upright:				; XREF: Obj36_Solid
0000D9C2 7200                       		moveq	#0,d1
0000D9C4 1228 0019                  		move.b	$19(a0),d1
0000D9C8 0641 000B                  		addi.w	#$B,d1
0000D9CC 343C 0010                  		move.w	#$10,d2
0000D9D0 363C 0011                  		move.w	#$11,d3
0000D9D4 3828 0008                  		move.w	8(a0),d4
0000D9D8 6100 0000                  		bsr.w	SolidObject
0000D9DC 0828 0003 0022             		btst	#3,$22(a0)
0000D9E2 6600                       		bne.s	Obj36_Hurt
0000D9E4 4A44                       		tst.w	d4
0000D9E6 6A00                       		bpl.s	Obj36_Display
0000D9E8                            
0000D9E8                            Obj36_Hurt:				; XREF: Obj36_SideWays; Obj36_Upright
0000D9E8 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0000D9EC 6600                       		bne.s	Obj36_Display	; if yes, branch
0000D9EE 4A78 D030                  		tst.w	($FFFFD030).w	; +++ is Sonic invulnerable?
0000D9F2 6600                       		bne.s	Obj36_Display	; +++ if yes, branch
0000D9F4 2F08                       		move.l	a0,-(sp)
0000D9F6 2448                       		movea.l	a0,a2
0000D9F8 41F8 D000                  		lea	($FFFFD000).w,a0
0000D9FC 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0000DA02 6400                       		bcc.s	loc_CF20
0000DA04 2628 000C                  		move.l	$C(a0),d3
0000DA08 3028 0012                  		move.w	$12(a0),d0
0000DA0C 48C0                       		ext.l	d0
0000DA0E E180                       		asl.l	#8,d0
0000DA10 9680                       		sub.l	d0,d3
0000DA12 2143 000C                  		move.l	d3,$C(a0)
0000DA16 4EB9 0000 0000             		jsr	HurtSonic
0000DA1C                            
0000DA1C                            loc_CF20:
0000DA1C 205F                       		movea.l	(sp)+,a0
0000DA1E                            
0000DA1E                            Obj36_Display:
0000DA1E 6100 0000                  		bsr.w	DisplaySprite
0000DA22 3028 0030                  		move.w	$30(a0),d0
0000DA26 0240 FF80                  		andi.w	#$FF80,d0
0000DA2A 3238 F700                  		move.w	($FFFFF700).w,d1
0000DA2E 0441 0080                  		subi.w	#$80,d1
0000DA32 0241 FF80                  		andi.w	#$FF80,d1
0000DA36 9041                       		sub.w	d1,d0
0000DA38 0C40 0280                  		cmpi.w	#$280,d0
0000DA3C 6200 0000                  		bhi.w	DeleteObject
0000DA40 4E75                       		rts	
0000DA42                            ; ===========================================================================
0000DA42                            
0000DA42                            Obj36_Type0x:				; XREF: Obj36_Solid
0000DA42 7000                       		moveq	#0,d0
0000DA44 1028 0028                  		move.b	$28(a0),d0
0000DA48 D040                       		add.w	d0,d0
0000DA4A 323B 0000                  		move.w	Obj36_TypeIndex(pc,d0.w),d1
0000DA4E 4EFB 1000                  		jmp	Obj36_TypeIndex(pc,d1.w)
0000DA52                            ; ===========================================================================
0000DA52 0000                       Obj36_TypeIndex:dc.w Obj36_Type00-Obj36_TypeIndex
0000DA54 0000                       		dc.w Obj36_Type01-Obj36_TypeIndex
0000DA56 0000                       		dc.w Obj36_Type02-Obj36_TypeIndex
0000DA58                            ; ===========================================================================
0000DA58                            
0000DA58                            Obj36_Type00:				; XREF: Obj36_TypeIndex
0000DA58 4E75                       		rts			; don't move the object
0000DA5A                            ; ===========================================================================
0000DA5A                            
0000DA5A                            Obj36_Type01:				; XREF: Obj36_TypeIndex
0000DA5A 6100 0000                  		bsr.w	Obj36_Wait
0000DA5E 7000                       		moveq	#0,d0
0000DA60 1028 0034                  		move.b	$34(a0),d0
0000DA64 D068 0032                  		add.w	$32(a0),d0
0000DA68 3140 000C                  		move.w	d0,$C(a0)	; move the object vertically
0000DA6C 4E75                       		rts	
0000DA6E                            ; ===========================================================================
0000DA6E                            
0000DA6E                            Obj36_Type02:				; XREF: Obj36_TypeIndex
0000DA6E 6100 0000                  		bsr.w	Obj36_Wait
0000DA72 7000                       		moveq	#0,d0
0000DA74 1028 0034                  		move.b	$34(a0),d0
0000DA78 D068 0030                  		add.w	$30(a0),d0
0000DA7C 3140 0008                  		move.w	d0,8(a0)	; move the object horizontally
0000DA80 4E75                       		rts	
0000DA82                            ; ===========================================================================
0000DA82                            
0000DA82                            Obj36_Wait:
0000DA82 4A68 0038                  		tst.w	$38(a0)		; is time delay	= zero?
0000DA86 6700                       		beq.s	loc_CFA4	; if yes, branch
0000DA88 5368 0038                  		subq.w	#1,$38(a0)	; subtract 1 from time delay
0000DA8C 6600                       		bne.s	locret_CFE6
0000DA8E 4A28 0001                  		tst.b	1(a0)
0000DA92 6A00                       		bpl.s	locret_CFE6
0000DA94 303C 00B6                  		move.w	#$B6,d0
0000DA98 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play "spikes moving" sound
0000DA9E 6000                       		bra.s	locret_CFE6
0000DAA0                            ; ===========================================================================
0000DAA0                            
0000DAA0                            loc_CFA4:
0000DAA0 4A68 0036                  		tst.w	$36(a0)
0000DAA4 6700                       		beq.s	loc_CFC6
0000DAA6 0468 0800 0034             		subi.w	#$800,$34(a0)
0000DAAC 6400                       		bcc.s	locret_CFE6
0000DAAE 317C 0000 0034             		move.w	#0,$34(a0)
0000DAB4 317C 0000 0036             		move.w	#0,$36(a0)
0000DABA 317C 003C 0038             		move.w	#60,$38(a0)	; set time delay to 1 second
0000DAC0 6000                       		bra.s	locret_CFE6
0000DAC2                            ; ===========================================================================
0000DAC2                            
0000DAC2                            loc_CFC6:
0000DAC2 0668 0800 0034             		addi.w	#$800,$34(a0)
0000DAC8 0C68 2000 0034             		cmpi.w	#$2000,$34(a0)
0000DACE 6500                       		bcs.s	locret_CFE6
0000DAD0 317C 2000 0034             		move.w	#$2000,$34(a0)
0000DAD6 317C 0001 0036             		move.w	#1,$36(a0)
0000DADC 317C 003C 0038             		move.w	#60,$38(a0)	; set time delay to 1 second
0000DAE2                            
0000DAE2                            locret_CFE6:
0000DAE2 4E75                       		rts	
0000DAE4                            ; ===========================================================================
0000DAE4                            ; ---------------------------------------------------------------------------
0000DAE4                            ; Sprite mappings - spikes
0000DAE4                            ; ---------------------------------------------------------------------------
0000DAE4                            Map_obj36:
0000DAE4                            	include "_maps\obj36.asm"
0000DAE4                            ; ---------------------------------------------------------------------------
0000DAE4                            ; Sprite mappings - spikes
0000DAE4                            ; ---------------------------------------------------------------------------
0000DAE4 0000                       		dc.w byte_CFF4-Map_obj36
0000DAE6 0000                       		dc.w byte_D004-Map_obj36
0000DAE8 0000                       		dc.w byte_D014-Map_obj36
0000DAEA 0000                       		dc.w byte_D01A-Map_obj36
0000DAEC 0000                       		dc.w byte_D02A-Map_obj36
0000DAEE 0000                       		dc.w byte_D049-Map_obj36
0000DAF0 03                         byte_CFF4:	dc.b 3			; 3 spikes
0000DAF1 F003 0004 EC               		dc.b $F0, 3, 0,	4, $EC
0000DAF6 F003 0004 FC               		dc.b $F0, 3, 0,	4, $FC
0000DAFB F003 0004 0C               		dc.b $F0, 3, 0,	4, $C
0000DB00 03                         byte_D004:	dc.b 3			; 3 spikes facing sideways
0000DB01 EC0C 0000 F0               		dc.b $EC, $C, 0, 0, $F0
0000DB06 FC0C 0000 F0               		dc.b $FC, $C, 0, 0, $F0
0000DB0B 0C0C 0000 F0               		dc.b $C, $C, 0,	0, $F0
0000DB10 01                         byte_D014:	dc.b 1			; 1 spike
0000DB11 F003 0004 FC               		dc.b $F0, 3, 0,	4, $FC
0000DB16 03                         byte_D01A:	dc.b 3			; 3 spikes widely spaced
0000DB17 F003 0004 E4               		dc.b $F0, 3, 0,	4, $E4
0000DB1C F003 0004 FC               		dc.b $F0, 3, 0,	4, $FC
0000DB21 F003 0004 14               		dc.b $F0, 3, 0,	4, $14
0000DB26 06                         byte_D02A:	dc.b 6			; 6 spikes
0000DB27 F003 0004 C0               		dc.b $F0, 3, 0,	4, $C0
0000DB2C F003 0004 D8               		dc.b $F0, 3, 0,	4, $D8
0000DB31 F003 0004 F0               		dc.b $F0, 3, 0,	4, $F0
0000DB36 F003 0004 08               		dc.b $F0, 3, 0,	4, 8
0000DB3B F003 0004 20               		dc.b $F0, 3, 0,	4, $20
0000DB40 F003 0004 38               		dc.b $F0, 3, 0,	4, $38
0000DB45 01                         byte_D049:	dc.b 1			; 1 spike facing sideways
0000DB46 FC0C 0000 F0               		dc.b $FC, $C, 0, 0, $F0
0000DB4C 00                         		even
0000DB4C 00                         		even
0000DB4C                            
0000DB4C                            ; ===========================================================================
0000DB4C                            ; ---------------------------------------------------------------------------
0000DB4C                            ; Object 3B - purple rock (GHZ)
0000DB4C                            ; ---------------------------------------------------------------------------
0000DB4C                            
0000DB4C                            Obj3B:					; XREF: Obj_Index
0000DB4C 7000                       		moveq	#0,d0
0000DB4E 1028 0024                  		move.b	$24(a0),d0
0000DB52 323B 0000                  		move.w	Obj3B_Index(pc,d0.w),d1
0000DB56 4EFB 1000                  		jmp	Obj3B_Index(pc,d1.w)
0000DB5A                            ; ===========================================================================
0000DB5A 0000                       Obj3B_Index:	dc.w Obj3B_Main-Obj3B_Index
0000DB5C 0000                       		dc.w Obj3B_Solid-Obj3B_Index
0000DB5E                            ; ===========================================================================
0000DB5E                            
0000DB5E                            Obj3B_Main:				; XREF: Obj3B_Index
0000DB5E 5428 0024                  		addq.b	#2,$24(a0)
0000DB62 217C 0000 0000 0004        		move.l	#Map_obj3B,4(a0)
0000DB6A 317C 63D0 0002             		move.w	#$63D0,2(a0)
0000DB70 117C 0004 0001             		move.b	#4,1(a0)
0000DB76 117C 0013 0019             		move.b	#$13,$19(a0)
0000DB7C 117C 0004 0018             		move.b	#4,$18(a0)
0000DB82                            
0000DB82                            Obj3B_Solid:				; XREF: Obj3B_Index
0000DB82 323C 001B                  		move.w	#$1B,d1
0000DB86 343C 0010                  		move.w	#$10,d2
0000DB8A 363C 0010                  		move.w	#$10,d3
0000DB8E 3828 0008                  		move.w	8(a0),d4
0000DB92 6100 0000                  		bsr.w	SolidObject
0000DB96 6100 0000                  		bsr.w	DisplaySprite
0000DB9A 3028 0008                  		move.w	8(a0),d0
0000DB9E 0240 FF80                  		andi.w	#$FF80,d0
0000DBA2 3238 F700                  		move.w	($FFFFF700).w,d1
0000DBA6 0441 0080                  		subi.w	#$80,d1
0000DBAA 0241 FF80                  		andi.w	#$FF80,d1
0000DBAE 9041                       		sub.w	d1,d0
0000DBB0 0C40 0280                  		cmpi.w	#$280,d0
0000DBB4 6200 0000                  		bhi.w	DeleteObject
0000DBB8 4E75                       		rts
0000DBBA                            ; ===========================================================================
0000DBBA                            ; ---------------------------------------------------------------------------
0000DBBA                            ; Object 49 - waterfall	sound effect (GHZ)
0000DBBA                            ; ---------------------------------------------------------------------------
0000DBBA                            
0000DBBA                            Obj49:					; XREF: Obj_Index
0000DBBA 7000                       		moveq	#0,d0
0000DBBC 1028 0024                  		move.b	$24(a0),d0
0000DBC0 323B 0000                  		move.w	Obj49_Index(pc,d0.w),d1
0000DBC4 4EFB 1000                  		jmp	Obj49_Index(pc,d1.w)
0000DBC8                            ; ===========================================================================
0000DBC8 0000                       Obj49_Index:	dc.w Obj49_Main-Obj49_Index
0000DBCA 0000                       		dc.w Obj49_PlaySnd-Obj49_Index
0000DBCC                            ; ===========================================================================
0000DBCC                            
0000DBCC                            Obj49_Main:				; XREF: Obj49_Index
0000DBCC 5428 0024                  		addq.b	#2,$24(a0)
0000DBD0 117C 0004 0001             		move.b	#4,1(a0)
0000DBD6                            
0000DBD6                            Obj49_PlaySnd:				; XREF: Obj49_Index
0000DBD6 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000DBDA 0200 003F                  		andi.b	#$3F,d0
0000DBDE 6600                       		bne.s	Obj49_ChkDel
0000DBE0 303C 00D0                  		move.w	#$D0,d0
0000DBE4 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play waterfall sound
0000DBEA                            
0000DBEA                            Obj49_ChkDel:
0000DBEA 3028 0008                  		move.w	8(a0),d0
0000DBEE 0240 FF80                  		andi.w	#$FF80,d0
0000DBF2 3238 F700                  		move.w	($FFFFF700).w,d1
0000DBF6 0441 0080                  		subi.w	#$80,d1
0000DBFA 0241 FF80                  		andi.w	#$FF80,d1
0000DBFE 9041                       		sub.w	d1,d0
0000DC00 0C40 0280                  		cmpi.w	#$280,d0
0000DC04 6200 0000                  		bhi.w	DeleteObject
0000DC08 4E75                       		rts	
0000DC0A                            ; ===========================================================================
0000DC0A                            ; ---------------------------------------------------------------------------
0000DC0A                            ; Sprite mappings - purple rock	(GHZ)
0000DC0A                            ; ---------------------------------------------------------------------------
0000DC0A                            Map_obj3B:
0000DC0A                            	include "_maps\obj3B.asm"
0000DC0A                            ; ---------------------------------------------------------------------------
0000DC0A                            ; Sprite mappings - purple rock	(GHZ)
0000DC0A                            ; ---------------------------------------------------------------------------
0000DC0A 0000                       		dc.w byte_D110-Map_obj3B
0000DC0C 02                         byte_D110:	dc.b 2
0000DC0D F00B 0000 E8               		dc.b $F0, $B, 0, 0, $E8
0000DC12 F00B 000C 00               		dc.b $F0, $B, 0, $C, 0
0000DC18 00                         		even
0000DC18 00                         		even
0000DC18                            
0000DC18                            ; ===========================================================================
0000DC18                            ; ---------------------------------------------------------------------------
0000DC18                            ; Object 3C - smashable	wall (GHZ, SLZ)
0000DC18                            ; ---------------------------------------------------------------------------
0000DC18                            
0000DC18                            Obj3C:					; XREF: Obj_Index
0000DC18 7000                       		moveq	#0,d0
0000DC1A 1028 0024                  		move.b	$24(a0),d0
0000DC1E 323B 0000                  		move.w	Obj3C_Index(pc,d0.w),d1
0000DC22 4EBB 1000                  		jsr	Obj3C_Index(pc,d1.w)
0000DC26 6000 0000                  		bra.w	MarkObjGone
0000DC2A                            ; ===========================================================================
0000DC2A 0000                       Obj3C_Index:	dc.w Obj3C_Main-Obj3C_Index
0000DC2C 0000                       		dc.w Obj3C_Solid-Obj3C_Index
0000DC2E 0000                       		dc.w Obj3C_FragMove-Obj3C_Index
0000DC30                            ; ===========================================================================
0000DC30                            
0000DC30                            Obj3C_Main:				; XREF: Obj3C_Index
0000DC30 5428 0024                  		addq.b	#2,$24(a0)
0000DC34 217C 0000 0000 0004        		move.l	#Map_obj3C,4(a0)
0000DC3C 317C 450F 0002             		move.w	#$450F,2(a0)
0000DC42 117C 0004 0001             		move.b	#4,1(a0)
0000DC48 117C 0010 0019             		move.b	#$10,$19(a0)
0000DC4E 117C 0004 0018             		move.b	#4,$18(a0)
0000DC54 1168 0028 001A             		move.b	$28(a0),$1A(a0)
0000DC5A                            
0000DC5A                            Obj3C_Solid:				; XREF: Obj3C_Index
0000DC5A 3178 D010 0030             		move.w	($FFFFD010).w,$30(a0) ;	load Sonic's horizontal speed
0000DC60 323C 001B                  		move.w	#$1B,d1
0000DC64 343C 0020                  		move.w	#$20,d2
0000DC68 363C 0020                  		move.w	#$20,d3
0000DC6C 3828 0008                  		move.w	8(a0),d4
0000DC70 6100 0000                  		bsr.w	SolidObject
0000DC74 0828 0005 0022             		btst	#5,$22(a0)
0000DC7A 6600                       		bne.s	Obj3C_ChkRoll
0000DC7C                            
0000DC7C                            locret_D180:
0000DC7C 4E75                       		rts
0000DC7E                            ; ===========================================================================
0000DC7E                            
0000DC7E                            Obj3C_ChkRoll:				; XREF: Obj3C_Solid
0000DC7E 4A38 FE19                                  tst.b   (Super_Sonic_flag).w
0000DC82 6600                                       bne.s   ObjBreakeAnyways
0000DC84 0C29 0002 001C             		cmpi.b	#2,$1C(a1)	; is Sonic rolling?
0000DC8A 66F0                       		bne.s	locret_D180	; if not, branch
0000DC8C 3028 0030                  		move.w	$30(a0),d0
0000DC90 6A00                       		bpl.s	Obj3C_ChkSpeed
0000DC92 4440                       		neg.w	d0
0000DC94                            
0000DC94                            Obj3C_ChkSpeed:
0000DC94 0C40 0480                  		cmpi.w	#$480,d0	; is Sonic's speed $480 or higher?
0000DC98 65E2                       		bcs.s	locret_D180	; if not, branch
0000DC9A                            ObjBreakeAnyways:		
0000DC9A 3368 0030 0010             		move.w	$30(a0),$10(a1)
0000DCA0 5869 0008                  		addq.w	#4,8(a1)
0000DCA4 49F9 0000 0000             		lea	(Obj3C_FragSpd1).l,a4 ;	use fragments that move	right
0000DCAA 3028 0008                  		move.w	8(a0),d0
0000DCAE B069 0008                  		cmp.w	8(a1),d0	; is Sonic to the right	of the block?
0000DCB2 6500                       		bcs.s	Obj3C_Smash	; if yes, branch
0000DCB4 5169 0008                  		subq.w	#8,8(a1)
0000DCB8 49F9 0000 0000             		lea	(Obj3C_FragSpd2).l,a4 ;	use fragments that move	left
0000DCBE                            
0000DCBE                            Obj3C_Smash:
0000DCBE 3369 0010 0014             		move.w	$10(a1),$14(a1)
0000DCC4 08A8 0005 0022             		bclr	#5,$22(a0)
0000DCCA 08A9 0005 0022             		bclr	#5,$22(a1)
0000DCD0 7207                       		moveq	#7,d1		; load 8 fragments
0000DCD2 343C 0070                  		move.w	#$70,d2
0000DCD6 6100                       		bsr.s	SmashObject
0000DCD8                            
0000DCD8                            Obj3C_FragMove:				; XREF: Obj3C_Index
0000DCD8 6100 0000                  		bsr.w	SpeedToPos
0000DCDC 0668 0070 0012             		addi.w	#$70,$12(a0)	; make fragment	fall faster
0000DCE2 6100 0000                  		bsr.w	DisplaySprite
0000DCE6 4A28 0001                  		tst.b	1(a0)
0000DCEA 6A00 0000                  		bpl.w	DeleteObject
0000DCEE 4E75                       		rts
0000DCF0                            
0000DCF0                            ; ---------------------------------------------------------------------------
0000DCF0                            ; Subroutine to	smash a	block (GHZ walls and MZ	blocks)
0000DCF0                            ; ---------------------------------------------------------------------------
0000DCF0                            
0000DCF0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DCF0                            
0000DCF0                            
0000DCF0                            SmashObject:				; XREF: Obj3C_Smash
0000DCF0 7000                       		moveq	#0,d0
0000DCF2 1028 001A                  		move.b	$1A(a0),d0
0000DCF6 D040                       		add.w	d0,d0
0000DCF8 2668 0004                  		movea.l	4(a0),a3
0000DCFC D6F3 0000                  		adda.w	(a3,d0.w),a3
0000DD00 524B                       		addq.w	#1,a3
0000DD02 08E8 0005 0001             		bset	#5,1(a0)
0000DD08 1810                       		move.b	0(a0),d4
0000DD0A 1A28 0001                  		move.b	1(a0),d5
0000DD0E 2248                       		movea.l	a0,a1
0000DD10 6000                       		bra.s	Smash_LoadFrag
0000DD12                            ; ===========================================================================
0000DD12                            
0000DD12                            Smash_Loop:
0000DD12 6100 0000                  		bsr.w	SingleObjLoad
0000DD16 6600                       		bne.s	Smash_PlaySnd
0000DD18 5A4B                       		addq.w	#5,a3
0000DD1A                            
0000DD1A                            Smash_LoadFrag:				; XREF: SmashObject
0000DD1A 137C 0004 0024             		move.b	#4,$24(a1)
0000DD20 1284                       		move.b	d4,0(a1)
0000DD22 234B 0004                  		move.l	a3,4(a1)
0000DD26 1345 0001                  		move.b	d5,1(a1)
0000DD2A 3368 0008 0008             		move.w	8(a0),8(a1)
0000DD30 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000DD36 3368 0002 0002             		move.w	2(a0),2(a1)
0000DD3C 1368 0018 0018             		move.b	$18(a0),$18(a1)
0000DD42 1368 0019 0019             		move.b	$19(a0),$19(a1)
0000DD48 335C 0010                  		move.w	(a4)+,$10(a1)
0000DD4C 335C 0012                  		move.w	(a4)+,$12(a1)
0000DD50 B3C8                       		cmpa.l	a0,a1
0000DD52 6400                       		bcc.s	loc_D268
0000DD54 2F08                       		move.l	a0,-(sp)
0000DD56 2049                       		movea.l	a1,a0
0000DD58 6100 0000                  		bsr.w	SpeedToPos
0000DD5C D568 0012                  		add.w	d2,$12(a0)
0000DD60 205F                       		movea.l	(sp)+,a0
0000DD62 6100 0000                  		bsr.w	DisplaySprite2
0000DD66                            
0000DD66                            loc_D268:
0000DD66 51C9 FFAA                  		dbf	d1,Smash_Loop
0000DD6A                            
0000DD6A                            Smash_PlaySnd:
0000DD6A 303C 00CB                  		move.w	#$CB,d0
0000DD6E 4EF9 0000 1476             		jmp	(PlaySound_Special).l ;	play smashing sound
0000DD74                            ; End of function SmashObject
0000DD74                            
0000DD74                            ; ===========================================================================
0000DD74                            ; Smashed block	fragment speeds
0000DD74                            ;
0000DD74 0400 FB00                  Obj3C_FragSpd1:	dc.w $400, $FB00	; x-move speed,	y-move speed
0000DD78 0600 FF00                  		dc.w $600, $FF00
0000DD7C 0600 0100                  		dc.w $600, $100
0000DD80 0400 0500                  		dc.w $400, $500
0000DD84 0600 FA00                  		dc.w $600, $FA00
0000DD88 0800 FE00                  		dc.w $800, $FE00
0000DD8C 0800 0200                  		dc.w $800, $200
0000DD90 0600 0600                  		dc.w $600, $600
0000DD94                            
0000DD94 FA00 FA00                  Obj3C_FragSpd2:	dc.w $FA00, $FA00
0000DD98 F800 FE00                  		dc.w $F800, $FE00
0000DD9C F800 0200                  		dc.w $F800, $200
0000DDA0 FA00 0600                  		dc.w $FA00, $600
0000DDA4 FC00 FB00                  		dc.w $FC00, $FB00
0000DDA8 FA00 FF00                  		dc.w $FA00, $FF00
0000DDAC FA00 0100                  		dc.w $FA00, $100
0000DDB0 FC00 0500                  		dc.w $FC00, $500
0000DDB4                            ; ---------------------------------------------------------------------------
0000DDB4                            ; Sprite mappings - smashable walls (GHZ, SLZ)
0000DDB4                            ; ---------------------------------------------------------------------------
0000DDB4                            Map_obj3C:
0000DDB4                            	include "_maps\obj3C.asm"
0000DDB4                            ; ---------------------------------------------------------------------------
0000DDB4                            ; Sprite mappings - smashable walls (GHZ, SLZ)
0000DDB4                            ; ---------------------------------------------------------------------------
0000DDB4 0000                       		dc.w byte_D2BC-Map_obj3C
0000DDB6 0000                       		dc.w byte_D2E5-Map_obj3C
0000DDB8 0000                       		dc.w byte_D30E-Map_obj3C
0000DDBA 08                         byte_D2BC:	dc.b 8
0000DDBB E005 0000 F0               		dc.b $E0, 5, 0,	0, $F0
0000DDC0 F005 0000 F0               		dc.b $F0, 5, 0,	0, $F0
0000DDC5 0005 0000 F0               		dc.b 0,	5, 0, 0, $F0
0000DDCA 1005 0000 F0               		dc.b $10, 5, 0,	0, $F0
0000DDCF E005 0004 00               		dc.b $E0, 5, 0,	4, 0
0000DDD4 F005 0004 00               		dc.b $F0, 5, 0,	4, 0
0000DDD9 0005 0004 00               		dc.b 0,	5, 0, 4, 0
0000DDDE 1005 0004 00               		dc.b $10, 5, 0,	4, 0
0000DDE3 08                         byte_D2E5:	dc.b 8
0000DDE4 E005 0004 F0               		dc.b $E0, 5, 0,	4, $F0
0000DDE9 F005 0004 F0               		dc.b $F0, 5, 0,	4, $F0
0000DDEE 0005 0004 F0               		dc.b 0,	5, 0, 4, $F0
0000DDF3 1005 0004 F0               		dc.b $10, 5, 0,	4, $F0
0000DDF8 E005 0004 00               		dc.b $E0, 5, 0,	4, 0
0000DDFD F005 0004 00               		dc.b $F0, 5, 0,	4, 0
0000DE02 0005 0004 00               		dc.b 0,	5, 0, 4, 0
0000DE07 1005 0004 00               		dc.b $10, 5, 0,	4, 0
0000DE0C 08                         byte_D30E:	dc.b 8
0000DE0D E005 0004 F0               		dc.b $E0, 5, 0,	4, $F0
0000DE12 F005 0004 F0               		dc.b $F0, 5, 0,	4, $F0
0000DE17 0005 0004 F0               		dc.b 0,	5, 0, 4, $F0
0000DE1C 1005 0004 F0               		dc.b $10, 5, 0,	4, $F0
0000DE21 E005 0008 00               		dc.b $E0, 5, 0,	8, 0
0000DE26 F005 0008 00               		dc.b $F0, 5, 0,	8, 0
0000DE2B 0005 0008 00               		dc.b 0,	5, 0, 8, 0
0000DE30 1005 0008 00               		dc.b $10, 5, 0,	8, 0
0000DE36 00                         		even
0000DE36 00                         		even
0000DE36                            
0000DE36                            ; ---------------------------------------------------------------------------
0000DE36                            ; Object code loading subroutine
0000DE36                            ; ---------------------------------------------------------------------------
0000DE36                            
0000DE36                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DE36                            
0000DE36                            
0000DE36                            ObjectsLoad:				; XREF: TitleScreen; et al
0000DE36 41F8 D000                  		lea	($FFFFD000).w,a0 ; set address for object RAM
0000DE3A 7E7F                       		moveq	#$7F,d7
0000DE3C 7000                       		moveq	#0,d0
0000DE3E 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000DE44 6400                       		bcc.s	loc_D362
0000DE46                            
0000DE46                            loc_D348:
0000DE46 1010                       		move.b	(a0),d0		; load object number from RAM
0000DE48 6700                       		beq.s	loc_D358
0000DE4A D040                       		add.w	d0,d0
0000DE4C D040                       		add.w	d0,d0
0000DE4E 227B 0000                  		movea.l	Obj_Index-4(pc,d0.w),a1
0000DE52 4E91                       		jsr	(a1)		; run the object's code
0000DE54 7000                       		moveq	#0,d0
0000DE56                            
0000DE56                            loc_D358:
0000DE56 41E8 0040                  		lea	$40(a0),a0	; next object
0000DE5A 51CF FFEA                  		dbf	d7,loc_D348
0000DE5E 4E75                       		rts	
0000DE60                            ; ===========================================================================
0000DE60                            
0000DE60                            loc_D362:
0000DE60 0C38 000A D024             		cmpi.b	#$A,($FFFFD000+$24).w	; Has Sonic drowned?
0000DE66 67DE                       		beq.s	loc_D348				; If so, run objects a little longer
0000DE68 7E1F                       		moveq	#$1F,d7
0000DE6A 61DA                       		bsr.s	loc_D348
0000DE6C 7E5F                       		moveq	#$5F,d7
0000DE6E                            
0000DE6E                            loc_D368:
0000DE6E 7000                       		moveq	#0,d0
0000DE70 1010                       		move.b	(a0),d0
0000DE72 6700                       		beq.s	loc_D378
0000DE74 4A28 0001                  		tst.b	1(a0)
0000DE78 6A00                       		bpl.s	loc_D378
0000DE7A 6100 0000                  		bsr.w	DisplaySprite
0000DE7E                            
0000DE7E                            loc_D378:
0000DE7E 41E8 0040                  		lea	$40(a0),a0
0000DE82                            
0000DE82                            loc_D37C:
0000DE82 51CF FFEA                  		dbf	d7,loc_D368
0000DE86 4E75                       		rts	
0000DE88                            ; End of function ObjectsLoad
0000DE88                            
0000DE88                            ; ===========================================================================
0000DE88                            ; ---------------------------------------------------------------------------
0000DE88                            ; Object pointers
0000DE88                            ; ---------------------------------------------------------------------------
0000DE88                            Obj_Index:
0000DE88                            	include "_inc\Object pointers.asm"
0000DE88                            ; ---------------------------------------------------------------------------
0000DE88                            ; Object pointers
0000DE88                            ; ---------------------------------------------------------------------------
0000DE88 0000 0000 0000 0000 0000+  	dc.l Obj01, ObjectFall,	ObjectFall, ObjectFall
0000DE98 0000 0000 0000 0000 0000+  	dc.l SpinDash_dust, speedboosters, ObjectFall, Obj08
0000DEA8 0000 0000 0000 0000 0000+  	dc.l Obj09, Obj0A, Obj0B, Obj0C
0000DEB8 0000 0000 0000 B120 0000+  	dc.l Obj0D, Obj0E, Obj0F, Obj10
0000DEC8 0000 7DDC 0000 0000 0000+  	dc.l Obj11, Obj12, Obj13, Obj14
0000DED8 0000 8402 0000 0000 0000+  	dc.l Obj15, Obj16, Obj17, Obj18
0000DEE8 0000 8C50 0000 8CB8 0000+  	dc.l Obj19, Obj1A, Obj1B, Obj1C
0000DEF8 0000 9302 0000 95F0 0000+  	dc.l Obj1D, Obj1E, Obj1F, Obj20
0000DF08 0000 0000 0000 A274 0000+  	dc.l Obj21, Obj22, Obj23, Obj24
0000DF18 0000 A5B6 0000 ABE4 0000+  	dc.l Obj25, Obj26, Obj27, Obj28
0000DF28 0000 9EAC 0000 93D8 0000+  	dc.l Obj29, Obj2A, Obj2B, Obj2C
0000DF38 0000 B7AE 0000 ADE2 0000+  	dc.l Obj2D, Obj2E, Obj2F, Obj30
0000DF48 0000 C180 0000 C82E 0000+  	dc.l Obj31, Obj32, Obj33, Obj34
0000DF58 0000 BCE4 0000 D91E 0000+  	dc.l Obj35, Obj36, Obj37, Obj38
0000DF68 0000 CFB4 0000 D06E 0000+  	dc.l Obj39, Obj3A, Obj3B, Obj3C
0000DF78 0000 0000 0000 0000 0000+  	dc.l Obj3D, Obj3E, Obj3F, Obj40
0000DF88 0000 0000 0000 0000 0000+  	dc.l Obj41, Obj42, Obj43, Obj44
0000DF98 0000 C49C 0000 0000 0000+  	dc.l Obj45, Obj46, Obj47, Obj48
0000DFA8 0000 DBBA 0000 0000 0000+  	dc.l Obj49, Obj4A, Obj4B, Obj4C
0000DFB8 0000 0000 0000 0000 0000+  	dc.l Obj4D, Obj4E, Obj4F, Obj50
0000DFC8 0000 0000 0000 0000 0000+  	dc.l Obj51, Obj52, Obj53, Obj54
0000DFD8 0000 0000 0000 0000 0000+  	dc.l Obj55, Obj56, Obj57, Obj58
0000DFE8 0000 0000 0000 0000 0000+  	dc.l Obj59, Obj5A, Obj5B, Obj5C
0000DFF8 0000 0000 0000 0000 0000+  	dc.l Obj5D, Obj5E, Obj5F, Obj60
0000E008 0000 0000 0000 0000 0000+  	dc.l Obj61, Obj62, Obj63, Obj64
0000E018 0000 0000 0000 0000 0000+  	dc.l Obj65, Obj66, Obj67, Obj68
0000E028 0000 0000 0000 0000 0000+  	dc.l Obj69, Obj6A, Obj6B, Obj6C
0000E038 0000 0000 0000 0000 0000+  	dc.l Obj6D, Obj6E, Obj6F, Obj70
0000E048 0000 0000 0000 0000 0000+  	dc.l Obj71, Obj72, Obj73, Obj74
0000E058 0000 0000 0000 0000 0000+  	dc.l Obj75, Obj76, Obj77, Obj78
0000E068 0000 0000 0000 0000 0000+  	dc.l Obj79, Obj7A, Obj7B, Obj7C
0000E078 0000 0000 0000 D2A8 0000+  	dc.l Obj7D, Obj7E, Obj7F, Obj80
0000E088 0000 59CE 0000 0000 0000+  	dc.l Obj81, Obj82, Obj83, Obj84
0000E098 0000 0000 0000 0000 0000+  	dc.l Obj85, Obj86, Obj87, Obj88
0000E0A8 0000 6088 0000 0000 0000+  	dc.l Obj89, Obj8A, Obj8B, Obj8C
0000E0A8 0000 6088 0000 0000 0000+  	dc.l Obj89, Obj8A, Obj8B, Obj8C
0000E0B8                            
0000E0B8                            ; ---------------------------------------------------------------------------
0000E0B8                            ; Subroutine to	make an	object fall downwards, increasingly fast
0000E0B8                            ; ---------------------------------------------------------------------------
0000E0B8                            
0000E0B8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E0B8                            
0000E0B8                            
0000E0B8                            ObjectFall:
0000E0B8 2428 0008                  		move.l	8(a0),d2
0000E0BC 2628 000C                  		move.l	$C(a0),d3
0000E0C0 3028 0010                  		move.w	$10(a0),d0
0000E0C4 48C0                       		ext.l	d0
0000E0C6 E180                       		asl.l	#8,d0
0000E0C8 D480                       		add.l	d0,d2
0000E0CA 3028 0012                  		move.w	$12(a0),d0
0000E0CE 0668 0038 0012             		addi.w	#$38,$12(a0)	; increase vertical speed
0000E0D4 48C0                       		ext.l	d0
0000E0D6 E180                       		asl.l	#8,d0
0000E0D8 D680                       		add.l	d0,d3
0000E0DA 2142 0008                  		move.l	d2,8(a0)
0000E0DE 2143 000C                  		move.l	d3,$C(a0)
0000E0E2 4E75                       		rts	
0000E0E4                            ; End of function ObjectFall
0000E0E4                            
0000E0E4                            ; ---------------------------------------------------------------------------
0000E0E4                            ; Subroutine translating object	speed to update	object position
0000E0E4                            ; ---------------------------------------------------------------------------
0000E0E4                            
0000E0E4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E0E4                            
0000E0E4                            
0000E0E4                            SpeedToPos:
0000E0E4 2428 0008                  		move.l	8(a0),d2
0000E0E8 2628 000C                  		move.l	$C(a0),d3
0000E0EC 3028 0010                  		move.w	$10(a0),d0	; load horizontal speed
0000E0F0 48C0                       		ext.l	d0
0000E0F2 E180                       		asl.l	#8,d0		; multiply speed by $100
0000E0F4 D480                       		add.l	d0,d2		; add to x-axis	position
0000E0F6 3028 0012                  		move.w	$12(a0),d0	; load vertical	speed
0000E0FA 48C0                       		ext.l	d0
0000E0FC E180                       		asl.l	#8,d0		; multiply by $100
0000E0FE D680                       		add.l	d0,d3		; add to y-axis	position
0000E100 2142 0008                  		move.l	d2,8(a0)	; update x-axis	position
0000E104 2143 000C                  		move.l	d3,$C(a0)	; update y-axis	position
0000E108 4E75                       		rts	
0000E10A                            ; End of function SpeedToPos
0000E10A                            
0000E10A                            ; ---------------------------------------------------------------------------
0000E10A                            ; Subroutine to	display	a sprite/object, when a0 is the	object RAM
0000E10A                            ; ---------------------------------------------------------------------------
0000E10A                            
0000E10A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E10A                            
0000E10A                            
0000E10A                            DisplaySprite:
0000E10A 43F8 AC00                  		lea	($FFFFAC00).w,a1
0000E10E 3028 0018                  		move.w	$18(a0),d0
0000E112 E248                       		lsr.w	#1,d0
0000E114 0240 0380                  		andi.w	#$380,d0
0000E118 D2C0                       		adda.w	d0,a1
0000E11A 0C51 007E                  		cmpi.w	#$7E,(a1)
0000E11E 6400                       		bcc.s	locret_D620
0000E120 5451                       		addq.w	#2,(a1)
0000E122 D2D1                       		adda.w	(a1),a1
0000E124 3288                       		move.w	a0,(a1)
0000E126                            
0000E126                            locret_D620:
0000E126 4E75                       		rts	
0000E128                            ; End of function DisplaySprite
0000E128                            
0000E128                            ; ---------------------------------------------------------------------------
0000E128                            ; Subroutine to	display	a 2nd sprite/object, when a1 is	the object RAM
0000E128                            ; ---------------------------------------------------------------------------
0000E128                            
0000E128                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E128                            
0000E128                            
0000E128                            DisplaySprite2:
0000E128 45F8 AC00                  		lea	($FFFFAC00).w,a2
0000E12C 3029 0018                  		move.w	$18(a1),d0
0000E130 E248                       		lsr.w	#1,d0
0000E132 0240 0380                  		andi.w	#$380,d0
0000E136 D4C0                       		adda.w	d0,a2
0000E138 0C52 007E                  		cmpi.w	#$7E,(a2)
0000E13C 6400                       		bcc.s	locret_D63E
0000E13E 5452                       		addq.w	#2,(a2)
0000E140 D4D2                       		adda.w	(a2),a2
0000E142 3489                       		move.w	a1,(a2)
0000E144                            
0000E144                            locret_D63E:
0000E144 4E75                       		rts
0000E146                            ; End of function DisplaySprite2
0000E146                            
0000E146                            ; ---------------------------------------------------------------------------
0000E146                            ; Subroutine to	delete an object
0000E146                            ; ---------------------------------------------------------------------------
0000E146                            
0000E146                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E146                            
0000E146                            
0000E146                            DeleteObject:
0000E146 2248                       		movea.l	a0,a1
0000E148                            
0000E148                            DeleteObject2:
0000E148 7200                       		moveq	#0,d1
0000E14A 700F                       		moveq	#$F,d0
0000E14C                            
0000E14C                            loc_D646:
0000E14C 22C1                       		move.l	d1,(a1)+	; clear	the object RAM
0000E14E 51C8 FFFC                  		dbf	d0,loc_D646	; repeat $F times (length of object RAM)
0000E152 4E75                       		rts
0000E154                            ; End of function DeleteObject
0000E154                            
0000E154                            ; ===========================================================================
0000E154 0000 0000                  BldSpr_ScrPos:	dc.l 0			; blank
0000E158 00FF F700                  		dc.l $FFF700		; main screen x-position
0000E15C 00FF F708                  		dc.l $FFF708		; background x-position	1
0000E160 00FF F718                  		dc.l $FFF718		; background x-position	2
0000E164                            ; ---------------------------------------------------------------------------
0000E164                            ; Subroutine to	convert	mappings (etc) to proper Megadrive sprites
0000E164                            ; ---------------------------------------------------------------------------
0000E164                            
0000E164                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E164                            
0000E164                            
0000E164                            BuildSprites:				; XREF: TitleScreen; et al
0000E164 45F8 F800                  		lea	($FFFFF800).w,a2 ; set address for sprite table
0000E168 7A00                       		moveq	#0,d5
0000E16A 49F8 AC00                  		lea	($FFFFAC00).w,a4
0000E16E 7E07                       		moveq	#7,d7
0000E170                            
0000E170                            loc_D66A:
0000E170 4A54                       		tst.w	(a4)
0000E172 6700 0000                  		beq.w	loc_D72E
0000E176 7C02                       		moveq	#2,d6
0000E178                            
0000E178                            loc_D672:
0000E178 3074 6000                  		movea.w	(a4,d6.w),a0
0000E17C 4A10                       		tst.b	(a0)
0000E17E 6700 0000                  		beq.w	loc_D726
0000E182 08A8 0007 0001             		bclr	#7,1(a0)
0000E188 1028 0001                  		move.b	1(a0),d0
0000E18C 1800                       		move.b	d0,d4
0000E18E 0240 000C                  		andi.w	#$C,d0
0000E192 6700                       		beq.s	loc_D6DE
0000E194 227B 00BE                  		movea.l	BldSpr_ScrPos(pc,d0.w),a1
0000E198 7000                       		moveq	#0,d0
0000E19A 1028 0019                  		move.b	$19(a0),d0
0000E19E 3628 0008                  		move.w	8(a0),d3
0000E1A2 9651                       		sub.w	(a1),d3
0000E1A4 3203                       		move.w	d3,d1
0000E1A6 D240                       		add.w	d0,d1
0000E1A8 6B00 0000                  		bmi.w	loc_D726
0000E1AC 3203                       		move.w	d3,d1
0000E1AE 9240                       		sub.w	d0,d1
0000E1B0 0C41 0140                  		cmpi.w	#$140,d1
0000E1B4 6C00                       		bge.s	loc_D726
0000E1B6 0643 0080                  		addi.w	#$80,d3
0000E1BA 0804 0004                  		btst	#4,d4
0000E1BE 6700                       		beq.s	loc_D6E8
0000E1C0 7000                       		moveq	#0,d0
0000E1C2 1028 0016                  		move.b	$16(a0),d0
0000E1C6 3428 000C                  		move.w	$C(a0),d2
0000E1CA 9469 0004                  		sub.w	4(a1),d2
0000E1CE 3202                       		move.w	d2,d1
0000E1D0 D240                       		add.w	d0,d1
0000E1D2 6B00                       		bmi.s	loc_D726
0000E1D4 3202                       		move.w	d2,d1
0000E1D6 9240                       		sub.w	d0,d1
0000E1D8 0C41 00E0                  		cmpi.w	#$E0,d1
0000E1DC 6C00                       		bge.s	loc_D726
0000E1DE 0642 0080                  		addi.w	#$80,d2
0000E1E2 6000                       		bra.s	loc_D700
0000E1E4                            ; ===========================================================================
0000E1E4                            
0000E1E4                            loc_D6DE:
0000E1E4 3428 000A                  		move.w	$A(a0),d2
0000E1E8 3628 0008                  		move.w	8(a0),d3
0000E1EC 6000                       		bra.s	loc_D700
0000E1EE                            ; ===========================================================================
0000E1EE                            
0000E1EE                            loc_D6E8:
0000E1EE 3428 000C                  		move.w	$C(a0),d2
0000E1F2 9469 0004                  		sub.w	4(a1),d2
0000E1F6 0642 0080                  		addi.w	#$80,d2
0000E1FA 0C42 0060                  		cmpi.w	#$60,d2
0000E1FE 6500                       		bcs.s	loc_D726
0000E200 0C42 0180                  		cmpi.w	#$180,d2
0000E204 6400                       		bcc.s	loc_D726
0000E206                            
0000E206                            loc_D700:
0000E206 2268 0004                  		movea.l	4(a0),a1
0000E20A 7200                       		moveq	#0,d1
0000E20C 0804 0005                  		btst	#5,d4
0000E210 6600                       		bne.s	loc_D71C
0000E212 1228 001A                  		move.b	$1A(a0),d1
0000E216 D241                       		add.w	d1,d1					; MJ: changed from byte to word (we want more than 7F sprites)
0000E218 D2F1 1000                  		adda.w	(a1,d1.w),a1
0000E21C 7200                       		moveq	#$00,d1					; MJ: clear d1 (because of our byte to word change)
0000E21E 1219                       		move.b	(a1)+,d1
0000E220 5301                       		subq.b	#1,d1
0000E222 6B00                       		bmi.s	loc_D720
0000E224                            
0000E224                            loc_D71C:
0000E224 6100 0000                  		bsr.w	sub_D750
0000E228                            
0000E228                            loc_D720:
0000E228 08E8 0007 0001             		bset	#7,1(a0)
0000E22E                            
0000E22E                            loc_D726:
0000E22E 5446                       		addq.w	#2,d6
0000E230 5554                       		subq.w	#2,(a4)
0000E232 6600 FF44                  		bne.w	loc_D672
0000E236                            
0000E236                            loc_D72E:
0000E236 49EC 0080                  		lea	$80(a4),a4
0000E23A 51CF FF34                  		dbf	d7,loc_D66A
0000E23E 11C5 F62C                  		move.b	d5,($FFFFF62C).w
0000E242 0C05 0050                  		cmpi.b	#$50,d5
0000E246 6700                       		beq.s	loc_D748
0000E248 24BC 0000 0000             		move.l	#0,(a2)
0000E24E 4E75                       		rts	
0000E250                            ; ===========================================================================
0000E250                            
0000E250                            loc_D748:
0000E250 157C 0000 FFFB             		move.b	#0,-5(a2)
0000E256 4E75                       		rts	
0000E258                            ; End of function BuildSprites
0000E258                            
0000E258                            
0000E258                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E258                            
0000E258                            
0000E258                            sub_D750:				; XREF: BuildSprites
0000E258 3668 0002                  		movea.w	2(a0),a3
0000E25C 0804 0000                  		btst	#0,d4
0000E260 6600                       		bne.s	loc_D796
0000E262 0804 0001                  		btst	#1,d4
0000E266 6600 0000                  		bne.w	loc_D7E4
0000E26A                            ; End of function sub_D750
0000E26A                            
0000E26A                            
0000E26A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E26A                            
0000E26A                            
0000E26A                            sub_D762:				; XREF: sub_D762; SS_ShowLayout
0000E26A 0C05 0050                  		cmpi.b	#$50,d5
0000E26E 6700                       		beq.s	locret_D794
0000E270 1019                       		move.b	(a1)+,d0
0000E272 4880                       		ext.w	d0
0000E274 D042                       		add.w	d2,d0
0000E276 34C0                       		move.w	d0,(a2)+
0000E278 14D9                       		move.b	(a1)+,(a2)+
0000E27A 5205                       		addq.b	#1,d5
0000E27C 14C5                       		move.b	d5,(a2)+
0000E27E 1019                       		move.b	(a1)+,d0
0000E280 E148                       		lsl.w	#8,d0
0000E282 1019                       		move.b	(a1)+,d0
0000E284 D04B                       		add.w	a3,d0
0000E286 34C0                       		move.w	d0,(a2)+
0000E288 1019                       		move.b	(a1)+,d0
0000E28A 4880                       		ext.w	d0
0000E28C D043                       		add.w	d3,d0
0000E28E 0240 01FF                  		andi.w	#$1FF,d0
0000E292 6600                       		bne.s	loc_D78E
0000E294 5240                       		addq.w	#1,d0
0000E296                            
0000E296                            loc_D78E:
0000E296 34C0                       		move.w	d0,(a2)+
0000E298 51C9 FFD0                  		dbf	d1,sub_D762
0000E29C                            
0000E29C                            locret_D794:
0000E29C 4E75                       		rts	
0000E29E                            ; End of function sub_D762
0000E29E                            
0000E29E                            ; ===========================================================================
0000E29E                            
0000E29E                            loc_D796:
0000E29E 0804 0001                  		btst	#1,d4
0000E2A2 6600 0000                  		bne.w	loc_D82A
0000E2A6                            
0000E2A6                            loc_D79E:
0000E2A6 0C05 0050                  		cmpi.b	#$50,d5
0000E2AA 6700                       		beq.s	locret_D7E2
0000E2AC 1019                       		move.b	(a1)+,d0
0000E2AE 4880                       		ext.w	d0
0000E2B0 D042                       		add.w	d2,d0
0000E2B2 34C0                       		move.w	d0,(a2)+
0000E2B4 1819                       		move.b	(a1)+,d4
0000E2B6 14C4                       		move.b	d4,(a2)+
0000E2B8 5205                       		addq.b	#1,d5
0000E2BA 14C5                       		move.b	d5,(a2)+
0000E2BC 1019                       		move.b	(a1)+,d0
0000E2BE E148                       		lsl.w	#8,d0
0000E2C0 1019                       		move.b	(a1)+,d0
0000E2C2 D04B                       		add.w	a3,d0
0000E2C4 0A40 0800                  		eori.w	#$800,d0
0000E2C8 34C0                       		move.w	d0,(a2)+
0000E2CA 1019                       		move.b	(a1)+,d0
0000E2CC 4880                       		ext.w	d0
0000E2CE 4440                       		neg.w	d0
0000E2D0 D804                       		add.b	d4,d4
0000E2D2 0244 0018                  		andi.w	#$18,d4
0000E2D6 5044                       		addq.w	#8,d4
0000E2D8 9044                       		sub.w	d4,d0
0000E2DA D043                       		add.w	d3,d0
0000E2DC 0240 01FF                  		andi.w	#$1FF,d0
0000E2E0 6600                       		bne.s	loc_D7DC
0000E2E2 5240                       		addq.w	#1,d0
0000E2E4                            
0000E2E4                            loc_D7DC:
0000E2E4 34C0                       		move.w	d0,(a2)+
0000E2E6 51C9 FFBE                  		dbf	d1,loc_D79E
0000E2EA                            
0000E2EA                            locret_D7E2:
0000E2EA 4E75                       		rts	
0000E2EC                            ; ===========================================================================
0000E2EC                            
0000E2EC                            loc_D7E4:				; XREF: sub_D750
0000E2EC 0C05 0050                  		cmpi.b	#$50,d5
0000E2F0 6700                       		beq.s	locret_D828
0000E2F2 1019                       		move.b	(a1)+,d0
0000E2F4 1811                       		move.b	(a1),d4
0000E2F6 4880                       		ext.w	d0
0000E2F8 4440                       		neg.w	d0
0000E2FA E70C                       		lsl.b	#3,d4
0000E2FC 0244 0018                  		andi.w	#$18,d4
0000E300 5044                       		addq.w	#8,d4
0000E302 9044                       		sub.w	d4,d0
0000E304 D042                       		add.w	d2,d0
0000E306 34C0                       		move.w	d0,(a2)+
0000E308 14D9                       		move.b	(a1)+,(a2)+
0000E30A 5205                       		addq.b	#1,d5
0000E30C 14C5                       		move.b	d5,(a2)+
0000E30E 1019                       		move.b	(a1)+,d0
0000E310 E148                       		lsl.w	#8,d0
0000E312 1019                       		move.b	(a1)+,d0
0000E314 D04B                       		add.w	a3,d0
0000E316 0A40 1000                  		eori.w	#$1000,d0
0000E31A 34C0                       		move.w	d0,(a2)+
0000E31C 1019                       		move.b	(a1)+,d0
0000E31E 4880                       		ext.w	d0
0000E320 D043                       		add.w	d3,d0
0000E322 0240 01FF                  		andi.w	#$1FF,d0
0000E326 6600                       		bne.s	loc_D822
0000E328 5240                       		addq.w	#1,d0
0000E32A                            
0000E32A                            loc_D822:
0000E32A 34C0                       		move.w	d0,(a2)+
0000E32C 51C9 FFBE                  		dbf	d1,loc_D7E4
0000E330                            
0000E330                            locret_D828:
0000E330 4E75                       		rts	
0000E332                            ; ===========================================================================
0000E332                            
0000E332                            loc_D82A:
0000E332 0C05 0050                  		cmpi.b	#$50,d5
0000E336 6700                       		beq.s	locret_D87C
0000E338 1019                       		move.b	(a1)+,d0
0000E33A 1811                       		move.b	(a1),d4
0000E33C 4880                       		ext.w	d0
0000E33E 4440                       		neg.w	d0
0000E340 E70C                       		lsl.b	#3,d4
0000E342 0244 0018                  		andi.w	#$18,d4
0000E346 5044                       		addq.w	#8,d4
0000E348 9044                       		sub.w	d4,d0
0000E34A D042                       		add.w	d2,d0
0000E34C 34C0                       		move.w	d0,(a2)+
0000E34E 1819                       		move.b	(a1)+,d4
0000E350 14C4                       		move.b	d4,(a2)+
0000E352 5205                       		addq.b	#1,d5
0000E354 14C5                       		move.b	d5,(a2)+
0000E356 1019                       		move.b	(a1)+,d0
0000E358 E148                       		lsl.w	#8,d0
0000E35A 1019                       		move.b	(a1)+,d0
0000E35C D04B                       		add.w	a3,d0
0000E35E 0A40 1800                  		eori.w	#$1800,d0
0000E362 34C0                       		move.w	d0,(a2)+
0000E364 1019                       		move.b	(a1)+,d0
0000E366 4880                       		ext.w	d0
0000E368 4440                       		neg.w	d0
0000E36A D804                       		add.b	d4,d4
0000E36C 0244 0018                  		andi.w	#$18,d4
0000E370 5044                       		addq.w	#8,d4
0000E372 9044                       		sub.w	d4,d0
0000E374 D043                       		add.w	d3,d0
0000E376 0240 01FF                  		andi.w	#$1FF,d0
0000E37A 6600                       		bne.s	loc_D876
0000E37C 5240                       		addq.w	#1,d0
0000E37E                            
0000E37E                            loc_D876:
0000E37E 34C0                       		move.w	d0,(a2)+
0000E380 51C9 FFB0                  		dbf	d1,loc_D82A
0000E384                            
0000E384                            locret_D87C:
0000E384 4E75                       		rts	
0000E386                            ; ---------------------------------------------------------------------------
0000E386                            ; Subroutine to	check if an object is on the screen
0000E386                            ; ---------------------------------------------------------------------------
0000E386                            
0000E386                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E386                            
0000E386                            
0000E386                            ChkObjOnScreen:
0000E386 3028 0008                  		move.w	8(a0),d0	; get object x-position
0000E38A 9078 F700                  		sub.w	($FFFFF700).w,d0 ; subtract screen x-position
0000E38E 6B00                       		bmi.s	NotOnScreen
0000E390 0C40 0140                  		cmpi.w	#320,d0		; is object on the screen?
0000E394 6C00                       		bge.s	NotOnScreen	; if not, branch
0000E396                            
0000E396 3228 000C                  		move.w	$C(a0),d1	; get object y-position
0000E39A 9278 F704                  		sub.w	($FFFFF704).w,d1 ; subtract screen y-position
0000E39E 6B00                       		bmi.s	NotOnScreen
0000E3A0 0C41 00E0                  		cmpi.w	#224,d1		; is object on the screen?
0000E3A4 6C00                       		bge.s	NotOnScreen	; if not, branch
0000E3A6                            
0000E3A6 7000                       		moveq	#0,d0		; set flag to 0
0000E3A8 4E75                       		rts	
0000E3AA                            ; ===========================================================================
0000E3AA                            
0000E3AA                            NotOnScreen:				; XREF: ChkObjOnScreen
0000E3AA 7001                       		moveq	#1,d0		; set flag to 1
0000E3AC 4E75                       		rts	
0000E3AE                            ; End of function ChkObjOnScreen
0000E3AE                            
0000E3AE                            
0000E3AE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E3AE                            
0000E3AE                            
0000E3AE                            ChkObjOnScreen2:
0000E3AE 7200                       		moveq	#0,d1
0000E3B0 1228 0019                  		move.b	$19(a0),d1
0000E3B4 3028 0008                  		move.w	8(a0),d0
0000E3B8 9078 F700                  		sub.w	($FFFFF700).w,d0
0000E3BC D041                       		add.w	d1,d0
0000E3BE 6B00                       		bmi.s	NotOnScreen2
0000E3C0 D241                       		add.w	d1,d1
0000E3C2 9041                       		sub.w	d1,d0
0000E3C4 0C40 0140                  		cmpi.w	#320,d0
0000E3C8 6C00                       		bge.s	NotOnScreen2
0000E3CA                            
0000E3CA 3228 000C                  		move.w	$C(a0),d1
0000E3CE 9278 F704                  		sub.w	($FFFFF704).w,d1
0000E3D2 6B00                       		bmi.s	NotOnScreen2
0000E3D4 0C41 00E0                  		cmpi.w	#224,d1
0000E3D8 6C00                       		bge.s	NotOnScreen2
0000E3DA                            
0000E3DA 7000                       		moveq	#0,d0
0000E3DC 4E75                       		rts	
0000E3DE                            ; ===========================================================================
0000E3DE                            
0000E3DE                            NotOnScreen2:				; XREF: ChkObjOnScreen2
0000E3DE 7001                       		moveq	#1,d0
0000E3E0 4E75                       		rts	
0000E3E2                            ; End of function ChkObjOnScreen2
0000E3E2                            
0000E3E2                            ; ---------------------------------------------------------------------------
0000E3E2                            ; Subroutine to	load a level's objects
0000E3E2                            ; ---------------------------------------------------------------------------
0000E3E2                            
0000E3E2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E3E2                            
0000E3E2                            
0000E3E2                            ObjPosLoad:				; XREF: Level; et al
0000E3E2 7000                       		moveq	#0,d0
0000E3E4 1038 F76C                  		move.b	($FFFFF76C).w,d0
0000E3E8 303B 0000                  		move.w	OPL_Index(pc,d0.w),d0
0000E3EC 4EFB 0000                  		jmp	OPL_Index(pc,d0.w)
0000E3F0                            ; End of function ObjPosLoad
0000E3F0                            
0000E3F0                            ; ===========================================================================
0000E3F0 0000                       OPL_Index:	dc.w OPL_Main-OPL_Index
0000E3F2 0000                       		dc.w OPL_Next-OPL_Index
0000E3F4                            ; ===========================================================================
0000E3F4                            
0000E3F4                            OPL_Main:				; XREF: OPL_Index
0000E3F4 5438 F76C                  		addq.b	#2,($FFFFF76C).w
0000E3F8 3038 FE10                  		move.w	($FFFFFE10).w,d0
0000E3FC ED08                       		lsl.b	#6,d0
0000E3FE E848                       		lsr.w	#4,d0
0000E400 41F9 0000 0000             		lea	(ObjPos_Index).l,a0
0000E406 2248                       		movea.l	a0,a1
0000E408 D0F0 0000                  		adda.w	(a0,d0.w),a0
0000E40C 21C8 F770                  		move.l	a0,($FFFFF770).w
0000E410 21C8 F774                  		move.l	a0,($FFFFF774).w
0000E414 D2F1 0002                  		adda.w	2(a1,d0.w),a1
0000E418 21C9 F778                  		move.l	a1,($FFFFF778).w
0000E41C 21C9 F77C                  		move.l	a1,($FFFFF77C).w
0000E420 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000E424 34FC 0101                  		move.w	#$101,(a2)+
0000E428 303C 005E                  		move.w	#$5E,d0
0000E42C                            
0000E42C                            OPL_ClrList:
0000E42C 429A                       		clr.l	(a2)+
0000E42E 51C8 FFFC                  		dbf	d0,OPL_ClrList	; clear	pre-destroyed object list
0000E432                            
0000E432 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000E436 7400                       		moveq	#0,d2
0000E438 3C38 F700                  		move.w	($FFFFF700).w,d6
0000E43C 0446 0080                  		subi.w	#$80,d6
0000E440 6400                       		bcc.s	loc_D93C
0000E442 7C00                       		moveq	#0,d6
0000E444                            
0000E444                            loc_D93C:
0000E444 0246 FF80                  		andi.w	#$FF80,d6
0000E448 2078 F770                  		movea.l	($FFFFF770).w,a0
0000E44C                            
0000E44C                            loc_D944:
0000E44C BC50                       		cmp.w	(a0),d6
0000E44E 6300                       		bls.s	loc_D956
0000E450 4A28 0004                  		tst.b	4(a0)
0000E454 6A00                       		bpl.s	loc_D952
0000E456 1412                       		move.b	(a2),d2
0000E458 5212                       		addq.b	#1,(a2)
0000E45A                            
0000E45A                            loc_D952:
0000E45A 5C48                       		addq.w	#6,a0
0000E45C 60EE                       		bra.s	loc_D944
0000E45E                            ; ===========================================================================
0000E45E                            
0000E45E                            loc_D956:
0000E45E 21C8 F770                  		move.l	a0,($FFFFF770).w
0000E462 2078 F774                  		movea.l	($FFFFF774).w,a0
0000E466 0446 0080                  		subi.w	#$80,d6
0000E46A 6500                       		bcs.s	loc_D976
0000E46C                            
0000E46C                            loc_D964:
0000E46C BC50                       		cmp.w	(a0),d6
0000E46E 6300                       		bls.s	loc_D976
0000E470 4A28 0004                  		tst.b	4(a0)
0000E474 6A00                       		bpl.s	loc_D972
0000E476 522A 0001                  		addq.b	#1,1(a2)
0000E47A                            
0000E47A                            loc_D972:
0000E47A 5C48                       		addq.w	#6,a0
0000E47C 60EE                       		bra.s	loc_D964
0000E47E                            ; ===========================================================================
0000E47E                            
0000E47E                            loc_D976:
0000E47E 21C8 F774                  		move.l	a0,($FFFFF774).w
0000E482 31FC FFFF F76E             		move.w	#-1,($FFFFF76E).w
0000E488                            
0000E488                            OPL_Next:				; XREF: OPL_Index
0000E488 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000E48C 7400                       		moveq	#0,d2
0000E48E 3C38 F700                  		move.w	($FFFFF700).w,d6
0000E492 0246 FF80                  		andi.w	#$FF80,d6
0000E496 BC78 F76E                  		cmp.w	($FFFFF76E).w,d6
0000E49A 6700 0000                  		beq.w	locret_DA3A
0000E49E 6C00                       		bge.s	loc_D9F6
0000E4A0 31C6 F76E                  		move.w	d6,($FFFFF76E).w
0000E4A4 2078 F774                  		movea.l	($FFFFF774).w,a0
0000E4A8 0446 0080                  		subi.w	#$80,d6
0000E4AC 6500                       		bcs.s	loc_D9D2
0000E4AE                            
0000E4AE                            loc_D9A6:
0000E4AE BC68 FFFA                  		cmp.w	-6(a0),d6
0000E4B2 6C00                       		bge.s	loc_D9D2
0000E4B4 5D48                       		subq.w	#6,a0
0000E4B6 4A28 0004                  		tst.b	4(a0)
0000E4BA 6A00                       		bpl.s	loc_D9BC
0000E4BC 532A 0001                  		subq.b	#1,1(a2)
0000E4C0 142A 0001                  		move.b	1(a2),d2
0000E4C4                            
0000E4C4                            loc_D9BC:
0000E4C4 6100 0000                  		bsr.w	loc_DA3C
0000E4C8 6600                       		bne.s	loc_D9C6
0000E4CA 5D48                       		subq.w	#6,a0
0000E4CC 60E0                       		bra.s	loc_D9A6
0000E4CE                            ; ===========================================================================
0000E4CE                            
0000E4CE                            loc_D9C6:
0000E4CE 4A28 0004                  		tst.b	4(a0)
0000E4D2 6A00                       		bpl.s	loc_D9D0
0000E4D4 522A 0001                  		addq.b	#1,1(a2)
0000E4D8                            
0000E4D8                            loc_D9D0:
0000E4D8 5C48                       		addq.w	#6,a0
0000E4DA                            
0000E4DA                            loc_D9D2:
0000E4DA 21C8 F774                  		move.l	a0,($FFFFF774).w
0000E4DE 2078 F770                  		movea.l	($FFFFF770).w,a0
0000E4E2 0646 0300                  		addi.w	#$300,d6
0000E4E6                            
0000E4E6                            loc_D9DE:
0000E4E6 BC68 FFFA                  		cmp.w	-6(a0),d6
0000E4EA 6E00                       		bgt.s	loc_D9F0
0000E4EC 4A28 FFFE                  		tst.b	-2(a0)
0000E4F0 6A00                       		bpl.s	loc_D9EC
0000E4F2 5312                       		subq.b	#1,(a2)
0000E4F4                            
0000E4F4                            loc_D9EC:
0000E4F4 5D48                       		subq.w	#6,a0
0000E4F6 60EE                       		bra.s	loc_D9DE
0000E4F8                            ; ===========================================================================
0000E4F8                            
0000E4F8                            loc_D9F0:
0000E4F8 21C8 F770                  		move.l	a0,($FFFFF770).w
0000E4FC 4E75                       		rts	
0000E4FE                            ; ===========================================================================
0000E4FE                            
0000E4FE                            loc_D9F6:
0000E4FE 31C6 F76E                  		move.w	d6,($FFFFF76E).w
0000E502 2078 F770                  		movea.l	($FFFFF770).w,a0
0000E506 0646 0280                  		addi.w	#$280,d6
0000E50A                            
0000E50A                            loc_DA02:
0000E50A BC50                       		cmp.w	(a0),d6
0000E50C 6300                       		bls.s	loc_DA16
0000E50E 4A28 0004                  		tst.b	4(a0)
0000E512 6A00                       		bpl.s	loc_DA10
0000E514 1412                       		move.b	(a2),d2
0000E516 5212                       		addq.b	#1,(a2)
0000E518                            
0000E518                            loc_DA10:
0000E518 6100 0000                  		bsr.w	loc_DA3C
0000E51C 67EC                       		beq.s	loc_DA02
0000E51E 4A28 0004                  		tst.b	$04(a0)		; was this object a remember state?
0000E522 6A00                       		bpl.s	loc_DA16	; if not, branch
0000E524 5312                       		subq.b	#$01,(a2)	; move right counter back		
0000E526                            
0000E526                            loc_DA16:
0000E526 21C8 F770                  		move.l	a0,($FFFFF770).w
0000E52A 2078 F774                  		movea.l	($FFFFF774).w,a0
0000E52E 0446 0300                  		subi.w	#$300,d6
0000E532 6500                       		bcs.s	loc_DA36
0000E534                            
0000E534                            loc_DA24:
0000E534 BC50                       		cmp.w	(a0),d6
0000E536 6300                       		bls.s	loc_DA36
0000E538 4A28 0004                  		tst.b	4(a0)
0000E53C 6A00                       		bpl.s	loc_DA32
0000E53E 522A 0001                  		addq.b	#1,1(a2)
0000E542                            
0000E542                            loc_DA32:
0000E542 5C48                       		addq.w	#6,a0
0000E544 60EE                       		bra.s	loc_DA24
0000E546                            ; ===========================================================================
0000E546                            
0000E546                            loc_DA36:
0000E546 21C8 F774                  		move.l	a0,($FFFFF774).w
0000E54A                            
0000E54A                            locret_DA3A:
0000E54A 4E75                       		rts	
0000E54C                            ; ===========================================================================
0000E54C                            
0000E54C                            loc_DA3C:
0000E54C 4A28 0004                  		tst.b	4(a0)
0000E550 6A00                       		bpl.s	OPL_MakeItem
0000E552 0832 0007 2002             		btst	#7,2(a2,d2.w)
0000E558 6700                       		beq.s	OPL_MakeItem
0000E55A 5C48                       		addq.w	#6,a0
0000E55C 7000                       		moveq	#0,d0
0000E55E 4E75                       		rts	
0000E560                            ; ===========================================================================
0000E560                            
0000E560                            OPL_MakeItem:
0000E560 6100 0000                  		bsr.w	SingleObjLoad
0000E564 6600                       		bne.s	locret_DA8A
0000E566 3358 0008                  		move.w	(a0)+,8(a1)
0000E56A 3018                       		move.w	(a0)+,d0
0000E56C 3200                       		move.w	d0,d1
0000E56E 0240 0FFF                  		andi.w	#$FFF,d0
0000E572 3340 000C                  		move.w	d0,$C(a1)
0000E576 E559                       		rol.w	#2,d1
0000E578 0201 0003                  		andi.b	#3,d1
0000E57C 1341 0001                  		move.b	d1,1(a1)
0000E580 1341 0022                  		move.b	d1,$22(a1)
0000E584 1018                       		move.b	(a0)+,d0
0000E586 6A00                       		bpl.s	loc_DA80
0000E588 08F2 0007 2002             		bset	#$07,$02(a2,d2.w)	; set as removed
0000E58E 0200 007F                  		andi.b	#$7F,d0
0000E592 1342 0023                  		move.b	d2,$23(a1)
0000E596                            
0000E596                            loc_DA80:
0000E596 1280                       		move.b	d0,0(a1)
0000E598 1358 0028                  		move.b	(a0)+,$28(a1)
0000E59C 7000                       		moveq	#0,d0
0000E59E                            
0000E59E                            locret_DA8A:
0000E59E 4E75                       		rts	
0000E5A0                            ; ---------------------------------------------------------------------------
0000E5A0                            ; Single object	loading	subroutine
0000E5A0                            ; ---------------------------------------------------------------------------
0000E5A0                            
0000E5A0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E5A0                            
0000E5A0                            
0000E5A0                            SingleObjLoad:
0000E5A0 43F8 D800                  		lea	($FFFFD800).w,a1 ; start address for object RAM
0000E5A4 303C 005F                  		move.w	#$5F,d0
0000E5A8                            
0000E5A8                            loc_DA94:
0000E5A8 4A11                       		tst.b	(a1)		; is object RAM	slot empty?
0000E5AA 6700                       		beq.s	locret_DAA0	; if yes, branch
0000E5AC 43E9 0040                  		lea	$40(a1),a1	; goto next object RAM slot
0000E5B0 51C8 FFF6                  		dbf	d0,loc_DA94	; repeat $5F times
0000E5B4                            
0000E5B4                            locret_DAA0:
0000E5B4 4E75                       		rts	
0000E5B6                            ; End of function SingleObjLoad
0000E5B6                            
0000E5B6                            
0000E5B6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E5B6                            
0000E5B6                            
0000E5B6                            SingleObjLoad2:
0000E5B6 2248                       		movea.l	a0,a1
0000E5B8 303C F000                  		move.w	#-$1000,d0
0000E5BC 9048                       		sub.w	a0,d0
0000E5BE EC48                       		lsr.w	#6,d0
0000E5C0 5340                       		subq.w	#1,d0
0000E5C2 6500                       		bcs.s	locret_DABC
0000E5C4                            
0000E5C4                            loc_DAB0:
0000E5C4 4A11                       		tst.b	(a1)
0000E5C6 6700                       		beq.s	locret_DABC
0000E5C8 43E9 0040                  		lea	$40(a1),a1
0000E5CC 51C8 FFF6                  		dbf	d0,loc_DAB0
0000E5D0                            
0000E5D0                            locret_DABC:
0000E5D0 4E75                       		rts	
0000E5D2                            ; End of function SingleObjLoad2
0000E5D2                            
0000E5D2                            ; ===========================================================================
0000E5D2                            ; ---------------------------------------------------------------------------
0000E5D2                            ; Object 41 - springs
0000E5D2                            ; ---------------------------------------------------------------------------
0000E5D2                            
0000E5D2                            Obj41:					; XREF: Obj_Index
0000E5D2 7000                       		moveq	#0,d0
0000E5D4 1028 0024                  		move.b	$24(a0),d0
0000E5D8 323B 0000                  		move.w	Obj41_Index(pc,d0.w),d1
0000E5DC 4EBB 1000                  		jsr	Obj41_Index(pc,d1.w)
0000E5E0 6100 FB28                  		bsr.w	DisplaySprite
0000E5E4 3028 0008                  		move.w	8(a0),d0
0000E5E8 0240 FF80                  		andi.w	#$FF80,d0
0000E5EC 3238 F700                  		move.w	($FFFFF700).w,d1
0000E5F0 0441 0080                  		subi.w	#$80,d1
0000E5F4 0241 FF80                  		andi.w	#$FF80,d1
0000E5F8 9041                       		sub.w	d1,d0
0000E5FA 0C40 0280                  		cmpi.w	#$280,d0
0000E5FE 6200 FB46                  		bhi.w	DeleteObject
0000E602 4E75                       		rts	
0000E604                            ; ===========================================================================
0000E604 0000                       Obj41_Index:	dc.w Obj41_Main-Obj41_Index
0000E606 0000                       		dc.w Obj41_Up-Obj41_Index
0000E608 0000                       		dc.w Obj41_AniUp-Obj41_Index
0000E60A 0000                       		dc.w Obj41_ResetUp-Obj41_Index
0000E60C 0000                       		dc.w Obj41_LR-Obj41_Index
0000E60E 0000                       		dc.w Obj41_AniLR-Obj41_Index
0000E610 0000                       		dc.w Obj41_ResetLR-Obj41_Index
0000E612 0000                       		dc.w Obj41_Dwn-Obj41_Index
0000E614 0000                       		dc.w Obj41_AniDwn-Obj41_Index
0000E616 0000                       		dc.w Obj41_ResetDwn-Obj41_Index
0000E618                            
0000E618 F000                       Obj41_Powers:	dc.w -$1000		; power	of red spring
0000E61A F600                       		dc.w -$A00		; power	of yellow spring
0000E61C                            ; ===========================================================================
0000E61C                            
0000E61C                            Obj41_Main:				; XREF: Obj41_Index
0000E61C 5428 0024                  		addq.b	#2,$24(a0)
0000E620 217C 0000 0000 0004        		move.l	#Map_obj41,4(a0)
0000E628 317C 0523 0002             		move.w	#$523,2(a0)
0000E62E 0028 0004 0001             		ori.b	#4,1(a0)
0000E634 117C 0010 0019             		move.b	#$10,$19(a0)
0000E63A 117C 0004 0018             		move.b	#4,$18(a0)
0000E640 1028 0028                  		move.b	$28(a0),d0
0000E644 0800 0004                  		btst	#4,d0		; does the spring face left/right?
0000E648 6700                       		beq.s	loc_DB54	; if not, branch
0000E64A 117C 0008 0024             		move.b	#8,$24(a0)	; use "Obj41_LR" routine
0000E650 117C 0001 001C             		move.b	#1,$1C(a0)
0000E656 117C 0003 001A             		move.b	#3,$1A(a0)
0000E65C 317C 0533 0002             		move.w	#$533,2(a0)
0000E662 117C 0008 0019             		move.b	#8,$19(a0)
0000E668                            
0000E668                            loc_DB54:
0000E668 0800 0005                  		btst	#5,d0		; does the spring face downwards?
0000E66C 6700                       		beq.s	loc_DB66	; if not, branch
0000E66E 117C 000E 0024             		move.b	#$E,$24(a0)	; use "Obj41_Dwn" routine
0000E674 08E8 0001 0022             		bset	#1,$22(a0)
0000E67A                            
0000E67A                            loc_DB66:
0000E67A 0800 0001                  		btst	#1,d0
0000E67E 6700                       		beq.s	loc_DB72
0000E680 08E8 0005 0002             		bset	#5,2(a0)
0000E686                            
0000E686                            loc_DB72:
0000E686 0240 000F                  		andi.w	#$F,d0
0000E68A 317B 008C 0030             		move.w	Obj41_Powers(pc,d0.w),$30(a0)
0000E690 4E75                       		rts	
0000E692                            ; ===========================================================================
0000E692                            
0000E692                            Obj41_Up:				; XREF: Obj41_Index
0000E692 323C 001B                  		move.w	#$1B,d1
0000E696 343C 0008                  		move.w	#8,d2
0000E69A 363C 0010                  		move.w	#$10,d3
0000E69E 3828 0008                  		move.w	8(a0),d4
0000E6A2 6100 0000                  		bsr.w	SolidObject
0000E6A6 4A28 0025                  		tst.b	$25(a0)		; is Sonic on top of the spring?
0000E6AA 6600                       		bne.s	Obj41_BounceUp	; if yes, branch
0000E6AC 4E75                       		rts	
0000E6AE                            ; ===========================================================================
0000E6AE                            
0000E6AE                            Obj41_BounceUp:				; XREF: Obj41_Up
0000E6AE 5428 0024                  		addq.b	#2,$24(a0)
0000E6B2 5069 000C                  		addq.w	#8,$C(a1)
0000E6B6 3368 0030 0012             		move.w	$30(a0),$12(a1)	; move Sonic upwards
0000E6BC 08E9 0001 0022             		bset	#1,$22(a1)
0000E6C2 08A9 0003 0022             		bclr	#3,$22(a1)
0000E6C8 137C 0010 001C             		move.b	#$10,$1C(a1)	; use "bouncing" animation
0000E6CE 137C 0002 0024             		move.b	#2,$24(a1)
0000E6D4 08A8 0003 0022             		bclr	#3,$22(a0)
0000E6DA 4228 0025                  		clr.b	$25(a0)
0000E6DE 303C 00CC                  		move.w	#$CC,d0
0000E6E2 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play spring sound
0000E6E8                            
0000E6E8                            Obj41_AniUp:				; XREF: Obj41_Index
0000E6E8 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000E6EE 6000 CB2C                  		bra.w	AnimateSprite
0000E6F2                            ; ===========================================================================
0000E6F2                            
0000E6F2                            Obj41_ResetUp:				; XREF: Obj41_Index
0000E6F2 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000E6F8 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_Up" routine
0000E6FC 4E75                       		rts	
0000E6FE                            ; ===========================================================================
0000E6FE                            
0000E6FE                            Obj41_LR:				; XREF: Obj41_Index
0000E6FE 323C 0013                  		move.w	#$13,d1
0000E702 343C 000E                  		move.w	#$E,d2
0000E706 363C 000F                  		move.w	#$F,d3
0000E70A 3828 0008                  		move.w	8(a0),d4
0000E70E 6100 0000                  		bsr.w	SolidObject
0000E712 0C28 0002 0024             		cmpi.b	#2,$24(a0)
0000E718 6600                       		bne.s	loc_DC0C
0000E71A 117C 0008 0024             		move.b	#8,$24(a0)
0000E720                            
0000E720                            loc_DC0C:
0000E720 0828 0005 0022             		btst	#5,$22(a0)
0000E726 6600                       		bne.s	Obj41_BounceLR
0000E728 4E75                       		rts	
0000E72A                            ; ===========================================================================
0000E72A                            
0000E72A                            Obj41_BounceLR:				; XREF: Obj41_LR
0000E72A 5428 0024                  		addq.b	#2,$24(a0)
0000E72E 3368 0030 0010             		move.w	$30(a0),$10(a1)	; move Sonic to	the left
0000E734 5069 0008                  		addq.w	#8,8(a1)
0000E738 0828 0000 0022             		btst	#0,$22(a0)	; is object flipped?
0000E73E 6600                       		bne.s	loc_DC36	; if yes, branch
0000E740 0469 0010 0008             		subi.w	#$10,8(a1)
0000E746 4469 0010                  		neg.w	$10(a1)		; move Sonic to	the right
0000E74A                            
0000E74A                            loc_DC36:
0000E74A 337C 000F 003E             		move.w	#$F,$3E(a1)
0000E750 3369 0010 0014             		move.w	$10(a1),$14(a1)
0000E756 0869 0000 0022             		bchg	#0,$22(a1)
0000E75C 0829 0002 0022             		btst	#2,$22(a1)
0000E762 6600                       		bne.s	loc_DC56
0000E764 137C 0000 001C             		move.b	#0,$1C(a1)	; use running animation
0000E76A                            
0000E76A                            loc_DC56:
0000E76A 08A8 0005 0022             		bclr	#5,$22(a0)
0000E770 08A9 0005 0022             		bclr	#5,$22(a1)
0000E776 303C 00CC                  		move.w	#$CC,d0
0000E77A 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play spring sound
0000E780                            
0000E780                            Obj41_AniLR:				; XREF: Obj41_Index
0000E780 4278 C904                  		clr.w	($FFFFC904).w	; clear screen delay counter
0000E784 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000E78A 6000 CA90                  		bra.w	AnimateSprite
0000E78E                            ; ===========================================================================
0000E78E                            
0000E78E                            Obj41_ResetLR:				; XREF: Obj41_Index
0000E78E 117C 0002 001D             		move.b	#2,$1D(a0)	; reset	animation
0000E794 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_LR" routine
0000E798 4E75                       		rts	
0000E79A                            ; ===========================================================================
0000E79A                            
0000E79A                            Obj41_Dwn:				; XREF: Obj41_Index
0000E79A 323C 001B                  		move.w	#$1B,d1
0000E79E 343C 0008                  		move.w	#8,d2
0000E7A2 363C 0010                  		move.w	#$10,d3
0000E7A6 3828 0008                  		move.w	8(a0),d4
0000E7AA 6100 0000                  		bsr.w	SolidObject
0000E7AE 0C28 0002 0024             		cmpi.b	#2,$24(a0)
0000E7B4 6600                       		bne.s	loc_DCA4
0000E7B6 117C 000E 0024             		move.b	#$E,$24(a0)
0000E7BC                            
0000E7BC                            loc_DCA4:
0000E7BC 4A28 0025                  		tst.b	$25(a0)
0000E7C0 6600                       		bne.s	locret_DCAE
0000E7C2 4A44                       		tst.w	d4
0000E7C4 6B00                       		bmi.s	Obj41_BounceDwn
0000E7C6                            
0000E7C6                            locret_DCAE:
0000E7C6 4E75                       		rts	
0000E7C8                            ; ===========================================================================
0000E7C8                            
0000E7C8                            Obj41_BounceDwn:			; XREF: Obj41_Dwn
0000E7C8 5428 0024                  		addq.b	#2,$24(a0)
0000E7CC 5169 000C                  		subq.w	#8,$C(a1)
0000E7D0 3368 0030 0012             		move.w	$30(a0),$12(a1)
0000E7D6 4469 0012                  		neg.w	$12(a1)		; move Sonic downwards
0000E7DA 08E9 0001 0022             		bset	#1,$22(a1)
0000E7E0 08A9 0003 0022             		bclr	#3,$22(a1)
0000E7E6 137C 0002 0024             		move.b	#2,$24(a1)
0000E7EC 08A8 0003 0022             		bclr	#3,$22(a0)
0000E7F2 4228 0025                  		clr.b	$25(a0)
0000E7F6 303C 00CC                  		move.w	#$CC,d0
0000E7FA 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play spring sound
0000E800                            
0000E800                            Obj41_AniDwn:				; XREF: Obj41_Index
0000E800 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000E806 6000 CA14                  		bra.w	AnimateSprite
0000E80A                            ; ===========================================================================
0000E80A                            
0000E80A                            Obj41_ResetDwn:				; XREF: Obj41_Index
0000E80A 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000E810 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_Dwn" routine
0000E814 4E75                       		rts	
0000E816                            ; ===========================================================================
0000E816                            Ani_obj41:
0000E816                            	include "_anim\obj41.asm"
0000E816                            ; ---------------------------------------------------------------------------
0000E816                            ; Animation script - springs
0000E816                            ; ---------------------------------------------------------------------------
0000E816 0000                       		dc.w byte_DD02-Ani_obj41
0000E818 0000                       		dc.w byte_DD0E-Ani_obj41
0000E81A 0001 0000 0202 0202 0202+  byte_DD02:	dc.b 0,	1, 0, 0, 2, 2, 2, 2, 2,	2, 0, $FC
0000E826 0004 0303 0505 0505 0505+  byte_DD0E:	dc.b 0,	4, 3, 3, 5, 5, 5, 5, 5,	5, 3, $FC
0000E832                            		even
0000E832                            		even
0000E832                            
0000E832                            ; ---------------------------------------------------------------------------
0000E832                            ; Sprite mappings - springs
0000E832                            ; ---------------------------------------------------------------------------
0000E832                            Map_obj41:
0000E832                            	include "_maps\obj41.asm"
0000E832                            ; ---------------------------------------------------------------------------
0000E832                            ; Sprite mappings - springs
0000E832                            ; ---------------------------------------------------------------------------
0000E832 0000                       		dc.w byte_DD26-Map_obj41
0000E834 0000                       		dc.w byte_DD31-Map_obj41
0000E836 0000                       		dc.w byte_DD37-Map_obj41
0000E838 0000                       		dc.w byte_DD47-Map_obj41
0000E83A 0000                       		dc.w byte_DD4D-Map_obj41
0000E83C 0000                       		dc.w byte_DD53-Map_obj41
0000E83E 02                         byte_DD26:	dc.b 2
0000E83F F80C 0000 F0               		dc.b $F8, $C, 0, 0, $F0
0000E844 000C 0004 F0               		dc.b 0,	$C, 0, 4, $F0
0000E849 01                         byte_DD31:	dc.b 1
0000E84A 000C 0000 F0               		dc.b 0,	$C, 0, 0, $F0
0000E84F 03                         byte_DD37:	dc.b 3
0000E850 E80C 0000 F0               		dc.b $E8, $C, 0, 0, $F0
0000E855 F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000E85A 000C 000C F0               		dc.b 0,	$C, 0, $C, $F0
0000E85F 01                         byte_DD47:	dc.b 1
0000E860 F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
0000E865 01                         byte_DD4D:	dc.b 1
0000E866 F003 0004 F8               		dc.b $F0, 3, 0,	4, $F8
0000E86B 04                         byte_DD53:	dc.b 4
0000E86C F003 0004 10               		dc.b $F0, 3, 0,	4, $10
0000E871 F809 0008 F8               		dc.b $F8, 9, 0,	8, $F8
0000E876 F000 0000 F8               		dc.b $F0, 0, 0,	0, $F8
0000E87B 0800 0003 F8               		dc.b 8,	0, 0, 3, $F8
0000E880                            		even
0000E880                            		even
0000E880                            
0000E880                            ; ===========================================================================
0000E880                            ; ---------------------------------------------------------------------------
0000E880                            ; Object 42 - Newtron enemy (GHZ)
0000E880                            ; ---------------------------------------------------------------------------
0000E880                            
0000E880                            Obj42:					; XREF: Obj_Index
0000E880 7000                       		moveq	#0,d0
0000E882 1028 0024                  		move.b	$24(a0),d0
0000E886 323B 0000                  		move.w	Obj42_Index(pc,d0.w),d1
0000E88A 4EFB 1000                  		jmp	Obj42_Index(pc,d1.w)
0000E88E                            ; ===========================================================================
0000E88E 0000                       Obj42_Index:	dc.w Obj42_Main-Obj42_Index
0000E890 0000                       		dc.w Obj42_Action-Obj42_Index
0000E892 0000                       		dc.w Obj42_Delete-Obj42_Index
0000E894                            ; ===========================================================================
0000E894                            
0000E894                            Obj42_Main:				; XREF: Obj42_Index
0000E894 5428 0024                  		addq.b	#2,$24(a0)
0000E898 217C 0000 0000 0004        		move.l	#Map_obj42,4(a0)
0000E8A0 317C 049B 0002             		move.w	#$49B,2(a0)
0000E8A6 117C 0004 0001             		move.b	#4,1(a0)
0000E8AC 117C 0004 0018             		move.b	#4,$18(a0)
0000E8B2 117C 0014 0019             		move.b	#$14,$19(a0)
0000E8B8 117C 0010 0016             		move.b	#$10,$16(a0)
0000E8BE 117C 0008 0017             		move.b	#8,$17(a0)
0000E8C4                            
0000E8C4                            Obj42_Action:				; XREF: Obj42_Index
0000E8C4 7000                       		moveq	#0,d0
0000E8C6 1028 0025                  		move.b	$25(a0),d0
0000E8CA 323B 0000                  		move.w	Obj42_Index2(pc,d0.w),d1
0000E8CE 4EBB 1000                  		jsr	Obj42_Index2(pc,d1.w)
0000E8D2 43F9 0000 0000             		lea	(Ani_obj42).l,a1
0000E8D8 6100 C942                  		bsr.w	AnimateSprite
0000E8DC 6000 0000                  		bra.w	MarkObjGone
0000E8E0                            ; ===========================================================================
0000E8E0 0000                       Obj42_Index2:	dc.w Obj42_ChkDist-Obj42_Index2
0000E8E2 0000                       		dc.w Obj42_Type00-Obj42_Index2
0000E8E4 0000                       		dc.w Obj42_MatchFloor-Obj42_Index2
0000E8E6 0000                       		dc.w Obj42_Speed-Obj42_Index2
0000E8E8 0000                       		dc.w Obj42_Type01-Obj42_Index2
0000E8EA                            ; ===========================================================================
0000E8EA                            
0000E8EA                            Obj42_ChkDist:				; XREF: Obj42_Index2
0000E8EA 08E8 0000 0022             		bset	#0,$22(a0)
0000E8F0 3038 D008                  		move.w	($FFFFD008).w,d0
0000E8F4 9068 0008                  		sub.w	8(a0),d0
0000E8F8 6400                       		bcc.s	loc_DDEA
0000E8FA 4440                       		neg.w	d0
0000E8FC 08A8 0000 0022             		bclr	#0,$22(a0)
0000E902                            
0000E902                            loc_DDEA:
0000E902 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic within $80 pixels of	the newtron?
0000E906 6400                       		bcc.s	locret_DE12	; if not, branch
0000E908 5428 0025                  		addq.b	#2,$25(a0)
0000E90C 117C 0001 001C             		move.b	#1,$1C(a0)
0000E912 4A28 0028                  		tst.b	$28(a0)		; check	object type
0000E916 6700                       		beq.s	locret_DE12	; if type is 00, branch
0000E918 317C 249B 0002             		move.w	#$249B,2(a0)
0000E91E 117C 0008 0025             		move.b	#8,$25(a0)	; run type 01 newtron subroutine
0000E924 117C 0004 001C             		move.b	#4,$1C(a0)	; use different	animation
0000E92A                            
0000E92A                            locret_DE12:
0000E92A 4E75                       		rts	
0000E92C                            ; ===========================================================================
0000E92C                            
0000E92C                            Obj42_Type00:				; XREF: Obj42_Index2
0000E92C 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; has "appearing" animation finished?
0000E932 6400                       		bcc.s	Obj42_Fall	; is yes, branch
0000E934 08E8 0000 0022             		bset	#0,$22(a0)
0000E93A 3038 D008                  		move.w	($FFFFD008).w,d0
0000E93E 9068 0008                  		sub.w	8(a0),d0
0000E942 6400                       		bcc.s	locret_DE32
0000E944 08A8 0000 0022             		bclr	#0,$22(a0)
0000E94A                            
0000E94A                            locret_DE32:
0000E94A 4E75                       		rts	
0000E94C                            ; ===========================================================================
0000E94C                            
0000E94C                            Obj42_Fall:				; XREF: Obj42_Type00
0000E94C 0C28 0001 001A             		cmpi.b	#1,$1A(a0)
0000E952 6600                       		bne.s	loc_DE42
0000E954 117C 000C 0020             		move.b	#$C,$20(a0)
0000E95A                            
0000E95A                            loc_DE42:
0000E95A 6100 F75C                  		bsr.w	ObjectFall
0000E95E 6100 0000                  		bsr.w	ObjHitFloor
0000E962 4A41                       		tst.w	d1		; has newtron hit the floor?
0000E964 6A00                       		bpl.s	locret_DE86	; if not, branch
0000E966 D368 000C                  		add.w	d1,$C(a0)
0000E96A 317C 0000 0012             		move.w	#0,$12(a0)	; stop newtron falling
0000E970 5428 0025                  		addq.b	#2,$25(a0)
0000E974 117C 0002 001C             		move.b	#2,$1C(a0)
0000E97A 0828 0005 0002             		btst	#5,2(a0)
0000E980 6700                       		beq.s	Obj42_Move
0000E982 5228 001C                  		addq.b	#1,$1C(a0)
0000E986                            
0000E986                            Obj42_Move:
0000E986 117C 000D 0020             		move.b	#$D,$20(a0)
0000E98C 317C 0200 0010             		move.w	#$200,$10(a0)	; move newtron horizontally
0000E992 0828 0000 0022             		btst	#0,$22(a0)
0000E998 6600                       		bne.s	locret_DE86
0000E99A 4468 0010                  		neg.w	$10(a0)
0000E99E                            
0000E99E                            locret_DE86:
0000E99E 4E75                       		rts	
0000E9A0                            ; ===========================================================================
0000E9A0                            
0000E9A0                            Obj42_MatchFloor:			; XREF: Obj42_Index2
0000E9A0 6100 F742                  		bsr.w	SpeedToPos
0000E9A4 6100 0000                  		bsr.w	ObjHitFloor
0000E9A8 0C41 FFF8                  		cmpi.w	#-8,d1
0000E9AC 6D00                       		blt.s	loc_DEA2
0000E9AE 0C41 000C                  		cmpi.w	#$C,d1
0000E9B2 6C00                       		bge.s	loc_DEA2
0000E9B4 D368 000C                  		add.w	d1,$C(a0)	; match	newtron's position with floor
0000E9B8 4E75                       		rts	
0000E9BA                            ; ===========================================================================
0000E9BA                            
0000E9BA                            loc_DEA2:
0000E9BA 5428 0025                  		addq.b	#2,$25(a0)
0000E9BE 4E75                       		rts	
0000E9C0                            ; ===========================================================================
0000E9C0                            
0000E9C0                            Obj42_Speed:				; XREF: Obj42_Index2
0000E9C0 6100 F722                  		bsr.w	SpeedToPos
0000E9C4 4E75                       		rts	
0000E9C6                            ; ===========================================================================
0000E9C6                            
0000E9C6                            Obj42_Type01:				; XREF: Obj42_Index2
0000E9C6 0C28 0001 001A             		cmpi.b	#1,$1A(a0)
0000E9CC 6600                       		bne.s	Obj42_FireMissile
0000E9CE 117C 000C 0020             		move.b	#$C,$20(a0)
0000E9D4                            
0000E9D4                            Obj42_FireMissile:
0000E9D4 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000E9DA 6600                       		bne.s	locret_DF14
0000E9DC 4A28 0032                  		tst.b	$32(a0)
0000E9E0 6600                       		bne.s	locret_DF14
0000E9E2 117C 0001 0032             		move.b	#1,$32(a0)
0000E9E8 6100 FBB6                  		bsr.w	SingleObjLoad
0000E9EC 6600                       		bne.s	locret_DF14
0000E9EE 12BC 0023                  		move.b	#$23,0(a1)	; load missile object
0000E9F2 3368 0008 0008             		move.w	8(a0),8(a1)
0000E9F8 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000E9FE 5169 000C                  		subq.w	#8,$C(a1)
0000EA02 337C 0200 0010             		move.w	#$200,$10(a1)
0000EA08 303C 0014                  		move.w	#$14,d0
0000EA0C 0828 0000 0022             		btst	#0,$22(a0)
0000EA12 6600                       		bne.s	loc_DF04
0000EA14 4440                       		neg.w	d0
0000EA16 4469 0010                  		neg.w	$10(a1)
0000EA1A                            
0000EA1A                            loc_DF04:
0000EA1A D169 0008                  		add.w	d0,8(a1)
0000EA1E 1368 0022 0022             		move.b	$22(a0),$22(a1)
0000EA24 137C 0001 0028             		move.b	#1,$28(a1)
0000EA2A                            
0000EA2A                            locret_DF14:
0000EA2A 4E75                       		rts	
0000EA2C                            ; ===========================================================================
0000EA2C                            
0000EA2C                            Obj42_Delete:				; XREF: Obj42_Index
0000EA2C 6000 F718                  		bra.w	DeleteObject
0000EA30                            ; ===========================================================================
0000EA30                            Ani_obj42:
0000EA30                            	include "_anim\obj42.asm"
0000EA30                            ; ---------------------------------------------------------------------------
0000EA30                            ; Animation script - Newtron enemy
0000EA30                            ; ---------------------------------------------------------------------------
0000EA30 0000                       		dc.w byte_DF24-Ani_obj42
0000EA32 0000                       		dc.w byte_DF28-Ani_obj42
0000EA34 0000                       		dc.w byte_DF30-Ani_obj42
0000EA36 0000                       		dc.w byte_DF34-Ani_obj42
0000EA38 0000                       		dc.w byte_DF38-Ani_obj42
0000EA3A 0F0A FF00                  byte_DF24:	dc.b $F, $A, $FF, 0
0000EA3E 1300 0103 0405 FE01        byte_DF28:	dc.b $13, 0, 1,	3, 4, 5, $FE, 1
0000EA46 0206 07FF                  byte_DF30:	dc.b 2,	6, 7, $FF
0000EA4A 0208 09FF                  byte_DF34:	dc.b 2,	8, 9, $FF
0000EA4E 1300 0101 0201 0100 FC00   byte_DF38:	dc.b $13, 0, 1,	1, 2, 1, 1, 0, $FC, 0
0000EA58                            		even
0000EA58                            		even
0000EA58                            
0000EA58                            ; ---------------------------------------------------------------------------
0000EA58                            ; Sprite mappings - Newtron enemy (GHZ)
0000EA58                            ; ---------------------------------------------------------------------------
0000EA58                            Map_obj42:
0000EA58                            	include "_maps\obj42.asm"
0000EA58                            ; ---------------------------------------------------------------------------
0000EA58                            ; Sprite mappings - Newtron enemy (GHZ)
0000EA58                            ; ---------------------------------------------------------------------------
0000EA58 0000 0000                  		dc.w byte_DF58-Map_obj42, byte_DF68-Map_obj42
0000EA5C 0000 0000                  		dc.w byte_DF78-Map_obj42, byte_DF88-Map_obj42
0000EA60 0000 0000                  		dc.w byte_DF9D-Map_obj42, byte_DFAD-Map_obj42
0000EA64 0000 0000                  		dc.w byte_DFB8-Map_obj42, byte_DFC8-Map_obj42
0000EA68 0000 0000                  		dc.w byte_DFD8-Map_obj42, byte_DFE8-Map_obj42
0000EA6C 0000                       		dc.w byte_DFF8-Map_obj42
0000EA6E 03                         byte_DF58:	dc.b 3
0000EA6F EC0D 0000 EC               		dc.b $EC, $D, 0, 0, $EC
0000EA74 F400 0008 0C               		dc.b $F4, 0, 0,	8, $C
0000EA79 FC0E 0009 F4               		dc.b $FC, $E, 0, 9, $F4
0000EA7E 03                         byte_DF68:	dc.b 3
0000EA7F EC06 0015 EC               		dc.b $EC, 6, 0,	$15, $EC
0000EA84 EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000EA89 FC0A 0021 FC               		dc.b $FC, $A, 0, $21, $FC
0000EA8E 03                         byte_DF78:	dc.b 3
0000EA8F EC06 002A EC               		dc.b $EC, 6, 0,	$2A, $EC
0000EA94 EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000EA99 FC0A 0021 FC               		dc.b $FC, $A, 0, $21, $FC
0000EA9E 04                         byte_DF88:	dc.b 4
0000EA9F EC06 0030 EC               		dc.b $EC, 6, 0,	$30, $EC
0000EAA4 EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000EAA9 FC09 0036 FC               		dc.b $FC, 9, 0,	$36, $FC
0000EAAE 0C00 003C 0C               		dc.b $C, 0, 0, $3C, $C
0000EAB3 03                         byte_DF9D:	dc.b 3
0000EAB4 F40D 003D EC               		dc.b $F4, $D, 0, $3D, $EC
0000EAB9 FC00 0020 0C               		dc.b $FC, 0, 0,	$20, $C
0000EABE 0408 0045 FC               		dc.b 4,	8, 0, $45, $FC
0000EAC3 02                         byte_DFAD:	dc.b 2
0000EAC4 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000EAC9 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000EACE 03                         byte_DFB8:	dc.b 3
0000EACF F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000EAD4 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000EAD9 FE00 0052 14               		dc.b $FE, 0, 0,	$52, $14
0000EADE 03                         byte_DFC8:	dc.b 3
0000EADF F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000EAE4 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000EAE9 FE04 0053 14               		dc.b $FE, 4, 0,	$53, $14
0000EAEE 03                         byte_DFD8:	dc.b 3
0000EAEF F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000EAF4 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000EAF9 FE00 E052 14               		dc.b $FE, 0, $E0, $52, $14
0000EAFE 03                         byte_DFE8:	dc.b 3
0000EAFF F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000EB04 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000EB09 FE04 E053 14               		dc.b $FE, 4, $E0, $53, $14
0000EB0E 00                         byte_DFF8:	dc.b 0
0000EB10 00                         		even
0000EB10 00                         		even
0000EB10                            
0000EB10                            ; ===========================================================================
0000EB10                            ; ---------------------------------------------------------------------------
0000EB10                            ; Object 43 - Roller enemy (SYZ)
0000EB10                            ; ---------------------------------------------------------------------------
0000EB10                            
0000EB10                            Obj43:					; XREF: Obj_Index
0000EB10 7000                       		moveq	#0,d0
0000EB12 1028 0024                  		move.b	$24(a0),d0
0000EB16 323B 0000                  		move.w	Obj43_Index(pc,d0.w),d1
0000EB1A 4EFB 1000                  		jmp	Obj43_Index(pc,d1.w)
0000EB1E                            ; ===========================================================================
0000EB1E 0000                       Obj43_Index:	dc.w Obj43_Main-Obj43_Index
0000EB20 0000                       		dc.w Obj43_Action-Obj43_Index
0000EB22                            ; ===========================================================================
0000EB22                            
0000EB22                            Obj43_Main:				; XREF: Obj43_Index
0000EB22 117C 000E 0016             		move.b	#$E,$16(a0)
0000EB28 117C 0008 0017             		move.b	#8,$17(a0)
0000EB2E 6100 F588                  		bsr.w	ObjectFall
0000EB32 6100 0000                  		bsr.w	ObjHitFloor
0000EB36 4A41                       		tst.w	d1
0000EB38 6A00                       		bpl.s	locret_E052
0000EB3A D368 000C                  		add.w	d1,$C(a0)	; match	roller's position with the floor
0000EB3E 317C 0000 0012             		move.w	#0,$12(a0)
0000EB44 5428 0024                  		addq.b	#2,$24(a0)
0000EB48 217C 0000 0000 0004        		move.l	#Map_obj43,4(a0)
0000EB50 317C 04B8 0002             		move.w	#$4B8,2(a0)
0000EB56 117C 0004 0001             		move.b	#4,1(a0)
0000EB5C 117C 0004 0018             		move.b	#4,$18(a0)
0000EB62 117C 0010 0019             		move.b	#$10,$19(a0)
0000EB68                            
0000EB68                            locret_E052:
0000EB68 4E75                       		rts	
0000EB6A                            ; ===========================================================================
0000EB6A                            
0000EB6A                            Obj43_Action:				; XREF: Obj43_Index
0000EB6A 7000                       		moveq	#0,d0
0000EB6C 1028 0025                  		move.b	$25(a0),d0
0000EB70 323B 0000                  		move.w	Obj43_Index2(pc,d0.w),d1
0000EB74 4EBB 1000                  		jsr	Obj43_Index2(pc,d1.w)
0000EB78 43F9 0000 0000             		lea	(Ani_obj43).l,a1
0000EB7E 6100 C69C                  		bsr.w	AnimateSprite
0000EB82 3028 0008                  		move.w	8(a0),d0
0000EB86 0240 FF80                  		andi.w	#$FF80,d0
0000EB8A 3238 F700                  		move.w	($FFFFF700).w,d1
0000EB8E 0441 0080                  		subi.w	#$80,d1
0000EB92 0241 FF80                  		andi.w	#$FF80,d1
0000EB96 9041                       		sub.w	d1,d0
0000EB98 0C40 0280                  		cmpi.w	#$280,d0
0000EB9C 6E00 0000                  		bgt.w	Obj43_ChkGone
0000EBA0 6000 F568                  		bra.w	DisplaySprite
0000EBA4                            ; ===========================================================================
0000EBA4                            
0000EBA4                            Obj43_ChkGone:				; XREF: Obj43_Action
0000EBA4 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000EBA8 7000                       		moveq	#0,d0
0000EBAA 1028 0023                  		move.b	$23(a0),d0
0000EBAE 6700                       		beq.s	Obj43_Delete
0000EBB0 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000EBB6                            
0000EBB6                            Obj43_Delete:
0000EBB6 6000 F58E                  		bra.w	DeleteObject
0000EBBA                            ; ===========================================================================
0000EBBA 0000                       Obj43_Index2:	dc.w Obj43_RollChk-Obj43_Index2
0000EBBC 0000                       		dc.w Obj43_RollNoChk-Obj43_Index2
0000EBBE 0000                       		dc.w Obj43_ChkJump-Obj43_Index2
0000EBC0 0000                       		dc.w Obj43_MatchFloor-Obj43_Index2
0000EBC2                            ; ===========================================================================
0000EBC2                            
0000EBC2                            Obj43_RollChk:				; XREF: Obj43_Index2
0000EBC2 3038 D008                  		move.w	($FFFFD008).w,d0
0000EBC6 0440 0100                  		subi.w	#$100,d0
0000EBCA 6500                       		bcs.s	loc_E0D2
0000EBCC 9068 0008                  		sub.w	8(a0),d0	; check	distance between Roller	and Sonic
0000EBD0 6500                       		bcs.s	loc_E0D2
0000EBD2 5828 0025                  		addq.b	#4,$25(a0)
0000EBD6 117C 0002 001C             		move.b	#2,$1C(a0)
0000EBDC 317C 0700 0010             		move.w	#$700,$10(a0)	; move Roller horizontally
0000EBE2 117C 008E 0020             		move.b	#$8E,$20(a0)	; make Roller invincible
0000EBE8                            
0000EBE8                            loc_E0D2:
0000EBE8 588F                       		addq.l	#4,sp
0000EBEA 4E75                       		rts	
0000EBEC                            ; ===========================================================================
0000EBEC                            
0000EBEC                            Obj43_RollNoChk:			; XREF: Obj43_Index2
0000EBEC 0C28 0002 001C             		cmpi.b	#2,$1C(a0)
0000EBF2 6700                       		beq.s	loc_E0F8
0000EBF4 5368 0030                  		subq.w	#1,$30(a0)
0000EBF8 6A00                       		bpl.s	locret_E0F6
0000EBFA 117C 0001 001C             		move.b	#1,$1C(a0)
0000EC00 317C 0700 0010             		move.w	#$700,$10(a0)
0000EC06 117C 008E 0020             		move.b	#$8E,$20(a0)
0000EC0C                            
0000EC0C                            locret_E0F6:
0000EC0C 4E75                       		rts	
0000EC0E                            ; ===========================================================================
0000EC0E                            
0000EC0E                            loc_E0F8:
0000EC0E 5428 0025                  		addq.b	#2,$25(a0)
0000EC12 4E75                       		rts	
0000EC14                            ; ===========================================================================
0000EC14                            
0000EC14                            Obj43_ChkJump:				; XREF: Obj43_Index2
0000EC14 6100 0000                  		bsr.w	Obj43_Stop
0000EC18 6100 F4CA                  		bsr.w	SpeedToPos
0000EC1C 6100 0000                  		bsr.w	ObjHitFloor
0000EC20 0C41 FFF8                  		cmpi.w	#-8,d1
0000EC24 6D00                       		blt.s	Obj43_Jump
0000EC26 0C41 000C                  		cmpi.w	#$C,d1
0000EC2A 6C00                       		bge.s	Obj43_Jump
0000EC2C D368 000C                  		add.w	d1,$C(a0)
0000EC30 4E75                       		rts	
0000EC32                            ; ===========================================================================
0000EC32                            
0000EC32                            Obj43_Jump:
0000EC32 5428 0025                  		addq.b	#2,$25(a0)
0000EC36 08E8 0000 0032             		bset	#0,$32(a0)
0000EC3C 6700                       		beq.s	locret_E12E
0000EC3E 317C FA00 0012             		move.w	#-$600,$12(a0)	; move Roller vertically
0000EC44                            
0000EC44                            locret_E12E:
0000EC44 4E75                       		rts	
0000EC46                            ; ===========================================================================
0000EC46                            
0000EC46                            Obj43_MatchFloor:			; XREF: Obj43_Index2
0000EC46 6100 F470                  		bsr.w	ObjectFall
0000EC4A 4A68 0012                  		tst.w	$12(a0)
0000EC4E 6B00                       		bmi.s	locret_E150
0000EC50 6100 0000                  		bsr.w	ObjHitFloor
0000EC54 4A41                       		tst.w	d1
0000EC56 6A00                       		bpl.s	locret_E150
0000EC58 D368 000C                  		add.w	d1,$C(a0)	; match	Roller's position with the floor
0000EC5C 5528 0025                  		subq.b	#2,$25(a0)
0000EC60 317C 0000 0012             		move.w	#0,$12(a0)
0000EC66                            
0000EC66                            locret_E150:
0000EC66 4E75                       		rts	
0000EC68                            
0000EC68                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000EC68                            
0000EC68                            
0000EC68                            Obj43_Stop:				; XREF: Obj43_ChkJump
0000EC68 4A28 0032                  		tst.b	$32(a0)
0000EC6C 6B00                       		bmi.s	locret_E188
0000EC6E 3038 D008                  		move.w	($FFFFD008).w,d0
0000EC72 0440 0030                  		subi.w	#$30,d0
0000EC76 9068 0008                  		sub.w	8(a0),d0
0000EC7A 6400                       		bcc.s	locret_E188
0000EC7C 117C 0000 001C             		move.b	#0,$1C(a0)
0000EC82 117C 000E 0020             		move.b	#$E,$20(a0)
0000EC88 4268 0010                  		clr.w	$10(a0)
0000EC8C 317C 0078 0030             		move.w	#120,$30(a0)	; set waiting time to 2	seconds
0000EC92 117C 0002 0025             		move.b	#2,$25(a0)
0000EC98 08E8 0007 0032             		bset	#7,$32(a0)
0000EC9E                            
0000EC9E                            locret_E188:
0000EC9E 4E75                       		rts	
0000ECA0                            ; End of function Obj43_Stop
0000ECA0                            
0000ECA0                            ; ===========================================================================
0000ECA0                            Ani_obj43:
0000ECA0                            	include "_anim\obj43.asm"
0000ECA0                            ; ---------------------------------------------------------------------------
0000ECA0                            ; Animation script - Roller enemy
0000ECA0                            ; ---------------------------------------------------------------------------
0000ECA0 0000                       		dc.w byte_E190-Ani_obj43
0000ECA2 0000                       		dc.w byte_E196-Ani_obj43
0000ECA4 0000                       		dc.w byte_E19C-Ani_obj43
0000ECA6 0F02 0100 FE01             byte_E190:	dc.b $F, 2, 1, 0, $FE, 1
0000ECAC 0F01 02FD 0200             byte_E196:	dc.b $F, 1, 2, $FD, 2, 0
0000ECB2 0303 0402 FF               byte_E19C:	dc.b 3,	3, 4, 2, $FF
0000ECB8 00                         		even
0000ECB8 00                         		even
0000ECB8                            
0000ECB8                            ; ---------------------------------------------------------------------------
0000ECB8                            ; Sprite mappings - Roller enemy (SYZ)
0000ECB8                            ; ---------------------------------------------------------------------------
0000ECB8                            Map_obj43:
0000ECB8                            	include "_maps\obj43.asm"
0000ECB8                            ; ---------------------------------------------------------------------------
0000ECB8                            ; Sprite mappings - Roller enemy (SYZ)
0000ECB8                            ; ---------------------------------------------------------------------------
0000ECB8 0000 0000                  		dc.w byte_E1AC-Map_obj43, byte_E1B7-Map_obj43
0000ECBC 0000 0000                  		dc.w byte_E1C2-Map_obj43, byte_E1C8-Map_obj43
0000ECC0 0000                       		dc.w byte_E1CE-Map_obj43
0000ECC2 02                         byte_E1AC:	dc.b 2
0000ECC3 DE0E 0000 F0               		dc.b $DE, $E, 0, 0, $F0
0000ECC8 F60E 000C F0               		dc.b $F6, $E, 0, $C, $F0
0000ECCD 02                         byte_E1B7:	dc.b 2
0000ECCE E60E 0000 F0               		dc.b $E6, $E, 0, 0, $F0
0000ECD3 FE0D 0018 F0               		dc.b $FE, $D, 0, $18, $F0
0000ECD8 01                         byte_E1C2:	dc.b 1
0000ECD9 F00F 0020 F0               		dc.b $F0, $F, 0, $20, $F0
0000ECDE 01                         byte_E1C8:	dc.b 1
0000ECDF F00F 0030 F0               		dc.b $F0, $F, 0, $30, $F0
0000ECE4 01                         byte_E1CE:	dc.b 1
0000ECE5 F00F 0040 F0               		dc.b $F0, $F, 0, $40, $F0
0000ECEA                            		even
0000ECEA                            		even
0000ECEA                            
0000ECEA                            ; ===========================================================================
0000ECEA                            ; ---------------------------------------------------------------------------
0000ECEA                            ; Object 44 - walls (GHZ)
0000ECEA                            ; ---------------------------------------------------------------------------
0000ECEA                            
0000ECEA                            Obj44:					; XREF: Obj_Index
0000ECEA 7000                       		moveq	#0,d0
0000ECEC 1028 0024                  		move.b	$24(a0),d0
0000ECF0 323B 0000                  		move.w	Obj44_Index(pc,d0.w),d1
0000ECF4 4EFB 1000                  		jmp	Obj44_Index(pc,d1.w)
0000ECF8                            ; ===========================================================================
0000ECF8 0000                       Obj44_Index:	dc.w Obj44_Main-Obj44_Index
0000ECFA 0000                       		dc.w Obj44_Solid-Obj44_Index
0000ECFC 0000                       		dc.w Obj44_Display-Obj44_Index
0000ECFE                            ; ===========================================================================
0000ECFE                            
0000ECFE                            Obj44_Main:				; XREF: Obj44_Index
0000ECFE 5428 0024                  		addq.b	#2,$24(a0)
0000ED02 217C 0000 0000 0004        		move.l	#Map_obj44,4(a0)
0000ED0A 317C 434C 0002             		move.w	#$434C,2(a0)
0000ED10 0028 0004 0001             		ori.b	#4,1(a0)
0000ED16 117C 0008 0019             		move.b	#8,$19(a0)
0000ED1C 117C 0006 0018             		move.b	#6,$18(a0)
0000ED22 1168 0028 001A             		move.b	$28(a0),$1A(a0)	; copy object type number to frame number
0000ED28 08A8 0004 001A             		bclr	#4,$1A(a0)	; clear	4th bit	(deduct	$10)
0000ED2E 6700                       		beq.s	Obj44_Solid	; make object solid if 4th bit = 0
0000ED30 5428 0024                  		addq.b	#2,$24(a0)
0000ED34 6000                       		bra.s	Obj44_Display	; don't make it solid if 4th bit = 1
0000ED36                            ; ===========================================================================
0000ED36                            
0000ED36                            Obj44_Solid:				; XREF: Obj44_Index
0000ED36 323C 0013                  		move.w	#$13,d1
0000ED3A 343C 0028                  		move.w	#$28,d2
0000ED3E 6100 A7C6                  		bsr.w	Obj44_SolidWall
0000ED42                            
0000ED42                            Obj44_Display:				; XREF: Obj44_Index
0000ED42 6100 F3C6                  		bsr.w	DisplaySprite
0000ED46 3028 0008                  		move.w	8(a0),d0
0000ED4A 0240 FF80                  		andi.w	#$FF80,d0
0000ED4E 3238 F700                  		move.w	($FFFFF700).w,d1
0000ED52 0441 0080                  		subi.w	#$80,d1
0000ED56 0241 FF80                  		andi.w	#$FF80,d1
0000ED5A 9041                       		sub.w	d1,d0
0000ED5C 0C40 0280                  		cmpi.w	#$280,d0
0000ED60 6200 F3E4                  		bhi.w	DeleteObject
0000ED64 4E75                       		rts	
0000ED66                            ; ===========================================================================
0000ED66                            ; ---------------------------------------------------------------------------
0000ED66                            ; Sprite mappings - walls (GHZ)
0000ED66                            ; ---------------------------------------------------------------------------
0000ED66                            Map_obj44:
0000ED66                            	include "_maps\obj44.asm"
0000ED66                            ; ---------------------------------------------------------------------------
0000ED66                            ; Sprite mappings - walls (GHZ)
0000ED66                            ; ---------------------------------------------------------------------------
0000ED66 0000                       		dc.w byte_E256-Map_obj44
0000ED68 0000                       		dc.w byte_E26B-Map_obj44
0000ED6A 0000                       		dc.w byte_E280-Map_obj44
0000ED6C 04                         byte_E256:	dc.b 4
0000ED6D E005 0004 F8               		dc.b $E0, 5, 0,	4, $F8
0000ED72 F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000ED77 0005 0008 F8               		dc.b 0,	5, 0, 8, $F8
0000ED7C 1005 0008 F8               		dc.b $10, 5, 0,	8, $F8
0000ED81 04                         byte_E26B:	dc.b 4
0000ED82 E005 0008 F8               		dc.b $E0, 5, 0,	8, $F8
0000ED87 F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000ED8C 0005 0008 F8               		dc.b 0,	5, 0, 8, $F8
0000ED91 1005 0008 F8               		dc.b $10, 5, 0,	8, $F8
0000ED96 04                         byte_E280:	dc.b 4
0000ED97 E005 0000 F8               		dc.b $E0, 5, 0,	0, $F8
0000ED9C F005 0000 F8               		dc.b $F0, 5, 0,	0, $F8
0000EDA1 0005 0000 F8               		dc.b 0,	5, 0, 0, $F8
0000EDA6 1005 0000 F8               		dc.b $10, 5, 0,	0, $F8
0000EDAC 00                         		even
0000EDAC 00                         		even
0000EDAC                            
0000EDAC                            ; ===========================================================================
0000EDAC                            ; ---------------------------------------------------------------------------
0000EDAC                            ; Object 13 - lava ball	producer (MZ, SLZ)
0000EDAC                            ; ---------------------------------------------------------------------------
0000EDAC                            
0000EDAC                            Obj13:					; XREF: Obj_Index
0000EDAC 7000                       		moveq	#0,d0
0000EDAE 1028 0024                  		move.b	$24(a0),d0
0000EDB2 323B 0000                  		move.w	Obj13_Index(pc,d0.w),d1
0000EDB6 4EBB 1000                  		jsr	Obj13_Index(pc,d1.w)
0000EDBA 6000 0000                  		bra.w	Obj14_ChkDel
0000EDBE                            ; ===========================================================================
0000EDBE 0000                       Obj13_Index:	dc.w Obj13_Main-Obj13_Index
0000EDC0 0000                       		dc.w Obj13_MakeLava-Obj13_Index
0000EDC2                            ; ---------------------------------------------------------------------------
0000EDC2                            ;
0000EDC2                            ; Lava ball production rates
0000EDC2                            ;
0000EDC2 1E3C 5A78 96B4             Obj13_Rates:	dc.b 30, 60, 90, 120, 150, 180
0000EDC8                            ; ===========================================================================
0000EDC8                            
0000EDC8                            Obj13_Main:				; XREF: Obj13_Index
0000EDC8 5428 0024                  		addq.b	#2,$24(a0)
0000EDCC 1028 0028                  		move.b	$28(a0),d0
0000EDD0 E848                       		lsr.w	#4,d0
0000EDD2 0240 000F                  		andi.w	#$F,d0
0000EDD6 117B 00EA 001F             		move.b	Obj13_Rates(pc,d0.w),$1F(a0)
0000EDDC 1168 001F 001E             		move.b	$1F(a0),$1E(a0)	; set time delay for lava balls
0000EDE2 0228 000F 0028             		andi.b	#$F,$28(a0)
0000EDE8                            
0000EDE8                            Obj13_MakeLava:				; XREF: Obj13_Index
0000EDE8 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from time delay
0000EDEC 6600                       		bne.s	locret_E302	; if time still	remains, branch
0000EDEE 1168 001F 001E             		move.b	$1F(a0),$1E(a0)	; reset	time delay
0000EDF4 6100 F590                  		bsr.w	ChkObjOnScreen
0000EDF8 6600                       		bne.s	locret_E302
0000EDFA 6100 F7A4                  		bsr.w	SingleObjLoad
0000EDFE 6600                       		bne.s	locret_E302
0000EE00 12BC 0014                  		move.b	#$14,0(a1)	; load lava ball object
0000EE04 3368 0008 0008             		move.w	8(a0),8(a1)
0000EE0A 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000EE10 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000EE16                            
0000EE16                            locret_E302:
0000EE16 4E75                       		rts	
0000EE18                            ; ===========================================================================
0000EE18                            ; ---------------------------------------------------------------------------
0000EE18                            ; Object 14 - lava balls (MZ, SLZ)
0000EE18                            ; ---------------------------------------------------------------------------
0000EE18                            
0000EE18                            Obj14:					; XREF: Obj_Index
0000EE18 7000                       		moveq	#0,d0
0000EE1A 1028 0024                  		move.b	$24(a0),d0
0000EE1E 323B 0000                  		move.w	Obj14_Index(pc,d0.w),d1
0000EE22 4EBB 1000                  		jsr	Obj14_Index(pc,d1.w)
0000EE26 6000 F2E2                  		bra.w	DisplaySprite
0000EE2A                            ; ===========================================================================
0000EE2A 0000                       Obj14_Index:	dc.w Obj14_Main-Obj14_Index
0000EE2C 0000                       		dc.w Obj14_Action-Obj14_Index
0000EE2E 0000                       		dc.w Obj14_Delete-Obj14_Index
0000EE30                            
0000EE30 FC00 FB00 FA00 F900 FE00   Obj14_Speeds:	dc.w $FC00, $FB00, $FA00, $F900, $FE00
0000EE3A 0200 FE00 0200 0000        		dc.w $200, $FE00, $200,	0
0000EE42                            ; ===========================================================================
0000EE42                            
0000EE42                            Obj14_Main:				; XREF: Obj14_Index
0000EE42 5428 0024                  		addq.b	#2,$24(a0)
0000EE46 117C 0008 0016             		move.b	#8,$16(a0)
0000EE4C 117C 0008 0017             		move.b	#8,$17(a0)
0000EE52 217C 0000 BE74 0004        		move.l	#Map_obj14,4(a0)
0000EE5A 317C 0345 0002             		move.w	#$345,2(a0)
0000EE60 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
0000EE66 6600                       		bne.s	loc_E35A
0000EE68 317C 0480 0002             		move.w	#$480,2(a0)	; SLZ specific code
0000EE6E                            
0000EE6E                            loc_E35A:
0000EE6E 117C 0004 0001             		move.b	#4,1(a0)
0000EE74 117C 0003 0018             		move.b	#3,$18(a0)
0000EE7A 117C 008B 0020             		move.b	#$8B,$20(a0)
0000EE80 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000EE86 4A28 0029                  		tst.b	$29(a0)
0000EE8A 6700                       		beq.s	Obj14_SetSpeed
0000EE8C 5428 0018                  		addq.b	#2,$18(a0)
0000EE90                            
0000EE90                            Obj14_SetSpeed:
0000EE90 7000                       		moveq	#0,d0
0000EE92 1028 0028                  		move.b	$28(a0),d0
0000EE96 D040                       		add.w	d0,d0
0000EE98 317B 0096 0012             		move.w	Obj14_Speeds(pc,d0.w),$12(a0) ;	load object speed (vertical)
0000EE9E 117C 0008 0019             		move.b	#8,$19(a0)
0000EEA4 0C28 0006 0028             		cmpi.b	#6,$28(a0)	; is object type below $6 ?
0000EEAA 6500                       		bcs.s	Obj14_PlaySnd	; if yes, branch
0000EEAC 117C 0010 0019             		move.b	#$10,$19(a0)
0000EEB2 117C 0002 001C             		move.b	#2,$1C(a0)	; use horizontal animation
0000EEB8 3168 0012 0010             		move.w	$12(a0),$10(a0)	; set horizontal speed
0000EEBE 317C 0000 0012             		move.w	#0,$12(a0)	; delete vertical speed
0000EEC4                            
0000EEC4                            Obj14_PlaySnd:
0000EEC4 303C 00AE                  		move.w	#$AE,d0
0000EEC8 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play lava ball sound
0000EECE                            
0000EECE                            Obj14_Action:				; XREF: Obj14_Index
0000EECE 7000                       		moveq	#0,d0
0000EED0 1028 0028                  		move.b	$28(a0),d0
0000EED4 D040                       		add.w	d0,d0
0000EED6 323B 0000                  		move.w	Obj14_TypeIndex(pc,d0.w),d1
0000EEDA 4EBB 1000                  		jsr	Obj14_TypeIndex(pc,d1.w)
0000EEDE 6100 F204                  		bsr.w	SpeedToPos
0000EEE2 43F9 0000 0000             		lea	(Ani_obj14).l,a1
0000EEE8 6100 C332                  		bsr.w	AnimateSprite
0000EEEC                            
0000EEEC                            Obj14_ChkDel:				; XREF: Obj13
0000EEEC 3028 0008                  		move.w	8(a0),d0
0000EEF0 0240 FF80                  		andi.w	#$FF80,d0
0000EEF4 3238 F700                  		move.w	($FFFFF700).w,d1
0000EEF8 0441 0080                  		subi.w	#$80,d1
0000EEFC 0241 FF80                  		andi.w	#$FF80,d1
0000EF00 9041                       		sub.w	d1,d0
0000EF02 0C40 0280                  		cmpi.w	#$280,d0
0000EF06 6200 F23E                  		bhi.w	DeleteObject
0000EF0A 4E75                       		rts	
0000EF0C                            ; ===========================================================================
0000EF0C 0000 0000                  Obj14_TypeIndex:dc.w Obj14_Type00-Obj14_TypeIndex, Obj14_Type00-Obj14_TypeIndex
0000EF10 0000 0000                  		dc.w Obj14_Type00-Obj14_TypeIndex, Obj14_Type00-Obj14_TypeIndex
0000EF14 0000 0000                  		dc.w Obj14_Type04-Obj14_TypeIndex, Obj14_Type05-Obj14_TypeIndex
0000EF18 0000 0000                  		dc.w Obj14_Type06-Obj14_TypeIndex, Obj14_Type07-Obj14_TypeIndex
0000EF1C 0000                       		dc.w Obj14_Type08-Obj14_TypeIndex
0000EF1E                            ; ===========================================================================
0000EF1E                            ; lavaball types 00-03 fly up and fall back down
0000EF1E                            
0000EF1E                            Obj14_Type00:				; XREF: Obj14_TypeIndex
0000EF1E 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's downward speed
0000EF24 3028 0030                  		move.w	$30(a0),d0
0000EF28 B068 000C                  		cmp.w	$C(a0),d0	; has object fallen back to its	original position?
0000EF2C 6400                       		bcc.s	loc_E41E	; if not, branch
0000EF2E 5428 0024                  		addq.b	#2,$24(a0)	; goto "Obj14_Delete" routine
0000EF32                            
0000EF32                            loc_E41E:
0000EF32 08A8 0001 0022             		bclr	#1,$22(a0)
0000EF38 4A68 0012                  		tst.w	$12(a0)
0000EF3C 6A00                       		bpl.s	locret_E430
0000EF3E 08E8 0001 0022             		bset	#1,$22(a0)
0000EF44                            
0000EF44                            locret_E430:
0000EF44 4E75                       		rts	
0000EF46                            ; ===========================================================================
0000EF46                            ; lavaball type	04 flies up until it hits the ceiling
0000EF46                            
0000EF46                            Obj14_Type04:				; XREF: Obj14_TypeIndex
0000EF46 08E8 0001 0022             		bset	#1,$22(a0)
0000EF4C 6100 0000                  		bsr.w	ObjHitCeiling
0000EF50 4A41                       		tst.w	d1
0000EF52 6A00                       		bpl.s	locret_E452
0000EF54 117C 0008 0028             		move.b	#8,$28(a0)
0000EF5A 117C 0001 001C             		move.b	#1,$1C(a0)
0000EF60 317C 0000 0012             		move.w	#0,$12(a0)	; stop the object when it touches the ceiling
0000EF66                            
0000EF66                            locret_E452:
0000EF66 4E75                       		rts	
0000EF68                            ; ===========================================================================
0000EF68                            ; lavaball type	05 falls down until it hits the	floor
0000EF68                            
0000EF68                            Obj14_Type05:				; XREF: Obj14_TypeIndex
0000EF68 08A8 0001 0022             		bclr	#1,$22(a0)
0000EF6E 6100 0000                  		bsr.w	ObjHitFloor
0000EF72 4A41                       		tst.w	d1
0000EF74 6A00                       		bpl.s	locret_E474
0000EF76 117C 0008 0028             		move.b	#8,$28(a0)
0000EF7C 117C 0001 001C             		move.b	#1,$1C(a0)
0000EF82 317C 0000 0012             		move.w	#0,$12(a0)	; stop the object when it touches the floor
0000EF88                            
0000EF88                            locret_E474:
0000EF88 4E75                       		rts	
0000EF8A                            ; ===========================================================================
0000EF8A                            ; lavaball types 06-07 move sideways
0000EF8A                            
0000EF8A                            Obj14_Type06:				; XREF: Obj14_TypeIndex
0000EF8A 08E8 0000 0022             		bset	#0,$22(a0)
0000EF90 76F8                       		moveq	#-8,d3
0000EF92 6100 0000                  		bsr.w	ObjHitWallLeft
0000EF96 4A41                       		tst.w	d1
0000EF98 6A00                       		bpl.s	locret_E498
0000EF9A 117C 0008 0028             		move.b	#8,$28(a0)
0000EFA0 117C 0003 001C             		move.b	#3,$1C(a0)
0000EFA6 317C 0000 0010             		move.w	#0,$10(a0)	; stop object when it touches a	wall
0000EFAC                            
0000EFAC                            locret_E498:
0000EFAC 4E75                       		rts	
0000EFAE                            ; ===========================================================================
0000EFAE                            
0000EFAE                            Obj14_Type07:				; XREF: Obj14_TypeIndex
0000EFAE 08A8 0000 0022             		bclr	#0,$22(a0)
0000EFB4 7608                       		moveq	#8,d3
0000EFB6 6100 0000                  		bsr.w	ObjHitWallRight
0000EFBA 4A41                       		tst.w	d1
0000EFBC 6A00                       		bpl.s	locret_E4BC
0000EFBE 117C 0008 0028             		move.b	#8,$28(a0)
0000EFC4 117C 0003 001C             		move.b	#3,$1C(a0)
0000EFCA 317C 0000 0010             		move.w	#0,$10(a0)	; stop object when it touches a	wall
0000EFD0                            
0000EFD0                            locret_E4BC:
0000EFD0 4E75                       		rts	
0000EFD2                            ; ===========================================================================
0000EFD2                            
0000EFD2                            Obj14_Type08:				; XREF: Obj14_TypeIndex
0000EFD2 4E75                       		rts	
0000EFD4                            ; ===========================================================================
0000EFD4                            
0000EFD4                            Obj14_Delete:				; XREF: Obj14_Index
0000EFD4 6000 F170                  		bra.w	DeleteObject
0000EFD8                            ; ===========================================================================
0000EFD8                            Ani_obj14:
0000EFD8                            	include "_anim\obj14.asm"
0000EFD8                            ; ---------------------------------------------------------------------------
0000EFD8                            ; Animation script - lava balls
0000EFD8                            ; ---------------------------------------------------------------------------
0000EFD8 0000                       		dc.w byte_E4CC-Ani_obj14
0000EFDA 0000                       		dc.w byte_E4D2-Ani_obj14
0000EFDC 0000                       		dc.w byte_E4D6-Ani_obj14
0000EFDE 0000                       		dc.w byte_E4DC-Ani_obj14
0000EFE0 0500 2001 21FF             byte_E4CC:	dc.b 5,	0, $20,	1, $21,	$FF
0000EFE6 0502 FC00                  byte_E4D2:	dc.b 5,	2, $FC,	0
0000EFEA 0503 4304 44FF             byte_E4D6:	dc.b 5,	3, $43,	4, $44,	$FF
0000EFF0 0505 FC00                  byte_E4DC:	dc.b 5,	5, $FC,	0
0000EFF4                            		even
0000EFF4                            		even
0000EFF4                            
0000EFF4                            ; ===========================================================================
0000EFF4                            ; ---------------------------------------------------------------------------
0000EFF4                            ; Object 6D - flame thrower (SBZ)
0000EFF4                            ; ---------------------------------------------------------------------------
0000EFF4                            
0000EFF4                            Obj6D:					; XREF: Obj_Index
0000EFF4 7000                       		moveq	#0,d0
0000EFF6 1028 0024                  		move.b	$24(a0),d0
0000EFFA 323B 0000                  		move.w	Obj6D_Index(pc,d0.w),d1
0000EFFE 4EFB 1000                  		jmp	Obj6D_Index(pc,d1.w)
0000F002                            ; ===========================================================================
0000F002 0000                       Obj6D_Index:	dc.w Obj6D_Main-Obj6D_Index
0000F004 0000                       		dc.w Obj6D_Action-Obj6D_Index
0000F006                            ; ===========================================================================
0000F006                            
0000F006                            Obj6D_Main:				; XREF: Obj6D_Index
0000F006 5428 0024                  		addq.b	#2,$24(a0)
0000F00A 217C 0000 0000 0004        		move.l	#Map_obj6D,4(a0)
0000F012 317C 83D9 0002             		move.w	#$83D9,2(a0)
0000F018 0028 0004 0001             		ori.b	#4,1(a0)
0000F01E 117C 0001 0018             		move.b	#1,$18(a0)
0000F024 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000F02A 117C 000C 0019             		move.b	#$C,$19(a0)
0000F030 1028 0028                  		move.b	$28(a0),d0
0000F034 0240 00F0                  		andi.w	#$F0,d0		; read 1st digit of object type
0000F038 D040                       		add.w	d0,d0		; multiply by 2
0000F03A 3140 0030                  		move.w	d0,$30(a0)
0000F03E 3140 0032                  		move.w	d0,$32(a0)	; set flaming time
0000F042 1028 0028                  		move.b	$28(a0),d0
0000F046 0240 000F                  		andi.w	#$F,d0		; read 2nd digit of object type
0000F04A EB48                       		lsl.w	#5,d0		; multiply by $20
0000F04C 3140 0034                  		move.w	d0,$34(a0)	; set pause time
0000F050 117C 000A 0036             		move.b	#$A,$36(a0)
0000F056 0828 0001 0022             		btst	#1,$22(a0)
0000F05C 6700                       		beq.s	Obj6D_Action
0000F05E 117C 0002 001C             		move.b	#2,$1C(a0)
0000F064 117C 0015 0036             		move.b	#$15,$36(a0)
0000F06A                            
0000F06A                            Obj6D_Action:				; XREF: Obj6D_Index
0000F06A 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time
0000F06E 6A00                       		bpl.s	loc_E57A	; if time remains, branch
0000F070 3168 0034 0030             		move.w	$34(a0),$30(a0)	; begin	pause time
0000F076 0868 0000 001C             		bchg	#0,$1C(a0)
0000F07C 6700                       		beq.s	loc_E57A
0000F07E 3168 0032 0030             		move.w	$32(a0),$30(a0)	; begin	flaming	time
0000F084 303C 00B3                  		move.w	#$B3,d0
0000F088 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play flame sound
0000F08E                            
0000F08E                            loc_E57A:
0000F08E 43F9 0000 0000             		lea	(Ani_obj6D).l,a1
0000F094 6100 C186                  		bsr.w	AnimateSprite
0000F098 117C 0000 0020             		move.b	#0,$20(a0)
0000F09E 1028 0036                  		move.b	$36(a0),d0
0000F0A2 B028 001A                  		cmp.b	$1A(a0),d0
0000F0A6 6600                       		bne.s	Obj6D_ChkDel
0000F0A8 117C 00A3 0020             		move.b	#$A3,$20(a0)
0000F0AE                            
0000F0AE                            Obj6D_ChkDel:
0000F0AE 3028 0008                  		move.w	8(a0),d0
0000F0B2 0240 FF80                  		andi.w	#$FF80,d0
0000F0B6 3238 F700                  		move.w	($FFFFF700).w,d1
0000F0BA 0441 0080                  		subi.w	#$80,d1
0000F0BE 0241 FF80                  		andi.w	#$FF80,d1
0000F0C2 9041                       		sub.w	d1,d0
0000F0C4 0C40 0280                  		cmpi.w	#$280,d0
0000F0C8 6200 F07C                  		bhi.w	DeleteObject
0000F0CC 6000 F03C                  		bra.w	DisplaySprite
0000F0D0                            ; ===========================================================================
0000F0D0                            Ani_obj6D:
0000F0D0                            	include "_anim\obj6D.asm"
0000F0D0                            ; ---------------------------------------------------------------------------
0000F0D0                            ; Animation script - flamethrower (SBZ)
0000F0D0                            ; ---------------------------------------------------------------------------
0000F0D0 0000                       		dc.w byte_E5C4-Ani_obj6D
0000F0D2 0000                       		dc.w byte_E5D2-Ani_obj6D
0000F0D4 0000                       		dc.w byte_E5DC-Ani_obj6D
0000F0D6 0000                       		dc.w byte_E5EA-Ani_obj6D
0000F0D8 0300 0102 0304 0506 0708+  byte_E5C4:	dc.b 3,	0, 1, 2, 3, 4, 5, 6, 7,	8, 9, $A, $FE, 2
0000F0E6 0009 0705 0301 00FE 0100   byte_E5D2:	dc.b 0,	9, 7, 5, 3, 1, 0, $FE, 1, 0
0000F0F0 030B 0C0D 0E0F 1011 1213+  byte_E5DC:	dc.b 3,	$B, $C,	$D, $E,	$F, $10, $11, $12, $13,	$14, $15, $FE, 2
0000F0FE 0014 1211 0F0D 0BFE 0100   byte_E5EA:	dc.b 0,	$14, $12, $11, $F, $D, $B, $FE,	1, 0
0000F108                            		even
0000F108                            		even
0000F108                            
0000F108                            ; ---------------------------------------------------------------------------
0000F108                            ; Sprite mappings - flame thrower (SBZ)
0000F108                            ; ---------------------------------------------------------------------------
0000F108                            Map_obj6D:
0000F108                            	include "_maps\obj6D.asm"
0000F108                            ; ---------------------------------------------------------------------------
0000F108                            ; Sprite mappings - flame thrower (SBZ)
0000F108                            ; ---------------------------------------------------------------------------
0000F108 0000 0000                  		dc.w byte_E620-Map_obj6D, byte_E626-Map_obj6D
0000F10C 0000 0000                  		dc.w byte_E631-Map_obj6D, byte_E63C-Map_obj6D
0000F110 0000 0000                  		dc.w byte_E64C-Map_obj6D, byte_E65C-Map_obj6D
0000F114 0000 0000                  		dc.w byte_E671-Map_obj6D, byte_E686-Map_obj6D
0000F118 0000 0000                  		dc.w byte_E6A0-Map_obj6D, byte_E6BA-Map_obj6D
0000F11C 0000 0000                  		dc.w byte_E6D9-Map_obj6D, byte_E6F8-Map_obj6D
0000F120 0000 0000                  		dc.w byte_E6FE-Map_obj6D, byte_E709-Map_obj6D
0000F124 0000 0000                  		dc.w byte_E714-Map_obj6D, byte_E724-Map_obj6D
0000F128 0000 0000                  		dc.w byte_E734-Map_obj6D, byte_E749-Map_obj6D
0000F12C 0000 0000                  		dc.w byte_E75E-Map_obj6D, byte_E778-Map_obj6D
0000F130 0000 0000                  		dc.w byte_E792-Map_obj6D, byte_E7B1-Map_obj6D
0000F134 01                         byte_E620:	dc.b 1
0000F135 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F13A 02                         byte_E626:	dc.b 2
0000F13B 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F140 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F145 02                         byte_E631:	dc.b 2
0000F146 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F14B 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F150 03                         byte_E63C:	dc.b 3
0000F151 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000F156 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F15B 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F160 03                         byte_E64C:	dc.b 3
0000F161 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000F166 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F16B 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F170 04                         byte_E65C:	dc.b 4
0000F171 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000F176 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000F17B 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F180 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F185 04                         byte_E671:	dc.b 4
0000F186 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000F18B 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000F190 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F195 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F19A 05                         byte_E686:	dc.b 5
0000F19B F80B 0008 F4               		dc.b $F8, $B, 0, 8, $F4
0000F1A0 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000F1A5 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000F1AA 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F1AF 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F1B4 05                         byte_E6A0:	dc.b 5
0000F1B5 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000F1BA 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000F1BF 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000F1C4 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F1C9 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F1CE 06                         byte_E6BA:	dc.b 6
0000F1CF E80B 0008 F4               		dc.b $E8, $B, 0, 8, $F4
0000F1D4 F70B 0008 F4               		dc.b $F7, $B, 0, 8, $F4
0000F1D9 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000F1DE 0F06 0002 F8               		dc.b $F, 6, 0, 2, $F8
0000F1E3 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F1E8 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F1ED 06                         byte_E6D9:	dc.b 6
0000F1EE E70B 0808 F4               		dc.b $E7, $B, 8, 8, $F4
0000F1F3 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000F1F8 0706 0802 F8               		dc.b 7,	6, 8, 2, $F8
0000F1FD 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000F202 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F207 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F20C 01                         byte_E6F8:	dc.b 1
0000F20D 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F212 02                         byte_E6FE:	dc.b 2
0000F213 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F218 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F21D 02                         byte_E709:	dc.b 2
0000F21E 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F223 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F228 03                         byte_E714:	dc.b 3
0000F229 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000F22E 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F233 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F238 03                         byte_E724:	dc.b 3
0000F239 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000F23E 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F243 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F248 04                         byte_E734:	dc.b 4
0000F249 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000F24E 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000F253 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F258 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F25D 04                         byte_E749:	dc.b 4
0000F25E 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000F263 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000F268 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F26D 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F272 05                         byte_E75E:	dc.b 5
0000F273 F80B 0008 F4               		dc.b $F8, $B, 0, 8, $F4
0000F278 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000F27D 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000F282 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F287 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F28C 05                         byte_E778:	dc.b 5
0000F28D F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000F292 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000F297 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000F29C 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F2A1 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F2A6 06                         byte_E792:	dc.b 6
0000F2A7 E80B 0008 F4               		dc.b $E8, $B, 0, 8, $F4
0000F2AC F70B 0008 F4               		dc.b $F7, $B, 0, 8, $F4
0000F2B1 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000F2B6 0F06 0002 F8               		dc.b $F, 6, 0, 2, $F8
0000F2BB 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F2C0 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F2C5 06                         byte_E7B1:	dc.b 6
0000F2C6 E70B 0808 F4               		dc.b $E7, $B, 8, 8, $F4
0000F2CB F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000F2D0 0706 0802 F8               		dc.b 7,	6, 8, 2, $F8
0000F2D5 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000F2DA 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F2DF 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F2E4                            		even
0000F2E4                            		even
0000F2E4                            
0000F2E4                            ; ===========================================================================
0000F2E4                            ; ---------------------------------------------------------------------------
0000F2E4                            ; Object 46 - solid blocks and blocks that fall	from the ceiling (MZ)
0000F2E4                            ; ---------------------------------------------------------------------------
0000F2E4                            
0000F2E4                            Obj46:					; XREF: Obj_Index
0000F2E4 7000                       		moveq	#0,d0
0000F2E6 1028 0024                  		move.b	$24(a0),d0
0000F2EA 323B 0000                  		move.w	Obj46_Index(pc,d0.w),d1
0000F2EE 4EFB 1000                  		jmp	Obj46_Index(pc,d1.w)
0000F2F2                            ; ===========================================================================
0000F2F2 0000                       Obj46_Index:	dc.w Obj46_Main-Obj46_Index
0000F2F4 0000                       		dc.w Obj46_Action-Obj46_Index
0000F2F6                            ; ===========================================================================
0000F2F6                            
0000F2F6                            Obj46_Main:				; XREF: Obj46_Index
0000F2F6 5428 0024                  		addq.b	#2,$24(a0)
0000F2FA 117C 000F 0016             		move.b	#$F,$16(a0)
0000F300 117C 000F 0017             		move.b	#$F,$17(a0)
0000F306 217C 0000 0000 0004        		move.l	#Map_obj46,4(a0)
0000F30E 317C 4000 0002             		move.w	#$4000,2(a0)
0000F314 117C 0004 0001             		move.b	#4,1(a0)
0000F31A 117C 0003 0018             		move.b	#3,$18(a0)
0000F320 117C 0010 0019             		move.b	#$10,$19(a0)
0000F326 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000F32C 317C 05C0 0032             		move.w	#$5C0,$32(a0)
0000F332                            
0000F332                            Obj46_Action:				; XREF: Obj46_Index
0000F332 4A28 0001                  		tst.b	1(a0)
0000F336 6A00                       		bpl.s	Obj46_ChkDel
0000F338 7000                       		moveq	#0,d0
0000F33A 1028 0028                  		move.b	$28(a0),d0	; get object type
0000F33E 0240 0007                  		andi.w	#7,d0		; read only the	1st digit
0000F342 D040                       		add.w	d0,d0
0000F344 323B 0000                  		move.w	Obj46_TypeIndex(pc,d0.w),d1
0000F348 4EBB 1000                  		jsr	Obj46_TypeIndex(pc,d1.w)
0000F34C 323C 001B                  		move.w	#$1B,d1
0000F350 343C 0010                  		move.w	#$10,d2
0000F354 363C 0011                  		move.w	#$11,d3
0000F358 3828 0008                  		move.w	8(a0),d4
0000F35C 6100 0000                  		bsr.w	SolidObject
0000F360                            
0000F360                            Obj46_ChkDel:
0000F360 6100 EDA8                  		bsr.w	DisplaySprite
0000F364 3028 0008                  		move.w	8(a0),d0
0000F368 0240 FF80                  		andi.w	#$FF80,d0
0000F36C 3238 F700                  		move.w	($FFFFF700).w,d1
0000F370 0441 0080                  		subi.w	#$80,d1
0000F374 0241 FF80                  		andi.w	#$FF80,d1
0000F378 9041                       		sub.w	d1,d0
0000F37A 0C40 0280                  		cmpi.w	#$280,d0
0000F37E 6200 EDC6                  		bhi.w	DeleteObject
0000F382 4E75                       		rts	
0000F384                            ; ===========================================================================
0000F384 0000                       Obj46_TypeIndex:dc.w Obj46_Type00-Obj46_TypeIndex
0000F386 0000                       		dc.w Obj46_Type01-Obj46_TypeIndex
0000F388 0000                       		dc.w Obj46_Type02-Obj46_TypeIndex
0000F38A 0000                       		dc.w Obj46_Type03-Obj46_TypeIndex
0000F38C 0000                       		dc.w Obj46_Type04-Obj46_TypeIndex
0000F38E                            ; ===========================================================================
0000F38E                            
0000F38E                            Obj46_Type00:				; XREF: Obj46_TypeIndex
0000F38E 4E75                       		rts	
0000F390                            ; ===========================================================================
0000F390                            
0000F390                            Obj46_Type02:				; XREF: Obj46_TypeIndex
0000F390 3038 D008                  		move.w	($FFFFD008).w,d0
0000F394 9068 0008                  		sub.w	8(a0),d0
0000F398 6400                       		bcc.s	loc_E888
0000F39A 4440                       		neg.w	d0
0000F39C                            
0000F39C                            loc_E888:
0000F39C 0C40 0090                  		cmpi.w	#$90,d0		; is Sonic within $90 pixels of	the block?
0000F3A0 6400                       		bcc.s	Obj46_Type01	; if not, resume wobbling
0000F3A2 117C 0003 0028             		move.b	#3,$28(a0)	; if yes, make the block fall
0000F3A8                            
0000F3A8                            Obj46_Type01:				; XREF: Obj46_TypeIndex
0000F3A8 7000                       		moveq	#0,d0
0000F3AA 1038 FE74                  		move.b	($FFFFFE74).w,d0
0000F3AE 0828 0003 0028             		btst	#3,$28(a0)
0000F3B4 6700                       		beq.s	loc_E8A8
0000F3B6 4440                       		neg.w	d0
0000F3B8 0640 0010                  		addi.w	#$10,d0
0000F3BC                            
0000F3BC                            loc_E8A8:
0000F3BC 3228 0030                  		move.w	$30(a0),d1
0000F3C0 9240                       		sub.w	d0,d1
0000F3C2 3141 000C                  		move.w	d1,$C(a0)	; update the block's position to make it wobble
0000F3C6 4E75                       		rts	
0000F3C8                            ; ===========================================================================
0000F3C8                            
0000F3C8                            Obj46_Type03:				; XREF: Obj46_TypeIndex
0000F3C8 6100 ED1A                  		bsr.w	SpeedToPos
0000F3CC 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase falling speed
0000F3D2 6100 0000                  		bsr.w	ObjHitFloor
0000F3D6 4A41                       		tst.w	d1		; has the block	hit the	floor?
0000F3D8 6A00 0000                  		bpl.w	locret_E8EE	; if not, branch
0000F3DC D368 000C                  		add.w	d1,$C(a0)
0000F3E0 4268 0012                  		clr.w	$12(a0)		; stop the block falling
0000F3E4 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000F3EA 117C 0004 0028             		move.b	#4,$28(a0)
0000F3F0 3011                       		move.w	(a1),d0
0000F3F2 0240 03FF                  		andi.w	#$3FF,d0
0000F3F6 0C40 02E8                  		cmpi.w	#$2E8,d0
0000F3FA 6400                       		bcc.s	locret_E8EE
0000F3FC 117C 0000 0028             		move.b	#0,$28(a0)
0000F402                            
0000F402                            locret_E8EE:
0000F402 4E75                       		rts	
0000F404                            ; ===========================================================================
0000F404                            
0000F404                            Obj46_Type04:				; XREF: Obj46_TypeIndex
0000F404 7000                       		moveq	#0,d0
0000F406 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000F40A E648                       		lsr.w	#3,d0
0000F40C 3228 0030                  		move.w	$30(a0),d1
0000F410 9240                       		sub.w	d0,d1
0000F412 3141 000C                  		move.w	d1,$C(a0)	; make the block wobble
0000F416 4E75                       		rts	
0000F418                            ; ===========================================================================
0000F418                            ; ---------------------------------------------------------------------------
0000F418                            ; Sprite mappings - solid blocks and blocks that fall from the ceiling (MZ)
0000F418                            ; ---------------------------------------------------------------------------
0000F418                            Map_obj46:
0000F418                            	include "_maps\obj46.asm"
0000F418                            ; ---------------------------------------------------------------------------
0000F418                            ; Sprite mappings - solid blocks and blocks that fall from the ceiling (MZ)
0000F418                            ; ---------------------------------------------------------------------------
0000F418 0000                       		dc.w byte_E906-Map_obj46
0000F41A 01                         byte_E906:	dc.b 1
0000F41B F00F 0001 F0               		dc.b $F0, $F, 0, 1, $F0
0000F420                            		even
0000F420                            		even
0000F420                            
0000F420                            ; ===========================================================================
0000F420                            ; ---------------------------------------------------------------------------
0000F420                            ; Object 12 - lamp (SYZ)
0000F420                            ; ---------------------------------------------------------------------------
0000F420                            
0000F420                            Obj12:					; XREF: Obj_Index
0000F420 7000                       		moveq	#0,d0
0000F422 1028 0024                  		move.b	$24(a0),d0
0000F426 323B 0000                  		move.w	Obj12_Index(pc,d0.w),d1
0000F42A 4EFB 1000                  		jmp	Obj12_Index(pc,d1.w)
0000F42E                            ; ===========================================================================
0000F42E 0000                       Obj12_Index:	dc.w Obj12_Main-Obj12_Index
0000F430 0000                       		dc.w Obj12_Animate-Obj12_Index
0000F432                            ; ===========================================================================
0000F432                            
0000F432                            Obj12_Main:				; XREF: Obj12_Index
0000F432 5428 0024                  		addq.b	#2,$24(a0)
0000F436 217C 0000 0000 0004        		move.l	#Map_obj12,4(a0)
0000F43E 317C 0000 0002             		move.w	#0,2(a0)
0000F444 117C 0004 0001             		move.b	#4,1(a0)
0000F44A 117C 0010 0019             		move.b	#$10,$19(a0)
0000F450 117C 0006 0018             		move.b	#6,$18(a0)
0000F456                            
0000F456                            Obj12_Animate:				; XREF: Obj12_Index
0000F456 5328 001E                  		subq.b	#1,$1E(a0)
0000F45A 6A00                       		bpl.s	Obj12_ChkDel
0000F45C 117C 0007 001E             		move.b	#7,$1E(a0)
0000F462 5228 001A                  		addq.b	#1,$1A(a0)
0000F466 0C28 0006 001A             		cmpi.b	#6,$1A(a0)
0000F46C 6500                       		bcs.s	Obj12_ChkDel
0000F46E 117C 0000 001A             		move.b	#0,$1A(a0)
0000F474                            
0000F474                            Obj12_ChkDel:
0000F474 3028 0008                  		move.w	8(a0),d0
0000F478 0240 FF80                  		andi.w	#$FF80,d0
0000F47C 3238 F700                  		move.w	($FFFFF700).w,d1
0000F480 0441 0080                  		subi.w	#$80,d1
0000F484 0241 FF80                  		andi.w	#$FF80,d1
0000F488 9041                       		sub.w	d1,d0
0000F48A 0C40 0280                  		cmpi.w	#$280,d0
0000F48E 6200 ECB6                  		bhi.w	DeleteObject
0000F492 6000 EC76                  		bra.w	DisplaySprite
0000F496                            ; ===========================================================================
0000F496                            ; ---------------------------------------------------------------------------
0000F496                            ; Sprite mappings - lamp (SYZ)
0000F496                            ; ---------------------------------------------------------------------------
0000F496                            Map_obj12:
0000F496                            	include "_maps\obj12.asm"
0000F496                            ; ---------------------------------------------------------------------------
0000F496                            ; Sprite mappings - lamp (SYZ)
0000F496                            ; ---------------------------------------------------------------------------
0000F496 0000 0000                  		dc.w byte_E98E-Map_obj12, byte_E999-Map_obj12
0000F49A 0000 0000                  		dc.w byte_E9A4-Map_obj12, byte_E9AF-Map_obj12
0000F49E 0000 0000                  		dc.w byte_E9BA-Map_obj12, byte_E9C5-Map_obj12
0000F4A2 02                         byte_E98E:	dc.b 2
0000F4A3 F80C 0031 F0               		dc.b $F8, $C, 0, $31, $F0
0000F4A8 000C 1031 F0               		dc.b 0,	$C, $10, $31, $F0
0000F4AD 02                         byte_E999:	dc.b 2
0000F4AE F80C 0035 F0               		dc.b $F8, $C, 0, $35, $F0
0000F4B3 000C 1035 F0               		dc.b 0,	$C, $10, $35, $F0
0000F4B8 02                         byte_E9A4:	dc.b 2
0000F4B9 F80C 0039 F0               		dc.b $F8, $C, 0, $39, $F0
0000F4BE 000C 1039 F0               		dc.b 0,	$C, $10, $39, $F0
0000F4C3 02                         byte_E9AF:	dc.b 2
0000F4C4 F80C 003D F0               		dc.b $F8, $C, 0, $3D, $F0
0000F4C9 000C 103D F0               		dc.b 0,	$C, $10, $3D, $F0
0000F4CE 02                         byte_E9BA:	dc.b 2
0000F4CF F80C 0041 F0               		dc.b $F8, $C, 0, $41, $F0
0000F4D4 000C 1041 F0               		dc.b 0,	$C, $10, $41, $F0
0000F4D9 02                         byte_E9C5:	dc.b 2
0000F4DA F80C 0045 F0               		dc.b $F8, $C, 0, $45, $F0
0000F4DF 000C 1045 F0               		dc.b 0,	$C, $10, $45, $F0
0000F4E4                            		even
0000F4E4                            		even
0000F4E4                            
0000F4E4                            ; ===========================================================================
0000F4E4                            ; ---------------------------------------------------------------------------
0000F4E4                            ; Object 47 - pinball bumper (SYZ)
0000F4E4                            ; ---------------------------------------------------------------------------
0000F4E4                            
0000F4E4                            Obj47:					; XREF: Obj_Index
0000F4E4 7000                       		moveq	#0,d0
0000F4E6 1028 0024                  		move.b	$24(a0),d0
0000F4EA 323B 0000                  		move.w	Obj47_Index(pc,d0.w),d1
0000F4EE 4EFB 1000                  		jmp	Obj47_Index(pc,d1.w)
0000F4F2                            ; ===========================================================================
0000F4F2 0000                       Obj47_Index:	dc.w Obj47_Main-Obj47_Index
0000F4F4 0000                       		dc.w Obj47_Hit-Obj47_Index
0000F4F6                            ; ===========================================================================
0000F4F6                            
0000F4F6                            Obj47_Main:				; XREF: Obj47_Index
0000F4F6 5428 0024                  		addq.b	#2,$24(a0)
0000F4FA 217C 0000 0000 0004        		move.l	#Map_obj47,4(a0)
0000F502 317C 0380 0002             		move.w	#$380,2(a0)
0000F508 117C 0004 0001             		move.b	#4,1(a0)
0000F50E 117C 0010 0019             		move.b	#$10,$19(a0)
0000F514 117C 0001 0018             		move.b	#1,$18(a0)
0000F51A 117C 00D7 0020             		move.b	#$D7,$20(a0)
0000F520                            
0000F520                            Obj47_Hit:				; XREF: Obj47_Index
0000F520 4A28 0021                  		tst.b	$21(a0)		; has Sonic touched the	bumper?
0000F524 6700 0000                  		beq.w	Obj47_Display	; if not, branch
0000F528 4228 0021                  		clr.b	$21(a0)
0000F52C 43F8 D000                  		lea	($FFFFD000).w,a1
0000F530 3228 0008                  		move.w	8(a0),d1
0000F534 3428 000C                  		move.w	$C(a0),d2
0000F538 9269 0008                  		sub.w	8(a1),d1
0000F53C 9469 000C                  		sub.w	$C(a1),d2
0000F540 4EB9 0000 36A2             		jsr	(CalcAngle).l
0000F546 4EB9 0000 33D4             		jsr	(CalcSine).l
0000F54C C3FC F900                  		muls.w	#-$700,d1
0000F550 E081                       		asr.l	#8,d1
0000F552 3341 0010                  		move.w	d1,$10(a1)	; bounce Sonic away
0000F556 C1FC F900                  		muls.w	#-$700,d0
0000F55A E080                       		asr.l	#8,d0
0000F55C 3340 0012                  		move.w	d0,$12(a1)	; bounce Sonic away
0000F560 08E9 0001 0022             		bset	#1,$22(a1)
0000F566 08A9 0004 0022             		bclr	#4,$22(a1)
0000F56C 08A9 0005 0022             		bclr	#5,$22(a1)
0000F572 4229 003C                  		clr.b	$3C(a1)
0000F576 117C 0001 001C             		move.b	#1,$1C(a0)
0000F57C 303C 00B4                  		move.w	#$B4,d0
0000F580 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play bumper sound
0000F586 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000F58A 7000                       		moveq	#0,d0
0000F58C 1028 0023                  		move.b	$23(a0),d0
0000F590 6700                       		beq.s	Obj47_Score
0000F592 0C32 008A 0002             		cmpi.b	#$8A,2(a2,d0.w)	; has bumper been hit $8A times?
0000F598 6400                       		bcc.s	Obj47_Display	; if yes, Sonic	gets no	points
0000F59A 5232 0002                  		addq.b	#1,2(a2,d0.w)
0000F59E                            
0000F59E                            Obj47_Score:
0000F59E 7001                       		moveq	#1,d0
0000F5A0 4EB9 0000 0000             		jsr	AddPoints	; add 10 to score
0000F5A6 6100 EFF8                  		bsr.w	SingleObjLoad
0000F5AA 6600                       		bne.s	Obj47_Display
0000F5AC 12BC 0029                  		move.b	#$29,0(a1)	; load points object
0000F5B0 3368 0008 0008             		move.w	8(a0),8(a1)
0000F5B6 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000F5BC 137C 0004 001A             		move.b	#4,$1A(a1)
0000F5C2                            
0000F5C2                            Obj47_Display:
0000F5C2 43F9 0000 0000             		lea	(Ani_obj47).l,a1
0000F5C8 6100 BC52                  		bsr.w	AnimateSprite
0000F5CC 3028 0008                  		move.w	8(a0),d0
0000F5D0 0240 FF80                  		andi.w	#$FF80,d0
0000F5D4 3238 F700                  		move.w	($FFFFF700).w,d1
0000F5D8 0441 0080                  		subi.w	#$80,d1
0000F5DC 0241 FF80                  		andi.w	#$FF80,d1
0000F5E0 9041                       		sub.w	d1,d0
0000F5E2 0C40 0280                  		cmpi.w	#$280,d0
0000F5E6 6200                       		bhi.s	Obj47_ChkHit
0000F5E8 6000 EB20                  		bra.w	DisplaySprite
0000F5EC                            ; ===========================================================================
0000F5EC                            
0000F5EC                            Obj47_ChkHit:				; XREF: Obj47_Display
0000F5EC 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000F5F0 7000                       		moveq	#0,d0
0000F5F2 1028 0023                  		move.b	$23(a0),d0
0000F5F6 6700                       		beq.s	Obj47_Delete
0000F5F8 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000F5FE                            
0000F5FE                            Obj47_Delete:
0000F5FE 6000 EB46                  		bra.w	DeleteObject
0000F602                            ; ===========================================================================
0000F602                            Ani_obj47:
0000F602                            	include "_anim\obj47.asm"
0000F602                            ; ---------------------------------------------------------------------------
0000F602                            ; Animation script - flamethrower (SBZ)
0000F602                            ; ---------------------------------------------------------------------------
0000F602 0000                       		dc.w byte_EAF4-Ani_obj47
0000F604 0000                       		dc.w byte_EAF8-Ani_obj47
0000F606 0F00 FF00                  byte_EAF4:	dc.b $F, 0, $FF, 0
0000F60A 0301 0201 02FD 0000        byte_EAF8:	dc.b 3,	1, 2, 1, 2, $FD, 0, 0
0000F612                            		even
0000F612                            		even
0000F612                            
0000F612                            ; ---------------------------------------------------------------------------
0000F612                            ; Sprite mappings - pinball bumper (SYZ)
0000F612                            ; ---------------------------------------------------------------------------
0000F612                            Map_obj47:
0000F612                            	include "_maps\obj47.asm"
0000F612                            ; ---------------------------------------------------------------------------
0000F612                            ; Sprite mappings - pinball bumper (SYZ)
0000F612                            ; ---------------------------------------------------------------------------
0000F612 0000                       		dc.w byte_EB06-Map_obj47
0000F614 0000                       		dc.w byte_EB11-Map_obj47
0000F616 0000                       		dc.w byte_EB1C-Map_obj47
0000F618 02                         byte_EB06:	dc.b 2
0000F619 F007 0000 F0               		dc.b $F0, 7, 0,	0, $F0
0000F61E F007 0800 00               		dc.b $F0, 7, 8,	0, 0
0000F623 02                         byte_EB11:	dc.b 2
0000F624 F406 0008 F4               		dc.b $F4, 6, 0,	8, $F4
0000F629 F402 0808 04               		dc.b $F4, 2, 8,	8, 4
0000F62E 02                         byte_EB1C:	dc.b 2
0000F62F F007 000E F0               		dc.b $F0, 7, 0,	$E, $F0
0000F634 F007 080E 00               		dc.b $F0, 7, 8,	$E, 0
0000F63A 00                         		even
0000F63A 00                         		even
0000F63A                            
0000F63A                            ; ===========================================================================
0000F63A                            ; ---------------------------------------------------------------------------
0000F63A                            ; Object 0D - signpost at the end of a level
0000F63A                            ; ---------------------------------------------------------------------------
0000F63A                            
0000F63A                            Obj0D:					; XREF: Obj_Index
0000F63A 7000                       		moveq	#0,d0
0000F63C 1028 0024                  		move.b	$24(a0),d0
0000F640 323B 0000                  		move.w	Obj0D_Index(pc,d0.w),d1
0000F644 4EBB 1000                  		jsr	Obj0D_Index(pc,d1.w)
0000F648 43F9 0000 0000             		lea	(Ani_obj0D).l,a1
0000F64E 6100 BBCC                  		bsr.w	AnimateSprite
0000F652 6100 EAB6                  		bsr.w	DisplaySprite
0000F656 3028 0008                  		move.w	8(a0),d0
0000F65A 0240 FF80                  		andi.w	#$FF80,d0
0000F65E 3238 F700                  		move.w	($FFFFF700).w,d1
0000F662 0441 0080                  		subi.w	#$80,d1
0000F666 0241 FF80                  		andi.w	#$FF80,d1
0000F66A 9041                       		sub.w	d1,d0
0000F66C 0C40 0280                  		cmpi.w	#$280,d0
0000F670 6200 EAD4                  		bhi.w	DeleteObject
0000F674 4E75                       		rts	
0000F676                            ; ===========================================================================
0000F676 0000                       Obj0D_Index:	dc.w Obj0D_Main-Obj0D_Index
0000F678 0000                       		dc.w Obj0D_Touch-Obj0D_Index
0000F67A 0000                       		dc.w Obj0D_Spin-Obj0D_Index
0000F67C 0000                       		dc.w Obj0D_SonicRun-Obj0D_Index
0000F67E 0000                       		dc.w locret_ED1A-Obj0D_Index
0000F680                            ; ===========================================================================
0000F680                            
0000F680                            Obj0D_Main:				; XREF: Obj0D_Index
0000F680 5428 0024                  		addq.b	#2,$24(a0)
0000F684 217C 0000 0000 0004        		move.l	#Map_obj0D,4(a0)
0000F68C 317C 0680 0002             		move.w	#$680,2(a0)
0000F692 117C 0004 0001             		move.b	#4,1(a0)
0000F698 117C 0018 0019             		move.b	#$18,$19(a0)
0000F69E 117C 0004 0018             		move.b	#4,$18(a0)
0000F6A4                            
0000F6A4                            Obj0D_Touch:				; XREF: Obj0D_Index
0000F6A4 3038 D008                  		move.w	($FFFFD008).w,d0
0000F6A8 9068 0008                  		sub.w	8(a0),d0
0000F6AC 6500                       		bcs.s	locret_EBBA
0000F6AE 0C40 0020                  		cmpi.w	#$20,d0		; is Sonic within $20 pixels of	the signpost?
0000F6B2 6400                       		bcc.s	locret_EBBA	; if not, branch
0000F6B4 303C 00CF                  		move.w	#$CF,d0
0000F6B8 4EB9 0000 1470             		jsr	(PlaySound).l	; play signpost	sound
0000F6BE 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0000F6C2 31F8 F72A F728             		move.w	($FFFFF72A).w,($FFFFF728).w ; lock screen position
0000F6C8 5428 0024                  		addq.b	#2,$24(a0)
0000F6CC                            
0000F6CC                            locret_EBBA:
0000F6CC 4E75                       		rts	
0000F6CE                            ; ===========================================================================
0000F6CE                            
0000F6CE                            Obj0D_Spin:				; XREF: Obj0D_Index
0000F6CE 4238 FE19                  		clr.b (Super_Sonic_Flag).w ; Revert Sonic to Normal
0000F6D2 31FC 0600 F760             		move.w #$600,(Sonic_top_speed).w ; Revert speeds
0000F6D8 31FC 000C F762             		move.w #$C,(Sonic_acceleration).w ; ^^^
0000F6DE 31FC 0080 F764             		move.w #$80,(Sonic_deceleration).w ; ^^^
0000F6E4 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from spin time
0000F6E8 6A00                       		bpl.s	Obj0D_Sparkle	; if time remains, branch
0000F6EA 317C 003C 0030             		move.w	#60,$30(a0)	; set spin cycle time to 1 second
0000F6F0 5228 001C                  		addq.b	#1,$1C(a0)	; next spin cycle
0000F6F4 0C28 0003 001C             		cmpi.b	#3,$1C(a0)	; have 3 spin cycles completed?
0000F6FA 6600                       		bne.s	Obj0D_Sparkle	; if not, branch
0000F6FC 5428 0024                  		addq.b	#2,$24(a0)
0000F700                            
0000F700                            Obj0D_Sparkle:
0000F700 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
0000F704 6A00                       		bpl.s	locret_EC42	; if time remains, branch
0000F706 317C 000B 0032             		move.w	#$B,$32(a0)	; set time between sparkles to $B frames
0000F70C 7000                       		moveq	#0,d0
0000F70E 1028 0034                  		move.b	$34(a0),d0
0000F712 5428 0034                  		addq.b	#2,$34(a0)
0000F716 0228 000E 0034             		andi.b	#$E,$34(a0)
0000F71C 45FB 0000                  		lea	Obj0D_SparkPos(pc,d0.w),a2 ; load sparkle position data
0000F720 6100 EE7E                  		bsr.w	SingleObjLoad
0000F724 6600                       		bne.s	locret_EC42
0000F726 12BC 0025                  		move.b	#$25,0(a1)	; load rings object
0000F72A 137C 0006 0024             		move.b	#6,$24(a1)	; jump to ring sparkle subroutine
0000F730 101A                       		move.b	(a2)+,d0
0000F732 4880                       		ext.w	d0
0000F734 D068 0008                  		add.w	8(a0),d0
0000F738 3340 0008                  		move.w	d0,8(a1)
0000F73C 101A                       		move.b	(a2)+,d0
0000F73E 4880                       		ext.w	d0
0000F740 D068 000C                  		add.w	$C(a0),d0
0000F744 3340 000C                  		move.w	d0,$C(a1)
0000F748 237C 0000 AA5E 0004        		move.l	#Map_obj25,4(a1)
0000F750 337C 27B2 0002             		move.w	#$27B2,2(a1)
0000F756 137C 0004 0001             		move.b	#4,1(a1)
0000F75C 137C 0002 0018             		move.b	#2,$18(a1)
0000F762 137C 0008 0019             		move.b	#8,$19(a1)
0000F768                            
0000F768                            locret_EC42:
0000F768 4E75                       		rts	
0000F76A                            ; ===========================================================================
0000F76A E8F0                       Obj0D_SparkPos:	dc.b -$18,-$10		; x-position, y-position
0000F76C 0808                       		dc.b	8,   8
0000F76E F000                       		dc.b -$10,   0
0000F770 18F8                       		dc.b  $18,  -8
0000F772 00F8                       		dc.b	0,  -8
0000F774 1000                       		dc.b  $10,   0
0000F776 E808                       		dc.b -$18,   8
0000F778 1810                       		dc.b  $18, $10
0000F77A                            ; ===========================================================================
0000F77A                            
0000F77A                            Obj0D_SonicRun:				; XREF: Obj0D_Index
0000F77A 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
0000F77E 6600 0000                  		bne.w	locret_ECEE	; if yes, branch
0000F782 0838 0001 D022             		btst	#1,($FFFFD022).w
0000F788 6600                       		bne.s	loc_EC70
0000F78A 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
0000F790 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; make Sonic run to	the right
0000F796                            
0000F796                            loc_EC70:
0000F796 4A38 D000                  		tst.b	($FFFFD000).w
0000F79A 6700                       		beq.s	loc_EC86
0000F79C 3038 D008                  		move.w	($FFFFD008).w,d0
0000F7A0 3238 F72A                  		move.w	($FFFFF72A).w,d1
0000F7A4 0641 0128                  		addi.w	#$128,d1
0000F7A8 B041                       		cmp.w	d1,d0
0000F7AA 6500                       		bcs.s	locret_ECEE
0000F7AC                            
0000F7AC                            loc_EC86:
0000F7AC 5428 0024                  		addq.b	#2,$24(a0)
0000F7B0                            
0000F7B0                            ; ---------------------------------------------------------------------------
0000F7B0                            ; Subroutine to	set up bonuses at the end of an	act
0000F7B0                            ; ---------------------------------------------------------------------------
0000F7B0                            
0000F7B0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F7B0                            
0000F7B0                            
0000F7B0                            GotThroughAct:				; XREF: Obj3E_EndAct
0000F7B0 4A38 D5C0                  		tst.b	($FFFFD5C0).w
0000F7B4 6600                       		bne.s	locret_ECEE
0000F7B6 31F8 F72A F728             		move.w	($FFFFF72A).w,($FFFFF728).w
0000F7BC 4238 FE2D                  		clr.b	($FFFFFE2D).w	; disable invincibility
0000F7C0 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0000F7C4 11FC 003A D5C0             		move.b	#$3A,($FFFFD5C0).w
0000F7CA 7010                       		moveq	#$10,d0
0000F7CC 4EB9 0000 171C             		jsr	(LoadPLC2).l	; load title card patterns
0000F7D2 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w
0000F7D8 7000                       		moveq	#0,d0
0000F7DA 1038 FE23                  		move.b	($FFFFFE23).w,d0
0000F7DE C0FC 003C                  		mulu.w	#60,d0		; convert minutes to seconds
0000F7E2 7200                       		moveq	#0,d1
0000F7E4 1238 FE24                  		move.b	($FFFFFE24).w,d1
0000F7E8 D041                       		add.w	d1,d0		; add up your time
0000F7EA 80FC 000F                  		divu.w	#15,d0		; divide by 15
0000F7EE 7214                       		moveq	#$14,d1
0000F7F0 B041                       		cmp.w	d1,d0		; is time 5 minutes or higher?
0000F7F2 6500                       		bcs.s	loc_ECD0	; if not, branch
0000F7F4 3001                       		move.w	d1,d0		; use minimum time bonus (0)
0000F7F6                            
0000F7F6                            loc_ECD0:
0000F7F6 D040                       		add.w	d0,d0
0000F7F8 31FB 0000 F7D2             		move.w	TimeBonuses(pc,d0.w),($FFFFF7D2).w ; set time bonus
0000F7FE 3038 FE20                  		move.w	($FFFFFE20).w,d0 ; load	number of rings
0000F802 C0FC 000A                  		mulu.w	#10,d0		; multiply by 10
0000F806 31C0 F7D4                  		move.w	d0,($FFFFF7D4).w ; set ring bonus
0000F80A 303C 008E                  		move.w	#$8E,d0
0000F80E 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play "Sonic got	through" music
0000F814                            
0000F814                            locret_ECEE:
0000F814 4E75                       		rts	
0000F816                            ; End of function GotThroughAct
0000F816                            
0000F816                            ; ===========================================================================
0000F816 1388 1388 03E8 01F4 0190+  TimeBonuses:	dc.w 5000, 5000, 1000, 500, 400, 400, 300, 300,	200, 200
0000F82A 00C8 00C8 0064 0064 0064+  		dc.w 200, 200, 100, 100, 100, 100, 50, 50, 50, 50, 0
0000F840                            ; ===========================================================================
0000F840                            
0000F840                            locret_ED1A:				; XREF: Obj0D_Index
0000F840 4E75                       		rts	
0000F842                            ; ===========================================================================
0000F842                            Ani_obj0D:
0000F842                            	include "_anim\obj0D.asm"
0000F842                            ; ---------------------------------------------------------------------------
0000F842                            ; Animation script - signpost
0000F842                            ; ---------------------------------------------------------------------------
0000F842 0000                       		dc.w byte_ED24-Ani_obj0D
0000F844 0000                       		dc.w byte_ED28-Ani_obj0D
0000F846 0000                       		dc.w byte_ED2E-Ani_obj0D
0000F848 0000                       		dc.w byte_ED34-Ani_obj0D
0000F84A 0F00 FF00                  byte_ED24:	dc.b $F, 0, $FF, 0
0000F84E 0100 0102 03FF             byte_ED28:	dc.b 1,	0, 1, 2, 3, $FF
0000F854 0104 0102 03FF             byte_ED2E:	dc.b 1,	4, 1, 2, 3, $FF
0000F85A 0F04 FF                    byte_ED34:	dc.b $F, 4, $FF
0000F85E 00                         		even
0000F85E 00                         		even
0000F85E                            
0000F85E                            ; ---------------------------------------------------------------------------
0000F85E                            ; Sprite mappings - signpost
0000F85E                            ; ---------------------------------------------------------------------------
0000F85E                            Map_obj0D:
0000F85E                            	include "_maps\obj0D.asm"
0000F85E                            ; ---------------------------------------------------------------------------
0000F85E                            ; Sprite mappings - signpost
0000F85E                            ; ---------------------------------------------------------------------------
0000F85E 0000 0000                  		dc.w byte_ED42-Map_obj0D, byte_ED52-Map_obj0D
0000F862 0000 0000                  		dc.w byte_ED5D-Map_obj0D, byte_ED68-Map_obj0D
0000F866 0000                       		dc.w byte_ED73-Map_obj0D
0000F868 03                         byte_ED42:	dc.b 3
0000F869 F00B 0000 E8               		dc.b $F0, $B, 0, 0, $E8
0000F86E F00B 0800 00               		dc.b $F0, $B, 8, 0, 0
0000F873 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
0000F878 02                         byte_ED52:	dc.b 2
0000F879 F00F 000C F0               		dc.b $F0, $F, 0, $C, $F0
0000F87E 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
0000F883 02                         byte_ED5D:	dc.b 2
0000F884 F003 001C FC               		dc.b $F0, 3, 0,	$1C, $FC
0000F889 1001 0838 FC               		dc.b $10, 1, 8,	$38, $FC
0000F88E 02                         byte_ED68:	dc.b 2
0000F88F F00F 080C F0               		dc.b $F0, $F, 8, $C, $F0
0000F894 1001 0838 FC               		dc.b $10, 1, 8,	$38, $FC
0000F899 03                         byte_ED73:	dc.b 3
0000F89A F00B 0020 E8               		dc.b $F0, $B, 0, $20, $E8
0000F89F F00B 002C 00               		dc.b $F0, $B, 0, $2C, 0
0000F8A4 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
0000F8AA 00                         		even
0000F8AA 00                         		even
0000F8AA                            
0000F8AA                            ; ===========================================================================
0000F8AA                            ; ---------------------------------------------------------------------------
0000F8AA                            ; Object 4C - lava geyser / lavafall producer (MZ)
0000F8AA                            ; ---------------------------------------------------------------------------
0000F8AA                            
0000F8AA                            Obj4C:					; XREF: Obj_Index
0000F8AA 7000                       		moveq	#0,d0
0000F8AC 1028 0024                  		move.b	$24(a0),d0
0000F8B0 323B 0000                  		move.w	Obj4C_Index(pc,d0.w),d1
0000F8B4 4EBB 1000                  		jsr	Obj4C_Index(pc,d1.w)
0000F8B8 6000 0000                  		bra.w	Obj4D_ChkDel
0000F8BC                            ; ===========================================================================
0000F8BC 0000                       Obj4C_Index:	dc.w Obj4C_Main-Obj4C_Index
0000F8BE 0000                       		dc.w loc_EDCC-Obj4C_Index
0000F8C0 0000                       		dc.w loc_EE3E-Obj4C_Index
0000F8C2 0000                       		dc.w Obj4C_MakeLava-Obj4C_Index
0000F8C4 0000                       		dc.w Obj4C_Display-Obj4C_Index
0000F8C6 0000                       		dc.w Obj4C_Delete-Obj4C_Index
0000F8C8                            ; ===========================================================================
0000F8C8                            
0000F8C8                            Obj4C_Main:				; XREF: Obj4C_Index
0000F8C8 5428 0024                  		addq.b	#2,$24(a0)
0000F8CC 217C 0000 0000 0004        		move.l	#Map_obj4C,4(a0)
0000F8D4 317C E3A8 0002             		move.w	#$E3A8,2(a0)
0000F8DA 117C 0004 0001             		move.b	#4,1(a0)
0000F8E0 117C 0001 0018             		move.b	#1,$18(a0)
0000F8E6 117C 0038 0019             		move.b	#$38,$19(a0)
0000F8EC 317C 0078 0034             		move.w	#120,$34(a0)	; set time delay to 2 seconds
0000F8F2                            
0000F8F2                            loc_EDCC:				; XREF: Obj4C_Index
0000F8F2 5368 0032                  		subq.w	#1,$32(a0)
0000F8F6 6A00                       		bpl.s	locret_EDF0
0000F8F8 3168 0034 0032             		move.w	$34(a0),$32(a0)
0000F8FE 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000F902 3228 000C                  		move.w	$C(a0),d1
0000F906 B041                       		cmp.w	d1,d0
0000F908 6400                       		bcc.s	locret_EDF0
0000F90A 0441 0170                  		subi.w	#$170,d1
0000F90E B041                       		cmp.w	d1,d0
0000F910 6500                       		bcs.s	locret_EDF0
0000F912 5428 0024                  		addq.b	#2,$24(a0)
0000F916                            
0000F916                            locret_EDF0:
0000F916 4E75                       		rts	
0000F918                            ; ===========================================================================
0000F918                            
0000F918                            Obj4C_MakeLava:				; XREF: Obj4C_Index
0000F918 5428 0024                  		addq.b	#2,$24(a0)
0000F91C 6100 EC98                  		bsr.w	SingleObjLoad2
0000F920 6600                       		bne.s	loc_EE18
0000F922 12BC 004D                  		move.b	#$4D,0(a1)	; load lavafall	object
0000F926 3368 0008 0008             		move.w	8(a0),8(a1)
0000F92C 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000F932 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000F938 2348 003C                  		move.l	a0,$3C(a1)
0000F93C                            
0000F93C                            loc_EE18:
0000F93C 117C 0001 001C             		move.b	#1,$1C(a0)
0000F942 4A28 0028                  		tst.b	$28(a0)		; is object type 00 (geyser) ?
0000F946 6700                       		beq.s	Obj4C_Type00	; if yes, branch
0000F948 117C 0004 001C             		move.b	#4,$1C(a0)
0000F94E 6000                       		bra.s	Obj4C_Display
0000F950                            ; ===========================================================================
0000F950                            
0000F950                            Obj4C_Type00:				; XREF: Obj4C_MakeLava
0000F950 2268 003C                  		movea.l	$3C(a0),a1	; load geyser object
0000F954 08E9 0001 0022             		bset	#1,$22(a1)
0000F95A 337C FA80 0012             		move.w	#-$580,$12(a1)
0000F960 6000                       		bra.s	Obj4C_Display
0000F962                            ; ===========================================================================
0000F962                            
0000F962                            loc_EE3E:				; XREF: Obj4C_Index
0000F962 4A28 0028                  		tst.b	$28(a0)		; is object type 00 (geyser) ?
0000F966 6700                       		beq.s	Obj4C_Display	; if yes, branch
0000F968 5428 0024                  		addq.b	#2,$24(a0)
0000F96C 4E75                       		rts	
0000F96E                            ; ===========================================================================
0000F96E                            
0000F96E                            Obj4C_Display:				; XREF: Obj4C_Index
0000F96E 43F9 0000 0000             		lea	(Ani_obj4C).l,a1
0000F974 6100 B8A6                  		bsr.w	AnimateSprite
0000F978 6100 E790                  		bsr.w	DisplaySprite
0000F97C 4E75                       		rts	
0000F97E                            ; ===========================================================================
0000F97E                            
0000F97E                            Obj4C_Delete:				; XREF: Obj4C_Index
0000F97E 117C 0000 001C             		move.b	#0,$1C(a0)
0000F984 117C 0002 0024             		move.b	#2,$24(a0)
0000F98A 4A28 0028                  		tst.b	$28(a0)
0000F98E 6700 E7B6                  		beq.w	DeleteObject
0000F992 4E75                       		rts	
0000F994                            ; ===========================================================================
0000F994                            ; ---------------------------------------------------------------------------
0000F994                            ; Object 4D - lava geyser / lavafall (MZ)
0000F994                            ; ---------------------------------------------------------------------------
0000F994                            
0000F994                            Obj4D:					; XREF: Obj_Index
0000F994 7000                       		moveq	#0,d0
0000F996 1028 0024                  		move.b	$24(a0),d0
0000F99A 323B 0000                  		move.w	Obj4D_Index(pc,d0.w),d1
0000F99E 4EBB 1000                  		jsr	Obj4D_Index(pc,d1.w)
0000F9A2 6000 E766                  		bra.w	DisplaySprite
0000F9A6                            ; ===========================================================================
0000F9A6 0000                       Obj4D_Index:	dc.w Obj4D_Main-Obj4D_Index
0000F9A8 0000                       		dc.w Obj4D_Action-Obj4D_Index
0000F9AA 0000                       		dc.w loc_EFFC-Obj4D_Index
0000F9AC 0000                       		dc.w Obj4D_Delete-Obj4D_Index
0000F9AE                            
0000F9AE FB00 0000                  Obj4D_Speeds:	dc.w $FB00, 0
0000F9B2                            ; ===========================================================================
0000F9B2                            
0000F9B2                            Obj4D_Main:				; XREF: Obj4D_Index
0000F9B2 5428 0024                  		addq.b	#2,$24(a0)
0000F9B6 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000F9BC 4A28 0028                  		tst.b	$28(a0)
0000F9C0 6700                       		beq.s	loc_EEA4
0000F9C2 0468 0250 000C             		subi.w	#$250,$C(a0)
0000F9C8                            
0000F9C8                            loc_EEA4:
0000F9C8 7000                       		moveq	#0,d0
0000F9CA 1028 0028                  		move.b	$28(a0),d0
0000F9CE D040                       		add.w	d0,d0
0000F9D0 317B 00DC 0012             		move.w	Obj4D_Speeds(pc,d0.w),$12(a0)
0000F9D6 2248                       		movea.l	a0,a1
0000F9D8 7201                       		moveq	#1,d1
0000F9DA 6100                       		bsr.s	Obj4D_MakeLava
0000F9DC 6000                       		bra.s	loc_EF10
0000F9DE                            ; ===========================================================================
0000F9DE                            
0000F9DE                            Obj4D_Loop:
0000F9DE 6100 EBD6                  		bsr.w	SingleObjLoad2
0000F9E2 6600                       		bne.s	loc_EF0A
0000F9E4                            
0000F9E4                            Obj4D_MakeLava:				; XREF: Obj4D_Main
0000F9E4 12BC 004D                  		move.b	#$4D,0(a1)
0000F9E8 237C 0000 0000 0004        		move.l	#Map_obj4C,4(a1)
0000F9F0 337C 63A8 0002             		move.w	#$63A8,2(a1)
0000F9F6 137C 0004 0001             		move.b	#4,1(a1)
0000F9FC 137C 0020 0019             		move.b	#$20,$19(a1)
0000FA02 3368 0008 0008             		move.w	8(a0),8(a1)
0000FA08 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000FA0E 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000FA14 137C 0001 0018             		move.b	#1,$18(a1)
0000FA1A 137C 0005 001C             		move.b	#5,$1C(a1)
0000FA20 4A28 0028                  		tst.b	$28(a0)
0000FA24 6700                       		beq.s	loc_EF0A
0000FA26 137C 0002 001C             		move.b	#2,$1C(a1)
0000FA2C                            
0000FA2C                            loc_EF0A:
0000FA2C 51C9 FFB0                  		dbf	d1,Obj4D_Loop
0000FA30 4E75                       		rts	
0000FA32                            ; ===========================================================================
0000FA32                            
0000FA32                            loc_EF10:				; XREF: Obj4D_Main
0000FA32 0669 0060 000C             		addi.w	#$60,$C(a1)
0000FA38 3368 0030 0030             		move.w	$30(a0),$30(a1)
0000FA3E 0669 0060 0030             		addi.w	#$60,$30(a1)
0000FA44 137C 0093 0020             		move.b	#$93,$20(a1)
0000FA4A 137C 0080 0016             		move.b	#$80,$16(a1)
0000FA50 08E9 0004 0001             		bset	#4,1(a1)
0000FA56 5829 0024                  		addq.b	#4,$24(a1)
0000FA5A 2348 003C                  		move.l	a0,$3C(a1)
0000FA5E 4A28 0028                  		tst.b	$28(a0)
0000FA62 6700                       		beq.s	Obj4D_PlaySnd
0000FA64 7200                       		moveq	#0,d1
0000FA66 6100 FF76                  		bsr.w	Obj4D_Loop
0000FA6A 5429 0024                  		addq.b	#2,$24(a1)
0000FA6E 08E9 0004 0002             		bset	#4,2(a1)
0000FA74 0669 0100 000C             		addi.w	#$100,$C(a1)
0000FA7A 137C 0000 0018             		move.b	#0,$18(a1)
0000FA80 3368 0030 0030             		move.w	$30(a0),$30(a1)
0000FA86 2368 003C 003C             		move.l	$3C(a0),$3C(a1)
0000FA8C 117C 0000 0028             		move.b	#0,$28(a0)
0000FA92                            
0000FA92                            Obj4D_PlaySnd:
0000FA92 303C 00C8                  		move.w	#$C8,d0
0000FA96 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play flame sound
0000FA9C                            
0000FA9C                            Obj4D_Action:				; XREF: Obj4D_Index
0000FA9C 7000                       		moveq	#0,d0
0000FA9E 1028 0028                  		move.b	$28(a0),d0
0000FAA2 D040                       		add.w	d0,d0
0000FAA4 323B 0000                  		move.w	Obj4D_TypeIndex(pc,d0.w),d1
0000FAA8 4EBB 1000                  		jsr	Obj4D_TypeIndex(pc,d1.w)
0000FAAC 6100 E636                  		bsr.w	SpeedToPos
0000FAB0 43F9 0000 0000             		lea	(Ani_obj4C).l,a1
0000FAB6 6100 B764                  		bsr.w	AnimateSprite
0000FABA                            
0000FABA                            Obj4D_ChkDel:				; XREF: Obj4C
0000FABA 3028 0008                  		move.w	8(a0),d0
0000FABE 0240 FF80                  		andi.w	#$FF80,d0
0000FAC2 3238 F700                  		move.w	($FFFFF700).w,d1
0000FAC6 0441 0080                  		subi.w	#$80,d1
0000FACA 0241 FF80                  		andi.w	#$FF80,d1
0000FACE 9041                       		sub.w	d1,d0
0000FAD0 0C40 0280                  		cmpi.w	#$280,d0
0000FAD4 6200 E670                  		bhi.w	DeleteObject
0000FAD8 4E75                       		rts	
0000FADA                            ; ===========================================================================
0000FADA 0000                       Obj4D_TypeIndex:dc.w Obj4D_Type00-Obj4D_TypeIndex
0000FADC 0000                       		dc.w Obj4D_Type01-Obj4D_TypeIndex
0000FADE                            ; ===========================================================================
0000FADE                            
0000FADE                            Obj4D_Type00:				; XREF: Obj4D_TypeIndex
0000FADE 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's falling speed
0000FAE4 3028 0030                  		move.w	$30(a0),d0
0000FAE8 B068 000C                  		cmp.w	$C(a0),d0
0000FAEC 6400                       		bcc.s	locret_EFDA
0000FAEE 5828 0024                  		addq.b	#4,$24(a0)
0000FAF2 2268 003C                  		movea.l	$3C(a0),a1
0000FAF6 137C 0003 001C             		move.b	#3,$1C(a1)
0000FAFC                            
0000FAFC                            locret_EFDA:
0000FAFC 4E75                       		rts	
0000FAFE                            ; ===========================================================================
0000FAFE                            
0000FAFE                            Obj4D_Type01:				; XREF: Obj4D_TypeIndex
0000FAFE 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's falling speed
0000FB04 3028 0030                  		move.w	$30(a0),d0
0000FB08 B068 000C                  		cmp.w	$C(a0),d0
0000FB0C 6400                       		bcc.s	locret_EFFA
0000FB0E 5828 0024                  		addq.b	#4,$24(a0)
0000FB12 2268 003C                  		movea.l	$3C(a0),a1
0000FB16 137C 0001 001C             		move.b	#1,$1C(a1)
0000FB1C                            
0000FB1C                            locret_EFFA:
0000FB1C 4E75                       		rts	
0000FB1E                            ; ===========================================================================
0000FB1E                            
0000FB1E                            loc_EFFC:				; XREF: Obj4D_Index
0000FB1E 2268 003C                  		movea.l	$3C(a0),a1
0000FB22 0C29 0006 0024             		cmpi.b	#6,$24(a1)
0000FB28 6700 0000                  		beq.w	Obj4D_Delete
0000FB2C 3029 000C                  		move.w	$C(a1),d0
0000FB30 0640 0060                  		addi.w	#$60,d0
0000FB34 3140 000C                  		move.w	d0,$C(a0)
0000FB38 9068 0030                  		sub.w	$30(a0),d0
0000FB3C 4440                       		neg.w	d0
0000FB3E 7208                       		moveq	#8,d1
0000FB40 0C40 0040                  		cmpi.w	#$40,d0
0000FB44 6C00                       		bge.s	loc_F026
0000FB46 720B                       		moveq	#$B,d1
0000FB48                            
0000FB48                            loc_F026:
0000FB48 0C40 0080                  		cmpi.w	#$80,d0
0000FB4C 6F00                       		ble.s	loc_F02E
0000FB4E 720E                       		moveq	#$E,d1
0000FB50                            
0000FB50                            loc_F02E:
0000FB50 5328 001E                  		subq.b	#1,$1E(a0)
0000FB54 6A00                       		bpl.s	loc_F04C
0000FB56 117C 0007 001E             		move.b	#7,$1E(a0)
0000FB5C 5228 001B                  		addq.b	#1,$1B(a0)
0000FB60 0C28 0002 001B             		cmpi.b	#2,$1B(a0)
0000FB66 6500                       		bcs.s	loc_F04C
0000FB68 117C 0000 001B             		move.b	#0,$1B(a0)
0000FB6E                            
0000FB6E                            loc_F04C:
0000FB6E 1028 001B                  		move.b	$1B(a0),d0
0000FB72 D001                       		add.b	d1,d0
0000FB74 1140 001A                  		move.b	d0,$1A(a0)
0000FB78 6000 FF40                  		bra.w	Obj4D_ChkDel
0000FB7C                            ; ===========================================================================
0000FB7C                            
0000FB7C                            Obj4D_Delete:				; XREF: Obj4D_Index
0000FB7C 6000 E5C8                  		bra.w	DeleteObject
0000FB80                            ; ===========================================================================
0000FB80                            ; ---------------------------------------------------------------------------
0000FB80                            ; Object 4E - advancing	wall of	lava (MZ)
0000FB80                            ; ---------------------------------------------------------------------------
0000FB80                            
0000FB80                            Obj4E:					; XREF: Obj_Index
0000FB80 7000                       		moveq	#0,d0
0000FB82 1028 0024                  		move.b	$24(a0),d0
0000FB86 323B 0000                  		move.w	Obj4E_Index(pc,d0.w),d1
0000FB8A 4EFB 1000                  		jmp	Obj4E_Index(pc,d1.w)
0000FB8E                            ; ===========================================================================
0000FB8E 0000                       Obj4E_Index:	dc.w Obj4E_Main-Obj4E_Index
0000FB90 0000                       		dc.w Obj4E_Solid-Obj4E_Index
0000FB92 0000                       		dc.w Obj4E_Action-Obj4E_Index
0000FB94 0000                       		dc.w Obj4E_Move2-Obj4E_Index
0000FB96 0000                       		dc.w Obj4E_Delete-Obj4E_Index
0000FB98                            ; ===========================================================================
0000FB98                            
0000FB98                            Obj4E_Main:				; XREF: Obj4E_Index
0000FB98 5828 0024                  		addq.b	#4,$24(a0)
0000FB9C 2248                       		movea.l	a0,a1
0000FB9E 7201                       		moveq	#1,d1
0000FBA0 6000                       		bra.s	Obj4E_Main2
0000FBA2                            ; ===========================================================================
0000FBA2                            
0000FBA2                            Obj4E_Loop:
0000FBA2 6100 EA12                  		bsr.w	SingleObjLoad2
0000FBA6 6600                       		bne.s	loc_F0C8
0000FBA8                            
0000FBA8                            Obj4E_Main2:				; XREF: Obj4E_Main
0000FBA8 12BC 004E                  		move.b	#$4E,0(a1)	; load object
0000FBAC 237C 0000 0000 0004        		move.l	#Map_obj4E,4(a1)
0000FBB4 337C 63A8 0002             		move.w	#$63A8,2(a1)
0000FBBA 137C 0004 0001             		move.b	#4,1(a1)
0000FBC0 137C 0050 0019             		move.b	#$50,$19(a1)
0000FBC6 3368 0008 0008             		move.w	8(a0),8(a1)
0000FBCC 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000FBD2 137C 0001 0018             		move.b	#1,$18(a1)
0000FBD8 137C 0000 001C             		move.b	#0,$1C(a1)
0000FBDE 137C 0094 0020             		move.b	#$94,$20(a1)
0000FBE4 2348 003C                  		move.l	a0,$3C(a1)
0000FBE8                            
0000FBE8                            loc_F0C8:
0000FBE8 51C9 FFB8                  		dbf	d1,Obj4E_Loop	; repeat sequence once
0000FBEC                            
0000FBEC 5C29 0024                  		addq.b	#6,$24(a1)
0000FBF0 137C 0004 001A             		move.b	#4,$1A(a1)
0000FBF6                            
0000FBF6                            Obj4E_Action:				; XREF: Obj4E_Index
0000FBF6 3038 D008                  		move.w	($FFFFD008).w,d0
0000FBFA 9068 0008                  		sub.w	8(a0),d0
0000FBFE 6400                       		bcc.s	Obj4E_ChkSonic
0000FC00 4440                       		neg.w	d0
0000FC02                            
0000FC02                            Obj4E_ChkSonic:
0000FC02 0C40 00C0                  		cmpi.w	#$C0,d0		; is Sonic within $C0 pixels (x-axis)?
0000FC06 6400                       		bcc.s	Obj4E_Move	; if not, branch
0000FC08 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000FC0C 9068 000C                  		sub.w	$C(a0),d0
0000FC10 6400                       		bcc.s	loc_F0F4
0000FC12 4440                       		neg.w	d0
0000FC14                            
0000FC14                            loc_F0F4:
0000FC14 0C40 0060                  		cmpi.w	#$60,d0		; is Sonic within $60 pixels (y-axis)?
0000FC18 6400                       		bcc.s	Obj4E_Move	; if not, branch
0000FC1A 117C 0001 0036             		move.b	#1,$36(a0)	; set object to	move
0000FC20 6000                       		bra.s	Obj4E_Solid
0000FC22                            ; ===========================================================================
0000FC22                            
0000FC22                            Obj4E_Move:				; XREF: Obj4E_ChkSonic
0000FC22 4A28 0036                  		tst.b	$36(a0)		; is object set	to move?
0000FC26 6700                       		beq.s	Obj4E_Solid	; if not, branch
0000FC28 317C 0180 0010             		move.w	#$180,$10(a0)	; set object speed
0000FC2E 5528 0024                  		subq.b	#2,$24(a0)
0000FC32                            
0000FC32                            Obj4E_Solid:				; XREF: Obj4E_Index
0000FC32 323C 002B                  		move.w	#$2B,d1
0000FC36 343C 0018                  		move.w	#$18,d2
0000FC3A 3602                       		move.w	d2,d3
0000FC3C 5243                       		addq.w	#1,d3
0000FC3E 3828 0008                  		move.w	8(a0),d4
0000FC42 1028 0024                  		move.b	$24(a0),d0
0000FC46 3F00                       		move.w	d0,-(sp)
0000FC48 6100 0000                  		bsr.w	SolidObject
0000FC4C 301F                       		move.w	(sp)+,d0
0000FC4E 1140 0024                  		move.b	d0,$24(a0)
0000FC52 0C68 06A0 0008             		cmpi.w	#$6A0,8(a0)	; has object reached $6A0 on the x-axis?
0000FC58 6600                       		bne.s	Obj4E_Animate	; if not, branch
0000FC5A 4268 0010                  		clr.w	$10(a0)		; stop object moving
0000FC5E 4228 0036                  		clr.b	$36(a0)
0000FC62                            
0000FC62                            Obj4E_Animate:
0000FC62 43F9 0000 0000             		lea	(Ani_obj4E).l,a1
0000FC68 6100 B5B2                  		bsr.w	AnimateSprite
0000FC6C 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
0000FC72 6400                       		bcc.s	Obj4E_ChkDel
0000FC74 6100 E46E                  		bsr.w	SpeedToPos
0000FC78                            
0000FC78                            Obj4E_ChkDel:
0000FC78 6100 E490                  		bsr.w	DisplaySprite
0000FC7C 4A28 0036                  		tst.b	$36(a0)
0000FC80 6600                       		bne.s	locret_F17E
0000FC82 3028 0008                  		move.w	8(a0),d0
0000FC86 0240 FF80                  		andi.w	#$FF80,d0
0000FC8A 3238 F700                  		move.w	($FFFFF700).w,d1
0000FC8E 0441 0080                  		subi.w	#$80,d1
0000FC92 0241 FF80                  		andi.w	#$FF80,d1
0000FC96 9041                       		sub.w	d1,d0
0000FC98 0C40 0280                  		cmpi.w	#$280,d0
0000FC9C 6200                       		bhi.s	Obj4E_ChkGone
0000FC9E                            
0000FC9E                            locret_F17E:
0000FC9E 4E75                       		rts	
0000FCA0                            ; ===========================================================================
0000FCA0                            
0000FCA0                            Obj4E_ChkGone:				; XREF: Obj4E_ChkDel
0000FCA0 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000FCA4 7000                       		moveq	#0,d0
0000FCA6 1028 0023                  		move.b	$23(a0),d0
0000FCAA 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000FCB0 117C 0008 0024             		move.b	#8,$24(a0)
0000FCB6 4E75                       		rts	
0000FCB8                            ; ===========================================================================
0000FCB8                            
0000FCB8                            Obj4E_Move2:				; XREF: Obj4E_Index
0000FCB8 2268 003C                  		movea.l	$3C(a0),a1
0000FCBC 0C29 0008 0024             		cmpi.b	#8,$24(a1)
0000FCC2 6700                       		beq.s	Obj4E_Delete
0000FCC4 3169 0008 0008             		move.w	8(a1),8(a0)	; move rest of lava wall
0000FCCA 0468 0080 0008             		subi.w	#$80,8(a0)
0000FCD0 6000 E438                  		bra.w	DisplaySprite
0000FCD4                            ; ===========================================================================
0000FCD4                            
0000FCD4                            Obj4E_Delete:				; XREF: Obj4E_Index
0000FCD4 6000 E470                  		bra.w	DeleteObject
0000FCD8                            ; ===========================================================================
0000FCD8                            ; ---------------------------------------------------------------------------
0000FCD8                            ; Object 54 - invisible	lava tag (MZ)
0000FCD8                            ; ---------------------------------------------------------------------------
0000FCD8                            
0000FCD8                            Obj54:					; XREF: Obj_Index
0000FCD8 7000                       		moveq	#0,d0
0000FCDA 1028 0024                  		move.b	$24(a0),d0
0000FCDE 323B 0000                  		move.w	Obj54_Index(pc,d0.w),d1
0000FCE2 4EFB 1000                  		jmp	Obj54_Index(pc,d1.w)
0000FCE6                            ; ===========================================================================
0000FCE6 0000                       Obj54_Index:	dc.w Obj54_Main-Obj54_Index
0000FCE8 0000                       		dc.w Obj54_ChkDel-Obj54_Index
0000FCEA                            
0000FCEA 9694 9500                  Obj54_Sizes:	dc.b $96, $94, $95, 0
0000FCEE                            ; ===========================================================================
0000FCEE                            
0000FCEE                            Obj54_Main:				; XREF: Obj54_Index
0000FCEE 5428 0024                  		addq.b	#2,$24(a0)
0000FCF2 7000                       		moveq	#0,d0
0000FCF4 1028 0028                  		move.b	$28(a0),d0
0000FCF8 117B 00F0 0020             		move.b	Obj54_Sizes(pc,d0.w),$20(a0)
0000FCFE 217C 0000 0000 0004        		move.l	#Map_obj54,4(a0)
0000FD06 117C 0084 0001             		move.b	#$84,1(a0)
0000FD0C                            
0000FD0C                            Obj54_ChkDel:				; XREF: Obj54_Index
0000FD0C 3028 0008                  		move.w	8(a0),d0
0000FD10 0240 FF80                  		andi.w	#$FF80,d0
0000FD14 3238 F700                  		move.w	($FFFFF700).w,d1
0000FD18 0441 0080                  		subi.w	#$80,d1
0000FD1C 0241 FF80                  		andi.w	#$FF80,d1
0000FD20 9041                       		sub.w	d1,d0
0000FD22 6B00 E422                  		bmi.w	DeleteObject
0000FD26 0C40 0280                  		cmpi.w	#$280,d0
0000FD2A 6200 E41A                  		bhi.w	DeleteObject
0000FD2E 4E75                       		rts	
0000FD30                            ; ===========================================================================
0000FD30                            ; ---------------------------------------------------------------------------
0000FD30                            ; Sprite mappings - invisible lava tag (MZ)
0000FD30                            ; ---------------------------------------------------------------------------
0000FD30                            Map_obj54:
0000FD30                            	include "_maps\obj54.asm"
0000FD30                            ; ---------------------------------------------------------------------------
0000FD30                            ; Sprite mappings - invisible lava tag (MZ)
0000FD30                            ; ---------------------------------------------------------------------------
0000FD30 0000                       		dc.w byte_F212-Map_obj54
0000FD32 00                         byte_F212:	dc.b 0			; no sprite, because the tag is invisible!
0000FD34 00                         		even
0000FD34 00                         		even
0000FD34                            
0000FD34                            Ani_obj4C:
0000FD34                            	include "_anim\obj4C.asm"
0000FD34                            ; ---------------------------------------------------------------------------
0000FD34                            ; Animation script - geyser of lava (MZ)
0000FD34                            ; ---------------------------------------------------------------------------
0000FD34 0000                       		dc.w byte_F220-Ani_obj4C
0000FD36 0000                       		dc.w byte_F22A-Ani_obj4C
0000FD38 0000                       		dc.w byte_F22E-Ani_obj4C
0000FD3A 0000                       		dc.w byte_F232-Ani_obj4C
0000FD3C 0000                       		dc.w byte_F23A-Ani_obj4C
0000FD3E 0000                       		dc.w byte_F23E-Ani_obj4C
0000FD40 0200 0100 0104 0504 05FC   byte_F220:	dc.b 2,	0, 1, 0, 1, 4, 5, 4, 5,	$FC
0000FD4A 0202 03FF                  byte_F22A:	dc.b 2,	2, 3, $FF
0000FD4E 0206 07FF                  byte_F22E:	dc.b 2,	6, 7, $FF
0000FD52 0202 0300 0100 01FC        byte_F232:	dc.b 2,	2, 3, 0, 1, 0, 1, $FC
0000FD5A 0F13 FF00                  byte_F23A:	dc.b $F, $13, $FF, 0
0000FD5E 0211 12FF                  byte_F23E:	dc.b 2,	$11, $12, $FF
0000FD62                            		even
0000FD62                            		even
0000FD62                            
0000FD62                            Ani_obj4E:
0000FD62                            	include "_anim\obj4E.asm"
0000FD62                            ; ---------------------------------------------------------------------------
0000FD62                            ; Animation script - advancing wall of lava (MZ)
0000FD62                            ; ---------------------------------------------------------------------------
0000FD62 0000                       		dc.w byte_F244-Ani_obj4E
0000FD64 0900 0102 03FF             byte_F244:	dc.b 9,	0, 1, 2, 3, $FF
0000FD6A                            		even
0000FD6A                            		even
0000FD6A                            
0000FD6A                            ; ---------------------------------------------------------------------------
0000FD6A                            ; Sprite mappings - lava geyser / lava that falls from the ceiling (MZ)
0000FD6A                            ; ---------------------------------------------------------------------------
0000FD6A                            Map_obj4C:
0000FD6A                            	include "_maps\obj4C.asm"
0000FD6A                            ; ---------------------------------------------------------------------------
0000FD6A                            ; Sprite mappings - lava geyser / lava that falls from the ceiling (MZ)
0000FD6A                            ; ---------------------------------------------------------------------------
0000FD6A 0000 0000                  		dc.w byte_F272-Map_obj4C, byte_F27D-Map_obj4C
0000FD6E 0000 0000                  		dc.w byte_F288-Map_obj4C, byte_F29D-Map_obj4C
0000FD72 0000 0000                  		dc.w byte_F2B2-Map_obj4C, byte_F2D1-Map_obj4C
0000FD76 0000 0000                  		dc.w byte_F2F0-Map_obj4C, byte_F2FB-Map_obj4C
0000FD7A 0000 0000                  		dc.w byte_F306-Map_obj4C, byte_F339-Map_obj4C
0000FD7E 0000 0000                  		dc.w byte_F36C-Map_obj4C, byte_F39F-Map_obj4C
0000FD82 0000 0000                  		dc.w byte_F3BE-Map_obj4C, byte_F3DD-Map_obj4C
0000FD86 0000 0000                  		dc.w byte_F3FC-Map_obj4C, byte_F44D-Map_obj4C
0000FD8A 0000 0000                  		dc.w byte_F49E-Map_obj4C, byte_F4EF-Map_obj4C
0000FD8E 0000 0000                  		dc.w byte_F50E-Map_obj4C, byte_F52D-Map_obj4C
0000FD92 02                         byte_F272:	dc.b 2
0000FD93 EC0B 0000 E8               		dc.b $EC, $B, 0, 0, $E8
0000FD98 EC0B 0800 00               		dc.b $EC, $B, 8, 0, 0
0000FD9D 02                         byte_F27D:	dc.b 2
0000FD9E EC0B 0018 E8               		dc.b $EC, $B, 0, $18, $E8
0000FDA3 EC0B 0818 00               		dc.b $EC, $B, 8, $18, 0
0000FDA8 04                         byte_F288:	dc.b 4
0000FDA9 EC0B 0000 C8               		dc.b $EC, $B, 0, 0, $C8
0000FDAE F40E 000C E0               		dc.b $F4, $E, 0, $C, $E0
0000FDB3 F40E 080C 00               		dc.b $F4, $E, 8, $C, 0
0000FDB8 EC0B 0800 20               		dc.b $EC, $B, 8, 0, $20
0000FDBD 04                         byte_F29D:	dc.b 4
0000FDBE EC0B 0018 C8               		dc.b $EC, $B, 0, $18, $C8
0000FDC3 F40E 0024 E0               		dc.b $F4, $E, 0, $24, $E0
0000FDC8 F40E 0824 00               		dc.b $F4, $E, 8, $24, 0
0000FDCD EC0B 0818 20               		dc.b $EC, $B, 8, $18, $20
0000FDD2 06                         byte_F2B2:	dc.b 6
0000FDD3 EC0B 0000 C8               		dc.b $EC, $B, 0, 0, $C8
0000FDD8 F40E 000C E0               		dc.b $F4, $E, 0, $C, $E0
0000FDDD F40E 080C 00               		dc.b $F4, $E, 8, $C, 0
0000FDE2 EC0B 0800 20               		dc.b $EC, $B, 8, 0, $20
0000FDE7 E80E 0090 E0               		dc.b $E8, $E, 0, $90, $E0
0000FDEC E80E 0890 00               		dc.b $E8, $E, 8, $90, 0
0000FDF1 06                         byte_F2D1:	dc.b 6
0000FDF2 EC0B 0018 C8               		dc.b $EC, $B, 0, $18, $C8
0000FDF7 F40E 0024 E0               		dc.b $F4, $E, 0, $24, $E0
0000FDFC F40E 0824 00               		dc.b $F4, $E, 8, $24, 0
0000FE01 EC0B 0818 20               		dc.b $EC, $B, 8, $18, $20
0000FE06 E80E 0890 E0               		dc.b $E8, $E, 8, $90, $E0
0000FE0B E80E 0090 00               		dc.b $E8, $E, 0, $90, 0
0000FE10 02                         byte_F2F0:	dc.b 2
0000FE11 E00F 0030 E0               		dc.b $E0, $F, 0, $30, $E0
0000FE16 E00F 0830 00               		dc.b $E0, $F, 8, $30, 0
0000FE1B 02                         byte_F2FB:	dc.b 2
0000FE1C E00F 0830 E0               		dc.b $E0, $F, 8, $30, $E0
0000FE21 E00F 0030 00               		dc.b $E0, $F, 0, $30, 0
0000FE26 0A                         byte_F306:	dc.b $A
0000FE27 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
0000FE2C 900F 0840 00               		dc.b $90, $F, 8, $40, 0
0000FE31 B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
0000FE36 B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
0000FE3B D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
0000FE40 D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
0000FE45 F00F 0040 E0               		dc.b $F0, $F, 0, $40, $E0
0000FE4A F00F 0840 00               		dc.b $F0, $F, 8, $40, 0
0000FE4F 100F 0040 E0               		dc.b $10, $F, 0, $40, $E0
0000FE54 100F 0840 00               		dc.b $10, $F, 8, $40, 0
0000FE59 0A                         byte_F339:	dc.b $A
0000FE5A 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
0000FE5F 900F 0850 00               		dc.b $90, $F, 8, $50, 0
0000FE64 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
0000FE69 B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
0000FE6E D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
0000FE73 D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
0000FE78 F00F 0050 E0               		dc.b $F0, $F, 0, $50, $E0
0000FE7D F00F 0850 00               		dc.b $F0, $F, 8, $50, 0
0000FE82 100F 0050 E0               		dc.b $10, $F, 0, $50, $E0
0000FE87 100F 0850 00               		dc.b $10, $F, 8, $50, 0
0000FE8C 0A                         byte_F36C:	dc.b $A
0000FE8D 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
0000FE92 900F 0860 00               		dc.b $90, $F, 8, $60, 0
0000FE97 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
0000FE9C B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
0000FEA1 D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
0000FEA6 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
0000FEAB F00F 0060 E0               		dc.b $F0, $F, 0, $60, $E0
0000FEB0 F00F 0860 00               		dc.b $F0, $F, 8, $60, 0
0000FEB5 100F 0060 E0               		dc.b $10, $F, 0, $60, $E0
0000FEBA 100F 0860 00               		dc.b $10, $F, 8, $60, 0
0000FEBF 06                         byte_F39F:	dc.b 6
0000FEC0 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
0000FEC5 900F 0840 00               		dc.b $90, $F, 8, $40, 0
0000FECA B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
0000FECF B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
0000FED4 D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
0000FED9 D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
0000FEDE 06                         byte_F3BE:	dc.b 6
0000FEDF 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
0000FEE4 900F 0850 00               		dc.b $90, $F, 8, $50, 0
0000FEE9 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
0000FEEE B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
0000FEF3 D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
0000FEF8 D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
0000FEFD 06                         byte_F3DD:	dc.b 6
0000FEFE 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
0000FF03 900F 0860 00               		dc.b $90, $F, 8, $60, 0
0000FF08 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
0000FF0D B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
0000FF12 D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
0000FF17 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
0000FF1C 10                         byte_F3FC:	dc.b $10
0000FF1D 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
0000FF22 900F 0840 00               		dc.b $90, $F, 8, $40, 0
0000FF27 B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
0000FF2C B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
0000FF31 D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
0000FF36 D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
0000FF3B F00F 0040 E0               		dc.b $F0, $F, 0, $40, $E0
0000FF40 F00F 0840 00               		dc.b $F0, $F, 8, $40, 0
0000FF45 100F 0040 E0               		dc.b $10, $F, 0, $40, $E0
0000FF4A 100F 0840 00               		dc.b $10, $F, 8, $40, 0
0000FF4F 300F 0040 E0               		dc.b $30, $F, 0, $40, $E0
0000FF54 300F 0840 00               		dc.b $30, $F, 8, $40, 0
0000FF59 500F 0040 E0               		dc.b $50, $F, 0, $40, $E0
0000FF5E 500F 0840 00               		dc.b $50, $F, 8, $40, 0
0000FF63 700F 0040 E0               		dc.b $70, $F, 0, $40, $E0
0000FF68 700F 0840 00               		dc.b $70, $F, 8, $40, 0
0000FF6D 10                         byte_F44D:	dc.b $10
0000FF6E 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
0000FF73 900F 0850 00               		dc.b $90, $F, 8, $50, 0
0000FF78 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
0000FF7D B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
0000FF82 D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
0000FF87 D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
0000FF8C F00F 0050 E0               		dc.b $F0, $F, 0, $50, $E0
0000FF91 F00F 0850 00               		dc.b $F0, $F, 8, $50, 0
0000FF96 100F 0050 E0               		dc.b $10, $F, 0, $50, $E0
0000FF9B 100F 0850 00               		dc.b $10, $F, 8, $50, 0
0000FFA0 300F 0050 E0               		dc.b $30, $F, 0, $50, $E0
0000FFA5 300F 0850 00               		dc.b $30, $F, 8, $50, 0
0000FFAA 500F 0050 E0               		dc.b $50, $F, 0, $50, $E0
0000FFAF 500F 0850 00               		dc.b $50, $F, 8, $50, 0
0000FFB4 700F 0050 E0               		dc.b $70, $F, 0, $50, $E0
0000FFB9 700F 0850 00               		dc.b $70, $F, 8, $50, 0
0000FFBE 10                         byte_F49E:	dc.b $10
0000FFBF 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
0000FFC4 900F 0860 00               		dc.b $90, $F, 8, $60, 0
0000FFC9 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
0000FFCE B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
0000FFD3 D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
0000FFD8 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
0000FFDD F00F 0060 E0               		dc.b $F0, $F, 0, $60, $E0
0000FFE2 F00F 0860 00               		dc.b $F0, $F, 8, $60, 0
0000FFE7 100F 0060 E0               		dc.b $10, $F, 0, $60, $E0
0000FFEC 100F 0860 00               		dc.b $10, $F, 8, $60, 0
0000FFF1 300F 0060 E0               		dc.b $30, $F, 0, $60, $E0
0000FFF6 300F 0860 00               		dc.b $30, $F, 8, $60, 0
0000FFFB 500F 0060 E0               		dc.b $50, $F, 0, $60, $E0
00010000 500F 0860 00               		dc.b $50, $F, 8, $60, 0
00010005 700F 0060 E0               		dc.b $70, $F, 0, $60, $E0
0001000A 700F 0860 00               		dc.b $70, $F, 8, $60, 0
0001000F 06                         byte_F4EF:	dc.b 6
00010010 E00B 0000 C8               		dc.b $E0, $B, 0, 0, $C8
00010015 E80E 000C E0               		dc.b $E8, $E, 0, $C, $E0
0001001A E80E 080C 00               		dc.b $E8, $E, 8, $C, 0
0001001F E00B 0800 20               		dc.b $E0, $B, 8, 0, $20
00010024 D80E 0090 E0               		dc.b $D8, $E, 0, $90, $E0
00010029 D80E 0890 00               		dc.b $D8, $E, 8, $90, 0
0001002E 06                         byte_F50E:	dc.b 6
0001002F E00B 0018 C8               		dc.b $E0, $B, 0, $18, $C8
00010034 E80E 0024 E0               		dc.b $E8, $E, 0, $24, $E0
00010039 E80E 0824 00               		dc.b $E8, $E, 8, $24, 0
0001003E E00B 0818 20               		dc.b $E0, $B, 8, $18, $20
00010043 D80E 0890 E0               		dc.b $D8, $E, 8, $90, $E0
00010048 D80E 0090 00               		dc.b $D8, $E, 0, $90, 0
0001004D 00                         byte_F52D:	dc.b 0
0001004E                            		even
0001004E                            		even
0001004E                            
0001004E                            ; ---------------------------------------------------------------------------
0001004E                            ; Sprite mappings - advancing wall of lava (MZ)
0001004E                            ; ---------------------------------------------------------------------------
0001004E                            Map_obj4E:
0001004E                            	include "_maps\obj4E.asm"
0001004E                            ; ---------------------------------------------------------------------------
0001004E                            ; Sprite mappings - advancing wall of lava (MZ)
0001004E                            ; ---------------------------------------------------------------------------
0001004E 0000                       		dc.w byte_F538-Map_obj4E
00010050 0000                       		dc.w byte_F566-Map_obj4E
00010052 0000                       		dc.w byte_F594-Map_obj4E
00010054 0000                       		dc.w byte_F5C2-Map_obj4E
00010056 0000                       		dc.w byte_F5F0-Map_obj4E
00010058 09                         byte_F538:	dc.b 9
00010059 E00F 0060 20               		dc.b $E0, $F, 0, $60, $20
0001005E 000F 0070 3C               		dc.b 0,	$F, 0, $70, $3C
00010063 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
00010068 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0001006D 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
00010072 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
00010077 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0001007C E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
00010081 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
00010086 09                         byte_F566:	dc.b 9
00010087 E00F 0070 20               		dc.b $E0, $F, 0, $70, $20
0001008C 000F 0080 3C               		dc.b 0,	$F, 0, $80, $3C
00010091 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
00010096 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0001009B 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
000100A0 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
000100A5 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
000100AA E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
000100AF 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
000100B4 09                         byte_F594:	dc.b 9
000100B5 E00F 0080 20               		dc.b $E0, $F, 0, $80, $20
000100BA 000F 0070 3C               		dc.b 0,	$F, 0, $70, $3C
000100BF 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
000100C4 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
000100C9 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
000100CE E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
000100D3 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
000100D8 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
000100DD 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
000100E2 09                         byte_F5C2:	dc.b 9
000100E3 E00F 0070 20               		dc.b $E0, $F, 0, $70, $20
000100E8 000F 0060 3C               		dc.b 0,	$F, 0, $60, $3C
000100ED 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
000100F2 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
000100F7 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
000100FC E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
00010101 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
00010106 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0001010B 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
00010110 08                         byte_F5F0:	dc.b 8
00010111 E00F FF2A 20               		dc.b $E0, $F, $FF, $2A,	$20
00010116 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0001011B E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
00010120 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
00010125 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0001012A 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0001012F E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
00010134 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0001013A 00                         		even
0001013A 00                         		even
0001013A                            
0001013A                            ; ===========================================================================
0001013A                            ; ---------------------------------------------------------------------------
0001013A                            ; Object 40 - Moto Bug enemy (GHZ)
0001013A                            ; ---------------------------------------------------------------------------
0001013A                            
0001013A                            Obj40:					; XREF: Obj_Index
0001013A 7000                       		moveq	#0,d0
0001013C 1028 0024                  		move.b	$24(a0),d0
00010140 323B 0000                  		move.w	Obj40_Index(pc,d0.w),d1
00010144 4EFB 1000                  		jmp	Obj40_Index(pc,d1.w)
00010148                            ; ===========================================================================
00010148 0000                       Obj40_Index:	dc.w Obj40_Main-Obj40_Index
0001014A 0000                       		dc.w Obj40_Action-Obj40_Index
0001014C 0000                       		dc.w Obj40_Animate-Obj40_Index
0001014E 0000                       		dc.w Obj40_Delete-Obj40_Index
00010150                            ; ===========================================================================
00010150                            
00010150                            Obj40_Main:				; XREF: Obj40_Index
00010150 217C 0000 0000 0004        		move.l	#Map_obj40,4(a0)
00010158 317C 04F0 0002             		move.w	#$4F0,2(a0)
0001015E 117C 0004 0001             		move.b	#4,1(a0)
00010164 117C 0004 0018             		move.b	#4,$18(a0)
0001016A 117C 0014 0019             		move.b	#$14,$19(a0)
00010170 4A28 001C                  		tst.b	$1C(a0)		; is object a smoke trail?
00010174 6600                       		bne.s	Obj40_SetSmoke	; if yes, branch
00010176 117C 000E 0016             		move.b	#$E,$16(a0)
0001017C 117C 0008 0017             		move.b	#8,$17(a0)
00010182 117C 000C 0020             		move.b	#$C,$20(a0)
00010188 6100 DF2E                  		bsr.w	ObjectFall
0001018C 4EB9 0000 0000             		jsr	ObjHitFloor
00010192 4A41                       		tst.w	d1
00010194 6A00                       		bpl.s	locret_F68A
00010196 D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
0001019A 317C 0000 0012             		move.w	#0,$12(a0)
000101A0 5428 0024                  		addq.b	#2,$24(a0)
000101A4 0868 0000 0022             		bchg	#0,$22(a0)
000101AA                            
000101AA                            locret_F68A:
000101AA 4E75                       		rts	
000101AC                            ; ===========================================================================
000101AC                            
000101AC                            Obj40_SetSmoke:				; XREF: Obj40_Main
000101AC 5828 0024                  		addq.b	#4,$24(a0)
000101B0 6000 0000                  		bra.w	Obj40_Animate
000101B4                            ; ===========================================================================
000101B4                            
000101B4                            Obj40_Action:				; XREF: Obj40_Index
000101B4 7000                       		moveq	#0,d0
000101B6 1028 0025                  		move.b	$25(a0),d0
000101BA 323B 0000                  		move.w	Obj40_Index2(pc,d0.w),d1
000101BE 4EBB 1000                  		jsr	Obj40_Index2(pc,d1.w)
000101C2 43F9 0000 0000             		lea	(Ani_obj40).l,a1
000101C8 6100 B052                  		bsr.w	AnimateSprite
000101CC                            
000101CC                            ; ---------------------------------------------------------------------------
000101CC                            ; Routine to mark an enemy/monitor/ring	as destroyed
000101CC                            ; ---------------------------------------------------------------------------
000101CC                            
000101CC                            MarkObjGone:
000101CC 3028 0008                  		move.w	8(a0),d0
000101D0 0240 FF80                  		andi.w	#$FF80,d0
000101D4 3238 F700                  		move.w	($FFFFF700).w,d1
000101D8 0441 0080                  		subi.w	#$80,d1
000101DC 0241 FF80                  		andi.w	#$FF80,d1
000101E0 9041                       		sub.w	d1,d0
000101E2 0C40 0280                  		cmpi.w	#$280,d0
000101E6 6200 0000                  		bhi.w	Mark_ChkGone
000101EA 6000 DF1E                  		bra.w	DisplaySprite
000101EE                            ; ===========================================================================
000101EE                            
000101EE                            Mark_ChkGone:
000101EE 45F8 FC00                  		lea	($FFFFFC00).w,a2
000101F2 7000                       		moveq	#0,d0
000101F4 1028 0023                  		move.b	$23(a0),d0
000101F8 6700                       		beq.s	Mark_Delete
000101FA 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00010200                            
00010200                            Mark_Delete:
00010200 6000 DF44                  		bra.w	DeleteObject
00010204                            
00010204                            ; ===========================================================================
00010204 0000                       Obj40_Index2:	dc.w Obj40_Move-Obj40_Index2
00010206 0000                       		dc.w Obj40_FixToFloor-Obj40_Index2
00010208                            ; ===========================================================================
00010208                            
00010208                            Obj40_Move:				; XREF: Obj40_Index2
00010208 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from pause	time
0001020C 6A00                       		bpl.s	locret_F70A	; if time remains, branch
0001020E 5428 0025                  		addq.b	#2,$25(a0)
00010212 317C FF00 0010             		move.w	#-$100,$10(a0)	; move object to the left
00010218 117C 0001 001C             		move.b	#1,$1C(a0)
0001021E 0868 0000 0022             		bchg	#0,$22(a0)
00010224 6600                       		bne.s	locret_F70A
00010226 4468 0010                  		neg.w	$10(a0)		; change direction
0001022A                            
0001022A                            locret_F70A:
0001022A 4E75                       		rts	
0001022C                            ; ===========================================================================
0001022C                            
0001022C                            Obj40_FixToFloor:			; XREF: Obj40_Index2
0001022C 6100 DEB6                  		bsr.w	SpeedToPos
00010230 4EB9 0000 0000             		jsr	ObjHitFloor
00010236 0C41 FFF8                  		cmpi.w	#-8,d1
0001023A 6D00                       		blt.s	Obj40_Pause
0001023C 0C41 000C                  		cmpi.w	#$C,d1
00010240 6C00                       		bge.s	Obj40_Pause
00010242 D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
00010246 5328 0033                  		subq.b	#1,$33(a0)
0001024A 6A00                       		bpl.s	locret_F756
0001024C 117C 000F 0033             		move.b	#$F,$33(a0)
00010252 6100 E34C                  		bsr.w	SingleObjLoad
00010256 6600                       		bne.s	locret_F756
00010258 12BC 0040                  		move.b	#$40,0(a1)	; load exhaust smoke object
0001025C 3368 0008 0008             		move.w	8(a0),8(a1)
00010262 3368 000C 000C             		move.w	$C(a0),$C(a1)
00010268 1368 0022 0022             		move.b	$22(a0),$22(a1)
0001026E 137C 0002 001C             		move.b	#2,$1C(a1)
00010274                            
00010274                            locret_F756:
00010274 4E75                       		rts	
00010276                            ; ===========================================================================
00010276                            
00010276                            Obj40_Pause:				; XREF: Obj40_FixToFloor
00010276 5528 0025                  		subq.b	#2,$25(a0)
0001027A 317C 003B 0030             		move.w	#59,$30(a0)	; set pause time to 1 second
00010280 317C 0000 0010             		move.w	#0,$10(a0)	; stop the object moving
00010286 117C 0000 001C             		move.b	#0,$1C(a0)
0001028C 4E75                       		rts	
0001028E                            ; ===========================================================================
0001028E                            
0001028E                            Obj40_Animate:				; XREF: Obj40_Index
0001028E 43F9 0000 0000             		lea	(Ani_obj40).l,a1
00010294 6100 AF86                  		bsr.w	AnimateSprite
00010298 6000 DE70                  		bra.w	DisplaySprite
0001029C                            ; ===========================================================================
0001029C                            
0001029C                            Obj40_Delete:				; XREF: Obj40_Index
0001029C 6000 DEA8                  		bra.w	DeleteObject
000102A0                            ; ===========================================================================
000102A0                            Ani_obj40:
000102A0                            	include "_anim\obj40.asm"
000102A0                            ; ---------------------------------------------------------------------------
000102A0                            ; Animation script - Motobug enemy
000102A0                            ; ---------------------------------------------------------------------------
000102A0 0000                       		dc.w byte_F788-Ani_obj40
000102A2 0000                       		dc.w byte_F78C-Ani_obj40
000102A4 0000                       		dc.w byte_F792-Ani_obj40
000102A6 0F02 FF00                  byte_F788:	dc.b $F, 2, $FF, 0
000102AA 0700 0100 02FF             byte_F78C:	dc.b 7,	0, 1, 0, 2, $FF
000102B0 0103 0603 0604 0604 0604+  byte_F792:	dc.b 1,	3, 6, 3, 6, 4, 6, 4, 6,	4, 6, 5, $FC, 0
000102BE                            		even
000102BE                            		even
000102BE                            
000102BE                            ; ---------------------------------------------------------------------------
000102BE                            ; Sprite mappings - Moto Bug enemy (GHZ)
000102BE                            ; ---------------------------------------------------------------------------
000102BE                            Map_obj40:
000102BE                            	include "_maps\obj40.asm"
000102BE                            ; ---------------------------------------------------------------------------
000102BE                            ; Sprite mappings - Moto Bug enemy (GHZ)
000102BE                            ; ---------------------------------------------------------------------------
000102BE 0000 0000                  		dc.w byte_F7AE-Map_obj40, byte_F7C3-Map_obj40
000102C2 0000 0000                  		dc.w byte_F7D8-Map_obj40, byte_F7F2-Map_obj40
000102C6 0000 0000                  		dc.w byte_F7F8-Map_obj40, byte_F7FE-Map_obj40
000102CA 0000                       		dc.w byte_F804-Map_obj40
000102CC 04                         byte_F7AE:	dc.b 4
000102CD F00D 0000 EC               		dc.b $F0, $D, 0, 0, $EC
000102D2 000C 0008 EC               		dc.b 0,	$C, 0, 8, $EC
000102D7 F801 000C 0C               		dc.b $F8, 1, 0,	$C, $C
000102DC 0808 000E F4               		dc.b 8,	8, 0, $E, $F4
000102E1 04                         byte_F7C3:	dc.b 4
000102E2 F10D 0000 EC               		dc.b $F1, $D, 0, 0, $EC
000102E7 010C 0008 EC               		dc.b 1,	$C, 0, 8, $EC
000102EC F901 000C 0C               		dc.b $F9, 1, 0,	$C, $C
000102F1 0908 0011 F4               		dc.b 9,	8, 0, $11, $F4
000102F6 05                         byte_F7D8:	dc.b 5
000102F7 F00D 0000 EC               		dc.b $F0, $D, 0, 0, $EC
000102FC 000C 0014 EC               		dc.b 0,	$C, 0, $14, $EC
00010301 F801 000C 0C               		dc.b $F8, 1, 0,	$C, $C
00010306 0804 0018 EC               		dc.b 8,	4, 0, $18, $EC
0001030B 0804 0012 FC               		dc.b 8,	4, 0, $12, $FC
00010310 01                         byte_F7F2:	dc.b 1
00010311 FA00 001A 10               		dc.b $FA, 0, 0,	$1A, $10
00010316 01                         byte_F7F8:	dc.b 1
00010317 FA00 001B 10               		dc.b $FA, 0, 0,	$1B, $10
0001031C 01                         byte_F7FE:	dc.b 1
0001031D FA00 001C 10               		dc.b $FA, 0, 0,	$1C, $10
00010322 00                         byte_F804:	dc.b 0
00010324 00                         		even
00010324 00                         		even
00010324                            
00010324                            ; ===========================================================================
00010324                            ; ---------------------------------------------------------------------------
00010324                            ; Object 4F - blank
00010324                            ; ---------------------------------------------------------------------------
00010324                            
00010324                            Obj4F:					; XREF: Obj_Index
00010324 4E75                       		rts	
00010326                            
00010326                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00010326                            
00010326                            
00010326                            Obj50_ChkWall:				; XREF: Obj50_FixToFloor
00010326 3038 FE04                  		move.w	($FFFFFE04).w,d0
0001032A D047                       		add.w	d7,d0
0001032C 0240 0003                  		andi.w	#3,d0
00010330 6600                       		bne.s	loc_F836
00010332 7600                       		moveq	#0,d3
00010334 1628 0019                  		move.b	$19(a0),d3
00010338 4A68 0010                  		tst.w	$10(a0)
0001033C 6B00                       		bmi.s	loc_F82C
0001033E 6100 0000                  		bsr.w	ObjHitWallRight
00010342 4A41                       		tst.w	d1
00010344 6A00                       		bpl.s	loc_F836
00010346                            
00010346                            loc_F828:
00010346 7001                       		moveq	#1,d0
00010348 4E75                       		rts	
0001034A                            ; ===========================================================================
0001034A                            
0001034A                            loc_F82C:
0001034A 4643                       		not.w	d3
0001034C 6100 0000                  		bsr.w	ObjHitWallLeft
00010350 4A41                       		tst.w	d1
00010352 6BF2                       		bmi.s	loc_F828
00010354                            
00010354                            loc_F836:
00010354 7000                       		moveq	#0,d0
00010356 4E75                       		rts	
00010358                            ; End of function Obj50_ChkWall
00010358                            
00010358                            ; ===========================================================================
00010358                            ; ---------------------------------------------------------------------------
00010358                            ; Object 50 - Yadrin enemy (SYZ)
00010358                            ; ---------------------------------------------------------------------------
00010358                            
00010358                            Obj50:					; XREF: Obj_Index
00010358 7000                       		moveq	#0,d0
0001035A 1028 0024                  		move.b	$24(a0),d0
0001035E 323B 0000                  		move.w	Obj50_Index(pc,d0.w),d1
00010362 4EFB 1000                  		jmp	Obj50_Index(pc,d1.w)
00010366                            ; ===========================================================================
00010366 0000                       Obj50_Index:	dc.w Obj50_Main-Obj50_Index
00010368 0000                       		dc.w Obj50_Action-Obj50_Index
0001036A                            ; ===========================================================================
0001036A                            
0001036A                            Obj50_Main:				; XREF: Obj50_Index
0001036A 217C 0000 0000 0004        		move.l	#Map_obj50,4(a0)
00010372 317C 247B 0002             		move.w	#$247B,2(a0)
00010378 117C 0004 0001             		move.b	#4,1(a0)
0001037E 117C 0004 0018             		move.b	#4,$18(a0)
00010384 117C 0014 0019             		move.b	#$14,$19(a0)
0001038A 117C 0011 0016             		move.b	#$11,$16(a0)
00010390 117C 0008 0017             		move.b	#8,$17(a0)
00010396 117C 00CC 0020             		move.b	#$CC,$20(a0)
0001039C 6100 DD1A                  		bsr.w	ObjectFall
000103A0 6100 0000                  		bsr.w	ObjHitFloor
000103A4 4A41                       		tst.w	d1
000103A6 6A00                       		bpl.s	locret_F89E
000103A8 D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
000103AC 317C 0000 0012             		move.w	#0,$12(a0)
000103B2 5428 0024                  		addq.b	#2,$24(a0)
000103B6 0868 0000 0022             		bchg	#0,$22(a0)
000103BC                            
000103BC                            locret_F89E:
000103BC 4E75                       		rts	
000103BE                            ; ===========================================================================
000103BE                            
000103BE                            Obj50_Action:				; XREF: Obj50_Index
000103BE 7000                       		moveq	#0,d0
000103C0 1028 0025                  		move.b	$25(a0),d0
000103C4 323B 0000                  		move.w	Obj50_Index2(pc,d0.w),d1
000103C8 4EBB 1000                  		jsr	Obj50_Index2(pc,d1.w)
000103CC 43F9 0000 0000             		lea	(Ani_obj50).l,a1
000103D2 6100 AE48                  		bsr.w	AnimateSprite
000103D6 6000 FDF4                  		bra.w	MarkObjGone
000103DA                            ; ===========================================================================
000103DA 0000                       Obj50_Index2:	dc.w Obj50_Move-Obj50_Index2
000103DC 0000                       		dc.w Obj50_FixToFloor-Obj50_Index2
000103DE                            ; ===========================================================================
000103DE                            
000103DE                            Obj50_Move:				; XREF: Obj50_Index2
000103DE 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from pause	time
000103E2 6A00                       		bpl.s	locret_F8E2	; if time remains, branch
000103E4 5428 0025                  		addq.b	#2,$25(a0)
000103E8 317C FF00 0010             		move.w	#-$100,$10(a0)	; move object
000103EE 117C 0001 001C             		move.b	#1,$1C(a0)
000103F4 0868 0000 0022             		bchg	#0,$22(a0)
000103FA 6600                       		bne.s	locret_F8E2
000103FC 4468 0010                  		neg.w	$10(a0)		; change direction
00010400                            
00010400                            locret_F8E2:
00010400 4E75                       		rts	
00010402                            ; ===========================================================================
00010402                            
00010402                            Obj50_FixToFloor:			; XREF: Obj50_Index2
00010402 6100 DCE0                  		bsr.w	SpeedToPos
00010406 6100 0000                  		bsr.w	ObjHitFloor
0001040A 0C41 FFF8                  		cmpi.w	#-8,d1
0001040E 6D00                       		blt.s	Obj50_Pause
00010410 0C41 000C                  		cmpi.w	#$C,d1
00010414 6C00                       		bge.s	Obj50_Pause
00010416 D368 000C                  		add.w	d1,$C(a0)	; match	object's position to the floor
0001041A 6100 FF0A                  		bsr.w	Obj50_ChkWall
0001041E 6600                       		bne.s	Obj50_Pause
00010420 4E75                       		rts	
00010422                            ; ===========================================================================
00010422                            
00010422                            Obj50_Pause:				; XREF: Obj50_FixToFloor
00010422 5528 0025                  		subq.b	#2,$25(a0)
00010426 317C 003B 0030             		move.w	#59,$30(a0)	; set pause time to 1 second
0001042C 317C 0000 0010             		move.w	#0,$10(a0)
00010432 117C 0000 001C             		move.b	#0,$1C(a0)
00010438 4E75                       		rts	
0001043A                            ; ===========================================================================
0001043A                            Ani_obj50:
0001043A                            	include "_anim\obj50.asm"
0001043A                            ; ---------------------------------------------------------------------------
0001043A                            ; Animation script - Yadrin enemy
0001043A                            ; ---------------------------------------------------------------------------
0001043A 0000                       		dc.w byte_F920-Ani_obj50
0001043C 0000                       		dc.w byte_F924-Ani_obj50
0001043E 0700 FF00                  byte_F920:	dc.b 7,	0, $FF,	0
00010442 0700 0301 0400 0302 05FF   byte_F924:	dc.b 7,	0, 3, 1, 4, 0, 3, 2, 5,	$FF
0001044C                            		even
0001044C                            		even
0001044C                            
0001044C                            ; ---------------------------------------------------------------------------
0001044C                            ; Sprite mappings - Yadrin enemy (SYZ)
0001044C                            ; ---------------------------------------------------------------------------
0001044C                            Map_obj50:
0001044C                            	include "_maps\obj50.asm"
0001044C                            ; ---------------------------------------------------------------------------
0001044C                            ; Sprite mappings - Yadrin enemy (SYZ)
0001044C                            ; ---------------------------------------------------------------------------
0001044C 0000 0000                  		dc.w byte_F93A-Map_obj50, byte_F954-Map_obj50
00010450 0000 0000                  		dc.w byte_F96E-Map_obj50, byte_F988-Map_obj50
00010454 0000 0000                  		dc.w byte_F9A2-Map_obj50, byte_F9BC-Map_obj50
00010458 05                         byte_F93A:	dc.b 5
00010459 F408 0000 F4               		dc.b $F4, 8, 0,	0, $F4
0001045E FC0E 0003 EC               		dc.b $FC, $E, 0, 3, $EC
00010463 EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
00010468 F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
0001046D 0409 0031 FC               		dc.b 4,	9, 0, $31, $FC
00010472 05                         byte_F954:	dc.b 5
00010473 F408 0014 F4               		dc.b $F4, 8, 0,	$14, $F4
00010478 FC0E 0017 EC               		dc.b $FC, $E, 0, $17, $EC
0001047D EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
00010482 F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
00010487 0409 0031 FC               		dc.b 4,	9, 0, $31, $FC
0001048C 05                         byte_F96E:	dc.b 5
0001048D F409 0023 F4               		dc.b $F4, 9, 0,	$23, $F4
00010492 040D 0029 EC               		dc.b 4,	$D, 0, $29, $EC
00010497 EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
0001049C F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
000104A1 0409 0031 FC               		dc.b 4,	9, 0, $31, $FC
000104A6 05                         byte_F988:	dc.b 5
000104A7 F408 0000 F4               		dc.b $F4, 8, 0,	0, $F4
000104AC FC0E 0003 EC               		dc.b $FC, $E, 0, 3, $EC
000104B1 EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
000104B6 F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
000104BB 0409 0037 FC               		dc.b 4,	9, 0, $37, $FC
000104C0 05                         byte_F9A2:	dc.b 5
000104C1 F408 0014 F4               		dc.b $F4, 8, 0,	$14, $F4
000104C6 FC0E 0017 EC               		dc.b $FC, $E, 0, $17, $EC
000104CB EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
000104D0 F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
000104D5 0409 0037 FC               		dc.b 4,	9, 0, $37, $FC
000104DA 05                         byte_F9BC:	dc.b 5
000104DB F409 0023 F4               		dc.b $F4, 9, 0,	$23, $F4
000104E0 040D 0029 EC               		dc.b 4,	$D, 0, $29, $EC
000104E5 EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
000104EA F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
000104EF 0409 0037 FC               		dc.b 4,	9, 0, $37, $FC
000104F4                            		even
000104F4                            		even
000104F4                            
000104F4                            ; ---------------------------------------------------------------------------
000104F4                            ; Solid	object subroutine (includes spikes, blocks, rocks etc)
000104F4                            ;
000104F4                            ; variables:
000104F4                            ; d1 = width
000104F4                            ; d2 = height /	2 (when	jumping)
000104F4                            ; d3 = height /	2 (when	walking)
000104F4                            ; d4 = x-axis position
000104F4                            ; ---------------------------------------------------------------------------
000104F4                            
000104F4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000104F4                            
000104F4                            
000104F4                            SolidObject:
000104F4 4A28 0025                  		tst.b	$25(a0)
000104F8 6700 0000                  		beq.w	loc_FAC8
000104FC 3401                       		move.w	d1,d2
000104FE D442                       		add.w	d2,d2
00010500 43F8 D000                  		lea	($FFFFD000).w,a1
00010504 0829 0001 0022             		btst	#1,$22(a1)
0001050A 6600                       		bne.s	loc_F9FE
0001050C 3029 0008                  		move.w	8(a1),d0
00010510 9068 0008                  		sub.w	8(a0),d0
00010514 D041                       		add.w	d1,d0
00010516 6B00                       		bmi.s	loc_F9FE
00010518 B042                       		cmp.w	d2,d0
0001051A 6500                       		bcs.s	loc_FA12
0001051C                            
0001051C                            loc_F9FE:
0001051C 08A9 0003 0022             		bclr	#3,$22(a1)
00010522 08A8 0003 0022             		bclr	#3,$22(a0)
00010528 4228 0025                  		clr.b	$25(a0)
0001052C 7800                       		moveq	#0,d4
0001052E 4E75                       		rts	
00010530                            ; ===========================================================================
00010530                            
00010530                            loc_FA12:
00010530 3404                       		move.w	d4,d2
00010532 6100 809A                  		bsr.w	MvSonicOnPtfm
00010536 7800                       		moveq	#0,d4
00010538 4E75                       		rts	
0001053A                            ; ===========================================================================
0001053A                            
0001053A                            SolidObject71:				; XREF: Obj71_Solid
0001053A 4A28 0025                  		tst.b	$25(a0)
0001053E 6700 0000                  		beq.w	loc_FAD0
00010542 3401                       		move.w	d1,d2
00010544 D442                       		add.w	d2,d2
00010546 43F8 D000                  		lea	($FFFFD000).w,a1
0001054A 0829 0001 0022             		btst	#1,$22(a1)
00010550 6600                       		bne.s	loc_FA44
00010552 3029 0008                  		move.w	8(a1),d0
00010556 9068 0008                  		sub.w	8(a0),d0
0001055A D041                       		add.w	d1,d0
0001055C 6B00                       		bmi.s	loc_FA44
0001055E B042                       		cmp.w	d2,d0
00010560 6500                       		bcs.s	loc_FA58
00010562                            
00010562                            loc_FA44:
00010562 08A9 0003 0022             		bclr	#3,$22(a1)
00010568 08A8 0003 0022             		bclr	#3,$22(a0)
0001056E 4228 0025                  		clr.b	$25(a0)
00010572 7800                       		moveq	#0,d4
00010574 4E75                       		rts	
00010576                            ; ===========================================================================
00010576                            
00010576                            loc_FA58:
00010576 3404                       		move.w	d4,d2
00010578 6100 8054                  		bsr.w	MvSonicOnPtfm
0001057C 7800                       		moveq	#0,d4
0001057E 4E75                       		rts	
00010580                            ; ===========================================================================
00010580                            
00010580                            SolidObject2F:				; XREF: Obj2F_Solid
00010580 43F8 D000                  		lea	($FFFFD000).w,a1
00010584 4A28 0001                  		tst.b	1(a0)
00010588 6A00 0000                  		bpl.w	loc_FB92
0001058C 3029 0008                  		move.w	8(a1),d0
00010590 9068 0008                  		sub.w	8(a0),d0
00010594 D041                       		add.w	d1,d0
00010596 6B00 0000                  		bmi.w	loc_FB92
0001059A 3601                       		move.w	d1,d3
0001059C D643                       		add.w	d3,d3
0001059E B043                       		cmp.w	d3,d0
000105A0 6200 0000                  		bhi.w	loc_FB92
000105A4 3A00                       		move.w	d0,d5
000105A6 0828 0000 0001             		btst	#0,1(a0)
000105AC 6700                       		beq.s	loc_FA94
000105AE 4645                       		not.w	d5
000105B0 DA43                       		add.w	d3,d5
000105B2                            
000105B2                            loc_FA94:
000105B2 E24D                       		lsr.w	#1,d5
000105B4 7600                       		moveq	#0,d3
000105B6 1632 5000                  		move.b	(a2,d5.w),d3
000105BA 9612                       		sub.b	(a2),d3
000105BC 3A28 000C                  		move.w	$C(a0),d5
000105C0 9A43                       		sub.w	d3,d5
000105C2 1629 0016                  		move.b	$16(a1),d3
000105C6 4883                       		ext.w	d3
000105C8 D443                       		add.w	d3,d2
000105CA 3629 000C                  		move.w	$C(a1),d3
000105CE 9645                       		sub.w	d5,d3
000105D0 5843                       		addq.w	#4,d3
000105D2 D642                       		add.w	d2,d3
000105D4 6B00 0000                  		bmi.w	loc_FB92
000105D8 3802                       		move.w	d2,d4
000105DA D844                       		add.w	d4,d4
000105DC B644                       		cmp.w	d4,d3
000105DE 6400 0000                  		bcc.w	loc_FB92
000105E2 6000 0000                  		bra.w	loc_FB0E
000105E6                            ; ===========================================================================
000105E6                            
000105E6                            loc_FAC8:
000105E6 4A28 0001                  		tst.b	1(a0)
000105EA 6A00 0000                  		bpl.w	loc_FB92
000105EE                            
000105EE                            loc_FAD0:
000105EE 43F8 D000                  		lea	($FFFFD000).w,a1
000105F2 3029 0008                  		move.w	8(a1),d0
000105F6 9068 0008                  		sub.w	8(a0),d0
000105FA D041                       		add.w	d1,d0
000105FC 6B00 0000                  		bmi.w	loc_FB92
00010600 3601                       		move.w	d1,d3
00010602 D643                       		add.w	d3,d3
00010604 B043                       		cmp.w	d3,d0
00010606 6200 0000                  		bhi.w	loc_FB92
0001060A 1629 0016                  		move.b	$16(a1),d3
0001060E 4883                       		ext.w	d3
00010610 D443                       		add.w	d3,d2
00010612 3629 000C                  		move.w	$C(a1),d3
00010616 9668 000C                  		sub.w	$C(a0),d3
0001061A 5843                       		addq.w	#4,d3
0001061C D642                       		add.w	d2,d3
0001061E 6B00 0000                  		bmi.w	loc_FB92
00010622 3802                       		move.w	d2,d4
00010624 D844                       		add.w	d4,d4
00010626 B644                       		cmp.w	d4,d3
00010628 6400 0000                  		bcc.w	loc_FB92
0001062C                            
0001062C                            loc_FB0E:
0001062C 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00010630 6B00 0000                  		bmi.w	loc_FB92
00010634 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0001063A 6400 0000                  		bcc.w	loc_FB92
0001063E 4A78 FE08                  		tst.w	($FFFFFE08).w
00010642 6600 0000                  		bne.w	loc_FBAC
00010646 3A00                       		move.w	d0,d5
00010648 B240                       		cmp.w	d0,d1
0001064A 6400                       		bcc.s	loc_FB36
0001064C D241                       		add.w	d1,d1
0001064E 9041                       		sub.w	d1,d0
00010650 3A00                       		move.w	d0,d5
00010652 4445                       		neg.w	d5
00010654                            
00010654                            loc_FB36:
00010654 3203                       		move.w	d3,d1
00010656 B443                       		cmp.w	d3,d2
00010658 6400                       		bcc.s	loc_FB44
0001065A 5943                       		subq.w	#4,d3
0001065C 9644                       		sub.w	d4,d3
0001065E 3203                       		move.w	d3,d1
00010660 4441                       		neg.w	d1
00010662                            
00010662                            loc_FB44:
00010662 BA41                       		cmp.w	d1,d5
00010664 6200 0000                  		bhi.w	loc_FBB0
00010668 0C41 0004                  		cmpi.w	#4,d1
0001066C 6300                       		bls.s	loc_FB8C
0001066E 4A40                       		tst.w	d0
00010670 6700                       		beq.s	loc_FB70
00010672 6B00                       		bmi.s	loc_FB5E
00010674 4A69 0010                  		tst.w	$10(a1)
00010678 6B00                       		bmi.s	loc_FB70
0001067A 6000                       		bra.s	loc_FB64
0001067C                            ; ===========================================================================
0001067C                            
0001067C                            loc_FB5E:
0001067C 4A69 0010                  		tst.w	$10(a1)
00010680 6A00                       		bpl.s	loc_FB70
00010682                            
00010682                            loc_FB64:
00010682 337C 0000 0014             		move.w	#0,$14(a1)	; stop Sonic moving
00010688 337C 0000 0010             		move.w	#0,$10(a1)
0001068E                            
0001068E                            loc_FB70:
0001068E 9169 0008                  		sub.w	d0,8(a1)
00010692 0829 0001 0022             		btst	#1,$22(a1)
00010698 6600                       		bne.s	loc_FB8C
0001069A 08E9 0005 0022             		bset	#5,$22(a1)
000106A0 08E8 0005 0022             		bset	#5,$22(a0)
000106A6 7801                       		moveq	#1,d4
000106A8 4E75                       		rts	
000106AA                            ; ===========================================================================
000106AA                            
000106AA                            loc_FB8C:
000106AA 6100                       		bsr.s	loc_FBA0
000106AC 7801                       		moveq	#1,d4
000106AE 4E75                       		rts	
000106B0                            ; ===========================================================================
000106B0                            
000106B0                            loc_FB92:
000106B0 0828 0005 0022             		btst	#5,$22(a0)
000106B6 6700                       		beq.s	loc_FBAC
000106B8 0C29 0002 001C             		cmp.b	#2,$1C(a1)	; check if in jumping/rolling animation
000106BE 6700                       		beq.s	loc_FBA0
000106C0 0C29 0017 001C             		cmp.b	#$17,$1C(a1)	; check if in drowning animation
000106C6 6700                       		beq.s	loc_FBA0
000106C8 0C29 001A 001C             		cmp.b	#$1A,$1C(a1)	; check if in hurt animation
000106CE 6700                       		beq.s	loc_FBA0
000106D0 337C 0001 001C             		move.w	#1,$1C(a1)	; use walking animation
000106D6                            
000106D6                            loc_FBA0:
000106D6 08A8 0005 0022             		bclr	#5,$22(a0)
000106DC                            
000106DC 08A9 0005 0022             		bclr	#5,$22(a1)
000106E2                            
000106E2                            loc_FBAC:
000106E2 7800                       		moveq	#0,d4
000106E4 4E75                       		rts	
000106E6                            ; ===========================================================================
000106E6                            
000106E6                            loc_FBB0:
000106E6 4A43                       		tst.w	d3
000106E8 6B00                       		bmi.s	loc_FBBC
000106EA 0C43 0010                  		cmpi.w	#$10,d3
000106EE 6500                       		bcs.s	loc_FBEE
000106F0 60BE                       		bra.s	loc_FB92
000106F2                            ; ===========================================================================
000106F2                            
000106F2                            loc_FBBC:
000106F2 4A69 0012                  		tst.w	$12(a1)
000106F6 6700                       		beq.s	loc_FBD6
000106F8 6A00                       		bpl.s	loc_FBD2
000106FA 4A43                       		tst.w	d3
000106FC 6A00                       		bpl.s	loc_FBD2
000106FE 9769 000C                  		sub.w	d3,$C(a1)
00010702 337C 0000 0012             		move.w	#0,$12(a1)	; stop Sonic moving
00010708                            
00010708                            loc_FBD2:
00010708 78FF                       		moveq	#-1,d4
0001070A 4E75                       		rts	
0001070C                            ; ===========================================================================
0001070C                            
0001070C                            loc_FBD6:
0001070C 0829 0001 0022             		btst	#1,$22(a1)
00010712 66F4                       		bne.s	loc_FBD2
00010714 2F08                       		move.l	a0,-(sp)
00010716 2049                       		movea.l	a1,a0
00010718 4EB9 0000 0000             		jsr	KillSonic
0001071E 205F                       		movea.l	(sp)+,a0
00010720 78FF                       		moveq	#-1,d4
00010722 4E75                       		rts	
00010724                            ; ===========================================================================
00010724                            
00010724                            loc_FBEE:
00010724 5943                       		subq.w	#4,d3
00010726 7200                       		moveq	#0,d1
00010728 1228 0019                  		move.b	$19(a0),d1
0001072C 3401                       		move.w	d1,d2
0001072E D442                       		add.w	d2,d2
00010730 D269 0008                  		add.w	8(a1),d1
00010734 9268 0008                  		sub.w	8(a0),d1
00010738 6B00                       		bmi.s	loc_FC28
0001073A B242                       		cmp.w	d2,d1
0001073C 6400                       		bcc.s	loc_FC28
0001073E 4A69 0012                  		tst.w	$12(a1)
00010742 6B00                       		bmi.s	loc_FC28
00010744 9769 000C                  		sub.w	d3,$C(a1)
00010748 5369 000C                  		subq.w	#1,$C(a1)
0001074C 6100                       		bsr.s	sub_FC2C
0001074E 117C 0002 0025             		move.b	#2,$25(a0)
00010754 08E8 0003 0022             		bset	#3,$22(a0)
0001075A 78FF                       		moveq	#-1,d4
0001075C 4E75                       		rts	
0001075E                            ; ===========================================================================
0001075E                            
0001075E                            loc_FC28:
0001075E 7800                       		moveq	#0,d4
00010760 4E75                       		rts	
00010762                            ; End of function SolidObject
00010762                            
00010762                            
00010762                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00010762                            
00010762                            
00010762                            sub_FC2C:				; XREF: SolidObject
00010762 0829 0003 0022             		btst	#3,$22(a1)
00010768 6700                       		beq.s	loc_FC4E
0001076A 7000                       		moveq	#0,d0
0001076C 1029 003D                  		move.b	$3D(a1),d0
00010770 ED48                       		lsl.w	#6,d0
00010772 0680 00FF D000             		addi.l	#$FFD000,d0
00010778 2440                       		movea.l	d0,a2
0001077A 08AA 0003 0022             		bclr	#3,$22(a2)
00010780 422A 0025                  		clr.b	$25(a2)
00010784                            
00010784                            loc_FC4E:
00010784 3008                       		move.w	a0,d0
00010786 0440 D000                  		subi.w	#-$3000,d0
0001078A EC48                       		lsr.w	#6,d0
0001078C 0240 007F                  		andi.w	#$7F,d0
00010790 1340 003D                  		move.b	d0,$3D(a1)
00010794 137C 0000 0026             		move.b	#0,$26(a1)
0001079A 337C 0000 0012             		move.w	#0,$12(a1)
000107A0 3369 0010 0014             		move.w	$10(a1),$14(a1)
000107A6 0829 0001 0022             		btst	#1,$22(a1)
000107AC 6700                       		beq.s	loc_FC84
000107AE 2F08                       		move.l	a0,-(sp)
000107B0 2049                       		movea.l	a1,a0
000107B2 4EB9 0000 0000             		jsr	Sonic_ResetOnFloor
000107B8 205F                       		movea.l	(sp)+,a0
000107BA                            
000107BA                            loc_FC84:
000107BA 08E9 0003 0022             		bset	#3,$22(a1)
000107C0 08E8 0003 0022             		bset	#3,$22(a0)
000107C6 4E75                       		rts	
000107C8                            ; End of function sub_FC2C
000107C8                            
000107C8                            ; ===========================================================================
000107C8                            ; ---------------------------------------------------------------------------
000107C8                            ; Object 51 - smashable	green block (MZ)
000107C8                            ; ---------------------------------------------------------------------------
000107C8                            
000107C8                            Obj51:					; XREF: Obj_Index
000107C8 7000                       		moveq	#0,d0
000107CA 1028 0024                  		move.b	$24(a0),d0
000107CE 323B 0000                  		move.w	Obj51_Index(pc,d0.w),d1
000107D2 4EBB 1000                  		jsr	Obj51_Index(pc,d1.w)
000107D6 6000 F9F4                  		bra.w	MarkObjGone
000107DA                            ; ===========================================================================
000107DA 0000                       Obj51_Index:	dc.w Obj51_Main-Obj51_Index
000107DC 0000                       		dc.w Obj51_Solid-Obj51_Index
000107DE 0000                       		dc.w Obj51_Display-Obj51_Index
000107E0                            ; ===========================================================================
000107E0                            
000107E0                            Obj51_Main:				; XREF: Obj51_Index
000107E0 5428 0024                  		addq.b	#2,$24(a0)
000107E4 217C 0000 0000 0004        		move.l	#Map_obj51,4(a0)
000107EC 317C 42B8 0002             		move.w	#$42B8,2(a0)
000107F2 117C 0004 0001             		move.b	#4,1(a0)
000107F8 117C 0010 0019             		move.b	#$10,$19(a0)
000107FE 117C 0004 0018             		move.b	#4,$18(a0)
00010804 1168 0028 001A             		move.b	$28(a0),$1A(a0)
0001080A                            
0001080A                            Obj51_Solid:				; XREF: Obj51_Index
0001080A 3178 F7D0 0034             		move.w	($FFFFF7D0).w,$34(a0)
00010810 1178 D01C 0032             		move.b	($FFFFD01C).w,$32(a0) ;	load Sonic's animation number
00010816 323C 001B                  		move.w	#$1B,d1
0001081A 343C 0010                  		move.w	#$10,d2
0001081E 363C 0011                  		move.w	#$11,d3
00010822 3828 0008                  		move.w	8(a0),d4
00010826 6100 FCCC                  		bsr.w	SolidObject
0001082A 0828 0003 0022             		btst	#3,$22(a0)
00010830 6600                       		bne.s	Obj51_Smash
00010832                            
00010832                            locret_FCFC:
00010832 4E75                       		rts	
00010834                            ; ===========================================================================
00010834                            
00010834                            Obj51_Smash:				; XREF: Obj51_Solid
00010834 0C28 0002 0032             		cmpi.b	#2,$32(a0)	; is Sonic rolling/jumping?
0001083A 66F6                       		bne.s	locret_FCFC	; if not, branch
0001083C 31E8 0034 F7D0             		move.w	$34(a0),($FFFFF7D0).w
00010842 08E9 0002 0022             		bset	#2,$22(a1)
00010848 137C 000E 0016             		move.b	#$E,$16(a1)
0001084E 137C 0007 0017             		move.b	#7,$17(a1)
00010854 137C 0002 001C             		move.b	#2,$1C(a1)
0001085A 337C FD00 0012             		move.w	#-$300,$12(a1)	; bounce Sonic upwards
00010860 08E9 0001 0022             		bset	#1,$22(a1)
00010866 08A9 0003 0022             		bclr	#3,$22(a1)
0001086C 137C 0002 0024             		move.b	#2,$24(a1)
00010872 08A8 0003 0022             		bclr	#3,$22(a0)
00010878 4228 0025                  		clr.b	$25(a0)
0001087C 117C 0001 001A             		move.b	#1,$1A(a0)
00010882 49F9 0000 0000             		lea	(Obj51_Speeds).l,a4 ; load broken	fragment speed data
00010888 7203                       		moveq	#3,d1		; set number of	fragments to 4
0001088A 343C 0038                  		move.w	#$38,d2
0001088E 6100 D460                  		bsr.w	SmashObject
00010892 6100 DD0C                  		bsr.w	SingleObjLoad
00010896 6600                       		bne.s	Obj51_Display
00010898 12BC 0029                  		move.b	#$29,0(a1)	; load points object
0001089C 3368 0008 0008             		move.w	8(a0),8(a1)
000108A2 3368 000C 000C             		move.w	$C(a0),$C(a1)
000108A8 3438 F7D0                  		move.w	($FFFFF7D0).w,d2
000108AC 5478 F7D0                  		addq.w	#2,($FFFFF7D0).w
000108B0 0C42 0006                  		cmpi.w	#6,d2
000108B4 6500                       		bcs.s	Obj51_Bonus
000108B6 7406                       		moveq	#6,d2
000108B8                            
000108B8                            Obj51_Bonus:
000108B8 7000                       		moveq	#0,d0
000108BA 303B 2000                  		move.w	Obj51_Points(pc,d2.w),d0
000108BE 0C78 0020 F7D0             		cmpi.w	#$20,($FFFFF7D0).w ; have 16 blocks been smashed?
000108C4 6500                       		bcs.s	loc_FD98	; if not, branch
000108C6 303C 03E8                  		move.w	#1000,d0	; give higher points for 16th block
000108CA 740A                       		moveq	#10,d2
000108CC                            
000108CC                            loc_FD98:
000108CC 4EB9 0000 0000             		jsr	AddPoints
000108D2 E24A                       		lsr.w	#1,d2
000108D4 1342 001A                  		move.b	d2,$1A(a1)
000108D8                            
000108D8                            Obj51_Display:				; XREF: Obj51_Index
000108D8 6100 D80A                  		bsr.w	SpeedToPos
000108DC 0668 0038 0012             		addi.w	#$38,$12(a0)
000108E2 6100 D826                  		bsr.w	DisplaySprite
000108E6 4A28 0001                  		tst.b	1(a0)
000108EA 6A00 D85A                  		bpl.w	DeleteObject
000108EE 4E75                       		rts	
000108F0                            ; ===========================================================================
000108F0 FE00 FE00                  Obj51_Speeds:	dc.w $FE00, $FE00	; x-speed, y-speed
000108F4 FF00 FF00                  		dc.w $FF00, $FF00
000108F8 0200 FE00                  		dc.w $200, $FE00
000108FC 0100 FF00                  		dc.w $100, $FF00
00010900                            
00010900 000A 0014 0032 0064        Obj51_Points:	dc.w 10, 20, 50, 100
00010908                            ; ---------------------------------------------------------------------------
00010908                            ; Sprite mappings - smashable green block (MZ)
00010908                            ; ---------------------------------------------------------------------------
00010908                            Map_obj51:
00010908                            	include "_maps\obj51.asm"
00010908                            ; ---------------------------------------------------------------------------
00010908                            ; Sprite mappings - smashable green block (MZ)
00010908                            ; ---------------------------------------------------------------------------
00010908 0000                       		dc.w byte_FDD8-Map_obj51
0001090A 0000                       		dc.w byte_FDE3-Map_obj51
0001090C 02                         byte_FDD8:	dc.b 2
0001090D F00D 0000 F0               		dc.b $F0, $D, 0, 0, $F0
00010912 000D 0000 F0               		dc.b 0,	$D, 0, 0, $F0
00010917 04                         byte_FDE3:	dc.b 4
00010918 F005 8000 F0               		dc.b $F0, 5, $80, 0, $F0
0001091D 0005 8000 F0               		dc.b 0,	5, $80,	0, $F0
00010922 F005 8000 00               		dc.b $F0, 5, $80, 0, 0
00010927 0005 8000 00               		dc.b 0,	5, $80,	0, 0
0001092C                            		even
0001092C                            		even
0001092C                            
0001092C                            ; ===========================================================================
0001092C                            ; ---------------------------------------------------------------------------
0001092C                            ; Object 52 - moving platform blocks (MZ, LZ, SBZ)
0001092C                            ; ---------------------------------------------------------------------------
0001092C                            
0001092C                            Obj52:					; XREF: Obj_Index
0001092C 7000                       		moveq	#0,d0
0001092E 1028 0024                  		move.b	$24(a0),d0
00010932 323B 0000                  		move.w	Obj52_Index(pc,d0.w),d1
00010936 4EFB 1000                  		jmp	Obj52_Index(pc,d1.w)
0001093A                            ; ===========================================================================
0001093A 0000                       Obj52_Index:	dc.w Obj52_Main-Obj52_Index
0001093C 0000                       		dc.w Obj52_Platform-Obj52_Index
0001093E 0000                       		dc.w Obj52_StandOn-Obj52_Index
00010940                            
00010940 1000                       Obj52_Var:	dc.b $10, 0		; object width,	frame number
00010942 2001                       		dc.b $20, 1
00010944 2002                       		dc.b $20, 2
00010946 4003                       		dc.b $40, 3
00010948 3004                       		dc.b $30, 4
0001094A                            ; ===========================================================================
0001094A                            
0001094A                            Obj52_Main:				; XREF: Obj52_Index
0001094A 5428 0024                  		addq.b	#2,$24(a0)
0001094E 217C 0000 0000 0004        		move.l	#Map_obj52,4(a0)
00010956 317C 42B8 0002             		move.w	#$42B8,2(a0)
0001095C 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00010962 6600                       		bne.s	loc_FE44
00010964 217C 0000 0000 0004        		move.l	#Map_obj52a,4(a0) ; LZ specific	code
0001096C 317C 43BC 0002             		move.w	#$43BC,2(a0)
00010972 117C 0007 0016             		move.b	#7,$16(a0)
00010978                            
00010978                            loc_FE44:
00010978 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
0001097E 6600                       		bne.s	loc_FE60
00010980 317C 22C0 0002             		move.w	#$22C0,2(a0)	; SBZ specific code (object 5228)
00010986 0C28 0028 0028             		cmpi.b	#$28,$28(a0)	; is object 5228 ?
0001098C 6700                       		beq.s	loc_FE60	; if yes, branch
0001098E 317C 4460 0002             		move.w	#$4460,2(a0)	; SBZ specific code (object 523x)
00010994                            
00010994                            loc_FE60:
00010994 117C 0004 0001             		move.b	#4,1(a0)
0001099A 7000                       		moveq	#0,d0
0001099C 1028 0028                  		move.b	$28(a0),d0
000109A0 E648                       		lsr.w	#3,d0
000109A2 0240 001E                  		andi.w	#$1E,d0
000109A6 45FB 0098                  		lea	Obj52_Var(pc,d0.w),a2
000109AA 115A 0019                  		move.b	(a2)+,$19(a0)
000109AE 115A 001A                  		move.b	(a2)+,$1A(a0)
000109B2 117C 0004 0018             		move.b	#4,$18(a0)
000109B8 3168 0008 0030             		move.w	8(a0),$30(a0)
000109BE 3168 000C 0032             		move.w	$C(a0),$32(a0)
000109C4 0228 000F 0028             		andi.b	#$F,$28(a0)
000109CA                            
000109CA                            Obj52_Platform:				; XREF: Obj52_Index
000109CA 6100 0000                  		bsr.w	Obj52_Move
000109CE 7200                       		moveq	#0,d1
000109D0 1228 0019                  		move.b	$19(a0),d1
000109D4 4EB9 0000 7EFC             		jsr	(PlatformObject).l
000109DA 6000                       		bra.s	Obj52_ChkDel
000109DC                            ; ===========================================================================
000109DC                            
000109DC                            Obj52_StandOn:				; XREF: Obj52_Index
000109DC 7200                       		moveq	#0,d1
000109DE 1228 0019                  		move.b	$19(a0),d1
000109E2 4EB9 0000 8070             		jsr	(ExitPlatform).l
000109E8 3F28 0008                  		move.w	8(a0),-(sp)
000109EC 6100 0000                  		bsr.w	Obj52_Move
000109F0 341F                       		move.w	(sp)+,d2
000109F2 4EB9 0000 85DA             		jsr	(MvSonicOnPtfm2).l
000109F8                            
000109F8                            Obj52_ChkDel:				; XREF: Obj52_Platform
000109F8 3028 0030                  		move.w	$30(a0),d0
000109FC 0240 FF80                  		andi.w	#$FF80,d0
00010A00 3238 F700                  		move.w	($FFFFF700).w,d1
00010A04 0441 0080                  		subi.w	#$80,d1
00010A08 0241 FF80                  		andi.w	#$FF80,d1
00010A0C 9041                       		sub.w	d1,d0
00010A0E 0C40 0280                  		cmpi.w	#$280,d0
00010A12 6200 D732                  		bhi.w	DeleteObject
00010A16 6000 D6F2                  		bra.w	DisplaySprite
00010A1A                            ; ===========================================================================
00010A1A                            
00010A1A                            Obj52_Move:				; XREF: Obj52_Platform; Obj52_StandOn
00010A1A 7000                       		moveq	#0,d0
00010A1C 1028 0028                  		move.b	$28(a0),d0
00010A20 0240 000F                  		andi.w	#$F,d0
00010A24 D040                       		add.w	d0,d0
00010A26 323B 0000                  		move.w	Obj52_TypeIndex(pc,d0.w),d1
00010A2A 4EFB 1000                  		jmp	Obj52_TypeIndex(pc,d1.w)
00010A2E                            ; ===========================================================================
00010A2E 0000 0000                  Obj52_TypeIndex:dc.w Obj52_Type00-Obj52_TypeIndex, Obj52_Type01-Obj52_TypeIndex
00010A32 0000 0000                  		dc.w Obj52_Type02-Obj52_TypeIndex, Obj52_Type03-Obj52_TypeIndex
00010A36 0000 0000                  		dc.w Obj52_Type02-Obj52_TypeIndex, Obj52_Type05-Obj52_TypeIndex
00010A3A 0000 0000                  		dc.w Obj52_Type06-Obj52_TypeIndex, Obj52_Type07-Obj52_TypeIndex
00010A3E 0000 0000                  		dc.w Obj52_Type08-Obj52_TypeIndex, Obj52_Type02-Obj52_TypeIndex
00010A42 0000                       		dc.w Obj52_Type0A-Obj52_TypeIndex
00010A44                            ; ===========================================================================
00010A44                            
00010A44                            Obj52_Type00:				; XREF: Obj52_TypeIndex
00010A44 4E75                       		rts	
00010A46                            ; ===========================================================================
00010A46                            
00010A46                            Obj52_Type01:				; XREF: Obj52_TypeIndex
00010A46 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
00010A4A 323C 0060                  		move.w	#$60,d1
00010A4E 0828 0000 0022             		btst	#0,$22(a0)
00010A54 6700                       		beq.s	loc_FF26
00010A56 4440                       		neg.w	d0
00010A58 D041                       		add.w	d1,d0
00010A5A                            
00010A5A                            loc_FF26:
00010A5A 3228 0030                  		move.w	$30(a0),d1
00010A5E 9240                       		sub.w	d0,d1
00010A60 3141 0008                  		move.w	d1,8(a0)
00010A64 4E75                       		rts	
00010A66                            ; ===========================================================================
00010A66                            
00010A66                            Obj52_Type02:				; XREF: Obj52_TypeIndex
00010A66 0C28 0004 0024             		cmpi.b	#4,$24(a0)	; is Sonic standing on the platform?
00010A6C 6600                       		bne.s	Obj52_02_Wait
00010A6E 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
00010A72                            
00010A72                            Obj52_02_Wait:
00010A72 4E75                       		rts	
00010A74                            ; ===========================================================================
00010A74                            
00010A74                            Obj52_Type03:				; XREF: Obj52_TypeIndex
00010A74 7600                       		moveq	#0,d3
00010A76 1628 0019                  		move.b	$19(a0),d3
00010A7A 6100 0000                  		bsr.w	ObjHitWallRight
00010A7E 4A41                       		tst.w	d1		; has the platform hit a wall?
00010A80 6B00                       		bmi.s	Obj52_03_End	; if yes, branch
00010A82 5268 0008                  		addq.w	#1,8(a0)	; move platform	to the right
00010A86 3168 0008 0030             		move.w	8(a0),$30(a0)
00010A8C 4E75                       		rts	
00010A8E                            ; ===========================================================================
00010A8E                            
00010A8E                            Obj52_03_End:
00010A8E 4228 0028                  		clr.b	$28(a0)		; change to type 00 (non-moving	type)
00010A92 4E75                       		rts	
00010A94                            ; ===========================================================================
00010A94                            
00010A94                            Obj52_Type05:				; XREF: Obj52_TypeIndex
00010A94 7600                       		moveq	#0,d3
00010A96 1628 0019                  		move.b	$19(a0),d3
00010A9A 6100 0000                  		bsr.w	ObjHitWallRight
00010A9E 4A41                       		tst.w	d1		; has the platform hit a wall?
00010AA0 6B00                       		bmi.s	Obj52_05_End	; if yes, branch
00010AA2 5268 0008                  		addq.w	#1,8(a0)	; move platform	to the right
00010AA6 3168 0008 0030             		move.w	8(a0),$30(a0)
00010AAC 4E75                       		rts	
00010AAE                            ; ===========================================================================
00010AAE                            
00010AAE                            Obj52_05_End:
00010AAE 5228 0028                  		addq.b	#1,$28(a0)	; change to type 06 (falling)
00010AB2 4E75                       		rts	
00010AB4                            ; ===========================================================================
00010AB4                            
00010AB4                            Obj52_Type06:				; XREF: Obj52_TypeIndex
00010AB4 6100 D62E                  		bsr.w	SpeedToPos
00010AB8 0668 0018 0012             		addi.w	#$18,$12(a0)	; make the platform fall
00010ABE 6100 0000                  		bsr.w	ObjHitFloor
00010AC2 4A41                       		tst.w	d1		; has platform hit the floor?
00010AC4 6A00 0000                  		bpl.w	locret_FFA0	; if not, branch
00010AC8 D368 000C                  		add.w	d1,$C(a0)
00010ACC 4268 0012                  		clr.w	$12(a0)		; stop platform	falling
00010AD0 4228 0028                  		clr.b	$28(a0)		; change to type 00 (non-moving)
00010AD4                            
00010AD4                            locret_FFA0:
00010AD4 4E75                       		rts	
00010AD6                            ; ===========================================================================
00010AD6                            
00010AD6                            Obj52_Type07:				; XREF: Obj52_TypeIndex
00010AD6 4A38 F7E2                  		tst.b	($FFFFF7E2).w	; has switch number 02 been pressed?
00010ADA 6700                       		beq.s	Obj52_07_ChkDel
00010ADC 5728 0028                  		subq.b	#3,$28(a0)	; if yes, change object	type to	04
00010AE0                            
00010AE0                            Obj52_07_ChkDel:
00010AE0 588F                       		addq.l	#4,sp
00010AE2 3028 0030                  		move.w	$30(a0),d0
00010AE6 0240 FF80                  		andi.w	#$FF80,d0
00010AEA 3238 F700                  		move.w	($FFFFF700).w,d1
00010AEE 0441 0080                  		subi.w	#$80,d1
00010AF2 0241 FF80                  		andi.w	#$FF80,d1
00010AF6 9041                       		sub.w	d1,d0
00010AF8 0C40 0280                  		cmpi.w	#$280,d0
00010AFC 6200 D648                  		bhi.w	DeleteObject
00010B00 4E75                       		rts	
00010B02                            ; ===========================================================================
00010B02                            
00010B02                            Obj52_Type08:				; XREF: Obj52_TypeIndex
00010B02 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
00010B06 323C 0080                  		move.w	#$80,d1
00010B0A 0828 0000 0022             		btst	#0,$22(a0)
00010B10 6700                       		beq.s	loc_FFE2
00010B12 4440                       		neg.w	d0
00010B14 D041                       		add.w	d1,d0
00010B16                            
00010B16                            loc_FFE2:
00010B16 3228 0032                  		move.w	$32(a0),d1
00010B1A 9240                       		sub.w	d0,d1
00010B1C 3141 000C                  		move.w	d1,$C(a0)
00010B20 4E75                       		rts	
00010B22                            ; ===========================================================================
00010B22                            
00010B22                            Obj52_Type0A:				; XREF: Obj52_TypeIndex
00010B22 7600                       		moveq	#0,d3
00010B24 1628 0019                  		move.b	$19(a0),d3
00010B28 D643                       		add.w	d3,d3
00010B2A 7208                       		moveq	#8,d1
00010B2C 0828 0000 0022             		btst	#0,$22(a0)
00010B32 6700                       		beq.s	loc_10004
00010B34 4441                       		neg.w	d1
00010B36 4443                       		neg.w	d3
00010B38                            
00010B38                            loc_10004:
00010B38 4A68 0036                  		tst.w	$36(a0)		; is platform set to move back?
00010B3C 6600                       		bne.s	Obj52_0A_Back	; if yes, branch
00010B3E 3028 0008                  		move.w	8(a0),d0
00010B42 9068 0030                  		sub.w	$30(a0),d0
00010B46 B043                       		cmp.w	d3,d0
00010B48 6700                       		beq.s	Obj52_0A_Wait
00010B4A D368 0008                  		add.w	d1,8(a0)	; move platform
00010B4E 317C 012C 0034             		move.w	#300,$34(a0)	; set time delay to 5 seconds
00010B54 4E75                       		rts	
00010B56                            ; ===========================================================================
00010B56                            
00010B56                            Obj52_0A_Wait:
00010B56 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from time delay
00010B5A 6600                       		bne.s	locret_1002E	; if time remains, branch
00010B5C 317C 0001 0036             		move.w	#1,$36(a0)	; set platform to move back to its original position
00010B62                            
00010B62                            locret_1002E:
00010B62 4E75                       		rts	
00010B64                            ; ===========================================================================
00010B64                            
00010B64                            Obj52_0A_Back:
00010B64 3028 0008                  		move.w	8(a0),d0
00010B68 9068 0030                  		sub.w	$30(a0),d0
00010B6C 6700                       		beq.s	Obj52_0A_Reset
00010B6E 9368 0008                  		sub.w	d1,8(a0)	; return platform to its original position
00010B72 4E75                       		rts	
00010B74                            ; ===========================================================================
00010B74                            
00010B74                            Obj52_0A_Reset:
00010B74 4268 0036                  		clr.w	$36(a0)
00010B78 5328 0028                  		subq.b	#1,$28(a0)
00010B7C 4E75                       		rts	
00010B7E                            ; ===========================================================================
00010B7E                            ; ---------------------------------------------------------------------------
00010B7E                            ; Sprite mappings - moving blocks (MZ, SBZ)
00010B7E                            ; ---------------------------------------------------------------------------
00010B7E                            Map_obj52:
00010B7E                            	include "_maps\obj52mz.asm"
00010B7E                            ; ---------------------------------------------------------------------------
00010B7E                            ; Sprite mappings - moving blocks (MZ, SBZ)
00010B7E                            ; ---------------------------------------------------------------------------
00010B7E 0000 0000                  		dc.w byte_10054-Map_obj52, byte_1005A-Map_obj52
00010B82 0000 0000                  		dc.w byte_10065-Map_obj52, byte_1007A-Map_obj52
00010B86 0000                       		dc.w byte_1008F-Map_obj52
00010B88 01                         byte_10054:	dc.b 1
00010B89 F80F 0008 F0               		dc.b $F8, $F, 0, 8, $F0
00010B8E 02                         byte_1005A:	dc.b 2
00010B8F F80F 0008 E0               		dc.b $F8, $F, 0, 8, $E0
00010B94 F80F 0008 00               		dc.b $F8, $F, 0, 8, 0
00010B99 04                         byte_10065:	dc.b 4
00010B9A F80C 2000 E0               		dc.b $F8, $C, $20, 0, $E0
00010B9F 000D 0004 E0               		dc.b 0,	$D, 0, 4, $E0
00010BA4 F80C 2000 00               		dc.b $F8, $C, $20, 0, 0
00010BA9 000D 0004 00               		dc.b 0,	$D, 0, 4, 0
00010BAE 04                         byte_1007A:	dc.b 4
00010BAF F80E 0000 C0               		dc.b $F8, $E, 0, 0, $C0
00010BB4 F80E 0003 E0               		dc.b $F8, $E, 0, 3, $E0
00010BB9 F80E 0003 00               		dc.b $F8, $E, 0, 3, 0
00010BBE F80E 0800 20               		dc.b $F8, $E, 8, 0, $20
00010BC3 03                         byte_1008F:	dc.b 3
00010BC4 F80F 0008 D0               		dc.b $F8, $F, 0, 8, $D0
00010BC9 F80F 0008 F0               		dc.b $F8, $F, 0, 8, $F0
00010BCE F80F 0008 10               		dc.b $F8, $F, 0, 8, $10
00010BD4 00                         		even
00010BD4 00                         		even
00010BD4                            
00010BD4                            ; ---------------------------------------------------------------------------
00010BD4                            ; Sprite mappings - moving block (LZ)
00010BD4                            ; ---------------------------------------------------------------------------
00010BD4                            Map_obj52a:
00010BD4                            	include "_maps\obj52lz.asm"
00010BD4                            ; ---------------------------------------------------------------------------
00010BD4                            ; Sprite mappings - moving block (LZ)
00010BD4                            ; ---------------------------------------------------------------------------
00010BD4 0000                       		dc.w byte_100A2-Map_obj52a
00010BD6 01                         byte_100A2:	dc.b 1
00010BD7 F80D 0000 F0               		dc.b $F8, $D, 0, 0, $F0
00010BDC                            		even
00010BDC                            		even
00010BDC                            
00010BDC                            ; ===========================================================================
00010BDC                            ; ---------------------------------------------------------------------------
00010BDC                            ; Object 55 - Basaran enemy (MZ)
00010BDC                            ; ---------------------------------------------------------------------------
00010BDC                            
00010BDC                            Obj55:					; XREF: Obj_Index
00010BDC 7000                       		moveq	#0,d0
00010BDE 1028 0024                  		move.b	$24(a0),d0
00010BE2 323B 0000                  		move.w	Obj55_Index(pc,d0.w),d1
00010BE6 4EFB 1000                  		jmp	Obj55_Index(pc,d1.w)
00010BEA                            ; ===========================================================================
00010BEA 0000                       Obj55_Index:	dc.w Obj55_Main-Obj55_Index
00010BEC 0000                       		dc.w Obj55_Action-Obj55_Index
00010BEE                            ; ===========================================================================
00010BEE                            
00010BEE                            Obj55_Main:				; XREF: Obj55_Index
00010BEE 5428 0024                  		addq.b	#2,$24(a0)
00010BF2 217C 0000 0000 0004        		move.l	#Map_obj55,4(a0)
00010BFA 317C 84B8 0002             		move.w	#$84B8,2(a0)
00010C00 117C 0004 0001             		move.b	#4,1(a0)
00010C06 117C 000C 0016             		move.b	#$C,$16(a0)
00010C0C 117C 0002 0018             		move.b	#2,$18(a0)
00010C12 117C 000B 0020             		move.b	#$B,$20(a0)
00010C18 117C 0010 0019             		move.b	#$10,$19(a0)
00010C1E                            
00010C1E                            Obj55_Action:				; XREF: Obj55_Index
00010C1E 7000                       		moveq	#0,d0
00010C20 1028 0025                  		move.b	$25(a0),d0
00010C24 323B 0000                  		move.w	Obj55_Index2(pc,d0.w),d1
00010C28 4EBB 1000                  		jsr	Obj55_Index2(pc,d1.w)
00010C2C 43F9 0000 0000             		lea	(Ani_obj55).l,a1
00010C32 6100 A5E8                  		bsr.w	AnimateSprite
00010C36 6000 F594                  		bra.w	MarkObjGone
00010C3A                            ; ===========================================================================
00010C3A 0000                       Obj55_Index2:	dc.w Obj55_ChkDrop-Obj55_Index2
00010C3C 0000                       		dc.w Obj55_DropFly-Obj55_Index2
00010C3E 0000                       		dc.w Obj55_PlaySnd-Obj55_Index2
00010C40 0000                       		dc.w Obj55_FlyUp-Obj55_Index2
00010C42                            ; ===========================================================================
00010C42                            
00010C42                            Obj55_ChkDrop:				; XREF: Obj55_Index2
00010C42 343C 0080                  		move.w	#$80,d2
00010C46 6100 0000                  		bsr.w	Obj55_ChkSonic
00010C4A 6400                       		bcc.s	Obj55_NoDrop
00010C4C 3038 D00C                  		move.w	($FFFFD00C).w,d0
00010C50 3140 0036                  		move.w	d0,$36(a0)
00010C54 9068 000C                  		sub.w	$C(a0),d0
00010C58 6500                       		bcs.s	Obj55_NoDrop
00010C5A 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic within $80 pixels of	basaran?
00010C5E 6400                       		bcc.s	Obj55_NoDrop	; if not, branch
00010C60 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
00010C64 6600                       		bne.s	Obj55_NoDrop	; if yes, branch
00010C66 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00010C6A D007                       		add.b	d7,d0
00010C6C 0200 0007                  		andi.b	#7,d0
00010C70 6600                       		bne.s	Obj55_NoDrop
00010C72 117C 0001 001C             		move.b	#1,$1C(a0)
00010C78 5428 0025                  		addq.b	#2,$25(a0)
00010C7C                            
00010C7C                            Obj55_NoDrop:
00010C7C 4E75                       		rts	
00010C7E                            ; ===========================================================================
00010C7E                            
00010C7E                            Obj55_DropFly:				; XREF: Obj55_Index2
00010C7E 6100 D464                  		bsr.w	SpeedToPos
00010C82 0668 0018 0012             		addi.w	#$18,$12(a0)	; make basaran fall
00010C88 343C 0080                  		move.w	#$80,d2
00010C8C 6100 0000                  		bsr.w	Obj55_ChkSonic
00010C90 3028 0036                  		move.w	$36(a0),d0
00010C94 9068 000C                  		sub.w	$C(a0),d0
00010C98 6500                       		bcs.s	Obj55_ChkDel
00010C9A 0C40 0010                  		cmpi.w	#$10,d0
00010C9E 6400                       		bcc.s	locret_10180
00010CA0 3141 0010                  		move.w	d1,$10(a0)	; make basaran fly horizontally
00010CA4 317C 0000 0012             		move.w	#0,$12(a0)	; stop basaran falling
00010CAA 117C 0002 001C             		move.b	#2,$1C(a0)
00010CB0 5428 0025                  		addq.b	#2,$25(a0)
00010CB4                            
00010CB4                            locret_10180:
00010CB4 4E75                       		rts	
00010CB6                            ; ===========================================================================
00010CB6                            
00010CB6                            Obj55_ChkDel:				; XREF: Obj55_DropFly
00010CB6 4A28 0001                  		tst.b	1(a0)
00010CBA 6A00 D48A                  		bpl.w	DeleteObject
00010CBE 4E75                       		rts	
00010CC0                            ; ===========================================================================
00010CC0                            
00010CC0                            Obj55_PlaySnd:				; XREF: Obj55_Index2
00010CC0 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00010CC4 0200 000F                  		andi.b	#$F,d0
00010CC8 6600                       		bne.s	loc_101A0
00010CCA 303C 00C0                  		move.w	#$C0,d0
00010CCE 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play flapping sound
00010CD4                            
00010CD4                            loc_101A0:
00010CD4 6100 D40E                  		bsr.w	SpeedToPos
00010CD8 3038 D008                  		move.w	($FFFFD008).w,d0
00010CDC 9068 0008                  		sub.w	8(a0),d0
00010CE0 6400                       		bcc.s	loc_101B0
00010CE2 4440                       		neg.w	d0
00010CE4                            
00010CE4                            loc_101B0:
00010CE4 0C40 0080                  		cmpi.w	#$80,d0
00010CE8 6500                       		bcs.s	locret_101C6
00010CEA 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00010CEE D007                       		add.b	d7,d0
00010CF0 0200 0007                  		andi.b	#7,d0
00010CF4 6600                       		bne.s	locret_101C6
00010CF6 5428 0025                  		addq.b	#2,$25(a0)
00010CFA                            
00010CFA                            locret_101C6:
00010CFA 4E75                       		rts	
00010CFC                            ; ===========================================================================
00010CFC                            
00010CFC                            Obj55_FlyUp:				; XREF: Obj55_Index2
00010CFC 6100 D3E6                  		bsr.w	SpeedToPos
00010D00 0468 0018 0012             		subi.w	#$18,$12(a0)	; make basaran fly upwards
00010D06 6100 0000                  		bsr.w	ObjHitCeiling
00010D0A 4A41                       		tst.w	d1		; has basaran hit the ceiling?
00010D0C 6A00                       		bpl.s	locret_101F4	; if not, branch
00010D0E 9368 000C                  		sub.w	d1,$C(a0)
00010D12 0268 FFF8 0008             		andi.w	#$FFF8,8(a0)
00010D18 4268 0010                  		clr.w	$10(a0)		; stop basaran moving
00010D1C 4268 0012                  		clr.w	$12(a0)
00010D20 4228 001C                  		clr.b	$1C(a0)
00010D24 4228 0025                  		clr.b	$25(a0)
00010D28                            
00010D28                            locret_101F4:
00010D28 4E75                       		rts	
00010D2A                            ; ===========================================================================
00010D2A                            
00010D2A                            Obj55_ChkSonic:				; XREF: Obj55_ChkDrop
00010D2A 323C 0100                  		move.w	#$100,d1
00010D2E 08E8 0000 0022             		bset	#0,$22(a0)
00010D34 3038 D008                  		move.w	($FFFFD008).w,d0
00010D38 9068 0008                  		sub.w	8(a0),d0
00010D3C 6400                       		bcc.s	loc_10214
00010D3E 4440                       		neg.w	d0
00010D40 4441                       		neg.w	d1
00010D42 08A8 0000 0022             		bclr	#0,$22(a0)
00010D48                            
00010D48                            loc_10214:
00010D48 B042                       		cmp.w	d2,d0
00010D4A 4E75                       		rts	
00010D4C                            ; ===========================================================================
00010D4C 6100 D396                  		bsr.w	SpeedToPos
00010D50 6100 D3B8                  		bsr.w	DisplaySprite
00010D54 4A28 0001                  		tst.b	1(a0)
00010D58 6A00 D3EC                  		bpl.w	DeleteObject
00010D5C 4E75                       		rts	
00010D5E                            ; ===========================================================================
00010D5E                            Ani_obj55:
00010D5E                            	include "_anim\obj55.asm"
00010D5E                            ; ---------------------------------------------------------------------------
00010D5E                            ; Animation script - Basaran enemy
00010D5E                            ; ---------------------------------------------------------------------------
00010D5E 0000                       		dc.w byte_10230-Ani_obj55
00010D60 0000                       		dc.w byte_10234-Ani_obj55
00010D62 0000                       		dc.w byte_10238-Ani_obj55
00010D64 0F00 FF00                  byte_10230:	dc.b $F, 0, $FF, 0
00010D68 0F01 FF00                  byte_10234:	dc.b $F, 1, $FF, 0
00010D6C 0301 0203 02FF             byte_10238:	dc.b 3,	1, 2, 3, 2, $FF
00010D72                            		even
00010D72                            		even
00010D72                            
00010D72                            ; ---------------------------------------------------------------------------
00010D72                            ; Sprite mappings - Basaran enemy (MZ)
00010D72                            ; ---------------------------------------------------------------------------
00010D72                            Map_obj55:
00010D72                            	include "_maps\obj55.asm"
00010D72                            ; ---------------------------------------------------------------------------
00010D72                            ; Sprite mappings - Basaran enemy (MZ)
00010D72                            ; ---------------------------------------------------------------------------
00010D72 0000 0000                  		dc.w byte_10246-Map_obj55, byte_1024C-Map_obj55
00010D76 0000 0000                  		dc.w byte_1025C-Map_obj55, byte_10271-Map_obj55
00010D7A 01                         byte_10246:	dc.b 1
00010D7B F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
00010D80 03                         byte_1024C:	dc.b 3
00010D81 F20E 0006 F4               		dc.b $F2, $E, 0, 6, $F4
00010D86 0A04 0012 FC               		dc.b $A, 4, 0, $12, $FC
00010D8B 0200 0027 0C               		dc.b 2,	0, 0, $27, $C
00010D90 04                         byte_1025C:	dc.b 4
00010D91 F804 0014 F8               		dc.b $F8, 4, 0,	$14, $F8
00010D96 000C 0016 F0               		dc.b 0,	$C, 0, $16, $F0
00010D9B 0804 001A 00               		dc.b 8,	4, 0, $1A, 0
00010DA0 0000 0028 0C               		dc.b 0,	0, 0, $28, $C
00010DA5 04                         byte_10271:	dc.b 4
00010DA6 F609 001C F5               		dc.b $F6, 9, 0,	$1C, $F5
00010DAB 0608 0022 F4               		dc.b 6,	8, 0, $22, $F4
00010DB0 0E04 0025 F4               		dc.b $E, 4, 0, $25, $F4
00010DB5 FE00 0027 0C               		dc.b $FE, 0, 0,	$27, $C
00010DBA                            		even
00010DBA                            		even
00010DBA                            
00010DBA                            ; ===========================================================================
00010DBA                            ; ---------------------------------------------------------------------------
00010DBA                            ; Object 56 - moving blocks (SYZ/SLZ), large doors (LZ)
00010DBA                            ; ---------------------------------------------------------------------------
00010DBA                            
00010DBA                            Obj56:					; XREF: Obj_Index
00010DBA 7000                       		moveq	#0,d0
00010DBC 1028 0024                  		move.b	$24(a0),d0
00010DC0 323B 0000                  		move.w	Obj56_Index(pc,d0.w),d1
00010DC4 4EFB 1000                  		jmp	Obj56_Index(pc,d1.w)
00010DC8                            ; ===========================================================================
00010DC8 0000                       Obj56_Index:	dc.w Obj56_Main-Obj56_Index
00010DCA 0000                       		dc.w Obj56_Action-Obj56_Index
00010DCC                            
00010DCC 1010                       Obj56_Var:	dc.b  $10, $10		; width, height
00010DCE 2020                       		dc.b  $20, $20
00010DD0 1020                       		dc.b  $10, $20
00010DD2 201A                       		dc.b  $20, $1A
00010DD4 1027                       		dc.b  $10, $27
00010DD6 1010                       		dc.b  $10, $10
00010DD8 0820                       		dc.b	8, $20
00010DDA 4010                       		dc.b  $40, $10
00010DDC                            ; ===========================================================================
00010DDC                            
00010DDC                            Obj56_Main:				; XREF: Obj56_Index
00010DDC 5428 0024                  		addq.b	#2,$24(a0)
00010DE0 217C 0000 0000 0004        		move.l	#Map_obj56,4(a0)
00010DE8 317C 4000 0002             		move.w	#$4000,2(a0)
00010DEE 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00010DF4 6600                       		bne.s	loc_102C8
00010DF6 317C 43C4 0002             		move.w	#$43C4,2(a0)	; LZ specific code
00010DFC                            
00010DFC                            loc_102C8:
00010DFC 117C 0004 0001             		move.b	#4,1(a0)
00010E02 117C 0003 0018             		move.b	#3,$18(a0)
00010E08 7000                       		moveq	#0,d0
00010E0A 1028 0028                  		move.b	$28(a0),d0
00010E0E E648                       		lsr.w	#3,d0
00010E10 0240 000E                  		andi.w	#$E,d0
00010E14 45FB 00B6                  		lea	Obj56_Var(pc,d0.w),a2
00010E18 115A 0019                  		move.b	(a2)+,$19(a0)
00010E1C 1152 0016                  		move.b	(a2),$16(a0)
00010E20 E248                       		lsr.w	#1,d0
00010E22 1140 001A                  		move.b	d0,$1A(a0)
00010E26 3168 0008 0034             		move.w	8(a0),$34(a0)
00010E2C 3168 000C 0030             		move.w	$C(a0),$30(a0)
00010E32 7000                       		moveq	#0,d0
00010E34 1012                       		move.b	(a2),d0
00010E36 D040                       		add.w	d0,d0
00010E38 3140 003A                  		move.w	d0,$3A(a0)
00010E3C 7000                       		moveq	#0,d0
00010E3E 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00010E44 6700                       		beq.s	loc_10332
00010E46 1028 0028                  		move.b	$28(a0),d0	; SYZ/SLZ specific code
00010E4A 0240 000F                  		andi.w	#$F,d0
00010E4E 5140                       		subq.w	#8,d0
00010E50 6500                       		bcs.s	loc_10332
00010E52 E548                       		lsl.w	#2,d0
00010E54 45F8 FE8A                  		lea	($FFFFFE8A).w,a2
00010E58 45F2 0000                  		lea	(a2,d0.w),a2
00010E5C 4A52                       		tst.w	(a2)
00010E5E 6A00                       		bpl.s	loc_10332
00010E60 0868 0000 0022             		bchg	#0,$22(a0)
00010E66                            
00010E66                            loc_10332:
00010E66 1028 0028                  		move.b	$28(a0),d0
00010E6A 6A00                       		bpl.s	Obj56_Action
00010E6C 0200 000F                  		andi.b	#$F,d0
00010E70 1140 003C                  		move.b	d0,$3C(a0)
00010E74 117C 0005 0028             		move.b	#5,$28(a0)
00010E7A 0C28 0007 001A             		cmpi.b	#7,$1A(a0)
00010E80 6600                       		bne.s	Obj56_ChkGone
00010E82 117C 000C 0028             		move.b	#$C,$28(a0)
00010E88 317C 0080 003A             		move.w	#$80,$3A(a0)
00010E8E                            
00010E8E                            Obj56_ChkGone:
00010E8E 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010E92 7000                       		moveq	#0,d0
00010E94 1028 0023                  		move.b	$23(a0),d0
00010E98 6700                       		beq.s	Obj56_Action
00010E9A 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00010EA0 0832 0000 0002             		btst	#0,2(a2,d0.w)
00010EA6 6700                       		beq.s	Obj56_Action
00010EA8 5228 0028                  		addq.b	#1,$28(a0)
00010EAC 4268 003A                  		clr.w	$3A(a0)
00010EB0                            
00010EB0                            Obj56_Action:				; XREF: Obj56_Index
00010EB0 3F28 0008                  		move.w	8(a0),-(sp)
00010EB4 7000                       		moveq	#0,d0
00010EB6 1028 0028                  		move.b	$28(a0),d0	; get object type
00010EBA 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00010EBE D040                       		add.w	d0,d0
00010EC0 323B 0000                  		move.w	Obj56_TypeIndex(pc,d0.w),d1
00010EC4 4EBB 1000                  		jsr	Obj56_TypeIndex(pc,d1.w)
00010EC8 381F                       		move.w	(sp)+,d4
00010ECA 4A28 0001                  		tst.b	1(a0)
00010ECE 6A00                       		bpl.s	Obj56_ChkDel
00010ED0 7200                       		moveq	#0,d1
00010ED2 1228 0019                  		move.b	$19(a0),d1
00010ED6 0641 000B                  		addi.w	#$B,d1
00010EDA 7400                       		moveq	#0,d2
00010EDC 1428 0016                  		move.b	$16(a0),d2
00010EE0 3602                       		move.w	d2,d3
00010EE2 5243                       		addq.w	#1,d3
00010EE4 6100 F60E                  		bsr.w	SolidObject
00010EE8                            
00010EE8                            Obj56_ChkDel:
00010EE8 3028 0034                  		move.w	$34(a0),d0
00010EEC 0240 FF80                  		andi.w	#$FF80,d0
00010EF0 3238 F700                  		move.w	($FFFFF700).w,d1
00010EF4 0441 0080                  		subi.w	#$80,d1
00010EF8 0241 FF80                  		andi.w	#$FF80,d1
00010EFC 9041                       		sub.w	d1,d0
00010EFE 0C40 0280                  		cmpi.w	#$280,d0
00010F02 6200 D242                  		bhi.w	DeleteObject
00010F06 6000 D202                  		bra.w	DisplaySprite
00010F0A                            ; ===========================================================================
00010F0A 0000 0000                  Obj56_TypeIndex:dc.w Obj56_Type00-Obj56_TypeIndex, Obj56_Type01-Obj56_TypeIndex
00010F0E 0000 0000                  		dc.w Obj56_Type02-Obj56_TypeIndex, Obj56_Type03-Obj56_TypeIndex
00010F12 0000 0000                  		dc.w Obj56_Type04-Obj56_TypeIndex, Obj56_Type05-Obj56_TypeIndex
00010F16 0000 0000                  		dc.w Obj56_Type06-Obj56_TypeIndex, Obj56_Type07-Obj56_TypeIndex
00010F1A 0000 0000                  		dc.w Obj56_Type08-Obj56_TypeIndex, Obj56_Type09-Obj56_TypeIndex
00010F1E 0000 0000                  		dc.w Obj56_Type0A-Obj56_TypeIndex, Obj56_Type0B-Obj56_TypeIndex
00010F22 0000 0000                  		dc.w Obj56_Type0C-Obj56_TypeIndex, Obj56_Type0D-Obj56_TypeIndex
00010F26                            ; ===========================================================================
00010F26                            
00010F26                            Obj56_Type00:				; XREF: Obj56_TypeIndex
00010F26 4E75                       		rts	
00010F28                            ; ===========================================================================
00010F28                            
00010F28                            Obj56_Type01:				; XREF: Obj56_TypeIndex
00010F28 323C 0040                  		move.w	#$40,d1
00010F2C 7000                       		moveq	#0,d0
00010F2E 1038 FE68                  		move.b	($FFFFFE68).w,d0
00010F32 6000                       		bra.s	Obj56_Move_LR
00010F34                            ; ===========================================================================
00010F34                            
00010F34                            Obj56_Type02:				; XREF: Obj56_TypeIndex
00010F34 323C 0080                  		move.w	#$80,d1
00010F38 7000                       		moveq	#0,d0
00010F3A 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
00010F3E                            
00010F3E                            Obj56_Move_LR:
00010F3E 0828 0000 0022             		btst	#0,$22(a0)
00010F44 6700                       		beq.s	loc_10416
00010F46 4440                       		neg.w	d0
00010F48 D041                       		add.w	d1,d0
00010F4A                            
00010F4A                            loc_10416:
00010F4A 3228 0034                  		move.w	$34(a0),d1
00010F4E 9240                       		sub.w	d0,d1
00010F50 3141 0008                  		move.w	d1,8(a0)	; move object horizontally
00010F54 4E75                       		rts	
00010F56                            ; ===========================================================================
00010F56                            
00010F56                            Obj56_Type03:				; XREF: Obj56_TypeIndex
00010F56 323C 0040                  		move.w	#$40,d1
00010F5A 7000                       		moveq	#0,d0
00010F5C 1038 FE68                  		move.b	($FFFFFE68).w,d0
00010F60 6000                       		bra.s	Obj56_Move_UD
00010F62                            ; ===========================================================================
00010F62                            
00010F62                            Obj56_Type04:				; XREF: Obj56_TypeIndex
00010F62 323C 0080                  		move.w	#$80,d1
00010F66 7000                       		moveq	#0,d0
00010F68 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
00010F6C                            
00010F6C                            Obj56_Move_UD:
00010F6C 0828 0000 0022             		btst	#0,$22(a0)
00010F72 6700                       		beq.s	loc_10444
00010F74 4440                       		neg.w	d0
00010F76 D041                       		add.w	d1,d0
00010F78                            
00010F78                            loc_10444:
00010F78 3228 0030                  		move.w	$30(a0),d1
00010F7C 9240                       		sub.w	d0,d1
00010F7E 3141 000C                  		move.w	d1,$C(a0)	; move object vertically
00010F82 4E75                       		rts	
00010F84                            ; ===========================================================================
00010F84                            
00010F84                            Obj56_Type05:				; XREF: Obj56_TypeIndex
00010F84 4A28 0038                  		tst.b	$38(a0)
00010F88 6600                       		bne.s	loc_104A4
00010F8A 0C78 0100 FE10             		cmpi.w	#$100,($FFFFFE10).w ; is level LZ1 ?
00010F90 6600                       		bne.s	loc_1047A	; if not, branch
00010F92 0C28 0003 003C             		cmpi.b	#3,$3C(a0)
00010F98 6600                       		bne.s	loc_1047A
00010F9A 4238 F7C9                  		clr.b	($FFFFF7C9).w
00010F9E 3038 D008                  		move.w	($FFFFD008).w,d0
00010FA2 B068 0008                  		cmp.w	8(a0),d0
00010FA6 6400                       		bcc.s	loc_1047A
00010FA8 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w
00010FAE                            
00010FAE                            loc_1047A:
00010FAE 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00010FB2 7000                       		moveq	#0,d0
00010FB4 1028 003C                  		move.b	$3C(a0),d0
00010FB8 0832 0000 0000             		btst	#0,(a2,d0.w)
00010FBE 6700                       		beq.s	loc_104AE
00010FC0 0C78 0100 FE10             		cmpi.w	#$100,($FFFFFE10).w ; is level LZ1 ?
00010FC6 6600                       		bne.s	loc_1049E	; if not, branch
00010FC8 0C00 0003                  		cmpi.b	#3,d0
00010FCC 6600                       		bne.s	loc_1049E
00010FCE 4238 F7C9                  		clr.b	($FFFFF7C9).w
00010FD2                            
00010FD2                            loc_1049E:
00010FD2 117C 0001 0038             		move.b	#1,$38(a0)
00010FD8                            
00010FD8                            loc_104A4:
00010FD8 4A68 003A                  		tst.w	$3A(a0)
00010FDC 6700                       		beq.s	loc_104C8
00010FDE 5568 003A                  		subq.w	#2,$3A(a0)
00010FE2                            
00010FE2                            loc_104AE:
00010FE2 3028 003A                  		move.w	$3A(a0),d0
00010FE6 0828 0000 0022             		btst	#0,$22(a0)
00010FEC 6700                       		beq.s	loc_104BC
00010FEE 4440                       		neg.w	d0
00010FF0                            
00010FF0                            loc_104BC:
00010FF0 3228 0030                  		move.w	$30(a0),d1
00010FF4 D240                       		add.w	d0,d1
00010FF6 3141 000C                  		move.w	d1,$C(a0)
00010FFA 4E75                       		rts	
00010FFC                            ; ===========================================================================
00010FFC                            
00010FFC                            loc_104C8:
00010FFC 5228 0028                  		addq.b	#1,$28(a0)
00011000 4228 0038                  		clr.b	$38(a0)
00011004 45F8 FC00                  		lea	($FFFFFC00).w,a2
00011008 7000                       		moveq	#0,d0
0001100A 1028 0023                  		move.b	$23(a0),d0
0001100E 67D2                       		beq.s	loc_104AE
00011010 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00011016 60CA                       		bra.s	loc_104AE
00011018                            ; ===========================================================================
00011018                            
00011018                            Obj56_Type06:				; XREF: Obj56_TypeIndex
00011018 4A28 0038                  		tst.b	$38(a0)
0001101C 6600                       		bne.s	loc_10500
0001101E 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00011022 7000                       		moveq	#0,d0
00011024 1028 003C                  		move.b	$3C(a0),d0
00011028 4A32 0000                  		tst.b	(a2,d0.w)
0001102C 6A00                       		bpl.s	loc_10512
0001102E 117C 0001 0038             		move.b	#1,$38(a0)
00011034                            
00011034                            loc_10500:
00011034 7000                       		moveq	#0,d0
00011036 1028 0016                  		move.b	$16(a0),d0
0001103A D040                       		add.w	d0,d0
0001103C B068 003A                  		cmp.w	$3A(a0),d0
00011040 6700                       		beq.s	loc_1052C
00011042 5468 003A                  		addq.w	#2,$3A(a0)
00011046                            
00011046                            loc_10512:
00011046 3028 003A                  		move.w	$3A(a0),d0
0001104A 0828 0000 0022             		btst	#0,$22(a0)
00011050 6700                       		beq.s	loc_10520
00011052 4440                       		neg.w	d0
00011054                            
00011054                            loc_10520:
00011054 3228 0030                  		move.w	$30(a0),d1
00011058 D240                       		add.w	d0,d1
0001105A 3141 000C                  		move.w	d1,$C(a0)
0001105E 4E75                       		rts	
00011060                            ; ===========================================================================
00011060                            
00011060                            loc_1052C:
00011060 5328 0028                  		subq.b	#1,$28(a0)
00011064 4228 0038                  		clr.b	$38(a0)
00011068 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001106C 7000                       		moveq	#0,d0
0001106E 1028 0023                  		move.b	$23(a0),d0
00011072 67D2                       		beq.s	loc_10512
00011074 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
0001107A 60CA                       		bra.s	loc_10512
0001107C                            ; ===========================================================================
0001107C                            
0001107C                            Obj56_Type07:				; XREF: Obj56_TypeIndex
0001107C 4A28 0038                  		tst.b	$38(a0)
00011080 6600                       		bne.s	loc_1055E
00011082 4A38 F7EF                  		tst.b	($FFFFF7EF).w	; has switch number $F been pressed?
00011086 6700                       		beq.s	locret_10578
00011088 117C 0001 0038             		move.b	#1,$38(a0)
0001108E 4268 003A                  		clr.w	$3A(a0)
00011092                            
00011092                            loc_1055E:
00011092 5268 0008                  		addq.w	#1,8(a0)
00011096 3168 0008 0034             		move.w	8(a0),$34(a0)
0001109C 5268 003A                  		addq.w	#1,$3A(a0)
000110A0 0C68 0380 003A             		cmpi.w	#$380,$3A(a0)
000110A6 6600                       		bne.s	locret_10578
000110A8 4228 0028                  		clr.b	$28(a0)
000110AC                            
000110AC                            locret_10578:
000110AC 4E75                       		rts	
000110AE                            ; ===========================================================================
000110AE                            
000110AE                            Obj56_Type0C:				; XREF: Obj56_TypeIndex
000110AE 4A28 0038                  		tst.b	$38(a0)
000110B2 6600                       		bne.s	loc_10598
000110B4 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
000110B8 7000                       		moveq	#0,d0
000110BA 1028 003C                  		move.b	$3C(a0),d0
000110BE 0832 0000 0000             		btst	#0,(a2,d0.w)
000110C4 6700                       		beq.s	loc_105A2
000110C6 117C 0001 0038             		move.b	#1,$38(a0)
000110CC                            
000110CC                            loc_10598:
000110CC 4A68 003A                  		tst.w	$3A(a0)
000110D0 6700                       		beq.s	loc_105C0
000110D2 5568 003A                  		subq.w	#2,$3A(a0)
000110D6                            
000110D6                            loc_105A2:
000110D6 3028 003A                  		move.w	$3A(a0),d0
000110DA 0828 0000 0022             		btst	#0,$22(a0)
000110E0 6700                       		beq.s	loc_105B4
000110E2 4440                       		neg.w	d0
000110E4 0640 0080                  		addi.w	#$80,d0
000110E8                            
000110E8                            loc_105B4:
000110E8 3228 0034                  		move.w	$34(a0),d1
000110EC D240                       		add.w	d0,d1
000110EE 3141 0008                  		move.w	d1,8(a0)
000110F2 4E75                       		rts	
000110F4                            ; ===========================================================================
000110F4                            
000110F4                            loc_105C0:
000110F4 5228 0028                  		addq.b	#1,$28(a0)
000110F8 4228 0038                  		clr.b	$38(a0)
000110FC 45F8 FC00                  		lea	($FFFFFC00).w,a2
00011100 7000                       		moveq	#0,d0
00011102 1028 0023                  		move.b	$23(a0),d0
00011106 67CE                       		beq.s	loc_105A2
00011108 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0001110E 60C6                       		bra.s	loc_105A2
00011110                            ; ===========================================================================
00011110                            
00011110                            Obj56_Type0D:				; XREF: Obj56_TypeIndex
00011110 4A28 0038                  		tst.b	$38(a0)
00011114 6600                       		bne.s	loc_105F8
00011116 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
0001111A 7000                       		moveq	#0,d0
0001111C 1028 003C                  		move.b	$3C(a0),d0
00011120 4A32 0000                  		tst.b	(a2,d0.w)
00011124 6A00                       		bpl.s	loc_10606
00011126 117C 0001 0038             		move.b	#1,$38(a0)
0001112C                            
0001112C                            loc_105F8:
0001112C 303C 0080                  		move.w	#$80,d0
00011130 B068 003A                  		cmp.w	$3A(a0),d0
00011134 6700                       		beq.s	loc_10624
00011136 5468 003A                  		addq.w	#2,$3A(a0)
0001113A                            
0001113A                            loc_10606:
0001113A 3028 003A                  		move.w	$3A(a0),d0
0001113E 0828 0000 0022             		btst	#0,$22(a0)
00011144 6700                       		beq.s	loc_10618
00011146 4440                       		neg.w	d0
00011148 0640 0080                  		addi.w	#$80,d0
0001114C                            
0001114C                            loc_10618:
0001114C 3228 0034                  		move.w	$34(a0),d1
00011150 D240                       		add.w	d0,d1
00011152 3141 0008                  		move.w	d1,8(a0)
00011156 4E75                       		rts	
00011158                            ; ===========================================================================
00011158                            
00011158                            loc_10624:
00011158 5328 0028                  		subq.b	#1,$28(a0)
0001115C 4228 0038                  		clr.b	$38(a0)
00011160 45F8 FC00                  		lea	($FFFFFC00).w,a2
00011164 7000                       		moveq	#0,d0
00011166 1028 0023                  		move.b	$23(a0),d0
0001116A 67CE                       		beq.s	loc_10606
0001116C 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
00011172 60C6                       		bra.s	loc_10606
00011174                            ; ===========================================================================
00011174                            
00011174                            Obj56_Type08:				; XREF: Obj56_TypeIndex
00011174 323C 0010                  		move.w	#$10,d1
00011178 7000                       		moveq	#0,d0
0001117A 1038 FE88                  		move.b	($FFFFFE88).w,d0
0001117E E248                       		lsr.w	#1,d0
00011180 3638 FE8A                  		move.w	($FFFFFE8A).w,d3
00011184 6000                       		bra.s	Obj56_Move_Sqr
00011186                            ; ===========================================================================
00011186                            
00011186                            Obj56_Type09:				; XREF: Obj56_TypeIndex
00011186 323C 0030                  		move.w	#$30,d1
0001118A 7000                       		moveq	#0,d0
0001118C 1038 FE8C                  		move.b	($FFFFFE8C).w,d0
00011190 3638 FE8E                  		move.w	($FFFFFE8E).w,d3
00011194 6000                       		bra.s	Obj56_Move_Sqr
00011196                            ; ===========================================================================
00011196                            
00011196                            Obj56_Type0A:				; XREF: Obj56_TypeIndex
00011196 323C 0050                  		move.w	#$50,d1
0001119A 7000                       		moveq	#0,d0
0001119C 1038 FE90                  		move.b	($FFFFFE90).w,d0
000111A0 3638 FE92                  		move.w	($FFFFFE92).w,d3
000111A4 6000                       		bra.s	Obj56_Move_Sqr
000111A6                            ; ===========================================================================
000111A6                            
000111A6                            Obj56_Type0B:				; XREF: Obj56_TypeIndex
000111A6 323C 0070                  		move.w	#$70,d1
000111AA 7000                       		moveq	#0,d0
000111AC 1038 FE94                  		move.b	($FFFFFE94).w,d0
000111B0 3638 FE96                  		move.w	($FFFFFE96).w,d3
000111B4                            
000111B4                            Obj56_Move_Sqr:
000111B4 4A43                       		tst.w	d3
000111B6 6600                       		bne.s	loc_1068E
000111B8 5228 0022                  		addq.b	#1,$22(a0)
000111BC 0228 0003 0022             		andi.b	#3,$22(a0)
000111C2                            
000111C2                            loc_1068E:
000111C2 1428 0022                  		move.b	$22(a0),d2
000111C6 0202 0003                  		andi.b	#3,d2
000111CA 6600                       		bne.s	loc_106AE
000111CC 9041                       		sub.w	d1,d0
000111CE D068 0034                  		add.w	$34(a0),d0
000111D2 3140 0008                  		move.w	d0,8(a0)
000111D6 4441                       		neg.w	d1
000111D8 D268 0030                  		add.w	$30(a0),d1
000111DC 3141 000C                  		move.w	d1,$C(a0)
000111E0 4E75                       		rts	
000111E2                            ; ===========================================================================
000111E2                            
000111E2                            loc_106AE:
000111E2 5302                       		subq.b	#1,d2
000111E4 6600                       		bne.s	loc_106CC
000111E6 5341                       		subq.w	#1,d1
000111E8 9041                       		sub.w	d1,d0
000111EA 4440                       		neg.w	d0
000111EC D068 0030                  		add.w	$30(a0),d0
000111F0 3140 000C                  		move.w	d0,$C(a0)
000111F4 5241                       		addq.w	#1,d1
000111F6 D268 0034                  		add.w	$34(a0),d1
000111FA 3141 0008                  		move.w	d1,8(a0)
000111FE 4E75                       		rts	
00011200                            ; ===========================================================================
00011200                            
00011200                            loc_106CC:
00011200 5302                       		subq.b	#1,d2
00011202 6600                       		bne.s	loc_106EA
00011204 5341                       		subq.w	#1,d1
00011206 9041                       		sub.w	d1,d0
00011208 4440                       		neg.w	d0
0001120A D068 0034                  		add.w	$34(a0),d0
0001120E 3140 0008                  		move.w	d0,8(a0)
00011212 5241                       		addq.w	#1,d1
00011214 D268 0030                  		add.w	$30(a0),d1
00011218 3141 000C                  		move.w	d1,$C(a0)
0001121C 4E75                       		rts	
0001121E                            ; ===========================================================================
0001121E                            
0001121E                            loc_106EA:
0001121E 9041                       		sub.w	d1,d0
00011220 D068 0030                  		add.w	$30(a0),d0
00011224 3140 000C                  		move.w	d0,$C(a0)
00011228 4441                       		neg.w	d1
0001122A D268 0034                  		add.w	$34(a0),d1
0001122E 3141 0008                  		move.w	d1,8(a0)
00011232 4E75                       		rts	
00011234                            ; ===========================================================================
00011234                            ; ---------------------------------------------------------------------------
00011234                            ; Sprite mappings - moving blocks (SYZ/SLZ/LZ)
00011234                            ; ---------------------------------------------------------------------------
00011234                            Map_obj56:
00011234                            	include "_maps\obj56.asm"
00011234                            ; ---------------------------------------------------------------------------
00011234                            ; Sprite mappings - moving blocks (SYZ/SLZ/LZ)
00011234                            ; ---------------------------------------------------------------------------
00011234 0000 0000                  		dc.w byte_10710-Map_obj56, byte_10716-Map_obj56
00011238 0000 0000                  		dc.w byte_1072B-Map_obj56, byte_10736-Map_obj56
0001123C 0000 0000                  		dc.w byte_1074B-Map_obj56, byte_1075B-Map_obj56
00011240 0000 0000                  		dc.w byte_10761-Map_obj56, byte_1076C-Map_obj56
00011244 01                         byte_10710:	dc.b 1
00011245 F00F 0061 F0               		dc.b $F0, $F, 0, $61, $F0
0001124A 04                         byte_10716:	dc.b 4
0001124B E00F 0061 E0               		dc.b $E0, $F, 0, $61, $E0
00011250 E00F 0061 00               		dc.b $E0, $F, 0, $61, 0
00011255 000F 0061 E0               		dc.b 0,	$F, 0, $61, $E0
0001125A 000F 0061 00               		dc.b 0,	$F, 0, $61, 0
0001125F 02                         byte_1072B:	dc.b 2
00011260 E00F 0061 F0               		dc.b $E0, $F, 0, $61, $F0
00011265 000F 0061 F0               		dc.b 0,	$F, 0, $61, $F0
0001126A 04                         byte_10736:	dc.b 4
0001126B E60F 0081 E0               		dc.b $E6, $F, 0, $81, $E0
00011270 E60F 0081 00               		dc.b $E6, $F, 0, $81, 0
00011275 000F 0081 E0               		dc.b 0,	$F, 0, $81, $E0
0001127A 000F 0081 00               		dc.b 0,	$F, 0, $81, 0
0001127F 03                         byte_1074B:	dc.b 3
00011280 D90F 0081 F0               		dc.b $D9, $F, 0, $81, $F0
00011285 F30F 0081 F0               		dc.b $F3, $F, 0, $81, $F0
0001128A 0D0F 0081 F0               		dc.b $D, $F, 0,	$81, $F0
0001128F 01                         byte_1075B:	dc.b 1
00011290 F00F 0021 F0               		dc.b $F0, $F, 0, $21, $F0
00011295 02                         byte_10761:	dc.b 2
00011296 E007 0000 F8               		dc.b $E0, 7, 0,	0, $F8
0001129B 0007 1000 F8               		dc.b 0,	7, $10,	0, $F8
000112A0 04                         byte_1076C:	dc.b 4
000112A1 F00F 0022 C0               		dc.b $F0, $F, 0, $22, $C0
000112A6 F00F 0022 E0               		dc.b $F0, $F, 0, $22, $E0
000112AB F00F 0022 00               		dc.b $F0, $F, 0, $22, 0
000112B0 F00F 0022 20               		dc.b $F0, $F, 0, $22, $20
000112B6 00                         		even
000112B6 00                         		even
000112B6                            
000112B6                            ; ===========================================================================
000112B6                            ; ---------------------------------------------------------------------------
000112B6                            ; Object 57 - spiked balls (SYZ, LZ)
000112B6                            ; ---------------------------------------------------------------------------
000112B6                            
000112B6                            Obj57:					; XREF: Obj_Index
000112B6 7000                       		moveq	#0,d0
000112B8 1028 0024                  		move.b	$24(a0),d0
000112BC 323B 0000                  		move.w	Obj57_Index(pc,d0.w),d1
000112C0 4EFB 1000                  		jmp	Obj57_Index(pc,d1.w)
000112C4                            ; ===========================================================================
000112C4 0000                       Obj57_Index:	dc.w Obj57_Main-Obj57_Index
000112C6 0000                       		dc.w Obj57_Move-Obj57_Index
000112C8 0000                       		dc.w Obj57_Display-Obj57_Index
000112CA                            ; ===========================================================================
000112CA                            
000112CA                            Obj57_Main:				; XREF: Obj57_Index
000112CA 5428 0024                  		addq.b	#2,$24(a0)
000112CE 217C 0000 0000 0004        		move.l	#Map_obj57,4(a0)
000112D6 317C 03BA 0002             		move.w	#$3BA,2(a0)
000112DC 117C 0004 0001             		move.b	#4,1(a0)
000112E2 117C 0004 0018             		move.b	#4,$18(a0)
000112E8 117C 0008 0019             		move.b	#8,$19(a0)
000112EE 3168 0008 003A             		move.w	8(a0),$3A(a0)
000112F4 3168 000C 0038             		move.w	$C(a0),$38(a0)
000112FA 117C 0098 0020             		move.b	#$98,$20(a0)	; SYZ specific code (chain hurts Sonic)
00011300 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00011306 6600                       		bne.s	loc_107E8
00011308 117C 0000 0020             		move.b	#0,$20(a0)	; LZ specific code (chain doesn't hurt)
0001130E 317C 0310 0002             		move.w	#$310,2(a0)
00011314 217C 0000 0000 0004        		move.l	#Map_obj57a,4(a0)
0001131C                            
0001131C                            loc_107E8:
0001131C 1228 0028                  		move.b	$28(a0),d1	; get object type
00011320 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00011324 4881                       		ext.w	d1
00011326 E741                       		asl.w	#3,d1		; multiply by 8
00011328 3141 003E                  		move.w	d1,$3E(a0)	; set object twirl speed
0001132C 1028 0022                  		move.b	$22(a0),d0
00011330 E418                       		ror.b	#2,d0
00011332 0200 00C0                  		andi.b	#-$40,d0
00011336 1140 0026                  		move.b	d0,$26(a0)
0001133A 45E8 0029                  		lea	$29(a0),a2
0001133E 1228 0028                  		move.b	$28(a0),d1	; get object type
00011342 0241 0007                  		andi.w	#7,d1		; read only the	2nd digit
00011346 14FC 0000                  		move.b	#0,(a2)+
0001134A 3601                       		move.w	d1,d3
0001134C E94B                       		lsl.w	#4,d3
0001134E 1143 003C                  		move.b	d3,$3C(a0)
00011352 5341                       		subq.w	#1,d1		; set chain length (type-1)
00011354 6500                       		bcs.s	loc_10894
00011356 0828 0003 0028             		btst	#3,$28(a0)
0001135C 6700                       		beq.s	Obj57_MakeChain
0001135E 5341                       		subq.w	#1,d1
00011360 6500                       		bcs.s	loc_10894
00011362                            
00011362                            Obj57_MakeChain:
00011362 6100 D23C                  		bsr.w	SingleObjLoad
00011366 6600                       		bne.s	loc_10894
00011368 5228 0029                  		addq.b	#1,$29(a0)
0001136C 3A09                       		move.w	a1,d5
0001136E 0445 D000                  		subi.w	#-$3000,d5
00011372 EC4D                       		lsr.w	#6,d5
00011374 0245 007F                  		andi.w	#$7F,d5
00011378 14C5                       		move.b	d5,(a2)+
0001137A 137C 0004 0024             		move.b	#4,$24(a1)
00011380 1290                       		move.b	0(a0),0(a1)
00011382 2368 0004 0004             		move.l	4(a0),4(a1)
00011388 3368 0002 0002             		move.w	2(a0),2(a1)
0001138E 1368 0001 0001             		move.b	1(a0),1(a1)
00011394 1368 0018 0018             		move.b	$18(a0),$18(a1)
0001139A 1368 0019 0019             		move.b	$19(a0),$19(a1)
000113A0 1368 0020 0020             		move.b	$20(a0),$20(a1)
000113A6 0403 0010                  		subi.b	#$10,d3
000113AA 1343 003C                  		move.b	d3,$3C(a1)
000113AE 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
000113B4 6600                       		bne.s	loc_10890
000113B6 4A03                       		tst.b	d3
000113B8 6600                       		bne.s	loc_10890
000113BA 137C 0002 001A             		move.b	#2,$1A(a1)
000113C0                            
000113C0                            loc_10890:
000113C0 51C9 FFA0                  		dbf	d1,Obj57_MakeChain ; repeat for	length of chain
000113C4                            
000113C4                            loc_10894:
000113C4 3A08                       		move.w	a0,d5
000113C6 0445 D000                  		subi.w	#-$3000,d5
000113CA EC4D                       		lsr.w	#6,d5
000113CC 0245 007F                  		andi.w	#$7F,d5
000113D0 14C5                       		move.b	d5,(a2)+
000113D2 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
000113D8 6600                       		bne.s	Obj57_Move
000113DA 117C 008B 0020             		move.b	#$8B,$20(a0)	; if yes, make last spikeball larger
000113E0 117C 0001 001A             		move.b	#1,$1A(a0)	; use different	frame
000113E6                            
000113E6                            Obj57_Move:				; XREF: Obj57_Index
000113E6 6100 0000                  		bsr.w	Obj57_MoveSub
000113EA 6000 0000                  		bra.w	Obj57_ChkDel
000113EE                            ; ===========================================================================
000113EE                            
000113EE                            Obj57_MoveSub:				; XREF: Obj57_Move
000113EE 3028 003E                  		move.w	$3E(a0),d0
000113F2 D168 0026                  		add.w	d0,$26(a0)
000113F6 1028 0026                  		move.b	$26(a0),d0
000113FA 4EB9 0000 33D4             		jsr	(CalcSine).l
00011400 3428 0038                  		move.w	$38(a0),d2
00011404 3628 003A                  		move.w	$3A(a0),d3
00011408 45E8 0029                  		lea	$29(a0),a2
0001140C 7C00                       		moveq	#0,d6
0001140E 1C1A                       		move.b	(a2)+,d6
00011410                            
00011410                            Obj57_MoveLoop:
00011410 7800                       		moveq	#0,d4
00011412 181A                       		move.b	(a2)+,d4
00011414 ED4C                       		lsl.w	#6,d4
00011416 0684 00FF D000             		addi.l	#$FFD000,d4
0001141C 2244                       		movea.l	d4,a1
0001141E 7800                       		moveq	#0,d4
00011420 1829 003C                  		move.b	$3C(a1),d4
00011424 2A04                       		move.l	d4,d5
00011426 C9C0                       		muls.w	d0,d4
00011428 E084                       		asr.l	#8,d4
0001142A CBC1                       		muls.w	d1,d5
0001142C E085                       		asr.l	#8,d5
0001142E D842                       		add.w	d2,d4
00011430 DA43                       		add.w	d3,d5
00011432 3344 000C                  		move.w	d4,$C(a1)
00011436 3345 0008                  		move.w	d5,8(a1)
0001143A 51CE FFD4                  		dbf	d6,Obj57_MoveLoop
0001143E 4E75                       		rts	
00011440                            ; ===========================================================================
00011440                            
00011440                            Obj57_ChkDel:				; XREF: Obj57_Move
00011440 3028 003A                  		move.w	$3A(a0),d0
00011444 0240 FF80                  		andi.w	#$FF80,d0
00011448 3238 F700                  		move.w	($FFFFF700).w,d1
0001144C 0441 0080                  		subi.w	#$80,d1
00011450 0241 FF80                  		andi.w	#$FF80,d1
00011454 9041                       		sub.w	d1,d0
00011456 0C40 0280                  		cmpi.w	#$280,d0
0001145A 6200 0000                  		bhi.w	Obj57_Delete
0001145E 6000 CCAA                  		bra.w	DisplaySprite
00011462                            ; ===========================================================================
00011462                            
00011462                            Obj57_Delete:				; XREF: Obj57_ChkDel
00011462 7400                       		moveq	#0,d2
00011464 45E8 0029                  		lea	$29(a0),a2
00011468 141A                       		move.b	(a2)+,d2
0001146A                            
0001146A                            Obj57_DelLoop:
0001146A 7000                       		moveq	#0,d0
0001146C 101A                       		move.b	(a2)+,d0
0001146E ED48                       		lsl.w	#6,d0
00011470 0680 00FF D000             		addi.l	#$FFD000,d0
00011476 2240                       		movea.l	d0,a1
00011478 6100 CCCE                  		bsr.w	DeleteObject2
0001147C 51CA FFEC                  		dbf	d2,Obj57_DelLoop ; delete all pieces of	chain
00011480                            
00011480 4E75                       		rts	
00011482                            ; ===========================================================================
00011482                            
00011482                            Obj57_Display:				; XREF: Obj57_Index
00011482 6000 CC86                  		bra.w	DisplaySprite
00011486                            ; ===========================================================================
00011486                            ; ---------------------------------------------------------------------------
00011486                            ; Sprite mappings - chain of spiked balls (SYZ)
00011486                            ; ---------------------------------------------------------------------------
00011486                            Map_obj57:
00011486                            	include "_maps\obj57syz.asm"
00011486                            ; ---------------------------------------------------------------------------
00011486                            ; Sprite mappings - chain of spiked balls (SYZ)
00011486                            ; ---------------------------------------------------------------------------
00011486 0000                       		dc.w byte_10958-Map_obj57
00011488 01                         byte_10958:	dc.b 1
00011489 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0001148E                            		even
0001148E                            		even
0001148E                            
0001148E                            ; ---------------------------------------------------------------------------
0001148E                            ; Sprite mappings - spiked ball	on a chain (LZ)
0001148E                            ; ---------------------------------------------------------------------------
0001148E                            Map_obj57a:
0001148E                            	include "_maps\obj57lz.asm"
0001148E                            ; ---------------------------------------------------------------------------
0001148E                            ; Sprite mappings - spiked ball	on a chain (LZ)
0001148E                            ; ---------------------------------------------------------------------------
0001148E 0000                       		dc.w byte_10964-Map_obj57a
00011490 0000                       		dc.w byte_1096A-Map_obj57a
00011492 0000                       		dc.w byte_10970-Map_obj57a
00011494 01                         byte_10964:	dc.b 1
00011495 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0001149A 01                         byte_1096A:	dc.b 1
0001149B F00F 0004 F0               		dc.b $F0, $F, 0, 4, $F0
000114A0 01                         byte_10970:	dc.b 1
000114A1 F805 0014 F8               		dc.b $F8, 5, 0,	$14, $F8
000114A6                            		even
000114A6                            		even
000114A6                            
000114A6                            ; ===========================================================================
000114A6                            ; ---------------------------------------------------------------------------
000114A6                            ; Object 58 - giant spiked balls (SYZ)
000114A6                            ; ---------------------------------------------------------------------------
000114A6                            
000114A6                            Obj58:					; XREF: Obj_Index
000114A6 7000                       		moveq	#0,d0
000114A8 1028 0024                  		move.b	$24(a0),d0
000114AC 323B 0000                  		move.w	Obj58_Index(pc,d0.w),d1
000114B0 4EFB 1000                  		jmp	Obj58_Index(pc,d1.w)
000114B4                            ; ===========================================================================
000114B4 0000                       Obj58_Index:	dc.w Obj58_Main-Obj58_Index
000114B6 0000                       		dc.w Obj58_Move-Obj58_Index
000114B8                            ; ===========================================================================
000114B8                            
000114B8                            Obj58_Main:				; XREF: Obj58_Index
000114B8 5428 0024                  		addq.b	#2,$24(a0)
000114BC 217C 0000 0000 0004        		move.l	#Map_obj15b,4(a0)
000114C4 317C 0396 0002             		move.w	#$396,2(a0)
000114CA 117C 0004 0001             		move.b	#4,1(a0)
000114D0 117C 0004 0018             		move.b	#4,$18(a0)
000114D6 117C 0018 0019             		move.b	#$18,$19(a0)
000114DC 3168 0008 003A             		move.w	8(a0),$3A(a0)
000114E2 3168 000C 0038             		move.w	$C(a0),$38(a0)
000114E8 117C 0086 0020             		move.b	#$86,$20(a0)
000114EE 1228 0028                  		move.b	$28(a0),d1	; get object type
000114F2 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
000114F6 4881                       		ext.w	d1
000114F8 E741                       		asl.w	#3,d1		; multiply by 8
000114FA 3141 003E                  		move.w	d1,$3E(a0)	; set object speed
000114FE 1028 0022                  		move.b	$22(a0),d0
00011502 E418                       		ror.b	#2,d0
00011504 0200 00C0                  		andi.b	#$C0,d0
00011508 1140 0026                  		move.b	d0,$26(a0)
0001150C 117C 0050 003C             		move.b	#$50,$3C(a0)	; set diameter of circle of rotation
00011512                            
00011512                            Obj58_Move:				; XREF: Obj58_Index
00011512 7000                       		moveq	#0,d0
00011514 1028 0028                  		move.b	$28(a0),d0	; get object type
00011518 0240 0007                  		andi.w	#7,d0		; read only the	2nd digit
0001151C D040                       		add.w	d0,d0
0001151E 323B 0000                  		move.w	Obj58_TypeIndex(pc,d0.w),d1
00011522 4EBB 1000                  		jsr	Obj58_TypeIndex(pc,d1.w)
00011526 3028 003A                  		move.w	$3A(a0),d0
0001152A 0240 FF80                  		andi.w	#$FF80,d0
0001152E 3238 F700                  		move.w	($FFFFF700).w,d1
00011532 0441 0080                  		subi.w	#$80,d1
00011536 0241 FF80                  		andi.w	#$FF80,d1
0001153A 9041                       		sub.w	d1,d0
0001153C 0C40 0280                  		cmpi.w	#$280,d0
00011540 6200 CC04                  		bhi.w	DeleteObject
00011544 6000 CBC4                  		bra.w	DisplaySprite
00011548                            ; ===========================================================================
00011548 0000                       Obj58_TypeIndex:dc.w Obj58_Type00-Obj58_TypeIndex
0001154A 0000                       		dc.w Obj58_Type01-Obj58_TypeIndex
0001154C 0000                       		dc.w Obj58_Type02-Obj58_TypeIndex
0001154E 0000                       		dc.w Obj58_Type03-Obj58_TypeIndex
00011550                            ; ===========================================================================
00011550                            
00011550                            Obj58_Type00:				; XREF: Obj58_TypeIndex
00011550 4E75                       		rts	
00011552                            ; ===========================================================================
00011552                            
00011552                            Obj58_Type01:				; XREF: Obj58_TypeIndex
00011552 323C 0060                  		move.w	#$60,d1
00011556 7000                       		moveq	#0,d0
00011558 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
0001155C 0828 0000 0022             		btst	#0,$22(a0)
00011562 6700                       		beq.s	loc_10A38
00011564 4440                       		neg.w	d0
00011566 D041                       		add.w	d1,d0
00011568                            
00011568                            loc_10A38:
00011568 3228 003A                  		move.w	$3A(a0),d1
0001156C 9240                       		sub.w	d0,d1
0001156E 3141 0008                  		move.w	d1,8(a0)	; move object horizontally
00011572 4E75                       		rts	
00011574                            ; ===========================================================================
00011574                            
00011574                            Obj58_Type02:				; XREF: Obj58_TypeIndex
00011574 323C 0060                  		move.w	#$60,d1
00011578 7000                       		moveq	#0,d0
0001157A 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
0001157E 0828 0000 0022             		btst	#0,$22(a0)
00011584 6700                       		beq.s	loc_10A5C
00011586 4440                       		neg.w	d0
00011588 0640 0080                  		addi.w	#$80,d0
0001158C                            
0001158C                            loc_10A5C:
0001158C 3228 0038                  		move.w	$38(a0),d1
00011590 9240                       		sub.w	d0,d1
00011592 3141 000C                  		move.w	d1,$C(a0)	; move object vertically
00011596 4E75                       		rts	
00011598                            ; ===========================================================================
00011598                            
00011598                            Obj58_Type03:				; XREF: Obj58_TypeIndex
00011598 3028 003E                  		move.w	$3E(a0),d0
0001159C D168 0026                  		add.w	d0,$26(a0)
000115A0 1028 0026                  		move.b	$26(a0),d0
000115A4 4EB9 0000 33D4             		jsr	(CalcSine).l
000115AA 3428 0038                  		move.w	$38(a0),d2
000115AE 3628 003A                  		move.w	$3A(a0),d3
000115B2 7800                       		moveq	#0,d4
000115B4 1828 003C                  		move.b	$3C(a0),d4
000115B8 2A04                       		move.l	d4,d5
000115BA C9C0                       		muls.w	d0,d4
000115BC E084                       		asr.l	#8,d4
000115BE CBC1                       		muls.w	d1,d5
000115C0 E085                       		asr.l	#8,d5
000115C2 D842                       		add.w	d2,d4
000115C4 DA43                       		add.w	d3,d5
000115C6 3144 000C                  		move.w	d4,$C(a0)
000115CA 3145 0008                  		move.w	d5,8(a0)
000115CE 4E75                       		rts	
000115D0                            ; ===========================================================================
000115D0                            ; ---------------------------------------------------------------------------
000115D0                            ; Sprite mappings - SBZ	spiked ball on a chain
000115D0                            ; ---------------------------------------------------------------------------
000115D0                            Map_obj15b:
000115D0                            	include "_maps\obj15sbz.asm"
000115D0                            ; ---------------------------------------------------------------------------
000115D0                            ; Sprite mappings - spiked ball on a chain (SBZ)
000115D0                            ; ---------------------------------------------------------------------------
000115D0 0000 0000                  		dc.w byte_10AA6-Map_obj15b, byte_10AC0-Map_obj15b
000115D4 0000                       		dc.w byte_10AC6-Map_obj15b
000115D6 05                         byte_10AA6:	dc.b 5
000115D7 E804 0000 F8               		dc.b $E8, 4, 0,	0, $F8
000115DC F00F 0002 F0               		dc.b $F0, $F, 0, 2, $F0
000115E1 F801 0012 E8               		dc.b $F8, 1, 0,	$12, $E8
000115E6 F801 0014 10               		dc.b $F8, 1, 0,	$14, $10
000115EB 1004 0016 F8               		dc.b $10, 4, 0,	$16, $F8
000115F0 01                         byte_10AC0:	dc.b 1
000115F1 F805 0020 F8               		dc.b $F8, 5, 0,	$20, $F8
000115F6 02                         byte_10AC6:	dc.b 2
000115F7 F80D 0018 F0               		dc.b $F8, $D, 0, $18, $F0
000115FC E80D 1018 F0               		dc.b $E8, $D, $10, $18,	$F0
00011602 00                         		even
00011602 00                         		even
00011602                            
00011602                            ; ===========================================================================
00011602                            ; ---------------------------------------------------------------------------
00011602                            ; Object 59 - platforms	that move when you stand on them (SLZ)
00011602                            ; ---------------------------------------------------------------------------
00011602                            
00011602                            Obj59:					; XREF: Obj_Index
00011602 7000                       		moveq	#0,d0
00011604 1028 0024                  		move.b	$24(a0),d0
00011608 323B 0000                  		move.w	Obj59_Index(pc,d0.w),d1
0001160C 4EBB 1000                  		jsr	Obj59_Index(pc,d1.w)
00011610 3028 0032                  		move.w	$32(a0),d0
00011614 0240 FF80                  		andi.w	#$FF80,d0
00011618 3238 F700                  		move.w	($FFFFF700).w,d1
0001161C 0441 0080                  		subi.w	#$80,d1
00011620 0241 FF80                  		andi.w	#$FF80,d1
00011624 9041                       		sub.w	d1,d0
00011626 0C40 0280                  		cmpi.w	#$280,d0
0001162A 6200 CB1A                  		bhi.w	DeleteObject
0001162E 6000 CADA                  		bra.w	DisplaySprite
00011632                            ; ===========================================================================
00011632 0000                       Obj59_Index:	dc.w Obj59_Main-Obj59_Index
00011634 0000                       		dc.w Obj59_Platform-Obj59_Index
00011636 0000                       		dc.w Obj59_Action-Obj59_Index
00011638 0000                       		dc.w Obj59_MakeMulti-Obj59_Index
0001163A                            
0001163A 2800                       Obj59_Var1:	dc.b $28, 0		; width, frame number
0001163C                            
0001163C 1001                       Obj59_Var2:	dc.b $10, 1		; width, action	type
0001163E 2001                       		dc.b $20, 1
00011640 3401                       		dc.b $34, 1
00011642 1003                       		dc.b $10, 3
00011644 2003                       		dc.b $20, 3
00011646 3403                       		dc.b $34, 3
00011648 1401                       		dc.b $14, 1
0001164A 2401                       		dc.b $24, 1
0001164C 2C01                       		dc.b $2C, 1
0001164E 1403                       		dc.b $14, 3
00011650 2403                       		dc.b $24, 3
00011652 2C03                       		dc.b $2C, 3
00011654 2005                       		dc.b $20, 5
00011656 2007                       		dc.b $20, 7
00011658 3009                       		dc.b $30, 9
0001165A                            ; ===========================================================================
0001165A                            
0001165A                            Obj59_Main:				; XREF: Obj59_Index
0001165A 5428 0024                  		addq.b	#2,$24(a0)
0001165E 7000                       		moveq	#0,d0
00011660 1028 0028                  		move.b	$28(a0),d0
00011664 6A00                       		bpl.s	Obj59_Main2
00011666 5828 0024                  		addq.b	#4,$24(a0)
0001166A 0240 007F                  		andi.w	#$7F,d0
0001166E C0FC 0006                  		mulu.w	#6,d0
00011672 3140 003C                  		move.w	d0,$3C(a0)
00011676 3140 003E                  		move.w	d0,$3E(a0)
0001167A 588F                       		addq.l	#4,sp
0001167C 4E75                       		rts	
0001167E                            ; ===========================================================================
0001167E                            
0001167E                            Obj59_Main2:
0001167E E648                       		lsr.w	#3,d0
00011680 0240 001E                  		andi.w	#$1E,d0
00011684 45FB 00B4                  		lea	Obj59_Var1(pc,d0.w),a2
00011688 115A 0019                  		move.b	(a2)+,$19(a0)
0001168C 115A 001A                  		move.b	(a2)+,$1A(a0)
00011690 7000                       		moveq	#0,d0
00011692 1028 0028                  		move.b	$28(a0),d0
00011696 D040                       		add.w	d0,d0
00011698 0240 001E                  		andi.w	#$1E,d0
0001169C 45FB 009E                  		lea	Obj59_Var2(pc,d0.w),a2
000116A0 101A                       		move.b	(a2)+,d0
000116A2 E548                       		lsl.w	#2,d0
000116A4 3140 003C                  		move.w	d0,$3C(a0)
000116A8 115A 0028                  		move.b	(a2)+,$28(a0)
000116AC 217C 0000 0000 0004        		move.l	#Map_obj59,4(a0)
000116B4 317C 4000 0002             		move.w	#$4000,2(a0)
000116BA 117C 0004 0001             		move.b	#4,1(a0)
000116C0 117C 0004 0018             		move.b	#4,$18(a0)
000116C6 3168 0008 0032             		move.w	8(a0),$32(a0)
000116CC 3168 000C 0030             		move.w	$C(a0),$30(a0)
000116D2                            
000116D2                            Obj59_Platform:				; XREF: Obj59_Index
000116D2 7200                       		moveq	#0,d1
000116D4 1228 0019                  		move.b	$19(a0),d1
000116D8 4EB9 0000 7EFC             		jsr	(PlatformObject).l
000116DE 6000 0000                  		bra.w	Obj59_Types
000116E2                            ; ===========================================================================
000116E2                            
000116E2                            Obj59_Action:				; XREF: Obj59_Index
000116E2 7200                       		moveq	#0,d1
000116E4 1228 0019                  		move.b	$19(a0),d1
000116E8 4EB9 0000 8070             		jsr	(ExitPlatform).l
000116EE 3F28 0008                  		move.w	8(a0),-(sp)
000116F2 6100 0000                  		bsr.w	Obj59_Types
000116F6 341F                       		move.w	(sp)+,d2
000116F8 4A10                       		tst.b	0(a0)
000116FA 6700                       		beq.s	locret_10BD4
000116FC 4EF9 0000 85DA             		jmp	(MvSonicOnPtfm2).l
00011702                            ; ===========================================================================
00011702                            
00011702                            locret_10BD4:
00011702 4E75                       		rts	
00011704                            ; ===========================================================================
00011704                            
00011704                            Obj59_Types:
00011704 7000                       		moveq	#0,d0
00011706 1028 0028                  		move.b	$28(a0),d0
0001170A 0240 000F                  		andi.w	#$F,d0
0001170E D040                       		add.w	d0,d0
00011710 323B 0000                  		move.w	Obj59_TypeIndex(pc,d0.w),d1
00011714 4EFB 1000                  		jmp	Obj59_TypeIndex(pc,d1.w)
00011718                            ; ===========================================================================
00011718 0000 0000                  Obj59_TypeIndex:dc.w Obj59_Type00-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
0001171C 0000 0000                  		dc.w Obj59_Type02-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
00011720 0000 0000                  		dc.w Obj59_Type04-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
00011724 0000 0000                  		dc.w Obj59_Type06-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
00011728 0000 0000                  		dc.w Obj59_Type08-Obj59_TypeIndex, Obj59_Type09-Obj59_TypeIndex
0001172C                            ; ===========================================================================
0001172C                            
0001172C                            Obj59_Type00:				; XREF: Obj59_TypeIndex
0001172C 4E75                       		rts	
0001172E                            ; ===========================================================================
0001172E                            
0001172E                            Obj59_Type01:				; XREF: Obj59_TypeIndex
0001172E 0C28 0004 0024             		cmpi.b	#4,$24(a0)	; check	if Sonic is standing on	the object
00011734 6600                       		bne.s	locret_10C0C
00011736 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
0001173A                            
0001173A                            locret_10C0C:
0001173A 4E75                       		rts	
0001173C                            ; ===========================================================================
0001173C                            
0001173C                            Obj59_Type02:				; XREF: Obj59_TypeIndex
0001173C 6100 0000                  		bsr.w	Obj59_Move
00011740 3028 0034                  		move.w	$34(a0),d0
00011744 4440                       		neg.w	d0
00011746 D068 0030                  		add.w	$30(a0),d0
0001174A 3140 000C                  		move.w	d0,$C(a0)
0001174E 4E75                       		rts	
00011750                            ; ===========================================================================
00011750                            
00011750                            Obj59_Type04:				; XREF: Obj59_TypeIndex
00011750 6100 0000                  		bsr.w	Obj59_Move
00011754 3028 0034                  		move.w	$34(a0),d0
00011758 D068 0030                  		add.w	$30(a0),d0
0001175C 3140 000C                  		move.w	d0,$C(a0)
00011760 4E75                       		rts	
00011762                            ; ===========================================================================
00011762                            
00011762                            Obj59_Type06:				; XREF: Obj59_TypeIndex
00011762 6100 0000                  		bsr.w	Obj59_Move
00011766 3028 0034                  		move.w	$34(a0),d0
0001176A E240                       		asr.w	#1,d0
0001176C 4440                       		neg.w	d0
0001176E D068 0030                  		add.w	$30(a0),d0
00011772 3140 000C                  		move.w	d0,$C(a0)
00011776 3028 0034                  		move.w	$34(a0),d0
0001177A D068 0032                  		add.w	$32(a0),d0
0001177E 3140 0008                  		move.w	d0,8(a0)
00011782 4E75                       		rts	
00011784                            ; ===========================================================================
00011784                            
00011784                            Obj59_Type08:				; XREF: Obj59_TypeIndex
00011784 6100 0000                  		bsr.w	Obj59_Move
00011788 3028 0034                  		move.w	$34(a0),d0
0001178C E240                       		asr.w	#1,d0
0001178E D068 0030                  		add.w	$30(a0),d0
00011792 3140 000C                  		move.w	d0,$C(a0)
00011796 3028 0034                  		move.w	$34(a0),d0
0001179A 4440                       		neg.w	d0
0001179C D068 0032                  		add.w	$32(a0),d0
000117A0 3140 0008                  		move.w	d0,8(a0)
000117A4 4E75                       		rts	
000117A6                            ; ===========================================================================
000117A6                            
000117A6                            Obj59_Type09:				; XREF: Obj59_TypeIndex
000117A6 6100 0000                  		bsr.w	Obj59_Move
000117AA 3028 0034                  		move.w	$34(a0),d0
000117AE 4440                       		neg.w	d0
000117B0 D068 0030                  		add.w	$30(a0),d0
000117B4 3140 000C                  		move.w	d0,$C(a0)
000117B8 4A28 0028                  		tst.b	$28(a0)
000117BC 6700 0000                  		beq.w	loc_10C94
000117C0 4E75                       		rts	
000117C2                            ; ===========================================================================
000117C2                            
000117C2                            loc_10C94:
000117C2 0828 0003 0022             		btst	#3,$22(a0)
000117C8 6700                       		beq.s	Obj59_Delete
000117CA 08E9 0001 0022             		bset	#1,$22(a1)
000117D0 08A9 0003 0022             		bclr	#3,$22(a1)
000117D6 137C 0002 0024             		move.b	#2,$24(a1)
000117DC                            
000117DC                            Obj59_Delete:
000117DC 6000 C968                  		bra.w	DeleteObject
000117E0                            
000117E0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000117E0                            
000117E0                            
000117E0                            Obj59_Move:				; XREF: Obj59_Type02; et al
000117E0 3028 0038                  		move.w	$38(a0),d0
000117E4 4A28 003A                  		tst.b	$3A(a0)
000117E8 6600                       		bne.s	loc_10CC8
000117EA 0C40 0800                  		cmpi.w	#$800,d0
000117EE 6400                       		bcc.s	loc_10CD0
000117F0 0640 0010                  		addi.w	#$10,d0
000117F4 6000                       		bra.s	loc_10CD0
000117F6                            ; ===========================================================================
000117F6                            
000117F6                            loc_10CC8:
000117F6 4A40                       		tst.w	d0
000117F8 6700                       		beq.s	loc_10CD0
000117FA 0440 0010                  		subi.w	#$10,d0
000117FE                            
000117FE                            loc_10CD0:
000117FE 3140 0038                  		move.w	d0,$38(a0)
00011802 48C0                       		ext.l	d0
00011804 E180                       		asl.l	#8,d0
00011806 D0A8 0034                  		add.l	$34(a0),d0
0001180A 2140 0034                  		move.l	d0,$34(a0)
0001180E 4840                       		swap	d0
00011810 3428 003C                  		move.w	$3C(a0),d2
00011814 B042                       		cmp.w	d2,d0
00011816 6300                       		bls.s	loc_10CF0
00011818 117C 0001 003A             		move.b	#1,$3A(a0)
0001181E                            
0001181E                            loc_10CF0:
0001181E D442                       		add.w	d2,d2
00011820 B042                       		cmp.w	d2,d0
00011822 6600                       		bne.s	locret_10CFA
00011824 4228 0028                  		clr.b	$28(a0)
00011828                            
00011828                            locret_10CFA:
00011828 4E75                       		rts	
0001182A                            ; End of function Obj59_Move
0001182A                            
0001182A                            ; ===========================================================================
0001182A                            
0001182A                            Obj59_MakeMulti:			; XREF: Obj59_Index
0001182A 5368 003C                  		subq.w	#1,$3C(a0)
0001182E 6600                       		bne.s	Obj59_ChkDel
00011830 3168 003E 003C             		move.w	$3E(a0),$3C(a0)
00011836 6100 CD68                  		bsr.w	SingleObjLoad
0001183A 6600                       		bne.s	Obj59_ChkDel
0001183C 12BC 0059                  		move.b	#$59,0(a1)	; duplicate the	object
00011840 3368 0008 0008             		move.w	8(a0),8(a1)
00011846 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001184C 137C 000E 0028             		move.b	#$E,$28(a1)
00011852                            
00011852                            Obj59_ChkDel:
00011852 588F                       		addq.l	#4,sp
00011854 3028 0008                  		move.w	8(a0),d0
00011858 0240 FF80                  		andi.w	#$FF80,d0
0001185C 3238 F700                  		move.w	($FFFFF700).w,d1
00011860 0441 0080                  		subi.w	#$80,d1
00011864 0241 FF80                  		andi.w	#$FF80,d1
00011868 9041                       		sub.w	d1,d0
0001186A 0C40 0280                  		cmpi.w	#$280,d0
0001186E 6200 C8D6                  		bhi.w	DeleteObject
00011872 4E75                       		rts	
00011874                            ; ===========================================================================
00011874                            ; ---------------------------------------------------------------------------
00011874                            ; Sprite mappings - platforms that move	when you stand on them (SLZ)
00011874                            ; ---------------------------------------------------------------------------
00011874                            Map_obj59:
00011874                            	include "_maps\obj59.asm"
00011874                            ; ---------------------------------------------------------------------------
00011874                            ; Sprite mappings - platforms that move	when you stand on them (SLZ)
00011874                            ; ---------------------------------------------------------------------------
00011874 0000                       		dc.w byte_10D4A-Map_obj59
00011876 03                         byte_10D4A:	dc.b 3
00011877 F80F 0041 D8               		dc.b $F8, $F, 0, $41, $D8
0001187C F80F 0041 F8               		dc.b $F8, $F, 0, $41, $F8
00011881 F807 0041 18               		dc.b $F8, 7, 0,	$41, $18
00011886                            		even
00011886                            		even
00011886                            
00011886                            ; ===========================================================================
00011886                            ; ---------------------------------------------------------------------------
00011886                            ; Object 5A - platforms	moving in circles (SLZ)
00011886                            ; ---------------------------------------------------------------------------
00011886                            
00011886                            Obj5A:					; XREF: Obj_Index
00011886 7000                       		moveq	#0,d0
00011888 1028 0024                  		move.b	$24(a0),d0
0001188C 323B 0000                  		move.w	Obj5A_Index(pc,d0.w),d1
00011890 4EBB 1000                  		jsr	Obj5A_Index(pc,d1.w)
00011894 3028 0032                  		move.w	$32(a0),d0
00011898 0240 FF80                  		andi.w	#$FF80,d0
0001189C 3238 F700                  		move.w	($FFFFF700).w,d1
000118A0 0441 0080                  		subi.w	#$80,d1
000118A4 0241 FF80                  		andi.w	#$FF80,d1
000118A8 9041                       		sub.w	d1,d0
000118AA 0C40 0280                  		cmpi.w	#$280,d0
000118AE 6200 C896                  		bhi.w	DeleteObject
000118B2 6000 C856                  		bra.w	DisplaySprite
000118B6                            ; ===========================================================================
000118B6 0000                       Obj5A_Index:	dc.w Obj5A_Main-Obj5A_Index
000118B8 0000                       		dc.w Obj5A_Platform-Obj5A_Index
000118BA 0000                       		dc.w Obj5A_Action-Obj5A_Index
000118BC                            ; ===========================================================================
000118BC                            
000118BC                            Obj5A_Main:				; XREF: Obj5A_Index
000118BC 5428 0024                  		addq.b	#2,$24(a0)
000118C0 217C 0000 0000 0004        		move.l	#Map_obj5A,4(a0)
000118C8 317C 4000 0002             		move.w	#$4000,2(a0)
000118CE 117C 0004 0001             		move.b	#4,1(a0)
000118D4 117C 0004 0018             		move.b	#4,$18(a0)
000118DA 117C 0018 0019             		move.b	#$18,$19(a0)
000118E0 3168 0008 0032             		move.w	8(a0),$32(a0)
000118E6 3168 000C 0030             		move.w	$C(a0),$30(a0)
000118EC                            
000118EC                            Obj5A_Platform:				; XREF: Obj5A_Index
000118EC 7200                       		moveq	#0,d1
000118EE 1228 0019                  		move.b	$19(a0),d1
000118F2 4EB9 0000 7EFC             		jsr	(PlatformObject).l
000118F8 6000 0000                  		bra.w	Obj5A_Types
000118FC                            ; ===========================================================================
000118FC                            
000118FC                            Obj5A_Action:				; XREF: Obj5A_Index
000118FC 7200                       		moveq	#0,d1
000118FE 1228 0019                  		move.b	$19(a0),d1
00011902 4EB9 0000 8070             		jsr	(ExitPlatform).l
00011908 3F28 0008                  		move.w	8(a0),-(sp)
0001190C 6100 0000                  		bsr.w	Obj5A_Types
00011910 341F                       		move.w	(sp)+,d2
00011912 4EF9 0000 85DA             		jmp	(MvSonicOnPtfm2).l
00011918                            ; ===========================================================================
00011918                            
00011918                            Obj5A_Types:
00011918 7000                       		moveq	#0,d0
0001191A 1028 0028                  		move.b	$28(a0),d0
0001191E 0240 000C                  		andi.w	#$C,d0
00011922 E248                       		lsr.w	#1,d0
00011924 323B 0000                  		move.w	Obj5A_TypeIndex(pc,d0.w),d1
00011928 4EFB 1000                  		jmp	Obj5A_TypeIndex(pc,d1.w)
0001192C                            ; ===========================================================================
0001192C 0000                       Obj5A_TypeIndex:dc.w Obj5A_Type00-Obj5A_TypeIndex
0001192E 0000                       		dc.w Obj5A_Type04-Obj5A_TypeIndex
00011930                            ; ===========================================================================
00011930                            
00011930                            Obj5A_Type00:				; XREF: Obj5A_TypeIndex
00011930 1238 FE80                  		move.b	($FFFFFE80).w,d1
00011934 0401 0050                  		subi.b	#$50,d1
00011938 4881                       		ext.w	d1
0001193A 1438 FE84                  		move.b	($FFFFFE84).w,d2
0001193E 0402 0050                  		subi.b	#$50,d2
00011942 4882                       		ext.w	d2
00011944 0828 0000 0028             		btst	#0,$28(a0)
0001194A 6700                       		beq.s	loc_10E24
0001194C 4441                       		neg.w	d1
0001194E 4442                       		neg.w	d2
00011950                            
00011950                            loc_10E24:
00011950 0828 0001 0028             		btst	#1,$28(a0)
00011956 6700                       		beq.s	loc_10E30
00011958 4441                       		neg.w	d1
0001195A C342                       		exg	d1,d2
0001195C                            
0001195C                            loc_10E30:
0001195C D268 0032                  		add.w	$32(a0),d1
00011960 3141 0008                  		move.w	d1,8(a0)
00011964 D468 0030                  		add.w	$30(a0),d2
00011968 3142 000C                  		move.w	d2,$C(a0)
0001196C 4E75                       		rts	
0001196E                            ; ===========================================================================
0001196E                            
0001196E                            Obj5A_Type04:				; XREF: Obj5A_TypeIndex
0001196E 1238 FE80                  		move.b	($FFFFFE80).w,d1
00011972 0401 0050                  		subi.b	#$50,d1
00011976 4881                       		ext.w	d1
00011978 1438 FE84                  		move.b	($FFFFFE84).w,d2
0001197C 0402 0050                  		subi.b	#$50,d2
00011980 4882                       		ext.w	d2
00011982 0828 0000 0028             		btst	#0,$28(a0)
00011988 6700                       		beq.s	loc_10E62
0001198A 4441                       		neg.w	d1
0001198C 4442                       		neg.w	d2
0001198E                            
0001198E                            loc_10E62:
0001198E 0828 0001 0028             		btst	#1,$28(a0)
00011994 6700                       		beq.s	loc_10E6E
00011996 4441                       		neg.w	d1
00011998 C342                       		exg	d1,d2
0001199A                            
0001199A                            loc_10E6E:
0001199A 4441                       		neg.w	d1
0001199C D268 0032                  		add.w	$32(a0),d1
000119A0 3141 0008                  		move.w	d1,8(a0)
000119A4 D468 0030                  		add.w	$30(a0),d2
000119A8 3142 000C                  		move.w	d2,$C(a0)
000119AC 4E75                       		rts	
000119AE                            ; ===========================================================================
000119AE                            ; ---------------------------------------------------------------------------
000119AE                            ; Sprite mappings - platforms that move	in circles (SLZ)
000119AE                            ; ---------------------------------------------------------------------------
000119AE                            Map_obj5A:
000119AE                            	include "_maps\obj5A.asm"
000119AE                            ; ---------------------------------------------------------------------------
000119AE                            ; Sprite mappings - platforms that move	in circles (SLZ)
000119AE                            ; ---------------------------------------------------------------------------
000119AE 0000                       		dc.w byte_10E84-Map_obj5A
000119B0 02                         byte_10E84:	dc.b 2
000119B1 F809 0051 E8               		dc.b $F8, 9, 0,	$51, $E8
000119B6 F809 0851 00               		dc.b $F8, 9, 8,	$51, 0
000119BC 00                         		even
000119BC 00                         		even
000119BC                            
000119BC                            ; ===========================================================================
000119BC                            ; ---------------------------------------------------------------------------
000119BC                            ; Object 5B - blocks that form a staircase (SLZ)
000119BC                            ; ---------------------------------------------------------------------------
000119BC                            
000119BC                            Obj5B:					; XREF: Obj_Index
000119BC 7000                       		moveq	#0,d0
000119BE 1028 0024                  		move.b	$24(a0),d0
000119C2 323B 0000                  		move.w	Obj5B_Index(pc,d0.w),d1
000119C6 4EBB 1000                  		jsr	Obj5B_Index(pc,d1.w)
000119CA 3028 0030                  		move.w	$30(a0),d0
000119CE 0240 FF80                  		andi.w	#$FF80,d0
000119D2 3238 F700                  		move.w	($FFFFF700).w,d1
000119D6 0441 0080                  		subi.w	#$80,d1
000119DA 0241 FF80                  		andi.w	#$FF80,d1
000119DE 9041                       		sub.w	d1,d0
000119E0 0C40 0280                  		cmpi.w	#$280,d0
000119E4 6200 C760                  		bhi.w	DeleteObject
000119E8 6000 C720                  		bra.w	DisplaySprite
000119EC                            ; ===========================================================================
000119EC 0000                       Obj5B_Index:	dc.w Obj5B_Main-Obj5B_Index
000119EE 0000                       		dc.w Obj5B_Move-Obj5B_Index
000119F0 0000                       		dc.w Obj5B_Solid-Obj5B_Index
000119F2                            ; ===========================================================================
000119F2                            
000119F2                            Obj5B_Main:				; XREF: Obj5B_Index
000119F2 5428 0024                  		addq.b	#2,$24(a0)
000119F6 7638                       		moveq	#$38,d3
000119F8 7801                       		moveq	#1,d4
000119FA 0828 0000 0022             		btst	#0,$22(a0)
00011A00 6700                       		beq.s	loc_10EDA
00011A02 763B                       		moveq	#$3B,d3
00011A04 78FF                       		moveq	#-1,d4
00011A06                            
00011A06                            loc_10EDA:
00011A06 3428 0008                  		move.w	8(a0),d2
00011A0A 2248                       		movea.l	a0,a1
00011A0C 7203                       		moveq	#3,d1
00011A0E 6000                       		bra.s	Obj5B_MakeBlocks
00011A10                            ; ===========================================================================
00011A10                            
00011A10                            Obj5B_Loop:
00011A10 6100 CBA4                  		bsr.w	SingleObjLoad2
00011A14 6600 0000                  		bne.w	Obj5B_Move
00011A18 137C 0004 0024             		move.b	#4,$24(a1)
00011A1E                            
00011A1E                            Obj5B_MakeBlocks:			; XREF: Obj5B_Main
00011A1E 12BC 005B                  		move.b	#$5B,0(a1)	; load another block object
00011A22 237C 0000 0000 0004        		move.l	#Map_obj5B,4(a1)
00011A2A 337C 4000 0002             		move.w	#$4000,2(a1)
00011A30 137C 0004 0001             		move.b	#4,1(a1)
00011A36 137C 0003 0018             		move.b	#3,$18(a1)
00011A3C 137C 0010 0019             		move.b	#$10,$19(a1)
00011A42 1368 0028 0028             		move.b	$28(a0),$28(a1)
00011A48 3342 0008                  		move.w	d2,8(a1)
00011A4C 3368 000C 000C             		move.w	$C(a0),$C(a1)
00011A52 3368 0008 0030             		move.w	8(a0),$30(a1)
00011A58 3369 000C 0032             		move.w	$C(a1),$32(a1)
00011A5E 0642 0020                  		addi.w	#$20,d2
00011A62 1343 0037                  		move.b	d3,$37(a1)
00011A66 2348 003C                  		move.l	a0,$3C(a1)
00011A6A D604                       		add.b	d4,d3
00011A6C 51C9 FFA2                  		dbf	d1,Obj5B_Loop	; repeat sequence 3 times
00011A70                            
00011A70                            Obj5B_Move:				; XREF: Obj5B_Index
00011A70 7000                       		moveq	#0,d0
00011A72 1028 0028                  		move.b	$28(a0),d0
00011A76 0240 0007                  		andi.w	#7,d0
00011A7A D040                       		add.w	d0,d0
00011A7C 323B 0000                  		move.w	Obj5B_TypeIndex(pc,d0.w),d1
00011A80 4EBB 1000                  		jsr	Obj5B_TypeIndex(pc,d1.w)
00011A84                            
00011A84                            Obj5B_Solid:				; XREF: Obj5B_Index
00011A84 2468 003C                  		movea.l	$3C(a0),a2
00011A88 7000                       		moveq	#0,d0
00011A8A 1028 0037                  		move.b	$37(a0),d0
00011A8E 1032 0000                  		move.b	(a2,d0.w),d0
00011A92 D068 0032                  		add.w	$32(a0),d0
00011A96 3140 000C                  		move.w	d0,$C(a0)
00011A9A 7200                       		moveq	#0,d1
00011A9C 1228 0019                  		move.b	$19(a0),d1
00011AA0 0641 000B                  		addi.w	#$B,d1
00011AA4 343C 0010                  		move.w	#$10,d2
00011AA8 363C 0011                  		move.w	#$11,d3
00011AAC 3828 0008                  		move.w	8(a0),d4
00011AB0 6100 EA42                  		bsr.w	SolidObject
00011AB4 4A04                       		tst.b	d4
00011AB6 6A00                       		bpl.s	loc_10F92
00011AB8 1544 0036                  		move.b	d4,$36(a2)
00011ABC                            
00011ABC                            loc_10F92:
00011ABC 0828 0003 0022             		btst	#3,$22(a0)
00011AC2 6700                       		beq.s	locret_10FA0
00011AC4 157C 0001 0036             		move.b	#1,$36(a2)
00011ACA                            
00011ACA                            locret_10FA0:
00011ACA 4E75                       		rts	
00011ACC                            ; ===========================================================================
00011ACC 0000                       Obj5B_TypeIndex:dc.w Obj5B_Type00-Obj5B_TypeIndex
00011ACE 0000                       		dc.w Obj5B_Type01-Obj5B_TypeIndex
00011AD0 0000                       		dc.w Obj5B_Type02-Obj5B_TypeIndex
00011AD2 0000                       		dc.w Obj5B_Type01-Obj5B_TypeIndex
00011AD4                            ; ===========================================================================
00011AD4                            
00011AD4                            Obj5B_Type00:				; XREF: Obj5B_TypeIndex
00011AD4 4A68 0034                  		tst.w	$34(a0)
00011AD8 6600                       		bne.s	loc_10FC0
00011ADA 0C28 0001 0036             		cmpi.b	#1,$36(a0)
00011AE0 6600                       		bne.s	locret_10FBE
00011AE2 317C 001E 0034             		move.w	#$1E,$34(a0)
00011AE8                            
00011AE8                            locret_10FBE:
00011AE8 4E75                       		rts	
00011AEA                            ; ===========================================================================
00011AEA                            
00011AEA                            loc_10FC0:
00011AEA 5368 0034                  		subq.w	#1,$34(a0)
00011AEE 66F8                       		bne.s	locret_10FBE
00011AF0 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
00011AF4 4E75                       		rts	
00011AF6                            ; ===========================================================================
00011AF6                            
00011AF6                            Obj5B_Type02:				; XREF: Obj5B_TypeIndex
00011AF6 4A68 0034                  		tst.w	$34(a0)
00011AFA 6600                       		bne.s	loc_10FE0
00011AFC 4A28 0036                  		tst.b	$36(a0)
00011B00 6A00                       		bpl.s	locret_10FDE
00011B02 317C 003C 0034             		move.w	#$3C,$34(a0)
00011B08                            
00011B08                            locret_10FDE:
00011B08 4E75                       		rts	
00011B0A                            ; ===========================================================================
00011B0A                            
00011B0A                            loc_10FE0:
00011B0A 5368 0034                  		subq.w	#1,$34(a0)
00011B0E 6600                       		bne.s	loc_10FEC
00011B10 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
00011B14 4E75                       		rts	
00011B16                            ; ===========================================================================
00011B16                            
00011B16                            loc_10FEC:
00011B16 43E8 0038                  		lea	$38(a0),a1
00011B1A 3028 0034                  		move.w	$34(a0),d0
00011B1E E408                       		lsr.b	#2,d0
00011B20 0200 0001                  		andi.b	#1,d0
00011B24 12C0                       		move.b	d0,(a1)+
00011B26 0A00 0001                  		eori.b	#1,d0
00011B2A 12C0                       		move.b	d0,(a1)+
00011B2C 0A00 0001                  		eori.b	#1,d0
00011B30 12C0                       		move.b	d0,(a1)+
00011B32 0A00 0001                  		eori.b	#1,d0
00011B36 12C0                       		move.b	d0,(a1)+
00011B38 4E75                       		rts	
00011B3A                            ; ===========================================================================
00011B3A                            
00011B3A                            Obj5B_Type01:				; XREF: Obj5B_TypeIndex
00011B3A 43E8 0038                  		lea	$38(a0),a1
00011B3E 0C11 0080                  		cmpi.b	#$80,(a1)
00011B42 6700                       		beq.s	locret_11038
00011B44 5211                       		addq.b	#1,(a1)
00011B46 7200                       		moveq	#0,d1
00011B48 1219                       		move.b	(a1)+,d1
00011B4A 4841                       		swap	d1
00011B4C E289                       		lsr.l	#1,d1
00011B4E 2401                       		move.l	d1,d2
00011B50 E289                       		lsr.l	#1,d1
00011B52 2601                       		move.l	d1,d3
00011B54 D682                       		add.l	d2,d3
00011B56 4841                       		swap	d1
00011B58 4842                       		swap	d2
00011B5A 4843                       		swap	d3
00011B5C 12C3                       		move.b	d3,(a1)+
00011B5E 12C2                       		move.b	d2,(a1)+
00011B60 12C1                       		move.b	d1,(a1)+
00011B62                            
00011B62                            locret_11038:
00011B62 4E75                       		rts	
00011B64 4E75                       		rts	
00011B66                            ; ===========================================================================
00011B66                            ; ---------------------------------------------------------------------------
00011B66                            ; Sprite mappings - blocks that	form a staircase (SLZ)
00011B66                            ; ---------------------------------------------------------------------------
00011B66                            Map_obj5B:
00011B66                            	include "_maps\obj5B.asm"
00011B66                            ; ---------------------------------------------------------------------------
00011B66                            ; Sprite mappings - blocks that	form a staircase (SLZ)
00011B66                            ; ---------------------------------------------------------------------------
00011B66 0000                       		dc.w byte_1103E-Map_obj5B
00011B68 01                         byte_1103E:	dc.b 1
00011B69 F00F 0021 F0               		dc.b $F0, $F, 0, $21, $F0
00011B6E                            		even
00011B6E                            		even
00011B6E                            
00011B6E                            ; ===========================================================================
00011B6E                            ; ---------------------------------------------------------------------------
00011B6E                            ; Object 5C - metal girders in foreground (SLZ)
00011B6E                            ; ---------------------------------------------------------------------------
00011B6E                            
00011B6E                            Obj5C:					; XREF: Obj_Index
00011B6E 7000                       		moveq	#0,d0
00011B70 1028 0024                  		move.b	$24(a0),d0
00011B74 323B 0000                  		move.w	Obj5C_Index(pc,d0.w),d1
00011B78 4EFB 1000                  		jmp	Obj5C_Index(pc,d1.w)
00011B7C                            ; ===========================================================================
00011B7C 0000                       Obj5C_Index:	dc.w Obj5C_Main-Obj5C_Index
00011B7E 0000                       		dc.w Obj5C_Display-Obj5C_Index
00011B80                            ; ===========================================================================
00011B80                            
00011B80                            Obj5C_Main:				; XREF: Obj5C_Index
00011B80 5428 0024                  		addq.b	#2,$24(a0)
00011B84 217C 0000 0000 0004        		move.l	#Map_obj5C,4(a0)
00011B8C 317C 83CC 0002             		move.w	#$83CC,2(a0)
00011B92 117C 0010 0019             		move.b	#$10,$19(a0)
00011B98                            
00011B98                            Obj5C_Display:				; XREF: Obj5C_Index
00011B98 2238 F700                  		move.l	($FFFFF700).w,d1
00011B9C D281                       		add.l	d1,d1
00011B9E 4841                       		swap	d1
00011BA0 4441                       		neg.w	d1
00011BA2 3141 0008                  		move.w	d1,8(a0)
00011BA6 2238 F704                  		move.l	($FFFFF704).w,d1
00011BAA D281                       		add.l	d1,d1
00011BAC 4841                       		swap	d1
00011BAE 0241 003F                  		andi.w	#$3F,d1
00011BB2 4441                       		neg.w	d1
00011BB4 0641 0100                  		addi.w	#$100,d1
00011BB8 3141 000A                  		move.w	d1,$A(a0)
00011BBC 6000 C54C                  		bra.w	DisplaySprite
00011BC0                            ; ===========================================================================
00011BC0                            ; ---------------------------------------------------------------------------
00011BC0                            ; Sprite mappings - metal girders in foreground	(SLZ)
00011BC0                            ; ---------------------------------------------------------------------------
00011BC0                            Map_obj5C:
00011BC0                            	include "_maps\obj5C.asm"
00011BC0                            ; ---------------------------------------------------------------------------
00011BC0                            ; Sprite mappings - metal girders in foreground	(SLZ)
00011BC0                            ; ---------------------------------------------------------------------------
00011BC0 0000                       		dc.w byte_11098-Map_obj5C
00011BC2 09                         byte_11098:	dc.b 9
00011BC3 800F 0000 F0               		dc.b $80, $F, 0, 0, $F0
00011BC8 A00F 1000 F0               		dc.b $A0, $F, $10, 0, $F0
00011BCD C00F 0000 F0               		dc.b $C0, $F, 0, 0, $F0
00011BD2 E00F 1000 F0               		dc.b $E0, $F, $10, 0, $F0
00011BD7 000F 0000 F0               		dc.b 0,	$F, 0, 0, $F0
00011BDC 200F 1000 F0               		dc.b $20, $F, $10, 0, $F0
00011BE1 400F 0000 F0               		dc.b $40, $F, 0, 0, $F0
00011BE6 600F 1000 F0               		dc.b $60, $F, $10, 0, $F0
00011BEB 7F0F 0000 F0               		dc.b $7F, $F, 0, 0, $F0
00011BF0                            		even
00011BF0                            		even
00011BF0                            
00011BF0                            ; ===========================================================================
00011BF0                            ; ---------------------------------------------------------------------------
00011BF0                            ; Object 1B - water surface (LZ)
00011BF0                            ; ---------------------------------------------------------------------------
00011BF0                            
00011BF0                            Obj1B:					; XREF: Obj_Index
00011BF0 7000                       		moveq	#0,d0
00011BF2 1028 0024                  		move.b	$24(a0),d0
00011BF6 323B 0000                  		move.w	Obj1B_Index(pc,d0.w),d1
00011BFA 4EFB 1000                  		jmp	Obj1B_Index(pc,d1.w)
00011BFE                            ; ===========================================================================
00011BFE 0000                       Obj1B_Index:	dc.w Obj1B_Main-Obj1B_Index
00011C00 0000                       		dc.w Obj1B_Action-Obj1B_Index
00011C02                            ; ===========================================================================
00011C02                            
00011C02                            Obj1B_Main:				; XREF: Obj1B_Index
00011C02 5428 0024                  		addq.b	#2,$24(a0)
00011C06 217C 0000 0000 0004        		move.l	#Map_obj1B,4(a0)
00011C0E 317C C300 0002             		move.w	#$C300,2(a0)
00011C14 117C 0004 0001             		move.b	#4,1(a0)
00011C1A 117C 0080 0019             		move.b	#$80,$19(a0)
00011C20 3168 0008 0030             		move.w	8(a0),$30(a0)
00011C26                            
00011C26                            Obj1B_Action:				; XREF: Obj1B_Index
00011C26 3238 F700                  		move.w	($FFFFF700).w,d1
00011C2A 0241 FFE0                  		andi.w	#$FFE0,d1
00011C2E D268 0030                  		add.w	$30(a0),d1
00011C32 0838 0000 FE05             		btst	#0,($FFFFFE05).w
00011C38 6700                       		beq.s	loc_11114
00011C3A 0641 0020                  		addi.w	#$20,d1
00011C3E                            
00011C3E                            loc_11114:
00011C3E 3141 0008                  		move.w	d1,8(a0)	; match	obj x-position to screen position
00011C42 3238 F646                  		move.w	($FFFFF646).w,d1
00011C46 3141 000C                  		move.w	d1,$C(a0)	; match	obj y-position to water	height
00011C4A 4A28 0032                  		tst.b	$32(a0)
00011C4E 6600                       		bne.s	Obj1B_Animate
00011C50 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
00011C56 6700                       		beq.s	loc_1114A	; if not, branch
00011C58 5628 001A                  		addq.b	#3,$1A(a0)	; use different	frames
00011C5C 117C 0001 0032             		move.b	#1,$32(a0)	; stop animation
00011C62 6000                       		bra.s	Obj1B_Display
00011C64                            ; ===========================================================================
00011C64                            
00011C64                            Obj1B_Animate:				; XREF: loc_11114
00011C64 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
00011C68 6600                       		bne.s	Obj1B_Display	; if yes, branch
00011C6A 117C 0000 0032             		move.b	#0,$32(a0)	; resume animation
00011C70 5728 001A                  		subq.b	#3,$1A(a0)	; use normal frames
00011C74                            
00011C74                            loc_1114A:				; XREF: loc_11114
00011C74 5328 001E                  		subq.b	#1,$1E(a0)
00011C78 6A00                       		bpl.s	Obj1B_Display
00011C7A 117C 0007 001E             		move.b	#7,$1E(a0)
00011C80 5228 001A                  		addq.b	#1,$1A(a0)
00011C84 0C28 0003 001A             		cmpi.b	#3,$1A(a0)
00011C8A 6500                       		bcs.s	Obj1B_Display
00011C8C 117C 0000 001A             		move.b	#0,$1A(a0)
00011C92                            
00011C92                            Obj1B_Display:
00011C92 6000 C476                  		bra.w	DisplaySprite
00011C96                            ; ===========================================================================
00011C96                            ; ---------------------------------------------------------------------------
00011C96                            ; Sprite mappings - water surface (LZ)
00011C96                            ; ---------------------------------------------------------------------------
00011C96                            Map_obj1B:
00011C96                            	include "_maps\obj1B.asm"
00011C96                            ; ---------------------------------------------------------------------------
00011C96                            ; Sprite mappings - water surface (LZ)
00011C96                            ; ---------------------------------------------------------------------------
00011C96 0000 0000                  		dc.w byte_11178-Map_obj1B, byte_11188-Map_obj1B
00011C9A 0000 0000                  		dc.w byte_11198-Map_obj1B, byte_111A8-Map_obj1B
00011C9E 0000 0000                  		dc.w byte_111C7-Map_obj1B, byte_111E6-Map_obj1B
00011CA2 03                         byte_11178:	dc.b 3
00011CA3 FD0D 0000 A0               		dc.b $FD, $D, 0, 0, $A0
00011CA8 FD0D 0000 E0               		dc.b $FD, $D, 0, 0, $E0
00011CAD FD0D 0000 20               		dc.b $FD, $D, 0, 0, $20
00011CB2 03                         byte_11188:	dc.b 3
00011CB3 FD0D 0008 A0               		dc.b $FD, $D, 0, 8, $A0
00011CB8 FD0D 0008 E0               		dc.b $FD, $D, 0, 8, $E0
00011CBD FD0D 0008 20               		dc.b $FD, $D, 0, 8, $20
00011CC2 03                         byte_11198:	dc.b 3
00011CC3 FD0D 0800 A0               		dc.b $FD, $D, 8, 0, $A0
00011CC8 FD0D 0800 E0               		dc.b $FD, $D, 8, 0, $E0
00011CCD FD0D 0800 20               		dc.b $FD, $D, 8, 0, $20
00011CD2 06                         byte_111A8:	dc.b 6
00011CD3 FD0D 0000 A0               		dc.b $FD, $D, 0, 0, $A0
00011CD8 FD0D 0000 C0               		dc.b $FD, $D, 0, 0, $C0
00011CDD FD0D 0000 E0               		dc.b $FD, $D, 0, 0, $E0
00011CE2 FD0D 0000 00               		dc.b $FD, $D, 0, 0, 0
00011CE7 FD0D 0000 20               		dc.b $FD, $D, 0, 0, $20
00011CEC FD0D 0000 40               		dc.b $FD, $D, 0, 0, $40
00011CF1 06                         byte_111C7:	dc.b 6
00011CF2 FD0D 0008 A0               		dc.b $FD, $D, 0, 8, $A0
00011CF7 FD0D 0008 C0               		dc.b $FD, $D, 0, 8, $C0
00011CFC FD0D 0008 E0               		dc.b $FD, $D, 0, 8, $E0
00011D01 FD0D 0008 00               		dc.b $FD, $D, 0, 8, 0
00011D06 FD0D 0008 20               		dc.b $FD, $D, 0, 8, $20
00011D0B FD0D 0008 40               		dc.b $FD, $D, 0, 8, $40
00011D10 06                         byte_111E6:	dc.b 6
00011D11 FD0D 0800 A0               		dc.b $FD, $D, 8, 0, $A0
00011D16 FD0D 0800 C0               		dc.b $FD, $D, 8, 0, $C0
00011D1B FD0D 0800 E0               		dc.b $FD, $D, 8, 0, $E0
00011D20 FD0D 0800 00               		dc.b $FD, $D, 8, 0, 0
00011D25 FD0D 0800 20               		dc.b $FD, $D, 8, 0, $20
00011D2A FD0D 0800 40               		dc.b $FD, $D, 8, 0, $40
00011D30 00                         		even
00011D30 00                         		even
00011D30                            
00011D30                            ; ===========================================================================
00011D30                            ; ---------------------------------------------------------------------------
00011D30                            ; Object 0B - pole that	breaks (LZ)
00011D30                            ; ---------------------------------------------------------------------------
00011D30                            
00011D30                            Obj0B:					; XREF: Obj_Index
00011D30 7000                       		moveq	#0,d0
00011D32 1028 0024                  		move.b	$24(a0),d0
00011D36 323B 0000                  		move.w	Obj0B_Index(pc,d0.w),d1
00011D3A 4EFB 1000                  		jmp	Obj0B_Index(pc,d1.w)
00011D3E                            ; ===========================================================================
00011D3E 0000                       Obj0B_Index:	dc.w Obj0B_Main-Obj0B_Index
00011D40 0000                       		dc.w Obj0B_Action-Obj0B_Index
00011D42 0000                       		dc.w Obj0B_Display-Obj0B_Index
00011D44                            ; ===========================================================================
00011D44                            
00011D44                            Obj0B_Main:				; XREF: Obj0B_Index
00011D44 5428 0024                  		addq.b	#2,$24(a0)
00011D48 217C 0000 0000 0004        		move.l	#Map_obj0B,4(a0)
00011D50 317C 43DE 0002             		move.w	#$43DE,2(a0)
00011D56 117C 0004 0001             		move.b	#4,1(a0)
00011D5C 117C 0008 0019             		move.b	#8,$19(a0)
00011D62 117C 0004 0018             		move.b	#4,$18(a0)
00011D68 117C 00E1 0020             		move.b	#$E1,$20(a0)
00011D6E 7000                       		moveq	#0,d0
00011D70 1028 0028                  		move.b	$28(a0),d0	; get object type
00011D74 C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 (1 second)
00011D78 3140 0030                  		move.w	d0,$30(a0)	; set breakage time
00011D7C                            
00011D7C                            Obj0B_Action:				; XREF: Obj0B_Index
00011D7C 4A28 0032                  		tst.b	$32(a0)
00011D80 6700                       		beq.s	Obj0B_Grab
00011D82 4A68 0030                  		tst.w	$30(a0)
00011D86 6700                       		beq.s	Obj0B_MoveUp
00011D88 5368 0030                  		subq.w	#1,$30(a0)
00011D8C 6600                       		bne.s	Obj0B_MoveUp
00011D8E 117C 0001 001A             		move.b	#1,$1A(a0)	; break	the pole
00011D94 6000                       		bra.s	Obj0B_Release
00011D96                            ; ===========================================================================
00011D96                            
00011D96                            Obj0B_MoveUp:				; XREF: Obj0B_Action
00011D96 43F8 D000                  		lea	($FFFFD000).w,a1
00011D9A 3028 000C                  		move.w	$C(a0),d0
00011D9E 0440 0018                  		subi.w	#$18,d0
00011DA2 0838 0000 F604             		btst	#0,($FFFFF604).w ; check if "up" is pressed
00011DA8 6700                       		beq.s	Obj0B_MoveDown
00011DAA 5369 000C                  		subq.w	#1,$C(a1)	; move Sonic up
00011DAE B069 000C                  		cmp.w	$C(a1),d0
00011DB2 6500                       		bcs.s	Obj0B_MoveDown
00011DB4 3340 000C                  		move.w	d0,$C(a1)
00011DB8                            
00011DB8                            Obj0B_MoveDown:
00011DB8 0640 0024                  		addi.w	#$24,d0
00011DBC 0838 0001 F604             		btst	#1,($FFFFF604).w ; check if "down" is pressed
00011DC2 6700                       		beq.s	Obj0B_LetGo
00011DC4 5269 000C                  		addq.w	#1,$C(a1)	; move Sonic down
00011DC8 B069 000C                  		cmp.w	$C(a1),d0
00011DCC 6400                       		bcc.s	Obj0B_LetGo
00011DCE 3340 000C                  		move.w	d0,$C(a1)
00011DD2                            
00011DD2                            Obj0B_LetGo:
00011DD2 1038 F603                  		move.b	($FFFFF603).w,d0
00011DD6 0240 0070                  		andi.w	#$70,d0
00011DDA 6700                       		beq.s	Obj0B_Display
00011DDC                            
00011DDC                            Obj0B_Release:				; XREF: Obj0B_Action
00011DDC 4228 0020                  		clr.b	$20(a0)
00011DE0 5428 0024                  		addq.b	#2,$24(a0)
00011DE4 4238 F7C8                  		clr.b	($FFFFF7C8).w
00011DE8 4238 F7C9                  		clr.b	($FFFFF7C9).w
00011DEC 4228 0032                  		clr.b	$32(a0)
00011DF0 6000                       		bra.s	Obj0B_Display
00011DF2                            ; ===========================================================================
00011DF2                            
00011DF2                            Obj0B_Grab:				; XREF: Obj0B_Action
00011DF2 4A28 0021                  		tst.b	$21(a0)		; has Sonic touched the	pole?
00011DF6 6700                       		beq.s	Obj0B_Display	; if not, branch
00011DF8 43F8 D000                  		lea	($FFFFD000).w,a1
00011DFC 3028 0008                  		move.w	8(a0),d0
00011E00 0640 0014                  		addi.w	#$14,d0
00011E04 B069 0008                  		cmp.w	8(a1),d0
00011E08 6400                       		bcc.s	Obj0B_Display
00011E0A 4228 0021                  		clr.b	$21(a0)
00011E0E 0C29 0004 0024             		cmpi.b	#4,$24(a1)
00011E14 6400                       		bcc.s	Obj0B_Display
00011E16 4269 0010                  		clr.w	$10(a1)		; stop Sonic moving
00011E1A 4269 0012                  		clr.w	$12(a1)		; stop Sonic moving
00011E1E 3028 0008                  		move.w	8(a0),d0
00011E22 0640 0014                  		addi.w	#$14,d0
00011E26 3340 0008                  		move.w	d0,8(a1)
00011E2A 08A9 0000 0022             		bclr	#0,$22(a1)
00011E30 137C 0011 001C             		move.b	#$11,$1C(a1)	; set Sonic's animation to "hanging" ($11)
00011E36 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; lock	controls
00011E3C 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w ; disable wind	tunnel
00011E42 117C 0001 0032             		move.b	#1,$32(a0)	; begin	countdown to breakage
00011E48                            
00011E48                            Obj0B_Display:				; XREF: Obj0B_Index
00011E48 6000 E382                  		bra.w	MarkObjGone
00011E4C                            ; ===========================================================================
00011E4C                            ; ---------------------------------------------------------------------------
00011E4C                            ; Sprite mappings - pole that breaks (LZ)
00011E4C                            ; ---------------------------------------------------------------------------
00011E4C                            Map_obj0B:
00011E4C                            	include "_maps\obj0B.asm"
00011E4C                            ; ---------------------------------------------------------------------------
00011E4C                            ; Sprite mappings - pole that breaks (LZ)
00011E4C                            ; ---------------------------------------------------------------------------
00011E4C 0000                       		dc.w byte_11326-Map_obj0B
00011E4E 0000                       		dc.w byte_11331-Map_obj0B
00011E50 02                         byte_11326:	dc.b 2			; normal pole
00011E51 E003 0000 FC               		dc.b $E0, 3, 0,	0, $FC
00011E56 0003 1000 FC               		dc.b 0,	3, $10,	0, $FC
00011E5B 04                         byte_11331:	dc.b 4			; broken pole
00011E5C E001 0000 FC               		dc.b $E0, 1, 0,	0, $FC
00011E61 F005 0004 FC               		dc.b $F0, 5, 0,	4, $FC
00011E66 0005 1004 FC               		dc.b 0,	5, $10,	4, $FC
00011E6B 1001 1000 FC               		dc.b $10, 1, $10, 0, $FC
00011E70                            		even
00011E70                            		even
00011E70                            
00011E70                            ; ===========================================================================
00011E70                            ; ---------------------------------------------------------------------------
00011E70                            ; Object 0C - flapping door (LZ)
00011E70                            ; ---------------------------------------------------------------------------
00011E70                            
00011E70                            Obj0C:					; XREF: Obj_Index
00011E70 7000                       		moveq	#0,d0
00011E72 1028 0024                  		move.b	$24(a0),d0
00011E76 323B 0000                  		move.w	Obj0C_Index(pc,d0.w),d1
00011E7A 4EFB 1000                  		jmp	Obj0C_Index(pc,d1.w)
00011E7E                            ; ===========================================================================
00011E7E 0000                       Obj0C_Index:	dc.w Obj0C_Main-Obj0C_Index
00011E80 0000                       		dc.w Obj0C_OpenClose-Obj0C_Index
00011E82                            ; ===========================================================================
00011E82                            
00011E82                            Obj0C_Main:				; XREF: Obj0C_Index
00011E82 5428 0024                  		addq.b	#2,$24(a0)
00011E86 217C 0000 0000 0004        		move.l	#Map_obj0C,4(a0)
00011E8E 317C 4328 0002             		move.w	#$4328,2(a0)
00011E94 0028 0004 0001             		ori.b	#4,1(a0)
00011E9A 117C 0028 0019             		move.b	#$28,$19(a0)
00011EA0 7000                       		moveq	#0,d0
00011EA2 1028 0028                  		move.b	$28(a0),d0	; get object type
00011EA6 C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 (1 second)
00011EAA 3140 0032                  		move.w	d0,$32(a0)	; set flap delay time
00011EAE                            
00011EAE                            Obj0C_OpenClose:			; XREF: Obj0C_Index
00011EAE 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00011EB2 6A00                       		bpl.s	Obj0C_Solid	; if time remains, branch
00011EB4 3168 0032 0030             		move.w	$32(a0),$30(a0)	; reset	time delay
00011EBA 0868 0000 001C             		bchg	#0,$1C(a0)	; open/close door
00011EC0 4A28 0001                  		tst.b	1(a0)
00011EC4 6A00                       		bpl.s	Obj0C_Solid
00011EC6 303C 00BB                  		move.w	#$BB,d0
00011ECA 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play door sound
00011ED0                            
00011ED0                            Obj0C_Solid:
00011ED0 43F9 0000 0000             		lea	(Ani_obj0C).l,a1
00011ED6 6100 9344                  		bsr.w	AnimateSprite
00011EDA 4238 F7C9                  		clr.b	($FFFFF7C9).w	; enable wind tunnel
00011EDE 4A28 001A                  		tst.b	$1A(a0)		; is the door open?
00011EE2 6600                       		bne.s	Obj0C_Display	; if yes, branch
00011EE4 3038 D008                  		move.w	($FFFFD008).w,d0
00011EE8 B068 0008                  		cmp.w	8(a0),d0	; is Sonic in front of the door?
00011EEC 6400                       		bcc.s	Obj0C_Display	; if yes, branch
00011EEE 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w ; disable wind	tunnel
00011EF4 323C 0013                  		move.w	#$13,d1
00011EF8 343C 0020                  		move.w	#$20,d2
00011EFC 3602                       		move.w	d2,d3
00011EFE 5243                       		addq.w	#1,d3
00011F00 3828 0008                  		move.w	8(a0),d4
00011F04 6100 E5EE                  		bsr.w	SolidObject	; make the door	solid
00011F08                            
00011F08                            Obj0C_Display:
00011F08 6000 E2C2                  		bra.w	MarkObjGone
00011F0C                            ; ===========================================================================
00011F0C                            Ani_obj0C:
00011F0C                            	include "_anim\obj0C.asm"
00011F0C                            ; ---------------------------------------------------------------------------
00011F0C                            ; Animation script - flapping door (LZ)
00011F0C                            ; ---------------------------------------------------------------------------
00011F0C 0000                       		dc.w byte_113E6-Ani_obj0C
00011F0E 0000                       		dc.w byte_113EC-Ani_obj0C
00011F10 0300 0102 FE01             byte_113E6:	dc.b 3,	0, 1, 2, $FE, 1
00011F16 0302 0100 FE01             byte_113EC:	dc.b 3,	2, 1, 0, $FE, 1
00011F1C                            		even
00011F1C                            		even
00011F1C                            
00011F1C                            ; ---------------------------------------------------------------------------
00011F1C                            ; Sprite mappings - flapping door (LZ)
00011F1C                            ; ---------------------------------------------------------------------------
00011F1C                            Map_obj0C:
00011F1C                            	include "_maps\obj0C.asm"
00011F1C                            ; ---------------------------------------------------------------------------
00011F1C                            ; Sprite mappings - flapping door (LZ)
00011F1C                            ; ---------------------------------------------------------------------------
00011F1C 0000                       		dc.w byte_113F8-Map_obj0C
00011F1E 0000                       		dc.w byte_11403-Map_obj0C
00011F20 0000                       		dc.w byte_1140E-Map_obj0C
00011F22 02                         byte_113F8:	dc.b 2
00011F23 E007 0000 F8               		dc.b $E0, 7, 0,	0, $F8
00011F28 0007 1000 F8               		dc.b 0,	7, $10,	0, $F8
00011F2D 02                         byte_11403:	dc.b 2
00011F2E DA0F 0008 FB               		dc.b $DA, $F, 0, 8, $FB
00011F33 060F 1008 FB               		dc.b 6,	$F, $10, 8, $FB
00011F38 02                         byte_1140E:	dc.b 2
00011F39 D80D 0018 00               		dc.b $D8, $D, 0, $18, 0
00011F3E 180D 1018 00               		dc.b $18, $D, $10, $18,	0
00011F44 00                         		even
00011F44 00                         		even
00011F44                            
00011F44                            ; ===========================================================================
00011F44                            ; ---------------------------------------------------------------------------
00011F44                            ; Object 71 - invisible	solid blocks
00011F44                            ; ---------------------------------------------------------------------------
00011F44                            
00011F44                            Obj71:					; XREF: Obj_Index
00011F44 7000                       		moveq	#0,d0
00011F46 1028 0024                  		move.b	$24(a0),d0
00011F4A 323B 0000                  		move.w	Obj71_Index(pc,d0.w),d1
00011F4E 4EFB 1000                  		jmp	Obj71_Index(pc,d1.w)
00011F52                            ; ===========================================================================
00011F52 0000                       Obj71_Index:	dc.w Obj71_Main-Obj71_Index
00011F54 0000                       		dc.w Obj71_Solid-Obj71_Index
00011F56                            ; ===========================================================================
00011F56                            
00011F56                            Obj71_Main:				; XREF: Obj71_Index
00011F56 5428 0024                  		addq.b	#2,$24(a0)
00011F5A 217C 0000 0000 0004        		move.l	#Map_obj71,4(a0)
00011F62 317C 8680 0002             		move.w	#$8680,2(a0)
00011F68 0028 0004 0001             		ori.b	#4,1(a0)
00011F6E 1028 0028                  		move.b	$28(a0),d0	; get object type
00011F72 1200                       		move.b	d0,d1
00011F74 0240 00F0                  		andi.w	#$F0,d0		; read only the	1st byte
00011F78 0640 0010                  		addi.w	#$10,d0
00011F7C E248                       		lsr.w	#1,d0
00011F7E 1140 0019                  		move.b	d0,$19(a0)	; set object width
00011F82 0241 000F                  		andi.w	#$F,d1		; read only the	2nd byte
00011F86 5241                       		addq.w	#1,d1
00011F88 E749                       		lsl.w	#3,d1
00011F8A 1141 0016                  		move.b	d1,$16(a0)	; set object height
00011F8E                            
00011F8E                            Obj71_Solid:				; XREF: Obj71_Index
00011F8E 6100 C3F6                  		bsr.w	ChkObjOnScreen
00011F92 6600                       		bne.s	Obj71_ChkDel
00011F94 7200                       		moveq	#0,d1
00011F96 1228 0019                  		move.b	$19(a0),d1
00011F9A 0641 000B                  		addi.w	#$B,d1
00011F9E 7400                       		moveq	#0,d2
00011FA0 1428 0016                  		move.b	$16(a0),d2
00011FA4 3602                       		move.w	d2,d3
00011FA6 5243                       		addq.w	#1,d3
00011FA8 3828 0008                  		move.w	8(a0),d4
00011FAC 6100 E58C                  		bsr.w	SolidObject71
00011FB0                            
00011FB0                            Obj71_ChkDel:
00011FB0 3028 0008                  		move.w	8(a0),d0
00011FB4 0240 FF80                  		andi.w	#$FF80,d0
00011FB8 3238 F700                  		move.w	($FFFFF700).w,d1
00011FBC 0441 0080                  		subi.w	#$80,d1
00011FC0 0241 FF80                  		andi.w	#$FF80,d1
00011FC4 9041                       		sub.w	d1,d0
00011FC6 0C40 0280                  		cmpi.w	#$280,d0
00011FCA 6200                       		bhi.s	Obj71_Delete
00011FCC 4A78 FE08                  		tst.w	($FFFFFE08).w	; are you using	debug mode?
00011FD0 6700                       		beq.s	Obj71_NoDisplay	; if not, branch
00011FD2 4EFA C136                  		jmp	DisplaySprite	; if yes, display the object
00011FD6                            ; ===========================================================================
00011FD6                            
00011FD6                            Obj71_NoDisplay:
00011FD6 4E75                       		rts	
00011FD8                            ; ===========================================================================
00011FD8                            
00011FD8                            Obj71_Delete:
00011FD8 4EFA C16C                  		jmp	DeleteObject
00011FDC                            ; ===========================================================================
00011FDC                            ; ---------------------------------------------------------------------------
00011FDC                            ; Sprite mappings - invisible solid blocks
00011FDC                            ; ---------------------------------------------------------------------------
00011FDC                            Map_obj71:
00011FDC                            	include "_maps\obj71.asm"
00011FDC                            ; ---------------------------------------------------------------------------
00011FDC                            ; Sprite mappings - invisible solid blocks
00011FDC                            ; ---------------------------------------------------------------------------
00011FDC 0000                       		dc.w byte_114BC-Map_obj71
00011FDE 0000                       		dc.w byte_114D1-Map_obj71
00011FE0 0000                       		dc.w byte_114E6-Map_obj71
00011FE2 04                         byte_114BC:	dc.b 4
00011FE3 F005 0018 F0               		dc.b $F0, 5, 0,	$18, $F0
00011FE8 F005 0018 00               		dc.b $F0, 5, 0,	$18, 0
00011FED 0005 0018 F0               		dc.b 0,	5, 0, $18, $F0
00011FF2 0005 0018 00               		dc.b 0,	5, 0, $18, 0
00011FF7 04                         byte_114D1:	dc.b 4
00011FF8 E005 0018 C0               		dc.b $E0, 5, 0,	$18, $C0
00011FFD E005 0018 30               		dc.b $E0, 5, 0,	$18, $30
00012002 1005 0018 C0               		dc.b $10, 5, 0,	$18, $C0
00012007 1005 0018 30               		dc.b $10, 5, 0,	$18, $30
0001200C 04                         byte_114E6:	dc.b 4
0001200D E005 0018 80               		dc.b $E0, 5, 0,	$18, $80
00012012 E005 0018 70               		dc.b $E0, 5, 0,	$18, $70
00012017 1005 0018 80               		dc.b $10, 5, 0,	$18, $80
0001201C 1005 0018 70               		dc.b $10, 5, 0,	$18, $70
00012022 00                         		even
00012022 00                         		even
00012022                            
00012022                            ; ===========================================================================
00012022                            ; ---------------------------------------------------------------------------
00012022                            ; Object 5D - fans (SLZ)
00012022                            ; ---------------------------------------------------------------------------
00012022                            
00012022                            Obj5D:					; XREF: Obj_Index
00012022 7000                       		moveq	#0,d0
00012024 1028 0024                  		move.b	$24(a0),d0
00012028 323B 0000                  		move.w	Obj5D_Index(pc,d0.w),d1
0001202C 4EFB 1000                  		jmp	Obj5D_Index(pc,d1.w)
00012030                            ; ===========================================================================
00012030 0000                       Obj5D_Index:	dc.w Obj5D_Main-Obj5D_Index
00012032 0000                       		dc.w Obj5D_Delay-Obj5D_Index
00012034                            ; ===========================================================================
00012034                            
00012034                            Obj5D_Main:				; XREF: Obj5D_Index
00012034 5428 0024                  		addq.b	#2,$24(a0)
00012038 217C 0000 0000 0004        		move.l	#Map_obj5D,4(a0)
00012040 317C 43A0 0002             		move.w	#$43A0,2(a0)
00012046 0028 0004 0001             		ori.b	#4,1(a0)
0001204C 117C 0010 0019             		move.b	#$10,$19(a0)
00012052 117C 0004 0018             		move.b	#4,$18(a0)
00012058                            
00012058                            Obj5D_Delay:				; XREF: Obj5D_Index
00012058 0828 0001 0028             		btst	#1,$28(a0)	; is object type 02/03?
0001205E 6600                       		bne.s	Obj5D_Blow	; if yes, branch
00012060 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00012064 6A00                       		bpl.s	Obj5D_Blow	; if time remains, branch
00012066 317C 0078 0030             		move.w	#120,$30(a0)	; set delay to 2 seconds
0001206C 0868 0000 0032             		bchg	#0,$32(a0)	; switch fan on/off
00012072 6700                       		beq.s	Obj5D_Blow	; if fan is off, branch
00012074 317C 00B4 0030             		move.w	#180,$30(a0)	; set delay to 3 seconds
0001207A                            
0001207A                            Obj5D_Blow:
0001207A 4A28 0032                  		tst.b	$32(a0)		; is fan switched on?
0001207E 6600 0000                  		bne.w	Obj5D_ChkDel	; if not, branch
00012082 43F8 D000                  		lea	($FFFFD000).w,a1
00012086 3029 0008                  		move.w	8(a1),d0
0001208A 9068 0008                  		sub.w	8(a0),d0
0001208E 0828 0000 0022             		btst	#0,$22(a0)
00012094 6600                       		bne.s	Obj5D_ChkSonic
00012096 4440                       		neg.w	d0
00012098                            
00012098                            Obj5D_ChkSonic:
00012098 0640 0050                  		addi.w	#$50,d0
0001209C 0C40 00F0                  		cmpi.w	#$F0,d0		; is Sonic more	than $A0 pixels	from the fan?
000120A0 6400                       		bcc.s	Obj5D_Animate	; if yes, branch
000120A2 3229 000C                  		move.w	$C(a1),d1
000120A6 0641 0060                  		addi.w	#$60,d1
000120AA 9268 000C                  		sub.w	$C(a0),d1
000120AE 6500                       		bcs.s	Obj5D_Animate
000120B0 0C41 0070                  		cmpi.w	#$70,d1
000120B4 6400                       		bcc.s	Obj5D_Animate
000120B6 0440 0050                  		subi.w	#$50,d0
000120BA 6400                       		bcc.s	loc_1159A
000120BC 4640                       		not.w	d0
000120BE D040                       		add.w	d0,d0
000120C0                            
000120C0                            loc_1159A:
000120C0 0640 0060                  		addi.w	#$60,d0
000120C4 0828 0000 0022             		btst	#0,$22(a0)
000120CA 6600                       		bne.s	loc_115A8
000120CC 4440                       		neg.w	d0
000120CE                            
000120CE                            loc_115A8:
000120CE 4400                       		neg.b	d0
000120D0 E840                       		asr.w	#4,d0
000120D2 0828 0000 0028             		btst	#0,$28(a0)
000120D8 6700                       		beq.s	Obj5D_MoveSonic
000120DA 4440                       		neg.w	d0
000120DC                            
000120DC                            Obj5D_MoveSonic:
000120DC D169 0008                  		add.w	d0,8(a1)	; push Sonic away from the fan
000120E0                            
000120E0                            Obj5D_Animate:				; XREF: Obj5D_ChkSonic
000120E0 5328 001E                  		subq.b	#1,$1E(a0)
000120E4 6A00                       		bpl.s	Obj5D_ChkDel
000120E6 117C 0000 001E             		move.b	#0,$1E(a0)
000120EC 5228 001B                  		addq.b	#1,$1B(a0)
000120F0 0C28 0003 001B             		cmpi.b	#3,$1B(a0)
000120F6 6500                       		bcs.s	loc_115D8
000120F8 117C 0000 001B             		move.b	#0,$1B(a0)
000120FE                            
000120FE                            loc_115D8:
000120FE 7000                       		moveq	#0,d0
00012100 0828 0000 0028             		btst	#0,$28(a0)
00012106 6700                       		beq.s	loc_115E4
00012108 7002                       		moveq	#2,d0
0001210A                            
0001210A                            loc_115E4:
0001210A D028 001B                  		add.b	$1B(a0),d0
0001210E 1140 001A                  		move.b	d0,$1A(a0)
00012112                            
00012112                            Obj5D_ChkDel:				; XREF: Obj5D_Animate
00012112 6100 BFF6                  		bsr.w	DisplaySprite
00012116 3028 0008                  		move.w	8(a0),d0
0001211A 0240 FF80                  		andi.w	#$FF80,d0
0001211E 3238 F700                  		move.w	($FFFFF700).w,d1
00012122 0441 0080                  		subi.w	#$80,d1
00012126 0241 FF80                  		andi.w	#$FF80,d1
0001212A 9041                       		sub.w	d1,d0
0001212C 0C40 0280                  		cmpi.w	#$280,d0
00012130 6200 C014                  		bhi.w	DeleteObject
00012134 4E75                       		rts	
00012136                            ; ===========================================================================
00012136                            ; ---------------------------------------------------------------------------
00012136                            ; Sprite mappings - fans (SLZ)
00012136                            ; ---------------------------------------------------------------------------
00012136                            Map_obj5D:
00012136                            	include "_maps\obj5D.asm"
00012136                            ; ---------------------------------------------------------------------------
00012136                            ; Sprite mappings - fans (SLZ)
00012136                            ; ---------------------------------------------------------------------------
00012136 0000 0000                  		dc.w byte_1161A-Map_obj5D, byte_11625-Map_obj5D
0001213A 0000 0000                  		dc.w byte_11630-Map_obj5D, byte_11625-Map_obj5D
0001213E 0000                       		dc.w byte_1161A-Map_obj5D
00012140 02                         byte_1161A:	dc.b 2
00012141 F009 0000 F8               		dc.b $F0, 9, 0,	0, $F8
00012146 000D 0006 F0               		dc.b 0,	$D, 0, 6, $F0
0001214B 02                         byte_11625:	dc.b 2
0001214C F00D 000E F0               		dc.b $F0, $D, 0, $E, $F0
00012151 000D 0016 F0               		dc.b 0,	$D, 0, $16, $F0
00012156 02                         byte_11630:	dc.b 2
00012157 F00D 001E F0               		dc.b $F0, $D, 0, $1E, $F0
0001215C 0009 0026 F8               		dc.b 0,	9, 0, $26, $F8
00012162 00                         		even
00012162 00                         		even
00012162                            
00012162                            ; ===========================================================================
00012162                            ; ---------------------------------------------------------------------------
00012162                            ; Object 5E - seesaws (SLZ)
00012162                            ; ---------------------------------------------------------------------------
00012162                            
00012162                            Obj5E:					; XREF: Obj_Index
00012162 7000                       		moveq	#0,d0
00012164 1028 0024                  		move.b	$24(a0),d0
00012168 323B 0000                  		move.w	Obj5E_Index(pc,d0.w),d1
0001216C 4EBB 1000                  		jsr	Obj5E_Index(pc,d1.w)
00012170 3028 0030                  		move.w	$30(a0),d0
00012174 0240 FF80                  		andi.w	#$FF80,d0
00012178 3238 F700                  		move.w	($FFFFF700).w,d1
0001217C 0441 0080                  		subi.w	#$80,d1
00012180 0241 FF80                  		andi.w	#$FF80,d1
00012184 9041                       		sub.w	d1,d0
00012186 6B00 BFBE                  		bmi.w	DeleteObject
0001218A 0C40 0280                  		cmpi.w	#$280,d0
0001218E 6200 BFB6                  		bhi.w	DeleteObject
00012192 6000 BF76                  		bra.w	DisplaySprite
00012196                            ; ===========================================================================
00012196 0000                       Obj5E_Index:	dc.w Obj5E_Main-Obj5E_Index
00012198 0000                       		dc.w Obj5E_Slope-Obj5E_Index
0001219A 0000                       		dc.w Obj5E_Slope2-Obj5E_Index
0001219C 0000                       		dc.w Obj5E_Spikeball-Obj5E_Index
0001219E 0000                       		dc.w Obj5E_MoveSpike-Obj5E_Index
000121A0 0000                       		dc.w Obj5E_SpikeFall-Obj5E_Index
000121A2                            ; ===========================================================================
000121A2                            
000121A2                            Obj5E_Main:				; XREF: Obj5E_Index
000121A2 5428 0024                  		addq.b	#2,$24(a0)
000121A6 217C 0000 0000 0004        		move.l	#Map_obj5E,4(a0)
000121AE 317C 0374 0002             		move.w	#$374,2(a0)
000121B4 0028 0004 0001             		ori.b	#4,1(a0)
000121BA 117C 0004 0018             		move.b	#4,$18(a0)
000121C0 117C 0030 0019             		move.b	#$30,$19(a0)
000121C6 3168 0008 0030             		move.w	8(a0),$30(a0)
000121CC 4A28 0028                  		tst.b	$28(a0)		; is object type 00 ?
000121D0 6600                       		bne.s	loc_116D2	; if not, branch
000121D2 6100 C3E2                  		bsr.w	SingleObjLoad2
000121D6 6600                       		bne.s	loc_116D2
000121D8 12BC 005E                  		move.b	#$5E,0(a1)	; load spikeball object
000121DC 5C29 0024                  		addq.b	#6,$24(a1)
000121E0 3368 0008 0008             		move.w	8(a0),8(a1)
000121E6 3368 000C 000C             		move.w	$C(a0),$C(a1)
000121EC 1368 0022 0022             		move.b	$22(a0),$22(a1)
000121F2 2348 003C                  		move.l	a0,$3C(a1)
000121F6                            
000121F6                            loc_116D2:
000121F6 0828 0000 0022             		btst	#0,$22(a0)
000121FC 6700                       		beq.s	loc_116E0
000121FE 117C 0002 001A             		move.b	#2,$1A(a0)
00012204                            
00012204                            loc_116E0:
00012204 1168 001A 003A             		move.b	$1A(a0),$3A(a0)
0001220A                            
0001220A                            Obj5E_Slope:				; XREF: Obj5E_Index
0001220A 1228 003A                  		move.b	$3A(a0),d1
0001220E 6100 0000                  		bsr.w	loc_11766
00012212 45F9 0000 0000             		lea	(Obj5E_Data1).l,a2
00012218 0828 0000 001A             		btst	#0,$1A(a0)
0001221E 6700                       		beq.s	loc_11702
00012220 45F9 0000 0000             		lea	(Obj5E_Data2).l,a2
00012226                            
00012226                            loc_11702:
00012226 43F8 D000                  		lea	($FFFFD000).w,a1
0001222A 3169 0012 0038             		move.w	$12(a1),$38(a0)
00012230 323C 0030                  		move.w	#$30,d1
00012234 4EB9 0000 7FD0             		jsr	(SlopeObject).l
0001223A 4E75                       		rts	
0001223C                            ; ===========================================================================
0001223C                            
0001223C                            Obj5E_Slope2:				; XREF: Obj5E_Index
0001223C 6100 0000                  		bsr.w	loc_1174A
00012240 45F9 0000 0000             		lea	(Obj5E_Data1).l,a2
00012246 0828 0000 001A             		btst	#0,$1A(a0)
0001224C 6700                       		beq.s	loc_11730
0001224E 45F9 0000 0000             		lea	(Obj5E_Data2).l,a2
00012254                            
00012254                            loc_11730:
00012254 323C 0030                  		move.w	#$30,d1
00012258 4EB9 0000 8070             		jsr	(ExitPlatform).l
0001225E 323C 0030                  		move.w	#$30,d1
00012262 3428 0008                  		move.w	8(a0),d2
00012266 4EB9 0000 8FCE             		jsr	SlopeObject2
0001226C 4E75                       		rts	
0001226E                            ; ===========================================================================
0001226E                            
0001226E                            loc_1174A:				; XREF: Obj5E_Slope2
0001226E 7202                       		moveq	#2,d1
00012270 43F8 D000                  		lea	($FFFFD000).w,a1
00012274 3028 0008                  		move.w	8(a0),d0
00012278 9069 0008                  		sub.w	8(a1),d0
0001227C 6400                       		bcc.s	loc_1175E
0001227E 4440                       		neg.w	d0
00012280 7200                       		moveq	#0,d1
00012282                            
00012282                            loc_1175E:
00012282 0C40 0008                  		cmpi.w	#8,d0
00012286 6400                       		bcc.s	loc_11766
00012288 7201                       		moveq	#1,d1
0001228A                            
0001228A                            loc_11766:
0001228A 1028 001A                  		move.b	$1A(a0),d0
0001228E B001                       		cmp.b	d1,d0
00012290 6700                       		beq.s	locret_11790
00012292 6400                       		bcc.s	loc_11772
00012294 5400                       		addq.b	#2,d0
00012296                            
00012296                            loc_11772:
00012296 5300                       		subq.b	#1,d0
00012298 1140 001A                  		move.b	d0,$1A(a0)
0001229C 1141 003A                  		move.b	d1,$3A(a0)
000122A0 08A8 0000 0001             		bclr	#0,1(a0)
000122A6 0828 0001 001A             		btst	#1,$1A(a0)
000122AC 6700                       		beq.s	locret_11790
000122AE 08E8 0000 0001             		bset	#0,1(a0)
000122B4                            
000122B4                            locret_11790:
000122B4 4E75                       		rts	
000122B6                            ; ===========================================================================
000122B6                            
000122B6                            Obj5E_Spikeball:			; XREF: Obj5E_Index
000122B6 5428 0024                  		addq.b	#2,$24(a0)
000122BA 217C 0000 0000 0004        		move.l	#Map_obj5Ea,4(a0)
000122C2 317C 04F0 0002             		move.w	#$4F0,2(a0)
000122C8 0028 0004 0001             		ori.b	#4,1(a0)
000122CE 117C 0004 0018             		move.b	#4,$18(a0)
000122D4 117C 008B 0020             		move.b	#$8B,$20(a0)
000122DA 117C 000C 0019             		move.b	#$C,$19(a0)
000122E0 3168 0008 0030             		move.w	8(a0),$30(a0)
000122E6 0668 0028 0008             		addi.w	#$28,8(a0)
000122EC 3168 000C 0034             		move.w	$C(a0),$34(a0)
000122F2 117C 0001 001A             		move.b	#1,$1A(a0)
000122F8 0828 0000 0022             		btst	#0,$22(a0)
000122FE 6700                       		beq.s	Obj5E_MoveSpike
00012300 0468 0050 0008             		subi.w	#$50,8(a0)
00012306 117C 0002 003A             		move.b	#2,$3A(a0)
0001230C                            
0001230C                            Obj5E_MoveSpike:			; XREF: Obj5E_Index
0001230C 2268 003C                  		movea.l	$3C(a0),a1
00012310 7000                       		moveq	#0,d0
00012312 1028 003A                  		move.b	$3A(a0),d0
00012316 9029 003A                  		sub.b	$3A(a1),d0
0001231A 6700                       		beq.s	loc_1183E
0001231C 6400                       		bcc.s	loc_117FC
0001231E 4400                       		neg.b	d0
00012320                            
00012320                            loc_117FC:
00012320 323C F7E8                  		move.w	#-$818,d1
00012324 343C FEEC                  		move.w	#-$114,d2
00012328 0C00 0001                  		cmpi.b	#1,d0
0001232C 6700                       		beq.s	loc_11822
0001232E 323C F510                  		move.w	#-$AF0,d1
00012332 343C FF34                  		move.w	#-$CC,d2
00012336 0C69 0A00 0038             		cmpi.w	#$A00,$38(a1)
0001233C 6D00                       		blt.s	loc_11822
0001233E 323C F200                  		move.w	#-$E00,d1
00012342 343C FF60                  		move.w	#-$A0,d2
00012346                            
00012346                            loc_11822:
00012346 3141 0012                  		move.w	d1,$12(a0)
0001234A 3142 0010                  		move.w	d2,$10(a0)
0001234E 3028 0008                  		move.w	8(a0),d0
00012352 9068 0030                  		sub.w	$30(a0),d0
00012356 6400                       		bcc.s	loc_11838
00012358 4468 0010                  		neg.w	$10(a0)
0001235C                            
0001235C                            loc_11838:
0001235C 5428 0024                  		addq.b	#2,$24(a0)
00012360 6000                       		bra.s	Obj5E_SpikeFall
00012362                            ; ===========================================================================
00012362                            
00012362                            loc_1183E:				; XREF: Obj5E_MoveSpike
00012362 45F9 0000 0000             		lea	(Obj5E_Speeds).l,a2
00012368 7000                       		moveq	#0,d0
0001236A 1029 001A                  		move.b	$1A(a1),d0
0001236E 343C 0028                  		move.w	#$28,d2
00012372 3228 0008                  		move.w	8(a0),d1
00012376 9268 0030                  		sub.w	$30(a0),d1
0001237A 6400                       		bcc.s	loc_1185C
0001237C 4442                       		neg.w	d2
0001237E 5440                       		addq.w	#2,d0
00012380                            
00012380                            loc_1185C:
00012380 D040                       		add.w	d0,d0
00012382 3228 0034                  		move.w	$34(a0),d1
00012386 D272 0000                  		add.w	(a2,d0.w),d1
0001238A 3141 000C                  		move.w	d1,$C(a0)
0001238E D468 0030                  		add.w	$30(a0),d2
00012392 3142 0008                  		move.w	d2,8(a0)
00012396 4268 000E                  		clr.w	$E(a0)
0001239A 4268 000A                  		clr.w	$A(a0)
0001239E 4E75                       		rts	
000123A0                            ; ===========================================================================
000123A0                            
000123A0                            Obj5E_SpikeFall:			; XREF: Obj5E_Index
000123A0 4A68 0012                  		tst.w	$12(a0)
000123A4 6A00                       		bpl.s	loc_1189A
000123A6 6100 BD10                  		bsr.w	ObjectFall
000123AA 3028 0034                  		move.w	$34(a0),d0
000123AE 0440 002F                  		subi.w	#$2F,d0
000123B2 B068 000C                  		cmp.w	$C(a0),d0
000123B6 6E00                       		bgt.s	locret_11898
000123B8 6100 BCFE                  		bsr.w	ObjectFall
000123BC                            
000123BC                            locret_11898:
000123BC 4E75                       		rts	
000123BE                            ; ===========================================================================
000123BE                            
000123BE                            loc_1189A:				; XREF: Obj5E_SpikeFall
000123BE 6100 BCF8                  		bsr.w	ObjectFall
000123C2 2268 003C                  		movea.l	$3C(a0),a1
000123C6 45F9 0000 0000             		lea	(Obj5E_Speeds).l,a2
000123CC 7000                       		moveq	#0,d0
000123CE 1029 001A                  		move.b	$1A(a1),d0
000123D2 3228 0008                  		move.w	8(a0),d1
000123D6 9268 0030                  		sub.w	$30(a0),d1
000123DA 6400                       		bcc.s	loc_118BA
000123DC 5440                       		addq.w	#2,d0
000123DE                            
000123DE                            loc_118BA:
000123DE D040                       		add.w	d0,d0
000123E0 3228 0034                  		move.w	$34(a0),d1
000123E4 D272 0000                  		add.w	(a2,d0.w),d1
000123E8 B268 000C                  		cmp.w	$C(a0),d1
000123EC 6E00                       		bgt.s	locret_11938
000123EE 2268 003C                  		movea.l	$3C(a0),a1
000123F2 7202                       		moveq	#2,d1
000123F4 4A68 0010                  		tst.w	$10(a0)
000123F8 6B00                       		bmi.s	Obj5E_Spring
000123FA 7200                       		moveq	#0,d1
000123FC                            
000123FC                            Obj5E_Spring:
000123FC 1341 003A                  		move.b	d1,$3A(a1)
00012400 1141 003A                  		move.b	d1,$3A(a0)
00012404 B229 001A                  		cmp.b	$1A(a1),d1
00012408 6700                       		beq.s	loc_1192C
0001240A 08A9 0003 0022             		bclr	#3,$22(a1)
00012410 6700                       		beq.s	loc_1192C
00012412 4229 0025                  		clr.b	$25(a1)
00012416 137C 0002 0024             		move.b	#2,$24(a1)
0001241C 45F8 D000                  		lea	($FFFFD000).w,a2
00012420 3568 0012 0012             		move.w	$12(a0),$12(a2)
00012426 446A 0012                  		neg.w	$12(a2)
0001242A 08EA 0001 0022             		bset	#1,$22(a2)
00012430 08AA 0003 0022             		bclr	#3,$22(a2)
00012436 422A 003C                  		clr.b	$3C(a2)
0001243A 157C 0010 001C             		move.b	#$10,$1C(a2)	; change Sonic's animation to "spring" ($10)
00012440 157C 0002 0024             		move.b	#2,$24(a2)
00012446 303C 00CC                  		move.w	#$CC,d0
0001244A 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play spring sound
00012450                            
00012450                            loc_1192C:
00012450 4268 0010                  		clr.w	$10(a0)
00012454 4268 0012                  		clr.w	$12(a0)
00012458 5528 0024                  		subq.b	#2,$24(a0)
0001245C                            
0001245C                            locret_11938:
0001245C 4E75                       		rts	
0001245E                            ; ===========================================================================
0001245E FFF8 FFE4 FFD1 FFE4 FFF8   Obj5E_Speeds:	dc.w $FFF8, $FFE4, $FFD1, $FFE4, $FFF8
00012468                            
00012468                            Obj5E_Data1:	incbin	misc\slzssaw1.bin
00012498                            		even
00012498                            Obj5E_Data2:	incbin	misc\slzssaw2.bin
000124C8                            		even
000124C8                            ; ---------------------------------------------------------------------------
000124C8                            ; Sprite mappings - seesaws (SLZ)
000124C8                            ; ---------------------------------------------------------------------------
000124C8                            Map_obj5E:
000124C8                            	include "_maps\obj5E.asm"
000124C8                            ; ---------------------------------------------------------------------------
000124C8                            ; Sprite mappings - seesaws (SLZ)
000124C8                            ; ---------------------------------------------------------------------------
000124C8 0000 0000                  		dc.w byte_119AC-Map_obj5E, byte_119D0-Map_obj5E
000124CC 0000 0000                  		dc.w byte_119AC-Map_obj5E, byte_119D0-Map_obj5E
000124D0 07                         byte_119AC:	dc.b 7
000124D1 D406 0000 D3               		dc.b $D4, 6, 0,	0, $D3
000124D6 DC06 0006 E3               		dc.b $DC, 6, 0,	6, $E3
000124DB E404 000C F3               		dc.b $E4, 4, 0,	$C, $F3
000124E0 EC0D 000E F3               		dc.b $EC, $D, 0, $E, $F3
000124E5 FC08 0016 FB               		dc.b $FC, 8, 0,	$16, $FB
000124EA F406 0006 13               		dc.b $F4, 6, 0,	6, $13
000124EF FC05 0019 23               		dc.b $FC, 5, 0,	$19, $23
000124F4 04                         byte_119D0:	dc.b 4
000124F5 E60A 001D D0               		dc.b $E6, $A, 0, $1D, $D0
000124FA E60A 0023 E8               		dc.b $E6, $A, 0, $23, $E8
000124FF E60A 0823 00               		dc.b $E6, $A, 8, $23, 0
00012504 E60A 081D 18               		dc.b $E6, $A, 8, $1D, $18
0001250A 00                         		even
0001250A 00                         		even
0001250A                            
0001250A                            ; ---------------------------------------------------------------------------
0001250A                            ; Sprite mappings - spiked balls on the	seesaws	(SLZ)
0001250A                            ; ---------------------------------------------------------------------------
0001250A                            Map_obj5Ea:
0001250A                            	include "_maps\obj5Eballs.asm"
0001250A                            ; ---------------------------------------------------------------------------
0001250A                            ; Sprite mappings - spiked balls on the	seesaws	(SLZ)
0001250A                            ; ---------------------------------------------------------------------------
0001250A 0000                       		dc.w byte_119EA-Map_obj5Ea
0001250C 0000                       		dc.w byte_119F0-Map_obj5Ea
0001250E 01                         byte_119EA:	dc.b 1
0001250F F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
00012514 01                         byte_119F0:	dc.b 1
00012515 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001251A                            		even
0001251A                            		even
0001251A                            
0001251A                            ; ===========================================================================
0001251A                            ; ---------------------------------------------------------------------------
0001251A                            ; Object 5F - walking bomb enemy (SLZ, SBZ)
0001251A                            ; ---------------------------------------------------------------------------
0001251A                            
0001251A                            Obj5F:					; XREF: Obj_Index
0001251A 7000                       		moveq	#0,d0
0001251C 1028 0024                  		move.b	$24(a0),d0
00012520 323B 0000                  		move.w	Obj5F_Index(pc,d0.w),d1
00012524 4EFB 1000                  		jmp	Obj5F_Index(pc,d1.w)
00012528                            ; ===========================================================================
00012528 0000                       Obj5F_Index:	dc.w Obj5F_Main-Obj5F_Index
0001252A 0000                       		dc.w Obj5F_Action-Obj5F_Index
0001252C 0000                       		dc.w Obj5F_Display-Obj5F_Index
0001252E 0000                       		dc.w Obj5F_End-Obj5F_Index
00012530                            ; ===========================================================================
00012530                            
00012530                            Obj5F_Main:				; XREF: Obj5F_Index
00012530 5428 0024                  		addq.b	#2,$24(a0)
00012534 217C 0000 0000 0004        		move.l	#Map_obj5F,4(a0)
0001253C 317C 0400 0002             		move.w	#$400,2(a0)
00012542 0028 0004 0001             		ori.b	#4,1(a0)
00012548 117C 0003 0018             		move.b	#3,$18(a0)
0001254E 117C 000C 0019             		move.b	#$C,$19(a0)
00012554 1028 0028                  		move.b	$28(a0),d0
00012558 6700                       		beq.s	loc_11A3C
0001255A 1140 0024                  		move.b	d0,$24(a0)
0001255E 4E75                       		rts	
00012560                            ; ===========================================================================
00012560                            
00012560                            loc_11A3C:
00012560 117C 009A 0020             		move.b	#$9A,$20(a0)
00012566 0868 0000 0022             		bchg	#0,$22(a0)
0001256C                            
0001256C                            Obj5F_Action:				; XREF: Obj5F_Index
0001256C 7000                       		moveq	#0,d0
0001256E 1028 0025                  		move.b	$25(a0),d0
00012572 323B 0000                  		move.w	Obj5F_Index2(pc,d0.w),d1
00012576 4EBB 1000                  		jsr	Obj5F_Index2(pc,d1.w)
0001257A 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
00012580 6100 8C9A                  		bsr.w	AnimateSprite
00012584 6000 DC46                  		bra.w	MarkObjGone
00012588                            ; ===========================================================================
00012588 0000                       Obj5F_Index2:	dc.w Obj5F_Walk-Obj5F_Index2
0001258A 0000                       		dc.w Obj5F_Wait-Obj5F_Index2
0001258C 0000                       		dc.w Obj5F_Explode-Obj5F_Index2
0001258E                            ; ===========================================================================
0001258E                            
0001258E                            Obj5F_Walk:				; XREF: Obj5F_Index2
0001258E 6100 0000                  		bsr.w	Obj5F_ChkSonic
00012592 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00012596 6A00                       		bpl.s	locret_11A96	; if time remains, branch
00012598 5428 0025                  		addq.b	#2,$25(a0)
0001259C 317C 05FF 0030             		move.w	#1535,$30(a0)	; set time delay to 25 seconds
000125A2 317C 0010 0010             		move.w	#$10,$10(a0)
000125A8 117C 0001 001C             		move.b	#1,$1C(a0)
000125AE 0868 0000 0022             		bchg	#0,$22(a0)
000125B4 6700                       		beq.s	locret_11A96
000125B6 4468 0010                  		neg.w	$10(a0)		; change direction
000125BA                            
000125BA                            locret_11A96:
000125BA 4E75                       		rts	
000125BC                            ; ===========================================================================
000125BC                            
000125BC                            Obj5F_Wait:				; XREF: Obj5F_Index2
000125BC 6100 0000                  		bsr.w	Obj5F_ChkSonic
000125C0 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
000125C4 6B00                       		bmi.s	loc_11AA8
000125C6 6100 BB1C                  		bsr.w	SpeedToPos
000125CA 4E75                       		rts	
000125CC                            ; ===========================================================================
000125CC                            
000125CC                            loc_11AA8:
000125CC 5528 0025                  		subq.b	#2,$25(a0)
000125D0 317C 00B3 0030             		move.w	#179,$30(a0)	; set time delay to 3 seconds
000125D6 4268 0010                  		clr.w	$10(a0)		; stop walking
000125DA 117C 0000 001C             		move.b	#0,$1C(a0)	; stop animation
000125E0 4E75                       		rts	
000125E2                            ; ===========================================================================
000125E2                            
000125E2                            Obj5F_Explode:				; XREF: Obj5F_Index2
000125E2 5368 0030                  		subq.w	#1,$30(a0)
000125E6 6A00                       		bpl.s	locret_11AD0
000125E8 10BC 003F                  		move.b	#$3F,0(a0)	; change bomb into an explosion
000125EC 117C 0000 0024             		move.b	#0,$24(a0)
000125F2                            
000125F2                            locret_11AD0:
000125F2 4E75                       		rts	
000125F4                            ; ===========================================================================
000125F4                            
000125F4                            Obj5F_ChkSonic:				; XREF: Obj5F_Walk; Obj5F_Wait
000125F4 3038 D008                  		move.w	($FFFFD008).w,d0
000125F8 9068 0008                  		sub.w	8(a0),d0
000125FC 6400                       		bcc.s	loc_11ADE
000125FE 4440                       		neg.w	d0
00012600                            
00012600                            loc_11ADE:
00012600 0C40 0060                  		cmpi.w	#$60,d0
00012604 6400                       		bcc.s	locret_11B5E
00012606 3038 D00C                  		move.w	($FFFFD00C).w,d0
0001260A 9068 000C                  		sub.w	$C(a0),d0
0001260E 6400                       		bcc.s	Obj5F_MakeFuse
00012610 4440                       		neg.w	d0
00012612                            
00012612                            Obj5F_MakeFuse:
00012612 0C40 0060                  		cmpi.w	#$60,d0
00012616 6400                       		bcc.s	locret_11B5E
00012618 4A78 FE08                  		tst.w	($FFFFFE08).w
0001261C 6600                       		bne.s	locret_11B5E
0001261E 117C 0004 0025             		move.b	#4,$25(a0)
00012624 317C 008F 0030             		move.w	#143,$30(a0)	; set fuse time
0001262A 4268 0010                  		clr.w	$10(a0)
0001262E 117C 0002 001C             		move.b	#2,$1C(a0)
00012634 6100 BF80                  		bsr.w	SingleObjLoad2
00012638 6600                       		bne.s	locret_11B5E
0001263A 12BC 005F                  		move.b	#$5F,0(a1)	; load fuse object
0001263E 3368 0008 0008             		move.w	8(a0),8(a1)
00012644 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001264A 3368 000C 0034             		move.w	$C(a0),$34(a1)
00012650 1368 0022 0022             		move.b	$22(a0),$22(a1)
00012656 137C 0004 0028             		move.b	#4,$28(a1)
0001265C 137C 0003 001C             		move.b	#3,$1C(a1)
00012662 337C 0010 0012             		move.w	#$10,$12(a1)
00012668 0828 0001 0022             		btst	#1,$22(a0)
0001266E 6700                       		beq.s	loc_11B54
00012670 4469 0012                  		neg.w	$12(a1)
00012674                            
00012674                            loc_11B54:
00012674 337C 008F 0030             		move.w	#143,$30(a1)	; set fuse time
0001267A 2348 003C                  		move.l	a0,$3C(a1)
0001267E                            
0001267E                            locret_11B5E:
0001267E 4E75                       		rts	
00012680                            ; ===========================================================================
00012680                            
00012680                            Obj5F_Display:				; XREF: Obj5F_Index
00012680 6100                       		bsr.s	loc_11B70
00012682 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
00012688 6100 8B92                  		bsr.w	AnimateSprite
0001268C 6000 DB3E                  		bra.w	MarkObjGone
00012690                            ; ===========================================================================
00012690                            
00012690                            loc_11B70:
00012690 5368 0030                  		subq.w	#1,$30(a0)
00012694 6B00                       		bmi.s	loc_11B7C
00012696 6100 BA4C                  		bsr.w	SpeedToPos
0001269A 4E75                       		rts	
0001269C                            ; ===========================================================================
0001269C                            
0001269C                            loc_11B7C:
0001269C 4268 0030                  		clr.w	$30(a0)
000126A0 4228 0024                  		clr.b	$24(a0)
000126A4 3168 0034 000C             		move.w	$34(a0),$C(a0)
000126AA 7203                       		moveq	#3,d1
000126AC 2248                       		movea.l	a0,a1
000126AE 45F9 0000 0000             		lea	(Obj5F_ShrSpeed).l,a2 ;	load shrapnel speed data
000126B4 6000                       		bra.s	Obj5F_MakeShrap
000126B6                            ; ===========================================================================
000126B6                            
000126B6                            Obj5F_Loop:
000126B6 6100 BEFE                  		bsr.w	SingleObjLoad2
000126BA 6600                       		bne.s	loc_11BCE
000126BC                            
000126BC                            Obj5F_MakeShrap:			; XREF: loc_11B7C
000126BC 12BC 005F                  		move.b	#$5F,0(a1)	; load shrapnel	object
000126C0 3368 0008 0008             		move.w	8(a0),8(a1)
000126C6 3368 000C 000C             		move.w	$C(a0),$C(a1)
000126CC 137C 0006 0028             		move.b	#6,$28(a1)
000126D2 137C 0004 001C             		move.b	#4,$1C(a1)
000126D8 335A 0010                  		move.w	(a2)+,$10(a1)
000126DC 335A 0012                  		move.w	(a2)+,$12(a1)
000126E0 137C 0098 0020             		move.b	#$98,$20(a1)
000126E6 08E9 0007 0001             		bset	#7,1(a1)
000126EC                            
000126EC                            loc_11BCE:
000126EC 51C9 FFC8                  		dbf	d1,Obj5F_Loop	; repeat 3 more	times
000126F0                            
000126F0 117C 0006 0024             		move.b	#6,$24(a0)
000126F6                            
000126F6                            Obj5F_End:				; XREF: Obj5F_Index
000126F6 6100 B9EC                  		bsr.w	SpeedToPos
000126FA 0668 0018 0012             		addi.w	#$18,$12(a0)
00012700 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
00012706 6100 8B14                  		bsr.w	AnimateSprite
0001270A 4A28 0001                  		tst.b	1(a0)
0001270E 6A00 BA36                  		bpl.w	DeleteObject
00012712 6000 B9F6                  		bra.w	DisplaySprite
00012716                            ; ===========================================================================
00012716 FE00 FD00 FF00 FE00 0200+  Obj5F_ShrSpeed:	dc.w $FE00, $FD00, $FF00, $FE00, $200, $FD00, $100, $FE00
00012726                            
00012726                            Ani_obj5F:
00012726                            	include "_anim\obj5F.asm"
00012726                            ; ---------------------------------------------------------------------------
00012726                            ; Animation script - Bomb enemy
00012726                            ; ---------------------------------------------------------------------------
00012726 0000                       		dc.w byte_11C12-Ani_obj5F
00012728 0000                       		dc.w byte_11C16-Ani_obj5F
0001272A 0000                       		dc.w byte_11C1C-Ani_obj5F
0001272C 0000                       		dc.w byte_11C20-Ani_obj5F
0001272E 0000                       		dc.w byte_11C24-Ani_obj5F
00012730 1301 00FF                  byte_11C12:	dc.b $13, 1, 0,	$FF
00012734 1305 0403 02FF             byte_11C16:	dc.b $13, 5, 4,	3, 2, $FF
0001273A 1307 06FF                  byte_11C1C:	dc.b $13, 7, 6,	$FF
0001273E 0308 09FF                  byte_11C20:	dc.b 3,	8, 9, $FF
00012742 030A 0BFF                  byte_11C24:	dc.b 3,	$A, $B,	$FF
00012746                            		even
00012746                            		even
00012746                            
00012746                            ; ---------------------------------------------------------------------------
00012746                            ; Sprite mappings - walking bomb enemy (SLZ, SBZ)
00012746                            ; ---------------------------------------------------------------------------
00012746                            Map_obj5F:
00012746                            	include "_maps\obj5F.asm"
00012746                            ; ---------------------------------------------------------------------------
00012746                            ; Sprite mappings - walking bomb enemy (SLZ, SBZ)
00012746                            ; ---------------------------------------------------------------------------
00012746 0000 0000                  		dc.w byte_11C40-Map_obj5F, byte_11C50-Map_obj5F
0001274A 0000 0000                  		dc.w byte_11C60-Map_obj5F, byte_11C70-Map_obj5F
0001274E 0000 0000                  		dc.w byte_11C80-Map_obj5F, byte_11C90-Map_obj5F
00012752 0000 0000                  		dc.w byte_11CA0-Map_obj5F, byte_11CAB-Map_obj5F
00012756 0000 0000                  		dc.w byte_11CB6-Map_obj5F, byte_11CBC-Map_obj5F
0001275A 0000 0000                  		dc.w byte_11CC2-Map_obj5F, byte_11CC8-Map_obj5F
0001275E 03                         byte_11C40:	dc.b 3
0001275F F10A 0000 F4               		dc.b $F1, $A, 0, 0, $F4
00012764 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00012769 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
0001276E 03                         byte_11C50:	dc.b 3
0001276F F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00012774 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00012779 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
0001277E 03                         byte_11C60:	dc.b 3
0001277F F00A 0000 F4               		dc.b $F0, $A, 0, 0, $F4
00012784 0808 0015 F4               		dc.b 8,	8, 0, $15, $F4
00012789 E601 0021 FC               		dc.b $E6, 1, 0,	$21, $FC
0001278E 03                         byte_11C70:	dc.b 3
0001278F F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00012794 0908 0018 F4               		dc.b 9,	8, 0, $18, $F4
00012799 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
0001279E 03                         byte_11C80:	dc.b 3
0001279F F00A 0000 F4               		dc.b $F0, $A, 0, 0, $F4
000127A4 0808 001B F4               		dc.b 8,	8, 0, $1B, $F4
000127A9 E601 0021 FC               		dc.b $E6, 1, 0,	$21, $FC
000127AE 03                         byte_11C90:	dc.b 3
000127AF F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
000127B4 0908 001E F4               		dc.b 9,	8, 0, $1E, $F4
000127B9 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
000127BE 02                         byte_11CA0:	dc.b 2
000127BF F10A 0000 F4               		dc.b $F1, $A, 0, 0, $F4
000127C4 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
000127C9 02                         byte_11CAB:	dc.b 2
000127CA F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
000127CF 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
000127D4 01                         byte_11CB6:	dc.b 1			; fuse	(just before it	explodes)
000127D5 E701 0023 FC               		dc.b $E7, 1, 0,	$23, $FC
000127DA 01                         byte_11CBC:	dc.b 1			; fuse
000127DB E701 0025 FC               		dc.b $E7, 1, 0,	$25, $FC
000127E0 01                         byte_11CC2:	dc.b 1			; fireball (after it exploded)
000127E1 FC00 0027 FC               		dc.b $FC, 0, 0,	$27, $FC
000127E6 01                         byte_11CC8:	dc.b 1			; fireball
000127E7 FC00 0028 FC               		dc.b $FC, 0, 0,	$28, $FC
000127EC                            		even
000127EC                            		even
000127EC                            
000127EC                            ; ===========================================================================
000127EC                            ; ---------------------------------------------------------------------------
000127EC                            ; Object 60 - Orbinaut enemy (LZ, SLZ, SBZ)
000127EC                            ; ---------------------------------------------------------------------------
000127EC                            
000127EC                            Obj60:					; XREF: Obj_Index
000127EC 7000                       		moveq	#0,d0
000127EE 1028 0024                  		move.b	$24(a0),d0
000127F2 323B 0000                  		move.w	Obj60_Index(pc,d0.w),d1
000127F6 4EFB 1000                  		jmp	Obj60_Index(pc,d1.w)
000127FA                            ; ===========================================================================
000127FA 0000                       Obj60_Index:	dc.w Obj60_Main-Obj60_Index
000127FC 0000                       		dc.w Obj60_ChkSonic-Obj60_Index
000127FE 0000                       		dc.w Obj60_Display-Obj60_Index
00012800 0000                       		dc.w Obj60_MoveOrb-Obj60_Index
00012802 0000                       		dc.w Obj60_ChkDel2-Obj60_Index
00012804                            ; ===========================================================================
00012804                            
00012804                            Obj60_Main:				; XREF: Obj60_Index
00012804 217C 0000 0000 0004        		move.l	#Map_obj60,4(a0)
0001280C 317C 0429 0002             		move.w	#$429,2(a0)	; SBZ specific code
00012812 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
00012818 6700                       		beq.s	loc_11D02
0001281A 317C 2429 0002             		move.w	#$2429,2(a0)	; SLZ specific code
00012820                            
00012820                            loc_11D02:
00012820 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00012826 6600                       		bne.s	loc_11D10
00012828 317C 0467 0002             		move.w	#$467,2(a0)	; LZ specific code
0001282E                            
0001282E                            loc_11D10:
0001282E 0028 0004 0001             		ori.b	#4,1(a0)
00012834 117C 0004 0018             		move.b	#4,$18(a0)
0001283A 117C 000B 0020             		move.b	#$B,$20(a0)
00012840 117C 000C 0019             		move.b	#$C,$19(a0)
00012846 7400                       		moveq	#0,d2
00012848 45E8 0037                  		lea	$37(a0),a2
0001284C 264A                       		movea.l	a2,a3
0001284E 524A                       		addq.w	#1,a2
00012850 7203                       		moveq	#3,d1
00012852                            
00012852                            Obj60_MakeOrbs:
00012852 6100 BD62                  		bsr.w	SingleObjLoad2
00012856 6600                       		bne.s	loc_11D90
00012858 5213                       		addq.b	#1,(a3)
0001285A 3A09                       		move.w	a1,d5
0001285C 0445 D000                  		subi.w	#-$3000,d5
00012860 EC4D                       		lsr.w	#6,d5
00012862 0245 007F                  		andi.w	#$7F,d5
00012866 14C5                       		move.b	d5,(a2)+
00012868 1290                       		move.b	0(a0),0(a1)	; load spiked orb object
0001286A 137C 0006 0024             		move.b	#6,$24(a1)
00012870 2368 0004 0004             		move.l	4(a0),4(a1)
00012876 3368 0002 0002             		move.w	2(a0),2(a1)
0001287C 0029 0004 0001             		ori.b	#4,1(a1)
00012882 137C 0004 0018             		move.b	#4,$18(a1)
00012888 137C 0008 0019             		move.b	#8,$19(a1)
0001288E 137C 0003 001A             		move.b	#3,$1A(a1)
00012894 137C 0098 0020             		move.b	#$98,$20(a1)
0001289A 1342 0026                  		move.b	d2,$26(a1)
0001289E 0602 0040                  		addi.b	#$40,d2
000128A2 2348 003C                  		move.l	a0,$3C(a1)
000128A6 51C9 FFAA                  		dbf	d1,Obj60_MakeOrbs ; repeat sequence 3 more times
000128AA                            
000128AA                            loc_11D90:
000128AA 7001                       		moveq	#1,d0
000128AC 0828 0000 0022             		btst	#0,$22(a0)
000128B2 6700                       		beq.s	Obj60_Move
000128B4 4440                       		neg.w	d0
000128B6                            
000128B6                            Obj60_Move:
000128B6 1140 0036                  		move.b	d0,$36(a0)
000128BA 1168 0028 0024             		move.b	$28(a0),$24(a0)	; if type is 02, skip the firing rountine
000128C0 5428 0024                  		addq.b	#2,$24(a0)
000128C4 317C FFC0 0010             		move.w	#-$40,$10(a0)	; move orbinaut	to the left
000128CA 0828 0000 0022             		btst	#0,$22(a0)	; is orbinaut reversed?
000128D0 6700                       		beq.s	locret_11DBC	; if not, branch
000128D2 4468 0010                  		neg.w	$10(a0)		; move orbinaut	to the right
000128D6                            
000128D6                            locret_11DBC:
000128D6 4E75                       		rts	
000128D8                            ; ===========================================================================
000128D8                            
000128D8                            Obj60_ChkSonic:				; XREF: Obj60_Index
000128D8 3038 D008                  		move.w	($FFFFD008).w,d0
000128DC 9068 0008                  		sub.w	8(a0),d0
000128E0 6400                       		bcc.s	loc_11DCA
000128E2 4440                       		neg.w	d0
000128E4                            
000128E4                            loc_11DCA:
000128E4 0C40 00A0                  		cmpi.w	#$A0,d0		; is Sonic within $A0 pixels of	orbinaut?
000128E8 6400                       		bcc.s	Obj60_Animate	; if not, branch
000128EA 3038 D00C                  		move.w	($FFFFD00C).w,d0
000128EE 9068 000C                  		sub.w	$C(a0),d0
000128F2 6400                       		bcc.s	loc_11DDC
000128F4 4440                       		neg.w	d0
000128F6                            
000128F6                            loc_11DDC:
000128F6 0C40 0050                  		cmpi.w	#$50,d0		; is Sonic within $50 pixels of	orbinaut?
000128FA 6400                       		bcc.s	Obj60_Animate	; if not, branch
000128FC 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
00012900 6600                       		bne.s	Obj60_Animate	; if yes, branch
00012902 117C 0001 001C             		move.b	#1,$1C(a0)	; use "angry" animation
00012908                            
00012908                            Obj60_Animate:
00012908 43F9 0000 0000             		lea	(Ani_obj60).l,a1
0001290E 6100 890C                  		bsr.w	AnimateSprite
00012912 6000 0000                  		bra.w	Obj60_ChkDel
00012916                            ; ===========================================================================
00012916                            
00012916                            Obj60_Display:				; XREF: Obj60_Index
00012916 6100 B7CC                  		bsr.w	SpeedToPos
0001291A                            
0001291A                            Obj60_ChkDel:				; XREF: Obj60_Animate
0001291A 3028 0008                  		move.w	8(a0),d0
0001291E 0240 FF80                  		andi.w	#$FF80,d0
00012922 3238 F700                  		move.w	($FFFFF700).w,d1
00012926 0441 0080                  		subi.w	#$80,d1
0001292A 0241 FF80                  		andi.w	#$FF80,d1
0001292E 9041                       		sub.w	d1,d0
00012930 0C40 0280                  		cmpi.w	#$280,d0
00012934 6200 0000                  		bhi.w	Obj60_ChkGone
00012938 6000 B7D0                  		bra.w	DisplaySprite
0001293C                            ; ===========================================================================
0001293C                            
0001293C                            Obj60_ChkGone:				; XREF: Obj60_ChkDel
0001293C 45F8 FC00                  		lea	($FFFFFC00).w,a2
00012940 7000                       		moveq	#0,d0
00012942 1028 0023                  		move.b	$23(a0),d0
00012946 6700                       		beq.s	loc_11E34
00012948 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0001294E                            
0001294E                            loc_11E34:
0001294E 45E8 0037                  		lea	$37(a0),a2
00012952 7400                       		moveq	#0,d2
00012954 141A                       		move.b	(a2)+,d2
00012956 5342                       		subq.w	#1,d2
00012958 6500                       		bcs.s	Obj60_Delete
0001295A                            
0001295A                            loc_11E40:
0001295A 7000                       		moveq	#0,d0
0001295C 101A                       		move.b	(a2)+,d0
0001295E ED48                       		lsl.w	#6,d0
00012960 0680 00FF D000             		addi.l	#$FFD000,d0
00012966 2240                       		movea.l	d0,a1
00012968 6100 B7DE                  		bsr.w	DeleteObject2
0001296C 51CA FFEC                  		dbf	d2,loc_11E40
00012970                            
00012970                            Obj60_Delete:
00012970 6000 B7D4                  		bra.w	DeleteObject
00012974                            ; ===========================================================================
00012974                            
00012974                            Obj60_MoveOrb:				; XREF: Obj60_Index
00012974 2268 003C                  		movea.l	$3C(a0),a1
00012978 0C11 0060                  		cmpi.b	#$60,0(a1)
0001297C 6600 B7C8                  		bne.w	DeleteObject
00012980 0C29 0002 001A             		cmpi.b	#2,$1A(a1)
00012986 6600                       		bne.s	Obj60_Circle
00012988 0C28 0040 0026             		cmpi.b	#$40,$26(a0)
0001298E 6600                       		bne.s	Obj60_Circle
00012990 5428 0024                  		addq.b	#2,$24(a0)
00012994 5329 0037                  		subq.b	#1,$37(a1)
00012998 6600                       		bne.s	Obj60_FireOrb
0001299A 5429 0024                  		addq.b	#2,$24(a1)
0001299E                            
0001299E                            Obj60_FireOrb:
0001299E 317C FE00 0010             		move.w	#-$200,$10(a0)	; move orb to the left (quickly)
000129A4 0829 0000 0022             		btst	#0,$22(a1)
000129AA 6700                       		beq.s	Obj60_Display2
000129AC 4468 0010                  		neg.w	$10(a0)
000129B0                            
000129B0                            Obj60_Display2:
000129B0 6000 B758                  		bra.w	DisplaySprite
000129B4                            ; ===========================================================================
000129B4                            
000129B4                            Obj60_Circle:				; XREF: Obj60_MoveOrb
000129B4 1028 0026                  		move.b	$26(a0),d0
000129B8 4EB9 0000 33D4             		jsr	(CalcSine).l
000129BE E841                       		asr.w	#4,d1
000129C0 D269 0008                  		add.w	8(a1),d1
000129C4 3141 0008                  		move.w	d1,8(a0)
000129C8 E840                       		asr.w	#4,d0
000129CA D069 000C                  		add.w	$C(a1),d0
000129CE 3140 000C                  		move.w	d0,$C(a0)
000129D2 1029 0036                  		move.b	$36(a1),d0
000129D6 D128 0026                  		add.b	d0,$26(a0)
000129DA 6000 B72E                  		bra.w	DisplaySprite
000129DE                            ; ===========================================================================
000129DE                            
000129DE                            Obj60_ChkDel2:				; XREF: Obj60_Index
000129DE 6100 B704                  		bsr.w	SpeedToPos
000129E2 4A28 0001                  		tst.b	1(a0)
000129E6 6A00 B75E                  		bpl.w	DeleteObject
000129EA 6000 B71E                  		bra.w	DisplaySprite
000129EE                            ; ===========================================================================
000129EE                            Ani_obj60:
000129EE                            	include "_anim\obj60.asm"
000129EE                            ; ---------------------------------------------------------------------------
000129EE                            ; Animation script - Orbinaut enemy
000129EE                            ; ---------------------------------------------------------------------------
000129EE 0000                       		dc.w byte_11EDA-Ani_obj60
000129F0 0000                       		dc.w byte_11EDE-Ani_obj60
000129F2 0F00 FF00                  byte_11EDA:	dc.b $F, 0, $FF, 0
000129F6 0F01 02FE 0100             byte_11EDE:	dc.b $F, 1, 2, $FE, 1, 0
000129FC                            		even
000129FC                            		even
000129FC                            
000129FC                            ; ---------------------------------------------------------------------------
000129FC                            ; Sprite mappings - Orbinaut enemy (LZ,	SLZ, SBZ)
000129FC                            ; ---------------------------------------------------------------------------
000129FC                            Map_obj60:
000129FC                            	include "_maps\obj60.asm"
000129FC                            ; ---------------------------------------------------------------------------
000129FC                            ; Sprite mappings - Orbinaut enemy (LZ,	SLZ, SBZ)
000129FC                            ; ---------------------------------------------------------------------------
000129FC 0000 0000                  		dc.w byte_11EEC-Map_obj60, byte_11EF2-Map_obj60
00012A00 0000 0000                  		dc.w byte_11EF8-Map_obj60, byte_11EFE-Map_obj60
00012A04 01                         byte_11EEC:	dc.b 1
00012A05 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
00012A0A 01                         byte_11EF2:	dc.b 1
00012A0B F40A 2009 F4               		dc.b $F4, $A, $20, 9, $F4
00012A10 01                         byte_11EF8:	dc.b 1
00012A11 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
00012A16 01                         byte_11EFE:	dc.b 1
00012A17 F805 001B F8               		dc.b $F8, 5, 0,	$1B, $F8
00012A1C                            		even
00012A1C                            		even
00012A1C                            
00012A1C                            ; ===========================================================================
00012A1C                            ; ---------------------------------------------------------------------------
00012A1C                            ; Object 16 - harpoon (LZ)
00012A1C                            ; ---------------------------------------------------------------------------
00012A1C                            
00012A1C                            Obj16:					; XREF: Obj_Index
00012A1C 7000                       		moveq	#0,d0
00012A1E 1028 0024                  		move.b	$24(a0),d0
00012A22 323B 0000                  		move.w	Obj16_Index(pc,d0.w),d1
00012A26 4EFB 1000                  		jmp	Obj16_Index(pc,d1.w)
00012A2A                            ; ===========================================================================
00012A2A 0000                       Obj16_Index:	dc.w Obj16_Main-Obj16_Index
00012A2C 0000                       		dc.w Obj16_Move-Obj16_Index
00012A2E 0000                       		dc.w Obj16_Wait-Obj16_Index
00012A30                            ; ===========================================================================
00012A30                            
00012A30                            Obj16_Main:				; XREF: Obj16_Index
00012A30 5428 0024                  		addq.b	#2,$24(a0)
00012A34 217C 0000 0000 0004        		move.l	#Map_obj16,4(a0)
00012A3C 317C 03CC 0002             		move.w	#$3CC,2(a0)
00012A42 0028 0004 0001             		ori.b	#4,1(a0)
00012A48 117C 0004 0018             		move.b	#4,$18(a0)
00012A4E 1168 0028 001C             		move.b	$28(a0),$1C(a0)
00012A54 117C 0014 0019             		move.b	#$14,$19(a0)
00012A5A 317C 003C 0030             		move.w	#60,$30(a0)
00012A60                            
00012A60                            Obj16_Move:				; XREF: Obj16_Index
00012A60 43F9 0000 0000             		lea	(Ani_obj16).l,a1
00012A66 6100 87B4                  		bsr.w	AnimateSprite
00012A6A 7000                       		moveq	#0,d0
00012A6C 1028 001A                  		move.b	$1A(a0),d0	; move frame number to d0
00012A70 117B 0000 0020             		move.b	Obj16_Data(pc,d0.w),$20(a0) ; load collision response (based on	d0)
00012A76 6000 D754                  		bra.w	MarkObjGone
00012A7A                            ; ===========================================================================
00012A7A 9B9C 9D9E 9FA0             Obj16_Data:	dc.b $9B, $9C, $9D, $9E, $9F, $A0
00012A80                            ; ===========================================================================
00012A80                            
00012A80                            Obj16_Wait:				; XREF: Obj16_Index
00012A80 5368 0030                  		subq.w	#1,$30(a0)
00012A84 6A00                       		bpl.s	Obj16_ChkDel
00012A86 317C 003C 0030             		move.w	#60,$30(a0)
00012A8C 5528 0024                  		subq.b	#2,$24(a0)	; run "Obj16_Move" subroutine
00012A90 0868 0000 001C             		bchg	#0,$1C(a0)	; reverse animation
00012A96                            
00012A96                            Obj16_ChkDel:
00012A96 6000 D734                  		bra.w	MarkObjGone
00012A9A                            ; ===========================================================================
00012A9A                            Ani_obj16:
00012A9A                            	include "_anim\obj16.asm"
00012A9A                            ; ---------------------------------------------------------------------------
00012A9A                            ; Animation script - harpoon (LZ)
00012A9A                            ; ---------------------------------------------------------------------------
00012A9A 0000                       		dc.w byte_11F8A-Ani_obj16
00012A9C 0000                       		dc.w byte_11F8E-Ani_obj16
00012A9E 0000                       		dc.w byte_11F92-Ani_obj16
00012AA0 0000                       		dc.w byte_11F96-Ani_obj16
00012AA2 0301 02FC                  byte_11F8A:	dc.b 3,	1, 2, $FC
00012AA6 0301 00FC                  byte_11F8E:	dc.b 3,	1, 0, $FC
00012AAA 0304 05FC                  byte_11F92:	dc.b 3,	4, 5, $FC
00012AAE 0304 03FC                  byte_11F96:	dc.b 3,	4, 3, $FC
00012AB2                            		even
00012AB2                            		even
00012AB2                            
00012AB2                            ; ---------------------------------------------------------------------------
00012AB2                            ; Sprite mappings - harpoon (LZ)
00012AB2                            ; ---------------------------------------------------------------------------
00012AB2                            Map_obj16:
00012AB2                            	include "_maps\obj16.asm"
00012AB2                            ; ---------------------------------------------------------------------------
00012AB2                            ; Sprite mappings - harpoon (LZ)
00012AB2                            ; ---------------------------------------------------------------------------
00012AB2 0000 0000                  		dc.w byte_11FA6-Map_obj16, byte_11FAC-Map_obj16
00012AB6 0000 0000                  		dc.w byte_11FB2-Map_obj16, byte_11FBD-Map_obj16
00012ABA 0000 0000                  		dc.w byte_11FC3-Map_obj16, byte_11FC9-Map_obj16
00012ABE 01                         byte_11FA6:	dc.b 1
00012ABF FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8
00012AC4 01                         byte_11FAC:	dc.b 1
00012AC5 FC0C 0002 F8               		dc.b $FC, $C, 0, 2, $F8
00012ACA 02                         byte_11FB2:	dc.b 2
00012ACB FC08 0006 F8               		dc.b $FC, 8, 0,	6, $F8
00012AD0 FC08 0003 10               		dc.b $FC, 8, 0,	3, $10
00012AD5 01                         byte_11FBD:	dc.b 1
00012AD6 F801 0009 FC               		dc.b $F8, 1, 0,	9, $FC
00012ADB 01                         byte_11FC3:	dc.b 1
00012ADC E803 000B FC               		dc.b $E8, 3, 0,	$B, $FC
00012AE1 02                         byte_11FC9:	dc.b 2
00012AE2 D802 000B FC               		dc.b $D8, 2, 0,	$B, $FC
00012AE7 F002 000F FC               		dc.b $F0, 2, 0,	$F, $FC
00012AEC                            		even
00012AEC                            		even
00012AEC                            
00012AEC                            ; ===========================================================================
00012AEC                            ; ---------------------------------------------------------------------------
00012AEC                            ; Object 61 - blocks (LZ)
00012AEC                            ; ---------------------------------------------------------------------------
00012AEC                            
00012AEC                            Obj61:					; XREF: Obj_Index
00012AEC 7000                       		moveq	#0,d0
00012AEE 1028 0024                  		move.b	$24(a0),d0
00012AF2 323B 0000                  		move.w	Obj61_Index(pc,d0.w),d1
00012AF6 4EFB 1000                  		jmp	Obj61_Index(pc,d1.w)
00012AFA                            ; ===========================================================================
00012AFA 0000                       Obj61_Index:	dc.w Obj61_Main-Obj61_Index
00012AFC 0000                       		dc.w Obj61_Action-Obj61_Index
00012AFE                            
00012AFE 1010                       Obj61_Var:	dc.b $10, $10		; width, height
00012B00 200C                       		dc.b $20, $C
00012B02 1010                       		dc.b $10, $10
00012B04 1010                       		dc.b $10, $10
00012B06                            ; ===========================================================================
00012B06                            
00012B06                            Obj61_Main:				; XREF: Obj61_Index
00012B06 5428 0024                  		addq.b	#2,$24(a0)
00012B0A 217C 0000 0000 0004        		move.l	#Map_obj61,4(a0)
00012B12 317C 43E6 0002             		move.w	#$43E6,2(a0)
00012B18 117C 0004 0001             		move.b	#4,1(a0)
00012B1E 117C 0003 0018             		move.b	#3,$18(a0)
00012B24 7000                       		moveq	#0,d0
00012B26 1028 0028                  		move.b	$28(a0),d0
00012B2A E648                       		lsr.w	#3,d0
00012B2C 0240 000E                  		andi.w	#$E,d0
00012B30 45FB 00CC                  		lea	Obj61_Var(pc,d0.w),a2
00012B34 115A 0019                  		move.b	(a2)+,$19(a0)
00012B38 1152 0016                  		move.b	(a2),$16(a0)
00012B3C E248                       		lsr.w	#1,d0
00012B3E 1140 001A                  		move.b	d0,$1A(a0)
00012B42 3168 0008 0034             		move.w	8(a0),$34(a0)
00012B48 3168 000C 0030             		move.w	$C(a0),$30(a0)
00012B4E 1028 0028                  		move.b	$28(a0),d0
00012B52 0200 000F                  		andi.b	#$F,d0
00012B56 6700                       		beq.s	Obj61_Action
00012B58 0C00 0007                  		cmpi.b	#7,d0
00012B5C 6700                       		beq.s	Obj61_Action
00012B5E 117C 0001 0038             		move.b	#1,$38(a0)
00012B64                            
00012B64                            Obj61_Action:				; XREF: Obj61_Index
00012B64 3F28 0008                  		move.w	8(a0),-(sp)
00012B68 7000                       		moveq	#0,d0
00012B6A 1028 0028                  		move.b	$28(a0),d0
00012B6E 0240 000F                  		andi.w	#$F,d0
00012B72 D040                       		add.w	d0,d0
00012B74 323B 0000                  		move.w	Obj61_TypeIndex(pc,d0.w),d1
00012B78 4EBB 1000                  		jsr	Obj61_TypeIndex(pc,d1.w)
00012B7C 381F                       		move.w	(sp)+,d4
00012B7E 4A28 0001                  		tst.b	1(a0)
00012B82 6A00                       		bpl.s	Obj61_ChkDel
00012B84 7200                       		moveq	#0,d1
00012B86 1228 0019                  		move.b	$19(a0),d1
00012B8A 0641 000B                  		addi.w	#$B,d1
00012B8E 7400                       		moveq	#0,d2
00012B90 1428 0016                  		move.b	$16(a0),d2
00012B94 3602                       		move.w	d2,d3
00012B96 5243                       		addq.w	#1,d3
00012B98 6100 D95A                  		bsr.w	SolidObject
00012B9C 1144 003F                  		move.b	d4,$3F(a0)
00012BA0 6100 0000                  		bsr.w	loc_12180
00012BA4                            
00012BA4                            Obj61_ChkDel:
00012BA4 3028 0034                  		move.w	$34(a0),d0
00012BA8 0240 FF80                  		andi.w	#$FF80,d0
00012BAC 3238 F700                  		move.w	($FFFFF700).w,d1
00012BB0 0441 0080                  		subi.w	#$80,d1
00012BB4 0241 FF80                  		andi.w	#$FF80,d1
00012BB8 9041                       		sub.w	d1,d0
00012BBA 0C40 0280                  		cmpi.w	#$280,d0
00012BBE 6200 B586                  		bhi.w	DeleteObject
00012BC2 6000 B546                  		bra.w	DisplaySprite
00012BC6                            ; ===========================================================================
00012BC6 0000 0000                  Obj61_TypeIndex:dc.w Obj61_Type00-Obj61_TypeIndex, Obj61_Type01-Obj61_TypeIndex
00012BCA 0000 0000                  		dc.w Obj61_Type02-Obj61_TypeIndex, Obj61_Type01-Obj61_TypeIndex
00012BCE 0000 0000                  		dc.w Obj61_Type04-Obj61_TypeIndex, Obj61_Type05-Obj61_TypeIndex
00012BD2 0000 0000                  		dc.w Obj61_Type02-Obj61_TypeIndex, Obj61_Type07-Obj61_TypeIndex
00012BD6                            ; ===========================================================================
00012BD6                            
00012BD6                            Obj61_Type00:				; XREF: Obj61_TypeIndex
00012BD6 4E75                       		rts	
00012BD8                            ; ===========================================================================
00012BD8                            
00012BD8                            Obj61_Type01:				; XREF: Obj61_TypeIndex
00012BD8 4A68 0036                  		tst.w	$36(a0)		; is Sonic standing on the object?
00012BDC 6600                       		bne.s	loc_120D6	; if yes, branch
00012BDE 0828 0003 0022             		btst	#3,$22(a0)
00012BE4 6700                       		beq.s	locret_120D4
00012BE6 317C 001E 0036             		move.w	#30,$36(a0)	; wait for � second
00012BEC                            
00012BEC                            locret_120D4:
00012BEC 4E75                       		rts	
00012BEE                            ; ===========================================================================
00012BEE                            
00012BEE                            loc_120D6:
00012BEE 5368 0036                  		subq.w	#1,$36(a0)	; subtract 1 from waiting time
00012BF2 66F8                       		bne.s	locret_120D4	; if time remains, branch
00012BF4 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
00012BF8 4228 0038                  		clr.b	$38(a0)
00012BFC 4E75                       		rts	
00012BFE                            ; ===========================================================================
00012BFE                            
00012BFE                            Obj61_Type02:				; XREF: Obj61_TypeIndex
00012BFE 6100 B4E4                  		bsr.w	SpeedToPos
00012C02 5068 0012                  		addq.w	#8,$12(a0)	; make object fall
00012C06 6100 0000                  		bsr.w	ObjHitFloor
00012C0A 4A41                       		tst.w	d1
00012C0C 6A00 0000                  		bpl.w	locret_12106
00012C10 5241                       		addq.w	#1,d1
00012C12 D368 000C                  		add.w	d1,$C(a0)
00012C16 4268 0012                  		clr.w	$12(a0)		; stop when it touches the floor
00012C1A 4228 0028                  		clr.b	$28(a0)		; set type to 00 (non-moving type)
00012C1E                            
00012C1E                            locret_12106:
00012C1E 4E75                       		rts	
00012C20                            ; ===========================================================================
00012C20                            
00012C20                            Obj61_Type04:				; XREF: Obj61_TypeIndex
00012C20 6100 B4C2                  		bsr.w	SpeedToPos
00012C24 5168 0012                  		subq.w	#8,$12(a0)	; make object rise
00012C28 6100 0000                  		bsr.w	ObjHitCeiling
00012C2C 4A41                       		tst.w	d1
00012C2E 6A00 0000                  		bpl.w	locret_12126
00012C32 9368 000C                  		sub.w	d1,$C(a0)
00012C36 4268 0012                  		clr.w	$12(a0)		; stop when it touches the ceiling
00012C3A 4228 0028                  		clr.b	$28(a0)		; set type to 00 (non-moving type)
00012C3E                            
00012C3E                            locret_12126:
00012C3E 4E75                       		rts	
00012C40                            ; ===========================================================================
00012C40                            
00012C40                            Obj61_Type05:				; XREF: Obj61_TypeIndex
00012C40 0C28 0001 003F             		cmpi.b	#1,$3F(a0)	; is Sonic touching the	object?
00012C46 6600                       		bne.s	locret_12138	; if not, branch
00012C48 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
00012C4C 4228 0038                  		clr.b	$38(a0)
00012C50                            
00012C50                            locret_12138:
00012C50 4E75                       		rts	
00012C52                            ; ===========================================================================
00012C52                            
00012C52                            Obj61_Type07:				; XREF: Obj61_TypeIndex
00012C52 3038 F646                  		move.w	($FFFFF646).w,d0
00012C56 9068 000C                  		sub.w	$C(a0),d0
00012C5A 6700                       		beq.s	locret_1217E
00012C5C 6400                       		bcc.s	loc_12162
00012C5E 0C40 FFFE                  		cmpi.w	#-2,d0
00012C62 6C00                       		bge.s	loc_1214E
00012C64 70FE                       		moveq	#-2,d0
00012C66                            
00012C66                            loc_1214E:
00012C66 D168 000C                  		add.w	d0,$C(a0)	; make the block rise with water level
00012C6A 6100 0000                  		bsr.w	ObjHitCeiling
00012C6E 4A41                       		tst.w	d1
00012C70 6A00 0000                  		bpl.w	locret_12160
00012C74 9368 000C                  		sub.w	d1,$C(a0)
00012C78                            
00012C78                            locret_12160:
00012C78 4E75                       		rts	
00012C7A                            ; ===========================================================================
00012C7A                            
00012C7A                            loc_12162:				; XREF: Obj61_Type07
00012C7A 0C40 0002                  		cmpi.w	#2,d0
00012C7E 6F00                       		ble.s	loc_1216A
00012C80 7002                       		moveq	#2,d0
00012C82                            
00012C82                            loc_1216A:
00012C82 D168 000C                  		add.w	d0,$C(a0)	; make the block sink with water level
00012C86 6100 0000                  		bsr.w	ObjHitFloor
00012C8A 4A41                       		tst.w	d1
00012C8C 6A00 0000                  		bpl.w	locret_1217E
00012C90 5241                       		addq.w	#1,d1
00012C92 D368 000C                  		add.w	d1,$C(a0)
00012C96                            
00012C96                            locret_1217E:
00012C96 4E75                       		rts	
00012C98                            ; ===========================================================================
00012C98                            
00012C98                            loc_12180:				; XREF: Obj61_Action
00012C98 4A28 0038                  		tst.b	$38(a0)
00012C9C 6700                       		beq.s	locret_121C0
00012C9E 0828 0003 0022             		btst	#3,$22(a0)
00012CA4 6600                       		bne.s	loc_1219A
00012CA6 4A28 003E                  		tst.b	$3E(a0)
00012CAA 6700                       		beq.s	locret_121C0
00012CAC 5928 003E                  		subq.b	#4,$3E(a0)
00012CB0 6000                       		bra.s	loc_121A6
00012CB2                            ; ===========================================================================
00012CB2                            
00012CB2                            loc_1219A:
00012CB2 0C28 0040 003E             		cmpi.b	#$40,$3E(a0)
00012CB8 6700                       		beq.s	locret_121C0
00012CBA 5828 003E                  		addq.b	#4,$3E(a0)
00012CBE                            
00012CBE                            loc_121A6:
00012CBE 1028 003E                  		move.b	$3E(a0),d0
00012CC2 4EB9 0000 33D4             		jsr	(CalcSine).l
00012CC8 323C 0400                  		move.w	#$400,d1
00012CCC C1C1                       		muls.w	d1,d0
00012CCE 4840                       		swap	d0
00012CD0 D068 0030                  		add.w	$30(a0),d0
00012CD4 3140 000C                  		move.w	d0,$C(a0)
00012CD8                            
00012CD8                            locret_121C0:
00012CD8 4E75                       		rts	
00012CDA                            ; ===========================================================================
00012CDA                            ; ---------------------------------------------------------------------------
00012CDA                            ; Sprite mappings - blocks (LZ)
00012CDA                            ; ---------------------------------------------------------------------------
00012CDA                            Map_obj61:
00012CDA                            	include "_maps\obj61.asm"
00012CDA                            ; ---------------------------------------------------------------------------
00012CDA                            ; Sprite mappings - blocks (LZ)
00012CDA                            ; ---------------------------------------------------------------------------
00012CDA 0000 0000                  		dc.w byte_121CA-Map_obj61, byte_121D0-Map_obj61
00012CDE 0000 0000                  		dc.w byte_121DB-Map_obj61, byte_121E1-Map_obj61
00012CE2 01                         byte_121CA:	dc.b 1
00012CE3 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
00012CE8 02                         byte_121D0:	dc.b 2
00012CE9 F40E 0069 E0               		dc.b $F4, $E, 0, $69, $E0
00012CEE F40E 0075 00               		dc.b $F4, $E, 0, $75, 0
00012CF3 01                         byte_121DB:	dc.b 1
00012CF4 F00F 011A F0               		dc.b $F0, $F, 1, $1A, $F0
00012CF9 01                         byte_121E1:	dc.b 1
00012CFA F00F FDFA F0               		dc.b $F0, $F, $FD, $FA,	$F0
00012D00 00                         		even
00012D00 00                         		even
00012D00                            
00012D00                            ; ===========================================================================
00012D00                            ; ---------------------------------------------------------------------------
00012D00                            ; Object 62 - gargoyle head (LZ)
00012D00                            ; ---------------------------------------------------------------------------
00012D00                            
00012D00                            Obj62:					; XREF: Obj_Index
00012D00 7000                       		moveq	#0,d0
00012D02 1028 0024                  		move.b	$24(a0),d0
00012D06 323B 0000                  		move.w	Obj62_Index(pc,d0.w),d1
00012D0A 4EBB 1000                  		jsr	Obj62_Index(pc,d1.w)
00012D0E 6000 D4BC                  		bra.w	MarkObjGone
00012D12                            ; ===========================================================================
00012D12 0000                       Obj62_Index:	dc.w Obj62_Main-Obj62_Index
00012D14 0000                       		dc.w Obj62_MakeFire-Obj62_Index
00012D16 0000                       		dc.w Obj62_FireBall-Obj62_Index
00012D18 0000                       		dc.w Obj62_AniFire-Obj62_Index
00012D1A                            
00012D1A 1E3C 5A78 96B4 D2F0        Obj62_SpitRate:	dc.b 30, 60, 90, 120, 150, 180,	210, 240
00012D22                            ; ===========================================================================
00012D22                            
00012D22                            Obj62_Main:				; XREF: Obj62_Index
00012D22 5428 0024                  		addq.b	#2,$24(a0)
00012D26 217C 0000 0000 0004        		move.l	#Map_obj62,4(a0)
00012D2E 317C 42E9 0002             		move.w	#$42E9,2(a0)
00012D34 0028 0004 0001             		ori.b	#4,1(a0)
00012D3A 117C 0003 0018             		move.b	#3,$18(a0)
00012D40 117C 0010 0019             		move.b	#$10,$19(a0)
00012D46 1028 0028                  		move.b	$28(a0),d0	; get object type
00012D4A 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00012D4E 117B 00CA 001F             		move.b	Obj62_SpitRate(pc,d0.w),$1F(a0)	; set fireball spit rate
00012D54 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
00012D5A 0228 000F 0028             		andi.b	#$F,$28(a0)
00012D60                            
00012D60                            Obj62_MakeFire:				; XREF: Obj62_Index
00012D60 5328 001E                  		subq.b	#1,$1E(a0)
00012D64 6600                       		bne.s	Obj62_NoFire
00012D66 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
00012D6C 6100 B618                  		bsr.w	ChkObjOnScreen
00012D70 6600                       		bne.s	Obj62_NoFire
00012D72 6100 B82C                  		bsr.w	SingleObjLoad
00012D76 6600                       		bne.s	Obj62_NoFire
00012D78 12BC 0062                  		move.b	#$62,0(a1)	; load fireball	object
00012D7C 5829 0024                  		addq.b	#4,$24(a1)
00012D80 3368 0008 0008             		move.w	8(a0),8(a1)
00012D86 3368 000C 000C             		move.w	$C(a0),$C(a1)
00012D8C 1368 0001 0001             		move.b	1(a0),1(a1)
00012D92 1368 0022 0022             		move.b	$22(a0),$22(a1)
00012D98                            
00012D98                            Obj62_NoFire:
00012D98 4E75                       		rts	
00012D9A                            ; ===========================================================================
00012D9A                            
00012D9A                            Obj62_FireBall:				; XREF: Obj62_Index
00012D9A 5428 0024                  		addq.b	#2,$24(a0)
00012D9E 117C 0008 0016             		move.b	#8,$16(a0)
00012DA4 117C 0008 0017             		move.b	#8,$17(a0)
00012DAA 217C 0000 0000 0004        		move.l	#Map_obj62,4(a0)
00012DB2 317C 02E9 0002             		move.w	#$2E9,2(a0)
00012DB8 0028 0004 0001             		ori.b	#4,1(a0)
00012DBE 117C 0004 0018             		move.b	#4,$18(a0)
00012DC4 117C 0098 0020             		move.b	#$98,$20(a0)
00012DCA 117C 0008 0019             		move.b	#8,$19(a0)
00012DD0 117C 0002 001A             		move.b	#2,$1A(a0)
00012DD6 5068 000C                  		addq.w	#8,$C(a0)
00012DDA 317C 0200 0010             		move.w	#$200,$10(a0)
00012DE0 0828 0000 0022             		btst	#0,$22(a0)
00012DE6 6600                       		bne.s	Obj62_Sound
00012DE8 4468 0010                  		neg.w	$10(a0)
00012DEC                            
00012DEC                            Obj62_Sound:
00012DEC 303C 00AE                  		move.w	#$AE,d0
00012DF0 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play lava ball sound
00012DF6                            
00012DF6                            Obj62_AniFire:				; XREF: Obj62_Index
00012DF6 1038 FE05                  		move.b	($FFFFFE05).w,d0
00012DFA 0200 0007                  		andi.b	#7,d0
00012DFE 6600                       		bne.s	Obj62_StopFire
00012E00 0868 0000 001A             		bchg	#0,$1A(a0)	; switch between frame 01 and 02
00012E06                            
00012E06                            Obj62_StopFire:
00012E06 6100 B2DC                  		bsr.w	SpeedToPos
00012E0A 0828 0000 0022             		btst	#0,$22(a0)
00012E10 6600                       		bne.s	Obj62_StopFire2
00012E12 76F8                       		moveq	#-8,d3
00012E14 6100 0000                  		bsr.w	ObjHitWallLeft
00012E18 4A41                       		tst.w	d1
00012E1A 6B00 B32A                  		bmi.w	DeleteObject	; delete if the	fireball hits a	wall
00012E1E 4E75                       		rts	
00012E20                            ; ===========================================================================
00012E20                            
00012E20                            Obj62_StopFire2:
00012E20 7608                       		moveq	#8,d3
00012E22 6100 0000                  		bsr.w	ObjHitWallRight
00012E26 4A41                       		tst.w	d1
00012E28 6B00 B31C                  		bmi.w	DeleteObject
00012E2C 4E75                       		rts	
00012E2E                            ; ===========================================================================
00012E2E                            ; ---------------------------------------------------------------------------
00012E2E                            ; Sprite mappings - gargoyle head (LZ)
00012E2E                            ; ---------------------------------------------------------------------------
00012E2E                            Map_obj62:
00012E2E                            	include "_maps\obj62.asm"
00012E2E                            ; ---------------------------------------------------------------------------
00012E2E                            ; Sprite mappings - gargoyle head (LZ)
00012E2E                            ; ---------------------------------------------------------------------------
00012E2E 0000 0000                  		dc.w byte_12320-Map_obj62, byte_12320-Map_obj62
00012E32 0000 0000                  		dc.w byte_12330-Map_obj62, byte_12336-Map_obj62
00012E36 03                         byte_12320:	dc.b 3
00012E37 F004 0000 00               		dc.b $F0, 4, 0,	0, 0
00012E3C F80D 0002 F0               		dc.b $F8, $D, 0, 2, $F0
00012E41 0808 000A F8               		dc.b 8,	8, 0, $A, $F8
00012E46 01                         byte_12330:	dc.b 1
00012E47 FC04 000D F8               		dc.b $FC, 4, 0,	$D, $F8
00012E4C 01                         byte_12336:	dc.b 1
00012E4D FC04 000F F8               		dc.b $FC, 4, 0,	$F, $F8
00012E52                            		even
00012E52                            		even
00012E52                            
00012E52                            ; ===========================================================================
00012E52                            ; ---------------------------------------------------------------------------
00012E52                            ; Object 63 - platforms	on a conveyor belt (LZ)
00012E52                            ; ---------------------------------------------------------------------------
00012E52                            
00012E52                            Obj63:					; XREF: Obj_Index
00012E52 7000                       		moveq	#0,d0
00012E54 1028 0024                  		move.b	$24(a0),d0
00012E58 323B 0000                  		move.w	Obj63_Index(pc,d0.w),d1
00012E5C 4EBB 1000                  		jsr	Obj63_Index(pc,d1.w)
00012E60 3028 0030                  		move.w	$30(a0),d0
00012E64 0240 FF80                  		andi.w	#$FF80,d0
00012E68 3238 F700                  		move.w	($FFFFF700).w,d1
00012E6C 0441 0080                  		subi.w	#$80,d1
00012E70 0241 FF80                  		andi.w	#$FF80,d1
00012E74 9041                       		sub.w	d1,d0
00012E76 0C40 0280                  		cmpi.w	#$280,d0
00012E7A 6200                       		bhi.s	loc_1236A
00012E7C                            
00012E7C                            Obj63_Display:				; XREF: loc_1236A
00012E7C 6000 B28C                  		bra.w	DisplaySprite
00012E80                            ; ===========================================================================
00012E80                            
00012E80                            loc_1236A:				; XREF: Obj63
00012E80 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w
00012E86 6600                       		bne.s	loc_12378
00012E88 0C40 FF80                  		cmpi.w	#-$80,d0
00012E8C 64EE                       		bcc.s	Obj63_Display
00012E8E                            
00012E8E                            loc_12378:
00012E8E 1028 002F                  		move.b	$2F(a0),d0
00012E92 6A00 B2B2                  		bpl.w	DeleteObject
00012E96 0240 007F                  		andi.w	#$7F,d0
00012E9A 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00012E9E 08B2 0000 0000             		bclr	#0,(a2,d0.w)
00012EA4 6000 B2A0                  		bra.w	DeleteObject
00012EA8                            ; ===========================================================================
00012EA8 0000                       Obj63_Index:	dc.w Obj63_Main-Obj63_Index
00012EAA 0000                       		dc.w loc_124B2-Obj63_Index
00012EAC 0000                       		dc.w loc_124C2-Obj63_Index
00012EAE 0000                       		dc.w loc_124DE-Obj63_Index
00012EB0                            ; ===========================================================================
00012EB0                            
00012EB0                            Obj63_Main:				; XREF: Obj63_Index
00012EB0 1028 0028                  		move.b	$28(a0),d0
00012EB4 6B00 0000                  		bmi.w	loc_12460
00012EB8 5428 0024                  		addq.b	#2,$24(a0)
00012EBC 217C 0000 0000 0004        		move.l	#Map_obj63,4(a0)
00012EC4 317C 43F6 0002             		move.w	#$43F6,2(a0)
00012ECA 0028 0004 0001             		ori.b	#4,1(a0)
00012ED0 117C 0010 0019             		move.b	#$10,$19(a0)
00012ED6 117C 0004 0018             		move.b	#4,$18(a0)
00012EDC 0C28 007F 0028             		cmpi.b	#$7F,$28(a0)
00012EE2 6600                       		bne.s	loc_123E2
00012EE4 5828 0024                  		addq.b	#4,$24(a0)
00012EE8 317C 03F6 0002             		move.w	#$3F6,2(a0)
00012EEE 117C 0001 0018             		move.b	#1,$18(a0)
00012EF4 6000 0000                  		bra.w	loc_124DE
00012EF8                            ; ===========================================================================
00012EF8                            
00012EF8                            loc_123E2:
00012EF8 117C 0004 001A             		move.b	#4,$1A(a0)
00012EFE 7000                       		moveq	#0,d0
00012F00 1028 0028                  		move.b	$28(a0),d0
00012F04 3200                       		move.w	d0,d1
00012F06 E648                       		lsr.w	#3,d0
00012F08 0240 001E                  		andi.w	#$1E,d0
00012F0C 45FA 0000                  		lea	Obj63_Data(pc),a2
00012F10 D4F2 0000                  		adda.w	(a2,d0.w),a2
00012F14 315A 0038                  		move.w	(a2)+,$38(a0)
00012F18 315A 0030                  		move.w	(a2)+,$30(a0)
00012F1C 214A 003C                  		move.l	a2,$3C(a0)
00012F20 0241 000F                  		andi.w	#$F,d1
00012F24 E549                       		lsl.w	#2,d1
00012F26 1141 0038                  		move.b	d1,$38(a0)
00012F2A 117C 0004 003A             		move.b	#4,$3A(a0)
00012F30 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00012F34 6700                       		beq.s	loc_1244C
00012F36 117C 0001 003B             		move.b	#1,$3B(a0)
00012F3C 4428 003A                  		neg.b	$3A(a0)
00012F40 7200                       		moveq	#0,d1
00012F42 1228 0038                  		move.b	$38(a0),d1
00012F46 D228 003A                  		add.b	$3A(a0),d1
00012F4A B228 0039                  		cmp.b	$39(a0),d1
00012F4E 6500                       		bcs.s	loc_12448
00012F50 1001                       		move.b	d1,d0
00012F52 7200                       		moveq	#0,d1
00012F54 4A00                       		tst.b	d0
00012F56 6A00                       		bpl.s	loc_12448
00012F58 1228 0039                  		move.b	$39(a0),d1
00012F5C 5901                       		subq.b	#4,d1
00012F5E                            
00012F5E                            loc_12448:
00012F5E 1141 0038                  		move.b	d1,$38(a0)
00012F62                            
00012F62                            loc_1244C:
00012F62 3172 1000 0034             		move.w	(a2,d1.w),$34(a0)
00012F68 3172 1002 0036             		move.w	2(a2,d1.w),$36(a0)
00012F6E 6100 0000                  		bsr.w	Obj63_ChangeDir
00012F72 6000 0000                  		bra.w	loc_124B2
00012F76                            ; ===========================================================================
00012F76                            
00012F76                            loc_12460:				; XREF: Obj63_Main
00012F76 1140 002F                  		move.b	d0,$2F(a0)
00012F7A 0240 007F                  		andi.w	#$7F,d0
00012F7E 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00012F82 08F2 0000 0000             		bset	#0,(a2,d0.w)
00012F88 6600 B1BC                  		bne.w	DeleteObject
00012F8C D040                       		add.w	d0,d0
00012F8E 0240 001E                  		andi.w	#$1E,d0
00012F92 0640 0070                  		addi.w	#$70,d0
00012F96 45F9 0000 0000             		lea	(ObjPos_Index).l,a2
00012F9C D4F2 0000                  		adda.w	(a2,d0.w),a2
00012FA0 321A                       		move.w	(a2)+,d1
00012FA2 2248                       		movea.l	a0,a1
00012FA4 6000                       		bra.s	Obj63_MakePtfms
00012FA6                            ; ===========================================================================
00012FA6                            
00012FA6                            Obj63_Loop:
00012FA6 6100 B5F8                  		bsr.w	SingleObjLoad
00012FAA 6600                       		bne.s	loc_124AA
00012FAC                            
00012FAC                            Obj63_MakePtfms:			; XREF: loc_12460
00012FAC 12BC 0063                  		move.b	#$63,0(a1)
00012FB0 335A 0008                  		move.w	(a2)+,8(a1)
00012FB4 335A 000C                  		move.w	(a2)+,$C(a1)
00012FB8 301A                       		move.w	(a2)+,d0
00012FBA 1340 0028                  		move.b	d0,$28(a1)
00012FBE                            
00012FBE                            loc_124AA:
00012FBE 51C9 FFE6                  		dbf	d1,Obj63_Loop
00012FC2                            
00012FC2 588F                       		addq.l	#4,sp
00012FC4 4E75                       		rts	
00012FC6                            ; ===========================================================================
00012FC6                            
00012FC6                            loc_124B2:				; XREF: Obj63_Index
00012FC6 7200                       		moveq	#0,d1
00012FC8 1228 0019                  		move.b	$19(a0),d1
00012FCC 4EB9 0000 7EFC             		jsr	(PlatformObject).l
00012FD2 6000 0000                  		bra.w	sub_12502
00012FD6                            ; ===========================================================================
00012FD6                            
00012FD6                            loc_124C2:				; XREF: Obj63_Index
00012FD6 7200                       		moveq	#0,d1
00012FD8 1228 0019                  		move.b	$19(a0),d1
00012FDC 4EB9 0000 8070             		jsr	(ExitPlatform).l
00012FE2 3F28 0008                  		move.w	8(a0),-(sp)
00012FE6 6100 0000                  		bsr.w	sub_12502
00012FEA 341F                       		move.w	(sp)+,d2
00012FEC 4EF9 0000 85DA             		jmp	(MvSonicOnPtfm2).l
00012FF2                            ; ===========================================================================
00012FF2                            
00012FF2                            loc_124DE:				; XREF: Obj63_Index
00012FF2 3038 FE04                  		move.w	($FFFFFE04).w,d0
00012FF6 0240 0003                  		andi.w	#3,d0
00012FFA 6600                       		bne.s	loc_124FC
00012FFC 7201                       		moveq	#1,d1
00012FFE 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00013002 6700                       		beq.s	loc_124F2
00013004 4401                       		neg.b	d1
00013006                            
00013006                            loc_124F2:
00013006 D328 001A                  		add.b	d1,$1A(a0)
0001300A 0228 0003 001A             		andi.b	#3,$1A(a0)
00013010                            
00013010                            loc_124FC:
00013010 588F                       		addq.l	#4,sp
00013012 6000 D1B8                  		bra.w	MarkObjGone
00013016                            
00013016                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013016                            
00013016                            
00013016                            sub_12502:				; XREF: loc_124B2; loc_124C2
00013016 4A38 F7EE                  		tst.b	($FFFFF7EE).w
0001301A 6700                       		beq.s	loc_12520
0001301C 4A28 003B                  		tst.b	$3B(a0)
00013020 6600                       		bne.s	loc_12520
00013022 117C 0001 003B             		move.b	#1,$3B(a0)
00013028 11FC 0001 F7C0             		move.b	#1,($FFFFF7C0).w
0001302E 4428 003A                  		neg.b	$3A(a0)
00013032 6000                       		bra.s	loc_12534
00013034                            ; ===========================================================================
00013034                            
00013034                            loc_12520:
00013034 3028 0008                  		move.w	8(a0),d0
00013038 B068 0034                  		cmp.w	$34(a0),d0
0001303C 6600                       		bne.s	loc_1256A
0001303E 3028 000C                  		move.w	$C(a0),d0
00013042 B068 0036                  		cmp.w	$36(a0),d0
00013046 6600                       		bne.s	loc_1256A
00013048                            
00013048                            loc_12534:
00013048 7200                       		moveq	#0,d1
0001304A 1228 0038                  		move.b	$38(a0),d1
0001304E D228 003A                  		add.b	$3A(a0),d1
00013052 B228 0039                  		cmp.b	$39(a0),d1
00013056 6500                       		bcs.s	loc_12552
00013058 1001                       		move.b	d1,d0
0001305A 7200                       		moveq	#0,d1
0001305C 4A00                       		tst.b	d0
0001305E 6A00                       		bpl.s	loc_12552
00013060 1228 0039                  		move.b	$39(a0),d1
00013064 5901                       		subq.b	#4,d1
00013066                            
00013066                            loc_12552:
00013066 1141 0038                  		move.b	d1,$38(a0)
0001306A 2268 003C                  		movea.l	$3C(a0),a1
0001306E 3171 1000 0034             		move.w	(a1,d1.w),$34(a0)
00013074 3171 1002 0036             		move.w	2(a1,d1.w),$36(a0)
0001307A 6100 0000                  		bsr.w	Obj63_ChangeDir
0001307E                            
0001307E                            loc_1256A:
0001307E 6100 B064                  		bsr.w	SpeedToPos
00013082 4E75                       		rts	
00013084                            ; End of function sub_12502
00013084                            
00013084                            
00013084                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013084                            
00013084                            
00013084                            Obj63_ChangeDir:			; XREF: loc_123E2; sub_12502
00013084 7000                       		moveq	#0,d0
00013086 343C FF00                  		move.w	#-$100,d2
0001308A 3028 0008                  		move.w	8(a0),d0
0001308E 9068 0034                  		sub.w	$34(a0),d0
00013092 6400                       		bcc.s	loc_12584
00013094 4440                       		neg.w	d0
00013096 4442                       		neg.w	d2
00013098                            
00013098                            loc_12584:
00013098 7200                       		moveq	#0,d1
0001309A 363C FF00                  		move.w	#-$100,d3
0001309E 3228 000C                  		move.w	$C(a0),d1
000130A2 9268 0036                  		sub.w	$36(a0),d1
000130A6 6400                       		bcc.s	loc_12598
000130A8 4441                       		neg.w	d1
000130AA 4443                       		neg.w	d3
000130AC                            
000130AC                            loc_12598:
000130AC B240                       		cmp.w	d0,d1
000130AE 6500                       		bcs.s	loc_125C2
000130B0 3028 0008                  		move.w	8(a0),d0
000130B4 9068 0034                  		sub.w	$34(a0),d0
000130B8 6700                       		beq.s	loc_125AE
000130BA 48C0                       		ext.l	d0
000130BC E180                       		asl.l	#8,d0
000130BE 81C1                       		divs.w	d1,d0
000130C0 4440                       		neg.w	d0
000130C2                            
000130C2                            loc_125AE:
000130C2 3140 0010                  		move.w	d0,$10(a0)
000130C6 3143 0012                  		move.w	d3,$12(a0)
000130CA 4840                       		swap	d0
000130CC 3140 000A                  		move.w	d0,$A(a0)
000130D0 4268 000E                  		clr.w	$E(a0)
000130D4 4E75                       		rts	
000130D6                            ; ===========================================================================
000130D6                            
000130D6                            loc_125C2:				; XREF: Obj63_ChangeDir
000130D6 3228 000C                  		move.w	$C(a0),d1
000130DA 9268 0036                  		sub.w	$36(a0),d1
000130DE 6700                       		beq.s	loc_125D4
000130E0 48C1                       		ext.l	d1
000130E2 E181                       		asl.l	#8,d1
000130E4 83C0                       		divs.w	d0,d1
000130E6 4441                       		neg.w	d1
000130E8                            
000130E8                            loc_125D4:
000130E8 3141 0012                  		move.w	d1,$12(a0)
000130EC 3142 0010                  		move.w	d2,$10(a0)
000130F0 4841                       		swap	d1
000130F2 3141 000E                  		move.w	d1,$E(a0)
000130F6 4268 000A                  		clr.w	$A(a0)
000130FA 4E75                       		rts	
000130FC                            ; End of function Obj63_ChangeDir
000130FC                            
000130FC                            ; ===========================================================================
000130FC 0000                       Obj63_Data:	dc.w word_125F4-Obj63_Data
000130FE 0000                       		dc.w word_12610-Obj63_Data
00013100 0000                       		dc.w word_12628-Obj63_Data
00013102 0000                       		dc.w word_1263C-Obj63_Data
00013104 0000                       		dc.w word_12650-Obj63_Data
00013106 0000                       		dc.w word_12668-Obj63_Data
00013108 0018 1070 1078 021A 10BE+  word_125F4:	dc.w $18, $1070, $1078,	$21A, $10BE, $260, $10BE, $393
00013118 108C 03C5 1022 0390 1022+  		dc.w $108C, $3C5, $1022, $390, $1022, $244
00013124 0014 1280 127E 0280 12CE+  word_12610:	dc.w $14, $1280, $127E,	$280, $12CE, $2D0, $12CE, $46E
00013134 1232 0420 1232 02CC        		dc.w $1232, $420, $1232, $2CC
0001313C 0010 0D68 0D22 0482 0D22+  word_12628:	dc.w $10, $D68,	$D22, $482, $D22, $5DE,	$DAE, $5DE, $DAE, $482
00013150 0010 0DA0 0D62 03A2 0DEE+  word_1263C:	dc.w $10, $DA0,	$D62, $3A2, $DEE, $3A2,	$DEE, $4DE, $D62, $4DE
00013164 0014 0D00 0CAC 0242 0DDE+  word_12650:	dc.w $14, $D00,	$CAC, $242, $DDE, $242,	$DDE, $3DE, $C52, $3DE,	$C52, $29C
0001317C 0010 1300 1252 020A 13DE+  word_12668:	dc.w $10, $1300, $1252,	$20A, $13DE, $20A, $13DE, $2BE,	$1252, $2BE
00013190                            
00013190                            ; ---------------------------------------------------------------------------
00013190                            ; Sprite mappings - platforms on a conveyor belt (LZ)
00013190                            ; ---------------------------------------------------------------------------
00013190                            Map_obj63:
00013190                            	include "_maps\obj63.asm"
00013190                            ; ---------------------------------------------------------------------------
00013190                            ; Sprite mappings - platforms on a conveyor belt (LZ)
00013190                            ; ---------------------------------------------------------------------------
00013190 0000 0000                  		dc.w byte_12686-Map_obj63, byte_1268C-Map_obj63
00013194 0000 0000                  		dc.w byte_12692-Map_obj63, byte_12698-Map_obj63
00013198 0000                       		dc.w byte_1269E-Map_obj63
0001319A 01                         byte_12686:	dc.b 1
0001319B F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
000131A0 01                         byte_1268C:	dc.b 1
000131A1 F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
000131A6 01                         byte_12692:	dc.b 1
000131A7 F00F 0020 F0               		dc.b $F0, $F, 0, $20, $F0
000131AC 01                         byte_12698:	dc.b 1
000131AD F00F 0030 F0               		dc.b $F0, $F, 0, $30, $F0
000131B2 01                         byte_1269E:	dc.b 1
000131B3 F80D 0040 F0               		dc.b $F8, $D, 0, $40, $F0
000131B8                            		even
000131B8                            		even
000131B8                            
000131B8                            ; ===========================================================================
000131B8                            ; ---------------------------------------------------------------------------
000131B8                            ; Object 64 - bubbles (LZ)
000131B8                            ; ---------------------------------------------------------------------------
000131B8                            
000131B8                            Obj64:					; XREF: Obj_Index
000131B8 7000                       		moveq	#0,d0
000131BA 1028 0024                  		move.b	$24(a0),d0
000131BE 323B 0000                  		move.w	Obj64_Index(pc,d0.w),d1
000131C2 4EFB 1000                  		jmp	Obj64_Index(pc,d1.w)
000131C6                            ; ===========================================================================
000131C6 0000                       Obj64_Index:	dc.w Obj64_Main-Obj64_Index
000131C8 0000                       		dc.w Obj64_Animate-Obj64_Index
000131CA 0000                       		dc.w Obj64_ChkWater-Obj64_Index
000131CC 0000                       		dc.w Obj64_Display2-Obj64_Index
000131CE 0000                       		dc.w Obj64_Delete3-Obj64_Index
000131D0 0000                       		dc.w Obj64_BblMaker-Obj64_Index
000131D2                            ; ===========================================================================
000131D2                            
000131D2                            Obj64_Main:				; XREF: Obj64_Index
000131D2 5428 0024                  		addq.b	#2,$24(a0)
000131D6 217C 0000 0000 0004        		move.l	#Map_obj64,4(a0)
000131DE 317C 8348 0002             		move.w	#$8348,2(a0)
000131E4 117C 0084 0001             		move.b	#$84,1(a0)
000131EA 117C 0010 0019             		move.b	#$10,$19(a0)
000131F0 117C 0001 0018             		move.b	#1,$18(a0)
000131F6 1028 0028                  		move.b	$28(a0),d0	; get object type
000131FA 6A00                       		bpl.s	Obj64_Bubble	; if type is $0-$7F, branch
000131FC 5028 0024                  		addq.b	#8,$24(a0)
00013200 0240 007F                  		andi.w	#$7F,d0		; read only last 7 bits	(deduct	$80)
00013204 1140 0032                  		move.b	d0,$32(a0)
00013208 1140 0033                  		move.b	d0,$33(a0)
0001320C 117C 0006 001C             		move.b	#6,$1C(a0)
00013212 6000 0000                  		bra.w	Obj64_BblMaker
00013216                            ; ===========================================================================
00013216                            
00013216                            Obj64_Bubble:				; XREF: Obj64_Main
00013216 1140 001C                  		move.b	d0,$1C(a0)
0001321A 3168 0008 0030             		move.w	8(a0),$30(a0)
00013220 317C FF78 0012             		move.w	#-$88,$12(a0)	; float	bubble upwards
00013226 4EB9 0000 33AE             		jsr	(RandomNumber).l
0001322C 1140 0026                  		move.b	d0,$26(a0)
00013230                            
00013230                            Obj64_Animate:				; XREF: Obj64_Index
00013230 43F9 0000 0000             		lea	(Ani_obj64).l,a1
00013236 4EB9 0000 B21C             		jsr	AnimateSprite
0001323C 0C28 0006 001A             		cmpi.b	#6,$1A(a0)
00013242 6600                       		bne.s	Obj64_ChkWater
00013244 117C 0001 002E             		move.b	#1,$2E(a0)
0001324A                            
0001324A                            Obj64_ChkWater:				; XREF: Obj64_Index
0001324A 3038 F646                  		move.w	($FFFFF646).w,d0
0001324E B068 000C                  		cmp.w	$C(a0),d0	; is bubble underwater?
00013252 6500                       		bcs.s	Obj64_Wobble	; if yes, branch
00013254                            
00013254                            Obj64_Burst:				; XREF: Obj64_Wobble
00013254 117C 0006 0024             		move.b	#6,$24(a0)
0001325A 5628 001C                  		addq.b	#3,$1C(a0)	; run "bursting" animation
0001325E 6000 0000                  		bra.w	Obj64_Display2
00013262                            ; ===========================================================================
00013262                            
00013262                            Obj64_Wobble:				; XREF: Obj64_ChkWater
00013262 1028 0026                  		move.b	$26(a0),d0
00013266 5228 0026                  		addq.b	#1,$26(a0)
0001326A 0240 007F                  		andi.w	#$7F,d0
0001326E 43F9 0000 0000             		lea	(Obj0A_WobbleData).l,a1
00013274 1031 0000                  		move.b	(a1,d0.w),d0
00013278 4880                       		ext.w	d0
0001327A D068 0030                  		add.w	$30(a0),d0
0001327E 3140 0008                  		move.w	d0,8(a0)	; change bubble's horizontal position
00013282 4A28 002E                  		tst.b	$2E(a0)
00013286 6700                       		beq.s	Obj64_Display
00013288 6100 0000                  		bsr.w	Obj64_ChkSonic	; has Sonic touched the	bubble?
0001328C 6700                       		beq.s	Obj64_Display	; if not, branch
0001328E                            
0001328E 6100 0000                  		bsr.w	ResumeMusic	; cancel countdown music
00013292 303C 00AD                  		move.w	#$AD,d0
00013296 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play collecting	bubble sound
0001329C 43F8 D000                  		lea	($FFFFD000).w,a1
000132A0 4269 0010                  		clr.w	$10(a1)
000132A4 4269 0012                  		clr.w	$12(a1)
000132A8 4269 0014                  		clr.w	$14(a1)
000132AC 137C 0015 001C             		move.b	#$15,$1C(a1)
000132B2 337C 0023 003E             		move.w	#$23,$3E(a1)
000132B8 137C 0000 003C             		move.b	#0,$3C(a1)
000132BE 08A9 0005 0022             		bclr	#5,$22(a1)
000132C4 08A9 0004 0022             		bclr	#4,$22(a1)
000132CA 0829 0002 0022             		btst	#2,$22(a1)
000132D0 6700 FF82                  		beq.w	Obj64_Burst
000132D4 08A9 0002 0022             		bclr	#2,$22(a1)
000132DA 137C 0013 0016             		move.b	#$13,$16(a1)
000132E0 137C 0009 0017             		move.b	#9,$17(a1)
000132E6 5B69 000C                  		subq.w	#5,$C(a1)
000132EA 6000 FF68                  		bra.w	Obj64_Burst
000132EE                            ; ===========================================================================
000132EE                            
000132EE                            Obj64_Display:				; XREF: Obj64_Wobble
000132EE 6100 ADF4                  		bsr.w	SpeedToPos
000132F2 4A28 0001                  		tst.b	1(a0)
000132F6 6A00                       		bpl.s	Obj64_Delete
000132F8 4EFA AE10                  		jmp	DisplaySprite
000132FC                            ; ===========================================================================
000132FC                            
000132FC                            Obj64_Delete:
000132FC 4EFA AE48                  		jmp	DeleteObject
00013300                            ; ===========================================================================
00013300                            
00013300                            Obj64_Display2:				; XREF: Obj64_Index
00013300 43F9 0000 0000             		lea	(Ani_obj64).l,a1
00013306 4EB9 0000 B21C             		jsr	AnimateSprite
0001330C 4A28 0001                  		tst.b	1(a0)
00013310 6A00                       		bpl.s	Obj64_Delete2
00013312 4EFA ADF6                  		jmp	DisplaySprite
00013316                            ; ===========================================================================
00013316                            
00013316                            Obj64_Delete2:
00013316 4EFA AE2E                  		jmp	DeleteObject
0001331A                            ; ===========================================================================
0001331A                            
0001331A                            Obj64_Delete3:				; XREF: Obj64_Index
0001331A 6000 AE2A                  		bra.w	DeleteObject
0001331E                            ; ===========================================================================
0001331E                            
0001331E                            Obj64_BblMaker:				; XREF: Obj64_Index
0001331E 4A68 0036                  		tst.w	$36(a0)
00013322 6600                       		bne.s	loc_12874
00013324 3038 F646                  		move.w	($FFFFF646).w,d0
00013328 B068 000C                  		cmp.w	$C(a0),d0	; is bubble maker underwater?
0001332C 6400 0000                  		bcc.w	Obj64_ChkDel	; if not, branch
00013330 4A28 0001                  		tst.b	1(a0)
00013334 6A00 0000                  		bpl.w	Obj64_ChkDel
00013338 5368 0038                  		subq.w	#1,$38(a0)
0001333C 6A00 0000                  		bpl.w	loc_12914
00013340 317C 0001 0036             		move.w	#1,$36(a0)
00013346                            
00013346                            loc_1283A:
00013346 4EB9 0000 33AE             		jsr	(RandomNumber).l
0001334C 3200                       		move.w	d0,d1
0001334E 0240 0007                  		andi.w	#7,d0
00013352 0C40 0006                  		cmpi.w	#6,d0
00013356 64EE                       		bcc.s	loc_1283A
00013358                            
00013358 1140 0034                  		move.b	d0,$34(a0)
0001335C 0241 000C                  		andi.w	#$C,d1
00013360 43F9 0000 0000             		lea	(Obj64_BblTypes).l,a1
00013366 D2C1                       		adda.w	d1,a1
00013368 2149 003C                  		move.l	a1,$3C(a0)
0001336C 5328 0032                  		subq.b	#1,$32(a0)
00013370 6A00                       		bpl.s	loc_12872
00013372 1168 0033 0032             		move.b	$33(a0),$32(a0)
00013378 08E8 0007 0036             		bset	#7,$36(a0)
0001337E                            
0001337E                            loc_12872:
0001337E 6000                       		bra.s	loc_1287C
00013380                            ; ===========================================================================
00013380                            
00013380                            loc_12874:				; XREF: Obj64_BblMaker
00013380 5368 0038                  		subq.w	#1,$38(a0)
00013384 6A00 0000                  		bpl.w	loc_12914
00013388                            
00013388                            loc_1287C:
00013388 4EB9 0000 33AE             		jsr	(RandomNumber).l
0001338E 0240 001F                  		andi.w	#$1F,d0
00013392 3140 0038                  		move.w	d0,$38(a0)
00013396 6100 B208                  		bsr.w	SingleObjLoad
0001339A 6600                       		bne.s	loc_128F8
0001339C 12BC 0064                  		move.b	#$64,0(a1)	; load bubble object
000133A0 3368 0008 0008             		move.w	8(a0),8(a1)
000133A6 4EB9 0000 33AE             		jsr	(RandomNumber).l
000133AC 0240 000F                  		andi.w	#$F,d0
000133B0 5140                       		subq.w	#8,d0
000133B2 D169 0008                  		add.w	d0,8(a1)
000133B6 3368 000C 000C             		move.w	$C(a0),$C(a1)
000133BC 7000                       		moveq	#0,d0
000133BE 1028 0034                  		move.b	$34(a0),d0
000133C2 2468 003C                  		movea.l	$3C(a0),a2
000133C6 1372 0000 0028             		move.b	(a2,d0.w),$28(a1)
000133CC 0828 0007 0036             		btst	#7,$36(a0)
000133D2 6700                       		beq.s	loc_128F8
000133D4 4EB9 0000 33AE             		jsr	(RandomNumber).l
000133DA 0240 0003                  		andi.w	#3,d0
000133DE 6600                       		bne.s	loc_128E4
000133E0 08E8 0006 0036             		bset	#6,$36(a0)
000133E6 6600                       		bne.s	loc_128F8
000133E8 137C 0002 0028             		move.b	#2,$28(a1)
000133EE                            
000133EE                            loc_128E4:
000133EE 4A28 0034                  		tst.b	$34(a0)
000133F2 6600                       		bne.s	loc_128F8
000133F4 08E8 0006 0036             		bset	#6,$36(a0)
000133FA 6600                       		bne.s	loc_128F8
000133FC 137C 0002 0028             		move.b	#2,$28(a1)
00013402                            
00013402                            loc_128F8:
00013402 5328 0034                  		subq.b	#1,$34(a0)
00013406 6A00                       		bpl.s	loc_12914
00013408 4EB9 0000 33AE             		jsr	(RandomNumber).l
0001340E 0240 007F                  		andi.w	#$7F,d0
00013412 0640 0080                  		addi.w	#$80,d0
00013416 D168 0038                  		add.w	d0,$38(a0)
0001341A 4268 0036                  		clr.w	$36(a0)
0001341E                            
0001341E                            loc_12914:
0001341E 43F9 0000 0000             		lea	(Ani_obj64).l,a1
00013424 4EB9 0000 B21C             		jsr	AnimateSprite
0001342A                            
0001342A                            Obj64_ChkDel:				; XREF: Obj64_BblMaker
0001342A 3028 0008                  		move.w	8(a0),d0
0001342E 0240 FF80                  		andi.w	#$FF80,d0
00013432 3238 F700                  		move.w	($FFFFF700).w,d1
00013436 0441 0080                  		subi.w	#$80,d1
0001343A 0241 FF80                  		andi.w	#$FF80,d1
0001343E 9041                       		sub.w	d1,d0
00013440 0C40 0280                  		cmpi.w	#$280,d0
00013444 6200 AD00                  		bhi.w	DeleteObject
00013448 3038 F646                  		move.w	($FFFFF646).w,d0
0001344C B068 000C                  		cmp.w	$C(a0),d0
00013450 6500 ACB8                  		bcs.w	DisplaySprite
00013454 4E75                       		rts	
00013456                            ; ===========================================================================
00013456                            ; bubble production sequence
00013456                            
00013456                            ; 0 = small bubble, 1 =	large bubble
00013456                            
00013456 0001 0000 0000 0100 0000+  Obj64_BblTypes:	dc.b 0,	1, 0, 0, 0, 0, 1, 0, 0,	0, 0, 1, 0, 1, 0, 0, 1,	0
00013468                            
00013468                            ; ===========================================================================
00013468                            
00013468                            Obj64_ChkSonic:				; XREF: Obj64_Wobble
00013468 4A38 F7C8                  		tst.b	($FFFFF7C8).w
0001346C 6B00                       		bmi.s	loc_12998
0001346E 43F8 D000                  		lea	($FFFFD000).w,a1
00013472 3029 0008                  		move.w	8(a1),d0
00013476 3228 0008                  		move.w	8(a0),d1
0001347A 0441 0010                  		subi.w	#$10,d1
0001347E B240                       		cmp.w	d0,d1
00013480 6400                       		bcc.s	loc_12998
00013482 0641 0020                  		addi.w	#$20,d1
00013486 B240                       		cmp.w	d0,d1
00013488 6500                       		bcs.s	loc_12998
0001348A 3029 000C                  		move.w	$C(a1),d0
0001348E 3228 000C                  		move.w	$C(a0),d1
00013492 B240                       		cmp.w	d0,d1
00013494 6400                       		bcc.s	loc_12998
00013496 0641 0010                  		addi.w	#$10,d1
0001349A B240                       		cmp.w	d0,d1
0001349C 6500                       		bcs.s	loc_12998
0001349E 7001                       		moveq	#1,d0
000134A0 4E75                       		rts	
000134A2                            ; ===========================================================================
000134A2                            
000134A2                            loc_12998:
000134A2 7000                       		moveq	#0,d0
000134A4 4E75                       		rts	
000134A6                            ; ===========================================================================
000134A6                            Ani_obj64:
000134A6                            	include "_anim\obj64.asm"
000134A6                            ; ---------------------------------------------------------------------------
000134A6                            ; Animation script - bubbles (LZ)
000134A6                            ; ---------------------------------------------------------------------------
000134A6 0000                       		dc.w byte_129AA-Ani_obj64
000134A8 0000                       		dc.w byte_129B0-Ani_obj64
000134AA 0000                       		dc.w byte_129B6-Ani_obj64
000134AC 0000                       		dc.w byte_129BE-Ani_obj64
000134AE 0000                       		dc.w byte_129BE-Ani_obj64
000134B0 0000                       		dc.w byte_129C0-Ani_obj64
000134B2 0000                       		dc.w byte_129C6-Ani_obj64
000134B4 0E00 0102 FC00             byte_129AA:	dc.b $E, 0, 1, 2, $FC, 0
000134BA 0E01 0203 04FC             byte_129B0:	dc.b $E, 1, 2, 3, 4, $FC
000134C0 0E02 0304 0506 FC00        byte_129B6:	dc.b $E, 2, 3, 4, 5, 6,	$FC, 0
000134C8 04FC                       byte_129BE:	dc.b 4,	$FC
000134CA 0406 0708 FC00             byte_129C0:	dc.b 4,	6, 7, 8, $FC, 0
000134D0 0F13 1415 FF               byte_129C6:	dc.b $F, $13, $14, $15,	$FF
000134D6 00                         		even
000134D6 00                         		even
000134D6                            
000134D6                            ; ---------------------------------------------------------------------------
000134D6                            ; Sprite mappings - bubbles (LZ)
000134D6                            ; ---------------------------------------------------------------------------
000134D6                            Map_obj64:
000134D6                            	include "_maps\obj64.asm"
000134D6                            ; ---------------------------------------------------------------------------
000134D6                            ; Sprite mappings - bubbles (LZ)
000134D6                            ; ---------------------------------------------------------------------------
000134D6 0000 0000                  		dc.w byte_129FA-Map_obj64, byte_12A00-Map_obj64
000134DA 0000 0000                  		dc.w byte_12A06-Map_obj64, byte_12A0C-Map_obj64
000134DE 0000 0000                  		dc.w byte_12A12-Map_obj64, byte_12A18-Map_obj64
000134E2 0000 0000                  		dc.w byte_12A1E-Map_obj64, byte_12A24-Map_obj64
000134E6 0000 0000                  		dc.w byte_12A39-Map_obj64, byte_12A4E-Map_obj64
000134EA 0000 0000                  		dc.w byte_12A54-Map_obj64, byte_12A5A-Map_obj64
000134EE 0000 0000                  		dc.w byte_12A60-Map_obj64, byte_12A66-Map_obj64
000134F2 0000 0000                  		dc.w byte_12A6C-Map_obj64, byte_12A72-Map_obj64
000134F6 0000 0000                  		dc.w byte_12A78-Map_obj64, byte_12A7E-Map_obj64
000134FA 0000 0000                  		dc.w byte_12A84-Map_obj64, byte_12A8A-Map_obj64
000134FE 0000 0000                  		dc.w byte_12A90-Map_obj64, byte_12A96-Map_obj64
00013502 0000                       		dc.w byte_12A9C-Map_obj64
00013504 01                         byte_129FA:	dc.b 1
00013505 FC00 0000 FC               		dc.b $FC, 0, 0,	0, $FC
0001350A 01                         byte_12A00:	dc.b 1
0001350B FC00 0001 FC               		dc.b $FC, 0, 0,	1, $FC
00013510 01                         byte_12A06:	dc.b 1
00013511 FC00 0002 FC               		dc.b $FC, 0, 0,	2, $FC
00013516 01                         byte_12A0C:	dc.b 1
00013517 F805 0003 F8               		dc.b $F8, 5, 0,	3, $F8
0001351C 01                         byte_12A12:	dc.b 1
0001351D F805 0007 F8               		dc.b $F8, 5, 0,	7, $F8
00013522 01                         byte_12A18:	dc.b 1
00013523 F40A 000B F4               		dc.b $F4, $A, 0, $B, $F4
00013528 01                         byte_12A1E:	dc.b 1
00013529 F00F 0014 F0               		dc.b $F0, $F, 0, $14, $F0
0001352E 04                         byte_12A24:	dc.b 4
0001352F F005 0024 F0               		dc.b $F0, 5, 0,	$24, $F0
00013534 F005 0824 00               		dc.b $F0, 5, 8,	$24, 0
00013539 0005 1024 F0               		dc.b 0,	5, $10,	$24, $F0
0001353E 0005 1824 00               		dc.b 0,	5, $18,	$24, 0
00013543 04                         byte_12A39:	dc.b 4
00013544 F005 0028 F0               		dc.b $F0, 5, 0,	$28, $F0
00013549 F005 0828 00               		dc.b $F0, 5, 8,	$28, 0
0001354E 0005 1028 F0               		dc.b 0,	5, $10,	$28, $F0
00013553 0005 1828 00               		dc.b 0,	5, $18,	$28, 0
00013558 01                         byte_12A4E:	dc.b 1
00013559 F406 002C F8               		dc.b $F4, 6, 0,	$2C, $F8
0001355E 01                         byte_12A54:	dc.b 1
0001355F F406 0032 F8               		dc.b $F4, 6, 0,	$32, $F8
00013564 01                         byte_12A5A:	dc.b 1
00013565 F406 0038 F8               		dc.b $F4, 6, 0,	$38, $F8
0001356A 01                         byte_12A60:	dc.b 1
0001356B F406 003E F8               		dc.b $F4, 6, 0,	$3E, $F8
00013570 01                         byte_12A66:	dc.b 1
00013571 F406 2044 F8               		dc.b $F4, 6, $20, $44, $F8
00013576 01                         byte_12A6C:	dc.b 1
00013577 F406 204A F8               		dc.b $F4, 6, $20, $4A, $F8
0001357C 01                         byte_12A72:	dc.b 1
0001357D F406 2050 F8               		dc.b $F4, 6, $20, $50, $F8
00013582 01                         byte_12A78:	dc.b 1
00013583 F406 2056 F8               		dc.b $F4, 6, $20, $56, $F8
00013588 01                         byte_12A7E:	dc.b 1
00013589 F406 205C F8               		dc.b $F4, 6, $20, $5C, $F8
0001358E 01                         byte_12A84:	dc.b 1
0001358F F406 2062 F8               		dc.b $F4, 6, $20, $62, $F8
00013594 01                         byte_12A8A:	dc.b 1
00013595 F805 0068 F8               		dc.b $F8, 5, 0,	$68, $F8
0001359A 01                         byte_12A90:	dc.b 1
0001359B F805 006C F8               		dc.b $F8, 5, 0,	$6C, $F8
000135A0 01                         byte_12A96:	dc.b 1
000135A1 F805 0070 F8               		dc.b $F8, 5, 0,	$70, $F8
000135A6 00                         byte_12A9C:	dc.b 0
000135A8 00                         		even
000135A8 00                         		even
000135A8                            
000135A8                            ; ===========================================================================
000135A8                            ; ---------------------------------------------------------------------------
000135A8                            ; Object 65 - waterfalls (LZ)
000135A8                            ; ---------------------------------------------------------------------------
000135A8                            
000135A8                            Obj65:					; XREF: Obj_Index
000135A8 7000                       		moveq	#0,d0
000135AA 1028 0024                  		move.b	$24(a0),d0
000135AE 323B 0000                  		move.w	Obj65_Index(pc,d0.w),d1
000135B2 4EFB 1000                  		jmp	Obj65_Index(pc,d1.w)
000135B6                            ; ===========================================================================
000135B6 0000                       Obj65_Index:	dc.w Obj65_Main-Obj65_Index
000135B8 0000                       		dc.w Obj65_Animate-Obj65_Index
000135BA 0000                       		dc.w Obj65_ChkDel-Obj65_Index
000135BC 0000                       		dc.w Obj65_FixHeight-Obj65_Index
000135BE 0000                       		dc.w loc_12B36-Obj65_Index
000135C0                            ; ===========================================================================
000135C0                            
000135C0                            Obj65_Main:				; XREF: Obj65_Index
000135C0 5828 0024                  		addq.b	#4,$24(a0)
000135C4 217C 0000 0000 0004        		move.l	#Map_obj65,4(a0)
000135CC 317C 4259 0002             		move.w	#$4259,2(a0)
000135D2 0028 0004 0001             		ori.b	#4,1(a0)
000135D8 117C 0018 0019             		move.b	#$18,$19(a0)
000135DE 117C 0001 0018             		move.b	#1,$18(a0)
000135E4 1028 0028                  		move.b	$28(a0),d0	; get object type
000135E8 6A00                       		bpl.s	loc_12AE6
000135EA 08E8 0007 0002             		bset	#7,2(a0)
000135F0                            
000135F0                            loc_12AE6:
000135F0 0200 000F                  		andi.b	#$F,d0		; read only the	2nd byte
000135F4 1140 001A                  		move.b	d0,$1A(a0)	; set frame number
000135F8 0C00 0009                  		cmpi.b	#9,d0		; is object type $x9 ?
000135FC 6600                       		bne.s	Obj65_ChkDel	; if not, branch
000135FE 4228 0018                  		clr.b	$18(a0)
00013602 5528 0024                  		subq.b	#2,$24(a0)
00013606 0828 0006 0028             		btst	#6,$28(a0)	; is object type $4x ?
0001360C 6700                       		beq.s	loc_12B0A	; if not, branch
0001360E 117C 0006 0024             		move.b	#6,$24(a0)
00013614                            
00013614                            loc_12B0A:
00013614 0828 0005 0028             		btst	#5,$28(a0)	; is object type $Ax ?
0001361A 6700                       		beq.s	Obj65_Animate	; if not, branch
0001361C 117C 0008 0024             		move.b	#8,$24(a0)
00013622                            
00013622                            Obj65_Animate:				; XREF: Obj65_Index
00013622 43F9 0000 0000             		lea	(Ani_obj65).l,a1
00013628 4EB9 0000 B21C             		jsr	AnimateSprite
0001362E                            
0001362E                            Obj65_ChkDel:				; XREF: Obj65_Index
0001362E 6000 CB9C                  		bra.w	MarkObjGone
00013632                            ; ===========================================================================
00013632                            
00013632                            Obj65_FixHeight:			; XREF: Obj65_Index
00013632 3038 F646                  		move.w	($FFFFF646).w,d0
00013636 0440 0010                  		subi.w	#$10,d0
0001363A 3140 000C                  		move.w	d0,$C(a0)	; match	object position	to water height
0001363E 60E2                       		bra.s	Obj65_Animate
00013640                            ; ===========================================================================
00013640                            
00013640                            loc_12B36:				; XREF: Obj65_Index
00013640 08A8 0007 0002             		bclr	#7,2(a0)
00013646 0C38 0007 A506             		cmpi.b	#7,($FFFFA506).w
0001364C 6600                       		bne.s	Obj65_Animate2
0001364E 08E8 0007 0002             		bset	#7,2(a0)
00013654                            
00013654                            Obj65_Animate2:
00013654 60CC                       		bra.s	Obj65_Animate
00013656                            ; ===========================================================================
00013656                            Ani_obj65:
00013656                            	include "_anim\obj65.asm"
00013656                            ; ---------------------------------------------------------------------------
00013656                            ; Animation script - waterfall (LZ)
00013656                            ; ---------------------------------------------------------------------------
00013656 0000                       		dc.w byte_12B4E-Ani_obj65
00013658 0509 0A0B FF               byte_12B4E:	dc.b 5,	9, $A, $B, $FF
0001365E 00                         		even
0001365E 00                         		even
0001365E                            
0001365E                            ; ---------------------------------------------------------------------------
0001365E                            ; Sprite mappings - waterfalls (LZ)
0001365E                            ; ---------------------------------------------------------------------------
0001365E                            Map_obj65:
0001365E                            	include "_maps\obj65.asm"
0001365E                            ; ---------------------------------------------------------------------------
0001365E                            ; Sprite mappings - waterfalls (LZ)
0001365E                            ; ---------------------------------------------------------------------------
0001365E 0000 0000                  		dc.w byte_12B6C-Map_obj65, byte_12B72-Map_obj65
00013662 0000 0000                  		dc.w byte_12B7D-Map_obj65, byte_12B88-Map_obj65
00013666 0000 0000                  		dc.w byte_12B8E-Map_obj65, byte_12B99-Map_obj65
0001366A 0000 0000                  		dc.w byte_12B9F-Map_obj65, byte_12BA5-Map_obj65
0001366E 0000 0000                  		dc.w byte_12BAB-Map_obj65, byte_12BB6-Map_obj65
00013672 0000 0000                  		dc.w byte_12BC1-Map_obj65, byte_12BCC-Map_obj65
00013676 01                         byte_12B6C:	dc.b 1
00013677 F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
0001367C 02                         byte_12B72:	dc.b 2
0001367D F804 0008 FC               		dc.b $F8, 4, 0,	8, $FC
00013682 0008 000A F4               		dc.b 0,	8, 0, $A, $F4
00013687 02                         byte_12B7D:	dc.b 2
00013688 F800 0008 00               		dc.b $F8, 0, 0,	8, 0
0001368D 0004 000D F8               		dc.b 0,	4, 0, $D, $F8
00013692 01                         byte_12B88:	dc.b 1
00013693 F801 000F 00               		dc.b $F8, 1, 0,	$F, 0
00013698 02                         byte_12B8E:	dc.b 2
00013699 F800 0008 00               		dc.b $F8, 0, 0,	8, 0
0001369E 0004 000D F8               		dc.b 0,	4, 0, $D, $F8
000136A3 01                         byte_12B99:	dc.b 1
000136A4 F801 0011 00               		dc.b $F8, 1, 0,	$11, 0
000136A9 01                         byte_12B9F:	dc.b 1
000136AA F801 0013 00               		dc.b $F8, 1, 0,	$13, 0
000136AF 01                         byte_12BA5:	dc.b 1
000136B0 F007 0015 F8               		dc.b $F0, 7, 0,	$15, $F8
000136B5 02                         byte_12BAB:	dc.b 2
000136B6 F80C 001D F6               		dc.b $F8, $C, 0, $1D, $F6
000136BB 000C 0021 E8               		dc.b 0,	$C, 0, $21, $E8
000136C0 02                         byte_12BB6:	dc.b 2
000136C1 F00B 0025 E8               		dc.b $F0, $B, 0, $25, $E8
000136C6 F00B 0031 00               		dc.b $F0, $B, 0, $31, 0
000136CB 02                         byte_12BC1:	dc.b 2
000136CC F00B 003D E8               		dc.b $F0, $B, 0, $3D, $E8
000136D1 F00B 0049 00               		dc.b $F0, $B, 0, $49, 0
000136D6 02                         byte_12BCC:	dc.b 2
000136D7 F00B 0055 E8               		dc.b $F0, $B, 0, $55, $E8
000136DC F00B 0061 00               		dc.b $F0, $B, 0, $61, 0
000136E2 00                         		even
000136E2 00                         		even
000136E2                            
000136E2                            ; ===========================================================================
000136E2                            ; ---------------------------------------------------------------------------
000136E2                            ; Object 01 - Sonic
000136E2                            ; ---------------------------------------------------------------------------
000136E2                            
000136E2                            Obj01:					; XREF: Obj_Index
000136E2 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
000136E6 6700                       		beq.s	Obj01_Normal	; if not, branch
000136E8 4EF9 0000 0000             		jmp	DebugMode
000136EE                            ; ===========================================================================
000136EE                            
000136EE                            Obj01_Normal:
000136EE 7000                       		moveq	#0,d0
000136F0 1028 0024                  		move.b	$24(a0),d0
000136F4 323B 0000                  		move.w	Obj01_Index(pc,d0.w),d1
000136F8 4EFB 1000                  		jmp	Obj01_Index(pc,d1.w)
000136FC                            ; ===========================================================================
000136FC 0000                       Obj01_Index:	dc.w Obj01_Main-Obj01_Index
000136FE 0000                       		dc.w Obj01_Control-Obj01_Index
00013700 0000                       		dc.w Obj01_Hurt-Obj01_Index
00013702 0000                       		dc.w Obj01_Death-Obj01_Index
00013704 0000                       		dc.w Obj01_ResetLevel-Obj01_Index
00013706 0000                       		dc.w Sonic_Drowned-Obj01_Index
00013708                            ; ===========================================================================
00013708                            
00013708                            Obj01_Main:				; XREF: Obj01_Index
00013708 5428 0024                  		addq.b	#2,$24(a0)
0001370C 117C 0013 0016             		move.b	#$13,$16(a0)
00013712 117C 0009 0017             		move.b	#9,$17(a0)
00013718 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
00013720 317C 0780 0002             		move.w	#$780,2(a0)
00013726 117C 0002 0018             		move.b	#2,$18(a0)
0001372C 117C 0018 0019             		move.b	#$18,$19(a0)
00013732 117C 0004 0001             		move.b	#4,1(a0)
00013738 31FC 0600 F760             		move.w	#$600,($FFFFF760).w ; Sonic's top speed
0001373E 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; Sonic's acceleration
00013744 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; Sonic's deceleration
0001374A 11FC 0005 D1C0             		move.b	#5,$FFFFD1C0.w
00013750 11FC 0000 FE19             		move.b	#0,(Super_Sonic_flag).w
00013756                            
00013756                            Obj01_Control:				; XREF: Obj01_Index
00013756 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug cheat enabled?
0001375A 6700                       		beq.s	loc_12C58	; if not, branch
0001375C 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button C pressed?
00013762 6700                       		beq.s	loc_12C58	; if not, branch
00013764 31FC 0001 FE08             		move.w	#1,($FFFFFE08).w ; change Sonic	into a ring/item
0001376A 4238 F7CC                  		clr.b	($FFFFF7CC).w
0001376E 4E75                       		rts
00013770                            ; ===========================================================================
00013770                            
00013770                            loc_12C58:
00013770 4A38 F7CC                  		tst.b	($FFFFF7CC).w	; are controls locked?
00013774 6600                       		bne.s	loc_12C64	; if yes, branch
00013776 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w ; enable joypad control
0001377C                            
0001377C                            loc_12C64:
0001377C 0838 0000 F7C8             		btst	#0,($FFFFF7C8).w ; are controls	locked?
00013782 6600                       		bne.s	loc_12C7E	; if yes, branch
00013784 7000                       		moveq	#0,d0
00013786 1028 0022                  		move.b	$22(a0),d0
0001378A 0240 0006                  		andi.w	#6,d0
0001378E 323B 0000                  		move.w	Obj01_Modes(pc,d0.w),d1
00013792 4EBB 1000                  		jsr	Obj01_Modes(pc,d1.w)
00013796                            
00013796                            loc_12C7E:
00013796 6100                       		bsr.s	Sonic_Display
00013798 6100 0000                  		bsr.w	Sonic_Super
0001379C 6100 0000                  		bsr.w	Sonic_RecordPos
000137A0 6100 0000                  		bsr.w	Sonic_Water
000137A4 1178 F768 0036             		move.b	($FFFFF768).w,$36(a0)
000137AA 1178 F76A 0037             		move.b	($FFFFF76A).w,$37(a0)
000137B0 4A38 F7C7                  		tst.b	($FFFFF7C7).w
000137B4 6700                       		beq.s	loc_12CA6
000137B6 4A28 001C                  		tst.b	$1C(a0)
000137BA 6600                       		bne.s	loc_12CA6
000137BC 1168 001D 001C             		move.b	$1D(a0),$1C(a0)
000137C2                            
000137C2                            loc_12CA6:
000137C2 6100 0000                  		bsr.w	Sonic_Animate
000137C6 4A38 F7C8                  		tst.b	($FFFFF7C8).w
000137CA 6B00                       		bmi.s	loc_12CB6
000137CC 4EB9 0000 0000             		jsr	TouchResponse
000137D2                            
000137D2                            loc_12CB6:
000137D2 6100 0000                  		bsr.w	Sonic_Loops
000137D6 6100 0000                  		bsr.w	LoadSonicDynPLC
000137DA 4E75                       		rts
000137DC                            ; ===========================================================================
000137DC 0000                       Obj01_Modes:	dc.w Obj01_MdNormal-Obj01_Modes
000137DE 0000                       		dc.w Obj01_MdJump-Obj01_Modes
000137E0 0000                       		dc.w Obj01_MdRoll-Obj01_Modes
000137E2 0000                       		dc.w Obj01_MdJump2-Obj01_Modes
000137E4                            ; ---------------------------------------------------------------------------
000137E4                            ; Music	to play	after invincibility wears off
000137E4                            ; ---------------------------------------------------------------------------
000137E4                            ;MusicList2:	incbin	misc\muslist2.bin
000137E4                            ;		even
000137E4                            ; ===========================================================================
000137E4                            
000137E4                            Sonic_Display:				; XREF: loc_12C7E
000137E4 3028 0030                  		move.w	$30(a0),d0
000137E8 6700                       		beq.s	Obj01_Display
000137EA 5368 0030                  		subq.w	#1,$30(a0)
000137EE E648                       		lsr.w	#3,d0
000137F0 6400                       		bcc.s	Obj01_ChkInvin
000137F2                            
000137F2                            Obj01_Display:
000137F2 4EBA A916                  		jsr	DisplaySprite
000137F6                            
000137F6                            ; Second part of the NineKode. Play different music on different acts - after invincibility wears off
000137F6                            
000137F6                            Obj01_ChkInvin:
000137F6 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
000137FA 6700 0000                  		beq.w	Obj01_ChkShoes	; if not, branch	; change to beq.w
000137FE 4A68 0032                  		tst.w	$32(a0)		; check	time remaining for invinciblity
00013802 6700 0000                  		beq.w	Obj01_ChkShoes	; if no	time remains, branch	; change to beq.w
00013806 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time
0001380A 6600 0000                  		bne.w	Obj01_ChkShoes	; change to bne.w
0001380E 4A38 F7AA                  		tst.b	($FFFFF7AA).w
00013812 6600 0000                  		bne.w	Obj01_RmvInvin	; change to bne.w
00013816 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w
0001381C 6500 0000                  		bcs.w	Obj01_RmvInvin	; change to bcs.w
00013820 4A38 FE2E                  		tst.b ($FFFFFE2E).w ; does Sonic have speed shoes?
00013824 6600                       		bne.s Obj01_ChkShoes	
00013826 7000                       		moveq	#0,d0
00013828 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001382C                             
0001382C 0C38 0000 FE11             		cmpi.b	#$0,($FFFFFE11).w	; is this act 1?
00013832 6600                       		bne.s	Obj01_GetBgm2	; if not, branch
00013834 43F9 0000 41C0             		lea	(MusicList1).l,a1	; load Music Playlist for Acts 1
0001383A 6000                       		bra.s	Obj01_PlayMusic	; go to PlayMusic
0001383C                             
0001383C                            Obj01_GetBgm2:
0001383C 0C38 0001 FE11             		cmpi.b	#$1,($FFFFFE11).w	; is this act 2?
00013842 6600                       		bne.s	Obj01_GetBgm3	; if not, branch
00013844 43F9 0000 41C6             		lea	(MusicList2).l,a1	; load Music Playlist for Acts 2
0001384A 6000                       		bra.s	Obj01_PlayMusic	; go to PlayMusic
0001384C                             
0001384C                            Obj01_GetBgm3:
0001384C 0C38 0002 FE11             		cmpi.b	#$2,($FFFFFE11).w	; is this act 3?
00013852 6600                       		bne.s	Obj01_GetBgm4	; if not, branch
00013854 43F9 0000 41CC             		lea	(MusicList3).l,a1	; load Music Playlist for Acts 3
0001385A 6000                       		bra.s	Obj01_PlayMusic	; go to PlayMusic
0001385C                             
0001385C                            Obj01_GetBgm4:
0001385C 0C38 0003 FE11             		cmpi.b	#$3,($FFFFFE11).w	; is this act 4?
00013862 6600                       		bne.s	Obj01_PlayMusic	; if not, branch
00013864 43F9 0000 41D2             		lea	(MusicList4).l,a1	; load Music Playlist for Acts 4
0001386A                             
0001386A                            Obj01_PlayMusic:
0001386A 1031 0000                  		move.b	(a1,d0.w),d0
0001386E 4EB9 0000 1470             		jsr	(PlaySound).l	; play normal music
00013874                             
00013874                            ; NineKode ends here.
00013874                            
00013874                            
00013874                            Obj01_RmvInvin:
00013874 11FC 0000 FE2D             		move.b	#0,($FFFFFE2D).w ; cancel invincibility
0001387A                            
0001387A                            Obj01_ChkShoes:
0001387A 4A38 FE2E                  		tst.b	($FFFFFE2E).w	; does Sonic have speed	shoes?
0001387E 6700                       		beq.s	Obj01_ExitChk	; if not, branch
00013880 4A68 0034                  		tst.w	$34(a0)		; check	time remaining
00013884 6700                       		beq.s	Obj01_ExitChk
00013886 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from time
0001388A 6600                       		bne.s	Obj01_ExitChk
0001388C 31FC 0600 F760             		move.w	#$600,($FFFFF760).w ; restore Sonic's speed
00013892 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; restore Sonic's acceleration
00013898 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; restore Sonic's deceleration
0001389E 11FC 0000 FE2E             		move.b	#0,($FFFFFE2E).w ; cancel speed	shoes
000138A4 4A38 FE2D                  		tst.b ($FFFFFE2D).w ; does Sonic have invincibility?
000138A8 6600                       		bne.s Obj01_ExitChk
000138AA                            
000138AA 7000                       		moveq #0,d0
000138AC 1038 FE10                  		move.b ($FFFFFE10).w,d0
000138B0 0C78 0103 FE10             		cmpi.w #$103,($FFFFFE10).w ; check if level is SBZ3
000138B6 6600                       		bne.s playthemusic
000138B8 7009                       		moveq #9,d0 ; play SBZ music
000138BA                            playthemusic:
000138BA 43F9 0000 41C6             		lea (MusicList2).l,a1 ; load music playlist
000138C0 1031 0000                  		move.b (a1,d0.w),d0 ; add d0 to a1
000138C4 4EB9 0000 1470             		jsr (PlaySound).l ; play normal music
000138CA                            ; ===========================================================================
000138CA                            
000138CA                            Obj01_ExitChk:
000138CA 4E75                       		rts	
000138CC                            
000138CC                            ; ---------------------------------------------------------------------------
000138CC                            ; Subroutine to	record Sonic's previous positions for invincibility stars
000138CC                            ; ---------------------------------------------------------------------------
000138CC                            
000138CC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000138CC                            
000138CC                            
000138CC                            Sonic_RecordPos:			; XREF: loc_12C7E; Obj01_Hurt; Obj01_Death
000138CC 3038 F7A8                  		move.w	($FFFFF7A8).w,d0
000138D0 43F8 CB00                  		lea	($FFFFCB00).w,a1
000138D4 43F1 0000                  		lea	(a1,d0.w),a1
000138D8 32E8 0008                  		move.w	8(a0),(a1)+
000138DC 32E8 000C                  		move.w	$C(a0),(a1)+
000138E0 5838 F7A9                  		addq.b	#4,($FFFFF7A9).w
000138E4 4E75                       		rts	
000138E6                            ; End of function Sonic_RecordPos
000138E6                            
000138E6                            ; ---------------------------------------------------------------------------
000138E6                            ; Subroutine for Sonic when he's underwater
000138E6                            ; ---------------------------------------------------------------------------
000138E6                            
000138E6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000138E6                            
000138E6                            
000138E6                            Sonic_Water:				; XREF: loc_12C7E
000138E6 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
000138EC 6700                       		beq.s	Obj01_InWater	; if yes, branch
000138EE                            
000138EE                            locret_12D80:
000138EE 4E75                       		rts	
000138F0                            ; ===========================================================================
000138F0                            
000138F0                            Obj01_InWater:
000138F0 3038 F646                  		move.w	($FFFFF646).w,d0
000138F4 B068 000C                  		cmp.w	$C(a0),d0	; is Sonic above the water?
000138F8 6C00                       		bge.s	Obj01_OutWater	; if yes, branch
000138FA 08E8 0006 0022             		bset	#6,$22(a0)
00013900 66EC                       		bne.s	locret_12D80
00013902 6100 0000                  		bsr.w	ResumeMusic
00013906 11FC 000A D340             		move.b	#$A,($FFFFD340).w ; load bubbles object	from Sonic's mouth
0001390C 11FC 0081 D368             		move.b	#$81,($FFFFD368).w
00013912 31FC 0300 F760             		move.w	#$300,($FFFFF760).w ; change Sonic's top speed
00013918 31FC 0006 F762             		move.w	#6,($FFFFF762).w ; change Sonic's acceleration
0001391E 31FC 0040 F764             		move.w	#$40,($FFFFF764).w ; change Sonic's deceleration
00013924 4A38 FE19                  	tst.b	(Super_Sonic_flag).w	; Is Sonic Super?
00013928 6700                       	beq.s	@Skip			; If not branch
0001392A 31FC 0500 F760             	move.w	#$500,(Sonic_top_speed).w
00013930 31FC 0018 F762             	move.w	#$18,(Sonic_acceleration).w
00013936 31FC 0080 F764             	move.w	#$80,(Sonic_deceleration).w
0001393C                            @Skip:		
0001393C E0E8 0010                  		asr	$10(a0)
00013940 E0E8 0012                  		asr	$12(a0)
00013944 E0E8 0012                  		asr	$12(a0)
00013948 67A4                       		beq.s	locret_12D80
0001394A 11FC 0008 D300             		move.b	#8,($FFFFD300).w ; load	splash object
00013950 303C 00AA                  		move.w	#$AA,d0
00013954 4EF9 0000 1476             		jmp	(PlaySound_Special).l ;	play splash sound
0001395A                            ; ===========================================================================
0001395A                            
0001395A                            Obj01_OutWater:
0001395A 08A8 0006 0022             		bclr	#6,$22(a0)
00013960 678C                       		beq.s	locret_12D80
00013962 6100 0000                  		bsr.w	ResumeMusic
00013966 31FC 0600 F760             		move.w	#$600,($FFFFF760).w ; restore Sonic's speed
0001396C 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; restore Sonic's acceleration
00013972 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; restore Sonic's deceleration
00013978 4A38 FE19                  	tst.b	(Super_Sonic_flag).w	; Is Sonic Super?
0001397C 6700                       	beq.s	@Skip2			; If not branch
0001397E 31FC 0A00 F760             	move.w	#$A00,(Sonic_top_speed).w
00013984 31FC 0030 F762             	move.w	#$30,(Sonic_acceleration).w
0001398A 31FC 0100 F764             	move.w	#$100,(Sonic_deceleration).w
00013990                            @Skip2
00013990 E1E8 0012                  		asl	$12(a0)
00013994 4A68 0012                  		tst.w   $12(a0)
00013998 6700 FF54                  		beq.w	locret_12D80
0001399C 11FC 0008 D300             		move.b	#8,($FFFFD300).w ; load	splash object
000139A2 0C68 F000 0012             		cmpi.w	#-$1000,$12(a0)
000139A8 6E00                       		bgt.s	loc_12E0E
000139AA 317C F000 0012             		move.w	#-$1000,$12(a0)	; set maximum speed on leaving water
000139B0                            
000139B0                            loc_12E0E:
000139B0 303C 00AA                  		move.w	#$AA,d0
000139B4 4EF9 0000 1476             		jmp	(PlaySound_Special).l ;	play splash sound
000139BA                            ; End of function Sonic_Water
000139BA                            
000139BA                            ; ===========================================================================
000139BA                            ; ---------------------------------------------------------------------------
000139BA                            ; Modes	for controlling	Sonic
000139BA                            ; ---------------------------------------------------------------------------
000139BA                            
000139BA                            Obj01_MdNormal:				; XREF: Obj01_Modes
000139BA 6100 0000                  		bsr.w	Sonic_SpinDash
000139BE 6100 0000                  		bsr.w	Sonic_Jump
000139C2 6100 0000                  		bsr.w	Sonic_SlopeResist
000139C6 6100 0000                  		bsr.w	Sonic_Move
000139CA 6100 0000                  		bsr.w	Sonic_Roll
000139CE 6100 0000                  		bsr.w	Sonic_Super
000139D2 6100 0000                  		bsr.w	Sonic_LevelBound
000139D6 4EBA A70C                  		jsr	SpeedToPos
000139DA 6100 0000                  		bsr.w	Sonic_AnglePos
000139DE 6100 0000                  		bsr.w	Sonic_SlopeRepel
000139E2 4E75                       		rts	
000139E4                            ; ===========================================================================
000139E4                            
000139E4                            Obj01_MdJump:				; XREF: Obj01_Modes
000139E4 4228 0039                  		clr.b	$39(a0)
000139E8 6100 0000                  		bsr.w	Sonic_JumpHeight
000139EC 6100 0000                  		bsr.w	Sonic_ChgJumpDir
000139F0 6100 0000                  		bsr.w	Sonic_LevelBound
000139F4 4EBA A6C2                  		jsr	ObjectFall
000139F8 0828 0006 0022             		btst	#6,$22(a0)
000139FE 6700                       		beq.s	loc_12E5C
00013A00 0468 0028 0012             		subi.w	#$28,$12(a0)
00013A06                            
00013A06                            loc_12E5C:
00013A06 6100 0000                  		bsr.w	Sonic_JumpAngle
00013A0A 6100 0000                  		bsr.w	Sonic_Floor
00013A0E 4E75                       		rts	
00013A10                            ; ===========================================================================
00013A10                            
00013A10                            Obj01_MdRoll:				; XREF: Obj01_Modes
00013A10 6100 0000                  		bsr.w	Sonic_Jump
00013A14 6100 0000                  		bsr.w	Sonic_RollRepel
00013A18 6100 0000                  		bsr.w	Sonic_RollSpeed
00013A1C 6100 0000                  		bsr.w	Sonic_LevelBound
00013A20 4EBA A6C2                  		jsr	SpeedToPos
00013A24 6100 0000                  		bsr.w	Sonic_AnglePos
00013A28 6100 0000                  		bsr.w	Sonic_SlopeRepel
00013A2C 4E75                       		rts	
00013A2E                            ; ===========================================================================
00013A2E                            
00013A2E                            Obj01_MdJump2:				; XREF: Obj01_Modes
00013A2E 4228 0039                  		clr.b	$39(a0)
00013A32 6100 0000                  		bsr.w	Sonic_JumpHeight
00013A36 6100 0000                  		bsr.w	Sonic_ChgJumpDir
00013A3A 6100 0000                  		bsr.w	Sonic_LevelBound
00013A3E 4EBA A678                  		jsr	ObjectFall
00013A42 0828 0006 0022             		btst	#6,$22(a0)
00013A48 6700                       		beq.s	loc_12EA6
00013A4A 0468 0028 0012             		subi.w	#$28,$12(a0)
00013A50                            
00013A50                            loc_12EA6:
00013A50 6100 0000                  		bsr.w	Sonic_JumpAngle
00013A54 6100 0000                  		bsr.w	Sonic_Floor
00013A58 4E75                       		rts	
00013A5A                            ; ---------------------------------------------------------------------------
00013A5A                            ; Subroutine to	make Sonic walk/run
00013A5A                            ; ---------------------------------------------------------------------------
00013A5A                            
00013A5A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013A5A                            
00013A5A                            
00013A5A                            Sonic_Move:				; XREF: Obj01_MdNormal
00013A5A 3C38 F760                  		move.w	($FFFFF760).w,d6
00013A5E 3A38 F762                  		move.w	($FFFFF762).w,d5
00013A62 3838 F764                  		move.w	($FFFFF764).w,d4
00013A66 4A38 F7CA                  		tst.b	($FFFFF7CA).w
00013A6A 6600 0000                  		bne.w	loc_12FEE
00013A6E 4A68 003E                  		tst.w	$3E(a0)
00013A72 6600 0000                  		bne.w	Obj01_ResetScr
00013A76 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
00013A7C 6700                       		beq.s	Obj01_NotLeft	; if not, branch
00013A7E 6100 0000                  		bsr.w	Sonic_MoveLeft
00013A82                            
00013A82                            Obj01_NotLeft:
00013A82 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
00013A88 6700                       		beq.s	Obj01_NotRight	; if not, branch
00013A8A 6100 0000                  		bsr.w	Sonic_MoveRight
00013A8E                            
00013A8E                            Obj01_NotRight:
00013A8E 1028 0026                  		move.b	$26(a0),d0
00013A92 0600 0020                  		addi.b	#$20,d0
00013A96 0200 00C0                  		andi.b	#$C0,d0		; is Sonic on a	slope?
00013A9A 6600 0000                  		bne.w	Obj01_ResetScr	; if yes, branch
00013A9E 4A68 0014                  		tst.w	$14(a0)		; is Sonic moving?
00013AA2 6600 0000                  		bne.w	Obj01_ResetScr	; if yes, branch
00013AA6 08A8 0005 0022             		bclr	#5,$22(a0)
00013AAC 117C 0005 001C             		move.b	#5,$1C(a0)	; use "standing" animation
00013AB2 0828 0003 0022             		btst	#3,$22(a0)
00013AB8 6700                       		beq.s	Sonic_Balance
00013ABA 7000                       		moveq	#0,d0
00013ABC 1028 003D                  		move.b	$3D(a0),d0
00013AC0 ED48                       		lsl.w	#6,d0
00013AC2 43F8 D000                  		lea	($FFFFD000).w,a1
00013AC6 43F1 0000                  		lea	(a1,d0.w),a1
00013ACA 4A29 0022                  		tst.b	$22(a1)
00013ACE 6B00                       		bmi.s	Sonic_LookUp
00013AD0 7200                       		moveq	#0,d1
00013AD2 1229 0019                  		move.b	$19(a1),d1
00013AD6 3401                       		move.w	d1,d2
00013AD8 D442                       		add.w	d2,d2
00013ADA 5942                       		subq.w	#4,d2
00013ADC D268 0008                  		add.w	8(a0),d1
00013AE0 9269 0008                  		sub.w	8(a1),d1
00013AE4 0C41 0004                  		cmpi.w	#4,d1
00013AE8 6D00                       		blt.s	loc_12F6A
00013AEA B242                       		cmp.w	d2,d1
00013AEC 6C00                       		bge.s	loc_12F5A
00013AEE 6000                       		bra.s	Sonic_LookUp
00013AF0                            ; ===========================================================================
00013AF0                            
00013AF0                            Sonic_Balance:
00013AF0 4EB9 0000 0000             		jsr	ObjHitFloor
00013AF6 0C41 000C                  		cmpi.w	#$C,d1
00013AFA 6D00                       		blt.s	Sonic_LookUp
00013AFC 0C28 0003 0036             		cmpi.b	#3,$36(a0)
00013B02 6600                       		bne.s	loc_12F62
00013B04                            
00013B04                            loc_12F5A:
00013B04 08A8 0000 0022             		bclr	#0,$22(a0)
00013B0A 6000                       		bra.s	loc_12F70
00013B0C                            ; ===========================================================================
00013B0C                            
00013B0C                            loc_12F62:
00013B0C 0C28 0003 0037             		cmpi.b	#3,$37(a0)
00013B12 6600                       		bne.s	Sonic_LookUp
00013B14                            
00013B14                            loc_12F6A:
00013B14 08E8 0000 0022             		bset	#0,$22(a0)
00013B1A                            
00013B1A                            loc_12F70:
00013B1A 117C 0006 001C             		move.b	#6,$1C(a0)	; use "balancing" animation
00013B20 6000                       		bra.s	Obj01_ResetScr
00013B22                            ; ===========================================================================
00013B22                            
00013B22                            Sonic_LookUp:
00013B22 0838 0000 F602             		btst	#0,($FFFFF602).w ; is up being pressed?
00013B28 6700                       		beq.s	Sonic_Duck	; if not, branch
00013B2A 117C 0007 001C             		move.b	#7,$1C(a0)	; use "looking up" animation
00013B30 5238 C903                  		addq.b	#1,($FFFFC903).w
00013B34 0C38 0078 C903             		cmp.b	#$78,($FFFFC903).w
00013B3A 6500                       		bcs.s	Obj01_ResetScr_Part2
00013B3C 11FC 0078 C903             		move.b	#$78,($FFFFC903).w
00013B42 0C78 00C8 F73E             		cmpi.w	#$C8,($FFFFF73E).w
00013B48 6700                       		beq.s	loc_12FC2
00013B4A 5478 F73E                  		addq.w	#2,($FFFFF73E).w
00013B4E 6000                       		bra.s	loc_12FC2
00013B50                            ; ===========================================================================
00013B50                            
00013B50                            Sonic_Duck:
00013B50 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
00013B56 6700                       		beq.s	Obj01_ResetScr	; if not, branch
00013B58 117C 0008 001C             		move.b	#8,$1C(a0)	; use "ducking"	animation
00013B5E 5238 C903                  		addq.b	#1,($FFFFC903).w
00013B62 0C38 0078 C903             		cmpi.b	#$78,($FFFFC903).w
00013B68 6500                       		bcs.s	Obj01_ResetScr_Part2
00013B6A 11FC 0078 C903             		move.b	#$78,($FFFFC903).w
00013B70 0C78 0008 F73E             		cmpi.w	#8,($FFFFF73E).w
00013B76 6700                       		beq.s	loc_12FC2
00013B78 5578 F73E                  		subq.w	#2,($FFFFF73E).w
00013B7C 6000                       		bra.s	loc_12FC2
00013B7E                            ; ===========================================================================
00013B7E                            
00013B7E                            Obj01_ResetScr:
00013B7E 11FC 0000 C903             		move.b	#0,($FFFFC903).w
00013B84                            		
00013B84                            Obj01_ResetScr_Part2:
00013B84 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w ; is	screen in its default position?
00013B8A 6700                       		beq.s	loc_12FC2	; if yes, branch
00013B8C 6400                       		bcc.s	loc_12FBE
00013B8E 5878 F73E                  		addq.w	#4,($FFFFF73E).w ; move	screen back to default
00013B92                            
00013B92                            loc_12FBE:
00013B92 5578 F73E                  		subq.w	#2,($FFFFF73E).w ; move	screen back to default
00013B96                            
00013B96                            
00013B96                            loc_12FC2:
00013B96 1038 F602                  		move.b	($FFFFF602).w,d0
00013B9A 0200 000C                  		andi.b	#$C,d0		; is left/right	pressed?
00013B9E 6600                       		bne.s	loc_12FEE	; if yes, branch
00013BA0 3028 0014                  		move.w	$14(a0),d0
00013BA4 6700                       		beq.s	loc_12FEE
00013BA6 6B00                       		bmi.s	loc_12FE2
00013BA8 9045                       		sub.w	d5,d0
00013BAA 6400                       		bcc.s	loc_12FDC
00013BAC 303C 0000                  		move.w	#0,d0
00013BB0                            
00013BB0                            loc_12FDC:
00013BB0 3140 0014                  		move.w	d0,$14(a0)
00013BB4 6000                       		bra.s	loc_12FEE
00013BB6                            ; ===========================================================================
00013BB6                            
00013BB6                            loc_12FE2:
00013BB6 D045                       		add.w	d5,d0
00013BB8 6400                       		bcc.s	loc_12FEA
00013BBA 303C 0000                  		move.w	#0,d0
00013BBE                            
00013BBE                            loc_12FEA:
00013BBE 3140 0014                  		move.w	d0,$14(a0)
00013BC2                            
00013BC2                            loc_12FEE:
00013BC2 1028 0026                  		move.b	$26(a0),d0
00013BC6 4EB9 0000 33D4             		jsr	(CalcSine).l
00013BCC C3E8 0014                  		muls.w	$14(a0),d1
00013BD0 E081                       		asr.l	#8,d1
00013BD2 3141 0010                  		move.w	d1,$10(a0)
00013BD6 C1E8 0014                  		muls.w	$14(a0),d0
00013BDA E080                       		asr.l	#8,d0
00013BDC 3140 0012                  		move.w	d0,$12(a0)
00013BE0                            
00013BE0                            loc_1300C:
00013BE0 1028 0026                  		move.b	$26(a0),d0
00013BE4 0600 0040                  		addi.b	#$40,d0
00013BE8 6B00                       		bmi.s	locret_1307C
00013BEA 123C 0040                  		move.b	#$40,d1
00013BEE 4A68 0014                  		tst.w	$14(a0)
00013BF2 6700                       		beq.s	locret_1307C
00013BF4 6B00                       		bmi.s	loc_13024
00013BF6 4441                       		neg.w	d1
00013BF8                            
00013BF8                            loc_13024:
00013BF8 1028 0026                  		move.b	$26(a0),d0
00013BFC D001                       		add.b	d1,d0
00013BFE 3F00                       		move.w	d0,-(sp)
00013C00 6100 0000                  		bsr.w	Sonic_WalkSpeed
00013C04 301F                       		move.w	(sp)+,d0
00013C06 4A41                       		tst.w	d1
00013C08 6A00                       		bpl.s	locret_1307C
00013C0A E141                       		asl.w	#8,d1
00013C0C 0600 0020                  		addi.b	#$20,d0
00013C10 0200 00C0                  		andi.b	#$C0,d0
00013C14 6700                       		beq.s	loc_13078
00013C16 0C00 0040                  		cmpi.b	#$40,d0
00013C1A 6700                       		beq.s	loc_13066
00013C1C 0C00 0080                  		cmpi.b	#$80,d0
00013C20 6700                       		beq.s	loc_13060
00013C22 D368 0010                  		add.w	d1,$10(a0)
00013C26 08E8 0005 0022             		bset	#5,$22(a0)
00013C2C 317C 0000 0014             		move.w	#0,$14(a0)
00013C32 4E75                       		rts	
00013C34                            ; ===========================================================================
00013C34                            
00013C34                            loc_13060:
00013C34 9368 0012                  		sub.w	d1,$12(a0)
00013C38 4E75                       		rts	
00013C3A                            ; ===========================================================================
00013C3A                            
00013C3A                            loc_13066:
00013C3A 9368 0010                  		sub.w	d1,$10(a0)
00013C3E 08E8 0005 0022             		bset	#5,$22(a0)
00013C44 317C 0000 0014             		move.w	#0,$14(a0)
00013C4A 4E75                       		rts	
00013C4C                            ; ===========================================================================
00013C4C                            
00013C4C                            loc_13078:
00013C4C D368 0012                  		add.w	d1,$12(a0)
00013C50                            
00013C50                            locret_1307C:
00013C50 4E75                       		rts	
00013C52                            ; End of function Sonic_Move
00013C52                            
00013C52                            
00013C52                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013C52                            
00013C52                            
00013C52                            Sonic_MoveLeft:		   ; XREF: Sonic_Move
00013C52 3028 0014                  		move.w	$14(a0),d0
00013C56 6700                       		beq.s	loc_13086
00013C58 6A00                       		bpl.s	loc_130B2
00013C5A                            
00013C5A                            loc_13086:
00013C5A 08E8 0000 0022             		bset	#0,$22(a0)
00013C60 6600                       		bne.s	loc_1309A
00013C62 08A8 0005 0022             		bclr	#5,$22(a0)
00013C68 117C 0001 001D             		move.b	#1,$1D(a0)
00013C6E                            
00013C6E                            loc_1309A:
00013C6E 9045                       		sub.w	d5,d0
00013C70 3206                       		move.w	d6,d1
00013C72 4441                       		neg.w	d1
00013C74 B041                       		cmp.w	d1,d0
00013C76 6E00                       		bgt.s	loc_130A6
00013C78 D045                       		add.w	d5,d0
00013C7A B041                       		cmp.w	d1,d0
00013C7C 6F00                       		ble.s	loc_130A6
00013C7E 3001                       		move.w	d1,d0
00013C80                            
00013C80                            loc_130A6:
00013C80 3140 0014                  		move.w	d0,$14(a0)
00013C84 117C 0000 001C             		move.b	#0,$1C(a0); use walking animation
00013C8A 4E75                       		rts
00013C8C                            
00013C8C                            ; ===========================================================================
00013C8C                            
00013C8C                            loc_130B2:				; XREF: Sonic_MoveLeft
00013C8C 9044                       		sub.w	d4,d0
00013C8E 6400                       		bcc.s	loc_130BA
00013C90 303C FF80                  		move.w	#-$80,d0
00013C94                            
00013C94                            loc_130BA:
00013C94 3140 0014                  		move.w	d0,$14(a0)
00013C98 1028 0026                  		move.b	$26(a0),d0
00013C9C 0600 0020                  		addi.b	#$20,d0
00013CA0 0200 00C0                  		andi.b	#$C0,d0
00013CA4 6600                       		bne.s	locret_130E8
00013CA6 0C40 0400                  		cmpi.w	#$400,d0
00013CAA 6D00                       		blt.s	locret_130E8
00013CAC 117C 000D 001C             		move.b	#$D,$1C(a0)	; use "stopping" animation
00013CB2 08A8 0000 0022             		bclr	#0,$22(a0)
00013CB8 303C 00A4                  		move.w	#$A4,d0
00013CBC 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play stopping sound
00013CC2                            
00013CC2                            locret_130E8:
00013CC2 4E75                       		rts	
00013CC4                            ; End of function Sonic_MoveLeft
00013CC4                            
00013CC4                            
00013CC4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013CC4                            
00013CC4                            
00013CC4                            Sonic_MoveRight:	   ; XREF: Sonic_Move
00013CC4 3028 0014                  		move.w	$14(a0),d0
00013CC8 6B00                       		bmi.s	loc_13118
00013CCA 08A8 0000 0022             		bclr	#0,$22(a0)
00013CD0 6700                       		beq.s	loc_13104
00013CD2 08A8 0005 0022             		bclr	#5,$22(a0)
00013CD8 117C 0001 001D             		move.b	#1,$1D(a0)
00013CDE                            
00013CDE                            loc_13104:
00013CDE D045                       		add.w	d5,d0
00013CE0 B046                       		cmp.w	d6,d0
00013CE2 6D00                       		blt.s	loc_1310C
00013CE4 9045                       		sub.w	d5,d0
00013CE6 B046                       		cmp.w	d6,d0
00013CE8 6C00                       		bge.s	loc_1310C
00013CEA 3006                       		move.w	d6,d0
00013CEC                            
00013CEC                            loc_1310C:
00013CEC 3140 0014                  		move.w	d0,$14(a0)
00013CF0 117C 0000 001C             		move.b	#0,$1C(a0); use walking animation
00013CF6 4E75                       		rts
00013CF8                            
00013CF8                            ; ===========================================================================
00013CF8                            
00013CF8                            loc_13118:				; XREF: Sonic_MoveRight
00013CF8 D044                       		add.w	d4,d0
00013CFA 6400                       		bcc.s	loc_13120
00013CFC 303C 0080                  		move.w	#$80,d0
00013D00                            
00013D00                            loc_13120:
00013D00 3140 0014                  		move.w	d0,$14(a0)
00013D04 1028 0026                  		move.b	$26(a0),d0
00013D08 0600 0020                  		addi.b	#$20,d0
00013D0C 0200 00C0                  		andi.b	#$C0,d0
00013D10 6600                       		bne.s	locret_1314E
00013D12 0C40 FC00                  		cmpi.w	#-$400,d0
00013D16 6E00                       		bgt.s	locret_1314E
00013D18 117C 000D 001C             		move.b	#$D,$1C(a0)	; use "stopping" animation
00013D1E 08E8 0000 0022             		bset	#0,$22(a0)
00013D24 303C 00A4                  		move.w	#$A4,d0
00013D28 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play stopping sound
00013D2E                            
00013D2E                            locret_1314E:
00013D2E 4E75                       		rts	
00013D30                            ; End of function Sonic_MoveRight
00013D30                            
00013D30                            ; ---------------------------------------------------------------------------
00013D30                            ; Subroutine to	change Sonic's speed as he rolls
00013D30                            ; ---------------------------------------------------------------------------
00013D30                            
00013D30                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013D30                            
00013D30                            
00013D30                            Sonic_RollSpeed:			; XREF: Obj01_MdRoll
00013D30 3C38 F760                  		move.w	($FFFFF760).w,d6
00013D34 E346                       		asl.w	#1,d6
00013D36 3A38 F762                  		move.w	($FFFFF762).w,d5
00013D3A E245                       		asr.w	#1,d5
00013D3C 3838 F764                  		move.w	($FFFFF764).w,d4
00013D40 E444                       		asr.w	#2,d4
00013D42 4A38 F7CA                  		tst.b	($FFFFF7CA).w
00013D46 6600 0000                  		bne.w	loc_131CC
00013D4A 4A68 003E                  		tst.w	$3E(a0)
00013D4E 6600                       		bne.s	loc_13188
00013D50 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
00013D56 6700                       		beq.s	loc_1317C	; if not, branch
00013D58 6100 0000                  		bsr.w	Sonic_RollLeft
00013D5C                            
00013D5C                            loc_1317C:
00013D5C 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
00013D62 6700                       		beq.s	loc_13188	; if not, branch
00013D64 6100 0000                  		bsr.w	Sonic_RollRight
00013D68                            
00013D68                            loc_13188:
00013D68 3028 0014                  		move.w	$14(a0),d0
00013D6C 6700                       		beq.s	loc_131AA
00013D6E 6B00                       		bmi.s	loc_1319E
00013D70 9045                       		sub.w	d5,d0
00013D72 6400                       		bcc.s	loc_13198
00013D74 303C 0000                  		move.w	#0,d0
00013D78                            
00013D78                            loc_13198:
00013D78 3140 0014                  		move.w	d0,$14(a0)
00013D7C 6000                       		bra.s	loc_131AA
00013D7E                            ; ===========================================================================
00013D7E                            
00013D7E                            loc_1319E:				; XREF: Sonic_RollSpeed
00013D7E D045                       		add.w	d5,d0
00013D80 6400                       		bcc.s	loc_131A6
00013D82 303C 0000                  		move.w	#0,d0
00013D86                            
00013D86                            loc_131A6:
00013D86 3140 0014                  		move.w	d0,$14(a0)
00013D8A                            
00013D8A                            loc_131AA:
00013D8A 4A68 0014                  		tst.w	$14(a0)		; is Sonic moving?
00013D8E 6600                       		bne.s	loc_131CC	; if yes, branch
00013D90 08A8 0002 0022             		bclr	#2,$22(a0)
00013D96 117C 0013 0016             		move.b	#$13,$16(a0)
00013D9C 117C 0009 0017             		move.b	#9,$17(a0)
00013DA2 117C 0005 001C             		move.b	#5,$1C(a0)	; use "standing" animation
00013DA8 5B68 000C                  		subq.w	#5,$C(a0)
00013DAC                            
00013DAC                            loc_131CC:
00013DAC 0C78 0060 F73E             		cmp.w	#$60,($FFFFF73E).w
00013DB2 6700                       		beq.s	@cont2
00013DB4 6400                       		bcc.s	@cont1
00013DB6 5878 F73E                  		addq.w	#4,($FFFFF73E).w
00013DBA                            		
00013DBA                            @cont1:
00013DBA 5578 F73E                  		subq.w	#2,($FFFFF73E).w
00013DBE                            		
00013DBE                            @cont2:
00013DBE 1028 0026                  		move.b	$26(a0),d0
00013DC2 4EB9 0000 33D4             		jsr	(CalcSine).l
00013DC8 C1E8 0014                  		muls.w	$14(a0),d0
00013DCC E080                       		asr.l	#8,d0
00013DCE 3140 0012                  		move.w	d0,$12(a0)
00013DD2 C3E8 0014                  		muls.w	$14(a0),d1
00013DD6 E081                       		asr.l	#8,d1
00013DD8 0C41 1000                  		cmpi.w	#$1000,d1
00013DDC 6F00                       		ble.s	loc_131F0
00013DDE 323C 1000                  		move.w	#$1000,d1
00013DE2                            
00013DE2                            loc_131F0:
00013DE2 0C41 F000                  		cmpi.w	#-$1000,d1
00013DE6 6C00                       		bge.s	loc_131FA
00013DE8 323C F000                  		move.w	#-$1000,d1
00013DEC                            
00013DEC                            loc_131FA:
00013DEC 3141 0010                  		move.w	d1,$10(a0)
00013DF0 6000 FDEE                  		bra.w	loc_1300C
00013DF4                            ; End of function Sonic_RollSpeed
00013DF4                            
00013DF4                            
00013DF4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013DF4                            
00013DF4                            
00013DF4                            Sonic_RollLeft:				; XREF: Sonic_RollSpeed
00013DF4 3028 0014                  		move.w	$14(a0),d0
00013DF8 6700                       		beq.s	loc_1320A
00013DFA 6A00                       		bpl.s	loc_13218
00013DFC                            
00013DFC                            loc_1320A:
00013DFC 08E8 0000 0022             		bset	#0,$22(a0)
00013E02 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
00013E08 4E75                       		rts	
00013E0A                            ; ===========================================================================
00013E0A                            
00013E0A                            loc_13218:
00013E0A 9044                       		sub.w	d4,d0
00013E0C 6400                       		bcc.s	loc_13220
00013E0E 303C FF80                  		move.w	#-$80,d0
00013E12                            
00013E12                            loc_13220:
00013E12 3140 0014                  		move.w	d0,$14(a0)
00013E16 4E75                       		rts	
00013E18                            ; End of function Sonic_RollLeft
00013E18                            
00013E18                            
00013E18                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013E18                            
00013E18                            
00013E18                            Sonic_RollRight:			; XREF: Sonic_RollSpeed
00013E18 3028 0014                  		move.w	$14(a0),d0
00013E1C 6B00                       		bmi.s	loc_1323A
00013E1E 08A8 0000 0022             		bclr	#0,$22(a0)
00013E24 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
00013E2A 4E75                       		rts	
00013E2C                            ; ===========================================================================
00013E2C                            
00013E2C                            loc_1323A:
00013E2C D044                       		add.w	d4,d0
00013E2E 6400                       		bcc.s	loc_13242
00013E30 303C 0080                  		move.w	#$80,d0
00013E34                            
00013E34                            loc_13242:
00013E34 3140 0014                  		move.w	d0,$14(a0)
00013E38 4E75                       		rts	
00013E3A                            ; End of function Sonic_RollRight
00013E3A                            
00013E3A                            ; ---------------------------------------------------------------------------
00013E3A                            ; Subroutine to	change Sonic's direction while jumping
00013E3A                            ; ---------------------------------------------------------------------------
00013E3A                            
00013E3A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013E3A                            
00013E3A                            
00013E3A                            Sonic_ChgJumpDir:		; XREF: Obj01_MdJump; Obj01_MdJump2
00013E3A 3C38 F760                  		move.w	($FFFFF760).w,d6
00013E3E 3A38 F762                  		move.w	($FFFFF762).w,d5
00013E42 E345                       		asl.w	#1,d5
00013E44 0828 0004 0022             		btst	#4,$22(a0)	
00013E4A 6600                       		bne.s	Obj01_ResetScr2	
00013E4C 3028 0010                  		move.w	$10(a0),d0	
00013E50 0838 0002 F602             		btst	#2,($FFFFF602).w; is left being pressed?	
00013E56 6700                       		beq.s	loc_13278; if not, branch	
00013E58 08E8 0000 0022             		bset	#0,$22(a0)	
00013E5E 9045                       		sub.w	d5,d0	
00013E60 3206                       		move.w	d6,d1	
00013E62 4441                       		neg.w	d1	
00013E64 B041                       		cmp.w	d1,d0	
00013E66 6E00                       		bgt.s	loc_13278	
00013E68 D045                       		add.w	d5,d0		; +++ remove this frame's acceleration change
00013E6A B041                       		cmp.w	d1,d0		; +++ compare speed with top speed
00013E6C 6F00                       		ble.s	loc_13278	; +++ if speed was already greater than the maximum, branch	
00013E6E 3001                       		move.w	d1,d0
00013E70                            
00013E70                            loc_13278:
00013E70 0838 0003 F602             		btst	#3,($FFFFF602).w; is right being pressed?	
00013E76 6700                       		beq.s	Obj01_JumpMove; if not, branch	
00013E78 08A8 0000 0022             		bclr	#0,$22(a0)	
00013E7E D045                       		add.w	d5,d0	
00013E80 B046                       		cmp.w	d6,d0	
00013E82 6D00                       		blt.s	Obj01_JumpMove
00013E84 9045                       		sub.w	d5,d0		; +++ remove this frame's acceleration change
00013E86 B046                       		cmp.w	d6,d0		; +++ compare speed with top speed
00013E88 6C00                       		bge.s	Obj01_JumpMove	; +++ if speed was already greater than the maximum, branch
00013E8A 3006                       		move.w	d6,d0
00013E8C                            
00013E8C                            Obj01_JumpMove:
00013E8C 3140 0010                  		move.w	d0,$10(a0)	; change Sonic's horizontal speed
00013E90                            
00013E90                            Obj01_ResetScr2:
00013E90 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w ; is	the screen in its default position?
00013E96 6700                       		beq.s	loc_132A4	; if yes, branch
00013E98 6400                       		bcc.s	loc_132A0
00013E9A 5878 F73E                  		addq.w	#4,($FFFFF73E).w
00013E9E                            
00013E9E                            loc_132A0:
00013E9E 5578 F73E                  		subq.w	#2,($FFFFF73E).w
00013EA2                            
00013EA2                            loc_132A4:
00013EA2 0C68 FC00 0012             		cmpi.w	#-$400,$12(a0)	; is Sonic moving faster than -$400 upwards?
00013EA8 6500                       		bcs.s	locret_132D2	; if yes, branch
00013EAA 3028 0010                  		move.w	$10(a0),d0
00013EAE 3200                       		move.w	d0,d1
00013EB0 EA41                       		asr.w	#5,d1
00013EB2 6700                       		beq.s	locret_132D2
00013EB4 6B00                       		bmi.s	loc_132C6
00013EB6 9041                       		sub.w	d1,d0
00013EB8 6400                       		bcc.s	loc_132C0
00013EBA 303C 0000                  		move.w	#0,d0
00013EBE                            
00013EBE                            loc_132C0:
00013EBE 3140 0010                  		move.w	d0,$10(a0)
00013EC2 4E75                       		rts	
00013EC4                            ; ===========================================================================
00013EC4                            
00013EC4                            loc_132C6:
00013EC4 9041                       		sub.w	d1,d0
00013EC6 6500                       		bcs.s	loc_132CE
00013EC8 303C 0000                  		move.w	#0,d0
00013ECC                            
00013ECC                            loc_132CE:
00013ECC 3140 0010                  		move.w	d0,$10(a0)
00013ED0                            
00013ED0                            locret_132D2:
00013ED0 4E75                       		rts	
00013ED2                            ; End of function Sonic_ChgJumpDir
00013ED2                            
00013ED2                            ; ===========================================================================
00013ED2                            ; ---------------------------------------------------------------------------
00013ED2                            ; Unused subroutine to squash Sonic
00013ED2                            ; ---------------------------------------------------------------------------
00013ED2 1028 0026                  		move.b	$26(a0),d0
00013ED6 0600 0020                  		addi.b	#$20,d0
00013EDA 0200 00C0                  		andi.b	#$C0,d0
00013EDE 6600                       		bne.s	locret_13302
00013EE0 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00013EE4 4A41                       		tst.w	d1
00013EE6 6A00                       		bpl.s	locret_13302
00013EE8 317C 0000 0014             		move.w	#0,$14(a0)	; stop Sonic moving
00013EEE 317C 0000 0010             		move.w	#0,$10(a0)
00013EF4 317C 0000 0012             		move.w	#0,$12(a0)
00013EFA 117C 000B 001C             		move.b	#$B,$1C(a0)	; use "warping"	animation
00013F00                            
00013F00                            locret_13302:
00013F00 4E75                       		rts	
00013F02                            ; ---------------------------------------------------------------------------
00013F02                            ; Subroutine to	prevent	Sonic leaving the boundaries of	a level
00013F02                            ; ---------------------------------------------------------------------------
00013F02                            
00013F02                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013F02                            
00013F02                            
00013F02                            Sonic_LevelBound:			; XREF: Obj01_MdNormal; et al
00013F02 2228 0008                  		move.l	8(a0),d1
00013F06 3028 0010                  		move.w	$10(a0),d0
00013F0A 48C0                       		ext.l	d0
00013F0C E180                       		asl.l	#8,d0
00013F0E D280                       		add.l	d0,d1
00013F10 4841                       		swap	d1
00013F12 3038 F728                  		move.w	($FFFFF728).w,d0
00013F16 0640 0010                  		addi.w	#$10,d0
00013F1A B041                       		cmp.w	d1,d0		; has Sonic touched the	side boundary?
00013F1C 6200                       		bhi.s	Boundary_Sides	; if yes, branch
00013F1E 3038 F72A                  		move.w	($FFFFF72A).w,d0
00013F22 0640 0128                  		addi.w	#$128,d0
00013F26 4A38 F7AA                  		tst.b	($FFFFF7AA).w
00013F2A 6600                       		bne.s	loc_13332
00013F2C 0640 0040                  		addi.w	#$40,d0
00013F30                            
00013F30                            loc_13332:
00013F30 B041                       		cmp.w	d1,d0		; has Sonic touched the	side boundary?
00013F32 6300                       		bls.s	Boundary_Sides	; if yes, branch
00013F34                            
00013F34                            loc_13336:
00013F34 3038 F72E                  		move.w	($FFFFF72E).w,d0
00013F38 0640 00E0                  		addi.w	#$E0,d0
00013F3C B068 000C                  		cmp.w	$C(a0),d0	; has Sonic touched the	bottom boundary?
00013F40 6D00                       		blt.s	Boundary_Bottom	; if yes, branch
00013F42 4E75                       		rts	
00013F44                            ; ===========================================================================
00013F44                            
00013F44                            Jmp_KillSonic:
00013F44 4EF9 0000 0000             	       jmp    KillSonic
00013F4A                            
00013F4A                            Boundary_Bottom:
00013F4A 3038 F726                  		move.w	($FFFFF726).w,d0
00013F4E 3238 F72E                  		move.w	($FFFFF72E).w,d1
00013F52 B240                       		cmp.w	d0,d1			; screen still scrolling down?
00013F54 6D00                       		blt.s	Boundary_Bottom_locret	; if so, don't kill Sonic
00013F56 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w	; is level SBZ2 ?
00013F5C 6600 FFE6                  		bne.w	Jmp_KillSonic		; if not, kill Sonic
00013F60 0C78 2000 D008             		cmpi.w	#$2000,($FFFFD008).w
00013F66 6500 FFDC                  		bcs.w	Jmp_KillSonic
00013F6A 4238 FE30                  		clr.b	($FFFFFE30).w		; clear lamppost counter
00013F6E 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w	; restart the level
00013F74 31FC 0103 FE10             		move.w	#$103,($FFFFFE10).w	; set level to SBZ3 (LZ4)
00013F7A                            
00013F7A                            Boundary_Bottom_locret:
00013F7A 4E75                       		rts	
00013F7C                            ; ===========================================================================
00013F7C                            
00013F7C                            
00013F7C                            Boundary_Sides:
00013F7C 3140 0008                  		move.w	d0,8(a0)
00013F80 317C 0000 000A             		move.w	#0,$A(a0)
00013F86 317C 0000 0010             		move.w	#0,$10(a0)	; stop Sonic moving
00013F8C 317C 0000 0014             		move.w	#0,$14(a0)
00013F92 60A0                       		bra.s	loc_13336
00013F94                            ; End of function Sonic_LevelBound
00013F94                            
00013F94                            ; ---------------------------------------------------------------------------
00013F94                            ; Subroutine allowing Sonic to roll when he's moving
00013F94                            ; ---------------------------------------------------------------------------
00013F94                            
00013F94                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013F94                            
00013F94                            
00013F94                            Sonic_Roll:				; XREF: Obj01_MdNormal
00013F94 4A38 F7CA                  		tst.b	($FFFFF7CA).w
00013F98 6600                       		bne.s	Obj01_NoRoll
00013F9A 3028 0014                  		move.w	$14(a0),d0
00013F9E 6A00                       		bpl.s	loc_13392
00013FA0 4440                       		neg.w	d0
00013FA2                            
00013FA2                            loc_13392:
00013FA2 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic moving at $80 speed or faster?
00013FA6 6500                       		bcs.s	Obj01_NoRoll	; if not, branch
00013FA8 1038 F602                  		move.b	($FFFFF602).w,d0
00013FAC 0200 000C                  		andi.b	#$C,d0		; is left/right	being pressed?
00013FB0 6600                       		bne.s	Obj01_NoRoll	; if yes, branch
00013FB2 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
00013FB8 6600                       		bne.s	Obj01_ChkRoll	; if yes, branch
00013FBA                            
00013FBA                            Obj01_NoRoll:
00013FBA 4E75                       		rts	
00013FBC                            ; ===========================================================================
00013FBC                            
00013FBC                            Obj01_ChkRoll:
00013FBC 0828 0002 0022             		btst	#2,$22(a0)	; is Sonic already rolling?
00013FC2 6700                       		beq.s	Obj01_DoRoll	; if not, branch
00013FC4 4E75                       		rts	
00013FC6                            ; ===========================================================================
00013FC6                            
00013FC6                            Obj01_DoRoll:
00013FC6 08E8 0002 0022             		bset	#2,$22(a0)
00013FCC 117C 000E 0016             		move.b	#$E,$16(a0)
00013FD2 117C 0007 0017             		move.b	#7,$17(a0)
00013FD8 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
00013FDE 5A68 000C                  		addq.w	#5,$C(a0)
00013FE2 303C 00BE                  		move.w	#$BE,d0
00013FE6 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play rolling sound
00013FEC 4A68 0014                  		tst.w	$14(a0)
00013FF0 6600                       		bne.s	locret_133E8
00013FF2 317C 0200 0014             		move.w	#$200,$14(a0)
00013FF8                            
00013FF8                            locret_133E8:
00013FF8 4E75                       		rts	
00013FFA                            ; End of function Sonic_Roll
00013FFA                            
00013FFA                            ; ---------------------------------------------------------------------------
00013FFA                            ; Subroutine allowing Sonic to jump
00013FFA                            ; ---------------------------------------------------------------------------
00013FFA                            
00013FFA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013FFA                            
00013FFA                            
00013FFA                            Sonic_Jump:                ; XREF: Obj01_MdNormal; Obj01_MdRoll
00013FFA 1038 F603                  		move.b	($FFFFF603).w,d0
00013FFE 0200 0070                          andi.b	#$70,d0		; is A,	B or C 
00014002 6700 0000                          beq.w    locret_1348E        ; if not, branch
00014006 303C 00A0                          move.w    #$A0,d0    ; set jumping sound
0001400A 4EB9 0000 1470                     jsr    (PlaySound).l ; play jumping sound
00014010 7000                               moveq    #0,d0
00014012 1028 0026                          move.b    $26(a0),d0
00014016 0600 0080                          addi.b    #$80,d0
0001401A 4EB9 0000 0000                     jsr    sub_14D48
00014020 0C41 0006                          cmpi.w    #6,d1
00014024 6D00 0000                          blt.w    locret_1348E
00014028 343C 0680                          move.w    #$680,d2 ; set normal jump speed
0001402C 4A38 FE19                          tst.b    ($FFFFFE19).w    ; is Sonic Super?
00014030 6700                               beq.s    Sonic_JumpContinue2 ; if not, branch
00014032 343C 0880                          move.w    #$880,d2        ; set higher jump speed if super
00014036                            
00014036                            Sonic_JumpContinue2:
00014036 0828 0006 0022                     btst    #6,$22(a0) ; is player underwater?
0001403C 6700                               beq.s    loc_1341C ; if not, branch
0001403E 343C 0380                          move.w    #$380,d2 ; if yes, decrease his jump speed
00014042 4A38 FE19                          tst.b    ($FFFFFE19).w    ; is Sonic Super?
00014046 6700                               beq.s    loc_1341C ; if not, branch
00014048 343C 0530                          move.w    #$530,d2 ; super jump speed
0001404C                            
0001404C                            loc_1341C:
0001404C 7000                       		moveq	#0,d0
0001404E 1028 0026                  		move.b	$26(a0),d0
00014052 0400 0040                  		subi.b	#$40,d0
00014056 4EB9 0000 33D4             		jsr	(CalcSine).l
0001405C C3C2                       		muls.w	d2,d1
0001405E E081                       		asr.l	#8,d1
00014060 D368 0010                  		add.w	d1,$10(a0)	; make Sonic jump
00014064 C1C2                       		muls.w	d2,d0
00014066 E080                       		asr.l	#8,d0
00014068 D168 0012                  		add.w	d0,$12(a0)	; make Sonic jump
0001406C 08E8 0001 0022             		bset	#1,$22(a0)
00014072 08A8 0005 0022             		bclr	#5,$22(a0)
00014078 588F                       		addq.l	#4,sp
0001407A 117C 0001 003C             		move.b	#1,$3C(a0)
00014080 4228 0038                  		clr.b	$38(a0)
00014084 303C 00A0                  		move.w	#$A0,d0
00014088 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play jumping sound
0001408E 117C 0013 0016             		move.b	#$13,$16(a0)
00014094 117C 0009 0017             		move.b	#9,$17(a0)
0001409A 0828 0002 0022             		btst	#2,$22(a0)
000140A0 6600                       		bne.s	loc_13490
000140A2 117C 000E 0016             		move.b	#$E,$16(a0)
000140A8 117C 0007 0017             		move.b	#7,$17(a0)
000140AE 117C 0002 001C             		move.b	#2,$1C(a0)	; use "jumping"	animation
000140B4 08E8 0002 0022             		bset	#2,$22(a0)
000140BA 5A68 000C                  		addq.w	#5,$C(a0)
000140BE                            
000140BE                            locret_1348E:
000140BE 4E75                       		rts	
000140C0                            ; ===========================================================================
000140C0                            
000140C0                            loc_13490:
000140C0 08E8 0004 0022             		bset	#4,$22(a0)
000140C6 4E75                       		rts	
000140C8                            ; End of function Sonic_Jump
000140C8                            
000140C8                            
000140C8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000140C8                            
000140C8                            
000140C8                            Sonic_JumpHeight:			; XREF: Obj01_MdJump; Obj01_MdJump2
000140C8 4A28 003C                  		tst.b	$3C(a0)
000140CC 6700                       		beq.s	loc_134C4
000140CE 323C FC00                  		move.w	#-$400,d1
000140D2 0828 0006 0022             		btst	#6,$22(a0)
000140D8 6700                       		beq.s	loc_134AE
000140DA 323C FE00                  		move.w	#-$200,d1
000140DE                            
000140DE                            loc_134AE:
000140DE B268 0012                  		cmp.w	$12(a0),d1
000140E2 6F00                       		ble.s	locret_134C2
000140E4 1038 F602                  		move.b	($FFFFF602).w,d0
000140E8 0200 0070                  		andi.b	#$70,d0		; is A,	B or C pressed?
000140EC 6600                       		bne.s	locret_134C2	; if yes, branch
000140EE 3141 0012                  		move.w	d1,$12(a0)
000140F2                            
000140F2                            locret_134C2:
000140F2 4A28 0012                  	tst.b	y_vel(a0)		; is Sonic exactly at the height of his jump?
000140F6 6700                       	beq.s	jmp_Sonic_CheckGoSuper	; if yes, test for turning into Super Sonic	
000140F8 4E75                       		rts	
000140FA                            ; ===========================================================================
000140FA                            
000140FA                            loc_134C4:
000140FA 0C68 F040 0012             		cmpi.w	#-$FC0,$12(a0)
00014100 6C00                       		bge.s	locret_134D2
00014102 317C F040 0012             		move.w	#-$FC0,$12(a0)
00014108                            
00014108                            locret_134D2:
00014108 4E75                       		rts	
0001410A                            ; End of function Sonic_JumpHeight
0001410A                            
0001410A                            Jmp_Sonic_CheckGoSuper
0001410A 4EF9 0000 0000             	jmp Sonic_CheckGoSuper
00014110                            ; ---------------------------------------------------------------------------
00014110                            ; Subroutine to make Sonic perform a spindash
00014110                            ; ---------------------------------------------------------------------------
00014110                             
00014110                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014110                             
00014110                             
00014110                            Sonic_SpinDash:
00014110 4A28 0039                  		tst.b	$39(a0)			; already Spin Dashing?
00014114 6600                       		bne.s	loc2_1AC8E		; if set, branch
00014116 0C28 0008 001C             		cmpi.b	#8,$1C(a0)		; is anim duck
0001411C 6600                       		bne.s	locret2_1AC8C		; if not, return
0001411E 1038 F603                  		move.b	($FFFFF603).w,d0	; read controller
00014122 0200 0070                  		andi.b	#$70,d0			; pressing A/B/C ?
00014126 6700 0000                  		beq.w	locret2_1AC8C		; if not, return
0001412A 117C 001D 001C             		move.b	#$1D,$1C(a0)		; set Spin Dash anim (9 in s2)
00014130 303C 00D1                  		move.w	#$D1,d0			; spin sound ($E0 in s2)
00014134 4EB9 0000 1476             		jsr	(PlaySound_Special).l	; play spin sound
0001413A 588F                       		addq.l	#4,sp			; Add 4 bytes to the stack return address to skip Sonic_Jump on next rts to Obj01_MdNormal, preventing conflicts with button presses.
0001413C 117C 0001 0039             		move.b	#1,$39(a0)		; set Spin Dash flag
00014142 317C 0000 003A             		move.w	#0,$3A(a0)		; set charge count to 0
00014148 0C28 000C 0028             		cmpi.b	#$C,$28(a0)		; ??? oxygen remaining?
0001414E 11FC 0002 D1DC             		move.b	#2,($FFFFD1DC).w	; Set the Spin Dash dust animation to $2.
00014154                            						; the smoke/dust object
00014154                            loc2_1AC84:
00014154 6100 FDAC                  		bsr.w	Sonic_LevelBound
00014158 6100 0000                  		bsr.w	Sonic_AnglePos
0001415C                            
0001415C                            locret2_1AC8C:
0001415C 4E75                       		rts	
0001415E                            ; ---------------------------------------------------------------------------
0001415E                            
0001415E                            loc2_1AC8E:
0001415E 117C 001D 001C             		move.b	#$1D,$1C(a0)
00014164 1038 F602                  		move.b	($FFFFF602).w,d0	; read controller
00014168 0800 0001                  		btst	#1,d0			; check down button
0001416C 6600 0000                  		bne.w	loc2_1AD30		; if set, branch
00014170 117C 000E 0016             		move.b	#$E,$16(a0)		; $16(a0) is height/2
00014176 117C 0007 0017             		move.b	#7,$17(a0)		; $17(a0) is width/2
0001417C 117C 0002 001C             		move.b	#2,$1C(a0)		; set animation to roll
00014182 5A68 000C                  		addq.w	#5,$C(a0)		; $C(a0) is Y coordinate
00014186 117C 0000 0039             		move.b	#0,$39(a0)		; clear Spin Dash flag
0001418C 7000                       		moveq	#0,d0
0001418E 1028 003A                  		move.b	$3A(a0),d0		; copy charge count
00014192 D040                       		add.w	d0,d0			; double it
00014194 317B 0000 0014             		move.w	Dash_Speeds(pc,d0.w),$14(a0) ; get normal speed
0001419A 3028 0014                  		move.w	$14(a0),d0		; get inertia
0001419E 0440 0800                  		subi.w	#$800,d0		; subtract $800
000141A2 D040                       		add.w	d0,d0			; double it
000141A4 0240 1F00                  		andi.w	#$1F00,d0		; mask it against $1F00
000141A8 4440                       		neg.w	d0			; negate it
000141AA 0640 2000                  		addi.w	#$2000,d0		; add $2000
000141AE 31C0 C904                  		move.w	d0,($FFFFC904).w	; move to $C904
000141B2 0828 0000 0022             		btst	#0,$22(a0)		; is sonic facing right?
000141B8 6700                       		beq.s	loc2_1ACF4		; if not, branch
000141BA 4468 0014                  		neg.w	$14(a0)			; negate inertia
000141BE                            ; ===========================================================================
000141BE                            jmp_loc2_1AD78:
000141BE 4EF9 0000 0000             	jmp loc2_1AD78
000141C4                            loc2_1ACF4:
000141C4 08E8 0002 0022             		bset	#2,$22(a0)		; set unused (in s1) flag
000141CA 11FC 0000 D1DC             		move.b	#0,($FFFFD1DC).w	; clear Spin Dash dust animation.
000141D0 303C 00BC                  		move.w	#$BC,d0			; spin release sound
000141D4 4EB9 0000 1476             		jsr	(PlaySound_Special).l	; play it!
000141DA 60E2                       		bra.s	jmp_loc2_1AD78
000141DC                            ; ===========================================================================
000141DC                            ;zafast:
000141DC                            ;		move.w	SuperDash_Speeds(pc,d0.w),$14(a0) ; get super speed
000141DC                            ;		move.w	$14(a0),d0		; get inertia
000141DC                            ;		subi.w	#$800,d0		; subtract $800
000141DC                            ;		add.w	d0,d0			; double it
000141DC                            ;		andi.w	#$1F00,d0		; mask it against $1F00
000141DC                            ;		neg.w	d0			; negate it
000141DC                            ;		addi.w	#$2000,d0		; add $2000
000141DC                            ;		move.w	d0,($FFFFC904).w	; move to $C904
000141DC                            ;		btst	#0,$22(a0)		; is sonic facing right?
000141DC                            ;		beq.s	loc2_1ACF4		; if not, branch
000141DC                            ;		neg.w	$14(a0)			; negate inertia
000141DC                            
000141DC                            ; ===========================================================================
000141DC                            Dash_Speeds:
000141DC 0800                       		dc.w  $800		; 0
000141DE 0880                       		dc.w  $880		; 1
000141E0 0900                       		dc.w  $900		; 2
000141E2 0980                       		dc.w  $980		; 3
000141E4 0A00                       		dc.w  $A00		; 4
000141E6 0A80                       		dc.w  $A80		; 5
000141E8 0B00                       		dc.w  $B00		; 6
000141EA 0B80                       		dc.w  $B80		; 7
000141EC 0C00                       		dc.w  $C00		; 8
000141EE                            ;SuperDash_Speeds:
000141EE                            ;		dc.w  $B00		; 0
000141EE                            ;		dc.w  $B80		; 1
000141EE                            ;		dc.w  $C00		; 2
000141EE                            ;		dc.w  $C80		; 3
000141EE                            ;		dc.w  $D00		; 4
000141EE                            ;		dc.w  $D80		; 5
000141EE                            ;		dc.w  $E00		; 6
000141EE                            ;		dc.w  $E80		; 7
000141EE                            ;		dc.w  $F00		; 8		
000141EE                            ; ===========================================================================
000141EE                            
000141EE                            loc2_1AD30:				; If still charging the dash...
000141EE 4A68 003A                  		tst.w	$3A(a0)		; check charge count
000141F2 6700                       		beq.s	loc2_1AD48	; if zero, branch
000141F4 3028 003A                  		move.w	$3A(a0),d0	; otherwise put it in d0
000141F8 EA48                       		lsr.w	#5,d0		; shift right 5 (divide it by 32)
000141FA 9168 003A                  		sub.w	d0,$3A(a0)	; subtract from charge count
000141FE 6400                       		bcc.s	loc2_1AD48	; ??? branch if carry clear
00014200 317C 0000 003A             		move.w	#0,$3A(a0)	; set charge count to 0
00014206                            
00014206                            loc2_1AD48:
00014206 1038 F603                  		move.b	($FFFFF603).w,d0	; read controller
0001420A 0200 0070                  		andi.b	#$70,d0			; pressing A/B/C?
0001420E 6700 0000                  		beq.w	loc2_1AD78		; if not, branch
00014212 317C 1D00 001C             		move.w	#$1D00,$1C(a0)		; reset spdsh animation
00014218 303C 00D1                  		move.w	#$D1,d0			; was $E0 in sonic 2
0001421C 11FC 0002 D1DC             		move.b	#2,$FFFFD1DC.w	; Set the Spin Dash dust animation to $2.		
00014222 4EB9 0000 1476             		jsr	(PlaySound_Special).l	; play charge sound
00014228 0668 0200 003A             		addi.w	#$200,$3A(a0)		; increase charge count
0001422E 0C68 0800 003A             		cmpi.w	#$800,$3A(a0)		; check if it's maxed
00014234 6500                       		bcs.s	loc2_1AD78		; if not, then branch
00014236 317C 0800 003A             		move.w	#$800,$3A(a0)		; reset it to max
0001423C                            
0001423C                            loc2_1AD78:
0001423C 588F                       		addq.l	#4,sp			; increase stack ptr
0001423E 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w
00014244 6700                       		beq.s	loc2_1AD8C
00014246 6400                       		bcc.s	loc2_1AD88
00014248 5878 F73E                  		addq.w	#4,($FFFFF73E).w
0001424C                            
0001424C                            loc2_1AD88:
0001424C 5578 F73E                  		subq.w	#2,($FFFFF73E).w
00014250                            
00014250                            loc2_1AD8C:
00014250 6100 FCB0                  		bsr.w	Sonic_LevelBound
00014254 6100 0000                  		bsr.w	Sonic_AnglePos
00014258                            		;move.w	#$60,($FFFFF73E).w	; reset looking up/down
00014258 4E75                       		rts
0001425A                            ; End of subroutine Sonic_SpinDash
0001425A                            
0001425A                            SpinDash_dust:
0001425A                            Sprite_1DD20:				; DATA XREF: ROM:0001600C?o
0001425A 7000                       		moveq	#0,d0
0001425C 1028 0024                  		move.b	$24(a0),d0
00014260 323B 0000                  		move	off_1DD2E(pc,d0.w),d1
00014264 4EFB 1000                  		jmp	off_1DD2E(pc,d1.w)
00014268                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00014268 0000                       off_1DD2E:	dc loc_1DD36-off_1DD2E; 0 ; DATA XREF: h+6DBA?o h+6DBC?o ...
0001426A 0000                       		dc loc_1DD90-off_1DD2E; 1
0001426C 0000                       		dc loc_1DE46-off_1DD2E; 2
0001426E 0000                       		dc loc_1DE4A-off_1DD2E; 3
00014270                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00014270                            
00014270                            loc_1DD36:				; DATA XREF: h+6DBA?o
00014270 5428 0024                  		addq.b	#2,$24(a0)
00014274 217C 0000 0000 0004        		move.l	#MapUnc_1DF5E,4(a0)
0001427C 0028 0004 0001             		or.b	#4,1(a0)
00014282 117C 0001 0018             		move.b	#1,$18(a0)
00014288 117C 0010 0019             		move.b	#$10,$19(a0)
0001428E 317C 07A0 0002             		move	#$7A0,2(a0)
00014294 317C D000 003E             		move	#-$3000,$3E(a0)
0001429A 317C F400 003C             		move	#$F400,$3C(a0)
000142A0 B0FC D1C0                  		cmp	#-$2E40,a0
000142A4 6700                       		beq.s	loc_1DD8C
000142A6 117C 0001 0034             		move.b	#1,$34(a0)
000142AC                            ;		cmp	#2,($FFFFFF70).w
000142AC                            ;		beq.s	loc_1DD8C
000142AC                            ;		move	#$48C,2(a0)
000142AC                            ;		move	#-$4FC0,$3E(a0)
000142AC                            ;		move	#-$6E80,$3C(a0)
000142AC                            
000142AC                            loc_1DD8C:				; CODE XREF: h+6DF6?j h+6E04?j
000142AC                            ;		bsr.w	sub_16D6E
000142AC                            
000142AC                            loc_1DD90:				; DATA XREF: h+6DBA?o
000142AC 3468 003E                  		movea.w	$3E(a0),a2
000142B0 7000                       		moveq	#0,d0
000142B2 1028 001C                  		move.b	$1C(a0),d0
000142B6 D040                       		add	d0,d0
000142B8 323B 0000                  		move	off_1DDA4(pc,d0.w),d1
000142BC 4EFB 1000                  		jmp	off_1DDA4(pc,d1.w)
000142C0                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
000142C0 0000                       off_1DDA4:	dc loc_1DE28-off_1DDA4; 0 ; DATA XREF: h+6E30?o h+6E32?o ...
000142C2 0000                       		dc loc_1DDAC-off_1DDA4; 1
000142C4 0000                       		dc loc_1DDCC-off_1DDA4; 2
000142C6 0000                       		dc loc_1DE20-off_1DDA4; 3
000142C8                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
000142C8                            
000142C8                            loc_1DDAC:				; DATA XREF: h+6E30?o
000142C8 3178 F646 000C             		move	($FFFFF646).w,$C(a0)
000142CE 4A28 001D                  		tst.b	$1D(a0)
000142D2 6600                       		bne.s	loc_1DE28
000142D4 316A 0008 0008             		move	8(a2),8(a0)
000142DA 117C 0000 0022             		move.b	#0,$22(a0)
000142E0 0268 7FFF 0002             		and	#$7FFF,2(a0)
000142E6 6000                       		bra.s	loc_1DE28
000142E8                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
000142E8                            
000142E8                            loc_1DDCC:				; DATA XREF: h+6E30?o
000142E8                            ;		cmp.b	#$C,$28(a2)
000142E8                            ;		bcs.s	loc_1DE3E
000142E8 0C2A 0004 0024             		cmp.b	#4,$24(a2)
000142EE 6400                       		bcc.s	loc_1DE3E
000142F0 4A2A 0039                  		tst.b	$39(a2)
000142F4 6700                       		beq.s	loc_1DE3E
000142F6 316A 0008 0008             		move	8(a2),8(a0)
000142FC 316A 000C 000C             		move	$C(a2),$C(a0)
00014302 116A 0022 0022             		move.b	$22(a2),$22(a0)
00014308 0228 0001 0022             		and.b	#1,$22(a0)
0001430E 4A28 0034                  		tst.b	$34(a0)
00014312 6700                       		beq.s	loc_1DE06
00014314 5968 000C                  		sub	#4,$C(a0)
00014318                            
00014318                            loc_1DE06:				; CODE XREF: h+6E8A?j
00014318 4A28 001D                  		tst.b	$1D(a0)
0001431C 6600                       		bne.s	loc_1DE28
0001431E 0268 7FFF 0002             		and	#$7FFF,2(a0)
00014324 4A6A 0002                  		tst	2(a2)
00014328 6A00                       		bpl.s	loc_1DE28
0001432A 0068 8000 0002             		or	#-$8000,2(a0)
00014330                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00014330                            
00014330                            loc_1DE20:				; DATA XREF: h+6E30?o
00014330                            loc_1DE28:				; CODE XREF: h+6E42?j h+6E56?j ...
00014330 43F9 0000 0000             		lea	(off_1DF38).l,a1
00014336 4EB9 0000 B21C             		jsr	AnimateSprite
0001433C 6100 0000                  		bsr.w	loc_1DEE4
00014340 4EFA 9DC8                  		jmp	DisplaySprite
00014344                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00014344                            
00014344                            loc_1DE3E:				; CODE XREF: h+6E5E?j h+6E66?j ...
00014344 117C 0000 001C             		move.b	#0,$1C(a0)
0001434A 4E75                       		rts	
0001434C                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
0001434C                            
0001434C                            loc_1DE46:				; DATA XREF: h+6DBA?o
0001434C 6000 9DF8                  		bra.w	DeleteObject
00014350                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00014350                            
00014350                            
00014350                            
00014350                            loc_1DE4A:
00014350 3468 003E                  	movea.w	$3E(a0),a2
00014354 7210                       	moveq	#$10,d1
00014356 0C2A 000D 001C             	cmp.b	#$D,$1C(a2)
0001435C 6700                       	beq.s	loc_1DE64
0001435E 7206                       	moveq	#$6,d1
00014360 0C2A 0003 0021             	cmp.b	#$3,$21(a2)
00014366 6700                       	beq.s	loc_1DE64
00014368 117C 0002 0024             	move.b	#2,$24(a0)
0001436E 117C 0000 0032             	move.b	#0,$32(a0)
00014374 4E75                       	rts
00014376                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00014376                            
00014376                            loc_1DE64:				; CODE XREF: h+6EE0?j
00014376 5328 0032                  		subq.b	#1,$32(a0)
0001437A 6A00                       		bpl.s	loc_1DEE0
0001437C 117C 0003 0032             		move.b	#3,$32(a0)
00014382 4EBA A21C                  		jsr	SingleObjLoad
00014386 6600                       		bne.s	loc_1DEE0
00014388 1290                       		move.b	0(a0),0(a1)
0001438A 336A 0008 0008             		move	8(a2),8(a1)
00014390 336A 000C 000C             		move	$C(a2),$C(a1)
00014396 4A28 0034                  		tst.b	$34(a0)
0001439A 6700                       		beq.s	loc_1DE9A
0001439C 5941                       		sub	#4,d1
0001439E                            
0001439E                            loc_1DE9A:				; CODE XREF: h+6F1E?j
0001439E D369 000C                  		add	d1,$C(a1)
000143A2 137C 0000 0022             		move.b	#0,$22(a1)
000143A8 137C 0003 001C             		move.b	#3,$1C(a1)
000143AE 5429 0024                  		addq.b	#2,$24(a1)
000143B2 2368 0004 0004             		move.l	4(a0),4(a1)
000143B8 1368 0001 0001             		move.b	1(a0),1(a1)
000143BE 137C 0001 0018             		move.b	#1,$18(a1)
000143C4 137C 0004 0019             		move.b	#4,$19(a1)
000143CA 3368 0002 0002             		move	2(a0),2(a1)
000143D0 3368 003E 003E             		move	$3E(a0),$3E(a1)
000143D6 0269 7FFF 0002             		and	#$7FFF,2(a1)
000143DC 4A6A 0002                  		tst	2(a2)
000143E0 6A00                       		bpl.s	loc_1DEE0
000143E2 0069 8000 0002             		or	#-$8000,2(a1)
000143E8                            
000143E8                            loc_1DEE0:				; CODE XREF: h+6EF4?j h+6F00?j ...
000143E8 6100                       		bsr.s	loc_1DEE4
000143EA 4E75                       		rts	
000143EC                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
000143EC                            
000143EC                            loc_1DEE4:				; CODE XREF: h+6EC0?p h+6F6C?p
000143EC 7000                       		moveq	#0,d0
000143EE 1028 001A                  		move.b	$1A(a0),d0
000143F2 B028 0030                  		cmp.b	$30(a0),d0
000143F6 6700 0000                  		beq.w	locret_1DF36
000143FA 1140 0030                  		move.b	d0,$30(a0)
000143FE 45F9 0000 0000             		lea	(off_1E074).l,a2
00014404 D040                       		add	d0,d0
00014406 D4F2 0000                  		add	(a2,d0.w),a2
0001440A 3A1A                       		move	(a2)+,d5
0001440C 5345                       		subq	#1,d5
0001440E 6B00 0000                  		bmi.w	locret_1DF36
00014412 3828 003C                  		move $3C(a0),d4
00014416                            
00014416                            loc_1DF0A:				; CODE XREF: h+6FBE?j
00014416 7200                       		moveq	#0,d1
00014418 321A                       		move	(a2)+,d1
0001441A 3601                       		move	d1,d3
0001441C E04B                       		lsr.w	#8,d3
0001441E 0243 00F0                  		and	#$F0,d3	; 'ð'
00014422 0643 0010                  		add	#$10,d3
00014426 0241 0FFF                  		and	#$FFF,d1
0001442A EB89                       		lsl.l	#5,d1
0001442C 0681 0000 0000             		add.l	#Art_Dust,d1
00014432 3404                       		move	d4,d2
00014434 D843                       		add	d3,d4
00014436 D843                       		add	d3,d4
00014438 4EB9 0000 151A             		jsr	(QueueDMATransfer).l
0001443E 51CD FFD6                  		dbf	d5,loc_1DF0A
00014442 4E75                           rts
00014444                            
00014444                            locret_1DF36:				; CODE XREF: h+6F7A?j h+6F90?j
00014444 4E75                       		rts	
00014446                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00014446 0000                       off_1DF38:	dc byte_1DF40-off_1DF38; 0 ; DATA XREF: h+6EB4?o h+6FC4?o ...
00014448 0000                       		dc byte_1DF43-off_1DF38; 1
0001444A 0000                       		dc byte_1DF4F-off_1DF38; 2
0001444C 0000                       		dc byte_1DF58-off_1DF38; 3
0001444E 1F00 FF                    byte_1DF40:	dc.b $1F,  0,$FF	; 0 ; DATA XREF: h+6FC4?o
00014451 0301 0203 0405 0607 0809+  byte_1DF43:	dc.b   3,  1,  2,  3,  4,  5,  6,  7,  8,  9,$FD,  0; 0	; DATA XREF: h+6FC4?o
0001445D 010A 0B0C 0D0E 0F10 FF     byte_1DF4F:	dc.b   1, $A, $B, $C, $D, $E, $F,$10,$FF; 0 ; DATA XREF: h+6FC4?o
00014466 0311 1213 14FC             byte_1DF58:	dc.b   3,$11,$12,$13,$14,$FC; 0	; DATA XREF: h+6FC4?o
0001446C                            
0001446C                            return_1ABA4:
0001446C 4E75                       	rts
0001446E                            Sonic_CheckGoSuper:
0001446E                            	include "_inc\SuperSonic.asm"
0001446E                            ; ---------------------------------------------------------------------------
0001446E                            ; Subroutine called at the peak of a jump that transforms Sonic into Super Sonic
0001446E                            ; if he has enough rings and emeralds
0001446E                            ; ---------------------------------------------------------------------------
0001446E                            
0001446E                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
0001446E                            ; loc_1AB38: test_set_SS:
0001446E 4A38 FE19                  	tst.b	(Super_Sonic_flag).w	; is Sonic already Super?
00014472 66F8                       	bne.s	return_1ABA4		; if yes, branch
00014474                            ;	cmpi.b	#6,(Emerald_count).w	; does Sonic have exactly 7 emeralds?
00014474                            ;	bne.s	return_1ABA4		; if not, branch
00014474 0C78 0032 FE20             	cmpi.w	#50,(Ring_count).w	; does Sonic have at least 50 rings?
0001447A 65F0                       	bcs.s	return_1ABA4		; if not, branch
0001447C                            
0001447C 11FC 0001 F65F             	move.b	#1,(Super_Sonic_palette).w
00014482 11FC 000F F65E             	move.b	#$F,(Palette_frame_count).w
00014488 11FC 0001 FE19             	move.b	#1,(Super_Sonic_flag).w
0001448E 117C 0081 002A             	move.b	#$81,obj_control(a0)
00014494 117C 001F 001C             	move.b	#$1F,anim(a0)			; use transformation animation
0001449A                            ;	move.b	#$7E,(Object_RAM+$2040).w	; Obj7E is the ending sonic which is why it's commented out
0001449A 31FC 0A00 F760             	move.w	#$A00,(Sonic_top_speed).w
000144A0 31FC 0030 F762             	move.w	#$30,(Sonic_acceleration).w
000144A6 31FC 0100 F764             	move.w	#$100,(Sonic_deceleration).w
000144AC 317C 0000 0032             	move.w	#0,invincibility_time(a0)
000144B2 11FC 0001 FE2D             		move.b	#1,($FFFFFE2D).w ; make	Sonic invincible		move.b	#$38,($FFFFD200).w ; load stars	object ($3801)
000144B8 11FC 0001 D21C             		move.b	#1,($FFFFD21C).w
000144BE 11FC 0038 D240             		move.b	#$38,($FFFFD240).w ; load stars	object ($3802)
000144C4 11FC 0002 D25C             		move.b	#2,($FFFFD25C).w
000144CA 11FC 0038 D280             		move.b	#$38,($FFFFD280).w ; load stars	object ($3803)
000144D0 11FC 0003 D29C             		move.b	#3,($FFFFD29C).w
000144D6 11FC 0038 D2C0             		move.b	#$38,($FFFFD2C0).w ; load stars	object ($3804)
000144DC 11FC 0004 D2DC             		move.b	#4,($FFFFD2DC).w	
000144E2 303C 00C3                          move.w	#$C3,d0         ; 
000144E6 4EB9 0000 1470             	jsr	(PlaySound).l	; Play special ring sound effect.
000144EC 303C 009F                  	move.w	#$9F,d0         
000144F0 4EF9 0000 1476             	jmp	(PlaySound_Special).l	; load the invincibility song and return also playmusic doesn't exist
000144F6                            
000144F6                            ; End of subroutine Sonic_CheckGoSuper
000144F6                            
000144F6                            ; ---------------------------------------------------------------------------
000144F6                            ; Subroutine doing the extra logic for Super Sonic
000144F6                            ; ---------------------------------------------------------------------------
000144F6                            
000144F6                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
000144F6                            rts:
000144F6 4E75                       	rts
000144F8                            ; loc_1ABA6:
000144F8                            Sonic_Super:
000144F8 4A38 FE19                  	tst.b	(Super_Sonic_flag).w	; Ignore all this code if not Super Sonic
000144FC 6700 0000                  	beq.w	return_1AC3C
00014500 4A38 FE1E                  	tst.b	(Update_HUD_timer).w
00014504 6700                       	beq.s	Sonic_RevertToNormal ; ?
00014506 5378 F670                  	subq.w	#1,(Super_Sonic_frame_count).w
0001450A 6A00 0000                  	bpl.w	return_1AC3C
0001450E 31FC 003C F670             	move.w	#60,(Super_Sonic_frame_count).w	; Reset frame counter to 60
00014514 4A78 FE20                  	tst.w	(Ring_count).w
00014518 6700                       	beq.s	Sonic_RevertToNormal
0001451A 0038 0001 FE1D             	ori.b	#1,(Update_HUD_rings).w
00014520 0C78 0001 FE20             	cmpi.w	#1,(Ring_count).w
00014526 6700                       	beq.s	@update
00014528 0C78 000A FE20             	cmpi.w	#10,(Ring_count).w
0001452E 6700                       	beq.s	@update
00014530 0C78 0064 FE20             	cmpi.w	#100,(Ring_count).w
00014536 6600                       	bne.s	@update2
00014538                            @update
00014538 0038 0080 FE1D             	ori.b	#$80,(Update_HUD_rings).w
0001453E                            @update2
0001453E 5378 FE20                  	subq.w	#1,(Ring_count).w
00014542 66B2                       	bne.s	rts
00014544                            ; loc_1ABF2:
00014544                            Sonic_RevertToNormal:
00014544 11FC 0002 F65F             	move.b	#2,(Super_Sonic_palette).w	; Remove rotating palette
0001454A 31FC 0028 F65C             	move.w	#$28,($FFFFF65C).w	; Unknown
00014550 11FC 0000 FE19             	move.b	#0,(Super_Sonic_flag).w
00014556 117C 0001 001D             	move.b	#1,next_anim(a0)	; Change animation back to normal ?
0001455C 317C 0001 0032             	move.w	#1,invincibility_time(a0)	; Remove invincibility
00014562 31FC 0600 F760             	move.w	#$600,(Sonic_top_speed).w
00014568 31FC 000C F762             	move.w	#$C,(Sonic_acceleration).w
0001456E 31FC 0080 F764             	move.w	#$80,(Sonic_deceleration).w
00014574 0828 0006 0022             	btst	#6,status(a0)	; Check if underwater, return if not
0001457A 6700                       	beq.s	return_1AC3C
0001457C 31FC 0300 F760             	move.w	#$300,(Sonic_top_speed).w
00014582 31FC 0006 F762             	move.w	#6,(Sonic_acceleration).w
00014588 31FC 0040 F764             	move.w	#$40,(Sonic_deceleration).w
0001458E                            
0001458E                            return_1AC3C:
0001458E 4E75                       	rts
00014590                            ; End of subroutine Sonic_Super
00014590                            ; End of subroutine Sonic_Super
00014590                            ; -------------------------------------------------------------------------------
00014590                            ; Unknown Sprite Mappings
00014590                            ; -------------------------------------------------------------------------------
00014590                            MapUnc_1DF5E:
00014590 0000                       	dc word_1DF8A-MapUnc_1DF5E; 0
00014592 0000                       	dc word_1DF8C-MapUnc_1DF5E; 1
00014594 0000                       	dc word_1DF96-MapUnc_1DF5E; 2
00014596 0000                       	dc word_1DFA0-MapUnc_1DF5E; 3
00014598 0000                       	dc word_1DFAA-MapUnc_1DF5E; 4
0001459A 0000                       	dc word_1DFB4-MapUnc_1DF5E; 5
0001459C 0000                       	dc word_1DFBE-MapUnc_1DF5E; 6
0001459E 0000                       	dc word_1DFC8-MapUnc_1DF5E; 7
000145A0 0000                       	dc word_1DFD2-MapUnc_1DF5E; 8
000145A2 0000                       	dc word_1DFDC-MapUnc_1DF5E; 9
000145A4 0000                       	dc word_1DFE6-MapUnc_1DF5E; 10
000145A6 0000                       	dc word_1DFF0-MapUnc_1DF5E; 11
000145A8 0000                       	dc word_1DFFA-MapUnc_1DF5E; 12
000145AA 0000                       	dc word_1E004-MapUnc_1DF5E; 13
000145AC 0000                       	dc word_1E016-MapUnc_1DF5E; 14
000145AE 0000                       	dc word_1E028-MapUnc_1DF5E; 15
000145B0 0000                       	dc word_1E03A-MapUnc_1DF5E; 16
000145B2 0000                       	dc word_1E04C-MapUnc_1DF5E; 17
000145B4 0000                       	dc word_1E056-MapUnc_1DF5E; 18
000145B6 0000                       	dc word_1E060-MapUnc_1DF5E; 19
000145B8 0000                       	dc word_1E06A-MapUnc_1DF5E; 20
000145BA 0000                       	dc word_1DF8A-MapUnc_1DF5E; 21
000145BC 00                         word_1DF8A:	dc.b 0
000145BD 01                         word_1DF8C:	dc.b 1
000145BE F20D 0000 F0               	dc.b $F2, $0D, $0, 0,$F0; 0
000145C3 01                         word_1DF96:	dc.b 1
000145C4 E20F 0000 F0               	dc.b $E2, $0F, $0, 0,$F0; 0
000145C9 01                         word_1DFA0:	dc.b 1
000145CA E20F 0000 F0               	dc.b $E2, $0F, $0, 0,$F0; 0
000145CF 01                         word_1DFAA:	dc.b 1
000145D0 E20F 0000 F0               	dc.b $E2, $0F, $0, 0,$F0; 0
000145D5 01                         word_1DFB4:	dc.b 1
000145D6 E20F 0000 F0               	dc.b $E2, $0F, $0, 0,$F0; 0
000145DB 01                         word_1DFBE:	dc.b 1
000145DC E20F 0000 F0               	dc.b $E2, $0F, $0, 0,$F0; 0
000145E1 01                         word_1DFC8:	dc.b 1
000145E2 F20D 0000 F0               	dc.b $F2, $0D, $0, 0,$F0; 0
000145E7 01                         word_1DFD2:	dc.b 1
000145E8 F20D 0000 F0               	dc.b $F2, $0D, $0, 0,$F0; 0
000145ED 01                         word_1DFDC:	dc.b 1
000145EE F20D 0000 F0               	dc.b $F2, $0D, $0, 0,$F0; 0
000145F3 01                         word_1DFE6:	dc.b 1
000145F4 040D 0000 E0               	dc.b $4, $0D, $0, 0,$E0; 0
000145F9 01                         word_1DFF0:	dc.b 1
000145FA 040D 0000 E0               	dc.b $4, $0D, $0, 0,$E0; 0
000145FF 01                         word_1DFFA:	dc.b 1
00014600 040D 0000 E0               	dc.b $4, $0D, $0, 0,$E0; 0
00014605 02                         word_1E004:	dc.b 2
00014606 F401 0000 E8               	dc.b $F4, $01, $0, 0,$E8; 0
0001460B 040D 0002 E0               	dc.b $4, $0D, $0, 2,$E0; 4
00014610 02                         word_1E016:	dc.b 2
00014611 F405 0000 E8               	dc.b $F4, $05, $0, 0,$E8; 0
00014616 040D 0004 E0               	dc.b $4, $0D, $0, 4,$E0; 4
0001461B 02                         word_1E028:	dc.b 2
0001461C F409 0000 E0               	dc.b $F4, $09, $0, 0,$E0; 0
00014621 040D 0006 E0               	dc.b $4, $0D, $0, 6,$E0; 4
00014626 02                         word_1E03A:	dc.b 2
00014627 F409 0000 E0               	dc.b $F4, $09, $0, 0,$E0; 0
0001462C 040D 0006 E0               	dc.b $4, $0D, $0, 6,$E0; 4
00014631 01                         word_1E04C:	dc.b 1
00014632 F805 0000 F8               	dc.b $F8, $05, $0, 0,$F8; 0
00014637 01                         word_1E056:	dc.b 1
00014638 F805 0004 F8               	dc.b $F8, $05, $0, 4,$F8; 0
0001463D 01                         word_1E060:	dc.b 1
0001463E F805 0008 F8               	dc.b $F8, $05, $0, 8,$F8; 0
00014643 01                         word_1E06A:	dc.b 1
00014644 F805 000C F8               	dc.b $F8, $05, $0, $C,$F8; 0
00014649 00                         	dc.b 0
0001464A 0000                       off_1E074:	dc word_1E0A0-off_1E074; 0
0001464C 0000                       	dc word_1E0A2-off_1E074; 1
0001464E 0000                       	dc word_1E0A6-off_1E074; 2
00014650 0000                       	dc word_1E0AA-off_1E074; 3
00014652 0000                       	dc word_1E0AE-off_1E074; 4
00014654 0000                       	dc word_1E0B2-off_1E074; 5
00014656 0000                       	dc word_1E0B6-off_1E074; 6
00014658 0000                       	dc word_1E0BA-off_1E074; 7
0001465A 0000                       	dc word_1E0BE-off_1E074; 8
0001465C 0000                       	dc word_1E0C2-off_1E074; 9
0001465E 0000                       	dc word_1E0C6-off_1E074; 10
00014660 0000                       	dc word_1E0CA-off_1E074; 11
00014662 0000                       	dc word_1E0CE-off_1E074; 12
00014664 0000                       	dc word_1E0D2-off_1E074; 13
00014666 0000                       	dc word_1E0D8-off_1E074; 14
00014668 0000                       	dc word_1E0DE-off_1E074; 15
0001466A 0000                       	dc word_1E0E4-off_1E074; 16
0001466C 0000                       	dc word_1E0EA-off_1E074; 17
0001466E 0000                       	dc word_1E0EA-off_1E074; 18
00014670 0000                       	dc word_1E0EA-off_1E074; 19
00014672 0000                       	dc word_1E0EA-off_1E074; 20
00014674 0000                       	dc word_1E0EC-off_1E074; 21
00014676 0000                       word_1E0A0:	dc 0
00014678 0001                       word_1E0A2:	dc 1
0001467A 7000                       	dc $7000
0001467C 0001                       word_1E0A6:	dc 1
0001467E F008                       	dc $F008
00014680 0001                       word_1E0AA:	dc 1
00014682 F018                       	dc $F018
00014684 0001                       word_1E0AE:	dc 1
00014686 F028                       	dc $F028
00014688 0001                       word_1E0B2:	dc 1
0001468A F038                       	dc $F038
0001468C 0001                       word_1E0B6:	dc 1
0001468E F048                       	dc $F048
00014690 0001                       word_1E0BA:	dc 1
00014692 7058                       	dc $7058
00014694 0001                       word_1E0BE:	dc 1
00014696 7060                       	dc $7060
00014698 0001                       word_1E0C2:	dc 1
0001469A 7068                       	dc $7068
0001469C 0001                       word_1E0C6:	dc 1
0001469E 7070                       	dc $7070
000146A0 0001                       word_1E0CA:	dc 1
000146A2 7078                       	dc $7078
000146A4 0001                       word_1E0CE:	dc 1
000146A6 7080                       	dc $7080
000146A8 0002                       word_1E0D2:	dc 2
000146AA 1088                       	dc $1088
000146AC 708A                       	dc $708A
000146AE 0002                       word_1E0D8:	dc 2
000146B0 3092                       	dc $3092
000146B2 7096                       	dc $7096
000146B4 0002                       word_1E0DE:	dc 2
000146B6 509E                       	dc $509E
000146B8 70A4                       	dc $70A4
000146BA 0002                       word_1E0E4:	dc 2
000146BC 50AC                       	dc $50AC
000146BE 70B2                       	dc $70B2
000146C0 0000                       word_1E0EA:	dc 0
000146C2 0001                       word_1E0EC:	dc 1
000146C4 F0BA                       	dc $F0BA
000146C6                            	even
000146C6                            
000146C6                            ; ---------------------------------------------------------------------------
000146C6                            ; Subroutine to	slow Sonic walking up a	slope
000146C6                            ; ---------------------------------------------------------------------------
000146C6                            
000146C6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000146C6                            
000146C6                            
000146C6                            Sonic_SlopeResist:			; XREF: Obj01_MdNormal
000146C6 1028 0026                  		move.b	$26(a0),d0
000146CA 0600 0060                  		addi.b	#$60,d0
000146CE 0C00 00C0                  		cmpi.b	#$C0,d0
000146D2 6400                       		bcc.s	locret_13508
000146D4 1028 0026                  		move.b	$26(a0),d0
000146D8 4EB9 0000 33D4             		jsr	(CalcSine).l
000146DE C1FC 0020                  		muls.w	#$20,d0
000146E2 E080                       		asr.l	#8,d0
000146E4 4A68 0014                  		tst.w	$14(a0)
000146E8 6700                       		beq.s	locret_13508
000146EA 6B00                       		bmi.s	loc_13504
000146EC 4A40                       		tst.w	d0
000146EE 6700                       		beq.s	locret_13502
000146F0 D168 0014                  		add.w	d0,$14(a0)	; change Sonic's inertia
000146F4                            
000146F4                            locret_13502:
000146F4 4E75                       		rts	
000146F6                            ; ===========================================================================
000146F6                            
000146F6                            loc_13504:
000146F6 D168 0014                  		add.w	d0,$14(a0)
000146FA                            
000146FA                            locret_13508:
000146FA 4E75                       		rts	
000146FC                            ; End of function Sonic_SlopeResist
000146FC                            
000146FC                            ; ---------------------------------------------------------------------------
000146FC                            ; Subroutine to	push Sonic down	a slope	while he's rolling
000146FC                            ; ---------------------------------------------------------------------------
000146FC                            
000146FC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000146FC                            
000146FC                            
000146FC                            Sonic_RollRepel:			; XREF: Obj01_MdRoll
000146FC 1028 0026                  		move.b	$26(a0),d0
00014700 0600 0060                  		addi.b	#$60,d0
00014704 0C00 00C0                  		cmpi.b	#-$40,d0
00014708 6400                       		bcc.s	locret_13544
0001470A 1028 0026                  		move.b	$26(a0),d0
0001470E 4EB9 0000 33D4             		jsr	(CalcSine).l
00014714 C1FC 0050                  		muls.w	#$50,d0
00014718 E080                       		asr.l	#8,d0
0001471A 4A68 0014                  		tst.w	$14(a0)
0001471E 6B00                       		bmi.s	loc_1353A
00014720 4A40                       		tst.w	d0
00014722 6A00                       		bpl.s	loc_13534
00014724 E480                       		asr.l	#2,d0
00014726                            
00014726                            loc_13534:
00014726 D168 0014                  		add.w	d0,$14(a0)
0001472A 4E75                       		rts	
0001472C                            ; ===========================================================================
0001472C                            
0001472C                            loc_1353A:
0001472C 4A40                       		tst.w	d0
0001472E 6B00                       		bmi.s	loc_13540
00014730 E480                       		asr.l	#2,d0
00014732                            
00014732                            loc_13540:
00014732 D168 0014                  		add.w	d0,$14(a0)
00014736                            
00014736                            locret_13544:
00014736 4E75                       		rts	
00014738                            ; End of function Sonic_RollRepel
00014738                            
00014738                            ; ---------------------------------------------------------------------------
00014738                            ; Subroutine to	push Sonic down	a slope
00014738                            ; ---------------------------------------------------------------------------
00014738                            
00014738                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014738                            
00014738                            
00014738                            Sonic_SlopeRepel:			; XREF: Obj01_MdNormal; Obj01_MdRoll
00014738 4E71                       		nop	
0001473A 4A28 0038                  		tst.b	$38(a0)
0001473E 6600                       		bne.s	locret_13580
00014740 4A68 003E                  		tst.w	$3E(a0)
00014744 6600                       		bne.s	loc_13582
00014746 1028 0026                  		move.b	$26(a0),d0
0001474A 0600 0020                  		addi.b	#$20,d0
0001474E 0200 00C0                  		andi.b	#$C0,d0
00014752 6700                       		beq.s	locret_13580
00014754 3028 0014                  		move.w	$14(a0),d0
00014758 6A00                       		bpl.s	loc_1356A
0001475A 4440                       		neg.w	d0
0001475C                            
0001475C                            loc_1356A:
0001475C 0C40 0280                  		cmpi.w	#$280,d0
00014760 6400                       		bcc.s	locret_13580
00014762 4268 0014                  		clr.w	$14(a0)
00014766 08E8 0001 0022             		bset	#1,$22(a0)
0001476C 317C 001E 003E             		move.w	#$1E,$3E(a0)
00014772                            
00014772                            locret_13580:
00014772 4E75                       		rts	
00014774                            ; ===========================================================================
00014774                            
00014774                            loc_13582:
00014774 5368 003E                  		subq.w	#1,$3E(a0)
00014778 4E75                       		rts	
0001477A                            ; End of function Sonic_SlopeRepel
0001477A                            
0001477A                            ; ---------------------------------------------------------------------------
0001477A                            ; Subroutine to	return Sonic's angle to 0 as he jumps
0001477A                            ; ---------------------------------------------------------------------------
0001477A                            
0001477A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001477A                            
0001477A                            
0001477A                            Sonic_JumpAngle:			; XREF: Obj01_MdJump; Obj01_MdJump2
0001477A 1028 0026                  		move.b	$26(a0),d0	; get Sonic's angle
0001477E 6700                       		beq.s	locret_135A2	; if already 0,	branch
00014780 6A00                       		bpl.s	loc_13598	; if higher than 0, branch
00014782                            
00014782 5400                       		addq.b	#2,d0		; increase angle
00014784 6400                       		bcc.s	loc_13596
00014786 7000                       		moveq	#0,d0
00014788                            
00014788                            loc_13596:
00014788 6000                       		bra.s	loc_1359E
0001478A                            ; ===========================================================================
0001478A                            
0001478A                            loc_13598:
0001478A 5500                       		subq.b	#2,d0		; decrease angle
0001478C 6400                       		bcc.s	loc_1359E
0001478E 7000                       		moveq	#0,d0
00014790                            
00014790                            loc_1359E:
00014790 1140 0026                  		move.b	d0,$26(a0)
00014794                            
00014794                            locret_135A2:
00014794 4E75                       		rts	
00014796                            ; End of function Sonic_JumpAngle
00014796                            
00014796                            ; ---------------------------------------------------------------------------
00014796                            ; Subroutine for Sonic to interact with	the floor after	jumping/falling
00014796                            ; ---------------------------------------------------------------------------
00014796                            
00014796                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014796                            
00014796                            
00014796                            Sonic_Floor:				; XREF: Obj01_MdJump; Obj01_MdJump2
00014796 3228 0010                  		move.w	$10(a0),d1
0001479A 3428 0012                  		move.w	$12(a0),d2
0001479E 4EB9 0000 36A2             		jsr	(CalcAngle).l
000147A4 11C0 FFEC                  		move.b	d0,($FFFFFFEC).w
000147A8 0400 0020                  		subi.b	#$20,d0
000147AC 11C0 FFED                  		move.b	d0,($FFFFFFED).w
000147B0 0200 00C0                  		andi.b	#$C0,d0
000147B4 11C0 FFEE                  		move.b	d0,($FFFFFFEE).w
000147B8 0C00 0040                  		cmpi.b	#$40,d0
000147BC 6700 0000                  		beq.w	loc_13680
000147C0 0C00 0080                  		cmpi.b	#$80,d0
000147C4 6700 0000                  		beq.w	loc_136E2
000147C8 0C00 00C0                  		cmpi.b	#-$40,d0
000147CC 6700 0000                  		beq.w	loc_1373E
000147D0 6100 0000                  		bsr.w	Sonic_HitWall
000147D4 4A41                       		tst.w	d1
000147D6 6A00                       		bpl.s	loc_135F0
000147D8 9368 0008                  		sub.w	d1,8(a0)
000147DC 317C 0000 0010             		move.w	#0,$10(a0)
000147E2                            
000147E2                            loc_135F0:
000147E2 6100 0000                  		bsr.w	sub_14EB4
000147E6 4A41                       		tst.w	d1
000147E8 6A00                       		bpl.s	loc_13602
000147EA D368 0008                  		add.w	d1,8(a0)
000147EE 317C 0000 0010             		move.w	#0,$10(a0)
000147F4                            
000147F4                            loc_13602:
000147F4 6100 0000                  		bsr.w	Sonic_HitFloor
000147F8 11C1 FFEF                  		move.b	d1,($FFFFFFEF).w
000147FC 4A41                       		tst.w	d1
000147FE 6A00                       		bpl.s	locret_1367E
00014800 1428 0012                  		move.b	$12(a0),d2
00014804 5002                       		addq.b	#8,d2
00014806 4402                       		neg.b	d2
00014808 B202                       		cmp.b	d2,d1
0001480A 6C00                       		bge.s	loc_1361E
0001480C B002                       		cmp.b	d2,d0
0001480E 6D00                       		blt.s	locret_1367E
00014810                            
00014810                            loc_1361E:
00014810 D368 000C                  		add.w	d1,$C(a0)
00014814 1143 0026                  		move.b	d3,$26(a0)
00014818 6100 0000                  		bsr.w	Sonic_ResetOnFloor
0001481C 117C 0000 001C             		move.b	#0,$1C(a0)
00014822 1003                       		move.b	d3,d0
00014824 0600 0020                  		addi.b	#$20,d0
00014828 0200 0040                  		andi.b	#$40,d0
0001482C 6600                       		bne.s	loc_1365C
0001482E 1003                       		move.b	d3,d0
00014830 0600 0010                  		addi.b	#$10,d0
00014834 0200 0020                  		andi.b	#$20,d0
00014838 6700                       		beq.s	loc_1364E
0001483A E0E8 0012                  		asr	$12(a0)
0001483E 6000                       		bra.s	loc_13670
00014840                            ; ===========================================================================
00014840                            
00014840                            loc_1364E:
00014840 317C 0000 0012             		move.w	#0,$12(a0)
00014846 3168 0010 0014             		move.w	$10(a0),$14(a0)
0001484C 4E75                       		rts	
0001484E                            ; ===========================================================================
0001484E                            
0001484E                            loc_1365C:
0001484E 317C 0000 0010             		move.w	#0,$10(a0)
00014854 0C68 0FC0 0012             		cmpi.w	#$FC0,$12(a0)
0001485A 6F00                       		ble.s	loc_13670
0001485C 317C 0FC0 0012             		move.w	#$FC0,$12(a0)
00014862                            
00014862                            loc_13670:
00014862 3168 0012 0014             		move.w	$12(a0),$14(a0)
00014868 4A03                       		tst.b	d3
0001486A 6A00                       		bpl.s	locret_1367E
0001486C 4468 0014                  		neg.w	$14(a0)
00014870                            
00014870                            locret_1367E:
00014870 4E75                       		rts	
00014872                            ; ===========================================================================
00014872                            
00014872                            loc_13680:
00014872 6100 0000                  		bsr.w	Sonic_HitWall
00014876 4A41                       		tst.w	d1
00014878 6A00                       		bpl.s	loc_1369A
0001487A 9368 0008                  		sub.w	d1,8(a0)
0001487E 317C 0000 0010             		move.w	#0,$10(a0)
00014884 3168 0012 0014             		move.w	$12(a0),$14(a0)
0001488A 4E75                       		rts	
0001488C                            ; ===========================================================================
0001488C                            
0001488C                            loc_1369A:
0001488C 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00014890 4A41                       		tst.w	d1
00014892 6A00                       		bpl.s	loc_136B4
00014894 9368 000C                  		sub.w	d1,$C(a0)
00014898 4A68 0012                  		tst.w	$12(a0)
0001489C 6A00                       		bpl.s	locret_136B2
0001489E 317C 0000 0012             		move.w	#0,$12(a0)
000148A4                            
000148A4                            locret_136B2:
000148A4 4E75                       		rts	
000148A6                            ; ===========================================================================
000148A6                            
000148A6                            loc_136B4:
000148A6 4A68 0012                  		tst.w	$12(a0)
000148AA 6B00                       		bmi.s	locret_136E0
000148AC 6100 0000                  		bsr.w	Sonic_HitFloor
000148B0 4A41                       		tst.w	d1
000148B2 6A00                       		bpl.s	locret_136E0
000148B4 D368 000C                  		add.w	d1,$C(a0)
000148B8 1143 0026                  		move.b	d3,$26(a0)
000148BC 6100 0000                  		bsr.w	Sonic_ResetOnFloor
000148C0 117C 0000 001C             		move.b	#0,$1C(a0)
000148C6 317C 0000 0012             		move.w	#0,$12(a0)
000148CC 3168 0010 0014             		move.w	$10(a0),$14(a0)
000148D2                            
000148D2                            locret_136E0:
000148D2 4E75                       		rts	
000148D4                            ; ===========================================================================
000148D4                            
000148D4                            loc_136E2:
000148D4 6100 0000                  		bsr.w	Sonic_HitWall
000148D8 4A41                       		tst.w	d1
000148DA 6A00                       		bpl.s	loc_136F4
000148DC 9368 0008                  		sub.w	d1,8(a0)
000148E0 317C 0000 0010             		move.w	#0,$10(a0)
000148E6                            
000148E6                            loc_136F4:
000148E6 6100 0000                  		bsr.w	sub_14EB4
000148EA 4A41                       		tst.w	d1
000148EC 6A00                       		bpl.s	loc_13706
000148EE D368 0008                  		add.w	d1,8(a0)
000148F2 317C 0000 0010             		move.w	#0,$10(a0)
000148F8                            
000148F8                            loc_13706:
000148F8 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
000148FC 4A41                       		tst.w	d1
000148FE 6A00                       		bpl.s	locret_1373C
00014900 9368 000C                  		sub.w	d1,$C(a0)
00014904 1003                       		move.b	d3,d0
00014906 0600 0020                  		addi.b	#$20,d0
0001490A 0200 0040                  		andi.b	#$40,d0
0001490E 6600                       		bne.s	loc_13726
00014910 317C 0000 0012             		move.w	#0,$12(a0)
00014916 4E75                       		rts	
00014918                            ; ===========================================================================
00014918                            
00014918                            loc_13726:
00014918 1143 0026                  		move.b	d3,$26(a0)
0001491C 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00014920 3168 0012 0014             		move.w	$12(a0),$14(a0)
00014926 4A03                       		tst.b	d3
00014928 6A00                       		bpl.s	locret_1373C
0001492A 4468 0014                  		neg.w	$14(a0)
0001492E                            
0001492E                            locret_1373C:
0001492E 4E75                       		rts	
00014930                            ; ===========================================================================
00014930                            
00014930                            loc_1373E:
00014930 6100 0000                  		bsr.w	sub_14EB4
00014934 4A41                       		tst.w	d1
00014936 6A00                       		bpl.s	loc_13758
00014938 D368 0008                  		add.w	d1,8(a0)
0001493C 317C 0000 0010             		move.w	#0,$10(a0)
00014942 3168 0012 0014             		move.w	$12(a0),$14(a0)
00014948 4E75                       		rts	
0001494A                            ; ===========================================================================
0001494A                            
0001494A                            loc_13758:
0001494A 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
0001494E 4A41                       		tst.w	d1
00014950 6A00                       		bpl.s	loc_13772
00014952 9368 000C                  		sub.w	d1,$C(a0)
00014956 4A68 0012                  		tst.w	$12(a0)
0001495A 6A00                       		bpl.s	locret_13770
0001495C 317C 0000 0012             		move.w	#0,$12(a0)
00014962                            
00014962                            locret_13770:
00014962 4E75                       		rts	
00014964                            ; ===========================================================================
00014964                            
00014964                            loc_13772:
00014964 4A68 0012                  		tst.w	$12(a0)
00014968 6B00                       		bmi.s	locret_1379E
0001496A 6100 0000                  		bsr.w	Sonic_HitFloor
0001496E 4A41                       		tst.w	d1
00014970 6A00                       		bpl.s	locret_1379E
00014972 D368 000C                  		add.w	d1,$C(a0)
00014976 1143 0026                  		move.b	d3,$26(a0)
0001497A 6100 0000                  		bsr.w	Sonic_ResetOnFloor
0001497E 117C 0000 001C             		move.b	#0,$1C(a0)
00014984 317C 0000 0012             		move.w	#0,$12(a0)
0001498A 3168 0010 0014             		move.w	$10(a0),$14(a0)
00014990                            
00014990                            locret_1379E:
00014990 4E75                       		rts	
00014992                            ; End of function Sonic_Floor
00014992                            
00014992                            ; ---------------------------------------------------------------------------
00014992                            ; Subroutine to	reset Sonic's mode when he lands on the floor
00014992                            ; ---------------------------------------------------------------------------
00014992                            
00014992                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014992                            
00014992                            
00014992                            Sonic_ResetOnFloor:			; XREF: PlatformObject; et al
00014992 0828 0004 0022             		btst	#4,$22(a0)
00014998 6700                       		beq.s	loc_137AE
0001499A 4E71                       		nop	
0001499C 4E71                       		nop	
0001499E 4E71                       		nop	
000149A0                            
000149A0                            loc_137AE:
000149A0 08A8 0005 0022             		bclr	#5,$22(a0)
000149A6 08A8 0001 0022             		bclr	#1,$22(a0)
000149AC 08A8 0004 0022             		bclr	#4,$22(a0)
000149B2 0828 0002 0022             		btst	#2,$22(a0)
000149B8 6700                       		beq.s	loc_137E4
000149BA 08A8 0002 0022             		bclr	#2,$22(a0)
000149C0 117C 0013 0016             		move.b	#$13,$16(a0)
000149C6 117C 0009 0017             		move.b	#9,$17(a0)
000149CC 117C 0000 001C             		move.b	#0,$1C(a0)	; use running/walking animation
000149D2 5B68 000C                  		subq.w	#5,$C(a0)
000149D6                            
000149D6                            loc_137E4:
000149D6 117C 0000 003C             		move.b	#0,$3C(a0)
000149DC 31FC 0000 F7D0             		move.w	#0,($FFFFF7D0).w
000149E2 4E75                       		rts	
000149E4                            ; End of function Sonic_ResetOnFloor
000149E4                            
000149E4                            ; ===========================================================================
000149E4                            ; ---------------------------------------------------------------------------
000149E4                            ; Sonic	when he	gets hurt
000149E4                            ; ---------------------------------------------------------------------------
000149E4                            
000149E4                            Obj01_Hurt:				; XREF: Obj01_Index
000149E4 4EBA 96FE                  		jsr	SpeedToPos
000149E8 0668 0030 0012             		addi.w	#$30,$12(a0)
000149EE 0828 0006 0022             		btst	#6,$22(a0)
000149F4 6700                       		beq.s	loc_1380C
000149F6 0468 0020 0012             		subi.w	#$20,$12(a0)
000149FC                            
000149FC                            loc_1380C:
000149FC 6100 0000                  		bsr.w	Sonic_HurtStop
00014A00 6100 F500                  		bsr.w	Sonic_LevelBound
00014A04 6100 EEC6                  		bsr.w	Sonic_RecordPos
00014A08 6100 EEDC                  		bsr.w	Sonic_Water		
00014A0C 6100 0000                  		bsr.w	Sonic_Animate
00014A10 6100 0000                  		bsr.w	LoadSonicDynPLC
00014A14 4EFA 96F4                  		jmp	DisplaySprite
00014A18                            
00014A18                            ; ---------------------------------------------------------------------------
00014A18                            ; Subroutine to	stop Sonic falling after he's been hurt
00014A18                            ; ---------------------------------------------------------------------------
00014A18                            
00014A18                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014A18                            
00014A18                            
00014A18                            Sonic_HurtStop:				; XREF: Obj01_Hurt
00014A18 3038 F72E                  		move.w	($FFFFF72E).w,d0
00014A1C 0640 00E0                  		addi.w	#$E0,d0
00014A20 B068 000C                  		cmp.w	$C(a0),d0
00014A24 6500 F51E                  		bcs.w	Jmp_KillSonic
00014A28 6100 FD6C                  		bsr.w	Sonic_Floor
00014A2C 0828 0001 0022             		btst	#1,$22(a0)
00014A32 6600                       		bne.s	locret_13860
00014A34 7000                       		moveq	#0,d0
00014A36 3140 0012                  		move.w	d0,$12(a0)
00014A3A 3140 0010                  		move.w	d0,$10(a0)
00014A3E 3140 0014                  		move.w	d0,$14(a0)
00014A42 117C 0000 001C             		move.b	#0,$1C(a0)
00014A48 5528 0024                  		subq.b	#2,$24(a0)
00014A4C 317C 0078 0030             		move.w	#$78,$30(a0)
00014A52                            
00014A52                            locret_13860:
00014A52 4E75                       		rts	
00014A54                            ; End of function Sonic_HurtStop
00014A54                            
00014A54                            ; ===========================================================================
00014A54                            ; ---------------------------------------------------------------------------
00014A54                            ; Sonic	when he	dies
00014A54                            ; ---------------------------------------------------------------------------
00014A54                            
00014A54                            Obj01_Death:				; XREF: Obj01_Index
00014A54 6100 0000                  		bsr.w	GameOver
00014A58 4EBA 965E                  		jsr	ObjectFall
00014A5C 6100 EE6E                  		bsr.w	Sonic_RecordPos
00014A60 6100 0000                  		bsr.w	Sonic_Animate
00014A64 6100 0000                  		bsr.w	LoadSonicDynPLC
00014A68 4EFA 96A0                  		jmp	DisplaySprite
00014A6C                            
00014A6C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014A6C                            
00014A6C                            
00014A6C                            GameOver:				; XREF: Obj01_Death
00014A6C 3038 F72E                  		move.w	($FFFFF72E).w,d0
00014A70 0640 0100                  		addi.w	#$100,d0
00014A74 B068 000C                  		cmp.w	$C(a0),d0
00014A78 6C00 0000                  		bge.w	locret_13900
00014A7C 317C FFC8 0012             		move.w	#-$38,$12(a0)
00014A82 5428 0024                  		addq.b	#2,$24(a0)
00014A86 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
00014A8A 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; update lives	counter
00014A8E 5338 FE12                  		subq.b	#1,($FFFFFE12).w ; subtract 1 from number of lives
00014A92 6600                       		bne.s	loc_138D4
00014A94 317C 0000 003A             		move.w	#0,$3A(a0)
00014A9A 11FC 0039 D080             		move.b	#$39,($FFFFD080).w ; load GAME object
00014AA0 11FC 0039 D0C0             		move.b	#$39,($FFFFD0C0).w ; load OVER object
00014AA6 11FC 0001 D0DA             		move.b	#1,($FFFFD0DA).w ; set OVER object to correct frame
00014AAC 4238 FE1A                  		clr.b	($FFFFFE1A).w
00014AB0                            
00014AB0                            loc_138C2:
00014AB0 303C 008F                  		move.w	#$8F,d0
00014AB4 4EB9 0000 1470             		jsr	(PlaySound).l	; play game over music
00014ABA 7003                       		moveq	#3,d0
00014ABC 4EF9 0000 16EA             		jmp	(LoadPLC).l	; load game over patterns
00014AC2                            ; ===========================================================================
00014AC2                            
00014AC2                            loc_138D4:
00014AC2 317C 003C 003A             		move.w	#60,$3A(a0)	; set time delay to 1 second
00014AC8 4A38 FE1A                  		tst.b	($FFFFFE1A).w	; is TIME OVER tag set?
00014ACC 6700                       		beq.s	locret_13900	; if not, branch
00014ACE 317C 0000 003A             		move.w	#0,$3A(a0)
00014AD4 11FC 0039 D080             		move.b	#$39,($FFFFD080).w ; load TIME object
00014ADA 11FC 0039 D0C0             		move.b	#$39,($FFFFD0C0).w ; load OVER object
00014AE0 11FC 0002 D09A             		move.b	#2,($FFFFD09A).w
00014AE6 11FC 0003 D0DA             		move.b	#3,($FFFFD0DA).w
00014AEC 60C2                       		bra.s	loc_138C2
00014AEE                            ; ===========================================================================
00014AEE                            
00014AEE                            locret_13900:
00014AEE 4E75                       		rts	
00014AF0                            ; End of function GameOver
00014AF0                            
00014AF0                            ; ===========================================================================
00014AF0                            ; ---------------------------------------------------------------------------
00014AF0                            ; Sonic	when the level is restarted
00014AF0                            ; ---------------------------------------------------------------------------
00014AF0                            
00014AF0                            Obj01_ResetLevel:			; XREF: Obj01_Index
00014AF0 4A68 003A                  		tst.w	$3A(a0)
00014AF4 6700                       		beq.s	locret_13914
00014AF6 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time delay
00014AFA 6600                       		bne.s	locret_13914
00014AFC 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart the level
00014B02                            
00014B02                            locret_13914:
00014B02 4E75                       		rts	
00014B04                            
00014B04                            ; ---------------------------------------------------------------------------
00014B04                            ; Subroutine to	make Sonic run around loops (GHZ/SLZ)
00014B04                            ; ---------------------------------------------------------------------------
00014B04                            
00014B04                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014B04                            
00014B04                            
00014B04                            Sonic_Loops:				; XREF: Obj01_Control
00014B04 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; is level SLZ	?
00014B0A 6700                       		beq.s	loc_13926	; if yes, branch
00014B0C 4A38 FE10                  		tst.b	($FFFFFE10).w	; is level GHZ ?
00014B10 6600 0000                  		bne.w	locret_139C2	; if not, branch
00014B14                            
00014B14                            loc_13926:
00014B14 3028 000C                  		move.w	$C(a0),d0
00014B18 E248                       		lsr.w	#1,d0
00014B1A 0240 0380                  		andi.w	#$380,d0
00014B1E 1228 0008                  		move.b	8(a0),d1
00014B22 0241 007F                  		andi.w	#$7F,d1
00014B26 D041                       		add.w	d1,d0
00014B28 43F8 A400                  		lea	($FFFFA400).w,a1
00014B2C 1231 0000                  		move.b	(a1,d0.w),d1	; d1 is	the 256x256 tile Sonic is currently on
00014B30 B238 F7AE                  		cmp.b	($FFFFF7AE).w,d1
00014B34 6700 F486                  		beq.w	Obj01_ChkRoll
00014B38 B238 F7AF                  		cmp.b	($FFFFF7AF).w,d1
00014B3C 6700 F47E                  		beq.w	Obj01_ChkRoll
00014B40 B238 F7AC                  		cmp.b	($FFFFF7AC).w,d1
00014B44 6700                       		beq.s	loc_13976
00014B46 B238 F7AD                  		cmp.b	($FFFFF7AD).w,d1
00014B4A 6700                       		beq.s	loc_13966
00014B4C 08A8 0006 0001             		bclr	#6,1(a0)
00014B52 4E75                       		rts	
00014B54                            ; ===========================================================================
00014B54                            
00014B54                            loc_13966:
00014B54 0828 0001 0022             		btst	#1,$22(a0)
00014B5A 6700                       		beq.s	loc_13976
00014B5C 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
00014B62 4E75                       		rts	
00014B64                            ; ===========================================================================
00014B64                            
00014B64                            loc_13976:
00014B64 3428 0008                  		move.w	8(a0),d2
00014B68 0C02 002C                  		cmpi.b	#$2C,d2
00014B6C 6400                       		bcc.s	loc_13988
00014B6E 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
00014B74 4E75                       		rts	
00014B76                            ; ===========================================================================
00014B76                            
00014B76                            loc_13988:
00014B76 0C02 00E0                  		cmpi.b	#-$20,d2
00014B7A 6500                       		bcs.s	loc_13996
00014B7C 08E8 0006 0001             		bset	#6,1(a0)	; send Sonic to	low plane
00014B82 4E75                       		rts	
00014B84                            ; ===========================================================================
00014B84                            
00014B84                            loc_13996:
00014B84 0828 0006 0001             		btst	#6,1(a0)
00014B8A 6600                       		bne.s	loc_139B2
00014B8C 1228 0026                  		move.b	$26(a0),d1
00014B90 6700                       		beq.s	locret_139C2
00014B92 0C01 0080                  		cmpi.b	#-$80,d1
00014B96 6200                       		bhi.s	locret_139C2
00014B98 08E8 0006 0001             		bset	#6,1(a0)	; send Sonic to	low plane
00014B9E 4E75                       		rts	
00014BA0                            ; ===========================================================================
00014BA0                            
00014BA0                            loc_139B2:
00014BA0 1228 0026                  		move.b	$26(a0),d1
00014BA4 0C01 0080                  		cmpi.b	#-$80,d1
00014BA8 6300                       		bls.s	locret_139C2
00014BAA 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
00014BB0                            
00014BB0                            locret_139C2:
00014BB0 4E75                       		rts	
00014BB2                            ; End of function Sonic_Loops
00014BB2                            
00014BB2                            ; ---------------------------------------------------------------------------
00014BB2                            ; Sonic when he's drowning
00014BB2                            ; ---------------------------------------------------------------------------
00014BB2                             
00014BB2                            ; ||||||||||||||| S	U B	R O	U T	I N	E |||||||||||||||||||||||||||||||||||||||
00014BB2                             
00014BB2                             
00014BB2                            Sonic_Drowned:
00014BB2 6100 9530                  		bsr.w   SpeedToPos		; Make Sonic able to move
00014BB6 0668 0010 0012             		addi.w  #$10,$12(a0)	; Apply gravity
00014BBC 6100 ED0E                  		bsr.w   Sonic_RecordPos	; Record position
00014BC0 6100                       		bsr.s   Sonic_Animate	; Animate Sonic
00014BC2 6100 0000                  		bsr.w   LoadSonicDynPLC	; Load Sonic's DPLCs
00014BC6 6000 9542                  		bra.w   DisplaySprite	; And finally, display Sonic
00014BCA                            
00014BCA                            ; ---------------------------------------------------------------------------
00014BCA                            ; Subroutine to animate Sonic's sprites
00014BCA                            ; See also: AnimateSprite
00014BCA                            ; ---------------------------------------------------------------------------
00014BCA                            
00014BCA                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
00014BCA                            
00014BCA                            ; loc_1B350:
00014BCA                            Sonic_Animate:
00014BCA 43F9 0000 0000             	lea	(SonicAniData).l,a1
00014BD0 4A38 FE19                  	tst.b	(Super_Sonic_flag).w
00014BD4 6700                       	beq.s	loc1
00014BD6 43F9 0000 0000             	lea	(SuperSonicAniData).l,a1
00014BDC                            loc1
00014BDC 7000                       	moveq	#0,d0
00014BDE 1028 001C                  	move.b	anim(a0),d0
00014BE2 B028 001D                  	cmp.b	next_anim(a0),d0	; has animation changed?
00014BE6 6700                       	beq.s	SAnim_Do		; if not, branch
00014BE8 1140 001D                  	move.b	d0,next_anim(a0)	; set to next animation
00014BEC 117C 0000 001B             	move.b	#0,anim_frame(a0)	; reset animation frame
00014BF2 117C 0000 001E             	move.b	#0,anim_frame_duration(a0)	; reset frame duration
00014BF8 08A8 0005 0022             	bclr	#5,status(a0)
00014BFE                            ; loc_1B384:
00014BFE                            SAnim_Do:
00014BFE D040                       	add.w	d0,d0
00014C00 D2F1 0000                  	adda.w	(a1,d0.w),a1	; calculate address of appropriate animation script
00014C04 1011                       	move.b	(a1),d0
00014C06 6B00                       	bmi.s	SAnim_WalkRun	; if animation is walk/run/roll/jump, branch
00014C08 1228 0022                  	move.b	status(a0),d1
00014C0C 0201 0001                  	andi.b	#1,d1
00014C10 0228 00FC 0001             	andi.b	#$FC,render_flags(a0)
00014C16 8328 0001                  	or.b	d1,render_flags(a0)
00014C1A 5328 001E                  	subq.b	#1,anim_frame_duration(a0)	; subtract 1 from frame duration
00014C1E 6A00                       	bpl.s	SAnim_Delay			; if time remains, branch
00014C20 1140 001E                  	move.b	d0,anim_frame_duration(a0)	; load frame duration
00014C24                            ; loc_1B3AA:
00014C24                            SAnim_Do2:
00014C24 7200                       	moveq	#0,d1
00014C26 1228 001B                  	move.b	anim_frame(a0),d1	; load current frame number
00014C2A 1031 1001                  	move.b	1(a1,d1.w),d0		; read sprite number from script
00014C2E 0C00 00F0                  	cmpi.b	#$F0,d0
00014C32 6400                       	bcc.s	SAnim_End_FF		; if animation is complete, branch
00014C34                            ; loc_1B3BA:
00014C34                            SAnim_Next:
00014C34 1140 001A                  	move.b	d0,mapping_frame(a0)	; load sprite number
00014C38 5228 001B                  	addq.b	#1,anim_frame(a0)	; go to next frame
00014C3C                            ; return_1B3C2:
00014C3C                            SAnim_Delay:
00014C3C 4E75                       	rts
00014C3E                            ; ===========================================================================
00014C3E                            ; loc_1B3C4:
00014C3E                            SAnim_End_FF:
00014C3E 5200                       	addq.b	#1,d0		; is the end flag = $FF ?
00014C40 6600                       	bne.s	SAnim_End_FE	; if not, branch
00014C42 117C 0000 001B             	move.b	#0,anim_frame(a0)	; restart the animation
00014C48 1029 0001                  	move.b	1(a1),d0	; read sprite number
00014C4C 60E6                       	bra.s	SAnim_Next
00014C4E                            ; ===========================================================================
00014C4E                            ; loc_1B3D4:
00014C4E                            SAnim_End_FE:
00014C4E 5200                       	addq.b	#1,d0		; is the end flag = $FE ?
00014C50 6600                       	bne.s	SAnim_End_FD	; if not, branch
00014C52 1031 1002                  	move.b	2(a1,d1.w),d0	; read the next byte in the script
00014C56 9128 001B                  	sub.b	d0,anim_frame(a0)	; jump back d0 bytes in the script
00014C5A 9200                       	sub.b	d0,d1
00014C5C 1031 1001                  	move.b	1(a1,d1.w),d0	; read sprite number
00014C60 60D2                       	bra.s	SAnim_Next
00014C62                            ; ===========================================================================
00014C62                            ; loc_1B3E8:
00014C62                            SAnim_End_FD:
00014C62 5200                       	addq.b	#1,d0			; is the end flag = $FD ?
00014C64 6600                       	bne.s	SAnim_End		; if not, branch
00014C66 1171 1002 001C             	move.b	2(a1,d1.w),anim(a0)	; read next byte, run that animation
00014C6C                            ; return_1B3F2:
00014C6C                            SAnim_End:
00014C6C 4E75                       	rts
00014C6E                            ; ===========================================================================
00014C6E                            ; loc_1B3F4:
00014C6E                            SAnim_WalkRun:
00014C6E 5200                       	addq.b	#1,d0		; is the start flag = $FF ?
00014C70 6600 0000                  	bne.w	SAnim_Roll	; if not, branch
00014C74 7000                       	moveq	#0,d0		; is animation walking/running?
00014C76 1028 0027                  	move.b	flip_angle(a0),d0	; if not, branch
00014C7A 6600 0000                  	bne.w	SAnim_Tumble
00014C7E 7200                       	moveq	#0,d1
00014C80 1028 0026                  	move.b	angle(a0),d0	; get Sonic's angle
00014C84 6B00                       	bmi.s	loc2
00014C86 6700                       	beq.s	loc2
00014C88 5300                       	subq.b	#1,d0
00014C8A                            loc2
00014C8A 1428 0022                  	move.b	status(a0),d2
00014C8E 0202 0001                  	andi.b	#1,d2		; is Sonic mirrored horizontally?
00014C92 6600                       	bne.s	loc3		; if yes, branch
00014C94 4600                       	not.b	d0		; reverse angle
00014C96                            loc3
00014C96 0600 0010                  	addi.b	#$10,d0		; add $10 to angle
00014C9A 6A00                       	bpl.s	loc4		; if angle is $0-$7F, branch
00014C9C 7203                       	moveq	#3,d1
00014C9E                            loc4
00014C9E 0228 00FC 0001             	andi.b	#$FC,render_flags(a0)
00014CA4 B302                       	eor.b	d1,d2
00014CA6 8528 0001                  	or.b	d2,render_flags(a0)
00014CAA 0828 0005 0022             	btst	#5,status(a0)
00014CB0 6600 0000                  	bne.w	SAnim_Push
00014CB4 E808                       	lsr.b	#4,d0		; divide angle by 16
00014CB6 0200 0006                  	andi.b	#6,d0		; angle must be 0, 2, 4 or 6
00014CBA 3428 0014                  	move.w	inertia(a0),d2	; get Sonic's "speed" for animation purposes
00014CBE 6A00                       	bpl.s	loc5
00014CC0 4442                       	neg.w	d2
00014CC2                            loc5
00014CC2 4A28 002B                  	tst.b	status_secondary(a0)
00014CC6 6A00 0000                  	bpl.w	loc6
00014CCA D442                       	add.w	d2,d2
00014CCC                            loc6
00014CCC 4A38 FE19                  	tst.b	(Super_Sonic_flag).w
00014CD0 6600                       	bne.s	SAnim_Super
00014CD2 43F9 0000 0000             	lea	(SonAni_Run).l,a1	; use running animation
00014CD8 0C42 0600                  	cmpi.w	#$600,d2		; is Sonic at running speed?
00014CDC 6400                       	bcc.s	loc7			; use running animation
00014CDE 43F9 0000 0000             	lea	(SonAni_Walk).l,a1	; if yes, branch
00014CE4 D000                       	add.b	d0,d0
00014CE6                            loc7
00014CE6 D000                       	add.b	d0,d0
00014CE8 1600                       	move.b	d0,d3
00014CEA 7200                       	moveq	#0,d1
00014CEC 1228 001B                  	move.b	anim_frame(a0),d1
00014CF0 1031 1001                  	move.b	1(a1,d1.w),d0
00014CF4 0C00 00FF                  	cmpi.b	#-1,d0
00014CF8 6600                       	bne.s	loc8
00014CFA 117C 0000 001B             	move.b	#0,anim_frame(a0)
00014D00 1029 0001                  	move.b	1(a1),d0
00014D04                            loc8
00014D04 1140 001A                  	move.b	d0,mapping_frame(a0)
00014D08 D728 001A                  	add.b	d3,mapping_frame(a0)
00014D0C 5328 001E                  	subq.b	#1,anim_frame_duration(a0)
00014D10 6A00                       	bpl.s	return_1B4AC
00014D12 4442                       	neg.w	d2
00014D14 0642 0800                  	addi.w	#$800,d2
00014D18 6A00                       	bpl.s	loc81
00014D1A 7400                       	moveq	#0,d2
00014D1C                            loc81
00014D1C E04A                       	lsr.w	#8,d2
00014D1E 1142 001E                  	move.b	d2,anim_frame_duration(a0)	; modify frame duration
00014D22 5228 001B                  	addq.b	#1,anim_frame(a0)		; modify frame number
00014D26                            
00014D26                            return_1B4AC:
00014D26 4E75                       	rts
00014D28                            ; ===========================================================================
00014D28                            ; loc_1B4AE:
00014D28                            SAnim_Super:
00014D28 43F9 0000 0000             	lea	(SupSonAni_Run).l,a1	; use fast animation
00014D2E 0C42 0800                  	cmpi.w	#$800,d2		; is Sonic moving fast?
00014D32 6400                       	bcc.s	SAnim_SuperRun		; if yes, branch
00014D34 43F9 0000 0000             	lea	(SupSonAni_Walk).l,a1	; use slower animation
00014D3A D000                       	add.b	d0,d0
00014D3C D000                       	add.b	d0,d0
00014D3E 6000                       	bra.s	SAnim_SuperWalk
00014D40                            ; ---------------------------------------------------------------------------
00014D40                            ; loc_1B4C6:
00014D40                            SAnim_SuperRun:
00014D40 E208                       	lsr.b	#1,d0
00014D42                            ; loc_1B4C8:
00014D42                            SAnim_SuperWalk:
00014D42 1600                       	move.b	d0,d3
00014D44 7200                       	moveq	#0,d1
00014D46 1228 001B                  	move.b	anim_frame(a0),d1
00014D4A 1031 1001                  	move.b	1(a1,d1.w),d0
00014D4E 0C00 00FF                  	cmpi.b	#-1,d0
00014D52 6600                       	bne.s	loc9
00014D54 117C 0000 001B             	move.b	#0,anim_frame(a0)
00014D5A 1029 0001                  	move.b	1(a1),d0
00014D5E                            loc9
00014D5E 1140 001A                  	move.b	d0,mapping_frame(a0)
00014D62 D728 001A                  	add.b	d3,mapping_frame(a0)
00014D66 1238 FE05                  	move.b	($FFFFFE05).w,d1
00014D6A 0201 0003                  	andi.b	#3,d1
00014D6E 6600                       	bne.s	loc10
00014D70 0C28 00B5 001A             	cmpi.b	#-$4B,mapping_frame(a0)
00014D76 6400                       	bcc.s	loc10
00014D78 0628 0020 001A             	addi.b	#$20,mapping_frame(a0)
00014D7E                            loc10
00014D7E 5328 001E                  	subq.b	#1,anim_frame_duration(a0)
00014D82 6A00                       	bpl.s	return_1B51E
00014D84 4442                       	neg.w	d2
00014D86 0642 0800                  	addi.w	#$800,d2
00014D8A 6A00                       	bpl.s	loc11
00014D8C 7400                       	moveq	#0,d2
00014D8E                            loc11
00014D8E E04A                       	lsr.w	#8,d2
00014D90 1142 001E                  	move.b	d2,anim_frame_duration(a0)
00014D94 5228 001B                  	addq.b	#1,anim_frame(a0)
00014D98                            
00014D98                            return_1B51E:
00014D98 4E75                       	rts
00014D9A                            ; ===========================================================================
00014D9A                            ; loc_1B520:
00014D9A                            SAnim_Tumble:
00014D9A 1028 0027                  	move.b	flip_angle(a0),d0
00014D9E 7200                       	moveq	#0,d1
00014DA0 1428 0022                  	move.b	status(a0),d2
00014DA4 0202 0001                  	andi.b	#1,d2
00014DA8 6600                       	bne.s	SAnim_Tumble_Left
00014DAA                            
00014DAA 0228 00FC 0001             	andi.b	#$FC,render_flags(a0)
00014DB0 0600 000B                  	addi.b	#$B,d0
00014DB4 80FC 0016                  	divu.w	#$16,d0
00014DB8 0600 005F                  	addi.b	#$5F,d0
00014DBC 1140 001A                  	move.b	d0,mapping_frame(a0)
00014DC0 117C 0000 001E             	move.b	#0,anim_frame_duration(a0)
00014DC6 4E75                       	rts
00014DC8                            ; ===========================================================================
00014DC8                            ; loc_1B54E:
00014DC8                            SAnim_Tumble_Left:
00014DC8 0228 00FC 0001             	andi.b	#$FC,render_flags(a0)
00014DCE 4A28 0029                  	tst.b	flip_turned(a0)
00014DD2 6700                       	beq.s	loc_1B566
00014DD4 0028 0001 0001             	ori.b	#1,render_flags(a0)
00014DDA 0600 000B                  	addi.b	#$B,d0
00014DDE 6000                       	bra.s	loc_1B572
00014DE0                            ; ===========================================================================
00014DE0                            
00014DE0                            loc_1B566:
00014DE0 0028 0003 0001             	ori.b	#3,render_flags(a0)
00014DE6 4400                       	neg.b	d0
00014DE8 0600 008F                  	addi.b	#$8F,d0
00014DEC                            
00014DEC                            loc_1B572:
00014DEC 80FC 0016                  	divu.w	#$16,d0
00014DF0 0600 005F                  	addi.b	#$5F,d0
00014DF4 1140 001A                  	move.b	d0,mapping_frame(a0)
00014DF8 117C 0000 001E             	move.b	#0,anim_frame_duration(a0)
00014DFE 4E75                       	rts
00014E00                            ; ===========================================================================
00014E00                            ; loc_1B586:
00014E00                            SAnim_Roll:
00014E00 5328 001E                  	subq.b	#1,anim_frame_duration(a0)	; subtract 1 from frame duration
00014E04 6A00 FE36                  	bpl.w	SAnim_Delay			; if time remains, branch
00014E08 5200                       	addq.b	#1,d0		; is the start flag = $FE ?
00014E0A 6600                       	bne.s	SAnim_Push	; if not, branch
00014E0C 3428 0014                  	move.w	inertia(a0),d2
00014E10 6A00                       	bpl.s	loc12
00014E12 4442                       	neg.w	d2
00014E14                            loc12
00014E14 43F9 0000 0000             	lea	(SonAni_Roll2).l,a1
00014E1A 0C42 0600                  	cmpi.w	#$600,d2
00014E1E 6400                       	bcc.s	loc14
00014E20 43F9 0000 0000             	lea	(SonAni_Roll).l,a1
00014E26                            loc14
00014E26 4442                       	neg.w	d2
00014E28 0642 0400                  	addi.w	#$400,d2
00014E2C 6A00                       	bpl.s	loc15
00014E2E 7400                       	moveq	#0,d2
00014E30                            loc15
00014E30 E04A                       	lsr.w	#8,d2
00014E32 1142 001E                  	move.b	d2,anim_frame_duration(a0)
00014E36 1228 0022                  	move.b	status(a0),d1
00014E3A 0201 0001                  	andi.b	#1,d1
00014E3E 0228 00FC 0001             	andi.b	#$FC,render_flags(a0)
00014E44 8328 0001                  	or.b	d1,render_flags(a0)
00014E48 6000 FDDA                  	bra.w	SAnim_Do2
00014E4C                            ; ===========================================================================
00014E4C                            
00014E4C                            SAnim_Push:
00014E4C 5328 001E                  	subq.b	#1,anim_frame_duration(a0)	; subtract 1 from frame duration
00014E50 6A00 FDEA                  	bpl.w	SAnim_Delay			; if time remains, branch
00014E54 3428 0014                  	move.w	inertia(a0),d2
00014E58 6B00                       	bmi.s	loc16
00014E5A 4442                       	neg.w	d2
00014E5C                            loc16
00014E5C 0642 0800                  	addi.w	#$800,d2
00014E60 6A00                       	bpl.s	loc17
00014E62 7400                       	moveq	#0,d2
00014E64                            loc17
00014E64 EC4A                       	lsr.w	#6,d2
00014E66 1142 001E                  	move.b	d2,anim_frame_duration(a0)
00014E6A 43F9 0000 0000             	lea	(SonAni_Push).l,a1
00014E70 4A38 FE19                  	tst.b	(Super_Sonic_flag).w
00014E74 6700                       	beq.s	loc18
00014E76 43F9 0000 0000             	lea	(SupSonAni_Push).l,a1
00014E7C                            loc18
00014E7C 1228 0022                  	move.b	status(a0),d1
00014E80 0201 0001                  	andi.b	#1,d1
00014E84 0228 00FC 0001             	andi.b	#$FC,render_flags(a0)
00014E8A 8328 0001                  	or.b	d1,render_flags(a0)
00014E8E 6000 FD94                  	bra.w	SAnim_Do2
00014E92                            ; ===========================================================================
00014E92                            
00014E92                            ; ---------------------------------------------------------------------------
00014E92                            ; Animation script - Sonic
00014E92                            ; ---------------------------------------------------------------------------
00014E92                            ; off_1B618:
00014E92                            SonicAniData:
00014E92                            	include "_anim\Sonic.asm"
00014E92                            ; ---------------------------------------------------------------------------
00014E92                            ; Animation script - Sonic
00014E92                            ; ---------------------------------------------------------------------------
00014E92 0000                       		dc.w SonAni_Walk-SonicAniData	; 0
00014E94 0000                       		dc.w SonAni_Run-SonicAniData	; 1
00014E96 0000                       		dc.w SonAni_Roll-SonicAniData	; 2
00014E98 0000                       		dc.w SonAni_Roll2-SonicAniData	; 3
00014E9A 0000                       		dc.w SonAni_Push-SonicAniData	; 4
00014E9C 0000                       		dc.w SonAni_Wait-SonicAniData	; 5
00014E9E 0000                       		dc.w SonAni_Balance-SonicAniData	; 6
00014EA0 0000                       		dc.w SonAni_LookUp-SonicAniData	; 7
00014EA2 0000                       		dc.w SonAni_Duck-SonicAniData	; 8
00014EA4 0000                       		dc.w SonAni_Warp1-SonicAniData	; 9
00014EA6 0000                       		dc.w SonAni_Warp2-SonicAniData	; A
00014EA8 0000                       		dc.w SonAni_Warp3-SonicAniData	; B
00014EAA 0000                       		dc.w SonAni_Warp4-SonicAniData	; C
00014EAC 0000                       		dc.w SonAni_Stop-SonicAniData	; D
00014EAE 0000                       		dc.w SonAni_Float1-SonicAniData	; E
00014EB0 0000                       		dc.w SonAni_Float2-SonicAniData	; F
00014EB2 0000                       		dc.w SonAni_Spring-SonicAniData	; 10
00014EB4 0000                       		dc.w SonAni_LZHang-SonicAniData	; 11
00014EB6 0000                       		dc.w SonAni_Leap1-SonicAniData	; 12
00014EB8 0000                       		dc.w SonAni_Leap2-SonicAniData	; 13
00014EBA 0000                       		dc.w SonAni_Surf-SonicAniData	; 14
00014EBC 0000                       		dc.w SonAni_Bubble-SonicAniData	; 15
00014EBE 0000                       		dc.w SonAni_Death-SonicAniData	; 16
00014EC0 0000                       		dc.w SonAni_Drown-SonicAniData	; 17
00014EC2 0000                       		dc.w SonAni_Hurt-SonicAniData	; 18
00014EC4 0000                       		dc.w SonAni_LZSlide-SonicAniData	; 19
00014EC6 0000                       		dc.w SonAni_Blank-SonicAniData	; 1A
00014EC8 0000                       		dc.w SonAni_Float3-SonicAniData	; 1B
00014ECA 0000                       		dc.w SonAni_Float4-SonicAniData	; 1C
00014ECC 0000                       		dc.w SonAni_Spindash-SonicAniData	; 1D
00014ECE 0000                       		dc.w SonAni_Blink-SonicAniData	; 1E
00014ED0 0000                       		dc.w SonAni_GetUp-SonicAniData	; 1F
00014ED2 0000                       		dc.w SonAni_Balance2-SonicAniData	; 20
00014ED4 0000                       		dc.w SonAni_Hang-SonicAniData		; 2A
00014ED6 0000                       		dc.w SonAni_Dash2-SonicAniData	; 2B
00014ED8 0000                       		dc.w SonAni_Dash3-SonicAniData	; 2C
00014EDA 0000                       		dc.w SonAni_Hang2-SonicAniData	; 2D
00014EDC 0000                       		dc.w SonAni_DeathBW-SonicAniData	; 2E	
00014EDE 0000                       		dc.w SonAni_Balance3-SonicAniData	; 2F
00014EE0 0000                       		dc.w SonAni_Balance4-SonicAniData	; 30		
00014EE2 0000                       		dc.w SonAni_Lying-SonicAniData	; 31
00014EE4 0000                       		dc.w SonAni_LieDown-SonicAniData	; 32
00014EE6 FF0F 1011 1213 140D 0EFF   SonAni_Walk:	dc.b $FF, $F,$10,$11,$12,$13,$14, $D, $E,$FF
00014EF0 FF2D 2E2F 30FF FFFF FFFF   SonAni_Run:	dc.b $FF,$2D,$2E,$2F,$30,$FF,$FF,$FF,$FF,$FF
00014EFA FE3D 413E 413F 4140 41FF   SonAni_Roll:	dc.b $FE,$3D,$41,$3E,$41,$3F,$41,$40,$41,$FF
00014F04 FE3D 413E 413F 4140 41FF   SonAni_Roll2:	dc.b $FE,$3D,$41,$3E,$41,$3F,$41,$40,$41,$FF
00014F0E FD48 494A 4BFF FFFF FFFF   SonAni_Push:	dc.b $FD,$48,$49,$4A,$4B,$FF,$FF,$FF,$FF,$FF
00014F18                            SonAni_Wait:
00014F18 0501 0101 0101 0101 0101+  	dc.b   5,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1
00014F28 0101 0101 0101 0101 0101+  	dc.b   1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  2
00014F38 0303 0303 0304 0404 0505+  	dc.b   3,  3,  3,  3,  3,  4,  4,  4,  5,  5,  5,  4,  4,  4,  5,  5
00014F48 0504 0404 0505 0504 0404+  	dc.b   5,  4,  4,  4,  5,  5,  5,  4,  4,  4,  5,  5,  5,  6,  6,  6
00014F58 0606 0606 0606 0604 0404+  	dc.b   6,  6,  6,  6,  6,  6,  6,  4,  4,  4,  5,  5,  5,  4,  4,  4
00014F68 0505 0504 0404 0505 0504+  	dc.b   5,  5,  5,  4,  4,  4,  5,  5,  5,  4,  4,  4,  5,  5,  5,  6
00014F78 0606 0606 0606 0606 0604+  	dc.b   6,  6,  6,  6,  6,  6,  6,  6,  6,  4,  4,  4,  5,  5,  5,  4
00014F88 0404 0505 0504 0404 0505+  	dc.b   4,  4,  5,  5,  5,  4,  4,  4,  5,  5,  5,  4,  4,  4,  5,  5
00014F98 0506 0606 0606 0606 0606+  	dc.b   5,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  4,  4,  4,  5,  5
00014FA8 0504 0404 0505 0504 0404+  	dc.b   5,  4,  4,  4,  5,  5,  5,  4,  4,  4,  5,  5,  5,  4,  4,  4
00014FB8 0505 0506 0606 0606 0606+  	dc.b   5,  5,  5,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  7,  8,  8
00014FC8 0809 0909 FE06             	dc.b   8,  9,  9,  9,$FE,  6
00014FCE 09CC CDCE CDFF             SonAni_Balance:	dc.b   9,$CC,$CD,$CE,$CD,$FF
00014FD4 050B 0CFE 01               SonAni_LookUp:	dc.b   5, $B, $C,$FE,  1
00014FD9 054C 4DFE 01               SonAni_Duck:	dc.b   5,$4C,$4D,$FE,  1
00014FDE 3F33 FF00                  SonAni_Warp1:	dc.b $3F, $33, $FF, 0
00014FE2 3F34 FF00                  SonAni_Warp2:	dc.b $3F, $34, $FF, 0
00014FE6 3F35 FF00                  SonAni_Warp3:	dc.b $3F, $35, $FF, 0
00014FEA 3F36 FF00                  SonAni_Warp4:	dc.b $3F, $36, $FF, 0
00014FEE 0102 FD00                  SonAni_Blink:	dc.b   1,  2,$FD,  0
00014FF2 030A FD00                  SonAni_GetUp:	dc.b   3, $A,$FD,  0
00014FF6 03C8 C9CA CBFF             SonAni_Balance2:    dc.b   3,$C8,$C9,$CA,$CB,$FF
00014FFC 05D2 D3D4 D5FD 00          SonAni_Stop:	dc.b   5,$D2,$D3,$D4,$D5,$FD,  0 ; halt/skidding animation
00015003 0754 59FF                  SonAni_Float1:	dc.b   7,$54,$59,$FF
00015007 0754 5556 5758 FF          SonAni_Float2:	dc.b   7,$54,$55,$56,$57,$58,$FF
0001500E 2F5B FD00                  SonAni_Spring:	dc.b $2F,$5B,$FD,  0
00015012 0441 42FF                  SonAni_LZHang:	dc.b 4,	$41, $42, $FF
00015016 0F43 4343 FE01             SonAni_Leap1:	dc.b $F, $43, $43, $43,	$FE, 1
0001501C 0F43 44FE 0100             SonAni_Leap2:	dc.b $F, $43, $44, $FE,	1, 0
00015022 3F49 FF00                  SonAni_Surf:	dc.b $3F, $49, $FF, 0
00015026 0B5A 5A11 12FD 00          SonAni_Bubble:	dc.b  $B,$5A,$5A,$11,$12,$FD,  0 ; breathe
0001502D 205D FF                    SonAni_Drown:	dc.b $20,$5D,$FF
00015030 205C FF                    SonAni_Death:	dc.b $20,$5C,$FF
00015033 404E FF                    SonAni_Hurt:	dc.b $40,$4E,$FF
00015036 094E 4FFF                  SonAni_LZSlide:	dc.b   9,$4E,$4F,$FF
0001503A 7700 FD00                  SonAni_Blank:	dc.b $77, 0, $FD, 0
0001503E 0042 4342 4442 4542 4642+  SonAni_Spindash: dc.b   0,$42,$43,$42,$44,$42,$45,$42,$46,$42,$47,$FF
0001504A 0150 51FF                  SonAni_Hang:	dc.b   1,$50,$51,$FF
0001504E 0F43 4343 FE01             SonAni_Dash2:	dc.b  $F,$43,$43,$43,$FE,  1
00015054 0F43 44FE 01               SonAni_Dash3:	dc.b  $F,$43,$44,$FE,  1
00015059 136B 6CFF                  SonAni_Hang2:	dc.b $13,$6B,$6C,$FF
0001505D 205E FF                    SonAni_DeathBW:	dc.b $20,$5E,$FF
00015060 033C 3D53 3E54 FF00        SonAni_Float3:	dc.b 3,	$3C, $3D, $53, $3E, $54, $FF, 0
00015068 033C FD00                  SonAni_Float4:	dc.b 3,	$3C, $FD, 0
0001506C 13D0 D1FF                  SonAni_Balance3:dc.b $13,$D0,$D1,$FF
00015070 03CF C8C9 CACB FE04        SonAni_Balance4:dc.b   3,$CF,$C8,$C9,$CA,$CB,$FE,  4
00015078 0908 09FF                  SonAni_Lying:	dc.b   9,  8,  9,$FF
0001507C 0307 FD00                  SonAni_LieDown:	dc.b   3,  7,$FD,  0
00015080                            		even
00015080                            ; ---------------------------------------------------------------------------
00015080                            ; Animation script - Super Sonic
00015080                            ; (many of these point to the data above this)
00015080                            ; ---------------------------------------------------------------------------
00015080                            SuperSonicAniData:
00015080 0000                       	dc.w SupSonAni_Walk-SuperSonicAniData		; 0
00015082 0000                       	dc.w SupSonAni_Run-SuperSonicAniData          ; 1
00015084 FE7A                       	dc.w SonAni_Roll-SuperSonicAniData            ; 2
00015086 FE84                       	dc.w SonAni_Roll2-SuperSonicAniData           ; 3
00015088 0000                       	dc.w SupSonAni_Push-SuperSonicAniData         ; 4
0001508A 0000                       	dc.w SupSonAni_Stand-SuperSonicAniData        ; 5
0001508C 0000                       	dc.w SupSonAni_Balance-SuperSonicAniData      ; 6
0001508E FF54                       	dc.w SonAni_LookUp-SuperSonicAniData          ; 7
00015090 0000                       	dc.w SupSonAni_Duck-SuperSonicAniData         ; 8
00015092 FFBE                       	dc.w SonAni_Spindash-SuperSonicAniData        ; 9
00015094 FF6E                       	dc.w SonAni_Blink-SuperSonicAniData           ; 10 ; $A
00015096 FF72                       	dc.w SonAni_GetUp-SuperSonicAniData           ; 11 ; $B
00015098 FF76                       	dc.w SonAni_Balance2-SuperSonicAniData        ; 12 ; $C
0001509A FF7C                       	dc.w SonAni_Stop-SuperSonicAniData            ; 13 ; $D
0001509C FF83                       	dc.w SonAni_Float1-SuperSonicAniData           ; 14 ; $E
0001509E FF87                       	dc.w SonAni_Float2-SuperSonicAniData          ; 15 ; $F
000150A0 FF8E                       	dc.w SonAni_Spring-SuperSonicAniData          ; 16 ; $10
000150A2 FFCA                       	dc.w SonAni_Hang-SuperSonicAniData            ; 17 ; $11
000150A4 FFCE                       	dc.w SonAni_Dash2-SuperSonicAniData           ; 18 ; $12
000150A6 FFD4                       	dc.w SonAni_Dash3-SuperSonicAniData           ; 19 ; $13
000150A8 FFD9                       	dc.w SonAni_Hang2-SuperSonicAniData           ; 20 ; $14
000150AA FFA6                       	dc.w SonAni_Bubble-SuperSonicAniData          ; 21 ; $15
000150AC FFDD                       	dc.w SonAni_DeathBW-SuperSonicAniData         ; 22 ; $16
000150AE FFAD                       	dc.w SonAni_Drown-SuperSonicAniData           ; 23 ; $17
000150B0 FFB0                       	dc.w SonAni_Death-SuperSonicAniData           ; 24 ; $18
000150B2 FFB3                       	dc.w SonAni_Hurt-SuperSonicAniData            ; 25 ; $19
000150B4 FFB3                       	dc.w SonAni_Hurt-SuperSonicAniData            ; 26 ; $1A
000150B6 FFB6                       	dc.w SonAni_LZSlide-SuperSonicAniData           ; 27 ; $1B
000150B8 FFBA                       	dc.w SonAni_Blank-SuperSonicAniData           ; 28 ; $1C
000150BA FFEC                       	dc.w SonAni_Balance3-SuperSonicAniData        ; 29 ; $1D
000150BC FFF0                       	dc.w SonAni_Balance4-SuperSonicAniData        ; 30 ; $1E
000150BE 0000                       	dc.w SupSonAni_Transform-SuperSonicAniData    ; 31 ; $1F
000150C0                            
000150C0 FF77 7879 7A7B 7C75 76FF   SupSonAni_Walk:		dc.b $FF,$77,$78,$79,$7A,$7B,$7C,$75,$76,$FF
000150CA FFB5 B9FF FFFF FFFF FFFF   SupSonAni_Run:		dc.b $FF,$B5,$B9,$FF,$FF,$FF,$FF,$FF,$FF,$FF
000150D4 FDBD BEBF C0FF FFFF FFFF   SupSonAni_Push:		dc.b $FD,$BD,$BE,$BF,$C0,$FF,$FF,$FF,$FF,$FF
000150DE 0772 7374 73FF             SupSonAni_Stand:	dc.b   7,$72,$73,$74,$73,$FF
000150E4 09C2 C3C4 C3C5 C6C7 C6FF   SupSonAni_Balance:	dc.b   9,$C2,$C3,$C4,$C3,$C5,$C6,$C7,$C6,$FF
000150EE 05C1 FF                    SupSonAni_Duck:		dc.b   5,$C1,$FF
000150F1 026D 6D6E 6E6F 7071 7071+  SupSonAni_Transform:	dc.b   2,$6D,$6D,$6E,$6E,$6F,$70,$71,$70,$71,$70,$71,$70,$71,$FD,  0
00015102 00                         	even		
00015102 00                         	even		
00015102                            
00015102                            
00015102                            ; ---------------------------------------------------------------------------
00015102                            ; Sonic	pattern	loading	subroutine
00015102                            ; ---------------------------------------------------------------------------
00015102                            
00015102                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015102                            
00015102                            
00015102                            LoadSonicDynPLC:			; XREF: Obj01_Control; et al
00015102 7000                       		moveq	#0,d0
00015104 1028 001A                  		move.b	$1A(a0),d0	; load frame number
00015108 B038 F766                  		cmp.b	($FFFFF766).w,d0
0001510C 6700                       		beq.s	locret_13C96
0001510E 11C0 F766                  		move.b	d0,($FFFFF766).w
00015112 45F9 0000 0000             		lea	(SonicDynPLC).l,a2
00015118 D040                       		add.w	d0,d0
0001511A D4F2 0000                  		adda.w	(a2,d0.w),a2
0001511E 7A00                       		moveq	#0,d5
00015120 1A1A                       		move.b	(a2)+,d5
00015122 5345                       		subq.w	#1,d5
00015124 6B00                       		bmi.s	locret_13C96
00015126 383C F000                  		move.w	#$F000,d4
0001512A 2C3C 0000 0000             		move.l	#Art_Sonic,d6
00015130                            
00015130                            SPLC_ReadEntry:
00015130 7200                       		moveq	#0,d1
00015132 121A                       		move.b	(a2)+,d1
00015134 E149                       		lsl.w	#8,d1
00015136 121A                       		move.b	(a2)+,d1
00015138 3601                       		move.w	d1,d3
0001513A E04B                       		lsr.w	#8,d3
0001513C 0243 00F0                  		andi.w	#$F0,d3
00015140 0643 0010                  		addi.w	#$10,d3
00015144 0241 0FFF                  		andi.w	#$FFF,d1
00015148 EB89                       		lsl.l	#5,d1
0001514A D286                       		add.l	d6,d1
0001514C 3404                       		move.w	d4,d2
0001514E D843                       		add.w	d3,d4
00015150 D843                       		add.w	d3,d4
00015152 4EB9 0000 151A             		jsr	(QueueDMATransfer).l
00015158 51CD FFD6                  		dbf	d5,SPLC_ReadEntry	; repeat for number of entries
0001515C                            
0001515C                            locret_13C96:
0001515C 4E75                       		rts
0001515E                            ; End of function LoadSonicDynPLC
0001515E                            
0001515E                            ; ===========================================================================
0001515E                            ; ---------------------------------------------------------------------------
0001515E                            ; Object 0A - drowning countdown numbers and small bubbles (LZ)
0001515E                            ; ---------------------------------------------------------------------------
0001515E                            
0001515E                            Obj0A:					; XREF: Obj_Index
0001515E 7000                       		moveq	#0,d0
00015160 1028 0024                  		move.b	$24(a0),d0
00015164 323B 0000                  		move.w	Obj0A_Index(pc,d0.w),d1
00015168 4EFB 1000                  		jmp	Obj0A_Index(pc,d1.w)
0001516C                            ; ===========================================================================
0001516C 0000 0000                  Obj0A_Index:	dc.w Obj0A_Main-Obj0A_Index, Obj0A_Animate-Obj0A_Index
00015170 0000 0000                  		dc.w Obj0A_ChkWater-Obj0A_Index, Obj0A_Display-Obj0A_Index
00015174 0000 0000                  		dc.w Obj0A_Delete2-Obj0A_Index,	Obj0A_Countdown-Obj0A_Index
00015178 0000 0000                  		dc.w Obj0A_AirLeft-Obj0A_Index,	Obj0A_Display-Obj0A_Index
0001517C 0000                       		dc.w Obj0A_Delete2-Obj0A_Index
0001517E                            ; ===========================================================================
0001517E                            
0001517E                            Obj0A_Main:				; XREF: Obj0A_Index
0001517E 5428 0024                  		addq.b	#2,$24(a0)
00015182 217C 0001 34D6 0004        		move.l	#Map_obj64,4(a0)
0001518A 317C 8348 0002             		move.w	#$8348,2(a0)
00015190 117C 0084 0001             		move.b	#$84,1(a0)
00015196 117C 0010 0019             		move.b	#$10,$19(a0)
0001519C 117C 0001 0018             		move.b	#1,$18(a0)
000151A2 1028 0028                  		move.b	$28(a0),d0
000151A6 6A00                       		bpl.s	loc_13D00
000151A8 5028 0024                  		addq.b	#8,$24(a0)
000151AC 217C 0000 0000 0004        		move.l	#Map_obj0A,4(a0)
000151B4 317C 0440 0002             		move.w	#$440,2(a0)
000151BA 0240 007F                  		andi.w	#$7F,d0
000151BE 1140 0033                  		move.b	d0,$33(a0)
000151C2 6000 0000                  		bra.w	Obj0A_Countdown
000151C6                            ; ===========================================================================
000151C6                            
000151C6                            loc_13D00:
000151C6 1140 001C                  		move.b	d0,$1C(a0)
000151CA 3168 0008 0030             		move.w	8(a0),$30(a0)
000151D0 317C FF78 0012             		move.w	#-$88,$12(a0)
000151D6                            
000151D6                            Obj0A_Animate:				; XREF: Obj0A_Index
000151D6 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
000151DC 4EB9 0000 B21C             		jsr	AnimateSprite
000151E2                            
000151E2                            Obj0A_ChkWater:				; XREF: Obj0A_Index
000151E2 3038 F646                  		move.w	($FFFFF646).w,d0
000151E6 B068 000C                  		cmp.w	$C(a0),d0	; has bubble reached the water surface?
000151EA 6500                       		bcs.s	Obj0A_Wobble	; if not, branch
000151EC 117C 0006 0024             		move.b	#6,$24(a0)
000151F2 5E28 001C                  		addq.b	#7,$1C(a0)
000151F6 0C28 000D 001C             		cmpi.b	#$D,$1C(a0)
000151FC 6700                       		beq.s	Obj0A_Display
000151FE 6000                       		bra.s	Obj0A_Display
00015200                            ; ===========================================================================
00015200                            
00015200                            Obj0A_Wobble:
00015200 4A38 F7C7                  		tst.b	($FFFFF7C7).w
00015204 6700                       		beq.s	loc_13D44
00015206 5868 0030                  		addq.w	#4,$30(a0)
0001520A                            
0001520A                            loc_13D44:
0001520A 1028 0026                  		move.b	$26(a0),d0
0001520E 5228 0026                  		addq.b	#1,$26(a0)
00015212 0240 007F                  		andi.w	#$7F,d0
00015216 43F9 0000 0000             		lea	(Obj0A_WobbleData).l,a1
0001521C 1031 0000                  		move.b	(a1,d0.w),d0
00015220 4880                       		ext.w	d0
00015222 D068 0030                  		add.w	$30(a0),d0
00015226 3140 0008                  		move.w	d0,8(a0)
0001522A 6100                       		bsr.s	Obj0A_ShowNumber
0001522C 4EBA 8EB6                  		jsr	SpeedToPos
00015230 4A28 0001                  		tst.b	1(a0)
00015234 6A00                       		bpl.s	Obj0A_Delete
00015236 4EFA 8ED2                  		jmp	DisplaySprite
0001523A                            ; ===========================================================================
0001523A                            
0001523A                            Obj0A_Delete:
0001523A 4EFA 8F0A                  		jmp	DeleteObject
0001523E                            ; ===========================================================================
0001523E                            
0001523E                            Obj0A_Display:				; XREF: Obj0A_Index
0001523E 6100                       		bsr.s	Obj0A_ShowNumber
00015240 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
00015246 4EB9 0000 B21C             		jsr	AnimateSprite
0001524C 4EFA 8EBC                  		jmp	DisplaySprite
00015250                            ; ===========================================================================
00015250                            
00015250                            Obj0A_Delete2:				; XREF: Obj0A_Index
00015250 4EFA 8EF4                  		jmp	DeleteObject
00015254                            ; ===========================================================================
00015254                            
00015254                            Obj0A_AirLeft:				; XREF: Obj0A_Index
00015254 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w ; check air remaining
0001525A 6200                       		bhi.s	Obj0A_Delete3	; if higher than $C, branch
0001525C 5368 0038                  		subq.w	#1,$38(a0)
00015260 6600                       		bne.s	Obj0A_Display2
00015262 117C 000E 0024             		move.b	#$E,$24(a0)
00015268 5E28 001C                  		addq.b	#7,$1C(a0)
0001526C 60D0                       		bra.s	Obj0A_Display
0001526E                            ; ===========================================================================
0001526E                            
0001526E                            Obj0A_Display2:
0001526E 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
00015274 4EB9 0000 B21C             		jsr	AnimateSprite
0001527A 4A28 0001                  		tst.b	1(a0)
0001527E 6A00                       		bpl.s	Obj0A_Delete3
00015280 4EFA 8E88                  		jmp	DisplaySprite
00015284                            ; ===========================================================================
00015284                            
00015284                            Obj0A_Delete3:
00015284 4EFA 8EC0                  		jmp	DeleteObject
00015288                            ; ===========================================================================
00015288                            
00015288                            Obj0A_ShowNumber:			; XREF: Obj0A_Wobble; Obj0A_Display
00015288 4A68 0038                  		tst.w	$38(a0)
0001528C 6700                       		beq.s	locret_13E1A
0001528E 5368 0038                  		subq.w	#1,$38(a0)
00015292 6600                       		bne.s	locret_13E1A
00015294 0C28 0007 001C             		cmpi.b	#7,$1C(a0)
0001529A 6400                       		bcc.s	locret_13E1A
0001529C 317C 000F 0038             		move.w	#$F,$38(a0)
000152A2 4268 0012                  		clr.w	$12(a0)
000152A6 117C 0080 0001             		move.b	#$80,1(a0)
000152AC 3028 0008                  		move.w	8(a0),d0
000152B0 9078 F700                  		sub.w	($FFFFF700).w,d0
000152B4 0640 0080                  		addi.w	#$80,d0
000152B8 3140 0008                  		move.w	d0,8(a0)
000152BC 3028 000C                  		move.w	$C(a0),d0
000152C0 9078 F704                  		sub.w	($FFFFF704).w,d0
000152C4 0640 0080                  		addi.w	#$80,d0
000152C8 3140 000A                  		move.w	d0,$A(a0)
000152CC 117C 000C 0024             		move.b	#$C,$24(a0)
000152D2                            
000152D2                            locret_13E1A:
000152D2 4E75                       		rts	
000152D4                            ; ===========================================================================
000152D4                            Obj0A_WobbleData:
000152D4 0000 0000 0000 0101 0101+  		dc.b 0, 0, 0, 0, 0, 0,	1, 1, 1, 1, 1, 2, 2, 2,	2, 2, 2
000152E5 0203 0303 0303 0303 0303+  		dc.b 2,	3, 3, 3, 3, 3, 3, 3, 3,	3, 3, 3, 3, 3, 3, 4, 3
000152F6 0303 0303 0303 0303 0303+  		dc.b 3,	3, 3, 3, 3, 3, 3, 3, 3,	3, 3, 3, 3, 2, 2, 2, 2
00015307 0202 0201 0101 0101 0000+  		dc.b 2,	2, 2, 1, 1, 1, 1, 1, 0,	0, 0, 0, 0, 0, -1, -1
00015317 FFFF FFFE FEFE FEFE FDFD+  		dc.b -1, -1, -1, -2, -2, -2, -2, -2, -3, -3, -3, -3, -3
00015324 FDFD FCFC FCFC FCFC FCFC+  		dc.b -3, -3, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
00015331 FCFC FCFC FCFC FCFC FCFC+  		dc.b -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
0001533E FCFC FCFC FCFD FDFD FDFD+  		dc.b -4, -4, -4, -4, -4, -3, -3, -3, -3, -3, -3, -3, -2
0001534B FEFE FEFE FFFF FFFF FF     		dc.b -2, -2, -2, -2, -1, -1, -1, -1, -1
00015354                            ; ===========================================================================
00015354                            
00015354                            Obj0A_Countdown:			; XREF: Obj0A_Index
00015354 4A68 002C                  		tst.w	$2C(a0)
00015358 6600 0000                  		bne.w	loc_13F86
0001535C 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00015362 6400 0000                  		bcc.w	locret_1408C
00015366 0838 0006 D022             		btst	#6,($FFFFD022).w
0001536C 6700 0000                  		beq.w	locret_1408C
00015370 5368 0038                  		subq.w	#1,$38(a0)
00015374 6A00 0000                  		bpl.w	loc_13FAC
00015378 317C 003B 0038             		move.w	#59,$38(a0)
0001537E 317C 0001 0036             		move.w	#1,$36(a0)
00015384 4EB9 0000 33AE             		jsr	(RandomNumber).l
0001538A 0240 0001                  		andi.w	#1,d0
0001538E 1140 0034                  		move.b	d0,$34(a0)
00015392 3038 FE14                  		move.w	($FFFFFE14).w,d0 ; check air remaining
00015396 0C40 0019                  		cmpi.w	#$19,d0
0001539A 6700                       		beq.s	Obj0A_WarnSound	; play sound if	air is $19
0001539C 0C40 0014                  		cmpi.w	#$14,d0
000153A0 6700                       		beq.s	Obj0A_WarnSound
000153A2 0C40 000F                  		cmpi.w	#$F,d0
000153A6 6700                       		beq.s	Obj0A_WarnSound
000153A8 0C40 000C                  		cmpi.w	#$C,d0
000153AC 6200                       		bhi.s	Obj0A_ReduceAir	; if air is above $C, branch
000153AE 6600                       		bne.s	loc_13F02
000153B0 303C 0092                  		move.w	#$92,d0
000153B4 4EB9 0000 1470             		jsr	(PlaySound).l	; play countdown music
000153BA                            
000153BA                            loc_13F02:
000153BA 5328 0032                  		subq.b	#1,$32(a0)
000153BE 6A00                       		bpl.s	Obj0A_ReduceAir
000153C0 1168 0033 0032             		move.b	$33(a0),$32(a0)
000153C6 08E8 0007 0036             		bset	#7,$36(a0)
000153CC 6000                       		bra.s	Obj0A_ReduceAir
000153CE                            ; ===========================================================================
000153CE                            
000153CE                            Obj0A_WarnSound:			; XREF: Obj0A_Countdown
000153CE 303C 00C2                  		move.w	#$C2,d0
000153D2 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play "ding-ding" warning sound
000153D8                            
000153D8                            Obj0A_ReduceAir:
000153D8 5378 FE14                  		subq.w	#1,($FFFFFE14).w ; subtract 1 from air remaining
000153DC 6400 0000                  		bcc.w	Obj0A_GoMakeItem ; if air is above 0, branch
000153E0 6100 0000                  		bsr.w	ResumeMusic
000153E4 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w ; lock controls
000153EA 303C 00B2                  		move.w	#$B2,d0
000153EE 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play drowning sound
000153F4 117C 000A 0034             		move.b	#$A,$34(a0)
000153FA 317C 0001 0036             		move.w	#1,$36(a0)
00015400 317C 0078 002C             		move.w	#$78,$2C(a0)
00015406 2F08                       		move.l	a0,-(sp)
00015408 41F8 D000                  		lea	($FFFFD000).w,a0
0001540C 6100 F584                  		bsr.w	Sonic_ResetOnFloor
00015410 117C 0017 001C             		move.b	#$17,$1C(a0)	; use Sonic's drowning animation
00015416 08E8 0001 0022             		bset	#1,$22(a0)
0001541C 08E8 0007 0002             		bset	#7,2(a0)
00015422 317C 0000 0012             		move.w	#0,$12(a0)
00015428 317C 0000 0010             		move.w	#0,$10(a0)
0001542E 317C 0000 0014             		move.w	#0,$14(a0)
00015434 117C 000A 0024             		move.b	#$A,$24(a0)		; Force the character to drown
0001543A 11FC 0001 F744             		move.b	#1,($FFFFF744).w
00015440 11FC 0000 FE1E             		move.b	#0,($FFFFFE1E).w	; Stop the timer immediately
00015446 205F                       		movea.l	(sp)+,a0
00015448 4E75                       		rts
0001544A                            ; ===========================================================================
0001544A                            
0001544A                            loc_13F86:
0001544A 5368 002C                  		subq.w	#1,$2C(a0)
0001544E 6600                       		bne.s	loc_13FAC	; Make it jump straight to this location
00015450 11FC 0006 D024             		move.b	#6,($FFFFD000+$24).w
00015456 4E75                       		rts
00015458                            ; ===========================================================================
00015458                            
00015458                            Obj0A_GoMakeItem:			; XREF: Obj0A_ReduceAir
00015458 6000                       		bra.s	Obj0A_MakeItem
0001545A                            ; ===========================================================================
0001545A                            
0001545A                            loc_13FAC:
0001545A 4A68 0036                  		tst.w	$36(a0)
0001545E 6700 0000                  		beq.w	locret_1408C
00015462 5368 003A                  		subq.w	#1,$3A(a0)
00015466 6A00 0000                  		bpl.w	locret_1408C
0001546A                            
0001546A                            Obj0A_MakeItem:
0001546A 4EB9 0000 33AE             		jsr	(RandomNumber).l
00015470 0240 000F                  		andi.w	#$F,d0
00015474 3140 003A                  		move.w	d0,$3A(a0)
00015478 4EBA 9126                  		jsr	SingleObjLoad
0001547C 6600 0000                  		bne.w	locret_1408C
00015480 12BC 000A                  		move.b	#$A,0(a1)	; load object
00015484 3378 D008 0008             		move.w	($FFFFD008).w,8(a1) ; match X position to Sonic
0001548A 7006                       		moveq	#6,d0
0001548C 0838 0000 D022             		btst	#0,($FFFFD022).w
00015492 6700                       		beq.s	loc_13FF2
00015494 4440                       		neg.w	d0
00015496 137C 0040 0026             		move.b	#$40,$26(a1)
0001549C                            
0001549C                            loc_13FF2:
0001549C D169 0008                  		add.w	d0,8(a1)
000154A0 3378 D00C 000C             		move.w	($FFFFD00C).w,$C(a1)
000154A6 137C 0006 0028             		move.b	#6,$28(a1)
000154AC 4A68 002C                  		tst.w	$2C(a0)
000154B0 6700 0000                  		beq.w	loc_1403E
000154B4 0268 0007 003A             		andi.w	#7,$3A(a0)
000154BA 0668 0000 003A             		addi.w	#0,$3A(a0)
000154C0 3038 D00C                  		move.w	($FFFFD00C).w,d0
000154C4 0440 000C                  		subi.w	#$C,d0
000154C8 3340 000C                  		move.w	d0,$C(a1)
000154CC 4EB9 0000 33AE             		jsr	(RandomNumber).l
000154D2 1340 0026                  		move.b	d0,$26(a1)
000154D6 3038 FE04                  		move.w	($FFFFFE04).w,d0
000154DA 0200 0003                  		andi.b	#3,d0
000154DE 6600                       		bne.s	loc_14082
000154E0 137C 000E 0028             		move.b	#$E,$28(a1)
000154E6 6000                       		bra.s	loc_14082
000154E8                            ; ===========================================================================
000154E8                            
000154E8                            loc_1403E:
000154E8 0828 0007 0036             		btst	#7,$36(a0)
000154EE 6700                       		beq.s	loc_14082
000154F0 3438 FE14                  		move.w	($FFFFFE14).w,d2
000154F4 E24A                       		lsr.w	#1,d2
000154F6 4EB9 0000 33AE             		jsr	(RandomNumber).l
000154FC 0240 0003                  		andi.w	#3,d0
00015500 6600                       		bne.s	loc_1406A
00015502 08E8 0006 0036             		bset	#6,$36(a0)
00015508 6600                       		bne.s	loc_14082
0001550A 1342 0028                  		move.b	d2,$28(a1)
0001550E 337C 001C 0038             		move.w	#$1C,$38(a1)
00015514                            
00015514                            loc_1406A:
00015514 4A28 0034                  		tst.b	$34(a0)
00015518 6600                       		bne.s	loc_14082
0001551A 08E8 0006 0036             		bset	#6,$36(a0)
00015520 6600                       		bne.s	loc_14082
00015522 1342 0028                  		move.b	d2,$28(a1)
00015526 337C 001C 0038             		move.w	#$1C,$38(a1)
0001552C                            
0001552C                            loc_14082:
0001552C 5328 0034                  		subq.b	#1,$34(a0)
00015530 6A00                       		bpl.s	locret_1408C
00015532 4268 0036                  		clr.w	$36(a0)
00015536                            
00015536                            locret_1408C:
00015536 4E75                       		rts	
00015538                            
00015538                            ; ---------------------------------------------------------------------------
00015538                            ; Subroutine to	play music for LZ/SBZ3 after a countdown
00015538                            ; ---------------------------------------------------------------------------
00015538                            
00015538                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015538                            
00015538                            
00015538                            ResumeMusic:				; XREF: Obj64_Wobble; Sonic_Water; Obj0A_ReduceAir
00015538 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w
0001553E                             
0001553E                            ; Third section of the NineKode - Play correct music after the countdown (if you breathe)
0001553E                             
0001553E 6200 0000                  		bhi.w	loc_140AC	; change to bhi.w!
00015542                             
00015542 0C38 0000 FE11             		cmpi.b	#$0,($FFFFFE11).w	; is this act 1?
00015548 6600                       		bne.s	Air_GetBgm2	; if not, branch
0001554A 43F9 0000 41C0             		lea	(MusicList1).l,a1	; load Music Playlist for Acts 1
00015550 6000                       		bra.s	Air_PlayMusic	; go to PlayMusic
00015552                             
00015552                            Air_GetBgm2:
00015552 0C38 0001 FE11             		cmpi.b	#$1,($FFFFFE11).w	; is this act 2?
00015558 6600                       		bne.s	Air_GetBgm3	; if not, branch
0001555A 43F9 0000 41C6             		lea	(MusicList2).l,a1	; load Music Playlist for Acts 2
00015560 6000                       		bra.s	Air_PlayMusic	; go to PlayMusic
00015562                             
00015562                            Air_GetBgm3:
00015562 0C38 0002 FE11             		cmpi.b	#$2,($FFFFFE11).w	; is this act 3?
00015568 6600                       		bne.s	Air_GetBgm4	; if not, branch
0001556A 43F9 0000 41CC             		lea	(MusicList3).l,a1	; load Music Playlist for Acts 3
00015570 6000                       		bra.s	Air_PlayMusic	; go to PlayMusic
00015572                             
00015572                            Air_GetBgm4:
00015572 0C38 0003 FE11             		cmpi.b	#$3,($FFFFFE11).w	; is this act 4?
00015578 6600                       		bne.s	Air_PlayMusic	; if not, branch
0001557A 43F9 0000 41D2             		lea	(MusicList4).l,a1	; load Music Playlist for Acts 4
00015580                             
00015580                            Air_PlayMusic:
00015580 1029 0001                  		move.b	1(a1),d0	; load entry $1 from the playlist
00015584                             
00015584                            loc_140A6:
00015584 4EB9 0000 1470             		jsr	(PlaySound).l
0001558A                             
0001558A                            ; NineKode ends here
0001558A                            
0001558A                            loc_140AC:
0001558A 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
00015590 4238 D372                  		clr.b	($FFFFD372).w
00015594 4E75                       		rts	
00015596                            ; End of function ResumeMusic
00015596                            
00015596                            ; ===========================================================================
00015596                            Ani_obj0A:
00015596                            	include "_anim\obj0A.asm"
00015596                            ; ---------------------------------------------------------------------------
00015596                            ; Animation script - countdown numbers and bubbles (LZ)
00015596                            ; ---------------------------------------------------------------------------
00015596 0000                       		dc.w byte_140D6-Ani_obj0A
00015598 0000                       		dc.w byte_140E0-Ani_obj0A
0001559A 0000                       		dc.w byte_140EA-Ani_obj0A
0001559C 0000                       		dc.w byte_140F4-Ani_obj0A
0001559E 0000                       		dc.w byte_140FE-Ani_obj0A
000155A0 0000                       		dc.w byte_14108-Ani_obj0A
000155A2 0000                       		dc.w byte_14112-Ani_obj0A
000155A4 0000                       		dc.w byte_14118-Ani_obj0A
000155A6 0000                       		dc.w byte_14120-Ani_obj0A
000155A8 0000                       		dc.w byte_14128-Ani_obj0A
000155AA 0000                       		dc.w byte_14130-Ani_obj0A
000155AC 0000                       		dc.w byte_14138-Ani_obj0A
000155AE 0000                       		dc.w byte_14140-Ani_obj0A
000155B0 0000                       		dc.w byte_14148-Ani_obj0A
000155B2 0000                       		dc.w byte_1414A-Ani_obj0A
000155B4 0500 0102 0304 090D FC00   byte_140D6:	dc.b 5,	0, 1, 2, 3, 4, 9, $D, $FC, 0
000155BE 0500 0102 0304 0C12 FC00   byte_140E0:	dc.b 5,	0, 1, 2, 3, 4, $C, $12,	$FC, 0
000155C8 0500 0102 0304 0C11 FC00   byte_140EA:	dc.b 5,	0, 1, 2, 3, 4, $C, $11,	$FC, 0
000155D2 0500 0102 0304 0B10 FC00   byte_140F4:	dc.b 5,	0, 1, 2, 3, 4, $B, $10,	$FC, 0
000155DC 0500 0102 0304 090F FC00   byte_140FE:	dc.b 5,	0, 1, 2, 3, 4, 9, $F, $FC, 0
000155E6 0500 0102 0304 0A0E FC00   byte_14108:	dc.b 5,	0, 1, 2, 3, 4, $A, $E, $FC, 0
000155F0 0E00 0102 FC00             byte_14112:	dc.b $E, 0, 1, 2, $FC, 0
000155F6 0716 0D16 0D16 0DFC        byte_14118:	dc.b 7,	$16, $D, $16, $D, $16, $D, $FC
000155FE 0716 1216 1216 12FC        byte_14120:	dc.b 7,	$16, $12, $16, $12, $16, $12, $FC
00015606 0716 1116 1116 11FC        byte_14128:	dc.b 7,	$16, $11, $16, $11, $16, $11, $FC
0001560E 0716 1016 1016 10FC        byte_14130:	dc.b 7,	$16, $10, $16, $10, $16, $10, $FC
00015616 0716 0F16 0F16 0FFC        byte_14138:	dc.b 7,	$16, $F, $16, $F, $16, $F, $FC
0001561E 0716 0E16 0E16 0EFC        byte_14140:	dc.b 7,	$16, $E, $16, $E, $16, $E, $FC
00015626 0EFC                       byte_14148:	dc.b $E, $FC
00015628 0E01 0203 04FC             byte_1414A:	dc.b $E, 1, 2, 3, 4, $FC
0001562E                            		even
0001562E                            		even
0001562E                            
0001562E                            ; ---------------------------------------------------------------------------
0001562E                            ; Sprite mappings - drowning countdown numbers (LZ)
0001562E                            ; ---------------------------------------------------------------------------
0001562E                            Map_obj0A:
0001562E                            	include "_maps\obj0A.asm"
0001562E                            ; ---------------------------------------------------------------------------
0001562E                            ; Sprite mappings - drowning countdown numbers (LZ)
0001562E                            ; ---------------------------------------------------------------------------
0001562E 0000                       		dc.w byte_14152-Map_obj0A
00015630 01                         byte_14152:	dc.b 1
00015631 E80E 0000 F2               		dc.b $E8, $E, 0, 0, $F2
00015636                            		even
00015636                            		even
00015636                            
00015636                            ; ===========================================================================
00015636                            ; ---------------------------------------------------------------------------
00015636                            ; Object 38 - shield and invincibility stars
00015636                            ; ---------------------------------------------------------------------------
00015636                            
00015636                            Obj38:					; XREF: Obj_Index
00015636 7000                       		moveq	#0,d0
00015638 1028 0024                  		move.b	$24(a0),d0
0001563C 323B 0000                  		move.w	Obj38_Index(pc,d0.w),d1
00015640 4EFB 1000                  		jmp	Obj38_Index(pc,d1.w)
00015644                            ; ===========================================================================
00015644 0000                       Obj38_Index:	dc.w Obj38_Main-Obj38_Index
00015646 0000                       		dc.w Obj38_Shield-Obj38_Index
00015648 0000                       		dc.w Obj38_Stars-Obj38_Index
0001564A                            ; ===========================================================================
0001564A                            
0001564A                            Obj38_Main:				; XREF: Obj38_Index
0001564A 5428 0024                  		addq.b	#2,$24(a0)
0001564E 217C 0000 0000 0004        		move.l	#Map_obj38,4(a0)
00015656 117C 0004 0001             		move.b	#4,1(a0)
0001565C 117C 0001 0018             		move.b	#1,$18(a0)
00015662 117C 0010 0019             		move.b	#$10,$19(a0)
00015668 4A28 001C                  		tst.b	$1C(a0)		; is object a shield?
0001566C 6600                       		bne.s	Obj38_DoStars	; if not, branch
0001566E 317C 0541 0002             		move.w	#$541,2(a0)	; shield specific code
00015674 4E75                       		rts	
00015676                            ; ===========================================================================
00015676                            
00015676                            Obj38_DoStars:
00015676 5428 0024                  		addq.b	#2,$24(a0)	; stars	specific code
0001567A 317C 055C 0002             		move.w	#$55C,2(a0)
00015680 4E75                       		rts	
00015682                            ; ===========================================================================
00015682                            
00015682                            Obj38_Shield:				; XREF: Obj38_Index
00015682 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
00015686 6600                       		bne.s	Obj38_RmvShield	; if yes, branch
00015688 4A38 FE2C                  		tst.b	($FFFFFE2C).w	; does Sonic have shield?
0001568C 6700                       		beq.s	Obj38_Delete	; if not, branch
0001568E 3178 D008 0008             		move.w	($FFFFD008).w,8(a0)
00015694 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0)
0001569A 1178 D022 0022             		move.b	($FFFFD022).w,$22(a0)
000156A0 43F9 0000 0000             		lea	(Ani_obj38).l,a1
000156A6 4EB9 0000 B21C             		jsr	AnimateSprite
000156AC 4EFA 8A5C                  		jmp	DisplaySprite
000156B0                            ; ===========================================================================
000156B0                            
000156B0                            Obj38_RmvShield:
000156B0 4E75                       		rts	
000156B2                            ; ===========================================================================
000156B2                            
000156B2                            Obj38_Delete:
000156B2 4EFA 8A92                  		jmp	DeleteObject
000156B6                            ; ===========================================================================
000156B6                            
000156B6                            Obj38_Stars:				; XREF: Obj38_Index
000156B6 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
000156BA 6700                       		beq.s	Obj38_Delete2	; if not, branch
000156BC 3038 F7A8                  		move.w	($FFFFF7A8).w,d0
000156C0 1228 001C                  		move.b	$1C(a0),d1
000156C4 5301                       		subq.b	#1,d1
000156C6 6000                       		bra.s	Obj38_StarTrail
000156C8                            ; ===========================================================================
000156C8 E909                       		lsl.b	#4,d1
000156CA 5801                       		addq.b	#4,d1
000156CC 9001                       		sub.b	d1,d0
000156CE 1228 0030                  		move.b	$30(a0),d1
000156D2 9001                       		sub.b	d1,d0
000156D4 5801                       		addq.b	#4,d1
000156D6 0201 000F                  		andi.b	#$F,d1
000156DA 1141 0030                  		move.b	d1,$30(a0)
000156DE 6000                       		bra.s	Obj38_StarTrail2a
000156E0                            ; ===========================================================================
000156E0                            
000156E0                            Obj38_StarTrail:			; XREF: Obj38_Stars
000156E0 E709                       		lsl.b	#3,d1
000156E2 1401                       		move.b	d1,d2
000156E4 D201                       		add.b	d1,d1
000156E6 D202                       		add.b	d2,d1
000156E8 5801                       		addq.b	#4,d1
000156EA 9001                       		sub.b	d1,d0
000156EC 1228 0030                  		move.b	$30(a0),d1
000156F0 9001                       		sub.b	d1,d0
000156F2 5801                       		addq.b	#4,d1
000156F4 0C01 0018                  		cmpi.b	#$18,d1
000156F8 6500                       		bcs.s	Obj38_StarTrail2
000156FA 7200                       		moveq	#0,d1
000156FC                            
000156FC                            Obj38_StarTrail2:
000156FC 1141 0030                  		move.b	d1,$30(a0)
00015700                            
00015700                            Obj38_StarTrail2a:
00015700 43F8 CB00                  		lea	($FFFFCB00).w,a1
00015704 43F1 0000                  		lea	(a1,d0.w),a1
00015708 3159 0008                  		move.w	(a1)+,8(a0)
0001570C 3159 000C                  		move.w	(a1)+,$C(a0)
00015710 1178 D022 0022             		move.b	($FFFFD022).w,$22(a0)
00015716 43F9 0000 0000             		lea	(Ani_obj38).l,a1
0001571C 4EB9 0000 B21C             		jsr	AnimateSprite
00015722 4EFA 89E6                  		jmp	DisplaySprite
00015726                            ; ===========================================================================
00015726                            
00015726                            Obj38_Delete2:				; XREF: Obj38_Stars
00015726 4EFA 8A1E                  		jmp	DeleteObject
0001572A                            ; ===========================================================================
0001572A                            ; ---------------------------------------------------------------------------
0001572A                            ; Object 4A - special stage entry from beta
0001572A                            ; ---------------------------------------------------------------------------
0001572A                            
0001572A                            Obj4A:					; XREF: Obj_Index
0001572A 7000                       		moveq	#0,d0
0001572C 1028 0024                  		move.b	$24(a0),d0
00015730 323B 0000                  		move.w	Obj4A_Index(pc,d0.w),d1
00015734 4EFB 1000                  		jmp	Obj4A_Index(pc,d1.w)
00015738                            ; ===========================================================================
00015738 0000                       Obj4A_Index:	dc.w Obj4A_Main-Obj4A_Index
0001573A 0000                       		dc.w Obj4A_RmvSonic-Obj4A_Index
0001573C 0000                       		dc.w Obj4A_LoadSonic-Obj4A_Index
0001573E                            ; ===========================================================================
0001573E                            
0001573E                            Obj4A_Main:				; XREF: Obj4A_Index
0001573E 4AB8 F680                  		tst.l	($FFFFF680).w	; are pattern load cues	empty?
00015742 6700                       		beq.s	Obj4A_Main2	; if yes, branch
00015744 4E75                       		rts	
00015746                            ; ===========================================================================
00015746                            
00015746                            Obj4A_Main2:
00015746 5428 0024                  		addq.b	#2,$24(a0)
0001574A 217C 0000 0000 0004        		move.l	#Map_obj4A,4(a0)
00015752 117C 0004 0001             		move.b	#4,1(a0)
00015758 117C 0001 0018             		move.b	#1,$18(a0)
0001575E 117C 0038 0019             		move.b	#$38,$19(a0)
00015764 317C 0541 0002             		move.w	#$541,2(a0)
0001576A 317C 0078 0030             		move.w	#120,$30(a0)	; set time for Sonic's disappearance to 2 seconds
00015770                            
00015770                            Obj4A_RmvSonic:				; XREF: Obj4A_Index
00015770 3178 D008 0008             		move.w	($FFFFD008).w,8(a0)
00015776 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0)
0001577C 1178 D022 0022             		move.b	($FFFFD022).w,$22(a0)
00015782 43F9 0000 0000             		lea	(Ani_obj4A).l,a1
00015788 4EB9 0000 B21C             		jsr	AnimateSprite
0001578E 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
00015794 6600                       		bne.s	Obj4A_Display
00015796 4A38 D000                  		tst.b	($FFFFD000).w
0001579A 6700                       		beq.s	Obj4A_Display
0001579C 11FC 0000 D000             		move.b	#0,($FFFFD000).w ; remove Sonic
000157A2 303C 00A8                  		move.w	#$A8,d0
000157A6 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play Special Stage "GOAL" sound
000157AC                            
000157AC                            Obj4A_Display:
000157AC 4EFA 895C                  		jmp	DisplaySprite
000157B0                            ; ===========================================================================
000157B0                            
000157B0                            Obj4A_LoadSonic:			; XREF: Obj4A_Index
000157B0 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time
000157B4 6600                       		bne.s	Obj4A_Wait	; if time remains, branch
000157B6 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
000157BC 4EFA 8988                  		jmp	DeleteObject
000157C0                            ; ===========================================================================
000157C0                            
000157C0                            Obj4A_Wait:
000157C0 4E75                       		rts	
000157C2                            ; ===========================================================================
000157C2                            	include "_inc\sub RememberState.asm"
000157C2                            ; ---------------------------------------------------------------------------
000157C2                            ; Subroutine to remember whether an object is destroyed/collected
000157C2                            ; ---------------------------------------------------------------------------
000157C2                            
000157C2                            RememberState:
000157E0 6000 8928                  		bra.w	DisplaySprite
000157E4                            
000157E4                            	@offscreen:
000157E4 45F8 FC00                  		lea	(v_objstate).w,a2
000157E8 7000                       		moveq	#0,d0
000157EA 1028 0023                  		move.b	obRespawnNo(a0),d0
000157EE 6700                       		beq.s	@delete
000157F0 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
000157F6                            
000157F6                            	@delete:
000157F6 6000 894E                  		bra.w	DeleteObject
000157F6 6000 894E                  		bra.w	DeleteObject
000157FA =00000034                  id_Roll:	equ (SonAni_Roll-SonicAniData)/2	; 2
000157FA 0000 0000                  ptr_sndCC:	dc.l SoundCC
000157FE                            ani_booster:
000157FE                            	include "_anim\speedbooster.asm"
000157FE                            ; ---------------------------------------------------------------------------
000157FE                            ; Animation script - Sonic 4's Speed Booster
000157FE                            ; ---------------------------------------------------------------------------
000157FE 0000                       		dc.w idle-Ani_Booster
00015800 0101 0101 FE01             idle:	dc.b 1,	1, 1, 1, $FE, 1
00015806                            		even
00015806                            		even
00015806                            speedboosters:
00015806                            	include "_inc\speedbooster.asm"
00015806                            ; ----------------------------------------------------------------------------
00015806                            ; Object 06 - Booster things from CPZ
00015806                            ; ----------------------------------------------------------------------------
00015806                            
00015806                            		; DATA XREF: ROM:0001600Co
00015806 7000                       		moveq	#0,d0
00015808 1028 0024                  		move.b	obRoutine(a0),d0
0001580C 323B 0000                  		move.w	Booster_Index(pc,d0.w),d1
00015810 4EFB 1000                  		jmp	Booster_Index(pc,d1.w)
00015814                            ; ===========================================================================
00015814 0000                       Booster_Index:	dc.w Booster_Init-Booster_Index; 0 ; DATA XREF: h+B346o h+B348o
00015816 0000                       		dc.w Booster_Loop-Booster_Index; 1
00015818 1000                       word_222BE:	dc.w $1000		; 0
0001581A 0A00                       		dc.w  $A00		; 1
0001581C                            ; ===========================================================================
0001581C                            
0001581C                            Booster_Init:				; DATA XREF: h+B346o
0001581C 5428 0024                  		addq.b	#2,obRoutine(a0)
00015820 217C 0000 0000 0004        		move.l	#Map_SpeedBooster,obMap(a0)
00015828                            		
00015828                            		;move.w	#$372,obGfx(a0) ; SYZ2 specific code
00015828                            		;cmpi.w	#(id_SYZ<<8)+1,(v_zone).w ; check if level is SY2
00015828                            		;beq.s	@Continue	; if yes, branch
00015828 317C 5000 0002             		move.w	#$0400*20,obGfx(a0) ; 0 = palette line, XXX = Tile address (VRAM address / $20)
0001582E                            		
0001582E                            	@Continue:	
0001582E                            		;bsr.w	loc_22402
0001582E 0028 0004 0001             		ori.b	#4,obRender(a0)
00015834 117C 0020 0019             		move.b	#$20,obActWid(a0) ; ' '
0001583A 117C 0001 0018             		move.b	#1,obPriority(a0)
00015840 1028 0028                  		move.b	obSubtype(a0),d0
00015844 0240 0002                  		andi.w	#2,d0
00015848 317B 00CE 0030             		move.w	word_222BE(pc,d0.w),$30(a0)
0001584E                            
0001584E                            Booster_Loop:				; DATA XREF: h+B346o
0001584E                            		;move.b	(obTimeFrame).w,obFrame(a0)
0001584E                            		;andi.b	#2,d0
0001584E                            		;move.b	d0,obFrame(a0)
0001584E                            		;move.b	(v_ani1_frame).w,obFrame(a0)
0001584E 3028 0008                  		move.w	obX(a0),d0
00015852 3200                       		move.w	d0,d1
00015854 0440 0010                  		subi.w	#$10,d0
00015858 0641 0010                  		addi.w	#$10,d1
0001585C 3428 000C                  		move.w	obY(a0),d2
00015860 3602                       		move.w	d2,d3
00015862 0442 0010                  		subi.w	#$10,d2
00015866 0643 0010                  		addi.w	#$10,d3
0001586A                            		;lea	($FFFFB000).w,a1
0001586A 43F8 D000                  		lea	(v_player).w,a1
0001586E 0829 0001 0022             		btst	#1,obStatus(a1)
00015874 6600                       		bne.s	loc_22384
00015876 3829 0008                  		move.w	obX(a1),d4
0001587A B840                       		cmp.w	d0,d4
0001587C 6500 0000                  		bcs.w	loc_22384
00015880 B841                       		cmp.w	d1,d4
00015882 6400 0000                  		bcc.w	loc_22384
00015886 3829 000C                  		move.w	obY(a1),d4
0001588A B842                       		cmp.w	d2,d4
0001588C 6500 0000                  		bcs.w	loc_22384
00015890 B843                       		cmp.w	d3,d4
00015892 6400 0000                  		bcc.w	loc_22384
00015896 3F00                       		move.w	d0,-(sp)
00015898 6100 0000                  		bsr.w	loc_22388
0001589C 301F                       		move.w	(sp)+,d0
0001589E                            		;bsr.w	loc_22388
0001589E                            
0001589E                            ;loc_22354:				; CODE XREF: h+B3B6j h+B3BEj ...
0001589E                            		;lea	(v_player).w,a1 ; a1=character
0001589E                            		;btst	#1,$22(a1)
0001589E                            		;bne.s	loc_22384
0001589E                            		;move.w	8(a1),d4
0001589E                            		;cmp.w	d0,d4
0001589E                            		;bcs.w	loc_22384
0001589E                            		;cmp.w	d1,d4
0001589E                            		;bcc.w	loc_22384
0001589E                            		;move.w	$C(a1),d4
0001589E                            		;cmp.w	d2,d4
0001589E                            		;bcs.w	loc_22384
0001589E                            		;cmp.w	d3,d4
0001589E                            		;bcc.w	loc_22384
0001589E                            		;bsr.w	loc_22388
0001589E                            
0001589E                            loc_22384:				; CODE XREF: h+B3EAj h+B3F2j ...
0001589E 4EFA A92C                  		jmp	MarkObjGone		;jsr	loc_223FC
000158A2                            ; ===========================================================================
000158A2                            
000158A2                            loc_22388:				; CODE XREF: h+B3DAp h+B40Cp
000158A2 3029 0010                  		move.w	obVelX(a1),d0
000158A6 0828 0000 0022             		btst	#0,obStatus(a0)
000158AC 6700                       		beq.s	loc_22396
000158AE 4440                       		neg.w	d0
000158B0                            
000158B0                            loc_22396:				; CODE XREF: h+B41Ej
000158B0 0C40 1000                  		cmpi.w	#$1000,d0 			; is the character already going super fast?
000158B4 6C00                       		bge.s	loc_223D8 			; if yes, branch to not change the speed
000158B6 3368 0030 0010             		move.w	$30(a0),obVelX(a1)  ; make the character go super fast
000158BC 08A9 0000 0022             		bclr	#0,obStatus(a1)		; turn him right
000158C2 0828 0000 0022             		btst	#0,obStatus(a0)		; was that the correct direction?
000158C8 6700                       		beq.s	loc_223BA 			; if yes, branch
000158CA 08E9 0000 0022             		bset	#0,obStatus(a1)		; turn him left
000158D0 4469 0010                  		neg.w	obVelX(a1)			; make the boosting direction left
000158D4                            
000158D4                            loc_223BA:				; CODE XREF: h+B43Aj
000158D4                            		;move.w	#$F,$2E(a1)
000158D4 3369 0010 0014             		move.w	obVelX(a1),obInertia(a1)
000158DA 08A8 0005 0022             		bclr	#5,obStatus(a0)
000158E0 08A8 0006 0022             		bclr	#6,obStatus(a0)
000158E6 08A9 0005 0022             		bclr	#5,obStatus(a1)
000158EC                            		
000158EC                            		;addq.w	#5,obY(a1)
000158EC                            
000158EC                            loc_223D8:				; CODE XREF: h+B426j
000158EC                            		;move.w	#$D1,d0	; 'Ì'
000158EC                            		;jmp	(play_SFX).l
000158EC                            ;		bset	#2,obStatus(a1)		;set rolling bit
000158EC                            ;		move.b	#$E,obHeight(a1) 	; change hitbox
000158EC                            ;		move.b	#7,obWidth(a1)	  	; change hitbox
000158EC                            ;		move.b	#id_Roll,obAnim(a1) ; use "rolling" animation
000158EC 303C 00D1                  		move.w	#$D1,d0
000158F0 4EF9 0000 1476             		jmp	(PlaySound_Special).l ;	play spring sound
000158F6                            ; ===========================================================================
000158F6                            ; -------------------------------------------------------------------------------
000158F6                            ; sprite mappings
000158F6                            ; -------------------------------------------------------------------------------
000158F6                            Map_SpeedBooster:	incbin "_maps/SpeedBooster.asm"
00015AD0                            Nem_SpeedBooster:	incbin "artnem/speedbooster.bin"
00015CC7                            ; ===========================================================================
00015CC7                            
00015CC7                            ;loc_223FC:				; CODE XREF: h+B410j	
00015CC7                            ;       out_of_range    DeleteObject
00015CC7                            ;		lea	(Ani_Eggman).l,a1
00015CC7                            ;		jsr	AnimateSprite
00015CC7                            ;		bra.w	RememberState
00015CC7                            ;		even
00015CC7                            ;		even
00015CC7                            ; ---------------------------------------------------------------------------
00015CC7                            ; Object 08 - water splash (LZ)
00015CC7                            ; ---------------------------------------------------------------------------
00015CC7                            
00015CC7                            Obj08:					; XREF: Obj_Index
00015CC8 0070 00                    		moveq	#0,d0
00015CCA 1028 0024                  		move.b	$24(a0),d0
00015CCE 323B 0000                  		move.w	Obj08_Index(pc,d0.w),d1
00015CD2 4EFB 1000                  		jmp	Obj08_Index(pc,d1.w)
00015CD6                            ; ===========================================================================
00015CD6 0000                       Obj08_Index:	dc.w Obj08_Main-Obj08_Index
00015CD8 0000                       		dc.w Obj08_Display-Obj08_Index
00015CDA 0000                       		dc.w Obj08_Delete-Obj08_Index
00015CDC                            ; ===========================================================================
00015CDC                            
00015CDC                            Obj08_Main:				; XREF: Obj08_Index
00015CDC 5428 0024                  		addq.b	#2,$24(a0)
00015CE0 217C 0000 0000 0004        		move.l	#Map_obj08,4(a0)
00015CE8 0028 0004 0001             		ori.b	#4,1(a0)
00015CEE 117C 0001 0018             		move.b	#1,$18(a0)
00015CF4 117C 0010 0019             		move.b	#$10,$19(a0)
00015CFA 317C 4259 0002             		move.w	#$4259,2(a0)
00015D00 3178 D008 0008             		move.w	($FFFFD008).w,8(a0) ; copy x-position from Sonic
00015D06                            
00015D06                            Obj08_Display:				; XREF: Obj08_Index
00015D06 3178 F646 000C             		move.w	($FFFFF646).w,$C(a0) ; copy y-position from water height
00015D0C 43F9 0000 0000             		lea	(Ani_obj08).l,a1
00015D12 4EB9 0000 B21C             		jsr	AnimateSprite
00015D18 4EFA 83F0                  		jmp	DisplaySprite
00015D1C                            ; ===========================================================================
00015D1C                            
00015D1C                            Obj08_Delete:				; XREF: Obj08_Index
00015D1C 4EFA 8428                  		jmp	DeleteObject	; delete when animation	is complete
00015D20                            ; ===========================================================================
00015D20                            Ani_obj38:
00015D20                            	include "_anim\obj38.asm"
00015D20                            ; ---------------------------------------------------------------------------
00015D20                            ; Animation script - shield and invincibility stars
00015D20                            ; ---------------------------------------------------------------------------
00015D20 0000                       		dc.w byte_14356-Ani_obj38
00015D22 0000                       		dc.w byte_1435E-Ani_obj38
00015D24 0000                       		dc.w byte_14364-Ani_obj38
00015D26 0000                       		dc.w byte_1437E-Ani_obj38
00015D28 0000                       		dc.w byte_14398-Ani_obj38
00015D2A 0101 0002 0003 00FF        byte_14356:	dc.b 1,	1, 0, 2, 0, 3, 0, $FF
00015D32 0504 0506 07FF             byte_1435E:	dc.b 5,	4, 5, 6, 7, $FF
00015D38 0004 0400 0404 0005 0500+  byte_14364:	dc.b 0,	4, 4, 0, 4, 4, 0, 5, 5,	0, 5, 5, 0, 6, 6, 0, 6
00015D49 0600 0707 0007 0700 FF     		dc.b 6,	0, 7, 7, 0, 7, 7, 0, $FF
00015D52 0004 0400 0400 0005 0500+  byte_1437E:	dc.b 0,	4, 4, 0, 4, 0, 0, 5, 5,	0, 5, 0, 0, 6, 6, 0, 6
00015D63 0000 0707 0007 0000 FF     		dc.b 0,	0, 7, 7, 0, 7, 0, 0, $FF
00015D6C 0004 0000 0400 0005 0000+  byte_14398:	dc.b 0,	4, 0, 0, 4, 0, 0, 5, 0,	0, 5, 0, 0, 6, 0, 0, 6
00015D7D 0000 0700 0007 0000 FF     		dc.b 0,	0, 7, 0, 0, 7, 0, 0, $FF
00015D86                            		even
00015D86                            		even
00015D86                            
00015D86                            ; ---------------------------------------------------------------------------
00015D86                            ; Sprite mappings - shield and invincibility stars
00015D86                            ; ---------------------------------------------------------------------------
00015D86                            Map_obj38:
00015D86                            	include "_maps\obj38.asm"
00015D86                            ; ---------------------------------------------------------------------------
00015D86                            ; Sprite mappings - shield and invincibility stars
00015D86                            ; ---------------------------------------------------------------------------
00015D86 0000 0000                  		dc.w byte_143CD-Map_obj38, byte_143C2-Map_obj38
00015D8A 0000 0000                  		dc.w byte_143D7-Map_obj38, byte_143EC-Map_obj38
00015D8E 0000 0000                  		dc.w byte_14401-Map_obj38, byte_14416-Map_obj38
00015D92 0000 0000                  		dc.w byte_1442B-Map_obj38, byte_14440-Map_obj38
00015D96 04                         byte_143C2:	dc.b 4
00015D97 E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
00015D9C E80A 0009 00               		dc.b $E8, $A, 0, 9, 0
00015DA1 000A 1000 E8               byte_143CD:	dc.b 0,	$A, $10, 0, $E8
00015DA6 000A 1009 00               		dc.b 0,	$A, $10, 9, 0
00015DAB 04                         byte_143D7:	dc.b 4
00015DAC E80A 0812 E9               		dc.b $E8, $A, 8, $12, $E9
00015DB1 E80A 0012 00               		dc.b $E8, $A, 0, $12, 0
00015DB6 000A 1812 E9               		dc.b 0,	$A, $18, $12, $E9
00015DBB 000A 1012 00               		dc.b 0,	$A, $10, $12, 0
00015DC0 04                         byte_143EC:	dc.b 4
00015DC1 E80A 0809 E8               		dc.b $E8, $A, 8, 9, $E8
00015DC6 E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
00015DCB 000A 1809 E8               		dc.b 0,	$A, $18, 9, $E8
00015DD0 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
00015DD5 04                         byte_14401:	dc.b 4
00015DD6 E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
00015DDB E80A 0009 00               		dc.b $E8, $A, 0, 9, 0
00015DE0 000A 1809 E8               		dc.b 0,	$A, $18, 9, $E8
00015DE5 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
00015DEA 04                         byte_14416:	dc.b 4
00015DEB E80A 0809 E8               		dc.b $E8, $A, 8, 9, $E8
00015DF0 E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
00015DF5 000A 1000 E8               		dc.b 0,	$A, $10, 0, $E8
00015DFA 000A 1009 00               		dc.b 0,	$A, $10, 9, 0
00015DFF 04                         byte_1442B:	dc.b 4
00015E00 E80A 0012 E8               		dc.b $E8, $A, 0, $12, $E8
00015E05 E80A 001B 00               		dc.b $E8, $A, 0, $1B, 0
00015E0A 000A 181B E8               		dc.b 0,	$A, $18, $1B, $E8
00015E0F 000A 1812 00               		dc.b 0,	$A, $18, $12, 0
00015E14 04                         byte_14440:	dc.b 4
00015E15 E80A 081B E8               		dc.b $E8, $A, 8, $1B, $E8
00015E1A E80A 0812 00               		dc.b $E8, $A, 8, $12, 0
00015E1F 000A 1012 E8               		dc.b 0,	$A, $10, $12, $E8
00015E24 000A 101B 00               		dc.b 0,	$A, $10, $1B, 0
00015E2A 00                         		even
00015E2A 00                         		even
00015E2A                            
00015E2A                            Ani_obj4A:
00015E2A                            	include "_anim\obj4A.asm"
00015E2A                            ; ---------------------------------------------------------------------------
00015E2A                            ; Animation script - special stage entry effect from beta
00015E2A                            ; ---------------------------------------------------------------------------
00015E2A 0000                       		dc.w byte_14458-Ani_obj4A
00015E2C 0500 0100 0100 0701 0702+  byte_14458:	dc.b 5,	0, 1, 0, 1, 0, 7, 1, 7,	2, 7, 3, 7, 4, 7, 5, 7, 6, 7, $FC
00015E40                            		even
00015E40                            		even
00015E40                            
00015E40                            ; ---------------------------------------------------------------------------
00015E40                            ; Sprite mappings - special stage entry	from beta
00015E40                            ; ---------------------------------------------------------------------------
00015E40                            Map_obj4A:
00015E40                            	include "_maps\obj4A.asm"
00015E40                            ; ---------------------------------------------------------------------------
00015E40                            ; Sprite mappings - special stage entry	from beta
00015E40                            ; ---------------------------------------------------------------------------
00015E40 0000 0000                  		dc.w byte_1447C-Map_obj4A, byte_1448C-Map_obj4A
00015E44 0000 0000                  		dc.w byte_1449C-Map_obj4A, byte_144B6-Map_obj4A
00015E48 0000 0000                  		dc.w byte_144E4-Map_obj4A, byte_1453F-Map_obj4A
00015E4C 0000 0000                  		dc.w byte_14595-Map_obj4A, byte_145BF-Map_obj4A
00015E50 03                         byte_1447C:	dc.b 3
00015E51 F800 0000 08               		dc.b $F8, 0, 0,	0, 8
00015E56 0004 0001 00               		dc.b 0,	4, 0, 1, 0
00015E5B 0800 1000 08               		dc.b 8,	0, $10,	0, 8
00015E60 03                         byte_1448C:	dc.b 3
00015E61 F00D 0003 F0               		dc.b $F0, $D, 0, 3, $F0
00015E66 000C 000B F0               		dc.b 0,	$C, 0, $B, $F0
00015E6B 080D 1003 F0               		dc.b 8,	$D, $10, 3, $F0
00015E70 05                         byte_1449C:	dc.b 5
00015E71 E40E 000F F4               		dc.b $E4, $E, 0, $F, $F4
00015E76 EC02 001B EC               		dc.b $EC, 2, 0,	$1B, $EC
00015E7B FC0C 001E F4               		dc.b $FC, $C, 0, $1E, $F4
00015E80 040E 100F F4               		dc.b 4,	$E, $10, $F, $F4
00015E85 0401 101B EC               		dc.b 4,	1, $10,	$1B, $EC
00015E8A 09                         byte_144B6:	dc.b 9
00015E8B F008 0022 F8               		dc.b $F0, 8, 0,	$22, $F8
00015E90 F80E 0025 F0               		dc.b $F8, $E, 0, $25, $F0
00015E95 1008 0031 F0               		dc.b $10, 8, 0,	$31, $F0
00015E9A 0005 0034 10               		dc.b 0,	5, 0, $34, $10
00015E9F F800 0825 10               		dc.b $F8, 0, 8,	$25, $10
00015EA4 F000 1836 18               		dc.b $F0, 0, $18, $36, $18
00015EA9 F800 1825 20               		dc.b $F8, 0, $18, $25, $20
00015EAE 0000 0825 28               		dc.b 0,	0, 8, $25, $28
00015EB3 F800 0025 30               		dc.b $F8, 0, 0,	$25, $30
00015EB8 12                         byte_144E4:	dc.b $12
00015EB9 0000 1825 F0               		dc.b 0,	0, $18,	$25, $F0
00015EBE F804 0038 F8               		dc.b $F8, 4, 0,	$38, $F8
00015EC3 F000 0026 08               		dc.b $F0, 0, 0,	$26, 8
00015EC8 0000 0025 00               		dc.b 0,	0, 0, $25, 0
00015ECD 0800 1825 F8               		dc.b 8,	0, $18,	$25, $F8
00015ED2 1000 1026 00               		dc.b $10, 0, $10, $26, 0
00015ED7 0800 1038 08               		dc.b 8,	0, $10,	$38, 8
00015EDC F800 0029 10               		dc.b $F8, 0, 0,	$29, $10
00015EE1 0000 0026 10               		dc.b 0,	0, 0, $26, $10
00015EE6 0000 002D 18               		dc.b 0,	0, 0, $2D, $18
00015EEB 0800 0826 18               		dc.b 8,	0, 8, $26, $18
00015EF0 0800 0029 20               		dc.b 8,	0, 0, $29, $20
00015EF5 F800 0026 20               		dc.b $F8, 0, 0,	$26, $20
00015EFA F800 002D 28               		dc.b $F8, 0, 0,	$2D, $28
00015EFF 0000 003A 28               		dc.b 0,	0, 0, $3A, $28
00015F04 F800 1826 30               		dc.b $F8, 0, $18, $26, $30
00015F09 0000 1025 38               		dc.b 0,	0, $10,	$25, $38
00015F0E F800 1025 40               		dc.b $F8, 0, $10, $25, $40
00015F13 11                         byte_1453F:	dc.b $11
00015F14 F800 0825 00               		dc.b $F8, 0, 8,	$25, 0
00015F19 F000 0038 10               		dc.b $F0, 0, 0,	$38, $10
00015F1E 1000 0825 00               		dc.b $10, 0, 8,	$25, 0
00015F23 0000 1825 10               		dc.b 0,	0, $18,	$25, $10
00015F28 0800 1025 18               		dc.b 8,	0, $10,	$25, $18
00015F2D F800 1825 20               		dc.b $F8, 0, $18, $25, $20
00015F32 0000 1026 28               		dc.b 0,	0, $10,	$26, $28
00015F37 F800 1025 30               		dc.b $F8, 0, $10, $25, $30
00015F3C 0000 0025 30               		dc.b 0,	0, 0, $25, $30
00015F41 0800 0825 30               		dc.b 8,	0, 8, $25, $30
00015F46 0000 0826 38               		dc.b 0,	0, 8, $26, $38
00015F4B 0800 0029 38               		dc.b 8,	0, 0, $29, $38
00015F50 F800 0826 40               		dc.b $F8, 0, 8,	$26, $40
00015F55 0000 002D 40               		dc.b 0,	0, 0, $2D, $40
00015F5A F800 0825 48               		dc.b $F8, 0, 8,	$25, $48
00015F5F 0000 0025 48               		dc.b 0,	0, 0, $25, $48
00015F64 0000 1025 50               		dc.b 0,	0, $10,	$25, $50
00015F69 09                         byte_14595:	dc.b 9
00015F6A FC00 0826 30               		dc.b $FC, 0, 8,	$26, $30
00015F6F 0400 0825 28               		dc.b 4,	0, 8, $25, $28
00015F74 0400 1027 38               		dc.b 4,	0, $10,	$27, $38
00015F79 0400 0826 40               		dc.b 4,	0, 8, $26, $40
00015F7E FC00 1025 40               		dc.b $FC, 0, $10, $25, $40
00015F83 FC00 1026 48               		dc.b $FC, 0, $10, $26, $48
00015F88 0C00 0827 48               		dc.b $C, 0, 8, $27, $48
00015F8D 0400 1826 50               		dc.b 4,	0, $18,	$26, $50
00015F92 04                         		dc.b 4
00015F93 0008 2758 00               byte_145BF:	dc.b 0,	8, $27,	$58, 0
00015F98                            		even
00015F98                            		even
00015F98                            
00015F98                            Ani_obj08:
00015F98                            	include "_anim\obj08.asm"
00015F98                            ; ---------------------------------------------------------------------------
00015F98                            ; Animation script - water splash (LZ)
00015F98                            ; ---------------------------------------------------------------------------
00015F98 0000                       		dc.w byte_145C6-Ani_obj08
00015F9A 0400 0102 FC00             byte_145C6:	dc.b 4,	0, 1, 2, $FC, 0
00015FA0                            		even
00015FA0                            		even
00015FA0                            
00015FA0                            ; ---------------------------------------------------------------------------
00015FA0                            ; Sprite mappings - water splash (LZ)
00015FA0                            ; ---------------------------------------------------------------------------
00015FA0                            Map_obj08:
00015FA0                            	include "_maps\obj08.asm"
00015FA0                            ; ---------------------------------------------------------------------------
00015FA0                            ; Sprite mappings - water splash (LZ)
00015FA0                            ; ---------------------------------------------------------------------------
00015FA0 0000                       		dc.w byte_145D2-Map_obj08
00015FA2 0000                       		dc.w byte_145DD-Map_obj08
00015FA4 0000                       		dc.w byte_145E8-Map_obj08
00015FA6 02                         byte_145D2:	dc.b 2
00015FA7 F204 006D F8               		dc.b $F2, 4, 0,	$6D, $F8
00015FAC FA0C 006F F0               		dc.b $FA, $C, 0, $6F, $F0
00015FB1 02                         byte_145DD:	dc.b 2
00015FB2 E200 0073 F8               		dc.b $E2, 0, 0,	$73, $F8
00015FB7 EA0E 0074 F0               		dc.b $EA, $E, 0, $74, $F0
00015FBC 01                         byte_145E8:	dc.b 1
00015FBD E20F 0080 F0               		dc.b $E2, $F, 0, $80, $F0
00015FC2                            		even
00015FC2                            		even
00015FC2                            
00015FC2                            ; ---------------------------------------------------------------------------
00015FC2                            ; Subroutine to	change Sonic's angle & position as he walks along the floor
00015FC2                            ; ---------------------------------------------------------------------------
00015FC2                            
00015FC2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015FC2                            
00015FC2                            
00015FC2                            Sonic_AnglePos:				; XREF: Obj01_MdNormal; Obj01_MdRoll
00015FC2 0828 0003 0022             		btst	#3,$22(a0)
00015FC8 6700                       		beq.s	loc_14602
00015FCA 7000                       		moveq	#0,d0
00015FCC 11C0 F768                  		move.b	d0,($FFFFF768).w
00015FD0 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00015FD4 4E75                       		rts	
00015FD6                            ; ===========================================================================
00015FD6                            
00015FD6                            loc_14602:
00015FD6 7003                       		moveq	#3,d0
00015FD8 11C0 F768                  		move.b	d0,($FFFFF768).w
00015FDC 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00015FE0 1028 0026                  		move.b	$26(a0),d0
00015FE4 0600 0020                  		addi.b	#$20,d0
00015FE8 6A00                       		bpl.s	loc_14624
00015FEA 1028 0026                  		move.b	$26(a0),d0
00015FEE 6A00                       		bpl.s	loc_1461E
00015FF0 5300                       		subq.b	#1,d0
00015FF2                            
00015FF2                            loc_1461E:
00015FF2 0600 0020                  		addi.b	#$20,d0
00015FF6 6000                       		bra.s	loc_14630
00015FF8                            ; ===========================================================================
00015FF8                            
00015FF8                            loc_14624:
00015FF8 1028 0026                  		move.b	$26(a0),d0
00015FFC 6A00                       		bpl.s	loc_1462C
00015FFE 5200                       		addq.b	#1,d0
00016000                            
00016000                            loc_1462C:
00016000 0600 001F                  		addi.b	#$1F,d0
00016004                            
00016004                            loc_14630:
00016004 0200 00C0                  		andi.b	#$C0,d0
00016008 0C00 0040                  		cmpi.b	#$40,d0
0001600C 6700 0000                  		beq.w	Sonic_WalkVertL
00016010 0C00 0080                  		cmpi.b	#$80,d0
00016014 6700 0000                  		beq.w	Sonic_WalkCeiling
00016018 0C00 00C0                  		cmpi.b	#$C0,d0
0001601C 6700 0000                  		beq.w	Sonic_WalkVertR
00016020 3428 000C                  		move.w	$C(a0),d2
00016024 3628 0008                  		move.w	8(a0),d3
00016028 7000                       		moveq	#0,d0
0001602A 1028 0016                  		move.b	$16(a0),d0
0001602E 4880                       		ext.w	d0
00016030 D440                       		add.w	d0,d2
00016032 1028 0017                  		move.b	$17(a0),d0
00016036 4880                       		ext.w	d0
00016038 D640                       		add.w	d0,d3
0001603A 49F8 F768                  		lea	($FFFFF768).w,a4
0001603E 367C 0010                  		movea.w	#$10,a3
00016042 3C3C 0000                  		move.w	#0,d6
00016046 7A0D                       		moveq	#$D,d5
00016048 6100 0000                  		bsr.w	FindFloor
0001604C 3F01                       		move.w	d1,-(sp)
0001604E 3428 000C                  		move.w	$C(a0),d2
00016052 3628 0008                  		move.w	8(a0),d3
00016056 7000                       		moveq	#0,d0
00016058 1028 0016                  		move.b	$16(a0),d0
0001605C 4880                       		ext.w	d0
0001605E D440                       		add.w	d0,d2
00016060 1028 0017                  		move.b	$17(a0),d0
00016064 4880                       		ext.w	d0
00016066 4440                       		neg.w	d0
00016068 D640                       		add.w	d0,d3
0001606A 49F8 F76A                  		lea	($FFFFF76A).w,a4
0001606E 367C 0010                  		movea.w	#$10,a3
00016072 3C3C 0000                  		move.w	#0,d6
00016076 7A0D                       		moveq	#$D,d5
00016078 6100 0000                  		bsr.w	FindFloor
0001607C 301F                       		move.w	(sp)+,d0
0001607E 6100 0000                  		bsr.w	Sonic_Angle
00016082 4A41                       		tst.w	d1
00016084 6700                       		beq.s	locret_146BE
00016086 6A00                       		bpl.s	loc_146C0
00016088 0C41 FFF2                  		cmpi.w	#-$E,d1
0001608C 6D00                       		blt.s	locret_146E6
0001608E D368 000C                  		add.w	d1,$C(a0)
00016092                            
00016092                            locret_146BE:
00016092 4E75                       		rts	
00016094                            ; ===========================================================================
00016094                            
00016094                            loc_146C0:
00016094 0C41 000E                  		cmpi.w	#$E,d1
00016098 6E00                       		bgt.s	loc_146CC
0001609A                            
0001609A                            loc_146C6:
0001609A D368 000C                  		add.w	d1,$C(a0)
0001609E 4E75                       		rts	
000160A0                            ; ===========================================================================
000160A0                            
000160A0                            loc_146CC:
000160A0 4A28 0038                  		tst.b	$38(a0)
000160A4 66F4                       		bne.s	loc_146C6
000160A6 08E8 0001 0022             		bset	#1,$22(a0)
000160AC 08A8 0005 0022             		bclr	#5,$22(a0)
000160B2 117C 0001 001D             		move.b	#1,$1D(a0)
000160B8 4E75                       		rts	
000160BA                            ; ===========================================================================
000160BA                            
000160BA                            locret_146E6:
000160BA 4E75                       		rts	
000160BC                            ; End of function Sonic_AnglePos
000160BC                            
000160BC                            ; ===========================================================================
000160BC 2428 0008                  		move.l	8(a0),d2
000160C0 3028 0010                  		move.w	$10(a0),d0
000160C4 48C0                       		ext.l	d0
000160C6 E180                       		asl.l	#8,d0
000160C8 9480                       		sub.l	d0,d2
000160CA 2142 0008                  		move.l	d2,8(a0)
000160CE 303C 0038                  		move.w	#$38,d0
000160D2 48C0                       		ext.l	d0
000160D4 E180                       		asl.l	#8,d0
000160D6 9680                       		sub.l	d0,d3
000160D8 2143 000C                  		move.l	d3,$C(a0)
000160DC 4E75                       		rts	
000160DE                            ; ===========================================================================
000160DE                            
000160DE                            locret_1470A:
000160DE 4E75                       		rts	
000160E0                            ; ===========================================================================
000160E0 2628 000C                  		move.l	$C(a0),d3
000160E4 3028 0012                  		move.w	$12(a0),d0
000160E8 0440 0038                  		subi.w	#$38,d0
000160EC 3140 0012                  		move.w	d0,$12(a0)
000160F0 48C0                       		ext.l	d0
000160F2 E180                       		asl.l	#8,d0
000160F4 9680                       		sub.l	d0,d3
000160F6 2143 000C                  		move.l	d3,$C(a0)
000160FA 4E75                       		rts	
000160FC 4E75                       		rts	
000160FE                            ; ===========================================================================
000160FE 2428 0008                  		move.l	8(a0),d2
00016102 2628 000C                  		move.l	$C(a0),d3
00016106 3028 0010                  		move.w	$10(a0),d0
0001610A 48C0                       		ext.l	d0
0001610C E180                       		asl.l	#8,d0
0001610E 9480                       		sub.l	d0,d2
00016110 3028 0012                  		move.w	$12(a0),d0
00016114 48C0                       		ext.l	d0
00016116 E180                       		asl.l	#8,d0
00016118 9680                       		sub.l	d0,d3
0001611A 2142 0008                  		move.l	d2,8(a0)
0001611E 2143 000C                  		move.l	d3,$C(a0)
00016122 4E75                       		rts	
00016124                            
00016124                            ; ---------------------------------------------------------------------------
00016124                            ; Subroutine to	change Sonic's angle as he walks along the floor
00016124                            ; ---------------------------------------------------------------------------
00016124                            
00016124                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016124                            
00016124                            
00016124                            Sonic_Angle:				; XREF: Sonic_AnglePos; et al
00016124 1438 F76A                  		move.b	($FFFFF76A).w,d2
00016128 B240                       		cmp.w	d0,d1
0001612A 6F00                       		ble.s	loc_1475E
0001612C 1438 F768                  		move.b	($FFFFF768).w,d2
00016130 3200                       		move.w	d0,d1
00016132                            
00016132                            loc_1475E:
00016132 0802 0000                  		btst	#0,d2
00016136 6600                       		bne.s	loc_1476A
00016138 1142 0026                  		move.b	d2,$26(a0)
0001613C 4E75                       		rts	
0001613E                            ; ===========================================================================
0001613E                            
0001613E                            loc_1476A:
0001613E 1428 0026                  		move.b	$26(a0),d2
00016142 0602 0020                  		addi.b	#$20,d2
00016146 0202 00C0                  		andi.b	#$C0,d2
0001614A 1142 0026                  		move.b	d2,$26(a0)
0001614E 4E75                       		rts	
00016150                            ; End of function Sonic_Angle
00016150                            
00016150                            ; ---------------------------------------------------------------------------
00016150                            ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his right
00016150                            ; ---------------------------------------------------------------------------
00016150                            
00016150                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016150                            
00016150                            
00016150                            Sonic_WalkVertR:			; XREF: Sonic_AnglePos
00016150 3428 000C                  		move.w	$C(a0),d2
00016154 3628 0008                  		move.w	8(a0),d3
00016158 7000                       		moveq	#0,d0
0001615A 1028 0017                  		move.b	$17(a0),d0
0001615E 4880                       		ext.w	d0
00016160 4440                       		neg.w	d0
00016162 D440                       		add.w	d0,d2
00016164 1028 0016                  		move.b	$16(a0),d0
00016168 4880                       		ext.w	d0
0001616A D640                       		add.w	d0,d3
0001616C 49F8 F768                  		lea	($FFFFF768).w,a4
00016170 367C 0010                  		movea.w	#$10,a3
00016174 3C3C 0000                  		move.w	#0,d6
00016178 7A0D                       		moveq	#$D,d5
0001617A 6100 0000                  		bsr.w	FindWall
0001617E 3F01                       		move.w	d1,-(sp)
00016180 3428 000C                  		move.w	$C(a0),d2
00016184 3628 0008                  		move.w	8(a0),d3
00016188 7000                       		moveq	#0,d0
0001618A 1028 0017                  		move.b	$17(a0),d0
0001618E 4880                       		ext.w	d0
00016190 D440                       		add.w	d0,d2
00016192 1028 0016                  		move.b	$16(a0),d0
00016196 4880                       		ext.w	d0
00016198 D640                       		add.w	d0,d3
0001619A 49F8 F76A                  		lea	($FFFFF76A).w,a4
0001619E 367C 0010                  		movea.w	#$10,a3
000161A2 3C3C 0000                  		move.w	#0,d6
000161A6 7A0D                       		moveq	#$D,d5
000161A8 6100 0000                  		bsr.w	FindWall
000161AC 301F                       		move.w	(sp)+,d0
000161AE 6100 FF74                  		bsr.w	Sonic_Angle
000161B2 4A41                       		tst.w	d1
000161B4 6700                       		beq.s	locret_147F0
000161B6 6A00                       		bpl.s	loc_147F2
000161B8 0C41 FFF2                  		cmpi.w	#-$E,d1
000161BC 6D00 FF20                  		blt.w	locret_1470A
000161C0 D368 0008                  		add.w	d1,8(a0)
000161C4                            
000161C4                            locret_147F0:
000161C4 4E75                       		rts	
000161C6                            ; ===========================================================================
000161C6                            
000161C6                            loc_147F2:
000161C6 0C41 000E                  		cmpi.w	#$E,d1
000161CA 6E00                       		bgt.s	loc_147FE
000161CC                            
000161CC                            loc_147F8:
000161CC D368 0008                  		add.w	d1,8(a0)
000161D0 4E75                       		rts	
000161D2                            ; ===========================================================================
000161D2                            
000161D2                            loc_147FE:
000161D2 4A28 0038                  		tst.b	$38(a0)
000161D6 66F4                       		bne.s	loc_147F8
000161D8 08E8 0001 0022             		bset	#1,$22(a0)
000161DE 08A8 0005 0022             		bclr	#5,$22(a0)
000161E4 117C 0001 001D             		move.b	#1,$1D(a0)
000161EA 4E75                       		rts	
000161EC                            ; End of function Sonic_WalkVertR
000161EC                            
000161EC                            ; ---------------------------------------------------------------------------
000161EC                            ; Subroutine allowing Sonic to walk upside-down
000161EC                            ; ---------------------------------------------------------------------------
000161EC                            
000161EC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000161EC                            
000161EC                            
000161EC                            Sonic_WalkCeiling:			; XREF: Sonic_AnglePos
000161EC 3428 000C                  		move.w	$C(a0),d2
000161F0 3628 0008                  		move.w	8(a0),d3
000161F4 7000                       		moveq	#0,d0
000161F6 1028 0016                  		move.b	$16(a0),d0
000161FA 4880                       		ext.w	d0
000161FC 9440                       		sub.w	d0,d2
000161FE 0A42 000F                  		eori.w	#$F,d2
00016202 1028 0017                  		move.b	$17(a0),d0
00016206 4880                       		ext.w	d0
00016208 D640                       		add.w	d0,d3
0001620A 49F8 F768                  		lea	($FFFFF768).w,a4
0001620E 367C FFF0                  		movea.w	#-$10,a3
00016212 3C3C 1000                  		move.w	#$1000,d6
00016216 7A0D                       		moveq	#$D,d5
00016218 6100 0000                  		bsr.w	FindFloor
0001621C 3F01                       		move.w	d1,-(sp)
0001621E 3428 000C                  		move.w	$C(a0),d2
00016222 3628 0008                  		move.w	8(a0),d3
00016226 7000                       		moveq	#0,d0
00016228 1028 0016                  		move.b	$16(a0),d0
0001622C 4880                       		ext.w	d0
0001622E 9440                       		sub.w	d0,d2
00016230 0A42 000F                  		eori.w	#$F,d2
00016234 1028 0017                  		move.b	$17(a0),d0
00016238 4880                       		ext.w	d0
0001623A 9640                       		sub.w	d0,d3
0001623C 49F8 F76A                  		lea	($FFFFF76A).w,a4
00016240 367C FFF0                  		movea.w	#-$10,a3
00016244 3C3C 1000                  		move.w	#$1000,d6
00016248 7A0D                       		moveq	#$D,d5
0001624A 6100 0000                  		bsr.w	FindFloor
0001624E 301F                       		move.w	(sp)+,d0
00016250 6100 FED2                  		bsr.w	Sonic_Angle
00016254 4A41                       		tst.w	d1
00016256 6700                       		beq.s	locret_14892
00016258 6A00                       		bpl.s	loc_14894
0001625A 0C41 FFF2                  		cmpi.w	#-$E,d1
0001625E 6D00 FE5A                  		blt.w	locret_146E6
00016262 9368 000C                  		sub.w	d1,$C(a0)
00016266                            
00016266                            locret_14892:
00016266 4E75                       		rts	
00016268                            ; ===========================================================================
00016268                            
00016268                            loc_14894:
00016268 0C41 000E                  		cmpi.w	#$E,d1
0001626C 6E00                       		bgt.s	loc_148A0
0001626E                            
0001626E                            loc_1489A:
0001626E 9368 000C                  		sub.w	d1,$C(a0)
00016272 4E75                       		rts	
00016274                            ; ===========================================================================
00016274                            
00016274                            loc_148A0:
00016274 4A28 0038                  		tst.b	$38(a0)
00016278 66F4                       		bne.s	loc_1489A
0001627A 08E8 0001 0022             		bset	#1,$22(a0)
00016280 08A8 0005 0022             		bclr	#5,$22(a0)
00016286 117C 0001 001D             		move.b	#1,$1D(a0)
0001628C 4E75                       		rts	
0001628E                            ; End of function Sonic_WalkCeiling
0001628E                            
0001628E                            ; ---------------------------------------------------------------------------
0001628E                            ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his left
0001628E                            ; ---------------------------------------------------------------------------
0001628E                            
0001628E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001628E                            
0001628E                            
0001628E                            Sonic_WalkVertL:			; XREF: Sonic_AnglePos
0001628E 3428 000C                  		move.w	$C(a0),d2
00016292 3628 0008                  		move.w	8(a0),d3
00016296 7000                       		moveq	#0,d0
00016298 1028 0017                  		move.b	$17(a0),d0
0001629C 4880                       		ext.w	d0
0001629E 9440                       		sub.w	d0,d2
000162A0 1028 0016                  		move.b	$16(a0),d0
000162A4 4880                       		ext.w	d0
000162A6 9640                       		sub.w	d0,d3
000162A8 0A43 000F                  		eori.w	#$F,d3
000162AC 49F8 F768                  		lea	($FFFFF768).w,a4
000162B0 367C FFF0                  		movea.w	#-$10,a3
000162B4 3C3C 0800                  		move.w	#$800,d6
000162B8 7A0D                       		moveq	#$D,d5
000162BA 6100 0000                  		bsr.w	FindWall
000162BE 3F01                       		move.w	d1,-(sp)
000162C0 3428 000C                  		move.w	$C(a0),d2
000162C4 3628 0008                  		move.w	8(a0),d3
000162C8 7000                       		moveq	#0,d0
000162CA 1028 0017                  		move.b	$17(a0),d0
000162CE 4880                       		ext.w	d0
000162D0 D440                       		add.w	d0,d2
000162D2 1028 0016                  		move.b	$16(a0),d0
000162D6 4880                       		ext.w	d0
000162D8 9640                       		sub.w	d0,d3
000162DA 0A43 000F                  		eori.w	#$F,d3
000162DE 49F8 F76A                  		lea	($FFFFF76A).w,a4
000162E2 367C FFF0                  		movea.w	#-$10,a3
000162E6 3C3C 0800                  		move.w	#$800,d6
000162EA 7A0D                       		moveq	#$D,d5
000162EC 6100 0000                  		bsr.w	FindWall
000162F0 301F                       		move.w	(sp)+,d0
000162F2 6100 FE30                  		bsr.w	Sonic_Angle
000162F6 4A41                       		tst.w	d1
000162F8 6700                       		beq.s	locret_14934
000162FA 6A00                       		bpl.s	loc_14936
000162FC 0C41 FFF2                  		cmpi.w	#-$E,d1
00016300 6D00 FDDC                  		blt.w	locret_1470A
00016304 9368 0008                  		sub.w	d1,8(a0)
00016308                            
00016308                            locret_14934:
00016308 4E75                       		rts	
0001630A                            ; ===========================================================================
0001630A                            
0001630A                            loc_14936:
0001630A 0C41 000E                  		cmpi.w	#$E,d1
0001630E 6E00                       		bgt.s	loc_14942
00016310                            
00016310                            loc_1493C:
00016310 9368 0008                  		sub.w	d1,8(a0)
00016314 4E75                       		rts	
00016316                            ; ===========================================================================
00016316                            
00016316                            loc_14942:
00016316 4A28 0038                  		tst.b	$38(a0)
0001631A 66F4                       		bne.s	loc_1493C
0001631C 08E8 0001 0022             		bset	#1,$22(a0)
00016322 08A8 0005 0022             		bclr	#5,$22(a0)
00016328 117C 0001 001D             		move.b	#1,$1D(a0)
0001632E 4E75                       		rts	
00016330                            ; End of function Sonic_WalkVertL
00016330                            
00016330                            ; ---------------------------------------------------------------------------
00016330                            ; Subroutine to	find which tile	the object is standing on
00016330                            ; ---------------------------------------------------------------------------
00016330                            
00016330                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016330                            
00016330                            
00016330                            Floor_ChkTile:				; XREF: FindFloor; et al
00016330 3002                       		move.w	d2,d0
00016332 E248                       		lsr.w	#1,d0
00016334 0240 0380                  		andi.w	#$380,d0
00016338 3203                       		move.w	d3,d1
0001633A E049                       		lsr.w	#8,d1
0001633C 0241 007F                  		andi.w	#$7F,d1
00016340 D041                       		add.w	d1,d0
00016342 72FF                       		moveq	#-1,d1
00016344 43F8 A400                  		lea	($FFFFA400).w,a1
00016348 1231 0000                  		move.b	(a1,d0.w),d1
0001634C 6700                       		beq.s	loc_14996
0001634E 6B00                       		bmi.s	loc_1499A
00016350 5301                       		subq.b	#1,d1
00016352 4881                       		ext.w	d1
00016354 EE59                       		ror.w	#7,d1
00016356 3002                       		move.w	d2,d0
00016358 D040                       		add.w	d0,d0
0001635A 0240 01E0                  		andi.w	#$1E0,d0
0001635E D240                       		add.w	d0,d1
00016360 3003                       		move.w	d3,d0
00016362 E648                       		lsr.w	#3,d0
00016364 0240 001E                  		andi.w	#$1E,d0
00016368 D240                       		add.w	d0,d1
0001636A                            
0001636A                            loc_14996:
0001636A 2241                       		movea.l	d1,a1
0001636C 4E75                       		rts	
0001636E                            ; ===========================================================================
0001636E                            
0001636E                            loc_1499A:
0001636E 0241 007F                  		andi.w	#$7F,d1
00016372 0828 0006 0001             		btst	#6,1(a0)
00016378 6700                       		beq.s	loc_149B2
0001637A 5241                       		addq.w	#1,d1
0001637C 0C41 0029                  		cmpi.w	#$29,d1
00016380 6600                       		bne.s	loc_149B2
00016382 323C 0051                  		move.w	#$51,d1
00016386                            
00016386                            loc_149B2:
00016386 5301                       		subq.b	#1,d1
00016388 EE59                       		ror.w	#7,d1
0001638A 3002                       		move.w	d2,d0
0001638C D040                       		add.w	d0,d0
0001638E 0240 01E0                  		andi.w	#$1E0,d0
00016392 D240                       		add.w	d0,d1
00016394 3003                       		move.w	d3,d0
00016396 E648                       		lsr.w	#3,d0
00016398 0240 001E                  		andi.w	#$1E,d0
0001639C D240                       		add.w	d0,d1
0001639E 2241                       		movea.l	d1,a1
000163A0 4E75                       		rts	
000163A2                            ; End of function Floor_ChkTile
000163A2                            
000163A2                            
000163A2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000163A2                            
000163A2                            
000163A2                            FindFloor:				; XREF: Sonic_AnglePos; et al
000163A2 618C                       		bsr.s	Floor_ChkTile
000163A4 3011                       		move.w	(a1),d0
000163A6 3800                       		move.w	d0,d4
000163A8 0240 07FF                  		andi.w	#$7FF,d0
000163AC 6700                       		beq.s	loc_149DE
000163AE 0B04                       		btst	d5,d4
000163B0 6600                       		bne.s	loc_149EC
000163B2                            
000163B2                            loc_149DE:
000163B2 D44B                       		add.w	a3,d2
000163B4 6100 0000                  		bsr.w	FindFloor2
000163B8 944B                       		sub.w	a3,d2
000163BA 0641 0010                  		addi.w	#$10,d1
000163BE 4E75                       		rts	
000163C0                            ; ===========================================================================
000163C0                            
000163C0                            loc_149EC:
000163C0 2478 F796                  		movea.l	($FFFFF796).w,a2 ; load	collision index
000163C4 1032 0000                  		move.b	(a2,d0.w),d0
000163C8 0240 00FF                  		andi.w	#$FF,d0
000163CC 67E4                       		beq.s	loc_149DE
000163CE 45F9 0000 0000             		lea	(AngleMap).l,a2
000163D4 18B2 0000                  		move.b	(a2,d0.w),(a4)
000163D8 E948                       		lsl.w	#4,d0
000163DA 3203                       		move.w	d3,d1
000163DC 0804 000B                  		btst	#$B,d4
000163E0 6700                       		beq.s	loc_14A12
000163E2 4641                       		not.w	d1
000163E4 4414                       		neg.b	(a4)
000163E6                            
000163E6                            loc_14A12:
000163E6 0804 000C                  		btst	#$C,d4
000163EA 6700                       		beq.s	loc_14A22
000163EC 0614 0040                  		addi.b	#$40,(a4)
000163F0 4414                       		neg.b	(a4)
000163F2 0414 0040                  		subi.b	#$40,(a4)
000163F6                            
000163F6                            loc_14A22:
000163F6 0241 000F                  		andi.w	#$F,d1
000163FA D240                       		add.w	d0,d1
000163FC 45F9 0000 0000             		lea	(CollArray1).l,a2
00016402 1032 1000                  		move.b	(a2,d1.w),d0
00016406 4880                       		ext.w	d0
00016408 BD44                       		eor.w	d6,d4
0001640A 0804 000C                  		btst	#$C,d4
0001640E 6700                       		beq.s	loc_14A3E
00016410 4440                       		neg.w	d0
00016412                            
00016412                            loc_14A3E:
00016412 4A40                       		tst.w	d0
00016414 679C                       		beq.s	loc_149DE
00016416 6B00                       		bmi.s	loc_14A5A
00016418 0C00 0010                  		cmpi.b	#$10,d0
0001641C 6700                       		beq.s	loc_14A66
0001641E 3202                       		move.w	d2,d1
00016420 0241 000F                  		andi.w	#$F,d1
00016424 D041                       		add.w	d1,d0
00016426 323C 000F                  		move.w	#$F,d1
0001642A 9240                       		sub.w	d0,d1
0001642C 4E75                       		rts	
0001642E                            ; ===========================================================================
0001642E                            
0001642E                            loc_14A5A:
0001642E 3202                       		move.w	d2,d1
00016430 0241 000F                  		andi.w	#$F,d1
00016434 D041                       		add.w	d1,d0
00016436 6A00 FF7A                  		bpl.w	loc_149DE
0001643A                            
0001643A                            loc_14A66:
0001643A 944B                       		sub.w	a3,d2
0001643C 6100 0000                  		bsr.w	FindFloor2
00016440 D44B                       		add.w	a3,d2
00016442 0441 0010                  		subi.w	#$10,d1
00016446 4E75                       		rts	
00016448                            ; End of function FindFloor
00016448                            
00016448                            
00016448                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016448                            
00016448                            
00016448                            FindFloor2:				; XREF: FindFloor
00016448 6100 FEE6                  		bsr.w	Floor_ChkTile
0001644C 3011                       		move.w	(a1),d0
0001644E 3800                       		move.w	d0,d4
00016450 0240 07FF                  		andi.w	#$7FF,d0
00016454 6700                       		beq.s	loc_14A86
00016456 0B04                       		btst	d5,d4
00016458 6600                       		bne.s	loc_14A94
0001645A                            
0001645A                            loc_14A86:
0001645A 323C 000F                  		move.w	#$F,d1
0001645E 3002                       		move.w	d2,d0
00016460 0240 000F                  		andi.w	#$F,d0
00016464 9240                       		sub.w	d0,d1
00016466 4E75                       		rts	
00016468                            ; ===========================================================================
00016468                            
00016468                            loc_14A94:
00016468 2478 F796                  		movea.l	($FFFFF796).w,a2
0001646C 1032 0000                  		move.b	(a2,d0.w),d0
00016470 0240 00FF                  		andi.w	#$FF,d0
00016474 67E4                       		beq.s	loc_14A86
00016476 45F9 0000 0000             		lea	(AngleMap).l,a2
0001647C 18B2 0000                  		move.b	(a2,d0.w),(a4)
00016480 E948                       		lsl.w	#4,d0
00016482 3203                       		move.w	d3,d1
00016484 0804 000B                  		btst	#$B,d4
00016488 6700                       		beq.s	loc_14ABA
0001648A 4641                       		not.w	d1
0001648C 4414                       		neg.b	(a4)
0001648E                            
0001648E                            loc_14ABA:
0001648E 0804 000C                  		btst	#$C,d4
00016492 6700                       		beq.s	loc_14ACA
00016494 0614 0040                  		addi.b	#$40,(a4)
00016498 4414                       		neg.b	(a4)
0001649A 0414 0040                  		subi.b	#$40,(a4)
0001649E                            
0001649E                            loc_14ACA:
0001649E 0241 000F                  		andi.w	#$F,d1
000164A2 D240                       		add.w	d0,d1
000164A4 45F9 0000 0000             		lea	(CollArray1).l,a2
000164AA 1032 1000                  		move.b	(a2,d1.w),d0
000164AE 4880                       		ext.w	d0
000164B0 BD44                       		eor.w	d6,d4
000164B2 0804 000C                  		btst	#$C,d4
000164B6 6700                       		beq.s	loc_14AE6
000164B8 4440                       		neg.w	d0
000164BA                            
000164BA                            loc_14AE6:
000164BA 4A40                       		tst.w	d0
000164BC 679C                       		beq.s	loc_14A86
000164BE 6B00                       		bmi.s	loc_14AFC
000164C0 3202                       		move.w	d2,d1
000164C2 0241 000F                  		andi.w	#$F,d1
000164C6 D041                       		add.w	d1,d0
000164C8 323C 000F                  		move.w	#$F,d1
000164CC 9240                       		sub.w	d0,d1
000164CE 4E75                       		rts	
000164D0                            ; ===========================================================================
000164D0                            
000164D0                            loc_14AFC:
000164D0 3202                       		move.w	d2,d1
000164D2 0241 000F                  		andi.w	#$F,d1
000164D6 D041                       		add.w	d1,d0
000164D8 6A00 FF80                  		bpl.w	loc_14A86
000164DC 4641                       		not.w	d1
000164DE 4E75                       		rts	
000164E0                            ; End of function FindFloor2
000164E0                            
000164E0                            
000164E0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000164E0                            
000164E0                            
000164E0                            FindWall:				; XREF: Sonic_WalkVertR; et al
000164E0 6100 FE4E                  		bsr.w	Floor_ChkTile
000164E4 3011                       		move.w	(a1),d0
000164E6 3800                       		move.w	d0,d4
000164E8 0240 07FF                  		andi.w	#$7FF,d0
000164EC 6700                       		beq.s	loc_14B1E
000164EE 0B04                       		btst	d5,d4
000164F0 6600                       		bne.s	loc_14B2C
000164F2                            
000164F2                            loc_14B1E:
000164F2 D64B                       		add.w	a3,d3
000164F4 6100 0000                  		bsr.w	FindWall2
000164F8 964B                       		sub.w	a3,d3
000164FA 0641 0010                  		addi.w	#$10,d1
000164FE 4E75                       		rts	
00016500                            ; ===========================================================================
00016500                            
00016500                            loc_14B2C:
00016500 2478 F796                  		movea.l	($FFFFF796).w,a2
00016504 1032 0000                  		move.b	(a2,d0.w),d0
00016508 0240 00FF                  		andi.w	#$FF,d0
0001650C 67E4                       		beq.s	loc_14B1E
0001650E 45F9 0000 0000             		lea	(AngleMap).l,a2
00016514 18B2 0000                  		move.b	(a2,d0.w),(a4)
00016518 E948                       		lsl.w	#4,d0
0001651A 3202                       		move.w	d2,d1
0001651C 0804 000C                  		btst	#$C,d4
00016520 6700                       		beq.s	loc_14B5A
00016522 4641                       		not.w	d1
00016524 0614 0040                  		addi.b	#$40,(a4)
00016528 4414                       		neg.b	(a4)
0001652A 0414 0040                  		subi.b	#$40,(a4)
0001652E                            
0001652E                            loc_14B5A:
0001652E 0804 000B                  		btst	#$B,d4
00016532 6700                       		beq.s	loc_14B62
00016534 4414                       		neg.b	(a4)
00016536                            
00016536                            loc_14B62:
00016536 0241 000F                  		andi.w	#$F,d1
0001653A D240                       		add.w	d0,d1
0001653C 45F9 0000 0000             		lea	(CollArray2).l,a2
00016542 1032 1000                  		move.b	(a2,d1.w),d0
00016546 4880                       		ext.w	d0
00016548 BD44                       		eor.w	d6,d4
0001654A 0804 000B                  		btst	#$B,d4
0001654E 6700                       		beq.s	loc_14B7E
00016550 4440                       		neg.w	d0
00016552                            
00016552                            loc_14B7E:
00016552 4A40                       		tst.w	d0
00016554 679C                       		beq.s	loc_14B1E
00016556 6B00                       		bmi.s	loc_14B9A
00016558 0C00 0010                  		cmpi.b	#$10,d0
0001655C 6700                       		beq.s	loc_14BA6
0001655E 3203                       		move.w	d3,d1
00016560 0241 000F                  		andi.w	#$F,d1
00016564 D041                       		add.w	d1,d0
00016566 323C 000F                  		move.w	#$F,d1
0001656A 9240                       		sub.w	d0,d1
0001656C 4E75                       		rts	
0001656E                            ; ===========================================================================
0001656E                            
0001656E                            loc_14B9A:
0001656E 3203                       		move.w	d3,d1
00016570 0241 000F                  		andi.w	#$F,d1
00016574 D041                       		add.w	d1,d0
00016576 6A00 FF7A                  		bpl.w	loc_14B1E
0001657A                            
0001657A                            loc_14BA6:
0001657A 964B                       		sub.w	a3,d3
0001657C 6100 0000                  		bsr.w	FindWall2
00016580 D64B                       		add.w	a3,d3
00016582 0441 0010                  		subi.w	#$10,d1
00016586 4E75                       		rts	
00016588                            ; End of function FindWall
00016588                            
00016588                            
00016588                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016588                            
00016588                            
00016588                            FindWall2:				; XREF: FindWall
00016588 6100 FDA6                  		bsr.w	Floor_ChkTile
0001658C 3011                       		move.w	(a1),d0
0001658E 3800                       		move.w	d0,d4
00016590 0240 07FF                  		andi.w	#$7FF,d0
00016594 6700                       		beq.s	loc_14BC6
00016596 0B04                       		btst	d5,d4
00016598 6600                       		bne.s	loc_14BD4
0001659A                            
0001659A                            loc_14BC6:
0001659A 323C 000F                  		move.w	#$F,d1
0001659E 3003                       		move.w	d3,d0
000165A0 0240 000F                  		andi.w	#$F,d0
000165A4 9240                       		sub.w	d0,d1
000165A6 4E75                       		rts	
000165A8                            ; ===========================================================================
000165A8                            
000165A8                            loc_14BD4:
000165A8 2478 F796                  		movea.l	($FFFFF796).w,a2
000165AC 1032 0000                  		move.b	(a2,d0.w),d0
000165B0 0240 00FF                  		andi.w	#$FF,d0
000165B4 67E4                       		beq.s	loc_14BC6
000165B6 45F9 0000 0000             		lea	(AngleMap).l,a2
000165BC 18B2 0000                  		move.b	(a2,d0.w),(a4)
000165C0 E948                       		lsl.w	#4,d0
000165C2 3202                       		move.w	d2,d1
000165C4 0804 000C                  		btst	#$C,d4
000165C8 6700                       		beq.s	loc_14C02
000165CA 4641                       		not.w	d1
000165CC 0614 0040                  		addi.b	#$40,(a4)
000165D0 4414                       		neg.b	(a4)
000165D2 0414 0040                  		subi.b	#$40,(a4)
000165D6                            
000165D6                            loc_14C02:
000165D6 0804 000B                  		btst	#$B,d4
000165DA 6700                       		beq.s	loc_14C0A
000165DC 4414                       		neg.b	(a4)
000165DE                            
000165DE                            loc_14C0A:
000165DE 0241 000F                  		andi.w	#$F,d1
000165E2 D240                       		add.w	d0,d1
000165E4 45F9 0000 0000             		lea	(CollArray2).l,a2
000165EA 1032 1000                  		move.b	(a2,d1.w),d0
000165EE 4880                       		ext.w	d0
000165F0 BD44                       		eor.w	d6,d4
000165F2 0804 000B                  		btst	#$B,d4
000165F6 6700                       		beq.s	loc_14C26
000165F8 4440                       		neg.w	d0
000165FA                            
000165FA                            loc_14C26:
000165FA 4A40                       		tst.w	d0
000165FC 679C                       		beq.s	loc_14BC6
000165FE 6B00                       		bmi.s	loc_14C3C
00016600 3203                       		move.w	d3,d1
00016602 0241 000F                  		andi.w	#$F,d1
00016606 D041                       		add.w	d1,d0
00016608 323C 000F                  		move.w	#$F,d1
0001660C 9240                       		sub.w	d0,d1
0001660E 4E75                       		rts	
00016610                            ; ===========================================================================
00016610                            
00016610                            loc_14C3C:
00016610 3203                       		move.w	d3,d1
00016612 0241 000F                  		andi.w	#$F,d1
00016616 D041                       		add.w	d1,d0
00016618 6A00 FF80                  		bpl.w	loc_14BC6
0001661C 4641                       		not.w	d1
0001661E 4E75                       		rts	
00016620                            ; End of function FindWall2
00016620                            
00016620                            ; ---------------------------------------------------------------------------
00016620                            ; Unused floor/wall subroutine - logs something	to do with collision
00016620                            ; ---------------------------------------------------------------------------
00016620                            
00016620                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016620                            
00016620                            
00016620                            FloorLog_Unk:				; XREF: Level
00016620 4E75                       		rts	
00016622                            
00016622 43F9 0000 0000             		lea	(CollArray1).l,a1
00016628 45F9 0000 0000             		lea	(CollArray1).l,a2
0001662E 363C 00FF                  		move.w	#$FF,d3
00016632                            
00016632                            loc_14C5E:
00016632 7A10                       		moveq	#$10,d5
00016634 343C 000F                  		move.w	#$F,d2
00016638                            
00016638                            loc_14C64:
00016638 7800                       		moveq	#0,d4
0001663A 323C 000F                  		move.w	#$F,d1
0001663E                            
0001663E                            loc_14C6A:
0001663E 3019                       		move.w	(a1)+,d0
00016640 EAA8                       		lsr.l	d5,d0
00016642 D944                       		addx.w	d4,d4
00016644 51C9 FFF8                  		dbf	d1,loc_14C6A
00016648                            
00016648 34C4                       		move.w	d4,(a2)+
0001664A 92FC 0020                  		suba.w	#$20,a1
0001664E 5345                       		subq.w	#1,d5
00016650 51CA FFE6                  		dbf	d2,loc_14C64
00016654                            
00016654 D2FC 0020                  		adda.w	#$20,a1
00016658 51CB FFD8                  		dbf	d3,loc_14C5E
0001665C                            
0001665C 43F9 0000 0000             		lea	(CollArray1).l,a1
00016662 45F9 0000 0000             		lea	(CollArray2).l,a2
00016668 6100                       		bsr.s	FloorLog_Unk2
0001666A 43F9 0000 0000             		lea	(CollArray1).l,a1
00016670 45F9 0000 0000             		lea	(CollArray1).l,a2
00016676                            
00016676                            ; End of function FloorLog_Unk
00016676                            
00016676                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016676                            
00016676                            
00016676                            FloorLog_Unk2:				; XREF: FloorLog_Unk
00016676 363C 0FFF                  		move.w	#$FFF,d3
0001667A                            
0001667A                            loc_14CA6:
0001667A 7400                       		moveq	#0,d2
0001667C 323C 000F                  		move.w	#$F,d1
00016680 3019                       		move.w	(a1)+,d0
00016682 6700                       		beq.s	loc_14CD4
00016684 6B00                       		bmi.s	loc_14CBE
00016686                            
00016686                            loc_14CB2:
00016686 E248                       		lsr.w	#1,d0
00016688 6400                       		bcc.s	loc_14CB8
0001668A 5202                       		addq.b	#1,d2
0001668C                            
0001668C                            loc_14CB8:
0001668C 51C9 FFF8                  		dbf	d1,loc_14CB2
00016690                            
00016690 6000                       		bra.s	loc_14CD6
00016692                            ; ===========================================================================
00016692                            
00016692                            loc_14CBE:
00016692 0C40 FFFF                  		cmpi.w	#-1,d0
00016696 6700                       		beq.s	loc_14CD0
00016698                            
00016698                            loc_14CC4:
00016698 E348                       		lsl.w	#1,d0
0001669A 6400                       		bcc.s	loc_14CCA
0001669C 5302                       		subq.b	#1,d2
0001669E                            
0001669E                            loc_14CCA:
0001669E 51C9 FFF8                  		dbf	d1,loc_14CC4
000166A2                            
000166A2 6000                       		bra.s	loc_14CD6
000166A4                            ; ===========================================================================
000166A4                            
000166A4                            loc_14CD0:
000166A4 303C 0010                  		move.w	#$10,d0
000166A8                            
000166A8                            loc_14CD4:
000166A8 3400                       		move.w	d0,d2
000166AA                            
000166AA                            loc_14CD6:
000166AA 14C2                       		move.b	d2,(a2)+
000166AC 51CB FFCC                  		dbf	d3,loc_14CA6
000166B0                            
000166B0 4E75                       		rts	
000166B2                            
000166B2                            ; End of function FloorLog_Unk2
000166B2                            
000166B2                            
000166B2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000166B2                            
000166B2                            
000166B2                            Sonic_WalkSpeed:			; XREF: Sonic_Move
000166B2 2628 0008                  		move.l	8(a0),d3
000166B6 2428 000C                  		move.l	$C(a0),d2
000166BA 3228 0010                  		move.w	$10(a0),d1
000166BE 48C1                       		ext.l	d1
000166C0 E181                       		asl.l	#8,d1
000166C2 D681                       		add.l	d1,d3
000166C4 3228 0012                  		move.w	$12(a0),d1
000166C8 48C1                       		ext.l	d1
000166CA E181                       		asl.l	#8,d1
000166CC D481                       		add.l	d1,d2
000166CE 4842                       		swap	d2
000166D0 4843                       		swap	d3
000166D2 11C0 F768                  		move.b	d0,($FFFFF768).w
000166D6 11C0 F76A                  		move.b	d0,($FFFFF76A).w
000166DA 1200                       		move.b	d0,d1
000166DC 0600 0020                  		addi.b	#$20,d0
000166E0 6A00                       		bpl.s	loc_14D1A
000166E2 1001                       		move.b	d1,d0
000166E4 6A00                       		bpl.s	loc_14D14
000166E6 5300                       		subq.b	#1,d0
000166E8                            
000166E8                            loc_14D14:
000166E8 0600 0020                  		addi.b	#$20,d0
000166EC 6000                       		bra.s	loc_14D24
000166EE                            ; ===========================================================================
000166EE                            
000166EE                            loc_14D1A:
000166EE 1001                       		move.b	d1,d0
000166F0 6A00                       		bpl.s	loc_14D20
000166F2 5200                       		addq.b	#1,d0
000166F4                            
000166F4                            loc_14D20:
000166F4 0600 001F                  		addi.b	#$1F,d0
000166F8                            
000166F8                            loc_14D24:
000166F8 0200 00C0                  		andi.b	#$C0,d0
000166FC 6700 0000                  		beq.w	loc_14DF0
00016700 0C00 0080                  		cmpi.b	#$80,d0
00016704 6700 0000                  		beq.w	loc_14F7C
00016708 0201 0038                  		andi.b	#$38,d1
0001670C 6600                       		bne.s	loc_14D3C
0001670E 5042                       		addq.w	#8,d2
00016710                            
00016710                            loc_14D3C:
00016710 0C00 0040                  		cmpi.b	#$40,d0
00016714 6700 0000                  		beq.w	loc_1504A
00016718 6000 0000                  		bra.w	loc_14EBC
0001671C                            
0001671C                            ; End of function Sonic_WalkSpeed
0001671C                            
0001671C                            
0001671C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001671C                            
0001671C                            
0001671C                            sub_14D48:				; XREF: Sonic_Jump
0001671C 11C0 F768                  		move.b	d0,($FFFFF768).w
00016720 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00016724 0600 0020                  		addi.b	#$20,d0
00016728 0200 00C0                  		andi.b	#$C0,d0
0001672C 0C00 0040                  		cmpi.b	#$40,d0
00016730 6700 0000                  		beq.w	loc_14FD6
00016734 0C00 0080                  		cmpi.b	#$80,d0
00016738 6700 0000                  		beq.w	Sonic_DontRunOnWalls
0001673C 0C00 00C0                  		cmpi.b	#$C0,d0
00016740 6700 0000                  		beq.w	sub_14E50
00016744                            
00016744                            ; End of function sub_14D48
00016744                            
00016744                            ; ---------------------------------------------------------------------------
00016744                            ; Subroutine to	make Sonic land	on the floor after jumping
00016744                            ; ---------------------------------------------------------------------------
00016744                            
00016744                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016744                            
00016744                            
00016744                            Sonic_HitFloor:				; XREF: Sonic_Floor
00016744 3428 000C                  		move.w	$C(a0),d2
00016748 3628 0008                  		move.w	8(a0),d3
0001674C 7000                       		moveq	#0,d0
0001674E 1028 0016                  		move.b	$16(a0),d0
00016752 4880                       		ext.w	d0
00016754 D440                       		add.w	d0,d2
00016756 1028 0017                  		move.b	$17(a0),d0
0001675A 4880                       		ext.w	d0
0001675C D640                       		add.w	d0,d3
0001675E 49F8 F768                  		lea	($FFFFF768).w,a4
00016762 367C 0010                  		movea.w	#$10,a3
00016766 3C3C 0000                  		move.w	#0,d6
0001676A 7A0D                       		moveq	#$D,d5
0001676C 6100 FC34                  		bsr.w	FindFloor
00016770 3F01                       		move.w	d1,-(sp)
00016772 3428 000C                  		move.w	$C(a0),d2
00016776 3628 0008                  		move.w	8(a0),d3
0001677A 7000                       		moveq	#0,d0
0001677C 1028 0016                  		move.b	$16(a0),d0
00016780 4880                       		ext.w	d0
00016782 D440                       		add.w	d0,d2
00016784 1028 0017                  		move.b	$17(a0),d0
00016788 4880                       		ext.w	d0
0001678A 9640                       		sub.w	d0,d3
0001678C 49F8 F76A                  		lea	($FFFFF76A).w,a4
00016790 367C 0010                  		movea.w	#$10,a3
00016794 3C3C 0000                  		move.w	#0,d6
00016798 7A0D                       		moveq	#$D,d5
0001679A 6100 FC06                  		bsr.w	FindFloor
0001679E 301F                       		move.w	(sp)+,d0
000167A0 143C 0000                  		move.b	#0,d2
000167A4                            
000167A4                            loc_14DD0:
000167A4 1638 F76A                  		move.b	($FFFFF76A).w,d3
000167A8 B240                       		cmp.w	d0,d1
000167AA 6F00                       		ble.s	loc_14DDE
000167AC 1638 F768                  		move.b	($FFFFF768).w,d3
000167B0 C141                       		exg	d0,d1
000167B2                            
000167B2                            loc_14DDE:
000167B2 0803 0000                  		btst	#0,d3
000167B6 6700                       		beq.s	locret_14DE6
000167B8 1602                       		move.b	d2,d3
000167BA                            
000167BA                            locret_14DE6:
000167BA 4E75                       		rts	
000167BC                            
000167BC                            ; End of function Sonic_HitFloor
000167BC                            
000167BC                            ; ===========================================================================
000167BC 3428 000C                  		move.w	$C(a0),d2
000167C0 3628 0008                  		move.w	8(a0),d3
000167C4                            
000167C4                            loc_14DF0:				; XREF: Sonic_WalkSpeed
000167C4 0642 000A                  		addi.w	#$A,d2
000167C8 49F8 F768                  		lea	($FFFFF768).w,a4
000167CC 367C 0010                  		movea.w	#$10,a3
000167D0 3C3C 0000                  		move.w	#0,d6
000167D4 7A0E                       		moveq	#$E,d5
000167D6 6100 FBCA                  		bsr.w	FindFloor
000167DA 143C 0000                  		move.b	#0,d2
000167DE                            
000167DE                            loc_14E0A:				; XREF: sub_14EB4
000167DE 1638 F768                  		move.b	($FFFFF768).w,d3
000167E2 0803 0000                  		btst	#0,d3
000167E6 6700                       		beq.s	locret_14E16
000167E8 1602                       		move.b	d2,d3
000167EA                            
000167EA                            locret_14E16:
000167EA 4E75                       		rts	
000167EC                            
000167EC                            ; ---------------------------------------------------------------------------
000167EC                            ; Subroutine allowing objects to interact with the floor
000167EC                            ; ---------------------------------------------------------------------------
000167EC                            
000167EC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000167EC                            
000167EC                            
000167EC                            ObjHitFloor:
000167EC 3628 0008                  		move.w	8(a0),d3
000167F0                            
000167F0                            ; End of function ObjHitFloor
000167F0                            
000167F0                            
000167F0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000167F0                            
000167F0                            
000167F0                            ObjHitFloor2:
000167F0 3428 000C                  		move.w	$C(a0),d2
000167F4 7000                       		moveq	#0,d0
000167F6 1028 0016                  		move.b	$16(a0),d0
000167FA 4880                       		ext.w	d0
000167FC D440                       		add.w	d0,d2
000167FE 49F8 F768                  		lea	($FFFFF768).w,a4
00016802 18BC 0000                  		move.b	#0,(a4)
00016806 367C 0010                  		movea.w	#$10,a3
0001680A 3C3C 0000                  		move.w	#0,d6
0001680E 7A0D                       		moveq	#$D,d5
00016810 6100 FB90                  		bsr.w	FindFloor
00016814 1638 F768                  		move.b	($FFFFF768).w,d3
00016818 0803 0000                  		btst	#0,d3
0001681C 6700                       		beq.s	locret_14E4E
0001681E 163C 0000                  		move.b	#0,d3
00016822                            
00016822                            locret_14E4E:
00016822 4E75                       		rts	
00016824                            ; End of function ObjHitFloor2
00016824                            
00016824                            
00016824                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016824                            
00016824                            
00016824                            sub_14E50:				; XREF: sub_14D48
00016824 3428 000C                  		move.w	$C(a0),d2
00016828 3628 0008                  		move.w	8(a0),d3
0001682C 7000                       		moveq	#0,d0
0001682E 1028 0017                  		move.b	$17(a0),d0
00016832 4880                       		ext.w	d0
00016834 9440                       		sub.w	d0,d2
00016836 1028 0016                  		move.b	$16(a0),d0
0001683A 4880                       		ext.w	d0
0001683C D640                       		add.w	d0,d3
0001683E 49F8 F768                  		lea	($FFFFF768).w,a4
00016842 367C 0010                  		movea.w	#$10,a3
00016846 3C3C 0000                  		move.w	#0,d6
0001684A 7A0E                       		moveq	#$E,d5
0001684C 6100 FC92                  		bsr.w	FindWall
00016850 3F01                       		move.w	d1,-(sp)
00016852 3428 000C                  		move.w	$C(a0),d2
00016856 3628 0008                  		move.w	8(a0),d3
0001685A 7000                       		moveq	#0,d0
0001685C 1028 0017                  		move.b	$17(a0),d0
00016860 4880                       		ext.w	d0
00016862 D440                       		add.w	d0,d2
00016864 1028 0016                  		move.b	$16(a0),d0
00016868 4880                       		ext.w	d0
0001686A D640                       		add.w	d0,d3
0001686C 49F8 F76A                  		lea	($FFFFF76A).w,a4
00016870 367C 0010                  		movea.w	#$10,a3
00016874 3C3C 0000                  		move.w	#0,d6
00016878 7A0E                       		moveq	#$E,d5
0001687A 6100 FC64                  		bsr.w	FindWall
0001687E 301F                       		move.w	(sp)+,d0
00016880 143C 00C0                  		move.b	#-$40,d2
00016884 6000 FF1E                  		bra.w	loc_14DD0
00016888                            
00016888                            ; End of function sub_14E50
00016888                            
00016888                            
00016888                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016888                            
00016888                            
00016888                            sub_14EB4:				; XREF: Sonic_Floor
00016888 3428 000C                  		move.w	$C(a0),d2
0001688C 3628 0008                  		move.w	8(a0),d3
00016890                            
00016890                            loc_14EBC:
00016890 0643 000A                  		addi.w	#$A,d3
00016894 49F8 F768                  		lea	($FFFFF768).w,a4
00016898 367C 0010                  		movea.w	#$10,a3
0001689C 3C3C 0000                  		move.w	#0,d6
000168A0 7A0E                       		moveq	#$E,d5
000168A2 6100 FC3C                  		bsr.w	FindWall
000168A6 143C 00C0                  		move.b	#-$40,d2
000168AA 6000 FF32                  		bra.w	loc_14E0A
000168AE                            
000168AE                            ; End of function sub_14EB4
000168AE                            
000168AE                            ; ---------------------------------------------------------------------------
000168AE                            ; Subroutine to	detect when an object hits a wall to its right
000168AE                            ; ---------------------------------------------------------------------------
000168AE                            
000168AE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000168AE                            
000168AE                            
000168AE                            ObjHitWallRight:
000168AE D668 0008                  		add.w	8(a0),d3
000168B2 3428 000C                  		move.w	$C(a0),d2
000168B6 49F8 F768                  		lea	($FFFFF768).w,a4
000168BA 18BC 0000                  		move.b	#0,(a4)
000168BE 367C 0010                  		movea.w	#$10,a3
000168C2 3C3C 0000                  		move.w	#0,d6
000168C6 7A0E                       		moveq	#$E,d5
000168C8 6100 FC16                  		bsr.w	FindWall
000168CC 1638 F768                  		move.b	($FFFFF768).w,d3
000168D0 0803 0000                  		btst	#0,d3
000168D4 6700                       		beq.s	locret_14F06
000168D6 163C 00C0                  		move.b	#-$40,d3
000168DA                            
000168DA                            locret_14F06:
000168DA 4E75                       		rts	
000168DC                            
000168DC                            ; End of function ObjHitWallRight
000168DC                            
000168DC                            ; ---------------------------------------------------------------------------
000168DC                            ; Subroutine preventing	Sonic from running on walls and	ceilings when he
000168DC                            ; touches them
000168DC                            ; ---------------------------------------------------------------------------
000168DC                            
000168DC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000168DC                            
000168DC                            
000168DC                            Sonic_DontRunOnWalls:			; XREF: Sonic_Floor; et al
000168DC 3428 000C                  		move.w	$C(a0),d2
000168E0 3628 0008                  		move.w	8(a0),d3
000168E4 7000                       		moveq	#0,d0
000168E6 1028 0016                  		move.b	$16(a0),d0
000168EA 4880                       		ext.w	d0
000168EC 9440                       		sub.w	d0,d2
000168EE 0A42 000F                  		eori.w	#$F,d2
000168F2 1028 0017                  		move.b	$17(a0),d0
000168F6 4880                       		ext.w	d0
000168F8 D640                       		add.w	d0,d3
000168FA 49F8 F768                  		lea	($FFFFF768).w,a4
000168FE 367C FFF0                  		movea.w	#-$10,a3
00016902 3C3C 1000                  		move.w	#$1000,d6
00016906 7A0E                       		moveq	#$E,d5
00016908 6100 FA98                  		bsr.w	FindFloor
0001690C 3F01                       		move.w	d1,-(sp)
0001690E 3428 000C                  		move.w	$C(a0),d2
00016912 3628 0008                  		move.w	8(a0),d3
00016916 7000                       		moveq	#0,d0
00016918 1028 0016                  		move.b	$16(a0),d0
0001691C 4880                       		ext.w	d0
0001691E 9440                       		sub.w	d0,d2
00016920 0A42 000F                  		eori.w	#$F,d2
00016924 1028 0017                  		move.b	$17(a0),d0
00016928 4880                       		ext.w	d0
0001692A 9640                       		sub.w	d0,d3
0001692C 49F8 F76A                  		lea	($FFFFF76A).w,a4
00016930 367C FFF0                  		movea.w	#-$10,a3
00016934 3C3C 1000                  		move.w	#$1000,d6
00016938 7A0E                       		moveq	#$E,d5
0001693A 6100 FA66                  		bsr.w	FindFloor
0001693E 301F                       		move.w	(sp)+,d0
00016940 143C 0080                  		move.b	#-$80,d2
00016944 6000 FE5E                  		bra.w	loc_14DD0
00016948                            ; End of function Sonic_DontRunOnWalls
00016948                            
00016948                            ; ===========================================================================
00016948 3428 000C                  		move.w	$C(a0),d2
0001694C 3628 0008                  		move.w	8(a0),d3
00016950                            
00016950                            loc_14F7C:
00016950 0442 000A                  		subi.w	#$A,d2
00016954 0A42 000F                  		eori.w	#$F,d2
00016958 49F8 F768                  		lea	($FFFFF768).w,a4
0001695C 367C FFF0                  		movea.w	#-$10,a3
00016960 3C3C 1000                  		move.w	#$1000,d6
00016964 7A0E                       		moveq	#$E,d5
00016966 6100 FA3A                  		bsr.w	FindFloor
0001696A 143C 0080                  		move.b	#-$80,d2
0001696E 6000 FE6E                  		bra.w	loc_14E0A
00016972                            
00016972                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016972                            
00016972                            
00016972                            ObjHitCeiling:
00016972 3428 000C                  		move.w	$C(a0),d2
00016976 3628 0008                  		move.w	8(a0),d3
0001697A 7000                       		moveq	#0,d0
0001697C 1028 0016                  		move.b	$16(a0),d0
00016980 4880                       		ext.w	d0
00016982 9440                       		sub.w	d0,d2
00016984 0A42 000F                  		eori.w	#$F,d2
00016988 49F8 F768                  		lea	($FFFFF768).w,a4
0001698C 367C FFF0                  		movea.w	#-$10,a3
00016990 3C3C 1000                  		move.w	#$1000,d6
00016994 7A0E                       		moveq	#$E,d5
00016996 6100 FA0A                  		bsr.w	FindFloor
0001699A 1638 F768                  		move.b	($FFFFF768).w,d3
0001699E 0803 0000                  		btst	#0,d3
000169A2 6700                       		beq.s	locret_14FD4
000169A4 163C 0080                  		move.b	#-$80,d3
000169A8                            
000169A8                            locret_14FD4:
000169A8 4E75                       		rts	
000169AA                            ; End of function ObjHitCeiling
000169AA                            
000169AA                            ; ===========================================================================
000169AA                            
000169AA                            loc_14FD6:				; XREF: sub_14D48
000169AA 3428 000C                  		move.w	$C(a0),d2
000169AE 3628 0008                  		move.w	8(a0),d3
000169B2 7000                       		moveq	#0,d0
000169B4 1028 0017                  		move.b	$17(a0),d0
000169B8 4880                       		ext.w	d0
000169BA 9440                       		sub.w	d0,d2
000169BC 1028 0016                  		move.b	$16(a0),d0
000169C0 4880                       		ext.w	d0
000169C2 9640                       		sub.w	d0,d3
000169C4 0A43 000F                  		eori.w	#$F,d3
000169C8 49F8 F768                  		lea	($FFFFF768).w,a4
000169CC 367C FFF0                  		movea.w	#-$10,a3
000169D0 3C3C 0800                  		move.w	#$800,d6
000169D4 7A0E                       		moveq	#$E,d5
000169D6 6100 FB08                  		bsr.w	FindWall
000169DA 3F01                       		move.w	d1,-(sp)
000169DC 3428 000C                  		move.w	$C(a0),d2
000169E0 3628 0008                  		move.w	8(a0),d3
000169E4 7000                       		moveq	#0,d0
000169E6 1028 0017                  		move.b	$17(a0),d0
000169EA 4880                       		ext.w	d0
000169EC D440                       		add.w	d0,d2
000169EE 1028 0016                  		move.b	$16(a0),d0
000169F2 4880                       		ext.w	d0
000169F4 9640                       		sub.w	d0,d3
000169F6 0A43 000F                  		eori.w	#$F,d3
000169FA 49F8 F76A                  		lea	($FFFFF76A).w,a4
000169FE 367C FFF0                  		movea.w	#-$10,a3
00016A02 3C3C 0800                  		move.w	#$800,d6
00016A06 7A0E                       		moveq	#$E,d5
00016A08 6100 FAD6                  		bsr.w	FindWall
00016A0C 301F                       		move.w	(sp)+,d0
00016A0E 143C 0040                  		move.b	#$40,d2
00016A12 6000 FD90                  		bra.w	loc_14DD0
00016A16                            
00016A16                            ; ---------------------------------------------------------------------------
00016A16                            ; Subroutine to	stop Sonic when	he jumps at a wall
00016A16                            ; ---------------------------------------------------------------------------
00016A16                            
00016A16                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016A16                            
00016A16                            
00016A16                            Sonic_HitWall:				; XREF: Sonic_Floor
00016A16 3428 000C                  		move.w	$C(a0),d2
00016A1A 3628 0008                  		move.w	8(a0),d3
00016A1E                            
00016A1E                            loc_1504A:
00016A1E 0443 000A                  		subi.w	#$A,d3
00016A22 0A43 000F                  		eori.w	#$F,d3
00016A26 49F8 F768                  		lea	($FFFFF768).w,a4
00016A2A 367C FFF0                  		movea.w	#-$10,a3
00016A2E 3C3C 0800                  		move.w	#$800,d6
00016A32 7A0E                       		moveq	#$E,d5
00016A34 6100 FAAA                  		bsr.w	FindWall
00016A38 143C 0040                  		move.b	#$40,d2
00016A3C 6000 FDA0                  		bra.w	loc_14E0A
00016A40                            ; End of function Sonic_HitWall
00016A40                            
00016A40                            ; ---------------------------------------------------------------------------
00016A40                            ; Subroutine to	detect when an object hits a wall to its left
00016A40                            ; ---------------------------------------------------------------------------
00016A40                            
00016A40                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016A40                            
00016A40                            
00016A40                            ObjHitWallLeft:
00016A40 D668 0008                  		add.w	8(a0),d3
00016A44 3428 000C                  		move.w	$C(a0),d2
00016A48 49F8 F768                  		lea	($FFFFF768).w,a4
00016A4C 18BC 0000                  		move.b	#0,(a4)
00016A50 367C FFF0                  		movea.w	#-$10,a3
00016A54 3C3C 0800                  		move.w	#$800,d6
00016A58 7A0E                       		moveq	#$E,d5
00016A5A 6100 FA84                  		bsr.w	FindWall
00016A5E 1638 F768                  		move.b	($FFFFF768).w,d3
00016A62 0803 0000                  		btst	#0,d3
00016A66 6700                       		beq.s	locret_15098
00016A68 163C 0040                  		move.b	#$40,d3
00016A6C                            
00016A6C                            locret_15098:
00016A6C 4E75                       		rts	
00016A6E                            ; End of function ObjHitWallLeft
00016A6E                            
00016A6E                            ; ===========================================================================
00016A6E                            ; ---------------------------------------------------------------------------
00016A6E                            ; Object 66 - rotating disc that grabs Sonic (SBZ)
00016A6E                            ; ---------------------------------------------------------------------------
00016A6E                            
00016A6E                            Obj66:					; XREF: Obj_Index
00016A6E 7000                       		moveq	#0,d0
00016A70 1028 0024                  		move.b	$24(a0),d0
00016A74 323B 0000                  		move.w	Obj66_Index(pc,d0.w),d1
00016A78 4EFB 1000                  		jmp	Obj66_Index(pc,d1.w)
00016A7C                            ; ===========================================================================
00016A7C 0000                       Obj66_Index:	dc.w Obj66_Main-Obj66_Index
00016A7E 0000                       		dc.w Obj66_Action-Obj66_Index
00016A80 0000                       		dc.w Obj66_Display-Obj66_Index
00016A82 0000                       		dc.w Obj66_Release-Obj66_Index
00016A84                            ; ===========================================================================
00016A84                            
00016A84                            Obj66_Main:				; XREF: Obj66_Index
00016A84 5428 0024                  		addq.b	#2,$24(a0)
00016A88 323C 0001                  		move.w	#1,d1
00016A8C 2248                       		movea.l	a0,a1
00016A8E 6000                       		bra.s	Obj66_MakeItem
00016A90                            ; ===========================================================================
00016A90                            
00016A90                            jmp_SingleObjLoad:
00016A90 4EF9 0000 E5A0             	jmp SingleObjLoad
00016A96                            
00016A96                            Obj66_Loop:
00016A96 6100 FFF8                  		bsr.w	jmp_SingleObjLoad
00016A9A 6600                       		bne.s	loc_150FE
00016A9C 12BC 0066                  		move.b	#$66,0(a1)
00016AA0 5829 0024                  		addq.b	#4,$24(a1)
00016AA4 3368 0008 0008             		move.w	8(a0),8(a1)
00016AAA 3368 000C 000C             		move.w	$C(a0),$C(a1)
00016AB0 137C 0003 0018             		move.b	#3,$18(a1)
00016AB6 137C 0010 001A             		move.b	#$10,$1A(a1)
00016ABC                            
00016ABC                            Obj66_MakeItem:				; XREF: Obj66_Main
00016ABC 237C 0000 0000 0004        		move.l	#Map_obj66,4(a1)
00016AC4 337C 4348 0002             		move.w	#$4348,2(a1)
00016ACA 0029 0004 0001             		ori.b	#4,1(a1)
00016AD0 137C 0038 0019             		move.b	#$38,$19(a1)
00016AD6                            
00016AD6                            loc_150FE:
00016AD6 51C9 FFBE                  		dbf	d1,Obj66_Loop
00016ADA                            
00016ADA 117C 0030 0019             		move.b	#$30,$19(a0)
00016AE0 117C 0004 0018             		move.b	#4,$18(a0)
00016AE6 317C 003C 0030             		move.w	#$3C,$30(a0)
00016AEC 117C 0001 0034             		move.b	#1,$34(a0)
00016AF2 1168 0028 0038             		move.b	$28(a0),$38(a0)
00016AF8                            
00016AF8                            Obj66_Action:				; XREF: Obj66_Index
00016AF8 6100 0000                  		bsr.w	Obj66_ChkSwitch
00016AFC 4A28 0001                  		tst.b	1(a0)
00016B00 6A00 0000                  		bpl.w	Obj66_Display
00016B04 323C 0030                  		move.w	#$30,d1
00016B08 3401                       		move.w	d1,d2
00016B0A 3602                       		move.w	d2,d3
00016B0C 5243                       		addq.w	#1,d3
00016B0E 3828 0008                  		move.w	8(a0),d4
00016B12 6100 99E0                  		bsr.w	SolidObject
00016B16 0828 0005 0022             		btst	#5,$22(a0)
00016B1C 6700 0000                  		beq.w	Obj66_Display
00016B20 43F8 D000                  		lea	($FFFFD000).w,a1
00016B24 720E                       		moveq	#$E,d1
00016B26 3029 0008                  		move.w	8(a1),d0
00016B2A B068 0008                  		cmp.w	8(a0),d0
00016B2E 6500                       		bcs.s	Obj66_GrabSonic
00016B30 7207                       		moveq	#7,d1
00016B32                            
00016B32                            Obj66_GrabSonic:
00016B32 B228 001A                  		cmp.b	$1A(a0),d1
00016B36 6600                       		bne.s	Obj66_Display
00016B38 1141 0032                  		move.b	d1,$32(a0)
00016B3C 5828 0024                  		addq.b	#4,$24(a0)
00016B40 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; lock	controls
00016B46 137C 0002 001C             		move.b	#2,$1C(a1)	; make Sonic use "rolling" animation
00016B4C 337C 0800 0014             		move.w	#$800,$14(a1)
00016B52 337C 0000 0010             		move.w	#0,$10(a1)
00016B58 337C 0000 0012             		move.w	#0,$12(a1)
00016B5E 08A8 0005 0022             		bclr	#5,$22(a0)
00016B64 08A9 0005 0022             		bclr	#5,$22(a1)
00016B6A 08E9 0001 0022             		bset	#1,$22(a1)
00016B70 3429 0008                  		move.w	8(a1),d2
00016B74 3629 000C                  		move.w	$C(a1),d3
00016B78 6100 0000                  		bsr.w	Obj66_ChgPos
00016B7C D569 0008                  		add.w	d2,8(a1)
00016B80 D769 000C                  		add.w	d3,$C(a1)
00016B84 E0E9 0008                  		asr	8(a1)
00016B88 E0E9 000C                  		asr	$C(a1)
00016B8C                            
00016B8C                            Obj66_Display:				; XREF: Obj66_Index
00016B8C 6000 963E                  		bra.w	MarkObjGone
00016B90                            ; ===========================================================================
00016B90                            
00016B90                            Obj66_Release:				; XREF: Obj66_Index
00016B90 1028 001A                  		move.b	$1A(a0),d0
00016B94 0C00 0004                  		cmpi.b	#4,d0
00016B98 6700                       		beq.s	loc_151C8
00016B9A 0C00 0007                  		cmpi.b	#7,d0
00016B9E 6600                       		bne.s	loc_151F8
00016BA0                            
00016BA0                            loc_151C8:
00016BA0 B028 0032                  		cmp.b	$32(a0),d0
00016BA4 6700                       		beq.s	loc_151F8
00016BA6 43F8 D000                  		lea	($FFFFD000).w,a1
00016BAA 337C 0000 0010             		move.w	#0,$10(a1)
00016BB0 337C 0800 0012             		move.w	#$800,$12(a1)
00016BB6 0C00 0004                  		cmpi.b	#4,d0
00016BBA 6700                       		beq.s	loc_151F0
00016BBC 337C 0800 0010             		move.w	#$800,$10(a1)
00016BC2 337C 0800 0012             		move.w	#$800,$12(a1)
00016BC8                            
00016BC8                            loc_151F0:
00016BC8 4238 F7C8                  		clr.b	($FFFFF7C8).w	; unlock controls
00016BCC 5928 0024                  		subq.b	#4,$24(a0)
00016BD0                            
00016BD0                            loc_151F8:
00016BD0 6100                       		bsr.s	Obj66_ChkSwitch
00016BD2 6100                       		bsr.s	Obj66_ChgPos
00016BD4 6000 95F6                  		bra.w	MarkObjGone
00016BD8                            
00016BD8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016BD8                            
00016BD8                            
00016BD8                            Obj66_ChkSwitch:			; XREF: Obj66_Action
00016BD8 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00016BDC 7000                       		moveq	#0,d0
00016BDE 1028 0038                  		move.b	$38(a0),d0
00016BE2 0832 0000 0000             		btst	#0,(a2,d0.w)	; is switch pressed?
00016BE8 6700                       		beq.s	loc_15224	; if not, branch
00016BEA 4A28 0036                  		tst.b	$36(a0)		; has switch previously	been pressed?
00016BEE 6600                       		bne.s	Obj66_Animate	; if yes, branch
00016BF0 4428 0034                  		neg.b	$34(a0)
00016BF4 117C 0001 0036             		move.b	#1,$36(a0)	; set to "previously pressed"
00016BFA 6000                       		bra.s	Obj66_Animate
00016BFC                            ; ===========================================================================
00016BFC                            
00016BFC                            loc_15224:
00016BFC 4228 0036                  		clr.b	$36(a0)		; set to "not yet pressed"
00016C00                            
00016C00                            Obj66_Animate:
00016C00 5328 001E                  		subq.b	#1,$1E(a0)
00016C04 6A00                       		bpl.s	locret_15246
00016C06 117C 0007 001E             		move.b	#7,$1E(a0)
00016C0C 1228 0034                  		move.b	$34(a0),d1
00016C10 1028 001A                  		move.b	$1A(a0),d0
00016C14 D001                       		add.b	d1,d0
00016C16 0200 000F                  		andi.b	#$F,d0
00016C1A 1140 001A                  		move.b	d0,$1A(a0)
00016C1E                            
00016C1E                            locret_15246:
00016C1E 4E75                       		rts	
00016C20                            ; End of function Obj66_ChkSwitch
00016C20                            
00016C20                            
00016C20                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016C20                            
00016C20                            
00016C20                            Obj66_ChgPos:				; XREF: Obj66_GrabSonic
00016C20 43F8 D000                  		lea	($FFFFD000).w,a1
00016C24 7000                       		moveq	#0,d0
00016C26 1028 001A                  		move.b	$1A(a0),d0
00016C2A D040                       		add.w	d0,d0
00016C2C 45FB 0000                  		lea	Obj66_PosData(pc,d0.w),a2
00016C30 101A                       		move.b	(a2)+,d0
00016C32 4880                       		ext.w	d0
00016C34 D068 0008                  		add.w	8(a0),d0
00016C38 3340 0008                  		move.w	d0,8(a1)
00016C3C 101A                       		move.b	(a2)+,d0
00016C3E 4880                       		ext.w	d0
00016C40 D068 000C                  		add.w	$C(a0),d0
00016C44 3340 000C                  		move.w	d0,$C(a1)
00016C48 4E75                       		rts	
00016C4A                            ; End of function Obj66_ChgPos
00016C4A                            
00016C4A                            ; ===========================================================================
00016C4A E000 E20E                  Obj66_PosData:	dc.b  $E0,   0,	$E2,  $E ; disc	x-pos, Sonic x-pos, disc y-pos,	Sonic y-pos
00016C4E E818 F21E                  		dc.b  $E8, $18,	$F2, $1E
00016C52 0020 0E1E                  		dc.b	0, $20,	 $E, $1E
00016C56 1818 1E0E                  		dc.b  $18, $18,	$1E,  $E
00016C5A 2000 1EF2                  		dc.b  $20,   0,	$1E, $F2
00016C5E 18E8 0EE2                  		dc.b  $18, $E8,	 $E, $E2
00016C62 00E0 F2E2                  		dc.b	0, $E0,	$F2, $E2
00016C66 E8E8 E2F2                  		dc.b  $E8, $E8,	$E2, $F2
00016C6A                            ; ---------------------------------------------------------------------------
00016C6A                            ; Sprite mappings - rotating disc that grabs Sonic (SBZ)
00016C6A                            ; ---------------------------------------------------------------------------
00016C6A                            Map_obj66:
00016C6A                            	include "_maps\obj66.asm"
00016C6A                            ; ---------------------------------------------------------------------------
00016C6A                            ; Sprite mappings - rotating disc that grabs Sonic (SBZ)
00016C6A                            ; ---------------------------------------------------------------------------
00016C6A 0000 0000                  		dc.w byte_152B4-Map_obj66, byte_152D3-Map_obj66
00016C6E 0000 0000                  		dc.w byte_152F2-Map_obj66, byte_15311-Map_obj66
00016C72 0000 0000                  		dc.w byte_15330-Map_obj66, byte_1534F-Map_obj66
00016C76 0000 0000                  		dc.w byte_1536E-Map_obj66, byte_1538D-Map_obj66
00016C7A 0000 0000                  		dc.w byte_153AC-Map_obj66, byte_153CB-Map_obj66
00016C7E 0000 0000                  		dc.w byte_153EA-Map_obj66, byte_15409-Map_obj66
00016C82 0000 0000                  		dc.w byte_15428-Map_obj66, byte_15447-Map_obj66
00016C86 0000 0000                  		dc.w byte_15466-Map_obj66, byte_15485-Map_obj66
00016C8A 0000                       		dc.w byte_154A4-Map_obj66
00016C8C 06                         byte_152B4:	dc.b 6
00016C8D E805 0022 D0               		dc.b $E8, 5, 0,	$22, $D0
00016C92 0805 1022 D0               		dc.b 8,	5, $10,	$22, $D0
00016C97 E80A 0000 C8               		dc.b $E8, $A, 0, 0, $C8
00016C9C E80A 0800 E0               		dc.b $E8, $A, 8, 0, $E0
00016CA1 000A 1000 C8               		dc.b 0,	$A, $10, 0, $C8
00016CA6 000A 1800 E0               		dc.b 0,	$A, $18, 0, $E0
00016CAB 06                         byte_152D3:	dc.b 6
00016CAC F803 0026 D0               		dc.b $F8, 3, 0,	$26, $D0
00016CB1 1805 002A D8               		dc.b $18, 5, 0,	$2A, $D8
00016CB6 F60A 0000 CA               		dc.b $F6, $A, 0, 0, $CA
00016CBB F60A 0800 E2               		dc.b $F6, $A, 8, 0, $E2
00016CC0 0E0A 1000 CA               		dc.b $E, $A, $10, 0, $CA
00016CC5 0E0A 1800 E2               		dc.b $E, $A, $18, 0, $E2
00016CCA 06                         byte_152F2:	dc.b 6
00016CCB 0006 002E D0               		dc.b 0,	6, 0, $2E, $D0
00016CD0 2009 0034 E8               		dc.b $20, 9, 0,	$34, $E8
00016CD5 000A 0000 D0               		dc.b 0,	$A, 0, 0, $D0
00016CDA 000A 0800 E8               		dc.b 0,	$A, 8, 0, $E8
00016CDF 180A 1000 D0               		dc.b $18, $A, $10, 0, $D0
00016CE4 180A 1800 E8               		dc.b $18, $A, $18, 0, $E8
00016CE9 06                         byte_15311:	dc.b 6
00016CEA 0807 003A D8               		dc.b 8,	7, 0, $3A, $D8
00016CEF 2808 0042 F0               		dc.b $28, 8, 0,	$42, $F0
00016CF4 060A 0000 DA               		dc.b 6,	$A, 0, 0, $DA
00016CF9 060A 0800 F2               		dc.b 6,	$A, 8, 0, $F2
00016CFE 1E0A 1000 DA               		dc.b $1E, $A, $10, 0, $DA
00016D03 1E0A 1800 F2               		dc.b $1E, $A, $18, 0, $F2
00016D08 06                         byte_15330:	dc.b 6
00016D09 2005 0045 E8               		dc.b $20, 5, 0,	$45, $E8
00016D0E 2005 0845 08               		dc.b $20, 5, 8,	$45, 8
00016D13 080A 0000 E8               		dc.b 8,	$A, 0, 0, $E8
00016D18 080A 0800 00               		dc.b 8,	$A, 8, 0, 0
00016D1D 200A 1000 E8               		dc.b $20, $A, $10, 0, $E8
00016D22 200A 1800 00               		dc.b $20, $A, $18, 0, 0
00016D27 06                         byte_1534F:	dc.b 6
00016D28 2808 0842 F8               		dc.b $28, 8, 8,	$42, $F8
00016D2D 0807 083A 18               		dc.b 8,	7, 8, $3A, $18
00016D32 060A 0000 F6               		dc.b 6,	$A, 0, 0, $F6
00016D37 060A 0800 0E               		dc.b 6,	$A, 8, 0, $E
00016D3C 1E0A 1000 F6               		dc.b $1E, $A, $10, 0, $F6
00016D41 1E0A 1800 0E               		dc.b $1E, $A, $18, 0, $E
00016D46 06                         byte_1536E:	dc.b 6
00016D47 2009 0834 00               		dc.b $20, 9, 8,	$34, 0
00016D4C 0006 082E 20               		dc.b 0,	6, 8, $2E, $20
00016D51 000A 0000 00               		dc.b 0,	$A, 0, 0, 0
00016D56 000A 0800 18               		dc.b 0,	$A, 8, 0, $18
00016D5B 180A 1000 00               		dc.b $18, $A, $10, 0, 0
00016D60 180A 1800 18               		dc.b $18, $A, $18, 0, $18
00016D65 06                         byte_1538D:	dc.b 6
00016D66 1805 082A 18               		dc.b $18, 5, 8,	$2A, $18
00016D6B F803 0826 28               		dc.b $F8, 3, 8,	$26, $28
00016D70 F60A 0000 06               		dc.b $F6, $A, 0, 0, 6
00016D75 F60A 0800 1E               		dc.b $F6, $A, 8, 0, $1E
00016D7A 0E0A 1000 06               		dc.b $E, $A, $10, 0, 6
00016D7F 0E0A 1800 1E               		dc.b $E, $A, $18, 0, $1E
00016D84 06                         byte_153AC:	dc.b 6
00016D85 E805 0822 20               		dc.b $E8, 5, 8,	$22, $20
00016D8A 0805 1822 20               		dc.b 8,	5, $18,	$22, $20
00016D8F E80A 0000 08               		dc.b $E8, $A, 0, 0, 8
00016D94 E80A 0800 20               		dc.b $E8, $A, 8, 0, $20
00016D99 000A 1000 08               		dc.b 0,	$A, $10, 0, 8
00016D9E 000A 1800 20               		dc.b 0,	$A, $18, 0, $20
00016DA3 06                         byte_153CB:	dc.b 6
00016DA4 D805 182A 18               		dc.b $D8, 5, $18, $2A, $18
00016DA9 E803 1826 28               		dc.b $E8, 3, $18, $26, $28
00016DAE DA0A 0000 06               		dc.b $DA, $A, 0, 0, 6
00016DB3 DA0A 0800 1E               		dc.b $DA, $A, 8, 0, $1E
00016DB8 F20A 1000 06               		dc.b $F2, $A, $10, 0, 6
00016DBD F20A 1800 1E               		dc.b $F2, $A, $18, 0, $1E
00016DC2 06                         byte_153EA:	dc.b 6
00016DC3 D009 1834 00               		dc.b $D0, 9, $18, $34, 0
00016DC8 E806 182E 20               		dc.b $E8, 6, $18, $2E, $20
00016DCD D00A 0000 00               		dc.b $D0, $A, 0, 0, 0
00016DD2 D00A 0800 18               		dc.b $D0, $A, 8, 0, $18
00016DD7 E80A 1000 00               		dc.b $E8, $A, $10, 0, 0
00016DDC E80A 1800 18               		dc.b $E8, $A, $18, 0, $18
00016DE1 06                         byte_15409:	dc.b 6
00016DE2 D008 1842 F8               		dc.b $D0, 8, $18, $42, $F8
00016DE7 D807 183A 18               		dc.b $D8, 7, $18, $3A, $18
00016DEC CA0A 0000 F6               		dc.b $CA, $A, 0, 0, $F6
00016DF1 CA0A 0800 0E               		dc.b $CA, $A, 8, 0, $E
00016DF6 E20A 1000 F6               		dc.b $E2, $A, $10, 0, $F6
00016DFB E20A 1800 0E               		dc.b $E2, $A, $18, 0, $E
00016E00 06                         byte_15428:	dc.b 6
00016E01 D005 1045 E8               		dc.b $D0, 5, $10, $45, $E8
00016E06 D005 1845 08               		dc.b $D0, 5, $18, $45, 8
00016E0B C80A 0000 E8               		dc.b $C8, $A, 0, 0, $E8
00016E10 C80A 0800 00               		dc.b $C8, $A, 8, 0, 0
00016E15 E00A 1000 E8               		dc.b $E0, $A, $10, 0, $E8
00016E1A E00A 1800 00               		dc.b $E0, $A, $18, 0, 0
00016E1F 06                         byte_15447:	dc.b 6
00016E20 D807 103A D8               		dc.b $D8, 7, $10, $3A, $D8
00016E25 D008 1042 F0               		dc.b $D0, 8, $10, $42, $F0
00016E2A CA0A 0000 DA               		dc.b $CA, $A, 0, 0, $DA
00016E2F CA0A 0800 F2               		dc.b $CA, $A, 8, 0, $F2
00016E34 E20A 1000 DA               		dc.b $E2, $A, $10, 0, $DA
00016E39 E20A 1800 F2               		dc.b $E2, $A, $18, 0, $F2
00016E3E 06                         byte_15466:	dc.b 6
00016E3F E806 102E D0               		dc.b $E8, 6, $10, $2E, $D0
00016E44 D009 1034 E8               		dc.b $D0, 9, $10, $34, $E8
00016E49 D00A 0000 D0               		dc.b $D0, $A, 0, 0, $D0
00016E4E D00A 0800 E8               		dc.b $D0, $A, 8, 0, $E8
00016E53 E80A 1000 D0               		dc.b $E8, $A, $10, 0, $D0
00016E58 E80A 1800 E8               		dc.b $E8, $A, $18, 0, $E8
00016E5D 06                         byte_15485:	dc.b 6
00016E5E E803 1026 D0               		dc.b $E8, 3, $10, $26, $D0
00016E63 D805 102A D8               		dc.b $D8, 5, $10, $2A, $D8
00016E68 DA0A 0000 CA               		dc.b $DA, $A, 0, 0, $CA
00016E6D DA0A 0800 E2               		dc.b $DA, $A, 8, 0, $E2
00016E72 F20A 1000 CA               		dc.b $F2, $A, $10, 0, $CA
00016E77 F20A 1800 E2               		dc.b $F2, $A, $18, 0, $E2
00016E7C 0C                         byte_154A4:	dc.b $C
00016E7D C80D 0009 E0               		dc.b $C8, $D, 0, 9, $E0
00016E82 D00A 0011 D0               		dc.b $D0, $A, 0, $11, $D0
00016E87 E007 001A C8               		dc.b $E0, 7, 0,	$1A, $C8
00016E8C C80D 0809 00               		dc.b $C8, $D, 8, 9, 0
00016E91 D00A 0811 18               		dc.b $D0, $A, 8, $11, $18
00016E96 E007 081A 28               		dc.b $E0, 7, 8,	$1A, $28
00016E9B 0007 101A C8               		dc.b 0,	7, $10,	$1A, $C8
00016EA0 180A 1011 D0               		dc.b $18, $A, $10, $11,	$D0
00016EA5 280D 1009 E0               		dc.b $28, $D, $10, 9, $E0
00016EAA 280D 1809 00               		dc.b $28, $D, $18, 9, 0
00016EAF 180A 1811 18               		dc.b $18, $A, $18, $11,	$18
00016EB4 0007 181A 28               		dc.b 0,	7, $18,	$1A, $28
00016EBA 00                         		even
00016EBA 00                         		even
00016EBA                            
00016EBA                            ; ===========================================================================
00016EBA                            ; ---------------------------------------------------------------------------
00016EBA                            ; Object 67 - disc that	you run	around (SBZ)
00016EBA                            ; ---------------------------------------------------------------------------
00016EBA                            
00016EBA                            Obj67:					; XREF: Obj_Index
00016EBA 7000                       		moveq	#0,d0
00016EBC 1028 0024                  		move.b	$24(a0),d0
00016EC0 323B 0000                  		move.w	Obj67_Index(pc,d0.w),d1
00016EC4 4EFB 1000                  		jmp	Obj67_Index(pc,d1.w)
00016EC8                            ; ===========================================================================
00016EC8 0000                       Obj67_Index:	dc.w Obj67_Main-Obj67_Index
00016ECA 0000                       		dc.w Obj67_Action-Obj67_Index
00016ECC                            ; ===========================================================================
00016ECC                            
00016ECC                            Obj67_Main:				; XREF: Obj67_Index
00016ECC 5428 0024                  		addq.b	#2,$24(a0)
00016ED0 217C 0000 0000 0004        		move.l	#Map_obj67,4(a0)
00016ED8 317C C344 0002             		move.w	#$C344,2(a0)
00016EDE 117C 0004 0001             		move.b	#4,1(a0)
00016EE4 117C 0004 0018             		move.b	#4,$18(a0)
00016EEA 117C 0008 0019             		move.b	#8,$19(a0)
00016EF0 3168 0008 0032             		move.w	8(a0),$32(a0)
00016EF6 3168 000C 0030             		move.w	$C(a0),$30(a0)
00016EFC 117C 0018 0034             		move.b	#$18,$34(a0)
00016F02 117C 0048 0038             		move.b	#$48,$38(a0)
00016F08 1228 0028                  		move.b	$28(a0),d1	; get object type
00016F0C 0201 000F                  		andi.b	#$F,d1		; read only the	2nd digit
00016F10 6700                       		beq.s	loc_15546
00016F12 117C 0010 0034             		move.b	#$10,$34(a0)
00016F18 117C 0038 0038             		move.b	#$38,$38(a0)
00016F1E                            
00016F1E                            loc_15546:
00016F1E 1228 0028                  		move.b	$28(a0),d1	; get object type
00016F22 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00016F26 4881                       		ext.w	d1
00016F28 E741                       		asl.w	#3,d1
00016F2A 3141 0036                  		move.w	d1,$36(a0)
00016F2E 1028 0022                  		move.b	$22(a0),d0
00016F32 E418                       		ror.b	#2,d0
00016F34 0200 00C0                  		andi.b	#-$40,d0
00016F38 1140 0026                  		move.b	d0,$26(a0)
00016F3C                            
00016F3C                            Obj67_Action:				; XREF: Obj67_Index
00016F3C 6100 0000                  		bsr.w	Obj67_MoveSonic
00016F40 6100 0000                  		bsr.w	Obj67_MoveSpot
00016F44 6000 0000                  		bra.w	Obj67_ChkDel
00016F48                            ; ===========================================================================
00016F48                            
00016F48                            Obj67_MoveSonic:			; XREF: Obj67_Action
00016F48 7400                       		moveq	#0,d2
00016F4A 1428 0038                  		move.b	$38(a0),d2
00016F4E 3602                       		move.w	d2,d3
00016F50 D643                       		add.w	d3,d3
00016F52 43F8 D000                  		lea	($FFFFD000).w,a1
00016F56 3029 0008                  		move.w	8(a1),d0
00016F5A 9068 0032                  		sub.w	$32(a0),d0
00016F5E D042                       		add.w	d2,d0
00016F60 B043                       		cmp.w	d3,d0
00016F62 6400                       		bcc.s	loc_155A8
00016F64 3229 000C                  		move.w	$C(a1),d1
00016F68 9268 0030                  		sub.w	$30(a0),d1
00016F6C D242                       		add.w	d2,d1
00016F6E B243                       		cmp.w	d3,d1
00016F70 6400                       		bcc.s	loc_155A8
00016F72 0829 0001 0022             		btst	#1,$22(a1)
00016F78 6700                       		beq.s	loc_155B8
00016F7A 4228 003A                  		clr.b	$3A(a0)
00016F7E 4E75                       		rts	
00016F80                            ; ===========================================================================
00016F80                            
00016F80                            loc_155A8:
00016F80 4A28 003A                  		tst.b	$3A(a0)
00016F84 6700                       		beq.s	locret_155B6
00016F86 4229 0038                  		clr.b	$38(a1)
00016F8A 4228 003A                  		clr.b	$3A(a0)
00016F8E                            
00016F8E                            locret_155B6:
00016F8E 4E75                       		rts	
00016F90                            ; ===========================================================================
00016F90                            
00016F90                            loc_155B8:
00016F90 4A28 003A                  		tst.b	$3A(a0)
00016F94 6600                       		bne.s	loc_155E2
00016F96 117C 0001 003A             		move.b	#1,$3A(a0)
00016F9C 0829 0002 0022             		btst	#2,$22(a1)
00016FA2 6600                       		bne.s	loc_155D0
00016FA4 4229 001C                  		clr.b	$1C(a1)
00016FA8                            
00016FA8                            loc_155D0:
00016FA8 08A9 0005 0022             		bclr	#5,$22(a1)
00016FAE 137C 0001 001D             		move.b	#1,$1D(a1)
00016FB4 137C 0001 0038             		move.b	#1,$38(a1)
00016FBA                            
00016FBA                            loc_155E2:
00016FBA 3029 0014                  		move.w	$14(a1),d0
00016FBE 4A68 0036                  		tst.w	$36(a0)
00016FC2 6A00                       		bpl.s	loc_15608
00016FC4 0C40 FC00                  		cmpi.w	#-$400,d0
00016FC8 6F00                       		ble.s	loc_155FA
00016FCA 337C FC00 0014             		move.w	#-$400,$14(a1)
00016FD0 4E75                       		rts	
00016FD2                            ; ===========================================================================
00016FD2                            
00016FD2                            loc_155FA:
00016FD2 0C40 F100                  		cmpi.w	#-$F00,d0
00016FD6 6C00                       		bge.s	locret_15606
00016FD8 337C F100 0014             		move.w	#-$F00,$14(a1)
00016FDE                            
00016FDE                            locret_15606:
00016FDE 4E75                       		rts	
00016FE0                            ; ===========================================================================
00016FE0                            
00016FE0                            loc_15608:
00016FE0 0C40 0400                  		cmpi.w	#$400,d0
00016FE4 6C00                       		bge.s	loc_15616
00016FE6 337C 0400 0014             		move.w	#$400,$14(a1)
00016FEC 4E75                       		rts	
00016FEE                            ; ===========================================================================
00016FEE                            
00016FEE                            loc_15616:
00016FEE 0C40 0F00                  		cmpi.w	#$F00,d0
00016FF2 6F00                       		ble.s	locret_15622
00016FF4 337C 0F00 0014             		move.w	#$F00,$14(a1)
00016FFA                            
00016FFA                            locret_15622:
00016FFA 4E75                       		rts	
00016FFC                            ; ===========================================================================
00016FFC                            
00016FFC                            Obj67_MoveSpot:				; XREF: Obj67_Action
00016FFC 3028 0036                  		move.w	$36(a0),d0
00017000 D168 0026                  		add.w	d0,$26(a0)
00017004 1028 0026                  		move.b	$26(a0),d0
00017008 4EB9 0000 33D4             		jsr	(CalcSine).l
0001700E 3428 0030                  		move.w	$30(a0),d2
00017012 3628 0032                  		move.w	$32(a0),d3
00017016 7800                       		moveq	#0,d4
00017018 1828 0034                  		move.b	$34(a0),d4
0001701C E14C                       		lsl.w	#8,d4
0001701E 2A04                       		move.l	d4,d5
00017020 C9C0                       		muls.w	d0,d4
00017022 4844                       		swap	d4
00017024 CBC1                       		muls.w	d1,d5
00017026 4845                       		swap	d5
00017028 D842                       		add.w	d2,d4
0001702A DA43                       		add.w	d3,d5
0001702C 3144 000C                  		move.w	d4,$C(a0)
00017030 3145 0008                  		move.w	d5,8(a0)
00017034 4E75                       		rts	
00017036                            ; ===========================================================================
00017036                            
00017036                            Obj67_ChkDel:				; XREF: Obj67_Action
00017036 3028 0032                  		move.w	$32(a0),d0
0001703A 0240 FF80                  		andi.w	#-$80,d0
0001703E 3238 F700                  		move.w	($FFFFF700).w,d1
00017042 0441 0080                  		subi.w	#$80,d1
00017046 0241 FF80                  		andi.w	#-$80,d1
0001704A 9041                       		sub.w	d1,d0
0001704C 0C40 0280                  		cmpi.w	#$280,d0
00017050 6200                       		bhi.s	Obj67_Delete
00017052 4EF9 0000 E10A             		jmp	DisplaySprite
00017058                            ; ===========================================================================
00017058                            
00017058                            Obj67_Delete:
00017058 4EF9 0000 E146             		jmp	DeleteObject
0001705E                            ; ===========================================================================
0001705E                            ; ---------------------------------------------------------------------------
0001705E                            ; Sprite mappings - disc that you run around (SBZ)
0001705E                            ; (It's just a small blob that moves around in a circle. The disc itself is
0001705E                            ; part of the level tiles.)
0001705E                            ; ---------------------------------------------------------------------------
0001705E                            Map_obj67:
0001705E                            	include "_maps\obj67.asm"
0001705E                            ; ---------------------------------------------------------------------------
0001705E                            ; Sprite mappings - disc that you run around (SBZ)
0001705E                            ; (It's just a small blob that moves around in a circle. The disc itself is
0001705E                            ; part of the level tiles.)
0001705E                            ; ---------------------------------------------------------------------------
0001705E 0000                       		dc.w byte_15688-Map_obj67
00017060 01                         byte_15688:	dc.b 1
00017061 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00017066                            		even
00017066                            		even
00017066                            
00017066                            ; ===========================================================================
00017066                            ; ---------------------------------------------------------------------------
00017066                            ; Object 68 - conveyor belts (SBZ)
00017066                            ; ---------------------------------------------------------------------------
00017066                            
00017066                            Obj68:					; XREF: Obj_Index
00017066 7000                       		moveq	#0,d0
00017068 1028 0024                  		move.b	$24(a0),d0
0001706C 323B 0000                  		move.w	Obj68_Index(pc,d0.w),d1
00017070 4EFB 1000                  		jmp	Obj68_Index(pc,d1.w)
00017074                            ; ===========================================================================
00017074 0000                       Obj68_Index:	dc.w Obj68_Main-Obj68_Index
00017076 0000                       		dc.w Obj68_Action-Obj68_Index
00017078                            ; ===========================================================================
00017078                            
00017078                            Obj68_Main:				; XREF: Obj68_Index
00017078 5428 0024                  		addq.b	#2,$24(a0)
0001707C 117C 0080 0038             		move.b	#128,$38(a0)	; set width to 128 pixels
00017082 1228 0028                  		move.b	$28(a0),d1	; get object type
00017086 0201 000F                  		andi.b	#$F,d1		; read only the	2nd digit
0001708A 6700                       		beq.s	loc_156BA	; if zero, branch
0001708C 117C 0038 0038             		move.b	#56,$38(a0)	; set width to 56 pixels
00017092                            
00017092                            loc_156BA:
00017092 1228 0028                  		move.b	$28(a0),d1	; get object type
00017096 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
0001709A 4881                       		ext.w	d1
0001709C E841                       		asr.w	#4,d1
0001709E 3141 0036                  		move.w	d1,$36(a0)	; set belt speed
000170A2                            
000170A2                            Obj68_Action:				; XREF: Obj68_Index
000170A2 6100                       		bsr.s	Obj68_MoveSonic
000170A4 3028 0008                  		move.w	8(a0),d0
000170A8 0240 FF80                  		andi.w	#$FF80,d0
000170AC 3238 F700                  		move.w	($FFFFF700).w,d1
000170B0 0441 0080                  		subi.w	#$80,d1
000170B4 0241 FF80                  		andi.w	#$FF80,d1
000170B8 9041                       		sub.w	d1,d0
000170BA 0C40 0280                  		cmpi.w	#$280,d0
000170BE 6200                       		bhi.s	Obj68_Delete
000170C0 4E75                       		rts	
000170C2                            ; ===========================================================================
000170C2                            
000170C2                            Obj68_Delete:
000170C2 4EF9 0000 E146             		jmp	DeleteObject
000170C8                            ; ===========================================================================
000170C8                            
000170C8                            Obj68_MoveSonic:			; XREF: Obj68_Action
000170C8 7400                       		moveq	#0,d2
000170CA 1428 0038                  		move.b	$38(a0),d2
000170CE 3602                       		move.w	d2,d3
000170D0 D643                       		add.w	d3,d3
000170D2 43F8 D000                  		lea	($FFFFD000).w,a1
000170D6 3029 0008                  		move.w	8(a1),d0
000170DA 9068 0008                  		sub.w	8(a0),d0
000170DE D042                       		add.w	d2,d0
000170E0 B043                       		cmp.w	d3,d0
000170E2 6400                       		bcc.s	locret_1572E
000170E4 3229 000C                  		move.w	$C(a1),d1
000170E8 9268 000C                  		sub.w	$C(a0),d1
000170EC 0641 0030                  		addi.w	#$30,d1
000170F0 0C41 0030                  		cmpi.w	#$30,d1
000170F4 6400                       		bcc.s	locret_1572E
000170F6 0829 0001 0022             		btst	#1,$22(a1)
000170FC 6600                       		bne.s	locret_1572E
000170FE 3028 0036                  		move.w	$36(a0),d0
00017102 D169 0008                  		add.w	d0,8(a1)
00017106                            
00017106                            locret_1572E:
00017106 4E75                       		rts	
00017108                            
00017108                            ; ===========================================================================
00017108                            ; ---------------------------------------------------------------------------
00017108                            ; Object 69 - spinning platforms and trapdoors (SBZ)
00017108                            ; ---------------------------------------------------------------------------
00017108                            
00017108                            Obj69:					; XREF: Obj_Index
00017108 7000                       		moveq	#0,d0
0001710A 1028 0024                  		move.b	$24(a0),d0
0001710E 323B 0000                  		move.w	Obj69_Index(pc,d0.w),d1
00017112 4EFB 1000                  		jmp	Obj69_Index(pc,d1.w)
00017116                            ; ===========================================================================
00017116 0000                       Obj69_Index:	dc.w Obj69_Main-Obj69_Index
00017118 0000                       		dc.w Obj69_Trapdoor-Obj69_Index
0001711A 0000                       		dc.w Obj69_Spinner-Obj69_Index
0001711C                            ; ===========================================================================
0001711C                            
0001711C                            Obj69_Main:				; XREF: Obj69_Index
0001711C 5428 0024                  		addq.b	#2,$24(a0)
00017120 217C 0000 0000 0004        		move.l	#Map_obj69,4(a0)
00017128 317C 4492 0002             		move.w	#$4492,2(a0)
0001712E 0028 0004 0001             		ori.b	#4,1(a0)
00017134 117C 0080 0019             		move.b	#$80,$19(a0)
0001713A 7000                       		moveq	#0,d0
0001713C 1028 0028                  		move.b	$28(a0),d0
00017140 0240 000F                  		andi.w	#$F,d0
00017144 C0FC 003C                  		mulu.w	#$3C,d0
00017148 3140 0032                  		move.w	d0,$32(a0)
0001714C 4A28 0028                  		tst.b	$28(a0)
00017150 6A00                       		bpl.s	Obj69_Trapdoor
00017152 5428 0024                  		addq.b	#2,$24(a0)
00017156 217C 0000 0000 0004        		move.l	#Map_obj69a,4(a0)
0001715E 317C 04DF 0002             		move.w	#$4DF,2(a0)
00017164 117C 0010 0019             		move.b	#$10,$19(a0)
0001716A 117C 0002 001C             		move.b	#2,$1C(a0)
00017170 7000                       		moveq	#0,d0
00017172 1028 0028                  		move.b	$28(a0),d0	; get object type
00017176 3200                       		move.w	d0,d1
00017178 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
0001717C C0FC 0006                  		mulu.w	#6,d0		; multiply by 6
00017180 3140 0030                  		move.w	d0,$30(a0)	; set time delay
00017184 3140 0032                  		move.w	d0,$32(a0)
00017188 0241 0070                  		andi.w	#$70,d1
0001718C 0641 0010                  		addi.w	#$10,d1
00017190 E549                       		lsl.w	#2,d1
00017192 5341                       		subq.w	#1,d1
00017194 3141 0036                  		move.w	d1,$36(a0)
00017198 6000                       		bra.s	Obj69_Spinner
0001719A                            ; ===========================================================================
0001719A                            
0001719A                            Obj69_Trapdoor:				; XREF: Obj69_Index
0001719A 5368 0030                  		subq.w	#1,$30(a0)
0001719E 6A00                       		bpl.s	Obj69_Animate
000171A0 3168 0032 0030             		move.w	$32(a0),$30(a0)
000171A6 0868 0000 001C             		bchg	#0,$1C(a0)
000171AC 4A28 0001                  		tst.b	1(a0)
000171B0 6A00                       		bpl.s	Obj69_Animate
000171B2 303C 00BB                  		move.w	#$BB,d0
000171B6 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play door sound
000171BC                            
000171BC                            Obj69_Animate:
000171BC 43F9 0000 0000             		lea	(Ani_obj69).l,a1
000171C2 4EB9 0000 B21C             		jsr	AnimateSprite
000171C8 4A28 001A                  		tst.b	$1A(a0)		; is frame number 0 displayed?
000171CC 6600                       		bne.s	Obj69_NotSolid	; if not, branch
000171CE 323C 004B                  		move.w	#$4B,d1
000171D2 343C 000C                  		move.w	#$C,d2
000171D6 3602                       		move.w	d2,d3
000171D8 5243                       		addq.w	#1,d3
000171DA 3828 0008                  		move.w	8(a0),d4
000171DE 6100 9314                  		bsr.w	SolidObject
000171E2 6000 8FE8                  		bra.w	MarkObjGone
000171E6                            ; ===========================================================================
000171E6                            
000171E6                            Obj69_NotSolid:
000171E6 0828 0003 0022             		btst	#3,$22(a0)
000171EC 6700                       		beq.s	Obj69_Display
000171EE 43F8 D000                  		lea	($FFFFD000).w,a1
000171F2 08A9 0003 0022             		bclr	#3,$22(a1)
000171F8 08A8 0003 0022             		bclr	#3,$22(a0)
000171FE 4228 0025                  		clr.b	$25(a0)
00017202                            
00017202                            Obj69_Display:
00017202 6000 8FC8                  		bra.w	MarkObjGone
00017206                            ; ===========================================================================
00017206                            
00017206                            Obj69_Spinner:				; XREF: Obj69_Index
00017206 3038 FE04                  		move.w	($FFFFFE04).w,d0
0001720A C068 0036                  		and.w	$36(a0),d0
0001720E 6600                       		bne.s	Obj69_Delay
00017210 117C 0001 0034             		move.b	#1,$34(a0)
00017216                            
00017216                            Obj69_Delay:
00017216 4A28 0034                  		tst.b	$34(a0)
0001721A 6700                       		beq.s	Obj69_Animate2
0001721C 5368 0030                  		subq.w	#1,$30(a0)
00017220 6A00                       		bpl.s	Obj69_Animate2
00017222 3168 0032 0030             		move.w	$32(a0),$30(a0)
00017228 4228 0034                  		clr.b	$34(a0)
0001722C 0868 0000 001C             		bchg	#0,$1C(a0)
00017232                            
00017232                            Obj69_Animate2:
00017232 43F9 0000 0000             		lea	(Ani_obj69).l,a1
00017238 4EB9 0000 B21C             		jsr	AnimateSprite
0001723E 4A28 001A                  		tst.b	$1A(a0)		; check	if frame number	0 is displayed
00017242 6600                       		bne.s	Obj69_NotSolid2	; if not, branch
00017244 323C 001B                  		move.w	#$1B,d1
00017248 343C 0007                  		move.w	#7,d2
0001724C 3602                       		move.w	d2,d3
0001724E 5243                       		addq.w	#1,d3
00017250 3828 0008                  		move.w	8(a0),d4
00017254 6100 929E                  		bsr.w	SolidObject
00017258 6000 8F72                  		bra.w	MarkObjGone
0001725C                            ; ===========================================================================
0001725C                            
0001725C                            Obj69_NotSolid2:
0001725C 0828 0003 0022             		btst	#3,$22(a0)
00017262 6700                       		beq.s	Obj69_Display2
00017264 43F8 D000                  		lea	($FFFFD000).w,a1
00017268 08A9 0003 0022             		bclr	#3,$22(a1)
0001726E 08A8 0003 0022             		bclr	#3,$22(a0)
00017274 4228 0025                  		clr.b	$25(a0)
00017278                            
00017278                            Obj69_Display2:
00017278 6000 8F52                  		bra.w	MarkObjGone
0001727C                            ; ===========================================================================
0001727C                            Ani_obj69:
0001727C                            	include "_anim\obj69.asm"
0001727C                            ; ---------------------------------------------------------------------------
0001727C                            ; Animation script - trapdoor (SBZ)
0001727C                            ; ---------------------------------------------------------------------------
0001727C 0000                       		dc.w byte_158AC-Ani_obj69
0001727E 0000                       		dc.w byte_158B2-Ani_obj69
00017280 0000                       		dc.w byte_158B8-Ani_obj69
00017282 0000                       		dc.w byte_158CC-Ani_obj69
00017284 0300 0102 FE01             byte_158AC:	dc.b 3,	0, 1, 2, $FE, 1
0001728A 0302 0100 FE01             byte_158B2:	dc.b 3,	2, 1, 0, $FE, 1
00017290 0100 0102 0304 4342 4140+  byte_158B8:	dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
0001729D 6423 2221 00FE 01          		dc.b $64, $23, $22, $21, 0, $FE, 1
000172A4 0100 0102 0304 4342 4140+  byte_158CC:	dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
000172B1 6423 2221 00FE 01          		dc.b $64, $23, $22, $21, 0, $FE, 1
000172B8                            		even
000172B8                            		even
000172B8                            
000172B8                            ; ---------------------------------------------------------------------------
000172B8                            ; Sprite mappings - trapdoor (SBZ)
000172B8                            ; ---------------------------------------------------------------------------
000172B8                            Map_obj69:
000172B8                            	include "_maps\obj69.asm"
000172B8                            ; ---------------------------------------------------------------------------
000172B8                            ; Sprite mappings - trapdoor (SBZ)
000172B8                            ; ---------------------------------------------------------------------------
000172B8 0000                       		dc.w byte_158E6-Map_obj69
000172BA 0000                       		dc.w byte_158FB-Map_obj69
000172BC 0000                       		dc.w byte_15924-Map_obj69
000172BE 04                         byte_158E6:	dc.b 4
000172BF F40E 0000 C0               		dc.b $F4, $E, 0, 0, $C0
000172C4 F40E 0800 E0               		dc.b $F4, $E, 8, 0, $E0
000172C9 F40E 0000 00               		dc.b $F4, $E, 0, 0, 0
000172CE F40E 0800 20               		dc.b $F4, $E, 8, 0, $20
000172D3 08                         byte_158FB:	dc.b 8
000172D4 F20F 000C B6               		dc.b $F2, $F, 0, $C, $B6
000172D9 1A0F 180C D6               		dc.b $1A, $F, $18, $C, $D6
000172DE 020A 001C D6               		dc.b 2,	$A, 0, $1C, $D6
000172E3 120A 181C BE               		dc.b $12, $A, $18, $1C,	$BE
000172E8 F20F 080C 2A               		dc.b $F2, $F, 8, $C, $2A
000172ED 1A0F 100C 0A               		dc.b $1A, $F, $10, $C, $A
000172F2 020A 081C 12               		dc.b 2,	$A, 8, $1C, $12
000172F7 120A 101C 2A               		dc.b $12, $A, $10, $1C,	$2A
000172FC 04                         byte_15924:	dc.b 4
000172FD 000B 0025 B4               		dc.b 0,	$B, 0, $25, $B4
00017302 200B 1025 B4               		dc.b $20, $B, $10, $25,	$B4
00017307 000B 0025 34               		dc.b 0,	$B, 0, $25, $34
0001730C 200B 1025 34               		dc.b $20, $B, $10, $25,	$34
00017312 00                         		even
00017312 00                         		even
00017312                            
00017312                            ; ---------------------------------------------------------------------------
00017312                            ; Sprite mappings - spinning platforms (SBZ)
00017312                            ; ---------------------------------------------------------------------------
00017312                            Map_obj69a:
00017312                            	include "_maps\obj69a.asm"
00017312                            ; ---------------------------------------------------------------------------
00017312                            ; Sprite mappings - spinning platforms (SBZ)
00017312                            ; ---------------------------------------------------------------------------
00017312 0000 0000                  		dc.w byte_15944-Map_obj69a, byte_1594F-Map_obj69a
00017316 0000 0000                  		dc.w byte_1595A-Map_obj69a, byte_15965-Map_obj69a
0001731A 0000                       		dc.w byte_15970-Map_obj69a
0001731C 02                         byte_15944:	dc.b 2
0001731D F805 0000 F0               		dc.b $F8, 5, 0,	0, $F0
00017322 F805 0800 00               		dc.b $F8, 5, 8,	0, 0
00017327 02                         byte_1594F:	dc.b 2
00017328 F00D 0014 F0               		dc.b $F0, $D, 0, $14, $F0
0001732D 000D 001C F0               		dc.b 0,	$D, 0, $1C, $F0
00017332 02                         byte_1595A:	dc.b 2
00017333 F009 0004 F0               		dc.b $F0, 9, 0,	4, $F0
00017338 0009 000A F8               		dc.b 0,	9, 0, $A, $F8
0001733D 02                         byte_15965:	dc.b 2
0001733E F009 0024 F0               		dc.b $F0, 9, 0,	$24, $F0
00017343 0009 002A F8               		dc.b 0,	9, 0, $2A, $F8
00017348 02                         byte_15970:	dc.b 2
00017349 F005 0010 F8               		dc.b $F0, 5, 0,	$10, $F8
0001734E 0005 1010 F8               		dc.b 0,	5, $10,	$10, $F8
00017354 00                         		even
00017354 00                         		even
00017354                            
00017354                            ; ===========================================================================
00017354                            ; ---------------------------------------------------------------------------
00017354                            ; Object 6A - ground saws and pizza cutters (SBZ)
00017354                            ; ---------------------------------------------------------------------------
00017354                            
00017354                            Obj6A:					; XREF: Obj_Index
00017354 7000                       		moveq	#0,d0
00017356 1028 0024                  		move.b	$24(a0),d0
0001735A 323B 0000                  		move.w	Obj6A_Index(pc,d0.w),d1
0001735E 4EFB 1000                  		jmp	Obj6A_Index(pc,d1.w)
00017362                            ; ===========================================================================
00017362 0000                       Obj6A_Index:	dc.w Obj6A_Main-Obj6A_Index
00017364 0000                       		dc.w Obj6A_Action-Obj6A_Index
00017366                            ; ===========================================================================
00017366                            
00017366                            Obj6A_Main:				; XREF: Obj6A_Index
00017366 5428 0024                  		addq.b	#2,$24(a0)
0001736A 217C 0000 0000 0004        		move.l	#Map_obj6A,4(a0)
00017372 317C 43B5 0002             		move.w	#$43B5,2(a0)
00017378 117C 0004 0001             		move.b	#4,1(a0)
0001737E 117C 0004 0018             		move.b	#4,$18(a0)
00017384 117C 0020 0019             		move.b	#$20,$19(a0)
0001738A 3168 0008 003A             		move.w	8(a0),$3A(a0)
00017390 3168 000C 0038             		move.w	$C(a0),$38(a0)
00017396 0C28 0003 0028             		cmpi.b	#3,$28(a0)
0001739C 6400                       		bcc.s	Obj6A_Action
0001739E 117C 00A2 0020             		move.b	#$A2,$20(a0)
000173A4                            
000173A4                            Obj6A_Action:				; XREF: Obj6A_Index
000173A4 7000                       		moveq	#0,d0
000173A6 1028 0028                  		move.b	$28(a0),d0
000173AA 0240 0007                  		andi.w	#7,d0
000173AE D040                       		add.w	d0,d0
000173B0 323B 0000                  		move.w	Obj6A_TypeIndex(pc,d0.w),d1
000173B4 4EBB 1000                  		jsr	Obj6A_TypeIndex(pc,d1.w)
000173B8 3028 003A                  		move.w	$3A(a0),d0
000173BC 0240 FF80                  		andi.w	#$FF80,d0
000173C0 3238 F700                  		move.w	($FFFFF700).w,d1
000173C4 0441 0080                  		subi.w	#$80,d1
000173C8 0241 FF80                  		andi.w	#$FF80,d1
000173CC 9041                       		sub.w	d1,d0
000173CE 0C40 0280                  		cmpi.w	#$280,d0
000173D2 6200                       		bhi.s	Obj6A_Delete
000173D4 4EF9 0000 E10A             		jmp	DisplaySprite
000173DA                            ; ===========================================================================
000173DA                            
000173DA                            Obj6A_Delete:
000173DA 4EF9 0000 E146             		jmp	DeleteObject
000173E0                            ; ===========================================================================
000173E0 0000 0000                  Obj6A_TypeIndex:dc.w Obj6A_Type00-Obj6A_TypeIndex, Obj6A_Type01-Obj6A_TypeIndex
000173E4 0000 0000                  		dc.w Obj6A_Type02-Obj6A_TypeIndex, Obj6A_Type03-Obj6A_TypeIndex
000173E8 0000                       		dc.w Obj6A_Type04-Obj6A_TypeIndex
000173EA                            ; ===========================================================================
000173EA                            
000173EA                            Obj6A_Type00:				; XREF: Obj6A_TypeIndex
000173EA 4E75                       		rts	
000173EC                            ; ===========================================================================
000173EC                            
000173EC                            Obj6A_Type01:				; XREF: Obj6A_TypeIndex
000173EC 323C 0060                  		move.w	#$60,d1
000173F0 7000                       		moveq	#0,d0
000173F2 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
000173F6 0828 0000 0022             		btst	#0,$22(a0)
000173FC 6700                       		beq.s	Obj6A_Animate01
000173FE 4440                       		neg.w	d0
00017400 D041                       		add.w	d1,d0
00017402                            
00017402                            Obj6A_Animate01:
00017402 3228 003A                  		move.w	$3A(a0),d1
00017406 9240                       		sub.w	d0,d1
00017408 3141 0008                  		move.w	d1,8(a0)	; move saw sideways
0001740C 5328 001E                  		subq.b	#1,$1E(a0)
00017410 6A00                       		bpl.s	loc_15A46
00017412 117C 0002 001E             		move.b	#2,$1E(a0)	; time between frame changes
00017418 0868 0000 001A             		bchg	#0,$1A(a0)	; change frame
0001741E                            
0001741E                            loc_15A46:
0001741E 4A28 0001                  		tst.b	1(a0)
00017422 6A00                       		bpl.s	locret_15A60
00017424 3038 FE04                  		move.w	($FFFFFE04).w,d0
00017428 0240 000F                  		andi.w	#$F,d0
0001742C 6600                       		bne.s	locret_15A60
0001742E 303C 00B0                  		move.w	#$B0,d0
00017432 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play saw sound
00017438                            
00017438                            locret_15A60:
00017438 4E75                       		rts	
0001743A                            ; ===========================================================================
0001743A                            
0001743A                            Obj6A_Type02:				; XREF: Obj6A_TypeIndex
0001743A 323C 0030                  		move.w	#$30,d1
0001743E 7000                       		moveq	#0,d0
00017440 1038 FE64                  		move.b	($FFFFFE64).w,d0
00017444 0828 0000 0022             		btst	#0,$22(a0)
0001744A 6700                       		beq.s	Obj6A_Animate02
0001744C 4440                       		neg.w	d0
0001744E 0640 0080                  		addi.w	#$80,d0
00017452                            
00017452                            Obj6A_Animate02:
00017452 3228 0038                  		move.w	$38(a0),d1
00017456 9240                       		sub.w	d0,d1
00017458 3141 000C                  		move.w	d1,$C(a0)	; move saw vertically
0001745C 5328 001E                  		subq.b	#1,$1E(a0)
00017460 6A00                       		bpl.s	loc_15A96
00017462 117C 0002 001E             		move.b	#2,$1E(a0)
00017468 0868 0000 001A             		bchg	#0,$1A(a0)
0001746E                            
0001746E                            loc_15A96:
0001746E 4A28 0001                  		tst.b	1(a0)
00017472 6A00                       		bpl.s	locret_15AB0
00017474 1038 FE64                  		move.b	($FFFFFE64).w,d0
00017478 0C00 0018                  		cmpi.b	#$18,d0
0001747C 6600                       		bne.s	locret_15AB0
0001747E 303C 00B0                  		move.w	#$B0,d0
00017482 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play saw sound
00017488                            
00017488                            locret_15AB0:
00017488 4E75                       		rts	
0001748A                            ; ===========================================================================
0001748A                            
0001748A                            Obj6A_Type03:				; XREF: Obj6A_TypeIndex
0001748A 4A28 003D                  		tst.b	$3D(a0)
0001748E 6600                       		bne.s	Obj6A_Animate03
00017490 3038 D008                  		move.w	($FFFFD008).w,d0
00017494 0440 00C0                  		subi.w	#$C0,d0
00017498 6500                       		bcs.s	loc_15B02
0001749A 9068 0008                  		sub.w	8(a0),d0
0001749E 6500                       		bcs.s	loc_15B02
000174A0 3038 D00C                  		move.w	($FFFFD00C).w,d0
000174A4 0440 0080                  		subi.w	#$80,d0
000174A8 B068 000C                  		cmp.w	$C(a0),d0
000174AC 6400                       		bcc.s	locret_15B04
000174AE 0640 0100                  		addi.w	#$100,d0
000174B2 B068 000C                  		cmp.w	$C(a0),d0
000174B6 6500                       		bcs.s	locret_15B04
000174B8 117C 0001 003D             		move.b	#1,$3D(a0)
000174BE 317C 0600 0010             		move.w	#$600,$10(a0)	; move object to the right
000174C4 117C 00A2 0020             		move.b	#$A2,$20(a0)
000174CA 117C 0002 001A             		move.b	#2,$1A(a0)
000174D0 303C 00B0                  		move.w	#$B0,d0
000174D4 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play saw sound
000174DA                            
000174DA                            loc_15B02:
000174DA 588F                       		addq.l	#4,sp
000174DC                            
000174DC                            locret_15B04:
000174DC 4E75                       		rts	
000174DE                            ; ===========================================================================
000174DE                            
000174DE                            Obj6A_Animate03:			; XREF: ROM:00015AB6j
000174DE 4EB9 0000 E0E4             		jsr	SpeedToPos
000174E4 3168 0008 003A             		move.w	8(a0),$3A(a0)
000174EA 5328 001E                  		subq.b	#1,$1E(a0)
000174EE 6A00                       		bpl.s	locret_15B24
000174F0 117C 0002 001E             		move.b	#2,$1E(a0)
000174F6 0868 0000 001A             		bchg	#0,$1A(a0)
000174FC                            
000174FC                            locret_15B24:
000174FC 4E75                       		rts	
000174FE                            ; ===========================================================================
000174FE                            
000174FE                            Obj6A_Type04:				; XREF: Obj6A_TypeIndex
000174FE 4A28 003D                  		tst.b	$3D(a0)
00017502 6600                       		bne.s	Obj6A_Animate04
00017504 3038 D008                  		move.w	($FFFFD008).w,d0
00017508 0640 00E0                  		addi.w	#$E0,d0
0001750C 9068 0008                  		sub.w	8(a0),d0
00017510 6400                       		bcc.s	loc_15B74
00017512 3038 D00C                  		move.w	($FFFFD00C).w,d0
00017516 0440 0080                  		subi.w	#$80,d0
0001751A B068 000C                  		cmp.w	$C(a0),d0
0001751E 6400                       		bcc.s	locret_15B76
00017520 0640 0100                  		addi.w	#$100,d0
00017524 B068 000C                  		cmp.w	$C(a0),d0
00017528 6500                       		bcs.s	locret_15B76
0001752A 117C 0001 003D             		move.b	#1,$3D(a0)
00017530 317C FA00 0010             		move.w	#-$600,$10(a0)	; move object to the left
00017536 117C 00A2 0020             		move.b	#$A2,$20(a0)
0001753C 117C 0002 001A             		move.b	#2,$1A(a0)
00017542 303C 00B0                  		move.w	#$B0,d0
00017546 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play saw sound
0001754C                            
0001754C                            loc_15B74:
0001754C 588F                       		addq.l	#4,sp
0001754E                            
0001754E                            locret_15B76:
0001754E 4E75                       		rts	
00017550                            ; ===========================================================================
00017550                            
00017550                            Obj6A_Animate04:
00017550 4EB9 0000 E0E4             		jsr	SpeedToPos
00017556 3168 0008 003A             		move.w	8(a0),$3A(a0)
0001755C 5328 001E                  		subq.b	#1,$1E(a0)
00017560 6A00                       		bpl.s	locret_15B96
00017562 117C 0002 001E             		move.b	#2,$1E(a0)
00017568 0868 0000 001A             		bchg	#0,$1A(a0)
0001756E                            
0001756E                            locret_15B96:
0001756E 4E75                       		rts	
00017570                            ; ===========================================================================
00017570                            ; ---------------------------------------------------------------------------
00017570                            ; Sprite mappings - ground saws	and pizza cutters (SBZ)
00017570                            ; ---------------------------------------------------------------------------
00017570                            Map_obj6A:
00017570                            	include "_maps\obj6A.asm"
00017570                            ; ---------------------------------------------------------------------------
00017570                            ; Sprite mappings - ground saws	and pizza cutters (SBZ)
00017570                            ; ---------------------------------------------------------------------------
00017570 0000 0000                  		dc.w byte_15BA0-Map_obj6A, byte_15BC4-Map_obj6A
00017574 0000 0000                  		dc.w byte_15BE8-Map_obj6A, byte_15BFD-Map_obj6A
00017578 07                         byte_15BA0:	dc.b 7
00017579 C401 0020 FC               		dc.b $C4, 1, 0,	$20, $FC
0001757E D401 0020 FC               		dc.b $D4, 1, 0,	$20, $FC
00017583 E403 0020 FC               		dc.b $E4, 3, 0,	$20, $FC
00017588 E00F 0000 E0               		dc.b $E0, $F, 0, 0, $E0
0001758D E00F 0800 00               		dc.b $E0, $F, 8, 0, 0
00017592 000F 1000 E0               		dc.b 0,	$F, $10, 0, $E0
00017597 000F 1800 00               		dc.b 0,	$F, $18, 0, 0
0001759C 07                         byte_15BC4:	dc.b 7
0001759D C401 0020 FC               		dc.b $C4, 1, 0,	$20, $FC
000175A2 D401 0020 FC               		dc.b $D4, 1, 0,	$20, $FC
000175A7 E403 0020 FC               		dc.b $E4, 3, 0,	$20, $FC
000175AC E00F 0010 E0               		dc.b $E0, $F, 0, $10, $E0
000175B1 E00F 0810 00               		dc.b $E0, $F, 8, $10, 0
000175B6 000F 1010 E0               		dc.b 0,	$F, $10, $10, $E0
000175BB 000F 1810 00               		dc.b 0,	$F, $18, $10, 0
000175C0 04                         byte_15BE8:	dc.b 4
000175C1 E00F 0000 E0               		dc.b $E0, $F, 0, 0, $E0
000175C6 E00F 0800 00               		dc.b $E0, $F, 8, 0, 0
000175CB 000F 1000 E0               		dc.b 0,	$F, $10, 0, $E0
000175D0 000F 1800 00               		dc.b 0,	$F, $18, 0, 0
000175D5 04                         byte_15BFD:	dc.b 4
000175D6 E00F 0010 E0               		dc.b $E0, $F, 0, $10, $E0
000175DB E00F 0810 00               		dc.b $E0, $F, 8, $10, 0
000175E0 000F 1010 E0               		dc.b 0,	$F, $10, $10, $E0
000175E5 000F 1810 00               		dc.b 0,	$F, $18, $10, 0
000175EA                            		even
000175EA                            		even
000175EA                            
000175EA                            ; ===========================================================================
000175EA                            ; ---------------------------------------------------------------------------
000175EA                            ; Object 6B - stomper (SBZ)
000175EA                            ; ---------------------------------------------------------------------------
000175EA                            
000175EA                            Obj6B:					; XREF: Obj_Index
000175EA 7000                       		moveq	#0,d0
000175EC 1028 0024                  		move.b	$24(a0),d0
000175F0 323B 0000                  		move.w	Obj6B_Index(pc,d0.w),d1
000175F4 4EFB 1000                  		jmp	Obj6B_Index(pc,d1.w)
000175F8                            ; ===========================================================================
000175F8 0000                       Obj6B_Index:	dc.w Obj6B_Main-Obj6B_Index
000175FA 0000                       		dc.w Obj6B_Action-Obj6B_Index
000175FC                            
000175FC 400C 8001                  Obj6B_Var:	dc.b  $40,  $C,	$80,   1 ; width, height, ????,	type number
00017600 1C20 3803                  		dc.b  $1C, $20,	$38,   3
00017604 1C20 4004                  		dc.b  $1C, $20,	$40,   4
00017608 1C20 6004                  		dc.b  $1C, $20,	$60,   4
0001760C 8040 0005                  		dc.b  $80, $40,	  0,   5
00017610                            ; ===========================================================================
00017610                            
00017610                            Obj6B_Main:				; XREF: Obj6B_Index
00017610 5428 0024                  		addq.b	#2,$24(a0)
00017614 7000                       		moveq	#0,d0
00017616 1028 0028                  		move.b	$28(a0),d0
0001761A E448                       		lsr.w	#2,d0
0001761C 0240 001C                  		andi.w	#$1C,d0
00017620 47FB 00DA                  		lea	Obj6B_Var(pc,d0.w),a3
00017624 115B 0019                  		move.b	(a3)+,$19(a0)
00017628 115B 0016                  		move.b	(a3)+,$16(a0)
0001762C E448                       		lsr.w	#2,d0
0001762E 1140 001A                  		move.b	d0,$1A(a0)
00017632 217C 0000 0000 0004        		move.l	#Map_obj6B,4(a0)
0001763A 317C 22C0 0002             		move.w	#$22C0,2(a0)
00017640 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ/SBZ3
00017646 6600                       		bne.s	Obj6B_SBZ12	; if not, branch
00017648 08F8 0000 F7CB             		bset	#0,($FFFFF7CB).w
0001764E 6700                       		beq.s	Obj6B_SBZ3
00017650                            
00017650                            Obj6B_ChkGone:				; XREF: Obj6B_SBZ3
00017650 45F8 FC00                  		lea	($FFFFFC00).w,a2
00017654 7000                       		moveq	#0,d0
00017656 1028 0023                  		move.b	$23(a0),d0
0001765A 6700                       		beq.s	Obj6B_Delete
0001765C 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00017662                            
00017662                            Obj6B_Delete:
00017662 4EF9 0000 E146             		jmp	DeleteObject
00017668                            ; ===========================================================================
00017668                            
00017668                            Obj6B_SBZ3:				; XREF: Obj6B_Main
00017668 317C 41F0 0002             		move.w	#$41F0,2(a0)
0001766E 0C68 0A80 0008             		cmpi.w	#$A80,8(a0)
00017674 6600                       		bne.s	Obj6B_SBZ12
00017676 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001767A 7000                       		moveq	#0,d0
0001767C 1028 0023                  		move.b	$23(a0),d0
00017680 6700                       		beq.s	Obj6B_SBZ12
00017682 0832 0000 0002             		btst	#0,2(a2,d0.w)
00017688 6700                       		beq.s	Obj6B_SBZ12
0001768A 4238 F7CB                  		clr.b	($FFFFF7CB).w
0001768E 60C0                       		bra.s	Obj6B_ChkGone
00017690                            ; ===========================================================================
00017690                            
00017690                            Obj6B_SBZ12:				; XREF: Obj6B_Main
00017690 0028 0004 0001             		ori.b	#4,1(a0)
00017696 117C 0004 0018             		move.b	#4,$18(a0)
0001769C 3168 0008 0034             		move.w	8(a0),$34(a0)
000176A2 3168 000C 0030             		move.w	$C(a0),$30(a0)
000176A8 7000                       		moveq	#0,d0
000176AA 101B                       		move.b	(a3)+,d0
000176AC 3140 003C                  		move.w	d0,$3C(a0)
000176B0 7000                       		moveq	#0,d0
000176B2 1028 0028                  		move.b	$28(a0),d0
000176B6 6A00                       		bpl.s	Obj6B_Action
000176B8 0200 000F                  		andi.b	#$F,d0
000176BC 1140 003E                  		move.b	d0,$3E(a0)
000176C0 1153 0028                  		move.b	(a3),$28(a0)
000176C4 0C13 0005                  		cmpi.b	#5,(a3)
000176C8 6600                       		bne.s	Obj6B_ChkGone2
000176CA 08E8 0004 0001             		bset	#4,1(a0)
000176D0                            
000176D0                            Obj6B_ChkGone2:
000176D0 45F8 FC00                  		lea	($FFFFFC00).w,a2
000176D4 7000                       		moveq	#0,d0
000176D6 1028 0023                  		move.b	$23(a0),d0
000176DA 6700                       		beq.s	Obj6B_Action
000176DC 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
000176E2                            
000176E2                            Obj6B_Action:				; XREF: Obj6B_Index
000176E2 3F28 0008                  		move.w	8(a0),-(sp)
000176E6 7000                       		moveq	#0,d0
000176E8 1028 0028                  		move.b	$28(a0),d0
000176EC 0240 000F                  		andi.w	#$F,d0
000176F0 D040                       		add.w	d0,d0
000176F2 323B 0000                  		move.w	Obj6B_TypeIndex(pc,d0.w),d1
000176F6 4EBB 1000                  		jsr	Obj6B_TypeIndex(pc,d1.w)
000176FA 381F                       		move.w	(sp)+,d4
000176FC 4A28 0001                  		tst.b	1(a0)
00017700 6A00                       		bpl.s	Obj6B_ChkDel
00017702 7200                       		moveq	#0,d1
00017704 1228 0019                  		move.b	$19(a0),d1
00017708 0641 000B                  		addi.w	#$B,d1
0001770C 7400                       		moveq	#0,d2
0001770E 1428 0016                  		move.b	$16(a0),d2
00017712 3602                       		move.w	d2,d3
00017714 5243                       		addq.w	#1,d3
00017716 6100 8DDC                  		bsr.w	SolidObject
0001771A                            
0001771A                            Obj6B_ChkDel:
0001771A 3028 0034                  		move.w	$34(a0),d0
0001771E 0240 FF80                  		andi.w	#$FF80,d0
00017722 3238 F700                  		move.w	($FFFFF700).w,d1
00017726 0441 0080                  		subi.w	#$80,d1
0001772A 0241 FF80                  		andi.w	#$FF80,d1
0001772E 9041                       		sub.w	d1,d0
00017730 0C40 0280                  		cmpi.w	#$280,d0
00017734 6200                       		bhi.s	loc_15D64
00017736 4EF9 0000 E10A             		jmp	DisplaySprite
0001773C                            ; ===========================================================================
0001773C                            
0001773C                            loc_15D64:
0001773C 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00017742 6600                       		bne.s	Obj6B_Delete2
00017744 4238 F7CB                  		clr.b	($FFFFF7CB).w
00017748 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001774C 7000                       		moveq	#0,d0
0001774E 1028 0023                  		move.b	$23(a0),d0
00017752 6700                       		beq.s	Obj6B_Delete2
00017754 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0001775A                            
0001775A                            Obj6B_Delete2:
0001775A 4EF9 0000 E146             		jmp	DeleteObject
00017760                            ; ===========================================================================
00017760 0000 0000                  Obj6B_TypeIndex:dc.w Obj6B_Type00-Obj6B_TypeIndex, Obj6B_Type01-Obj6B_TypeIndex
00017764 0000 0000                  		dc.w Obj6B_Type02-Obj6B_TypeIndex, Obj6B_Type03-Obj6B_TypeIndex
00017768 0000 0000                  		dc.w Obj6B_Type04-Obj6B_TypeIndex, Obj6B_Type05-Obj6B_TypeIndex
0001776C                            ; ===========================================================================
0001776C                            
0001776C                            Obj6B_Type00:				; XREF: Obj6B_TypeIndex
0001776C 4E75                       		rts	
0001776E                            ; ===========================================================================
0001776E                            
0001776E                            Obj6B_Type01:				; XREF: Obj6B_TypeIndex
0001776E 4A28 0038                  		tst.b	$38(a0)
00017772 6600                       		bne.s	loc_15DB4
00017774 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00017778 7000                       		moveq	#0,d0
0001777A 1028 003E                  		move.b	$3E(a0),d0
0001777E 0832 0000 0000             		btst	#0,(a2,d0.w)
00017784 6700                       		beq.s	loc_15DC2
00017786 117C 0001 0038             		move.b	#1,$38(a0)
0001778C                            
0001778C                            loc_15DB4:
0001778C 3028 003C                  		move.w	$3C(a0),d0
00017790 B068 003A                  		cmp.w	$3A(a0),d0
00017794 6700                       		beq.s	loc_15DE0
00017796 5468 003A                  		addq.w	#2,$3A(a0)
0001779A                            
0001779A                            loc_15DC2:
0001779A 3028 003A                  		move.w	$3A(a0),d0
0001779E 0828 0000 0022             		btst	#0,$22(a0)
000177A4 6700                       		beq.s	loc_15DD4
000177A6 4440                       		neg.w	d0
000177A8 0640 0080                  		addi.w	#$80,d0
000177AC                            
000177AC                            loc_15DD4:
000177AC 3228 0034                  		move.w	$34(a0),d1
000177B0 9240                       		sub.w	d0,d1
000177B2 3141 0008                  		move.w	d1,8(a0)
000177B6 4E75                       		rts	
000177B8                            ; ===========================================================================
000177B8                            
000177B8                            loc_15DE0:
000177B8 5228 0028                  		addq.b	#1,$28(a0)
000177BC 317C 00B4 0036             		move.w	#$B4,$36(a0)
000177C2 4228 0038                  		clr.b	$38(a0)
000177C6 45F8 FC00                  		lea	($FFFFFC00).w,a2
000177CA 7000                       		moveq	#0,d0
000177CC 1028 0023                  		move.b	$23(a0),d0
000177D0 67C8                       		beq.s	loc_15DC2
000177D2 08F2 0000 0002             		bset	#0,2(a2,d0.w)
000177D8 60C0                       		bra.s	loc_15DC2
000177DA                            ; ===========================================================================
000177DA                            
000177DA                            Obj6B_Type02:				; XREF: Obj6B_TypeIndex
000177DA 4A28 0038                  		tst.b	$38(a0)
000177DE 6600                       		bne.s	loc_15E14
000177E0 5368 0036                  		subq.w	#1,$36(a0)
000177E4 6600                       		bne.s	loc_15E1E
000177E6 117C 0001 0038             		move.b	#1,$38(a0)
000177EC                            
000177EC                            loc_15E14:
000177EC 4A68 003A                  		tst.w	$3A(a0)
000177F0 6700                       		beq.s	loc_15E3C
000177F2 5568 003A                  		subq.w	#2,$3A(a0)
000177F6                            
000177F6                            loc_15E1E:
000177F6 3028 003A                  		move.w	$3A(a0),d0
000177FA 0828 0000 0022             		btst	#0,$22(a0)
00017800 6700                       		beq.s	loc_15E30
00017802 4440                       		neg.w	d0
00017804 0640 0080                  		addi.w	#$80,d0
00017808                            
00017808                            loc_15E30:
00017808 3228 0034                  		move.w	$34(a0),d1
0001780C 9240                       		sub.w	d0,d1
0001780E 3141 0008                  		move.w	d1,8(a0)
00017812 4E75                       		rts	
00017814                            ; ===========================================================================
00017814                            
00017814                            loc_15E3C:
00017814 5328 0028                  		subq.b	#1,$28(a0)
00017818 4228 0038                  		clr.b	$38(a0)
0001781C 45F8 FC00                  		lea	($FFFFFC00).w,a2
00017820 7000                       		moveq	#0,d0
00017822 1028 0023                  		move.b	$23(a0),d0
00017826 67CE                       		beq.s	loc_15E1E
00017828 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
0001782E 60C6                       		bra.s	loc_15E1E
00017830                            ; ===========================================================================
00017830                            
00017830                            Obj6B_Type03:				; XREF: Obj6B_TypeIndex
00017830 4A28 0038                  		tst.b	$38(a0)
00017834 6600                       		bne.s	loc_15E7C
00017836 4A68 003A                  		tst.w	$3A(a0)
0001783A 6700                       		beq.s	loc_15E6A
0001783C 5368 003A                  		subq.w	#1,$3A(a0)
00017840 6000                       		bra.s	loc_15E8E
00017842                            ; ===========================================================================
00017842                            
00017842                            loc_15E6A:
00017842 5368 0036                  		subq.w	#1,$36(a0)
00017846 6A00                       		bpl.s	loc_15E8E
00017848 317C 003C 0036             		move.w	#$3C,$36(a0)
0001784E 117C 0001 0038             		move.b	#1,$38(a0)
00017854                            
00017854                            loc_15E7C:
00017854 5068 003A                  		addq.w	#8,$3A(a0)
00017858 3028 003A                  		move.w	$3A(a0),d0
0001785C B068 003C                  		cmp.w	$3C(a0),d0
00017860 6600                       		bne.s	loc_15E8E
00017862 4228 0038                  		clr.b	$38(a0)
00017866                            
00017866                            loc_15E8E:
00017866 3028 003A                  		move.w	$3A(a0),d0
0001786A 0828 0000 0022             		btst	#0,$22(a0)
00017870 6700                       		beq.s	loc_15EA0
00017872 4440                       		neg.w	d0
00017874 0640 0038                  		addi.w	#$38,d0
00017878                            
00017878                            loc_15EA0:
00017878 3228 0030                  		move.w	$30(a0),d1
0001787C D240                       		add.w	d0,d1
0001787E 3141 000C                  		move.w	d1,$C(a0)
00017882 4E75                       		rts	
00017884                            ; ===========================================================================
00017884                            
00017884                            Obj6B_Type04:				; XREF: Obj6B_TypeIndex
00017884 4A28 0038                  		tst.b	$38(a0)
00017888 6600                       		bne.s	loc_15ED0
0001788A 4A68 003A                  		tst.w	$3A(a0)
0001788E 6700                       		beq.s	loc_15EBE
00017890 5168 003A                  		subq.w	#8,$3A(a0)
00017894 6000                       		bra.s	loc_15EF0
00017896                            ; ===========================================================================
00017896                            
00017896                            loc_15EBE:
00017896 5368 0036                  		subq.w	#1,$36(a0)
0001789A 6A00                       		bpl.s	loc_15EF0
0001789C 317C 003C 0036             		move.w	#$3C,$36(a0)
000178A2 117C 0001 0038             		move.b	#1,$38(a0)
000178A8                            
000178A8                            loc_15ED0:
000178A8 3028 003A                  		move.w	$3A(a0),d0
000178AC B068 003C                  		cmp.w	$3C(a0),d0
000178B0 6700                       		beq.s	loc_15EE0
000178B2 5068 003A                  		addq.w	#8,$3A(a0)
000178B6 6000                       		bra.s	loc_15EF0
000178B8                            ; ===========================================================================
000178B8                            
000178B8                            loc_15EE0:
000178B8 5368 0036                  		subq.w	#1,$36(a0)
000178BC 6A00                       		bpl.s	loc_15EF0
000178BE 317C 003C 0036             		move.w	#$3C,$36(a0)
000178C4 4228 0038                  		clr.b	$38(a0)
000178C8                            
000178C8                            loc_15EF0:
000178C8 3028 003A                  		move.w	$3A(a0),d0
000178CC 0828 0000 0022             		btst	#0,$22(a0)
000178D2 6700                       		beq.s	loc_15F02
000178D4 4440                       		neg.w	d0
000178D6 0640 0038                  		addi.w	#$38,d0
000178DA                            
000178DA                            loc_15F02:
000178DA 3228 0030                  		move.w	$30(a0),d1
000178DE D240                       		add.w	d0,d1
000178E0 3141 000C                  		move.w	d1,$C(a0)
000178E4 4E75                       		rts	
000178E6                            ; ===========================================================================
000178E6                            
000178E6                            Obj6B_Type05:				; XREF: Obj6B_TypeIndex
000178E6 4A28 0038                  		tst.b	$38(a0)
000178EA 6600                       		bne.s	loc_15F3E
000178EC 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
000178F0 7000                       		moveq	#0,d0
000178F2 1028 003E                  		move.b	$3E(a0),d0
000178F6 0832 0000 0000             		btst	#0,(a2,d0.w)
000178FC 6700                       		beq.s	locret_15F5C
000178FE 117C 0001 0038             		move.b	#1,$38(a0)
00017904 45F8 FC00                  		lea	($FFFFFC00).w,a2
00017908 7000                       		moveq	#0,d0
0001790A 1028 0023                  		move.b	$23(a0),d0
0001790E 6700                       		beq.s	loc_15F3E
00017910 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00017916                            
00017916                            loc_15F3E:
00017916 04A8 0001 0000 0008        		subi.l	#$10000,8(a0)
0001791E 06A8 0000 8000 000C        		addi.l	#$8000,$C(a0)
00017926 3168 0008 0034             		move.w	8(a0),$34(a0)
0001792C 0C68 0980 0008             		cmpi.w	#$980,8(a0)
00017932 6700                       		beq.s	loc_15F5E
00017934                            
00017934                            locret_15F5C:
00017934 4E75                       		rts	
00017936                            ; ===========================================================================
00017936                            
00017936                            loc_15F5E:
00017936 4228 0028                  		clr.b	$28(a0)
0001793A 4228 0038                  		clr.b	$38(a0)
0001793E 4E75                       		rts	
00017940                            ; ===========================================================================
00017940                            ; ---------------------------------------------------------------------------
00017940                            ; Sprite mappings - stomper and	platforms (SBZ)
00017940                            ; ---------------------------------------------------------------------------
00017940                            Map_obj6B:
00017940                            	include "_maps\obj6B.asm"
00017940                            ; ---------------------------------------------------------------------------
00017940                            ; Sprite mappings - stomper and	platforms (SBZ)
00017940                            ; ---------------------------------------------------------------------------
00017940 0000 0000                  		dc.w byte_15F72-Map_obj6B, byte_15F87-Map_obj6B
00017944 0000 0000                  		dc.w byte_15F87-Map_obj6B, byte_15F87-Map_obj6B
00017948 0000                       		dc.w byte_15FB0-Map_obj6B
0001794A 04                         byte_15F72:	dc.b 4
0001794B F40E 21AF C0               		dc.b $F4, $E, $21, $AF,	$C0
00017950 F40E 21B2 E0               		dc.b $F4, $E, $21, $B2,	$E0
00017955 F40E 21B2 00               		dc.b $F4, $E, $21, $B2,	0
0001795A F40E 29AF 20               		dc.b $F4, $E, $29, $AF,	$20
0001795F 08                         byte_15F87:	dc.b 8
00017960 E00C 000C E4               		dc.b $E0, $C, 0, $C, $E4
00017965 E008 0010 04               		dc.b $E0, 8, 0,	$10, 4
0001796A E80E 2013 E4               		dc.b $E8, $E, $20, $13,	$E4
0001796F E80A 201F 04               		dc.b $E8, $A, $20, $1F,	4
00017974 000E 2013 E4               		dc.b 0,	$E, $20, $13, $E4
00017979 000A 201F 04               		dc.b 0,	$A, $20, $1F, 4
0001797E 180C 000C E4               		dc.b $18, $C, 0, $C, $E4
00017983 1808 0010 04               		dc.b $18, 8, 0,	$10, 4
00017988 0E                         byte_15FB0:	dc.b $E
00017989 C00F 0000 80               		dc.b $C0, $F, 0, 0, $80
0001798E C00F 0010 A0               		dc.b $C0, $F, 0, $10, $A0
00017993 C00F 0020 C0               		dc.b $C0, $F, 0, $20, $C0
00017998 C00F 0010 E0               		dc.b $C0, $F, 0, $10, $E0
0001799D C00F 0020 00               		dc.b $C0, $F, 0, $20, 0
000179A2 C00F 0010 20               		dc.b $C0, $F, 0, $10, $20
000179A7 C00F 0030 40               		dc.b $C0, $F, 0, $30, $40
000179AC C00D 0040 60               		dc.b $C0, $D, 0, $40, $60
000179B1 E00F 0048 80               		dc.b $E0, $F, 0, $48, $80
000179B6 E00F 0048 C0               		dc.b $E0, $F, 0, $48, $C0
000179BB E00F 0058 00               		dc.b $E0, $F, 0, $58, 0
000179C0 000F 0048 80               		dc.b 0,	$F, 0, $48, $80
000179C5 000F 0058 C0               		dc.b 0,	$F, 0, $58, $C0
000179CA 200F 0058 80               		dc.b $20, $F, 0, $58, $80
000179D0 00                         		even
000179D0 00                         		even
000179D0                            
000179D0                            ; ===========================================================================
000179D0                            ; ---------------------------------------------------------------------------
000179D0                            ; Object 6C - vanishing	platforms (SBZ)
000179D0                            ; ---------------------------------------------------------------------------
000179D0                            
000179D0                            Obj6C:					; XREF: Obj_Index
000179D0 7000                       		moveq	#0,d0
000179D2 1028 0024                  		move.b	$24(a0),d0
000179D6 323B 0000                  		move.w	Obj6C_Index(pc,d0.w),d1
000179DA 4EFB 1000                  		jmp	Obj6C_Index(pc,d1.w)
000179DE                            ; ===========================================================================
000179DE 0000                       Obj6C_Index:	dc.w Obj6C_Main-Obj6C_Index
000179E0 0000                       		dc.w Obj6C_Vanish-Obj6C_Index
000179E2 0000                       		dc.w Obj6C_Vanish-Obj6C_Index
000179E4 0000                       		dc.w loc_16068-Obj6C_Index
000179E6                            ; ===========================================================================
000179E6                            
000179E6                            Obj6C_Main:				; XREF: Obj6C_Index
000179E6 5C28 0024                  		addq.b	#6,$24(a0)
000179EA 217C 0000 0000 0004        		move.l	#Map_obj6C,4(a0)
000179F2 317C 44C3 0002             		move.w	#$44C3,2(a0)
000179F8 0028 0004 0001             		ori.b	#4,1(a0)
000179FE 117C 0010 0019             		move.b	#$10,$19(a0)
00017A04 117C 0004 0018             		move.b	#4,$18(a0)
00017A0A 7000                       		moveq	#0,d0
00017A0C 1028 0028                  		move.b	$28(a0),d0	; get object type
00017A10 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00017A14 5240                       		addq.w	#1,d0		; add 1
00017A16 EF48                       		lsl.w	#7,d0		; multiply by $80
00017A18 3200                       		move.w	d0,d1
00017A1A 5340                       		subq.w	#1,d0
00017A1C 3140 0030                  		move.w	d0,$30(a0)
00017A20 3140 0032                  		move.w	d0,$32(a0)
00017A24 7000                       		moveq	#0,d0
00017A26 1028 0028                  		move.b	$28(a0),d0	; get object type
00017A2A 0240 00F0                  		andi.w	#$F0,d0		; read only the	1st digit
00017A2E 0641 0080                  		addi.w	#$80,d1
00017A32 C0C1                       		mulu.w	d1,d0
00017A34 E088                       		lsr.l	#8,d0
00017A36 3140 0036                  		move.w	d0,$36(a0)
00017A3A 5341                       		subq.w	#1,d1
00017A3C 3141 0038                  		move.w	d1,$38(a0)
00017A40                            
00017A40                            loc_16068:				; XREF: Obj6C_Index
00017A40 3038 FE04                  		move.w	($FFFFFE04).w,d0
00017A44 9068 0036                  		sub.w	$36(a0),d0
00017A48 C068 0038                  		and.w	$38(a0),d0
00017A4C 6600                       		bne.s	Obj6C_Animate
00017A4E 5928 0024                  		subq.b	#4,$24(a0)
00017A52 6000                       		bra.s	Obj6C_Vanish
00017A54                            ; ===========================================================================
00017A54                            
00017A54                            Obj6C_Animate:
00017A54 43F9 0000 0000             		lea	(Ani_obj6C).l,a1
00017A5A 4EB9 0000 B21C             		jsr	AnimateSprite
00017A60 6000 876A                  		bra.w	MarkObjGone
00017A64                            ; ===========================================================================
00017A64                            
00017A64                            Obj6C_Vanish:				; XREF: Obj6C_Index
00017A64 5368 0030                  		subq.w	#1,$30(a0)
00017A68 6A00                       		bpl.s	loc_160AA
00017A6A 317C 007F 0030             		move.w	#127,$30(a0)
00017A70 4A28 001C                  		tst.b	$1C(a0)
00017A74 6700                       		beq.s	loc_160A4
00017A76 3168 0032 0030             		move.w	$32(a0),$30(a0)
00017A7C                            
00017A7C                            loc_160A4:
00017A7C 0868 0000 001C             		bchg	#0,$1C(a0)
00017A82                            
00017A82                            loc_160AA:
00017A82 43F9 0000 0000             		lea	(Ani_obj6C).l,a1
00017A88 4EB9 0000 B21C             		jsr	AnimateSprite
00017A8E 0828 0001 001A             		btst	#1,$1A(a0)	; has platform vanished?
00017A94 6600                       		bne.s	Obj6C_NotSolid	; if yes, branch
00017A96 0C28 0002 0024             		cmpi.b	#2,$24(a0)
00017A9C 6600                       		bne.s	loc_160D6
00017A9E 7200                       		moveq	#0,d1
00017AA0 1228 0019                  		move.b	$19(a0),d1
00017AA4 4EB9 0000 7EFC             		jsr	(PlatformObject).l
00017AAA 6000 8720                  		bra.w	MarkObjGone
00017AAE                            ; ===========================================================================
00017AAE                            
00017AAE                            loc_160D6:
00017AAE 7200                       		moveq	#0,d1
00017AB0 1228 0019                  		move.b	$19(a0),d1
00017AB4 4EB9 0000 8070             		jsr	(ExitPlatform).l
00017ABA 3428 0008                  		move.w	8(a0),d2
00017ABE 4EB9 0000 85DA             		jsr	(MvSonicOnPtfm2).l
00017AC4 6000 8706                  		bra.w	MarkObjGone
00017AC8                            ; ===========================================================================
00017AC8                            
00017AC8                            Obj6C_NotSolid:				; XREF: Obj6C_Vanish
00017AC8 0828 0003 0022             		btst	#3,$22(a0)
00017ACE 6700                       		beq.s	Obj6C_Display
00017AD0 43F8 D000                  		lea	($FFFFD000).w,a1
00017AD4 08A9 0003 0022             		bclr	#3,$22(a1)
00017ADA 08A8 0003 0022             		bclr	#3,$22(a0)
00017AE0 117C 0002 0024             		move.b	#2,$24(a0)
00017AE6 4228 0025                  		clr.b	$25(a0)
00017AEA                            
00017AEA                            Obj6C_Display:
00017AEA 6000 86E0                  		bra.w	MarkObjGone
00017AEE                            ; ===========================================================================
00017AEE                            Ani_obj6C:
00017AEE                            	include "_anim\obj6C.asm"
00017AEE                            ; ---------------------------------------------------------------------------
00017AEE                            ; Animation script - vanishing platforms (SBZ)
00017AEE                            ; ---------------------------------------------------------------------------
00017AEE 0000                       		dc.w byte_1611A-Ani_obj6C
00017AF0 0000                       		dc.w byte_16122-Ani_obj6C
00017AF2 0700 0102 03FE 0100        byte_1611A:	dc.b 7,	0, 1, 2, 3, $FE, 1, 0
00017AFA 0703 0201 00FE 0100        byte_16122:	dc.b 7,	3, 2, 1, 0, $FE, 1, 0
00017B02                            		even
00017B02                            		even
00017B02                            
00017B02                            ; ---------------------------------------------------------------------------
00017B02                            ; Sprite mappings - vanishing platforms	(SBZ)
00017B02                            ; ---------------------------------------------------------------------------
00017B02                            Map_obj6C:
00017B02                            	include "_maps\obj6C.asm"
00017B02                            ; ---------------------------------------------------------------------------
00017B02                            ; Sprite mappings - vanishing platforms	(SBZ)
00017B02                            ; ---------------------------------------------------------------------------
00017B02 0000 0000                  		dc.w byte_16132-Map_obj6C, byte_16138-Map_obj6C
00017B06 0000 0000                  		dc.w byte_1613E-Map_obj6C, byte_16144-Map_obj6C
00017B0A 01                         byte_16132:	dc.b 1
00017B0B F80F 0000 F0               		dc.b $F8, $F, 0, 0, $F0
00017B10 01                         byte_16138:	dc.b 1
00017B11 F807 0010 F8               		dc.b $F8, 7, 0,	$10, $F8
00017B16 01                         byte_1613E:	dc.b 1
00017B17 F803 0018 FC               		dc.b $F8, 3, 0,	$18, $FC
00017B1C 00                         byte_16144:	dc.b 0
00017B1E 00                         		even
00017B1E 00                         		even
00017B1E                            
00017B1E                            ; ===========================================================================
00017B1E                            ; ---------------------------------------------------------------------------
00017B1E                            ; Object 6E - electrocution orbs (SBZ)
00017B1E                            ; ---------------------------------------------------------------------------
00017B1E                            
00017B1E                            Obj6E:					; XREF: Obj_Index
00017B1E 7000                       		moveq	#0,d0
00017B20 1028 0024                  		move.b	$24(a0),d0
00017B24 323B 0000                  		move.w	Obj6E_Index(pc,d0.w),d1
00017B28 4EFB 1000                  		jmp	Obj6E_Index(pc,d1.w)
00017B2C                            ; ===========================================================================
00017B2C 0000                       Obj6E_Index:	dc.w Obj6E_Main-Obj6E_Index
00017B2E 0000                       		dc.w Obj6E_Shock-Obj6E_Index
00017B30                            ; ===========================================================================
00017B30                            
00017B30                            Obj6E_Main:				; XREF: Obj6E_Index
00017B30 5428 0024                  		addq.b	#2,$24(a0)
00017B34 217C 0000 0000 0004        		move.l	#Map_obj6E,4(a0)
00017B3C 317C 047E 0002             		move.w	#$47E,2(a0)
00017B42 0028 0004 0001             		ori.b	#4,1(a0)
00017B48 117C 0028 0019             		move.b	#$28,$19(a0)
00017B4E 7000                       		moveq	#0,d0
00017B50 1028 0028                  		move.b	$28(a0),d0	; read object type
00017B54 E948                       		lsl.w	#4,d0		; multiply by $10
00017B56 5340                       		subq.w	#1,d0
00017B58 3140 0034                  		move.w	d0,$34(a0)
00017B5C                            
00017B5C                            Obj6E_Shock:				; XREF: Obj6E_Index
00017B5C 3038 FE04                  		move.w	($FFFFFE04).w,d0
00017B60 C068 0034                  		and.w	$34(a0),d0
00017B64 6600                       		bne.s	Obj6E_Animate
00017B66 117C 0001 001C             		move.b	#1,$1C(a0)	; run "shocking" animation
00017B6C 4A28 0001                  		tst.b	1(a0)
00017B70 6A00                       		bpl.s	Obj6E_Animate
00017B72 303C 00B1                  		move.w	#$B1,d0
00017B76 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play electricity sound
00017B7C                            
00017B7C                            Obj6E_Animate:
00017B7C 43F9 0000 0000             		lea	(Ani_obj6E).l,a1
00017B82 4EB9 0000 B21C             		jsr	AnimateSprite
00017B88 117C 0000 0020             		move.b	#0,$20(a0)
00017B8E 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; is frame number 4 displayed?
00017B94 6600                       		bne.s	Obj6E_Display	; if not, branch
00017B96 117C 00A4 0020             		move.b	#$A4,$20(a0)	; if yes, make object hurt Sonic
00017B9C                            
00017B9C                            Obj6E_Display:
00017B9C 6000 862E                  		bra.w	MarkObjGone
00017BA0                            ; ===========================================================================
00017BA0                            Ani_obj6E:
00017BA0                            	include "_anim\obj6E.asm"
00017BA0                            ; ---------------------------------------------------------------------------
00017BA0                            ; Animation script - electrocution orbs (SBZ)
00017BA0                            ; ---------------------------------------------------------------------------
00017BA0 0000                       		dc.w byte_161CC-Ani_obj6E
00017BA2 0000                       		dc.w byte_161D0-Ani_obj6E
00017BA4 0700 FF00                  byte_161CC:	dc.b 7,	0, $FF,	0
00017BA8 0001 0101 0203 0304 0404+  byte_161D0:	dc.b 0,	1, 1, 1, 2, 3, 3, 4, 4,	4, 5, 5, 5, 0, $FD, 0
00017BB8                            		even
00017BB8                            		even
00017BB8                            
00017BB8                            ; ---------------------------------------------------------------------------
00017BB8                            ; Sprite mappings - electrocution orbs (SBZ)
00017BB8                            ; ---------------------------------------------------------------------------
00017BB8                            Map_obj6E:
00017BB8                            	include "_maps\obj6E.asm"
00017BB8                            ; ---------------------------------------------------------------------------
00017BB8                            ; Sprite mappings - electrocution orbs (SBZ)
00017BB8                            ; ---------------------------------------------------------------------------
00017BB8 0000 0000                  		dc.w byte_161EC-Map_obj6E, byte_161F7-Map_obj6E
00017BBC 0000 0000                  		dc.w byte_16207-Map_obj6E, byte_16221-Map_obj6E
00017BC0 0000 0000                  		dc.w byte_16236-Map_obj6E, byte_16255-Map_obj6E
00017BC4 02                         byte_161EC:	dc.b 2
00017BC5 F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
00017BCA 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
00017BCF 03                         byte_161F7:	dc.b 3
00017BD0 F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
00017BD5 F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
00017BDA 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
00017BDF 05                         byte_16207:	dc.b 5
00017BE0 F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
00017BE5 F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
00017BEA 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
00017BEF F60D 000C 08               		dc.b $F6, $D, 0, $C, 8
00017BF4 F60D 080C DC               		dc.b $F6, $D, 8, $C, $DC
00017BF9 04                         byte_16221:	dc.b 4
00017BFA F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
00017BFF 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
00017C04 F60D 000C 08               		dc.b $F6, $D, 0, $C, 8
00017C09 F60D 080C DC               		dc.b $F6, $D, 8, $C, $DC
00017C0E 06                         byte_16236:	dc.b 6
00017C0F F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
00017C14 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
00017C19 F60D 100C 08               		dc.b $F6, $D, $10, $C, 8
00017C1E F60D 180C DC               		dc.b $F6, $D, $18, $C, $DC
00017C23 F60D 000C 24               		dc.b $F6, $D, 0, $C, $24
00017C28 F60D 080C C0               		dc.b $F6, $D, 8, $C, $C0
00017C2D 04                         byte_16255:	dc.b 4
00017C2E F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
00017C33 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
00017C38 F60D 100C 24               		dc.b $F6, $D, $10, $C, $24
00017C3D F60D 180C C0               		dc.b $F6, $D, $18, $C, $C0
00017C42                            		even
00017C42                            		even
00017C42                            
00017C42                            ; ===========================================================================
00017C42                            ; ---------------------------------------------------------------------------
00017C42                            ; Object 6F - spinning platforms that move around a conveyor belt (SBZ)
00017C42                            ; ---------------------------------------------------------------------------
00017C42                            
00017C42                            Obj6F:					; XREF: Obj_Index
00017C42 7000                       		moveq	#0,d0
00017C44 1028 0024                  		move.b	$24(a0),d0
00017C48 323B 0000                  		move.w	Obj6F_Index(pc,d0.w),d1
00017C4C 4EBB 1000                  		jsr	Obj6F_Index(pc,d1.w)
00017C50 3028 0030                  		move.w	$30(a0),d0
00017C54 0240 FF80                  		andi.w	#$FF80,d0
00017C58 3238 F700                  		move.w	($FFFFF700).w,d1
00017C5C 0441 0080                  		subi.w	#$80,d1
00017C60 0241 FF80                  		andi.w	#$FF80,d1
00017C64 9041                       		sub.w	d1,d0
00017C66 0C40 0280                  		cmpi.w	#$280,d0
00017C6A 6200                       		bhi.s	loc_1629A
00017C6C                            
00017C6C                            Obj6F_Display:
00017C6C 4EF9 0000 E10A             		jmp	DisplaySprite
00017C72                            ; ===========================================================================
00017C72                            
00017C72                            loc_1629A:
00017C72 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w ; check if act	is 3
00017C78 6600                       		bne.s	Obj6F_Act1or2	; if not, branch
00017C7A 0C40 FF80                  		cmpi.w	#-$80,d0
00017C7E 64EC                       		bcc.s	Obj6F_Display
00017C80                            
00017C80                            Obj6F_Act1or2:
00017C80 1028 002F                  		move.b	$2F(a0),d0
00017C84 6A00                       		bpl.s	Obj6F_Delete
00017C86 0240 007F                  		andi.w	#$7F,d0
00017C8A 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00017C8E 08B2 0000 0000             		bclr	#0,(a2,d0.w)
00017C94                            
00017C94                            Obj6F_Delete:
00017C94 4EF9 0000 E146             		jmp	DeleteObject
00017C9A                            ; ===========================================================================
00017C9A 0000                       Obj6F_Index:	dc.w Obj6F_Main-Obj6F_Index
00017C9C 0000                       		dc.w loc_163D8-Obj6F_Index
00017C9E                            ; ===========================================================================
00017C9E                            
00017C9E                            Obj6F_Main:				; XREF: Obj6F_Index
00017C9E 1028 0028                  		move.b	$28(a0),d0
00017CA2 6B00 0000                  		bmi.w	loc_16380
00017CA6 5428 0024                  		addq.b	#2,$24(a0)
00017CAA 217C 0001 7312 0004        		move.l	#Map_obj69a,4(a0)
00017CB2 317C 04DF 0002             		move.w	#$4DF,2(a0)
00017CB8 117C 0010 0019             		move.b	#$10,$19(a0)
00017CBE 0028 0004 0001             		ori.b	#4,1(a0)
00017CC4 117C 0004 0018             		move.b	#4,$18(a0)
00017CCA 7000                       		moveq	#0,d0
00017CCC 1028 0028                  		move.b	$28(a0),d0
00017CD0 3200                       		move.w	d0,d1
00017CD2 E648                       		lsr.w	#3,d0
00017CD4 0240 001E                  		andi.w	#$1E,d0
00017CD8 45FA 0000                  		lea	off_164A6(pc),a2
00017CDC D4F2 0000                  		adda.w	(a2,d0.w),a2
00017CE0 315A 0038                  		move.w	(a2)+,$38(a0)
00017CE4 315A 0030                  		move.w	(a2)+,$30(a0)
00017CE8 214A 003C                  		move.l	a2,$3C(a0)
00017CEC 0241 000F                  		andi.w	#$F,d1
00017CF0 E549                       		lsl.w	#2,d1
00017CF2 1141 0038                  		move.b	d1,$38(a0)
00017CF6 117C 0004 003A             		move.b	#4,$3A(a0)
00017CFC 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00017D00 6700                       		beq.s	loc_16356
00017D02 117C 0001 003B             		move.b	#1,$3B(a0)
00017D08 4428 003A                  		neg.b	$3A(a0)
00017D0C 7200                       		moveq	#0,d1
00017D0E 1228 0038                  		move.b	$38(a0),d1
00017D12 D228 003A                  		add.b	$3A(a0),d1
00017D16 B228 0039                  		cmp.b	$39(a0),d1
00017D1A 6500                       		bcs.s	loc_16352
00017D1C 1001                       		move.b	d1,d0
00017D1E 7200                       		moveq	#0,d1
00017D20 4A00                       		tst.b	d0
00017D22 6A00                       		bpl.s	loc_16352
00017D24 1228 0039                  		move.b	$39(a0),d1
00017D28 5901                       		subq.b	#4,d1
00017D2A                            
00017D2A                            loc_16352:
00017D2A 1141 0038                  		move.b	d1,$38(a0)
00017D2E                            
00017D2E                            loc_16356:
00017D2E 3172 1000 0034             		move.w	(a2,d1.w),$34(a0)
00017D34 3172 1002 0036             		move.w	2(a2,d1.w),$36(a0)
00017D3A 4A41                       		tst.w	d1
00017D3C 6600                       		bne.s	loc_1636C
00017D3E 117C 0001 001C             		move.b	#1,$1C(a0)
00017D44                            
00017D44                            loc_1636C:
00017D44 0C41 0008                  		cmpi.w	#8,d1
00017D48 6600                       		bne.s	loc_16378
00017D4A 117C 0000 001C             		move.b	#0,$1C(a0)
00017D50                            
00017D50                            loc_16378:
00017D50 6100 B332                  		bsr.w	Obj63_ChangeDir
00017D54 6000 0000                  		bra.w	loc_163D8
00017D58                            ; ===========================================================================
00017D58                            
00017D58                            loc_16380:				; XREF: Obj6F_Main
00017D58 1140 002F                  		move.b	d0,$2F(a0)
00017D5C 0240 007F                  		andi.w	#$7F,d0
00017D60 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00017D64 08F2 0000 0000             		bset	#0,(a2,d0.w)
00017D6A 6700                       		beq.s	loc_1639A
00017D6C 4EF9 0000 E146             		jmp	DeleteObject
00017D72                            ; ===========================================================================
00017D72                            
00017D72                            loc_1639A:
00017D72 D040                       		add.w	d0,d0
00017D74 0240 001E                  		andi.w	#$1E,d0
00017D78 0640 0080                  		addi.w	#$80,d0
00017D7C 45F9 0000 0000             		lea	(ObjPos_Index).l,a2
00017D82 D4F2 0000                  		adda.w	(a2,d0.w),a2
00017D86 321A                       		move.w	(a2)+,d1
00017D88 2248                       		movea.l	a0,a1
00017D8A 6000                       		bra.s	Obj6F_LoadPform
00017D8C                            ; ===========================================================================
00017D8C                            
00017D8C                            Obj6F_Loop:
00017D8C 4EB9 0000 E5A0             		jsr	SingleObjLoad
00017D92 6600                       		bne.s	loc_163D0
00017D94                            
00017D94                            Obj6F_LoadPform:			; XREF: loc_1639A
00017D94 12BC 006F                  		move.b	#$6F,0(a1)
00017D98 335A 0008                  		move.w	(a2)+,8(a1)
00017D9C 335A 000C                  		move.w	(a2)+,$C(a1)
00017DA0 301A                       		move.w	(a2)+,d0
00017DA2 1340 0028                  		move.b	d0,$28(a1)
00017DA6                            
00017DA6                            loc_163D0:
00017DA6 51C9 FFE4                  		dbf	d1,Obj6F_Loop
00017DAA                            
00017DAA 588F                       		addq.l	#4,sp
00017DAC 4E75                       		rts	
00017DAE                            ; ===========================================================================
00017DAE                            
00017DAE                            loc_163D8:				; XREF: Obj6F_Index
00017DAE 43F9 0000 0000             		lea	(Ani_obj6F).l,a1
00017DB4 4EB9 0000 B21C             		jsr	AnimateSprite
00017DBA 4A28 001A                  		tst.b	$1A(a0)
00017DBE 6600                       		bne.s	loc_16404
00017DC0 3F28 0008                  		move.w	8(a0),-(sp)
00017DC4 6100 0000                  		bsr.w	loc_16424
00017DC8 323C 001B                  		move.w	#$1B,d1
00017DCC 343C 0007                  		move.w	#7,d2
00017DD0 3602                       		move.w	d2,d3
00017DD2 5243                       		addq.w	#1,d3
00017DD4 381F                       		move.w	(sp)+,d4
00017DD6 6000 871C                  		bra.w	SolidObject
00017DDA                            ; ===========================================================================
00017DDA                            
00017DDA                            loc_16404:
00017DDA 0828 0003 0022             		btst	#3,$22(a0)
00017DE0 6700                       		beq.s	loc_16420
00017DE2 43F8 D000                  		lea	($FFFFD000).w,a1
00017DE6 08A9 0003 0022             		bclr	#3,$22(a1)
00017DEC 08A8 0003 0022             		bclr	#3,$22(a0)
00017DF2 4228 0025                  		clr.b	$25(a0)
00017DF6                            
00017DF6                            loc_16420:
00017DF6 6000 0002                  		bra.w	*+4
00017DFA                            
00017DFA                            loc_16424:
00017DFA 3028 0008                  		move.w	8(a0),d0
00017DFE B068 0034                  		cmp.w	$34(a0),d0
00017E02 6600                       		bne.s	loc_16484
00017E04 3028 000C                  		move.w	$C(a0),d0
00017E08 B068 0036                  		cmp.w	$36(a0),d0
00017E0C 6600                       		bne.s	loc_16484
00017E0E 7200                       		moveq	#0,d1
00017E10 1228 0038                  		move.b	$38(a0),d1
00017E14 D228 003A                  		add.b	$3A(a0),d1
00017E18 B228 0039                  		cmp.b	$39(a0),d1
00017E1C 6500                       		bcs.s	loc_16456
00017E1E 1001                       		move.b	d1,d0
00017E20 7200                       		moveq	#0,d1
00017E22 4A00                       		tst.b	d0
00017E24 6A00                       		bpl.s	loc_16456
00017E26 1228 0039                  		move.b	$39(a0),d1
00017E2A 5901                       		subq.b	#4,d1
00017E2C                            
00017E2C                            loc_16456:
00017E2C 1141 0038                  		move.b	d1,$38(a0)
00017E30 2268 003C                  		movea.l	$3C(a0),a1
00017E34 3171 1000 0034             		move.w	(a1,d1.w),$34(a0)
00017E3A 3171 1002 0036             		move.w	2(a1,d1.w),$36(a0)
00017E40 4A41                       		tst.w	d1
00017E42 6600                       		bne.s	loc_16474
00017E44 117C 0001 001C             		move.b	#1,$1C(a0)
00017E4A                            
00017E4A                            loc_16474:
00017E4A 0C41 0008                  		cmpi.w	#8,d1
00017E4E 6600                       		bne.s	loc_16480
00017E50 117C 0000 001C             		move.b	#0,$1C(a0)
00017E56                            
00017E56                            loc_16480:
00017E56 6100 B22C                  		bsr.w	Obj63_ChangeDir
00017E5A                            
00017E5A                            loc_16484:
00017E5A 4EF9 0000 E0E4             		jmp	SpeedToPos
00017E60                            ; ===========================================================================
00017E60                            Ani_obj6F:
00017E60                            	include "_anim\obj6F.asm"
00017E60                            ; ---------------------------------------------------------------------------
00017E60                            ; Animation script - platform on conveyor belt (SBZ)
00017E60                            ; ---------------------------------------------------------------------------
00017E60 0000                       		dc.w byte_1648E-Ani_obj6F
00017E62 0000                       		dc.w byte_164A2-Ani_obj6F
00017E64 0000 0102 0304 4342 4140+  byte_1648E:	dc.b 0,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
00017E71 6423 2221 00FF 00          		dc.b $64, $23, $22, $21, 0, $FF, 0
00017E78 0F00 FF                    byte_164A2:	dc.b $F, 0, $FF
00017E7C 00                         		even
00017E7C 00                         		even
00017E7C                            
00017E7C 0000 0000 0000             off_164A6:	dc.w word_164B2-off_164A6, word_164C6-off_164A6, word_164DA-off_164A6
00017E82 0000 0000 0000             		dc.w word_164EE-off_164A6, word_16502-off_164A6, word_16516-off_164A6
00017E88 0010 0E80 0E14 0370 0EEF+  word_164B2:	dc.w $10, $E80,	$E14, $370, $EEF, $302,	$EEF, $340, $E14, $3AE
00017E9C 0010 0F80 0F14 02E0 0FEF+  word_164C6:	dc.w $10, $F80,	$F14, $2E0, $FEF, $272,	$FEF, $2B0, $F14, $31E
00017EB0 0010 1080 1014 0270 10EF+  word_164DA:	dc.w $10, $1080, $1014,	$270, $10EF, $202, $10EF, $240,	$1014, $2AE
00017EC4 0010 0F80 0F14 0570 0FEF+  word_164EE:	dc.w $10, $F80,	$F14, $570, $FEF, $502,	$FEF, $540, $F14, $5AE
00017ED8 0010 1B80 1B14 0670 1BEF+  word_16502:	dc.w $10, $1B80, $1B14,	$670, $1BEF, $602, $1BEF, $640,	$1B14, $6AE
00017EEC 0010 1C80 1C14 05E0 1CEF+  word_16516:	dc.w $10, $1C80, $1C14,	$5E0, $1CEF, $572, $1CEF, $5B0,	$1C14, $61E
00017F00                            ; ===========================================================================
00017F00                            ; ---------------------------------------------------------------------------
00017F00                            ; Object 70 - large girder block (SBZ)
00017F00                            ; ---------------------------------------------------------------------------
00017F00                            
00017F00                            Obj70:					; XREF: Obj_Index
00017F00 7000                       		moveq	#0,d0
00017F02 1028 0024                  		move.b	$24(a0),d0
00017F06 323B 0000                  		move.w	Obj70_Index(pc,d0.w),d1
00017F0A 4EFB 1000                  		jmp	Obj70_Index(pc,d1.w)
00017F0E                            ; ===========================================================================
00017F0E 0000                       Obj70_Index:	dc.w Obj70_Main-Obj70_Index
00017F10 0000                       		dc.w Obj70_Action-Obj70_Index
00017F12                            ; ===========================================================================
00017F12                            
00017F12                            Obj70_Main:				; XREF: Obj70_Index
00017F12 5428 0024                  		addq.b	#2,$24(a0)
00017F16 217C 0000 0000 0004        		move.l	#Map_obj70,4(a0)
00017F1E 317C 42F0 0002             		move.w	#$42F0,2(a0)
00017F24 0028 0004 0001             		ori.b	#4,1(a0)
00017F2A 117C 0004 0018             		move.b	#4,$18(a0)
00017F30 117C 0060 0019             		move.b	#$60,$19(a0)
00017F36 117C 0018 0016             		move.b	#$18,$16(a0)
00017F3C 3168 0008 0032             		move.w	8(a0),$32(a0)
00017F42 3168 000C 0030             		move.w	$C(a0),$30(a0)
00017F48 6100 0000                  		bsr.w	Obj70_Move2
00017F4C                            
00017F4C                            Obj70_Action:				; XREF: Obj70_Index
00017F4C 3F28 0008                  		move.w	8(a0),-(sp)
00017F50 4A68 003A                  		tst.w	$3A(a0)
00017F54 6700                       		beq.s	Obj70_Move
00017F56 5368 003A                  		subq.w	#1,$3A(a0)
00017F5A 6600                       		bne.s	Obj70_Solid
00017F5C                            
00017F5C                            Obj70_Move:
00017F5C 4EB9 0000 E0E4             		jsr	SpeedToPos
00017F62 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from movement duration
00017F66 6600                       		bne.s	Obj70_Solid	; if time remains, branch
00017F68 6100 0000                  		bsr.w	Obj70_Move2	; if time is zero, branch
00017F6C                            
00017F6C                            Obj70_Solid:
00017F6C 381F                       		move.w	(sp)+,d4
00017F6E 4A28 0001                  		tst.b	1(a0)
00017F72 6A00                       		bpl.s	Obj70_ChkDel
00017F74 7200                       		moveq	#0,d1
00017F76 1228 0019                  		move.b	$19(a0),d1
00017F7A 0641 000B                  		addi.w	#$B,d1
00017F7E 7400                       		moveq	#0,d2
00017F80 1428 0016                  		move.b	$16(a0),d2
00017F84 3602                       		move.w	d2,d3
00017F86 5243                       		addq.w	#1,d3
00017F88 6100 856A                  		bsr.w	SolidObject
00017F8C                            
00017F8C                            Obj70_ChkDel:
00017F8C 3028 0032                  		move.w	$32(a0),d0
00017F90 0240 FF80                  		andi.w	#$FF80,d0
00017F94 3238 F700                  		move.w	($FFFFF700).w,d1
00017F98 0441 0080                  		subi.w	#$80,d1
00017F9C 0241 FF80                  		andi.w	#$FF80,d1
00017FA0 9041                       		sub.w	d1,d0
00017FA2 0C40 0280                  		cmpi.w	#$280,d0
00017FA6 6200                       		bhi.s	Obj70_Delete
00017FA8 4EF9 0000 E10A             		jmp	DisplaySprite
00017FAE                            ; ===========================================================================
00017FAE                            
00017FAE                            Obj70_Delete:
00017FAE 4EF9 0000 E146             		jmp	DeleteObject
00017FB4                            ; ===========================================================================
00017FB4                            
00017FB4                            Obj70_Move2:				; XREF: Obj70_Main
00017FB4 1028 0038                  		move.b	$38(a0),d0
00017FB8 0240 0018                  		andi.w	#$18,d0
00017FBC 43F9 0000 0000             		lea	(Obj70_MoveData).l,a1
00017FC2 43F1 0000                  		lea	(a1,d0.w),a1
00017FC6 3159 0010                  		move.w	(a1)+,$10(a0)
00017FCA 3159 0012                  		move.w	(a1)+,$12(a0)
00017FCE 3159 0034                  		move.w	(a1)+,$34(a0)
00017FD2 5028 0038                  		addq.b	#8,$38(a0)	; use next movedata set
00017FD6 317C 0007 003A             		move.w	#7,$3A(a0)
00017FDC 4E75                       		rts	
00017FDE                            ; ===========================================================================
00017FDE 0100 0000 0060 0000        Obj70_MoveData:	dc.w   $100,	 0,   $60,     0 ; x-speed, y-speed, duration, blank
00017FE6 0000 0100 0030 0000        		dc.w	  0,  $100,   $30,     0
00017FEE FF00 FFC0 0060 0000        		dc.w  $FF00, $FFC0,   $60,     0
00017FF6 0000 FF00 0018 0000        		dc.w	  0, $FF00,   $18,     0
00017FFE                            ; ---------------------------------------------------------------------------
00017FFE                            ; Sprite mappings - large girder block (SBZ)
00017FFE                            ; ---------------------------------------------------------------------------
00017FFE                            Map_obj70:
00017FFE                            	include "_maps\obj70.asm"
00017FFE                            ; ---------------------------------------------------------------------------
00017FFE                            ; Sprite mappings - large girder block (SBZ)
00017FFE                            ; ---------------------------------------------------------------------------
00017FFE 0000                       		dc.w byte_1662A-Map_obj70
00018000 0C                         byte_1662A:	dc.b $C
00018001 E80E 0000 A0               		dc.b $E8, $E, 0, 0, $A0
00018006 000E 1000 A0               		dc.b 0,	$E, $10, 0, $A0
0001800B E80E 0006 C0               		dc.b $E8, $E, 0, 6, $C0
00018010 000E 1006 C0               		dc.b 0,	$E, $10, 6, $C0
00018015 E80E 0006 E0               		dc.b $E8, $E, 0, 6, $E0
0001801A 000E 1006 E0               		dc.b 0,	$E, $10, 6, $E0
0001801F E80E 0006 00               		dc.b $E8, $E, 0, 6, 0
00018024 000E 1006 00               		dc.b 0,	$E, $10, 6, 0
00018029 E80E 0006 20               		dc.b $E8, $E, 0, 6, $20
0001802E 000E 1006 20               		dc.b 0,	$E, $10, 6, $20
00018033 E80E 0006 40               		dc.b $E8, $E, 0, 6, $40
00018038 000E 1006 40               		dc.b 0,	$E, $10, 6, $40
0001803E 00                         		even
0001803E 00                         		even
0001803E                            
0001803E                            ; ===========================================================================
0001803E                            ; ---------------------------------------------------------------------------
0001803E                            ; Object 72 - teleporter (SBZ)
0001803E                            ; ---------------------------------------------------------------------------
0001803E                            
0001803E                            Obj72:					; XREF: Obj_Index
0001803E 7000                       		moveq	#0,d0
00018040 1028 0024                  		move.b	$24(a0),d0
00018044 323B 0000                  		move.w	Obj72_Index(pc,d0.w),d1
00018048 4EBB 1000                  		jsr	Obj72_Index(pc,d1.w)
0001804C 3028 0008                  		move.w	8(a0),d0
00018050 0240 FF80                  		andi.w	#$FF80,d0
00018054 3238 F700                  		move.w	($FFFFF700).w,d1
00018058 0441 0080                  		subi.w	#$80,d1
0001805C 0241 FF80                  		andi.w	#$FF80,d1
00018060 9041                       		sub.w	d1,d0
00018062 0C40 0280                  		cmpi.w	#$280,d0
00018066 6200                       		bhi.s	Obj72_Delete
00018068 4E75                       		rts	
0001806A                            ; ===========================================================================
0001806A                            
0001806A                            Obj72_Delete:
0001806A 4EF9 0000 E146             		jmp	DeleteObject
00018070                            ; ===========================================================================
00018070 0000                       Obj72_Index:	dc.w Obj72_Main-Obj72_Index
00018072 0000                       		dc.w loc_166C8-Obj72_Index
00018074 0000                       		dc.w loc_1675E-Obj72_Index
00018076 0000                       		dc.w loc_16798-Obj72_Index
00018078                            ; ===========================================================================
00018078                            
00018078                            Obj72_Main:				; XREF: Obj72_Index
00018078 5428 0024                  		addq.b	#2,$24(a0)
0001807C 1028 0028                  		move.b	$28(a0),d0
00018080 D040                       		add.w	d0,d0
00018082 0240 001E                  		andi.w	#$1E,d0
00018086 45FA 0000                  		lea	Obj72_Data(pc),a2
0001808A D4F2 0000                  		adda.w	(a2,d0.w),a2
0001808E 315A 003A                  		move.w	(a2)+,$3A(a0)
00018092 214A 003C                  		move.l	a2,$3C(a0)
00018096 315A 0036                  		move.w	(a2)+,$36(a0)
0001809A 315A 0038                  		move.w	(a2)+,$38(a0)
0001809E                            
0001809E                            loc_166C8:				; XREF: Obj72_Index
0001809E 43F8 D000                  		lea	($FFFFD000).w,a1
000180A2 3029 0008                  		move.w	8(a1),d0
000180A6 9068 0008                  		sub.w	8(a0),d0
000180AA 0828 0000 0022             		btst	#0,$22(a0)
000180B0 6700                       		beq.s	loc_166E0
000180B2 0640 000F                  		addi.w	#$F,d0
000180B6                            
000180B6                            loc_166E0:
000180B6 0C40 0010                  		cmpi.w	#$10,d0
000180BA 6400                       		bcc.s	locret_1675C
000180BC 3229 000C                  		move.w	$C(a1),d1
000180C0 9268 000C                  		sub.w	$C(a0),d1
000180C4 0641 0020                  		addi.w	#$20,d1
000180C8 0C41 0040                  		cmpi.w	#$40,d1
000180CC 6400                       		bcc.s	locret_1675C
000180CE 4A38 F7C8                  		tst.b	($FFFFF7C8).w
000180D2 6600                       		bne.s	locret_1675C
000180D4 0C28 0007 0028             		cmpi.b	#7,$28(a0)
000180DA 6600                       		bne.s	loc_1670E
000180DC 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w
000180E2 6500                       		bcs.s	locret_1675C
000180E4                            
000180E4                            loc_1670E:
000180E4 5428 0024                  		addq.b	#2,$24(a0)
000180E8 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w ; lock controls
000180EE 137C 0002 001C             		move.b	#2,$1C(a1)	; use Sonic's rolling animation
000180F4 337C 0800 0014             		move.w	#$800,$14(a1)
000180FA 337C 0000 0010             		move.w	#0,$10(a1)
00018100 337C 0000 0012             		move.w	#0,$12(a1)
00018106 08A8 0005 0022             		bclr	#5,$22(a0)
0001810C 08A9 0005 0022             		bclr	#5,$22(a1)
00018112 08E9 0001 0022             		bset	#1,$22(a1)
00018118 3368 0008 0008             		move.w	8(a0),8(a1)
0001811E 3368 000C 000C             		move.w	$C(a0),$C(a1)
00018124 4228 0032                  		clr.b	$32(a0)
00018128 303C 00BE                  		move.w	#$BE,d0
0001812C 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play Sonic rolling sound
00018132                            
00018132                            locret_1675C:
00018132 4E75                       		rts	
00018134                            ; ===========================================================================
00018134                            
00018134                            loc_1675E:				; XREF: Obj72_Index
00018134 43F8 D000                  		lea	($FFFFD000).w,a1
00018138 1028 0032                  		move.b	$32(a0),d0
0001813C 5428 0032                  		addq.b	#2,$32(a0)
00018140 4EB9 0000 33D4             		jsr	(CalcSine).l
00018146 EA40                       		asr.w	#5,d0
00018148 3428 000C                  		move.w	$C(a0),d2
0001814C 9440                       		sub.w	d0,d2
0001814E 3342 000C                  		move.w	d2,$C(a1)
00018152 0C28 0080 0032             		cmpi.b	#$80,$32(a0)
00018158 6600                       		bne.s	locret_16796
0001815A 6100 0000                  		bsr.w	sub_1681C
0001815E 5428 0024                  		addq.b	#2,$24(a0)
00018162 303C 00BC                  		move.w	#$BC,d0
00018166 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play teleport sound
0001816C                            
0001816C                            locret_16796:
0001816C 4E75                       		rts	
0001816E                            ; ===========================================================================
0001816E                            
0001816E                            loc_16798:				; XREF: Obj72_Index
0001816E 588F                       		addq.l	#4,sp
00018170 43F8 D000                  		lea	($FFFFD000).w,a1
00018174 5328 002E                  		subq.b	#1,$2E(a0)
00018178 6A00                       		bpl.s	loc_167DA
0001817A 3368 0036 0008             		move.w	$36(a0),8(a1)
00018180 3368 0038 000C             		move.w	$38(a0),$C(a1)
00018186 7200                       		moveq	#0,d1
00018188 1228 003A                  		move.b	$3A(a0),d1
0001818C 5801                       		addq.b	#4,d1
0001818E B228 003B                  		cmp.b	$3B(a0),d1
00018192 6500                       		bcs.s	loc_167C2
00018194 7200                       		moveq	#0,d1
00018196 6000                       		bra.s	loc_16800
00018198                            ; ===========================================================================
00018198                            
00018198                            loc_167C2:
00018198 1141 003A                  		move.b	d1,$3A(a0)
0001819C 2468 003C                  		movea.l	$3C(a0),a2
000181A0 3172 1000 0036             		move.w	(a2,d1.w),$36(a0)
000181A6 3172 1002 0038             		move.w	2(a2,d1.w),$38(a0)
000181AC 6000 0000                  		bra.w	sub_1681C
000181B0                            ; ===========================================================================
000181B0                            
000181B0                            loc_167DA:
000181B0 2429 0008                  		move.l	8(a1),d2
000181B4 2629 000C                  		move.l	$C(a1),d3
000181B8 3029 0010                  		move.w	$10(a1),d0
000181BC 48C0                       		ext.l	d0
000181BE E180                       		asl.l	#8,d0
000181C0 D480                       		add.l	d0,d2
000181C2 3029 0012                  		move.w	$12(a1),d0
000181C6 48C0                       		ext.l	d0
000181C8 E180                       		asl.l	#8,d0
000181CA D680                       		add.l	d0,d3
000181CC 2342 0008                  		move.l	d2,8(a1)
000181D0 2343 000C                  		move.l	d3,$C(a1)
000181D4 4E75                       		rts	
000181D6                            ; ===========================================================================
000181D6                            
000181D6                            loc_16800:
000181D6 0269 07FF 000C             		andi.w	#$7FF,$C(a1)
000181DC 4228 0024                  		clr.b	$24(a0)
000181E0 4238 F7C8                  		clr.b	($FFFFF7C8).w
000181E4 337C 0000 0010             		move.w	#0,$10(a1)
000181EA 337C 0200 0012             		move.w	#$200,$12(a1)
000181F0 4E75                       		rts	
000181F2                            
000181F2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000181F2                            
000181F2                            
000181F2                            sub_1681C:
000181F2 7000                       		moveq	#0,d0
000181F4 343C 1000                  		move.w	#$1000,d2
000181F8 3028 0036                  		move.w	$36(a0),d0
000181FC 9069 0008                  		sub.w	8(a1),d0
00018200 6C00                       		bge.s	loc_16830
00018202 4440                       		neg.w	d0
00018204 4442                       		neg.w	d2
00018206                            
00018206                            loc_16830:
00018206 7200                       		moveq	#0,d1
00018208 363C 1000                  		move.w	#$1000,d3
0001820C 3228 0038                  		move.w	$38(a0),d1
00018210 9269 000C                  		sub.w	$C(a1),d1
00018214 6C00                       		bge.s	loc_16844
00018216 4441                       		neg.w	d1
00018218 4443                       		neg.w	d3
0001821A                            
0001821A                            loc_16844:
0001821A B240                       		cmp.w	d0,d1
0001821C 6500                       		bcs.s	loc_1687A
0001821E 7200                       		moveq	#0,d1
00018220 3228 0038                  		move.w	$38(a0),d1
00018224 9269 000C                  		sub.w	$C(a1),d1
00018228 4841                       		swap	d1
0001822A 83C3                       		divs.w	d3,d1
0001822C 7000                       		moveq	#0,d0
0001822E 3028 0036                  		move.w	$36(a0),d0
00018232 9069 0008                  		sub.w	8(a1),d0
00018236 6700                       		beq.s	loc_16866
00018238 4840                       		swap	d0
0001823A 81C1                       		divs.w	d1,d0
0001823C                            
0001823C                            loc_16866:
0001823C 3340 0010                  		move.w	d0,$10(a1)
00018240 3343 0012                  		move.w	d3,$12(a1)
00018244 4A41                       		tst.w	d1
00018246 6A00                       		bpl.s	loc_16874
00018248 4441                       		neg.w	d1
0001824A                            
0001824A                            loc_16874:
0001824A 3141 002E                  		move.w	d1,$2E(a0)
0001824E 4E75                       		rts	
00018250                            ; ===========================================================================
00018250                            
00018250                            loc_1687A:
00018250 7000                       		moveq	#0,d0
00018252 3028 0036                  		move.w	$36(a0),d0
00018256 9069 0008                  		sub.w	8(a1),d0
0001825A 4840                       		swap	d0
0001825C 81C2                       		divs.w	d2,d0
0001825E 7200                       		moveq	#0,d1
00018260 3228 0038                  		move.w	$38(a0),d1
00018264 9269 000C                  		sub.w	$C(a1),d1
00018268 6700                       		beq.s	loc_16898
0001826A 4841                       		swap	d1
0001826C 83C0                       		divs.w	d0,d1
0001826E                            
0001826E                            loc_16898:
0001826E 3341 0012                  		move.w	d1,$12(a1)
00018272 3342 0010                  		move.w	d2,$10(a1)
00018276 4A40                       		tst.w	d0
00018278 6A00                       		bpl.s	loc_168A6
0001827A 4440                       		neg.w	d0
0001827C                            
0001827C                            loc_168A6:
0001827C 3140 002E                  		move.w	d0,$2E(a0)
00018280 4E75                       		rts	
00018282                            ; End of function sub_1681C
00018282                            
00018282                            ; ===========================================================================
00018282 0000 0000 0000             Obj72_Data:	dc.w word_168BC-Obj72_Data, word_168C2-Obj72_Data, word_168C8-Obj72_Data
00018288 0000 0000 0000             		dc.w word_168E6-Obj72_Data, word_168EC-Obj72_Data, word_1690A-Obj72_Data
0001828E 0000 0000                  		dc.w word_16910-Obj72_Data, word_1692E-Obj72_Data
00018292 0004 0794 098C             word_168BC:	dc.w 4,	$794, $98C
00018298 0004 0094 038C             word_168C2:	dc.w 4,	$94, $38C
0001829E 001C 0794 02E8             word_168C8:	dc.w $1C, $794,	$2E8
000182A4 07A4 02C0 07D0             		dc.w $7A4, $2C0, $7D0
000182AA 02AC 0858 02AC             		dc.w $2AC, $858, $2AC
000182B0 0884 0298 0894             		dc.w $884, $298, $894
000182B6 0270 0894 0190             		dc.w $270, $894, $190
000182BC 0004 0894 0690             word_168E6:	dc.w 4,	$894, $690
000182C2 001C 1194 0470             word_168EC:	dc.w $1C, $1194, $470
000182C8 1184 0498 1158             		dc.w $1184, $498, $1158
000182CE 04AC 0FD0 04AC             		dc.w $4AC, $FD0, $4AC
000182D4 0FA4 04C0 0F94             		dc.w $FA4, $4C0, $F94
000182DA 04E8 0F94 0590             		dc.w $4E8, $F94, $590
000182E0 0004 1294 0490             word_1690A:	dc.w 4,	$1294, $490
000182E6 001C 1594 FFE8             word_16910:	dc.w $1C, $1594, $FFE8
000182EC 1584 FFC0 1560             		dc.w $1584, $FFC0, $1560
000182F2 FFAC 14D0 FFAC             		dc.w $FFAC, $14D0, $FFAC
000182F8 14A4 FF98 1494             		dc.w $14A4, $FF98, $1494
000182FE FF70 1494 FD90             		dc.w $FF70, $1494, $FD90
00018304 0004 0894 0090             word_1692E:	dc.w 4,	$894, $90
0001830A                            ; ===========================================================================
0001830A                            ; ---------------------------------------------------------------------------
0001830A                            ; Object 78 - Caterkiller enemy	(MZ, SBZ)
0001830A                            ; ---------------------------------------------------------------------------
0001830A                            
0001830A                            Obj78:					; XREF: Obj_Index
0001830A 7000                       		moveq	#0,d0
0001830C 1028 0024                  		move.b	$24(a0),d0
00018310 323B 0000                  		move.w	Obj78_Index(pc,d0.w),d1
00018314 4EFB 1000                  		jmp	Obj78_Index(pc,d1.w)
00018318                            ; ===========================================================================
00018318 0000                       Obj78_Index:	dc.w Obj78_Main-Obj78_Index
0001831A 0000                       		dc.w Obj78_Action-Obj78_Index
0001831C 0000                       		dc.w Obj78_BodySeg1-Obj78_Index
0001831E 0000                       		dc.w Obj78_BodySeg2-Obj78_Index
00018320 0000                       		dc.w Obj78_BodySeg1-Obj78_Index
00018322 0000                       		dc.w Obj78_Delete-Obj78_Index
00018324 0000                       		dc.w loc_16CC0-Obj78_Index
00018326                            ; ===========================================================================
00018326                            
00018326                            locret_16950:
00018326 4E75                       		rts	
00018328                            ; ===========================================================================
00018328                            
00018328                            Obj78_Main:				; XREF: Obj78_Index
00018328 117C 0007 0016             		move.b	#7,$16(a0)
0001832E 117C 0008 0017             		move.b	#8,$17(a0)
00018334 4EB9 0000 E0B8             		jsr	ObjectFall
0001833A 4EBA E4B0                  		jsr	ObjHitFloor
0001833E 4A41                       		tst.w	d1
00018340 6AE4                       		bpl.s	locret_16950
00018342 D368 000C                  		add.w	d1,$C(a0)
00018346 4268 0012                  		clr.w	$12(a0)
0001834A 5428 0024                  		addq.b	#2,$24(a0)
0001834E 217C 0000 0000 0004        		move.l	#Map_obj78,4(a0)
00018356 317C 22B0 0002             		move.w	#$22B0,2(a0)
0001835C 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; if level is SBZ, branch
00018362 6700                       		beq.s	loc_16996
00018364 317C 24FF 0002             		move.w	#$24FF,2(a0)	; MZ specific code
0001836A                            
0001836A                            loc_16996:
0001836A 0228 0003 0001             		andi.b	#3,1(a0)
00018370 0028 0004 0001             		ori.b	#4,1(a0)
00018376 1168 0001 0022             		move.b	1(a0),$22(a0)
0001837C 117C 0004 0018             		move.b	#4,$18(a0)
00018382 117C 0008 0019             		move.b	#8,$19(a0)
00018388 117C 000B 0020             		move.b	#$B,$20(a0)
0001838E 3428 0008                  		move.w	8(a0),d2
00018392 7A0C                       		moveq	#$C,d5
00018394 0828 0000 0022             		btst	#0,$22(a0)
0001839A 6700                       		beq.s	loc_169CA
0001839C 4445                       		neg.w	d5
0001839E                            
0001839E                            loc_169CA:
0001839E 1C3C 0004                  		move.b	#4,d6
000183A2 7600                       		moveq	#0,d3
000183A4 7804                       		moveq	#4,d4
000183A6 2448                       		movea.l	a0,a2
000183A8 7202                       		moveq	#2,d1
000183AA                            
000183AA                            Obj78_LoadBody:
000183AA 4EB9 0000 E5B6             		jsr	SingleObjLoad2
000183B0 6600                       		bne.s	Obj78_QuitLoad
000183B2 12BC 0078                  		move.b	#$78,0(a1)	; load body segment object
000183B6 1346 0024                  		move.b	d6,$24(a1)
000183BA 5406                       		addq.b	#2,d6
000183BC 2368 0004 0004             		move.l	4(a0),4(a1)
000183C2 3368 0002 0002             		move.w	2(a0),2(a1)
000183C8 137C 0005 0018             		move.b	#5,$18(a1)
000183CE 137C 0008 0019             		move.b	#8,$19(a1)
000183D4 137C 00CB 0020             		move.b	#$CB,$20(a1)
000183DA D445                       		add.w	d5,d2
000183DC 3342 0008                  		move.w	d2,8(a1)
000183E0 3368 000C 000C             		move.w	$C(a0),$C(a1)
000183E6 1368 0022 0022             		move.b	$22(a0),$22(a1)
000183EC 1368 0022 0001             		move.b	$22(a0),1(a1)
000183F2 137C 0008 001A             		move.b	#8,$1A(a1)
000183F8 234A 003C                  		move.l	a2,$3C(a1)
000183FC 1344 003C                  		move.b	d4,$3C(a1)
00018400 5804                       		addq.b	#4,d4
00018402 2449                       		movea.l	a1,a2
00018404                            
00018404                            Obj78_QuitLoad:
00018404 51C9 FFA4                  		dbf	d1,Obj78_LoadBody ; repeat sequence 2 more times
00018408                            
00018408 117C 0007 002A             		move.b	#7,$2A(a0)
0001840E 4228 003C                  		clr.b	$3C(a0)
00018412                            
00018412                            Obj78_Action:				; XREF: Obj78_Index
00018412 4A28 0022                  		tst.b	$22(a0)
00018416 6B00 0000                  		bmi.w	loc_16C96
0001841A 7000                       		moveq	#0,d0
0001841C 1028 0025                  		move.b	$25(a0),d0
00018420 323B 0000                  		move.w	Obj78_Index2(pc,d0.w),d1
00018424 4EBB 1000                  		jsr	Obj78_Index2(pc,d1.w)
00018428 1228 002B                  		move.b	$2B(a0),d1
0001842C 6A00                       		bpl.s	Obj78_Display
0001842E 43F9 0000 0000             		lea	(Ani_obj78).l,a1
00018434 1028 0026                  		move.b	$26(a0),d0
00018438 0240 007F                  		andi.w	#$7F,d0
0001843C 5828 0026                  		addq.b	#4,$26(a0)
00018440 1031 0000                  		move.b	(a1,d0.w),d0
00018444 6A00                       		bpl.s	Obj78_AniHead
00018446 08A8 0007 002B             		bclr	#7,$2B(a0)
0001844C 6000                       		bra.s	Obj78_Display
0001844E                            ; ===========================================================================
0001844E                            
0001844E                            Obj78_AniHead:
0001844E 0201 0010                  		andi.b	#$10,d1
00018452 D001                       		add.b	d1,d0
00018454 1140 001A                  		move.b	d0,$1A(a0)
00018458                            
00018458                            Obj78_Display:
00018458 3028 0008                  		move.w	8(a0),d0
0001845C 0240 FF80                  		andi.w	#$FF80,d0
00018460 3238 F700                  		move.w	($FFFFF700).w,d1
00018464 0441 0080                  		subi.w	#$80,d1
00018468 0241 FF80                  		andi.w	#$FF80,d1
0001846C 9041                       		sub.w	d1,d0
0001846E 0C40 0280                  		cmpi.w	#$280,d0
00018472 6200 0000                  		bhi.w	Obj78_ChkGone
00018476 4EF9 0000 E10A             		jmp	DisplaySprite
0001847C                            ; ===========================================================================
0001847C                            
0001847C                            Obj78_ChkGone:
0001847C 45F8 FC00                  		lea	($FFFFFC00).w,a2
00018480 7000                       		moveq	#0,d0
00018482 1028 0023                  		move.b	$23(a0),d0
00018486 6700                       		beq.s	loc_16ABC
00018488 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0001848E                            
0001848E                            loc_16ABC:
0001848E 117C 000A 0024             		move.b	#$A,$24(a0)	; run "Obj78_Delete" routine
00018494 4E75                       		rts	
00018496                            ; ===========================================================================
00018496                            
00018496                            Obj78_Delete:				; XREF: Obj78_Index
00018496 4EF9 0000 E146             		jmp	DeleteObject
0001849C                            ; ===========================================================================
0001849C 0000                       Obj78_Index2:	dc.w Obj78_Move-Obj78_Index2
0001849E 0000                       		dc.w loc_16B02-Obj78_Index2
000184A0                            ; ===========================================================================
000184A0                            
000184A0                            Obj78_Move:				; XREF: Obj78_Index2
000184A0 5328 002A                  		subq.b	#1,$2A(a0)
000184A4 6B00                       		bmi.s	Obj78_Move2
000184A6 4E75                       		rts	
000184A8                            ; ===========================================================================
000184A8                            
000184A8                            Obj78_Move2:
000184A8 5428 0025                  		addq.b	#2,$25(a0)
000184AC 117C 0010 002A             		move.b	#$10,$2A(a0)
000184B2 317C FF40 0010             		move.w	#-$C0,$10(a0)
000184B8 317C 0040 0014             		move.w	#$40,$14(a0)
000184BE 0868 0004 002B             		bchg	#4,$2B(a0)
000184C4 6600                       		bne.s	loc_16AFC
000184C6 4268 0010                  		clr.w	$10(a0)
000184CA 4468 0014                  		neg.w	$14(a0)
000184CE                            
000184CE                            loc_16AFC:
000184CE 08E8 0007 002B             		bset	#7,$2B(a0)
000184D4                            
000184D4                            loc_16B02:				; XREF: Obj78_Index2
000184D4 5328 002A                  		subq.b	#1,$2A(a0)
000184D8 6B00                       		bmi.s	loc_16B5E
000184DA 2F28 0008                  		move.l	8(a0),-(sp)
000184DE 2428 0008                  		move.l	8(a0),d2
000184E2 3028 0010                  		move.w	$10(a0),d0
000184E6 0828 0000 0022             		btst	#0,$22(a0)
000184EC 6700                       		beq.s	loc_16B1E
000184EE 4440                       		neg.w	d0
000184F0                            
000184F0                            loc_16B1E:
000184F0 48C0                       		ext.l	d0
000184F2 E180                       		asl.l	#8,d0
000184F4 D480                       		add.l	d0,d2
000184F6 2142 0008                  		move.l	d2,8(a0)
000184FA 4EBA E2F0                  		jsr	ObjHitFloor
000184FE 241F                       		move.l	(sp)+,d2
00018500 0C41 FFF8                  		cmpi.w	#-8,d1
00018504 6D00                       		blt.s	loc_16B70
00018506 0C41 000C                  		cmpi.w	#$C,d1
0001850A 6C00                       		bge.s	loc_16B70
0001850C D368 000C                  		add.w	d1,$C(a0)
00018510 4842                       		swap	d2
00018512 B468 0008                  		cmp.w	8(a0),d2
00018516 6700                       		beq.s	locret_16B5C
00018518 7000                       		moveq	#0,d0
0001851A 1028 003C                  		move.b	$3C(a0),d0
0001851E 5228 003C                  		addq.b	#1,$3C(a0)
00018522 0228 000F 003C             		andi.b	#$F,$3C(a0)
00018528 1181 002C                  		move.b	d1,$2C(a0,d0.w)
0001852C                            
0001852C                            locret_16B5C:
0001852C 4E75                       		rts	
0001852E                            ; ===========================================================================
0001852E                            
0001852E                            loc_16B5E:
0001852E 5528 0025                  		subq.b	#2,$25(a0)
00018532 117C 0007 002A             		move.b	#7,$2A(a0)
00018538 317C 0000 0010             		move.w	#0,$10(a0)
0001853E 4E75                       		rts	
00018540                            ; ===========================================================================
00018540                            
00018540                            loc_16B70:
00018540 2142 0008                  		move.l	d2,8(a0)
00018544 0868 0000 0022             		bchg	#0,$22(a0)
0001854A 1168 0022 0001             		move.b	$22(a0),1(a0)
00018550 7000                       		moveq	#0,d0
00018552 1028 003C                  		move.b	$3C(a0),d0
00018556 11BC 0080 002C             		move.b	#$80,$2C(a0,d0.w)
0001855C 5228 003C                  		addq.b	#1,$3C(a0)
00018560 0228 000F 003C             		andi.b	#$F,$3C(a0)
00018566 4E75                       		rts	
00018568                            ; ===========================================================================
00018568                            
00018568                            Obj78_BodySeg2:				; XREF: Obj78_Index
00018568 2268 003C                  		movea.l	$3C(a0),a1
0001856C 1169 002B 002B             		move.b	$2B(a1),$2B(a0)
00018572 6A00                       		bpl.s	Obj78_BodySeg1
00018574 43F9 0000 0000             		lea	(Ani_obj78).l,a1
0001857A 1028 0026                  		move.b	$26(a0),d0
0001857E 0240 007F                  		andi.w	#$7F,d0
00018582 5828 0026                  		addq.b	#4,$26(a0)
00018586 4A31 0004                  		tst.b	4(a1,d0.w)
0001858A 6A00                       		bpl.s	Obj78_AniBody
0001858C 5828 0026                  		addq.b	#4,$26(a0)
00018590                            
00018590                            Obj78_AniBody:
00018590 1031 0000                  		move.b	(a1,d0.w),d0
00018594 5000                       		addq.b	#8,d0
00018596 1140 001A                  		move.b	d0,$1A(a0)
0001859A                            
0001859A                            Obj78_BodySeg1:				; XREF: Obj78_Index
0001859A 2268 003C                  		movea.l	$3C(a0),a1
0001859E 4A28 0022                  		tst.b	$22(a0)
000185A2 6B00 0000                  		bmi.w	loc_16C90
000185A6 1169 002B 002B             		move.b	$2B(a1),$2B(a0)
000185AC 1169 0025 0025             		move.b	$25(a1),$25(a0)
000185B2 6700 0000                  		beq.w	loc_16C64
000185B6 3169 0014 0014             		move.w	$14(a1),$14(a0)
000185BC 3029 0010                  		move.w	$10(a1),d0
000185C0 D069 0014                  		add.w	$14(a1),d0
000185C4 3140 0010                  		move.w	d0,$10(a0)
000185C8 2428 0008                  		move.l	8(a0),d2
000185CC 2602                       		move.l	d2,d3
000185CE 3028 0010                  		move.w	$10(a0),d0
000185D2 0828 0000 0022             		btst	#0,$22(a0)
000185D8 6700                       		beq.s	loc_16C0C
000185DA 4440                       		neg.w	d0
000185DC                            
000185DC                            loc_16C0C:
000185DC 48C0                       		ext.l	d0
000185DE E180                       		asl.l	#8,d0
000185E0 D480                       		add.l	d0,d2
000185E2 2142 0008                  		move.l	d2,8(a0)
000185E6 4843                       		swap	d3
000185E8 B668 0008                  		cmp.w	8(a0),d3
000185EC 6700                       		beq.s	loc_16C64
000185EE 7000                       		moveq	#0,d0
000185F0 1028 003C                  		move.b	$3C(a0),d0
000185F4 1231 002C                  		move.b	$2C(a1,d0.w),d1
000185F8 0C01 0080                  		cmpi.b	#-$80,d1
000185FC 6600                       		bne.s	loc_16C50
000185FE 4843                       		swap	d3
00018600 2143 0008                  		move.l	d3,8(a0)
00018604 1181 002C                  		move.b	d1,$2C(a0,d0.w)
00018608 0868 0000 0022             		bchg	#0,$22(a0)
0001860E 1168 0022 0001             		move.b	$22(a0),1(a0)
00018614 5228 003C                  		addq.b	#1,$3C(a0)
00018618 0228 000F 003C             		andi.b	#$F,$3C(a0)
0001861E 6000                       		bra.s	loc_16C64
00018620                            ; ===========================================================================
00018620                            
00018620                            loc_16C50:
00018620 4881                       		ext.w	d1
00018622 D368 000C                  		add.w	d1,$C(a0)
00018626 5228 003C                  		addq.b	#1,$3C(a0)
0001862A 0228 000F 003C             		andi.b	#$F,$3C(a0)
00018630 1181 002C                  		move.b	d1,$2C(a0,d0.w)
00018634                            
00018634                            loc_16C64:
00018634 0C29 000C 0024             		cmpi.b	#$C,$24(a1)
0001863A 6700                       		beq.s	loc_16C90
0001863C 0C11 0027                  		cmpi.b	#$27,0(a1)
00018640 6700                       		beq.s	loc_16C7C
00018642 0C29 000A 0024             		cmpi.b	#$A,$24(a1)
00018648 6600                       		bne.s	loc_16C82
0001864A                            
0001864A                            loc_16C7C:
0001864A 4229 0020                  		clr.b	$20(a1)	; immediately remove all touch response values when destroying the head to avoid taking damage
0001864E 117C 000A 0024             		move.b	#$A,$24(a0)
00018654                            
00018654                            loc_16C82:
00018654 4EF9 0000 E10A             		jmp	DisplaySprite
0001865A                            
0001865A                            ; ===========================================================================
0001865A FE00 FE80 0180 0200        Obj78_FragSpeed:dc.w $FE00, $FE80, $180, $200
00018662                            ; ===========================================================================
00018662                            
00018662                            loc_16C90:
00018662 08E9 0007 0022             		bset	#7,$22(a1)
00018668                            
00018668                            loc_16C96:
00018668 7000                       		moveq	#0,d0
0001866A 1028 0024                  		move.b	$24(a0),d0
0001866E 303B 00E8                  		move.w	Obj78_FragSpeed-2(pc,d0.w),d0
00018672 0828 0000 0022             		btst	#0,$22(a0)
00018678 6700                       		beq.s	loc_16CAA
0001867A 4440                       		neg.w	d0
0001867C                            
0001867C                            loc_16CAA:
0001867C 3140 0010                  		move.w	d0,$10(a0)
00018680 317C FC00 0012             		move.w	#-$400,$12(a0)
00018686 117C 000C 0024             		move.b	#$C,$24(a0)
0001868C 0228 00F8 001A             		andi.b	#-8,$1A(a0)
00018692                            
00018692                            loc_16CC0:				; XREF: Obj78_Index
00018692 4EB9 0000 E0B8             		jsr	ObjectFall
00018698 4A68 0012                  		tst.w	$12(a0)
0001869C 6B00                       		bmi.s	loc_16CE0
0001869E 4EBA E14C                  		jsr	ObjHitFloor
000186A2 4A41                       		tst.w	d1
000186A4 6A00                       		bpl.s	loc_16CE0
000186A6 D368 000C                  		add.w	d1,$C(a0)
000186AA 317C FC00 0012             		move.w	#-$400,$12(a0)
000186B0                            
000186B0                            loc_16CE0:
000186B0 4A28 0001                  		tst.b	1(a0)
000186B4 6A00 FDC6                  		bpl.w	Obj78_ChkGone
000186B8 4EF9 0000 E10A             		jmp	DisplaySprite
000186BE                            ; ===========================================================================
000186BE                            Ani_obj78:
000186BE                            	include "_anim\obj78.asm"
000186BE                            ; ---------------------------------------------------------------------------
000186BE                            ; Animation script - Caterkiller enemy (uses non-standard format)
000186BE                            ; ---------------------------------------------------------------------------
000186BE 0000 0000 0000 0000 0000+  	dc.b 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 1
000186CE 0101 0101 0101 0202 0202+  	dc.b 1,	1, 1, 1, 1, 1, 2, 2, 2,	2, 2, 3, 3, 3, 3, 3
000186DE 0404 0404 0404 0505 0505+  	dc.b 4,	4, 4, 4, 4, 4, 5, 5, 5,	5, 5, 6, 6, 6, 6, 6
000186EE 0606 0707 0707 0707 0707+  	dc.b 6,	6, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, $FF, 7, 7, $FF
000186FE 0707 0707 0707 0707 0707+  	dc.b 7,	7, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, 7, 7, 7, 6
0001870E 0606 0606 0606 0505 0505+  	dc.b 6,	6, 6, 6, 6, 6, 5, 5, 5,	5, 5, 4, 4, 4, 4, 4
0001871E 0403 0303 0303 0202 0202+  	dc.b 4,	3, 3, 3, 3, 3, 2, 2, 2,	2, 2, 1, 1, 1, 1, 1
0001872E 0101 0000 0000 0000 0000+  	dc.b 1,	1, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, $FF, 0, 0, $FF
0001873E                            	even
0001873E                            	even
0001873E                            
0001873E                            ; ---------------------------------------------------------------------------
0001873E                            ; Sprite mappings - Caterkiller	enemy (MZ, SBZ)
0001873E                            ; ---------------------------------------------------------------------------
0001873E                            Map_obj78:
0001873E                            	include "_maps\obj78.asm"
0001873E                            ; ---------------------------------------------------------------------------
0001873E                            ; Sprite mappings - Caterkiller	enemy (MZ, SBZ)
0001873E                            ; ---------------------------------------------------------------------------
0001873E 0000 0000                  		dc.w byte_16D9E-Map_obj78, byte_16DA4-Map_obj78
00018742 0000 0000                  		dc.w byte_16DAA-Map_obj78, byte_16DB0-Map_obj78
00018746 0000 0000                  		dc.w byte_16DB6-Map_obj78, byte_16DBC-Map_obj78
0001874A 0000 0000                  		dc.w byte_16DC2-Map_obj78, byte_16DC8-Map_obj78
0001874E 0000 0000                  		dc.w byte_16DCE-Map_obj78, byte_16DD4-Map_obj78
00018752 0000 0000                  		dc.w byte_16DDA-Map_obj78, byte_16DE0-Map_obj78
00018756 0000 0000                  		dc.w byte_16DE6-Map_obj78, byte_16DEC-Map_obj78
0001875A 0000 0000                  		dc.w byte_16DF2-Map_obj78, byte_16DF8-Map_obj78
0001875E 0000 0000                  		dc.w byte_16DFE-Map_obj78, byte_16E04-Map_obj78
00018762 0000 0000                  		dc.w byte_16E0A-Map_obj78, byte_16E10-Map_obj78
00018766 0000 0000                  		dc.w byte_16E16-Map_obj78, byte_16E1C-Map_obj78
0001876A 0000 0000                  		dc.w byte_16E22-Map_obj78, byte_16E28-Map_obj78
0001876E 01                         byte_16D9E:	dc.b 1
0001876F F206 0000 F8               		dc.b $F2, 6, 0,	0, $F8
00018774 01                         byte_16DA4:	dc.b 1
00018775 F106 0000 F8               		dc.b $F1, 6, 0,	0, $F8
0001877A 01                         byte_16DAA:	dc.b 1
0001877B F006 0000 F8               		dc.b $F0, 6, 0,	0, $F8
00018780 01                         byte_16DB0:	dc.b 1
00018781 EF06 0000 F8               		dc.b $EF, 6, 0,	0, $F8
00018786 01                         byte_16DB6:	dc.b 1
00018787 EE06 0000 F8               		dc.b $EE, 6, 0,	0, $F8
0001878C 01                         byte_16DBC:	dc.b 1
0001878D ED06 0000 F8               		dc.b $ED, 6, 0,	0, $F8
00018792 01                         byte_16DC2:	dc.b 1
00018793 EC06 0000 F8               		dc.b $EC, 6, 0,	0, $F8
00018798 01                         byte_16DC8:	dc.b 1
00018799 EB06 0000 F8               		dc.b $EB, 6, 0,	0, $F8
0001879E 01                         byte_16DCE:	dc.b 1
0001879F F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
000187A4 01                         byte_16DD4:	dc.b 1
000187A5 F705 000C F8               		dc.b $F7, 5, 0,	$C, $F8
000187AA 01                         byte_16DDA:	dc.b 1
000187AB F605 000C F8               		dc.b $F6, 5, 0,	$C, $F8
000187B0 01                         byte_16DE0:	dc.b 1
000187B1 F505 000C F8               		dc.b $F5, 5, 0,	$C, $F8
000187B6 01                         byte_16DE6:	dc.b 1
000187B7 F405 000C F8               		dc.b $F4, 5, 0,	$C, $F8
000187BC 01                         byte_16DEC:	dc.b 1
000187BD F305 000C F8               		dc.b $F3, 5, 0,	$C, $F8
000187C2 01                         byte_16DF2:	dc.b 1
000187C3 F205 000C F8               		dc.b $F2, 5, 0,	$C, $F8
000187C8 01                         byte_16DF8:	dc.b 1
000187C9 F105 000C F8               		dc.b $F1, 5, 0,	$C, $F8
000187CE 01                         byte_16DFE:	dc.b 1
000187CF F206 0006 F8               		dc.b $F2, 6, 0,	6, $F8
000187D4 01                         byte_16E04:	dc.b 1
000187D5 F106 0006 F8               		dc.b $F1, 6, 0,	6, $F8
000187DA 01                         byte_16E0A:	dc.b 1
000187DB F006 0006 F8               		dc.b $F0, 6, 0,	6, $F8
000187E0 01                         byte_16E10:	dc.b 1
000187E1 EF06 0006 F8               		dc.b $EF, 6, 0,	6, $F8
000187E6 01                         byte_16E16:	dc.b 1
000187E7 EE06 0006 F8               		dc.b $EE, 6, 0,	6, $F8
000187EC 01                         byte_16E1C:	dc.b 1
000187ED ED06 0006 F8               		dc.b $ED, 6, 0,	6, $F8
000187F2 01                         byte_16E22:	dc.b 1
000187F3 EC06 0006 F8               		dc.b $EC, 6, 0,	6, $F8
000187F8 01                         byte_16E28:	dc.b 1
000187F9 EB06 0006 F8               		dc.b $EB, 6, 0,	6, $F8
000187FE                            		even
000187FE                            		even
000187FE                            
000187FE                            ; ===========================================================================
000187FE                            ; ---------------------------------------------------------------------------
000187FE                            ; Object 79 - lamppost
000187FE                            ; ---------------------------------------------------------------------------
000187FE                            
000187FE                            Obj79:					; XREF: Obj_Index
000187FE 7000                       		moveq	#0,d0
00018800 1028 0024                  		move.b	$24(a0),d0
00018804 323B 0000                  		move.w	Obj79_Index(pc,d0.w),d1
00018808 4EBB 1000                  		jsr	Obj79_Index(pc,d1.w)
0001880C 4EF9 0001 01CC             		jmp	MarkObjGone
00018812                            ; ===========================================================================
00018812 0000                       Obj79_Index:	dc.w Obj79_Main-Obj79_Index
00018814 0000                       		dc.w Obj79_BlueLamp-Obj79_Index
00018816 0000                       		dc.w Obj79_AfterHit-Obj79_Index
00018818 0000                       		dc.w Obj79_Twirl-Obj79_Index
0001881A                            ; ===========================================================================
0001881A                            
0001881A                            Obj79_Main:				; XREF: Obj79_Index
0001881A 5428 0024                  		addq.b	#2,$24(a0)
0001881E 217C 0000 0000 0004        		move.l	#Map_obj79,4(a0)
00018826 317C 06C0 0002             		move.w	#($D800/$20),2(a0)
0001882C 117C 0004 0001             		move.b	#4,1(a0)
00018832 117C 0008 0019             		move.b	#8,$19(a0)
00018838 117C 0005 0018             		move.b	#5,$18(a0)
0001883E 45F8 FC00                  		lea	($FFFFFC00).w,a2
00018842 7000                       		moveq	#0,d0
00018844 1028 0023                  		move.b	$23(a0),d0
00018848 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0001884E 0832 0000 0002             		btst	#0,2(a2,d0.w)
00018854 6600                       		bne.s	Obj79_RedLamp
00018856 1238 FE30                  		move.b	($FFFFFE30).w,d1
0001885A 0201 007F                  		andi.b	#$7F,d1
0001885E 1428 0028                  		move.b	$28(a0),d2	; get lamppost number
00018862 0202 007F                  		andi.b	#$7F,d2
00018866 B202                       		cmp.b	d2,d1		; is lamppost number higher than the number hit?
00018868 6500                       		bcs.s	Obj79_BlueLamp	; if yes, branch
0001886A                            
0001886A                            Obj79_RedLamp:
0001886A 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00018870 117C 0004 0024             		move.b	#4,$24(a0)	; run "Obj79_AfterHit" routine
00018876 117C 0003 001A             		move.b	#3,$1A(a0)	; use red lamppost frame
0001887C 4E75                       		rts	
0001887E                            ; ===========================================================================
0001887E                            
0001887E                            Obj79_BlueLamp:				; XREF: Obj79_Index
0001887E 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
00018882 6600 0000                  		bne.w	locret_16F90	; if yes, branch
00018886 4A38 F7C8                  		tst.b	($FFFFF7C8).w
0001888A 6B00 0000                  		bmi.w	locret_16F90
0001888E 1238 FE30                  		move.b	($FFFFFE30).w,d1
00018892 0201 007F                  		andi.b	#$7F,d1
00018896 1428 0028                  		move.b	$28(a0),d2
0001889A 0202 007F                  		andi.b	#$7F,d2
0001889E B202                       		cmp.b	d2,d1
000188A0 6500                       		bcs.s	Obj79_HitLamp
000188A2 45F8 FC00                  		lea	($FFFFFC00).w,a2
000188A6 7000                       		moveq	#0,d0
000188A8 1028 0023                  		move.b	$23(a0),d0
000188AC 08F2 0000 0002             		bset	#0,2(a2,d0.w)
000188B2 117C 0004 0024             		move.b	#4,$24(a0)
000188B8 117C 0003 001A             		move.b	#3,$1A(a0)
000188BE 6000 0000                  		bra.w	locret_16F90
000188C2                            ; ===========================================================================
000188C2                            
000188C2                            Obj79_HitLamp:
000188C2 3038 D008                  		move.w	($FFFFD008).w,d0
000188C6 9068 0008                  		sub.w	8(a0),d0
000188CA 5040                       		addq.w	#8,d0
000188CC 0C40 0010                  		cmpi.w	#$10,d0
000188D0 6400 0000                  		bcc.w	locret_16F90
000188D4 3038 D00C                  		move.w	($FFFFD00C).w,d0
000188D8 9068 000C                  		sub.w	$C(a0),d0
000188DC 0640 0040                  		addi.w	#$40,d0
000188E0 0C40 0068                  		cmpi.w	#$68,d0
000188E4 6400                       		bcc.s	locret_16F90
000188E6 303C 00A1                  		move.w	#$A1,d0
000188EA 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play lamppost sound
000188F0 5428 0024                  		addq.b	#2,$24(a0)
000188F4 4EB9 0000 E5A0             		jsr	SingleObjLoad
000188FA 6600                       		bne.s	loc_16F76
000188FC 12BC 0079                  		move.b	#$79,0(a1)	; load twirling	lamp object
00018900 137C 0006 0024             		move.b	#6,$24(a1)	; use "Obj79_Twirl" routine
00018906 3368 0008 0030             		move.w	8(a0),$30(a1)
0001890C 3368 000C 0032             		move.w	$C(a0),$32(a1)
00018912 0469 0018 0032             		subi.w	#$18,$32(a1)
00018918 237C 0000 0000 0004        		move.l	#Map_obj79,4(a1)
00018920 337C 06C0 0002             		move.w	#($D800/$20),2(a1)
00018926 137C 0004 0001             		move.b	#4,1(a1)
0001892C 137C 0008 0019             		move.b	#8,$19(a1)
00018932 137C 0004 0018             		move.b	#4,$18(a1)
00018938 137C 0002 001A             		move.b	#2,$1A(a1)
0001893E 337C 0020 0036             		move.w	#$20,$36(a1)
00018944                            
00018944                            loc_16F76:
00018944 117C 0001 001A             		move.b	#1,$1A(a0)	; use "post only" frame, with no lamp
0001894A 6100 0000                  		bsr.w	Obj79_StoreInfo
0001894E 45F8 FC00                  		lea	($FFFFFC00).w,a2
00018952 7000                       		moveq	#0,d0
00018954 1028 0023                  		move.b	$23(a0),d0
00018958 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0001895E                            
0001895E                            locret_16F90:
0001895E 4E75                       		rts	
00018960                            ; ===========================================================================
00018960                            
00018960                            Obj79_AfterHit:				; XREF: Obj79_Index
00018960 4E75                       		rts	
00018962                            ; ===========================================================================
00018962                            
00018962                            Obj79_Twirl:				; XREF: Obj79_Index
00018962 5368 0036                  		subq.w	#1,$36(a0)
00018966 6A00                       		bpl.s	loc_16FA0
00018968 117C 0004 0024             		move.b	#4,$24(a0)
0001896E                            
0001896E                            loc_16FA0:
0001896E 1028 0026                  		move.b	$26(a0),d0
00018972 0428 0010 0026             		subi.b	#$10,$26(a0)
00018978 0400 0040                  		subi.b	#$40,d0
0001897C 4EB9 0000 33D4             		jsr	(CalcSine).l
00018982 C3FC 0C00                  		muls.w	#$C00,d1
00018986 4841                       		swap	d1
00018988 D268 0030                  		add.w	$30(a0),d1
0001898C 3141 0008                  		move.w	d1,8(a0)
00018990 C1FC 0C00                  		muls.w	#$C00,d0
00018994 4840                       		swap	d0
00018996 D068 0032                  		add.w	$32(a0),d0
0001899A 3140 000C                  		move.w	d0,$C(a0)
0001899E 4E75                       		rts	
000189A0                            ; ===========================================================================
000189A0                            ; ---------------------------------------------------------------------------
000189A0                            ; Subroutine to	store information when you hit a lamppost
000189A0                            ; ---------------------------------------------------------------------------
000189A0                            
000189A0                            Obj79_StoreInfo:			; XREF: Obj79_HitLamp
000189A0 11E8 0028 FE30             		move.b	$28(a0),($FFFFFE30).w 		; lamppost number
000189A6 11F8 FE30 FE31             		move.b	($FFFFFE30).w,($FFFFFE31).w
000189AC 31E8 0008 FE32             		move.w	8(a0),($FFFFFE32).w		; x-position
000189B2 31E8 000C FE34             		move.w	$C(a0),($FFFFFE34).w		; y-position
000189B8 31F8 FE20 FE36             		move.w	($FFFFFE20).w,($FFFFFE36).w 	; rings
000189BE 11F8 FE1B FE54             		move.b	($FFFFFE1B).w,($FFFFFE54).w 	; lives
000189C4 21F8 FE22 FE38             		move.l	($FFFFFE22).w,($FFFFFE38).w 	; time
000189CA 11F8 F742 FE3C             		move.b	($FFFFF742).w,($FFFFFE3C).w 	; routine counter for dynamic level mod
000189D0 31F8 F72E FE3E             		move.w	($FFFFF72E).w,($FFFFFE3E).w 	; lower y-boundary of level
000189D6 31F8 F700 FE40             		move.w	($FFFFF700).w,($FFFFFE40).w 	; screen x-position
000189DC 31F8 F704 FE42             		move.w	($FFFFF704).w,($FFFFFE42).w 	; screen y-position
000189E2 31F8 F708 FE44             		move.w	($FFFFF708).w,($FFFFFE44).w 	; bg position
000189E8 31F8 F70C FE46             		move.w	($FFFFF70C).w,($FFFFFE46).w 	; bg position
000189EE 31F8 F710 FE48             		move.w	($FFFFF710).w,($FFFFFE48).w 	; bg position
000189F4 31F8 F714 FE4A             		move.w	($FFFFF714).w,($FFFFFE4A).w 	; bg position
000189FA 31F8 F718 FE4C             		move.w	($FFFFF718).w,($FFFFFE4C).w 	; bg position
00018A00 31F8 F71C FE4E             		move.w	($FFFFF71C).w,($FFFFFE4E).w 	; bg position
00018A06 31F8 F648 FE50             		move.w	($FFFFF648).w,($FFFFFE50).w 	; water height
00018A0C 11F8 F64D FE52             		move.b	($FFFFF64D).w,($FFFFFE52).w 	; rountine counter for water
00018A12 11F8 F64E FE53             		move.b	($FFFFF64E).w,($FFFFFE53).w 	; water direction
00018A18 4E75                       		rts	
00018A1A                            
00018A1A                            ; ---------------------------------------------------------------------------
00018A1A                            ; Subroutine to	load stored info when you start	a level	from a lamppost
00018A1A                            ; ---------------------------------------------------------------------------
00018A1A                            
00018A1A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018A1A                            
00018A1A                            
00018A1A                            Obj79_LoadInfo:				; XREF: LevelSizeLoad
00018A1A 11F8 FE31 FE30             		move.b	($FFFFFE31).w,($FFFFFE30).w
00018A20 31F8 FE32 D008             		move.w	($FFFFFE32).w,($FFFFD008).w
00018A26 31F8 FE34 D00C             		move.w	($FFFFFE34).w,($FFFFD00C).w
00018A2C 31F8 FE36 FE20             		move.w	($FFFFFE36).w,($FFFFFE20).w
00018A32 11F8 FE54 FE1B             		move.b	($FFFFFE54).w,($FFFFFE1B).w
00018A38 4278 FE20                  		clr.w	($FFFFFE20).w
00018A3C 4238 FE1B                  		clr.b	($FFFFFE1B).w
00018A40 21F8 FE38 FE22             		move.l	($FFFFFE38).w,($FFFFFE22).w
00018A46 11FC 003B FE25             		move.b	#59,($FFFFFE25).w
00018A4C 5338 FE24                  		subq.b	#1,($FFFFFE24).w
00018A50 11F8 FE3C F742             		move.b	($FFFFFE3C).w,($FFFFF742).w
00018A56 11F8 FE52 F64D             		move.b	($FFFFFE52).w,($FFFFF64D).w
00018A5C 31F8 FE3E F72E             		move.w	($FFFFFE3E).w,($FFFFF72E).w
00018A62 31F8 FE3E F726             		move.w	($FFFFFE3E).w,($FFFFF726).w
00018A68 31F8 FE40 F700             		move.w	($FFFFFE40).w,($FFFFF700).w
00018A6E 31F8 FE42 F704             		move.w	($FFFFFE42).w,($FFFFF704).w
00018A74 31F8 FE44 F708             		move.w	($FFFFFE44).w,($FFFFF708).w
00018A7A 31F8 FE46 F70C             		move.w	($FFFFFE46).w,($FFFFF70C).w
00018A80 31F8 FE48 F710             		move.w	($FFFFFE48).w,($FFFFF710).w
00018A86 31F8 FE4A F714             		move.w	($FFFFFE4A).w,($FFFFF714).w
00018A8C 31F8 FE4C F718             		move.w	($FFFFFE4C).w,($FFFFF718).w
00018A92 31F8 FE4E F71C             		move.w	($FFFFFE4E).w,($FFFFF71C).w
00018A98 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00018A9E 6600                       		bne.s	loc_170E4
00018AA0 31F8 FE50 F648             		move.w	($FFFFFE50).w,($FFFFF648).w
00018AA6 11F8 FE52 F64D             		move.b	($FFFFFE52).w,($FFFFF64D).w
00018AAC 11F8 FE53 F64E             		move.b	($FFFFFE53).w,($FFFFF64E).w
00018AB2                            
00018AB2                            loc_170E4:
00018AB2 4A38 FE30                  		tst.b	($FFFFFE30).w
00018AB6 6A00                       		bpl.s	locret_170F6
00018AB8 3038 FE32                  		move.w	($FFFFFE32).w,d0
00018ABC 0440 00A0                  		subi.w	#$A0,d0
00018AC0 31C0 F728                  		move.w	d0,($FFFFF728).w
00018AC4                            
00018AC4                            locret_170F6:
00018AC4 4E75                       		rts	
00018AC6                            ; End of function Obj79_LoadInfo
00018AC6                            
00018AC6                            ; ===========================================================================
00018AC6                            ; ---------------------------------------------------------------------------
00018AC6                            ; Sprite mappings - lamppost
00018AC6                            ; ---------------------------------------------------------------------------
00018AC6                            Map_obj79:
00018AC6                            	include "_maps\obj79.asm"
00018AC6                            ; ---------------------------------------------------------------------------
00018AC6                            ; Sprite mappings - lamppost
00018AC6                            ; ---------------------------------------------------------------------------
00018AC6 0000 0000                  		dc.w byte_17100-Map_obj79, byte_1711F-Map_obj79
00018ACA 0000 0000                  		dc.w byte_17134-Map_obj79, byte_1713F-Map_obj79
00018ACE 06                         byte_17100:	dc.b 6
00018ACF E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
00018AD4 E401 0800 00               		dc.b $E4, 1, 8,	0, 0
00018AD9 F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
00018ADE F403 2802 00               		dc.b $F4, 3, $28, 2, 0
00018AE3 D401 0006 F8               		dc.b $D4, 1, 0,	6, $F8
00018AE8 D401 0806 00               		dc.b $D4, 1, 8,	6, 0
00018AED 04                         byte_1711F:	dc.b 4
00018AEE E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
00018AF3 E401 0800 00               		dc.b $E4, 1, 8,	0, 0
00018AF8 F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
00018AFD F403 2802 00               		dc.b $F4, 3, $28, 2, 0
00018B02 02                         byte_17134:	dc.b 2
00018B03 F801 0008 F8               		dc.b $F8, 1, 0,	8, $F8
00018B08 F801 0808 00               		dc.b $F8, 1, 8,	8, 0
00018B0D 06                         byte_1713F:	dc.b 6
00018B0E E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
00018B13 E401 0800 00               		dc.b $E4, 1, 8,	0, 0
00018B18 F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
00018B1D F403 2802 00               		dc.b $F4, 3, $28, 2, 0
00018B22 D401 0008 F8               		dc.b $D4, 1, 0,	8, $F8
00018B27 D401 0808 00               		dc.b $D4, 1, 8,	8, 0
00018B2C                            		even
00018B2C                            		even
00018B2C                            
00018B2C                            ; ===========================================================================
00018B2C                            ; ---------------------------------------------------------------------------
00018B2C                            ; Object 7D - hidden points at the end of a level
00018B2C                            ; ---------------------------------------------------------------------------
00018B2C                            
00018B2C                            Obj7D:					; XREF: Obj_Index
00018B2C 7000                       		moveq	#0,d0
00018B2E 1028 0024                  		move.b	$24(a0),d0
00018B32 323B 0000                  		move.w	Obj7D_Index(pc,d0.w),d1
00018B36 4EFB 1000                  		jmp	Obj7D_Index(pc,d1.w)
00018B3A                            ; ===========================================================================
00018B3A 0000                       Obj7D_Index:	dc.w Obj7D_Main-Obj7D_Index
00018B3C 0000                       		dc.w Obj7D_DelayDel-Obj7D_Index
00018B3E                            ; ===========================================================================
00018B3E                            
00018B3E                            Obj7D_Main:				; XREF: Obj7D_Index
00018B3E 7410                       		moveq	#$10,d2
00018B40 3602                       		move.w	d2,d3
00018B42 D643                       		add.w	d3,d3
00018B44 43F8 D000                  		lea	($FFFFD000).w,a1
00018B48 3029 0008                  		move.w	8(a1),d0
00018B4C 9068 0008                  		sub.w	8(a0),d0
00018B50 D042                       		add.w	d2,d0
00018B52 B043                       		cmp.w	d3,d0
00018B54 6400                       		bcc.s	Obj7D_ChkDel
00018B56 3229 000C                  		move.w	$C(a1),d1
00018B5A 9268 000C                  		sub.w	$C(a0),d1
00018B5E D242                       		add.w	d2,d1
00018B60 B243                       		cmp.w	d3,d1
00018B62 6400                       		bcc.s	Obj7D_ChkDel
00018B64 4A78 FE08                  		tst.w	($FFFFFE08).w
00018B68 6600                       		bne.s	Obj7D_ChkDel
00018B6A 4A38 F7CD                  		tst.b	($FFFFF7CD).w
00018B6E 6600                       		bne.s	Obj7D_ChkDel
00018B70 5428 0024                  		addq.b	#2,$24(a0)
00018B74 217C 0000 0000 0004        		move.l	#Map_obj7D,4(a0)
00018B7C 317C 84B6 0002             		move.w	#$84B6,2(a0)
00018B82 0028 0004 0001             		ori.b	#4,1(a0)
00018B88 117C 0000 0018             		move.b	#0,$18(a0)
00018B8E 117C 0010 0019             		move.b	#$10,$19(a0)
00018B94 1168 0028 001A             		move.b	$28(a0),$1A(a0)
00018B9A 317C 0077 0030             		move.w	#119,$30(a0)	; set display time to 2	seconds
00018BA0 303C 00C9                  		move.w	#$C9,d0
00018BA4 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play bonus sound
00018BAA 7000                       		moveq	#0,d0
00018BAC 1028 0028                  		move.b	$28(a0),d0
00018BB0 D040                       		add.w	d0,d0
00018BB2 303B 0000                  		move.w	Obj7D_Points(pc,d0.w),d0 ; load	bonus points array
00018BB6 4EB9 0000 0000             		jsr	AddPoints
00018BBC                            
00018BBC                            Obj7D_ChkDel:
00018BBC 3028 0008                  		move.w	8(a0),d0
00018BC0 0240 FF80                  		andi.w	#$FF80,d0
00018BC4 3238 F700                  		move.w	($FFFFF700).w,d1
00018BC8 0441 0080                  		subi.w	#$80,d1
00018BCC 0241 FF80                  		andi.w	#$FF80,d1
00018BD0 9041                       		sub.w	d1,d0
00018BD2 0C40 0280                  		cmpi.w	#$280,d0
00018BD6 6200                       		bhi.s	Obj7D_Delete
00018BD8 4E75                       		rts	
00018BDA                            ; ===========================================================================
00018BDA                            
00018BDA                            Obj7D_Delete:
00018BDA 4EF9 0000 E146             		jmp	DeleteObject
00018BE0                            ; ===========================================================================
00018BE0 0000                       Obj7D_Points:	dc.w 0			; Bonus	points array
00018BE2 03E8                       		dc.w 1000
00018BE4 0064                       		dc.w 100
00018BE6 000A                       		dc.w 10
00018BE8                            ; ===========================================================================
00018BE8                            
00018BE8                            Obj7D_DelayDel:				; XREF: Obj7D_Index
00018BE8 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from display time
00018BEC 6B00                       		bmi.s	Obj7D_Delete2	; if time is zero, branch
00018BEE 3028 0008                  		move.w	8(a0),d0
00018BF2 0240 FF80                  		andi.w	#-$80,d0
00018BF6 3238 F700                  		move.w	($FFFFF700).w,d1
00018BFA 0441 0080                  		subi.w	#$80,d1
00018BFE 0241 FF80                  		andi.w	#-$80,d1
00018C02 9041                       		sub.w	d1,d0
00018C04 0C40 0280                  		cmpi.w	#$280,d0
00018C08 6200                       		bhi.s	Obj7D_Delete2
00018C0A 4EF9 0000 E10A             		jmp	DisplaySprite
00018C10                            ; ===========================================================================
00018C10                            
00018C10                            Obj7D_Delete2:
00018C10 4EF9 0000 E146             		jmp	DeleteObject
00018C16                            ; ===========================================================================
00018C16                            ; ---------------------------------------------------------------------------
00018C16                            ; Sprite mappings - hidden points at the end of	a level
00018C16                            ; ---------------------------------------------------------------------------
00018C16                            Map_obj7D:
00018C16                            	include "_maps\obj7D.asm"
00018C16                            ; ---------------------------------------------------------------------------
00018C16                            ; Sprite mappings - hidden points at the end of	a level
00018C16                            ; ---------------------------------------------------------------------------
00018C16 0000 0000                  		dc.w byte_17250-Map_obj7D, byte_17251-Map_obj7D
00018C1A 0000 0000                  		dc.w byte_17257-Map_obj7D, byte_1725D-Map_obj7D
00018C1E 00                         byte_17250:	dc.b 0
00018C1F 01                         byte_17251:	dc.b 1
00018C20 F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
00018C25 01                         byte_17257:	dc.b 1
00018C26 F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
00018C2B 01                         byte_1725D:	dc.b 1
00018C2C F40E 0018 F0               		dc.b $F4, $E, 0, $18, $F0
00018C32 00                         		even
00018C32 00                         		even
00018C32                            
00018C32                            ; ===========================================================================
00018C32                            ; ---------------------------------------------------------------------------
00018C32                            ; Object 8A - "SONIC TEAM PRESENTS" and	credits
00018C32                            ; ---------------------------------------------------------------------------
00018C32                            
00018C32                            Obj8A:					; XREF: Obj_Index
00018C32 7000                       		moveq	#0,d0
00018C34 1028 0024                  		move.b	$24(a0),d0
00018C38 323B 0000                  		move.w	Obj8A_Index(pc,d0.w),d1
00018C3C 4EFB 1000                  		jmp	Obj8A_Index(pc,d1.w)
00018C40                            ; ===========================================================================
00018C40 0000                       Obj8A_Index:	dc.w Obj8A_Main-Obj8A_Index
00018C42 0000                       		dc.w Obj8A_Display-Obj8A_Index
00018C44                            ; ===========================================================================
00018C44                            
00018C44                            Obj8A_Main:				; XREF: Obj8A_Index
00018C44 5428 0024                  		addq.b	#2,$24(a0)
00018C48 317C 0120 0008             		move.w	#$120,8(a0)
00018C4E 317C 00F0 000A             		move.w	#$F0,$A(a0)
00018C54 217C 0000 0000 0004        		move.l	#Map_obj8A,4(a0)
00018C5C 317C 05A0 0002             		move.w	#$5A0,2(a0)
00018C62 3038 FFF4                  		move.w	($FFFFFFF4).w,d0 ; load	credits	index number
00018C66 1140 001A                  		move.b	d0,$1A(a0)	; display appropriate sprite
00018C6A 117C 0000 0001             		move.b	#0,1(a0)
00018C70 117C 0000 0018             		move.b	#0,$18(a0)
00018C76 0C38 0004 F600             		cmpi.b	#4,($FFFFF600).w ; is the scene	number 04 (title screen)?
00018C7C 6600                       		bne.s	Obj8A_Display	; if not, branch
00018C7E 317C 00A6 0002             		move.w	#$A6,2(a0)
00018C84 117C 000A 001A             		move.b	#$A,$1A(a0)	; display "SONIC TEAM PRESENTS"
00018C8A 4A38 FFE3                  		tst.b	($FFFFFFE3).w	; is hidden credits cheat on?
00018C8E 6700                       		beq.s	Obj8A_Display	; if not, branch
00018C90 0C38 0072 F604             		cmpi.b	#$72,($FFFFF604).w ; is	Start+A+C+Down being pressed?
00018C96 6600                       		bne.s	Obj8A_Display	; if not, branch
00018C98 31FC 0EEE FBC0             		move.w	#$EEE,($FFFFFBC0).w ; 3rd pallet, 1st entry = white
00018C9E 31FC 0880 FBC2             		move.w	#$880,($FFFFFBC2).w ; 3rd pallet, 2nd entry = cyan
00018CA4 4EF9 0000 E146             		jmp	DeleteObject
00018CAA                            ; ===========================================================================
00018CAA                            
00018CAA                            Obj8A_Display:				; XREF: Obj8A_Index
00018CAA 4EF9 0000 E10A             		jmp	DisplaySprite
00018CB0                            ; ===========================================================================
00018CB0                            ; ---------------------------------------------------------------------------
00018CB0                            ; Sprite mappings - "SONIC TEAM	PRESENTS" and credits
00018CB0                            ; ---------------------------------------------------------------------------
00018CB0                            Map_obj8A:
00018CB0                            	include "_maps\obj8A.asm"
00018CB0                            ; ---------------------------------------------------------------------------
00018CB0                            ; Sprite mappings - "SONIC TEAM	PRESENTS" and credits
00018CB0                            ; ---------------------------------------------------------------------------
00018CB0 0000 0000                  		dc.w byte_172F8-Map_obj8A, byte_1733F-Map_obj8A
00018CB4 0000 0000                  		dc.w byte_17390-Map_obj8A, byte_173C3-Map_obj8A
00018CB8 0000 0000                  		dc.w byte_1743C-Map_obj8A, byte_174A1-Map_obj8A
00018CBC 0000 0000                  		dc.w byte_17524-Map_obj8A, byte_17598-Map_obj8A
00018CC0 0000 0000                  		dc.w byte_17634-Map_obj8A, byte_17680-Map_obj8A
00018CC4 0000                       		dc.w byte_176A9-Map_obj8A
00018CC6 0E                         byte_172F8:	dc.b $E			 ; SONIC TEAM STAFF
00018CC7 F805 002E 88               		dc.b $F8, 5, 0,	$2E, $88
00018CCC F805 0026 98               		dc.b $F8, 5, 0,	$26, $98
00018CD1 F805 001A A8               		dc.b $F8, 5, 0,	$1A, $A8
00018CD6 F801 0046 B8               		dc.b $F8, 1, 0,	$46, $B8
00018CDB F805 001E C0               		dc.b $F8, 5, 0,	$1E, $C0
00018CE0 F805 003E D8               		dc.b $F8, 5, 0,	$3E, $D8
00018CE5 F805 000E E8               		dc.b $F8, 5, 0,	$E, $E8
00018CEA F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
00018CEF F809 0008 08               		dc.b $F8, 9, 0,	8, 8
00018CF4 F805 002E 28               		dc.b $F8, 5, 0,	$2E, $28
00018CF9 F805 003E 38               		dc.b $F8, 5, 0,	$3E, $38
00018CFE F805 0004 48               		dc.b $F8, 5, 0,	4, $48
00018D03 F805 005C 58               		dc.b $F8, 5, 0,	$5C, $58
00018D08 F805 005C 68               		dc.b $F8, 5, 0,	$5C, $68
00018D0D 10                         byte_1733F:	dc.b $10		; GAME PLAN CAROL YAS
00018D0E D805 0000 80               		dc.b $D8, 5, 0,	0, $80
00018D13 D805 0004 90               		dc.b $D8, 5, 0,	4, $90
00018D18 D809 0008 A0               		dc.b $D8, 9, 0,	8, $A0
00018D1D D805 000E B4               		dc.b $D8, 5, 0,	$E, $B4
00018D22 D805 0012 D0               		dc.b $D8, 5, 0,	$12, $D0
00018D27 D805 0016 E0               		dc.b $D8, 5, 0,	$16, $E0
00018D2C D805 0004 F0               		dc.b $D8, 5, 0,	4, $F0
00018D31 D805 001A 00               		dc.b $D8, 5, 0,	$1A, 0
00018D36 0805 001E C8               		dc.b 8,	5, 0, $1E, $C8
00018D3B 0805 0004 D8               		dc.b 8,	5, 0, 4, $D8
00018D40 0805 0022 E8               		dc.b 8,	5, 0, $22, $E8
00018D45 0805 0026 F8               		dc.b 8,	5, 0, $26, $F8
00018D4A 0805 0016 08               		dc.b 8,	5, 0, $16, 8
00018D4F 0805 002A 20               		dc.b 8,	5, 0, $2A, $20
00018D54 0805 0004 30               		dc.b 8,	5, 0, 4, $30
00018D59 0805 002E 44               		dc.b 8,	5, 0, $2E, $44
00018D5E 0A                         byte_17390:	dc.b $A			 ; PROGRAM YU 2
00018D5F D805 0012 80               		dc.b $D8, 5, 0,	$12, $80
00018D64 D805 0022 90               		dc.b $D8, 5, 0,	$22, $90
00018D69 D805 0026 A0               		dc.b $D8, 5, 0,	$26, $A0
00018D6E D805 0000 B0               		dc.b $D8, 5, 0,	0, $B0
00018D73 D805 0022 C0               		dc.b $D8, 5, 0,	$22, $C0
00018D78 D805 0004 D0               		dc.b $D8, 5, 0,	4, $D0
00018D7D D809 0008 E0               		dc.b $D8, 9, 0,	8, $E0
00018D82 0805 002A E8               		dc.b 8,	5, 0, $2A, $E8
00018D87 0805 0032 F8               		dc.b 8,	5, 0, $32, $F8
00018D8C 0805 0036 08               		dc.b 8,	5, 0, $36, 8
00018D91 18                         byte_173C3:	dc.b $18		 ; CHARACTER DESIGN BIGISLAND
00018D92 D805 001E 88               		dc.b $D8, 5, 0,	$1E, $88
00018D97 D805 003A 98               		dc.b $D8, 5, 0,	$3A, $98
00018D9C D805 0004 A8               		dc.b $D8, 5, 0,	4, $A8
00018DA1 D805 0022 B8               		dc.b $D8, 5, 0,	$22, $B8
00018DA6 D805 0004 C8               		dc.b $D8, 5, 0,	4, $C8
00018DAB D805 001E D8               		dc.b $D8, 5, 0,	$1E, $D8
00018DB0 D805 003E E8               		dc.b $D8, 5, 0,	$3E, $E8
00018DB5 D805 000E F8               		dc.b $D8, 5, 0,	$E, $F8
00018DBA D805 0022 08               		dc.b $D8, 5, 0,	$22, 8
00018DBF D805 0042 20               		dc.b $D8, 5, 0,	$42, $20
00018DC4 D805 000E 30               		dc.b $D8, 5, 0,	$E, $30
00018DC9 D805 002E 40               		dc.b $D8, 5, 0,	$2E, $40
00018DCE D801 0046 50               		dc.b $D8, 1, 0,	$46, $50
00018DD3 D805 0000 58               		dc.b $D8, 5, 0,	0, $58
00018DD8 D805 001A 68               		dc.b $D8, 5, 0,	$1A, $68
00018DDD 0805 0048 C0               		dc.b 8,	5, 0, $48, $C0
00018DE2 0801 0046 D0               		dc.b 8,	1, 0, $46, $D0
00018DE7 0805 0000 D8               		dc.b 8,	5, 0, 0, $D8
00018DEC 0801 0046 E8               		dc.b 8,	1, 0, $46, $E8
00018DF1 0805 002E F0               		dc.b 8,	5, 0, $2E, $F0
00018DF6 0805 0016 00               		dc.b 8,	5, 0, $16, 0
00018DFB 0805 0004 10               		dc.b 8,	5, 0, 4, $10
00018E00 0805 001A 20               		dc.b 8,	5, 0, $1A, $20
00018E05 0805 0042 30               		dc.b 8,	5, 0, $42, $30
00018E0A 14                         byte_1743C:	dc.b $14		 ; DESIGN JINYA	PHENIX RIE
00018E0B D005 0042 A0               		dc.b $D0, 5, 0,	$42, $A0
00018E10 D005 000E B0               		dc.b $D0, 5, 0,	$E, $B0
00018E15 D005 002E C0               		dc.b $D0, 5, 0,	$2E, $C0
00018E1A D001 0046 D0               		dc.b $D0, 1, 0,	$46, $D0
00018E1F D005 0000 D8               		dc.b $D0, 5, 0,	0, $D8
00018E24 D005 001A E8               		dc.b $D0, 5, 0,	$1A, $E8
00018E29 0005 004C E8               		dc.b 0,	5, 0, $4C, $E8
00018E2E 0001 0046 F8               		dc.b 0,	1, 0, $46, $F8
00018E33 0005 001A 04               		dc.b 0,	5, 0, $1A, 4
00018E38 0005 002A 14               		dc.b 0,	5, 0, $2A, $14
00018E3D 0005 0004 24               		dc.b 0,	5, 0, 4, $24
00018E42 2005 0012 D0               		dc.b $20, 5, 0,	$12, $D0
00018E47 2005 003A E0               		dc.b $20, 5, 0,	$3A, $E0
00018E4C 2005 000E F0               		dc.b $20, 5, 0,	$E, $F0
00018E51 2005 001A 00               		dc.b $20, 5, 0,	$1A, 0
00018E56 2001 0046 10               		dc.b $20, 1, 0,	$46, $10
00018E5B 2005 0050 18               		dc.b $20, 5, 0,	$50, $18
00018E60 2005 0022 30               		dc.b $20, 5, 0,	$22, $30
00018E65 2001 0046 40               		dc.b $20, 1, 0,	$46, $40
00018E6A 2005 000E 48               		dc.b $20, 5, 0,	$E, $48
00018E6F 1A                         byte_174A1:	dc.b $1A		 ; SOUND PRODUCE MASATO	NAKAMURA
00018E70 D805 002E 98               		dc.b $D8, 5, 0,	$2E, $98
00018E75 D805 0026 A8               		dc.b $D8, 5, 0,	$26, $A8
00018E7A D805 0032 B8               		dc.b $D8, 5, 0,	$32, $B8
00018E7F D805 001A C8               		dc.b $D8, 5, 0,	$1A, $C8
00018E84 D805 0054 D8               		dc.b $D8, 5, 0,	$54, $D8
00018E89 D805 0012 F8               		dc.b $D8, 5, 0,	$12, $F8
00018E8E D805 0022 08               		dc.b $D8, 5, 0,	$22, 8
00018E93 D805 0026 18               		dc.b $D8, 5, 0,	$26, $18
00018E98 D805 0042 28               		dc.b $D8, 5, 0,	$42, $28
00018E9D D805 0032 38               		dc.b $D8, 5, 0,	$32, $38
00018EA2 D805 001E 48               		dc.b $D8, 5, 0,	$1E, $48
00018EA7 D805 000E 58               		dc.b $D8, 5, 0,	$E, $58
00018EAC 0809 0008 88               		dc.b 8,	9, 0, 8, $88
00018EB1 0805 0004 9C               		dc.b 8,	5, 0, 4, $9C
00018EB6 0805 002E AC               		dc.b 8,	5, 0, $2E, $AC
00018EBB 0805 0004 BC               		dc.b 8,	5, 0, 4, $BC
00018EC0 0805 003E CC               		dc.b 8,	5, 0, $3E, $CC
00018EC5 0805 0026 DC               		dc.b 8,	5, 0, $26, $DC
00018ECA 0805 001A F8               		dc.b 8,	5, 0, $1A, $F8
00018ECF 0805 0004 08               		dc.b 8,	5, 0, 4, 8
00018ED4 0805 0058 18               		dc.b 8,	5, 0, $58, $18
00018ED9 0805 0004 28               		dc.b 8,	5, 0, 4, $28
00018EDE 0809 0008 38               		dc.b 8,	9, 0, 8, $38
00018EE3 0805 0032 4C               		dc.b 8,	5, 0, $32, $4C
00018EE8 0805 0022 5C               		dc.b 8,	5, 0, $22, $5C
00018EED 0805 0004 6C               		dc.b 8,	5, 0, 4, $6C
00018EF2 17                         byte_17524:	dc.b $17		 ; SOUND PROGRAM JIMITA	MACKY
00018EF3 D005 002E 98               		dc.b $D0, 5, 0,	$2E, $98
00018EF8 D005 0026 A8               		dc.b $D0, 5, 0,	$26, $A8
00018EFD D005 0032 B8               		dc.b $D0, 5, 0,	$32, $B8
00018F02 D005 001A C8               		dc.b $D0, 5, 0,	$1A, $C8
00018F07 D005 0054 D8               		dc.b $D0, 5, 0,	$54, $D8
00018F0C D005 0012 F8               		dc.b $D0, 5, 0,	$12, $F8
00018F11 D005 0022 08               		dc.b $D0, 5, 0,	$22, 8
00018F16 D005 0026 18               		dc.b $D0, 5, 0,	$26, $18
00018F1B D005 0000 28               		dc.b $D0, 5, 0,	0, $28
00018F20 D005 0022 38               		dc.b $D0, 5, 0,	$22, $38
00018F25 D005 0004 48               		dc.b $D0, 5, 0,	4, $48
00018F2A D009 0008 58               		dc.b $D0, 9, 0,	8, $58
00018F2F 0005 004C D0               		dc.b 0,	5, 0, $4C, $D0
00018F34 0001 0046 E0               		dc.b 0,	1, 0, $46, $E0
00018F39 0009 0008 E8               		dc.b 0,	9, 0, 8, $E8
00018F3E 0001 0046 FC               		dc.b 0,	1, 0, $46, $FC
00018F43 0005 003E 04               		dc.b 0,	5, 0, $3E, 4
00018F48 0005 0004 14               		dc.b 0,	5, 0, 4, $14
00018F4D 2009 0008 D0               		dc.b $20, 9, 0,	8, $D0
00018F52 2005 0004 E4               		dc.b $20, 5, 0,	4, $E4
00018F57 2005 001E F4               		dc.b $20, 5, 0,	$1E, $F4
00018F5C 2005 0058 04               		dc.b $20, 5, 0,	$58, 4
00018F61 2005 002A 14               		dc.b $20, 5, 0,	$2A, $14
00018F66 1F                         byte_17598:	dc.b $1F		 ; SPECIAL THANKS FUJIO	MINEGISHI PAPA
00018F67 D805 002E 80               		dc.b $D8, 5, 0,	$2E, $80
00018F6C D805 0012 90               		dc.b $D8, 5, 0,	$12, $90
00018F71 D805 000E A0               		dc.b $D8, 5, 0,	$E, $A0
00018F76 D805 001E B0               		dc.b $D8, 5, 0,	$1E, $B0
00018F7B D801 0046 C0               		dc.b $D8, 1, 0,	$46, $C0
00018F80 D805 0004 C8               		dc.b $D8, 5, 0,	4, $C8
00018F85 D805 0016 D8               		dc.b $D8, 5, 0,	$16, $D8
00018F8A D805 003E F8               		dc.b $D8, 5, 0,	$3E, $F8
00018F8F D805 003A 08               		dc.b $D8, 5, 0,	$3A, 8
00018F94 D805 0004 18               		dc.b $D8, 5, 0,	4, $18
00018F99 D805 001A 28               		dc.b $D8, 5, 0,	$1A, $28
00018F9E D805 0058 38               		dc.b $D8, 5, 0,	$58, $38
00018FA3 D805 002E 48               		dc.b $D8, 5, 0,	$2E, $48
00018FA8 0005 005C B0               		dc.b 0,	5, 0, $5C, $B0
00018FAD 0005 0032 C0               		dc.b 0,	5, 0, $32, $C0
00018FB2 0005 004C D0               		dc.b 0,	5, 0, $4C, $D0
00018FB7 0001 0046 E0               		dc.b 0,	1, 0, $46, $E0
00018FBC 0005 0026 E8               		dc.b 0,	5, 0, $26, $E8
00018FC1 0009 0008 00               		dc.b 0,	9, 0, 8, 0
00018FC6 0001 0046 14               		dc.b 0,	1, 0, $46, $14
00018FCB 0005 001A 1C               		dc.b 0,	5, 0, $1A, $1C
00018FD0 0005 000E 2C               		dc.b 0,	5, 0, $E, $2C
00018FD5 0005 0000 3C               		dc.b 0,	5, 0, 0, $3C
00018FDA 0001 0046 4C               		dc.b 0,	1, 0, $46, $4C
00018FDF 0005 002E 54               		dc.b 0,	5, 0, $2E, $54
00018FE4 0005 003A 64               		dc.b 0,	5, 0, $3A, $64
00018FE9 0001 0046 74               		dc.b 0,	1, 0, $46, $74
00018FEE 2005 0012 F8               		dc.b $20, 5, 0,	$12, $F8
00018FF3 2005 0004 08               		dc.b $20, 5, 0,	4, 8
00018FF8 2005 0012 18               		dc.b $20, 5, 0,	$12, $18
00018FFD 2005 0004 28               		dc.b $20, 5, 0,	4, $28
00019002 0F                         byte_17634:	dc.b $F			 ; PRESENTED BY	SEGA
00019003 F805 0012 80               		dc.b $F8, 5, 0,	$12, $80
00019008 F805 0022 90               		dc.b $F8, 5, 0,	$22, $90
0001900D F805 000E A0               		dc.b $F8, 5, 0,	$E, $A0
00019012 F805 002E B0               		dc.b $F8, 5, 0,	$2E, $B0
00019017 F805 000E C0               		dc.b $F8, 5, 0,	$E, $C0
0001901C F805 001A D0               		dc.b $F8, 5, 0,	$1A, $D0
00019021 F805 003E E0               		dc.b $F8, 5, 0,	$3E, $E0
00019026 F805 000E F0               		dc.b $F8, 5, 0,	$E, $F0
0001902B F805 0042 00               		dc.b $F8, 5, 0,	$42, 0
00019030 F805 0048 18               		dc.b $F8, 5, 0,	$48, $18
00019035 F805 002A 28               		dc.b $F8, 5, 0,	$2A, $28
0001903A F805 002E 40               		dc.b $F8, 5, 0,	$2E, $40
0001903F F805 000E 50               		dc.b $F8, 5, 0,	$E, $50
00019044 F805 0000 60               		dc.b $F8, 5, 0,	0, $60
00019049 F805 0004 70               		dc.b $F8, 5, 0,	4, $70
0001904E 08                         byte_17680:	dc.b 8			 ; TRY AGAIN
0001904F 3005 003E C0               		dc.b $30, 5, 0,	$3E, $C0
00019054 3005 0022 D0               		dc.b $30, 5, 0,	$22, $D0
00019059 3005 002A E0               		dc.b $30, 5, 0,	$2A, $E0
0001905E 3005 0004 F8               		dc.b $30, 5, 0,	4, $F8
00019063 3005 0000 08               		dc.b $30, 5, 0,	0, 8
00019068 3005 0004 18               		dc.b $30, 5, 0,	4, $18
0001906D 3001 0046 28               		dc.b $30, 1, 0,	$46, $28
00019072 3005 001A 30               		dc.b $30, 5, 0,	$1A, $30
00019077 11                         byte_176A9:	dc.b $11		 ; SONIC TEAM PRESENTS
00019078 E805 002E B4               		dc.b $E8, 5, 0,	$2E, $B4
0001907D E805 0026 C4               		dc.b $E8, 5, 0,	$26, $C4
00019082 E805 001A D4               		dc.b $E8, 5, 0,	$1A, $D4
00019087 E801 0046 E4               		dc.b $E8, 1, 0,	$46, $E4
0001908C E805 001E EC               		dc.b $E8, 5, 0,	$1E, $EC
00019091 E805 003E 04               		dc.b $E8, 5, 0,	$3E, 4
00019096 E805 000E 14               		dc.b $E8, 5, 0,	$E, $14
0001909B E805 0004 24               		dc.b $E8, 5, 0,	4, $24
000190A0 E809 0008 34               		dc.b $E8, 9, 0,	8, $34
000190A5 0005 0012 C0               		dc.b 0,	5, 0, $12, $C0
000190AA 0005 0022 D0               		dc.b 0,	5, 0, $22, $D0
000190AF 0005 000E E0               		dc.b 0,	5, 0, $E, $E0
000190B4 0005 002E F0               		dc.b 0,	5, 0, $2E, $F0
000190B9 0005 000E 00               		dc.b 0,	5, 0, $E, 0
000190BE 0005 001A 10               		dc.b 0,	5, 0, $1A, $10
000190C3 0005 003E 20               		dc.b 0,	5, 0, $3E, $20
000190C8 0005 002E 30               		dc.b 0,	5, 0, $2E, $30
000190CE 00                         		even
000190CE 00                         		even
000190CE                            
000190CE                            ; ===========================================================================
000190CE                            ; ---------------------------------------------------------------------------
000190CE                            ; Object 3D - Eggman (GHZ)
000190CE                            ; ---------------------------------------------------------------------------
000190CE                            
000190CE                            Obj3D:					; XREF: Obj_Index
000190CE 7000                       		moveq	#0,d0
000190D0 1028 0024                  		move.b	$24(a0),d0
000190D4 323B 0000                  		move.w	Obj3D_Index(pc,d0.w),d1
000190D8 4EFB 1000                  		jmp	Obj3D_Index(pc,d1.w)
000190DC                            ; ===========================================================================
000190DC 0000                       Obj3D_Index:	dc.w Obj3D_Main-Obj3D_Index
000190DE 0000                       		dc.w Obj3D_ShipMain-Obj3D_Index
000190E0 0000                       		dc.w Obj3D_FaceMain-Obj3D_Index
000190E2 0000                       		dc.w Obj3D_FlameMain-Obj3D_Index
000190E4                            
000190E4 0200                       Obj3D_ObjData:	dc.b 2,	0		; routine counter, animation
000190E6 0401                       		dc.b 4,	1
000190E8 0607                       		dc.b 6,	7
000190EA                            ; ===========================================================================
000190EA                            
000190EA                            Obj3D_Main:				; XREF: Obj3D_Index
000190EA 45F9 0001 90E4             		lea	(Obj3D_ObjData).l,a2
000190F0 2248                       		movea.l	a0,a1
000190F2 7202                       		moveq	#2,d1
000190F4 6000                       		bra.s	Obj3D_LoadBoss
000190F6                            ; ===========================================================================
000190F6                            
000190F6                            Obj3D_Loop:
000190F6 4EB9 0000 E5B6             		jsr	SingleObjLoad2
000190FC 6600                       		bne.s	loc_17772
000190FE                            
000190FE                            Obj3D_LoadBoss:				; XREF: Obj3D_Main
000190FE 135A 0024                  		move.b	(a2)+,$24(a1)
00019102 12BC 003D                  		move.b	#$3D,0(a1)
00019106 3368 0008 0008             		move.w	8(a0),8(a1)
0001910C 3368 000C 000C             		move.w	$C(a0),$C(a1)
00019112 237C 0000 0000 0004        		move.l	#Map_Eggman,4(a1)
0001911A 337C 0400 0002             		move.w	#$400,2(a1)
00019120 137C 0004 0001             		move.b	#4,1(a1)
00019126 137C 0020 0019             		move.b	#$20,$19(a1)
0001912C 137C 0003 0018             		move.b	#3,$18(a1)
00019132 135A 001C                  		move.b	(a2)+,$1C(a1)
00019136 2348 0034                  		move.l	a0,$34(a1)
0001913A 51C9 FFBA                  		dbf	d1,Obj3D_Loop	; repeat sequence 2 more times
0001913E                            
0001913E                            loc_17772:
0001913E 3168 0008 0030             		move.w	8(a0),$30(a0)
00019144 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001914A 117C 000F 0020             		move.b	#$F,$20(a0)
00019150 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
00019156                            
00019156                            Obj3D_ShipMain:				; XREF: Obj3D_Index
00019156 7000                       		moveq	#0,d0
00019158 1028 0025                  		move.b	$25(a0),d0
0001915C 323B 0000                  		move.w	Obj3D_ShipIndex(pc,d0.w),d1
00019160 4EBB 1000                  		jsr	Obj3D_ShipIndex(pc,d1.w)
00019164 43F9 0000 0000             		lea	(Ani_Eggman).l,a1
0001916A 4EB9 0000 B21C             		jsr	AnimateSprite
00019170 1028 0022                  		move.b	$22(a0),d0
00019174 0200 0003                  		andi.b	#3,d0
00019178 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001917E 8128 0001                  		or.b	d0,1(a0)
00019182 4EF9 0000 E10A             		jmp	DisplaySprite
00019188                            ; ===========================================================================
00019188 0000                       Obj3D_ShipIndex:dc.w Obj3D_ShipStart-Obj3D_ShipIndex
0001918A 0000                       		dc.w Obj3D_MakeBall-Obj3D_ShipIndex
0001918C 0000                       		dc.w Obj3D_ShipMove-Obj3D_ShipIndex
0001918E 0000                       		dc.w loc_17954-Obj3D_ShipIndex
00019190 0000                       		dc.w loc_1797A-Obj3D_ShipIndex
00019192 0000                       		dc.w loc_179AC-Obj3D_ShipIndex
00019194 0000                       		dc.w loc_179F6-Obj3D_ShipIndex
00019196                            ; ===========================================================================
00019196                            
00019196                            Obj3D_ShipStart:			; XREF: Obj3D_ShipIndex
00019196 317C 0100 0012             		move.w	#$100,$12(a0)	; move ship down
0001919C 6100 0000                  		bsr.w	BossMove
000191A0 0C68 0338 0038             		cmpi.w	#$338,$38(a0)
000191A6 6600                       		bne.s	loc_177E6
000191A8 317C 0000 0012             		move.w	#0,$12(a0)	; stop ship
000191AE 5428 0025                  		addq.b	#2,$25(a0)	; goto next routine
000191B2                            
000191B2                            loc_177E6:
000191B2 1028 003F                  		move.b	$3F(a0),d0
000191B6 4EB9 0000 33D4             		jsr	(CalcSine).l
000191BC EC40                       		asr.w	#6,d0
000191BE D068 0038                  		add.w	$38(a0),d0
000191C2 3140 000C                  		move.w	d0,$C(a0)
000191C6 3168 0030 0008             		move.w	$30(a0),8(a0)
000191CC 5428 003F                  		addq.b	#2,$3F(a0)
000191D0 0C28 0008 0025             		cmpi.b	#8,$25(a0)
000191D6 6400                       		bcc.s	locret_1784A
000191D8 4A28 0022                  		tst.b	$22(a0)
000191DC 6B00                       		bmi.s	loc_1784C
000191DE 4A28 0020                  		tst.b	$20(a0)
000191E2 6600                       		bne.s	locret_1784A
000191E4 4A28 003E                  		tst.b	$3E(a0)
000191E8 6600                       		bne.s	Obj3D_ShipFlash
000191EA 117C 0020 003E             		move.b	#$20,$3E(a0)	; set number of	times for ship to flash
000191F0 303C 00AC                  		move.w	#$AC,d0
000191F4 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play boss damage sound
000191FA                            
000191FA                            Obj3D_ShipFlash:
000191FA 43F8 FB22                  		lea	($FFFFFB22).w,a1 ; load	2nd pallet, 2nd	entry
000191FE 7000                       		moveq	#0,d0		; move 0 (black) to d0
00019200 4A51                       		tst.w	(a1)
00019202 6600                       		bne.s	loc_1783C
00019204 303C 0EEE                  		move.w	#$EEE,d0	; move 0EEE (white) to d0
00019208                            
00019208                            loc_1783C:
00019208 3280                       		move.w	d0,(a1)		; load colour stored in	d0
0001920A 5328 003E                  		subq.b	#1,$3E(a0)
0001920E 6600                       		bne.s	locret_1784A
00019210 117C 000F 0020             		move.b	#$F,$20(a0)
00019216                            
00019216                            locret_1784A:
00019216 4E75                       		rts	
00019218                            ; ===========================================================================
00019218                            
00019218                            loc_1784C:				; XREF: loc_177E6
00019218 7064                       		moveq	#100,d0
0001921A 6100 0000                  		bsr.w	AddPoints
0001921E 117C 0008 0025             		move.b	#8,$25(a0)
00019224 317C 00B3 003C             		move.w	#$B3,$3C(a0)
0001922A 4E75                       		rts	
0001922C                            
0001922C                            ; ---------------------------------------------------------------------------
0001922C                            ; Defeated boss	subroutine
0001922C                            ; ---------------------------------------------------------------------------
0001922C                            
0001922C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001922C                            
0001922C                            
0001922C                            BossDefeated:
0001922C 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00019230 0200 0007                  		andi.b	#7,d0
00019234 6600                       		bne.s	locret_178A2
00019236 4EB9 0000 E5A0             		jsr	SingleObjLoad
0001923C 6600                       		bne.s	locret_178A2
0001923E 12BC 003F                  		move.b	#$3F,0(a1)	; load explosion object
00019242 3368 0008 0008             		move.w	8(a0),8(a1)
00019248 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001924E 4EB9 0000 33AE             		jsr	(RandomNumber).l
00019254 3200                       		move.w	d0,d1
00019256 7200                       		moveq	#0,d1
00019258 1200                       		move.b	d0,d1
0001925A E409                       		lsr.b	#2,d1
0001925C 0441 0020                  		subi.w	#$20,d1
00019260 D369 0008                  		add.w	d1,8(a1)
00019264 E048                       		lsr.w	#8,d0
00019266 E608                       		lsr.b	#3,d0
00019268 D169 000C                  		add.w	d0,$C(a1)
0001926C                            
0001926C                            locret_178A2:
0001926C 4E75                       		rts	
0001926E                            ; End of function BossDefeated
0001926E                            
0001926E                            ; ---------------------------------------------------------------------------
0001926E                            ; Subroutine to	move a boss
0001926E                            ; ---------------------------------------------------------------------------
0001926E                            
0001926E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001926E                            
0001926E                            
0001926E                            BossMove:
0001926E 2428 0030                  		move.l	$30(a0),d2
00019272 2628 0038                  		move.l	$38(a0),d3
00019276 3028 0010                  		move.w	$10(a0),d0
0001927A 48C0                       		ext.l	d0
0001927C E180                       		asl.l	#8,d0
0001927E D480                       		add.l	d0,d2
00019280 3028 0012                  		move.w	$12(a0),d0
00019284 48C0                       		ext.l	d0
00019286 E180                       		asl.l	#8,d0
00019288 D680                       		add.l	d0,d3
0001928A 2142 0030                  		move.l	d2,$30(a0)
0001928E 2143 0038                  		move.l	d3,$38(a0)
00019292 4E75                       		rts	
00019294                            ; End of function BossMove
00019294                            
00019294                            ; ===========================================================================
00019294                            
00019294                            Obj3D_MakeBall:				; XREF: Obj3D_ShipIndex
00019294 317C FF00 0010             		move.w	#-$100,$10(a0)
0001929A 317C FFC0 0012             		move.w	#-$40,$12(a0)
000192A0 6100 FFCC                  		bsr.w	BossMove
000192A4 0C68 2A00 0030             		cmpi.w	#$2A00,$30(a0)
000192AA 6600                       		bne.s	loc_17916
000192AC 317C 0000 0010             		move.w	#0,$10(a0)
000192B2 317C 0000 0012             		move.w	#0,$12(a0)
000192B8 5428 0025                  		addq.b	#2,$25(a0)
000192BC 4EB9 0000 E5B6             		jsr	SingleObjLoad2
000192C2 6600                       		bne.s	loc_17910
000192C4 12BC 0048                  		move.b	#$48,0(a1)	; load swinging	ball object
000192C8 3368 0030 0008             		move.w	$30(a0),8(a1)
000192CE 3368 0038 000C             		move.w	$38(a0),$C(a1)
000192D4 2348 0034                  		move.l	a0,$34(a1)
000192D8                            
000192D8                            loc_17910:
000192D8 317C 0077 003C             		move.w	#$77,$3C(a0)
000192DE                            
000192DE                            loc_17916:
000192DE 6000 FED2                  		bra.w	loc_177E6
000192E2                            ; ===========================================================================
000192E2                            
000192E2                            Obj3D_ShipMove:				; XREF: Obj3D_ShipIndex
000192E2 5368 003C                  		subq.w	#1,$3C(a0)
000192E6 6A00                       		bpl.s	Obj3D_Reverse
000192E8 5428 0025                  		addq.b	#2,$25(a0)
000192EC 317C 003F 003C             		move.w	#$3F,$3C(a0)
000192F2 317C 0100 0010             		move.w	#$100,$10(a0)	; move the ship	sideways
000192F8 0C68 2A00 0030             		cmpi.w	#$2A00,$30(a0)
000192FE 6600                       		bne.s	Obj3D_Reverse
00019300 317C 007F 003C             		move.w	#$7F,$3C(a0)
00019306 317C 0040 0010             		move.w	#$40,$10(a0)
0001930C                            
0001930C                            Obj3D_Reverse:
0001930C 0828 0000 0022             		btst	#0,$22(a0)
00019312 6600                       		bne.s	loc_17950
00019314 4468 0010                  		neg.w	$10(a0)		; reverse direction of the ship
00019318                            
00019318                            loc_17950:
00019318 6000 FE98                  		bra.w	loc_177E6
0001931C                            ; ===========================================================================
0001931C                            
0001931C                            loc_17954:				; XREF: Obj3D_ShipIndex
0001931C 5368 003C                  		subq.w	#1,$3C(a0)
00019320 6B00                       		bmi.s	loc_17960
00019322 6100 FF4A                  		bsr.w	BossMove
00019326 6000                       		bra.s	loc_17976
00019328                            ; ===========================================================================
00019328                            
00019328                            loc_17960:
00019328 0868 0000 0022             		bchg	#0,$22(a0)
0001932E 317C 003F 003C             		move.w	#$3F,$3C(a0)
00019334 5528 0025                  		subq.b	#2,$25(a0)
00019338 317C 0000 0010             		move.w	#0,$10(a0)
0001933E                            
0001933E                            loc_17976:
0001933E 6000 FE72                  		bra.w	loc_177E6
00019342                            ; ===========================================================================
00019342                            
00019342                            loc_1797A:				; XREF: Obj3D_ShipIndex
00019342 5368 003C                  		subq.w	#1,$3C(a0)
00019346 6B00                       		bmi.s	loc_17984
00019348 6000 FEE2                  		bra.w	BossDefeated
0001934C                            ; ===========================================================================
0001934C                            
0001934C                            loc_17984:
0001934C 08E8 0000 0022             		bset	#0,$22(a0)
00019352 08A8 0007 0022             		bclr	#7,$22(a0)
00019358 4268 0010                  		clr.w	$10(a0)
0001935C 5428 0025                  		addq.b	#2,$25(a0)
00019360 317C FFDA 003C             		move.w	#-$26,$3C(a0)
00019366 4A38 F7A7                  		tst.b	($FFFFF7A7).w
0001936A 6600                       		bne.s	locret_179AA
0001936C 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
00019372                            
00019372                            locret_179AA:
00019372 4E75                       		rts	
00019374                            ; ===========================================================================
00019374                            
00019374                            loc_179AC:				; XREF: Obj3D_ShipIndex
00019374 5268 003C                  		addq.w	#1,$3C(a0)
00019378 6700                       		beq.s	loc_179BC
0001937A 6A00                       		bpl.s	loc_179C2
0001937C 0668 0018 0012             		addi.w	#$18,$12(a0)
00019382 6000                       		bra.s	loc_179EE
00019384                            ; ===========================================================================
00019384                            
00019384                            loc_179BC:
00019384 4268 0012                  		clr.w	$12(a0)
00019388 6000                       		bra.s	loc_179EE
0001938A                            ; ===========================================================================
0001938A                            
0001938A                            loc_179C2:
0001938A 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
00019390 6500                       		bcs.s	loc_179DA
00019392 6700                       		beq.s	loc_179E0
00019394 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
0001939A 6500                       		bcs.s	loc_179EE
0001939C 5428 0025                  		addq.b	#2,$25(a0)
000193A0 6000                       		bra.s	loc_179EE
000193A2                            ; ===========================================================================
000193A2                            
000193A2                            loc_179DA:
000193A2 5168 0012                  		subq.w	#8,$12(a0)
000193A6 6000                       		bra.s	loc_179EE
000193A8                            ; ===========================================================================
000193A8                            
000193A8                            loc_179E0:
000193A8 4268 0012                  		clr.w	$12(a0)
000193AC 303C 0081                  		move.w	#$81,d0
000193B0 4EB9 0000 1470             		jsr	(PlaySound).l	; play GHZ music
000193B6                            
000193B6                            loc_179EE:
000193B6 6100 FEB6                  		bsr.w	BossMove
000193BA 6000 FDF6                  		bra.w	loc_177E6
000193BE                            ; ===========================================================================
000193BE                            
000193BE                            loc_179F6:				; XREF: Obj3D_ShipIndex
000193BE 317C 0400 0010             		move.w	#$400,$10(a0)
000193C4 317C FFC0 0012             		move.w	#-$40,$12(a0)
000193CA 0C78 2AC0 F72A             		cmpi.w	#$2AC0,($FFFFF72A).w
000193D0 6700                       		beq.s	loc_17A10
000193D2 5478 F72A                  		addq.w	#2,($FFFFF72A).w
000193D6 6000                       		bra.s	loc_17A16
000193D8                            ; ===========================================================================
000193D8                            
000193D8                            loc_17A10:
000193D8 4A28 0001                  		tst.b	1(a0)
000193DC 6A00                       		bpl.s	Obj3D_ShipDel
000193DE                            
000193DE                            loc_17A16:
000193DE 6100 FE8E                  		bsr.w	BossMove
000193E2 6000 FDCE                  		bra.w	loc_177E6
000193E6                            ; ===========================================================================
000193E6                            
000193E6                            Obj3D_ShipDel:
000193E6 4EF9 0000 E146             		jmp	DeleteObject
000193EC                            ; ===========================================================================
000193EC                            
000193EC                            Obj3D_FaceMain:				; XREF: Obj3D_Index
000193EC 7000                       		moveq	#0,d0
000193EE 7201                       		moveq	#1,d1
000193F0 2268 0034                  		movea.l	$34(a0),a1
000193F4 1029 0025                  		move.b	$25(a1),d0
000193F8 5900                       		subq.b	#4,d0
000193FA 6600                       		bne.s	loc_17A3E
000193FC 0C69 2A00 0030             		cmpi.w	#$2A00,$30(a1)
00019402 6600                       		bne.s	loc_17A46
00019404 7204                       		moveq	#4,d1
00019406                            
00019406                            loc_17A3E:
00019406 5D00                       		subq.b	#6,d0
00019408 6B00                       		bmi.s	loc_17A46
0001940A 720A                       		moveq	#$A,d1
0001940C 6000                       		bra.s	loc_17A5A
0001940E                            ; ===========================================================================
0001940E                            
0001940E                            loc_17A46:
0001940E 4A29 0020                  		tst.b	$20(a1)
00019412 6600                       		bne.s	loc_17A50
00019414 7205                       		moveq	#5,d1
00019416 6000                       		bra.s	loc_17A5A
00019418                            ; ===========================================================================
00019418                            
00019418                            loc_17A50:
00019418 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
0001941E 6500                       		bcs.s	loc_17A5A
00019420 7204                       		moveq	#4,d1
00019422                            
00019422                            loc_17A5A:
00019422 1141 001C                  		move.b	d1,$1C(a0)
00019426 5500                       		subq.b	#2,d0
00019428 6600                       		bne.s	Obj3D_FaceDisp
0001942A 117C 0006 001C             		move.b	#6,$1C(a0)
00019430 4A28 0001                  		tst.b	1(a0)
00019434 6A00                       		bpl.s	Obj3D_FaceDel
00019436                            
00019436                            Obj3D_FaceDisp:
00019436 6000                       		bra.s	Obj3D_Display
00019438                            ; ===========================================================================
00019438                            
00019438                            Obj3D_FaceDel:
00019438 4EF9 0000 E146             		jmp	DeleteObject
0001943E                            ; ===========================================================================
0001943E                            
0001943E                            Obj3D_FlameMain:			; XREF: Obj3D_Index
0001943E 117C 0007 001C             		move.b	#7,$1C(a0)
00019444 2268 0034                  		movea.l	$34(a0),a1
00019448 0C29 000C 0025             		cmpi.b	#$C,$25(a1)
0001944E 6600                       		bne.s	loc_17A96
00019450 117C 000B 001C             		move.b	#$B,$1C(a0)
00019456 4A28 0001                  		tst.b	1(a0)
0001945A 6A00                       		bpl.s	Obj3D_FlameDel
0001945C 6000                       		bra.s	Obj3D_FlameDisp
0001945E                            ; ===========================================================================
0001945E                            
0001945E                            loc_17A96:
0001945E 3029 0010                  		move.w	$10(a1),d0
00019462 6700                       		beq.s	Obj3D_FlameDisp
00019464 117C 0008 001C             		move.b	#8,$1C(a0)
0001946A                            
0001946A                            Obj3D_FlameDisp:
0001946A 6000                       		bra.s	Obj3D_Display
0001946C                            ; ===========================================================================
0001946C                            
0001946C                            Obj3D_FlameDel:
0001946C 4EF9 0000 E146             		jmp	DeleteObject
00019472                            ; ===========================================================================
00019472                            
00019472                            Obj3D_Display:				; XREF: Obj3D_FaceDisp; Obj3D_FlameDisp
00019472 2268 0034                  		movea.l	$34(a0),a1
00019476 3169 0008 0008             		move.w	8(a1),8(a0)
0001947C 3169 000C 000C             		move.w	$C(a1),$C(a0)
00019482 1169 0022 0022             		move.b	$22(a1),$22(a0)
00019488 43F9 0000 0000             		lea	(Ani_Eggman).l,a1
0001948E 4EB9 0000 B21C             		jsr	AnimateSprite
00019494 1028 0022                  		move.b	$22(a0),d0
00019498 0200 0003                  		andi.b	#3,d0
0001949C 0228 00FC 0001             		andi.b	#$FC,1(a0)
000194A2 8128 0001                  		or.b	d0,1(a0)
000194A6 4EF9 0000 E10A             		jmp	DisplaySprite
000194AC                            ; ===========================================================================
000194AC                            ; ---------------------------------------------------------------------------
000194AC                            ; Object 48 - ball on a	chain that Eggman swings (GHZ)
000194AC                            ; ---------------------------------------------------------------------------
000194AC                            
000194AC                            Obj48:					; XREF: Obj_Index
000194AC 7000                       		moveq	#0,d0
000194AE 1028 0024                  		move.b	$24(a0),d0
000194B2 323B 0000                  		move.w	Obj48_Index(pc,d0.w),d1
000194B6 4EFB 1000                  		jmp	Obj48_Index(pc,d1.w)
000194BA                            ; ===========================================================================
000194BA 0000                       Obj48_Index:	dc.w Obj48_Main-Obj48_Index
000194BC 0000                       		dc.w Obj48_Base-Obj48_Index
000194BE 0000                       		dc.w Obj48_Display2-Obj48_Index
000194C0 0000                       		dc.w loc_17C68-Obj48_Index
000194C2 0000                       		dc.w Obj48_ChkVanish-Obj48_Index
000194C4                            ; ===========================================================================
000194C4                            
000194C4                            Obj48_Main:				; XREF: Obj48_Index
000194C4 5428 0024                  		addq.b	#2,$24(a0)
000194C8 317C 4080 0026             		move.w	#$4080,$26(a0)
000194CE 317C FE00 003E             		move.w	#-$200,$3E(a0)
000194D4 217C 0000 0000 0004        		move.l	#Map_BossItems,4(a0)
000194DC 317C 046C 0002             		move.w	#$46C,2(a0)
000194E2 45E8 0028                  		lea	$28(a0),a2
000194E6 14FC 0000                  		move.b	#0,(a2)+
000194EA 7205                       		moveq	#5,d1
000194EC 2248                       		movea.l	a0,a1
000194EE 6000                       		bra.s	loc_17B60
000194F0                            ; ===========================================================================
000194F0                            
000194F0                            Obj48_MakeLinks:
000194F0 4EB9 0000 E5B6             		jsr	SingleObjLoad2
000194F6 6600                       		bne.s	Obj48_MakeBall
000194F8 3368 0008 0008             		move.w	8(a0),8(a1)
000194FE 3368 000C 000C             		move.w	$C(a0),$C(a1)
00019504 12BC 0048                  		move.b	#$48,0(a1)	; load chain link object
00019508 137C 0006 0024             		move.b	#6,$24(a1)
0001950E 237C 0000 86F4 0004        		move.l	#Map_obj15,4(a1)
00019516 337C 0380 0002             		move.w	#$380,2(a1)
0001951C 137C 0001 001A             		move.b	#1,$1A(a1)
00019522 5228 0028                  		addq.b	#1,$28(a0)
00019526                            
00019526                            loc_17B60:				; XREF: Obj48_Main
00019526 3A09                       		move.w	a1,d5
00019528 0445 D000                  		subi.w	#$D000,d5
0001952C EC4D                       		lsr.w	#6,d5
0001952E 0245 007F                  		andi.w	#$7F,d5
00019532 14C5                       		move.b	d5,(a2)+
00019534 137C 0004 0001             		move.b	#4,1(a1)
0001953A 137C 0008 0019             		move.b	#8,$19(a1)
00019540 137C 0006 0018             		move.b	#6,$18(a1)
00019546 2368 0034 0034             		move.l	$34(a0),$34(a1)
0001954C 51C9 FFA2                  		dbf	d1,Obj48_MakeLinks ; repeat sequence 5 more times
00019550                            
00019550                            Obj48_MakeBall:
00019550 137C 0008 0024             		move.b	#8,$24(a1)
00019556 237C 0000 8C52 0004        		move.l	#Map_obj48,4(a1) ; load	different mappings for final link
0001955E 337C 43AA 0002             		move.w	#$43AA,2(a1)	; use different	graphics
00019564 137C 0001 001A             		move.b	#1,$1A(a1)
0001956A 137C 0005 0018             		move.b	#5,$18(a1)
00019570 137C 0081 0020             		move.b	#$81,$20(a1)	; make object hurt Sonic
00019576 4E75                       		rts	
00019578                            ; ===========================================================================
00019578                            
00019578 0010 2030 4060             Obj48_PosData:	dc.b 0,	$10, $20, $30, $40, $60	; y-position data for links and	giant ball
0001957E                            
0001957E                            ; ===========================================================================
0001957E                            
0001957E                            Obj48_Base:				; XREF: Obj48_Index
0001957E 47F9 0001 9578             		lea	(Obj48_PosData).l,a3
00019584 45E8 0028                  		lea	$28(a0),a2
00019588 7C00                       		moveq	#0,d6
0001958A 1C1A                       		move.b	(a2)+,d6
0001958C                            
0001958C                            loc_17BC6:
0001958C 7800                       		moveq	#0,d4
0001958E 181A                       		move.b	(a2)+,d4
00019590 ED4C                       		lsl.w	#6,d4
00019592 0684 00FF D000             		addi.l	#$FFD000,d4
00019598 2244                       		movea.l	d4,a1
0001959A 101B                       		move.b	(a3)+,d0
0001959C B029 003C                  		cmp.b	$3C(a1),d0
000195A0 6700                       		beq.s	loc_17BE0
000195A2 5229 003C                  		addq.b	#1,$3C(a1)
000195A6                            
000195A6                            loc_17BE0:
000195A6 51CE FFE4                  		dbf	d6,loc_17BC6
000195AA                            
000195AA B029 003C                  		cmp.b	$3C(a1),d0
000195AE 6600                       		bne.s	loc_17BFA
000195B0 2268 0034                  		movea.l	$34(a0),a1
000195B4 0C29 0006 0025             		cmpi.b	#6,$25(a1)
000195BA 6600                       		bne.s	loc_17BFA
000195BC 5428 0024                  		addq.b	#2,$24(a0)
000195C0                            
000195C0                            loc_17BFA:
000195C0 0C68 0020 0032             		cmpi.w	#$20,$32(a0)
000195C6 6700                       		beq.s	Obj48_Display
000195C8 5268 0032                  		addq.w	#1,$32(a0)
000195CC                            
000195CC                            Obj48_Display:
000195CC 6100 0000                  		bsr.w	sub_17C2A
000195D0 1028 0026                  		move.b	$26(a0),d0
000195D4 4EB9 0000 8666             		jsr	(Obj15_Move2).l
000195DA 4EF9 0000 E10A             		jmp	DisplaySprite
000195E0                            ; ===========================================================================
000195E0                            
000195E0                            Obj48_Display2:				; XREF: Obj48_Index
000195E0 6100 0000                  		bsr.w	sub_17C2A
000195E4 4EB9 0000 8626             		jsr	(Obj48_Move).l
000195EA 4EF9 0000 E10A             		jmp	DisplaySprite
000195F0                            
000195F0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000195F0                            
000195F0                            
000195F0                            sub_17C2A:				; XREF: Obj48_Display; Obj48_Display2
000195F0 2268 0034                  		movea.l	$34(a0),a1
000195F4 0628 0020 001B             		addi.b	#$20,$1B(a0)
000195FA 6400                       		bcc.s	loc_17C3C
000195FC 0868 0000 001A             		bchg	#0,$1A(a0)
00019602                            
00019602                            loc_17C3C:
00019602 3169 0008 003A             		move.w	8(a1),$3A(a0)
00019608 3029 000C                  		move.w	$C(a1),d0
0001960C D068 0032                  		add.w	$32(a0),d0
00019610 3140 0038                  		move.w	d0,$38(a0)
00019614 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001961A 4A29 0022                  		tst.b	$22(a1)
0001961E 6A00                       		bpl.s	locret_17C66
00019620 10BC 003F                  		move.b	#$3F,0(a0)
00019624 117C 0000 0024             		move.b	#0,$24(a0)
0001962A                            
0001962A                            locret_17C66:
0001962A 4E75                       		rts	
0001962C                            ; End of function sub_17C2A
0001962C                            
0001962C                            ; ===========================================================================
0001962C                            
0001962C                            loc_17C68:				; XREF: Obj48_Index
0001962C 2268 0034                  		movea.l	$34(a0),a1
00019630 4A29 0022                  		tst.b	$22(a1)
00019634 6A00                       		bpl.s	Obj48_Display3
00019636 10BC 003F                  		move.b	#$3F,0(a0)
0001963A 117C 0000 0024             		move.b	#0,$24(a0)
00019640                            
00019640                            Obj48_Display3:
00019640 4EF9 0000 E10A             		jmp	DisplaySprite
00019646                            ; ===========================================================================
00019646                            
00019646                            Obj48_ChkVanish:			; XREF: Obj48_Index
00019646 7000                       		moveq	#0,d0
00019648 4A28 001A                  		tst.b	$1A(a0)
0001964C 6600                       		bne.s	Obj48_Vanish
0001964E 5200                       		addq.b	#1,d0
00019650                            
00019650                            Obj48_Vanish:
00019650 1140 001A                  		move.b	d0,$1A(a0)
00019654 2268 0034                  		movea.l	$34(a0),a1
00019658 4A29 0022                  		tst.b	$22(a1)
0001965C 6A00                       		bpl.s	Obj48_Display4
0001965E 117C 0000 0020             		move.b	#0,$20(a0)
00019664 6100 FBC6                  		bsr.w	BossDefeated
00019668 5328 003C                  		subq.b	#1,$3C(a0)
0001966C 6A00                       		bpl.s	Obj48_Display4
0001966E 10BC 003F                  		move.b	#$3F,(a0)
00019672 117C 0000 0024             		move.b	#0,$24(a0)
00019678                            
00019678                            Obj48_Display4:
00019678 4EF9 0000 E10A             		jmp	DisplaySprite
0001967E                            ; ===========================================================================
0001967E                            Ani_Eggman:
0001967E                            	include "_anim\Eggman.asm"
0001967E                            ; ---------------------------------------------------------------------------
0001967E                            ; Animation script - Eggman (bosses)
0001967E                            ; ---------------------------------------------------------------------------
0001967E 0000                       		dc.w byte_17CD4-Ani_Eggman
00019680 0000                       		dc.w byte_17CD8-Ani_Eggman
00019682 0000                       		dc.w byte_17CDC-Ani_Eggman
00019684 0000                       		dc.w byte_17CE0-Ani_Eggman
00019686 0000                       		dc.w byte_17CE4-Ani_Eggman
00019688 0000                       		dc.w byte_17CE8-Ani_Eggman
0001968A 0000                       		dc.w byte_17CEC-Ani_Eggman
0001968C 0000                       		dc.w byte_17CF0-Ani_Eggman
0001968E 0000                       		dc.w byte_17CF4-Ani_Eggman
00019690 0000                       		dc.w byte_17CF8-Ani_Eggman
00019692 0000                       		dc.w byte_17CFC-Ani_Eggman
00019694 0000                       		dc.w byte_17D00-Ani_Eggman
00019696 0F00 FF00                  byte_17CD4:	dc.b $F, 0, $FF, 0
0001969A 0501 02FF                  byte_17CD8:	dc.b 5,	1, 2, $FF
0001969E 0301 02FF                  byte_17CDC:	dc.b 3,	1, 2, $FF
000196A2 0101 02FF                  byte_17CE0:	dc.b 1,	1, 2, $FF
000196A6 0403 04FF                  byte_17CE4:	dc.b 4,	3, 4, $FF
000196AA 1F05 01FF                  byte_17CE8:	dc.b $1F, 5, 1,	$FF
000196AE 0306 01FF                  byte_17CEC:	dc.b 3,	6, 1, $FF
000196B2 0F0A FF00                  byte_17CF0:	dc.b $F, $A, $FF, 0
000196B6 0308 09FF                  byte_17CF4:	dc.b 3,	8, 9, $FF
000196BA 0108 09FF                  byte_17CF8:	dc.b 1,	8, 9, $FF
000196BE 0F07 FF00                  byte_17CFC:	dc.b $F, 7, $FF, 0
000196C2 0209 080B 0C0B 0C09 08FE+  byte_17D00:	dc.b 2,	9, 8, $B, $C, $B, $C, 9, 8, $FE, 2, 0
000196CE                            		even
000196CE                            		even
000196CE                            
000196CE                            ; ---------------------------------------------------------------------------
000196CE                            ; Sprite mappings - Eggman (boss levels)
000196CE                            ; ---------------------------------------------------------------------------
000196CE                            Map_Eggman:
000196CE                            	include "_maps\Eggman.asm"
000196CE                            ; ---------------------------------------------------------------------------
000196CE                            ; Sprite mappings - Eggman (boss levels)
000196CE                            ; ---------------------------------------------------------------------------
000196CE 0000 0000                  		dc.w byte_17D26-Map_Eggman, byte_17D45-Map_Eggman
000196D2 0000 0000                  		dc.w byte_17D50-Map_Eggman, byte_17D5B-Map_Eggman
000196D6 0000 0000                  		dc.w byte_17D6B-Map_Eggman, byte_17D7B-Map_Eggman
000196DA 0000 0000                  		dc.w byte_17D8B-Map_Eggman, byte_17D9B-Map_Eggman
000196DE 0000 0000                  		dc.w byte_17DB0-Map_Eggman, byte_17DB6-Map_Eggman
000196E2 0000 0000                  		dc.w byte_17DBC-Map_Eggman, byte_17DBD-Map_Eggman
000196E6 0000                       		dc.w byte_17DC8-Map_Eggman
000196E8 06                         byte_17D26:	dc.b 6
000196E9 EC01 000A E4               		dc.b $EC, 1, 0,	$A, $E4
000196EE EC05 000C 0C               		dc.b $EC, 5, 0,	$C, $C
000196F3 FC0E 2010 E4               		dc.b $FC, $E, $20, $10,	$E4
000196F8 FC0E 201C 04               		dc.b $FC, $E, $20, $1C,	4
000196FD 140C 2028 EC               		dc.b $14, $C, $20, $28,	$EC
00019702 1400 202C 0C               		dc.b $14, 0, $20, $2C, $C
00019707 02                         byte_17D45:	dc.b 2
00019708 E404 0000 F4               		dc.b $E4, 4, 0,	0, $F4
0001970D EC0D 0002 EC               		dc.b $EC, $D, 0, 2, $EC
00019712 02                         byte_17D50:	dc.b 2
00019713 E404 0000 F4               		dc.b $E4, 4, 0,	0, $F4
00019718 EC0D 0035 EC               		dc.b $EC, $D, 0, $35, $EC
0001971D 03                         byte_17D5B:	dc.b 3
0001971E E408 003D F4               		dc.b $E4, 8, 0,	$3D, $F4
00019723 EC09 0040 EC               		dc.b $EC, 9, 0,	$40, $EC
00019728 EC05 0046 04               		dc.b $EC, 5, 0,	$46, 4
0001972D 03                         byte_17D6B:	dc.b 3
0001972E E408 004A F4               		dc.b $E4, 8, 0,	$4A, $F4
00019733 EC09 004D EC               		dc.b $EC, 9, 0,	$4D, $EC
00019738 EC05 0053 04               		dc.b $EC, 5, 0,	$53, 4
0001973D 03                         byte_17D7B:	dc.b 3
0001973E E408 0057 F4               		dc.b $E4, 8, 0,	$57, $F4
00019743 EC09 005A EC               		dc.b $EC, 9, 0,	$5A, $EC
00019748 EC05 0060 04               		dc.b $EC, 5, 0,	$60, 4
0001974D 03                         byte_17D8B:	dc.b 3
0001974E E404 0064 04               		dc.b $E4, 4, 0,	$64, 4
00019753 E404 0000 F4               		dc.b $E4, 4, 0,	0, $F4
00019758 EC0D 0035 EC               		dc.b $EC, $D, 0, $35, $EC
0001975D 04                         byte_17D9B:	dc.b 4
0001975E E409 0066 F4               		dc.b $E4, 9, 0,	$66, $F4
00019763 E408 0057 F4               		dc.b $E4, 8, 0,	$57, $F4
00019768 EC09 005A EC               		dc.b $EC, 9, 0,	$5A, $EC
0001976D EC05 0060 04               		dc.b $EC, 5, 0,	$60, 4
00019772 01                         byte_17DB0:	dc.b 1
00019773 0405 002D 22               		dc.b 4,	5, 0, $2D, $22
00019778 01                         byte_17DB6:	dc.b 1
00019779 0405 0031 22               		dc.b 4,	5, 0, $31, $22
0001977E 00                         byte_17DBC:	dc.b 0
0001977F 02                         byte_17DBD:	dc.b 2
00019780 0008 012A 22               		dc.b 0,	8, 1, $2A, $22
00019785 0808 112A 22               		dc.b 8,	8, $11,	$2A, $22
0001978A 02                         byte_17DC8:	dc.b 2
0001978B F80B 012D 22               		dc.b $F8, $B, 1, $2D, $22
00019790 0001 0139 3A               		dc.b 0,	1, 1, $39, $3A
00019796 00                         		even
00019796 00                         		even
00019796                            
00019796                            ; ---------------------------------------------------------------------------
00019796                            ; Sprite mappings - extra boss items (e.g. swinging ball on a chain in GHZ)
00019796                            ; ---------------------------------------------------------------------------
00019796                            Map_BossItems:
00019796                            	include "_maps\Boss items.asm"
00019796                            ; ---------------------------------------------------------------------------
00019796                            ; Sprite mappings - extra boss items (e.g. swinging ball on a chain in GHZ)
00019796                            ; ---------------------------------------------------------------------------
00019796 0000 0000                  		dc.w byte_17DE4-Map_BossItems, byte_17DEA-Map_BossItems
0001979A 0000 0000                  		dc.w byte_17DF6-Map_BossItems, byte_17DFC-Map_BossItems
0001979E 0000 0000                  		dc.w byte_17E02-Map_BossItems, byte_17E08-Map_BossItems
000197A2 0000 0000                  		dc.w byte_17E1E-Map_BossItems, byte_17E2A-Map_BossItems
000197A6 01                         byte_17DE4:	dc.b 1
000197A7 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
000197AC 02                         byte_17DEA:	dc.b 2
000197AD FC04 0004 F8               		dc.b $FC, 4, 0,	4, $F8
000197B2 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
000197B7 00                         		dc.b 0
000197B8 01                         byte_17DF6:	dc.b 1
000197B9 FC00 0006 FC               		dc.b $FC, 0, 0,	6, $FC
000197BE 01                         byte_17DFC:	dc.b 1
000197BF 1409 0007 F4               		dc.b $14, 9, 0,	7, $F4
000197C4 01                         byte_17E02:	dc.b 1
000197C5 1405 000D F8               		dc.b $14, 5, 0,	$D, $F8
000197CA 04                         byte_17E08:	dc.b 4
000197CB F004 0011 F8               		dc.b $F0, 4, 0,	$11, $F8
000197D0 F801 0013 F8               		dc.b $F8, 1, 0,	$13, $F8
000197D5 F801 0813 00               		dc.b $F8, 1, 8,	$13, 0
000197DA 0804 0015 F8               		dc.b 8,	4, 0, $15, $F8
000197DF 00                         		dc.b 0
000197E0 02                         byte_17E1E:	dc.b 2
000197E1 0005 0017 00               		dc.b 0,	5, 0, $17, 0
000197E6 0000 001B 10               		dc.b 0,	0, 0, $1B, $10
000197EB 00                         		dc.b 0
000197EC 02                         byte_17E2A:	dc.b 2
000197ED 1804 001C 00               		dc.b $18, 4, 0,	$1C, 0
000197F2 000B 001E 10               		dc.b 0,	$B, 0, $1E, $10
000197F8 00                         		even
000197F8 00                         		even
000197F8                            
000197F8                            ; ===========================================================================
000197F8                            ; ---------------------------------------------------------------------------
000197F8                            ; Object 77 - Eggman (LZ)
000197F8                            ; ---------------------------------------------------------------------------
000197F8                            
000197F8                            Obj77:					; XREF: Obj_Index
000197F8 7000                       		moveq	#0,d0
000197FA 1028 0024                  		move.b	$24(a0),d0
000197FE 323B 0000                  		move.w	Obj77_Index(pc,d0.w),d1
00019802 4EFB 1000                  		jmp	Obj77_Index(pc,d1.w)
00019806                            ; ===========================================================================
00019806 0000                       Obj77_Index:	dc.w Obj77_Main-Obj77_Index
00019808 0000                       		dc.w Obj77_ShipMain-Obj77_Index
0001980A 0000                       		dc.w Obj77_FaceMain-Obj77_Index
0001980C 0000                       		dc.w Obj77_FlameMain-Obj77_Index
0001980E                            
0001980E 0200                       Obj77_ObjData:	dc.b 2,	0		; routine number, animation
00019810 0401                       		dc.b 4,	1
00019812 0607                       		dc.b 6,	7
00019814                            ; ===========================================================================
00019814                            
00019814                            Obj77_Main:				; XREF: Obj77_Index
00019814 317C 1E10 0008             		move.w	#$1E10,8(a0)
0001981A 317C 05C0 000C             		move.w	#$5C0,$C(a0)
00019820 3168 0008 0030             		move.w	8(a0),$30(a0)
00019826 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001982C 117C 000F 0020             		move.b	#$F,$20(a0)
00019832 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
00019838 117C 0004 0018             		move.b	#4,$18(a0)
0001983E 45FA FFCE                  		lea	Obj77_ObjData(pc),a2
00019842 2248                       		movea.l	a0,a1
00019844 7202                       		moveq	#2,d1
00019846 6000                       		bra.s	Obj77_LoadBoss
00019848                            ; ===========================================================================
00019848                            
00019848                            Obj77_Loop:
00019848 4EB9 0000 E5B6             		jsr	SingleObjLoad2
0001984E 6600                       		bne.s	Obj77_ShipMain
00019850 12BC 0077                  		move.b	#$77,0(a1)
00019854 3368 0008 0008             		move.w	8(a0),8(a1)
0001985A 3368 000C 000C             		move.w	$C(a0),$C(a1)
00019860                            
00019860                            Obj77_LoadBoss:				; XREF: Obj77_Main
00019860 08A8 0000 0022             		bclr	#0,$22(a0)
00019866 4229 0025                  		clr.b	$25(a1)
0001986A 135A 0024                  		move.b	(a2)+,$24(a1)
0001986E 135A 001C                  		move.b	(a2)+,$1C(a1)
00019872 1368 0018 0018             		move.b	$18(a0),$18(a1)
00019878 237C 0001 96CE 0004        		move.l	#Map_Eggman,4(a1)
00019880 337C 0400 0002             		move.w	#$400,2(a1)
00019886 137C 0004 0001             		move.b	#4,1(a1)
0001988C 137C 0020 0019             		move.b	#$20,$19(a1)
00019892 2348 0034                  		move.l	a0,$34(a1)
00019896 51C9 FFB0                  		dbf	d1,Obj77_Loop
0001989A                            
0001989A                            Obj77_ShipMain:
0001989A 43F8 D000                  		lea	($FFFFD000).w,a1
0001989E 7000                       		moveq	#0,d0
000198A0 1028 0025                  		move.b	$25(a0),d0
000198A4 323B 0000                  		move.w	Obj77_ShipIndex(pc,d0.w),d1
000198A8 4EBB 1000                  		jsr	Obj77_ShipIndex(pc,d1.w)
000198AC 43F9 0001 967E             		lea	(Ani_Eggman).l,a1
000198B2 4EB9 0000 B21C             		jsr	AnimateSprite
000198B8 7003                       		moveq	#3,d0
000198BA C028 0022                  		and.b	$22(a0),d0
000198BE 0228 00FC 0001             		andi.b	#$FC,1(a0)
000198C4 8128 0001                  		or.b	d0,1(a0)
000198C8 4EF9 0000 E10A             		jmp	DisplaySprite
000198CE                            ; ===========================================================================
000198CE 0000 0000                  Obj77_ShipIndex:dc.w loc_17F1E-Obj77_ShipIndex,	loc_17FA0-Obj77_ShipIndex
000198D2 0000 0000                  		dc.w loc_17FE0-Obj77_ShipIndex,	loc_1801E-Obj77_ShipIndex
000198D6 0000 0000                  		dc.w loc_180BC-Obj77_ShipIndex,	loc_180F6-Obj77_ShipIndex
000198DA 0000 0000                  		dc.w loc_1812A-Obj77_ShipIndex,	loc_18152-Obj77_ShipIndex
000198DE                            ; ===========================================================================
000198DE                            
000198DE                            loc_17F1E:				; XREF: Obj77_ShipIndex
000198DE 3029 0008                  		move.w	8(a1),d0
000198E2 0C40 1DA0                  		cmpi.w	#$1DA0,d0
000198E6 6500                       		bcs.s	loc_17F38
000198E8 317C FE80 0012             		move.w	#-$180,$12(a0)
000198EE 317C 0060 0010             		move.w	#$60,$10(a0)
000198F4 5428 0025                  		addq.b	#2,$25(a0)
000198F8                            
000198F8                            loc_17F38:
000198F8 6100 F974                  		bsr.w	BossMove
000198FC 3168 0038 000C             		move.w	$38(a0),$C(a0)
00019902 3168 0030 0008             		move.w	$30(a0),8(a0)
00019908                            
00019908                            loc_17F48:
00019908 4A28 003D                  		tst.b	$3D(a0)
0001990C 6600                       		bne.s	loc_17F8E
0001990E 4A28 0022                  		tst.b	$22(a0)
00019912 6B00                       		bmi.s	loc_17F92
00019914 4A28 0020                  		tst.b	$20(a0)
00019918 6600                       		bne.s	locret_17F8C
0001991A 4A28 003E                  		tst.b	$3E(a0)
0001991E 6600                       		bne.s	loc_17F70
00019920 117C 0020 003E             		move.b	#$20,$3E(a0)
00019926 303C 00AC                  		move.w	#$AC,d0
0001992A 4EB9 0000 1476             		jsr	(PlaySound_Special).l
00019930                            
00019930                            loc_17F70:
00019930 43F8 FB22                  		lea	($FFFFFB22).w,a1
00019934 7000                       		moveq	#0,d0
00019936 4A51                       		tst.w	(a1)
00019938 6600                       		bne.s	loc_17F7E
0001993A 303C 0EEE                  		move.w	#$EEE,d0
0001993E                            
0001993E                            loc_17F7E:
0001993E 3280                       		move.w	d0,(a1)
00019940 5328 003E                  		subq.b	#1,$3E(a0)
00019944 6600                       		bne.s	locret_17F8C
00019946 117C 000F 0020             		move.b	#$F,$20(a0)
0001994C                            
0001994C                            locret_17F8C:
0001994C 4E75                       		rts	
0001994E                            ; ===========================================================================
0001994E                            
0001994E                            loc_17F8E:				; XREF: loc_17F48
0001994E 6000 F8DC                  		bra.w	BossDefeated
00019952                            ; ===========================================================================
00019952                            
00019952                            loc_17F92:				; XREF: loc_17F48
00019952 7064                       		moveq	#100,d0
00019954 6100 0000                  		bsr.w	AddPoints
00019958 117C 00FF 003D             		move.b	#-1,$3D(a0)
0001995E 4E75                       		rts	
00019960                            ; ===========================================================================
00019960                            
00019960                            loc_17FA0:				; XREF: Obj77_ShipIndex
00019960 70FE                       		moveq	#-2,d0
00019962 0C68 1E48 0030             		cmpi.w	#$1E48,$30(a0)
00019968 6500                       		bcs.s	loc_17FB6
0001996A 317C 1E48 0030             		move.w	#$1E48,$30(a0)
00019970 4268 0010                  		clr.w	$10(a0)
00019974 5240                       		addq.w	#1,d0
00019976                            
00019976                            loc_17FB6:
00019976 0C68 0500 0038             		cmpi.w	#$500,$38(a0)
0001997C 6E00                       		bgt.s	loc_17FCA
0001997E 317C 0500 0038             		move.w	#$500,$38(a0)
00019984 4268 0012                  		clr.w	$12(a0)
00019988 5240                       		addq.w	#1,d0
0001998A                            
0001998A                            loc_17FCA:
0001998A 6600                       		bne.s	loc_17FDC
0001998C 317C 0140 0010             		move.w	#$140,$10(a0)
00019992 317C FE00 0012             		move.w	#-$200,$12(a0)
00019998 5428 0025                  		addq.b	#2,$25(a0)
0001999C                            
0001999C                            loc_17FDC:
0001999C 6000 FF5A                  		bra.w	loc_17F38
000199A0                            ; ===========================================================================
000199A0                            
000199A0                            loc_17FE0:				; XREF: Obj77_ShipIndex
000199A0 70FE                       		moveq	#-2,d0
000199A2 0C68 1E70 0030             		cmpi.w	#$1E70,$30(a0)
000199A8 6500                       		bcs.s	loc_17FF6
000199AA 317C 1E70 0030             		move.w	#$1E70,$30(a0)
000199B0 4268 0010                  		clr.w	$10(a0)
000199B4 5240                       		addq.w	#1,d0
000199B6                            
000199B6                            loc_17FF6:
000199B6 0C68 04C0 0038             		cmpi.w	#$4C0,$38(a0)
000199BC 6E00                       		bgt.s	loc_1800A
000199BE 317C 04C0 0038             		move.w	#$4C0,$38(a0)
000199C4 4268 0012                  		clr.w	$12(a0)
000199C8 5240                       		addq.w	#1,d0
000199CA                            
000199CA                            loc_1800A:
000199CA 6600                       		bne.s	loc_1801A
000199CC 317C FE80 0012             		move.w	#-$180,$12(a0)
000199D2 5428 0025                  		addq.b	#2,$25(a0)
000199D6 4228 003F                  		clr.b	$3F(a0)
000199DA                            
000199DA                            loc_1801A:
000199DA 6000 FF1C                  		bra.w	loc_17F38
000199DE                            ; ===========================================================================
000199DE                            
000199DE                            loc_1801E:				; XREF: Obj77_ShipIndex
000199DE 0C68 0100 0038             		cmpi.w	#$100,$38(a0)
000199E4 6E00                       		bgt.s	loc_1804E
000199E6 317C 0100 0038             		move.w	#$100,$38(a0)
000199EC 317C 0140 0010             		move.w	#$140,$10(a0)
000199F2 317C FF80 0012             		move.w	#-$80,$12(a0)
000199F8 4A28 003D                  		tst.b	$3D(a0)
000199FC 6700                       		beq.s	loc_18046
000199FE E1E8 0010                  		asl	$10(a0)
00019A02 E1E8 0012                  		asl	$12(a0)
00019A06                            
00019A06                            loc_18046:
00019A06 5428 0025                  		addq.b	#2,$25(a0)
00019A0A 6000 FEEC                  		bra.w	loc_17F38
00019A0E                            ; ===========================================================================
00019A0E                            
00019A0E                            loc_1804E:
00019A0E 08E8 0000 0022             		bset	#0,$22(a0)
00019A14 5428 003F                  		addq.b	#2,$3F(a0)
00019A18 1028 003F                  		move.b	$3F(a0),d0
00019A1C 4EB9 0000 33D4             		jsr	(CalcSine).l
00019A22 4A41                       		tst.w	d1
00019A24 6A00                       		bpl.s	loc_1806C
00019A26 08A8 0000 0022             		bclr	#0,$22(a0)
00019A2C                            
00019A2C                            loc_1806C:
00019A2C E840                       		asr.w	#4,d0
00019A2E 4840                       		swap	d0
00019A30 4240                       		clr.w	d0
00019A32 D0A8 0030                  		add.l	$30(a0),d0
00019A36 4840                       		swap	d0
00019A38 3140 0008                  		move.w	d0,8(a0)
00019A3C 3028 0012                  		move.w	$12(a0),d0
00019A40 3238 D00C                  		move.w	($FFFFD00C).w,d1
00019A44 9268 000C                  		sub.w	$C(a0),d1
00019A48 6500                       		bcs.s	loc_180A2
00019A4A 0441 0048                  		subi.w	#$48,d1
00019A4E 6500                       		bcs.s	loc_180A2
00019A50 E240                       		asr.w	#1,d0
00019A52 0441 0028                  		subi.w	#$28,d1
00019A56 6500                       		bcs.s	loc_180A2
00019A58 E240                       		asr.w	#1,d0
00019A5A 0441 0028                  		subi.w	#$28,d1
00019A5E 6500                       		bcs.s	loc_180A2
00019A60 7000                       		moveq	#0,d0
00019A62                            
00019A62                            loc_180A2:
00019A62 48C0                       		ext.l	d0
00019A64 E180                       		asl.l	#8,d0
00019A66 4A28 003D                  		tst.b	$3D(a0)
00019A6A 6700                       		beq.s	loc_180AE
00019A6C D080                       		add.l	d0,d0
00019A6E                            
00019A6E                            loc_180AE:
00019A6E D1A8 0038                  		add.l	d0,$38(a0)
00019A72 3168 0038 000C             		move.w	$38(a0),$C(a0)
00019A78 6000 FE8E                  		bra.w	loc_17F48
00019A7C                            ; ===========================================================================
00019A7C                            
00019A7C                            loc_180BC:				; XREF: Obj77_ShipIndex
00019A7C 70FE                       		moveq	#-2,d0
00019A7E 0C68 1F4C 0030             		cmpi.w	#$1F4C,$30(a0)
00019A84 6500                       		bcs.s	loc_180D2
00019A86 317C 1F4C 0030             		move.w	#$1F4C,$30(a0)
00019A8C 4268 0010                  		clr.w	$10(a0)
00019A90 5240                       		addq.w	#1,d0
00019A92                            
00019A92                            loc_180D2:
00019A92 0C68 00C0 0038             		cmpi.w	#$C0,$38(a0)
00019A98 6E00                       		bgt.s	loc_180E6
00019A9A 317C 00C0 0038             		move.w	#$C0,$38(a0)
00019AA0 4268 0012                  		clr.w	$12(a0)
00019AA4 5240                       		addq.w	#1,d0
00019AA6                            
00019AA6                            loc_180E6:
00019AA6 6600                       		bne.s	loc_180F2
00019AA8 5428 0025                  		addq.b	#2,$25(a0)
00019AAC 08A8 0000 0022             		bclr	#0,$22(a0)
00019AB2                            
00019AB2                            loc_180F2:
00019AB2 6000 FE44                  		bra.w	loc_17F38
00019AB6                            ; ===========================================================================
00019AB6                            
00019AB6                            loc_180F6:				; XREF: Obj77_ShipIndex
00019AB6 4A28 003D                  		tst.b	$3D(a0)
00019ABA 6600                       		bne.s	loc_18112
00019ABC 0C69 1EC8 0008             		cmpi.w	#$1EC8,8(a1)
00019AC2 6D00                       		blt.s	loc_18126
00019AC4 0C69 00F0 000C             		cmpi.w	#$F0,$C(a1)
00019ACA 6E00                       		bgt.s	loc_18126
00019ACC 117C 0032 003C             		move.b	#$32,$3C(a0)
00019AD2                            
00019AD2                            loc_18112:
00019AD2 303C 0082                  		move.w	#$82,d0
00019AD6 4EB9 0000 1470             		jsr	(PlaySound).l	; play LZ music
00019ADC 08E8 0000 0022             		bset	#0,$22(a0)
00019AE2 5428 0025                  		addq.b	#2,$25(a0)
00019AE6                            
00019AE6                            loc_18126:
00019AE6 6000 FE10                  		bra.w	loc_17F38
00019AEA                            ; ===========================================================================
00019AEA                            
00019AEA                            loc_1812A:				; XREF: Obj77_ShipIndex
00019AEA 4A28 003D                  		tst.b	$3D(a0)
00019AEE 6600                       		bne.s	loc_18136
00019AF0 5328 003C                  		subq.b	#1,$3C(a0)
00019AF4 6600                       		bne.s	loc_1814E
00019AF6                            
00019AF6                            loc_18136:
00019AF6 4228 003C                  		clr.b	$3C(a0)
00019AFA 317C 0400 0010             		move.w	#$400,$10(a0)
00019B00 317C FFC0 0012             		move.w	#-$40,$12(a0)
00019B06 4228 003D                  		clr.b	$3D(a0)
00019B0A 5428 0025                  		addq.b	#2,$25(a0)
00019B0E                            
00019B0E                            loc_1814E:
00019B0E 6000 FDE8                  		bra.w	loc_17F38
00019B12                            ; ===========================================================================
00019B12                            
00019B12                            loc_18152:				; XREF: Obj77_ShipIndex
00019B12 0C78 2030 F72A             		cmpi.w	#$2030,($FFFFF72A).w
00019B18 6400                       		bcc.s	loc_18160
00019B1A 5478 F72A                  		addq.w	#2,($FFFFF72A).w
00019B1E 6000                       		bra.s	loc_18166
00019B20                            ; ===========================================================================
00019B20                            
00019B20                            loc_18160:
00019B20 4A28 0001                  		tst.b	1(a0)
00019B24 6A00                       		bpl.s	Obj77_ShipDel
00019B26                            
00019B26                            loc_18166:
00019B26 6000 FDD0                  		bra.w	loc_17F38
00019B2A                            ; ===========================================================================
00019B2A                            
00019B2A                            Obj77_ShipDel:
00019B2A 4EF9 0000 E146             		jmp	DeleteObject
00019B30                            ; ===========================================================================
00019B30                            
00019B30                            Obj77_FaceMain:				; XREF: Obj77_Index
00019B30 2268 0034                  		movea.l	$34(a0),a1
00019B34 1011                       		move.b	(a1),d0
00019B36 B010                       		cmp.b	(a0),d0
00019B38 6600                       		bne.s	Obj77_FaceDel
00019B3A 7000                       		moveq	#0,d0
00019B3C 1029 0025                  		move.b	$25(a1),d0
00019B40 7201                       		moveq	#1,d1
00019B42 4A28 003D                  		tst.b	$3D(a0)
00019B46 6700                       		beq.s	loc_1818C
00019B48 720A                       		moveq	#$A,d1
00019B4A 6000                       		bra.s	loc_181A0
00019B4C                            ; ===========================================================================
00019B4C                            
00019B4C                            loc_1818C:
00019B4C 4A29 0020                  		tst.b	$20(a1)
00019B50 6600                       		bne.s	loc_18196
00019B52 7205                       		moveq	#5,d1
00019B54 6000                       		bra.s	loc_181A0
00019B56                            ; ===========================================================================
00019B56                            
00019B56                            loc_18196:
00019B56 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
00019B5C 6500                       		bcs.s	loc_181A0
00019B5E 7204                       		moveq	#4,d1
00019B60                            
00019B60                            loc_181A0:
00019B60 1141 001C                  		move.b	d1,$1C(a0)
00019B64 0C00 000E                  		cmpi.b	#$E,d0
00019B68 6600                       		bne.s	loc_181B6
00019B6A 117C 0006 001C             		move.b	#6,$1C(a0)
00019B70 4A28 0001                  		tst.b	1(a0)
00019B74 6A00                       		bpl.s	Obj77_FaceDel
00019B76                            
00019B76                            loc_181B6:
00019B76 6000                       		bra.s	Obj77_Display
00019B78                            ; ===========================================================================
00019B78                            
00019B78                            Obj77_FaceDel:
00019B78 4EF9 0000 E146             		jmp	DeleteObject
00019B7E                            ; ===========================================================================
00019B7E                            
00019B7E                            Obj77_FlameMain:			; XREF: Obj77_Index
00019B7E 117C 0007 001C             		move.b	#7,$1C(a0)
00019B84 2268 0034                  		movea.l	$34(a0),a1
00019B88 1011                       		move.b	(a1),d0
00019B8A B010                       		cmp.b	(a0),d0
00019B8C 6600                       		bne.s	Obj77_FlameDel
00019B8E 0C29 000E 0025             		cmpi.b	#$E,$25(a1)
00019B94 6600                       		bne.s	loc_181F0
00019B96 117C 000B 001C             		move.b	#$B,$1C(a0)
00019B9C 4A28 0001                  		tst.b	1(a0)
00019BA0 6A00                       		bpl.s	Obj77_FlameDel
00019BA2 6000                       		bra.s	loc_181F0
00019BA4                            ; ===========================================================================
00019BA4 4A69 0010                  		tst.w	$10(a1)
00019BA8 6700                       		beq.s	loc_181F0
00019BAA 117C 0008 001C             		move.b	#8,$1C(a0)
00019BB0                            
00019BB0                            loc_181F0:
00019BB0 6000                       		bra.s	Obj77_Display
00019BB2                            ; ===========================================================================
00019BB2                            
00019BB2                            Obj77_FlameDel:				; XREF: Obj77_FlameMain
00019BB2 4EF9 0000 E146             		jmp	DeleteObject
00019BB8                            ; ===========================================================================
00019BB8                            
00019BB8                            Obj77_Display:
00019BB8 43F9 0001 967E             		lea	(Ani_Eggman).l,a1
00019BBE 4EB9 0000 B21C             		jsr	AnimateSprite
00019BC4 2268 0034                  		movea.l	$34(a0),a1
00019BC8 3169 0008 0008             		move.w	8(a1),8(a0)
00019BCE 3169 000C 000C             		move.w	$C(a1),$C(a0)
00019BD4 1169 0022 0022             		move.b	$22(a1),$22(a0)
00019BDA 7003                       		moveq	#3,d0
00019BDC C028 0022                  		and.b	$22(a0),d0
00019BE0 0228 00FC 0001             		andi.b	#-4,1(a0)
00019BE6 8128 0001                  		or.b	d0,1(a0)
00019BEA 4EF9 0000 E10A             		jmp	DisplaySprite
00019BF0                            ; ===========================================================================
00019BF0                            ; ---------------------------------------------------------------------------
00019BF0                            ; Object 73 - Eggman (MZ)
00019BF0                            ; ---------------------------------------------------------------------------
00019BF0                            
00019BF0                            Obj73:					; XREF: Obj_Index
00019BF0 7000                       		moveq	#0,d0
00019BF2 1028 0024                  		move.b	$24(a0),d0
00019BF6 323B 0000                  		move.w	Obj73_Index(pc,d0.w),d1
00019BFA 4EFB 1000                  		jmp	Obj73_Index(pc,d1.w)
00019BFE                            ; ===========================================================================
00019BFE 0000                       Obj73_Index:	dc.w Obj73_Main-Obj73_Index
00019C00 0000                       		dc.w Obj73_ShipMain-Obj73_Index
00019C02 0000                       		dc.w Obj73_FaceMain-Obj73_Index
00019C04 0000                       		dc.w Obj73_FlameMain-Obj73_Index
00019C06 0000                       		dc.w Obj73_TubeMain-Obj73_Index
00019C08                            
00019C08 0200 04                    Obj73_ObjData:	dc.b 2,	0, 4		; routine number, animation, priority
00019C0B 0401 04                    		dc.b 4,	1, 4
00019C0E 0607 04                    		dc.b 6,	7, 4
00019C11 0800 03                    		dc.b 8,	0, 3
00019C14                            ; ===========================================================================
00019C14                            
00019C14                            Obj73_Main:				; XREF: Obj73_Index
00019C14 3168 0008 0030             		move.w	8(a0),$30(a0)
00019C1A 3168 000C 0038             		move.w	$C(a0),$38(a0)
00019C20 117C 000F 0020             		move.b	#$F,$20(a0)
00019C26 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
00019C2C 45FA FFDA                  		lea	Obj73_ObjData(pc),a2
00019C30 2248                       		movea.l	a0,a1
00019C32 7203                       		moveq	#3,d1
00019C34 6000                       		bra.s	Obj73_LoadBoss
00019C36                            ; ===========================================================================
00019C36                            
00019C36                            Obj73_Loop:
00019C36 4EB9 0000 E5B6             		jsr	SingleObjLoad2
00019C3C 6600                       		bne.s	Obj73_ShipMain
00019C3E 12BC 0073                  		move.b	#$73,0(a1)
00019C42 3368 0008 0008             		move.w	8(a0),8(a1)
00019C48 3368 000C 000C             		move.w	$C(a0),$C(a1)
00019C4E                            
00019C4E                            Obj73_LoadBoss:				; XREF: Obj73_Main
00019C4E 08A8 0000 0022             		bclr	#0,$22(a0)
00019C54 4229 0025                  		clr.b	$25(a1)
00019C58 135A 0024                  		move.b	(a2)+,$24(a1)
00019C5C 135A 001C                  		move.b	(a2)+,$1C(a1)
00019C60 135A 0018                  		move.b	(a2)+,$18(a1)
00019C64 237C 0001 96CE 0004        		move.l	#Map_Eggman,4(a1)
00019C6C 337C 0400 0002             		move.w	#$400,2(a1)
00019C72 137C 0004 0001             		move.b	#4,1(a1)
00019C78 137C 0020 0019             		move.b	#$20,$19(a1)
00019C7E 2348 0034                  		move.l	a0,$34(a1)
00019C82 51C9 FFB2                  		dbf	d1,Obj73_Loop	; repeat sequence 3 more times
00019C86                            
00019C86                            Obj73_ShipMain:
00019C86 7000                       		moveq	#0,d0
00019C88 1028 0025                  		move.b	$25(a0),d0
00019C8C 323B 0000                  		move.w	Obj73_ShipIndex(pc,d0.w),d1
00019C90 4EBB 1000                  		jsr	Obj73_ShipIndex(pc,d1.w)
00019C94 43F9 0001 967E             		lea	(Ani_Eggman).l,a1
00019C9A 4EB9 0000 B21C             		jsr	AnimateSprite
00019CA0 7003                       		moveq	#3,d0
00019CA2 C028 0022                  		and.b	$22(a0),d0
00019CA6 0228 00FC 0001             		andi.b	#$FC,1(a0)
00019CAC 8128 0001                  		or.b	d0,1(a0)
00019CB0 4EF9 0000 E10A             		jmp	DisplaySprite
00019CB6                            ; ===========================================================================
00019CB6 0000                       Obj73_ShipIndex:dc.w loc_18302-Obj73_ShipIndex
00019CB8 0000                       		dc.w loc_183AA-Obj73_ShipIndex
00019CBA 0000                       		dc.w loc_184F6-Obj73_ShipIndex
00019CBC 0000                       		dc.w loc_1852C-Obj73_ShipIndex
00019CBE 0000                       		dc.w loc_18582-Obj73_ShipIndex
00019CC0                            ; ===========================================================================
00019CC0                            
00019CC0                            loc_18302:				; XREF: Obj73_ShipIndex
00019CC0 1028 003F                  		move.b	$3F(a0),d0
00019CC4 5428 003F                  		addq.b	#2,$3F(a0)
00019CC8 4EB9 0000 33D4             		jsr	(CalcSine).l
00019CCE E440                       		asr.w	#2,d0
00019CD0 3140 0012                  		move.w	d0,$12(a0)
00019CD4 317C FF00 0010             		move.w	#-$100,$10(a0)
00019CDA 6100 F592                  		bsr.w	BossMove
00019CDE 0C68 1910 0030             		cmpi.w	#$1910,$30(a0)
00019CE4 6600                       		bne.s	loc_18334
00019CE6 5428 0025                  		addq.b	#2,$25(a0)
00019CEA 4228 0028                  		clr.b	$28(a0)
00019CEE 42A8 0010                  		clr.l	$10(a0)
00019CF2                            
00019CF2                            loc_18334:
00019CF2 4EB9 0000 33AE             		jsr	(RandomNumber).l
00019CF8 1140 0034                  		move.b	d0,$34(a0)
00019CFC                            
00019CFC                            loc_1833E:
00019CFC 3168 0038 000C             		move.w	$38(a0),$C(a0)
00019D02 3168 0030 0008             		move.w	$30(a0),8(a0)
00019D08 0C28 0004 0025             		cmpi.b	#4,$25(a0)
00019D0E 6400                       		bcc.s	locret_18390
00019D10 4A28 0022                  		tst.b	$22(a0)
00019D14 6B00                       		bmi.s	loc_18392
00019D16 4A28 0020                  		tst.b	$20(a0)
00019D1A 6600                       		bne.s	locret_18390
00019D1C 4A28 003E                  		tst.b	$3E(a0)
00019D20 6600                       		bne.s	loc_18374
00019D22 117C 0028 003E             		move.b	#$28,$3E(a0)
00019D28 303C 00AC                  		move.w	#$AC,d0
00019D2C 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play boss damage sound
00019D32                            
00019D32                            loc_18374:
00019D32 43F8 FB22                  		lea	($FFFFFB22).w,a1
00019D36 7000                       		moveq	#0,d0
00019D38 4A51                       		tst.w	(a1)
00019D3A 6600                       		bne.s	loc_18382
00019D3C 303C 0EEE                  		move.w	#$EEE,d0
00019D40                            
00019D40                            loc_18382:
00019D40 3280                       		move.w	d0,(a1)
00019D42 5328 003E                  		subq.b	#1,$3E(a0)
00019D46 6600                       		bne.s	locret_18390
00019D48 117C 000F 0020             		move.b	#$F,$20(a0)
00019D4E                            
00019D4E                            locret_18390:
00019D4E 4E75                       		rts	
00019D50                            ; ===========================================================================
00019D50                            
00019D50                            loc_18392:				; XREF: loc_1833E
00019D50 7064                       		moveq	#100,d0
00019D52 6100 0000                  		bsr.w	AddPoints
00019D56 117C 0004 0025             		move.b	#4,$25(a0)
00019D5C 317C 00B4 003C             		move.w	#$B4,$3C(a0)
00019D62 4268 0010                  		clr.w	$10(a0)
00019D66 4E75                       		rts	
00019D68                            ; ===========================================================================
00019D68                            
00019D68                            loc_183AA:				; XREF: Obj73_ShipIndex
00019D68 7000                       		moveq	#0,d0
00019D6A 1028 0028                  		move.b	$28(a0),d0
00019D6E 303B 0000                  		move.w	off_183C2(pc,d0.w),d0
00019D72 4EBB 0000                  		jsr	off_183C2(pc,d0.w)
00019D76 0228 0006 0028             		andi.b	#6,$28(a0)
00019D7C 6000 FF7E                  		bra.w	loc_1833E
00019D80                            ; ===========================================================================
00019D80 0000                       off_183C2:	dc.w loc_183CA-off_183C2
00019D82 0000                       		dc.w Obj73_MakeLava2-off_183C2
00019D84 0000                       		dc.w loc_183CA-off_183C2
00019D86 0000                       		dc.w Obj73_MakeLava2-off_183C2
00019D88                            ; ===========================================================================
00019D88                            
00019D88                            loc_183CA:				; XREF: off_183C2
00019D88 4A68 0010                  		tst.w	$10(a0)
00019D8C 6600                       		bne.s	loc_183FE
00019D8E 7040                       		moveq	#$40,d0
00019D90 0C68 022C 0038             		cmpi.w	#$22C,$38(a0)
00019D96 6700                       		beq.s	loc_183E6
00019D98 6500                       		bcs.s	loc_183DE
00019D9A 4440                       		neg.w	d0
00019D9C                            
00019D9C                            loc_183DE:
00019D9C 3140 0012                  		move.w	d0,$12(a0)
00019DA0 6000 F4CC                  		bra.w	BossMove
00019DA4                            ; ===========================================================================
00019DA4                            
00019DA4                            loc_183E6:
00019DA4 317C 0200 0010             		move.w	#$200,$10(a0)
00019DAA 317C 0100 0012             		move.w	#$100,$12(a0)
00019DB0 0828 0000 0022             		btst	#0,$22(a0)
00019DB6 6600                       		bne.s	loc_183FE
00019DB8 4468 0010                  		neg.w	$10(a0)
00019DBC                            
00019DBC                            loc_183FE:
00019DBC 0C28 0018 003E             		cmpi.b	#$18,$3E(a0)
00019DC2 6400                       		bcc.s	Obj73_MakeLava
00019DC4 6100 F4A8                  		bsr.w	BossMove
00019DC8 5968 0012                  		subq.w	#4,$12(a0)
00019DCC                            
00019DCC                            Obj73_MakeLava:
00019DCC 5328 0034                  		subq.b	#1,$34(a0)
00019DD0 6400                       		bcc.s	loc_1845C
00019DD2 4EB9 0000 E5A0             		jsr	SingleObjLoad
00019DD8 6600                       		bne.s	loc_1844A
00019DDA 12BC 0014                  		move.b	#$14,0(a1)	; load lava ball object
00019DDE 337C 02E8 000C             		move.w	#$2E8,$C(a1)	; set Y	position
00019DE4 4EB9 0000 33AE             		jsr	(RandomNumber).l
00019DEA 0280 0000 FFFF             		andi.l	#$FFFF,d0
00019DF0 80FC 0050                  		divu.w	#$50,d0
00019DF4 4840                       		swap	d0
00019DF6 0640 1878                  		addi.w	#$1878,d0
00019DFA 3340 0008                  		move.w	d0,8(a1)
00019DFE EE09                       		lsr.b	#7,d1
00019E00 337C 00FF 0028             		move.w	#$FF,$28(a1)
00019E06                            
00019E06                            loc_1844A:
00019E06 4EB9 0000 33AE             		jsr	(RandomNumber).l
00019E0C 0200 001F                  		andi.b	#$1F,d0
00019E10 0600 0040                  		addi.b	#$40,d0
00019E14 1140 0034                  		move.b	d0,$34(a0)
00019E18                            
00019E18                            loc_1845C:
00019E18 0828 0000 0022             		btst	#0,$22(a0)
00019E1E 6700                       		beq.s	loc_18474
00019E20 0C68 1910 0030             		cmpi.w	#$1910,$30(a0)
00019E26 6D00                       		blt.s	locret_1849C
00019E28 317C 1910 0030             		move.w	#$1910,$30(a0)
00019E2E 6000                       		bra.s	loc_18482
00019E30                            ; ===========================================================================
00019E30                            
00019E30                            loc_18474:
00019E30 0C68 1830 0030             		cmpi.w	#$1830,$30(a0)
00019E36 6E00                       		bgt.s	locret_1849C
00019E38 317C 1830 0030             		move.w	#$1830,$30(a0)
00019E3E                            
00019E3E                            loc_18482:
00019E3E 4268 0010                  		clr.w	$10(a0)
00019E42 317C FE80 0012             		move.w	#-$180,$12(a0)
00019E48 0C68 022C 0038             		cmpi.w	#$22C,$38(a0)
00019E4E 6400                       		bcc.s	loc_18498
00019E50 4468 0012                  		neg.w	$12(a0)
00019E54                            
00019E54                            loc_18498:
00019E54 5428 0028                  		addq.b	#2,$28(a0)
00019E58                            
00019E58                            locret_1849C:
00019E58 4E75                       		rts	
00019E5A                            ; ===========================================================================
00019E5A                            
00019E5A                            Obj73_MakeLava2:			; XREF: off_183C2
00019E5A 6100 F412                  		bsr.w	BossMove
00019E5E 3028 0038                  		move.w	$38(a0),d0
00019E62 0440 022C                  		subi.w	#$22C,d0
00019E66 6E00                       		bgt.s	locret_184F4
00019E68 303C 022C                  		move.w	#$22C,d0
00019E6C 4A68 0012                  		tst.w	$12(a0)
00019E70 6700                       		beq.s	loc_184EA
00019E72 4268 0012                  		clr.w	$12(a0)
00019E76 317C 0050 003C             		move.w	#$50,$3C(a0)
00019E7C 0868 0000 0022             		bchg	#0,$22(a0)
00019E82 4EB9 0000 E5A0             		jsr	SingleObjLoad
00019E88 6600                       		bne.s	loc_184EA
00019E8A 3368 0030 0008             		move.w	$30(a0),8(a1)
00019E90 3368 0038 000C             		move.w	$38(a0),$C(a1)
00019E96 0669 0018 000C             		addi.w	#$18,$C(a1)
00019E9C 12BC 0074                  		move.b	#$74,(a1)	; load lava ball object
00019EA0 137C 0001 0028             		move.b	#1,$28(a1)
00019EA6                            
00019EA6                            loc_184EA:
00019EA6 5368 003C                  		subq.w	#1,$3C(a0)
00019EAA 6600                       		bne.s	locret_184F4
00019EAC 5428 0028                  		addq.b	#2,$28(a0)
00019EB0                            
00019EB0                            locret_184F4:
00019EB0 4E75                       		rts	
00019EB2                            ; ===========================================================================
00019EB2                            
00019EB2                            loc_184F6:				; XREF: Obj73_ShipIndex
00019EB2 5368 003C                  		subq.w	#1,$3C(a0)
00019EB6 6B00                       		bmi.s	loc_18500
00019EB8 6000 F372                  		bra.w	BossDefeated
00019EBC                            ; ===========================================================================
00019EBC                            
00019EBC                            loc_18500:
00019EBC 08E8 0000 0022             		bset	#0,$22(a0)
00019EC2 08A8 0007 0022             		bclr	#7,$22(a0)
00019EC8 4268 0010                  		clr.w	$10(a0)
00019ECC 5428 0025                  		addq.b	#2,$25(a0)
00019ED0 317C FFDA 003C             		move.w	#-$26,$3C(a0)
00019ED6 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00019EDA 6600                       		bne.s	locret_1852A
00019EDC 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
00019EE2 4268 0012                  		clr.w	$12(a0)
00019EE6                            
00019EE6                            locret_1852A:
00019EE6 4E75                       		rts	
00019EE8                            ; ===========================================================================
00019EE8                            
00019EE8                            loc_1852C:				; XREF: Obj73_ShipIndex
00019EE8 5268 003C                  		addq.w	#1,$3C(a0)
00019EEC 6700                       		beq.s	loc_18544
00019EEE 6A00                       		bpl.s	loc_1854E
00019EF0 0C68 0270 0038             		cmpi.w	#$270,$38(a0)
00019EF6 6400                       		bcc.s	loc_18544
00019EF8 0668 0018 0012             		addi.w	#$18,$12(a0)
00019EFE 6000                       		bra.s	loc_1857A
00019F00                            ; ===========================================================================
00019F00                            
00019F00                            loc_18544:
00019F00 4268 0012                  		clr.w	$12(a0)
00019F04 4268 003C                  		clr.w	$3C(a0)
00019F08 6000                       		bra.s	loc_1857A
00019F0A                            ; ===========================================================================
00019F0A                            
00019F0A                            loc_1854E:
00019F0A 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
00019F10 6500                       		bcs.s	loc_18566
00019F12 6700                       		beq.s	loc_1856C
00019F14 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
00019F1A 6500                       		bcs.s	loc_1857A
00019F1C 5428 0025                  		addq.b	#2,$25(a0)
00019F20 6000                       		bra.s	loc_1857A
00019F22                            ; ===========================================================================
00019F22                            
00019F22                            loc_18566:
00019F22 5168 0012                  		subq.w	#8,$12(a0)
00019F26 6000                       		bra.s	loc_1857A
00019F28                            ; ===========================================================================
00019F28                            
00019F28                            loc_1856C:
00019F28 4268 0012                  		clr.w	$12(a0)
00019F2C 303C 0083                  		move.w	#$83,d0
00019F30 4EB9 0000 1470             		jsr	(PlaySound).l	; play MZ music
00019F36                            
00019F36                            loc_1857A:
00019F36 6100 F336                  		bsr.w	BossMove
00019F3A 6000 FDC0                  		bra.w	loc_1833E
00019F3E                            ; ===========================================================================
00019F3E                            
00019F3E                            loc_18582:				; XREF: Obj73_ShipIndex
00019F3E 317C 0500 0010             		move.w	#$500,$10(a0)
00019F44 317C FFC0 0012             		move.w	#-$40,$12(a0)
00019F4A 0C78 1960 F72A             		cmpi.w	#$1960,($FFFFF72A).w
00019F50 6400                       		bcc.s	loc_1859C
00019F52 5478 F72A                  		addq.w	#2,($FFFFF72A).w
00019F56 6000                       		bra.s	loc_185A2
00019F58                            ; ===========================================================================
00019F58                            
00019F58                            loc_1859C:
00019F58 4A28 0001                  		tst.b	1(a0)
00019F5C 6A00                       		bpl.s	Obj73_ShipDel
00019F5E                            
00019F5E                            loc_185A2:
00019F5E 6100 F30E                  		bsr.w	BossMove
00019F62 6000 FD98                  		bra.w	loc_1833E
00019F66                            ; ===========================================================================
00019F66                            
00019F66                            Obj73_ShipDel:
00019F66 4EF9 0000 E146             		jmp	DeleteObject
00019F6C                            ; ===========================================================================
00019F6C                            
00019F6C                            Obj73_FaceMain:				; XREF: Obj73_Index
00019F6C 7000                       		moveq	#0,d0
00019F6E 7201                       		moveq	#1,d1
00019F70 2268 0034                  		movea.l	$34(a0),a1
00019F74 1029 0025                  		move.b	$25(a1),d0
00019F78 5540                       		subq.w	#2,d0
00019F7A 6600                       		bne.s	loc_185D2
00019F7C 0829 0001 0028             		btst	#1,$28(a1)
00019F82 6700                       		beq.s	loc_185DA
00019F84 4A69 0012                  		tst.w	$12(a1)
00019F88 6600                       		bne.s	loc_185DA
00019F8A 7204                       		moveq	#4,d1
00019F8C 6000                       		bra.s	loc_185EE
00019F8E                            ; ===========================================================================
00019F8E                            
00019F8E                            loc_185D2:
00019F8E 5500                       		subq.b	#2,d0
00019F90 6B00                       		bmi.s	loc_185DA
00019F92 720A                       		moveq	#$A,d1
00019F94 6000                       		bra.s	loc_185EE
00019F96                            ; ===========================================================================
00019F96                            
00019F96                            loc_185DA:
00019F96 4A29 0020                  		tst.b	$20(a1)
00019F9A 6600                       		bne.s	loc_185E4
00019F9C 7205                       		moveq	#5,d1
00019F9E 6000                       		bra.s	loc_185EE
00019FA0                            ; ===========================================================================
00019FA0                            
00019FA0                            loc_185E4:
00019FA0 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
00019FA6 6500                       		bcs.s	loc_185EE
00019FA8 7204                       		moveq	#4,d1
00019FAA                            
00019FAA                            loc_185EE:
00019FAA 1141 001C                  		move.b	d1,$1C(a0)
00019FAE 5900                       		subq.b	#4,d0
00019FB0 6600                       		bne.s	loc_18602
00019FB2 117C 0006 001C             		move.b	#6,$1C(a0)
00019FB8 4A28 0001                  		tst.b	1(a0)
00019FBC 6A00                       		bpl.s	Obj73_FaceDel
00019FBE                            
00019FBE                            loc_18602:
00019FBE 6000                       		bra.s	Obj73_Display
00019FC0                            ; ===========================================================================
00019FC0                            
00019FC0                            Obj73_FaceDel:
00019FC0 4EF9 0000 E146             		jmp	DeleteObject
00019FC6                            ; ===========================================================================
00019FC6                            
00019FC6                            Obj73_FlameMain:			; XREF: Obj73_Index
00019FC6 117C 0007 001C             		move.b	#7,$1C(a0)
00019FCC 2268 0034                  		movea.l	$34(a0),a1
00019FD0 0C29 0008 0025             		cmpi.b	#8,$25(a1)
00019FD6 6D00                       		blt.s	loc_1862A
00019FD8 117C 000B 001C             		move.b	#$B,$1C(a0)
00019FDE 4A28 0001                  		tst.b	1(a0)
00019FE2 6A00                       		bpl.s	Obj73_FlameDel
00019FE4 6000                       		bra.s	loc_18636
00019FE6                            ; ===========================================================================
00019FE6                            
00019FE6                            loc_1862A:
00019FE6 4A69 0010                  		tst.w	$10(a1)
00019FEA 6700                       		beq.s	loc_18636
00019FEC 117C 0008 001C             		move.b	#8,$1C(a0)
00019FF2                            
00019FF2                            loc_18636:
00019FF2 6000                       		bra.s	Obj73_Display
00019FF4                            ; ===========================================================================
00019FF4                            
00019FF4                            Obj73_FlameDel:				; XREF: Obj73_FlameMain
00019FF4 4EF9 0000 E146             		jmp	DeleteObject
00019FFA                            ; ===========================================================================
00019FFA                            
00019FFA                            Obj73_Display:
00019FFA 43F9 0001 967E             		lea	(Ani_Eggman).l,a1
0001A000 4EB9 0000 B21C             		jsr	AnimateSprite
0001A006                            
0001A006                            loc_1864A:
0001A006 2268 0034                  		movea.l	$34(a0),a1
0001A00A 3169 0008 0008             		move.w	8(a1),8(a0)
0001A010 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001A016 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001A01C 7003                       		moveq	#3,d0
0001A01E C028 0022                  		and.b	$22(a0),d0
0001A022 0228 00FC 0001             		andi.b	#-4,1(a0)
0001A028 8128 0001                  		or.b	d0,1(a0)
0001A02C 4EF9 0000 E10A             		jmp	DisplaySprite
0001A032                            ; ===========================================================================
0001A032                            
0001A032                            Obj73_TubeMain:				; XREF: Obj73_Index
0001A032 2268 0034                  		movea.l	$34(a0),a1
0001A036 0C29 0008 0025             		cmpi.b	#8,$25(a1)
0001A03C 6600                       		bne.s	loc_18688
0001A03E 4A28 0001                  		tst.b	1(a0)
0001A042 6A00                       		bpl.s	Obj73_TubeDel
0001A044                            
0001A044                            loc_18688:
0001A044 217C 0001 9796 0004        		move.l	#Map_BossItems,4(a0)
0001A04C 317C 246C 0002             		move.w	#$246C,2(a0)
0001A052 117C 0004 001A             		move.b	#4,$1A(a0)
0001A058 60AC                       		bra.s	loc_1864A
0001A05A                            ; ===========================================================================
0001A05A                            
0001A05A                            Obj73_TubeDel:
0001A05A 4EF9 0000 E146             		jmp	DeleteObject
0001A060                            ; ===========================================================================
0001A060                            ; ---------------------------------------------------------------------------
0001A060                            ; Object 74 - lava that	Eggman drops (MZ)
0001A060                            ; ---------------------------------------------------------------------------
0001A060                            
0001A060                            Obj74:					; XREF: Obj_Index
0001A060 7000                       		moveq	#0,d0
0001A062 1028 0024                  		move.b	$24(a0),d0
0001A066 303B 0000                  		move.w	Obj74_Index(pc,d0.w),d0
0001A06A 4EBB 0000                  		jsr	Obj74_Index(pc,d0.w)
0001A06E 4EF9 0000 E10A             		jmp	DisplaySprite
0001A074                            ; ===========================================================================
0001A074 0000                       Obj74_Index:	dc.w Obj74_Main-Obj74_Index
0001A076 0000                       		dc.w Obj74_Action-Obj74_Index
0001A078 0000                       		dc.w loc_18886-Obj74_Index
0001A07A 0000                       		dc.w Obj74_Delete3-Obj74_Index
0001A07C                            ; ===========================================================================
0001A07C                            
0001A07C                            Obj74_Main:				; XREF: Obj74_Index
0001A07C 117C 0008 0016             		move.b	#8,$16(a0)
0001A082 117C 0008 0017             		move.b	#8,$17(a0)
0001A088 217C 0000 BE74 0004        		move.l	#Map_obj14,4(a0)
0001A090 317C 0345 0002             		move.w	#$345,2(a0)
0001A096 117C 0004 0001             		move.b	#4,1(a0)
0001A09C 117C 0005 0018             		move.b	#5,$18(a0)
0001A0A2 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001A0A8 117C 0008 0019             		move.b	#8,$19(a0)
0001A0AE 5428 0024                  		addq.b	#2,$24(a0)
0001A0B2 4A28 0028                  		tst.b	$28(a0)
0001A0B6 6600                       		bne.s	loc_1870A
0001A0B8 117C 008B 0020             		move.b	#$8B,$20(a0)
0001A0BE 5428 0024                  		addq.b	#2,$24(a0)
0001A0C2 6000 0000                  		bra.w	loc_18886
0001A0C6                            ; ===========================================================================
0001A0C6                            
0001A0C6                            loc_1870A:
0001A0C6 117C 001E 0029             		move.b	#$1E,$29(a0)
0001A0CC 303C 00AE                  		move.w	#$AE,d0
0001A0D0 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play lava sound
0001A0D6                            
0001A0D6                            Obj74_Action:				; XREF: Obj74_Index
0001A0D6 7000                       		moveq	#0,d0
0001A0D8 1028 0025                  		move.b	$25(a0),d0
0001A0DC 303B 0000                  		move.w	Obj74_Index2(pc,d0.w),d0
0001A0E0 4EBB 0000                  		jsr	Obj74_Index2(pc,d0.w)
0001A0E4 4EB9 0000 E0E4             		jsr	SpeedToPos
0001A0EA 43F9 0000 EFD8             		lea	(Ani_obj14).l,a1
0001A0F0 4EB9 0000 B21C             		jsr	AnimateSprite
0001A0F6 0C68 02E8 000C             		cmpi.w	#$2E8,$C(a0)
0001A0FC 6200                       		bhi.s	Obj74_Delete
0001A0FE 4E75                       		rts	
0001A100                            ; ===========================================================================
0001A100                            
0001A100                            Obj74_Delete:
0001A100 4EF9 0000 E146             		jmp	DeleteObject
0001A106                            ; ===========================================================================
0001A106 0000                       Obj74_Index2:	dc.w Obj74_Drop-Obj74_Index2
0001A108 0000                       		dc.w Obj74_MakeFlame-Obj74_Index2
0001A10A 0000                       		dc.w Obj74_Duplicate-Obj74_Index2
0001A10C 0000                       		dc.w Obj74_FallEdge-Obj74_Index2
0001A10E                            ; ===========================================================================
0001A10E                            
0001A10E                            Obj74_Drop:				; XREF: Obj74_Index2
0001A10E 08E8 0001 0022             		bset	#1,$22(a0)
0001A114 5328 0029                  		subq.b	#1,$29(a0)
0001A118 6A00                       		bpl.s	locret_18780
0001A11A 117C 008B 0020             		move.b	#$8B,$20(a0)
0001A120 4228 0028                  		clr.b	$28(a0)
0001A124 0668 0018 0012             		addi.w	#$18,$12(a0)
0001A12A 08A8 0001 0022             		bclr	#1,$22(a0)
0001A130 6100 C6BA                  		bsr.w	ObjHitFloor
0001A134 4A41                       		tst.w	d1
0001A136 6A00                       		bpl.s	locret_18780
0001A138 5428 0025                  		addq.b	#2,$25(a0)
0001A13C                            
0001A13C                            locret_18780:
0001A13C 4E75                       		rts	
0001A13E                            ; ===========================================================================
0001A13E                            
0001A13E                            Obj74_MakeFlame:			; XREF: Obj74_Index2
0001A13E 5568 000C                  		subq.w	#2,$C(a0)
0001A142 08E8 0007 0002             		bset	#7,2(a0)
0001A148 317C 00A0 0010             		move.w	#$A0,$10(a0)
0001A14E 4268 0012                  		clr.w	$12(a0)
0001A152 3168 0008 0030             		move.w	8(a0),$30(a0)
0001A158 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001A15E 117C 0003 0029             		move.b	#3,$29(a0)
0001A164 4EB9 0000 E5B6             		jsr	SingleObjLoad2
0001A16A 6600                       		bne.s	loc_187CA
0001A16C 47D1                       		lea	(a1),a3
0001A16E 45D0                       		lea	(a0),a2
0001A170 7003                       		moveq	#3,d0
0001A172                            
0001A172                            Obj74_Loop:
0001A172 26DA                       		move.l	(a2)+,(a3)+
0001A174 26DA                       		move.l	(a2)+,(a3)+
0001A176 26DA                       		move.l	(a2)+,(a3)+
0001A178 26DA                       		move.l	(a2)+,(a3)+
0001A17A 51C8 FFF6                  		dbf	d0,Obj74_Loop
0001A17E                            
0001A17E 4469 0010                  		neg.w	$10(a1)
0001A182 5429 0025                  		addq.b	#2,$25(a1)
0001A186                            
0001A186                            loc_187CA:
0001A186 5428 0025                  		addq.b	#2,$25(a0)
0001A18A 4E75                       		rts	
0001A18C                            
0001A18C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001A18C                            
0001A18C                            
0001A18C                            Obj74_Duplicate2:			; XREF: Obj74_Duplicate
0001A18C 4EB9 0000 E5B6             		jsr	SingleObjLoad2
0001A192 6600                       		bne.s	locret_187EE
0001A194 3368 0008 0008             		move.w	8(a0),8(a1)
0001A19A 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001A1A0 12BC 0074                  		move.b	#$74,(a1)
0001A1A4 337C 0067 0028             		move.w	#$67,$28(a1)
0001A1AA                            
0001A1AA                            locret_187EE:
0001A1AA 4E75                       		rts	
0001A1AC                            ; End of function Obj74_Duplicate2
0001A1AC                            
0001A1AC                            ; ===========================================================================
0001A1AC                            
0001A1AC                            Obj74_Duplicate:			; XREF: Obj74_Index2
0001A1AC 6100 C63E                  		bsr.w	ObjHitFloor
0001A1B0 4A41                       		tst.w	d1
0001A1B2 6A00                       		bpl.s	loc_18826
0001A1B4 3028 0008                  		move.w	8(a0),d0
0001A1B8 0C40 1940                  		cmpi.w	#$1940,d0
0001A1BC 6E00                       		bgt.s	loc_1882C
0001A1BE 3228 0030                  		move.w	$30(a0),d1
0001A1C2 B240                       		cmp.w	d0,d1
0001A1C4 6700                       		beq.s	loc_1881E
0001A1C6 0240 0010                  		andi.w	#$10,d0
0001A1CA 0241 0010                  		andi.w	#$10,d1
0001A1CE B240                       		cmp.w	d0,d1
0001A1D0 6700                       		beq.s	loc_1881E
0001A1D2 61B8                       		bsr.s	Obj74_Duplicate2
0001A1D4 3168 0008 0032             		move.w	8(a0),$32(a0)
0001A1DA                            
0001A1DA                            loc_1881E:
0001A1DA 3168 0008 0030             		move.w	8(a0),$30(a0)
0001A1E0 4E75                       		rts	
0001A1E2                            ; ===========================================================================
0001A1E2                            
0001A1E2                            loc_18826:
0001A1E2 5428 0025                  		addq.b	#2,$25(a0)
0001A1E6 4E75                       		rts	
0001A1E8                            ; ===========================================================================
0001A1E8                            
0001A1E8                            loc_1882C:
0001A1E8 5428 0024                  		addq.b	#2,$24(a0)
0001A1EC 4E75                       		rts	
0001A1EE                            ; ===========================================================================
0001A1EE                            
0001A1EE                            Obj74_FallEdge:				; XREF: Obj74_Index2
0001A1EE 08A8 0001 0022             		bclr	#1,$22(a0)
0001A1F4 0668 0024 0012             		addi.w	#$24,$12(a0)	; make flame fall
0001A1FA 3028 0008                  		move.w	8(a0),d0
0001A1FE 9068 0032                  		sub.w	$32(a0),d0
0001A202 6A00                       		bpl.s	loc_1884A
0001A204 4440                       		neg.w	d0
0001A206                            
0001A206                            loc_1884A:
0001A206 0C40 0012                  		cmpi.w	#$12,d0
0001A20A 6600                       		bne.s	loc_18856
0001A20C 08A8 0007 0002             		bclr	#7,2(a0)
0001A212                            
0001A212                            loc_18856:
0001A212 6100 C5D8                  		bsr.w	ObjHitFloor
0001A216 4A41                       		tst.w	d1
0001A218 6A00                       		bpl.s	locret_1887E
0001A21A 5328 0029                  		subq.b	#1,$29(a0)
0001A21E 6700                       		beq.s	Obj74_Delete2
0001A220 4268 0012                  		clr.w	$12(a0)
0001A224 3168 0032 0008             		move.w	$32(a0),8(a0)
0001A22A 3168 0038 000C             		move.w	$38(a0),$C(a0)
0001A230 08E8 0007 0002             		bset	#7,2(a0)
0001A236 5528 0025                  		subq.b	#2,$25(a0)
0001A23A                            
0001A23A                            locret_1887E:
0001A23A 4E75                       		rts	
0001A23C                            ; ===========================================================================
0001A23C                            
0001A23C                            Obj74_Delete2:
0001A23C 4EF9 0000 E146             		jmp	DeleteObject
0001A242                            ; ===========================================================================
0001A242                            
0001A242                            loc_18886:				; XREF: Obj74_Index
0001A242 08E8 0007 0002             		bset	#7,2(a0)
0001A248 5328 0029                  		subq.b	#1,$29(a0)
0001A24C 6600                       		bne.s	Obj74_Animate
0001A24E 117C 0001 001C             		move.b	#1,$1C(a0)
0001A254 5968 000C                  		subq.w	#4,$C(a0)
0001A258 4228 0020                  		clr.b	$20(a0)
0001A25C                            
0001A25C                            Obj74_Animate:
0001A25C 43F9 0000 EFD8             		lea	(Ani_obj14).l,a1
0001A262 4EF9 0000 B21C             		jmp	AnimateSprite
0001A268                            ; ===========================================================================
0001A268                            
0001A268                            Obj74_Delete3:				; XREF: Obj74_Index
0001A268 4EF9 0000 E146             		jmp	DeleteObject
0001A26E                            ; ===========================================================================
0001A26E                            
0001A26E                            Obj7A_Delete:
0001A26E 4EF9 0000 E146             		jmp	DeleteObject
0001A274                            ; ===========================================================================
0001A274                            ; ---------------------------------------------------------------------------
0001A274                            ; Object 7A - Eggman (SLZ)
0001A274                            ; ---------------------------------------------------------------------------
0001A274                            
0001A274                            Obj7A:					; XREF: Obj_Index
0001A274 7000                       		moveq	#0,d0
0001A276 1028 0024                  		move.b	$24(a0),d0
0001A27A 323B 0000                  		move.w	Obj7A_Index(pc,d0.w),d1
0001A27E 4EFB 1000                  		jmp	Obj7A_Index(pc,d1.w)
0001A282                            ; ===========================================================================
0001A282 0000                       Obj7A_Index:	dc.w Obj7A_Main-Obj7A_Index
0001A284 0000                       		dc.w Obj7A_ShipMain-Obj7A_Index
0001A286 0000                       		dc.w Obj7A_FaceMain-Obj7A_Index
0001A288 0000                       		dc.w Obj7A_FlameMain-Obj7A_Index
0001A28A 0000                       		dc.w Obj7A_TubeMain-Obj7A_Index
0001A28C                            
0001A28C 0200 04                    Obj7A_ObjData:	dc.b 2,	0, 4		; routine number, animation, priority
0001A28F 0401 04                    		dc.b 4,	1, 4
0001A292 0607 04                    		dc.b 6,	7, 4
0001A295 0800 03                    		dc.b 8,	0, 3
0001A298                            ; ===========================================================================
0001A298                            
0001A298                            Obj7A_Main:				; XREF: Obj7A_Index
0001A298 317C 2188 0008             		move.w	#$2188,8(a0)
0001A29E 317C 0228 000C             		move.w	#$228,$C(a0)
0001A2A4 3168 0008 0030             		move.w	8(a0),$30(a0)
0001A2AA 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001A2B0 117C 000F 0020             		move.b	#$F,$20(a0)
0001A2B6 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
0001A2BC 45FA FFCE                  		lea	Obj7A_ObjData(pc),a2
0001A2C0 2248                       		movea.l	a0,a1
0001A2C2 7203                       		moveq	#3,d1
0001A2C4 6000                       		bra.s	Obj7A_LoadBoss
0001A2C6                            ; ===========================================================================
0001A2C6                            
0001A2C6                            Obj7A_Loop:
0001A2C6 4EB9 0000 E5B6             		jsr	SingleObjLoad2
0001A2CC 6600                       		bne.s	loc_1895C
0001A2CE 12BC 007A                  		move.b	#$7A,0(a1)
0001A2D2 3368 0008 0008             		move.w	8(a0),8(a1)
0001A2D8 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001A2DE                            
0001A2DE                            Obj7A_LoadBoss:				; XREF: Obj7A_Main
0001A2DE 08A8 0000 0022             		bclr	#0,$22(a0)
0001A2E4 4229 0025                  		clr.b	$25(a1)
0001A2E8 135A 0024                  		move.b	(a2)+,$24(a1)
0001A2EC 135A 001C                  		move.b	(a2)+,$1C(a1)
0001A2F0 135A 0018                  		move.b	(a2)+,$18(a1)
0001A2F4 237C 0001 96CE 0004        		move.l	#Map_Eggman,4(a1)
0001A2FC 337C 0400 0002             		move.w	#$400,2(a1)
0001A302 137C 0004 0001             		move.b	#4,1(a1)
0001A308 137C 0020 0019             		move.b	#$20,$19(a1)
0001A30E 2348 0034                  		move.l	a0,$34(a1)
0001A312 51C9 FFB2                  		dbf	d1,Obj7A_Loop	; repeat sequence 3 more times
0001A316                            
0001A316                            loc_1895C:
0001A316 43F8 D040                  		lea	($FFFFD040).w,a1
0001A31A 45E8 002A                  		lea	$2A(a0),a2
0001A31E 705E                       		moveq	#$5E,d0
0001A320 723E                       		moveq	#$3E,d1
0001A322                            
0001A322                            loc_18968:
0001A322 B011                       		cmp.b	(a1),d0
0001A324 6600                       		bne.s	loc_18974
0001A326 4A29 0028                  		tst.b	$28(a1)
0001A32A 6700                       		beq.s	loc_18974
0001A32C 34C9                       		move.w	a1,(a2)+
0001A32E                            
0001A32E                            loc_18974:
0001A32E D2FC 0040                  		adda.w	#$40,a1
0001A332 51C9 FFEE                  		dbf	d1,loc_18968
0001A336                            
0001A336                            Obj7A_ShipMain:				; XREF: Obj7A_Index
0001A336 7000                       		moveq	#0,d0
0001A338 1028 0025                  		move.b	$25(a0),d0
0001A33C 303B 0000                  		move.w	Obj7A_ShipIndex(pc,d0.w),d0
0001A340 4EBB 0000                  		jsr	Obj7A_ShipIndex(pc,d0.w)
0001A344 43F9 0001 967E             		lea	(Ani_Eggman).l,a1
0001A34A 4EB9 0000 B21C             		jsr	AnimateSprite
0001A350 7003                       		moveq	#3,d0
0001A352 C028 0022                  		and.b	$22(a0),d0
0001A356 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001A35C 8128 0001                  		or.b	d0,1(a0)
0001A360 4EF9 0000 E10A             		jmp	DisplaySprite
0001A366                            ; ===========================================================================
0001A366 0000                       Obj7A_ShipIndex:dc.w loc_189B8-Obj7A_ShipIndex
0001A368 0000                       		dc.w loc_18A5E-Obj7A_ShipIndex
0001A36A 0000                       		dc.w Obj7A_MakeBall-Obj7A_ShipIndex
0001A36C 0000                       		dc.w loc_18B48-Obj7A_ShipIndex
0001A36E 0000                       		dc.w loc_18B80-Obj7A_ShipIndex
0001A370 0000                       		dc.w loc_18BC6-Obj7A_ShipIndex
0001A372                            ; ===========================================================================
0001A372                            
0001A372                            loc_189B8:				; XREF: Obj7A_ShipIndex
0001A372 317C FF00 0010             		move.w	#-$100,$10(a0)
0001A378 0C68 2120 0030             		cmpi.w	#$2120,$30(a0)
0001A37E 6400                       		bcc.s	loc_189CA
0001A380 5428 0025                  		addq.b	#2,$25(a0)
0001A384                            
0001A384                            loc_189CA:
0001A384 6100 EEE8                  		bsr.w	BossMove
0001A388 1028 003F                  		move.b	$3F(a0),d0
0001A38C 5428 003F                  		addq.b	#2,$3F(a0)
0001A390 4EB9 0000 33D4             		jsr	(CalcSine).l
0001A396 EC40                       		asr.w	#6,d0
0001A398 D068 0038                  		add.w	$38(a0),d0
0001A39C 3140 000C                  		move.w	d0,$C(a0)
0001A3A0 3168 0030 0008             		move.w	$30(a0),8(a0)
0001A3A6 6000                       		bra.s	loc_189FE
0001A3A8                            ; ===========================================================================
0001A3A8                            
0001A3A8                            loc_189EE:
0001A3A8 6100 EEC4                  		bsr.w	BossMove
0001A3AC 3168 0038 000C             		move.w	$38(a0),$C(a0)
0001A3B2 3168 0030 0008             		move.w	$30(a0),8(a0)
0001A3B8                            
0001A3B8                            loc_189FE:
0001A3B8 0C28 0006 0025             		cmpi.b	#6,$25(a0)
0001A3BE 6400                       		bcc.s	locret_18A44
0001A3C0 4A28 0022                  		tst.b	$22(a0)
0001A3C4 6B00                       		bmi.s	loc_18A46
0001A3C6 4A28 0020                  		tst.b	$20(a0)
0001A3CA 6600                       		bne.s	locret_18A44
0001A3CC 4A28 003E                  		tst.b	$3E(a0)
0001A3D0 6600                       		bne.s	loc_18A28
0001A3D2 117C 0020 003E             		move.b	#$20,$3E(a0)
0001A3D8 303C 00AC                  		move.w	#$AC,d0
0001A3DC 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001A3E2                            
0001A3E2                            loc_18A28:
0001A3E2 43F8 FB22                  		lea	($FFFFFB22).w,a1
0001A3E6 7000                       		moveq	#0,d0
0001A3E8 4A51                       		tst.w	(a1)
0001A3EA 6600                       		bne.s	loc_18A36
0001A3EC 303C 0EEE                  		move.w	#$EEE,d0
0001A3F0                            
0001A3F0                            loc_18A36:
0001A3F0 3280                       		move.w	d0,(a1)
0001A3F2 5328 003E                  		subq.b	#1,$3E(a0)
0001A3F6 6600                       		bne.s	locret_18A44
0001A3F8 117C 000F 0020             		move.b	#$F,$20(a0)
0001A3FE                            
0001A3FE                            locret_18A44:
0001A3FE 4E75                       		rts	
0001A400                            ; ===========================================================================
0001A400                            
0001A400                            loc_18A46:
0001A400 7064                       		moveq	#100,d0
0001A402 6100 0000                  		bsr.w	AddPoints
0001A406 117C 0006 0025             		move.b	#6,$25(a0)
0001A40C 117C 0078 003C             		move.b	#$78,$3C(a0)
0001A412 4268 0010                  		clr.w	$10(a0)
0001A416 4E75                       		rts	
0001A418                            ; ===========================================================================
0001A418                            
0001A418                            loc_18A5E:				; XREF: Obj7A_ShipIndex
0001A418 3028 0030                  		move.w	$30(a0),d0
0001A41C 317C 0200 0010             		move.w	#$200,$10(a0)
0001A422 0828 0000 0022             		btst	#0,$22(a0)
0001A428 6600                       		bne.s	loc_18A7C
0001A42A 4468 0010                  		neg.w	$10(a0)
0001A42E 0C40 2008                  		cmpi.w	#$2008,d0
0001A432 6E00                       		bgt.s	loc_18A88
0001A434 6000                       		bra.s	loc_18A82
0001A436                            ; ===========================================================================
0001A436                            
0001A436                            loc_18A7C:
0001A436 0C40 2138                  		cmpi.w	#$2138,d0
0001A43A 6D00                       		blt.s	loc_18A88
0001A43C                            
0001A43C                            loc_18A82:
0001A43C 0868 0000 0022             		bchg	#0,$22(a0)
0001A442                            
0001A442                            loc_18A88:
0001A442 3028 0008                  		move.w	8(a0),d0
0001A446 72FF                       		moveq	#-1,d1
0001A448 7402                       		moveq	#2,d2
0001A44A 45E8 002A                  		lea	$2A(a0),a2
0001A44E 7828                       		moveq	#$28,d4
0001A450 4A68 0010                  		tst.w	$10(a0)
0001A454 6A00                       		bpl.s	loc_18A9E
0001A456 4444                       		neg.w	d4
0001A458                            
0001A458                            loc_18A9E:
0001A458 321A                       		move.w	(a2)+,d1
0001A45A 2641                       		movea.l	d1,a3
0001A45C 082B 0003 0022             		btst	#3,$22(a3)
0001A462 6600                       		bne.s	loc_18AB4
0001A464 362B 0008                  		move.w	8(a3),d3
0001A468 D644                       		add.w	d4,d3
0001A46A 9640                       		sub.w	d0,d3
0001A46C 6700                       		beq.s	loc_18AC0
0001A46E                            
0001A46E                            loc_18AB4:
0001A46E 51CA FFE8                  		dbf	d2,loc_18A9E
0001A472                            
0001A472 1142 0028                  		move.b	d2,$28(a0)
0001A476 6000 FF0C                  		bra.w	loc_189CA
0001A47A                            ; ===========================================================================
0001A47A                            
0001A47A                            loc_18AC0:
0001A47A 1142 0028                  		move.b	d2,$28(a0)
0001A47E 5428 0025                  		addq.b	#2,$25(a0)
0001A482 117C 0028 003C             		move.b	#$28,$3C(a0)
0001A488 6000 FEFA                  		bra.w	loc_189CA
0001A48C                            ; ===========================================================================
0001A48C                            
0001A48C                            Obj7A_MakeBall:				; XREF: Obj7A_ShipIndex
0001A48C 0C28 0028 003C             		cmpi.b	#$28,$3C(a0)
0001A492 6600                       		bne.s	loc_18B36
0001A494 70FF                       		moveq	#-1,d0
0001A496 1028 0028                  		move.b	$28(a0),d0
0001A49A 4880                       		ext.w	d0
0001A49C 6B00                       		bmi.s	loc_18B40
0001A49E 5540                       		subq.w	#2,d0
0001A4A0 4440                       		neg.w	d0
0001A4A2 D040                       		add.w	d0,d0
0001A4A4 43E8 002A                  		lea	$2A(a0),a1
0001A4A8 3031 0000                  		move.w	(a1,d0.w),d0
0001A4AC 2440                       		movea.l	d0,a2
0001A4AE 43F8 D040                  		lea	($FFFFD040).w,a1
0001A4B2 723E                       		moveq	#$3E,d1
0001A4B4                            
0001A4B4                            loc_18AFA:
0001A4B4 B0A9 003C                  		cmp.l	$3C(a1),d0
0001A4B8 6700                       		beq.s	loc_18B40
0001A4BA D2FC 0040                  		adda.w	#$40,a1
0001A4BE 51C9 FFF4                  		dbf	d1,loc_18AFA
0001A4C2                            
0001A4C2 2F08                       		move.l	a0,-(sp)
0001A4C4 41D2                       		lea	(a2),a0
0001A4C6 4EB9 0000 E5B6             		jsr	SingleObjLoad2
0001A4CC 205F                       		movea.l	(sp)+,a0
0001A4CE 6600                       		bne.s	loc_18B40
0001A4D0 12BC 007B                  		move.b	#$7B,(a1)	; load spiked ball object
0001A4D4 3368 0008 0008             		move.w	8(a0),8(a1)
0001A4DA 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001A4E0 0669 0020 000C             		addi.w	#$20,$C(a1)
0001A4E6 136A 0022 0022             		move.b	$22(a2),$22(a1)
0001A4EC 234A 003C                  		move.l	a2,$3C(a1)
0001A4F0                            
0001A4F0                            loc_18B36:
0001A4F0 5328 003C                  		subq.b	#1,$3C(a0)
0001A4F4 6700                       		beq.s	loc_18B40
0001A4F6 6000 FEC0                  		bra.w	loc_189FE
0001A4FA                            ; ===========================================================================
0001A4FA                            
0001A4FA                            loc_18B40:
0001A4FA 5528 0025                  		subq.b	#2,$25(a0)
0001A4FE 6000 FE84                  		bra.w	loc_189CA
0001A502                            ; ===========================================================================
0001A502                            
0001A502                            loc_18B48:				; XREF: Obj7A_ShipIndex
0001A502 5328 003C                  		subq.b	#1,$3C(a0)
0001A506 6B00                       		bmi.s	loc_18B52
0001A508 6000 ED22                  		bra.w	BossDefeated
0001A50C                            ; ===========================================================================
0001A50C                            
0001A50C                            loc_18B52:
0001A50C 5428 0025                  		addq.b	#2,$25(a0)
0001A510 4268 0012                  		clr.w	$12(a0)
0001A514 08E8 0000 0022             		bset	#0,$22(a0)
0001A51A 08A8 0007 0022             		bclr	#7,$22(a0)
0001A520 4268 0010                  		clr.w	$10(a0)
0001A524 117C 00E8 003C             		move.b	#-$18,$3C(a0)
0001A52A 4A38 F7A7                  		tst.b	($FFFFF7A7).w
0001A52E 6600                       		bne.s	loc_18B7C
0001A530 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
0001A536                            
0001A536                            loc_18B7C:
0001A536 6000 FE80                  		bra.w	loc_189FE
0001A53A                            ; ===========================================================================
0001A53A                            
0001A53A                            loc_18B80:				; XREF: Obj7A_ShipIndex
0001A53A 5228 003C                  		addq.b	#1,$3C(a0)
0001A53E 6700                       		beq.s	loc_18B90
0001A540 6A00                       		bpl.s	loc_18B96
0001A542 0668 0018 0012             		addi.w	#$18,$12(a0)
0001A548 6000                       		bra.s	loc_18BC2
0001A54A                            ; ===========================================================================
0001A54A                            
0001A54A                            loc_18B90:
0001A54A 4268 0012                  		clr.w	$12(a0)
0001A54E 6000                       		bra.s	loc_18BC2
0001A550                            ; ===========================================================================
0001A550                            
0001A550                            loc_18B96:
0001A550 0C28 0020 003C             		cmpi.b	#$20,$3C(a0)
0001A556 6500                       		bcs.s	loc_18BAE
0001A558 6700                       		beq.s	loc_18BB4
0001A55A 0C28 002A 003C             		cmpi.b	#$2A,$3C(a0)
0001A560 6500                       		bcs.s	loc_18BC2
0001A562 5428 0025                  		addq.b	#2,$25(a0)
0001A566 6000                       		bra.s	loc_18BC2
0001A568                            ; ===========================================================================
0001A568                            
0001A568                            loc_18BAE:
0001A568 5168 0012                  		subq.w	#8,$12(a0)
0001A56C 6000                       		bra.s	loc_18BC2
0001A56E                            ; ===========================================================================
0001A56E                            
0001A56E                            loc_18BB4:
0001A56E 4268 0012                  		clr.w	$12(a0)
0001A572 303C 0084                  		move.w	#$84,d0
0001A576 4EB9 0000 1470             		jsr	(PlaySound).l	; play SLZ music
0001A57C                            
0001A57C                            loc_18BC2:
0001A57C 6000 FE2A                  		bra.w	loc_189EE
0001A580                            ; ===========================================================================
0001A580                            
0001A580                            loc_18BC6:				; XREF: Obj7A_ShipIndex
0001A580 317C 0400 0010             		move.w	#$400,$10(a0)
0001A586 317C FFC0 0012             		move.w	#-$40,$12(a0)
0001A58C 0C78 2160 F72A             		cmpi.w	#$2160,($FFFFF72A).w
0001A592 6400                       		bcc.s	loc_18BE0
0001A594 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0001A598 6000                       		bra.s	loc_18BE8
0001A59A                            ; ===========================================================================
0001A59A                            
0001A59A                            loc_18BE0:
0001A59A 4A28 0001                  		tst.b	1(a0)
0001A59E 6A00 FCCE                  		bpl.w	Obj7A_Delete
0001A5A2                            
0001A5A2                            loc_18BE8:
0001A5A2 6100 ECCA                  		bsr.w	BossMove
0001A5A6 6000 FDDC                  		bra.w	loc_189CA
0001A5AA                            ; ===========================================================================
0001A5AA                            
0001A5AA                            Obj7A_FaceMain:				; XREF: Obj7A_Index
0001A5AA 7000                       		moveq	#0,d0
0001A5AC 7201                       		moveq	#1,d1
0001A5AE 2268 0034                  		movea.l	$34(a0),a1
0001A5B2 1029 0025                  		move.b	$25(a1),d0
0001A5B6 0C00 0006                  		cmpi.b	#6,d0
0001A5BA 6B00                       		bmi.s	loc_18C06
0001A5BC 720A                       		moveq	#$A,d1
0001A5BE 6000                       		bra.s	loc_18C1A
0001A5C0                            ; ===========================================================================
0001A5C0                            
0001A5C0                            loc_18C06:
0001A5C0 4A29 0020                  		tst.b	$20(a1)
0001A5C4 6600                       		bne.s	loc_18C10
0001A5C6 7205                       		moveq	#5,d1
0001A5C8 6000                       		bra.s	loc_18C1A
0001A5CA                            ; ===========================================================================
0001A5CA                            
0001A5CA                            loc_18C10:
0001A5CA 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
0001A5D0 6500                       		bcs.s	loc_18C1A
0001A5D2 7204                       		moveq	#4,d1
0001A5D4                            
0001A5D4                            loc_18C1A:
0001A5D4 1141 001C                  		move.b	d1,$1C(a0)
0001A5D8 0C00 000A                  		cmpi.b	#$A,d0
0001A5DC 6600                       		bne.s	loc_18C32
0001A5DE 117C 0006 001C             		move.b	#6,$1C(a0)
0001A5E4 4A28 0001                  		tst.b	1(a0)
0001A5E8 6A00 FC84                  		bpl.w	Obj7A_Delete
0001A5EC                            
0001A5EC                            loc_18C32:
0001A5EC 6000                       		bra.s	loc_18C6C
0001A5EE                            ; ===========================================================================
0001A5EE                            
0001A5EE                            Obj7A_FlameMain:			; XREF: Obj7A_Index
0001A5EE 117C 0008 001C             		move.b	#8,$1C(a0)
0001A5F4 2268 0034                  		movea.l	$34(a0),a1
0001A5F8 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
0001A5FE 6600                       		bne.s	loc_18C56
0001A600 4A28 0001                  		tst.b	1(a0)
0001A604 6A00 FC68                  		bpl.w	Obj7A_Delete
0001A608 117C 000B 001C             		move.b	#$B,$1C(a0)
0001A60E 6000                       		bra.s	loc_18C6C
0001A610                            ; ===========================================================================
0001A610                            
0001A610                            loc_18C56:
0001A610 0C29 0008 0025             		cmpi.b	#8,$25(a1)
0001A616 6E00                       		bgt.s	loc_18C6C
0001A618 0C29 0004 0025             		cmpi.b	#4,$25(a1)
0001A61E 6D00                       		blt.s	loc_18C6C
0001A620 117C 0007 001C             		move.b	#7,$1C(a0)
0001A626                            
0001A626                            loc_18C6C:
0001A626 43F9 0001 967E             		lea	(Ani_Eggman).l,a1
0001A62C 4EB9 0000 B21C             		jsr	AnimateSprite
0001A632                            
0001A632                            loc_18C78:
0001A632 2268 0034                  		movea.l	$34(a0),a1
0001A636 3169 0008 0008             		move.w	8(a1),8(a0)
0001A63C 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001A642 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001A648 7003                       		moveq	#3,d0
0001A64A C028 0022                  		and.b	$22(a0),d0
0001A64E 0228 00FC 0001             		andi.b	#-4,1(a0)
0001A654 8128 0001                  		or.b	d0,1(a0)
0001A658 4EF9 0000 E10A             		jmp	DisplaySprite
0001A65E                            ; ===========================================================================
0001A65E                            
0001A65E                            Obj7A_TubeMain:				; XREF: Obj7A_Index
0001A65E 2268 0034                  		movea.l	$34(a0),a1
0001A662 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
0001A668 6600                       		bne.s	loc_18CB8
0001A66A 4A28 0001                  		tst.b	1(a0)
0001A66E 6A00 FBFE                  		bpl.w	Obj7A_Delete
0001A672                            
0001A672                            loc_18CB8:
0001A672 217C 0001 9796 0004        		move.l	#Map_BossItems,4(a0)
0001A67A 317C 246C 0002             		move.w	#$246C,2(a0)
0001A680 117C 0003 001A             		move.b	#3,$1A(a0)
0001A686 60AA                       		bra.s	loc_18C78
0001A688                            ; ===========================================================================
0001A688                            ; ---------------------------------------------------------------------------
0001A688                            ; Object 7B - exploding	spikeys	that Eggman drops (SLZ)
0001A688                            ; ---------------------------------------------------------------------------
0001A688                            
0001A688                            Obj7B:					; XREF: Obj_Index
0001A688 7000                       		moveq	#0,d0
0001A68A 1028 0024                  		move.b	$24(a0),d0
0001A68E 303B 0000                  		move.w	Obj7B_Index(pc,d0.w),d0
0001A692 4EBB 0000                  		jsr	Obj7B_Index(pc,d0.w)
0001A696 3028 0030                  		move.w	$30(a0),d0
0001A69A 0240 FF80                  		andi.w	#$FF80,d0
0001A69E 3238 F700                  		move.w	($FFFFF700).w,d1
0001A6A2 0441 0080                  		subi.w	#$80,d1
0001A6A6 0241 FF80                  		andi.w	#$FF80,d1
0001A6AA 9041                       		sub.w	d1,d0
0001A6AC 6B00 FBC0                  		bmi.w	Obj7A_Delete
0001A6B0 0C40 0280                  		cmpi.w	#$280,d0
0001A6B4 6200 FBB8                  		bhi.w	Obj7A_Delete
0001A6B8 4EF9 0000 E10A             		jmp	DisplaySprite
0001A6BE                            ; ===========================================================================
0001A6BE 0000                       Obj7B_Index:	dc.w Obj7B_Main-Obj7B_Index
0001A6C0 0000                       		dc.w Obj7B_Fall-Obj7B_Index
0001A6C2 0000                       		dc.w loc_18DC6-Obj7B_Index
0001A6C4 0000                       		dc.w loc_18EAA-Obj7B_Index
0001A6C6 0000                       		dc.w Obj7B_Explode-Obj7B_Index
0001A6C8 0000                       		dc.w Obj7B_MoveFrag-Obj7B_Index
0001A6CA                            ; ===========================================================================
0001A6CA                            
0001A6CA                            Obj7B_Main:				; XREF: Obj7B_Index
0001A6CA 217C 0001 250A 0004        		move.l	#Map_obj5Ea,4(a0)
0001A6D2 317C 0518 0002             		move.w	#$518,2(a0)
0001A6D8 117C 0001 001A             		move.b	#1,$1A(a0)
0001A6DE 0028 0004 0001             		ori.b	#4,1(a0)
0001A6E4 117C 0004 0018             		move.b	#4,$18(a0)
0001A6EA 117C 008B 0020             		move.b	#$8B,$20(a0)
0001A6F0 117C 000C 0019             		move.b	#$C,$19(a0)
0001A6F6 2268 003C                  		movea.l	$3C(a0),a1
0001A6FA 3169 0008 0030             		move.w	8(a1),$30(a0)
0001A700 3169 000C 0034             		move.w	$C(a1),$34(a0)
0001A706 08E8 0000 0022             		bset	#0,$22(a0)
0001A70C 3028 0008                  		move.w	8(a0),d0
0001A710 B069 0008                  		cmp.w	8(a1),d0
0001A714 6E00                       		bgt.s	loc_18D68
0001A716 08A8 0000 0022             		bclr	#0,$22(a0)
0001A71C 117C 0002 003A             		move.b	#2,$3A(a0)
0001A722                            
0001A722                            loc_18D68:
0001A722 5428 0024                  		addq.b	#2,$24(a0)
0001A726                            
0001A726                            Obj7B_Fall:				; XREF: Obj7B_Index
0001A726 4EB9 0000 E0B8             		jsr	ObjectFall
0001A72C 2268 003C                  		movea.l	$3C(a0),a1
0001A730 45F9 0000 0000             		lea	(word_19018).l,a2
0001A736 7000                       		moveq	#0,d0
0001A738 1029 001A                  		move.b	$1A(a1),d0
0001A73C 3228 0008                  		move.w	8(a0),d1
0001A740 9268 0030                  		sub.w	$30(a0),d1
0001A744 6400                       		bcc.s	loc_18D8E
0001A746 5440                       		addq.w	#2,d0
0001A748                            
0001A748                            loc_18D8E:
0001A748 D040                       		add.w	d0,d0
0001A74A 3228 0034                  		move.w	$34(a0),d1
0001A74E D272 0000                  		add.w	(a2,d0.w),d1
0001A752 B268 000C                  		cmp.w	$C(a0),d1
0001A756 6E00                       		bgt.s	locret_18DC4
0001A758 2268 003C                  		movea.l	$3C(a0),a1
0001A75C 7202                       		moveq	#2,d1
0001A75E 0828 0000 0022             		btst	#0,$22(a0)
0001A764 6700                       		beq.s	loc_18DAE
0001A766 7200                       		moveq	#0,d1
0001A768                            
0001A768                            loc_18DAE:
0001A768 317C 00F0 0028             		move.w	#$F0,$28(a0)
0001A76E 117C 000A 001F             		move.b	#10,$1F(a0)	; set frame duration to	10 frames
0001A774 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
0001A77A 6000 0000                  		bra.w	loc_18FA2
0001A77E                            ; ===========================================================================
0001A77E                            
0001A77E                            locret_18DC4:
0001A77E 4E75                       		rts	
0001A780                            ; ===========================================================================
0001A780                            
0001A780                            loc_18DC6:				; XREF: Obj7B_Index
0001A780 2268 003C                  		movea.l	$3C(a0),a1
0001A784 7000                       		moveq	#0,d0
0001A786 1028 003A                  		move.b	$3A(a0),d0
0001A78A 9029 003A                  		sub.b	$3A(a1),d0
0001A78E 6700                       		beq.s	loc_18E2A
0001A790 6400                       		bcc.s	loc_18DDA
0001A792 4400                       		neg.b	d0
0001A794                            
0001A794                            loc_18DDA:
0001A794 323C F7E8                  		move.w	#-$818,d1
0001A798 343C FEEC                  		move.w	#-$114,d2
0001A79C 0C00 0001                  		cmpi.b	#1,d0
0001A7A0 6700                       		beq.s	loc_18E00
0001A7A2 323C F6A0                  		move.w	#-$960,d1
0001A7A6 343C FF0C                  		move.w	#-$F4,d2
0001A7AA 0C69 09C0 0038             		cmpi.w	#$9C0,$38(a1)
0001A7B0 6D00                       		blt.s	loc_18E00
0001A7B2 323C F5E0                  		move.w	#-$A20,d1
0001A7B6 343C FF80                  		move.w	#-$80,d2
0001A7BA                            
0001A7BA                            loc_18E00:
0001A7BA 3141 0012                  		move.w	d1,$12(a0)
0001A7BE 3142 0010                  		move.w	d2,$10(a0)
0001A7C2 3028 0008                  		move.w	8(a0),d0
0001A7C6 9068 0030                  		sub.w	$30(a0),d0
0001A7CA 6400                       		bcc.s	loc_18E16
0001A7CC 4468 0010                  		neg.w	$10(a0)
0001A7D0                            
0001A7D0                            loc_18E16:
0001A7D0 117C 0001 001A             		move.b	#1,$1A(a0)
0001A7D6 317C 0020 0028             		move.w	#$20,$28(a0)
0001A7DC 5428 0024                  		addq.b	#2,$24(a0)
0001A7E0 6000 0000                  		bra.w	loc_18EAA
0001A7E4                            ; ===========================================================================
0001A7E4                            
0001A7E4                            loc_18E2A:				; XREF: loc_18DC6
0001A7E4 45F9 0000 0000             		lea	(word_19018).l,a2
0001A7EA 7000                       		moveq	#0,d0
0001A7EC 1029 001A                  		move.b	$1A(a1),d0
0001A7F0 343C 0028                  		move.w	#$28,d2
0001A7F4 3228 0008                  		move.w	8(a0),d1
0001A7F8 9268 0030                  		sub.w	$30(a0),d1
0001A7FC 6400                       		bcc.s	loc_18E48
0001A7FE 4442                       		neg.w	d2
0001A800 5440                       		addq.w	#2,d0
0001A802                            
0001A802                            loc_18E48:
0001A802 D040                       		add.w	d0,d0
0001A804 3228 0034                  		move.w	$34(a0),d1
0001A808 D272 0000                  		add.w	(a2,d0.w),d1
0001A80C 3141 000C                  		move.w	d1,$C(a0)
0001A810 D468 0030                  		add.w	$30(a0),d2
0001A814 3142 0008                  		move.w	d2,8(a0)
0001A818 4268 000E                  		clr.w	$E(a0)
0001A81C 4268 000A                  		clr.w	$A(a0)
0001A820 5368 0028                  		subq.w	#1,$28(a0)
0001A824 6600                       		bne.s	loc_18E7A
0001A826 317C 0020 0028             		move.w	#$20,$28(a0)
0001A82C 117C 0008 0024             		move.b	#8,$24(a0)
0001A832 4E75                       		rts	
0001A834                            ; ===========================================================================
0001A834                            
0001A834                            loc_18E7A:
0001A834 0C68 0078 0028             		cmpi.w	#$78,$28(a0)
0001A83A 6600                       		bne.s	loc_18E88
0001A83C 117C 0005 001F             		move.b	#5,$1F(a0)
0001A842                            
0001A842                            loc_18E88:
0001A842 0C68 003C 0028             		cmpi.w	#$3C,$28(a0)
0001A848 6600                       		bne.s	loc_18E96
0001A84A 117C 0002 001F             		move.b	#2,$1F(a0)
0001A850                            
0001A850                            loc_18E96:
0001A850 5328 001E                  		subq.b	#1,$1E(a0)
0001A854 6E00                       		bgt.s	locret_18EA8
0001A856 0868 0000 001A             		bchg	#0,$1A(a0)
0001A85C 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
0001A862                            
0001A862                            locret_18EA8:
0001A862 4E75                       		rts	
0001A864                            ; ===========================================================================
0001A864                            
0001A864                            loc_18EAA:				; XREF: Obj7B_Index
0001A864 43F8 D040                  		lea	($FFFFD040).w,a1
0001A868 707A                       		moveq	#$7A,d0
0001A86A 7240                       		moveq	#$40,d1
0001A86C 743E                       		moveq	#$3E,d2
0001A86E                            
0001A86E                            loc_18EB4:
0001A86E B011                       		cmp.b	(a1),d0
0001A870 6700                       		beq.s	loc_18EC0
0001A872 D2C1                       		adda.w	d1,a1
0001A874 51CA FFF8                  		dbf	d2,loc_18EB4
0001A878                            
0001A878 6000                       		bra.s	loc_18F38
0001A87A                            ; ===========================================================================
0001A87A                            
0001A87A                            loc_18EC0:
0001A87A 3029 0008                  		move.w	8(a1),d0
0001A87E 3229 000C                  		move.w	$C(a1),d1
0001A882 3428 0008                  		move.w	8(a0),d2
0001A886 3628 000C                  		move.w	$C(a0),d3
0001A88A 45FA 0000                  		lea	byte_19022(pc),a2
0001A88E 47FA 0000                  		lea	byte_19026(pc),a3
0001A892 181A                       		move.b	(a2)+,d4
0001A894 4884                       		ext.w	d4
0001A896 D044                       		add.w	d4,d0
0001A898 181B                       		move.b	(a3)+,d4
0001A89A 4884                       		ext.w	d4
0001A89C D444                       		add.w	d4,d2
0001A89E B440                       		cmp.w	d0,d2
0001A8A0 6500                       		bcs.s	loc_18F38
0001A8A2 181A                       		move.b	(a2)+,d4
0001A8A4 4884                       		ext.w	d4
0001A8A6 D044                       		add.w	d4,d0
0001A8A8 181B                       		move.b	(a3)+,d4
0001A8AA 4884                       		ext.w	d4
0001A8AC D444                       		add.w	d4,d2
0001A8AE B042                       		cmp.w	d2,d0
0001A8B0 6500                       		bcs.s	loc_18F38
0001A8B2 181A                       		move.b	(a2)+,d4
0001A8B4 4884                       		ext.w	d4
0001A8B6 D244                       		add.w	d4,d1
0001A8B8 181B                       		move.b	(a3)+,d4
0001A8BA 4884                       		ext.w	d4
0001A8BC D644                       		add.w	d4,d3
0001A8BE B641                       		cmp.w	d1,d3
0001A8C0 6500                       		bcs.s	loc_18F38
0001A8C2 181A                       		move.b	(a2)+,d4
0001A8C4 4884                       		ext.w	d4
0001A8C6 D244                       		add.w	d4,d1
0001A8C8 181B                       		move.b	(a3)+,d4
0001A8CA 4884                       		ext.w	d4
0001A8CC D644                       		add.w	d4,d3
0001A8CE B243                       		cmp.w	d3,d1
0001A8D0 6500                       		bcs.s	loc_18F38
0001A8D2 5428 0024                  		addq.b	#2,$24(a0)
0001A8D6 4268 0028                  		clr.w	$28(a0)
0001A8DA 4229 0020                  		clr.b	$20(a1)
0001A8DE 5329 0021                  		subq.b	#1,$21(a1)
0001A8E2 6600                       		bne.s	loc_18F38
0001A8E4 08E9 0007 0022             		bset	#7,$22(a1)
0001A8EA 4268 0010                  		clr.w	$10(a0)
0001A8EE 4268 0012                  		clr.w	$12(a0)
0001A8F2                            
0001A8F2                            loc_18F38:
0001A8F2 4A68 0012                  		tst.w	$12(a0)
0001A8F6 6A00                       		bpl.s	loc_18F5C
0001A8F8 4EB9 0000 E0B8             		jsr	ObjectFall
0001A8FE 3028 0034                  		move.w	$34(a0),d0
0001A902 0440 002F                  		subi.w	#$2F,d0
0001A906 B068 000C                  		cmp.w	$C(a0),d0
0001A90A 6E00                       		bgt.s	loc_18F58
0001A90C 4EB9 0000 E0B8             		jsr	ObjectFall
0001A912                            
0001A912                            loc_18F58:
0001A912 6000 FF20                  		bra.w	loc_18E7A
0001A916                            ; ===========================================================================
0001A916                            
0001A916                            loc_18F5C:
0001A916 4EB9 0000 E0B8             		jsr	ObjectFall
0001A91C 2268 003C                  		movea.l	$3C(a0),a1
0001A920 45F9 0000 0000             		lea	(word_19018).l,a2
0001A926 7000                       		moveq	#0,d0
0001A928 1029 001A                  		move.b	$1A(a1),d0
0001A92C 3228 0008                  		move.w	8(a0),d1
0001A930 9268 0030                  		sub.w	$30(a0),d1
0001A934 6400                       		bcc.s	loc_18F7E
0001A936 5440                       		addq.w	#2,d0
0001A938                            
0001A938                            loc_18F7E:
0001A938 D040                       		add.w	d0,d0
0001A93A 3228 0034                  		move.w	$34(a0),d1
0001A93E D272 0000                  		add.w	(a2,d0.w),d1
0001A942 B268 000C                  		cmp.w	$C(a0),d1
0001A946 6ECA                       		bgt.s	loc_18F58
0001A948 2268 003C                  		movea.l	$3C(a0),a1
0001A94C 7202                       		moveq	#2,d1
0001A94E 4A68 0010                  		tst.w	$10(a0)
0001A952 6B00                       		bmi.s	loc_18F9C
0001A954 7200                       		moveq	#0,d1
0001A956                            
0001A956                            loc_18F9C:
0001A956 317C 0000 0028             		move.w	#0,$28(a0)
0001A95C                            
0001A95C                            loc_18FA2:
0001A95C 1341 003A                  		move.b	d1,$3A(a1)
0001A960 1141 003A                  		move.b	d1,$3A(a0)
0001A964 B229 001A                  		cmp.b	$1A(a1),d1
0001A968 6700                       		beq.s	loc_19008
0001A96A 08A9 0003 0022             		bclr	#3,$22(a1)
0001A970 6700                       		beq.s	loc_19008
0001A972 4229 0025                  		clr.b	$25(a1)
0001A976 137C 0002 0024             		move.b	#2,$24(a1)
0001A97C 45F8 D000                  		lea	($FFFFD000).w,a2
0001A980 3568 0012 0012             		move.w	$12(a0),$12(a2)
0001A986 446A 0012                  		neg.w	$12(a2)
0001A98A 0C29 0001 001A             		cmpi.b	#1,$1A(a1)
0001A990 6600                       		bne.s	loc_18FDC
0001A992 E0EA 0012                  		asr	$12(a2)
0001A996                            
0001A996                            loc_18FDC:
0001A996 08EA 0001 0022             		bset	#1,$22(a2)
0001A99C 08AA 0003 0022             		bclr	#3,$22(a2)
0001A9A2 422A 003C                  		clr.b	$3C(a2)
0001A9A6 2F08                       		move.l	a0,-(sp)
0001A9A8 41D2                       		lea	(a2),a0
0001A9AA 4EBA 9610                  		jsr	Obj01_ChkRoll
0001A9AE 205F                       		movea.l	(sp)+,a0
0001A9B0 157C 0002 0024             		move.b	#2,$24(a2)
0001A9B6 303C 00CC                  		move.w	#$CC,d0
0001A9BA 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play "spring" sound
0001A9C0                            
0001A9C0                            loc_19008:
0001A9C0 4268 0010                  		clr.w	$10(a0)
0001A9C4 4268 0012                  		clr.w	$12(a0)
0001A9C8 5428 0024                  		addq.b	#2,$24(a0)
0001A9CC 6000 FE66                  		bra.w	loc_18E7A
0001A9D0                            ; ===========================================================================
0001A9D0 FFF8 FFE4 FFD1 FFE4 FFF8   word_19018:	dc.w $FFF8, $FFE4, $FFD1, $FFE4, $FFF8
0001A9DA                            		even
0001A9DA E830 E830                  byte_19022:	dc.b $E8, $30, $E8, $30
0001A9DE                            		even
0001A9DE 08F0 08F0                  byte_19026:	dc.b 8,	$F0, 8,	$F0
0001A9E2                            		even
0001A9E2                            ; ===========================================================================
0001A9E2                            
0001A9E2                            Obj7B_Explode:				; XREF: Obj7B_Index
0001A9E2 10BC 003F                  		move.b	#$3F,(a0)
0001A9E6 4228 0024                  		clr.b	$24(a0)
0001A9EA 0C68 0020 0028             		cmpi.w	#$20,$28(a0)
0001A9F0 6700                       		beq.s	Obj7B_MakeFrag
0001A9F2 4E75                       		rts	
0001A9F4                            ; ===========================================================================
0001A9F4                            
0001A9F4                            Obj7B_MakeFrag:
0001A9F4 3168 0034 000C             		move.w	$34(a0),$C(a0)
0001A9FA 7203                       		moveq	#3,d1
0001A9FC 45FA 0000                  		lea	Obj7B_FragSpeed(pc),a2
0001AA00                            
0001AA00                            Obj7B_Loop:
0001AA00 4EB9 0000 E5A0             		jsr	SingleObjLoad
0001AA06 6600                       		bne.s	loc_1909A
0001AA08 12BC 007B                  		move.b	#$7B,(a1)	; load shrapnel	object
0001AA0C 137C 000A 0024             		move.b	#$A,$24(a1)
0001AA12 237C 0000 0000 0004        		move.l	#Map_obj7B,4(a1)
0001AA1A 137C 0003 0018             		move.b	#3,$18(a1)
0001AA20 337C 0518 0002             		move.w	#$518,2(a1)
0001AA26 3368 0008 0008             		move.w	8(a0),8(a1)
0001AA2C 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001AA32 335A 0010                  		move.w	(a2)+,$10(a1)
0001AA36 335A 0012                  		move.w	(a2)+,$12(a1)
0001AA3A 137C 0098 0020             		move.b	#$98,$20(a1)
0001AA40 0029 0004 0001             		ori.b	#4,1(a1)
0001AA46 08E9 0007 0001             		bset	#7,1(a1)
0001AA4C 137C 000C 0019             		move.b	#$C,$19(a1)
0001AA52                            
0001AA52                            loc_1909A:
0001AA52 51C9 FFAC                  		dbf	d1,Obj7B_Loop	; repeat sequence 3 more times
0001AA56                            
0001AA56 4E75                       		rts	
0001AA58                            ; ===========================================================================
0001AA58 FF00 FCC0                  Obj7B_FragSpeed:dc.w $FF00, $FCC0	; horizontal, vertical
0001AA5C FF60 FDC0                  		dc.w $FF60, $FDC0
0001AA60 0100 FCC0                  		dc.w $100, $FCC0
0001AA64 00A0 FDC0                  		dc.w $A0, $FDC0
0001AA68                            ; ===========================================================================
0001AA68                            
0001AA68                            Obj7B_MoveFrag:				; XREF: Obj7B_Index
0001AA68 4EB9 0000 E0E4             		jsr	SpeedToPos
0001AA6E 3168 0008 0030             		move.w	8(a0),$30(a0)
0001AA74 3168 000C 0034             		move.w	$C(a0),$34(a0)
0001AA7A 0668 0018 0012             		addi.w	#$18,$12(a0)
0001AA80 7004                       		moveq	#4,d0
0001AA82 C078 FE0E                  		and.w	($FFFFFE0E).w,d0
0001AA86 E448                       		lsr.w	#2,d0
0001AA88 1140 001A                  		move.b	d0,$1A(a0)
0001AA8C 4A28 0001                  		tst.b	1(a0)
0001AA90 6A00 F7DC                  		bpl.w	Obj7A_Delete
0001AA94 4E75                       		rts	
0001AA96                            ; ===========================================================================
0001AA96                            ; ---------------------------------------------------------------------------
0001AA96                            ; Sprite mappings - exploding spikeys that the SLZ boss	drops
0001AA96                            ; ---------------------------------------------------------------------------
0001AA96                            Map_obj7B:
0001AA96                            	include "_maps\obj7B.asm"
0001AA96                            ; ---------------------------------------------------------------------------
0001AA96                            ; Sprite mappings - exploding spikeys that the SLZ boss	drops
0001AA96                            ; ---------------------------------------------------------------------------
0001AA96 0000                       		dc.w byte_190E2-Map_obj7B
0001AA98 0000                       		dc.w byte_190E8-Map_obj7B
0001AA9A 01                         byte_190E2:	dc.b 1
0001AA9B FC00 0027 FC               		dc.b $FC, 0, 0,	$27, $FC
0001AAA0 01                         byte_190E8:	dc.b 1
0001AAA1 FC00 0028 FC               		dc.b $FC, 0, 0,	$28, $FC
0001AAA6                            		even
0001AAA6                            		even
0001AAA6                            
0001AAA6                            ; ===========================================================================
0001AAA6                            ; ---------------------------------------------------------------------------
0001AAA6                            ; Object 75 - Eggman (SYZ)
0001AAA6                            ; ---------------------------------------------------------------------------
0001AAA6                            
0001AAA6                            Obj75:					; XREF: Obj_Index
0001AAA6 7000                       		moveq	#0,d0
0001AAA8 1028 0024                  		move.b	$24(a0),d0
0001AAAC 323B 0000                  		move.w	Obj75_Index(pc,d0.w),d1
0001AAB0 4EFB 1000                  		jmp	Obj75_Index(pc,d1.w)
0001AAB4                            ; ===========================================================================
0001AAB4 0000                       Obj75_Index:	dc.w Obj75_Main-Obj75_Index
0001AAB6 0000                       		dc.w Obj75_ShipMain-Obj75_Index
0001AAB8 0000                       		dc.w Obj75_FaceMain-Obj75_Index
0001AABA 0000                       		dc.w Obj75_FlameMain-Obj75_Index
0001AABC 0000                       		dc.w Obj75_SpikeMain-Obj75_Index
0001AABE                            
0001AABE 0200 05                    Obj75_ObjData:	dc.b 2,	0, 5		; routine number, animation, priority
0001AAC1 0401 05                    		dc.b 4,	1, 5
0001AAC4 0607 05                    		dc.b 6,	7, 5
0001AAC7 0800 05                    		dc.b 8,	0, 5
0001AACA                            ; ===========================================================================
0001AACA                            
0001AACA                            Obj75_Main:				; XREF: Obj75_Index
0001AACA 317C 2DB0 0008             		move.w	#$2DB0,8(a0)
0001AAD0 317C 04DA 000C             		move.w	#$4DA,$C(a0)
0001AAD6 3168 0008 0030             		move.w	8(a0),$30(a0)
0001AADC 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001AAE2 117C 000F 0020             		move.b	#$F,$20(a0)
0001AAE8 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
0001AAEE 45FA FFCE                  		lea	Obj75_ObjData(pc),a2
0001AAF2 2248                       		movea.l	a0,a1
0001AAF4 7203                       		moveq	#3,d1
0001AAF6 6000                       		bra.s	Obj75_LoadBoss
0001AAF8                            ; ===========================================================================
0001AAF8                            
0001AAF8                            Obj75_Loop:
0001AAF8 4EB9 0000 E5B6             		jsr	SingleObjLoad2
0001AAFE 6600                       		bne.s	Obj75_ShipMain
0001AB00 12BC 0075                  		move.b	#$75,(a1)
0001AB04 3368 0008 0008             		move.w	8(a0),8(a1)
0001AB0A 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001AB10                            
0001AB10                            Obj75_LoadBoss:				; XREF: Obj75_Main
0001AB10 08A8 0000 0022             		bclr	#0,$22(a0)
0001AB16 4229 0025                  		clr.b	$25(a1)
0001AB1A 135A 0024                  		move.b	(a2)+,$24(a1)
0001AB1E 135A 001C                  		move.b	(a2)+,$1C(a1)
0001AB22 135A 0018                  		move.b	(a2)+,$18(a1)
0001AB26 237C 0001 96CE 0004        		move.l	#Map_Eggman,4(a1)
0001AB2E 337C 0400 0002             		move.w	#$400,2(a1)
0001AB34 137C 0004 0001             		move.b	#4,1(a1)
0001AB3A 137C 0020 0019             		move.b	#$20,$19(a1)
0001AB40 2348 0034                  		move.l	a0,$34(a1)
0001AB44 51C9 FFB2                  		dbf	d1,Obj75_Loop	; repeat sequence 3 more times
0001AB48                            
0001AB48                            Obj75_ShipMain:				; XREF: Obj75_Index
0001AB48 7000                       		moveq	#0,d0
0001AB4A 1028 0025                  		move.b	$25(a0),d0
0001AB4E 323B 0000                  		move.w	Obj75_ShipIndex(pc,d0.w),d1
0001AB52 4EBB 1000                  		jsr	Obj75_ShipIndex(pc,d1.w)
0001AB56 43F9 0001 967E             		lea	(Ani_Eggman).l,a1
0001AB5C 4EB9 0000 B21C             		jsr	AnimateSprite
0001AB62 7003                       		moveq	#3,d0
0001AB64 C028 0022                  		and.b	$22(a0),d0
0001AB68 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001AB6E 8128 0001                  		or.b	d0,1(a0)
0001AB72 4EF9 0000 E10A             		jmp	DisplaySprite
0001AB78                            ; ===========================================================================
0001AB78 0000 0000                  Obj75_ShipIndex:dc.w loc_191CC-Obj75_ShipIndex,	loc_19270-Obj75_ShipIndex
0001AB7C 0000 0000                  		dc.w loc_192EC-Obj75_ShipIndex,	loc_19474-Obj75_ShipIndex
0001AB80 0000 0000                  		dc.w loc_194AC-Obj75_ShipIndex,	loc_194F2-Obj75_ShipIndex
0001AB84                            ; ===========================================================================
0001AB84                            
0001AB84                            loc_191CC:				; XREF: Obj75_ShipIndex
0001AB84 317C FF00 0010             		move.w	#-$100,$10(a0)
0001AB8A 0C68 2D38 0030             		cmpi.w	#$2D38,$30(a0)
0001AB90 6400                       		bcc.s	loc_191DE
0001AB92 5428 0025                  		addq.b	#2,$25(a0)
0001AB96                            
0001AB96                            loc_191DE:
0001AB96 1028 003F                  		move.b	$3F(a0),d0
0001AB9A 5428 003F                  		addq.b	#2,$3F(a0)
0001AB9E 4EB9 0000 33D4             		jsr	(CalcSine).l
0001ABA4 E440                       		asr.w	#2,d0
0001ABA6 3140 0012                  		move.w	d0,$12(a0)
0001ABAA                            
0001ABAA                            loc_191F2:
0001ABAA 6100 E6C2                  		bsr.w	BossMove
0001ABAE 3168 0038 000C             		move.w	$38(a0),$C(a0)
0001ABB4 3168 0030 0008             		move.w	$30(a0),8(a0)
0001ABBA                            
0001ABBA                            loc_19202:
0001ABBA 3028 0008                  		move.w	8(a0),d0
0001ABBE 0440 2C00                  		subi.w	#$2C00,d0
0001ABC2 EA48                       		lsr.w	#5,d0
0001ABC4 1140 0034                  		move.b	d0,$34(a0)
0001ABC8 0C28 0006 0025             		cmpi.b	#6,$25(a0)
0001ABCE 6400                       		bcc.s	locret_19256
0001ABD0 4A28 0022                  		tst.b	$22(a0)
0001ABD4 6B00                       		bmi.s	loc_19258
0001ABD6 4A28 0020                  		tst.b	$20(a0)
0001ABDA 6600                       		bne.s	locret_19256
0001ABDC 4A28 003E                  		tst.b	$3E(a0)
0001ABE0 6600                       		bne.s	loc_1923A
0001ABE2 117C 0020 003E             		move.b	#$20,$3E(a0)
0001ABE8 303C 00AC                  		move.w	#$AC,d0
0001ABEC 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001ABF2                            
0001ABF2                            loc_1923A:
0001ABF2 43F8 FB22                  		lea	($FFFFFB22).w,a1
0001ABF6 7000                       		moveq	#0,d0
0001ABF8 4A51                       		tst.w	(a1)
0001ABFA 6600                       		bne.s	loc_19248
0001ABFC 303C 0EEE                  		move.w	#$EEE,d0
0001AC00                            
0001AC00                            loc_19248:
0001AC00 3280                       		move.w	d0,(a1)
0001AC02 5328 003E                  		subq.b	#1,$3E(a0)
0001AC06 6600                       		bne.s	locret_19256
0001AC08 117C 000F 0020             		move.b	#$F,$20(a0)
0001AC0E                            
0001AC0E                            locret_19256:
0001AC0E 4E75                       		rts	
0001AC10                            ; ===========================================================================
0001AC10                            
0001AC10                            loc_19258:				; XREF: loc_19202
0001AC10 7064                       		moveq	#100,d0
0001AC12 6100 0000                  		bsr.w	AddPoints
0001AC16 117C 0006 0025             		move.b	#6,$25(a0)
0001AC1C 317C 00B4 003C             		move.w	#$B4,$3C(a0)
0001AC22 4268 0010                  		clr.w	$10(a0)
0001AC26 4E75                       		rts	
0001AC28                            ; ===========================================================================
0001AC28                            
0001AC28                            loc_19270:				; XREF: Obj75_ShipIndex
0001AC28 3028 0030                  		move.w	$30(a0),d0
0001AC2C 317C 0140 0010             		move.w	#$140,$10(a0)
0001AC32 0828 0000 0022             		btst	#0,$22(a0)
0001AC38 6600                       		bne.s	loc_1928E
0001AC3A 4468 0010                  		neg.w	$10(a0)
0001AC3E 0C40 2C08                  		cmpi.w	#$2C08,d0
0001AC42 6E00                       		bgt.s	loc_1929E
0001AC44 6000                       		bra.s	loc_19294
0001AC46                            ; ===========================================================================
0001AC46                            
0001AC46                            loc_1928E:
0001AC46 0C40 2D38                  		cmpi.w	#$2D38,d0
0001AC4A 6D00                       		blt.s	loc_1929E
0001AC4C                            
0001AC4C                            loc_19294:
0001AC4C 0868 0000 0022             		bchg	#0,$22(a0)
0001AC52 4228 003D                  		clr.b	$3D(a0)
0001AC56                            
0001AC56                            loc_1929E:
0001AC56 0440 2C10                  		subi.w	#$2C10,d0
0001AC5A 0240 001F                  		andi.w	#$1F,d0
0001AC5E 0440 001F                  		subi.w	#$1F,d0
0001AC62 6A00                       		bpl.s	loc_192AE
0001AC64 4440                       		neg.w	d0
0001AC66                            
0001AC66                            loc_192AE:
0001AC66 5340                       		subq.w	#1,d0
0001AC68 6E00                       		bgt.s	loc_192E8
0001AC6A 4A28 003D                  		tst.b	$3D(a0)
0001AC6E 6600                       		bne.s	loc_192E8
0001AC70 3238 D008                  		move.w	($FFFFD008).w,d1
0001AC74 0441 2C00                  		subi.w	#$2C00,d1
0001AC78 EA41                       		asr.w	#5,d1
0001AC7A B228 0034                  		cmp.b	$34(a0),d1
0001AC7E 6600                       		bne.s	loc_192E8
0001AC80 7000                       		moveq	#0,d0
0001AC82 1028 0034                  		move.b	$34(a0),d0
0001AC86 EB40                       		asl.w	#5,d0
0001AC88 0640 2C10                  		addi.w	#$2C10,d0
0001AC8C 3140 0030                  		move.w	d0,$30(a0)
0001AC90 6100 0000                  		bsr.w	Obj75_FindBlocks
0001AC94 5428 0025                  		addq.b	#2,$25(a0)
0001AC98 4268 0028                  		clr.w	$28(a0)
0001AC9C 4268 0010                  		clr.w	$10(a0)
0001ACA0                            
0001ACA0                            loc_192E8:
0001ACA0 6000 FEF4                  		bra.w	loc_191DE
0001ACA4                            ; ===========================================================================
0001ACA4                            
0001ACA4                            loc_192EC:				; XREF: Obj75_ShipIndex
0001ACA4 7000                       		moveq	#0,d0
0001ACA6 1028 0028                  		move.b	$28(a0),d0
0001ACAA 303B 0000                  		move.w	off_192FA(pc,d0.w),d0
0001ACAE 4EFB 0000                  		jmp	off_192FA(pc,d0.w)
0001ACB2                            ; ===========================================================================
0001ACB2 0000                       off_192FA:	dc.w loc_19302-off_192FA
0001ACB4 0000                       		dc.w loc_19348-off_192FA
0001ACB6 0000                       		dc.w loc_1938E-off_192FA
0001ACB8 0000                       		dc.w loc_193D0-off_192FA
0001ACBA                            ; ===========================================================================
0001ACBA                            
0001ACBA                            loc_19302:				; XREF: off_192FA
0001ACBA 317C 0180 0012             		move.w	#$180,$12(a0)
0001ACC0 3028 0038                  		move.w	$38(a0),d0
0001ACC4 0C40 0556                  		cmpi.w	#$556,d0
0001ACC8 6500                       		bcs.s	loc_19344
0001ACCA 317C 0556 0038             		move.w	#$556,$38(a0)
0001ACD0 4268 003C                  		clr.w	$3C(a0)
0001ACD4 70FF                       		moveq	#-1,d0
0001ACD6 3028 0036                  		move.w	$36(a0),d0
0001ACDA 6700                       		beq.s	loc_1933C
0001ACDC 2240                       		movea.l	d0,a1
0001ACDE 137C 00FF 0029             		move.b	#-1,$29(a1)
0001ACE4 117C 00FF 0029             		move.b	#-1,$29(a0)
0001ACEA 2348 0034                  		move.l	a0,$34(a1)
0001ACEE 317C 0032 003C             		move.w	#$32,$3C(a0)
0001ACF4                            
0001ACF4                            loc_1933C:
0001ACF4 4268 0012                  		clr.w	$12(a0)
0001ACF8 5428 0028                  		addq.b	#2,$28(a0)
0001ACFC                            
0001ACFC                            loc_19344:
0001ACFC 6000 FEAC                  		bra.w	loc_191F2
0001AD00                            ; ===========================================================================
0001AD00                            
0001AD00                            loc_19348:				; XREF: off_192FA
0001AD00 5368 003C                  		subq.w	#1,$3C(a0)
0001AD04 6A00                       		bpl.s	loc_19366
0001AD06 5428 0028                  		addq.b	#2,$28(a0)
0001AD0A 317C F800 0012             		move.w	#-$800,$12(a0)
0001AD10 4A68 0036                  		tst.w	$36(a0)
0001AD14 6600                       		bne.s	loc_19362
0001AD16 E0E8 0012                  		asr	$12(a0)
0001AD1A                            
0001AD1A                            loc_19362:
0001AD1A 7000                       		moveq	#0,d0
0001AD1C 6000                       		bra.s	loc_1937C
0001AD1E                            ; ===========================================================================
0001AD1E                            
0001AD1E                            loc_19366:
0001AD1E 7000                       		moveq	#0,d0
0001AD20 0C68 001E 003C             		cmpi.w	#$1E,$3C(a0)
0001AD26 6E00                       		bgt.s	loc_1937C
0001AD28 7002                       		moveq	#2,d0
0001AD2A 0828 0001 003D             		btst	#1,$3D(a0)
0001AD30 6700                       		beq.s	loc_1937C
0001AD32 4440                       		neg.w	d0
0001AD34                            
0001AD34                            loc_1937C:
0001AD34 D068 0038                  		add.w	$38(a0),d0
0001AD38 3140 000C                  		move.w	d0,$C(a0)
0001AD3C 3168 0030 0008             		move.w	$30(a0),8(a0)
0001AD42 6000 FE76                  		bra.w	loc_19202
0001AD46                            ; ===========================================================================
0001AD46                            
0001AD46                            loc_1938E:				; XREF: off_192FA
0001AD46 303C 04DA                  		move.w	#$4DA,d0
0001AD4A 4A68 0036                  		tst.w	$36(a0)
0001AD4E 6700                       		beq.s	loc_1939C
0001AD50 0440 0018                  		subi.w	#$18,d0
0001AD54                            
0001AD54                            loc_1939C:
0001AD54 B068 0038                  		cmp.w	$38(a0),d0
0001AD58 6D00                       		blt.s	loc_193BE
0001AD5A 317C 0008 003C             		move.w	#8,$3C(a0)
0001AD60 4A68 0036                  		tst.w	$36(a0)
0001AD64 6700                       		beq.s	loc_193B4
0001AD66 317C 002D 003C             		move.w	#$2D,$3C(a0)
0001AD6C                            
0001AD6C                            loc_193B4:
0001AD6C 5428 0028                  		addq.b	#2,$28(a0)
0001AD70 4268 0012                  		clr.w	$12(a0)
0001AD74 6000                       		bra.s	loc_193CC
0001AD76                            ; ===========================================================================
0001AD76                            
0001AD76                            loc_193BE:
0001AD76 0C68 FFC0 0012             		cmpi.w	#-$40,$12(a0)
0001AD7C 6C00                       		bge.s	loc_193CC
0001AD7E 0668 000C 0012             		addi.w	#$C,$12(a0)
0001AD84                            
0001AD84                            loc_193CC:
0001AD84 6000 FE24                  		bra.w	loc_191F2
0001AD88                            ; ===========================================================================
0001AD88                            
0001AD88                            loc_193D0:				; XREF: off_192FA
0001AD88 5368 003C                  		subq.w	#1,$3C(a0)
0001AD8C 6E00                       		bgt.s	loc_19406
0001AD8E 6B00                       		bmi.s	loc_193EE
0001AD90 70FF                       		moveq	#-1,d0
0001AD92 3028 0036                  		move.w	$36(a0),d0
0001AD96 6700                       		beq.s	loc_193E8
0001AD98 2240                       		movea.l	d0,a1
0001AD9A 137C 000A 0029             		move.b	#$A,$29(a1)
0001ADA0                            
0001ADA0                            loc_193E8:
0001ADA0 4268 0036                  		clr.w	$36(a0)
0001ADA4 6000                       		bra.s	loc_19406
0001ADA6                            ; ===========================================================================
0001ADA6                            
0001ADA6                            loc_193EE:
0001ADA6 0C68 FFE2 003C             		cmpi.w	#-$1E,$3C(a0)
0001ADAC 6600                       		bne.s	loc_19406
0001ADAE 4228 0029                  		clr.b	$29(a0)
0001ADB2 5528 0025                  		subq.b	#2,$25(a0)
0001ADB6 117C 00FF 003D             		move.b	#-1,$3D(a0)
0001ADBC 6000                       		bra.s	loc_19446
0001ADBE                            ; ===========================================================================
0001ADBE                            
0001ADBE                            loc_19406:
0001ADBE 7001                       		moveq	#1,d0
0001ADC0 4A68 0036                  		tst.w	$36(a0)
0001ADC4 6700                       		beq.s	loc_19410
0001ADC6 7002                       		moveq	#2,d0
0001ADC8                            
0001ADC8                            loc_19410:
0001ADC8 0C68 04DA 0038             		cmpi.w	#$4DA,$38(a0)
0001ADCE 6700                       		beq.s	loc_19424
0001ADD0 6D00                       		blt.s	loc_1941C
0001ADD2 4440                       		neg.w	d0
0001ADD4                            
0001ADD4                            loc_1941C:
0001ADD4 4A68 0036                  		tst.w	$36(a0)
0001ADD8 D168 0038                  		add.w	d0,$38(a0)
0001ADDC                            
0001ADDC                            loc_19424:
0001ADDC 7000                       		moveq	#0,d0
0001ADDE 4A68 0036                  		tst.w	$36(a0)
0001ADE2 6700                       		beq.s	loc_19438
0001ADE4 7002                       		moveq	#2,d0
0001ADE6 0828 0000 003D             		btst	#0,$3D(a0)
0001ADEC 6700                       		beq.s	loc_19438
0001ADEE 4440                       		neg.w	d0
0001ADF0                            
0001ADF0                            loc_19438:
0001ADF0 D068 0038                  		add.w	$38(a0),d0
0001ADF4 3140 000C                  		move.w	d0,$C(a0)
0001ADF8 3168 0030 0008             		move.w	$30(a0),8(a0)
0001ADFE                            
0001ADFE                            loc_19446:
0001ADFE 6000 FDBA                  		bra.w	loc_19202
0001AE02                            
0001AE02                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001AE02                            
0001AE02                            
0001AE02                            Obj75_FindBlocks:			; XREF: loc_192AE
0001AE02 4268 0036                  		clr.w	$36(a0)
0001AE06 43F8 D040                  		lea	($FFFFD040).w,a1
0001AE0A 703E                       		moveq	#$3E,d0
0001AE0C 7276                       		moveq	#$76,d1
0001AE0E 1428 0034                  		move.b	$34(a0),d2
0001AE12                            
0001AE12                            Obj75_FindLoop:
0001AE12 B211                       		cmp.b	(a1),d1		; is object a SYZ boss block?
0001AE14 6600                       		bne.s	loc_1946A	; if not, branch
0001AE16 B429 0028                  		cmp.b	$28(a1),d2
0001AE1A 6600                       		bne.s	loc_1946A
0001AE1C 3149 0036                  		move.w	a1,$36(a0)
0001AE20 6000                       		bra.s	locret_19472
0001AE22                            ; ===========================================================================
0001AE22                            
0001AE22                            loc_1946A:
0001AE22 43E9 0040                  		lea	$40(a1),a1	; next object RAM entry
0001AE26 51C8 FFEA                  		dbf	d0,Obj75_FindLoop
0001AE2A                            
0001AE2A                            locret_19472:
0001AE2A 4E75                       		rts	
0001AE2C                            ; End of function Obj75_FindBlocks
0001AE2C                            
0001AE2C                            ; ===========================================================================
0001AE2C                            
0001AE2C                            loc_19474:				; XREF: Obj75_ShipIndex
0001AE2C 5368 003C                  		subq.w	#1,$3C(a0)
0001AE30 6B00                       		bmi.s	loc_1947E
0001AE32 6000 E3F8                  		bra.w	BossDefeated
0001AE36                            ; ===========================================================================
0001AE36                            
0001AE36                            loc_1947E:
0001AE36 5428 0025                  		addq.b	#2,$25(a0)
0001AE3A 4268 0012                  		clr.w	$12(a0)
0001AE3E 08E8 0000 0022             		bset	#0,$22(a0)
0001AE44 08A8 0007 0022             		bclr	#7,$22(a0)
0001AE4A 4268 0010                  		clr.w	$10(a0)
0001AE4E 317C FFFF 003C             		move.w	#-1,$3C(a0)
0001AE54 4A38 F7A7                  		tst.b	($FFFFF7A7).w
0001AE58 6600                       		bne.s	loc_194A8
0001AE5A 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
0001AE60                            
0001AE60                            loc_194A8:
0001AE60 6000 FD58                  		bra.w	loc_19202
0001AE64                            ; ===========================================================================
0001AE64                            
0001AE64                            loc_194AC:				; XREF: Obj75_ShipIndex
0001AE64 5268 003C                  		addq.w	#1,$3C(a0)
0001AE68 6700                       		beq.s	loc_194BC
0001AE6A 6A00                       		bpl.s	loc_194C2
0001AE6C 0668 0018 0012             		addi.w	#$18,$12(a0)
0001AE72 6000                       		bra.s	loc_194EE
0001AE74                            ; ===========================================================================
0001AE74                            
0001AE74                            loc_194BC:
0001AE74 4268 0012                  		clr.w	$12(a0)
0001AE78 6000                       		bra.s	loc_194EE
0001AE7A                            ; ===========================================================================
0001AE7A                            
0001AE7A                            loc_194C2:
0001AE7A 0C68 0020 003C             		cmpi.w	#$20,$3C(a0)
0001AE80 6500                       		bcs.s	loc_194DA
0001AE82 6700                       		beq.s	loc_194E0
0001AE84 0C68 002A 003C             		cmpi.w	#$2A,$3C(a0)
0001AE8A 6500                       		bcs.s	loc_194EE
0001AE8C 5428 0025                  		addq.b	#2,$25(a0)
0001AE90 6000                       		bra.s	loc_194EE
0001AE92                            ; ===========================================================================
0001AE92                            
0001AE92                            loc_194DA:
0001AE92 5168 0012                  		subq.w	#8,$12(a0)
0001AE96 6000                       		bra.s	loc_194EE
0001AE98                            ; ===========================================================================
0001AE98                            
0001AE98                            loc_194E0:
0001AE98 4268 0012                  		clr.w	$12(a0)
0001AE9C 303C 0085                  		move.w	#$85,d0
0001AEA0 4EB9 0000 1470             		jsr	(PlaySound).l	; play SYZ music
0001AEA6                            
0001AEA6                            loc_194EE:
0001AEA6 6000 FD02                  		bra.w	loc_191F2
0001AEAA                            ; ===========================================================================
0001AEAA                            
0001AEAA                            loc_194F2:				; XREF: Obj75_ShipIndex
0001AEAA 317C 0400 0010             		move.w	#$400,$10(a0)
0001AEB0 317C FFC0 0012             		move.w	#-$40,$12(a0)
0001AEB6 0C78 2D40 F72A             		cmpi.w	#$2D40,($FFFFF72A).w
0001AEBC 6400                       		bcc.s	loc_1950C
0001AEBE 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0001AEC2 6000                       		bra.s	loc_19512
0001AEC4                            ; ===========================================================================
0001AEC4                            
0001AEC4                            loc_1950C:
0001AEC4 4A28 0001                  		tst.b	1(a0)
0001AEC8 6A00                       		bpl.s	Obj75_ShipDelete
0001AECA                            
0001AECA                            loc_19512:
0001AECA 6100 E3A2                  		bsr.w	BossMove
0001AECE 6000 FCC6                  		bra.w	loc_191DE
0001AED2                            ; ===========================================================================
0001AED2                            
0001AED2                            Obj75_ShipDelete:
0001AED2 4EF9 0000 E146             		jmp	DeleteObject
0001AED8                            ; ===========================================================================
0001AED8                            
0001AED8                            Obj75_FaceMain:				; XREF: Obj75_Index
0001AED8 7201                       		moveq	#1,d1
0001AEDA 2268 0034                  		movea.l	$34(a0),a1
0001AEDE 7000                       		moveq	#0,d0
0001AEE0 1029 0025                  		move.b	$25(a1),d0
0001AEE4 303B 0000                  		move.w	off_19546(pc,d0.w),d0
0001AEE8 4EBB 0000                  		jsr	off_19546(pc,d0.w)
0001AEEC 1141 001C                  		move.b	d1,$1C(a0)
0001AEF0 1010                       		move.b	(a0),d0
0001AEF2 B011                       		cmp.b	(a1),d0
0001AEF4 6600                       		bne.s	Obj75_FaceDelete
0001AEF6 6000                       		bra.s	loc_195BE
0001AEF8                            ; ===========================================================================
0001AEF8                            
0001AEF8                            Obj75_FaceDelete:
0001AEF8 4EF9 0000 E146             		jmp	DeleteObject
0001AEFE                            ; ===========================================================================
0001AEFE 0000 0000                  off_19546:	dc.w loc_19574-off_19546, loc_19574-off_19546
0001AF02 0000 0000                  		dc.w loc_1955A-off_19546, loc_19552-off_19546
0001AF06 0000 0000                  		dc.w loc_19552-off_19546, loc_19556-off_19546
0001AF0A                            ; ===========================================================================
0001AF0A                            
0001AF0A                            loc_19552:				; XREF: off_19546
0001AF0A 720A                       		moveq	#$A,d1
0001AF0C 4E75                       		rts	
0001AF0E                            ; ===========================================================================
0001AF0E                            
0001AF0E                            loc_19556:				; XREF: off_19546
0001AF0E 7206                       		moveq	#6,d1
0001AF10 4E75                       		rts	
0001AF12                            ; ===========================================================================
0001AF12                            
0001AF12                            loc_1955A:				; XREF: off_19546
0001AF12 7000                       		moveq	#0,d0
0001AF14 1029 0028                  		move.b	$28(a1),d0
0001AF18 303B 0000                  		move.w	off_19568(pc,d0.w),d0
0001AF1C 4EFB 0000                  		jmp	off_19568(pc,d0.w)
0001AF20                            ; ===========================================================================
0001AF20 0000 0000                  off_19568:	dc.w loc_19570-off_19568, loc_19572-off_19568
0001AF24 0000 0000                  		dc.w loc_19570-off_19568, loc_19570-off_19568
0001AF28                            ; ===========================================================================
0001AF28                            
0001AF28                            loc_19570:				; XREF: off_19568
0001AF28 6000                       		bra.s	loc_19574
0001AF2A                            ; ===========================================================================
0001AF2A                            
0001AF2A                            loc_19572:				; XREF: off_19568
0001AF2A 7206                       		moveq	#6,d1
0001AF2C                            
0001AF2C                            loc_19574:				; XREF: off_19546
0001AF2C 4A29 0020                  		tst.b	$20(a1)
0001AF30 6600                       		bne.s	loc_1957E
0001AF32 7205                       		moveq	#5,d1
0001AF34 4E75                       		rts	
0001AF36                            ; ===========================================================================
0001AF36                            
0001AF36                            loc_1957E:
0001AF36 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
0001AF3C 6500                       		bcs.s	locret_19588
0001AF3E 7204                       		moveq	#4,d1
0001AF40                            
0001AF40                            locret_19588:
0001AF40 4E75                       		rts	
0001AF42                            ; ===========================================================================
0001AF42                            
0001AF42                            Obj75_FlameMain:			; XREF: Obj75_Index
0001AF42 117C 0007 001C             		move.b	#7,$1C(a0)
0001AF48 2268 0034                  		movea.l	$34(a0),a1
0001AF4C 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
0001AF52 6600                       		bne.s	loc_195AA
0001AF54 117C 000B 001C             		move.b	#$B,$1C(a0)
0001AF5A 4A28 0001                  		tst.b	1(a0)
0001AF5E 6A00                       		bpl.s	Obj75_FlameDelete
0001AF60 6000                       		bra.s	loc_195B6
0001AF62                            ; ===========================================================================
0001AF62                            
0001AF62                            loc_195AA:
0001AF62 4A69 0010                  		tst.w	$10(a1)
0001AF66 6700                       		beq.s	loc_195B6
0001AF68 117C 0008 001C             		move.b	#8,$1C(a0)
0001AF6E                            
0001AF6E                            loc_195B6:
0001AF6E 6000                       		bra.s	loc_195BE
0001AF70                            ; ===========================================================================
0001AF70                            
0001AF70                            Obj75_FlameDelete:
0001AF70 4EF9 0000 E146             		jmp	DeleteObject
0001AF76                            ; ===========================================================================
0001AF76                            
0001AF76                            loc_195BE:
0001AF76 43F9 0001 967E             		lea	(Ani_Eggman).l,a1
0001AF7C 4EB9 0000 B21C             		jsr	AnimateSprite
0001AF82 2268 0034                  		movea.l	$34(a0),a1
0001AF86 3169 0008 0008             		move.w	8(a1),8(a0)
0001AF8C 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001AF92                            
0001AF92                            loc_195DA:
0001AF92 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001AF98 7003                       		moveq	#3,d0
0001AF9A C028 0022                  		and.b	$22(a0),d0
0001AF9E 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001AFA4 8128 0001                  		or.b	d0,1(a0)
0001AFA8 4EF9 0000 E10A             		jmp	DisplaySprite
0001AFAE                            ; ===========================================================================
0001AFAE                            
0001AFAE                            Obj75_SpikeMain:			; XREF: Obj75_Index
0001AFAE 217C 0001 9796 0004        		move.l	#Map_BossItems,4(a0)
0001AFB6 317C 246C 0002             		move.w	#$246C,2(a0)
0001AFBC 117C 0005 001A             		move.b	#5,$1A(a0)
0001AFC2 2268 0034                  		movea.l	$34(a0),a1
0001AFC6 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
0001AFCC 6600                       		bne.s	loc_1961C
0001AFCE 4A28 0001                  		tst.b	1(a0)
0001AFD2 6A00                       		bpl.s	Obj75_SpikeDelete
0001AFD4                            
0001AFD4                            loc_1961C:
0001AFD4 3169 0008 0008             		move.w	8(a1),8(a0)
0001AFDA 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001AFE0 3028 003C                  		move.w	$3C(a0),d0
0001AFE4 0C29 0004 0025             		cmpi.b	#4,$25(a1)
0001AFEA 6600                       		bne.s	loc_19652
0001AFEC 0C29 0006 0028             		cmpi.b	#6,$28(a1)
0001AFF2 6700                       		beq.s	loc_1964C
0001AFF4 4A29 0028                  		tst.b	$28(a1)
0001AFF8 6600                       		bne.s	loc_19658
0001AFFA 0C40 0094                  		cmpi.w	#$94,d0
0001AFFE 6C00                       		bge.s	loc_19658
0001B000 5E40                       		addq.w	#7,d0
0001B002 6000                       		bra.s	loc_19658
0001B004                            ; ===========================================================================
0001B004                            
0001B004                            loc_1964C:
0001B004 4A69 003C                  		tst.w	$3C(a1)
0001B008 6A00                       		bpl.s	loc_19658
0001B00A                            
0001B00A                            loc_19652:
0001B00A 4A40                       		tst.w	d0
0001B00C 6F00                       		ble.s	loc_19658
0001B00E 5B40                       		subq.w	#5,d0
0001B010                            
0001B010                            loc_19658:
0001B010 3140 003C                  		move.w	d0,$3C(a0)
0001B014 E440                       		asr.w	#2,d0
0001B016 D168 000C                  		add.w	d0,$C(a0)
0001B01A 117C 0008 0019             		move.b	#8,$19(a0)
0001B020 117C 000C 0016             		move.b	#$C,$16(a0)
0001B026 4228 0020                  		clr.b	$20(a0)
0001B02A 2268 0034                  		movea.l	$34(a0),a1
0001B02E 4A29 0020                  		tst.b	$20(a1)
0001B032 6700                       		beq.s	loc_19688
0001B034 4A29 0029                  		tst.b	$29(a1)
0001B038 6600                       		bne.s	loc_19688
0001B03A 117C 0084 0020             		move.b	#$84,$20(a0)
0001B040                            
0001B040                            loc_19688:
0001B040 6000 FF50                  		bra.w	loc_195DA
0001B044                            ; ===========================================================================
0001B044                            
0001B044                            Obj75_SpikeDelete:
0001B044 4EF9 0000 E146             		jmp	DeleteObject
0001B04A                            ; ===========================================================================
0001B04A                            ; ---------------------------------------------------------------------------
0001B04A                            ; Object 76 - blocks that Eggman picks up (SYZ)
0001B04A                            ; ---------------------------------------------------------------------------
0001B04A                            
0001B04A                            Obj76:					; XREF: Obj_Index
0001B04A 7000                       		moveq	#0,d0
0001B04C 1028 0024                  		move.b	$24(a0),d0
0001B050 323B 0000                  		move.w	Obj76_Index(pc,d0.w),d1
0001B054 4EFB 1000                  		jmp	Obj76_Index(pc,d1.w)
0001B058                            ; ===========================================================================
0001B058 0000                       Obj76_Index:	dc.w Obj76_Main-Obj76_Index
0001B05A 0000                       		dc.w Obj76_Action-Obj76_Index
0001B05C 0000                       		dc.w loc_19762-Obj76_Index
0001B05E                            ; ===========================================================================
0001B05E                            
0001B05E                            Obj76_Main:				; XREF: Obj76_Index
0001B05E 7800                       		moveq	#0,d4
0001B060 3A3C 2C10                  		move.w	#$2C10,d5
0001B064 7C09                       		moveq	#9,d6
0001B066 43D0                       		lea	(a0),a1
0001B068 6000                       		bra.s	Obj76_MakeBlock
0001B06A                            ; ===========================================================================
0001B06A                            
0001B06A                            Obj76_Loop:
0001B06A 4EB9 0000 E5A0             		jsr	SingleObjLoad
0001B070 6600                       		bne.s	Obj76_ExitLoop
0001B072                            
0001B072                            Obj76_MakeBlock:			; XREF: Obj76_Main
0001B072 12BC 0076                  		move.b	#$76,(a1)
0001B076 237C 0000 0000 0004        		move.l	#Map_obj76,4(a1)
0001B07E 337C 4000 0002             		move.w	#$4000,2(a1)
0001B084 137C 0004 0001             		move.b	#4,1(a1)
0001B08A 137C 0010 0019             		move.b	#$10,$19(a1)
0001B090 137C 0010 0016             		move.b	#$10,$16(a1)
0001B096 137C 0003 0018             		move.b	#3,$18(a1)
0001B09C 3345 0008                  		move.w	d5,8(a1)	; set x-position
0001B0A0 337C 0582 000C             		move.w	#$582,$C(a1)
0001B0A6 3344 0028                  		move.w	d4,$28(a1)
0001B0AA 0644 0101                  		addi.w	#$101,d4
0001B0AE 0645 0020                  		addi.w	#$20,d5		; add $20 to next x-position
0001B0B2 5429 0024                  		addq.b	#2,$24(a1)
0001B0B6 51CE FFB2                  		dbf	d6,Obj76_Loop	; repeat sequence 9 more times
0001B0BA                            
0001B0BA                            Obj76_ExitLoop:
0001B0BA 4E75                       		rts	
0001B0BC                            ; ===========================================================================
0001B0BC                            
0001B0BC                            Obj76_Action:				; XREF: Obj76_Index
0001B0BC 1028 0029                  		move.b	$29(a0),d0
0001B0C0 B028 0028                  		cmp.b	$28(a0),d0
0001B0C4 6700                       		beq.s	Obj76_Solid
0001B0C6 4A00                       		tst.b	d0
0001B0C8 6B00                       		bmi.s	loc_19718
0001B0CA                            
0001B0CA                            loc_19712:
0001B0CA 6100 0000                  		bsr.w	Obj76_Break
0001B0CE 6000                       		bra.s	Obj76_Display
0001B0D0                            ; ===========================================================================
0001B0D0                            
0001B0D0                            loc_19718:
0001B0D0 2268 0034                  		movea.l	$34(a0),a1
0001B0D4 4A29 0021                  		tst.b	$21(a1)
0001B0D8 67F0                       		beq.s	loc_19712
0001B0DA 3169 0008 0008             		move.w	8(a1),8(a0)
0001B0E0 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001B0E6 0668 002C 000C             		addi.w	#$2C,$C(a0)
0001B0EC B2C8                       		cmpa.w	a0,a1
0001B0EE 6500                       		bcs.s	Obj76_Display
0001B0F0 3029 0012                  		move.w	$12(a1),d0
0001B0F4 48C0                       		ext.l	d0
0001B0F6 E080                       		asr.l	#8,d0
0001B0F8 D168 000C                  		add.w	d0,$C(a0)
0001B0FC 6000                       		bra.s	Obj76_Display
0001B0FE                            ; ===========================================================================
0001B0FE                            
0001B0FE                            Obj76_Solid:				; XREF: Obj76_Action
0001B0FE 323C 001B                  		move.w	#$1B,d1
0001B102 343C 0010                  		move.w	#$10,d2
0001B106 363C 0011                  		move.w	#$11,d3
0001B10A 3828 0008                  		move.w	8(a0),d4
0001B10E 4EB9 0001 04F4             		jsr	SolidObject
0001B114                            
0001B114                            Obj76_Display:				; XREF: Obj76_Action
0001B114 4EF9 0000 E10A             		jmp	DisplaySprite
0001B11A                            ; ===========================================================================
0001B11A                            
0001B11A                            loc_19762:				; XREF: Obj76_Index
0001B11A 4A28 0001                  		tst.b	1(a0)
0001B11E 6A00                       		bpl.s	Obj76_Delete
0001B120 4EB9 0000 E0B8             		jsr	ObjectFall
0001B126 4EF9 0000 E10A             		jmp	DisplaySprite
0001B12C                            ; ===========================================================================
0001B12C                            
0001B12C                            Obj76_Delete:
0001B12C 4EF9 0000 E146             		jmp	DeleteObject
0001B132                            
0001B132                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B132                            
0001B132                            
0001B132                            Obj76_Break:				; XREF: Obj76_Action
0001B132 49FA 0000                  		lea	Obj76_FragSpeed(pc),a4
0001B136 4BFA 0000                  		lea	Obj76_FragPos(pc),a5
0001B13A 7801                       		moveq	#1,d4
0001B13C 7203                       		moveq	#3,d1
0001B13E 7438                       		moveq	#$38,d2
0001B140 5428 0024                  		addq.b	#2,$24(a0)
0001B144 117C 0008 0019             		move.b	#8,$19(a0)
0001B14A 117C 0008 0016             		move.b	#8,$16(a0)
0001B150 43D0                       		lea	(a0),a1
0001B152 6000                       		bra.s	Obj76_MakeFrag
0001B154                            ; ===========================================================================
0001B154                            
0001B154                            Obj76_LoopFrag:
0001B154 4EB9 0000 E5B6             		jsr	SingleObjLoad2
0001B15A 6600                       		bne.s	loc_197D4
0001B15C                            
0001B15C                            Obj76_MakeFrag:
0001B15C 45D0                       		lea	(a0),a2
0001B15E 47D1                       		lea	(a1),a3
0001B160 7603                       		moveq	#3,d3
0001B162                            
0001B162                            loc_197AA:
0001B162 26DA                       		move.l	(a2)+,(a3)+
0001B164 26DA                       		move.l	(a2)+,(a3)+
0001B166 26DA                       		move.l	(a2)+,(a3)+
0001B168 26DA                       		move.l	(a2)+,(a3)+
0001B16A 51CB FFF6                  		dbf	d3,loc_197AA
0001B16E                            
0001B16E 335C 0010                  		move.w	(a4)+,$10(a1)
0001B172 335C 0012                  		move.w	(a4)+,$12(a1)
0001B176 361D                       		move.w	(a5)+,d3
0001B178 D769 0008                  		add.w	d3,8(a1)
0001B17C 361D                       		move.w	(a5)+,d3
0001B17E D769 000C                  		add.w	d3,$C(a1)
0001B182 1344 001A                  		move.b	d4,$1A(a1)
0001B186 5244                       		addq.w	#1,d4
0001B188 51C9 FFCA                  		dbf	d1,Obj76_LoopFrag ; repeat sequence 3 more times
0001B18C                            
0001B18C                            loc_197D4:
0001B18C 303C 00CB                  		move.w	#$CB,d0
0001B190 4EF9 0000 1476             		jmp	(PlaySound_Special).l ;	play smashing sound
0001B196                            ; End of function Obj76_Break
0001B196                            
0001B196                            ; ===========================================================================
0001B196 FE80 FE00                  Obj76_FragSpeed:dc.w $FE80, $FE00
0001B19A 0180 FE00                  		dc.w $180, $FE00
0001B19E FF00 FF00                  		dc.w $FF00, $FF00
0001B1A2 0100 FF00                  		dc.w $100, $FF00
0001B1A6 FFF8 FFF8                  Obj76_FragPos:	dc.w $FFF8, $FFF8
0001B1AA 0010 0000                  		dc.w $10, 0
0001B1AE 0000 0010                  		dc.w 0,	$10
0001B1B2 0010 0010                  		dc.w $10, $10
0001B1B6                            ; ---------------------------------------------------------------------------
0001B1B6                            ; Sprite mappings - blocks that	Eggman picks up (SYZ)
0001B1B6                            ; ---------------------------------------------------------------------------
0001B1B6                            Map_obj76:
0001B1B6                            	include "_maps\obj76.asm"
0001B1B6                            ; ---------------------------------------------------------------------------
0001B1B6                            ; Sprite mappings - blocks that	Robotnik picks up (SYZ)
0001B1B6                            ; ---------------------------------------------------------------------------
0001B1B6 0000 0000                  		dc.w byte_19808-Map_obj76, byte_19814-Map_obj76
0001B1BA 0000 0000                  		dc.w byte_1981A-Map_obj76, byte_19820-Map_obj76
0001B1BE 0000                       		dc.w byte_19826-Map_obj76
0001B1C0 02                         byte_19808:	dc.b 2
0001B1C1 F00D 0071 F0               		dc.b $F0, $D, 0, $71, $F0
0001B1C6 000D 0079 F0               		dc.b 0,	$D, 0, $79, $F0
0001B1CB 00                         		dc.b 0
0001B1CC 01                         byte_19814:	dc.b 1
0001B1CD F805 0071 F8               		dc.b $F8, 5, 0,	$71, $F8
0001B1D2 01                         byte_1981A:	dc.b 1
0001B1D3 F805 0075 F8               		dc.b $F8, 5, 0,	$75, $F8
0001B1D8 01                         byte_19820:	dc.b 1
0001B1D9 F805 0079 F8               		dc.b $F8, 5, 0,	$79, $F8
0001B1DE 01                         byte_19826:	dc.b 1
0001B1DF F805 007D F8               		dc.b $F8, 5, 0,	$7D, $F8
0001B1E4                            		even
0001B1E4                            		even
0001B1E4                            
0001B1E4                            ; ===========================================================================
0001B1E4                            
0001B1E4                            loc_1982C:				; XREF: loc_19C62; loc_19C80
0001B1E4 4EF9 0000 E146             		jmp	DeleteObject
0001B1EA                            ; ===========================================================================
0001B1EA                            ; ---------------------------------------------------------------------------
0001B1EA                            ; Object 82 - Eggman (SBZ2)
0001B1EA                            ; ---------------------------------------------------------------------------
0001B1EA                            
0001B1EA                            Obj82:					; XREF: Obj_Index
0001B1EA 7000                       		moveq	#0,d0
0001B1EC 1028 0024                  		move.b	$24(a0),d0
0001B1F0 323B 0000                  		move.w	Obj82_Index(pc,d0.w),d1
0001B1F4 4EFB 1000                  		jmp	Obj82_Index(pc,d1.w)
0001B1F8                            ; ===========================================================================
0001B1F8 0000                       Obj82_Index:	dc.w Obj82_Main-Obj82_Index
0001B1FA 0000                       		dc.w Obj82_Eggman-Obj82_Index
0001B1FC 0000                       		dc.w Obj82_Switch-Obj82_Index
0001B1FE                            
0001B1FE 0200 03                    Obj82_ObjData:	dc.b 2,	0, 3		; routine number, animation, priority
0001B201 0400 03                    		dc.b 4,	0, 3
0001B204                            ; ===========================================================================
0001B204                            
0001B204                            Obj82_Main:				; XREF: Obj82_Index
0001B204 45FA FFF8                  		lea	Obj82_ObjData(pc),a2
0001B208 317C 2160 0008             		move.w	#$2160,8(a0)
0001B20E 317C 05A4 000C             		move.w	#$5A4,$C(a0)
0001B214 117C 000F 0020             		move.b	#$F,$20(a0)
0001B21A 117C 0010 0021             		move.b	#$10,$21(a0)
0001B220 08A8 0000 0022             		bclr	#0,$22(a0)
0001B226 4228 0025                  		clr.b	$25(a0)
0001B22A 115A 0024                  		move.b	(a2)+,$24(a0)
0001B22E 115A 001C                  		move.b	(a2)+,$1C(a0)
0001B232 115A 0018                  		move.b	(a2)+,$18(a0)
0001B236 217C 0000 0000 0004        		move.l	#Map_obj82,4(a0)
0001B23E 317C 0400 0002             		move.w	#$400,2(a0)
0001B244 117C 0004 0001             		move.b	#4,1(a0)
0001B24A 08E8 0007 0001             		bset	#7,1(a0)
0001B250 117C 0020 0019             		move.b	#$20,$19(a0)
0001B256 4EB9 0000 E5B6             		jsr	SingleObjLoad2
0001B25C 6600                       		bne.s	Obj82_Eggman
0001B25E 2348 0034                  		move.l	a0,$34(a1)
0001B262 12BC 0082                  		move.b	#$82,(a1)	; load switch object
0001B266 337C 2130 0008             		move.w	#$2130,8(a1)
0001B26C 337C 05BC 000C             		move.w	#$5BC,$C(a1)
0001B272 4228 0025                  		clr.b	$25(a0)
0001B276 135A 0024                  		move.b	(a2)+,$24(a1)
0001B27A 135A 001C                  		move.b	(a2)+,$1C(a1)
0001B27E 135A 0018                  		move.b	(a2)+,$18(a1)
0001B282 237C 0000 C9A4 0004        		move.l	#Map_obj32,4(a1)
0001B28A 337C 04A4 0002             		move.w	#$4A4,2(a1)
0001B290 137C 0004 0001             		move.b	#4,1(a1)
0001B296 08E9 0007 0001             		bset	#7,1(a1)
0001B29C 137C 0010 0019             		move.b	#$10,$19(a1)
0001B2A2 137C 0000 001A             		move.b	#0,$1A(a1)
0001B2A8                            
0001B2A8                            Obj82_Eggman:				; XREF: Obj82_Index
0001B2A8 7000                       		moveq	#0,d0
0001B2AA 1028 0025                  		move.b	$25(a0),d0
0001B2AE 323B 0000                  		move.w	Obj82_EggIndex(pc,d0.w),d1
0001B2B2 4EBB 1000                  		jsr	Obj82_EggIndex(pc,d1.w)
0001B2B6 43FA 0000                  		lea	Ani_obj82(pc),a1
0001B2BA 4EB9 0000 B21C             		jsr	AnimateSprite
0001B2C0 4EF9 0000 E10A             		jmp	DisplaySprite
0001B2C6                            ; ===========================================================================
0001B2C6 0000                       Obj82_EggIndex:	dc.w Obj82_ChkSonic-Obj82_EggIndex
0001B2C8 0000                       		dc.w Obj82_PreLeap-Obj82_EggIndex
0001B2CA 0000                       		dc.w Obj82_Leap-Obj82_EggIndex
0001B2CC 0000                       		dc.w loc_19934-Obj82_EggIndex
0001B2CE                            ; ===========================================================================
0001B2CE                            
0001B2CE                            Obj82_ChkSonic:				; XREF: Obj82_EggIndex
0001B2CE 3028 0008                  		move.w	8(a0),d0
0001B2D2 9078 D008                  		sub.w	($FFFFD008).w,d0
0001B2D6 0C40 0080                  		cmpi.w	#128,d0		; is Sonic within 128 pixels of	Eggman?
0001B2DA 6400                       		bcc.s	loc_19934	; if not, branch
0001B2DC 5428 0025                  		addq.b	#2,$25(a0)
0001B2E0 317C 00B4 003C             		move.w	#180,$3C(a0)	; set delay to 3 seconds
0001B2E6 117C 0001 001C             		move.b	#1,$1C(a0)
0001B2EC                            
0001B2EC                            loc_19934:				; XREF: Obj82_EggIndex
0001B2EC 4EF9 0000 E0E4             		jmp	SpeedToPos
0001B2F2                            ; ===========================================================================
0001B2F2                            
0001B2F2                            Obj82_PreLeap:				; XREF: Obj82_EggIndex
0001B2F2 5368 003C                  		subq.w	#1,$3C(a0)	; subtract 1 from time delay
0001B2F6 6600                       		bne.s	loc_19954	; if time remains, branch
0001B2F8 5428 0025                  		addq.b	#2,$25(a0)
0001B2FC 117C 0002 001C             		move.b	#2,$1C(a0)
0001B302 5868 000C                  		addq.w	#4,$C(a0)
0001B306 317C 000F 003C             		move.w	#15,$3C(a0)
0001B30C                            
0001B30C                            loc_19954:
0001B30C 60DE                       		bra.s	loc_19934
0001B30E                            ; ===========================================================================
0001B30E                            
0001B30E                            Obj82_Leap:				; XREF: Obj82_EggIndex
0001B30E 5368 003C                  		subq.w	#1,$3C(a0)
0001B312 6E00                       		bgt.s	loc_199D0
0001B314 6600                       		bne.s	loc_1996A
0001B316 317C FF04 0010             		move.w	#-$FC,$10(a0)	; make Eggman leap
0001B31C 317C FC40 0012             		move.w	#-$3C0,$12(a0)
0001B322                            
0001B322                            loc_1996A:
0001B322 0C68 2132 0008             		cmpi.w	#$2132,8(a0)
0001B328 6E00                       		bgt.s	loc_19976
0001B32A 4268 0010                  		clr.w	$10(a0)
0001B32E                            
0001B32E                            loc_19976:
0001B32E 0668 0024 0012             		addi.w	#$24,$12(a0)
0001B334 4A68 0012                  		tst.w	$12(a0)
0001B338 6B00                       		bmi.s	Obj82_FindBlocks
0001B33A 0C68 0595 000C             		cmpi.w	#$595,$C(a0)
0001B340 6500                       		bcs.s	Obj82_FindBlocks
0001B342 317C 5357 0028             		move.w	#$5357,$28(a0)
0001B348 0C68 059B 000C             		cmpi.w	#$59B,$C(a0)
0001B34E 6500                       		bcs.s	Obj82_FindBlocks
0001B350 317C 059B 000C             		move.w	#$59B,$C(a0)
0001B356 4268 0012                  		clr.w	$12(a0)
0001B35A                            
0001B35A                            Obj82_FindBlocks:
0001B35A 3028 0010                  		move.w	$10(a0),d0
0001B35E 8068 0012                  		or.w	$12(a0),d0
0001B362 6600                       		bne.s	loc_199D0
0001B364 43F8 D000                  		lea	($FFFFD000).w,a1 ; start at the	first object RAM
0001B368 703E                       		moveq	#$3E,d0
0001B36A 7240                       		moveq	#$40,d1
0001B36C                            
0001B36C                            Obj82_FindLoop:	
0001B36C D2C1                       		adda.w	d1,a1		; jump to next object RAM
0001B36E 0C11 0083                  		cmpi.b	#$83,(a1)	; is object a block? (object $83)
0001B372 57C8 FFF8                  		dbeq	d0,Obj82_FindLoop ; if not, repeat (max	$3E times)
0001B376                            
0001B376 6600                       		bne.s	loc_199D0
0001B378 337C 474F 0028             		move.w	#$474F,$28(a1)	; set block to disintegrate
0001B37E 5428 0025                  		addq.b	#2,$25(a0)
0001B382 117C 0001 001C             		move.b	#1,$1C(a0)
0001B388                            
0001B388                            loc_199D0:
0001B388 6000 FF62                  		bra.w	loc_19934
0001B38C                            ; ===========================================================================
0001B38C                            
0001B38C                            Obj82_Switch:				; XREF: Obj82_Index
0001B38C 7000                       		moveq	#0,d0
0001B38E 1028 0025                  		move.b	$25(a0),d0
0001B392 303B 0000                  		move.w	Obj82_SwIndex(pc,d0.w),d0
0001B396 4EFB 0000                  		jmp	Obj82_SwIndex(pc,d0.w)
0001B39A                            ; ===========================================================================
0001B39A 0000                       Obj82_SwIndex:	dc.w loc_199E6-Obj82_SwIndex
0001B39C 0000                       		dc.w Obj82_SwDisplay-Obj82_SwIndex
0001B39E                            ; ===========================================================================
0001B39E                            
0001B39E                            loc_199E6:				; XREF: Obj82_SwIndex
0001B39E 2268 0034                  		movea.l	$34(a0),a1
0001B3A2 0C69 5357 0028             		cmpi.w	#$5357,$28(a1)
0001B3A8 6600                       		bne.s	Obj82_SwDisplay
0001B3AA 117C 0001 001A             		move.b	#1,$1A(a0)
0001B3B0 5428 0025                  		addq.b	#2,$25(a0)
0001B3B4                            
0001B3B4                            Obj82_SwDisplay:			; XREF: Obj82_SwIndex
0001B3B4 4EF9 0000 E10A             		jmp	DisplaySprite
0001B3BA                            ; ===========================================================================
0001B3BA                            Ani_obj82:
0001B3BA                            	include "_anim\obj82.asm"
0001B3BA                            ; ---------------------------------------------------------------------------
0001B3BA                            ; Animation script - Eggman (SBZ2)
0001B3BA                            ; ---------------------------------------------------------------------------
0001B3BA 0000                       		dc.w byte_19A10-Ani_obj82
0001B3BC 0000                       		dc.w byte_19A14-Ani_obj82
0001B3BE 0000                       		dc.w byte_19A18-Ani_obj82
0001B3C0 0000                       		dc.w byte_19A20-Ani_obj82
0001B3C2 0000                       		dc.w byte_19A24-Ani_obj82
0001B3C4 0000                       		dc.w byte_19A2A-Ani_obj82
0001B3C6 0000                       		dc.w byte_19A30-Ani_obj82
0001B3C8 7E00 FF00                  byte_19A10:	dc.b $7E, 0, $FF, 0
0001B3CC 0601 02FF                  byte_19A14:	dc.b 6,	1, 2, $FF
0001B3D0 0E03 0404 0000 00FF        byte_19A18:	dc.b $E, 3, 4, 4, 0, 0,	0, $FF
0001B3D8 0005 09FF                  byte_19A20:	dc.b 0,	5, 9, $FF
0001B3DC 0607 0408 04FF             byte_19A24:	dc.b 6,	7, 4, 8, 4, $FF
0001B3E2 0F04 0303 FF00             byte_19A2A:	dc.b $F, 4, 3, 3, $FF, 0
0001B3E8 7E06 FF00                  byte_19A30:	dc.b $7E, 6, $FF, 0
0001B3EC                            		even
0001B3EC                            		even
0001B3EC                            
0001B3EC                            ; ---------------------------------------------------------------------------
0001B3EC                            ; Sprite mappings - Eggman (SBZ2)
0001B3EC                            ; ---------------------------------------------------------------------------
0001B3EC                            Map_obj82:
0001B3EC                            	include "_maps\obj82.asm"
0001B3EC                            ; ---------------------------------------------------------------------------
0001B3EC                            ; Sprite mappings - Eggman (SBZ2)
0001B3EC                            ; ---------------------------------------------------------------------------
0001B3EC 0000 0000                  		dc.w byte_19A4A-Map_obj82, byte_19A5A-Map_obj82
0001B3F0 0000 0000                  		dc.w byte_19A70-Map_obj82, byte_19A86-Map_obj82
0001B3F4 0000 0000                  		dc.w byte_19A9C-Map_obj82, byte_19AB2-Map_obj82
0001B3F8 0000 0000                  		dc.w byte_19AC8-Map_obj82, byte_19AEC-Map_obj82
0001B3FC 0000 0000                  		dc.w byte_19B06-Map_obj82, byte_19B26-Map_obj82
0001B400 0000                       		dc.w byte_19B4F-Map_obj82
0001B402 03                         byte_19A4A:	dc.b 3
0001B403 FC00 008F E8               		dc.b $FC, 0, 0,	$8F, $E8
0001B408 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
0001B40D 000F 006F F0               		dc.b 0,	$F, 0, $6F, $F0
0001B412 04                         byte_19A5A:	dc.b 4
0001B413 E80D 000E F0               		dc.b $E8, $D, 0, $E, $F0
0001B418 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
0001B41D 000F 006F F0               		dc.b 0,	$F, 0, $6F, $F0
0001B422 FC00 008F E8               		dc.b $FC, 0, 0,	$8F, $E8
0001B427 00                         		dc.b 0
0001B428 04                         byte_19A70:	dc.b 4
0001B429 E90D 000E F0               		dc.b $E9, $D, 0, $E, $F0
0001B42E E90E 0000 F0               		dc.b $E9, $E, 0, 0, $F0
0001B433 010F 007F F0               		dc.b 1,	$F, 0, $7F, $F0
0001B438 FD00 008F E8               		dc.b $FD, 0, 0,	$8F, $E8
0001B43D 00                         		dc.b 0
0001B43E 04                         byte_19A86:	dc.b 4
0001B43F F40F 0820 F0               		dc.b $F4, $F, 8, $20, $F0
0001B444 F504 0830 10               		dc.b $F5, 4, 8,	$30, $10
0001B449 0809 084E F0               		dc.b 8,	9, 8, $4E, $F0
0001B44E EC0E 0000 F0               		dc.b $EC, $E, 0, 0, $F0
0001B453 00                         		dc.b 0
0001B454 04                         byte_19A9C:	dc.b 4
0001B455 F00F 0820 F0               		dc.b $F0, $F, 8, $20, $F0
0001B45A F104 0830 10               		dc.b $F1, 4, 8,	$30, $10
0001B45F 0806 083E F8               		dc.b 8,	6, 8, $3E, $F8
0001B464 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
0001B469 00                         		dc.b 0
0001B46A 04                         byte_19AB2:	dc.b 4
0001B46B E80D 0016 EC               		dc.b $E8, $D, 0, $16, $EC
0001B470 E801 001E 0C               		dc.b $E8, 1, 0,	$1E, $C
0001B475 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
0001B47A 000F 006F F0               		dc.b 0,	$F, 0, $6F, $F0
0001B47F 00                         		dc.b 0
0001B480 07                         byte_19AC8:	dc.b 7
0001B481 E80D 0016 EC               		dc.b $E8, $D, 0, $16, $EC
0001B486 E801 001E 0C               		dc.b $E8, 1, 0,	$1E, $C
0001B48B 0409 0834 00               		dc.b 4,	9, 8, $34, 0
0001B490 0405 083A E8               		dc.b 4,	5, 8, $3A, $E8
0001B495 F00F 0820 F0               		dc.b $F0, $F, 8, $20, $F0
0001B49A F104 0854 10               		dc.b $F1, 4, 8,	$54, $10
0001B49F F104 0054 E0               		dc.b $F1, 4, 0,	$54, $E0
0001B4A4 05                         byte_19AEC:	dc.b 5
0001B4A5 F00F 0820 F0               		dc.b $F0, $F, 8, $20, $F0
0001B4AA F104 0830 10               		dc.b $F1, 4, 8,	$30, $10
0001B4AF 0409 0834 00               		dc.b 4,	9, 8, $34, 0
0001B4B4 0405 083A E8               		dc.b 4,	5, 8, $3A, $E8
0001B4B9 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
0001B4BE 06                         byte_19B06:	dc.b 6
0001B4BF EE0F 0820 F0               		dc.b $EE, $F, 8, $20, $F0
0001B4C4 EF04 0830 10               		dc.b $EF, 4, 8,	$30, $10
0001B4C9 0905 0844 00               		dc.b 9,	5, 8, $44, 0
0001B4CE 0301 0848 F8               		dc.b 3,	1, 8, $48, $F8
0001B4D3 0B05 084A E8               		dc.b $B, 5, 8, $4A, $E8
0001B4D8 E60E 0000 F0               		dc.b $E6, $E, 0, 0, $F0
0001B4DD 00                         		dc.b 0
0001B4DE 08                         byte_19B26:	dc.b 8
0001B4DF E80D 0016 EC               		dc.b $E8, $D, 0, $16, $EC
0001B4E4 E801 001E 0C               		dc.b $E8, 1, 0,	$1E, $C
0001B4E9 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
0001B4EE 000F 006F F0               		dc.b 0,	$F, 0, $6F, $F0
0001B4F3 E00D 3EF0 F0               		dc.b $E0, $D, $3E, $F0,	$F0
0001B4F8 F00D 3EF0 F0               		dc.b $F0, $D, $3E, $F0,	$F0
0001B4FD 000D 3EF0 F0               		dc.b 0,	$D, $3E, $F0, $F0
0001B502 100D 3EF0 F0               		dc.b $10, $D, $3E, $F0,	$F0
0001B507 03                         byte_19B4F:	dc.b 3
0001B508 EC0D 0056 E4               		dc.b $EC, $D, 0, $56, $E4
0001B50D F408 005E 04               		dc.b $F4, 8, 0,	$5E, 4
0001B512 EC0D 0061 FC               		dc.b $EC, $D, 0, $61, $FC
0001B518 00                         		even
0001B518 00                         		even
0001B518                            
0001B518                            ; ===========================================================================
0001B518                            ; ---------------------------------------------------------------------------
0001B518                            ; Object 83 - blocks that disintegrate Eggman	presses	a switch (SBZ2)
0001B518                            ; ---------------------------------------------------------------------------
0001B518                            
0001B518                            Obj83:					; XREF: Obj_Index
0001B518 7000                       		moveq	#0,d0
0001B51A 1028 0024                  		move.b	$24(a0),d0
0001B51E 323B 0000                  		move.w	Obj83_Index(pc,d0.w),d1
0001B522 4EFB 1000                  		jmp	Obj83_Index(pc,d1.w)
0001B526                            ; ===========================================================================
0001B526 0000                       Obj83_Index:	dc.w Obj83_Main-Obj83_Index
0001B528 0000                       		dc.w Obj83_ChkBreak-Obj83_Index
0001B52A 0000                       		dc.w loc_19C36-Obj83_Index
0001B52C 0000                       		dc.w loc_19C62-Obj83_Index
0001B52E 0000                       		dc.w loc_19C72-Obj83_Index
0001B530 0000                       		dc.w loc_19C80-Obj83_Index
0001B532                            ; ===========================================================================
0001B532                            
0001B532                            Obj83_Main:				; XREF: Obj83_Index
0001B532 317C 2080 0008             		move.w	#$2080,8(a0)
0001B538 317C 05D0 000C             		move.w	#$5D0,$C(a0)
0001B53E 117C 0080 0019             		move.b	#$80,$19(a0)
0001B544 117C 0010 0016             		move.b	#$10,$16(a0)
0001B54A 117C 0004 0001             		move.b	#4,1(a0)
0001B550 08E8 0007 0001             		bset	#7,1(a0)
0001B556 7800                       		moveq	#0,d4
0001B558 3A3C 2010                  		move.w	#$2010,d5
0001B55C 7C07                       		moveq	#7,d6
0001B55E 45E8 0030                  		lea	$30(a0),a2
0001B562                            
0001B562                            Obj83_MakeBlock:
0001B562 4EB9 0000 E5A0             		jsr	SingleObjLoad
0001B568 6600                       		bne.s	Obj83_ExitMake
0001B56A 34C9                       		move.w	a1,(a2)+
0001B56C 12BC 0083                  		move.b	#$83,(a1)	; load block object
0001B570 237C 0000 0000 0004        		move.l	#Map_obj83,4(a1)
0001B578 337C 4518 0002             		move.w	#$4518,2(a1)
0001B57E 137C 0004 0001             		move.b	#4,1(a1)
0001B584 137C 0010 0019             		move.b	#$10,$19(a1)
0001B58A 137C 0010 0016             		move.b	#$10,$16(a1)
0001B590 137C 0003 0018             		move.b	#3,$18(a1)
0001B596 3345 0008                  		move.w	d5,8(a1)	; set X	position
0001B59A 337C 05D0 000C             		move.w	#$5D0,$C(a1)
0001B5A0 0645 0020                  		addi.w	#$20,d5		; add $20 for next X position
0001B5A4 137C 0008 0024             		move.b	#8,$24(a1)
0001B5AA 51CE FFB6                  		dbf	d6,Obj83_MakeBlock ; repeat sequence 7 more times
0001B5AE                            
0001B5AE                            Obj83_ExitMake:
0001B5AE 5428 0024                  		addq.b	#2,$24(a0)
0001B5B2 4E75                       		rts	
0001B5B4                            ; ===========================================================================
0001B5B4                            
0001B5B4                            Obj83_ChkBreak:				; XREF: Obj83_Index
0001B5B4 0C68 474F 0028             		cmpi.w	#$474F,$28(a0)	; is object set	to disintegrate?
0001B5BA 6600                       		bne.s	Obj83_Solid	; if not, branch
0001B5BC 4228 001A                  		clr.b	$1A(a0)
0001B5C0 5428 0024                  		addq.b	#2,$24(a0)	; next subroutine
0001B5C4                            
0001B5C4                            Obj83_Solid:
0001B5C4 7000                       		moveq	#0,d0
0001B5C6 1028 001A                  		move.b	$1A(a0),d0
0001B5CA 4400                       		neg.b	d0
0001B5CC 4880                       		ext.w	d0
0001B5CE 5040                       		addq.w	#8,d0
0001B5D0 E940                       		asl.w	#4,d0
0001B5D2 383C 2100                  		move.w	#$2100,d4
0001B5D6 9840                       		sub.w	d0,d4
0001B5D8 1140 0019                  		move.b	d0,$19(a0)
0001B5DC 3144 0008                  		move.w	d4,8(a0)
0001B5E0 720B                       		moveq	#$B,d1
0001B5E2 D240                       		add.w	d0,d1
0001B5E4 7410                       		moveq	#$10,d2
0001B5E6 7611                       		moveq	#$11,d3
0001B5E8 4EF9 0001 04F4             		jmp	SolidObject
0001B5EE                            ; ===========================================================================
0001B5EE                            
0001B5EE                            loc_19C36:				; XREF: Obj83_Index
0001B5EE 0428 000E 001E             		subi.b	#$E,$1E(a0)
0001B5F4 6400                       		bcc.s	Obj83_Solid2
0001B5F6 70FF                       		moveq	#-1,d0
0001B5F8 1028 001A                  		move.b	$1A(a0),d0
0001B5FC 4880                       		ext.w	d0
0001B5FE D040                       		add.w	d0,d0
0001B600 3030 0030                  		move.w	$30(a0,d0.w),d0
0001B604 2240                       		movea.l	d0,a1
0001B606 337C 474F 0028             		move.w	#$474F,$28(a1)
0001B60C 5228 001A                  		addq.b	#1,$1A(a0)
0001B610 0C28 0008 001A             		cmpi.b	#8,$1A(a0)
0001B616 6700                       		beq.s	loc_19C62
0001B618                            
0001B618                            Obj83_Solid2:
0001B618 60AA                       		bra.s	Obj83_Solid
0001B61A                            ; ===========================================================================
0001B61A                            
0001B61A                            loc_19C62:				; XREF: Obj83_Index
0001B61A 08A8 0003 0022             		bclr	#3,$22(a0)
0001B620 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001B626 6000 FBBC                  		bra.w	loc_1982C
0001B62A                            ; ===========================================================================
0001B62A                            
0001B62A                            loc_19C72:				; XREF: Obj83_Index
0001B62A 0C68 474F 0028             		cmpi.w	#$474F,$28(a0)	; is object set	to disintegrate?
0001B630 6700                       		beq.s	Obj83_Break	; if yes, branch
0001B632 4EF9 0000 E10A             		jmp	DisplaySprite
0001B638                            ; ===========================================================================
0001B638                            
0001B638                            loc_19C80:				; XREF: Obj83_Index
0001B638 4A28 0001                  		tst.b	1(a0)
0001B63C 6A00 FBA6                  		bpl.w	loc_1982C
0001B640 4EB9 0000 E0B8             		jsr	ObjectFall
0001B646 4EF9 0000 E10A             		jmp	DisplaySprite
0001B64C                            ; ===========================================================================
0001B64C                            
0001B64C                            Obj83_Break:				; XREF: loc_19C72
0001B64C 49FA 0000                  		lea	Obj83_FragSpeed(pc),a4
0001B650 4BFA 0000                  		lea	Obj83_FragPos(pc),a5
0001B654 7801                       		moveq	#1,d4
0001B656 7203                       		moveq	#3,d1
0001B658 7438                       		moveq	#$38,d2
0001B65A 5428 0024                  		addq.b	#2,$24(a0)
0001B65E 117C 0008 0019             		move.b	#8,$19(a0)
0001B664 117C 0008 0016             		move.b	#8,$16(a0)
0001B66A 43D0                       		lea	(a0),a1
0001B66C 6000                       		bra.s	Obj83_MakeFrag
0001B66E                            ; ===========================================================================
0001B66E                            
0001B66E                            Obj83_LoopFrag:
0001B66E 4EB9 0000 E5B6             		jsr	SingleObjLoad2
0001B674 6600                       		bne.s	Obj83_BreakSnd
0001B676                            
0001B676                            Obj83_MakeFrag:				; XREF: Obj83_Break
0001B676 45D0                       		lea	(a0),a2
0001B678 47D1                       		lea	(a1),a3
0001B67A 7603                       		moveq	#3,d3
0001B67C                            
0001B67C                            loc_19CC4:
0001B67C 26DA                       		move.l	(a2)+,(a3)+
0001B67E 26DA                       		move.l	(a2)+,(a3)+
0001B680 26DA                       		move.l	(a2)+,(a3)+
0001B682 26DA                       		move.l	(a2)+,(a3)+
0001B684 51CB FFF6                  		dbf	d3,loc_19CC4
0001B688                            
0001B688 335C 0012                  		move.w	(a4)+,$12(a1)
0001B68C 361D                       		move.w	(a5)+,d3
0001B68E D769 0008                  		add.w	d3,8(a1)
0001B692 361D                       		move.w	(a5)+,d3
0001B694 D769 000C                  		add.w	d3,$C(a1)
0001B698 1344 001A                  		move.b	d4,$1A(a1)
0001B69C 5244                       		addq.w	#1,d4
0001B69E 51C9 FFCE                  		dbf	d1,Obj83_LoopFrag ; repeat sequence 3 more times
0001B6A2                            
0001B6A2                            Obj83_BreakSnd:
0001B6A2 303C 00CB                  		move.w	#$CB,d0
0001B6A6 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play smashing sound
0001B6AC 4EF9 0000 E10A             		jmp	DisplaySprite
0001B6B2                            ; ===========================================================================
0001B6B2 0080 0000                  Obj83_FragSpeed:dc.w $80, 0
0001B6B6 0120 00C0                  		dc.w $120, $C0
0001B6BA FFF8 FFF8                  Obj83_FragPos:	dc.w $FFF8, $FFF8
0001B6BE 0010 0000                  		dc.w $10, 0
0001B6C2 0000 0010                  		dc.w 0,	$10
0001B6C6 0010 0010                  		dc.w $10, $10
0001B6CA                            ; ---------------------------------------------------------------------------
0001B6CA                            ; Sprite mappings - blocks that	disintegrate when Eggman presses a switch
0001B6CA                            ; ---------------------------------------------------------------------------
0001B6CA                            Map_obj83:
0001B6CA                            	include "_maps\obj83.asm"
0001B6CA                            ; ---------------------------------------------------------------------------
0001B6CA                            ; Sprite mappings - blocks that	disintegrate when Eggman presses a switch
0001B6CA                            ; ---------------------------------------------------------------------------
0001B6CA 0000 0000                  		dc.w byte_19D1C-Map_obj83, byte_19D22-Map_obj83
0001B6CE 0000 0000                  		dc.w byte_19D2E-Map_obj83, byte_19D3A-Map_obj83
0001B6D2 0000                       		dc.w byte_19D46-Map_obj83
0001B6D4 01                         byte_19D1C:	dc.b 1
0001B6D5 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0001B6DA 02                         byte_19D22:	dc.b 2
0001B6DB F801 0000 F8               		dc.b $F8, 1, 0,	0, $F8
0001B6E0 F801 0004 00               		dc.b $F8, 1, 0,	4, 0
0001B6E5 00                         		dc.b 0
0001B6E6 02                         byte_19D2E:	dc.b 2
0001B6E7 F801 0008 F8               		dc.b $F8, 1, 0,	8, $F8
0001B6EC F801 000C 00               		dc.b $F8, 1, 0,	$C, 0
0001B6F1 00                         		dc.b 0
0001B6F2 02                         byte_19D3A:	dc.b 2
0001B6F3 F801 0002 F8               		dc.b $F8, 1, 0,	2, $F8
0001B6F8 F801 0006 00               		dc.b $F8, 1, 0,	6, 0
0001B6FD 00                         		dc.b 0
0001B6FE 02                         byte_19D46:	dc.b 2
0001B6FF F801 000A F8               		dc.b $F8, 1, 0,	$A, $F8
0001B704 F801 000E 00               		dc.b $F8, 1, 0,	$E, 0
0001B70A 00                         		even
0001B70A 00                         		even
0001B70A                            
0001B70A                            ; ===========================================================================
0001B70A                            ; ---------------------------------------------------------------------------
0001B70A                            ; Object 85 - Eggman (FZ)
0001B70A                            ; ---------------------------------------------------------------------------
0001B70A                            
0001B70A                            Obj85_Delete:
0001B70A 4EF9 0000 E146             		jmp	DeleteObject
0001B710                            ; ===========================================================================
0001B710                            
0001B710                            Obj85:					; XREF: Obj_Index
0001B710 7000                       		moveq	#0,d0
0001B712 1028 0024                  		move.b	$24(a0),d0
0001B716 303B 0000                  		move.w	Obj85_Index(pc,d0.w),d0
0001B71A 4EFB 0000                  		jmp	Obj85_Index(pc,d0.w)
0001B71E                            ; ===========================================================================
0001B71E 0000                       Obj85_Index:	dc.w Obj85_Main-Obj85_Index
0001B720 0000                       		dc.w Obj85_Eggman-Obj85_Index
0001B722 0000                       		dc.w loc_1A38E-Obj85_Index
0001B724 0000                       		dc.w loc_1A346-Obj85_Index
0001B726 0000                       		dc.w loc_1A2C6-Obj85_Index
0001B728 0000                       		dc.w loc_1A3AC-Obj85_Index
0001B72A 0000                       		dc.w loc_1A264-Obj85_Index
0001B72C                            
0001B72C 0100 0100 0470             Obj85_ObjData:	dc.w $100, $100, $470	; X pos, Y pos,	VRAM setting
0001B732 0001 B3EC                  		dc.l Map_obj82		; mappings pointer
0001B736 25B0 0590 0300             		dc.w $25B0, $590, $300
0001B73C 0000 0000                  		dc.l Map_obj84
0001B740 26E0 0596 03A0             		dc.w $26E0, $596, $3A0
0001B746 0000 0000                  		dc.l Map_FZBoss
0001B74A 26E0 0596 0470             		dc.w $26E0, $596, $470
0001B750 0001 B3EC                  		dc.l Map_obj82
0001B754 26E0 0596 0400             		dc.w $26E0, $596, $400
0001B75A 0001 96CE                  		dc.l Map_Eggman
0001B75E 26E0 0596 0400             		dc.w $26E0, $596, $400
0001B764 0001 96CE                  		dc.l Map_Eggman
0001B768                            
0001B768 0200 0420 19               Obj85_ObjData2:	dc.b 2,	0, 4, $20, $19	; routine num, animation, sprite priority, width, height
0001B76D 0400 0112 08               		dc.b 4,	0, 1, $12, 8
0001B772 0600 0300 00               		dc.b 6,	0, 3, 0, 0
0001B777 0800 0300 00               		dc.b 8,	0, 3, 0, 0
0001B77C 0A00 0320 20               		dc.b $A, 0, 3, $20, $20
0001B781 0C00 0300 00               		dc.b $C, 0, 3, 0, 0
0001B786                            ; ===========================================================================
0001B786                            
0001B786                            Obj85_Main:				; XREF: Obj85_Index
0001B786 45FA FFA4                  		lea	Obj85_ObjData(pc),a2
0001B78A 47FA FFDC                  		lea	Obj85_ObjData2(pc),a3
0001B78E 2248                       		movea.l	a0,a1
0001B790 7205                       		moveq	#5,d1
0001B792 6000                       		bra.s	Obj85_LoadBoss
0001B794                            ; ===========================================================================
0001B794                            
0001B794                            Obj85_Loop:
0001B794 4EB9 0000 E5B6             		jsr	SingleObjLoad2
0001B79A 6600                       		bne.s	loc_19E20
0001B79C                            
0001B79C                            Obj85_LoadBoss:				; XREF: Obj85_Main
0001B79C 12BC 0085                  		move.b	#$85,(a1)
0001B7A0 335A 0008                  		move.w	(a2)+,8(a1)
0001B7A4 335A 000C                  		move.w	(a2)+,$C(a1)
0001B7A8 335A 0002                  		move.w	(a2)+,2(a1)
0001B7AC 235A 0004                  		move.l	(a2)+,4(a1)
0001B7B0 135B 0024                  		move.b	(a3)+,$24(a1)
0001B7B4 135B 001C                  		move.b	(a3)+,$1C(a1)
0001B7B8 135B 0018                  		move.b	(a3)+,$18(a1)
0001B7BC 135B 0017                  		move.b	(a3)+,$17(a1)
0001B7C0 135B 0016                  		move.b	(a3)+,$16(a1)
0001B7C4 137C 0004 0001             		move.b	#4,1(a1)
0001B7CA 08E8 0007 0001             		bset	#7,1(a0)
0001B7D0 2348 0034                  		move.l	a0,$34(a1)
0001B7D4 51C9 FFBE                  		dbf	d1,Obj85_Loop
0001B7D8                            
0001B7D8                            loc_19E20:
0001B7D8 45E8 0036                  		lea	$36(a0),a2
0001B7DC 4EB9 0000 E5A0             		jsr	SingleObjLoad
0001B7E2 6600                       		bne.s	loc_19E5A
0001B7E4 12BC 0086                  		move.b	#$86,(a1)	; load energy ball object
0001B7E8 3489                       		move.w	a1,(a2)
0001B7EA 2348 0034                  		move.l	a0,$34(a1)
0001B7EE 45E8 0038                  		lea	$38(a0),a2
0001B7F2 7400                       		moveq	#0,d2
0001B7F4 7203                       		moveq	#3,d1
0001B7F6                            
0001B7F6                            loc_19E3E:
0001B7F6 4EB9 0000 E5B6             		jsr	SingleObjLoad2
0001B7FC 6600                       		bne.s	loc_19E5A
0001B7FE 34C9                       		move.w	a1,(a2)+
0001B800 12BC 0084                  		move.b	#$84,(a1)	; load crushing	cylinder object
0001B804 2348 0034                  		move.l	a0,$34(a1)
0001B808 1342 0028                  		move.b	d2,$28(a1)
0001B80C 5442                       		addq.w	#2,d2
0001B80E 51C9 FFE6                  		dbf	d1,loc_19E3E
0001B812                            
0001B812                            loc_19E5A:
0001B812 317C 0000 0034             		move.w	#0,$34(a0)
0001B818 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
0001B81E 317C FFFF 0030             		move.w	#-1,$30(a0)
0001B824                            
0001B824                            Obj85_Eggman:				; XREF: Obj85_Index
0001B824 7000                       		moveq	#0,d0
0001B826 1028 0034                  		move.b	$34(a0),d0
0001B82A 303B 0000                  		move.w	off_19E80(pc,d0.w),d0
0001B82E 4EBB 0000                  		jsr	off_19E80(pc,d0.w)
0001B832 4EF9 0000 E10A             		jmp	DisplaySprite
0001B838                            ; ===========================================================================
0001B838 0000 0000                  off_19E80:	dc.w loc_19E90-off_19E80, loc_19EA8-off_19E80
0001B83C 0000 0000                  		dc.w loc_19FE6-off_19E80, loc_1A02A-off_19E80
0001B840 0000 0000                  		dc.w loc_1A074-off_19E80, loc_1A112-off_19E80
0001B844 0000 0000                  		dc.w loc_1A192-off_19E80, loc_1A1D4-off_19E80
0001B848                            ; ===========================================================================
0001B848                            
0001B848                            loc_19E90:				; XREF: off_19E80
0001B848 4AB8 F680                  		tst.l	($FFFFF680).w
0001B84C 6600                       		bne.s	loc_19EA2
0001B84E 0C78 2450 F700             		cmpi.w	#$2450,($FFFFF700).w
0001B854 6500                       		bcs.s	loc_19EA2
0001B856 5428 0034                  		addq.b	#2,$34(a0)
0001B85A                            
0001B85A                            loc_19EA2:
0001B85A 52B8 F636                  		addq.l	#1,($FFFFF636).w
0001B85E 4E75                       		rts	
0001B860                            ; ===========================================================================
0001B860                            
0001B860                            loc_19EA8:				; XREF: off_19E80
0001B860 4A68 0030                  		tst.w	$30(a0)
0001B864 6A00                       		bpl.s	loc_19F10
0001B866 4268 0030                  		clr.w	$30(a0)
0001B86A 4EB9 0000 33AE             		jsr	(RandomNumber).l
0001B870 0240 000C                  		andi.w	#$C,d0
0001B874 3200                       		move.w	d0,d1
0001B876 5441                       		addq.w	#2,d1
0001B878 4A80                       		tst.l	d0
0001B87A 6A00                       		bpl.s	loc_19EC6
0001B87C C340                       		exg	d1,d0
0001B87E                            
0001B87E                            loc_19EC6:
0001B87E 43FA 0000                  		lea	word_19FD6(pc),a1
0001B882 3031 0000                  		move.w	(a1,d0.w),d0
0001B886 3231 1000                  		move.w	(a1,d1.w),d1
0001B88A 3140 0030                  		move.w	d0,$30(a0)
0001B88E 74FF                       		moveq	#-1,d2
0001B890 3430 0038                  		move.w	$38(a0,d0.w),d2
0001B894 2242                       		movea.l	d2,a1
0001B896 137C 00FF 0029             		move.b	#-1,$29(a1)
0001B89C 337C FFFF 0030             		move.w	#-1,$30(a1)
0001B8A2 3430 1038                  		move.w	$38(a0,d1.w),d2
0001B8A6 2242                       		movea.l	d2,a1
0001B8A8 137C 0001 0029             		move.b	#1,$29(a1)
0001B8AE 337C 0000 0030             		move.w	#0,$30(a1)
0001B8B4 317C 0001 0032             		move.w	#1,$32(a0)
0001B8BA 4228 0035                  		clr.b	$35(a0)
0001B8BE 303C 00B7                  		move.w	#$B7,d0
0001B8C2 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play rumbling sound
0001B8C8                            
0001B8C8                            loc_19F10:
0001B8C8 4A68 0032                  		tst.w	$32(a0)
0001B8CC 6B00 0000                  		bmi.w	loc_19FA6
0001B8D0 08A8 0000 0022             		bclr	#0,$22(a0)
0001B8D6 3038 D008                  		move.w	($FFFFD008).w,d0
0001B8DA 9068 0008                  		sub.w	8(a0),d0
0001B8DE 6500                       		bcs.s	loc_19F2E
0001B8E0 08E8 0000 0022             		bset	#0,$22(a0)
0001B8E6                            
0001B8E6                            loc_19F2E:
0001B8E6 323C 002B                  		move.w	#$2B,d1
0001B8EA 343C 0014                  		move.w	#$14,d2
0001B8EE 363C 0014                  		move.w	#$14,d3
0001B8F2 3828 0008                  		move.w	8(a0),d4
0001B8F6 4EB9 0001 04F4             		jsr	SolidObject
0001B8FC 4A44                       		tst.w	d4
0001B8FE 6E00                       		bgt.s	loc_19F50
0001B900                            
0001B900                            loc_19F48:
0001B900 4A28 0035                  		tst.b	$35(a0)
0001B904 6600                       		bne.s	loc_19F88
0001B906 6000                       		bra.s	loc_19F96
0001B908                            ; ===========================================================================
0001B908                            
0001B908                            loc_19F50:
0001B908 5E78 F636                  		addq.w	#7,($FFFFF636).w
0001B90C 0C38 0002 D01C             		cmpi.b	#2,($FFFFD01C).w
0001B912 66EC                       		bne.s	loc_19F48
0001B914 303C 0300                  		move.w	#$300,d0
0001B918 0828 0000 0022             		btst	#0,$22(a0)
0001B91E 6600                       		bne.s	loc_19F6A
0001B920 4440                       		neg.w	d0
0001B922                            
0001B922                            loc_19F6A:
0001B922 31C0 D010                  		move.w	d0,($FFFFD010).w
0001B926 4A28 0035                  		tst.b	$35(a0)
0001B92A 6600                       		bne.s	loc_19F88
0001B92C 5328 0021                  		subq.b	#1,$21(a0)
0001B930 117C 0064 0035             		move.b	#$64,$35(a0)
0001B936 303C 00AC                  		move.w	#$AC,d0
0001B93A 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001B940                            
0001B940                            loc_19F88:
0001B940 5328 0035                  		subq.b	#1,$35(a0)
0001B944 6700                       		beq.s	loc_19F96
0001B946 117C 0003 001C             		move.b	#3,$1C(a0)
0001B94C 6000                       		bra.s	loc_19F9C
0001B94E                            ; ===========================================================================
0001B94E                            
0001B94E                            loc_19F96:
0001B94E 117C 0001 001C             		move.b	#1,$1C(a0)
0001B954                            
0001B954                            loc_19F9C:
0001B954 43FA FA64                  		lea	Ani_obj82(pc),a1
0001B958 4EF9 0000 B21C             		jmp	AnimateSprite
0001B95E                            ; ===========================================================================
0001B95E                            
0001B95E                            loc_19FA6:
0001B95E 4A28 0021                  		tst.b	$21(a0)
0001B962 6700                       		beq.s	loc_19FBC
0001B964 5428 0034                  		addq.b	#2,$34(a0)
0001B968 317C FFFF 0030             		move.w	#-1,$30(a0)
0001B96E 4268 0032                  		clr.w	$32(a0)
0001B972 4E75                       		rts	
0001B974                            ; ===========================================================================
0001B974                            
0001B974                            loc_19FBC:
0001B974 117C 0006 0034             		move.b	#6,$34(a0)
0001B97A 317C 25C0 0008             		move.w	#$25C0,8(a0)
0001B980 317C 053C 000C             		move.w	#$53C,$C(a0)
0001B986 117C 0014 0016             		move.b	#$14,$16(a0)
0001B98C 4E75                       		rts	
0001B98E                            ; ===========================================================================
0001B98E 0000 0002 0002 0004 0004+  word_19FD6:	dc.w 0,	2, 2, 4, 4, 6, 6, 0
0001B99E                            ; ===========================================================================
0001B99E                            
0001B99E                            loc_19FE6:				; XREF: off_19E80
0001B99E 70FF                       		moveq	#-1,d0
0001B9A0 3028 0036                  		move.w	$36(a0),d0
0001B9A4 2240                       		movea.l	d0,a1
0001B9A6 4A68 0030                  		tst.w	$30(a0)
0001B9AA 6A00                       		bpl.s	loc_1A000
0001B9AC 4268 0030                  		clr.w	$30(a0)
0001B9B0 137C 00FF 0029             		move.b	#-1,$29(a1)
0001B9B6 6100                       		bsr.s	loc_1A020
0001B9B8                            
0001B9B8                            loc_1A000:
0001B9B8 700F                       		moveq	#$F,d0
0001B9BA C078 FE0E                  		and.w	($FFFFFE0E).w,d0
0001B9BE 6600                       		bne.s	loc_1A00A
0001B9C0 6100                       		bsr.s	loc_1A020
0001B9C2                            
0001B9C2                            loc_1A00A:
0001B9C2 4A68 0032                  		tst.w	$32(a0)
0001B9C6 6700                       		beq.s	locret_1A01E
0001B9C8 5528 0034                  		subq.b	#2,$34(a0)
0001B9CC 317C FFFF 0030             		move.w	#-1,$30(a0)
0001B9D2 4268 0032                  		clr.w	$32(a0)
0001B9D6                            
0001B9D6                            locret_1A01E:
0001B9D6 4E75                       		rts	
0001B9D8                            ; ===========================================================================
0001B9D8                            
0001B9D8                            loc_1A020:
0001B9D8 303C 00B1                  		move.w	#$B1,d0
0001B9DC 4EF9 0000 1476             		jmp	(PlaySound_Special).l ;	play electricity sound
0001B9E2                            ; ===========================================================================
0001B9E2                            
0001B9E2                            loc_1A02A:				; XREF: off_19E80
0001B9E2 117C 0030 0017             		move.b	#$30,$17(a0)
0001B9E8 08E8 0000 0022             		bset	#0,$22(a0)
0001B9EE 4EB9 0000 E0E4             		jsr	SpeedToPos
0001B9F4 117C 0006 001A             		move.b	#6,$1A(a0)
0001B9FA 0668 0010 0012             		addi.w	#$10,$12(a0)
0001BA00 0C68 059C 000C             		cmpi.w	#$59C,$C(a0)
0001BA06 6500                       		bcs.s	loc_1A070
0001BA08 317C 059C 000C             		move.w	#$59C,$C(a0)
0001BA0E 5428 0034                  		addq.b	#2,$34(a0)
0001BA12 117C 0020 0017             		move.b	#$20,$17(a0)
0001BA18 317C 0100 0010             		move.w	#$100,$10(a0)
0001BA1E 317C FF00 0012             		move.w	#-$100,$12(a0)
0001BA24 5438 F742                  		addq.b	#2,($FFFFF742).w
0001BA28                            
0001BA28                            loc_1A070:
0001BA28 6000 0000                  		bra.w	loc_1A166
0001BA2C                            ; ===========================================================================
0001BA2C                            
0001BA2C                            loc_1A074:				; XREF: off_19E80
0001BA2C 08E8 0000 0022             		bset	#0,$22(a0)
0001BA32 117C 0004 001C             		move.b	#4,$1C(a0)
0001BA38 4EB9 0000 E0E4             		jsr	SpeedToPos
0001BA3E 0668 0010 0012             		addi.w	#$10,$12(a0)
0001BA44 0C68 05A3 000C             		cmpi.w	#$5A3,$C(a0)
0001BA4A 6500                       		bcs.s	loc_1A09A
0001BA4C 317C FFC0 0012             		move.w	#-$40,$12(a0)
0001BA52                            
0001BA52                            loc_1A09A:
0001BA52 317C 0400 0010             		move.w	#$400,$10(a0)
0001BA58 3028 0008                  		move.w	8(a0),d0
0001BA5C 9078 D008                  		sub.w	($FFFFD008).w,d0
0001BA60 6A00                       		bpl.s	loc_1A0B4
0001BA62 317C 0500 0010             		move.w	#$500,$10(a0)
0001BA68 6000 0000                  		bra.w	loc_1A0F2
0001BA6C                            ; ===========================================================================
0001BA6C                            
0001BA6C                            loc_1A0B4:
0001BA6C 0440 0070                  		subi.w	#$70,d0
0001BA70 6500                       		bcs.s	loc_1A0F2
0001BA72 0468 0100 0010             		subi.w	#$100,$10(a0)
0001BA78 5140                       		subq.w	#8,d0
0001BA7A 6500                       		bcs.s	loc_1A0F2
0001BA7C 0468 0100 0010             		subi.w	#$100,$10(a0)
0001BA82 5140                       		subq.w	#8,d0
0001BA84 6500                       		bcs.s	loc_1A0F2
0001BA86 0468 0080 0010             		subi.w	#$80,$10(a0)
0001BA8C 5140                       		subq.w	#8,d0
0001BA8E 6500                       		bcs.s	loc_1A0F2
0001BA90 0468 0080 0010             		subi.w	#$80,$10(a0)
0001BA96 5140                       		subq.w	#8,d0
0001BA98 6500                       		bcs.s	loc_1A0F2
0001BA9A 0468 0080 0010             		subi.w	#$80,$10(a0)
0001BAA0 0440 0038                  		subi.w	#$38,d0
0001BAA4 6500                       		bcs.s	loc_1A0F2
0001BAA6 4268 0010                  		clr.w	$10(a0)
0001BAAA                            
0001BAAA                            loc_1A0F2:
0001BAAA 0C68 26A0 0008             		cmpi.w	#$26A0,8(a0)
0001BAB0 6500                       		bcs.s	loc_1A110
0001BAB2 317C 26A0 0008             		move.w	#$26A0,8(a0)
0001BAB8 317C 0240 0010             		move.w	#$240,$10(a0)
0001BABE 317C FB40 0012             		move.w	#-$4C0,$12(a0)
0001BAC4 5428 0034                  		addq.b	#2,$34(a0)
0001BAC8                            
0001BAC8                            loc_1A110:
0001BAC8 6000                       		bra.s	loc_1A15C
0001BACA                            ; ===========================================================================
0001BACA                            
0001BACA                            loc_1A112:				; XREF: off_19E80
0001BACA 4EB9 0000 E0E4             		jsr	SpeedToPos
0001BAD0 0C68 26E0 0008             		cmpi.w	#$26E0,8(a0)
0001BAD6 6500                       		bcs.s	loc_1A124
0001BAD8 4268 0010                  		clr.w	$10(a0)
0001BADC                            
0001BADC                            loc_1A124:
0001BADC 0668 0034 0012             		addi.w	#$34,$12(a0)
0001BAE2 4A68 0012                  		tst.w	$12(a0)
0001BAE6 6B00                       		bmi.s	loc_1A142
0001BAE8 0C68 0592 000C             		cmpi.w	#$592,$C(a0)
0001BAEE 6500                       		bcs.s	loc_1A142
0001BAF0 317C 0592 000C             		move.w	#$592,$C(a0)
0001BAF6 4268 0012                  		clr.w	$12(a0)
0001BAFA                            
0001BAFA                            loc_1A142:
0001BAFA 3028 0010                  		move.w	$10(a0),d0
0001BAFE 8068 0012                  		or.w	$12(a0),d0
0001BB02 6600                       		bne.s	loc_1A15C
0001BB04 5428 0034                  		addq.b	#2,$34(a0)
0001BB08 317C FE80 0012             		move.w	#-$180,$12(a0)
0001BB0E 117C 0001 0021             		move.b	#1,$21(a0)
0001BB14                            
0001BB14                            loc_1A15C:
0001BB14 43FA F8A4                  		lea	Ani_obj82(pc),a1
0001BB18 4EB9 0000 B21C             		jsr	AnimateSprite
0001BB1E                            
0001BB1E                            loc_1A166:
0001BB1E 0C78 2700 F72A             		cmpi.w	#$2700,($FFFFF72A).w
0001BB24 6C00                       		bge.s	loc_1A172
0001BB26 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0001BB2A                            
0001BB2A                            loc_1A172:
0001BB2A 0C28 000C 0034             		cmpi.b	#$C,$34(a0)
0001BB30 6C00                       		bge.s	locret_1A190
0001BB32 323C 001B                  		move.w	#$1B,d1
0001BB36 343C 0070                  		move.w	#$70,d2
0001BB3A 363C 0071                  		move.w	#$71,d3
0001BB3E 3828 0008                  		move.w	8(a0),d4
0001BB42 4EF9 0001 04F4             		jmp	SolidObject
0001BB48                            ; ===========================================================================
0001BB48                            
0001BB48                            locret_1A190:
0001BB48 4E75                       		rts	
0001BB4A                            ; ===========================================================================
0001BB4A                            
0001BB4A                            loc_1A192:				; XREF: off_19E80
0001BB4A 217C 0001 96CE 0004        		move.l	#Map_Eggman,4(a0)
0001BB52 317C 0400 0002             		move.w	#$400,2(a0)
0001BB58 117C 0000 001C             		move.b	#0,$1C(a0)
0001BB5E 08E8 0000 0022             		bset	#0,$22(a0)
0001BB64 4EB9 0000 E0E4             		jsr	SpeedToPos
0001BB6A 0C68 0544 000C             		cmpi.w	#$544,$C(a0)
0001BB70 6400                       		bcc.s	loc_1A1D0
0001BB72 317C 0180 0010             		move.w	#$180,$10(a0)
0001BB78 317C FFE8 0012             		move.w	#-$18,$12(a0)
0001BB7E 117C 000F 0020             		move.b	#$F,$20(a0)
0001BB84 5428 0034                  		addq.b	#2,$34(a0)
0001BB88                            
0001BB88                            loc_1A1D0:
0001BB88 6000 FF8A                  		bra.w	loc_1A15C
0001BB8C                            ; ===========================================================================
0001BB8C                            
0001BB8C                            loc_1A1D4:				; XREF: off_19E80
0001BB8C 08E8 0000 0022             		bset	#0,$22(a0)
0001BB92 4EB9 0000 E0E4             		jsr	SpeedToPos
0001BB98 4A68 0030                  		tst.w	$30(a0)
0001BB9C 6600                       		bne.s	loc_1A1FC
0001BB9E 4A28 0020                  		tst.b	$20(a0)
0001BBA2 6600                       		bne.s	loc_1A216
0001BBA4 317C 001E 0030             		move.w	#$1E,$30(a0)
0001BBAA 303C 00AC                  		move.w	#$AC,d0
0001BBAE 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001BBB4                            
0001BBB4                            loc_1A1FC:
0001BBB4 5368 0030                  		subq.w	#1,$30(a0)
0001BBB8 6600                       		bne.s	loc_1A216
0001BBBA 4A28 0022                  		tst.b	$22(a0)
0001BBBE 6A00                       		bpl.s	loc_1A210
0001BBC0 317C 0060 0012             		move.w	#$60,$12(a0)
0001BBC6 6000                       		bra.s	loc_1A216
0001BBC8                            ; ===========================================================================
0001BBC8                            
0001BBC8                            loc_1A210:
0001BBC8 117C 000F 0020             		move.b	#$F,$20(a0)
0001BBCE                            
0001BBCE                            loc_1A216:
0001BBCE 0C78 2790 D008             		cmpi.w	#$2790,($FFFFD008).w
0001BBD4 6D00                       		blt.s	loc_1A23A
0001BBD6 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w
0001BBDC 31FC 0000 F602             		move.w	#0,($FFFFF602).w
0001BBE2 4278 D014                  		clr.w	($FFFFD014).w
0001BBE6 4A68 0012                  		tst.w	$12(a0)
0001BBEA 6A00                       		bpl.s	loc_1A248
0001BBEC 31FC 0100 F602             		move.w	#$100,($FFFFF602).w
0001BBF2                            
0001BBF2                            loc_1A23A:
0001BBF2 0C78 27E0 D008             		cmpi.w	#$27E0,($FFFFD008).w
0001BBF8 6D00                       		blt.s	loc_1A248
0001BBFA 31FC 27E0 D008             		move.w	#$27E0,($FFFFD008).w
0001BC00                            
0001BC00                            loc_1A248:
0001BC00 0C68 2900 0008             		cmpi.w	#$2900,8(a0)
0001BC06 6500                       		bcs.s	loc_1A260
0001BC08 4A28 0001                  		tst.b	1(a0)
0001BC0C 6B00                       		bmi.s	loc_1A260
0001BC0E 11FC 0018 F600             		move.b	#$18,($FFFFF600).w
0001BC14 6000 FAF4                  		bra.w	Obj85_Delete
0001BC18                            ; ===========================================================================
0001BC18                            
0001BC18                            loc_1A260:
0001BC18 6000 FEFA                  		bra.w	loc_1A15C
0001BC1C                            ; ===========================================================================
0001BC1C                            
0001BC1C                            loc_1A264:				; XREF: Obj85_Index
0001BC1C 2268 0034                  		movea.l	$34(a0),a1
0001BC20 1011                       		move.b	(a1),d0
0001BC22 B010                       		cmp.b	(a0),d0
0001BC24 6600 FAE4                  		bne.w	Obj85_Delete
0001BC28 117C 0007 001C             		move.b	#7,$1C(a0)
0001BC2E 0C29 000C 0034             		cmpi.b	#$C,$34(a1)
0001BC34 6C00                       		bge.s	loc_1A280
0001BC36 6000                       		bra.s	loc_1A2A6
0001BC38                            ; ===========================================================================
0001BC38                            
0001BC38                            loc_1A280:
0001BC38 4A69 0010                  		tst.w	$10(a1)
0001BC3C 6700                       		beq.s	loc_1A28C
0001BC3E 117C 000B 001C             		move.b	#$B,$1C(a0)
0001BC44                            
0001BC44                            loc_1A28C:
0001BC44 43FA DA38                  		lea	Ani_Eggman(pc),a1
0001BC48 4EB9 0000 B21C             		jsr	AnimateSprite
0001BC4E                            
0001BC4E                            loc_1A296:
0001BC4E 2268 0034                  		movea.l	$34(a0),a1
0001BC52 3169 0008 0008             		move.w	8(a1),8(a0)
0001BC58 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001BC5E                            
0001BC5E                            loc_1A2A6:
0001BC5E 2268 0034                  		movea.l	$34(a0),a1
0001BC62 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001BC68 7003                       		moveq	#3,d0
0001BC6A C028 0022                  		and.b	$22(a0),d0
0001BC6E 0228 00FC 0001             		andi.b	#-4,1(a0)
0001BC74 8128 0001                  		or.b	d0,1(a0)
0001BC78 4EF9 0000 E10A             		jmp	DisplaySprite
0001BC7E                            ; ===========================================================================
0001BC7E                            
0001BC7E                            loc_1A2C6:				; XREF: Obj85_Index
0001BC7E 2268 0034                  		movea.l	$34(a0),a1
0001BC82 1011                       		move.b	(a1),d0
0001BC84 B010                       		cmp.b	(a0),d0
0001BC86 6600 FA82                  		bne.w	Obj85_Delete
0001BC8A 0CA9 0001 96CE 0004        		cmpi.l	#Map_Eggman,4(a1)
0001BC92 6700                       		beq.s	loc_1A2E4
0001BC94 117C 000A 001A             		move.b	#$A,$1A(a0)
0001BC9A 60C2                       		bra.s	loc_1A2A6
0001BC9C                            ; ===========================================================================
0001BC9C                            
0001BC9C                            loc_1A2E4:
0001BC9C 117C 0001 001C             		move.b	#1,$1C(a0)
0001BCA2 4A29 0021                  		tst.b	$21(a1)
0001BCA6 6F00                       		ble.s	loc_1A312
0001BCA8 117C 0006 001C             		move.b	#6,$1C(a0)
0001BCAE 217C 0001 96CE 0004        		move.l	#Map_Eggman,4(a0)
0001BCB6 317C 0400 0002             		move.w	#$400,2(a0)
0001BCBC 43FA D9C0                  		lea	Ani_Eggman(pc),a1
0001BCC0 4EB9 0000 B21C             		jsr	AnimateSprite
0001BCC6 6000 FF86                  		bra.w	loc_1A296
0001BCCA                            ; ===========================================================================
0001BCCA                            
0001BCCA                            loc_1A312:
0001BCCA 4A28 0001                  		tst.b	1(a0)
0001BCCE 6A00 FA3A                  		bpl.w	Obj85_Delete
0001BCD2 6100 D558                  		bsr.w	BossDefeated
0001BCD6 117C 0002 0018             		move.b	#2,$18(a0)
0001BCDC 117C 0000 001C             		move.b	#0,$1C(a0)
0001BCE2 217C 0000 0000 0004        		move.l	#Map_Eggman2,4(a0)
0001BCEA 317C 03A0 0002             		move.w	#$3A0,2(a0)
0001BCF0 43FA 0000                  		lea	Ani_obj85(pc),a1
0001BCF4 4EB9 0000 B21C             		jsr	AnimateSprite
0001BCFA 6000 FF52                  		bra.w	loc_1A296
0001BCFE                            ; ===========================================================================
0001BCFE                            
0001BCFE                            loc_1A346:				; XREF: Obj85_Index
0001BCFE 08E8 0000 0022             		bset	#0,$22(a0)
0001BD04 2268 0034                  		movea.l	$34(a0),a1
0001BD08 0CA9 0001 96CE 0004        		cmpi.l	#Map_Eggman,4(a1)
0001BD10 6700                       		beq.s	loc_1A35E
0001BD12 6000 FF4A                  		bra.w	loc_1A2A6
0001BD16                            ; ===========================================================================
0001BD16                            
0001BD16                            loc_1A35E:
0001BD16 3169 0008 0008             		move.w	8(a1),8(a0)
0001BD1C 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001BD22 4A28 001E                  		tst.b	$1E(a0)
0001BD26 6600                       		bne.s	loc_1A376
0001BD28 117C 0014 001E             		move.b	#$14,$1E(a0)
0001BD2E                            
0001BD2E                            loc_1A376:
0001BD2E 5328 001E                  		subq.b	#1,$1E(a0)
0001BD32 6E00                       		bgt.s	loc_1A38A
0001BD34 5228 001A                  		addq.b	#1,$1A(a0)
0001BD38 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0001BD3E 6E00 F9CA                  		bgt.w	Obj85_Delete
0001BD42                            
0001BD42                            loc_1A38A:
0001BD42 6000 FF0A                  		bra.w	loc_1A296
0001BD46                            ; ===========================================================================
0001BD46                            
0001BD46                            loc_1A38E:				; XREF: Obj85_Index
0001BD46 117C 000B 001A             		move.b	#$B,$1A(a0)
0001BD4C 3038 D008                  		move.w	($FFFFD008).w,d0
0001BD50 9068 0008                  		sub.w	8(a0),d0
0001BD54 6500                       		bcs.s	loc_1A3A6
0001BD56 4A28 0001                  		tst.b	1(a0)
0001BD5A 6A00 F9AE                  		bpl.w	Obj85_Delete
0001BD5E                            
0001BD5E                            loc_1A3A6:
0001BD5E 4EF9 0000 E10A             		jmp	DisplaySprite
0001BD64                            ; ===========================================================================
0001BD64                            
0001BD64                            loc_1A3AC:				; XREF: Obj85_Index
0001BD64 117C 0000 001A             		move.b	#0,$1A(a0)
0001BD6A 08E8 0000 0022             		bset	#0,$22(a0)
0001BD70 2268 0034                  		movea.l	$34(a0),a1
0001BD74 0C29 000C 0034             		cmpi.b	#$C,$34(a1)
0001BD7A 6600                       		bne.s	loc_1A3D0
0001BD7C 0CA9 0001 96CE 0004        		cmpi.l	#Map_Eggman,4(a1)
0001BD84 6700 F984                  		beq.w	Obj85_Delete
0001BD88                            
0001BD88                            loc_1A3D0:
0001BD88 6000 FED4                  		bra.w	loc_1A2A6
0001BD8C                            ; ===========================================================================
0001BD8C                            Ani_obj85:
0001BD8C                            	include "_anim\obj85.asm"
0001BD8C                            ; ---------------------------------------------------------------------------
0001BD8C                            ; Animation script - Eggman (FZ)
0001BD8C                            ; ---------------------------------------------------------------------------
0001BD8C 0000                       		dc.w byte_1A3D6-Ani_obj85
0001BD8E 0300 01FF                  byte_1A3D6:	dc.b 3,	0, 1, $FF
0001BD92                            		even
0001BD92                            		even
0001BD92                            
0001BD92                            Map_Eggman2:
0001BD92                            	include "_maps\Eggman2.asm"
0001BD92                            ; ---------------------------------------------------------------------------
0001BD92                            ; Sprite mappings - Eggman (FZ)
0001BD92                            ; ---------------------------------------------------------------------------
0001BD92 0000                       		dc.w byte_1A3DE-Map_Eggman2
0001BD94 0000                       		dc.w byte_1A3FD-Map_Eggman2
0001BD96 06                         byte_1A3DE:	dc.b 6
0001BD97 E408 0020 F4               		dc.b $E4, 8, 0,	$20, $F4
0001BD9C EC0D 0023 E4               		dc.b $EC, $D, 0, $23, $E4
0001BDA1 EC09 002B 04               		dc.b $EC, 9, 0,	$2B, 4
0001BDA6 FC05 203A E4               		dc.b $FC, 5, $20, $3A, $E4
0001BDAB FC0E 203E 04               		dc.b $FC, $E, $20, $3E,	4
0001BDB0 1404 204A 04               		dc.b $14, 4, $20, $4A, 4
0001BDB5 06                         byte_1A3FD:	dc.b 6
0001BDB6 E40A 0031 F4               		dc.b $E4, $A, 0, $31, $F4
0001BDBB EC05 0023 E4               		dc.b $EC, 5, 0,	$23, $E4
0001BDC0 EC09 002B 04               		dc.b $EC, 9, 0,	$2B, 4
0001BDC5 FC05 203A E4               		dc.b $FC, 5, $20, $3A, $E4
0001BDCA FC0E 203E 04               		dc.b $FC, $E, $20, $3E,	4
0001BDCF 1404 204A 04               		dc.b $14, 4, $20, $4A, 4
0001BDD4                            		even
0001BDD4                            		even
0001BDD4                            
0001BDD4                            Map_FZBoss:
0001BDD4                            	include "_maps\FZ boss.asm"
0001BDD4                            ; ---------------------------------------------------------------------------
0001BDD4                            ; Sprite mappings - boss (FZ)
0001BDD4                            ; ---------------------------------------------------------------------------
0001BDD4 0000                       		dc.w byte_1A422-Map_FZBoss
0001BDD6 0000                       		dc.w byte_1A42D-Map_FZBoss
0001BDD8 0000                       		dc.w byte_1A43D-Map_FZBoss
0001BDDA 02                         byte_1A422:	dc.b 2
0001BDDB 140E 2800 F4               		dc.b $14, $E, $28, 0, $F4
0001BDE0 2400 280C EC               		dc.b $24, 0, $28, $C, $EC
0001BDE5 03                         byte_1A42D:	dc.b 3
0001BDE6 0C05 280D 0C               		dc.b $C, 5, $28, $D, $C
0001BDEB 1C00 2811 0C               		dc.b $1C, 0, $28, $11, $C
0001BDF0 140D 2812 EC               		dc.b $14, $D, $28, $12,	$EC
0001BDF5 02                         byte_1A43D:	dc.b 2
0001BDF6 0C01 281A 0C               		dc.b $C, 1, $28, $1A, $C
0001BDFB 140C 281C EC               		dc.b $14, $C, $28, $1C,	$EC
0001BE00                            		even
0001BE00                            		even
0001BE00                            
0001BE00                            ; ===========================================================================
0001BE00                            
0001BE00                            Obj84_Delete:
0001BE00 4EF9 0000 E146             		jmp	DeleteObject
0001BE06                            ; ===========================================================================
0001BE06                            ; ---------------------------------------------------------------------------
0001BE06                            ; Object 84 - cylinder Eggman	hides in (FZ)
0001BE06                            ; ---------------------------------------------------------------------------
0001BE06                            
0001BE06                            Obj84:					; XREF: Obj_Index
0001BE06 7000                       		moveq	#0,d0
0001BE08 1028 0024                  		move.b	$24(a0),d0
0001BE0C 303B 0000                  		move.w	Obj84_Index(pc,d0.w),d0
0001BE10 4EFB 0000                  		jmp	Obj84_Index(pc,d0.w)
0001BE14                            ; ===========================================================================
0001BE14 0000                       Obj84_Index:	dc.w Obj84_Main-Obj84_Index
0001BE16 0000                       		dc.w loc_1A4CE-Obj84_Index
0001BE18 0000                       		dc.w loc_1A57E-Obj84_Index
0001BE1A                            
0001BE1A 24D0 0620                  Obj84_PosData:	dc.w $24D0, $620
0001BE1E 2550 0620                  		dc.w $2550, $620
0001BE22 2490 04C0                  		dc.w $2490, $4C0
0001BE26 2510 04C0                  		dc.w $2510, $4C0
0001BE2A                            ; ===========================================================================
0001BE2A                            
0001BE2A                            Obj84_Main:				; XREF: Obj84_Index
0001BE2A 43FA FFEE                  		lea	Obj84_PosData(pc),a1
0001BE2E 7000                       		moveq	#0,d0
0001BE30 1028 0028                  		move.b	$28(a0),d0
0001BE34 D040                       		add.w	d0,d0
0001BE36 D2C0                       		adda.w	d0,a1
0001BE38 117C 0004 0001             		move.b	#4,1(a0)
0001BE3E 08E8 0007 0001             		bset	#7,1(a0)
0001BE44 08E8 0004 0001             		bset	#4,1(a0)
0001BE4A 317C 0300 0002             		move.w	#$300,2(a0)
0001BE50 217C 0000 0000 0004        		move.l	#Map_obj84,4(a0)
0001BE58 3159 0008                  		move.w	(a1)+,8(a0)
0001BE5C 3151 000C                  		move.w	(a1),$C(a0)
0001BE60 3159 0038                  		move.w	(a1)+,$38(a0)
0001BE64 117C 0020 0016             		move.b	#$20,$16(a0)
0001BE6A 117C 0060 0017             		move.b	#$60,$17(a0)
0001BE70 117C 0020 0019             		move.b	#$20,$19(a0)
0001BE76 117C 0060 0016             		move.b	#$60,$16(a0)
0001BE7C 117C 0003 0018             		move.b	#3,$18(a0)
0001BE82 5428 0024                  		addq.b	#2,$24(a0)
0001BE86                            
0001BE86                            loc_1A4CE:				; XREF: Obj84_Index
0001BE86 0C28 0002 0028             		cmpi.b	#2,$28(a0)
0001BE8C 6F00                       		ble.s	loc_1A4DC
0001BE8E 08E8 0001 0001             		bset	#1,1(a0)
0001BE94                            
0001BE94                            loc_1A4DC:
0001BE94 42A8 003C                  		clr.l	$3C(a0)
0001BE98 4A28 0029                  		tst.b	$29(a0)
0001BE9C 6700                       		beq.s	loc_1A4EA
0001BE9E 5428 0024                  		addq.b	#2,$24(a0)
0001BEA2                            
0001BEA2                            loc_1A4EA:
0001BEA2 2028 003C                  		move.l	$3C(a0),d0
0001BEA6 2228 0038                  		move.l	$38(a0),d1
0001BEAA D280                       		add.l	d0,d1
0001BEAC 4841                       		swap	d1
0001BEAE 3141 000C                  		move.w	d1,$C(a0)
0001BEB2 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0001BEB8 6600                       		bne.s	loc_1A524
0001BEBA 4A68 0030                  		tst.w	$30(a0)
0001BEBE 6A00                       		bpl.s	loc_1A524
0001BEC0 70F6                       		moveq	#-$A,d0
0001BEC2 0C28 0002 0028             		cmpi.b	#2,$28(a0)
0001BEC8 6F00                       		ble.s	loc_1A514
0001BECA 700E                       		moveq	#$E,d0
0001BECC                            
0001BECC                            loc_1A514:
0001BECC D240                       		add.w	d0,d1
0001BECE 2268 0034                  		movea.l	$34(a0),a1
0001BED2 3341 000C                  		move.w	d1,$C(a1)
0001BED6 3368 0008 0008             		move.w	8(a0),8(a1)
0001BEDC                            
0001BEDC                            loc_1A524:
0001BEDC 323C 002B                  		move.w	#$2B,d1
0001BEE0 343C 0060                  		move.w	#$60,d2
0001BEE4 363C 0061                  		move.w	#$61,d3
0001BEE8 3828 0008                  		move.w	8(a0),d4
0001BEEC 4EB9 0001 04F4             		jsr	SolidObject
0001BEF2 7000                       		moveq	#0,d0
0001BEF4 3228 003C                  		move.w	$3C(a0),d1
0001BEF8 6A00                       		bpl.s	loc_1A550
0001BEFA 4441                       		neg.w	d1
0001BEFC 5141                       		subq.w	#8,d1
0001BEFE 6500                       		bcs.s	loc_1A55C
0001BF00 5200                       		addq.b	#1,d0
0001BF02 E841                       		asr.w	#4,d1
0001BF04 D041                       		add.w	d1,d0
0001BF06 6000                       		bra.s	loc_1A55C
0001BF08                            ; ===========================================================================
0001BF08                            
0001BF08                            loc_1A550:
0001BF08 0441 0027                  		subi.w	#$27,d1
0001BF0C 6500                       		bcs.s	loc_1A55C
0001BF0E 5200                       		addq.b	#1,d0
0001BF10 E841                       		asr.w	#4,d1
0001BF12 D041                       		add.w	d1,d0
0001BF14                            
0001BF14                            loc_1A55C:
0001BF14 1140 001A                  		move.b	d0,$1A(a0)
0001BF18 3038 D008                  		move.w	($FFFFD008).w,d0
0001BF1C 9068 0008                  		sub.w	8(a0),d0
0001BF20 6B00                       		bmi.s	loc_1A578
0001BF22 0440 0140                  		subi.w	#$140,d0
0001BF26 6B00                       		bmi.s	loc_1A578
0001BF28 4A28 0001                  		tst.b	1(a0)
0001BF2C 6A00 FED2                  		bpl.w	Obj84_Delete
0001BF30                            
0001BF30                            loc_1A578:
0001BF30 4EF9 0000 E10A             		jmp	DisplaySprite
0001BF36                            ; ===========================================================================
0001BF36                            
0001BF36                            loc_1A57E:				; XREF: Obj84_Index
0001BF36 7000                       		moveq	#0,d0
0001BF38 1028 0028                  		move.b	$28(a0),d0
0001BF3C 303B 0000                  		move.w	off_1A590(pc,d0.w),d0
0001BF40 4EBB 0000                  		jsr	off_1A590(pc,d0.w)
0001BF44 6000 FF5C                  		bra.w	loc_1A4EA
0001BF48                            ; ===========================================================================
0001BF48 0000                       off_1A590:	dc.w loc_1A598-off_1A590
0001BF4A 0000                       		dc.w loc_1A598-off_1A590
0001BF4C 0000                       		dc.w loc_1A604-off_1A590
0001BF4E 0000                       		dc.w loc_1A604-off_1A590
0001BF50                            ; ===========================================================================
0001BF50                            
0001BF50                            loc_1A598:				; XREF: off_1A590
0001BF50 4A28 0029                  		tst.b	$29(a0)
0001BF54 6600                       		bne.s	loc_1A5D4
0001BF56 2268 0034                  		movea.l	$34(a0),a1
0001BF5A 4A29 0021                  		tst.b	$21(a1)
0001BF5E 6600                       		bne.s	loc_1A5B4
0001BF60 6100 D2CA                  		bsr.w	BossDefeated
0001BF64 04A8 0001 0000 003C        		subi.l	#$10000,$3C(a0)
0001BF6C                            
0001BF6C                            loc_1A5B4:
0001BF6C 06A8 0002 0000 003C        		addi.l	#$20000,$3C(a0)
0001BF74 6400                       		bcc.s	locret_1A602
0001BF76 42A8 003C                  		clr.l	$3C(a0)
0001BF7A 2268 0034                  		movea.l	$34(a0),a1
0001BF7E 5369 0032                  		subq.w	#1,$32(a1)
0001BF82 4269 0030                  		clr.w	$30(a1)
0001BF86 5528 0024                  		subq.b	#2,$24(a0)
0001BF8A 4E75                       		rts	
0001BF8C                            ; ===========================================================================
0001BF8C                            
0001BF8C                            loc_1A5D4:
0001BF8C 0C68 FFF0 003C             		cmpi.w	#-$10,$3C(a0)
0001BF92 6C00                       		bge.s	loc_1A5E4
0001BF94 04A8 0002 8000 003C        		subi.l	#$28000,$3C(a0)
0001BF9C                            
0001BF9C                            loc_1A5E4:
0001BF9C 04A8 0000 8000 003C        		subi.l	#$8000,$3C(a0)
0001BFA4 0C68 FF60 003C             		cmpi.w	#-$A0,$3C(a0)
0001BFAA 6E00                       		bgt.s	locret_1A602
0001BFAC 4268 003E                  		clr.w	$3E(a0)
0001BFB0 317C FF60 003C             		move.w	#-$A0,$3C(a0)
0001BFB6 4228 0029                  		clr.b	$29(a0)
0001BFBA                            
0001BFBA                            locret_1A602:
0001BFBA 4E75                       		rts	
0001BFBC                            ; ===========================================================================
0001BFBC                            
0001BFBC                            loc_1A604:				; XREF: off_1A590
0001BFBC 08E8 0001 0001             		bset	#1,1(a0)
0001BFC2 4A28 0029                  		tst.b	$29(a0)
0001BFC6 6600                       		bne.s	loc_1A646
0001BFC8 2268 0034                  		movea.l	$34(a0),a1
0001BFCC 4A29 0021                  		tst.b	$21(a1)
0001BFD0 6600                       		bne.s	loc_1A626
0001BFD2 6100 D258                  		bsr.w	BossDefeated
0001BFD6 06A8 0001 0000 003C        		addi.l	#$10000,$3C(a0)
0001BFDE                            
0001BFDE                            loc_1A626:
0001BFDE 04A8 0002 0000 003C        		subi.l	#$20000,$3C(a0)
0001BFE6 6400                       		bcc.s	locret_1A674
0001BFE8 42A8 003C                  		clr.l	$3C(a0)
0001BFEC 2268 0034                  		movea.l	$34(a0),a1
0001BFF0 5369 0032                  		subq.w	#1,$32(a1)
0001BFF4 4269 0030                  		clr.w	$30(a1)
0001BFF8 5528 0024                  		subq.b	#2,$24(a0)
0001BFFC 4E75                       		rts	
0001BFFE                            ; ===========================================================================
0001BFFE                            
0001BFFE                            loc_1A646:
0001BFFE 0C68 0010 003C             		cmpi.w	#$10,$3C(a0)
0001C004 6D00                       		blt.s	loc_1A656
0001C006 06A8 0002 8000 003C        		addi.l	#$28000,$3C(a0)
0001C00E                            
0001C00E                            loc_1A656:
0001C00E 06A8 0000 8000 003C        		addi.l	#$8000,$3C(a0)
0001C016 0C68 00A0 003C             		cmpi.w	#$A0,$3C(a0)
0001C01C 6D00                       		blt.s	locret_1A674
0001C01E 4268 003E                  		clr.w	$3E(a0)
0001C022 317C 00A0 003C             		move.w	#$A0,$3C(a0)
0001C028 4228 0029                  		clr.b	$29(a0)
0001C02C                            
0001C02C                            locret_1A674:
0001C02C 4E75                       		rts	
0001C02E                            ; ===========================================================================
0001C02E                            ; ---------------------------------------------------------------------------
0001C02E                            ; Sprite mappings - cylinders Eggman hides in (FZ)
0001C02E                            ; ---------------------------------------------------------------------------
0001C02E                            Map_obj84:
0001C02E                            	include "_maps\obj84.asm"
0001C02E                            ; ---------------------------------------------------------------------------
0001C02E                            ; Sprite mappings - cylinders Eggman hides in (FZ)
0001C02E                            ; ---------------------------------------------------------------------------
0001C02E 0000 0000                  		dc.w byte_1A68E-Map_obj84, byte_1A6AD-Map_obj84
0001C032 0000 0000                  		dc.w byte_1A6D6-Map_obj84, byte_1A709-Map_obj84
0001C036 0000 0000                  		dc.w byte_1A746-Map_obj84, byte_1A788-Map_obj84
0001C03A 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A788-Map_obj84
0001C03E 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A788-Map_obj84
0001C042 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A7CF-Map_obj84
0001C046 06                         byte_1A68E:	dc.b 6
0001C047 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001C04C A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001C051 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001C056 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001C05B B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001C060 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001C065 08                         byte_1A6AD:	dc.b 8
0001C066 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001C06B A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001C070 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001C075 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001C07A B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001C07F B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001C084 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001C089 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001C08E 0A                         byte_1A6D6:	dc.b $A
0001C08F A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001C094 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001C099 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001C09E B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001C0A3 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001C0A8 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001C0AD D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001C0B2 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001C0B7 F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001C0BC F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001C0C1 0C                         byte_1A709:	dc.b $C
0001C0C2 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001C0C7 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001C0CC B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001C0D1 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001C0D6 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001C0DB B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001C0E0 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001C0E5 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001C0EA F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001C0EF F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001C0F4 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001C0F9 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001C0FE 0D                         byte_1A746:	dc.b $D
0001C0FF A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001C104 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001C109 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001C10E B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001C113 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001C118 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001C11D D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001C122 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001C127 F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001C12C F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001C131 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001C136 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001C13B 380F 4050 F0               		dc.b $38, $F, $40, $50,	$F0
0001C140 0E                         byte_1A788:	dc.b $E
0001C141 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001C146 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001C14B B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001C150 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001C155 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001C15A B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001C15F D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001C164 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001C169 F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001C16E F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001C173 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001C178 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001C17D 380F 4050 F0               		dc.b $38, $F, $40, $50,	$F0
0001C182 580F 4050 F0               		dc.b $58, $F, $40, $50,	$F0
0001C187 02                         byte_1A7CF:	dc.b 2
0001C188 F804 0068 F0               		dc.b $F8, 4, 0,	$68, $F0
0001C18D 000C 006A F0               		dc.b 0,	$C, 0, $6A, $F0
0001C192                            		even
0001C192                            		even
0001C192                            
0001C192                            ; ===========================================================================
0001C192                            ; ---------------------------------------------------------------------------
0001C192                            ; Object 86 - energy balls (FZ)
0001C192                            ; ---------------------------------------------------------------------------
0001C192                            
0001C192                            Obj86:					; XREF: Obj_Index
0001C192 7000                       		moveq	#0,d0
0001C194 1028 0024                  		move.b	$24(a0),d0
0001C198 303B 0000                  		move.w	Obj86_Index(pc,d0.w),d0
0001C19C 4EFB 0000                  		jmp	Obj86_Index(pc,d0.w)
0001C1A0                            ; ===========================================================================
0001C1A0 0000                       Obj86_Index:	dc.w Obj86_Main-Obj86_Index
0001C1A2 0000                       		dc.w Obj86_Generator-Obj86_Index
0001C1A4 0000                       		dc.w Obj86_MakeBalls-Obj86_Index
0001C1A6 0000                       		dc.w loc_1A962-Obj86_Index
0001C1A8 0000                       		dc.w loc_1A982-Obj86_Index
0001C1AA                            ; ===========================================================================
0001C1AA                            
0001C1AA                            Obj86_Main:				; XREF: Obj86_Index
0001C1AA 317C 2588 0008             		move.w	#$2588,8(a0)
0001C1B0 317C 053C 000C             		move.w	#$53C,$C(a0)
0001C1B6 317C 0300 0002             		move.w	#$300,2(a0)
0001C1BC 217C 0000 0000 0004        		move.l	#Map_obj86,4(a0)
0001C1C4 117C 0000 001C             		move.b	#0,$1C(a0)
0001C1CA 117C 0003 0018             		move.b	#3,$18(a0)
0001C1D0 117C 0008 0017             		move.b	#8,$17(a0)
0001C1D6 117C 0008 0016             		move.b	#8,$16(a0)
0001C1DC 117C 0004 0001             		move.b	#4,1(a0)
0001C1E2 08E8 0007 0001             		bset	#7,1(a0)
0001C1E8 5428 0024                  		addq.b	#2,$24(a0)
0001C1EC                            
0001C1EC                            Obj86_Generator:			; XREF: Obj86_Index
0001C1EC 2268 0034                  		movea.l	$34(a0),a1
0001C1F0 0C29 0006 0034             		cmpi.b	#6,$34(a1)
0001C1F6 6600                       		bne.s	loc_1A850
0001C1F8 10BC 003F                  		move.b	#$3F,(a0)
0001C1FC 117C 0000 0024             		move.b	#0,$24(a0)
0001C202 4EF9 0000 E10A             		jmp	DisplaySprite
0001C208                            ; ===========================================================================
0001C208                            
0001C208                            loc_1A850:
0001C208 117C 0000 001C             		move.b	#0,$1C(a0)
0001C20E 4A28 0029                  		tst.b	$29(a0)
0001C212 6700                       		beq.s	loc_1A86C
0001C214 5428 0024                  		addq.b	#2,$24(a0)
0001C218 117C 0001 001C             		move.b	#1,$1C(a0)
0001C21E 117C 003E 0028             		move.b	#$3E,$28(a0)
0001C224                            
0001C224                            loc_1A86C:
0001C224 323C 0013                  		move.w	#$13,d1
0001C228 343C 0008                  		move.w	#8,d2
0001C22C 363C 0011                  		move.w	#$11,d3
0001C230 3828 0008                  		move.w	8(a0),d4
0001C234 4EB9 0001 04F4             		jsr	SolidObject
0001C23A 3038 D008                  		move.w	($FFFFD008).w,d0
0001C23E 9068 0008                  		sub.w	8(a0),d0
0001C242 6B00                       		bmi.s	loc_1A89A
0001C244 0440 0140                  		subi.w	#$140,d0
0001C248 6B00                       		bmi.s	loc_1A89A
0001C24A 4A28 0001                  		tst.b	1(a0)
0001C24E 6A00 FBB0                  		bpl.w	Obj84_Delete
0001C252                            
0001C252                            loc_1A89A:
0001C252 43FA 0000                  		lea	Ani_obj86(pc),a1
0001C256 4EB9 0000 B21C             		jsr	AnimateSprite
0001C25C 4EF9 0000 E10A             		jmp	DisplaySprite
0001C262                            ; ===========================================================================
0001C262                            
0001C262                            Obj86_MakeBalls:			; XREF: Obj86_Index
0001C262 4A28 0029                  		tst.b	$29(a0)
0001C266 6700 0000                  		beq.w	loc_1A954
0001C26A 4228 0029                  		clr.b	$29(a0)
0001C26E D068 0030                  		add.w	$30(a0),d0
0001C272 0240 001E                  		andi.w	#$1E,d0
0001C276 D4C0                       		adda.w	d0,a2
0001C278 5868 0030                  		addq.w	#4,$30(a0)
0001C27C 4268 0032                  		clr.w	$32(a0)
0001C280 7403                       		moveq	#3,d2
0001C282                            
0001C282                            Obj86_Loop:
0001C282 4EB9 0000 E5B6             		jsr	SingleObjLoad2
0001C288 6600 0000                  		bne.w	loc_1A954
0001C28C 12BC 0086                  		move.b	#$86,(a1)
0001C290 3368 0008 0008             		move.w	8(a0),8(a1)
0001C296 337C 053C 000C             		move.w	#$53C,$C(a1)
0001C29C 137C 0008 0024             		move.b	#8,$24(a1)
0001C2A2 337C 2300 0002             		move.w	#$2300,2(a1)
0001C2A8 237C 0000 0000 0004        		move.l	#Map_obj86a,4(a1)
0001C2B0 137C 000C 0016             		move.b	#$C,$16(a1)
0001C2B6 137C 000C 0017             		move.b	#$C,$17(a1)
0001C2BC 137C 0000 0020             		move.b	#0,$20(a1)
0001C2C2 137C 0003 0018             		move.b	#3,$18(a1)
0001C2C8 337C 003E 0028             		move.w	#$3E,$28(a1)
0001C2CE 137C 0004 0001             		move.b	#4,1(a1)
0001C2D4 08E9 0007 0001             		bset	#7,1(a1)
0001C2DA 2348 0034                  		move.l	a0,$34(a1)
0001C2DE 4EB9 0000 33AE             		jsr	(RandomNumber).l
0001C2E4 3228 0032                  		move.w	$32(a0),d1
0001C2E8 C3FC FFB1                  		muls.w	#-$4F,d1
0001C2EC 0641 2578                  		addi.w	#$2578,d1
0001C2F0 0240 001F                  		andi.w	#$1F,d0
0001C2F4 0440 0010                  		subi.w	#$10,d0
0001C2F8 D041                       		add.w	d1,d0
0001C2FA 3340 0030                  		move.w	d0,$30(a1)
0001C2FE 5268 0032                  		addq.w	#1,$32(a0)
0001C302 3168 0032 0038             		move.w	$32(a0),$38(a0)
0001C308 51CA FF78                  		dbf	d2,Obj86_Loop	; repeat sequence 3 more times
0001C30C                            
0001C30C                            loc_1A954:
0001C30C 4A68 0032                  		tst.w	$32(a0)
0001C310 6600                       		bne.s	loc_1A95E
0001C312 5428 0024                  		addq.b	#2,$24(a0)
0001C316                            
0001C316                            loc_1A95E:
0001C316 6000 FF0C                  		bra.w	loc_1A86C
0001C31A                            ; ===========================================================================
0001C31A                            
0001C31A                            loc_1A962:				; XREF: Obj86_Index
0001C31A 117C 0002 001C             		move.b	#2,$1C(a0)
0001C320 4A68 0038                  		tst.w	$38(a0)
0001C324 6600                       		bne.s	loc_1A97E
0001C326 117C 0002 0024             		move.b	#2,$24(a0)
0001C32C 2268 0034                  		movea.l	$34(a0),a1
0001C330 337C FFFF 0032             		move.w	#-1,$32(a1)
0001C336                            
0001C336                            loc_1A97E:
0001C336 6000 FEEC                  		bra.w	loc_1A86C
0001C33A                            ; ===========================================================================
0001C33A                            
0001C33A                            loc_1A982:				; XREF: Obj86_Index
0001C33A 7000                       		moveq	#0,d0
0001C33C 1028 0025                  		move.b	$25(a0),d0
0001C340 303B 0000                  		move.w	Obj86_Index2(pc,d0.w),d0
0001C344 4EBB 0000                  		jsr	Obj86_Index2(pc,d0.w)
0001C348 43FA 0000                  		lea	Ani_obj86a(pc),a1
0001C34C 4EB9 0000 B21C             		jsr	AnimateSprite
0001C352 4EF9 0000 E10A             		jmp	DisplaySprite
0001C358                            ; ===========================================================================
0001C358 0000                       Obj86_Index2:	dc.w loc_1A9A6-Obj86_Index2
0001C35A 0000                       		dc.w loc_1A9C0-Obj86_Index2
0001C35C 0000                       		dc.w loc_1AA1E-Obj86_Index2
0001C35E                            ; ===========================================================================
0001C35E                            
0001C35E                            loc_1A9A6:				; XREF: Obj86_Index2
0001C35E 3028 0030                  		move.w	$30(a0),d0
0001C362 9068 0008                  		sub.w	8(a0),d0
0001C366 E940                       		asl.w	#4,d0
0001C368 3140 0010                  		move.w	d0,$10(a0)
0001C36C 317C 00B4 0028             		move.w	#$B4,$28(a0)
0001C372 5428 0025                  		addq.b	#2,$25(a0)
0001C376 4E75                       		rts	
0001C378                            ; ===========================================================================
0001C378                            
0001C378                            loc_1A9C0:				; XREF: Obj86_Index2
0001C378 4A68 0010                  		tst.w	$10(a0)
0001C37C 6700                       		beq.s	loc_1A9E6
0001C37E 4EB9 0000 E0E4             		jsr	SpeedToPos
0001C384 3028 0008                  		move.w	8(a0),d0
0001C388 9068 0030                  		sub.w	$30(a0),d0
0001C38C 6400                       		bcc.s	loc_1A9E6
0001C38E 4268 0010                  		clr.w	$10(a0)
0001C392 D168 0008                  		add.w	d0,8(a0)
0001C396 2268 0034                  		movea.l	$34(a0),a1
0001C39A 5369 0032                  		subq.w	#1,$32(a1)
0001C39E                            
0001C39E                            loc_1A9E6:
0001C39E 117C 0000 001C             		move.b	#0,$1C(a0)
0001C3A4 5368 0028                  		subq.w	#1,$28(a0)
0001C3A8 6600                       		bne.s	locret_1AA1C
0001C3AA 5428 0025                  		addq.b	#2,$25(a0)
0001C3AE 117C 0001 001C             		move.b	#1,$1C(a0)
0001C3B4 117C 009A 0020             		move.b	#$9A,$20(a0)
0001C3BA 317C 00B4 0028             		move.w	#$B4,$28(a0)
0001C3C0 7000                       		moveq	#0,d0
0001C3C2 3038 D008                  		move.w	($FFFFD008).w,d0
0001C3C6 9068 0008                  		sub.w	8(a0),d0
0001C3CA 3140 0010                  		move.w	d0,$10(a0)
0001C3CE 317C 0140 0012             		move.w	#$140,$12(a0)
0001C3D4                            
0001C3D4                            locret_1AA1C:
0001C3D4 4E75                       		rts	
0001C3D6                            ; ===========================================================================
0001C3D6                            
0001C3D6                            loc_1AA1E:				; XREF: Obj86_Index2
0001C3D6 4EB9 0000 E0E4             		jsr	SpeedToPos
0001C3DC 0C68 05E0 000C             		cmpi.w	#$5E0,$C(a0)
0001C3E2 6400                       		bcc.s	loc_1AA34
0001C3E4 5368 0028                  		subq.w	#1,$28(a0)
0001C3E8 6700                       		beq.s	loc_1AA34
0001C3EA 4E75                       		rts	
0001C3EC                            ; ===========================================================================
0001C3EC                            
0001C3EC                            loc_1AA34:
0001C3EC 2268 0034                  		movea.l	$34(a0),a1
0001C3F0 5369 0038                  		subq.w	#1,$38(a1)
0001C3F4 6000 FA0A                  		bra.w	Obj84_Delete
0001C3F8                            ; ===========================================================================
0001C3F8                            Ani_obj86:
0001C3F8                            	include "_anim\obj86.asm"
0001C3F8                            ; ---------------------------------------------------------------------------
0001C3F8                            ; Animation script - energy ball launcher (FZ)
0001C3F8                            ; ---------------------------------------------------------------------------
0001C3F8 0000                       		dc.w byte_1AA46-Ani_obj86
0001C3FA 0000                       		dc.w byte_1AA4A-Ani_obj86
0001C3FC 0000                       		dc.w byte_1AA50-Ani_obj86
0001C3FE 7E00 FF00                  byte_1AA46:	dc.b $7E, 0, $FF, 0
0001C402 0100 0200 03FF             byte_1AA4A:	dc.b 1,	0, 2, 0, 3, $FF
0001C408 0101 0201 03FF             byte_1AA50:	dc.b 1,	1, 2, 1, 3, $FF
0001C40E                            		even
0001C40E                            		even
0001C40E                            
0001C40E                            ; ---------------------------------------------------------------------------
0001C40E                            ; Sprite mappings - energy ball	launcher (FZ)
0001C40E                            ; ---------------------------------------------------------------------------
0001C40E                            Map_obj86:
0001C40E                            	include "_maps\obj86.asm"
0001C40E                            ; ---------------------------------------------------------------------------
0001C40E                            ; Sprite mappings - energy ball	launcher (FZ)
0001C40E                            ; ---------------------------------------------------------------------------
0001C40E 0000 0000                  		dc.w byte_1AA5E-Map_obj86, byte_1AA64-Map_obj86
0001C412 0000 0000                  		dc.w byte_1AA6A-Map_obj86, byte_1AA70-Map_obj86
0001C416 01                         byte_1AA5E:	dc.b 1
0001C417 F805 006E F8               		dc.b $F8, 5, 0,	$6E, $F8
0001C41C 01                         byte_1AA64:	dc.b 1
0001C41D F805 0076 F8               		dc.b $F8, 5, 0,	$76, $F8
0001C422 01                         byte_1AA6A:	dc.b 1
0001C423 F805 0072 F8               		dc.b $F8, 5, 0,	$72, $F8
0001C428 01                         byte_1AA70:	dc.b 1
0001C429 F805 1072 F8               		dc.b $F8, 5, $10, $72, $F8
0001C42E                            		even
0001C42E                            		even
0001C42E                            
0001C42E                            Ani_obj86a:
0001C42E                            	include "_anim\obj86a.asm"
0001C42E                            ; ---------------------------------------------------------------------------
0001C42E                            ; Animation script - energy balls (FZ)
0001C42E                            ; ---------------------------------------------------------------------------
0001C42E 0000                       		dc.w byte_1AA7A-Ani_obj86a
0001C430 0000                       		dc.w byte_1AA9C-Ani_obj86a
0001C432 0100 0A08 0A01 0A09 0A06+  byte_1AA7A:	dc.b 1,	0, $A, 8, $A, 1, $A, 9,	$A, 6, $A, 7, $A, 0, $A
0001C441 080A 010A 090A 060A 070A+  		dc.b 8,	$A, 1, $A, 9, $A, 6, $A, 7, $A,	2, $A, 3, $A, 4
0001C450 0A05 FF00                  		dc.b $A, 5, $FF, 0
0001C454 0006 0501 0507 0501 05FF   byte_1AA9C:	dc.b 0,	6, 5, 1, 5, 7, 5, 1, 5,	$FF
0001C45E                            		even
0001C45E                            		even
0001C45E                            
0001C45E                            ; ---------------------------------------------------------------------------
0001C45E                            ; Sprite mappings - energy balls (FZ)
0001C45E                            ; ---------------------------------------------------------------------------
0001C45E                            Map_obj86a:
0001C45E                            	include "_maps\obj86a.asm"
0001C45E                            ; ---------------------------------------------------------------------------
0001C45E                            ; Sprite mappings - energy balls (FZ)
0001C45E                            ; ---------------------------------------------------------------------------
0001C45E 0000 0000                  		dc.w byte_1AABC-Map_obj86a, byte_1AAC7-Map_obj86a
0001C462 0000 0000                  		dc.w byte_1AAD2-Map_obj86a, byte_1AADD-Map_obj86a
0001C466 0000 0000                  		dc.w byte_1AAE8-Map_obj86a, byte_1AAF3-Map_obj86a
0001C46A 0000 0000                  		dc.w byte_1AAFE-Map_obj86a, byte_1AB04-Map_obj86a
0001C46E 0000 0000                  		dc.w byte_1AB0A-Map_obj86a, byte_1AB15-Map_obj86a
0001C472 0000                       		dc.w byte_1AB20-Map_obj86a
0001C474 02                         byte_1AABC:	dc.b 2
0001C475 F00D 007A F0               		dc.b $F0, $D, 0, $7A, $F0
0001C47A 000D 187A F0               		dc.b 0,	$D, $18, $7A, $F0
0001C47F 02                         byte_1AAC7:	dc.b 2
0001C480 F406 0082 F4               		dc.b $F4, 6, 0,	$82, $F4
0001C485 F402 1882 04               		dc.b $F4, 2, $18, $82, 4
0001C48A 02                         byte_1AAD2:	dc.b 2
0001C48B F804 0088 F8               		dc.b $F8, 4, 0,	$88, $F8
0001C490 0004 1088 F8               		dc.b 0,	4, $10,	$88, $F8
0001C495 02                         byte_1AADD:	dc.b 2
0001C496 F804 008A F8               		dc.b $F8, 4, 0,	$8A, $F8
0001C49B 0004 108A F8               		dc.b 0,	4, $10,	$8A, $F8
0001C4A0 02                         byte_1AAE8:	dc.b 2
0001C4A1 F804 008C F8               		dc.b $F8, 4, 0,	$8C, $F8
0001C4A6 0004 108C F8               		dc.b 0,	4, $10,	$8C, $F8
0001C4AB 02                         byte_1AAF3:	dc.b 2
0001C4AC F406 008E F4               		dc.b $F4, 6, 0,	$8E, $F4
0001C4B1 F402 188E 04               		dc.b $F4, 2, $18, $8E, 4
0001C4B6 01                         byte_1AAFE:	dc.b 1
0001C4B7 F805 0094 F8               		dc.b $F8, 5, 0,	$94, $F8
0001C4BC 01                         byte_1AB04:	dc.b 1
0001C4BD F805 0098 F8               		dc.b $F8, 5, 0,	$98, $F8
0001C4C2 02                         byte_1AB0A:	dc.b 2
0001C4C3 F00D 087A F0               		dc.b $F0, $D, 8, $7A, $F0
0001C4C8 000D 107A F0               		dc.b 0,	$D, $10, $7A, $F0
0001C4CD 02                         byte_1AB15:	dc.b 2
0001C4CE F406 1082 F4               		dc.b $F4, 6, $10, $82, $F4
0001C4D3 F402 0882 04               		dc.b $F4, 2, 8,	$82, 4
0001C4D8 00                         byte_1AB20:	dc.b 0
0001C4DA 00                         		even
0001C4DA 00                         		even
0001C4DA                            
0001C4DA                            ; ===========================================================================
0001C4DA                            ; ---------------------------------------------------------------------------
0001C4DA                            ; Object 3E - prison capsule
0001C4DA                            ; ---------------------------------------------------------------------------
0001C4DA                            
0001C4DA                            Obj3E:					; XREF: Obj_Index
0001C4DA 7000                       		moveq	#0,d0
0001C4DC 1028 0024                  		move.b	$24(a0),d0
0001C4E0 323B 0000                  		move.w	Obj3E_Index(pc,d0.w),d1
0001C4E4 4EBB 1000                  		jsr	Obj3E_Index(pc,d1.w)
0001C4E8 3028 0008                  		move.w	8(a0),d0
0001C4EC 0240 FF80                  		andi.w	#$FF80,d0
0001C4F0 3238 F700                  		move.w	($FFFFF700).w,d1
0001C4F4 0441 0080                  		subi.w	#$80,d1
0001C4F8 0241 FF80                  		andi.w	#$FF80,d1
0001C4FC 9041                       		sub.w	d1,d0
0001C4FE 0C40 0280                  		cmpi.w	#$280,d0
0001C502 6200                       		bhi.s	Obj3E_Delete
0001C504 4EF9 0000 E10A             		jmp	DisplaySprite
0001C50A                            ; ===========================================================================
0001C50A                            
0001C50A                            Obj3E_Delete:
0001C50A 4EF9 0000 E146             		jmp	DeleteObject
0001C510                            ; ===========================================================================
0001C510 0000                       Obj3E_Index:	dc.w Obj3E_Main-Obj3E_Index
0001C512 0000                       		dc.w Obj3E_BodyMain-Obj3E_Index
0001C514 0000                       		dc.w Obj3E_Switched-Obj3E_Index
0001C516 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001C518 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001C51A 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001C51C 0000                       		dc.w Obj3E_Animals-Obj3E_Index
0001C51E 0000                       		dc.w Obj3E_EndAct-Obj3E_Index
0001C520                            
0001C520 0220 0400                  Obj3E_Var:	dc.b 2,	$20, 4,	0	; routine, width, priority, frame
0001C524 040C 0501                  		dc.b 4,	$C, 5, 1
0001C528 0610 0403                  		dc.b 6,	$10, 4,	3
0001C52C 0810 0305                  		dc.b 8,	$10, 3,	5
0001C530                            ; ===========================================================================
0001C530                            
0001C530                            Obj3E_Main:				; XREF: Obj3E_Index
0001C530 217C 0000 0000 0004        		move.l	#Map_obj3E,4(a0)
0001C538 317C 049D 0002             		move.w	#$49D,2(a0)
0001C53E 117C 0004 0001             		move.b	#4,1(a0)
0001C544 3168 000C 0030             		move.w	$C(a0),$30(a0)
0001C54A 7000                       		moveq	#0,d0
0001C54C 1028 0028                  		move.b	$28(a0),d0
0001C550 E548                       		lsl.w	#2,d0
0001C552 43FB 00CC                  		lea	Obj3E_Var(pc,d0.w),a1
0001C556 1159 0024                  		move.b	(a1)+,$24(a0)
0001C55A 1159 0019                  		move.b	(a1)+,$19(a0)
0001C55E 1159 0018                  		move.b	(a1)+,$18(a0)
0001C562 1159 001A                  		move.b	(a1)+,$1A(a0)
0001C566 0C40 0008                  		cmpi.w	#8,d0		; is object type number	02?
0001C56A 6600                       		bne.s	Obj3E_Not02	; if not, branch
0001C56C 117C 0006 0020             		move.b	#6,$20(a0)
0001C572 117C 0008 0021             		move.b	#8,$21(a0)
0001C578                            
0001C578                            Obj3E_Not02:
0001C578 4E75                       		rts	
0001C57A                            ; ===========================================================================
0001C57A                            
0001C57A                            Obj3E_BodyMain:				; XREF: Obj3E_Index
0001C57A 0C38 0002 F7A7             		cmpi.b	#2,($FFFFF7A7).w
0001C580 6700                       		beq.s	Obj3E_ChkOpened
0001C582 323C 002B                  		move.w	#$2B,d1
0001C586 343C 0018                  		move.w	#$18,d2
0001C58A 363C 0018                  		move.w	#$18,d3
0001C58E 3828 0008                  		move.w	8(a0),d4
0001C592 4EF9 0001 04F4             		jmp	SolidObject
0001C598                            ; ===========================================================================
0001C598                            
0001C598                            Obj3E_ChkOpened:
0001C598 4A28 0025                  		tst.b	$25(a0)		; has the prison been opened?
0001C59C 6700                       		beq.s	Obj3E_DoOpen	; if yes, branch
0001C59E 4228 0025                  		clr.b	$25(a0)
0001C5A2 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001C5A8 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001C5AE                            
0001C5AE                            Obj3E_DoOpen:
0001C5AE 117C 0002 001A             		move.b	#2,$1A(a0)	; use frame number 2 (destroyed	prison)
0001C5B4 4E75                       		rts	
0001C5B6                            ; ===========================================================================
0001C5B6                            
0001C5B6                            Obj3E_Switched:				; XREF: Obj3E_Index
0001C5B6 323C 0017                  		move.w	#$17,d1
0001C5BA 343C 0008                  		move.w	#8,d2
0001C5BE 363C 0008                  		move.w	#8,d3
0001C5C2 3828 0008                  		move.w	8(a0),d4
0001C5C6 4EB9 0001 04F4             		jsr	SolidObject
0001C5CC 43F9 0000 0000             		lea	(Ani_obj3E).l,a1
0001C5D2 4EB9 0000 B21C             		jsr	AnimateSprite
0001C5D8 3168 0030 000C             		move.w	$30(a0),$C(a0)
0001C5DE 4A28 0025                  		tst.b	$25(a0)
0001C5E2 6700                       		beq.s	locret_1AC60
0001C5E4 5068 000C                  		addq.w	#8,$C(a0)
0001C5E8 117C 000A 0024             		move.b	#$A,$24(a0)
0001C5EE 317C 003C 001E             		move.w	#$3C,$1E(a0)
0001C5F4 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0001C5F8 4238 F7AA                  		clr.b	($FFFFF7AA).w	; lock screen position
0001C5FC 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
0001C602 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; make Sonic run to	the right
0001C608 4228 0025                  		clr.b	$25(a0)
0001C60C 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001C612 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001C618                            
0001C618                            locret_1AC60:
0001C618 4E75                       		rts	
0001C61A                            ; ===========================================================================
0001C61A                            
0001C61A                            Obj3E_Explosion:			; XREF: Obj3E_Index
0001C61A 7007                       		moveq	#7,d0
0001C61C C038 FE0F                  		and.b	($FFFFFE0F).w,d0
0001C620 6600                       		bne.s	loc_1ACA0
0001C622 4EB9 0000 E5A0             		jsr	SingleObjLoad
0001C628 6600                       		bne.s	loc_1ACA0
0001C62A 12BC 003F                  		move.b	#$3F,0(a1)	; load explosion object
0001C62E 3368 0008 0008             		move.w	8(a0),8(a1)
0001C634 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001C63A 4EB9 0000 33AE             		jsr	(RandomNumber).l
0001C640 7200                       		moveq	#0,d1
0001C642 1200                       		move.b	d0,d1
0001C644 E409                       		lsr.b	#2,d1
0001C646 0441 0020                  		subi.w	#$20,d1
0001C64A D369 0008                  		add.w	d1,8(a1)
0001C64E E048                       		lsr.w	#8,d0
0001C650 E608                       		lsr.b	#3,d0
0001C652 D169 000C                  		add.w	d0,$C(a1)
0001C656                            
0001C656                            loc_1ACA0:
0001C656 5368 001E                  		subq.w	#1,$1E(a0)
0001C65A 6700                       		beq.s	Obj3E_MakeAnimal
0001C65C 4E75                       		rts	
0001C65E                            ; ===========================================================================
0001C65E                            
0001C65E                            Obj3E_MakeAnimal:
0001C65E 11FC 0002 F7A7             		move.b	#2,($FFFFF7A7).w
0001C664 117C 000C 0024             		move.b	#$C,$24(a0)	; replace explosions with animals
0001C66A 117C 0006 001A             		move.b	#6,$1A(a0)
0001C670 317C 0096 001E             		move.w	#$96,$1E(a0)
0001C676 0668 0020 000C             		addi.w	#$20,$C(a0)
0001C67C 7C07                       		moveq	#7,d6
0001C67E 3A3C 009A                  		move.w	#$9A,d5
0001C682 78E4                       		moveq	#-$1C,d4
0001C684                            
0001C684                            Obj3E_Loop:
0001C684 4EB9 0000 E5A0             		jsr	SingleObjLoad
0001C68A 6600                       		bne.s	locret_1ACF8
0001C68C 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
0001C690 3368 0008 0008             		move.w	8(a0),8(a1)
0001C696 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001C69C D969 0008                  		add.w	d4,8(a1)
0001C6A0 5E44                       		addq.w	#7,d4
0001C6A2 3345 0036                  		move.w	d5,$36(a1)
0001C6A6 5145                       		subq.w	#8,d5
0001C6A8 51CE FFDA                  		dbf	d6,Obj3E_Loop	; repeat 7 more	times
0001C6AC                            
0001C6AC                            locret_1ACF8:
0001C6AC 4E75                       		rts	
0001C6AE                            ; ===========================================================================
0001C6AE                            
0001C6AE                            Obj3E_Animals:				; XREF: Obj3E_Index
0001C6AE 7007                       		moveq	#7,d0
0001C6B0 C038 FE0F                  		and.b	($FFFFFE0F).w,d0
0001C6B4 6600                       		bne.s	loc_1AD38
0001C6B6 4EB9 0000 E5A0             		jsr	SingleObjLoad
0001C6BC 6600                       		bne.s	loc_1AD38
0001C6BE 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
0001C6C2 3368 0008 0008             		move.w	8(a0),8(a1)
0001C6C8 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001C6CE 4EB9 0000 33AE             		jsr	(RandomNumber).l
0001C6D4 0240 001F                  		andi.w	#$1F,d0
0001C6D8 5D40                       		subq.w	#6,d0
0001C6DA 4A41                       		tst.w	d1
0001C6DC 6A00                       		bpl.s	loc_1AD2E
0001C6DE 4440                       		neg.w	d0
0001C6E0                            
0001C6E0                            loc_1AD2E:
0001C6E0 D169 0008                  		add.w	d0,8(a1)
0001C6E4 337C 000C 0036             		move.w	#$C,$36(a1)
0001C6EA                            
0001C6EA                            loc_1AD38:
0001C6EA 5368 001E                  		subq.w	#1,$1E(a0)
0001C6EE 6600                       		bne.s	locret_1AD48
0001C6F0 5428 0024                  		addq.b	#2,$24(a0)
0001C6F4 317C 00B4 001E             		move.w	#180,$1E(a0)
0001C6FA                            
0001C6FA                            locret_1AD48:
0001C6FA 4E75                       		rts	
0001C6FC                            ; ===========================================================================
0001C6FC                            
0001C6FC                            Obj3E_EndAct:				; XREF: Obj3E_Index
0001C6FC 703E                       		moveq	#$3E,d0
0001C6FE 7228                       		moveq	#$28,d1
0001C700 7440                       		moveq	#$40,d2
0001C702 43F8 D040                  		lea	($FFFFD040).w,a1 ; load	object RAM
0001C706                            
0001C706                            Obj3E_FindObj28:
0001C706 B211                       		cmp.b	(a1),d1		; is object $28	(animal) loaded?
0001C708 6700                       		beq.s	Obj3E_Obj28Found ; if yes, branch
0001C70A D2C2                       		adda.w	d2,a1		; next object RAM
0001C70C 51C8 FFF8                  		dbf	d0,Obj3E_FindObj28 ; repeat $3E	times
0001C710                            
0001C710 4EB9 0000 F7B0             		jsr	GotThroughAct
0001C716 4EF9 0000 E146             		jmp	DeleteObject
0001C71C                            ; ===========================================================================
0001C71C                            
0001C71C                            Obj3E_Obj28Found:
0001C71C 4E75                       		rts	
0001C71E                            ; ===========================================================================
0001C71E                            Ani_obj3E:
0001C71E                            	include "_anim\obj3E.asm"
0001C71E                            ; ---------------------------------------------------------------------------
0001C71E                            ; Animation script - prison capsule
0001C71E                            ; ---------------------------------------------------------------------------
0001C71E 0000                       		dc.w byte_1AD70-Ani_obj3E
0001C720 0000                       		dc.w byte_1AD70-Ani_obj3E
0001C722 0201 03FF                  byte_1AD70:	dc.b 2,	1, 3, $FF
0001C726                            		even
0001C726                            		even
0001C726                            
0001C726                            ; ---------------------------------------------------------------------------
0001C726                            ; Sprite mappings - prison capsule
0001C726                            ; ---------------------------------------------------------------------------
0001C726                            Map_obj3E:
0001C726                            	include "_maps\obj3E.asm"
0001C726                            ; ---------------------------------------------------------------------------
0001C726                            ; Sprite mappings - prison capsule
0001C726                            ; ---------------------------------------------------------------------------
0001C726 0000 0000                  		dc.w byte_1AD82-Map_obj3E, byte_1ADA6-Map_obj3E
0001C72A 0000 0000                  		dc.w byte_1ADAC-Map_obj3E, byte_1ADCB-Map_obj3E
0001C72E 0000 0000                  		dc.w byte_1ADD1-Map_obj3E, byte_1ADDC-Map_obj3E
0001C732 0000                       		dc.w byte_1ADE2-Map_obj3E
0001C734 07                         byte_1AD82:	dc.b 7
0001C735 E00C 2000 F0               		dc.b $E0, $C, $20, 0, $F0
0001C73A E80D 2004 E0               		dc.b $E8, $D, $20, 4, $E0
0001C73F E80D 200C 00               		dc.b $E8, $D, $20, $C, 0
0001C744 F80E 2014 E0               		dc.b $F8, $E, $20, $14,	$E0
0001C749 F80E 2020 00               		dc.b $F8, $E, $20, $20,	0
0001C74E 100D 202C E0               		dc.b $10, $D, $20, $2C,	$E0
0001C753 100D 2034 00               		dc.b $10, $D, $20, $34,	0
0001C758 01                         byte_1ADA6:	dc.b 1
0001C759 F809 003C F4               		dc.b $F8, 9, 0,	$3C, $F4
0001C75E 06                         byte_1ADAC:	dc.b 6
0001C75F 0008 2042 E0               		dc.b 0,	8, $20,	$42, $E0
0001C764 080C 2045 E0               		dc.b 8,	$C, $20, $45, $E0
0001C769 0004 2049 10               		dc.b 0,	4, $20,	$49, $10
0001C76E 080C 204B 00               		dc.b 8,	$C, $20, $4B, 0
0001C773 100D 202C E0               		dc.b $10, $D, $20, $2C,	$E0
0001C778 100D 2034 00               		dc.b $10, $D, $20, $34,	0
0001C77D 01                         byte_1ADCB:	dc.b 1
0001C77E F809 004F F4               		dc.b $F8, 9, 0,	$4F, $F4
0001C783 02                         byte_1ADD1:	dc.b 2
0001C784 E80E 2055 F0               		dc.b $E8, $E, $20, $55,	$F0
0001C789 000E 2061 F0               		dc.b 0,	$E, $20, $61, $F0
0001C78E 01                         byte_1ADDC:	dc.b 1
0001C78F F007 206D F8               		dc.b $F0, 7, $20, $6D, $F8
0001C794 00                         byte_1ADE2:	dc.b 0
0001C796 00                         		even
0001C796 00                         		even
0001C796                            
0001C796                            ; ---------------------------------------------------------------------------
0001C796                            ; Object touch response	subroutine - $20(a0) in	the object RAM
0001C796                            ; ---------------------------------------------------------------------------
0001C796                            
0001C796                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C796                            
0001C796                            
0001C796                            TouchResponse:				; XREF: Obj01
0001C796 4E71                       		nop	
0001C798 3428 0008                  		move.w	8(a0),d2	; load Sonic's x-axis value
0001C79C 3628 000C                  		move.w	$C(a0),d3	; load Sonic's y-axis value
0001C7A0 5142                       		subq.w	#8,d2
0001C7A2 7A00                       		moveq	#0,d5
0001C7A4 1A28 0016                  		move.b	$16(a0),d5	; load Sonic's height
0001C7A8 5705                       		subq.b	#3,d5
0001C7AA 9645                       		sub.w	d5,d3
0001C7AC 0C28 0039 001A             		cmpi.b	#$39,$1A(a0)	; is Sonic ducking?
0001C7B2 6600                       		bne.s	Touch_NoDuck	; if not, branch
0001C7B4 0643 000C                  		addi.w	#$C,d3
0001C7B8 7A0A                       		moveq	#$A,d5
0001C7BA                            
0001C7BA                            Touch_NoDuck:
0001C7BA 383C 0010                  		move.w	#$10,d4
0001C7BE DA45                       		add.w	d5,d5
0001C7C0 43F8 D800                  		lea	($FFFFD800).w,a1 ; begin checking the object RAM
0001C7C4 3C3C 005F                  		move.w	#$5F,d6
0001C7C8                            
0001C7C8                            Touch_Loop:
0001C7C8 4A29 0001                  		tst.b	1(a1)
0001C7CC 6A00                       		bpl.s	Touch_NextObj
0001C7CE 1029 0020                  		move.b	$20(a1),d0	; load touch response number
0001C7D2 6600                       		bne.s	Touch_Height	; if touch response is not 0, branch
0001C7D4                            
0001C7D4                            Touch_NextObj:
0001C7D4 43E9 0040                  		lea	$40(a1),a1	; next object RAM
0001C7D8 51CE FFEE                  		dbf	d6,Touch_Loop	; repeat $5F more times
0001C7DC                            
0001C7DC 7000                       		moveq	#0,d0
0001C7DE 4E75                       		rts	
0001C7E0                            ; ===========================================================================
0001C7E0 1414                       Touch_Sizes:	dc.b  $14, $14		; width, height
0001C7E2 0C14                       		dc.b   $C, $14
0001C7E4 140C                       		dc.b  $14,  $C
0001C7E6 0410                       		dc.b	4, $10
0001C7E8 0C12                       		dc.b   $C, $12
0001C7EA 1010                       		dc.b  $10, $10
0001C7EC 0606                       		dc.b	6,   6
0001C7EE 180C                       		dc.b  $18,  $C
0001C7F0 0C10                       		dc.b   $C, $10
0001C7F2 100C                       		dc.b  $10,  $C
0001C7F4 0808                       		dc.b	8,   8
0001C7F6 1410                       		dc.b  $14, $10
0001C7F8 1408                       		dc.b  $14,   8
0001C7FA 0E0E                       		dc.b   $E,  $E
0001C7FC 1818                       		dc.b  $18, $18
0001C7FE 2810                       		dc.b  $28, $10
0001C800 1018                       		dc.b  $10, $18
0001C802 0810                       		dc.b	8, $10
0001C804 2070                       		dc.b  $20, $70
0001C806 4020                       		dc.b  $40, $20
0001C808 8020                       		dc.b  $80, $20
0001C80A 2020                       		dc.b  $20, $20
0001C80C 0808                       		dc.b	8,   8
0001C80E 0404                       		dc.b	4,   4
0001C810 2008                       		dc.b  $20,   8
0001C812 0C0C                       		dc.b   $C,  $C
0001C814 0804                       		dc.b	8,   4
0001C816 1804                       		dc.b  $18,   4
0001C818 2804                       		dc.b  $28,   4
0001C81A 0408                       		dc.b	4,   8
0001C81C 0418                       		dc.b	4, $18
0001C81E 0428                       		dc.b	4, $28
0001C820 0420                       		dc.b	4, $20
0001C822 1818                       		dc.b  $18, $18
0001C824 0C18                       		dc.b   $C, $18
0001C826 4808                       		dc.b  $48,   8
0001C828                            ; ===========================================================================
0001C828                            
0001C828                            Touch_Height:				; XREF: TouchResponse
0001C828 0240 003F                  		andi.w	#$3F,d0
0001C82C D040                       		add.w	d0,d0
0001C82E 45FB 00AE                  		lea	Touch_Sizes-2(pc,d0.w),a2
0001C832 7200                       		moveq	#0,d1
0001C834 121A                       		move.b	(a2)+,d1
0001C836 3029 0008                  		move.w	8(a1),d0
0001C83A 9041                       		sub.w	d1,d0
0001C83C 9042                       		sub.w	d2,d0
0001C83E 6400                       		bcc.s	loc_1AE98
0001C840 D241                       		add.w	d1,d1
0001C842 D041                       		add.w	d1,d0
0001C844 6500                       		bcs.s	Touch_Width
0001C846 6000 FF8C                  		bra.w	Touch_NextObj
0001C84A                            ; ===========================================================================
0001C84A                            
0001C84A                            loc_1AE98:
0001C84A B044                       		cmp.w	d4,d0
0001C84C 6200 FF86                  		bhi.w	Touch_NextObj
0001C850                            
0001C850                            Touch_Width:
0001C850 7200                       		moveq	#0,d1
0001C852 121A                       		move.b	(a2)+,d1
0001C854 3029 000C                  		move.w	$C(a1),d0
0001C858 9041                       		sub.w	d1,d0
0001C85A 9043                       		sub.w	d3,d0
0001C85C 6400                       		bcc.s	loc_1AEB6
0001C85E D241                       		add.w	d1,d1
0001C860 D240                       		add.w	d0,d1
0001C862 6500                       		bcs.s	Touch_ChkValue
0001C864 6000 FF6E                  		bra.w	Touch_NextObj
0001C868                            ; ===========================================================================
0001C868                            
0001C868                            loc_1AEB6:
0001C868 B045                       		cmp.w	d5,d0
0001C86A 6200 FF68                  		bhi.w	Touch_NextObj
0001C86E                            
0001C86E                            Touch_ChkValue:
0001C86E 1229 0020                  		move.b	$20(a1),d1	; load touch response number
0001C872 0201 00C0                  		andi.b	#$C0,d1		; is touch response $40	or higher?
0001C876 6700 0000                  		beq.w	Touch_Enemy	; if not, branch
0001C87A 0C01 00C0                  		cmpi.b	#$C0,d1		; is touch response $C0	or higher?
0001C87E 6700 0000                  		beq.w	Touch_Special	; if yes, branch
0001C882 4A01                       		tst.b	d1		; is touch response $80-$BF ?
0001C884 6B00 0000                  		bmi.w	Touch_ChkHurt	; if yes, branch
0001C888                            
0001C888                            ; touch	response is $40-$7F
0001C888                            
0001C888 1029 0020                  		move.b	$20(a1),d0
0001C88C 0200 003F                  		andi.b	#$3F,d0
0001C890 0C00 0006                  		cmpi.b	#6,d0		; is touch response $46	?
0001C894 6700                       		beq.s	Touch_Monitor	; if yes, branch
0001C896 0C68 005A 0030             		cmpi.w	#$5A,$30(a0)
0001C89C 6400 0000                  		bcc.w	locret_1AEF2
0001C8A0 5429 0024                  		addq.b	#2,$24(a1)	; advance the object's routine counter
0001C8A4                            
0001C8A4                            locret_1AEF2:
0001C8A4 4E75                       		rts	
0001C8A6                            ; ===========================================================================
0001C8A6                            
0001C8A6                            Touch_Monitor:
0001C8A6 4A68 0012                  		tst.w	$12(a0)		; is Sonic moving upwards?
0001C8AA 6A00                       		bpl.s	loc_1AF1E	; if not, branch
0001C8AC 3028 000C                  		move.w	$C(a0),d0
0001C8B0 0440 0010                  		subi.w	#$10,d0
0001C8B4 B069 000C                  		cmp.w	$C(a1),d0
0001C8B8 6500                       		bcs.s	locret_1AF2E
0001C8BA 4468 0012                  		neg.w	$12(a0)		; reverse Sonic's y-motion
0001C8BE 337C FE80 0012             		move.w	#-$180,$12(a1)
0001C8C4 4A29 0025                  		tst.b	$25(a1)
0001C8C8 6600                       		bne.s	locret_1AF2E
0001C8CA 5829 0025                  		addq.b	#4,$25(a1)	; advance the monitor's routine counter
0001C8CE 4E75                       		rts	
0001C8D0                            ; ===========================================================================
0001C8D0                            
0001C8D0                            loc_1AF1E:
0001C8D0 0C28 0002 001C             		cmpi.b	#2,$1C(a0)	; is Sonic rolling/jumping?
0001C8D6 6600                       		bne.s	locret_1AF2E
0001C8D8 4468 0012                  		neg.w	$12(a0)		; reverse Sonic's y-motion
0001C8DC 5429 0024                  		addq.b	#2,$24(a1)	; advance the monitor's routine counter
0001C8E0                            
0001C8E0                            locret_1AF2E:
0001C8E0 4E75                       		rts	
0001C8E2                            ; ===========================================================================
0001C8E2                            
0001C8E2                            Touch_Enemy:				; XREF: Touch_ChkValue
0001C8E2 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0001C8E6 6600                       		bne.s	loc_1AF40	; if yes, branch
0001C8E8 0C28 001D 001C             		cmpi.b	#$1D,$1C(a0)	; is Sonic Spin Dashing?
0001C8EE 6700 0000                  		beq.w	loc_1AF40	; if yes, branch
0001C8F2 0C28 0002 001C             		cmpi.b	#2,$1C(a0)	; is Sonic rolling?
0001C8F8 6600 0000                  		bne.w	Touch_ChkHurt	; if not, branch
0001C8FC                            
0001C8FC                            loc_1AF40:
0001C8FC 4A29 0021                  		tst.b	$21(a1)
0001C900 6700                       		beq.s	Touch_KillEnemy
0001C902 4468 0010                  		neg.w	$10(a0)
0001C906 4468 0012                  		neg.w	$12(a0)
0001C90A E0E8 0010                  		asr	$10(a0)
0001C90E E0E8 0012                  		asr	$12(a0)
0001C912 137C 0000 0020             		move.b	#0,$20(a1)
0001C918 5329 0021                  		subq.b	#1,$21(a1)
0001C91C 6600                       		bne.s	locret_1AF68
0001C91E 08E9 0007 0022             		bset	#7,$22(a1)
0001C924                            
0001C924                            locret_1AF68:
0001C924 4E75                       		rts	
0001C926                            ; ===========================================================================
0001C926                            
0001C926                            Touch_KillEnemy:
0001C926 08E9 0007 0022             		bset	#7,$22(a1)
0001C92C 7000                       		moveq	#0,d0
0001C92E 3038 F7D0                  		move.w	($FFFFF7D0).w,d0
0001C932 5478 F7D0                  		addq.w	#2,($FFFFF7D0).w ; add 2 to item bonus counter
0001C936 0C40 0006                  		cmpi.w	#6,d0
0001C93A 6500                       		bcs.s	loc_1AF82
0001C93C 7006                       		moveq	#6,d0
0001C93E                            
0001C93E                            loc_1AF82:
0001C93E 3340 003E                  		move.w	d0,$3E(a1)
0001C942 303B 0000                  		move.w	Enemy_Points(pc,d0.w),d0
0001C946 0C78 0020 F7D0             		cmpi.w	#$20,($FFFFF7D0).w ; have 16 enemies been destroyed?
0001C94C 6500                       		bcs.s	loc_1AF9C	; if not, branch
0001C94E 303C 03E8                  		move.w	#1000,d0	; fix bonus to 10000
0001C952 337C 000A 003E             		move.w	#$A,$3E(a1)
0001C958                            
0001C958                            loc_1AF9C:
0001C958 6100 0000                  		bsr.w	AddPoints
0001C95C 12BC 0027                  		move.b	#$27,0(a1)	; change object	to points
0001C960 137C 0000 0024             		move.b	#0,$24(a1)
0001C966 4A68 0012                  		tst.w	$12(a0)
0001C96A 6B00                       		bmi.s	loc_1AFC2
0001C96C 3028 000C                  		move.w	$C(a0),d0
0001C970 B069 000C                  		cmp.w	$C(a1),d0
0001C974 6400                       		bcc.s	loc_1AFCA
0001C976 4468 0012                  		neg.w	$12(a0)
0001C97A 4E75                       		rts	
0001C97C                            ; ===========================================================================
0001C97C                            
0001C97C                            loc_1AFC2:
0001C97C 0668 0100 0012             		addi.w	#$100,$12(a0)
0001C982 4E75                       		rts	
0001C984                            ; ===========================================================================
0001C984                            
0001C984                            loc_1AFCA:
0001C984 0468 0100 0012             		subi.w	#$100,$12(a0)
0001C98A 4E75                       		rts	
0001C98C                            ; ===========================================================================
0001C98C 000A 0014 0032 0064        Enemy_Points:	dc.w 10, 20, 50, 100
0001C994                            ; ===========================================================================
0001C994                            
0001C994                            loc_1AFDA:				; XREF: Touch_CatKiller
0001C994 08E9 0007 0022             		bset	#7,$22(a1)
0001C99A                            
0001C99A                            Touch_ChkHurt:				; XREF: Touch_ChkValue
0001C99A 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0001C99E 6700                       		beq.s	Touch_Hurt	; if not, branch
0001C9A0                            
0001C9A0                            loc_1AFE6:				; XREF: Touch_Hurt
0001C9A0 70FF                       		moveq	#-1,d0
0001C9A2 4E75                       		rts	
0001C9A4                            ; ===========================================================================
0001C9A4                            
0001C9A4                            Touch_Hurt:				; XREF: Touch_ChkHurt
0001C9A4 4E71                       		nop	
0001C9A6 4A68 0030                  		tst.w	$30(a0)
0001C9AA 66F4                       		bne.s	loc_1AFE6
0001C9AC 2449                       		movea.l	a1,a2
0001C9AE                            
0001C9AE                            ; End of function TouchResponse
0001C9AE                            ; continue straight to HurtSonic
0001C9AE                            
0001C9AE                            ; ---------------------------------------------------------------------------
0001C9AE                            ; Hurting Sonic	subroutine
0001C9AE                            ; ---------------------------------------------------------------------------
0001C9AE                            
0001C9AE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C9AE                            
0001C9AE                            
0001C9AE                            HurtSonic:
0001C9AE 4A38 FE2C                  		tst.b	($FFFFFE2C).w	; does Sonic have a shield?
0001C9B2 6600                       		bne.s	Hurt_Shield	; if yes, branch
0001C9B4 4A78 FE20                  		tst.w	($FFFFFE20).w	; does Sonic have any rings?
0001C9B8 6700 0000                  		beq.w	Hurt_NoRings	; if not, branch
0001C9BC 4EB9 0000 E5A0             		jsr	SingleObjLoad
0001C9C2 6600                       		bne.s	Hurt_Shield
0001C9C4 12BC 0037                  		move.b	#$37,0(a1)	; load bouncing	multi rings object
0001C9C8 3368 0008 0008             		move.w	8(a0),8(a1)
0001C9CE 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001C9D4                            
0001C9D4                            Hurt_Shield:
0001C9D4 11FC 0000 FE2C             		move.b	#0,($FFFFFE2C).w ; remove shield
0001C9DA 117C 0004 0024             		move.b	#4,$24(a0)
0001C9E0 4EB9 0001 4992             		jsr	Sonic_ResetOnFloor
0001C9E6 08E8 0001 0022             		bset	#1,$22(a0)
0001C9EC 317C FC00 0012             		move.w	#-$400,$12(a0)	; make Sonic bounce away from the object
0001C9F2 317C FE00 0010             		move.w	#-$200,$10(a0)
0001C9F8 0828 0006 0022             		btst	#6,$22(a0)
0001C9FE 6700                       		beq.s	Hurt_Reverse
0001CA00 317C FE00 0012             		move.w	#-$200,$12(a0)
0001CA06 317C FF00 0010             		move.w	#-$100,$10(a0)
0001CA0C                            
0001CA0C                            Hurt_Reverse:
0001CA0C 3028 0008                  		move.w	8(a0),d0
0001CA10 B06A 0008                  		cmp.w	8(a2),d0
0001CA14 6500                       		bcs.s	Hurt_ChkSpikes	; if Sonic is left of the object, branch
0001CA16 4468 0010                  		neg.w	$10(a0)		; if Sonic is right of the object, reverse
0001CA1A                            
0001CA1A                            Hurt_ChkSpikes:
0001CA1A 117C 0000 0039             		move.b	#0,$39(a0)	; clear Spin Dash flag
0001CA20 317C 0000 0014             		move.w	#0,$14(a0)
0001CA26 117C 001A 001C             		move.b	#$1A,$1C(a0)
0001CA2C 317C 0078 0030             		move.w	#$78,$30(a0)
0001CA32 303C 00A3                  		move.w	#$A3,d0		; load normal damage sound
0001CA36 0C12 0036                  		cmpi.b	#$36,(a2)	; was damage caused by spikes?
0001CA3A 6600                       		bne.s	Hurt_Sound	; if not, branch
0001CA3C 0C12 0016                  		cmpi.b	#$16,(a2)	; was damage caused by LZ harpoon?
0001CA40 6600                       		bne.s	Hurt_Sound	; if not, branch
0001CA42 303C 00A6                  		move.w	#$A6,d0		; load spikes damage sound
0001CA46                            
0001CA46                            Hurt_Sound:
0001CA46 4EB9 0000 1476             		jsr	(PlaySound_Special).l
0001CA4C 70FF                       		moveq	#-1,d0
0001CA4E 4E75                       		rts	
0001CA50                            ; ===========================================================================
0001CA50                            
0001CA50                            Hurt_NoRings:
0001CA50 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug mode	cheat on?
0001CA54 6600 FF7E                  		bne.w	Hurt_Shield	; if yes, branch
0001CA58                            ; End of function HurtSonic
0001CA58                            
0001CA58                            ; ---------------------------------------------------------------------------
0001CA58                            ; Subroutine to	kill Sonic
0001CA58                            ; ---------------------------------------------------------------------------
0001CA58                            
0001CA58                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CA58                            
0001CA58                            
0001CA58                            KillSonic:
0001CA58 4238 FE19                  		clr.b   (Super_Sonic_Flag).w ; Revert Sonic to Normal
0001CA5C 31FC 0600 F760             		move.w  #$600,(Sonic_top_speed).w ; Revert speeds
0001CA62 31FC 000C F762             		move.w  #$C,(Sonic_acceleration).w ; ^^^
0001CA68 31FC 0080 F764             		move.w  #$80,(Sonic_deceleration).w ; ^^^
0001CA6E 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	active?
0001CA72 6600                       		bne.s	Kill_NoDeath	; if yes, branch
0001CA74 11FC 0000 FE2D             		move.b	#0,($FFFFFE2D).w ; remove invincibility
0001CA7A 117C 0006 0024             		move.b	#6,$24(a0)
0001CA80 4EB9 0001 4992             		jsr	Sonic_ResetOnFloor
0001CA86 08E8 0001 0022             		bset	#1,$22(a0)
0001CA8C 317C F900 0012             		move.w	#-$700,$12(a0)
0001CA92 317C 0000 0010             		move.w	#0,$10(a0)
0001CA98 317C 0000 0014             		move.w	#0,$14(a0)
0001CA9E 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001CAA4 117C 0016 001C             		move.b	#$16,$1C(a0)
0001CAAA 08E8 0007 0002             		bset	#7,2(a0)
0001CAB0 303C 00A3                  		move.w	#$A3,d0		; play normal death sound
0001CAB4 0C12 0036                  		cmpi.b	#$36,(a2)	; check	if you were killed by spikes
0001CAB8 6600                       		bne.s	Kill_Sound
0001CABA 303C 00A6                  		move.w	#$A6,d0		; play spikes death sound
0001CABE                            
0001CABE                            Kill_Sound:
0001CABE 4EB9 0000 1476             		jsr	(PlaySound_Special).l
0001CAC4                            
0001CAC4                            Kill_NoDeath:
0001CAC4 70FF                       		moveq	#-1,d0
0001CAC6 4E75                       		rts	
0001CAC8                            ; End of function KillSonic
0001CAC8                            
0001CAC8                            
0001CAC8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CAC8                            
0001CAC8                            
0001CAC8                            Touch_Special:				; XREF: Touch_ChkValue
0001CAC8 1229 0020                  		move.b	$20(a1),d1
0001CACC 0201 003F                  		andi.b	#$3F,d1
0001CAD0 0C01 000B                  		cmpi.b	#$B,d1		; is touch response $CB	?
0001CAD4 6700                       		beq.s	Touch_CatKiller	; if yes, branch
0001CAD6 0C01 000C                  		cmpi.b	#$C,d1		; is touch response $CC	?
0001CADA 6700                       		beq.s	Touch_Yadrin	; if yes, branch
0001CADC 0C01 0017                  		cmpi.b	#$17,d1		; is touch response $D7	?
0001CAE0 6700                       		beq.s	Touch_D7orE1	; if yes, branch
0001CAE2 0C01 0021                  		cmpi.b	#$21,d1		; is touch response $E1	?
0001CAE6 6700                       		beq.s	Touch_D7orE1	; if yes, branch
0001CAE8 4E75                       		rts	
0001CAEA                            ; ===========================================================================
0001CAEA                            
0001CAEA                            Touch_CatKiller:			; XREF: Touch_Special
0001CAEA 6000 FEA8                  		bra.w	loc_1AFDA
0001CAEE                            ; ===========================================================================
0001CAEE                            
0001CAEE                            Touch_Yadrin:				; XREF: Touch_Special
0001CAEE 9A40                       		sub.w	d0,d5
0001CAF0 0C45 0008                  		cmpi.w	#8,d5
0001CAF4 6400                       		bcc.s	loc_1B144
0001CAF6 3029 0008                  		move.w	8(a1),d0
0001CAFA 5940                       		subq.w	#4,d0
0001CAFC 0829 0000 0022             		btst	#0,$22(a1)
0001CB02 6700                       		beq.s	loc_1B130
0001CB04 0440 0010                  		subi.w	#$10,d0
0001CB08                            
0001CB08                            loc_1B130:
0001CB08 9042                       		sub.w	d2,d0
0001CB0A 6400                       		bcc.s	loc_1B13C
0001CB0C 0640 0018                  		addi.w	#$18,d0
0001CB10 6500                       		bcs.s	loc_1B140
0001CB12 6000                       		bra.s	loc_1B144
0001CB14                            ; ===========================================================================
0001CB14                            
0001CB14                            loc_1B13C:
0001CB14 B044                       		cmp.w	d4,d0
0001CB16 6200                       		bhi.s	loc_1B144
0001CB18                            
0001CB18                            loc_1B140:
0001CB18 6000 FE80                  		bra.w	Touch_ChkHurt
0001CB1C                            ; ===========================================================================
0001CB1C                            
0001CB1C                            loc_1B144:
0001CB1C 6000 FDC4                  		bra.w	Touch_Enemy
0001CB20                            ; ===========================================================================
0001CB20                            
0001CB20                            Touch_D7orE1:				; XREF: Touch_Special
0001CB20 5229 0021                  		addq.b	#1,$21(a1)
0001CB24 4E75                       		rts	
0001CB26                            ; End of function Touch_Special
0001CB26                            
0001CB26                            ; ---------------------------------------------------------------------------
0001CB26                            ; Subroutine to	show the special stage layout
0001CB26                            ; ---------------------------------------------------------------------------
0001CB26                            
0001CB26                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CB26                            
0001CB26                            
0001CB26                            SS_ShowLayout:				; XREF: SpecialStage
0001CB26 6100 0000                  		bsr.w	SS_AniWallsRings
0001CB2A 6100 0000                  		bsr.w	SS_AniItems
0001CB2E 3F05                       		move.w	d5,-(sp)
0001CB30 43F8 8000                  		lea	($FFFF8000).w,a1
0001CB34 1038 F780                  		move.b	($FFFFF780).w,d0
0001CB38                            ;		andi.b	#$FC,d0
0001CB38 4EB9 0000 33D4             		jsr	(CalcSine).l
0001CB3E 3800                       		move.w	d0,d4
0001CB40 3A01                       		move.w	d1,d5
0001CB42 C9FC 0018                  		muls.w	#$18,d4
0001CB46 CBFC 0018                  		muls.w	#$18,d5
0001CB4A 7400                       		moveq	#0,d2
0001CB4C 3438 F700                  		move.w	($FFFFF700).w,d2
0001CB50 84FC 0018                  		divu.w	#$18,d2
0001CB54 4842                       		swap	d2
0001CB56 4442                       		neg.w	d2
0001CB58 0642 FF4C                  		addi.w	#-$B4,d2
0001CB5C 7600                       		moveq	#0,d3
0001CB5E 3638 F704                  		move.w	($FFFFF704).w,d3
0001CB62 86FC 0018                  		divu.w	#$18,d3
0001CB66 4843                       		swap	d3
0001CB68 4443                       		neg.w	d3
0001CB6A 0643 FF4C                  		addi.w	#-$B4,d3
0001CB6E 3E3C 000F                  		move.w	#$F,d7
0001CB72                            
0001CB72                            loc_1B19E:
0001CB72 48A7 E000                  		movem.w	d0-d2,-(sp)
0001CB76 48A7 C000                  		movem.w	d0-d1,-(sp)
0001CB7A 4440                       		neg.w	d0
0001CB7C C3C2                       		muls.w	d2,d1
0001CB7E C1C3                       		muls.w	d3,d0
0001CB80 2C00                       		move.l	d0,d6
0001CB82 DC81                       		add.l	d1,d6
0001CB84 4C9F 0003                  		movem.w	(sp)+,d0-d1
0001CB88 C1C2                       		muls.w	d2,d0
0001CB8A C3C3                       		muls.w	d3,d1
0001CB8C D280                       		add.l	d0,d1
0001CB8E 2406                       		move.l	d6,d2
0001CB90 3C3C 000F                  		move.w	#$F,d6
0001CB94                            
0001CB94                            loc_1B1C0:
0001CB94 2002                       		move.l	d2,d0
0001CB96 E080                       		asr.l	#8,d0
0001CB98 32C0                       		move.w	d0,(a1)+
0001CB9A 2001                       		move.l	d1,d0
0001CB9C E080                       		asr.l	#8,d0
0001CB9E 32C0                       		move.w	d0,(a1)+
0001CBA0 D485                       		add.l	d5,d2
0001CBA2 D284                       		add.l	d4,d1
0001CBA4 51CE FFEE                  		dbf	d6,loc_1B1C0
0001CBA8                            
0001CBA8 4C9F 0007                  		movem.w	(sp)+,d0-d2
0001CBAC 0643 0018                  		addi.w	#$18,d3
0001CBB0 51CF FFC0                  		dbf	d7,loc_1B19E
0001CBB4                            
0001CBB4 3A1F                       		move.w	(sp)+,d5
0001CBB6 41F9 00FF 0000             		lea	($FF0000).l,a0
0001CBBC 7000                       		moveq	#0,d0
0001CBBE 3038 F704                  		move.w	($FFFFF704).w,d0
0001CBC2 80FC 0018                  		divu.w	#$18,d0
0001CBC6 C0FC 0080                  		mulu.w	#$80,d0
0001CBCA D1C0                       		adda.l	d0,a0
0001CBCC 7000                       		moveq	#0,d0
0001CBCE 3038 F700                  		move.w	($FFFFF700).w,d0
0001CBD2 80FC 0018                  		divu.w	#$18,d0
0001CBD6 D0C0                       		adda.w	d0,a0
0001CBD8 49F8 8000                  		lea	($FFFF8000).w,a4
0001CBDC 3E3C 000F                  		move.w	#$F,d7
0001CBE0                            
0001CBE0                            loc_1B20C:
0001CBE0 3C3C 000F                  		move.w	#$F,d6
0001CBE4                            
0001CBE4                            loc_1B210:
0001CBE4 7000                       		moveq	#0,d0
0001CBE6 1018                       		move.b	(a0)+,d0
0001CBE8 6700                       		beq.s	loc_1B268
0001CBEA 0C00 004E                  		cmpi.b	#$4E,d0
0001CBEE 6200                       		bhi.s	loc_1B268
0001CBF0 3614                       		move.w	(a4),d3
0001CBF2 0643 0120                  		addi.w	#$120,d3
0001CBF6 0C43 0070                  		cmpi.w	#$70,d3
0001CBFA 6500                       		bcs.s	loc_1B268
0001CBFC 0C43 01D0                  		cmpi.w	#$1D0,d3
0001CC00 6400                       		bcc.s	loc_1B268
0001CC02 342C 0002                  		move.w	2(a4),d2
0001CC06 0642 00F0                  		addi.w	#$F0,d2
0001CC0A 0C42 0070                  		cmpi.w	#$70,d2
0001CC0E 6500                       		bcs.s	loc_1B268
0001CC10 0C42 0170                  		cmpi.w	#$170,d2
0001CC14 6400                       		bcc.s	loc_1B268
0001CC16 4BF9 00FF 4000             		lea	($FF4000).l,a5
0001CC1C E748                       		lsl.w	#3,d0
0001CC1E 4BF5 0000                  		lea	(a5,d0.w),a5
0001CC22 225D                       		movea.l	(a5)+,a1
0001CC24 321D                       		move.w	(a5)+,d1
0001CC26 D241                       		add.w	d1,d1
0001CC28 D2F1 1000                  		adda.w	(a1,d1.w),a1
0001CC2C 365D                       		movea.w	(a5)+,a3
0001CC2E 7200                       		moveq	#0,d1
0001CC30 1219                       		move.b	(a1)+,d1
0001CC32 5301                       		subq.b	#1,d1
0001CC34 6B00                       		bmi.s	loc_1B268
0001CC36 4EB9 0000 E26A             		jsr	sub_D762
0001CC3C                            
0001CC3C                            loc_1B268:
0001CC3C 584C                       		addq.w	#4,a4
0001CC3E 51CE FFA4                  		dbf	d6,loc_1B210
0001CC42                            
0001CC42 41E8 0070                  		lea	$70(a0),a0
0001CC46 51CF FF98                  		dbf	d7,loc_1B20C
0001CC4A                            
0001CC4A 11C5 F62C                  		move.b	d5,($FFFFF62C).w
0001CC4E 0C05 0050                  		cmpi.b	#$50,d5
0001CC52 6700                       		beq.s	loc_1B288
0001CC54 24BC 0000 0000             		move.l	#0,(a2)
0001CC5A 4E75                       		rts	
0001CC5C                            ; ===========================================================================
0001CC5C                            
0001CC5C                            loc_1B288:
0001CC5C 157C 0000 FFFB             		move.b	#0,-5(a2)
0001CC62 4E75                       		rts	
0001CC64                            ; End of function SS_ShowLayout
0001CC64                            
0001CC64                            ; ---------------------------------------------------------------------------
0001CC64                            ; Subroutine to	animate	walls and rings	in the special stage
0001CC64                            ; ---------------------------------------------------------------------------
0001CC64                            
0001CC64                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CC64                            
0001CC64                            
0001CC64                            SS_AniWallsRings:			; XREF: SS_ShowLayout
0001CC64 43F9 00FF 400C             		lea	($FF400C).l,a1
0001CC6A 7000                       		moveq	#0,d0
0001CC6C 1038 F780                  		move.b	($FFFFF780).w,d0
0001CC70 E408                       		lsr.b	#2,d0
0001CC72 0240 000F                  		andi.w	#$F,d0
0001CC76 7223                       		moveq	#$23,d1
0001CC78                            
0001CC78                            loc_1B2A4:
0001CC78 3280                       		move.w	d0,(a1)
0001CC7A 5049                       		addq.w	#8,a1
0001CC7C 51C9 FFFA                  		dbf	d1,loc_1B2A4
0001CC80                            
0001CC80 43F9 00FF 4005             		lea	($FF4005).l,a1
0001CC86 5338 FEC2                  		subq.b	#1,($FFFFFEC2).w
0001CC8A 6A00                       		bpl.s	loc_1B2C8
0001CC8C 11FC 0007 FEC2             		move.b	#7,($FFFFFEC2).w
0001CC92 5238 FEC3                  		addq.b	#1,($FFFFFEC3).w
0001CC96 0238 0003 FEC3             		andi.b	#3,($FFFFFEC3).w
0001CC9C                            
0001CC9C                            loc_1B2C8:
0001CC9C 1378 FEC3 01D0             		move.b	($FFFFFEC3).w,$1D0(a1)
0001CCA2 5338 FEC4                  		subq.b	#1,($FFFFFEC4).w
0001CCA6 6A00                       		bpl.s	loc_1B2E4
0001CCA8 11FC 0007 FEC4             		move.b	#7,($FFFFFEC4).w
0001CCAE 5238 FEC5                  		addq.b	#1,($FFFFFEC5).w
0001CCB2 0238 0001 FEC5             		andi.b	#1,($FFFFFEC5).w
0001CCB8                            
0001CCB8                            loc_1B2E4:
0001CCB8 1038 FEC5                  		move.b	($FFFFFEC5).w,d0
0001CCBC 1340 0138                  		move.b	d0,$138(a1)
0001CCC0 1340 0160                  		move.b	d0,$160(a1)
0001CCC4 1340 0148                  		move.b	d0,$148(a1)
0001CCC8 1340 0150                  		move.b	d0,$150(a1)
0001CCCC 1340 01D8                  		move.b	d0,$1D8(a1)
0001CCD0 1340 01E0                  		move.b	d0,$1E0(a1)
0001CCD4 1340 01E8                  		move.b	d0,$1E8(a1)
0001CCD8 1340 01F0                  		move.b	d0,$1F0(a1)
0001CCDC 1340 01F8                  		move.b	d0,$1F8(a1)
0001CCE0 1340 0200                  		move.b	d0,$200(a1)
0001CCE4 5338 FEC6                  		subq.b	#1,($FFFFFEC6).w
0001CCE8 6A00                       		bpl.s	loc_1B326
0001CCEA 11FC 0004 FEC6             		move.b	#4,($FFFFFEC6).w
0001CCF0 5238 FEC7                  		addq.b	#1,($FFFFFEC7).w
0001CCF4 0238 0003 FEC7             		andi.b	#3,($FFFFFEC7).w
0001CCFA                            
0001CCFA                            loc_1B326:
0001CCFA 1038 FEC7                  		move.b	($FFFFFEC7).w,d0
0001CCFE 1340 0168                  		move.b	d0,$168(a1)
0001CD02 1340 0170                  		move.b	d0,$170(a1)
0001CD06 1340 0178                  		move.b	d0,$178(a1)
0001CD0A 1340 0180                  		move.b	d0,$180(a1)
0001CD0E 5338 FEC0                  		subq.b	#1,($FFFFFEC0).w
0001CD12 6A00                       		bpl.s	loc_1B350
0001CD14 11FC 0007 FEC0             		move.b	#7,($FFFFFEC0).w
0001CD1A 5338 FEC1                  		subq.b	#1,($FFFFFEC1).w
0001CD1E 0238 0007 FEC1             		andi.b	#7,($FFFFFEC1).w
0001CD24                            
0001CD24                            loc_1B350:
0001CD24 43F9 00FF 4016             		lea	($FF4016).l,a1
0001CD2A 41F9 0000 0000             		lea	(SS_WaRiVramSet).l,a0
0001CD30 7000                       		moveq	#0,d0
0001CD32 1038 FEC1                  		move.b	($FFFFFEC1).w,d0
0001CD36 D040                       		add.w	d0,d0
0001CD38 41F0 0000                  		lea	(a0,d0.w),a0
0001CD3C 3290                       		move.w	(a0),(a1)
0001CD3E 3368 0002 0008             		move.w	2(a0),8(a1)
0001CD44 3368 0004 0010             		move.w	4(a0),$10(a1)
0001CD4A 3368 0006 0018             		move.w	6(a0),$18(a1)
0001CD50 3368 0008 0020             		move.w	8(a0),$20(a1)
0001CD56 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001CD5C 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001CD62 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001CD68 D0FC 0020                  		adda.w	#$20,a0
0001CD6C D2FC 0048                  		adda.w	#$48,a1
0001CD70 3290                       		move.w	(a0),(a1)
0001CD72 3368 0002 0008             		move.w	2(a0),8(a1)
0001CD78 3368 0004 0010             		move.w	4(a0),$10(a1)
0001CD7E 3368 0006 0018             		move.w	6(a0),$18(a1)
0001CD84 3368 0008 0020             		move.w	8(a0),$20(a1)
0001CD8A 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001CD90 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001CD96 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001CD9C D0FC 0020                  		adda.w	#$20,a0
0001CDA0 D2FC 0048                  		adda.w	#$48,a1
0001CDA4 3290                       		move.w	(a0),(a1)
0001CDA6 3368 0002 0008             		move.w	2(a0),8(a1)
0001CDAC 3368 0004 0010             		move.w	4(a0),$10(a1)
0001CDB2 3368 0006 0018             		move.w	6(a0),$18(a1)
0001CDB8 3368 0008 0020             		move.w	8(a0),$20(a1)
0001CDBE 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001CDC4 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001CDCA 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001CDD0 D0FC 0020                  		adda.w	#$20,a0
0001CDD4 D2FC 0048                  		adda.w	#$48,a1
0001CDD8 3290                       		move.w	(a0),(a1)
0001CDDA 3368 0002 0008             		move.w	2(a0),8(a1)
0001CDE0 3368 0004 0010             		move.w	4(a0),$10(a1)
0001CDE6 3368 0006 0018             		move.w	6(a0),$18(a1)
0001CDEC 3368 0008 0020             		move.w	8(a0),$20(a1)
0001CDF2 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001CDF8 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001CDFE 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001CE04 D0FC 0020                  		adda.w	#$20,a0
0001CE08 D2FC 0048                  		adda.w	#$48,a1
0001CE0C 4E75                       		rts	
0001CE0E                            ; End of function SS_AniWallsRings
0001CE0E                            
0001CE0E                            ; ===========================================================================
0001CE0E 0142 6142 0142 0142 0142+  SS_WaRiVramSet:	dc.w $142, $6142, $142,	$142, $142, $142, $142,	$6142
0001CE1E 0142 6142 0142 0142 0142+  		dc.w $142, $6142, $142,	$142, $142, $142, $142,	$6142
0001CE2E 2142 0142 2142 2142 2142+  		dc.w $2142, $142, $2142, $2142,	$2142, $2142, $2142, $142
0001CE3E 2142 0142 2142 2142 2142+  		dc.w $2142, $142, $2142, $2142,	$2142, $2142, $2142, $142
0001CE4E 4142 2142 4142 4142 4142+  		dc.w $4142, $2142, $4142, $4142, $4142,	$4142, $4142, $2142
0001CE5E 4142 2142 4142 4142 4142+  		dc.w $4142, $2142, $4142, $4142, $4142,	$4142, $4142, $2142
0001CE6E 6142 4142 6142 6142 6142+  		dc.w $6142, $4142, $6142, $6142, $6142,	$6142, $6142, $4142
0001CE7E 6142 4142 6142 6142 6142+  		dc.w $6142, $4142, $6142, $6142, $6142,	$6142, $6142, $4142
0001CE8E                            ; ---------------------------------------------------------------------------
0001CE8E                            ; Subroutine to	remove items when you collect them in the special stage
0001CE8E                            ; ---------------------------------------------------------------------------
0001CE8E                            
0001CE8E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CE8E                            
0001CE8E                            
0001CE8E                            SS_RemoveCollectedItem:			; XREF: Obj09_ChkItems
0001CE8E 45F9 00FF 4400             		lea	($FF4400).l,a2
0001CE94 303C 001F                  		move.w	#$1F,d0
0001CE98                            
0001CE98                            loc_1B4C4:
0001CE98 4A12                       		tst.b	(a2)
0001CE9A 6700                       		beq.s	locret_1B4CE
0001CE9C 504A                       		addq.w	#8,a2
0001CE9E 51C8 FFF8                  		dbf	d0,loc_1B4C4
0001CEA2                            
0001CEA2                            locret_1B4CE:
0001CEA2 4E75                       		rts	
0001CEA4                            ; End of function SS_RemoveCollectedItem
0001CEA4                            
0001CEA4                            ; ---------------------------------------------------------------------------
0001CEA4                            ; Subroutine to	animate	special	stage items when you touch them
0001CEA4                            ; ---------------------------------------------------------------------------
0001CEA4                            
0001CEA4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CEA4                            
0001CEA4                            
0001CEA4                            SS_AniItems:				; XREF: SS_ShowLayout
0001CEA4 41F9 00FF 4400             		lea	($FF4400).l,a0
0001CEAA 3E3C 001F                  		move.w	#$1F,d7
0001CEAE                            
0001CEAE                            loc_1B4DA:
0001CEAE 7000                       		moveq	#0,d0
0001CEB0 1010                       		move.b	(a0),d0
0001CEB2 6700                       		beq.s	loc_1B4E8
0001CEB4 E548                       		lsl.w	#2,d0
0001CEB6 227B 0000                  		movea.l	SS_AniIndex-4(pc,d0.w),a1
0001CEBA 4E91                       		jsr	(a1)
0001CEBC                            
0001CEBC                            loc_1B4E8:
0001CEBC 5048                       		addq.w	#8,a0
0001CEBE                            
0001CEBE                            loc_1B4EA:
0001CEBE 51CF FFEE                  		dbf	d7,loc_1B4DA
0001CEC2                            
0001CEC2 4E75                       		rts	
0001CEC4                            ; End of function SS_AniItems
0001CEC4                            
0001CEC4                            ; ===========================================================================
0001CEC4 0000 0000                  SS_AniIndex:	dc.l SS_AniRingSparks
0001CEC8 0000 0000                  		dc.l SS_AniBumper
0001CECC 0000 0000                  		dc.l SS_Ani1Up
0001CED0 0000 0000                  		dc.l SS_AniReverse
0001CED4 0000 0000                  		dc.l SS_AniEmeraldSparks
0001CED8 0000 0000                  		dc.l SS_AniGlassBlock
0001CEDC                            ; ===========================================================================
0001CEDC                            
0001CEDC                            SS_AniRingSparks:			; XREF: SS_AniIndex
0001CEDC 5328 0002                  		subq.b	#1,2(a0)
0001CEE0 6A00                       		bpl.s	locret_1B530
0001CEE2 117C 0005 0002             		move.b	#5,2(a0)
0001CEE8 7000                       		moveq	#0,d0
0001CEEA 1028 0003                  		move.b	3(a0),d0
0001CEEE 5228 0003                  		addq.b	#1,3(a0)
0001CEF2 2268 0004                  		movea.l	4(a0),a1
0001CEF6 103B 0000                  		move.b	SS_AniRingData(pc,d0.w),d0
0001CEFA 1280                       		move.b	d0,(a1)
0001CEFC 6600                       		bne.s	locret_1B530
0001CEFE 4290                       		clr.l	(a0)
0001CF00 42A8 0004                  		clr.l	4(a0)
0001CF04                            
0001CF04                            locret_1B530:
0001CF04 4E75                       		rts	
0001CF06                            ; ===========================================================================
0001CF06 4243 4445 0000             SS_AniRingData:	dc.b $42, $43, $44, $45, 0, 0
0001CF0C                            ; ===========================================================================
0001CF0C                            
0001CF0C                            SS_AniBumper:				; XREF: SS_AniIndex
0001CF0C 5328 0002                  		subq.b	#1,2(a0)
0001CF10 6A00                       		bpl.s	locret_1B566
0001CF12 117C 0007 0002             		move.b	#7,2(a0)
0001CF18 7000                       		moveq	#0,d0
0001CF1A 1028 0003                  		move.b	3(a0),d0
0001CF1E 5228 0003                  		addq.b	#1,3(a0)
0001CF22 2268 0004                  		movea.l	4(a0),a1
0001CF26 103B 0000                  		move.b	SS_AniBumpData(pc,d0.w),d0
0001CF2A 6600                       		bne.s	loc_1B564
0001CF2C 4290                       		clr.l	(a0)
0001CF2E 42A8 0004                  		clr.l	4(a0)
0001CF32 12BC 0025                  		move.b	#$25,(a1)
0001CF36 4E75                       		rts	
0001CF38                            ; ===========================================================================
0001CF38                            
0001CF38                            loc_1B564:
0001CF38 1280                       		move.b	d0,(a1)
0001CF3A                            
0001CF3A                            locret_1B566:
0001CF3A 4E75                       		rts	
0001CF3C                            ; ===========================================================================
0001CF3C 3233 3233 0000             SS_AniBumpData:	dc.b $32, $33, $32, $33, 0, 0
0001CF42                            ; ===========================================================================
0001CF42                            
0001CF42                            SS_Ani1Up:				; XREF: SS_AniIndex
0001CF42 5328 0002                  		subq.b	#1,2(a0)
0001CF46 6A00                       		bpl.s	locret_1B596
0001CF48 117C 0005 0002             		move.b	#5,2(a0)
0001CF4E 7000                       		moveq	#0,d0
0001CF50 1028 0003                  		move.b	3(a0),d0
0001CF54 5228 0003                  		addq.b	#1,3(a0)
0001CF58 2268 0004                  		movea.l	4(a0),a1
0001CF5C 103B 0000                  		move.b	SS_Ani1UpData(pc,d0.w),d0
0001CF60 1280                       		move.b	d0,(a1)
0001CF62 6600                       		bne.s	locret_1B596
0001CF64 4290                       		clr.l	(a0)
0001CF66 42A8 0004                  		clr.l	4(a0)
0001CF6A                            
0001CF6A                            locret_1B596:
0001CF6A 4E75                       		rts	
0001CF6C                            ; ===========================================================================
0001CF6C 4647 4849 0000             SS_Ani1UpData:	dc.b $46, $47, $48, $49, 0, 0
0001CF72                            ; ===========================================================================
0001CF72                            
0001CF72                            SS_AniReverse:				; XREF: SS_AniIndex
0001CF72 5328 0002                  		subq.b	#1,2(a0)
0001CF76 6A00                       		bpl.s	locret_1B5CC
0001CF78 117C 0007 0002             		move.b	#7,2(a0)
0001CF7E 7000                       		moveq	#0,d0
0001CF80 1028 0003                  		move.b	3(a0),d0
0001CF84 5228 0003                  		addq.b	#1,3(a0)
0001CF88 2268 0004                  		movea.l	4(a0),a1
0001CF8C 103B 0000                  		move.b	SS_AniRevData(pc,d0.w),d0
0001CF90 6600                       		bne.s	loc_1B5CA
0001CF92 4290                       		clr.l	(a0)
0001CF94 42A8 0004                  		clr.l	4(a0)
0001CF98 12BC 002B                  		move.b	#$2B,(a1)
0001CF9C 4E75                       		rts	
0001CF9E                            ; ===========================================================================
0001CF9E                            
0001CF9E                            loc_1B5CA:
0001CF9E 1280                       		move.b	d0,(a1)
0001CFA0                            
0001CFA0                            locret_1B5CC:
0001CFA0 4E75                       		rts	
0001CFA2                            ; ===========================================================================
0001CFA2 2B31 2B31 0000             SS_AniRevData:	dc.b $2B, $31, $2B, $31, 0, 0
0001CFA8                            ; ===========================================================================
0001CFA8                            
0001CFA8                            SS_AniEmeraldSparks:			; XREF: SS_AniIndex
0001CFA8 5328 0002                  		subq.b	#1,2(a0)
0001CFAC 6A00                       		bpl.s	locret_1B60C
0001CFAE 117C 0005 0002             		move.b	#5,2(a0)
0001CFB4 7000                       		moveq	#0,d0
0001CFB6 1028 0003                  		move.b	3(a0),d0
0001CFBA 5228 0003                  		addq.b	#1,3(a0)
0001CFBE 2268 0004                  		movea.l	4(a0),a1
0001CFC2 103B 0000                  		move.b	SS_AniEmerData(pc,d0.w),d0
0001CFC6 1280                       		move.b	d0,(a1)
0001CFC8 6600                       		bne.s	locret_1B60C
0001CFCA 4290                       		clr.l	(a0)
0001CFCC 42A8 0004                  		clr.l	4(a0)
0001CFD0 11FC 0004 D024             		move.b	#4,($FFFFD024).w
0001CFD6 303C 00A8                  		move.w	#$A8,d0
0001CFDA 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play special stage GOAL	sound
0001CFE0                            
0001CFE0                            locret_1B60C:
0001CFE0 4E75                       		rts	
0001CFE2                            ; ===========================================================================
0001CFE2 4647 4849 0000             SS_AniEmerData:	dc.b $46, $47, $48, $49, 0, 0
0001CFE8                            ; ===========================================================================
0001CFE8                            
0001CFE8                            SS_AniGlassBlock:			; XREF: SS_AniIndex
0001CFE8 5328 0002                  		subq.b	#1,2(a0)
0001CFEC 6A00                       		bpl.s	locret_1B640
0001CFEE 117C 0001 0002             		move.b	#1,2(a0)
0001CFF4 7000                       		moveq	#0,d0
0001CFF6 1028 0003                  		move.b	3(a0),d0
0001CFFA 5228 0003                  		addq.b	#1,3(a0)
0001CFFE 2268 0004                  		movea.l	4(a0),a1
0001D002 103B 0000                  		move.b	SS_AniGlassData(pc,d0.w),d0
0001D006 1280                       		move.b	d0,(a1)
0001D008 6600                       		bne.s	locret_1B640
0001D00A 12A8 0004                  		move.b	4(a0),(a1)
0001D00E 4290                       		clr.l	(a0)
0001D010 42A8 0004                  		clr.l	4(a0)
0001D014                            
0001D014                            locret_1B640:
0001D014 4E75                       		rts	
0001D016                            ; ===========================================================================
0001D016 4B4C 4D4E 4B4C 4D4E 0000   SS_AniGlassData:dc.b $4B, $4C, $4D, $4E, $4B, $4C, $4D,	$4E, 0,	0
0001D020                            ; ---------------------------------------------------------------------------
0001D020                            ; Special stage	layout pointers
0001D020                            ; ---------------------------------------------------------------------------
0001D020                            SS_LayoutIndex:
0001D020                            	include "_inc\Special stage layout pointers.asm"
0001D020                            ; ---------------------------------------------------------------------------
0001D020                            ; Special stage	layout pointers
0001D020                            ; ---------------------------------------------------------------------------
0001D020 0000 0000                  	dc.l SS_1
0001D024 0000 0000                  	dc.l SS_2
0001D028 0000 0000                  	dc.l SS_3
0001D02C 0000 0000                  	dc.l SS_4
0001D030 0000 0000                  	dc.l SS_5
0001D034 0000 0000                  	dc.l SS_6
0001D038                            	even
0001D038                            	even
0001D038                            
0001D038                            ; ---------------------------------------------------------------------------
0001D038                            ; Special stage	start locations
0001D038                            ; ---------------------------------------------------------------------------
0001D038                            SS_StartLoc:	incbin	misc\sloc_ss.bin
0001D050                            		even
0001D050                            
0001D050                            ; ---------------------------------------------------------------------------
0001D050                            ; Subroutine to	load special stage layout
0001D050                            ; ---------------------------------------------------------------------------
0001D050                            
0001D050                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D050                            
0001D050                            
0001D050                            SS_Load:				; XREF: SpecialStage
0001D050 7000                       		moveq	#0,d0
0001D052 1038 FE16                  		move.b	($FFFFFE16).w,d0 ; load	number of last special stage entered
0001D056 5238 FE16                  		addq.b	#1,($FFFFFE16).w
0001D05A 0C38 0006 FE16             		cmpi.b	#6,($FFFFFE16).w
0001D060 6500                       		bcs.s	SS_ChkEmldNum
0001D062 11FC 0000 FE16             		move.b	#0,($FFFFFE16).w ; reset if higher than	6
0001D068                            
0001D068                            SS_ChkEmldNum:
0001D068 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all emeralds?
0001D06E 6700                       		beq.s	SS_LoadData	; if yes, branch
0001D070 7200                       		moveq	#0,d1
0001D072 1238 FE57                  		move.b	($FFFFFE57).w,d1
0001D076 5301                       		subq.b	#1,d1
0001D078 6500                       		bcs.s	SS_LoadData
0001D07A 47F8 FE58                  		lea	($FFFFFE58).w,a3 ; check which emeralds	you have
0001D07E                            
0001D07E                            SS_ChkEmldLoop:	
0001D07E B033 1000                  		cmp.b	(a3,d1.w),d0
0001D082 6600                       		bne.s	SS_ChkEmldRepeat
0001D084 60CA                       		bra.s	SS_Load
0001D086                            ; ===========================================================================
0001D086                            
0001D086                            SS_ChkEmldRepeat:
0001D086 51C9 FFF6                  		dbf	d1,SS_ChkEmldLoop
0001D08A                            
0001D08A                            SS_LoadData:
0001D08A E548                       		lsl.w	#2,d0
0001D08C 43FB 00AA                  		lea	SS_StartLoc(pc,d0.w),a1
0001D090 31D9 D008                  		move.w	(a1)+,($FFFFD008).w
0001D094 31D9 D00C                  		move.w	(a1)+,($FFFFD00C).w
0001D098 207B 0086                  		movea.l	SS_LayoutIndex(pc,d0.w),a0
0001D09C 43F9 00FF 4000             		lea	($FF4000).l,a1
0001D0A2 303C 0000                  		move.w	#0,d0
0001D0A6 4EB9 0000 1888             		jsr	(EniDec).l
0001D0AC 43F9 00FF 0000             		lea	($FF0000).l,a1
0001D0B2 303C 0FFF                  		move.w	#$FFF,d0
0001D0B6                            
0001D0B6                            SS_ClrRAM3:
0001D0B6 4299                       		clr.l	(a1)+
0001D0B8 51C8 FFFC                  		dbf	d0,SS_ClrRAM3
0001D0BC                            
0001D0BC 43F9 00FF 1020             		lea	($FF1020).l,a1
0001D0C2 41F9 00FF 4000             		lea	($FF4000).l,a0
0001D0C8 723F                       		moveq	#$3F,d1
0001D0CA                            
0001D0CA                            loc_1B6F6:
0001D0CA 743F                       		moveq	#$3F,d2
0001D0CC                            
0001D0CC                            loc_1B6F8:
0001D0CC 12D8                       		move.b	(a0)+,(a1)+
0001D0CE 51CA FFFC                  		dbf	d2,loc_1B6F8
0001D0D2                            
0001D0D2 43E9 0040                  		lea	$40(a1),a1
0001D0D6 51C9 FFF2                  		dbf	d1,loc_1B6F6
0001D0DA                            
0001D0DA 43F9 00FF 4008             		lea	($FF4008).l,a1
0001D0E0 41F9 0000 0000             		lea	(SS_MapIndex).l,a0
0001D0E6 724D                       		moveq	#$4D,d1
0001D0E8                            
0001D0E8                            loc_1B714:
0001D0E8 22D8                       		move.l	(a0)+,(a1)+
0001D0EA 32FC 0000                  		move.w	#0,(a1)+
0001D0EE 1368 FFFC FFFF             		move.b	-4(a0),-1(a1)
0001D0F4 32D8                       		move.w	(a0)+,(a1)+
0001D0F6 51C9 FFF0                  		dbf	d1,loc_1B714
0001D0FA                            
0001D0FA 43F9 00FF 4400             		lea	($FF4400).l,a1
0001D100 323C 003F                  		move.w	#$3F,d1
0001D104                            
0001D104                            loc_1B730:
0001D104                            
0001D104 4299                       		clr.l	(a1)+
0001D106 51C9 FFFC                  		dbf	d1,loc_1B730
0001D10A                            
0001D10A 4E75                       		rts	
0001D10C                            ; End of function SS_Load
0001D10C                            
0001D10C                            ; ===========================================================================
0001D10C                            ; ---------------------------------------------------------------------------
0001D10C                            ; Special stage	mappings and VRAM pointers
0001D10C                            ; ---------------------------------------------------------------------------
0001D10C                            SS_MapIndex:
0001D10C                            	include "_inc\Special stage mappings and VRAM pointers.asm"
0001D10C                            ; ---------------------------------------------------------------------------
0001D10C                            ; Special stage	mappings and VRAM pointers
0001D10C                            ; ---------------------------------------------------------------------------
0001D10C 0000 0000                  	dc.l Map_SSWalls	; address of mappings
0001D110 0142                       	dc.w $142		; VRAM setting
0001D112 0000 0000                  	dc.l Map_SSWalls
0001D116 0142                       	dc.w $142
0001D118 0000 0000                  	dc.l Map_SSWalls
0001D11C 0142                       	dc.w $142
0001D11E 0000 0000                  	dc.l Map_SSWalls
0001D122 0142                       	dc.w $142
0001D124 0000 0000                  	dc.l Map_SSWalls
0001D128 0142                       	dc.w $142
0001D12A 0000 0000                  	dc.l Map_SSWalls
0001D12E 0142                       	dc.w $142
0001D130 0000 0000                  	dc.l Map_SSWalls
0001D134 0142                       	dc.w $142
0001D136 0000 0000                  	dc.l Map_SSWalls
0001D13A 0142                       	dc.w $142
0001D13C 0000 0000                  	dc.l Map_SSWalls
0001D140 0142                       	dc.w $142
0001D142 0000 0000                  	dc.l Map_SSWalls
0001D146 2142                       	dc.w $2142
0001D148 0000 0000                  	dc.l Map_SSWalls
0001D14C 2142                       	dc.w $2142
0001D14E 0000 0000                  	dc.l Map_SSWalls
0001D152 2142                       	dc.w $2142
0001D154 0000 0000                  	dc.l Map_SSWalls
0001D158 2142                       	dc.w $2142
0001D15A 0000 0000                  	dc.l Map_SSWalls
0001D15E 2142                       	dc.w $2142
0001D160 0000 0000                  	dc.l Map_SSWalls
0001D164 2142                       	dc.w $2142
0001D166 0000 0000                  	dc.l Map_SSWalls
0001D16A 2142                       	dc.w $2142
0001D16C 0000 0000                  	dc.l Map_SSWalls
0001D170 2142                       	dc.w $2142
0001D172 0000 0000                  	dc.l Map_SSWalls
0001D176 2142                       	dc.w $2142
0001D178 0000 0000                  	dc.l Map_SSWalls
0001D17C 4142                       	dc.w $4142
0001D17E 0000 0000                  	dc.l Map_SSWalls
0001D182 4142                       	dc.w $4142
0001D184 0000 0000                  	dc.l Map_SSWalls
0001D188 4142                       	dc.w $4142
0001D18A 0000 0000                  	dc.l Map_SSWalls
0001D18E 4142                       	dc.w $4142
0001D190 0000 0000                  	dc.l Map_SSWalls
0001D194 4142                       	dc.w $4142
0001D196 0000 0000                  	dc.l Map_SSWalls
0001D19A 4142                       	dc.w $4142
0001D19C 0000 0000                  	dc.l Map_SSWalls
0001D1A0 4142                       	dc.w $4142
0001D1A2 0000 0000                  	dc.l Map_SSWalls
0001D1A6 4142                       	dc.w $4142
0001D1A8 0000 0000                  	dc.l Map_SSWalls
0001D1AC 4142                       	dc.w $4142
0001D1AE 0000 0000                  	dc.l Map_SSWalls
0001D1B2 6142                       	dc.w $6142
0001D1B4 0000 0000                  	dc.l Map_SSWalls
0001D1B8 6142                       	dc.w $6142
0001D1BA 0000 0000                  	dc.l Map_SSWalls
0001D1BE 6142                       	dc.w $6142
0001D1C0 0000 0000                  	dc.l Map_SSWalls
0001D1C4 6142                       	dc.w $6142
0001D1C6 0000 0000                  	dc.l Map_SSWalls
0001D1CA 6142                       	dc.w $6142
0001D1CC 0000 0000                  	dc.l Map_SSWalls
0001D1D0 6142                       	dc.w $6142
0001D1D2 0000 0000                  	dc.l Map_SSWalls
0001D1D6 6142                       	dc.w $6142
0001D1D8 0000 0000                  	dc.l Map_SSWalls
0001D1DC 6142                       	dc.w $6142
0001D1DE 0000 0000                  	dc.l Map_SSWalls
0001D1E2 6142                       	dc.w $6142
0001D1E4 0000 F612                  	dc.l Map_obj47
0001D1E8 023B                       	dc.w $23B
0001D1EA 0000 0000                  	dc.l Map_SS_R
0001D1EE 0570                       	dc.w $570
0001D1F0 0000 0000                  	dc.l Map_SS_R
0001D1F4 0251                       	dc.w $251
0001D1F6 0000 0000                  	dc.l Map_SS_R
0001D1FA 0370                       	dc.w $370
0001D1FC 0000 0000                  	dc.l Map_SS_Up
0001D200 0263                       	dc.w $263
0001D202 0000 0000                  	dc.l Map_SS_Down
0001D206 0263                       	dc.w $263
0001D208 0000 0000                  	dc.l Map_SS_R
0001D20C 22F0                       	dc.w $22F0
0001D20E 0000 0000                  	dc.l Map_SS_Glass
0001D212 0470                       	dc.w $470
0001D214 0000 0000                  	dc.l Map_SS_Glass
0001D218 05F0                       	dc.w $5F0
0001D21A 0000 0000                  	dc.l Map_SS_Glass
0001D21E 65F0                       	dc.w $65F0
0001D220 0000 0000                  	dc.l Map_SS_Glass
0001D224 25F0                       	dc.w $25F0
0001D226 0000 0000                  	dc.l Map_SS_Glass
0001D22A 45F0                       	dc.w $45F0
0001D22C 0000 0000                  	dc.l Map_SS_R
0001D230 02F0                       	dc.w $2F0
0001D232 0100 F612                  	dc.l Map_obj47+$1000000	; add frame no.	* $1000000
0001D236 023B                       	dc.w $23B
0001D238 0200 F612                  	dc.l Map_obj47+$2000000
0001D23C 023B                       	dc.w $23B
0001D23E 0000 0000                  	dc.l Map_SS_R
0001D242 0797                       	dc.w $797
0001D244 0000 0000                  	dc.l Map_SS_R
0001D248 07A0                       	dc.w $7A0
0001D24A 0000 0000                  	dc.l Map_SS_R
0001D24E 07A9                       	dc.w $7A9
0001D250 0000 0000                  	dc.l Map_SS_R
0001D254 0797                       	dc.w $797
0001D256 0000 0000                  	dc.l Map_SS_R
0001D25A 07A0                       	dc.w $7A0
0001D25C 0000 0000                  	dc.l Map_SS_R
0001D260 07A9                       	dc.w $7A9
0001D262 0000 AA5E                  	dc.l Map_obj25
0001D266 27B2                       	dc.w $27B2
0001D268 0000 0000                  	dc.l Map_SS_Chaos3
0001D26C 0770                       	dc.w $770
0001D26E 0000 0000                  	dc.l Map_SS_Chaos3
0001D272 2770                       	dc.w $2770
0001D274 0000 0000                  	dc.l Map_SS_Chaos3
0001D278 4770                       	dc.w $4770
0001D27A 0000 0000                  	dc.l Map_SS_Chaos3
0001D27E 6770                       	dc.w $6770
0001D280 0000 0000                  	dc.l Map_SS_Chaos1
0001D284 0770                       	dc.w $770
0001D286 0000 0000                  	dc.l Map_SS_Chaos2
0001D28A 0770                       	dc.w $770
0001D28C 0000 0000                  	dc.l Map_SS_R
0001D290 04F0                       	dc.w $4F0
0001D292 0400 AA5E                  	dc.l Map_obj25+$4000000
0001D296 27B2                       	dc.w $27B2
0001D298 0500 AA5E                  	dc.l Map_obj25+$5000000
0001D29C 27B2                       	dc.w $27B2
0001D29E 0600 AA5E                  	dc.l Map_obj25+$6000000
0001D2A2 27B2                       	dc.w $27B2
0001D2A4 0700 AA5E                  	dc.l Map_obj25+$7000000
0001D2A8 27B2                       	dc.w $27B2
0001D2AA 0000 0000                  	dc.l Map_SS_Glass
0001D2AE 23F0                       	dc.w $23F0
0001D2B0 0000 0000                  	dc.l Map_SS_Glass+$1000000
0001D2B4 23F0                       	dc.w $23F0
0001D2B6 0000 0000                  	dc.l Map_SS_Glass+$2000000
0001D2BA 23F0                       	dc.w $23F0
0001D2BC 0000 0000                  	dc.l Map_SS_Glass+$3000000
0001D2C0 23F0                       	dc.w $23F0
0001D2C2 0000 0000                  	dc.l Map_SS_R+$2000000
0001D2C6 04F0                       	dc.w $4F0
0001D2C8 0000 0000                  	dc.l Map_SS_Glass
0001D2CC 05F0                       	dc.w $5F0
0001D2CE 0000 0000                  	dc.l Map_SS_Glass
0001D2D2 65F0                       	dc.w $65F0
0001D2D4 0000 0000                  	dc.l Map_SS_Glass
0001D2D8 25F0                       	dc.w $25F0
0001D2DA 0000 0000                  	dc.l Map_SS_Glass
0001D2DE 45F0                       	dc.w $45F0
0001D2DE 45F0                       	dc.w $45F0
0001D2E0                            
0001D2E0                            ; ---------------------------------------------------------------------------
0001D2E0                            ; Sprite mappings - special stage "R" block
0001D2E0                            ; ---------------------------------------------------------------------------
0001D2E0                            Map_SS_R:
0001D2E0                            	include "_maps\SSRblock.asm"
0001D2E0                            ; ---------------------------------------------------------------------------
0001D2E0                            ; Sprite mappings - special stage "R" block
0001D2E0                            ; ---------------------------------------------------------------------------
0001D2E0 0000 0000                  		dc.w byte_1B912-Map_SS_R, byte_1B918-Map_SS_R
0001D2E4 0000                       		dc.w byte_1B91E-Map_SS_R
0001D2E6 01                         byte_1B912:	dc.b 1
0001D2E7 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001D2EC 01                         byte_1B918:	dc.b 1
0001D2ED F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001D2F2 00                         byte_1B91E:	dc.b 0
0001D2F4 00                         		even
0001D2F4 00                         		even
0001D2F4                            
0001D2F4                            ; ---------------------------------------------------------------------------
0001D2F4                            ; Sprite mappings - special stage breakable glass blocks and red-white blocks
0001D2F4                            ; ---------------------------------------------------------------------------
0001D2F4                            Map_SS_Glass:
0001D2F4                            	include "_maps\SSglassblock.asm"
0001D2F4                            ; ---------------------------------------------------------------------------
0001D2F4                            ; Sprite mappings - special stage breakable glass blocks and red-white blocks
0001D2F4                            ; ---------------------------------------------------------------------------
0001D2F4 0000 0000                  		dc.w byte_1B928-Map_SS_Glass, byte_1B92E-Map_SS_Glass
0001D2F8 0000 0000                  		dc.w byte_1B934-Map_SS_Glass, byte_1B93A-Map_SS_Glass
0001D2FC 01                         byte_1B928:	dc.b 1
0001D2FD F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001D302 01                         byte_1B92E:	dc.b 1
0001D303 F40A 0800 F4               		dc.b $F4, $A, 8, 0, $F4
0001D308 01                         byte_1B934:	dc.b 1
0001D309 F40A 1800 F4               		dc.b $F4, $A, $18, 0, $F4
0001D30E 01                         byte_1B93A:	dc.b 1
0001D30F F40A 1000 F4               		dc.b $F4, $A, $10, 0, $F4
0001D314                            		even
0001D314                            		even
0001D314                            
0001D314                            ; ---------------------------------------------------------------------------
0001D314                            ; Sprite mappings - special stage "UP" block
0001D314                            ; ---------------------------------------------------------------------------
0001D314                            Map_SS_Up:
0001D314                            	include "_maps\SSUPblock.asm"
0001D314                            ; ---------------------------------------------------------------------------
0001D314                            ; Sprite mappings - special stage "UP" block
0001D314                            ; ---------------------------------------------------------------------------
0001D314 0000                       		dc.w byte_1B944-Map_SS_Up
0001D316 0000                       		dc.w byte_1B94A-Map_SS_Up
0001D318 01                         byte_1B944:	dc.b 1
0001D319 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001D31E 01                         byte_1B94A:	dc.b 1
0001D31F F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001D324                            		even
0001D324                            		even
0001D324                            
0001D324                            ; ---------------------------------------------------------------------------
0001D324                            ; Sprite mappings - special stage "DOWN" block
0001D324                            ; ---------------------------------------------------------------------------
0001D324                            Map_SS_Down:
0001D324                            	include "_maps\SSDOWNblock.asm"
0001D324                            ; ---------------------------------------------------------------------------
0001D324                            ; Sprite mappings - special stage "DOWN" block
0001D324                            ; ---------------------------------------------------------------------------
0001D324 0000                       		dc.w byte_1B954-Map_SS_Down
0001D326 0000                       		dc.w byte_1B95A-Map_SS_Down
0001D328 01                         byte_1B954:	dc.b 1
0001D329 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001D32E 01                         byte_1B95A:	dc.b 1
0001D32F F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001D334                            		even
0001D334                            		even
0001D334                            
0001D334                            ; ---------------------------------------------------------------------------
0001D334                            ; Sprite mappings - special stage chaos	emeralds
0001D334                            ; ---------------------------------------------------------------------------
0001D334 0000                       Map_SS_Chaos1:	dc.w byte_1B96C-Map_SS_Chaos1
0001D336 0000                       		dc.w byte_1B97E-Map_SS_Chaos1
0001D338 0000                       Map_SS_Chaos2:	dc.w byte_1B972-Map_SS_Chaos2
0001D33A 0000                       		dc.w byte_1B97E-Map_SS_Chaos2
0001D33C 0000                       Map_SS_Chaos3:	dc.w byte_1B978-Map_SS_Chaos3
0001D33E 0000                       		dc.w byte_1B97E-Map_SS_Chaos3
0001D340 01                         byte_1B96C:	dc.b 1
0001D341 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0001D346 01                         byte_1B972:	dc.b 1
0001D347 F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
0001D34C 01                         byte_1B978:	dc.b 1
0001D34D F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
0001D352 01                         byte_1B97E:	dc.b 1
0001D353 F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
0001D358                            		even
0001D358                            ; ===========================================================================
0001D358                            ; ---------------------------------------------------------------------------
0001D358                            ; Object 09 - Sonic (special stage)
0001D358                            ; ---------------------------------------------------------------------------
0001D358                            
0001D358                            Obj09:					; XREF: Obj_Index
0001D358 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
0001D35C 6700                       		beq.s	Obj09_Normal	; if not, branch
0001D35E 6100 0000                  		bsr.w	SS_FixCamera
0001D362 6000 0000                  		bra.w	DebugMode
0001D366                            ; ===========================================================================
0001D366                            
0001D366                            Obj09_Normal:
0001D366 7000                       		moveq	#0,d0
0001D368 1028 0024                  		move.b	$24(a0),d0
0001D36C 323B 0000                  		move.w	Obj09_Index(pc,d0.w),d1
0001D370 4EFB 1000                  		jmp	Obj09_Index(pc,d1.w)
0001D374                            ; ===========================================================================
0001D374 0000                       Obj09_Index:	dc.w Obj09_Main-Obj09_Index
0001D376 0000                       		dc.w Obj09_ChkDebug-Obj09_Index
0001D378 0000                       		dc.w Obj09_ExitStage-Obj09_Index
0001D37A 0000                       		dc.w Obj09_Exit2-Obj09_Index
0001D37C                            ; ===========================================================================
0001D37C                            
0001D37C                            Obj09_Main:				; XREF: Obj09_Index
0001D37C 5428 0024                  		addq.b	#2,$24(a0)
0001D380 117C 000E 0016             		move.b	#$E,$16(a0)
0001D386 117C 0007 0017             		move.b	#7,$17(a0)
0001D38C 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
0001D394 317C 0780 0002             		move.w	#$780,2(a0)
0001D39A 117C 0004 0001             		move.b	#4,1(a0)
0001D3A0 117C 0000 0018             		move.b	#0,$18(a0)
0001D3A6 117C 0002 001C             		move.b	#2,$1C(a0)
0001D3AC 08E8 0002 0022             		bset	#2,$22(a0)
0001D3B2 08E8 0001 0022             		bset	#1,$22(a0)
0001D3B8                            
0001D3B8                            Obj09_ChkDebug:				; XREF: Obj09_Index
0001D3B8 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug mode	cheat enabled?
0001D3BC 6700                       		beq.s	Obj09_NoDebug	; if not, branch
0001D3BE 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button B pressed?
0001D3C4 6700                       		beq.s	Obj09_NoDebug	; if not, branch
0001D3C6 31FC 0001 FE08             		move.w	#1,($FFFFFE08).w ; change Sonic	into a ring
0001D3CC                            
0001D3CC                            Obj09_NoDebug:
0001D3CC 117C 0000 0030             		move.b	#0,$30(a0)
0001D3D2 7000                       		moveq	#0,d0
0001D3D4 1028 0022                  		move.b	$22(a0),d0
0001D3D8 0240 0002                  		andi.w	#2,d0
0001D3DC 323B 0000                  		move.w	Obj09_Modes(pc,d0.w),d1
0001D3E0 4EBB 1000                  		jsr	Obj09_Modes(pc,d1.w)
0001D3E4 4EB9 0001 5102             		jsr	LoadSonicDynPLC
0001D3EA 4EF9 0000 E10A             		jmp	DisplaySprite
0001D3F0                            ; ===========================================================================
0001D3F0 0000                       Obj09_Modes:	dc.w Obj09_OnWall-Obj09_Modes
0001D3F2 0000                       		dc.w Obj09_InAir-Obj09_Modes
0001D3F4                            ; ===========================================================================
0001D3F4                            
0001D3F4                            Obj09_OnWall:				; XREF: Obj09_Modes
0001D3F4 6100 0000                  		bsr.w	Obj09_Jump
0001D3F8 6100 0000                  		bsr.w	Obj09_Move
0001D3FC 6100 0000                  		bsr.w	Obj09_Fall
0001D400 6000                       		bra.s	Obj09_Display
0001D402                            ; ===========================================================================
0001D402                            
0001D402                            Obj09_InAir:				; XREF: Obj09_Modes
0001D402 6100 0000                  		bsr.w	nullsub_2
0001D406 6100 0000                  		bsr.w	Obj09_Move
0001D40A 6100 0000                  		bsr.w	Obj09_Fall
0001D40E                            
0001D40E                            Obj09_Display:				; XREF: Obj09_OnWall
0001D40E 6100 0000                  		bsr.w	Obj09_ChkItems
0001D412 6100 0000                  		bsr.w	Obj09_ChkItems2
0001D416 4EB9 0000 E0E4             		jsr	SpeedToPos
0001D41C 6100 0000                  		bsr.w	SS_FixCamera
0001D420 3038 F780                  		move.w	($FFFFF780).w,d0
0001D424 D078 F782                  		add.w	($FFFFF782).w,d0
0001D428 31C0 F780                  		move.w	d0,($FFFFF780).w
0001D42C 4EB9 0001 4BCA             		jsr	Sonic_Animate
0001D432 4E75                       		rts	
0001D434                            
0001D434                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D434                            
0001D434                            
0001D434                            Obj09_Move:				; XREF: Obj09_OnWall; Obj09_InAir
0001D434 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
0001D43A 6700                       		beq.s	Obj09_ChkRight	; if not, branch
0001D43C 6100 0000                  		bsr.w	Obj09_MoveLeft
0001D440                            
0001D440                            Obj09_ChkRight:
0001D440 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
0001D446 6700                       		beq.s	loc_1BA78	; if not, branch
0001D448 6100 0000                  		bsr.w	Obj09_MoveRight
0001D44C                            
0001D44C                            loc_1BA78:
0001D44C 1038 F602                  		move.b	($FFFFF602).w,d0
0001D450 0200 000C                  		andi.b	#$C,d0
0001D454 6600                       		bne.s	loc_1BAA8
0001D456 3028 0014                  		move.w	$14(a0),d0
0001D45A 6700                       		beq.s	loc_1BAA8
0001D45C 6B00                       		bmi.s	loc_1BA9A
0001D45E 0440 000C                  		subi.w	#$C,d0
0001D462 6400                       		bcc.s	loc_1BA94
0001D464 303C 0000                  		move.w	#0,d0
0001D468                            
0001D468                            loc_1BA94:
0001D468 3140 0014                  		move.w	d0,$14(a0)
0001D46C 6000                       		bra.s	loc_1BAA8
0001D46E                            ; ===========================================================================
0001D46E                            
0001D46E                            loc_1BA9A:
0001D46E 0640 000C                  		addi.w	#$C,d0
0001D472 6400                       		bcc.s	loc_1BAA4
0001D474 303C 0000                  		move.w	#0,d0
0001D478                            
0001D478                            loc_1BAA4:
0001D478 3140 0014                  		move.w	d0,$14(a0)
0001D47C                            
0001D47C                            loc_1BAA8:
0001D47C 1038 F780                  		move.b	($FFFFF780).w,d0
0001D480 0600 0020                  		addi.b	#$20,d0
0001D484 0200 00C0                  		andi.b	#$C0,d0
0001D488 4400                       		neg.b	d0
0001D48A 4EB9 0000 33D4             		jsr	(CalcSine).l
0001D490 C3E8 0014                  		muls.w	$14(a0),d1
0001D494 D3A8 0008                  		add.l	d1,8(a0)
0001D498 C1E8 0014                  		muls.w	$14(a0),d0
0001D49C D1A8 000C                  		add.l	d0,$C(a0)
0001D4A0 48E7 C000                  		movem.l	d0-d1,-(sp)
0001D4A4 2428 000C                  		move.l	$C(a0),d2
0001D4A8 2628 0008                  		move.l	8(a0),d3
0001D4AC 6100 0000                  		bsr.w	sub_1BCE8
0001D4B0 6700                       		beq.s	loc_1BAF2
0001D4B2 4CDF 0003                  		movem.l	(sp)+,d0-d1
0001D4B6 93A8 0008                  		sub.l	d1,8(a0)
0001D4BA 91A8 000C                  		sub.l	d0,$C(a0)
0001D4BE 317C 0000 0014             		move.w	#0,$14(a0)
0001D4C4 4E75                       		rts	
0001D4C6                            ; ===========================================================================
0001D4C6                            
0001D4C6                            loc_1BAF2:
0001D4C6 4CDF 0003                  		movem.l	(sp)+,d0-d1
0001D4CA 4E75                       		rts	
0001D4CC                            ; End of function Obj09_Move
0001D4CC                            
0001D4CC                            
0001D4CC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D4CC                            
0001D4CC                            
0001D4CC                            Obj09_MoveLeft:				; XREF: Obj09_Move
0001D4CC 08E8 0000 0022             		bset	#0,$22(a0)
0001D4D2 3028 0014                  		move.w	$14(a0),d0
0001D4D6 6700                       		beq.s	loc_1BB06
0001D4D8 6A00                       		bpl.s	loc_1BB1A
0001D4DA                            
0001D4DA                            loc_1BB06:
0001D4DA 0440 000C                  		subi.w	#$C,d0
0001D4DE 0C40 F800                  		cmpi.w	#-$800,d0
0001D4E2 6E00                       		bgt.s	loc_1BB14
0001D4E4 303C F800                  		move.w	#-$800,d0
0001D4E8                            
0001D4E8                            loc_1BB14:
0001D4E8 3140 0014                  		move.w	d0,$14(a0)
0001D4EC 4E75                       		rts	
0001D4EE                            ; ===========================================================================
0001D4EE                            
0001D4EE                            loc_1BB1A:
0001D4EE 0440 0040                  		subi.w	#$40,d0
0001D4F2 6400                       		bcc.s	loc_1BB22
0001D4F4 4E71                       		nop	
0001D4F6                            
0001D4F6                            loc_1BB22:
0001D4F6 3140 0014                  		move.w	d0,$14(a0)
0001D4FA 4E75                       		rts	
0001D4FC                            ; End of function Obj09_MoveLeft
0001D4FC                            
0001D4FC                            
0001D4FC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D4FC                            
0001D4FC                            
0001D4FC                            Obj09_MoveRight:			; XREF: Obj09_Move
0001D4FC 08A8 0000 0022             		bclr	#0,$22(a0)
0001D502 3028 0014                  		move.w	$14(a0),d0
0001D506 6B00                       		bmi.s	loc_1BB48
0001D508 0640 000C                  		addi.w	#$C,d0
0001D50C 0C40 0800                  		cmpi.w	#$800,d0
0001D510 6D00                       		blt.s	loc_1BB42
0001D512 303C 0800                  		move.w	#$800,d0
0001D516                            
0001D516                            loc_1BB42:
0001D516 3140 0014                  		move.w	d0,$14(a0)
0001D51A 6000                       		bra.s	locret_1BB54
0001D51C                            ; ===========================================================================
0001D51C                            
0001D51C                            loc_1BB48:
0001D51C 0640 0040                  		addi.w	#$40,d0
0001D520 6400                       		bcc.s	loc_1BB50
0001D522 4E71                       		nop	
0001D524                            
0001D524                            loc_1BB50:
0001D524 3140 0014                  		move.w	d0,$14(a0)
0001D528                            
0001D528                            locret_1BB54:
0001D528 4E75                       		rts	
0001D52A                            ; End of function Obj09_MoveRight
0001D52A                            
0001D52A                            
0001D52A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D52A                            
0001D52A                            
0001D52A                            Obj09_Jump:				; XREF: Obj09_OnWall
0001D52A 1038 F603                  		move.b	($FFFFF603).w,d0
0001D52E 0200 0070                  		andi.b	#$70,d0		; is A,	B or C pressed?
0001D532 6700                       		beq.s	Obj09_NoJump	; if not, branch
0001D534 1038 F780                  		move.b	($FFFFF780).w,d0
0001D538 0200 00FC                  		andi.b	#$FC,d0
0001D53C 4400                       		neg.b	d0
0001D53E 0400 0040                  		subi.b	#$40,d0
0001D542 4EB9 0000 33D4             		jsr	(CalcSine).l
0001D548 C3FC 0680                  		muls.w	#$680,d1
0001D54C E081                       		asr.l	#8,d1
0001D54E 3141 0010                  		move.w	d1,$10(a0)
0001D552 C1FC 0680                  		muls.w	#$680,d0
0001D556 E080                       		asr.l	#8,d0
0001D558 3140 0012                  		move.w	d0,$12(a0)
0001D55C 08E8 0001 0022             		bset	#1,$22(a0)
0001D562 303C 00A0                  		move.w	#$A0,d0
0001D566 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play jumping sound
0001D56C                            
0001D56C                            Obj09_NoJump:
0001D56C 4E75                       		rts	
0001D56E                            ; End of function Obj09_Jump
0001D56E                            
0001D56E                            
0001D56E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D56E                            
0001D56E                            
0001D56E                            nullsub_2:				; XREF: Obj09_InAir
0001D56E 4E75                       		rts	
0001D570                            ; End of function nullsub_2
0001D570                            
0001D570                            ; ===========================================================================
0001D570                            ; ---------------------------------------------------------------------------
0001D570                            ; unused subroutine to limit Sonic's upward vertical speed
0001D570                            ; ---------------------------------------------------------------------------
0001D570 323C FC00                  		move.w	#-$400,d1
0001D574 B268 0012                  		cmp.w	$12(a0),d1
0001D578 6F00                       		ble.s	locret_1BBB4
0001D57A 1038 F602                  		move.b	($FFFFF602).w,d0
0001D57E 0200 0070                  		andi.b	#$70,d0
0001D582 6600                       		bne.s	locret_1BBB4
0001D584 3141 0012                  		move.w	d1,$12(a0)
0001D588                            
0001D588                            locret_1BBB4:
0001D588 4E75                       		rts	
0001D58A                            ; ---------------------------------------------------------------------------
0001D58A                            ; Subroutine to	fix the	camera on Sonic's position (special stage)
0001D58A                            ; ---------------------------------------------------------------------------
0001D58A                            
0001D58A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D58A                            
0001D58A                            
0001D58A                            SS_FixCamera:				; XREF: Obj09
0001D58A 3428 000C                  		move.w	$C(a0),d2
0001D58E 3628 0008                  		move.w	8(a0),d3
0001D592 3038 F700                  		move.w	($FFFFF700).w,d0
0001D596 0443 00A0                  		subi.w	#$A0,d3
0001D59A 6500                       		bcs.s	loc_1BBCE
0001D59C 9043                       		sub.w	d3,d0
0001D59E 9178 F700                  		sub.w	d0,($FFFFF700).w
0001D5A2                            
0001D5A2                            loc_1BBCE:
0001D5A2 3038 F704                  		move.w	($FFFFF704).w,d0
0001D5A6 0442 0070                  		subi.w	#$70,d2
0001D5AA 6500                       		bcs.s	locret_1BBDE
0001D5AC 9042                       		sub.w	d2,d0
0001D5AE 9178 F704                  		sub.w	d0,($FFFFF704).w
0001D5B2                            
0001D5B2                            locret_1BBDE:
0001D5B2 4E75                       		rts	
0001D5B4                            ; End of function SS_FixCamera
0001D5B4                            
0001D5B4                            ; ===========================================================================
0001D5B4                            
0001D5B4                            Obj09_ExitStage:			; XREF: Obj09_Index
0001D5B4 0678 0040 F782             		addi.w	#$40,($FFFFF782).w
0001D5BA 0C78 1800 F782             		cmpi.w	#$1800,($FFFFF782).w
0001D5C0 6600                       		bne.s	loc_1BBF4
0001D5C2 11FC 000C F600             		move.b	#$C,($FFFFF600).w
0001D5C8                            
0001D5C8                            loc_1BBF4:
0001D5C8 0C78 3000 F782             		cmpi.w	#$3000,($FFFFF782).w
0001D5CE 6D00                       		blt.s	loc_1BC12
0001D5D0 31FC 0000 F782             		move.w	#0,($FFFFF782).w
0001D5D6 31FC 4000 F780             		move.w	#$4000,($FFFFF780).w
0001D5DC 5428 0024                  		addq.b	#2,$24(a0)
0001D5E0 317C 003C 0038             		move.w	#$3C,$38(a0)
0001D5E6                            
0001D5E6                            loc_1BC12:
0001D5E6 3038 F780                  		move.w	($FFFFF780).w,d0
0001D5EA D078 F782                  		add.w	($FFFFF782).w,d0
0001D5EE 31C0 F780                  		move.w	d0,($FFFFF780).w
0001D5F2 4EB9 0001 4BCA             		jsr	Sonic_Animate
0001D5F8 4EB9 0001 5102             		jsr	LoadSonicDynPLC
0001D5FE 6100 FF8A                  		bsr.w	SS_FixCamera
0001D602 4EF9 0000 E10A             		jmp	DisplaySprite
0001D608                            ; ===========================================================================
0001D608                            
0001D608                            Obj09_Exit2:				; XREF: Obj09_Index
0001D608 5368 0038                  		subq.w	#1,$38(a0)
0001D60C 6600                       		bne.s	loc_1BC40
0001D60E 11FC 000C F600             		move.b	#$C,($FFFFF600).w
0001D614                            
0001D614                            loc_1BC40:
0001D614 4EB9 0001 4BCA             		jsr	Sonic_Animate
0001D61A 4EB9 0001 5102             		jsr	LoadSonicDynPLC
0001D620 6100 FF68                  		bsr.w	SS_FixCamera
0001D624 4EF9 0000 E10A             		jmp	DisplaySprite
0001D62A                            
0001D62A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D62A                            
0001D62A                            
0001D62A                            Obj09_Fall:				; XREF: Obj09_OnWall; Obj09_InAir
0001D62A 2428 000C                  		move.l	$C(a0),d2
0001D62E 2628 0008                  		move.l	8(a0),d3
0001D632 1038 F780                  		move.b	($FFFFF780).w,d0
0001D636 0200 00FC                  		andi.b	#$FC,d0
0001D63A 4EB9 0000 33D4             		jsr	(CalcSine).l
0001D640 3828 0010                  		move.w	$10(a0),d4
0001D644 48C4                       		ext.l	d4
0001D646 E184                       		asl.l	#8,d4
0001D648 C1FC 002A                  		muls.w	#$2A,d0
0001D64C D084                       		add.l	d4,d0
0001D64E 3828 0012                  		move.w	$12(a0),d4
0001D652 48C4                       		ext.l	d4
0001D654 E184                       		asl.l	#8,d4
0001D656 C3FC 002A                  		muls.w	#$2A,d1
0001D65A D284                       		add.l	d4,d1
0001D65C D680                       		add.l	d0,d3
0001D65E 6100 0000                  		bsr.w	sub_1BCE8
0001D662 6700                       		beq.s	loc_1BCB0
0001D664 9680                       		sub.l	d0,d3
0001D666 7000                       		moveq	#0,d0
0001D668 3140 0010                  		move.w	d0,$10(a0)
0001D66C 08A8 0001 0022             		bclr	#1,$22(a0)
0001D672 D481                       		add.l	d1,d2
0001D674 6100 0000                  		bsr.w	sub_1BCE8
0001D678 6700                       		beq.s	loc_1BCC6
0001D67A 9481                       		sub.l	d1,d2
0001D67C 7200                       		moveq	#0,d1
0001D67E 3141 0012                  		move.w	d1,$12(a0)
0001D682 4E75                       		rts	
0001D684                            ; ===========================================================================
0001D684                            
0001D684                            loc_1BCB0:
0001D684 D481                       		add.l	d1,d2
0001D686 6100 0000                  		bsr.w	sub_1BCE8
0001D68A 6700                       		beq.s	loc_1BCD4
0001D68C 9481                       		sub.l	d1,d2
0001D68E 7200                       		moveq	#0,d1
0001D690 3141 0012                  		move.w	d1,$12(a0)
0001D694 08A8 0001 0022             		bclr	#1,$22(a0)
0001D69A                            
0001D69A                            loc_1BCC6:
0001D69A E080                       		asr.l	#8,d0
0001D69C E081                       		asr.l	#8,d1
0001D69E 3140 0010                  		move.w	d0,$10(a0)
0001D6A2 3141 0012                  		move.w	d1,$12(a0)
0001D6A6 4E75                       		rts	
0001D6A8                            ; ===========================================================================
0001D6A8                            
0001D6A8                            loc_1BCD4:
0001D6A8 E080                       		asr.l	#8,d0
0001D6AA E081                       		asr.l	#8,d1
0001D6AC 3140 0010                  		move.w	d0,$10(a0)
0001D6B0 3141 0012                  		move.w	d1,$12(a0)
0001D6B4 08E8 0001 0022             		bset	#1,$22(a0)
0001D6BA 4E75                       		rts	
0001D6BC                            ; End of function Obj09_Fall
0001D6BC                            
0001D6BC                            
0001D6BC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D6BC                            
0001D6BC                            
0001D6BC                            sub_1BCE8:				; XREF: Obj09_Move; Obj09_Fall
0001D6BC 43F9 00FF 0000             		lea	($FF0000).l,a1
0001D6C2 7800                       		moveq	#0,d4
0001D6C4 4842                       		swap	d2
0001D6C6 3802                       		move.w	d2,d4
0001D6C8 4842                       		swap	d2
0001D6CA 0644 0044                  		addi.w	#$44,d4
0001D6CE 88FC 0018                  		divu.w	#$18,d4
0001D6D2 C8FC 0080                  		mulu.w	#$80,d4
0001D6D6 D3C4                       		adda.l	d4,a1
0001D6D8 7800                       		moveq	#0,d4
0001D6DA 4843                       		swap	d3
0001D6DC 3803                       		move.w	d3,d4
0001D6DE 4843                       		swap	d3
0001D6E0 0644 0014                  		addi.w	#$14,d4
0001D6E4 88FC 0018                  		divu.w	#$18,d4
0001D6E8 D2C4                       		adda.w	d4,a1
0001D6EA 7A00                       		moveq	#0,d5
0001D6EC 1819                       		move.b	(a1)+,d4
0001D6EE 6100                       		bsr.s	sub_1BD30
0001D6F0 1819                       		move.b	(a1)+,d4
0001D6F2 6100                       		bsr.s	sub_1BD30
0001D6F4 D2FC 007E                  		adda.w	#$7E,a1
0001D6F8 1819                       		move.b	(a1)+,d4
0001D6FA 6100                       		bsr.s	sub_1BD30
0001D6FC 1819                       		move.b	(a1)+,d4
0001D6FE 6100                       		bsr.s	sub_1BD30
0001D700 4A05                       		tst.b	d5
0001D702 4E75                       		rts	
0001D704                            ; End of function sub_1BCE8
0001D704                            
0001D704                            
0001D704                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D704                            
0001D704                            
0001D704                            sub_1BD30:				; XREF: sub_1BCE8
0001D704 6700                       		beq.s	locret_1BD44
0001D706 0C04 0028                  		cmpi.b	#$28,d4
0001D70A 6700                       		beq.s	locret_1BD44
0001D70C 0C04 003A                  		cmpi.b	#$3A,d4
0001D710 6500                       		bcs.s	loc_1BD46
0001D712 0C04 004B                  		cmpi.b	#$4B,d4
0001D716 6400                       		bcc.s	loc_1BD46
0001D718                            
0001D718                            locret_1BD44:
0001D718 4E75                       		rts	
0001D71A                            ; ===========================================================================
0001D71A                            
0001D71A                            loc_1BD46:
0001D71A 1144 0030                  		move.b	d4,$30(a0)
0001D71E 2149 0032                  		move.l	a1,$32(a0)
0001D722 7AFF                       		moveq	#-1,d5
0001D724 4E75                       		rts	
0001D726                            ; End of function sub_1BD30
0001D726                            
0001D726                            
0001D726                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D726                            
0001D726                            
0001D726                            Obj09_ChkItems:				; XREF: Obj09_Display
0001D726 43F9 00FF 0000             		lea	($FF0000).l,a1
0001D72C 7800                       		moveq	#0,d4
0001D72E 3828 000C                  		move.w	$C(a0),d4
0001D732 0644 0050                  		addi.w	#$50,d4
0001D736 88FC 0018                  		divu.w	#$18,d4
0001D73A C8FC 0080                  		mulu.w	#$80,d4
0001D73E D3C4                       		adda.l	d4,a1
0001D740 7800                       		moveq	#0,d4
0001D742 3828 0008                  		move.w	8(a0),d4
0001D746 0644 0020                  		addi.w	#$20,d4
0001D74A 88FC 0018                  		divu.w	#$18,d4
0001D74E D2C4                       		adda.w	d4,a1
0001D750 1811                       		move.b	(a1),d4
0001D752 6600                       		bne.s	Obj09_ChkCont
0001D754 4A28 003A                  		tst.b	$3A(a0)
0001D758 6600 0000                  		bne.w	Obj09_MakeGhostSolid
0001D75C 7800                       		moveq	#0,d4
0001D75E 4E75                       		rts	
0001D760                            ; ===========================================================================
0001D760                            
0001D760                            Obj09_ChkCont:
0001D760 0C04 003A                  		cmpi.b	#$3A,d4		; is the item a	ring?
0001D764 6600                       		bne.s	Obj09_Chk1Up
0001D766 6100 F726                  		bsr.w	SS_RemoveCollectedItem
0001D76A 6600                       		bne.s	Obj09_GetCont
0001D76C 14BC 0001                  		move.b	#1,(a2)
0001D770 2549 0004                  		move.l	a1,4(a2)
0001D774                            
0001D774                            Obj09_GetCont:
0001D774 4EB9 0000 A704             		jsr	CollectRing
0001D77A 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; check if you have 50 rings
0001D780 6500                       		bcs.s	Obj09_NoCont
0001D782 08F8 0000 FE1B             		bset	#0,($FFFFFE1B).w
0001D788 6600                       		bne.s	Obj09_NoCont
0001D78A 5238 FE18                  		addq.b	#1,($FFFFFE18).w ; add 1 to number of continues
0001D78E 303C 00BF                  		move.w	#$BF,d0
0001D792 4EB9 0000 1470             		jsr	(PlaySound).l	; play extra continue sound
0001D798                            
0001D798                            Obj09_NoCont:
0001D798 7800                       		moveq	#0,d4
0001D79A 4E75                       		rts	
0001D79C                            ; ===========================================================================
0001D79C                            
0001D79C                            Obj09_Chk1Up:
0001D79C 0C04 0028                  		cmpi.b	#$28,d4		; is the item an extra life?
0001D7A0 6600                       		bne.s	Obj09_ChkEmer
0001D7A2 6100 F6EA                  		bsr.w	SS_RemoveCollectedItem
0001D7A6 6600                       		bne.s	Obj09_Get1Up
0001D7A8 14BC 0003                  		move.b	#3,(a2)
0001D7AC 2549 0004                  		move.l	a1,4(a2)
0001D7B0                            
0001D7B0                            Obj09_Get1Up:
0001D7B0 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to number of lives
0001D7B4 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to lives counter
0001D7B8 303C 0088                  		move.w	#$88,d0
0001D7BC 4EB9 0000 1470             		jsr	(PlaySound).l	; play extra life music
0001D7C2 7800                       		moveq	#0,d4
0001D7C4 4E75                       		rts	
0001D7C6                            ; ===========================================================================
0001D7C6                            
0001D7C6                            Obj09_ChkEmer:
0001D7C6 0C04 003B                  		cmpi.b	#$3B,d4		; is the item an emerald?
0001D7CA 6500                       		bcs.s	Obj09_ChkGhost
0001D7CC 0C04 0040                  		cmpi.b	#$40,d4
0001D7D0 6200                       		bhi.s	Obj09_ChkGhost
0001D7D2 6100 F6BA                  		bsr.w	SS_RemoveCollectedItem
0001D7D6 6600                       		bne.s	Obj09_GetEmer
0001D7D8 14BC 0005                  		move.b	#5,(a2)
0001D7DC 2549 0004                  		move.l	a1,4(a2)
0001D7E0                            
0001D7E0                            Obj09_GetEmer:
0001D7E0 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all the emeralds?
0001D7E6 6700                       		beq.s	Obj09_NoEmer	; if yes, branch
0001D7E8 0404 003B                  		subi.b	#$3B,d4
0001D7EC 7000                       		moveq	#0,d0
0001D7EE 1038 FE57                  		move.b	($FFFFFE57).w,d0
0001D7F2 45F8 FE58                  		lea	($FFFFFE58).w,a2
0001D7F6 1584 0000                  		move.b	d4,(a2,d0.w)
0001D7FA 5238 FE57                  		addq.b	#1,($FFFFFE57).w ; add 1 to number of emeralds
0001D7FE                            
0001D7FE                            Obj09_NoEmer:
0001D7FE 303C 0093                  		move.w	#$93,d0
0001D802 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play emerald music
0001D808 7800                       		moveq	#0,d4
0001D80A 4E75                       		rts	
0001D80C                            ; ===========================================================================
0001D80C                            
0001D80C                            Obj09_ChkGhost:
0001D80C 0C04 0041                  		cmpi.b	#$41,d4		; is the item a	ghost block?
0001D810 6600                       		bne.s	Obj09_ChkGhostTag
0001D812 117C 0001 003A             		move.b	#1,$3A(a0)	; mark the ghost block as "passed"
0001D818                            
0001D818                            Obj09_ChkGhostTag:
0001D818 0C04 004A                  		cmpi.b	#$4A,d4		; is the item a	switch for ghost blocks?
0001D81C 6600                       		bne.s	Obj09_NoGhost
0001D81E 0C28 0001 003A             		cmpi.b	#1,$3A(a0)	; have the ghost blocks	been passed?
0001D824 6600                       		bne.s	Obj09_NoGhost	; if not, branch
0001D826 117C 0002 003A             		move.b	#2,$3A(a0)	; mark the ghost blocks	as "solid"
0001D82C                            
0001D82C                            Obj09_NoGhost:
0001D82C 78FF                       		moveq	#-1,d4
0001D82E 4E75                       		rts	
0001D830                            ; ===========================================================================
0001D830                            
0001D830                            Obj09_MakeGhostSolid:
0001D830 0C28 0002 003A             		cmpi.b	#2,$3A(a0)	; is the ghost marked as "solid"?
0001D836 6600                       		bne.s	Obj09_GhostNotSolid ; if not, branch
0001D838 43F9 00FF 1020             		lea	($FF1020).l,a1
0001D83E 723F                       		moveq	#$3F,d1
0001D840                            
0001D840                            Obj09_GhostLoop2:
0001D840 743F                       		moveq	#$3F,d2
0001D842                            
0001D842                            Obj09_GhostLoop:
0001D842 0C11 0041                  		cmpi.b	#$41,(a1)	; is the item a	ghost block?
0001D846 6600                       		bne.s	Obj09_NoReplace	; if not, branch
0001D848 12BC 002C                  		move.b	#$2C,(a1)	; replace ghost	block with a solid block
0001D84C                            
0001D84C                            Obj09_NoReplace:
0001D84C 5249                       		addq.w	#1,a1
0001D84E 51CA FFF2                  		dbf	d2,Obj09_GhostLoop
0001D852 43E9 0040                  		lea	$40(a1),a1
0001D856 51C9 FFE8                  		dbf	d1,Obj09_GhostLoop2
0001D85A                            
0001D85A                            Obj09_GhostNotSolid:
0001D85A 4228 003A                  		clr.b	$3A(a0)
0001D85E 7800                       		moveq	#0,d4
0001D860 4E75                       		rts	
0001D862                            ; End of function Obj09_ChkItems
0001D862                            
0001D862                            
0001D862                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D862                            
0001D862                            
0001D862                            Obj09_ChkItems2:			; XREF: Obj09_Display
0001D862 1028 0030                  		move.b	$30(a0),d0
0001D866 6600                       		bne.s	Obj09_ChkBumper
0001D868 5328 0036                  		subq.b	#1,$36(a0)
0001D86C 6A00                       		bpl.s	loc_1BEA0
0001D86E 117C 0000 0036             		move.b	#0,$36(a0)
0001D874                            
0001D874                            loc_1BEA0:
0001D874 5328 0037                  		subq.b	#1,$37(a0)
0001D878 6A00                       		bpl.s	locret_1BEAC
0001D87A 117C 0000 0037             		move.b	#0,$37(a0)
0001D880                            
0001D880                            locret_1BEAC:
0001D880 4E75                       		rts	
0001D882                            ; ===========================================================================
0001D882                            
0001D882                            Obj09_ChkBumper:
0001D882 0C00 0025                  		cmpi.b	#$25,d0		; is the item a	bumper?
0001D886 6600                       		bne.s	Obj09_GOAL
0001D888 2228 0032                  		move.l	$32(a0),d1
0001D88C 0481 00FF 0001             		subi.l	#$FF0001,d1
0001D892 3401                       		move.w	d1,d2
0001D894 0241 007F                  		andi.w	#$7F,d1
0001D898 C2FC 0018                  		mulu.w	#$18,d1
0001D89C 0441 0014                  		subi.w	#$14,d1
0001D8A0 EE4A                       		lsr.w	#7,d2
0001D8A2 0242 007F                  		andi.w	#$7F,d2
0001D8A6 C4FC 0018                  		mulu.w	#$18,d2
0001D8AA 0442 0044                  		subi.w	#$44,d2
0001D8AE 9268 0008                  		sub.w	8(a0),d1
0001D8B2 9468 000C                  		sub.w	$C(a0),d2
0001D8B6 4EB9 0000 36A2             		jsr	(CalcAngle).l
0001D8BC 4EB9 0000 33D4             		jsr	(CalcSine).l
0001D8C2 C3FC F900                  		muls.w	#-$700,d1
0001D8C6 E081                       		asr.l	#8,d1
0001D8C8 3141 0010                  		move.w	d1,$10(a0)
0001D8CC C1FC F900                  		muls.w	#-$700,d0
0001D8D0 E080                       		asr.l	#8,d0
0001D8D2 3140 0012                  		move.w	d0,$12(a0)
0001D8D6 08E8 0001 0022             		bset	#1,$22(a0)
0001D8DC 6100 F5B0                  		bsr.w	SS_RemoveCollectedItem
0001D8E0 6600                       		bne.s	Obj09_BumpSnd
0001D8E2 14BC 0002                  		move.b	#2,(a2)
0001D8E6 2028 0032                  		move.l	$32(a0),d0
0001D8EA 5380                       		subq.l	#1,d0
0001D8EC 2540 0004                  		move.l	d0,4(a2)
0001D8F0                            
0001D8F0                            Obj09_BumpSnd:
0001D8F0 303C 00B4                  		move.w	#$B4,d0
0001D8F4 4EF9 0000 1476             		jmp	(PlaySound_Special).l ;	play bumper sound
0001D8FA                            ; ===========================================================================
0001D8FA                            
0001D8FA                            Obj09_GOAL:
0001D8FA 0C00 0027                  		cmpi.b	#$27,d0		; is the item a	"GOAL"?
0001D8FE 6600                       		bne.s	Obj09_UPblock
0001D900 5428 0024                  		addq.b	#2,$24(a0)	; run routine "Obj09_ExitStage"
0001D904 303C 00A8                  		move.w	#$A8,d0		; change item
0001D908 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play "GOAL" sound
0001D90E 4E75                       		rts	
0001D910                            ; ===========================================================================
0001D910                            
0001D910                            Obj09_UPblock:
0001D910 0C00 0029                  		cmpi.b	#$29,d0		; is the item an "UP" block?
0001D914 6600                       		bne.s	Obj09_DOWNblock
0001D916 4A28 0036                  		tst.b	$36(a0)
0001D91A 6600 0000                  		bne.w	Obj09_NoGlass
0001D91E 117C 001E 0036             		move.b	#$1E,$36(a0)
0001D924 0838 0006 F783             		btst	#6,($FFFFF783).w
0001D92A 6700                       		beq.s	Obj09_UPsnd
0001D92C E1F8 F782                  		asl	($FFFFF782).w	; increase stage rotation speed
0001D930 2268 0032                  		movea.l	$32(a0),a1
0001D934 5389                       		subq.l	#1,a1
0001D936 12BC 002A                  		move.b	#$2A,(a1)	; change item to a "DOWN" block
0001D93A                            
0001D93A                            Obj09_UPsnd:
0001D93A 303C 00A9                  		move.w	#$A9,d0
0001D93E 4EF9 0000 1476             		jmp	(PlaySound_Special).l ;	play up/down sound
0001D944                            ; ===========================================================================
0001D944                            
0001D944                            Obj09_DOWNblock:
0001D944 0C00 002A                  		cmpi.b	#$2A,d0		; is the item a	"DOWN" block?
0001D948 6600                       		bne.s	Obj09_Rblock
0001D94A 4A28 0036                  		tst.b	$36(a0)
0001D94E 6600 0000                  		bne.w	Obj09_NoGlass
0001D952 117C 001E 0036             		move.b	#$1E,$36(a0)
0001D958 0838 0006 F783             		btst	#6,($FFFFF783).w
0001D95E 6600                       		bne.s	Obj09_DOWNsnd
0001D960 E0F8 F782                  		asr	($FFFFF782).w	; reduce stage rotation	speed
0001D964 2268 0032                  		movea.l	$32(a0),a1
0001D968 5389                       		subq.l	#1,a1
0001D96A 12BC 0029                  		move.b	#$29,(a1)	; change item to an "UP" block
0001D96E                            
0001D96E                            Obj09_DOWNsnd:
0001D96E 303C 00A9                  		move.w	#$A9,d0
0001D972 4EF9 0000 1476             		jmp	(PlaySound_Special).l ;	play up/down sound
0001D978                            ; ===========================================================================
0001D978                            
0001D978                            Obj09_Rblock:
0001D978 0C00 002B                  		cmpi.b	#$2B,d0		; is the item an "R" block?
0001D97C 6600                       		bne.s	Obj09_ChkGlass
0001D97E 4A28 0037                  		tst.b	$37(a0)
0001D982 6600 0000                  		bne.w	Obj09_NoGlass
0001D986 117C 001E 0037             		move.b	#$1E,$37(a0)
0001D98C 6100 F500                  		bsr.w	SS_RemoveCollectedItem
0001D990 6600                       		bne.s	Obj09_RevStage
0001D992 14BC 0004                  		move.b	#4,(a2)
0001D996 2028 0032                  		move.l	$32(a0),d0
0001D99A 5380                       		subq.l	#1,d0
0001D99C 2540 0004                  		move.l	d0,4(a2)
0001D9A0                            
0001D9A0                            Obj09_RevStage:
0001D9A0 4478 F782                  		neg.w	($FFFFF782).w	; reverse stage	rotation
0001D9A4 303C 00A9                  		move.w	#$A9,d0
0001D9A8 4EF9 0000 1476             		jmp	(PlaySound_Special).l ;	play sound
0001D9AE                            ; ===========================================================================
0001D9AE                            
0001D9AE                            Obj09_ChkGlass:
0001D9AE 0C00 002D                  		cmpi.b	#$2D,d0		; is the item a	glass block?
0001D9B2 6700                       		beq.s	Obj09_Glass	; if yes, branch
0001D9B4 0C00 002E                  		cmpi.b	#$2E,d0
0001D9B8 6700                       		beq.s	Obj09_Glass
0001D9BA 0C00 002F                  		cmpi.b	#$2F,d0
0001D9BE 6700                       		beq.s	Obj09_Glass
0001D9C0 0C00 0030                  		cmpi.b	#$30,d0
0001D9C4 6600                       		bne.s	Obj09_NoGlass	; if not, branch
0001D9C6                            
0001D9C6                            Obj09_Glass:
0001D9C6 6100 F4C6                  		bsr.w	SS_RemoveCollectedItem
0001D9CA 6600                       		bne.s	Obj09_GlassSnd
0001D9CC 14BC 0006                  		move.b	#6,(a2)
0001D9D0 2268 0032                  		movea.l	$32(a0),a1
0001D9D4 5389                       		subq.l	#1,a1
0001D9D6 2549 0004                  		move.l	a1,4(a2)
0001D9DA 1011                       		move.b	(a1),d0
0001D9DC 5200                       		addq.b	#1,d0		; change glass type when touched
0001D9DE 0C00 0030                  		cmpi.b	#$30,d0
0001D9E2 6300                       		bls.s	Obj09_GlassUpdate ; if glass is	still there, branch
0001D9E4 4200                       		clr.b	d0		; remove the glass block when it's destroyed
0001D9E6                            
0001D9E6                            Obj09_GlassUpdate:
0001D9E6 1540 0004                  		move.b	d0,4(a2)	; update the stage layout
0001D9EA                            
0001D9EA                            Obj09_GlassSnd:
0001D9EA 303C 00BA                  		move.w	#$BA,d0
0001D9EE 4EF9 0000 1476             		jmp	(PlaySound_Special).l ;	play glass block sound
0001D9F4                            ; ===========================================================================
0001D9F4                            
0001D9F4                            Obj09_NoGlass:
0001D9F4 4E75                       		rts	
0001D9F6                            ; End of function Obj09_ChkItems2
0001D9F6                            
0001D9F6                            ; ===========================================================================
0001D9F6                            ; ---------------------------------------------------------------------------
0001D9F6                            ; Object 10 - blank
0001D9F6                            ; ---------------------------------------------------------------------------
0001D9F6                            
0001D9F6                            Obj10:					; XREF: Obj_Index
0001D9F6 4E75                       		rts	
0001D9F8                            ; ---------------------------------------------------------------------------
0001D9F8                            ; Subroutine to	animate	level graphics
0001D9F8                            ; ---------------------------------------------------------------------------
0001D9F8                            
0001D9F8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D9F8                            
0001D9F8                            
0001D9F8                            AniArt_Load:				; XREF: Demo_Time; loc_F54
0001D9F8 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
0001D9FC 6600                       		bne.s	AniArt_Pause	; if yes, branch
0001D9FE 4DF9 00C0 0000             		lea	($C00000).l,a6
0001DA04 6100 0000                  		bsr.w	AniArt_GiantRing
0001DA08 7000                       		moveq	#0,d0
0001DA0A 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001DA0E D040                       		add.w	d0,d0
0001DA10 303B 0000                  		move.w	AniArt_Index(pc,d0.w),d0
0001DA14 4EFB 0000                  		jmp	AniArt_Index(pc,d0.w)
0001DA18                            ; ===========================================================================
0001DA18                            
0001DA18                            AniArt_Pause:
0001DA18 4E75                       		rts	
0001DA1A                            ; End of function AniArt_Load
0001DA1A                            
0001DA1A                            ; ===========================================================================
0001DA1A 0000 0000                  AniArt_Index:	dc.w AniArt_GHZ-AniArt_Index, AniArt_none-AniArt_Index
0001DA1E 0000 0000                  		dc.w AniArt_MZ-AniArt_Index, AniArt_none-AniArt_Index
0001DA22 0000 0000                  		dc.w AniArt_none-AniArt_Index, AniArt_SBZ-AniArt_Index
0001DA26 0000                       		dc.w AniArt_Ending-AniArt_Index
0001DA28                            ; ===========================================================================
0001DA28                            ; ---------------------------------------------------------------------------
0001DA28                            ; Animated pattern routine - Green Hill
0001DA28                            ; ---------------------------------------------------------------------------
0001DA28                            
0001DA28                            AniArt_GHZ:				; XREF: AniArt_Index
0001DA28 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001DA2C 6A00                       		bpl.s	loc_1C08A
0001DA2E 11FC 0005 F7B1             		move.b	#5,($FFFFF7B1).w ; time	to display each	frame for
0001DA34 43F9 0000 0000             		lea	(Art_GhzWater).l,a1 ; load waterfall patterns
0001DA3A 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001DA3E 5238 F7B0                  		addq.b	#1,($FFFFF7B0).w
0001DA42 0240 0001                  		andi.w	#1,d0
0001DA46 6700                       		beq.s	loc_1C078
0001DA48 43E9 0100                  		lea	$100(a1),a1	; load next frame
0001DA4C                            
0001DA4C                            loc_1C078:
0001DA4C 23FC 6F00 0001 00C0 0004   		move.l	#$6F000001,($C00004).l ; VRAM address
0001DA56 323C 0007                  		move.w	#7,d1		; number of 8x8	tiles
0001DA5A 6000 0000                  		bra.w	LoadTiles
0001DA5E                            ; ===========================================================================
0001DA5E                            
0001DA5E                            loc_1C08A:
0001DA5E 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001DA62 6A00                       		bpl.s	loc_1C0C0
0001DA64 11FC 000F F7B3             		move.b	#$F,($FFFFF7B3).w
0001DA6A 43F9 0000 0000             		lea	(Art_GhzFlower1).l,a1 ;	load big flower	patterns
0001DA70 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001DA74 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001DA78 0240 0001                  		andi.w	#1,d0
0001DA7C 6700                       		beq.s	loc_1C0AE
0001DA7E 43E9 0200                  		lea	$200(a1),a1
0001DA82                            
0001DA82                            loc_1C0AE:
0001DA82 23FC 6B80 0001 00C0 0004   		move.l	#$6B800001,($C00004).l
0001DA8C 323C 000F                  		move.w	#$F,d1
0001DA90 6000 0000                  		bra.w	LoadTiles
0001DA94                            ; ===========================================================================
0001DA94                            
0001DA94                            loc_1C0C0:
0001DA94 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001DA98 6A00                       		bpl.s	locret_1C10C
0001DA9A 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001DAA0 1038 F7B4                  		move.b	($FFFFF7B4).w,d0
0001DAA4 5238 F7B4                  		addq.b	#1,($FFFFF7B4).w
0001DAA8 0240 0003                  		andi.w	#3,d0
0001DAAC 103B 0000                  		move.b	byte_1C10E(pc,d0.w),d0
0001DAB0 0800 0000                  		btst	#0,d0
0001DAB4 6600                       		bne.s	loc_1C0E8
0001DAB6 11FC 007F F7B5             		move.b	#$7F,($FFFFF7B5).w
0001DABC                            
0001DABC                            loc_1C0E8:
0001DABC EF48                       		lsl.w	#7,d0
0001DABE 3200                       		move.w	d0,d1
0001DAC0 D040                       		add.w	d0,d0
0001DAC2 D041                       		add.w	d1,d0
0001DAC4 23FC 6D80 0001 00C0 0004   		move.l	#$6D800001,($C00004).l
0001DACE 43F9 0000 0000             		lea	(Art_GhzFlower2).l,a1 ;	load small flower patterns
0001DAD4 43F1 0000                  		lea	(a1,d0.w),a1
0001DAD8 323C 000B                  		move.w	#$B,d1
0001DADC 6100 0000                  		bsr.w	LoadTiles
0001DAE0                            
0001DAE0                            locret_1C10C:
0001DAE0 4E75                       		rts	
0001DAE2                            ; ===========================================================================
0001DAE2 0001 0201                  byte_1C10E:	dc.b 0,	1, 2, 1
0001DAE6                            ; ===========================================================================
0001DAE6                            ; ---------------------------------------------------------------------------
0001DAE6                            ; Animated pattern routine - Marble
0001DAE6                            ; ---------------------------------------------------------------------------
0001DAE6                            
0001DAE6                            AniArt_MZ:				; XREF: AniArt_Index
0001DAE6 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001DAEA 6A00                       		bpl.s	loc_1C150
0001DAEC 11FC 0013 F7B1             		move.b	#$13,($FFFFF7B1).w
0001DAF2 43F9 0000 0000             		lea	(Art_MzLava1).l,a1 ; load lava surface patterns
0001DAF8 7000                       		moveq	#0,d0
0001DAFA 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001DAFE 5200                       		addq.b	#1,d0
0001DB00 0C00 0003                  		cmpi.b	#3,d0
0001DB04 6600                       		bne.s	loc_1C134
0001DB06 7000                       		moveq	#0,d0
0001DB08                            
0001DB08                            loc_1C134:
0001DB08 11C0 F7B0                  		move.b	d0,($FFFFF7B0).w
0001DB0C C0FC 0100                  		mulu.w	#$100,d0
0001DB10 D2C0                       		adda.w	d0,a1
0001DB12 23FC 5C40 0001 00C0 0004   		move.l	#$5C400001,($C00004).l
0001DB1C 323C 0007                  		move.w	#7,d1
0001DB20 6100 0000                  		bsr.w	LoadTiles
0001DB24                            
0001DB24                            loc_1C150:
0001DB24 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001DB28 6A00                       		bpl.s	loc_1C1AE
0001DB2A 11FC 0001 F7B3             		move.b	#1,($FFFFF7B3).w
0001DB30 7000                       		moveq	#0,d0
0001DB32 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001DB36 49F9 0000 0000             		lea	(Art_MzLava2).l,a4 ; load lava patterns
0001DB3C EE58                       		ror.w	#7,d0
0001DB3E D8C0                       		adda.w	d0,a4
0001DB40 23FC 5A40 0001 00C0 0004   		move.l	#$5A400001,($C00004).l
0001DB4A 7600                       		moveq	#0,d3
0001DB4C 1638 F7B2                  		move.b	($FFFFF7B2).w,d3
0001DB50 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001DB54 1638 FE68                  		move.b	($FFFFFE68).w,d3
0001DB58 343C 0003                  		move.w	#3,d2
0001DB5C                            
0001DB5C                            loc_1C188:
0001DB5C 3003                       		move.w	d3,d0
0001DB5E D040                       		add.w	d0,d0
0001DB60 0240 001E                  		andi.w	#$1E,d0
0001DB64 47F9 0000 0000             		lea	(AniArt_MZextra).l,a3
0001DB6A 3033 0000                  		move.w	(a3,d0.w),d0
0001DB6E 47F3 0000                  		lea	(a3,d0.w),a3
0001DB72 224C                       		movea.l	a4,a1
0001DB74 323C 001F                  		move.w	#$1F,d1
0001DB78 4E93                       		jsr	(a3)
0001DB7A 5843                       		addq.w	#4,d3
0001DB7C 51CA FFDE                  		dbf	d2,loc_1C188
0001DB80 4E75                       		rts	
0001DB82                            ; ===========================================================================
0001DB82                            
0001DB82                            loc_1C1AE:
0001DB82 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001DB86 6A00 0000                  		bpl.w	locret_1C1EA
0001DB8A 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001DB90 43F9 0000 0000             		lea	(Art_MzTorch).l,a1 ; load torch	patterns
0001DB96 7000                       		moveq	#0,d0
0001DB98 1038 F7B6                  		move.b	($FFFFF7B6).w,d0
0001DB9C 5238 F7B6                  		addq.b	#1,($FFFFF7B6).w
0001DBA0 0238 0003 F7B6             		andi.b	#3,($FFFFF7B6).w
0001DBA6 C0FC 00C0                  		mulu.w	#$C0,d0
0001DBAA D2C0                       		adda.w	d0,a1
0001DBAC 23FC 5E40 0001 00C0 0004   		move.l	#$5E400001,($C00004).l
0001DBB6 323C 0005                  		move.w	#5,d1
0001DBBA 6000 0000                  		bra.w	LoadTiles
0001DBBE                            ; ===========================================================================
0001DBBE                            
0001DBBE                            locret_1C1EA:
0001DBBE 4E75                       		rts	
0001DBC0                            ; ===========================================================================
0001DBC0                            ; ---------------------------------------------------------------------------
0001DBC0                            ; Animated pattern routine - Scrap Brain
0001DBC0                            ; ---------------------------------------------------------------------------
0001DBC0                            
0001DBC0                            AniArt_SBZ:				; XREF: AniArt_Index
0001DBC0 4A38 F7B4                  		tst.b	($FFFFF7B4).w
0001DBC4 6700                       		beq.s	loc_1C1F8
0001DBC6 5338 F7B4                  		subq.b	#1,($FFFFF7B4).w
0001DBCA 6000                       		bra.s	loc_1C250
0001DBCC                            ; ===========================================================================
0001DBCC                            
0001DBCC                            loc_1C1F8:
0001DBCC 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001DBD0 6A00                       		bpl.s	loc_1C250
0001DBD2 11FC 0007 F7B1             		move.b	#7,($FFFFF7B1).w
0001DBD8 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1 ; load smoke patterns
0001DBDE 23FC 4900 0002 00C0 0004   		move.l	#$49000002,($C00004).l
0001DBE8 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001DBEC 5238 F7B0                  		addq.b	#1,($FFFFF7B0).w
0001DBF0 0240 0007                  		andi.w	#7,d0
0001DBF4 6700                       		beq.s	loc_1C234
0001DBF6 5340                       		subq.w	#1,d0
0001DBF8 C0FC 0180                  		mulu.w	#$180,d0
0001DBFC 43F1 0000                  		lea	(a1,d0.w),a1
0001DC00 323C 000B                  		move.w	#$B,d1
0001DC04 6000 0000                  		bra.w	LoadTiles
0001DC08                            ; ===========================================================================
0001DC08                            
0001DC08                            loc_1C234:
0001DC08 11FC 00B4 F7B4             		move.b	#$B4,($FFFFF7B4).w
0001DC0E                            
0001DC0E                            loc_1C23A:
0001DC0E 323C 0005                  		move.w	#5,d1
0001DC12 6100 0000                  		bsr.w	LoadTiles
0001DC16 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1
0001DC1C 323C 0005                  		move.w	#5,d1
0001DC20 6000 0000                  		bra.w	LoadTiles
0001DC24                            ; ===========================================================================
0001DC24                            
0001DC24                            loc_1C250:
0001DC24 4A38 F7B5                  		tst.b	($FFFFF7B5).w
0001DC28 6700                       		beq.s	loc_1C25C
0001DC2A 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001DC2E 6000                       		bra.s	locret_1C2A0
0001DC30                            ; ===========================================================================
0001DC30                            
0001DC30                            loc_1C25C:
0001DC30 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001DC34 6A00                       		bpl.s	locret_1C2A0
0001DC36 11FC 0007 F7B3             		move.b	#7,($FFFFF7B3).w
0001DC3C 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1
0001DC42 23FC 4A80 0002 00C0 0004   		move.l	#$4A800002,($C00004).l
0001DC4C 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001DC50 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001DC54 0240 0007                  		andi.w	#7,d0
0001DC58 6700                       		beq.s	loc_1C298
0001DC5A 5340                       		subq.w	#1,d0
0001DC5C C0FC 0180                  		mulu.w	#$180,d0
0001DC60 43F1 0000                  		lea	(a1,d0.w),a1
0001DC64 323C 000B                  		move.w	#$B,d1
0001DC68 6000 0000                  		bra.w	LoadTiles
0001DC6C                            ; ===========================================================================
0001DC6C                            
0001DC6C                            loc_1C298:
0001DC6C 11FC 0078 F7B5             		move.b	#$78,($FFFFF7B5).w
0001DC72 609A                       		bra.s	loc_1C23A
0001DC74                            ; ===========================================================================
0001DC74                            
0001DC74                            locret_1C2A0:
0001DC74 4E75                       		rts	
0001DC76                            ; ===========================================================================
0001DC76                            ; ---------------------------------------------------------------------------
0001DC76                            ; Animated pattern routine - ending sequence
0001DC76                            ; ---------------------------------------------------------------------------
0001DC76                            
0001DC76                            AniArt_Ending:				; XREF: AniArt_Index
0001DC76 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001DC7A 6A00                       		bpl.s	loc_1C2F4
0001DC7C 11FC 0007 F7B3             		move.b	#7,($FFFFF7B3).w
0001DC82 43F9 0000 0000             		lea	(Art_GhzFlower1).l,a1 ;	load big flower	patterns
0001DC88 45F8 9400                  		lea	($FFFF9400).w,a2
0001DC8C 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001DC90 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001DC94 0240 0001                  		andi.w	#1,d0
0001DC98 6700                       		beq.s	loc_1C2CE
0001DC9A 43E9 0200                  		lea	$200(a1),a1
0001DC9E 45EA 0200                  		lea	$200(a2),a2
0001DCA2                            
0001DCA2                            loc_1C2CE:
0001DCA2 23FC 6B80 0001 00C0 0004   		move.l	#$6B800001,($C00004).l
0001DCAC 323C 000F                  		move.w	#$F,d1
0001DCB0 6100 0000                  		bsr.w	LoadTiles
0001DCB4 224A                       		movea.l	a2,a1
0001DCB6 23FC 7200 0001 00C0 0004   		move.l	#$72000001,($C00004).l
0001DCC0 323C 000F                  		move.w	#$F,d1
0001DCC4 6000 0000                  		bra.w	LoadTiles
0001DCC8                            ; ===========================================================================
0001DCC8                            
0001DCC8                            loc_1C2F4:
0001DCC8 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001DCCC 6A00                       		bpl.s	loc_1C33C
0001DCCE 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001DCD4 1038 F7B4                  		move.b	($FFFFF7B4).w,d0
0001DCD8 5238 F7B4                  		addq.b	#1,($FFFFF7B4).w
0001DCDC 0240 0007                  		andi.w	#7,d0
0001DCE0 103B 0000                  		move.b	byte_1C334(pc,d0.w),d0
0001DCE4 EF48                       		lsl.w	#7,d0
0001DCE6 3200                       		move.w	d0,d1
0001DCE8 D040                       		add.w	d0,d0
0001DCEA D041                       		add.w	d1,d0
0001DCEC 23FC 6D80 0001 00C0 0004   		move.l	#$6D800001,($C00004).l
0001DCF6 43F9 0000 0000             		lea	(Art_GhzFlower2).l,a1 ;	load small flower patterns
0001DCFC 43F1 0000                  		lea	(a1,d0.w),a1
0001DD00 323C 000B                  		move.w	#$B,d1
0001DD04 6000 0000                  		bra.w	LoadTiles
0001DD08                            ; ===========================================================================
0001DD08 0000 0001 0202 0201        byte_1C334:	dc.b 0,	0, 0, 1, 2, 2, 2, 1
0001DD10                            ; ===========================================================================
0001DD10                            
0001DD10                            loc_1C33C:
0001DD10 5338 F7B9                  		subq.b	#1,($FFFFF7B9).w
0001DD14 6A00                       		bpl.s	loc_1C37A
0001DD16 11FC 000E F7B9             		move.b	#$E,($FFFFF7B9).w
0001DD1C 1038 F7B8                  		move.b	($FFFFF7B8).w,d0
0001DD20 5238 F7B8                  		addq.b	#1,($FFFFF7B8).w
0001DD24 0240 0003                  		andi.w	#3,d0
0001DD28 103B 0000                  		move.b	byte_1C376(pc,d0.w),d0
0001DD2C E148                       		lsl.w	#8,d0
0001DD2E D040                       		add.w	d0,d0
0001DD30 23FC 7000 0001 00C0 0004   		move.l	#$70000001,($C00004).l
0001DD3A 43F8 9800                  		lea	($FFFF9800).w,a1 ; load	special	flower patterns	(from RAM)
0001DD3E 43F1 0000                  		lea	(a1,d0.w),a1
0001DD42 323C 000F                  		move.w	#$F,d1
0001DD46 6000 0000                  		bra.w	LoadTiles
0001DD4A                            ; ===========================================================================
0001DD4A 0001 0201                  byte_1C376:	dc.b 0,	1, 2, 1
0001DD4E                            ; ===========================================================================
0001DD4E                            
0001DD4E                            loc_1C37A:
0001DD4E 5338 F7BB                  		subq.b	#1,($FFFFF7BB).w
0001DD52 6A00                       		bpl.s	locret_1C3B4
0001DD54 11FC 000B F7BB             		move.b	#$B,($FFFFF7BB).w
0001DD5A 1038 F7BA                  		move.b	($FFFFF7BA).w,d0
0001DD5E 5238 F7BA                  		addq.b	#1,($FFFFF7BA).w
0001DD62 0240 0003                  		andi.w	#3,d0
0001DD66 103B 00E2                  		move.b	byte_1C376(pc,d0.w),d0
0001DD6A E148                       		lsl.w	#8,d0
0001DD6C D040                       		add.w	d0,d0
0001DD6E 23FC 6800 0001 00C0 0004   		move.l	#$68000001,($C00004).l
0001DD78 43F8 9E00                  		lea	($FFFF9E00).w,a1 ; load	special	flower patterns	(from RAM)
0001DD7C 43F1 0000                  		lea	(a1,d0.w),a1
0001DD80 323C 000F                  		move.w	#$F,d1
0001DD84 6000 0000                  		bra.w	LoadTiles
0001DD88                            ; ===========================================================================
0001DD88                            
0001DD88                            locret_1C3B4:
0001DD88 4E75                       		rts	
0001DD8A                            ; ===========================================================================
0001DD8A                            
0001DD8A                            AniArt_none:				; XREF: AniArt_Index
0001DD8A 4E75                       		rts	
0001DD8C                            
0001DD8C                            ; ---------------------------------------------------------------------------
0001DD8C                            ; Subroutine to	load (d1 - 1) 8x8 tiles
0001DD8C                            ; ---------------------------------------------------------------------------
0001DD8C                            
0001DD8C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DD8C                            
0001DD8C                            
0001DD8C                            LoadTiles:
0001DD8C 2C99                       		move.l	(a1)+,(a6)
0001DD8E 2C99                       		move.l	(a1)+,(a6)
0001DD90 2C99                       		move.l	(a1)+,(a6)
0001DD92 2C99                       		move.l	(a1)+,(a6)
0001DD94 2C99                       		move.l	(a1)+,(a6)
0001DD96 2C99                       		move.l	(a1)+,(a6)
0001DD98 2C99                       		move.l	(a1)+,(a6)
0001DD9A 2C99                       		move.l	(a1)+,(a6)
0001DD9C 51C9 FFEE                  		dbf	d1,LoadTiles
0001DDA0 4E75                       		rts	
0001DDA2                            ; End of function LoadTiles
0001DDA2                            
0001DDA2                            ; ===========================================================================
0001DDA2                            ; ---------------------------------------------------------------------------
0001DDA2                            ; Animated pattern routine - more Marble Zone
0001DDA2                            ; ---------------------------------------------------------------------------
0001DDA2 0000 0000                  AniArt_MZextra:	dc.w loc_1C3EE-AniArt_MZextra, loc_1C3FA-AniArt_MZextra
0001DDA6 0000 0000                  		dc.w loc_1C410-AniArt_MZextra, loc_1C41E-AniArt_MZextra
0001DDAA 0000 0000                  		dc.w loc_1C434-AniArt_MZextra, loc_1C442-AniArt_MZextra
0001DDAE 0000 0000                  		dc.w loc_1C458-AniArt_MZextra, loc_1C466-AniArt_MZextra
0001DDB2 0000 0000                  		dc.w loc_1C47C-AniArt_MZextra, loc_1C48A-AniArt_MZextra
0001DDB6 0000 0000                  		dc.w loc_1C4A0-AniArt_MZextra, loc_1C4AE-AniArt_MZextra
0001DDBA 0000 0000                  		dc.w loc_1C4C4-AniArt_MZextra, loc_1C4D2-AniArt_MZextra
0001DDBE 0000 0000                  		dc.w loc_1C4E8-AniArt_MZextra, loc_1C4FA-AniArt_MZextra
0001DDC2                            ; ===========================================================================
0001DDC2                            
0001DDC2                            loc_1C3EE:				; XREF: AniArt_MZextra
0001DDC2 2C91                       		move.l	(a1),(a6)
0001DDC4 43E9 0010                  		lea	$10(a1),a1
0001DDC8 51C9 FFF8                  		dbf	d1,loc_1C3EE
0001DDCC 4E75                       		rts	
0001DDCE                            ; ===========================================================================
0001DDCE                            
0001DDCE                            loc_1C3FA:				; XREF: AniArt_MZextra
0001DDCE 2029 0002                  		move.l	2(a1),d0
0001DDD2 1029 0001                  		move.b	1(a1),d0
0001DDD6 E098                       		ror.l	#8,d0
0001DDD8 2C80                       		move.l	d0,(a6)
0001DDDA 43E9 0010                  		lea	$10(a1),a1
0001DDDE 51C9 FFEE                  		dbf	d1,loc_1C3FA
0001DDE2 4E75                       		rts	
0001DDE4                            ; ===========================================================================
0001DDE4                            
0001DDE4                            loc_1C410:				; XREF: AniArt_MZextra
0001DDE4 2CA9 0002                  		move.l	2(a1),(a6)
0001DDE8 43E9 0010                  		lea	$10(a1),a1
0001DDEC 51C9 FFF6                  		dbf	d1,loc_1C410
0001DDF0 4E75                       		rts	
0001DDF2                            ; ===========================================================================
0001DDF2                            
0001DDF2                            loc_1C41E:				; XREF: AniArt_MZextra
0001DDF2 2029 0004                  		move.l	4(a1),d0
0001DDF6 1029 0003                  		move.b	3(a1),d0
0001DDFA E098                       		ror.l	#8,d0
0001DDFC 2C80                       		move.l	d0,(a6)
0001DDFE 43E9 0010                  		lea	$10(a1),a1
0001DE02 51C9 FFEE                  		dbf	d1,loc_1C41E
0001DE06 4E75                       		rts	
0001DE08                            ; ===========================================================================
0001DE08                            
0001DE08                            loc_1C434:				; XREF: AniArt_MZextra
0001DE08 2CA9 0004                  		move.l	4(a1),(a6)
0001DE0C 43E9 0010                  		lea	$10(a1),a1
0001DE10 51C9 FFF6                  		dbf	d1,loc_1C434
0001DE14 4E75                       		rts	
0001DE16                            ; ===========================================================================
0001DE16                            
0001DE16                            loc_1C442:				; XREF: AniArt_MZextra
0001DE16 2029 0006                  		move.l	6(a1),d0
0001DE1A 1029 0005                  		move.b	5(a1),d0
0001DE1E E098                       		ror.l	#8,d0
0001DE20 2C80                       		move.l	d0,(a6)
0001DE22 43E9 0010                  		lea	$10(a1),a1
0001DE26 51C9 FFEE                  		dbf	d1,loc_1C442
0001DE2A 4E75                       		rts	
0001DE2C                            ; ===========================================================================
0001DE2C                            
0001DE2C                            loc_1C458:				; XREF: AniArt_MZextra
0001DE2C 2CA9 0006                  		move.l	6(a1),(a6)
0001DE30 43E9 0010                  		lea	$10(a1),a1
0001DE34 51C9 FFF6                  		dbf	d1,loc_1C458
0001DE38 4E75                       		rts	
0001DE3A                            ; ===========================================================================
0001DE3A                            
0001DE3A                            loc_1C466:				; XREF: AniArt_MZextra
0001DE3A 2029 0008                  		move.l	8(a1),d0
0001DE3E 1029 0007                  		move.b	7(a1),d0
0001DE42 E098                       		ror.l	#8,d0
0001DE44 2C80                       		move.l	d0,(a6)
0001DE46 43E9 0010                  		lea	$10(a1),a1
0001DE4A 51C9 FFEE                  		dbf	d1,loc_1C466
0001DE4E 4E75                       		rts	
0001DE50                            ; ===========================================================================
0001DE50                            
0001DE50                            loc_1C47C:				; XREF: AniArt_MZextra
0001DE50 2CA9 0008                  		move.l	8(a1),(a6)
0001DE54 43E9 0010                  		lea	$10(a1),a1
0001DE58 51C9 FFF6                  		dbf	d1,loc_1C47C
0001DE5C 4E75                       		rts	
0001DE5E                            ; ===========================================================================
0001DE5E                            
0001DE5E                            loc_1C48A:				; XREF: AniArt_MZextra
0001DE5E 2029 000A                  		move.l	$A(a1),d0
0001DE62 1029 0009                  		move.b	9(a1),d0
0001DE66 E098                       		ror.l	#8,d0
0001DE68 2C80                       		move.l	d0,(a6)
0001DE6A 43E9 0010                  		lea	$10(a1),a1
0001DE6E 51C9 FFEE                  		dbf	d1,loc_1C48A
0001DE72 4E75                       		rts	
0001DE74                            ; ===========================================================================
0001DE74                            
0001DE74                            loc_1C4A0:				; XREF: AniArt_MZextra
0001DE74 2CA9 000A                  		move.l	$A(a1),(a6)
0001DE78 43E9 0010                  		lea	$10(a1),a1
0001DE7C 51C9 FFF6                  		dbf	d1,loc_1C4A0
0001DE80 4E75                       		rts	
0001DE82                            ; ===========================================================================
0001DE82                            
0001DE82                            loc_1C4AE:				; XREF: AniArt_MZextra
0001DE82 2029 000C                  		move.l	$C(a1),d0
0001DE86 1029 000B                  		move.b	$B(a1),d0
0001DE8A E098                       		ror.l	#8,d0
0001DE8C 2C80                       		move.l	d0,(a6)
0001DE8E 43E9 0010                  		lea	$10(a1),a1
0001DE92 51C9 FFEE                  		dbf	d1,loc_1C4AE
0001DE96 4E75                       		rts	
0001DE98                            ; ===========================================================================
0001DE98                            
0001DE98                            loc_1C4C4:				; XREF: AniArt_MZextra
0001DE98 2CA9 000C                  		move.l	$C(a1),(a6)
0001DE9C 43E9 0010                  		lea	$10(a1),a1
0001DEA0 51C9 FFF6                  		dbf	d1,loc_1C4C4
0001DEA4 4E75                       		rts	
0001DEA6                            ; ===========================================================================
0001DEA6                            
0001DEA6                            loc_1C4D2:				; XREF: AniArt_MZextra
0001DEA6 2029 000C                  		move.l	$C(a1),d0
0001DEAA E198                       		rol.l	#8,d0
0001DEAC 1011                       		move.b	0(a1),d0
0001DEAE 2C80                       		move.l	d0,(a6)
0001DEB0 43E9 0010                  		lea	$10(a1),a1
0001DEB4 51C9 FFF0                  		dbf	d1,loc_1C4D2
0001DEB8 4E75                       		rts	
0001DEBA                            ; ===========================================================================
0001DEBA                            
0001DEBA                            loc_1C4E8:				; XREF: AniArt_MZextra
0001DEBA 3CA9 000E                  		move.w	$E(a1),(a6)
0001DEBE 3C91                       		move.w	0(a1),(a6)
0001DEC0 43E9 0010                  		lea	$10(a1),a1
0001DEC4 51C9 FFF4                  		dbf	d1,loc_1C4E8
0001DEC8 4E75                       		rts	
0001DECA                            ; ===========================================================================
0001DECA                            
0001DECA                            loc_1C4FA:				; XREF: AniArt_MZextra
0001DECA 2011                       		move.l	0(a1),d0
0001DECC 1029 000F                  		move.b	$F(a1),d0
0001DED0 E098                       		ror.l	#8,d0
0001DED2 2C80                       		move.l	d0,(a6)
0001DED4 43E9 0010                  		lea	$10(a1),a1
0001DED8 51C9 FFF0                  		dbf	d1,loc_1C4FA
0001DEDC 4E75                       		rts	
0001DEDE                            
0001DEDE                            ; ---------------------------------------------------------------------------
0001DEDE                            ; Animated pattern routine - giant ring
0001DEDE                            ; ---------------------------------------------------------------------------
0001DEDE                            
0001DEDE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DEDE                            
0001DEDE                            
0001DEDE                            AniArt_GiantRing:			; XREF: AniArt_Load
0001DEDE 4A78 F7BE                  		tst.w	($FFFFF7BE).w
0001DEE2 6600                       		bne.s	loc_1C518
0001DEE4 4E75                       		rts
0001DEE6                            ; ===========================================================================
0001DEE6                            
0001DEE6                            loc_1C518:
0001DEE6 0478 01C0 F7BE             		subi.w	#$1C0,($FFFFF7BE).w
0001DEEC 43F9 0000 0000             		lea	(Art_BigRing).l,a1 ; load giant	ring patterns
0001DEF2 7000                       		moveq	#0,d0
0001DEF4 3038 F7BE                  		move.w	($FFFFF7BE).w,d0
0001DEF8 43F1 0000                  		lea	(a1,d0.w),a1
0001DEFC 0640 8000                  		addi.w	#$8000,d0
0001DF00 E588                       		lsl.l	#2,d0
0001DF02 E448                       		lsr.w	#2,d0
0001DF04 0040 4000                  		ori.w	#$4000,d0
0001DF08 4840                       		swap	d0
0001DF0A 2D40 0004                  		move.l	d0,4(a6)
0001DF0E 323C 000D                  		move.w	#$D,d1
0001DF12 6000 FE78                  		bra.w	LoadTiles
0001DF16                            ; End of function AniArt_GiantRing
0001DF16                            
0001DF16                            ; ===========================================================================
0001DF16                            ; ---------------------------------------------------------------------------
0001DF16                            ; Object 21 - SCORE, TIME, RINGS
0001DF16                            ; ---------------------------------------------------------------------------
0001DF16                            
0001DF16                            Obj21:					; XREF: Obj_Index
0001DF16 7000                       		moveq	#0,d0
0001DF18 1028 0024                  		move.b	$24(a0),d0
0001DF1C 323B 0000                  		move.w	Obj21_Index(pc,d0.w),d1
0001DF20 4EFB 1000                  		jmp	Obj21_Index(pc,d1.w)
0001DF24                            ; ===========================================================================
0001DF24 0000                       Obj21_Index:	dc.w Obj21_Main-Obj21_Index
0001DF26 0000                       		dc.w Obj21_Flash-Obj21_Index
0001DF28                            ; ===========================================================================
0001DF28                            
0001DF28                            Obj21_Main:				; XREF: Obj21_Main
0001DF28 5428 0024                  		addq.b	#2,$24(a0)
0001DF2C 317C 0090 0008             		move.w	#$90,8(a0)
0001DF32 317C 0108 000A             		move.w	#$108,$A(a0)
0001DF38 217C 0000 0000 0004        		move.l	#Map_obj21,4(a0)
0001DF40 317C 06BA 0002                             move.w    #$6BA,2(a0)
0001DF46 117C 0000 0001             		move.b	#0,1(a0)
0001DF4C 117C 0000 0018             		move.b	#0,$18(a0)
0001DF52                            
0001DF52                            Obj21_Flash:				; XREF: Obj21_Main
0001DF52 7000                       		moveq	#0,d0
0001DF54 0838 0003 FE05             		btst	#3,($FFFFFE05).w
0001DF5A 6600                       		bne.s	Obj21_Display
0001DF5C 4A78 FE20                  		tst.w	($FFFFFE20).w	; do you have any rings?
0001DF60 6600                       		bne.s	Obj21_Flash2	; if not, branch
0001DF62 5240                       		addq.w	#1,d0		; make ring counter flash red
0001DF64                            ; ===========================================================================
0001DF64                            
0001DF64                            Obj21_Flash2:
0001DF64 0C38 0009 FE23             		cmpi.b	#9,($FFFFFE23).w ; have	9 minutes elapsed?
0001DF6A 6600                       		bne.s	Obj21_Display	; if not, branch
0001DF6C 5440                       		addq.w	#2,d0		; make time counter flash red
0001DF6E                            
0001DF6E                            Obj21_Display:
0001DF6E 1140 001A                  		move.b	d0,$1A(a0)
0001DF72 4EF9 0000 E10A             		jmp	DisplaySprite
0001DF78                            ; ===========================================================================
0001DF78                            ; ---------------------------------------------------------------------------
0001DF78                            ; Sprite mappings - SCORE, TIME, RINGS
0001DF78                            ; ---------------------------------------------------------------------------
0001DF78                            Map_obj21:
0001DF78                            	include "_maps\obj21.asm"
0001DF78                            ; ---------------------------------------------------------------------------
0001DF78                            ; Sprite mappings - SCORE, TIME, RINGS (CENTISECONDS)
0001DF78                            ; ---------------------------------------------------------------------------
0001DF78 0000 0000                  		dc.w byte_1C5BC-Map_obj21, byte_1C5F0-Map_obj21
0001DF7C 0000 0000                  		dc.w byte_1C624-Map_obj21, byte_1C658-Map_obj21
0001DF80 0B                         byte_1C5BC:	dc.b $B
0001DF81 800D 8010 00               		dc.b $80, $D, $80, $10, 0	; SCOR
0001DF86 800D 8028 20               		dc.b $80, $D, $80, $28,	$20	; E nnn
0001DF8B 800D 8030 40               		dc.b $80, $D, $80, $30,	$40	; nnnn
0001DF90 900D 8020 00               		dc.b $90, $D, $80, $20,	0	; TIME
0001DF95 900D 8038 28               		dc.b $90, $D, $80, $38,	$28	; n'nn
0001DF9A 9009 8000 48               			dc.b $90, 9, $80, $0,	$48	; "nn
0001DF9F A00D 8018 00               		dc.b $A0, $D, $80, $18, 0	; RING
0001DFA4 A001 8010 20               		dc.b $A0, 1, $80, $10, $20	; S
0001DFA9 A009 8040 30               		dc.b $A0, 9, $80, $40, $30	; rings
0001DFAE 4005 811A 00               		dc.b $40, 5, $81, $1A, 0	; icon
0001DFB3 400D 811E 10               		dc.b $40, $D, $81, $1E, $10	; SONIC x nn
0001DFB8 00                         		dc.b 0
0001DFB9 0B                         byte_1C5F0:	dc.b $B
0001DFBA 800D 8010 00               		dc.b $80, $D, $80, $10, 0	; SCOR
0001DFBF 800D 8028 20               		dc.b $80, $D, $80, $28,	$20	; E nnn
0001DFC4 800D 8030 40               		dc.b $80, $D, $80, $30,	$40	; nnnn
0001DFC9 900D 8020 00               		dc.b $90, $D, $80, $20,	0	; TIME
0001DFCE 900D 8038 28               		dc.b $90, $D, $80, $38,	$28	; n'nn
0001DFD3 9009 8000 48               			dc.b $90, 9, $80, $0,	$48	; "nn
0001DFD8 A00D A018 00               		dc.b $A0, $D, $A0, $18, 0	; RING
0001DFDD A001 A010 20               		dc.b $A0, 1, $A0, $10, $20	; S
0001DFE2 A009 8040 30               		dc.b $A0, 9, $80, $40, $30	; rings
0001DFE7 4005 811A 00               		dc.b $40, 5, $81, $1A, 0	; icon
0001DFEC 400D 811E 10               		dc.b $40, $D, $81, $1E, $10	; SONIC x nn
0001DFF1 00                         		dc.b 0
0001DFF2 0B                         byte_1C624:	dc.b $B
0001DFF3 800D 8010 00               		dc.b $80, $D, $80, $10, 0	; SCOR
0001DFF8 800D 8028 20               		dc.b $80, $D, $80, $28,	$20	; E nnn
0001DFFD 800D 8030 40               		dc.b $80, $D, $80, $30,	$40	; nnnn
0001E002 900D A020 00               		dc.b $90, $D, $A0, $20,	0	; TIME
0001E007 900D 8038 28               		dc.b $90, $D, $80, $38,	$28	; n'nn
0001E00C 9009 8000 48               			dc.b $90, 9, $80, $0,	$48	; "nn
0001E011 A00D 8018 00               		dc.b $A0, $D, $80, $18, 0	; RING
0001E016 A001 8010 20               		dc.b $A0, 1, $80, $10, $20	; S
0001E01B A009 8040 30               		dc.b $A0, 9, $80, $40, $30	; rings
0001E020 4005 811A 00               		dc.b $40, 5, $81, $1A, 0	; icon
0001E025 400D 811E 10               		dc.b $40, $D, $81, $1E, $10	; SONIC x nn
0001E02A 00                         		dc.b 0
0001E02B 0B                         byte_1C658:	dc.b $B
0001E02C 800D 8010 00               		dc.b $80, $D, $80, $10, 0	; SCOR
0001E031 800D 8028 20               		dc.b $80, $D, $80, $28,	$20	; E nnn
0001E036 800D 8030 40               		dc.b $80, $D, $80, $30,	$40	; nnnn
0001E03B 900D A020 00               		dc.b $90, $D, $A0, $20,	0	; TIME
0001E040 900D 8038 28               		dc.b $90, $D, $80, $38,	$28	; n'nn
0001E045 9009 8000 48               			dc.b $90, 9, $80, $0,	$48	; "nn
0001E04A A00D A018 00               		dc.b $A0, $D, $A0, $18, 0	; RING
0001E04F A001 A010 20               		dc.b $A0, 1, $A0, $10, $20	; S
0001E054 A009 8040 30               		dc.b $A0, 9, $80, $40, $30	; rings
0001E059 4005 811A 00               		dc.b $40, 5, $81, $1A, 0	; icon
0001E05E 400D 811E 10               		dc.b $40, $D, $81, $1E, $10	; SONIC x nn
0001E064 00                         		even
0001E064 00                         		even
0001E064                            
0001E064                            ; ---------------------------------------------------------------------------
0001E064                            ; Add points subroutine
0001E064                            ; ---------------------------------------------------------------------------
0001E064                            
0001E064                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E064                            
0001E064                            
0001E064                            AddPoints:
0001E064 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; set score counter to	update
0001E06A 45F8 FFC0                  		lea	($FFFFFFC0).w,a2
0001E06E 47F8 FE26                  		lea	($FFFFFE26).w,a3
0001E072 D193                       		add.l	d0,(a3)		; add d0*10 to the score
0001E074 223C 000F 423F             		move.l	#999999,d1
0001E07A B293                       		cmp.l	(a3),d1		; is #999999 higher than the score?
0001E07C 6200 0000                  		bhi.w	loc_1C6AC	; if yes, branch
0001E080 2681                       		move.l	d1,(a3)		; reset	score to #999999
0001E082 2481                       		move.l	d1,(a2)
0001E084                            
0001E084                            loc_1C6AC:
0001E084 2013                       		move.l	(a3),d0
0001E086 B092                       		cmp.l	(a2),d0
0001E088 6500 0000                  		bcs.w	locret_1C6B6
0001E08C 2480                       		move.l	d0,(a2)
0001E08E                            
0001E08E                            locret_1C6B6:
0001E08E 4E75                       		rts	
0001E090                            ; End of function AddPoints
0001E090                            
0001E090                            ; ---------------------------------------------------------------------------
0001E090                            ; Subroutine to	update the HUD
0001E090                            ; ---------------------------------------------------------------------------
0001E090                            
0001E090                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E090                            
0001E090                            
0001E090                            HudUpdate:
0001E090 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug mode	on?
0001E094 6600 0000                  		bne.w	HudDebug	; if yes, branch
0001E098 4A38 FE1F                  		tst.b	($FFFFFE1F).w	; does the score need updating?
0001E09C 6700                       		beq.s	Hud_ChkRings	; if not, branch
0001E09E 4238 FE1F                  		clr.b	($FFFFFE1F).w
0001E0A2 203C 5C80 0003             		move.l	#$5C800003,d0	; set VRAM address
0001E0A8 2238 FE26                  		move.l	($FFFFFE26).w,d1 ; load	score
0001E0AC 6100 0000                  		bsr.w	Hud_Score
0001E0B0                            
0001E0B0                            Hud_ChkRings:
0001E0B0 4A38 FE1D                  		tst.b	($FFFFFE1D).w	; does the ring	counter	need updating?
0001E0B4 6700                       		beq.s	Hud_ChkTime	; if not, branch
0001E0B6 6A00                       		bpl.s	loc_1C6E4
0001E0B8 6100 0000                  		bsr.w	Hud_LoadZero
0001E0BC                            
0001E0BC                            loc_1C6E4:
0001E0BC 4238 FE1D                  		clr.b	($FFFFFE1D).w
0001E0C0 203C 5F40 0003             		move.l	#$5F400003,d0	; set VRAM address
0001E0C6 7200                       		moveq	#0,d1
0001E0C8 3238 FE20                  		move.w	($FFFFFE20).w,d1 ; load	number of rings
0001E0CC 6100 0000                  		bsr.w	Hud_Rings
0001E0D0                            
0001E0D0                            Hud_ChkTime:
0001E0D0 4A38 FE1E                          tst.b    ($FFFFFE1E).w    ; does the time    need updating?
0001E0D4 6700 0000                          beq.w    Hud_ChkLives    ; if not, branch    ;Mercury HUD Centiseconds (bsr.s => bsr.w) ported by -paranoimia-
0001E0D8 4A78 F63A                          tst.w    ($FFFFF63A).w    ; is the game paused?
0001E0DC 6600 0000                          bne.w    Hud_ChkLives    ; if yes, branch    ;Mercury HUD Centiseconds (bsr.s => bsr.w) ported by -paranoimia-
0001E0E0 43F8 FE22                          lea    ($FFFFFE22).w,a1
0001E0E4 0C99 0009 3B63                     cmpi.l    #$93B63,(a1)+    ; is the time 9'59"99?
0001E0EA 6700 0000                          beq.w    TimeOver    ; if yes, branch    ;Mercury HUD Centiseconds (bsr.s => bsr.w) ported by -paranoimia-
0001E0EE 1238 FEBF                          move.b    ($FFFFFEBF).w,d1
0001E0F2 5201                               addi.b    #1,d1
0001E0F4 0C01 0003                          cmpi.b    #3,d1
0001E0F8 6600                               bne.s    Cent_Skip
0001E0FA 123C 0000                          move.b    #0,d1
0001E0FE                            
0001E0FE                            Cent_Skip:
0001E0FE 11C1 FEBF                          move.b    d1,($FFFFFEBF).w
0001E102 0C01 0002                          cmpi.b    #2,d1
0001E106 6700                               beq.s    Cent_Skip2
0001E108 5201                               addi.b    #1,d1
0001E10A                            
0001E10A                            Cent_Skip2:
0001E10A D321                               add.b    d1,-(a1)
0001E10C 0C11 0064                          cmpi.b    #100,(a1)
0001E110 6500                               bcs.s    Hud_DoCent
0001E112 12BC 0000                          move.b    #0,(a1)
0001E116 5221                               addq.b    #1,-(a1)
0001E118 0C11 003C                          cmpi.b    #60,(a1)
0001E11C 6500                               bcs.s    loc_1C734
0001E11E 12BC 0000                          move.b    #0,(a1)
0001E122 5221                               addq.b    #1,-(a1)
0001E124 0C11 0009                          cmpi.b    #9,(a1)
0001E128 6500                               bcs.s    loc_1C734
0001E12A 12BC 0009                          move.b    #9,(a1)
0001E12E                            
0001E12E                            loc_1C734:
0001E12E 203C 5E40 0003                     move.l    #$5E400003,d0
0001E134 7200                               moveq    #0,d1
0001E136 1238 FE23                          move.b    ($FFFFFE23).w,d1 ; load    minutes
0001E13A 6100 0000                          bsr.w    Hud_Mins
0001E13E 203C 5EC0 0003                     move.l    #$5EC00003,d0
0001E144 7200                               moveq    #0,d1
0001E146 1238 FE24                          move.b    ($FFFFFE24).w,d1 ; load    seconds
0001E14A 6100 0000                          bsr.w    Hud_Secs
0001E14E                            
0001E14E                            Hud_DoCent:
0001E14E 203C 5780 0003                     move.l    #$57800003,d0    ;Mercury Macros ported by -paranoimia-
0001E154 7200                               moveq    #0,d1
0001E156 1238 FE25                          move.b    ($FFFFFE25).w,d1 ; load    centiseconds
0001E15A 6100 0000                          bsr.w    Hud_Secs
0001E15E                            
0001E15E                            Hud_ChkLives:
0001E15E 4A38 FE1C                          tst.b    ($FFFFFE1C).w    ; does the lives counter need updating?
0001E162 6700                               beq.s    Hud_ChkBonus    ; if not, branch
0001E164 4238 FE1C                          clr.b    ($FFFFFE1C).w
0001E168 6100 0000                          bsr.w    Hud_Lives
0001E16C                            
0001E16C                            Hud_ChkBonus:
0001E16C 4A38 F7D6                          tst.b    ($FFFFF7D6).w    ; do time/ring bonus counters need updating?
0001E170 6700                               beq.s    Hud_End        ; if not, branch
0001E172 4238 F7D6                          clr.b    ($FFFFF7D6).w
0001E176 23FC 6E00 0002 00C0 0004           move.l    #$6E000002,($C00004).l
0001E180 7200                               moveq    #0,d1
0001E182 3238 F7D2                          move.w    ($FFFFF7D2).w,d1 ; load    time bonus
0001E186 6100 0000                          bsr.w    Hud_TimeRingBonus
0001E18A 7200                               moveq    #0,d1
0001E18C 3238 F7D4                          move.w    ($FFFFF7D4).w,d1 ; load    ring bonus
0001E190 6100 0000                          bsr.w    Hud_TimeRingBonus
0001E194                            
0001E194                            Hud_End:
0001E194 4E75                               rts
0001E196                            ; ===========================================================================
0001E196                            
0001E196                            TimeOver:				; XREF: Hud_ChkTime
0001E196 4238 FE1E                  		clr.b	($FFFFFE1E).w
0001E19A 41F8 D000                  		lea	($FFFFD000).w,a0
0001E19E 2448                       		movea.l	a0,a2
0001E1A0 6100 E8B6                  		bsr.w	KillSonic
0001E1A4 11FC 0001 FE1A             		move.b	#1,($FFFFFE1A).w
0001E1AA 4E75                       		rts
0001E1AC                            ; ===========================================================================
0001E1AC                            
0001E1AC                            HudDebug:				; XREF: HudUpdate
0001E1AC 6100 0000                  		bsr.w	HudDb_XY
0001E1B0 4A38 FE1D                  		tst.b	($FFFFFE1D).w	; does the ring	counter	need updating?
0001E1B4 6700                       		beq.s	HudDb_ObjCount	; if not, branch
0001E1B6 6A00                       		bpl.s	HudDb_Rings
0001E1B8 6100 0000                  		bsr.w	Hud_LoadZero
0001E1BC                            
0001E1BC                            HudDb_Rings:
0001E1BC 4238 FE1D                  		clr.b	($FFFFFE1D).w
0001E1C0 203C 5F40 0003             		move.l	#$5F400003,d0	; set VRAM address
0001E1C6 7200                       		moveq	#0,d1
0001E1C8 3238 FE20                  		move.w	($FFFFFE20).w,d1 ; load	number of rings
0001E1CC 6100 0000                  		bsr.w	Hud_Rings
0001E1D0                            
0001E1D0                            HudDb_ObjCount:
0001E1D0 203C 5EC0 0003             		move.l	#$5EC00003,d0	; set VRAM address
0001E1D6 7200                       		moveq	#0,d1
0001E1D8 1238 F62C                  		move.b	($FFFFF62C).w,d1 ; load	"number	of objects" counter
0001E1DC 6100 0000                  		bsr.w	Hud_Secs
0001E1E0 4A38 FE1C                  		tst.b	($FFFFFE1C).w	; does the lives counter need updating?
0001E1E4 6700                       		beq.s	HudDb_ChkBonus	; if not, branch
0001E1E6 4238 FE1C                  		clr.b	($FFFFFE1C).w
0001E1EA 6100 0000                  		bsr.w	Hud_Lives
0001E1EE                            
0001E1EE                            HudDb_ChkBonus:
0001E1EE 4A38 F7D6                  		tst.b	($FFFFF7D6).w	; does the ring/time bonus counter need	updating?
0001E1F2 6700                       		beq.s	HudDb_End	; if not, branch
0001E1F4 4238 F7D6                  		clr.b	($FFFFF7D6).w
0001E1F8 23FC 6E00 0002 00C0 0004   		move.l	#$6E000002,($C00004).l ; set VRAM address
0001E202 7200                       		moveq	#0,d1
0001E204 3238 F7D2                  		move.w	($FFFFF7D2).w,d1 ; load	time bonus
0001E208 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001E20C 7200                       		moveq	#0,d1
0001E20E 3238 F7D4                  		move.w	($FFFFF7D4).w,d1 ; load	ring bonus
0001E212 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001E216                            
0001E216                            HudDb_End:
0001E216 4E75                       		rts
0001E218                            ; End of function HudUpdate
0001E218                            
0001E218                            ; ---------------------------------------------------------------------------
0001E218                            ; Subroutine to	load "0" on the	HUD
0001E218                            ; ---------------------------------------------------------------------------
0001E218                            
0001E218                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E218                            
0001E218                            
0001E218                            Hud_LoadZero:				; XREF: HudUpdate
0001E218 23FC 5F40 0003 00C0 0004   		move.l	#$5F400003,($C00004).l
0001E222 45FA 0000                  		lea	Hud_TilesZero(pc),a2
0001E226 343C 0002                  		move.w	#2,d2
0001E22A 6000                       		bra.s	loc_1C83E
0001E22C                            ; End of function Hud_LoadZero
0001E22C                            
0001E22C                            ; ---------------------------------------------------------------------------
0001E22C                            ; Subroutine to    load " on the    HUD        ported by -paranoimia-
0001E22C                            ; ---------------------------------------------------------------------------
0001E22C                            
0001E22C                            ; ||||||||||||||| S U B    R O U T    I N E |||||||||||||||||||||||||||||||||||||||
0001E22C                            
0001E22C                            
0001E22C                            Hud_LoadMarks:                ; XREF: HUD_Update
0001E22C 23FC 5740 0003 00D0 0004           move.l    #$57400003,($D00004).l  ;locVRAM    $D740
0001E236 45FA 0000                          lea    Hud_TilesMarks(pc),a2
0001E23A 343C 0002                          move.w    #2,d2
0001E23E 6000                               bra.s    loc_1C83E
0001E240                            ; End of function Hud_LoadMarks
0001E240                            
0001E240                            ; ---------------------------------------------------------------------------
0001E240                            ; Subroutine to	load uncompressed HUD patterns ("E", "0", colon)
0001E240                            ; ---------------------------------------------------------------------------
0001E240                            
0001E240                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E240                            
0001E240                            
0001E240                            Hud_Base:				; XREF: Level; SS_EndLoop; EndingSequence
0001E240 4DF9 00C0 0000             		lea	($C00000).l,a6
0001E246 6100 0000                  		bsr.w	Hud_Lives
0001E24A 61E0                       		bsr.s    Hud_LoadMarks
0001E24C 23FC 5C40 0003 00C0 0004   		move.l	#$5C400003,($C00004).l
0001E256 45FA 0000                  		lea	Hud_TilesBase(pc),a2
0001E25A 343C 000E                  		move.w	#$E,d2
0001E25E                            
0001E25E                            loc_1C83E:				; XREF: Hud_LoadZero
0001E25E 43FA 0000                  		lea	Art_Hud(pc),a1
0001E262                            
0001E262                            loc_1C842:
0001E262 323C 000F                  		move.w	#$F,d1
0001E266 101A                       		move.b	(a2)+,d0
0001E268 6B00                       		bmi.s	loc_1C85E
0001E26A 4880                       		ext.w	d0
0001E26C EB48                       		lsl.w	#5,d0
0001E26E 47F1 0000                  		lea	(a1,d0.w),a3
0001E272                            
0001E272                            loc_1C852:
0001E272 2C9B                       		move.l	(a3)+,(a6)
0001E274 51C9 FFFC                  		dbf	d1,loc_1C852
0001E278                            
0001E278                            loc_1C858:
0001E278 51CA FFE8                  		dbf	d2,loc_1C842
0001E27C                            
0001E27C 4E75                       		rts
0001E27E                            ; ===========================================================================
0001E27E                            
0001E27E                            loc_1C85E:
0001E27E 2CBC 0000 0000             		move.l	#0,(a6)
0001E284 51C9 FFF8                  		dbf	d1,loc_1C85E
0001E288                            
0001E288 60EE                       		bra.s	loc_1C858
0001E28A                            ; End of function Hud_Base
0001E28A                            
0001E28A                            ; ===========================================================================
0001E28A 1A00 0000                  Hud_TilesMarks:    dc.b $1A, 0, 0, 0
0001E28E 16FF FFFF FFFF FF00 0018+  Hud_TilesBase:    dc.b $16, $FF, $FF, $FF, $FF, $FF, $FF,    0, 0, $18, 0, 0
0001E29A FFFF 0000                  Hud_TilesZero:    dc.b $FF, $FF, 0, 0
0001E29E                            ; ---------------------------------------------------------------------------
0001E29E                            ; Subroutine to	load debug mode	numbers	patterns
0001E29E                            ; ---------------------------------------------------------------------------
0001E29E                            
0001E29E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E29E                            
0001E29E                            
0001E29E                            HudDb_XY:				; XREF: HudDebug
0001E29E 23FC 5C40 0003 00C0 0004   		move.l	#$5C400003,($C00004).l ; set VRAM address
0001E2A8 3238 F700                  		move.w	($FFFFF700).w,d1 ; load	camera x-position
0001E2AC 4841                       		swap	d1
0001E2AE 3238 D008                  		move.w	($FFFFD008).w,d1 ; load	Sonic's x-position
0001E2B2 6100                       		bsr.s	HudDb_XY2
0001E2B4 3238 F704                  		move.w	($FFFFF704).w,d1 ; load	camera y-position
0001E2B8 4841                       		swap	d1
0001E2BA 3238 D00C                  		move.w	($FFFFD00C).w,d1 ; load	Sonic's y-position
0001E2BE                            ; End of function HudDb_XY
0001E2BE                            
0001E2BE                            
0001E2BE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E2BE                            
0001E2BE                            
0001E2BE                            HudDb_XY2:
0001E2BE 7C07                       		moveq	#7,d6
0001E2C0 43F9 0000 058C             		lea	(Art_Text).l,a1
0001E2C6                            
0001E2C6                            HudDb_XYLoop:
0001E2C6 E959                       		rol.w	#4,d1
0001E2C8 3401                       		move.w	d1,d2
0001E2CA 0242 000F                  		andi.w	#$F,d2
0001E2CE 0C42 000A                  		cmpi.w	#$A,d2
0001E2D2 6500                       		bcs.s	loc_1C8B2
0001E2D4 5E42                       		addq.w	#7,d2
0001E2D6                            
0001E2D6                            loc_1C8B2:
0001E2D6 EB4A                       		lsl.w	#5,d2
0001E2D8 47F1 2000                  		lea	(a1,d2.w),a3
0001E2DC 2C9B                       		move.l	(a3)+,(a6)
0001E2DE 2C9B                       		move.l	(a3)+,(a6)
0001E2E0 2C9B                       		move.l	(a3)+,(a6)
0001E2E2 2C9B                       		move.l	(a3)+,(a6)
0001E2E4 2C9B                       		move.l	(a3)+,(a6)
0001E2E6 2C9B                       		move.l	(a3)+,(a6)
0001E2E8 2C9B                       		move.l	(a3)+,(a6)
0001E2EA 2C9B                       		move.l	(a3)+,(a6)
0001E2EC 4841                       		swap	d1
0001E2EE 51CE FFD6                  		dbf	d6,HudDb_XYLoop	; repeat 7 more	times
0001E2F2                            
0001E2F2 4E75                       		rts	
0001E2F4                            ; End of function HudDb_XY2
0001E2F4                            
0001E2F4                            ; ---------------------------------------------------------------------------
0001E2F4                            ; Subroutine to	load rings numbers patterns
0001E2F4                            ; ---------------------------------------------------------------------------
0001E2F4                            
0001E2F4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E2F4                            
0001E2F4                            
0001E2F4                            Hud_Rings:				; XREF: HudUpdate
0001E2F4 45F9 0000 0000             		lea	(Hud_100).l,a2
0001E2FA 7C02                       		moveq	#2,d6
0001E2FC 6000                       		bra.s	Hud_LoadArt
0001E2FE                            ; End of function Hud_Rings
0001E2FE                            
0001E2FE                            ; ---------------------------------------------------------------------------
0001E2FE                            ; Subroutine to	load score numbers patterns
0001E2FE                            ; ---------------------------------------------------------------------------
0001E2FE                            
0001E2FE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E2FE                            
0001E2FE                            
0001E2FE                            Hud_Score:				; XREF: HudUpdate
0001E2FE 45F9 0000 0000             		lea	(Hud_100000).l,a2
0001E304 7C05                       		moveq	#5,d6
0001E306                            
0001E306                            Hud_LoadArt:
0001E306 7800                       		moveq	#0,d4
0001E308 43FA 0000                  		lea	Art_Hud(pc),a1
0001E30C                            
0001E30C                            Hud_ScoreLoop:
0001E30C 7400                       		moveq	#0,d2
0001E30E 261A                       		move.l	(a2)+,d3
0001E310                            
0001E310                            loc_1C8EC:
0001E310 9283                       		sub.l	d3,d1
0001E312 6500                       		bcs.s	loc_1C8F4
0001E314 5242                       		addq.w	#1,d2
0001E316 60F8                       		bra.s	loc_1C8EC
0001E318                            ; ===========================================================================
0001E318                            
0001E318                            loc_1C8F4:
0001E318 D283                       		add.l	d3,d1
0001E31A 4A42                       		tst.w	d2
0001E31C 6700                       		beq.s	loc_1C8FE
0001E31E 383C 0001                  		move.w	#1,d4
0001E322                            
0001E322                            loc_1C8FE:
0001E322 4A44                       		tst.w	d4
0001E324 6700                       		beq.s	loc_1C92C
0001E326 ED4A                       		lsl.w	#6,d2
0001E328 2D40 0004                  		move.l	d0,4(a6)
0001E32C 47F1 2000                  		lea	(a1,d2.w),a3
0001E330 2C9B                       		move.l	(a3)+,(a6)
0001E332 2C9B                       		move.l	(a3)+,(a6)
0001E334 2C9B                       		move.l	(a3)+,(a6)
0001E336 2C9B                       		move.l	(a3)+,(a6)
0001E338 2C9B                       		move.l	(a3)+,(a6)
0001E33A 2C9B                       		move.l	(a3)+,(a6)
0001E33C 2C9B                       		move.l	(a3)+,(a6)
0001E33E 2C9B                       		move.l	(a3)+,(a6)
0001E340 2C9B                       		move.l	(a3)+,(a6)
0001E342 2C9B                       		move.l	(a3)+,(a6)
0001E344 2C9B                       		move.l	(a3)+,(a6)
0001E346 2C9B                       		move.l	(a3)+,(a6)
0001E348 2C9B                       		move.l	(a3)+,(a6)
0001E34A 2C9B                       		move.l	(a3)+,(a6)
0001E34C 2C9B                       		move.l	(a3)+,(a6)
0001E34E 2C9B                       		move.l	(a3)+,(a6)
0001E350                            
0001E350                            loc_1C92C:
0001E350 0680 0040 0000             		addi.l	#$400000,d0
0001E356 51CE FFB4                  		dbf	d6,Hud_ScoreLoop
0001E35A                            
0001E35A 4E75                       		rts
0001E35C                            ; End of function Hud_Score
0001E35C                            
0001E35C                            ; ---------------------------------------------------------------------------
0001E35C                            ; Subroutine to	load countdown numbers on the continue screen
0001E35C                            ; ---------------------------------------------------------------------------
0001E35C                            
0001E35C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E35C                            
0001E35C                            
0001E35C                            ContScrCounter:				; XREF: ContinueScreen
0001E35C 23FC 5F80 0003 00C0 0004   		move.l	#$5F800003,($C00004).l ; set VRAM address
0001E366 4DF9 00C0 0000             		lea	($C00000).l,a6
0001E36C 45F9 0000 0000             		lea	(Hud_10).l,a2
0001E372 7C01                       		moveq	#1,d6
0001E374 7800                       		moveq	#0,d4
0001E376 43FA 0000                  		lea	Art_Hud(pc),a1 ; load numbers patterns
0001E37A                            
0001E37A                            ContScr_Loop:
0001E37A 7400                       		moveq	#0,d2
0001E37C 261A                       		move.l	(a2)+,d3
0001E37E                            
0001E37E                            loc_1C95A:
0001E37E 9283                       		sub.l	d3,d1
0001E380 6500                       		bcs.s	loc_1C962
0001E382 5242                       		addq.w	#1,d2
0001E384 60F8                       		bra.s	loc_1C95A
0001E386                            ; ===========================================================================
0001E386                            
0001E386                            loc_1C962:
0001E386 D283                       		add.l	d3,d1
0001E388 ED4A                       		lsl.w	#6,d2
0001E38A 47F1 2000                  		lea	(a1,d2.w),a3
0001E38E 2C9B                       		move.l	(a3)+,(a6)
0001E390 2C9B                       		move.l	(a3)+,(a6)
0001E392 2C9B                       		move.l	(a3)+,(a6)
0001E394 2C9B                       		move.l	(a3)+,(a6)
0001E396 2C9B                       		move.l	(a3)+,(a6)
0001E398 2C9B                       		move.l	(a3)+,(a6)
0001E39A 2C9B                       		move.l	(a3)+,(a6)
0001E39C 2C9B                       		move.l	(a3)+,(a6)
0001E39E 2C9B                       		move.l	(a3)+,(a6)
0001E3A0 2C9B                       		move.l	(a3)+,(a6)
0001E3A2 2C9B                       		move.l	(a3)+,(a6)
0001E3A4 2C9B                       		move.l	(a3)+,(a6)
0001E3A6 2C9B                       		move.l	(a3)+,(a6)
0001E3A8 2C9B                       		move.l	(a3)+,(a6)
0001E3AA 2C9B                       		move.l	(a3)+,(a6)
0001E3AC 2C9B                       		move.l	(a3)+,(a6)
0001E3AE 51CE FFCA                  		dbf	d6,ContScr_Loop	; repeat 1 more	time
0001E3B2                            
0001E3B2 4E75                       		rts
0001E3B4                            ; End of function ContScrCounter
0001E3B4                            
0001E3B4                            ; ===========================================================================
0001E3B4                            ; ---------------------------------------------------------------------------
0001E3B4                            ; HUD counter sizes
0001E3B4                            ; ---------------------------------------------------------------------------
0001E3B4 0001 86A0                  Hud_100000:	dc.l 100000		; XREF: Hud_Score
0001E3B8 0000 2710                  Hud_10000:	dc.l 10000
0001E3BC 0000 03E8                  Hud_1000:	dc.l 1000		; XREF: Hud_TimeRingBonus
0001E3C0 0000 0064                  Hud_100:	dc.l 100		; XREF: Hud_Rings
0001E3C4 0000 000A                  Hud_10:		dc.l 10			; XREF: ContScrCounter; Hud_Secs; Hud_Lives
0001E3C8 0000 0001                  Hud_1:		dc.l 1			; XREF: Hud_Mins
0001E3CC                            
0001E3CC                            ; ---------------------------------------------------------------------------
0001E3CC                            ; Subroutine to	load time numbers patterns
0001E3CC                            ; ---------------------------------------------------------------------------
0001E3CC                            
0001E3CC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E3CC                            
0001E3CC                            
0001E3CC                            Hud_Mins:				; XREF: Hud_ChkTime
0001E3CC 45F9 0001 E3C8             		lea	(Hud_1).l,a2
0001E3D2 7C00                       		moveq	#0,d6
0001E3D4 6000                       		bra.s	loc_1C9BA
0001E3D6                            ; End of function Hud_Mins
0001E3D6                            
0001E3D6                            
0001E3D6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E3D6                            
0001E3D6                            
0001E3D6                            Hud_Secs:				; XREF: Hud_ChkTime
0001E3D6 45F9 0001 E3C4             		lea	(Hud_10).l,a2
0001E3DC 7C01                       		moveq	#1,d6
0001E3DE                            
0001E3DE                            loc_1C9BA:
0001E3DE 7800                       		moveq	#0,d4
0001E3E0 43FA 0000                  		lea	Art_Hud(pc),a1
0001E3E4                            
0001E3E4                            Hud_TimeLoop:
0001E3E4 7400                       		moveq	#0,d2
0001E3E6 261A                       		move.l	(a2)+,d3
0001E3E8                            
0001E3E8                            loc_1C9C4:
0001E3E8 9283                       		sub.l	d3,d1
0001E3EA 6500                       		bcs.s	loc_1C9CC
0001E3EC 5242                       		addq.w	#1,d2
0001E3EE 60F8                       		bra.s	loc_1C9C4
0001E3F0                            ; ===========================================================================
0001E3F0                            
0001E3F0                            loc_1C9CC:
0001E3F0 D283                       		add.l	d3,d1
0001E3F2 4A42                       		tst.w	d2
0001E3F4 6700                       		beq.s	loc_1C9D6
0001E3F6 383C 0001                  		move.w	#1,d4
0001E3FA                            
0001E3FA                            loc_1C9D6:
0001E3FA ED4A                       		lsl.w	#6,d2
0001E3FC 2D40 0004                  		move.l	d0,4(a6)
0001E400 47F1 2000                  		lea	(a1,d2.w),a3
0001E404 2C9B                       		move.l	(a3)+,(a6)
0001E406 2C9B                       		move.l	(a3)+,(a6)
0001E408 2C9B                       		move.l	(a3)+,(a6)
0001E40A 2C9B                       		move.l	(a3)+,(a6)
0001E40C 2C9B                       		move.l	(a3)+,(a6)
0001E40E 2C9B                       		move.l	(a3)+,(a6)
0001E410 2C9B                       		move.l	(a3)+,(a6)
0001E412 2C9B                       		move.l	(a3)+,(a6)
0001E414 2C9B                       		move.l	(a3)+,(a6)
0001E416 2C9B                       		move.l	(a3)+,(a6)
0001E418 2C9B                       		move.l	(a3)+,(a6)
0001E41A 2C9B                       		move.l	(a3)+,(a6)
0001E41C 2C9B                       		move.l	(a3)+,(a6)
0001E41E 2C9B                       		move.l	(a3)+,(a6)
0001E420 2C9B                       		move.l	(a3)+,(a6)
0001E422 2C9B                       		move.l	(a3)+,(a6)
0001E424 0680 0040 0000             		addi.l	#$400000,d0
0001E42A 51CE FFB8                  		dbf	d6,Hud_TimeLoop
0001E42E                            
0001E42E 4E75                       		rts
0001E430                            ; End of function Hud_Secs
0001E430                            
0001E430                            ; ---------------------------------------------------------------------------
0001E430                            ; Subroutine to	load time/ring bonus numbers patterns
0001E430                            ; ---------------------------------------------------------------------------
0001E430                            
0001E430                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E430                            
0001E430                            
0001E430                            Hud_TimeRingBonus:			; XREF: Hud_ChkBonus
0001E430 45F9 0001 E3BC             		lea	(Hud_1000).l,a2
0001E436 7C03                       		moveq	#3,d6
0001E438 7800                       		moveq	#0,d4
0001E43A 43FA 0000                  		lea	Art_Hud(pc),a1
0001E43E                            
0001E43E                            Hud_BonusLoop:
0001E43E 7400                       		moveq	#0,d2
0001E440 261A                       		move.l	(a2)+,d3
0001E442                            
0001E442                            loc_1CA1E:
0001E442 9283                       		sub.l	d3,d1
0001E444 6500                       		bcs.s	loc_1CA26
0001E446 5242                       		addq.w	#1,d2
0001E448 60F8                       		bra.s	loc_1CA1E
0001E44A                            ; ===========================================================================
0001E44A                            
0001E44A                            loc_1CA26:
0001E44A D283                       		add.l	d3,d1
0001E44C 4A42                       		tst.w	d2
0001E44E 6700                       		beq.s	loc_1CA30
0001E450 383C 0001                  		move.w	#1,d4
0001E454                            
0001E454                            loc_1CA30:
0001E454 4A44                       		tst.w	d4
0001E456 6700                       		beq.s	Hud_ClrBonus
0001E458 ED4A                       		lsl.w	#6,d2
0001E45A 47F1 2000                  		lea	(a1,d2.w),a3
0001E45E 2C9B                       		move.l	(a3)+,(a6)
0001E460 2C9B                       		move.l	(a3)+,(a6)
0001E462 2C9B                       		move.l	(a3)+,(a6)
0001E464 2C9B                       		move.l	(a3)+,(a6)
0001E466 2C9B                       		move.l	(a3)+,(a6)
0001E468 2C9B                       		move.l	(a3)+,(a6)
0001E46A 2C9B                       		move.l	(a3)+,(a6)
0001E46C 2C9B                       		move.l	(a3)+,(a6)
0001E46E 2C9B                       		move.l	(a3)+,(a6)
0001E470 2C9B                       		move.l	(a3)+,(a6)
0001E472 2C9B                       		move.l	(a3)+,(a6)
0001E474 2C9B                       		move.l	(a3)+,(a6)
0001E476 2C9B                       		move.l	(a3)+,(a6)
0001E478 2C9B                       		move.l	(a3)+,(a6)
0001E47A 2C9B                       		move.l	(a3)+,(a6)
0001E47C 2C9B                       		move.l	(a3)+,(a6)
0001E47E                            
0001E47E                            loc_1CA5A:
0001E47E 51CE FFBE                  		dbf	d6,Hud_BonusLoop ; repeat 3 more times
0001E482                            
0001E482 4E75                       		rts
0001E484                            ; ===========================================================================
0001E484                            
0001E484                            Hud_ClrBonus:
0001E484 7A0F                       		moveq	#$F,d5
0001E486                            
0001E486                            Hud_ClrBonusLoop:
0001E486 2CBC 0000 0000             		move.l	#0,(a6)
0001E48C 51CD FFF8                  		dbf	d5,Hud_ClrBonusLoop
0001E490                            
0001E490 60EC                       		bra.s	loc_1CA5A
0001E492                            ; End of function Hud_TimeRingBonus
0001E492                            
0001E492                            ; ---------------------------------------------------------------------------
0001E492                            ; Subroutine to	load uncompressed lives	counter	patterns
0001E492                            ; ---------------------------------------------------------------------------
0001E492                            
0001E492                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E492                            
0001E492                            
0001E492                            Hud_Lives:				; XREF: Hud_ChkLives
0001E492 203C 7BA0 0003             		move.l	#$7BA00003,d0	; set VRAM address
0001E498 7200                       		moveq	#0,d1
0001E49A 1238 FE12                  		move.b	($FFFFFE12).w,d1 ; load	number of lives
0001E49E 45F9 0001 E3C4             		lea	(Hud_10).l,a2
0001E4A4 7C01                       		moveq	#1,d6
0001E4A6 7800                       		moveq	#0,d4
0001E4A8 43FA 0000                  		lea	Art_LivesNums(pc),a1
0001E4AC                            
0001E4AC                            Hud_LivesLoop:
0001E4AC 2D40 0004                  		move.l	d0,4(a6)
0001E4B0 7400                       		moveq	#0,d2
0001E4B2 261A                       		move.l	(a2)+,d3
0001E4B4                            
0001E4B4                            loc_1CA90:
0001E4B4 9283                       		sub.l	d3,d1
0001E4B6 6500                       		bcs.s	loc_1CA98
0001E4B8 5242                       		addq.w	#1,d2
0001E4BA 60F8                       		bra.s	loc_1CA90
0001E4BC                            ; ===========================================================================
0001E4BC                            
0001E4BC                            loc_1CA98:
0001E4BC D283                       		add.l	d3,d1
0001E4BE 4A42                       		tst.w	d2
0001E4C0 6700                       		beq.s	loc_1CAA2
0001E4C2 383C 0001                  		move.w	#1,d4
0001E4C6                            
0001E4C6                            loc_1CAA2:
0001E4C6 4A44                       		tst.w	d4
0001E4C8 6700                       		beq.s	Hud_ClrLives
0001E4CA                            
0001E4CA                            loc_1CAA6:
0001E4CA EB4A                       		lsl.w	#5,d2
0001E4CC 47F1 2000                  		lea	(a1,d2.w),a3
0001E4D0 2C9B                       		move.l	(a3)+,(a6)
0001E4D2 2C9B                       		move.l	(a3)+,(a6)
0001E4D4 2C9B                       		move.l	(a3)+,(a6)
0001E4D6 2C9B                       		move.l	(a3)+,(a6)
0001E4D8 2C9B                       		move.l	(a3)+,(a6)
0001E4DA 2C9B                       		move.l	(a3)+,(a6)
0001E4DC 2C9B                       		move.l	(a3)+,(a6)
0001E4DE 2C9B                       		move.l	(a3)+,(a6)
0001E4E0                            
0001E4E0                            loc_1CABC:
0001E4E0 0680 0040 0000             		addi.l	#$400000,d0
0001E4E6 51CE FFC4                  		dbf	d6,Hud_LivesLoop ; repeat 1 more time
0001E4EA                            
0001E4EA 4E75                       		rts
0001E4EC                            ; ===========================================================================
0001E4EC                            
0001E4EC                            Hud_ClrLives:
0001E4EC 4A46                       		tst.w	d6
0001E4EE 67DA                       		beq.s	loc_1CAA6
0001E4F0 7A07                       		moveq	#7,d5
0001E4F2                            
0001E4F2                            Hud_ClrLivesLoop:
0001E4F2 2CBC 0000 0000             		move.l	#0,(a6)
0001E4F8 51CD FFF8                  		dbf	d5,Hud_ClrLivesLoop
0001E4FC 60E2                       		bra.s	loc_1CABC
0001E4FE                            ; End of function Hud_Lives
0001E4FE                            
0001E4FE                            ; ===========================================================================
0001E4FE                            Art_Hud:	incbin	artunc\HUD.bin		; 8x16 pixel numbers on HUD
0001E87E                            		even
0001E87E                            Art_LivesNums:	incbin	artunc\livescnt.bin	; 8x8 pixel numbers on lives counter
0001E9BE                            		even
0001E9BE                            ; ===========================================================================
0001E9BE                            ; ---------------------------------------------------------------------------
0001E9BE                            ; When debug mode is currently in use
0001E9BE                            ; ---------------------------------------------------------------------------
0001E9BE                            
0001E9BE                            DebugMode:				; XREF: Obj01; Obj09
0001E9BE 7000                       		moveq	#0,d0
0001E9C0 1038 FE08                  		move.b	($FFFFFE08).w,d0
0001E9C4 323B 0000                  		move.w	Debug_Index(pc,d0.w),d1
0001E9C8 4EFB 1000                  		jmp	Debug_Index(pc,d1.w)
0001E9CC                            ; ===========================================================================
0001E9CC 0000                       Debug_Index:	dc.w Debug_Main-Debug_Index
0001E9CE 0000                       		dc.w Debug_Skip-Debug_Index
0001E9D0                            ; ===========================================================================
0001E9D0                            
0001E9D0                            Debug_Main:				; XREF: Debug_Index
0001E9D0 5438 FE08                  		addq.b	#2,($FFFFFE08).w
0001E9D4 31F8 F72C FEF0             		move.w	($FFFFF72C).w,($FFFFFEF0).w ; buffer level x-boundary
0001E9DA 31F8 F726 FEF2             		move.w	($FFFFF726).w,($FFFFFEF2).w ; buffer level y-boundary
0001E9E0 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
0001E9E6 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
0001E9EC 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
0001E9F2 0278 07FF F704             		andi.w	#$7FF,($FFFFF704).w
0001E9F8 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
0001E9FE 117C 0000 001A             		move.b	#0,$1A(a0)
0001EA04 117C 0000 001C             		move.b	#0,$1C(a0)
0001EA0A 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode = $10	(special stage)?
0001EA10 6600                       		bne.s	Debug_Zone	; if not, branch
0001EA12 31FC 0000 F782             		move.w	#0,($FFFFF782).w ; stop	special	stage rotating
0001EA18 31FC 0000 F780             		move.w	#0,($FFFFF780).w ; make	special	stage "upright"
0001EA1E 7006                       		moveq	#6,d0		; use 6th debug	item list
0001EA20 6000                       		bra.s	Debug_UseList
0001EA22                            ; ===========================================================================
0001EA22                            
0001EA22                            Debug_Zone:
0001EA22 7000                       		moveq	#0,d0
0001EA24 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001EA28                            
0001EA28                            Debug_UseList:
0001EA28 45F9 0000 0000             		lea	(DebugList).l,a2
0001EA2E D040                       		add.w	d0,d0
0001EA30 D4F2 0000                  		adda.w	(a2,d0.w),a2
0001EA34 3C1A                       		move.w	(a2)+,d6
0001EA36 BC38 FE06                  		cmp.b	($FFFFFE06).w,d6
0001EA3A 6200                       		bhi.s	loc_1CF9E
0001EA3C 11FC 0000 FE06             		move.b	#0,($FFFFFE06).w
0001EA42                            
0001EA42                            loc_1CF9E:
0001EA42 6100 0000                  		bsr.w	Debug_ShowItem
0001EA46 11FC 000C FE0A             		move.b	#$C,($FFFFFE0A).w
0001EA4C 11FC 0001 FE0B             		move.b	#1,($FFFFFE0B).w
0001EA52                            
0001EA52                            Debug_Skip:				; XREF: Debug_Index
0001EA52 7006                       		moveq	#6,d0
0001EA54 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w
0001EA5A 6700                       		beq.s	loc_1CFBE
0001EA5C 7000                       		moveq	#0,d0
0001EA5E 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001EA62                            
0001EA62                            loc_1CFBE:
0001EA62 45F9 0000 0000             		lea	(DebugList).l,a2
0001EA68 D040                       		add.w	d0,d0
0001EA6A D4F2 0000                  		adda.w	(a2,d0.w),a2
0001EA6E 3C1A                       		move.w	(a2)+,d6
0001EA70 6100 0000                  		bsr.w	Debug_Control
0001EA74 4EF9 0000 E10A             		jmp	DisplaySprite
0001EA7A                            
0001EA7A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EA7A                            
0001EA7A                            
0001EA7A                            Debug_Control:
0001EA7A 7800                       		moveq	#0,d4
0001EA7C 323C 0001                  		move.w	#1,d1
0001EA80 1838 F605                  		move.b	($FFFFF605).w,d4
0001EA84 0244 000F                  		andi.w	#$F,d4		; is up/down/left/right	pressed?
0001EA88 6600                       		bne.s	loc_1D018	; if yes, branch
0001EA8A 1038 F604                  		move.b	($FFFFF604).w,d0
0001EA8E 0240 000F                  		andi.w	#$F,d0
0001EA92 6600                       		bne.s	loc_1D000
0001EA94 11FC 000C FE0A             		move.b	#$C,($FFFFFE0A).w
0001EA9A 11FC 000F FE0B             		move.b	#$F,($FFFFFE0B).w
0001EAA0 6000 0000                  		bra.w	Debug_BackItem
0001EAA4                            ; ===========================================================================
0001EAA4                            
0001EAA4                            loc_1D000:
0001EAA4 5338 FE0A                  		subq.b	#1,($FFFFFE0A).w
0001EAA8 6600                       		bne.s	loc_1D01C
0001EAAA 11FC 0001 FE0A             		move.b	#1,($FFFFFE0A).w
0001EAB0 5238 FE0B                  		addq.b	#1,($FFFFFE0B).w
0001EAB4 6600                       		bne.s	loc_1D018
0001EAB6 11FC 00FF FE0B             		move.b	#-1,($FFFFFE0B).w
0001EABC                            
0001EABC                            loc_1D018:
0001EABC 1838 F604                  		move.b	($FFFFF604).w,d4
0001EAC0                            
0001EAC0                            loc_1D01C:
0001EAC0 7200                       		moveq	#0,d1
0001EAC2 1238 FE0B                  		move.b	($FFFFFE0B).w,d1
0001EAC6 5241                       		addq.w	#1,d1
0001EAC8 4841                       		swap	d1
0001EACA E881                       		asr.l	#4,d1
0001EACC 2428 000C                  		move.l	$C(a0),d2
0001EAD0 2628 0008                  		move.l	8(a0),d3
0001EAD4 0804 0000                  		btst	#0,d4		; is up	being pressed?
0001EAD8 6700                       		beq.s	loc_1D03C	; if not, branch
0001EADA 9481                       		sub.l	d1,d2
0001EADC 6400                       		bcc.s	loc_1D03C
0001EADE 7400                       		moveq	#0,d2
0001EAE0                            
0001EAE0                            loc_1D03C:
0001EAE0 0804 0001                  		btst	#1,d4		; is down being	pressed?
0001EAE4 6700                       		beq.s	loc_1D052	; if not, branch
0001EAE6 D481                       		add.l	d1,d2
0001EAE8 0C82 07FF 0000             		cmpi.l	#$7FF0000,d2
0001EAEE 6500                       		bcs.s	loc_1D052
0001EAF0 243C 07FF 0000             		move.l	#$7FF0000,d2
0001EAF6                            
0001EAF6                            loc_1D052:
0001EAF6 0804 0002                  		btst	#2,d4
0001EAFA 6700                       		beq.s	loc_1D05E
0001EAFC 9681                       		sub.l	d1,d3
0001EAFE 6400                       		bcc.s	loc_1D05E
0001EB00 7600                       		moveq	#0,d3
0001EB02                            
0001EB02                            loc_1D05E:
0001EB02 0804 0003                  		btst	#3,d4
0001EB06 6700                       		beq.s	loc_1D066
0001EB08 D681                       		add.l	d1,d3
0001EB0A                            
0001EB0A                            loc_1D066:
0001EB0A 2142 000C                  		move.l	d2,$C(a0)
0001EB0E 2143 0008                  		move.l	d3,8(a0)
0001EB12                            
0001EB12                            Debug_BackItem:
0001EB12 0838 0006 F604             		btst	#6,($FFFFF604).w ; is button A pressed?
0001EB18 6700                       		beq.s	Debug_MakeItem	; if not, branch
0001EB1A 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
0001EB20 6700                       		beq.s	Debug_NextItem	; if not, branch
0001EB22 5338 FE06                  		subq.b	#1,($FFFFFE06).w ; go back 1 item
0001EB26 6400                       		bcc.s	Debug_NoLoop
0001EB28 DD38 FE06                  		add.b	d6,($FFFFFE06).w
0001EB2C 6000                       		bra.s	Debug_NoLoop
0001EB2E                            ; ===========================================================================
0001EB2E                            
0001EB2E                            Debug_NextItem:
0001EB2E 0838 0006 F605             		btst	#6,($FFFFF605).w ; is button A pressed?
0001EB34 6700                       		beq.s	Debug_MakeItem	; if not, branch
0001EB36 5238 FE06                  		addq.b	#1,($FFFFFE06).w ; go forwards 1 item
0001EB3A BC38 FE06                  		cmp.b	($FFFFFE06).w,d6
0001EB3E 6200                       		bhi.s	Debug_NoLoop
0001EB40 11FC 0000 FE06             		move.b	#0,($FFFFFE06).w ; loop	back to	first item
0001EB46                            
0001EB46                            Debug_NoLoop:
0001EB46 6000 0000                  		bra.w	Debug_ShowItem
0001EB4A                            ; ===========================================================================
0001EB4A                            
0001EB4A                            Debug_MakeItem:
0001EB4A 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
0001EB50 6700                       		beq.s	Debug_Exit	; if not, branch
0001EB52 4EB9 0000 E5A0             		jsr	SingleObjLoad
0001EB58 6600                       		bne.s	Debug_Exit
0001EB5A 3368 0008 0008             		move.w	8(a0),8(a1)
0001EB60 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001EB66 12A8 0004                  		move.b	4(a0),0(a1)	; create object
0001EB6A 1368 0001 0001             		move.b	1(a0),1(a1)
0001EB70 1368 0001 0022             		move.b	1(a0),$22(a1)
0001EB76 0229 007F 0022             		andi.b	#$7F,$22(a1)
0001EB7C 7000                       		moveq	#0,d0
0001EB7E 1038 FE06                  		move.b	($FFFFFE06).w,d0
0001EB82 E748                       		lsl.w	#3,d0
0001EB84 1372 0004 0028             		move.b	4(a2,d0.w),$28(a1)
0001EB8A 4E75                       		rts	
0001EB8C                            ; ===========================================================================
0001EB8C                            
0001EB8C                            Debug_Exit:
0001EB8C 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button B pressed?
0001EB92 6700                       		beq.s	Debug_DoNothing	; if not, branch
0001EB94 7000                       		moveq	#0,d0
0001EB96 31C0 FE08                  		move.w	d0,($FFFFFE08).w ; deactivate debug mode
0001EB9A 21FC 0000 0000 D004        		move.l	#Map_Sonic,($FFFFD004).w
0001EBA2 31FC 0780 D002             		move.w	#$780,($FFFFD002).w
0001EBA8 11C0 D01C                  		move.b	d0,($FFFFD01C).w
0001EBAC 3140 000A                  		move.w	d0,$A(a0)
0001EBB0 3140 000E                  		move.w	d0,$E(a0)
0001EBB4 31F8 FEF0 F72C             		move.w	($FFFFFEF0).w,($FFFFF72C).w ; restore level boundaries
0001EBBA 31F8 FEF2 F726             		move.w	($FFFFFEF2).w,($FFFFF726).w
0001EBC0 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; are you in	the special stage?
0001EBC6 6600                       		bne.s	Debug_DoNothing	; if not, branch
0001EBC8 4278 F780                  		clr.w	($FFFFF780).w
0001EBCC 31FC 0040 F782             		move.w	#$40,($FFFFF782).w ; set new level rotation speed
0001EBD2 21FC 0000 0000 D004        		move.l	#Map_Sonic,($FFFFD004).w
0001EBDA 31FC 0780 D002             		move.w	#$780,($FFFFD002).w
0001EBE0 11FC 0002 D01C             		move.b	#2,($FFFFD01C).w
0001EBE6 08F8 0002 D022             		bset	#2,($FFFFD022).w
0001EBEC 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001EBF2                            
0001EBF2                            Debug_DoNothing:
0001EBF2 4E75                       		rts	
0001EBF4                            ; End of function Debug_Control
0001EBF4                            
0001EBF4                            
0001EBF4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EBF4                            
0001EBF4                            
0001EBF4                            Debug_ShowItem:				; XREF: Debug_Main
0001EBF4 7000                       		moveq	#0,d0
0001EBF6 1038 FE06                  		move.b	($FFFFFE06).w,d0
0001EBFA E748                       		lsl.w	#3,d0
0001EBFC 2172 0000 0004             		move.l	(a2,d0.w),4(a0)	; load mappings	for item
0001EC02 3172 0006 0002             		move.w	6(a2,d0.w),2(a0) ; load	VRAM setting for item
0001EC08 1172 0005 001A             		move.b	5(a2,d0.w),$1A(a0) ; load frame	number for item
0001EC0E 4E75                       		rts	
0001EC10                            ; End of function Debug_ShowItem
0001EC10                            
0001EC10                            ; ===========================================================================
0001EC10                            ; ---------------------------------------------------------------------------
0001EC10                            ; Debug	list pointers
0001EC10                            ; ---------------------------------------------------------------------------
0001EC10                            DebugList:
0001EC10                            	include "_inc\Debug list pointers.asm"
0001EC10                            ; ---------------------------------------------------------------------------
0001EC10                            ; Debug	list pointers
0001EC10                            ; ---------------------------------------------------------------------------
0001EC10 0000                       	dc.w Debug_GHZ-DebugList
0001EC12 0000                       	dc.w Debug_LZ-DebugList
0001EC14 0000                       	dc.w Debug_MZ-DebugList
0001EC16 0000                       	dc.w Debug_SLZ-DebugList
0001EC18 0000                       	dc.w Debug_SYZ-DebugList
0001EC1A 0000                       	dc.w Debug_SBZ-DebugList
0001EC1C 0000                       	dc.w Debug_Ending-DebugList
0001EC1C 0000                       	dc.w Debug_Ending-DebugList
0001EC1E                            
0001EC1E                            ; ---------------------------------------------------------------------------
0001EC1E                            ; Debug	list - Green Hill
0001EC1E                            ; ---------------------------------------------------------------------------
0001EC1E                            Debug_GHZ:
0001EC1E                            	include "_inc\Debug list - GHZ.asm"
0001EC1E                            ; ---------------------------------------------------------------------------
0001EC1E                            ; Debug	list - Green Hill
0001EC1E                            ; ---------------------------------------------------------------------------
0001EC1E 0010                       	dc.w $10			; number of items in list
0001EC20 2500 AA5E                  	dc.l Map_obj25+$25000000	; mappings pointer, object type * 10^6
0001EC24 0000 27B2                  	dc.b 0,	0, $27,	$B2		; subtype, frame, VRAM setting (2 bytes)
0001EC28 2600 B08E                  	dc.l Map_obj26+$26000000
0001EC2C 0000 0680                  	dc.b 0,	0, 6, $80
0001EC30 1F00 A1E6                  	dc.l Map_obj1F+$1F000000
0001EC34 0000 0400                  	dc.b 0,	0, 4, 0
0001EC38 2200 A4C6                  	dc.l Map_obj22+$22000000
0001EC3C 0000 0444                  	dc.b 0,	0, 4, $44
0001EC40 2B00 B6D4                  	dc.l Map_obj2B+$2B000000
0001EC44 0000 047B                  	dc.b 0,	0, 4, $7B
0001EC48 3600 DAE4                  	dc.l Map_obj36+$36000000
0001EC4C 0000 051B                  	dc.b 0,	0, 5, $1B
0001EC50 1800 8BE4                  	dc.l Map_obj18+$18000000
0001EC54 0000 4000                  	dc.b 0,	0, $40,	0
0001EC58 3B00 DC0A                  	dc.l Map_obj3B+$3B000000
0001EC5C 0000 63D0                  	dc.b 0,	0, $63,	$D0
0001EC60 4001 02BE                  	dc.l Map_obj40+$40000000
0001EC64 0000 04F0                  	dc.b 0,	0, 4, $F0
0001EC68 4100 E832                  	dc.l Map_obj41+$41000000
0001EC6C 0000 0523                  	dc.b 0,	0, 5, $23
0001EC70 4200 EA58                  	dc.l Map_obj42+$42000000
0001EC74 0000 249B                  	dc.b 0,	0, $24,	$9B
0001EC78 4400 ED66                  	dc.l Map_obj44+$44000000
0001EC7C 0000 434C                  	dc.b 0,	0, $43,	$4C
0001EC80 1900 8C52                  	dc.l Map_obj48+$19000000
0001EC84 0000 43AA                  	dc.b 0,	0, $43,	$AA
0001EC88 7901 8AC6                  	dc.l Map_obj79+$79000000
0001EC8C 0100 07A0                  	dc.b 1,	0, 7, $A0
0001EC90 4B00 AA9E                  	dc.l Map_obj4B+$4B000000
0001EC94 0000 2400                  	dc.b 0,	0, $24,	0
0001EC98 7D01 8C16                  	dc.l Map_obj7D+$7D000000
0001EC9C 0101 84B6                  	dc.b 1,	1, $84,	$B6
0001ECA0                            	even
0001ECA0                            	even
0001ECA0                            
0001ECA0                            ; ---------------------------------------------------------------------------
0001ECA0                            ; Debug	list - Labyrinth
0001ECA0                            ; ---------------------------------------------------------------------------
0001ECA0                            Debug_LZ:
0001ECA0                            	include "_inc\Debug list - LZ.asm"
0001ECA0                            ; ---------------------------------------------------------------------------
0001ECA0                            ; Debug	list - Labyrinth
0001ECA0                            ; ---------------------------------------------------------------------------
0001ECA0 0019                       	dc.w $19
0001ECA2 2500 AA5E                  	dc.l Map_obj25+$25000000
0001ECA6 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001ECAA 2600 B08E                  	dc.l Map_obj26+$26000000
0001ECAE 0000 0680                  	dc.b 0,	0, 6, $80
0001ECB2 4100 E832                  	dc.l Map_obj41+$41000000
0001ECB6 0000 0523                  	dc.b 0,	0, 5, $23
0001ECBA 2C00 B77A                  	dc.l Map_obj2C+$2C000000
0001ECBE 0800 2486                  	dc.b 8,	0, $24,	$86
0001ECC2 2D00 B966                  	dc.l Map_obj2D+$2D000000
0001ECC6 0002 84A6                  	dc.b 0,	2, $84,	$A6
0001ECCA 1601 2AB2                  	dc.l Map_obj16+$16000000
0001ECCE 0000 03CC                  	dc.b 0,	0, 3, $CC
0001ECD2 1601 2AB2                  	dc.l Map_obj16+$16000000
0001ECD6 0203 03CC                  	dc.b 2,	3, 3, $CC
0001ECDA 3300 CDE4                  	dc.l Map_obj33+$33000000
0001ECDE 0000 43DE                  	dc.b 0,	0, $43,	$DE
0001ECE2 3200 C9A4                  	dc.l Map_obj32+$32000000
0001ECE6 0000 0513                  	dc.b 0,	0, 5, $13
0001ECEA 3600 DAE4                  	dc.l Map_obj36+$36000000
0001ECEE 0000 051B                  	dc.b 0,	0, 5, $1B
0001ECF2 5201 0BD4                  	dc.l Map_obj52a+$52000000
0001ECF6 0400 43BC                  	dc.b 4,	0, $43,	$BC
0001ECFA 6101 2CDA                  	dc.l Map_obj61+$61000000
0001ECFE 0100 43E6                  	dc.b 1,	0, $43,	$E6
0001ED02 6101 2CDA                  	dc.l Map_obj61+$61000000
0001ED06 1301 43E6                  	dc.b $13, 1, $43, $E6
0001ED0A 6101 2CDA                  	dc.l Map_obj61+$61000000
0001ED0E 0500 43E6                  	dc.b 5,	0, $43,	$E6
0001ED12 6201 2E2E                  	dc.l Map_obj62+$62000000
0001ED16 0000 443E                  	dc.b 0,	0, $44,	$3E
0001ED1A 6101 2CDA                  	dc.l Map_obj61+$61000000
0001ED1E 2702 43E6                  	dc.b $27, 2, $43, $E6
0001ED22 6101 2CDA                  	dc.l Map_obj61+$61000000
0001ED26 3003 43E6                  	dc.b $30, 3, $43, $E6
0001ED2A 6301 3190                  	dc.l Map_obj63+$63000000
0001ED2E 7F00 03F6                  	dc.b $7F, 0, 3,	$F6
0001ED32 6001 29FC                  	dc.l Map_obj60+$60000000
0001ED36 0000 0467                  	dc.b 0,	0, 4, $67
0001ED3A 6401 34D6                  	dc.l Map_obj64+$64000000
0001ED3E 8413 8348                  	dc.b $84, $13, $83, $48
0001ED42 6501 365E                  	dc.l Map_obj65+$65000000
0001ED46 0202 C259                  	dc.b 2,	2, $C2,	$59
0001ED4A 6501 365E                  	dc.l Map_obj65+$65000000
0001ED4E 0909 C259                  	dc.b 9,	9, $C2,	$59
0001ED52 0B01 1E4C                  	dc.l Map_obj0B+$B000000
0001ED56 0000 43DE                  	dc.b 0,	0, $43,	$DE
0001ED5A 0C01 1F1C                  	dc.l Map_obj0C+$C000000
0001ED5E 0200 4328                  	dc.b 2,	0, $43,	$28
0001ED62 7901 8AC6                  	dc.l Map_obj79+$79000000
0001ED66 0100 07A0                  	dc.b 1,	0, 7, $A0
0001ED6A                            	even
0001ED6A                            	even
0001ED6A                            
0001ED6A                            ; ---------------------------------------------------------------------------
0001ED6A                            ; Debug	list - Marble
0001ED6A                            ; ---------------------------------------------------------------------------
0001ED6A                            Debug_MZ:
0001ED6A                            	include "_inc\Debug list - MZ.asm"
0001ED6A                            ; ---------------------------------------------------------------------------
0001ED6A                            ; Debug	list - Marble
0001ED6A                            ; ---------------------------------------------------------------------------
0001ED6A 0012                       	dc.w $12
0001ED6C 2500 AA5E                  	dc.l Map_obj25+$25000000
0001ED70 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001ED74 2600 B08E                  	dc.l Map_obj26+$26000000
0001ED78 0000 0680                  	dc.b 0,	0, 6, $80
0001ED7C 2200 A4C6                  	dc.l Map_obj22+$22000000
0001ED80 0000 0444                  	dc.b 0,	0, 4, $44
0001ED84 3600 DAE4                  	dc.l Map_obj36+$36000000
0001ED88 0000 051B                  	dc.b 0,	0, 5, $1B
0001ED8C 4100 E832                  	dc.l Map_obj41+$41000000
0001ED90 0000 0523                  	dc.b 0,	0, 5, $23
0001ED94 1300 BE74                  	dc.l Map_obj14+$13000000
0001ED98 0000 0345                  	dc.b 0,	0, 3, $45
0001ED9C 4600 F418                  	dc.l Map_obj46+$46000000
0001EDA0 0000 4000                  	dc.b 0,	0, $40,	0
0001EDA4 4C00 FD6A                  	dc.l Map_obj4C+$4C000000
0001EDA8 0000 63A8                  	dc.b 0,	0, $63,	$A8
0001EDAC 4E01 004E                  	dc.l Map_obj4E+$4E000000
0001EDB0 0000 63A8                  	dc.b 0,	0, $63,	$A8
0001EDB4 3300 CDE4                  	dc.l Map_obj33+$33000000
0001EDB8 0000 42B8                  	dc.b 0,	0, $42,	$B8
0001EDBC 5001 044C                  	dc.l Map_obj50+$50000000
0001EDC0 0000 247B                  	dc.b 0,	0, $24,	$7B
0001EDC4 5101 0908                  	dc.l Map_obj51+$51000000
0001EDC8 0000 42B8                  	dc.b 0,	0, $42,	$B8
0001EDCC 5201 0B7E                  	dc.l Map_obj52+$52000000
0001EDD0 0000 02B8                  	dc.b 0,	0, 2, $B8
0001EDD4 5300 91EA                  	dc.l Map_obj53+$53000000
0001EDD8 0000 62B8                  	dc.b 0,	0, $62,	$B8
0001EDDC 5400 FD30                  	dc.l Map_obj54+$54000000
0001EDE0 0000 8680                  	dc.b 0,	0, $86,	$80
0001EDE4 5501 0D72                  	dc.l Map_obj55+$55000000
0001EDE8 0000 04B8                  	dc.b 0,	0, 4, $B8
0001EDEC 7801 873E                  	dc.l Map_obj78+$78000000
0001EDF0 0000 24FF                  	dc.b 0,	0, $24,	$FF
0001EDF4 7901 8AC6                  	dc.l Map_obj79+$79000000
0001EDF8 0100 07A0                  	dc.b 1,	0, 7, $A0
0001EDFC                            	even
0001EDFC                            	even
0001EDFC                            
0001EDFC                            ; ---------------------------------------------------------------------------
0001EDFC                            ; Debug	list - Star Light
0001EDFC                            ; ---------------------------------------------------------------------------
0001EDFC                            Debug_SLZ:
0001EDFC                            	include "_inc\Debug list - SLZ.asm"
0001EDFC                            ; ---------------------------------------------------------------------------
0001EDFC                            ; Debug	list - Star Light
0001EDFC                            ; ---------------------------------------------------------------------------
0001EDFC 000F                       	dc.w $F
0001EDFE 2500 AA5E                  	dc.l Map_obj25+$25000000
0001EE02 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001EE06 2600 B08E                  	dc.l Map_obj26+$26000000
0001EE0A 0000 0680                  	dc.b 0,	0, 6, $80
0001EE0E 5901 1874                  	dc.l Map_obj59+$59000000
0001EE12 0000 4000                  	dc.b 0,	0, $40,	0
0001EE16 5300 91EA                  	dc.l Map_obj53+$53000000
0001EE1A 0002 44E0                  	dc.b 0,	2, $44,	$E0
0001EE1E 1800 8C42                  	dc.l Map_obj18b+$18000000
0001EE22 0000 4000                  	dc.b 0,	0, $40,	0
0001EE26 5A01 19AE                  	dc.l Map_obj5A+$5A000000
0001EE2A 0000 4000                  	dc.b 0,	0, $40,	0
0001EE2E 5B01 1B66                  	dc.l Map_obj5B+$5B000000
0001EE32 0000 4000                  	dc.b 0,	0, $40,	0
0001EE36 5D01 2136                  	dc.l Map_obj5D+$5D000000
0001EE3A 0000 43A0                  	dc.b 0,	0, $43,	$A0
0001EE3E 5E01 24C8                  	dc.l Map_obj5E+$5E000000
0001EE42 0000 0374                  	dc.b 0,	0, 3, $74
0001EE46 4100 E832                  	dc.l Map_obj41+$41000000
0001EE4A 0000 0523                  	dc.b 0,	0, 5, $23
0001EE4E 1300 BE74                  	dc.l Map_obj14+$13000000
0001EE52 0000 0480                  	dc.b 0,	0, 4, $80
0001EE56 1C00 92FA                  	dc.l Map_obj1C+$1C000000
0001EE5A 0000 44D8                  	dc.b 0,	0, $44,	$D8
0001EE5E 5F01 2746                  	dc.l Map_obj5F+$5F000000
0001EE62 0000 0400                  	dc.b 0,	0, 4, 0
0001EE66 6001 29FC                  	dc.l Map_obj60+$60000000
0001EE6A 0000 2429                  	dc.b 0,	0, $24,	$29
0001EE6E 7901 8AC6                  	dc.l Map_obj79+$79000000
0001EE72 0100 07A0                  	dc.b 1,	0, 7, $A0
0001EE76                            	even
0001EE76                            	even
0001EE76                            
0001EE76                            ; ---------------------------------------------------------------------------
0001EE76                            ; Debug	list - Spring Yard
0001EE76                            ; ---------------------------------------------------------------------------
0001EE76                            Debug_SYZ:
0001EE76                            	include "_inc\Debug list - SYZ.asm"
0001EE76                            ; ---------------------------------------------------------------------------
0001EE76                            ; Debug	list - Spring Yard
0001EE76                            ; ---------------------------------------------------------------------------
0001EE76 000F                       	dc.w $F
0001EE78 2500 AA5E                  	dc.l Map_obj25+$25000000
0001EE7C 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001EE80 2600 B08E                  	dc.l Map_obj26+$26000000
0001EE84 0000 0680                  	dc.b 0,	0, 6, $80
0001EE88 3600 DAE4                  	dc.l Map_obj36+$36000000
0001EE8C 0000 051B                  	dc.b 0,	0, 5, $1B
0001EE90 4100 E832                  	dc.l Map_obj41+$41000000
0001EE94 0000 0523                  	dc.b 0,	0, 5, $23
0001EE98 4300 ECB8                  	dc.l Map_obj43+$43000000
0001EE9C 0000 04B8                  	dc.b 0,	0, 4, $B8
0001EEA0 1200 F496                  	dc.l Map_obj12+$12000000
0001EEA4 0000 0000                  	dc.b 0,	0, 0, 0
0001EEA8 4700 F612                  	dc.l Map_obj47+$47000000
0001EEAC 0000 0380                  	dc.b 0,	0, 3, $80
0001EEB0 1F00 A1E6                  	dc.l Map_obj1F+$1F000000
0001EEB4 0000 0400                  	dc.b 0,	0, 4, 0
0001EEB8 2200 A4C6                  	dc.l Map_obj22+$22000000
0001EEBC 0000 0444                  	dc.b 0,	0, 4, $44
0001EEC0 5001 044C                  	dc.l Map_obj50+$50000000
0001EEC4 0000 247B                  	dc.b 0,	0, $24,	$7B
0001EEC8 1800 8C30                  	dc.l Map_obj18a+$18000000
0001EECC 0000 4000                  	dc.b 0,	0, $40,	0
0001EED0 5601 1234                  	dc.l Map_obj56+$56000000
0001EED4 0000 4000                  	dc.b 0,	0, $40,	0
0001EED8 3200 C9A4                  	dc.l Map_obj32+$32000000
0001EEDC 0000 0513                  	dc.b 0,	0, 5, $13
0001EEE0 7801 873E                  	dc.l Map_obj78+$78000000
0001EEE4 0000 24FF                  	dc.b 0,	0, $24,	$FF
0001EEE8 7901 8AC6                  	dc.l Map_obj79+$79000000
0001EEEC 0100 07A0                  	dc.b 1,	0, 7, $A0
0001EEF0                            	even
0001EEF0                            	even
0001EEF0                            
0001EEF0                            ; ---------------------------------------------------------------------------
0001EEF0                            ; Debug	list - Scrap Brain
0001EEF0                            ; ---------------------------------------------------------------------------
0001EEF0                            Debug_SBZ:
0001EEF0                            	include "_inc\Debug list - SBZ.asm"
0001EEF0                            ; ---------------------------------------------------------------------------
0001EEF0                            ; Debug	list - Scrap Brain
0001EEF0                            ; ---------------------------------------------------------------------------
0001EEF0 001D                       	dc.w $1D
0001EEF2 2500 AA5E                  	dc.l Map_obj25+$25000000
0001EEF6 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001EEFA 2600 B08E                  	dc.l Map_obj26+$26000000
0001EEFE 0000 0680                  	dc.b 0,	0, 6, $80
0001EF02 5F01 2746                  	dc.l Map_obj5F+$5F000000
0001EF06 0000 0400                  	dc.b 0,	0, 4, 0
0001EF0A 6001 29FC                  	dc.l Map_obj60+$60000000
0001EF0E 0000 0429                  	dc.b 0,	0, 4, $29
0001EF12 7801 873E                  	dc.l Map_obj78+$78000000
0001EF16 0000 22B0                  	dc.b 0,	0, $22,	$B0
0001EF1A 1501 15D0                  	dc.l Map_obj15b+$15000000
0001EF1E 0702 4391                  	dc.b 7,	2, $43,	$91
0001EF22 6701 705E                  	dc.l Map_obj67+$67000000
0001EF26 E000 C344                  	dc.b $E0, 0, $C3, $44
0001EF2A 5201 0B7E                  	dc.l Map_obj52+$52000000
0001EF2E 2802 22C0                  	dc.b $28, 2, $22, $C0
0001EF32 3200 C9A4                  	dc.l Map_obj32+$32000000
0001EF36 0000 0513                  	dc.b 0,	0, 5, $13
0001EF3A 6901 72B8                  	dc.l Map_obj69+$69000000
0001EF3E 0300 4492                  	dc.b 3,	0, $44,	$92
0001EF42 6901 7312                  	dc.l Map_obj69a+$69000000
0001EF46 8300 04DF                  	dc.b $83, 0, 4,	$DF
0001EF4A 6A01 7570                  	dc.l Map_obj6A+$6A000000
0001EF4E 0200 43B5                  	dc.b 2,	0, $43,	$B5
0001EF52 5300 91EA                  	dc.l Map_obj53+$53000000
0001EF56 0000 43F5                  	dc.b 0,	0, $43,	$F5
0001EF5A 5201 0B7E                  	dc.l Map_obj52+$52000000
0001EF5E 3903 4460                  	dc.b $39, 3, $44, $60
0001EF62 6B01 7940                  	dc.l Map_obj6B+$6B000000
0001EF66 0000 22C0                  	dc.b 0,	0, $22,	$C0
0001EF6A 2A00 9490                  	dc.l Map_obj2A+$2A000000
0001EF6E 0000 42E8                  	dc.b 0,	0, $42,	$E8
0001EF72 6B01 7940                  	dc.l Map_obj6B+$6B000000
0001EF76 1301 22C0                  	dc.b $13, 1, $22, $C0
0001EF7A 6A01 7570                  	dc.l Map_obj6A+$6A000000
0001EF7E 0100 43B5                  	dc.b 1,	0, $43,	$B5
0001EF82 6B01 7940                  	dc.l Map_obj6B+$6B000000
0001EF86 2401 22C0                  	dc.b $24, 1, $22, $C0
0001EF8A 6A01 7570                  	dc.l Map_obj6A+$6A000000
0001EF8E 0402 43B5                  	dc.b 4,	2, $43,	$B5
0001EF92 6B01 7940                  	dc.l Map_obj6B+$6B000000
0001EF96 3401 22C0                  	dc.b $34, 1, $22, $C0
0001EF9A 6C01 7B02                  	dc.l Map_obj6C+$6C000000
0001EF9E 0000 44C3                  	dc.b 0,	0, $44,	$C3
0001EFA2 6D00 F108                  	dc.l Map_obj6D+$6D000000
0001EFA6 6400 83D9                  	dc.b $64, 0, $83, $D9
0001EFAA 6D00 F108                  	dc.l Map_obj6D+$6D000000
0001EFAE 640B 83D9                  	dc.b $64, $B, $83, $D9
0001EFB2 6E01 7BB8                  	dc.l Map_obj6E+$6E000000
0001EFB6 0400 047E                  	dc.b 4,	0, 4, $7E
0001EFBA 7001 7FFE                  	dc.l Map_obj70+$70000000
0001EFBE 0000 42F0                  	dc.b 0,	0, $42,	$F0
0001EFC2 7101 1FDC                  	dc.l Map_obj71+$71000000
0001EFC6 1100 8680                  	dc.b $11, 0, $86, $80
0001EFCA 1E00 98FE                  	dc.l Map_obj1E+$1E000000
0001EFCE 0400 2302                  	dc.b 4,	0, $23,	2
0001EFD2 7901 8AC6                  	dc.l Map_obj79+$79000000
0001EFD6 0100 07A0                  	dc.b 1,	0, 7, $A0
0001EFDA                            	even
0001EFDA                            	even
0001EFDA                            
0001EFDA                            ; ---------------------------------------------------------------------------
0001EFDA                            ; Debug	list - ending sequence / special stage
0001EFDA                            ; ---------------------------------------------------------------------------
0001EFDA                            Debug_Ending:
0001EFDA                            	include "_inc\Debug list - Ending and SS.asm"
0001EFDA                            ; ---------------------------------------------------------------------------
0001EFDA                            ; Debug	list - ending sequence / special stage
0001EFDA                            ; ---------------------------------------------------------------------------
0001EFDA 000D                       	dc.w $D
0001EFDC 2500 AA5E                  	dc.l Map_obj25+$25000000
0001EFE0 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001EFE4 4700 F612                  	dc.l Map_obj47+$47000000
0001EFE8 0000 0380                  	dc.b 0,	0, 3, $80
0001EFEC 2800 9F18                  	dc.l Map_obj28a+$28000000
0001EFF0 0A00 05A0                  	dc.b $A, 0, 5, $A0
0001EFF4 2800 9F18                  	dc.l Map_obj28a+$28000000
0001EFF8 0B00 05A0                  	dc.b $B, 0, 5, $A0
0001EFFC 2800 9F18                  	dc.l Map_obj28a+$28000000
0001F000 0C00 05A0                  	dc.b $C, 0, 5, $A0
0001F004 2800 9F00                  	dc.l Map_obj28+$28000000
0001F008 0D00 0553                  	dc.b $D, 0, 5, $53
0001F00C 2800 9F00                  	dc.l Map_obj28+$28000000
0001F010 0E00 0553                  	dc.b $E, 0, 5, $53
0001F014 2800 9F00                  	dc.l Map_obj28+$28000000
0001F018 0F00 0573                  	dc.b $F, 0, 5, $73
0001F01C 2800 9F00                  	dc.l Map_obj28+$28000000
0001F020 1000 0573                  	dc.b $10, 0, 5,	$73
0001F024 2800 9F18                  	dc.l Map_obj28a+$28000000
0001F028 1100 0585                  	dc.b $11, 0, 5,	$85
0001F02C 2800 9F30                  	dc.l Map_obj28b+$28000000
0001F030 1200 0593                  	dc.b $12, 0, 5,	$93
0001F034 2800 9F18                  	dc.l Map_obj28a+$28000000
0001F038 1300 0565                  	dc.b $13, 0, 5,	$65
0001F03C 2800 9F30                  	dc.l Map_obj28b+$28000000
0001F040 1400 05B3                  	dc.b $14, 0, 5,	$B3
0001F044                            	even
0001F044                            	even
0001F044                            
0001F044                            ; ---------------------------------------------------------------------------
0001F044                            ; Main level load blocks
0001F044                            ; ---------------------------------------------------------------------------
0001F044                            MainLoadBlocks:
0001F044                            	include "_inc\Main level load blocks.asm"
0001F044                            ; ---------------------------------------------------------------------------
0001F044                            ; Main level load blocks
0001F044                            ;
0001F044                            ; ===FORMAT===
0001F044                            ; level	patterns + (1st	PLC num	* 10^6)
0001F044                            ; 16x16	mappings + (2nd	PLC num	* 10^6)
0001F044                            ; 256x256 mappings
0001F044                            ; blank, music (unused), pal index (unused), pal index
0001F044                            ; ---------------------------------------------------------------------------
0001F044 0000 0000                  	dc.l Nem_GHZ+$4000000
0001F048 0000 0000                  	dc.l Blk16_GHZ+$5000000
0001F04C 0000 0000                  	dc.l Blk256_GHZ
0001F050 0081 0404                  	dc.b 0,	$81, 4,	4
0001F054 0000 0000                  	dc.l Nem_LZ+$6000000
0001F058 0000 0000                  	dc.l Blk16_LZ+$7000000
0001F05C 0000 0000                  	dc.l Blk256_LZ
0001F060 0082 0505                  	dc.b 0,	$82, 5,	5
0001F064 0000 0000                  	dc.l Nem_MZ+$8000000
0001F068 0000 0000                  	dc.l Blk16_MZ+$9000000
0001F06C 0000 0000                  	dc.l Blk256_MZ
0001F070 0083 0606                  	dc.b 0,	$83, 6,	6
0001F074 0000 0000                  	dc.l Nem_SLZ+$A000000
0001F078 0000 0000                  	dc.l Blk16_SLZ+$B000000
0001F07C 0000 0000                  	dc.l Blk256_SLZ
0001F080 0084 0707                  	dc.b 0,	$84, 7,	7
0001F084 0000 0000                  	dc.l Nem_SYZ+$C000000
0001F088 0000 0000                  	dc.l Blk16_SYZ+$D000000
0001F08C 0000 0000                  	dc.l Blk256_SYZ
0001F090 0085 0808                  	dc.b 0,	$85, 8,	8
0001F094 0000 0000                  	dc.l Nem_SBZ+$E000000
0001F098 0000 0000                  	dc.l Blk16_SBZ+$F000000
0001F09C 0000 0000                  	dc.l Blk256_SBZ
0001F0A0 0086 0909                  	dc.b 0,	$86, 9,	9
0001F0A4 0000 0000                  	dc.l Nem_GHZ_2nd	; main load block for ending
0001F0A8 0000 0000                  	dc.l Blk16_GHZ
0001F0AC 0000 0000                  	dc.l Blk256_GHZ
0001F0B0 0086 1313                  	dc.b 0,	$86, $13, $13
0001F0B4                            	even
0001F0B4                            	even
0001F0B4                            
0001F0B4                            ; ---------------------------------------------------------------------------
0001F0B4                            ; Pattern load cues
0001F0B4                            ; ---------------------------------------------------------------------------
0001F0B4                            ArtLoadCues:
0001F0B4                            	include "_inc\Pattern load cues.asm"
0001F0B4                            ; ---------------------------------------------------------------------------
0001F0B4                            ; Pattern load cues - index
0001F0B4                            ; ---------------------------------------------------------------------------
0001F0B4 0000 0000                  	dc.w PLC_Main-ArtLoadCues, PLC_Main2-ArtLoadCues
0001F0B8 0000 0000                  	dc.w PLC_Explode-ArtLoadCues, PLC_GameOver-ArtLoadCues
0001F0BC 0000 0000                  	dc.w PLC_GHZ-ArtLoadCues, PLC_GHZ2-ArtLoadCues
0001F0C0 0000 0000                  	dc.w PLC_LZ-ArtLoadCues, PLC_LZ2-ArtLoadCues
0001F0C4 0000 0000                  	dc.w PLC_MZ-ArtLoadCues, PLC_MZ2-ArtLoadCues
0001F0C8 0000 0000                  	dc.w PLC_SLZ-ArtLoadCues, PLC_SLZ2-ArtLoadCues
0001F0CC 0000 0000                  	dc.w PLC_SYZ-ArtLoadCues, PLC_SYZ2-ArtLoadCues
0001F0D0 0000 0000                  	dc.w PLC_SBZ-ArtLoadCues, PLC_SBZ2-ArtLoadCues
0001F0D4 0000 0000                  	dc.w PLC_TitleCard-ArtLoadCues,	PLC_Boss-ArtLoadCues
0001F0D8 0000 0000                  	dc.w PLC_Signpost-ArtLoadCues, PLC_Warp-ArtLoadCues
0001F0DC 0000 0000                  	dc.w PLC_SpeStage-ArtLoadCues, PLC_GHZAnimals-ArtLoadCues
0001F0E0 0000 0000                  	dc.w PLC_LZAnimals-ArtLoadCues,	PLC_MZAnimals-ArtLoadCues
0001F0E4 0000 0000                  	dc.w PLC_SLZAnimals-ArtLoadCues, PLC_SYZAnimals-ArtLoadCues
0001F0E8 0000 0000                  	dc.w PLC_SBZAnimals-ArtLoadCues, PLC_SpeStResult-ArtLoadCues
0001F0EC 0000 0000                  	dc.w PLC_Ending-ArtLoadCues, PLC_TryAgain-ArtLoadCues
0001F0F0 0000 0000                  	dc.w PLC_EggmanSBZ2-ArtLoadCues, PLC_FZBoss-ArtLoadCues
0001F0F4                            ; ---------------------------------------------------------------------------
0001F0F4                            ; Pattern load cues - standard block 1
0001F0F4                            ; ---------------------------------------------------------------------------
0001F0F4 0004                       PLC_Main:	dc.w 4
0001F0F6 0000 0000                  		dc.l Nem_Lamp		; lamppost
0001F0FA D800                       		dc.w $D800
0001F0FC 0000 0000                  		dc.l Nem_Hud		; HUD
0001F100 D940                       		dc.w $D940
0001F102 0000 0000                  		dc.l Nem_Lives		; lives	counter
0001F106 FA80                       		dc.w $FA80
0001F108 0000 0000                  		dc.l Nem_Ring		; rings
0001F10C F640                       		dc.w $F640
0001F10E 0000 0000                  		dc.l Nem_Points		; points from enemy
0001F112 F2E0                       		dc.w $F2E0
0001F114                            ; ---------------------------------------------------------------------------
0001F114                            ; Pattern load cues - standard block 2
0001F114                            ; ---------------------------------------------------------------------------
0001F114 0002                       PLC_Main2:	dc.w 2
0001F116 0000 0000                  		dc.l Nem_Monitors	; monitors
0001F11A D000                       		dc.w $D000
0001F11C 0000 0000                  		dc.l Nem_Shield		; shield
0001F120 A820                       		dc.w $A820
0001F122 0000 0000                  		dc.l Nem_Stars		; invincibility	stars
0001F126 AB80                       		dc.w $AB80
0001F128                            ; ---------------------------------------------------------------------------
0001F128                            ; Pattern load cues - explosion
0001F128                            ; ---------------------------------------------------------------------------
0001F128 0000                       PLC_Explode:	dc.w 0
0001F12A 0000 0000                  		dc.l Nem_Explode	; explosion
0001F12E B400                       		dc.w $B400
0001F130                            ; ---------------------------------------------------------------------------
0001F130                            ; Pattern load cues - game/time	over
0001F130                            ; ---------------------------------------------------------------------------
0001F130 0000                       PLC_GameOver:	dc.w 0
0001F132 0000 0000                  		dc.l Nem_GameOver	; game/time over
0001F136 ABC0                       		dc.w $ABC0
0001F138                            ; ---------------------------------------------------------------------------
0001F138                            ; Pattern load cues - Green Hill
0001F138                            ; ---------------------------------------------------------------------------
0001F138 000A                       PLC_GHZ:	dc.w $A
0001F13A 0000 0000                  		dc.l Nem_GHZ	; GHZ main patterns
0001F13E 0000                       		dc.w 0
0001F140 0000 0000                  		dc.l Nem_Stalk		; flower stalk
0001F144 6B00                       		dc.w $6B00
0001F146 0000 0000                  		dc.l Nem_PplRock	; purple rock
0001F14A 7A00                       		dc.w $7A00
0001F14C 0000 0000                  		dc.l Nem_Crabmeat	; crabmeat enemy
0001F150 8000                       		dc.w $8000
0001F152 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001F156 8880                       		dc.w $8880
0001F158 0000 0000                  		dc.l Nem_Chopper	; chopper enemy
0001F15C 8F60                       		dc.w $8F60
0001F15E 0000 0000                  		dc.l Nem_Newtron	; newtron enemy
0001F162 9360                       		dc.w $9360
0001F164 0000 0000                  		dc.l Nem_Motobug	; motobug enemy
0001F168 9E00                       		dc.w $9E00
0001F16A 0000 0000                  		dc.l Nem_Spikes		; spikes
0001F16E A360                       		dc.w $A360
0001F170 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001F174 A460                       		dc.w $A460
0001F176 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001F17A A660                       		dc.w $A660
0001F17C 0000 0000                  		dc.l ArtNem_DignlSprng	; diagonal spring
0001F180 A860                       		dc.W $A860
0001F182 0005                       PLC_GHZ2:	dc.w 5
0001F184 0000 0000                  		dc.l Nem_Swing		; swinging platform
0001F188 7000                       		dc.w $7000
0001F18A 0000 0000                  		dc.l Nem_Bridge		; bridge
0001F18E 71C0                       		dc.w $71C0
0001F190 0000 0000                  		dc.l Nem_SpikePole	; spiked pole
0001F194 7300                       		dc.w $7300
0001F196 0000 0000                  		dc.l Nem_Ball		; giant	ball
0001F19A 7540                       		dc.w $7540
0001F19C 0000 0000                  		dc.l Nem_GhzWall1	; breakable wall
0001F1A0 A1E0                       		dc.w $A1E0
0001F1A2 0000 0000                  		dc.l Nem_GhzWall2	; normal wall
0001F1A6 6980                       		dc.w $6980
0001F1A8                            ; ---------------------------------------------------------------------------
0001F1A8                            ; Pattern load cues - Labyrinth
0001F1A8                            ; ---------------------------------------------------------------------------
0001F1A8 000B                       PLC_LZ:		dc.w $B
0001F1AA 0000 0000                  		dc.l Nem_LZ		; LZ main patterns
0001F1AE 0000                       		dc.w 0
0001F1B0 0000 0000                  		dc.l Nem_LzBlock1	; block
0001F1B4 3C00                       		dc.w $3C00
0001F1B6 0000 0000                  		dc.l Nem_LzBlock2	; blocks
0001F1BA 3E00                       		dc.w $3E00
0001F1BC 0000 0000                  		dc.l Nem_Splash		; waterfalls and splash
0001F1C0 4B20                       		dc.w $4B20
0001F1C2 0000 0000                  		dc.l Nem_Water		; water	surface
0001F1C6 6000                       		dc.w $6000
0001F1C8 0000 0000                  		dc.l Nem_LzSpikeBall	; spiked ball
0001F1CC 6200                       		dc.w $6200
0001F1CE 0000 0000                  		dc.l Nem_FlapDoor	; flapping door
0001F1D2 6500                       		dc.w $6500
0001F1D4 0000 0000                  		dc.l Nem_Bubbles	; bubbles and numbers
0001F1D8 6900                       		dc.w $6900
0001F1DA 0000 0000                  		dc.l Nem_LzBlock3	; block
0001F1DE 7780                       		dc.w $7780
0001F1E0 0000 0000                  		dc.l Nem_LzDoor1	; vertical door
0001F1E4 7880                       		dc.w $7880
0001F1E6 0000 0000                  		dc.l Nem_Harpoon	; harpoon
0001F1EA 7980                       		dc.w $7980
0001F1EC 0000 0000                  		dc.l Nem_Burrobot	; burrobot enemy
0001F1F0 94C0                       		dc.w $94C0
0001F1F2 000C                       PLC_LZ2:	dc.w $C
0001F1F4 0000 0000                  		dc.l Nem_LzPole		; pole that breaks
0001F1F8 7BC0                       		dc.w $7BC0
0001F1FA 0000 0000                  		dc.l Nem_LzDoor2	; large	horizontal door
0001F1FE 7CC0                       		dc.w $7CC0
0001F200 0000 0000                  		dc.l Nem_LzWheel	; wheel
0001F204 7EC0                       		dc.w $7EC0
0001F206 0000 0000                  		dc.l Nem_Gargoyle	; gargoyle head
0001F20A 5D20                       		dc.w $5D20
0001F20C 0000 0000                  		dc.l Nem_LzSonic	; Sonic	holding	his breath
0001F210 8800                       		dc.w $8800
0001F212 0000 0000                  		dc.l Nem_LzPlatfm	; rising platform
0001F216 89E0                       		dc.w $89E0
0001F218 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001F21C 8CE0                       		dc.w $8CE0
0001F21E 0000 0000                  		dc.l Nem_Jaws		; jaws enemy
0001F222 90C0                       		dc.w $90C0
0001F224 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001F228 A1E0                       		dc.w $A1E0
0001F22A 0000 0000                  		dc.l Nem_Cork		; cork block
0001F22E A000                       		dc.w $A000
0001F230 0000 0000                  		dc.l Nem_Spikes		; spikes
0001F234 A360                       		dc.w $A360
0001F236 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001F23A A460                       		dc.w $A460
0001F23C 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001F240 A660                       		dc.w $A660
0001F242 0000 0000                  		dc.l ArtNem_DignlSprng	; diagonal spring
0001F246 A860                       		dc.W $A860
0001F248                            ; ---------------------------------------------------------------------------
0001F248                            ; Pattern load cues - Marble
0001F248                            ; ---------------------------------------------------------------------------
0001F248 0009                       PLC_MZ:		dc.w 9
0001F24A 0000 0000                  		dc.l Nem_MZ		; MZ main patterns
0001F24E 0000                       		dc.w 0
0001F250 0000 0000                  		dc.l Nem_MzMetal	; metal	blocks
0001F254 6000                       		dc.w $6000
0001F256 0000 0000                  		dc.l Nem_MzFire		; fireballs
0001F25A 68A0                       		dc.w $68A0
0001F25C 0000 0000                  		dc.l Nem_Swing		; swinging platform
0001F260 7000                       		dc.w $7000
0001F262 0000 0000                  		dc.l Nem_MzGlass	; green	glassy block
0001F266 71C0                       		dc.w $71C0
0001F268 0000 0000                  		dc.l Nem_Lava		; lava
0001F26C 7500                       		dc.w $7500
0001F26E 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001F272 8880                       		dc.w $8880
0001F274 0000 0000                  		dc.l Nem_Yadrin		; yadrin enemy
0001F278 8F60                       		dc.w $8F60
0001F27A 0000 0000                  		dc.l Nem_Basaran	; basaran enemy
0001F27E 9700                       		dc.w $9700
0001F280 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001F284 9FE0                       		dc.w $9FE0
0001F286 0004                       PLC_MZ2:	dc.w 4
0001F288 0000 0000                  		dc.l Nem_MzSwitch	; switch
0001F28C A260                       		dc.w $A260
0001F28E 0000 0000                  		dc.l Nem_Spikes		; spikes
0001F292 A360                       		dc.w $A360
0001F294 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001F298 A460                       		dc.w $A460
0001F29A 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001F29E A660                       		dc.w $A660
0001F2A0 0000 0000                  		dc.l ArtNem_DignlSprng	; diagonal spring
0001F2A4 A860                       		dc.W $A860
0001F2A6 0000 0000                  		dc.l Nem_MzBlock	; green	stone block
0001F2AA 5700                       		dc.w $5700
0001F2AC                            ; ---------------------------------------------------------------------------
0001F2AC                            ; Pattern load cues - Star Light
0001F2AC                            ; ---------------------------------------------------------------------------
0001F2AC 0008                       PLC_SLZ:	dc.w 8
0001F2AE 0000 0000                  		dc.l Nem_SLZ		; SLZ main patterns
0001F2B2 0000                       		dc.w 0
0001F2B4 0000 0000                  		dc.l Nem_Bomb		; bomb enemy
0001F2B8 8000                       		dc.w $8000
0001F2BA 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001F2BE 8520                       		dc.w $8520
0001F2C0 0000 0000                  		dc.l Nem_MzFire		; fireballs
0001F2C4 9000                       		dc.w $9000
0001F2C6 0000 0000                  		dc.l Nem_SlzBlock	; block
0001F2CA 9C00                       		dc.w $9C00
0001F2CC 0000 0000                  		dc.l Nem_SlzWall	; breakable wall
0001F2D0 A260                       		dc.w $A260
0001F2D2 0000 0000                  		dc.l Nem_Spikes		; spikes
0001F2D6 A360                       		dc.w $A360
0001F2D8 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001F2DC A460                       		dc.w $A460
0001F2DE 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001F2E2 A660                       		dc.w $A660
0001F2E4 0000 0000                  		dc.l ArtNem_DignlSprng	; diagonal spring
0001F2E8 A860                       		dc.W $A860
0001F2EA 0005                       PLC_SLZ2:	dc.w 5
0001F2EC 0000 0000                  		dc.l Nem_Seesaw		; seesaw
0001F2F0 6E80                       		dc.w $6E80
0001F2F2 0000 0000                  		dc.l Nem_Fan		; fan
0001F2F6 7400                       		dc.w $7400
0001F2F8 0000 0000                  		dc.l Nem_Pylon		; foreground pylon
0001F2FC 7980                       		dc.w $7980
0001F2FE 0000 0000                  		dc.l Nem_SlzSwing	; swinging platform
0001F302 7B80                       		dc.w $7B80
0001F304 0000 0000                  		dc.l Nem_SlzCannon	; fireball launcher
0001F308 9B00                       		dc.w $9B00
0001F30A 0000 0000                  		dc.l Nem_SlzSpike	; spikeball
0001F30E 9E00                       		dc.w $9E00
0001F310                            ; ---------------------------------------------------------------------------
0001F310                            ; Pattern load cues - Spring Yard
0001F310                            ; ---------------------------------------------------------------------------
0001F310 0004                       PLC_SYZ:	dc.w 4
0001F312 0000 0000                  		dc.l Nem_SYZ		; SYZ main patterns
0001F316 0000                       		dc.w 0
0001F318 0000 0000                  		dc.l Nem_Crabmeat	; crabmeat enemy
0001F31C 8000                       		dc.w $8000
0001F31E 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001F322 8880                       		dc.w $8880
0001F324 0000 0000                  		dc.l Nem_Yadrin		; yadrin enemy
0001F328 8F60                       		dc.w $8F60
0001F32A 0000 0000                  		dc.l Nem_Roller		; roller enemy
0001F32E 9700                       		dc.w $9700
0001F330 0007                       PLC_SYZ2:	dc.w 7
0001F332 0000 0000                  		dc.l Nem_Bumper		; bumper
0001F336 7000                       		dc.w $7000
0001F338 0000 0000                  		dc.l Nem_SyzSpike1	; large	spikeball
0001F33C 72C0                       		dc.w $72C0
0001F33E 0000 0000                  		dc.l Nem_SyzSpike2	; small	spikeball
0001F342 7740                       		dc.w $7740
0001F344 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001F348 9FE0                       		dc.w $9FE0
0001F34A 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001F34E A1E0                       		dc.w $A1E0
0001F350 0000 0000                  		dc.l Nem_Spikes		; spikes
0001F354 A360                       		dc.w $A360
0001F356 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001F35A A460                       		dc.w $A460
0001F35C 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001F360 A660                       		dc.w $A660
0001F362 0000 0000                  		dc.l ArtNem_DignlSprng	; diagonal spring
0001F366 A860                       		dc.W $A860
0001F368                            ; ---------------------------------------------------------------------------
0001F368                            ; Pattern load cues - Scrap Brain
0001F368                            ; ---------------------------------------------------------------------------
0001F368 000B                       PLC_SBZ:	dc.w $B
0001F36A 0000 0000                  		dc.l Nem_SBZ		; SBZ main patterns
0001F36E 0000                       		dc.w 0
0001F370 0000 0000                  		dc.l Nem_Stomper	; moving platform and stomper
0001F374 5800                       		dc.w $5800
0001F376 0000 0000                  		dc.l Nem_SbzDoor1	; door
0001F37A 5D00                       		dc.w $5D00
0001F37C 0000 0000                  		dc.l Nem_Girder		; girder
0001F380 5E00                       		dc.w $5E00
0001F382 0000 0000                  		dc.l Nem_BallHog	; ball hog enemy
0001F386 6040                       		dc.w $6040
0001F388 0000 0000                  		dc.l Nem_SbzWheel1	; spot on large	wheel
0001F38C 6880                       		dc.w $6880
0001F38E 0000 0000                  		dc.l Nem_SbzWheel2	; wheel	that grabs Sonic
0001F392 6900                       		dc.w $6900
0001F394 0000 0000                  		dc.l Nem_SyzSpike1	; large	spikeball
0001F398 7220                       		dc.w $7220
0001F39A 0000 0000                  		dc.l Nem_Cutter		; pizza	cutter
0001F39E 76A0                       		dc.w $76A0
0001F3A0 0000 0000                  		dc.l Nem_FlamePipe	; flaming pipe
0001F3A4 7B20                       		dc.w $7B20
0001F3A6 0000 0000                  		dc.l Nem_SbzFloor	; collapsing floor
0001F3AA 7EA0                       		dc.w $7EA0
0001F3AC 0000 0000                  		dc.l Nem_SbzBlock	; vanishing block
0001F3B0 9860                       		dc.w $9860
0001F3B2 000C                       PLC_SBZ2:	dc.w $C
0001F3B4 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001F3B8 5600                       		dc.w $5600
0001F3BA 0000 0000                  		dc.l Nem_Bomb		; bomb enemy
0001F3BE 8000                       		dc.w $8000
0001F3C0 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001F3C4 8520                       		dc.w $8520
0001F3C6 0000 0000                  		dc.l Nem_SlideFloor	; floor	that slides away
0001F3CA 8C00                       		dc.w $8C00
0001F3CC 0000 0000                  		dc.l Nem_SbzDoor2	; horizontal door
0001F3D0 8DE0                       		dc.w $8DE0
0001F3D2 0000 0000                  		dc.l Nem_Electric	; electric orb
0001F3D6 8FC0                       		dc.w $8FC0
0001F3D8 0000 0000                  		dc.l Nem_TrapDoor	; trapdoor
0001F3DC 9240                       		dc.w $9240
0001F3DE 0000 0000                  		dc.l Nem_SbzFloor	; collapsing floor
0001F3E2 7F20                       		dc.w $7F20
0001F3E4 0000 0000                  		dc.l Nem_SpinPform	; small	spinning platform
0001F3E8 9BE0                       		dc.w $9BE0
0001F3EA 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001F3EE A1E0                       		dc.w $A1E0
0001F3F0 0000 0000                  		dc.l Nem_Spikes		; spikes
0001F3F4 A360                       		dc.w $A360
0001F3F6 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001F3FA A460                       		dc.w $A460
0001F3FC 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001F400 A660                       		dc.w $A660
0001F402 0000 0000                  		dc.l ArtNem_DignlSprng	; diagonal spring
0001F406 A860                       		dc.W $A860
0001F408                            ; ---------------------------------------------------------------------------
0001F408                            ; Pattern load cues - title card
0001F408                            ; ---------------------------------------------------------------------------
0001F408 0000                       PLC_TitleCard:	dc.w 0
0001F40A 0000 0000                  		dc.l Nem_TitleCard
0001F40E B000                       		dc.w $B000
0001F410                            ; ---------------------------------------------------------------------------
0001F410                            ; Pattern load cues - act 3 boss
0001F410                            ; ---------------------------------------------------------------------------
0001F410 0005                       PLC_Boss:	dc.w 5
0001F412 0000 0000                  		dc.l Nem_Eggman		; Eggman main patterns
0001F416 8000                       		dc.w $8000
0001F418 0000 0000                  		dc.l Nem_Weapons	; Eggman's weapons
0001F41C 8D80                       		dc.w $8D80
0001F41E 0000 0000                  		dc.l Nem_Prison		; prison capsule
0001F422 93A0                       		dc.w $93A0
0001F424 0000 0000                  		dc.l Nem_Bomb		; bomb enemy (gets overwritten)
0001F428 A300                       		dc.w $A300
0001F42A 0000 0000                  		dc.l Nem_SlzSpike	; spikeball (SLZ boss)
0001F42E A300                       		dc.w $A300
0001F430 0000 0000                  		dc.l Nem_Exhaust	; exhaust flame
0001F434 A540                       		dc.w $A540
0001F436                            ; ---------------------------------------------------------------------------
0001F436                            ; Pattern load cues - act 1/2 signpost
0001F436                            ; ---------------------------------------------------------------------------
0001F436 0002                       PLC_Signpost:	dc.w 2
0001F438 0000 0000                  		dc.l Nem_SignPost	; signpost
0001F43C D000                       		dc.w $D000
0001F43E 0000 0000                  		dc.l Nem_Bonus		; hidden bonus points
0001F442 96C0                       		dc.w $96C0
0001F444 0000 0000                  		dc.l Nem_BigFlash	; giant	ring flash effect
0001F448 8C40                       		dc.w $8C40
0001F44A                            ; ---------------------------------------------------------------------------
0001F44A                            ; Pattern load cues - beta special stage warp effect
0001F44A                            ; ---------------------------------------------------------------------------
0001F44A 0000                       PLC_Warp:	dc.w 0
0001F44C 0000 0000                  		dc.l Nem_Warp
0001F450 A820                       		dc.w $A820
0001F452                            ; ---------------------------------------------------------------------------
0001F452                            ; Pattern load cues - special stage
0001F452                            ; ---------------------------------------------------------------------------
0001F452 0010                       PLC_SpeStage:	dc.w $10
0001F454 0000 0000                  		dc.l Nem_SSBgCloud	; bubble and cloud background
0001F458 0000                       		dc.w 0
0001F45A 0000 0000                  		dc.l Nem_SSBgFish	; bird and fish	background
0001F45E 0A20                       		dc.w $A20
0001F460 0000 0000                  		dc.l Nem_SSWalls	; walls
0001F464 2840                       		dc.w $2840
0001F466 0000 0000                  		dc.l Nem_Bumper		; bumper
0001F46A 4760                       		dc.w $4760
0001F46C 0000 0000                  		dc.l Nem_SSGOAL		; GOAL block
0001F470 4A20                       		dc.w $4A20
0001F472 0000 0000                  		dc.l Nem_SSUpDown	; UP and DOWN blocks
0001F476 4C60                       		dc.w $4C60
0001F478 0000 0000                  		dc.l Nem_SSRBlock	; R block
0001F47C 5E00                       		dc.w $5E00
0001F47E 0000 0000                  		dc.l Nem_SS1UpBlock	; 1UP block
0001F482 6E00                       		dc.w $6E00
0001F484 0000 0000                  		dc.l Nem_SSEmStars	; emerald collection stars
0001F488 7E00                       		dc.w $7E00
0001F48A 0000 0000                  		dc.l Nem_SSRedWhite	; red and white	block
0001F48E 8E00                       		dc.w $8E00
0001F490 0000 0000                  		dc.l Nem_SSGhost	; ghost	block
0001F494 9E00                       		dc.w $9E00
0001F496 0000 0000                  		dc.l Nem_SSWBlock	; W block
0001F49A AE00                       		dc.w $AE00
0001F49C 0000 0000                  		dc.l Nem_SSGlass	; glass	block
0001F4A0 BE00                       		dc.w $BE00
0001F4A2 0000 0000                  		dc.l Nem_SSEmerald	; emeralds
0001F4A6 EE00                       		dc.w $EE00
0001F4A8 0000 0000                  		dc.l Nem_SSZone1	; ZONE 1 block
0001F4AC F2E0                       		dc.w $F2E0
0001F4AE 0000 0000                  		dc.l Nem_SSZone2	; ZONE 2 block
0001F4B2 F400                       		dc.w $F400
0001F4B4 0000 0000                  		dc.l Nem_SSZone3	; ZONE 3 block
0001F4B8 F520                       		dc.w $F520
0001F4BA 0000 0000                  		dc.l Nem_SSZone4	; ZONE 4 block
0001F4BE F2E0                       		dc.w $F2E0
0001F4C0 0000 0000                  		dc.l Nem_SSZone5	; ZONE 5 block
0001F4C4 F400                       		dc.w $F400
0001F4C6 0000 0000                  		dc.l Nem_SSZone6	; ZONE 6 block
0001F4CA F520                       		dc.w $F520
0001F4CC                            ; ---------------------------------------------------------------------------
0001F4CC                            ; Pattern load cues - GHZ animals
0001F4CC                            ; ---------------------------------------------------------------------------
0001F4CC 0001                       PLC_GHZAnimals:	dc.w 1
0001F4CE 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001F4D2 B000                       		dc.w $B000
0001F4D4 0000 0000                  		dc.l Nem_Flicky		; flicky
0001F4D8 B240                       		dc.w $B240
0001F4DA                            ; ---------------------------------------------------------------------------
0001F4DA                            ; Pattern load cues - LZ animals
0001F4DA                            ; ---------------------------------------------------------------------------
0001F4DA 0001                       PLC_LZAnimals:	dc.w 1
0001F4DC 0000 0000                  		dc.l Nem_BlackBird	; blackbird
0001F4E0 B000                       		dc.w $B000
0001F4E2 0000 0000                  		dc.l Nem_Seal		; seal
0001F4E6 B240                       		dc.w $B240
0001F4E8                            ; ---------------------------------------------------------------------------
0001F4E8                            ; Pattern load cues - MZ animals
0001F4E8                            ; ---------------------------------------------------------------------------
0001F4E8 0001                       PLC_MZAnimals:	dc.w 1
0001F4EA 0000 0000                  		dc.l Nem_Squirrel	; squirrel
0001F4EE B000                       		dc.w $B000
0001F4F0 0000 0000                  		dc.l Nem_Seal		; seal
0001F4F4 B240                       		dc.w $B240
0001F4F6                            ; ---------------------------------------------------------------------------
0001F4F6                            ; Pattern load cues - SLZ animals
0001F4F6                            ; ---------------------------------------------------------------------------
0001F4F6 0001                       PLC_SLZAnimals:	dc.w 1
0001F4F8 0000 0000                  		dc.l Nem_Pig		; pig
0001F4FC B000                       		dc.w $B000
0001F4FE 0000 0000                  		dc.l Nem_Flicky		; flicky
0001F502 B240                       		dc.w $B240
0001F504                            ; ---------------------------------------------------------------------------
0001F504                            ; Pattern load cues - SYZ animals
0001F504                            ; ---------------------------------------------------------------------------
0001F504 0001                       PLC_SYZAnimals:	dc.w 1
0001F506 0000 0000                  		dc.l Nem_Pig		; pig
0001F50A B000                       		dc.w $B000
0001F50C 0000 0000                  		dc.l Nem_Chicken	; chicken
0001F510 B240                       		dc.w $B240
0001F512                            ; ---------------------------------------------------------------------------
0001F512                            ; Pattern load cues - SBZ animals
0001F512                            ; ---------------------------------------------------------------------------
0001F512 0001                       PLC_SBZAnimals:	dc.w 1
0001F514 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001F518 B000                       		dc.w $B000
0001F51A 0000 0000                  		dc.l Nem_Chicken	; chicken
0001F51E B240                       		dc.w $B240
0001F520                            ; ---------------------------------------------------------------------------
0001F520                            ; Pattern load cues - special stage results screen
0001F520                            ; ---------------------------------------------------------------------------
0001F520 0001                       PLC_SpeStResult:dc.w 1
0001F522 0000 0000                  		dc.l Nem_ResultEm	; emeralds
0001F526 A820                       		dc.w $A820
0001F528 0000 0000                  		dc.l Nem_MiniSonic	; mini Sonic
0001F52C AA20                       		dc.w $AA20
0001F52E                            ; ---------------------------------------------------------------------------
0001F52E                            ; Pattern load cues - ending sequence
0001F52E                            ; ---------------------------------------------------------------------------
0001F52E 000E                       PLC_Ending:	dc.w $E
0001F530 0000 0000                  		dc.l Nem_GHZ_1st	; GHZ main patterns
0001F534 0000                       		dc.w 0
0001F536 0000 0000                  		dc.l Nem_GHZ_2nd	; GHZ secondary	patterns
0001F53A 39A0                       		dc.w $39A0
0001F53C 0000 0000                  		dc.l Nem_Stalk		; flower stalk
0001F540 6B00                       		dc.w $6B00
0001F542 0000 0000                  		dc.l Nem_EndFlower	; flowers
0001F546 7400                       		dc.w $7400
0001F548 0000 0000                  		dc.l Nem_EndEm		; emeralds
0001F54C 78A0                       		dc.w $78A0
0001F54E 0000 0000                  		dc.l Nem_EndSonic	; Sonic
0001F552 7C20                       		dc.w $7C20
0001F554 0000 0000                  		dc.l Nem_EndEggman	; Eggman's death (unused)
0001F558 A480                       		dc.w $A480
0001F55A 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001F55E AA60                       		dc.w $AA60
0001F560 0000 0000                  		dc.l Nem_Chicken	; chicken
0001F564 ACA0                       		dc.w $ACA0
0001F566 0000 0000                  		dc.l Nem_BlackBird	; blackbird
0001F56A AE60                       		dc.w $AE60
0001F56C 0000 0000                  		dc.l Nem_Seal		; seal
0001F570 B0A0                       		dc.w $B0A0
0001F572 0000 0000                  		dc.l Nem_Pig		; pig
0001F576 B260                       		dc.w $B260
0001F578 0000 0000                  		dc.l Nem_Flicky		; flicky
0001F57C B4A0                       		dc.w $B4A0
0001F57E 0000 0000                  		dc.l Nem_Squirrel	; squirrel
0001F582 B660                       		dc.w $B660
0001F584 0000 0000                  		dc.l Nem_EndStH		; "SONIC THE HEDGEHOG"
0001F588 B8A0                       		dc.w $B8A0
0001F58A                            ; ---------------------------------------------------------------------------
0001F58A                            ; Pattern load cues - "TRY AGAIN" and "END" screens
0001F58A                            ; ---------------------------------------------------------------------------
0001F58A 0002                       PLC_TryAgain:	dc.w 2
0001F58C 0000 0000                  		dc.l Nem_EndEm		; emeralds
0001F590 78A0                       		dc.w $78A0
0001F592 0000 0000                  		dc.l Nem_TryAgain	; Eggman
0001F596 7C20                       		dc.w $7C20
0001F598 0000 0000                  		dc.l Nem_CreditText	; credits alphabet
0001F59C B400                       		dc.w $B400
0001F59E                            ; ---------------------------------------------------------------------------
0001F59E                            ; Pattern load cues - Eggman on SBZ 2
0001F59E                            ; ---------------------------------------------------------------------------
0001F59E 0002                       PLC_EggmanSBZ2:	dc.w 2
0001F5A0 0000 0000                  		dc.l Nem_SbzBlock	; block
0001F5A4 A300                       		dc.w $A300
0001F5A6 0000 0000                  		dc.l Nem_Sbz2Eggman	; Eggman
0001F5AA 8000                       		dc.w $8000
0001F5AC 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001F5B0 9400                       		dc.w $9400
0001F5B2                            ; ---------------------------------------------------------------------------
0001F5B2                            ; Pattern load cues - final boss
0001F5B2                            ; ---------------------------------------------------------------------------
0001F5B2 0004                       PLC_FZBoss:	dc.w 4
0001F5B4 0000 0000                  		dc.l Nem_FzEggman	; Eggman after boss
0001F5B8 7400                       		dc.w $7400
0001F5BA 0000 0000                  		dc.l Nem_FzBoss		; FZ boss
0001F5BE 6000                       		dc.w $6000
0001F5C0 0000 0000                  		dc.l Nem_Eggman		; Eggman main patterns
0001F5C4 8000                       		dc.w $8000
0001F5C6 0000 0000                  		dc.l Nem_Sbz2Eggman	; Eggman without ship
0001F5CA 8E00                       		dc.w $8E00
0001F5CC 0000 0000                  		dc.l Nem_Exhaust	; exhaust flame
0001F5D0 A540                       		dc.w $A540
0001F5D2                            		even
0001F5D2                            		even
0001F5D2                            
0001F5D2                            		incbin	misc\padding.bin
0001F6C0                            		even
0001F6C0                            Nem_SegaLogo:	incbin	artnem\segalogo.bin	; large Sega logo
0001FB22                            		even
0001FB22                            Eni_SegaLogo:	incbin	mapeni\segalogo.bin	; large Sega logo (mappings)
0001FC1A                            		even
0001FC1A                            Eni_Title:	incbin	mapeni\titlescr.bin	; title screen foreground (mappings)
0001FD2E                            		even
0001FD2E                            Nem_TitleFg:	incbin	artnem\titlefor.bin	; title screen foreground
00020D3A                            		even
00020D3A                            Nem_TitleSonic:	incbin	artnem\titleson.bin	; Sonic on title screen
00022708                            		even
00022708                            Nem_TitleTM:	incbin	artnem\titletm.bin	; TM on title screen
0002273C                            		even
0002273C                            Eni_JapNames:	incbin	mapeni\japcreds.bin	; Japanese credits (mappings)
000227FA                            		even
000227FA                            Nem_JapNames:	incbin	artnem\japcreds.bin	; Japanese credits
00022CA2                            		even
00022CA2                            Kos_Menu_art:   incbin  artkos/menuslctr.bin
00022DDE                            		 even
00022DDE                            Map_MenuS4: 	include  "_maps/menuslctr.asm"
00022DDE                            ; ================================================================================
00022DDE                            ; Sprite Mappings - generated by Flex 2 Sun Jan 09 2022 00:50:45 GMT-0600 (Central Standard Time)
00022DDE                            ; ================================================================================
00022DDE                            
00022DDE                            DATAQM9VZSSBLEK:
00022DDE 0000                       	dc.w DATAQM9VZSSBLEK_0-DATAQM9VZSSBLEK
00022DE0 01                         DATAQM9VZSSBLEK_0: dc.b $1
00022DE1 F805 0014 F8               	dc.b $F8, $5, $0, $14, $F8
00022DE6                            	even
00022DE6                            	even
00022DE6                            ; ---------------------------------------------------------------------------
00022DE6                            ; Sprite mappings - Sonic
00022DE6                            ; ---------------------------------------------------------------------------
00022DE6                            Map_Sonic:
00022DE6                            	include "_maps\Sonic.asm"
00022DE6                            ; --------------------------------------------------------------------------------
00022DE6                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00022DE6                            ; --------------------------------------------------------------------------------
00022DE6                            
00022DE6                            SME_N6hqJ:	
00022DE6 0000 0000                  		dc.w SME_N6hqJ_1AC-SME_N6hqJ, SME_N6hqJ_1AD-SME_N6hqJ	
00022DEA 0000 0000                  		dc.w SME_N6hqJ_1C2-SME_N6hqJ, SME_N6hqJ_1CD-SME_N6hqJ	
00022DEE 0000 0000                  		dc.w SME_N6hqJ_1E2-SME_N6hqJ, SME_N6hqJ_1F7-SME_N6hqJ	
00022DF2 0000 0000                  		dc.w SME_N6hqJ_211-SME_N6hqJ, SME_N6hqJ_221-SME_N6hqJ	
00022DF6 0000 0000                  		dc.w SME_N6hqJ_22C-SME_N6hqJ, SME_N6hqJ_237-SME_N6hqJ	
00022DFA 0000 0000                  		dc.w SME_N6hqJ_242-SME_N6hqJ, SME_N6hqJ_24D-SME_N6hqJ	
00022DFE 0000 0000                  		dc.w SME_N6hqJ_262-SME_N6hqJ, SME_N6hqJ_277-SME_N6hqJ	
00022E02 0000 0000                  		dc.w SME_N6hqJ_287-SME_N6hqJ, SME_N6hqJ_29C-SME_N6hqJ	
00022E06 0000 0000                  		dc.w SME_N6hqJ_2AC-SME_N6hqJ, SME_N6hqJ_2B7-SME_N6hqJ	
00022E0A 0000 0000                  		dc.w SME_N6hqJ_2C7-SME_N6hqJ, SME_N6hqJ_2DC-SME_N6hqJ	
00022E0E 0000 0000                  		dc.w SME_N6hqJ_2EC-SME_N6hqJ, SME_N6hqJ_2F7-SME_N6hqJ	
00022E12 0000 0000                  		dc.w SME_N6hqJ_30C-SME_N6hqJ, SME_N6hqJ_326-SME_N6hqJ	
00022E16 0000 0000                  		dc.w SME_N6hqJ_33B-SME_N6hqJ, SME_N6hqJ_350-SME_N6hqJ	
00022E1A 0000 0000                  		dc.w SME_N6hqJ_36A-SME_N6hqJ, SME_N6hqJ_384-SME_N6hqJ	
00022E1E 0000 0000                  		dc.w SME_N6hqJ_399-SME_N6hqJ, SME_N6hqJ_3B3-SME_N6hqJ	
00022E22 0000 0000                  		dc.w SME_N6hqJ_3C3-SME_N6hqJ, SME_N6hqJ_3D3-SME_N6hqJ	
00022E26 0000 0000                  		dc.w SME_N6hqJ_3E3-SME_N6hqJ, SME_N6hqJ_3EE-SME_N6hqJ	
00022E2A 0000 0000                  		dc.w SME_N6hqJ_3FE-SME_N6hqJ, SME_N6hqJ_40E-SME_N6hqJ	
00022E2E 0000 0000                  		dc.w SME_N6hqJ_41E-SME_N6hqJ, SME_N6hqJ_429-SME_N6hqJ	
00022E32 0000 0000                  		dc.w SME_N6hqJ_43E-SME_N6hqJ, SME_N6hqJ_458-SME_N6hqJ	
00022E36 0000 0000                  		dc.w SME_N6hqJ_46D-SME_N6hqJ, SME_N6hqJ_482-SME_N6hqJ	
00022E3A 0000 0000                  		dc.w SME_N6hqJ_497-SME_N6hqJ, SME_N6hqJ_4B1-SME_N6hqJ	
00022E3E 0000 0000                  		dc.w SME_N6hqJ_4C6-SME_N6hqJ, SME_N6hqJ_4DB-SME_N6hqJ	
00022E42 0000 0000                  		dc.w SME_N6hqJ_4E6-SME_N6hqJ, SME_N6hqJ_4F1-SME_N6hqJ	
00022E46 0000 0000                  		dc.w SME_N6hqJ_4FC-SME_N6hqJ, SME_N6hqJ_507-SME_N6hqJ	
00022E4A 0000 0000                  		dc.w SME_N6hqJ_51C-SME_N6hqJ, SME_N6hqJ_52C-SME_N6hqJ	
00022E4E 0000 0000                  		dc.w SME_N6hqJ_541-SME_N6hqJ, SME_N6hqJ_551-SME_N6hqJ	
00022E52 0000 0000                  		dc.w SME_N6hqJ_55C-SME_N6hqJ, SME_N6hqJ_567-SME_N6hqJ	
00022E56 0000 0000                  		dc.w SME_N6hqJ_572-SME_N6hqJ, SME_N6hqJ_57D-SME_N6hqJ	
00022E5A 0000 0000                  		dc.w SME_N6hqJ_58D-SME_N6hqJ, SME_N6hqJ_598-SME_N6hqJ	
00022E5E 0000 0000                  		dc.w SME_N6hqJ_5A8-SME_N6hqJ, SME_N6hqJ_5B3-SME_N6hqJ	
00022E62 0000 0000                  		dc.w SME_N6hqJ_5B9-SME_N6hqJ, SME_N6hqJ_5BF-SME_N6hqJ	
00022E66 0000 0000                  		dc.w SME_N6hqJ_5C5-SME_N6hqJ, SME_N6hqJ_5CB-SME_N6hqJ	
00022E6A 0000 0000                  		dc.w SME_N6hqJ_5D1-SME_N6hqJ, SME_N6hqJ_5D7-SME_N6hqJ	
00022E6E 0000 0000                  		dc.w SME_N6hqJ_5DD-SME_N6hqJ, SME_N6hqJ_5E3-SME_N6hqJ	
00022E72 0000 0000                  		dc.w SME_N6hqJ_5E9-SME_N6hqJ, SME_N6hqJ_5EF-SME_N6hqJ	
00022E76 0000 0000                  		dc.w SME_N6hqJ_5F5-SME_N6hqJ, SME_N6hqJ_605-SME_N6hqJ	
00022E7A 0000 0000                  		dc.w SME_N6hqJ_615-SME_N6hqJ, SME_N6hqJ_625-SME_N6hqJ	
00022E7E 0000 0000                  		dc.w SME_N6hqJ_635-SME_N6hqJ, SME_N6hqJ_63B-SME_N6hqJ	
00022E82 0000 0000                  		dc.w SME_N6hqJ_641-SME_N6hqJ, SME_N6hqJ_64C-SME_N6hqJ	
00022E86 0000 0000                  		dc.w SME_N6hqJ_657-SME_N6hqJ, SME_N6hqJ_667-SME_N6hqJ	
00022E8A 0000 0000                  		dc.w SME_N6hqJ_677-SME_N6hqJ, SME_N6hqJ_682-SME_N6hqJ	
00022E8E 0000 0000                  		dc.w SME_N6hqJ_68D-SME_N6hqJ, SME_N6hqJ_69D-SME_N6hqJ	
00022E92 0000 0000                  		dc.w SME_N6hqJ_6B2-SME_N6hqJ, SME_N6hqJ_6C2-SME_N6hqJ	
00022E96 0000 0000                  		dc.w SME_N6hqJ_6D2-SME_N6hqJ, SME_N6hqJ_6E2-SME_N6hqJ	
00022E9A 0000 0000                  		dc.w SME_N6hqJ_6F2-SME_N6hqJ, SME_N6hqJ_702-SME_N6hqJ	
00022E9E 0000 0000                  		dc.w SME_N6hqJ_70D-SME_N6hqJ, SME_N6hqJ_722-SME_N6hqJ	
00022EA2 0000 0000                  		dc.w SME_N6hqJ_737-SME_N6hqJ, SME_N6hqJ_747-SME_N6hqJ	
00022EA6 0000 0000                  		dc.w SME_N6hqJ_757-SME_N6hqJ, SME_N6hqJ_767-SME_N6hqJ	
00022EAA 0000 0000                  		dc.w SME_N6hqJ_772-SME_N6hqJ, SME_N6hqJ_778-SME_N6hqJ	
00022EAE 0000 0000                  		dc.w SME_N6hqJ_783-SME_N6hqJ, SME_N6hqJ_793-SME_N6hqJ	
00022EB2 0000 0000                  		dc.w SME_N6hqJ_7A3-SME_N6hqJ, SME_N6hqJ_7B3-SME_N6hqJ	
00022EB6 0000 0000                  		dc.w SME_N6hqJ_7BE-SME_N6hqJ, SME_N6hqJ_7C9-SME_N6hqJ	
00022EBA 0000 0000                  		dc.w SME_N6hqJ_7D9-SME_N6hqJ, SME_N6hqJ_7E4-SME_N6hqJ	
00022EBE 0000 0000                  		dc.w SME_N6hqJ_7F4-SME_N6hqJ, SME_N6hqJ_804-SME_N6hqJ	
00022EC2 0000 0000                  		dc.w SME_N6hqJ_80A-SME_N6hqJ, SME_N6hqJ_81A-SME_N6hqJ	
00022EC6 0000 0000                  		dc.w SME_N6hqJ_82A-SME_N6hqJ, SME_N6hqJ_844-SME_N6hqJ	
00022ECA 0000 0000                  		dc.w SME_N6hqJ_85E-SME_N6hqJ, SME_N6hqJ_869-SME_N6hqJ	
00022ECE 0000 0000                  		dc.w SME_N6hqJ_874-SME_N6hqJ, SME_N6hqJ_87F-SME_N6hqJ	
00022ED2 0000 0000                  		dc.w SME_N6hqJ_88F-SME_N6hqJ, SME_N6hqJ_8A4-SME_N6hqJ	
00022ED6 0000 0000                  		dc.w SME_N6hqJ_8B4-SME_N6hqJ, SME_N6hqJ_8BF-SME_N6hqJ	
00022EDA 0000 0000                  		dc.w SME_N6hqJ_8CF-SME_N6hqJ, SME_N6hqJ_8E4-SME_N6hqJ	
00022EDE 0000 0000                  		dc.w SME_N6hqJ_8F4-SME_N6hqJ, SME_N6hqJ_8FF-SME_N6hqJ	
00022EE2 0000 0000                  		dc.w SME_N6hqJ_914-SME_N6hqJ, SME_N6hqJ_92E-SME_N6hqJ	
00022EE6 0000 0000                  		dc.w SME_N6hqJ_948-SME_N6hqJ, SME_N6hqJ_962-SME_N6hqJ	
00022EEA 0000 0000                  		dc.w SME_N6hqJ_981-SME_N6hqJ, SME_N6hqJ_9A0-SME_N6hqJ	
00022EEE 0000 0000                  		dc.w SME_N6hqJ_9BA-SME_N6hqJ, SME_N6hqJ_9D4-SME_N6hqJ	
00022EF2 0000 0000                  		dc.w SME_N6hqJ_9E4-SME_N6hqJ, SME_N6hqJ_9F4-SME_N6hqJ	
00022EF6 0000 0000                  		dc.w SME_N6hqJ_A04-SME_N6hqJ, SME_N6hqJ_A0F-SME_N6hqJ	
00022EFA 0000 0000                  		dc.w SME_N6hqJ_A1F-SME_N6hqJ, SME_N6hqJ_A2F-SME_N6hqJ	
00022EFE 0000 0000                  		dc.w SME_N6hqJ_A3F-SME_N6hqJ, SME_N6hqJ_A4A-SME_N6hqJ	
00022F02 0000 0000                  		dc.w SME_N6hqJ_A5F-SME_N6hqJ, SME_N6hqJ_A79-SME_N6hqJ	
00022F06 0000 0000                  		dc.w SME_N6hqJ_A8E-SME_N6hqJ, SME_N6hqJ_AA3-SME_N6hqJ	
00022F0A 0000 0000                  		dc.w SME_N6hqJ_AB8-SME_N6hqJ, SME_N6hqJ_AD2-SME_N6hqJ	
00022F0E 0000 0000                  		dc.w SME_N6hqJ_AE7-SME_N6hqJ, SME_N6hqJ_AFC-SME_N6hqJ	
00022F12 0000 0000                  		dc.w SME_N6hqJ_B0C-SME_N6hqJ, SME_N6hqJ_B21-SME_N6hqJ	
00022F16 0000 0000                  		dc.w SME_N6hqJ_B31-SME_N6hqJ, SME_N6hqJ_B3C-SME_N6hqJ	
00022F1A 0000 0000                  		dc.w SME_N6hqJ_B4C-SME_N6hqJ, SME_N6hqJ_B61-SME_N6hqJ	
00022F1E 0000 0000                  		dc.w SME_N6hqJ_B71-SME_N6hqJ, SME_N6hqJ_B7C-SME_N6hqJ	
00022F22 0000 0000                  		dc.w SME_N6hqJ_B96-SME_N6hqJ, SME_N6hqJ_BB5-SME_N6hqJ	
00022F26 0000 0000                  		dc.w SME_N6hqJ_BCF-SME_N6hqJ, SME_N6hqJ_BE9-SME_N6hqJ	
00022F2A 0000 0000                  		dc.w SME_N6hqJ_C08-SME_N6hqJ, SME_N6hqJ_C27-SME_N6hqJ	
00022F2E 0000 0000                  		dc.w SME_N6hqJ_C41-SME_N6hqJ, SME_N6hqJ_C60-SME_N6hqJ	
00022F32 0000 0000                  		dc.w SME_N6hqJ_C70-SME_N6hqJ, SME_N6hqJ_C80-SME_N6hqJ	
00022F36 0000 0000                  		dc.w SME_N6hqJ_C90-SME_N6hqJ, SME_N6hqJ_C9B-SME_N6hqJ	
00022F3A 0000 0000                  		dc.w SME_N6hqJ_CAB-SME_N6hqJ, SME_N6hqJ_CBB-SME_N6hqJ	
00022F3E 0000 0000                  		dc.w SME_N6hqJ_CCB-SME_N6hqJ, SME_N6hqJ_CD6-SME_N6hqJ	
00022F42 0000 0000                  		dc.w SME_N6hqJ_CEB-SME_N6hqJ, SME_N6hqJ_D05-SME_N6hqJ	
00022F46 0000 0000                  		dc.w SME_N6hqJ_D1F-SME_N6hqJ, SME_N6hqJ_D34-SME_N6hqJ	
00022F4A 0000 0000                  		dc.w SME_N6hqJ_D49-SME_N6hqJ, SME_N6hqJ_D63-SME_N6hqJ	
00022F4E 0000 0000                  		dc.w SME_N6hqJ_D7D-SME_N6hqJ, SME_N6hqJ_D97-SME_N6hqJ	
00022F52 0000 0000                  		dc.w SME_N6hqJ_DAC-SME_N6hqJ, SME_N6hqJ_DC1-SME_N6hqJ	
00022F56 0000 0000                  		dc.w SME_N6hqJ_DD6-SME_N6hqJ, SME_N6hqJ_DF0-SME_N6hqJ	
00022F5A 0000 0000                  		dc.w SME_N6hqJ_E05-SME_N6hqJ, SME_N6hqJ_E1A-SME_N6hqJ	
00022F5E 0000 0000                  		dc.w SME_N6hqJ_E2F-SME_N6hqJ, SME_N6hqJ_E49-SME_N6hqJ	
00022F62 0000 0000                  		dc.w SME_N6hqJ_E5E-SME_N6hqJ, SME_N6hqJ_E73-SME_N6hqJ	
00022F66 0000 0000                  		dc.w SME_N6hqJ_E88-SME_N6hqJ, SME_N6hqJ_E9D-SME_N6hqJ	
00022F6A 0000 0000                  		dc.w SME_N6hqJ_EA8-SME_N6hqJ, SME_N6hqJ_EB8-SME_N6hqJ	
00022F6E 0000 0000                  		dc.w SME_N6hqJ_EC8-SME_N6hqJ, SME_N6hqJ_ED8-SME_N6hqJ	
00022F72 0000 0000                  		dc.w SME_N6hqJ_EE8-SME_N6hqJ, SME_N6hqJ_EF8-SME_N6hqJ	
00022F76 0000 0000                  		dc.w SME_N6hqJ_F08-SME_N6hqJ, SME_N6hqJ_F18-SME_N6hqJ	
00022F7A 0000 0000                  		dc.w SME_N6hqJ_F28-SME_N6hqJ, SME_N6hqJ_F38-SME_N6hqJ	
00022F7E 0000 0000                  		dc.w SME_N6hqJ_F52-SME_N6hqJ, SME_N6hqJ_F67-SME_N6hqJ	
00022F82 0000 0000                  		dc.w SME_N6hqJ_F7C-SME_N6hqJ, SME_N6hqJ_F91-SME_N6hqJ	
00022F86 0000 0000                  		dc.w SME_N6hqJ_FA1-SME_N6hqJ, SME_N6hqJ_FB1-SME_N6hqJ	
00022F8A 0000 0000                  		dc.w SME_N6hqJ_FC1-SME_N6hqJ, SME_N6hqJ_FD6-SME_N6hqJ	
00022F8E 0000 0000                  		dc.w SME_N6hqJ_FEB-SME_N6hqJ, SME_N6hqJ_1000-SME_N6hqJ	
00022F92 00                         SME_N6hqJ_1AC:	dc.b 0	
00022F93 04                         SME_N6hqJ_1AD:	dc.b 4	
00022F94 E405 0000 F8               		dc.b $E4, 5, 0, 0, $F8	
00022F99 EC03 0004 F0               		dc.b $EC, 3, 0, 4, $F0	
00022F9E F409 0008 F8               		dc.b $F4, 9, 0, 8, $F8	
00022FA3 0409 000E F8               		dc.b 4, 9, 0, $E, $F8	
00022FA8 02                         SME_N6hqJ_1C2:	dc.b 2	
00022FA9 EC0B 0000 F0               		dc.b $EC, $B, 0, 0, $F0	
00022FAE 0C09 000C F8               		dc.b $C, 9, 0, $C, $F8	
00022FB3 04                         SME_N6hqJ_1CD:	dc.b 4	
00022FB4 EC03 0000 F0               		dc.b $EC, 3, 0, 0, $F0	
00022FB9 EC05 0004 F8               		dc.b $EC, 5, 0, 4, $F8	
00022FBE FC05 0008 F8               		dc.b $FC, 5, 0, 8, $F8	
00022FC3 0C09 000C F8               		dc.b $C, 9, 0, $C, $F8	
00022FC8 04                         SME_N6hqJ_1E2:	dc.b 4	
00022FC9 EC03 0000 F0               		dc.b $EC, 3, 0, 0, $F0	
00022FCE EC05 0004 F8               		dc.b $EC, 5, 0, 4, $F8	
00022FD3 FC05 0008 F8               		dc.b $FC, 5, 0, 8, $F8	
00022FD8 0C09 000C F8               		dc.b $C, 9, 0, $C, $F8	
00022FDD 05                         SME_N6hqJ_1F7:	dc.b 5	
00022FDE EC03 0000 F0               		dc.b $EC, 3, 0, 0, $F0	
00022FE3 EC05 0004 F8               		dc.b $EC, 5, 0, 4, $F8	
00022FE8 FC05 0008 F8               		dc.b $FC, 5, 0, 8, $F8	
00022FED 0C01 000C F8               		dc.b $C, 1, 0, $C, $F8	
00022FF2 0C05 000E 00               		dc.b $C, 5, 0, $E, 0	
00022FF7 03                         SME_N6hqJ_211:	dc.b 3	
00022FF8 EC03 0000 F0               		dc.b $EC, 3, 0, 0, $F0	
00022FFD EC07 0004 F8               		dc.b $EC, 7, 0, 4, $F8	
00023002 0C09 000C F8               		dc.b $C, 9, 0, $C, $F8	
00023007 02                         SME_N6hqJ_221:	dc.b 2	
00023008 F40B 0000 F0               		dc.b $F4, $B, 0, 0, $F0	
0002300D 0401 000C 08               		dc.b 4, 1, 0, $C, 8	
00023012 02                         SME_N6hqJ_22C:	dc.b 2	
00023013 F40B 0000 E8               		dc.b $F4, $B, 0, 0, $E8	
00023018 0405 000C 00               		dc.b 4, 5, 0, $C, 0	
0002301D 02                         SME_N6hqJ_237:	dc.b 2	
0002301E F40B 0000 E8               		dc.b $F4, $B, 0, 0, $E8	
00023023 0405 000C 00               		dc.b 4, 5, 0, $C, 0	
00023028 02                         SME_N6hqJ_242:	dc.b 2	
00023029 E40B 0000 F0               		dc.b $E4, $B, 0, 0, $F0	
0002302E 040D 000C F0               		dc.b 4, $D, 0, $C, $F0	
00023033 04                         SME_N6hqJ_24D:	dc.b 4	
00023034 E405 0000 F8               		dc.b $E4, 5, 0, 0, $F8	
00023039 EC03 0004 F0               		dc.b $EC, 3, 0, 4, $F0	
0002303E F409 0008 F8               		dc.b $F4, 9, 0, 8, $F8	
00023043 0409 000E F8               		dc.b 4, 9, 0, $E, $F8	
00023048 04                         SME_N6hqJ_262:	dc.b 4	
00023049 EC03 0000 F0               		dc.b $EC, 3, 0, 0, $F0	
0002304E E405 0004 F8               		dc.b $E4, 5, 0, 4, $F8	
00023053 F405 0008 F8               		dc.b $F4, 5, 0, 8, $F8	
00023058 0409 000C F8               		dc.b 4, 9, 0, $C, $F8	
0002305D 03                         SME_N6hqJ_277:	dc.b 3	
0002305E EB0D 0000 EE               		dc.b $EB, $D, 0, 0, $EE	
00023063 0301 0008 EC               		dc.b 3, 1, 0, 8, $EC	
00023068 FB0F 000A F4               		dc.b $FB, $F, 0, $A, $F4	
0002306D 04                         SME_N6hqJ_287:	dc.b 4	
0002306E EC0D 0000 EE               		dc.b $EC, $D, 0, 0, $EE	
00023073 0401 0008 EC               		dc.b 4, 1, 0, 8, $EC	
00023078 FC0B 000A F4               		dc.b $FC, $B, 0, $A, $F4	
0002307D 0401 0016 0C               		dc.b 4, 1, 0, $16, $C	
00023082 03                         SME_N6hqJ_29C:	dc.b 3	
00023083 ED0D 0000 ED               		dc.b $ED, $D, 0, 0, $ED	
00023088 FD09 0008 F4               		dc.b $FD, 9, 0, 8, $F4	
0002308D 0D05 000E F7               		dc.b $D, 5, 0, $E, $F7	
00023092 02                         SME_N6hqJ_2AC:	dc.b 2	
00023093 EC09 0000 F4               		dc.b $EC, 9, 0, 0, $F4	
00023098 FC0F 0006 EE               		dc.b $FC, $F, 0, 6, $EE	
0002309D 03                         SME_N6hqJ_2B7:	dc.b 3	
0002309E EB09 0000 F4               		dc.b $EB, 9, 0, 0, $F4	
000230A3 FB0F 0006 EE               		dc.b $FB, $F, 0, 6, $EE	
000230A8 FB01 0016 0E               		dc.b $FB, 1, 0, $16, $E	
000230AD 04                         SME_N6hqJ_2C7:	dc.b 4	
000230AE EC09 0000 F4               		dc.b $EC, 9, 0, 0, $F4	
000230B3 0401 0006 EC               		dc.b 4, 1, 0, 6, $EC	
000230B8 FC0B 0008 F4               		dc.b $FC, $B, 0, 8, $F4	
000230BD 0401 0014 0C               		dc.b 4, 1, 0, $14, $C	
000230C2 03                         SME_N6hqJ_2DC:	dc.b 3	
000230C3 ED0D 0000 ED               		dc.b $ED, $D, 0, 0, $ED	
000230C8 FD09 0008 F4               		dc.b $FD, 9, 0, 8, $F4	
000230CD 0D05 000E F7               		dc.b $D, 5, 0, $E, $F7	
000230D2 02                         SME_N6hqJ_2EC:	dc.b 2	
000230D3 EC0D 0000 EE               		dc.b $EC, $D, 0, 0, $EE	
000230D8 FC0B 0008 F3               		dc.b $FC, $B, 0, 8, $F3	
000230DD 04                         SME_N6hqJ_2F7:	dc.b 4	
000230DE EB09 0000 EA               		dc.b $EB, 9, 0, 0, $EA	
000230E3 FB09 0006 EA               		dc.b $FB, 9, 0, 6, $EA	
000230E8 F305 000C 02               		dc.b $F3, 5, 0, $C, 2	
000230ED 0B01 0010 FA               		dc.b $B, 1, 0, $10, $FA	
000230F2 05                         SME_N6hqJ_30C:	dc.b 5	
000230F3 EC09 0000 EB               		dc.b $EC, 9, 0, 0, $EB	
000230F8 EC01 0006 03               		dc.b $EC, 1, 0, 6, 3	
000230FD FC0D 0008 EB               		dc.b $FC, $D, 0, 8, $EB	
00023102 FC05 0010 0B               		dc.b $FC, 5, 0, $10, $B	
00023107 0C01 0014 FB               		dc.b $C, 1, 0, $14, $FB	
0002310C 04                         SME_N6hqJ_326:	dc.b 4	
0002310D ED07 0000 EC               		dc.b $ED, 7, 0, 0, $EC	
00023112 ED03 0008 FC               		dc.b $ED, 3, 0, 8, $FC	
00023117 F501 000C 04               		dc.b $F5, 1, 0, $C, 4	
0002311C 0505 000E 04               		dc.b 5, 5, 0, $E, 4	
00023121 04                         SME_N6hqJ_33B:	dc.b 4	
00023122 EC09 0000 EB               		dc.b $EC, 9, 0, 0, $EB	
00023127 EC01 0006 03               		dc.b $EC, 1, 0, 6, 3	
0002312C FC05 0008 EB               		dc.b $FC, 5, 0, 8, $EB	
00023131 FC0B 000C FB               		dc.b $FC, $B, 0, $C, $FB	
00023136 05                         SME_N6hqJ_350:	dc.b 5	
00023137 EB09 0000 EA               		dc.b $EB, 9, 0, 0, $EA	
0002313C EB01 0006 02               		dc.b $EB, 1, 0, 6, 2	
00023141 FB0D 0008 EA               		dc.b $FB, $D, 0, 8, $EA	
00023146 F301 0010 0A               		dc.b $F3, 1, 0, $10, $A	
0002314B 0B05 0012 F2               		dc.b $B, 5, 0, $12, $F2	
00023150 05                         SME_N6hqJ_36A:	dc.b 5	
00023151 EC09 0000 EB               		dc.b $EC, 9, 0, 0, $EB	
00023156 EC01 0006 03               		dc.b $EC, 1, 0, 6, 3	
0002315B FC0D 0008 EB               		dc.b $FC, $D, 0, 8, $EB	
00023160 FA05 0010 0B               		dc.b $FA, 5, 0, $10, $B	
00023165 0C01 0014 FB               		dc.b $C, 1, 0, $14, $FB	
0002316A 04                         SME_N6hqJ_384:	dc.b 4	
0002316B ED07 0000 EC               		dc.b $ED, 7, 0, 0, $EC	
00023170 ED03 0008 FC               		dc.b $ED, 3, 0, 8, $FC	
00023175 F501 000C 04               		dc.b $F5, 1, 0, $C, 4	
0002317A 0505 000E 04               		dc.b 5, 5, 0, $E, 4	
0002317F 05                         SME_N6hqJ_399:	dc.b 5	
00023180 EC09 0000 EB               		dc.b $EC, 9, 0, 0, $EB	
00023185 FC09 0006 EB               		dc.b $FC, 9, 0, 6, $EB	
0002318A F401 000C 03               		dc.b $F4, 1, 0, $C, 3	
0002318F 0C01 000E FB               		dc.b $C, 1, 0, $E, $FB	
00023194 0405 0010 03               		dc.b 4, 5, 0, $10, 3	
00023199 03                         SME_N6hqJ_3B3:	dc.b 3	
0002319A F207 0000 EB               		dc.b $F2, 7, 0, 0, $EB	
0002319F EC0B 0008 FB               		dc.b $EC, $B, 0, 8, $FB	
000231A4 0C05 0014 03               		dc.b $C, 5, 0, $14, 3	
000231A9 03                         SME_N6hqJ_3C3:	dc.b 3	
000231AA F207 0000 EC               		dc.b $F2, 7, 0, 0, $EC	
000231AF EC0B 0008 FC               		dc.b $EC, $B, 0, 8, $FC	
000231B4 0C05 0014 04               		dc.b $C, 5, 0, $14, 4	
000231B9 03                         SME_N6hqJ_3D3:	dc.b 3	
000231BA F307 0000 ED               		dc.b $F3, 7, 0, 0, $ED	
000231BF F403 0008 FD               		dc.b $F4, 3, 0, 8, $FD	
000231C4 F905 000C 05               		dc.b $F9, 5, 0, $C, 5	
000231C9 02                         SME_N6hqJ_3E3:	dc.b 2	
000231CA F407 0000 EC               		dc.b $F4, 7, 0, 0, $EC	
000231CF F20B 0008 FC               		dc.b $F2, $B, 0, 8, $FC	
000231D4 03                         SME_N6hqJ_3EE:	dc.b 3	
000231D5 F407 0000 EB               		dc.b $F4, 7, 0, 0, $EB	
000231DA E305 0008 FB               		dc.b $E3, 5, 0, 8, $FB	
000231DF F30B 000C FB               		dc.b $F3, $B, 0, $C, $FB	
000231E4 03                         SME_N6hqJ_3FE:	dc.b 3	
000231E5 F407 0000 EC               		dc.b $F4, 7, 0, 0, $EC	
000231EA EC0B 0008 FC               		dc.b $EC, $B, 0, 8, $FC	
000231EF 0C05 0014 04               		dc.b $C, 5, 0, $14, 4	
000231F4 03                         SME_N6hqJ_40E:	dc.b 3	
000231F5 F307 0000 ED               		dc.b $F3, 7, 0, 0, $ED	
000231FA F403 0008 FD               		dc.b $F4, 3, 0, 8, $FD	
000231FF F905 000C 05               		dc.b $F9, 5, 0, $C, 5	
00023204 02                         SME_N6hqJ_41E:	dc.b 2	
00023205 F207 0000 EC               		dc.b $F2, 7, 0, 0, $EC	
0002320A F40B 0008 FC               		dc.b $F4, $B, 0, 8, $FC	
0002320F 04                         SME_N6hqJ_429:	dc.b 4	
00023210 EE05 0000 F3               		dc.b $EE, 5, 0, 0, $F3	
00023215 FE07 0004 EB               		dc.b $FE, 7, 0, 4, $EB	
0002321A FE0D 000C FB               		dc.b $FE, $D, 0, $C, $FB	
0002321F 0E01 0014 FB               		dc.b $E, 1, 0, $14, $FB	
00023224 05                         SME_N6hqJ_43E:	dc.b 5	
00023225 DD05 0000 FC               		dc.b $DD, 5, 0, 0, $FC	
0002322A ED09 0004 F4               		dc.b $ED, 9, 0, 4, $F4	
0002322F FD07 000A EC               		dc.b $FD, 7, 0, $A, $EC	
00023234 FD0D 0012 FC               		dc.b $FD, $D, 0, $12, $FC	
00023239 0D01 001A FC               		dc.b $D, 1, 0, $1A, $FC	
0002323E 04                         SME_N6hqJ_458:	dc.b 4	
0002323F EC0D 0000 F5               		dc.b $EC, $D, 0, 0, $F5	
00023244 FC07 0008 ED               		dc.b $FC, 7, 0, 8, $ED	
00023249 FC05 0010 FD               		dc.b $FC, 5, 0, $10, $FD	
0002324E 0C01 0014 FD               		dc.b $C, 1, 0, $14, $FD	
00023253 04                         SME_N6hqJ_46D:	dc.b 4	
00023254 ED0D 0000 F4               		dc.b $ED, $D, 0, 0, $F4	
00023259 FD07 0008 EC               		dc.b $FD, 7, 0, 8, $EC	
0002325E FD09 0010 FC               		dc.b $FD, 9, 0, $10, $FC	
00023263 0D01 0016 FC               		dc.b $D, 1, 0, $16, $FC	
00023268 04                         SME_N6hqJ_482:	dc.b 4	
00023269 EE09 0000 F3               		dc.b $EE, 9, 0, 0, $F3	
0002326E FE07 0006 EB               		dc.b $FE, 7, 0, 6, $EB	
00023273 FE0D 000E FB               		dc.b $FE, $D, 0, $E, $FB	
00023278 0E01 0016 FB               		dc.b $E, 1, 0, $16, $FB	
0002327D 05                         SME_N6hqJ_497:	dc.b 5	
0002327E DD05 0000 FA               		dc.b $DD, 5, 0, 0, $FA	
00023283 ED09 0004 F4               		dc.b $ED, 9, 0, 4, $F4	
00023288 FD07 000A EC               		dc.b $FD, 7, 0, $A, $EC	
0002328D FD0D 0012 FC               		dc.b $FD, $D, 0, $12, $FC	
00023292 0D01 001A FC               		dc.b $D, 1, 0, $1A, $FC	
00023297 04                         SME_N6hqJ_4B1:	dc.b 4	
00023298 EC0D 0000 F5               		dc.b $EC, $D, 0, 0, $F5	
0002329D FC07 0008 ED               		dc.b $FC, 7, 0, 8, $ED	
000232A2 FC05 0010 FD               		dc.b $FC, 5, 0, $10, $FD	
000232A7 0C01 0014 FD               		dc.b $C, 1, 0, $14, $FD	
000232AC 04                         SME_N6hqJ_4C6:	dc.b 4	
000232AD ED0D 0000 F4               		dc.b $ED, $D, 0, 0, $F4	
000232B2 FD07 0008 EC               		dc.b $FD, 7, 0, 8, $EC	
000232B7 FD09 0010 FC               		dc.b $FD, 9, 0, $10, $FC	
000232BC 0D01 0016 FC               		dc.b $D, 1, 0, $16, $FC	
000232C1 02                         SME_N6hqJ_4DB:	dc.b 2	
000232C2 EE09 0000 F8               		dc.b $EE, 9, 0, 0, $F8	
000232C7 FE0F 0006 F0               		dc.b $FE, $F, 0, 6, $F0	
000232CC 02                         SME_N6hqJ_4E6:	dc.b 2	
000232CD EE09 0000 F8               		dc.b $EE, 9, 0, 0, $F8	
000232D2 FE0F 0006 F0               		dc.b $FE, $F, 0, 6, $F0	
000232D7 02                         SME_N6hqJ_4F1:	dc.b 2	
000232D8 EE09 0000 F8               		dc.b $EE, 9, 0, 0, $F8	
000232DD FE0F 0006 F0               		dc.b $FE, $F, 0, 6, $F0	
000232E2 02                         SME_N6hqJ_4FC:	dc.b 2	
000232E3 EE09 0000 F8               		dc.b $EE, 9, 0, 0, $F8	
000232E8 FE0F 0006 F0               		dc.b $FE, $F, 0, 6, $F0	
000232ED 04                         SME_N6hqJ_507:	dc.b 4	
000232EE EC09 0000 ED               		dc.b $EC, 9, 0, 0, $ED	
000232F3 EC01 0006 05               		dc.b $EC, 1, 0, 6, 5	
000232F8 FC0D 0008 F4               		dc.b $FC, $D, 0, 8, $F4	
000232FD 0C09 0010 FA               		dc.b $C, 9, 0, $10, $FA	
00023302 03                         SME_N6hqJ_51C:	dc.b 3	
00023303 EC0D 0000 ED               		dc.b $EC, $D, 0, 0, $ED	
00023308 FC0D 0008 F5               		dc.b $FC, $D, 0, 8, $F5	
0002330D 0C09 0010 F8               		dc.b $C, 9, 0, $10, $F8	
00023312 04                         SME_N6hqJ_52C:	dc.b 4	
00023313 EC09 0000 ED               		dc.b $EC, 9, 0, 0, $ED	
00023318 EC01 0006 05               		dc.b $EC, 1, 0, 6, 5	
0002331D FC0D 0008 F4               		dc.b $FC, $D, 0, 8, $F4	
00023322 0C09 0010 FD               		dc.b $C, 9, 0, $10, $FD	
00023327 03                         SME_N6hqJ_541:	dc.b 3	
00023328 EC0D 0000 ED               		dc.b $EC, $D, 0, 0, $ED	
0002332D FC0D 0008 F5               		dc.b $FC, $D, 0, 8, $F5	
00023332 0C09 0010 F8               		dc.b $C, 9, 0, $10, $F8	
00023337 02                         SME_N6hqJ_551:	dc.b 2	
00023338 F007 0000 EE               		dc.b $F0, 7, 0, 0, $EE	
0002333D F00B 0008 FE               		dc.b $F0, $B, 0, 8, $FE	
00023342 02                         SME_N6hqJ_55C:	dc.b 2	
00023343 F007 0000 EE               		dc.b $F0, 7, 0, 0, $EE	
00023348 F00B 0008 FE               		dc.b $F0, $B, 0, 8, $FE	
0002334D 02                         SME_N6hqJ_567:	dc.b 2	
0002334E F007 0000 EE               		dc.b $F0, 7, 0, 0, $EE	
00023353 F00B 0008 FE               		dc.b $F0, $B, 0, 8, $FE	
00023358 02                         SME_N6hqJ_572:	dc.b 2	
00023359 F007 0000 EE               		dc.b $F0, 7, 0, 0, $EE	
0002335E F00B 0008 FE               		dc.b $F0, $B, 0, 8, $FE	
00023363 03                         SME_N6hqJ_57D:	dc.b 3	
00023364 E901 0000 F4               		dc.b $E9, 1, 0, 0, $F4	
00023369 F907 0002 EC               		dc.b $F9, 7, 0, 2, $EC	
0002336E EC0B 000A FC               		dc.b $EC, $B, 0, $A, $FC	
00023373 02                         SME_N6hqJ_58D:	dc.b 2	
00023374 F307 0000 EC               		dc.b $F3, 7, 0, 0, $EC	
00023379 EB0B 0008 FC               		dc.b $EB, $B, 0, 8, $FC	
0002337E 03                         SME_N6hqJ_598:	dc.b 3	
0002337F E901 0000 F4               		dc.b $E9, 1, 0, 0, $F4	
00023384 F907 0002 EC               		dc.b $F9, 7, 0, 2, $EC	
00023389 EC0B 000A FC               		dc.b $EC, $B, 0, $A, $FC	
0002338E 02                         SME_N6hqJ_5A8:	dc.b 2	
0002338F F307 0000 EC               		dc.b $F3, 7, 0, 0, $EC	
00023394 EB0B 0008 FC               		dc.b $EB, $B, 0, 8, $FC	
00023399 01                         SME_N6hqJ_5B3:	dc.b 1	
0002339A F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
0002339F 01                         SME_N6hqJ_5B9:	dc.b 1	
000233A0 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
000233A5 01                         SME_N6hqJ_5BF:	dc.b 1	
000233A6 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
000233AB 01                         SME_N6hqJ_5C5:	dc.b 1	
000233AC F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
000233B1 01                         SME_N6hqJ_5CB:	dc.b 1	
000233B2 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
000233B7 01                         SME_N6hqJ_5D1:	dc.b 1	
000233B8 F80F 0000 F4               		dc.b $F8, $F, 0, 0, $F4	
000233BD 01                         SME_N6hqJ_5D7:	dc.b 1	
000233BE F80F 0000 F4               		dc.b $F8, $F, 0, 0, $F4	
000233C3 01                         SME_N6hqJ_5DD:	dc.b 1	
000233C4 F80F 0000 F4               		dc.b $F8, $F, 0, 0, $F4	
000233C9 01                         SME_N6hqJ_5E3:	dc.b 1	
000233CA F80F 0000 F4               		dc.b $F8, $F, 0, 0, $F4	
000233CF 01                         SME_N6hqJ_5E9:	dc.b 1	
000233D0 F80F 0000 F4               		dc.b $F8, $F, 0, 0, $F4	
000233D5 01                         SME_N6hqJ_5EF:	dc.b 1	
000233D6 F80F 0000 F4               		dc.b $F8, $F, 0, 0, $F4	
000233DB 03                         SME_N6hqJ_5F5:	dc.b 3	
000233DC E509 0000 F3               		dc.b $E5, 9, 0, 0, $F3	
000233E1 F509 0006 F3               		dc.b $F5, 9, 0, 6, $F3	
000233E6 050D 000C EB               		dc.b 5, $D, 0, $C, $EB	
000233EB 03                         SME_N6hqJ_605:	dc.b 3	
000233EC E409 0000 F3               		dc.b $E4, 9, 0, 0, $F3	
000233F1 F409 0006 F3               		dc.b $F4, 9, 0, 6, $F3	
000233F6 0409 000C F3               		dc.b 4, 9, 0, $C, $F3	
000233FB 03                         SME_N6hqJ_615:	dc.b 3	
000233FC E509 0000 F3               		dc.b $E5, 9, 0, 0, $F3	
00023401 F509 0006 F3               		dc.b $F5, 9, 0, 6, $F3	
00023406 050D 000C EB               		dc.b 5, $D, 0, $C, $EB	
0002340B 03                         SME_N6hqJ_625:	dc.b 3	
0002340C E509 0000 F3               		dc.b $E5, 9, 0, 0, $F3	
00023411 F509 0006 F3               		dc.b $F5, 9, 0, 6, $F3	
00023416 0509 000C F3               		dc.b 5, 9, 0, $C, $F3	
0002341B 01                         SME_N6hqJ_635:	dc.b 1	
0002341C F40B 0000 F6               		dc.b $F4, $B, 0, 0, $F6	
00023421 01                         SME_N6hqJ_63B:	dc.b 1	
00023422 F40F 0000 F2               		dc.b $F4, $F, 0, 0, $F2	
00023427 02                         SME_N6hqJ_641:	dc.b 2	
00023428 F801 0000 EC               		dc.b $F8, 1, 0, 0, $EC	
0002342D F00F 0002 F4               		dc.b $F0, $F, 0, 2, $F4	
00023432 02                         SME_N6hqJ_64C:	dc.b 2	
00023433 F003 0000 EC               		dc.b $F0, 3, 0, 0, $EC	
00023438 F00F 0004 F4               		dc.b $F0, $F, 0, 4, $F4	
0002343D 03                         SME_N6hqJ_657:	dc.b 3	
0002343E E80F 0000 E8               		dc.b $E8, $F, 0, 0, $E8	
00023443 E801 0010 08               		dc.b $E8, 1, 0, $10, 8	
00023448 F805 0012 08               		dc.b $F8, 5, 0, $12, 8	
0002344D 03                         SME_N6hqJ_667:	dc.b 3	
0002344E E80F 0000 E8               		dc.b $E8, $F, 0, 0, $E8	
00023453 E801 0010 08               		dc.b $E8, 1, 0, $10, 8	
00023458 F805 0012 08               		dc.b $F8, 5, 0, $12, 8	
0002345D 02                         SME_N6hqJ_677:	dc.b 2	
0002345E E80B 0000 F4               		dc.b $E8, $B, 0, 0, $F4	
00023463 0809 000C F4               		dc.b 8, 9, 0, $C, $F4	
00023468 02                         SME_N6hqJ_682:	dc.b 2	
00023469 E80B 0000 F4               		dc.b $E8, $B, 0, 0, $F4	
0002346E 0809 000C F4               		dc.b 8, 9, 0, $C, $F4	
00023473 03                         SME_N6hqJ_68D:	dc.b 3	
00023474 FC05 0000 EC               		dc.b $FC, 5, 0, 0, $EC	
00023479 F40B 0004 FC               		dc.b $F4, $B, 0, 4, $FC	
0002347E F401 0010 14               		dc.b $F4, 1, 0, $10, $14	
00023483 04                         SME_N6hqJ_69D:	dc.b 4	
00023484 F401 0000 E8               		dc.b $F4, 1, 0, 0, $E8	
00023489 F407 0002 F0               		dc.b $F4, 7, 0, 2, $F0	
0002348E F407 0802 00               		dc.b $F4, 7, 8, 2, 0	
00023493 F401 0800 10               		dc.b $F4, 1, 8, 0, $10	
00023498 03                         SME_N6hqJ_6B2:	dc.b 3	
00023499 FC05 0800 04               		dc.b $FC, 5, 8, 0, 4	
0002349E F40B 0804 EC               		dc.b $F4, $B, 8, 4, $EC	
000234A3 F401 0810 E4               		dc.b $F4, 1, 8, $10, $E4	
000234A8 03                         SME_N6hqJ_6C2:	dc.b 3	
000234A9 F401 0000 E4               		dc.b $F4, 1, 0, 0, $E4	
000234AE F40B 0002 EC               		dc.b $F4, $B, 0, 2, $EC	
000234B3 FC01 000E 04               		dc.b $FC, 1, 0, $E, 4	
000234B8 03                         SME_N6hqJ_6D2:	dc.b 3	
000234B9 F401 0800 14               		dc.b $F4, 1, 8, 0, $14	
000234BE F40B 0802 FC               		dc.b $F4, $B, 8, 2, $FC	
000234C3 FC01 080E F4               		dc.b $FC, 1, 8, $E, $F4	
000234C8 03                         SME_N6hqJ_6E2:	dc.b 3	
000234C9 FC05 0000 EC               		dc.b $FC, 5, 0, 0, $EC	
000234CE F40B 0004 FC               		dc.b $F4, $B, 0, 4, $FC	
000234D3 F401 0010 14               		dc.b $F4, 1, 0, $10, $14	
000234D8 03                         SME_N6hqJ_6F2:	dc.b 3	
000234D9 E409 0000 F4               		dc.b $E4, 9, 0, 0, $F4	
000234DE F40F 0006 EC               		dc.b $F4, $F, 0, 6, $EC	
000234E3 0401 0016 0C               		dc.b 4, 1, 0, $16, $C	
000234E8 02                         SME_N6hqJ_702:	dc.b 2	
000234E9 E80B 0000 F4               		dc.b $E8, $B, 0, 0, $F4	
000234EE 0805 000C FC               		dc.b 8, 5, 0, $C, $FC	
000234F3 04                         SME_N6hqJ_70D:	dc.b 4	
000234F4 EA01 0000 E8               		dc.b $EA, 1, 0, 0, $E8	
000234F9 EA0B 0002 F0               		dc.b $EA, $B, 0, 2, $F0	
000234FE EA01 000E 08               		dc.b $EA, 1, 0, $E, 8	
00023503 0A0D 0010 F0               		dc.b $A, $D, 0, $10, $F0	
00023508 04                         SME_N6hqJ_722:	dc.b 4	
00023509 EA01 0000 E8               		dc.b $EA, 1, 0, 0, $E8	
0002350E EA0B 0002 F0               		dc.b $EA, $B, 0, 2, $F0	
00023513 EA01 000E 08               		dc.b $EA, 1, 0, $E, 8	
00023518 0A0D 0010 F0               		dc.b $A, $D, 0, $10, $F0	
0002351D 03                         SME_N6hqJ_737:	dc.b 3	
0002351E EA0D 0000 E8               		dc.b $EA, $D, 0, 0, $E8	
00023523 EA01 0008 08               		dc.b $EA, 1, 0, 8, 8	
00023528 FA0B 000A F0               		dc.b $FA, $B, 0, $A, $F0	
0002352D 03                         SME_N6hqJ_747:	dc.b 3	
0002352E E409 0000 F0               		dc.b $E4, 9, 0, 0, $F0	
00023533 F40B 0006 F0               		dc.b $F4, $B, 0, 6, $F0	
00023538 F401 0012 08               		dc.b $F4, 1, 0, $12, 8	
0002353D 03                         SME_N6hqJ_757:	dc.b 3	
0002353E E50B 0000 F0               		dc.b $E5, $B, 0, 0, $F0	
00023543 F401 000C 08               		dc.b $F4, 1, 0, $C, 8	
00023548 0505 000E F8               		dc.b 5, 5, 0, $E, $F8	
0002354D 02                         SME_N6hqJ_767:	dc.b 2	
0002354E EC0B 0000 F1               		dc.b $EC, $B, 0, 0, $F1	
00023553 FC01 000C 09               		dc.b $FC, 1, 0, $C, 9	
00023558 01                         SME_N6hqJ_772:	dc.b 1	
00023559 EE0F 0000 F0               		dc.b $EE, $F, 0, 0, $F0	
0002355E 02                         SME_N6hqJ_778:	dc.b 2	
0002355F F20B 0000 F0               		dc.b $F2, $B, 0, 0, $F0	
00023564 FA01 000C 08               		dc.b $FA, 1, 0, $C, 8	
00023569 03                         SME_N6hqJ_783:	dc.b 3	
0002356A E401 0000 00               		dc.b $E4, 1, 0, 0, 0	
0002356F F40B 0002 F0               		dc.b $F4, $B, 0, 2, $F0	
00023574 F401 000E 08               		dc.b $F4, 1, 0, $E, 8	
00023579 03                         SME_N6hqJ_793:	dc.b 3	
0002357A E509 0000 F0               		dc.b $E5, 9, 0, 0, $F0	
0002357F F50B 0006 F0               		dc.b $F5, $B, 0, 6, $F0	
00023584 ED03 0012 08               		dc.b $ED, 3, 0, $12, 8	
00023589 03                         SME_N6hqJ_7A3:	dc.b 3	
0002358A E405 0000 F8               		dc.b $E4, 5, 0, 0, $F8	
0002358F F40B 0004 F0               		dc.b $F4, $B, 0, 4, $F0	
00023594 F401 0010 08               		dc.b $F4, 1, 0, $10, 8	
00023599 02                         SME_N6hqJ_7B3:	dc.b 2	
0002359A ED0B 0000 F0               		dc.b $ED, $B, 0, 0, $F0	
0002359F F501 000C 08               		dc.b $F5, 1, 0, $C, 8	
000235A4 02                         SME_N6hqJ_7BE:	dc.b 2	
000235A5 F401 0000 F0               		dc.b $F4, 1, 0, 0, $F0	
000235AA F10B 0002 F8               		dc.b $F1, $B, 0, 2, $F8	
000235AF 03                         SME_N6hqJ_7C9:	dc.b 3	
000235B0 E405 0000 F1               		dc.b $E4, 5, 0, 0, $F1	
000235B5 F40B 0004 F0               		dc.b $F4, $B, 0, 4, $F0	
000235BA F401 0010 08               		dc.b $F4, 1, 0, $10, 8	
000235BF 02                         SME_N6hqJ_7D9:	dc.b 2	
000235C0 E105 0000 F0               		dc.b $E1, 5, 0, 0, $F0	
000235C5 F10F 0004 F0               		dc.b $F1, $F, 0, 4, $F0	
000235CA 03                         SME_N6hqJ_7E4:	dc.b 3	
000235CB E807 0000 F0               		dc.b $E8, 7, 0, 0, $F0	
000235D0 E003 0008 00               		dc.b $E0, 3, 0, 8, 0	
000235D5 0009 000C 00               		dc.b 0, 9, 0, $C, 0	
000235DA 03                         SME_N6hqJ_7F4:	dc.b 3	
000235DB E807 0000 F0               		dc.b $E8, 7, 0, 0, $F0	
000235E0 E003 0008 00               		dc.b $E0, 3, 0, 8, 0	
000235E5 0009 000C 00               		dc.b 0, 9, 0, $C, 0	
000235EA 01                         SME_N6hqJ_804:	dc.b 1	
000235EB F00B 0000 F5               		dc.b $F0, $B, 0, 0, $F5	
000235F0 03                         SME_N6hqJ_80A:	dc.b 3	
000235F1 E60B 0000 F0               		dc.b $E6, $B, 0, 0, $F0	
000235F6 EE01 000C 08               		dc.b $EE, 1, 0, $C, 8	
000235FB 0609 000E F0               		dc.b 6, 9, 0, $E, $F0	
00023600 03                         SME_N6hqJ_81A:	dc.b 3	
00023601 E40A 0000 F0               		dc.b $E4, $A, 0, 0, $F0	
00023606 FC00 0009 08               		dc.b $FC, 0, 0, 9, 8	
0002360B FC0A 000A F0               		dc.b $FC, $A, 0, $A, $F0	
00023610 05                         SME_N6hqJ_82A:	dc.b 5	
00023611 E408 0000 F0               		dc.b $E4, 8, 0, 0, $F0	
00023616 EC01 0003 F0               		dc.b $EC, 1, 0, 3, $F0	
0002361B EC05 0005 F8               		dc.b $EC, 5, 0, 5, $F8	
00023620 FC0A 0009 F0               		dc.b $FC, $A, 0, 9, $F0	
00023625 FD00 0012 08               		dc.b $FD, 0, 0, $12, 8	
0002362A 05                         SME_N6hqJ_844:	dc.b 5	
0002362B E408 0000 F0               		dc.b $E4, 8, 0, 0, $F0	
00023630 EC01 0003 F0               		dc.b $EC, 1, 0, 3, $F0	
00023635 EC05 0005 F8               		dc.b $EC, 5, 0, 5, $F8	
0002363A FC0A 0009 F0               		dc.b $FC, $A, 0, 9, $F0	
0002363F FD00 0012 08               		dc.b $FD, 0, 0, $12, 8	
00023644 02                         SME_N6hqJ_85E:	dc.b 2	
00023645 E70A 0000 F1               		dc.b $E7, $A, 0, 0, $F1	
0002364A FF0A 0009 F3               		dc.b $FF, $A, 0, 9, $F3	
0002364F 02                         SME_N6hqJ_869:	dc.b 2	
00023650 E70A 0000 F1               		dc.b $E7, $A, 0, 0, $F1	
00023655 FF0A 0009 F3               		dc.b $FF, $A, 0, 9, $F3	
0002365A 02                         SME_N6hqJ_874:	dc.b 2	
0002365B E70A 0000 F1               		dc.b $E7, $A, 0, 0, $F1	
00023660 FF0A 0009 F3               		dc.b $FF, $A, 0, 9, $F3	
00023665 03                         SME_N6hqJ_87F:	dc.b 3	
00023666 E30E 0000 EE               		dc.b $E3, $E, 0, 0, $EE	
0002366B 0301 000C EC               		dc.b 3, 1, 0, $C, $EC	
00023670 FB0F 000E F4               		dc.b $FB, $F, 0, $E, $F4	
00023675 04                         SME_N6hqJ_88F:	dc.b 4	
00023676 E40E 0000 EE               		dc.b $E4, $E, 0, 0, $EE	
0002367B 0401 000C EC               		dc.b 4, 1, 0, $C, $EC	
00023680 FC0B 000E F4               		dc.b $FC, $B, 0, $E, $F4	
00023685 0401 001A 0C               		dc.b 4, 1, 0, $1A, $C	
0002368A 03                         SME_N6hqJ_8A4:	dc.b 3	
0002368B E50E 0000 ED               		dc.b $E5, $E, 0, 0, $ED	
00023690 FD09 000C F4               		dc.b $FD, 9, 0, $C, $F4	
00023695 0D05 0012 F7               		dc.b $D, 5, 0, $12, $F7	
0002369A 02                         SME_N6hqJ_8B4:	dc.b 2	
0002369B E40A 0000 F4               		dc.b $E4, $A, 0, 0, $F4	
000236A0 FC0F 0009 EE               		dc.b $FC, $F, 0, 9, $EE	
000236A5 03                         SME_N6hqJ_8BF:	dc.b 3	
000236A6 E30A 0000 F4               		dc.b $E3, $A, 0, 0, $F4	
000236AB FB0F 0009 EE               		dc.b $FB, $F, 0, 9, $EE	
000236B0 FB01 0019 0E               		dc.b $FB, 1, 0, $19, $E	
000236B5 04                         SME_N6hqJ_8CF:	dc.b 4	
000236B6 E40A 0000 F4               		dc.b $E4, $A, 0, 0, $F4	
000236BB 0401 0009 EC               		dc.b 4, 1, 0, 9, $EC	
000236C0 FC0B 000B F4               		dc.b $FC, $B, 0, $B, $F4	
000236C5 0401 0017 0C               		dc.b 4, 1, 0, $17, $C	
000236CA 03                         SME_N6hqJ_8E4:	dc.b 3	
000236CB E50E 0000 ED               		dc.b $E5, $E, 0, 0, $ED	
000236D0 FD09 000C F4               		dc.b $FD, 9, 0, $C, $F4	
000236D5 0D05 0012 F7               		dc.b $D, 5, 0, $12, $F7	
000236DA 02                         SME_N6hqJ_8F4:	dc.b 2	
000236DB E40E 0000 EE               		dc.b $E4, $E, 0, 0, $EE	
000236E0 FC0B 000C F3               		dc.b $FC, $B, 0, $C, $F3	
000236E5 04                         SME_N6hqJ_8FF:	dc.b 4	
000236E6 EB0D 0000 E2               		dc.b $EB, $D, 0, 0, $E2	
000236EB F305 0008 02               		dc.b $F3, 5, 0, 8, 2	
000236F0 FB09 000C EA               		dc.b $FB, 9, 0, $C, $EA	
000236F5 0B01 0012 FA               		dc.b $B, 1, 0, $12, $FA	
000236FA 05                         SME_N6hqJ_914:	dc.b 5	
000236FB EC0D 0000 E3               		dc.b $EC, $D, 0, 0, $E3	
00023700 EC01 0008 03               		dc.b $EC, 1, 0, 8, 3	
00023705 FC0D 000A EB               		dc.b $FC, $D, 0, $A, $EB	
0002370A FC05 0012 0B               		dc.b $FC, 5, 0, $12, $B	
0002370F 0C01 0016 FB               		dc.b $C, 1, 0, $16, $FB	
00023714 05                         SME_N6hqJ_92E:	dc.b 5	
00023715 ED0A 0000 E4               		dc.b $ED, $A, 0, 0, $E4	
0002371A ED03 0009 FC               		dc.b $ED, 3, 0, 9, $FC	
0002371F 0500 000D F4               		dc.b 5, 0, 0, $D, $F4	
00023724 F501 000E 04               		dc.b $F5, 1, 0, $E, 4	
00023729 0505 0010 04               		dc.b 5, 5, 0, $10, 4	
0002372E 05                         SME_N6hqJ_948:	dc.b 5	
0002372F E400 0000 F1               		dc.b $E4, 0, 0, 0, $F1	
00023734 EC0D 0001 E3               		dc.b $EC, $D, 0, 1, $E3	
00023739 EC01 0009 03               		dc.b $EC, 1, 0, 9, 3	
0002373E FC05 000B EB               		dc.b $FC, 5, 0, $B, $EB	
00023743 FC0B 000F FB               		dc.b $FC, $B, 0, $F, $FB	
00023748 06                         SME_N6hqJ_962:	dc.b 6	
00023749 E300 0000 F0               		dc.b $E3, 0, 0, 0, $F0	
0002374E EB0D 0001 E2               		dc.b $EB, $D, 0, 1, $E2	
00023753 EB01 0009 02               		dc.b $EB, 1, 0, 9, 2	
00023758 F301 000B 0A               		dc.b $F3, 1, 0, $B, $A	
0002375D FB0D 000D EA               		dc.b $FB, $D, 0, $D, $EA	
00023762 0B05 0015 F2               		dc.b $B, 5, 0, $15, $F2	
00023767 06                         SME_N6hqJ_981:	dc.b 6	
00023768 E400 0000 F1               		dc.b $E4, 0, 0, 0, $F1	
0002376D EC0D 0001 E3               		dc.b $EC, $D, 0, 1, $E3	
00023772 EC01 0009 03               		dc.b $EC, 1, 0, 9, 3	
00023777 FC0D 000B EB               		dc.b $FC, $D, 0, $B, $EB	
0002377C FA05 0013 0B               		dc.b $FA, 5, 0, $13, $B	
00023781 0C01 0017 FB               		dc.b $C, 1, 0, $17, $FB	
00023786 05                         SME_N6hqJ_9A0:	dc.b 5	
00023787 ED0A 0000 E4               		dc.b $ED, $A, 0, 0, $E4	
0002378C ED03 0009 FC               		dc.b $ED, 3, 0, 9, $FC	
00023791 0500 000D F4               		dc.b 5, 0, 0, $D, $F4	
00023796 F501 000E 04               		dc.b $F5, 1, 0, $E, 4	
0002379B 0505 0010 04               		dc.b 5, 5, 0, $10, 4	
000237A0 05                         SME_N6hqJ_9BA:	dc.b 5	
000237A1 EC0D 0000 E3               		dc.b $EC, $D, 0, 0, $E3	
000237A6 F401 0008 03               		dc.b $F4, 1, 0, 8, 3	
000237AB FC09 000A EB               		dc.b $FC, 9, 0, $A, $EB	
000237B0 0C00 0010 FB               		dc.b $C, 0, 0, $10, $FB	
000237B5 0405 0011 03               		dc.b 4, 5, 0, $11, 3	
000237BA 03                         SME_N6hqJ_9D4:	dc.b 3	
000237BB F20B 0000 E3               		dc.b $F2, $B, 0, 0, $E3	
000237C0 EC0B 000C FB               		dc.b $EC, $B, 0, $C, $FB	
000237C5 0C05 0018 03               		dc.b $C, 5, 0, $18, 3	
000237CA 03                         SME_N6hqJ_9E4:	dc.b 3	
000237CB F20B 0000 E4               		dc.b $F2, $B, 0, 0, $E4	
000237D0 EC0B 000C FC               		dc.b $EC, $B, 0, $C, $FC	
000237D5 0C05 0018 04               		dc.b $C, 5, 0, $18, 4	
000237DA 03                         SME_N6hqJ_9F4:	dc.b 3	
000237DB F30B 0000 E5               		dc.b $F3, $B, 0, 0, $E5	
000237E0 F403 000C FD               		dc.b $F4, 3, 0, $C, $FD	
000237E5 F905 0010 05               		dc.b $F9, 5, 0, $10, 5	
000237EA 02                         SME_N6hqJ_A04:	dc.b 2	
000237EB F40A 0000 E4               		dc.b $F4, $A, 0, 0, $E4	
000237F0 F20B 0009 FC               		dc.b $F2, $B, 0, 9, $FC	
000237F5 03                         SME_N6hqJ_A0F:	dc.b 3	
000237F6 F40A 0000 E3               		dc.b $F4, $A, 0, 0, $E3	
000237FB E305 0009 FB               		dc.b $E3, 5, 0, 9, $FB	
00023800 F30B 000D FB               		dc.b $F3, $B, 0, $D, $FB	
00023805 03                         SME_N6hqJ_A1F:	dc.b 3	
00023806 F40A 0000 E4               		dc.b $F4, $A, 0, 0, $E4	
0002380B EC0B 0009 FC               		dc.b $EC, $B, 0, 9, $FC	
00023810 0C05 0015 04               		dc.b $C, 5, 0, $15, 4	
00023815 03                         SME_N6hqJ_A2F:	dc.b 3	
00023816 F30B 0000 E5               		dc.b $F3, $B, 0, 0, $E5	
0002381B F403 000C FD               		dc.b $F4, 3, 0, $C, $FD	
00023820 F905 0010 05               		dc.b $F9, 5, 0, $10, 5	
00023825 02                         SME_N6hqJ_A3F:	dc.b 2	
00023826 F40B 0000 E4               		dc.b $F4, $B, 0, 0, $E4	
0002382B F20B 000C FC               		dc.b $F2, $B, 0, $C, $FC	
00023830 04                         SME_N6hqJ_A4A:	dc.b 4	
00023831 EE05 0000 F3               		dc.b $EE, 5, 0, 0, $F3	
00023836 FE07 0004 EB               		dc.b $FE, 7, 0, 4, $EB	
0002383B FE0D 000C FB               		dc.b $FE, $D, 0, $C, $FB	
00023840 0E00 0014 FB               		dc.b $E, 0, 0, $14, $FB	
00023845 05                         SME_N6hqJ_A5F:	dc.b 5	
00023846 DD05 0000 FC               		dc.b $DD, 5, 0, 0, $FC	
0002384B ED09 0004 F4               		dc.b $ED, 9, 0, 4, $F4	
00023850 FD07 000A EC               		dc.b $FD, 7, 0, $A, $EC	
00023855 FD0D 0012 FC               		dc.b $FD, $D, 0, $12, $FC	
0002385A 0D00 001A FC               		dc.b $D, 0, 0, $1A, $FC	
0002385F 04                         SME_N6hqJ_A79:	dc.b 4	
00023860 EC0D 0000 F5               		dc.b $EC, $D, 0, 0, $F5	
00023865 FC07 0008 ED               		dc.b $FC, 7, 0, 8, $ED	
0002386A FC05 0010 FD               		dc.b $FC, 5, 0, $10, $FD	
0002386F 0C01 0014 FD               		dc.b $C, 1, 0, $14, $FD	
00023874 04                         SME_N6hqJ_A8E:	dc.b 4	
00023875 ED0D 0000 F4               		dc.b $ED, $D, 0, 0, $F4	
0002387A FD0B 0008 E4               		dc.b $FD, $B, 0, 8, $E4	
0002387F FD09 0014 FC               		dc.b $FD, 9, 0, $14, $FC	
00023884 0D00 001A FC               		dc.b $D, 0, 0, $1A, $FC	
00023889 04                         SME_N6hqJ_AA3:	dc.b 4	
0002388A EE09 0000 F3               		dc.b $EE, 9, 0, 0, $F3	
0002388F FE0B 0006 E3               		dc.b $FE, $B, 0, 6, $E3	
00023894 FE0D 0012 FB               		dc.b $FE, $D, 0, $12, $FB	
00023899 0E00 001A FB               		dc.b $E, 0, 0, $1A, $FB	
0002389E 05                         SME_N6hqJ_AB8:	dc.b 5	
0002389F DD05 0000 FA               		dc.b $DD, 5, 0, 0, $FA	
000238A4 ED09 0004 F4               		dc.b $ED, 9, 0, 4, $F4	
000238A9 FD0B 000A E4               		dc.b $FD, $B, 0, $A, $E4	
000238AE FD0D 0016 FC               		dc.b $FD, $D, 0, $16, $FC	
000238B3 0D00 001E FC               		dc.b $D, 0, 0, $1E, $FC	
000238B8 04                         SME_N6hqJ_AD2:	dc.b 4	
000238B9 EC0D 0000 F5               		dc.b $EC, $D, 0, 0, $F5	
000238BE FC07 0008 ED               		dc.b $FC, 7, 0, 8, $ED	
000238C3 FC05 0010 FD               		dc.b $FC, 5, 0, $10, $FD	
000238C8 0C01 0014 FD               		dc.b $C, 1, 0, $14, $FD	
000238CD 04                         SME_N6hqJ_AE7:	dc.b 4	
000238CE ED0D 0000 F4               		dc.b $ED, $D, 0, 0, $F4	
000238D3 FD07 0008 EC               		dc.b $FD, 7, 0, 8, $EC	
000238D8 FD09 0010 FC               		dc.b $FD, 9, 0, $10, $FC	
000238DD 0D00 0016 FC               		dc.b $D, 0, 0, $16, $FC	
000238E2 03                         SME_N6hqJ_AFC:	dc.b 3	
000238E3 E30E 0000 EE               		dc.b $E3, $E, 0, 0, $EE	
000238E8 0301 000C EC               		dc.b 3, 1, 0, $C, $EC	
000238ED FB0F 000E F4               		dc.b $FB, $F, 0, $E, $F4	
000238F2 04                         SME_N6hqJ_B0C:	dc.b 4	
000238F3 E40E 0000 EE               		dc.b $E4, $E, 0, 0, $EE	
000238F8 0401 000C EC               		dc.b 4, 1, 0, $C, $EC	
000238FD FC0B 000E F4               		dc.b $FC, $B, 0, $E, $F4	
00023902 0401 001A 0C               		dc.b 4, 1, 0, $1A, $C	
00023907 03                         SME_N6hqJ_B21:	dc.b 3	
00023908 E50E 0000 ED               		dc.b $E5, $E, 0, 0, $ED	
0002390D FD09 000C F4               		dc.b $FD, 9, 0, $C, $F4	
00023912 0D05 0012 F7               		dc.b $D, 5, 0, $12, $F7	
00023917 02                         SME_N6hqJ_B31:	dc.b 2	
00023918 E40A 0000 F4               		dc.b $E4, $A, 0, 0, $F4	
0002391D FC0F 0009 EE               		dc.b $FC, $F, 0, 9, $EE	
00023922 03                         SME_N6hqJ_B3C:	dc.b 3	
00023923 E30A 0000 F4               		dc.b $E3, $A, 0, 0, $F4	
00023928 FB0F 0009 EE               		dc.b $FB, $F, 0, 9, $EE	
0002392D FB01 0019 0E               		dc.b $FB, 1, 0, $19, $E	
00023932 04                         SME_N6hqJ_B4C:	dc.b 4	
00023933 E40A 0000 F4               		dc.b $E4, $A, 0, 0, $F4	
00023938 0401 0009 EC               		dc.b 4, 1, 0, 9, $EC	
0002393D FC0B 000B F4               		dc.b $FC, $B, 0, $B, $F4	
00023942 0401 0017 0C               		dc.b 4, 1, 0, $17, $C	
00023947 03                         SME_N6hqJ_B61:	dc.b 3	
00023948 E50E 0000 ED               		dc.b $E5, $E, 0, 0, $ED	
0002394D FD09 000C F4               		dc.b $FD, 9, 0, $C, $F4	
00023952 0D05 0012 F7               		dc.b $D, 5, 0, $12, $F7	
00023957 02                         SME_N6hqJ_B71:	dc.b 2	
00023958 E40E 0000 EE               		dc.b $E4, $E, 0, 0, $EE	
0002395D FC0B 000C F3               		dc.b $FC, $B, 0, $C, $F3	
00023962 05                         SME_N6hqJ_B7C:	dc.b 5	
00023963 E304 0000 EA               		dc.b $E3, 4, 0, 0, $EA	
00023968 EB0D 0002 E2               		dc.b $EB, $D, 0, 2, $E2	
0002396D FB09 000A EA               		dc.b $FB, 9, 0, $A, $EA	
00023972 F305 0010 02               		dc.b $F3, 5, 0, $10, 2	
00023977 0B01 0014 FA               		dc.b $B, 1, 0, $14, $FA	
0002397C 06                         SME_N6hqJ_B96:	dc.b 6	
0002397D E404 0000 EB               		dc.b $E4, 4, 0, 0, $EB	
00023982 EC0D 0002 E3               		dc.b $EC, $D, 0, 2, $E3	
00023987 EC01 000A 03               		dc.b $EC, 1, 0, $A, 3	
0002398C FC0D 000C EB               		dc.b $FC, $D, 0, $C, $EB	
00023991 FC05 0014 0B               		dc.b $FC, 5, 0, $14, $B	
00023996 0C01 0018 FB               		dc.b $C, 1, 0, $18, $FB	
0002399B 05                         SME_N6hqJ_BB5:	dc.b 5	
0002399C EB09 0000 E4               		dc.b $EB, 9, 0, 0, $E4	
000239A1 FB05 0006 EC               		dc.b $FB, 5, 0, 6, $EC	
000239A6 ED03 000A FC               		dc.b $ED, 3, 0, $A, $FC	
000239AB F501 000E 04               		dc.b $F5, 1, 0, $E, 4	
000239B0 0505 0010 04               		dc.b 5, 5, 0, $10, 4	
000239B5 05                         SME_N6hqJ_BCF:	dc.b 5	
000239B6 E404 0000 EB               		dc.b $E4, 4, 0, 0, $EB	
000239BB EC0D 0002 E3               		dc.b $EC, $D, 0, 2, $E3	
000239C0 EC01 000A 03               		dc.b $EC, 1, 0, $A, 3	
000239C5 FC05 000C EB               		dc.b $FC, 5, 0, $C, $EB	
000239CA FC0B 0010 FB               		dc.b $FC, $B, 0, $10, $FB	
000239CF 06                         SME_N6hqJ_BE9:	dc.b 6	
000239D0 E304 0000 EA               		dc.b $E3, 4, 0, 0, $EA	
000239D5 EB0D 0002 E2               		dc.b $EB, $D, 0, 2, $E2	
000239DA EB01 000A 02               		dc.b $EB, 1, 0, $A, 2	
000239DF F301 000C 0A               		dc.b $F3, 1, 0, $C, $A	
000239E4 FB0D 000E EA               		dc.b $FB, $D, 0, $E, $EA	
000239E9 0B05 0016 F2               		dc.b $B, 5, 0, $16, $F2	
000239EE 06                         SME_N6hqJ_C08:	dc.b 6	
000239EF E404 0000 EB               		dc.b $E4, 4, 0, 0, $EB	
000239F4 EC0D 0002 E3               		dc.b $EC, $D, 0, 2, $E3	
000239F9 EC01 000A 03               		dc.b $EC, 1, 0, $A, 3	
000239FE FC0D 000C EB               		dc.b $FC, $D, 0, $C, $EB	
00023A03 FA05 0014 0B               		dc.b $FA, 5, 0, $14, $B	
00023A08 0C01 0018 FB               		dc.b $C, 1, 0, $18, $FB	
00023A0D 05                         SME_N6hqJ_C27:	dc.b 5	
00023A0E EB09 0000 E4               		dc.b $EB, 9, 0, 0, $E4	
00023A13 FB05 0006 EC               		dc.b $FB, 5, 0, 6, $EC	
00023A18 ED03 000A FC               		dc.b $ED, 3, 0, $A, $FC	
00023A1D F501 000E 04               		dc.b $F5, 1, 0, $E, 4	
00023A22 0505 0010 04               		dc.b 5, 5, 0, $10, 4	
00023A27 06                         SME_N6hqJ_C41:	dc.b 6	
00023A28 E404 0000 EB               		dc.b $E4, 4, 0, 0, $EB	
00023A2D EC0D 0002 E3               		dc.b $EC, $D, 0, 2, $E3	
00023A32 FC09 000A EB               		dc.b $FC, 9, 0, $A, $EB	
00023A37 F401 0010 03               		dc.b $F4, 1, 0, $10, 3	
00023A3C 0405 0012 03               		dc.b 4, 5, 0, $12, 3	
00023A41 0C01 0016 FB               		dc.b $C, 1, 0, $16, $FB	
00023A46 03                         SME_N6hqJ_C60:	dc.b 3	
00023A47 F20B 0000 E3               		dc.b $F2, $B, 0, 0, $E3	
00023A4C EC0B 000C FB               		dc.b $EC, $B, 0, $C, $FB	
00023A51 0C05 0018 03               		dc.b $C, 5, 0, $18, 3	
00023A56 03                         SME_N6hqJ_C70:	dc.b 3	
00023A57 F20B 0000 E4               		dc.b $F2, $B, 0, 0, $E4	
00023A5C EC0B 000C FC               		dc.b $EC, $B, 0, $C, $FC	
00023A61 0C05 0018 04               		dc.b $C, 5, 0, $18, 4	
00023A66 03                         SME_N6hqJ_C80:	dc.b 3	
00023A67 F30B 0000 E5               		dc.b $F3, $B, 0, 0, $E5	
00023A6C F403 000C FD               		dc.b $F4, 3, 0, $C, $FD	
00023A71 F905 0010 05               		dc.b $F9, 5, 0, $10, 5	
00023A76 02                         SME_N6hqJ_C90:	dc.b 2	
00023A77 F40A 0000 E4               		dc.b $F4, $A, 0, 0, $E4	
00023A7C F20B 0009 FC               		dc.b $F2, $B, 0, 9, $FC	
00023A81 03                         SME_N6hqJ_C9B:	dc.b 3	
00023A82 F40A 0000 E3               		dc.b $F4, $A, 0, 0, $E3	
00023A87 E305 0009 FB               		dc.b $E3, 5, 0, 9, $FB	
00023A8C F30B 000D FB               		dc.b $F3, $B, 0, $D, $FB	
00023A91 03                         SME_N6hqJ_CAB:	dc.b 3	
00023A92 F40A 0000 E4               		dc.b $F4, $A, 0, 0, $E4	
00023A97 EC0B 0009 FC               		dc.b $EC, $B, 0, 9, $FC	
00023A9C 0C05 0015 04               		dc.b $C, 5, 0, $15, 4	
00023AA1 03                         SME_N6hqJ_CBB:	dc.b 3	
00023AA2 F30B 0000 E5               		dc.b $F3, $B, 0, 0, $E5	
00023AA7 F403 000C FD               		dc.b $F4, 3, 0, $C, $FD	
00023AAC F905 0010 05               		dc.b $F9, 5, 0, $10, 5	
00023AB1 02                         SME_N6hqJ_CCB:	dc.b 2	
00023AB2 F20B 0000 E4               		dc.b $F2, $B, 0, 0, $E4	
00023AB7 F40B 000C FC               		dc.b $F4, $B, 0, $C, $FC	
00023ABC 04                         SME_N6hqJ_CD6:	dc.b 4	
00023ABD EE05 0000 F3               		dc.b $EE, 5, 0, 0, $F3	
00023AC2 FE0B 0004 E3               		dc.b $FE, $B, 0, 4, $E3	
00023AC7 FE0D 0010 FB               		dc.b $FE, $D, 0, $10, $FB	
00023ACC 0E00 0018 FB               		dc.b $E, 0, 0, $18, $FB	
00023AD1 05                         SME_N6hqJ_CEB:	dc.b 5	
00023AD2 DD05 0000 FC               		dc.b $DD, 5, 0, 0, $FC	
00023AD7 ED09 0004 F4               		dc.b $ED, 9, 0, 4, $F4	
00023ADC FD0B 000A E4               		dc.b $FD, $B, 0, $A, $E4	
00023AE1 FD0D 0016 FC               		dc.b $FD, $D, 0, $16, $FC	
00023AE6 0D00 001E FC               		dc.b $D, 0, 0, $1E, $FC	
00023AEB 05                         SME_N6hqJ_D05:	dc.b 5	
00023AEC EC0D 0000 F5               		dc.b $EC, $D, 0, 0, $F5	
00023AF1 0401 0008 E5               		dc.b 4, 1, 0, 8, $E5	
00023AF6 FC07 000A ED               		dc.b $FC, 7, 0, $A, $ED	
00023AFB FC05 0012 FD               		dc.b $FC, 5, 0, $12, $FD	
00023B00 0C00 0016 FD               		dc.b $C, 0, 0, $16, $FD	
00023B05 04                         SME_N6hqJ_D1F:	dc.b 4	
00023B06 ED0D 0000 F4               		dc.b $ED, $D, 0, 0, $F4	
00023B0B FD0B 0008 E4               		dc.b $FD, $B, 0, 8, $E4	
00023B10 FD09 0014 FC               		dc.b $FD, 9, 0, $14, $FC	
00023B15 0D00 001A FC               		dc.b $D, 0, 0, $1A, $FC	
00023B1A 04                         SME_N6hqJ_D34:	dc.b 4	
00023B1B EE09 0000 F3               		dc.b $EE, 9, 0, 0, $F3	
00023B20 FE0B 0006 E3               		dc.b $FE, $B, 0, 6, $E3	
00023B25 FE0D 0012 FB               		dc.b $FE, $D, 0, $12, $FB	
00023B2A 0E00 001A FB               		dc.b $E, 0, 0, $1A, $FB	
00023B2F 05                         SME_N6hqJ_D49:	dc.b 5	
00023B30 DD05 0000 FA               		dc.b $DD, 5, 0, 0, $FA	
00023B35 ED09 0004 F4               		dc.b $ED, 9, 0, 4, $F4	
00023B3A FD0B 000A E4               		dc.b $FD, $B, 0, $A, $E4	
00023B3F FD0D 0016 FC               		dc.b $FD, $D, 0, $16, $FC	
00023B44 0D00 001E FC               		dc.b $D, 0, 0, $1E, $FC	
00023B49 05                         SME_N6hqJ_D63:	dc.b 5	
00023B4A EC0D 0000 F5               		dc.b $EC, $D, 0, 0, $F5	
00023B4F 0401 0008 E5               		dc.b 4, 1, 0, 8, $E5	
00023B54 FC07 000A ED               		dc.b $FC, 7, 0, $A, $ED	
00023B59 FC05 0012 FD               		dc.b $FC, 5, 0, $12, $FD	
00023B5E 0C00 0016 FD               		dc.b $C, 0, 0, $16, $FD	
00023B63 05                         SME_N6hqJ_D7D:	dc.b 5	
00023B64 ED0D 0000 F4               		dc.b $ED, $D, 0, 0, $F4	
00023B69 0501 0008 E4               		dc.b 5, 1, 0, 8, $E4	
00023B6E FD07 000A EC               		dc.b $FD, 7, 0, $A, $EC	
00023B73 FD09 0012 FC               		dc.b $FD, 9, 0, $12, $FC	
00023B78 0D00 0018 FC               		dc.b $D, 0, 0, $18, $FC	
00023B7D 04                         SME_N6hqJ_D97:	dc.b 4	
00023B7E F008 0000 FC               		dc.b $F0, 8, 0, 0, $FC	
00023B83 F800 0003 FC               		dc.b $F8, 0, 0, 3, $FC	
00023B88 F805 0004 04               		dc.b $F8, 5, 0, 4, 4	
00023B8D 0009 0008 EC               		dc.b 0, 9, 0, 8, $EC	
00023B92 04                         SME_N6hqJ_DAC:	dc.b 4	
00023B93 E604 0000 FA               		dc.b $E6, 4, 0, 0, $FA	
00023B98 EE0B 0002 F2               		dc.b $EE, $B, 0, 2, $F2	
00023B9D EE02 000E 0A               		dc.b $EE, 2, 0, $E, $A	
00023BA2 0E04 0011 FA               		dc.b $E, 4, 0, $11, $FA	
00023BA7 04                         SME_N6hqJ_DC1:	dc.b 4	
00023BA8 EC02 0000 F0               		dc.b $EC, 2, 0, 0, $F0	
00023BAD EC05 0003 F8               		dc.b $EC, 5, 0, 3, $F8	
00023BB2 FC08 0007 F8               		dc.b $FC, 8, 0, 7, $F8	
00023BB7 0405 000A 00               		dc.b 4, 5, 0, $A, 0	
00023BBC 05                         SME_N6hqJ_DD6:	dc.b 5	
00023BBD EE08 0000 EE               		dc.b $EE, 8, 0, 0, $EE	
00023BC2 F60D 0003 E6               		dc.b $F6, $D, 0, 3, $E6	
00023BC7 F605 000B 06               		dc.b $F6, 5, 0, $B, 6	
00023BCC 0604 000F EE               		dc.b 6, 4, 0, $F, $EE	
00023BD1 0600 0011 06               		dc.b 6, 0, 0, $11, 6	
00023BD6 04                         SME_N6hqJ_DF0:	dc.b 4	
00023BD7 E809 0000 FC               		dc.b $E8, 9, 0, 0, $FC	
00023BDC F800 0006 FC               		dc.b $F8, 0, 0, 6, $FC	
00023BE1 F805 0007 04               		dc.b $F8, 5, 0, 7, 4	
00023BE6 0009 000B EC               		dc.b 0, 9, 0, $B, $EC	
00023BEB 04                         SME_N6hqJ_E05:	dc.b 4	
00023BEC E604 0000 FA               		dc.b $E6, 4, 0, 0, $FA	
00023BF1 EE0B 0002 F2               		dc.b $EE, $B, 0, 2, $F2	
00023BF6 EE02 000E 0A               		dc.b $EE, 2, 0, $E, $A	
00023BFB 0E00 0011 FA               		dc.b $E, 0, 0, $11, $FA	
00023C00 04                         SME_N6hqJ_E1A:	dc.b 4	
00023C01 EC06 0000 E8               		dc.b $EC, 6, 0, 0, $E8	
00023C06 EC05 0006 F8               		dc.b $EC, 5, 0, 6, $F8	
00023C0B FC00 000A F8               		dc.b $FC, 0, 0, $A, $F8	
00023C10 FC06 000B 00               		dc.b $FC, 6, 0, $B, 0	
00023C15 05                         SME_N6hqJ_E2F:	dc.b 5	
00023C16 EE08 0000 EE               		dc.b $EE, 8, 0, 0, $EE	
00023C1B F60D 0003 E6               		dc.b $F6, $D, 0, 3, $E6	
00023C20 F605 000B 06               		dc.b $F6, 5, 0, $B, 6	
00023C25 0604 000F EE               		dc.b 6, 4, 0, $F, $EE	
00023C2A 0600 0011 06               		dc.b 6, 0, 0, $11, 6	
00023C2F 04                         SME_N6hqJ_E49:	dc.b 4	
00023C30 E509 0000 EE               		dc.b $E5, 9, 0, 0, $EE	
00023C35 F505 0006 EB               		dc.b $F5, 5, 0, 6, $EB	
00023C3A F505 000A FB               		dc.b $F5, 5, 0, $A, $FB	
00023C3F 050D 000E EB               		dc.b 5, $D, 0, $E, $EB	
00023C44 04                         SME_N6hqJ_E5E:	dc.b 4	
00023C45 E409 0000 EE               		dc.b $E4, 9, 0, 0, $EE	
00023C4A F405 0006 EB               		dc.b $F4, 5, 0, 6, $EB	
00023C4F F405 000A FB               		dc.b $F4, 5, 0, $A, $FB	
00023C54 040D 000E EB               		dc.b 4, $D, 0, $E, $EB	
00023C59 04                         SME_N6hqJ_E73:	dc.b 4	
00023C5A E509 0000 EE               		dc.b $E5, 9, 0, 0, $EE	
00023C5F F505 0006 EB               		dc.b $F5, 5, 0, 6, $EB	
00023C64 F505 000A FB               		dc.b $F5, 5, 0, $A, $FB	
00023C69 050D 000E EB               		dc.b 5, $D, 0, $E, $EB	
00023C6E 04                         SME_N6hqJ_E88:	dc.b 4	
00023C6F E409 0000 EE               		dc.b $E4, 9, 0, 0, $EE	
00023C74 F405 0006 EB               		dc.b $F4, 5, 0, 6, $EB	
00023C79 F405 000A FB               		dc.b $F4, 5, 0, $A, $FB	
00023C7E 040D 000E EB               		dc.b 4, $D, 0, $E, $EB	
00023C83 02                         SME_N6hqJ_E9D:	dc.b 2	
00023C84 FC02 0000 F0               		dc.b $FC, 2, 0, 0, $F0	
00023C89 F40B 0003 F8               		dc.b $F4, $B, 0, 3, $F8	
00023C8E 03                         SME_N6hqJ_EA8:	dc.b 3	
00023C8F E40A 0000 EC               		dc.b $E4, $A, 0, 0, $EC	
00023C94 FC08 0009 EC               		dc.b $FC, 8, 0, 9, $EC	
00023C99 0405 000C F1               		dc.b 4, 5, 0, $C, $F1	
00023C9E 03                         SME_N6hqJ_EB8:	dc.b 3	
00023C9F E40A 0000 EC               		dc.b $E4, $A, 0, 0, $EC	
00023CA4 FC08 0009 EC               		dc.b $FC, 8, 0, 9, $EC	
00023CA9 0405 000C F1               		dc.b 4, 5, 0, $C, $F1	
00023CAE 03                         SME_N6hqJ_EC8:	dc.b 3	
00023CAF E40A 0000 EC               		dc.b $E4, $A, 0, 0, $EC	
00023CB4 FC08 0009 EC               		dc.b $FC, 8, 0, 9, $EC	
00023CB9 0405 000C F1               		dc.b 4, 5, 0, $C, $F1	
00023CBE 03                         SME_N6hqJ_ED8:	dc.b 3	
00023CBF E50A 0000 ED               		dc.b $E5, $A, 0, 0, $ED	
00023CC4 FD08 0009 ED               		dc.b $FD, 8, 0, 9, $ED	
00023CC9 0505 000C F1               		dc.b 5, 5, 0, $C, $F1	
00023CCE 03                         SME_N6hqJ_EE8:	dc.b 3	
00023CCF E50A 0000 ED               		dc.b $E5, $A, 0, 0, $ED	
00023CD4 FD08 0009 ED               		dc.b $FD, 8, 0, 9, $ED	
00023CD9 0505 000C F1               		dc.b 5, 5, 0, $C, $F1	
00023CDE 03                         SME_N6hqJ_EF8:	dc.b 3	
00023CDF E50A 0000 ED               		dc.b $E5, $A, 0, 0, $ED	
00023CE4 FD08 0009 ED               		dc.b $FD, 8, 0, 9, $ED	
00023CE9 0505 000C F1               		dc.b 5, 5, 0, $C, $F1	
00023CEE 03                         SME_N6hqJ_F08:	dc.b 3	
00023CEF EC0B 0000 F0               		dc.b $EC, $B, 0, 0, $F0	
00023CF4 EC03 000C 08               		dc.b $EC, 3, 0, $C, 8	
00023CF9 0C05 0010 F1               		dc.b $C, 5, 0, $10, $F1	
00023CFE 03                         SME_N6hqJ_F18:	dc.b 3	
00023CFF EC0B 0000 F0               		dc.b $EC, $B, 0, 0, $F0	
00023D04 EC03 000C 08               		dc.b $EC, 3, 0, $C, 8	
00023D09 0C05 0010 F1               		dc.b $C, 5, 0, $10, $F1	
00023D0E 03                         SME_N6hqJ_F28:	dc.b 3	
00023D0F EC0B 0000 F0               		dc.b $EC, $B, 0, 0, $F0	
00023D14 EC03 000C 08               		dc.b $EC, 3, 0, $C, 8	
00023D19 0C05 0010 F1               		dc.b $C, 5, 0, $10, $F1	
00023D1E 05                         SME_N6hqJ_F38:	dc.b 5	
00023D1F EC0B 0000 F0               		dc.b $EC, $B, 0, 0, $F0	
00023D24 EC01 000C 08               		dc.b $EC, 1, 0, $C, 8	
00023D29 EC01 000E 10               		dc.b $EC, 1, 0, $E, $10	
00023D2E FC01 0010 08               		dc.b $FC, 1, 0, $10, 8	
00023D33 0C05 0012 F1               		dc.b $C, 5, 0, $12, $F1	
00023D38 04                         SME_N6hqJ_F52:	dc.b 4	
00023D39 EC07 0000 EB               		dc.b $EC, 7, 0, 0, $EB	
00023D3E EC09 0008 FB               		dc.b $EC, 9, 0, 8, $FB	
00023D43 FC05 000E FB               		dc.b $FC, 5, 0, $E, $FB	
00023D48 0C09 0012 EE               		dc.b $C, 9, 0, $12, $EE	
00023D4D 04                         SME_N6hqJ_F67:	dc.b 4	
00023D4E EC07 0000 EC               		dc.b $EC, 7, 0, 0, $EC	
00023D53 EC09 0008 FC               		dc.b $EC, 9, 0, 8, $FC	
00023D58 FC05 000E FC               		dc.b $FC, 5, 0, $E, $FC	
00023D5D 0C09 0012 EF               		dc.b $C, 9, 0, $12, $EF	
00023D62 04                         SME_N6hqJ_F7C:	dc.b 4	
00023D63 EC07 0000 EC               		dc.b $EC, 7, 0, 0, $EC	
00023D68 EC09 0008 FC               		dc.b $EC, 9, 0, 8, $FC	
00023D6D FC09 000E FC               		dc.b $FC, 9, 0, $E, $FC	
00023D72 0C09 0014 F0               		dc.b $C, 9, 0, $14, $F0	
00023D77 03                         SME_N6hqJ_F91:	dc.b 3	
00023D78 F403 0000 E8               		dc.b $F4, 3, 0, 0, $E8	
00023D7D EC0B 0004 F0               		dc.b $EC, $B, 0, 4, $F0	
00023D82 0C05 0010 F0               		dc.b $C, 5, 0, $10, $F0	
00023D87 03                         SME_N6hqJ_FA1:	dc.b 3	
00023D88 F403 0800 0C               		dc.b $F4, 3, 8, 0, $C	
00023D8D EC0B 0804 F4               		dc.b $EC, $B, 8, 4, $F4	
00023D92 0C05 0810 FC               		dc.b $C, 5, 8, $10, $FC	
00023D97 03                         SME_N6hqJ_FB1:	dc.b 3	
00023D98 F403 0800 0C               		dc.b $F4, 3, 8, 0, $C	
00023D9D EC0B 0804 F4               		dc.b $EC, $B, 8, 4, $F4	
00023DA2 0C05 0810 FC               		dc.b $C, 5, 8, $10, $FC	
00023DA7 04                         SME_N6hqJ_FC1:	dc.b 4	
00023DA8 EC0D 0000 ED               		dc.b $EC, $D, 0, 0, $ED	
00023DAD FC0D 0008 EF               		dc.b $FC, $D, 0, 8, $EF	
00023DB2 FC01 0010 0F               		dc.b $FC, 1, 0, $10, $F	
00023DB7 0C05 0012 01               		dc.b $C, 5, 0, $12, 1	
00023DBC 04                         SME_N6hqJ_FD6:	dc.b 4	
00023DBD EC0D 0000 EE               		dc.b $EC, $D, 0, 0, $EE	
00023DC2 FC0D 0008 EF               		dc.b $FC, $D, 0, 8, $EF	
00023DC7 FC01 0010 0F               		dc.b $FC, 1, 0, $10, $F	
00023DCC 0C05 0012 01               		dc.b $C, 5, 0, $12, 1	
00023DD1 04                         SME_N6hqJ_FEB:	dc.b 4	
00023DD2 EC0D 0000 EF               		dc.b $EC, $D, 0, 0, $EF	
00023DD7 FC0D 0008 EF               		dc.b $FC, $D, 0, 8, $EF	
00023DDC FC01 0010 0F               		dc.b $FC, 1, 0, $10, $F	
00023DE1 0C05 0012 01               		dc.b $C, 5, 0, $12, 1	
00023DE6 02                         SME_N6hqJ_1000:	dc.b 2	
00023DE7 EC09 0000 F4               		dc.b $EC, 9, 0, 0, $F4	
00023DEC FC0B 0006 F7               		dc.b $FC, $B, 0, 6, $F7	
00023DF2 00                         		even
00023DF2 00                         		even
00023DF2                            
00023DF2                            ; ---------------------------------------------------------------------------
00023DF2                            ; Uncompressed graphics	loading	array for Sonic
00023DF2                            ; ---------------------------------------------------------------------------
00023DF2                            SonicDynPLC:
00023DF2                            	include "_inc\Sonic dynamic pattern load cues.asm"
00023DF2                            ; --------------------------------------------------------------------------------
00023DF2                            ; Dynamic Pattern Loading Cues - output from SonMapEd - Sonic 1 format; --------------------------------------------------------------------------------
00023DF2                            
00023DF2                            SME_QQU6s:	
00023DF2 0000 0000                  		dc.w SME_QQU6s_1AC-SME_QQU6s, SME_QQU6s_1AD-SME_QQU6s	
00023DF6 0000 0000                  		dc.w SME_QQU6s_1B6-SME_QQU6s, SME_QQU6s_1BB-SME_QQU6s	
00023DFA 0000 0000                  		dc.w SME_QQU6s_1C4-SME_QQU6s, SME_QQU6s_1CD-SME_QQU6s	
00023DFE 0000 0000                  		dc.w SME_QQU6s_1D8-SME_QQU6s, SME_QQU6s_1DF-SME_QQU6s	
00023E02 0000 0000                  		dc.w SME_QQU6s_1E4-SME_QQU6s, SME_QQU6s_1E9-SME_QQU6s	
00023E06 0000 0000                  		dc.w SME_QQU6s_1EE-SME_QQU6s, SME_QQU6s_1F3-SME_QQU6s	
00023E0A 0000 0000                  		dc.w SME_QQU6s_1FC-SME_QQU6s, SME_QQU6s_205-SME_QQU6s	
00023E0E 0000 0000                  		dc.w SME_QQU6s_20C-SME_QQU6s, SME_QQU6s_215-SME_QQU6s	
00023E12 0000 0000                  		dc.w SME_QQU6s_21C-SME_QQU6s, SME_QQU6s_221-SME_QQU6s	
00023E16 0000 0000                  		dc.w SME_QQU6s_228-SME_QQU6s, SME_QQU6s_231-SME_QQU6s	
00023E1A 0000 0000                  		dc.w SME_QQU6s_238-SME_QQU6s, SME_QQU6s_23D-SME_QQU6s	
00023E1E 0000 0000                  		dc.w SME_QQU6s_246-SME_QQU6s, SME_QQU6s_251-SME_QQU6s	
00023E22 0000 0000                  		dc.w SME_QQU6s_25A-SME_QQU6s, SME_QQU6s_263-SME_QQU6s	
00023E26 0000 0000                  		dc.w SME_QQU6s_26E-SME_QQU6s, SME_QQU6s_279-SME_QQU6s	
00023E2A 0000 0000                  		dc.w SME_QQU6s_282-SME_QQU6s, SME_QQU6s_28D-SME_QQU6s	
00023E2E 0000 0000                  		dc.w SME_QQU6s_294-SME_QQU6s, SME_QQU6s_29B-SME_QQU6s	
00023E32 0000 0000                  		dc.w SME_QQU6s_2A2-SME_QQU6s, SME_QQU6s_2A7-SME_QQU6s	
00023E36 0000 0000                  		dc.w SME_QQU6s_2AE-SME_QQU6s, SME_QQU6s_2B5-SME_QQU6s	
00023E3A 0000 0000                  		dc.w SME_QQU6s_2BC-SME_QQU6s, SME_QQU6s_2C1-SME_QQU6s	
00023E3E 0000 0000                  		dc.w SME_QQU6s_2CA-SME_QQU6s, SME_QQU6s_2D5-SME_QQU6s	
00023E42 0000 0000                  		dc.w SME_QQU6s_2DE-SME_QQU6s, SME_QQU6s_2E7-SME_QQU6s	
00023E46 0000 0000                  		dc.w SME_QQU6s_2F0-SME_QQU6s, SME_QQU6s_2FB-SME_QQU6s	
00023E4A 0000 0000                  		dc.w SME_QQU6s_304-SME_QQU6s, SME_QQU6s_30D-SME_QQU6s	
00023E4E 0000 0000                  		dc.w SME_QQU6s_312-SME_QQU6s, SME_QQU6s_317-SME_QQU6s	
00023E52 0000 0000                  		dc.w SME_QQU6s_31C-SME_QQU6s, SME_QQU6s_321-SME_QQU6s	
00023E56 0000 0000                  		dc.w SME_QQU6s_32A-SME_QQU6s, SME_QQU6s_331-SME_QQU6s	
00023E5A 0000 0000                  		dc.w SME_QQU6s_33A-SME_QQU6s, SME_QQU6s_341-SME_QQU6s	
00023E5E 0000 0000                  		dc.w SME_QQU6s_346-SME_QQU6s, SME_QQU6s_34B-SME_QQU6s	
00023E62 0000 0000                  		dc.w SME_QQU6s_350-SME_QQU6s, SME_QQU6s_355-SME_QQU6s	
00023E66 0000 0000                  		dc.w SME_QQU6s_35C-SME_QQU6s, SME_QQU6s_361-SME_QQU6s	
00023E6A 0000 0000                  		dc.w SME_QQU6s_368-SME_QQU6s, SME_QQU6s_36D-SME_QQU6s	
00023E6E 0000 0000                  		dc.w SME_QQU6s_370-SME_QQU6s, SME_QQU6s_373-SME_QQU6s	
00023E72 0000 0000                  		dc.w SME_QQU6s_376-SME_QQU6s, SME_QQU6s_379-SME_QQU6s	
00023E76 0000 0000                  		dc.w SME_QQU6s_37C-SME_QQU6s, SME_QQU6s_37F-SME_QQU6s	
00023E7A 0000 0000                  		dc.w SME_QQU6s_382-SME_QQU6s, SME_QQU6s_385-SME_QQU6s	
00023E7E 0000 0000                  		dc.w SME_QQU6s_388-SME_QQU6s, SME_QQU6s_38B-SME_QQU6s	
00023E82 0000 0000                  		dc.w SME_QQU6s_38E-SME_QQU6s, SME_QQU6s_395-SME_QQU6s	
00023E86 0000 0000                  		dc.w SME_QQU6s_39C-SME_QQU6s, SME_QQU6s_3A3-SME_QQU6s	
00023E8A 0000 0000                  		dc.w SME_QQU6s_3AA-SME_QQU6s, SME_QQU6s_3AD-SME_QQU6s	
00023E8E 0000 0000                  		dc.w SME_QQU6s_3B0-SME_QQU6s, SME_QQU6s_3B5-SME_QQU6s	
00023E92 0000 0000                  		dc.w SME_QQU6s_3BA-SME_QQU6s, SME_QQU6s_3C1-SME_QQU6s	
00023E96 0000 0000                  		dc.w SME_QQU6s_3C8-SME_QQU6s, SME_QQU6s_3CD-SME_QQU6s	
00023E9A 0000 0000                  		dc.w SME_QQU6s_3D2-SME_QQU6s, SME_QQU6s_3D9-SME_QQU6s	
00023E9E 0000 0000                  		dc.w SME_QQU6s_3DE-SME_QQU6s, SME_QQU6s_3E5-SME_QQU6s	
00023EA2 0000 0000                  		dc.w SME_QQU6s_3EC-SME_QQU6s, SME_QQU6s_3F3-SME_QQU6s	
00023EA6 0000 0000                  		dc.w SME_QQU6s_3FA-SME_QQU6s, SME_QQU6s_401-SME_QQU6s	
00023EAA 0000 0000                  		dc.w SME_QQU6s_406-SME_QQU6s, SME_QQU6s_40F-SME_QQU6s	
00023EAE 0000 0000                  		dc.w SME_QQU6s_418-SME_QQU6s, SME_QQU6s_41F-SME_QQU6s	
00023EB2 0000 0000                  		dc.w SME_QQU6s_426-SME_QQU6s, SME_QQU6s_42D-SME_QQU6s	
00023EB6 0000 0000                  		dc.w SME_QQU6s_432-SME_QQU6s, SME_QQU6s_435-SME_QQU6s	
00023EBA 0000 0000                  		dc.w SME_QQU6s_43A-SME_QQU6s, SME_QQU6s_441-SME_QQU6s	
00023EBE 0000 0000                  		dc.w SME_QQU6s_448-SME_QQU6s, SME_QQU6s_44F-SME_QQU6s	
00023EC2 0000 0000                  		dc.w SME_QQU6s_454-SME_QQU6s, SME_QQU6s_459-SME_QQU6s	
00023EC6 0000 0000                  		dc.w SME_QQU6s_460-SME_QQU6s, SME_QQU6s_465-SME_QQU6s	
00023ECA 0000 0000                  		dc.w SME_QQU6s_46C-SME_QQU6s, SME_QQU6s_473-SME_QQU6s	
00023ECE 0000 0000                  		dc.w SME_QQU6s_476-SME_QQU6s, SME_QQU6s_47D-SME_QQU6s	
00023ED2 0000 0000                  		dc.w SME_QQU6s_484-SME_QQU6s, SME_QQU6s_48F-SME_QQU6s	
00023ED6 0000 0000                  		dc.w SME_QQU6s_49A-SME_QQU6s, SME_QQU6s_49F-SME_QQU6s	
00023EDA 0000 0000                  		dc.w SME_QQU6s_4A4-SME_QQU6s, SME_QQU6s_4A9-SME_QQU6s	
00023EDE 0000 0000                  		dc.w SME_QQU6s_4B0-SME_QQU6s, SME_QQU6s_4B9-SME_QQU6s	
00023EE2 0000 0000                  		dc.w SME_QQU6s_4C0-SME_QQU6s, SME_QQU6s_4C5-SME_QQU6s	
00023EE6 0000 0000                  		dc.w SME_QQU6s_4CC-SME_QQU6s, SME_QQU6s_4D5-SME_QQU6s	
00023EEA 0000 0000                  		dc.w SME_QQU6s_4DC-SME_QQU6s, SME_QQU6s_4E1-SME_QQU6s	
00023EEE 0000 0000                  		dc.w SME_QQU6s_4EA-SME_QQU6s, SME_QQU6s_4F5-SME_QQU6s	
00023EF2 0000 0000                  		dc.w SME_QQU6s_500-SME_QQU6s, SME_QQU6s_50B-SME_QQU6s	
00023EF6 0000 0000                  		dc.w SME_QQU6s_518-SME_QQU6s, SME_QQU6s_525-SME_QQU6s	
00023EFA 0000 0000                  		dc.w SME_QQU6s_530-SME_QQU6s, SME_QQU6s_53B-SME_QQU6s	
00023EFE 0000 0000                  		dc.w SME_QQU6s_542-SME_QQU6s, SME_QQU6s_549-SME_QQU6s	
00023F02 0000 0000                  		dc.w SME_QQU6s_550-SME_QQU6s, SME_QQU6s_555-SME_QQU6s	
00023F06 0000 0000                  		dc.w SME_QQU6s_55C-SME_QQU6s, SME_QQU6s_563-SME_QQU6s	
00023F0A 0000 0000                  		dc.w SME_QQU6s_56A-SME_QQU6s, SME_QQU6s_56F-SME_QQU6s	
00023F0E 0000 0000                  		dc.w SME_QQU6s_578-SME_QQU6s, SME_QQU6s_583-SME_QQU6s	
00023F12 0000 0000                  		dc.w SME_QQU6s_58C-SME_QQU6s, SME_QQU6s_595-SME_QQU6s	
00023F16 0000 0000                  		dc.w SME_QQU6s_59E-SME_QQU6s, SME_QQU6s_5A9-SME_QQU6s	
00023F1A 0000 0000                  		dc.w SME_QQU6s_5B2-SME_QQU6s, SME_QQU6s_5BB-SME_QQU6s	
00023F1E 0000 0000                  		dc.w SME_QQU6s_5C2-SME_QQU6s, SME_QQU6s_5CB-SME_QQU6s	
00023F22 0000 0000                  		dc.w SME_QQU6s_5D2-SME_QQU6s, SME_QQU6s_5D7-SME_QQU6s	
00023F26 0000 0000                  		dc.w SME_QQU6s_5DE-SME_QQU6s, SME_QQU6s_5E7-SME_QQU6s	
00023F2A 0000 0000                  		dc.w SME_QQU6s_5EE-SME_QQU6s, SME_QQU6s_5F3-SME_QQU6s	
00023F2E 0000 0000                  		dc.w SME_QQU6s_5FE-SME_QQU6s, SME_QQU6s_60B-SME_QQU6s	
00023F32 0000 0000                  		dc.w SME_QQU6s_616-SME_QQU6s, SME_QQU6s_621-SME_QQU6s	
00023F36 0000 0000                  		dc.w SME_QQU6s_62E-SME_QQU6s, SME_QQU6s_63B-SME_QQU6s	
00023F3A 0000 0000                  		dc.w SME_QQU6s_646-SME_QQU6s, SME_QQU6s_653-SME_QQU6s	
00023F3E 0000 0000                  		dc.w SME_QQU6s_65A-SME_QQU6s, SME_QQU6s_661-SME_QQU6s	
00023F42 0000 0000                  		dc.w SME_QQU6s_668-SME_QQU6s, SME_QQU6s_66D-SME_QQU6s	
00023F46 0000 0000                  		dc.w SME_QQU6s_674-SME_QQU6s, SME_QQU6s_67B-SME_QQU6s	
00023F4A 0000 0000                  		dc.w SME_QQU6s_682-SME_QQU6s, SME_QQU6s_687-SME_QQU6s	
00023F4E 0000 0000                  		dc.w SME_QQU6s_690-SME_QQU6s, SME_QQU6s_69B-SME_QQU6s	
00023F52 0000 0000                  		dc.w SME_QQU6s_6A6-SME_QQU6s, SME_QQU6s_6AF-SME_QQU6s	
00023F56 0000 0000                  		dc.w SME_QQU6s_6B8-SME_QQU6s, SME_QQU6s_6C3-SME_QQU6s	
00023F5A 0000 0000                  		dc.w SME_QQU6s_6CE-SME_QQU6s, SME_QQU6s_6D9-SME_QQU6s	
00023F5E 0000 0000                  		dc.w SME_QQU6s_6E2-SME_QQU6s, SME_QQU6s_6EB-SME_QQU6s	
00023F62 0000 0000                  		dc.w SME_QQU6s_6F4-SME_QQU6s, SME_QQU6s_6FF-SME_QQU6s	
00023F66 0000 0000                  		dc.w SME_QQU6s_708-SME_QQU6s, SME_QQU6s_711-SME_QQU6s	
00023F6A 0000 0000                  		dc.w SME_QQU6s_71A-SME_QQU6s, SME_QQU6s_725-SME_QQU6s	
00023F6E 0000 0000                  		dc.w SME_QQU6s_72E-SME_QQU6s, SME_QQU6s_737-SME_QQU6s	
00023F72 0000 0000                  		dc.w SME_QQU6s_740-SME_QQU6s, SME_QQU6s_749-SME_QQU6s	
00023F76 0000 0000                  		dc.w SME_QQU6s_74E-SME_QQU6s, SME_QQU6s_755-SME_QQU6s	
00023F7A 0000 0000                  		dc.w SME_QQU6s_75C-SME_QQU6s, SME_QQU6s_763-SME_QQU6s	
00023F7E 0000 0000                  		dc.w SME_QQU6s_76A-SME_QQU6s, SME_QQU6s_771-SME_QQU6s	
00023F82 0000 0000                  		dc.w SME_QQU6s_778-SME_QQU6s, SME_QQU6s_77F-SME_QQU6s	
00023F86 0000 0000                  		dc.w SME_QQU6s_786-SME_QQU6s, SME_QQU6s_78D-SME_QQU6s	
00023F8A 0000 0000                  		dc.w SME_QQU6s_798-SME_QQU6s, SME_QQU6s_7A1-SME_QQU6s	
00023F8E 0000 0000                  		dc.w SME_QQU6s_7AA-SME_QQU6s, SME_QQU6s_7B3-SME_QQU6s	
00023F92 0000 0000                  		dc.w SME_QQU6s_7BA-SME_QQU6s, SME_QQU6s_7C1-SME_QQU6s	
00023F96 0000 0000                  		dc.w SME_QQU6s_7C8-SME_QQU6s, SME_QQU6s_7D1-SME_QQU6s	
00023F9A 0000 0000                  		dc.w SME_QQU6s_7DA-SME_QQU6s, SME_QQU6s_7E3-SME_QQU6s	
00023F9E 00                         SME_QQU6s_1AC:	dc.b 0	
00023F9F 0430 0030 0450 0850 0E     SME_QQU6s_1AD:	dc.b 4, $30, 0, $30, 4, $50, 8, $50, $E	
00023FA8 02B0 1450 20               SME_QQU6s_1B6:	dc.b 2, $B0, $14, $50, $20	
00023FAD 0430 2630 2A30 2E50 32     SME_QQU6s_1BB:	dc.b 4, $30, $26, $30, $2A, $30, $2E, $50, $32	
00023FB6 0430 2630 3830 2E50 32     SME_QQU6s_1C4:	dc.b 4, $30, $26, $30, $38, $30, $2E, $50, $32	
00023FBF 0530 2630 3830 2E10 3230+  SME_QQU6s_1CD:	dc.b 5, $30, $26, $30, $38, $30, $2E, $10, $32, $30, $3C	
00023FCA 0330 2670 4050 32          SME_QQU6s_1D8:	dc.b 3, $30, $26, $70, $40, $50, $32	
00023FD1 02B0 4810 54               SME_QQU6s_1DF:	dc.b 2, $B0, $48, $10, $54	
00023FD6 02B0 5630 62               SME_QQU6s_1E4:	dc.b 2, $B0, $56, $30, $62	
00023FDB 02B0 5630 66               SME_QQU6s_1E9:	dc.b 2, $B0, $56, $30, $66	
00023FE0 02B0 6A70 76               SME_QQU6s_1EE:	dc.b 2, $B0, $6A, $70, $76	
00023FE5 0430 7E30 8250 8650 0E     SME_QQU6s_1F3:	dc.b 4, $30, $7E, $30, $82, $50, $86, $50, $E	
00023FEE 0430 8C30 9030 9450 0E     SME_QQU6s_1FC:	dc.b 4, $30, $8C, $30, $90, $30, $94, $50, $E	
00023FF7 0370 9810 A0F0 A2          SME_QQU6s_205:	dc.b 3, $70, $98, $10, $A0, $F0, $A2	
00023FFE 0470 9810 B2B0 B410 C0     SME_QQU6s_20C:	dc.b 4, $70, $98, $10, $B2, $B0, $B4, $10, $C0	
00024007 0370 C250 CA30 D0          SME_QQU6s_215:	dc.b 3, $70, $C2, $50, $CA, $30, $D0	
0002400E 0250 D4F0 DA               SME_QQU6s_21C:	dc.b 2, $50, $D4, $F0, $DA	
00024013 0350 D4F0 EA10 FA          SME_QQU6s_221:	dc.b 3, $50, $D4, $F0, $EA, $10, $FA	
0002401A 0450 D410 FCB0 FE11 0A     SME_QQU6s_228:	dc.b 4, $50, $D4, $10, $FC, $B0, $FE, $11, $A	
00024023 0370 C251 0C31 12          SME_QQU6s_231:	dc.b 3, $70, $C2, $51, $C, $31, $12	
0002402A 0270 98B1 16               SME_QQU6s_238:	dc.b 2, $70, $98, $B1, $16	
0002402F 0451 2251 2831 2E11 32     SME_QQU6s_23D:	dc.b 4, $51, $22, $51, $28, $31, $2E, $11, $32	
00024038 0551 2211 3471 3631 3E11+  SME_QQU6s_246:	dc.b 5, $51, $22, $11, $34, $71, $36, $31, $3E, $11, $42	
00024043 0471 4431 4C11 5031 52     SME_QQU6s_251:	dc.b 4, $71, $44, $31, $4C, $11, $50, $31, $52	
0002404C 0451 5611 5C31 5EB1 62     SME_QQU6s_25A:	dc.b 4, $51, $56, $11, $5C, $31, $5E, $B1, $62	
00024055 0551 5611 6E71 7011 7831+  SME_QQU6s_263:	dc.b 5, $51, $56, $11, $6E, $71, $70, $11, $78, $31, $7A	
00024060 0551 5611 7E71 8031 8811+  SME_QQU6s_26E:	dc.b 5, $51, $56, $11, $7E, $71, $80, $31, $88, $11, $8C	
0002406B 0471 4431 8E11 9231 94     SME_QQU6s_279:	dc.b 4, $71, $44, $31, $8E, $11, $92, $31, $94	
00024074 0551 2251 9811 9E11 A031+  SME_QQU6s_282:	dc.b 5, $51, $22, $51, $98, $11, $9E, $11, $A0, $31, $A2	
0002407F 0371 A6B1 AE31 BA          SME_QQU6s_28D:	dc.b 3, $71, $A6, $B1, $AE, $31, $BA	
00024086 0371 A6B1 BE31 CA          SME_QQU6s_294:	dc.b 3, $71, $A6, $B1, $BE, $31, $CA	
0002408D 0371 CE31 D631 DA          SME_QQU6s_29B:	dc.b 3, $71, $CE, $31, $D6, $31, $DA	
00024094 0271 DEB1 E6               SME_QQU6s_2A2:	dc.b 2, $71, $DE, $B1, $E6	
00024099 0371 DE31 F2B1 F6          SME_QQU6s_2A7:	dc.b 3, $71, $DE, $31, $F2, $B1, $F6	
000240A0 0371 DEB2 0232 0E          SME_QQU6s_2AE:	dc.b 3, $71, $DE, $B2, 2, $32, $E	
000240A7 0371 CE32 1232 16          SME_QQU6s_2B5:	dc.b 3, $71, $CE, $32, $12, $32, $16	
000240AE 0271 A6B2 1A               SME_QQU6s_2BC:	dc.b 2, $71, $A6, $B2, $1A	
000240B3 0432 2672 2A72 3212 3A     SME_QQU6s_2C1:	dc.b 4, $32, $26, $72, $2A, $72, $32, $12, $3A	
000240BC 0532 3C52 4072 2A72 4612+  SME_QQU6s_2CA:	dc.b 5, $32, $3C, $52, $40, $72, $2A, $72, $46, $12, $3A	
000240C7 0472 4E72 5632 5E12 62     SME_QQU6s_2D5:	dc.b 4, $72, $4E, $72, $56, $32, $5E, $12, $62	
000240D0 0472 6472 6C52 7412 7A     SME_QQU6s_2DE:	dc.b 4, $72, $64, $72, $6C, $52, $74, $12, $7A	
000240D9 0452 7C72 6C72 8212 7A     SME_QQU6s_2E7:	dc.b 4, $52, $7C, $72, $6C, $72, $82, $12, $7A	
000240E2 0532 8A52 8E72 6C72 9412+  SME_QQU6s_2F0:	dc.b 5, $32, $8A, $52, $8E, $72, $6C, $72, $94, $12, $7A	
000240ED 0472 9C72 5632 A412 62     SME_QQU6s_2FB:	dc.b 4, $72, $9C, $72, $56, $32, $A4, $12, $62	
000240F6 0472 A872 2A52 B012 3A     SME_QQU6s_304:	dc.b 4, $72, $A8, $72, $2A, $52, $B0, $12, $3A	
000240FF 0252 B6F2 BC               SME_QQU6s_30D:	dc.b 2, $52, $B6, $F2, $BC	
00024104 0252 CCF2 D2               SME_QQU6s_312:	dc.b 2, $52, $CC, $F2, $D2	
00024109 0252 B6F2 E2               SME_QQU6s_317:	dc.b 2, $52, $B6, $F2, $E2	
0002410E 0252 CCF2 F2               SME_QQU6s_31C:	dc.b 2, $52, $CC, $F2, $F2	
00024113 0453 0213 0873 0A53 12     SME_QQU6s_321:	dc.b 4, $53, 2, $13, 8, $73, $A, $53, $12	
0002411C 0373 1873 2053 28          SME_QQU6s_32A:	dc.b 3, $73, $18, $73, $20, $53, $28	
00024123 0453 0213 2E73 3053 38     SME_QQU6s_331:	dc.b 4, $53, 2, $13, $2E, $73, $30, $53, $38	
0002412C 0373 1873 3E53 46          SME_QQU6s_33A:	dc.b 3, $73, $18, $73, $3E, $53, $46	
00024133 0273 4CB3 54               SME_QQU6s_341:	dc.b 2, $73, $4C, $B3, $54	
00024138 0273 60B3 68               SME_QQU6s_346:	dc.b 2, $73, $60, $B3, $68	
0002413D 0273 4CB3 74               SME_QQU6s_34B:	dc.b 2, $73, $4C, $B3, $74	
00024142 0273 60B3 80               SME_QQU6s_350:	dc.b 2, $73, $60, $B3, $80	
00024147 0313 8C73 8EB3 96          SME_QQU6s_355:	dc.b 3, $13, $8C, $73, $8E, $B3, $96	
0002414E 0273 A2B3 AA               SME_QQU6s_35C:	dc.b 2, $73, $A2, $B3, $AA	
00024153 0313 B673 8EB3 C0          SME_QQU6s_361:	dc.b 3, $13, $B6, $73, $8E, $B3, $C0	
0002415A 0273 A2B3 CC               SME_QQU6s_368:	dc.b 2, $73, $A2, $B3, $CC	
0002415F 01F4 00                    SME_QQU6s_36D:	dc.b 1, $F4, 0	
00024162 01F4 10                    SME_QQU6s_370:	dc.b 1, $F4, $10	
00024165 01F4 20                    SME_QQU6s_373:	dc.b 1, $F4, $20	
00024168 01F4 30                    SME_QQU6s_376:	dc.b 1, $F4, $30	
0002416B 01F4 40                    SME_QQU6s_379:	dc.b 1, $F4, $40	
0002416E 01F4 50                    SME_QQU6s_37C:	dc.b 1, $F4, $50	
00024171 01F4 60                    SME_QQU6s_37F:	dc.b 1, $F4, $60	
00024174 01F4 70                    SME_QQU6s_382:	dc.b 1, $F4, $70	
00024177 01F4 80                    SME_QQU6s_385:	dc.b 1, $F4, $80	
0002417A 01F4 90                    SME_QQU6s_388:	dc.b 1, $F4, $90	
0002417D 01F4 A0                    SME_QQU6s_38B:	dc.b 1, $F4, $A0	
00024180 0353 D853 DE73 E4          SME_QQU6s_38E:	dc.b 3, $53, $D8, $53, $DE, $73, $E4	
00024187 0353 D853 EC53 F2          SME_QQU6s_395:	dc.b 3, $53, $D8, $53, $EC, $53, $F2	
0002418E 0353 D853 DE73 B8          SME_QQU6s_39C:	dc.b 3, $53, $D8, $53, $DE, $73, $B8	
00024195 0353 D853 EC54 B0          SME_QQU6s_3A3:	dc.b 3, $53, $D8, $53, $EC, $54, $B0	
0002419C 01B4 B6                    SME_QQU6s_3AA:	dc.b 1, $B4, $B6	
0002419F 01F4 C2                    SME_QQU6s_3AD:	dc.b 1, $F4, $C2	
000241A2 0214 D2F4 D4               SME_QQU6s_3B0:	dc.b 2, $14, $D2, $F4, $D4	
000241A7 0234 E4F4 E8               SME_QQU6s_3B5:	dc.b 2, $34, $E4, $F4, $E8	
000241AC 03F4 F815 0835 0A          SME_QQU6s_3BA:	dc.b 3, $F4, $F8, $15, 8, $35, $A	
000241B3 03F5 0E15 1E35 20          SME_QQU6s_3C1:	dc.b 3, $F5, $E, $15, $1E, $35, $20	
000241BA 02B5 2455 30               SME_QQU6s_3C8:	dc.b 2, $B5, $24, $55, $30	
000241BF 02B5 3655 42               SME_QQU6s_3CD:	dc.b 2, $B5, $36, $55, $42	
000241C4 0335 48B5 4C15 58          SME_QQU6s_3D2:	dc.b 3, $35, $48, $B5, $4C, $15, $58	
000241CB 0215 5A75 5C               SME_QQU6s_3D9:	dc.b 2, $15, $5A, $75, $5C	
000241D0 0335 48B5 4C15 58          SME_QQU6s_3DE:	dc.b 3, $35, $48, $B5, $4C, $15, $58	
000241D7 0315 64B5 6615 72          SME_QQU6s_3E5:	dc.b 3, $15, $64, $B5, $66, $15, $72	
000241DE 0315 64B5 6615 72          SME_QQU6s_3EC:	dc.b 3, $15, $64, $B5, $66, $15, $72	
000241E5 0335 74B5 7815 84          SME_QQU6s_3F3:	dc.b 3, $35, $74, $B5, $78, $15, $84	
000241EC 0355 86F5 8C15 9C          SME_QQU6s_3FA:	dc.b 3, $55, $86, $F5, $8C, $15, $9C	
000241F3 02B5 9E35 AA               SME_QQU6s_401:	dc.b 2, $B5, $9E, $35, $AA	
000241F8 0415 AEB5 B015 BC75 BE     SME_QQU6s_406:	dc.b 4, $15, $AE, $B5, $B0, $15, $BC, $75, $BE	
00024201 0415 AEB5 C615 BC75 BE     SME_QQU6s_40F:	dc.b 4, $15, $AE, $B5, $C6, $15, $BC, $75, $BE	
0002420A 0375 D215 DAB5 DC          SME_QQU6s_418:	dc.b 3, $75, $D2, $15, $DA, $B5, $DC	
00024211 0355 E8B5 EE15 FA          SME_QQU6s_41F:	dc.b 3, $55, $E8, $B5, $EE, $15, $FA	
00024218 03B5 FC16 0836 0A          SME_QQU6s_426:	dc.b 3, $B5, $FC, $16, 8, $36, $A	
0002421F 02B6 0E16 1A               SME_QQU6s_42D:	dc.b 2, $B6, $E, $16, $1A	
00024224 01F6 1C                    SME_QQU6s_432:	dc.b 1, $F6, $1C	
00024227 02B6 2C16 38               SME_QQU6s_435:	dc.b 2, $B6, $2C, $16, $38	
0002422C 0316 3AB6 3C16 48          SME_QQU6s_43A:	dc.b 3, $16, $3A, $B6, $3C, $16, $48	
00024233 0356 4AB6 5036 5C          SME_QQU6s_441:	dc.b 3, $56, $4A, $B6, $50, $36, $5C	
0002423A 0336 60B6 6416 70          SME_QQU6s_448:	dc.b 3, $36, $60, $B6, $64, $16, $70	
00024241 02B6 7216 7E               SME_QQU6s_44F:	dc.b 2, $B6, $72, $16, $7E	
00024246 0216 80B6 82               SME_QQU6s_454:	dc.b 2, $16, $80, $B6, $82	
0002424B 0336 8EB6 9216 9E          SME_QQU6s_459:	dc.b 3, $36, $8E, $B6, $92, $16, $9E	
00024252 0236 A0F6 A4               SME_QQU6s_460:	dc.b 2, $36, $A0, $F6, $A4	
00024257 0376 B436 BC56 C0          SME_QQU6s_465:	dc.b 3, $76, $B4, $36, $BC, $56, $C0	
0002425E 0376 C636 BC56 CE          SME_QQU6s_46C:	dc.b 3, $76, $C6, $36, $BC, $56, $CE	
00024265 01B7 D6                    SME_QQU6s_473:	dc.b 1, $B7, $D6	
00024268 03B7 E217 EE57 F0          SME_QQU6s_476:	dc.b 3, $B7, $E2, $17, $EE, $57, $F0	
0002426F 0387 F60A 1888 00          SME_QQU6s_47D:	dc.b 3, $87, $F6, $A, $18, $88, 0	
00024276 0528 0918 0C38 0E88 1208+  SME_QQU6s_484:	dc.b 5, $28, 9, $18, $C, $38, $E, $88, $12, 8, $1B	
00024281 0528 1C18 1F38 0E88 1208+  SME_QQU6s_48F:	dc.b 5, $28, $1C, $18, $1F, $38, $E, $88, $12, 8, $1B	
0002428C 0288 2188 2A               SME_QQU6s_49A:	dc.b 2, $88, $21, $88, $2A	
00024291 0288 3388 2A               SME_QQU6s_49F:	dc.b 2, $88, $33, $88, $2A	
00024296 0288 3C88 2A               SME_QQU6s_4A4:	dc.b 2, $88, $3C, $88, $2A	
0002429B 03B6 D410 A0F0 A2          SME_QQU6s_4A9:	dc.b 3, $B6, $D4, $10, $A0, $F0, $A2	
000242A2 04B6 D410 B2B0 B410 C0     SME_QQU6s_4B0:	dc.b 4, $B6, $D4, $10, $B2, $B0, $B4, $10, $C0	
000242AB 03B6 E050 CA30 D0          SME_QQU6s_4B9:	dc.b 3, $B6, $E0, $50, $CA, $30, $D0	
000242B2 0286 ECF0 DA               SME_QQU6s_4C0:	dc.b 2, $86, $EC, $F0, $DA	
000242B7 0386 ECF0 EA10 FA          SME_QQU6s_4C5:	dc.b 3, $86, $EC, $F0, $EA, $10, $FA	
000242BE 0486 EC10 FCB0 FE11 0A     SME_QQU6s_4CC:	dc.b 4, $86, $EC, $10, $FC, $B0, $FE, $11, $A	
000242C7 03B6 E051 0C31 12          SME_QQU6s_4D5:	dc.b 3, $B6, $E0, $51, $C, $31, $12	
000242CE 02B6 D4B1 16               SME_QQU6s_4DC:	dc.b 2, $B6, $D4, $B1, $16	
000242D3 0476 F531 2E51 2811 32     SME_QQU6s_4E1:	dc.b 4, $76, $F5, $31, $2E, $51, $28, $11, $32	
000242DC 0576 F511 3471 3631 3E11+  SME_QQU6s_4EA:	dc.b 5, $76, $F5, $11, $34, $71, $36, $31, $3E, $11, $42	
000242E7 0586 FD31 4C07 0611 5031+  SME_QQU6s_4F5:	dc.b 5, $86, $FD, $31, $4C, 7, 6, $11, $50, $31, $52	
000242F2 0507 0777 0811 5C31 5EB1+  SME_QQU6s_500:	dc.b 5, 7, 7, $77, 8, $11, $5C, $31, $5E, $B1, $62	
000242FD 0607 0777 0811 6E11 7871+  SME_QQU6s_50B:	dc.b 6, 7, 7, $77, 8, $11, $6E, $11, $78, $71, $70, $31, $7A	
0002430A 0607 0777 0811 7E71 8031+  SME_QQU6s_518:	dc.b 6, 7, 7, $77, 8, $11, $7E, $71, $80, $31, $88, $11, $8C	
00024317 0586 FD31 8E07 0611 9231+  SME_QQU6s_525:	dc.b 5, $86, $FD, $31, $8E, 7, 6, $11, $92, $31, $94	
00024322 0576 F511 9E51 9801 A031+  SME_QQU6s_530:	dc.b 5, $76, $F5, $11, $9E, $51, $98, 1, $A0, $31, $A2	
0002432D 03B7 10B1 AE31 BA          SME_QQU6s_53B:	dc.b 3, $B7, $10, $B1, $AE, $31, $BA	
00024334 03B7 10B1 BE31 CA          SME_QQU6s_542:	dc.b 3, $B7, $10, $B1, $BE, $31, $CA	
0002433B 03B7 1C31 D631 DA          SME_QQU6s_549:	dc.b 3, $B7, $1C, $31, $D6, $31, $DA	
00024342 0287 28B1 E6               SME_QQU6s_550:	dc.b 2, $87, $28, $B1, $E6	
00024347 0387 2831 F2B1 F6          SME_QQU6s_555:	dc.b 3, $87, $28, $31, $F2, $B1, $F6	
0002434E 0387 28B2 0232 0E          SME_QQU6s_55C:	dc.b 3, $87, $28, $B2, 2, $32, $E	
00024355 03B7 1C32 1232 16          SME_QQU6s_563:	dc.b 3, $B7, $1C, $32, $12, $32, $16	
0002435C 02B7 10B2 1A               SME_QQU6s_56A:	dc.b 2, $B7, $10, $B2, $1A	
00024361 0432 2677 3172 3207 39     SME_QQU6s_56F:	dc.b 4, $32, $26, $77, $31, $72, $32, 7, $39	
0002436A 0532 3C52 4077 3172 4607+  SME_QQU6s_578:	dc.b 5, $32, $3C, $52, $40, $77, $31, $72, $46, 7, $39	
00024375 0472 4E77 3A32 5E17 42     SME_QQU6s_583:	dc.b 4, $72, $4E, $77, $3A, $32, $5E, $17, $42	
0002437E 0472 64B7 4452 7407 50     SME_QQU6s_58C:	dc.b 4, $72, $64, $B7, $44, $52, $74, 7, $50	
00024387 0452 7CB7 4472 8207 50     SME_QQU6s_595:	dc.b 4, $52, $7C, $B7, $44, $72, $82, 7, $50	
00024390 0532 8A52 8EB7 4472 9407+  SME_QQU6s_59E:	dc.b 5, $32, $8A, $52, $8E, $B7, $44, $72, $94, 7, $50	
0002439B 0472 9C77 3A32 A417 42     SME_QQU6s_5A9:	dc.b 4, $72, $9C, $77, $3A, $32, $A4, $17, $42	
000243A4 0472 A877 3152 B007 39     SME_QQU6s_5B2:	dc.b 4, $72, $A8, $77, $31, $52, $B0, 7, $39	
000243AD 03B7 5110 A0F0 A2          SME_QQU6s_5BB:	dc.b 3, $B7, $51, $10, $A0, $F0, $A2	
000243B4 04B7 5110 B2B0 B410 C0     SME_QQU6s_5C2:	dc.b 4, $B7, $51, $10, $B2, $B0, $B4, $10, $C0	
000243BD 03B7 5D50 CA30 D0          SME_QQU6s_5CB:	dc.b 3, $B7, $5D, $50, $CA, $30, $D0	
000243C4 0287 69F0 DA               SME_QQU6s_5D2:	dc.b 2, $87, $69, $F0, $DA	
000243C9 0387 69F0 EA10 FA          SME_QQU6s_5D7:	dc.b 3, $87, $69, $F0, $EA, $10, $FA	
000243D0 0487 6910 FCB0 FE11 0A     SME_QQU6s_5DE:	dc.b 4, $87, $69, $10, $FC, $B0, $FE, $11, $A	
000243D9 03B7 5D51 0C31 12          SME_QQU6s_5E7:	dc.b 3, $B7, $5D, $51, $C, $31, $12	
000243E0 02B7 51B1 16               SME_QQU6s_5EE:	dc.b 2, $B7, $51, $B1, $16	
000243E5 0517 7277 7451 2831 2E11+  SME_QQU6s_5F3:	dc.b 5, $17, $72, $77, $74, $51, $28, $31, $2E, $11, $32	
000243F0 0617 7277 7411 3471 3631+  SME_QQU6s_5FE:	dc.b 6, $17, $72, $77, $74, $11, $34, $71, $36, $31, $3E, $11, $42	
000243FD 0557 7C37 8231 4C11 5031+  SME_QQU6s_60B:	dc.b 5, $57, $7C, $37, $82, $31, $4C, $11, $50, $31, $52	
00024408 0517 8677 8811 5C31 5EB1+  SME_QQU6s_616:	dc.b 5, $17, $86, $77, $88, $11, $5C, $31, $5E, $B1, $62	
00024413 0617 8677 8811 6E11 7871+  SME_QQU6s_621:	dc.b 6, $17, $86, $77, $88, $11, $6E, $11, $78, $71, $70, $31, $7A	
00024420 0617 8677 8811 7E71 8031+  SME_QQU6s_62E:	dc.b 6, $17, $86, $77, $88, $11, $7E, $71, $80, $31, $88, $11, $8C	
0002442D 0557 7C37 8231 8E11 9231+  SME_QQU6s_63B:	dc.b 5, $57, $7C, $37, $82, $31, $8E, $11, $92, $31, $94	
00024438 0617 7277 7451 9811 9E31+  SME_QQU6s_646:	dc.b 6, $17, $72, $77, $74, $51, $98, $11, $9E, $31, $A2, $11, $A0	
00024445 03B7 90B1 AE31 BA          SME_QQU6s_653:	dc.b 3, $B7, $90, $B1, $AE, $31, $BA	
0002444C 03B7 90B1 BE31 CA          SME_QQU6s_65A:	dc.b 3, $B7, $90, $B1, $BE, $31, $CA	
00024453 03B7 9C31 D631 DA          SME_QQU6s_661:	dc.b 3, $B7, $9C, $31, $D6, $31, $DA	
0002445A 0287 A8B1 E6               SME_QQU6s_668:	dc.b 2, $87, $A8, $B1, $E6	
0002445F 0387 A831 F2B1 F6          SME_QQU6s_66D:	dc.b 3, $87, $A8, $31, $F2, $B1, $F6	
00024466 0387 A8B2 0232 0E          SME_QQU6s_674:	dc.b 3, $87, $A8, $B2, 2, $32, $E	
0002446D 03B7 9C32 1232 16          SME_QQU6s_67B:	dc.b 3, $B7, $9C, $32, $12, $32, $16	
00024474 02B7 90B2 1A               SME_QQU6s_682:	dc.b 2, $B7, $90, $B2, $1A	
00024479 0432 26B7 B172 3207 BD     SME_QQU6s_687:	dc.b 4, $32, $26, $B7, $B1, $72, $32, 7, $BD	
00024482 0532 3C52 40B7 B172 4607+  SME_QQU6s_690:	dc.b 5, $32, $3C, $52, $40, $B7, $B1, $72, $46, 7, $BD	
0002448D 0572 4E17 BE77 C032 5E07+  SME_QQU6s_69B:	dc.b 5, $72, $4E, $17, $BE, $77, $C0, $32, $5E, 7, $C8	
00024498 0472 64B7 C952 7407 D5     SME_QQU6s_6A6:	dc.b 4, $72, $64, $B7, $C9, $52, $74, 7, $D5	
000244A1 0452 7CB7 C972 8207 D5     SME_QQU6s_6AF:	dc.b 4, $52, $7C, $B7, $C9, $72, $82, 7, $D5	
000244AA 0532 8A52 8EB7 C972 9407+  SME_QQU6s_6B8:	dc.b 5, $32, $8A, $52, $8E, $B7, $C9, $72, $94, 7, $D5	
000244B5 0572 9C17 BE77 C032 A407+  SME_QQU6s_6C3:	dc.b 5, $72, $9C, $17, $BE, $77, $C0, $32, $A4, 7, $C8	
000244C0 0572 A817 B277 B552 B007+  SME_QQU6s_6CE:	dc.b 5, $72, $A8, $17, $B2, $77, $B5, $52, $B0, 7, $BD	
000244CB 0428 4508 4838 4958 4D     SME_QQU6s_6D9:	dc.b 4, $28, $45, 8, $48, $38, $49, $58, $4D	
000244D4 0418 53B8 5528 6118 64     SME_QQU6s_6E2:	dc.b 4, $18, $53, $B8, $55, $28, $61, $18, $64	
000244DD 0428 6638 6928 6D38 70     SME_QQU6s_6EB:	dc.b 4, $28, $66, $38, $69, $28, $6D, $38, $70	
000244E6 0528 7478 7738 7F18 8308+  SME_QQU6s_6F4:	dc.b 5, $28, $74, $78, $77, $38, $7F, $18, $83, 8, $85	
000244F1 0458 8608 8C38 4958 8D     SME_QQU6s_6FF:	dc.b 4, $58, $86, 8, $8C, $38, $49, $58, $8D	
000244FA 0418 93B8 9528 6108 A1     SME_QQU6s_708:	dc.b 4, $18, $93, $B8, $95, $28, $61, 8, $A1	
00024503 0458 A238 6908 A858 A9     SME_QQU6s_711:	dc.b 4, $58, $A2, $38, $69, 8, $A8, $58, $A9	
0002450C 0528 7478 AF38 B718 BB08+  SME_QQU6s_71A:	dc.b 5, $28, $74, $78, $AF, $38, $B7, $18, $BB, 8, $85	
00024517 0458 BD38 C338 C778 CB     SME_QQU6s_725:	dc.b 4, $58, $BD, $38, $C3, $38, $C7, $78, $CB	
00024520 0458 D338 D938 C778 DD     SME_QQU6s_72E:	dc.b 4, $58, $D3, $38, $D9, $38, $C7, $78, $DD	
00024529 0458 BD38 C338 C778 E5     SME_QQU6s_737:	dc.b 4, $58, $BD, $38, $C3, $38, $C7, $78, $E5	
00024532 0458 D338 D938 C778 ED     SME_QQU6s_740:	dc.b 4, $58, $D3, $38, $D9, $38, $C7, $78, $ED	
0002453B 0228 F5B8 F8               SME_QQU6s_749:	dc.b 2, $28, $F5, $B8, $F8	
00024540 0389 0429 0D39 10          SME_QQU6s_74E:	dc.b 3, $89, 4, $29, $D, $39, $10	
00024547 0388 3329 0D39 10          SME_QQU6s_755:	dc.b 3, $88, $33, $29, $D, $39, $10	
0002454E 0388 3C29 0D39 10          SME_QQU6s_75C:	dc.b 3, $88, $3C, $29, $D, $39, $10	
00024555 0389 0429 0D39 14          SME_QQU6s_763:	dc.b 3, $89, 4, $29, $D, $39, $14	
0002455C 0388 3329 0D39 14          SME_QQU6s_76A:	dc.b 3, $88, $33, $29, $D, $39, $14	
00024563 0388 3C29 0D39 14          SME_QQU6s_771:	dc.b 3, $88, $3C, $29, $D, $39, $14	
0002456A 03B9 1839 2439 28          SME_QQU6s_778:	dc.b 3, $B9, $18, $39, $24, $39, $28	
00024571 03B9 2C39 3839 28          SME_QQU6s_77F:	dc.b 3, $B9, $2C, $39, $38, $39, $28	
00024578 03B9 3C39 4839 28          SME_QQU6s_786:	dc.b 3, $B9, $3C, $39, $48, $39, $28	
0002457F 05B9 4C19 2419 5819 3A39+  SME_QQU6s_78D:	dc.b 5, $B9, $4C, $19, $24, $19, $58, $19, $3A, $39, $28	
0002458A 0479 5A59 6239 6859 6C     SME_QQU6s_798:	dc.b 4, $79, $5A, $59, $62, $39, $68, $59, $6C	
00024593 0479 7259 6239 7A59 7E     SME_QQU6s_7A1:	dc.b 4, $79, $72, $59, $62, $39, $7A, $59, $7E	
0002459C 0479 8459 6259 8C59 92     SME_QQU6s_7AA:	dc.b 4, $79, $84, $59, $62, $59, $8C, $59, $92	
000245A5 0339 98B9 9C39 A8          SME_QQU6s_7B3:	dc.b 3, $39, $98, $B9, $9C, $39, $A8	
000245AC 0339 ACB9 B039 BC          SME_QQU6s_7BA:	dc.b 3, $39, $AC, $B9, $B0, $39, $BC	
000245B3 0339 C0B9 C439 BC          SME_QQU6s_7C1:	dc.b 3, $39, $C0, $B9, $C4, $39, $BC	
000245BA 0479 D079 D819 E039 E2     SME_QQU6s_7C8:	dc.b 4, $79, $D0, $79, $D8, $19, $E0, $39, $E2	
000245C3 0479 E679 EE19 E039 E2     SME_QQU6s_7D1:	dc.b 4, $79, $E6, $79, $EE, $19, $E0, $39, $E2	
000245CC 0479 F679 FE19 E039 E2     SME_QQU6s_7DA:	dc.b 4, $79, $F6, $79, $FE, $19, $E0, $39, $E2	
000245D5 025A 06BA 0C               SME_QQU6s_7E3:	dc.b 2, $5A, 6, $BA, $C	
000245DA                            		even
000245DA                            		even
000245DA                            
000245DA                            ; ---------------------------------------------------------------------------
000245DA                            ; Uncompressed graphics	- Sonic
000245DA                            ; ---------------------------------------------------------------------------
000245DA                            Art_Sonic:	incbin	artunc\sonic.bin	; Sonic
000388FA                            		even
000388FA                            Art_Dust:	incbin	artunc\spindust.bin
0003A23A                            		even
0003A23A                            ; ---------------------------------------------------------------------------
0003A23A                            ; Compressed graphics - various
0003A23A                            ; ---------------------------------------------------------------------------
0003A23A                            Nem_Smoke:	incbin	artnem\xxxsmoke.bin	; unused smoke
0003A33E                            		even
0003A33E                            Nem_SyzSparkle:	incbin	artnem\xxxstars.bin	; unused stars
0003A378                            		even
0003A378                            Nem_Shield:	incbin	artnem\shield.bin	; shield
0003A50E                            		even
0003A50E                            Nem_Stars:	incbin	artnem\invstars.bin	; invincibility stars
0003A656                            		even
0003A656                            Nem_LzSonic:	incbin	artnem\xxxlzson.bin	; unused LZ Sonic holding his breath
0003A760                            		even
0003A760                            Nem_UnkFire:	incbin	artnem\xxxfire.bin	; unused fireball
0003A7B2                            		even
0003A7B2                            Nem_Warp:	incbin	artnem\xxxflash.bin	; unused entry to special stage flash
0003A9FA                            		even
0003A9FA                            Nem_Goggle:	incbin	artnem\xxxgoggl.bin	; unused goggles
0003AB80                            		even
0003AB80                            ; ---------------------------------------------------------------------------
0003AB80                            ; Sprite mappings - walls of the special stage
0003AB80                            ; ---------------------------------------------------------------------------
0003AB80                            Map_SSWalls:
0003AB80                            	include "_maps\SSwalls.asm"
0003AB80                            ; ---------------------------------------------------------------------------
0003AB80                            ; Sprite mappings - walls of the special stage
0003AB80                            ; ---------------------------------------------------------------------------
0003AB80 0000 0000                  		dc.w byte_2C584-Map_SSWalls, byte_2C58A-Map_SSWalls
0003AB84 0000 0000                  		dc.w byte_2C590-Map_SSWalls, byte_2C596-Map_SSWalls
0003AB88 0000 0000                  		dc.w byte_2C59C-Map_SSWalls, byte_2C5A2-Map_SSWalls
0003AB8C 0000 0000                  		dc.w byte_2C5A8-Map_SSWalls, byte_2C5AE-Map_SSWalls
0003AB90 0000 0000                  		dc.w byte_2C5B4-Map_SSWalls, byte_2C5BA-Map_SSWalls
0003AB94 0000 0000                  		dc.w byte_2C5C0-Map_SSWalls, byte_2C5C6-Map_SSWalls
0003AB98 0000 0000                  		dc.w byte_2C5CC-Map_SSWalls, byte_2C5D2-Map_SSWalls
0003AB9C 0000 0000                  		dc.w byte_2C5D8-Map_SSWalls, byte_2C5DE-Map_SSWalls
0003ABA0 01                         byte_2C584:	dc.b 1
0003ABA1 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0003ABA6 01                         byte_2C58A:	dc.b 1
0003ABA7 F00F 0009 F0               		dc.b $F0, $F, 0, 9, $F0
0003ABAC 01                         byte_2C590:	dc.b 1
0003ABAD F00F 0019 F0               		dc.b $F0, $F, 0, $19, $F0
0003ABB2 01                         byte_2C596:	dc.b 1
0003ABB3 F00F 0029 F0               		dc.b $F0, $F, 0, $29, $F0
0003ABB8 01                         byte_2C59C:	dc.b 1
0003ABB9 F00F 0039 F0               		dc.b $F0, $F, 0, $39, $F0
0003ABBE 01                         byte_2C5A2:	dc.b 1
0003ABBF F00F 0049 F0               		dc.b $F0, $F, 0, $49, $F0
0003ABC4 01                         byte_2C5A8:	dc.b 1
0003ABC5 F00F 0059 F0               		dc.b $F0, $F, 0, $59, $F0
0003ABCA 01                         byte_2C5AE:	dc.b 1
0003ABCB F00F 0069 F0               		dc.b $F0, $F, 0, $69, $F0
0003ABD0 01                         byte_2C5B4:	dc.b 1
0003ABD1 F00F 0079 F0               		dc.b $F0, $F, 0, $79, $F0
0003ABD6 01                         byte_2C5BA:	dc.b 1
0003ABD7 F00F 0089 F0               		dc.b $F0, $F, 0, $89, $F0
0003ABDC 01                         byte_2C5C0:	dc.b 1
0003ABDD F00F 0099 F0               		dc.b $F0, $F, 0, $99, $F0
0003ABE2 01                         byte_2C5C6:	dc.b 1
0003ABE3 F00F 00A9 F0               		dc.b $F0, $F, 0, $A9, $F0
0003ABE8 01                         byte_2C5CC:	dc.b 1
0003ABE9 F00F 00B9 F0               		dc.b $F0, $F, 0, $B9, $F0
0003ABEE 01                         byte_2C5D2:	dc.b 1
0003ABEF F00F 00C9 F0               		dc.b $F0, $F, 0, $C9, $F0
0003ABF4 01                         byte_2C5D8:	dc.b 1
0003ABF5 F00F 00D9 F0               		dc.b $F0, $F, 0, $D9, $F0
0003ABFA 01                         byte_2C5DE:	dc.b 1
0003ABFB F00F 00E9 F0               		dc.b $F0, $F, 0, $E9, $F0
0003AC00                            		even
0003AC00                            		even
0003AC00                            ; ---------------------------------------------------------------------------
0003AC00                            ; Compressed graphics - special stage
0003AC00                            ; ---------------------------------------------------------------------------
0003AC00                            Nem_SSWalls:	incbin	artnem\sswalls.bin	; special stage walls
0003B538                            		even
0003B538                            Eni_SSBg1:	incbin	mapeni\ssbg1.bin	; special stage background (mappings)
0003B66C                            		even
0003B66C                            Nem_SSBgFish:	incbin	artnem\ssbg1.bin	; special stage birds and fish background
0003C2FC                            		even
0003C2FC                            Eni_SSBg2:	incbin	mapeni\ssbg2.bin	; special stage background (mappings)
0003C5FC                            		even
0003C5FC                            Nem_SSBgCloud:	incbin	artnem\ssbg2.bin	; special stage clouds background
0003CAF0                            		even
0003CAF0                            Nem_SSGOAL:	incbin	artnem\ssgoal.bin	; special stage GOAL block
0003CBDE                            		even
0003CBDE                            Nem_SSRBlock:	incbin	artnem\ssr.bin		; special stage R block
0003CCAE                            		even
0003CCAE                            Nem_SS1UpBlock:	incbin	artnem\ss1up.bin	; special stage 1UP block
0003CDA4                            		even
0003CDA4                            Nem_SSEmStars:	incbin	artnem\ssemstar.bin	; special stage stars from a collected emerald
0003CE02                            		even
0003CE02                            Nem_SSRedWhite:	incbin	artnem\ssredwhi.bin	; special stage red/white block
0003CE94                            		even
0003CE94                            Nem_SSZone1:	incbin	artnem\sszone1.bin	; special stage ZONE1 block
0003CF56                            		even
0003CF56                            Nem_SSZone2:	incbin	artnem\sszone2.bin	; ZONE2 block
0003D024                            		even
0003D024                            Nem_SSZone3:	incbin	artnem\sszone3.bin	; ZONE3 block
0003D0F0                            		even
0003D0F0                            Nem_SSZone4:	incbin	artnem\sszone4.bin	; ZONE4 block
0003D1B8                            		even
0003D1B8                            Nem_SSZone5:	incbin	artnem\sszone5.bin	; ZONE5 block
0003D282                            		even
0003D282                            Nem_SSZone6:	incbin	artnem\sszone6.bin	; ZONE6 block
0003D352                            		even
0003D352                            Nem_SSUpDown:	incbin	artnem\ssupdown.bin	; special stage UP/DOWN block
0003D546                            		even
0003D546                            Nem_SSEmerald:	incbin	artnem\ssemeral.bin	; special stage chaos emeralds
0003D6AE                            		even
0003D6AE                            Nem_SSGhost:	incbin	artnem\ssghost.bin	; special stage ghost block
0003D75E                            		even
0003D75E                            Nem_SSWBlock:	incbin	artnem\ssw.bin		; special stage W block
0003D838                            		even
0003D838                            Nem_SSGlass:	incbin	artnem\ssglass.bin	; special stage destroyable glass block
0003D8BC                            		even
0003D8BC                            Nem_ResultEm:	incbin	artnem\ssresems.bin	; chaos emeralds on special stage results screen
0003DA3A                            		even
0003DA3A                            ; ---------------------------------------------------------------------------
0003DA3A                            ; Compressed graphics - GHZ stuff
0003DA3A                            ; ---------------------------------------------------------------------------
0003DA3A                            Nem_Stalk:	incbin	artnem\ghzstalk.bin	; GHZ flower stalk
0003DA84                            		even
0003DA84                            Nem_Swing:	incbin	artnem\ghzswing.bin	; GHZ swinging platform
0003DB9E                            		even
0003DB9E                            Nem_Bridge:	incbin	artnem\ghzbridg.bin	; GHZ bridge
0003DC8A                            		even
0003DC8A                            Nem_GhzUnkBlock:incbin	artnem\xxxghzbl.bin	; unused GHZ block
0003DCD2                            		even
0003DCD2                            Nem_Ball:	incbin	artnem\ghzball.bin	; GHZ giant ball
0003DE70                            		even
0003DE70                            Nem_Spikes:	incbin	artnem\spikes.bin	; spikes
0003DEEC                            		even
0003DEEC                            Nem_GhzLog:	incbin	artnem\xxxghzlo.bin	; unused GHZ log
0003E100                            		even
0003E100                            Nem_SpikePole:	incbin	artnem\ghzlog.bin	; GHZ spiked log
0003E22C                            		even
0003E22C                            Nem_PplRock:	incbin	artnem\ghzrock.bin	; GHZ purple rock
0003E35A                            		even
0003E35A                            Nem_GhzWall1:	incbin	artnem\ghzwall1.bin	; GHZ destroyable wall
0003E3F8                            		even
0003E3F8                            Nem_GhzWall2:	incbin	artnem\ghzwall2.bin	; GHZ normal wall
0003E458                            		even
0003E458                            ; ---------------------------------------------------------------------------
0003E458                            ; Compressed graphics - LZ stuff
0003E458                            ; ---------------------------------------------------------------------------
0003E458                            Nem_Water:	incbin	artnem\lzwater.bin	; LZ water surface
0003E57C                            		even
0003E57C                            Nem_Splash:	incbin	artnem\lzsplash.bin	; LZ waterfalls and splashes
0003ED70                            		even
0003ED70                            Nem_LzSpikeBall:incbin	artnem\lzspball.bin	; LZ spiked ball on chain
0003EEF0                            		even
0003EEF0                            Nem_FlapDoor:	incbin	artnem\lzflapdo.bin	; LZ flapping door
0003F05A                            		even
0003F05A                            Nem_Bubbles:	incbin	artnem\lzbubble.bin	; LZ bubbles and countdown numbers
0003F6B0                            		even
0003F6B0                            Nem_LzBlock3:	incbin	artnem\lzblock3.bin	; LZ 32x16 block
0003F766                            		even
0003F766                            Nem_LzDoor1:	incbin	artnem\lzvdoor.bin	; LZ vertical door
0003F808                            		even
0003F808                            Nem_Harpoon:	incbin	artnem\lzharpoo.bin	; LZ harpoon
0003F964                            		even
0003F964                            Nem_LzPole:	incbin	artnem\lzpole.bin	; LZ pole that breaks
0003F9C8                            		even
0003F9C8                            Nem_LzDoor2:	incbin	artnem\lzhdoor.bin	; LZ large horizontal door
0003FB1A                            		even
0003FB1A                            Nem_LzWheel:	incbin	artnem\lzwheel.bin	; LZ wheel from corner of conveyor belt
0003FFFC                            		even
0003FFFC                            Nem_Gargoyle:	incbin	artnem\lzgargoy.bin	; LZ gargoyle head and spitting fire
0004016C                            		even
0004016C                            Nem_LzBlock2:	incbin	artnem\lzblock2.bin	; LZ blocks
00040424                            		even
00040424                            Nem_LzPlatfm:	incbin	artnem\lzptform.bin	; LZ rising platforms
0004055C                            		even
0004055C                            Nem_Cork:	incbin	artnem\lzcork.bin	; LZ cork block
00040686                            		even
00040686                            Nem_LzBlock1:	incbin	artnem\lzblock1.bin	; LZ 32x32 block
00040796                            		even
00040796                            ; ---------------------------------------------------------------------------
00040796                            ; Compressed graphics - MZ stuff
00040796                            ; ---------------------------------------------------------------------------
00040796                            Nem_MzMetal:	incbin	artnem\mzmetal.bin	; MZ metal blocks
00040A24                            		even
00040A24                            Nem_MzSwitch:	incbin	artnem\mzswitch.bin	; MZ switch
00040AE2                            		even
00040AE2                            Nem_MzGlass:	incbin	artnem\mzglassy.bin	; MZ green glassy block
00040B9A                            		even
00040B9A                            Nem_GhzGrass:	incbin	artnem\xxxgrass.bin	; unused grass (GHZ or MZ?)
00040BEE                            		even
00040BEE                            Nem_MzFire:	incbin	artnem\mzfire.bin	; MZ fireballs
00040ECC                            		even
00040ECC                            Nem_Lava:	incbin	artnem\mzlava.bin	; MZ lava
000417E2                            		even
000417E2                            Nem_MzBlock:	incbin	artnem\mzblock.bin	; MZ green pushable block
00041946                            		even
00041946                            Nem_MzUnkBlock:	incbin	artnem\xxxmzblo.bin	; MZ unused background block
000419CE                            		even
000419CE                            ; ---------------------------------------------------------------------------
000419CE                            ; Compressed graphics - SLZ stuff
000419CE                            ; ---------------------------------------------------------------------------
000419CE                            Nem_Seesaw:	incbin	artnem\slzseesa.bin	; SLZ seesaw
00041C0A                            		even
00041C0A                            Nem_SlzSpike:	incbin	artnem\slzspike.bin	; SLZ spikeball that sits on a seesaw
00041D50                            		even
00041D50                            Nem_Fan:	incbin	artnem\slzfan.bin	; SLZ fan
00041F94                            		even
00041F94                            Nem_SlzWall:	incbin	artnem\slzwall.bin	; SLZ smashable wall
00041FF6                            		even
00041FF6                            Nem_Pylon:	incbin	artnem\slzpylon.bin	; SLZ foreground pylon
000420D8                            		even
000420D8                            Nem_SlzSwing:	incbin	artnem\slzswing.bin	; SLZ swinging platform
000422BA                            		even
000422BA                            Nem_SlzBlock:	incbin	artnem\slzblock.bin	; SLZ 32x32 block
000423C6                            		even
000423C6                            Nem_SlzCannon:	incbin	artnem\slzcanno.bin	; SLZ fireball launcher cannon
0004246A                            		even
0004246A                            ; ---------------------------------------------------------------------------
0004246A                            ; Compressed graphics - SYZ stuff
0004246A                            ; ---------------------------------------------------------------------------
0004246A                            Nem_Bumper:	incbin	artnem\syzbumpe.bin	; SYZ bumper
000425D4                            		even
000425D4                            Nem_SyzSpike2:	incbin	artnem\syzsspik.bin	; SYZ small spikeball
00042636                            		even
00042636                            Nem_LzSwitch:	incbin	artnem\switch.bin	; LZ/SYZ/SBZ switch
00042718                            		even
00042718                            Nem_SyzSpike1:	incbin	artnem\syzlspik.bin	; SYZ/SBZ large spikeball
000429A6                            		even
000429A6                            ; ---------------------------------------------------------------------------
000429A6                            ; Compressed graphics - SBZ stuff
000429A6                            ; ---------------------------------------------------------------------------
000429A6                            Nem_SbzWheel1:	incbin	artnem\sbzwhee1.bin	; SBZ spot on rotating wheel that Sonic runs around
000429FA                            		even
000429FA                            Nem_SbzWheel2:	incbin	artnem\sbzwhee2.bin	; SBZ wheel that grabs Sonic
00042C96                            		even
00042C96                            Nem_Cutter:	incbin	artnem\sbzcutte.bin	; SBZ pizza cutter
00042E9A                            		even
00042E9A                            Nem_Stomper:	incbin	artnem\sbzstomp.bin	; SBZ stomper
00043038                            		even
00043038                            Nem_SpinPform:	incbin	artnem\sbzpform.bin	; SBZ spinning platform
00043368                            		even
00043368                            Nem_TrapDoor:	incbin	artnem\sbztrapd.bin	; SBZ trapdoor
00043546                            		even
00043546                            Nem_SbzFloor:	incbin	artnem\sbzfloor.bin	; SBZ collapsing floor
0004359E                            		even
0004359E                            Nem_Electric:	incbin	artnem\sbzshock.bin	; SBZ electric shock orb
0004371E                            		even
0004371E                            Nem_SbzBlock:	incbin	artnem\sbzvanis.bin	; SBZ vanishing block
0004381C                            		even
0004381C                            Nem_FlamePipe:	incbin	artnem\sbzflame.bin	; SBZ flaming pipe
000439A8                            		even
000439A8                            Nem_SbzDoor1:	incbin	artnem\sbzvdoor.bin	; SBZ small vertical door
000439F8                            		even
000439F8                            Nem_SlideFloor:	incbin	artnem\sbzslide.bin	; SBZ floor that slides away
00043A50                            		even
00043A50                            Nem_SbzDoor2:	incbin	artnem\sbzhdoor.bin	; SBZ large horizontal door
00043B4C                            		even
00043B4C                            Nem_Girder:	incbin	artnem\sbzgirde.bin	; SBZ crushing girder
00043C62                            		even
00043C62                            ; ---------------------------------------------------------------------------
00043C62                            ; Compressed graphics - enemies
00043C62                            ; ---------------------------------------------------------------------------
00043C62                            Nem_BallHog:	incbin	artnem\ballhog.bin	; ball hog
00044022                            		even
00044022                            Nem_Crabmeat:	incbin	artnem\crabmeat.bin	; crabmeat
00044510                            		even
00044510                            Nem_Buzz:	incbin	artnem\buzzbomb.bin	; buzz bomber
000448B6                            		even
000448B6                            Nem_UnkExplode:	incbin	artnem\xxxexplo.bin	; unused explosion
00044A9E                            		even
00044A9E                            Nem_Burrobot:	incbin	artnem\burrobot.bin	; burrobot
00045188                            		even
00045188                            Nem_Chopper:	incbin	artnem\chopper.bin	; chopper
000453F0                            		even
000453F0                            Nem_Jaws:	incbin	artnem\jaws.bin		; jaws
0004567A                            		even
0004567A                            Nem_Roller:	incbin	artnem\roller.bin	; roller
00045B9E                            		even
00045B9E                            Nem_Motobug:	incbin	artnem\motobug.bin	; moto bug
00045E28                            		even
00045E28                            Nem_Newtron:	incbin	artnem\newtron.bin	; newtron
00046446                            		even
00046446                            Nem_Yadrin:	incbin	artnem\yadrin.bin	; yadrin
0004682E                            		even
0004682E                            Nem_Basaran:	incbin	artnem\basaran.bin	; basaran
00046B2A                            		even
00046B2A                            Nem_Splats:	incbin	artnem\splats.bin	; splats
00046D72                            		even
00046D72                            Nem_Bomb:	incbin	artnem\bomb.bin		; bomb
0004700A                            		even
0004700A                            Nem_Orbinaut:	incbin	artnem\orbinaut.bin	; orbinaut
000471E8                            		even
000471E8                            Nem_Cater:	incbin	artnem\caterkil.bin	; caterkiller
00047376                            		even
00047376                            ; ---------------------------------------------------------------------------
00047376                            ; Compressed graphics - various
00047376                            ; ---------------------------------------------------------------------------
00047376                            Nem_TitleCard:	incbin	artnem\ttlcards.bin	; title cards
00047984                            		even
00047984                            Nem_Hud:	incbin	artnem\hud.bin		; HUD (rings, time, score)
00047A7A                            		even
00047A7A                            Nem_Lives:	incbin	artnem\lifeicon.bin	; life counter icon
00047B80                            		even
00047B80                            Nem_Ring:	incbin	artnem\rings.bin	; rings
00047C74                            		even
00047C74                            Nem_Monitors:	incbin	artnem\monitors.bin	; monitors
000480E6 00                         		even
000480E6                            Nem_Explode:	incbin	artnem\explosio.bin	; explosion
0004874C                            		even
0004874C                            Nem_Points:	incbin	artnem\points.bin	; points from destroyed enemy or object
000487FC                            		even
000487FC                            Nem_GameOver:	incbin	artnem\gameover.bin	; game over / time over
0004898E                            		even
0004898E                            Nem_HSpring:	incbin	artnem\springh.bin	; horizontal spring
00048A90                            		even
00048A90                            Nem_VSpring:	incbin	artnem\springv.bin	; vertical spring
00048B6C                            		even
00048B6C                            ArtNem_DignlSprng:	incbin	"artnem\Diagonal spring.bin" ; diagonal spring
00048D40 00                         		even
00048D40                            Nem_SignPost:	incbin	artnem\signpost.bin	; end of level signpost
000491BC                            		even
000491BC                            Nem_Lamp:	incbin	artnem\lamppost.bin	; lamppost
0004927C                            		even
0004927C                            Nem_BigFlash:	incbin	artnem\rngflash.bin	; flash from giant ring
000493F0                            		even
000493F0                            Nem_Bonus:	incbin	artnem\bonus.bin	; hidden bonuses at end of a level
000496F2                            		even
000496F2                            ; ---------------------------------------------------------------------------
000496F2                            ; Compressed graphics - continue screen
000496F2                            ; ---------------------------------------------------------------------------
000496F2                            Nem_ContSonic:	incbin	artnem\cntsonic.bin	; Sonic on continue screen
000499A2                            		even
000499A2                            Nem_MiniSonic:	incbin	artnem\cntother.bin	; mini Sonic and text on continue screen
00049BDC                            		even
00049BDC                            ; ---------------------------------------------------------------------------
00049BDC                            ; Compressed graphics - animals
00049BDC                            ; ---------------------------------------------------------------------------
00049BDC                            Nem_Rabbit:	incbin	artnem\rabbit.bin	; rabbit
00049D34                            		even
00049D34                            Nem_Chicken:	incbin	artnem\chicken.bin	; chicken
00049E90                            		even
00049E90                            Nem_BlackBird:	incbin	artnem\blackbrd.bin	; blackbird
0004A00C                            		even
0004A00C                            Nem_Seal:	incbin	artnem\seal.bin		; seal
0004A128                            		even
0004A128                            Nem_Pig:	incbin	artnem\pig.bin		; pig
0004A25E                            		even
0004A25E                            Nem_Flicky:	incbin	artnem\flicky.bin	; flicky
0004A398                            		even
0004A398                            Nem_Squirrel:	incbin	artnem\squirrel.bin	; squirrel
0004A4F4                            		even
0004A4F4                            ; ---------------------------------------------------------------------------
0004A4F4                            ; Compressed graphics - primary patterns and block mappings
0004A4F4                            ; ---------------------------------------------------------------------------
0004A4F4                            Blk16_GHZ:	incbin	map16\ghz.bin
0004AE08                            		even
0004AE08                            Nem_GHZ:	incbin	artnem\8x8ghz.bin	; GHZ primary patterns
0004C41A                            		even
0004C41A                            Nem_GHZ_1st:	incbin	artnem\8x8ghz1.bin	; Title Screen and Ending only
0004DA7A                            		even
0004DA7A                            Nem_GHZ_2nd:	incbin	artnem\8x8ghz2.bin	; Title Screen and Ending only
0004EE22                            		even
0004EE22                            Blk256_GHZ:	incbin	map256\ghz.bin
00050EDC                            		even
00050EDC                            Blk16_TS:	incbin	map16\ts.bin
00050FDE                            		even
00050FDE                            Nem_TS_1st:	incbin	artnem\8x8ts1.bin; GHZ primary patterns
00051C34                            		even
00051C34                            Blk256_TS:	incbin	map256\ts.bin
00052182                            		even
00052182                            Blk16_LZ:	incbin	map16\lz.bin
000524AC                            		even
000524AC                            Nem_LZ:		incbin	artnem\8x8lz.bin	; LZ primary patterns
00053FF4                            		even
00053FF4                            Blk256_LZ:	incbin	map256\lz.bin
000567E4                            		even
000567E4                            Blk16_MZ:	incbin	map16\mz.bin
00056FEE                            		even
00056FEE                            Nem_MZ:		incbin	artnem\8x8mz.bin	; MZ primary patterns
00059832                            		even
00059832                            Blk256_MZ:	incbin	map256\mz.bin
0005AFF2                            		even
0005AFF2                            Blk16_SLZ:	incbin	map16\slz.bin
0005B7D6                            		even
0005B7D6                            Nem_SLZ:	incbin	artnem\8x8slz.bin	; SLZ primary patterns
0005F32A                            		even
0005F32A                            Blk256_SLZ:	incbin	map256\slz.bin
0006175A                            		even
0006175A                            Blk16_SYZ:	incbin	map16\syz.bin
000620C8                            		even
000620C8                            Nem_SYZ:	incbin	artnem\8x8syz.bin	; SYZ primary patterns
000657F4                            		even
000657F4                            Blk256_SYZ:	incbin	map256\syz.bin
00067BA4                            		even
00067BA4                            Blk16_SBZ:	incbin	map16\sbz.bin
00068A3E                            		even
00068A3E                            Nem_SBZ:	incbin	artnem\8x8sbz.bin	; SBZ primary patterns
0006B1EA                            		even
0006B1EA                            Blk256_SBZ:	incbin	map256\sbz.bin
0006DC3A                            		even
0006DC3A                            ; ---------------------------------------------------------------------------
0006DC3A                            ; Compressed graphics - bosses and ending sequence
0006DC3A                            ; ---------------------------------------------------------------------------
0006DC3A                            Nem_Eggman:	incbin	artnem\bossmain.bin	; boss main patterns
0006E49E                            		even
0006E49E                            Nem_Weapons:	incbin	artnem\bossxtra.bin	; boss add-ons and weapons
0006E788                            		even
0006E788                            Nem_Prison:	incbin	artnem\prison.bin	; prison capsule
0006F00C                            		even
0006F00C                            Nem_Sbz2Eggman:	incbin	artnem\sbz2boss.bin	; Eggman in SBZ2 and FZ
0006F838                            		even
0006F838                            Nem_FzBoss:	incbin	artnem\fzboss.bin	; FZ boss
0006FFA0                            		even
0006FFA0                            Nem_FzEggman:	incbin	artnem\fzboss2.bin	; Eggman after the FZ boss
00070520                            		even
00070520                            Nem_Exhaust:	incbin	artnem\bossflam.bin	; boss exhaust flame
00070640                            		even
00070640                            Nem_EndEm:	incbin	artnem\endemera.bin	; ending sequence chaos emeralds
0007083E                            		even
0007083E                            Nem_EndSonic:	incbin	artnem\endsonic.bin	; ending sequence Sonic
00071A1C                            		even
00071A1C                            Nem_TryAgain:	incbin	artnem\tryagain.bin	; ending "try again" screen
00072360                            		even
00072360                            Nem_EndEggman:	incbin	artnem\xxxend.bin	; unused boss sequence on ending
00072736                            		even
00072736                            Kos_EndFlowers:	incbin	artkos\flowers.bin	; ending sequence animated flowers
00072CC6                            		even
00072CC6                            Nem_EndFlower:	incbin	artnem\endflowe.bin	; ending sequence flowers
00072F4E                            		even
00072F4E                            Nem_CreditText:	incbin	artnem\credits.bin	; credits alphabet
0007354C                            		even
0007354C                            Nem_EndStH:	incbin	artnem\endtext.bin	; ending sequence "Sonic the Hedgehog" text
000737D4                            		even
000737D4                            		incbin	misc\padding2.bin
000738D8                            		even
000738D8                            MenuslctrART:	incbin	"artkos\Menuslctr.bin"	; art for that soncc 4 menu selecting thingy 
00073A14                            		even
00073A14                            ;The Menu Selector uses the third palette line for the Title Screen.
00073A14                            ;Load it into Flex2, and select the title palette.
00073A14                            ;Change the palette lines to 3, and slide it to 0 in the palettes tab. 
00073A14                            ;The rest is is right here.
00073A14                            ; - Chron Delta
00073A14                            MenuslctrMappings:	incbin	"_maps\Menuslctr.asm"	; mappings for that soncc 4 menu selecting thingy
00073B9A                            		even		
00073B9A                            ; ---------------------------------------------------------------------------
00073B9A                            ; Collision data
00073B9A                            ; ---------------------------------------------------------------------------
00073B9A                            AngleMap:	incbin	collide\anglemap.bin	; floor angle map
00073C9A                            		even
00073C9A                            CollArray1:	incbin	collide\carray_n.bin	; normal collision array
00074C9A                            		even
00074C9A                            CollArray2:	incbin	collide\carray_r.bin	; rotated collision array
00075C9A                            		even
00075C9A                            Col_GHZ:	incbin	collide\ghz.bin		; GHZ index
00075E52 00                         		even
00075E52                            Col_LZ:		incbin	collide\lz.bin		; LZ index
00075F1A                            		even
00075F1A                            Col_MZ:		incbin	collide\mz.bin		; MZ index
000760AA                            		even
000760AA                            Col_SLZ:	incbin	collide\slz.bin		; SLZ index
0007629E                            		even
0007629E                            Col_SYZ:	incbin	collide\syz.bin		; SYZ index
00076492                            		even
00076492                            Col_SBZ:	incbin	collide\sbz.bin		; SBZ index
000766EA                            		even
000766EA                            ; ---------------------------------------------------------------------------
000766EA                            ; Special layouts
000766EA                            ; ---------------------------------------------------------------------------
000766EA                            SS_1:		incbin	sslayout\1.bin
00076964                            		even
00076964                            SS_2:		incbin	sslayout\2.bin
00076D76                            		even
00076D76                            SS_3:		incbin	sslayout\3.bin
000770D2                            		even
000770D2                            SS_4:		incbin	sslayout\4.bin
000775AC                            		even
000775AC                            SS_5:		incbin	sslayout\5.bin
00077A7E                            		even
00077A7E                            SS_6:		incbin	sslayout\6.bin
00077D8E                            		even
00077D8E                            ; ---------------------------------------------------------------------------
00077D8E                            ; Animated uncompressed graphics
00077D8E                            ; ---------------------------------------------------------------------------
00077D8E                            Art_GhzWater:	incbin	artunc\ghzwater.bin	; GHZ waterfall
00077F8E                            		even
00077F8E                            Art_GhzFlower1:	incbin	artunc\ghzflowl.bin	; GHZ large flower
0007838E                            		even
0007838E                            Art_GhzFlower2:	incbin	artunc\ghzflows.bin	; GHZ small flower
0007880E                            		even
0007880E                            Art_MzLava1:	incbin	artunc\mzlava1.bin	; MZ lava surface
00078B0E                            		even
00078B0E                            Art_MzLava2:	incbin	artunc\mzlava2.bin	; MZ lava
0007910E                            		even
0007910E                            Art_MzTorch:	incbin	artunc\mztorch.bin	; MZ torch in background
0007940E                            		even
0007940E                            Art_SbzSmoke:	incbin	artunc\sbzsmoke.bin	; SBZ smoke in background
00079E8E                            		even
00079E8E                            
00079E8E                            ; ---------------------------------------------------------------------------
00079E8E                            ; Level	layout index
00079E8E                            ; ---------------------------------------------------------------------------
00079E8E 0000 0000 0000             Level_Index:	dc.w Level_GHZ1-Level_Index, Level_GHZbg-Level_Index, byte_68D70-Level_Index
00079E94 0000 0000 0000             		dc.w Level_GHZ2-Level_Index, Level_GHZbg-Level_Index, byte_68E3C-Level_Index
00079E9A 0000 0000 0000             		dc.w Level_GHZ3-Level_Index, Level_GHZbg-Level_Index, byte_68F84-Level_Index
00079EA0 0000 0000 0000             		dc.w byte_68F88-Level_Index, byte_68F88-Level_Index, byte_68F88-Level_Index
00079EA6 0000 0000 0000             		dc.w Level_LZ1-Level_Index, Level_LZbg-Level_Index, byte_69190-Level_Index
00079EAC 0000 0000 0000             		dc.w Level_LZ2-Level_Index, Level_LZbg-Level_Index, byte_6922E-Level_Index
00079EB2 0000 0000 0000             		dc.w Level_LZ3-Level_Index, Level_LZbg-Level_Index, byte_6934C-Level_Index
00079EB8 0000 0000 0000             		dc.w Level_SBZ3-Level_Index, Level_LZbg-Level_Index, byte_6940A-Level_Index
00079EBE 0000 0000 0000             		dc.w Level_MZ1-Level_Index, Level_MZ1bg-Level_Index, Level_MZ1-Level_Index
00079EC4 0000 0000 0000             		dc.w Level_MZ2-Level_Index, Level_MZ2bg-Level_Index, byte_6965C-Level_Index
00079ECA 0000 0000 0000             		dc.w Level_MZ3-Level_Index, Level_MZ3bg-Level_Index, byte_697E6-Level_Index
00079ED0 0000 0000 0000             		dc.w byte_697EA-Level_Index, byte_697EA-Level_Index, byte_697EA-Level_Index
00079ED6 0000 0000 0000             		dc.w Level_SLZ1-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
00079EDC 0000 0000 0000             		dc.w Level_SLZ2-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
00079EE2 0000 0000 0000             		dc.w Level_SLZ3-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
00079EE8 0000 0000 0000             		dc.w byte_69B84-Level_Index, byte_69B84-Level_Index, byte_69B84-Level_Index
00079EEE 0000 0000 0000             		dc.w Level_SYZ1-Level_Index, Level_SYZbg-Level_Index, byte_69C7E-Level_Index
00079EF4 0000 0000 0000             		dc.w Level_SYZ2-Level_Index, Level_SYZbg-Level_Index, byte_69D86-Level_Index
00079EFA 0000 0000 0000             		dc.w Level_SYZ3-Level_Index, Level_SYZbg-Level_Index, byte_69EE4-Level_Index
00079F00 0000 0000 0000             		dc.w byte_69EE8-Level_Index, byte_69EE8-Level_Index, byte_69EE8-Level_Index
00079F06 0000 0000 0000             		dc.w Level_SBZ1-Level_Index, Level_SBZ1bg-Level_Index, Level_SBZ1bg-Level_Index
00079F0C 0000 0000 0000             		dc.w Level_SBZ2-Level_Index, Level_SBZ2bg-Level_Index, Level_SBZ2bg-Level_Index
00079F12 0000 0000 0000             		dc.w Level_SBZ2-Level_Index, Level_SBZ2bg-Level_Index, byte_6A2F8-Level_Index
00079F18 0000 0000 0000             		dc.w byte_6A2FC-Level_Index, byte_6A2FC-Level_Index, byte_6A2FC-Level_Index
00079F1E 0000 0000 0000             		dc.w Level_End-Level_Index, Level_GHZbg-Level_Index, byte_6A320-Level_Index
00079F24 0000 0000 0000             		dc.w Level_End-Level_Index, Level_GHZbg-Level_Index, byte_6A320-Level_Index
00079F2A 0000 0000 0000             		dc.w byte_6A320-Level_Index, byte_6A320-Level_Index, byte_6A320-Level_Index
00079F30 0000 0000 0000             		dc.w byte_6A320-Level_Index, byte_6A320-Level_Index, byte_6A320-Level_Index
00079F36                            
00079F36                            Level_GHZ1:	incbin	levels\ghz1.bin
0007A028                            		even
0007A028 0000 0000                  byte_68D70:	dc.b 0,	0, 0, 0
0007A02C                            Level_GHZ2:	incbin	levels\ghz2.bin
0007A0F4                            		even
0007A0F4 0000 0000                  byte_68E3C:	dc.b 0,	0, 0, 0
0007A0F8                            Level_GHZ3:	incbin	levels\ghz3.bin
0007A21A                            		even
0007A21A                            Level_GHZbg:	incbin	levels\ghzbg.bin
0007A23C                            		even
0007A23C 0000 0000                  byte_68F84:	dc.b 0,	0, 0, 0
0007A240 0000 0000                  byte_68F88:	dc.b 0,	0, 0, 0
0007A244                            
0007A244                            Level_LZ1:	incbin	levels\lz1.bin
0007A346                            		even
0007A346                            Level_LZbg:	incbin	levels\lzbg.bin
0007A448                            		even
0007A448 0000 0000                  byte_69190:	dc.b 0,	0, 0, 0
0007A44C                            Level_LZ2:	incbin	levels\lz2.bin
0007A4E6                            		even
0007A4E6 0000 0000                  byte_6922E:	dc.b 0,	0, 0, 0
0007A4EA                            Level_LZ3:	incbin	levels\lz3.bin
0007A604                            		even
0007A604 0000 0000                  byte_6934C:	dc.b 0,	0, 0, 0
0007A608                            Level_SBZ3:	incbin	levels\sbz3.bin
0007A6C2                            		even
0007A6C2 0000 0000                  byte_6940A:	dc.b 0,	0, 0, 0
0007A6C6                            
0007A6C6                            Level_MZ1:	incbin	levels\mz1.bin
0007A764                            		even
0007A764                            Level_MZ1bg:	incbin	levels\mz1bg.bin
0007A7DE                            		even
0007A7DE                            Level_MZ2:	incbin	levels\mz2.bin
0007A882                            		even
0007A882                            Level_MZ2bg:	incbin	levels\mz2bg.bin
0007A914                            		even
0007A914 0000 0000                  byte_6965C:	dc.b 0,	0, 0, 0
0007A918                            Level_MZ3:	incbin	levels\mz3.bin
0007A9FA                            		even
0007A9FA                            Level_MZ3bg:	incbin	levels\mz3bg.bin
0007AA9E                            		even
0007AA9E 0000 0000                  byte_697E6:	dc.b 0,	0, 0, 0
0007AAA2 0000 0000                  byte_697EA:	dc.b 0,	0, 0, 0
0007AAA6                            
0007AAA6                            Level_SLZ1:	incbin	levels\slz1.bin
0007ABB8                            		even
0007ABB8                            Level_SLZbg:	incbin	levels\slzbg.bin
0007AC32                            		even
0007AC32                            Level_SLZ2:	incbin	levels\slz2.bin
0007AD22                            		even
0007AD22                            Level_SLZ3:	incbin	levels\slz3.bin
0007AE3C                            		even
0007AE3C 0000 0000                  byte_69B84:	dc.b 0,	0, 0, 0
0007AE40                            
0007AE40                            Level_SYZ1:	incbin	levels\syz1.bin
0007AEFC                            		even
0007AEFC                            Level_SYZbg:	incbin	levels\syzbg.bin
0007AF36                            		even
0007AF36 0000 0000                  byte_69C7E:	dc.b 0,	0, 0, 0
0007AF3A                            Level_SYZ2:	incbin	levels\syz2.bin
0007B03E                            		even
0007B03E 0000 0000                  byte_69D86:	dc.b 0,	0, 0, 0
0007B042                            Level_SYZ3:	incbin	levels\syz3.bin
0007B19C                            		even
0007B19C 0000 0000                  byte_69EE4:	dc.b 0,	0, 0, 0
0007B1A0 0000 0000                  byte_69EE8:	dc.b 0,	0, 0, 0
0007B1A4                            
0007B1A4                            Level_SBZ1:	incbin	levels\sbz1.bin
0007B2C6                            		even
0007B2C6                            Level_SBZ1bg:	incbin	levels\sbz1bg.bin
0007B304                            		even
0007B304                            Level_SBZ2:	incbin	levels\sbz2.bin
0007B446                            		even
0007B446                            Level_SBZ2bg:	incbin	levels\sbz2bg.bin
0007B5B0                            		even
0007B5B0 0000 0000                  byte_6A2F8:	dc.b 0,	0, 0, 0
0007B5B4 0000 0000                  byte_6A2FC:	dc.b 0,	0, 0, 0
0007B5B8                            Level_End:	incbin	levels\ending.bin
0007B5E8 00                         		even
0007B5E8 0000 0000                  byte_6A320:	dc.b 0,	0, 0, 0
0007B5EC                            
0007B5EC                            ; ---------------------------------------------------------------------------
0007B5EC                            ; Animated uncompressed giant ring graphics
0007B5EC                            ; ---------------------------------------------------------------------------
0007B5EC                            Art_BigRing:	incbin	artunc\bigring.bin
0007C22C                            		even
0007C22C                            
0007C22C                            		incbin	misc\padding3.bin
0007C2C8                            		even
0007C2C8                            
0007C2C8                            ; ---------------------------------------------------------------------------
0007C2C8                            ; Sprite locations index
0007C2C8                            ; ---------------------------------------------------------------------------
0007C2C8 0000 0000                  ObjPos_Index:	dc.w ObjPos_GHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007C2CC 0000 0000                  		dc.w ObjPos_GHZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007C2D0 0000 0000                  		dc.w ObjPos_GHZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007C2D4 0000 0000                  		dc.w ObjPos_GHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007C2D8 0000 0000                  		dc.w ObjPos_LZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007C2DC 0000 0000                  		dc.w ObjPos_LZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007C2E0 0000 0000                  		dc.w ObjPos_LZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007C2E4 0000 0000                  		dc.w ObjPos_SBZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007C2E8 0000 0000                  		dc.w ObjPos_MZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007C2EC 0000 0000                  		dc.w ObjPos_MZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007C2F0 0000 0000                  		dc.w ObjPos_MZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007C2F4 0000 0000                  		dc.w ObjPos_MZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007C2F8 0000 0000                  		dc.w ObjPos_SLZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007C2FC 0000 0000                  		dc.w ObjPos_SLZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007C300 0000 0000                  		dc.w ObjPos_SLZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007C304 0000 0000                  		dc.w ObjPos_SLZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007C308 0000 0000                  		dc.w ObjPos_SYZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007C30C 0000 0000                  		dc.w ObjPos_SYZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007C310 0000 0000                  		dc.w ObjPos_SYZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007C314 0000 0000                  		dc.w ObjPos_SYZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007C318 0000 0000                  		dc.w ObjPos_SBZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007C31C 0000 0000                  		dc.w ObjPos_SBZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007C320 0000 0000                  		dc.w ObjPos_FZ-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007C324 0000 0000                  		dc.w ObjPos_SBZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007C328 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007C32C 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007C330 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007C334 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007C338 0000 0000                  		dc.w ObjPos_LZ1pf1-ObjPos_Index, ObjPos_LZ1pf2-ObjPos_Index
0007C33C 0000 0000                  		dc.w ObjPos_LZ2pf1-ObjPos_Index, ObjPos_LZ2pf2-ObjPos_Index
0007C340 0000 0000                  		dc.w ObjPos_LZ3pf1-ObjPos_Index, ObjPos_LZ3pf2-ObjPos_Index
0007C344 0000 0000                  		dc.w ObjPos_LZ1pf1-ObjPos_Index, ObjPos_LZ1pf2-ObjPos_Index
0007C348 0000 0000                  		dc.w ObjPos_SBZ1pf1-ObjPos_Index, ObjPos_SBZ1pf2-ObjPos_Index
0007C34C 0000 0000                  		dc.w ObjPos_SBZ1pf3-ObjPos_Index, ObjPos_SBZ1pf4-ObjPos_Index
0007C350 0000 0000                  		dc.w ObjPos_SBZ1pf5-ObjPos_Index, ObjPos_SBZ1pf6-ObjPos_Index
0007C354 0000 0000                  		dc.w ObjPos_SBZ1pf1-ObjPos_Index, ObjPos_SBZ1pf2-ObjPos_Index
0007C358 FFFF 0000 0000             		dc.b $FF, $FF, 0, 0, 0,	0
0007C35E                            ObjPos_GHZ1:	incbin	objpos\ghz1.bin
0007C868                            		even
0007C868                            ObjPos_GHZ2:	incbin	objpos\ghz2.bin
0007CE26                            		even
0007CE26                            ObjPos_GHZ3:	incbin	objpos\ghz3.bin
0007D4E0                            		even
0007D4E0                            ObjPos_LZ1:	incbin	objpos\lz1.bin
0007D94E                            		even
0007D94E                            ObjPos_LZ2:	incbin	objpos\lz2.bin
0007DC90                            		even
0007DC90                            ObjPos_LZ3:	incbin	objpos\lz3.bin
0007E272                            		even
0007E272                            ObjPos_SBZ3:	incbin	objpos\sbz3.bin
0007E70A                            		even
0007E70A                            ObjPos_LZ1pf1:	incbin	objpos\lz1pf1.bin
0007E73C                            		even
0007E73C                            ObjPos_LZ1pf2:	incbin	objpos\lz1pf2.bin
0007E76E                            		even
0007E76E                            ObjPos_LZ2pf1:	incbin	objpos\lz2pf1.bin
0007E7A0                            		even
0007E7A0                            ObjPos_LZ2pf2:	incbin	objpos\lz2pf2.bin
0007E7D2                            		even
0007E7D2                            ObjPos_LZ3pf1:	incbin	objpos\lz3pf1.bin
0007E81C                            		even
0007E81C                            ObjPos_LZ3pf2:	incbin	objpos\lz3pf2.bin
0007E85A                            		even
0007E85A                            ObjPos_MZ1:	incbin	objpos\mz1.bin
0007EBC6                            		even
0007EBC6                            ObjPos_MZ2:	incbin	objpos\mz2.bin
0007F070                            		even
0007F070                            ObjPos_MZ3:	incbin	objpos\mz3.bin
0007F5E6                            		even
0007F5E6                            ObjPos_SLZ1:	incbin	objpos\slz1.bin
0007FB26                            		even
0007FB26                            ObjPos_SLZ2:	incbin	objpos\slz2.bin
0007FF8E                            		even
0007FF8E                            ObjPos_SLZ3:	incbin	objpos\slz3.bin
00080570                            		even
00080570                            ObjPos_SYZ1:	incbin	objpos\syz1.bin
000809FC                            		even
000809FC                            ObjPos_SYZ2:	incbin	objpos\syz2.bin
00080F66                            		even
00080F66                            ObjPos_SYZ3:	incbin	objpos\syz3.bin
0008156C                            		even
0008156C                            ObjPos_SBZ1:	incbin	objpos\sbz1.bin
00081CAA                            		even
00081CAA                            ObjPos_SBZ2:	incbin	objpos\sbz2.bin
00082388                            		even
00082388                            ObjPos_FZ:	incbin	objpos\fz.bin
0008239A                            		even
0008239A                            ObjPos_SBZ1pf1:	incbin	objpos\sbz1pf1.bin
000823CC                            		even
000823CC                            ObjPos_SBZ1pf2:	incbin	objpos\sbz1pf2.bin
000823FE                            		even
000823FE                            ObjPos_SBZ1pf3:	incbin	objpos\sbz1pf3.bin
00082430                            		even
00082430                            ObjPos_SBZ1pf4:	incbin	objpos\sbz1pf4.bin
00082462                            		even
00082462                            ObjPos_SBZ1pf5:	incbin	objpos\sbz1pf5.bin
00082494                            		even
00082494                            ObjPos_SBZ1pf6:	incbin	objpos\sbz1pf6.bin
000824CC                            		even
000824CC                            ObjPos_End:	incbin	objpos\ending.bin
00082628                            		even
00082628 FFFF 0000 0000             ObjPos_Null:	dc.b $FF, $FF, 0, 0, 0,	0
0008262E                            ; ---------------------------------------------------------------------------
0008262E                            		incbin	misc\padding4.bin
00082C58                            		even
00082C58                            
00082C58 0000 0000                  Go_SoundTypes:	dc.l SoundTypes		; XREF: Sound_Play
00082C5C 0000 0000                  Go_SoundD0:	dc.l SoundD0Index	; XREF: Sound_D0toDF
00082C60 0000 0000                  Go_MusicIndex:	dc.l MusicIndex		; XREF: Sound_81to9F
00082C64 0000 0000                  Go_SoundIndex:	dc.l SoundIndex		; XREF: Sound_A0toCF
00082C68 0000 0000                  off_719A0:	dc.l byte_71A94		; XREF: Sound_81to9F
00082C6C 0000 0000                  Go_PSGIndex:	dc.l PSG_Index		; XREF: sub_72926
00082C70                            ; ---------------------------------------------------------------------------
00082C70                            ; PSG instruments used in music
00082C70                            ; ---------------------------------------------------------------------------
00082C70 0000 0000 0000 0000 0000+  PSG_Index:	dc.l PSG1, PSG2, PSG3
00082C7C 0000 0000 0000 0000 0000+  		dc.l PSG4, PSG5, PSG6
00082C88 0000 0000 0000 0000 0000+  		dc.l PSG7, PSG8, PSG9
00082C94                            PSG1:		incbin	sound\psg1.bin
00082CAB                            PSG2:		incbin	sound\psg2.bin
00082CB2                            PSG3:		incbin	sound\psg3.bin
00082CC3                            PSG4:		incbin	sound\psg4.bin
00082CCE                            PSG6:		incbin	sound\psg6.bin
00082CDD                            PSG5:		incbin	sound\psg5.bin
00082D07                            PSG7:		incbin	sound\psg7.bin
00082D23                            PSG8:		incbin	sound\psg8.bin
00082D4B                            PSG9:		incbin	sound\psg9.bin
00082D5C                            
00082D5C 0772 7326 1508 FF05        byte_71A94:	dc.b 7,	$72, $73, $26, $15, 8, $FF, 5
00082D64                            ; ---------------------------------------------------------------------------
00082D64                            ; Music	Pointers
00082D64                            ; ---------------------------------------------------------------------------
00082D64 0000 0000 0000 0000        MusicIndex:	dc.l Music81, Music82
00082D6C 0000 0000 0000 0000        		dc.l Music83, Music84
00082D74 0000 0000 0000 0000        		dc.l Music85, Music86
00082D7C 0000 0000 0000 0000        		dc.l Music87, Music88
00082D84 0000 0000 0000 0000        		dc.l Music89, Music8A
00082D8C 0000 0000 0000 0000        		dc.l Music8B, Music8C
00082D94 0000 0000 0000 0000        		dc.l Music8D, Music8E
00082D9C 0000 0000 0000 0000        		dc.l Music8F, Music90
00082DA4 0000 0000 0000 0000        		dc.l Music91, Music92
00082DAC 0000 0000 0000 0000        		dc.l Music93, Music94
00082DB4 0000 0000 0000 0000        		dc.l Music95, Music96
00082DBC 0000 0000 0000 0000        		dc.l Music97, Music98
00082DC4 0000 0000 0000 0000        		dc.l Music99, Music9A
00082DCC 0000 0000 0000 0000        		dc.l Music9B, Music9C
00082DD4 0000 0000 0000 0000        		dc.l Music9D, Music9E
00082DDC 0000 0000                  		dc.l Music9F
00082DE0                            ; ---------------------------------------------------------------------------
00082DE0                            ; Type of sound	being played ($90 = music; $70 = normal	sound effect)
00082DE0                            ; ---------------------------------------------------------------------------
00082DE0 9090 9090 9090 9090 9090+  SoundTypes:	dc.b $90, $90, $90, $90, $90, $90, $90,	$90, $90, $90, $90, $90, $90, $90, $90,	$90
00082DF0 9090 9090 9090 9090 9090+  		dc.b $90, $90, $90, $90, $90, $90, $90,	$90, $90, $90, $90, $90, $90, $90, $90,	$80
00082E00 7070 7070 7070 7070 7068+  		dc.b $70, $70, $70, $70, $70, $70, $70,	$70, $70, $68, $70, $70, $70, $60, $70,	$70
00082E10 6070 6070 7070 7070 7070+  		dc.b $60, $70, $60, $70, $70, $70, $70,	$70, $70, $70, $70, $70, $70, $70, $7F,	$60
00082E20 7070 7070 7070 7070 7070+  		dc.b $70, $70, $70, $70, $70, $70, $70,	$70, $70, $70, $70, $70, $70, $70, $70,	$80
00082E30 8080 8080 8080 8080 8080+  		dc.b $80, $80, $80, $80, $80, $80, $80,	$80, $80, $80, $80, $80, $80, $80, $80,	$90
00082E40 9090 9090                  		dc.b $90, $90, $90, $90
00082E44                            
00082E44                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00082E44                            
00082E44                            YM_Access_WaitRead:
00082E44 33FC 0000 00A1 1100        		StartZ80					; EXT: request Z80 stop off (allow it to continue)
00082E4C                            		rept	$10					; EXT: delay for a long enough time to allow the...
00082E4C                            		nop						; EXT: '' ...68k pointer to be saved correctly.
00082E4C 4E71 4E71 4E71 4E71 4E71+  		endr						; EXT: ''
00082E6C                            
00082E6C                            sub_71B4C:
00082E6C 4DF9 00FF F000             		lea	($FFF000).l,a6
00082E72                            
00082E72 41F9 00A0 02EF             		lea	($A00000+YM_Access).l,a0		; EXT: load access address in Z80
00082E78 203C 00A0 0000             		move.l	#$A00000,d0				; EXT: prepare Z80 RAM address in d0 (i.e. start of Cue list address)
00082E7E 33FC 0100 00A1 1100 0839+  		StopZ80						; EXT: request Z80 stop on
00082E90 4A18                       		tst.b	(a0)+					; EXT: is the Z80 accessing the 68k pointer?
00082E92 66B0                       		bne.s	YM_Access_WaitRead			; EXT: if so, branch and wait for it to finish...
00082E94 1218                       		move.b	(a0)+,d1				; EXT: load lower byte of pointer
00082E96 1018                       		move.b	(a0)+,d0				; EXT: load upper byte of pointer
00082E98 33FC 0000 00A1 1100        		StartZ80					; EXT: request Z80 stop off
00082EA0 E148                       		lsl.w	#$08,d0					; EXT: shift upper byte up
00082EA2 1001                       		move.b	d1,d0					; EXT: put lower byte with it
00082EA4 2D40 0010                  		move.l	d0,$10(a6)				; EXT: store the cue address
00082EA8                            
00082EA8 422E 000E                  		clr.b	$E(a6)
00082EAC 4A2E 0003                  		tst.b	3(a6)		; is music paused?
00082EB0 6600 0000                  		bne.w	loc_71E50	; if yes, branch
00082EB4 532E 0001                  		subq.b	#1,1(a6)
00082EB8 6600                       		bne.s	loc_71B9E
00082EBA 4EBA 0000                  		jsr	sub_7260C(pc)
00082EBE                            
00082EBE                            loc_71B9E:
00082EBE 102E 0004                  		move.b	4(a6),d0
00082EC2 6700                       		beq.s	loc_71BA8
00082EC4 4EBA 0000                  		jsr	sub_72504(pc)
00082EC8                            
00082EC8                            loc_71BA8:
00082EC8 4A2E 0024                  		tst.b	$24(a6)
00082ECC 6700                       		beq.s	loc_71BB2
00082ECE 4EBA 0000                  		jsr	sub_7267C(pc)
00082ED2                            
00082ED2                            loc_71BB2:
00082ED2 4A6E 000A                  		tst.w	$A(a6)		; is music or sound being played?
00082ED6 6700                       		beq.s	loc_71BBC	; if not, branch
00082ED8 4EBA 0000                  		jsr	Sound_Play(pc)
00082EDC                            
00082EDC                            loc_71BBC:
00082EDC 0C2E 0080 0009             		cmpi.b	#$80,9(a6)
00082EE2 6700                       		beq.s	loc_71BC8
00082EE4 4EBA 0000                  		jsr	Sound_ChkValue(pc)
00082EE8                            
00082EE8                            loc_71BC8:
00082EE8 4BEE 0010                  		lea	$40-$30(a6),a5			; MJ: making correction for flow below
00082EEC 7E01                       		moveq	#2-1,d7				; MJ: set number of PCM channels to run
00082EEE 1D7C 007F 0008             		move.b	#$80-1,$08(a6)			; MJ: reset as PCM channel
00082EF4                            
00082EF4                            SD_NextPCM:
00082EF4 522E 0008                  		addq.b	#$01,$08(a6)			; MJ: advance PCM channel ID
00082EF8 4BED 0030                  		lea	$30(a5),a5			; MJ: advance to next channel
00082EFC 4A15                       		tst.b	(a5)
00082EFE 6A00                       		bpl.s	loc_71BD4
00082F00 4EBA 0000                  		jsr	sub_71C4E(pc)
00082F04                            
00082F04                            loc_71BD4:
00082F04 51CF FFEE                  		dbf	d7,SD_NextPCM			; MJ: repeat for number of PCM channels available
00082F08 422E 0008                  		clr.b	8(a6)
00082F0C 7E05                       		moveq	#5,d7
00082F0E                            
00082F0E                            loc_71BDA:
00082F0E DAFC 0030                  		adda.w	#$30,a5
00082F12 4A15                       		tst.b	(a5)
00082F14 6A00                       		bpl.s	loc_71BE6
00082F16 4EBA 0000                  		jsr	sub_71CCA(pc)
00082F1A                            
00082F1A                            loc_71BE6:
00082F1A 51CF FFF2                  		dbf	d7,loc_71BDA
00082F1E                            
00082F1E 7E02                       		moveq	#2,d7
00082F20                            
00082F20                            loc_71BEC:
00082F20 DAFC 0030                  		adda.w	#$30,a5
00082F24 4A15                       		tst.b	(a5)
00082F26 6A00                       		bpl.s	loc_71BF8
00082F28 4EBA 0000                  		jsr	sub_72850(pc)
00082F2C                            
00082F2C                            loc_71BF8:
00082F2C 51CF FFF2                  		dbf	d7,loc_71BEC
00082F30                            
00082F30 1D7C 0080 000E             		move.b	#$80,$E(a6)
00082F36 7E02                       		moveq	#2,d7
00082F38                            
00082F38                            loc_71C04:
00082F38 DAFC 0030                  		adda.w	#$30,a5
00082F3C 4A15                       		tst.b	(a5)
00082F3E 6A00                       		bpl.s	loc_71C10
00082F40 4EBA 0000                  		jsr	sub_71CCA(pc)
00082F44                            
00082F44                            loc_71C10:
00082F44 51CF FFF2                  		dbf	d7,loc_71C04
00082F48                            
00082F48 7E02                       		moveq	#2,d7
00082F4A                            
00082F4A                            loc_71C16:
00082F4A DAFC 0030                  		adda.w	#$30,a5
00082F4E 4A15                       		tst.b	(a5)
00082F50 6A00                       		bpl.s	loc_71C22
00082F52 4EBA 0000                  		jsr	sub_72850(pc)
00082F56                            
00082F56                            loc_71C22:
00082F56 51CF FFF2                  		dbf	d7,loc_71C16
00082F5A 1D7C 0040 000E             		move.b	#$40,$E(a6)
00082F60 DAFC 0030                  		adda.w	#$30,a5
00082F64 4A15                       		tst.b	(a5)
00082F66 6A00                       		bpl.s	loc_71C38
00082F68 4EBA 0000                  		jsr	sub_71CCA(pc)
00082F6C                            
00082F6C                            loc_71C38:
00082F6C DAFC 0030                  		adda.w	#$30,a5
00082F70 4A15                       		tst.b	(a5)
00082F72 6A00                       		bpl.s	loc_71C44
00082F74 4EBA 0000                  		jsr	sub_72850(pc)
00082F78                            
00082F78                            loc_71C44:
00082F78 6000                       		bra.s	YM_Access_TestWrite			; EXT: jump into the access loop
00082F7A                            
00082F7A                            YM_Access_WaitWrite:
00082F7A 33FC 0000 00A1 1100        		StartZ80					; EXT: request Z80 stop off (allow it to continue)
00082F82                            		rept	$10					; EXT: delay for a long enough time to let the Z80...
00082F82                            		nop						; EXT: '' ...finish writing the 68k pointer, so it doesn't...
00082F82 4E71 4E71 4E71 4E71 4E71+  		endr						; EXT: '' ...clash with 68k's pointer writing.
00082FA2                            
00082FA2                            YM_Access_TestWrite:
00082FA2 41F9 00A0 02EF             		lea	($A00000+YM_Access).l,a0		; EXT: load access address in Z80
00082FA8 43EE 0013                  		lea	$13(a6),a1				; EXT: load the 68k's pointer finish location
00082FAC 33FC 0100 00A1 1100 0839+  		StopZ80						; EXT: request Z80 stop on
00082FBE 4A18                       		tst.b	(a0)+					; EXT: is the Z80 accessing the 68k pointer?
00082FC0 66B8                       		bne.s	YM_Access_WaitWrite			; EXT: if so, branch and wait for it to finish...
00082FC2 10D1                       		move.b	(a1),(a0)+				; EXT: save lower byte of pointer
00082FC4 10A1                       		move.b	-(a1),(a0)				; EXT: save upper byte of pointer
00082FC6 33FC 0000 00A1 1100        		StartZ80					; EXT: request Z80 stop off
00082FCE                            
00082FCE 4E75                       		rts	
00082FD0                            
00082FD0                            ; End of function sub_71B4C
00082FD0                            
00082FD0                            
00082FD0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00082FD0                            
00082FD0                            
00082FD0                            sub_71C4E:				; XREF: sub_71B4C
00082FD0 532D 000E                  		subq.b	#1,$E(a5)
00082FD4 6600 0000                  		bne.w	locret_71CAA
00082FD8 286D 0004                  		movea.l	4(a5),a4
00082FDC                            
00082FDC                            loc_71C5E:
00082FDC 7A00                       		moveq	#0,d5
00082FDE 1A1C                       		move.b	(a4)+,d5
00082FE0 0C05 00E0                  		cmpi.b	#-$20,d5
00082FE4 6500                       		bcs.s	loc_71C6E
00082FE6 4EBA 0000                  		jsr	sub_72A5A(pc)
00082FEA 60F0                       		bra.s	loc_71C5E
00082FEC                            ; ===========================================================================
00082FEC                            
00082FEC                            loc_71C6E:
00082FEC 4A05                       		tst.b	d5
00082FEE 6A00                       		bpl.s	loc_71C84
00082FF0 1B45 0010                  		move.b	d5,$10(a5)
00082FF4 1A1C                       		move.b	(a4)+,d5
00082FF6 6A00                       		bpl.s	loc_71C84
00082FF8 534C                       		subq.w	#1,a4
00082FFA 1B6D 000F 000E             		move.b	$F(a5),$E(a5)
00083000 6000                       		bra.s	loc_71C88
00083002                            ; ===========================================================================
00083002                            
00083002                            loc_71C84:
00083002 4EBA 0000                  		jsr	sub_71D40(pc)
00083006                            
00083006                            loc_71C88:
00083006 2B4C 0004                  		move.l	a4,4(a5)
0008300A 0815 0002                  		btst	#2,(a5)
0008300E 6600                       		bne.s	locret_71CAA
00083010 7000                       		moveq	#0,d0
00083012 102D 0010                  		move.b	$10(a5),d0
00083016 0400 0080                  		subi.b	#$80,d0					; MJ: minus 80
0008301A D040                       		add.w	d0,d0					; MJ: multiply by 4 (long-word size)
0008301C D040                       		add.w	d0,d0					; MJ: ''
0008301E 48E7 00C0                  		movem.l	a0/a1,-(sp)				; MJ: store register data
00083022 41F9 0000 0000             		lea	(SampleList).l,a0			; MJ: load sample list
00083028 2070 0000                  		move.l	(a0,d0.w),a0				; MJ: load correct sample z80 pointer address
0008302C                            
0008302C 0C2E 0080 0008             		cmpi.b	#$80,$08(a6)				; MJ: is this PCM 1?
00083032 6600                       		bne.s	WritePCM2				; MJ: if not, branch for PCM 2 writing
00083034                            
00083034                            	; --- Writing to PCM 1 ---
00083034                            
00083034 33FC 0100 00A1 1100 0839+  		StopZ80
00083046 43F9 00A0 02E6             		lea	($A00000+PCM1_Sample).l,a1			; MJ: load PCM 1 slot address
0008304C 12D8                       		move.b	(a0)+,(a1)+					; MJ: set address of sample
0008304E 12D8                       		move.b	(a0)+,(a1)+					; MJ: ''
00083050 12D8                       		move.b	(a0)+,(a1)+					; MJ: ''
00083052 13FC 0064 00A0 0047        		move.b	#(CUPCM1_NewSample&$FF),($A00000+CU_Stack).l	; MJ: set routine to run
0008305A 13FC 0002 00A0 0048        		move.b	#(CUPCM1_NewSample>>$08),($A00000+CU_Stack+1).l	; MJ: ''
00083062 13FC 00C9 00A0 01D2        		move.b	#%11001001,($A00000+CUPCM1_RET).l		; MJ: change "NOP" to "RET"
0008306A 33FC 0000 00A1 1100        		StartZ80
00083072                            
00083072 4CDF 0300                  		movem.l	(sp)+,a0/a1				; MJ: restore register data
00083076                            
00083076                            locret_71CAA:
00083076 4E75                       		rts						; MJ: return
00083078                            
00083078                            	; --- Writing to PCM 2 ---
00083078                            
00083078                            WritePCM2:
00083078 33FC 0100 00A1 1100 0839+  		StopZ80
0008308A 43F9 00A0 02E9             		lea	($A00000+PCM2_Sample).l,a1			; MJ: load PCM 2 slot address
00083090 12D8                       		move.b	(a0)+,(a1)+					; MJ: ''
00083092 12D8                       		move.b	(a0)+,(a1)+					; MJ: ''
00083094 12D8                       		move.b	(a0)+,(a1)+					; MJ: ''
00083096 13FC 0028 00A0 01D3        		move.b	#%00101000,($A00000+CUPCM2_RET).l		; change "JR NZ" to "JR Z"
0008309E 33FC 0000 00A1 1100        		StartZ80
000830A6                            
000830A6 4CDF 0300                  		movem.l	(sp)+,a0/a1				; MJ: restore register data
000830AA 4E75                       		rts						; MJ: return
000830AC                            
000830AC                            ; ===========================================================================
000830AC                            
000830AC                            sub_71CCA:				; XREF: sub_71B4C
000830AC 532D 000E                  		subq.b	#1,$E(a5)
000830B0 6600                       		bne.s	loc_71CE0
000830B2 0895 0004                  		bclr	#4,(a5)
000830B6 4EBA 0000                  		jsr	sub_71CEC(pc)
000830BA 4EBA 0000                  		jsr	sub_71E18(pc)
000830BE 6000 0000                  		bra.w	loc_726E2
000830C2                            ; ===========================================================================
000830C2                            
000830C2                            loc_71CE0:
000830C2 4EBA 0000                  		jsr	sub_71D9E(pc)
000830C6 4EBA 0000                  		jsr	sub_71DC6(pc)
000830CA 6000 0000                  		bra.w	loc_71E24
000830CE                            ; End of function sub_71CCA
000830CE                            
000830CE                            
000830CE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000830CE                            
000830CE                            
000830CE                            sub_71CEC:				; XREF: sub_71CCA
000830CE 286D 0004                  		movea.l	4(a5),a4
000830D2 0895 0001                  		bclr	#1,(a5)
000830D6                            
000830D6                            loc_71CF4:
000830D6 7A00                       		moveq	#0,d5
000830D8 1A1C                       		move.b	(a4)+,d5
000830DA 0C05 00E0                  		cmpi.b	#-$20,d5
000830DE 6500                       		bcs.s	loc_71D04
000830E0 4EBA 0000                  		jsr	sub_72A5A(pc)
000830E4 60F0                       		bra.s	loc_71CF4
000830E6                            ; ===========================================================================
000830E6                            
000830E6                            loc_71D04:
000830E6 4EBA 0000                  		jsr	sub_726FE(pc)
000830EA 4A05                       		tst.b	d5
000830EC 6A00                       		bpl.s	loc_71D1A
000830EE 4EBA 0000                  		jsr	sub_71D22(pc)
000830F2 1A1C                       		move.b	(a4)+,d5
000830F4 6A00                       		bpl.s	loc_71D1A
000830F6 534C                       		subq.w	#1,a4
000830F8 6000 0000                  		bra.w	sub_71D60
000830FC                            ; ===========================================================================
000830FC                            
000830FC                            loc_71D1A:
000830FC 4EBA 0000                  		jsr	sub_71D40(pc)
00083100 6000 0000                  		bra.w	sub_71D60
00083104                            ; End of function sub_71CEC
00083104                            
00083104                            
00083104                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00083104                            
00083104                            
00083104                            sub_71D22:				; XREF: sub_71CEC
00083104 0405 0080                  		subi.b	#$80,d5
00083108 6700                       		beq.s	loc_71D58
0008310A DA2D 0008                  		add.b	8(a5),d5
0008310E 0245 007F                  		andi.w	#$7F,d5
00083112 E34D                       		lsl.w	#1,d5
00083114 41FA 0000                  		lea	word_72790(pc),a0
00083118 3C30 5000                  		move.w	(a0,d5.w),d6
0008311C 3B46 0010                  		move.w	d6,$10(a5)
00083120 4E75                       		rts	
00083122                            ; End of function sub_71D22
00083122                            
00083122                            
00083122                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00083122                            
00083122                            
00083122                            sub_71D40:				; XREF: sub_71C4E; sub_71CEC; sub_72878
00083122 1005                       		move.b	d5,d0
00083124 122D 0002                  		move.b	2(a5),d1
00083128                            
00083128                            loc_71D46:
00083128 5301                       		subq.b	#1,d1
0008312A 6700                       		beq.s	loc_71D4E
0008312C D005                       		add.b	d5,d0
0008312E 60F8                       		bra.s	loc_71D46
00083130                            ; ===========================================================================
00083130                            
00083130                            loc_71D4E:
00083130 1B40 000F                  		move.b	d0,$F(a5)
00083134 1B40 000E                  		move.b	d0,$E(a5)
00083138 4E75                       		rts	
0008313A                            ; End of function sub_71D40
0008313A                            
0008313A                            ; ===========================================================================
0008313A                            
0008313A                            loc_71D58:				; XREF: sub_71D22
0008313A 08D5 0001                  		bset	#1,(a5)
0008313E 426D 0010                  		clr.w	$10(a5)
00083142                            
00083142                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00083142                            
00083142                            
00083142                            sub_71D60:				; XREF: sub_71CEC; sub_72878; sub_728AC
00083142 2B4C 0004                  		move.l	a4,4(a5)
00083146 1B6D 000F 000E             		move.b	$F(a5),$E(a5)
0008314C 0815 0004                  		btst	#4,(a5)
00083150 6600                       		bne.s	locret_71D9C
00083152 1B6D 0013 0012             		move.b	$13(a5),$12(a5)
00083158 422D 000C                  		clr.b	$C(a5)
0008315C 0815 0003                  		btst	#3,(a5)
00083160 6700                       		beq.s	locret_71D9C
00083162 206D 0014                  		movea.l	$14(a5),a0
00083166 1B58 0018                  		move.b	(a0)+,$18(a5)
0008316A 1B58 0019                  		move.b	(a0)+,$19(a5)
0008316E 1B58 001A                  		move.b	(a0)+,$1A(a5)
00083172 1018                       		move.b	(a0)+,d0
00083174 E208                       		lsr.b	#1,d0
00083176 1B40 001B                  		move.b	d0,$1B(a5)
0008317A 426D 001C                  		clr.w	$1C(a5)
0008317E                            
0008317E                            locret_71D9C:
0008317E 4E75                       		rts	
00083180                            ; End of function sub_71D60
00083180                            
00083180                            
00083180                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00083180                            
00083180                            
00083180                            sub_71D9E:				; XREF: sub_71CCA; sub_72850
00083180 4A2D 0012                  		tst.b	$12(a5)
00083184 6700                       		beq.s	locret_71DC4
00083186 532D 0012                  		subq.b	#1,$12(a5)
0008318A 6600                       		bne.s	locret_71DC4
0008318C 08D5 0001                  		bset	#1,(a5)
00083190 4A2D 0001                  		tst.b	1(a5)
00083194 6B00 0000                  		bmi.w	loc_71DBE
00083198 4EBA 0000                  		jsr	sub_726FE(pc)
0008319C 584F                       		addq.w	#4,sp
0008319E 4E75                       		rts	
000831A0                            ; ===========================================================================
000831A0                            
000831A0                            loc_71DBE:
000831A0 4EBA 0000                  		jsr	sub_729A0(pc)
000831A4 584F                       		addq.w	#4,sp
000831A6                            
000831A6                            locret_71DC4:
000831A6 4E75                       		rts	
000831A8                            ; End of function sub_71D9E
000831A8                            
000831A8                            
000831A8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000831A8                            
000831A8                            
000831A8                            sub_71DC6:				; XREF: sub_71CCA; sub_72850
000831A8 584F                       		addq.w	#4,sp
000831AA 0815 0003                  		btst	#3,(a5)
000831AE 6700                       		beq.s	locret_71E16
000831B0 4A2D 0018                  		tst.b	$18(a5)
000831B4 6700                       		beq.s	loc_71DDA
000831B6 532D 0018                  		subq.b	#1,$18(a5)
000831BA 4E75                       		rts	
000831BC                            ; ===========================================================================
000831BC                            
000831BC                            loc_71DDA:
000831BC 532D 0019                  		subq.b	#1,$19(a5)
000831C0 6700                       		beq.s	loc_71DE2
000831C2 4E75                       		rts	
000831C4                            ; ===========================================================================
000831C4                            
000831C4                            loc_71DE2:
000831C4 206D 0014                  		movea.l	$14(a5),a0
000831C8 1B68 0001 0019             		move.b	1(a0),$19(a5)
000831CE 4A2D 001B                  		tst.b	$1B(a5)
000831D2 6600                       		bne.s	loc_71DFE
000831D4 1B68 0003 001B             		move.b	3(a0),$1B(a5)
000831DA 442D 001A                  		neg.b	$1A(a5)
000831DE 4E75                       		rts	
000831E0                            ; ===========================================================================
000831E0                            
000831E0                            loc_71DFE:
000831E0 532D 001B                  		subq.b	#1,$1B(a5)
000831E4 1C2D 001A                  		move.b	$1A(a5),d6
000831E8 4886                       		ext.w	d6
000831EA DC6D 001C                  		add.w	$1C(a5),d6
000831EE 3B46 001C                  		move.w	d6,$1C(a5)
000831F2 DC6D 0010                  		add.w	$10(a5),d6
000831F6 594F                       		subq.w	#4,sp
000831F8                            
000831F8                            locret_71E16:
000831F8 4E75                       		rts	
000831FA                            ; End of function sub_71DC6
000831FA                            
000831FA                            
000831FA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000831FA                            
000831FA                            
000831FA                            sub_71E18:				; XREF: sub_71CCA
000831FA 0815 0001                  		btst	#1,(a5)
000831FE 6600                       		bne.s	locret_71E48
00083200 3C2D 0010                  		move.w	$10(a5),d6
00083204 6700                       		beq.s	loc_71E4A
00083206                            
00083206                            loc_71E24:				; XREF: sub_71CCA
00083206 102D 001E                  		move.b	$1E(a5),d0
0008320A 4880                       		ext.w	d0
0008320C DC40                       		add.w	d0,d6
0008320E 0815 0002                  		btst	#2,(a5)
00083212 6600                       		bne.s	locret_71E48
00083214 3206                       		move.w	d6,d1
00083216 E049                       		lsr.w	#8,d1
00083218 103C 00A4                  		move.b	#-$5C,d0
0008321C 4EBA 0000                  		jsr	sub_72722(pc)
00083220 1206                       		move.b	d6,d1
00083222 103C 00A0                  		move.b	#-$60,d0
00083226 4EBA 0000                  		jsr	sub_72722(pc)
0008322A                            
0008322A                            locret_71E48:
0008322A 4E75                       		rts	
0008322C                            ; ===========================================================================
0008322C                            
0008322C                            loc_71E4A:
0008322C 08D5 0001                  		bset	#1,(a5)
00083230 4E75                       		rts	
00083232                            ; End of function sub_71E18
00083232                            
00083232                            ; ===========================================================================
00083232                            
00083232                            loc_71E50:				; XREF: sub_71B4C
00083232 6B00                       		bmi.s	loc_71E94
00083234 0C2E 0002 0003             		cmpi.b	#2,3(a6)
0008323A 6700 0000                  		beq.w	loc_71EFE
0008323E 1D7C 0002 0003             		move.b	#2,3(a6)
00083244 7602                       		moveq	#2,d3
00083246 103C 00B4                  		move.b	#-$4C,d0
0008324A 7200                       		moveq	#0,d1
0008324C                            
0008324C                            loc_71E6A:
0008324C 4EBA 0000                  		jsr	sub_7272E(pc)
00083250 4EBA 0000                  		jsr	sub_72764(pc)
00083254 5200                       		addq.b	#1,d0
00083256 51CB FFF4                  		dbf	d3,loc_71E6A
0008325A                            
0008325A 7602                       		moveq	#2,d3
0008325C 7028                       		moveq	#$28,d0
0008325E                            
0008325E                            loc_71E7C:
0008325E 1203                       		move.b	d3,d1
00083260 4EBA 0000                  		jsr	sub_7272E(pc)
00083264 5801                       		addq.b	#4,d1
00083266 4EBA 0000                  		jsr	sub_7272E(pc)
0008326A 51CB FFF2                  		dbf	d3,loc_71E7C
0008326E                            
0008326E 4EBA 0000                  		jsr	sub_729B6(pc)
00083272 6000 FD04                  		bra.w	loc_71C44
00083276                            ; ===========================================================================
00083276                            
00083276                            loc_71E94:				; XREF: loc_71E50
00083276 422E 0003                  		clr.b	3(a6)
0008327A 7630                       		moveq	#$30,d3
0008327C 4BEE 0040                  		lea	$40(a6),a5
00083280 7807                       		moveq	#7,d4					; MJ: number of YM2612 based channels
00083282                            
00083282                            loc_71EA0:
00083282 0815 0007                  		btst	#7,(a5)
00083286 6700                       		beq.s	loc_71EB8
00083288 0815 0002                  		btst	#2,(a5)
0008328C 6600                       		bne.s	loc_71EB8
0008328E 103C 00B4                  		move.b	#-$4C,d0
00083292 122D 000A                  		move.b	$A(a5),d1
00083296 4EBA 0000                  		jsr	sub_72722(pc)
0008329A                            
0008329A                            loc_71EB8:
0008329A DAC3                       		adda.w	d3,a5
0008329C 51CC FFE4                  		dbf	d4,loc_71EA0
000832A0                            
000832A0 4BEE 0250                  		lea	$250(a6),a5				; MJ: new SFX location
000832A4 7802                       		moveq	#2,d4
000832A6                            
000832A6                            loc_71EC4:
000832A6 0815 0007                  		btst	#7,(a5)
000832AA 6700                       		beq.s	loc_71EDC
000832AC 0815 0002                  		btst	#2,(a5)
000832B0 6600                       		bne.s	loc_71EDC
000832B2 103C 00B4                  		move.b	#-$4C,d0
000832B6 122D 000A                  		move.b	$A(a5),d1
000832BA 4EBA 0000                  		jsr	sub_72722(pc)
000832BE                            
000832BE                            loc_71EDC:
000832BE DAC3                       		adda.w	d3,a5
000832C0 51CC FFE4                  		dbf	d4,loc_71EC4
000832C4                            
000832C4 4BEE 0370                  		lea	$370(a6),a5				; MJ: new SFX location
000832C8 0815 0007                  		btst	#7,(a5)
000832CC 6700                       		beq.s	loc_71EFE
000832CE 0815 0002                  		btst	#2,(a5)
000832D2 6600                       		bne.s	loc_71EFE
000832D4 103C 00B4                  		move.b	#-$4C,d0
000832D8 122D 000A                  		move.b	$A(a5),d1
000832DC 4EBA 0000                  		jsr	sub_72722(pc)
000832E0                            
000832E0                            loc_71EFE:
000832E0 6000 FC96                  		bra.w	loc_71C44
000832E4                            
000832E4                            ; ---------------------------------------------------------------------------
000832E4                            ; Subroutine to	play a sound or	music track
000832E4                            ; ---------------------------------------------------------------------------
000832E4                            
000832E4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000832E4                            
000832E4                            
000832E4                            Sound_Play:				; XREF: sub_71B4C
000832E4 2079 0008 2C58             		movea.l	(Go_SoundTypes).l,a0
000832EA 43EE 000A                  		lea	$A(a6),a1	; load music track number
000832EE 1616                       		move.b	0(a6),d3
000832F0 7802                       		moveq	#2,d4
000832F2                            
000832F2                            loc_71F12:
000832F2 1011                       		move.b	(a1),d0		; move track number to d0
000832F4 1200                       		move.b	d0,d1
000832F6 4219                       		clr.b	(a1)+
000832F8 0400 0081                  		subi.b	#$81,d0
000832FC 6500                       		bcs.s	loc_71F3E
000832FE 0C2E 0080 0009             		cmpi.b	#$80,9(a6)
00083304 6700                       		beq.s	loc_71F2C
00083306 1D41 000A                  		move.b	d1,$A(a6)
0008330A 6000                       		bra.s	loc_71F3E
0008330C                            ; ===========================================================================
0008330C                            
0008330C                            loc_71F2C:
0008330C 0240 007F                  		andi.w	#$7F,d0
00083310 1430 0000                  		move.b	(a0,d0.w),d2
00083314 B403                       		cmp.b	d3,d2
00083316 6500                       		bcs.s	loc_71F3E
00083318 1602                       		move.b	d2,d3
0008331A 1D41 0009                  		move.b	d1,9(a6)	; set music flag
0008331E                            
0008331E                            loc_71F3E:
0008331E 51CC FFD2                  		dbf	d4,loc_71F12
00083322                            
00083322 4A03                       		tst.b	d3
00083324 6B00                       		bmi.s	locret_71F4A
00083326 1C83                       		move.b	d3,0(a6)
00083328                            
00083328                            locret_71F4A:
00083328 4E75                       		rts	
0008332A                            ; End of function Sound_Play
0008332A                            
0008332A                            
0008332A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008332A                            
0008332A                            
0008332A                            Sound_ChkValue:				; XREF: sub_71B4C
0008332A 7E00                       		moveq	#0,d7
0008332C 1E2E 0009                  		move.b	9(a6),d7
00083330 6700 0000                  		beq.w	Sound_E4
00083334 6A00                       		bpl.s	locret_71F8C
00083336 1D7C 0080 0009             		move.b	#$80,9(a6)	; reset	music flag
0008333C 0C07 009F                  		cmpi.b	#$9F,d7
00083340 6300 0000                  		bls.w	Sound_81to9F	; music	$81-$9F
00083344 0C07 00A0                  		cmpi.b	#$A0,d7
00083348 6500 0000                  		bcs.w	locret_71F8C
0008334C 0C07 00CF                  		cmpi.b	#$CF,d7
00083350 6300 0000                  		bls.w	Sound_A0toCF	; sound	$A0-$CF
00083354 0C07 00D0                  		cmpi.b	#$D0,d7
00083358 6500 0000                  		bcs.w	locret_71F8C
0008335C 0C07 00D1                  		cmpi.b	#$D1,d7
00083360 6500 0000                  		bcs.w	Sound_D0toDF	; sound	$D0-$DF
00083364 0C07 00DF                  		cmpi.b	#$DF,d7
00083368 6500 0000                  		blo.w	Sound_D1toDF	; sound	$D1-$DF
0008336C 0C07 00E4                  		cmpi.b	#$E4,d7
00083370 6300                       		bls.s	Sound_E0toE4	; sound	$E0-$E4
00083372                            
00083372                            locret_71F8C:
00083372 4E75                       		rts	
00083374                            ; ===========================================================================
00083374                            
00083374                            Sound_E0toE4:				; XREF: Sound_ChkValue
00083374 0407 00E0                  		subi.b	#$E0,d7
00083378 E54F                       		lsl.w	#2,d7
0008337A 4EFB 7000                  		jmp	Sound_ExIndex(pc,d7.w)
0008337E                            ; ===========================================================================
0008337E                            
0008337E                            Sound_ExIndex:
0008337E 6000 0000                  		bra.w	Sound_E0
00083382                            ; ===========================================================================
00083382 6000 0000                  		bra.w	Sound_E1
00083386                            ; ===========================================================================
00083386 6000 0000                  		bra.w	Sound_E2
0008338A                            ; ===========================================================================
0008338A 6000 0000                  		bra.w	Sound_E3
0008338E                            ; ===========================================================================
0008338E 6000 0000                  		bra.w	Sound_E4
00083392                            ; ===========================================================================
00083392                            ; ---------------------------------------------------------------------------
00083392                            ; Play "Say-gaa" PCM sound
00083392                            ; ---------------------------------------------------------------------------
00083392                            
00083392                            Sound_E1:
00083392 33FC 0100 00A1 1100 0839+  		StopZ80						; MJ: request Z80 stop "ON"
000833A4 45F9 0000 0000             		lea	(SegaPCM).l,a2				; MJ: load sample address
000833AA 47F9 00A0 4000             		lea	($A04000).l,a3				; MJ: load YM2612 port
000833B0 16FC 002A                  		move.b	#$2A,(a3)+				; MJ: set YM2612 address to the PCM data port
000833B4 283C 0000 0000             		move.l	#(SegaPCM_End-SegaPCM)-$01,d4		; MJ: prepare size
000833BA 3604                       		move.w	d4,d3					; MJ: get lower word size
000833BC 4844                       		swap	d4					; MJ: get upper word size
000833BE                            
000833BE                            PlayPCM_Loop:
000833BE 169A                       		move.b	(a2)+,(a3)				; MJ: save sample data to port
000833C0 702B                       		moveq	#$2B,d0					; MJ: set delay time
000833C2 51C8 FFFE                  		dbf	d0,*					; MJ: delay...
000833C6 51CB FFF6                  		dbf	d3,PlayPCM_Loop				; MJ: repeat til done
000833CA 51CC FFF2                  		dbf	d4,PlayPCM_Loop				; MJ: ''
000833CE 16BC 0080                  		move.b	#$80,(a3)				; MJ: save mute data to port
000833D2 584F                       		addq.w	#$04,sp					; MJ: skip return address
000833D4 534B                       		subq.w	#$01,a3					; MJ: move back to address port
000833D6 4A13                       		tst.b	(a3)					; MJ: is the YM2612 busy?
000833D8 6BFC                       		bmi.s	*-$02					; MJ: if so, branch and recheck
000833DA 16BC 002A                  		move.b	#$2A,(a3)				; MJ: write address (set it back to DAC port for the Z80)
000833DE 33FC 0000 00A1 1100        		StartZ80					; MJ: request Z80 stop "OFF"
000833E6 4E75                       		rts						; MJ: return
000833E8                            
000833E8                            ; ===========================================================================
000833E8                            ; ---------------------------------------------------------------------------
000833E8                            ; Play music track $81-$9F
000833E8                            ; ---------------------------------------------------------------------------
000833E8                            
000833E8                            Sound_81to9F:				; XREF: Sound_ChkValue
000833E8                            
000833E8                            
000833E8 33FC 0100 00A1 1100 0839+  		StopZ80
000833FA 41F9 0000 0000             		lea	(StopSample).l,a0				; MJ: load stop sample address
00083400 43F9 00A0 02E6             		lea	($A00000+PCM1_Sample).l,a1			; MJ: load PCM 1 slot address
00083406 12D8                       		move.b	(a0)+,(a1)+					; MJ: set address of sample
00083408 12D8                       		move.b	(a0)+,(a1)+					; MJ: ''
0008340A 12D8                       		move.b	(a0)+,(a1)+					; MJ: ''
0008340C 13FC 0064 00A0 0047        		move.b	#(CUPCM1_NewSample&$FF),($A00000+CU_Stack).l	; MJ: set routine to run
00083414 13FC 0002 00A0 0048        		move.b	#(CUPCM1_NewSample>>$08),($A00000+CU_Stack+1).l	; MJ: ''
0008341C 13FC 00C9 00A0 01D2        		move.b	#%11001001,($A00000+CUPCM1_RET).l		; MJ: change "NOP" to "RET"
00083424 41F9 0000 0000             		lea	(StopSample).l,a0				; MJ: load stop sample address
0008342A 43F9 00A0 02E9             		lea	($A00000+PCM2_Sample).l,a1			; MJ: load PCM 2 slot address
00083430 12D8                       		move.b	(a0)+,(a1)+					; MJ: ''
00083432 12D8                       		move.b	(a0)+,(a1)+					; MJ: ''
00083434 12D8                       		move.b	(a0)+,(a1)+					; MJ: ''
00083436 13FC 0028 00A0 01D3        		move.b	#%00101000,($A00000+CUPCM2_RET).l		; MJ: change "JR NZ" to "JR Z"
0008343E 33FC 0000 00A1 1100        		StartZ80
00083446                            
00083446                            
00083446                            
00083446 0C07 0088                  		cmpi.b	#$88,d7		; is "extra life" music	played?
0008344A 6600                       		bne.s	loc_72024	; if not, branch
0008344C 4A2E 0027                  		tst.b	$27(a6)
00083450 6600 0000                  		bne.w	loc_721B6
00083454 4BEE 0040                  		lea	$40(a6),a5
00083458 700A                       		moveq	#10,d0					; MJ: number of channels in total
0008345A                            
0008345A                            loc_71FE6:
0008345A 0895 0002                  		bclr	#2,(a5)
0008345E DAFC 0030                  		adda.w	#$30,a5
00083462 51C8 FFF6                  		dbf	d0,loc_71FE6
00083466                            
00083466 4BEE 0250                  		lea	$250(a6),a5				; MJ: new SFX location
0008346A 7005                       		moveq	#5,d0
0008346C                            
0008346C                            loc_71FF8:
0008346C 0895 0007                  		bclr	#7,(a5)
00083470 DAFC 0030                  		adda.w	#$30,a5
00083474 51C8 FFF6                  		dbf	d0,loc_71FF8
00083478 4216                       		clr.b	0(a6)
0008347A 204E                       		movea.l	a6,a0
0008347C 43EE 03D0                  		lea	$3D0(a6),a1				; MJ: new SFX location
00083480 303C 0087                  		move.w	#$87,d0
00083484                            
00083484                            loc_72012:
00083484 22D8                       		move.l	(a0)+,(a1)+
00083486 51C8 FFFC                  		dbf	d0,loc_72012
0008348A                            
0008348A 1D7C 0080 0027             		move.b	#$80,$27(a6)
00083490 4216                       		clr.b	0(a6)
00083492 6000                       		bra.s	loc_7202C
00083494                            ; ===========================================================================
00083494                            
00083494                            loc_72024:
00083494 422E 0027                  		clr.b	$27(a6)
00083498 422E 0026                  		clr.b	$26(a6)
0008349C                            
0008349C                            loc_7202C:
0008349C 4EBA 0000                  		jsr	sub_725CA(pc)
000834A0 2879 0008 2C68             		movea.l	(off_719A0).l,a4
000834A6 0407 0081                  		subi.b	#$81,d7
000834AA 1D74 7000 0029             		move.b	(a4,d7.w),$29(a6)
000834B0 2879 0008 2C60             		movea.l	(Go_MusicIndex).l,a4
000834B6 E54F                       		lsl.w	#2,d7
000834B8 2874 7000                  		movea.l	(a4,d7.w),a4
000834BC 7000                       		moveq	#0,d0
000834BE 3014                       		move.w	(a4),d0
000834C0 D08C                       		add.l	a4,d0
000834C2 2D40 0018                  		move.l	d0,$18(a6)
000834C6 102C 0005                  		move.b	5(a4),d0
000834CA 1D40 0028                  		move.b	d0,$28(a6)
000834CE 4A2E 002A                  		tst.b	$2A(a6)
000834D2 6700                       		beq.s	loc_72068
000834D4 102E 0029                  		move.b	$29(a6),d0
000834D8                            
000834D8                            loc_72068:
000834D8 1D40 0002                  		move.b	d0,2(a6)
000834DC 1D40 0001                  		move.b	d0,1(a6)
000834E0 7200                       		moveq	#0,d1
000834E2 264C                       		movea.l	a4,a3
000834E4 5C4C                       		addq.w	#6,a4
000834E6 7E00                       		moveq	#0,d7
000834E8 1E2B 0002                  		move.b	2(a3),d7
000834EC 6700 0000                  		beq.w	loc_72114
000834F0 5307                       		subq.b	#1,d7
000834F2 123C 00C0                  		move.b	#-$40,d1
000834F6 182B 0004                  		move.b	4(a3),d4
000834FA 7C30                       		moveq	#$30,d6
000834FC 1A3C 0001                  		move.b	#1,d5
00083500 43EE 0040                  		lea	$40(a6),a1
00083504 45FA 0000                  		lea	byte_721BA(pc),a2
00083508                            
00083508                            loc_72098:
00083508 08D1 0007                  		bset	#7,(a1)
0008350C 135A 0001                  		move.b	(a2)+,1(a1)
00083510 1344 0002                  		move.b	d4,2(a1)
00083514 1346 000D                  		move.b	d6,$D(a1)
00083518 1341 000A                  		move.b	d1,$A(a1)
0008351C 1345 000E                  		move.b	d5,$E(a1)
00083520 7000                       		moveq	#0,d0
00083522 3340 0010                  		move.w	d0,$10(a1)				; MJ: clear FM's frequency (ensures no frequency writing)
00083526 301C                       		move.w	(a4)+,d0
00083528 D08B                       		add.l	a3,d0
0008352A 2340 0004                  		move.l	d0,4(a1)
0008352E 335C 0008                  		move.w	(a4)+,8(a1)
00083532 D2C6                       		adda.w	d6,a1
00083534 51CF FFD2                  		dbf	d7,loc_72098
00083538 702B                       		moveq	#$2B,d0					; MJ: set YM2612 address to DAC/FM6 switch
0008353A 123C 0080                  		move.b	#%10000000,d1				; MJ: set to turn DAC on
0008353E 0C2B 0008 0002             		cmpi.b	#8,2(a3)				; MJ: changed to 8 (8 = 6FM channels, no DAC)
00083544 6600                       		bne.s	loc_720D8
00083546                            	;	moveq	#$2B,d0					; MJ: removed...
00083546 7200                       		moveq	#0,d1
00083548 4EBA 0000                  		jsr	sub_7272E(pc)
0008354C 6000 0000                  		bra.w	loc_72114
00083550                            ; ===========================================================================
00083550                            
00083550                            loc_720D8:
00083550 4EBA 0000                  		jsr	sub_7272E(pc)				; MJ: added... (turn DAC on)
00083554 7028                       		moveq	#$28,d0
00083556 7206                       		moveq	#6,d1
00083558 4EBA 0000                  		jsr	sub_7272E(pc)
0008355C 103C 0042                  		move.b	#$42,d0
00083560 727F                       		moveq	#$7F,d1
00083562 4EBA 0000                  		jsr	sub_72764(pc)
00083566 103C 004A                  		move.b	#$4A,d0
0008356A 727F                       		moveq	#$7F,d1
0008356C 4EBA 0000                  		jsr	sub_72764(pc)
00083570 103C 0046                  		move.b	#$46,d0
00083574 727F                       		moveq	#$7F,d1
00083576 4EBA 0000                  		jsr	sub_72764(pc)
0008357A 103C 004E                  		move.b	#$4E,d0
0008357E 727F                       		moveq	#$7F,d1
00083580 4EBA 0000                  		jsr	sub_72764(pc)
00083584 103C 00B6                  		move.b	#-$4A,d0
00083588 123C 00C0                  		move.b	#-$40,d1
0008358C 4EBA 0000                  		jsr	sub_72764(pc)
00083590                            
00083590                            loc_72114:
00083590 7A02                       		moveq	#$02,d5					; EXT: set PSG to delay for 1 extra frame (This is to match the PSG with the FM/DAC which is delayed a frame by the Z80)
00083592 7E00                       		moveq	#0,d7
00083594 1E2B 0003                  		move.b	3(a3),d7
00083598 6700                       		beq.s	loc_72154
0008359A 5307                       		subq.b	#1,d7
0008359C 43EE 01C0                  		lea	$1C0(a6),a1				; MJ: new BGM/SFX location
000835A0 45FA 0000                  		lea	byte_721C2(pc),a2
000835A4                            
000835A4                            loc_72126:
000835A4 08D1 0007                  		bset	#7,(a1)
000835A8 135A 0001                  		move.b	(a2)+,1(a1)
000835AC 1344 0002                  		move.b	d4,2(a1)
000835B0 1346 000D                  		move.b	d6,$D(a1)
000835B4 1345 000E                  		move.b	d5,$E(a1)
000835B8 337C FFFF 0010             		move.w	#$FFFF,$10(a1)				; MJ: clear PSG's frequency (ensures no frequency writing)
000835BE 137C 0001 0012             		move.b	#$01,$12(a1)				; MJ: set key release rate to 1
000835C4 7000                       		moveq	#0,d0
000835C6 301C                       		move.w	(a4)+,d0
000835C8 D08B                       		add.l	a3,d0
000835CA 2340 0004                  		move.l	d0,4(a1)
000835CE 335C 0008                  		move.w	(a4)+,8(a1)
000835D2 101C                       		move.b	(a4)+,d0
000835D4 135C 000B                  		move.b	(a4)+,$B(a1)
000835D8 D2C6                       		adda.w	d6,a1
000835DA 51CF FFC8                  		dbf	d7,loc_72126
000835DE                            
000835DE                            loc_72154:
000835DE 43EE 0250                  		lea	$250(a6),a1				; MJ: new SFX location
000835E2 7E05                       		moveq	#5,d7
000835E4                            
000835E4                            loc_7215A:
000835E4 4A11                       		tst.b	(a1)
000835E6 6A00 0000                  		bpl.w	loc_7217C
000835EA 7000                       		moveq	#0,d0
000835EC 1029 0001                  		move.b	1(a1),d0
000835F0 6B00                       		bmi.s	loc_7216E
000835F2 5500                       		subq.b	#2,d0
000835F4 E508                       		lsl.b	#2,d0
000835F6 6000                       		bra.s	loc_72170
000835F8                            ; ===========================================================================
000835F8                            
000835F8                            loc_7216E:
000835F8 E608                       		lsr.b	#3,d0
000835FA                            
000835FA                            loc_72170:
000835FA 41FA 0000                  		lea	dword_722CC(pc),a0
000835FE 2070 0000                  		movea.l	(a0,d0.w),a0
00083602 08D0 0002                  		bset	#2,(a0)
00083606                            
00083606                            loc_7217C:
00083606 D2C6                       		adda.w	d6,a1
00083608 51CF FFDA                  		dbf	d7,loc_7215A
0008360C                            
0008360C 4A6E 0370                  		tst.w	$370(a6)				; MJ: new SFX location
00083610 6A00                       		bpl.s	loc_7218E
00083612 08EE 0002 0130             		bset	#2,$130(a6)				; MJ: new BGM location
00083618                            
00083618                            loc_7218E:
00083618 4A6E 03A0                  		tst.w	$3A0(a6)				; MJ: new SFX location
0008361C 6A00                       		bpl.s	loc_7219A
0008361E 08EE 0002 0220             		bset	#2,$220(a6)				; MJ: new BGM location
00083624                            
00083624                            
00083624                            loc_7219A:
00083624 4BEE 00A0                  		lea	$A0(a6),a5				; MJ: new FM location
00083628 7805                       		moveq	#5,d4
0008362A                            
0008362A                            loc_721A0:
0008362A 4EBA 0000                  		jsr	sub_726FE(pc)
0008362E DAC6                       		adda.w	d6,a5
00083630 51CC FFF8                  		dbf	d4,loc_721A0
00083634 7802                       		moveq	#2,d4
00083636                            
00083636                            loc_721AC:
00083636 4EBA 0000                  		jsr	sub_729A0(pc)
0008363A DAC6                       		adda.w	d6,a5
0008363C 51CC FFF8                  		dbf	d4,loc_721AC
00083640                            
00083640                            loc_721B6:
00083640 584F                       		addq.w	#4,sp
00083642 4E75                       		rts	
00083644                            ; ===========================================================================
00083644 0606 0001 0204 0506 00     byte_721BA:	dc.b 6,	6, 0, 1, 2, 4, 5, 6, 0			; MJ: extra 6 (for PCM 2)
0008364E 00                         		even
0008364E 80A0 C000                  byte_721C2:	dc.b $80, $A0, $C0, 0
00083652                            		even
00083652                            ; ===========================================================================
00083652                            ; ---------------------------------------------------------------------------
00083652                            ; Play normal sound effect
00083652                            ; ---------------------------------------------------------------------------
00083652                            
00083652                            Sound_D1toDF:
00083652 4A2E 0027                  		tst.b	$27(a6)
00083656 6600 0000                  		bne.w	loc_722C6
0008365A 4A2E 0004                  		tst.b	4(a6)
0008365E 6600 0000                  		bne.w	loc_722C6
00083662 4A2E 0024                  		tst.b	$24(a6)
00083666 6600 0000                  		bne.w	loc_722C6
0008366A 4238 C900                  		clr.b	($FFFFC900).w
0008366E 0C07 00D1                  		cmp.b	#$D1,d7		; is this the Spin Dash sound?
00083672 6600                       		bne.s	@cont3	; if not, branch
00083674 3F00                       		move.w	d0,-(sp)
00083676 1038 C902                  		move.b	($FFFFC902).w,d0	; store extra frequency
0008367A 4A38 C901                  		tst.b	($FFFFC901).w	; is the Spin Dash timer active?
0008367E 6600                       		bne.s	@cont1		; if it is, branch
00083680 103C 00FF                  		move.b	#-1,d0		; otherwise, reset frequency (becomes 0 on next line)
00083684                            		
00083684                            @cont1:
00083684 5200                       		addq.b	#1,d0
00083686 0C00 000C                  		cmp.b	#$C,d0		; has the limit been reached?
0008368A 6400                       		bcc.s	@cont2		; if it has, branch
0008368C 11C0 C902                  		move.b	d0,($FFFFC902).w	; otherwise, set new frequency
00083690                            		
00083690                            @cont2:
00083690 11FC 0001 C900             		move.b	#1,($FFFFC900).w	; set flag
00083696 11FC 003C C901             		move.b	#60,($FFFFC901).w	; set timer
0008369C 301F                       		move.w	(sp)+,d0
0008369E                            		
0008369E                            @cont3:
0008369E 2079 0008 2C64             		movea.l	(Go_SoundIndex).l,a0
000836A4 0407 00A1                  		sub.b	#$A1,d7
000836A8 6000 0000                  		bra	SoundEffects_Common
000836AC                            
000836AC                            Sound_A0toCF:				; XREF: Sound_ChkValue
000836AC 4A2E 0027                  		tst.b	$27(a6)
000836B0 6600 0000                  		bne.w	loc_722C6
000836B4 4A2E 0004                  		tst.b	4(a6)
000836B8 6600 0000                  		bne.w	loc_722C6
000836BC 4A2E 0024                  		tst.b	$24(a6)
000836C0 6600 0000                  		bne.w	loc_722C6
000836C4 4238 C900                  		clr.b	($FFFFC900).w		
000836C8 0C07 00B5                  		cmpi.b	#$B5,d7		; is ring sound	effect played?
000836CC 6600                       		bne.s	Sound_notB5	; if not, branch
000836CE 4A2E 002B                  		tst.b	$2B(a6)
000836D2 6600                       		bne.s	loc_721EE
000836D4 1E3C 00CE                  		move.b	#$CE,d7		; play ring sound in left speaker
000836D8                            
000836D8                            loc_721EE:
000836D8 086E 0000 002B             		bchg	#0,$2B(a6)	; change speaker
000836DE                            
000836DE                            Sound_notB5:
000836DE 0C07 00A7                  		cmpi.b	#$A7,d7		; is "pushing" sound played?
000836E2 6600                       		bne.s	Sound_notA7	; if not, branch
000836E4 4A2E 002C                  		tst.b	$2C(a6)
000836E8 6600 0000                  		bne.w	locret_722C4
000836EC 1D7C 0080 002C             		move.b	#$80,$2C(a6)
000836F2                            
000836F2                            Sound_notA7:
000836F2 2079 0008 2C64             		movea.l	(Go_SoundIndex).l,a0
000836F8 0407 00A0                  		subi.b	#$A0,d7
000836FC                            SoundEffects_Common:
000836FC E54F                       		lsl.w	#2,d7
000836FE 2670 7000                  		movea.l	(a0,d7.w),a3
00083702 224B                       		movea.l	a3,a1
00083704 7200                       		moveq	#0,d1
00083706 3219                       		move.w	(a1)+,d1
00083708 D28B                       		add.l	a3,d1
0008370A 1A19                       		move.b	(a1)+,d5
0008370C 1E19                       		move.b	(a1)+,d7
0008370E 5307                       		subq.b	#1,d7
00083710 7C30                       		moveq	#$30,d6
00083712                            
00083712                            loc_72228:
00083712 7600                       		moveq	#0,d3
00083714 1629 0001                  		move.b	1(a1),d3
00083718 7402                       		moveq	#$02,d2					; EXT: set PSG to delay for 1 extra frame (This is to match the PSG with the FM/DAC which is delayed a frame by the Z80)
0008371A 1803                       		move.b	d3,d4
0008371C 6B00                       		bmi.s	loc_72244
0008371E 143C 0001                  		move.b	#$01,d2					; EXT: set DAC/FM to delay for 0 frames like normal (these have an auto delay of 1 frame in the Z80)
00083722 5543                       		subq.w	#2,d3
00083724 E54B                       		lsl.w	#2,d3
00083726 4BFA 0000                  		lea	dword_722CC(pc),a5
0008372A 2A75 3000                  		movea.l	(a5,d3.w),a5
0008372E 08D5 0002                  		bset	#2,(a5)
00083732 6000                       		bra.s	loc_7226E
00083734                            		
00083734                            ; ===========================================================================
00083734                            
00083734                            loc_72244:
00083734 E64B                       		lsr.w	#3,d3
00083736 4BFA 0000                  		lea	dword_722CC(pc),a5
0008373A 2A75 3000                  		movea.l	(a5,d3.w),a5
0008373E 08D5 0002                  		bset	#2,(a5)
00083742 0C04 00C0                  		cmpi.b	#$C0,d4
00083746 6600                       		bne.s	loc_7226E
00083748 1004                       		move.b	d4,d0
0008374A 0000 001F                  		ori.b	#$1F,d0
0008374E 13C0 00C0 0011             		move.b	d0,($C00011).l
00083754 0840 0005                  		bchg	#5,d0
00083758 13C0 00C0 0011             		move.b	d0,($C00011).l
0008375E                            
0008375E                            loc_7226E:
0008375E 4BFA 0000                  		lea	dword_722EC(pc),a5
00083762 2A75 3000                  		movea.l	(a5,d3.w),a5
00083766 244D                       		movea.l	a5,a2
00083768 700B                       		moveq	#$B,d0
0008376A                            
0008376A                            loc_72276:
0008376A 429A                       		clr.l	(a2)+
0008376C 51C8 FFFC                  		dbf	d0,loc_72276
00083770                            
00083770 3A99                       		move.w	(a1)+,(a5)
00083772 1B45 0002                  		move.b	d5,2(a5)
00083776 7000                       		moveq	#0,d0
00083778 3019                       		move.w	(a1)+,d0
0008377A D08B                       		add.l	a3,d0
0008377C 2B40 0004                  		move.l	d0,4(a5)
00083780 3B59 0008                  		move.w	(a1)+,8(a5)
00083784 4A38 C900                  		tst.b	($FFFFC900).w	; is the Spin Dash sound playing?
00083788 6700                       		beq.s	@cont		; if not, branch
0008378A 3F00                       		move.w	d0,-(sp)
0008378C 1038 C902                  		move.b	($FFFFC902).w,d0
00083790 D12D 0008                  		add.b	d0,8(a5)
00083794 301F                       		move.w	(sp)+,d0
00083796                            		
00083796                            @cont:
00083796 1B42 000E                  		move.b	d2,$E(a5)				; EXT: moving d2 contents (1 for FM/4 for PSG)
0008379A 1B46 000D                  		move.b	d6,$D(a5)
0008379E 4A04                       		tst.b	d4
000837A0 6B00                       		bmi.s	loc_722A8
000837A2 1B7C 00C0 000A             		move.b	#$C0,$A(a5)
000837A8 2B41 0020                  		move.l	d1,$20(a5)
000837AC                            
000837AC                            loc_722A8:
000837AC 51CF FF64                  		dbf	d7,loc_72228
000837B0                            
000837B0 4A2E 0280                  		tst.b	$280(a6)				; MJ: new SFX location
000837B4 6A00                       		bpl.s	loc_722B8
000837B6 08EE 0002 0370             		bset	#2,$370(a6)				; MJ: new SFX location
000837BC                            
000837BC                            loc_722B8:
000837BC 4A2E 0340                  		tst.b	$340(a6)				; MJ: new SFX location
000837C0 6A00                       		bpl.s	locret_722C4
000837C2 08EE 0002 03A0             		bset	#2,$3A0(a6)				; MJ: new SFX location
000837C8                            
000837C8                            locret_722C4:
000837C8 4E75                       		rts	
000837CA                            ; ===========================================================================
000837CA                            
000837CA                            loc_722C6:
000837CA 4216                       		clr.b	0(a6)
000837CC 4E75                       		rts	
000837CE                            ; ===========================================================================
000837CE 00FF F100                  dword_722CC:	dc.l $FFF0D0+$30				; MJ: new locations (see all +$30)
000837D2 0000 0000                  		dc.l 0
000837D6 00FF F130                  		dc.l $FFF100+$30
000837DA 00FF F160                  		dc.l $FFF130+$30
000837DE 00FF F1C0                  		dc.l $FFF190+$30
000837E2 00FF F1F0                  		dc.l $FFF1C0+$30
000837E6 00FF F220                  		dc.l $FFF1F0+$30
000837EA 00FF F220                  		dc.l $FFF1F0+$30
000837EE 00FF F250                  dword_722EC:	dc.l $FFF220+$30
000837F2 0000 0000                  		dc.l 0
000837F6 00FF F280                  		dc.l $FFF250+$30
000837FA 00FF F2B0                  		dc.l $FFF280+$30
000837FE 00FF F2E0                  		dc.l $FFF2B0+$30
00083802 00FF F310                  		dc.l $FFF2E0+$30
00083806 00FF F340                  		dc.l $FFF310+$30
0008380A 00FF F340                  		dc.l $FFF310+$30
0008380E                            ; ===========================================================================
0008380E                            ; ---------------------------------------------------------------------------
0008380E                            ; Play GHZ waterfall sound
0008380E                            ; ---------------------------------------------------------------------------
0008380E                            
0008380E                            Sound_D0toDF:				; XREF: Sound_ChkValue
0008380E 4A2E 0027                  		tst.b	$27(a6)
00083812 6600 0000                  		bne.w	locret_723C6
00083816 4A2E 0004                  		tst.b	4(a6)
0008381A 6600 0000                  		bne.w	locret_723C6
0008381E 4A2E 0024                  		tst.b	$24(a6)
00083822 6600 0000                  		bne.w	locret_723C6
00083826 2079 0008 2C5C             		movea.l	(Go_SoundD0).l,a0
0008382C 0407 00D0                  		subi.b	#$D0,d7
00083830 E54F                       		lsl.w	#2,d7
00083832 2670 7000                  		movea.l	(a0,d7.w),a3
00083836 224B                       		movea.l	a3,a1
00083838 7000                       		moveq	#0,d0
0008383A 3019                       		move.w	(a1)+,d0
0008383C D08B                       		add.l	a3,d0
0008383E 2D40 0020                  		move.l	d0,$20(a6)
00083842 1A19                       		move.b	(a1)+,d5
00083844 1E19                       		move.b	(a1)+,d7
00083846 5307                       		subq.b	#1,d7
00083848 7C30                       		moveq	#$30,d6
0008384A                            
0008384A                            loc_72348:
0008384A 1829 0001                  		move.b	1(a1),d4
0008384E 6B00                       		bmi.s	loc_7235A
00083850 08EE 0002 0130             		bset	#2,$130(a6)				; MJ: new BGM location
00083856 4BEE 0370                  		lea	$370(a6),a5				; MJ: new SFX location
0008385A 6000                       		bra.s	loc_72364
0008385C                            ; ===========================================================================
0008385C                            
0008385C                            loc_7235A:
0008385C 08EE 0002 0220             		bset	#2,$220(a6)				; MJ: new BGM location
00083862 4BEE 03A0                  		lea	$3A0(a6),a5				; MJ: new SFX location
00083866                            
00083866                            loc_72364:
00083866 244D                       		movea.l	a5,a2
00083868 700B                       		moveq	#$B,d0
0008386A                            
0008386A                            loc_72368:
0008386A 429A                       		clr.l	(a2)+
0008386C 51C8 FFFC                  		dbf	d0,loc_72368
00083870                            
00083870 3A99                       		move.w	(a1)+,(a5)
00083872 1B45 0002                  		move.b	d5,2(a5)
00083876 7000                       		moveq	#0,d0
00083878 3019                       		move.w	(a1)+,d0
0008387A D08B                       		add.l	a3,d0
0008387C 2B40 0004                  		move.l	d0,4(a5)
00083880 3B59 0008                  		move.w	(a1)+,8(a5)
00083884 1B7C 0001 000E             		move.b	#1,$E(a5)
0008388A 1B46 000D                  		move.b	d6,$D(a5)
0008388E 4A04                       		tst.b	d4
00083890 6B00                       		bmi.s	loc_72396
00083892 1B7C 00C0 000A             		move.b	#$C0,$A(a5)
00083898                            
00083898                            loc_72396:
00083898 51CF FFB0                  		dbf	d7,loc_72348
0008389C                            
0008389C 4A2E 0280                  		tst.b	$280(a6)				; MJ: new SFX location
000838A0 6A00                       		bpl.s	loc_723A6
000838A2 08EE 0002 0370             		bset	#2,$370(a6)				; MJ: new SFX location
000838A8                            
000838A8                            loc_723A6:
000838A8 4A2E 0340                  		tst.b	$340(a6)				; MJ: new SFX location
000838AC 6A00                       		bpl.s	locret_723C6
000838AE 08EE 0002 03A0             		bset	#2,$3A0(a6)				; MJ: new SFX location
000838B4 0004 001F                  		ori.b	#$1F,d4
000838B8 13C4 00C0 0011             		move.b	d4,($C00011).l
000838BE 0844 0005                  		bchg	#5,d4
000838C2 13C4 00C0 0011             		move.b	d4,($C00011).l
000838C8                            
000838C8                            locret_723C6:
000838C8 4E75                       		rts	
000838CA                            ; End of function Sound_ChkValue
000838CA                            
000838CA                            ; ===========================================================================
000838CA 00FF F130                  		dc.l $FFF100+$30				; MJ: new channel locations (see +$30)
000838CE 00FF F220                  		dc.l $FFF1F0+$30
000838D2 00FF F280                  		dc.l $FFF250+$30
000838D6 00FF F340                  		dc.l $FFF310+$30
000838DA 00FF F370                  		dc.l $FFF340+$30
000838DE 00FF F3A0                  		dc.l $FFF370+$30
000838E2                            
000838E2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000838E2                            
000838E2                            
000838E2                            Snd_FadeOut1:				; XREF: Sound_E0
000838E2 4216                       		clr.b	0(a6)
000838E4 4BEE 0250                  		lea	$250(a6),a5				; MJ: new SFX location
000838E8 7E05                       		moveq	#5,d7
000838EA                            
000838EA                            loc_723EA:
000838EA 4A15                       		tst.b	(a5)
000838EC 6A00 0000                  		bpl.w	loc_72472
000838F0 0895 0007                  		bclr	#7,(a5)
000838F4 7600                       		moveq	#0,d3
000838F6 162D 0001                  		move.b	1(a5),d3
000838FA 6B00                       		bmi.s	loc_7243C
000838FC 4EBA 0000                  		jsr	sub_726FE(pc)
00083900 0C03 0004                  		cmpi.b	#4,d3
00083904 6600                       		bne.s	loc_72416
00083906 4A2E 0370                  		tst.b	$370(a6)				; MJ: new SFX location
0008390A 6A00                       		bpl.s	loc_72416
0008390C 4BEE 0370                  		lea	$370(a6),a5				; MJ: new SFX location
00083910 226E 0020                  		movea.l	$20(a6),a1
00083914 6000                       		bra.s	loc_72428
00083916                            ; ===========================================================================
00083916                            
00083916                            loc_72416:
00083916 5503                       		subq.b	#2,d3
00083918 E50B                       		lsl.b	#2,d3
0008391A 41FA FEB2                  		lea	dword_722CC(pc),a0
0008391E 264D                       		movea.l	a5,a3
00083920 2A70 3000                  		movea.l	(a0,d3.w),a5
00083924 226E 0018                  		movea.l	$18(a6),a1
00083928                            
00083928                            loc_72428:
00083928 0895 0002                  		bclr	#2,(a5)
0008392C 08D5 0001                  		bset	#1,(a5)
00083930 102D 000B                  		move.b	$B(a5),d0
00083934 4EBA 0000                  		jsr	sub_72C4E(pc)
00083938 2A4B                       		movea.l	a3,a5
0008393A 6000                       		bra.s	loc_72472
0008393C                            ; ===========================================================================
0008393C                            
0008393C                            loc_7243C:
0008393C 4EBA 0000                  		jsr	sub_729A0(pc)
00083940 41EE 03A0                  		lea	$3A0(a6),a0				; MJ: new SFX location
00083944 0C03 00E0                  		cmpi.b	#$E0,d3
00083948 6700                       		beq.s	loc_7245A
0008394A 0C03 00C0                  		cmpi.b	#$C0,d3
0008394E 6700                       		beq.s	loc_7245A
00083950 E60B                       		lsr.b	#3,d3
00083952 41FA FE7A                  		lea	dword_722CC(pc),a0
00083956 2070 3000                  		movea.l	(a0,d3.w),a0
0008395A                            
0008395A                            loc_7245A:
0008395A 0890 0002                  		bclr	#2,(a0)
0008395E 08D0 0001                  		bset	#1,(a0)
00083962 0C28 00E0 0001             		cmpi.b	#$E0,1(a0)
00083968 6600                       		bne.s	loc_72472
0008396A 13E8 001F 00C0 0011        		move.b	$1F(a0),($C00011).l
00083972                            
00083972                            loc_72472:
00083972 DAFC 0030                  		adda.w	#$30,a5
00083976 51CF FF72                  		dbf	d7,loc_723EA
0008397A                            
0008397A 4E75                       		rts	
0008397C                            ; End of function Snd_FadeOut1
0008397C                            
0008397C                            
0008397C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008397C                            
0008397C                            
0008397C                            Snd_FadeOut2:				; XREF: Sound_E0
0008397C 4BEE 0370                  		lea	$370(a6),a5				; MJ: new SFX location
00083980 4A15                       		tst.b	(a5)
00083982 6A00                       		bpl.s	loc_724AE
00083984 0895 0007                  		bclr	#7,(a5)
00083988 0815 0002                  		btst	#2,(a5)
0008398C 6600                       		bne.s	loc_724AE
0008398E 4EBA 0000                  		jsr	loc_7270A(pc)
00083992 4BEE 0130                  		lea	$130(a6),a5				; MJ: new BGM location
00083996 0895 0002                  		bclr	#2,(a5)
0008399A 08D5 0001                  		bset	#1,(a5)
0008399E 4A15                       		tst.b	(a5)
000839A0 6A00                       		bpl.s	loc_724AE
000839A2 226E 0018                  		movea.l	$18(a6),a1
000839A6 102D 000B                  		move.b	$B(a5),d0
000839AA 4EBA 0000                  		jsr	sub_72C4E(pc)
000839AE                            
000839AE                            loc_724AE:
000839AE 4BEE 03A0                  		lea	$3A0(a6),a5				; MJ: new SFX location
000839B2 4A15                       		tst.b	(a5)
000839B4 6A00                       		bpl.s	locret_724E4
000839B6 0895 0007                  		bclr	#7,(a5)
000839BA 0815 0002                  		btst	#2,(a5)
000839BE 6600                       		bne.s	locret_724E4
000839C0 4EBA 0000                  		jsr	loc_729A6(pc)
000839C4 4BEE 0220                  		lea	$220(a6),a5				; MJ: new BGM location
000839C8 0895 0002                  		bclr	#2,(a5)
000839CC 08D5 0001                  		bset	#1,(a5)
000839D0 4A15                       		tst.b	(a5)
000839D2 6A00                       		bpl.s	locret_724E4
000839D4 0C2D 00E0 0001             		cmpi.b	#-$20,1(a5)
000839DA 6600                       		bne.s	locret_724E4
000839DC 13ED 001F 00C0 0011        		move.b	$1F(a5),($C00011).l
000839E4                            
000839E4                            locret_724E4:
000839E4 4E75                       		rts	
000839E6                            ; End of function Snd_FadeOut2
000839E6                            
000839E6                            ; ===========================================================================
000839E6                            ; ---------------------------------------------------------------------------
000839E6                            ; Fade out music
000839E6                            ; ---------------------------------------------------------------------------
000839E6                            
000839E6                            Sound_E0:				; XREF: Sound_ExIndex
000839E6 4EBA FEFA                  		jsr	Snd_FadeOut1(pc)
000839EA 4EBA FF90                  		jsr	Snd_FadeOut2(pc)
000839EE 1D7C 0003 0006             		move.b	#3,6(a6)
000839F4 1D7C 0028 0004             		move.b	#$28,4(a6)
000839FA 422E 0040                  		clr.b	$40(a6)
000839FE 422E 0070                  		clr.b	$70(a6)					; MJ: stop PCM 2 as well
00083A02 422E 002A                  		clr.b	$2A(a6)
00083A06 4E75                       		rts	
00083A08                            
00083A08                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00083A08                            
00083A08                            
00083A08                            sub_72504:				; XREF: sub_71B4C
00083A08 102E 0006                  		move.b	6(a6),d0
00083A0C 6700                       		beq.s	loc_72510
00083A0E 532E 0006                  		subq.b	#1,6(a6)
00083A12 4E75                       		rts	
00083A14                            ; ===========================================================================
00083A14                            
00083A14                            loc_72510:
00083A14 532E 0004                  		subq.b	#1,4(a6)
00083A18 6700 0000                  		beq.w	Sound_E4
00083A1C 1D7C 0003 0006             		move.b	#3,6(a6)
00083A22 4BEE 00A0                  		lea	$A0(a6),a5				; MJ: new FM location
00083A26 7E05                       		moveq	#5,d7
00083A28                            
00083A28                            loc_72524:
00083A28 4A15                       		tst.b	(a5)
00083A2A 6A00                       		bpl.s	loc_72538
00083A2C 522D 0009                  		addq.b	#1,9(a5)
00083A30 6A00                       		bpl.s	loc_72534
00083A32 0895 0007                  		bclr	#7,(a5)
00083A36 6000                       		bra.s	loc_72538
00083A38                            ; ===========================================================================
00083A38                            
00083A38                            loc_72534:
00083A38 4EBA 0000                  		jsr	sub_72CB4(pc)
00083A3C                            
00083A3C                            loc_72538:
00083A3C DAFC 0030                  		adda.w	#$30,a5
00083A40 51CF FFE6                  		dbf	d7,loc_72524
00083A44                            
00083A44 7E02                       		moveq	#2,d7
00083A46                            
00083A46                            loc_72542:
00083A46 4A15                       		tst.b	(a5)
00083A48 6A00                       		bpl.s	loc_72560
00083A4A 522D 0009                  		addq.b	#1,9(a5)
00083A4E 0C2D 0010 0009             		cmpi.b	#$10,9(a5)
00083A54 6500                       		bcs.s	loc_72558
00083A56 0895 0007                  		bclr	#7,(a5)
00083A5A 6000                       		bra.s	loc_72560
00083A5C                            ; ===========================================================================
00083A5C                            
00083A5C                            loc_72558:
00083A5C 1C2D 0009                  		move.b	9(a5),d6
00083A60 4EBA 0000                  		jsr	sub_7296A(pc)
00083A64                            
00083A64                            loc_72560:
00083A64 DAFC 0030                  		adda.w	#$30,a5
00083A68 51CF FFDC                  		dbf	d7,loc_72542
00083A6C                            
00083A6C 4E75                       		rts	
00083A6E                            ; End of function sub_72504
00083A6E                            
00083A6E                            
00083A6E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00083A6E                            
00083A6E                            
00083A6E                            sub_7256A:				; XREF: Sound_E4; sub_725CA
00083A6E 7602                       		moveq	#2,d3
00083A70 7028                       		moveq	#$28,d0
00083A72                            
00083A72                            loc_7256E:
00083A72 1203                       		move.b	d3,d1
00083A74 4EBA 0000                  		jsr	sub_7272E(pc)
00083A78 5801                       		addq.b	#4,d1
00083A7A 4EBA 0000                  		jsr	sub_7272E(pc)
00083A7E 51CB FFF2                  		dbf	d3,loc_7256E
00083A82                            
00083A82 7040                       		moveq	#$40,d0
00083A84 727F                       		moveq	#$7F,d1
00083A86 7802                       		moveq	#2,d4
00083A88                            
00083A88                            loc_72584:
00083A88 7603                       		moveq	#3,d3
00083A8A                            
00083A8A                            loc_72586:
00083A8A 4EBA 0000                  		jsr	sub_7272E(pc)
00083A8E 4EBA 0000                  		jsr	sub_72764(pc)
00083A92 5840                       		addq.w	#4,d0
00083A94 51CB FFF4                  		dbf	d3,loc_72586
00083A98                            
00083A98 0400 000F                  		subi.b	#$F,d0
00083A9C 51CC FFEA                  		dbf	d4,loc_72584
00083AA0                            
00083AA0 4E75                       		rts	
00083AA2                            ; End of function sub_7256A
00083AA2                            
00083AA2                            ; ===========================================================================
00083AA2                            ; ---------------------------------------------------------------------------
00083AA2                            ; Stop music
00083AA2                            ; ---------------------------------------------------------------------------
00083AA2                            
00083AA2                            Sound_E4:
00083AA2 33FC 0100 00A1 1100 0839+  		StopZ80
00083AB4 41F9 0000 0000             		lea	(StopSample).l,a0				; EXT: load stop sample address
00083ABA 43F9 00A0 02E6             		lea	($A00000+PCM1_Sample).l,a1			; EXT: load PCM 1 slot address
00083AC0 12D8                       		move.b	(a0)+,(a1)+					; EXT: set address of sample
00083AC2 12D8                       		move.b	(a0)+,(a1)+					; EXT: ''
00083AC4 12D8                       		move.b	(a0)+,(a1)+					; EXT: ''
00083AC6 13FC 0064 00A0 0047        		move.b	#(CUPCM1_NewSample&$FF),($A00000+CU_Stack).l	; EXT: set routine to run
00083ACE 13FC 0002 00A0 0048        		move.b	#(CUPCM1_NewSample>>$08),($A00000+CU_Stack+1).l	; EXT: ''
00083AD6 13FC 00C9 00A0 01D2        		move.b	#%11001001,($A00000+CUPCM1_RET).l		; EXT: change "NOP" to "RET"
00083ADE 41F9 0000 0000             		lea	(StopSample).l,a0				; EXT: load stop sample address
00083AE4 43F9 00A0 02E9             		lea	($A00000+PCM2_Sample).l,a1			; EXT: load PCM 2 slot address
00083AEA 12D8                       		move.b	(a0)+,(a1)+					; EXT: ''
00083AEC 12D8                       		move.b	(a0)+,(a1)+					; EXT: ''
00083AEE 12D8                       		move.b	(a0)+,(a1)+					; EXT: ''
00083AF0 13FC 0028 00A0 01D3        		move.b	#%00101000,($A00000+CUPCM2_RET).l		; EXT: change "JR NZ" to "JR Z"
00083AF8 33FC 0000 00A1 1100        		StartZ80
00083B00                            
00083B00 702B                       		moveq	#$2B,d0
00083B02 123C 0080                  		move.b	#$80,d1
00083B06 4EBA 0000                  		jsr	sub_7272E(pc)
00083B0A 7027                       		moveq	#$27,d0
00083B0C 7200                       		moveq	#0,d1
00083B0E 4EBA 0000                  		jsr	sub_7272E(pc)
00083B12 204E                       		movea.l	a6,a0
00083B14 2C2E 0010                  		move.l	$10(a6),d6					; EXT: store YM Cue list pointer
00083B18 303C 00EF                  		move.w	#$EF,d0						; MJ: new size of data to clear
00083B1C                            
00083B1C                            loc_725B6:
00083B1C 4298                       		clr.l	(a0)+
00083B1E 51C8 FFFC                  		dbf	d0,loc_725B6
00083B22                            
00083B22 2D46 0010                  		move.l	d6,$10(a6)					; EXT: restore YM Cue list pointer
00083B26 1D7C 0080 0009             		move.b	#$80,9(a6)	; set music to $80 (silence)
00083B2C 4EBA FF40                  		jsr	sub_7256A(pc)
00083B30 6000 0000                  		bra.w	sub_729B6
00083B34                            
00083B34                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00083B34                            
00083B34                            
00083B34                            sub_725CA:				; XREF: Sound_ChkValue
00083B34 204E                       		movea.l	a6,a0
00083B36 1216                       		move.b	0(a6),d1
00083B38 142E 0027                  		move.b	$27(a6),d2
00083B3C 162E 002A                  		move.b	$2A(a6),d3
00083B40 182E 0026                  		move.b	$26(a6),d4
00083B44 3A2E 000A                  		move.w	$A(a6),d5
00083B48 2C2E 0010                  		move.l	$10(a6),d6					; EXT: store YM Cue list pointer
00083B4C 303C 0093                  		move.w	#$93,d0						; MJ: new size
00083B50                            
00083B50                            loc_725E4:
00083B50 4298                       		clr.l	(a0)+
00083B52 51C8 FFFC                  		dbf	d0,loc_725E4
00083B56                            
00083B56 1C81                       		move.b	d1,0(a6)
00083B58 1D42 0027                  		move.b	d2,$27(a6)
00083B5C 1D43 002A                  		move.b	d3,$2A(a6)
00083B60 1D44 0026                  		move.b	d4,$26(a6)
00083B64 3D45 000A                  		move.w	d5,$A(a6)
00083B68 2D46 0010                  		move.l	d6,$10(a6)					; EXT: restore YM Cue list pointer
00083B6C 1D7C 0080 0009             		move.b	#$80,9(a6)
00083B72 4EBA FEFA                  		jsr	sub_7256A(pc)
00083B76 6000 0000                  		bra.w	sub_729B6
00083B7A                            ; End of function sub_725CA
00083B7A                            
00083B7A                            
00083B7A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00083B7A                            
00083B7A                            
00083B7A                            sub_7260C:				; XREF: sub_71B4C
00083B7A 1D6E 0002 0001             		move.b	2(a6),1(a6)
00083B80 41EE 004E                  		lea	$4E(a6),a0
00083B84 7030                       		moveq	#$30,d0
00083B86 720A                       		moveq	#10,d1				; MJ: new number of channels
00083B88                            
00083B88                            loc_7261A:
00083B88 5210                       		addq.b	#1,(a0)
00083B8A D0C0                       		adda.w	d0,a0
00083B8C 51C9 FFFA                  		dbf	d1,loc_7261A
00083B90                            
00083B90 4E75                       		rts	
00083B92                            ; End of function sub_7260C
00083B92                            
00083B92                            ; ===========================================================================
00083B92                            ; ---------------------------------------------------------------------------
00083B92                            ; Speed	up music
00083B92                            ; ---------------------------------------------------------------------------
00083B92                            
00083B92                            Sound_E2:				; XREF: Sound_ExIndex
00083B92 4A2E 0027                  		tst.b	$27(a6)
00083B96 6600                       		bne.s	loc_7263E
00083B98 1D6E 0029 0002             		move.b	$29(a6),2(a6)
00083B9E 1D6E 0029 0001             		move.b	$29(a6),1(a6)
00083BA4 1D7C 0080 002A             		move.b	#$80,$2A(a6)
00083BAA 4E75                       		rts	
00083BAC                            ; ===========================================================================
00083BAC                            
00083BAC                            loc_7263E:
00083BAC 1D6E 03F9 03D2             		move.b	$3F9(a6),$3D2(a6)			; MJ: new location
00083BB2 1D6E 03F9 03D1             		move.b	$3F9(a6),$3D1(a6)			; MJ: new location
00083BB8 1D7C 0080 03FA             		move.b	#$80,$3FA(a6)
00083BBE 4E75                       		rts	
00083BC0                            ; ===========================================================================
00083BC0                            ; ---------------------------------------------------------------------------
00083BC0                            ; Change music back to normal speed
00083BC0                            ; ---------------------------------------------------------------------------
00083BC0                            
00083BC0                            Sound_E3:				; XREF: Sound_ExIndex
00083BC0 4A2E 0027                  		tst.b	$27(a6)
00083BC4 6600                       		bne.s	loc_7266A
00083BC6 1D6E 0028 0002             		move.b	$28(a6),2(a6)
00083BCC 1D6E 0028 0001             		move.b	$28(a6),1(a6)
00083BD2 422E 002A                  		clr.b	$2A(a6)
00083BD6 4E75                       		rts	
00083BD8                            ; ===========================================================================
00083BD8                            
00083BD8                            loc_7266A:
00083BD8 1D6E 03F8 03D2             		move.b	$3F8(a6),$3D2(a6)
00083BDE 1D6E 03F8 03D1             		move.b	$3F8(a6),$3D1(a6)
00083BE4 422E 03FA                  		clr.b	$3FA(a6)
00083BE8 4E75                       		rts	
00083BEA                            
00083BEA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00083BEA                            
00083BEA                            
00083BEA                            sub_7267C:				; XREF: sub_71B4C
00083BEA 4A2E 0025                  		tst.b	$25(a6)
00083BEE 6700                       		beq.s	loc_72688
00083BF0 532E 0025                  		subq.b	#1,$25(a6)
00083BF4 4E75                       		rts	
00083BF6                            ; ===========================================================================
00083BF6                            
00083BF6                            loc_72688:
00083BF6 4A2E 0026                  		tst.b	$26(a6)
00083BFA 6700                       		beq.s	loc_726D6
00083BFC 532E 0026                  		subq.b	#1,$26(a6)
00083C00 1D7C 0002 0025             		move.b	#2,$25(a6)
00083C06 4BEE 00A0                  		lea	$A0(a6),a5				; MJ: new SFX location
00083C0A 7E05                       		moveq	#5,d7
00083C0C                            
00083C0C                            loc_7269E:
00083C0C 4A15                       		tst.b	(a5)
00083C0E 6A00                       		bpl.s	loc_726AA
00083C10 532D 0009                  		subq.b	#1,9(a5)
00083C14 4EBA 0000                  		jsr	sub_72CB4(pc)
00083C18                            
00083C18                            loc_726AA:
00083C18 DAFC 0030                  		adda.w	#$30,a5
00083C1C 51CF FFEE                  		dbf	d7,loc_7269E
00083C20 7E02                       		moveq	#2,d7
00083C22                            
00083C22                            loc_726B4:
00083C22 4A15                       		tst.b	(a5)
00083C24 6A00                       		bpl.s	loc_726CC
00083C26 532D 0009                  		subq.b	#1,9(a5)
00083C2A 1C2D 0009                  		move.b	9(a5),d6
00083C2E 0C06 0010                  		cmpi.b	#$10,d6
00083C32 6500                       		bcs.s	loc_726C8
00083C34 7C0F                       		moveq	#$F,d6
00083C36                            
00083C36                            loc_726C8:
00083C36 4EBA 0000                  		jsr	sub_7296A(pc)
00083C3A                            
00083C3A                            loc_726CC:
00083C3A DAFC 0030                  		adda.w	#$30,a5
00083C3E 51CF FFE2                  		dbf	d7,loc_726B4
00083C42 4E75                       		rts	
00083C44                            ; ===========================================================================
00083C44                            
00083C44                            loc_726D6:
00083C44 08AE 0002 0040             		bclr	#2,$40(a6)
00083C4A 08AE 0002 0070             		bclr	#2,$70(a6)				; MJ: do PCM 2 as well...
00083C50 422E 0024                  		clr.b	$24(a6)
00083C54 4E75                       		rts	
00083C56                            ; End of function sub_7267C
00083C56                            
00083C56                            ; ===========================================================================
00083C56                            
00083C56                            loc_726E2:				; XREF: sub_71CCA
00083C56 0815 0001                  		btst	#1,(a5)
00083C5A 6600                       		bne.s	locret_726FC
00083C5C 0815 0002                  		btst	#2,(a5)
00083C60 6600                       		bne.s	locret_726FC
00083C62 7028                       		moveq	#$28,d0
00083C64 122D 0001                  		move.b	1(a5),d1
00083C68 0001 00F0                  		ori.b	#-$10,d1
00083C6C 6000 0000                  		bra.w	sub_7272E
00083C70                            ; ===========================================================================
00083C70                            
00083C70                            locret_726FC:
00083C70 4E75                       		rts	
00083C72                            
00083C72                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00083C72                            
00083C72                            
00083C72                            sub_726FE:				; XREF: sub_71CEC; sub_71D9E; Sound_ChkValue; Snd_FadeOut1
00083C72 0815 0004                  		btst	#4,(a5)
00083C76 6600                       		bne.s	locret_72714
00083C78 0815 0002                  		btst	#2,(a5)
00083C7C 6600                       		bne.s	locret_72714
00083C7E                            
00083C7E                            loc_7270A:				; XREF: Snd_FadeOut2
00083C7E 7028                       		moveq	#$28,d0
00083C80 122D 0001                  		move.b	1(a5),d1
00083C84 6000 0000                  		bra.w	sub_7272E
00083C88                            ; ===========================================================================
00083C88                            
00083C88                            locret_72714:
00083C88 4E75                       		rts	
00083C8A                            ; End of function sub_726FE
00083C8A                            
00083C8A                            ; ===========================================================================
00083C8A                            
00083C8A                            loc_72716:				; XREF: sub_72A5A
00083C8A 0815 0002                  		btst	#2,(a5)
00083C8E 6600                       		bne.s	locret_72720
00083C90 6000 0000                  		bra.w	sub_72722
00083C94                            ; ===========================================================================
00083C94                            
00083C94                            locret_72720:
00083C94 4E75                       		rts
00083C96                            
00083C96                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00083C96                            
00083C96                            
00083C96                            sub_72722:				; XREF: sub_71E18; sub_72C4E; sub_72CB4
00083C96 082D 0002 0001             		btst	#2,1(a5)
00083C9C 6600                       		bne.s	loc_7275A
00083C9E D02D 0001                  		add.b	1(a5),d0
00083CA2                            ; End of function sub_72722
00083CA2                            
00083CA2                            
00083CA2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00083CA2                            
00083CA2                            sub_7272E:
00083CA2 48E7 2080                  		movem.l	d2/a0,-(sp)				; EXT: store register data
00083CA6 206E 0010                  		movea.l	$10(a6),a0				; EXT: load Cue pointer
00083CAA 5248                       		addq.w	#$01,a0					; EXT: skip $40
00083CAC 143C 0000                  		move.b	#$00,d2					; EXT: prepare d2 for YM2612 port address ($4000 - $4001)
00083CB0 33FC 0100 00A1 1100 0839+  		StopZ80						; EXT: request Z80 stop "ON"
00083CC2 10C2                       		move.b	d2,(a0)+				; EXT: write YM2612 port address
00083CC4 10C1                       		move.b	d1,(a0)+				; EXT: write YM2612 data
00083CC6 10C0                       		move.b	d0,(a0)+				; EXT: write YM2612 address
00083CC8 33FC 0000 00A1 1100        		StartZ80					; EXT: request Z80 stop "OFF"
00083CD0 3408                       		move.w	a0,d2					; EXT: load Cue pointer
00083CD2 0242 0FFF                  		andi.w	#$0FFF,d2				; EXT: wrap it
00083CD6 0042 1000                  		ori.w	#$1000,d2				; EXT: ''
00083CDA 3D42 0012                  		move.w	d2,$12(a6)				; EXT: update it
00083CDE 4CDF 0104                  		movem.l	(sp)+,d2/a0				; EXT: restore register data
00083CE2 4E75                       		rts						; EXT: return
00083CE4                            
00083CE4                            ; ===========================================================================
00083CE4                            
00083CE4                            loc_7275A:				; XREF: sub_72722
00083CE4 142D 0001                  		move.b	1(a5),d2
00083CE8 0882 0002                  		bclr	#2,d2
00083CEC D002                       		add.b	d2,d0
00083CEE                            
00083CEE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00083CEE                            
00083CEE                            
00083CEE                            sub_72764:
00083CEE 48E7 2080                  		movem.l	d2/a0,-(sp)				; EXT: store register data
00083CF2 206E 0010                  		movea.l	$10(a6),a0				; EXT: load Cue pointer
00083CF6 5248                       		addq.w	#$01,a0					; EXT: skip $40
00083CF8 143C 0002                  		move.b	#$02,d2					; EXT: prepare d2 for YM2612 port address ($4002 - $4003)
00083CFC 33FC 0100 00A1 1100 0839+  		StopZ80						; EXT: request Z80 stop "ON"
00083D0E 10C2                       		move.b	d2,(a0)+				; EXT: write YM2612 port address
00083D10 10C1                       		move.b	d1,(a0)+				; EXT: write YM2612 data
00083D12 10C0                       		move.b	d0,(a0)+				; EXT: write YM2612 address
00083D14 33FC 0000 00A1 1100        		StartZ80					; EXT: request Z80 stop "OFF"
00083D1C 3408                       		move.w	a0,d2					; EXT: load Cue pointer
00083D1E 0242 0FFF                  		andi.w	#$0FFF,d2				; EXT: wrap it
00083D22 0042 1000                  		ori.w	#$1000,d2				; EXT: ''
00083D26 3D42 0012                  		move.w	d2,$12(a6)				; EXT: update it
00083D2A 4CDF 0104                  		movem.l	(sp)+,d2/a0				; EXT: restore register data
00083D2E 4E75                       		rts						; EXT: return
00083D30                            
00083D30                            ; ===========================================================================
00083D30 025E 0284 02AB 02D3 02FE+  word_72790:	dc.w $25E, $284, $2AB, $2D3, $2FE, $32D, $35C, $38F, $3C5
00083D42 03FF 043C 047C 0A5E 0A84+  		dc.w $3FF, $43C, $47C, $A5E, $A84, $AAB, $AD3, $AFE, $B2D
00083D54 0B5C 0B8F 0BC5 0BFF 0C3C+  		dc.w $B5C, $B8F, $BC5, $BFF, $C3C, $C7C, $125E,	$1284
00083D64 12AB 12D3 12FE 132D 135C+  		dc.w $12AB, $12D3, $12FE, $132D, $135C,	$138F, $13C5, $13FF
00083D74 143C 147C 1A5E 1A84 1AAB+  		dc.w $143C, $147C, $1A5E, $1A84, $1AAB,	$1AD3, $1AFE, $1B2D
00083D84 1B5C 1B8F 1BC5 1BFF 1C3C+  		dc.w $1B5C, $1B8F, $1BC5, $1BFF, $1C3C,	$1C7C, $225E, $2284
00083D94 22AB 22D3 22FE 232D 235C+  		dc.w $22AB, $22D3, $22FE, $232D, $235C,	$238F, $23C5, $23FF
00083DA4 243C 247C 2A5E 2A84 2AAB+  		dc.w $243C, $247C, $2A5E, $2A84, $2AAB,	$2AD3, $2AFE, $2B2D
00083DB4 2B5C 2B8F 2BC5 2BFF 2C3C+  		dc.w $2B5C, $2B8F, $2BC5, $2BFF, $2C3C,	$2C7C, $325E, $3284
00083DC4 32AB 32D3 32FE 332D 335C+  		dc.w $32AB, $32D3, $32FE, $332D, $335C,	$338F, $33C5, $33FF
00083DD4 343C 347C 3A5E 3A84 3AAB+  		dc.w $343C, $347C, $3A5E, $3A84, $3AAB,	$3AD3, $3AFE, $3B2D
00083DE4 3B5C 3B8F 3BC5 3BFF 3C3C+  		dc.w $3B5C, $3B8F, $3BC5, $3BFF, $3C3C,	$3C7C
00083DF0                            
00083DF0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00083DF0                            
00083DF0                            
00083DF0                            sub_72850:				; XREF: sub_71B4C
00083DF0 532D 000E                  		subq.b	#1,$E(a5)
00083DF4 6600                       		bne.s	loc_72866
00083DF6 0895 0004                  		bclr	#4,(a5)
00083DFA 4EBA 0000                  		jsr	sub_72878(pc)
00083DFE 4EBA 0000                  		jsr	sub_728DC(pc)
00083E02 6000 0000                  		bra.w	loc_7292E
00083E06                            ; ===========================================================================
00083E06                            
00083E06                            loc_72866:
00083E06 4EBA F378                  		jsr	sub_71D9E(pc)
00083E0A 4EBA 0000                  		jsr	sub_72926(pc)
00083E0E 4EBA F398                  		jsr	sub_71DC6(pc)
00083E12 4EBA 0000                  		jsr	sub_728E2(pc)
00083E16 4E75                       		rts	
00083E18                            ; End of function sub_72850
00083E18                            
00083E18                            
00083E18                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00083E18                            
00083E18                            
00083E18                            sub_72878:				; XREF: sub_72850
00083E18 0895 0001                  		bclr	#1,(a5)
00083E1C 286D 0004                  		movea.l	4(a5),a4
00083E20                            
00083E20                            loc_72880:
00083E20 7A00                       		moveq	#0,d5
00083E22 1A1C                       		move.b	(a4)+,d5
00083E24 0C05 00E0                  		cmpi.b	#$E0,d5
00083E28 6500                       		bcs.s	loc_72890
00083E2A 4EBA 0000                  		jsr	sub_72A5A(pc)
00083E2E 60F0                       		bra.s	loc_72880
00083E30                            ; ===========================================================================
00083E30                            
00083E30                            loc_72890:
00083E30 4A05                       		tst.b	d5
00083E32 6A00                       		bpl.s	loc_728A4
00083E34 4EBA 0000                  		jsr	sub_728AC(pc)
00083E38 1A1C                       		move.b	(a4)+,d5
00083E3A 4A05                       		tst.b	d5
00083E3C 6A00                       		bpl.s	loc_728A4
00083E3E 534C                       		subq.w	#1,a4
00083E40 6000 F300                  		bra.w	sub_71D60
00083E44                            ; ===========================================================================
00083E44                            
00083E44                            loc_728A4:
00083E44 4EBA F2DC                  		jsr	sub_71D40(pc)
00083E48 6000 F2F8                  		bra.w	sub_71D60
00083E4C                            ; End of function sub_72878
00083E4C                            
00083E4C                            
00083E4C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00083E4C                            
00083E4C                            
00083E4C                            sub_728AC:				; XREF: sub_72878
00083E4C 0405 0081                  		subi.b	#$81,d5
00083E50 6500                       		bcs.s	loc_728CA
00083E52 DA2D 0008                  		add.b	8(a5),d5
00083E56 0245 007F                  		andi.w	#$7F,d5
00083E5A E34D                       		lsl.w	#1,d5
00083E5C 41FA 0000                  		lea	word_729CE(pc),a0
00083E60 3B70 5000 0010             		move.w	(a0,d5.w),$10(a5)
00083E66 6000 F2DA                  		bra.w	sub_71D60
00083E6A                            ; ===========================================================================
00083E6A                            
00083E6A                            loc_728CA:
00083E6A 08D5 0001                  		bset	#1,(a5)
00083E6E 3B7C FFFF 0010             		move.w	#-1,$10(a5)
00083E74 4EBA F2CC                  		jsr	sub_71D60(pc)
00083E78 6000 0000                  		bra.w	sub_729A0
00083E7C                            ; End of function sub_728AC
00083E7C                            
00083E7C                            
00083E7C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00083E7C                            
00083E7C                            
00083E7C                            sub_728DC:				; XREF: sub_72850
00083E7C 3C2D 0010                  		move.w	$10(a5),d6
00083E80 6B00                       		bmi.s	loc_72920
00083E82                            ; End of function sub_728DC
00083E82                            
00083E82                            
00083E82                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00083E82                            
00083E82                            
00083E82                            sub_728E2:				; XREF: sub_72850
00083E82 102D 001E                  		move.b	$1E(a5),d0
00083E86 4880                       		ext.w	d0
00083E88 DC40                       		add.w	d0,d6
00083E8A 0815 0002                  		btst	#2,(a5)
00083E8E 6600                       		bne.s	locret_7291E
00083E90 0815 0001                  		btst	#1,(a5)
00083E94 6600                       		bne.s	locret_7291E
00083E96 102D 0001                  		move.b	1(a5),d0
00083E9A 0C00 00E0                  		cmpi.b	#$E0,d0
00083E9E 6600                       		bne.s	loc_72904
00083EA0 103C 00C0                  		move.b	#$C0,d0
00083EA4                            
00083EA4                            loc_72904:
00083EA4 3206                       		move.w	d6,d1
00083EA6 0201 000F                  		andi.b	#$F,d1
00083EAA 8001                       		or.b	d1,d0
00083EAC E84E                       		lsr.w	#4,d6
00083EAE 0206 003F                  		andi.b	#$3F,d6
00083EB2 13C0 00C0 0011             		move.b	d0,($C00011).l
00083EB8 13C6 00C0 0011             		move.b	d6,($C00011).l
00083EBE                            
00083EBE                            locret_7291E:
00083EBE 4E75                       		rts	
00083EC0                            ; End of function sub_728E2
00083EC0                            
00083EC0                            ; ===========================================================================
00083EC0                            
00083EC0                            loc_72920:				; XREF: sub_728DC
00083EC0 08D5 0001                  		bset	#1,(a5)
00083EC4 4E75                       		rts	
00083EC6                            
00083EC6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00083EC6                            
00083EC6                            
00083EC6                            sub_72926:				; XREF: sub_72850
00083EC6 4A2D 000B                  		tst.b	$B(a5)
00083ECA 6700 0000                  		beq.w	locret_7298A
00083ECE                            
00083ECE                            loc_7292E:				; XREF: sub_72850
00083ECE 1C2D 0009                  		move.b	9(a5),d6
00083ED2 7000                       		moveq	#0,d0
00083ED4 102D 000B                  		move.b	$B(a5),d0
00083ED8 6700                       		beq.s	sub_7296A
00083EDA 2079 0008 2C6C             		movea.l	(Go_PSGIndex).l,a0
00083EE0 5340                       		subq.w	#1,d0
00083EE2 E548                       		lsl.w	#2,d0
00083EE4 2070 0000                  		movea.l	(a0,d0.w),a0
00083EE8 102D 000C                  		move.b	$C(a5),d0
00083EEC 1030 0000                  		move.b	(a0,d0.w),d0
00083EF0 522D 000C                  		addq.b	#1,$C(a5)
00083EF4 0800 0007                  		btst	#7,d0
00083EF8 6700                       		beq.s	loc_72960
00083EFA 0C00 0080                  		cmpi.b	#$80,d0
00083EFE 6700                       		beq.s	loc_7299A
00083F00                            
00083F00                            loc_72960:
00083F00 DC40                       		add.w	d0,d6
00083F02 0C06 0010                  		cmpi.b	#$10,d6
00083F06 6500                       		bcs.s	sub_7296A
00083F08 7C0F                       		moveq	#$F,d6
00083F0A                            ; End of function sub_72926
00083F0A                            
00083F0A                            
00083F0A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00083F0A                            
00083F0A                            
00083F0A                            sub_7296A:				; XREF: sub_72504; sub_7267C; sub_72926
00083F0A 0815 0001                  		btst	#1,(a5)
00083F0E 6600                       		bne.s	locret_7298A
00083F10 0815 0002                  		btst	#2,(a5)
00083F14 6600                       		bne.s	locret_7298A
00083F16 0815 0004                  		btst	#4,(a5)
00083F1A 6600                       		bne.s	loc_7298C
00083F1C                            
00083F1C                            loc_7297C:
00083F1C 8C2D 0001                  		or.b	1(a5),d6
00083F20 0606 0010                  		addi.b	#$10,d6
00083F24 13C6 00C0 0011             		move.b	d6,($C00011).l
00083F2A                            
00083F2A                            locret_7298A:
00083F2A 4E75                       		rts	
00083F2C                            ; ===========================================================================
00083F2C                            
00083F2C                            loc_7298C:
00083F2C 4A2D 0013                  		tst.b	$13(a5)
00083F30 67EA                       		beq.s	loc_7297C
00083F32 4A2D 0012                  		tst.b	$12(a5)
00083F36 66E4                       		bne.s	loc_7297C
00083F38 4E75                       		rts	
00083F3A                            ; End of function sub_7296A
00083F3A                            
00083F3A                            ; ===========================================================================
00083F3A                            
00083F3A                            loc_7299A:				; XREF: sub_72926
00083F3A 532D 000C                  		subq.b	#1,$C(a5)
00083F3E 4E75                       		rts	
00083F40                            
00083F40                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00083F40                            
00083F40                            
00083F40                            sub_729A0:				; XREF: sub_71D9E; Sound_ChkValue; Snd_FadeOut1; sub_728AC
00083F40 0815 0002                  		btst	#2,(a5)
00083F44 6600                       		bne.s	locret_729B4
00083F46                            
00083F46                            loc_729A6:				; XREF: Snd_FadeOut2
00083F46 102D 0001                  		move.b	1(a5),d0
00083F4A 0000 001F                  		ori.b	#$1F,d0
00083F4E 13C0 00C0 0011             		move.b	d0,($C00011).l
00083F54                            
00083F54                            locret_729B4:
00083F54 4E75                       		rts	
00083F56                            ; End of function sub_729A0
00083F56                            
00083F56                            
00083F56                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00083F56                            
00083F56                            
00083F56                            sub_729B6:				; XREF: loc_71E7C
00083F56 41F9 00C0 0011             		lea	($C00011).l,a0
00083F5C 10BC 009F                  		move.b	#$9F,(a0)
00083F60 10BC 00BF                  		move.b	#$BF,(a0)
00083F64 10BC 00DF                  		move.b	#$DF,(a0)
00083F68 10BC 00FF                  		move.b	#$FF,(a0)
00083F6C 4E75                       		rts	
00083F6E                            ; End of function sub_729B6
00083F6E                            
00083F6E                            ; ===========================================================================
00083F6E 0356 0326 02F9 02CE 02A5+  word_729CE:	dc.w $356, $326, $2F9, $2CE, $2A5, $280, $25C, $23A, $21A
00083F80 01FB 01DF 01C4 01AB 0193+  		dc.w $1FB, $1DF, $1C4, $1AB, $193, $17D, $167, $153, $140
00083F92 012E 011D 010D 00FE 00EF+  		dc.w $12E, $11D, $10D, $FE, $EF, $E2, $D6, $C9,	$BE, $B4
00083FA6 00A9 00A0 0097 008F 0087+  		dc.w $A9, $A0, $97, $8F, $87, $7F, $78,	$71, $6B, $65
00083FBA 005F 005A 0055 0050 004B+  		dc.w $5F, $5A, $55, $50, $4B, $47, $43,	$40, $3C, $39
00083FCE 0036 0033 0030 002D 002B+  		dc.w $36, $33, $30, $2D, $2B, $28, $26,	$24, $22, $20
00083FE2 001F 001D 001B 001A 0018+  		dc.w $1F, $1D, $1B, $1A, $18, $17, $16,	$15, $13, $12
00083FF6 0011 0000                  		dc.w $11, 0
00083FFA                            
00083FFA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00083FFA                            
00083FFA                            
00083FFA                            sub_72A5A:				; XREF: sub_71C4E; sub_71CEC; sub_72878
00083FFA 0445 00E0                  		subi.w	#$E0,d5
00083FFE E54D                       		lsl.w	#2,d5
00084000 4EFB 5000                  		jmp	loc_72A64(pc,d5.w)
00084004                            ; End of function sub_72A5A
00084004                            
00084004                            ; ===========================================================================
00084004                            
00084004                            loc_72A64:
00084004 6000 0000                  		bra.w	loc_72ACC
00084008                            ; ===========================================================================
00084008 6000 0000                  		bra.w	loc_72AEC
0008400C                            ; ===========================================================================
0008400C 6000 0000                  		bra.w	loc_72AF2
00084010                            ; ===========================================================================
00084010 6000 0000                  		bra.w	loc_72AF8
00084014                            ; ===========================================================================
00084014 6000 0000                  		bra.w	loc_72B14
00084018                            ; ===========================================================================
00084018 6000 0000                  		bra.w	loc_72B9E
0008401C                            ; ===========================================================================
0008401C 6000 0000                  		bra.w	loc_72BA4
00084020                            ; ===========================================================================
00084020 6000 0000                  		bra.w	loc_72BAE
00084024                            ; ===========================================================================
00084024 6000 0000                  		bra.w	loc_72BB4
00084028                            ; ===========================================================================
00084028 6000 0000                  		bra.w	loc_72BBE
0008402C                            ; ===========================================================================
0008402C 6000 0000                  		bra.w	loc_72BC6
00084030                            ; ===========================================================================
00084030 6000 0000                  		bra.w	loc_72BD0
00084034                            ; ===========================================================================
00084034 6000 0000                  		bra.w	loc_72BE6
00084038                            ; ===========================================================================
00084038 6000 0000                  		bra.w	loc_72BEE
0008403C                            ; ===========================================================================
0008403C 6000 0000                  		bra.w	loc_72BF4
00084040                            ; ===========================================================================
00084040 6000 0000                  		bra.w	loc_72C26
00084044                            ; ===========================================================================
00084044 6000 0000                  		bra.w	loc_72D30
00084048                            ; ===========================================================================
00084048 6000 0000                  		bra.w	loc_72D52
0008404C                            ; ===========================================================================
0008404C 6000 0000                  		bra.w	loc_72D58
00084050                            ; ===========================================================================
00084050 6000 0000                  		bra.w	loc_72E06
00084054                            ; ===========================================================================
00084054 6000 0000                  		bra.w	loc_72E20
00084058                            ; ===========================================================================
00084058 6000 0000                  		bra.w	loc_72E26
0008405C                            ; ===========================================================================
0008405C 6000 0000                  		bra.w	loc_72E2C
00084060                            ; ===========================================================================
00084060 6000 0000                  		bra.w	loc_72E38
00084064                            ; ===========================================================================
00084064 6000 0000                  		bra.w	loc_72E52
00084068                            ; ===========================================================================
00084068 6000 0000                  		bra.w	loc_72E64
0008406C                            ; ===========================================================================
0008406C                            
0008406C                            loc_72ACC:				; XREF: loc_72A64
0008406C 121C                       		move.b	(a4)+,d1
0008406E 4A2D 0001                  		tst.b	1(a5)
00084072 6B00                       		bmi.s	locret_72AEA
00084074 102D 000A                  		move.b	$A(a5),d0
00084078 0200 0037                  		andi.b	#$37,d0
0008407C 8200                       		or.b	d0,d1
0008407E 1B41 000A                  		move.b	d1,$A(a5)
00084082 103C 00B4                  		move.b	#$B4,d0
00084086 6000 FC02                  		bra.w	loc_72716
0008408A                            ; ===========================================================================
0008408A                            
0008408A                            locret_72AEA:
0008408A 4E75                       		rts	
0008408C                            ; ===========================================================================
0008408C                            
0008408C                            loc_72AEC:				; XREF: loc_72A64
0008408C 1B5C 001E                  		move.b	(a4)+,$1E(a5)
00084090 4E75                       		rts	
00084092                            ; ===========================================================================
00084092                            
00084092                            loc_72AF2:				; XREF: loc_72A64
00084092 1D5C 0007                  		move.b	(a4)+,7(a6)
00084096 4E75                       		rts	
00084098                            ; ===========================================================================
00084098                            
00084098                            loc_72AF8:				; XREF: loc_72A64
00084098 7000                       		moveq	#0,d0
0008409A 102D 000D                  		move.b	$D(a5),d0
0008409E 2875 0000                  		movea.l	(a5,d0.w),a4
000840A2 2BBC 0000 0000 0000        		move.l	#0,(a5,d0.w)
000840AA 544C                       		addq.w	#2,a4
000840AC 5800                       		addq.b	#4,d0
000840AE 1B40 000D                  		move.b	d0,$D(a5)
000840B2 4E75                       		rts	
000840B4                            ; ===========================================================================
000840B4                            
000840B4                            loc_72B14:				; XREF: loc_72A64
000840B4 204E                       		movea.l	a6,a0
000840B6 43EE 03D0                  		lea	$3D0(a6),a1				; MJ: new SFX location
000840BA 303C 0093                  		move.w	#$93,d0					; MJ: new size to store
000840BE                            
000840BE                            loc_72B1E:
000840BE 20D9                       		move.l	(a1)+,(a0)+
000840C0 51C8 FFFC                  		dbf	d0,loc_72B1E
000840C4                            
000840C4 08EE 0002 0040             		bset	#2,$40(a6)
000840CA 08EE 0002 0070             		bset	#2,$70(a6)				; MJ: enable PCM 2
000840D0 264D                       		movea.l	a5,a3
000840D2 1C3C 0028                  		move.b	#$28,d6
000840D6 9C2E 0026                  		sub.b	$26(a6),d6
000840DA 7E05                       		moveq	#5,d7
000840DC 4BEE 00A0                  		lea	$A0(a6),a5				; MJ: new FM location
000840E0                            
000840E0                            loc_72B3A:
000840E0 0815 0007                  		btst	#7,(a5)
000840E4 6700                       		beq.s	loc_72B5C
000840E6 08D5 0001                  		bset	#1,(a5)
000840EA DD2D 0009                  		add.b	d6,9(a5)
000840EE 0815 0002                  		btst	#2,(a5)
000840F2 6600                       		bne.s	loc_72B5C
000840F4 7000                       		moveq	#0,d0
000840F6 102D 000B                  		move.b	$B(a5),d0
000840FA 226E 0018                  		movea.l	$18(a6),a1
000840FE 4EBA 0000                  		jsr	sub_72C4E(pc)
00084102                            
00084102                            loc_72B5C:
00084102 DAFC 0030                  		adda.w	#$30,a5
00084106 51CF FFD8                  		dbf	d7,loc_72B3A
0008410A                            
0008410A 7E02                       		moveq	#2,d7
0008410C                            
0008410C                            loc_72B66:
0008410C 0815 0007                  		btst	#7,(a5)
00084110 6700                       		beq.s	loc_72B78
00084112 08D5 0001                  		bset	#1,(a5)
00084116 4EBA FE28                  		jsr	sub_729A0(pc)
0008411A DD2D 0009                  		add.b	d6,9(a5)
0008411E                            
0008411E                            loc_72B78:
0008411E DAFC 0030                  		adda.w	#$30,a5
00084122 51CF FFE8                  		dbf	d7,loc_72B66
00084126 2A4B                       		movea.l	a3,a5
00084128 1D7C 0080 0024             		move.b	#$80,$24(a6)
0008412E 1D7C 0028 0026             		move.b	#$28,$26(a6)
00084134 422E 0027                  		clr.b	$27(a6)
00084138 504F                       		addq.w	#8,sp
0008413A 4E75                       		rts	
0008413C                            ; ===========================================================================
0008413C                            
0008413C                            loc_72B9E:				; XREF: loc_72A64
0008413C 1B5C 0002                  		move.b	(a4)+,2(a5)
00084140 4E75                       		rts	
00084142                            ; ===========================================================================
00084142                            
00084142                            loc_72BA4:				; XREF: loc_72A64
00084142 101C                       		move.b	(a4)+,d0
00084144 D12D 0009                  		add.b	d0,9(a5)
00084148 6000 0000                  		bra.w	sub_72CB4
0008414C                            ; ===========================================================================
0008414C                            
0008414C                            loc_72BAE:				; XREF: loc_72A64
0008414C 08D5 0004                  		bset	#4,(a5)
00084150 4E75                       		rts	
00084152                            ; ===========================================================================
00084152                            
00084152                            loc_72BB4:				; XREF: loc_72A64
00084152 1B54 0012                  		move.b	(a4),$12(a5)
00084156 1B5C 0013                  		move.b	(a4)+,$13(a5)
0008415A 4E75                       		rts	
0008415C                            ; ===========================================================================
0008415C                            
0008415C                            loc_72BBE:				; XREF: loc_72A64
0008415C 101C                       		move.b	(a4)+,d0
0008415E D12D 0008                  		add.b	d0,8(a5)
00084162 4E75                       		rts	
00084164                            ; ===========================================================================
00084164                            
00084164                            loc_72BC6:				; XREF: loc_72A64
00084164 1D54 0002                  		move.b	(a4),2(a6)
00084168 1D5C 0001                  		move.b	(a4)+,1(a6)
0008416C 4E75                       		rts	
0008416E                            ; ===========================================================================
0008416E                            
0008416E                            loc_72BD0:				; XREF: loc_72A64
0008416E 41EE 0040                  		lea	$40(a6),a0
00084172 101C                       		move.b	(a4)+,d0
00084174 7230                       		moveq	#$30,d1
00084176 740A                       		moveq	#10,d2				; MJ: extra channel
00084178                            
00084178                            loc_72BDA:
00084178 1140 0002                  		move.b	d0,2(a0)
0008417C D0C1                       		adda.w	d1,a0
0008417E 51CA FFF8                  		dbf	d2,loc_72BDA
00084182                            
00084182 4E75                       		rts	
00084184                            ; ===========================================================================
00084184                            
00084184                            loc_72BE6:				; XREF: loc_72A64
00084184 101C                       		move.b	(a4)+,d0
00084186 D12D 0009                  		add.b	d0,9(a5)
0008418A 4E75                       		rts	
0008418C                            ; ===========================================================================
0008418C                            
0008418C                            loc_72BEE:				; XREF: loc_72A64
0008418C 422E 002C                  		clr.b	$2C(a6)
00084190 4E75                       		rts	
00084192                            ; ===========================================================================
00084192                            
00084192                            loc_72BF4:				; XREF: loc_72A64
00084192 0895 0007                  		bclr	#7,(a5)
00084196 0895 0004                  		bclr	#4,(a5)
0008419A 4EBA FAD6                  		jsr	sub_726FE(pc)
0008419E 4A2E 0280                  		tst.b	$280(a6)				; MJ: new SFX location
000841A2 6B00                       		bmi.s	loc_72C22
000841A4 264D                       		movea.l	a5,a3
000841A6 4BEE 0130                  		lea	$130(a6),a5				; MJ: new BGM location
000841AA 226E 0018                  		movea.l	$18(a6),a1
000841AE 0895 0002                  		bclr	#2,(a5)
000841B2 08D5 0001                  		bset	#1,(a5)
000841B6 102D 000B                  		move.b	$B(a5),d0
000841BA 4EBA 0000                  		jsr	sub_72C4E(pc)
000841BE 2A4B                       		movea.l	a3,a5
000841C0                            
000841C0                            loc_72C22:
000841C0 504F                       		addq.w	#8,sp
000841C2 4E75                       		rts	
000841C4                            ; ===========================================================================
000841C4                            
000841C4                            loc_72C26:				; XREF: loc_72A64
000841C4 7000                       		moveq	#0,d0
000841C6 101C                       		move.b	(a4)+,d0
000841C8 1B40 000B                  		move.b	d0,$B(a5)
000841CC 0815 0002                  		btst	#2,(a5)
000841D0 6600 0000                  		bne.w	locret_72CAA
000841D4 226E 0018                  		movea.l	$18(a6),a1
000841D8 4A2E 000E                  		tst.b	$E(a6)
000841DC 6700                       		beq.s	sub_72C4E
000841DE 226D 0020                  		movea.l	$20(a5),a1
000841E2 4A2E 000E                  		tst.b	$E(a6)
000841E6 6B00                       		bmi.s	sub_72C4E
000841E8 226E 0020                  		movea.l	$20(a6),a1
000841EC                            
000841EC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000841EC                            
000841EC                            
000841EC                            sub_72C4E:				; XREF: Snd_FadeOut1; et al
000841EC 5340                       		subq.w	#1,d0
000841EE 6B00                       		bmi.s	loc_72C5C
000841F0 323C 0019                  		move.w	#$19,d1
000841F4                            
000841F4                            loc_72C56:
000841F4 D2C1                       		adda.w	d1,a1
000841F6 51C8 FFFC                  		dbf	d0,loc_72C56
000841FA                            
000841FA                            loc_72C5C:
000841FA 1219                       		move.b	(a1)+,d1
000841FC 1B41 001F                  		move.b	d1,$1F(a5)
00084200 1801                       		move.b	d1,d4
00084202 103C 00B0                  		move.b	#$B0,d0
00084206 4EBA FA8E                  		jsr	sub_72722(pc)
0008420A 45FA 0000                  		lea	byte_72D18(pc),a2
0008420E 7613                       		moveq	#$13,d3
00084210                            
00084210                            loc_72C72:
00084210 101A                       		move.b	(a2)+,d0
00084212 1219                       		move.b	(a1)+,d1
00084214 4EBA FA80                  		jsr	sub_72722(pc)
00084218 51CB FFF6                  		dbf	d3,loc_72C72
0008421C 7A03                       		moveq	#3,d5
0008421E 0244 0007                  		andi.w	#7,d4
00084222 183B 4000                  		move.b	byte_72CAC(pc,d4.w),d4
00084226 162D 0009                  		move.b	9(a5),d3
0008422A                            
0008422A                            loc_72C8C:
0008422A 101A                       		move.b	(a2)+,d0
0008422C 1219                       		move.b	(a1)+,d1
0008422E E20C                       		lsr.b	#1,d4
00084230 6400                       		bcc.s	loc_72C96
00084232 D203                       		add.b	d3,d1
00084234                            
00084234                            loc_72C96:
00084234 4EBA FA60                  		jsr	sub_72722(pc)
00084238 51CD FFF0                  		dbf	d5,loc_72C8C
0008423C 103C 00B4                  		move.b	#$B4,d0
00084240 122D 000A                  		move.b	$A(a5),d1
00084244 4EBA FA50                  		jsr	sub_72722(pc)
00084248                            
00084248                            locret_72CAA:
00084248 4E75                       		rts	
0008424A                            ; End of function sub_72C4E
0008424A                            
0008424A                            ; ===========================================================================
0008424A 0808 0808 0A0E 0E0F        byte_72CAC:	dc.b 8,	8, 8, 8, $A, $E, $E, $F
00084252                            
00084252                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00084252                            
00084252                            
00084252                            sub_72CB4:				; XREF: sub_72504; sub_7267C; loc_72BA4
00084252 0815 0002                  		btst	#2,(a5)
00084256 6600                       		bne.s	locret_72D16
00084258 7000                       		moveq	#0,d0
0008425A 102D 000B                  		move.b	$B(a5),d0
0008425E 226E 0018                  		movea.l	$18(a6),a1
00084262 4A2E 000E                  		tst.b	$E(a6)
00084266 6700                       		beq.s	loc_72CD8
00084268 226E 0020                  		movea.l	$20(a6),a1
0008426C 4A2E 000E                  		tst.b	$E(a6)
00084270 6B00                       		bmi.s	loc_72CD8
00084272 226E 0020                  		movea.l	$20(a6),a1
00084276                            
00084276                            loc_72CD8:
00084276 5340                       		subq.w	#1,d0
00084278 6B00                       		bmi.s	loc_72CE6
0008427A 323C 0019                  		move.w	#$19,d1
0008427E                            
0008427E                            loc_72CE0:
0008427E D2C1                       		adda.w	d1,a1
00084280 51C8 FFFC                  		dbf	d0,loc_72CE0
00084284                            
00084284                            loc_72CE6:
00084284 D2FC 0015                  		adda.w	#$15,a1
00084288 45FA 0000                  		lea	byte_72D2C(pc),a2
0008428C 102D 001F                  		move.b	$1F(a5),d0
00084290 0240 0007                  		andi.w	#7,d0
00084294 183B 00B4                  		move.b	byte_72CAC(pc,d0.w),d4
00084298 162D 0009                  		move.b	9(a5),d3
0008429C 6B00                       		bmi.s	locret_72D16
0008429E 7A03                       		moveq	#3,d5
000842A0                            
000842A0                            loc_72D02:
000842A0 101A                       		move.b	(a2)+,d0
000842A2 1219                       		move.b	(a1)+,d1
000842A4 E20C                       		lsr.b	#1,d4
000842A6 6400                       		bcc.s	loc_72D12
000842A8 D203                       		add.b	d3,d1
000842AA 6500                       		bcs.s	loc_72D12
000842AC 4EBA F9E8                  		jsr	sub_72722(pc)
000842B0                            
000842B0                            loc_72D12:
000842B0 51CD FFEE                  		dbf	d5,loc_72D02
000842B4                            
000842B4                            locret_72D16:
000842B4 4E75                       		rts	
000842B6                            ; End of function sub_72CB4
000842B6                            
000842B6                            ; ===========================================================================
000842B6 3038 343C 5058 545C 6068   byte_72D18:	dc.b $30, $38, $34, $3C, $50, $58, $54,	$5C, $60, $68
000842C0 646C 7078 747C 8088 848C   		dc.b $64, $6C, $70, $78, $74, $7C, $80,	$88, $84, $8C
000842CA 4048 444C                  byte_72D2C:	dc.b $40, $48, $44, $4C
000842CE                            ; ===========================================================================
000842CE                            
000842CE                            loc_72D30:				; XREF: loc_72A64
000842CE 08D5 0003                  		bset	#3,(a5)
000842D2 2B4C 0014                  		move.l	a4,$14(a5)
000842D6 1B5C 0018                  		move.b	(a4)+,$18(a5)
000842DA 1B5C 0019                  		move.b	(a4)+,$19(a5)
000842DE 1B5C 001A                  		move.b	(a4)+,$1A(a5)
000842E2 101C                       		move.b	(a4)+,d0
000842E4 E208                       		lsr.b	#1,d0
000842E6 1B40 001B                  		move.b	d0,$1B(a5)
000842EA 426D 001C                  		clr.w	$1C(a5)
000842EE 4E75                       		rts	
000842F0                            ; ===========================================================================
000842F0                            
000842F0                            loc_72D52:				; XREF: loc_72A64
000842F0 08D5 0003                  		bset	#3,(a5)
000842F4 4E75                       		rts	
000842F6                            ; ===========================================================================
000842F6                            
000842F6                            loc_72D58:				; XREF: loc_72A64
000842F6 0895 0007                  		bclr	#7,(a5)
000842FA 0895 0004                  		bclr	#4,(a5)
000842FE 4A2D 0001                  		tst.b	1(a5)
00084302 6B00                       		bmi.s	loc_72D74
00084304 4A2E 0008                  		tst.b	8(a6)
00084308 6B00 0000                  		bmi.w	loc_72E02
0008430C 4EBA F964                  		jsr	sub_726FE(pc)
00084310 6000                       		bra.s	loc_72D78
00084312                            ; ===========================================================================
00084312                            
00084312                            loc_72D74:
00084312 4EBA FC2C                  		jsr	sub_729A0(pc)
00084316                            
00084316                            loc_72D78:
00084316 4A2E 000E                  		tst.b	$E(a6)
0008431A 6A00 0000                  		bpl.w	loc_72E02
0008431E 4216                       		clr.b	0(a6)
00084320 7000                       		moveq	#0,d0
00084322 102D 0001                  		move.b	1(a5),d0
00084326 6B00                       		bmi.s	loc_72DCC
00084328 41FA F4A4                  		lea	dword_722CC(pc),a0
0008432C 264D                       		movea.l	a5,a3
0008432E 0C00 0004                  		cmpi.b	#4,d0
00084332 6600                       		bne.s	loc_72DA8
00084334 4A2E 0370                  		tst.b	$370(a6)				; MJ: new SFX location
00084338 6A00                       		bpl.s	loc_72DA8
0008433A 4BEE 0370                  		lea	$370(a6),a5				; MJ: new SFX location
0008433E 226E 0020                  		movea.l	$20(a6),a1
00084342 6000                       		bra.s	loc_72DB8
00084344                            ; ===========================================================================
00084344                            
00084344                            loc_72DA8:
00084344 5500                       		subq.b	#2,d0
00084346 E508                       		lsl.b	#2,d0
00084348 2A70 0000                  		movea.l	(a0,d0.w),a5
0008434C 4A15                       		tst.b	(a5)
0008434E 6A00                       		bpl.s	loc_72DC8
00084350 226E 0018                  		movea.l	$18(a6),a1
00084354                            
00084354                            loc_72DB8:
00084354 0895 0002                  		bclr	#2,(a5)
00084358 08D5 0001                  		bset	#1,(a5)
0008435C 102D 000B                  		move.b	$B(a5),d0
00084360 4EBA FE8A                  		jsr	sub_72C4E(pc)
00084364                            
00084364                            loc_72DC8:
00084364 2A4B                       		movea.l	a3,a5
00084366 6000                       		bra.s	loc_72E02
00084368                            ; ===========================================================================
00084368                            
00084368                            loc_72DCC:
00084368 41EE 03A0                  		lea	$3A0(a6),a0				; MJ: new SFX location
0008436C 4A10                       		tst.b	(a0)
0008436E 6A00                       		bpl.s	loc_72DE0
00084370 0C00 00E0                  		cmpi.b	#$E0,d0
00084374 6700                       		beq.s	loc_72DEA
00084376 0C00 00C0                  		cmpi.b	#$C0,d0
0008437A 6700                       		beq.s	loc_72DEA
0008437C                            
0008437C                            loc_72DE0:
0008437C 41FA F450                  		lea	dword_722CC(pc),a0
00084380 E608                       		lsr.b	#3,d0
00084382 2070 0000                  		movea.l	(a0,d0.w),a0
00084386                            
00084386                            loc_72DEA:
00084386 0890 0002                  		bclr	#2,(a0)
0008438A 08D0 0001                  		bset	#1,(a0)
0008438E 0C28 00E0 0001             		cmpi.b	#$E0,1(a0)
00084394 6600                       		bne.s	loc_72E02
00084396 13E8 001F 00C0 0011        		move.b	$1F(a0),($C00011).l
0008439E                            
0008439E                            loc_72E02:
0008439E 584F                       		addq.w	#4,sp					; MJ: changed to 4 (go back, but not out of sound driver)
000843A0 4A2E 0008                  		tst.b	$08(a6)					; MJ: is this a PCM channel?
000843A4 6600                       		bne.s	FlagF2_NoWaitFrame			; MJ: if so, branch
000843A6 584F                       		addq.w	#4,sp					; MJ: go back outside the sound driver like normal
000843A8                            
000843A8                            FlagF2_NoWaitFrame:
000843A8 4E75                       		rts	
000843AA                            ; ===========================================================================
000843AA                            
000843AA                            loc_72E06:				; XREF: loc_72A64
000843AA 1B7C 00E0 0001             		move.b	#$E0,1(a5)
000843B0 1B5C 001F                  		move.b	(a4)+,$1F(a5)
000843B4 0815 0002                  		btst	#2,(a5)
000843B8 6600                       		bne.s	locret_72E1E 
000843BA 102C FFFF                  		move.b	-1(a4),d0				; MJ: reload F3 setting to d0
000843BE 13C0 00C0 0011             		move.b	d0,($C00011).l				; MJ: save F3 setting (should be EX (PSG 4) related)
000843C4 0200 0003                  		andi.b	#%00000011,d0				; MJ: get only frequency mode bits
000843C8 0C00 0003                  		cmpi.b	#%00000011,d0				; MJ: has it been set to use PSG 3's frequency?
000843CC 6600                       		bne.s	locret_72E1E				; MJ: if not, branch
000843CE 13FC 00DF 00C0 0011        		move.b	#%11011111,($C00011).l			; MJ: mute PSG 3's volume
000843D6                            
000843D6                            locret_72E1E:
000843D6 4E75                       		rts	
000843D8                            ; ===========================================================================
000843D8                            
000843D8                            loc_72E20:				; XREF: loc_72A64
000843D8 0895 0003                  		bclr	#3,(a5)
000843DC 4E75                       		rts	
000843DE                            ; ===========================================================================
000843DE                            
000843DE                            loc_72E26:				; XREF: loc_72A64
000843DE 1B5C 000B                  		move.b	(a4)+,$B(a5)
000843E2 4E75                       		rts	
000843E4                            ; ===========================================================================
000843E4                            
000843E4                            loc_72E2C:				; XREF: loc_72A64
000843E4 101C                       		move.b	(a4)+,d0
000843E6 E148                       		lsl.w	#8,d0
000843E8 101C                       		move.b	(a4)+,d0
000843EA D8C0                       		adda.w	d0,a4
000843EC 534C                       		subq.w	#1,a4
000843EE 4E75                       		rts	
000843F0                            ; ===========================================================================
000843F0                            
000843F0                            loc_72E38:				; XREF: loc_72A64
000843F0 7000                       		moveq	#0,d0
000843F2 101C                       		move.b	(a4)+,d0
000843F4 121C                       		move.b	(a4)+,d1
000843F6 4A35 0024                  		tst.b	$24(a5,d0.w)
000843FA 6600                       		bne.s	loc_72E48
000843FC 1B81 0024                  		move.b	d1,$24(a5,d0.w)
00084400                            
00084400                            loc_72E48:
00084400 5335 0024                  		subq.b	#1,$24(a5,d0.w)
00084404 66DE                       		bne.s	loc_72E2C
00084406 544C                       		addq.w	#2,a4
00084408 4E75                       		rts	
0008440A                            ; ===========================================================================
0008440A                            
0008440A                            loc_72E52:				; XREF: loc_72A64
0008440A 7000                       		moveq	#0,d0
0008440C 102D 000D                  		move.b	$D(a5),d0
00084410 5900                       		subq.b	#4,d0
00084412 2B8C 0000                  		move.l	a4,(a5,d0.w)
00084416 1B40 000D                  		move.b	d0,$D(a5)
0008441A 60C8                       		bra.s	loc_72E2C
0008441C                            ; ===========================================================================
0008441C                            
0008441C                            loc_72E64:				; XREF: loc_72A64
0008441C 103C 0088                  		move.b	#$88,d0
00084420 123C 000F                  		move.b	#$F,d1
00084424 4EBA F87C                  		jsr	sub_7272E(pc)
00084428 103C 008C                  		move.b	#$8C,d0
0008442C 123C 000F                  		move.b	#$F,d1
00084430 6000 F870                  		bra.w	sub_7272E
00084434                            ; ===========================================================================
00084434                            Z80ROM:		incbin	"Dual PCM\Z80.bin"
00086434                            Z80ROM_End:	even
00086434                            Music81:	incbin	sound\music81.bin
00087802 00                         		even
00087802                            Music82:	incbin	sound\music82.bin
0008D32C                            		even
0008D32C                            Music83:	incbin	sound\music83.bin
0008E7F4 00                         		even
0008E7F4                            Music84:	incbin	sound\music84.bin
0008FEC4 00                         		even
0008FEC4                            Music85:	incbin	sound\music85.bin
00090DF0                            		even
00090DF0                            Music86:	incbin	sound\music86.bin
00094012 00                         		even
00094012                            Music87:	incbin	sound\music87.bin
000941FE 00                         		even
000941FE                            Music88:	incbin	sound\music88.bin
000942F2 00                         		even
000942F2                            Music89:	incbin	sound\music89.bin
00095676 00                         		even
00095676                            Music8A:	incbin	sound\music8A.bin
000A7DB6 00                         		even
000A7DB6                            Music8B:	incbin	sound\music8B.bin
000A8E96 00                         		even
000A8E96                            Music8C:	incbin	sound\music8C.bin
000ABCCC 00                         		even
000ABCCC                            Music8D:	incbin	sound\music8D.bin
000ACC5E 00                         		even
000ACC5E                            Music8E:	incbin	sound\music8E.bin
000ACF70 00                         		even
000ACF70                            Music8F:	incbin	sound\music8F.bin
000AD0C6 00                         		even
000AD0C6                            Music90:	incbin	sound\music90.bin
000AD22A 00                         		even
000AD22A                            Music91:	incbin	sound\music91.bin
000BAA26 00                         		even
000BAA26                            Music92:	incbin	sound\music92.bin
000BAB56 00                         		even
000BAB56                            Music93:	incbin	sound\music93.bin
000BAC2A 00                         		even
000BAC2A                            Music94:	incbin	sound\music94.bin
000BC8C4                            		even
000BC8C4                            Music95:	incbin	sound\music95.bin
000BF66C 00                         		even
000BF66C                            Music96:	incbin	sound\music96.bin
000C0D5C 00                         		even
000C0D5C                            Music97:	incbin	sound\music97.bin
000C7176 00                         		even
000C7176                            Music98:	incbin	sound\music98.bin
000CAF38 00                         		even
000CAF38                            Music99:	incbin	sound\music92.bin
000CB068 00                         		even
000CB068                            Music9A:	incbin	sound\music9A.bin
000CD036                            		even
000CD036                            Music9B:	incbin	sound\music9B.bin
000D33E8                            		even
000D33E8                            Music9C:	incbin	sound\music9C.bin
000D583E                            		even
000D583E                            Music9D:	incbin	sound\music9D.bin
000D89D0                            		even
000D89D0                            Music9E:	incbin	sound\music9E.bin
000DF580 00                         		even
000DF580                            Music9F:	incbin	sound\music9F.bin
000E66A0 00                         		even
000E66A0                            ; ---------------------------------------------------------------------------
000E66A0                            ; Sound	effect pointers
000E66A0                            ; ---------------------------------------------------------------------------
000E66A0 0000 0000 0000 0000 0000+  SoundIndex:	dc.l SoundA0, SoundA1, SoundA2
000E66AC 0000 0000 0000 0000 0000+  		dc.l SoundA3, SoundA4, SoundA5
000E66B8 0000 0000 0000 0000 0000+  		dc.l SoundA6, SoundA7, SoundA8
000E66C4 0000 0000 0000 0000 0000+  		dc.l SoundA9, SoundAA, SoundAB
000E66D0 0000 0000 0000 0000 0000+  		dc.l SoundAC, SoundAD, SoundAE
000E66DC 0000 0000 0000 0000 0000+  		dc.l SoundAF, SoundB0, SoundB1
000E66E8 0000 0000 0000 0000 0000+  		dc.l SoundB2, SoundB3, SoundB4
000E66F4 0000 0000 0000 0000 0000+  		dc.l SoundB5, SoundB6, SoundB7
000E6700 0000 0000 0000 0000 0000+  		dc.l SoundB8, SoundB9, SoundBA
000E670C 0000 0000 0000 0000 0000+  		dc.l SoundBB, SoundBC, SoundBD
000E6718 0000 0000 0000 0000 0000+  		dc.l SoundBE, SoundBF, SoundC0
000E6724 0000 0000 0000 0000 0000+  		dc.l SoundC1, SoundC2, SoundC3
000E6730 0000 0000 0000 0000 0000+  		dc.l SoundC4, SoundC5, SoundC6
000E673C 0000 0000 0000 0000 0000+  		dc.l SoundC7, SoundC8, SoundC9
000E6748 0000 0000 0000 0000 0000+  		dc.l SoundCA, SoundCB, SoundCC
000E6754 0000 0000 0000 0000 0000+  		dc.l SoundCD, SoundCE, SoundCF
000E6760 0000 0000                  		dc.l SoundD1
000E6764                            
000E6764 0000 0000                  SoundD0Index:	dc.l SoundD0
000E6768                            SoundA0:	incbin	sound\soundA0.bin
000E677E                            		even
000E677E                            SoundA1:	incbin	sound\soundA1.bin
000E67A8                            		even
000E67A8                            SoundA2:	incbin	sound\soundA2.bin
000E67C8                            		even
000E67C8                            SoundA3:	incbin	sound\soundA3.bin
000E67FA                            		even
000E67FA                            SoundA4:	incbin	sound\soundA4.bin
000E6830                            		even
000E6830                            SoundA5:	incbin	sound\soundA5.bin
000E685C                            		even
000E685C                            SoundA6:	incbin	sound\soundA6.bin
000E688C                            		even
000E688C                            SoundA7:	incbin	sound\soundA7.bin
000E68BC                            		even
000E68BC                            SoundA8:	incbin	sound\soundA8.bin
000E68F0                            		even
000E68F0                            SoundA9:	incbin	sound\soundA9.bin
000E6902                            		even
000E6902                            SoundAA:	incbin	sound\soundAA.bin
000E6944                            		even
000E6944                            SoundAB:	incbin	sound\soundAB.bin
000E6964                            		even
000E6964                            SoundAC:	incbin	sound\soundAC.bin
000E6998                            		even
000E6998                            SoundAD:	incbin	sound\soundAD.bin
000E69CE                            		even
000E69CE                            SoundAE:	incbin	sound\soundAE.bin
000E6A18                            		even
000E6A18                            SoundAF:	incbin	sound\soundAF.bin
000E6A46                            		even
000E6A46                            SoundB0:	incbin	sound\soundB0.bin
000E6A78                            		even
000E6A78                            SoundB1:	incbin	sound\soundB1.bin
000E6AA4                            		even
000E6AA4                            SoundB2:	incbin	sound\soundB2.bin
000E6AF4                            		even
000E6AF4                            SoundB3:	incbin	sound\soundB3.bin
000E6B3E                            		even
000E6B3E                            SoundB4:	incbin	sound\soundB4.bin
000E6B9A                            		even
000E6B9A                            SoundB5:	incbin	sound\soundB5.bin
000E6BC8                            		even
000E6BC8                            SoundB6:	incbin	sound\soundB6.bin
000E6BE6                            		even
000E6BE6                            SoundB7:	incbin	sound\soundB7.bin
000E6C22                            		even
000E6C22                            SoundB8:	incbin	sound\soundB8.bin
000E6C40                            		even
000E6C40                            SoundB9:	incbin	sound\soundB9.bin
000E6CA4                            		even
000E6CA4                            SoundBA:	incbin	sound\soundBA.bin
000E6CCC                            		even
000E6CCC                            SoundBB:	incbin	sound\soundBB.bin
000E6CF8                            		even
000E6CF8                            SoundBC:	incbin	sound\soundBC.bin
000E6D3A                            		even
000E6D3A                            SoundBD:	incbin	sound\soundBD.bin
000E6D8E                            		even
000E6D8E                            SoundBE:	incbin	sound\soundBE.bin
000E6DC8                            		even
000E6DC8                            SoundBF:	incbin	sound\soundBF.bin
000E6E3A                            		even
000E6E3A                            SoundC0:	incbin	sound\soundC0.bin
000E6E68                            		even
000E6E68                            SoundC1:	incbin	sound\soundC1.bin
000E6EA2                            		even
000E6EA2                            SoundC2:	incbin	sound\soundC2.bin
000E6ECC                            		even
000E6ECC                            SoundC3:	incbin	sound\soundC3.bin
000E6F46                            		even
000E6F46                            SoundC4:	incbin	sound\soundC4.bin
000E6F6E                            		even
000E6F6E                            SoundC5:	incbin	sound\soundC5.bin
000E6FD6                            		even
000E6FD6                            SoundC6:	incbin	sound\soundC6.bin
000E7018                            		even
000E7018                            SoundC7:	incbin	sound\soundC7.bin
000E7046                            		even
000E7046                            SoundC8:	incbin	sound\soundC8.bin
000E7058                            		even
000E7058                            SoundC9:	incbin	sound\soundC9.bin
000E7086                            		even
000E7086                            SoundCA:	incbin	sound\soundCA.bin
000E70B4                            		even
000E70B4                            SoundCB:	incbin	sound\soundCB.bin
000E7100                            		even
000E7100                            SoundCC:	incbin	sound\soundCC.bin
000E713A                            		even
000E713A                            SoundCD:	incbin	sound\soundCD.bin
000E7148                            		even
000E7148                            SoundCE:	incbin	sound\soundCE.bin
000E7176                            		even
000E7176                            SoundCF:	incbin	sound\soundCF.bin
000E71AE                            		even
000E71AE                            SoundD0:	incbin	sound\soundD0.bin
000E71E8                            		even
000E71E8                            SoundD1:	incbin	sound\soundD1.bin
000E7224                            		even			
000E7224                            SegaPCM:	incbin	sound\segapcm.wav,$3A
000F88AA 00                         SegaPCM_End:	even
000F88AA                            
000F88AA                            ; ===========================================================================
000F88AA                            ; ---------------------------------------------------------------------------
000F88AA                            ; Sample 68k PCM list
000F88AA                            ; ---------------------------------------------------------------------------
000F88AA                            
000F88AA 0000 0000                  SampleList:		dc.l	StopSample			; 80 (THIS IS A REST NOTE, DO NOT EDIT...)
000F88AE 0000 0000                  			dc.l	Sonic1Kick			; 81
000F88B2 0000 0000                  			dc.l	Sonic1Snare			; 82
000F88B6 0000 0000                  			dc.l	Sonic1TimpaniLow		; 83
000F88BA 0000 0000                  			dc.l	ChaotixCrash			; 84
000F88BE 0000 0000                   			dc.l	ChaotixSplash			; 85
000F88C2 0000 0000                  			dc.l	ChaotixTom1			; 86
000F88C6 0000 0000                  			dc.l	ChaotixTom2			; 87
000F88CA 0000 0000                  			dc.l	Sonic1TimpaniHigh		; 88
000F88CE 0000 0000                  			dc.l	Sonic1TimpaniMid		; 89
000F88D2 0000 0000                  			dc.l	Sonic1TimpaniLow		; 8A
000F88D6 0000 0000                  			dc.l	Sonic1TimpaniLower		; 8B
000F88DA 0000 0000                  			dc.l	Sonic3CleanSnare		; 8C
000F88DE 0000 0000                  			dc.l	KSTHi		; 8D
000F88E2 0000 0000                  			dc.l	KSTLo		; 8E
000F88E6 0000 0000                  			dc.l	MainCrash		; 8F
000F88EA 0000 0000                  			dc.l	RideCymbal		; 90
000F88EE 0000 0000                  			dc.l	Sonic1SnareSonic3Kick		; 91
000F88F2 0000 0000                  			dc.l	Sonic3Kick		; 92
000F88F6 0000 0000                  			dc.l	Tom1		; 93
000F88FA 0000 0000                  			dc.l	Tom2		; 94
000F88FE 0000 0000                  			dc.l	Tom3		; 95
000F8902 0000 0000                  			dc.l	Tom4		; 96
000F8906 0000 0000                  			dc.l	Sonic2Clap		; 97
000F890A 0000 0000                  			dc.l	Sonic1SnareSonic2Clap		; 98
000F890E 0000 0000                  			dc.l	S1STom1		; 99	
000F8912 0000 0000                  			dc.l	S1STom2		; 9A			
000F8916 0000 0000                  			dc.l	S1STom3		; 9B
000F891A 0000 0000                  			dc.l	S1STom4		; 9C			
000F891E 0000 0000                  			dc.l	S1SLLZK		; 9D
000F8922 0000 0000                  			dc.l	LLZK		; 9E			
000F8926 0000 0000                  			dc.l	Bongo1		; 9F
000F892A 0000 0000                  			dc.l	Bongo2		; A0
000F892E 0000 0000                  			dc.l	S1SnareCrash	;A1
000F8932 0000 0000                  			dc.l	S1SnareKick	;A2
000F8936 0000 0000                  			dc.l	MainCrashWoo	;A3
000F893A 0000 0000                  			dc.l	Woo		;A4
000F893E 0000 0000                  			dc.l	GoS1Snare	;A5
000F8942 0000 0000                  			dc.l	CmonRoll	;A6
000F8946 0000 0000                  			dc.l	ReverseCymbal	;A7
000F894A 0000 0000                  			dc.l	Cutscene1	;A8
000F894E 0000 0000                  			dc.l	Cutscene2	;A9
000F8952 0000 0000                  			dc.l	Snare3	;AA
000F8956 0000 0000                  			dc.l	Snare3Crash	;AB
000F895A 0000 0000                  			dc.l	EGGStation	;AC
000F895E                            ; ---------------------------------------------------------------------------
000F895E                            ; Sample z80 pointers
000F895E                            ; ---------------------------------------------------------------------------
000F895E                            
000F895E 0000 00                    StopSample:		dcz80	SWF_StopSample
000F8961 0000 00                    Sonic1Kick:		dcz80	SWF_S1Kick
000F8964 0000 00                    Sonic1Snare:		dcz80	SWF_S1Snare
000F8967 0000 00                    Sonic1TimpaniHigh:	dcz80	SWF_S1TimpaniHigh
000F896A 0000 00                    Sonic1TimpaniMid:	dcz80	SWF_S1TimpaniMid
000F896D 0000 00                    Sonic1TimpaniLow:	dcz80	SWF_S1TimpaniLow
000F8970 0000 00                    Sonic1TimpaniLower:	dcz80	SWF_S1TimpaniLower
000F8973 0000 00                    ChaotixCrash:	dcz80	SWF_ChaotixCrash
000F8976 0000 00                    ChaotixSplash:	dcz80	SWF_ChaotixSplash
000F8979 0000 00                    ChaotixTom1:	dcz80	SWF_ChaotixTom1
000F897C 0000 00                    ChaotixTom2:	dcz80	SWF_ChaotixTom2
000F897F 0000 00                    Sonic3CleanSnare:	dcz80	SWF_Sonic3CleanSnare
000F8982 0000 00                    KSTHi:	dcz80	SWF_KSTHi
000F8985 0000 00                    KSTLo:	dcz80	SWF_KSTLo
000F8988 0000 00                    MainCrash:	dcz80	SWF_MainCrash
000F898B 0000 00                    RideCymbal:	dcz80	SWF_RideCymbal
000F898E 0000 00                    Sonic1SnareSonic3Kick:	dcz80	SWF_Sonic1SnareSonic3Kick
000F8991 0000 00                    Sonic3Kick:	dcz80	SWF_Sonic3Kick
000F8994 0000 00                    Tom1:	dcz80	SWF_Tom1
000F8997 0000 00                    Tom2:	dcz80	SWF_Tom2
000F899A 0000 00                    Tom3:	dcz80	SWF_Tom3
000F899D 0000 00                    Tom4:	dcz80	SWF_Tom4
000F89A0 0000 00                    Sonic2Clap:	dcz80	SWF_Sonic2Clap
000F89A3 0000 00                    Sonic1SnareSonic2Clap:	dcz80	SWF_Sonic1SnareSonic2Clap
000F89A6 0000 00                    S1STom1:	dcz80	SWF_S1STom1
000F89A9 0000 00                    S1STom2:	dcz80	SWF_S1STom2
000F89AC 0000 00                    S1STom3:	dcz80	SWF_S1STom3
000F89AF 0000 00                    S1STom4:	dcz80	SWF_S1STom4
000F89B2 0000 00                    LLZK:	dcz80	SWF_LLZK
000F89B5 0000 00                    S1SLLZK:	dcz80	SWF_S1SLLZK
000F89B8 0000 00                    Bongo1:	dcz80	SWF_Bongo1
000F89BB 0000 00                    Bongo2:	dcz80	SWF_Bongo2
000F89BE 0000 00                    S1SnareCrash: dcz80 SWF_S1SnareCrash
000F89C1 0000 00                    S1SnareKick: dcz80 SWF_S1SnareKick
000F89C4 0000 00                    MainCrashWoo: dcz80 SWF_MainCrashWoo
000F89C7 0000 00                    Woo: dcz80 SWF_Woo
000F89CA 0000 00                    GoS1Snare: dcz80 SWF_GoS1Snare
000F89CD 0000 00                    CmonRoll: dcz80 SWF_CmonRoll
000F89D0 0000 00                    ReverseCymbal: dcz80 SWF_ReverseCymbal
000F89D3 0000 00                    Cutscene1: dcz80 SWF_Cutscene1
000F89D6 0000 00                    Cutscene2: dcz80 SWF_Cutscene2
000F89D9 0000 00                    Snare3: dcz80 SWF_Snare3
000F89DC 0000 00                    Snare3Crash: dcz80 SWF_Snare3Crash
000F89DF 0000 00                    EGGStation: dcz80 SWF_EGGStation
000F89E2                            ; ---------------------------------------------------------------------------
000F89E2                            ; Sample file includes
000F89E2                            ; ---------------------------------------------------------------------------
000F89E2 0000 0000 0000 0000 0000+  			align	$20,$FF
000F8A00                            SWF_StopSample:		dcb.b	$7FFF,$00
001009FF 80                         			dc.b	$80
00100A00                            ; ---------------------------------------------------------------------------
00100A00                            SWF_S1Kick:		incbin	"Dual PCM\Samples\incswf\Sonic 1 Kick.swf"
00101B20                            SWF_S1Snare:		incbin	"Dual PCM\Samples\incswf\Sonic 1 Snare.swf"
00102860                            SWF_S1TimpaniHigh:	incbin	"Dual PCM\Samples\incswf\Sonic 1 Timpani High.swf"
00106F00                            SWF_S1TimpaniMid:	incbin	"Dual PCM\Samples\incswf\Sonic 1 Timpani Mid.swf"
0010BE40                            SWF_S1TimpaniLow:	incbin	"Dual PCM\Samples\incswf\Sonic 1 Timpani Low.swf"
00111C80                            SWF_S1TimpaniLower:	incbin	"Dual PCM\Samples\incswf\Sonic 1 Timpani Lower.swf"
00118060                            SWF_ChaotixCrash:	incbin	"Dual PCM\Samples\incswf\Knuckles Chaotix Crash Cymbal.swf"
0011F860                            SWF_ChaotixSplash:	incbin	"Dual PCM\Samples\incswf\Knuckles Chaotix Splash Cymbal.swf"
00121F00                            SWF_ChaotixTom1:	incbin	"Dual PCM\Samples\incswf\Knuckles Chaotix Tom 1.swf"
00128F40                            SWF_ChaotixTom2:	incbin	"Dual PCM\Samples\incswf\Knuckles Chaotix Tom 2.swf"
0012A0A0                            SWF_Sonic3CleanSnare:	incbin	"Dual PCM\Samples\incswf\Sonic 3 Cleaner Snare.swf"
0012AF80                            SWF_KSTHi:	incbin	"Dual PCM\Samples\incswf\KSTHi.swf"
0012F620                            SWF_KSTLo:	incbin	"Dual PCM\Samples\incswf\KSTLo.swf"
00135460                            SWF_MainCrash:	incbin	"Dual PCM\Samples\incswf\MainCrash.swf"
0013A3A0                            SWF_RideCymbal:	incbin	"Dual PCM\Samples\incswf\RideCymbal.swf"
0013C200                            SWF_Sonic1SnareSonic3Kick:	incbin	"Dual PCM\Samples\incswf\Sonic 1 Snare and Sonic 3 Kick.swf"
0013CF20                            SWF_Sonic3Kick:	incbin	"Dual PCM\Samples\incswf\Sonic 3 Kick.swf"
0013D540                            SWF_Tom1:	incbin	"Dual PCM\Samples\incswf\Tom1.swf"
0013E420                            SWF_Tom2:	incbin	"Dual PCM\Samples\incswf\Tom2.swf"
0013F600                            SWF_Tom3:	incbin	"Dual PCM\Samples\incswf\Tom3.swf"
00140BE0                            SWF_Tom4:	incbin	"Dual PCM\Samples\incswf\Tom4.swf"
00142B80                            SWF_Sonic2Clap:	incbin	"Dual PCM\Samples\incswf\Sonic 2 Clap.swf"
001438A0                            SWF_Sonic1SnareSonic2Clap:	incbin	"Dual PCM\Samples\incswf\Sonic 1 Snare and Sonic 2 Clap.swf"
001445E0                            SWF_S1STom1:	incbin	"Dual PCM\Samples\incswf\S1STom1.swf"
001454C0                            SWF_S1STom2:	incbin	"Dual PCM\Samples\incswf\S1STom2.swf"
001466A0                            SWF_S1STom3:	incbin	"Dual PCM\Samples\incswf\S1STom3.swf"
00147C80                            SWF_S1STom4:	incbin	"Dual PCM\Samples\incswf\S1STom4.swf"
00149C20                            SWF_LLZK:	incbin	"Dual PCM\Samples\incswf\LLZK.swf"
0014B6A0                            SWF_S1SLLZK:	incbin	"Dual PCM\Samples\incswf\S1SLLZK.swf"
0014D120                            SWF_Bongo1:	incbin	"Dual PCM\Samples\incswf\Bongo1.swf"
0014DAC0                            SWF_Bongo2:	incbin	"Dual PCM\Samples\incswf\Bongo2.swf"
0014E800                            SWF_S1SnareCrash:	incbin	"Dual PCM\Samples\incswf\S1Snare and MainCrash.swf"
00153720                            SWF_S1SnareKick:	incbin	"Dual PCM\Samples\incswf\S1SnareKick.swf"
00154840                            SWF_MainCrashWoo:	incbin	"Dual PCM\Samples\incswf\MainCrashWoo.swf"
00159760                            SWF_Woo:	incbin	"Dual PCM\Samples\incswf\Woo.swf"
0015ACA0                            SWF_GoS1Snare:	incbin	"Dual PCM\Samples\incswf\GoS1Snare.swf"
0015C0A0                            SWF_CmonRoll:	incbin	"Dual PCM\Samples\incswf\CmonRoll.swf"
0015EDE0                            SWF_ReverseCymbal:	incbin	"Dual PCM\Samples\incswf\Reverse cymbal.swf"
00162660                            SWF_Cutscene1:	incbin	"Dual PCM\Samples\incswf\Cutscene1.swf"
00167580                            SWF_Cutscene2:	incbin	"Dual PCM\Samples\incswf\Cutscene2.swf"
0016C4A0                            SWF_Snare3:	incbin	"Dual PCM\Samples\incswf\Snare3.swf"
0016D9A0                            SWF_Snare3Crash:	incbin	"Dual PCM\Samples\incswf\Snare3Crash.swf"
001728C0                            SWF_EGGStation:	incbin	"Dual PCM\Samples\incswf\EGGStation.swf"
001777E0                            ; ===============================================================
001777E0                            ; ---------------------------------------------------------------
001777E0                            ; Error handling module
001777E0                            ; ---------------------------------------------------------------
001777E0                             
001777E0 4EBA 0000                  BusError:   jsr ErrorHandler(pc)
001777E4 4255 5320 4552 524F 5200           dc.b    "BUS ERROR",0           ; text
001777EE 01                                 dc.b    1               ; extended stack frame
001777F0 00                                 even
001777F0                             
001777F0 4EBA 0000                  AddressError:   jsr ErrorHandler(pc)
001777F4 4144 4452 4553 5320 4552+          dc.b    "ADDRESS ERROR",0       ; text
00177802 01                                 dc.b    1               ; extended stack frame
00177804 00                                 even
00177804                             
00177804 4EBA 0000                  IllegalInstr:   jsr ErrorHandler(pc)
00177808 494C 4C45 4741 4C20 494E+          dc.b    "ILLEGAL INSTRUCTION",0     ; text
0017781C 00                                 dc.b    0               ; extended stack frame
0017781E 00                                 even
0017781E                             
0017781E 4EBA 0000                  ZeroDivide: jsr ErrorHandler(pc)
00177822 5A45 524F 2044 4956 4944+          dc.b    "ZERO DIVIDE",0         ; text
0017782E 00                                 dc.b    0               ; extended stack frame
00177830 00                                 even
00177830                             
00177830 4EBA 0000                  ChkInstr:   jsr ErrorHandler(pc)
00177834 4348 4B20 494E 5354 5255+          dc.b    "CHK INSTRUCTION",0         ; text
00177844 00                                 dc.b    0               ; extended stack frame
00177846 00                                 even
00177846                             
00177846 4EBA 0000                  TrapvInstr: jsr ErrorHandler(pc)
0017784A 5452 4150 5620 494E 5354+          dc.b    "TRAPV INSTRUCTION",0       ; text
0017785C 00                                 dc.b    0               ; extended stack frame
0017785E 00                                 even
0017785E                             
0017785E 4EBA 0000                  PrivilegeViol:  jsr ErrorHandler(pc)
00177862 5052 4956 494C 4547 4520+          dc.b    "PRIVILEGE VIOLATION",0     ; text
00177876 00                                 dc.b    0               ; extended stack frame
00177878 00                                 even
00177878                             
00177878 4EBA 0000                  Trace:      jsr ErrorHandler(pc)
0017787C 5452 4143 4500                     dc.b    "TRACE",0           ; text
00177882 00                                 dc.b    0               ; extended stack frame
00177884 00                                 even
00177884                             
00177884 4EBA 0000                  Line1010Emu:    jsr ErrorHandler(pc)
00177888 4C49 4E45 2031 3031 3020+          dc.b    "LINE 1010 EMULATOR",0      ; text
0017789B 00                                 dc.b    0               ; extended stack frame
0017789C                                    even
0017789C                             
0017789C 4EBA 0000                  Line1111Emu:    jsr ErrorHandler(pc)
001778A0 4C49 4E45 2031 3131 3120+          dc.b    "LINE 1111 EMULATOR",0      ; text
001778B3 00                                 dc.b    0               ; extended stack frame
001778B4                                    even
001778B4                             
001778B4 4EBA 0000                  ErrorExcept:    jsr ErrorHandler(pc)
001778B8 4552 524F 5220 4558 4345+          dc.b    "ERROR EXCEPTION",0         ; text
001778C8 00                                 dc.b    0               ; extended stack frame
001778CA 00                                 even
001778CA                             
001778CA                            ErrorHandler:   incbin  "ErrorHandler.bin"
001780AE                            
001780AE                            	include	"s2_menu.asm"	; Sonic 2 level select
001780AE                            ;===============================================================================
001780AE                            ; Menu do Sonic 2 No Sonic 1 reprogramado por Esrael L. G. Neto
001780AE                            ; [ In�cio ]
001780AE                            ;
001780AE                            ; O c�digo deste menu foi desenvolvido para funcionar com
001780AE                            ; o disassembly do Sonic 1 feito por -> drx (www.hacking-cult.org)
001780AE                            ; 
001780AE                            ; Se estiver usando um disassembly diferente modifique os jumps no final do 
001780AE                            ; c�digo para que aponte para as rotinas equivalentes.
001780AE                            ; 
001780AE                            ; Para pode utilizar este menu basta fazer a seguinte modifica��o no c�digo 
001780AE                            ; original:
001780AE                            ; Localize o label  -> loc_3242 adicione -> jmp     Level_Select_Menu
001780AE                            ; O c�digo deve ficar como abaixo
001780AE                            ;               ......................
001780AE                            ; loc_3242:
001780AE                            ;		tst.b	($FFFFFFE0).w
001780AE                            ;		beq.w	PlayLevel	
001780AE                            ;		btst	#6,($FFFFF604).w 
001780AE                            ;		beq.w	PlayLevel	  		
001780AE                            ;		jmp     Level_Select_Menu ; <- Carrega o Menu do Sonic 2	
001780AE                            ;		moveq	#2,d0		
001780AE                            ;		bsr.w	PalLoad		 
001780AE                            ;               ...............
001780AE                            ;
001780AE                            ; N�o esque�a de incluir este asm em seu c�digo com a diretiva include:
001780AE                            ;               include 's2_menu.asm'
001780AE                            ;===============================================================================  
001780AE =FFFFFFE1                  Slow_Motion_Flag      equ $FFFFFFE1
001780AE =FFFFFFE2                  Debug_Mode_Flag       equ $FFFFFFE2
001780AE                            
001780AE =00000083                  Level_Select_Menu_snd   = $0083
001780AE =00000093                  Emerald_Snd             = $0093
001780AE =000000B5                  Ring_Snd                = $00B5
001780AE =000000E0                  Volume_Down             = $00E0
001780AE =000000E4                  Stop_Sound              = $00E4
001780AE                            ;-------------------------------------------------------------------------------
001780AE                            Level_Select_Menu:
001780AE 103C 00E4                                  move.b  #Stop_Sound, D0
001780B2 6100 0000                                  bsr     Menu_Play_Music
001780B6 6100 0000                                  bsr     Menu_Pal_FadeFrom
001780BA 46FC 2700                                  move    #$2700, SR
001780BE 3038 F60C                                  move.w  ($FFFFF60C).w, D0
001780C2 0200 00BF                                  andi.b  #$BF, D0
001780C6 33C0 00C0 0004                             move.w  D0, ($00C00004)
001780CC 6100 0000                                  bsr     Menu_ClearScreen
001780D0 4DF9 00C0 0004                             lea     ($00C00004), A6
001780D6 3CBC 8004                                  move.w  #$8004, (A6)
001780DA 3CBC 8230                                  move.w  #$8230, (A6)
001780DE 3CBC 8407                                  move.w  #$8407, (A6)
001780E2 3CBC 8230                                  move.w  #$8230, (A6)
001780E6 3CBC 8700                                  move.w  #$8700, (A6)
001780EA 3CBC 8C81                                  move.w  #$8C81, (A6)
001780EE 3CBC 9001                                  move.w  #$9001, (A6)
001780F2 43F8 AC00                                  lea     ($FFFFAC00).w, A1
001780F6 7000                                       moveq   #$00, D0
001780F8 323C 00FF                                  move.w  #$00FF, D1
001780FC                            Offset_0x026ACA:
001780FC 22C0                                       move.l  D0, (A1)+
001780FE 51C9 FFFC                                  dbra    D1, Offset_0x026ACA
00178102 43F8 B000                                  lea     ($FFFFB000).w, A1
00178106 7000                                       moveq   #$00, D0
00178108 323C 07FF                                  move.w  #$07FF, D1
0017810C                            Offset_0x026ADA:
0017810C 22C0                                       move.l  D0, (A1)+
0017810E 51C9 FFFC                                  dbra    D1, Offset_0x026ADA
00178112 4278 DC00                                  clr.w   ($FFFFDC00).w
00178116 21FC FFFF DC00 DCFC                        move.l  #$FFFFDC00, ($FFFFDCFC).w
0017811E 23FC 4200 0000 00C0 0004                   move.l  #$42000000, ($00C00004)
00178128 41F9 0000 0000                             lea     (Menu_Font), A0
0017812E 6100 0000                                  bsr     Menu_NemesisDec
00178132 23FC 5200 0000 00C0 0004                   move.l  #$52000000, ($00C00004)
0017813C 41F9 0000 0000                             lea     (Level_Icons), A0
00178142 4EB9 0000 0000                             jsr     Menu_NemesisDec
00178148                            ;-------------------------------------------------------------------------------                
00178148                            ; Carrega o Mapeamento do Fundo Sonic/Miles               
00178148                            ;-------------------------------------------------------------------------------
00178148 43F9 FFFF 0000                             lea     ($FFFF0000), A1
0017814E 41F9 0000 0000                             lea     (Menu_Mappings), A0
00178154 303C 6000                                  move.w  #$6000, D0
00178158 6100 0000                                  bsr     Menu_EnigmaDec
0017815C 43F9 FFFF 0000                             lea     ($FFFF0000), A1
00178162 203C 6000 0003                             move.l  #$60000003, D0
00178168 7227                                       moveq   #$27, D1
0017816A 741B                                       moveq   #$1B, D2
0017816C 6100 0000                                  bsr     Menu_ShowVDPGraphics
00178170                            ;-------------------------------------------------------------------------------                
00178170                            ; Carrega o Texto do Menu de Seleзгo de Fases               
00178170                            ;-------------------------------------------------------------------------------
00178170 47F9 FFFF 0000             		lea		($FFFF0000),a3
00178176 323C 045F                  		move.w	#$045F,d1
0017817A                            
0017817A                            Offset_0x026B4E:
0017817A 36FC 0000                  		move.w	#$0000,(a3)+
0017817E 51C9 FFFA                  		dbra	d1,Offset_0x026B4E
00178182 47F9 FFFF 0000             		lea		($FFFF0000),a3
00178188 43F9 0000 0000             		lea		(Menu_Level_Select_Text),a1
0017818E 4BF9 0000 0000             		lea		(Menu_Text_Positions),a5
00178194 7000                       		moveq	#$00,d0
00178196 323C 0009                  		move.w	#$0009,d1	; Quantidade de textos a ser carregada e posiзгo do Sound Test
0017819A                            
0017819A                            Menu_Loop_Load_Text:
0017819A 361D                       		move.w	(a5)+,d3
0017819C 45F3 3000                  		lea		$00(a3,d3),a2
001781A0 7400                       		moveq	#$00,d2
001781A2 1419                       		move.b	(a1)+,d2
001781A4 3602                       		move.w	d2,d3
001781A6                            
001781A6                            Offset_0x026B7A:
001781A6 1019                       		move.b	(a1)+,d0
001781A8 34C0                       		move.w	d0,(a2)+
001781AA 51CA FFFA                  		dbra	d2,Offset_0x026B7A
001781AE 343C 000D                  		move.w	#$000D,d2
001781B2 9443                       		sub.w	d3,d2
001781B4 6500                       		bcs.s	Offset_0x026B92
001781B6                            
001781B6                            Offset_0x026B8A:
001781B6 34FC 0000                  		move.w	#$0000,(a2)+
001781BA 51CA FFFA                  		dbra	d2,Offset_0x026B8A
001781BE                            
001781BE                            Offset_0x026B92:
001781BE 34BC 0011                  		move.w	#$0011,(a2) 	 	 	 ; Load "1"
001781C2 45EA 0050                  		lea		$0050(a2),a2
001781C6 34BC 0012                  		move.w	#$0012,(a2) 	 	 	 ; Load "2"
001781CA 45EA 0050                  		lea		$0050(a2),a2
001781CE 34BC 0013                  		move.w	#$0013,(a2) 	 	 	 ; Load "3"
001781D2 51C9 FFC6                  		dbra	d1,Menu_Loop_Load_Text
001781D6                            ;-------------------------------------------------------------------------------
001781D6 720E                       		moveq	#$0E,d1
001781D8 45EA FBA0                  		lea		$FFFFFBA0(a2),a2
001781DC                            
001781DC                            Menu_Clear_Act_x:						; Limpa os nъmeros dos acts nгo usados e carrega o "*" do Sound Test
001781DC 34BC 0000                  		move.w	#$0000,(a2)				; Load " "
001781E0 45EA 0050                  		lea		$0050(a2),a2
001781E4 51C9 FFF6                  		dbra	d1,Menu_Clear_Act_x
001781E8                            ;		lea     $FF10(a2), a2
001781E8                            ;		move.w  #$001A, (a2)          ; Load "*"
001781E8                            ;-------------------------------------------------------------------------------
001781E8                            ; Carrega o Mapeamento das Asas onde s�o mostrados os �cones
001781E8                            ;------------------------------------------------------------------------------- 
001781E8 41F9 0000 0000                             lea     (Wings_Mappings), A0
001781EE 43F9 FFFF 0670                             lea     ($FFFF0670), A1
001781F4 323C 0006                                  move     #$06, D1
001781F8                            Menu_Loop_Next_Line:
001781F8 303C 0009                                  move     #$09, D0
001781FC                            Menu_Loop_Load_Wings:
001781FC 32D8                                       move.w   (A0)+, (A1)+
001781FE 51C8 FFFC                                  dbra     D0, Menu_Loop_Load_Wings
00178202 D2FC 003C                                  add.w    #$3C, A1
00178206 51C9 FFF0                                  dbra     D1, Menu_Loop_Next_Line
0017820A                            ;-------------------------------------------------------------------------------                
0017820A                            ; Carrega o Mapeamento dos �cones               
0017820A                            ;-------------------------------------------------------------------------------                                    
0017820A 43F9 FFFF 08C0                             lea     ($FFFF08C0), A1
00178210 41F9 0000 0000                             lea     (Icons_Mappings), A0
00178216 303C 0090                                  move.w  #$0090, D0
0017821A 6100 0000                                  bsr     Menu_EnigmaDec
0017821E 43F9 FFFF 0000                             lea     ($FFFF0000), A1
00178224 203C 4000 0003                             move.l  #$40000003, D0
0017822A 7227                                       moveq   #$27, D1
0017822C 741B                                       moveq   #$1B, D2
0017822E 6100 0000                                  bsr     Menu_ShowVDPGraphics
00178232                            ;-------------------------------------------------------------------------------                
00178232 7600                                       moveq   #$00, D3
00178234 6100 0000                                  bsr     Offset_0x027040
00178238 4278 FF70                                  clr.w   ($FFFFFF70).w
0017823C 4278 FE40                                  clr.w   ($FFFFFE40).w
00178240 4238 F711                                  clr.b   ($FFFFF711).w
00178244 4278 F7F0                                  clr.w   ($FFFFF7F0).w
00178248                            ;------------------------------------------------------------------------------- 
00178248 31FC 0000 F7B8                             move.w  #$0000, ($FFFFF7B8).w  ; Inicializa os quadros das anima��es do menu
0017824E 31FC 0000 F7DA                             move.w  #$0000, ($FFFFF7DA).w  ; Inicializa o contador das anima��es do menu 
00178254 4EB9 0000 0000                             jsr     Dynamic_Menu           ; Chama a rotina de anima��o
0017825A                            ;-------------------------------------------------------------------------------
0017825A                            
0017825A 7014                                       moveq   #$14, D0
0017825C 6100 0000                                  bsr     Menu_PalLoad1
00178260 43F8 FB40                                  lea     ($FFFFFB40).w, A1
00178264 45F8 FBC0                                  lea     ($FFFFFBC0).w, A2
00178268 7207                                       moveq   #$07, D1
0017826A                            Offset_0x026C26:
0017826A 24D1                                       move.l  (A1), (A2)+
0017826C 4299                                       clr.l   (A1)+
0017826E 51C9 FFFA                                  dbra    D1, Offset_0x026C26
00178272 103C 0083                                  move.b  #Level_Select_Menu_snd, D0
00178276 6100 0000                                  bsr     Menu_Play_Music
0017827A 7000                                       moveq   #$00, D0
0017827C 4EB9 0000 0000                             jsr     Menu_LoadPLC2
00178282 31FC 0707 F614                             move.w  #$0707, ($FFFFF614).w
00178288 4278 FFDC                                  clr.w   ($FFFFFFDC).w
0017828C 42B8 EE00                                  clr.l   ($FFFFEE00).w
00178290 42B8 EE04                                  clr.l   ($FFFFEE04).w
00178294 4278 FF0C                                  clr.w   ($FFFFFF0C).w
00178298 4278 FF0E                                  clr.w   ($FFFFFF0E).w
0017829C 11FC 0018 F62A                             move.b  #$18, ($FFFFF62A).w
001782A2 6100 0000                                  bsr     Menu_DelayProgram
001782A6 3038 F60C                                  move.w  ($FFFFF60C).w, D0
001782AA 0000 0040                                  ori.b   #$40, D0
001782AE 33C0 00C0 0004                             move.w  D0, ($00C00004)
001782B4 6100 0000                                  bsr     Menu_Pal_FadeTo
001782B8                            Menu_Main_Loop:
001782B8 11FC 0018 F62A                             move.b  #$18, ($FFFFF62A).w
001782BE 6100 0000                                  bsr     Menu_DelayProgram
001782C2 46FC 2700                                  move    #$2700, SR
001782C6 7600                                       moveq   #$00, D3
001782C8 6100 0000                                  bsr     Offset_0x026ED8
001782CC 6100 0000                                  bsr     Offset_0x026DEC
001782D0 363C 6000                                  move.w  #$6000, D3
001782D4 6100 0000                                  bsr     Offset_0x027048
001782D8 46FC 2300                                  move    #$2300, SR
001782DC 4EB9 0000 0000                             jsr     Dynamic_Menu
001782E2 6100 0000                                  bsr     Menu_RunPLC
001782E6 0838 0004 F604                             btst    #$04, ($FFFFF604).w
001782EC 6700                                       beq.s   Offset_0x026CC6
001782EE 31FC 0001 FFD8                             move.w  #$0001, ($FFFFFFD8).w
001782F4                            Offset_0x026CC6:
001782F4 1038 F605                                  move.b  ($FFFFF605).w, D0
001782F8 8038 F607                                  or.b    ($FFFFF607).w, D0
001782FC 0200 0080                                  andi.b  #$80, D0
00178300 6600                                       bne.s   Offset_0x026CD8
00178302 60B4                                       bra     Menu_Main_Loop
00178304                            Offset_0x026CD8:
00178304 3038 FF82                                  move.w  ($FFFFFF82).w, D0
00178308 D040                                       add.w   D0, D0
0017830A 303B 0000                                  move.w  Menu_Level_Select_Array(PC, D0), D0
0017830E 6B00 0000                                  bmi     Menu_Game_Reset
00178312 0C40 0600                                  cmpi.w  #$0600, D0
00178316 6700 0000                                  beq     Menu_Ending_Sequence
0017831A 0C40 5555                                  cmpi.w  #$5555, D0
0017831E 6798                                       beq     Menu_Main_Loop
00178320 0C40 4000                                  cmpi.w  #$4000, D0
00178324 6600 0000                                  bne     Menu_Load_Level
00178328 11FC 0010 F600                             move.b  #$10, ($FFFFF600).w
0017832E 4278 FE10                                  clr.w   ($FFFFFE10).w
00178332 11FC 0003 FE12                             move.b  #$03, ($FFFFFE12).w
00178338 11FC 0003 FEC6                             move.b  #$03, ($FFFFFEC6).w
0017833E 7000                                       moveq   #$00, D0
00178340 31C0 FE20                                  move.w  D0, ($FFFFFE20).w
00178344 21C0 FE22                                  move.l  D0, ($FFFFFE22).w
00178348 21C0 FE26                                  move.l  D0, ($FFFFFE26).w
0017834C 31C0 FED0                                  move.w  D0, ($FFFFFED0).w
00178350 21C0 FED2                                  move.l  D0, ($FFFFFED2).w
00178354 21C0 FED6                                  move.l  D0, ($FFFFFED6).w
00178358 21FC 0000 1388 FFC0                        move.l  #$00001388, ($FFFFFFC0).w
00178360 21FC 0000 1388 FFC4                        move.l  #$00001388, ($FFFFFFC4).w
00178368 31F8 FF72 FF70                             move.w  ($FFFFFF72).w, ($FFFFFF70).w
0017836E 4E75                                       rts
00178370                            Menu_Game_Reset:
00178370 11FC 0000 F600                             move.b  #$0000, ($FFFFF600).w
00178376 4E75                                       rts
00178378                            Menu_Ending_Sequence:
00178378 11FC 0018 F600                             move.b	#$0018,($FFFFF600).w
0017837E 31FC 0600 FE10             		move.w	#$0600,($FFFFFE10).w
00178384 4E75                       		rts
00178386                            Menu_Level_Select_Array:
00178386 0000 0001 0002                             dc.w    $0000, $0001, $0002	;GHZ
0017838C 0200 0201 0202                             dc.w    $0200, $0201, $0202	;MZ
00178392 0400 0401 0402                             dc.w    $0400, $0401, $0402	;SYZ				
00178398 0100 0101 0102                             dc.w    $0100, $0101, $0102 ;LZ
0017839E 0300 0301 0302                             dc.w    $0300, $0301, $0302	;SLZ
001783A4 0500 0501 0103                             dc.w    $0500, $0501, $0103	;SBZ
001783AA 0502 4000 0600                             dc.w    $0502, $4000, $0600	
001783B0 FFFF                                       dc.w    $FFFF
001783B2                            Menu_Load_Level:
001783B2 0240 3FFF                                  andi.w  #$3FFF, D0
001783B6 31C0 FE10                                  move.w  D0, ($FFFFFE10).w
001783BA 11FC 000C F600                             move.b  #$0C, ($FFFFF600).w
001783C0 11FC 0003 FE12                             move.b  #$03, ($FFFFFE12).w
001783C6 11FC 0003 FEC6                             move.b  #$03, ($FFFFFEC6).w
001783CC 7000                                       moveq   #$00, D0
001783CE 31C0 FE20                                  move.w  D0, ($FFFFFE20).w
001783D2 21C0 FE22                                  move.l  D0, ($FFFFFE22).w
001783D6 21C0 FE26                                  move.l  D0, ($FFFFFE26).w
001783DA 31C0 FED0                                  move.w  D0, ($FFFFFED0).w
001783DE 21C0 FED2                                  move.l  D0, ($FFFFFED2).w
001783E2 21C0 FED6                                  move.l  D0, ($FFFFFED6).w
001783E6 4E71                                       nop
001783E8 4E71                                       nop
001783EA 21FC 0000 1388 FFC0                        move.l  #$00001388, ($FFFFFFC0).w
001783F2 21FC 0000 1388 FFC4                        move.l  #$00001388, ($FFFFFFC4).w
001783FA 103C 00E0                                  move.b  #Volume_Down, D0
001783FE 6100 0000                                  bsr     Menu_Play_Music     
00178402 7000                                       moveq   #$00, D0
00178404 31C0 FF8A                                  move.w  D0, ($FFFFFF8A).w
00178408 31C0 FFDC                                  move.w  D0, ($FFFFFFDC).w
0017840C 4E75                                       rts
0017840E                            Offset_0x026DEC:
0017840E 1238 F605                                  move.b  ($FFFFF605).w, D1
00178412 0201 0003                                  andi.b  #$03, D1
00178416 6600                                       bne.s   Offset_0x026DFC
00178418 5378 FF80                                  subq.w  #$01, ($FFFFFF80).w
0017841C 6A00                                       bpl.s   Offset_0x026E32
0017841E                            Offset_0x026DFC:
0017841E 31FC 000B FF80                             move.w  #$000B, ($FFFFFF80).w
00178424 1238 F604                                  move.b  ($FFFFF604).w, D1
00178428 0201 0003                                  andi.b  #$03, D1
0017842C 6700                                       beq.s   Offset_0x026E32
0017842E 3038 FF82                                  move.w  ($FFFFFF82).w, D0
00178432 0801 0000                                  btst    #$00, D1
00178436 6700                                       beq.s   Offset_0x026E1C
00178438 5340                                       subq.w  #$01, D0
0017843A 6400                                       bcc.s   Offset_0x026E1C
0017843C 7015                                       moveq   #$15, D0     ; �ltimo item ap�s apertar para cima
0017843E                            Offset_0x026E1C:
0017843E 0801 0001                                  btst    #$01, D1
00178442 6700                                       beq.s   Offset_0x026E2C
00178444 5240                                       addq.w  #$01, D0
00178446 0C40 0016                                  cmpi.w  #$0016, D0   ; Verifica qual o �ltimo item da lista
0017844A 6500                                       bcs.s   Offset_0x026E2C
0017844C 7000                                       moveq   #$00, D0
0017844E                            Offset_0x026E2C:
0017844E 31C0 FF82                                  move.w  D0, ($FFFFFF82).w
00178452 4E75                                       rts
00178454                            Offset_0x026E32:
00178454 0C78 0015 FF82                             cmpi.w  #$0015, ($FFFFFF82).w ; se o item for igual muda as fun��es de esquerda e direita 
0017845A 6600                                       bne.s   Offset_0x026E9C
0017845C 3038 FF84                                  move.w  ($FFFFFF84).w, D0
00178460 1238 F605                                  move.b  ($FFFFF605).w, D1
00178464 0801 0002                                  btst    #$02, D1
00178468 6700                                       beq.s   Offset_0x026E4E
0017846A 5300                                       subq.b  #$01, D0
0017846C 6400                                       bcc.s   Offset_0x026E4E
0017846E 707F                                       moveq   #$7F, D0
00178470                            Offset_0x026E4E:
00178470 0801 0003                                  btst    #$03, D1
00178474 6700                                       beq.s   Offset_0x026E5E
00178476 5200                                       addq.b  #$01, D0
00178478 0C40 0080                                  cmpi.w  #$0080, D0
0017847C 6500                                       bcs.s   Offset_0x026E5E
0017847E 7000                                       moveq   #$00, D0
00178480                            Offset_0x026E5E:
00178480 0801 0006                                  btst    #$06, D1
00178484 6700                                       beq.s   Offset_0x026E6C
00178486 0600 0010                                  addi.b  #$10, D0
0017848A 0200 007F                                  andi.b  #$7F, D0
0017848E                            Offset_0x026E6C:
0017848E 31C0 FF84                                  move.w  D0, ($FFFFFF84).w
00178492 0241 0030                                  andi.w  #$0030, D1
00178496 6700                                       beq.s   Offset_0x026E9A
00178498 3038 FF84                                  move.w  ($FFFFFF84).w, D0
0017849C 0640 0080                                  addi.w  #$0080, D0
001784A0 6100 0000                                  bsr     Menu_Play_Music 
001784A4 41F9 0000 0000                             lea     (Code_Debug_Mode), A0   
001784AA 45F9 0000 0000                             lea     (Code_All_Emeralds), A2 
001784B0 43F8 FF0A                                  lea     ($FFFFFF0A).w, A1
001784B4 7401                                       moveq   #$01, D2
001784B6 6100 0000                                  bsr     Menu_Code_Test 
001784BA                            Offset_0x026E9A:
001784BA 4E75                                       rts
001784BC                            Offset_0x026E9C:
001784BC 1238 F605                                  move.b  ($FFFFF605).w, D1
001784C0 0201 000C                                  andi.b  #$0C, D1
001784C4 6700                                       beq.s   Offset_0x026EB2
001784C6 3038 FF82                                  move.w  ($FFFFFF82).w, D0
001784CA 103B 0000                                  move.b  Menu_Left_Right_Select(PC, D0), D0
001784CE 31C0 FF82                                  move.w  D0, ($FFFFFF82).w
001784D2                            Offset_0x026EB2:
001784D2 4E75                                       rts
001784D4                            Menu_Left_Right_Select:                   
001784D4 0F10 1112 1212 1313 1314+                  dc.b    $0F, $10, $11, $12, $12, $12, $13, $13, $13, $14, $14, $14, $15, $15, $15
001784E3 0001 0203 0609 0C                          dc.b    $00, $01, $02, $03, $06, $09, $0C
001784EA                            Offset_0x026ED8:
001784EA 49F9 FFFF 0000                             lea     ($FFFF0000), A4
001784F0 4BF9 0000 0000                             lea     (Menu_Text_Highlight), A5
001784F6 4DF9 00C0 0000                             lea     ($00C00000), A6
001784FC 7000                                       moveq   #$00, D0
001784FE 3038 FF82                                  move.w  ($FFFFFF82).w, D0
00178502 E548                                       lsl.w   #$02, D0
00178504 47F5 0000                                  lea     $00(A5, D0), A3
00178508 7000                                       moveq   #$00, D0
0017850A 1013                                       move.b  (A3), D0
0017850C C0FC 0050                                  mulu.w  #$0050, D0
00178510 7200                                       moveq   #$00, D1
00178512 122B 0001                                  move.b  $0001(A3), D1
00178516 D041                                       add.w   D1, D0
00178518 43F4 0000                                  lea     $00(A4, D0), A1
0017851C 7200                                       moveq   #$00, D1
0017851E 1213                                       move.b  (A3), D1
00178520 EF49                                       lsl.w   #$07, D1
00178522 D22B 0001                                  add.b   $0001(A3), D1
00178526 0641 C000                                  addi.w  #$C000, D1
0017852A E589                                       lsl.l   #$02, D1
0017852C E449                                       lsr.w   #$02, D1
0017852E 0041 4000                                  ori.w   #$4000, D1
00178532 4841                                       swap.w  D1
00178534 2D41 0004                                  move.l  D1, $0004(A6)
00178538 740E                                       moveq   #$0E, D2    ; Quantidade de letras a selecionar (Highlight)
0017853A                            Offset_0x026F28:                
0017853A 3019                                       move.w  (A1)+, D0
0017853C D043                                       add.w   D3, D0
0017853E 3C80                                       move.w  D0, (A6)
00178540 51CA FFF8                                  dbra    D2, Offset_0x026F28
00178544 544B                                       addq.w  #$02, A3
00178546 7000                                       moveq   #$00, D0
00178548 1013                                       move.b  (A3), D0
0017854A 6700                                       beq.s   Offset_0x026F6C
0017854C C0FC 0050                                  mulu.w  #$0050, D0
00178550 7200                                       moveq   #$00, D1
00178552 122B 0001                                  move.b  $0001(A3), D1
00178556 D041                                       add.w   D1, D0
00178558 43F4 0000                                  lea     $00(A4, D0), A1
0017855C 7200                                       moveq   #$00, D1
0017855E 1213                                       move.b  (A3), D1
00178560 EF49                                       lsl.w   #$07, D1
00178562 D22B 0001                                  add.b   $0001(A3), D1
00178566 0641 C000                                  addi.w  #$C000, D1
0017856A E589                                       lsl.l   #$02, D1
0017856C E449                                       lsr.w   #$02, D1
0017856E 0041 4000                                  ori.w   #$4000, D1
00178572 4841                                       swap.w  D1
00178574 2D41 0004                                  move.l  D1, $0004(A6)
00178578 3019                                       move.w  (A1)+, D0
0017857A D043                                       add.w   D3, D0
0017857C 3C80                                       move.w  D0, (A6)
0017857E                            Offset_0x026F6C:
0017857E 0C78 0015 FF82                             cmpi.w  #$0015, ($FFFFFF82).w  ; Se for igual seleciona o n�mero do Sound Test
00178584 6600                                       bne.s   Offset_0x026F78
00178586 6100 0000                                  bsr     Offset_0x026F7A
0017858A                            Offset_0x026F78:
0017858A 4E75                                       rts
0017858C                            Offset_0x026F7A:
0017858C 23FC 49C6 0003 00C0 0004                   move.l  #$49C60003, ($00C00004) ; Posi��o dos n�meros do Sound Test
00178596 3038 FF84                                  move.w  ($FFFFFF84).w, D0
0017859A 1400                                       move.b  D0, D2
0017859C E808                                       lsr.b   #$04, D0
0017859E 6100                                       bsr.s   Offset_0x026F90
001785A0 1002                                       move.b  D2, D0
001785A2                            Offset_0x026F90:
001785A2 0240 000F                                  andi.w  #$000F, D0
001785A6 0C00 000A                                  cmpi.b  #$0A, D0
001785AA 6500                                       bcs.s   Offset_0x026F9E
001785AC 5800                                       addi.b  #$04, D0
001785AE                            Offset_0x026F9E:
001785AE 0600 0010                                  addi.b  #$10, D0
001785B2 D043                                       add.w   D3, D0
001785B4 3C80                                       move.w  D0, (A6)
001785B6 4E75                                       rts
001785B8                            ;-------------------------------------------------------------------------------                
001785B8                            Menu_Code_Test: 
001785B8 3038 FF0C                                  move.w  ($FFFFFF0C).w, D0
001785BC D0C0                                       adda.w  D0, A0
001785BE 3038 FF84                                  move.w  ($FFFFFF84).w, D0
001785C2 B010                                       cmp.b   (A0), D0
001785C4 6600                                       bne.s   Menu_Reset_Debug_Mode_Code_Counter
001785C6 5278 FF0C                                  addq.w  #$01, ($FFFFFF0C).w
001785CA 4A28 0001                                  tst.b   $0001(A0)
001785CE 6A00                                       bpl.s   Menu_All_Emeralds_Code_Test 
001785D0 32BC 0101                                  move.w  #$0101, (A1)
001785D4 6000 0000                                  bra     Menu_Set_Debug_Flag 
001785D8                            Menu_Reset_Debug_Mode_Code_Counter: 
001785D8 31FC 0000 FF0C                             move.w  #$0000, ($FFFFFF0C).w
001785DE                            Menu_All_Emeralds_Code_Test: 
001785DE 3038 FF0E                                  move.w  ($FFFFFF0E).w, D0
001785E2 D4C0                                       adda.w  D0, A2
001785E4 3038 FF84                                  move.w  ($FFFFFF84).w, D0
001785E8 B012                                       cmp.b   (A2), D0
001785EA 6600                                       bne.s   Menu_Reset_All_Emerald_Code_Counter 
001785EC 5278 FF0E                                  addq.w  #$01, ($FFFFFF0E).w
001785F0 4A2A 0001                                  tst.b   $0001(A2)
001785F4 6A00                                       bpl.s   Menu_Code_Not_0xFF 
001785F6 4A42                                       tst.w   D2
001785F8 6600                                       bne.s   Menu_Set_All_Emeralds 
001785FA                            Menu_Set_Debug_Flag: 
001785FA 11FC 0001 FFE1                             move.b  #$01, (Slow_Motion_Flag).w
00178600 11FC 0001 FFE2                             move.b  #$01, (Debug_Mode_Flag).w
00178606 103C 00B5                                  move.b  #Ring_Snd, D0
0017860A 6100 0000                                  bsr     Menu_Play_Music 
0017860E 6000                                       bra.s   Menu_Reset_All_Emerald_Code_Counter 
00178610                            Menu_Set_All_Emeralds: 
00178610 31FC 0006 FE56                             move.w  #$0006, ($FFFFFE56).w
00178616 103C 0093                                  move.b  #Emerald_Snd, D0
0017861A 6100 0000                                  bsr     Menu_Play_Music 
0017861E                            Menu_Reset_All_Emerald_Code_Counter: 
0017861E 31FC 0000 FF0E                             move.w  #$0000, ($FFFFFF0E).w
00178624                            Menu_Code_Not_0xFF: 
00178624 4E75                                       rts               
00178626                            Code_Debug_Mode: 
00178626 0109 0902 0101 0204 FF                     dc.b    $01, $09, $09, $02, $01, $01, $02, $04, $FF
0017862F                            Code_All_Emeralds: 
0017862F 0401 0206 FF                               dc.b    $04, $01, $02, $06, $FF
00178634                            ;-------------------------------------------------------------------------------                 
00178634                            Offset_0x027040:
00178634 6100 FF56                                  bsr     Offset_0x026F7A
00178638 6000 0000                                  bra     Offset_0x027050
0017863C                            Offset_0x027048:
0017863C 6100 FEAC                                  bsr     Offset_0x026ED8
00178640 6000 0000                                  bra     Offset_0x027050
00178644                            Offset_0x027050:
00178644 3038 FF82                                  move.w  ($FFFFFF82).w, D0
00178648 47F9 0000 0000                             lea     (Menu_Icon_List), A3
0017864E 47F3 0000                                  lea     $00(A3, D0), A3
00178652 43F9 FFFF 08C0                             lea     ($FFFF08C0), A1
00178658 7000                                       moveq   #$00, D0
0017865A 1013                                       move.b  (A3), D0
0017865C E748                                       lsl.w   #$03, D0
0017865E 3200                                       move.w  D0, D1
00178660 D040                                       add.w   D0, D0
00178662 D041                                       add.w   D1, D0
00178664 43F1 0000                                  lea     $00(A1, D0), A1
00178668 203C 4B36 0003                             move.l  #$4B360003, D0        ; Posi��o Horizontal dos �cones
0017866E 7203                                       moveq   #$03, D1
00178670 7402                                       moveq   #$02, D2
00178672 6100 0000                                  bsr     Menu_ShowVDPGraphics 
00178676 43F9 0000 0000                             lea     (Icon_Palettes), A1  
0017867C 7000                                       moveq   #$00, D0
0017867E 1013                                       move.b  (A3), D0
00178680 EB48                                       lsl.w   #$05, D0
00178682 43F1 0000                                  lea     $00(A1, D0), A1
00178686 45F8 FB40                                  lea     ($FFFFFB40).w, A2
0017868A 7207                                       moveq   #$07, D1
0017868C                            Offset_0x027098:                
0017868C 24D9                                       move.l  (A1)+, (A2)+
0017868E 51C9 FFFC                                  dbra    D1, Offset_0x027098
00178692 4E75                                       rts
00178694                            ;-------------------------------------------------------------------------------                            
00178694                            Dynamic_Menu:                           
00178694 5338 F7DA                                  subq.b  #$01, ($FFFFF7DA).w          ; Decrementa em 1 o Tempo
00178698 6A00                                       bpl.s   Exit_Dinamic_Menu            ; Se for maior ou igual a 0 sai da fun��o
0017869A 11FC 0007 F7DA                             move.b  #$07, ($FFFFF7DA).w          ; Inicializa o tempo de dura��o de cada frame
001786A0 1038 F7B8                                  move.b  ($FFFFF7B8).w, D0            ; Carrega o Id do Frame Atual em D0
001786A4 5238 F7B8                                  addq.b  #$01, ($FFFFF7B8).w          ; Carrega o pr�ximo frame em $FFFFFFB8
001786A8 0240 001F                                  andi.w  #$001F, D0
001786AC 103B 0000                                  move.b  Sonic_Miles_Frame_Select(PC, D0), D0  ; Carrega o Id do frame em D0
001786B0                                          ; muls.w  #$0140, D0                   ; Multiplica o Id pelo tamanho em bytes de cada frame
001786B0 ED48                                       lsl.w   #$06, D0
001786B2 4DF9 00C0 0000                             lea     ($00C00000), A6
001786B8 2D7C 4020 0000 0004                        move.l  #$40200000, $0004(A6)
001786C0 43F9 0000 0000                             lea     (Sonic_Miles_Spr), A1
001786C6 43F1 0000                                  lea     $00(A1, D0), A1
001786CA 303C 0009                                  move.w  #$0009, D0                   ; Tiles-1 a serem carregados por vez 
001786CE                            Menu_Loop_Load_Tiles:
001786CE 2C99                                       move.l  (A1)+, (A6)
001786D0 2C99                                       move.l  (A1)+, (A6)     
001786D2 2C99                                       move.l  (A1)+, (A6)     
001786D4 2C99                                       move.l  (A1)+, (A6)     
001786D6 2C99                                       move.l  (A1)+, (A6)     
001786D8 2C99                                       move.l  (A1)+, (A6)
001786DA 2C99                                       move.l  (A1)+, (A6)
001786DC 2C99                                       move.l  (A1)+, (A6)
001786DE 51C8 FFEE                                  dbra    D0, Menu_Loop_Load_Tiles
001786E2                            Exit_Dinamic_Menu:                
001786E2 4E75                                       rts              
001786E4                            Sonic_Miles_Frame_Select:     
001786E4 0000 0000 0000 0000 0000+                  dc.b    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
001786F2 050A                                       dc.b    $05, $0A
001786F4 0F0F 0F0F 0F0F 0F0F 0F0F+                  dc.b    $0F, $0F, $0F, $0F, $0F, $0F, $0F, $0F, $0F, $0F, $0F, $0F, $0F, $0F
00178702 0A05                                       dc.b    $0A, $05   
00178704                                            ; 0 = 0000000000  ; 1 = 0101000000  ; 2 = 1010000000 ; 3 = 1111000000
00178704                            ;------------------------------------------------------------------------------                  
00178704 =00000000                  __ = $00
00178704 =0000001E                  _A = $1E
00178704 =0000001F                  _B = $1F
00178704 =00000020                  _C = $20
00178704 =00000021                  _D = $21
00178704 =00000022                  _E = $22    
00178704 =00000023                  _F = $23
00178704 =00000024                  _G = $24
00178704 =00000025                  _H = $25
00178704 =00000026                  _I = $26
00178704 =00000027                  _J = $27
00178704 =00000028                  _K = $28
00178704 =00000029                  _L = $29
00178704 =0000002A                  _M = $2A
00178704 =0000002B                  _N = $2B
00178704 =0000002C                  _O = $2C
00178704 =0000002D                  _P = $2D
00178704 =0000002E                  _Q = $2E
00178704 =0000002F                  _R = $2F
00178704 =00000030                  _S = $30
00178704 =00000031                  _T = $31
00178704 =00000032                  _U = $32
00178704 =00000033                  _V = $33
00178704 =00000034                  _W = $34
00178704 =00000035                  _X = $35
00178704 =00000036                  _Y = $36
00178704 =00000037                  _Z = $37
00178704 =0000001A                  _st = $1A
00178704                            ;-------------------------------------------------------------------------------  
00178704                            Icon_Palettes: 
00178704 0000 0000 0048 006A 008E+                  dc.w    $0000, $0000, $0048, $006A, $008E, $00CE, $0EEE, $00E0
00178714 00A4 0082 0062 0000 0E86+                  dc.w    $00A4, $0082, $0062, $0000, $0E86, $0026, $0E42, $0C00
00178724 0000 0000 0420 0820 0C00+                  dc.w    $0000, $0000, $0420, $0820, $0C00, $0E60, $0A00, $0000
00178734 0E00 0000 0000 0000 0444+                  dc.w    $0E00, $0000, $0000, $0000, $0444, $0666, $0AAA, $0EEE
00178744 0000 0204 0026 0248 046A+                  dc.w    $0000, $0204, $0026, $0248, $046A, $048C, $06CE, $0002
00178754 0000 0220 0040 0060 0080+                  dc.w    $0000, $0220, $0040, $0060, $0080, $02A0, $06E0, $0A0C
00178764 0000 0000 0A00 0660 0C80+                  dc.w    $0000, $0000, $0A00, $0660, $0C80, $0EC0, $006A, $0008
00178774 028A 00AE 004C 006E 0060+                  dc.w    $028A, $00AE, $004C, $006E, $0060, $0066, $00C0, $00CA
00178784 0000 0000 0CE2 0000 0480+                  dc.w    $0000, $0000, $0CE2, $0000, $0480, $0240, $0EEE, $04AC
00178794 006A 0026 0842 0620 0400+                  dc.w    $006A, $0026, $0842, $0620, $0400, $0000, $0000, $0000
001787A4 0000 0000 0EEE 0ECA 0E86+                  dc.w    $0000, $0000, $0EEE, $0ECA, $0E86, $0E64, $0E42, $06AE
001787B4 048A 0268 0246 0024 0888+                  dc.w    $048A, $0268, $0246, $0024, $0888, $0444, $000E, $0008
001787C4 0000 0000 0A26 0C48 0E8C+                  dc.w    $0000, $0000, $0A26, $0C48, $0E8C, $00CE, $00C4, $0080
001787D4 0C00 0000 0EEE 0EEA 0EC8+                  dc.w    $0C00, $0000, $0EEE, $0EEA, $0EC8, $006E, $004A, $0028
001787E4 0000 0000 0048 006A 008E+                  dc.w    $0000, $0000, $0048, $006A, $008E, $00CE, $0EEE, $00E0
001787F4 00A4 0082 0062 0808 0A4A+                  dc.w    $00A4, $0082, $0062, $0808, $0A4A, $0026, $0626, $0404
00178804 0000 0000 0EEE 0ECA 0E86+                  dc.w    $0000, $0000, $0EEE, $0ECA, $0E86, $0E64, $0E42, $06AE
00178814 048A 0268 0246 0024 0888+                  dc.w    $048A, $0268, $0246, $0024, $0888, $0444, $000E, $0008
00178824 0000 0000 0048 006A 008E+                  dc.w    $0000, $0000, $0048, $006A, $008E, $00CE, $0EEE, $00E0
00178834 00A4 0082 0062 0400 0E86+                  dc.w    $00A4, $0082, $0062, $0400, $0E86, $006E, $0E42, $0C00
00178844 0000 0000 0CE2 08C0 0480+                  dc.w    $0000, $0000, $0CE2, $08C0, $0480, $0240, $0EEE, $02AC
00178854 006A 0026 0AA6 0000 060A+                  dc.w    $006A, $0026, $0AA6, $0000, $060A, $0408, $0204, $0000
00178864 0000 0000 0C06 0C0A 0C6E+                  dc.w    $0000, $0000, $0C06, $0C0A, $0C6E, $0068, $008A, $0000
00178874 02CE 00EC 00AE 006E 0EEE+                  dc.w    $02CE, $00EC, $00AE, $006E, $0EEE, $0000, $000E, $00C4
00178884 0000 0000 0EEE 0AAA 0000+                  dc.w    $0000, $0000, $0EEE, $0AAA, $0000, $0666, $0444, $0E40
00178894 0C00 0800 00CE 028E 000E+                  dc.w    $0C00, $0800, $00CE, $028E, $000E, $0084, $0062, $0020
001788A4 0000 0000 0004 0044 0084+                  dc.w    $0000, $0000, $0004, $0044, $0084, $0088, $00A8, $00AC
001788B4 006C 002C 0028 0006 0666+                  dc.w    $006C, $002C, $0028, $0006, $0666, $0888, $0CCC, $0EEE
001788C4 0000 0000 06CE 04AC 028A+                  dc.w    $0000, $0000, $06CE, $04AC, $028A, $0068, $0046, $00E8
001788D4 00C4 0080 0040 0EEE 0C00+                  dc.w    $00C4, $0080, $0040, $0EEE, $0C00, $0EC0, $0860, $0000
001788E4 0000 0000 0E64 0E86 0EA8+                  dc.w    $0000, $0000, $0E64, $0E86, $0EA8, $0ECA, $0EEE, $0000
001788F4 00AE 006E 0E22 00E0 0000+                  dc.w    $00AE, $006E, $0E22, $00E0, $0000, $0000, $0000, $0000
00178904 0000 0E20 004E 006E 0048+                  dc.w    $0000, $0E20, $004E, $006E, $0048, $008C, $00CE, $08EE
00178914 0800 0400 0000 0EE8 0E80+                  dc.w    $0800, $0400, $0000, $0EE8, $0E80, $0E60, $0000, $0000
00178924 0000 0000 0A22 0C42 0000+                  dc.w    $0000, $0000, $0A22, $0C42, $0000, $0E66, $0EEE, $0AAA
00178934 0888 0444 08AE 046A 000E+                  dc.w    $0888, $0444, $08AE, $046A, $000E, $0000, $00EE, $0000
00178944 0000 0000 0A22 0C42 0000+                  dc.w    $0000, $0000, $0A22, $0C42, $0000, $0E66, $0EEE, $0AAA
00178954 0888 0444 08AE 046A 000E+                  dc.w    $0888, $0444, $08AE, $046A, $000E, $0000, $00EE, $0000
00178964                            ;-------------------------------------------------------------------------------  
00178964                            Menu_Icon_List: 
00178964 0000 000E 0E0E 0606 060B+                  dc.b    $00, $00, $00, $0E, $0E, $0E, $06, $06, $06, $0B, $0B, $0B, $0D, $0D, $0D, $09
00178974 0909 0410 0F11                             dc.b    $09, $09, $04, $10, $0F, $11
0017897A                            ;-------------------------------------------------------------------------------                 
0017897A                            Menu_Text_Highlight:                  
0017897A 0306 0324 0306 0424 0306+                  dc.w    $0306, $0324, $0306, $0424, $0306, $0524, $0706, $0724
0017898A 0706 0824 0706 0924 0B06+                  dc.w    $0706, $0824, $0706, $0924, $0B06, $0B24, $0B06, $0C24
0017899A 0B06 0D24 0F06 0F24 0F06+                  dc.w    $0B06, $0D24, $0F06, $0F24, $0F06, $1024, $0F06, $1124
001789AA 1306 1324 1306 1424 1306+                  dc.w    $1306, $1324, $1306, $1424, $1306, $1524, $032C, $034A
001789BA 032C 044A 032C 054A 072C+                  dc.w    $032C, $044A, $032C, $054A, $072C, $0000, $0B2C, $0000
001789CA 0F2C 0000 132C 134A                        dc.w    $0F2C, $0000, $132C, $134A
001789D2                            ;-------------------------------------------------------------------------------                
001789D2                            Menu_Text_Positions:                   
001789D2 00F6 0236 0376 04B6 05F6+                  dc.w    $00F6, $0236, $0376, $04B6, $05F6, $011C, $025C, $039C
001789E2 04DC 061C                                  dc.w    $04DC, $061C
001789E6                            ;-------------------------------------------------------------------------------                          
001789E6                            Menu_Level_Select_Text: 
001789E6 0E30 2D29 1E30 2500 2526+                  dc.b    $0E, _S, _P, _L, _A, _S, _H, __, _H, _I, _L, _L, __, __, __, __
001789F6 0E2A 222B 3200 0000 0000+                  dc.b    $0E, _M, _E, _N, _U, __, __, __, __, __, __, __, __, __, __, __
00178A06 0E20 1E30 262B 2C00 3031+                  dc.b    $0E, _C, _A, _S, _I, _N, _O, __, _S, _T, _R, _E, _E, _T, __, __
00178A16 0E29 2C30 3100 291E 1F36+                  dc.b    $0E, _L, _O, _S, _T, __, _L, _A, _B, _Y, _R, _I, _N, _T, _H, __
00178A26 0E34 2C2F 2921 002A 1E2D+                  dc.b    $0E, _W, _O, _R, _L, _D, __, _M, _A, _P, __, __, __, __, __, __
00178A36 0E2A 1E21 0024 221E 2F00+                  dc.b    $0E, _M, _A, _D, __, _G, _E, _A, _R, __, __, __, __, __, __, __
00178A46 0E22 2424 0030 311E 3126+                  dc.b    $0E, _E, _G, _G, __, _S, _T, _A, _T, _I, _O, _N, __, __, __, __   
00178A56 0E30 2D22 2026 1E29 0030+                  dc.b    $0E, _S, _P, _E, _C, _I, _A, _L, __, _S, _T, _A, _G, _E, __, __
00178A66 0E22 2B21 262B 2400 3022+                  dc.b    $0E, _E, _N, _D, _I, _N, _G, __, _S, _E, _Q, _U, _E, _N, _C, _E
00178A76 0E30 2C32 2B21 0031 2230+                  dc.b    $0E, _S, _O, _U, _N, _D, __, _T, _E, _S, _T, __, __, _st,__, __
00178A86                            ;-------------------------------------------------------------------------------
00178A86                            Wings_Mappings: 
00178A86 6000 6000 6000 604D 604E+                  dc.w    $6000, $6000, $6000, $604D, $604E, $684E, $684D, $6000, $6000, $6000   
00178A9A                            ;Wings_Line_1:                 
00178A9A 604F 6050 6051 6052 6053+                  dc.w    $604F, $6050, $6051, $6052, $6053, $6853, $6852, $6851, $6850, $684F
00178AAE                            ;Wings_Line_2:
00178AAE 6054 6055 6056 6057 6057+                  dc.w    $6054, $6055, $6056, $6057, $6057, $6057, $6057, $6856, $6855, $6854
00178AC2                            ;Wings_Line_3:
00178AC2 6058 6059 605A 6057 6057+                  dc.w    $6058, $6059, $605A, $6057, $6057, $6057, $6057, $685A, $6859, $6858
00178AD6                            ;Wings_Line_4:
00178AD6 605B 605C 605D 6057 6057+                  dc.w    $605B, $605C, $605D, $6057, $6057, $6057, $6057, $685D, $685C, $685B
00178AEA                            ;Wings_Line_5:
00178AEA 6000 605E 605F 6060 6061+                  dc.w    $6000, $605E, $605F, $6060, $6061, $6062, $6063, $6064, $685E, $6000
00178AFE                            ;Wings_Line_6:
00178AFE 6000 6000 6065 6066 6067+                  dc.w    $6000, $6000, $6065, $6066, $6067, $6867, $6866, $6865, $6000, $6000 
00178B12                            ;-------------------------------------------------------------------------------    
00178B12                            Menu_Palette:
00178B12                                            incbin  'data\menu\menu.pal'            
00178B92                            Menu_ClearScreen:
00178B92 4EF8 1380                                  jmp     ClearScreen
00178B96                            Menu_ShowVDPGraphics:                
00178B96 4EF8 14FA                                  jmp     ShowVDPGraphics                
00178B9A                            Menu_NemesisDec: 
00178B9A 4EF8 15AA                                  jmp     NemDec  
00178B9E                            Menu_LoadPLC2:      
00178B9E 4EF8 171C                                  jmp     LoadPLC2
00178BA2                            Menu_RunPLC:                    
00178BA2 4EF8 1756                                  jmp     RunPLC_RAM                           
00178BA6                            Menu_EnigmaDec
00178BA6 4EF8 1888                                  jmp     EniDec
00178BAA                            Menu_Pal_FadeTo:
00178BAA 4EF8 20CA                                  jmp     Pal_FadeTo
00178BAE                            Menu_Pal_FadeFrom:
00178BAE 4EF8 2180                                  jmp     Pal_FadeFrom     
00178BB2                            Menu_Play_Music:
00178BB2 4EF8 1470                                  jmp     PlaySound  
00178BB6                            Menu_PalLoad1:
00178BB6 4EF8 242E                                  jmp     PalLoad1
00178BBA                            Menu_DelayProgram:
00178BBA 4EF8 33A2                                  jmp     DelayProgram
00178BBE                            ;-------------------------------------------------------------------------------
00178BBE                            Menu_Font:
00178BBE                                            incbin  'data\menu\menufont.nem' 
00179132                            Level_Icons:
00179132                                            incbin  'data\menu\levelico.nem'   
0017A42E                            Menu_Mappings:
0017A42E                                            incbin  'data\menu\menubg.eni'
0017A5DA                            Icons_Mappings:
0017A5DA                                            incbin  'data\menu\iconsmap.eni'
0017A5F0                            Sonic_Miles_Spr:                                         
0017A5F0                                            incbin  'data\menu\soncmils.dat'   
0017AAF0                            ;===============================================================================
0017AAF0                            ; Menu do Sonic 2 No Sonic 1 reprogramado por Esrael L. G. Neto
0017AAF0                            ; [ Fim ]
0017AAF0                            ;===============================================================================
0017AAF0                            ;===============================================================================
0017AAF0                            ; end of 'ROM'
0017AAF0                            EndOfRom:
0017AAF0                            
0017AAF0                            
