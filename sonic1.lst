00000000                            ; /=========================================================================\
00000000                            ; �	This file is generated by The Interactive Disassembler (IDA)	    �
00000000                            ; �	Copyright (c) 2003 by DataRescue sa/nv,	<ida@datarescue.com>	    �
00000000                            ; \=========================================================================/
00000000                            ;
00000000                            ; Disassembly created by Hivebrain
00000000                            ; thanks to drx and Stealth
00000000                            
00000000                            ; Processor:	    68000
00000000                            ; Target Assembler: 680x0 Assembler in MRI compatible mode
00000000                            ; This file should be compiled with "as	-M"
00000000                            
00000000                            ; ===========================================================================
00000000                            		include	"Equz80.asm"
00000000                            ; ===========================================================================
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; ListEqu.exe generated from "Dual PCM\Z80.lst"
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000 =00000E80                  E_BuffStart = $E80 ; Start of the buffer (ALWAYS keep it multiples of 20)
00000000 =00000FFF                  E_BuffFinish = $FFF ; End of the buffer (keep in multiples of 100 - 1, e.g. 0FFF, 0EFF, 0DFF, 0CFF, etc)
00000000 =00000020                  E_BuffSize = $20 ; Number of bytes to buffer ahead of time (keep at POT) (part of it is done manually, so just changing this value won't do it all).
00000000 =00001000                  E_CueStart = $1000 ; Start of the cue, (ALWAYS keep in multiples of 10)
00000000 =00002000                  E_CueFinish = $2000 ; End of the cue (keep in multiples of 10)
00000000 =00000300                  E_CueSize = $300 ; Number of bytes for the 68k to cue ahead (keep in multiples of 100)
00000000 =00000000                  M_Flush = $0 
00000000 =00000000                  Start = $0 
00000000 =00000008                  Switch_PCM = $8 
00000000 =0000000E                  SD_NextBit = $E 
00000000 =0000001F                  CUPCM1_Switch = $1F 
00000000 =0000002D                  CUPCM1_SwStack = $2D 
00000000 =00000031                  CUPCM2_Switch = $31 
00000000 =0000003F                  CUPCM2_SwStack = $3F 
00000000 =00000047                  CU_Stack = $47 
00000000 =00000049                  InitRout = $49 
00000000 =000000E0                  CUPCM1_Reset = $E0 
00000000 =000000F8                  CUPCM1_Mute = $F8 
00000000 =0000011B                  CatchUp_Exx = $11B 
00000000 =0000011C                  CatchUp = $11C 
00000000 =0000011C                  CUPCM1_Switch0 = $11C 
00000000 =0000011D                  CUPCM1_Switch1 = $11D 
00000000 =0000011E                  CUPCM1_Switch2 = $11E 
00000000 =0000011F                  CUPCM1_Switch3 = $11F 
00000000 =00000120                  CUPCM1_Switch4 = $120 
00000000 =00000121                  CUPCM1_Switch5 = $121 
00000000 =00000122                  CUPCM1_Switch6 = $122 
00000000 =00000123                  CUPCM1_Switch7 = $123 
00000000 =00000124                  CUPCM1_Switch8 = $124 
00000000 =00000132                  CUPCM1_Load = $132 
00000000 =0000015B                  CUPCM1_ResRet = $15B 
00000000 =0000015E                  CUPCM1_MuteRet = $15E 
00000000 =0000015F                  CUPCM2_Switch0 = $15F 
00000000 =00000160                  CUPCM2_Switch1 = $160 
00000000 =00000161                  CUPCM2_Switch2 = $161 
00000000 =00000162                  CUPCM2_Switch3 = $162 
00000000 =00000163                  CUPCM2_Switch4 = $163 
00000000 =00000164                  CUPCM2_Switch5 = $164 
00000000 =00000165                  CUPCM2_Switch6 = $165 
00000000 =00000166                  CUPCM2_Switch7 = $166 
00000000 =00000167                  CUPCM2_Switch8 = $167 
00000000 =00000173                  CUPCM2_Load = $173 
00000000 =000001B8                  CUPCM2_ResRet = $1B8 
00000000 =000001BB                  CUPCM2_MuteRet = $1BB 
00000000 =000001BE                  CU_ResBufINRet = $1BE 
00000000 =000001C3                  CU_ResBufOTRet = $1C3 
00000000 =000001D2                  CUPCM1_RET = $1D2 
00000000 =000001D3                  CUPCM2_RET = $1D3 
00000000 =000001D6                  Flush = $1D6 
00000000 =000001D9                  FL_Return = $1D9 
00000000 =000001DD                  BM_ResBufOTRet = $1DD 
00000000 =000001DD                  FL_FlushSwitch = $1DD 
00000000 =000001E0                  CUPCM2_Mute = $1E0 
00000000 =00000202                  CUPCM2_Reset = $202 
00000000 =0000021A                  CU_ResetBufferIN = $21A 
00000000 =00000227                  CU_ResetBufferOUT = $227 
00000000 =00000234                  BM_ResetBufferOUT = $234 
00000000 =00000241                  CUPCM2_NewSample = $241 
00000000 =00000264                  CUPCM1_NewSample = $264 
00000000 =00000287                  FL_Loop = $287 
00000000 =0000028D                  BM_NextByte = $28D 
00000000 =000002BE                  Valid = $2BE 
00000000 =000002D7                  OutRange = $2D7 
00000000 =000002E0                  PCM1_SampCur = $2E0 
00000000 =000002E2                  PCM1_BankCur = $2E2 
00000000 =000002E3                  PCM2_SampCur = $2E3 
00000000 =000002E5                  PCM2_BankCur = $2E5 
00000000 =000002E6                  PCM1_Sample = $2E6 
00000000 =000002E8                  PCM1_Bank = $2E8 
00000000 =000002E9                  PCM2_Sample = $2E9 
00000000 =000002EB                  PCM2_Bank = $2EB 
00000000 =000002EC                  MuteSample = $2EC 
00000000 =000002EF                  YM_Access = $2EF 
00000000 =000002F0                  YM_Point68k = $2F0 
00000000 =000002F2                  YM_PointZ80 = $2F2 
00000000 =00001000                  YM_List = $1000 
00000000                            
00000000                            ; ===========================================================================
00000000                            ; ===========================================================================
00000000                            		include	"Macros.asm"
00000000 =FFFFD000                  v_objspace:	equ $FFFFD000	; object variable space ($40 bytes per object) ($2000 bytes)
00000000 =FFFFD000                  v_player:	equ v_objspace	; object variable space for Sonic ($40 bytes)
00000000 =FFFFF700                  v_screenposx:	equ $FFFFF700
00000000 =FFFFFC00                  v_objstate:	equ $FFFFFC00
00000000                            
00000000                            ; Object variables
00000000 =00000001                  obRender:	equ 1	; bitfield for x/y flip, display mode
00000000 =00000002                  obGfx:		equ 2	; palette line & VRAM setting (2 bytes)
00000000 =00000004                  obMap:		equ 4	; mappings address (4 bytes)
00000000 =00000008                  obX:		equ 8	; x-axis position (2-4 bytes)
00000000 =0000000A                  obScreenY:	equ $A	; y-axis position for screen-fixed items (2 bytes)
00000000 =0000000C                  obY:		equ $C	; y-axis position (2-4 bytes)
00000000 =00000010                  obVelX:		equ $10	; x-axis velocity (2 bytes)
00000000 =00000012                  obVelY:		equ $12	; y-axis velocity (2 bytes)
00000000 =00000014                  obInertia:	equ $14	; potential speed (2 bytes)
00000000 =00000016                  obHeight:	equ $16	; height/2
00000000 =00000017                  obWidth:	equ $17	; width/2
00000000 =00000018                  obPriority:	equ $18	; sprite stack priority -- 0 is front
00000000 =00000019                  obActWid:	equ $19	; action width
00000000 =0000001A                  obFrame:	equ $1A	; current frame displayed
00000000 =0000001B                  obAniFrame:	equ $1B	; current frame in animation script
00000000 =0000001C                  obAnim:		equ $1C	; current animation
00000000 =0000001D                  obNextAni:	equ $1D	; next animation
00000000 =0000001E                  obTimeFrame:	equ $1E	; time to next frame
00000000 =0000001F                  obDelayAni:	equ $1F	; time to delay animation
00000000 =00000020                  obColType:	equ $20	; collision response type
00000000 =00000021                  obColProp:	equ $21	; collision extra property
00000000 =00000022                  obStatus:	equ $22	; orientation or mode
00000000 =00000023                  obRespawnNo:	equ $23	; respawn list index number
00000000 =00000024                  obRoutine:	equ $24	; routine number
00000000 =00000025                  ob2ndRout:	equ $25	; secondary routine number
00000000 =00000026                  obAngle:	equ $26	; angle
00000000 =00000028                  obSubtype:	equ $28	; object subtype
00000000 =00000025                  obSolid:	equ ob2ndRout ; solid status flag
00000000                            out_of_range:	macro exit,pos
00000000                            		if (narg=2)
00000000                            		move.w	pos,d0		; get object position (if specified as not obX)
00000000                            		else
00000000                            		move.w	obX(a0),d0	; get object position
00000000                            		endc
00000000                            		andi.w	#$FF80,d0	; round down to nearest $80
00000000                            		move.w	(v_screenposx).w,d1 ; get screen position
00000000                            		subi.w	#128,d1
00000000                            		andi.w	#$FF80,d1
00000000                            		sub.w	d1,d0		; approx distance between object and screen
00000000                            		cmpi.w	#128+320+192,d0
00000000                            		bhi.\0	exit
00000000                            		endm
00000000                            ; ===========================================================================
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Macros
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            	; --- Alignment ---
00000000                            
00000000                            align		macro	Size,Value
00000000                            		dcb.b	Size-(*%Size),Value
00000000                            		endm
00000000                            
00000000                            	; --- Stop Z80 ---
00000000                            
00000000                            StopZ80		macro
00000000                            		move.w	#$0100,($A11100).l			; request Z80 stop (ON)
00000000                            		btst.b	#$00,($A11100).l			; has the Z80 stopped yet?
00000000                            		bne.s	*-$08					; if not, branch
00000000                            		endm
00000000                            
00000000                            	; --- Start Z80 ---
00000000                            
00000000                            StartZ80	macro
00000000                            		move.w	#$0000,($A11100).l			; request Z80 stop (OFF)
00000000                            		endm
00000000                            
00000000                            	; --- Turning DMA mode on ---
00000000                            
00000000                            Z80DMA_ON	macro
00000000                            		StopZ80
00000000                            		move.b	#(Flush&$FF),($A00000+FL_FlushSwitch+1).l	; change the "jp" instruction address to "Flush" routine loop
00000000                            		StartZ80
00000000                            		move.w	#$0180,d7				; set delay time (give z80 time to get out of the "CatchUp" routine...
00000000                            		nop						; ...and into the "Flush" routine, so the 68k doesn't start DMA before...
00000000                            		nop						; ...the z80 has a chance to stop reading from the window
00000000                            		dbf	d7,*-$04				; loop back and perform the nops again...
00000000                            		endm
00000000                            
00000000                            	; --- Turning DMA mode off ---
00000000                            
00000000                            Z80DMA_OFF	macro
00000000                            		StopZ80
00000000                            		move.b	#(CatchUp&$FF),($A00000+FL_FlushSwitch+1).l	; change the "jp" instruction address to "CatchUp" routine loop
00000000                            		StartZ80
00000000                            		endm
00000000                            
00000000                            
00000000                            	; --- Storing 68k address for Z80 as dc ---
00000000                            
00000000                            dcz80		macro	Sample
00000000                            		dc.b	(Sample&$FF)
00000000                            		dc.b	(((Sample>>$08)&$7F)|$80)
00000000                            		dc.b	((Sample&$7F8000)>>$0F)
00000000                            		endm
00000000                            
00000000                            ; =============
00000000                            ;Sonic 2 Macros
00000000                            ; =============
00000000                            
00000000                            align macro
00000000                            	cnop 0,\1
00000000                            	endm
00000000                            ; >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
00000000                            ; Equates section - Names for variables.
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; size variables - you'll get an informational error if you need to change these...
00000000                            ; they are all in units of bytes
00000000 =00002F00                  Size_of_DAC_samples =		$2F00
00000000 =00006174                  Size_of_SEGA_sound =		$6174
00000000 =00000F64                  Size_of_Snd_driver_guess =	$F64 ; approximate post-compressed size of the Z80 sound driver
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Object Status Table offsets (for everything between Object_RAM and Primary_Collision)
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; universally followed object conventions:
00000000 =00000001                  render_flags =		  1 ; bitfield ; bit 7 = onscreen flag, bit 0 = x mirror, bit 1 = y mirror, bit 2 = coordinate system
00000000 =00000002                  art_tile =		  2 ; and 3 ; start of sprite's art
00000000 =00000004                  mappings =		  4 ; and 5 and 6 and 7
00000000 =00000008                  x_pos =			  8 ; and 9 ... some objects use $A and $B as well when extra precision is required (see ObjectMove) ... for screen-space objects this is called x_pixel instead
00000000 =0000000C                  y_pos =			 $C ; and $D ... some objects use $E and $F as well when extra precision is required ... screen-space objects use y_pixel instead
00000000 =00000018                  priority =		$18 ; 0 = front
00000000 =00000019                  width_pixels =		$19
00000000 =0000001A                  mapping_frame =		$1A
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; conventions followed by most objects:
00000000 =00000010                  x_vel =			$10 ; and $11 ; horizontal velocity
00000000 =00000012                  y_vel =			$12 ; and $13 ; vertical velocity
00000000 =00000016                  y_radius =		$16 ; collision width / 2
00000000 =00000017                  x_radius =		$17 ; collision height / 2
00000000 =0000001B                  anim_frame =		$1B
00000000 =0000001C                  anim =			$1C
00000000 =0000001D                  next_anim =		$1D
00000000 =0000001E                  anim_frame_duration =	$1E
00000000 =00000022                  status =		$22 ; note: exact meaning depends on the object... for sonic/tails: bit 0: leftfacing. bit 1: inair. bit 2: spinning. bit 3: onobject. bit 4: rolljumping. bit 5: pushing. bit 6: underwater.
00000000 =00000024                  routine =		$24
00000000 =00000025                  routine_secondary =	$25
00000000 =00000026                  angle =			$26 ; angle about the z=0 axis (360 degrees = 256)
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; conventions followed by many objects but NOT sonic/tails:
00000000 =00000020                  collision_flags =	$20
00000000 =00000021                  collision_property =	$21
00000000 =00000023                  respawn_index =		$23
00000000 =00000028                  subtype =		$28
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; conventions specific to sonic/tails (Obj01, Obj02, and ObjDB):
00000000                            ; note: $1F, $20, and $21 are unused and available
00000000 =00000014                  inertia =		$14 ; and $15 ; directionless representation of speed... not updated in the air
00000000 =00000027                  flip_angle =		$27 ; angle about the x=0 axis (360 degrees = 256) (twist/tumble)
00000000 =00000028                  air_left =		$28
00000000 =00000029                  flip_turned =		$29 ; 0 for normal, 1 to invert flipping (it's a 180 degree rotation about the axis of Sonic's spine, so he stays in the same position but looks turned around)
00000000 =0000002A                  obj_control =		$2A ; 0 for normal, 1 for hanging or for resting on a flipper, $81 for going through CNZ/OOZ/MTZ tubes or stopped in CNZ cages or stoppers or flying if Tails
00000000 =0000002B                  status_secondary =	$2B
00000000 =0000002C                  flips_remaining =	$2C ; number of flip revolutions remaining
00000000 =0000002D                  flip_speed =		$2D ; number of flip revolutions per frame / 256
00000000 =0000002E                  move_lock =		$2E ; and $2F ; horizontal control lock, counts down to 0
00000000 =00000030                  invulnerable_time =	$30 ; and $31 ; time remaining until you stop blinking
00000000 =00000032                  invincibility_time =	$32 ; and $33 ; remaining
00000000 =00000034                  speedshoes_time =	$34 ; and $35 ; remaining
00000000 =00000036                  next_tilt =		$36 ; angle on ground in front of sprite
00000000 =00000037                  tilt =			$37 ; angle on ground
00000000 =00000038                  stick_to_convex =	$38 ; 0 for normal, 1 to make Sonic stick to convex surfaces like the rotating discs in Sonic 1 and 3 (unused in Sonic 2 but fully functional)
00000000 =00000039                  spindash_flag =		$39 ; 0 for normal, 1 for charging a spindash or forced rolling
00000000 =0000003A                  spindash_counter =	$3A ; and $3B
00000000 =0000003C                  jumping =		$3C
00000000 =0000003D                  interact =		$3D ; RAM address of the last object Sonic stood on, minus $FFFFB000 and divided by $40
00000000 =0000003E                  layer =			$3E ; collision plane, track switching...
00000000 =0000003F                  layer_plus =		$3F ; always same as layer+1 ?? used for collision somehow
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; conventions followed by several objects but NOT sonic/tails:
00000000 =0000000A                  y_pixel =		2+x_pos ; and 3+x_pos ; y coordinate for objects using screen-space coordinate system
00000000 =00000008                  x_pixel =		x_pos ; and 1+x_pos ; x coordinate for objects using screen-space coordinate system
00000000 =0000003E                  parent =		$3E ; and $3F ; address of object that owns or spawned this one, if applicable
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; unknown or inconsistently used offsets that are not applicable to sonic/tails:
00000000                            ; (provided because rearrangement of the above values sometimes requires making space in here too)
00000000 =0000000A                  objoff_A =		2+x_pos ; note: x_pos can be 4 bytes, but sometimes the last 2 bytes of x_pos are used for other unrelated things
00000000 =0000000B                  objoff_B =		3+x_pos
00000000 =0000000E                  objoff_E =		2+y_pos
00000000 =0000000F                  objoff_F =		3+y_pos
00000000 =00000014                  objoff_14 =		$14
00000000 =00000015                  objoff_15 =		$15
00000000 =0000001F                  objoff_1F =		$1F
00000000 =00000027                  objoff_27 =		$27
00000000 =00000028                  objoff_28 =		$28 ; overlaps subtype, but a few objects use it for other things anyway
00000000 =00000029                  objoff_29 =		$29
00000000 =0000002A                  objoff_2A =		$2A
00000000 =0000002B                  objoff_2B =		$2B
00000000 =0000002C                  objoff_2C =		$2C
00000000 =0000002D                  objoff_2D =		$2D
00000000 =0000002E                  objoff_2E =		$2E
00000000 =0000002F                  objoff_2F =		$2F
00000000 =00000030                  objoff_30 =		$30
00000000 =00000031                  objoff_31 =		$31
00000000 =00000032                  objoff_32 =		$32
00000000 =00000033                  objoff_33 =		$33
00000000 =00000034                  objoff_34 =		$34
00000000 =00000035                  objoff_35 =		$35
00000000 =00000036                  objoff_36 =		$36
00000000 =00000037                  objoff_37 =		$37
00000000 =00000038                  objoff_38 =		$38
00000000 =00000039                  objoff_39 =		$39
00000000 =0000003A                  objoff_3A =		$3A
00000000 =0000003B                  objoff_3B =		$3B
00000000 =0000003C                  objoff_3C =		$3C
00000000 =0000003D                  objoff_3D =		$3D
00000000 =0000003E                  objoff_3E =		$3E
00000000 =0000003F                  objoff_3F =		$3F
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; property of all objects:
00000000 =00000040                  next_object =		$40 ; the size of an object
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; RAM variables
00000000 =FFFF0000                  RAM_Start =			$FFFF0000
00000000 =FFFF0000                  Metablock_Table =		$FFFF0000
00000000 =FFFF8000                  Level_Layout =			$FFFF8000
00000000 =FFFF9000                  Block_Table =			$FFFF9000
00000000 =FFFFAA00                  Decomp_Buffer =			$FFFFAA00
00000000 =FFFFAC00                  Sprite_Table_Input = 		$FFFFAC00 ; in custom format before being converted and stored in Sprite_Table/Sprite_Table_2
00000000 =FFFFB000                  Object_RAM =			$FFFFB000 ; through $FFFFD5FF
00000000 =FFFFB000                  MainCharacter =			$FFFFB000 ; first object (usually Sonic except in a Tails Alone game)
00000000 =FFFFB040                  Sidekick =			$FFFFB040 ; second object (Tails in a Sonic and Tails game)
00000000 =FFFFD000                  Tails_Tails =			$FFFFD000 ; address of the Tail's Tails object
00000000 =FFFFD100                  Sonic_Dust =			$FFFFD100
00000000 =FFFFD140                  Tails_Dust =			$FFFFD140
00000000                            
00000000 =FFFFD000                  PNT_Buffer =			$FFFFD000 ; in special stage
00000000 =FFFFD600                  Primary_Collision =		$FFFFD600
00000000 =FFFFD700                  Horiz_Scroll_Buf_2 =		$FFFFD700 ; in special stage
00000000 =FFFFD900                  Secondary_Collision =		$FFFFD900
00000000 =FFFFDC00                  VDP_Command_Buffer =		$FFFFDC00 ; stores VDP commands to issue the next time ProcessDMAQueue is called
00000000 =FFFFDCFC                  VDP_Command_Buffer_Slot =	$FFFFDCFC ; stores the address of the next open slot for a queued VDP command
00000000 =FFFFDD00                  Sprite_Table_2 =		$FFFFDD00 ; Sprite attribute table buffer for the bottom split screen in 2-player mode
00000000 =FFFFE000                  Horiz_Scroll_Buf =		$FFFFE000
00000000 =FFFFE400                  Sonic_Stat_Record_Buf =		$FFFFE400
00000000 =FFFFE500                  Sonic_Pos_Record_Buf =		$FFFFE500
00000000 =FFFFE600                  Tails_Pos_Record_Buf =		$FFFFE600
00000000 =FFFFE800                  Ring_Positions =		$FFFFE800
00000000 =FFFFEE00                  Camera_RAM =			$FFFFEE00
00000000 =FFFFEE00                  Camera_X_pos =			$FFFFEE00
00000000 =FFFFEE04                  Camera_Y_pos =			$FFFFEE04
00000000 =FFFFEEC6                  Camera_Max_Y_pos =		$FFFFEEC6
00000000 =FFFFEEC8                  Camera_Min_X_pos =		$FFFFEEC8
00000000 =FFFFEECA                  Camera_Max_X_pos =		$FFFFEECA
00000000 =FFFFEECC                  Camera_Min_Y_pos =		$FFFFEECC
00000000 =FFFFEECE                  Camera_Max_Y_pos_now =		$FFFFEECE ; was "Camera_max_scroll_spd"...
00000000 =FFFFEED2                  Sonic_Pos_Record_Index =	$FFFFEED2 ; into Sonic_Pos_Record_Buf and Sonic_Stat_Record_Buf
00000000 =FFFFEED6                  Tails_Pos_Record_Index =	$FFFFEED6 ; into Tails_Pos_Record_Buf
00000000 =FFFFEED8                  Camera_Y_pos_bias =		$FFFFEED8 ; added to y position for lookup/lookdown, $60 is center
00000000 =FFFFEEDA                  Camera_Y_pos_bias_2P =		$FFFFEEDA ; for Tails
00000000 =FFFFEEDF                  Dynamic_Resize_Routine =	$FFFFEEDF
00000000 =FFFFEEF8                  Tails_Min_X_pos =		$FFFFEEF8
00000000 =FFFFEEFA                  Tails_Max_X_pos =		$FFFFEEFA
00000000 =FFFFEEFE                  Tails_Max_Y_pos =		$FFFFEEFE
00000000                            
00000000 =FFFFF000                  Underwater_palette_2 = 		$FFFFF000 ; not sure what it's used for but it's only used when there's water
00000000 =FFFFF080                  Underwater_palette = 		$FFFFF080 ; main palette for underwater parts of the screen
00000000 =FFFFF0E0                  Underwater_palette_line4 = 	$FFFFF0E0
00000000                            
00000000 =FFFFF600                  Game_Mode =			$FFFFF600 ; 1 byte ; see GameModesArray (master level trigger, Mstr_Lvl_Trigger)
00000000 =FFFFF602                  Ctrl_1_Logical =		$FFFFF602 ; 2 bytes
00000000 =FFFFF602                  Ctrl_1_Held_Logical =		$FFFFF602 ; 1 byte
00000000 =FFFFF603                  Ctrl_1_Press_Logical =		$FFFFF603 ; 1 byte
00000000 =FFFFF604                  Ctrl_1 =			$FFFFF604 ; 2 bytes
00000000 =FFFFF604                  Ctrl_1_Held =			$FFFFF604 ; 1 byte ; (pressed and held were switched around before)
00000000 =FFFFF605                  Ctrl_1_Press =			$FFFFF605 ; 1 byte
00000000 =FFFFF606                  Ctrl_2 =			$FFFFF606 ; 2 bytes
00000000 =FFFFF606                  Ctrl_2_Held =			$FFFFF606 ; 1 byte
00000000 =FFFFF607                  Ctrl_2_Press =			$FFFFF607 ; 1 byte
00000000 =FFFFF614                  Demo_Time_left =		$FFFFF614 ; 2 bytes
00000000                            
00000000 =FFFFF616                  Vscroll_Factor =		$FFFFF616
00000000 =FFFFF624                  Hint_counter_reserve =		$FFFFF624 ; Must contain a VDP command word, preferably a write to register $0A. Executed every V-INT.
00000000 =FFFFF62A                  Delay_Time =			$FFFFF62A ; number of frames to delay the game
00000000 =FFFFF636                  RNG_seed =			$FFFFF636 ; used for random number generation
00000000 =FFFFF63A                  Game_paused =			$FFFFF63A
00000000 =FFFFF640                  DMA_data_thunk =		$FFFFF640 ; Used as a RAM holder for the final DMA command word. Data will NOT be preserved across V-INTs, so consider this space reserved.
00000000                            
00000000 =FFFFF646                  Water_Level_1 =			$FFFFF646
00000000 =FFFFF648                  Water_Level_2 =			$FFFFF648
00000000 =FFFFF64A                  Water_Level_3 =			$FFFFF64A
00000000 =FFFFF64D                  Water_routine =			$FFFFF64D
00000000 =FFFFF64E                  Water_move =			$FFFFF64E
00000000 =FFFFF64C                  Water_on =			$FFFFF64C ; is set based on Water_flag
00000000 =FFFFF650                  New_Water_Level =		$FFFFF650
00000000 =FFFFF652                  Water_change_speed =		$FFFFF652
00000000 =FFFFF65E                  Palette_frame_count =		$FFFFF65E
00000000                            
00000000 =FFFFF66A                  Ctrl_2_Logical =		$FFFFF66A ; 2 bytes
00000000 =FFFFF66A                  Ctrl_2_Held_Logical =		$FFFFF66A ; 1 byte
00000000 =FFFFF66B                  Ctrl_2_Press_Logical =		$FFFFF66B ; 1 byte
00000000 =FFFFF66C                  Sonic_Look_delay_counter = 	$FFFFF66C ; 2 bytes
00000000 =FFFFF66E                  Tails_Look_delay_counter = 	$FFFFF66E ; 2 bytes
00000000 =FFFFF670                  Super_Sonic_frame_count =	$FFFFF670
00000000 =FFFFF680                  Plc_Buffer =			$FFFFF680 ; Pattern load queue
00000000                            
00000000 =FFFFF700                  Misc_Variables =		$FFFFF700
00000000                            
00000000                            ; extra variables for the second player (CPU) in 1-player mode
00000000 =FFFFF702                  Tails_control_counter =		$FFFFF702 ; how long until the CPU takes control
00000000 =FFFFF704                  Tails_respawn_counter =		$FFFFF704
00000000 =FFFFF708                  Tails_CPU_routine =		$FFFFF708
00000000 =FFFFF70A                  Tails_CPU_target_x =		$FFFFF70A
00000000 =FFFFF70C                  Tails_CPU_target_y =		$FFFFF70C
00000000 =FFFFF70E                  Tails_interact_ID =		$FFFFF70E ; object ID of last object stood on
00000000                            
00000000 =FFFFF711                  Level_started_flag =		$FFFFF711
00000000 =FFFFF71A                  CNZ_Bumper_routine =		$FFFFF71A
00000000 =FFFFF72C                  Dirty_flag =			$FFFFF72C ; if whole screen needs to redraw
00000000 =FFFFF730                  Water_flag =			$FFFFF730 ; if the level has water or oil
00000000                            
00000000 =FFFFF760                  Sonic_top_speed =		$FFFFF760
00000000 =FFFFF762                  Sonic_acceleration =		$FFFFF762
00000000 =FFFFF764                  Sonic_deceleration =		$FFFFF764
00000000 =FFFFF76C                  Obj_placement_routine =		$FFFFF76C
00000000 =FFFFF770                  Obj_load_addr_0 =		$FFFFF770
00000000 =FFFFF774                  Obj_load_addr_1 =		$FFFFF774
00000000 =FFFFF778                  Obj_load_addr_2 =		$FFFFF778
00000000 =FFFFF77C                  Obj_load_addr_3 =		$FFFFF77C
00000000 =FFFFF790                  Demo_button_index =		$FFFFF790 ; index into button press demo data, for player 1
00000000 =FFFFF792                  Demo_press_counter =		$FFFFF792 ; frames remaining until next button press, for player 1
00000000 =FFFFF732                  Demo_button_index_2P =		$FFFFF732 ; index into button press demo data, for player 2
00000000 =FFFFF734                  Demo_press_counter_2P =		$FFFFF734 ; frames remaining until next button press, for player 2
00000000 =FFFFF796                  Collision_addr =		$FFFFF796
00000000 =FFFFF7AA                  Current_Boss_ID =		$FFFFF7AA
00000000 =FFFFF7CC                  Control_Locked =		$FFFFF7CC
00000000 =FFFFF7D0                  Chain_Bonus_counter =		$FFFFF7D0 ; counts up when you destroy things that give points, resets when you touch the ground
00000000 =FFFFF7D2                  Bonus_Countdown_1 =		$FFFFF7D2 ; level results time bonus or special stage sonic ring bonus
00000000 =FFFFF7D4                  Bonus_Countdown_2 =		$FFFFF7D4 ; level results ring bonus or special stage tails ring bonus
00000000 =FFFFF7D6                  Update_Bonus_score =		$FFFFF7D6
00000000 =FFFFF7DA                  Camera_X_pos_coarse =		$FFFFF7DA ; (Camera_X_pos - 128) / 256
00000000                            
00000000 =FFFFF800                  Sprite_Table =			$FFFFF800 ; Sprite attribute table buffer
00000000                            
00000000 =FFFFFB00                  Normal_palette =		$FFFFFB00
00000000 =FFFFFB20                  Normal_palette_line2 =		$FFFFFB20
00000000 =FFFFFB40                  Normal_palette_line3 =		$FFFFFB40
00000000 =FFFFFB60                  Normal_palette_line4 =		$FFFFFB60
00000000 =FFFFFB80                  Second_palette =		$FFFFFB80
00000000 =FFFFFBA0                  Second_palette_line2 =		$FFFFFBA0
00000000 =FFFFFBC0                  Second_palette_line3 =		$FFFFFBC0
00000000 =FFFFFBE0                  Second_palette_line4 =		$FFFFFBE0
00000000                            
00000000 =FFFFFC00                  Object_Respawn_Table =		$FFFFFC00
00000000 =FFFFFE00                  System_Stack =			$FFFFFE00
00000000 =FFFFFE02                  Level_Inactive_flag = 		$FFFFFE02 ; (2 bytes)
00000000 =FFFFFE04                  Timer_frames =			$FFFFFE04 ; (2 bytes)
00000000 =FFFFFE06                  Debug_object =			$FFFFFE06
00000000 =FFFFFE08                  Debug_placement_mode =		$FFFFFE08
00000000 =FFFFFE10                  Current_ZoneAndAct =		$FFFFFE10 ; 2 bytes
00000000 =FFFFFE10                  Current_Zone =			$FFFFFE10 ; 1 byte
00000000 =FFFFFE11                  Current_Act =			$FFFFFE11 ; 1 byte
00000000 =FFFFFE12                  Life_count =			$FFFFFE12
00000000 =FFFFFE16                  Current_Special_Stage =		$FFFFFE16
00000000 =FFFFFE18                  Continue_count =		$FFFFFE18
00000000 =FFFFFE19                  Super_Sonic_flag =		$FFFFFE19
00000000 =FFFFFE1A                  Time_Over_flag =		$FFFFFE1A
00000000 =FFFFFE1B                  Extra_life_flags =		$FFFFFE1B
00000000                            
00000000                            ; If set, the respective HUD element will be updated.
00000000 =FFFFFE1C                  Update_HUD_lives =		$FFFFFE1C
00000000 =FFFFFE1D                  Update_HUD_rings =		$FFFFFE1D
00000000 =FFFFFE1E                  Update_HUD_timer =		$FFFFFE1E
00000000 =FFFFFE1F                  Update_HUD_score =		$FFFFFE1F
00000000                            
00000000 =FFFFFE20                  Ring_count =			$FFFFFE20 ; 2 bytes
00000000 =FFFFFE22                  Timer =				$FFFFFE22 ; 4 bytes
00000000 =FFFFFE22                  Timer_minute_word =		$FFFFFE22 ; 2 bytes
00000000 =FFFFFE23                  Timer_minute =			$FFFFFE23 ; 1 byte
00000000 =FFFFFE24                  Timer_second =			$FFFFFE24 ; 1 byte
00000000 =FFFFFE25                  Timer_centisecond =		$FFFFFE25 ; 1 byte
00000000 =FFFFFE26                  Score =				$FFFFFE26 ; 4 bytes
00000000 =FFFFFE30                  Last_star_pole_hit =		$FFFFFE30 ; 1 byte -- max activated starpole ID in this act
00000000                            
00000000 =FFFFFE31                  Saved_Last_star_pole_hit =	$FFFFFE31
00000000 =FFFFFE32                  Saved_x_pos =			$FFFFFE32
00000000 =FFFFFE34                  Saved_y_pos =			$FFFFFE34
00000000 =FFFFFE36                  Saved_Ring_count =		$FFFFFE36
00000000 =FFFFFE38                  Saved_Timer =			$FFFFFE38
00000000 =FFFFFE3C                  Saved_art_tile =		$FFFFFE3C
00000000 =FFFFFE3E                  Saved_layer =			$FFFFFE3E
00000000 =FFFFFE40                  Saved_Camera_X_pos =		$FFFFFE40
00000000 =FFFFFE42                  Saved_Camera_Y_pos =		$FFFFFE42
00000000 =FFFFFE50                  Saved_Water_Level =		$FFFFFE50
00000000 =FFFFFE52                  Saved_Water_routine =		$FFFFFE52
00000000 =FFFFFE53                  Saved_Water_move =		$FFFFFE53
00000000 =FFFFFE54                  Saved_Extra_life_flags =	$FFFFFE54
00000000 =FFFFFE55                  Saved_Extra_life_flags_2P =	$FFFFFE55
00000000 =FFFFFE56                  Saved_Camera_Max_Y_pos =	$FFFFFE56
00000000 =FFFFFE58                  Saved_Dynamic_Resize_Routine =	$FFFFFE58
00000000                            
00000000 =FFFFFEA0                  Logspike_anim_counter =		$FFFFFEA0
00000000 =FFFFFEA1                  Logspike_anim_frame =		$FFFFFEA1
00000000 =FFFFFEA2                  Rings_anim_counter =		$FFFFFEA2
00000000 =FFFFFEA3                  Rings_anim_frame =		$FFFFFEA3
00000000 =FFFFFEA4                  Unknown_anim_counter =		$FFFFFEA4 ; I think this was $FFFFFEC4 in the alpha
00000000 =FFFFFEA5                  Unknown_anim_frame =		$FFFFFEA5
00000000 =FFFFFEA6                  Ring_spill_anim_counter =	$FFFFFEA6 ; scattered rings
00000000 =FFFFFEA7                  Ring_spill_anim_frame =		$FFFFFEA7
00000000 =FFFFFEA8                  Ring_spill_anim_accum =		$FFFFFEA8
00000000                            
00000000                            ; values for the second player (some of these only apply to 2-player games)
00000000 =FFFFFEC0                  Tails_top_speed =		$FFFFFEC0 ; Tails_max_vel
00000000 =FFFFFEC2                  Tails_acceleration =		$FFFFFEC2
00000000 =FFFFFEC4                  Tails_deceleration =		$FFFFFEC4
00000000 =FFFFFEC6                  Life_count_2P =			$FFFFFEC6
00000000 =FFFFFEC7                  Extra_life_flags_2P =		$FFFFFEC7
00000000 =FFFFFEC8                  Update_HUD_lives_2P =		$FFFFFEC8
00000000 =FFFFFEC9                  Update_HUD_rings_2P =		$FFFFFEC9
00000000 =FFFFFECA                  Update_HUD_timer_2P =		$FFFFFECA
00000000 =FFFFFECB                  Update_HUD_score_2P =		$FFFFFECB ; mostly unused
00000000 =FFFFFECC                  Time_Over_flag_2P =		$FFFFFECC
00000000 =FFFFFED0                  Ring_count_2P =			$FFFFFED0
00000000 =FFFFFED2                  Timer_2P =			$FFFFFED2 ; 4 bytes
00000000 =FFFFFED2                  Timer_minute_word_2P =		$FFFFFED2 ; 2 bytes
00000000 =FFFFFED3                  Timer_minute_2P =		$FFFFFED3 ; 1 byte
00000000 =FFFFFED4                  Timer_second_2P =		$FFFFFED4 ; 1 byte
00000000 =FFFFFED5                  Timer_centisecond_2P =		$FFFFFED5 ; 1 byte
00000000 =FFFFFED6                  Score_2P =			$FFFFFED6
00000000 =FFFFFEE0                  Last_star_pole_hit_2P =		$FFFFFEE0
00000000                            
00000000 =FFFFFEE1                  Saved_Last_star_pole_hit_2P =	$FFFFFEE1
00000000 =FFFFFEE2                  Saved_x_pos_2P =		$FFFFFEE2
00000000 =FFFFFEE4                  Saved_y_pos_2P =		$FFFFFEE4
00000000 =FFFFFEE6                  Saved_Ring_count_2P =		$FFFFFEE6
00000000 =FFFFFEE8                  Saved_Timer_2P =		$FFFFFEE8
00000000 =FFFFFEEC                  Saved_art_tile_2P =		$FFFFFEEC
00000000 =FFFFFEEE                  Saved_layer_2P =		$FFFFFEEE
00000000                            
00000000 =FFFFFEF8                  Loser_Time_Left =		$FFFFFEF8
00000000 =FFFFFF10                  Results_Screen_2P =		$FFFFFF10 ; 0 = act, 1 = zone, 2 = game, 3 = SS, 4 = SS all
00000000 =FFFFFF20                  Results_Data_2P =		$FFFFFF20 ; $18 bytes
00000000 =FFFFFF20                  EHZ_Results_2P =		$FFFFFF20 ; 6 bytes
00000000 =FFFFFF26                  MCZ_Results_2P =		$FFFFFF26 ; 6 bytes
00000000 =FFFFFF2C                  CNZ_Results_2P =		$FFFFFF2C ; 6 bytes
00000000 =FFFFFF32                  SS_Results_2P =			$FFFFFF32 ; 6 bytes
00000000 =FFFFFF38                  SS_Total_Won =			$FFFFFF38 ; 2 bytes (player 1 then player 2)
00000000 =FFFFFF40                  Perfect_rings_left =		$FFFFFF40
00000000 =FFFFFF70                  Player_mode =			$FFFFFF70 ; 0 = Sonic and Tails, 1 = Sonic, 2 = Tails
00000000 =FFFFFF72                  Player_option =			$FFFFFF72 ; 0 = Sonic and Tails, 1 = Sonic, 2 = Tails
00000000                            
00000000 =FFFFFF74                  Two_player_items =		$FFFFFF74
00000000 =FFFFFF82                  Level_select_zone =		$FFFFFF82
00000000 =FFFFFF84                  Sound_test_sound =		$FFFFFF84
00000000 =FFFFFF86                  Title_screen_option =		$FFFFFF86
00000000 =FFFFFF88                  Current_Zone_2P =		$FFFFFF88
00000000 =FFFFFF89                  Current_Act_2P =		$FFFFFF89
00000000 =FFFFFF8A                  Two_player_mode_copy =		$FFFFFF8A
00000000 =FFFFFF8C                  Options_menu_box =		$FFFFFF8C
00000000 =FFFFFF90                  Level_Music =			$FFFFFF90
00000000 =FFFFFF98                  Game_Over_2P =			$FFFFFF98
00000000 =FFFFFFB0                  Got_Emerald =			$FFFFFFB0
00000000 =FFFFFFB1                  Emerald_count =			$FFFFFFB1
00000000 =FFFFFFB2                  Got_Emeralds_array =		$FFFFFFB2 ; 7 bytes
00000000 =FFFFFFC0                  Next_Extra_life_score =		$FFFFFFC0
00000000 =FFFFFFC4                  Next_Extra_life_score_2P =	$FFFFFFC4
00000000 =FFFFFFC8                  Level_Has_Signpost =		$FFFFFFC8 ; 1 byte ; 1 = signpost, 0 = boss or nothing
00000000 =FFFFFFD0                  Level_select_flag =		$FFFFFFD0
00000000 =FFFFFFD4                  Correct_cheat_entries =		$FFFFFFD4
00000000 =FFFFFFD6                  Correct_cheat_entries_2 =	$FFFFFFD6 ; for 14 continues or 7 emeralds codes
00000000 =FFFFFFD8                  Two_player_mode =		$FFFFFFD8 ; flag (0 for main game)
00000000                            
00000000                            ; Values in these variables are passed to the sound driver during V-INT.
00000000                            ; They use a playlist index, not a sound test index.
00000000 =FFFFFFE0                  Music_to_play =			$FFFFFFE0
00000000 =FFFFFFE1                  SFX_to_play =			$FFFFFFE1 ; normal
00000000 =FFFFFFE2                  SFX_to_play_2 =			$FFFFFFE2 ; alternating stereo
00000000 =FFFFFFE4                  Music_to_play_2 =		$FFFFFFE4 ; alternate (higher priority?) slot
00000000                            
00000000 =FFFFFFF0                  Demo_mode_flag =		$FFFFFFF0 ; 1 if a demo is playing (2 bytes)
00000000 =FFFFFFF2                  Demo_number =			$FFFFFFF2 ; which demo will play next (2 bytes)
00000000 =FFFFFFF8                  Graphics_Flags =		$FFFFFFF8 ; misc. bitfield
00000000 =FFFFFFFC                  Checksum_fourcc =		$FFFFFFFC ; (4 bytes)
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; VDP addressses
00000000 =00C00000                  VDP_data_port =			$C00000 ; (8=r/w, 16=r/w)
00000000 =00C00004                  VDP_control_port =		$C00004 ; (8=r/w, 16=r/w)
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Z80 addresses
00000000 =00A00000                  Z80_RAM =			$A00000 ; start of Z80 RAM
00000000 =00A02000                  Z80_RAM_End =			$A02000 ; end of non-reserved Z80 RAM
00000000 =00A10001                  Z80_Version =			$A10001
00000000 =00A10002                  Z80_Port_1_Data =		$A10002
00000000 =00A10008                  Z80_Port_1_Control =		$A10008
00000000 =00A1000A                  Z80_Port_2_Control =		$A1000A
00000000 =00A1000C                  Z80_Expansion_Control =		$A1000C
00000000 =00A11100                  Z80_Bus_Request =		$A11100
00000000 =00A11200                  Z80_Reset =			$A11200
00000000                            
00000000 =00A14000                  Security_Addr =			$A14000	
00000000 =00A14000                  Security_Addr =			$A14000	
00000000                            StartOfRom:
00000000 00FF FE00 0000 0000 0000+  Vectors:    dc.l $FFFE00, EntryPoint, BusError, AddressError
00000010 0000 0000 0000 0000 0000+          dc.l IllegalInstr, ZeroDivide, ChkInstr, TrapvInstr
00000020 0000 0000 0000 0000 0000+          dc.l PrivilegeViol, Trace, Line1010Emu, Line1111Emu
00000030 0000 0000 0000 0000 0000+          dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000040 0000 0000 0000 0000 0000+          dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000050 0000 0000 0000 0000 0000+          dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000060 0000 0000 0000 0000 0000+          dc.l ErrorExcept, ErrorTrap, ErrorTrap, ErrorTrap
00000070 0000 0000 0000 0000 0000+          dc.l PalToCRAM,    ErrorTrap, loc_B10, ErrorTrap
00000080 0000 0000 0000 0000 0000+          dc.l ErrorTrap, ErrorTrap, ErrorTrap, ErrorTrap
00000090 0000 0000 0000 0000 0000+          dc.l ErrorTrap, ErrorTrap, ErrorTrap, ErrorTrap
000000A0 0000 0000 0000 0000 0000+          dc.l ErrorTrap, ErrorTrap, ErrorTrap, ErrorTrap
000000B0 0000 0000 0000 0000 0000+          dc.l ErrorTrap, ErrorTrap, ErrorTrap, ErrorTrap
000000C0 0000 0000 0000 0000 0000+          dc.l ErrorTrap, ErrorTrap, ErrorTrap, ErrorTrap
000000D0 0000 0000 0000 0000 0000+          dc.l ErrorTrap, ErrorTrap, ErrorTrap, ErrorTrap
000000E0 0000 0000 0000 0000 0000+          dc.l ErrorTrap, ErrorTrap, ErrorTrap, ErrorTrap
000000F0 0000 0000 0000 0000 0000+          dc.l ErrorTrap, ErrorTrap, ErrorTrap, ErrorTrap
00000100                            
00000100 5345 4741 204D 4547 4120+  Console:	dc.b 'SEGA MEGA DRIVE ' ; Hardware system ID
00000110 2843 2953 4547 4120 3139+  Date:		dc.b '(C)SEGA 1991.APR' ; Release date
00000120 534F 4E49 4320 5448 4520+  Title_Local:	dc.b 'SONIC THE               HEDGEHOG 4 EPISODE I    ' ; Domestic name
00000150 534F 4E49 4320 5448 4520+  Title_Int:	dc.b 'SONIC THE               HEDGEHOG 4 EPISODE I    ' ; International name
00000180 474D 2030 3030 3031 3030+  Serial:		dc.b 'GM 00001009-00'   ; Serial/version number
0000018E 0000                       Checksum:	dc.w 0
00000190 4A20 2020 2020 2020 2020+  		dc.b 'J               ' ; I/O support
000001A0 0000 0000                  RomStartLoc:	dc.l StartOfRom		; ROM start
000001A4 0000 0000                  RomEndLoc:	dc.l EndOfRom-1		; ROM end
000001A8 00FF 0000                  RamStartLoc:	dc.l $FF0000		; RAM start
000001AC 00FF FFFF                  RamEndLoc:	dc.l $FFFFFF		; RAM end
000001B0 2020 2020                  SRAMSupport:	dc.l $20202020		; change to $5241E020 to create	SRAM
000001B4 2020 2020                  		dc.l $20202020		; SRAM start
000001B8 2020 2020                  		dc.l $20202020		; SRAM end
000001BC 2020 2020 2020 2020 2020+  Notes:		dc.b '                                                    '
000001F0 4A55 4520 2020 2020 2020+  Region:		dc.b 'JUE             ' ; Region
00000200                            
00000200                            ; ===========================================================================
00000200                            
00000200                            ErrorTrap:
00000200 4E71                       		nop	
00000202 4E71                       		nop	
00000204 60FA                       		bra.s	ErrorTrap
00000206                            ; ===========================================================================
00000206                            
00000206                            EntryPoint:
00000206 4AB9 00A1 0008             		tst.l	($A10008).l	; test port A control
0000020C 6600                       		bne.s	PortA_Ok
0000020E 4A79 00A1 000C             		tst.w	($A1000C).l	; test port C control
00000214                            
00000214                            PortA_Ok:
00000214 6600                       		bne.s	PortC_Ok
00000216 4BFA 0000                  		lea	SetupValues(pc),a5
0000021A 4C9D 00E0                  		movem.w	(a5)+,d5-d7
0000021E 4CDD 1F00                  		movem.l	(a5)+,a0-a4
00000222 1029 EF01                  		move.b	-$10FF(a1),d0	; get hardware version
00000226 0200 000F                  		andi.b	#$F,d0
0000022A 6700                       		beq.s	SkipSecurity
0000022C 237C 5345 4741 2F00        		move.l	#'SEGA',$2F00(a1)
00000234                            
00000234                            SkipSecurity:
00000234 3014                       		move.w	(a4),d0		; check	if VDP works
00000236 7000                       		moveq	#0,d0
00000238 2C40                       		movea.l	d0,a6
0000023A 4E66                       		move.l	a6,usp		; set usp to $0
0000023C 7217                       		moveq	#$17,d1
0000023E                            
0000023E                            VDPInitLoop:
0000023E 1A1D                       		move.b	(a5)+,d5	; add $8000 to value
00000240 3885                       		move.w	d5,(a4)		; move value to	VDP register
00000242 DA47                       		add.w	d7,d5		; next register
00000244 51C9 FFF8                  		dbf	d1,VDPInitLoop
00000248 289D                       		move.l	(a5)+,(a4)
0000024A 3680                       		move.w	d0,(a3)		; clear	the screen
0000024C 3287                       		move.w	d7,(a1)		; stop the Z80
0000024E 3487                       		move.w	d7,(a2)		; reset	the Z80
00000250                            
00000250                            WaitForZ80:
00000250 0111                       		btst	d0,(a1)		; has the Z80 stopped?
00000252 66FC                       		bne.s	WaitForZ80	; if not, branch
00000254 7425                       		moveq	#$25,d2
00000256                            
00000256                            Z80InitLoop:
00000256 10DD                       		move.b	(a5)+,(a0)+
00000258 51CA FFFC                  		dbf	d2,Z80InitLoop
0000025C 3480                       		move.w	d0,(a2)
0000025E 3280                       		move.w	d0,(a1)		; start	the Z80
00000260 3487                       		move.w	d7,(a2)		; reset	the Z80
00000262                            
00000262                            ClrRAMLoop:
00000262 2D00                       		move.l	d0,-(a6)
00000264 51CE FFFC                  		dbf	d6,ClrRAMLoop	; clear	the entire RAM
00000268 289D                       		move.l	(a5)+,(a4)	; set VDP display mode and increment
0000026A 289D                       		move.l	(a5)+,(a4)	; set VDP to CRAM write
0000026C 761F                       		moveq	#$1F,d3
0000026E                            
0000026E                            ClrCRAMLoop:
0000026E 2680                       		move.l	d0,(a3)
00000270 51CB FFFC                  		dbf	d3,ClrCRAMLoop	; clear	the CRAM
00000274 289D                       		move.l	(a5)+,(a4)
00000276 7813                       		moveq	#$13,d4
00000278                            
00000278                            ClrVDPStuff:
00000278 2680                       		move.l	d0,(a3)
0000027A 51CC FFFC                  		dbf	d4,ClrVDPStuff
0000027E 7A03                       		moveq	#3,d5
00000280                            
00000280                            PSGInitLoop:
00000280 175D 0011                  		move.b	(a5)+,$11(a3)	; reset	the PSG
00000284 51CD FFFA                  		dbf	d5,PSGInitLoop
00000288 3480                       		move.w	d0,(a2)
0000028A 4CD6 7FFF                  		movem.l	(a6),d0-a6	; clear	all registers
0000028E 46FC 2700                  		move	#$2700,sr	; set the sr
00000292                            
00000292                            PortC_Ok:
00000292 6000                       		bra.s	GameProgram
00000294                            ; ===========================================================================
00000294 8000                       SetupValues:	dc.w $8000		; XREF: PortA_Ok
00000296 3FFF                       		dc.w $3FFF
00000298 0100                       		dc.w $100
0000029A                            
0000029A 00A0 0000                  		dc.l $A00000		; start	of Z80 RAM
0000029E 00A1 1100                  		dc.l $A11100		; Z80 bus request
000002A2 00A1 1200                  		dc.l $A11200		; Z80 reset
000002A6 00C0 0000                  		dc.l $C00000
000002AA 00C0 0004                  		dc.l $C00004		; address for VDP registers
000002AE                            
000002AE 0414 303C                  		dc.b 4,	$14, $30, $3C	; values for VDP registers
000002B2 076C 0000                  		dc.b 7,	$6C, 0,	0
000002B6 0000 FF00                  		dc.b 0,	0, $FF,	0
000002BA 8137 0001                  		dc.b $81, $37, 0, 1
000002BE 0100 00FF                  		dc.b 1,	0, 0, $FF
000002C2 FF00 0080                  		dc.b $FF, 0, 0,	$80
000002C6                            
000002C6 4000 0080                  		dc.l $40000080
000002CA                            
000002CA AF01 D91F 1127 0021 2600+  		dc.b $AF, 1, $D9, $1F, $11, $27, 0, $21, $26, 0, $F9, $77 ; Z80	instructions
000002D6 EDB0 DDE1 FDE1 ED47 ED4F   		dc.b $ED, $B0, $DD, $E1, $FD, $E1, $ED,	$47, $ED, $4F
000002E0 D1E1 F108 D9C1 D1E1 F1F9+  		dc.b $D1, $E1, $F1, 8, $D9, $C1, $D1, $E1, $F1,	$F9, $F3
000002EB ED56 36E9 E9               		dc.b $ED, $56, $36, $E9, $E9
000002F0                            
000002F0 8104                       		dc.w $8104		; value	for VDP	display	mode
000002F2 8F02                       		dc.w $8F02		; value	for VDP	increment
000002F4 C000 0000                  		dc.l $C0000000		; value	for CRAM write mode
000002F8 4000 0010                  		dc.l $40000010
000002FC                            
000002FC 9FBF DFFF                  		dc.b $9F, $BF, $DF, $FF	; values for PSG channel volumes
00000300                            ; ===========================================================================
00000300                            
00000300                            jmp_DisplaySprite:
00000300 4EF9 0000 0000             	jmp DisplaySprite
00000306                            
00000306                            GameProgram:
00000306 4A79 00C0 0004             		tst.w	($C00004).l
0000030C 0839 0006 00A1 000D        		btst	#6,($A1000D).l
00000314 6700                       		beq.s	CheckSumCheck
00000316 0CB8 696E 6974 FFFC        		cmpi.l	#'init',($FFFFFFFC).w ; has checksum routine already run?
0000031E 6700 0000                  		beq.w	GameInit	; if yes, branch
00000322                            
00000322                            CheckSumCheck:
00000322 207C 0000 0200             		movea.l	#ErrorTrap,a0	; start	checking bytes after the header	($200)
00000328 227C 0000 01A4             		movea.l	#RomEndLoc,a1	; stop at end of ROM
0000032E 2011                       		move.l	(a1),d0
00000330 7200                       		moveq	#0,d1
00000332                            
00000332                            loc_32C:
00000332 D258                       		add.w	(a0)+,d1
00000334 B088                       		cmp.l	a0,d0
00000336 64FA                       		bcc.s	loc_32C
00000338 227C 0000 018E             		movea.l	#Checksum,a1	; read the checksum
0000033E B251                       		cmp.w	(a1),d1		; compare correct checksum to the one in ROM
00000340 6600 0000                  		bne.w	CheckSumError	; if they don't match, branch
00000344 4DF8 FE00                  		lea	($FFFFFE00).w,a6
00000348 7E00                       		moveq	#0,d7
0000034A 3C3C 007F                  		move.w	#$7F,d6
0000034E                            
0000034E                            loc_348:
0000034E 2CC7                       		move.l	d7,(a6)+
00000350 51CE FFFC                  		dbf	d6,loc_348
00000354 1039 00A1 0001             		move.b	($A10001).l,d0
0000035A 0200 00C0                  		andi.b	#$C0,d0
0000035E 11C0 FFF8                  		move.b	d0,($FFFFFFF8).w
00000362 21FC 696E 6974 FFFC        		move.l	#'init',($FFFFFFFC).w ; set flag so checksum won't be run again
0000036A                            
0000036A                            GameInit:
0000036A 4DF9 00FF 0000             		lea	($FF0000).l,a6
00000370 7E00                       		moveq	#0,d7
00000372 3C3C 3F7F                  		move.w	#$3F7F,d6
00000376                            
00000376                            GameClrRAM:
00000376 2CC7                       		move.l	d7,(a6)+
00000378 51CE FFFC                  		dbf	d6,GameClrRAM	; fill RAM ($0000-$FDFF) with $0
0000037C 6100 0000                  		bsr.w	VDPSetupGame
00000380 6100 0000                  		bsr.w	SoundDriverLoad
00000384 6100 0000                  		bsr.w	JoypadInit
00000388 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set Game Mode to Sega Screen
0000038E                            
0000038E                            MainGameLoop:
0000038E 1038 F600                  		move.b	($FFFFF600).w,d0 ; load	Game Mode
00000392 0240 001C                  		andi.w	#$1C,d0
00000396 4EBB 0000                  		jsr	GameModeArray(pc,d0.w) ; jump to apt location in ROM
0000039A 60F2                       		bra.s	MainGameLoop
0000039C                            ; ===========================================================================
0000039C                            ; ---------------------------------------------------------------------------
0000039C                            ; Main game mode array
0000039C                            ; ---------------------------------------------------------------------------
0000039C                            
0000039C                            GameModeArray:
0000039C 6000 0000                  		bra.w	SegaScreen	; Sega Screen ($00)
000003A0                            ; ===========================================================================
000003A0 6000 0000                  		bra.w	TitleScreen	; Title	Screen ($04)
000003A4                            ; ===========================================================================
000003A4 6000 0000                  		bra.w	Level		; Demo Mode ($08)
000003A8                            ; ===========================================================================
000003A8 6000 0000                  		bra.w	Level		; Normal Level ($0C)
000003AC                            ; ===========================================================================
000003AC 6000 0000                  		bra.w	SpecialStage	; Special Stage	($10)
000003B0                            ; ===========================================================================
000003B0 6000 0000                  		bra.w	ContinueScreen	; Continue Screen ($14)
000003B4                            ; ===========================================================================
000003B4 6000 0000                  		bra.w	EndingSequence	; End of game sequence ($18)
000003B8                            ; ===========================================================================
000003B8 6000 0000                  		bra.w	Credits		; Credits ($1C)
000003BC                            ; ===========================================================================
000003BC 4E75                       		rts	
000003BE                            ; ===========================================================================
000003BE                            
000003BE                            CheckSumError:
000003BE 6100 0000                  		bsr.w	VDPSetupGame
000003C2 23FC C000 0000 00C0 0004   		move.l	#$C0000000,($C00004).l ; set VDP to CRAM write
000003CC 7E3F                       		moveq	#$3F,d7
000003CE                            
000003CE                            CheckSum_Red:
000003CE 33FC 000E 00C0 0000        		move.w	#$E,($C00000).l	; fill screen with colour red
000003D6 51CF FFF6                  		dbf	d7,CheckSum_Red	; repeat $3F more times
000003DA                            
000003DA                            CheckSum_Loop:
000003DA 60FE                       		bra.s	CheckSum_Loop
000003DC                            ; ===========================================================================
000003DC                            
000003DC                            loc_43A:
000003DC 46FC 2700                  		move	#$2700,sr
000003E0 544F                       		addq.w	#2,sp
000003E2 21DF FC40                  		move.l	(sp)+,($FFFFFC40).w
000003E6 544F                       		addq.w	#2,sp
000003E8 48F8 FFFF FC00             		movem.l	d0-a7,($FFFFFC00).w
000003EE 6100 0000                  		bsr.w	ShowErrorMsg
000003F2 202F 0002                  		move.l	2(sp),d0
000003F6 6100 0000                  		bsr.w	sub_5BA
000003FA 2038 FC40                  		move.l	($FFFFFC40).w,d0
000003FE 6100 0000                  		bsr.w	sub_5BA
00000402 6000                       		bra.s	loc_478
00000404                            ; ===========================================================================
00000404                            
00000404                            loc_462:
00000404 46FC 2700                  		move	#$2700,sr
00000408 48F8 FFFF FC00             		movem.l	d0-a7,($FFFFFC00).w
0000040E 6100 0000                  		bsr.w	ShowErrorMsg
00000412 202F 0002                  		move.l	2(sp),d0
00000416 6100 0000                  		bsr.w	sub_5BA
0000041A                            
0000041A                            loc_478:
0000041A 6100 0000                  		bsr.w	ErrorWaitForC
0000041E 4CF8 FFFF FC00             		movem.l	($FFFFFC00).w,d0-a7
00000424 46FC 2300                  		move	#$2300,sr
00000428 4E73                       		rte	
0000042A                            
0000042A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000042A                            
0000042A                            
0000042A                            ShowErrorMsg:				; XREF: loc_43A; loc_462
0000042A 4DF9 00C0 0000             		lea	($C00000).l,a6
00000430 23FC 7800 0003 00C0 0004   		move.l	#$78000003,($C00004).l
0000043A 41F9 0000 0000             		lea	(Art_Text).l,a0
00000440 323C 027F                  		move.w	#$27F,d1
00000444                            
00000444                            Error_LoadGfx:
00000444 3C98                       		move.w	(a0)+,(a6)
00000446 51C9 FFFC                  		dbf	d1,Error_LoadGfx
0000044A 7000                       		moveq	#0,d0		; clear	d0
0000044C 1038 FC44                  		move.b	($FFFFFC44).w,d0 ; load	error code
00000450 303B 0000                  		move.w	ErrorText(pc,d0.w),d0
00000454 41FB 0000                  		lea	ErrorText(pc,d0.w),a0
00000458 23FC 4604 0003 00C0 0004   		move.l	#$46040003,($C00004).l ; position
00000462 7212                       		moveq	#$12,d1		; number of characters
00000464                            
00000464                            Error_LoopChars:
00000464 7000                       		moveq	#0,d0
00000466 1018                       		move.b	(a0)+,d0
00000468 0640 0790                  		addi.w	#$790,d0
0000046C 3C80                       		move.w	d0,(a6)
0000046E 51C9 FFF4                  		dbf	d1,Error_LoopChars ; repeat for	number of characters
00000472 4E75                       		rts	
00000474                            ; End of function ShowErrorMsg
00000474                            
00000474                            ; ===========================================================================
00000474 0000 0000                  ErrorText:	dc.w asc_4E8-ErrorText,	asc_4FB-ErrorText ; XREF: ShowErrorMsg
00000478 0000 0000                  		dc.w asc_50E-ErrorText,	asc_521-ErrorText
0000047C 0000 0000                  		dc.w asc_534-ErrorText,	asc_547-ErrorText
00000480 0000 0000                  		dc.w asc_55A-ErrorText,	asc_56D-ErrorText
00000484 0000 0000                  		dc.w asc_580-ErrorText,	asc_593-ErrorText
00000488 0000                       		dc.w asc_5A6-ErrorText
0000048A 4552 524F 5220 4558 4345+  asc_4E8:	dc.b 'ERROR EXCEPTION    '
0000049D 4255 5320 4552 524F 5220+  asc_4FB:	dc.b 'BUS ERROR          '
000004B0 4144 4452 4553 5320 4552+  asc_50E:	dc.b 'ADDRESS ERROR      '
000004C3 494C 4C45 4741 4C20 494E+  asc_521:	dc.b 'ILLEGAL INSTRUCTION'
000004D6 4045 524F 2044 4956 4944+  asc_534:	dc.b '@ERO DIVIDE        '
000004E9 4348 4B20 494E 5354 5255+  asc_547:	dc.b 'CHK INSTRUCTION    '
000004FC 5452 4150 5620 494E 5354+  asc_55A:	dc.b 'TRAPV INSTRUCTION  '
0000050F 5052 4956 494C 4547 4520+  asc_56D:	dc.b 'PRIVILEGE VIOLATION'
00000522 5452 4143 4520 2020 2020+  asc_580:	dc.b 'TRACE              '
00000535 4C49 4E45 2031 3031 3020+  asc_593:	dc.b 'LINE 1010 EMULATOR '
00000548 4C49 4E45 2031 3131 3120+  asc_5A6:	dc.b 'LINE 1111 EMULATOR '
0000055C 00                         		even
0000055C                            
0000055C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000055C                            
0000055C                            
0000055C                            sub_5BA:				; XREF: loc_43A; loc_462
0000055C 3CBC 07CA                  		move.w	#$7CA,(a6)
00000560 7407                       		moveq	#7,d2
00000562                            
00000562                            loc_5C0:
00000562 E998                       		rol.l	#4,d0
00000564 6100                       		bsr.s	sub_5CA
00000566 51CA FFFA                  		dbf	d2,loc_5C0
0000056A 4E75                       		rts	
0000056C                            ; End of function sub_5BA
0000056C                            
0000056C                            
0000056C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000056C                            
0000056C                            
0000056C                            sub_5CA:				; XREF: sub_5BA
0000056C 3200                       		move.w	d0,d1
0000056E 0241 000F                  		andi.w	#$F,d1
00000572 0C41 000A                  		cmpi.w	#$A,d1
00000576 6500                       		bcs.s	loc_5D8
00000578 5E41                       		addq.w	#7,d1
0000057A                            
0000057A                            loc_5D8:
0000057A 0641 07C0                  		addi.w	#$7C0,d1
0000057E 3C81                       		move.w	d1,(a6)
00000580 4E75                       		rts	
00000582                            ; End of function sub_5CA
00000582                            
00000582                            
00000582                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000582                            
00000582                            
00000582                            ErrorWaitForC:				; XREF: loc_478
00000582 6100 0000                  		bsr.w	ReadJoypads
00000586 0C38 0020 F605             		cmpi.b	#$20,($FFFFF605).w ; is	button C pressed?
0000058C 6600 FFF4                  		bne.w	ErrorWaitForC	; if not, branch
00000590 4E75                       		rts	
00000592                            ; End of function ErrorWaitForC
00000592                            
00000592                            ; ===========================================================================
00000592                            
00000592                            Art_Text:	incbin	artunc\menutext.bin	; text used in level select and debug mode
00000AB2                            		even
00000AB2                            
00000AB2                            ; ===========================================================================
00000AB2                            
00000AB2                            loc_B10:				; XREF: Vectors
00000AB2 48E7 FFFE                  		movem.l	d0-a6,-(sp)
00000AB6 4A38 F62A                  		tst.b	($FFFFF62A).w
00000ABA 6700                       		beq.s	loc_B88
00000ABC 3039 00C0 0004             		move.w	($C00004).l,d0
00000AC2 23FC 4000 0010 00C0 0004   		move.l	#$40000010,($C00004).l
00000ACC 23F8 F616 00C0 0000        		move.l	($FFFFF616).w,($C00000).l
00000AD4 0838 0006 FFF8             		btst	#6,($FFFFFFF8).w
00000ADA 6700                       		beq.s	loc_B42
00000ADC 303C 0700                  		move.w	#$700,d0
00000AE0                            
00000AE0                            loc_B3E:
00000AE0 51C8 FFFE                  		dbf	d0,loc_B3E
00000AE4                            
00000AE4                            loc_B42:
00000AE4 1038 F62A                  		move.b	($FFFFF62A).w,d0
00000AE8 11FC 0000 F62A             		move.b	#0,($FFFFF62A).w
00000AEE 31FC 0001 F644             		move.w	#1,($FFFFF644).w
00000AF4 0240 003E                  		andi.w	#$3E,d0
00000AF8 303B 0000                  		move.w	off_B6E(pc,d0.w),d0
00000AFC 4EBB 0000                  		jsr	off_B6E(pc,d0.w)
00000B00                            
00000B00                            loc_B5E:				; XREF: loc_B88
00000B00 4EB9 0000 0000             		jsr	sub_71B4C
00000B06                            
00000B06                            loc_B64:				; XREF: loc_D50
00000B06 52B8 FE0C                  		addq.l	#1,($FFFFFE0C).w
00000B0A 4CDF 7FFF                  		movem.l	(sp)+,d0-a6
00000B0E 4E73                       		rte	
00000B10                            ; ===========================================================================
00000B10 0000 0000                  off_B6E:	dc.w loc_B88-off_B6E, loc_C32-off_B6E
00000B14 0000 0000                  		dc.w loc_C44-off_B6E, loc_C5E-off_B6E
00000B18 0000 0000                  		dc.w loc_C6E-off_B6E, loc_DA6-off_B6E
00000B1C 0000 0000                  		dc.w loc_E72-off_B6E, loc_F8A-off_B6E
00000B20 0000 0000                  		dc.w loc_C64-off_B6E, loc_F9A-off_B6E
00000B24 0000 0000                  		dc.w loc_C36-off_B6E, loc_FA6-off_B6E
00000B28 0000                       		dc.w loc_E72-off_B6E
00000B2A                            ; ===========================================================================
00000B2A                            
00000B2A                            loc_B88:				; XREF: loc_B10; off_B6E
00000B2A 0C38 008C F600             		cmpi.b	#$8C,($FFFFF600).w
00000B30 6700                       		beq.s	loc_B9A
00000B32 0C38 000C F600             		cmpi.b	#$C,($FFFFF600).w
00000B38 6600 FFC6                  		bne.w	loc_B5E
00000B3C                            
00000B3C                            loc_B9A:
00000B3C 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ ?
00000B42 6600 FFBC                  		bne.w	loc_B5E		; if not, branch
00000B46 3039 00C0 0004             		move.w	($C00004).l,d0
00000B4C 0838 0006 FFF8             		btst	#6,($FFFFFFF8).w
00000B52 6700                       		beq.s	loc_BBA
00000B54 303C 0700                  		move.w	#$700,d0
00000B58                            
00000B58                            loc_BB6:
00000B58 51C8 FFFE                  		dbf	d0,loc_BB6
00000B5C                            
00000B5C                            loc_BBA:
00000B5C 31FC 0001 F644             		move.w	#1,($FFFFF644).w
00000B62 33FC 0100 00A1 1100 0839+  	Z80DMA_ON
00000B90 4A38 F64E                  		tst.b	($FFFFF64E).w
00000B94 6600                       		bne.s	loc_BFE
00000B96 4BF9 00C0 0004             		lea	($C00004).l,a5
00000B9C 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000BA2 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000BA8 3ABC 977F                  		move.w	#$977F,(a5)
00000BAC 3ABC C000                  		move.w	#$C000,(a5)
00000BB0 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000BB6 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000BBA 6000                       		bra.s	loc_C22
00000BBC                            ; ===========================================================================
00000BBC                            
00000BBC                            loc_BFE:				; XREF: loc_BC8
00000BBC 4BF9 00C0 0004             		lea	($C00004).l,a5
00000BC2 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000BC8 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
00000BCE 3ABC 977F                  		move.w	#$977F,(a5)
00000BD2 3ABC C000                  		move.w	#$C000,(a5)
00000BD6 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000BDC 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000BE0                            
00000BE0                            loc_C22:				; XREF: loc_BC8
00000BE0 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000BE4 33FC 0100 00A1 1100 0839+  	Z80DMA_OFF
00000C06 6000 FEF8                  		bra.w	loc_B5E
00000C0A                            ; ===========================================================================
00000C0A                            
00000C0A                            loc_C32:				; XREF: off_B6E
00000C0A 6100 0000                  		bsr.w	sub_106E
00000C0E                            
00000C0E                            loc_C36:				; XREF: off_B6E
00000C0E 4A78 F614                  		tst.w	($FFFFF614).w
00000C12 6700 0000                  		beq.w	locret_C42
00000C16 5378 F614                  		subq.w	#1,($FFFFF614).w
00000C1A                            
00000C1A                            locret_C42:
00000C1A 4E75                       		rts	
00000C1C                            ; ===========================================================================
00000C1C                            
00000C1C                            loc_C44:				; XREF: off_B6E
00000C1C 6100 0000                  		bsr.w	sub_106E
00000C20 6100 0000                  		bsr.w	sub_6886
00000C24 6100 0000                  		bsr.w	sub_1642
00000C28 4A78 F614                  		tst.w	($FFFFF614).w
00000C2C 6700 0000                  		beq.w	locret_C5C
00000C30 5378 F614                  		subq.w	#1,($FFFFF614).w
00000C34                            
00000C34                            locret_C5C:
00000C34 4E75                       		rts	
00000C36                            ; ===========================================================================
00000C36                            
00000C36                            loc_C5E:				; XREF: off_B6E
00000C36 6100 0000                  		bsr.w	sub_106E
00000C3A 4E75                       		rts
00000C3C                            
00000C3C                            Return:
00000C3C 6100 0000                  		bsr.w	ReadJoypads
00000C40 4E75                       		rts	
00000C42                            ; ===========================================================================
00000C42                            
00000C42                            loc_C64:				; XREF: off_B6E
00000C42 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode = $10	(special stage)	?
00000C48 6700 0000                  		beq.w	loc_DA6		; if yes, branch
00000C4C                            
00000C4C                            loc_C6E:				; XREF: off_B6E
00000C4C 33FC 0100 00A1 1100 0839+  	Z80DMA_ON
00000C7A 6100 0000                  		bsr.w	ReadJoypads
00000C7E 4A38 F64E                  		tst.b	($FFFFF64E).w
00000C82 6600                       		bne.s	loc_CB0
00000C84 4BF9 00C0 0004             		lea	($C00004).l,a5
00000C8A 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000C90 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000C96 3ABC 977F                  		move.w	#$977F,(a5)
00000C9A 3ABC C000                  		move.w	#$C000,(a5)
00000C9E 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000CA4 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000CA8 6000                       		bra.s	loc_CD4
00000CAA                            ; ===========================================================================
00000CAA                            
00000CAA                            loc_CB0:				; XREF: loc_C76
00000CAA 4BF9 00C0 0004             		lea	($C00004).l,a5
00000CB0 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000CB6 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
00000CBC 3ABC 977F                  		move.w	#$977F,(a5)
00000CC0 3ABC C000                  		move.w	#$C000,(a5)
00000CC4 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000CCA 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000CCE                            
00000CCE                            loc_CD4:				; XREF: loc_C76
00000CCE 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000CD2 4BF9 00C0 0004             		lea	($C00004).l,a5
00000CD8 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00000CDE 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00000CE4 3ABC 977F                  		move.w	#$977F,(a5)
00000CE8 3ABC 7C00                  		move.w	#$7C00,(a5)
00000CEC 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000CF2 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000CF6 4BF9 00C0 0004             		lea	($C00004).l,a5
00000CFC 2ABC 9401 9340             		move.l	#$94019340,(a5)
00000D02 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00000D08 3ABC 977F                  		move.w	#$977F,(a5)
00000D0C 3ABC 7800                  		move.w	#$7800,(a5)
00000D10 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000D16 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000D1A 4EB9 0000 0000             		jsr	(ProcessDMAQueue).l
00000D20                            
00000D20                            loc_D50:
00000D20 33FC 0100 00A1 1100 0839+  	Z80DMA_OFF
00000D42 4CF8 00FF F700             		movem.l	($FFFFF700).w,d0-d7
00000D48 48F8 00FF FF10             		movem.l	d0-d7,($FFFFFF10).w
00000D4E 4CF8 0003 F754             		movem.l	($FFFFF754).w,d0-d1
00000D54 48F8 0003 FF30             		movem.l	d0-d1,($FFFFFF30).w
00000D5A 0C38 0060 F625             		cmpi.b	#$60,($FFFFF625).w
00000D60 6400                       		bcc.s	Demo_Time
00000D62 11FC 0001 F64F             		move.b	#1,($FFFFF64F).w
00000D68 588F                       		addq.l	#4,sp
00000D6A 6000 FD9A                  		bra.w	loc_B64
00000D6E                            
00000D6E                            ; ---------------------------------------------------------------------------
00000D6E                            ; Subroutine to	run a demo for an amount of time
00000D6E                            ; ---------------------------------------------------------------------------
00000D6E                            
00000D6E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000D6E                            
00000D6E                            
00000D6E                            Demo_Time:				; XREF: loc_D50; PalToCRAM
00000D6E 6100 0000                  		bsr.w	LoadTilesAsYouMove
00000D72 4EB9 0000 0000             		jsr	AniArt_Load
00000D78 4EB9 0000 0000             		jsr	HudUpdate
00000D7E 6100 0000                  		bsr.w	sub_165E
00000D82 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
00000D86 6700 0000                  		beq.w	Demo_TimeEnd	; if not, branch
00000D8A 5378 F614                  		subq.w	#1,($FFFFF614).w ; subtract 1 from time	left
00000D8E                            
00000D8E                            Demo_TimeEnd:
00000D8E 4E75                       		rts	
00000D90                            ; End of function Demo_Time
00000D90                            
00000D90                            ; ===========================================================================
00000D90                            
00000D90                            loc_DA6:				; XREF: off_B6E
00000D90 6100 0000                  		bsr.w	ReadJoypads
00000D94 33FC 0100 00A1 1100 0839+  	Z80DMA_ON
00000DC2 4BF9 00C0 0004             		lea	($C00004).l,a5
00000DC8 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000DCE 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000DD4 3ABC 977F                  		move.w	#$977F,(a5)
00000DD8 3ABC C000                  		move.w	#$C000,(a5)
00000DDC 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000DE2 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000DE6 4BF9 00C0 0004             		lea	($C00004).l,a5
00000DEC 2ABC 9401 9340             		move.l	#$94019340,(a5)
00000DF2 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00000DF8 3ABC 977F                  		move.w	#$977F,(a5)
00000DFC 3ABC 7800                  		move.w	#$7800,(a5)
00000E00 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000E06 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000E0A 4BF9 00C0 0004             		lea	($C00004).l,a5
00000E10 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00000E16 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00000E1C 3ABC 977F                  		move.w	#$977F,(a5)
00000E20 3ABC 7C00                  		move.w	#$7C00,(a5)
00000E24 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000E2A 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000E2E 6100 0000                  		bsr.w	PalCycle_SS
00000E32 4A38 F767                  		tst.b	($FFFFF767).w
00000E36 6700                       		beq.s	loc_E64
00000E38 4BF9 00C0 0004             		lea	($C00004).l,a5
00000E3E 2ABC 9401 9370             		move.l	#$94019370,(a5)
00000E44 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
00000E4A 3ABC 977F                  		move.w	#$977F,(a5)
00000E4E 3ABC 7000                  		move.w	#$7000,(a5)
00000E52 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000E58 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000E5C 11FC 0000 F767             		move.b	#0,($FFFFF767).w
00000E62                            
00000E62                            loc_E64:
00000E62 33FC 0100 00A1 1100 0839+  	Z80DMA_OFF
00000E84 4A78 F614                  		tst.w	($FFFFF614).w
00000E88 6700 0000                  		beq.w	locret_E70
00000E8C 5378 F614                  		subq.w	#1,($FFFFF614).w
00000E90                            
00000E90                            locret_E70:
00000E90 4E75                       		rts	
00000E92                            ; ===========================================================================
00000E92                            
00000E92                            loc_E72:				; XREF: off_B6E
00000E92 6100 0000                  		bsr.w	ReadJoypads
00000E96 33FC 0100 00A1 1100 0839+  	Z80DMA_ON
00000EC4 4A38 F64E                  		tst.b	($FFFFF64E).w
00000EC8 6600                       		bne.s	loc_EB4
00000ECA 4BF9 00C0 0004             		lea	($C00004).l,a5
00000ED0 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000ED6 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000EDC 3ABC 977F                  		move.w	#$977F,(a5)
00000EE0 3ABC C000                  		move.w	#$C000,(a5)
00000EE4 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000EEA 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000EEE 6000                       		bra.s	loc_ED8
00000EF0                            ; ===========================================================================
00000EF0                            
00000EF0                            loc_EB4:				; XREF: loc_E7A
00000EF0 4BF9 00C0 0004             		lea	($C00004).l,a5
00000EF6 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000EFC 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
00000F02 3ABC 977F                  		move.w	#$977F,(a5)
00000F06 3ABC C000                  		move.w	#$C000,(a5)
00000F0A 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000F10 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F14                            
00000F14                            loc_ED8:				; XREF: loc_E7A
00000F14 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000F18 4BF9 00C0 0004             		lea	($C00004).l,a5
00000F1E 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00000F24 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00000F2A                            
00000F2A                            loc_EEE:
00000F2A 3ABC 977F                  		move.w	#$977F,(a5)
00000F2E 3ABC 7C00                  		move.w	#$7C00,(a5)
00000F32 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000F38 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F3C 4BF9 00C0 0004             		lea	($C00004).l,a5
00000F42 2ABC 9401 9340             		move.l	#$94019340,(a5)
00000F48 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00000F4E 3ABC 977F                  		move.w	#$977F,(a5)
00000F52 3ABC 7800                  		move.w	#$7800,(a5)
00000F56 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000F5C 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F60 4A38 F767                  		tst.b	($FFFFF767).w
00000F64 6700                       		beq.s	loc_F54
00000F66 4BF9 00C0 0004             		lea	($C00004).l,a5
00000F6C 2ABC 9401 9370             		move.l	#$94019370,(a5)
00000F72 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
00000F78 3ABC 977F                  		move.w	#$977F,(a5)
00000F7C 3ABC 7000                  		move.w	#$7000,(a5)
00000F80 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000F86 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F8A 11FC 0000 F767             		move.b	#0,($FFFFF767).w
00000F90                            
00000F90                            loc_F54:
00000F90 33FC 0100 00A1 1100 0839+  	Z80DMA_OFF
00000FB2 4CF8 00FF F700             		movem.l	($FFFFF700).w,d0-d7
00000FB8 48F8 00FF FF10             		movem.l	d0-d7,($FFFFFF10).w
00000FBE 4CF8 0003 F754             		movem.l	($FFFFF754).w,d0-d1
00000FC4 48F8 0003 FF30             		movem.l	d0-d1,($FFFFFF30).w
00000FCA 6100 0000                  		bsr.w	LoadTilesAsYouMove
00000FCE 4EB9 0000 0000             		jsr	AniArt_Load
00000FD4 4EB9 0000 0000             		jsr	HudUpdate
00000FDA 6100 0000                  		bsr.w	sub_1642
00000FDE 4E75                       		rts	
00000FE0                            ; ===========================================================================
00000FE0                            
00000FE0                            loc_F8A:				; XREF: off_B6E
00000FE0 6100 0000                  		bsr.w	sub_106E
00000FE4 5238 F628                  		addq.b	#1,($FFFFF628).w
00000FE8 11FC 000E F62A             		move.b	#$E,($FFFFF62A).w
00000FEE 4E75                       		rts	
00000FF0                            ; ===========================================================================
00000FF0                            
00000FF0                            loc_F9A:				; XREF: off_B6E
00000FF0 6100 0000                  		bsr.w	sub_106E
00000FF4 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000FF8 6000 0000                  		bra.w	sub_1642
00000FFC                            ; ===========================================================================
00000FFC                            
00000FFC                            loc_FA6:				; XREF: off_B6E
00000FFC 6100 0000                  		bsr.w	ReadJoypads
00001000 33FC 0100 00A1 1100 0839+  	Z80DMA_ON
0000102E 4BF9 00C0 0004             		lea	($C00004).l,a5
00001034 2ABC 9400 9340             		move.l	#$94009340,(a5)
0000103A 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00001040 3ABC 977F                  		move.w	#$977F,(a5)
00001044 3ABC C000                  		move.w	#$C000,(a5)
00001048 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
0000104E 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001052 4BF9 00C0 0004             		lea	($C00004).l,a5
00001058 2ABC 9401 9340             		move.l	#$94019340,(a5)
0000105E 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00001064 3ABC 977F                  		move.w	#$977F,(a5)
00001068 3ABC 7800                  		move.w	#$7800,(a5)
0000106C 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001072 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001076 4BF9 00C0 0004             		lea	($C00004).l,a5
0000107C 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00001082 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00001088 3ABC 977F                  		move.w	#$977F,(a5)
0000108C 3ABC 7C00                  		move.w	#$7C00,(a5)
00001090 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001096 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000109A 4A38 F767                  		tst.b	($FFFFF767).w
0000109E 6700                       		beq.s	loc_1060
000010A0 4BF9 00C0 0004             		lea	($C00004).l,a5
000010A6 2ABC 9401 9370             		move.l	#$94019370,(a5)
000010AC 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
000010B2 3ABC 977F                  		move.w	#$977F,(a5)
000010B6 3ABC 7000                  		move.w	#$7000,(a5)
000010BA 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
000010C0 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000010C4 11FC 0000 F767             		move.b	#0,($FFFFF767).w
000010CA                            
000010CA                            loc_1060:
000010CA 33FC 0100 00A1 1100 0839+  	Z80DMA_OFF
000010EC 4A78 F614                  		tst.w	($FFFFF614).w
000010F0 6700 0000                  		beq.w	locret_106C
000010F4 5378 F614                  		subq.w	#1,($FFFFF614).w
000010F8                            
000010F8                            locret_106C:
000010F8 4E75                       		rts	
000010FA                            
000010FA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000010FA                            
000010FA                            
000010FA                            sub_106E:				; XREF: loc_C32; et al
000010FA 6100 0000                  		bsr.w	ReadJoypads
000010FE 33FC 0100 00A1 1100 0839+  	Z80DMA_ON
0000112C 4A38 F64E                  		tst.b	($FFFFF64E).w
00001130 6600                       		bne.s	loc_10B0
00001132 4BF9 00C0 0004             		lea	($C00004).l,a5
00001138 2ABC 9400 9340             		move.l	#$94009340,(a5)
0000113E 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00001144 3ABC 977F                  		move.w	#$977F,(a5)
00001148 3ABC C000                  		move.w	#$C000,(a5)
0000114C 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00001152 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001156                            
00001156                            PAL1_LOAD:
00001156 6000                       		bra.s	loc_10D4
00001158                            ; ===========================================================================
00001158                            
00001158                            loc_10B0:
00001158 4BF9 00C0 0004             		lea	($C00004).l,a5
0000115E 2ABC 9400 9340             		move.l	#$94009340,(a5)
00001164 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
0000116A 3ABC 977F                  		move.w	#$977F,(a5)
0000116E 3ABC C000                  		move.w	#$C000,(a5)
00001172 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00001178 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000117C                            loc_10D4:
0000117C 4BF9 00C0 0004             		lea	($C00004).l,a5
00001182 2ABC 9401 9340             		move.l	#$94019340,(a5)
00001188 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
0000118E 3ABC 977F                  		move.w	#$977F,(a5)
00001192 3ABC 7800                  		move.w	#$7800,(a5)
00001196 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
0000119C 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000011A0 4BF9 00C0 0004             		lea	($C00004).l,a5
000011A6 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
000011AC 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
000011B2 3ABC 977F                  		move.w	#$977F,(a5)
000011B6 3ABC 7C00                  		move.w	#$7C00,(a5)
000011BA 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
000011C0 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000011C4 33FC 0100 00A1 1100 0839+  	Z80DMA_OFF
000011E6 4E75                       		rts	
000011E8                            ; End of function sub_106E
000011E8                            
000011E8                            ; ---------------------------------------------------------------------------
000011E8                            ; Subroutine to	move pallets from the RAM to CRAM
000011E8                            ; ---------------------------------------------------------------------------
000011E8                            
000011E8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000011E8                            
000011E8                            
000011E8                            PalToCRAM:
000011E8 46FC 2700                  		move	#$2700,sr
000011EC 4A78 F644                  		tst.w	($FFFFF644).w
000011F0 6700                       		beq.s	locret_119C
000011F2 31FC 0000 F644             		move.w	#0,($FFFFF644).w
000011F8 48E7 00C0                  		movem.l	a0-a1,-(sp)
000011FC 43F9 00C0 0000             		lea	($C00000).l,a1
00001202 41F8 FA80                  		lea	($FFFFFA80).w,a0 ; load	pallet from RAM
00001206 237C C000 0000 0004        		move.l	#$C0000000,4(a1) ; set VDP to CRAM write
0000120E 2298                       		move.l	(a0)+,(a1)	; move pallet to CRAM
00001210 2298                       		move.l	(a0)+,(a1)
00001212 2298                       		move.l	(a0)+,(a1)
00001214 2298                       		move.l	(a0)+,(a1)
00001216 2298                       		move.l	(a0)+,(a1)
00001218 2298                       		move.l	(a0)+,(a1)
0000121A 2298                       		move.l	(a0)+,(a1)
0000121C 2298                       		move.l	(a0)+,(a1)
0000121E 2298                       		move.l	(a0)+,(a1)
00001220 2298                       		move.l	(a0)+,(a1)
00001222 2298                       		move.l	(a0)+,(a1)
00001224 2298                       		move.l	(a0)+,(a1)
00001226 2298                       		move.l	(a0)+,(a1)
00001228 2298                       		move.l	(a0)+,(a1)
0000122A 2298                       		move.l	(a0)+,(a1)
0000122C 2298                       		move.l	(a0)+,(a1)
0000122E 2298                       		move.l	(a0)+,(a1)
00001230 2298                       		move.l	(a0)+,(a1)
00001232 2298                       		move.l	(a0)+,(a1)
00001234 2298                       		move.l	(a0)+,(a1)
00001236 2298                       		move.l	(a0)+,(a1)
00001238 2298                       		move.l	(a0)+,(a1)
0000123A 2298                       		move.l	(a0)+,(a1)
0000123C 2298                       		move.l	(a0)+,(a1)
0000123E 2298                       		move.l	(a0)+,(a1)
00001240 2298                       		move.l	(a0)+,(a1)
00001242 2298                       		move.l	(a0)+,(a1)
00001244 2298                       		move.l	(a0)+,(a1)
00001246 2298                       		move.l	(a0)+,(a1)
00001248 2298                       		move.l	(a0)+,(a1)
0000124A 2298                       		move.l	(a0)+,(a1)
0000124C 2298                       		move.l	(a0)+,(a1)
0000124E 337C 8ADF 0004             		move.w	#$8ADF,4(a1)
00001254 4CDF 0300                  		movem.l	(sp)+,a0-a1
00001258 4A38 F64F                  		tst.b	($FFFFF64F).w
0000125C 6600                       		bne.s	loc_119E
0000125E                            
0000125E                            locret_119C:
0000125E 4E73                       		rte	
00001260                            ; ===========================================================================
00001260                            
00001260                            loc_119E:				; XREF: PalToCRAM
00001260 4238 F64F                  		clr.b	($FFFFF64F).w
00001264 48E7 FFFE                  		movem.l	d0-a6,-(sp)
00001268 6100 FB04                  		bsr.w	Demo_Time
0000126C 4EB9 0000 0000             		jsr	sub_71B4C
00001272 4CDF 7FFF                  		movem.l	(sp)+,d0-a6
00001276 4E73                       		rte	
00001278                            ; End of function PalToCRAM
00001278                            
00001278                            ; ---------------------------------------------------------------------------
00001278                            ; Subroutine to	initialise joypads
00001278                            ; ---------------------------------------------------------------------------
00001278                            
00001278                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001278                            
00001278                            
00001278                            JoypadInit:				; XREF: GameClrRAM
00001278 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00001280                            
00001280                            Joypad_WaitZ80:
00001280 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has the Z80 stopped?
00001288 66F6                       		bne.s	Joypad_WaitZ80	; if not, branch
0000128A 7040                       		moveq	#$40,d0
0000128C 13C0 00A1 0009             		move.b	d0,($A10009).l	; init port 1 (joypad 1)
00001292 13C0 00A1 000B             		move.b	d0,($A1000B).l	; init port 2 (joypad 2)
00001298 13C0 00A1 000D             		move.b	d0,($A1000D).l	; init port 3 (extra)
0000129E 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
000012A6 4E75                       		rts	
000012A8                            ; End of function JoypadInit
000012A8                            
000012A8                            ; ---------------------------------------------------------------------------
000012A8                            ; Subroutine to	read joypad input, and send it to the RAM
000012A8                            ; ---------------------------------------------------------------------------
000012A8                            
000012A8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000012A8                            
000012A8                            
000012A8                            ReadJoypads:
000012A8 41F8 F604                  		lea	($FFFFF604).w,a0 ; address where joypad	states are written
000012AC 43F9 00A1 0003             		lea	($A10003).l,a1	; first	joypad port
000012B2 6100                       		bsr.s	Joypad_Read	; do the first joypad
000012B4 5449                       		addq.w	#2,a1		; do the second	joypad
000012B6                            
000012B6                            Joypad_Read:
000012B6 12BC 0000                  		move.b	#0,(a1)
000012BA 4E71                       		nop	
000012BC 4E71                       		nop	
000012BE 1011                       		move.b	(a1),d0
000012C0 E508                       		lsl.b	#2,d0
000012C2 0200 00C0                  		andi.b	#$C0,d0
000012C6 12BC 0040                  		move.b	#$40,(a1)
000012CA 4E71                       		nop	
000012CC 4E71                       		nop	
000012CE 1211                       		move.b	(a1),d1
000012D0 0201 003F                  		andi.b	#$3F,d1
000012D4 8001                       		or.b	d1,d0
000012D6 4600                       		not.b	d0
000012D8 1210                       		move.b	(a0),d1
000012DA B101                       		eor.b	d0,d1
000012DC 10C0                       		move.b	d0,(a0)+
000012DE C200                       		and.b	d0,d1
000012E0 10C1                       		move.b	d1,(a0)+
000012E2 4E75                       		rts	
000012E4                            ; End of function ReadJoypads
000012E4                            
000012E4                            
000012E4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000012E4                            
000012E4                            
000012E4                            VDPSetupGame:				; XREF: GameClrRAM; ChecksumError
000012E4 41F9 00C0 0004             		lea	($C00004).l,a0
000012EA 43F9 00C0 0000             		lea	($C00000).l,a1
000012F0 45F9 0000 0000             		lea	(VDPSetupArray).l,a2
000012F6 7E12                       		moveq	#$12,d7
000012F8                            
000012F8                            VDP_Loop:
000012F8 309A                       		move.w	(a2)+,(a0)
000012FA 51CF FFFC                  		dbf	d7,VDP_Loop	; set the VDP registers
000012FE                            
000012FE 3039 0000 0000             		move.w	(VDPSetupArray+2).l,d0
00001304 31C0 F60C                  		move.w	d0,($FFFFF60C).w
00001308 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
0000130E 7000                       		moveq	#0,d0
00001310 23FC C000 0000 00C0 0004   		move.l	#$C0000000,($C00004).l ; set VDP to CRAM write
0000131A 3E3C 003F                  		move.w	#$3F,d7
0000131E                            
0000131E                            VDP_ClrCRAM:
0000131E 3280                       		move.w	d0,(a1)
00001320 51CF FFFC                  		dbf	d7,VDP_ClrCRAM	; clear	the CRAM
00001324                            
00001324 42B8 F616                  		clr.l	($FFFFF616).w
00001328 42B8 F61A                  		clr.l	($FFFFF61A).w
0000132C 2F01                       		move.l	d1,-(sp)
0000132E 4BF9 00C0 0004             		lea	($C00004).l,a5
00001334 3ABC 8F01                  		move.w	#$8F01,(a5)
00001338 2ABC 94FF 93FF             		move.l	#$94FF93FF,(a5)
0000133E 3ABC 9780                  		move.w	#$9780,(a5)
00001342 2ABC 4000 0080             		move.l	#$40000080,(a5)
00001348 33FC 0000 00C0 0000        		move.w	#0,($C00000).l	; clear	the screen
00001350                            
00001350                            loc_128E:
00001350 3215                       		move.w	(a5),d1
00001352 0801 0001                  		btst	#1,d1
00001356 66F8                       		bne.s	loc_128E
00001358                            
00001358 3ABC 8F02                  		move.w	#$8F02,(a5)
0000135C 221F                       		move.l	(sp)+,d1
0000135E 4E75                       		rts	
00001360                            ; End of function VDPSetupGame
00001360                            
00001360                            ; ===========================================================================
00001360 8004 8134 8230 8328        VDPSetupArray:	dc.w $8004, $8134, $8230, $8328	; XREF: VDPSetupGame
00001368 8407 857C 8600 8700        		dc.w $8407, $857C, $8600, $8700
00001370 8800 8900 8A00 8B00        		dc.w $8800, $8900, $8A00, $8B00
00001378 8C81 8D3F 8E00 8F02        		dc.w $8C81, $8D3F, $8E00, $8F02
00001380 9001 9100 9200             		dc.w $9001, $9100, $9200
00001386                            
00001386                            ; ---------------------------------------------------------------------------
00001386                            ; Subroutine to	clear the screen
00001386                            ; ---------------------------------------------------------------------------
00001386                            
00001386                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001386                            
00001386                            
00001386                            ClearScreen:
00001386 4BF9 00C0 0004             		lea	($C00004).l,a5
0000138C 3ABC 8F01                  		move.w	#$8F01,(a5)
00001390 2ABC 940F 93FF             		move.l	#$940F93FF,(a5)
00001396 3ABC 9780                  		move.w	#$9780,(a5)
0000139A 2ABC 4000 0083             		move.l	#$40000083,(a5)
000013A0 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
000013A8                            
000013A8                            loc_12E6:
000013A8 3215                       		move.w	(a5),d1
000013AA 0801 0001                  		btst	#1,d1
000013AE 66F8                       		bne.s	loc_12E6
000013B0                            
000013B0 3ABC 8F02                  		move.w	#$8F02,(a5)
000013B4 4BF9 00C0 0004             		lea	($C00004).l,a5
000013BA 3ABC 8F01                  		move.w	#$8F01,(a5)
000013BE 2ABC 940F 93FF             		move.l	#$940F93FF,(a5)
000013C4 3ABC 9780                  		move.w	#$9780,(a5)
000013C8 2ABC 6000 0083             		move.l	#$60000083,(a5)
000013CE 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
000013D6                            
000013D6                            loc_1314:
000013D6 3215                       		move.w	(a5),d1
000013D8 0801 0001                  		btst	#1,d1
000013DC 66F8                       		bne.s	loc_1314
000013DE                            
000013DE 3ABC 8F02                  		move.w	#$8F02,(a5)
000013E2 21FC 0000 0000 F616        		move.l	#0,($FFFFF616).w
000013EA 21FC 0000 0000 F61A        		move.l	#0,($FFFFF61A).w
000013F2 43F8 F800                  		lea	($FFFFF800).w,a1
000013F6 7000                       		moveq	#0,d0
000013F8 323C 00A0                  		move.w	#$A0,d1
000013FC                            
000013FC                            loc_133A:
000013FC 22C0                       		move.l	d0,(a1)+
000013FE 51C9 FFFC                  		dbf	d1,loc_133A
00001402                            
00001402 43F8 CC00                  		lea	($FFFFCC00).w,a1
00001406 7000                       		moveq	#0,d0
00001408 323C 0100                  		move.w	#$100,d1
0000140C                            
0000140C                            loc_134A:
0000140C 22C0                       		move.l	d0,(a1)+
0000140E 51C9 FFFC                  		dbf	d1,loc_134A
00001412 4E75                       		rts	
00001414                            ; End of function ClearScreen
00001414                            
00001414                            ; ---------------------------------------------------------------------------
00001414                            ; Subroutine to	load the sound driver
00001414                            ; ---------------------------------------------------------------------------
00001414                            
00001414                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001414                            
00001414                            
00001414                            SoundDriverLoad:
00001414 41F9 0000 0000             		lea	(Z80ROM).l,a0				; load Z80 ROM data
0000141A 43F9 00A0 0000             		lea	($A00000).l,a1				; load Z80 RAM space address
00001420 323C 0000                  		move.w	#(Z80ROM_End-Z80ROM)-$01,d1		; set repeat times
00001424 33FC 0100 00A1 1100        		move.w	#$0100,($A11100).l			; request Z80 stop (ON)
0000142C 33FC 0100 00A1 1200        		move.w	#$0100,($A11200).l			; request Z80 reset (OFF)
00001434 0839 0000 00A1 1100        		btst.b	#$00,($A11100).l			; has the Z80 stopped yet?
0000143C 66F6                       		bne.s	*-$08					; if not, branch
0000143E                            
0000143E                            SM_LoadZ80:
0000143E 12D8                       		move.b	(a0)+,(a1)+				; dump Z80 data to Z80 space
00001440 51C9 FFFC                  		dbf	d1,SM_LoadZ80				; repeat til done
00001444 41F9 0000 0000             		lea	(StopSample).l,a0			; load stop/mute sample address
0000144A 43F9 00A0 02EC             		lea	($A00000+MuteSample).l,a1		; load Z80 RAM space where the pointer is to be stored
00001450 12D8                       		move.b	(a0)+,(a1)+				; copy pointer over into Z80
00001452 12D8                       		move.b	(a0)+,(a1)+				; ''
00001454 12D8                       		move.b	(a0)+,(a1)+				; ''
00001456 33FC 0000 00A1 1200        		move.w	#$0000,($A11200).l			; request Z80 reset (ON)
0000145E 727F                       		moveq	#$7F,d1					; set repeat times
00001460 51C9 FFFE                  		dbf	d1,*					; there's no way of checking for reset, so a manual delay is necessary
00001464 33FC 0000 00A1 1100        		move.w	#$0000,($A11100).l			; request Z80 stop (OFF)
0000146C 33FC 0100 00A1 1200        		move.w	#$0100,($A11200).l			; request Z80 reset (OFF)
00001474 4E75                       		rts						; return
00001476                            
00001476                            ; ---------------------------------------------------------------------------
00001476                            ; Subroutine to	play a sound or	music track
00001476                            ; ---------------------------------------------------------------------------
00001476                            
00001476                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001476                            
00001476                            
00001476                            PlaySound:
00001476 11C0 F00A                  		move.b	d0,($FFFFF00A).w
0000147A 4E75                       		rts	
0000147C                            ; End of function PlaySound
0000147C                            
0000147C                            ; ---------------------------------------------------------------------------
0000147C                            ; Subroutine to	play a special sound/music (E0-E4)
0000147C                            ;
0000147C                            ; E0 - Fade out
0000147C                            ; E1 - Sega
0000147C                            ; E2 - Speed up
0000147C                            ; E3 - Normal speed
0000147C                            ; E4 - Stop
0000147C                            ; ---------------------------------------------------------------------------
0000147C                            
0000147C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000147C                            
0000147C                            
0000147C                            PlaySound_Special:
0000147C 11C0 F00B                  		move.b	d0,($FFFFF00B).w
00001480 4E75                       		rts	
00001482                            ; End of function PlaySound_Special
00001482                            
00001482                            ; ===========================================================================
00001482                            ; ---------------------------------------------------------------------------
00001482                            ; Unused sound/music subroutine
00001482                            ; ---------------------------------------------------------------------------
00001482                            
00001482                            PlaySound_Unk:
00001482 11C0 F00C                  		move.b	d0,($FFFFF00C).w
00001486 4E75                       		rts	
00001488                            
00001488                            ; ---------------------------------------------------------------------------
00001488                            ; Subroutine to	pause the game
00001488                            ; ---------------------------------------------------------------------------
00001488                            
00001488                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001488                            
00001488                            
00001488                            PauseGame:				; XREF: Level_MainLoop; et al
00001488 4E71                       		nop	
0000148A 4A38 FE12                  		tst.b	($FFFFFE12).w	; do you have any lives	left?
0000148E 6700                       		beq.s	Unpause		; if not, branch
00001490 4A78 F63A                  		tst.w	($FFFFF63A).w	; is game already paused?
00001494 6600                       		bne.s	loc_13BE	; if yes, branch
00001496 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
0000149C 6700                       		beq.s	Pause_DoNothing	; if not, branch
0000149E                            
0000149E                            loc_13BE:
0000149E 31FC 0001 F63A             		move.w	#1,($FFFFF63A).w ; freeze time
000014A4 11FC 0001 F003             		move.b	#1,($FFFFF003).w ; pause music
000014AA                            
000014AA                            loc_13CA:
000014AA 11FC 0010 F62A             		move.b	#$10,($FFFFF62A).w
000014B0 6100 0000                  		bsr.w	DelayProgram
000014B4 4A38 FFE1                  		tst.b	($FFFFFFE1).w	; is slow-motion cheat on?
000014B8 6700                       		beq.s	Pause_ChkStart	; if not, branch
000014BA 0838 0006 F605             		btst	#6,($FFFFF605).w ; is button A pressed?
000014C0 6700                       		beq.s	Pause_ChkBC	; if not, branch
000014C2 11FC 0004 F600             		move.b	#4,($FFFFF600).w ; set game mode to 4 (title screen)
000014C8 4E71                       		nop	
000014CA 6000                       		bra.s	loc_1404
000014CC                            ; ===========================================================================
000014CC                            
000014CC                            Pause_ChkBC:				; XREF: PauseGame
000014CC 0838 0004 F604             		btst	#4,($FFFFF604).w ; is button B pressed?
000014D2 6600                       		bne.s	Pause_SlowMo	; if yes, branch
000014D4 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
000014DA 6600                       		bne.s	Pause_SlowMo	; if yes, branch
000014DC                            
000014DC                            Pause_ChkStart:				; XREF: PauseGame
000014DC 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
000014E2 67C6                       		beq.s	loc_13CA	; if not, branch
000014E4                            
000014E4                            loc_1404:				; XREF: PauseGame
000014E4 11FC 0080 F003             		move.b	#$80,($FFFFF003).w
000014EA                            
000014EA                            Unpause:				; XREF: PauseGame
000014EA 31FC 0000 F63A             		move.w	#0,($FFFFF63A).w ; unpause the game
000014F0                            
000014F0                            Pause_DoNothing:			; XREF: PauseGame
000014F0 4E75                       		rts	
000014F2                            ; ===========================================================================
000014F2                            
000014F2                            Pause_SlowMo:				; XREF: PauseGame
000014F2 31FC 0001 F63A             		move.w	#1,($FFFFF63A).w
000014F8 11FC 0080 F003             		move.b	#$80,($FFFFF003).w
000014FE 4E75                       		rts	
00001500                            ; End of function PauseGame
00001500                            
00001500                            ; ---------------------------------------------------------------------------
00001500                            ; Subroutine to	display	patterns via the VDP
00001500                            ; ---------------------------------------------------------------------------
00001500                            
00001500                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001500                            
00001500                            
00001500                            ShowVDPGraphics:			; XREF: SegaScreen; TitleScreen; SS_BGLoad
00001500 4DF9 00C0 0000             		lea	($C00000).l,a6
00001506 283C 0080 0000             		move.l	#$800000,d4
0000150C                            
0000150C                            loc_142C:
0000150C 2D40 0004                  		move.l	d0,4(a6)
00001510 3601                       		move.w	d1,d3
00001512                            
00001512                            loc_1432:
00001512 3C99                       		move.w	(a1)+,(a6)
00001514 51CB FFFC                  		dbf	d3,loc_1432
00001518 D084                       		add.l	d4,d0
0000151A 51CA FFF0                  		dbf	d2,loc_142C
0000151E 4E75                       		rts	
00001520                            ; End of function ShowVDPGraphics
00001520                            
00001520                            ; ---------------------------------------------------------------------------
00001520                            ; Subroutine for queueing VDP commands (seems to only queue transfers to VRAM),
00001520                            ; to be issued the next time ProcessDMAQueue is called.
00001520                            ; Can be called a maximum of 18 times before the buffer needs to be cleared
00001520                            ; by issuing the commands (this subroutine DOES check for overflow)
00001520                            ; ---------------------------------------------------------------------------
00001520                            ; In case you wish to use this queue system outside of the spin dash, this is the
00001520                            ; registers in which it expects data in:
00001520                            ; d1.l: Address to data (In 68k address space)
00001520                            ; d2.w: Destination in VRAM
00001520                            ; d3.w: Length of data
00001520                            ; ---------------------------------------------------------------------------
00001520                            
00001520                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
00001520                            
00001520                            ; sub_144E: DMA_68KtoVRAM: QueueCopyToVRAM: QueueVDPCommand: Add_To_DMA_Queue:
00001520                            QueueDMATransfer:
00001520 2278 C8FC                  		movea.l	($FFFFC8FC).w,a1
00001524 B2FC C8FC                  		cmpa.w	#$C8FC,a1
00001528 6700                       		beq.s	QueueDMATransfer_Done ; return if there's no more room in the buffer
0000152A                            
0000152A                            		; piece together some VDP commands and store them for later...
0000152A 303C 9300                  		move.w	#$9300,d0 ; command to specify DMA transfer length & $00FF
0000152E 1003                       		move.b	d3,d0
00001530 32C0                       		move.w	d0,(a1)+ ; store command
00001532                            
00001532 303C 9400                  		move.w	#$9400,d0 ; command to specify DMA transfer length & $FF00
00001536 E04B                       		lsr.w	#8,d3
00001538 1003                       		move.b	d3,d0
0000153A 32C0                       		move.w	d0,(a1)+ ; store command
0000153C                            
0000153C 303C 9500                  		move.w	#$9500,d0 ; command to specify source address & $0001FE
00001540 E289                       		lsr.l	#1,d1
00001542 1001                       		move.b	d1,d0
00001544 32C0                       		move.w	d0,(a1)+ ; store command
00001546                            
00001546 303C 9600                  		move.w	#$9600,d0 ; command to specify source address & $01FE00
0000154A E089                       		lsr.l	#8,d1
0000154C 1001                       		move.b	d1,d0
0000154E 32C0                       		move.w	d0,(a1)+ ; store command
00001550                            
00001550 303C 9700                  		move.w	#$9700,d0 ; command to specify source address & $FE0000
00001554 E089                       		lsr.l	#8,d1
00001556 1001                       		move.b	d1,d0
00001558 32C0                       		move.w	d0,(a1)+ ; store command
0000155A                            
0000155A 0282 0000 FFFF             		andi.l	#$FFFF,d2 ; command to specify destination address and begin DMA
00001560 E58A                       		lsl.l	#2,d2
00001562 E44A                       		lsr.w	#2,d2
00001564 4842                       		swap	d2
00001566 0082 4000 0080             		ori.l	#$40000080,d2 ; set bits to specify VRAM transfer
0000156C 22C2                       		move.l	d2,(a1)+ ; store command
0000156E                            
0000156E 21C9 C8FC                  		move.l	a1,($FFFFC8FC).w ; set the next free slot address
00001572 B2FC C8FC                  		cmpa.w	#$C8FC,a1
00001576 6700                       		beq.s	QueueDMATransfer_Done ; return if there's no more room in the buffer
00001578 32BC 0000                  		move.w	#0,(a1) ; put a stop token at the end of the used part of the buffer
0000157C                            ; return_14AA:
0000157C                            QueueDMATransfer_Done:
0000157C 4E75                       		rts
0000157E                            ; End of function QueueDMATransfer
0000157E                            
0000157E                            
0000157E                            ; ---------------------------------------------------------------------------
0000157E                            ; Subroutine for issuing all VDP commands that were queued
0000157E                            ; (by earlier calls to QueueDMATransfer)
0000157E                            ; Resets the queue when it's done
0000157E                            ; ---------------------------------------------------------------------------
0000157E                            
0000157E                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
0000157E                            
0000157E                            ; sub_14AC: CopyToVRAM: IssueVDPCommands: Process_DMA: Process_DMA_Queue:
0000157E                            ProcessDMAQueue:
0000157E 4BF9 00C0 0004             		lea	($C00004).l,a5
00001584 43F8 C800                  		lea	($FFFFC800).w,a1
00001588                            ; loc_14B6:
00001588                            ProcessDMAQueue_Loop:
00001588 3019                       		move.w	(a1)+,d0
0000158A 6700                       		beq.s	ProcessDMAQueue_Done ; branch if we reached a stop token
0000158C                            		; issue a set of VDP commands...
0000158C 3A80                       		move.w	d0,(a5)		; transfer length
0000158E 3A99                       		move.w	(a1)+,(a5)	; transfer length
00001590 3A99                       		move.w	(a1)+,(a5)	; source address
00001592 3A99                       		move.w	(a1)+,(a5)	; source address
00001594 3A99                       		move.w	(a1)+,(a5)	; source address
00001596 3A99                       		move.w	(a1)+,(a5)	; destination
00001598 3A99                       		move.w	(a1)+,(a5)	; destination
0000159A B2FC C8FC                  		cmpa.w	#$C8FC,a1
0000159E 66E8                       		bne.s	ProcessDMAQueue_Loop ; loop if we haven't reached the end of the buffer
000015A0                            ; loc_14CE:
000015A0                            ProcessDMAQueue_Done:
000015A0 31FC 0000 C800             		move.w	#0,($FFFFC800).w
000015A6 21FC FFFF C800 C8FC        		move.l	#$FFFFC800,($FFFFC8FC).w
000015AE 4E75                       		rts
000015B0                            ; End of function ProcessDMAQueue
000015B0                            
000015B0                            ; ---------------------------------------------------------------------------
000015B0                            ; Nemesis decompression	algorithm
000015B0                            ; ---------------------------------------------------------------------------
000015B0                            
000015B0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000015B0                            
000015B0                            
000015B0                            NemDec:
000015B0 48E7 FFDC                  		movem.l	d0-a1/a3-a5,-(sp)
000015B4 47F9 0000 0000             		lea	(loc_1502).l,a3
000015BA 49F9 00C0 0000             		lea	($C00000).l,a4
000015C0 6000                       		bra.s	loc_145C
000015C2                            ; ===========================================================================
000015C2 48E7 FFDC                  		movem.l	d0-a1/a3-a5,-(sp)
000015C6 47F9 0000 0000             		lea	(loc_1518).l,a3
000015CC                            
000015CC                            loc_145C:				; XREF: NemDec
000015CC 43F8 AA00                  		lea	($FFFFAA00).w,a1
000015D0 3418                       		move.w	(a0)+,d2
000015D2 E34A                       		lsl.w	#1,d2
000015D4 6400                       		bcc.s	loc_146A
000015D6 D6FC 000A                  		adda.w	#$A,a3
000015DA                            
000015DA                            loc_146A:
000015DA E54A                       		lsl.w	#2,d2
000015DC 3A42                       		movea.w	d2,a5
000015DE 7608                       		moveq	#8,d3
000015E0 7400                       		moveq	#0,d2
000015E2 7800                       		moveq	#0,d4
000015E4 6100 0000                  		bsr.w	NemDec4
000015E8 1A18                       		move.b	(a0)+,d5
000015EA E145                       		asl.w	#8,d5
000015EC 1A18                       		move.b	(a0)+,d5
000015EE 3C3C 0010                  		move.w	#$10,d6
000015F2 6100                       		bsr.s	NemDec2
000015F4 4CDF 3BFF                  		movem.l	(sp)+,d0-a1/a3-a5
000015F8 4E75                       		rts	
000015FA                            ; End of function NemDec
000015FA                            
000015FA                            
000015FA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000015FA                            
000015FA                            
000015FA                            NemDec2:				; XREF: NemDec
000015FA 3E06                       		move.w	d6,d7
000015FC 5147                       		subq.w	#8,d7
000015FE 3205                       		move.w	d5,d1
00001600 EE69                       		lsr.w	d7,d1
00001602 0C01 00FC                  		cmpi.b	#-4,d1
00001606 6400                       		bcc.s	loc_14D6
00001608 0241 00FF                  		andi.w	#$FF,d1
0000160C D241                       		add.w	d1,d1
0000160E 1031 1000                  		move.b	(a1,d1.w),d0
00001612 4880                       		ext.w	d0
00001614 9C40                       		sub.w	d0,d6
00001616 0C46 0009                  		cmpi.w	#9,d6
0000161A 6400                       		bcc.s	loc_14B2
0000161C 5046                       		addq.w	#8,d6
0000161E E145                       		asl.w	#8,d5
00001620 1A18                       		move.b	(a0)+,d5
00001622                            
00001622                            loc_14B2:
00001622 1231 1001                  		move.b	1(a1,d1.w),d1
00001626 3001                       		move.w	d1,d0
00001628 0241 000F                  		andi.w	#$F,d1
0000162C 0240 00F0                  		andi.w	#$F0,d0
00001630                            
00001630                            loc_14C0:				; XREF: NemDec3
00001630 E848                       		lsr.w	#4,d0
00001632                            
00001632                            loc_14C2:				; XREF: NemDec3
00001632 E98C                       		lsl.l	#4,d4
00001634 8801                       		or.b	d1,d4
00001636 5343                       		subq.w	#1,d3
00001638 6600                       		bne.s	loc_14D0
0000163A 4ED3                       		jmp	(a3)
0000163C                            ; End of function NemDec2
0000163C                            
0000163C                            
0000163C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000163C                            
0000163C                            
0000163C                            NemDec3:				; XREF: loc_1502
0000163C 7800                       		moveq	#0,d4
0000163E 7608                       		moveq	#8,d3
00001640                            
00001640                            loc_14D0:				; XREF: NemDec2
00001640 51C8 FFF0                  		dbf	d0,loc_14C2
00001644 60B4                       		bra.s	NemDec2
00001646                            ; ===========================================================================
00001646                            
00001646                            loc_14D6:				; XREF: NemDec2
00001646 5D46                       		subq.w	#6,d6
00001648 0C46 0009                  		cmpi.w	#9,d6
0000164C 6400                       		bcc.s	loc_14E4
0000164E 5046                       		addq.w	#8,d6
00001650 E145                       		asl.w	#8,d5
00001652 1A18                       		move.b	(a0)+,d5
00001654                            
00001654                            loc_14E4:				; XREF: NemDec3
00001654 5F46                       		subq.w	#7,d6
00001656 3205                       		move.w	d5,d1
00001658 EC69                       		lsr.w	d6,d1
0000165A 3001                       		move.w	d1,d0
0000165C 0241 000F                  		andi.w	#$F,d1
00001660 0240 0070                  		andi.w	#$70,d0
00001664 0C46 0009                  		cmpi.w	#9,d6
00001668 64C6                       		bcc.s	loc_14C0
0000166A 5046                       		addq.w	#8,d6
0000166C E145                       		asl.w	#8,d5
0000166E 1A18                       		move.b	(a0)+,d5
00001670 60BE                       		bra.s	loc_14C0
00001672                            ; End of function NemDec3
00001672                            
00001672                            ; ===========================================================================
00001672                            
00001672                            loc_1502:				; XREF: NemDec
00001672 2884                       		move.l	d4,(a4)
00001674 534D                       		subq.w	#1,a5
00001676 380D                       		move.w	a5,d4
00001678 66C2                       		bne.s	NemDec3
0000167A 4E75                       		rts	
0000167C                            ; ===========================================================================
0000167C B982                       		eor.l	d4,d2
0000167E 2882                       		move.l	d2,(a4)
00001680 534D                       		subq.w	#1,a5
00001682 380D                       		move.w	a5,d4
00001684 66B6                       		bne.s	NemDec3
00001686 4E75                       		rts	
00001688                            ; ===========================================================================
00001688                            
00001688                            loc_1518:				; XREF: NemDec
00001688 28C4                       		move.l	d4,(a4)+
0000168A 534D                       		subq.w	#1,a5
0000168C 380D                       		move.w	a5,d4
0000168E 66AC                       		bne.s	NemDec3
00001690 4E75                       		rts	
00001692                            ; ===========================================================================
00001692 B982                       		eor.l	d4,d2
00001694 28C2                       		move.l	d2,(a4)+
00001696 534D                       		subq.w	#1,a5
00001698 380D                       		move.w	a5,d4
0000169A 66A0                       		bne.s	NemDec3
0000169C 4E75                       		rts	
0000169E                            
0000169E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000169E                            
0000169E                            
0000169E                            NemDec4:				; XREF: NemDec
0000169E 1018                       		move.b	(a0)+,d0
000016A0                            
000016A0                            loc_1530:
000016A0 0C00 00FF                  		cmpi.b	#-1,d0
000016A4 6600                       		bne.s	loc_1538
000016A6 4E75                       		rts	
000016A8                            ; ===========================================================================
000016A8                            
000016A8                            loc_1538:				; XREF: NemDec4
000016A8 3E00                       		move.w	d0,d7
000016AA                            
000016AA                            loc_153A:
000016AA 1018                       		move.b	(a0)+,d0
000016AC 0C00 0080                  		cmpi.b	#$80,d0
000016B0 64EE                       		bcc.s	loc_1530
000016B2 1200                       		move.b	d0,d1
000016B4 0247 000F                  		andi.w	#$F,d7
000016B8 0241 0070                  		andi.w	#$70,d1
000016BC 8E41                       		or.w	d1,d7
000016BE 0240 000F                  		andi.w	#$F,d0
000016C2 1200                       		move.b	d0,d1
000016C4 E149                       		lsl.w	#8,d1
000016C6 8E41                       		or.w	d1,d7
000016C8 7208                       		moveq	#8,d1
000016CA 9240                       		sub.w	d0,d1
000016CC 6600                       		bne.s	loc_1568
000016CE 1018                       		move.b	(a0)+,d0
000016D0 D040                       		add.w	d0,d0
000016D2 3387 0000                  		move.w	d7,(a1,d0.w)
000016D6 60D2                       		bra.s	loc_153A
000016D8                            ; ===========================================================================
000016D8                            
000016D8                            loc_1568:				; XREF: NemDec4
000016D8 1018                       		move.b	(a0)+,d0
000016DA E368                       		lsl.w	d1,d0
000016DC D040                       		add.w	d0,d0
000016DE 7A01                       		moveq	#1,d5
000016E0 E36D                       		lsl.w	d1,d5
000016E2 5345                       		subq.w	#1,d5
000016E4                            
000016E4                            loc_1574:
000016E4 3387 0000                  		move.w	d7,(a1,d0.w)
000016E8 5440                       		addq.w	#2,d0
000016EA 51CD FFF8                  		dbf	d5,loc_1574
000016EE 60BA                       		bra.s	loc_153A
000016F0                            ; End of function NemDec4
000016F0                            
000016F0                            ; ---------------------------------------------------------------------------
000016F0                            ; Subroutine to	load pattern load cues
000016F0                            ; ---------------------------------------------------------------------------
000016F0                            
000016F0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000016F0                            
000016F0                            
000016F0                            LoadPLC:
000016F0 48E7 0060                  		movem.l	a1-a2,-(sp)
000016F4 43F9 0000 0000             		lea	(ArtLoadCues).l,a1
000016FA D040                       		add.w	d0,d0
000016FC 3031 0000                  		move.w	(a1,d0.w),d0
00001700 43F1 0000                  		lea	(a1,d0.w),a1
00001704 45F8 F680                  		lea	($FFFFF680).w,a2
00001708                            
00001708                            loc_1598:
00001708 4A92                       		tst.l	(a2)
0000170A 6700                       		beq.s	loc_15A0
0000170C 5C4A                       		addq.w	#6,a2
0000170E 60F8                       		bra.s	loc_1598
00001710                            ; ===========================================================================
00001710                            
00001710                            loc_15A0:				; XREF: LoadPLC
00001710 3019                       		move.w	(a1)+,d0
00001712 6B00                       		bmi.s	loc_15AC
00001714                            
00001714                            loc_15A4:
00001714 24D9                       		move.l	(a1)+,(a2)+
00001716 34D9                       		move.w	(a1)+,(a2)+
00001718 51C8 FFFA                  		dbf	d0,loc_15A4
0000171C                            
0000171C                            loc_15AC:
0000171C 4CDF 0600                  		movem.l	(sp)+,a1-a2
00001720 4E75                       		rts	
00001722                            ; End of function LoadPLC
00001722                            
00001722                            
00001722                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001722                            
00001722                            
00001722                            LoadPLC2:
00001722 48E7 0060                  		movem.l	a1-a2,-(sp)
00001726 43F9 0000 0000             		lea	(ArtLoadCues).l,a1
0000172C D040                       		add.w	d0,d0
0000172E 3031 0000                  		move.w	(a1,d0.w),d0
00001732 43F1 0000                  		lea	(a1,d0.w),a1
00001736 6100                       		bsr.s	ClearPLC
00001738 45F8 F680                  		lea	($FFFFF680).w,a2
0000173C 3019                       		move.w	(a1)+,d0
0000173E 6B00                       		bmi.s	loc_15D8
00001740                            
00001740                            loc_15D0:
00001740 24D9                       		move.l	(a1)+,(a2)+
00001742 34D9                       		move.w	(a1)+,(a2)+
00001744 51C8 FFFA                  		dbf	d0,loc_15D0
00001748                            
00001748                            loc_15D8:
00001748 4CDF 0600                  		movem.l	(sp)+,a1-a2
0000174C 4E75                       		rts	
0000174E                            ; End of function LoadPLC2
0000174E                            
0000174E                            ; ---------------------------------------------------------------------------
0000174E                            ; Subroutine to	clear the pattern load cues
0000174E                            ; ---------------------------------------------------------------------------
0000174E                            
0000174E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000174E                            
0000174E                            
0000174E                            ClearPLC:				; XREF: LoadPLC2
0000174E 45F8 F680                  		lea	($FFFFF680).w,a2
00001752 701F                       		moveq	#$1F,d0
00001754                            
00001754                            ClearPLC_Loop:
00001754 429A                       		clr.l	(a2)+
00001756 51C8 FFFC                  		dbf	d0,ClearPLC_Loop
0000175A 4E75                       		rts	
0000175C                            ; End of function ClearPLC
0000175C                            
0000175C                            ; ---------------------------------------------------------------------------
0000175C                            ; Subroutine to	use graphics listed in a pattern load cue
0000175C                            ; ---------------------------------------------------------------------------
0000175C                            
0000175C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000175C                            
0000175C                            
0000175C                            RunPLC_RAM:				; XREF: Pal_FadeTo
0000175C 4AB8 F680                  		tst.l	($FFFFF680).w
00001760 6700                       		beq.s	locret_1640
00001762 4A78 F6F8                  		tst.w	($FFFFF6F8).w
00001766 6600                       		bne.s	locret_1640
00001768 2078 F680                  		movea.l	($FFFFF680).w,a0
0000176C 47F9 0000 1672             		lea	(loc_1502).l,a3
00001772 43F8 AA00                  		lea	($FFFFAA00).w,a1
00001776 3418                       		move.w	(a0)+,d2
00001778 6A00                       		bpl.s	loc_160E
0000177A D6FC 000A                  		adda.w	#$A,a3
0000177E                            
0000177E                            loc_160E:
0000177E 0242 7FFF                  		andi.w	#$7FFF,d2
00001782 31C2 F6F8                  		move.w	d2,($FFFFF6F8).w
00001786 6100 FF16                  		bsr.w	NemDec4
0000178A 1A18                       		move.b	(a0)+,d5
0000178C E145                       		asl.w	#8,d5
0000178E 1A18                       		move.b	(a0)+,d5
00001790 7C10                       		moveq	#$10,d6
00001792 7000                       		moveq	#0,d0
00001794 21C8 F680                  		move.l	a0,($FFFFF680).w
00001798 21CB F6E0                  		move.l	a3,($FFFFF6E0).w
0000179C 21C0 F6E4                  		move.l	d0,($FFFFF6E4).w
000017A0 21C0 F6E8                  		move.l	d0,($FFFFF6E8).w
000017A4 21C0 F6EC                  		move.l	d0,($FFFFF6EC).w
000017A8 21C5 F6F0                  		move.l	d5,($FFFFF6F0).w
000017AC 21C6 F6F4                  		move.l	d6,($FFFFF6F4).w
000017B0                            
000017B0                            locret_1640:
000017B0 4E75                       		rts	
000017B2                            ; End of function RunPLC_RAM
000017B2                            
000017B2                            
000017B2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000017B2                            
000017B2                            
000017B2                            sub_1642:				; XREF: loc_C44; loc_F54; loc_F9A
000017B2 4A78 F6F8                  		tst.w	($FFFFF6F8).w
000017B6 6700 0000                  		beq.w	locret_16DA
000017BA 31FC 0009 F6FA             		move.w	#9,($FFFFF6FA).w
000017C0 7000                       		moveq	#0,d0
000017C2 3038 F684                  		move.w	($FFFFF684).w,d0
000017C6 0678 0120 F684             		addi.w	#$120,($FFFFF684).w
000017CC 6000                       		bra.s	loc_1676
000017CE                            ; End of function sub_1642
000017CE                            
000017CE                            
000017CE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000017CE                            
000017CE                            
000017CE                            sub_165E:				; XREF: Demo_Time
000017CE 4A78 F6F8                  		tst.w	($FFFFF6F8).w
000017D2 6700                       		beq.s	locret_16DA
000017D4 31FC 0003 F6FA             		move.w	#3,($FFFFF6FA).w
000017DA 7000                       		moveq	#0,d0
000017DC 3038 F684                  		move.w	($FFFFF684).w,d0
000017E0 0678 0060 F684             		addi.w	#$60,($FFFFF684).w
000017E6                            
000017E6                            loc_1676:				; XREF: sub_1642
000017E6 49F9 00C0 0004             		lea	($C00004).l,a4
000017EC E588                       		lsl.l	#2,d0
000017EE E448                       		lsr.w	#2,d0
000017F0 0040 4000                  		ori.w	#$4000,d0
000017F4 4840                       		swap	d0
000017F6 2880                       		move.l	d0,(a4)
000017F8 594C                       		subq.w	#4,a4
000017FA 2078 F680                  		movea.l	($FFFFF680).w,a0
000017FE 2678 F6E0                  		movea.l	($FFFFF6E0).w,a3
00001802 2038 F6E4                  		move.l	($FFFFF6E4).w,d0
00001806 2238 F6E8                  		move.l	($FFFFF6E8).w,d1
0000180A 2438 F6EC                  		move.l	($FFFFF6EC).w,d2
0000180E 2A38 F6F0                  		move.l	($FFFFF6F0).w,d5
00001812 2C38 F6F4                  		move.l	($FFFFF6F4).w,d6
00001816 43F8 AA00                  		lea	($FFFFAA00).w,a1
0000181A                            
0000181A                            loc_16AA:				; XREF: sub_165E
0000181A 3A7C 0008                  		movea.w	#8,a5
0000181E 6100 FE1C                  		bsr.w	NemDec3
00001822 5378 F6F8                  		subq.w	#1,($FFFFF6F8).w
00001826 6700                       		beq.s	loc_16DC
00001828 5378 F6FA                  		subq.w	#1,($FFFFF6FA).w
0000182C 66EC                       		bne.s	loc_16AA
0000182E 21C8 F680                  		move.l	a0,($FFFFF680).w
00001832 21CB F6E0                  		move.l	a3,($FFFFF6E0).w
00001836 21C0 F6E4                  		move.l	d0,($FFFFF6E4).w
0000183A 21C1 F6E8                  		move.l	d1,($FFFFF6E8).w
0000183E 21C2 F6EC                  		move.l	d2,($FFFFF6EC).w
00001842 21C5 F6F0                  		move.l	d5,($FFFFF6F0).w
00001846 21C6 F6F4                  		move.l	d6,($FFFFF6F4).w
0000184A                            
0000184A                            locret_16DA:				; XREF: sub_1642
0000184A 4E75                       		rts	
0000184C                            ; ===========================================================================
0000184C                            
0000184C                            loc_16DC:				; XREF: sub_165E
0000184C 41F8 F680                  		lea	($FFFFF680).w,a0
00001850 7015                       		moveq	#$15,d0
00001852                            
00001852                            loc_16E2:				; XREF: sub_165E
00001852 20E8 0006                  		move.l	6(a0),(a0)+
00001856 51C8 FFFA                  		dbf	d0,loc_16E2
0000185A 4E75                       		rts	
0000185C                            ; End of function sub_165E
0000185C                            
0000185C                            ; ---------------------------------------------------------------------------
0000185C                            ; Subroutine to	execute	the pattern load cue
0000185C                            ; ---------------------------------------------------------------------------
0000185C                            
0000185C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000185C                            
0000185C                            
0000185C                            RunPLC_ROM:
0000185C 43F9 0000 0000             		lea	(ArtLoadCues).l,a1 ; load the PLC index
00001862 D040                       		add.w	d0,d0
00001864 3031 0000                  		move.w	(a1,d0.w),d0
00001868 43F1 0000                  		lea	(a1,d0.w),a1
0000186C 3219                       		move.w	(a1)+,d1	; load number of entries in the	PLC
0000186E                            
0000186E                            RunPLC_Loop:
0000186E 2059                       		movea.l	(a1)+,a0	; get art pointer
00001870 7000                       		moveq	#0,d0
00001872 3019                       		move.w	(a1)+,d0	; get VRAM address
00001874 E588                       		lsl.l	#2,d0		; divide address by $20
00001876 E448                       		lsr.w	#2,d0
00001878 0040 4000                  		ori.w	#$4000,d0
0000187C 4840                       		swap	d0
0000187E 23C0 00C0 0004             		move.l	d0,($C00004).l	; put the VRAM address into VDP
00001884 6100 FD2A                  		bsr.w	NemDec		; decompress
00001888 51C9 FFE4                  		dbf	d1,RunPLC_Loop	; loop for number of entries
0000188C 4E75                       		rts	
0000188E                            ; End of function RunPLC_ROM
0000188E                            
0000188E                            ; ---------------------------------------------------------------------------
0000188E                            ; Enigma decompression algorithm
0000188E                            ; ---------------------------------------------------------------------------
0000188E                            
0000188E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000188E                            
0000188E                            
0000188E                            EniDec:
0000188E 48E7 FF7C                  		movem.l	d0-d7/a1-a5,-(sp)
00001892 3640                       		movea.w	d0,a3
00001894 1018                       		move.b	(a0)+,d0
00001896 4880                       		ext.w	d0
00001898 3A40                       		movea.w	d0,a5
0000189A 1818                       		move.b	(a0)+,d4
0000189C E70C                       		lsl.b	#3,d4
0000189E 3458                       		movea.w	(a0)+,a2
000018A0 D4CB                       		adda.w	a3,a2
000018A2 3858                       		movea.w	(a0)+,a4
000018A4 D8CB                       		adda.w	a3,a4
000018A6 1A18                       		move.b	(a0)+,d5
000018A8 E145                       		asl.w	#8,d5
000018AA 1A18                       		move.b	(a0)+,d5
000018AC 7C10                       		moveq	#$10,d6
000018AE                            
000018AE                            loc_173E:				; XREF: loc_1768
000018AE 7007                       		moveq	#7,d0
000018B0 3E06                       		move.w	d6,d7
000018B2 9E40                       		sub.w	d0,d7
000018B4 3205                       		move.w	d5,d1
000018B6 EE69                       		lsr.w	d7,d1
000018B8 0241 007F                  		andi.w	#$7F,d1
000018BC 3401                       		move.w	d1,d2
000018BE 0C41 0040                  		cmpi.w	#$40,d1
000018C2 6400                       		bcc.s	loc_1758
000018C4 7006                       		moveq	#6,d0
000018C6 E24A                       		lsr.w	#1,d2
000018C8                            
000018C8                            loc_1758:
000018C8 6100 0000                  		bsr.w	sub_188C
000018CC 0242 000F                  		andi.w	#$F,d2
000018D0 E849                       		lsr.w	#4,d1
000018D2 D241                       		add.w	d1,d1
000018D4 4EFB 1000                  		jmp	loc_17B4(pc,d1.w)
000018D8                            ; End of function EniDec
000018D8                            
000018D8                            ; ===========================================================================
000018D8                            
000018D8                            loc_1768:				; XREF: loc_17B4
000018D8 32CA                       		move.w	a2,(a1)+
000018DA 524A                       		addq.w	#1,a2
000018DC 51CA FFFA                  		dbf	d2,loc_1768
000018E0 60CC                       		bra.s	loc_173E
000018E2                            ; ===========================================================================
000018E2                            
000018E2                            loc_1772:				; XREF: loc_17B4
000018E2 32CC                       		move.w	a4,(a1)+
000018E4 51CA FFFC                  		dbf	d2,loc_1772
000018E8 60C4                       		bra.s	loc_173E
000018EA                            ; ===========================================================================
000018EA                            
000018EA                            loc_177A:				; XREF: loc_17B4
000018EA 6100 0000                  		bsr.w	loc_17DC
000018EE                            
000018EE                            loc_177E:
000018EE 32C1                       		move.w	d1,(a1)+
000018F0 51CA FFFC                  		dbf	d2,loc_177E
000018F4 60B8                       		bra.s	loc_173E
000018F6                            ; ===========================================================================
000018F6                            
000018F6                            loc_1786:				; XREF: loc_17B4
000018F6 6100 0000                  		bsr.w	loc_17DC
000018FA                            
000018FA                            loc_178A:
000018FA 32C1                       		move.w	d1,(a1)+
000018FC 5241                       		addq.w	#1,d1
000018FE 51CA FFFA                  		dbf	d2,loc_178A
00001902 60AA                       		bra.s	loc_173E
00001904                            ; ===========================================================================
00001904                            
00001904                            loc_1794:				; XREF: loc_17B4
00001904 6100 0000                  		bsr.w	loc_17DC
00001908                            
00001908                            loc_1798:
00001908 32C1                       		move.w	d1,(a1)+
0000190A 5341                       		subq.w	#1,d1
0000190C 51CA FFFA                  		dbf	d2,loc_1798
00001910 609C                       		bra.s	loc_173E
00001912                            ; ===========================================================================
00001912                            
00001912                            loc_17A2:				; XREF: loc_17B4
00001912 0C42 000F                  		cmpi.w	#$F,d2
00001916 6700                       		beq.s	loc_17C4
00001918                            
00001918                            loc_17A8:
00001918 6100 0000                  		bsr.w	loc_17DC
0000191C 32C1                       		move.w	d1,(a1)+
0000191E 51CA FFF8                  		dbf	d2,loc_17A8
00001922 608A                       		bra.s	loc_173E
00001924                            ; ===========================================================================
00001924                            
00001924                            loc_17B4:				; XREF: EniDec
00001924 60B2                       		bra.s	loc_1768
00001926                            ; ===========================================================================
00001926 60B0                       		bra.s	loc_1768
00001928                            ; ===========================================================================
00001928 60B8                       		bra.s	loc_1772
0000192A                            ; ===========================================================================
0000192A 60B6                       		bra.s	loc_1772
0000192C                            ; ===========================================================================
0000192C 60BC                       		bra.s	loc_177A
0000192E                            ; ===========================================================================
0000192E 60C6                       		bra.s	loc_1786
00001930                            ; ===========================================================================
00001930 60D2                       		bra.s	loc_1794
00001932                            ; ===========================================================================
00001932 60DE                       		bra.s	loc_17A2
00001934                            ; ===========================================================================
00001934                            
00001934                            loc_17C4:				; XREF: loc_17A2
00001934 5348                       		subq.w	#1,a0
00001936 0C46 0010                  		cmpi.w	#$10,d6
0000193A 6600                       		bne.s	loc_17CE
0000193C 5348                       		subq.w	#1,a0
0000193E                            
0000193E                            loc_17CE:
0000193E 3008                       		move.w	a0,d0
00001940 E248                       		lsr.w	#1,d0
00001942 6400                       		bcc.s	loc_17D6
00001944 5248                       		addq.w	#1,a0
00001946                            
00001946                            loc_17D6:
00001946 4CDF 3EFF                  		movem.l	(sp)+,d0-d7/a1-a5
0000194A 4E75                       		rts	
0000194C                            ; ===========================================================================
0000194C                            
0000194C                            loc_17DC:				; XREF: loc_17A2
0000194C 360B                       		move.w	a3,d3
0000194E 1204                       		move.b	d4,d1
00001950 D201                       		add.b	d1,d1
00001952 6400                       		bcc.s	loc_17EE
00001954 5346                       		subq.w	#1,d6
00001956 0D05                       		btst	d6,d5
00001958 6700                       		beq.s	loc_17EE
0000195A 0043 8000                  		ori.w	#-$8000,d3
0000195E                            
0000195E                            loc_17EE:
0000195E D201                       		add.b	d1,d1
00001960 6400                       		bcc.s	loc_17FC
00001962 5346                       		subq.w	#1,d6
00001964 0D05                       		btst	d6,d5
00001966 6700                       		beq.s	loc_17FC
00001968 0643 4000                  		addi.w	#$4000,d3
0000196C                            
0000196C                            loc_17FC:
0000196C D201                       		add.b	d1,d1
0000196E 6400                       		bcc.s	loc_180A
00001970 5346                       		subq.w	#1,d6
00001972 0D05                       		btst	d6,d5
00001974 6700                       		beq.s	loc_180A
00001976 0643 2000                  		addi.w	#$2000,d3
0000197A                            
0000197A                            loc_180A:
0000197A D201                       		add.b	d1,d1
0000197C 6400                       		bcc.s	loc_1818
0000197E 5346                       		subq.w	#1,d6
00001980 0D05                       		btst	d6,d5
00001982 6700                       		beq.s	loc_1818
00001984 0043 1000                  		ori.w	#$1000,d3
00001988                            
00001988                            loc_1818:
00001988 D201                       		add.b	d1,d1
0000198A 6400                       		bcc.s	loc_1826
0000198C 5346                       		subq.w	#1,d6
0000198E 0D05                       		btst	d6,d5
00001990 6700                       		beq.s	loc_1826
00001992 0043 0800                  		ori.w	#$800,d3
00001996                            
00001996                            loc_1826:
00001996 3205                       		move.w	d5,d1
00001998 3E06                       		move.w	d6,d7
0000199A 9E4D                       		sub.w	a5,d7
0000199C 6400                       		bcc.s	loc_1856
0000199E 3C07                       		move.w	d7,d6
000019A0 0646 0010                  		addi.w	#$10,d6
000019A4 4447                       		neg.w	d7
000019A6 EF69                       		lsl.w	d7,d1
000019A8 1A10                       		move.b	(a0),d5
000019AA EF3D                       		rol.b	d7,d5
000019AC DE47                       		add.w	d7,d7
000019AE CA7B 7000                  		and.w	word_186C-2(pc,d7.w),d5
000019B2 D245                       		add.w	d5,d1
000019B4                            
000019B4                            loc_1844:				; XREF: loc_1868
000019B4 300D                       		move.w	a5,d0
000019B6 D040                       		add.w	d0,d0
000019B8 C27B 0000                  		and.w	word_186C-2(pc,d0.w),d1
000019BC D243                       		add.w	d3,d1
000019BE 1A18                       		move.b	(a0)+,d5
000019C0 E14D                       		lsl.w	#8,d5
000019C2 1A18                       		move.b	(a0)+,d5
000019C4 4E75                       		rts	
000019C6                            ; ===========================================================================
000019C6                            
000019C6                            loc_1856:				; XREF: loc_1826
000019C6 6700                       		beq.s	loc_1868
000019C8 EE69                       		lsr.w	d7,d1
000019CA 300D                       		move.w	a5,d0
000019CC D040                       		add.w	d0,d0
000019CE C27B 0000                  		and.w	word_186C-2(pc,d0.w),d1
000019D2 D243                       		add.w	d3,d1
000019D4 300D                       		move.w	a5,d0
000019D6 6000                       		bra.s	sub_188C
000019D8                            ; ===========================================================================
000019D8                            
000019D8                            loc_1868:				; XREF: loc_1856
000019D8 7C10                       		moveq	#$10,d6
000019DA                            
000019DA                            loc_186A:
000019DA 60D8                       		bra.s	loc_1844
000019DC                            ; ===========================================================================
000019DC 0001 0003 0007 000F 001F+  word_186C:	dc.w 1,	3, 7, $F, $1F, $3F, $7F, $FF, $1FF, $3FF, $7FF
000019F2 0FFF 1FFF 3FFF 7FFF FFFF   		dc.w $FFF, $1FFF, $3FFF, $7FFF,	$FFFF	; XREF: loc_1856
000019FC                            
000019FC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000019FC                            
000019FC                            
000019FC                            sub_188C:				; XREF: EniDec
000019FC 9C40                       		sub.w	d0,d6
000019FE 0C46 0009                  		cmpi.w	#9,d6
00001A02 6400                       		bcc.s	locret_189A
00001A04 5046                       		addq.w	#8,d6
00001A06 E145                       		asl.w	#8,d5
00001A08 1A18                       		move.b	(a0)+,d5
00001A0A                            
00001A0A                            locret_189A:
00001A0A 4E75                       		rts	
00001A0C                            ; End of function sub_188C
00001A0C                            
00001A0C                            ; ---------------------------------------------------------------------------
00001A0C                            ; Kosinski decompression algorithm
00001A0C                            ; ---------------------------------------------------------------------------
00001A0C                            
00001A0C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001A0C                            
00001A0C                            
00001A0C                            KosDec:
00001A0C                            
00001A0C =FFFFFFFE                  var_2		= -2
00001A0C =FFFFFFFF                  var_1		= -1
00001A0C                            
00001A0C 558F                       		subq.l	#2,sp
00001A0E 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001A12 1E98                       		move.b	(a0)+,(sp)
00001A14 3A17                       		move.w	(sp),d5
00001A16 780F                       		moveq	#$F,d4
00001A18                            
00001A18                            loc_18A8:
00001A18 E24D                       		lsr.w	#1,d5
00001A1A 40C6                       		move	sr,d6
00001A1C 51CC 0000                  		dbf	d4,loc_18BA
00001A20 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001A24 1E98                       		move.b	(a0)+,(sp)
00001A26 3A17                       		move.w	(sp),d5
00001A28 780F                       		moveq	#$F,d4
00001A2A                            
00001A2A                            loc_18BA:
00001A2A 44C6                       		move	d6,ccr
00001A2C 6400                       		bcc.s	loc_18C2
00001A2E 12D8                       		move.b	(a0)+,(a1)+
00001A30 60E6                       		bra.s	loc_18A8
00001A32                            ; ===========================================================================
00001A32                            
00001A32                            loc_18C2:				; XREF: KosDec
00001A32 7600                       		moveq	#0,d3
00001A34 E24D                       		lsr.w	#1,d5
00001A36 40C6                       		move	sr,d6
00001A38 51CC 0000                  		dbf	d4,loc_18D6
00001A3C 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001A40 1E98                       		move.b	(a0)+,(sp)
00001A42 3A17                       		move.w	(sp),d5
00001A44 780F                       		moveq	#$F,d4
00001A46                            
00001A46                            loc_18D6:
00001A46 44C6                       		move	d6,ccr
00001A48 6500                       		bcs.s	loc_1906
00001A4A E24D                       		lsr.w	#1,d5
00001A4C 51CC 0000                  		dbf	d4,loc_18EA
00001A50 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001A54 1E98                       		move.b	(a0)+,(sp)
00001A56 3A17                       		move.w	(sp),d5
00001A58 780F                       		moveq	#$F,d4
00001A5A                            
00001A5A                            loc_18EA:
00001A5A E353                       		roxl.w	#1,d3
00001A5C E24D                       		lsr.w	#1,d5
00001A5E 51CC 0000                  		dbf	d4,loc_18FC
00001A62 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001A66 1E98                       		move.b	(a0)+,(sp)
00001A68 3A17                       		move.w	(sp),d5
00001A6A 780F                       		moveq	#$F,d4
00001A6C                            
00001A6C                            loc_18FC:
00001A6C E353                       		roxl.w	#1,d3
00001A6E 5243                       		addq.w	#1,d3
00001A70 74FF                       		moveq	#-1,d2
00001A72 1418                       		move.b	(a0)+,d2
00001A74 6000                       		bra.s	loc_191C
00001A76                            ; ===========================================================================
00001A76                            
00001A76                            loc_1906:				; XREF: loc_18C2
00001A76 1018                       		move.b	(a0)+,d0
00001A78 1218                       		move.b	(a0)+,d1
00001A7A 74FF                       		moveq	#-1,d2
00001A7C 1401                       		move.b	d1,d2
00001A7E EB4A                       		lsl.w	#5,d2
00001A80 1400                       		move.b	d0,d2
00001A82 0241 0007                  		andi.w	#7,d1
00001A86 6700                       		beq.s	loc_1928
00001A88 1601                       		move.b	d1,d3
00001A8A 5243                       		addq.w	#1,d3
00001A8C                            
00001A8C                            loc_191C:
00001A8C 1031 2000                  		move.b	(a1,d2.w),d0
00001A90 12C0                       		move.b	d0,(a1)+
00001A92 51CB FFF8                  		dbf	d3,loc_191C
00001A96 6080                       		bra.s	loc_18A8
00001A98                            ; ===========================================================================
00001A98                            
00001A98                            loc_1928:				; XREF: loc_1906
00001A98 1218                       		move.b	(a0)+,d1
00001A9A 6700                       		beq.s	loc_1938
00001A9C 0C01 0001                  		cmpi.b	#1,d1
00001AA0 6700 FF76                  		beq.w	loc_18A8
00001AA4 1601                       		move.b	d1,d3
00001AA6 60E4                       		bra.s	loc_191C
00001AA8                            ; ===========================================================================
00001AA8                            
00001AA8                            loc_1938:				; XREF: loc_1928
00001AA8 548F                       		addq.l	#2,sp
00001AAA 4E75                       		rts	
00001AAC                            ; End of function KosDec
00001AAC                            
00001AAC                            ; ---------------------------------------------------------------------------
00001AAC                            ; Pallet cycling routine loading subroutine
00001AAC                            ; ---------------------------------------------------------------------------
00001AAC                            
00001AAC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001AAC                            
00001AAC                            
00001AAC                            PalCycle_Load:				; XREF: Demo; Level_MainLoop; End_MainLoop
00001AAC 4EB9 0000 0000                 	jsr    PalCycle_SuperSonic
00001AB2 7400                       		moveq	#0,d2
00001AB4 7000                       		moveq	#0,d0
00001AB6 1038 FE10                  		move.b	($FFFFFE10).w,d0 ; get level number
00001ABA D040                       		add.w	d0,d0		; multiply by 2
00001ABC 303B 0000                  		move.w	PalCycle(pc,d0.w),d0 ; load animated pallets offset index into d0
00001AC0 4EFB 0000                  		jmp	PalCycle(pc,d0.w) ; jump to PalCycle + offset index
00001AC4                            ; End of function PalCycle_Load
00001AC4                            
00001AC4                            ; ===========================================================================
00001AC4                            ; ---------------------------------------------------------------------------
00001AC4                            ; Pallet cycling routines
00001AC4                            ; ---------------------------------------------------------------------------
00001AC4 0000                       PalCycle:	dc.w PalCycle_GHZ-PalCycle
00001AC6 0000                       		dc.w PalCycle_LZ-PalCycle
00001AC8 0000                       		dc.w PalCycle_MZ-PalCycle
00001ACA 0000                       		dc.w PalCycle_SLZ-PalCycle
00001ACC 0000                       		dc.w PalCycle_SYZ-PalCycle
00001ACE 0000                       		dc.w PalCycle_SBZ-PalCycle
00001AD0 0000                       		dc.w PalCycle_GHZ-PalCycle
00001AD2                            
00001AD2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001AD2                            
00001AD2                            
00001AD2                            PalCycle_Title:				; XREF: TitleScreen
00001AD2 41F9 0000 0000             		lea	(Pal_TitleCyc).l,a0
00001AD8 6000                       		bra.s	loc_196A
00001ADA                            ; ===========================================================================
00001ADA                            
00001ADA                            PalCycle_GHZ:				; XREF: PalCycle
00001ADA 41F9 0000 0000             		lea	(Pal_GHZCyc).l,a0
00001AE0                            
00001AE0                            loc_196A:				; XREF: PalCycle_Title
00001AE0 5378 F634                  		subq.w	#1,($FFFFF634).w
00001AE4 6A00                       		bpl.s	locret_1990
00001AE6 31FC 0005 F634             		move.w	#5,($FFFFF634).w
00001AEC 3038 F632                  		move.w	($FFFFF632).w,d0
00001AF0 5278 F632                  		addq.w	#1,($FFFFF632).w
00001AF4 0240 0003                  		andi.w	#3,d0
00001AF8 E748                       		lsl.w	#3,d0
00001AFA 43F8 FB50                  		lea	($FFFFFB50).w,a1
00001AFE 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001B02 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001B06                            
00001B06                            locret_1990:
00001B06 4E75                       		rts	
00001B08                            ; End of function PalCycle_Title
00001B08                            
00001B08                            
00001B08                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001B08                            
00001B08                            
00001B08                            PalCycle_LZ:				; XREF: PalCycle
00001B08 5378 F634                  		subq.w	#1,($FFFFF634).w
00001B0C 6A00                       		bpl.s	loc_19D8
00001B0E 31FC 0002 F634             		move.w	#2,($FFFFF634).w
00001B14 3038 F632                  		move.w	($FFFFF632).w,d0
00001B18 5278 F632                  		addq.w	#1,($FFFFF632).w
00001B1C 0240 0003                  		andi.w	#3,d0
00001B20 E748                       		lsl.w	#3,d0
00001B22 41F9 0000 0000             		lea	(Pal_LZCyc1).l,a0
00001B28 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; check if level is SBZ3
00001B2E 6600                       		bne.s	loc_19C0
00001B30 41F9 0000 0000             		lea	(Pal_SBZ3Cyc1).l,a0 ; load SBZ3	pallet instead
00001B36                            
00001B36                            loc_19C0:
00001B36 43F8 FB56                  		lea	($FFFFFB56).w,a1
00001B3A 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001B3E 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001B42 43F8 FAD6                  		lea	($FFFFFAD6).w,a1
00001B46 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001B4A 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001B4E                            
00001B4E                            loc_19D8:
00001B4E 3038 FE04                  		move.w	($FFFFFE04).w,d0
00001B52 0240 0007                  		andi.w	#7,d0
00001B56 103B 0000                  		move.b	byte_1A3C(pc,d0.w),d0
00001B5A 6700                       		beq.s	locret_1A3A
00001B5C 7201                       		moveq	#1,d1
00001B5E 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00001B62 6700                       		beq.s	loc_19F0
00001B64 4441                       		neg.w	d1
00001B66                            
00001B66                            loc_19F0:
00001B66 3038 F650                  		move.w	($FFFFF650).w,d0
00001B6A 0240 0003                  		andi.w	#3,d0
00001B6E D041                       		add.w	d1,d0
00001B70 0C40 0003                  		cmpi.w	#3,d0
00001B74 6500                       		bcs.s	loc_1A0A
00001B76 3200                       		move.w	d0,d1
00001B78 7000                       		moveq	#0,d0
00001B7A 4A41                       		tst.w	d1
00001B7C 6A00                       		bpl.s	loc_1A0A
00001B7E 7002                       		moveq	#2,d0
00001B80                            
00001B80                            loc_1A0A:
00001B80 31C0 F650                  		move.w	d0,($FFFFF650).w
00001B84 D040                       		add.w	d0,d0
00001B86 3200                       		move.w	d0,d1
00001B88 D040                       		add.w	d0,d0
00001B8A D041                       		add.w	d1,d0
00001B8C 41F9 0000 0000             		lea	(Pal_LZCyc2).l,a0
00001B92 43F8 FB76                  		lea	($FFFFFB76).w,a1
00001B96 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001B9A 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001B9E 41F9 0000 0000             		lea	(Pal_LZCyc3).l,a0
00001BA4 43F8 FAF6                  		lea	($FFFFFAF6).w,a1
00001BA8 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001BAC 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001BB0                            
00001BB0                            locret_1A3A:
00001BB0 4E75                       		rts	
00001BB2                            ; End of function PalCycle_LZ
00001BB2                            
00001BB2                            ; ===========================================================================
00001BB2 0100 0001 0000 0100        byte_1A3C:	dc.b 1,	0, 0, 1, 0, 0, 1, 0
00001BBA                            ; ===========================================================================
00001BBA                            
00001BBA                            PalCycle_MZ:				; XREF: PalCycle
00001BBA 4E75                       		rts	
00001BBC                            
00001BBC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001BBC                            
00001BBC                            
00001BBC                            PalCycle_SLZ:				; XREF: PalCycle
00001BBC 5378 F634                  		subq.w	#1,($FFFFF634).w
00001BC0 6A00                       		bpl.s	locret_1A80
00001BC2 31FC 0007 F634             		move.w	#7,($FFFFF634).w
00001BC8 3038 F632                  		move.w	($FFFFF632).w,d0
00001BCC 5240                       		addq.w	#1,d0
00001BCE 0C40 0006                  		cmpi.w	#6,d0
00001BD2 6500                       		bcs.s	loc_1A60
00001BD4 7000                       		moveq	#0,d0
00001BD6                            
00001BD6                            loc_1A60:
00001BD6 31C0 F632                  		move.w	d0,($FFFFF632).w
00001BDA 3200                       		move.w	d0,d1
00001BDC D241                       		add.w	d1,d1
00001BDE D041                       		add.w	d1,d0
00001BE0 D040                       		add.w	d0,d0
00001BE2 41F9 0000 0000             		lea	(Pal_SLZCyc).l,a0
00001BE8 43F8 FB56                  		lea	($FFFFFB56).w,a1
00001BEC 32B0 0000                  		move.w	(a0,d0.w),(a1)
00001BF0 2370 0002 0004             		move.l	2(a0,d0.w),4(a1)
00001BF6                            
00001BF6                            locret_1A80:
00001BF6 4E75                       		rts	
00001BF8                            ; End of function PalCycle_SLZ
00001BF8                            
00001BF8                            
00001BF8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001BF8                            
00001BF8                            
00001BF8                            PalCycle_SYZ:				; XREF: PalCycle
00001BF8 5378 F634                  		subq.w	#1,($FFFFF634).w
00001BFC 6A00                       		bpl.s	locret_1AC6
00001BFE 31FC 0005 F634             		move.w	#5,($FFFFF634).w
00001C04 3038 F632                  		move.w	($FFFFF632).w,d0
00001C08 5278 F632                  		addq.w	#1,($FFFFF632).w
00001C0C 0240 0003                  		andi.w	#3,d0
00001C10 E548                       		lsl.w	#2,d0
00001C12 3200                       		move.w	d0,d1
00001C14 D040                       		add.w	d0,d0
00001C16 41F9 0000 0000             		lea	(Pal_SYZCyc1).l,a0
00001C1C 43F8 FB6E                  		lea	($FFFFFB6E).w,a1
00001C20 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001C24 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001C28 41F9 0000 0000             		lea	(Pal_SYZCyc2).l,a0
00001C2E 43F8 FB76                  		lea	($FFFFFB76).w,a1
00001C32 32B0 1000                  		move.w	(a0,d1.w),(a1)
00001C36 3370 1002 0004             		move.w	2(a0,d1.w),4(a1)
00001C3C                            
00001C3C                            locret_1AC6:
00001C3C 4E75                       		rts	
00001C3E                            ; End of function PalCycle_SYZ
00001C3E                            
00001C3E                            
00001C3E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001C3E                            
00001C3E                            
00001C3E                            PalCycle_SBZ:				; XREF: PalCycle
00001C3E 45F9 0000 0000             		lea	(Pal_SBZCycList).l,a2
00001C44 4A38 FE11                  		tst.b	($FFFFFE11).w
00001C48 6700                       		beq.s	loc_1ADA
00001C4A 45F9 0000 0000             		lea	(Pal_SBZCycList2).l,a2
00001C50                            
00001C50                            loc_1ADA:
00001C50 43F8 F650                  		lea	($FFFFF650).w,a1
00001C54 321A                       		move.w	(a2)+,d1
00001C56                            
00001C56                            loc_1AE0:
00001C56 5311                       		subq.b	#1,(a1)
00001C58 6B00                       		bmi.s	loc_1AEA
00001C5A 5489                       		addq.l	#2,a1
00001C5C 5C8A                       		addq.l	#6,a2
00001C5E 6000                       		bra.s	loc_1B06
00001C60                            ; ===========================================================================
00001C60                            
00001C60                            loc_1AEA:				; XREF: PalCycle_SBZ
00001C60 12DA                       		move.b	(a2)+,(a1)+
00001C62 1011                       		move.b	(a1),d0
00001C64 5200                       		addq.b	#1,d0
00001C66 B01A                       		cmp.b	(a2)+,d0
00001C68 6500                       		bcs.s	loc_1AF6
00001C6A 7000                       		moveq	#0,d0
00001C6C                            
00001C6C                            loc_1AF6:
00001C6C 12C0                       		move.b	d0,(a1)+
00001C6E 0240 000F                  		andi.w	#$F,d0
00001C72 D040                       		add.w	d0,d0
00001C74 305A                       		movea.w	(a2)+,a0
00001C76 365A                       		movea.w	(a2)+,a3
00001C78 36B0 0000                  		move.w	(a0,d0.w),(a3)
00001C7C                            
00001C7C                            loc_1B06:				; XREF: PalCycle_SBZ
00001C7C 51C9 FFD8                  		dbf	d1,loc_1AE0
00001C80 5378 F634                  		subq.w	#1,($FFFFF634).w
00001C84 6A00                       		bpl.s	locret_1B64
00001C86 41F9 0000 0000             		lea	(Pal_SBZCyc4).l,a0
00001C8C 31FC 0001 F634             		move.w	#1,($FFFFF634).w
00001C92 4A38 FE11                  		tst.b	($FFFFFE11).w
00001C96 6700                       		beq.s	loc_1B2E
00001C98 41F9 0000 0000             		lea	(Pal_SBZCyc10).l,a0
00001C9E 31FC 0000 F634             		move.w	#0,($FFFFF634).w
00001CA4                            
00001CA4                            loc_1B2E:
00001CA4 72FF                       		moveq	#-1,d1
00001CA6 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00001CAA 6700                       		beq.s	loc_1B38
00001CAC 4441                       		neg.w	d1
00001CAE                            
00001CAE                            loc_1B38:
00001CAE 3038 F632                  		move.w	($FFFFF632).w,d0
00001CB2 0240 0003                  		andi.w	#3,d0
00001CB6 D041                       		add.w	d1,d0
00001CB8 0C40 0003                  		cmpi.w	#3,d0
00001CBC 6500                       		bcs.s	loc_1B52
00001CBE 3200                       		move.w	d0,d1
00001CC0 7000                       		moveq	#0,d0
00001CC2 4A41                       		tst.w	d1
00001CC4 6A00                       		bpl.s	loc_1B52
00001CC6 7002                       		moveq	#2,d0
00001CC8                            
00001CC8                            loc_1B52:
00001CC8 31C0 F632                  		move.w	d0,($FFFFF632).w
00001CCC D040                       		add.w	d0,d0
00001CCE 43F8 FB58                  		lea	($FFFFFB58).w,a1
00001CD2 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001CD6 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001CDA                            
00001CDA                            locret_1B64:
00001CDA 4E75                       		rts	
00001CDC                            ; End of function PalCycle_SBZ
00001CDC                            
00001CDC =FFFFFFC4                  Palette_frame equ   $FFFFFFC4   ; < free RAM word (make sure its even or youll get errors!!!!)
00001CDC =FFFFF65F                  Super_Sonic_palette equ $FFFFF65F    ; < free RAM byte
00001CDC =FFFFF65C                  Palette_timer equ $FFFFF65C  ; < free RAM byte
00001CDC                            
00001CDC                            PalCycle_SuperSonic:
00001CDC 1038 F65F                          move.b    ($FFFFF65F).w,d0
00001CE0 6700                               beq.s    return_2186
00001CE2 6B00 0000                          bmi.w    loc_21E6
00001CE6 5300                               subq.b    #1,d0
00001CE8 6600                               bne.s    loc_2188
00001CEA 5338 F65E                          subq.b    #1,($FFFFF65E).w
00001CEE 6A00                               bpl.s    return_2186
00001CF0 11FC 0003 F65E                     move.b    #3,($FFFFF65E).w
00001CF6 41F9 0000 0000                     lea    (Pal_2246).l,a0
00001CFC 3038 F65C                          move.w    ($FFFFF65C).w,d0
00001D00 5C78 F65C                          addq.w    #6,($FFFFF65C).w ; was 8
00001D04 0C78 0030 F65C                     cmpi.w    #$30,($FFFFF65C).w
00001D0A 6500                               bcs.s    PalCycleSS_1
00001D0C 11FC 00FF F65F                     move.b    #-1,($FFFFF65F).w
00001D12 11FC 0000 F7F2                     move.b    #0,($FFFFF7C8+$2A).w
00001D18                            
00001D18                            PalCycleSS_1:
00001D18 43F8 FB04                          lea    ($FFFFFB04).w,a1 ; 04
00001D1C 22F0 0000                          move.l    (a0,d0.w),(a1)+ ; there was +
00001D20 22B0 0004                          move.l    4(a0,d0.w),(a1)
00001D24                            
00001D24                            return_2186:
00001D24 4E75                               rts
00001D26                            ; ===========================================================================
00001D26                            
00001D26                            loc_2188:
00001D26 5338 F65E                          subq.b    #1,($FFFFF65E).w
00001D2A 6AF8                               bpl.s    return_2186
00001D2C 11FC 0003 F65E                     move.b    #3,($FFFFF65E).w
00001D32 41F9 0000 0000                     lea    (Pal_2246).l,a0
00001D38 3038 F65C                          move.w    ($FFFFF65C).w,d0
00001D3C 5D78 F65C                          subq.w    #$6,($FFFFF65C).w ; it was 8
00001D40 6400                               bcc.s     loc_21B0
00001D42 11FC 0000 F65C                     move.b    #0,($FFFFF65C).w
00001D48 11FC 0000 F65F                     move.b    #0,($FFFFF65F).w
00001D4E 4278 FB02                          clr.w 	  ($FFFFFB02).w
00001D52 4278 FB04                          clr.w 	  ($FFFFFB04).w
00001D56 4E75                               rts
00001D58                            
00001D58                            loc_21B0:
00001D58 43F8 FB04                          lea    ($FFFFFB04).w,a1
00001D5C 22F0 0000                          move.l    (a0,d0.w),(a1)+ ; there was +
00001D60 22B0 0004                          move.l    4(a0,d0.w),(a1)
00001D64 0C38 0001 FE10                     cmpi.b    #$1,($FFFFFE10).w
00001D6A 6700                               beq.s    PalCycleSS_2
00001D6C 4E75                               rts
00001D6E                            ; ===========================================================================
00001D6E                            
00001D6E                            PalCycleSS_2:
00001D6E 43F8 F084                          lea    ($FFFFF084).w,a1
00001D72 22F0 0000                          move.l    (a0,d0.w),(a1)+
00001D76 22B0 0004                          move.l    4(a0,d0.w),(a1)
00001D7A 4E75                               rts
00001D7C                            ; ===========================================================================
00001D7C                            
00001D7C                            loc_21E6:
00001D7C 5338 F65E                          subq.b    #1,($FFFFF65E).w
00001D80 6AA2                               bpl.s    return_2186
00001D82 11FC 0007 F65E                     move.b    #7,($FFFFF65E).w
00001D88 41F9 0000 0000                     lea    (Pal_2246).l,a0
00001D8E 3038 F65C                          move.w    ($FFFFF65C).w,d0
00001D92 5078 F65C                          addq.w    #8,($FFFFF65C).w ; it was 8
00001D96 0C78 0078 F65C                     cmpi.w    #$78,($FFFFF65C).w
00001D9C 6500                               bcs.s    PalCycleSS_3
00001D9E 31FC 0030 F65C                     move.w    #$30,($FFFFF65C).w
00001DA4                            
00001DA4                            PalCycleSS_3:
00001DA4 43F8 FB04                          lea    ($FFFFFB04).w,a1
00001DA8 22F0 0000                          move.l    (a0,d0.w),(a1)+ ; there was +
00001DAC 22B0 0004                          move.l    4(a0,d0.w),(a1)
00001DB0                            ;		cmpi.b  #$02,($FFFFFFBB).w ; is it Shadow?
00001DB0                            ;		beq.s   PalCycle_SSEnd ; if not, branch
00001DB0                            ;        lea    ($FFFFFB02).w,a1 ; it was 04
00001DB0                            ;        move.w    (a0,d0.w),(a1) ; there was +
00001DB0                            ;        move.w    4(a0,d0.w),(a1)
00001DB0 0C38 0001 FE10                     cmpi.b    #$1,($FFFFFE10).w
00001DB6 6700                               beq.s    PalCycleSS_4
00001DB8 4E75                               rts
00001DBA                            ; ===========================================================================
00001DBA                            PalCycleSS_4:
00001DBA 43F8 F084                          lea    ($FFFFF084).w,a1
00001DBE 22F0 0000                          move.l    (a0,d0.w),(a1)+
00001DC2 22B0 0004                          move.l    4(a0,d0.w),(a1)
00001DC6 4E75                               rts
00001DC8                            
00001DC8                            PalCycle_SSEnd:
00001DC8 4E75                       		rts
00001DCA                            ; End of function PalCycle_SuperSonic
00001DCA                            
00001DCA                            ; ===========================================================================
00001DCA                            ;----------------------------------------------------------------------------
00001DCA                            ;Palette for transformation to Super Sonic
00001DCA                            ;----------------------------------------------------------------------------
00001DCA                            Pal_2246:
00001DCA                            	incbin  "pallet/SuperSonic.bin"
00001E4A                                even
00001E4A                            ;----------------------------------------------------------------------------
00001E4A                            ;Palette for transformation to Super Sonic while underwater in CPZ
00001E4A                            ;----------------------------------------------------------------------------
00001E4A                            ; Pal_22C6:
00001E4A                            CyclingPal_CPZUWTransformation:
00001E4A                            	incbin  "pallet/CPZWater SS transformation.bin"
00001E6A                                even
00001E6A                            ;----------------------------------------------------------------------------
00001E6A                            ;Palette for transformation to Super Sonic while underwater in ARZ
00001E6A                            ;----------------------------------------------------------------------------
00001E6A                            ; Pal_2346:
00001E6A                            CyclingPal_ARZUWTransformation:
00001E6A                                incbin  "pallet/ARZWater SS transformation.bin"
00001E8A                                even
00001E8A                            
00001E8A                            ; ===========================================================================
00001E8A                            Pal_TitleCyc:	incbin	pallet\c_title.bin
00001EAA                            Pal_GHZCyc:	incbin	pallet\c_ghz.bin
00001ECA                            Pal_LZCyc1:	incbin	pallet\c_lz_wat.bin	; waterfalls pallet
00001EEA                            Pal_LZCyc2:	incbin	pallet\c_lz_bel.bin	; conveyor belt pallet
00001EFC                            Pal_LZCyc3:	incbin	pallet\c_lz_buw.bin	; conveyor belt (underwater) pallet
00001F0E                            Pal_SBZ3Cyc1:	incbin	pallet\c_sbz3_w.bin	; waterfalls pallet
00001F76                            Pal_SLZCyc:	incbin	pallet\c_slz.bin
00001F9A                            Pal_SYZCyc1:	incbin	pallet\c_syz_1.bin
00001FBA                            Pal_SYZCyc2:	incbin	pallet\c_syz_2.bin
00001FCA                            
00001FCA                            Pal_SBZCycList:
00001FCA                            	include "_inc\SBZ pallet script 1.asm"
00001FCA                            ; ---------------------------------------------------------------------------
00001FCA                            ; Scrap Brain Zone 1 pallet cycling script
00001FCA                            ; ---------------------------------------------------------------------------
00001FCA 0008                       	dc.w 8			; number of entries - 1
00001FCC 0708                       	dc.b 7,	8		; duration in frames, number of	colours
00001FCE 0000                       	dc.w Pal_SBZCyc1	; pallet pointer
00001FD0 FB50                       	dc.w $FB50		; RAM address
00001FD2 0D08                       	dc.b $D, 8
00001FD4 0000                       	dc.w Pal_SBZCyc2
00001FD6 FB52                       	dc.w $FB52
00001FD8 0E08                       	dc.b $E, 8
00001FDA 0000                       	dc.w Pal_SBZCyc3
00001FDC FB6E                       	dc.w $FB6E
00001FDE 0B08                       	dc.b $B, 8
00001FE0 0000                       	dc.w Pal_SBZCyc5
00001FE2 FB70                       	dc.w $FB70
00001FE4 0708                       	dc.b 7,	8
00001FE6 0000                       	dc.w Pal_SBZCyc6
00001FE8 FB72                       	dc.w $FB72
00001FEA 1C10                       	dc.b $1C, $10
00001FEC 0000                       	dc.w Pal_SBZCyc7
00001FEE FB7E                       	dc.w $FB7E
00001FF0 0303                       	dc.b 3,	3
00001FF2 0000                       	dc.w Pal_SBZCyc8
00001FF4 FB78                       	dc.w $FB78
00001FF6 0303                       	dc.b 3,	3
00001FF8 0000                       	dc.w Pal_SBZCyc8+2
00001FFA FB7A                       	dc.w $FB7A
00001FFC 0303                       	dc.b 3,	3
00001FFE 0000                       	dc.w Pal_SBZCyc8+4
00002000 FB7C                       	dc.w $FB7C
00002002                            	even
00002002                            	even
00002002                            
00002002                            Pal_SBZCycList2:
00002002                            	include "_inc\SBZ pallet script 2.asm"
00002002                            ; ---------------------------------------------------------------------------
00002002                            ; Scrap Brain Zone 2 pallet cycling script
00002002                            ; ---------------------------------------------------------------------------
00002002 0006                       	dc.w 6
00002004 0708                       	dc.b 7,	8
00002006 0000                       	dc.w Pal_SBZCyc1
00002008 FB50                       	dc.w $FB50
0000200A 0D08                       	dc.b $D, 8
0000200C 0000                       	dc.w Pal_SBZCyc2
0000200E FB52                       	dc.w $FB52
00002010 0908                       	dc.b 9,	8
00002012 0000                       	dc.w Pal_SBZCyc9
00002014 FB70                       	dc.w $FB70
00002016 0708                       	dc.b 7,	8
00002018 0000                       	dc.w Pal_SBZCyc6
0000201A FB72                       	dc.w $FB72
0000201C 0303                       	dc.b 3,	3
0000201E 0000                       	dc.w Pal_SBZCyc8
00002020 FB78                       	dc.w $FB78
00002022 0303                       	dc.b 3,	3
00002024 0000                       	dc.w Pal_SBZCyc8+2
00002026 FB7A                       	dc.w $FB7A
00002028 0303                       	dc.b 3,	3
0000202A 0000                       	dc.w Pal_SBZCyc8+4
0000202C FB7C                       	dc.w $FB7C
0000202E                            	even
0000202E                            	even
0000202E                            
0000202E                            Pal_SBZCyc1:	incbin	pallet\c_sbz_1.bin
0000203E                            Pal_SBZCyc2:	incbin	pallet\c_sbz_2.bin
0000204E                            Pal_SBZCyc3:	incbin	pallet\c_sbz_3.bin
0000205E                            Pal_SBZCyc4:	incbin	pallet\c_sbz_4.bin
0000206A                            Pal_SBZCyc5:	incbin	pallet\c_sbz_5.bin
0000207A                            Pal_SBZCyc6:	incbin	pallet\c_sbz_6.bin
0000208A                            Pal_SBZCyc7:	incbin	pallet\c_sbz_7.bin
000020AA                            Pal_SBZCyc8:	incbin	pallet\c_sbz_8.bin
000020B4                            Pal_SBZCyc9:	incbin	pallet\c_sbz_9.bin
000020C4                            Pal_SBZCyc10:	incbin	pallet\c_sbz_10.bin
000020D0                            ; ---------------------------------------------------------------------------
000020D0                            ; Subroutine to	fade out and fade in
000020D0                            ; ---------------------------------------------------------------------------
000020D0                            
000020D0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000020D0                            
000020D0                            
000020D0                            Pal_FadeTo:
000020D0 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
000020D6                            
000020D6                            Pal_FadeTo2:
000020D6 7000                       		moveq	#0,d0
000020D8 41F8 FB00                  		lea	($FFFFFB00).w,a0
000020DC 1038 F626                  		move.b	($FFFFF626).w,d0
000020E0 D0C0                       		adda.w	d0,a0
000020E2 7200                       		moveq	#0,d1
000020E4 1038 F627                  		move.b	($FFFFF627).w,d0
000020E8                            
000020E8                            Pal_ToBlack:
000020E8 30C1                       		move.w	d1,(a0)+
000020EA 51C8 FFFC                  		dbf	d0,Pal_ToBlack	; fill pallet with $000	(black)
000020EE 780E                       		moveq	#$0E,d4					; MJ: prepare maximum colour check
000020F0 7C00                       		moveq	#$00,d6					; MJ: clear d6
000020F2                            
000020F2                            loc_1DCE:
000020F2 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
000020F8 6100 0000                  		bsr.w	DelayProgram
000020FC 0846 0000                  		bchg	#$00,d6					; MJ: change delay counter
00002100 67F0                       		beq	loc_1DCE				; MJ: if null, delay a frame
00002102 6100                       		bsr.s	Pal_FadeIn
00002104 6100 F656                  		bsr.w	RunPLC_RAM
00002108 5504                       		subq.b	#$02,d4					; MJ: decrease colour check
0000210A 66E6                       		bne	loc_1DCE				; MJ: if it has not reached null, branch
0000210C 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w			; MJ: wait for V-blank again (so colours transfer)
00002112 6000 0000                  		bra	DelayProgram				; MJ: ''
00002116                            
00002116                            ; End of function Pal_FadeTo
00002116                            
00002116                            ; ---------------------------------------------------------------------------
00002116                            ; Pallet fade-in subroutine
00002116                            ; ---------------------------------------------------------------------------
00002116                            
00002116                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002116                            
00002116                            
00002116                            Pal_FadeIn:				; XREF: Pal_FadeTo
00002116 7000                       		moveq	#0,d0
00002118 41F8 FB00                  		lea	($FFFFFB00).w,a0
0000211C 43F8 FB80                  		lea	($FFFFFB80).w,a1
00002120 1038 F626                  		move.b	($FFFFF626).w,d0
00002124 D0C0                       		adda.w	d0,a0
00002126 D2C0                       		adda.w	d0,a1
00002128 1038 F627                  		move.b	($FFFFF627).w,d0
0000212C                            
0000212C                            loc_1DFA:
0000212C 6100                       		bsr.s	Pal_AddColor
0000212E 51C8 FFFC                  		dbf	d0,loc_1DFA
00002132 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00002138 6600                       		bne.s	locret_1E24
0000213A 7000                       		moveq	#0,d0
0000213C 41F8 FA80                  		lea	($FFFFFA80).w,a0
00002140 43F8 FA00                  		lea	($FFFFFA00).w,a1
00002144 1038 F626                  		move.b	($FFFFF626).w,d0
00002148 D0C0                       		adda.w	d0,a0
0000214A D2C0                       		adda.w	d0,a1
0000214C 1038 F627                  		move.b	($FFFFF627).w,d0
00002150                            
00002150                            loc_1E1E:
00002150 6100                       		bsr.s	Pal_AddColor
00002152 51C8 FFFC                  		dbf	d0,loc_1E1E
00002156                            
00002156                            locret_1E24:
00002156 4E75                       		rts	
00002158                            ; End of function Pal_FadeIn
00002158                            
00002158                            
00002158                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002158                            
00002158                            
00002158                            Pal_AddColor:				; XREF: Pal_FadeIn
00002158 1A11                       		move.b	(a1),d5					; MJ: load blue
0000215A 3219                       		move.w	(a1)+,d1				; MJ: load green and red
0000215C 1401                       		move.b	d1,d2					; MJ: load red
0000215E E809                       		lsr.b	#$04,d1					; MJ: get only green
00002160 0202 000E                  		andi.b	#$0E,d2					; MJ: get only red
00002164 3610                       		move.w	(a0),d3					; MJ: load current colour in buffer
00002166 B805                       		cmp.b	d5,d4					; MJ: is it time for blue to fade?
00002168 6200 0000                  		bhi	FCI_NoBlue				; MJ: if not, branch
0000216C 0643 0200                  		addi.w	#$0200,d3				; MJ: increase blue
00002170                            
00002170                            FCI_NoBlue:
00002170 B801                       		cmp.b	d1,d4					; MJ: is it time for green to fade?
00002172 6200 0000                  		bhi	FCI_NoGreen				; MJ: if not, branch
00002176 0603 0020                  		addi.b	#$20,d3					; MJ: increase green
0000217A                            
0000217A                            FCI_NoGreen:
0000217A B802                       		cmp.b	d2,d4					; MJ: is it time for red to fade?
0000217C 6200 0000                  		bhi	FCI_NoRed				; MJ: if not, branch
00002180 5403                       		addq.b	#$02,d3					; MJ: increase red
00002182                            
00002182                            FCI_NoRed:
00002182 30C3                       		move.w	d3,(a0)+				; MJ: save colour
00002184 4E75                       		rts						; MJ: return
00002186                            
00002186                            ; End of function Pal_AddColor
00002186                            
00002186                            
00002186                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002186                            
00002186                            
00002186                            Pal_FadeFrom:
00002186 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
0000218C 7807                       		moveq	#$07,d4					; MJ: set repeat times
0000218E 7C00                       		moveq	#$00,d6					; MJ: clear d6
00002190                            
00002190                            loc_1E5C:
00002190 6100 F5CA                  		bsr.w	RunPLC_RAM
00002194 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
0000219A 6100 0000                  		bsr.w	DelayProgram
0000219E 0846 0000                  		bchg	#$00,d6					; MJ: change delay counter
000021A2 67EC                       		beq	loc_1E5C				; MJ: if null, delay a frame
000021A4 6100                       		bsr.s	Pal_FadeOut
000021A6 51CC FFE8                  		dbf	d4,loc_1E5C
000021AA 4E75                       		rts	
000021AC                            ; End of function Pal_FadeFrom
000021AC                            
000021AC                            ; ---------------------------------------------------------------------------
000021AC                            ; Pallet fade-out subroutine
000021AC                            ; ---------------------------------------------------------------------------
000021AC                            
000021AC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000021AC                            
000021AC                            
000021AC                            Pal_FadeOut:				; XREF: Pal_FadeFrom
000021AC 7000                       		moveq	#0,d0
000021AE 41F8 FB00                  		lea	($FFFFFB00).w,a0
000021B2 1038 F626                  		move.b	($FFFFF626).w,d0
000021B6 D0C0                       		adda.w	d0,a0
000021B8 1038 F627                  		move.b	($FFFFF627).w,d0
000021BC                            
000021BC                            loc_1E82:
000021BC 6100                       		bsr.s	Pal_DecColor
000021BE 51C8 FFFC                  		dbf	d0,loc_1E82
000021C2                            
000021C2 7000                       		moveq	#0,d0
000021C4 41F8 FA80                  		lea	($FFFFFA80).w,a0
000021C8 1038 F626                  		move.b	($FFFFF626).w,d0
000021CC D0C0                       		adda.w	d0,a0
000021CE 1038 F627                  		move.b	($FFFFF627).w,d0
000021D2                            
000021D2                            loc_1E98:
000021D2 6100                       		bsr.s	Pal_DecColor
000021D4 51C8 FFFC                  		dbf	d0,loc_1E98
000021D8 4E75                       		rts	
000021DA                            ; End of function Pal_FadeOut
000021DA                            
000021DA                            
000021DA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000021DA                            
000021DA                            
000021DA                            Pal_DecColor:				; XREF: Pal_FadeOut
000021DA 3A10                       		move.w	(a0),d5					; MJ: load colour
000021DC 3205                       		move.w	d5,d1					; MJ: copy to d1
000021DE 1401                       		move.b	d1,d2					; MJ: load green and red
000021E0 1601                       		move.b	d1,d3					; MJ: load red
000021E2 0241 0E00                  		andi.w	#$0E00,d1				; MJ: get only blue
000021E6 6700 0000                  		beq	FCO_NoBlue				; MJ: if blue is finished, branch
000021EA 0445 0200                  		subi.w	#$0200,d5				; MJ: decrease blue
000021EE                            
000021EE                            FCO_NoBlue:
000021EE 0242 00E0                  		andi.w	#$00E0,d2				; MJ: get only green (needs to be word)
000021F2 6700 0000                  		beq	FCO_NoGreen				; MJ: if green is finished, branch
000021F6 0405 0020                  		subi.b	#$20,d5					; MJ: decrease green
000021FA                            
000021FA                            FCO_NoGreen:
000021FA 0203 000E                  		andi.b	#$0E,d3					; MJ: get only red
000021FE 6700 0000                  		beq	FCO_NoRed				; MJ: if red is finished, branch
00002202 5505                       		subq.b	#$02,d5					; MJ: decrease red
00002204                            
00002204                            FCO_NoRed:
00002204 30C5                       		move.w	d5,(a0)+				; MJ: save new colour
00002206 4E75                       		rts						; MJ: return
00002208                            
00002208                            ; End of function Pal_DecColor
00002208                            
00002208                            ; ---------------------------------------------------------------------------
00002208                            ; Subroutine to	fill the pallet	with white (special stage)
00002208                            ; ---------------------------------------------------------------------------
00002208                            
00002208                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002208                            
00002208                            
00002208                            Pal_MakeWhite:				; XREF: SpecialStage
00002208 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
0000220E 7000                       		moveq	#0,d0
00002210 41F8 FB00                  		lea	($FFFFFB00).w,a0
00002214 1038 F626                  		move.b	($FFFFF626).w,d0
00002218 D0C0                       		adda.w	d0,a0
0000221A 323C 0EEE                  		move.w	#$EEE,d1
0000221E 1038 F627                  		move.b	($FFFFF627).w,d0
00002222                            
00002222                            PalWhite_Loop:
00002222 30C1                       		move.w	d1,(a0)+
00002224 51C8 FFFC                  		dbf	d0,PalWhite_Loop
00002228 383C 0015                  		move.w	#$15,d4
0000222C                            
0000222C                            loc_1EF4:
0000222C 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00002232 6100 0000                  		bsr.w	DelayProgram
00002236 6100                       		bsr.s	Pal_WhiteToBlack
00002238 6100 F522                  		bsr.w	RunPLC_RAM
0000223C 51CC FFEE                  		dbf	d4,loc_1EF4
00002240 4E75                       		rts	
00002242                            ; End of function Pal_MakeWhite
00002242                            
00002242                            
00002242                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002242                            
00002242                            
00002242                            Pal_WhiteToBlack:			; XREF: Pal_MakeWhite
00002242 7000                       		moveq	#0,d0
00002244 41F8 FB00                  		lea	($FFFFFB00).w,a0
00002248 43F8 FB80                  		lea	($FFFFFB80).w,a1
0000224C 1038 F626                  		move.b	($FFFFF626).w,d0
00002250 D0C0                       		adda.w	d0,a0
00002252 D2C0                       		adda.w	d0,a1
00002254 1038 F627                  		move.b	($FFFFF627).w,d0
00002258                            
00002258                            loc_1F20:
00002258 6100                       		bsr.s	Pal_DecColor2
0000225A 51C8 FFFC                  		dbf	d0,loc_1F20
0000225E                            
0000225E 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00002264 6600                       		bne.s	locret_1F4A
00002266 7000                       		moveq	#0,d0
00002268 41F8 FA80                  		lea	($FFFFFA80).w,a0
0000226C 43F8 FA00                  		lea	($FFFFFA00).w,a1
00002270 1038 F626                  		move.b	($FFFFF626).w,d0
00002274 D0C0                       		adda.w	d0,a0
00002276 D2C0                       		adda.w	d0,a1
00002278 1038 F627                  		move.b	($FFFFF627).w,d0
0000227C                            
0000227C                            loc_1F44:
0000227C 6100                       		bsr.s	Pal_DecColor2
0000227E 51C8 FFFC                  		dbf	d0,loc_1F44
00002282                            
00002282                            locret_1F4A:
00002282 4E75                       		rts	
00002284                            ; End of function Pal_WhiteToBlack
00002284                            
00002284                            
00002284                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002284                            
00002284                            
00002284                            Pal_DecColor2:				; XREF: Pal_WhiteToBlack
00002284 3419                       		move.w	(a1)+,d2
00002286 3610                       		move.w	(a0),d3
00002288 B642                       		cmp.w	d2,d3
0000228A 6700                       		beq.s	loc_1F78
0000228C 3203                       		move.w	d3,d1
0000228E 0441 0200                  		subi.w	#$200,d1	; decrease blue	value
00002292 6500                       		bcs.s	loc_1F64
00002294 B242                       		cmp.w	d2,d1
00002296 6500                       		bcs.s	loc_1F64
00002298 30C1                       		move.w	d1,(a0)+
0000229A 4E75                       		rts	
0000229C                            ; ===========================================================================
0000229C                            
0000229C                            loc_1F64:				; XREF: Pal_DecColor2
0000229C 3203                       		move.w	d3,d1
0000229E 0441 0020                  		subi.w	#$20,d1		; decrease green value
000022A2 6500                       		bcs.s	loc_1F74
000022A4 B242                       		cmp.w	d2,d1
000022A6 6500                       		bcs.s	loc_1F74
000022A8 30C1                       		move.w	d1,(a0)+
000022AA 4E75                       		rts	
000022AC                            ; ===========================================================================
000022AC                            
000022AC                            loc_1F74:				; XREF: loc_1F64
000022AC 5558                       		subq.w	#2,(a0)+	; decrease red value
000022AE 4E75                       		rts	
000022B0                            ; ===========================================================================
000022B0                            
000022B0                            loc_1F78:				; XREF: Pal_DecColor2
000022B0 5448                       		addq.w	#2,a0
000022B2 4E75                       		rts	
000022B4                            ; End of function Pal_DecColor2
000022B4                            
000022B4                            ; ---------------------------------------------------------------------------
000022B4                            ; Subroutine to	make a white flash when	you enter a special stage
000022B4                            ; ---------------------------------------------------------------------------
000022B4                            
000022B4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000022B4                            
000022B4                            
000022B4                            Pal_MakeFlash:				; XREF: SpecialStage
000022B4 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
000022BA 383C 0015                  		move.w	#$15,d4
000022BE                            
000022BE                            loc_1F86:
000022BE 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
000022C4 6100 0000                  		bsr.w	DelayProgram
000022C8 6100                       		bsr.s	Pal_ToWhite
000022CA 6100 F490                  		bsr.w	RunPLC_RAM
000022CE 51CC FFEE                  		dbf	d4,loc_1F86
000022D2 4E75                       		rts	
000022D4                            ; End of function Pal_MakeFlash
000022D4                            
000022D4                            
000022D4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000022D4                            
000022D4                            
000022D4                            Pal_ToWhite:				; XREF: Pal_MakeFlash
000022D4 7000                       		moveq	#0,d0
000022D6 41F8 FB00                  		lea	($FFFFFB00).w,a0
000022DA 1038 F626                  		move.b	($FFFFF626).w,d0
000022DE D0C0                       		adda.w	d0,a0
000022E0 1038 F627                  		move.b	($FFFFF627).w,d0
000022E4                            
000022E4                            loc_1FAC:
000022E4 6100                       		bsr.s	Pal_AddColor2
000022E6 51C8 FFFC                  		dbf	d0,loc_1FAC
000022EA 7000                       		moveq	#0,d0
000022EC 41F8 FA80                  		lea	($FFFFFA80).w,a0
000022F0 1038 F626                  		move.b	($FFFFF626).w,d0
000022F4 D0C0                       		adda.w	d0,a0
000022F6 1038 F627                  		move.b	($FFFFF627).w,d0
000022FA                            
000022FA                            loc_1FC2:
000022FA 6100                       		bsr.s	Pal_AddColor2
000022FC 51C8 FFFC                  		dbf	d0,loc_1FC2
00002300 4E75                       		rts	
00002302                            ; End of function Pal_ToWhite
00002302                            
00002302                            
00002302                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002302                            
00002302                            
00002302                            Pal_AddColor2:				; XREF: Pal_ToWhite
00002302 3410                       		move.w	(a0),d2
00002304 0C42 0EEE                  		cmpi.w	#$EEE,d2
00002308 6700                       		beq.s	loc_2006
0000230A 3202                       		move.w	d2,d1
0000230C 0241 000E                  		andi.w	#$E,d1
00002310 0C41 000E                  		cmpi.w	#$E,d1
00002314 6700                       		beq.s	loc_1FE2
00002316 5458                       		addq.w	#2,(a0)+	; increase red value
00002318 4E75                       		rts	
0000231A                            ; ===========================================================================
0000231A                            
0000231A                            loc_1FE2:				; XREF: Pal_AddColor2
0000231A 3202                       		move.w	d2,d1
0000231C 0241 00E0                  		andi.w	#$E0,d1
00002320 0C41 00E0                  		cmpi.w	#$E0,d1
00002324 6700                       		beq.s	loc_1FF4
00002326 0658 0020                  		addi.w	#$20,(a0)+	; increase green value
0000232A 4E75                       		rts	
0000232C                            ; ===========================================================================
0000232C                            
0000232C                            loc_1FF4:				; XREF: loc_1FE2
0000232C 3202                       		move.w	d2,d1
0000232E 0241 0E00                  		andi.w	#$E00,d1
00002332 0C41 0E00                  		cmpi.w	#$E00,d1
00002336 6700                       		beq.s	loc_2006
00002338 0658 0200                  		addi.w	#$200,(a0)+	; increase blue	value
0000233C 4E75                       		rts	
0000233E                            ; ===========================================================================
0000233E                            
0000233E                            loc_2006:				; XREF: Pal_AddColor2
0000233E 5448                       		addq.w	#2,a0
00002340 4E75                       		rts	
00002342                            ; End of function Pal_AddColor2
00002342                            
00002342                            ; ---------------------------------------------------------------------------
00002342                            ; Pallet cycling routine - Sega	logo
00002342                            ; ---------------------------------------------------------------------------
00002342                            
00002342                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002342                            
00002342                            
00002342                            PalCycle_Sega:				; XREF: SegaScreen
00002342 4A38 F635                  		tst.b	($FFFFF635).w
00002346 6600                       		bne.s	loc_206A
00002348 43F8 FB20                  		lea	($FFFFFB20).w,a1
0000234C 41F9 0000 0000             		lea	(Pal_Sega1).l,a0
00002352 7205                       		moveq	#5,d1
00002354 3038 F632                  		move.w	($FFFFF632).w,d0
00002358                            
00002358                            loc_2020:
00002358 6A00                       		bpl.s	loc_202A
0000235A 5448                       		addq.w	#2,a0
0000235C 5341                       		subq.w	#1,d1
0000235E 5440                       		addq.w	#2,d0
00002360 60F6                       		bra.s	loc_2020
00002362                            ; ===========================================================================
00002362                            
00002362                            loc_202A:				; XREF: PalCycle_Sega
00002362 3400                       		move.w	d0,d2
00002364 0242 001E                  		andi.w	#$1E,d2
00002368 6600                       		bne.s	loc_2034
0000236A 5440                       		addq.w	#2,d0
0000236C                            
0000236C                            loc_2034:
0000236C 0C40 0060                  		cmpi.w	#$60,d0
00002370 6400                       		bcc.s	loc_203E
00002372 3398 0000                  		move.w	(a0)+,(a1,d0.w)
00002376                            
00002376                            loc_203E:
00002376 5440                       		addq.w	#2,d0
00002378 51C9 FFE8                  		dbf	d1,loc_202A
0000237C 3038 F632                  		move.w	($FFFFF632).w,d0
00002380 5440                       		addq.w	#2,d0
00002382 3400                       		move.w	d0,d2
00002384 0242 001E                  		andi.w	#$1E,d2
00002388 6600                       		bne.s	loc_2054
0000238A 5440                       		addq.w	#2,d0
0000238C                            
0000238C                            loc_2054:
0000238C 0C40 0064                  		cmpi.w	#$64,d0
00002390 6D00                       		blt.s	loc_2062
00002392 31FC 0401 F634             		move.w	#$401,($FFFFF634).w
00002398 70F4                       		moveq	#-$C,d0
0000239A                            
0000239A                            loc_2062:
0000239A 31C0 F632                  		move.w	d0,($FFFFF632).w
0000239E 7001                       		moveq	#1,d0
000023A0 4E75                       		rts	
000023A2                            ; ===========================================================================
000023A2                            
000023A2                            loc_206A:				; XREF: loc_202A
000023A2 5338 F634                  		subq.b	#1,($FFFFF634).w
000023A6 6A00                       		bpl.s	loc_20BC
000023A8 11FC 0004 F634             		move.b	#4,($FFFFF634).w
000023AE 3038 F632                  		move.w	($FFFFF632).w,d0
000023B2 0640 000C                  		addi.w	#$C,d0
000023B6 0C40 0030                  		cmpi.w	#$30,d0
000023BA 6500                       		bcs.s	loc_2088
000023BC 7000                       		moveq	#0,d0
000023BE 4E75                       		rts	
000023C0                            ; ===========================================================================
000023C0                            
000023C0                            loc_2088:				; XREF: loc_206A
000023C0 31C0 F632                  		move.w	d0,($FFFFF632).w
000023C4 41F9 0000 0000             		lea	(Pal_Sega2).l,a0
000023CA 41F0 0000                  		lea	(a0,d0.w),a0
000023CE 43F8 FB04                  		lea	($FFFFFB04).w,a1
000023D2 22D8                       		move.l	(a0)+,(a1)+
000023D4 22D8                       		move.l	(a0)+,(a1)+
000023D6 3298                       		move.w	(a0)+,(a1)
000023D8 43F8 FB20                  		lea	($FFFFFB20).w,a1
000023DC 7000                       		moveq	#0,d0
000023DE 722C                       		moveq	#$2C,d1
000023E0                            
000023E0                            loc_20A8:
000023E0 3400                       		move.w	d0,d2
000023E2 0242 001E                  		andi.w	#$1E,d2
000023E6 6600                       		bne.s	loc_20B2
000023E8 5440                       		addq.w	#2,d0
000023EA                            
000023EA                            loc_20B2:
000023EA 3390 0000                  		move.w	(a0),(a1,d0.w)
000023EE 5440                       		addq.w	#2,d0
000023F0 51C9 FFEE                  		dbf	d1,loc_20A8
000023F4                            
000023F4                            loc_20BC:
000023F4 7001                       		moveq	#1,d0
000023F6 4E75                       		rts	
000023F8                            ; End of function PalCycle_Sega
000023F8                            
000023F8                            ; ===========================================================================
000023F8                            
000023F8                            Pal_Sega1:	incbin	pallet\sega1.bin
00002404                            Pal_Sega2:	incbin	pallet\sega2.bin
00002434                            	
00002434                            ; ---------------------------------------------------------------------------
00002434                            ; Subroutines to load pallets
00002434                            ; ---------------------------------------------------------------------------
00002434                            
00002434                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
00002434                            
00002434                            PalLoad1:
00002434 1238 FE11                  		move.b ($FFFFFE11),d1
00002438 43F9 0000 0000             		lea (PalPointers).l,a1
0000243E 0C01 0000                  		cmp.b #0,d1
00002442 6700 0000                  		beq.w PalLoad1_Continue
00002446 43F9 0000 0000             		lea (PalPointers2).l,a1
0000244C 0C01 0001                  		cmp.b #1,d1
00002450 6700 0000                  		beq.w PalLoad1_Continue
00002454 43F9 0000 0000             		lea (PalPointers3).l,a1
0000245A                            
0000245A                            PalLoad1_Continue:
0000245A E748                       		lsl.w #3,d0
0000245C D2C0                       		adda.w d0,a1
0000245E 2459                       		movea.l (a1)+,a2
00002460 3659                       		movea.w (a1)+,a3
00002462 D6FC 0080                  		adda.w #$80,a3
00002466 3E19                       		move.w (a1)+,d7
00002468                            
00002468                            loc_2110:
00002468 26DA                       		move.l (a2)+,(a3)+
0000246A 51CF FFFC                  		dbf d7,loc_2110
0000246E 4E75                       		rts
00002470                             ; End of function PalLoad1
00002470                            
00002470                            
00002470                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
00002470                            
00002470                            PalLoad2:
00002470 1238 FE11                  		move.b ($FFFFFE11),d1
00002474 43F9 0000 0000             		lea (PalPointers).l,a1
0000247A 0C01 0000                  		cmp.b #0,d1
0000247E 6700 0000                  		beq.w PalLoad2_Continue
00002482 43F9 0000 0000             		lea (PalPointers2).l,a1
00002488 0C01 0001                  		cmp.b #1,d1
0000248C 6700 0000                  		beq.w PalLoad2_Continue
00002490 43F9 0000 0000             		lea (PalPointers3).l,a1
00002496                            
00002496                            
00002496                            PalLoad2_Continue:
00002496 E748                       		lsl.w #3,d0
00002498 D2C0                       		adda.w d0,a1
0000249A 2459                       		movea.l (a1)+,a2
0000249C 3659                       		movea.w (a1)+,a3
0000249E 3E19                       		move.w (a1)+,d7
000024A0                            
000024A0                            loc_2128:
000024A0 26DA                       		move.l (a2)+,(a3)+
000024A2 51CF FFFC                  		dbf d7,loc_2128
000024A6 4E75                       		rts
000024A8                            ; End of function PalLoad2
000024A8                            
000024A8                            
000024A8                            ; ---------------------------------------------------------------------------
000024A8                            ; Underwater pallet loading subroutine
000024A8                            ; ---------------------------------------------------------------------------
000024A8                            
000024A8                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
000024A8                            
000024A8                            PalLoad3_Water:
000024A8 1238 FE11                  		move.b ($FFFFFE11),d1
000024AC 43F9 0000 0000             		lea (PalPointers).l,a1
000024B2 0C01 0000                  		cmp.b #0,d1
000024B6 6700 0000                  		beq.w PalLoad3_Continue
000024BA 43F9 0000 0000             		lea (PalPointers2).l,a1
000024C0 0C01 0001                  		cmp.b #1,d1
000024C4 6700 0000                  		beq.w PalLoad3_Continue
000024C8 43F9 0000 0000             		lea (PalPointers3).l,a1
000024CE                            
000024CE                            PalLoad3_Continue:
000024CE E748                       		lsl.w #3,d0
000024D0 D2C0                       		adda.w d0,a1
000024D2 2459                       		movea.l (a1)+,a2
000024D4 3659                       		movea.w (a1)+,a3
000024D6 96FC 0080                  		suba.w #$80,a3
000024DA 3E19                       		move.w (a1)+,d7
000024DC                            
000024DC                            loc_2144:
000024DC 26DA                       		move.l (a2)+,(a3)+
000024DE 51CF FFFC                  		dbf d7,loc_2144
000024E2 4E75                       		rts
000024E4                            ; End of function PalLoad3_Water
000024E4                            
000024E4                            
000024E4                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
000024E4                            
000024E4                            
000024E4                            PalLoad4_Water:
000024E4 1238 FE11                  		move.b ($FFFFFE11),d1
000024E8 43F9 0000 0000             		lea (PalPointers).l,a1
000024EE 0C01 0000                  		cmp.b #0,d1
000024F2 6700 0000                  		beq.w PalLoad4_Continue
000024F6 43F9 0000 0000             		lea (PalPointers2).l,a1
000024FC 0C01 0001                  		cmp.b #1,d1
00002500 6700 0000                  		beq.w PalLoad4_Continue
00002504 43F9 0000 0000             		lea (PalPointers3).l,a1
0000250A                            
0000250A                            PalLoad4_Continue:
0000250A E748                       		lsl.w #3,d0
0000250C D2C0                       		adda.w d0,a1
0000250E 2459                       		movea.l (a1)+,a2
00002510 3659                       		movea.w (a1)+,a3
00002512 96FC 0100                  		suba.w #$100,a3
00002516 3E19                       		move.w (a1)+,d7
00002518                            loc_2160:
00002518 26DA                       		move.l (a2)+,(a3)+
0000251A 51CF FFFC                  		dbf d7,loc_2160
0000251E 4E75                       		rts
00002520                             ; End of function PalLoad4_Water
00002520                            
00002520                            ; ===========================================================================
00002520                            ; ---------------------------------------------------------------------------
00002520                            ; Pallet pointers
00002520                            ; ---------------------------------------------------------------------------
00002520                            PalPointers:
00002520                            	include "_inc\Pallet pointers.asm"
00002520                            ; ---------------------------------------------------------------------------
00002520                            ; Pallet pointers
00002520                            ; ---------------------------------------------------------------------------
00002520 0000 0000                  	dc.l Pal_SegaBG		; pallet address
00002524 FB00                       	dc.w $FB00		; RAM address
00002526 001F                       	dc.w $1F		; (pallet length / 2) - 1
00002528 0000 0000                  	dc.l Pal_Title
0000252C FB00                       	dc.w $FB00
0000252E 001F                       	dc.w $1F
00002530 0000 0000                  	dc.l Pal_LevelSel
00002534 FB00                       	dc.w $FB00
00002536 001F                       	dc.w $1F
00002538 0000 0000                  	dc.l Pal_Sonic
0000253C FB00                       	dc.w $FB00
0000253E 0007                       	dc.w 7
00002540 0000 0000                  	dc.l Pal_GHZ
00002544 FB20                       	dc.w $FB20
00002546 0017                       	dc.w $17
00002548 0000 0000                  	dc.l Pal_LZ
0000254C FB20                       	dc.w $FB20
0000254E 0017                       	dc.w $17
00002550 0000 0000                  	dc.l Pal_MZ
00002554 FB20                       	dc.w $FB20
00002556 0017                       	dc.w $17
00002558 0000 0000                  	dc.l Pal_SLZ
0000255C FB20                       	dc.w $FB20
0000255E 0017                       	dc.w $17
00002560 0000 0000                  	dc.l Pal_SYZ
00002564 FB20                       	dc.w $FB20
00002566 0017                       	dc.w $17
00002568 0000 0000                  	dc.l Pal_SBZ1
0000256C FB20                       	dc.w $FB20
0000256E 0017                       	dc.w $17
00002570 0000 0000                  	dc.l Pal_Special
00002574 FB00                       	dc.w $FB00
00002576 001F                       	dc.w $1F
00002578 0000 0000                  	dc.l Pal_LZWater
0000257C FB00                       	dc.w $FB00
0000257E 001F                       	dc.w $1F
00002580 0000 0000                  	dc.l Pal_SBZ3
00002584 FB20                       	dc.w $FB20
00002586 0017                       	dc.w $17
00002588 0000 0000                  	dc.l Pal_SBZ3Water
0000258C FB00                       	dc.w $FB00
0000258E 001F                       	dc.w $1F
00002590 0000 0000                  	dc.l Pal_SBZ2
00002594 FB20                       	dc.w $FB20
00002596 0017                       	dc.w $17
00002598 0000 0000                  	dc.l Pal_LZSonWater
0000259C FB00                       	dc.w $FB00
0000259E 0007                       	dc.w 7
000025A0 0000 0000                  	dc.l Pal_SBZ3SonWat
000025A4 FB00                       	dc.w $FB00
000025A6 0007                       	dc.w 7
000025A8 0000 0000                  	dc.l Pal_SpeResult
000025AC FB00                       	dc.w $FB00
000025AE 001F                       	dc.w $1F
000025B0 0000 0000                  	dc.l Pal_SpeContinue
000025B4 FB00                       	dc.w $FB00
000025B6 000F                       	dc.w $F
000025B8 0000 0000                  	dc.l Pal_Ending
000025BC FB00                       	dc.w $FB00
000025BE 001F                       	dc.w $1F
000025C0 0000 0000                  	dc.l Menu_Palette; pallet address
000025C4 FB00                       	dc.w $FB00	; RAM address
000025C6 001F                       	dc.w $1F	; (pallet length / 2) - 1	
000025C6 001F                       	dc.w $1F	; (pallet length / 2) - 1	
000025C8                            PalPointers2:
000025C8                            		include "_inc\Pallet pointers2.asm"
000025C8                            	
000025C8                            ; ---------------------------------------------------------------------------
000025C8                            ; Pallet pointers 2
000025C8                            ; ---------------------------------------------------------------------------
000025C8 0000 0000                  	dc.l Pal_SegaBG		; pallet address
000025CC FB00                       	dc.w $FB00		; RAM address
000025CE 001F                       	dc.w $1F		; (pallet length / 2) - 1
000025D0 0000 0000                  	dc.l Pal_Title
000025D4 FB00                       	dc.w $FB00
000025D6 001F                       	dc.w $1F
000025D8 0000 0000                  	dc.l Pal_LevelSel
000025DC FB00                       	dc.w $FB00
000025DE 001F                       	dc.w $1F
000025E0 0000 0000                  	dc.l Pal_Sonic
000025E4 FB00                       	dc.w $FB00
000025E6 0007                       	dc.w 7
000025E8 0000 0000                  	dc.l Pal_GHZ2
000025EC FB20                       	dc.w $FB20
000025EE 0017                       	dc.w $17
000025F0 0000 0000                  	dc.l Pal_LZ2
000025F4 FB20                       	dc.w $FB20
000025F6 0017                       	dc.w $17
000025F8 0000 0000                  	dc.l Pal_MZ2
000025FC FB20                       	dc.w $FB20
000025FE 0017                       	dc.w $17
00002600 0000 0000                  	dc.l Pal_SLZ2
00002604 FB20                       	dc.w $FB20
00002606 0017                       	dc.w $17
00002608 0000 0000                  	dc.l Pal_SYZ2
0000260C FB20                       	dc.w $FB20
0000260E 0017                       	dc.w $17
00002610 0000 0000                  	dc.l Pal_SBZ1
00002614 FB20                       	dc.w $FB20
00002616 0017                       	dc.w $17
00002618 0000 0000                  	dc.l Pal_Special
0000261C FB00                       	dc.w $FB00
0000261E 001F                       	dc.w $1F
00002620 0000 0000                  	dc.l Pal_LZWater2
00002624 FB00                       	dc.w $FB00
00002626 001F                       	dc.w $1F
00002628 0000 0000                  	dc.l Pal_SBZ3
0000262C FB20                       	dc.w $FB20
0000262E 0017                       	dc.w $17
00002630 0000 0000                  	dc.l Pal_SBZ3Water
00002634 FB00                       	dc.w $FB00
00002636 001F                       	dc.w $1F
00002638 0000 0000                  	dc.l Pal_SBZ2
0000263C FB20                       	dc.w $FB20
0000263E 0017                       	dc.w $17
00002640 0000 0000                  	dc.l Pal_LZSonWater2
00002644 FB00                       	dc.w $FB00
00002646 0007                       	dc.w 7
00002648 0000 0000                  	dc.l Pal_SBZ3SonWat
0000264C FB00                       	dc.w $FB00
0000264E 0007                       	dc.w 7
00002650 0000 0000                  	dc.l Pal_SpeResult
00002654 FB00                       	dc.w $FB00
00002656 001F                       	dc.w $1F
00002658 0000 0000                  	dc.l Pal_SpeContinue
0000265C FB00                       	dc.w $FB00
0000265E 000F                       	dc.w $F
00002660 0000 0000                  	dc.l Pal_Ending
00002664 FB00                       	dc.w $FB00
00002666 001F                       	dc.w $1F
00002666 001F                       	dc.w $1F
00002668                            PalPointers3:
00002668                            		include "_inc\Pallet pointers3.asm"
00002668                            	
00002668                            ; ---------------------------------------------------------------------------
00002668                            ; Pallet pointers 3
00002668                            ; ---------------------------------------------------------------------------
00002668 0000 0000                  	dc.l Pal_SegaBG		; pallet address
0000266C FB00                       	dc.w $FB00		; RAM address
0000266E 001F                       	dc.w $1F		; (pallet length / 2) - 1
00002670 0000 0000                  	dc.l Pal_Title
00002674 FB00                       	dc.w $FB00
00002676 001F                       	dc.w $1F
00002678 0000 0000                  	dc.l Pal_LevelSel
0000267C FB00                       	dc.w $FB00
0000267E 001F                       	dc.w $1F
00002680 0000 0000                  	dc.l Pal_Sonic
00002684 FB00                       	dc.w $FB00
00002686 0007                       	dc.w 7
00002688 0000 0000                  	dc.l Pal_GHZ3
0000268C FB20                       	dc.w $FB20
0000268E 0017                       	dc.w $17
00002690 0000 0000                  	dc.l Pal_LZ3
00002694 FB20                       	dc.w $FB20
00002696 0017                       	dc.w $17
00002698 0000 0000                  	dc.l Pal_MZ3
0000269C FB20                       	dc.w $FB20
0000269E 0017                       	dc.w $17
000026A0 0000 0000                  	dc.l Pal_SLZ3
000026A4 FB20                       	dc.w $FB20
000026A6 0017                       	dc.w $17
000026A8 0000 0000                  	dc.l Pal_SYZ3
000026AC FB20                       	dc.w $FB20
000026AE 0017                       	dc.w $17
000026B0 0000 0000                  	dc.l Pal_SBZ1
000026B4 FB20                       	dc.w $FB20
000026B6 0017                       	dc.w $17
000026B8 0000 0000                  	dc.l Pal_Special
000026BC FB00                       	dc.w $FB00
000026BE 001F                       	dc.w $1F
000026C0 0000 0000                  	dc.l Pal_LZWater3
000026C4 FB00                       	dc.w $FB00
000026C6 001F                       	dc.w $1F
000026C8 0000 0000                  	dc.l Pal_SBZ3
000026CC FB20                       	dc.w $FB20
000026CE 0017                       	dc.w $17
000026D0 0000 0000                  	dc.l Pal_SBZ3Water
000026D4 FB00                       	dc.w $FB00
000026D6 001F                       	dc.w $1F
000026D8 0000 0000                  	dc.l Pal_SBZ2
000026DC FB20                       	dc.w $FB20
000026DE 0017                       	dc.w $17
000026E0 0000 0000                  	dc.l Pal_LZSonWater3
000026E4 FB00                       	dc.w $FB00
000026E6 0007                       	dc.w 7
000026E8 0000 0000                  	dc.l Pal_SBZ3SonWat
000026EC FB00                       	dc.w $FB00
000026EE 0007                       	dc.w 7
000026F0 0000 0000                  	dc.l Pal_SpeResult
000026F4 FB00                       	dc.w $FB00
000026F6 001F                       	dc.w $1F
000026F8 0000 0000                  	dc.l Pal_SpeContinue
000026FC FB00                       	dc.w $FB00
000026FE 000F                       	dc.w $F
00002700 0000 0000                  	dc.l Pal_Ending
00002704 FB00                       	dc.w $FB00
00002706 001F                       	dc.w $1F
00002706 001F                       	dc.w $1F
00002708                            ; ---------------------------------------------------------------------------
00002708                            ; Pallet data
00002708                            ; ---------------------------------------------------------------------------
00002708                            Pal_SegaBG:	incbin	pallet\sega_bg.bin
00002788                            Pal_Title:	incbin	pallet\title.bin
00002808                            Pal_LevelSel:	incbin	pallet\levelsel.bin
00002888                            Pal_Sonic:	incbin	pallet\sonic.bin
000028A8                            Pal_GHZ:	incbin	pallet\ghz.bin
00002908                            Pal_GHZ2: incbin pallet\ghz2.bin
00002968                            Pal_GHZ3: incbin pallet\ghz3.bin
000029C8                            Pal_LZ:		incbin	pallet\lz.bin
00002A28                            Pal_LZ2: incbin pallet\lz2.bin
00002A88                            Pal_LZ3: incbin pallet\lz3.bin
00002AE8                            Pal_LZWater: incbin pallet\lz_uw.bin; LZ underwater pallets
00002B68                            Pal_LZWater2: incbin pallet\lz_uw2.bin; LZ underwater pallets
00002BE8                            Pal_LZWater3: incbin pallet\lz_uw3.bin; LZ underwater pallets
00002C68                            Pal_MZ:		incbin	pallet\mz.bin
00002CC8                            Pal_MZ2: incbin pallet\mz2.bin
00002D28                            Pal_MZ3: incbin pallet\mz3.bin
00002D88                            Pal_SLZ:	incbin	pallet\slz.bin
00002DE8                            Pal_SLZ2: incbin pallet\slz2.bin
00002E48                            Pal_SLZ3: incbin pallet\slz3.bin
00002EA8                            Pal_SYZ:	incbin	pallet\syz.bin
00002F08                            Pal_SYZ2: incbin pallet\syz2.bin
00002F68                            Pal_SYZ3: incbin pallet\syz3.bin
00002FC8                            Pal_SBZ1:	incbin	pallet\sbz_act1.bin	; SBZ act 1 pallets
00003028                            Pal_SBZ2:	incbin	pallet\sbz_act2.bin	; SBZ act 2 & Final Zone pallets
00003088                            Pal_Special:	incbin	pallet\special.bin	; special stage pallets
00003108                            Pal_SBZ3:	incbin	pallet\sbz_act3.bin	; SBZ act 3 pallets
00003168                            Pal_SBZ3Water:	incbin	pallet\sbz_a3uw.bin	; SBZ act 3 (underwater) pallets
000031E8                            Pal_LZSonWater:	incbin	pallet\son_lzuw.bin	; Sonic (underwater in LZ) pallet
00003208                            Pal_LZSonWater2:	incbin	pallet\son_lzuw2.bin	; Sonic (underwater in LZ) pallet
00003228                            Pal_LZSonWater3:	incbin	pallet\son_lzuw3.bin	; Sonic (underwater in LZ) pallet
00003248                            Pal_SBZ3SonWat:	incbin	pallet\son_sbzu.bin	; Sonic (underwater in SBZ act 3) pallet
00003268                            Pal_SpeResult:	incbin	pallet\ssresult.bin	; special stage results screen pallets
000032E8                            Pal_SpeContinue:incbin	pallet\sscontin.bin	; special stage results screen continue pallet
00003328                            Pal_Ending:	incbin	pallet\ending.bin	; ending sequence pallets
000033A8                            
000033A8                            ; ---------------------------------------------------------------------------
000033A8                            ; Subroutine to	delay the program by ($FFFFF62A) frames
000033A8                            ; ---------------------------------------------------------------------------
000033A8                            
000033A8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000033A8                            
000033A8                            
000033A8                            DelayProgram:				; XREF: PauseGame
000033A8 46FC 2300                  		move	#$2300,sr
000033AC                            
000033AC                            loc_29AC:
000033AC 4A38 F62A                  		tst.b	($FFFFF62A).w
000033B0 66FA                       		bne.s	loc_29AC
000033B2 4E75                       		rts	
000033B4                            ; End of function DelayProgram
000033B4                            
000033B4                            ; ---------------------------------------------------------------------------
000033B4                            ; Subroutine to	generate a pseudo-random number	in d0
000033B4                            ; ---------------------------------------------------------------------------
000033B4                            
000033B4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000033B4                            
000033B4                            
000033B4                            RandomNumber:
000033B4 2238 F636                  		move.l	($FFFFF636).w,d1
000033B8 6600                       		bne.s	loc_29C0
000033BA 223C 2A6D 365A             		move.l	#$2A6D365A,d1
000033C0                            
000033C0                            loc_29C0:
000033C0 2001                       		move.l	d1,d0
000033C2 E581                       		asl.l	#2,d1
000033C4 D280                       		add.l	d0,d1
000033C6 E781                       		asl.l	#3,d1
000033C8 D280                       		add.l	d0,d1
000033CA 3001                       		move.w	d1,d0
000033CC 4841                       		swap	d1
000033CE D041                       		add.w	d1,d0
000033D0 3200                       		move.w	d0,d1
000033D2 4841                       		swap	d1
000033D4 21C1 F636                  		move.l	d1,($FFFFF636).w
000033D8 4E75                       		rts	
000033DA                            ; End of function RandomNumber
000033DA                            
000033DA                            
000033DA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000033DA                            
000033DA                            
000033DA                            CalcSine:				; XREF: SS_BGAnimate; et al
000033DA 0240 00FF                  		andi.w	#$FF,d0
000033DE D040                       		add.w	d0,d0
000033E0 0640 0080                  		addi.w	#$80,d0
000033E4 323B 0000                  		move.w	Sine_Data(pc,d0.w),d1
000033E8 0440 0080                  		subi.w	#$80,d0
000033EC 303B 0000                  		move.w	Sine_Data(pc,d0.w),d0
000033F0 4E75                       		rts	
000033F2                            ; End of function CalcSine
000033F2                            
000033F2                            ; ===========================================================================
000033F2                            
000033F2                            Sine_Data:	incbin	misc\sinewave.bin	; values for a 360� sine wave
00003672                            
00003672                            ; ===========================================================================
00003672 48E7 6000                  		movem.l	d1-d2,-(sp)
00003676 3200                       		move.w	d0,d1
00003678 4841                       		swap	d1
0000367A 7000                       		moveq	#0,d0
0000367C 3200                       		move.w	d0,d1
0000367E 7407                       		moveq	#7,d2
00003680                            
00003680                            loc_2C80:
00003680 E599                       		rol.l	#2,d1
00003682 D040                       		add.w	d0,d0
00003684 5240                       		addq.w	#1,d0
00003686 9240                       		sub.w	d0,d1
00003688 6400                       		bcc.s	loc_2C9A
0000368A D240                       		add.w	d0,d1
0000368C 5340                       		subq.w	#1,d0
0000368E 51CA FFF0                  		dbf	d2,loc_2C80
00003692 E248                       		lsr.w	#1,d0
00003694 4CDF 0006                  		movem.l	(sp)+,d1-d2
00003698 4E75                       		rts	
0000369A                            ; ===========================================================================
0000369A                            
0000369A                            loc_2C9A:
0000369A 5240                       		addq.w	#1,d0
0000369C 51CA FFE2                  		dbf	d2,loc_2C80
000036A0 E248                       		lsr.w	#1,d0
000036A2 4CDF 0006                  		movem.l	(sp)+,d1-d2
000036A6 4E75                       		rts	
000036A8                            
000036A8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000036A8                            
000036A8                            
000036A8                            CalcAngle:
000036A8 48E7 1800                  		movem.l	d3-d4,-(sp)
000036AC 7600                       		moveq	#0,d3
000036AE 7800                       		moveq	#0,d4
000036B0 3601                       		move.w	d1,d3
000036B2 3802                       		move.w	d2,d4
000036B4 8843                       		or.w	d3,d4
000036B6 6700                       		beq.s	loc_2D04
000036B8 3802                       		move.w	d2,d4
000036BA 4A43                       		tst.w	d3
000036BC 6A00 0000                  		bpl.w	loc_2CC2
000036C0 4443                       		neg.w	d3
000036C2                            
000036C2                            loc_2CC2:
000036C2 4A44                       		tst.w	d4
000036C4 6A00 0000                  		bpl.w	loc_2CCA
000036C8 4444                       		neg.w	d4
000036CA                            
000036CA                            loc_2CCA:
000036CA B843                       		cmp.w	d3,d4
000036CC 6400 0000                  		bcc.w	loc_2CDC
000036D0 E18C                       		lsl.l	#8,d4
000036D2 88C3                       		divu.w	d3,d4
000036D4 7000                       		moveq	#0,d0
000036D6 103B 4000                  		move.b	Angle_Data(pc,d4.w),d0
000036DA 6000                       		bra.s	loc_2CE6
000036DC                            ; ===========================================================================
000036DC                            
000036DC                            loc_2CDC:				; XREF: CalcAngle
000036DC E18B                       		lsl.l	#8,d3
000036DE 86C4                       		divu.w	d4,d3
000036E0 7040                       		moveq	#$40,d0
000036E2 903B 3000                  		sub.b	Angle_Data(pc,d3.w),d0
000036E6                            
000036E6                            loc_2CE6:
000036E6 4A41                       		tst.w	d1
000036E8 6A00 0000                  		bpl.w	loc_2CF2
000036EC 4440                       		neg.w	d0
000036EE 0640 0080                  		addi.w	#$80,d0
000036F2                            
000036F2                            loc_2CF2:
000036F2 4A42                       		tst.w	d2
000036F4 6A00 0000                  		bpl.w	loc_2CFE
000036F8 4440                       		neg.w	d0
000036FA 0640 0100                  		addi.w	#$100,d0
000036FE                            
000036FE                            loc_2CFE:
000036FE 4CDF 0018                  		movem.l	(sp)+,d3-d4
00003702 4E75                       		rts	
00003704                            ; ===========================================================================
00003704                            
00003704                            loc_2D04:				; XREF: CalcAngle
00003704 303C 0040                  		move.w	#$40,d0
00003708 4CDF 0018                  		movem.l	(sp)+,d3-d4
0000370C 4E75                       		rts	
0000370E                            ; End of function CalcAngle
0000370E                            
0000370E                            ; ===========================================================================
0000370E                            
0000370E                            Angle_Data:	incbin	misc\angles.bin
00003810                            
00003810                            ; ===========================================================================
00003810                            
00003810                            ; ---------------------------------------------------------------------------
00003810                            ; Sega screen
00003810                            ; ---------------------------------------------------------------------------
00003810                            
00003810                            SegaScreen:				; XREF: GameModeArray
00003810 103C 00E4                  		move.b	#$E4,d0
00003814 6100 DC66                  		bsr.w	PlaySound_Special ; stop music
00003818 6100 DF34                  		bsr.w	ClearPLC
0000381C 6100 EA96                  		bsr.w	Pal_MakeFlash
00003820 4DF9 00C0 0004             		lea	($C00004).l,a6
00003826 3CBC 8004                  		move.w	#$8004,(a6)
0000382A 3CBC 8230                  		move.w	#$8230,(a6)
0000382E 3CBC 8407                  		move.w	#$8407,(a6)
00003832 3CBC 8700                  		move.w	#$8700,(a6)
00003836 3CBC 8B00                  		move.w	#$8B00,(a6)
0000383A 4238 F64E                  		clr.b	($FFFFF64E).w
0000383E 46FC 2700                  		move	#$2700,sr
00003842 3038 F60C                  		move.w	($FFFFF60C).w,d0
00003846 0200 00BF                  		andi.b	#$BF,d0
0000384A 33C0 00C0 0004             		move.w	d0,($C00004).l
00003850 6100 DB34                  		bsr.w	ClearScreen
00003854 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
0000385E 41F9 0000 0000             		lea	(Nem_SegaLogo).l,a0 ; load Sega	logo patterns
00003864 6100 DD4A                  		bsr.w	NemDec
00003868 43F9 00FF 0000             		lea	($FF0000).l,a1
0000386E 41F9 0000 0000             		lea	(Eni_SegaLogo).l,a0 ; load Sega	logo mappings
00003874 303C 0000                  		move.w	#0,d0
00003878 6100 E014                  		bsr.w	EniDec
0000387C 43F9 00FF 0000             		lea	($FF0000).l,a1
00003882 203C 6510 0003             		move.l	#$65100003,d0
00003888 7217                       		moveq	#$17,d1
0000388A 7407                       		moveq	#7,d2
0000388C 6100 DC72                  		bsr.w	ShowVDPGraphics
00003890 43F9 00FF 0180             		lea	($FF0180).l,a1
00003896 203C 4000 0003             		move.l	#$40000003,d0
0000389C 7227                       		moveq	#$27,d1
0000389E 741B                       		moveq	#$1B,d2
000038A0 6100 DC5E                  		bsr.w	ShowVDPGraphics
000038A4 7000                       		moveq	#0,d0
000038A6 6100 EBC8                  		bsr.w	PalLoad2	; load Sega logo pallet
000038AA 31FC FFF6 F632             		move.w	#-$A,($FFFFF632).w
000038B0 31FC 0000 F634             		move.w	#0,($FFFFF634).w
000038B6 31FC 0000 F662             		move.w	#0,($FFFFF662).w
000038BC 31FC 0000 F660             		move.w	#0,($FFFFF660).w
000038C2 3038 F60C                  		move.w	($FFFFF60C).w,d0
000038C6 0000 0040                  		ori.b	#$40,d0
000038CA 33C0 00C0 0004             		move.w	d0,($C00004).l
000038D0                            
000038D0                            Sega_WaitPallet:
000038D0 11FC 0002 F62A             		move.b	#2,($FFFFF62A).w
000038D6 6100 FAD0                  		bsr.w	DelayProgram
000038DA 6100 EA66                  		bsr.w	PalCycle_Sega
000038DE 66F0                       		bne.s	Sega_WaitPallet
000038E0                            
000038E0 103C 00E1                  		move.b	#$E1,d0
000038E4 6100 DB96                  		bsr.w	PlaySound_Special ; play "SEGA"	sound
000038E8 11FC 0014 F62A             		move.b	#$14,($FFFFF62A).w
000038EE 6100 FAB8                  		bsr.w	DelayProgram
000038F2 31FC 001E F614             		move.w	#$1E,($FFFFF614).w
000038F8                            
000038F8                            Sega_WaitEnd:
000038F8 11FC 0002 F62A             		move.b	#2,($FFFFF62A).w
000038FE 6100 FAA8                  		bsr.w	DelayProgram
00003902 4A78 F614                  		tst.w	($FFFFF614).w
00003906 6700                       		beq.s	Sega_GotoTitle
00003908 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
0000390E 67E8                       		beq.s	Sega_WaitEnd	; if not, branch
00003910                            
00003910                            Sega_GotoTitle:
00003910 11FC 0004 F600             		move.b	#4,($FFFFF600).w ; go to title screen
00003916 4E75                       		rts	
00003918                            ; ===========================================================================
00003918                            
00003918                            ; ---------------------------------------------------------------------------
00003918                            ; Title	screen
00003918                            ; ---------------------------------------------------------------------------
00003918                            
00003918                            TitleScreen:				; XREF: GameModeArray
00003918 103C 00E4                  		move.b	#$E4,d0
0000391C 6100 DB5E                  		bsr.w	PlaySound_Special ; stop music
00003920 6100 DE2C                  		bsr.w	ClearPLC
00003924 6100 E860                  		bsr.w	Pal_FadeFrom
00003928 46FC 2700                  		move	#$2700,sr
0000392C 6100 DAE6                  		bsr.w	SoundDriverLoad
00003930 4DF9 00C0 0004             		lea	($C00004).l,a6
00003936 3CBC 8004                  		move.w	#$8004,(a6)
0000393A 3CBC 8230                  		move.w	#$8230,(a6)
0000393E 3CBC 8407                  		move.w	#$8407,(a6)
00003942 3CBC 9001                  		move.w	#$9001,(a6)
00003946 3CBC 9200                  		move.w	#$9200,(a6)
0000394A 3CBC 8B03                  		move.w	#$8B03,(a6)
0000394E 3CBC 8720                  		move.w	#$8720,(a6)
00003952 4238 F64E                  		clr.b	($FFFFF64E).w
00003956 6100 DA2E                  		bsr.w	ClearScreen
0000395A 43F8 D000                  		lea	($FFFFD000).w,a1
0000395E 7000                       		moveq	#0,d0
00003960 323C 07FF                  		move.w	#$7FF,d1
00003964                            
00003964                            Title_ClrObjRam:
00003964 22C0                       		move.l	d0,(a1)+
00003966 51C9 FFFC                  		dbf	d1,Title_ClrObjRam ; fill object RAM ($D000-$EFFF) with	$0
0000396A                            
0000396A 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
00003974 41F9 0000 0000             		lea	(Nem_JapNames).l,a0 ; load Japanese credits
0000397A 6100 DC34                  		bsr.w	NemDec
0000397E 23FC 54C0 0000 00C0 0004   		move.l	#$54C00000,($C00004).l
00003988 41F9 0000 0000             		lea	(Nem_CreditText).l,a0 ;	load alphabet
0000398E 6100 DC20                  		bsr.w	NemDec
00003992 43F9 00FF 0000             		lea	($FF0000).l,a1
00003998 41F9 0000 0000             		lea	(Eni_JapNames).l,a0 ; load mappings for	Japanese credits
0000399E 303C 0000                  		move.w	#0,d0
000039A2 6100 DEEA                  		bsr.w	EniDec
000039A6 43F9 00FF 0000             		lea	($FF0000).l,a1
000039AC 203C 4000 0003             		move.l	#$40000003,d0
000039B2 7227                       		moveq	#$27,d1
000039B4 741B                       		moveq	#$1B,d2
000039B6 6100 DB48                  		bsr.w	ShowVDPGraphics
000039BA 43F8 FB80                  		lea	($FFFFFB80).w,a1
000039BE 7000                       		moveq	#0,d0
000039C0 323C 001F                  		move.w	#$1F,d1
000039C4                            
000039C4                            Title_ClrPallet:
000039C4 22C0                       		move.l	d0,(a1)+
000039C6 51C9 FFFC                  		dbf	d1,Title_ClrPallet ; fill pallet with 0	(black)
000039CA                            
000039CA 7003                       		moveq	#3,d0		; load Sonic's pallet
000039CC 6100 EA66                  		bsr.w	PalLoad1
000039D0 11FC 008A D080             		move.b	#$8A,($FFFFD080).w ; load "SONIC TEAM PRESENTS"	object
000039D6 4EB9 0000 0000             		jsr	ObjectsLoad
000039DC 4EB9 0000 0000             		jsr	BuildSprites
000039E2 6100 E6EC                  		bsr.w	Pal_FadeTo
000039E6 46FC 2700                  		move	#$2700,sr
000039EA 23FC 4000 0001 00C0 0004   		move.l	#$40000001,($C00004).l
000039F4 41F9 0000 0000             		lea	(Nem_TitleFg).l,a0 ; load title	screen patterns
000039FA 6100 DBB4                  		bsr.w	NemDec
000039FE 23FC 6000 0001 00C0 0004   		move.l	#$60000001,($C00004).l
00003A08 41F9 0000 0000             		lea	(Nem_TitleSonic).l,a0 ;	load Sonic title screen	patterns
00003A0E 6100 DBA0                  		bsr.w	NemDec
00003A12 23FC 6200 0002 00C0 0004   		move.l	#$62000002,($C00004).l
00003A1C 41F9 0000 0000             		lea	(Nem_TitleTM).l,a0 ; load "TM" patterns
00003A22 6100 DB8C                  		bsr.w	NemDec
00003A26 4DF9 00C0 0000             		lea	($C00000).l,a6
00003A2C 2D7C 5000 0003 0004        		move.l	#$50000003,4(a6)
00003A34 4BF9 0000 0592             		lea	(Art_Text).l,a5
00003A3A 323C 028F                  		move.w	#$28F,d1
00003A3E                            
00003A3E                            Title_LoadText:
00003A3E 3C9D                       		move.w	(a5)+,(a6)
00003A40 51C9 FFFC                  		dbf	d1,Title_LoadText ; load uncompressed text patterns
00003A44                            
00003A44 11FC 0000 FE30             		move.b	#0,($FFFFFE30).w ; clear lamppost counter
00003A4A 31FC 0000 FE08             		move.w	#0,($FFFFFE08).w ; disable debug item placement	mode
00003A50 31FC 0000 FFF0             		move.w	#0,($FFFFFFF0).w ; disable debug mode
00003A56 31FC 0000 FFEA             		move.w	#0,($FFFFFFEA).w
00003A5C 31FC 0000 FE10             		move.w	#0,($FFFFFE10).w ; set level to	GHZ (00)
00003A62 31FC 0000 F634             		move.w	#0,($FFFFF634).w ; disable pallet cycling
00003A68 6100 0000                  		bsr.w	LevelSizeLoad
00003A6C 6100 0000                  		bsr.w	DeformBgLayer
00003A70 43F8 B000                  		lea	($FFFFB000).w,a1
00003A74 41F9 0000 0000             		lea	(Blk16_TS).l,a0 ; load TS 16x16 mappings
00003A7A 303C 0000                  		move.w	#0,d0
00003A7E 6100 DE0E                  		bsr.w	EniDec
00003A82 41F9 0000 0000             		lea	(Blk256_TS).l,a0 ; load TS 256x256 mappings
00003A88 43F9 00FF 0000             		lea	($FF0000).l,a1
00003A8E 6100 DF7C                  		bsr.w	KosDec
00003A92 6100 0000                  		bsr.w	LevelLayoutLoad
00003A96 6100 E6EE                  		bsr.w	Pal_FadeFrom
00003A9A 46FC 2700                  		move	#$2700,sr
00003A9E 6100 D8E6                  		bsr.w	ClearScreen
00003AA2 4BF9 00C0 0004             		lea	($C00004).l,a5
00003AA8 4DF9 00C0 0000             		lea	($C00000).l,a6
00003AAE 47F8 F708                  		lea	($FFFFF708).w,a3
00003AB2 49F8 A440                  		lea	($FFFFA440).w,a4
00003AB6 343C 6000                  		move.w	#$6000,d2
00003ABA 6100 0000                  		bsr.w	LoadTilesFromStart2
00003ABE 43F9 00FF 0000             		lea	($FF0000).l,a1
00003AC4 41F9 0000 0000             		lea	(Eni_Title).l,a0 ; load	title screen mappings
00003ACA 303C 0000                  		move.w	#0,d0
00003ACE 6100 DDBE                  		bsr.w	EniDec
00003AD2 43F9 00FF 0000             		lea	($FF0000).l,a1
00003AD8 203C 4208 0003             		move.l	#$42080003,d0
00003ADE 7221                       		moveq	#$21,d1
00003AE0 7415                       		moveq	#$15,d2
00003AE2 6100 DA1C                  		bsr.w	ShowVDPGraphics
00003AE6 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
00003AF0 41F9 0000 0000             		lea	(Nem_TS_1st).l,a0 ; load TS patterns
00003AF6 6100 DAB8                  		bsr.w	NemDec
00003AFA 7001                       		moveq	#1,d0		; load title screen pallet
00003AFC 6100 E936                  		bsr.w	PalLoad1
00003B00 103C 008A                  		move.b	#$8A,d0		; play title screen music
00003B04 6100 D976                  		bsr.w	PlaySound_Special
00003B08 11FC 0000 FFFA             		move.b	#0,($FFFFFFFA).w ; disable debug mode
00003B0E 31FC 0578 F614             		move.w	#$578,($FFFFF614).w ; run title	screen for 578 frames
00003B14 43F8 D080                  		lea	($FFFFD080).w,a1
00003B18 7000                       		moveq	#0,d0
00003B1A 323C 000F                  		move.w	#$F,d1	; ($40 / 4) - 1
00003B1E                            
00003B1E                            Title_ClrObjRam2:
00003B1E 22C0                       		move.l	d0,(a1)+
00003B20 51C9 FFFC                  		dbf	d1,Title_ClrObjRam2
00003B24                            
00003B24 11FC 000E D040             		move.b	#$E,($FFFFD040).w ; load big Sonic object
00003B2A 11FC 000F D080             		move.b	#$F,($FFFFD080).w ; load "PRESS	START BUTTON" object
00003B30 11FC 000F D0C0             		move.b	#$F,($FFFFD0C0).w ; load "TM" object
00003B36 11FC 0003 D0DA             		move.b	#3,($FFFFD0DA).w
00003B3C 11FC 000F D100             		move.b	#$F,($FFFFD100).w
00003B42 11FC 0002 D11A             		move.b	#2,($FFFFD11A).w
00003B48 4EB9 0000 0000             		jsr	ObjectsLoad
00003B4E 6100 0000                  		bsr.w	DeformBgLayer
00003B52 4EB9 0000 0000             		jsr	BuildSprites
00003B58 7000                       		moveq	#0,d0
00003B5A 6100 DBC6                  		bsr.w	LoadPLC2
00003B5E 31FC 0000 FFE4             		move.w	#0,($FFFFFFE4).w
00003B64 31FC 0000 FFE6             		move.w	#0,($FFFFFFE6).w
00003B6A 3038 F60C                  		move.w	($FFFFF60C).w,d0
00003B6E 0000 0040                  		ori.b	#$40,d0
00003B72 33C0 00C0 0004             		move.w	d0,($C00004).l
00003B78 6100 E556                  		bsr.w	Pal_FadeTo
00003B7C                            
00003B7C                            loc_317C:
00003B7C 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00003B82 6100 F824                  		bsr.w	DelayProgram
00003B86 4EB9 0000 0000             		jsr	ObjectsLoad
00003B8C 6100 0000                  		bsr.w	DeformBgLayer
00003B90 4EB9 0000 0000             		jsr	BuildSprites
00003B96 6100 DF3A                  		bsr.w	PalCycle_Title
00003B9A 6100 DBC0                  		bsr.w	RunPLC_RAM
00003B9E 3038 D008                  		move.w	($FFFFD008).w,d0
00003BA2 5440                       		addq.w	#2,d0
00003BA4 31C0 D008                  		move.w	d0,($FFFFD008).w ; move	Sonic to the right
00003BA8 0C40 1C00                  		cmpi.w	#$1C00,d0	; has Sonic object passed x-position $1C00?
00003BAC 6500                       		bcs.s	Title_ChkRegion	; if not, branch
00003BAE 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
00003BB4 4E75                       		rts	
00003BB6                            ; ===========================================================================
00003BB6                            
00003BB6                            Title_ChkRegion:
00003BB6 4A38 FFF8                  		tst.b	($FFFFFFF8).w	; check	if the machine is US or	Japanese
00003BBA 6A00                       		bpl.s	Title_RegionJ	; if Japanese, branch
00003BBC 41F9 0000 0000             		lea	(LevelSelectCode_US).l,a0 ; load US code
00003BC2 6000                       		bra.s	Title_EnterCheat
00003BC4                            ; ===========================================================================
00003BC4                            
00003BC4                            Title_RegionJ:				; XREF: Title_ChkRegion
00003BC4 41F9 0000 0000             		lea	(LevelSelectCode_J).l,a0 ; load	J code
00003BCA                            
00003BCA                            Title_EnterCheat:			; XREF: Title_ChkRegion
00003BCA 3038 FFE4                  		move.w	($FFFFFFE4).w,d0
00003BCE D0C0                       		adda.w	d0,a0
00003BD0 1038 F605                  		move.b	($FFFFF605).w,d0 ; get button press
00003BD4 0200 000F                  		andi.b	#$F,d0		; read only up/down/left/right buttons
00003BD8 B010                       		cmp.b	(a0),d0		; does button press match the cheat code?
00003BDA 6600                       		bne.s	loc_3210	; if not, branch
00003BDC 5278 FFE4                  		addq.w	#1,($FFFFFFE4).w ; next	button press
00003BE0 4A00                       		tst.b	d0
00003BE2 6600                       		bne.s	Title_CountC
00003BE4 41F8 FFE0                  		lea	($FFFFFFE0).w,a0
00003BE8 3238 FFE6                  		move.w	($FFFFFFE6).w,d1
00003BEC E249                       		lsr.w	#1,d1
00003BEE 0241 0003                  		andi.w	#3,d1
00003BF2 6700                       		beq.s	Title_PlayRing
00003BF4 4A38 FFF8                  		tst.b	($FFFFFFF8).w
00003BF8 6A00                       		bpl.s	Title_PlayRing
00003BFA 7201                       		moveq	#1,d1
00003BFC 1181 1001                  		move.b	d1,1(a0,d1.w)
00003C00                            
00003C00                            Title_PlayRing:
00003C00 11BC 0001 1000             		move.b	#1,(a0,d1.w)	; activate cheat
00003C06 103C 00B5                  		move.b	#$B5,d0		; play ring sound when code is entered
00003C0A 6100 D870                  		bsr.w	PlaySound_Special
00003C0E 6000                       		bra.s	Title_CountC
00003C10                            ; ===========================================================================
00003C10                            
00003C10                            loc_3210:				; XREF: Title_EnterCheat
00003C10 4A00                       		tst.b	d0
00003C12 6700                       		beq.s	Title_CountC
00003C14 0C78 0009 FFE4             		cmpi.w	#9,($FFFFFFE4).w
00003C1A 6700                       		beq.s	Title_CountC
00003C1C 31FC 0000 FFE4             		move.w	#0,($FFFFFFE4).w
00003C22                            
00003C22                            Title_CountC:
00003C22 1038 F605                  		move.b	($FFFFF605).w,d0
00003C26 0200 0020                  		andi.b	#$20,d0		; is C button pressed?
00003C2A 6700                       		beq.s	loc_3230	; if not, branch
00003C2C 5278 FFE6                  		addq.w	#1,($FFFFFFE6).w ; increment C button counter
00003C30                            
00003C30                            loc_3230:
00003C30 4A78 F614                  		tst.w	($FFFFF614).w
00003C34 6700 0000                  		beq.w	Demo
00003C38 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; check if Start is pressed
00003C3E 6700 FF3C                  		beq.w	loc_317C	; if not, branch
00003C42                            
00003C42                            Title_ChkLevSel:
00003C42 4A38 FFE0                  		tst.b	($FFFFFFE0).w		; check	if level select	code is	on
00003C46 6700 0000                  		beq.w	PlayLevel		; if not, play level
00003C4A 0838 0006 F604             		btst	#6,($FFFFF604).w ; check if A is pressed
00003C50 6700 0000                  		beq.w	PlayLevel		; if not, play level
00003C54 4EF9 0000 0000             		jmp	Level_Select_Menu	; if yes, goto Sonic 2 level select	
00003C5A 7002                       		moveq	#2,d0
00003C5C 43F8 CC00                  		lea	($FFFFCC00).w,a1
00003C60 7000                       		moveq	#0,d0
00003C62 323C 00DF                  		move.w	#$DF,d1
00003C66                            
00003C66                            Title_ClrScroll:
00003C66 22C0                       		move.l	d0,(a1)+
00003C68 51C9 FFFC                  		dbf	d1,Title_ClrScroll ; fill scroll data with 0
00003C6C                            
00003C6C 21C0 F616                  		move.l	d0,($FFFFF616).w
00003C70 46FC 2700                  		move	#$2700,sr
00003C74 4DF9 00C0 0000             		lea	($C00000).l,a6
00003C7A 23FC 6000 0003 00C0 0004   		move.l	#$60000003,($C00004).l
00003C84 323C 03FF                  		move.w	#$3FF,d1
00003C88                            
00003C88                            Title_ClrVram:
00003C88 2C80                       		move.l	d0,(a6)
00003C8A 51C9 FFFC                  		dbf	d1,Title_ClrVram ; fill	VRAM with 0
00003C8E                            
00003C8E 6100 0000                  		bsr.w	LevSelTextLoad
00003C92                            
00003C92                            ; ---------------------------------------------------------------------------
00003C92                            ; Level	Select
00003C92                            ; ---------------------------------------------------------------------------
00003C92                            
00003C92                            LevelSelect:
00003C92 11FC 0002 F62A             		move.b	#2,($FFFFF62A).w
00003C98 6100 F70E                  		bsr.w	DelayProgram
00003C9C 6100 0000                  		bsr.w	LevSelControls
00003CA0 6100 DABA                  		bsr.w	RunPLC_RAM
00003CA4 4AB8 F680                  		tst.l	($FFFFF680).w
00003CA8 66E8                       		bne.s	LevelSelect
00003CAA 0238 00F0 F605             		andi.b	#$F0,($FFFFF605).w ; is	A, B, C, or Start pressed?
00003CB0 67E0                       		beq.s	LevelSelect	; if not, branch
00003CB2 3038 FF82                  		move.w	($FFFFFF82).w,d0
00003CB6 0C40 0014                  		cmpi.w	#$14,d0		; have you selected item $14 (sound test)?
00003CBA 6600                       		bne.s	LevSel_Level_SS	; if not, go to	Level/SS subroutine
00003CBC 3038 FF84                  		move.w	($FFFFFF84).w,d0
00003CC0 0640 0080                  		addi.w	#$80,d0
00003CC4 4A38 FFE3                  		tst.b	($FFFFFFE3).w	; is Japanese Credits cheat on?
00003CC8 6700                       		beq.s	LevSel_NoCheat	; if not, branch
00003CCA 0C40 009F                  		cmpi.w	#$9F,d0		; is sound $9F being played?
00003CCE 6700                       		beq.s	LevSel_Ending	; if yes, branch
00003CD0 0C40 009E                  		cmpi.w	#$9E,d0		; is sound $9E being played?
00003CD4 6700                       		beq.s	LevSel_Credits	; if yes, branch
00003CD6                            
00003CD6                            LevSel_NoCheat:
00003CD6 0C40 00A0                  		cmpi.w	#$A0,d0		; is sound $80-$94 being played?
00003CDA 6500                       		bcs.s	LevSel_PlaySnd	; if yes, branch
00003CDC 0C40 00A0                  		cmpi.w	#$A0,d0		; is sound $95-$A0 being played?
00003CE0 65B0                       		bcs.s	LevelSelect	; if yes, branch
00003CE2                            
00003CE2                            LevSel_PlaySnd:
00003CE2 6100 D798                  		bsr.w	PlaySound_Special
00003CE6 60AA                       		bra.s	LevelSelect
00003CE8                            ; ===========================================================================
00003CE8                            
00003CE8                            LevSel_Ending:				; XREF: LevelSelect
00003CE8 11FC 0018 F600             		move.b	#$18,($FFFFF600).w ; set screen	mode to	$18 (Ending)
00003CEE 31FC 0600 FE10             		move.w	#$600,($FFFFFE10).w ; set level	to 0600	(Ending)
00003CF4 4E75                       		rts	
00003CF6                            ; ===========================================================================
00003CF6                            
00003CF6                            LevSel_Credits:				; XREF: LevelSelect
00003CF6 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; set screen	mode to	$1C (Credits)
00003CFC 103C 0091                  		move.b	#$91,d0
00003D00 6100 D77A                  		bsr.w	PlaySound_Special ; play credits music
00003D04 31FC 0000 FFF4             		move.w	#0,($FFFFFFF4).w
00003D0A 4E75                       		rts	
00003D0C                            ; ===========================================================================
00003D0C                            
00003D0C                            LevSel_Level_SS:			; XREF: LevelSelect
00003D0C D040                       		add.w	d0,d0
00003D0E 303B 0000                  		move.w	LSelectPointers(pc,d0.w),d0 ; load level number
00003D12 6B00 FF7E                  		bmi.w	LevelSelect
00003D16 0C40 0700                  		cmpi.w	#$700,d0	; check	if level is 0700 (Special Stage)
00003D1A 6600                       		bne.s	LevSel_Level	; if not, branch
00003D1C 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set screen	mode to	$10 (Special Stage)
00003D22 4278 FE10                  		clr.w	($FFFFFE10).w	; clear	level
00003D26 11FC 0003 FE12             		move.b	#3,($FFFFFE12).w ; set lives to	3
00003D2C 7000                       		moveq	#0,d0
00003D2E 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00003D32 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00003D36 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00003D3A 4E75                       		rts	
00003D3C                            ; ===========================================================================
00003D3C                            
00003D3C                            LevSel_Level:				; XREF: LevSel_Level_SS
00003D3C 0240 3FFF                  		andi.w	#$3FFF,d0
00003D40 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level number
00003D44                            
00003D44                            PlayLevel:				; XREF: ROM:00003246j ...
00003D44 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
00003D4A 11FC 0003 FE12             		move.b	#3,($FFFFFE12).w ; set lives to	3
00003D50 7000                       		moveq	#0,d0
00003D52 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00003D56 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00003D5A 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00003D5E 11C0 FE16                  		move.b	d0,($FFFFFE16).w ; clear special stage number
00003D62 11C0 FE57                  		move.b	d0,($FFFFFE57).w ; clear emeralds
00003D66 21C0 FE58                  		move.l	d0,($FFFFFE58).w ; clear emeralds
00003D6A 21C0 FE5C                  		move.l	d0,($FFFFFE5C).w ; clear emeralds
00003D6E 11C0 FE18                  		move.b	d0,($FFFFFE18).w ; clear continues
00003D72 103C 00E0                  		move.b	#$E0,d0
00003D76 6100 D704                  		bsr.w	PlaySound_Special ; fade out music
00003D7A 4E75                       		rts	
00003D7C                            ; ===========================================================================
00003D7C                            ; ---------------------------------------------------------------------------
00003D7C                            ; Level	select - level pointers
00003D7C                            ; ---------------------------------------------------------------------------
00003D7C                            LSelectPointers:
00003D7C                            		incbin	misc\ls_point.bin
00003DA6                            		even
00003DA6                            ; ---------------------------------------------------------------------------
00003DA6                            ; Level	select codes
00003DA6                            ; ---------------------------------------------------------------------------
00003DA6                            LevelSelectCode_J:
00003DA6                            		incbin	misc\ls_jcode.bin
00003DAC                            		even
00003DAC                            
00003DAC                            LevelSelectCode_US:
00003DAC                            		incbin	misc\ls_ucode.bin
00003DB2                            		even
00003DB2                            ; ===========================================================================
00003DB2                            
00003DB2                            ; ---------------------------------------------------------------------------
00003DB2                            ; Demo mode
00003DB2                            ; ---------------------------------------------------------------------------
00003DB2                            
00003DB2                            Demo:					; XREF: TitleScreen
00003DB2 31FC 001E F614             		move.w	#$1E,($FFFFF614).w
00003DB8                            
00003DB8                            loc_33B6:				; XREF: loc_33E4
00003DB8 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00003DBE 6100 F5E8                  		bsr.w	DelayProgram
00003DC2 6100 0000                  		bsr.w	DeformBgLayer
00003DC6 6100 DCE4                  		bsr.w	PalCycle_Load
00003DCA 6100 D990                  		bsr.w	RunPLC_RAM
00003DCE 3038 D008                  		move.w	($FFFFD008).w,d0
00003DD2 5440                       		addq.w	#2,d0
00003DD4 31C0 D008                  		move.w	d0,($FFFFD008).w
00003DD8 0C40 1C00                  		cmpi.w	#$1C00,d0
00003DDC 6500                       		bcs.s	loc_33E4
00003DDE 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set screen mode to 00 (level)
00003DE4 4E75                       		rts	
00003DE6                            ; ===========================================================================
00003DE6                            
00003DE6                            loc_33E4:				; XREF: Demo
00003DE6 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
00003DEC 6600 FE54                  		bne.w	Title_ChkLevSel	; if yes, branch
00003DF0 4A78 F614                  		tst.w	($FFFFF614).w
00003DF4 6600 FFC2                  		bne.w	loc_33B6
00003DF8 103C 00E0                  		move.b	#$E0,d0
00003DFC 6100 D67E                  		bsr.w	PlaySound_Special ; fade out music
00003E00 3038 FFF2                  		move.w	($FFFFFFF2).w,d0 ; load	demo number
00003E04 0240 0007                  		andi.w	#7,d0
00003E08 D040                       		add.w	d0,d0
00003E0A 303B 0000                  		move.w	Demo_Levels(pc,d0.w),d0	; load level number for	demo
00003E0E 31C0 FE10                  		move.w	d0,($FFFFFE10).w
00003E12 5278 FFF2                  		addq.w	#1,($FFFFFFF2).w ; add 1 to demo number
00003E16 0C78 0004 FFF2             		cmpi.w	#4,($FFFFFFF2).w ; is demo number less than 4?
00003E1C 6500                       		bcs.s	loc_3422	; if yes, branch
00003E1E 31FC 0000 FFF2             		move.w	#0,($FFFFFFF2).w ; reset demo number to	0
00003E24                            
00003E24                            loc_3422:
00003E24 31FC 0001 FFF0             		move.w	#1,($FFFFFFF0).w ; turn	demo mode on
00003E2A 11FC 0008 F600             		move.b	#8,($FFFFF600).w ; set screen mode to 08 (demo)
00003E30 0C40 0600                  		cmpi.w	#$600,d0	; is level number 0600 (special	stage)?
00003E34 6600                       		bne.s	Demo_Level	; if not, branch
00003E36 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set screen	mode to	$10 (Special Stage)
00003E3C 4278 FE10                  		clr.w	($FFFFFE10).w	; clear	level number
00003E40 4238 FE16                  		clr.b	($FFFFFE16).w	; clear	special	stage number
00003E44                            
00003E44                            Demo_Level:
00003E44 11FC 0003 FE12             		move.b	#3,($FFFFFE12).w ; set lives to	3
00003E4A 7000                       		moveq	#0,d0
00003E4C 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00003E50 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00003E54 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00003E58 4E75                       		rts	
00003E5A                            ; ===========================================================================
00003E5A                            ; ---------------------------------------------------------------------------
00003E5A                            ; Levels used in demos
00003E5A                            ; ---------------------------------------------------------------------------
00003E5A                            Demo_Levels:	incbin	misc\dm_ord1.bin
00003E62                            		even
00003E62                            
00003E62                            ; ---------------------------------------------------------------------------
00003E62                            ; Subroutine to	change what you're selecting in the level select
00003E62                            ; ---------------------------------------------------------------------------
00003E62                            
00003E62                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003E62                            
00003E62                            
00003E62                            LevSelControls:				; XREF: LevelSelect
00003E62 1238 F605                  		move.b	($FFFFF605).w,d1
00003E66 0201 0003                  		andi.b	#3,d1		; is up/down pressed and held?
00003E6A 6600                       		bne.s	LevSel_UpDown	; if yes, branch
00003E6C 5378 FF80                  		subq.w	#1,($FFFFFF80).w ; subtract 1 from time	to next	move
00003E70 6A00                       		bpl.s	LevSel_SndTest	; if time remains, branch
00003E72                            
00003E72                            LevSel_UpDown:
00003E72 31FC 000B FF80             		move.w	#$B,($FFFFFF80).w ; reset time delay
00003E78 1238 F604                  		move.b	($FFFFF604).w,d1
00003E7C 0201 0003                  		andi.b	#3,d1		; is up/down pressed?
00003E80 6700                       		beq.s	LevSel_SndTest	; if not, branch
00003E82 3038 FF82                  		move.w	($FFFFFF82).w,d0
00003E86 0801 0000                  		btst	#0,d1		; is up	pressed?
00003E8A 6700                       		beq.s	LevSel_Down	; if not, branch
00003E8C 5340                       		subq.w	#1,d0		; move up 1 selection
00003E8E 6400                       		bcc.s	LevSel_Down
00003E90 7014                       		moveq	#$14,d0		; if selection moves below 0, jump to selection	$14
00003E92                            
00003E92                            LevSel_Down:
00003E92 0801 0001                  		btst	#1,d1		; is down pressed?
00003E96 6700                       		beq.s	LevSel_Refresh	; if not, branch
00003E98 5240                       		addq.w	#1,d0		; move down 1 selection
00003E9A 0C40 0015                  		cmpi.w	#$15,d0
00003E9E 6500                       		bcs.s	LevSel_Refresh
00003EA0 7000                       		moveq	#0,d0		; if selection moves above $14,	jump to	selection 0
00003EA2                            
00003EA2                            LevSel_Refresh:
00003EA2 31C0 FF82                  		move.w	d0,($FFFFFF82).w ; set new selection
00003EA6 6100 0000                  		bsr.w	LevSelTextLoad	; refresh text
00003EAA 4E75                       		rts	
00003EAC                            ; ===========================================================================
00003EAC                            
00003EAC                            LevSel_SndTest:				; XREF: LevSelControls
00003EAC 0C78 0014 FF82             		cmpi.w	#$14,($FFFFFF82).w ; is	item $14 selected?
00003EB2 6600                       		bne.s	LevSel_NoMove	; if not, branch
00003EB4 1238 F605                  		move.b	($FFFFF605).w,d1
00003EB8 0201 000C                  		andi.b	#$C,d1		; is left/right	pressed?
00003EBC 6700                       		beq.s	LevSel_NoMove	; if not, branch
00003EBE 3038 FF84                  		move.w	($FFFFFF84).w,d0
00003EC2 0801 0002                  		btst	#2,d1		; is left pressed?
00003EC6 6700                       		beq.s	LevSel_Right	; if not, branch
00003EC8 5340                       		subq.w	#1,d0		; subtract 1 from sound	test
00003ECA 6400                       		bcc.s	LevSel_Right
00003ECC 704F                       		moveq	#$4F,d0		; if sound test	moves below 0, set to $4F
00003ECE                            
00003ECE                            LevSel_Right:
00003ECE 0801 0003                  		btst	#3,d1		; is right pressed?
00003ED2 6700                       		beq.s	LevSel_Refresh2	; if not, branch
00003ED4 5240                       		addq.w	#1,d0		; add 1	to sound test
00003ED6 0C40 0050                  		cmpi.w	#$50,d0
00003EDA 6500                       		bcs.s	LevSel_Refresh2
00003EDC 7000                       		moveq	#0,d0		; if sound test	moves above $4F, set to	0
00003EDE                            
00003EDE                            LevSel_Refresh2:
00003EDE 31C0 FF84                  		move.w	d0,($FFFFFF84).w ; set sound test number
00003EE2 6100 0000                  		bsr.w	LevSelTextLoad	; refresh text
00003EE6                            
00003EE6                            LevSel_NoMove:
00003EE6 4E75                       		rts	
00003EE8                            ; End of function LevSelControls
00003EE8                            
00003EE8                            ; ---------------------------------------------------------------------------
00003EE8                            ; Subroutine to load level select text
00003EE8                            ; ---------------------------------------------------------------------------
00003EE8                            
00003EE8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003EE8                            
00003EE8                            
00003EE8                            LevSelTextLoad:				; XREF: TitleScreen
00003EE8 43F9 0000 0000             		lea	(LevelMenuText).l,a1
00003EEE 4DF9 00C0 0000             		lea	($C00000).l,a6
00003EF4 283C 6210 0003             		move.l	#$62100003,d4	; screen position (text)
00003EFA 363C E680                  		move.w	#$E680,d3	; VRAM setting
00003EFE 7214                       		moveq	#$14,d1		; number of lines of text
00003F00                            
00003F00                            loc_34FE:				; XREF: LevSelTextLoad+26j
00003F00 2D44 0004                  		move.l	d4,4(a6)
00003F04 6100 0000                  		bsr.w	LevSel_ChgLine
00003F08 0684 0080 0000             		addi.l	#$800000,d4
00003F0E 51C9 FFF0                  		dbf	d1,loc_34FE
00003F12 7000                       		moveq	#0,d0
00003F14 3038 FF82                  		move.w	($FFFFFF82).w,d0
00003F18 3200                       		move.w	d0,d1
00003F1A 283C 6210 0003             		move.l	#$62100003,d4
00003F20 EF48                       		lsl.w	#7,d0
00003F22 4840                       		swap	d0
00003F24 D880                       		add.l	d0,d4
00003F26 43F9 0000 0000             		lea	(LevelMenuText).l,a1
00003F2C E749                       		lsl.w	#3,d1
00003F2E 3001                       		move.w	d1,d0
00003F30 D241                       		add.w	d1,d1
00003F32 D240                       		add.w	d0,d1
00003F34 D2C1                       		adda.w	d1,a1
00003F36 363C C680                  		move.w	#$C680,d3
00003F3A 2D44 0004                  		move.l	d4,4(a6)
00003F3E 6100 0000                  		bsr.w	LevSel_ChgLine
00003F42 363C E680                  		move.w	#$E680,d3
00003F46 0C78 0014 FF82             		cmpi.w	#$14,($FFFFFF82).w
00003F4C 6600                       		bne.s	loc_3550
00003F4E 363C C680                  		move.w	#$C680,d3
00003F52                            
00003F52                            loc_3550:
00003F52 23FC 6C30 0003 00C0 0004   		move.l	#$6C300003,($C00004).l ; screen	position (sound	test)
00003F5C 3038 FF84                  		move.w	($FFFFFF84).w,d0
00003F60 0640 0080                  		addi.w	#$80,d0
00003F64 1400                       		move.b	d0,d2
00003F66 E808                       		lsr.b	#4,d0
00003F68 6100 0000                  		bsr.w	LevSel_ChgSnd
00003F6C 1002                       		move.b	d2,d0
00003F6E 6100 0000                  		bsr.w	LevSel_ChgSnd
00003F72 4E75                       		rts	
00003F74                            ; End of function LevSelTextLoad
00003F74                            
00003F74                            
00003F74                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003F74                            
00003F74                            
00003F74                            LevSel_ChgSnd:				; XREF: LevSelTextLoad
00003F74 0240 000F                  		andi.w	#$F,d0
00003F78 0C00 000A                  		cmpi.b	#$A,d0
00003F7C 6500                       		bcs.s	loc_3580
00003F7E 5E00                       		addi.b	#7,d0
00003F80                            
00003F80                            loc_3580:
00003F80 D043                       		add.w	d3,d0
00003F82 3C80                       		move.w	d0,(a6)
00003F84 4E75                       		rts	
00003F86                            ; End of function LevSel_ChgSnd
00003F86                            
00003F86                            
00003F86                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003F86                            
00003F86                            
00003F86                            LevSel_ChgLine:				; XREF: LevSelTextLoad
00003F86 7417                       		moveq	#$17,d2		; number of characters per line
00003F88                            
00003F88                            loc_3588:
00003F88 7000                       		moveq	#0,d0
00003F8A 1019                       		move.b	(a1)+,d0
00003F8C 6A00                       		bpl.s	loc_3598
00003F8E 3CBC 0000                  		move.w	#0,(a6)
00003F92 51CA FFF4                  		dbf	d2,loc_3588
00003F96 4E75                       		rts	
00003F98                            ; ===========================================================================
00003F98                            
00003F98                            loc_3598:				; XREF: LevSel_ChgLine
00003F98 D043                       		add.w	d3,d0
00003F9A 3C80                       		move.w	d0,(a6)
00003F9C 51CA FFEA                  		dbf	d2,loc_3588
00003FA0 4E75                       		rts	
00003FA2                            ; End of function LevSel_ChgLine
00003FA2                            
00003FA2                            ; ===========================================================================
00003FA2                            ; ---------------------------------------------------------------------------
00003FA2                            ; Level	select menu text
00003FA2                            ; ---------------------------------------------------------------------------
00003FA2                            LevelMenuText:	incbin	misc\menutext.bin
0000419A                            		even
0000419A                            ; ---------------------------------------------------------------------------
0000419A                            ; Music	playlist
0000419A                            ; ---------------------------------------------------------------------------
0000419A                            MusicList1:	incbin	misc\muslist1.bin
000041A0                            		even
000041A0                            MusicList2:	incbin	misc\muslist2.bin
000041A6                            		even
000041A6                            MusicList3:	incbin	misc\muslist3.bin
000041AC                            		even
000041AC                            MusicList4:	incbin	misc\muslist4.bin
000041B2                            		even						
000041B2                            ; ===========================================================================
000041B2                            
000041B2                            ; ---------------------------------------------------------------------------
000041B2                            ; Level
000041B2                            ; ---------------------------------------------------------------------------
000041B2                            
000041B2                            Level:					; XREF: GameModeArray
000041B2 08F8 0007 F600             		bset	#7,($FFFFF600).w ; add $80 to screen mode (for pre level sequence)
000041B8 4A78 FFF0                  		tst.w	($FFFFFFF0).w
000041BC 6B00                       		bmi.s	loc_37B6
000041BE 103C 00E0                  		move.b	#$E0,d0
000041C2 6100 D2B8                  		bsr.w	PlaySound_Special ; fade out music
000041C6                            
000041C6                            loc_37B6:
000041C6 6100 D586                  		bsr.w	ClearPLC
000041CA 6100 DFBA                  		bsr.w	Pal_FadeFrom
000041CE 4A78 FFF0                  		tst.w	($FFFFFFF0).w
000041D2 6B00                       		bmi.s	Level_ClrRam
000041D4 46FC 2700                  		move	#$2700,sr
000041D8 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
000041E2 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
000041E8 6100 D3C6                  		bsr.w	NemDec
000041EC 46FC 2300                  		move	#$2300,sr
000041F0 7000                       		moveq	#0,d0
000041F2 1038 FE10                  		move.b	($FFFFFE10).w,d0
000041F6 E948                       		lsl.w	#4,d0
000041F8 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2
000041FE 45F2 0000                  		lea	(a2,d0.w),a2
00004202 7000                       		moveq	#0,d0
00004204 1012                       		move.b	(a2),d0
00004206 6700                       		beq.s	loc_37FC
00004208 6100 D4E6                  		bsr.w	LoadPLC		; load level patterns
0000420C                            
0000420C                            loc_37FC:
0000420C 7001                       		moveq	#1,d0
0000420E 6100 D4E0                  		bsr.w	LoadPLC		; load standard	patterns
00004212                            
00004212                            Level_ClrRam:
00004212 43F8 D000                  		lea	($FFFFD000).w,a1
00004216 7000                       		moveq	#0,d0
00004218 323C 07FF                  		move.w	#$7FF,d1
0000421C                            
0000421C                            Level_ClrObjRam:
0000421C 22C0                       		move.l	d0,(a1)+
0000421E 51C9 FFFC                  		dbf	d1,Level_ClrObjRam ; clear object RAM
00004222                            
00004222 43F8 F628                  		lea	($FFFFF628).w,a1
00004226 7000                       		moveq	#0,d0
00004228 323C 0015                  		move.w	#$15,d1
0000422C                            
0000422C                            Level_ClrVars:
0000422C 22C0                       		move.l	d0,(a1)+
0000422E 51C9 FFFC                  		dbf	d1,Level_ClrVars ; clear misc variables
00004232                            
00004232 43F8 F700                  		lea	($FFFFF700).w,a1
00004236 7000                       		moveq	#0,d0
00004238 323C 003F                  		move.w	#$3F,d1
0000423C                            
0000423C                            Level_ClrVars2:
0000423C 22C0                       		move.l	d0,(a1)+
0000423E 51C9 FFFC                  		dbf	d1,Level_ClrVars2 ; clear misc variables
00004242                            
00004242 43F8 FE60                  		lea	($FFFFFE60).w,a1
00004246 7000                       		moveq	#0,d0
00004248 323C 0047                  		move.w	#$47,d1
0000424C                            
0000424C                            Level_ClrVars3:
0000424C 22C0                       		move.l	d0,(a1)+
0000424E 51C9 FFFC                  		dbf	d1,Level_ClrVars3 ; clear object variables
00004252                            
00004252 46FC 2700                  		move	#$2700,sr
00004256 6100 D12E                  		bsr.w	ClearScreen
0000425A 4DF9 00C0 0004             		lea	($C00004).l,a6
00004260 3CBC 8B03                  		move.w	#$8B03,(a6)
00004264 3CBC 8230                  		move.w	#$8230,(a6)
00004268 3CBC 8407                  		move.w	#$8407,(a6)
0000426C 3CBC 857C                  		move.w	#$857C,(a6)
00004270 3CBC 9001                  		move.w	#$9001,(a6)
00004274 3CBC 8004                  		move.w	#$8004,(a6)
00004278 3CBC 8720                  		move.w	#$8720,(a6)
0000427C 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
00004282 3CB8 F624                  		move.w	($FFFFF624).w,(a6)
00004286 4278 C800                  		clr.w	($FFFFC800).w
0000428A 21FC FFFF C800 C8FC        		move.l	#$FFFFC800,($FFFFC8FC).w
00004292 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
00004298 6600                       		bne.s	Level_LoadPal	; if not, branch
0000429A 3CBC 8014                  		move.w	#$8014,(a6)
0000429E 7000                       		moveq	#0,d0
000042A0 1038 FE11                  		move.b	($FFFFFE11).w,d0
000042A4 D040                       		add.w	d0,d0
000042A6 43F9 0000 0000             		lea	(WaterHeight).l,a1 ; load water	height array
000042AC 3031 0000                  		move.w	(a1,d0.w),d0
000042B0 31C0 F646                  		move.w	d0,($FFFFF646).w ; set water heights
000042B4 31C0 F648                  		move.w	d0,($FFFFF648).w
000042B8 31C0 F64A                  		move.w	d0,($FFFFF64A).w
000042BC 4238 F64D                  		clr.b	($FFFFF64D).w	; clear	water routine counter
000042C0 4238 F64E                  		clr.b	($FFFFF64E).w	; clear	water movement
000042C4 11FC 0001 F64C             		move.b	#1,($FFFFF64C).w ; enable water
000042CA                            
000042CA                            Level_LoadPal:
000042CA 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
000042D0 46FC 2300                  		move	#$2300,sr
000042D4 7003                       		moveq	#3,d0
000042D6 6100 E198                  		bsr.w	PalLoad2	; load Sonic's pallet line
000042DA 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
000042E0 6600                       		bne.s	Level_GetBgm	; if not, branch
000042E2 700F                       		moveq	#$F,d0		; pallet number	$0F (LZ)
000042E4 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; is act number 3?
000042EA 6600                       		bne.s	Level_WaterPal	; if not, branch
000042EC 7010                       		moveq	#$10,d0		; pallet number	$10 (SBZ3)
000042EE                            
000042EE                            Level_WaterPal:
000042EE 6100 E1B8                  		bsr.w	PalLoad3_Water	; load underwater pallet (see d0)
000042F2 4A38 FE30                  		tst.b	($FFFFFE30).w
000042F6 6700                       		beq.s	Level_GetBgm
000042F8 11F8 FE53 F64E             		move.b	($FFFFFE53).w,($FFFFF64E).w
000042FE                            
000042FE                            ; NineKode begins here - How to play different songs on different acts
000042FE                             
000042FE                            Level_GetBgm:
000042FE 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00004302 6B00 0000                  		bmi.w	loc_3946	; change from bmi.s to bmi.w or you'll get an error
00004306 7000                       		moveq	#0,d0
00004308 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000430C                             
0000430C 0C38 0000 FE11             		cmpi.b	#$0,($FFFFFE11).w	; is this act 1?
00004312 6600                       		bne.s	Level_GetBgm2	; if not, branch
00004314 43F9 0000 419A             		lea	(MusicList1).l,a1	; load Music Playlist for Acts 1
0000431A 6000                       		bra.s	Level_PlayBgm	; go to PlayBgm
0000431C                             
0000431C                            Level_GetBgm2:
0000431C 0C38 0001 FE11             		cmpi.b	#$1,($FFFFFE11).w	; is this act 2?
00004322 6600                       		bne.s	Level_GetBgm3	; if not, branch
00004324 43F9 0000 41A0             		lea	(MusicList2).l,a1	; load Music Playlist for Acts 2
0000432A 6000                       		bra.s	Level_PlayBgm	; go to PlayBgm
0000432C                             
0000432C                            Level_GetBgm3:
0000432C 0C38 0002 FE11             		cmpi.b	#$2,($FFFFFE11).w	; is this act 3?
00004332 6600                       		bne.s	Level_GetBgm4	; if not, branch
00004334 43F9 0000 41A6             		lea	(MusicList3).l,a1	; load Music Playlist for Acts 3
0000433A 6000                       		bra.s	Level_PlayBgm	; go to PlayBgm
0000433C                             
0000433C                            Level_GetBgm4:
0000433C 0C38 0003 FE11             		cmpi.b	#$3,($FFFFFE11).w	; is this act 4?
00004342 6600                       		bne.s	Level_PlayBgm	; if not, branch
00004344 43F9 0000 41AC             		lea	(MusicList4).l,a1	; load Music Playlist for Acts 4
0000434A                             
0000434A                            Level_PlayBgm:
0000434A 1031 0000                  		move.b	(a1,d0.w),d0	; get d0-th entry from the playlist
0000434E 6100 D126                  		bsr.w	PlaySound	; play music
00004352 11FC 0034 D080             		move.b	#$34,($FFFFD080).w ; load title	card object
00004358                             
00004358                            ; NineKode ends here
00004358                            
00004358                            Level_TtlCard:
00004358 11FC 000C F62A             		move.b	#$C,($FFFFF62A).w
0000435E 6100 F048                  		bsr.w	DelayProgram
00004362 4EB9 0000 0000             		jsr	ObjectsLoad
00004368 4EB9 0000 0000             		jsr	BuildSprites
0000436E 6100 D3EC                  		bsr.w	RunPLC_RAM
00004372 3038 D108                  		move.w	($FFFFD108).w,d0
00004376 B078 D130                  		cmp.w	($FFFFD130).w,d0 ; has title card sequence finished?
0000437A 66DC                       		bne.s	Level_TtlCard	; if not, branch
0000437C 4AB8 F680                  		tst.l	($FFFFF680).w	; are there any	items in the pattern load cue?
00004380 66D6                       		bne.s	Level_TtlCard	; if yes, branch
00004382 4EB9 0000 0000             		jsr	Hud_Base
00004388                            
00004388                            loc_3946:
00004388 7003                       		moveq	#3,d0
0000438A 6100 E0A8                  		bsr.w	PalLoad1	; load Sonic's pallet line
0000438E 6100 0000                  		bsr.w	LevelSizeLoad
00004392 6100 0000                  		bsr.w	DeformBgLayer
00004396 08F8 0002 F754             		bset	#2,($FFFFF754).w
0000439C 6100 0000                  		bsr.w	MainLoadBlockLoad ; load block mappings	and pallets
000043A0 6100 0000                  		bsr.w	LoadTilesFromStart
000043A4 4EB9 0000 0000             		jsr	FloorLog_Unk
000043AA 6100 0000                  		bsr.w	ColIndexLoad
000043AE 6100 0000                  		bsr.w	LZWaterEffects
000043B2 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
000043B8 4A78 FFF0                  		tst.w	($FFFFFFF0).w
000043BC 6B00                       		bmi.s	Level_ChkDebug
000043BE 11FC 0021 D040             		move.b	#$21,($FFFFD040).w ; load HUD object
000043C4                            
000043C4                            Level_ChkDebug:
000043C4 4A38 FFE2                  		tst.b	($FFFFFFE2).w	; has debug cheat been entered?
000043C8 6700                       		beq.s	Level_ChkWater	; if not, branch
000043CA 0838 0006 F604             		btst	#6,($FFFFF604).w ; is A	button pressed?
000043D0 6700                       		beq.s	Level_ChkWater	; if not, branch
000043D2 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
000043D8                            
000043D8                            Level_ChkWater:
000043D8 31FC 0000 F602             		move.w	#0,($FFFFF602).w
000043DE 31FC 0000 F604             		move.w	#0,($FFFFF604).w
000043E4 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
000043EA 6600                       		bne.s	Level_LoadObj	; if not, branch
000043EC 11FC 001B D780             		move.b	#$1B,($FFFFD780).w ; load water	surface	object
000043F2 31FC 0060 D788             		move.w	#$60,($FFFFD788).w
000043F8 11FC 001B D7C0             		move.b	#$1B,($FFFFD7C0).w
000043FE 31FC 0120 D7C8             		move.w	#$120,($FFFFD7C8).w
00004404                            
00004404                            Level_LoadObj:
00004404 4EB9 0000 0000             		jsr	ObjPosLoad
0000440A 4EB9 0000 0000             		jsr	ObjectsLoad
00004410 4EB9 0000 0000             		jsr	BuildSprites
00004416 7000                       		moveq	#0,d0
00004418 4A38 FE30                  		tst.b	($FFFFFE30).w	; are you starting from	a lamppost?
0000441C 6600                       		bne.s	loc_39E8	; if yes, branch
0000441E 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00004422 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00004426 11C0 FEBF                          move.b  d0,($FFFFFEBF).w ; value used to increment centiseconds
0000442A 11C0 FE1B                  		move.b	d0,($FFFFFE1B).w ; clear lives counter
0000442E                            
0000442E                            loc_39E8:
0000442E 11C0 FE1A                  		move.b	d0,($FFFFFE1A).w
00004432 11C0 FE2C                  		move.b	d0,($FFFFFE2C).w ; clear shield
00004436 11C0 FE2D                  		move.b	d0,($FFFFFE2D).w ; clear invincibility
0000443A 11C0 FE2E                  		move.b	d0,($FFFFFE2E).w ; clear speed shoes
0000443E 11C0 FE2F                  		move.b	d0,($FFFFFE2F).w
00004442 31C0 FE08                  		move.w	d0,($FFFFFE08).w
00004446 31C0 FE02                  		move.w	d0,($FFFFFE02).w
0000444A 31C0 FE04                  		move.w	d0,($FFFFFE04).w
0000444E 6100 0000                  		bsr.w	OscillateNumInit
00004452 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; update score	counter
00004458 11FC 0001 FE1D             		move.b	#1,($FFFFFE1D).w ; update rings	counter
0000445E 31FC 0000 F790             		move.w	#0,($FFFFF790).w
00004464 43F9 0000 0000             		lea	(Demo_Index).l,a1 ; load demo data
0000446A 7000                       		moveq	#0,d0
0000446C 1038 FE10                  		move.b	($FFFFFE10).w,d0
00004470 E548                       		lsl.w	#2,d0
00004472 2271 0000                  		movea.l	(a1,d0.w),a1
00004476 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
0000447A 6A00                       		bpl.s	Level_Demo	; if yes, branch
0000447C 43F9 0000 0000             		lea	(Demo_EndIndex).l,a1 ; load ending demo	data
00004482 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
00004486 5340                       		subq.w	#1,d0
00004488 E548                       		lsl.w	#2,d0
0000448A 2271 0000                  		movea.l	(a1,d0.w),a1
0000448E                            
0000448E                            Level_Demo:
0000448E 11E9 0001 F792             		move.b	1(a1),($FFFFF792).w ; load key press duration
00004494 5338 F792                  		subq.b	#1,($FFFFF792).w ; subtract 1 from duration
00004498 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
0000449E 4A78 FFF0                  		tst.w	($FFFFFFF0).w
000044A2 6A00                       		bpl.s	Level_ChkWaterPal
000044A4 31FC 021C F614             		move.w	#540,($FFFFF614).w
000044AA 0C78 0004 FFF4             		cmpi.w	#4,($FFFFFFF4).w
000044B0 6600                       		bne.s	Level_ChkWaterPal
000044B2 31FC 01FE F614             		move.w	#510,($FFFFF614).w
000044B8                            
000044B8                            Level_ChkWaterPal:
000044B8 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ/SBZ3?
000044BE 6600                       		bne.s	Level_Delay	; if not, branch
000044C0 700B                       		moveq	#$B,d0		; pallet $0B (LZ underwater)
000044C2 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; is level SBZ3?
000044C8 6600                       		bne.s	Level_WaterPal2	; if not, branch
000044CA 700D                       		moveq	#$D,d0		; pallet $0D (SBZ3 underwater)
000044CC                            
000044CC                            Level_WaterPal2:
000044CC 6100 E016                  		bsr.w	PalLoad4_Water
000044D0                            
000044D0                            Level_Delay:
000044D0 323C 0003                  		move.w	#3,d1
000044D4                            
000044D4                            Level_DelayLoop:
000044D4 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
000044DA 6100 EECC                  		bsr.w	DelayProgram
000044DE 51C9 FFF4                  		dbf	d1,Level_DelayLoop
000044E2                            
000044E2 31FC 202F F626             		move.w	#$202F,($FFFFF626).w
000044E8 6100 DBEC                  		bsr.w	Pal_FadeTo2
000044EC 4A78 FFF0                  		tst.w	($FFFFFFF0).w
000044F0 6B00                       		bmi.s	Level_ClrCardArt
000044F2 5438 D0A4                  		addq.b	#2,($FFFFD0A4).w ; make	title card move
000044F6 5838 D0E4                  		addq.b	#4,($FFFFD0E4).w
000044FA 5838 D124                  		addq.b	#4,($FFFFD124).w
000044FE 5838 D164                  		addq.b	#4,($FFFFD164).w
00004502 6000                       		bra.s	Level_StartGame
00004504                            ; ===========================================================================
00004504                            
00004504                            Level_ClrCardArt:
00004504 7002                       		moveq	#2,d0
00004506 4EB9 0000 16F0             		jsr	(LoadPLC).l	; load explosion patterns
0000450C 7000                       		moveq	#0,d0
0000450E 1038 FE10                  		move.b	($FFFFFE10).w,d0
00004512 0640 0015                  		addi.w	#$15,d0
00004516 4EB9 0000 16F0             		jsr	(LoadPLC).l	; load animal patterns (level no. + $15)
0000451C                            
0000451C                            Level_StartGame:
0000451C 11FC 0001 FE1E                     move.b    #1,($FFFFFE1E).w ; update time counter
00004522 08B8 0007 F600                     bclr    #7,($FFFFF600).w ; subtract 80 from screen mode
00004528                            
00004528                            ; ---------------------------------------------------------------------------
00004528                            ; Main level loop (when	all title card and loading sequences are finished)
00004528                            ; ---------------------------------------------------------------------------
00004528                            
00004528                            Level_MainLoop:
00004528 6100 CF5E                  		bsr.w	PauseGame
0000452C 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
00004532 6100 EE74                  		bsr.w	DelayProgram
00004536 5278 FE04                  		addq.w	#1,($FFFFFE04).w ; add 1 to level timer
0000453A 6100 0000                  		bsr.w	MoveSonicInDemo
0000453E 6100 0000                  		bsr.w	LZWaterEffects
00004542 4EB9 0000 0000             		jsr	ObjectsLoad
00004548 4A78 FE08                  		tst.w	($FFFFFE08).w
0000454C 6600                       		bne.s	loc_3B10
0000454E 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00004554 6400                       		bcc.s	loc_3B14
00004556                            
00004556                            loc_3B10:
00004556 6100 0000                  		bsr.w	DeformBgLayer
0000455A                            
0000455A                            loc_3B14:
0000455A 4EB9 0000 0000             		jsr	BuildSprites
00004560 4EB9 0000 0000             		jsr	ObjPosLoad
00004566 6100 D544                  		bsr.w	PalCycle_Load
0000456A 6100 D1F0                  		bsr.w	RunPLC_RAM
0000456E 6100 0000                  		bsr.w	OscillateNumDo
00004572 6100 0000                  		bsr.w	ChangeRingFrame
00004576 6100 0000                  		bsr.w	SignpostArtLoad
0000457A 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w
00004580 6700                       		beq.s	Level_ChkDemo	; if screen mode is 08 (demo), branch
00004582 4A78 FE02                  		tst.w	($FFFFFE02).w	; is the level set to restart?
00004586 6600 FC2A                  		bne.w	Level		; if yes, branch
0000458A 0C38 000C F600             		cmpi.b	#$C,($FFFFF600).w
00004590 6700 FF96                  		beq.w	Level_MainLoop	; if screen mode is $0C	(level), branch
00004594 4E75                       		rts	
00004596                            ; ===========================================================================
00004596                            
00004596                            Level_ChkDemo:				; XREF: Level_MainLoop
00004596 4A78 FE02                  		tst.w	($FFFFFE02).w	; is level set to restart?
0000459A 6600                       		bne.s	Level_EndDemo	; if yes, branch
0000459C 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
000045A0 6700                       		beq.s	Level_EndDemo	; if not, branch
000045A2 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w
000045A8 6700 FF7E                  		beq.w	Level_MainLoop	; if screen mode is 08 (demo), branch
000045AC 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
000045B2 4E75                       		rts	
000045B4                            ; ===========================================================================
000045B4                            
000045B4                            Level_EndDemo:				; XREF: Level_ChkDemo
000045B4 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w ; is screen mode 08 (demo)?
000045BA 6600                       		bne.s	loc_3B88	; if not, branch
000045BC 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
000045C2 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
000045C6 6A00                       		bpl.s	loc_3B88	; if yes, branch
000045C8 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; go	to credits
000045CE                            
000045CE                            loc_3B88:
000045CE 31FC 003C F614             		move.w	#$3C,($FFFFF614).w
000045D4 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
000045DA 4278 F794                  		clr.w	($FFFFF794).w
000045DE                            
000045DE                            loc_3B98:
000045DE 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
000045E4 6100 EDC2                  		bsr.w	DelayProgram
000045E8 6100 0000                  		bsr.w	MoveSonicInDemo
000045EC 4EB9 0000 0000             		jsr	ObjectsLoad
000045F2 4EB9 0000 0000             		jsr	BuildSprites
000045F8 4EB9 0000 0000             		jsr	ObjPosLoad
000045FE 5378 F794                  		subq.w	#1,($FFFFF794).w
00004602 6A00                       		bpl.s	loc_3BC8
00004604 31FC 0002 F794             		move.w	#2,($FFFFF794).w
0000460A 6100 DBA0                  		bsr.w	Pal_FadeOut
0000460E                            
0000460E                            loc_3BC8:
0000460E 4A78 F614                  		tst.w	($FFFFF614).w
00004612 66CA                       		bne.s	loc_3B98
00004614 4E75                       		rts	
00004616                            ; ===========================================================================
00004616                            ; ---------------------------------------------------------------------------
00004616                            ; Subroutine to	do special water effects in Labyrinth Zone
00004616                            ; ---------------------------------------------------------------------------
00004616                            
00004616                            LZWaterEffects:				; XREF: Level
00004616 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
0000461C 6600                       		bne.s	locret_3C28	; if not, branch
0000461E 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00004624 6400                       		bcc.s	LZMoveWater
00004626 6100 0000                  		bsr.w	LZWindTunnels
0000462A 6100 0000                  		bsr.w	LZWaterSlides
0000462E 6100 0000                  		bsr.w	LZDynamicWater
00004632                            
00004632                            LZMoveWater:
00004632 4238 F64E                  		clr.b	($FFFFF64E).w
00004636 7000                       		moveq	#0,d0
00004638 1038 FE60                  		move.b	($FFFFFE60).w,d0
0000463C E248                       		lsr.w	#1,d0
0000463E D078 F648                  		add.w	($FFFFF648).w,d0
00004642 31C0 F646                  		move.w	d0,($FFFFF646).w
00004646 3038 F646                  		move.w	($FFFFF646).w,d0
0000464A 9078 F704                  		sub.w	($FFFFF704).w,d0
0000464E 6400                       		bcc.s	loc_3C1A
00004650 4A40                       		tst.w	d0
00004652 6A00                       		bpl.s	loc_3C1A
00004654 11FC 00DF F625             		move.b	#-$21,($FFFFF625).w
0000465A 11FC 0001 F64E             		move.b	#1,($FFFFF64E).w
00004660                            
00004660                            loc_3C1A:
00004660 0C40 00DF                  		cmpi.w	#$DF,d0
00004664 6500                       		bcs.s	loc_3C24
00004666 303C 00DF                  		move.w	#$DF,d0
0000466A                            
0000466A                            loc_3C24:
0000466A 11C0 F625                  		move.b	d0,($FFFFF625).w
0000466E                            
0000466E                            locret_3C28:
0000466E 4E75                       		rts	
00004670                            ; ===========================================================================
00004670                            ; ---------------------------------------------------------------------------
00004670                            ; Labyrinth default water heights
00004670                            ; ---------------------------------------------------------------------------
00004670                            WaterHeight:	incbin	misc\lz_heigh.bin
00004678                            		even
00004678                            
00004678                            ; ===========================================================================
00004678                            
00004678                            ; ---------------------------------------------------------------------------
00004678                            ; Labyrinth dynamic water routines
00004678                            ; ---------------------------------------------------------------------------
00004678                            
00004678                            LZDynamicWater:				; XREF: LZWaterEffects
00004678 7000                       		moveq	#0,d0
0000467A 1038 FE11                  		move.b	($FFFFFE11).w,d0
0000467E D040                       		add.w	d0,d0
00004680 303B 0000                  		move.w	DynWater_Index(pc,d0.w),d0
00004684 4EBB 0000                  		jsr	DynWater_Index(pc,d0.w)
00004688 7200                       		moveq	#0,d1
0000468A 1238 F64C                  		move.b	($FFFFF64C).w,d1
0000468E 3038 F64A                  		move.w	($FFFFF64A).w,d0
00004692 9078 F648                  		sub.w	($FFFFF648).w,d0
00004696 6700                       		beq.s	locret_3C5A
00004698 6400                       		bcc.s	loc_3C56
0000469A 4441                       		neg.w	d1
0000469C                            
0000469C                            loc_3C56:
0000469C D378 F648                  		add.w	d1,($FFFFF648).w
000046A0                            
000046A0                            locret_3C5A:
000046A0 4E75                       		rts	
000046A2                            ; ===========================================================================
000046A2 0000                       DynWater_Index:	dc.w DynWater_LZ1-DynWater_Index
000046A4 0000                       		dc.w DynWater_LZ2-DynWater_Index
000046A6 0000                       		dc.w DynWater_LZ3-DynWater_Index
000046A8 0000                       		dc.w DynWater_SBZ3-DynWater_Index
000046AA                            ; ===========================================================================
000046AA                            
000046AA                            DynWater_LZ1:				; XREF: DynWater_Index
000046AA 3038 F700                  		move.w	($FFFFF700).w,d0
000046AE 1438 F64D                  		move.b	($FFFFF64D).w,d2
000046B2 6600                       		bne.s	loc_3CD0
000046B4 323C 00B8                  		move.w	#$B8,d1
000046B8 0C40 0600                  		cmpi.w	#$600,d0
000046BC 6500                       		bcs.s	loc_3CB4
000046BE 323C 0108                  		move.w	#$108,d1
000046C2 0C78 0200 D00C             		cmpi.w	#$200,($FFFFD00C).w
000046C8 6500                       		bcs.s	loc_3CBA
000046CA 0C40 0C00                  		cmpi.w	#$C00,d0
000046CE 6500                       		bcs.s	loc_3CB4
000046D0 323C 0318                  		move.w	#$318,d1
000046D4 0C40 1080                  		cmpi.w	#$1080,d0
000046D8 6500                       		bcs.s	loc_3CB4
000046DA 11FC 0080 F7E5             		move.b	#-$80,($FFFFF7E5).w
000046E0 323C 05C8                  		move.w	#$5C8,d1
000046E4 0C40 1380                  		cmpi.w	#$1380,d0
000046E8 6500                       		bcs.s	loc_3CB4
000046EA 323C 03A8                  		move.w	#$3A8,d1
000046EE B278 F648                  		cmp.w	($FFFFF648).w,d1
000046F2 6600                       		bne.s	loc_3CB4
000046F4 11FC 0001 F64D             		move.b	#1,($FFFFF64D).w
000046FA                            
000046FA                            loc_3CB4:
000046FA 31C1 F64A                  		move.w	d1,($FFFFF64A).w
000046FE 4E75                       		rts	
00004700                            ; ===========================================================================
00004700                            
00004700                            loc_3CBA:				; XREF: DynWater_LZ1
00004700 0C40 0C80                  		cmpi.w	#$C80,d0
00004704 65F4                       		bcs.s	loc_3CB4
00004706 323C 00E8                  		move.w	#$E8,d1
0000470A 0C40 1500                  		cmpi.w	#$1500,d0
0000470E 65EA                       		bcs.s	loc_3CB4
00004710 323C 0108                  		move.w	#$108,d1
00004714 60E4                       		bra.s	loc_3CB4
00004716                            ; ===========================================================================
00004716                            
00004716                            loc_3CD0:				; XREF: DynWater_LZ1
00004716 5302                       		subq.b	#1,d2
00004718 6600                       		bne.s	locret_3CF4
0000471A 0C78 02E0 D00C             		cmpi.w	#$2E0,($FFFFD00C).w
00004720 6400                       		bcc.s	locret_3CF4
00004722 323C 03A8                  		move.w	#$3A8,d1
00004726 0C40 1300                  		cmpi.w	#$1300,d0
0000472A 6500                       		bcs.s	loc_3CF0
0000472C 323C 0108                  		move.w	#$108,d1
00004730 11FC 0002 F64D             		move.b	#2,($FFFFF64D).w
00004736                            
00004736                            loc_3CF0:
00004736 31C1 F64A                  		move.w	d1,($FFFFF64A).w
0000473A                            
0000473A                            locret_3CF4:
0000473A 4E75                       		rts	
0000473C                            ; ===========================================================================
0000473C                            
0000473C                            DynWater_LZ2:				; XREF: DynWater_Index
0000473C 3038 F700                  		move.w	($FFFFF700).w,d0
00004740 323C 0328                  		move.w	#$328,d1
00004744 0C40 0500                  		cmpi.w	#$500,d0
00004748 6500                       		bcs.s	loc_3D12
0000474A 323C 03C8                  		move.w	#$3C8,d1
0000474E 0C40 0B00                  		cmpi.w	#$B00,d0
00004752 6500                       		bcs.s	loc_3D12
00004754 323C 0428                  		move.w	#$428,d1
00004758                            
00004758                            loc_3D12:
00004758 31C1 F64A                  		move.w	d1,($FFFFF64A).w
0000475C 4E75                       		rts	
0000475E                            ; ===========================================================================
0000475E                            
0000475E                            DynWater_LZ3:				; XREF: DynWater_Index
0000475E 3038 F700                  		move.w	($FFFFF700).w,d0
00004762 1438 F64D                  		move.b	($FFFFF64D).w,d2
00004766 6600                       		bne.s	loc_3D5E
00004768 323C 0900                  		move.w	#$900,d1
0000476C 0C40 0600                  		cmpi.w	#$600,d0
00004770 6500                       		bcs.s	loc_3D54
00004772 0C78 03C0 D00C             		cmpi.w	#$3C0,($FFFFD00C).w
00004778 6500                       		bcs.s	loc_3D54
0000477A 0C78 0600 D00C             		cmpi.w	#$600,($FFFFD00C).w
00004780 6400                       		bcc.s	loc_3D54
00004782 323C 04C8                  		move.w	#$4C8,d1
00004786 11FC 004B A506             		move.b	#$4B,($FFFFA506).w ; change level layout
0000478C 11FC 0001 F64D             		move.b	#1,($FFFFF64D).w
00004792 303C 00B7                  		move.w	#$B7,d0
00004796 6100 CCE4                  		bsr.w	PlaySound_Special ; play sound $B7 (rumbling)
0000479A                            
0000479A                            loc_3D54:
0000479A 31C1 F64A                  		move.w	d1,($FFFFF64A).w
0000479E 31C1 F648                  		move.w	d1,($FFFFF648).w
000047A2 4E75                       		rts	
000047A4                            ; ===========================================================================
000047A4                            
000047A4                            loc_3D5E:				; XREF: DynWater_LZ3
000047A4 5302                       		subq.b	#1,d2
000047A6 6600                       		bne.s	loc_3DA8
000047A8 323C 04C8                  		move.w	#$4C8,d1
000047AC 0C40 0770                  		cmpi.w	#$770,d0
000047B0 6500                       		bcs.s	loc_3DA2
000047B2 323C 0308                  		move.w	#$308,d1
000047B6 0C40 1400                  		cmpi.w	#$1400,d0
000047BA 6500                       		bcs.s	loc_3DA2
000047BC 0C78 0508 F64A             		cmpi.w	#$508,($FFFFF64A).w
000047C2 6700                       		beq.s	loc_3D8E
000047C4 0C78 0600 D00C             		cmpi.w	#$600,($FFFFD00C).w
000047CA 6400                       		bcc.s	loc_3D8E
000047CC 0C78 0280 D00C             		cmpi.w	#$280,($FFFFD00C).w
000047D2 6400                       		bcc.s	loc_3DA2
000047D4                            
000047D4                            loc_3D8E:
000047D4 323C 0508                  		move.w	#$508,d1
000047D8 31C1 F648                  		move.w	d1,($FFFFF648).w
000047DC 0C40 1770                  		cmpi.w	#$1770,d0
000047E0 6500                       		bcs.s	loc_3DA2
000047E2 11FC 0002 F64D             		move.b	#2,($FFFFF64D).w
000047E8                            
000047E8                            loc_3DA2:
000047E8 31C1 F64A                  		move.w	d1,($FFFFF64A).w
000047EC 4E75                       		rts	
000047EE                            ; ===========================================================================
000047EE                            
000047EE                            loc_3DA8:
000047EE 5302                       		subq.b	#1,d2
000047F0 6600                       		bne.s	loc_3DD2
000047F2 323C 0508                  		move.w	#$508,d1
000047F6 0C40 1860                  		cmpi.w	#$1860,d0
000047FA 6500                       		bcs.s	loc_3DCC
000047FC 323C 0188                  		move.w	#$188,d1
00004800 0C40 1AF0                  		cmpi.w	#$1AF0,d0
00004804 6400                       		bcc.s	loc_3DC6
00004806 B278 F648                  		cmp.w	($FFFFF648).w,d1
0000480A 6600                       		bne.s	loc_3DCC
0000480C                            
0000480C                            loc_3DC6:
0000480C 11FC 0003 F64D             		move.b	#3,($FFFFF64D).w
00004812                            
00004812                            loc_3DCC:
00004812 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00004816 4E75                       		rts	
00004818                            ; ===========================================================================
00004818                            
00004818                            loc_3DD2:
00004818 5302                       		subq.b	#1,d2
0000481A 6600                       		bne.s	loc_3E0E
0000481C 323C 0188                  		move.w	#$188,d1
00004820 0C40 1AF0                  		cmpi.w	#$1AF0,d0
00004824 6500                       		bcs.s	loc_3E04
00004826 323C 0900                  		move.w	#$900,d1
0000482A 0C40 1BC0                  		cmpi.w	#$1BC0,d0
0000482E 6500                       		bcs.s	loc_3E04
00004830 11FC 0004 F64D             		move.b	#4,($FFFFF64D).w
00004836 31FC 0608 F64A             		move.w	#$608,($FFFFF64A).w
0000483C 31FC 07C0 F648             		move.w	#$7C0,($FFFFF648).w
00004842 11FC 0001 F7E8             		move.b	#1,($FFFFF7E8).w
00004848 4E75                       		rts	
0000484A                            ; ===========================================================================
0000484A                            
0000484A                            loc_3E04:
0000484A 31C1 F64A                  		move.w	d1,($FFFFF64A).w
0000484E 31C1 F648                  		move.w	d1,($FFFFF648).w
00004852 4E75                       		rts	
00004854                            ; ===========================================================================
00004854                            
00004854                            loc_3E0E:
00004854 0C40 1E00                  		cmpi.w	#$1E00,d0
00004858 6500                       		bcs.s	locret_3E1A
0000485A 31FC 0128 F64A             		move.w	#$128,($FFFFF64A).w
00004860                            
00004860                            locret_3E1A:
00004860 4E75                       		rts	
00004862                            ; ===========================================================================
00004862                            
00004862                            DynWater_SBZ3:				; XREF: DynWater_Index
00004862 323C 0228                  		move.w	#$228,d1
00004866 0C78 0F00 F700             		cmpi.w	#$F00,($FFFFF700).w
0000486C 6500                       		bcs.s	loc_3E2C
0000486E 323C 04C8                  		move.w	#$4C8,d1
00004872                            
00004872                            loc_3E2C:
00004872 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00004876 4E75                       		rts
00004878                            
00004878                            ; ---------------------------------------------------------------------------
00004878                            ; Labyrinth Zone "wind tunnels"	subroutine
00004878                            ; ---------------------------------------------------------------------------
00004878                            
00004878                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004878                            
00004878                            
00004878                            LZWindTunnels:				; XREF: LZWaterEffects
00004878 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
0000487C 6600 0000                  		bne.w	locret_3F0A	; if yes, branch
00004880 45F9 0000 0000             		lea	(LZWind_Data).l,a2
00004886 7000                       		moveq	#0,d0
00004888 1038 FE11                  		move.b	($FFFFFE11).w,d0
0000488C E748                       		lsl.w	#3,d0
0000488E D4C0                       		adda.w	d0,a2
00004890 7200                       		moveq	#0,d1
00004892 4A38 FE11                  		tst.b	($FFFFFE11).w
00004896 6600                       		bne.s	loc_3E56
00004898 7201                       		moveq	#1,d1
0000489A 514A                       		subq.w	#8,a2
0000489C                            
0000489C                            loc_3E56:
0000489C 43F8 D000                  		lea	($FFFFD000).w,a1
000048A0                            
000048A0                            LZWind_Loop:
000048A0 3029 0008                  		move.w	8(a1),d0
000048A4 B052                       		cmp.w	(a2),d0
000048A6 6500 0000                  		bcs.w	loc_3EF4
000048AA B06A 0004                  		cmp.w	4(a2),d0
000048AE 6400 0000                  		bcc.w	loc_3EF4
000048B2 3429 000C                  		move.w	$C(a1),d2
000048B6 B46A 0002                  		cmp.w	2(a2),d2
000048BA 6500                       		bcs.s	loc_3EF4
000048BC B46A 0006                  		cmp.w	6(a2),d2
000048C0 6400                       		bcc.s	loc_3EF4
000048C2 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
000048C6 0200 003F                  		andi.b	#$3F,d0
000048CA 6600                       		bne.s	loc_3E90
000048CC 303C 00D0                  		move.w	#$D0,d0
000048D0 4EB9 0000 147C             		jsr	(PlaySound_Special).l ;	play rushing water sound
000048D6                            
000048D6                            loc_3E90:
000048D6 4A38 F7C9                  		tst.b	($FFFFF7C9).w
000048DA 6600 0000                  		bne.w	locret_3F0A
000048DE 0C29 0004 0024             		cmpi.b	#4,$24(a1)
000048E4 6400                       		bcc.s	loc_3F06
000048E6 11FC 0001 F7C7             		move.b	#1,($FFFFF7C7).w
000048EC 0440 0080                  		subi.w	#$80,d0
000048F0 B052                       		cmp.w	(a2),d0
000048F2 6400                       		bcc.s	LZWind_Move
000048F4 7002                       		moveq	#2,d0
000048F6 0C38 0001 FE11             		cmpi.b	#1,($FFFFFE11).w
000048FC 6600                       		bne.s	loc_3EBA
000048FE 4440                       		neg.w	d0
00004900                            
00004900                            loc_3EBA:
00004900 D169 000C                  		add.w	d0,$C(a1)
00004904                            
00004904                            LZWind_Move:
00004904 5869 0008                  		addq.w	#4,8(a1)
00004908 337C 0400 0010             		move.w	#$400,$10(a1)	; move Sonic horizontally
0000490E 337C 0000 0012             		move.w	#0,$12(a1)
00004914 137C 000F 001C             		move.b	#$F,$1C(a1)	; use floating animation
0000491A 08E9 0001 0022             		bset	#1,$22(a1)
00004920 0838 0000 F602             		btst	#0,($FFFFF602).w ; is up pressed?
00004926 6700                       		beq.s	LZWind_MoveDown	; if not, branch
00004928 5369 000C                  		subq.w	#1,$C(a1)	; move Sonic up
0000492C                            
0000492C                            LZWind_MoveDown:
0000492C 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
00004932 6700                       		beq.s	locret_3EF2	; if not, branch
00004934 5269 000C                  		addq.w	#1,$C(a1)	; move Sonic down
00004938                            
00004938                            locret_3EF2:
00004938 4E75                       		rts	
0000493A                            ; ===========================================================================
0000493A                            
0000493A                            loc_3EF4:				; XREF: LZWindTunnels
0000493A 504A                       		addq.w	#8,a2
0000493C 51C9 FF62                  		dbf	d1,LZWind_Loop
00004940 4A38 F7C7                  		tst.b	($FFFFF7C7).w
00004944 6700                       		beq.s	locret_3F0A
00004946 137C 0000 001C             		move.b	#0,$1C(a1)
0000494C                            
0000494C                            loc_3F06:
0000494C 4238 F7C7                  		clr.b	($FFFFF7C7).w
00004950                            
00004950                            locret_3F0A:
00004950 4E75                       		rts	
00004952                            ; End of function LZWindTunnels
00004952                            
00004952                            ; ===========================================================================
00004952 0A80 0300 0C10 0380        		dc.w $A80, $300, $C10, $380
0000495A 0F80 0100 1410 0180 0460+  LZWind_Data:	dc.w $F80, $100, $1410,	$180, $460, $400, $710,	$480, $A20
0000496C 0600 1610 06E0 0C80 0600+  		dc.w $600, $1610, $6E0,	$C80, $600, $13D0, $680
0000497A                            					; XREF: LZWindTunnels
0000497A                            		even
0000497A                            
0000497A                            ; ---------------------------------------------------------------------------
0000497A                            ; Labyrinth Zone water slide subroutine
0000497A                            ; ---------------------------------------------------------------------------
0000497A                            
0000497A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000497A                            
0000497A                            
0000497A                            LZWaterSlides:				; XREF: LZWaterEffects
0000497A 43F8 D000                  		lea	($FFFFD000).w,a1
0000497E 0829 0001 0022             		btst	#1,$22(a1)
00004984 6600                       		bne.s	loc_3F6A
00004986 3029 000C                  		move.w	$C(a1),d0
0000498A E248                       		lsr.w	#1,d0
0000498C 0240 0380                  		andi.w	#$380,d0
00004990 1229 0008                  		move.b	8(a1),d1
00004994 0241 007F                  		andi.w	#$7F,d1
00004998 D041                       		add.w	d1,d0
0000499A 45F8 A400                  		lea	($FFFFA400).w,a2
0000499E 1032 0000                  		move.b	(a2,d0.w),d0
000049A2 45FA 0000                  		lea	byte_3FCF(pc),a2
000049A6 7206                       		moveq	#6,d1
000049A8                            
000049A8                            loc_3F62:
000049A8 B022                       		cmp.b	-(a2),d0
000049AA 57C9 FFFC                  		dbeq	d1,loc_3F62
000049AE 6700                       		beq.s	LZSlide_Move
000049B0                            
000049B0                            loc_3F6A:
000049B0 4A38 F7CA                  		tst.b	($FFFFF7CA).w
000049B4 6700                       		beq.s	locret_3F7A
000049B6 337C 0005 003E             		move.w	#5,$3E(a1)
000049BC 4238 F7CA                  		clr.b	($FFFFF7CA).w
000049C0                            
000049C0                            locret_3F7A:
000049C0 4E75                       		rts	
000049C2                            ; ===========================================================================
000049C2                            
000049C2                            LZSlide_Move:				; XREF: LZWaterSlides
000049C2 0C41 0003                  		cmpi.w	#3,d1
000049C6 6400                       		bcc.s	loc_3F84
000049C8 4E71                       		nop	
000049CA                            
000049CA                            loc_3F84:
000049CA 08A9 0000 0022             		bclr	#0,$22(a1)
000049D0 103B 1000                  		move.b	byte_3FC0(pc,d1.w),d0
000049D4 1340 0014                  		move.b	d0,$14(a1)
000049D8 6A00                       		bpl.s	loc_3F9A
000049DA 08E9 0000 0022             		bset	#0,$22(a1)
000049E0                            
000049E0                            loc_3F9A:
000049E0 4229 0015                  		clr.b	$15(a1)
000049E4 137C 001B 001C             		move.b	#$1B,$1C(a1)	; use Sonic's "sliding" animation
000049EA 11FC 0001 F7CA             		move.b	#1,($FFFFF7CA).w ; lock	controls (except jumping)
000049F0 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
000049F4 0200 001F                  		andi.b	#$1F,d0
000049F8 6600                       		bne.s	locret_3FBE
000049FA 303C 00D0                  		move.w	#$D0,d0
000049FE 4EB9 0000 147C             		jsr	(PlaySound_Special).l ;	play water sound
00004A04                            
00004A04                            locret_3FBE:
00004A04 4E75                       		rts	
00004A06                            ; End of function LZWaterSlides
00004A06                            
00004A06                            ; ===========================================================================
00004A06 0AF5 0AF6 F5F4 0B00 0207+  byte_3FC0:	dc.b $A, $F5, $A, $F6, $F5, $F4, $B, 0,	2, 7, 3, $4C, $4B, 8, 4
00004A15 00                         byte_3FCF:	dc.b 0			; XREF: LZWaterSlides
00004A16                            		even
00004A16                            
00004A16                            ; ---------------------------------------------------------------------------
00004A16                            ; Subroutine to	move Sonic in demo mode
00004A16                            ; ---------------------------------------------------------------------------
00004A16                            
00004A16                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004A16                            
00004A16                            
00004A16                            MoveSonicInDemo:			; XREF: Level_MainLoop; et al
00004A16 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00004A1A 6600                       		bne.s	MoveDemo_On	; if yes, branch
00004A1C 4E75                       		rts	
00004A1E                            ; ===========================================================================
00004A1E                            
00004A1E                            ; This is an unused subroutine for recording a demo
00004A1E                            
00004A1E                            MoveDemo_Record:
00004A1E 43F9 0008 0000             		lea	($80000).l,a1
00004A24 3038 F790                  		move.w	($FFFFF790).w,d0
00004A28 D2C0                       		adda.w	d0,a1
00004A2A 1038 F604                  		move.b	($FFFFF604).w,d0
00004A2E B011                       		cmp.b	(a1),d0
00004A30 6600                       		bne.s	loc_3FFA
00004A32 5229 0001                  		addq.b	#1,1(a1)
00004A36 0C29 00FF 0001             		cmpi.b	#$FF,1(a1)
00004A3C 6700                       		beq.s	loc_3FFA
00004A3E 4E75                       		rts	
00004A40                            ; ===========================================================================
00004A40                            
00004A40                            loc_3FFA:				; XREF: MoveDemo_Record
00004A40 1340 0002                  		move.b	d0,2(a1)
00004A44 137C 0000 0003             		move.b	#0,3(a1)
00004A4A 5478 F790                  		addq.w	#2,($FFFFF790).w
00004A4E 0278 03FF F790             		andi.w	#$3FF,($FFFFF790).w
00004A54 4E75                       		rts	
00004A56                            ; ===========================================================================
00004A56                            
00004A56                            MoveDemo_On:				; XREF: MoveSonicInDemo
00004A56 4A38 F604                  		tst.b	($FFFFF604).w
00004A5A 6A00                       		bpl.s	loc_4022
00004A5C 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00004A60 6B00                       		bmi.s	loc_4022
00004A62 11FC 0004 F600             		move.b	#4,($FFFFF600).w
00004A68                            
00004A68                            loc_4022:
00004A68 43F9 0000 0000             		lea	(Demo_Index).l,a1
00004A6E 7000                       		moveq	#0,d0
00004A70 1038 FE10                  		move.b	($FFFFFE10).w,d0
00004A74 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w
00004A7A 6600                       		bne.s	loc_4038
00004A7C 7006                       		moveq	#6,d0
00004A7E                            
00004A7E                            loc_4038:
00004A7E E548                       		lsl.w	#2,d0
00004A80 2271 0000                  		movea.l	(a1,d0.w),a1
00004A84 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00004A88 6A00                       		bpl.s	loc_4056
00004A8A 43F9 0000 0000             		lea	(Demo_EndIndex).l,a1
00004A90 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
00004A94 5340                       		subq.w	#1,d0
00004A96 E548                       		lsl.w	#2,d0
00004A98 2271 0000                  		movea.l	(a1,d0.w),a1
00004A9C                            
00004A9C                            loc_4056:
00004A9C 3038 F790                  		move.w	($FFFFF790).w,d0
00004AA0 D2C0                       		adda.w	d0,a1
00004AA2 1011                       		move.b	(a1),d0
00004AA4 41F8 F604                  		lea	($FFFFF604).w,a0
00004AA8 1200                       		move.b	d0,d1
00004AAA 1410                       		move.b	(a0),d2
00004AAC B500                       		eor.b	d2,d0
00004AAE 10C1                       		move.b	d1,(a0)+
00004AB0 C001                       		and.b	d1,d0
00004AB2 10C0                       		move.b	d0,(a0)+
00004AB4 5338 F792                  		subq.b	#1,($FFFFF792).w
00004AB8 6400                       		bcc.s	locret_407E
00004ABA 11E9 0003 F792             		move.b	3(a1),($FFFFF792).w
00004AC0 5478 F790                  		addq.w	#2,($FFFFF790).w
00004AC4                            
00004AC4                            locret_407E:
00004AC4 4E75                       		rts	
00004AC6                            ; End of function MoveSonicInDemo
00004AC6                            
00004AC6                            ; ===========================================================================
00004AC6                            ; ---------------------------------------------------------------------------
00004AC6                            ; Demo sequence	pointers
00004AC6                            ; ---------------------------------------------------------------------------
00004AC6                            Demo_Index:
00004AC6                            	include "_inc\Demo pointers for intro.asm"
00004AC6                            ; ---------------------------------------------------------------------------
00004AC6                            ; Demo sequence	pointers
00004AC6                            ; ---------------------------------------------------------------------------
00004AC6 0000 0000                  	dc.l Demo_GHZ
00004ACA 0000 0000                  	dc.l Demo_GHZ
00004ACE 0000 0000                  	dc.l Demo_MZ
00004AD2 0000 0000                  	dc.l Demo_MZ
00004AD6 0000 0000                  	dc.l Demo_SYZ
00004ADA 0000 0000                  	dc.l Demo_SYZ
00004ADE 0000 0000                  	dc.l Demo_SS
00004AE2 0000 0000                  	dc.l Demo_SS
00004AE2 0000 0000                  	dc.l Demo_SS
00004AE6                            
00004AE6                            Demo_EndIndex:
00004AE6                            	include "_inc\Demo pointers for ending.asm"
00004AE6                            ; ---------------------------------------------------------------------------
00004AE6                            ; Demo (ending) sequence pointers
00004AE6                            ; ---------------------------------------------------------------------------
00004AE6 0000 0000                  	dc.l Demo_EndGHZ1
00004AEA 0000 0000                  	dc.l Demo_EndMZ
00004AEE 0000 0000                  	dc.l Demo_EndSYZ
00004AF2 0000 0000                  	dc.l Demo_EndLZ
00004AF6 0000 0000                  	dc.l Demo_EndSLZ
00004AFA 0000 0000                  	dc.l Demo_EndSBZ1
00004AFE 0000 0000                  	dc.l Demo_EndSBZ2
00004B02 0000 0000                  	dc.l Demo_EndGHZ2
00004B02 0000 0000                  	dc.l Demo_EndGHZ2
00004B06                            
00004B06 008B 0837 0042 085C 006A+  		dc.b 0,	$8B, 8,	$37, 0,	$42, 8,	$5C, 0,	$6A, 8,	$5F, 0,	$2F, 8,	$2C
00004B16 0021 0803 2830 0808 002E+  		dc.b 0,	$21, 8,	3, $28,	$30, 8,	8, 0, $2E, 8, $15, 0, $F, 8, $46
00004B26 001A 08FF 08CA 0000 0000+  		dc.b 0,	$1A, 8,	$FF, 8,	$CA, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0
00004B36                            		even
00004B36                            
00004B36                            ; ---------------------------------------------------------------------------
00004B36                            ; Collision index loading subroutine
00004B36                            ; ---------------------------------------------------------------------------
00004B36                            
00004B36                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004B36                            
00004B36                            
00004B36                            ColIndexLoad:				; XREF: Level
00004B36 7000                       		moveq	#0,d0
00004B38 1038 FE10                  		move.b	($FFFFFE10).w,d0
00004B3C E548                       		lsl.w	#2,d0
00004B3E 21FB 0000 F796             		move.l	ColPointers(pc,d0.w),($FFFFF796).w
00004B44 4E75                       		rts	
00004B46                            ; End of function ColIndexLoad
00004B46                            
00004B46                            ; ===========================================================================
00004B46                            ; ---------------------------------------------------------------------------
00004B46                            ; Collision index pointers
00004B46                            ; ---------------------------------------------------------------------------
00004B46                            ColPointers:
00004B46                            	include "_inc\Collision index pointers.asm"
00004B46                            ; ---------------------------------------------------------------------------
00004B46                            ; Collision index pointers
00004B46                            ; ---------------------------------------------------------------------------
00004B46 0000 0000                  	dc.l Col_GHZ
00004B4A 0000 0000                  	dc.l Col_LZ
00004B4E 0000 0000                  	dc.l Col_MZ
00004B52 0000 0000                  	dc.l Col_SLZ
00004B56 0000 0000                  	dc.l Col_SYZ
00004B5A 0000 0000                  	dc.l Col_SBZ
00004B5A 0000 0000                  	dc.l Col_SBZ
00004B5E                            
00004B5E                            ; ---------------------------------------------------------------------------
00004B5E                            ; Oscillating number subroutine
00004B5E                            ; ---------------------------------------------------------------------------
00004B5E                            
00004B5E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004B5E                            
00004B5E                            
00004B5E                            OscillateNumInit:			; XREF: Level
00004B5E 43F8 FE5E                  		lea	($FFFFFE5E).w,a1
00004B62 45F9 0000 0000             		lea	(Osc_Data).l,a2
00004B68 7220                       		moveq	#$20,d1
00004B6A                            
00004B6A                            Osc_Loop:
00004B6A 32DA                       		move.w	(a2)+,(a1)+
00004B6C 51C9 FFFC                  		dbf	d1,Osc_Loop
00004B70 4E75                       		rts	
00004B72                            ; End of function OscillateNumInit
00004B72                            
00004B72                            ; ===========================================================================
00004B72 007C 0080                  Osc_Data:	dc.w $7C, $80		; baseline values
00004B76 0000 0080                  		dc.w 0,	$80
00004B7A 0000 0080                  		dc.w 0,	$80
00004B7E 0000 0080                  		dc.w 0,	$80
00004B82 0000 0080                  		dc.w 0,	$80
00004B86 0000 0080                  		dc.w 0,	$80
00004B8A 0000 0080                  		dc.w 0,	$80
00004B8E 0000 0080                  		dc.w 0,	$80
00004B92 0000 0080                  		dc.w 0,	$80
00004B96 0000 50F0                  		dc.w 0,	$50F0
00004B9A 011E 2080                  		dc.w $11E, $2080
00004B9E 00B4 3080                  		dc.w $B4, $3080
00004BA2 010E 5080                  		dc.w $10E, $5080
00004BA6 01C2 7080                  		dc.w $1C2, $7080
00004BAA 0276 0080                  		dc.w $276, $80
00004BAE 0000 0080                  		dc.w 0,	$80
00004BB2 0000                       		dc.w 0
00004BB4                            		even
00004BB4                            
00004BB4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004BB4                            
00004BB4                            
00004BB4                            OscillateNumDo:				; XREF: Level
00004BB4 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00004BBA 6400                       		bcc.s	locret_41C4
00004BBC 43F8 FE5E                  		lea	($FFFFFE5E).w,a1
00004BC0 45F9 0000 0000             		lea	(Osc_Data2).l,a2
00004BC6 3619                       		move.w	(a1)+,d3
00004BC8 720F                       		moveq	#$F,d1
00004BCA                            
00004BCA                            loc_4184:
00004BCA 341A                       		move.w	(a2)+,d2
00004BCC 381A                       		move.w	(a2)+,d4
00004BCE 0303                       		btst	d1,d3
00004BD0 6600                       		bne.s	loc_41A4
00004BD2 3029 0002                  		move.w	2(a1),d0
00004BD6 D042                       		add.w	d2,d0
00004BD8 3340 0002                  		move.w	d0,2(a1)
00004BDC D151                       		add.w	d0,0(a1)
00004BDE B811                       		cmp.b	0(a1),d4
00004BE0 6200                       		bhi.s	loc_41BA
00004BE2 03C3                       		bset	d1,d3
00004BE4 6000                       		bra.s	loc_41BA
00004BE6                            ; ===========================================================================
00004BE6                            
00004BE6                            loc_41A4:				; XREF: OscillateNumDo
00004BE6 3029 0002                  		move.w	2(a1),d0
00004BEA 9042                       		sub.w	d2,d0
00004BEC 3340 0002                  		move.w	d0,2(a1)
00004BF0 D151                       		add.w	d0,0(a1)
00004BF2 B811                       		cmp.b	0(a1),d4
00004BF4 6300                       		bls.s	loc_41BA
00004BF6 0383                       		bclr	d1,d3
00004BF8                            
00004BF8                            loc_41BA:
00004BF8 5849                       		addq.w	#4,a1
00004BFA 51C9 FFCE                  		dbf	d1,loc_4184
00004BFE 31C3 FE5E                  		move.w	d3,($FFFFFE5E).w
00004C02                            
00004C02                            locret_41C4:
00004C02 4E75                       		rts	
00004C04                            ; End of function OscillateNumDo
00004C04                            
00004C04                            ; ===========================================================================
00004C04 0002 0010                  Osc_Data2:	dc.w 2,	$10		; XREF: OscillateNumDo
00004C08 0002 0018                  		dc.w 2,	$18
00004C0C 0002 0020                  		dc.w 2,	$20
00004C10 0002 0030                  		dc.w 2,	$30
00004C14 0004 0020                  		dc.w 4,	$20
00004C18 0008 0008                  		dc.w 8,	8
00004C1C 0008 0040                  		dc.w 8,	$40
00004C20 0004 0040                  		dc.w 4,	$40
00004C24 0002 0050                  		dc.w 2,	$50
00004C28 0002 0050                  		dc.w 2,	$50
00004C2C 0002 0020                  		dc.w 2,	$20
00004C30 0003 0030                  		dc.w 3,	$30
00004C34 0005 0050                  		dc.w 5,	$50
00004C38 0007 0070                  		dc.w 7,	$70
00004C3C 0002 0010                  		dc.w 2,	$10
00004C40 0002 0010                  		dc.w 2,	$10
00004C44                            		even
00004C44                            
00004C44                            ; ---------------------------------------------------------------------------
00004C44                            ; Subroutine to	change object animation	variables (rings, giant	rings)
00004C44                            ; ---------------------------------------------------------------------------
00004C44                            
00004C44                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004C44                            
00004C44                            
00004C44                            ChangeRingFrame:			; XREF: Level
00004C44 5338 FEC0                  		subq.b	#1,($FFFFFEC0).w
00004C48 6A00                       		bpl.s	loc_421C
00004C4A 11FC 000B FEC0             		move.b	#$B,($FFFFFEC0).w
00004C50 5338 FEC1                  		subq.b	#1,($FFFFFEC1).w
00004C54 0238 0007 FEC1             		andi.b	#7,($FFFFFEC1).w
00004C5A                            
00004C5A                            loc_421C:
00004C5A 5338 FEC2                  		subq.b	#1,($FFFFFEC2).w
00004C5E 6A00                       		bpl.s	loc_4232
00004C60 11FC 0007 FEC2             		move.b	#7,($FFFFFEC2).w
00004C66 5238 FEC3                  		addq.b	#1,($FFFFFEC3).w
00004C6A 0238 0003 FEC3             		andi.b	#3,($FFFFFEC3).w
00004C70                            
00004C70                            loc_4232:
00004C70 5338 FEC4                  		subq.b	#1,($FFFFFEC4).w
00004C74 6A00                       		bpl.s	loc_4250
00004C76 11FC 0007 FEC4             		move.b	#7,($FFFFFEC4).w
00004C7C 5238 FEC5                  		addq.b	#1,($FFFFFEC5).w
00004C80 0C38 0006 FEC5             		cmpi.b	#6,($FFFFFEC5).w
00004C86 6500                       		bcs.s	loc_4250
00004C88 11FC 0000 FEC5             		move.b	#0,($FFFFFEC5).w
00004C8E                            
00004C8E                            loc_4250:
00004C8E 4A38 FEC6                  		tst.b	($FFFFFEC6).w
00004C92 6700                       		beq.s	locret_4272
00004C94 7000                       		moveq	#0,d0
00004C96 1038 FEC6                  		move.b	($FFFFFEC6).w,d0
00004C9A D078 FEC8                  		add.w	($FFFFFEC8).w,d0
00004C9E 31C0 FEC8                  		move.w	d0,($FFFFFEC8).w
00004CA2 EF58                       		rol.w	#7,d0
00004CA4 0240 0003                  		andi.w	#3,d0
00004CA8 11C0 FEC7                  		move.b	d0,($FFFFFEC7).w
00004CAC 5338 FEC6                  		subq.b	#1,($FFFFFEC6).w
00004CB0                            
00004CB0                            locret_4272:
00004CB0 4E75                       		rts	
00004CB2                            ; End of function ChangeRingFrame
00004CB2                            
00004CB2                            ; ---------------------------------------------------------------------------
00004CB2                            ; End-of-act signpost pattern loading subroutine
00004CB2                            ; ---------------------------------------------------------------------------
00004CB2                            
00004CB2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004CB2                            
00004CB2                            
00004CB2                            SignpostArtLoad:			; XREF: Level
00004CB2 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
00004CB6 6600 0000                  		bne.w	Signpost_Exit	; if yes, branch
00004CBA 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w ; is act number 02 (act 3)?
00004CC0 6700                       		beq.s	Signpost_Exit	; if yes, branch
00004CC2 3038 F700                  		move.w	($FFFFF700).w,d0
00004CC6 3238 F72A                  		move.w	($FFFFF72A).w,d1
00004CCA 0441 0100                  		subi.w	#$100,d1
00004CCE B041                       		cmp.w	d1,d0		; has Sonic reached the	edge of	the level?
00004CD0 6D00                       		blt.s	Signpost_Exit	; if not, branch
00004CD2 4A38 FE1E                  		tst.b	($FFFFFE1E).w
00004CD6 6700                       		beq.s	Signpost_Exit
00004CD8 B278 F728                  		cmp.w	($FFFFF728).w,d1
00004CDC 6700                       		beq.s	Signpost_Exit
00004CDE 31C1 F728                  		move.w	d1,($FFFFF728).w ; move	left boundary to current screen	position
00004CE2 7012                       		moveq	#$12,d0
00004CE4 6000 CA3C                  		bra.w	LoadPLC2	; load signpost	patterns
00004CE8                            ; ===========================================================================
00004CE8                            
00004CE8                            Signpost_Exit:
00004CE8 4E75                       		rts	
00004CEA                            ; End of function SignpostArtLoad
00004CEA                            
00004CEA                            ; ===========================================================================
00004CEA                            Demo_GHZ:	incbin	demodata\i_ghz.bin
00004D6A                            Demo_MZ:	incbin	demodata\i_mz.bin
00004E9A                            Demo_SYZ:	incbin	demodata\i_syz.bin
00004F1A                            Demo_SS:	incbin	demodata\i_ss.bin
0000501A                            ; ===========================================================================
0000501A                            
0000501A                            ; ---------------------------------------------------------------------------
0000501A                            ; Special Stage
0000501A                            ; ---------------------------------------------------------------------------
0000501A                            
0000501A                            SpecialStage:				; XREF: GameModeArray
0000501A 303C 00CA                  		move.w	#$CA,d0
0000501E 6100 C45C                  		bsr.w	PlaySound_Special ; play special stage entry sound
00005022 6100 D290                  		bsr.w	Pal_MakeFlash
00005026 46FC 2700                  		move	#$2700,sr
0000502A 4DF9 00C0 0004             		lea	($C00004).l,a6
00005030 3CBC 8B03                  		move.w	#$8B03,(a6)
00005034 3CBC 8004                  		move.w	#$8004,(a6)
00005038 31FC 8AAF F624             		move.w	#$8AAF,($FFFFF624).w
0000503E 3CBC 9011                  		move.w	#$9011,(a6)
00005042 3038 F60C                  		move.w	($FFFFF60C).w,d0
00005046 0200 00BF                  		andi.b	#$BF,d0
0000504A 33C0 00C0 0004             		move.w	d0,($C00004).l
00005050 6100 C334                  		bsr.w	ClearScreen
00005054 46FC 2300                  		move	#$2300,sr
00005058 4BF9 00C0 0004             		lea	($C00004).l,a5
0000505E 3ABC 8F01                  		move.w	#$8F01,(a5)
00005062 2ABC 946F 93FF             		move.l	#$946F93FF,(a5)
00005068 3ABC 9780                  		move.w	#$9780,(a5)
0000506C 2ABC 5000 0081             		move.l	#$50000081,(a5)
00005072 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
0000507A                            
0000507A                            loc_463C:
0000507A 3215                       		move.w	(a5),d1
0000507C 0801 0001                  		btst	#1,d1
00005080 66F8                       		bne.s	loc_463C
00005082 3ABC 8F02                  		move.w	#$8F02,(a5)
00005086 6100 0000                  		bsr.w	SS_BGLoad
0000508A 7014                       		moveq	#$14,d0
0000508C 6100 C7CE                  		bsr.w	RunPLC_ROM	; load special stage patterns
00005090 43F8 D000                  		lea	($FFFFD000).w,a1
00005094 7000                       		moveq	#0,d0
00005096 323C 07FF                  		move.w	#$7FF,d1
0000509A                            
0000509A                            SS_ClrObjRam:
0000509A 22C0                       		move.l	d0,(a1)+
0000509C 51C9 FFFC                  		dbf	d1,SS_ClrObjRam	; clear	the object RAM
000050A0                            
000050A0 43F8 F700                  		lea	($FFFFF700).w,a1
000050A4 7000                       		moveq	#0,d0
000050A6 323C 003F                  		move.w	#$3F,d1
000050AA                            
000050AA                            SS_ClrRam:
000050AA 22C0                       		move.l	d0,(a1)+
000050AC 51C9 FFFC                  		dbf	d1,SS_ClrRam	; clear	variables
000050B0                            
000050B0 43F8 FE60                  		lea	($FFFFFE60).w,a1
000050B4 7000                       		moveq	#0,d0
000050B6 323C 0027                  		move.w	#$27,d1
000050BA                            
000050BA                            SS_ClrRam2:
000050BA 22C0                       		move.l	d0,(a1)+
000050BC 51C9 FFFC                  		dbf	d1,SS_ClrRam2	; clear	variables
000050C0                            
000050C0 43F8 AA00                  		lea	($FFFFAA00).w,a1
000050C4 7000                       		moveq	#0,d0
000050C6 323C 007F                  		move.w	#$7F,d1
000050CA                            
000050CA                            SS_ClrNemRam:
000050CA 22C0                       		move.l	d0,(a1)+
000050CC 51C9 FFFC                  		dbf	d1,SS_ClrNemRam	; clear	Nemesis	buffer
000050D0                            
000050D0 4238 F64E                  		clr.b	($FFFFF64E).w
000050D4 4278 FE02                  		clr.w	($FFFFFE02).w
000050D8 700A                       		moveq	#$A,d0
000050DA 6100 D358                  		bsr.w	PalLoad1	; load special stage pallet
000050DE 4EB9 0000 0000             		jsr	SS_Load
000050E4 21FC 0000 0000 F700        		move.l	#0,($FFFFF700).w
000050EC 21FC 0000 0000 F704        		move.l	#0,($FFFFF704).w
000050F4 11FC 0009 D000             		move.b	#9,($FFFFD000).w ; load	special	stage Sonic object
000050FA 6100 0000                  		bsr.w	PalCycle_SS
000050FE 4278 F780                  		clr.w	($FFFFF780).w	; set stage angle to "upright"
00005102 31FC 0040 F782             		move.w	#$40,($FFFFF782).w ; set stage rotation	speed
00005108 303C 0089                  		move.w	#$89,d0
0000510C 6100 C368                  		bsr.w	PlaySound	; play special stage BG	music
00005110 31FC 0000 F790             		move.w	#0,($FFFFF790).w
00005116 43F9 0000 4AC6             		lea	(Demo_Index).l,a1
0000511C 7006                       		moveq	#6,d0
0000511E E548                       		lsl.w	#2,d0
00005120 2271 0000                  		movea.l	(a1,d0.w),a1
00005124 11E9 0001 F792             		move.b	1(a1),($FFFFF792).w
0000512A 5338 F792                  		subq.b	#1,($FFFFF792).w
0000512E 4278 FE20                  		clr.w	($FFFFFE20).w
00005132 4238 FE1B                  		clr.b	($FFFFFE1B).w
00005136 31FC 0000 FE08             		move.w	#0,($FFFFFE08).w
0000513C 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
00005142 4A38 FFE2                  		tst.b	($FFFFFFE2).w	; has debug cheat been entered?
00005146 6700                       		beq.s	SS_NoDebug	; if not, branch
00005148 0838 0006 F604             		btst	#6,($FFFFF604).w ; is A	button pressed?
0000514E 6700                       		beq.s	SS_NoDebug	; if not, branch
00005150 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
00005156                            
00005156                            SS_NoDebug:
00005156 3038 F60C                  		move.w	($FFFFF60C).w,d0
0000515A 0000 0040                  		ori.b	#$40,d0
0000515E 33C0 00C0 0004             		move.w	d0,($C00004).l
00005164 6100 D0A2                  		bsr.w	Pal_MakeWhite
00005168                            
00005168                            ; ---------------------------------------------------------------------------
00005168                            ; Main Special Stage loop
00005168                            ; ---------------------------------------------------------------------------
00005168                            
00005168                            SS_MainLoop:
00005168 6100 C31E                  		bsr.w	PauseGame
0000516C 11FC 000A F62A             		move.b	#$A,($FFFFF62A).w
00005172 6100 E234                  		bsr.w	DelayProgram
00005176 6100 F89E                  		bsr.w	MoveSonicInDemo
0000517A 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w
00005180 4EB9 0000 0000             		jsr	ObjectsLoad
00005186 4EB9 0000 0000             		jsr	BuildSprites
0000518C 4EB9 0000 0000             		jsr	SS_ShowLayout
00005192 6100 0000                  		bsr.w	SS_BGAnimate
00005196 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
0000519A 6700                       		beq.s	SS_ChkEnd	; if not, branch
0000519C 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
000051A0 6700 0000                  		beq.w	SS_ToSegaScreen	; if not, branch
000051A4                            
000051A4                            SS_ChkEnd:
000051A4 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode $10 (special stage)?
000051AA 6700 FFBC                  		beq.w	SS_MainLoop	; if yes, branch
000051AE                            
000051AE 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
000051B2 6600 0000                  		bne.w	SS_ToSegaScreen	; if yes, branch
000051B6 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
000051BC 0C78 0503 FE10             		cmpi.w	#$503,($FFFFFE10).w ; is level number higher than FZ?
000051C2 6500                       		bcs.s	SS_End		; if not, branch
000051C4 4278 FE10                  		clr.w	($FFFFFE10).w	; set to GHZ1
000051C8                            
000051C8                            SS_End:
000051C8 31FC 003C F614             		move.w	#60,($FFFFF614).w ; set	delay time to 1	second
000051CE 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
000051D4 4278 F794                  		clr.w	($FFFFF794).w
000051D8                            
000051D8                            SS_EndLoop:
000051D8 11FC 0016 F62A             		move.b	#$16,($FFFFF62A).w
000051DE 6100 E1C8                  		bsr.w	DelayProgram
000051E2 6100 F832                  		bsr.w	MoveSonicInDemo
000051E6 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w
000051EC 4EB9 0000 0000             		jsr	ObjectsLoad
000051F2 4EB9 0000 0000             		jsr	BuildSprites
000051F8 4EB9 0000 0000             		jsr	SS_ShowLayout
000051FE 6100 0000                  		bsr.w	SS_BGAnimate
00005202 5378 F794                  		subq.w	#1,($FFFFF794).w
00005206 6A00                       		bpl.s	loc_47D4
00005208 31FC 0002 F794             		move.w	#2,($FFFFF794).w
0000520E 6100 D0C4                  		bsr.w	Pal_ToWhite
00005212                            
00005212                            loc_47D4:
00005212 4A78 F614                  		tst.w	($FFFFF614).w
00005216 66C0                       		bne.s	SS_EndLoop
00005218                            
00005218 46FC 2700                  		move	#$2700,sr
0000521C 4DF9 00C0 0004             		lea	($C00004).l,a6
00005222 3CBC 8230                  		move.w	#$8230,(a6)
00005226 3CBC 8407                  		move.w	#$8407,(a6)
0000522A 3CBC 9001                  		move.w	#$9001,(a6)
0000522E 6100 C156                  		bsr.w	ClearScreen
00005232 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
0000523C 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
00005242 6100 C36C                  		bsr.w	NemDec
00005246 4EB9 0000 0000             		jsr	Hud_Base
0000524C 4278 C800                  		clr.w	($FFFFC800).w
00005250 21FC FFFF C800 C8FC        		move.l	#$FFFFC800,($FFFFC8FC).w
00005258 46FC 2300                  		move	#$2300,sr
0000525C 7011                       		moveq	#$11,d0
0000525E 6100 D210                  		bsr.w	PalLoad2	; load results screen pallet
00005262 7000                       		moveq	#0,d0
00005264 6100 C4BC                  		bsr.w	LoadPLC2
00005268 701B                       		moveq	#$1B,d0
0000526A 6100 C484                  		bsr.w	LoadPLC		; load results screen patterns
0000526E 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; update score	counter
00005274 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; update ring bonus counter
0000527A 3038 FE20                  		move.w	($FFFFFE20).w,d0
0000527E C0FC 000A                  		mulu.w	#10,d0		; multiply rings by 10
00005282 31C0 F7D4                  		move.w	d0,($FFFFF7D4).w ; set rings bonus
00005286 303C 008E                  		move.w	#$8E,d0
0000528A 4EB9 0000 147C             		jsr	(PlaySound_Special).l ;	play end-of-level music
00005290 43F8 D000                  		lea	($FFFFD000).w,a1
00005294 7000                       		moveq	#0,d0
00005296 323C 07FF                  		move.w	#$7FF,d1
0000529A                            
0000529A                            SS_EndClrObjRam:
0000529A 22C0                       		move.l	d0,(a1)+
0000529C 51C9 FFFC                  		dbf	d1,SS_EndClrObjRam ; clear object RAM
000052A0                            
000052A0 11FC 007E D5C0             		move.b	#$7E,($FFFFD5C0).w ; load results screen object
000052A6                            
000052A6                            SS_NormalExit:
000052A6 6100 C1E0                  		bsr.w	PauseGame
000052AA 11FC 000C F62A             		move.b	#$C,($FFFFF62A).w
000052B0 6100 E0F6                  		bsr.w	DelayProgram
000052B4 4EB9 0000 0000             		jsr	ObjectsLoad
000052BA 4EB9 0000 0000             		jsr	BuildSprites
000052C0 6100 C49A                  		bsr.w	RunPLC_RAM
000052C4 4A78 FE02                  		tst.w	($FFFFFE02).w
000052C8 67DC                       		beq.s	SS_NormalExit
000052CA 4AB8 F680                  		tst.l	($FFFFF680).w
000052CE 66D6                       		bne.s	SS_NormalExit
000052D0 303C 00CA                  		move.w	#$CA,d0
000052D4 6100 C1A6                  		bsr.w	PlaySound_Special ; play special stage exit sound
000052D8 6100 CFDA                  		bsr.w	Pal_MakeFlash
000052DC 4E75                       		rts	
000052DE                            ; ===========================================================================
000052DE                            
000052DE                            SS_ToSegaScreen:
000052DE 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set screen mode to 00 (Sega screen)
000052E4 4E75                       		rts
000052E6                            
000052E6                            ; ---------------------------------------------------------------------------
000052E6                            ; Special stage	background loading subroutine
000052E6                            ; ---------------------------------------------------------------------------
000052E6                            
000052E6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000052E6                            
000052E6                            
000052E6                            SS_BGLoad:				; XREF: SpecialStage
000052E6 43F9 00FF 0000             		lea	($FF0000).l,a1
000052EC 41F9 0000 0000             		lea	(Eni_SSBg1).l,a0 ; load	mappings for the birds and fish
000052F2 303C 4051                  		move.w	#$4051,d0
000052F6 6100 C596                  		bsr.w	EniDec
000052FA 263C 5000 0001             		move.l	#$50000001,d3
00005300 45F9 00FF 0080             		lea	($FF0080).l,a2
00005306 7E06                       		moveq	#6,d7
00005308                            
00005308                            loc_48BE:
00005308 2003                       		move.l	d3,d0
0000530A 7C03                       		moveq	#3,d6
0000530C 7800                       		moveq	#0,d4
0000530E 0C47 0003                  		cmpi.w	#3,d7
00005312 6400                       		bcc.s	loc_48CC
00005314 7801                       		moveq	#1,d4
00005316                            
00005316                            loc_48CC:
00005316 7A07                       		moveq	#7,d5
00005318                            
00005318                            loc_48CE:
00005318 224A                       		movea.l	a2,a1
0000531A 0A04 0001                  		eori.b	#1,d4
0000531E 6600                       		bne.s	loc_48E2
00005320 0C47 0006                  		cmpi.w	#6,d7
00005324 6600                       		bne.s	loc_48F2
00005326 43F9 00FF 0000             		lea	($FF0000).l,a1
0000532C                            
0000532C                            loc_48E2:
0000532C 48E7 F800                  		movem.l	d0-d4,-(sp)
00005330 7207                       		moveq	#7,d1
00005332 7407                       		moveq	#7,d2
00005334 6100 C1CA                  		bsr.w	ShowVDPGraphics
00005338 4CDF 001F                  		movem.l	(sp)+,d0-d4
0000533C                            
0000533C                            loc_48F2:
0000533C 0680 0010 0000             		addi.l	#$100000,d0
00005342 51CD FFD4                  		dbf	d5,loc_48CE
00005346 0680 0380 0000             		addi.l	#$3800000,d0
0000534C 0A04 0001                  		eori.b	#1,d4
00005350 51CE FFC4                  		dbf	d6,loc_48CC
00005354 0683 1000 0000             		addi.l	#$10000000,d3
0000535A 6A00                       		bpl.s	loc_491C
0000535C 4843                       		swap	d3
0000535E 0683 0000 C000             		addi.l	#$C000,d3
00005364 4843                       		swap	d3
00005366                            
00005366                            loc_491C:
00005366 D4FC 0080                  		adda.w	#$80,a2
0000536A 51CF FF9C                  		dbf	d7,loc_48BE
0000536E 43F9 00FF 0000             		lea	($FF0000).l,a1
00005374 41F9 0000 0000             		lea	(Eni_SSBg2).l,a0 ; load	mappings for the clouds
0000537A 303C 4000                  		move.w	#$4000,d0
0000537E 6100 C50E                  		bsr.w	EniDec
00005382 43F9 00FF 0000             		lea	($FF0000).l,a1
00005388 203C 4000 0003             		move.l	#$40000003,d0
0000538E 723F                       		moveq	#$3F,d1
00005390 741F                       		moveq	#$1F,d2
00005392 6100 C16C                  		bsr.w	ShowVDPGraphics
00005396 43F9 00FF 0000             		lea	($FF0000).l,a1
0000539C 203C 5000 0003             		move.l	#$50000003,d0
000053A2 723F                       		moveq	#$3F,d1
000053A4 743F                       		moveq	#$3F,d2
000053A6 6100 C158                  		bsr.w	ShowVDPGraphics
000053AA 4E75                       		rts	
000053AC                            ; End of function SS_BGLoad
000053AC                            
000053AC                            ; ---------------------------------------------------------------------------
000053AC                            ; Pallet cycling routine - special stage
000053AC                            ; ---------------------------------------------------------------------------
000053AC                            
000053AC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000053AC                            
000053AC                            
000053AC                            PalCycle_SS:				; XREF: loc_DA6; SpecialStage
000053AC 4A78 F63A                  		tst.w	($FFFFF63A).w
000053B0 6600                       		bne.s	locret_49E6
000053B2 5378 F79C                  		subq.w	#1,($FFFFF79C).w
000053B6 6A00                       		bpl.s	locret_49E6
000053B8 4DF9 00C0 0004             		lea	($C00004).l,a6
000053BE 3038 F79A                  		move.w	($FFFFF79A).w,d0
000053C2 5278 F79A                  		addq.w	#1,($FFFFF79A).w
000053C6 0240 001F                  		andi.w	#$1F,d0
000053CA E548                       		lsl.w	#2,d0
000053CC 41F9 0000 0000             		lea	(byte_4A3C).l,a0
000053D2 D0C0                       		adda.w	d0,a0
000053D4 1018                       		move.b	(a0)+,d0
000053D6 6A00                       		bpl.s	loc_4992
000053D8 303C 01FF                  		move.w	#$1FF,d0
000053DC                            
000053DC                            loc_4992:
000053DC 31C0 F79C                  		move.w	d0,($FFFFF79C).w
000053E0 7000                       		moveq	#0,d0
000053E2 1018                       		move.b	(a0)+,d0
000053E4 31C0 F7A0                  		move.w	d0,($FFFFF7A0).w
000053E8 43F9 0000 0000             		lea	(byte_4ABC).l,a1
000053EE 43F1 0000                  		lea	(a1,d0.w),a1
000053F2 303C 8200                  		move.w	#-$7E00,d0
000053F6 1019                       		move.b	(a1)+,d0
000053F8 3C80                       		move.w	d0,(a6)
000053FA 11D1 F616                  		move.b	(a1),($FFFFF616).w
000053FE 303C 8400                  		move.w	#-$7C00,d0
00005402 1018                       		move.b	(a0)+,d0
00005404 3C80                       		move.w	d0,(a6)
00005406 23FC 4000 0010 00C0 0004   		move.l	#$40000010,($C00004).l
00005410 23F8 F616 00C0 0000        		move.l	($FFFFF616).w,($C00000).l
00005418 7000                       		moveq	#0,d0
0000541A 1018                       		move.b	(a0)+,d0
0000541C 6B00                       		bmi.s	loc_49E8
0000541E 43F9 0000 0000             		lea	(Pal_SSCyc1).l,a1
00005424 D2C0                       		adda.w	d0,a1
00005426 45F8 FB4E                  		lea	($FFFFFB4E).w,a2
0000542A 24D9                       		move.l	(a1)+,(a2)+
0000542C 24D9                       		move.l	(a1)+,(a2)+
0000542E 24D9                       		move.l	(a1)+,(a2)+
00005430                            
00005430                            locret_49E6:
00005430 4E75                       		rts	
00005432                            ; ===========================================================================
00005432                            
00005432                            loc_49E8:				; XREF: PalCycle_SS
00005432 3238 F79E                  		move.w	($FFFFF79E).w,d1
00005436 0C40 008A                  		cmpi.w	#$8A,d0
0000543A 6500                       		bcs.s	loc_49F4
0000543C 5241                       		addq.w	#1,d1
0000543E                            
0000543E                            loc_49F4:
0000543E C2FC 002A                  		mulu.w	#$2A,d1
00005442 43F9 0000 0000             		lea	(Pal_SSCyc2).l,a1
00005448 D2C1                       		adda.w	d1,a1
0000544A 0240 007F                  		andi.w	#$7F,d0
0000544E 0880 0000                  		bclr	#0,d0
00005452 6700                       		beq.s	loc_4A18
00005454 45F8 FB6E                  		lea	($FFFFFB6E).w,a2
00005458 24D1                       		move.l	(a1),(a2)+
0000545A 24E9 0004                  		move.l	4(a1),(a2)+
0000545E 24E9 0008                  		move.l	8(a1),(a2)+
00005462                            
00005462                            loc_4A18:
00005462 D2FC 000C                  		adda.w	#$C,a1
00005466 45F8 FB5A                  		lea	($FFFFFB5A).w,a2
0000546A 0C40 000A                  		cmpi.w	#$A,d0
0000546E 6500                       		bcs.s	loc_4A2E
00005470 0440 000A                  		subi.w	#$A,d0
00005474 45F8 FB7A                  		lea	($FFFFFB7A).w,a2
00005478                            
00005478                            loc_4A2E:
00005478 3200                       		move.w	d0,d1
0000547A D040                       		add.w	d0,d0
0000547C D041                       		add.w	d1,d0
0000547E D2C0                       		adda.w	d0,a1
00005480 24D9                       		move.l	(a1)+,(a2)+
00005482 34D9                       		move.w	(a1)+,(a2)+
00005484 4E75                       		rts	
00005486                            ; End of function PalCycle_SS
00005486                            
00005486                            ; ===========================================================================
00005486 0300 0792 0300 0790 0300+  byte_4A3C:	dc.b 3,	0, 7, $92, 3, 0, 7, $90, 3, 0, 7, $8E, 3, 0, 7,	$8C
00005496                            					; XREF: PalCycle_SS
00005496 0300 078B 0300 0780 0300+  		dc.b 3,	0, 7, $8B, 3, 0, 7, $80, 3, 0, 7, $82, 3, 0, 7,	$84
000054A6 0300 0786 0300 0788 0708+  		dc.b 3,	0, 7, $86, 3, 0, 7, $88, 7, 8, 7, 0, 7,	$A, 7, $C
000054B6 FF0C 0718 FF0C 0718 070A+  		dc.b $FF, $C, 7, $18, $FF, $C, 7, $18, 7, $A, 7, $C, 7,	8, 7, 0
000054C6 0300 0688 0300 0686 0300+  		dc.b 3,	0, 6, $88, 3, 0, 6, $86, 3, 0, 6, $84, 3, 0, 6,	$82
000054D6 0300 0681 0300 068A 0300+  		dc.b 3,	0, 6, $81, 3, 0, 6, $8A, 3, 0, 6, $8C, 3, 0, 6,	$8E
000054E6 0300 0690 0300 0692 0702+  		dc.b 3,	0, 6, $90, 3, 0, 6, $92, 7, 2, 6, $24, 7, 4, 6,	$30
000054F6 FF06 063C FF06 063C 0704+  		dc.b $FF, 6, 6,	$3C, $FF, 6, 6,	$3C, 7,	4, 6, $30, 7, 2, 6, $24
00005506                            		even
00005506 1001 1800 1801 2000 2001+  byte_4ABC:	dc.b $10, 1, $18, 0, $18, 1, $20, 0, $20, 1, $28, 0, $28, 1
00005514                            					; XREF: PalCycle_SS
00005514                            		even
00005514                            
00005514                            Pal_SSCyc1:	incbin	pallet\c_ss_1.bin
0000555C                            		even
0000555C                            Pal_SSCyc2:	incbin	pallet\c_ss_2.bin
0000562E                            		even
0000562E                            
0000562E                            ; ---------------------------------------------------------------------------
0000562E                            ; Subroutine to	make the special stage background animated
0000562E                            ; ---------------------------------------------------------------------------
0000562E                            
0000562E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000562E                            
0000562E                            
0000562E                            SS_BGAnimate:				; XREF: SpecialStage
0000562E 3038 F7A0                  		move.w	($FFFFF7A0).w,d0
00005632 6600                       		bne.s	loc_4BF6
00005634 31FC 0000 F70C             		move.w	#0,($FFFFF70C).w
0000563A 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00005640                            
00005640                            loc_4BF6:
00005640 0C40 0008                  		cmpi.w	#8,d0
00005644 6400                       		bcc.s	loc_4C4E
00005646 0C40 0006                  		cmpi.w	#6,d0
0000564A 6600                       		bne.s	loc_4C10
0000564C 5278 F718                  		addq.w	#1,($FFFFF718).w
00005650 5278 F70C                  		addq.w	#1,($FFFFF70C).w
00005654 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
0000565A                            
0000565A                            loc_4C10:
0000565A 7000                       		moveq	#0,d0
0000565C 3038 F708                  		move.w	($FFFFF708).w,d0
00005660 4440                       		neg.w	d0
00005662 4840                       		swap	d0
00005664 43F9 0000 0000             		lea	(byte_4CCC).l,a1
0000566A 47F8 AA00                  		lea	($FFFFAA00).w,a3
0000566E 7609                       		moveq	#9,d3
00005670                            
00005670                            loc_4C26:
00005670 302B 0002                  		move.w	2(a3),d0
00005674 6100 DD64                  		bsr.w	CalcSine
00005678 7400                       		moveq	#0,d2
0000567A 1419                       		move.b	(a1)+,d2
0000567C C1C2                       		muls.w	d2,d0
0000567E E080                       		asr.l	#8,d0
00005680 36C0                       		move.w	d0,(a3)+
00005682 1419                       		move.b	(a1)+,d2
00005684 4882                       		ext.w	d2
00005686 D55B                       		add.w	d2,(a3)+
00005688 51CB FFE6                  		dbf	d3,loc_4C26
0000568C 47F8 AA00                  		lea	($FFFFAA00).w,a3
00005690 45F9 0000 0000             		lea	(byte_4CB8).l,a2
00005696 6000                       		bra.s	loc_4C7E
00005698                            ; ===========================================================================
00005698                            
00005698                            loc_4C4E:				; XREF: SS_BGAnimate
00005698 0C40 000C                  		cmpi.w	#$C,d0
0000569C 6600                       		bne.s	loc_4C74
0000569E 5378 F718                  		subq.w	#1,($FFFFF718).w
000056A2 47F8 AB00                  		lea	($FFFFAB00).w,a3
000056A6 243C 0001 8000             		move.l	#$18000,d2
000056AC 7206                       		moveq	#6,d1
000056AE                            
000056AE                            loc_4C64:
000056AE 2013                       		move.l	(a3),d0
000056B0 9082                       		sub.l	d2,d0
000056B2 26C0                       		move.l	d0,(a3)+
000056B4 0482 0000 2000             		subi.l	#$2000,d2
000056BA 51C9 FFF2                  		dbf	d1,loc_4C64
000056BE                            
000056BE                            loc_4C74:
000056BE 47F8 AB00                  		lea	($FFFFAB00).w,a3
000056C2 45F9 0000 0000             		lea	(byte_4CC4).l,a2
000056C8                            
000056C8                            loc_4C7E:
000056C8 43F8 CC00                  		lea	($FFFFCC00).w,a1
000056CC 3038 F718                  		move.w	($FFFFF718).w,d0
000056D0 4440                       		neg.w	d0
000056D2 4840                       		swap	d0
000056D4 7600                       		moveq	#0,d3
000056D6 161A                       		move.b	(a2)+,d3
000056D8 3438 F70C                  		move.w	($FFFFF70C).w,d2
000056DC 4442                       		neg.w	d2
000056DE 0242 00FF                  		andi.w	#$FF,d2
000056E2 E54A                       		lsl.w	#2,d2
000056E4                            
000056E4                            loc_4C9A:
000056E4 301B                       		move.w	(a3)+,d0
000056E6 544B                       		addq.w	#2,a3
000056E8 7200                       		moveq	#0,d1
000056EA 121A                       		move.b	(a2)+,d1
000056EC 5341                       		subq.w	#1,d1
000056EE                            
000056EE                            loc_4CA4:
000056EE 2380 2000                  		move.l	d0,(a1,d2.w)
000056F2 5842                       		addq.w	#4,d2
000056F4 0242 03FC                  		andi.w	#$3FC,d2
000056F8 51C9 FFF4                  		dbf	d1,loc_4CA4
000056FC 51CB FFE6                  		dbf	d3,loc_4C9A
00005700 4E75                       		rts	
00005702                            ; End of function SS_BGAnimate
00005702                            
00005702                            ; ===========================================================================
00005702 0928 1810 2818 1030 1808+  byte_4CB8:	dc.b 9,	$28, $18, $10, $28, $18, $10, $30, $18,	8, $10,	0
0000570E                            		even
0000570E 0630 3030 2818 1818        byte_4CC4:	dc.b 6,	$30, $30, $30, $28, $18, $18, $18
00005716                            		even
00005716 0802 04FF 0203 08FF 0402+  byte_4CCC:	dc.b 8,	2, 4, $FF, 2, 3, 8, $FF, 4, 2, 2, 3, 8,	$FD, 4,	2, 2, 3, 2, $FF
0000572A                            		even
0000572A                            					; XREF: SS_BGAnimate
0000572A                            ; ===========================================================================
0000572A                            
0000572A                            ; ---------------------------------------------------------------------------
0000572A                            ; Continue screen
0000572A                            ; ---------------------------------------------------------------------------
0000572A                            
0000572A                            ContinueScreen:				; XREF: GameModeArray
0000572A 6100 CA5A                  		bsr.w	Pal_FadeFrom
0000572E 46FC 2700                  		move	#$2700,sr
00005732 3038 F60C                  		move.w	($FFFFF60C).w,d0
00005736 0200 00BF                  		andi.b	#$BF,d0
0000573A 33C0 00C0 0004             		move.w	d0,($C00004).l
00005740 4DF9 00C0 0004             		lea	($C00004).l,a6
00005746 3CBC 8004                  		move.w	#$8004,(a6)
0000574A 3CBC 8700                  		move.w	#$8700,(a6)
0000574E 6100 BC36                  		bsr.w	ClearScreen
00005752 43F8 D000                  		lea	($FFFFD000).w,a1
00005756 7000                       		moveq	#0,d0
00005758 323C 07FF                  		move.w	#$7FF,d1
0000575C                            
0000575C                            Cont_ClrObjRam:
0000575C 22C0                       		move.l	d0,(a1)+
0000575E 51C9 FFFC                  		dbf	d1,Cont_ClrObjRam ; clear object RAM
00005762                            
00005762 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
0000576C 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
00005772 6100 BE3C                  		bsr.w	NemDec
00005776 23FC 6000 0002 00C0 0004   		move.l	#$60000002,($C00004).l
00005780 41F9 0000 0000             		lea	(Nem_ContSonic).l,a0 ; load Sonic patterns
00005786 6100 BE28                  		bsr.w	NemDec
0000578A 23FC 6A20 0002 00C0 0004   		move.l	#$6A200002,($C00004).l
00005794 41F9 0000 0000             		lea	(Nem_MiniSonic).l,a0 ; load continue screen patterns
0000579A 6100 BE14                  		bsr.w	NemDec
0000579E 720A                       		moveq	#10,d1
000057A0 4EB9 0000 0000             		jsr	ContScrCounter	; run countdown	(start from 10)
000057A6 7012                       		moveq	#$12,d0
000057A8 6100 CC8A                  		bsr.w	PalLoad1	; load continue	screen pallet
000057AC 103C 0090                  		move.b	#$90,d0
000057B0 6100 BCC4                  		bsr.w	PlaySound	; play continue	music
000057B4 31FC 0293 F614             		move.w	#659,($FFFFF614).w ; set time delay to 11 seconds
000057BA 42B8 F700                  		clr.l	($FFFFF700).w
000057BE 21FC 0100 0000 F704        		move.l	#$1000000,($FFFFF704).w
000057C6 11FC 0081 D000             		move.b	#$81,($FFFFD000).w ; load Sonic	object
000057CC 11FC 0080 D040             		move.b	#$80,($FFFFD040).w ; load continue screen objects
000057D2 11FC 0080 D080             		move.b	#$80,($FFFFD080).w
000057D8 11FC 0003 D098             		move.b	#3,($FFFFD098).w
000057DE 11FC 0004 D09A             		move.b	#4,($FFFFD09A).w
000057E4 11FC 0080 D0C0             		move.b	#$80,($FFFFD0C0).w
000057EA 11FC 0004 D0E4             		move.b	#4,($FFFFD0E4).w
000057F0 4EB9 0000 0000             		jsr	ObjectsLoad
000057F6 4EB9 0000 0000             		jsr	BuildSprites
000057FC 3038 F60C                  		move.w	($FFFFF60C).w,d0
00005800 0000 0040                  		ori.b	#$40,d0
00005804 33C0 00C0 0004             		move.w	d0,($C00004).l
0000580A 6100 C8C4                  		bsr.w	Pal_FadeTo
0000580E                            
0000580E                            ; ---------------------------------------------------------------------------
0000580E                            ; Continue screen main loop
0000580E                            ; ---------------------------------------------------------------------------
0000580E                            
0000580E                            Cont_MainLoop:
0000580E 11FC 0016 F62A             		move.b	#$16,($FFFFF62A).w
00005814 6100 DB92                  		bsr.w	DelayProgram
00005818 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000581E 6400                       		bcc.s	loc_4DF2
00005820 46FC 2700                  		move	#$2700,sr
00005824 3238 F614                  		move.w	($FFFFF614).w,d1
00005828 82FC 003C                  		divu.w	#$3C,d1
0000582C 0281 0000 000F             		andi.l	#$F,d1
00005832 4EB9 0000 0000             		jsr	ContScrCounter
00005838 46FC 2300                  		move	#$2300,sr
0000583C                            
0000583C                            loc_4DF2:
0000583C 4EB9 0000 0000             		jsr	ObjectsLoad
00005842 4EB9 0000 0000             		jsr	BuildSprites
00005848 0C78 0180 D008             		cmpi.w	#$180,($FFFFD008).w ; has Sonic	run off	screen?
0000584E 6400                       		bcc.s	Cont_GotoLevel	; if yes, branch
00005850 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00005856 64B6                       		bcc.s	Cont_MainLoop
00005858 4A78 F614                  		tst.w	($FFFFF614).w
0000585C 6600 FFB0                  		bne.w	Cont_MainLoop
00005860 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
00005866 4E75                       		rts	
00005868                            ; ===========================================================================
00005868                            
00005868                            Cont_GotoLevel:				; XREF: Cont_MainLoop
00005868 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
0000586E 11FC 0003 FE12             		move.b	#3,($FFFFFE12).w ; set lives to	3
00005874 7000                       		moveq	#0,d0
00005876 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
0000587A 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
0000587E 11C0 FEBF                          move.b    d0,($FFFFFEBF).w ; value used to increment centiseconds
00005882 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00005886 11C0 FE30                  		move.b	d0,($FFFFFE30).w ; clear lamppost count
0000588A 5338 FE18                  		subq.b	#1,($FFFFFE18).w ; subtract 1 from continues
0000588E 4E75                       		rts	
00005890                            ; ===========================================================================
00005890                            
00005890                            ; ---------------------------------------------------------------------------
00005890                            ; Object 80 - Continue screen elements
00005890                            ; ---------------------------------------------------------------------------
00005890                            
00005890                            Obj80:					; XREF: Obj_Index
00005890 7000                       		moveq	#0,d0
00005892 1028 0024                  		move.b	$24(a0),d0
00005896 323B 0000                  		move.w	Obj80_Index(pc,d0.w),d1
0000589A 4EFB 1000                  		jmp	Obj80_Index(pc,d1.w)
0000589E                            ; ===========================================================================
0000589E 0000                       Obj80_Index:	dc.w Obj80_Main-Obj80_Index
000058A0 0000                       		dc.w Obj80_Display-Obj80_Index
000058A2 0000                       		dc.w Obj80_MakeMiniSonic-Obj80_Index
000058A4 0000                       		dc.w Obj80_ChkType-Obj80_Index
000058A6                            ; ===========================================================================
000058A6                            
000058A6                            Obj80_Main:				; XREF: Obj80_Index
000058A6 5428 0024                  		addq.b	#2,$24(a0)
000058AA 217C 0000 0000 0004        		move.l	#Map_obj80,4(a0)
000058B2 317C 8500 0002             		move.w	#$8500,2(a0)
000058B8 117C 0000 0001             		move.b	#0,1(a0)
000058BE 117C 003C 0019             		move.b	#$3C,$19(a0)
000058C4 317C 0120 0008             		move.w	#$120,8(a0)
000058CA 317C 00C0 000A             		move.w	#$C0,$A(a0)
000058D0 31FC 0000 FE20             		move.w	#0,($FFFFFE20).w ; clear rings
000058D6                            
000058D6                            Obj80_Display:				; XREF: Obj80_Index
000058D6 4EF9 0000 0000             		jmp	DisplaySprite
000058DC                            ; ===========================================================================
000058DC                            Obj80_MiniSonicPos:
000058DC 0116 012A 0102 013E 00EE+  		dc.w $116, $12A, $102, $13E, $EE, $152, $DA, $166, $C6
000058EE 017A 00B2 018E 009E 01A2+  		dc.w $17A, $B2,	$18E, $9E, $1A2, $8A
000058FA                            ; ===========================================================================
000058FA                            
000058FA                            Obj80_MakeMiniSonic:			; XREF: Obj80_Index
000058FA 2248                       		movea.l	a0,a1
000058FC 45F9 0000 58DC             		lea	(Obj80_MiniSonicPos).l,a2
00005902 7200                       		moveq	#0,d1
00005904 1238 FE18                  		move.b	($FFFFFE18).w,d1
00005908 5501                       		subq.b	#2,d1
0000590A 6400                       		bcc.s	loc_4EC4
0000590C 4EF9 0000 0000             		jmp	DeleteObject
00005912                            ; ===========================================================================
00005912                            
00005912                            loc_4EC4:				; XREF: Obj80_MakeMiniSonic
00005912 7601                       		moveq	#1,d3
00005914 0C01 000E                  		cmpi.b	#$E,d1
00005918 6500                       		bcs.s	loc_4ED0
0000591A 7600                       		moveq	#0,d3
0000591C 720E                       		moveq	#$E,d1
0000591E                            
0000591E                            loc_4ED0:
0000591E 1401                       		move.b	d1,d2
00005920 0202 0001                  		andi.b	#1,d2
00005924                            
00005924                            Obj80_MiniSonLoop:
00005924 12BC 0080                  		move.b	#$80,0(a1)	; load mini Sonic object
00005928 335A 0008                  		move.w	(a2)+,8(a1)
0000592C 4A02                       		tst.b	d2
0000592E 6700                       		beq.s	loc_4EEA
00005930 0469 000A 0008             		subi.w	#$A,8(a1)
00005936                            
00005936                            loc_4EEA:
00005936 337C 00D0 000A             		move.w	#$D0,$A(a1)
0000593C 137C 0006 001A             		move.b	#6,$1A(a1)
00005942 137C 0006 0024             		move.b	#6,$24(a1)
00005948 237C 0000 0000 0004        		move.l	#Map_obj80,4(a1)
00005950 337C 8551 0002             		move.w	#$8551,2(a1)
00005956 137C 0000 0001             		move.b	#0,1(a1)
0000595C 43E9 0040                  		lea	$40(a1),a1
00005960 51C9 FFC2                  		dbf	d1,Obj80_MiniSonLoop ; repeat for number of continues
00005964 43E9 FFC0                  		lea	-$40(a1),a1
00005968 1343 0028                  		move.b	d3,$28(a1)
0000596C                            
0000596C                            Obj80_ChkType:				; XREF: Obj80_Index
0000596C 4A28 0028                  		tst.b	$28(a0)
00005970 6700                       		beq.s	loc_4F40
00005972 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00005978 6500                       		bcs.s	loc_4F40
0000597A 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000597E 0200 0001                  		andi.b	#1,d0
00005982 6600                       		bne.s	loc_4F40
00005984 4A78 D010                  		tst.w	($FFFFD010).w
00005988 6600                       		bne.s	Obj80_Delete
0000598A 4E75                       		rts	
0000598C                            ; ===========================================================================
0000598C                            
0000598C                            loc_4F40:				; XREF: Obj80_ChkType
0000598C 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00005990 0200 000F                  		andi.b	#$F,d0
00005994 6600                       		bne.s	Obj80_Display2
00005996 0868 0000 001A             		bchg	#0,$1A(a0)
0000599C                            
0000599C                            Obj80_Display2:
0000599C 4EF9 0000 0000             		jmp	DisplaySprite
000059A2                            ; ===========================================================================
000059A2                            
000059A2                            Obj80_Delete:				; XREF: Obj80_ChkType
000059A2 4EF9 0000 0000             		jmp	DeleteObject
000059A8                            ; ===========================================================================
000059A8                            
000059A8                            ; ---------------------------------------------------------------------------
000059A8                            ; Object 81 - Sonic on the continue screen
000059A8                            ; ---------------------------------------------------------------------------
000059A8                            
000059A8                            Obj81:					; XREF: Obj_Index
000059A8 7000                       		moveq	#0,d0
000059AA 1028 0024                  		move.b	$24(a0),d0
000059AE 323B 0000                  		move.w	Obj81_Index(pc,d0.w),d1
000059B2 4EBB 1000                  		jsr	Obj81_Index(pc,d1.w)
000059B6 4EF9 0000 0000             		jmp	DisplaySprite
000059BC                            ; ===========================================================================
000059BC 0000                       Obj81_Index:	dc.w Obj81_Main-Obj81_Index
000059BE 0000                       		dc.w Obj81_ChkLand-Obj81_Index
000059C0 0000                       		dc.w Obj81_Animate-Obj81_Index
000059C2 0000                       		dc.w Obj81_Run-Obj81_Index
000059C4                            ; ===========================================================================
000059C4                            
000059C4                            Obj81_Main:				; XREF: Obj81_Index
000059C4 5428 0024                  		addq.b	#2,$24(a0)
000059C8 317C 00A0 0008             		move.w	#$A0,8(a0)
000059CE 317C 00C0 000C             		move.w	#$C0,$C(a0)
000059D4 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
000059DC 317C 0780 0002             		move.w	#$780,2(a0)
000059E2 117C 0004 0001             		move.b	#4,1(a0)
000059E8 117C 0002 0018             		move.b	#2,$18(a0)
000059EE 117C 001D 001C             		move.b	#$1D,$1C(a0)	; use "floating" animation
000059F4 317C 0400 0012             		move.w	#$400,$12(a0)	; make Sonic fall from above
000059FA                            
000059FA                            Obj81_ChkLand:				; XREF: Obj81_Index
000059FA 0C68 01A0 000C             		cmpi.w	#$1A0,$C(a0)	; has Sonic landed yet?
00005A00 6600                       		bne.s	Obj81_ShowFall	; if not, branch
00005A02 5428 0024                  		addq.b	#2,$24(a0)
00005A06 4268 0012                  		clr.w	$12(a0)		; stop Sonic falling
00005A0A 217C 0000 0000 0004        		move.l	#Map_obj80,4(a0)
00005A12 317C 8500 0002             		move.w	#$8500,2(a0)
00005A18 117C 0000 001C             		move.b	#0,$1C(a0)
00005A1E 6000                       		bra.s	Obj81_Animate
00005A20                            ; ===========================================================================
00005A20                            
00005A20                            Obj81_ShowFall:				; XREF: Obj81_ChkLand
00005A20 4EB9 0000 0000             		jsr	SpeedToPos
00005A26 4EB9 0000 0000             		jsr	Sonic_Animate
00005A2C 4EF9 0000 0000             		jmp	LoadSonicDynPLC
00005A32                            ; ===========================================================================
00005A32                            
00005A32                            Obj81_Animate:				; XREF: Obj81_Index
00005A32 4A38 F605                  		tst.b	($FFFFF605).w	; is any button	pressed?
00005A36 6B00                       		bmi.s	Obj81_GetUp	; if yes, branch
00005A38 43F9 0000 0000             		lea	(Ani_obj81).l,a1
00005A3E 4EF9 0000 0000             		jmp	AnimateSprite
00005A44                            ; ===========================================================================
00005A44                            
00005A44                            Obj81_GetUp:				; XREF: Obj81_Animate
00005A44 5428 0024                  		addq.b	#2,$24(a0)
00005A48 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
00005A50 317C 0780 0002             		move.w	#$780,2(a0)
00005A56 117C 001E 001C             		move.b	#$1E,$1C(a0)	; use "getting up" animation
00005A5C 4268 0014                  		clr.w	$14(a0)
00005A60 5168 000C                  		subq.w	#8,$C(a0)
00005A64 103C 00E0                  		move.b	#$E0,d0
00005A68 6100 BA12                  		bsr.w	PlaySound_Special ; fade out music
00005A6C                            
00005A6C                            Obj81_Run:				; XREF: Obj81_Index
00005A6C 0C68 0800 0014             		cmpi.w	#$800,$14(a0)	; check	Sonic's "run speed" (not moving)
00005A72 6600                       		bne.s	Obj81_AddSpeed	; if too low, branch
00005A74 317C 1000 0010             		move.w	#$1000,$10(a0)	; move Sonic to	the right
00005A7A 6000                       		bra.s	Obj81_ShowRun
00005A7C                            ; ===========================================================================
00005A7C                            
00005A7C                            Obj81_AddSpeed:				; XREF: Obj81_Run
00005A7C 0668 0020 0014             		addi.w	#$20,$14(a0)	; increase "run	speed"
00005A82                            
00005A82                            Obj81_ShowRun:				; XREF: Obj81_Run
00005A82 4EB9 0000 0000             		jsr	SpeedToPos
00005A88 4EB9 0000 0000             		jsr	Sonic_Animate
00005A8E 4EF9 0000 0000             		jmp	LoadSonicDynPLC
00005A94                            ; ===========================================================================
00005A94                            Ani_obj81:
00005A94                            	include "_anim\obj81.asm"
00005A94                            ; ---------------------------------------------------------------------------
00005A94                            ; Animation script - Sonic on the continue screen
00005A94                            ; ---------------------------------------------------------------------------
00005A94 0000                       		dc.w byte_504A-Ani_obj81
00005A96 0401 0101 0102 0202 0303+  byte_504A:	dc.b 4,	1, 1, 1, 1, 2, 2, 2, 3,	3, $FF
00005AA2 00                         		even
00005AA2 00                         		even
00005AA2                            
00005AA2                            ; ---------------------------------------------------------------------------
00005AA2                            ; Sprite mappings - Continue screen
00005AA2                            ; ---------------------------------------------------------------------------
00005AA2                            Map_obj80:
00005AA2                            	include "_maps\obj80.asm"
00005AA2                            ; ---------------------------------------------------------------------------
00005AA2                            ; Sprite mappings - Continue screen
00005AA2                            ; ---------------------------------------------------------------------------
00005AA2 0000 0000                  		dc.w byte_5066-Map_obj80, byte_509E-Map_obj80
00005AA6 0000 0000                  		dc.w byte_50AE-Map_obj80, byte_50BE-Map_obj80
00005AAA 0000 0000                  		dc.w byte_50CE-Map_obj80, byte_50D9-Map_obj80
00005AAE 0000 0000                  		dc.w byte_50D9-Map_obj80, byte_50DF-Map_obj80
00005AB2 0B                         byte_5066:	dc.b $B
00005AB3 F805 0088 C4               		dc.b $F8, 5, 0,	$88, $C4 ; "CONTINUE", stars and countdown
00005AB8 F805 00B2 D4               		dc.b $F8, 5, 0,	$B2, $D4
00005ABD F805 00AE E4               		dc.b $F8, 5, 0,	$AE, $E4
00005AC2 F805 00C2 F4               		dc.b $F8, 5, 0,	$C2, $F4
00005AC7 F801 00A0 04               		dc.b $F8, 1, 0,	$A0, 4
00005ACC F805 00AE 0C               		dc.b $F8, 5, 0,	$AE, $C
00005AD1 F805 00C6 1C               		dc.b $F8, 5, 0,	$C6, $1C
00005AD6 F805 0090 2C               		dc.b $F8, 5, 0,	$90, $2C
00005ADB 3805 2021 E8               		dc.b $38, 5, $20, $21, $E8
00005AE0 3805 2021 08               		dc.b $38, 5, $20, $21, 8
00005AE5 3605 01FC F8               		dc.b $36, 5, 1,	$FC, $F8
00005AEA 03                         byte_509E:	dc.b 3
00005AEB 0405 0015 FC               		dc.b 4,	5, 0, $15, $FC	; Sonic	on floor
00005AF0 F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
00005AF5 F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
00005AFA 03                         byte_50AE:	dc.b 3
00005AFB 0405 0019 FC               		dc.b 4,	5, 0, $19, $FC	; Sonic	on floor #2
00005B00 F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
00005B05 F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
00005B0A 03                         byte_50BE:	dc.b 3
00005B0B 0405 001D FC               		dc.b 4,	5, 0, $1D, $FC	; Sonic	on floor #3
00005B10 F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
00005B15 F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
00005B1A 02                         byte_50CE:	dc.b 2
00005B1B 6009 2000 E8               		dc.b $60, 9, $20, 0, $E8 ; circle on the floor
00005B20 6009 2800 00               		dc.b $60, 9, $28, 0, 0
00005B25 01                         byte_50D9:	dc.b 1
00005B26 0006 0012 00               		dc.b 0,	6, 0, $12, 0	; mini Sonic
00005B2B 01                         byte_50DF:	dc.b 1
00005B2C 0006 0018 00               		dc.b 0,	6, 0, $18, 0	; mini Sonic #2
00005B32 00                         		even
00005B32 00                         		even
00005B32                            
00005B32                            ; ===========================================================================
00005B32                            ; ---------------------------------------------------------------------------
00005B32                            ; Ending sequence in Green Hill	Zone
00005B32                            ; ---------------------------------------------------------------------------
00005B32                            
00005B32                            EndingSequence:				; XREF: GameModeArray
00005B32 103C 00E4                  		move.b	#$E4,d0
00005B36 6100 B944                  		bsr.w	PlaySound_Special ; stop music
00005B3A 6100 C64A                  		bsr.w	Pal_FadeFrom
00005B3E 43F8 D000                  		lea	($FFFFD000).w,a1
00005B42 7000                       		moveq	#0,d0
00005B44 323C 07FF                  		move.w	#$7FF,d1
00005B48                            
00005B48                            End_ClrObjRam:
00005B48 22C0                       		move.l	d0,(a1)+
00005B4A 51C9 FFFC                  		dbf	d1,End_ClrObjRam ; clear object	RAM
00005B4E                            
00005B4E 43F8 F628                  		lea	($FFFFF628).w,a1
00005B52 7000                       		moveq	#0,d0
00005B54 323C 0015                  		move.w	#$15,d1
00005B58                            
00005B58                            End_ClrRam:
00005B58 22C0                       		move.l	d0,(a1)+
00005B5A 51C9 FFFC                  		dbf	d1,End_ClrRam	; clear	variables
00005B5E                            
00005B5E 43F8 F700                  		lea	($FFFFF700).w,a1
00005B62 7000                       		moveq	#0,d0
00005B64 323C 003F                  		move.w	#$3F,d1
00005B68                            
00005B68                            End_ClrRam2:
00005B68 22C0                       		move.l	d0,(a1)+
00005B6A 51C9 FFFC                  		dbf	d1,End_ClrRam2	; clear	variables
00005B6E                            
00005B6E 43F8 FE60                  		lea	($FFFFFE60).w,a1
00005B72 7000                       		moveq	#0,d0
00005B74 323C 0047                  		move.w	#$47,d1
00005B78                            
00005B78                            End_ClrRam3:
00005B78 22C0                       		move.l	d0,(a1)+
00005B7A 51C9 FFFC                  		dbf	d1,End_ClrRam3	; clear	variables
00005B7E                            
00005B7E 46FC 2700                  		move	#$2700,sr
00005B82 3038 F60C                  		move.w	($FFFFF60C).w,d0
00005B86 0200 00BF                  		andi.b	#$BF,d0
00005B8A 33C0 00C0 0004             		move.w	d0,($C00004).l
00005B90 6100 B7F4                  		bsr.w	ClearScreen
00005B94 4DF9 00C0 0004             		lea	($C00004).l,a6
00005B9A 3CBC 8B03                  		move.w	#$8B03,(a6)
00005B9E 3CBC 8230                  		move.w	#$8230,(a6)
00005BA2 3CBC 8407                  		move.w	#$8407,(a6)
00005BA6 3CBC 857C                  		move.w	#$857C,(a6)
00005BAA 3CBC 9001                  		move.w	#$9001,(a6)
00005BAE 3CBC 8004                  		move.w	#$8004,(a6)
00005BB2 3CBC 8720                  		move.w	#$8720,(a6)
00005BB6 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
00005BBC 3CB8 F624                  		move.w	($FFFFF624).w,(a6)
00005BC0 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
00005BC6 31FC 0600 FE10             		move.w	#$600,($FFFFFE10).w ; set level	number to 0600 (extra flowers)
00005BCC 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
00005BD2 6700                       		beq.s	End_LoadData	; if yes, branch
00005BD4 31FC 0601 FE10             		move.w	#$601,($FFFFFE10).w ; set level	number to 0601 (no flowers)
00005BDA                            
00005BDA                            End_LoadData:
00005BDA 701C                       		moveq	#$1C,d0
00005BDC 6100 BC7E                  		bsr.w	RunPLC_ROM	; load ending sequence patterns
00005BE0 4EB9 0000 0000             		jsr	Hud_Base
00005BE6 6100 0000                  		bsr.w	LevelSizeLoad
00005BEA 6100 0000                  		bsr.w	DeformBgLayer
00005BEE 08F8 0002 F754             		bset	#2,($FFFFF754).w
00005BF4 6100 0000                  		bsr.w	MainLoadBlockLoad
00005BF8 6100 0000                  		bsr.w	LoadTilesFromStart
00005BFC 21FC 0000 0000 F796        		move.l	#Col_GHZ,($FFFFF796).w ; load collision	index
00005C04 46FC 2300                  		move	#$2300,sr
00005C08 41F9 0000 0000             		lea	(Kos_EndFlowers).l,a0 ;	load extra flower patterns
00005C0E 43F8 9400                  		lea	($FFFF9400).w,a1 ; RAM address to buffer the patterns
00005C12 6100 BDF8                  		bsr.w	KosDec
00005C16 7003                       		moveq	#3,d0
00005C18 6100 C81A                  		bsr.w	PalLoad1	; load Sonic's pallet
00005C1C 303C 008B                  		move.w	#$8B,d0
00005C20 6100 B854                  		bsr.w	PlaySound	; play ending sequence music
00005C24 0838 0006 F604             		btst	#6,($FFFFF604).w ; is button A pressed?
00005C2A 6700                       		beq.s	End_LoadSonic	; if not, branch
00005C2C 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
00005C32                            
00005C32                            End_LoadSonic:
00005C32 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
00005C38 08F8 0000 D022             		bset	#0,($FFFFD022).w ; make	Sonic face left
00005C3E 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
00005C44 31FC 0400 F602             		move.w	#$400,($FFFFF602).w ; move Sonic to the	left
00005C4A 31FC F800 D014             		move.w	#$F800,($FFFFD014).w ; set Sonic's speed
00005C50 11FC 0021 D040             		move.b	#$21,($FFFFD040).w ; load HUD object
00005C56 4EB9 0000 0000             		jsr	ObjPosLoad
00005C5C 4EB9 0000 0000             		jsr	ObjectsLoad
00005C62 4EB9 0000 0000             		jsr	BuildSprites
00005C68 7000                       		moveq	#0,d0
00005C6A 31C0 FE20                  		move.w	d0,($FFFFFE20).w
00005C6E 21C0 FE22                  		move.l	d0,($FFFFFE22).w
00005C72 11C0 FE1B                  		move.b	d0,($FFFFFE1B).w
00005C76 11C0 FE2C                  		move.b	d0,($FFFFFE2C).w
00005C7A 11C0 FE2D                  		move.b	d0,($FFFFFE2D).w
00005C7E 11C0 FE2E                  		move.b	d0,($FFFFFE2E).w
00005C82 11C0 FE2F                  		move.b	d0,($FFFFFE2F).w
00005C86 31C0 FE08                  		move.w	d0,($FFFFFE08).w
00005C8A 31C0 FE02                  		move.w	d0,($FFFFFE02).w
00005C8E 31C0 FE04                  		move.w	d0,($FFFFFE04).w
00005C92 6100 EECA                  		bsr.w	OscillateNumInit
00005C96 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w
00005C9C 11FC 0001 FE1D             		move.b	#1,($FFFFFE1D).w
00005CA2 11FC 0000 FE1E             		move.b	#0,($FFFFFE1E).w
00005CA8 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
00005CAE 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
00005CB4 6100 D6F2                  		bsr.w	DelayProgram
00005CB8 3038 F60C                  		move.w	($FFFFF60C).w,d0
00005CBC 0000 0040                  		ori.b	#$40,d0
00005CC0 33C0 00C0 0004             		move.w	d0,($C00004).l
00005CC6 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00005CCC 6100 C402                  		bsr.w	Pal_FadeTo
00005CD0                            
00005CD0                            ; ---------------------------------------------------------------------------
00005CD0                            ; Main ending sequence loop
00005CD0                            ; ---------------------------------------------------------------------------
00005CD0                            
00005CD0                            End_MainLoop:
00005CD0 6100 B7B6                  		bsr.w	PauseGame
00005CD4 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
00005CDA 6100 D6CC                  		bsr.w	DelayProgram
00005CDE 5278 FE04                  		addq.w	#1,($FFFFFE04).w
00005CE2 6100 0000                  		bsr.w	End_MoveSonic
00005CE6 4EB9 0000 0000             		jsr	ObjectsLoad
00005CEC 6100 0000                  		bsr.w	DeformBgLayer
00005CF0 4EB9 0000 0000             		jsr	BuildSprites
00005CF6 4EB9 0000 0000             		jsr	ObjPosLoad
00005CFC 6100 BDAE                  		bsr.w	PalCycle_Load
00005D00 6100 EEB2                  		bsr.w	OscillateNumDo
00005D04 6100 EF3E                  		bsr.w	ChangeRingFrame
00005D08 0C38 0018 F600             		cmpi.b	#$18,($FFFFF600).w ; is	scene number $18 (ending)?
00005D0E 6700                       		beq.s	loc_52DA	; if yes, branch
00005D10 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; set scene to $1C (credits)
00005D16 103C 0091                  		move.b	#$91,d0
00005D1A 6100 B760                  		bsr.w	PlaySound_Special ; play credits music
00005D1E 31FC 0000 FFF4             		move.w	#0,($FFFFFFF4).w ; set credits index number to 0
00005D24 4E75                       		rts	
00005D26                            ; ===========================================================================
00005D26                            
00005D26                            loc_52DA:
00005D26 4A78 FE02                  		tst.w	($FFFFFE02).w	; is level set to restart?
00005D2A 6700 FFA4                  		beq.w	End_MainLoop	; if not, branch
00005D2E                            
00005D2E 4278 FE02                  		clr.w	($FFFFFE02).w
00005D32 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00005D38 4278 F794                  		clr.w	($FFFFF794).w
00005D3C                            
00005D3C                            End_AllEmlds:				; XREF: loc_5334
00005D3C 6100 B74A                  		bsr.w	PauseGame
00005D40 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
00005D46 6100 D660                  		bsr.w	DelayProgram
00005D4A 5278 FE04                  		addq.w	#1,($FFFFFE04).w
00005D4E 6100 0000                  		bsr.w	End_MoveSonic
00005D52 4EB9 0000 0000             		jsr	ObjectsLoad
00005D58 6100 0000                  		bsr.w	DeformBgLayer
00005D5C 4EB9 0000 0000             		jsr	BuildSprites
00005D62 4EB9 0000 0000             		jsr	ObjPosLoad
00005D68 6100 EE4A                  		bsr.w	OscillateNumDo
00005D6C 6100 EED6                  		bsr.w	ChangeRingFrame
00005D70 5378 F794                  		subq.w	#1,($FFFFF794).w
00005D74 6A00                       		bpl.s	loc_5334
00005D76 31FC 0002 F794             		move.w	#2,($FFFFF794).w
00005D7C 6100 C556                  		bsr.w	Pal_ToWhite
00005D80                            
00005D80                            loc_5334:
00005D80 4A78 FE02                  		tst.w	($FFFFFE02).w
00005D84 6700 FFB6                  		beq.w	End_AllEmlds
00005D88 4278 FE02                  		clr.w	($FFFFFE02).w
00005D8C 31FC 2E2F A480             		move.w	#$2E2F,($FFFFA480).w ; modify level layout
00005D92 4BF9 00C0 0004             		lea	($C00004).l,a5
00005D98 4DF9 00C0 0000             		lea	($C00000).l,a6
00005D9E 47F8 F700                  		lea	($FFFFF700).w,a3
00005DA2 49F8 A400                  		lea	($FFFFA400).w,a4
00005DA6 343C 4000                  		move.w	#$4000,d2
00005DAA 6100 0000                  		bsr.w	LoadTilesFromStart2
00005DAE 7013                       		moveq	#$13,d0
00005DB0 6100 C682                  		bsr.w	PalLoad1	; load ending pallet
00005DB4 6100 C452                  		bsr.w	Pal_MakeWhite
00005DB8 6000 FF16                  		bra.w	End_MainLoop
00005DBC                            
00005DBC                            ; ---------------------------------------------------------------------------
00005DBC                            ; Subroutine controlling Sonic on the ending sequence
00005DBC                            ; ---------------------------------------------------------------------------
00005DBC                            
00005DBC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005DBC                            
00005DBC                            
00005DBC                            End_MoveSonic:				; XREF: End_MainLoop
00005DBC 1038 F7D7                  		move.b	($FFFFF7D7).w,d0
00005DC0 6600                       		bne.s	End_MoveSonic2
00005DC2 0C78 0090 D008             		cmpi.w	#$90,($FFFFD008).w ; has Sonic passed $90 on y-axis?
00005DC8 6400                       		bcc.s	End_MoveSonExit	; if not, branch
00005DCA 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
00005DCE 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	player's controls
00005DD4 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; move Sonic to the	right
00005DDA 4E75                       		rts	
00005DDC                            ; ===========================================================================
00005DDC                            
00005DDC                            End_MoveSonic2:				; XREF: End_MoveSonic
00005DDC 5500                       		subq.b	#2,d0
00005DDE 6600                       		bne.s	End_MoveSonic3
00005DE0 0C78 00A0 D008             		cmpi.w	#$A0,($FFFFD008).w ; has Sonic passed $A0 on y-axis?
00005DE6 6500                       		bcs.s	End_MoveSonExit	; if not, branch
00005DE8 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
00005DEC 7000                       		moveq	#0,d0
00005DEE 11C0 F7CC                  		move.b	d0,($FFFFF7CC).w
00005DF2 31C0 F602                  		move.w	d0,($FFFFF602).w ; stop	Sonic moving
00005DF6 31C0 D014                  		move.w	d0,($FFFFD014).w
00005DFA 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w
00005E00 11FC 0003 D01A             		move.b	#3,($FFFFD01A).w
00005E06 31FC 0505 D01C             		move.w	#$505,($FFFFD01C).w ; use "standing" animation
00005E0C 11FC 0003 D01E             		move.b	#3,($FFFFD01E).w
00005E12 4E75                       		rts	
00005E14                            ; ===========================================================================
00005E14                            
00005E14                            End_MoveSonic3:				; XREF: End_MoveSonic
00005E14 5500                       		subq.b	#2,d0
00005E16 6600                       		bne.s	End_MoveSonExit
00005E18 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
00005E1C 31FC 00A0 D008             		move.w	#$A0,($FFFFD008).w
00005E22 11FC 0087 D000             		move.b	#$87,($FFFFD000).w ; load Sonic	ending sequence	object
00005E28 4278 D024                  		clr.w	($FFFFD024).w
00005E2C                            
00005E2C                            End_MoveSonExit:
00005E2C 4E75                       		rts	
00005E2E                            ; End of function End_MoveSonic
00005E2E                            
00005E2E                            ; ===========================================================================
00005E2E                            ; ---------------------------------------------------------------------------
00005E2E                            ; Object 87 - Sonic on ending sequence
00005E2E                            ; ---------------------------------------------------------------------------
00005E2E                            
00005E2E                            Obj87:					; XREF: Obj_Index
00005E2E 7000                       		moveq	#0,d0
00005E30 1028 0025                  		move.b	$25(a0),d0
00005E34 323B 0000                  		move.w	Obj87_Index(pc,d0.w),d1
00005E38 4EBB 1000                  		jsr	Obj87_Index(pc,d1.w)
00005E3C 4EF9 0000 0000             		jmp	DisplaySprite
00005E42                            ; ===========================================================================
00005E42 0000 0000                  Obj87_Index:	dc.w Obj87_Main-Obj87_Index, Obj87_MakeEmlds-Obj87_Index
00005E46 0000 0000                  		dc.w Obj87_Animate-Obj87_Index,	Obj87_LookUp-Obj87_Index
00005E4A 0000 0000                  		dc.w Obj87_ClrObjRam-Obj87_Index, Obj87_Animate-Obj87_Index
00005E4E 0000 0000                  		dc.w Obj87_MakeLogo-Obj87_Index, Obj87_Animate-Obj87_Index
00005E52 0000 0000                  		dc.w Obj87_Leap-Obj87_Index, Obj87_Animate-Obj87_Index
00005E56                            ; ===========================================================================
00005E56                            
00005E56                            Obj87_Main:				; XREF: Obj87_Index
00005E56 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
00005E5C 6700                       		beq.s	Obj87_Main2	; if yes, branch
00005E5E 0628 0010 0025             		addi.b	#$10,$25(a0)	; else,	skip emerald sequence
00005E64 317C 00D8 0030             		move.w	#$D8,$30(a0)
00005E6A 4E75                       		rts	
00005E6C                            ; ===========================================================================
00005E6C                            
00005E6C                            Obj87_Main2:				; XREF: Obj87_Main
00005E6C 5428 0025                  		addq.b	#2,$25(a0)
00005E70 217C 0000 0000 0004        		move.l	#Map_obj87,4(a0)
00005E78 317C 03E1 0002             		move.w	#$3E1,2(a0)
00005E7E 117C 0004 0001             		move.b	#4,1(a0)
00005E84 4228 0022                  		clr.b	$22(a0)
00005E88 117C 0002 0018             		move.b	#2,$18(a0)
00005E8E 117C 0000 001A             		move.b	#0,$1A(a0)
00005E94 317C 0050 0030             		move.w	#$50,$30(a0)	; set duration for Sonic to pause
00005E9A                            
00005E9A                            Obj87_MakeEmlds:			; XREF: Obj87_Index
00005E9A 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from duration
00005E9E 6600                       		bne.s	Obj87_Wait
00005EA0 5428 0025                  		addq.b	#2,$25(a0)
00005EA4 317C 0001 001C             		move.w	#1,$1C(a0)
00005EAA 11FC 0088 D400             		move.b	#$88,($FFFFD400).w ; load chaos	emeralds objects
00005EB0                            
00005EB0                            Obj87_Wait:
00005EB0 4E75                       		rts	
00005EB2                            ; ===========================================================================
00005EB2                            
00005EB2                            Obj87_LookUp:				; XREF: Obj87_Index
00005EB2 0C79 2000 00FF D43C        		cmpi.w	#$2000,($FFD43C).l
00005EBA 6600                       		bne.s	locret_5480
00005EBC 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; set level to	restart	(causes	flash)
00005EC2 317C 005A 0030             		move.w	#$5A,$30(a0)
00005EC8 5428 0025                  		addq.b	#2,$25(a0)
00005ECC                            
00005ECC                            locret_5480:
00005ECC 4E75                       		rts	
00005ECE                            ; ===========================================================================
00005ECE                            
00005ECE                            Obj87_ClrObjRam:			; XREF: Obj87_Index
00005ECE 5368 0030                  		subq.w	#1,$30(a0)
00005ED2 6600                       		bne.s	Obj87_Wait2
00005ED4 43F8 D400                  		lea	($FFFFD400).w,a1
00005ED8 323C 00FF                  		move.w	#$FF,d1
00005EDC                            
00005EDC                            Obj87_ClrLoop:
00005EDC 4299                       		clr.l	(a1)+
00005EDE 51C9 FFFC                  		dbf	d1,Obj87_ClrLoop ; clear the object RAM
00005EE2 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w
00005EE8 5428 0025                  		addq.b	#2,$25(a0)
00005EEC 117C 0001 001C             		move.b	#1,$1C(a0)
00005EF2 317C 003C 0030             		move.w	#$3C,$30(a0)
00005EF8                            
00005EF8                            Obj87_Wait2:
00005EF8 4E75                       		rts	
00005EFA                            ; ===========================================================================
00005EFA                            
00005EFA                            Obj87_MakeLogo:				; XREF: Obj87_Index
00005EFA 5368 0030                  		subq.w	#1,$30(a0)
00005EFE 6600                       		bne.s	Obj87_Wait3
00005F00 5428 0025                  		addq.b	#2,$25(a0)
00005F04 317C 00B4 0030             		move.w	#$B4,$30(a0)
00005F0A 117C 0002 001C             		move.b	#2,$1C(a0)
00005F10 11FC 0089 D400             		move.b	#$89,($FFFFD400).w ; load "SONIC THE HEDGEHOG" object
00005F16                            
00005F16                            Obj87_Wait3:
00005F16 4E75                       		rts	
00005F18                            ; ===========================================================================
00005F18                            
00005F18                            Obj87_Animate:				; XREF: Obj87_Index
00005F18 43F9 0000 0000             		lea	(Ani_obj87).l,a1
00005F1E 4EF9 0000 0000             		jmp	AnimateSprite
00005F24                            ; ===========================================================================
00005F24                            
00005F24                            Obj87_Leap:				; XREF: Obj87_Index
00005F24 5368 0030                  		subq.w	#1,$30(a0)
00005F28 6600                       		bne.s	Obj87_Wait4
00005F2A 5428 0025                  		addq.b	#2,$25(a0)
00005F2E 217C 0000 0000 0004        		move.l	#Map_obj87,4(a0)
00005F36 317C 03E1 0002             		move.w	#$3E1,2(a0)
00005F3C 117C 0004 0001             		move.b	#4,1(a0)
00005F42 4228 0022                  		clr.b	$22(a0)
00005F46 117C 0002 0018             		move.b	#2,$18(a0)
00005F4C 117C 0005 001A             		move.b	#5,$1A(a0)
00005F52 117C 0002 001C             		move.b	#2,$1C(a0)	; use "leaping"	animation
00005F58 11FC 0089 D400             		move.b	#$89,($FFFFD400).w ; load "SONIC THE HEDGEHOG" object
00005F5E 60B8                       		bra.s	Obj87_Animate
00005F60                            ; ===========================================================================
00005F60                            
00005F60                            Obj87_Wait4:				; XREF: Obj87_Leap
00005F60 4E75                       		rts	
00005F62                            ; ===========================================================================
00005F62                            Ani_obj87:
00005F62                            	include "_anim\obj87.asm"
00005F62                            ; ---------------------------------------------------------------------------
00005F62                            ; Animation script - Sonic on the ending sequence
00005F62                            ; ---------------------------------------------------------------------------
00005F62 0000                       		dc.w byte_551C-Ani_obj87
00005F64 0000                       		dc.w byte_552A-Ani_obj87
00005F66 0000                       		dc.w byte_5534-Ani_obj87
00005F68 0301 0001 0001 0001 0001+  byte_551C:	dc.b 3,	1, 0, 1, 0, 1, 0, 1, 0,	1, 0, 1, 2, $FA
00005F76 0503 0403 0403 0403 FA00   byte_552A:	dc.b 5,	3, 4, 3, 4, 3, 4, 3, $FA, 0
00005F80 0305 0505 0607 FE01        byte_5534:	dc.b 3,	5, 5, 5, 6, 7, $FE, 1
00005F88                            		even
00005F88                            		even
00005F88                            
00005F88                            ; ===========================================================================
00005F88                            ; ---------------------------------------------------------------------------
00005F88                            ; Object 88 - chaos emeralds on	the ending sequence
00005F88                            ; ---------------------------------------------------------------------------
00005F88                            
00005F88                            Obj88:					; XREF: Obj_Index
00005F88 7000                       		moveq	#0,d0
00005F8A 1028 0024                  		move.b	$24(a0),d0
00005F8E 323B 0000                  		move.w	Obj88_Index(pc,d0.w),d1
00005F92 4EBB 1000                  		jsr	Obj88_Index(pc,d1.w)
00005F96 4EF9 0000 0000             		jmp	DisplaySprite
00005F9C                            ; ===========================================================================
00005F9C 0000                       Obj88_Index:	dc.w Obj88_Main-Obj88_Index
00005F9E 0000                       		dc.w Obj88_Move-Obj88_Index
00005FA0                            ; ===========================================================================
00005FA0                            
00005FA0                            Obj88_Main:				; XREF: Obj88_Index
00005FA0 0C38 0002 D01A             		cmpi.b	#2,($FFFFD01A).w
00005FA6 6700                       		beq.s	Obj88_Main2
00005FA8 588F                       		addq.l	#4,sp
00005FAA 4E75                       		rts	
00005FAC                            ; ===========================================================================
00005FAC                            
00005FAC                            Obj88_Main2:				; XREF: Obj88_Main
00005FAC 3178 D008 0008             		move.w	($FFFFD008).w,8(a0) ; match X position with Sonic
00005FB2 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0) ; match Y position	with Sonic
00005FB8 2248                       		movea.l	a0,a1
00005FBA 7600                       		moveq	#0,d3
00005FBC 7401                       		moveq	#1,d2
00005FBE 7205                       		moveq	#5,d1
00005FC0                            
00005FC0                            Obj88_MainLoop:
00005FC0 12BC 0088                  		move.b	#$88,(a1)	; load chaos emerald object
00005FC4 5429 0024                  		addq.b	#2,$24(a1)
00005FC8 237C 0000 0000 0004        		move.l	#Map_obj88,4(a1)
00005FD0 337C 03C5 0002             		move.w	#$3C5,2(a1)
00005FD6 137C 0004 0001             		move.b	#4,1(a1)
00005FDC 137C 0001 0018             		move.b	#1,$18(a1)
00005FE2 3368 0008 0038             		move.w	8(a0),$38(a1)
00005FE8 3368 000C 003A             		move.w	$C(a0),$3A(a1)
00005FEE 1342 001C                  		move.b	d2,$1C(a1)
00005FF2 1342 001A                  		move.b	d2,$1A(a1)
00005FF6 5202                       		addq.b	#1,d2
00005FF8 1343 0026                  		move.b	d3,$26(a1)
00005FFC 0603 002A                  		addi.b	#$2A,d3
00006000 43E9 0040                  		lea	$40(a1),a1
00006004 51C9 FFBA                  		dbf	d1,Obj88_MainLoop ; repeat 5 more times
00006008                            
00006008                            Obj88_Move:				; XREF: Obj88_Index
00006008 3028 003E                  		move.w	$3E(a0),d0
0000600C D168 0026                  		add.w	d0,$26(a0)
00006010 1028 0026                  		move.b	$26(a0),d0
00006014 4EB9 0000 33DA             		jsr	(CalcSine).l
0000601A 7800                       		moveq	#0,d4
0000601C 1828 003C                  		move.b	$3C(a0),d4
00006020 C3C4                       		muls.w	d4,d1
00006022 E081                       		asr.l	#8,d1
00006024 C1C4                       		muls.w	d4,d0
00006026 E080                       		asr.l	#8,d0
00006028 D268 0038                  		add.w	$38(a0),d1
0000602C D068 003A                  		add.w	$3A(a0),d0
00006030 3141 0008                  		move.w	d1,8(a0)
00006034 3140 000C                  		move.w	d0,$C(a0)
00006038 0C68 2000 003C             		cmpi.w	#$2000,$3C(a0)
0000603E 6700                       		beq.s	loc_55FA
00006040 0668 0020 003C             		addi.w	#$20,$3C(a0)
00006046                            
00006046                            loc_55FA:
00006046 0C68 2000 003E             		cmpi.w	#$2000,$3E(a0)
0000604C 6700                       		beq.s	loc_5608
0000604E 0668 0020 003E             		addi.w	#$20,$3E(a0)
00006054                            
00006054                            loc_5608:
00006054 0C68 0140 003A             		cmpi.w	#$140,$3A(a0)
0000605A 6700                       		beq.s	locret_5614
0000605C 5368 003A                  		subq.w	#1,$3A(a0)
00006060                            
00006060                            locret_5614:
00006060 4E75                       		rts	
00006062                            ; ===========================================================================
00006062                            ; ---------------------------------------------------------------------------
00006062                            ; Object 89 - "SONIC THE HEDGEHOG" text	on the ending sequence
00006062                            ; ---------------------------------------------------------------------------
00006062                            
00006062                            Obj89:					; XREF: Obj_Index
00006062 7000                       		moveq	#0,d0
00006064 1028 0024                  		move.b	$24(a0),d0
00006068 323B 0000                  		move.w	Obj89_Index(pc,d0.w),d1
0000606C 4EFB 1000                  		jmp	Obj89_Index(pc,d1.w)
00006070                            ; ===========================================================================
00006070 0000                       Obj89_Index:	dc.w Obj89_Main-Obj89_Index
00006072 0000                       		dc.w Obj89_Move-Obj89_Index
00006074 0000                       		dc.w Obj89_GotoCredits-Obj89_Index
00006076                            ; ===========================================================================
00006076                            
00006076                            Obj89_Main:				; XREF: Obj89_Index
00006076 5428 0024                  		addq.b	#2,$24(a0)
0000607A 317C FFE0 0008             		move.w	#-$20,8(a0)	; object starts	outside	the level boundary
00006080 317C 00D8 000A             		move.w	#$D8,$A(a0)
00006086 217C 0000 0000 0004        		move.l	#Map_obj89,4(a0)
0000608E 317C 05C5 0002             		move.w	#$5C5,2(a0)
00006094 117C 0000 0001             		move.b	#0,1(a0)
0000609A 117C 0000 0018             		move.b	#0,$18(a0)
000060A0                            
000060A0                            Obj89_Move:				; XREF: Obj89_Index
000060A0 0C68 00C0 0008             		cmpi.w	#$C0,8(a0)	; has object reached $C0?
000060A6 6700                       		beq.s	Obj89_Delay	; if yes, branch
000060A8 0668 0010 0008             		addi.w	#$10,8(a0)	; move object to the right
000060AE 6000 A250                  		bra.w	jmp_DisplaySprite
000060B2                            ; ===========================================================================
000060B2                            
000060B2                            Obj89_Delay:				; XREF: Obj89_Move
000060B2 5428 0024                  		addq.b	#2,$24(a0)
000060B6 317C 0078 0030             		move.w	#120,$30(a0)	; set duration for delay (2 seconds)
000060BC                            
000060BC                            Obj89_GotoCredits:			; XREF: Obj89_Index
000060BC 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from duration
000060C0 6A00                       		bpl.s	Obj89_Display
000060C2 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; exit to credits
000060C8                            
000060C8                            Obj89_Display:
000060C8 6000 A236                  		bra.w	jmp_DisplaySprite
000060CC                            ; ===========================================================================
000060CC                            ; ---------------------------------------------------------------------------
000060CC                            ; Sprite mappings - Sonic on the ending	sequence
000060CC                            ; ---------------------------------------------------------------------------
000060CC                            Map_obj87:
000060CC                            	include "_maps\obj87.asm"
000060CC                            ; ---------------------------------------------------------------------------
000060CC                            ; Sprite mappings - Sonic on the ending	sequence
000060CC                            ; ---------------------------------------------------------------------------
000060CC 0000 0000                  		dc.w byte_5690-Map_obj87, byte_569B-Map_obj87
000060D0 0000 0000                  		dc.w byte_56AB-Map_obj87, byte_56B6-Map_obj87
000060D4 0000 0000                  		dc.w byte_56C1-Map_obj87, byte_56CC-Map_obj87
000060D8 0000 0000                  		dc.w byte_56DC-Map_obj87, byte_5700-Map_obj87
000060DC 02                         byte_5690:	dc.b 2
000060DD EC0B 0000 F8               		dc.b $EC, $B, 0, 0, $F8	; holding emeralds
000060E2 0C0C 000C F0               		dc.b $C, $C, 0,	$C, $F0
000060E7 03                         byte_569B:	dc.b 3
000060E8 FC0D 0010 F0               		dc.b $FC, $D, 0, $10, $F0 ; holding emeralds (glowing)
000060ED EC0B 0000 F8               		dc.b $EC, $B, 0, 0, $F8
000060F2 0C0C 000C F0               		dc.b $C, $C, 0,	$C, $F0
000060F7 02                         byte_56AB:	dc.b 2
000060F8 EC09 0018 F8               		dc.b $EC, 9, 0,	$18, $F8 ; looking up
000060FD FC0E 001E F0               		dc.b $FC, $E, 0, $1E, $F0
00006102 02                         byte_56B6:	dc.b 2
00006103 EC09 002A F8               		dc.b $EC, 9, 0,	$2A, $F8 ; confused
00006108 FC0E 0030 F0               		dc.b $FC, $E, 0, $30, $F0
0000610D 02                         byte_56C1:	dc.b 2
0000610E EC09 082A F0               		dc.b $EC, 9, 8,	$2A, $F0 ; confused #2
00006113 FC0E 0830 F0               		dc.b $FC, $E, 8, $30, $F0
00006118 03                         byte_56CC:	dc.b 3
00006119 EC06 003C F0               		dc.b $EC, 6, 0,	$3C, $F0 ; leaping
0000611E EC06 083C 00               		dc.b $EC, 6, 8,	$3C, 0
00006123 040D 0042 F0               		dc.b 4,	$D, 0, $42, $F0
00006128 07                         byte_56DC:	dc.b 7
00006129 B20C 004A F8               		dc.b $B2, $C, 0, $4A, $F8 ; leaping #2
0000612E BA0F 004E F0               		dc.b $BA, $F, 0, $4E, $F0
00006133 BA05 005E 10               		dc.b $BA, 5, 0,	$5E, $10
00006138 CA02 0062 10               		dc.b $CA, 2, 0,	$62, $10
0000613D DA0C 0065 F0               		dc.b $DA, $C, 0, $65, $F0
00006142 E208 0069 F8               		dc.b $E2, 8, 0,	$69, $F8
00006147 EA05 006C F8               		dc.b $EA, 5, 0,	$6C, $F8
0000614C 18                         byte_5700:	dc.b $18
0000614D 800F 0070 F8               		dc.b $80, $F, 0, $70, $F8 ; leaping #3
00006152 900B 0080 E0               		dc.b $90, $B, 0, $80, $E0
00006157 900B 008C 18               		dc.b $90, $B, 0, $8C, $18
0000615C 980B 0098 30               		dc.b $98, $B, 0, $98, $30
00006161 A00F 00A4 58               		dc.b $A0, $F, 0, $A4, $58
00006166 8800 00B4 F0               		dc.b $88, 0, 0,	$B4, $F0
0000616B 8005 00B5 18               		dc.b $80, 5, 0,	$B5, $18
00006170 A00F 00B9 F8               		dc.b $A0, $F, 0, $B9, $F8
00006175 B00B 00C9 E0               		dc.b $B0, $B, 0, $C9, $E0
0000617A B80F 00D5 38               		dc.b $B8, $F, 0, $D5, $38
0000617F A805 00E5 48               		dc.b $A8, 5, 0,	$E5, $48
00006184 C002 00E9 58               		dc.b $C0, 2, 0,	$E9, $58
00006189 C00F 00EC F8               		dc.b $C0, $F, 0, $EC, $F8
0000618E B80F 00FC 18               		dc.b $B8, $F, 0, $FC, $18
00006193 B008 010C 18               		dc.b $B0, 8, 1,	$C, $18
00006198 D80D 010F 30               		dc.b $D8, $D, 1, $F, $30
0000619D D808 0117 18               		dc.b $D8, 8, 1,	$17, $18
000061A2 D80F 011A D8               		dc.b $D8, $F, 1, $1A, $D8
000061A7 E00D 012A F8               		dc.b $E0, $D, 1, $2A, $F8
000061AC E000 0132 28               		dc.b $E0, 0, 1,	$32, $28
000061B1 D004 0133 E0               		dc.b $D0, 4, 1,	$33, $E0
000061B6 E805 0135 C8               		dc.b $E8, 5, 1,	$35, $C8
000061BB F80C 0139 C8               		dc.b $F8, $C, 1, $39, $C8
000061C0 F006 013D F8               		dc.b $F0, 6, 1,	$3D, $F8
000061C6 00                         		even
000061C6 00                         		even
000061C6                            
000061C6                            ; ---------------------------------------------------------------------------
000061C6                            ; Sprite mappings - chaos emeralds on the ending sequence
000061C6                            ; ---------------------------------------------------------------------------
000061C6                            Map_obj88:
000061C6                            	include "_maps\obj88.asm"
000061C6                            ; ---------------------------------------------------------------------------
000061C6                            ; Sprite mappings - chaos emeralds on the ending sequence
000061C6                            ; ---------------------------------------------------------------------------
000061C6 0000 0000                  		dc.w byte_5788-Map_obj88, byte_578E-Map_obj88
000061CA 0000 0000                  		dc.w byte_5794-Map_obj88, byte_579A-Map_obj88
000061CE 0000 0000                  		dc.w byte_57A0-Map_obj88, byte_57A6-Map_obj88
000061D2 0000                       		dc.w byte_57AC-Map_obj88
000061D4 01                         byte_5788:	dc.b 1
000061D5 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
000061DA 01                         byte_578E:	dc.b 1
000061DB F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
000061E0 01                         byte_5794:	dc.b 1
000061E1 F805 4010 F8               		dc.b $F8, 5, $40, $10, $F8
000061E6 01                         byte_579A:	dc.b 1
000061E7 F805 2018 F8               		dc.b $F8, 5, $20, $18, $F8
000061EC 01                         byte_57A0:	dc.b 1
000061ED F805 4014 F8               		dc.b $F8, 5, $40, $14, $F8
000061F2 01                         byte_57A6:	dc.b 1
000061F3 F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
000061F8 01                         byte_57AC:	dc.b 1
000061F9 F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
000061FE                            		even
000061FE                            		even
000061FE                            
000061FE                            ; ---------------------------------------------------------------------------
000061FE                            ; Sprite mappings - "SONIC THE HEDGEHOG" text on the ending sequence
000061FE                            ; ---------------------------------------------------------------------------
000061FE                            Map_obj89:
000061FE                            	include "_maps\obj89.asm"
000061FE                            ; ---------------------------------------------------------------------------
000061FE                            ; Sprite mappings - "SONIC THE HEDGEHOG" text on the ending sequence
000061FE                            ; ---------------------------------------------------------------------------
000061FE 0000                       		dc.w byte_57B4-Map_obj89
00006200 03                         byte_57B4:	dc.b 3
00006201 F00F 0000 D0               		dc.b $F0, $F, 0, 0, $D0
00006206 F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
0000620B F00F 0020 10               		dc.b $F0, $F, 0, $20, $10
00006210                            		even
00006210                            		even
00006210                            
00006210                            ; ===========================================================================
00006210                            ; ---------------------------------------------------------------------------
00006210                            ; Credits ending sequence
00006210                            ; ---------------------------------------------------------------------------
00006210                            
00006210                            Credits:				; XREF: GameModeArray
00006210 6100 B53C                  		bsr.w	ClearPLC
00006214 6100 BF70                  		bsr.w	Pal_FadeFrom
00006218 4DF9 00C0 0004             		lea	($C00004).l,a6
0000621E 3CBC 8004                  		move.w	#$8004,(a6)
00006222 3CBC 8230                  		move.w	#$8230,(a6)
00006226 3CBC 8407                  		move.w	#$8407,(a6)
0000622A 3CBC 9001                  		move.w	#$9001,(a6)
0000622E 3CBC 9200                  		move.w	#$9200,(a6)
00006232 3CBC 8B03                  		move.w	#$8B03,(a6)
00006236 3CBC 8720                  		move.w	#$8720,(a6)
0000623A 4238 F64E                  		clr.b	($FFFFF64E).w
0000623E 6100 B146                  		bsr.w	ClearScreen
00006242 43F8 D000                  		lea	($FFFFD000).w,a1
00006246 7000                       		moveq	#0,d0
00006248 323C 07FF                  		move.w	#$7FF,d1
0000624C                            
0000624C                            Cred_ClrObjRam:
0000624C 22C0                       		move.l	d0,(a1)+
0000624E 51C9 FFFC                  		dbf	d1,Cred_ClrObjRam ; clear object RAM
00006252                            
00006252 23FC 7400 0002 00C0 0004   		move.l	#$74000002,($C00004).l
0000625C 41F9 0000 0000             		lea	(Nem_CreditText).l,a0 ;	load credits alphabet patterns
00006262 6100 B34C                  		bsr.w	NemDec
00006266 43F8 FB80                  		lea	($FFFFFB80).w,a1
0000626A 7000                       		moveq	#0,d0
0000626C 323C 001F                  		move.w	#$1F,d1
00006270                            
00006270                            Cred_ClrPallet:
00006270 22C0                       		move.l	d0,(a1)+
00006272 51C9 FFFC                  		dbf	d1,Cred_ClrPallet ; fill pallet	with black ($0000)
00006276                            
00006276 7003                       		moveq	#3,d0
00006278 6100 C1BA                  		bsr.w	PalLoad1	; load Sonic's pallet
0000627C 11FC 008A D080             		move.b	#$8A,($FFFFD080).w ; load credits object
00006282 4EB9 0000 0000             		jsr	ObjectsLoad
00006288 4EB9 0000 0000             		jsr	BuildSprites
0000628E 6100 0000                  		bsr.w	EndingDemoLoad
00006292 7000                       		moveq	#0,d0
00006294 1038 FE10                  		move.b	($FFFFFE10).w,d0
00006298 E948                       		lsl.w	#4,d0
0000629A 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2 ;	load block mappings etc
000062A0 45F2 0000                  		lea	(a2,d0.w),a2
000062A4 7000                       		moveq	#0,d0
000062A6 1012                       		move.b	(a2),d0
000062A8 6700                       		beq.s	loc_5862
000062AA 6100 B444                  		bsr.w	LoadPLC		; load level patterns
000062AE                            
000062AE                            loc_5862:
000062AE 7001                       		moveq	#1,d0
000062B0 6100 B43E                  		bsr.w	LoadPLC		; load standard	level patterns
000062B4 31FC 0078 F614             		move.w	#120,($FFFFF614).w ; display a credit for 2 seconds
000062BA 6100 BE14                  		bsr.w	Pal_FadeTo
000062BE                            
000062BE                            Cred_WaitLoop:
000062BE 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
000062C4 6100 D0E2                  		bsr.w	DelayProgram
000062C8 6100 B492                  		bsr.w	RunPLC_RAM
000062CC 4A78 F614                  		tst.w	($FFFFF614).w	; have 2 seconds elapsed?
000062D0 66EC                       		bne.s	Cred_WaitLoop	; if not, branch
000062D2 4AB8 F680                  		tst.l	($FFFFF680).w	; have level gfx finished decompressing?
000062D6 66E6                       		bne.s	Cred_WaitLoop	; if not, branch
000062D8 0C78 0009 FFF4             		cmpi.w	#9,($FFFFFFF4).w ; have	the credits finished?
000062DE 6700 0000                  		beq.w	TryAgainEnd	; if yes, branch
000062E2 4E75                       		rts	
000062E4                            
000062E4                            ; ---------------------------------------------------------------------------
000062E4                            ; Ending sequence demo loading subroutine
000062E4                            ; ---------------------------------------------------------------------------
000062E4                            
000062E4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000062E4                            
000062E4                            
000062E4                            EndingDemoLoad:				; XREF: Credits
000062E4 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
000062E8 0240 000F                  		andi.w	#$F,d0
000062EC D040                       		add.w	d0,d0
000062EE 303B 0000                  		move.w	EndDemo_Levels(pc,d0.w),d0 ; load level	array
000062F2 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level from level	array
000062F6 5278 FFF4                  		addq.w	#1,($FFFFFFF4).w
000062FA 0C78 0009 FFF4             		cmpi.w	#9,($FFFFFFF4).w ; have	credits	finished?
00006300 6400                       		bcc.s	EndDemo_Exit	; if yes, branch
00006302 31FC 8001 FFF0             		move.w	#$8001,($FFFFFFF0).w ; force demo mode
00006308 11FC 0008 F600             		move.b	#8,($FFFFF600).w ; set game mode to 08 (demo)
0000630E 11FC 0003 FE12             		move.b	#3,($FFFFFE12).w ; set lives to	3
00006314 7000                       		moveq	#0,d0
00006316 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
0000631A 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
0000631E 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00006322 11C0 FE30                  		move.b	d0,($FFFFFE30).w ; clear lamppost counter
00006326 0C78 0004 FFF4             		cmpi.w	#4,($FFFFFFF4).w ; is SLZ demo running?
0000632C 6600                       		bne.s	EndDemo_Exit	; if not, branch
0000632E 43F9 0000 0000             		lea	(EndDemo_LampVar).l,a1 ; load lamppost variables
00006334 45F8 FE30                  		lea	($FFFFFE30).w,a2
00006338 303C 0008                  		move.w	#8,d0
0000633C                            
0000633C                            EndDemo_LampLoad:
0000633C 24D9                       		move.l	(a1)+,(a2)+
0000633E 51C8 FFFC                  		dbf	d0,EndDemo_LampLoad
00006342                            
00006342                            EndDemo_Exit:
00006342 4E75                       		rts	
00006344                            ; End of function EndingDemoLoad
00006344                            
00006344                            ; ===========================================================================
00006344                            ; ---------------------------------------------------------------------------
00006344                            ; Levels used in the end sequence demos
00006344                            ; ---------------------------------------------------------------------------
00006344                            EndDemo_Levels:	incbin	misc\dm_ord2.bin
00006354                            
00006354                            ; ---------------------------------------------------------------------------
00006354                            ; Lamppost variables in the end sequence demo (Star Light Zone)
00006354                            ; ---------------------------------------------------------------------------
00006354                            EndDemo_LampVar:
00006354 0101                       		dc.b 1,	1		; XREF: EndingDemoLoad
00006356 0A00 062C 000D             		dc.w $A00, $62C, $D
0000635C 0000 0000                  		dc.l 0
00006360 0000                       		dc.b 0,	0
00006362 0800 0957 05CC 04AB 03A6+  		dc.w $800, $957, $5CC, $4AB, $3A6, 0, $28C, 0, 0, $308
00006376 0101                       		dc.b 1,	1
00006378                            ; ===========================================================================
00006378                            ; ---------------------------------------------------------------------------
00006378                            ; "TRY AGAIN" and "END"	screens
00006378                            ; ---------------------------------------------------------------------------
00006378                            
00006378                            TryAgainEnd:				; XREF: Credits
00006378 6100 B3D4                  		bsr.w	ClearPLC
0000637C 6100 BE08                  		bsr.w	Pal_FadeFrom
00006380 4DF9 00C0 0004             		lea	($C00004).l,a6
00006386 3CBC 8004                  		move.w	#$8004,(a6)
0000638A 3CBC 8230                  		move.w	#$8230,(a6)
0000638E 3CBC 8407                  		move.w	#$8407,(a6)
00006392 3CBC 9001                  		move.w	#$9001,(a6)
00006396 3CBC 9200                  		move.w	#$9200,(a6)
0000639A 3CBC 8B03                  		move.w	#$8B03,(a6)
0000639E 3CBC 8720                  		move.w	#$8720,(a6)
000063A2 4238 F64E                  		clr.b	($FFFFF64E).w
000063A6 6100 AFDE                  		bsr.w	ClearScreen
000063AA 43F8 D000                  		lea	($FFFFD000).w,a1
000063AE 7000                       		moveq	#0,d0
000063B0 323C 07FF                  		move.w	#$7FF,d1
000063B4                            
000063B4                            TryAg_ClrObjRam:
000063B4 22C0                       		move.l	d0,(a1)+
000063B6 51C9 FFFC                  		dbf	d1,TryAg_ClrObjRam ; clear object RAM
000063BA                            
000063BA 701D                       		moveq	#$1D,d0
000063BC 6100 B49E                  		bsr.w	RunPLC_ROM	; load "TRY AGAIN" or "END" patterns
000063C0 43F8 FB80                  		lea	($FFFFFB80).w,a1
000063C4 7000                       		moveq	#0,d0
000063C6 323C 001F                  		move.w	#$1F,d1
000063CA                            
000063CA                            TryAg_ClrPallet:
000063CA 22C0                       		move.l	d0,(a1)+
000063CC 51C9 FFFC                  		dbf	d1,TryAg_ClrPallet ; fill pallet with black ($0000)
000063D0                            
000063D0 7013                       		moveq	#$13,d0
000063D2 6100 C060                  		bsr.w	PalLoad1	; load ending pallet
000063D6 4278 FBC0                  		clr.w	($FFFFFBC0).w
000063DA 11FC 008B D080             		move.b	#$8B,($FFFFD080).w ; load Eggman object
000063E0 4EB9 0000 0000             		jsr	ObjectsLoad
000063E6 4EB9 0000 0000             		jsr	BuildSprites
000063EC 31FC 0708 F614             		move.w	#1800,($FFFFF614).w ; show screen for 30 seconds
000063F2 6100 BCDC                  		bsr.w	Pal_FadeTo
000063F6                            
000063F6                            ; ---------------------------------------------------------------------------
000063F6                            ; "TRY AGAIN" and "END"	screen main loop
000063F6                            ; ---------------------------------------------------------------------------
000063F6                            TryAg_MainLoop:
000063F6 6100 B090                  		bsr.w	PauseGame
000063FA 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00006400 6100 CFA6                  		bsr.w	DelayProgram
00006404 4EB9 0000 0000             		jsr	ObjectsLoad
0000640A 4EB9 0000 0000             		jsr	BuildSprites
00006410 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
00006416 6600                       		bne.s	TryAg_Exit	; if yes, branch
00006418 4A78 F614                  		tst.w	($FFFFF614).w	; has 30 seconds elapsed?
0000641C 6700                       		beq.s	TryAg_Exit	; if yes, branch
0000641E 0C38 001C F600             		cmpi.b	#$1C,($FFFFF600).w
00006424 67D0                       		beq.s	TryAg_MainLoop
00006426                            
00006426                            TryAg_Exit:
00006426 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
0000642C 4E75                       		rts	
0000642E                            
0000642E                            ; ===========================================================================
0000642E                            ; ---------------------------------------------------------------------------
0000642E                            ; Object 8B - Eggman on "TRY AGAIN" and "END"	screens
0000642E                            ; ---------------------------------------------------------------------------
0000642E                            
0000642E                            Obj8B:					; XREF: Obj_Index
0000642E 7000                       		moveq	#0,d0
00006430 1028 0024                  		move.b	$24(a0),d0
00006434 323B 0000                  		move.w	Obj8B_Index(pc,d0.w),d1
00006438 4EBB 1000                  		jsr	Obj8B_Index(pc,d1.w)
0000643C 4EF9 0000 0000             		jmp	DisplaySprite
00006442                            ; ===========================================================================
00006442 0000                       Obj8B_Index:	dc.w Obj8B_Main-Obj8B_Index
00006444 0000                       		dc.w Obj8B_Animate-Obj8B_Index
00006446 0000                       		dc.w Obj8B_Juggle-Obj8B_Index
00006448 0000                       		dc.w loc_5A8E-Obj8B_Index
0000644A                            ; ===========================================================================
0000644A                            
0000644A                            Obj8B_Main:				; XREF: Obj8B_Index
0000644A 5428 0024                  		addq.b	#2,$24(a0)
0000644E 317C 0120 0008             		move.w	#$120,8(a0)
00006454 317C 00F4 000A             		move.w	#$F4,$A(a0)
0000645A 217C 0000 0000 0004        		move.l	#Map_obj8B,4(a0)
00006462 317C 03E1 0002             		move.w	#$3E1,2(a0)
00006468 117C 0000 0001             		move.b	#0,1(a0)
0000646E 117C 0002 0018             		move.b	#2,$18(a0)
00006474 117C 0002 001C             		move.b	#2,$1C(a0)	; use "END" animation
0000647A 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
00006480 6700                       		beq.s	Obj8B_Animate	; if yes, branch
00006482 11FC 008A D0C0             		move.b	#$8A,($FFFFD0C0).w ; load credits object
00006488 31FC 0009 FFF4             		move.w	#9,($FFFFFFF4).w ; use "TRY AGAIN" text
0000648E 11FC 008C D800             		move.b	#$8C,($FFFFD800).w ; load emeralds object on "TRY AGAIN" screen
00006494 117C 0000 001C             		move.b	#0,$1C(a0)	; use "TRY AGAIN" animation
0000649A                            
0000649A                            Obj8B_Animate:				; XREF: Obj8B_Index
0000649A 43F9 0000 0000             		lea	(Ani_obj8B).l,a1
000064A0 4EF9 0000 0000             		jmp	AnimateSprite
000064A6                            ; ===========================================================================
000064A6                            
000064A6                            Obj8B_Juggle:				; XREF: Obj8B_Index
000064A6 5428 0024                  		addq.b	#2,$24(a0)
000064AA 7002                       		moveq	#2,d0
000064AC 0828 0000 001C             		btst	#0,$1C(a0)
000064B2 6700                       		beq.s	loc_5A6A
000064B4 4440                       		neg.w	d0
000064B6                            
000064B6                            loc_5A6A:
000064B6 43F8 D800                  		lea	($FFFFD800).w,a1
000064BA 7205                       		moveq	#5,d1
000064BC                            
000064BC                            loc_5A70:
000064BC 1340 003E                  		move.b	d0,$3E(a1)
000064C0 3400                       		move.w	d0,d2
000064C2 E742                       		asl.w	#3,d2
000064C4 D529 0026                  		add.b	d2,$26(a1)
000064C8 43E9 0040                  		lea	$40(a1),a1
000064CC 51C9 FFEE                  		dbf	d1,loc_5A70
000064D0 5228 001A                  		addq.b	#1,$1A(a0)
000064D4 317C 0070 0030             		move.w	#112,$30(a0)
000064DA                            
000064DA                            loc_5A8E:				; XREF: Obj8B_Index
000064DA 5368 0030                  		subq.w	#1,$30(a0)
000064DE 6A00                       		bpl.s	locret_5AA0
000064E0 0868 0000 001C             		bchg	#0,$1C(a0)
000064E6 117C 0002 0024             		move.b	#2,$24(a0)
000064EC                            
000064EC                            locret_5AA0:
000064EC 4E75                       		rts	
000064EE                            ; ===========================================================================
000064EE                            Ani_obj8B:
000064EE                            	include "_anim\obj8B.asm"
000064EE                            ; ---------------------------------------------------------------------------
000064EE                            ; Animation script - Eggman on the "TRY AGAIN" and "END" screens
000064EE                            ; ---------------------------------------------------------------------------
000064EE 0000                       		dc.w byte_5AA8-Ani_obj8B
000064F0 0000                       		dc.w byte_5AAC-Ani_obj8B
000064F2 0000                       		dc.w byte_5AB0-Ani_obj8B
000064F4 0500 FC01                  byte_5AA8:	dc.b 5,	0, $FC,	1
000064F8 0502 FC03                  byte_5AAC:	dc.b 5,	2, $FC,	3
000064FC 0704 0506 0504 0506 0504+  byte_5AB0:	dc.b 7,	4, 5, 6, 5, 4, 5, 6, 5,	4, 5, 6, 5, 7, 5, 6, 5,	$FF
0000650E                            		even
0000650E                            		even
0000650E                            
0000650E                            ; ===========================================================================
0000650E                            ; ---------------------------------------------------------------------------
0000650E                            ; Object 8C - chaos emeralds on	the "TRY AGAIN"	screen
0000650E                            ; ---------------------------------------------------------------------------
0000650E                            
0000650E                            Obj8C:					; XREF: Obj_Index
0000650E 7000                       		moveq	#0,d0
00006510 1028 0024                  		move.b	$24(a0),d0
00006514 323B 0000                  		move.w	Obj8C_Index(pc,d0.w),d1
00006518 4EBB 1000                  		jsr	Obj8C_Index(pc,d1.w)
0000651C 4EF9 0000 0000             		jmp	DisplaySprite
00006522                            ; ===========================================================================
00006522 0000                       Obj8C_Index:	dc.w Obj8C_Main-Obj8C_Index
00006524 0000                       		dc.w Obj8C_Move-Obj8C_Index
00006526                            ; ===========================================================================
00006526                            
00006526                            Obj8C_Main:				; XREF: Obj8C_Index
00006526 2248                       		movea.l	a0,a1
00006528 7400                       		moveq	#0,d2
0000652A 7600                       		moveq	#0,d3
0000652C 7205                       		moveq	#5,d1
0000652E 9238 FE57                  		sub.b	($FFFFFE57).w,d1
00006532                            
00006532                            Obj8C_MakeEms:				; XREF: loc_5B42
00006532 12BC 008C                  		move.b	#$8C,(a1)	; load emerald object
00006536 5429 0024                  		addq.b	#2,$24(a1)
0000653A 237C 0000 61C6 0004        		move.l	#Map_obj88,4(a1)
00006542 337C 03C5 0002             		move.w	#$3C5,2(a1)
00006548 137C 0000 0001             		move.b	#0,1(a1)
0000654E 137C 0001 0018             		move.b	#1,$18(a1)
00006554 337C 0104 0008             		move.w	#$104,8(a1)
0000655A 337C 0120 0038             		move.w	#$120,$38(a1)
00006560 337C 00EC 000A             		move.w	#$EC,$A(a1)
00006566 3369 000A 003A             		move.w	$A(a1),$3A(a1)
0000656C 137C 001C 003C             		move.b	#$1C,$3C(a1)
00006572 47F8 FE58                  		lea	($FFFFFE58).w,a3
00006576                            
00006576                            Obj8C_ChkEms:
00006576 7000                       		moveq	#0,d0
00006578 1038 FE57                  		move.b	($FFFFFE57).w,d0
0000657C 5340                       		subq.w	#1,d0
0000657E 6500                       		bcs.s	loc_5B42
00006580                            
00006580                            Obj8C_ChkEmLoop:
00006580 B433 0000                  		cmp.b	(a3,d0.w),d2
00006584 6600                       		bne.s	loc_5B3E
00006586 5202                       		addq.b	#1,d2
00006588 60EC                       		bra.s	Obj8C_ChkEms
0000658A                            ; ===========================================================================
0000658A                            
0000658A                            loc_5B3E:
0000658A 51C8 FFF4                  		dbf	d0,Obj8C_ChkEmLoop ; checks which emeralds you have
0000658E                            
0000658E                            loc_5B42:
0000658E 1342 001A                  		move.b	d2,$1A(a1)
00006592 5229 001A                  		addq.b	#1,$1A(a1)
00006596 5202                       		addq.b	#1,d2
00006598 137C 0080 0026             		move.b	#$80,$26(a1)
0000659E 1343 001E                  		move.b	d3,$1E(a1)
000065A2 1343 001F                  		move.b	d3,$1F(a1)
000065A6 0643 000A                  		addi.w	#$A,d3
000065AA 43E9 0040                  		lea	$40(a1),a1
000065AE 51C9 FF82                  		dbf	d1,Obj8C_MakeEms
000065B2                            
000065B2                            Obj8C_Move:				; XREF: Obj8C_Index
000065B2 4A68 003E                  		tst.w	$3E(a0)
000065B6 6700                       		beq.s	locret_5BBA
000065B8 4A28 001E                  		tst.b	$1E(a0)
000065BC 6700                       		beq.s	loc_5B78
000065BE 5328 001E                  		subq.b	#1,$1E(a0)
000065C2 6600                       		bne.s	loc_5B80
000065C4                            
000065C4                            loc_5B78:
000065C4 3028 003E                  		move.w	$3E(a0),d0
000065C8 D168 0026                  		add.w	d0,$26(a0)
000065CC                            
000065CC                            loc_5B80:
000065CC 1028 0026                  		move.b	$26(a0),d0
000065D0 6700                       		beq.s	loc_5B8C
000065D2 0C00 0080                  		cmpi.b	#$80,d0
000065D6 6600                       		bne.s	loc_5B96
000065D8                            
000065D8                            loc_5B8C:
000065D8 4268 003E                  		clr.w	$3E(a0)
000065DC 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
000065E2                            
000065E2                            loc_5B96:
000065E2 4EB9 0000 33DA             		jsr	(CalcSine).l
000065E8 7800                       		moveq	#0,d4
000065EA 1828 003C                  		move.b	$3C(a0),d4
000065EE C3C4                       		muls.w	d4,d1
000065F0 E081                       		asr.l	#8,d1
000065F2 C1C4                       		muls.w	d4,d0
000065F4 E080                       		asr.l	#8,d0
000065F6 D268 0038                  		add.w	$38(a0),d1
000065FA D068 003A                  		add.w	$3A(a0),d0
000065FE 3141 0008                  		move.w	d1,8(a0)
00006602 3140 000A                  		move.w	d0,$A(a0)
00006606                            
00006606                            locret_5BBA:
00006606 4E75                       		rts	
00006608                            ; ===========================================================================
00006608                            ; ---------------------------------------------------------------------------
00006608                            ; Sprite mappings - Eggman on	the "TRY AGAIN"	and "END" screens
00006608                            ; ---------------------------------------------------------------------------
00006608                            Map_obj8B:
00006608                            	include "_maps\obj8B.asm"
00006608                            ; ---------------------------------------------------------------------------
00006608                            ; Sprite mappings - Robotnik on	the "TRY AGAIN"	and "END" screens
00006608                            ; ---------------------------------------------------------------------------
00006608 0000 0000                  		dc.w byte_5BCC-Map_obj8B, byte_5BF5-Map_obj8B
0000660C 0000 0000                  		dc.w byte_5C1E-Map_obj8B, byte_5C47-Map_obj8B
00006610 0000 0000                  		dc.w byte_5C70-Map_obj8B, byte_5CAD-Map_obj8B
00006614 0000 0000                  		dc.w byte_5CE0-Map_obj8B, byte_5D13-Map_obj8B
00006618 08                         byte_5BCC:	dc.b 8
00006619 E905 0000 F0               		dc.b $E9, 5, 0,	0, $F0
0000661E F90C 0004 E0               		dc.b $F9, $C, 0, 4, $E0
00006623 E904 0008 00               		dc.b $E9, 4, 0,	8, 0
00006628 F10D 000A 00               		dc.b $F1, $D, 0, $A, 0
0000662D 0106 0023 F0               		dc.b 1,	6, 0, $23, $F0
00006632 0106 0823 00               		dc.b 1,	6, 8, $23, 0
00006637 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
0000663C 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00006641 08                         byte_5BF5:	dc.b 8
00006642 E80D 0012 E0               		dc.b $E8, $D, 0, $12, $E0
00006647 F808 001A E8               		dc.b $F8, 8, 0,	$1A, $E8
0000664C E805 0800 00               		dc.b $E8, 5, 8,	0, 0
00006651 F80C 0804 00               		dc.b $F8, $C, 8, 4, 0
00006656 0006 001D F0               		dc.b 0,	6, 0, $1D, $F0
0000665B 0006 081D 00               		dc.b 0,	6, 8, $1D, 0
00006660 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00006665 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
0000666A 08                         byte_5C1E:	dc.b 8
0000666B E904 0808 F0               		dc.b $E9, 4, 8,	8, $F0
00006670 F10D 080A E0               		dc.b $F1, $D, 8, $A, $E0
00006675 E905 0800 00               		dc.b $E9, 5, 8,	0, 0
0000667A F90C 0804 00               		dc.b $F9, $C, 8, 4, 0
0000667F 0106 0023 F0               		dc.b 1,	6, 0, $23, $F0
00006684 0106 0823 00               		dc.b 1,	6, 8, $23, 0
00006689 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
0000668E 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00006693 08                         byte_5C47:	dc.b 8
00006694 E805 0000 F0               		dc.b $E8, 5, 0,	0, $F0
00006699 F80C 0004 E0               		dc.b $F8, $C, 0, 4, $E0
0000669E E80D 0812 00               		dc.b $E8, $D, 8, $12, 0
000066A3 F808 081A 00               		dc.b $F8, 8, 8,	$1A, 0
000066A8 0006 001D F0               		dc.b 0,	6, 0, $1D, $F0
000066AD 0006 081D 00               		dc.b 0,	6, 8, $1D, 0
000066B2 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
000066B7 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
000066BC 0C                         byte_5C70:	dc.b $C
000066BD ED0A 002B E8               		dc.b $ED, $A, 0, $2B, $E8
000066C2 F500 0034 E0               		dc.b $F5, 0, 0,	$34, $E0
000066C7 0504 0035 F0               		dc.b 5,	4, 0, $35, $F0
000066CC 0D08 0037 E8               		dc.b $D, 8, 0, $37, $E8
000066D1 ED0A 082B 00               		dc.b $ED, $A, 8, $2B, 0
000066D6 F500 0834 18               		dc.b $F5, 0, 8,	$34, $18
000066DB 0504 0835 00               		dc.b 5,	4, 8, $35, 0
000066E0 0D08 0837 00               		dc.b $D, 8, 8, $37, 0
000066E5 100D 0073 E0               		dc.b $10, $D, 0, $73, $E0
000066EA 100D 007B 00               		dc.b $10, $D, 0, $7B, 0
000066EF 1C0C 005B E0               		dc.b $1C, $C, 0, $5B, $E0
000066F4 1C0C 085B 00               		dc.b $1C, $C, 8, $5B, 0
000066F9 0A                         byte_5CAD:	dc.b $A
000066FA D207 003A F0               		dc.b $D2, 7, 0,	$3A, $F0
000066FF DA00 0042 E8               		dc.b $DA, 0, 0,	$42, $E8
00006704 F207 0043 F0               		dc.b $F2, 7, 0,	$43, $F0
00006709 D207 083A 00               		dc.b $D2, 7, 8,	$3A, 0
0000670E DA00 0842 10               		dc.b $DA, 0, 8,	$42, $10
00006713 F207 0843 00               		dc.b $F2, 7, 8,	$43, 0
00006718 100D 0067 E8               		dc.b $10, $D, 0, $67, $E8
0000671D 1005 006F 08               		dc.b $10, 5, 0,	$6F, 8
00006722 1C0C 005F E0               		dc.b $1C, $C, 0, $5F, $E0
00006727 1C0C 085F 00               		dc.b $1C, $C, 8, $5F, 0
0000672C 0A                         byte_5CE0:	dc.b $A
0000672D C40B 004B E8               		dc.b $C4, $B, 0, $4B, $E8
00006732 E408 0057 E8               		dc.b $E4, 8, 0,	$57, $E8
00006737 EC00 005A F0               		dc.b $EC, 0, 0,	$5A, $F0
0000673C C40B 084B 00               		dc.b $C4, $B, 8, $4B, 0
00006741 E408 0857 00               		dc.b $E4, 8, 8,	$57, 0
00006746 EC00 085A 08               		dc.b $EC, 0, 8,	$5A, 8
0000674B 100D 0067 E8               		dc.b $10, $D, 0, $67, $E8
00006750 1005 006F 08               		dc.b $10, 5, 0,	$6F, 8
00006755 1C0C 0063 E0               		dc.b $1C, $C, 0, $63, $E0
0000675A 1C0C 0863 00               		dc.b $1C, $C, 8, $63, 0
0000675F 0C                         byte_5D13:	dc.b $C
00006760 F40A 002B E8               		dc.b $F4, $A, 0, $2B, $E8
00006765 FC00 0034 E0               		dc.b $FC, 0, 0,	$34, $E0
0000676A 0C04 0035 F0               		dc.b $C, 4, 0, $35, $F0
0000676F 1408 0037 E8               		dc.b $14, 8, 0,	$37, $E8
00006774 F40A 082B 00               		dc.b $F4, $A, 8, $2B, 0
00006779 FC00 0834 18               		dc.b $FC, 0, 8,	$34, $18
0000677E 0C04 0835 00               		dc.b $C, 4, 8, $35, 0
00006783 1408 0837 00               		dc.b $14, 8, 8,	$37, 0
00006788 180C 0083 E0               		dc.b $18, $C, 0, $83, $E0
0000678D 180C 0087 00               		dc.b $18, $C, 0, $87, 0
00006792 1C0C 005B E0               		dc.b $1C, $C, 0, $5B, $E0
00006797 1C0C 085B 00               		dc.b $1C, $C, 8, $5B, 0
0000679C                            		even
0000679C                            		even
0000679C                            
0000679C                            ; ---------------------------------------------------------------------------
0000679C                            ; Ending sequence demos
0000679C                            ; ---------------------------------------------------------------------------
0000679C                            Demo_EndGHZ1:	incbin	demodata\e_ghz1.bin
000067CA                            		even
000067CA                            Demo_EndMZ:	incbin	demodata\e_mz.bin
0000680A                            		even
0000680A                            Demo_EndSYZ:	incbin	demodata\e_syz.bin
0000683A                            		even
0000683A                            Demo_EndLZ:	incbin	demodata\e_lz.bin
0000686A                            		even
0000686A                            Demo_EndSLZ:	incbin	demodata\e_slz.bin
0000688A                            		even
0000688A                            Demo_EndSBZ1:	incbin	demodata\e_sbz1.bin
000068AA                            		even
000068AA                            Demo_EndSBZ2:	incbin	demodata\e_sbz2.bin
000068DA                            		even
000068DA                            Demo_EndGHZ2:	incbin	demodata\e_ghz2.bin
0000690A                            		even
0000690A                            
0000690A                            ; ---------------------------------------------------------------------------
0000690A                            ; Subroutine to	load level boundaries and start	locations
0000690A                            ; ---------------------------------------------------------------------------
0000690A                            
0000690A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000690A                            
0000690A                            
0000690A                            LevelSizeLoad:				; XREF: TitleScreen; Level; EndingSequence
0000690A 7000                       		moveq	#0,d0
0000690C 11C0 F740                  		move.b	d0,($FFFFF740).w
00006910 11C0 F741                  		move.b	d0,($FFFFF741).w
00006914 11C0 F746                  		move.b	d0,($FFFFF746).w
00006918 11C0 F748                  		move.b	d0,($FFFFF748).w
0000691C 11C0 F742                  		move.b	d0,($FFFFF742).w
00006920 3038 FE10                  		move.w	($FFFFFE10).w,d0
00006924 ED08                       		lsl.b	#6,d0
00006926 E848                       		lsr.w	#4,d0
00006928 3200                       		move.w	d0,d1
0000692A D040                       		add.w	d0,d0
0000692C D041                       		add.w	d1,d0
0000692E 41FB 0000                  		lea	LevelSizeArray(pc,d0.w),a0 ; load level	boundaries
00006932 3018                       		move.w	(a0)+,d0
00006934 31C0 F730                  		move.w	d0,($FFFFF730).w
00006938 2018                       		move.l	(a0)+,d0
0000693A 21C0 F728                  		move.l	d0,($FFFFF728).w
0000693E 21C0 F720                  		move.l	d0,($FFFFF720).w
00006942 2018                       		move.l	(a0)+,d0
00006944 21C0 F72C                  		move.l	d0,($FFFFF72C).w
00006948 21C0 F724                  		move.l	d0,($FFFFF724).w
0000694C 3038 F728                  		move.w	($FFFFF728).w,d0
00006950 0640 0240                  		addi.w	#$240,d0
00006954 31C0 F732                  		move.w	d0,($FFFFF732).w
00006958 31FC 1010 F74A             		move.w	#$1010,($FFFFF74A).w
0000695E 3018                       		move.w	(a0)+,d0
00006960 31C0 F73E                  		move.w	d0,($FFFFF73E).w
00006964 6000 0000                  		bra.w	LevSz_ChkLamp
00006968                            ; ===========================================================================
00006968                            ; ---------------------------------------------------------------------------
00006968                            ; Level size array and ending start location array
00006968                            ; ---------------------------------------------------------------------------
00006968                            LevelSizeArray:	incbin	misc\lvl_size.bin
00006AB8                            		even
00006AB8                            
00006AB8                            EndingStLocArray:
00006AB8                            		incbin	misc\sloc_end.bin
00006AD8                            		even
00006AD8                            
00006AD8                            ; ===========================================================================
00006AD8                            
00006AD8                            LevSz_ChkLamp:				; XREF: LevelSizeLoad
00006AD8 4A38 FE30                  		tst.b	($FFFFFE30).w	; have any lampposts been hit?
00006ADC 6700                       		beq.s	LevSz_StartLoc	; if not, branch
00006ADE 4EB9 0000 0000             		jsr	Obj79_LoadInfo
00006AE4 3238 D008                  		move.w	($FFFFD008).w,d1
00006AE8 3038 D00C                  		move.w	($FFFFD00C).w,d0
00006AEC 6000                       		bra.s	loc_60D0
00006AEE                            ; ===========================================================================
00006AEE                            
00006AEE                            LevSz_StartLoc:				; XREF: LevelSizeLoad
00006AEE 3038 FE10                  		move.w	($FFFFFE10).w,d0
00006AF2 ED08                       		lsl.b	#6,d0
00006AF4 E848                       		lsr.w	#4,d0
00006AF6 43FB 0000                  		lea	StartLocArray(pc,d0.w),a1 ; load Sonic's start location
00006AFA 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00006AFE 6A00                       		bpl.s	LevSz_SonicPos	; if not, branch
00006B00 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
00006B04 5340                       		subq.w	#1,d0
00006B06 E548                       		lsl.w	#2,d0
00006B08 43FB 00AE                  		lea	EndingStLocArray(pc,d0.w),a1 ; load Sonic's start location
00006B0C                            
00006B0C                            LevSz_SonicPos:
00006B0C 7200                       		moveq	#0,d1
00006B0E 3219                       		move.w	(a1)+,d1
00006B10 31C1 D008                  		move.w	d1,($FFFFD008).w ; set Sonic's position on x-axis
00006B14 7000                       		moveq	#0,d0
00006B16 3011                       		move.w	(a1),d0
00006B18 31C0 D00C                  		move.w	d0,($FFFFD00C).w ; set Sonic's position on y-axis
00006B1C                            
00006B1C                            loc_60D0:				; XREF: LevSz_ChkLamp
00006B1C 4278 F7A8                  		clr.w	($FFFFF7A8).w		; reset Sonic's position tracking index
00006B20 45F8 CB00                  		lea	($FFFFCB00).w,a2	; load the tracking array into a2
00006B24 743F                       		moveq	#63,d2				; begin a 64-step loop
00006B26                            @looppoint:
00006B26 34C1                       		move.w	d1,(a2)+			; fill in X
00006B28 34C0                       		move.w	d0,(a2)+			; fill in Y
00006B2A 51CA FFFA                  		dbf	d2,@looppoint		; loop
00006B2E 0441 00A0                  		subi.w	#$A0,d1
00006B32 6400                       		bcc.s	loc_60D8
00006B34 7200                       		moveq	#0,d1
00006B36                            
00006B36                            loc_60D8:
00006B36 3438 F72A                  		move.w	($FFFFF72A).w,d2
00006B3A B242                       		cmp.w	d2,d1
00006B3C 6500                       		bcs.s	loc_60E2
00006B3E 3202                       		move.w	d2,d1
00006B40                            
00006B40                            loc_60E2:
00006B40 31C1 F700                  		move.w	d1,($FFFFF700).w
00006B44 0440 0060                  		subi.w	#$60,d0
00006B48 6400                       		bcc.s	loc_60EE
00006B4A 7000                       		moveq	#0,d0
00006B4C                            
00006B4C                            loc_60EE:
00006B4C B078 F72E                  		cmp.w	($FFFFF72E).w,d0
00006B50 6D00                       		blt.s	loc_60F8
00006B52 3038 F72E                  		move.w	($FFFFF72E).w,d0
00006B56                            
00006B56                            loc_60F8:
00006B56 31C0 F704                  		move.w	d0,($FFFFF704).w
00006B5A 6100 0000                  		bsr.w	BgScrollSpeed
00006B5E 7000                       		moveq	#0,d0
00006B60 1038 FE10                  		move.b	($FFFFFE10).w,d0
00006B64 E508                       		lsl.b	#2,d0
00006B66 21FB 0000 F7AC             		move.l	LoopTileNums(pc,d0.w),($FFFFF7AC).w
00006B6C 6000 0000                  		bra.w	LevSz_Unk
00006B70                            ; ===========================================================================
00006B70                            ; ---------------------------------------------------------------------------
00006B70                            ; Sonic	start location array
00006B70                            ; ---------------------------------------------------------------------------
00006B70                            StartLocArray:	incbin	misc\sloc_lev.bin
00006BE0                            		even
00006BE0                            
00006BE0                            ; ---------------------------------------------------------------------------
00006BE0                            ; Which	256x256	tiles contain loops or roll-tunnels
00006BE0                            ; ---------------------------------------------------------------------------
00006BE0                            ; Format - 4 bytes per zone, referring to which 256x256 evoke special events:
00006BE0                            ; loop,	loop, tunnel, tunnel
00006BE0                            ; ---------------------------------------------------------------------------
00006BE0                            LoopTileNums:	incbin	misc\loopnums.bin
00006BFC                            		even
00006BFC                            
00006BFC                            ; ===========================================================================
00006BFC                            
00006BFC                            LevSz_Unk:				; XREF: LevelSizeLoad
00006BFC 7000                       		moveq	#0,d0
00006BFE 1038 FE10                  		move.b	($FFFFFE10).w,d0
00006C02 E748                       		lsl.w	#3,d0
00006C04 43FB 0000                  		lea	dword_61B4(pc,d0.w),a1
00006C08 45F8 F7F0                  		lea	($FFFFF7F0).w,a2
00006C0C 24D9                       		move.l	(a1)+,(a2)+
00006C0E 24D9                       		move.l	(a1)+,(a2)+
00006C10 4E75                       		rts	
00006C12                            ; End of function LevelSizeLoad
00006C12                            
00006C12                            ; ===========================================================================
00006C12 0070 0100 0100 0100        dword_61B4:	dc.l $700100, $1000100
00006C1A 0800 0100 0100 0000        		dc.l $8000100, $1000000
00006C22 0800 0100 0100 0000        		dc.l $8000100, $1000000
00006C2A 0800 0100 0100 0000        		dc.l $8000100, $1000000
00006C32 0800 0100 0100 0000        		dc.l $8000100, $1000000
00006C3A 0800 0100 0100 0000        		dc.l $8000100, $1000000
00006C42 0070 0100 0100 0100        		dc.l $700100, $1000100
00006C4A                            
00006C4A                            ; ---------------------------------------------------------------------------
00006C4A                            ; Subroutine to	set scroll speed of some backgrounds
00006C4A                            ; ---------------------------------------------------------------------------
00006C4A                            
00006C4A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006C4A                            
00006C4A                            
00006C4A                            BgScrollSpeed:				; XREF: LevelSizeLoad
00006C4A 4A38 FE30                  		tst.b	($FFFFFE30).w
00006C4E 6600                       		bne.s	loc_6206
00006C50 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00006C54 31C0 F714                  		move.w	d0,($FFFFF714).w
00006C58 31C1 F708                  		move.w	d1,($FFFFF708).w
00006C5C 31C1 F710                  		move.w	d1,($FFFFF710).w
00006C60 31C1 F718                  		move.w	d1,($FFFFF718).w
00006C64                            
00006C64                            loc_6206:
00006C64 7400                       		moveq	#0,d2
00006C66 1438 FE10                  		move.b	($FFFFFE10).w,d2
00006C6A D442                       		add.w	d2,d2
00006C6C 343B 2000                  		move.w	BgScroll_Index(pc,d2.w),d2
00006C70 4EFB 2000                  		jmp	BgScroll_Index(pc,d2.w)
00006C74                            ; End of function BgScrollSpeed
00006C74                            
00006C74                            ; ===========================================================================
00006C74 0000 0000                  BgScroll_Index:	dc.w BgScroll_GHZ-BgScroll_Index, BgScroll_LZ-BgScroll_Index
00006C78 0000 0000                  		dc.w BgScroll_MZ-BgScroll_Index, BgScroll_SLZ-BgScroll_Index
00006C7C 0000 0000                  		dc.w BgScroll_SYZ-BgScroll_Index, BgScroll_SBZ-BgScroll_Index
00006C80 0000                       		dc.w BgScroll_End-BgScroll_Index
00006C82                            ; ===========================================================================
00006C82                            
00006C82                            BgScroll_GHZ:				; XREF: BgScroll_Index
00006C82 6000 0000                  		bra.w	Deform_GHZ
00006C86                            ; ===========================================================================
00006C86                            
00006C86                            BgScroll_LZ:				; XREF: BgScroll_Index
00006C86 E280                       		asr.l	#1,d0
00006C88 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00006C8C 4E75                       		rts	
00006C8E                            ; ===========================================================================
00006C8E                            
00006C8E                            BgScroll_MZ:				; XREF: BgScroll_Index
00006C8E 4E75                       		rts	
00006C90                            ; ===========================================================================
00006C90                            
00006C90                            BgScroll_SLZ:				; XREF: BgScroll_Index
00006C90 E280                       		asr.l	#1,d0
00006C92 0640 00C0                  		addi.w	#$C0,d0
00006C96 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00006C9A 4E75                       		rts	
00006C9C                            ; ===========================================================================
00006C9C                            
00006C9C                            BgScroll_SYZ:				; XREF: BgScroll_Index
00006C9C E980                       		asl.l	#4,d0
00006C9E 2400                       		move.l	d0,d2
00006CA0 E380                       		asl.l	#1,d0
00006CA2 D082                       		add.l	d2,d0
00006CA4 E080                       		asr.l	#8,d0
00006CA6 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00006CAA 31C0 F714                  		move.w	d0,($FFFFF714).w
00006CAE 4E75                       		rts	
00006CB0                            ; ===========================================================================
00006CB0                            
00006CB0                            BgScroll_SBZ:				; XREF: BgScroll_Index
00006CB0 E980                       		asl.l	#4,d0
00006CB2 E380                       		asl.l	#1,d0
00006CB4 E080                       		asr.l	#8,d0
00006CB6 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00006CBA 4E75                       		rts	
00006CBC                            ; ===========================================================================
00006CBC                            
00006CBC                            BgScroll_End:				; XREF: BgScroll_Index
00006CBC 31FC 001E F70C             		move.w	#$1E,($FFFFF70C).w
00006CC2 31FC 001E F714             		move.w	#$1E,($FFFFF714).w
00006CC8 4E75                       		rts	
00006CCA                            ; ===========================================================================
00006CCA 31FC 00A8 F708             		move.w	#$A8,($FFFFF708).w
00006CD0 31FC 001E F70C             		move.w	#$1E,($FFFFF70C).w
00006CD6 31FC FFC0 F710             		move.w	#-$40,($FFFFF710).w
00006CDC 31FC 001E F714             		move.w	#$1E,($FFFFF714).w
00006CE2 4E75                       		rts
00006CE4                            
00006CE4                            ; ---------------------------------------------------------------------------
00006CE4                            ; Background layer deformation subroutines
00006CE4                            ; ---------------------------------------------------------------------------
00006CE4                            
00006CE4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006CE4                            
00006CE4                            
00006CE4                            DeformBgLayer:				; XREF: TitleScreen; Level; EndingSequence
00006CE4 4A38 F744                  		tst.b	($FFFFF744).w
00006CE8 6700                       		beq.s	loc_628E
00006CEA 4E75                       		rts	
00006CEC                            ; ===========================================================================
00006CEC                            
00006CEC                            loc_628E:
00006CEC 4278 F754                  		clr.w	($FFFFF754).w
00006CF0 4278 F756                  		clr.w	($FFFFF756).w
00006CF4 4278 F758                  		clr.w	($FFFFF758).w
00006CF8 4278 F75A                  		clr.w	($FFFFF75A).w
00006CFC 6100 0000                  		bsr.w	ScrollHoriz
00006D00 6100 0000                  		bsr.w	ScrollVertical
00006D04 6100 0000                  		bsr.w	DynScrResizeLoad
00006D08 31F8 F700 F61A             		move.w	($FFFFF700).w,($FFFFF61A).w
00006D0E 31F8 F704 F616             		move.w	($FFFFF704).w,($FFFFF616).w
00006D14 31F8 F708 F61C             		move.w	($FFFFF708).w,($FFFFF61C).w
00006D1A 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006D20 31F8 F718 F620             		move.w	($FFFFF718).w,($FFFFF620).w
00006D26 31F8 F71C F61E             		move.w	($FFFFF71C).w,($FFFFF61E).w
00006D2C 7000                       		moveq	#0,d0
00006D2E 1038 FE10                  		move.b	($FFFFFE10).w,d0
00006D32 D040                       		add.w	d0,d0
00006D34 303B 0000                  		move.w	Deform_Index(pc,d0.w),d0
00006D38 4EFB 0000                  		jmp	Deform_Index(pc,d0.w)
00006D3C                            ; End of function DeformBgLayer
00006D3C                            
00006D3C                            ; ===========================================================================
00006D3C                            ; ---------------------------------------------------------------------------
00006D3C                            ; Offset index for background layer deformation	code
00006D3C                            ; ---------------------------------------------------------------------------
00006D3C 0000 0000                  Deform_Index:	dc.w Deform_GHZ-Deform_Index, Deform_LZ-Deform_Index
00006D40 0000 0000                  		dc.w Deform_MZ-Deform_Index, Deform_SLZ-Deform_Index
00006D44 0000 0000                  		dc.w Deform_SYZ-Deform_Index, Deform_SBZ-Deform_Index
00006D48 0000                       		dc.w Deform_GHZ-Deform_Index
00006D4A                            ; ---------------------------------------------------------------------------
00006D4A                            ; Green	Hill Zone background layer deformation code
00006D4A                            ; ---------------------------------------------------------------------------
00006D4A                            
00006D4A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006D4A                            
00006D4A                            
00006D4A                            Deform_GHZ:				; XREF: Deform_Index
00006D4A 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006D4E 48C4                       		ext.l	d4
00006D50 EB84                       		asl.l	#5,d4
00006D52 2204                       		move.l	d4,d1
00006D54 E384                       		asl.l	#1,d4
00006D56 D881                       		add.l	d1,d4
00006D58 7A00                       		moveq	#0,d5
00006D5A 6100 0000                  		bsr.w	ScrollBlock1
00006D5E 6100 0000                  		bsr.w	ScrollBlock4
00006D62 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006D66 3038 F704                  		move.w	($FFFFF704).w,d0
00006D6A 0240 07FF                  		andi.w	#$7FF,d0
00006D6E EA48                       		lsr.w	#5,d0
00006D70 4440                       		neg.w	d0
00006D72 0640 0026                  		addi.w	#$26,d0
00006D76 31C0 F714                  		move.w	d0,($FFFFF714).w
00006D7A 3800                       		move.w	d0,d4
00006D7C 6100 0000                  		bsr.w	ScrollBlock3
00006D80 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006D86 323C 006F                  		move.w	#$6F,d1
00006D8A 9244                       		sub.w	d4,d1
00006D8C 3038 F700                  		move.w	($FFFFF700).w,d0
00006D90 0C38 0004 F600             		cmpi.b	#4,($FFFFF600).w
00006D96 6600                       		bne.s	loc_633C
00006D98 7000                       		moveq	#0,d0
00006D9A                            
00006D9A                            loc_633C:
00006D9A 4440                       		neg.w	d0
00006D9C 4840                       		swap	d0
00006D9E 3038 F708                  		move.w	($FFFFF708).w,d0
00006DA2 4440                       		neg.w	d0
00006DA4                            
00006DA4                            loc_6346:
00006DA4 22C0                       		move.l	d0,(a1)+
00006DA6 51C9 FFFC                  		dbf	d1,loc_6346
00006DAA 323C 0027                  		move.w	#$27,d1
00006DAE 3038 F710                  		move.w	($FFFFF710).w,d0
00006DB2 4440                       		neg.w	d0
00006DB4                            
00006DB4                            loc_6356:
00006DB4 22C0                       		move.l	d0,(a1)+
00006DB6 51C9 FFFC                  		dbf	d1,loc_6356
00006DBA 3038 F710                  		move.w	($FFFFF710).w,d0
00006DBE 0640 0000                  		addi.w	#0,d0
00006DC2 3438 F700                  		move.w	($FFFFF700).w,d2
00006DC6 0642 FE00                  		addi.w	#-$200,d2
00006DCA 9440                       		sub.w	d0,d2
00006DCC 48C2                       		ext.l	d2
00006DCE E182                       		asl.l	#8,d2
00006DD0 85FC 0068                  		divs.w	#$68,d2
00006DD4 48C2                       		ext.l	d2
00006DD6 E182                       		asl.l	#8,d2
00006DD8 7600                       		moveq	#0,d3
00006DDA 3600                       		move.w	d0,d3
00006DDC 323C 0047                  		move.w	#$47,d1
00006DE0 D244                       		add.w	d4,d1
00006DE2                            
00006DE2                            loc_6384:
00006DE2 3003                       		move.w	d3,d0
00006DE4 4440                       		neg.w	d0
00006DE6 22C0                       		move.l	d0,(a1)+
00006DE8 4843                       		swap	d3
00006DEA D682                       		add.l	d2,d3
00006DEC 4843                       		swap	d3
00006DEE 51C9 FFF2                  		dbf	d1,loc_6384
00006DF2 4E75                       		rts	
00006DF4                            ; End of function Deform_GHZ
00006DF4                            
00006DF4                            ; ---------------------------------------------------------------------------
00006DF4                            ; Labyrinth Zone background layer deformation code
00006DF4                            ; ---------------------------------------------------------------------------
00006DF4                            
00006DF4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006DF4                            
00006DF4                            
00006DF4                            Deform_LZ:				; XREF: Deform_Index
00006DF4 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006DF8 48C4                       		ext.l	d4
00006DFA EF84                       		asl.l	#7,d4
00006DFC 3A38 F73C                  		move.w	($FFFFF73C).w,d5
00006E00 48C5                       		ext.l	d5
00006E02 EF85                       		asl.l	#7,d5
00006E04 6100 0000                  		bsr.w	ScrollBlock1
00006E08 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006E0E 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006E12 323C 00DF                  		move.w	#$DF,d1
00006E16 3038 F700                  		move.w	($FFFFF700).w,d0
00006E1A 4440                       		neg.w	d0
00006E1C 4840                       		swap	d0
00006E1E 3038 F708                  		move.w	($FFFFF708).w,d0
00006E22 4440                       		neg.w	d0
00006E24                            
00006E24                            loc_63C6:
00006E24 22C0                       		move.l	d0,(a1)+
00006E26 51C9 FFFC                  		dbf	d1,loc_63C6
00006E2A 3038 F646                  		move.w	($FFFFF646).w,d0
00006E2E 9078 F704                  		sub.w	($FFFFF704).w,d0
00006E32 4E75                       		rts	
00006E34                            ; End of function Deform_LZ
00006E34                            
00006E34                            ; ---------------------------------------------------------------------------
00006E34                            ; Marble Zone background layer deformation code
00006E34                            ; ---------------------------------------------------------------------------
00006E34                            
00006E34                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006E34                            
00006E34                            
00006E34                            Deform_MZ:				; XREF: Deform_Index
00006E34 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006E38 48C4                       		ext.l	d4
00006E3A ED84                       		asl.l	#6,d4
00006E3C 2204                       		move.l	d4,d1
00006E3E E384                       		asl.l	#1,d4
00006E40 D881                       		add.l	d1,d4
00006E42 7A00                       		moveq	#0,d5
00006E44 6100 0000                  		bsr.w	ScrollBlock1
00006E48 303C 0200                  		move.w	#$200,d0
00006E4C 3238 F704                  		move.w	($FFFFF704).w,d1
00006E50 0441 01C8                  		subi.w	#$1C8,d1
00006E54 6500                       		bcs.s	loc_6402
00006E56 3401                       		move.w	d1,d2
00006E58 D241                       		add.w	d1,d1
00006E5A D242                       		add.w	d2,d1
00006E5C E441                       		asr.w	#2,d1
00006E5E D041                       		add.w	d1,d0
00006E60                            
00006E60                            loc_6402:
00006E60 31C0 F714                  		move.w	d0,($FFFFF714).w
00006E64 6100 0000                  		bsr.w	ScrollBlock3
00006E68 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006E6E 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006E72 323C 00DF                  		move.w	#$DF,d1
00006E76 3038 F700                  		move.w	($FFFFF700).w,d0
00006E7A 4440                       		neg.w	d0
00006E7C 4840                       		swap	d0
00006E7E 3038 F708                  		move.w	($FFFFF708).w,d0
00006E82 4440                       		neg.w	d0
00006E84                            
00006E84                            loc_6426:
00006E84 22C0                       		move.l	d0,(a1)+
00006E86 51C9 FFFC                  		dbf	d1,loc_6426
00006E8A 4E75                       		rts	
00006E8C                            ; End of function Deform_MZ
00006E8C                            
00006E8C                            ; ---------------------------------------------------------------------------
00006E8C                            ; Star Light Zone background layer deformation code
00006E8C                            ; ---------------------------------------------------------------------------
00006E8C                            
00006E8C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006E8C                            
00006E8C                            
00006E8C                            Deform_SLZ:				; XREF: Deform_Index
00006E8C 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006E90 48C4                       		ext.l	d4
00006E92 EF84                       		asl.l	#7,d4
00006E94 3A38 F73C                  		move.w	($FFFFF73C).w,d5
00006E98 48C5                       		ext.l	d5
00006E9A EF85                       		asl.l	#7,d5
00006E9C 6100 0000                  		bsr.w	ScrollBlock2
00006EA0 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006EA6 6100 0000                  		bsr.w	Deform_SLZ_2
00006EAA 45F8 A800                  		lea	($FFFFA800).w,a2
00006EAE 3038 F70C                  		move.w	($FFFFF70C).w,d0
00006EB2 3400                       		move.w	d0,d2
00006EB4 0440 00C0                  		subi.w	#$C0,d0
00006EB8 0240 03F0                  		andi.w	#$3F0,d0
00006EBC E648                       		lsr.w	#3,d0
00006EBE 45F2 0000                  		lea	(a2,d0.w),a2
00006EC2 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006EC6 323C 000E                  		move.w	#$E,d1
00006ECA 3038 F700                  		move.w	($FFFFF700).w,d0
00006ECE 4440                       		neg.w	d0
00006ED0 4840                       		swap	d0
00006ED2 0242 000F                  		andi.w	#$F,d2
00006ED6 D442                       		add.w	d2,d2
00006ED8 301A                       		move.w	(a2)+,d0
00006EDA 4EFB 2000                  		jmp	loc_6482(pc,d2.w)
00006EDE                            ; ===========================================================================
00006EDE                            
00006EDE                            loc_6480:				; XREF: Deform_SLZ
00006EDE 301A                       		move.w	(a2)+,d0
00006EE0                            
00006EE0                            loc_6482:
00006EE0 22C0                       		move.l	d0,(a1)+
00006EE2 22C0                       		move.l	d0,(a1)+
00006EE4 22C0                       		move.l	d0,(a1)+
00006EE6 22C0                       		move.l	d0,(a1)+
00006EE8 22C0                       		move.l	d0,(a1)+
00006EEA 22C0                       		move.l	d0,(a1)+
00006EEC 22C0                       		move.l	d0,(a1)+
00006EEE 22C0                       		move.l	d0,(a1)+
00006EF0 22C0                       		move.l	d0,(a1)+
00006EF2 22C0                       		move.l	d0,(a1)+
00006EF4 22C0                       		move.l	d0,(a1)+
00006EF6 22C0                       		move.l	d0,(a1)+
00006EF8 22C0                       		move.l	d0,(a1)+
00006EFA 22C0                       		move.l	d0,(a1)+
00006EFC 22C0                       		move.l	d0,(a1)+
00006EFE 22C0                       		move.l	d0,(a1)+
00006F00 51C9 FFDC                  		dbf	d1,loc_6480
00006F04 4E75                       		rts	
00006F06                            ; End of function Deform_SLZ
00006F06                            
00006F06                            
00006F06                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006F06                            
00006F06                            
00006F06                            Deform_SLZ_2:				; XREF: Deform_SLZ
00006F06 43F8 A800                  		lea	($FFFFA800).w,a1
00006F0A 3438 F700                  		move.w	($FFFFF700).w,d2
00006F0E 4442                       		neg.w	d2
00006F10 3002                       		move.w	d2,d0
00006F12 E640                       		asr.w	#3,d0
00006F14 9042                       		sub.w	d2,d0
00006F16 48C0                       		ext.l	d0
00006F18 E980                       		asl.l	#4,d0
00006F1A 81FC 001C                  		divs.w	#$1C,d0
00006F1E 48C0                       		ext.l	d0
00006F20 E980                       		asl.l	#4,d0
00006F22 E180                       		asl.l	#8,d0
00006F24 7600                       		moveq	#0,d3
00006F26 3602                       		move.w	d2,d3
00006F28 323C 001B                  		move.w	#$1B,d1
00006F2C                            
00006F2C                            loc_64CE:
00006F2C 32C3                       		move.w	d3,(a1)+
00006F2E 4843                       		swap	d3
00006F30 D680                       		add.l	d0,d3
00006F32 4843                       		swap	d3
00006F34 51C9 FFF6                  		dbf	d1,loc_64CE
00006F38 3002                       		move.w	d2,d0
00006F3A E640                       		asr.w	#3,d0
00006F3C 323C 0004                  		move.w	#4,d1
00006F40                            
00006F40                            loc_64E2:
00006F40 32C0                       		move.w	d0,(a1)+
00006F42 51C9 FFFC                  		dbf	d1,loc_64E2
00006F46 3002                       		move.w	d2,d0
00006F48 E440                       		asr.w	#2,d0
00006F4A 323C 0004                  		move.w	#4,d1
00006F4E                            
00006F4E                            loc_64F0:
00006F4E 32C0                       		move.w	d0,(a1)+
00006F50 51C9 FFFC                  		dbf	d1,loc_64F0
00006F54 3002                       		move.w	d2,d0
00006F56 E240                       		asr.w	#1,d0
00006F58 323C 001D                  		move.w	#$1D,d1
00006F5C                            
00006F5C                            loc_64FE:
00006F5C 32C0                       		move.w	d0,(a1)+
00006F5E 51C9 FFFC                  		dbf	d1,loc_64FE
00006F62 4E75                       		rts	
00006F64                            ; End of function Deform_SLZ_2
00006F64                            
00006F64                            ; ---------------------------------------------------------------------------
00006F64                            ; Spring Yard Zone background layer deformation	code
00006F64                            ; ---------------------------------------------------------------------------
00006F64                            
00006F64                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006F64                            
00006F64                            
00006F64                            Deform_SYZ:				; XREF: Deform_Index
00006F64 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006F68 48C4                       		ext.l	d4
00006F6A ED84                       		asl.l	#6,d4
00006F6C 3A38 F73C                  		move.w	($FFFFF73C).w,d5
00006F70 48C5                       		ext.l	d5
00006F72 E985                       		asl.l	#4,d5
00006F74 2205                       		move.l	d5,d1
00006F76 E385                       		asl.l	#1,d5
00006F78 DA81                       		add.l	d1,d5
00006F7A 6100 0000                  		bsr.w	ScrollBlock1
00006F7E 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006F84 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006F88 323C 00DF                  		move.w	#$DF,d1
00006F8C 3038 F700                  		move.w	($FFFFF700).w,d0
00006F90 4440                       		neg.w	d0
00006F92 4840                       		swap	d0
00006F94 3038 F708                  		move.w	($FFFFF708).w,d0
00006F98 4440                       		neg.w	d0
00006F9A                            
00006F9A                            loc_653C:
00006F9A 22C0                       		move.l	d0,(a1)+
00006F9C 51C9 FFFC                  		dbf	d1,loc_653C
00006FA0 4E75                       		rts	
00006FA2                            ; End of function Deform_SYZ
00006FA2                            
00006FA2                            ; ---------------------------------------------------------------------------
00006FA2                            ; Scrap	Brain Zone background layer deformation	code
00006FA2                            ; ---------------------------------------------------------------------------
00006FA2                            
00006FA2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006FA2                            
00006FA2                            
00006FA2                            Deform_SBZ:				; XREF: Deform_Index
00006FA2 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006FA6 48C4                       		ext.l	d4
00006FA8 ED84                       		asl.l	#6,d4
00006FAA 3A38 F73C                  		move.w	($FFFFF73C).w,d5
00006FAE 48C5                       		ext.l	d5
00006FB0 E985                       		asl.l	#4,d5
00006FB2 E385                       		asl.l	#1,d5
00006FB4 6100 0000                  		bsr.w	ScrollBlock1
00006FB8 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006FBE 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006FC2 323C 00DF                  		move.w	#$DF,d1
00006FC6 3038 F700                  		move.w	($FFFFF700).w,d0
00006FCA 4440                       		neg.w	d0
00006FCC 4840                       		swap	d0
00006FCE 3038 F708                  		move.w	($FFFFF708).w,d0
00006FD2 4440                       		neg.w	d0
00006FD4                            
00006FD4                            loc_6576:
00006FD4 22C0                       		move.l	d0,(a1)+
00006FD6 51C9 FFFC                  		dbf	d1,loc_6576
00006FDA 4E75                       		rts	
00006FDC                            ; End of function Deform_SBZ
00006FDC                            
00006FDC                            ; ---------------------------------------------------------------------------
00006FDC                            ; Subroutine to	scroll the level horizontally as Sonic moves
00006FDC                            ; ---------------------------------------------------------------------------
00006FDC                            
00006FDC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006FDC                            
00006FDC                            
00006FDC                            ScrollHoriz:				; XREF: DeformBgLayer
00006FDC 3838 F700                  		move.w	($FFFFF700).w,d4
00006FE0 6100                       		bsr.s	ScrollHoriz2
00006FE2 3038 F700                  		move.w	($FFFFF700).w,d0
00006FE6 0240 0010                  		andi.w	#$10,d0
00006FEA 1238 F74A                  		move.b	($FFFFF74A).w,d1
00006FEE B300                       		eor.b	d1,d0
00006FF0 6600                       		bne.s	locret_65B0
00006FF2 0A38 0010 F74A             		eori.b	#$10,($FFFFF74A).w
00006FF8 3038 F700                  		move.w	($FFFFF700).w,d0
00006FFC 9044                       		sub.w	d4,d0
00006FFE 6A00                       		bpl.s	loc_65AA
00007000 08F8 0002 F754             		bset	#2,($FFFFF754).w
00007006 4E75                       		rts	
00007008                            ; ===========================================================================
00007008                            
00007008                            loc_65AA:
00007008 08F8 0003 F754             		bset	#3,($FFFFF754).w
0000700E                            
0000700E                            locret_65B0:
0000700E 4E75                       		rts	
00007010                            ; End of function ScrollHoriz
00007010                            
00007010                            
00007010                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007010                            
00007010                            
00007010                            ScrollHoriz2:				; XREF: ScrollHoriz
00007010 3238 C904                  		move.w	($FFFFC904).w,d1
00007014 6700                       		beq.s	@cont1
00007016 0441 0100                  		sub.w	#$100,d1
0000701A 31C1 C904                  		move.w	d1,($FFFFC904).w
0000701E 7200                       		moveq	#0,d1
00007020 1238 C904                  		move.b	($FFFFC904).w,d1
00007024 E509                       		lsl.b	#2,d1
00007026 5801                       		addq.b	#4,d1
00007028 3038 F7A8                  		move.w	($FFFFF7A8).w,d0
0000702C 9001                       		sub.b	d1,d0
0000702E 43F8 CB00                  		lea	($FFFFCB00).w,a1
00007032 3031 0000                  		move.w	(a1,d0.w),d0
00007036 0240 3FFF                  		and.w	#$3FFF,d0
0000703A 6000                       		bra.s	@cont2
0000703C                            		
0000703C                            @cont1:
0000703C 3038 D008                  		move.w	($FFFFD008).w,d0
00007040                            		
00007040                            @cont2:
00007040 9078 F700                  		sub.w	($FFFFF700).w,d0
00007044 0440 0090                  		subi.w	#$90,d0
00007048 6500                       		bcs.s	loc_65F6
0000704A 0440 0010                  		subi.w	#$10,d0
0000704E 6400                       		bcc.s	loc_65CC
00007050 4278 F73A                  		clr.w	($FFFFF73A).w
00007054 4E75                       		rts	
00007056                            ; ===========================================================================
00007056                            
00007056                            loc_65CC:
00007056 0C40 0010                  		cmpi.w	#$10,d0
0000705A 6500                       		bcs.s	loc_65D6
0000705C 303C 0010                  		move.w	#$10,d0
00007060                            
00007060                            loc_65D6:
00007060 D078 F700                  		add.w	($FFFFF700).w,d0
00007064 B078 F72A                  		cmp.w	($FFFFF72A).w,d0
00007068 6D00                       		blt.s	loc_65E4
0000706A 3038 F72A                  		move.w	($FFFFF72A).w,d0
0000706E                            
0000706E                            loc_65E4:
0000706E 3200                       		move.w	d0,d1
00007070 9278 F700                  		sub.w	($FFFFF700).w,d1
00007074 E141                       		asl.w	#8,d1
00007076 31C0 F700                  		move.w	d0,($FFFFF700).w
0000707A 31C1 F73A                  		move.w	d1,($FFFFF73A).w
0000707E 4E75                       		rts	
00007080                            ; ===========================================================================
00007080                            
00007080                            loc_65F6:				; XREF: ScrollHoriz2
00007080 0C40 FFF0                  		cmpi.w	#-$10,d0
00007084 6E00                       		bgt.s	@cont
00007086 303C FFF0                  		move.w	#-$10,d0	
0000708A                            		
0000708A                            @cont:
0000708A D078 F700                  		add.w	($FFFFF700).w,d0
0000708E B078 F728                  		cmp.w	($FFFFF728).w,d0
00007092 6EDA                       		bgt.s	loc_65E4
00007094 3038 F728                  		move.w	($FFFFF728).w,d0
00007098 60D4                       		bra.s	loc_65E4
0000709A                            ; End of function ScrollHoriz2
0000709A                            
0000709A                            ; ===========================================================================
0000709A 4A40                       		tst.w	d0
0000709C 6A00                       		bpl.s	loc_6610
0000709E 303C FFFE                  		move.w	#-2,d0
000070A2 60DC                       		bra.s	loc_65F6
000070A4                            ; ===========================================================================
000070A4                            
000070A4                            loc_6610:
000070A4 303C 0002                  		move.w	#2,d0
000070A8 60AC                       		bra.s	loc_65CC
000070AA                            
000070AA                            ; ---------------------------------------------------------------------------
000070AA                            ; Subroutine to	scroll the level vertically as Sonic moves
000070AA                            ; ---------------------------------------------------------------------------
000070AA                            
000070AA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000070AA                            
000070AA                            
000070AA                            ScrollVertical:				; XREF: DeformBgLayer
000070AA 7200                       		moveq	#0,d1
000070AC 3038 D00C                  		move.w	($FFFFD00C).w,d0
000070B0 9078 F704                  		sub.w	($FFFFF704).w,d0
000070B4 0838 0002 D022             		btst	#2,($FFFFD022).w
000070BA 6700                       		beq.s	loc_662A
000070BC 5B40                       		subq.w	#5,d0
000070BE                            
000070BE                            loc_662A:
000070BE 0838 0001 D022             		btst	#1,($FFFFD022).w
000070C4 6700                       		beq.s	loc_664A
000070C6 0640 0020                  		addi.w	#$20,d0
000070CA 9078 F73E                  		sub.w	($FFFFF73E).w,d0
000070CE 6500                       		bcs.s	loc_6696
000070D0 0440 0040                  		subi.w	#$40,d0
000070D4 6400                       		bcc.s	loc_6696
000070D6 4A38 F75C                  		tst.b	($FFFFF75C).w
000070DA 6600                       		bne.s	loc_66A8
000070DC 6000                       		bra.s	loc_6656
000070DE                            ; ===========================================================================
000070DE                            
000070DE                            loc_664A:
000070DE 9078 F73E                  		sub.w	($FFFFF73E).w,d0
000070E2 6600                       		bne.s	loc_665C
000070E4 4A38 F75C                  		tst.b	($FFFFF75C).w
000070E8 6600                       		bne.s	loc_66A8
000070EA                            
000070EA                            loc_6656:
000070EA 4278 F73C                  		clr.w	($FFFFF73C).w
000070EE 4E75                       		rts	
000070F0                            ; ===========================================================================
000070F0                            
000070F0                            loc_665C:
000070F0 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w
000070F6 6600                       		bne.s	loc_6684
000070F8 3238 D014                  		move.w	($FFFFD014).w,d1
000070FC 6A00                       		bpl.s	loc_666C
000070FE 4441                       		neg.w	d1
00007100                            
00007100                            loc_666C:
00007100 0C41 0800                  		cmpi.w	#$800,d1
00007104 6400                       		bcc.s	loc_6696
00007106 323C 0600                  		move.w	#$600,d1
0000710A 0C40 0006                  		cmpi.w	#6,d0
0000710E 6E00                       		bgt.s	loc_66F6
00007110 0C40 FFFA                  		cmpi.w	#-6,d0
00007114 6D00                       		blt.s	loc_66C0
00007116 6000                       		bra.s	loc_66AE
00007118                            ; ===========================================================================
00007118                            
00007118                            loc_6684:
00007118 323C 0200                  		move.w	#$200,d1
0000711C 0C40 0002                  		cmpi.w	#2,d0
00007120 6E00                       		bgt.s	loc_66F6
00007122 0C40 FFFE                  		cmpi.w	#-2,d0
00007126 6D00                       		blt.s	loc_66C0
00007128 6000                       		bra.s	loc_66AE
0000712A                            ; ===========================================================================
0000712A                            
0000712A                            loc_6696:
0000712A 323C 1000                  		move.w	#$1000,d1
0000712E 0C40 0010                  		cmpi.w	#$10,d0
00007132 6E00                       		bgt.s	loc_66F6
00007134 0C40 FFF0                  		cmpi.w	#-$10,d0
00007138 6D00                       		blt.s	loc_66C0
0000713A 6000                       		bra.s	loc_66AE
0000713C                            ; ===========================================================================
0000713C                            
0000713C                            loc_66A8:
0000713C 7000                       		moveq	#0,d0
0000713E 11C0 F75C                  		move.b	d0,($FFFFF75C).w
00007142                            
00007142                            loc_66AE:
00007142 7200                       		moveq	#0,d1
00007144 3200                       		move.w	d0,d1
00007146 D278 F704                  		add.w	($FFFFF704).w,d1
0000714A 4A40                       		tst.w	d0
0000714C 6A00 0000                  		bpl.w	loc_6700
00007150 6000 0000                  		bra.w	loc_66CC
00007154                            ; ===========================================================================
00007154                            
00007154                            loc_66C0:
00007154 4441                       		neg.w	d1
00007156 48C1                       		ext.l	d1
00007158 E181                       		asl.l	#8,d1
0000715A D2B8 F704                  		add.l	($FFFFF704).w,d1
0000715E 4841                       		swap	d1
00007160                            
00007160                            loc_66CC:
00007160 B278 F72C                  		cmp.w	($FFFFF72C).w,d1
00007164 6E00                       		bgt.s	loc_6724
00007166 0C41 FF00                  		cmpi.w	#-$100,d1
0000716A 6E00                       		bgt.s	loc_66F0
0000716C 0241 07FF                  		andi.w	#$7FF,d1
00007170 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
00007176 0278 07FF F704             		andi.w	#$7FF,($FFFFF704).w
0000717C 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
00007182 6000                       		bra.s	loc_6724
00007184                            ; ===========================================================================
00007184                            
00007184                            loc_66F0:
00007184 3238 F72C                  		move.w	($FFFFF72C).w,d1
00007188 6000                       		bra.s	loc_6724
0000718A                            ; ===========================================================================
0000718A                            
0000718A                            loc_66F6:
0000718A 48C1                       		ext.l	d1
0000718C E181                       		asl.l	#8,d1
0000718E D2B8 F704                  		add.l	($FFFFF704).w,d1
00007192 4841                       		swap	d1
00007194                            
00007194                            loc_6700:
00007194 B278 F72E                  		cmp.w	($FFFFF72E).w,d1
00007198 6D00                       		blt.s	loc_6724
0000719A 0441 0800                  		subi.w	#$800,d1
0000719E 6500                       		bcs.s	loc_6720
000071A0 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
000071A6 0478 0800 F704             		subi.w	#$800,($FFFFF704).w
000071AC 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
000071B2 6000                       		bra.s	loc_6724
000071B4                            ; ===========================================================================
000071B4                            
000071B4                            loc_6720:
000071B4 3238 F72E                  		move.w	($FFFFF72E).w,d1
000071B8                            
000071B8                            loc_6724:
000071B8 3838 F704                  		move.w	($FFFFF704).w,d4
000071BC 4841                       		swap	d1
000071BE 2601                       		move.l	d1,d3
000071C0 96B8 F704                  		sub.l	($FFFFF704).w,d3
000071C4 E09B                       		ror.l	#8,d3
000071C6 31C3 F73C                  		move.w	d3,($FFFFF73C).w
000071CA 21C1 F704                  		move.l	d1,($FFFFF704).w
000071CE 3038 F704                  		move.w	($FFFFF704).w,d0
000071D2 0240 0010                  		andi.w	#$10,d0
000071D6 1238 F74B                  		move.b	($FFFFF74B).w,d1
000071DA B300                       		eor.b	d1,d0
000071DC 6600                       		bne.s	locret_6766
000071DE 0A38 0010 F74B             		eori.b	#$10,($FFFFF74B).w
000071E4 3038 F704                  		move.w	($FFFFF704).w,d0
000071E8 9044                       		sub.w	d4,d0
000071EA 6A00                       		bpl.s	loc_6760
000071EC 08F8 0000 F754             		bset	#0,($FFFFF754).w
000071F2 4E75                       		rts	
000071F4                            ; ===========================================================================
000071F4                            
000071F4                            loc_6760:
000071F4 08F8 0001 F754             		bset	#1,($FFFFF754).w
000071FA                            
000071FA                            locret_6766:
000071FA 4E75                       		rts	
000071FC                            ; End of function ScrollVertical
000071FC                            
000071FC                            
000071FC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000071FC                            
000071FC                            
000071FC                            ScrollBlock1:				; XREF: Deform_GHZ; et al
000071FC 2438 F708                  		move.l	($FFFFF708).w,d2
00007200 2002                       		move.l	d2,d0
00007202 D084                       		add.l	d4,d0
00007204 21C0 F708                  		move.l	d0,($FFFFF708).w
00007208 2200                       		move.l	d0,d1
0000720A 4841                       		swap	d1
0000720C 0241 0010                  		andi.w	#$10,d1
00007210 1638 F74C                  		move.b	($FFFFF74C).w,d3
00007214 B701                       		eor.b	d3,d1
00007216 6600                       		bne.s	loc_679C
00007218 0A38 0010 F74C             		eori.b	#$10,($FFFFF74C).w
0000721E 9082                       		sub.l	d2,d0
00007220 6A00                       		bpl.s	loc_6796
00007222 08F8 0002 F756             		bset	#2,($FFFFF756).w
00007228 6000                       		bra.s	loc_679C
0000722A                            ; ===========================================================================
0000722A                            
0000722A                            loc_6796:
0000722A 08F8 0003 F756             		bset	#3,($FFFFF756).w
00007230                            
00007230                            loc_679C:
00007230 2638 F70C                  		move.l	($FFFFF70C).w,d3
00007234 2003                       		move.l	d3,d0
00007236 D085                       		add.l	d5,d0
00007238 21C0 F70C                  		move.l	d0,($FFFFF70C).w
0000723C 2200                       		move.l	d0,d1
0000723E 4841                       		swap	d1
00007240 0241 0010                  		andi.w	#$10,d1
00007244 1438 F74D                  		move.b	($FFFFF74D).w,d2
00007248 B501                       		eor.b	d2,d1
0000724A 6600                       		bne.s	locret_67D0
0000724C 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
00007252 9083                       		sub.l	d3,d0
00007254 6A00                       		bpl.s	loc_67CA
00007256 08F8 0000 F756             		bset	#0,($FFFFF756).w
0000725C 4E75                       		rts	
0000725E                            ; ===========================================================================
0000725E                            
0000725E                            loc_67CA:
0000725E 08F8 0001 F756             		bset	#1,($FFFFF756).w
00007264                            
00007264                            locret_67D0:
00007264 4E75                       		rts	
00007266                            ; End of function ScrollBlock1
00007266                            
00007266                            
00007266                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007266                            
00007266                            
00007266                            ScrollBlock2:				; XREF: Deform_SLZ
00007266 2438 F708                  		move.l	($FFFFF708).w,d2
0000726A 2002                       		move.l	d2,d0
0000726C D084                       		add.l	d4,d0
0000726E 21C0 F708                  		move.l	d0,($FFFFF708).w
00007272 2638 F70C                  		move.l	($FFFFF70C).w,d3
00007276 2003                       		move.l	d3,d0
00007278 D085                       		add.l	d5,d0
0000727A 21C0 F70C                  		move.l	d0,($FFFFF70C).w
0000727E 2200                       		move.l	d0,d1
00007280 4841                       		swap	d1
00007282 0241 0010                  		andi.w	#$10,d1
00007286 1438 F74D                  		move.b	($FFFFF74D).w,d2
0000728A B501                       		eor.b	d2,d1
0000728C 6600                       		bne.s	locret_6812
0000728E 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
00007294 9083                       		sub.l	d3,d0
00007296 6A00                       		bpl.s	loc_680C
00007298 08F8 0000 F756             		bset	#0,($FFFFF756).w
0000729E 4E75                       		rts	
000072A0                            ; ===========================================================================
000072A0                            
000072A0                            loc_680C:
000072A0 08F8 0001 F756             		bset	#1,($FFFFF756).w
000072A6                            
000072A6                            locret_6812:
000072A6 4E75                       		rts	
000072A8                            ; End of function ScrollBlock2
000072A8                            
000072A8                            
000072A8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000072A8                            
000072A8                            
000072A8                            ScrollBlock3:				; XREF: Deform_GHZ; et al
000072A8 3638 F70C                  		move.w	($FFFFF70C).w,d3
000072AC 31C0 F70C                  		move.w	d0,($FFFFF70C).w
000072B0 3200                       		move.w	d0,d1
000072B2 0241 0010                  		andi.w	#$10,d1
000072B6 1438 F74D                  		move.b	($FFFFF74D).w,d2
000072BA B501                       		eor.b	d2,d1
000072BC 6600                       		bne.s	locret_6842
000072BE 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
000072C4 9043                       		sub.w	d3,d0
000072C6 6A00                       		bpl.s	loc_683C
000072C8 08F8 0000 F756             		bset	#0,($FFFFF756).w
000072CE 4E75                       		rts	
000072D0                            ; ===========================================================================
000072D0                            
000072D0                            loc_683C:
000072D0 08F8 0001 F756             		bset	#1,($FFFFF756).w
000072D6                            
000072D6                            locret_6842:
000072D6 4E75                       		rts	
000072D8                            ; End of function ScrollBlock3
000072D8                            
000072D8                            
000072D8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000072D8                            
000072D8                            
000072D8                            ScrollBlock4:				; XREF: Deform_GHZ
000072D8 3438 F710                  		move.w	($FFFFF710).w,d2
000072DC 3638 F714                  		move.w	($FFFFF714).w,d3
000072E0 3038 F73A                  		move.w	($FFFFF73A).w,d0
000072E4 48C0                       		ext.l	d0
000072E6 EF80                       		asl.l	#7,d0
000072E8 D1B8 F710                  		add.l	d0,($FFFFF710).w
000072EC 3038 F710                  		move.w	($FFFFF710).w,d0
000072F0 0240 0010                  		andi.w	#$10,d0
000072F4 1238 F74E                  		move.b	($FFFFF74E).w,d1
000072F8 B300                       		eor.b	d1,d0
000072FA 6600                       		bne.s	locret_6884
000072FC 0A38 0010 F74E             		eori.b	#$10,($FFFFF74E).w
00007302 3038 F710                  		move.w	($FFFFF710).w,d0
00007306 9042                       		sub.w	d2,d0
00007308 6A00                       		bpl.s	loc_687E
0000730A 08F8 0002 F758             		bset	#2,($FFFFF758).w
00007310 6000                       		bra.s	locret_6884
00007312                            ; ===========================================================================
00007312                            
00007312                            loc_687E:
00007312 08F8 0003 F758             		bset	#3,($FFFFF758).w
00007318                            
00007318                            locret_6884:
00007318 4E75                       		rts	
0000731A                            ; End of function ScrollBlock4
0000731A                            
0000731A                            
0000731A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000731A                            
0000731A                            
0000731A                            sub_6886:				; XREF: loc_C44
0000731A 4BF9 00C0 0004             		lea	($C00004).l,a5
00007320 4DF9 00C0 0000             		lea	($C00000).l,a6
00007326 45F8 F756                  		lea	($FFFFF756).w,a2
0000732A 47F8 F708                  		lea	($FFFFF708).w,a3
0000732E 49F8 A440                  		lea	($FFFFA440).w,a4
00007332 343C 6000                  		move.w	#$6000,d2
00007336 6100 0000                  		bsr.w	sub_6954
0000733A 45F8 F758                  		lea	($FFFFF758).w,a2
0000733E 47F8 F710                  		lea	($FFFFF710).w,a3
00007342 6000 0000                  		bra.w	sub_69F4
00007346                            ; End of function sub_6886
00007346                            
00007346                            ; ---------------------------------------------------------------------------
00007346                            ; Subroutine to	display	correct	tiles as you move
00007346                            ; ---------------------------------------------------------------------------
00007346                            
00007346                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007346                            
00007346                            
00007346                            LoadTilesAsYouMove:			; XREF: Demo_Time
00007346 4BF9 00C0 0004             		lea	($C00004).l,a5
0000734C 4DF9 00C0 0000             		lea	($C00000).l,a6
00007352 45F8 FF32                  		lea	($FFFFFF32).w,a2
00007356 47F8 FF18                  		lea	($FFFFFF18).w,a3
0000735A 49F8 A440                  		lea	($FFFFA440).w,a4
0000735E 343C 6000                  		move.w	#$6000,d2
00007362 6100 0000                  		bsr.w	sub_6954
00007366 45F8 FF34                  		lea	($FFFFFF34).w,a2
0000736A 47F8 FF20                  		lea	($FFFFFF20).w,a3
0000736E 6100 0000                  		bsr.w	sub_69F4
00007372 45F8 FF30                  		lea	($FFFFFF30).w,a2
00007376 47F8 FF10                  		lea	($FFFFFF10).w,a3
0000737A 49F8 A400                  		lea	($FFFFA400).w,a4
0000737E 343C 4000                  		move.w	#$4000,d2
00007382 4A12                       		tst.b	(a2)
00007384 6700                       		beq.s	locret_6952
00007386 0892 0000                  		bclr	#0,(a2)
0000738A 6700                       		beq.s	loc_6908
0000738C 78F0                       		moveq	#-$10,d4
0000738E 7AF0                       		moveq	#-$10,d5
00007390 6100 0000                  		bsr.w	sub_6C20
00007394 78F0                       		moveq	#-$10,d4
00007396 7AF0                       		moveq	#-$10,d5
00007398 6100 0000                  		bsr.w	sub_6AD8
0000739C                            
0000739C                            loc_6908:
0000739C 0892 0001                  		bclr	#1,(a2)
000073A0 6700                       		beq.s	loc_6922
000073A2 383C 00E0                  		move.w	#$E0,d4
000073A6 7AF0                       		moveq	#-$10,d5
000073A8 6100 0000                  		bsr.w	sub_6C20
000073AC 383C 00E0                  		move.w	#$E0,d4
000073B0 7AF0                       		moveq	#-$10,d5
000073B2 6100 0000                  		bsr.w	sub_6AD8
000073B6                            
000073B6                            loc_6922:
000073B6 0892 0002                  		bclr	#2,(a2)
000073BA 6700                       		beq.s	loc_6938
000073BC 78F0                       		moveq	#-$10,d4
000073BE 7AF0                       		moveq	#-$10,d5
000073C0 6100 0000                  		bsr.w	sub_6C20
000073C4 78F0                       		moveq	#-$10,d4
000073C6 7AF0                       		moveq	#-$10,d5
000073C8 6100 0000                  		bsr.w	sub_6B04
000073CC                            
000073CC                            loc_6938:
000073CC 0892 0003                  		bclr	#3,(a2)
000073D0 6700                       		beq.s	locret_6952
000073D2 78F0                       		moveq	#-$10,d4
000073D4 3A3C 0140                  		move.w	#$140,d5
000073D8 6100 0000                  		bsr.w	sub_6C20
000073DC 78F0                       		moveq	#-$10,d4
000073DE 3A3C 0140                  		move.w	#$140,d5
000073E2 6100 0000                  		bsr.w	sub_6B04
000073E6                            
000073E6                            locret_6952:
000073E6 4E75                       		rts	
000073E8                            ; End of function LoadTilesAsYouMove
000073E8                            
000073E8                            
000073E8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000073E8                            
000073E8                            
000073E8                            sub_6954:				; XREF: sub_6886; LoadTilesAsYouMove
000073E8 4A12                       		tst.b	(a2)
000073EA 6700 0000                  		beq.w	locret_69F2
000073EE 0892 0000                  		bclr	#0,(a2)
000073F2 6700                       		beq.s	loc_6972
000073F4 78F0                       		moveq	#-$10,d4
000073F6 7AF0                       		moveq	#-$10,d5
000073F8 6100 0000                  		bsr.w	sub_6C20
000073FC 78F0                       		moveq	#-$10,d4
000073FE 7AF0                       		moveq	#-$10,d5
00007400 7C1F                       		moveq	#$1F,d6
00007402 6100 0000                  		bsr.w	sub_6ADA
00007406                            
00007406                            loc_6972:
00007406 0892 0001                  		bclr	#1,(a2)
0000740A 6700                       		beq.s	loc_698E
0000740C 383C 00E0                  		move.w	#$E0,d4
00007410 7AF0                       		moveq	#-$10,d5
00007412 6100 0000                  		bsr.w	sub_6C20
00007416 383C 00E0                  		move.w	#$E0,d4
0000741A 7AF0                       		moveq	#-$10,d5
0000741C 7C1F                       		moveq	#$1F,d6
0000741E 6100 0000                  		bsr.w	sub_6ADA
00007422                            
00007422                            loc_698E:
00007422 0892 0002                  		bclr	#2,(a2)
00007426 6700                       		beq.s	loc_69BE
00007428 78F0                       		moveq	#-$10,d4
0000742A 7AF0                       		moveq	#-$10,d5
0000742C 6100 0000                  		bsr.w	sub_6C20
00007430 78F0                       		moveq	#-$10,d4
00007432 7AF0                       		moveq	#-$10,d5
00007434 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
00007438 322B 0004                  		move.w	4(a3),d1
0000743C 0241 FFF0                  		andi.w	#-$10,d1
00007440 9C41                       		sub.w	d1,d6
00007442 6D00                       		blt.s	loc_69BE
00007444 E84E                       		lsr.w	#4,d6
00007446 0C46 000F                  		cmpi.w	#$F,d6
0000744A 6500                       		bcs.s	loc_69BA
0000744C 7C0F                       		moveq	#$F,d6
0000744E                            
0000744E                            loc_69BA:
0000744E 6100 0000                  		bsr.w	sub_6B06
00007452                            
00007452                            loc_69BE:
00007452 0892 0003                  		bclr	#3,(a2)
00007456 6700                       		beq.s	locret_69F2
00007458 78F0                       		moveq	#-$10,d4
0000745A 3A3C 0140                  		move.w	#$140,d5
0000745E 6100 0000                  		bsr.w	sub_6C20
00007462 78F0                       		moveq	#-$10,d4
00007464 3A3C 0140                  		move.w	#$140,d5
00007468 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
0000746C 322B 0004                  		move.w	4(a3),d1
00007470 0241 FFF0                  		andi.w	#-$10,d1
00007474 9C41                       		sub.w	d1,d6
00007476 6D00                       		blt.s	locret_69F2
00007478 E84E                       		lsr.w	#4,d6
0000747A 0C46 000F                  		cmpi.w	#$F,d6
0000747E 6500                       		bcs.s	loc_69EE
00007480 7C0F                       		moveq	#$F,d6
00007482                            
00007482                            loc_69EE:
00007482 6100 0000                  		bsr.w	sub_6B06
00007486                            
00007486                            locret_69F2:
00007486 4E75                       		rts	
00007488                            ; End of function sub_6954
00007488                            
00007488                            
00007488                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007488                            
00007488                            
00007488                            sub_69F4:				; XREF: sub_6886; LoadTilesAsYouMove
00007488 4A12                       		tst.b	(a2)
0000748A 6700 0000                  		beq.w	locret_6A80
0000748E 0892 0002                  		bclr	#2,(a2)
00007492 6700                       		beq.s	loc_6A3E
00007494 0C53 0010                  		cmpi.w	#$10,(a3)
00007498 6500                       		bcs.s	loc_6A3E
0000749A 3838 F7F0                  		move.w	($FFFFF7F0).w,d4
0000749E 322B 0004                  		move.w	4(a3),d1
000074A2 0241 FFF0                  		andi.w	#-$10,d1
000074A6 9841                       		sub.w	d1,d4
000074A8 3F04                       		move.w	d4,-(sp)
000074AA 7AF0                       		moveq	#-$10,d5
000074AC 6100 0000                  		bsr.w	sub_6C20
000074B0 381F                       		move.w	(sp)+,d4
000074B2 7AF0                       		moveq	#-$10,d5
000074B4 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
000074B8 322B 0004                  		move.w	4(a3),d1
000074BC 0241 FFF0                  		andi.w	#-$10,d1
000074C0 9C41                       		sub.w	d1,d6
000074C2 6D00                       		blt.s	loc_6A3E
000074C4 E84E                       		lsr.w	#4,d6
000074C6 0446 000E                  		subi.w	#$E,d6
000074CA 6400                       		bcc.s	loc_6A3E
000074CC 4446                       		neg.w	d6
000074CE 6100 0000                  		bsr.w	sub_6B06
000074D2                            
000074D2                            loc_6A3E:
000074D2 0892 0003                  		bclr	#3,(a2)
000074D6 6700                       		beq.s	locret_6A80
000074D8 3838 F7F0                  		move.w	($FFFFF7F0).w,d4
000074DC 322B 0004                  		move.w	4(a3),d1
000074E0 0241 FFF0                  		andi.w	#-$10,d1
000074E4 9841                       		sub.w	d1,d4
000074E6 3F04                       		move.w	d4,-(sp)
000074E8 3A3C 0140                  		move.w	#$140,d5
000074EC 6100 0000                  		bsr.w	sub_6C20
000074F0 381F                       		move.w	(sp)+,d4
000074F2 3A3C 0140                  		move.w	#$140,d5
000074F6 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
000074FA 322B 0004                  		move.w	4(a3),d1
000074FE 0241 FFF0                  		andi.w	#-$10,d1
00007502 9C41                       		sub.w	d1,d6
00007504 6D00                       		blt.s	locret_6A80
00007506 E84E                       		lsr.w	#4,d6
00007508 0446 000E                  		subi.w	#$E,d6
0000750C 6400                       		bcc.s	locret_6A80
0000750E 4446                       		neg.w	d6
00007510 6100 0000                  		bsr.w	sub_6B06
00007514                            
00007514                            locret_6A80:
00007514 4E75                       		rts	
00007516                            ; End of function sub_69F4
00007516                            
00007516                            ; ===========================================================================
00007516 4A12                       		tst.b	(a2)
00007518 6700                       		beq.s	locret_6AD6
0000751A 0892 0002                  		bclr	#2,(a2)
0000751E 6700                       		beq.s	loc_6AAC
00007520 383C 00D0                  		move.w	#$D0,d4
00007524 322B 0004                  		move.w	4(a3),d1
00007528 0241 FFF0                  		andi.w	#-$10,d1
0000752C 9841                       		sub.w	d1,d4
0000752E 3F04                       		move.w	d4,-(sp)
00007530 7AF0                       		moveq	#-$10,d5
00007532 6100 0000                  		bsr.w	sub_6C3C
00007536 381F                       		move.w	(sp)+,d4
00007538 7AF0                       		moveq	#-$10,d5
0000753A 7C02                       		moveq	#2,d6
0000753C 6100 0000                  		bsr.w	sub_6B06
00007540                            
00007540                            loc_6AAC:
00007540 0892 0003                  		bclr	#3,(a2)
00007544 6700                       		beq.s	locret_6AD6
00007546 383C 00D0                  		move.w	#$D0,d4
0000754A 322B 0004                  		move.w	4(a3),d1
0000754E 0241 FFF0                  		andi.w	#-$10,d1
00007552 9841                       		sub.w	d1,d4
00007554 3F04                       		move.w	d4,-(sp)
00007556 3A3C 0140                  		move.w	#$140,d5
0000755A 6100 0000                  		bsr.w	sub_6C3C
0000755E 381F                       		move.w	(sp)+,d4
00007560 3A3C 0140                  		move.w	#$140,d5
00007564 7C02                       		moveq	#2,d6
00007566 6100 0000                  		bsr.w	sub_6B06
0000756A                            
0000756A                            locret_6AD6:
0000756A 4E75                       		rts	
0000756C                            
0000756C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000756C                            
0000756C                            
0000756C                            sub_6AD8:				; XREF: LoadTilesAsYouMove
0000756C 7C15                       		moveq	#$15,d6
0000756E                            ; End of function sub_6AD8
0000756E                            
0000756E                            
0000756E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000756E                            
0000756E                            
0000756E                            sub_6ADA:				; XREF: sub_6954; LoadTilesFromStart2
0000756E 2E3C 0080 0000             		move.l	#$800000,d7
00007574 2200                       		move.l	d0,d1
00007576                            
00007576                            loc_6AE2:
00007576 48E7 0C00                  		movem.l	d4-d5,-(sp)
0000757A 6100 0000                  		bsr.w	sub_6BD6
0000757E 2001                       		move.l	d1,d0
00007580 6100 0000                  		bsr.w	sub_6B32
00007584 5801                       		addq.b	#4,d1
00007586 0201 007F                  		andi.b	#$7F,d1
0000758A 4CDF 0030                  		movem.l	(sp)+,d4-d5
0000758E 0645 0010                  		addi.w	#$10,d5
00007592 51CE FFE2                  		dbf	d6,loc_6AE2
00007596 4E75                       		rts	
00007598                            ; End of function sub_6ADA
00007598                            
00007598                            
00007598                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007598                            
00007598                            
00007598                            sub_6B04:				; XREF: LoadTilesAsYouMove
00007598 7C0F                       		moveq	#$F,d6
0000759A                            ; End of function sub_6B04
0000759A                            
0000759A                            
0000759A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000759A                            
0000759A                            
0000759A                            sub_6B06:				; XREF: sub_6954
0000759A 2E3C 0080 0000             		move.l	#$800000,d7
000075A0 2200                       		move.l	d0,d1
000075A2                            
000075A2                            loc_6B0E:
000075A2 48E7 0C00                  		movem.l	d4-d5,-(sp)
000075A6 6100 0000                  		bsr.w	sub_6BD6
000075AA 2001                       		move.l	d1,d0
000075AC 6100 0000                  		bsr.w	sub_6B32
000075B0 0641 0100                  		addi.w	#$100,d1
000075B4 0241 0FFF                  		andi.w	#$FFF,d1
000075B8 4CDF 0030                  		movem.l	(sp)+,d4-d5
000075BC 0644 0010                  		addi.w	#$10,d4
000075C0 51CE FFE0                  		dbf	d6,loc_6B0E
000075C4 4E75                       		rts	
000075C6                            ; End of function sub_6B06
000075C6                            
000075C6                            
000075C6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000075C6                            
000075C6                            
000075C6                            sub_6B32:				; XREF: sub_6ADA; sub_6B06
000075C6 8042                       		or.w	d2,d0
000075C8 4840                       		swap	d0
000075CA 0810 0004                  		btst	#4,(a0)
000075CE 6600                       		bne.s	loc_6B6E
000075D0 0810 0003                  		btst	#3,(a0)
000075D4 6600                       		bne.s	loc_6B4E
000075D6 2A80                       		move.l	d0,(a5)
000075D8 2C99                       		move.l	(a1)+,(a6)
000075DA D087                       		add.l	d7,d0
000075DC 2A80                       		move.l	d0,(a5)
000075DE 2C99                       		move.l	(a1)+,(a6)
000075E0 4E75                       		rts	
000075E2                            ; ===========================================================================
000075E2                            
000075E2                            loc_6B4E:
000075E2 2A80                       		move.l	d0,(a5)
000075E4 2819                       		move.l	(a1)+,d4
000075E6 0A84 0800 0800             		eori.l	#$8000800,d4
000075EC 4844                       		swap	d4
000075EE 2C84                       		move.l	d4,(a6)
000075F0 D087                       		add.l	d7,d0
000075F2 2A80                       		move.l	d0,(a5)
000075F4 2819                       		move.l	(a1)+,d4
000075F6 0A84 0800 0800             		eori.l	#$8000800,d4
000075FC 4844                       		swap	d4
000075FE 2C84                       		move.l	d4,(a6)
00007600 4E75                       		rts	
00007602                            ; ===========================================================================
00007602                            
00007602                            loc_6B6E:
00007602 0810 0003                  		btst	#3,(a0)
00007606 6600                       		bne.s	loc_6B90
00007608 2A80                       		move.l	d0,(a5)
0000760A 2A19                       		move.l	(a1)+,d5
0000760C 2819                       		move.l	(a1)+,d4
0000760E 0A84 1000 1000             		eori.l	#$10001000,d4
00007614 2C84                       		move.l	d4,(a6)
00007616 D087                       		add.l	d7,d0
00007618 2A80                       		move.l	d0,(a5)
0000761A 0A85 1000 1000             		eori.l	#$10001000,d5
00007620 2C85                       		move.l	d5,(a6)
00007622 4E75                       		rts	
00007624                            ; ===========================================================================
00007624                            
00007624                            loc_6B90:
00007624 2A80                       		move.l	d0,(a5)
00007626 2A19                       		move.l	(a1)+,d5
00007628 2819                       		move.l	(a1)+,d4
0000762A 0A84 1800 1800             		eori.l	#$18001800,d4
00007630 4844                       		swap	d4
00007632 2C84                       		move.l	d4,(a6)
00007634 D087                       		add.l	d7,d0
00007636 2A80                       		move.l	d0,(a5)
00007638 0A85 1800 1800             		eori.l	#$18001800,d5
0000763E 4845                       		swap	d5
00007640 2C85                       		move.l	d5,(a6)
00007642 4E75                       		rts	
00007644                            ; End of function sub_6B32
00007644                            
00007644                            ; ===========================================================================
00007644 4E75                       		rts	
00007646                            ; ===========================================================================
00007646 2A80                       		move.l	d0,(a5)
00007648 3A3C 2000                  		move.w	#$2000,d5
0000764C 3819                       		move.w	(a1)+,d4
0000764E D845                       		add.w	d5,d4
00007650 3C84                       		move.w	d4,(a6)
00007652 3819                       		move.w	(a1)+,d4
00007654 D845                       		add.w	d5,d4
00007656 3C84                       		move.w	d4,(a6)
00007658 D087                       		add.l	d7,d0
0000765A 2A80                       		move.l	d0,(a5)
0000765C 3819                       		move.w	(a1)+,d4
0000765E D845                       		add.w	d5,d4
00007660 3C84                       		move.w	d4,(a6)
00007662 3819                       		move.w	(a1)+,d4
00007664 D845                       		add.w	d5,d4
00007666 3C84                       		move.w	d4,(a6)
00007668 4E75                       		rts	
0000766A                            
0000766A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000766A                            
0000766A                            
0000766A                            sub_6BD6:				; XREF: sub_6ADA; sub_6B06
0000766A 43F8 B000                  		lea	($FFFFB000).w,a1
0000766E D86B 0004                  		add.w	4(a3),d4
00007672 DA53                       		add.w	(a3),d5
00007674 3604                       		move.w	d4,d3
00007676 E24B                       		lsr.w	#1,d3
00007678 0243 0380                  		andi.w	#$380,d3
0000767C E64D                       		lsr.w	#3,d5
0000767E 3005                       		move.w	d5,d0
00007680 EA48                       		lsr.w	#5,d0
00007682 0240 007F                  		andi.w	#$7F,d0
00007686 D043                       		add.w	d3,d0
00007688 76FF                       		moveq	#-1,d3
0000768A 1634 0000                  		move.b	(a4,d0.w),d3
0000768E 6700                       		beq.s	locret_6C1E
00007690 5303                       		subq.b	#1,d3
00007692 0243 007F                  		andi.w	#$7F,d3
00007696 EE5B                       		ror.w	#7,d3
00007698 D844                       		add.w	d4,d4
0000769A 0244 01E0                  		andi.w	#$1E0,d4
0000769E 0245 001E                  		andi.w	#$1E,d5
000076A2 D644                       		add.w	d4,d3
000076A4 D645                       		add.w	d5,d3
000076A6 2043                       		movea.l	d3,a0
000076A8 3610                       		move.w	(a0),d3
000076AA 0243 03FF                  		andi.w	#$3FF,d3
000076AE E74B                       		lsl.w	#3,d3
000076B0 D2C3                       		adda.w	d3,a1
000076B2                            
000076B2                            locret_6C1E:
000076B2 4E75                       		rts	
000076B4                            ; End of function sub_6BD6
000076B4                            
000076B4                            
000076B4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000076B4                            
000076B4                            
000076B4                            sub_6C20:				; XREF: LoadTilesAsYouMove; et al
000076B4 D86B 0004                  		add.w	4(a3),d4
000076B8 DA53                       		add.w	(a3),d5
000076BA 0244 00F0                  		andi.w	#$F0,d4
000076BE 0245 01F0                  		andi.w	#$1F0,d5
000076C2 E94C                       		lsl.w	#4,d4
000076C4 E44D                       		lsr.w	#2,d5
000076C6 D845                       		add.w	d5,d4
000076C8 7003                       		moveq	#3,d0
000076CA 4840                       		swap	d0
000076CC 3004                       		move.w	d4,d0
000076CE 4E75                       		rts	
000076D0                            ; End of function sub_6C20
000076D0                            
000076D0                            
000076D0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000076D0                            ; not used
000076D0                            
000076D0                            
000076D0                            sub_6C3C:
000076D0 D86B 0004                  		add.w	4(a3),d4
000076D4 DA53                       		add.w	(a3),d5
000076D6 0244 00F0                  		andi.w	#$F0,d4
000076DA 0245 01F0                  		andi.w	#$1F0,d5
000076DE E94C                       		lsl.w	#4,d4
000076E0 E44D                       		lsr.w	#2,d5
000076E2 D845                       		add.w	d5,d4
000076E4 7002                       		moveq	#2,d0
000076E6 4840                       		swap	d0
000076E8 3004                       		move.w	d4,d0
000076EA 4E75                       		rts	
000076EC                            ; End of function sub_6C3C
000076EC                            
000076EC                            ; ---------------------------------------------------------------------------
000076EC                            ; Subroutine to	load tiles as soon as the level	appears
000076EC                            ; ---------------------------------------------------------------------------
000076EC                            
000076EC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000076EC                            
000076EC                            
000076EC                            LoadTilesFromStart:			; XREF: Level; EndingSequence
000076EC 4BF9 00C0 0004             		lea	($C00004).l,a5
000076F2 4DF9 00C0 0000             		lea	($C00000).l,a6
000076F8 47F8 F700                  		lea	($FFFFF700).w,a3
000076FC 49F8 A400                  		lea	($FFFFA400).w,a4
00007700 343C 4000                  		move.w	#$4000,d2
00007704 6100                       		bsr.s	LoadTilesFromStart2
00007706 47F8 F708                  		lea	($FFFFF708).w,a3
0000770A 49F8 A440                  		lea	($FFFFA440).w,a4
0000770E 343C 6000                  		move.w	#$6000,d2
00007712                            ; End of function LoadTilesFromStart
00007712                            
00007712                            
00007712                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007712                            
00007712                            
00007712                            LoadTilesFromStart2:			; XREF: LoadTilesFromStart
00007712 78F0                       		moveq	#-$10,d4
00007714 7C0F                       		moveq	#$F,d6
00007716                            
00007716                            loc_6C82:
00007716 48E7 0E00                  		movem.l	d4-d6,-(sp)
0000771A 7A00                       		moveq	#0,d5
0000771C 3204                       		move.w	d4,d1
0000771E 6100 FF94                  		bsr.w	sub_6C20
00007722 3801                       		move.w	d1,d4
00007724 7A00                       		moveq	#0,d5
00007726 7C1F                       		moveq	#$1F,d6
00007728 6100 FE44                  		bsr.w	sub_6ADA
0000772C 4CDF 0070                  		movem.l	(sp)+,d4-d6
00007730 0644 0010                  		addi.w	#$10,d4
00007734 51CE FFE0                  		dbf	d6,loc_6C82
00007738 4E75                       		rts	
0000773A                            ; End of function LoadTilesFromStart2
0000773A                            
0000773A                            ; ---------------------------------------------------------------------------
0000773A                            ; Main Load Block loading subroutine
0000773A                            ; ---------------------------------------------------------------------------
0000773A                            
0000773A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000773A                            
0000773A                            
0000773A                            MainLoadBlockLoad:			; XREF: Level; EndingSequence
0000773A 7000                       		moveq	#0,d0
0000773C 1038 FE10                  		move.b	($FFFFFE10).w,d0
00007740 E948                       		lsl.w	#4,d0
00007742 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2
00007748 45F2 0000                  		lea	(a2,d0.w),a2
0000774C 2F0A                       		move.l	a2,-(sp)
0000774E 588A                       		addq.l	#4,a2
00007750 205A                       		movea.l	(a2)+,a0
00007752 43F8 B000                  		lea	($FFFFB000).w,a1 ; RAM address for 16x16 mappings
00007756 303C 0000                  		move.w	#0,d0
0000775A 6100 A132                  		bsr.w	EniDec
0000775E 205A                       		movea.l	(a2)+,a0
00007760 43F9 00FF 0000             		lea	($FF0000).l,a1	; RAM address for 256x256 mappings
00007766 6100 A2A4                  		bsr.w	KosDec
0000776A 6100 0000                  		bsr.w	LevelLayoutLoad
0000776E 301A                       		move.w	(a2)+,d0
00007770 3012                       		move.w	(a2),d0
00007772 0240 00FF                  		andi.w	#$FF,d0
00007776 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; is level SBZ3 (LZ4) ?
0000777C 6600                       		bne.s	MLB_ChkSBZPal	; if not, branch
0000777E 700C                       		moveq	#$C,d0		; use SB3 pallet
00007780                            
00007780                            MLB_ChkSBZPal:
00007780 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w ; is level SBZ2?
00007786 6700                       		beq.s	MLB_UsePal0E	; if yes, branch
00007788 0C78 0502 FE10             		cmpi.w	#$502,($FFFFFE10).w ; is level FZ?
0000778E 6600                       		bne.s	MLB_NormalPal	; if not, branch
00007790                            
00007790                            MLB_UsePal0E:
00007790 700E                       		moveq	#$E,d0		; use SBZ2/FZ pallet
00007792                            
00007792                            MLB_NormalPal:
00007792 6100 ACA0                  		bsr.w	PalLoad1	; load pallet (based on	d0)
00007796 245F                       		movea.l	(sp)+,a2
00007798 584A                       		addq.w	#4,a2
0000779A 7000                       		moveq	#0,d0
0000779C 1012                       		move.b	(a2),d0
0000779E 6700                       		beq.s	locret_6D10
000077A0 6100 9F4E                  		bsr.w	LoadPLC		; load pattern load cues
000077A4                            
000077A4                            locret_6D10:
000077A4 4E75                       		rts	
000077A6                            ; End of function MainLoadBlockLoad
000077A6                            
000077A6                            ; ---------------------------------------------------------------------------
000077A6                            ; Level	layout loading subroutine
000077A6                            ; ---------------------------------------------------------------------------
000077A6                            
000077A6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000077A6                            
000077A6                            
000077A6                            LevelLayoutLoad:			; XREF: TitleScreen; MainLoadBlockLoad
000077A6 47F8 A400                  		lea	($FFFFA400).w,a3
000077AA 323C 01FF                  		move.w	#$1FF,d1
000077AE 7000                       		moveq	#0,d0
000077B0                            
000077B0                            LevLoad_ClrRam:
000077B0 26C0                       		move.l	d0,(a3)+
000077B2 51C9 FFFC                  		dbf	d1,LevLoad_ClrRam ; clear the RAM ($FFFFA400-A7FF)
000077B6                            
000077B6 47F8 A400                  		lea	($FFFFA400).w,a3 ; RAM address for level layout
000077BA 7200                       		moveq	#0,d1
000077BC 6100 0000                  		bsr.w	LevelLayoutLoad2 ; load	level layout into RAM
000077C0 47F8 A440                  		lea	($FFFFA440).w,a3 ; RAM address for background layout
000077C4 7202                       		moveq	#2,d1
000077C6                            ; End of function LevelLayoutLoad
000077C6                            
000077C6                            ; "LevelLayoutLoad2" is	run twice - for	the level and the background
000077C6                            
000077C6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000077C6                            
000077C6                            
000077C6                            LevelLayoutLoad2:			; XREF: LevelLayoutLoad
000077C6 3038 FE10                  		move.w	($FFFFFE10).w,d0
000077CA ED08                       		lsl.b	#6,d0
000077CC EA48                       		lsr.w	#5,d0
000077CE 3400                       		move.w	d0,d2
000077D0 D040                       		add.w	d0,d0
000077D2 D042                       		add.w	d2,d0
000077D4 D041                       		add.w	d1,d0
000077D6 43F9 0000 0000             		lea	(Level_Index).l,a1
000077DC 3031 0000                  		move.w	(a1,d0.w),d0
000077E0 43F1 0000                  		lea	(a1,d0.w),a1
000077E4 7200                       		moveq	#0,d1
000077E6 3401                       		move.w	d1,d2
000077E8 1219                       		move.b	(a1)+,d1	; load level width (in tiles)
000077EA 1419                       		move.b	(a1)+,d2	; load level height (in	tiles)
000077EC                            
000077EC                            LevLoad_NumRows:
000077EC 3001                       		move.w	d1,d0
000077EE 204B                       		movea.l	a3,a0
000077F0                            
000077F0                            LevLoad_Row:
000077F0 10D9                       		move.b	(a1)+,(a0)+
000077F2 51C8 FFFC                  		dbf	d0,LevLoad_Row	; load 1 row
000077F6 47EB 0080                  		lea	$80(a3),a3	; do next row
000077FA 51CA FFF0                  		dbf	d2,LevLoad_NumRows ; repeat for	number of rows
000077FE 4E75                       		rts	
00007800                            ; End of function LevelLayoutLoad2
00007800                            
00007800                            ; ---------------------------------------------------------------------------
00007800                            ; Dynamic screen resize	loading	subroutine
00007800                            ; ---------------------------------------------------------------------------
00007800                            
00007800                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007800                            
00007800                            
00007800                            DynScrResizeLoad:			; XREF: DeformBgLayer
00007800 7000                       		moveq	#0,d0
00007802 1038 FE10                  		move.b	($FFFFFE10).w,d0
00007806 D040                       		add.w	d0,d0
00007808 303B 0000                  		move.w	Resize_Index(pc,d0.w),d0
0000780C 4EBB 0000                  		jsr	Resize_Index(pc,d0.w)
00007810 7202                       		moveq	#2,d1
00007812 3038 F726                  		move.w	($FFFFF726).w,d0
00007816 9078 F72E                  		sub.w	($FFFFF72E).w,d0
0000781A 6700                       		beq.s	locret_6DAA
0000781C 6400                       		bcc.s	loc_6DAC
0000781E 4441                       		neg.w	d1
00007820 3038 F704                  		move.w	($FFFFF704).w,d0
00007824 B078 F726                  		cmp.w	($FFFFF726).w,d0
00007828 6300                       		bls.s	loc_6DA0
0000782A 31C0 F72E                  		move.w	d0,($FFFFF72E).w
0000782E 0278 FFFE F72E             		andi.w	#-2,($FFFFF72E).w
00007834                            
00007834                            loc_6DA0:
00007834 D378 F72E                  		add.w	d1,($FFFFF72E).w
00007838 11FC 0001 F75C             		move.b	#1,($FFFFF75C).w
0000783E                            
0000783E                            locret_6DAA:
0000783E 4E75                       		rts	
00007840                            ; ===========================================================================
00007840                            
00007840                            loc_6DAC:				; XREF: DynScrResizeLoad
00007840 3038 F704                  		move.w	($FFFFF704).w,d0
00007844 5040                       		addq.w	#8,d0
00007846 B078 F72E                  		cmp.w	($FFFFF72E).w,d0
0000784A 6500                       		bcs.s	loc_6DC4
0000784C 0838 0001 D022             		btst	#1,($FFFFD022).w
00007852 6700                       		beq.s	loc_6DC4
00007854 D241                       		add.w	d1,d1
00007856 D241                       		add.w	d1,d1
00007858                            
00007858                            loc_6DC4:
00007858 D378 F72E                  		add.w	d1,($FFFFF72E).w
0000785C 11FC 0001 F75C             		move.b	#1,($FFFFF75C).w
00007862 4E75                       		rts	
00007864                            ; End of function DynScrResizeLoad
00007864                            
00007864                            ; ===========================================================================
00007864                            ; ---------------------------------------------------------------------------
00007864                            ; Offset index for dynamic screen resizing
00007864                            ; ---------------------------------------------------------------------------
00007864 0000 0000                  Resize_Index:	dc.w Resize_GHZ-Resize_Index, Resize_LZ-Resize_Index
00007868 0000 0000                  		dc.w Resize_MZ-Resize_Index, Resize_SLZ-Resize_Index
0000786C 0000 0000                  		dc.w Resize_SYZ-Resize_Index, Resize_SBZ-Resize_Index
00007870 0000                       		dc.w Resize_Ending-Resize_Index
00007872                            ; ===========================================================================
00007872                            ; ---------------------------------------------------------------------------
00007872                            ; Green	Hill Zone dynamic screen resizing
00007872                            ; ---------------------------------------------------------------------------
00007872                            
00007872                            Resize_GHZ:				; XREF: Resize_Index
00007872 7000                       		moveq	#0,d0
00007874 1038 FE11                  		move.b	($FFFFFE11).w,d0
00007878 D040                       		add.w	d0,d0
0000787A 303B 0000                  		move.w	Resize_GHZx(pc,d0.w),d0
0000787E 4EFB 0000                  		jmp	Resize_GHZx(pc,d0.w)
00007882                            ; ===========================================================================
00007882 0000                       Resize_GHZx:	dc.w Resize_GHZ1-Resize_GHZx
00007884 0000                       		dc.w Resize_GHZ2-Resize_GHZx
00007886 0000                       		dc.w Resize_GHZ3-Resize_GHZx
00007888                            ; ===========================================================================
00007888                            
00007888                            Resize_GHZ1:
00007888 31FC 0300 F726             		move.w	#$300,($FFFFF726).w ; set lower	y-boundary
0000788E 0C78 1780 F700             		cmpi.w	#$1780,($FFFFF700).w ; has the camera reached $1780 on x-axis?
00007894 6500                       		bcs.s	locret_6E08	; if not, branch
00007896 31FC 0400 F726             		move.w	#$400,($FFFFF726).w ; set lower	y-boundary
0000789C                            
0000789C                            locret_6E08:
0000789C 4E75                       		rts	
0000789E                            ; ===========================================================================
0000789E                            
0000789E                            Resize_GHZ2:
0000789E 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
000078A4 0C78 0ED0 F700             		cmpi.w	#$ED0,($FFFFF700).w
000078AA 6500                       		bcs.s	locret_6E3A
000078AC 31FC 0200 F726             		move.w	#$200,($FFFFF726).w
000078B2 0C78 1600 F700             		cmpi.w	#$1600,($FFFFF700).w
000078B8 6500                       		bcs.s	locret_6E3A
000078BA 31FC 0400 F726             		move.w	#$400,($FFFFF726).w
000078C0 0C78 1D60 F700             		cmpi.w	#$1D60,($FFFFF700).w
000078C6 6500                       		bcs.s	locret_6E3A
000078C8 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
000078CE                            
000078CE                            locret_6E3A:
000078CE 4E75                       		rts	
000078D0                            ; ===========================================================================
000078D0                            
000078D0                            Resize_GHZ3:
000078D0 7000                       		moveq	#0,d0
000078D2 1038 F742                  		move.b	($FFFFF742).w,d0
000078D6 303B 0000                  		move.w	off_6E4A(pc,d0.w),d0
000078DA 4EFB 0000                  		jmp	off_6E4A(pc,d0.w)
000078DE                            ; ===========================================================================
000078DE 0000                       off_6E4A:	dc.w Resize_GHZ3main-off_6E4A
000078E0 0000                       		dc.w Resize_GHZ3boss-off_6E4A
000078E2 0000                       		dc.w Resize_GHZ3end-off_6E4A
000078E4                            ; ===========================================================================
000078E4                            
000078E4                            Resize_GHZ3main:
000078E4 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
000078EA 0C78 0380 F700             		cmpi.w	#$380,($FFFFF700).w
000078F0 6500                       		bcs.s	locret_6E96
000078F2 31FC 0310 F726             		move.w	#$310,($FFFFF726).w
000078F8 0C78 0960 F700             		cmpi.w	#$960,($FFFFF700).w
000078FE 6500                       		bcs.s	locret_6E96
00007900 0C78 0280 F704             		cmpi.w	#$280,($FFFFF704).w
00007906 6500                       		bcs.s	loc_6E98
00007908 31FC 0400 F726             		move.w	#$400,($FFFFF726).w
0000790E 0C78 1380 F700             		cmpi.w	#$1380,($FFFFF700).w
00007914 6400                       		bcc.s	loc_6E8E
00007916 31FC 04C0 F726             		move.w	#$4C0,($FFFFF726).w
0000791C 31FC 04C0 F72E             		move.w	#$4C0,($FFFFF72E).w
00007922                            
00007922                            loc_6E8E:
00007922 0C78 1700 F700             		cmpi.w	#$1700,($FFFFF700).w
00007928 6400                       		bcc.s	loc_6E98
0000792A                            
0000792A                            locret_6E96:
0000792A 4E75                       		rts	
0000792C                            ; ===========================================================================
0000792C                            
0000792C                            loc_6E98:
0000792C 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
00007932 5438 F742                  		addq.b	#2,($FFFFF742).w
00007936 4E75                       		rts	
00007938                            ; ===========================================================================
00007938                            
00007938                            Resize_GHZ3boss:
00007938 0C78 0960 F700             		cmpi.w	#$960,($FFFFF700).w
0000793E 6400                       		bcc.s	loc_6EB0
00007940 5538 F742                  		subq.b	#2,($FFFFF742).w
00007944                            
00007944                            loc_6EB0:
00007944 0C78 2960 F700             		cmpi.w	#$2960,($FFFFF700).w
0000794A 6500                       		bcs.s	locret_6EE8
0000794C 6100 0000                  		bsr.w	SingleObjLoad
00007950 6600                       		bne.s	loc_6ED0
00007952 12BC 003D                  		move.b	#$3D,0(a1)	; load GHZ boss	object
00007956 337C 2A60 0008             		move.w	#$2A60,8(a1)
0000795C 337C 0280 000C             		move.w	#$280,$C(a1)
00007962                            
00007962                            loc_6ED0:
00007962 303C 008C                  		move.w	#$8C,d0
00007966 6100 9B0E                  		bsr.w	PlaySound	; play boss music
0000796A 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007970 5438 F742                  		addq.b	#2,($FFFFF742).w
00007974 7011                       		moveq	#$11,d0
00007976 6000 9D78                  		bra.w	LoadPLC		; load boss patterns
0000797A                            ; ===========================================================================
0000797A                            
0000797A                            locret_6EE8:
0000797A 4E75                       		rts	
0000797C                            ; ===========================================================================
0000797C                            
0000797C                            Resize_GHZ3end:
0000797C 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
00007982 4E75                       		rts	
00007984                            ; ===========================================================================
00007984                            ; ---------------------------------------------------------------------------
00007984                            ; Labyrinth Zone dynamic screen	resizing
00007984                            ; ---------------------------------------------------------------------------
00007984                            
00007984                            Resize_LZ:				; XREF: Resize_Index
00007984 7000                       		moveq	#0,d0
00007986 1038 FE11                  		move.b	($FFFFFE11).w,d0
0000798A D040                       		add.w	d0,d0
0000798C 303B 0000                  		move.w	Resize_LZx(pc,d0.w),d0
00007990 4EFB 0000                  		jmp	Resize_LZx(pc,d0.w)
00007994                            ; ===========================================================================
00007994 0000                       Resize_LZx:	dc.w Resize_LZ12-Resize_LZx
00007996 0000                       		dc.w Resize_LZ12-Resize_LZx
00007998 0000                       		dc.w Resize_LZ3-Resize_LZx
0000799A 0000                       		dc.w Resize_SBZ3-Resize_LZx
0000799C                            ; ===========================================================================
0000799C                            
0000799C                            Resize_LZ12:
0000799C 4E75                       		rts	
0000799E                            ; ===========================================================================
0000799E                            
0000799E                            Resize_LZ3:
0000799E 4A38 F7EF                  		tst.b	($FFFFF7EF).w	; has switch $F	been pressed?
000079A2 6700                       		beq.s	loc_6F28	; if not, branch
000079A4 43F8 A506                  		lea	($FFFFA506).w,a1
000079A8 0C11 0007                  		cmpi.b	#7,(a1)
000079AC 6700                       		beq.s	loc_6F28
000079AE 12BC 0007                  		move.b	#7,(a1)		; modify level layout
000079B2 303C 00B7                  		move.w	#$B7,d0
000079B6 6100 9AC4                  		bsr.w	PlaySound_Special ; play rumbling sound
000079BA                            
000079BA                            loc_6F28:
000079BA 4A38 F742                  		tst.b	($FFFFF742).w
000079BE 6600                       		bne.s	locret_6F64
000079C0 0C78 1CA0 F700             		cmpi.w	#$1CA0,($FFFFF700).w
000079C6 6500                       		bcs.s	locret_6F62
000079C8 0C78 0600 F704             		cmpi.w	#$600,($FFFFF704).w
000079CE 6400                       		bcc.s	locret_6F62
000079D0 6100 0000                  		bsr.w	SingleObjLoad
000079D4 6600                       		bne.s	loc_6F4A
000079D6 12BC 0077                  		move.b	#$77,0(a1)	; load LZ boss object
000079DA                            
000079DA                            loc_6F4A:
000079DA 303C 008C                  		move.w	#$8C,d0
000079DE 6100 9A96                  		bsr.w	PlaySound	; play boss music
000079E2 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
000079E8 5438 F742                  		addq.b	#2,($FFFFF742).w
000079EC 7011                       		moveq	#$11,d0
000079EE 6000 9D00                  		bra.w	LoadPLC		; load boss patterns
000079F2                            ; ===========================================================================
000079F2                            
000079F2                            locret_6F62:
000079F2 4E75                       		rts	
000079F4                            ; ===========================================================================
000079F4                            
000079F4                            locret_6F64:
000079F4 4E75                       		rts	
000079F6                            ; ===========================================================================
000079F6                            
000079F6                            Resize_SBZ3:
000079F6 0C78 0D00 F700             		cmpi.w	#$D00,($FFFFF700).w
000079FC 6500                       		bcs.s	locret_6F8C
000079FE 0C78 0018 D00C             		cmpi.w	#$18,($FFFFD00C).w ; has Sonic reached the top of the level?
00007A04 6400                       		bcc.s	locret_6F8C	; if not, branch
00007A06 4238 FE30                  		clr.b	($FFFFFE30).w
00007A0A 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
00007A10 31FC 0502 FE10             		move.w	#$502,($FFFFFE10).w ; set level	number to 0502 (FZ)
00007A16 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; freeze Sonic
00007A1C                            
00007A1C                            locret_6F8C:
00007A1C 4E75                       		rts	
00007A1E                            ; ===========================================================================
00007A1E                            ; ---------------------------------------------------------------------------
00007A1E                            ; Marble Zone dynamic screen resizing
00007A1E                            ; ---------------------------------------------------------------------------
00007A1E                            
00007A1E                            Resize_MZ:				; XREF: Resize_Index
00007A1E 7000                       		moveq	#0,d0
00007A20 1038 FE11                  		move.b	($FFFFFE11).w,d0
00007A24 D040                       		add.w	d0,d0
00007A26 303B 0000                  		move.w	Resize_MZx(pc,d0.w),d0
00007A2A 4EFB 0000                  		jmp	Resize_MZx(pc,d0.w)
00007A2E                            ; ===========================================================================
00007A2E 0000                       Resize_MZx:	dc.w Resize_MZ1-Resize_MZx
00007A30 0000                       		dc.w Resize_MZ2-Resize_MZx
00007A32 0000                       		dc.w Resize_MZ3-Resize_MZx
00007A34                            ; ===========================================================================
00007A34                            
00007A34                            Resize_MZ1:
00007A34 7000                       		moveq	#0,d0
00007A36 1038 F742                  		move.b	($FFFFF742).w,d0
00007A3A 303B 0000                  		move.w	off_6FB2(pc,d0.w),d0
00007A3E 4EFB 0000                  		jmp	off_6FB2(pc,d0.w)
00007A42                            ; ===========================================================================
00007A42 0000                       off_6FB2:	dc.w loc_6FBA-off_6FB2
00007A44 0000                       		dc.w loc_6FEA-off_6FB2
00007A46 0000                       		dc.w loc_702E-off_6FB2
00007A48 0000                       		dc.w loc_7050-off_6FB2
00007A4A                            ; ===========================================================================
00007A4A                            
00007A4A                            loc_6FBA:
00007A4A 31FC 01D0 F726             		move.w	#$1D0,($FFFFF726).w
00007A50 0C78 0700 F700             		cmpi.w	#$700,($FFFFF700).w
00007A56 6500                       		bcs.s	locret_6FE8
00007A58 31FC 0220 F726             		move.w	#$220,($FFFFF726).w
00007A5E 0C78 0D00 F700             		cmpi.w	#$D00,($FFFFF700).w
00007A64 6500                       		bcs.s	locret_6FE8
00007A66 31FC 0340 F726             		move.w	#$340,($FFFFF726).w
00007A6C 0C78 0340 F704             		cmpi.w	#$340,($FFFFF704).w
00007A72 6500                       		bcs.s	locret_6FE8
00007A74 5438 F742                  		addq.b	#2,($FFFFF742).w
00007A78                            
00007A78                            locret_6FE8:
00007A78 4E75                       		rts	
00007A7A                            ; ===========================================================================
00007A7A                            
00007A7A                            loc_6FEA:
00007A7A 0C78 0340 F704             		cmpi.w	#$340,($FFFFF704).w
00007A80 6400                       		bcc.s	loc_6FF8
00007A82 5538 F742                  		subq.b	#2,($FFFFF742).w
00007A86 4E75                       		rts	
00007A88                            ; ===========================================================================
00007A88                            
00007A88                            loc_6FF8:
00007A88 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
00007A8E 0C78 0E00 F700             		cmpi.w	#$E00,($FFFFF700).w
00007A94 6400                       		bcc.s	locret_702C
00007A96 31FC 0340 F72C             		move.w	#$340,($FFFFF72C).w
00007A9C 31FC 0340 F726             		move.w	#$340,($FFFFF726).w
00007AA2 0C78 0A90 F700             		cmpi.w	#$A90,($FFFFF700).w
00007AA8 6400                       		bcc.s	locret_702C
00007AAA 31FC 0500 F726             		move.w	#$500,($FFFFF726).w
00007AB0 0C78 0370 F704             		cmpi.w	#$370,($FFFFF704).w
00007AB6 6500                       		bcs.s	locret_702C
00007AB8 5438 F742                  		addq.b	#2,($FFFFF742).w
00007ABC                            
00007ABC                            locret_702C:
00007ABC 4E75                       		rts	
00007ABE                            ; ===========================================================================
00007ABE                            
00007ABE                            loc_702E:
00007ABE 0C78 0370 F704             		cmpi.w	#$370,($FFFFF704).w
00007AC4 6400                       		bcc.s	loc_703C
00007AC6 5538 F742                  		subq.b	#2,($FFFFF742).w
00007ACA 4E75                       		rts	
00007ACC                            ; ===========================================================================
00007ACC                            
00007ACC                            loc_703C:
00007ACC 0C78 0500 F704             		cmpi.w	#$500,($FFFFF704).w
00007AD2 6500                       		bcs.s	locret_704E
00007AD4 31FC 0500 F72C             		move.w	#$500,($FFFFF72C).w
00007ADA 5438 F742                  		addq.b	#2,($FFFFF742).w
00007ADE                            
00007ADE                            locret_704E:
00007ADE 4E75                       		rts	
00007AE0                            ; ===========================================================================
00007AE0                            
00007AE0                            loc_7050:
00007AE0 0C78 0E70 F700             		cmpi.w	#$E70,($FFFFF700).w
00007AE6 6500                       		bcs.s	locret_7072
00007AE8 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
00007AEE 31FC 0500 F726             		move.w	#$500,($FFFFF726).w
00007AF4 0C78 1430 F700             		cmpi.w	#$1430,($FFFFF700).w
00007AFA 6500                       		bcs.s	locret_7072
00007AFC 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
00007B02                            
00007B02                            locret_7072:
00007B02 4E75                       		rts	
00007B04                            ; ===========================================================================
00007B04                            
00007B04                            Resize_MZ2:
00007B04 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
00007B0A 0C78 1700 F700             		cmpi.w	#$1700,($FFFFF700).w
00007B10 6500                       		bcs.s	locret_7088
00007B12 31FC 0200 F726             		move.w	#$200,($FFFFF726).w
00007B18                            
00007B18                            locret_7088:
00007B18 4E75                       		rts	
00007B1A                            ; ===========================================================================
00007B1A                            
00007B1A                            Resize_MZ3:
00007B1A 7000                       		moveq	#0,d0
00007B1C 1038 F742                  		move.b	($FFFFF742).w,d0
00007B20 303B 0000                  		move.w	off_7098(pc,d0.w),d0
00007B24 4EFB 0000                  		jmp	off_7098(pc,d0.w)
00007B28                            ; ===========================================================================
00007B28 0000                       off_7098:	dc.w Resize_MZ3boss-off_7098
00007B2A 0000                       		dc.w Resize_MZ3end-off_7098
00007B2C                            ; ===========================================================================
00007B2C                            
00007B2C                            Resize_MZ3boss:
00007B2C 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
00007B32 0C78 1560 F700             		cmpi.w	#$1560,($FFFFF700).w
00007B38 6500                       		bcs.s	locret_70E8
00007B3A 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
00007B40 0C78 17F0 F700             		cmpi.w	#$17F0,($FFFFF700).w
00007B46 6500                       		bcs.s	locret_70E8
00007B48 6100 0000                  		bsr.w	SingleObjLoad
00007B4C 6600                       		bne.s	loc_70D0
00007B4E 12BC 0073                  		move.b	#$73,0(a1)	; load MZ boss object
00007B52 337C 19F0 0008             		move.w	#$19F0,8(a1)
00007B58 337C 022C 000C             		move.w	#$22C,$C(a1)
00007B5E                            
00007B5E                            loc_70D0:
00007B5E 303C 008C                  		move.w	#$8C,d0
00007B62 6100 9912                  		bsr.w	PlaySound	; play boss music
00007B66 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007B6C 5438 F742                  		addq.b	#2,($FFFFF742).w
00007B70 7011                       		moveq	#$11,d0
00007B72 6000 9B7C                  		bra.w	LoadPLC		; load boss patterns
00007B76                            ; ===========================================================================
00007B76                            
00007B76                            locret_70E8:
00007B76 4E75                       		rts	
00007B78                            ; ===========================================================================
00007B78                            
00007B78                            Resize_MZ3end:
00007B78 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
00007B7E 4E75                       		rts	
00007B80                            ; ===========================================================================
00007B80                            ; ---------------------------------------------------------------------------
00007B80                            ; Star Light Zone dynamic screen resizing
00007B80                            ; ---------------------------------------------------------------------------
00007B80                            
00007B80                            Resize_SLZ:				; XREF: Resize_Index
00007B80 7000                       		moveq	#0,d0
00007B82 1038 FE11                  		move.b	($FFFFFE11).w,d0
00007B86 D040                       		add.w	d0,d0
00007B88 303B 0000                  		move.w	Resize_SLZx(pc,d0.w),d0
00007B8C 4EFB 0000                  		jmp	Resize_SLZx(pc,d0.w)
00007B90                            ; ===========================================================================
00007B90 0000                       Resize_SLZx:	dc.w Resize_SLZ12-Resize_SLZx
00007B92 0000                       		dc.w Resize_SLZ12-Resize_SLZx
00007B94 0000                       		dc.w Resize_SLZ3-Resize_SLZx
00007B96                            ; ===========================================================================
00007B96                            
00007B96                            Resize_SLZ12:
00007B96 4E75                       		rts	
00007B98                            ; ===========================================================================
00007B98                            
00007B98                            Resize_SLZ3:
00007B98 7000                       		moveq	#0,d0
00007B9A 1038 F742                  		move.b	($FFFFF742).w,d0
00007B9E 303B 0000                  		move.w	off_7118(pc,d0.w),d0
00007BA2 4EFB 0000                  		jmp	off_7118(pc,d0.w)
00007BA6                            ; ===========================================================================
00007BA6 0000                       off_7118:	dc.w Resize_SLZ3main-off_7118
00007BA8 0000                       		dc.w Resize_SLZ3boss-off_7118
00007BAA 0000                       		dc.w Resize_SLZ3end-off_7118
00007BAC                            ; ===========================================================================
00007BAC                            
00007BAC                            Resize_SLZ3main:
00007BAC 0C78 1E70 F700             		cmpi.w	#$1E70,($FFFFF700).w
00007BB2 6500                       		bcs.s	locret_7130
00007BB4 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
00007BBA 5438 F742                  		addq.b	#2,($FFFFF742).w
00007BBE                            
00007BBE                            locret_7130:
00007BBE 4E75                       		rts	
00007BC0                            ; ===========================================================================
00007BC0                            
00007BC0                            Resize_SLZ3boss:
00007BC0 0C78 2000 F700             		cmpi.w	#$2000,($FFFFF700).w
00007BC6 6500                       		bcs.s	locret_715C
00007BC8 6100 0000                  		bsr.w	SingleObjLoad
00007BCC 6600                       		bne.s	loc_7144
00007BCE 12BC 007A                  		move.b	#$7A,(a1)	; load SLZ boss	object
00007BD2                            
00007BD2                            loc_7144:
00007BD2 303C 008C                  		move.w	#$8C,d0
00007BD6 6100 989E                  		bsr.w	PlaySound	; play boss music
00007BDA 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007BE0 5438 F742                  		addq.b	#2,($FFFFF742).w
00007BE4 7011                       		moveq	#$11,d0
00007BE6 6000 9B08                  		bra.w	LoadPLC		; load boss patterns
00007BEA                            ; ===========================================================================
00007BEA                            
00007BEA                            locret_715C:
00007BEA 4E75                       		rts	
00007BEC                            ; ===========================================================================
00007BEC                            
00007BEC                            Resize_SLZ3end:
00007BEC 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
00007BF2 4E75                       		rts
00007BF4 4E75                       		rts
00007BF6                            ; ===========================================================================
00007BF6                            ; ---------------------------------------------------------------------------
00007BF6                            ; Spring Yard Zone dynamic screen resizing
00007BF6                            ; ---------------------------------------------------------------------------
00007BF6                            
00007BF6                            Resize_SYZ:				; XREF: Resize_Index
00007BF6 7000                       		moveq	#0,d0
00007BF8 1038 FE11                  		move.b	($FFFFFE11).w,d0
00007BFC D040                       		add.w	d0,d0
00007BFE 303B 0000                  		move.w	Resize_SYZx(pc,d0.w),d0
00007C02 4EFB 0000                  		jmp	Resize_SYZx(pc,d0.w)
00007C06                            ; ===========================================================================
00007C06 0000                       Resize_SYZx:	dc.w Resize_SYZ1-Resize_SYZx
00007C08 0000                       		dc.w Resize_SYZ2-Resize_SYZx
00007C0A 0000                       		dc.w Resize_SYZ3-Resize_SYZx
00007C0C                            ; ===========================================================================
00007C0C                            
00007C0C                            Resize_SYZ1:
00007C0C 4E75                       		rts	
00007C0E                            ; ===========================================================================
00007C0E                            
00007C0E                            Resize_SYZ2:
00007C0E 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
00007C14 0C78 25A0 F700             		cmpi.w	#$25A0,($FFFFF700).w
00007C1A 6500                       		bcs.s	locret_71A2
00007C1C 31FC 0420 F726             		move.w	#$420,($FFFFF726).w
00007C22 0C78 04D0 D00C             		cmpi.w	#$4D0,($FFFFD00C).w
00007C28 6500                       		bcs.s	locret_71A2
00007C2A 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
00007C30                            
00007C30                            locret_71A2:
00007C30 4E75                       		rts	
00007C32                            ; ===========================================================================
00007C32                            
00007C32                            Resize_SYZ3:
00007C32 7000                       		moveq	#0,d0
00007C34 1038 F742                  		move.b	($FFFFF742).w,d0
00007C38 303B 0000                  		move.w	off_71B2(pc,d0.w),d0
00007C3C 4EFB 0000                  		jmp	off_71B2(pc,d0.w)
00007C40                            ; ===========================================================================
00007C40 0000                       off_71B2:	dc.w Resize_SYZ3main-off_71B2
00007C42 0000                       		dc.w Resize_SYZ3boss-off_71B2
00007C44 0000                       		dc.w Resize_SYZ3end-off_71B2
00007C46                            ; ===========================================================================
00007C46                            
00007C46                            Resize_SYZ3main:
00007C46 0C78 2AC0 F700             		cmpi.w	#$2AC0,($FFFFF700).w
00007C4C 6500                       		bcs.s	locret_71CE
00007C4E 6100 0000                  		bsr.w	SingleObjLoad
00007C52 6600                       		bne.s	locret_71CE
00007C54 12BC 0076                  		move.b	#$76,(a1)	; load blocks that boss	picks up
00007C58 5438 F742                  		addq.b	#2,($FFFFF742).w
00007C5C                            
00007C5C                            locret_71CE:
00007C5C 4E75                       		rts	
00007C5E                            ; ===========================================================================
00007C5E                            
00007C5E                            Resize_SYZ3boss:
00007C5E 0C78 2C00 F700             		cmpi.w	#$2C00,($FFFFF700).w
00007C64 6500                       		bcs.s	locret_7200
00007C66 31FC 04CC F726             		move.w	#$4CC,($FFFFF726).w
00007C6C 6100 0000                  		bsr.w	SingleObjLoad
00007C70 6600                       		bne.s	loc_71EC
00007C72 12BC 0075                  		move.b	#$75,(a1)	; load SYZ boss	object
00007C76 5438 F742                  		addq.b	#2,($FFFFF742).w
00007C7A                            
00007C7A                            loc_71EC:
00007C7A 303C 008C                  		move.w	#$8C,d0
00007C7E 6100 97F6                  		bsr.w	PlaySound	; play boss music
00007C82 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007C88 7011                       		moveq	#$11,d0
00007C8A 6000 9A64                  		bra.w	LoadPLC		; load boss patterns
00007C8E                            ; ===========================================================================
00007C8E                            
00007C8E                            locret_7200:
00007C8E 4E75                       		rts	
00007C90                            ; ===========================================================================
00007C90                            
00007C90                            Resize_SYZ3end:
00007C90 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
00007C96 4E75                       		rts	
00007C98                            ; ===========================================================================
00007C98                            ; ---------------------------------------------------------------------------
00007C98                            ; Scrap	Brain Zone dynamic screen resizing
00007C98                            ; ---------------------------------------------------------------------------
00007C98                            
00007C98                            Resize_SBZ:				; XREF: Resize_Index
00007C98 7000                       		moveq	#0,d0
00007C9A 1038 FE11                  		move.b	($FFFFFE11).w,d0
00007C9E D040                       		add.w	d0,d0
00007CA0 303B 0000                  		move.w	Resize_SBZx(pc,d0.w),d0
00007CA4 4EFB 0000                  		jmp	Resize_SBZx(pc,d0.w)
00007CA8                            ; ===========================================================================
00007CA8 0000                       Resize_SBZx:	dc.w Resize_SBZ1-Resize_SBZx
00007CAA 0000                       		dc.w Resize_SBZ2-Resize_SBZx
00007CAC 0000                       		dc.w Resize_FZ-Resize_SBZx
00007CAE                            ; ===========================================================================
00007CAE                            
00007CAE                            Resize_SBZ1:
00007CAE 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
00007CB4 0C78 1880 F700             		cmpi.w	#$1880,($FFFFF700).w
00007CBA 6500                       		bcs.s	locret_7242
00007CBC 31FC 0620 F726             		move.w	#$620,($FFFFF726).w
00007CC2 0C78 2000 F700             		cmpi.w	#$2000,($FFFFF700).w
00007CC8 6500                       		bcs.s	locret_7242
00007CCA 31FC 02A0 F726             		move.w	#$2A0,($FFFFF726).w
00007CD0                            
00007CD0                            locret_7242:
00007CD0 4E75                       		rts	
00007CD2                            ; ===========================================================================
00007CD2                            
00007CD2                            Resize_SBZ2:
00007CD2 7000                       		moveq	#0,d0
00007CD4 1038 F742                  		move.b	($FFFFF742).w,d0
00007CD8 303B 0000                  		move.w	off_7252(pc,d0.w),d0
00007CDC 4EFB 0000                  		jmp	off_7252(pc,d0.w)
00007CE0                            ; ===========================================================================
00007CE0 0000                       off_7252:	dc.w Resize_SBZ2main-off_7252
00007CE2 0000                       		dc.w Resize_SBZ2boss-off_7252
00007CE4 0000                       		dc.w Resize_SBZ2boss2-off_7252
00007CE6 0000                       		dc.w Resize_SBZ2end-off_7252
00007CE8                            ; ===========================================================================
00007CE8                            
00007CE8                            Resize_SBZ2main:
00007CE8 31FC 0800 F726             		move.w	#$800,($FFFFF726).w
00007CEE 0C78 1800 F700             		cmpi.w	#$1800,($FFFFF700).w
00007CF4 6500                       		bcs.s	locret_727A
00007CF6 31FC 0510 F726             		move.w	#$510,($FFFFF726).w
00007CFC 0C78 1E00 F700             		cmpi.w	#$1E00,($FFFFF700).w
00007D02 6500                       		bcs.s	locret_727A
00007D04 5438 F742                  		addq.b	#2,($FFFFF742).w
00007D08                            
00007D08                            locret_727A:
00007D08 4E75                       		rts	
00007D0A                            ; ===========================================================================
00007D0A                            
00007D0A                            Resize_SBZ2boss:
00007D0A 0C78 1EB0 F700             		cmpi.w	#$1EB0,($FFFFF700).w
00007D10 6500                       		bcs.s	locret_7298
00007D12 6100 0000                  		bsr.w	SingleObjLoad
00007D16 6600                       		bne.s	locret_7298
00007D18 12BC 0083                  		move.b	#$83,(a1)	; load collapsing block	object
00007D1C 5438 F742                  		addq.b	#2,($FFFFF742).w
00007D20 701E                       		moveq	#$1E,d0
00007D22 6000 99CC                  		bra.w	LoadPLC		; load SBZ2 Eggman patterns
00007D26                            ; ===========================================================================
00007D26                            
00007D26                            locret_7298:
00007D26 4E75                       		rts	
00007D28                            ; ===========================================================================
00007D28                            
00007D28                            Resize_SBZ2boss2:
00007D28 0C78 1F60 F700             		cmpi.w	#$1F60,($FFFFF700).w
00007D2E 6500                       		bcs.s	loc_72B6
00007D30 6100 0000                  		bsr.w	SingleObjLoad
00007D34 6600                       		bne.s	loc_72B0
00007D36 12BC 0082                  		move.b	#$82,(a1)	; load SBZ2 Eggman object
00007D3A 5438 F742                  		addq.b	#2,($FFFFF742).w
00007D3E                            
00007D3E                            loc_72B0:
00007D3E 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007D44                            
00007D44                            loc_72B6:
00007D44 6000                       		bra.s	loc_72C2
00007D46                            ; ===========================================================================
00007D46                            
00007D46                            Resize_SBZ2end:
00007D46 0C78 2050 F700             		cmpi.w	#$2050,($FFFFF700).w
00007D4C 6500                       		bcs.s	loc_72C2
00007D4E 4E75                       		rts	
00007D50                            ; ===========================================================================
00007D50                            
00007D50                            loc_72C2:
00007D50 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
00007D56 4E75                       		rts	
00007D58                            ; ===========================================================================
00007D58                            
00007D58                            Resize_FZ:
00007D58 7000                       		moveq	#0,d0
00007D5A 1038 F742                  		move.b	($FFFFF742).w,d0
00007D5E 303B 0000                  		move.w	off_72D8(pc,d0.w),d0
00007D62 4EFB 0000                  		jmp	off_72D8(pc,d0.w)
00007D66                            ; ===========================================================================
00007D66 0000 0000                  off_72D8:	dc.w Resize_FZmain-off_72D8, Resize_FZboss-off_72D8
00007D6A 0000 0000                  		dc.w Resize_FZend-off_72D8, locret_7322-off_72D8
00007D6E 0000                       		dc.w Resize_FZend2-off_72D8
00007D70                            ; ===========================================================================
00007D70                            
00007D70                            Resize_FZmain:
00007D70 0C78 2148 F700             		cmpi.w	#$2148,($FFFFF700).w
00007D76 6500                       		bcs.s	loc_72F4
00007D78 5438 F742                  		addq.b	#2,($FFFFF742).w
00007D7C 701F                       		moveq	#$1F,d0
00007D7E 6100 9970                  		bsr.w	LoadPLC		; load FZ boss patterns
00007D82                            
00007D82                            loc_72F4:
00007D82 60CC                       		bra.s	loc_72C2
00007D84                            ; ===========================================================================
00007D84                            
00007D84                            Resize_FZboss:
00007D84 0C78 2300 F700             		cmpi.w	#$2300,($FFFFF700).w
00007D8A 6500                       		bcs.s	loc_7312
00007D8C 6100 0000                  		bsr.w	SingleObjLoad
00007D90 6600                       		bne.s	loc_7312
00007D92 12BC 0085                  		move.b	#$85,(a1)	; load FZ boss object
00007D96 5438 F742                  		addq.b	#2,($FFFFF742).w
00007D9A 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007DA0                            
00007DA0                            loc_7312:
00007DA0 60AE                       		bra.s	loc_72C2
00007DA2                            ; ===========================================================================
00007DA2                            
00007DA2                            Resize_FZend:
00007DA2 0C78 2450 F700             		cmpi.w	#$2450,($FFFFF700).w
00007DA8 6500                       		bcs.s	loc_7320
00007DAA 5438 F742                  		addq.b	#2,($FFFFF742).w
00007DAE                            
00007DAE                            loc_7320:
00007DAE 60A0                       		bra.s	loc_72C2
00007DB0                            ; ===========================================================================
00007DB0                            
00007DB0                            locret_7322:
00007DB0 4E75                       		rts	
00007DB2                            ; ===========================================================================
00007DB2                            
00007DB2                            Resize_FZend2:
00007DB2 609C                       		bra.s	loc_72C2
00007DB4                            ; ===========================================================================
00007DB4                            ; ---------------------------------------------------------------------------
00007DB4                            ; Ending sequence dynamic screen resizing (empty)
00007DB4                            ; ---------------------------------------------------------------------------
00007DB4                            
00007DB4                            Resize_Ending:				; XREF: Resize_Index
00007DB4 4E75                       		rts	
00007DB6                            ; ===========================================================================
00007DB6                            ; ---------------------------------------------------------------------------
00007DB6                            ; Object 11 - GHZ bridge
00007DB6                            ; ---------------------------------------------------------------------------
00007DB6                            
00007DB6                            Obj11:					; XREF: Obj_Index
00007DB6 7000                       		moveq	#0,d0
00007DB8 1028 0024                  		move.b	$24(a0),d0
00007DBC 323B 0000                  		move.w	Obj11_Index(pc,d0.w),d1
00007DC0 4EFB 1000                  		jmp	Obj11_Index(pc,d1.w)
00007DC4                            ; ===========================================================================
00007DC4 0000 0000                  Obj11_Index:	dc.w Obj11_Main-Obj11_Index, Obj11_Action-Obj11_Index
00007DC8 0000 0000                  		dc.w Obj11_Action2-Obj11_Index,	Obj11_Delete2-Obj11_Index
00007DCC 0000 0000                  		dc.w Obj11_Delete2-Obj11_Index,	Obj11_Display2-Obj11_Index
00007DD0                            ; ===========================================================================
00007DD0                            
00007DD0                            Obj11_Main:				; XREF: Obj11_Index
00007DD0 5428 0024                  		addq.b	#2,$24(a0)
00007DD4 217C 0000 0000 0004        		move.l	#Map_obj11,4(a0)
00007DDC 317C 438E 0002             		move.w	#$438E,2(a0)
00007DE2 117C 0004 0001             		move.b	#4,1(a0)
00007DE8 117C 0003 0018             		move.b	#3,$18(a0)
00007DEE 117C 0080 0019             		move.b	#$80,$19(a0)
00007DF4 3428 000C                  		move.w	$C(a0),d2
00007DF8 3628 0008                  		move.w	8(a0),d3
00007DFC 1810                       		move.b	0(a0),d4	; copy object number ($11) to d4
00007DFE 45E8 0028                  		lea	$28(a0),a2	; copy bridge subtype to a2
00007E02 7200                       		moveq	#0,d1
00007E04 1212                       		move.b	(a2),d1		; copy a2 to d1
00007E06 14FC 0000                  		move.b	#0,(a2)+
00007E0A 3001                       		move.w	d1,d0
00007E0C E248                       		lsr.w	#1,d0
00007E0E E948                       		lsl.w	#4,d0
00007E10 9640                       		sub.w	d0,d3
00007E12 5501                       		subq.b	#2,d1
00007E14 6500                       		bcs.s	Obj11_Action
00007E16                            
00007E16                            Obj11_MakeBdg:
00007E16 6100 0000                  		bsr.w	SingleObjLoad
00007E1A 6600                       		bne.s	Obj11_Action
00007E1C 5228 0028                  		addq.b	#1,$28(a0)
00007E20 B668 0008                  		cmp.w	8(a0),d3
00007E24 6600                       		bne.s	loc_73B8
00007E26 0643 0010                  		addi.w	#$10,d3
00007E2A 3142 000C                  		move.w	d2,$C(a0)
00007E2E 3142 003C                  		move.w	d2,$3C(a0)
00007E32 3A08                       		move.w	a0,d5
00007E34 0445 D000                  		subi.w	#-$3000,d5
00007E38 EC4D                       		lsr.w	#6,d5
00007E3A 0245 007F                  		andi.w	#$7F,d5
00007E3E 14C5                       		move.b	d5,(a2)+
00007E40 5228 0028                  		addq.b	#1,$28(a0)
00007E44                            
00007E44                            loc_73B8:				; XREF: ROM:00007398j
00007E44 3A09                       		move.w	a1,d5
00007E46 0445 D000                  		subi.w	#-$3000,d5
00007E4A EC4D                       		lsr.w	#6,d5
00007E4C 0245 007F                  		andi.w	#$7F,d5
00007E50 14C5                       		move.b	d5,(a2)+
00007E52 137C 000A 0024             		move.b	#$A,$24(a1)
00007E58 1284                       		move.b	d4,0(a1)	; load bridge object (d4 = $11)
00007E5A 3342 000C                  		move.w	d2,$C(a1)
00007E5E 3342 003C                  		move.w	d2,$3C(a1)
00007E62 3343 0008                  		move.w	d3,8(a1)
00007E66 237C 0000 0000 0004        		move.l	#Map_obj11,4(a1)
00007E6E 337C 438E 0002             		move.w	#$438E,2(a1)
00007E74 137C 0004 0001             		move.b	#4,1(a1)
00007E7A 137C 0003 0018             		move.b	#3,$18(a1)
00007E80 137C 0008 0019             		move.b	#8,$19(a1)
00007E86 0643 0010                  		addi.w	#$10,d3
00007E8A 51C9 FF8A                  		dbf	d1,Obj11_MakeBdg ; repeat d1 times (length of bridge)
00007E8E                            
00007E8E                            Obj11_Action:				; XREF: Obj11_Index
00007E8E 6100                       		bsr.s	Obj11_Solid
00007E90 4A28 003E                  		tst.b	$3E(a0)
00007E94 6700                       		beq.s	Obj11_Display
00007E96 5928 003E                  		subq.b	#4,$3E(a0)
00007E9A 6100 0000                  		bsr.w	Obj11_Bend
00007E9E                            
00007E9E                            Obj11_Display:
00007E9E 6100 0000                  		bsr.w	DisplaySprite
00007EA2 6000 0000                  		bra.w	Obj11_ChkDel
00007EA6                            
00007EA6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007EA6                            
00007EA6                            
00007EA6                            Obj11_Solid:				; XREF: Obj11_Action
00007EA6 7200                       		moveq	#0,d1
00007EA8 1228 0028                  		move.b	$28(a0),d1
00007EAC E749                       		lsl.w	#3,d1
00007EAE 3401                       		move.w	d1,d2
00007EB0 5041                       		addq.w	#8,d1
00007EB2 D442                       		add.w	d2,d2
00007EB4 43F8 D000                  		lea	($FFFFD000).w,a1
00007EB8 4A69 0012                  		tst.w	$12(a1)
00007EBC 6B00 0000                  		bmi.w	locret_751E
00007EC0 3029 0008                  		move.w	8(a1),d0
00007EC4 9068 0008                  		sub.w	8(a0),d0
00007EC8 D041                       		add.w	d1,d0
00007ECA 6B00 0000                  		bmi.w	locret_751E
00007ECE B042                       		cmp.w	d2,d0
00007ED0 6400 0000                  		bcc.w	locret_751E
00007ED4 6000                       		bra.s	Platform2
00007ED6                            ; End of function Obj11_Solid
00007ED6                            
00007ED6                            ; ---------------------------------------------------------------------------
00007ED6                            ; Platform subroutine
00007ED6                            ; ---------------------------------------------------------------------------
00007ED6                            
00007ED6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007ED6                            
00007ED6                            
00007ED6                            PlatformObject:
00007ED6 43F8 D000                  		lea	($FFFFD000).w,a1
00007EDA 4A69 0012                  		tst.w	$12(a1)
00007EDE 6B00 0000                  		bmi.w	locret_751E
00007EE2 3029 0008                  		move.w	8(a1),d0
00007EE6 9068 0008                  		sub.w	8(a0),d0
00007EEA D041                       		add.w	d1,d0
00007EEC 6B00 0000                  		bmi.w	locret_751E
00007EF0 D241                       		add.w	d1,d1
00007EF2 B041                       		cmp.w	d1,d0
00007EF4 6400 0000                  		bcc.w	locret_751E
00007EF8                            
00007EF8                            Platform2:
00007EF8 3028 000C                  		move.w	$C(a0),d0
00007EFC 5140                       		subq.w	#8,d0
00007EFE                            
00007EFE                            Platform3:
00007EFE 3429 000C                  		move.w	$C(a1),d2
00007F02 1229 0016                  		move.b	$16(a1),d1
00007F06 4881                       		ext.w	d1
00007F08 D242                       		add.w	d2,d1
00007F0A 5841                       		addq.w	#4,d1
00007F0C 9041                       		sub.w	d1,d0
00007F0E 6200 0000                  		bhi.w	locret_751E
00007F12 0C40 FFF0                  		cmpi.w	#-$10,d0
00007F16 6500 0000                  		bcs.w	locret_751E
00007F1A 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00007F1E 6B00 0000                  		bmi.w	locret_751E
00007F22 0C29 0006 0024             		cmpi.b	#6,$24(a1)
00007F28 6400 0000                  		bcc.w	locret_751E
00007F2C D440                       		add.w	d0,d2
00007F2E 5642                       		addq.w	#3,d2
00007F30 3342 000C                  		move.w	d2,$C(a1)
00007F34 5428 0024                  		addq.b	#2,$24(a0)
00007F38                            
00007F38                            loc_74AE:
00007F38 0829 0003 0022             		btst	#3,$22(a1)
00007F3E 6700                       		beq.s	loc_74DC
00007F40 7000                       		moveq	#0,d0
00007F42 1029 003D                  		move.b	$3D(a1),d0
00007F46 ED48                       		lsl.w	#6,d0
00007F48 0680 00FF D000             		addi.l	#$FFD000,d0
00007F4E 2440                       		movea.l	d0,a2
00007F50 08AA 0003 0022             		bclr	#3,$22(a2)
00007F56 422A 0025                  		clr.b	$25(a2)
00007F5A 0C2A 0004 0024             		cmpi.b	#4,$24(a2)
00007F60 6600                       		bne.s	loc_74DC
00007F62 552A 0024                  		subq.b	#2,$24(a2)
00007F66                            
00007F66                            loc_74DC:
00007F66 3008                       		move.w	a0,d0
00007F68 0440 D000                  		subi.w	#-$3000,d0
00007F6C EC48                       		lsr.w	#6,d0
00007F6E 0240 007F                  		andi.w	#$7F,d0
00007F72 1340 003D                  		move.b	d0,$3D(a1)
00007F76 137C 0000 0026             		move.b	#0,$26(a1)
00007F7C 337C 0000 0012             		move.w	#0,$12(a1)
00007F82 3369 0010 0014             		move.w	$10(a1),$14(a1)
00007F88 0829 0001 0022             		btst	#1,$22(a1)
00007F8E 6700                       		beq.s	loc_7512
00007F90 2F08                       		move.l	a0,-(sp)
00007F92 2049                       		movea.l	a1,a0
00007F94 4EB9 0000 0000             		jsr	Sonic_ResetOnFloor
00007F9A 205F                       		movea.l	(sp)+,a0
00007F9C                            
00007F9C                            loc_7512:
00007F9C 08E9 0003 0022             		bset	#3,$22(a1)
00007FA2 08E8 0003 0022             		bset	#3,$22(a0)
00007FA8                            
00007FA8                            locret_751E:
00007FA8 4E75                       		rts	
00007FAA                            ; End of function PlatformObject
00007FAA                            
00007FAA                            ; ---------------------------------------------------------------------------
00007FAA                            ; Sloped platform subroutine (GHZ collapsing ledges and	SLZ seesaws)
00007FAA                            ; ---------------------------------------------------------------------------
00007FAA                            
00007FAA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007FAA                            
00007FAA                            
00007FAA                            SlopeObject:				; XREF: Obj1A_Slope; Obj5E_Slope
00007FAA 43F8 D000                  		lea	($FFFFD000).w,a1
00007FAE 4A69 0012                  		tst.w	$12(a1)
00007FB2 6B00 FFF4                  		bmi.w	locret_751E
00007FB6 3029 0008                  		move.w	8(a1),d0
00007FBA 9068 0008                  		sub.w	8(a0),d0
00007FBE D041                       		add.w	d1,d0
00007FC0 6BE6                       		bmi.s	locret_751E
00007FC2 D241                       		add.w	d1,d1
00007FC4 B041                       		cmp.w	d1,d0
00007FC6 64E0                       		bcc.s	locret_751E
00007FC8 0828 0000 0001             		btst	#0,1(a0)
00007FCE 6700                       		beq.s	loc_754A
00007FD0 4640                       		not.w	d0
00007FD2 D041                       		add.w	d1,d0
00007FD4                            
00007FD4                            loc_754A:
00007FD4 E248                       		lsr.w	#1,d0
00007FD6 7600                       		moveq	#0,d3
00007FD8 1632 0000                  		move.b	(a2,d0.w),d3
00007FDC 3028 000C                  		move.w	$C(a0),d0
00007FE0 9043                       		sub.w	d3,d0
00007FE2 6000 FF1A                  		bra.w	Platform3
00007FE6                            ; End of function SlopeObject
00007FE6                            
00007FE6                            
00007FE6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007FE6                            
00007FE6                            
00007FE6                            Obj15_Solid:				; XREF: Obj15_SetSolid
00007FE6 43F8 D000                  		lea	($FFFFD000).w,a1
00007FEA 4A69 0012                  		tst.w	$12(a1)
00007FEE 6B00 FFB8                  		bmi.w	locret_751E
00007FF2 3029 0008                  		move.w	8(a1),d0
00007FF6 9068 0008                  		sub.w	8(a0),d0
00007FFA D041                       		add.w	d1,d0
00007FFC 6B00 FFAA                  		bmi.w	locret_751E
00008000 D241                       		add.w	d1,d1
00008002 B041                       		cmp.w	d1,d0
00008004 6400 FFA2                  		bcc.w	locret_751E
00008008 3028 000C                  		move.w	$C(a0),d0
0000800C 9043                       		sub.w	d3,d0
0000800E 6000 FEEE                  		bra.w	Platform3
00008012                            ; End of function Obj15_Solid
00008012                            
00008012                            ; ===========================================================================
00008012                            
00008012                            Obj11_Action2:				; XREF: Obj11_Index
00008012 6100                       		bsr.s	Obj11_WalkOff
00008014 6100 0000                  		bsr.w	DisplaySprite
00008018 6000 0000                  		bra.w	Obj11_ChkDel
0000801C                            
0000801C                            ; ---------------------------------------------------------------------------
0000801C                            ; Subroutine allowing Sonic to walk off a bridge
0000801C                            ; ---------------------------------------------------------------------------
0000801C                            
0000801C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000801C                            
0000801C                            
0000801C                            Obj11_WalkOff:				; XREF: Obj11_Action2
0000801C 7200                       		moveq	#0,d1
0000801E 1228 0028                  		move.b	$28(a0),d1
00008022 E749                       		lsl.w	#3,d1
00008024 3401                       		move.w	d1,d2
00008026 5041                       		addq.w	#8,d1
00008028 6100                       		bsr.s	ExitPlatform2
0000802A 6400                       		bcc.s	locret_75BE
0000802C E848                       		lsr.w	#4,d0
0000802E 1140 003F                  		move.b	d0,$3F(a0)
00008032 1028 003E                  		move.b	$3E(a0),d0
00008036 0C00 0040                  		cmpi.b	#$40,d0
0000803A 6700                       		beq.s	loc_75B6
0000803C 5828 003E                  		addq.b	#4,$3E(a0)
00008040                            
00008040                            loc_75B6:
00008040 6100 0000                  		bsr.w	Obj11_Bend
00008044 6100 0000                  		bsr.w	Obj11_MoveSonic
00008048                            
00008048                            locret_75BE:
00008048 4E75                       		rts	
0000804A                            ; End of function Obj11_WalkOff
0000804A                            
0000804A                            ; ---------------------------------------------------------------------------
0000804A                            ; Subroutine allowing Sonic to walk or jump off	a platform
0000804A                            ; ---------------------------------------------------------------------------
0000804A                            
0000804A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000804A                            
0000804A                            
0000804A                            ExitPlatform:
0000804A 3401                       		move.w	d1,d2
0000804C                            
0000804C                            ExitPlatform2:
0000804C D442                       		add.w	d2,d2
0000804E 43F8 D000                  		lea	($FFFFD000).w,a1
00008052 0829 0001 0022             		btst	#1,$22(a1)
00008058 6600                       		bne.s	loc_75E0
0000805A 3029 0008                  		move.w	8(a1),d0
0000805E 9068 0008                  		sub.w	8(a0),d0
00008062 D041                       		add.w	d1,d0
00008064 6B00                       		bmi.s	loc_75E0
00008066 B042                       		cmp.w	d2,d0
00008068 6500                       		bcs.s	locret_75F2
0000806A                            
0000806A                            loc_75E0:
0000806A 08A9 0003 0022             		bclr	#3,$22(a1)
00008070 117C 0002 0024             		move.b	#2,$24(a0)
00008076 08A8 0003 0022             		bclr	#3,$22(a0)
0000807C                            
0000807C                            locret_75F2:
0000807C 4E75                       		rts	
0000807E                            ; End of function ExitPlatform
0000807E                            
0000807E                            
0000807E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000807E                            
0000807E                            
0000807E                            Obj11_MoveSonic:			; XREF: Obj11_WalkOff
0000807E 7000                       		moveq	#0,d0
00008080 1028 003F                  		move.b	$3F(a0),d0
00008084 1030 0029                  		move.b	$29(a0,d0.w),d0
00008088 ED48                       		lsl.w	#6,d0
0000808A 0680 00FF D000             		addi.l	#$FFD000,d0
00008090 2440                       		movea.l	d0,a2
00008092 43F8 D000                  		lea	($FFFFD000).w,a1
00008096 302A 000C                  		move.w	$C(a2),d0
0000809A 5140                       		subq.w	#8,d0
0000809C 7200                       		moveq	#0,d1
0000809E 1229 0016                  		move.b	$16(a1),d1
000080A2 9041                       		sub.w	d1,d0
000080A4 3340 000C                  		move.w	d0,$C(a1)	; change Sonic's position on y-axis
000080A8 4E75                       		rts	
000080AA                            ; End of function Obj11_MoveSonic
000080AA                            
000080AA                            
000080AA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000080AA                            
000080AA                            
000080AA                            Obj11_Bend:				; XREF: Obj11_Action; Obj11_WalkOff
000080AA 1028 003E                  		move.b	$3E(a0),d0
000080AE 6100 B32A                  		bsr.w	CalcSine
000080B2 3800                       		move.w	d0,d4
000080B4 49F9 0000 0000             		lea	(Obj11_BendData2).l,a4
000080BA 7000                       		moveq	#0,d0
000080BC 1028 0028                  		move.b	$28(a0),d0
000080C0 E948                       		lsl.w	#4,d0
000080C2 7600                       		moveq	#0,d3
000080C4 1628 003F                  		move.b	$3F(a0),d3
000080C8 3403                       		move.w	d3,d2
000080CA D640                       		add.w	d0,d3
000080CC 7A00                       		moveq	#0,d5
000080CE 4BF9 0000 0000             		lea	(Obj11_BendData).l,a5
000080D4 1A35 3000                  		move.b	(a5,d3.w),d5
000080D8 0243 000F                  		andi.w	#$F,d3
000080DC E94B                       		lsl.w	#4,d3
000080DE 47F4 3000                  		lea	(a4,d3.w),a3
000080E2 45E8 0029                  		lea	$29(a0),a2
000080E6                            
000080E6                            loc_765C:
000080E6 7000                       		moveq	#0,d0
000080E8 101A                       		move.b	(a2)+,d0
000080EA ED48                       		lsl.w	#6,d0
000080EC 0680 00FF D000             		addi.l	#$FFD000,d0
000080F2 2240                       		movea.l	d0,a1
000080F4 7000                       		moveq	#0,d0
000080F6 101B                       		move.b	(a3)+,d0
000080F8 5240                       		addq.w	#1,d0
000080FA C0C5                       		mulu.w	d5,d0
000080FC C0C4                       		mulu.w	d4,d0
000080FE 4840                       		swap	d0
00008100 D069 003C                  		add.w	$3C(a1),d0
00008104 3340 000C                  		move.w	d0,$C(a1)
00008108 51CA FFDC                  		dbf	d2,loc_765C
0000810C 7000                       		moveq	#0,d0
0000810E 1028 0028                  		move.b	$28(a0),d0
00008112 7600                       		moveq	#0,d3
00008114 1628 003F                  		move.b	$3F(a0),d3
00008118 5203                       		addq.b	#1,d3
0000811A 9600                       		sub.b	d0,d3
0000811C 4403                       		neg.b	d3
0000811E 6B00                       		bmi.s	locret_76CA
00008120 3403                       		move.w	d3,d2
00008122 E94B                       		lsl.w	#4,d3
00008124 47F4 3000                  		lea	(a4,d3.w),a3
00008128 D6C2                       		adda.w	d2,a3
0000812A 5342                       		subq.w	#1,d2
0000812C 6500                       		bcs.s	locret_76CA
0000812E                            
0000812E                            loc_76A4:
0000812E 7000                       		moveq	#0,d0
00008130 101A                       		move.b	(a2)+,d0
00008132 ED48                       		lsl.w	#6,d0
00008134 0680 00FF D000             		addi.l	#$FFD000,d0
0000813A 2240                       		movea.l	d0,a1
0000813C 7000                       		moveq	#0,d0
0000813E 1023                       		move.b	-(a3),d0
00008140 5240                       		addq.w	#1,d0
00008142 C0C5                       		mulu.w	d5,d0
00008144 C0C4                       		mulu.w	d4,d0
00008146 4840                       		swap	d0
00008148 D069 003C                  		add.w	$3C(a1),d0
0000814C 3340 000C                  		move.w	d0,$C(a1)
00008150 51CA FFDC                  		dbf	d2,loc_76A4
00008154                            
00008154                            locret_76CA:
00008154 4E75                       		rts	
00008156                            ; End of function Obj11_Bend
00008156                            
00008156                            ; ===========================================================================
00008156                            ; ---------------------------------------------------------------------------
00008156                            ; GHZ bridge-bending data
00008156                            ; (Defines how the bridge bends	when Sonic walks across	it)
00008156                            ; ---------------------------------------------------------------------------
00008156                            Obj11_BendData:	incbin	misc\ghzbend1.bin
00008266                            		even
00008266                            Obj11_BendData2:incbin	misc\ghzbend2.bin
00008366                            		even
00008366                            
00008366                            ; ===========================================================================
00008366                            
00008366                            Obj11_ChkDel:				; XREF: Obj11_Display; Obj11_Action2
00008366 3028 0008                  		move.w	8(a0),d0
0000836A 0240 FF80                  		andi.w	#$FF80,d0
0000836E 3238 F700                  		move.w	($FFFFF700).w,d1
00008372 0441 0080                  		subi.w	#$80,d1
00008376 0241 FF80                  		andi.w	#$FF80,d1
0000837A 9041                       		sub.w	d1,d0
0000837C 0C40 0280                  		cmpi.w	#$280,d0
00008380 6200 0000                  		bhi.w	Obj11_DelAll
00008384 4E75                       		rts	
00008386                            ; ===========================================================================
00008386                            
00008386                            Obj11_DelAll:				; XREF: Obj11_ChkDel
00008386 7400                       		moveq	#0,d2
00008388 45E8 0028                  		lea	$28(a0),a2	; load bridge length
0000838C 141A                       		move.b	(a2)+,d2	; move bridge length to	d2
0000838E 5302                       		subq.b	#1,d2		; subtract 1
00008390 6500                       		bcs.s	Obj11_Delete
00008392                            
00008392                            Obj11_DelLoop:
00008392 7000                       		moveq	#0,d0
00008394 101A                       		move.b	(a2)+,d0
00008396 ED48                       		lsl.w	#6,d0
00008398 0680 00FF D000             		addi.l	#$FFD000,d0
0000839E 2240                       		movea.l	d0,a1
000083A0 B048                       		cmp.w	a0,d0
000083A2 6700                       		beq.s	loc_791E
000083A4 6100 0000                  		bsr.w	DeleteObject2
000083A8                            
000083A8                            loc_791E:
000083A8 51CA FFE8                  		dbf	d2,Obj11_DelLoop ; repeat d2 times (bridge length)
000083AC                            
000083AC                            Obj11_Delete:
000083AC 6100 0000                  		bsr.w	DeleteObject
000083B0 4E75                       		rts	
000083B2                            ; ===========================================================================
000083B2                            
000083B2                            Obj11_Delete2:				; XREF: Obj11_Index
000083B2 6100 0000                  		bsr.w	DeleteObject
000083B6 4E75                       		rts	
000083B8                            ; ===========================================================================
000083B8                            
000083B8                            Obj11_Display2:				; XREF: Obj11_Index
000083B8 6100 0000                  		bsr.w	DisplaySprite
000083BC 4E75                       		rts	
000083BE                            ; ===========================================================================
000083BE                            ; ---------------------------------------------------------------------------
000083BE                            ; Sprite mappings - GHZ	bridge
000083BE                            ; ---------------------------------------------------------------------------
000083BE                            Map_obj11:
000083BE                            	include "_maps\obj11.asm"
000083BE                            ; ---------------------------------------------------------------------------
000083BE                            ; Sprite mappings - GHZ	bridge
000083BE                            ; ---------------------------------------------------------------------------
000083BE 0000 0000                  		dc.w byte_793A-Map_obj11, byte_7940-Map_obj11
000083C2 0000                       		dc.w byte_794B-Map_obj11
000083C4 01                         byte_793A:	dc.b 1
000083C5 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
000083CA 02                         byte_7940:	dc.b 2
000083CB F804 0004 F0               		dc.b $F8, 4, 0,	4, $F0
000083D0 000C 0006 F0               		dc.b 0,	$C, 0, 6, $F0
000083D5 01                         byte_794B:	dc.b 1
000083D6 FC04 0008 F8               		dc.b $FC, 4, 0,	8, $F8
000083DC 00                         		even
000083DC 00                         		even
000083DC                            
000083DC                            ; ===========================================================================
000083DC                            ; ---------------------------------------------------------------------------
000083DC                            ; Object 15 - swinging platforms (GHZ, MZ, SLZ)
000083DC                            ;	    - spiked ball on a chain (SBZ)
000083DC                            ; ---------------------------------------------------------------------------
000083DC                            
000083DC                            Obj15:					; XREF: Obj_Index
000083DC 7000                       		moveq	#0,d0
000083DE 1028 0024                  		move.b	$24(a0),d0
000083E2 323B 0000                  		move.w	Obj15_Index(pc,d0.w),d1
000083E6 4EFB 1000                  		jmp	Obj15_Index(pc,d1.w)
000083EA                            ; ===========================================================================
000083EA 0000 0000                  Obj15_Index:	dc.w Obj15_Main-Obj15_Index, Obj15_SetSolid-Obj15_Index
000083EE 0000 0000                  		dc.w Obj15_Action2-Obj15_Index,	Obj15_Delete-Obj15_Index
000083F2 0000 0000                  		dc.w Obj15_Delete-Obj15_Index, Obj15_Display-Obj15_Index
000083F6 0000                       		dc.w Obj15_Action-Obj15_Index
000083F8                            ; ===========================================================================
000083F8                            
000083F8                            Obj15_Main:				; XREF: Obj15_Index
000083F8 5428 0024                  		addq.b	#2,$24(a0)
000083FC 217C 0000 0000 0004        		move.l	#Map_obj15,4(a0) ; GHZ and MZ specific code
00008404 317C 4380 0002             		move.w	#$4380,2(a0)
0000840A 117C 0004 0001             		move.b	#4,1(a0)
00008410 117C 0003 0018             		move.b	#3,$18(a0)
00008416 117C 0018 0019             		move.b	#$18,$19(a0)
0000841C 117C 0008 0016             		move.b	#8,$16(a0)
00008422 3168 000C 0038             		move.w	$C(a0),$38(a0)
00008428 3168 0008 003A             		move.w	8(a0),$3A(a0)
0000842E 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
00008434 6600                       		bne.s	Obj15_NotSLZ
00008436 217C 0000 0000 0004        		move.l	#Map_obj15a,4(a0) ; SLZ	specific code
0000843E 317C 43DC 0002             		move.w	#$43DC,2(a0)
00008444 117C 0020 0019             		move.b	#$20,$19(a0)
0000844A 117C 0010 0016             		move.b	#$10,$16(a0)
00008450 117C 0099 0020             		move.b	#$99,$20(a0)
00008456                            
00008456                            Obj15_NotSLZ:
00008456 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
0000845C 6600                       		bne.s	Obj15_SetLength
0000845E 217C 0000 0000 0004        		move.l	#Map_obj15b,4(a0) ; SBZ	specific code
00008466 317C 0391 0002             		move.w	#$391,2(a0)
0000846C 117C 0018 0019             		move.b	#$18,$19(a0)
00008472 117C 0018 0016             		move.b	#$18,$16(a0)
00008478 117C 0086 0020             		move.b	#$86,$20(a0)
0000847E 117C 000C 0024             		move.b	#$C,$24(a0)
00008484                            
00008484                            Obj15_SetLength:
00008484 1810                       		move.b	0(a0),d4
00008486 7200                       		moveq	#0,d1
00008488 45E8 0028                  		lea	$28(a0),a2	; move chain length to a2
0000848C 1212                       		move.b	(a2),d1		; move a2 to d1
0000848E 3F01                       		move.w	d1,-(sp)
00008490 0241 000F                  		andi.w	#$F,d1
00008494 14FC 0000                  		move.b	#0,(a2)+
00008498 3601                       		move.w	d1,d3
0000849A E94B                       		lsl.w	#4,d3
0000849C 5003                       		addq.b	#8,d3
0000849E 1143 003C                  		move.b	d3,$3C(a0)
000084A2 5103                       		subq.b	#8,d3
000084A4 4A28 001A                  		tst.b	$1A(a0)
000084A8 6700                       		beq.s	Obj15_MakeChain
000084AA 5003                       		addq.b	#8,d3
000084AC 5341                       		subq.w	#1,d1
000084AE                            
000084AE                            Obj15_MakeChain:
000084AE 6100 0000                  		bsr.w	SingleObjLoad
000084B2 6600                       		bne.s	loc_7A92
000084B4 5228 0028                  		addq.b	#1,$28(a0)
000084B8 3A09                       		move.w	a1,d5
000084BA 0445 D000                  		subi.w	#-$3000,d5
000084BE EC4D                       		lsr.w	#6,d5
000084C0 0245 007F                  		andi.w	#$7F,d5
000084C4 14C5                       		move.b	d5,(a2)+
000084C6 137C 000A 0024             		move.b	#$A,$24(a1)
000084CC 1284                       		move.b	d4,0(a1)	; load swinging	object
000084CE 2368 0004 0004             		move.l	4(a0),4(a1)
000084D4 3368 0002 0002             		move.w	2(a0),2(a1)
000084DA 08A9 0006 0002             		bclr	#6,2(a1)
000084E0 137C 0004 0001             		move.b	#4,1(a1)
000084E6 137C 0004 0018             		move.b	#4,$18(a1)
000084EC 137C 0008 0019             		move.b	#8,$19(a1)
000084F2 137C 0001 001A             		move.b	#1,$1A(a1)
000084F8 1343 003C                  		move.b	d3,$3C(a1)
000084FC 0403 0010                  		subi.b	#$10,d3
00008500 6400                       		bcc.s	loc_7A8E
00008502 137C 0002 001A             		move.b	#2,$1A(a1)
00008508 137C 0003 0018             		move.b	#3,$18(a1)
0000850E 08E9 0006 0002             		bset	#6,2(a1)
00008514                            
00008514                            loc_7A8E:
00008514 51C9 FF98                  		dbf	d1,Obj15_MakeChain ; repeat d1 times (chain length)
00008518                            
00008518                            loc_7A92:
00008518 3A08                       		move.w	a0,d5
0000851A 0445 D000                  		subi.w	#-$3000,d5
0000851E EC4D                       		lsr.w	#6,d5
00008520 0245 007F                  		andi.w	#$7F,d5
00008524 14C5                       		move.b	d5,(a2)+
00008526 317C 4080 0026             		move.w	#$4080,$26(a0)
0000852C 317C FE00 003E             		move.w	#-$200,$3E(a0)
00008532 321F                       		move.w	(sp)+,d1
00008534 0801 0004                  		btst	#4,d1		; is object type $8X ?
00008538 6700                       		beq.s	loc_7AD4	; if not, branch
0000853A 217C 0000 0000 0004        		move.l	#Map_obj48,4(a0) ; use GHZ ball	mappings
00008542 317C 43AA 0002             		move.w	#$43AA,2(a0)
00008548 117C 0001 001A             		move.b	#1,$1A(a0)
0000854E 117C 0002 0018             		move.b	#2,$18(a0)
00008554 117C 0081 0020             		move.b	#$81,$20(a0)	; make object hurt when	touched
0000855A                            
0000855A                            loc_7AD4:
0000855A 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; is zone SBZ?
00008560 6700                       		beq.s	Obj15_Action	; if yes, branch
00008562                            
00008562                            Obj15_SetSolid:				; XREF: Obj15_Index
00008562 7200                       		moveq	#0,d1
00008564 1228 0019                  		move.b	$19(a0),d1
00008568 7600                       		moveq	#0,d3
0000856A 1628 0016                  		move.b	$16(a0),d3
0000856E 6100 FA76                  		bsr.w	Obj15_Solid
00008572                            
00008572                            Obj15_Action:				; XREF: Obj15_Index
00008572 6100 0000                  		bsr.w	Obj15_Move
00008576 6100 0000                  		bsr.w	DisplaySprite
0000857A 6000 0000                  		bra.w	Obj15_ChkDel
0000857E                            ; ===========================================================================
0000857E                            
0000857E                            Obj15_Action2:				; XREF: Obj15_Index
0000857E 7200                       		moveq	#0,d1
00008580 1228 0019                  		move.b	$19(a0),d1
00008584 6100 FAC4                  		bsr.w	ExitPlatform
00008588 3F28 0008                  		move.w	8(a0),-(sp)
0000858C 6100 0000                  		bsr.w	Obj15_Move
00008590 341F                       		move.w	(sp)+,d2
00008592 7600                       		moveq	#0,d3
00008594 1628 0016                  		move.b	$16(a0),d3
00008598 5203                       		addq.b	#1,d3
0000859A 6100 0000                  		bsr.w	MvSonicOnPtfm
0000859E 6100 0000                  		bsr.w	DisplaySprite
000085A2 6000 0000                  		bra.w	Obj15_ChkDel
000085A6                            
000085A6 4E75                       		rts
000085A8                            
000085A8                            ; ---------------------------------------------------------------------------
000085A8                            ; Subroutine to	change Sonic's position with a platform
000085A8                            ; ---------------------------------------------------------------------------
000085A8                            
000085A8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000085A8                            
000085A8                            
000085A8                            MvSonicOnPtfm:
000085A8 43F8 D000                  		lea	($FFFFD000).w,a1
000085AC 3028 000C                  		move.w	$C(a0),d0
000085B0 9043                       		sub.w	d3,d0
000085B2 6000                       		bra.s	MvSonic2
000085B4                            ; End of function MvSonicOnPtfm
000085B4                            
000085B4                            ; ---------------------------------------------------------------------------
000085B4                            ; Subroutine to	change Sonic's position with a platform
000085B4                            ; ---------------------------------------------------------------------------
000085B4                            
000085B4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000085B4                            
000085B4                            
000085B4                            MvSonicOnPtfm2:
000085B4 43F8 D000                  		lea	($FFFFD000).w,a1
000085B8 3028 000C                  		move.w	$C(a0),d0
000085BC 0440 0009                  		subi.w	#9,d0
000085C0                            
000085C0                            MvSonic2:
000085C0 4A38 F7C8                  		tst.b	($FFFFF7C8).w
000085C4 6B00                       		bmi.s	locret_7B62
000085C6 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
000085CC 6400                       		bcc.s	locret_7B62
000085CE 4A78 FE08                  		tst.w	($FFFFFE08).w
000085D2 6600                       		bne.s	locret_7B62
000085D4 7200                       		moveq	#0,d1
000085D6 1229 0016                  		move.b	$16(a1),d1
000085DA 9041                       		sub.w	d1,d0
000085DC 3340 000C                  		move.w	d0,$C(a1)
000085E0 9468 0008                  		sub.w	8(a0),d2
000085E4 9569 0008                  		sub.w	d2,8(a1)
000085E8                            
000085E8                            locret_7B62:
000085E8 4E75                       		rts	
000085EA                            ; End of function MvSonicOnPtfm2
000085EA                            
000085EA                            
000085EA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000085EA                            
000085EA                            
000085EA                            Obj15_Move:				; XREF: Obj15_Action; Obj15_Action2
000085EA 1038 FE78                  		move.b	($FFFFFE78).w,d0
000085EE 323C 0080                  		move.w	#$80,d1
000085F2 0828 0000 0022             		btst	#0,$22(a0)
000085F8 6700                       		beq.s	loc_7B78
000085FA 4440                       		neg.w	d0
000085FC D041                       		add.w	d1,d0
000085FE                            
000085FE                            loc_7B78:
000085FE 6000                       		bra.s	Obj15_Move2
00008600                            ; End of function Obj15_Move
00008600                            
00008600                            
00008600                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008600                            
00008600                            
00008600                            Obj48_Move:				; XREF: Obj48_Display2
00008600 4A28 003D                  		tst.b	$3D(a0)
00008604 6600                       		bne.s	loc_7B9C
00008606 3028 003E                  		move.w	$3E(a0),d0
0000860A 5040                       		addq.w	#8,d0
0000860C 3140 003E                  		move.w	d0,$3E(a0)
00008610 D168 0026                  		add.w	d0,$26(a0)
00008614 0C40 0200                  		cmpi.w	#$200,d0
00008618 6600                       		bne.s	loc_7BB6
0000861A 117C 0001 003D             		move.b	#1,$3D(a0)
00008620 6000                       		bra.s	loc_7BB6
00008622                            ; ===========================================================================
00008622                            
00008622                            loc_7B9C:
00008622 3028 003E                  		move.w	$3E(a0),d0
00008626 5140                       		subq.w	#8,d0
00008628 3140 003E                  		move.w	d0,$3E(a0)
0000862C D168 0026                  		add.w	d0,$26(a0)
00008630 0C40 FE00                  		cmpi.w	#-$200,d0
00008634 6600                       		bne.s	loc_7BB6
00008636 117C 0000 003D             		move.b	#0,$3D(a0)
0000863C                            
0000863C                            loc_7BB6:
0000863C 1028 0026                  		move.b	$26(a0),d0
00008640                            ; End of function Obj48_Move
00008640                            
00008640                            
00008640                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008640                            
00008640                            
00008640                            Obj15_Move2:				; XREF: Obj15_Move; Obj48_Display
00008640 6100 AD98                  		bsr.w	CalcSine
00008644 3428 0038                  		move.w	$38(a0),d2
00008648 3628 003A                  		move.w	$3A(a0),d3
0000864C 45E8 0028                  		lea	$28(a0),a2
00008650 7C00                       		moveq	#0,d6
00008652 1C1A                       		move.b	(a2)+,d6
00008654                            
00008654                            loc_7BCE:
00008654 7800                       		moveq	#0,d4
00008656 181A                       		move.b	(a2)+,d4
00008658 ED4C                       		lsl.w	#6,d4
0000865A 0684 00FF D000             		addi.l	#$FFD000,d4
00008660 2244                       		movea.l	d4,a1
00008662 7800                       		moveq	#0,d4
00008664 1829 003C                  		move.b	$3C(a1),d4
00008668 2A04                       		move.l	d4,d5
0000866A C9C0                       		muls.w	d0,d4
0000866C E084                       		asr.l	#8,d4
0000866E CBC1                       		muls.w	d1,d5
00008670 E085                       		asr.l	#8,d5
00008672 D842                       		add.w	d2,d4
00008674 DA43                       		add.w	d3,d5
00008676 3344 000C                  		move.w	d4,$C(a1)
0000867A 3345 0008                  		move.w	d5,8(a1)
0000867E 51CE FFD4                  		dbf	d6,loc_7BCE
00008682 4E75                       		rts	
00008684                            ; End of function Obj15_Move2
00008684                            
00008684                            ; ===========================================================================
00008684                            
00008684                            Obj15_ChkDel:				; XREF: Obj15_Action; Obj15_Action2
00008684 3028 003A                  		move.w	$3A(a0),d0
00008688 0240 FF80                  		andi.w	#$FF80,d0
0000868C 3238 F700                  		move.w	($FFFFF700).w,d1
00008690 0441 0080                  		subi.w	#$80,d1
00008694 0241 FF80                  		andi.w	#$FF80,d1
00008698 9041                       		sub.w	d1,d0
0000869A 0C40 0280                  		cmpi.w	#$280,d0
0000869E 6200 0000                  		bhi.w	Obj15_DelAll
000086A2 4E75                       		rts	
000086A4                            ; ===========================================================================
000086A4                            
000086A4                            Obj15_DelAll:				; XREF: Obj15_ChkDel
000086A4 7400                       		moveq	#0,d2
000086A6 45E8 0028                  		lea	$28(a0),a2
000086AA 141A                       		move.b	(a2)+,d2
000086AC                            
000086AC                            Obj15_DelLoop:
000086AC 7000                       		moveq	#0,d0
000086AE 101A                       		move.b	(a2)+,d0
000086B0 ED48                       		lsl.w	#6,d0
000086B2 0680 00FF D000             		addi.l	#$FFD000,d0
000086B8 2240                       		movea.l	d0,a1
000086BA 6100 0000                  		bsr.w	DeleteObject2
000086BE 51CA FFEC                  		dbf	d2,Obj15_DelLoop ; repeat for length of	chain
000086C2 4E75                       		rts	
000086C4                            ; ===========================================================================
000086C4                            
000086C4                            Obj15_Delete:				; XREF: Obj15_Index
000086C4 6100 0000                  		bsr.w	DeleteObject
000086C8 4E75                       		rts	
000086CA                            ; ===========================================================================
000086CA                            
000086CA                            Obj15_Display:				; XREF: Obj15_Index
000086CA 6000 0000                  		bra.w	DisplaySprite
000086CE                            ; ===========================================================================
000086CE                            ; ---------------------------------------------------------------------------
000086CE                            ; Sprite mappings - GHZ	and MZ swinging	platforms
000086CE                            ; ---------------------------------------------------------------------------
000086CE                            Map_obj15:
000086CE                            	include "_maps\obj15ghz.asm"
000086CE                            ; ---------------------------------------------------------------------------
000086CE                            ; Sprite mappings - GHZ	and MZ swinging	platforms
000086CE                            ; ---------------------------------------------------------------------------
000086CE 0000                       		dc.w byte_7C4E-Map_obj15
000086D0 0000                       		dc.w byte_7C59-Map_obj15
000086D2 0000                       		dc.w byte_7C5F-Map_obj15
000086D4 02                         byte_7C4E:	dc.b 2
000086D5 F809 0004 E8               		dc.b $F8, 9, 0,	4, $E8
000086DA F809 0004 00               		dc.b $F8, 9, 0,	4, 0
000086DF 01                         byte_7C59:	dc.b 1
000086E0 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
000086E5 01                         byte_7C5F:	dc.b 1
000086E6 F805 000A F8               		dc.b $F8, 5, 0,	$A, $F8
000086EC 00                         		even
000086EC 00                         		even
000086EC                            
000086EC                            ; ---------------------------------------------------------------------------
000086EC                            ; Sprite mappings - SLZ	swinging platforms
000086EC                            ; ---------------------------------------------------------------------------
000086EC                            Map_obj15a:
000086EC                            	include "_maps\obj15slz.asm"
000086EC                            ; ---------------------------------------------------------------------------
000086EC                            ; Sprite mappings - SLZ	swinging platforms
000086EC                            ; ---------------------------------------------------------------------------
000086EC 0000                       		dc.w byte_7C6C-Map_obj15a
000086EE 0000                       		dc.w byte_7C95-Map_obj15a
000086F0 0000                       		dc.w byte_7C9B-Map_obj15a
000086F2 08                         byte_7C6C:	dc.b 8
000086F3 F00F 0004 E0               		dc.b $F0, $F, 0, 4, $E0
000086F8 F00F 0804 00               		dc.b $F0, $F, 8, 4, 0
000086FD F005 0014 D0               		dc.b $F0, 5, 0,	$14, $D0
00008702 F005 0814 20               		dc.b $F0, 5, 8,	$14, $20
00008707 1004 0018 E0               		dc.b $10, 4, 0,	$18, $E0
0000870C 1004 0818 10               		dc.b $10, 4, 8,	$18, $10
00008711 1001 001A F8               		dc.b $10, 1, 0,	$1A, $F8
00008716 1001 081A 00               		dc.b $10, 1, 8,	$1A, 0
0000871B 01                         byte_7C95:	dc.b 1
0000871C F805 4000 F8               		dc.b $F8, 5, $40, 0, $F8
00008721 01                         byte_7C9B:	dc.b 1
00008722 F805 001C F8               		dc.b $F8, 5, 0,	$1C, $F8
00008728 00                         		even
00008728 00                         		even
00008728                            
00008728                            ; ===========================================================================
00008728                            ; ---------------------------------------------------------------------------
00008728                            ; Object 17 - helix of spikes on a pole	(GHZ)
00008728                            ; ---------------------------------------------------------------------------
00008728                            
00008728                            Obj17:					; XREF: Obj_Index
00008728 7000                       		moveq	#0,d0
0000872A 1028 0024                  		move.b	$24(a0),d0
0000872E 323B 0000                  		move.w	Obj17_Index(pc,d0.w),d1
00008732 4EFB 1000                  		jmp	Obj17_Index(pc,d1.w)
00008736                            ; ===========================================================================
00008736 0000                       Obj17_Index:	dc.w Obj17_Main-Obj17_Index
00008738 0000                       		dc.w Obj17_Action-Obj17_Index
0000873A 0000                       		dc.w Obj17_Action-Obj17_Index
0000873C 0000                       		dc.w Obj17_Delete-Obj17_Index
0000873E 0000                       		dc.w Obj17_Display-Obj17_Index
00008740                            ; ===========================================================================
00008740                            
00008740                            Obj17_Main:				; XREF: Obj17_Index
00008740 5428 0024                  		addq.b	#2,$24(a0)
00008744 217C 0000 0000 0004        		move.l	#Map_obj17,4(a0)
0000874C 317C 4398 0002             		move.w	#$4398,2(a0)
00008752 117C 0007 0022             		move.b	#7,$22(a0)
00008758 117C 0004 0001             		move.b	#4,1(a0)
0000875E 117C 0003 0018             		move.b	#3,$18(a0)
00008764 117C 0008 0019             		move.b	#8,$19(a0)
0000876A 3428 000C                  		move.w	$C(a0),d2
0000876E 3628 0008                  		move.w	8(a0),d3
00008772 1810                       		move.b	0(a0),d4
00008774 45E8 0028                  		lea	$28(a0),a2	; move helix length to a2
00008778 7200                       		moveq	#0,d1
0000877A 1212                       		move.b	(a2),d1		; move a2 to d1
0000877C 14FC 0000                  		move.b	#0,(a2)+
00008780 3001                       		move.w	d1,d0
00008782 E248                       		lsr.w	#1,d0
00008784 E948                       		lsl.w	#4,d0
00008786 9640                       		sub.w	d0,d3
00008788 5501                       		subq.b	#2,d1
0000878A 6500                       		bcs.s	Obj17_Action
0000878C 7C00                       		moveq	#0,d6
0000878E                            
0000878E                            Obj17_MakeHelix:
0000878E 6100 0000                  		bsr.w	SingleObjLoad
00008792 6600                       		bne.s	Obj17_Action
00008794 5228 0028                  		addq.b	#1,$28(a0)
00008798 3A09                       		move.w	a1,d5
0000879A 0445 D000                  		subi.w	#$D000,d5
0000879E EC4D                       		lsr.w	#6,d5
000087A0 0245 007F                  		andi.w	#$7F,d5
000087A4 14C5                       		move.b	d5,(a2)+
000087A6 137C 0008 0024             		move.b	#8,$24(a1)
000087AC 1284                       		move.b	d4,0(a1)
000087AE 3342 000C                  		move.w	d2,$C(a1)
000087B2 3343 0008                  		move.w	d3,8(a1)
000087B6 2368 0004 0004             		move.l	4(a0),4(a1)
000087BC 337C 4398 0002             		move.w	#$4398,2(a1)
000087C2 137C 0004 0001             		move.b	#4,1(a1)
000087C8 137C 0003 0018             		move.b	#3,$18(a1)
000087CE 137C 0008 0019             		move.b	#8,$19(a1)
000087D4 1346 003E                  		move.b	d6,$3E(a1)
000087D8 5206                       		addq.b	#1,d6
000087DA 0206 0007                  		andi.b	#7,d6
000087DE 0643 0010                  		addi.w	#$10,d3
000087E2 B668 0008                  		cmp.w	8(a0),d3
000087E6 6600                       		bne.s	loc_7D78
000087E8 1146 003E                  		move.b	d6,$3E(a0)
000087EC 5206                       		addq.b	#1,d6
000087EE 0206 0007                  		andi.b	#7,d6
000087F2 0643 0010                  		addi.w	#$10,d3
000087F6 5228 0028                  		addq.b	#1,$28(a0)
000087FA                            
000087FA                            loc_7D78:
000087FA 51C9 FF92                  		dbf	d1,Obj17_MakeHelix ; repeat d1 times (helix length)
000087FE                            
000087FE                            Obj17_Action:				; XREF: Obj17_Index
000087FE 6100 0000                  		bsr.w	Obj17_RotateSpikes
00008802 6100 0000                  		bsr.w	DisplaySprite
00008806 6000 0000                  		bra.w	Obj17_ChkDel
0000880A                            
0000880A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000880A                            
0000880A                            
0000880A                            Obj17_RotateSpikes:			; XREF: Obj17_Action; Obj17_Display
0000880A 1038 FEC1                  		move.b	($FFFFFEC1).w,d0
0000880E 117C 0000 0020             		move.b	#0,$20(a0)	; make object harmless
00008814 D028 003E                  		add.b	$3E(a0),d0
00008818 0200 0007                  		andi.b	#7,d0
0000881C 1140 001A                  		move.b	d0,$1A(a0)	; change current frame
00008820 6600                       		bne.s	locret_7DA6
00008822 117C 0084 0020             		move.b	#$84,$20(a0)	; make object harmful
00008828                            
00008828                            locret_7DA6:
00008828 4E75                       		rts	
0000882A                            ; End of function Obj17_RotateSpikes
0000882A                            
0000882A                            ; ===========================================================================
0000882A                            
0000882A                            Obj17_ChkDel:				; XREF: Obj17_Action
0000882A 3028 0008                  		move.w	8(a0),d0
0000882E 0240 FF80                  		andi.w	#$FF80,d0
00008832 3238 F700                  		move.w	($FFFFF700).w,d1
00008836 0441 0080                  		subi.w	#$80,d1
0000883A 0241 FF80                  		andi.w	#$FF80,d1
0000883E 9041                       		sub.w	d1,d0
00008840 0C40 0280                  		cmpi.w	#$280,d0
00008844 6200 0000                  		bhi.w	Obj17_DelAll
00008848 4E75                       		rts	
0000884A                            ; ===========================================================================
0000884A                            
0000884A                            Obj17_DelAll:				; XREF: Obj17_ChkDel
0000884A 7400                       		moveq	#0,d2
0000884C 45E8 0028                  		lea	$28(a0),a2	; move helix length to a2
00008850 141A                       		move.b	(a2)+,d2	; move a2 to d2
00008852 5502                       		subq.b	#2,d2
00008854 6500                       		bcs.s	Obj17_Delete
00008856                            
00008856                            Obj17_DelLoop:
00008856 7000                       		moveq	#0,d0
00008858 101A                       		move.b	(a2)+,d0
0000885A ED48                       		lsl.w	#6,d0
0000885C 0680 00FF D000             		addi.l	#$FFD000,d0
00008862 2240                       		movea.l	d0,a1
00008864 6100 0000                  		bsr.w	DeleteObject2	; delete object
00008868 51CA FFEC                  		dbf	d2,Obj17_DelLoop ; repeat d2 times (helix length)
0000886C                            
0000886C                            Obj17_Delete:				; XREF: Obj17_Index
0000886C 6100 0000                  		bsr.w	DeleteObject
00008870 4E75                       		rts	
00008872                            ; ===========================================================================
00008872                            
00008872                            Obj17_Display:				; XREF: Obj17_Index
00008872 6100 FF96                  		bsr.w	Obj17_RotateSpikes
00008876 6000 0000                  		bra.w	DisplaySprite
0000887A                            ; ===========================================================================
0000887A                            ; ---------------------------------------------------------------------------
0000887A                            ; Sprite mappings - helix of spikes on a pole (GHZ)
0000887A                            ; ---------------------------------------------------------------------------
0000887A                            Map_obj17:
0000887A                            	include "_maps\obj17.asm"
0000887A                            ; ---------------------------------------------------------------------------
0000887A                            ; Sprite mappings - helix of spikes on a pole (GHZ)
0000887A                            ; ---------------------------------------------------------------------------
0000887A 0000 0000                  		dc.w byte_7E08-Map_obj17, byte_7E0E-Map_obj17
0000887E 0000 0000                  		dc.w byte_7E14-Map_obj17, byte_7E1A-Map_obj17
00008882 0000 0000                  		dc.w byte_7E20-Map_obj17, byte_7E26-Map_obj17
00008886 0000 0000                  		dc.w byte_7E2D+1-Map_obj17, byte_7E2C-Map_obj17
0000888A 01                         byte_7E08:	dc.b 1
0000888B F001 0000 FC               		dc.b $F0, 1, 0,	0, $FC
00008890 01                         byte_7E0E:	dc.b 1
00008891 F505 0002 F8               		dc.b $F5, 5, 0,	2, $F8
00008896 01                         byte_7E14:	dc.b 1
00008897 F805 0006 F8               		dc.b $F8, 5, 0,	6, $F8
0000889C 01                         byte_7E1A:	dc.b 1
0000889D FB05 000A F8               		dc.b $FB, 5, 0,	$A, $F8
000088A2 01                         byte_7E20:	dc.b 1
000088A3 0001 000E FC               		dc.b 0,	1, 0, $E, $FC
000088A8 01                         byte_7E26:	dc.b 1
000088A9 0400 0010 FD               		dc.b 4,	0, 0, $10, $FD
000088AE 01                         byte_7E2C:	dc.b 1
000088AF F400 0011 FD               byte_7E2D:	dc.b $F4, 0, 0,	$11, $FD
000088B4                            		even
000088B4                            		even
000088B4                            
000088B4                            ; ===========================================================================
000088B4                            ; ---------------------------------------------------------------------------
000088B4                            ; Object 18 - platforms	(GHZ, SYZ, SLZ)
000088B4                            ; ---------------------------------------------------------------------------
000088B4                            
000088B4                            Obj18:					; XREF: Obj_Index
000088B4 7000                       		moveq	#0,d0
000088B6 1028 0024                  		move.b	$24(a0),d0
000088BA 323B 0000                  		move.w	Obj18_Index(pc,d0.w),d1
000088BE 4EFB 1000                  		jmp	Obj18_Index(pc,d1.w)
000088C2                            ; ===========================================================================
000088C2 0000                       Obj18_Index:	dc.w Obj18_Main-Obj18_Index
000088C4 0000                       		dc.w Obj18_Solid-Obj18_Index
000088C6 0000                       		dc.w Obj18_Action2-Obj18_Index
000088C8 0000                       		dc.w Obj18_Delete-Obj18_Index
000088CA 0000                       		dc.w Obj18_Action-Obj18_Index
000088CC                            ; ===========================================================================
000088CC                            
000088CC                            Obj18_Main:				; XREF: Obj18_Index
000088CC 5428 0024                  		addq.b	#2,$24(a0)
000088D0 317C 4000 0002             		move.w	#$4000,2(a0)
000088D6 217C 0000 0000 0004        		move.l	#Map_obj18,4(a0)
000088DE 117C 0020 0019             		move.b	#$20,$19(a0)
000088E4 0C38 0004 FE10             		cmpi.b	#4,($FFFFFE10).w ; check if level is SYZ
000088EA 6600                       		bne.s	Obj18_NotSYZ
000088EC 217C 0000 0000 0004        		move.l	#Map_obj18a,4(a0) ; SYZ	specific code
000088F4 117C 0020 0019             		move.b	#$20,$19(a0)
000088FA                            
000088FA                            Obj18_NotSYZ:
000088FA 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
00008900 6600                       		bne.s	Obj18_NotSLZ
00008902 217C 0000 0000 0004        		move.l	#Map_obj18b,4(a0) ; SLZ	specific code
0000890A 117C 0020 0019             		move.b	#$20,$19(a0)
00008910 317C 4000 0002             		move.w	#$4000,2(a0)
00008916 117C 0003 0028             		move.b	#3,$28(a0)
0000891C                            
0000891C                            Obj18_NotSLZ:
0000891C 117C 0004 0001             		move.b	#4,1(a0)
00008922 117C 0004 0018             		move.b	#4,$18(a0)
00008928 3168 000C 002C             		move.w	$C(a0),$2C(a0)
0000892E 3168 000C 0034             		move.w	$C(a0),$34(a0)
00008934 3168 0008 0032             		move.w	8(a0),$32(a0)
0000893A 317C 0080 0026             		move.w	#$80,$26(a0)
00008940 7200                       		moveq	#0,d1
00008942 1028 0028                  		move.b	$28(a0),d0
00008946 0C00 000A                  		cmpi.b	#$A,d0		; is object type $A (large platform)?
0000894A 6600                       		bne.s	Obj18_SetFrame	; if not, branch
0000894C 5201                       		addq.b	#1,d1		; use frame #1
0000894E 117C 0020 0019             		move.b	#$20,$19(a0)	; set width
00008954                            
00008954                            Obj18_SetFrame:
00008954 1141 001A                  		move.b	d1,$1A(a0)	; set frame to d1
00008958                            
00008958                            Obj18_Solid:				; XREF: Obj18_Index
00008958 4A28 0038                  		tst.b	$38(a0)
0000895C 6700                       		beq.s	loc_7EE0
0000895E 5928 0038                  		subq.b	#4,$38(a0)
00008962                            
00008962                            loc_7EE0:
00008962 7200                       		moveq	#0,d1
00008964 1228 0019                  		move.b	$19(a0),d1
00008968 6100 F56C                  		bsr.w	PlatformObject
0000896C                            
0000896C                            Obj18_Action:				; XREF: Obj18_Index
0000896C 6100 0000                  		bsr.w	Obj18_Move
00008970 6100 0000                  		bsr.w	Obj18_Nudge
00008974 6100 0000                  		bsr.w	DisplaySprite
00008978 6000 0000                  		bra.w	Obj18_ChkDel
0000897C                            ; ===========================================================================
0000897C                            
0000897C                            Obj18_Action2:				; XREF: Obj18_Index
0000897C 0C28 0040 0038             		cmpi.b	#$40,$38(a0)
00008982 6700                       		beq.s	loc_7F06
00008984 5828 0038                  		addq.b	#4,$38(a0)
00008988                            
00008988                            loc_7F06:
00008988 7200                       		moveq	#0,d1
0000898A 1228 0019                  		move.b	$19(a0),d1
0000898E 6100 F6BA                  		bsr.w	ExitPlatform
00008992 3F28 0008                  		move.w	8(a0),-(sp)
00008996 6100 0000                  		bsr.w	Obj18_Move
0000899A 6100 0000                  		bsr.w	Obj18_Nudge
0000899E 341F                       		move.w	(sp)+,d2
000089A0 6100 FC12                  		bsr.w	MvSonicOnPtfm2
000089A4 6100 0000                  		bsr.w	DisplaySprite
000089A8 6000 0000                  		bra.w	Obj18_ChkDel
000089AC                            
000089AC 4E75                       		rts
000089AE                            
000089AE                            ; ---------------------------------------------------------------------------
000089AE                            ; Subroutine to	move platform slightly when you	stand on it
000089AE                            ; ---------------------------------------------------------------------------
000089AE                            
000089AE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000089AE                            
000089AE                            
000089AE                            Obj18_Nudge:				; XREF: Obj18_Action; Obj18_Action2
000089AE 1028 0038                  		move.b	$38(a0),d0
000089B2 6100 AA26                  		bsr.w	CalcSine
000089B6 323C 0400                  		move.w	#$400,d1
000089BA C1C1                       		muls.w	d1,d0
000089BC 4840                       		swap	d0
000089BE D068 002C                  		add.w	$2C(a0),d0
000089C2 3140 000C                  		move.w	d0,$C(a0)
000089C6 4E75                       		rts	
000089C8                            ; End of function Obj18_Nudge
000089C8                            
000089C8                            ; ---------------------------------------------------------------------------
000089C8                            ; Subroutine to	move platforms
000089C8                            ; ---------------------------------------------------------------------------
000089C8                            
000089C8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000089C8                            
000089C8                            
000089C8                            Obj18_Move:				; XREF: Obj18_Action; Obj18_Action2
000089C8 7000                       		moveq	#0,d0
000089CA 1028 0028                  		move.b	$28(a0),d0
000089CE 0240 000F                  		andi.w	#$F,d0
000089D2 D040                       		add.w	d0,d0
000089D4 323B 0000                  		move.w	Obj18_TypeIndex(pc,d0.w),d1
000089D8 4EFB 1000                  		jmp	Obj18_TypeIndex(pc,d1.w)
000089DC                            ; End of function Obj18_Move
000089DC                            
000089DC                            ; ===========================================================================
000089DC 0000 0000                  Obj18_TypeIndex:dc.w Obj18_Type00-Obj18_TypeIndex, Obj18_Type01-Obj18_TypeIndex
000089E0 0000 0000                  		dc.w Obj18_Type02-Obj18_TypeIndex, Obj18_Type03-Obj18_TypeIndex
000089E4 0000 0000                  		dc.w Obj18_Type04-Obj18_TypeIndex, Obj18_Type05-Obj18_TypeIndex
000089E8 0000 0000                  		dc.w Obj18_Type06-Obj18_TypeIndex, Obj18_Type07-Obj18_TypeIndex
000089EC 0000 0000                  		dc.w Obj18_Type08-Obj18_TypeIndex, Obj18_Type00-Obj18_TypeIndex
000089F0 0000 0000                  		dc.w Obj18_Type0A-Obj18_TypeIndex, Obj18_Type0B-Obj18_TypeIndex
000089F4 0000                       		dc.w Obj18_Type0C-Obj18_TypeIndex
000089F6                            ; ===========================================================================
000089F6                            
000089F6                            Obj18_Type00:
000089F6 4E75                       		rts			; platform 00 doesn't move
000089F8                            ; ===========================================================================
000089F8                            
000089F8                            Obj18_Type05:
000089F8 3028 0032                  		move.w	$32(a0),d0
000089FC 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
00008A00 4401                       		neg.b	d1		; reverse platform-motion
00008A02 0601 0040                  		addi.b	#$40,d1
00008A06 6000                       		bra.s	Obj18_01_Move
00008A08                            ; ===========================================================================
00008A08                            
00008A08                            Obj18_Type01:
00008A08 3028 0032                  		move.w	$32(a0),d0
00008A0C 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
00008A10 0401 0040                  		subi.b	#$40,d1
00008A14                            
00008A14                            Obj18_01_Move:
00008A14 4881                       		ext.w	d1
00008A16 D041                       		add.w	d1,d0
00008A18 3140 0008                  		move.w	d0,8(a0)	; change position on x-axis
00008A1C 6000 0000                  		bra.w	Obj18_ChgMotion
00008A20                            ; ===========================================================================
00008A20                            
00008A20                            Obj18_Type0C:
00008A20 3028 0034                  		move.w	$34(a0),d0
00008A24 1238 FE6C                  		move.b	($FFFFFE6C).w,d1 ; load	platform-motion	variable
00008A28 4401                       		neg.b	d1		; reverse platform-motion
00008A2A 0601 0030                  		addi.b	#$30,d1
00008A2E 6000                       		bra.s	Obj18_02_Move
00008A30                            ; ===========================================================================
00008A30                            
00008A30                            Obj18_Type0B:
00008A30 3028 0034                  		move.w	$34(a0),d0
00008A34 1238 FE6C                  		move.b	($FFFFFE6C).w,d1 ; load	platform-motion	variable
00008A38 0401 0030                  		subi.b	#$30,d1
00008A3C 6000                       		bra.s	Obj18_02_Move
00008A3E                            ; ===========================================================================
00008A3E                            
00008A3E                            Obj18_Type06:
00008A3E 3028 0034                  		move.w	$34(a0),d0
00008A42 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
00008A46 4401                       		neg.b	d1		; reverse platform-motion
00008A48 0601 0040                  		addi.b	#$40,d1
00008A4C 6000                       		bra.s	Obj18_02_Move
00008A4E                            ; ===========================================================================
00008A4E                            
00008A4E                            Obj18_Type02:
00008A4E 3028 0034                  		move.w	$34(a0),d0
00008A52 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
00008A56 0401 0040                  		subi.b	#$40,d1
00008A5A                            
00008A5A                            Obj18_02_Move:
00008A5A 4881                       		ext.w	d1
00008A5C D041                       		add.w	d1,d0
00008A5E 3140 002C                  		move.w	d0,$2C(a0)	; change position on y-axis
00008A62 6000 0000                  		bra.w	Obj18_ChgMotion
00008A66                            ; ===========================================================================
00008A66                            
00008A66                            Obj18_Type03:
00008A66 4A68 003A                  		tst.w	$3A(a0)		; is time delay	set?
00008A6A 6600                       		bne.s	Obj18_03_Wait	; if yes, branch
00008A6C 0828 0003 0022             		btst	#3,$22(a0)	; is Sonic standing on the platform?
00008A72 6700                       		beq.s	Obj18_03_NoMove	; if not, branch
00008A74 317C 001E 003A             		move.w	#30,$3A(a0)	; set time delay to 0.5	seconds
00008A7A                            
00008A7A                            Obj18_03_NoMove:
00008A7A 4E75                       		rts	
00008A7C                            ; ===========================================================================
00008A7C                            
00008A7C                            Obj18_03_Wait:
00008A7C 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time
00008A80 66F8                       		bne.s	Obj18_03_NoMove	; if time is > 0, branch
00008A82 317C 0020 003A             		move.w	#32,$3A(a0)
00008A88 5228 0028                  		addq.b	#1,$28(a0)	; change to type 04 (falling)
00008A8C 4E75                       		rts	
00008A8E                            ; ===========================================================================
00008A8E                            
00008A8E                            Obj18_Type04:
00008A8E 4A68 003A                  		tst.w	$3A(a0)
00008A92 6700                       		beq.s	loc_8048
00008A94 5368 003A                  		subq.w	#1,$3A(a0)
00008A98 6600                       		bne.s	loc_8048
00008A9A 0828 0003 0022             		btst	#3,$22(a0)
00008AA0 6700                       		beq.s	loc_8042
00008AA2 08E9 0001 0022             		bset	#1,$22(a1)
00008AA8 08A9 0003 0022             		bclr	#3,$22(a1)
00008AAE 137C 0002 0024             		move.b	#2,$24(a1)
00008AB4 08A8 0003 0022             		bclr	#3,$22(a0)
00008ABA 4228 0025                  		clr.b	$25(a0)
00008ABE 3368 0012 0012             		move.w	$12(a0),$12(a1)
00008AC4                            
00008AC4                            loc_8042:
00008AC4 117C 0008 0024             		move.b	#8,$24(a0)
00008ACA                            
00008ACA                            loc_8048:
00008ACA 2628 002C                  		move.l	$2C(a0),d3
00008ACE 3028 0012                  		move.w	$12(a0),d0
00008AD2 48C0                       		ext.l	d0
00008AD4 E180                       		asl.l	#8,d0
00008AD6 D680                       		add.l	d0,d3
00008AD8 2143 002C                  		move.l	d3,$2C(a0)
00008ADC 0668 0038 0012             		addi.w	#$38,$12(a0)
00008AE2 3038 F72E                  		move.w	($FFFFF72E).w,d0
00008AE6 0640 00E0                  		addi.w	#$E0,d0
00008AEA B068 002C                  		cmp.w	$2C(a0),d0
00008AEE 6400                       		bcc.s	locret_8074
00008AF0 117C 0006 0024             		move.b	#6,$24(a0)
00008AF6                            
00008AF6                            locret_8074:
00008AF6 4E75                       		rts	
00008AF8                            ; ===========================================================================
00008AF8                            
00008AF8                            Obj18_Type07:
00008AF8 4A68 003A                  		tst.w	$3A(a0)		; is time delay	set?
00008AFC 6600                       		bne.s	Obj18_07_Wait	; if yes, branch
00008AFE 45F8 F7E0                  		lea	($FFFFF7E0).w,a2 ; load	switch statuses
00008B02 7000                       		moveq	#0,d0
00008B04 1028 0028                  		move.b	$28(a0),d0	; move object type ($x7) to d0
00008B08 E848                       		lsr.w	#4,d0		; divide d0 by 8, round	down
00008B0A 4A32 0000                  		tst.b	(a2,d0.w)	; has switch no. d0 been pressed?
00008B0E 6700                       		beq.s	Obj18_07_NoMove	; if not, branch
00008B10 317C 003C 003A             		move.w	#60,$3A(a0)	; set time delay to 1 second
00008B16                            
00008B16                            Obj18_07_NoMove:
00008B16 4E75                       		rts	
00008B18                            ; ===========================================================================
00008B18                            
00008B18                            Obj18_07_Wait:
00008B18 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time delay
00008B1C 66F8                       		bne.s	Obj18_07_NoMove	; if time is > 0, branch
00008B1E 5228 0028                  		addq.b	#1,$28(a0)	; change to type 08
00008B22 4E75                       		rts	
00008B24                            ; ===========================================================================
00008B24                            
00008B24                            Obj18_Type08:
00008B24 5568 002C                  		subq.w	#2,$2C(a0)	; move platform	up
00008B28 3028 0034                  		move.w	$34(a0),d0
00008B2C 0440 0200                  		subi.w	#$200,d0
00008B30 B068 002C                  		cmp.w	$2C(a0),d0	; has platform moved $200 pixels?
00008B34 6600                       		bne.s	Obj18_08_NoStop	; if not, branch
00008B36 4228 0028                  		clr.b	$28(a0)		; change to type 00 (stop moving)
00008B3A                            
00008B3A                            Obj18_08_NoStop:
00008B3A 4E75                       		rts	
00008B3C                            ; ===========================================================================
00008B3C                            
00008B3C                            Obj18_Type0A:
00008B3C 3028 0034                  		move.w	$34(a0),d0
00008B40 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
00008B44 0401 0040                  		subi.b	#$40,d1
00008B48 4881                       		ext.w	d1
00008B4A E241                       		asr.w	#1,d1
00008B4C D041                       		add.w	d1,d0
00008B4E 3140 002C                  		move.w	d0,$2C(a0)	; change position on y-axis
00008B52                            
00008B52                            Obj18_ChgMotion:
00008B52 1178 FE78 0026             		move.b	($FFFFFE78).w,$26(a0) ;	update platform-movement variable
00008B58 4E75                       		rts	
00008B5A                            ; ===========================================================================
00008B5A                            
00008B5A                            Obj18_ChkDel:				; XREF: Obj18_Action; Obj18_Action2
00008B5A 3028 0032                  		move.w	$32(a0),d0
00008B5E 0240 FF80                  		andi.w	#$FF80,d0
00008B62 3238 F700                  		move.w	($FFFFF700).w,d1
00008B66 0441 0080                  		subi.w	#$80,d1
00008B6A 0241 FF80                  		andi.w	#$FF80,d1
00008B6E 9041                       		sub.w	d1,d0
00008B70 0C40 0280                  		cmpi.w	#$280,d0
00008B74 6200                       		bhi.s	Obj18_Delete
00008B76 4E75                       		rts	
00008B78                            ; ===========================================================================
00008B78                            
00008B78                            Obj18_Delete:				; XREF: Obj18_Index
00008B78 6000 0000                  		bra.w	DeleteObject
00008B7C                            ; ===========================================================================
00008B7C                            ; ---------------------------------------------------------------------------
00008B7C                            ; Sprite mappings - unused
00008B7C                            ; ---------------------------------------------------------------------------
00008B7C                            Map_obj18x:
00008B7C                            	include "_maps\obj18x.asm"
00008B7C                            ; ---------------------------------------------------------------------------
00008B7C                            ; Sprite mappings - unused
00008B7C                            ; ---------------------------------------------------------------------------
00008B7C 0000                       		dc.w byte_80FE-Map_obj18x
00008B7E 0000                       		dc.w byte_8109-Map_obj18x
00008B80 02                         byte_80FE:	dc.b 2
00008B81 F40B 003C E8               		dc.b $F4, $B, 0, $3C, $E8
00008B86 F40B 0048 00               		dc.b $F4, $B, 0, $48, 0
00008B8B 0A                         byte_8109:	dc.b $A
00008B8C F40F 00CA E0               		dc.b $F4, $F, 0, $CA, $E0
00008B91 040F 00DA E0               		dc.b 4,	$F, 0, $DA, $E0
00008B96 240F 00DA E0               		dc.b $24, $F, 0, $DA, $E0
00008B9B 440F 00DA E0               		dc.b $44, $F, 0, $DA, $E0
00008BA0 640F 00DA E0               		dc.b $64, $F, 0, $DA, $E0
00008BA5 F40F 08CA 00               		dc.b $F4, $F, 8, $CA, 0
00008BAA 040F 08DA 00               		dc.b 4,	$F, 8, $DA, 0
00008BAF 240F 08DA 00               		dc.b $24, $F, 8, $DA, 0
00008BB4 440F 08DA 00               		dc.b $44, $F, 8, $DA, 0
00008BB9 640F 08DA 00               		dc.b $64, $F, 8, $DA, 0
00008BBE                            		even
00008BBE                            		even
00008BBE                            
00008BBE                            ; ---------------------------------------------------------------------------
00008BBE                            ; Sprite mappings - GHZ	platforms
00008BBE                            ; ---------------------------------------------------------------------------
00008BBE                            Map_obj18:
00008BBE                            	include "_maps\obj18ghz.asm"
00008BBE                            ; ---------------------------------------------------------------------------
00008BBE                            ; Sprite mappings - GHZ	platforms
00008BBE                            ; ---------------------------------------------------------------------------
00008BBE 0000                       		dc.w byte_8140-Map_obj18
00008BC0 0000                       		dc.w byte_8155-Map_obj18
00008BC2 04                         byte_8140:	dc.b 4
00008BC3 F40B 003B E0               		dc.b $F4, $B, 0, $3B, $E0 ; small platform
00008BC8 F407 003F F8               		dc.b $F4, 7, 0,	$3F, $F8
00008BCD F407 003F 08               		dc.b $F4, 7, 0,	$3F, 8
00008BD2 F403 0047 18               		dc.b $F4, 3, 0,	$47, $18
00008BD7 0A                         byte_8155:	dc.b $A
00008BD8 F40F 00C5 E0               		dc.b $F4, $F, 0, $C5, $E0 ; large column platform
00008BDD 040F 00D5 E0               		dc.b 4,	$F, 0, $D5, $E0
00008BE2 240F 00D5 E0               		dc.b $24, $F, 0, $D5, $E0
00008BE7 440F 00D5 E0               		dc.b $44, $F, 0, $D5, $E0
00008BEC 640F 00D5 E0               		dc.b $64, $F, 0, $D5, $E0
00008BF1 F40F 08C5 00               		dc.b $F4, $F, 8, $C5, 0
00008BF6 040F 08D5 00               		dc.b 4,	$F, 8, $D5, 0
00008BFB 240F 08D5 00               		dc.b $24, $F, 8, $D5, 0
00008C00 440F 08D5 00               		dc.b $44, $F, 8, $D5, 0
00008C05 640F 08D5 00               		dc.b $64, $F, 8, $D5, 0
00008C0A                            		even
00008C0A                            		even
00008C0A                            
00008C0A                            ; ---------------------------------------------------------------------------
00008C0A                            ; Sprite mappings - SYZ	platforms
00008C0A                            ; ---------------------------------------------------------------------------
00008C0A                            Map_obj18a:
00008C0A                            	include "_maps\obj18syz.asm"
00008C0A                            ; ---------------------------------------------------------------------------
00008C0A                            ; Sprite mappings - SYZ	platforms
00008C0A                            ; ---------------------------------------------------------------------------
00008C0A 0000                       		dc.w byte_818A-Map_obj18a
00008C0C 03                         byte_818A:	dc.b 3
00008C0D F60B 0049 E0               		dc.b $F6, $B, 0, $49, $E0
00008C12 F607 0051 F8               		dc.b $F6, 7, 0,	$51, $F8
00008C17 F60B 0055 08               		dc.b $F6, $B, 0, $55, 8
00008C1C                            		even
00008C1C                            		even
00008C1C                            
00008C1C                            ; ---------------------------------------------------------------------------
00008C1C                            ; Sprite mappings - SLZ	platforms
00008C1C                            ; ---------------------------------------------------------------------------
00008C1C                            Map_obj18b:
00008C1C                            	include "_maps\obj18slz.asm"
00008C1C                            ; ---------------------------------------------------------------------------
00008C1C                            ; Sprite mappings - SLZ	platforms
00008C1C                            ; ---------------------------------------------------------------------------
00008C1C 0000                       		dc.w byte_819C-Map_obj18b
00008C1E 02                         byte_819C:	dc.b 2
00008C1F F80F 0021 E0               		dc.b $F8, $F, 0, $21, $E0
00008C24 F80F 0021 00               		dc.b $F8, $F, 0, $21, 0
00008C2A 00                         		even
00008C2A 00                         		even
00008C2A                            
00008C2A                            ; ===========================================================================
00008C2A                            ; ---------------------------------------------------------------------------
00008C2A                            ; Object 19 - blank
00008C2A                            ; ---------------------------------------------------------------------------
00008C2A                            
00008C2A                            Obj19:					; XREF: Obj_Index
00008C2A 4E75                       		rts	
00008C2C                            ; ===========================================================================
00008C2C                            ; ---------------------------------------------------------------------------
00008C2C                            ; Sprite mappings - swinging ball on a chain from GHZ boss
00008C2C                            ; ---------------------------------------------------------------------------
00008C2C                            Map_obj48:
00008C2C                            	include "_maps\obj48.asm"
00008C2C                            ; ---------------------------------------------------------------------------
00008C2C                            ; Sprite mappings - swinging ball on a chain from GHZ boss
00008C2C                            ; ---------------------------------------------------------------------------
00008C2C 0000 0000                  		dc.w byte_81B2-Map_obj48, byte_81D1-Map_obj48
00008C30 0000 0000                  		dc.w byte_81E6-Map_obj48, byte_81FB-Map_obj48
00008C34 06                         byte_81B2:	dc.b 6
00008C35 F004 0024 F0               		dc.b $F0, 4, 0,	$24, $F0
00008C3A F804 1024 F0               		dc.b $F8, 4, $10, $24, $F0
00008C3F E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
00008C44 E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
00008C49 000A 1000 E8               		dc.b 0,	$A, $10, 0, $E8
00008C4E 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
00008C53 04                         byte_81D1:	dc.b 4
00008C54 E80A 0009 E8               		dc.b $E8, $A, 0, 9, $E8
00008C59 E80A 0809 00               		dc.b $E8, $A, 8, 9, 0
00008C5E 000A 1009 E8               		dc.b 0,	$A, $10, 9, $E8
00008C63 000A 1809 00               		dc.b 0,	$A, $18, 9, 0
00008C68 04                         byte_81E6:	dc.b 4
00008C69 E80A 0012 E8               		dc.b $E8, $A, 0, $12, $E8
00008C6E E80A 001B 00               		dc.b $E8, $A, 0, $1B, 0
00008C73 000A 181B E8               		dc.b 0,	$A, $18, $1B, $E8
00008C78 000A 1812 00               		dc.b 0,	$A, $18, $12, 0
00008C7D 04                         byte_81FB:	dc.b 4
00008C7E E80A 081B E8               		dc.b $E8, $A, 8, $1B, $E8
00008C83 E80A 0812 00               		dc.b $E8, $A, 8, $12, 0
00008C88 000A 1012 E8               		dc.b 0,	$A, $10, $12, $E8
00008C8D 000A 101B 00               		dc.b 0,	$A, $10, $1B, 0
00008C92                            		even
00008C92                            		even
00008C92                            
00008C92                            ; ===========================================================================
00008C92                            ; ---------------------------------------------------------------------------
00008C92                            ; Object 1A - GHZ collapsing ledge
00008C92                            ; ---------------------------------------------------------------------------
00008C92                            
00008C92                            Obj1A:					; XREF: Obj_Index
00008C92 7000                       		moveq	#0,d0
00008C94 1028 0024                  		move.b	$24(a0),d0
00008C98 323B 0000                  		move.w	Obj1A_Index(pc,d0.w),d1
00008C9C 4EFB 1000                  		jmp	Obj1A_Index(pc,d1.w)
00008CA0                            ; ===========================================================================
00008CA0 0000 0000                  Obj1A_Index:	dc.w Obj1A_Main-Obj1A_Index, Obj1A_ChkTouch-Obj1A_Index
00008CA4 0000 0000                  		dc.w Obj1A_Touch-Obj1A_Index, Obj1A_Display-Obj1A_Index
00008CA8 0000 0000                  		dc.w Obj1A_Delete-Obj1A_Index, Obj1A_WalkOff-Obj1A_Index
00008CAC                            ; ===========================================================================
00008CAC                            
00008CAC                            Obj1A_Main:				; XREF: Obj1A_Index
00008CAC 5428 0024                  		addq.b	#2,$24(a0)
00008CB0 217C 0000 0000 0004        		move.l	#Map_obj1A,4(a0)
00008CB8 317C 4000 0002             		move.w	#$4000,2(a0)
00008CBE 0028 0004 0001             		ori.b	#4,1(a0)
00008CC4 117C 0004 0018             		move.b	#4,$18(a0)
00008CCA 117C 0007 0038             		move.b	#7,$38(a0)	; set time delay for collapse
00008CD0 117C 0064 0019             		move.b	#$64,$19(a0)
00008CD6 1168 0028 001A             		move.b	$28(a0),$1A(a0)
00008CDC 117C 0038 0016             		move.b	#$38,$16(a0)
00008CE2 08E8 0004 0001             		bset	#4,1(a0)
00008CE8                            
00008CE8                            Obj1A_ChkTouch:				; XREF: Obj1A_Index
00008CE8 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	platform?
00008CEC 6700                       		beq.s	Obj1A_Slope	; if not, branch
00008CEE 4A28 0038                  		tst.b	$38(a0)		; has time reached zero?
00008CF2 6700 0000                  		beq.w	Obj1A_Collapse	; if yes, branch
00008CF6 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
00008CFA                            
00008CFA                            Obj1A_Slope:
00008CFA 323C 0030                  		move.w	#$30,d1
00008CFE 45F9 0000 0000             		lea	(Obj1A_SlopeData).l,a2
00008D04 6100 F2A4                  		bsr.w	SlopeObject
00008D08 6000 0000                  		bra.w	MarkObjGone
00008D0C                            ; ===========================================================================
00008D0C                            
00008D0C                            Obj1A_Touch:				; XREF: Obj1A_Index
00008D0C 4A28 0038                  		tst.b	$38(a0)
00008D10 6700 0000                  		beq.w	loc_847A
00008D14 117C 0001 003A             		move.b	#1,$3A(a0)	; set object as	"touched"
00008D1A 5328 0038                  		subq.b	#1,$38(a0)
00008D1E                            
00008D1E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008D1E                            
00008D1E                            
00008D1E                            Obj1A_WalkOff:				; XREF: Obj1A_Index
00008D1E 323C 0030                  		move.w	#$30,d1
00008D22 6100 F326                  		bsr.w	ExitPlatform
00008D26 323C 0030                  		move.w	#$30,d1
00008D2A 45F9 0000 0000             		lea	(Obj1A_SlopeData).l,a2
00008D30 3428 0008                  		move.w	8(a0),d2
00008D34 6100 0000                  		bsr.w	SlopeObject2
00008D38 6000 0000                  		bra.w	MarkObjGone
00008D3C                            ; End of function Obj1A_WalkOff
00008D3C                            
00008D3C                            ; ===========================================================================
00008D3C                            
00008D3C                            Obj1A_Display:				; XREF: Obj1A_Index
00008D3C 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
00008D40 6700                       		beq.s	Obj1A_TimeZero	; if yes, branch
00008D42 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
00008D46 6600 0000                  		bne.w	loc_82D0	; if yes, branch
00008D4A 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
00008D4E 6000 0000                  		bra.w	DisplaySprite
00008D52                            ; ===========================================================================
00008D52                            
00008D52                            loc_82D0:				; XREF: Obj1A_Display
00008D52 5328 0038                  		subq.b	#1,$38(a0)
00008D56 6100 FFC6                  		bsr.w	Obj1A_WalkOff
00008D5A 43F8 D000                  		lea	($FFFFD000).w,a1
00008D5E 0829 0003 0022             		btst	#3,$22(a1)
00008D64 6700                       		beq.s	loc_82FC
00008D66 4A28 0038                  		tst.b	$38(a0)
00008D6A 6600                       		bne.s	locret_8308
00008D6C 08A9 0003 0022             		bclr	#3,$22(a1)
00008D72 08A9 0005 0022             		bclr	#5,$22(a1)
00008D78 137C 0001 001D             		move.b	#1,$1D(a1)
00008D7E                            
00008D7E                            loc_82FC:
00008D7E 117C 0000 003A             		move.b	#0,$3A(a0)
00008D84 117C 0006 0024             		move.b	#6,$24(a0)	; run "Obj1A_Display" routine
00008D8A                            
00008D8A                            locret_8308:
00008D8A 4E75                       		rts	
00008D8C                            ; ===========================================================================
00008D8C                            
00008D8C                            Obj1A_TimeZero:				; XREF: Obj1A_Display
00008D8C 6100 0000                  		bsr.w	ObjectFall
00008D90 6100 0000                  		bsr.w	DisplaySprite
00008D94 4A28 0001                  		tst.b	1(a0)
00008D98 6A00                       		bpl.s	Obj1A_Delete
00008D9A 4E75                       		rts	
00008D9C                            ; ===========================================================================
00008D9C                            
00008D9C                            Obj1A_Delete:				; XREF: Obj1A_Index
00008D9C 6100 0000                  		bsr.w	DeleteObject
00008DA0 4E75                       		rts	
00008DA2                            ; ===========================================================================
00008DA2                            ; ---------------------------------------------------------------------------
00008DA2                            ; Object 53 - collapsing floors	(MZ, SLZ, SBZ)
00008DA2                            ; ---------------------------------------------------------------------------
00008DA2                            
00008DA2                            Obj53:					; XREF: Obj_Index
00008DA2 7000                       		moveq	#0,d0
00008DA4 1028 0024                  		move.b	$24(a0),d0
00008DA8 323B 0000                  		move.w	Obj53_Index(pc,d0.w),d1
00008DAC 4EFB 1000                  		jmp	Obj53_Index(pc,d1.w)
00008DB0                            ; ===========================================================================
00008DB0 0000 0000                  Obj53_Index:	dc.w Obj53_Main-Obj53_Index, Obj53_ChkTouch-Obj53_Index
00008DB4 0000 0000                  		dc.w Obj53_Touch-Obj53_Index, Obj53_Display-Obj53_Index
00008DB8 0000 0000                  		dc.w Obj53_Delete-Obj53_Index, Obj53_WalkOff-Obj53_Index
00008DBC                            ; ===========================================================================
00008DBC                            
00008DBC                            Obj53_Main:				; XREF: Obj53_Index
00008DBC 5428 0024                  		addq.b	#2,$24(a0)
00008DC0 217C 0000 0000 0004        		move.l	#Map_obj53,4(a0)
00008DC8 317C 42B8 0002             		move.w	#$42B8,2(a0)
00008DCE 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
00008DD4 6600                       		bne.s	Obj53_NotSLZ
00008DD6 317C 44E0 0002             		move.w	#$44E0,2(a0)	; SLZ specific code
00008DDC 5428 001A                  		addq.b	#2,$1A(a0)
00008DE0                            
00008DE0                            Obj53_NotSLZ:
00008DE0 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
00008DE6 6600                       		bne.s	Obj53_NotSBZ
00008DE8 317C 43F5 0002             		move.w	#$43F5,2(a0)	; SBZ specific code
00008DEE                            
00008DEE                            Obj53_NotSBZ:
00008DEE 0028 0004 0001             		ori.b	#4,1(a0)
00008DF4 117C 0004 0018             		move.b	#4,$18(a0)
00008DFA 117C 0007 0038             		move.b	#7,$38(a0)
00008E00 117C 0044 0019             		move.b	#$44,$19(a0)
00008E06                            
00008E06                            Obj53_ChkTouch:				; XREF: Obj53_Index
00008E06 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
00008E0A 6700                       		beq.s	Obj53_Solid	; if not, branch
00008E0C 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
00008E10 6700 0000                  		beq.w	Obj53_Collapse	; if yes, branch
00008E14 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
00008E18                            
00008E18                            Obj53_Solid:
00008E18 323C 0020                  		move.w	#$20,d1
00008E1C 6100 F0B8                  		bsr.w	PlatformObject
00008E20 4A28 0028                  		tst.b	$28(a0)
00008E24 6A00                       		bpl.s	Obj53_MarkAsGone
00008E26 0829 0003 0022             		btst	#3,$22(a1)
00008E2C 6700                       		beq.s	Obj53_MarkAsGone
00008E2E 08A8 0000 0001             		bclr	#0,1(a0)
00008E34 3029 0008                  		move.w	8(a1),d0
00008E38 9068 0008                  		sub.w	8(a0),d0
00008E3C 6400                       		bcc.s	Obj53_MarkAsGone
00008E3E 08E8 0000 0001             		bset	#0,1(a0)
00008E44                            
00008E44                            Obj53_MarkAsGone:
00008E44 6000 0000                  		bra.w	MarkObjGone
00008E48                            ; ===========================================================================
00008E48                            
00008E48                            Obj53_Touch:				; XREF: Obj53_Index
00008E48 4A28 0038                  		tst.b	$38(a0)
00008E4C 6700 0000                  		beq.w	loc_8458
00008E50 117C 0001 003A             		move.b	#1,$3A(a0)	; set object as	"touched"
00008E56 5328 0038                  		subq.b	#1,$38(a0)
00008E5A                            
00008E5A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008E5A                            
00008E5A                            
00008E5A                            Obj53_WalkOff:				; XREF: Obj53_Index
00008E5A 323C 0020                  		move.w	#$20,d1
00008E5E 6100 F1EA                  		bsr.w	ExitPlatform
00008E62 3428 0008                  		move.w	8(a0),d2
00008E66 6100 F74C                  		bsr.w	MvSonicOnPtfm2
00008E6A 6000 0000                  		bra.w	MarkObjGone
00008E6E                            ; End of function Obj53_WalkOff
00008E6E                            
00008E6E                            ; ===========================================================================
00008E6E                            
00008E6E                            Obj53_Display:				; XREF: Obj53_Index
00008E6E 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
00008E72 6700                       		beq.s	Obj53_TimeZero	; if yes, branch
00008E74 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
00008E78 6600 0000                  		bne.w	loc_8402	; if yes, branch
00008E7C 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
00008E80 6000 0000                  		bra.w	DisplaySprite
00008E84                            ; ===========================================================================
00008E84                            
00008E84                            loc_8402:
00008E84 5328 0038                  		subq.b	#1,$38(a0)
00008E88 6100 FFD0                  		bsr.w	Obj53_WalkOff
00008E8C 43F8 D000                  		lea	($FFFFD000).w,a1
00008E90 0829 0003 0022             		btst	#3,$22(a1)
00008E96 6700                       		beq.s	loc_842E
00008E98 4A28 0038                  		tst.b	$38(a0)
00008E9C 6600                       		bne.s	locret_843A
00008E9E 08A9 0003 0022             		bclr	#3,$22(a1)
00008EA4 08A9 0005 0022             		bclr	#5,$22(a1)
00008EAA 137C 0001 001D             		move.b	#1,$1D(a1)
00008EB0                            
00008EB0                            loc_842E:
00008EB0 117C 0000 003A             		move.b	#0,$3A(a0)
00008EB6 117C 0006 0024             		move.b	#6,$24(a0)	; run "Obj53_Display" routine
00008EBC                            
00008EBC                            locret_843A:
00008EBC 4E75                       		rts	
00008EBE                            ; ===========================================================================
00008EBE                            
00008EBE                            Obj53_TimeZero:				; XREF: Obj53_Display
00008EBE 6100 0000                  		bsr.w	ObjectFall
00008EC2 6100 0000                  		bsr.w	DisplaySprite
00008EC6 4A28 0001                  		tst.b	1(a0)
00008ECA 6A00                       		bpl.s	Obj53_Delete
00008ECC 4E75                       		rts	
00008ECE                            ; ===========================================================================
00008ECE                            
00008ECE                            Obj53_Delete:				; XREF: Obj53_Index
00008ECE 6100 0000                  		bsr.w	DeleteObject
00008ED2 4E75                       		rts	
00008ED4                            ; ===========================================================================
00008ED4                            
00008ED4                            Obj53_Collapse:				; XREF: Obj53_ChkTouch
00008ED4 117C 0000 003A             		move.b	#0,$3A(a0)
00008EDA                            
00008EDA                            loc_8458:				; XREF: Obj53_Touch
00008EDA 49F9 0000 0000             		lea	(Obj53_Data2).l,a4
00008EE0 0828 0000 0028             		btst	#0,$28(a0)
00008EE6 6700                       		beq.s	loc_846C
00008EE8 49F9 0000 0000             		lea	(Obj53_Data3).l,a4
00008EEE                            
00008EEE                            loc_846C:
00008EEE 7207                       		moveq	#7,d1
00008EF0 5228 001A                  		addq.b	#1,$1A(a0)
00008EF4 6000                       		bra.s	loc_8486
00008EF6                            ; ===========================================================================
00008EF6                            
00008EF6                            Obj1A_Collapse:				; XREF: Obj1A_ChkTouch
00008EF6 117C 0000 003A             		move.b	#0,$3A(a0)
00008EFC                            
00008EFC                            loc_847A:				; XREF: Obj1A_Touch
00008EFC 49F9 0000 0000             		lea	(Obj53_Data1).l,a4
00008F02 7218                       		moveq	#$18,d1
00008F04 5428 001A                  		addq.b	#2,$1A(a0)
00008F08                            
00008F08                            loc_8486:				; XREF: Obj53_Collapse
00008F08 7000                       		moveq	#0,d0
00008F0A 1028 001A                  		move.b	$1A(a0),d0
00008F0E D040                       		add.w	d0,d0
00008F10 2668 0004                  		movea.l	4(a0),a3
00008F14 D6F3 0000                  		adda.w	(a3,d0.w),a3
00008F18 524B                       		addq.w	#1,a3
00008F1A 08E8 0005 0001             		bset	#5,1(a0)
00008F20 1810                       		move.b	0(a0),d4
00008F22 1A28 0001                  		move.b	1(a0),d5
00008F26 2248                       		movea.l	a0,a1
00008F28 6000                       		bra.s	loc_84B2
00008F2A                            ; ===========================================================================
00008F2A                            
00008F2A                            loc_84AA:
00008F2A 6100 0000                  		bsr.w	SingleObjLoad
00008F2E 6600                       		bne.s	loc_84F2
00008F30 5A4B                       		addq.w	#5,a3
00008F32                            
00008F32                            loc_84B2:
00008F32 137C 0006 0024             		move.b	#6,$24(a1)
00008F38 1284                       		move.b	d4,0(a1)
00008F3A 234B 0004                  		move.l	a3,4(a1)
00008F3E 1345 0001                  		move.b	d5,1(a1)
00008F42 3368 0008 0008             		move.w	8(a0),8(a1)
00008F48 3368 000C 000C             		move.w	$C(a0),$C(a1)
00008F4E 3368 0002 0002             		move.w	2(a0),2(a1)
00008F54 1368 0018 0018             		move.b	$18(a0),$18(a1)
00008F5A 1368 0019 0019             		move.b	$19(a0),$19(a1)
00008F60 135C 0038                  		move.b	(a4)+,$38(a1)
00008F64 B3C8                       		cmpa.l	a0,a1
00008F66 6400                       		bcc.s	loc_84EE
00008F68 6100 0000                  		bsr.w	DisplaySprite2
00008F6C                            
00008F6C                            loc_84EE:
00008F6C 51C9 FFBC                  		dbf	d1,loc_84AA
00008F70                            
00008F70                            loc_84F2:
00008F70 6100 0000                  		bsr.w	DisplaySprite
00008F74 303C 00B9                  		move.w	#$B9,d0
00008F78 4EF9 0000 147C             		jmp	(PlaySound_Special).l ;	play collapsing	sound
00008F7E                            ; ===========================================================================
00008F7E                            ; ---------------------------------------------------------------------------
00008F7E                            ; Disintegration data for collapsing ledges (MZ, SLZ, SBZ)
00008F7E                            ; ---------------------------------------------------------------------------
00008F7E 1C18 1410 1A16 120E 0A06+  Obj53_Data1:	dc.b $1C, $18, $14, $10, $1A, $16, $12,	$E, $A,	6, $18,	$14, $10, $C, 8, 4
00008F8E 1612 0E0A 0602 1410 0C00   		dc.b $16, $12, $E, $A, 6, 2, $14, $10, $C, 0
00008F98 1E16 0E06 1A12 0A02        Obj53_Data2:	dc.b $1E, $16, $E, 6, $1A, $12,	$A, 2
00008FA0 161E 1A12 060E 0A02        Obj53_Data3:	dc.b $16, $1E, $1A, $12, 6, $E,	$A, 2
00008FA8                            
00008FA8                            ; ---------------------------------------------------------------------------
00008FA8                            ; Sloped platform subroutine (GHZ collapsing ledges and	MZ platforms)
00008FA8                            ; ---------------------------------------------------------------------------
00008FA8                            
00008FA8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008FA8                            
00008FA8                            
00008FA8                            SlopeObject2:				; XREF: Obj1A_WalkOff; et al
00008FA8 43F8 D000                  		lea	($FFFFD000).w,a1
00008FAC 0829 0003 0022             		btst	#3,$22(a1)
00008FB2 6700                       		beq.s	locret_856E
00008FB4 3029 0008                  		move.w	8(a1),d0
00008FB8 9068 0008                  		sub.w	8(a0),d0
00008FBC D041                       		add.w	d1,d0
00008FBE E248                       		lsr.w	#1,d0
00008FC0 0828 0000 0001             		btst	#0,1(a0)
00008FC6 6700                       		beq.s	loc_854E
00008FC8 4640                       		not.w	d0
00008FCA D041                       		add.w	d1,d0
00008FCC                            
00008FCC                            loc_854E:
00008FCC 7200                       		moveq	#0,d1
00008FCE 1232 0000                  		move.b	(a2,d0.w),d1
00008FD2 3028 000C                  		move.w	$C(a0),d0
00008FD6 9041                       		sub.w	d1,d0
00008FD8 7200                       		moveq	#0,d1
00008FDA 1229 0016                  		move.b	$16(a1),d1
00008FDE 9041                       		sub.w	d1,d0
00008FE0 3340 000C                  		move.w	d0,$C(a1)
00008FE4 9468 0008                  		sub.w	8(a0),d2
00008FE8 9569 0008                  		sub.w	d2,8(a1)
00008FEC                            
00008FEC                            locret_856E:
00008FEC 4E75                       		rts	
00008FEE                            ; End of function SlopeObject2
00008FEE                            
00008FEE                            ; ===========================================================================
00008FEE                            ; ---------------------------------------------------------------------------
00008FEE                            ; Collision data for GHZ collapsing ledge
00008FEE                            ; ---------------------------------------------------------------------------
00008FEE                            Obj1A_SlopeData:
00008FEE                            		incbin	misc\ghzledge.bin
0000901E                            		even
0000901E                            
0000901E                            ; ---------------------------------------------------------------------------
0000901E                            ; Sprite mappings - GHZ	collapsing ledge
0000901E                            ; ---------------------------------------------------------------------------
0000901E                            Map_obj1A:
0000901E                            	include "_maps\obj1A.asm"
0000901E                            ; ---------------------------------------------------------------------------
0000901E                            ; Sprite mappings - GHZ	collapsing ledge
0000901E                            ; ---------------------------------------------------------------------------
0000901E 0000 0000                  		dc.w byte_85A8-Map_obj1A, byte_85F9-Map_obj1A
00009022 0000 0000                  		dc.w byte_864A-Map_obj1A, byte_86C8-Map_obj1A
00009026 10                         byte_85A8:	dc.b $10
00009027 C80E 0057 10               		dc.b $C8, $E, 0, $57, $10 ; ledge facing left
0000902C D00D 0063 F0               		dc.b $D0, $D, 0, $63, $F0
00009031 E00D 006B 10               		dc.b $E0, $D, 0, $6B, $10
00009036 E00D 0073 F0               		dc.b $E0, $D, 0, $73, $F0
0000903B D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00009040 D806 0081 D0               		dc.b $D8, 6, 0,	$81, $D0
00009045 F00D 0087 10               		dc.b $F0, $D, 0, $87, $10
0000904A F00D 008F F0               		dc.b $F0, $D, 0, $8F, $F0
0000904F F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00009054 F005 009B D0               		dc.b $F0, 5, 0,	$9B, $D0
00009059 000D 009F 10               		dc.b 0,	$D, 0, $9F, $10
0000905E 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00009063 000D 00AB E0               		dc.b 0,	$D, 0, $AB, $E0
00009068 0005 00B3 D0               		dc.b 0,	5, 0, $B3, $D0
0000906D 100D 00AB 10               		dc.b $10, $D, 0, $AB, $10
00009072 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00009077 10                         byte_85F9:	dc.b $10
00009078 C80E 0057 10               		dc.b $C8, $E, 0, $57, $10 ; ledge facing right
0000907D D00D 0063 F0               		dc.b $D0, $D, 0, $63, $F0
00009082 E00D 006B 10               		dc.b $E0, $D, 0, $6B, $10
00009087 E00D 0073 F0               		dc.b $E0, $D, 0, $73, $F0
0000908C D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00009091 D806 00BB D0               		dc.b $D8, 6, 0,	$BB, $D0
00009096 F00D 0087 10               		dc.b $F0, $D, 0, $87, $10
0000909B F00D 008F F0               		dc.b $F0, $D, 0, $8F, $F0
000090A0 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
000090A5 F005 00C1 D0               		dc.b $F0, 5, 0,	$C1, $D0
000090AA 000D 009F 10               		dc.b 0,	$D, 0, $9F, $10
000090AF 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
000090B4 000D 00AB E0               		dc.b 0,	$D, 0, $AB, $E0
000090B9 0005 00B7 D0               		dc.b 0,	5, 0, $B7, $D0
000090BE 100D 00AB 10               		dc.b $10, $D, 0, $AB, $10
000090C3 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
000090C8 19                         byte_864A:	dc.b $19
000090C9 C806 005D 20               		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	left in	pieces
000090CE C806 0057 10               		dc.b $C8, 6, 0,	$57, $10
000090D3 D005 0067 00               		dc.b $D0, 5, 0,	$67, 0
000090D8 D005 0063 F0               		dc.b $D0, 5, 0,	$63, $F0
000090DD E005 006F 20               		dc.b $E0, 5, 0,	$6F, $20
000090E2 E005 006B 10               		dc.b $E0, 5, 0,	$6B, $10
000090E7 E005 0077 00               		dc.b $E0, 5, 0,	$77, 0
000090EC E005 0073 F0               		dc.b $E0, 5, 0,	$73, $F0
000090F1 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
000090F6 D806 0081 D0               		dc.b $D8, 6, 0,	$81, $D0
000090FB F005 008B 20               		dc.b $F0, 5, 0,	$8B, $20
00009100 F005 0087 10               		dc.b $F0, 5, 0,	$87, $10
00009105 F005 0093 00               		dc.b $F0, 5, 0,	$93, 0
0000910A F005 008F F0               		dc.b $F0, 5, 0,	$8F, $F0
0000910F F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00009114 F005 009B D0               		dc.b $F0, 5, 0,	$9B, $D0
00009119 0005 008B 20               		dc.b 0,	5, 0, $8B, $20
0000911E 0005 008B 10               		dc.b 0,	5, 0, $8B, $10
00009123 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00009128 0005 00AB F0               		dc.b 0,	5, 0, $AB, $F0
0000912D 0005 00AB E0               		dc.b 0,	5, 0, $AB, $E0
00009132 0005 00B3 D0               		dc.b 0,	5, 0, $B3, $D0
00009137 1005 00AB 20               		dc.b $10, 5, 0,	$AB, $20
0000913C 1005 00AB 10               		dc.b $10, 5, 0,	$AB, $10
00009141 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00009146 19                         byte_86C8:	dc.b $19
00009147 C806 005D 20               		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	right in pieces
0000914C C806 0057 10               		dc.b $C8, 6, 0,	$57, $10
00009151 D005 0067 00               		dc.b $D0, 5, 0,	$67, 0
00009156 D005 0063 F0               		dc.b $D0, 5, 0,	$63, $F0
0000915B E005 006F 20               		dc.b $E0, 5, 0,	$6F, $20
00009160 E005 006B 10               		dc.b $E0, 5, 0,	$6B, $10
00009165 E005 0077 00               		dc.b $E0, 5, 0,	$77, 0
0000916A E005 0073 F0               		dc.b $E0, 5, 0,	$73, $F0
0000916F D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00009174 D806 00BB D0               		dc.b $D8, 6, 0,	$BB, $D0
00009179 F005 008B 20               		dc.b $F0, 5, 0,	$8B, $20
0000917E F005 0087 10               		dc.b $F0, 5, 0,	$87, $10
00009183 F005 0093 00               		dc.b $F0, 5, 0,	$93, 0
00009188 F005 008F F0               		dc.b $F0, 5, 0,	$8F, $F0
0000918D F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00009192 F005 00C1 D0               		dc.b $F0, 5, 0,	$C1, $D0
00009197 0005 008B 20               		dc.b 0,	5, 0, $8B, $20
0000919C 0005 008B 10               		dc.b 0,	5, 0, $8B, $10
000091A1 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
000091A6 0005 00AB F0               		dc.b 0,	5, 0, $AB, $F0
000091AB 0005 00AB E0               		dc.b 0,	5, 0, $AB, $E0
000091B0 0005 00B7 D0               		dc.b 0,	5, 0, $B7, $D0
000091B5 1005 00AB 20               		dc.b $10, 5, 0,	$AB, $20
000091BA 1005 00AB 10               		dc.b $10, 5, 0,	$AB, $10
000091BF 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
000091C4                            		even
000091C4                            		even
000091C4                            
000091C4                            ; ---------------------------------------------------------------------------
000091C4                            ; Sprite mappings - collapsing floors (MZ, SLZ,	SBZ)
000091C4                            ; ---------------------------------------------------------------------------
000091C4                            Map_obj53:
000091C4                            	include "_maps\obj53.asm"
000091C4                            ; ---------------------------------------------------------------------------
000091C4                            ; Sprite mappings - collapsing floors (MZ, SLZ,	SBZ)
000091C4                            ; ---------------------------------------------------------------------------
000091C4 0000 0000                  		dc.w byte_874E-Map_obj53, byte_8763-Map_obj53
000091C8 0000 0000                  		dc.w byte_878C-Map_obj53, byte_87A1-Map_obj53
000091CC 04                         byte_874E:	dc.b 4
000091CD F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	; MZ and SBZ blocks
000091D2 080D 0000 E0               		dc.b 8,	$D, 0, 0, $E0
000091D7 F80D 0000 00               		dc.b $F8, $D, 0, 0, 0
000091DC 080D 0000 00               		dc.b 8,	$D, 0, 0, 0
000091E1 08                         byte_8763:	dc.b 8
000091E2 F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
000091E7 F805 0000 F0               		dc.b $F8, 5, 0,	0, $F0
000091EC F805 0000 00               		dc.b $F8, 5, 0,	0, 0
000091F1 F805 0000 10               		dc.b $F8, 5, 0,	0, $10
000091F6 0805 0000 E0               		dc.b 8,	5, 0, 0, $E0
000091FB 0805 0000 F0               		dc.b 8,	5, 0, 0, $F0
00009200 0805 0000 00               		dc.b 8,	5, 0, 0, 0
00009205 0805 0000 10               		dc.b 8,	5, 0, 0, $10
0000920A 04                         byte_878C:	dc.b 4
0000920B F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	; SLZ blocks
00009210 080D 0008 E0               		dc.b 8,	$D, 0, 8, $E0
00009215 F80D 0000 00               		dc.b $F8, $D, 0, 0, 0
0000921A 080D 0008 00               		dc.b 8,	$D, 0, 8, 0
0000921F 08                         byte_87A1:	dc.b 8
00009220 F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
00009225 F805 0004 F0               		dc.b $F8, 5, 0,	4, $F0
0000922A F805 0000 00               		dc.b $F8, 5, 0,	0, 0
0000922F F805 0004 10               		dc.b $F8, 5, 0,	4, $10
00009234 0805 0008 E0               		dc.b 8,	5, 0, 8, $E0
00009239 0805 000C F0               		dc.b 8,	5, 0, $C, $F0
0000923E 0805 0008 00               		dc.b 8,	5, 0, 8, 0
00009243 0805 000C 10               		dc.b 8,	5, 0, $C, $10
00009248                            		even
00009248                            		even
00009248                            
00009248                            ; ===========================================================================
00009248                            ; ---------------------------------------------------------------------------
00009248                            ; Object 1C - scenery (GHZ bridge stump, SLZ lava thrower)
00009248                            ; ---------------------------------------------------------------------------
00009248                            
00009248                            Obj1C:					; XREF: Obj_Index
00009248 7000                       		moveq	#0,d0
0000924A 1028 0024                  		move.b	$24(a0),d0
0000924E 323B 0000                  		move.w	Obj1C_Index(pc,d0.w),d1
00009252 4EFB 1000                  		jmp	Obj1C_Index(pc,d1.w)
00009256                            ; ===========================================================================
00009256 0000                       Obj1C_Index:	dc.w Obj1C_Main-Obj1C_Index
00009258 0000                       		dc.w Obj1C_ChkDel-Obj1C_Index
0000925A                            ; ===========================================================================
0000925A                            
0000925A                            Obj1C_Main:				; XREF: Obj1C_Index
0000925A 5428 0024                  		addq.b	#2,$24(a0)
0000925E 7000                       		moveq	#0,d0
00009260 1028 0028                  		move.b	$28(a0),d0	; copy object type to d0
00009264 C0FC 000A                  		mulu.w	#$A,d0		; multiply by $A
00009268 43FB 0000                  		lea	Obj1C_Var(pc,d0.w),a1
0000926C 2159 0004                  		move.l	(a1)+,4(a0)
00009270 3159 0002                  		move.w	(a1)+,2(a0)
00009274 0028 0004 0001             		ori.b	#4,1(a0)
0000927A 1159 001A                  		move.b	(a1)+,$1A(a0)
0000927E 1159 0019                  		move.b	(a1)+,$19(a0)
00009282 1159 0018                  		move.b	(a1)+,$18(a0)
00009286 1159 0020                  		move.b	(a1)+,$20(a0)
0000928A                            
0000928A                            Obj1C_ChkDel:				; XREF: Obj1C_Index
0000928A 3028 0008                  		move.w	8(a0),d0
0000928E 0240 FF80                  		andi.w	#$FF80,d0
00009292 3238 F700                  		move.w	($FFFFF700).w,d1
00009296 0441 0080                  		subi.w	#$80,d1
0000929A 0241 FF80                  		andi.w	#$FF80,d1
0000929E 9041                       		sub.w	d1,d0
000092A0 0C40 0280                  		cmpi.w	#$280,d0
000092A4 6200 0000                  		bhi.w	DeleteObject
000092A8 6000 0000                  		bra.w	DisplaySprite
000092AC                            ; ===========================================================================
000092AC                            ; ---------------------------------------------------------------------------
000092AC                            ; Variables for	object $1C are stored in an array
000092AC                            ; ---------------------------------------------------------------------------
000092AC 0000 0000                  Obj1C_Var:	dc.l Map_obj1C		; mappings address
000092B0 44D8                       		dc.w $44D8		; VRAM setting
000092B2 0008 0200                  		dc.b 0,	8, 2, 0		; frame, width,	priority, collision response
000092B6 0000 0000                  		dc.l Map_obj1C
000092BA 44D8                       		dc.w $44D8
000092BC 0008 0200                  		dc.b 0,	8, 2, 0
000092C0 0000 0000                  		dc.l Map_obj1C
000092C4 44D8                       		dc.w $44D8
000092C6 0008 0200                  		dc.b 0,	8, 2, 0
000092CA 0000 83BE                  		dc.l Map_obj11
000092CE 438E                       		dc.w $438E
000092D0 0110 0100                  		dc.b 1,	$10, 1,	0
000092D4                            ; ---------------------------------------------------------------------------
000092D4                            ; Sprite mappings - SLZ	lava thrower
000092D4                            ; ---------------------------------------------------------------------------
000092D4                            Map_obj1C:
000092D4                            	include "_maps\obj1C.asm"
000092D4                            ; ---------------------------------------------------------------------------
000092D4                            ; Sprite mappings - SLZ	lava thrower
000092D4                            ; ---------------------------------------------------------------------------
000092D4 0000                       		dc.w byte_8858-Map_obj1C
000092D6 01                         byte_8858:	dc.b 1
000092D7 F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
000092DC                            		even
000092DC                            		even
000092DC                            
000092DC                            ; ===========================================================================
000092DC                            ; ---------------------------------------------------------------------------
000092DC                            ; Object 1D - switch that activates when Sonic touches it
000092DC                            ; (this	is not used anywhere in	the game)
000092DC                            ; ---------------------------------------------------------------------------
000092DC                            
000092DC                            Obj1D:					; XREF: Obj_Index
000092DC 7000                       		moveq	#0,d0
000092DE 1028 0024                  		move.b	$24(a0),d0
000092E2 323B 0000                  		move.w	Obj1D_Index(pc,d0.w),d1
000092E6 4EFB 1000                  		jmp	Obj1D_Index(pc,d1.w)
000092EA                            ; ===========================================================================
000092EA 0000                       Obj1D_Index:	dc.w Obj1D_Main-Obj1D_Index
000092EC 0000                       		dc.w Obj1D_Action-Obj1D_Index
000092EE 0000                       		dc.w Obj1D_Delete-Obj1D_Index
000092F0                            ; ===========================================================================
000092F0                            
000092F0                            Obj1D_Main:				; XREF: Obj1D_Index
000092F0 5428 0024                  		addq.b	#2,$24(a0)
000092F4 217C 0000 0000 0004        		move.l	#Map_obj1D,4(a0)
000092FC 317C 4000 0002             		move.w	#$4000,2(a0)
00009302 117C 0004 0001             		move.b	#4,1(a0)
00009308 3168 000C 0030             		move.w	$C(a0),$30(a0)	; save position	on y-axis
0000930E 117C 0010 0019             		move.b	#$10,$19(a0)
00009314 117C 0005 0018             		move.b	#5,$18(a0)
0000931A                            
0000931A                            Obj1D_Action:				; XREF: Obj1D_Index
0000931A 3168 0030 000C             		move.w	$30(a0),$C(a0)	; restore position on y-axis
00009320 323C 0010                  		move.w	#$10,d1
00009324 6100 0000                  		bsr.w	Obj1D_ChkTouch
00009328 6700                       		beq.s	Obj1D_ChkDel
0000932A 5468 000C                  		addq.w	#2,$C(a0)	; move object 2	pixels
0000932E 7001                       		moveq	#1,d0
00009330 31C0 F7E0                  		move.w	d0,($FFFFF7E0).w ; set switch 0	as "pressed"
00009334                            
00009334                            Obj1D_ChkDel:
00009334 6100 0000                  		bsr.w	DisplaySprite
00009338 3028 0008                  		move.w	8(a0),d0
0000933C 0240 FF80                  		andi.w	#$FF80,d0
00009340 3238 F700                  		move.w	($FFFFF700).w,d1
00009344 0441 0080                  		subi.w	#$80,d1
00009348 0241 FF80                  		andi.w	#$FF80,d1
0000934C 9041                       		sub.w	d1,d0
0000934E 0C40 0280                  		cmpi.w	#$280,d0
00009352 6200 0000                  		bhi.w	Obj1D_Delete
00009356 4E75                       		rts	
00009358                            ; ===========================================================================
00009358                            
00009358                            Obj1D_Delete:				; XREF: Obj1D_Index
00009358 6100 0000                  		bsr.w	DeleteObject
0000935C 4E75                       		rts	
0000935E                            ; ---------------------------------------------------------------------------
0000935E                            ; Subroutine to	check if Sonic touches the object
0000935E                            ; ---------------------------------------------------------------------------
0000935E                            
0000935E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000935E                            
0000935E                            
0000935E                            Obj1D_ChkTouch:				; XREF: Obj1D_Action
0000935E 43F8 D000                  		lea	($FFFFD000).w,a1
00009362 3029 0008                  		move.w	8(a1),d0
00009366 9068 0008                  		sub.w	8(a0),d0
0000936A D041                       		add.w	d1,d0
0000936C 6B00                       		bmi.s	loc_8918
0000936E D241                       		add.w	d1,d1
00009370 B041                       		cmp.w	d1,d0
00009372 6400                       		bcc.s	loc_8918
00009374 3429 000C                  		move.w	$C(a1),d2
00009378 1229 0016                  		move.b	$16(a1),d1
0000937C 4881                       		ext.w	d1
0000937E D242                       		add.w	d2,d1
00009380 3028 000C                  		move.w	$C(a0),d0
00009384 0440 0010                  		subi.w	#$10,d0
00009388 9041                       		sub.w	d1,d0
0000938A 6200                       		bhi.s	loc_8918
0000938C 0C40 FFF0                  		cmpi.w	#-$10,d0
00009390 6500                       		bcs.s	loc_8918
00009392 70FF                       		moveq	#-1,d0
00009394 4E75                       		rts	
00009396                            ; ===========================================================================
00009396                            
00009396                            loc_8918:
00009396 7000                       		moveq	#0,d0
00009398 4E75                       		rts	
0000939A                            ; End of function Obj1D_ChkTouch
0000939A                            
0000939A                            ; ===========================================================================
0000939A                            ; ---------------------------------------------------------------------------
0000939A                            ; Sprite mappings - object 1D
0000939A                            ; ---------------------------------------------------------------------------
0000939A                            Map_obj1D:
0000939A                            	include "_maps\obj1D.asm"
0000939A                            ; ---------------------------------------------------------------------------
0000939A                            ; Sprite mappings - object 1D
0000939A                            ; ---------------------------------------------------------------------------
0000939A 0000                       		dc.w byte_891E-Map_obj1D
0000939C 04                         byte_891E:	dc.b 4
0000939D E807 0054 F0               		dc.b $E8, 7, 0,	$54, $F0
000093A2 0805 005C F0               		dc.b 8,	5, 0, $5C, $F0
000093A7 E807 0054 00               		dc.b $E8, 7, 0,	$54, 0
000093AC 0805 005C 00               		dc.b 8,	5, 0, $5C, 0
000093B2 00                         		even
000093B2 00                         		even
000093B2                            
000093B2                            ; ===========================================================================
000093B2                            ; ---------------------------------------------------------------------------
000093B2                            ; Object 2A - doors (SBZ)
000093B2                            ; ---------------------------------------------------------------------------
000093B2                            
000093B2                            Obj2A:					; XREF: Obj_Index
000093B2 7000                       		moveq	#0,d0
000093B4 1028 0024                  		move.b	$24(a0),d0
000093B8 323B 0000                  		move.w	Obj2A_Index(pc,d0.w),d1
000093BC 4EFB 1000                  		jmp	Obj2A_Index(pc,d1.w)
000093C0                            ; ===========================================================================
000093C0 0000                       Obj2A_Index:	dc.w Obj2A_Main-Obj2A_Index
000093C2 0000                       		dc.w Obj2A_OpenShut-Obj2A_Index
000093C4                            ; ===========================================================================
000093C4                            
000093C4                            Obj2A_Main:				; XREF: Obj2A_Index
000093C4 5428 0024                  		addq.b	#2,$24(a0)
000093C8 217C 0000 0000 0004        		move.l	#Map_obj2A,4(a0)
000093D0 317C 42E8 0002             		move.w	#$42E8,2(a0)
000093D6 0028 0004 0001             		ori.b	#4,1(a0)
000093DC 117C 0008 0019             		move.b	#8,$19(a0)
000093E2 117C 0004 0018             		move.b	#4,$18(a0)
000093E8                            
000093E8                            Obj2A_OpenShut:				; XREF: Obj2A_Index
000093E8 323C 0040                  		move.w	#$40,d1
000093EC 4228 001C                  		clr.b	$1C(a0)		; use "closing"	animation
000093F0 3038 D008                  		move.w	($FFFFD008).w,d0
000093F4 D041                       		add.w	d1,d0
000093F6 B068 0008                  		cmp.w	8(a0),d0
000093FA 6500                       		bcs.s	Obj2A_Animate
000093FC 9041                       		sub.w	d1,d0
000093FE 9041                       		sub.w	d1,d0
00009400 B068 0008                  		cmp.w	8(a0),d0
00009404 6400                       		bcc.s	Obj2A_Animate
00009406 D041                       		add.w	d1,d0
00009408 B068 0008                  		cmp.w	8(a0),d0
0000940C 6400                       		bcc.s	loc_899A
0000940E 0828 0000 0022             		btst	#0,$22(a0)
00009414 6600                       		bne.s	Obj2A_Animate
00009416 6000                       		bra.s	Obj2A_Open
00009418                            ; ===========================================================================
00009418                            
00009418                            loc_899A:				; XREF: Obj2A_OpenShut
00009418 0828 0000 0022             		btst	#0,$22(a0)
0000941E 6700                       		beq.s	Obj2A_Animate
00009420                            
00009420                            Obj2A_Open:				; XREF: Obj2A_OpenShut
00009420 117C 0001 001C             		move.b	#1,$1C(a0)	; use "opening"	animation
00009426                            
00009426                            Obj2A_Animate:				; XREF: Obj2A_OpenShut; loc_899A
00009426 43F9 0000 0000             		lea	(Ani_obj2A).l,a1
0000942C 6100 0000                  		bsr.w	AnimateSprite
00009430 4A28 001A                  		tst.b	$1A(a0)		; is the door open?
00009434 6600                       		bne.s	Obj2A_MarkAsUsed ; if yes, branch
00009436 323C 0011                  		move.w	#$11,d1
0000943A 343C 0020                  		move.w	#$20,d2
0000943E 3602                       		move.w	d2,d3
00009440 5243                       		addq.w	#1,d3
00009442 3828 0008                  		move.w	8(a0),d4
00009446 6100 0000                  		bsr.w	SolidObject
0000944A                            
0000944A                            Obj2A_MarkAsUsed:
0000944A 6000 0000                  		bra.w	MarkObjGone
0000944E                            ; ===========================================================================
0000944E                            Ani_obj2A:
0000944E                            	include "_anim\obj2A.asm"
0000944E                            ; ---------------------------------------------------------------------------
0000944E                            ; Animation script - doors (SBZ)
0000944E                            ; ---------------------------------------------------------------------------
0000944E 0000                       		dc.w Ani_obj2A_Shut-Ani_obj2A
00009450 0000                       		dc.w Ani_obj2A_Open-Ani_obj2A
00009452 0008 0706 0504 0302 0100+  Ani_obj2A_Shut:	dc.b 0,	8, 7, 6, 5, 4, 3, 2, 1,	0, $FE,	1
0000945E 0000 0102 0304 0506 0708+  Ani_obj2A_Open:	dc.b 0,	0, 1, 2, 3, 4, 5, 6, 7,	8, $FE,	1
0000946A                            		even
0000946A                            		even
0000946A                            
0000946A                            ; ---------------------------------------------------------------------------
0000946A                            ; Sprite mappings - doors (SBZ)
0000946A                            ; ---------------------------------------------------------------------------
0000946A                            Map_obj2A:
0000946A                            	include "_maps\obj2A.asm"
0000946A                            ; ---------------------------------------------------------------------------
0000946A                            ; Sprite mappings - doors (SBZ)
0000946A                            ; ---------------------------------------------------------------------------
0000946A 0000 0000                  		dc.w byte_89FE-Map_obj2A, byte_8A09-Map_obj2A
0000946E 0000 0000                  		dc.w byte_8A14-Map_obj2A, byte_8A1F-Map_obj2A
00009472 0000 0000                  		dc.w byte_8A2A-Map_obj2A, byte_8A35-Map_obj2A
00009476 0000 0000                  		dc.w byte_8A40-Map_obj2A, byte_8A4B-Map_obj2A
0000947A 0000                       		dc.w byte_8A56-Map_obj2A
0000947C 02                         byte_89FE:	dc.b 2
0000947D E007 0800 F8               		dc.b $E0, 7, 8,	0, $F8	; door closed
00009482 0007 0800 F8               		dc.b 0,	7, 8, 0, $F8
00009487 02                         byte_8A09:	dc.b 2
00009488 DC07 0800 F8               		dc.b $DC, 7, 8,	0, $F8
0000948D 0407 0800 F8               		dc.b 4,	7, 8, 0, $F8
00009492 02                         byte_8A14:	dc.b 2
00009493 D807 0800 F8               		dc.b $D8, 7, 8,	0, $F8
00009498 0807 0800 F8               		dc.b 8,	7, 8, 0, $F8
0000949D 02                         byte_8A1F:	dc.b 2
0000949E D407 0800 F8               		dc.b $D4, 7, 8,	0, $F8
000094A3 0C07 0800 F8               		dc.b $C, 7, 8, 0, $F8
000094A8 02                         byte_8A2A:	dc.b 2
000094A9 D007 0800 F8               		dc.b $D0, 7, 8,	0, $F8
000094AE 1007 0800 F8               		dc.b $10, 7, 8,	0, $F8
000094B3 02                         byte_8A35:	dc.b 2
000094B4 CC07 0800 F8               		dc.b $CC, 7, 8,	0, $F8
000094B9 1407 0800 F8               		dc.b $14, 7, 8,	0, $F8
000094BE 02                         byte_8A40:	dc.b 2
000094BF C807 0800 F8               		dc.b $C8, 7, 8,	0, $F8
000094C4 1807 0800 F8               		dc.b $18, 7, 8,	0, $F8
000094C9 02                         byte_8A4B:	dc.b 2
000094CA C407 0800 F8               		dc.b $C4, 7, 8,	0, $F8
000094CF 1C07 0800 F8               		dc.b $1C, 7, 8,	0, $F8
000094D4 02                         byte_8A56:	dc.b 2
000094D5 C007 0800 F8               		dc.b $C0, 7, 8,	0, $F8	; door fully open
000094DA 2007 0800 F8               		dc.b $20, 7, 8,	0, $F8
000094E0 00                         		even
000094E0 00                         		even
000094E0                            
000094E0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000094E0                            
000094E0                            
000094E0                            Obj44_SolidWall:			; XREF: Obj44_Solid
000094E0 6100 0000                  		bsr.w	Obj44_SolidWall2
000094E4 6700                       		beq.s	loc_8AA8
000094E6 6B00 0000                  		bmi.w	loc_8AC4
000094EA 4A40                       		tst.w	d0
000094EC 6700 0000                  		beq.w	loc_8A92
000094F0 6B00                       		bmi.s	loc_8A7C
000094F2 4A69 0010                  		tst.w	$10(a1)
000094F6 6B00                       		bmi.s	loc_8A92
000094F8 6000                       		bra.s	loc_8A82
000094FA                            ; ===========================================================================
000094FA                            
000094FA                            loc_8A7C:
000094FA 4A69 0010                  		tst.w	$10(a1)
000094FE 6A00                       		bpl.s	loc_8A92
00009500                            
00009500                            loc_8A82:
00009500 9169 0008                  		sub.w	d0,8(a1)
00009504 337C 0000 0014             		move.w	#0,$14(a1)
0000950A 337C 0000 0010             		move.w	#0,$10(a1)
00009510                            
00009510                            loc_8A92:
00009510 0829 0001 0022             		btst	#1,$22(a1)
00009516 6600                       		bne.s	loc_8AB6
00009518 08E9 0005 0022             		bset	#5,$22(a1)
0000951E 08E8 0005 0022             		bset	#5,$22(a0)
00009524 4E75                       		rts	
00009526                            ; ===========================================================================
00009526                            
00009526                            loc_8AA8:
00009526 0828 0005 0022             		btst	#5,$22(a0)
0000952C 6700                       		beq.s	locret_8AC2
0000952E 337C 0001 001C             		move.w	#1,$1C(a1)
00009534                            
00009534                            loc_8AB6:
00009534 08A8 0005 0022             		bclr	#5,$22(a0)
0000953A 08A9 0005 0022             		bclr	#5,$22(a1)
00009540                            
00009540                            locret_8AC2:
00009540 4E75                       		rts	
00009542                            ; ===========================================================================
00009542                            
00009542                            loc_8AC4:
00009542 4A69 0012                  		tst.w	$12(a1)
00009546 6A00                       		bpl.s	locret_8AD8
00009548 4A43                       		tst.w	d3
0000954A 6A00                       		bpl.s	locret_8AD8
0000954C 9769 000C                  		sub.w	d3,$C(a1)
00009550 337C 0000 0012             		move.w	#0,$12(a1)
00009556                            
00009556                            locret_8AD8:
00009556 4E75                       		rts	
00009558                            ; End of function Obj44_SolidWall
00009558                            
00009558                            
00009558                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009558                            
00009558                            
00009558                            Obj44_SolidWall2:			; XREF: Obj44_SolidWall
00009558 43F8 D000                  		lea	($FFFFD000).w,a1
0000955C 3029 0008                  		move.w	8(a1),d0
00009560 9068 0008                  		sub.w	8(a0),d0
00009564 D041                       		add.w	d1,d0
00009566 6B00                       		bmi.s	loc_8B48
00009568 3601                       		move.w	d1,d3
0000956A D643                       		add.w	d3,d3
0000956C B043                       		cmp.w	d3,d0
0000956E 6200                       		bhi.s	loc_8B48
00009570 1629 0016                  		move.b	$16(a1),d3
00009574 4883                       		ext.w	d3
00009576 D443                       		add.w	d3,d2
00009578 3629 000C                  		move.w	$C(a1),d3
0000957C 9668 000C                  		sub.w	$C(a0),d3
00009580 D642                       		add.w	d2,d3
00009582 6B00                       		bmi.s	loc_8B48
00009584 3802                       		move.w	d2,d4
00009586 D844                       		add.w	d4,d4
00009588 B644                       		cmp.w	d4,d3
0000958A 6400                       		bcc.s	loc_8B48
0000958C 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00009590 6B00                       		bmi.s	loc_8B48
00009592 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00009598 6400                       		bcc.s	loc_8B48
0000959A 4A78 FE08                  		tst.w	($FFFFFE08).w
0000959E 6600                       		bne.s	loc_8B48
000095A0 3A00                       		move.w	d0,d5
000095A2 B240                       		cmp.w	d0,d1
000095A4 6400                       		bcc.s	loc_8B30
000095A6 D241                       		add.w	d1,d1
000095A8 9041                       		sub.w	d1,d0
000095AA 3A00                       		move.w	d0,d5
000095AC 4445                       		neg.w	d5
000095AE                            
000095AE                            loc_8B30:
000095AE 3203                       		move.w	d3,d1
000095B0 B443                       		cmp.w	d3,d2
000095B2 6400                       		bcc.s	loc_8B3C
000095B4 9644                       		sub.w	d4,d3
000095B6 3203                       		move.w	d3,d1
000095B8 4441                       		neg.w	d1
000095BA                            
000095BA                            loc_8B3C:
000095BA BA41                       		cmp.w	d1,d5
000095BC 6200                       		bhi.s	loc_8B44
000095BE 7801                       		moveq	#1,d4
000095C0 4E75                       		rts	
000095C2                            ; ===========================================================================
000095C2                            
000095C2                            loc_8B44:
000095C2 78FF                       		moveq	#-1,d4
000095C4 4E75                       		rts	
000095C6                            ; ===========================================================================
000095C6                            
000095C6                            loc_8B48:
000095C6 7800                       		moveq	#0,d4
000095C8 4E75                       		rts	
000095CA                            ; End of function Obj44_SolidWall2
000095CA                            
000095CA                            ; ===========================================================================
000095CA                            ; ---------------------------------------------------------------------------
000095CA                            ; Object 1E - Ball Hog enemy (SBZ)
000095CA                            ; ---------------------------------------------------------------------------
000095CA                            
000095CA                            Obj1E:					; XREF: Obj_Index
000095CA 7000                       		moveq	#0,d0
000095CC 1028 0024                  		move.b	$24(a0),d0
000095D0 323B 0000                  		move.w	Obj1E_Index(pc,d0.w),d1
000095D4 4EFB 1000                  		jmp	Obj1E_Index(pc,d1.w)
000095D8                            ; ===========================================================================
000095D8 0000                       Obj1E_Index:	dc.w Obj1E_Main-Obj1E_Index
000095DA 0000                       		dc.w Obj1E_Action-Obj1E_Index
000095DC                            ; ===========================================================================
000095DC                            
000095DC                            Obj1E_Main:				; XREF: Obj1E_Index
000095DC 117C 0013 0016             		move.b	#$13,$16(a0)
000095E2 117C 0008 0017             		move.b	#8,$17(a0)
000095E8 217C 0000 0000 0004        		move.l	#Map_obj1E,4(a0)
000095F0 317C 2302 0002             		move.w	#$2302,2(a0)
000095F6 117C 0004 0001             		move.b	#4,1(a0)
000095FC 117C 0004 0018             		move.b	#4,$18(a0)
00009602 117C 0005 0020             		move.b	#5,$20(a0)
00009608 117C 000C 0019             		move.b	#$C,$19(a0)
0000960E 6100 0000                  		bsr.w	ObjectFall
00009612 4EB9 0000 0000             		jsr	ObjHitFloor
00009618 4A41                       		tst.w	d1
0000961A 6A00                       		bpl.s	locret_8BAC
0000961C D368 000C                  		add.w	d1,$C(a0)
00009620 317C 0000 0012             		move.w	#0,$12(a0)
00009626 5428 0024                  		addq.b	#2,$24(a0)
0000962A                            
0000962A                            locret_8BAC:
0000962A 4E75                       		rts	
0000962C                            ; ===========================================================================
0000962C                            
0000962C                            Obj1E_Action:				; XREF: Obj1E_Index
0000962C 43F9 0000 0000             		lea	(Ani_obj1E).l,a1
00009632 6100 0000                  		bsr.w	AnimateSprite
00009636 0C28 0001 001A             		cmpi.b	#1,$1A(a0)	; is final frame (01) displayed?
0000963C 6600                       		bne.s	Obj1E_SetBall	; if not, branch
0000963E 4A28 0032                  		tst.b	$32(a0)		; is it	set to launch cannonball?
00009642 6700                       		beq.s	Obj1E_MakeBall	; if yes, branch
00009644 6000                       		bra.s	Obj1E_MarkAsGone
00009646                            ; ===========================================================================
00009646                            
00009646                            Obj1E_SetBall:				; XREF: Obj1E_Action
00009646 4228 0032                  		clr.b	$32(a0)		; set to launch	cannonball
0000964A                            
0000964A                            Obj1E_MarkAsGone:			; XREF: Obj1E_Action
0000964A 6000 0000                  		bra.w	MarkObjGone
0000964E                            ; ===========================================================================
0000964E                            
0000964E                            Obj1E_MakeBall:				; XREF: Obj1E_Action
0000964E 117C 0001 0032             		move.b	#1,$32(a0)
00009654 6100 0000                  		bsr.w	SingleObjLoad
00009658 6600                       		bne.s	loc_8C1A
0000965A 12BC 0020                  		move.b	#$20,0(a1)	; load cannonball object ($20)
0000965E 3368 0008 0008             		move.w	8(a0),8(a1)
00009664 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000966A 337C FF00 0010             		move.w	#-$100,$10(a1)	; cannonball bounces to	the left
00009670 337C 0000 0012             		move.w	#0,$12(a1)
00009676 70FC                       		moveq	#-4,d0
00009678 0828 0000 0022             		btst	#0,$22(a0)	; is Ball Hog facing right?
0000967E 6700                       		beq.s	loc_8C0A	; if not, branch
00009680 4440                       		neg.w	d0
00009682 4469 0010                  		neg.w	$10(a1)		; cannonball bounces to	the right
00009686                            
00009686                            loc_8C0A:
00009686 D169 0008                  		add.w	d0,8(a1)
0000968A 0669 000C 000C             		addi.w	#$C,$C(a1)
00009690 1368 0028 0028             		move.b	$28(a0),$28(a1)	; copy object type from	Ball Hog
00009696                            
00009696                            loc_8C1A:
00009696 60B2                       		bra.s	Obj1E_MarkAsGone
00009698                            ; ===========================================================================
00009698                            ; ---------------------------------------------------------------------------
00009698                            ; Object 20 - cannonball that Ball Hog throws (SBZ)
00009698                            ; ---------------------------------------------------------------------------
00009698                            
00009698                            Obj20:					; XREF: Obj_Index
00009698 7000                       		moveq	#0,d0
0000969A 1028 0024                  		move.b	$24(a0),d0
0000969E 323B 0000                  		move.w	Obj20_Index(pc,d0.w),d1
000096A2 4EFB 1000                  		jmp	Obj20_Index(pc,d1.w)
000096A6                            ; ===========================================================================
000096A6 0000                       Obj20_Index:	dc.w Obj20_Main-Obj20_Index
000096A8 0000                       		dc.w Obj20_Bounce-Obj20_Index
000096AA                            ; ===========================================================================
000096AA                            
000096AA                            Obj20_Main:				; XREF: Obj20_Index
000096AA 5428 0024                  		addq.b	#2,$24(a0)
000096AE 117C 0007 0016             		move.b	#7,$16(a0)
000096B4 217C 0000 0000 0004        		move.l	#Map_obj1E,4(a0)
000096BC 317C 2302 0002             		move.w	#$2302,2(a0)
000096C2 117C 0004 0001             		move.b	#4,1(a0)
000096C8 117C 0003 0018             		move.b	#3,$18(a0)
000096CE 117C 0087 0020             		move.b	#$87,$20(a0)
000096D4 117C 0008 0019             		move.b	#8,$19(a0)
000096DA 7000                       		moveq	#0,d0
000096DC 1028 0028                  		move.b	$28(a0),d0	; move object type to d0
000096E0 C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 frames	(1 second)
000096E4 3140 0030                  		move.w	d0,$30(a0)	; set explosion	time
000096E8 117C 0004 001A             		move.b	#4,$1A(a0)
000096EE                            
000096EE                            Obj20_Bounce:				; XREF: Obj20_Index
000096EE 4EB9 0000 0000             		jsr	ObjectFall
000096F4 4A68 0012                  		tst.w	$12(a0)
000096F8 6B00                       		bmi.s	Obj20_ChkExplode
000096FA 4EB9 0000 0000             		jsr	ObjHitFloor
00009700 4A41                       		tst.w	d1
00009702 6A00                       		bpl.s	Obj20_ChkExplode
00009704 D368 000C                  		add.w	d1,$C(a0)
00009708 317C FD00 0012             		move.w	#-$300,$12(a0)
0000970E 4A03                       		tst.b	d3
00009710 6700                       		beq.s	Obj20_ChkExplode
00009712 6B00                       		bmi.s	loc_8CA4
00009714 4A68 0010                  		tst.w	$10(a0)
00009718 6A00                       		bpl.s	Obj20_ChkExplode
0000971A 4468 0010                  		neg.w	$10(a0)
0000971E 6000                       		bra.s	Obj20_ChkExplode
00009720                            ; ===========================================================================
00009720                            
00009720                            loc_8CA4:				; XREF: Obj20_Bounce
00009720 4A68 0010                  		tst.w	$10(a0)
00009724 6B00                       		bmi.s	Obj20_ChkExplode
00009726 4468 0010                  		neg.w	$10(a0)
0000972A                            
0000972A                            Obj20_ChkExplode:			; XREF: Obj20_Bounce
0000972A 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from explosion time
0000972E 6A00                       		bpl.s	Obj20_Animate	; if time is > 0, branch
00009730 10BC 0024                  		move.b	#$24,0(a0)
00009734 10BC 003F                  		move.b	#$3F,0(a0)	; change object	to an explosion	($3F)
00009738 117C 0000 0024             		move.b	#0,$24(a0)	; reset	routine	counter
0000973E 6000 0000                  		bra.w	Obj3F		; jump to explosion code
00009742                            ; ===========================================================================
00009742                            
00009742                            Obj20_Animate:				; XREF: Obj20_ChkExplode
00009742 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
00009746 6A00                       		bpl.s	Obj20_Display
00009748 117C 0005 001E             		move.b	#5,$1E(a0)	; set frame duration to	5 frames
0000974E 0868 0000 001A             		bchg	#0,$1A(a0)	; change frame
00009754                            
00009754                            Obj20_Display:
00009754 6100 0000                  		bsr.w	DisplaySprite
00009758 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000975C 0640 00E0                  		addi.w	#$E0,d0
00009760 B068 000C                  		cmp.w	$C(a0),d0	; has object fallen off	the level?
00009764 6500 0000                  		bcs.w	DeleteObject	; if yes, branch
00009768 4E75                       		rts	
0000976A                            ; ===========================================================================
0000976A                            ; ---------------------------------------------------------------------------
0000976A                            ; Object 24 - explosion	from a destroyed monitor
0000976A                            ; ---------------------------------------------------------------------------
0000976A                            
0000976A                            Obj24:					; XREF: Obj_Index
0000976A 7000                       		moveq	#0,d0
0000976C 1028 0024                  		move.b	$24(a0),d0
00009770 323B 0000                  		move.w	Obj24_Index(pc,d0.w),d1
00009774 4EFB 1000                  		jmp	Obj24_Index(pc,d1.w)
00009778                            ; ===========================================================================
00009778 0000                       Obj24_Index:	dc.w Obj24_Main-Obj24_Index
0000977A 0000                       		dc.w Obj24_Animate-Obj24_Index
0000977C                            ; ===========================================================================
0000977C                            
0000977C                            Obj24_Main:				; XREF: Obj24_Index
0000977C 5428 0024                  		addq.b	#2,$24(a0)
00009780 217C 0000 0000 0004        		move.l	#Map_obj24,4(a0)
00009788 317C 041C 0002             		move.w	#$41C,2(a0)
0000978E 117C 0004 0001             		move.b	#4,1(a0)
00009794 117C 0001 0018             		move.b	#1,$18(a0)
0000979A 117C 0000 0020             		move.b	#0,$20(a0)
000097A0 117C 000C 0019             		move.b	#$C,$19(a0)
000097A6 117C 0009 001E             		move.b	#9,$1E(a0)
000097AC 117C 0000 001A             		move.b	#0,$1A(a0)
000097B2 303C 00A5                  		move.w	#$A5,d0
000097B6 4EB9 0000 147C             		jsr	(PlaySound_Special).l ;	play explosion sound
000097BC                            
000097BC                            Obj24_Animate:				; XREF: Obj24_Index
000097BC 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
000097C0 6A00                       		bpl.s	Obj24_Display
000097C2 117C 0009 001E             		move.b	#9,$1E(a0)	; set frame duration to	9 frames
000097C8 5228 001A                  		addq.b	#1,$1A(a0)	; next frame
000097CC 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; is the final frame (04) displayed?
000097D2 6700 0000                  		beq.w	DeleteObject	; if yes, branch
000097D6                            
000097D6                            Obj24_Display:
000097D6 6000 0000                  		bra.w	DisplaySprite
000097DA                            ; ===========================================================================
000097DA                            ; ---------------------------------------------------------------------------
000097DA                            ; Object 27 - explosion	from a destroyed enemy
000097DA                            ; ---------------------------------------------------------------------------
000097DA                            
000097DA                            Obj27:					; XREF: Obj_Index
000097DA 7000                       		moveq	#0,d0
000097DC 1028 0024                  		move.b	$24(a0),d0
000097E0 323B 0000                  		move.w	Obj27_Index(pc,d0.w),d1
000097E4 4EFB 1000                  		jmp	Obj27_Index(pc,d1.w)
000097E8                            ; ===========================================================================
000097E8 0000                       Obj27_Index:	dc.w Obj27_LoadAnimal-Obj27_Index
000097EA 0000                       		dc.w Obj27_Main-Obj27_Index
000097EC 0000                       		dc.w Obj27_Animate-Obj27_Index
000097EE                            ; ===========================================================================
000097EE                            
000097EE                            Obj27_LoadAnimal:			; XREF: Obj27_Index
000097EE 5428 0024                  		addq.b	#2,$24(a0)
000097F2 6100 0000                  		bsr.w	SingleObjLoad
000097F6 6600                       		bne.s	Obj27_Main
000097F8 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
000097FC 3368 0008 0008             		move.w	8(a0),8(a1)
00009802 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009808 3368 003E 003E             		move.w	$3E(a0),$3E(a1)
0000980E                            
0000980E                            Obj27_Main:				; XREF: Obj27_Index
0000980E 5428 0024                  		addq.b	#2,$24(a0)
00009812 217C 0000 0000 0004        		move.l	#Map_obj27,4(a0)
0000981A 317C 05A0 0002             		move.w	#$5A0,2(a0)
00009820 117C 0004 0001             		move.b	#4,1(a0)
00009826 117C 0001 0018             		move.b	#1,$18(a0)
0000982C 117C 0000 0020             		move.b	#0,$20(a0)
00009832 117C 000C 0019             		move.b	#$C,$19(a0)
00009838 117C 0007 001E             		move.b	#7,$1E(a0)	; set frame duration to	7 frames
0000983E 117C 0000 001A             		move.b	#0,$1A(a0)
00009844 303C 00C1                  		move.w	#$C1,d0
00009848 4EB9 0000 147C             		jsr	(PlaySound_Special).l ;	play breaking enemy sound
0000984E                            
0000984E                            Obj27_Animate:				; XREF: Obj27_Index
0000984E 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
00009852 6A00                       		bpl.s	Obj27_Display
00009854 117C 0007 001E             		move.b	#7,$1E(a0)	; set frame duration to	7 frames
0000985A 5228 001A                  		addq.b	#1,$1A(a0)	; next frame
0000985E 0C28 0005 001A             		cmpi.b	#5,$1A(a0)	; is the final frame (05) displayed?
00009864 6700 0000                  		beq.w	DeleteObject	; if yes, branch
00009868                            
00009868                            Obj27_Display:
00009868 6000 0000                  		bra.w	DisplaySprite
0000986C                            ; ===========================================================================
0000986C                            ; ---------------------------------------------------------------------------
0000986C                            ; Object 3F - explosion	from a destroyed boss, bomb or cannonball
0000986C                            ; ---------------------------------------------------------------------------
0000986C                            
0000986C                            Obj3F:					; XREF: Obj_Index
0000986C 7000                       		moveq	#0,d0
0000986E 1028 0024                  		move.b	$24(a0),d0
00009872 323B 0000                  		move.w	Obj3F_Index(pc,d0.w),d1
00009876 4EFB 1000                  		jmp	Obj3F_Index(pc,d1.w)
0000987A                            ; ===========================================================================
0000987A 0000                       Obj3F_Index:	dc.w Obj3F_Main-Obj3F_Index
0000987C FFD4                       		dc.w Obj27_Animate-Obj3F_Index
0000987E                            ; ===========================================================================
0000987E                            
0000987E                            Obj3F_Main:				; XREF: Obj3F_Index
0000987E 5428 0024                  		addq.b	#2,$24(a0)
00009882 217C 0000 0000 0004        		move.l	#Map_obj3F,4(a0)
0000988A 317C 05A0 0002             		move.w	#$5A0,2(a0)
00009890 117C 0004 0001             		move.b	#4,1(a0)
00009896 117C 0001 0018             		move.b	#1,$18(a0)
0000989C 117C 0000 0020             		move.b	#0,$20(a0)
000098A2 117C 000C 0019             		move.b	#$C,$19(a0)
000098A8 117C 0007 001E             		move.b	#7,$1E(a0)
000098AE 117C 0000 001A             		move.b	#0,$1A(a0)
000098B4 303C 00C4                  		move.w	#$C4,d0
000098B8 4EF9 0000 147C             		jmp	(PlaySound_Special).l ;	play exploding bomb sound
000098BE                            ; ===========================================================================
000098BE                            Ani_obj1E:
000098BE                            	include "_anim\obj1E.asm"
000098BE                            ; ---------------------------------------------------------------------------
000098BE                            ; Animation script - doors (SBZ)
000098BE                            ; ---------------------------------------------------------------------------
000098BE 0000                       		dc.w byte_8E4A-Ani_obj1E
000098C0 0900 0002 0203 0200 0002+  byte_8E4A:	dc.b 9,	0, 0, 2, 2, 3, 2, 0, 0,	2, 2, 3, 2, 0, 0, 2, 2, 3, 2, 0, 0, 1, $FF
000098D8 00                         		even
000098D8 00                         		even
000098D8                            
000098D8                            ; ---------------------------------------------------------------------------
000098D8                            ; Sprite mappings - Ball Hog enemy (SBZ)
000098D8                            ; ---------------------------------------------------------------------------
000098D8                            Map_obj1E:
000098D8                            	include "_maps\obj1E.asm"
000098D8                            ; ---------------------------------------------------------------------------
000098D8                            ; Sprite mappings - Ball Hog enemy (SBZ)
000098D8                            ; ---------------------------------------------------------------------------
000098D8 0000 0000                  		dc.w byte_8E6E-Map_obj1E, byte_8E79-Map_obj1E
000098DC 0000 0000                  		dc.w byte_8E84-Map_obj1E, byte_8E8F-Map_obj1E
000098E0 0000 0000                  		dc.w byte_8E9A-Map_obj1E, byte_8EA0-Map_obj1E
000098E4 02                         byte_8E6E:	dc.b 2
000098E5 EF09 0000 F4               		dc.b $EF, 9, 0,	0, $F4
000098EA FF0A 0006 F4               		dc.b $FF, $A, 0, 6, $F4
000098EF 02                         byte_8E79:	dc.b 2
000098F0 EF09 0000 F4               		dc.b $EF, 9, 0,	0, $F4
000098F5 FF0A 000F F4               		dc.b $FF, $A, 0, $F, $F4
000098FA 02                         byte_8E84:	dc.b 2
000098FB F409 0000 F4               		dc.b $F4, 9, 0,	0, $F4
00009900 0409 0018 F4               		dc.b 4,	9, 0, $18, $F4
00009905 02                         byte_8E8F:	dc.b 2
00009906 E409 0000 F4               		dc.b $E4, 9, 0,	0, $F4
0000990B F40A 001E F4               		dc.b $F4, $A, 0, $1E, $F4
00009910 01                         byte_8E9A:	dc.b 1
00009911 F805 0027 F8               		dc.b $F8, 5, 0,	$27, $F8
00009916 01                         byte_8EA0:	dc.b 1
00009917 F805 002B F8               		dc.b $F8, 5, 0,	$2B, $F8
0000991C                            		even
0000991C                            		even
0000991C                            
0000991C                            ; ---------------------------------------------------------------------------
0000991C                            ; Sprite mappings - explosion
0000991C                            ; ---------------------------------------------------------------------------
0000991C                            Map_obj24:
0000991C                            	include "_maps\obj24.asm"
0000991C                            ; ---------------------------------------------------------------------------
0000991C                            ; Sprite mappings - explosion
0000991C                            ; ---------------------------------------------------------------------------
0000991C 0000 0000                  		dc.w byte_8EAE-Map_obj24, byte_8EB4-Map_obj24
00009920 0000 0000                  		dc.w byte_8EBA-Map_obj24, byte_8EC0-Map_obj24
00009924 01                         byte_8EAE:	dc.b 1
00009925 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0000992A 01                         byte_8EB4:	dc.b 1
0000992B F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
00009930 01                         byte_8EBA:	dc.b 1
00009931 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
00009936 01                         byte_8EC0:	dc.b 1
00009937 F40A 001B F4               		dc.b $F4, $A, 0, $1B, $F4
0000993C                            		even
0000993C                            		even
0000993C                            
0000993C                            ; ---------------------------------------------------------------------------
0000993C                            ; Sprite mappings - explosion
0000993C                            ; ---------------------------------------------------------------------------
0000993C 0000 0000                  Map_obj27:	dc.w byte_8ED0-Map_obj27, byte_8ED6-Map_obj27
00009940 0000 0000                  		dc.w byte_8EDC-Map_obj27, byte_8EE2-Map_obj27
00009944 0000                       		dc.w byte_8EF7-Map_obj27
00009946 01                         byte_8ED0:	dc.b 1
00009947 F809 0000 F4               		dc.b $F8, 9, 0,	0, $F4
0000994C 01                         byte_8ED6:	dc.b 1
0000994D F00F 0006 F0               		dc.b $F0, $F, 0, 6, $F0
00009952 01                         byte_8EDC:	dc.b 1
00009953 F00F 0016 F0               		dc.b $F0, $F, 0, $16, $F0
00009958 04                         byte_8EE2:	dc.b 4
00009959 EC0A 0026 EC               		dc.b $EC, $A, 0, $26, $EC
0000995E EC05 002F 04               		dc.b $EC, 5, 0,	$2F, 4
00009963 0405 182F EC               		dc.b 4,	5, $18,	$2F, $EC
00009968 FC0A 1826 FC               		dc.b $FC, $A, $18, $26,	$FC
0000996D 04                         byte_8EF7:	dc.b 4
0000996E EC0A 0033 EC               		dc.b $EC, $A, 0, $33, $EC
00009973 EC05 003C 04               		dc.b $EC, 5, 0,	$3C, 4
00009978 0405 183C EC               		dc.b 4,	5, $18,	$3C, $EC
0000997D FC0A 1833 FC               		dc.b $FC, $A, $18, $33,	$FC
00009982                            		even
00009982                            ; ---------------------------------------------------------------------------
00009982                            ; Sprite mappings - explosion from when	a boss is destroyed
00009982                            ; ---------------------------------------------------------------------------
00009982 FFC4                       Map_obj3F:	dc.w byte_8ED0-Map_obj3F
00009984 0000                       		dc.w byte_8F16-Map_obj3F
00009986 0000                       		dc.w byte_8F1C-Map_obj3F
00009988 FFD6                       		dc.w byte_8EE2-Map_obj3F
0000998A FFEB                       		dc.w byte_8EF7-Map_obj3F
0000998C 01                         byte_8F16:	dc.b 1
0000998D F00F 0040 F0               		dc.b $F0, $F, 0, $40, $F0
00009992 01                         byte_8F1C:	dc.b 1
00009993 F00F 0050 F0               		dc.b $F0, $F, 0, $50, $F0
00009998                            		even
00009998                            ; ===========================================================================
00009998                            ; ---------------------------------------------------------------------------
00009998                            ; Object 28 - animals
00009998                            ; ---------------------------------------------------------------------------
00009998                            
00009998                            Obj28:					; XREF: Obj_Index
00009998 7000                       		moveq	#0,d0
0000999A 1028 0024                  		move.b	$24(a0),d0
0000999E 323B 0000                  		move.w	Obj28_Index(pc,d0.w),d1
000099A2 4EFB 1000                  		jmp	Obj28_Index(pc,d1.w)
000099A6                            ; ===========================================================================
000099A6 0000 0000                  Obj28_Index:	dc.w Obj28_Ending-Obj28_Index, loc_912A-Obj28_Index
000099AA 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_91C0-Obj28_Index
000099AE 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_9184-Obj28_Index
000099B2 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_91C0-Obj28_Index
000099B6 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_9240-Obj28_Index
000099BA 0000 0000                  		dc.w loc_9260-Obj28_Index, loc_9260-Obj28_Index
000099BE 0000 0000                  		dc.w loc_9280-Obj28_Index, loc_92BA-Obj28_Index
000099C2 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9332-Obj28_Index
000099C6 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9332-Obj28_Index
000099CA 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9370-Obj28_Index
000099CE 0000                       		dc.w loc_92D6-Obj28_Index
000099D0                            
000099D0 0005 0203 0603 0405 0401+  Obj28_VarIndex:	dc.b 0,	5, 2, 3, 6, 3, 4, 5, 4,	1, 0, 1
000099DC                            
000099DC FE00 FC00                  Obj28_Variables:dc.w $FE00, $FC00
000099E0 0000 0000                  		dc.l Map_obj28
000099E4 FE00 FD00                  		dc.w $FE00, $FD00	; horizontal speed, vertical speed
000099E8 0000 0000                  		dc.l Map_obj28a		; mappings address
000099EC FE80 FD00                  		dc.w $FE80, $FD00
000099F0 0000 0000                  		dc.l Map_obj28
000099F4 FEC0 FE80                  		dc.w $FEC0, $FE80
000099F8 0000 0000                  		dc.l Map_obj28a
000099FC FE40 FD00                  		dc.w $FE40, $FD00
00009A00 0000 0000                  		dc.l Map_obj28b
00009A04 FD00 FC00                  		dc.w $FD00, $FC00
00009A08 0000 0000                  		dc.l Map_obj28a
00009A0C FD80 FC80                  		dc.w $FD80, $FC80
00009A10 0000 0000                  		dc.l Map_obj28b
00009A14                            
00009A14 FBC0 FC00 FBC0 FC00 FBC0+  Obj28_EndSpeed:	dc.w $FBC0, $FC00, $FBC0, $FC00, $FBC0,	$FC00, $FD00, $FC00
00009A24 FD00 FC00 FE80 FD00 FE80+  		dc.w $FD00, $FC00, $FE80, $FD00, $FE80,	$FD00, $FEC0, $FE80
00009A34 FE40 FD00 FE00 FD00 FD80+  		dc.w $FE40, $FD00, $FE00, $FD00, $FD80,	$FC80
00009A40                            
00009A40 0000 0000 0000 0000 0000+  Obj28_EndMap:	dc.l Map_obj28a, Map_obj28a, Map_obj28a, Map_obj28, Map_obj28
00009A54 0000 0000 0000 0000 0000+  		dc.l Map_obj28,	Map_obj28, Map_obj28a, Map_obj28b, Map_obj28a
00009A68 0000 0000                  		dc.l Map_obj28b
00009A6C                            
00009A6C 05A5 05A5 05A5 0553 0553+  Obj28_EndVram:	dc.w $5A5, $5A5, $5A5, $553, $553, $573, $573, $585, $593
00009A7E 0565 05B3                  		dc.w $565, $5B3
00009A82                            ; ===========================================================================
00009A82                            
00009A82                            Obj28_Ending:				; XREF: Obj28_Index
00009A82 4A28 0028                  		tst.b	$28(a0)		; did animal come from a destroyed enemy?
00009A86 6700 0000                  		beq.w	Obj28_FromEnemy	; if yes, branch
00009A8A 7000                       		moveq	#0,d0
00009A8C 1028 0028                  		move.b	$28(a0),d0	; move object type to d0
00009A90 D040                       		add.w	d0,d0		; multiply d0 by 2
00009A92 1140 0024                  		move.b	d0,$24(a0)	; move d0 to routine counter
00009A96 0440 0014                  		subi.w	#$14,d0
00009A9A 317B 00D0 0002             		move.w	Obj28_EndVram(pc,d0.w),2(a0)
00009AA0 D040                       		add.w	d0,d0
00009AA2 217B 009C 0004             		move.l	Obj28_EndMap(pc,d0.w),4(a0)
00009AA8 43FA FF6A                  		lea	Obj28_EndSpeed(pc),a1
00009AAC 3171 0000 0032             		move.w	(a1,d0.w),$32(a0) ; load horizontal speed
00009AB2 3171 0000 0010             		move.w	(a1,d0.w),$10(a0)
00009AB8 3171 0002 0034             		move.w	2(a1,d0.w),$34(a0) ; load vertical speed
00009ABE 3171 0002 0012             		move.w	2(a1,d0.w),$12(a0)
00009AC4 117C 000C 0016             		move.b	#$C,$16(a0)
00009ACA 117C 0004 0001             		move.b	#4,1(a0)
00009AD0 08E8 0000 0001             		bset	#0,1(a0)
00009AD6 117C 0006 0018             		move.b	#6,$18(a0)
00009ADC 117C 0008 0019             		move.b	#8,$19(a0)
00009AE2 117C 0007 001E             		move.b	#7,$1E(a0)
00009AE8 6000 0000                  		bra.w	DisplaySprite
00009AEC                            ; ===========================================================================
00009AEC                            
00009AEC                            Obj28_FromEnemy:			; XREF: Obj28_Ending
00009AEC 5428 0024                  		addq.b	#2,$24(a0)
00009AF0 6100 98C2                  		bsr.w	RandomNumber
00009AF4 0240 0001                  		andi.w	#1,d0
00009AF8 7200                       		moveq	#0,d1
00009AFA 1238 FE10                  		move.b	($FFFFFE10).w,d1
00009AFE D241                       		add.w	d1,d1
00009B00 D240                       		add.w	d0,d1
00009B02 43FA FECC                  		lea	Obj28_VarIndex(pc),a1
00009B06 1031 1000                  		move.b	(a1,d1.w),d0
00009B0A 1140 0030                  		move.b	d0,$30(a0)
00009B0E E748                       		lsl.w	#3,d0
00009B10 43FA FECA                  		lea	Obj28_Variables(pc),a1
00009B14 D2C0                       		adda.w	d0,a1
00009B16 3159 0032                  		move.w	(a1)+,$32(a0)	; load horizontal speed
00009B1A 3159 0034                  		move.w	(a1)+,$34(a0)	; load vertical	speed
00009B1E 2159 0004                  		move.l	(a1)+,4(a0)	; load mappings
00009B22 317C 0580 0002             		move.w	#$580,2(a0)	; VRAM setting for 1st animal
00009B28 0828 0000 0030             		btst	#0,$30(a0)	; is 1st animal	used?
00009B2E 6700                       		beq.s	loc_90C0	; if yes, branch
00009B30 317C 0592 0002             		move.w	#$592,2(a0)	; VRAM setting for 2nd animal
00009B36                            
00009B36                            loc_90C0:
00009B36 117C 000C 0016             		move.b	#$C,$16(a0)
00009B3C 117C 0004 0001             		move.b	#4,1(a0)
00009B42 08E8 0000 0001             		bset	#0,1(a0)
00009B48 117C 0006 0018             		move.b	#6,$18(a0)
00009B4E 117C 0008 0019             		move.b	#8,$19(a0)
00009B54 117C 0007 001E             		move.b	#7,$1E(a0)
00009B5A 117C 0002 001A             		move.b	#2,$1A(a0)
00009B60 317C FC00 0012             		move.w	#-$400,$12(a0)
00009B66 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00009B6A 6600                       		bne.s	loc_911C
00009B6C 6100 0000                  		bsr.w	SingleObjLoad
00009B70 6600                       		bne.s	Obj28_Display
00009B72 12BC 0029                  		move.b	#$29,0(a1)	; load points object
00009B76 3368 0008 0008             		move.w	8(a0),8(a1)
00009B7C 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009B82 3028 003E                  		move.w	$3E(a0),d0
00009B86 E248                       		lsr.w	#1,d0
00009B88 1340 001A                  		move.b	d0,$1A(a1)
00009B8C                            
00009B8C                            Obj28_Display:
00009B8C 6000 0000                  		bra.w	DisplaySprite
00009B90                            ; ===========================================================================
00009B90                            
00009B90                            loc_911C:
00009B90 117C 0012 0024             		move.b	#$12,$24(a0)
00009B96 4268 0010                  		clr.w	$10(a0)
00009B9A 6000 0000                  		bra.w	DisplaySprite
00009B9E                            ; ===========================================================================
00009B9E                            
00009B9E                            loc_912A:				; XREF: Obj28_Index
00009B9E 4A28 0001                  		tst.b	1(a0)
00009BA2 6A00 0000                  		bpl.w	DeleteObject
00009BA6 6100 0000                  		bsr.w	ObjectFall
00009BAA 4A68 0012                  		tst.w	$12(a0)
00009BAE 6B00                       		bmi.s	loc_9180
00009BB0 4EB9 0000 0000             		jsr	ObjHitFloor
00009BB6 4A41                       		tst.w	d1
00009BB8 6A00                       		bpl.s	loc_9180
00009BBA D368 000C                  		add.w	d1,$C(a0)
00009BBE 3168 0032 0010             		move.w	$32(a0),$10(a0)
00009BC4 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009BCA 117C 0001 001A             		move.b	#1,$1A(a0)
00009BD0 1028 0030                  		move.b	$30(a0),d0
00009BD4 D000                       		add.b	d0,d0
00009BD6 5800                       		addq.b	#4,d0
00009BD8 1140 0024                  		move.b	d0,$24(a0)
00009BDC 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00009BE0 6700                       		beq.s	loc_9180
00009BE2 0838 0004 FE0F             		btst	#4,($FFFFFE0F).w
00009BE8 6700                       		beq.s	loc_9180
00009BEA 4468 0010                  		neg.w	$10(a0)
00009BEE 0868 0000 0001             		bchg	#0,1(a0)
00009BF4                            
00009BF4                            loc_9180:
00009BF4 6000 0000                  		bra.w	DisplaySprite
00009BF8                            ; ===========================================================================
00009BF8                            
00009BF8                            loc_9184:				; XREF: Obj28_Index
00009BF8 6100 0000                  		bsr.w	ObjectFall
00009BFC 117C 0001 001A             		move.b	#1,$1A(a0)
00009C02 4A68 0012                  		tst.w	$12(a0)
00009C06 6B00                       		bmi.s	loc_91AE
00009C08 117C 0000 001A             		move.b	#0,$1A(a0)
00009C0E 4EB9 0000 0000             		jsr	ObjHitFloor
00009C14 4A41                       		tst.w	d1
00009C16 6A00                       		bpl.s	loc_91AE
00009C18 D368 000C                  		add.w	d1,$C(a0)
00009C1C 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009C22                            
00009C22                            loc_91AE:
00009C22 4A28 0028                  		tst.b	$28(a0)
00009C26 6600                       		bne.s	loc_9224
00009C28 4A28 0001                  		tst.b	1(a0)
00009C2C 6A00 0000                  		bpl.w	DeleteObject
00009C30 6000 0000                  		bra.w	DisplaySprite
00009C34                            ; ===========================================================================
00009C34                            
00009C34                            loc_91C0:				; XREF: Obj28_Index
00009C34 6100 0000                  		bsr.w	SpeedToPos
00009C38 0668 0018 0012             		addi.w	#$18,$12(a0)
00009C3E 4A68 0012                  		tst.w	$12(a0)
00009C42 6B00                       		bmi.s	loc_91FC
00009C44 4EB9 0000 0000             		jsr	ObjHitFloor
00009C4A 4A41                       		tst.w	d1
00009C4C 6A00                       		bpl.s	loc_91FC
00009C4E D368 000C                  		add.w	d1,$C(a0)
00009C52 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009C58 4A28 0028                  		tst.b	$28(a0)
00009C5C 6700                       		beq.s	loc_91FC
00009C5E 0C28 000A 0028             		cmpi.b	#$A,$28(a0)
00009C64 6700                       		beq.s	loc_91FC
00009C66 4468 0010                  		neg.w	$10(a0)
00009C6A 0868 0000 0001             		bchg	#0,1(a0)
00009C70                            
00009C70                            loc_91FC:
00009C70 5328 001E                  		subq.b	#1,$1E(a0)
00009C74 6A00                       		bpl.s	loc_9212
00009C76 117C 0001 001E             		move.b	#1,$1E(a0)
00009C7C 5228 001A                  		addq.b	#1,$1A(a0)
00009C80 0228 0001 001A             		andi.b	#1,$1A(a0)
00009C86                            
00009C86                            loc_9212:
00009C86 4A28 0028                  		tst.b	$28(a0)
00009C8A 6600                       		bne.s	loc_9224
00009C8C 4A28 0001                  		tst.b	1(a0)
00009C90 6A00 0000                  		bpl.w	DeleteObject
00009C94 6000 0000                  		bra.w	DisplaySprite
00009C98                            ; ===========================================================================
00009C98                            
00009C98                            loc_9224:				; XREF: Obj28_Index
00009C98 3028 0008                  		move.w	8(a0),d0
00009C9C 9078 D008                  		sub.w	($FFFFD008).w,d0
00009CA0 6500                       		bcs.s	loc_923C
00009CA2 0440 0180                  		subi.w	#$180,d0
00009CA6 6A00                       		bpl.s	loc_923C
00009CA8 4A28 0001                  		tst.b	1(a0)
00009CAC 6A00 0000                  		bpl.w	DeleteObject
00009CB0                            
00009CB0                            loc_923C:
00009CB0 6000 0000                  		bra.w	DisplaySprite
00009CB4                            ; ===========================================================================
00009CB4                            
00009CB4                            loc_9240:				; XREF: Obj28_Index
00009CB4 4A28 0001                  		tst.b	1(a0)
00009CB8 6A00 0000                  		bpl.w	DeleteObject
00009CBC 5368 0036                  		subq.w	#1,$36(a0)
00009CC0 6600 0000                  		bne.w	loc_925C
00009CC4 117C 0002 0024             		move.b	#2,$24(a0)
00009CCA 117C 0003 0018             		move.b	#3,$18(a0)
00009CD0                            
00009CD0                            loc_925C:
00009CD0 6000 0000                  		bra.w	DisplaySprite
00009CD4                            ; ===========================================================================
00009CD4                            
00009CD4                            loc_9260:				; XREF: Obj28_Index
00009CD4 6100 0000                  		bsr.w	sub_9404
00009CD8 6400                       		bcc.s	loc_927C
00009CDA 3168 0032 0010             		move.w	$32(a0),$10(a0)
00009CE0 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009CE6 117C 000E 0024             		move.b	#$E,$24(a0)
00009CEC 6000 FF46                  		bra.w	loc_91C0
00009CF0                            ; ===========================================================================
00009CF0                            
00009CF0                            loc_927C:
00009CF0 6000 FFA6                  		bra.w	loc_9224
00009CF4                            ; ===========================================================================
00009CF4                            
00009CF4                            loc_9280:				; XREF: Obj28_Index
00009CF4 6100 0000                  		bsr.w	sub_9404
00009CF8 6A00                       		bpl.s	loc_92B6
00009CFA 4268 0010                  		clr.w	$10(a0)
00009CFE 4268 0032                  		clr.w	$32(a0)
00009D02 6100 0000                  		bsr.w	SpeedToPos
00009D06 0668 0018 0012             		addi.w	#$18,$12(a0)
00009D0C 6100 0000                  		bsr.w	loc_93C4
00009D10 6100 0000                  		bsr.w	loc_93EC
00009D14 5328 001E                  		subq.b	#1,$1E(a0)
00009D18 6A00                       		bpl.s	loc_92B6
00009D1A 117C 0001 001E             		move.b	#1,$1E(a0)
00009D20 5228 001A                  		addq.b	#1,$1A(a0)
00009D24 0228 0001 001A             		andi.b	#1,$1A(a0)
00009D2A                            
00009D2A                            loc_92B6:
00009D2A 6000 FF6C                  		bra.w	loc_9224
00009D2E                            ; ===========================================================================
00009D2E                            
00009D2E                            loc_92BA:				; XREF: Obj28_Index
00009D2E 6100 0000                  		bsr.w	sub_9404
00009D32 6A00                       		bpl.s	loc_9310
00009D34 3168 0032 0010             		move.w	$32(a0),$10(a0)
00009D3A 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009D40 117C 0004 0024             		move.b	#4,$24(a0)
00009D46 6000 FEB0                  		bra.w	loc_9184
00009D4A                            ; ===========================================================================
00009D4A                            
00009D4A                            loc_92D6:				; XREF: Obj28_Index
00009D4A 6100 0000                  		bsr.w	ObjectFall
00009D4E 117C 0001 001A             		move.b	#1,$1A(a0)
00009D54 4A68 0012                  		tst.w	$12(a0)
00009D58 6B00                       		bmi.s	loc_9310
00009D5A 117C 0000 001A             		move.b	#0,$1A(a0)
00009D60 4EB9 0000 0000             		jsr	ObjHitFloor
00009D66 4A41                       		tst.w	d1
00009D68 6A00                       		bpl.s	loc_9310
00009D6A 4628 0029                  		not.b	$29(a0)
00009D6E 6600                       		bne.s	loc_9306
00009D70 4468 0010                  		neg.w	$10(a0)
00009D74 0868 0000 0001             		bchg	#0,1(a0)
00009D7A                            
00009D7A                            loc_9306:
00009D7A D368 000C                  		add.w	d1,$C(a0)
00009D7E 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009D84                            
00009D84                            loc_9310:
00009D84 6000 FF12                  		bra.w	loc_9224
00009D88                            ; ===========================================================================
00009D88                            
00009D88                            loc_9314:				; XREF: Obj28_Index
00009D88 6100 0000                  		bsr.w	sub_9404
00009D8C 6A00                       		bpl.s	loc_932E
00009D8E 4268 0010                  		clr.w	$10(a0)
00009D92 4268 0032                  		clr.w	$32(a0)
00009D96 6100 0000                  		bsr.w	ObjectFall
00009D9A 6100 0000                  		bsr.w	loc_93C4
00009D9E 6100 0000                  		bsr.w	loc_93EC
00009DA2                            
00009DA2                            loc_932E:
00009DA2 6000 FEF4                  		bra.w	loc_9224
00009DA6                            ; ===========================================================================
00009DA6                            
00009DA6                            loc_9332:				; XREF: Obj28_Index
00009DA6 6100 0000                  		bsr.w	sub_9404
00009DAA 6A00                       		bpl.s	loc_936C
00009DAC 6100 0000                  		bsr.w	ObjectFall
00009DB0 117C 0001 001A             		move.b	#1,$1A(a0)
00009DB6 4A68 0012                  		tst.w	$12(a0)
00009DBA 6B00                       		bmi.s	loc_936C
00009DBC 117C 0000 001A             		move.b	#0,$1A(a0)
00009DC2 4EB9 0000 0000             		jsr	ObjHitFloor
00009DC8 4A41                       		tst.w	d1
00009DCA 6A00                       		bpl.s	loc_936C
00009DCC 4468 0010                  		neg.w	$10(a0)
00009DD0 0868 0000 0001             		bchg	#0,1(a0)
00009DD6 D368 000C                  		add.w	d1,$C(a0)
00009DDA 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009DE0                            
00009DE0                            loc_936C:
00009DE0 6000 FEB6                  		bra.w	loc_9224
00009DE4                            ; ===========================================================================
00009DE4                            
00009DE4                            loc_9370:				; XREF: Obj28_Index
00009DE4 6100 0000                  		bsr.w	sub_9404
00009DE8 6A00                       		bpl.s	loc_93C0
00009DEA 6100 0000                  		bsr.w	SpeedToPos
00009DEE 0668 0018 0012             		addi.w	#$18,$12(a0)
00009DF4 4A68 0012                  		tst.w	$12(a0)
00009DF8 6B00                       		bmi.s	loc_93AA
00009DFA 4EB9 0000 0000             		jsr	ObjHitFloor
00009E00 4A41                       		tst.w	d1
00009E02 6A00                       		bpl.s	loc_93AA
00009E04 4628 0029                  		not.b	$29(a0)
00009E08 6600                       		bne.s	loc_93A0
00009E0A 4468 0010                  		neg.w	$10(a0)
00009E0E 0868 0000 0001             		bchg	#0,1(a0)
00009E14                            
00009E14                            loc_93A0:
00009E14 D368 000C                  		add.w	d1,$C(a0)
00009E18 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009E1E                            
00009E1E                            loc_93AA:
00009E1E 5328 001E                  		subq.b	#1,$1E(a0)
00009E22 6A00                       		bpl.s	loc_93C0
00009E24 117C 0001 001E             		move.b	#1,$1E(a0)
00009E2A 5228 001A                  		addq.b	#1,$1A(a0)
00009E2E 0228 0001 001A             		andi.b	#1,$1A(a0)
00009E34                            
00009E34                            loc_93C0:
00009E34 6000 FE62                  		bra.w	loc_9224
00009E38                            ; ===========================================================================
00009E38                            
00009E38                            loc_93C4:
00009E38 117C 0001 001A             		move.b	#1,$1A(a0)
00009E3E 4A68 0012                  		tst.w	$12(a0)
00009E42 6B00                       		bmi.s	locret_93EA
00009E44 117C 0000 001A             		move.b	#0,$1A(a0)
00009E4A 4EB9 0000 0000             		jsr	ObjHitFloor
00009E50 4A41                       		tst.w	d1
00009E52 6A00                       		bpl.s	locret_93EA
00009E54 D368 000C                  		add.w	d1,$C(a0)
00009E58 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009E5E                            
00009E5E                            locret_93EA:
00009E5E 4E75                       		rts	
00009E60                            ; ===========================================================================
00009E60                            
00009E60                            loc_93EC:
00009E60 08E8 0000 0001             		bset	#0,1(a0)
00009E66 3028 0008                  		move.w	8(a0),d0
00009E6A 9078 D008                  		sub.w	($FFFFD008).w,d0
00009E6E 6400                       		bcc.s	locret_9402
00009E70 08A8 0000 0001             		bclr	#0,1(a0)
00009E76                            
00009E76                            locret_9402:
00009E76 4E75                       		rts	
00009E78                            
00009E78                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009E78                            
00009E78                            
00009E78                            sub_9404:
00009E78 3038 D008                  		move.w	($FFFFD008).w,d0
00009E7C 9068 0008                  		sub.w	8(a0),d0
00009E80 0440 00B8                  		subi.w	#$B8,d0
00009E84 4E75                       		rts	
00009E86                            ; End of function sub_9404
00009E86                            
00009E86                            ; ===========================================================================
00009E86                            ; ---------------------------------------------------------------------------
00009E86                            ; Object 29 - points that appear when you destroy something
00009E86                            ; ---------------------------------------------------------------------------
00009E86                            
00009E86                            Obj29:					; XREF: Obj_Index
00009E86 7000                       		moveq	#0,d0
00009E88 1028 0024                  		move.b	$24(a0),d0
00009E8C 323B 0000                  		move.w	Obj29_Index(pc,d0.w),d1
00009E90 4EBB 1000                  		jsr	Obj29_Index(pc,d1.w)
00009E94 6000 0000                  		bra.w	DisplaySprite
00009E98                            ; ===========================================================================
00009E98 0000                       Obj29_Index:	dc.w Obj29_Main-Obj29_Index
00009E9A 0000                       		dc.w Obj29_Slower-Obj29_Index
00009E9C                            ; ===========================================================================
00009E9C                            
00009E9C                            Obj29_Main:				; XREF: Obj29_Index
00009E9C 5428 0024                  		addq.b	#2,$24(a0)
00009EA0 217C 0000 0000 0004        		move.l	#Map_obj29,4(a0)
00009EA8 317C 2797 0002             		move.w	#$2797,2(a0)
00009EAE 117C 0004 0001             		move.b	#4,1(a0)
00009EB4 117C 0001 0018             		move.b	#1,$18(a0)
00009EBA 117C 0008 0019             		move.b	#8,$19(a0)
00009EC0 317C FD00 0012             		move.w	#-$300,$12(a0)	; move object upwards
00009EC6                            
00009EC6                            Obj29_Slower:				; XREF: Obj29_Index
00009EC6 4A68 0012                  		tst.w	$12(a0)		; is object moving?
00009ECA 6A00 0000                  		bpl.w	DeleteObject	; if not, branch
00009ECE 6100 0000                  		bsr.w	SpeedToPos
00009ED2 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce object	speed
00009ED8 4E75                       		rts	
00009EDA                            ; ===========================================================================
00009EDA                            ; ---------------------------------------------------------------------------
00009EDA                            ; Sprite mappings - animals
00009EDA                            ; ---------------------------------------------------------------------------
00009EDA                            Map_obj28:
00009EDA                            	include "_maps\obj28.asm"
00009EDA                            ; ---------------------------------------------------------------------------
00009EDA                            ; Sprite mappings - animals
00009EDA                            ; ---------------------------------------------------------------------------
00009EDA 0000                       		dc.w byte_9472-Map_obj28
00009EDC 0000                       		dc.w byte_9478-Map_obj28
00009EDE 0000                       		dc.w byte_946C-Map_obj28
00009EE0 01                         byte_946C:	dc.b 1
00009EE1 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
00009EE6 01                         byte_9472:	dc.b 1
00009EE7 F406 0006 F8               		dc.b $F4, 6, 0,	6, $F8
00009EEC 01                         byte_9478:	dc.b 1
00009EED F406 000C F8               		dc.b $F4, 6, 0,	$C, $F8
00009EF2                            		even
00009EF2                            		even
00009EF2                            
00009EF2                            Map_obj28a:
00009EF2                            	include "_maps\obj28a.asm"
00009EF2                            ; ---------------------------------------------------------------------------
00009EF2                            ; Sprite mappings - animals
00009EF2                            ; ---------------------------------------------------------------------------
00009EF2 0000                       		dc.w byte_948A-Map_obj28a
00009EF4 0000                       		dc.w byte_9490-Map_obj28a
00009EF6 0000                       		dc.w byte_9484-Map_obj28a
00009EF8 01                         byte_9484:	dc.b 1
00009EF9 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
00009EFE 01                         byte_948A:	dc.b 1
00009EFF FC05 0006 F8               		dc.b $FC, 5, 0,	6, $F8
00009F04 01                         byte_9490:	dc.b 1
00009F05 FC05 000A F8               		dc.b $FC, 5, 0,	$A, $F8
00009F0A                            		even
00009F0A                            		even
00009F0A                            
00009F0A                            Map_obj28b:
00009F0A                            	include "_maps\obj28b.asm"
00009F0A                            ; ---------------------------------------------------------------------------
00009F0A                            ; Sprite mappings - animals
00009F0A                            ; ---------------------------------------------------------------------------
00009F0A 0000                       		dc.w byte_94A2-Map_obj28b
00009F0C 0000                       		dc.w byte_94A8-Map_obj28b
00009F0E 0000                       		dc.w byte_949C-Map_obj28b
00009F10 01                         byte_949C:	dc.b 1
00009F11 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
00009F16 01                         byte_94A2:	dc.b 1
00009F17 FC09 0006 F4               		dc.b $FC, 9, 0,	6, $F4
00009F1C 01                         byte_94A8:	dc.b 1
00009F1D FC09 000C F4               		dc.b $FC, 9, 0,	$C, $F4
00009F22                            		even
00009F22                            		even
00009F22                            
00009F22                            ; ---------------------------------------------------------------------------
00009F22                            ; Sprite mappings - points that	appear when you	destroy	something
00009F22                            ; ---------------------------------------------------------------------------
00009F22                            Map_obj29:
00009F22                            	include "_maps\obj29.asm"
00009F22                            ; ---------------------------------------------------------------------------
00009F22                            ; Sprite mappings - points that	appear when you	destroy	something
00009F22                            ; ---------------------------------------------------------------------------
00009F22 0000 0000                  		dc.w byte_94BC-Map_obj29, byte_94C2-Map_obj29
00009F26 0000 0000                  		dc.w byte_94C8-Map_obj29, byte_94CE-Map_obj29
00009F2A 0000 0000                  		dc.w byte_94D4-Map_obj29, byte_94DA-Map_obj29
00009F2E 0000                       		dc.w byte_94E5-Map_obj29
00009F30 01                         byte_94BC:	dc.b 1
00009F31 FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8	; 100 points
00009F36 01                         byte_94C2:	dc.b 1
00009F37 FC04 0002 F8               		dc.b $FC, 4, 0,	2, $F8	; 200 points
00009F3C 01                         byte_94C8:	dc.b 1
00009F3D FC04 0004 F8               		dc.b $FC, 4, 0,	4, $F8	; 500 points
00009F42 01                         byte_94CE:	dc.b 1
00009F43 FC08 0006 F8               		dc.b $FC, 8, 0,	6, $F8	; 1000 points
00009F48 01                         byte_94D4:	dc.b 1
00009F49 FC00 0006 FC               		dc.b $FC, 0, 0,	6, $FC	; 10 points
00009F4E 02                         byte_94DA:	dc.b 2
00009F4F FC08 0006 F4               		dc.b $FC, 8, 0,	6, $F4	; 10,000 points
00009F54 FC04 0007 01               		dc.b $FC, 4, 0,	7, 1
00009F59 02                         byte_94E5:	dc.b 2
00009F5A FC08 0006 F4               		dc.b $FC, 8, 0,	6, $F4	; 100,000 points
00009F5F FC04 0007 06               		dc.b $FC, 4, 0,	7, 6
00009F64                            		even
00009F64                            		even
00009F64                            
00009F64                            ; ===========================================================================
00009F64                            ; ---------------------------------------------------------------------------
00009F64                            ; Object 1F - Crabmeat enemy (GHZ, SYZ)
00009F64                            ; ---------------------------------------------------------------------------
00009F64                            
00009F64                            Obj1F:					; XREF: Obj_Index
00009F64 7000                       		moveq	#0,d0
00009F66 1028 0024                  		move.b	$24(a0),d0
00009F6A 323B 0000                  		move.w	Obj1F_Index(pc,d0.w),d1
00009F6E 4EFB 1000                  		jmp	Obj1F_Index(pc,d1.w)
00009F72                            ; ===========================================================================
00009F72 0000                       Obj1F_Index:	dc.w Obj1F_Main-Obj1F_Index
00009F74 0000                       		dc.w Obj1F_Action-Obj1F_Index
00009F76 0000                       		dc.w Obj1F_Delete-Obj1F_Index
00009F78 0000                       		dc.w Obj1F_BallMain-Obj1F_Index
00009F7A 0000                       		dc.w Obj1F_BallMove-Obj1F_Index
00009F7C                            ; ===========================================================================
00009F7C                            
00009F7C                            Obj1F_Main:				; XREF: Obj1F_Index
00009F7C 117C 0010 0016             		move.b	#$10,$16(a0)
00009F82 117C 0008 0017             		move.b	#8,$17(a0)
00009F88 217C 0000 0000 0004        		move.l	#Map_obj1F,4(a0)
00009F90 317C 0400 0002             		move.w	#$400,2(a0)
00009F96 117C 0004 0001             		move.b	#4,1(a0)
00009F9C 117C 0003 0018             		move.b	#3,$18(a0)
00009FA2 117C 0006 0020             		move.b	#6,$20(a0)
00009FA8 117C 0015 0019             		move.b	#$15,$19(a0)
00009FAE 6100 0000                  		bsr.w	ObjectFall
00009FB2 4EB9 0000 0000             		jsr	ObjHitFloor
00009FB8 4A41                       		tst.w	d1
00009FBA 6A00                       		bpl.s	locret_955A
00009FBC D368 000C                  		add.w	d1,$C(a0)
00009FC0 1143 0026                  		move.b	d3,$26(a0)
00009FC4 317C 0000 0012             		move.w	#0,$12(a0)
00009FCA 5428 0024                  		addq.b	#2,$24(a0)
00009FCE                            
00009FCE                            locret_955A:
00009FCE 4E75                       		rts	
00009FD0                            ; ===========================================================================
00009FD0                            
00009FD0                            Obj1F_Action:				; XREF: Obj1F_Index
00009FD0 7000                       		moveq	#0,d0
00009FD2 1028 0025                  		move.b	$25(a0),d0
00009FD6 323B 0000                  		move.w	Obj1F_Index2(pc,d0.w),d1
00009FDA 4EBB 1000                  		jsr	Obj1F_Index2(pc,d1.w)
00009FDE 43F9 0000 0000             		lea	(Ani_obj1F).l,a1
00009FE4 6100 0000                  		bsr.w	AnimateSprite
00009FE8 6000 0000                  		bra.w	MarkObjGone
00009FEC                            ; ===========================================================================
00009FEC 0000                       Obj1F_Index2:	dc.w Obj1F_WaitFire-Obj1F_Index2
00009FEE 0000                       		dc.w Obj1F_WalkOnFloor-Obj1F_Index2
00009FF0                            ; ===========================================================================
00009FF0                            
00009FF0                            Obj1F_WaitFire:				; XREF: Obj1F_Index2
00009FF0 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00009FF4 6A00                       		bpl.s	locret_95B6
00009FF6 4A28 0001                  		tst.b	1(a0)
00009FFA 6A00                       		bpl.s	Obj1F_Move
00009FFC 0868 0001 0032             		bchg	#1,$32(a0)
0000A002 6600                       		bne.s	Obj1F_MakeFire
0000A004                            
0000A004                            Obj1F_Move:
0000A004 5428 0025                  		addq.b	#2,$25(a0)
0000A008 317C 007F 0030             		move.w	#127,$30(a0)	; set time delay to approx 2 seconds
0000A00E 317C 0080 0010             		move.w	#$80,$10(a0)	; move Crabmeat	to the right
0000A014 6100 0000                  		bsr.w	Obj1F_SetAni
0000A018 5600                       		addq.b	#3,d0
0000A01A 1140 001C                  		move.b	d0,$1C(a0)
0000A01E 0868 0000 0022             		bchg	#0,$22(a0)
0000A024 6600                       		bne.s	locret_95B6
0000A026 4468 0010                  		neg.w	$10(a0)		; change direction
0000A02A                            
0000A02A                            locret_95B6:
0000A02A 4E75                       		rts	
0000A02C                            ; ===========================================================================
0000A02C                            
0000A02C                            Obj1F_MakeFire:				; XREF: Obj1F_WaitFire
0000A02C 317C 003B 0030             		move.w	#$3B,$30(a0)
0000A032 117C 0006 001C             		move.b	#6,$1C(a0)	; use firing animation
0000A038 6100 0000                  		bsr.w	SingleObjLoad
0000A03C 6600                       		bne.s	Obj1F_MakeFire2
0000A03E 12BC 001F                  		move.b	#$1F,0(a1)	; load left fireball
0000A042 137C 0006 0024             		move.b	#6,$24(a1)
0000A048 3368 0008 0008             		move.w	8(a0),8(a1)
0000A04E 0469 0010 0008             		subi.w	#$10,8(a1)
0000A054 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A05A 337C FF00 0010             		move.w	#-$100,$10(a1)
0000A060                            
0000A060                            Obj1F_MakeFire2:
0000A060 6100 0000                  		bsr.w	SingleObjLoad
0000A064 6600                       		bne.s	locret_9618
0000A066 12BC 001F                  		move.b	#$1F,0(a1)	; load right fireball
0000A06A 137C 0006 0024             		move.b	#6,$24(a1)
0000A070 3368 0008 0008             		move.w	8(a0),8(a1)
0000A076 0669 0010 0008             		addi.w	#$10,8(a1)
0000A07C 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A082 337C 0100 0010             		move.w	#$100,$10(a1)
0000A088                            
0000A088                            locret_9618:
0000A088 4E75                       		rts	
0000A08A                            ; ===========================================================================
0000A08A                            
0000A08A                            Obj1F_WalkOnFloor:			; XREF: Obj1F_Index2
0000A08A 5368 0030                  		subq.w	#1,$30(a0)
0000A08E 6B00                       		bmi.s	loc_966E
0000A090 6100 0000                  		bsr.w	SpeedToPos
0000A094 0868 0000 0032             		bchg	#0,$32(a0)
0000A09A 6600                       		bne.s	loc_9654
0000A09C 3628 0008                  		move.w	8(a0),d3
0000A0A0 0643 0010                  		addi.w	#$10,d3
0000A0A4 0828 0000 0022             		btst	#0,$22(a0)
0000A0AA 6700                       		beq.s	loc_9640
0000A0AC 0443 0020                  		subi.w	#$20,d3
0000A0B0                            
0000A0B0                            loc_9640:
0000A0B0 4EB9 0000 0000             		jsr	ObjHitFloor2
0000A0B6 0C41 FFF8                  		cmpi.w	#-8,d1
0000A0BA 6D00                       		blt.s	loc_966E
0000A0BC 0C41 000C                  		cmpi.w	#$C,d1
0000A0C0 6C00                       		bge.s	loc_966E
0000A0C2 4E75                       		rts	
0000A0C4                            ; ===========================================================================
0000A0C4                            
0000A0C4                            loc_9654:				; XREF: Obj1F_WalkOnFloor
0000A0C4 4EB9 0000 0000             		jsr	ObjHitFloor
0000A0CA D368 000C                  		add.w	d1,$C(a0)
0000A0CE 1143 0026                  		move.b	d3,$26(a0)
0000A0D2 6100 0000                  		bsr.w	Obj1F_SetAni
0000A0D6 5600                       		addq.b	#3,d0
0000A0D8 1140 001C                  		move.b	d0,$1C(a0)
0000A0DC 4E75                       		rts	
0000A0DE                            ; ===========================================================================
0000A0DE                            
0000A0DE                            loc_966E:				; XREF: Obj1F_WalkOnFloor
0000A0DE 5528 0025                  		subq.b	#2,$25(a0)
0000A0E2 317C 003B 0030             		move.w	#59,$30(a0)
0000A0E8 317C 0000 0010             		move.w	#0,$10(a0)
0000A0EE 6100 0000                  		bsr.w	Obj1F_SetAni
0000A0F2 1140 001C                  		move.b	d0,$1C(a0)
0000A0F6 4E75                       		rts	
0000A0F8                            ; ---------------------------------------------------------------------------
0000A0F8                            ; Subroutine to	set the	correct	animation for a	Crabmeat
0000A0F8                            ; ---------------------------------------------------------------------------
0000A0F8                            
0000A0F8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A0F8                            
0000A0F8                            
0000A0F8                            Obj1F_SetAni:				; XREF: loc_966E
0000A0F8 7000                       		moveq	#0,d0
0000A0FA 1628 0026                  		move.b	$26(a0),d3
0000A0FE 6B00                       		bmi.s	loc_96A4
0000A100 0C03 0006                  		cmpi.b	#6,d3
0000A104 6500                       		bcs.s	locret_96A2
0000A106 7001                       		moveq	#1,d0
0000A108 0828 0000 0022             		btst	#0,$22(a0)
0000A10E 6600                       		bne.s	locret_96A2
0000A110 7002                       		moveq	#2,d0
0000A112                            
0000A112                            locret_96A2:
0000A112 4E75                       		rts	
0000A114                            ; ===========================================================================
0000A114                            
0000A114                            loc_96A4:				; XREF: Obj1F_SetAni
0000A114 0C03 00FA                  		cmpi.b	#-6,d3
0000A118 6200                       		bhi.s	locret_96B6
0000A11A 7002                       		moveq	#2,d0
0000A11C 0828 0000 0022             		btst	#0,$22(a0)
0000A122 6600                       		bne.s	locret_96B6
0000A124 7001                       		moveq	#1,d0
0000A126                            
0000A126                            locret_96B6:
0000A126 4E75                       		rts	
0000A128                            ; End of function Obj1F_SetAni
0000A128                            
0000A128                            ; ===========================================================================
0000A128                            
0000A128                            Obj1F_Delete:				; XREF: Obj1F_Index
0000A128 6100 0000                  		bsr.w	DeleteObject
0000A12C 4E75                       		rts	
0000A12E                            ; ===========================================================================
0000A12E                            ; ---------------------------------------------------------------------------
0000A12E                            ; Sub-object - missile that the	Crabmeat throws
0000A12E                            ; ---------------------------------------------------------------------------
0000A12E                            
0000A12E                            Obj1F_BallMain:				; XREF: Obj1F_Index
0000A12E 5428 0024                  		addq.b	#2,$24(a0)
0000A132 217C 0000 0000 0004        		move.l	#Map_obj1F,4(a0)
0000A13A 317C 0400 0002             		move.w	#$400,2(a0)
0000A140 117C 0004 0001             		move.b	#4,1(a0)
0000A146 117C 0003 0018             		move.b	#3,$18(a0)
0000A14C 117C 0087 0020             		move.b	#$87,$20(a0)
0000A152 117C 0008 0019             		move.b	#8,$19(a0)
0000A158 317C FC00 0012             		move.w	#-$400,$12(a0)
0000A15E 117C 0007 001C             		move.b	#7,$1C(a0)
0000A164                            
0000A164                            Obj1F_BallMove:				; XREF: Obj1F_Index
0000A164 43F9 0000 0000             		lea	(Ani_obj1F).l,a1
0000A16A 6100 0000                  		bsr.w	AnimateSprite
0000A16E 6100 0000                  		bsr.w	ObjectFall
0000A172 6100 0000                  		bsr.w	DisplaySprite
0000A176 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000A17A 0640 00E0                  		addi.w	#$E0,d0
0000A17E B068 000C                  		cmp.w	$C(a0),d0	; has object moved below the level boundary?
0000A182 6500                       		bcs.s	Obj1F_Delete2	; if yes, branch
0000A184 4E75                       		rts	
0000A186                            ; ===========================================================================
0000A186                            
0000A186                            Obj1F_Delete2:
0000A186 6000 0000                  		bra.w	DeleteObject
0000A18A                            ; ===========================================================================
0000A18A                            Ani_obj1F:
0000A18A                            	include "_anim\obj1F.asm"
0000A18A                            ; ---------------------------------------------------------------------------
0000A18A                            ; Animation script - Crabmeat enemy
0000A18A                            ; ---------------------------------------------------------------------------
0000A18A 0000 0000 0000             		dc.w byte_972A-Ani_obj1F, byte_972E-Ani_obj1F, byte_9732-Ani_obj1F
0000A190 0000 0000 0000             		dc.w byte_9736-Ani_obj1F, byte_973C-Ani_obj1F, byte_9742-Ani_obj1F
0000A196 0000 0000                  		dc.w byte_9748-Ani_obj1F, byte_974C-Ani_obj1F
0000A19A 0F00 FF00                  byte_972A:	dc.b $F, 0, $FF, 0
0000A19E 0F02 FF00                  byte_972E:	dc.b $F, 2, $FF, 0
0000A1A2 0F22 FF00                  byte_9732:	dc.b $F, $22, $FF, 0
0000A1A6 0F01 2100 FF00             byte_9736:	dc.b $F, 1, $21, 0, $FF, 0
0000A1AC 0F21 0302 FF00             byte_973C:	dc.b $F, $21, 3, 2, $FF, 0
0000A1B2 0F01 2322 FF00             byte_9742:	dc.b $F, 1, $23, $22, $FF, 0
0000A1B8 0F04 FF00                  byte_9748:	dc.b $F, 4, $FF, 0
0000A1BC 0105 06FF                  byte_974C:	dc.b 1,	5, 6, $FF
0000A1C0                            		even
0000A1C0                            		even
0000A1C0                            
0000A1C0                            ; ---------------------------------------------------------------------------
0000A1C0                            ; Sprite mappings - Crabmeat enemy (GHZ, SYZ)
0000A1C0                            ; ---------------------------------------------------------------------------
0000A1C0                            Map_obj1F:
0000A1C0                            	include "_maps\obj1F.asm"
0000A1C0                            ; ---------------------------------------------------------------------------
0000A1C0                            ; Sprite mappings - Crabmeat enemy (GHZ, SYZ)
0000A1C0                            ; ---------------------------------------------------------------------------
0000A1C0 0000 0000                  		dc.w byte_975E-Map_obj1F, byte_9773-Map_obj1F
0000A1C4 0000 0000                  		dc.w byte_9788-Map_obj1F, byte_979D-Map_obj1F
0000A1C8 0000 0000                  		dc.w byte_97B2-Map_obj1F, byte_97D1-Map_obj1F
0000A1CC 0000                       		dc.w byte_97D7-Map_obj1F
0000A1CE 04                         byte_975E:	dc.b 4
0000A1CF F009 0000 E8               		dc.b $F0, 9, 0,	0, $E8
0000A1D4 F009 0800 00               		dc.b $F0, 9, 8,	0, 0
0000A1D9 0005 0006 F0               		dc.b 0,	5, 0, 6, $F0
0000A1DE 0005 0806 00               		dc.b 0,	5, 8, 6, 0
0000A1E3 04                         byte_9773:	dc.b 4
0000A1E4 F009 000A E8               		dc.b $F0, 9, 0,	$A, $E8
0000A1E9 F009 0010 00               		dc.b $F0, 9, 0,	$10, 0
0000A1EE 0005 0016 F0               		dc.b 0,	5, 0, $16, $F0
0000A1F3 0009 001A 00               		dc.b 0,	9, 0, $1A, 0
0000A1F8 04                         byte_9788:	dc.b 4
0000A1F9 EC09 0000 E8               		dc.b $EC, 9, 0,	0, $E8
0000A1FE EC09 0800 00               		dc.b $EC, 9, 8,	0, 0
0000A203 FC05 0806 00               		dc.b $FC, 5, 8,	6, 0
0000A208 FC06 0020 F0               		dc.b $FC, 6, 0,	$20, $F0
0000A20D 04                         byte_979D:	dc.b 4
0000A20E EC09 000A E8               		dc.b $EC, 9, 0,	$A, $E8
0000A213 EC09 0010 00               		dc.b $EC, 9, 0,	$10, 0
0000A218 FC09 0026 00               		dc.b $FC, 9, 0,	$26, 0
0000A21D FC06 002C F0               		dc.b $FC, 6, 0,	$2C, $F0
0000A222 06                         byte_97B2:	dc.b 6
0000A223 F004 0032 F0               		dc.b $F0, 4, 0,	$32, $F0
0000A228 F004 0832 00               		dc.b $F0, 4, 8,	$32, 0
0000A22D F809 0034 E8               		dc.b $F8, 9, 0,	$34, $E8
0000A232 F809 0834 00               		dc.b $F8, 9, 8,	$34, 0
0000A237 0804 003A F0               		dc.b 8,	4, 0, $3A, $F0
0000A23C 0804 083A 00               		dc.b 8,	4, 8, $3A, 0
0000A241 01                         byte_97D1:	dc.b 1
0000A242 F805 003C F8               		dc.b $F8, 5, 0,	$3C, $F8
0000A247 01                         byte_97D7:	dc.b 1
0000A248 F805 0040 F8               		dc.b $F8, 5, 0,	$40, $F8
0000A24E 00                         		even
0000A24E 00                         		even
0000A24E                            
0000A24E                            ; ===========================================================================
0000A24E                            ; ---------------------------------------------------------------------------
0000A24E                            ; Object 22 - Buzz Bomber enemy	(GHZ, MZ, SYZ)
0000A24E                            ; ---------------------------------------------------------------------------
0000A24E                            
0000A24E                            Obj22:					; XREF: Obj_Index
0000A24E 7000                       		moveq	#0,d0
0000A250 1028 0024                  		move.b	$24(a0),d0
0000A254 323B 0000                  		move.w	Obj22_Index(pc,d0.w),d1
0000A258 4EFB 1000                  		jmp	Obj22_Index(pc,d1.w)
0000A25C                            ; ===========================================================================
0000A25C 0000                       Obj22_Index:	dc.w Obj22_Main-Obj22_Index
0000A25E 0000                       		dc.w Obj22_Action-Obj22_Index
0000A260 0000                       		dc.w Obj22_Delete-Obj22_Index
0000A262                            ; ===========================================================================
0000A262                            
0000A262                            Obj22_Main:				; XREF: Obj22_Index
0000A262 5428 0024                  		addq.b	#2,$24(a0)
0000A266 217C 0000 0000 0004        		move.l	#Map_obj22,4(a0)
0000A26E 317C 0444 0002             		move.w	#$444,2(a0)
0000A274 117C 0004 0001             		move.b	#4,1(a0)
0000A27A 117C 0003 0018             		move.b	#3,$18(a0)
0000A280 117C 0008 0020             		move.b	#8,$20(a0)
0000A286 117C 0018 0019             		move.b	#$18,$19(a0)
0000A28C                            
0000A28C                            Obj22_Action:				; XREF: Obj22_Index
0000A28C 7000                       		moveq	#0,d0
0000A28E 1028 0025                  		move.b	$25(a0),d0
0000A292 323B 0000                  		move.w	Obj22_Index2(pc,d0.w),d1
0000A296 4EBB 1000                  		jsr	Obj22_Index2(pc,d1.w)
0000A29A 43F9 0000 0000             		lea	(Ani_obj22).l,a1
0000A2A0 6100 0000                  		bsr.w	AnimateSprite
0000A2A4 6000 0000                  		bra.w	MarkObjGone
0000A2A8                            ; ===========================================================================
0000A2A8 0000                       Obj22_Index2:	dc.w Obj22_Move-Obj22_Index2
0000A2AA 0000                       		dc.w Obj22_ChkNrSonic-Obj22_Index2
0000A2AC                            ; ===========================================================================
0000A2AC                            
0000A2AC                            Obj22_Move:				; XREF: Obj22_Index2
0000A2AC 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
0000A2B0 6A00                       		bpl.s	locret_986C	; if time remains, branch
0000A2B2 0828 0001 0034             		btst	#1,$34(a0)	; is Buzz Bomber near Sonic?
0000A2B8 6600                       		bne.s	Obj22_Fire	; if yes, branch
0000A2BA 5428 0025                  		addq.b	#2,$25(a0)
0000A2BE 317C 007F 0032             		move.w	#127,$32(a0)	; set time delay to just over 2	seconds
0000A2C4 317C 0400 0010             		move.w	#$400,$10(a0)	; move Buzz Bomber to the right
0000A2CA 117C 0001 001C             		move.b	#1,$1C(a0)	; use "flying" animation
0000A2D0 0828 0000 0022             		btst	#0,$22(a0)	; is Buzz Bomber facing	left?
0000A2D6 6600                       		bne.s	locret_986C	; if not, branch
0000A2D8 4468 0010                  		neg.w	$10(a0)		; move Buzz Bomber to the left
0000A2DC                            
0000A2DC                            locret_986C:
0000A2DC 4E75                       		rts	
0000A2DE                            ; ===========================================================================
0000A2DE                            
0000A2DE                            Obj22_Fire:				; XREF: Obj22_Move
0000A2DE 6100 0000                  		bsr.w	SingleObjLoad
0000A2E2 6600                       		bne.s	locret_98D0
0000A2E4 12BC 0023                  		move.b	#$23,0(a1)	; load missile object
0000A2E8 3368 0008 0008             		move.w	8(a0),8(a1)
0000A2EE 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A2F4 0669 001C 000C             		addi.w	#$1C,$C(a1)
0000A2FA 337C 0200 0012             		move.w	#$200,$12(a1)	; move missile downwards
0000A300 337C 0200 0010             		move.w	#$200,$10(a1)	; move missile to the right
0000A306 303C 0018                  		move.w	#$18,d0
0000A30A 0828 0000 0022             		btst	#0,$22(a0)	; is Buzz Bomber facing	left?
0000A310 6600                       		bne.s	loc_98AA	; if not, branch
0000A312 4440                       		neg.w	d0
0000A314 4469 0010                  		neg.w	$10(a1)		; move missile to the left
0000A318                            
0000A318                            loc_98AA:
0000A318 D169 0008                  		add.w	d0,8(a1)
0000A31C 1368 0022 0022             		move.b	$22(a0),$22(a1)
0000A322 337C 000E 0032             		move.w	#$E,$32(a1)
0000A328 2348 003C                  		move.l	a0,$3C(a1)
0000A32C 117C 0001 0034             		move.b	#1,$34(a0)	; set to "already fired" to prevent refiring
0000A332 317C 003B 0032             		move.w	#$3B,$32(a0)
0000A338 117C 0002 001C             		move.b	#2,$1C(a0)	; use "firing" animation
0000A33E                            
0000A33E                            locret_98D0:
0000A33E 4E75                       		rts	
0000A340                            ; ===========================================================================
0000A340                            
0000A340                            Obj22_ChkNrSonic:			; XREF: Obj22_Index2
0000A340 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
0000A344 6B00                       		bmi.s	Obj22_ChgDir
0000A346 6100 0000                  		bsr.w	SpeedToPos
0000A34A 4A28 0034                  		tst.b	$34(a0)
0000A34E 6600                       		bne.s	locret_992A
0000A350 3038 D008                  		move.w	($FFFFD008).w,d0
0000A354 9068 0008                  		sub.w	8(a0),d0
0000A358 6A00                       		bpl.s	Obj22_SetNrSonic
0000A35A 4440                       		neg.w	d0
0000A35C                            
0000A35C                            Obj22_SetNrSonic:
0000A35C 0C40 0060                  		cmpi.w	#$60,d0		; is Buzz Bomber within	$60 pixels of Sonic?
0000A360 6400                       		bcc.s	locret_992A	; if not, branch
0000A362 4A28 0001                  		tst.b	1(a0)
0000A366 6A00                       		bpl.s	locret_992A
0000A368 117C 0002 0034             		move.b	#2,$34(a0)	; set Buzz Bomber to "near Sonic"
0000A36E 317C 001D 0032             		move.w	#29,$32(a0)	; set time delay to half a second
0000A374 6000                       		bra.s	Obj22_Stop
0000A376                            ; ===========================================================================
0000A376                            
0000A376                            Obj22_ChgDir:				; XREF: Obj22_ChkNrSonic
0000A376 117C 0000 0034             		move.b	#0,$34(a0)	; set Buzz Bomber to "normal"
0000A37C 0868 0000 0022             		bchg	#0,$22(a0)	; change direction
0000A382 317C 003B 0032             		move.w	#59,$32(a0)
0000A388                            
0000A388                            Obj22_Stop:				; XREF: Obj22_SetNrSonic
0000A388 5528 0025                  		subq.b	#2,$25(a0)	; run "Obj22_Fire" routine
0000A38C 317C 0000 0010             		move.w	#0,$10(a0)	; stop Buzz Bomber moving
0000A392 117C 0000 001C             		move.b	#0,$1C(a0)	; use "hovering" animation
0000A398                            
0000A398                            locret_992A:
0000A398 4E75                       		rts	
0000A39A                            ; ===========================================================================
0000A39A                            
0000A39A                            Obj22_Delete:				; XREF: Obj22_Index
0000A39A 6100 0000                  		bsr.w	DeleteObject
0000A39E 4E75                       		rts	
0000A3A0                            ; ===========================================================================
0000A3A0                            ; ---------------------------------------------------------------------------
0000A3A0                            ; Object 23 - missile that Buzz	Bomber throws
0000A3A0                            ; ---------------------------------------------------------------------------
0000A3A0                            
0000A3A0                            Obj23:					; XREF: Obj_Index
0000A3A0 7000                       		moveq	#0,d0
0000A3A2 1028 0024                  		move.b	$24(a0),d0
0000A3A6 323B 0000                  		move.w	Obj23_Index(pc,d0.w),d1
0000A3AA 4EFB 1000                  		jmp	Obj23_Index(pc,d1.w)
0000A3AE                            ; ===========================================================================
0000A3AE 0000                       Obj23_Index:	dc.w Obj23_Main-Obj23_Index
0000A3B0 0000                       		dc.w Obj23_Animate-Obj23_Index
0000A3B2 0000                       		dc.w Obj23_FromBuzz-Obj23_Index
0000A3B4 0000                       		dc.w Obj23_Delete-Obj23_Index
0000A3B6 0000                       		dc.w Obj23_FromNewt-Obj23_Index
0000A3B8                            ; ===========================================================================
0000A3B8                            
0000A3B8                            Obj23_Main:				; XREF: Obj23_Index
0000A3B8 5368 0032                  		subq.w	#1,$32(a0)
0000A3BC 6A00                       		bpl.s	Obj23_ChkCancel
0000A3BE 5428 0024                  		addq.b	#2,$24(a0)
0000A3C2 217C 0000 0000 0004        		move.l	#Map_obj23,4(a0)
0000A3CA 317C 2444 0002             		move.w	#$2444,2(a0)
0000A3D0 117C 0004 0001             		move.b	#4,1(a0)
0000A3D6 117C 0003 0018             		move.b	#3,$18(a0)
0000A3DC 117C 0008 0019             		move.b	#8,$19(a0)
0000A3E2 0228 0003 0022             		andi.b	#3,$22(a0)
0000A3E8 4A28 0028                  		tst.b	$28(a0)		; was object created by	a Newtron?
0000A3EC 6700                       		beq.s	Obj23_Animate	; if not, branch
0000A3EE 117C 0008 0024             		move.b	#8,$24(a0)	; run "Obj23_FromNewt" routine
0000A3F4 117C 0087 0020             		move.b	#$87,$20(a0)
0000A3FA 117C 0001 001C             		move.b	#1,$1C(a0)
0000A400 6000                       		bra.s	Obj23_Animate2
0000A402                            ; ===========================================================================
0000A402                            
0000A402                            Obj23_Animate:				; XREF: Obj23_Index
0000A402 6100                       		bsr.s	Obj23_ChkCancel
0000A404 43F9 0000 0000             		lea	(Ani_obj23).l,a1
0000A40A 6100 0000                  		bsr.w	AnimateSprite
0000A40E 6000 0000                  		bra.w	DisplaySprite
0000A412                            ; ---------------------------------------------------------------------------
0000A412                            ; Subroutine to	check if the Buzz Bomber which fired the missile has been
0000A412                            ; destroyed, and if it has, then cancel	the missile
0000A412                            ; ---------------------------------------------------------------------------
0000A412                            
0000A412                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A412                            
0000A412                            
0000A412                            Obj23_ChkCancel:			; XREF: Obj23_Main
0000A412 2268 003C                  		movea.l	$3C(a0),a1
0000A416 0C11 0027                  		cmpi.b	#$27,0(a1)	; has Buzz Bomber been destroyed?
0000A41A 6700                       		beq.s	Obj23_Delete	; if yes, branch
0000A41C 4E75                       		rts	
0000A41E                            ; End of function Obj23_ChkCancel
0000A41E                            
0000A41E                            ; ===========================================================================
0000A41E                            
0000A41E                            Obj23_FromBuzz:				; XREF: Obj23_Index
0000A41E 0828 0007 0022             		btst	#7,$22(a0)
0000A424 6600                       		bne.s	Obj23_Explode
0000A426 117C 0087 0020             		move.b	#$87,$20(a0)
0000A42C 117C 0001 001C             		move.b	#1,$1C(a0)
0000A432 6100 0000                  		bsr.w	SpeedToPos
0000A436 43F9 0000 0000             		lea	(Ani_obj23).l,a1
0000A43C 6100 0000                  		bsr.w	AnimateSprite
0000A440 6100 0000                  		bsr.w	DisplaySprite
0000A444 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000A448 0640 00E0                  		addi.w	#$E0,d0
0000A44C B068 000C                  		cmp.w	$C(a0),d0	; has object moved below the level boundary?
0000A450 6500                       		bcs.s	Obj23_Delete	; if yes, branch
0000A452 4E75                       		rts	
0000A454                            ; ===========================================================================
0000A454                            
0000A454                            Obj23_Explode:				; XREF: Obj23_FromBuzz
0000A454 10BC 0024                  		move.b	#$24,0(a0)	; change object	to an explosion	(Obj24)
0000A458 117C 0000 0024             		move.b	#0,$24(a0)
0000A45E 6000 F30A                  		bra.w	Obj24
0000A462                            ; ===========================================================================
0000A462                            
0000A462                            Obj23_Delete:				; XREF: Obj23_Index
0000A462 6100 0000                  		bsr.w	DeleteObject
0000A466 4E75                       		rts	
0000A468                            ; ===========================================================================
0000A468                            
0000A468                            Obj23_FromNewt:				; XREF: Obj23_Index
0000A468 4A28 0001                  		tst.b	1(a0)
0000A46C 6AF4                       		bpl.s	Obj23_Delete
0000A46E 6100 0000                  		bsr.w	SpeedToPos
0000A472                            
0000A472                            Obj23_Animate2:				; XREF: Obj23_Main
0000A472 43F9 0000 0000             		lea	(Ani_obj23).l,a1
0000A478 6100 0000                  		bsr.w	AnimateSprite
0000A47C 6100 0000                  		bsr.w	DisplaySprite
0000A480 4E75                       		rts	
0000A482                            ; ===========================================================================
0000A482                            Ani_obj22:
0000A482                            	include "_anim\obj22.asm"
0000A482                            ; ---------------------------------------------------------------------------
0000A482                            ; Animation script - Buzz Bomber enemy
0000A482                            ; ---------------------------------------------------------------------------
0000A482 0000                       		dc.w byte_9A1E-Ani_obj22
0000A484 0000                       		dc.w byte_9A22-Ani_obj22
0000A486 0000                       		dc.w byte_9A26-Ani_obj22
0000A488 0100 01FF                  byte_9A1E:	dc.b 1,	0, 1, $FF
0000A48C 0102 03FF                  byte_9A22:	dc.b 1,	2, 3, $FF
0000A490 0104 05FF                  byte_9A26:	dc.b 1,	4, 5, $FF
0000A494                            		even
0000A494                            		even
0000A494                            
0000A494                            Ani_obj23:
0000A494                            	include "_anim\obj23.asm"
0000A494                            ; ---------------------------------------------------------------------------
0000A494                            ; Animation script - missile that Buzz Bomber throws
0000A494                            ; ---------------------------------------------------------------------------
0000A494 0000                       		dc.w byte_9A2E-Ani_obj23
0000A496 0000                       		dc.w byte_9A32-Ani_obj23
0000A498 0700 01FC                  byte_9A2E:	dc.b 7,	0, 1, $FC
0000A49C 0102 03FF                  byte_9A32:	dc.b 1,	2, 3, $FF
0000A4A0                            		even
0000A4A0                            		even
0000A4A0                            
0000A4A0                            ; ---------------------------------------------------------------------------
0000A4A0                            ; Sprite mappings - Buzz Bomber	enemy
0000A4A0                            ; ---------------------------------------------------------------------------
0000A4A0                            Map_obj22:
0000A4A0                            	include "_maps\obj22.asm"
0000A4A0                            ; ---------------------------------------------------------------------------
0000A4A0                            ; Sprite mappings - Buzz Bomber	enemy
0000A4A0                            ; ---------------------------------------------------------------------------
0000A4A0 0000 0000                  		dc.w byte_9A42-Map_obj22, byte_9A61-Map_obj22
0000A4A4 0000 0000                  		dc.w byte_9A80-Map_obj22, byte_9AA4-Map_obj22
0000A4A8 0000 0000                  		dc.w byte_9AC8-Map_obj22, byte_9AE7-Map_obj22
0000A4AC 06                         byte_9A42:	dc.b 6
0000A4AD F409 0000 E8               		dc.b $F4, 9, 0,	0, $E8
0000A4B2 F409 000F 00               		dc.b $F4, 9, 0,	$F, 0
0000A4B7 0408 0015 E8               		dc.b 4,	8, 0, $15, $E8
0000A4BC 0404 0018 00               		dc.b 4,	4, 0, $18, 0
0000A4C1 F108 001A EC               		dc.b $F1, 8, 0,	$1A, $EC
0000A4C6 F104 001D 04               		dc.b $F1, 4, 0,	$1D, 4
0000A4CB 06                         byte_9A61:	dc.b 6
0000A4CC F409 0000 E8               		dc.b $F4, 9, 0,	0, $E8
0000A4D1 F409 000F 00               		dc.b $F4, 9, 0,	$F, 0
0000A4D6 0408 0015 E8               		dc.b 4,	8, 0, $15, $E8
0000A4DB 0404 0018 00               		dc.b 4,	4, 0, $18, 0
0000A4E0 F408 001F EC               		dc.b $F4, 8, 0,	$1F, $EC
0000A4E5 F404 0022 04               		dc.b $F4, 4, 0,	$22, 4
0000A4EA 07                         byte_9A80:	dc.b 7
0000A4EB 0400 0030 0C               		dc.b 4,	0, 0, $30, $C
0000A4F0 F409 0000 E8               		dc.b $F4, 9, 0,	0, $E8
0000A4F5 F409 000F 00               		dc.b $F4, 9, 0,	$F, 0
0000A4FA 0408 0015 E8               		dc.b 4,	8, 0, $15, $E8
0000A4FF 0404 0018 00               		dc.b 4,	4, 0, $18, 0
0000A504 F108 001A EC               		dc.b $F1, 8, 0,	$1A, $EC
0000A509 F104 001D 04               		dc.b $F1, 4, 0,	$1D, 4
0000A50E 07                         byte_9AA4:	dc.b 7
0000A50F 0404 0031 0C               		dc.b 4,	4, 0, $31, $C
0000A514 F409 0000 E8               		dc.b $F4, 9, 0,	0, $E8
0000A519 F409 000F 00               		dc.b $F4, 9, 0,	$F, 0
0000A51E 0408 0015 E8               		dc.b 4,	8, 0, $15, $E8
0000A523 0404 0018 00               		dc.b 4,	4, 0, $18, 0
0000A528 F408 001F EC               		dc.b $F4, 8, 0,	$1F, $EC
0000A52D F404 0022 04               		dc.b $F4, 4, 0,	$22, 4
0000A532 06                         byte_9AC8:	dc.b 6
0000A533 F40D 0000 EC               		dc.b $F4, $D, 0, 0, $EC
0000A538 040C 0008 EC               		dc.b 4,	$C, 0, 8, $EC
0000A53D 0400 000C 0C               		dc.b 4,	0, 0, $C, $C
0000A542 0C04 000D F4               		dc.b $C, 4, 0, $D, $F4
0000A547 F108 001A EC               		dc.b $F1, 8, 0,	$1A, $EC
0000A54C F104 001D 04               		dc.b $F1, 4, 0,	$1D, 4
0000A551 04                         byte_9AE7:	dc.b 4
0000A552 F40D 0000 EC               		dc.b $F4, $D, 0, 0, $EC
0000A557 040C 0008 EC               		dc.b 4,	$C, 0, 8, $EC
0000A55C 0400 000C 0C               		dc.b 4,	0, 0, $C, $C
0000A561 0C04 000D F4               		dc.b $C, 4, 0, $D, $F4
0000A566 F408 001F EC               		dc.b $F4, 8, 0,	$1F, $EC
0000A56B F404 0022 04               		dc.b $F4, 4, 0,	$22, 4
0000A570                            		even
0000A570                            		even
0000A570                            
0000A570                            ; ---------------------------------------------------------------------------
0000A570                            ; Sprite mappings - missile that Buzz Bomber throws
0000A570                            ; ---------------------------------------------------------------------------
0000A570                            Map_obj23:
0000A570                            	include "_maps\obj23.asm"
0000A570                            ; ---------------------------------------------------------------------------
0000A570                            ; Sprite mappings - missile that Buzz Bomber throws
0000A570                            ; ---------------------------------------------------------------------------
0000A570 0000 0000                  		dc.w byte_9B0E-Map_obj23, byte_9B14-Map_obj23
0000A574 0000 0000                  		dc.w byte_9B1A-Map_obj23, byte_9B20-Map_obj23
0000A578 01                         byte_9B0E:	dc.b 1
0000A579 F805 0024 F8               		dc.b $F8, 5, 0,	$24, $F8
0000A57E 01                         byte_9B14:	dc.b 1
0000A57F F805 0028 F8               		dc.b $F8, 5, 0,	$28, $F8
0000A584 01                         byte_9B1A:	dc.b 1
0000A585 F805 002C F8               		dc.b $F8, 5, 0,	$2C, $F8
0000A58A 01                         byte_9B20:	dc.b 1
0000A58B F805 0033 F8               		dc.b $F8, 5, 0,	$33, $F8
0000A590                            		even
0000A590                            		even
0000A590                            
0000A590                            ; ===========================================================================
0000A590                            ; ---------------------------------------------------------------------------
0000A590                            ; Object 25 - rings
0000A590                            ; ---------------------------------------------------------------------------
0000A590                            
0000A590                            Obj25:					; XREF: Obj_Index
0000A590 7000                       		moveq	#0,d0
0000A592 1028 0024                  		move.b	$24(a0),d0
0000A596 323B 0000                  		move.w	Obj25_Index(pc,d0.w),d1
0000A59A 4EFB 1000                  		jmp	Obj25_Index(pc,d1.w)
0000A59E                            ; ===========================================================================
0000A59E 0000                       Obj25_Index:	dc.w Obj25_Main-Obj25_Index
0000A5A0 0000                       		dc.w Obj25_Animate-Obj25_Index
0000A5A2 0000                       		dc.w Obj25_Collect-Obj25_Index
0000A5A4 0000                       		dc.w Obj25_Sparkle-Obj25_Index
0000A5A6 0000                       		dc.w Obj25_Delete-Obj25_Index
0000A5A8                            ; ---------------------------------------------------------------------------
0000A5A8                            ; Distances between rings (format: horizontal, vertical)
0000A5A8                            ; ---------------------------------------------------------------------------
0000A5A8 1000                       Obj25_PosData:	dc.b $10, 0		; horizontal tight
0000A5AA 1800                       		dc.b $18, 0		; horizontal normal
0000A5AC 2000                       		dc.b $20, 0		; horizontal wide
0000A5AE 0010                       		dc.b 0,	$10		; vertical tight
0000A5B0 0018                       		dc.b 0,	$18		; vertical normal
0000A5B2 0020                       		dc.b 0,	$20		; vertical wide
0000A5B4 1010                       		dc.b $10, $10		; diagonal
0000A5B6 1818                       		dc.b $18, $18
0000A5B8 2020                       		dc.b $20, $20
0000A5BA F010                       		dc.b $F0, $10
0000A5BC E818                       		dc.b $E8, $18
0000A5BE E020                       		dc.b $E0, $20
0000A5C0 1008                       		dc.b $10, 8
0000A5C2 1810                       		dc.b $18, $10
0000A5C4 F008                       		dc.b $F0, 8
0000A5C6 E810                       		dc.b $E8, $10
0000A5C8                            ; ===========================================================================
0000A5C8                            
0000A5C8                            Obj25_Main:				; XREF: Obj25_Index
0000A5C8 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000A5CC 7000                       		moveq	#0,d0
0000A5CE 1028 0023                  		move.b	$23(a0),d0
0000A5D2 45F2 0002                  		lea	2(a2,d0.w),a2
0000A5D6 1812                       		move.b	(a2),d4
0000A5D8 1228 0028                  		move.b	$28(a0),d1
0000A5DC 1001                       		move.b	d1,d0
0000A5DE 0241 0007                  		andi.w	#7,d1
0000A5E2 0C41 0007                  		cmpi.w	#7,d1
0000A5E6 6600                       		bne.s	loc_9B80
0000A5E8 7206                       		moveq	#6,d1
0000A5EA                            
0000A5EA                            loc_9B80:
0000A5EA 4841                       		swap	d1
0000A5EC 323C 0000                  		move.w	#0,d1
0000A5F0 E808                       		lsr.b	#4,d0
0000A5F2 D040                       		add.w	d0,d0
0000A5F4 1A3B 00B2                  		move.b	Obj25_PosData(pc,d0.w),d5 ; load ring spacing data
0000A5F8 4885                       		ext.w	d5
0000A5FA 1C3B 00AD                  		move.b	Obj25_PosData+1(pc,d0.w),d6
0000A5FE 4886                       		ext.w	d6
0000A600 2248                       		movea.l	a0,a1
0000A602 3428 0008                  		move.w	8(a0),d2
0000A606 3628 000C                  		move.w	$C(a0),d3
0000A60A E20C                       		lsr.b	#1,d4
0000A60C 6500                       		bcs.s	loc_9C02
0000A60E 0892 0007                  		bclr	#7,(a2)
0000A612 6000                       		bra.s	loc_9BBA
0000A614                            ; ===========================================================================
0000A614                            
0000A614                            Obj25_MakeRings:
0000A614 4841                       		swap	d1
0000A616 E20C                       		lsr.b	#1,d4
0000A618 6500                       		bcs.s	loc_9C02
0000A61A 0892 0007                  		bclr	#7,(a2)
0000A61E 6100 0000                  		bsr.w	SingleObjLoad
0000A622 6600                       		bne.s	loc_9C0E
0000A624                            
0000A624                            loc_9BBA:				; XREF: Obj25_Main
0000A624 12BC 0025                  		move.b	#$25,0(a1)	; load ring object
0000A628 5429 0024                  		addq.b	#2,$24(a1)
0000A62C 3342 0008                  		move.w	d2,8(a1)	; set x-axis position based on d2
0000A630 3368 0008 0032             		move.w	8(a0),$32(a1)
0000A636 3343 000C                  		move.w	d3,$C(a1)	; set y-axis position based on d3
0000A63A 237C 0000 0000 0004        		move.l	#Map_obj25,4(a1)
0000A642 337C 27B2 0002             		move.w	#$27B2,2(a1)
0000A648 137C 0004 0001             		move.b	#4,1(a1)
0000A64E 137C 0002 0018             		move.b	#2,$18(a1)
0000A654 137C 0047 0020             		move.b	#$47,$20(a1)
0000A65A 137C 0008 0019             		move.b	#8,$19(a1)
0000A660 1368 0023 0023             		move.b	$23(a0),$23(a1)
0000A666 1341 0034                  		move.b	d1,$34(a1)
0000A66A                            
0000A66A                            loc_9C02:
0000A66A 5241                       		addq.w	#1,d1
0000A66C D445                       		add.w	d5,d2		; add ring spacing value to d2
0000A66E D646                       		add.w	d6,d3		; add ring spacing value to d3
0000A670 4841                       		swap	d1
0000A672 51C9 FFA0                  		dbf	d1,Obj25_MakeRings ; repeat for	number of rings
0000A676                            
0000A676                            loc_9C0E:
0000A676 0812 0000                  		btst	#0,(a2)
0000A67A 6600 0000                  		bne.w	DeleteObject
0000A67E                            
0000A67E                            Obj25_Animate:				; XREF: Obj25_Index
0000A67E 1178 FEC3 001A             		move.b	($FFFFFEC3).w,$1A(a0) ;	set frame
0000A684 6100 0000                  		bsr.w	DisplaySprite
0000A688 3028 0032                  		move.w	$32(a0),d0
0000A68C 0240 FF80                  		andi.w	#$FF80,d0
0000A690 3238 F700                  		move.w	($FFFFF700).w,d1
0000A694 0441 0080                  		subi.w	#$80,d1
0000A698 0241 FF80                  		andi.w	#$FF80,d1
0000A69C 9041                       		sub.w	d1,d0
0000A69E 0C40 0280                  		cmpi.w	#$280,d0
0000A6A2 6200                       		bhi.s	Obj25_Delete
0000A6A4 4E75                       		rts	
0000A6A6                            ; ===========================================================================
0000A6A6                            
0000A6A6                            Obj25_Collect:				; XREF: Obj25_Index
0000A6A6 5428 0024                  		addq.b	#2,$24(a0)
0000A6AA 117C 0000 0020             		move.b	#0,$20(a0)
0000A6B0 117C 0001 0018             		move.b	#1,$18(a0)
0000A6B6 6100 0000                  		bsr.w	CollectRing
0000A6BA 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000A6BE 7000                       		moveq	#0,d0
0000A6C0 1028 0023                  		move.b	$23(a0),d0
0000A6C4 1228 0034                  		move.b	$34(a0),d1
0000A6C8 03F2 0002                  		bset	d1,2(a2,d0.w)
0000A6CC                            
0000A6CC                            Obj25_Sparkle:				; XREF: Obj25_Index
0000A6CC 43F9 0000 0000             		lea	(Ani_obj25).l,a1
0000A6D2 6100 0000                  		bsr.w	AnimateSprite
0000A6D6 6000 0000                  		bra.w	DisplaySprite
0000A6DA                            ; ===========================================================================
0000A6DA                            
0000A6DA                            Obj25_Delete:				; XREF: Obj25_Index
0000A6DA 6000 0000                  		bra.w	DeleteObject
0000A6DE                            
0000A6DE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A6DE                            
0000A6DE                            
0000A6DE                            CollectRing:				; XREF: Obj25_Collect
0000A6DE 5278 FE20                  		addq.w	#1,($FFFFFE20).w ; add 1 to rings
0000A6E2 0038 0001 FE1D             		ori.b	#1,($FFFFFE1D).w ; update the rings counter
0000A6E8 303C 00B5                  		move.w	#$B5,d0		; play ring sound
0000A6EC 0C78 0064 FE20             		cmpi.w	#100,($FFFFFE20).w ; do	you have < 100 rings?
0000A6F2 6500                       		bcs.s	Obj25_PlaySnd	; if yes, branch
0000A6F4 08F8 0001 FE1B             		bset	#1,($FFFFFE1B).w ; update lives	counter
0000A6FA 6700                       		beq.s	loc_9CA4
0000A6FC 0C78 00C8 FE20             		cmpi.w	#200,($FFFFFE20).w ; do	you have < 200 rings?
0000A702 6500                       		bcs.s	Obj25_PlaySnd	; if yes, branch
0000A704 08F8 0002 FE1B             		bset	#2,($FFFFFE1B).w ; update lives	counter
0000A70A 6600                       		bne.s	Obj25_PlaySnd
0000A70C                            
0000A70C                            loc_9CA4:
0000A70C 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to the	number of lives	you have
0000A710 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to the	lives counter
0000A714 303C 0088                  		move.w	#$88,d0		; play extra life music
0000A718                            
0000A718                            Obj25_PlaySnd:
0000A718 4EF9 0000 147C             		jmp	(PlaySound_Special).l
0000A71E                            ; End of function CollectRing
0000A71E                            
0000A71E                            ; ===========================================================================
0000A71E                            ; ---------------------------------------------------------------------------
0000A71E                            ; Object 37 - rings flying out of Sonic	when he's hit
0000A71E                            ; ---------------------------------------------------------------------------
0000A71E                            
0000A71E                            Obj37:					; XREF: Obj_Index
0000A71E 7000                       		moveq	#0,d0
0000A720 1028 0024                  		move.b	$24(a0),d0
0000A724 323B 0000                  		move.w	Obj37_Index(pc,d0.w),d1
0000A728 4EFB 1000                  		jmp	Obj37_Index(pc,d1.w)
0000A72C                            ; ===========================================================================
0000A72C 0000                       Obj37_Index:	dc.w Obj37_CountRings-Obj37_Index
0000A72E 0000                       		dc.w Obj37_Bounce-Obj37_Index
0000A730 0000                       		dc.w Obj37_Collect-Obj37_Index
0000A732 0000                       		dc.w Obj37_Sparkle-Obj37_Index
0000A734 0000                       		dc.w Obj37_Delete-Obj37_Index
0000A736                            ; ===========================================================================
0000A736                            
0000A736                            Obj37_CountRings:			; XREF: Obj37_Index
0000A736 2248                       		movea.l	a0,a1
0000A738 7A00                       		moveq	#0,d5
0000A73A 3A38 FE20                  		move.w	($FFFFFE20).w,d5 ; check number	of rings you have
0000A73E 7020                       		moveq	#32,d0
0000A740 BA40                       		cmp.w	d0,d5		; do you have 32 or more?
0000A742 6500                       		bcs.s	loc_9CDE	; if not, branch
0000A744 3A00                       		move.w	d0,d5		; if yes, set d5 to 32
0000A746                            
0000A746                            loc_9CDE:
0000A746 5345                       		subq.w	#1,d5
0000A748 383C 0288                  		move.w	#$288,d4
0000A74C 6000                       		bra.s	Obj37_MakeRings
0000A74E                            ; ===========================================================================
0000A74E                            
0000A74E                            Obj37_Loop:
0000A74E 6100 0000                  		bsr.w	SingleObjLoad
0000A752 6600 0000                  		bne.w	Obj37_ResetCounter
0000A756                            
0000A756                            Obj37_MakeRings:			; XREF: Obj37_CountRings
0000A756 12BC 0037                  		move.b	#$37,0(a1)	; load bouncing	ring object
0000A75A 5429 0024                  		addq.b	#2,$24(a1)
0000A75E 137C 0008 0016             		move.b	#8,$16(a1)
0000A764 137C 0008 0017             		move.b	#8,$17(a1)
0000A76A 3368 0008 0008             		move.w	8(a0),8(a1)
0000A770 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A776 237C 0000 0000 0004        		move.l	#Map_obj25,4(a1)
0000A77E 337C 27B2 0002             		move.w	#$27B2,2(a1)
0000A784 137C 0004 0001             		move.b	#4,1(a1)
0000A78A 137C 0003 0018             		move.b	#3,$18(a1)
0000A790 137C 0047 0020             		move.b	#$47,$20(a1)
0000A796 137C 0008 0019             		move.b	#8,$19(a1)
0000A79C 4A44                       		tst.w	d4
0000A79E 6B00                       		bmi.s	loc_9D62
0000A7A0 3004                       		move.w	d4,d0
0000A7A2 6100 8C36                  		bsr.w	CalcSine
0000A7A6 3404                       		move.w	d4,d2
0000A7A8 E04A                       		lsr.w	#8,d2
0000A7AA 4A38 F64C                  		tst.b	($FFFFF64C).w		; Does the level have water?
0000A7AE 6700                       		beq.s	@skiphalvingvel		; If not, branch and skip underwater checks
0000A7B0 3C38 F646                  		move.w	($FFFFF646).w,d6	; Move water level to d6
0000A7B4 BC68 000C                  		cmp.w	$C(a0),d6		; Is the ring object underneath the water level?
0000A7B8 6E00                       		bgt.s	@skiphalvingvel		; If not, branch and skip underwater commands
0000A7BA E240                       		asr.w	d0			; Half d0. Makes the ring's x_vel bounce to the left/right slower
0000A7BC E241                       		asr.w	d1			; Half d1. Makes the ring's y_vel bounce up/down slower
0000A7BE                            
0000A7BE                            @skiphalvingvel:		
0000A7BE E560                       		asl.w	d2,d0
0000A7C0 E561                       		asl.w	d2,d1
0000A7C2 3400                       		move.w	d0,d2
0000A7C4 3601                       		move.w	d1,d3
0000A7C6 0604 0010                  		addi.b	#$10,d4
0000A7CA 6400                       		bcc.s	loc_9D62
0000A7CC 0444 0080                  		subi.w	#$80,d4
0000A7D0 6400                       		bcc.s	loc_9D62
0000A7D2 383C 0288                  		move.w	#$288,d4
0000A7D6                            
0000A7D6                            loc_9D62:
0000A7D6 3342 0010                  		move.w	d2,$10(a1)
0000A7DA 3343 0012                  		move.w	d3,$12(a1)
0000A7DE 4442                       		neg.w	d2
0000A7E0 4444                       		neg.w	d4
0000A7E2 51CD FF6A                  		dbf	d5,Obj37_Loop	; repeat for number of rings (max 31)
0000A7E6                            
0000A7E6                            Obj37_ResetCounter:			; XREF: Obj37_Loop
0000A7E6 31FC 0000 FE20             		move.w	#0,($FFFFFE20).w ; reset number	of rings to zero
0000A7EC 11FC 0080 FE1D             		move.b	#$80,($FFFFFE1D).w ; update ring counter
0000A7F2 11FC 0000 FE1B             		move.b	#0,($FFFFFE1B).w
0000A7F8 70FF                       		moveq	#-1,d0			; Move #-1 to d0
0000A7FA 1140 001F                  		move.b	d0,$1F(a0)	; Move d0 to new timer
0000A7FE 11C0 FEC6                  		move.b	d0,($FFFFFEC6).w	; Move d0 to old timer (for animated purposes)
0000A802 303C 00C6                  		move.w	#$C6,d0
0000A806 4EB9 0000 147C             		jsr	(PlaySound_Special).l ;	play ring loss sound
0000A80C                            
0000A80C                            Obj37_Bounce:				; XREF: Obj37_Index
0000A80C 1178 FEC7 001A             		move.b	($FFFFFEC7).w,$1A(a0)
0000A812 6100 0000                  		bsr.w	SpeedToPos
0000A816 0668 0018 0012             		addi.w	#$18,$12(a0)
0000A81C 6B00                       		bmi.s	Obj37_ChkDel
0000A81E 4A38 F64C                  		tst.b	($FFFFF64C).w		; Does the level have water?
0000A822 6700                       		beq.s	@skipbounceslow		; If not, branch and skip underwater checks
0000A824 3C38 F646                  		move.w	($FFFFF646).w,d6	; Move water level to d6
0000A828 BC68 000C                  		cmp.w	$C(a0),d6		; Is the ring object underneath the water level?
0000A82C 6E00                       		bgt.s	@skipbounceslow		; If not, branch and skip underwater commands
0000A82E 0468 000E 0012             		subi.w	#$E,$12(a0)		; Reduce gravity by $E ($18-$E=$A), giving the underwater effect
0000A834                            
0000A834                            @skipbounceslow:
0000A834 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000A838 D007                       		add.b	d7,d0
0000A83A 0200 0003                  		andi.b	#3,d0
0000A83E 6600                       		bne.s	Obj37_ChkDel
0000A840 4EB9 0000 0000             		jsr	ObjHitFloor
0000A846 4A41                       		tst.w	d1
0000A848 6A00                       		bpl.s	Obj37_ChkDel
0000A84A D368 000C                  		add.w	d1,$C(a0)
0000A84E 3028 0012                  		move.w	$12(a0),d0
0000A852 E440                       		asr.w	#2,d0
0000A854 9168 0012                  		sub.w	d0,$12(a0)
0000A858 4468 0012                  		neg.w	$12(a0)
0000A85C                            
0000A85C                            Obj37_ChkDel:
0000A85C 5328 001F                  		subq.b  #1,$1F(a0)  ; Subtract 1   ; RHS Ring Timer fix
0000A860 6700 0000                                  beq.w   DeleteObject       ; If 0, delete ; RHS Ring Timer fix
0000A864 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000A868 0640 00E0                  		addi.w	#$E0,d0
0000A86C B068 000C                  		cmp.w	$C(a0),d0	   ; has object moved below level boundary?
0000A870 6500                       		bcs.s	Obj37_Delete	   ; if yes, branch	
0000A872                            ;Mercury Lost Rings Flash
0000A872 0828 0000 001F             		btst	#0, $1F(a0) ; Test the first bit of the timer, so rings flash every other frame.
0000A878 6700 0000                  		beq.w	DisplaySprite      ; If the bit is 0, the ring will appear.
0000A87C 0C28 0050 001F             		cmpi.b	#80,$1F(a0) ; Rings will flash during last 80 steps of their life.
0000A882 6200 0000                  		bhi.w	DisplaySprite      ; If the timer is higher than 80, obviously the rings will STAY visible.
0000A886 4E75                       		rts
0000A888                            ;end Lost Rings Flash
0000A888                            ; ===========================================================================
0000A888                            
0000A888                            Obj37_Collect:				; XREF: Obj37_Index
0000A888 5428 0024                  		addq.b	#2,$24(a0)
0000A88C 117C 0000 0020             		move.b	#0,$20(a0)
0000A892 117C 0001 0018             		move.b	#1,$18(a0)
0000A898 6100 FE44                  		bsr.w	CollectRing
0000A89C                            
0000A89C                            Obj37_Sparkle:				; XREF: Obj37_Index
0000A89C 43F9 0000 0000             		lea	(Ani_obj25).l,a1
0000A8A2 6100 0000                  		bsr.w	AnimateSprite
0000A8A6 6000 0000                  		bra.w	DisplaySprite
0000A8AA                            ; ===========================================================================
0000A8AA                            
0000A8AA                            Obj37_Delete:				; XREF: Obj37_Index
0000A8AA 6000 0000                  		bra.w	DeleteObject
0000A8AE                            ; ===========================================================================
0000A8AE                            ; ---------------------------------------------------------------------------
0000A8AE                            ; Object 4B - giant ring for entry to special stage
0000A8AE                            ; ---------------------------------------------------------------------------
0000A8AE                            
0000A8AE                            Obj4B:					; XREF: Obj_Index
0000A8AE 7000                       		moveq	#0,d0
0000A8B0 1028 0024                  		move.b	$24(a0),d0
0000A8B4 323B 0000                  		move.w	Obj4B_Index(pc,d0.w),d1
0000A8B8 4EFB 1000                  		jmp	Obj4B_Index(pc,d1.w)
0000A8BC                            ; ===========================================================================
0000A8BC 0000                       Obj4B_Index:	dc.w Obj4B_Main-Obj4B_Index
0000A8BE 0000                       		dc.w Obj4B_Animate-Obj4B_Index
0000A8C0 0000                       		dc.w Obj4B_Collect-Obj4B_Index
0000A8C2 0000                       		dc.w Obj4B_Delete-Obj4B_Index
0000A8C4                            ; ===========================================================================
0000A8C4                            
0000A8C4                            Obj4B_Main:				; XREF: Obj4B_Index
0000A8C4 217C 0000 0000 0004        		move.l	#Map_obj4B,4(a0)
0000A8CC 317C 2400 0002             		move.w	#$2400,2(a0)
0000A8D2 0028 0004 0001             		ori.b	#4,1(a0)
0000A8D8 117C 0040 0019             		move.b	#$40,$19(a0)
0000A8DE 4A28 0001                  		tst.b	1(a0)
0000A8E2 6A00                       		bpl.s	Obj4B_Animate
0000A8E4 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have 6 emeralds?
0000A8EA 6700 0000                  		beq.w	Obj4B_Delete	; if yes, branch
0000A8EE 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	at least 50 rings?
0000A8F4 6400                       		bcc.s	Obj4B_Okay	; if yes, branch
0000A8F6 4E75                       		rts	
0000A8F8                            ; ===========================================================================
0000A8F8                            
0000A8F8                            Obj4B_Okay:				; XREF: Obj4B_Main
0000A8F8 5428 0024                  		addq.b	#2,$24(a0)
0000A8FC 117C 0002 0018             		move.b	#2,$18(a0)
0000A902 117C 0052 0020             		move.b	#$52,$20(a0)
0000A908 31FC 0C40 F7BE             		move.w	#$C40,($FFFFF7BE).w
0000A90E                            
0000A90E                            Obj4B_Animate:				; XREF: Obj4B_Index
0000A90E 1178 FEC3 001A             		move.b	($FFFFFEC3).w,$1A(a0)
0000A914 3028 0008                  		move.w	8(a0),d0
0000A918 0240 FF80                  		andi.w	#$FF80,d0
0000A91C 3238 F700                  		move.w	($FFFFF700).w,d1
0000A920 0441 0080                  		subi.w	#$80,d1
0000A924 0241 FF80                  		andi.w	#$FF80,d1
0000A928 9041                       		sub.w	d1,d0
0000A92A 0C40 0280                  		cmpi.w	#$280,d0
0000A92E 6200 0000                  		bhi.w	DeleteObject
0000A932 6000 0000                  		bra.w	DisplaySprite
0000A936                            ; ===========================================================================
0000A936                            
0000A936                            Obj4B_Collect:				; XREF: Obj4B_Index
0000A936 5528 0024                  		subq.b	#2,$24(a0)
0000A93A 117C 0000 0020             		move.b	#0,$20(a0)
0000A940 6100 0000                  		bsr.w	SingleObjLoad
0000A944 6600 0000                  		bne.w	Obj4B_PlaySnd
0000A948 12BC 007C                  		move.b	#$7C,0(a1)	; load giant ring flash	object
0000A94C 3368 0008 0008             		move.w	8(a0),8(a1)
0000A952 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A958 2348 003C                  		move.l	a0,$3C(a1)
0000A95C 3038 D008                  		move.w	($FFFFD008).w,d0
0000A960 B068 0008                  		cmp.w	8(a0),d0	; has Sonic come from the left?
0000A964 6500                       		bcs.s	Obj4B_PlaySnd	; if yes, branch
0000A966 08E9 0000 0001             		bset	#0,1(a1)	; reverse flash	object
0000A96C                            
0000A96C                            Obj4B_PlaySnd:
0000A96C 303C 00C3                  		move.w	#$C3,d0
0000A970 4EB9 0000 147C             		jsr	(PlaySound_Special).l ;	play giant ring	sound
0000A976 6096                       		bra.s	Obj4B_Animate
0000A978                            ; ===========================================================================
0000A978                            
0000A978                            Obj4B_Delete:				; XREF: Obj4B_Index
0000A978 6000 0000                  		bra.w	DeleteObject
0000A97C                            ; ===========================================================================
0000A97C                            ; ---------------------------------------------------------------------------
0000A97C                            ; Object 7C - flash effect when	you collect the	giant ring
0000A97C                            ; ---------------------------------------------------------------------------
0000A97C                            
0000A97C                            Obj7C:					; XREF: Obj_Index
0000A97C 7000                       		moveq	#0,d0
0000A97E 1028 0024                  		move.b	$24(a0),d0
0000A982 323B 0000                  		move.w	Obj7C_Index(pc,d0.w),d1
0000A986 4EFB 1000                  		jmp	Obj7C_Index(pc,d1.w)
0000A98A                            ; ===========================================================================
0000A98A 0000                       Obj7C_Index:	dc.w Obj7C_Main-Obj7C_Index
0000A98C 0000                       		dc.w Obj7C_ChkDel-Obj7C_Index
0000A98E 0000                       		dc.w Obj7C_Delete-Obj7C_Index
0000A990                            ; ===========================================================================
0000A990                            
0000A990                            Obj7C_Main:				; XREF: Obj7C_Index
0000A990 5428 0024                  		addq.b	#2,$24(a0)
0000A994 217C 0000 0000 0004        		move.l	#Map_obj7C,4(a0)
0000A99C 317C 2462 0002             		move.w	#$2462,2(a0)
0000A9A2 0028 0004 0001             		ori.b	#4,1(a0)
0000A9A8 117C 0000 0018             		move.b	#0,$18(a0)
0000A9AE 117C 0020 0019             		move.b	#$20,$19(a0)
0000A9B4 117C 00FF 001A             		move.b	#$FF,$1A(a0)
0000A9BA                            
0000A9BA                            Obj7C_ChkDel:				; XREF: Obj7C_Index
0000A9BA 6100                       		bsr.s	Obj7C_Collect
0000A9BC 3028 0008                  		move.w	8(a0),d0
0000A9C0 0240 FF80                  		andi.w	#$FF80,d0
0000A9C4 3238 F700                  		move.w	($FFFFF700).w,d1
0000A9C8 0441 0080                  		subi.w	#$80,d1
0000A9CC 0241 FF80                  		andi.w	#$FF80,d1
0000A9D0 9041                       		sub.w	d1,d0
0000A9D2 0C40 0280                  		cmpi.w	#$280,d0
0000A9D6 6200 0000                  		bhi.w	DeleteObject
0000A9DA 6000 0000                  		bra.w	DisplaySprite
0000A9DE                            
0000A9DE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A9DE                            
0000A9DE                            
0000A9DE                            Obj7C_Collect:				; XREF: Obj7C_ChkDel
0000A9DE 5328 001E                  		subq.b	#1,$1E(a0)
0000A9E2 6A00                       		bpl.s	locret_9F76
0000A9E4 117C 0001 001E             		move.b	#1,$1E(a0)
0000A9EA 5228 001A                  		addq.b	#1,$1A(a0)
0000A9EE 0C28 0008 001A             		cmpi.b	#8,$1A(a0)	; has animation	finished?
0000A9F4 6400                       		bcc.s	Obj7C_End	; if yes, branch
0000A9F6 0C28 0003 001A             		cmpi.b	#3,$1A(a0)	; is 3rd frame displayed?
0000A9FC 6600                       		bne.s	locret_9F76	; if not, branch
0000A9FE 2268 003C                  		movea.l	$3C(a0),a1
0000AA02 137C 0006 0024             		move.b	#6,$24(a1)	; delete giant ring object (Obj4B)
0000AA08 11FC 001C D01C             		move.b	#$1C,($FFFFD01C).w ; make Sonic	invisible
0000AA0E 11FC 0001 F7CD             		move.b	#1,($FFFFF7CD).w ; stop	Sonic getting bonuses
0000AA14 4238 FE2D                  		clr.b	($FFFFFE2D).w	; remove invincibility
0000AA18 4238 FE2C                  		clr.b	($FFFFFE2C).w	; remove shield
0000AA1C                            
0000AA1C                            locret_9F76:
0000AA1C 4E75                       		rts	
0000AA1E                            ; ===========================================================================
0000AA1E                            
0000AA1E                            Obj7C_End:				; XREF: Obj7C_Collect
0000AA1E 5428 0024                  		addq.b	#2,$24(a0)
0000AA22 31FC 0000 D000             		move.w	#0,($FFFFD000).w ; remove Sonic	object
0000AA28 588F                       		addq.l	#4,sp
0000AA2A 4E75                       		rts	
0000AA2C                            ; End of function Obj7C_Collect
0000AA2C                            
0000AA2C                            ; ===========================================================================
0000AA2C                            
0000AA2C                            Obj7C_Delete:				; XREF: Obj7C_Index
0000AA2C 6000 0000                  		bra.w	DeleteObject
0000AA30                            ; ===========================================================================
0000AA30                            Ani_obj25:
0000AA30                            	include "_anim\obj25.asm"
0000AA30                            ; ---------------------------------------------------------------------------
0000AA30                            ; Animation script - ring
0000AA30                            ; ---------------------------------------------------------------------------
0000AA30 0000                       		dc.w byte_9F8C-Ani_obj25
0000AA32 0504 0506 07FC             byte_9F8C:	dc.b 5,	4, 5, 6, 7, $FC
0000AA38                            		even
0000AA38                            		even
0000AA38                            
0000AA38                            ; ---------------------------------------------------------------------------
0000AA38                            ; Sprite mappings - rings
0000AA38                            ; ---------------------------------------------------------------------------
0000AA38                            Map_obj25:
0000AA38                            	include "_maps\obj25.asm"
0000AA38                            ; ---------------------------------------------------------------------------
0000AA38                            ; Sprite mappings - rings
0000AA38                            ; ---------------------------------------------------------------------------
0000AA38 0000 0000                  		dc.w byte_9FA2-Map_obj25, byte_9FA8-Map_obj25
0000AA3C 0000 0000                  		dc.w byte_9FAE-Map_obj25, byte_9FB4-Map_obj25
0000AA40 0000 0000                  		dc.w byte_9FBA-Map_obj25, byte_9FC0-Map_obj25
0000AA44 0000 0000                  		dc.w byte_9FC6-Map_obj25, byte_9FCC-Map_obj25
0000AA48 01                         byte_9FA2:	dc.b 1
0000AA49 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000AA4E 01                         byte_9FA8:	dc.b 1
0000AA4F F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
0000AA54 01                         byte_9FAE:	dc.b 1
0000AA55 F801 0008 FC               		dc.b $F8, 1, 0,	8, $FC
0000AA5A 01                         byte_9FB4:	dc.b 1
0000AA5B F805 0804 F8               		dc.b $F8, 5, 8,	4, $F8
0000AA60 01                         byte_9FBA:	dc.b 1
0000AA61 F805 000A F8               		dc.b $F8, 5, 0,	$A, $F8
0000AA66 01                         byte_9FC0:	dc.b 1
0000AA67 F805 180A F8               		dc.b $F8, 5, $18, $A, $F8
0000AA6C 01                         byte_9FC6:	dc.b 1
0000AA6D F805 080A F8               		dc.b $F8, 5, 8,	$A, $F8
0000AA72 01                         byte_9FCC:	dc.b 1
0000AA73 F805 100A F8               		dc.b $F8, 5, $10, $A, $F8
0000AA78                            		even
0000AA78                            		even
0000AA78                            
0000AA78                            ; ---------------------------------------------------------------------------
0000AA78                            ; Sprite mappings - giant ring
0000AA78                            ; ---------------------------------------------------------------------------
0000AA78                            Map_obj4B:
0000AA78                            	include "_maps\obj4B.asm"
0000AA78                            ; ---------------------------------------------------------------------------
0000AA78                            ; Sprite mappings - giant ring
0000AA78                            ; ---------------------------------------------------------------------------
0000AA78 0000 0000                  		dc.w byte_9FDA-Map_obj4B, byte_A00D-Map_obj4B
0000AA7C 0000 0000                  		dc.w byte_A036-Map_obj4B, byte_A04B-Map_obj4B
0000AA80 0A                         byte_9FDA:	dc.b $A
0000AA81 E008 0000 E8               		dc.b $E0, 8, 0,	0, $E8
0000AA86 E008 0003 00               		dc.b $E0, 8, 0,	3, 0
0000AA8B E80C 0006 E0               		dc.b $E8, $C, 0, 6, $E0
0000AA90 E80C 000A 00               		dc.b $E8, $C, 0, $A, 0
0000AA95 F007 000E E0               		dc.b $F0, 7, 0,	$E, $E0
0000AA9A F007 0016 10               		dc.b $F0, 7, 0,	$16, $10
0000AA9F 100C 001E E0               		dc.b $10, $C, 0, $1E, $E0
0000AAA4 100C 0022 00               		dc.b $10, $C, 0, $22, 0
0000AAA9 1808 0026 E8               		dc.b $18, 8, 0,	$26, $E8
0000AAAE 1808 0029 00               		dc.b $18, 8, 0,	$29, 0
0000AAB3 08                         byte_A00D:	dc.b 8
0000AAB4 E00C 002C F0               		dc.b $E0, $C, 0, $2C, $F0
0000AAB9 E808 0030 E8               		dc.b $E8, 8, 0,	$30, $E8
0000AABE E809 0033 00               		dc.b $E8, 9, 0,	$33, 0
0000AAC3 F007 0039 E8               		dc.b $F0, 7, 0,	$39, $E8
0000AAC8 F805 0041 08               		dc.b $F8, 5, 0,	$41, 8
0000AACD 0809 0045 00               		dc.b 8,	9, 0, $45, 0
0000AAD2 1008 004B E8               		dc.b $10, 8, 0,	$4B, $E8
0000AAD7 180C 004E F0               		dc.b $18, $C, 0, $4E, $F0
0000AADC 04                         byte_A036:	dc.b 4
0000AADD E007 0052 F4               		dc.b $E0, 7, 0,	$52, $F4
0000AAE2 E003 0852 04               		dc.b $E0, 3, 8,	$52, 4
0000AAE7 0007 005A F4               		dc.b 0,	7, 0, $5A, $F4
0000AAEC 0003 085A 04               		dc.b 0,	3, 8, $5A, 4
0000AAF1 08                         byte_A04B:	dc.b 8
0000AAF2 E00C 082C F0               		dc.b $E0, $C, 8, $2C, $F0
0000AAF7 E808 0830 00               		dc.b $E8, 8, 8,	$30, 0
0000AAFC E809 0833 E8               		dc.b $E8, 9, 8,	$33, $E8
0000AB01 F007 0839 08               		dc.b $F0, 7, 8,	$39, 8
0000AB06 F805 0841 E8               		dc.b $F8, 5, 8,	$41, $E8
0000AB0B 0809 0845 E8               		dc.b 8,	9, 8, $45, $E8
0000AB10 1008 084B 00               		dc.b $10, 8, 8,	$4B, 0
0000AB15 180C 084E F0               		dc.b $18, $C, 8, $4E, $F0
0000AB1A                            		even
0000AB1A                            		even
0000AB1A                            
0000AB1A                            ; ---------------------------------------------------------------------------
0000AB1A                            ; Sprite mappings - flash effect when you collect the giant ring
0000AB1A                            ; ---------------------------------------------------------------------------
0000AB1A                            Map_obj7C:
0000AB1A                            	include "_maps\obj7C.asm"
0000AB1A                            ; ---------------------------------------------------------------------------
0000AB1A                            ; Sprite mappings - flash effect when you collect the giant ring
0000AB1A                            ; ---------------------------------------------------------------------------
0000AB1A 0000 0000                  		dc.w byte_A084-Map_obj7C, byte_A08F-Map_obj7C
0000AB1E 0000 0000                  		dc.w byte_A0A4-Map_obj7C, byte_A0B9-Map_obj7C
0000AB22 0000 0000                  		dc.w byte_A0CE-Map_obj7C, byte_A0E3-Map_obj7C
0000AB26 0000 0000                  		dc.w byte_A0F8-Map_obj7C, byte_A103-Map_obj7C
0000AB2A 02                         byte_A084:	dc.b 2
0000AB2B E00F 0000 00               		dc.b $E0, $F, 0, 0, 0
0000AB30 000F 1000 00               		dc.b 0,	$F, $10, 0, 0
0000AB35 04                         byte_A08F:	dc.b 4
0000AB36 E00F 0010 F0               		dc.b $E0, $F, 0, $10, $F0
0000AB3B E007 0020 10               		dc.b $E0, 7, 0,	$20, $10
0000AB40 000F 1010 F0               		dc.b 0,	$F, $10, $10, $F0
0000AB45 0007 1020 10               		dc.b 0,	7, $10,	$20, $10
0000AB4A 04                         byte_A0A4:	dc.b 4
0000AB4B E00F 0028 E8               		dc.b $E0, $F, 0, $28, $E8
0000AB50 E00B 0038 08               		dc.b $E0, $B, 0, $38, 8
0000AB55 000F 1028 E8               		dc.b 0,	$F, $10, $28, $E8
0000AB5A 000B 1038 08               		dc.b 0,	$B, $10, $38, 8
0000AB5F 04                         byte_A0B9:	dc.b 4
0000AB60 E00F 0834 E0               		dc.b $E0, $F, 8, $34, $E0
0000AB65 E00F 0034 00               		dc.b $E0, $F, 0, $34, 0
0000AB6A 000F 1834 E0               		dc.b 0,	$F, $18, $34, $E0
0000AB6F 000F 1034 00               		dc.b 0,	$F, $10, $34, 0
0000AB74 04                         byte_A0CE:	dc.b 4
0000AB75 E00B 0838 E0               		dc.b $E0, $B, 8, $38, $E0
0000AB7A E00F 0828 F8               		dc.b $E0, $F, 8, $28, $F8
0000AB7F 000B 1838 E0               		dc.b 0,	$B, $18, $38, $E0
0000AB84 000F 1828 F8               		dc.b 0,	$F, $18, $28, $F8
0000AB89 04                         byte_A0E3:	dc.b 4
0000AB8A E007 0820 E0               		dc.b $E0, 7, 8,	$20, $E0
0000AB8F E00F 0810 F0               		dc.b $E0, $F, 8, $10, $F0
0000AB94 0007 1820 E0               		dc.b 0,	7, $18,	$20, $E0
0000AB99 000F 1810 F0               		dc.b 0,	$F, $18, $10, $F0
0000AB9E 02                         byte_A0F8:	dc.b 2
0000AB9F E00F 0800 E0               		dc.b $E0, $F, 8, 0, $E0
0000ABA4 000F 1800 E0               		dc.b 0,	$F, $18, 0, $E0
0000ABA9 04                         byte_A103:	dc.b 4
0000ABAA E00F 0044 E0               		dc.b $E0, $F, 0, $44, $E0
0000ABAF E00F 0844 00               		dc.b $E0, $F, 8, $44, 0
0000ABB4 000F 1044 E0               		dc.b 0,	$F, $10, $44, $E0
0000ABB9 000F 1844 00               		dc.b 0,	$F, $18, $44, 0
0000ABBE                            		even
0000ABBE                            		even
0000ABBE                            
0000ABBE                            ; ===========================================================================
0000ABBE                            ; ---------------------------------------------------------------------------
0000ABBE                            ; Object 26 - monitors
0000ABBE                            ; ---------------------------------------------------------------------------
0000ABBE                            
0000ABBE                            Obj26:					; XREF: Obj_Index
0000ABBE 7000                       		moveq	#0,d0
0000ABC0 1028 0024                  		move.b	$24(a0),d0
0000ABC4 323B 0000                  		move.w	Obj26_Index(pc,d0.w),d1
0000ABC8 4EFB 1000                  		jmp	Obj26_Index(pc,d1.w)
0000ABCC                            ; ===========================================================================
0000ABCC 0000                       Obj26_Index:	dc.w Obj26_Main-Obj26_Index
0000ABCE 0000                       		dc.w Obj26_Solid-Obj26_Index
0000ABD0 0000                       		dc.w Obj26_BreakOpen-Obj26_Index
0000ABD2 0000                       		dc.w Obj26_Animate-Obj26_Index
0000ABD4 0000                       		dc.w Obj26_Display-Obj26_Index
0000ABD6                            ; ===========================================================================
0000ABD6                            
0000ABD6                            Obj26_Main:				; XREF: Obj26_Index
0000ABD6 5428 0024                  		addq.b	#2,$24(a0)
0000ABDA 117C 000E 0016             		move.b	#$E,$16(a0)
0000ABE0 117C 000E 0017             		move.b	#$E,$17(a0)
0000ABE6 217C 0000 0000 0004        		move.l	#Map_obj26,4(a0)
0000ABEE 317C 0680 0002             		move.w	#$680,2(a0)
0000ABF4 117C 0004 0001             		move.b	#4,1(a0)
0000ABFA 117C 0003 0018             		move.b	#3,$18(a0)
0000AC00 117C 000F 0019             		move.b	#$F,$19(a0)
0000AC06 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000AC0A 7000                       		moveq	#0,d0
0000AC0C 1028 0023                  		move.b	$23(a0),d0
0000AC10 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000AC16 0832 0000 0002             		btst	#0,2(a2,d0.w)	; has monitor been broken?
0000AC1C 6700                       		beq.s	Obj26_NotBroken	; if not, branch
0000AC1E 117C 0008 0024             		move.b	#8,$24(a0)	; run "Obj26_Display" routine
0000AC24 117C 000B 001A             		move.b	#$B,$1A(a0)	; use broken monitor frame
0000AC2A 4E75                       		rts	
0000AC2C                            ; ===========================================================================
0000AC2C                            
0000AC2C                            Obj26_NotBroken:			; XREF: Obj26_Main
0000AC2C 117C 0046 0020             		move.b	#$46,$20(a0)
0000AC32 1168 0028 001C             		move.b	$28(a0),$1C(a0)
0000AC38                            
0000AC38                            Obj26_Solid:				; XREF: Obj26_Index
0000AC38 1028 0025                  		move.b	$25(a0),d0	; is monitor set to fall?
0000AC3C 6700                       		beq.s	loc_A1EC	; if not, branch
0000AC3E 5500                       		subq.b	#2,d0
0000AC40 6600                       		bne.s	Obj26_Fall
0000AC42 7200                       		moveq	#0,d1
0000AC44 1228 0019                  		move.b	$19(a0),d1
0000AC48 0641 000B                  		addi.w	#$B,d1
0000AC4C 6100 D3FC                  		bsr.w	ExitPlatform
0000AC50 0829 0003 0022             		btst	#3,$22(a1)
0000AC56 6600 0000                  		bne.w	loc_A1BC
0000AC5A 4228 0025                  		clr.b	$25(a0)
0000AC5E 6000 0000                  		bra.w	Obj26_Animate
0000AC62                            ; ===========================================================================
0000AC62                            
0000AC62                            loc_A1BC:				; XREF: Obj26_Solid
0000AC62 363C 0010                  		move.w	#$10,d3
0000AC66 3428 0008                  		move.w	8(a0),d2
0000AC6A 6100 D93C                  		bsr.w	MvSonicOnPtfm
0000AC6E 6000 0000                  		bra.w	Obj26_Animate
0000AC72                            ; ===========================================================================
0000AC72                            
0000AC72                            Obj26_Fall:				; XREF: Obj26_Solid
0000AC72 6100 0000                  		bsr.w	ObjectFall
0000AC76 4EB9 0000 0000             		jsr	ObjHitFloor
0000AC7C 4A41                       		tst.w	d1
0000AC7E 6A00 0000                  		bpl.w	Obj26_Animate
0000AC82 D368 000C                  		add.w	d1,$C(a0)
0000AC86 4268 0012                  		clr.w	$12(a0)
0000AC8A 4228 0025                  		clr.b	$25(a0)
0000AC8E 6000 0000                  		bra.w	Obj26_Animate
0000AC92                            ; ===========================================================================
0000AC92                            
0000AC92                            loc_A1EC:				; XREF: Obj26_Solid
0000AC92 323C 001A                  		move.w	#$1A,d1
0000AC96 343C 000F                  		move.w	#$F,d2
0000AC9A 6100 0000                  		bsr.w	Obj26_SolidSides
0000AC9E 6700 0000                  		beq.w	loc_A25C
0000ACA2 4A69 0012                  		tst.w	$12(a1)
0000ACA6 6B00                       		bmi.s	loc_A20A
0000ACA8 0C29 0002 001C             		cmpi.b	#2,$1C(a1)	; is Sonic rolling?
0000ACAE 6700                       		beq.s	loc_A25C	; if yes, branch
0000ACB0 0C29 001F 001C             		cmpi.b	#$1F,$1C(a1)	; is Sonic spin-dashing?
0000ACB6 6700                       		beq.s	loc_A25C	; if yes, branch
0000ACB8                            
0000ACB8                            loc_A20A:
0000ACB8 4A41                       		tst.w	d1
0000ACBA 6A00                       		bpl.s	loc_A220
0000ACBC 9769 000C                  		sub.w	d3,$C(a1)
0000ACC0 6100 D276                  		bsr.w	loc_74AE
0000ACC4 117C 0002 0025             		move.b	#2,$25(a0)
0000ACCA 6000 0000                  		bra.w	Obj26_Animate
0000ACCE                            ; ===========================================================================
0000ACCE                            
0000ACCE                            loc_A220:
0000ACCE 4A40                       		tst.w	d0
0000ACD0 6700 0000                  		beq.w	loc_A246
0000ACD4 6B00                       		bmi.s	loc_A230
0000ACD6 4A69 0010                  		tst.w	$10(a1)
0000ACDA 6B00                       		bmi.s	loc_A246
0000ACDC 6000                       		bra.s	loc_A236
0000ACDE                            ; ===========================================================================
0000ACDE                            
0000ACDE                            loc_A230:
0000ACDE 4A69 0010                  		tst.w	$10(a1)
0000ACE2 6A00                       		bpl.s	loc_A246
0000ACE4                            
0000ACE4                            loc_A236:
0000ACE4 9169 0008                  		sub.w	d0,8(a1)
0000ACE8 337C 0000 0014             		move.w	#0,$14(a1)
0000ACEE 337C 0000 0010             		move.w	#0,$10(a1)
0000ACF4                            
0000ACF4                            loc_A246:
0000ACF4 0829 0001 0022             		btst	#1,$22(a1)
0000ACFA 6600                       		bne.s	loc_A26A
0000ACFC 08E9 0005 0022             		bset	#5,$22(a1)
0000AD02 08E8 0005 0022             		bset	#5,$22(a0)
0000AD08 6000                       		bra.s	Obj26_Animate
0000AD0A                            ; ===========================================================================
0000AD0A                            
0000AD0A                            loc_A25C:
0000AD0A 0828 0005 0022             		btst	#5,$22(a0)
0000AD10 6700                       		beq.s	Obj26_Animate
0000AD12 0C29 0002 001C             		cmp.b	#2,$1C(a1)	; check if in jumping/rolling animation
0000AD18 6700                       		beq.s	loc_A26A
0000AD1A 0C29 0017 001C             		cmp.b	#$17,$1C(a1)	; check if in drowning animation
0000AD20 6700                       		beq.s	loc_A26A
0000AD22 337C 0001 001C             		move.w	#1,$1C(a1)
0000AD28                            
0000AD28                            loc_A26A:
0000AD28 08A8 0005 0022             		bclr	#5,$22(a0)
0000AD2E 08A9 0005 0022             		bclr	#5,$22(a1)
0000AD34                            
0000AD34                            Obj26_Animate:				; XREF: Obj26_Index
0000AD34 43F9 0000 0000             		lea	(Ani_obj26).l,a1
0000AD3A 6100 0000                  		bsr.w	AnimateSprite
0000AD3E                            
0000AD3E                            Obj26_Display:				; XREF: Obj26_Index
0000AD3E 6100 0000                  		bsr.w	DisplaySprite
0000AD42 3028 0008                  		move.w	8(a0),d0
0000AD46 0240 FF80                  		andi.w	#$FF80,d0
0000AD4A 3238 F700                  		move.w	($FFFFF700).w,d1
0000AD4E 0441 0080                  		subi.w	#$80,d1
0000AD52 0241 FF80                  		andi.w	#$FF80,d1
0000AD56 9041                       		sub.w	d1,d0
0000AD58 0C40 0280                  		cmpi.w	#$280,d0
0000AD5C 6200 0000                  		bhi.w	DeleteObject
0000AD60 4E75                       		rts	
0000AD62                            ; ===========================================================================
0000AD62                            
0000AD62                            Obj26_BreakOpen:			; XREF: Obj26_Index
0000AD62 5428 0024                  		addq.b	#2,$24(a0)
0000AD66 117C 0000 0020             		move.b	#0,$20(a0)
0000AD6C 6100 0000                  		bsr.w	SingleObjLoad
0000AD70 6600                       		bne.s	Obj26_Explode
0000AD72 12BC 002E                  		move.b	#$2E,0(a1)	; load monitor contents	object
0000AD76 3368 0008 0008             		move.w	8(a0),8(a1)
0000AD7C 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000AD82 1368 001C 001C             		move.b	$1C(a0),$1C(a1)
0000AD88                            
0000AD88                            Obj26_Explode:
0000AD88 6100 0000                  		bsr.w	SingleObjLoad
0000AD8C 6600                       		bne.s	Obj26_SetBroken
0000AD8E 12BC 0027                  		move.b	#$27,0(a1)	; load explosion object
0000AD92 5429 0024                  		addq.b	#2,$24(a1)
0000AD96 3368 0008 0008             		move.w	8(a0),8(a1)
0000AD9C 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000ADA2                            
0000ADA2                            Obj26_SetBroken:
0000ADA2 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000ADA6 7000                       		moveq	#0,d0
0000ADA8 1028 0023                  		move.b	$23(a0),d0
0000ADAC 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0000ADB2 117C 0009 001C             		move.b	#9,$1C(a0)	; set monitor type to broken
0000ADB8 6000 0000                  		bra.w	DisplaySprite
0000ADBC                            ; ===========================================================================
0000ADBC                            ; ---------------------------------------------------------------------------
0000ADBC                            ; Object 2E - contents of monitors
0000ADBC                            ; ---------------------------------------------------------------------------
0000ADBC                            
0000ADBC                            Obj2E:					; XREF: Obj_Index
0000ADBC 7000                       		moveq	#0,d0
0000ADBE 1028 0024                  		move.b	$24(a0),d0
0000ADC2 323B 0000                  		move.w	Obj2E_Index(pc,d0.w),d1
0000ADC6 4EBB 1000                  		jsr	Obj2E_Index(pc,d1.w)
0000ADCA 6000 0000                  		bra.w	DisplaySprite
0000ADCE                            ; ===========================================================================
0000ADCE 0000                       Obj2E_Index:	dc.w Obj2E_Main-Obj2E_Index
0000ADD0 0000                       		dc.w Obj2E_Move-Obj2E_Index
0000ADD2 0000                       		dc.w Obj2E_Delete-Obj2E_Index
0000ADD4                            ; ===========================================================================
0000ADD4                            
0000ADD4                            Obj2E_Main:				; XREF: Obj2E_Index
0000ADD4 5428 0024                  		addq.b	#2,$24(a0)
0000ADD8 317C 0680 0002             		move.w	#$680,2(a0)
0000ADDE 117C 0024 0001             		move.b	#$24,1(a0)
0000ADE4 117C 0003 0018             		move.b	#3,$18(a0)
0000ADEA 117C 0008 0019             		move.b	#8,$19(a0)
0000ADF0 317C FD00 0012             		move.w	#-$300,$12(a0)
0000ADF6 7000                       		moveq	#0,d0
0000ADF8 1028 001C                  		move.b	$1C(a0),d0
0000ADFC 5400                       		addq.b	#2,d0
0000ADFE 1140 001A                  		move.b	d0,$1A(a0)
0000AE02 227C 0000 0000             		movea.l	#Map_obj26,a1
0000AE08 D000                       		add.b	d0,d0
0000AE0A D2F1 0000                  		adda.w	(a1,d0.w),a1
0000AE0E 5249                       		addq.w	#1,a1
0000AE10 2149 0004                  		move.l	a1,4(a0)
0000AE14                            
0000AE14                            Obj2E_Move:				; XREF: Obj2E_Index
0000AE14 4A68 0012                  		tst.w	$12(a0)		; is object moving?
0000AE18 6A00 0000                  		bpl.w	Obj2E_ChkEggman	; if not, branch
0000AE1C 6100 0000                  		bsr.w	SpeedToPos
0000AE20 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce object	speed
0000AE26 4E75                       		rts	
0000AE28                            ; ===========================================================================
0000AE28                            
0000AE28                            Obj2E_ChkEggman:    ; XREF: Obj2E_Move
0000AE28 5428 0024                          addq.b    #2,$24(a0)
0000AE2C 317C 001D 001E                     move.w    #29,$1E(a0)
0000AE32 1028 001C                          move.b    $1C(a0),d0
0000AE36 0C00 0001                          cmpi.b    #1,d0; does monitor contain Eggman?
0000AE3A 6600                               bne.s    Obj2E_ChkSonic ; if not, go and check for the next monitor type (1-up icon)
0000AE3C 2248                               move.l    a0,a1 ; move a0 to a1, because Touch_ChkHurt wants the damaging object to be in a1
0000AE3E 2F08                               move.l    a0,-(sp) ; push a0 on the stack, and decrement stack pointer
0000AE40 41F8 D000                          lea    ($FFFFD000).w,a0 ; put Sonic's ram address in a0, because Touch_ChkHurt wants the damaged object to be in a0
0000AE44 4EB9 0000 0000                     jsr    Sonic_CheckGoSuper ; run the Touch_ChkHurt routine
0000AE4A 205F                               move.l    (sp)+,a0 ; pop the previous value of a0 from the stack, and increment stack pointer
0000AE4C 4E75                               rts ; The Eggman monitor now does something!
0000AE4E                            
0000AE4E                            ; ===========================================================================
0000AE4E                            
0000AE4E                            Obj2E_ChkSonic:
0000AE4E 0C00 0002                  		cmpi.b	#2,d0		; does monitor contain Sonic?
0000AE52 6600                       		bne.s	Obj2E_ChkShoes
0000AE54                            
0000AE54                            ExtraLife:
0000AE54 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to the	number of lives	you have
0000AE58 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to the	lives counter
0000AE5C 303C 0088                  		move.w	#$88,d0
0000AE60 4EF9 0000 1476             		jmp	(PlaySound).l	; play extra life music
0000AE66                            ; ===========================================================================
0000AE66                            
0000AE66                            Obj2E_ChkShoes:
0000AE66 0C00 0003                  		cmpi.b	#3,d0		; does monitor contain speed shoes?
0000AE6A 6600                       		bne.s	Obj2E_ChkShield
0000AE6C 0C38 0001 FE19             		cmpi.b #1,(Super_Sonic_Flag).w ; Prevent Sonic from getting (invincibility, shoes) if Super
0000AE72 6700 0000                                  beq Obj2E_NoMusic		
0000AE76 11FC 0001 FE2E             		move.b	#1,($FFFFFE2E).w ; speed up the	BG music
0000AE7C 31FC 04B0 D034             		move.w	#$4B0,($FFFFD034).w ; time limit for the power-up
0000AE82 31FC 0C00 F760             		move.w	#$C00,($FFFFF760).w ; change Sonic's top speed
0000AE88 31FC 0018 F762             		move.w	#$18,($FFFFF762).w
0000AE8E 31FC 0080 F764             		move.w	#$80,($FFFFF764).w
0000AE94 303C 009E                  		move.w	#$9E,d0
0000AE98 4EF9 0000 1476             		jmp	(PlaySound).l	; Speed	up the music
0000AE9E                            ; ===========================================================================
0000AE9E                            
0000AE9E                            Obj2E_ChkShield:
0000AE9E 0C00 0004                  		cmpi.b	#4,d0		; does monitor contain a shield?
0000AEA2 6600                       		bne.s	Obj2E_ChkInvinc
0000AEA4 11FC 0001 FE2C             		move.b	#1,($FFFFFE2C).w ; give	Sonic a	shield
0000AEAA 11FC 0038 D180             		move.b	#$38,($FFFFD180).w ; load shield object	($38)
0000AEB0 303C 00AF                  		move.w	#$AF,d0
0000AEB4 4EF9 0000 1476             		jmp	(PlaySound).l	; play shield sound
0000AEBA                            ; ===========================================================================
0000AEBA                            
0000AEBA                            Obj2E_ChkInvinc:
0000AEBA 0C00 0005                  		cmpi.b	#5,d0		; does monitor contain invincibility?
0000AEBE 6600                       		bne.s	Obj2E_ChkRings
0000AEC0 0C38 0001 FE19             		cmpi.b #1,(Super_Sonic_Flag).w ; Prevent Sonic from getting (invincibility, shoes) if Super
0000AEC6 6700 0000                                  beq Obj2E_NoMusic		
0000AECA 11FC 0001 FE2D             		move.b	#1,($FFFFFE2D).w ; make	Sonic invincible
0000AED0 31FC 04B0 D032             		move.w	#$4B0,($FFFFD032).w ; time limit for the power-up
0000AED6 11FC 0038 D200             		move.b	#$38,($FFFFD200).w ; load stars	object ($3801)
0000AEDC 11FC 0001 D21C             		move.b	#1,($FFFFD21C).w
0000AEE2 11FC 0038 D240             		move.b	#$38,($FFFFD240).w ; load stars	object ($3802)
0000AEE8 11FC 0002 D25C             		move.b	#2,($FFFFD25C).w
0000AEEE 11FC 0038 D280             		move.b	#$38,($FFFFD280).w ; load stars	object ($3803)
0000AEF4 11FC 0003 D29C             		move.b	#3,($FFFFD29C).w
0000AEFA 11FC 0038 D2C0             		move.b	#$38,($FFFFD2C0).w ; load stars	object ($3804)
0000AF00 11FC 0004 D2DC             		move.b	#4,($FFFFD2DC).w
0000AF06 4A38 F7AA                  		tst.b	($FFFFF7AA).w	; is boss mode on?
0000AF0A 6600                       		bne.s	Obj2E_NoMusic	; if yes, branch
0000AF0C 303C 0087                  		move.w	#$87,d0
0000AF10 4EF9 0000 1476             		jmp	(PlaySound).l	; play invincibility music
0000AF16                            ; ===========================================================================
0000AF16                            
0000AF16                            Obj2E_NoMusic:
0000AF16 4E75                       		rts	
0000AF18                            ; ===========================================================================
0000AF18                            
0000AF18                            Obj2E_ChkRings:
0000AF18 0C00 0006                  		cmpi.b	#6,d0		; does monitor contain 10 rings?
0000AF1C 6600                       		bne.s	Obj2E_ChkS
0000AF1E 0678 004A FE20             		addi.w	#$4A,($FFFFFE20).w ; add	10 rings to the	number of rings	you have
0000AF24 0038 0001 FE1D             		ori.b	#1,($FFFFFE1D).w ; update the ring counter
0000AF2A 0C78 0064 FE20             		cmpi.w	#100,($FFFFFE20).w ; check if you have 100 rings
0000AF30 6500                       		bcs.s	Obj2E_RingSound
0000AF32 08F8 0001 FE1B             		bset	#1,($FFFFFE1B).w
0000AF38 6700 FF1A                  		beq.w	ExtraLife
0000AF3C 0C78 00C8 FE20             		cmpi.w	#200,($FFFFFE20).w ; check if you have 200 rings
0000AF42 6500                       		bcs.s	Obj2E_RingSound
0000AF44 08F8 0002 FE1B             		bset	#2,($FFFFFE1B).w
0000AF4A 6700 FF08                  		beq.w	ExtraLife
0000AF4E                            
0000AF4E                            Obj2E_RingSound:
0000AF4E 303C 00B5                  		move.w	#$B5,d0
0000AF52 4EF9 0000 1476             		jmp	(PlaySound).l	; play ring sound
0000AF58                            ; ===========================================================================
0000AF58                            
0000AF58                            Obj2E_ChkS:
0000AF58 0C00 0007                  		cmpi.b	#7,d0		; does monitor contain 'S'
0000AF5C 6600                       		bne.s	Obj2E_ChkEnd
0000AF5E 4E71                       		nop	
0000AF60                            
0000AF60                            Obj2E_ChkEnd:
0000AF60 4E75                       		rts			; 'S' and goggles monitors do nothing
0000AF62                            ; ===========================================================================
0000AF62                            
0000AF62                            Obj2E_Delete:				; XREF: Obj2E_Index
0000AF62 5368 001E                  		subq.w	#1,$1E(a0)
0000AF66 6B00 0000                  		bmi.w	DeleteObject
0000AF6A 4E75                       		rts	
0000AF6C                            ; ---------------------------------------------------------------------------
0000AF6C                            ; Subroutine to	make the sides of a monitor solid
0000AF6C                            ; ---------------------------------------------------------------------------
0000AF6C                            
0000AF6C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000AF6C                            
0000AF6C                            
0000AF6C                            Obj26_SolidSides:			; XREF: loc_A1EC
0000AF6C 43F8 D000                  		lea	($FFFFD000).w,a1
0000AF70 3029 0008                  		move.w	8(a1),d0
0000AF74 9068 0008                  		sub.w	8(a0),d0
0000AF78 D041                       		add.w	d1,d0
0000AF7A 6B00                       		bmi.s	loc_A4E6
0000AF7C 3601                       		move.w	d1,d3
0000AF7E D643                       		add.w	d3,d3
0000AF80 B043                       		cmp.w	d3,d0
0000AF82 6200                       		bhi.s	loc_A4E6
0000AF84 1629 0016                  		move.b	$16(a1),d3
0000AF88 4883                       		ext.w	d3
0000AF8A D443                       		add.w	d3,d2
0000AF8C 3629 000C                  		move.w	$C(a1),d3
0000AF90 9668 000C                  		sub.w	$C(a0),d3
0000AF94 D642                       		add.w	d2,d3
0000AF96 6B00                       		bmi.s	loc_A4E6
0000AF98 D442                       		add.w	d2,d2
0000AF9A B642                       		cmp.w	d2,d3
0000AF9C 6400                       		bcc.s	loc_A4E6
0000AF9E 4A38 F7C8                  		tst.b	($FFFFF7C8).w
0000AFA2 6B00                       		bmi.s	loc_A4E6
0000AFA4 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000AFAA 6400                       		bcc.s	loc_A4E6
0000AFAC 4A78 FE08                  		tst.w	($FFFFFE08).w
0000AFB0 6600                       		bne.s	loc_A4E6
0000AFB2 B240                       		cmp.w	d0,d1
0000AFB4 6400                       		bcc.s	loc_A4DC
0000AFB6 D241                       		add.w	d1,d1
0000AFB8 9041                       		sub.w	d1,d0
0000AFBA                            
0000AFBA                            loc_A4DC:
0000AFBA 0C43 0010                  		cmpi.w	#$10,d3
0000AFBE 6500                       		bcs.s	loc_A4EA
0000AFC0                            
0000AFC0                            loc_A4E2:
0000AFC0 7201                       		moveq	#1,d1
0000AFC2 4E75                       		rts	
0000AFC4                            ; ===========================================================================
0000AFC4                            
0000AFC4                            loc_A4E6:
0000AFC4 7200                       		moveq	#0,d1
0000AFC6 4E75                       		rts	
0000AFC8                            ; ===========================================================================
0000AFC8                            
0000AFC8                            loc_A4EA:
0000AFC8 7200                       		moveq	#0,d1
0000AFCA 1228 0019                  		move.b	$19(a0),d1
0000AFCE 5841                       		addq.w	#4,d1
0000AFD0 3401                       		move.w	d1,d2
0000AFD2 D442                       		add.w	d2,d2
0000AFD4 D269 0008                  		add.w	8(a1),d1
0000AFD8 9268 0008                  		sub.w	8(a0),d1
0000AFDC 6BE2                       		bmi.s	loc_A4E2
0000AFDE B242                       		cmp.w	d2,d1
0000AFE0 64DE                       		bcc.s	loc_A4E2
0000AFE2 72FF                       		moveq	#-1,d1
0000AFE4 4E75                       		rts	
0000AFE6                            ; End of function Obj26_SolidSides
0000AFE6                            
0000AFE6                            ; ===========================================================================
0000AFE6                            Ani_obj26:
0000AFE6                            	include "_anim\obj26.asm"
0000AFE6                            ; ---------------------------------------------------------------------------
0000AFE6                            ; Animation script - monitors
0000AFE6                            ; ---------------------------------------------------------------------------
0000AFE6 0000 0000 0000             		dc.w byte_A51C-Ani_obj26, byte_A522-Ani_obj26, byte_A52E-Ani_obj26
0000AFEC 0000 0000 0000             		dc.w byte_A53A-Ani_obj26, byte_A546-Ani_obj26, byte_A552-Ani_obj26
0000AFF2 0000 0000 0000             		dc.w byte_A55E-Ani_obj26, byte_A56A-Ani_obj26, byte_A576-Ani_obj26
0000AFF8 0000                       		dc.w byte_A582-Ani_obj26
0000AFFA 0100 0102 FF00             byte_A51C:	dc.b 1,	0, 1, 2, $FF, 0
0000B000 0100 0303 0103 0302 0303+  byte_A522:	dc.b 1,	0, 3, 3, 1, 3, 3, 2, 3,	3, $FF,	0
0000B00C 0100 0404 0104 0402 0404+  byte_A52E:	dc.b 1,	0, 4, 4, 1, 4, 4, 2, 4,	4, $FF,	0
0000B018 0100 0505 0105 0502 0505+  byte_A53A:	dc.b 1,	0, 5, 5, 1, 5, 5, 2, 5,	5, $FF,	0
0000B024 0100 0606 0106 0602 0606+  byte_A546:	dc.b 1,	0, 6, 6, 1, 6, 6, 2, 6,	6, $FF,	0
0000B030 0100 0707 0107 0702 0707+  byte_A552:	dc.b 1,	0, 7, 7, 1, 7, 7, 2, 7,	7, $FF,	0
0000B03C 0100 0808 0108 0802 0808+  byte_A55E:	dc.b 1,	0, 8, 8, 1, 8, 8, 2, 8,	8, $FF,	0
0000B048 0100 0909 0109 0902 0909+  byte_A56A:	dc.b 1,	0, 9, 9, 1, 9, 9, 2, 9,	9, $FF,	0
0000B054 0100 0A0A 010A 0A02 0A0A+  byte_A576:	dc.b 1,	0, $A, $A, 1, $A, $A, 2, $A, $A, $FF, 0
0000B060 0200 0102 0BFE 0100        byte_A582:	dc.b 2,	0, 1, 2, $B, $FE, 1, 0
0000B068                            		even
0000B068                            		even
0000B068                            
0000B068                            ; ---------------------------------------------------------------------------
0000B068                            ; Sprite mappings - monitors
0000B068                            ; ---------------------------------------------------------------------------
0000B068                            Map_obj26:
0000B068                            	include "_maps\obj26.asm"
0000B068                            ; ---------------------------------------------------------------------------
0000B068                            ; Sprite mappings - monitors (Optimized) Ported by -paranoimia-
0000B068                            ; ---------------------------------------------------------------------------
0000B068 0000 0000                  		dc.w byte_A5A2-Map_obj26, byte_A5A8-Map_obj26
0000B06C 0000 0000                  		dc.w byte_A5B3-Map_obj26, byte_A5BE-Map_obj26
0000B070 0000 0000                  		dc.w byte_A5C9-Map_obj26, byte_A5D4-Map_obj26
0000B074 0000 0000                  		dc.w byte_A5DF-Map_obj26, byte_A5EA-Map_obj26
0000B078 0000 0000                  		dc.w byte_A5F5-Map_obj26, byte_A600-Map_obj26
0000B07C 0000 0000                  		dc.w byte_A60B-Map_obj26, byte_A616-Map_obj26
0000B080 01                         byte_A5A2:	dc.b 1			; static monitor
0000B081 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000B086 02                         byte_A5A8:	dc.b 2			; static monitor
0000B087 F505 0010 F8               		dc.b $F5, 5, 0,	$10, $F8
0000B08C EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000B091 02                         byte_A5B3:	dc.b 2			; static monitor
0000B092 F505 0014 F8               		dc.b $F5, 5, 0,	$14, $F8
0000B097 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000B09C 02                         byte_A5BE:	dc.b 2			; Eggman monitor
0000B09D F505 0018 F8               		dc.b $F5, 5, 0,	$18, $F8
0000B0A2 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000B0A7 02                         byte_A5C9:	dc.b 2			; Sonic	monitor
0000B0A8 F505 001C F8               		dc.b $F5, 5, 0,	$1C, $F8
0000B0AD EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000B0B2 02                         byte_A5D4:	dc.b 2			; speed	shoes monitor
0000B0B3 F505 0024 F8               		dc.b $F5, 5, 0,	$24, $F8
0000B0B8 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000B0BD 02                         byte_A5DF:	dc.b 2			; shield monitor
0000B0BE F505 0028 F8               		dc.b $F5, 5, 0,	$28, $F8
0000B0C3 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000B0C8 02                         byte_A5EA:	dc.b 2			; invincibility	monitor
0000B0C9 F505 002C F8               		dc.b $F5, 5, 0,	$2C, $F8
0000B0CE EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000B0D3 02                         byte_A5F5:	dc.b 2			; 10 rings monitor
0000B0D4 F505 0020 F8               		dc.b $F5, 5, 0,	$20, $F8
0000B0D9 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000B0DE 02                         byte_A600:	dc.b 2			; 'S' monitor
0000B0DF F505 003C F8               		dc.b $F5, 5, 0,	$3C, $F8
0000B0E4 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000B0E9 02                         byte_A60B:	dc.b 2			; goggles monitor
0000B0EA F505 0038 F8               		dc.b $F5, 5, 0,	$38, $F8
0000B0EF EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000B0F4 01                         byte_A616:	dc.b 1			; broken monitor
0000B0F5 FF0D 0030 F0               		dc.b $FF, $D, 0, $30, $F0
0000B0FA                            		even
0000B0FA                            		even
0000B0FA                            
0000B0FA                            ; ===========================================================================
0000B0FA                            ; ---------------------------------------------------------------------------
0000B0FA                            ; Object 0E - Sonic on the title screen
0000B0FA                            ; ---------------------------------------------------------------------------
0000B0FA                            
0000B0FA                            Obj0E:					; XREF: Obj_Index
0000B0FA 7000                       		moveq	#0,d0
0000B0FC 1028 0024                  		move.b	$24(a0),d0
0000B100 323B 0000                  		move.w	Obj0E_Index(pc,d0.w),d1
0000B104 4EFB 1000                  		jmp	Obj0E_Index(pc,d1.w)
0000B108                            ; ===========================================================================
0000B108 0000                       Obj0E_Index:	dc.w Obj0E_Main-Obj0E_Index
0000B10A 0000                       		dc.w Obj0E_Delay-Obj0E_Index
0000B10C 0000                       		dc.w Obj0E_Move-Obj0E_Index
0000B10E 0000                       		dc.w Obj0E_Animate-Obj0E_Index
0000B110                            ; ===========================================================================
0000B110                            
0000B110                            Obj0E_Main:				; XREF: Obj0E_Index
0000B110 5428 0024                  		addq.b	#2,$24(a0)
0000B114 317C 00F8 0008             		move.w	#$F8,8(a0)
0000B11A 317C 00DE 000A             		move.w	#$DE,$A(a0)
0000B120 217C 0000 0000 0004        		move.l	#Map_obj0E,4(a0)
0000B128 317C 2300 0002             		move.w	#$2300,2(a0)
0000B12E 117C 0001 0018             		move.b	#1,$18(a0)
0000B134 117C 001D 001F             		move.b	#29,$1F(a0)	; set time delay to 0.5	seconds
0000B13A 43F9 0000 0000             		lea	(Ani_obj0E).l,a1
0000B140 6100 0000                  		bsr.w	AnimateSprite
0000B144                            
0000B144                            Obj0E_Delay:				; XREF: Obj0E_Index
0000B144 5328 001F                  		subq.b	#1,$1F(a0)	; subtract 1 from time delay
0000B148 6A00                       		bpl.s	Obj0E_Wait	; if time remains, branch
0000B14A 5428 0024                  		addq.b	#2,$24(a0)	; go to	next routine
0000B14E 6000 0000                  		bra.w	DisplaySprite
0000B152                            ; ===========================================================================
0000B152                            
0000B152                            Obj0E_Wait:				; XREF: Obj0E_Delay
0000B152 4E75                       		rts	
0000B154                            ; ===========================================================================
0000B154                            
0000B154                            Obj0E_Move:				; XREF: Obj0E_Index
0000B154 5168 000A                  		subq.w	#8,$A(a0)
0000B158 0C68 0096 000A             		cmpi.w	#$96,$A(a0)
0000B15E 6600                       		bne.s	Obj0E_Display
0000B160 5428 0024                  		addq.b	#2,$24(a0)
0000B164                            
0000B164                            Obj0E_Display:
0000B164 6000 0000                  		bra.w	DisplaySprite
0000B168                            ; ===========================================================================
0000B168 4E75                       		rts	
0000B16A                            ; ===========================================================================
0000B16A                            
0000B16A                            Obj0E_Animate:				; XREF: Obj0E_Index
0000B16A 43F9 0000 0000             		lea	(Ani_obj0E).l,a1
0000B170 6100 0000                  		bsr.w	AnimateSprite
0000B174 6000 0000                  		bra.w	DisplaySprite
0000B178                            ; ===========================================================================
0000B178 4E75                       		rts	
0000B17A                            ; ===========================================================================
0000B17A                            ; ---------------------------------------------------------------------------
0000B17A                            ; Object 0F - "PRESS START BUTTON" and "TM" from title screen
0000B17A                            ; ---------------------------------------------------------------------------
0000B17A                            
0000B17A                            Obj0F:					; XREF: Obj_Index
0000B17A 7000                       		moveq	#0,d0
0000B17C 1028 0024                  		move.b	$24(a0),d0
0000B180 323B 0000                  		move.w	Obj0F_Index(pc,d0.w),d1
0000B184 4EBB 1000                  		jsr	Obj0F_Index(pc,d1.w)
0000B188 6000 0000                  		bra.w	DisplaySprite
0000B18C                            ; ===========================================================================
0000B18C 0000                       Obj0F_Index:	dc.w Obj0F_Main-Obj0F_Index
0000B18E 0000                       		dc.w Obj0F_PrsStart-Obj0F_Index
0000B190 0000                       		dc.w locret_A6F8-Obj0F_Index
0000B192                            ; ===========================================================================
0000B192                            
0000B192                            Obj0F_Main:				; XREF: Obj0F_Index
0000B192 5428 0024                  		addq.b	#2,$24(a0)
0000B196 317C 00D8 0008             		move.w	#$D8,8(a0)
0000B19C 317C 0130 000A             		move.w	#$130,$A(a0)
0000B1A2 217C 0000 0000 0004        		move.l	#Map_obj0F,4(a0)
0000B1AA 317C 0200 0002             		move.w	#$200,2(a0)
0000B1B0 0C28 0002 001A             		cmpi.b	#2,$1A(a0)	; is object "PRESS START"?
0000B1B6 6500                       		bcs.s	Obj0F_PrsStart	; if yes, branch
0000B1B8 5428 0024                  		addq.b	#2,$24(a0)
0000B1BC 0C28 0003 001A             		cmpi.b	#3,$1A(a0)	; is the object	"TM"?
0000B1C2 6600                       		bne.s	locret_A6F8	; if not, branch
0000B1C4 317C 2510 0002             		move.w	#$2510,2(a0)	; "TM" specific	code
0000B1CA 317C 0178 0008             		move.w	#$178,8(a0)
0000B1D0 317C 00F8 000A             		move.w	#$F8,$A(a0)
0000B1D6                            
0000B1D6                            locret_A6F8:				; XREF: Obj0F_Index
0000B1D6 4E75                       		rts	
0000B1D8                            ; ===========================================================================
0000B1D8                            
0000B1D8                            Obj0F_PrsStart:				; XREF: Obj0F_Index
0000B1D8 43F9 0000 0000             		lea	(Ani_obj0F).l,a1
0000B1DE 6000 0000                  		bra.w	AnimateSprite
0000B1E2                            ; ===========================================================================
0000B1E2                            Ani_obj0E:
0000B1E2                            	include "_anim\obj0E.asm"
0000B1E2                            ; ---------------------------------------------------------------------------
0000B1E2                            ; Animation script - Sonic on the title screen
0000B1E2                            ; ---------------------------------------------------------------------------
0000B1E2 0000                       		dc.w byte_A706-Ani_obj0E
0000B1E4 0700 0102 0304 0506 07FE+  byte_A706:	dc.b 7,	0, 1, 2, 3, 4, 5, 6, 7,	$FE, 2,	0
0000B1F0                            		even
0000B1F0                            		even
0000B1F0                            
0000B1F0                            Ani_obj0F:
0000B1F0                            	include "_anim\obj0F.asm"
0000B1F0                            ; ---------------------------------------------------------------------------
0000B1F0                            ; Animation script - "TM" and "PRESS START BUTTON" on the title screen
0000B1F0                            ; ---------------------------------------------------------------------------
0000B1F0 0000                       		dc.w byte_A714-Ani_obj0F
0000B1F2 1F00 01FF                  byte_A714:	dc.b $1F, 0, 1,	$FF
0000B1F6                            		even
0000B1F6                            		even
0000B1F6                            
0000B1F6                            ; ---------------------------------------------------------------------------
0000B1F6                            ; Subroutine to	animate	a sprite using an animation script
0000B1F6                            ; ---------------------------------------------------------------------------
0000B1F6                            
0000B1F6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B1F6                            
0000B1F6                            
0000B1F6                            AnimateSprite:
0000B1F6 7000                       		moveq	#0,d0
0000B1F8 1028 001C                  		move.b	$1C(a0),d0	; move animation number	to d0
0000B1FC B028 001D                  		cmp.b	$1D(a0),d0	; is animation set to restart?
0000B200 6700                       		beq.s	Anim_Run	; if not, branch
0000B202 1140 001D                  		move.b	d0,$1D(a0)	; set to "no restart"
0000B206 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
0000B20C 117C 0000 001E             		move.b	#0,$1E(a0)	; reset	frame duration
0000B212                            
0000B212                            Anim_Run:
0000B212 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
0000B216 6A00                       		bpl.s	Anim_Wait	; if time remains, branch
0000B218 D040                       		add.w	d0,d0
0000B21A D2F1 0000                  		adda.w	(a1,d0.w),a1	; jump to appropriate animation	script
0000B21E 1151 001E                  		move.b	(a1),$1E(a0)	; load frame duration
0000B222 7200                       		moveq	#0,d1
0000B224 1228 001B                  		move.b	$1B(a0),d1	; load current frame number
0000B228 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number from script
0000B22C 0C00 00FA                  		cmp.b	#$FA,d0					; MJ: is it a flag from FA to FF?
0000B230 6400 0000                  		bhs	Anim_End_FF				; MJ: if so, branch to flag routines
0000B234                            
0000B234                            Anim_Next:
0000B234 1200                       		move.b	d0,d1
0000B236 0200 001F                  		andi.b	#$1F,d0
0000B23A 1140 001A                  		move.b	d0,$1A(a0)	; load sprite number
0000B23E 1028 0022                  		move.b	$22(a0),d0
0000B242 E719                       		rol.b	#3,d1
0000B244 B101                       		eor.b	d0,d1
0000B246 0201 0003                  		andi.b	#3,d1
0000B24A 0228 00FC 0001             		andi.b	#$FC,1(a0)
0000B250 8328 0001                  		or.b	d1,1(a0)
0000B254 5228 001B                  		addq.b	#1,$1B(a0)	; next frame number
0000B258                            
0000B258                            Anim_Wait:
0000B258 4E75                       		rts	
0000B25A                            ; ===========================================================================
0000B25A                            
0000B25A                            Anim_End_FF:
0000B25A 5200                       		addq.b	#1,d0		; is the end flag = $FF	?
0000B25C 6600                       		bne.s	Anim_End_FE	; if not, branch
0000B25E 117C 0000 001B             		move.b	#0,$1B(a0)	; restart the animation
0000B264 1029 0001                  		move.b	1(a1),d0	; read sprite number
0000B268 60CA                       		bra.s	Anim_Next
0000B26A                            ; ===========================================================================
0000B26A                            
0000B26A                            Anim_End_FE:
0000B26A 5200                       		addq.b	#1,d0		; is the end flag = $FE	?
0000B26C 6600                       		bne.s	Anim_End_FD	; if not, branch
0000B26E 1031 1002                  		move.b	2(a1,d1.w),d0	; read the next	byte in	the script
0000B272 9128 001B                  		sub.b	d0,$1B(a0)	; jump back d0 bytes in	the script
0000B276 9200                       		sub.b	d0,d1
0000B278 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number
0000B27C 60B6                       		bra.s	Anim_Next
0000B27E                            ; ===========================================================================
0000B27E                            
0000B27E                            Anim_End_FD:
0000B27E 5200                       		addq.b	#1,d0		; is the end flag = $FD	?
0000B280 6600                       		bne.s	Anim_End_FC	; if not, branch
0000B282 1171 1002 001C             		move.b	2(a1,d1.w),$1C(a0) ; read next byte, run that animation
0000B288                            
0000B288                            Anim_End_FC:
0000B288 5200                       		addq.b	#1,d0		; is the end flag = $FC	?
0000B28A 6600                       		bne.s	Anim_End_FB	; if not, branch
0000B28C 5428 0024                  		addq.b	#2,$24(a0)	; jump to next routine
0000B290                            
0000B290                            Anim_End_FB:
0000B290 5200                       		addq.b	#1,d0		; is the end flag = $FB	?
0000B292 6600                       		bne.s	Anim_End_FA	; if not, branch
0000B294 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
0000B29A 4228 0025                  		clr.b	$25(a0)		; reset	2nd routine counter
0000B29E                            
0000B29E                            Anim_End_FA:
0000B29E 5200                       		addq.b	#1,d0		; is the end flag = $FA	?
0000B2A0 6600                       		bne.s	Anim_End	; if not, branch
0000B2A2 5428 0025                  		addq.b	#2,$25(a0)	; jump to next routine
0000B2A6                            
0000B2A6                            Anim_End:
0000B2A6 4E75                       		rts	
0000B2A8                            ; End of function AnimateSprite
0000B2A8                            
0000B2A8                            ; ===========================================================================
0000B2A8                            ; ---------------------------------------------------------------------------
0000B2A8                            ; Sprite mappings - "PRESS START BUTTON" and "TM" from title screen
0000B2A8                            ; ---------------------------------------------------------------------------
0000B2A8                            Map_obj0F:
0000B2A8                            	include "_maps\obj0F.asm"
0000B2A8                            ; ---------------------------------------------------------------------------
0000B2A8                            ; Sprite mappings - "PRESS START BUTTON" and "TM" from title screen
0000B2A8                            ; ---------------------------------------------------------------------------
0000B2A8 0000                       		dc.w byte_A7CD-Map_obj0F
0000B2AA 0000                       		dc.w byte_A7CC-Map_obj0F
0000B2AC 0000                       		dc.w byte_A7EB-Map_obj0F
0000B2AE 0000                       		dc.w byte_A882-Map_obj0F
0000B2B0 06                         byte_A7CC:	dc.b 6			; "PRESS START BUTTON"
0000B2B1 000C 00F0 00               byte_A7CD:	dc.b 0,	$C, 0, $F0, 0
0000B2B6 0000 00F3 20               		dc.b 0,	0, 0, $F3, $20
0000B2BB 0000 00F3 30               		dc.b 0,	0, 0, $F3, $30
0000B2C0 000C 00F4 38               		dc.b 0,	$C, 0, $F4, $38
0000B2C5 0008 00F8 60               		dc.b 0,	8, 0, $F8, $60
0000B2CA 0008 00FB 78               		dc.b 0,	8, 0, $FB, $78
0000B2CF 1E                         byte_A7EB:	dc.b $1E		; sprite list filler
0000B2D0 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B2D5 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B2DA B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B2DF B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B2E4 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B2E9 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B2EE B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B2F3 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B2F8 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B2FD B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B302 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B307 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B30C D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B311 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B316 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B31B D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B320 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B325 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B32A D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B32F D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B334 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B339 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B33E F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B343 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B348 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B34D F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B352 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B357 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B35C F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B361 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B366 01                         byte_A882:	dc.b 1			; "TM"
0000B367 FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8
0000B36C                            		even
0000B36C                            		even
0000B36C                            
0000B36C                            ; ---------------------------------------------------------------------------
0000B36C                            ; Sprite mappings - Sonic on the title screen
0000B36C                            ; ---------------------------------------------------------------------------
0000B36C                            Map_obj0E:
0000B36C                            	include "_maps\obj0E.asm"
0000B36C                            ; ---------------------------------------------------------------------------
0000B36C                            ; Sprite mappings - Sonic on the title screen
0000B36C                            ; ---------------------------------------------------------------------------
0000B36C 0000                       		dc.w byte_A898-Map_obj0E
0000B36E 0000                       		dc.w byte_A8CB-Map_obj0E
0000B370 0000                       		dc.w byte_A917-Map_obj0E
0000B372 0000                       		dc.w byte_A96D-Map_obj0E
0000B374 0000                       		dc.w byte_A9AF-Map_obj0E
0000B376 0000                       		dc.w byte_A9E7-Map_obj0E
0000B378 0000                       		dc.w byte_AA47-Map_obj0E
0000B37A 0000                       		dc.w byte_AAB1-Map_obj0E
0000B37C 0A                         byte_A898:	dc.b $A
0000B37D 0808 0000 08               		dc.b 8,	8, 0, 0, 8
0000B382 100F 0003 08               		dc.b $10, $F, 0, 3, 8
0000B387 100F 0013 28               		dc.b $10, $F, 0, $13, $28
0000B38C 300E 0023 08               		dc.b $30, $E, 0, $23, 8
0000B391 300E 002F 28               		dc.b $30, $E, 0, $2F, $28
0000B396 480D 003B 00               		dc.b $48, $D, 0, $3B, 0
0000B39B 4809 0043 20               		dc.b $48, 9, 0,	$43, $20
0000B3A0 4800 0049 38               		dc.b $48, 0, 0,	$49, $38
0000B3A5 580C 004A 08               		dc.b $58, $C, 0, $4A, 8
0000B3AA 5800 004E 28               		dc.b $58, 0, 0,	$4E, $28
0000B3AF 0F                         byte_A8CB:	dc.b $F
0000B3B0 480E 01BD 20               		dc.b $48, $E, 1, $BD, $20
0000B3B5 3805 01C9 38               		dc.b $38, 5, 1,	$C9, $38
0000B3BA 4000 01CD 30               		dc.b $40, 0, 1,	$CD, $30
0000B3BF 4800 01CE 40               		dc.b $48, 0, 1,	$CE, $40
0000B3C4 6000 01CF 20               		dc.b $60, 0, 1,	$CF, $20
0000B3C9 100E 004F 08               		dc.b $10, $E, 0, $4F, 8
0000B3CE 100E 005B 28               		dc.b $10, $E, 0, $5B, $28
0000B3D3 1801 0067 48               		dc.b $18, 1, 0,	$67, $48
0000B3D8 2802 0069 00               		dc.b $28, 2, 0,	$69, 0
0000B3DD 280F 006C 08               		dc.b $28, $F, 0, $6C, 8
0000B3E2 280F 007C 28               		dc.b $28, $F, 0, $7C, $28
0000B3E7 3002 008C 48               		dc.b $30, 2, 0,	$8C, $48
0000B3EC 480E 008F 10               		dc.b $48, $E, 0, $8F, $10
0000B3F1 4809 009B 30               		dc.b $48, 9, 0,	$9B, $30
0000B3F6 5804 00A1 30               		dc.b $58, 4, 0,	$A1, $30
0000B3FB 11                         byte_A917:	dc.b $11
0000B3FC 380E 01BD 28               		dc.b $38, $E, 1, $BD, $28
0000B401 2805 01C9 40               		dc.b $28, 5, 1,	$C9, $40
0000B406 3000 01CD 38               		dc.b $30, 0, 1,	$CD, $38
0000B40B 3800 01CE 48               		dc.b $38, 0, 1,	$CE, $48
0000B410 5000 01CF 28               		dc.b $50, 0, 1,	$CF, $28
0000B415 200F 01A9 08               		dc.b $20, $F, 1, $A9, 8
0000B41A 2003 01B9 28               		dc.b $20, 3, 1,	$B9, $28
0000B41F 100E 004F 08               		dc.b $10, $E, 0, $4F, 8
0000B424 100E 005B 28               		dc.b $10, $E, 0, $5B, $28
0000B429 1801 0067 48               		dc.b $18, 1, 0,	$67, $48
0000B42E 2802 0069 00               		dc.b $28, 2, 0,	$69, 0
0000B433 280F 006C 08               		dc.b $28, $F, 0, $6C, 8
0000B438 280F 007C 28               		dc.b $28, $F, 0, $7C, $28
0000B43D 3002 008C 48               		dc.b $30, 2, 0,	$8C, $48
0000B442 480E 008F 10               		dc.b $48, $E, 0, $8F, $10
0000B447 4809 009B 30               		dc.b $48, 9, 0,	$9B, $30
0000B44C 5804 00A1 30               		dc.b $58, 4, 0,	$A1, $30
0000B451 0D                         byte_A96D:	dc.b $D
0000B452 100F 00A3 08               		dc.b $10, $F, 0, $A3, 8
0000B457 0808 00B3 28               		dc.b 8,	8, 0, $B3, $28
0000B45C 100F 00B6 28               		dc.b $10, $F, 0, $B6, $28
0000B461 1800 00C6 48               		dc.b $18, 0, 0,	$C6, $48
0000B466 2006 00C7 48               		dc.b $20, 6, 0,	$C7, $48
0000B46B 3800 00CD 48               		dc.b $38, 0, 0,	$CD, $48
0000B470 300D 00CE 08               		dc.b $30, $D, 0, $CE, 8
0000B475 300E 00D6 28               		dc.b $30, $E, 0, $D6, $28
0000B47A 400B 00E2 10               		dc.b $40, $B, 0, $E2, $10
0000B47F 4808 00EE 28               		dc.b $48, 8, 0,	$EE, $28
0000B484 5001 00F1 08               		dc.b $50, 1, 0,	$F1, 8
0000B489 5004 00F3 28               		dc.b $50, 4, 0,	$F3, $28
0000B48E 5800 00F5 28               		dc.b $58, 0, 0,	$F5, $28
0000B493 0B                         byte_A9AF:	dc.b $B
0000B494 080F 00F6 10               		dc.b 8,	$F, 0, $F6, $10
0000B499 080B 0106 30               		dc.b 8,	$B, 1, 6, $30
0000B49E 1006 0112 48               		dc.b $10, 6, 1,	$12, $48
0000B4A3 280E 0118 18               		dc.b $28, $E, 1, $18, $18
0000B4A8 280E 0124 38               		dc.b $28, $E, 1, $24, $38
0000B4AD 2801 0130 10               		dc.b $28, 1, 1,	$30, $10
0000B4B2 400E 0132 10               		dc.b $40, $E, 1, $32, $10
0000B4B7 4006 013E 30               		dc.b $40, 6, 1,	$3E, $30
0000B4BC 4004 0144 40               		dc.b $40, 4, 1,	$44, $40
0000B4C1 4800 0146 40               		dc.b $48, 0, 1,	$46, $40
0000B4C6 5808 0147 18               		dc.b $58, 8, 1,	$47, $18
0000B4CB 13                         byte_A9E7:	dc.b $13
0000B4CC 280E 01E4 38               		dc.b $28, $E, 1, $E4, $38
0000B4D1 1805 01F0 48               		dc.b $18, 5, 1,	$F0, $48
0000B4D6 4008 01F4 38               		dc.b $40, 8, 1,	$F4, $38
0000B4DB 4804 01F7 38               		dc.b $48, 4, 1,	$F7, $38
0000B4E0 100F 014A 10               		dc.b $10, $F, 1, $4A, $10
0000B4E5 0804 015A 20               		dc.b 8,	4, 1, $5A, $20
0000B4EA 000B 015C 30               		dc.b 0,	$B, 1, $5C, $30
0000B4EF 0800 0168 48               		dc.b 8,	0, 1, $68, $48
0000B4F4 1800 0169 48               		dc.b $18, 0, 1,	$69, $48
0000B4F9 1805 016A 00               		dc.b $18, 5, 1,	$6A, 0
0000B4FE 2802 016E 08               		dc.b $28, 2, 1,	$6E, 8
0000B503 300F 0171 10               		dc.b $30, $F, 1, $71, $10
0000B508 200D 0181 30               		dc.b $20, $D, 1, $81, $30
0000B50D 2001 0189 50               		dc.b $20, 1, 1,	$89, $50
0000B512 3008 018B 30               		dc.b $30, 8, 1,	$8B, $30
0000B517 380E 018E 30               		dc.b $38, $E, 1, $8E, $30
0000B51C 500D 019A 08               		dc.b $50, $D, 1, $9A, 8
0000B521 500C 01A2 28               		dc.b $50, $C, 1, $A2, $28
0000B526 5808 01A6 28               		dc.b $58, 8, 1,	$A6, $28
0000B52B 15                         byte_AA47:	dc.b $15
0000B52C 280E 01E4 38               		dc.b $28, $E, 1, $E4, $38
0000B531 1805 01F0 48               		dc.b $18, 5, 1,	$F0, $48
0000B536 4008 01F4 38               		dc.b $40, 8, 1,	$F4, $38
0000B53B 4804 01F7 38               		dc.b $48, 4, 1,	$F7, $38
0000B540 180F 01D0 08               		dc.b $18, $F, 1, $D0, 8
0000B545 1803 01E0 28               		dc.b $18, 3, 1,	$E0, $28
0000B54A 100F 014A 10               		dc.b $10, $F, 1, $4A, $10
0000B54F 0804 015A 20               		dc.b 8,	4, 1, $5A, $20
0000B554 000B 015C 30               		dc.b 0,	$B, 1, $5C, $30
0000B559 0800 0168 48               		dc.b 8,	0, 1, $68, $48
0000B55E 1800 0169 48               		dc.b $18, 0, 1,	$69, $48
0000B563 1805 016A 00               		dc.b $18, 5, 1,	$6A, 0
0000B568 2802 016E 08               		dc.b $28, 2, 1,	$6E, 8
0000B56D 300F 0171 10               		dc.b $30, $F, 1, $71, $10
0000B572 200D 0181 30               		dc.b $20, $D, 1, $81, $30
0000B577 2001 0189 50               		dc.b $20, 1, 1,	$89, $50
0000B57C 3008 018B 30               		dc.b $30, 8, 1,	$8B, $30
0000B581 380E 018E 30               		dc.b $38, $E, 1, $8E, $30
0000B586 500D 019A 08               		dc.b $50, $D, 1, $9A, 8
0000B58B 500C 01A2 28               		dc.b $50, $C, 1, $A2, $28
0000B590 5808 01A6 28               		dc.b $58, 8, 1,	$A6, $28
0000B595 16                         byte_AAB1:	dc.b $16
0000B596 1804 01F9 38               		dc.b $18, 4, 1,	$F9, $38
0000B59B 2000 01FB 38               		dc.b $20, 0, 1,	$FB, $38
0000B5A0 2808 01FC 30               		dc.b $28, 8, 1,	$FC, $30
0000B5A5 3001 01FF 30               		dc.b $30, 1, 1,	$FF, $30
0000B5AA 300B 0201 38               		dc.b $30, $B, 2, 1, $38
0000B5AF 180F 01D0 08               		dc.b $18, $F, 1, $D0, 8
0000B5B4 1803 01E0 28               		dc.b $18, 3, 1,	$E0, $28
0000B5B9 100F 014A 10               		dc.b $10, $F, 1, $4A, $10
0000B5BE 0804 015A 20               		dc.b 8,	4, 1, $5A, $20
0000B5C3 000B 015C 30               		dc.b 0,	$B, 1, $5C, $30
0000B5C8 0800 0168 48               		dc.b 8,	0, 1, $68, $48
0000B5CD 1800 0169 48               		dc.b $18, 0, 1,	$69, $48
0000B5D2 1805 016A 00               		dc.b $18, 5, 1,	$6A, 0
0000B5D7 2802 016E 08               		dc.b $28, 2, 1,	$6E, 8
0000B5DC 300F 0171 10               		dc.b $30, $F, 1, $71, $10
0000B5E1 200D 0181 30               		dc.b $20, $D, 1, $81, $30
0000B5E6 2001 0189 50               		dc.b $20, 1, 1,	$89, $50
0000B5EB 3008 018B 30               		dc.b $30, 8, 1,	$8B, $30
0000B5F0 380E 018E 30               		dc.b $38, $E, 1, $8E, $30
0000B5F5 500D 019A 08               		dc.b $50, $D, 1, $9A, 8
0000B5FA 500C 01A2 28               		dc.b $50, $C, 1, $A2, $28
0000B5FF 5808 01A6 28               		dc.b $58, 8, 1,	$A6, $28
0000B604                            		even
0000B604                            		even
0000B604                            
0000B604                            ; ===========================================================================
0000B604                            ; ---------------------------------------------------------------------------
0000B604                            ; Object 2B - Chopper enemy (GHZ)
0000B604                            ; ---------------------------------------------------------------------------
0000B604                            
0000B604                            Obj2B:					; XREF: Obj_Index
0000B604 7000                       		moveq	#0,d0
0000B606 1028 0024                  		move.b	$24(a0),d0
0000B60A 323B 0000                  		move.w	Obj2B_Index(pc,d0.w),d1
0000B60E 4EBB 1000                  		jsr	Obj2B_Index(pc,d1.w)
0000B612 6000 0000                  		bra.w	MarkObjGone
0000B616                            ; ===========================================================================
0000B616 0000                       Obj2B_Index:	dc.w Obj2B_Main-Obj2B_Index
0000B618 0000                       		dc.w Obj2B_ChgSpeed-Obj2B_Index
0000B61A                            ; ===========================================================================
0000B61A                            
0000B61A                            Obj2B_Main:				; XREF: Obj2B_Index
0000B61A 5428 0024                  		addq.b	#2,$24(a0)
0000B61E 217C 0000 0000 0004        		move.l	#Map_obj2B,4(a0)
0000B626 317C 047B 0002             		move.w	#$47B,2(a0)
0000B62C 117C 0004 0001             		move.b	#4,1(a0)
0000B632 117C 0004 0018             		move.b	#4,$18(a0)
0000B638 117C 0009 0020             		move.b	#9,$20(a0)
0000B63E 117C 0010 0019             		move.b	#$10,$19(a0)
0000B644 317C F900 0012             		move.w	#-$700,$12(a0)	; set vertical speed
0000B64A 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000B650                            
0000B650                            Obj2B_ChgSpeed:				; XREF: Obj2B_Index
0000B650 43F9 0000 0000             		lea	(Ani_obj2B).l,a1
0000B656 6100 FB9E                  		bsr.w	AnimateSprite
0000B65A 6100 0000                  		bsr.w	SpeedToPos
0000B65E 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce speed
0000B664 3028 0030                  		move.w	$30(a0),d0
0000B668 B068 000C                  		cmp.w	$C(a0),d0
0000B66C 6400                       		bcc.s	Obj2B_ChgAni
0000B66E 3140 000C                  		move.w	d0,$C(a0)
0000B672 317C F900 0012             		move.w	#-$700,$12(a0)	; set vertical speed
0000B678                            
0000B678                            Obj2B_ChgAni:
0000B678 117C 0001 001C             		move.b	#1,$1C(a0)	; use fast animation
0000B67E 0440 00C0                  		subi.w	#$C0,d0
0000B682 B068 000C                  		cmp.w	$C(a0),d0
0000B686 6400                       		bcc.s	locret_ABB6
0000B688 117C 0000 001C             		move.b	#0,$1C(a0)	; use slow animation
0000B68E 4A68 0012                  		tst.w	$12(a0)		; is Chopper at	its highest point?
0000B692 6B00                       		bmi.s	locret_ABB6	; if not, branch
0000B694 117C 0002 001C             		move.b	#2,$1C(a0)	; use stationary animation
0000B69A                            
0000B69A                            locret_ABB6:
0000B69A 4E75                       		rts	
0000B69C                            ; ===========================================================================
0000B69C                            Ani_obj2B:
0000B69C                            	include "_anim\obj2B.asm"
0000B69C                            ; ---------------------------------------------------------------------------
0000B69C                            ; Animation script - Chopper enemy
0000B69C                            ; ---------------------------------------------------------------------------
0000B69C 0000                       		dc.w byte_ABBE-Ani_obj2B
0000B69E 0000                       		dc.w byte_ABC2-Ani_obj2B
0000B6A0 0000                       		dc.w byte_ABC6-Ani_obj2B
0000B6A2 0700 01FF                  byte_ABBE:	dc.b 7,	0, 1, $FF
0000B6A6 0300 01FF                  byte_ABC2:	dc.b 3,	0, 1, $FF
0000B6AA 0700 FF                    byte_ABC6:	dc.b 7,	0, $FF
0000B6AE 00                         		even
0000B6AE 00                         		even
0000B6AE                            
0000B6AE                            ; ---------------------------------------------------------------------------
0000B6AE                            ; Sprite mappings - Chopper enemy (GHZ)
0000B6AE                            ; ---------------------------------------------------------------------------
0000B6AE                            Map_obj2B:
0000B6AE                            	include "_maps\obj2B.asm"
0000B6AE                            ; ---------------------------------------------------------------------------
0000B6AE                            ; Sprite mappings - Chopper enemy (GHZ)
0000B6AE                            ; ---------------------------------------------------------------------------
0000B6AE 0000                       		dc.w byte_ABCE-Map_obj2B
0000B6B0 0000                       		dc.w byte_ABD4-Map_obj2B
0000B6B2 01                         byte_ABCE:	dc.b 1
0000B6B3 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0000B6B8 01                         byte_ABD4:	dc.b 1
0000B6B9 F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
0000B6BE                            		even
0000B6BE                            		even
0000B6BE                            
0000B6BE                            ; ===========================================================================
0000B6BE                            ; ---------------------------------------------------------------------------
0000B6BE                            ; Object 2C - Jaws enemy (LZ)
0000B6BE                            ; ---------------------------------------------------------------------------
0000B6BE                            
0000B6BE                            Obj2C:					; XREF: Obj_Index
0000B6BE 7000                       		moveq	#0,d0
0000B6C0 1028 0024                  		move.b	$24(a0),d0
0000B6C4 323B 0000                  		move.w	Obj2C_Index(pc,d0.w),d1
0000B6C8 4EFB 1000                  		jmp	Obj2C_Index(pc,d1.w)
0000B6CC                            ; ===========================================================================
0000B6CC 0000                       Obj2C_Index:	dc.w Obj2C_Main-Obj2C_Index
0000B6CE 0000                       		dc.w Obj2C_Turn-Obj2C_Index
0000B6D0                            ; ===========================================================================
0000B6D0                            
0000B6D0                            Obj2C_Main:				; XREF: Obj2C_Index
0000B6D0 5428 0024                  		addq.b	#2,$24(a0)
0000B6D4 217C 0000 0000 0004        		move.l	#Map_obj2C,4(a0)
0000B6DC 317C 2486 0002             		move.w	#$2486,2(a0)
0000B6E2 0028 0004 0001             		ori.b	#4,1(a0)
0000B6E8 117C 000A 0020             		move.b	#$A,$20(a0)
0000B6EE 117C 0004 0018             		move.b	#4,$18(a0)
0000B6F4 117C 0010 0019             		move.b	#$10,$19(a0)
0000B6FA 7000                       		moveq	#0,d0
0000B6FC 1028 0028                  		move.b	$28(a0),d0	; load object subtype number
0000B700 ED48                       		lsl.w	#6,d0		; multiply d0 by 64
0000B702 5340                       		subq.w	#1,d0
0000B704 3140 0030                  		move.w	d0,$30(a0)	; set turn delay time
0000B708 3140 0032                  		move.w	d0,$32(a0)
0000B70C 317C FFC0 0010             		move.w	#-$40,$10(a0)	; move Jaws to the left
0000B712 0828 0000 0022             		btst	#0,$22(a0)	; is Jaws facing left?
0000B718 6700                       		beq.s	Obj2C_Turn	; if yes, branch
0000B71A 4468 0010                  		neg.w	$10(a0)		; move Jaws to the right
0000B71E                            
0000B71E                            Obj2C_Turn:				; XREF: Obj2C_Index
0000B71E 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from turn delay time
0000B722 6A00                       		bpl.s	Obj2C_Animate	; if time remains, branch
0000B724 3168 0032 0030             		move.w	$32(a0),$30(a0)	; reset	turn delay time
0000B72A 4468 0010                  		neg.w	$10(a0)		; change speed direction
0000B72E 0868 0000 0022             		bchg	#0,$22(a0)	; change Jaws facing direction
0000B734 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000B73A                            
0000B73A                            Obj2C_Animate:
0000B73A 43F9 0000 0000             		lea	(Ani_obj2C).l,a1
0000B740 6100 FAB4                  		bsr.w	AnimateSprite
0000B744 6100 0000                  		bsr.w	SpeedToPos
0000B748 6000 0000                  		bra.w	MarkObjGone
0000B74C                            ; ===========================================================================
0000B74C                            Ani_obj2C:
0000B74C                            	include "_anim\obj2C.asm"
0000B74C                            ; ---------------------------------------------------------------------------
0000B74C                            ; Animation script - Jaws enemy
0000B74C                            ; ---------------------------------------------------------------------------
0000B74C 0000                       		dc.w byte_AC6A-Ani_obj2C
0000B74E 0700 0102 03FF             byte_AC6A:	dc.b 7,	0, 1, 2, 3, $FF
0000B754                            		even
0000B754                            		even
0000B754                            
0000B754                            ; ---------------------------------------------------------------------------
0000B754                            ; Sprite mappings - Jaws enemy (LZ)
0000B754                            ; ---------------------------------------------------------------------------
0000B754                            Map_obj2C:
0000B754                            	include "_maps\obj2C.asm"
0000B754                            ; ---------------------------------------------------------------------------
0000B754                            ; Sprite mappings - Jaws enemy (LZ)
0000B754                            ; ---------------------------------------------------------------------------
0000B754 0000                       		dc.w byte_AC78-Map_obj2C
0000B756 0000                       		dc.w byte_AC83-Map_obj2C
0000B758 0000                       		dc.w byte_AC8E-Map_obj2C
0000B75A 0000                       		dc.w byte_AC99-Map_obj2C
0000B75C 02                         byte_AC78:	dc.b 2
0000B75D F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
0000B762 F505 0018 10               		dc.b $F5, 5, 0,	$18, $10
0000B767 02                         byte_AC83:	dc.b 2
0000B768 F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
0000B76D F505 001C 10               		dc.b $F5, 5, 0,	$1C, $10
0000B772 02                         byte_AC8E:	dc.b 2
0000B773 F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
0000B778 F505 1018 10               		dc.b $F5, 5, $10, $18, $10
0000B77D 02                         byte_AC99:	dc.b 2
0000B77E F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
0000B783 F505 101C 10               		dc.b $F5, 5, $10, $1C, $10
0000B788                            		even
0000B788                            		even
0000B788                            
0000B788                            ; ===========================================================================
0000B788                            ; ---------------------------------------------------------------------------
0000B788                            ; Object 2D - Burrobot enemy (LZ)
0000B788                            ; ---------------------------------------------------------------------------
0000B788                            
0000B788                            Obj2D:					; XREF: Obj_Index
0000B788 7000                       		moveq	#0,d0
0000B78A 1028 0024                  		move.b	$24(a0),d0
0000B78E 323B 0000                  		move.w	Obj2D_Index(pc,d0.w),d1
0000B792 4EFB 1000                  		jmp	Obj2D_Index(pc,d1.w)
0000B796                            ; ===========================================================================
0000B796 0000                       Obj2D_Index:	dc.w Obj2D_Main-Obj2D_Index
0000B798 0000                       		dc.w Obj2D_Action-Obj2D_Index
0000B79A                            ; ===========================================================================
0000B79A                            
0000B79A                            Obj2D_Main:				; XREF: Obj2D_Index
0000B79A 5428 0024                  		addq.b	#2,$24(a0)
0000B79E 117C 0013 0016             		move.b	#$13,$16(a0)
0000B7A4 117C 0008 0017             		move.b	#8,$17(a0)
0000B7AA 217C 0000 0000 0004        		move.l	#Map_obj2D,4(a0)
0000B7B2 317C 04A6 0002             		move.w	#$4A6,2(a0)
0000B7B8 0028 0004 0001             		ori.b	#4,1(a0)
0000B7BE 117C 0004 0018             		move.b	#4,$18(a0)
0000B7C4 117C 0005 0020             		move.b	#5,$20(a0)
0000B7CA 117C 000C 0019             		move.b	#$C,$19(a0)
0000B7D0 5C28 0025                  		addq.b	#6,$25(a0)	; run "Obj2D_ChkSonic" routine
0000B7D4 117C 0002 001C             		move.b	#2,$1C(a0)
0000B7DA                            
0000B7DA                            Obj2D_Action:				; XREF: Obj2D_Index
0000B7DA 7000                       		moveq	#0,d0
0000B7DC 1028 0025                  		move.b	$25(a0),d0
0000B7E0 323B 0000                  		move.w	Obj2D_Index2(pc,d0.w),d1
0000B7E4 4EBB 1000                  		jsr	Obj2D_Index2(pc,d1.w)
0000B7E8 43F9 0000 0000             		lea	(Ani_obj2D).l,a1
0000B7EE 6100 FA06                  		bsr.w	AnimateSprite
0000B7F2 6000 0000                  		bra.w	MarkObjGone
0000B7F6                            ; ===========================================================================
0000B7F6 0000                       Obj2D_Index2:	dc.w Obj2D_ChgDir-Obj2D_Index2
0000B7F8 0000                       		dc.w Obj2D_Move-Obj2D_Index2
0000B7FA 0000                       		dc.w Obj2D_Jump-Obj2D_Index2
0000B7FC 0000                       		dc.w Obj2D_ChkSonic-Obj2D_Index2
0000B7FE                            ; ===========================================================================
0000B7FE                            
0000B7FE                            Obj2D_ChgDir:				; XREF: Obj2D_Index2
0000B7FE 5368 0030                  		subq.w	#1,$30(a0)
0000B802 6A00                       		bpl.s	locret_AD42
0000B804 5428 0025                  		addq.b	#2,$25(a0)
0000B808 317C 00FF 0030             		move.w	#$FF,$30(a0)
0000B80E 317C 0080 0010             		move.w	#$80,$10(a0)
0000B814 117C 0001 001C             		move.b	#1,$1C(a0)
0000B81A 0868 0000 0022             		bchg	#0,$22(a0)	; change direction the Burrobot	is facing
0000B820 6700                       		beq.s	locret_AD42
0000B822 4468 0010                  		neg.w	$10(a0)		; change direction the Burrobot	is moving
0000B826                            
0000B826                            locret_AD42:
0000B826 4E75                       		rts	
0000B828                            ; ===========================================================================
0000B828                            
0000B828                            Obj2D_Move:				; XREF: Obj2D_Index2
0000B828 5368 0030                  		subq.w	#1,$30(a0)
0000B82C 6B00                       		bmi.s	loc_AD84
0000B82E 6100 0000                  		bsr.w	SpeedToPos
0000B832 0868 0000 0032             		bchg	#0,$32(a0)
0000B838 6600                       		bne.s	loc_AD78
0000B83A 3628 0008                  		move.w	8(a0),d3
0000B83E 0643 000C                  		addi.w	#$C,d3
0000B842 0828 0000 0022             		btst	#0,$22(a0)
0000B848 6600                       		bne.s	loc_AD6A
0000B84A 0443 0018                  		subi.w	#$18,d3
0000B84E                            
0000B84E                            loc_AD6A:
0000B84E 4EB9 0000 0000             		jsr	ObjHitFloor2
0000B854 0C41 000C                  		cmpi.w	#$C,d1
0000B858 6C00                       		bge.s	loc_AD84
0000B85A 4E75                       		rts	
0000B85C                            ; ===========================================================================
0000B85C                            
0000B85C                            loc_AD78:				; XREF: Obj2D_Move
0000B85C 4EB9 0000 0000             		jsr	ObjHitFloor
0000B862 D368 000C                  		add.w	d1,$C(a0)
0000B866 4E75                       		rts	
0000B868                            ; ===========================================================================
0000B868                            
0000B868                            loc_AD84:				; XREF: Obj2D_Move
0000B868 0838 0002 FE0F             		btst	#2,($FFFFFE0F).w
0000B86E 6700                       		beq.s	loc_ADA4
0000B870 5528 0025                  		subq.b	#2,$25(a0)
0000B874 317C 003B 0030             		move.w	#$3B,$30(a0)
0000B87A 317C 0000 0010             		move.w	#0,$10(a0)
0000B880 117C 0000 001C             		move.b	#0,$1C(a0)
0000B886 4E75                       		rts	
0000B888                            ; ===========================================================================
0000B888                            
0000B888                            loc_ADA4:
0000B888 5428 0025                  		addq.b	#2,$25(a0)
0000B88C 317C FC00 0012             		move.w	#-$400,$12(a0)
0000B892 117C 0002 001C             		move.b	#2,$1C(a0)
0000B898 4E75                       		rts	
0000B89A                            ; ===========================================================================
0000B89A                            
0000B89A                            Obj2D_Jump:				; XREF: Obj2D_Index2
0000B89A 6100 0000                  		bsr.w	SpeedToPos
0000B89E 0668 0018 0012             		addi.w	#$18,$12(a0)
0000B8A4 6B00                       		bmi.s	locret_ADF0
0000B8A6 117C 0003 001C             		move.b	#3,$1C(a0)
0000B8AC 4EB9 0000 0000             		jsr	ObjHitFloor
0000B8B2 4A41                       		tst.w	d1
0000B8B4 6A00                       		bpl.s	locret_ADF0
0000B8B6 D368 000C                  		add.w	d1,$C(a0)
0000B8BA 317C 0000 0012             		move.w	#0,$12(a0)
0000B8C0 117C 0001 001C             		move.b	#1,$1C(a0)
0000B8C6 317C 00FF 0030             		move.w	#$FF,$30(a0)
0000B8CC 5528 0025                  		subq.b	#2,$25(a0)
0000B8D0 6100 0000                  		bsr.w	Obj2D_ChkSonic2
0000B8D4                            
0000B8D4                            locret_ADF0:
0000B8D4 4E75                       		rts	
0000B8D6                            ; ===========================================================================
0000B8D6                            
0000B8D6                            Obj2D_ChkSonic:				; XREF: Obj2D_Index2
0000B8D6 343C 0060                  		move.w	#$60,d2
0000B8DA 6100 0000                  		bsr.w	Obj2D_ChkSonic2
0000B8DE 6400                       		bcc.s	locret_AE20
0000B8E0 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000B8E4 9068 000C                  		sub.w	$C(a0),d0
0000B8E8 6400                       		bcc.s	locret_AE20
0000B8EA 0C40 FF80                  		cmpi.w	#-$80,d0
0000B8EE 6500                       		bcs.s	locret_AE20
0000B8F0 4A78 FE08                  		tst.w	($FFFFFE08).w
0000B8F4 6600                       		bne.s	locret_AE20
0000B8F6 5528 0025                  		subq.b	#2,$25(a0)
0000B8FA 3141 0010                  		move.w	d1,$10(a0)
0000B8FE 317C FC00 0012             		move.w	#-$400,$12(a0)
0000B904                            
0000B904                            locret_AE20:
0000B904 4E75                       		rts	
0000B906                            
0000B906                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B906                            
0000B906                            
0000B906                            Obj2D_ChkSonic2:			; XREF: Obj2D_ChkSonic
0000B906 323C 0080                  		move.w	#$80,d1
0000B90A 08E8 0000 0022             		bset	#0,$22(a0)
0000B910 3038 D008                  		move.w	($FFFFD008).w,d0
0000B914 9068 0008                  		sub.w	8(a0),d0
0000B918 6400                       		bcc.s	loc_AE40
0000B91A 4440                       		neg.w	d0
0000B91C 4441                       		neg.w	d1
0000B91E 08A8 0000 0022             		bclr	#0,$22(a0)
0000B924                            
0000B924                            loc_AE40:
0000B924 B042                       		cmp.w	d2,d0
0000B926 4E75                       		rts	
0000B928                            ; End of function Obj2D_ChkSonic2
0000B928                            
0000B928                            ; ===========================================================================
0000B928                            Ani_obj2D:
0000B928                            	include "_anim\obj2D.asm"
0000B928                            ; ---------------------------------------------------------------------------
0000B928                            ; Animation script - Burrobot enemy
0000B928                            ; ---------------------------------------------------------------------------
0000B928 0000                       		dc.w byte_AE4C-Ani_obj2D
0000B92A 0000                       		dc.w byte_AE50-Ani_obj2D
0000B92C 0000                       		dc.w byte_AE54-Ani_obj2D
0000B92E 0000                       		dc.w byte_AE58-Ani_obj2D
0000B930 0300 06FF                  byte_AE4C:	dc.b 3,	0, 6, $FF
0000B934 0300 01FF                  byte_AE50:	dc.b 3,	0, 1, $FF
0000B938 0302 03FF                  byte_AE54:	dc.b 3,	2, 3, $FF
0000B93C 0304 FF                    byte_AE58:	dc.b 3,	4, $FF
0000B940 00                         		even
0000B940 00                         		even
0000B940                            
0000B940                            ; ---------------------------------------------------------------------------
0000B940                            ; Sprite mappings - Burrobot enemy (LZ)
0000B940                            ; ---------------------------------------------------------------------------
0000B940                            Map_obj2D:
0000B940                            	include "_maps\obj2D.asm"
0000B940                            ; ---------------------------------------------------------------------------
0000B940                            ; Sprite mappings - Burrobot enemy (LZ)
0000B940                            ; ---------------------------------------------------------------------------
0000B940 0000                       		dc.w byte_AE6A-Map_obj2D
0000B942 0000                       		dc.w byte_AE75-Map_obj2D
0000B944 0000                       		dc.w byte_AE80-Map_obj2D
0000B946 0000                       		dc.w byte_AE8B-Map_obj2D
0000B948 0000                       		dc.w byte_AE96-Map_obj2D
0000B94A 0000                       		dc.w byte_AEA1-Map_obj2D
0000B94C 0000                       		dc.w byte_AEAC-Map_obj2D
0000B94E 02                         byte_AE6A:	dc.b 2
0000B94F EC0A 0000 F0               		dc.b $EC, $A, 0, 0, $F0
0000B954 0409 0009 F4               		dc.b 4,	9, 0, 9, $F4
0000B959 02                         byte_AE75:	dc.b 2
0000B95A EC0A 000F F0               		dc.b $EC, $A, 0, $F, $F0
0000B95F 0409 0018 F4               		dc.b 4,	9, 0, $18, $F4
0000B964 02                         byte_AE80:	dc.b 2
0000B965 E80A 001E F4               		dc.b $E8, $A, 0, $1E, $F4
0000B96A 000A 0027 F4               		dc.b 0,	$A, 0, $27, $F4
0000B96F 02                         byte_AE8B:	dc.b 2
0000B970 E80A 0030 F4               		dc.b $E8, $A, 0, $30, $F4
0000B975 000A 0039 F4               		dc.b 0,	$A, 0, $39, $F4
0000B97A 02                         byte_AE96:	dc.b 2
0000B97B E80A 000F F0               		dc.b $E8, $A, 0, $F, $F0
0000B980 000A 0042 F4               		dc.b 0,	$A, 0, $42, $F4
0000B985 02                         byte_AEA1:	dc.b 2
0000B986 F406 004B E8               		dc.b $F4, 6, 0,	$4B, $E8
0000B98B F40A 0051 F8               		dc.b $F4, $A, 0, $51, $F8
0000B990 02                         byte_AEAC:	dc.b 2
0000B991 EC0A 000F F0               		dc.b $EC, $A, 0, $F, $F0
0000B996 0409 0009 F4               		dc.b 4,	9, 0, 9, $F4
0000B99C 00                         		even
0000B99C 00                         		even
0000B99C                            
0000B99C                            ; ===========================================================================
0000B99C                            ; ---------------------------------------------------------------------------
0000B99C                            ; Object 2F - large moving platforms (MZ)
0000B99C                            ; ---------------------------------------------------------------------------
0000B99C                            
0000B99C                            Obj2F:					; XREF: Obj_Index
0000B99C 7000                       		moveq	#0,d0
0000B99E 1028 0024                  		move.b	$24(a0),d0
0000B9A2 323B 0000                  		move.w	Obj2F_Index(pc,d0.w),d1
0000B9A6 4EFB 1000                  		jmp	Obj2F_Index(pc,d1.w)
0000B9AA                            ; ===========================================================================
0000B9AA 0000                       Obj2F_Index:	dc.w Obj2F_Main-Obj2F_Index
0000B9AC 0000                       		dc.w Obj2F_Action-Obj2F_Index
0000B9AE                            
0000B9AE 0000                       Obj2F_Data:	dc.w Obj2F_Data1-Obj2F_Data 	; collision angle data
0000B9B0 0040                       		dc.b 0,	$40			; frame	number,	platform width
0000B9B2 0000                       		dc.w Obj2F_Data3-Obj2F_Data
0000B9B4 0140                       		dc.b 1,	$40
0000B9B6 0000                       		dc.w Obj2F_Data2-Obj2F_Data
0000B9B8 0220                       		dc.b 2,	$20
0000B9BA                            ; ===========================================================================
0000B9BA                            
0000B9BA                            Obj2F_Main:				; XREF: Obj2F_Index
0000B9BA 5428 0024                  		addq.b	#2,$24(a0)
0000B9BE 217C 0000 0000 0004        		move.l	#Map_obj2F,4(a0)
0000B9C6 317C C000 0002             		move.w	#$C000,2(a0)
0000B9CC 117C 0004 0001             		move.b	#4,1(a0)
0000B9D2 117C 0005 0018             		move.b	#5,$18(a0)
0000B9D8 3168 000C 002C             		move.w	$C(a0),$2C(a0)
0000B9DE 3168 0008 002A             		move.w	8(a0),$2A(a0)
0000B9E4 7000                       		moveq	#0,d0
0000B9E6 1028 0028                  		move.b	$28(a0),d0
0000B9EA E448                       		lsr.w	#2,d0
0000B9EC 0240 001C                  		andi.w	#$1C,d0
0000B9F0 43FB 00BC                  		lea	Obj2F_Data(pc,d0.w),a1
0000B9F4 3019                       		move.w	(a1)+,d0
0000B9F6 45FB 00B6                  		lea	Obj2F_Data(pc,d0.w),a2
0000B9FA 214A 0030                  		move.l	a2,$30(a0)
0000B9FE 1159 001A                  		move.b	(a1)+,$1A(a0)
0000BA02 1151 0019                  		move.b	(a1),$19(a0)
0000BA06 0228 000F 0028             		andi.b	#$F,$28(a0)
0000BA0C 117C 0040 0016             		move.b	#$40,$16(a0)
0000BA12 08E8 0004 0001             		bset	#4,1(a0)
0000BA18                            
0000BA18                            Obj2F_Action:				; XREF: Obj2F_Index
0000BA18 6100 0000                  		bsr.w	Obj2F_Types
0000BA1C 4A28 0025                  		tst.b	$25(a0)
0000BA20 6700                       		beq.s	Obj2F_Solid
0000BA22 7200                       		moveq	#0,d1
0000BA24 1228 0019                  		move.b	$19(a0),d1
0000BA28 0641 000B                  		addi.w	#$B,d1
0000BA2C 6100 C61C                  		bsr.w	ExitPlatform
0000BA30 0829 0003 0022             		btst	#3,$22(a1)
0000BA36 6600 0000                  		bne.w	Obj2F_Slope
0000BA3A 4228 0025                  		clr.b	$25(a0)
0000BA3E 6000                       		bra.s	Obj2F_Display
0000BA40                            ; ===========================================================================
0000BA40                            
0000BA40                            Obj2F_Slope:				; XREF: Obj2F_Action
0000BA40 7200                       		moveq	#0,d1
0000BA42 1228 0019                  		move.b	$19(a0),d1
0000BA46 0641 000B                  		addi.w	#$B,d1
0000BA4A 2468 0030                  		movea.l	$30(a0),a2
0000BA4E 3428 0008                  		move.w	8(a0),d2
0000BA52 6100 D554                  		bsr.w	SlopeObject2
0000BA56 6000                       		bra.s	Obj2F_Display
0000BA58                            ; ===========================================================================
0000BA58                            
0000BA58                            Obj2F_Solid:				; XREF: Obj2F_Action
0000BA58 7200                       		moveq	#0,d1
0000BA5A 1228 0019                  		move.b	$19(a0),d1
0000BA5E 0641 000B                  		addi.w	#$B,d1
0000BA62 343C 0020                  		move.w	#$20,d2
0000BA66 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000BA6C 6600                       		bne.s	loc_AF8E
0000BA6E 343C 0030                  		move.w	#$30,d2
0000BA72                            
0000BA72                            loc_AF8E:
0000BA72 2468 0030                  		movea.l	$30(a0),a2
0000BA76 6100 0000                  		bsr.w	SolidObject2F
0000BA7A                            
0000BA7A                            Obj2F_Display:				; XREF: Obj2F_Action
0000BA7A 6100 0000                  		bsr.w	DisplaySprite
0000BA7E 6000 0000                  		bra.w	Obj2F_ChkDel
0000BA82                            
0000BA82                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000BA82                            
0000BA82                            
0000BA82                            Obj2F_Types:				; XREF: Obj2F_Action
0000BA82 7000                       		moveq	#0,d0
0000BA84 1028 0028                  		move.b	$28(a0),d0
0000BA88 0240 0007                  		andi.w	#7,d0
0000BA8C D040                       		add.w	d0,d0
0000BA8E 323B 0000                  		move.w	Obj2F_TypeIndex(pc,d0.w),d1
0000BA92 4EFB 1000                  		jmp	Obj2F_TypeIndex(pc,d1.w)
0000BA96                            ; End of function Obj2F_Types
0000BA96                            
0000BA96                            ; ===========================================================================
0000BA96 0000                       Obj2F_TypeIndex:dc.w Obj2F_Type00-Obj2F_TypeIndex
0000BA98 0000                       		dc.w Obj2F_Type01-Obj2F_TypeIndex
0000BA9A 0000                       		dc.w Obj2F_Type02-Obj2F_TypeIndex
0000BA9C 0000                       		dc.w Obj2F_Type03-Obj2F_TypeIndex
0000BA9E 0000                       		dc.w Obj2F_Type04-Obj2F_TypeIndex
0000BAA0 0000                       		dc.w Obj2F_Type05-Obj2F_TypeIndex
0000BAA2                            ; ===========================================================================
0000BAA2                            
0000BAA2                            Obj2F_Type00:				; XREF: Obj2F_TypeIndex
0000BAA2 4E75                       		rts			; type 00 platform doesn't move
0000BAA4                            ; ===========================================================================
0000BAA4                            
0000BAA4                            Obj2F_Type01:				; XREF: Obj2F_TypeIndex
0000BAA4 1038 FE60                  		move.b	($FFFFFE60).w,d0
0000BAA8 323C 0020                  		move.w	#$20,d1
0000BAAC 6000                       		bra.s	Obj2F_Move
0000BAAE                            ; ===========================================================================
0000BAAE                            
0000BAAE                            Obj2F_Type02:				; XREF: Obj2F_TypeIndex
0000BAAE 1038 FE64                  		move.b	($FFFFFE64).w,d0
0000BAB2 323C 0030                  		move.w	#$30,d1
0000BAB6 6000                       		bra.s	Obj2F_Move
0000BAB8                            ; ===========================================================================
0000BAB8                            
0000BAB8                            Obj2F_Type03:				; XREF: Obj2F_TypeIndex
0000BAB8 1038 FE68                  		move.b	($FFFFFE68).w,d0
0000BABC 323C 0040                  		move.w	#$40,d1
0000BAC0 6000                       		bra.s	Obj2F_Move
0000BAC2                            ; ===========================================================================
0000BAC2                            
0000BAC2                            Obj2F_Type04:				; XREF: Obj2F_TypeIndex
0000BAC2 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
0000BAC6 323C 0060                  		move.w	#$60,d1
0000BACA                            
0000BACA                            Obj2F_Move:
0000BACA 0828 0003 0028             		btst	#3,$28(a0)
0000BAD0 6700                       		beq.s	loc_AFF2
0000BAD2 4440                       		neg.w	d0
0000BAD4 D041                       		add.w	d1,d0
0000BAD6                            
0000BAD6                            loc_AFF2:
0000BAD6 3228 002C                  		move.w	$2C(a0),d1
0000BADA 9240                       		sub.w	d0,d1
0000BADC 3141 000C                  		move.w	d1,$C(a0)	; update position on y-axis
0000BAE0 4E75                       		rts	
0000BAE2                            ; ===========================================================================
0000BAE2                            
0000BAE2                            Obj2F_Type05:				; XREF: Obj2F_TypeIndex
0000BAE2 1028 0034                  		move.b	$34(a0),d0
0000BAE6 4A28 0025                  		tst.b	$25(a0)
0000BAEA 6600                       		bne.s	loc_B010
0000BAEC 5500                       		subq.b	#2,d0
0000BAEE 6400                       		bcc.s	loc_B01C
0000BAF0 7000                       		moveq	#0,d0
0000BAF2 6000                       		bra.s	loc_B01C
0000BAF4                            ; ===========================================================================
0000BAF4                            
0000BAF4                            loc_B010:
0000BAF4 5800                       		addq.b	#4,d0
0000BAF6 0C00 0040                  		cmpi.b	#$40,d0
0000BAFA 6500                       		bcs.s	loc_B01C
0000BAFC 103C 0040                  		move.b	#$40,d0
0000BB00                            
0000BB00                            loc_B01C:
0000BB00 1140 0034                  		move.b	d0,$34(a0)
0000BB04 4EB9 0000 33DA             		jsr	(CalcSine).l
0000BB0A E848                       		lsr.w	#4,d0
0000BB0C 3200                       		move.w	d0,d1
0000BB0E D068 002C                  		add.w	$2C(a0),d0
0000BB12 3140 000C                  		move.w	d0,$C(a0)
0000BB16 0C28 0020 0034             		cmpi.b	#$20,$34(a0)
0000BB1C 6600                       		bne.s	loc_B07A
0000BB1E 4A28 0035                  		tst.b	$35(a0)
0000BB22 6600                       		bne.s	loc_B07A
0000BB24 117C 0001 0035             		move.b	#1,$35(a0)
0000BB2A 6100 0000                  		bsr.w	SingleObjLoad2
0000BB2E 6600                       		bne.s	loc_B07A
0000BB30 12BC 0035                  		move.b	#$35,0(a1)	; load sitting flame object
0000BB34 3368 0008 0008             		move.w	8(a0),8(a1)
0000BB3A 3368 002C 002C             		move.w	$2C(a0),$2C(a1)
0000BB40 5069 002C                  		addq.w	#8,$2C(a1)
0000BB44 5769 002C                  		subq.w	#3,$2C(a1)
0000BB48 0469 0040 0008             		subi.w	#$40,8(a1)
0000BB4E 2368 0030 0030             		move.l	$30(a0),$30(a1)
0000BB54 2348 0038                  		move.l	a0,$38(a1)
0000BB58 2448                       		movea.l	a0,a2
0000BB5A 6100                       		bsr.s	sub_B09C
0000BB5C                            
0000BB5C                            loc_B07A:
0000BB5C 7400                       		moveq	#0,d2
0000BB5E 45E8 0036                  		lea	$36(a0),a2
0000BB62 141A                       		move.b	(a2)+,d2
0000BB64 5302                       		subq.b	#1,d2
0000BB66 6500                       		bcs.s	locret_B09A
0000BB68                            
0000BB68                            loc_B086:
0000BB68 7000                       		moveq	#0,d0
0000BB6A 101A                       		move.b	(a2)+,d0
0000BB6C ED48                       		lsl.w	#6,d0
0000BB6E 0640 D000                  		addi.w	#-$3000,d0
0000BB72 3240                       		movea.w	d0,a1
0000BB74 3341 003C                  		move.w	d1,$3C(a1)
0000BB78 51CA FFEE                  		dbf	d2,loc_B086
0000BB7C                            
0000BB7C                            locret_B09A:
0000BB7C 4E75                       		rts	
0000BB7E                            
0000BB7E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000BB7E                            
0000BB7E                            
0000BB7E                            sub_B09C:
0000BB7E 45EA 0036                  		lea	$36(a2),a2
0000BB82 7000                       		moveq	#0,d0
0000BB84 1012                       		move.b	(a2),d0
0000BB86 5212                       		addq.b	#1,(a2)
0000BB88 45F2 0001                  		lea	1(a2,d0.w),a2
0000BB8C 3009                       		move.w	a1,d0
0000BB8E 0440 D000                  		subi.w	#-$3000,d0
0000BB92 EC48                       		lsr.w	#6,d0
0000BB94 0240 007F                  		andi.w	#$7F,d0
0000BB98 1480                       		move.b	d0,(a2)
0000BB9A 4E75                       		rts	
0000BB9C                            ; End of function sub_B09C
0000BB9C                            
0000BB9C                            ; ===========================================================================
0000BB9C                            
0000BB9C                            Obj2F_ChkDel:				; XREF: Obj2F_Display
0000BB9C 4A28 0035                  		tst.b	$35(a0)
0000BBA0 6700                       		beq.s	loc_B0C6
0000BBA2 4A28 0001                  		tst.b	1(a0)
0000BBA6 6A00                       		bpl.s	Obj2F_DelFlames
0000BBA8                            
0000BBA8                            loc_B0C6:
0000BBA8 3028 002A                  		move.w	$2A(a0),d0
0000BBAC 0240 FF80                  		andi.w	#$FF80,d0
0000BBB0 3238 F700                  		move.w	($FFFFF700).w,d1
0000BBB4 0441 0080                  		subi.w	#$80,d1
0000BBB8 0241 FF80                  		andi.w	#$FF80,d1
0000BBBC 9041                       		sub.w	d1,d0
0000BBBE 0C40 0280                  		cmpi.w	#$280,d0
0000BBC2 6200 0000                  		bhi.w	DeleteObject
0000BBC6 4E75                       		rts	
0000BBC8                            ; ===========================================================================
0000BBC8                            
0000BBC8                            Obj2F_DelFlames:			; XREF: Obj2F_ChkDel
0000BBC8 7400                       		moveq	#0,d2
0000BBCA                            
0000BBCA                            loc_B0E8:
0000BBCA 45E8 0036                  		lea	$36(a0),a2
0000BBCE 1412                       		move.b	(a2),d2
0000BBD0 421A                       		clr.b	(a2)+
0000BBD2 5302                       		subq.b	#1,d2
0000BBD4 6500                       		bcs.s	locret_B116
0000BBD6                            
0000BBD6                            loc_B0F4:
0000BBD6 7000                       		moveq	#0,d0
0000BBD8 1012                       		move.b	(a2),d0
0000BBDA 421A                       		clr.b	(a2)+
0000BBDC ED48                       		lsl.w	#6,d0
0000BBDE 0640 D000                  		addi.w	#-$3000,d0
0000BBE2 3240                       		movea.w	d0,a1
0000BBE4 6100 0000                  		bsr.w	DeleteObject2
0000BBE8 51CA FFEC                  		dbf	d2,loc_B0F4
0000BBEC 117C 0000 0035             		move.b	#0,$35(a0)
0000BBF2 117C 0000 0034             		move.b	#0,$34(a0)
0000BBF8                            
0000BBF8                            locret_B116:
0000BBF8 4E75                       		rts	
0000BBFA                            ; ===========================================================================
0000BBFA                            ; ---------------------------------------------------------------------------
0000BBFA                            ; Collision data for large moving platforms (MZ)
0000BBFA                            ; ---------------------------------------------------------------------------
0000BBFA                            Obj2F_Data1:	incbin	misc\mz_pfm1.bin
0000BC46                            		even
0000BC46                            Obj2F_Data2:	incbin	misc\mz_pfm2.bin
0000BC72                            		even
0000BC72                            Obj2F_Data3:	incbin	misc\mz_pfm3.bin
0000BCBE                            		even
0000BCBE                            ; ===========================================================================
0000BCBE                            ; ---------------------------------------------------------------------------
0000BCBE                            ; Object 35 - fireball that sits on the	floor (MZ)
0000BCBE                            ; (appears when	you walk on sinking platforms)
0000BCBE                            ; ---------------------------------------------------------------------------
0000BCBE                            
0000BCBE                            Obj35:					; XREF: Obj_Index
0000BCBE 7000                       		moveq	#0,d0
0000BCC0 1028 0024                  		move.b	$24(a0),d0
0000BCC4 323B 0000                  		move.w	Obj35_Index(pc,d0.w),d1
0000BCC8 4EFB 1000                  		jmp	Obj35_Index(pc,d1.w)
0000BCCC                            ; ===========================================================================
0000BCCC 0000                       Obj35_Index:	dc.w Obj35_Main-Obj35_Index
0000BCCE 0000                       		dc.w loc_B238-Obj35_Index
0000BCD0 0000                       		dc.w Obj35_Move-Obj35_Index
0000BCD2                            ; ===========================================================================
0000BCD2                            
0000BCD2                            Obj35_Main:				; XREF: Obj35_Index
0000BCD2 5428 0024                  		addq.b	#2,$24(a0)
0000BCD6 217C 0000 0000 0004        		move.l	#Map_obj14,4(a0)
0000BCDE 317C 0345 0002             		move.w	#$345,2(a0)
0000BCE4 3168 0008 002A             		move.w	8(a0),$2A(a0)
0000BCEA 117C 0004 0001             		move.b	#4,1(a0)
0000BCF0 117C 0001 0018             		move.b	#1,$18(a0)
0000BCF6 117C 008B 0020             		move.b	#$8B,$20(a0)
0000BCFC 117C 0008 0019             		move.b	#8,$19(a0)
0000BD02 303C 00C8                  		move.w	#$C8,d0
0000BD06 4EB9 0000 147C             		jsr	(PlaySound_Special).l ;	play flame sound
0000BD0C 4A28 0028                  		tst.b	$28(a0)
0000BD10 6700                       		beq.s	loc_B238
0000BD12 5428 0024                  		addq.b	#2,$24(a0)
0000BD16 6000 0000                  		bra.w	Obj35_Move
0000BD1A                            ; ===========================================================================
0000BD1A                            
0000BD1A                            loc_B238:				; XREF: Obj35_Index
0000BD1A 2268 0030                  		movea.l	$30(a0),a1
0000BD1E 3228 0008                  		move.w	8(a0),d1
0000BD22 9268 002A                  		sub.w	$2A(a0),d1
0000BD26 0641 000C                  		addi.w	#$C,d1
0000BD2A 3001                       		move.w	d1,d0
0000BD2C E248                       		lsr.w	#1,d0
0000BD2E 1031 0000                  		move.b	(a1,d0.w),d0
0000BD32 4440                       		neg.w	d0
0000BD34 D068 002C                  		add.w	$2C(a0),d0
0000BD38 3400                       		move.w	d0,d2
0000BD3A D068 003C                  		add.w	$3C(a0),d0
0000BD3E 3140 000C                  		move.w	d0,$C(a0)
0000BD42 0C41 0084                  		cmpi.w	#$84,d1
0000BD46 6400                       		bcc.s	loc_B2B0
0000BD48 06A8 0001 0000 0008        		addi.l	#$10000,8(a0)
0000BD50 0C41 0080                  		cmpi.w	#$80,d1
0000BD54 6400                       		bcc.s	loc_B2B0
0000BD56 2028 0008                  		move.l	8(a0),d0
0000BD5A 0680 0008 0000             		addi.l	#$80000,d0
0000BD60 0280 000F FFFF             		andi.l	#$FFFFF,d0
0000BD66 6600                       		bne.s	loc_B2B0
0000BD68 6100 0000                  		bsr.w	SingleObjLoad2
0000BD6C 6600                       		bne.s	loc_B2B0
0000BD6E 12BC 0035                  		move.b	#$35,0(a1)
0000BD72 3368 0008 0008             		move.w	8(a0),8(a1)
0000BD78 3342 002C                  		move.w	d2,$2C(a1)
0000BD7C 3368 003C 003C             		move.w	$3C(a0),$3C(a1)
0000BD82 137C 0001 0028             		move.b	#1,$28(a1)
0000BD88 2468 0038                  		movea.l	$38(a0),a2
0000BD8C 6100 FDF0                  		bsr.w	sub_B09C
0000BD90                            
0000BD90                            loc_B2B0:
0000BD90 6000                       		bra.s	Obj35_Animate
0000BD92                            ; ===========================================================================
0000BD92                            
0000BD92                            Obj35_Move:				; XREF: Obj35_Index
0000BD92 3028 002C                  		move.w	$2C(a0),d0
0000BD96 D068 003C                  		add.w	$3C(a0),d0
0000BD9A 3140 000C                  		move.w	d0,$C(a0)
0000BD9E                            
0000BD9E                            Obj35_Animate:				; XREF: loc_B238
0000BD9E 43F9 0000 0000             		lea	(Ani_obj35).l,a1
0000BDA4 6100 F450                  		bsr.w	AnimateSprite
0000BDA8 6000 0000                  		bra.w	DisplaySprite
0000BDAC                            ; ===========================================================================
0000BDAC                            Ani_obj35:
0000BDAC                            	include "_anim\obj35.asm"
0000BDAC                            ; ---------------------------------------------------------------------------
0000BDAC                            ; Animation script - fireball that sits on the	floor (MZ)
0000BDAC                            ; ---------------------------------------------------------------------------
0000BDAC 0000                       		dc.w byte_B2CE-Ani_obj35
0000BDAE 0500 2001 21FF             byte_B2CE:	dc.b 5,	0, $20,	1, $21,	$FF
0000BDB4                            		even
0000BDB4                            		even
0000BDB4                            
0000BDB4                            ; ---------------------------------------------------------------------------
0000BDB4                            ; Sprite mappings - large moving platforms (MZ)
0000BDB4                            ; ---------------------------------------------------------------------------
0000BDB4                            Map_obj2F:
0000BDB4                            	include "_maps\obj2F.asm"
0000BDB4                            ; ---------------------------------------------------------------------------
0000BDB4                            ; Sprite mappings - large moving platforms (MZ)
0000BDB4                            ; ---------------------------------------------------------------------------
0000BDB4 0000                       		dc.w byte_B2DA-Map_obj2F
0000BDB6 0000                       		dc.w byte_B31C-Map_obj2F
0000BDB8 0000                       		dc.w byte_B34F-Map_obj2F
0000BDBA 0D                         byte_B2DA:	dc.b $D
0000BDBB D806 0057 C0               		dc.b $D8, 6, 0,	$57, $C0
0000BDC0 F005 0053 C0               		dc.b $F0, 5, 0,	$53, $C0
0000BDC5 000F 0001 C0               		dc.b 0,	$F, 0, 1, $C0
0000BDCA D00F 0027 D0               		dc.b $D0, $F, 0, $27, $D0
0000BDCF F00D 0037 D0               		dc.b $F0, $D, 0, $37, $D0
0000BDD4 F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000BDD9 D00F 0011 F0               		dc.b $D0, $F, 0, $11, $F0
0000BDDE D00F 003F 10               		dc.b $D0, $F, 0, $3F, $10
0000BDE3 F00D 004F 10               		dc.b $F0, $D, 0, $4F, $10
0000BDE8 F00F 0001 00               		dc.b $F0, $F, 0, 1, 0
0000BDED 000F 0001 20               		dc.b 0,	$F, 0, 1, $20
0000BDF2 D806 0057 30               		dc.b $D8, 6, 0,	$57, $30
0000BDF7 F005 0053 30               		dc.b $F0, 5, 0,	$53, $30
0000BDFC 0A                         byte_B31C:	dc.b $A
0000BDFD D00F 0027 C0               		dc.b $D0, $F, 0, $27, $C0
0000BE02 F00D 0037 C0               		dc.b $F0, $D, 0, $37, $C0
0000BE07 000F 0001 C0               		dc.b 0,	$F, 0, 1, $C0
0000BE0C C00F 0027 E0               		dc.b $C0, $F, 0, $27, $E0
0000BE11 E00D 0037 E0               		dc.b $E0, $D, 0, $37, $E0
0000BE16 F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000BE1B C00F 0011 00               		dc.b $C0, $F, 0, $11, 0
0000BE20 E00F 0001 00               		dc.b $E0, $F, 0, 1, 0
0000BE25 C00F 003F 20               		dc.b $C0, $F, 0, $3F, $20
0000BE2A E00D 004F 20               		dc.b $E0, $D, 0, $4F, $20
0000BE2F 06                         byte_B34F:	dc.b 6
0000BE30 D00F 0011 E0               		dc.b $D0, $F, 0, $11, $E0
0000BE35 F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000BE3A 100F 0001 E0               		dc.b $10, $F, 0, 1, $E0
0000BE3F D00F 0011 00               		dc.b $D0, $F, 0, $11, 0
0000BE44 F00F 0001 00               		dc.b $F0, $F, 0, 1, 0
0000BE49 100F 0001 00               		dc.b $10, $F, 0, 1, 0
0000BE4E                            		even
0000BE4E                            		even
0000BE4E                            
0000BE4E                            ; ---------------------------------------------------------------------------
0000BE4E                            ; Sprite mappings - lava balls (MZ, SLZ)
0000BE4E                            ; ---------------------------------------------------------------------------
0000BE4E                            Map_obj14:
0000BE4E                            	include "_maps\obj14.asm"
0000BE4E                            ; ---------------------------------------------------------------------------
0000BE4E                            ; Sprite mappings - lava balls (MZ, SLZ)
0000BE4E                            ; ---------------------------------------------------------------------------
0000BE4E 0000                       		dc.w byte_B37A-Map_obj14
0000BE50 0000                       		dc.w byte_B380-Map_obj14
0000BE52 0000                       		dc.w byte_B386-Map_obj14
0000BE54 0000                       		dc.w byte_B38C-Map_obj14
0000BE56 0000                       		dc.w byte_B392-Map_obj14
0000BE58 0000                       		dc.w byte_B398-Map_obj14
0000BE5A 01                         byte_B37A:	dc.b 1
0000BE5B E807 0000 F8               		dc.b $E8, 7, 0,	0, $F8
0000BE60 01                         byte_B380:	dc.b 1
0000BE61 E807 0008 F8               		dc.b $E8, 7, 0,	8, $F8
0000BE66 01                         byte_B386:	dc.b 1
0000BE67 F006 0010 F8               		dc.b $F0, 6, 0,	$10, $F8
0000BE6C 01                         byte_B38C:	dc.b 1
0000BE6D F80D 0016 E8               		dc.b $F8, $D, 0, $16, $E8
0000BE72 01                         byte_B392:	dc.b 1
0000BE73 F80D 001E E8               		dc.b $F8, $D, 0, $1E, $E8
0000BE78 01                         byte_B398:	dc.b 1
0000BE79 F809 0026 F0               		dc.b $F8, 9, 0,	$26, $F0
0000BE7E                            		even
0000BE7E                            		even
0000BE7E                            
0000BE7E                            ; ===========================================================================
0000BE7E                            ; ---------------------------------------------------------------------------
0000BE7E                            ; Object 30 - large green glassy blocks	(MZ)
0000BE7E                            ; ---------------------------------------------------------------------------
0000BE7E                            
0000BE7E                            Obj30:					; XREF: Obj_Index
0000BE7E 7000                       		moveq	#0,d0
0000BE80 1028 0024                  		move.b	$24(a0),d0
0000BE84 323B 0000                  		move.w	Obj30_Index(pc,d0.w),d1
0000BE88 4EBB 1000                  		jsr	Obj30_Index(pc,d1.w)
0000BE8C 3028 0008                  		move.w	8(a0),d0
0000BE90 0240 FF80                  		andi.w	#$FF80,d0
0000BE94 3238 F700                  		move.w	($FFFFF700).w,d1
0000BE98 0441 0080                  		subi.w	#$80,d1
0000BE9C 0241 FF80                  		andi.w	#$FF80,d1
0000BEA0 9041                       		sub.w	d1,d0
0000BEA2 0C40 0280                  		cmpi.w	#$280,d0
0000BEA6 6200 0000                  		bhi.w	Obj30_Delete
0000BEAA 6000 0000                  		bra.w	DisplaySprite
0000BEAE                            ; ===========================================================================
0000BEAE                            
0000BEAE                            Obj30_Delete:
0000BEAE 6000 0000                  		bra.w	DeleteObject
0000BEB2                            ; ===========================================================================
0000BEB2 0000                       Obj30_Index:	dc.w Obj30_Main-Obj30_Index
0000BEB4 0000                       		dc.w Obj30_Block012-Obj30_Index
0000BEB6 0000                       		dc.w Obj30_Reflect012-Obj30_Index
0000BEB8 0000                       		dc.w Obj30_Block34-Obj30_Index
0000BEBA 0000                       		dc.w Obj30_Reflect34-Obj30_Index
0000BEBC                            
0000BEBC 0200 00                    Obj30_Vars1:	dc.b 2,	0, 0	; routine num, y-axis dist from	origin,	frame num
0000BEBF 0400 01                    		dc.b 4,	0, 1
0000BEC2 0600 02                    Obj30_Vars2:	dc.b 6,	0, 2
0000BEC5 0800 01                    		dc.b 8,	0, 1
0000BEC8                            ; ===========================================================================
0000BEC8                            
0000BEC8                            Obj30_Main:				; XREF: Obj30_Index
0000BEC8 45F9 0000 BEBC             		lea	(Obj30_Vars1).l,a2
0000BECE 7201                       		moveq	#1,d1
0000BED0 117C 0048 0016             		move.b	#$48,$16(a0)
0000BED6 0C28 0003 0028             		cmpi.b	#3,$28(a0)	; is object type 0/1/2 ?
0000BEDC 6500                       		bcs.s	loc_B40C	; if yes, branch
0000BEDE 45F9 0000 BEC2             		lea	(Obj30_Vars2).l,a2
0000BEE4 7201                       		moveq	#1,d1
0000BEE6 117C 0038 0016             		move.b	#$38,$16(a0)
0000BEEC                            
0000BEEC                            loc_B40C:
0000BEEC 2248                       		movea.l	a0,a1
0000BEEE 6000                       		bra.s	Obj30_Load	; load main object
0000BEF0                            ; ===========================================================================
0000BEF0                            
0000BEF0                            Obj30_Loop:
0000BEF0 6100 0000                  		bsr.w	SingleObjLoad2
0000BEF4 6600                       		bne.s	loc_B480
0000BEF6                            
0000BEF6                            Obj30_Load:				; XREF: Obj30_Main
0000BEF6 135A 0024                  		move.b	(a2)+,$24(a1)
0000BEFA 12BC 0030                  		move.b	#$30,0(a1)
0000BEFE 3368 0008 0008             		move.w	8(a0),8(a1)
0000BF04 101A                       		move.b	(a2)+,d0
0000BF06 4880                       		ext.w	d0
0000BF08 D068 000C                  		add.w	$C(a0),d0
0000BF0C 3340 000C                  		move.w	d0,$C(a1)
0000BF10 237C 0000 0000 0004        		move.l	#Map_obj30,4(a1)
0000BF18 337C C38E 0002             		move.w	#$C38E,2(a1)
0000BF1E 137C 0004 0001             		move.b	#4,1(a1)
0000BF24 3369 000C 0030             		move.w	$C(a1),$30(a1)
0000BF2A 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000BF30 137C 0020 0019             		move.b	#$20,$19(a1)
0000BF36 137C 0004 0018             		move.b	#4,$18(a1)
0000BF3C 135A 001A                  		move.b	(a2)+,$1A(a1)
0000BF40 2348 003C                  		move.l	a0,$3C(a1)
0000BF44 51C9 FFAA                  		dbf	d1,Obj30_Loop	; repeat once to load "reflection object"
0000BF48                            
0000BF48 137C 0010 0019             		move.b	#$10,$19(a1)
0000BF4E 137C 0003 0018             		move.b	#3,$18(a1)
0000BF54 5029 0028                  		addq.b	#8,$28(a1)
0000BF58 0229 000F 0028             		andi.b	#$F,$28(a1)
0000BF5E                            
0000BF5E                            loc_B480:
0000BF5E 317C 0090 0032             		move.w	#$90,$32(a0)
0000BF64 08E8 0004 0001             		bset	#4,1(a0)
0000BF6A                            
0000BF6A                            Obj30_Block012:				; XREF: Obj30_Index
0000BF6A 6100 0000                  		bsr.w	Obj30_Types
0000BF6E 323C 002B                  		move.w	#$2B,d1
0000BF72 343C 0048                  		move.w	#$48,d2
0000BF76 363C 0049                  		move.w	#$49,d3
0000BF7A 3828 0008                  		move.w	8(a0),d4
0000BF7E 6000 0000                  		bra.w	SolidObject
0000BF82                            ; ===========================================================================
0000BF82                            
0000BF82                            Obj30_Reflect012:			; XREF: Obj30_Index
0000BF82 2268 003C                  		movea.l	$3C(a0),a1
0000BF86 3169 0032 0032             		move.w	$32(a1),$32(a0)
0000BF8C 6000 0000                  		bra.w	Obj30_Types
0000BF90                            ; ===========================================================================
0000BF90                            
0000BF90                            Obj30_Block34:				; XREF: Obj30_Index
0000BF90 6100 0000                  		bsr.w	Obj30_Types
0000BF94 323C 002B                  		move.w	#$2B,d1
0000BF98 343C 0038                  		move.w	#$38,d2
0000BF9C 363C 0039                  		move.w	#$39,d3
0000BFA0 3828 0008                  		move.w	8(a0),d4
0000BFA4 6000 0000                  		bra.w	SolidObject
0000BFA8                            ; ===========================================================================
0000BFA8                            
0000BFA8                            Obj30_Reflect34:			; XREF: Obj30_Index
0000BFA8 2268 003C                  		movea.l	$3C(a0),a1
0000BFAC 3169 0032 0032             		move.w	$32(a1),$32(a0)
0000BFB2 3169 000C 0030             		move.w	$C(a1),$30(a0)
0000BFB8 6000 0002                  		bra.w	*+4
0000BFBC                            
0000BFBC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000BFBC                            
0000BFBC                            
0000BFBC                            Obj30_Types:				; XREF: Obj30_Block012; et al
0000BFBC 7000                       		moveq	#0,d0
0000BFBE 1028 0028                  		move.b	$28(a0),d0
0000BFC2 0240 0007                  		andi.w	#7,d0
0000BFC6 D040                       		add.w	d0,d0
0000BFC8 323B 0000                  		move.w	Obj30_TypeIndex(pc,d0.w),d1
0000BFCC 4EFB 1000                  		jmp	Obj30_TypeIndex(pc,d1.w)
0000BFD0                            ; End of function Obj30_Types
0000BFD0                            
0000BFD0                            ; ===========================================================================
0000BFD0 0000                       Obj30_TypeIndex:dc.w Obj30_Type00-Obj30_TypeIndex
0000BFD2 0000                       		dc.w Obj30_Type01-Obj30_TypeIndex
0000BFD4 0000                       		dc.w Obj30_Type02-Obj30_TypeIndex
0000BFD6 0000                       		dc.w Obj30_Type03-Obj30_TypeIndex
0000BFD8 0000                       		dc.w Obj30_Type04-Obj30_TypeIndex
0000BFDA                            ; ===========================================================================
0000BFDA                            
0000BFDA                            Obj30_Type00:				; XREF: Obj30_TypeIndex
0000BFDA 4E75                       		rts	
0000BFDC                            ; ===========================================================================
0000BFDC                            
0000BFDC                            Obj30_Type01:				; XREF: Obj30_TypeIndex
0000BFDC 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000BFE0 323C 0040                  		move.w	#$40,d1
0000BFE4 6000                       		bra.s	loc_B514
0000BFE6                            ; ===========================================================================
0000BFE6                            
0000BFE6                            Obj30_Type02:				; XREF: Obj30_TypeIndex
0000BFE6 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000BFEA 323C 0040                  		move.w	#$40,d1
0000BFEE 4440                       		neg.w	d0
0000BFF0 D041                       		add.w	d1,d0
0000BFF2                            
0000BFF2                            loc_B514:				; XREF: Obj30_Type01
0000BFF2 0828 0003 0028             		btst	#3,$28(a0)
0000BFF8 6700                       		beq.s	loc_B526
0000BFFA 4440                       		neg.w	d0
0000BFFC D041                       		add.w	d1,d0
0000BFFE E208                       		lsr.b	#1,d0
0000C000 0640 0020                  		addi.w	#$20,d0
0000C004                            
0000C004                            loc_B526:
0000C004 6000 0000                  		bra.w	loc_B5EE
0000C008                            ; ===========================================================================
0000C008                            
0000C008                            Obj30_Type03:				; XREF: Obj30_TypeIndex
0000C008 0828 0003 0028             		btst	#3,$28(a0)
0000C00E 6700                       		beq.s	loc_B53E
0000C010 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000C014 0440 0010                  		subi.w	#$10,d0
0000C018 6000 0000                  		bra.w	loc_B5EE
0000C01C                            ; ===========================================================================
0000C01C                            
0000C01C                            loc_B53E:
0000C01C 0828 0003 0022             		btst	#3,$22(a0)
0000C022 6600                       		bne.s	loc_B54E
0000C024 08A8 0000 0034             		bclr	#0,$34(a0)
0000C02A 6000                       		bra.s	loc_B582
0000C02C                            ; ===========================================================================
0000C02C                            
0000C02C                            loc_B54E:
0000C02C 4A28 0034                  		tst.b	$34(a0)
0000C030 6600                       		bne.s	loc_B582
0000C032 117C 0001 0034             		move.b	#1,$34(a0)
0000C038 08E8 0000 0035             		bset	#0,$35(a0)
0000C03E 6700                       		beq.s	loc_B582
0000C040 08E8 0007 0034             		bset	#7,$34(a0)
0000C046 317C 0010 0036             		move.w	#$10,$36(a0)
0000C04C 117C 000A 0038             		move.b	#$A,$38(a0)
0000C052 0C68 0040 0032             		cmpi.w	#$40,$32(a0)
0000C058 6600                       		bne.s	loc_B582
0000C05A 317C 0040 0036             		move.w	#$40,$36(a0)
0000C060                            
0000C060                            loc_B582:
0000C060 4A28 0034                  		tst.b	$34(a0)
0000C064 6A00                       		bpl.s	loc_B5AA
0000C066 4A28 0038                  		tst.b	$38(a0)
0000C06A 6700                       		beq.s	loc_B594
0000C06C 5328 0038                  		subq.b	#1,$38(a0)
0000C070 6600                       		bne.s	loc_B5AA
0000C072                            
0000C072                            loc_B594:
0000C072 4A68 0032                  		tst.w	$32(a0)
0000C076 6700                       		beq.s	loc_B5A4
0000C078 5368 0032                  		subq.w	#1,$32(a0)
0000C07C 5368 0036                  		subq.w	#1,$36(a0)
0000C080 6600                       		bne.s	loc_B5AA
0000C082                            
0000C082                            loc_B5A4:
0000C082 08A8 0007 0034             		bclr	#7,$34(a0)
0000C088                            
0000C088                            loc_B5AA:
0000C088 3028 0032                  		move.w	$32(a0),d0
0000C08C 6000                       		bra.s	loc_B5EE
0000C08E                            ; ===========================================================================
0000C08E                            
0000C08E                            Obj30_Type04:				; XREF: Obj30_TypeIndex
0000C08E 0828 0003 0028             		btst	#3,$28(a0)
0000C094 6700                       		beq.s	Obj30_ChkSwitch
0000C096 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000C09A 0440 0010                  		subi.w	#$10,d0
0000C09E 6000                       		bra.s	loc_B5EE
0000C0A0                            ; ===========================================================================
0000C0A0                            
0000C0A0                            Obj30_ChkSwitch:			; XREF: Obj30_Type04
0000C0A0 4A28 0034                  		tst.b	$34(a0)
0000C0A4 6600                       		bne.s	loc_B5E0
0000C0A6 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
0000C0AA 7000                       		moveq	#0,d0
0000C0AC 1028 0028                  		move.b	$28(a0),d0	; load object type number
0000C0B0 E848                       		lsr.w	#4,d0		; read only the	first nybble
0000C0B2 4A32 0000                  		tst.b	(a2,d0.w)	; has switch number d0 been pressed?
0000C0B6 6700                       		beq.s	loc_B5EA	; if not, branch
0000C0B8 117C 0001 0034             		move.b	#1,$34(a0)
0000C0BE                            
0000C0BE                            loc_B5E0:
0000C0BE 4A68 0032                  		tst.w	$32(a0)
0000C0C2 6700                       		beq.s	loc_B5EA
0000C0C4 5568 0032                  		subq.w	#2,$32(a0)
0000C0C8                            
0000C0C8                            loc_B5EA:
0000C0C8 3028 0032                  		move.w	$32(a0),d0
0000C0CC                            
0000C0CC                            loc_B5EE:
0000C0CC 3228 0030                  		move.w	$30(a0),d1
0000C0D0 9240                       		sub.w	d0,d1
0000C0D2 3141 000C                  		move.w	d1,$C(a0)
0000C0D6 4E75                       		rts	
0000C0D8                            ; ===========================================================================
0000C0D8                            ; ---------------------------------------------------------------------------
0000C0D8                            ; Sprite mappings - large green	glassy blocks (MZ)
0000C0D8                            ; ---------------------------------------------------------------------------
0000C0D8                            Map_obj30:
0000C0D8                            	include "_maps\obj30.asm"
0000C0D8                            ; ---------------------------------------------------------------------------
0000C0D8                            ; Sprite mappings - large green	glassy blocks (MZ)
0000C0D8                            ; ---------------------------------------------------------------------------
0000C0D8 0000                       		dc.w byte_B600-Map_obj30
0000C0DA 0000                       		dc.w byte_B63D-Map_obj30
0000C0DC 0000                       		dc.w byte_B648-Map_obj30
0000C0DE 0C                         byte_B600:	dc.b $C
0000C0DF B80C 0000 E0               		dc.b $B8, $C, 0, 0, $E0
0000C0E4 B80C 0800 00               		dc.b $B8, $C, 8, 0, 0
0000C0E9 C00F 0004 E0               		dc.b $C0, $F, 0, 4, $E0
0000C0EE C00F 0804 00               		dc.b $C0, $F, 8, 4, 0
0000C0F3 E00F 0004 E0               		dc.b $E0, $F, 0, 4, $E0
0000C0F8 E00F 0804 00               		dc.b $E0, $F, 8, 4, 0
0000C0FD 000F 0004 E0               		dc.b 0,	$F, 0, 4, $E0
0000C102 000F 0804 00               		dc.b 0,	$F, 8, 4, 0
0000C107 200F 0004 E0               		dc.b $20, $F, 0, 4, $E0
0000C10C 200F 0804 00               		dc.b $20, $F, 8, 4, 0
0000C111 400C 1000 E0               		dc.b $40, $C, $10, 0, $E0
0000C116 400C 1800 00               		dc.b $40, $C, $18, 0, 0
0000C11B 02                         byte_B63D:	dc.b 2
0000C11C 0806 0014 F0               		dc.b 8,	6, 0, $14, $F0
0000C121 0006 0014 00               		dc.b 0,	6, 0, $14, 0
0000C126 0A                         byte_B648:	dc.b $A
0000C127 C80C 0000 E0               		dc.b $C8, $C, 0, 0, $E0
0000C12C C80C 0800 00               		dc.b $C8, $C, 8, 0, 0
0000C131 D00F 0004 E0               		dc.b $D0, $F, 0, 4, $E0
0000C136 D00F 0804 00               		dc.b $D0, $F, 8, 4, 0
0000C13B F00F 0004 E0               		dc.b $F0, $F, 0, 4, $E0
0000C140 F00F 0804 00               		dc.b $F0, $F, 8, 4, 0
0000C145 100F 0004 E0               		dc.b $10, $F, 0, 4, $E0
0000C14A 100F 0804 00               		dc.b $10, $F, 8, 4, 0
0000C14F 300C 1000 E0               		dc.b $30, $C, $10, 0, $E0
0000C154 300C 1800 00               		dc.b $30, $C, $18, 0, 0
0000C15A 00                         		even
0000C15A 00                         		even
0000C15A                            
0000C15A                            ; ===========================================================================
0000C15A                            ; ---------------------------------------------------------------------------
0000C15A                            ; Object 31 - stomping metal blocks on chains (MZ)
0000C15A                            ; ---------------------------------------------------------------------------
0000C15A                            
0000C15A                            Obj31:					; XREF: Obj_Index
0000C15A 7000                       		moveq	#0,d0
0000C15C 1028 0024                  		move.b	$24(a0),d0
0000C160 323B 0000                  		move.w	Obj31_Index(pc,d0.w),d1
0000C164 4EFB 1000                  		jmp	Obj31_Index(pc,d1.w)
0000C168                            ; ===========================================================================
0000C168 0000                       Obj31_Index:	dc.w Obj31_Main-Obj31_Index
0000C16A 0000                       		dc.w loc_B798-Obj31_Index
0000C16C 0000                       		dc.w loc_B7FE-Obj31_Index
0000C16E 0000                       		dc.w Obj31_Display2-Obj31_Index
0000C170 0000                       		dc.w loc_B7E2-Obj31_Index
0000C172                            
0000C172 0000                       Obj31_SwchNums:	dc.b 0,	0		; switch number, obj number
0000C174 0100                       		dc.b 1,	0
0000C176                            
0000C176 0200 00                    Obj31_Var:	dc.b 2,	0, 0		; XREF: ROM:0000B6E0o
0000C179 041C 01                    		dc.b 4,	$1C, 1		; routine number, y-position, frame number
0000C17C 08CC 03                    		dc.b 8,	$CC, 3
0000C17F 06F0 02                    		dc.b 6,	$F0, 2
0000C182                            
0000C182 7000 A000                  word_B6A4:	dc.w $7000, $A000
0000C186 5000 7800                  		dc.w $5000, $7800
0000C18A 3800 5800                  		dc.w $3800, $5800
0000C18E B800                       		dc.w $B800
0000C190                            ; ===========================================================================
0000C190                            
0000C190                            Obj31_Main:				; XREF: Obj31_Index
0000C190 7000                       		moveq	#0,d0
0000C192 1028 0028                  		move.b	$28(a0),d0
0000C196 6A00                       		bpl.s	loc_B6CE
0000C198 0240 007F                  		andi.w	#$7F,d0
0000C19C D040                       		add.w	d0,d0
0000C19E 45FB 00D2                  		lea	Obj31_SwchNums(pc,d0.w),a2
0000C1A2 115A 003A                  		move.b	(a2)+,$3A(a0)
0000C1A6 101A                       		move.b	(a2)+,d0
0000C1A8 1140 0028                  		move.b	d0,$28(a0)
0000C1AC                            
0000C1AC                            loc_B6CE:
0000C1AC 0200 000F                  		andi.b	#$F,d0
0000C1B0 D040                       		add.w	d0,d0
0000C1B2 343B 00CE                  		move.w	word_B6A4(pc,d0.w),d2
0000C1B6 4A40                       		tst.w	d0
0000C1B8 6600                       		bne.s	loc_B6E0
0000C1BA 3142 0032                  		move.w	d2,$32(a0)
0000C1BE                            
0000C1BE                            loc_B6E0:
0000C1BE 45F9 0000 C176             		lea	(Obj31_Var).l,a2
0000C1C4 2248                       		movea.l	a0,a1
0000C1C6 7203                       		moveq	#3,d1
0000C1C8 6000                       		bra.s	Obj31_MakeStomper
0000C1CA                            ; ===========================================================================
0000C1CA                            
0000C1CA                            Obj31_Loop:
0000C1CA 6100 0000                  		bsr.w	SingleObjLoad2
0000C1CE 6600 0000                  		bne.w	Obj31_SetSize
0000C1D2                            
0000C1D2                            Obj31_MakeStomper:			; XREF: Obj31_Main
0000C1D2 135A 0024                  		move.b	(a2)+,$24(a1)
0000C1D6 12BC 0031                  		move.b	#$31,0(a1)
0000C1DA 3368 0008 0008             		move.w	8(a0),8(a1)
0000C1E0 101A                       		move.b	(a2)+,d0
0000C1E2 4880                       		ext.w	d0
0000C1E4 D068 000C                  		add.w	$C(a0),d0
0000C1E8 3340 000C                  		move.w	d0,$C(a1)
0000C1EC 237C 0000 0000 0004        		move.l	#Map_obj31,4(a1)
0000C1F4 337C 0300 0002             		move.w	#$300,2(a1)
0000C1FA 137C 0004 0001             		move.b	#4,1(a1)
0000C200 3369 000C 0030             		move.w	$C(a1),$30(a1)
0000C206 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000C20C 137C 0010 0019             		move.b	#$10,$19(a1)
0000C212 3342 0034                  		move.w	d2,$34(a1)
0000C216 137C 0004 0018             		move.b	#4,$18(a1)
0000C21C 135A 001A                  		move.b	(a2)+,$1A(a1)
0000C220 0C29 0001 001A             		cmpi.b	#1,$1A(a1)
0000C226 6600                       		bne.s	loc_B76A
0000C228 5341                       		subq.w	#1,d1
0000C22A 1028 0028                  		move.b	$28(a0),d0
0000C22E 0240 00F0                  		andi.w	#$F0,d0
0000C232 0C40 0020                  		cmpi.w	#$20,d0
0000C236 679A                       		beq.s	Obj31_MakeStomper
0000C238 137C 0038 0019             		move.b	#$38,$19(a1)
0000C23E 137C 0090 0020             		move.b	#$90,$20(a1)
0000C244 5241                       		addq.w	#1,d1
0000C246                            
0000C246                            loc_B76A:
0000C246 2348 003C                  		move.l	a0,$3C(a1)
0000C24A 51C9 FF7E                  		dbf	d1,Obj31_Loop
0000C24E                            
0000C24E 137C 0003 0018             		move.b	#3,$18(a1)
0000C254                            
0000C254                            Obj31_SetSize:
0000C254 7000                       		moveq	#0,d0
0000C256 1028 0028                  		move.b	$28(a0),d0
0000C25A E648                       		lsr.w	#3,d0
0000C25C 0200 000E                  		andi.b	#$E,d0
0000C260 45FB 0000                  		lea	Obj31_Var2(pc,d0.w),a2
0000C264 115A 0019                  		move.b	(a2)+,$19(a0)
0000C268 115A 001A                  		move.b	(a2)+,$1A(a0)
0000C26C 6000                       		bra.s	loc_B798
0000C26E                            ; ===========================================================================
0000C26E 3800                       Obj31_Var2:	dc.b $38, 0		; width, frame number
0000C270 3009                       		dc.b $30, 9
0000C272 100A                       		dc.b $10, $A
0000C274                            ; ===========================================================================
0000C274                            
0000C274                            loc_B798:				; XREF: Obj31_Index
0000C274 6100 0000                  		bsr.w	Obj31_Types
0000C278 31E8 000C F7A4             		move.w	$C(a0),($FFFFF7A4).w
0000C27E 7200                       		moveq	#0,d1
0000C280 1228 0019                  		move.b	$19(a0),d1
0000C284 0641 000B                  		addi.w	#$B,d1
0000C288 343C 000C                  		move.w	#$C,d2
0000C28C 363C 000D                  		move.w	#$D,d3
0000C290 3828 0008                  		move.w	8(a0),d4
0000C294 6100 0000                  		bsr.w	SolidObject
0000C298 0828 0003 0022             		btst	#3,$22(a0)
0000C29E 6700                       		beq.s	Obj31_Display
0000C2A0 0C28 0010 0032             		cmpi.b	#$10,$32(a0)
0000C2A6 6400                       		bcc.s	Obj31_Display
0000C2A8 2448                       		movea.l	a0,a2
0000C2AA 41F8 D000                  		lea	($FFFFD000).w,a0
0000C2AE 4EB9 0000 0000             		jsr	KillSonic
0000C2B4 204A                       		movea.l	a2,a0
0000C2B6                            
0000C2B6                            Obj31_Display:
0000C2B6 6100 0000                  		bsr.w	DisplaySprite
0000C2BA 6000 0000                  		bra.w	Obj31_ChkDel
0000C2BE                            ; ===========================================================================
0000C2BE                            
0000C2BE                            loc_B7E2:				; XREF: Obj31_Index
0000C2BE 117C 0080 0016             		move.b	#$80,$16(a0)
0000C2C4 08E8 0004 0001             		bset	#4,1(a0)
0000C2CA 2268 003C                  		movea.l	$3C(a0),a1
0000C2CE 1029 0032                  		move.b	$32(a1),d0
0000C2D2 EA08                       		lsr.b	#5,d0
0000C2D4 5600                       		addq.b	#3,d0
0000C2D6 1140 001A                  		move.b	d0,$1A(a0)
0000C2DA                            
0000C2DA                            loc_B7FE:				; XREF: Obj31_Index
0000C2DA 2268 003C                  		movea.l	$3C(a0),a1
0000C2DE 7000                       		moveq	#0,d0
0000C2E0 1029 0032                  		move.b	$32(a1),d0
0000C2E4 D068 0030                  		add.w	$30(a0),d0
0000C2E8 3140 000C                  		move.w	d0,$C(a0)
0000C2EC                            
0000C2EC                            Obj31_Display2:				; XREF: Obj31_Index
0000C2EC 6100 0000                  		bsr.w	DisplaySprite
0000C2F0                            
0000C2F0                            Obj31_ChkDel:				; XREF: Obj31_Display
0000C2F0 3028 0008                  		move.w	8(a0),d0
0000C2F4 0240 FF80                  		andi.w	#$FF80,d0
0000C2F8 3238 F700                  		move.w	($FFFFF700).w,d1
0000C2FC 0441 0080                  		subi.w	#$80,d1
0000C300 0241 FF80                  		andi.w	#$FF80,d1
0000C304 9041                       		sub.w	d1,d0
0000C306 0C40 0280                  		cmpi.w	#$280,d0
0000C30A 6200 0000                  		bhi.w	DeleteObject
0000C30E 4E75                       		rts	
0000C310                            ; ===========================================================================
0000C310                            
0000C310                            Obj31_Types:				; XREF: loc_B798
0000C310 1028 0028                  		move.b	$28(a0),d0
0000C314 0240 000F                  		andi.w	#$F,d0
0000C318 D040                       		add.w	d0,d0
0000C31A 323B 0000                  		move.w	Obj31_TypeIndex(pc,d0.w),d1
0000C31E 4EFB 1000                  		jmp	Obj31_TypeIndex(pc,d1.w)
0000C322                            ; ===========================================================================
0000C322 0000                       Obj31_TypeIndex:dc.w Obj31_Type00-Obj31_TypeIndex
0000C324 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000C326 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000C328 0000                       		dc.w Obj31_Type03-Obj31_TypeIndex
0000C32A 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000C32C 0000                       		dc.w Obj31_Type03-Obj31_TypeIndex
0000C32E 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000C330                            ; ===========================================================================
0000C330                            
0000C330                            Obj31_Type00:				; XREF: Obj31_TypeIndex
0000C330 45F8 F7E0                  		lea	($FFFFF7E0).w,a2 ; load	switch statuses
0000C334 7000                       		moveq	#0,d0
0000C336 1028 003A                  		move.b	$3A(a0),d0	; move number 0	or 1 to	d0
0000C33A 4A32 0000                  		tst.b	(a2,d0.w)	; has switch (d0) been pressed?
0000C33E 6700                       		beq.s	loc_B8A8	; if not, branch
0000C340 4A78 F7A4                  		tst.w	($FFFFF7A4).w
0000C344 6A00                       		bpl.s	loc_B872
0000C346 0C28 0010 0032             		cmpi.b	#$10,$32(a0)
0000C34C 6700                       		beq.s	loc_B8A0
0000C34E                            
0000C34E                            loc_B872:
0000C34E 4A68 0032                  		tst.w	$32(a0)
0000C352 6700                       		beq.s	loc_B8A0
0000C354 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000C358 0200 000F                  		andi.b	#$F,d0
0000C35C 6600                       		bne.s	loc_B892
0000C35E 4A28 0001                  		tst.b	1(a0)
0000C362 6A00                       		bpl.s	loc_B892
0000C364 303C 00C7                  		move.w	#$C7,d0
0000C368 4EB9 0000 147C             		jsr	(PlaySound_Special).l ;	play rising chain sound
0000C36E                            
0000C36E                            loc_B892:
0000C36E 0468 0080 0032             		subi.w	#$80,$32(a0)
0000C374 6400                       		bcc.s	Obj31_Restart
0000C376 317C 0000 0032             		move.w	#0,$32(a0)
0000C37C                            
0000C37C                            loc_B8A0:
0000C37C 317C 0000 0012             		move.w	#0,$12(a0)
0000C382 6000                       		bra.s	Obj31_Restart
0000C384                            ; ===========================================================================
0000C384                            
0000C384                            loc_B8A8:				; XREF: Obj31_Type00
0000C384 3228 0034                  		move.w	$34(a0),d1
0000C388 B268 0032                  		cmp.w	$32(a0),d1
0000C38C 6700                       		beq.s	Obj31_Restart
0000C38E 3028 0012                  		move.w	$12(a0),d0
0000C392 0668 0070 0012             		addi.w	#$70,$12(a0)	; make object fall
0000C398 D168 0032                  		add.w	d0,$32(a0)
0000C39C B268 0032                  		cmp.w	$32(a0),d1
0000C3A0 6200                       		bhi.s	Obj31_Restart
0000C3A2 3141 0032                  		move.w	d1,$32(a0)
0000C3A6 317C 0000 0012             		move.w	#0,$12(a0)	; stop object falling
0000C3AC 4A28 0001                  		tst.b	1(a0)
0000C3B0 6A00                       		bpl.s	Obj31_Restart
0000C3B2 303C 00BD                  		move.w	#$BD,d0
0000C3B6 4EB9 0000 147C             		jsr	(PlaySound_Special).l ;	play stomping sound
0000C3BC                            
0000C3BC                            Obj31_Restart:
0000C3BC 7000                       		moveq	#0,d0
0000C3BE 1028 0032                  		move.b	$32(a0),d0
0000C3C2 D068 0030                  		add.w	$30(a0),d0
0000C3C6 3140 000C                  		move.w	d0,$C(a0)
0000C3CA 4E75                       		rts	
0000C3CC                            ; ===========================================================================
0000C3CC                            
0000C3CC                            Obj31_Type01:				; XREF: Obj31_TypeIndex
0000C3CC 4A68 0036                  		tst.w	$36(a0)
0000C3D0 6700                       		beq.s	loc_B938
0000C3D2 4A68 0038                  		tst.w	$38(a0)
0000C3D6 6700                       		beq.s	loc_B902
0000C3D8 5368 0038                  		subq.w	#1,$38(a0)
0000C3DC 6000                       		bra.s	loc_B97C
0000C3DE                            ; ===========================================================================
0000C3DE                            
0000C3DE                            loc_B902:
0000C3DE 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000C3E2 0200 000F                  		andi.b	#$F,d0
0000C3E6 6600                       		bne.s	loc_B91C
0000C3E8 4A28 0001                  		tst.b	1(a0)
0000C3EC 6A00                       		bpl.s	loc_B91C
0000C3EE 303C 00C7                  		move.w	#$C7,d0
0000C3F2 4EB9 0000 147C             		jsr	(PlaySound_Special).l ;	play rising chain sound
0000C3F8                            
0000C3F8                            loc_B91C:
0000C3F8 0468 0080 0032             		subi.w	#$80,$32(a0)
0000C3FE 6400                       		bcc.s	loc_B97C
0000C400 317C 0000 0032             		move.w	#0,$32(a0)
0000C406 317C 0000 0012             		move.w	#0,$12(a0)
0000C40C 317C 0000 0036             		move.w	#0,$36(a0)
0000C412 6000                       		bra.s	loc_B97C
0000C414                            ; ===========================================================================
0000C414                            
0000C414                            loc_B938:				; XREF: Obj31_Type01
0000C414 3228 0034                  		move.w	$34(a0),d1
0000C418 B268 0032                  		cmp.w	$32(a0),d1
0000C41C 6700                       		beq.s	loc_B97C
0000C41E 3028 0012                  		move.w	$12(a0),d0
0000C422 0668 0070 0012             		addi.w	#$70,$12(a0)	; make object fall
0000C428 D168 0032                  		add.w	d0,$32(a0)
0000C42C B268 0032                  		cmp.w	$32(a0),d1
0000C430 6200                       		bhi.s	loc_B97C
0000C432 3141 0032                  		move.w	d1,$32(a0)
0000C436 317C 0000 0012             		move.w	#0,$12(a0)	; stop object falling
0000C43C 317C 0001 0036             		move.w	#1,$36(a0)
0000C442 317C 003C 0038             		move.w	#$3C,$38(a0)
0000C448 4A28 0001                  		tst.b	1(a0)
0000C44C 6A00                       		bpl.s	loc_B97C
0000C44E 303C 00BD                  		move.w	#$BD,d0
0000C452 4EB9 0000 147C             		jsr	(PlaySound_Special).l ;	play stomping sound
0000C458                            
0000C458                            loc_B97C:
0000C458 6000 FF62                  		bra.w	Obj31_Restart
0000C45C                            ; ===========================================================================
0000C45C                            
0000C45C                            Obj31_Type03:				; XREF: Obj31_TypeIndex
0000C45C 3038 D008                  		move.w	($FFFFD008).w,d0
0000C460 9068 0008                  		sub.w	8(a0),d0
0000C464 6400                       		bcc.s	loc_B98C
0000C466 4440                       		neg.w	d0
0000C468                            
0000C468                            loc_B98C:
0000C468 0C40 0090                  		cmpi.w	#$90,d0
0000C46C 6400                       		bcc.s	loc_B996
0000C46E 5228 0028                  		addq.b	#1,$28(a0)
0000C472                            
0000C472                            loc_B996:
0000C472 6000 FF48                  		bra.w	Obj31_Restart
0000C476                            ; ===========================================================================
0000C476                            ; ---------------------------------------------------------------------------
0000C476                            ; Object 45 - spiked metal block from beta version (MZ)
0000C476                            ; ---------------------------------------------------------------------------
0000C476                            
0000C476                            Obj45:					; XREF: Obj_Index
0000C476 7000                       		moveq	#0,d0
0000C478 1028 0024                  		move.b	$24(a0),d0
0000C47C 323B 0000                  		move.w	Obj45_Index(pc,d0.w),d1
0000C480 4EFB 1000                  		jmp	Obj45_Index(pc,d1.w)
0000C484                            ; ===========================================================================
0000C484 0000                       Obj45_Index:	dc.w Obj45_Main-Obj45_Index
0000C486 0000                       		dc.w Obj45_Solid-Obj45_Index
0000C488 0000                       		dc.w loc_BA8E-Obj45_Index
0000C48A 0000                       		dc.w Obj45_Display-Obj45_Index
0000C48C 0000                       		dc.w loc_BA7A-Obj45_Index
0000C48E                            
0000C48E 0204 00                    Obj45_Var:	dc.b	2,   4,	  0	; routine number, x-position, frame number
0000C491 04E4 01                    		dc.b	4, $E4,	  1
0000C494 0834 03                    		dc.b	8, $34,	  3
0000C497 0628 02                    		dc.b	6, $28,	  2
0000C49A                            
0000C49A 3800                       word_B9BE:	dc.w $3800
0000C49C A000                       		dc.w -$6000
0000C49E 5000                       		dc.w $5000
0000C4A0                            ; ===========================================================================
0000C4A0                            
0000C4A0                            Obj45_Main:				; XREF: Obj45_Index
0000C4A0 7000                       		moveq	#0,d0
0000C4A2 1028 0028                  		move.b	$28(a0),d0
0000C4A6 D040                       		add.w	d0,d0
0000C4A8 343B 00F0                  		move.w	word_B9BE(pc,d0.w),d2
0000C4AC 45F9 0000 C48E             		lea	(Obj45_Var).l,a2
0000C4B2 2248                       		movea.l	a0,a1
0000C4B4 7203                       		moveq	#3,d1
0000C4B6 6000                       		bra.s	Obj45_Load
0000C4B8                            ; ===========================================================================
0000C4B8                            
0000C4B8                            Obj45_Loop:
0000C4B8 6100 0000                  		bsr.w	SingleObjLoad2
0000C4BC 6600                       		bne.s	loc_BA52
0000C4BE                            
0000C4BE                            Obj45_Load:				; XREF: Obj45_Main
0000C4BE 135A 0024                  		move.b	(a2)+,$24(a1)
0000C4C2 12BC 0045                  		move.b	#$45,0(a1)
0000C4C6 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000C4CC 101A                       		move.b	(a2)+,d0
0000C4CE 4880                       		ext.w	d0
0000C4D0 D068 0008                  		add.w	8(a0),d0
0000C4D4 3340 0008                  		move.w	d0,8(a1)
0000C4D8 237C 0000 0000 0004        		move.l	#Map_obj45,4(a1)
0000C4E0 337C 0300 0002             		move.w	#$300,2(a1)
0000C4E6 137C 0004 0001             		move.b	#4,1(a1)
0000C4EC 3369 0008 0030             		move.w	8(a1),$30(a1)
0000C4F2 3368 0008 003A             		move.w	8(a0),$3A(a1)
0000C4F8 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000C4FE 137C 0020 0019             		move.b	#$20,$19(a1)
0000C504 3342 0034                  		move.w	d2,$34(a1)
0000C508 137C 0004 0018             		move.b	#4,$18(a1)
0000C50E 0C12 0001                  		cmpi.b	#1,(a2)
0000C512 6600                       		bne.s	loc_BA40
0000C514 137C 0091 0020             		move.b	#$91,$20(a1)
0000C51A                            
0000C51A                            loc_BA40:
0000C51A 135A 001A                  		move.b	(a2)+,$1A(a1)
0000C51E 2348 003C                  		move.l	a0,$3C(a1)
0000C522 51C9 FF94                  		dbf	d1,Obj45_Loop	; repeat 3 times
0000C526                            
0000C526 137C 0003 0018             		move.b	#3,$18(a1)
0000C52C                            
0000C52C                            loc_BA52:
0000C52C 117C 0010 0019             		move.b	#$10,$19(a0)
0000C532                            
0000C532                            Obj45_Solid:				; XREF: Obj45_Index
0000C532 3F28 0008                  		move.w	8(a0),-(sp)
0000C536 6100 0000                  		bsr.w	Obj45_Move
0000C53A 323C 0017                  		move.w	#$17,d1
0000C53E 343C 0020                  		move.w	#$20,d2
0000C542 363C 0020                  		move.w	#$20,d3
0000C546 381F                       		move.w	(sp)+,d4
0000C548 6100 0000                  		bsr.w	SolidObject
0000C54C 6100 0000                  		bsr.w	DisplaySprite
0000C550 6000 0000                  		bra.w	Obj45_ChkDel
0000C554                            ; ===========================================================================
0000C554                            
0000C554                            loc_BA7A:				; XREF: Obj45_Index
0000C554 2268 003C                  		movea.l	$3C(a0),a1
0000C558 1029 0032                  		move.b	$32(a1),d0
0000C55C 0600 0010                  		addi.b	#$10,d0
0000C560 EA08                       		lsr.b	#5,d0
0000C562 5600                       		addq.b	#3,d0
0000C564 1140 001A                  		move.b	d0,$1A(a0)
0000C568                            
0000C568                            loc_BA8E:				; XREF: Obj45_Index
0000C568 2268 003C                  		movea.l	$3C(a0),a1
0000C56C 7000                       		moveq	#0,d0
0000C56E 1029 0032                  		move.b	$32(a1),d0
0000C572 4440                       		neg.w	d0
0000C574 D068 0030                  		add.w	$30(a0),d0
0000C578 3140 0008                  		move.w	d0,8(a0)
0000C57C                            
0000C57C                            Obj45_Display:				; XREF: Obj45_Index
0000C57C 6100 0000                  		bsr.w	DisplaySprite
0000C580                            
0000C580                            Obj45_ChkDel:				; XREF: Obj45_Solid
0000C580 3028 003A                  		move.w	$3A(a0),d0
0000C584 0240 FF80                  		andi.w	#$FF80,d0
0000C588 3238 F700                  		move.w	($FFFFF700).w,d1
0000C58C 0441 0080                  		subi.w	#$80,d1
0000C590 0241 FF80                  		andi.w	#$FF80,d1
0000C594 9041                       		sub.w	d1,d0
0000C596 0C40 0280                  		cmpi.w	#$280,d0
0000C59A 6200 0000                  		bhi.w	DeleteObject
0000C59E 4E75                       		rts	
0000C5A0                            
0000C5A0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000C5A0                            
0000C5A0                            
0000C5A0                            Obj45_Move:				; XREF: Obj45_Solid
0000C5A0 7000                       		moveq	#0,d0
0000C5A2 1028 0028                  		move.b	$28(a0),d0
0000C5A6 D040                       		add.w	d0,d0
0000C5A8 323B 0000                  		move.w	off_BAD6(pc,d0.w),d1
0000C5AC 4EFB 1000                  		jmp	off_BAD6(pc,d1.w)
0000C5B0                            ; End of function Obj45_Move
0000C5B0                            
0000C5B0                            ; ===========================================================================
0000C5B0 0000                       off_BAD6:	dc.w loc_BADA-off_BAD6
0000C5B2 0000                       		dc.w loc_BADA-off_BAD6
0000C5B4                            ; ===========================================================================
0000C5B4                            
0000C5B4                            loc_BADA:				; XREF: off_BAD6
0000C5B4 4A68 0036                  		tst.w	$36(a0)
0000C5B8 6700                       		beq.s	loc_BB08
0000C5BA 4A68 0038                  		tst.w	$38(a0)
0000C5BE 6700                       		beq.s	loc_BAEC
0000C5C0 5368 0038                  		subq.w	#1,$38(a0)
0000C5C4 6000                       		bra.s	loc_BB3C
0000C5C6                            ; ===========================================================================
0000C5C6                            
0000C5C6                            loc_BAEC:
0000C5C6 0468 0080 0032             		subi.w	#$80,$32(a0)
0000C5CC 6400                       		bcc.s	loc_BB3C
0000C5CE 317C 0000 0032             		move.w	#0,$32(a0)
0000C5D4 317C 0000 0010             		move.w	#0,$10(a0)
0000C5DA 317C 0000 0036             		move.w	#0,$36(a0)
0000C5E0 6000                       		bra.s	loc_BB3C
0000C5E2                            ; ===========================================================================
0000C5E2                            
0000C5E2                            loc_BB08:				; XREF: loc_BADA
0000C5E2 3228 0034                  		move.w	$34(a0),d1
0000C5E6 B268 0032                  		cmp.w	$32(a0),d1
0000C5EA 6700                       		beq.s	loc_BB3C
0000C5EC 3028 0010                  		move.w	$10(a0),d0
0000C5F0 0668 0070 0010             		addi.w	#$70,$10(a0)
0000C5F6 D168 0032                  		add.w	d0,$32(a0)
0000C5FA B268 0032                  		cmp.w	$32(a0),d1
0000C5FE 6200                       		bhi.s	loc_BB3C
0000C600 3141 0032                  		move.w	d1,$32(a0)
0000C604 317C 0000 0010             		move.w	#0,$10(a0)
0000C60A 317C 0001 0036             		move.w	#1,$36(a0)
0000C610 317C 003C 0038             		move.w	#$3C,$38(a0)
0000C616                            
0000C616                            loc_BB3C:
0000C616 7000                       		moveq	#0,d0
0000C618 1028 0032                  		move.b	$32(a0),d0
0000C61C 4440                       		neg.w	d0
0000C61E D068 0030                  		add.w	$30(a0),d0
0000C622 3140 0008                  		move.w	d0,8(a0)
0000C626 4E75                       		rts	
0000C628                            ; ===========================================================================
0000C628                            ; ---------------------------------------------------------------------------
0000C628                            ; Sprite mappings - metal stomping blocks on chains (MZ)
0000C628                            ; ---------------------------------------------------------------------------
0000C628                            Map_obj31:
0000C628                            	include "_maps\obj31.asm"
0000C628                            ; ---------------------------------------------------------------------------
0000C628                            ; Sprite mappings - metal stomping blocks on chains (MZ)
0000C628                            ; ---------------------------------------------------------------------------
0000C628 0000                       		dc.w byte_BB64-Map_obj31
0000C62A 0000                       		dc.w byte_BB7E-Map_obj31
0000C62C 0000                       		dc.w byte_BB98-Map_obj31
0000C62E 0000                       		dc.w byte_BB9E-Map_obj31
0000C630 0000                       		dc.w byte_BBA9-Map_obj31
0000C632 0000                       		dc.w byte_BBBE-Map_obj31
0000C634 0000                       		dc.w byte_BBDD-Map_obj31
0000C636 0000                       		dc.w byte_BC06-Map_obj31
0000C638 0000                       		dc.w byte_BC06-Map_obj31
0000C63A 0000                       		dc.w byte_BC39-Map_obj31
0000C63C 0000                       		dc.w byte_BC53-Map_obj31
0000C63E 05                         byte_BB64:	dc.b 5
0000C63F F406 0000 C8               		dc.b $F4, 6, 0,	0, $C8
0000C644 F40A 0006 D8               		dc.b $F4, $A, 0, 6, $D8
0000C649 EC0F 000F F0               		dc.b $EC, $F, 0, $F, $F0
0000C64E F40A 0806 10               		dc.b $F4, $A, 8, 6, $10
0000C653 F406 0800 28               		dc.b $F4, 6, 8,	0, $28
0000C658 05                         byte_BB7E:	dc.b 5
0000C659 F003 121F D4               		dc.b $F0, 3, $12, $1F, $D4
0000C65E F003 121F E8               		dc.b $F0, 3, $12, $1F, $E8
0000C663 F003 121F FC               		dc.b $F0, 3, $12, $1F, $FC
0000C668 F003 121F 10               		dc.b $F0, 3, $12, $1F, $10
0000C66D F003 121F 24               		dc.b $F0, 3, $12, $1F, $24
0000C672 01                         byte_BB98:	dc.b 1
0000C673 DC0F 100F F0               		dc.b $DC, $F, $10, $F, $F0
0000C678 02                         byte_BB9E:	dc.b 2
0000C679 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C67E 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C683 04                         byte_BBA9:	dc.b 4
0000C684 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000C689 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000C68E 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C693 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C698 06                         byte_BBBE:	dc.b 6
0000C699 C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000C69E D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000C6A3 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000C6A8 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000C6AD 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C6B2 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C6B7 08                         byte_BBDD:	dc.b 8
0000C6B8 A001 003F FC               		dc.b $A0, 1, 0,	$3F, $FC
0000C6BD B001 003F FC               		dc.b $B0, 1, 0,	$3F, $FC
0000C6C2 C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000C6C7 D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000C6CC E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000C6D1 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000C6D6 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C6DB 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C6E0 0A                         byte_BC06:	dc.b $A
0000C6E1 8001 003F FC               		dc.b $80, 1, 0,	$3F, $FC
0000C6E6 9001 003F FC               		dc.b $90, 1, 0,	$3F, $FC
0000C6EB A001 003F FC               		dc.b $A0, 1, 0,	$3F, $FC
0000C6F0 B001 003F FC               		dc.b $B0, 1, 0,	$3F, $FC
0000C6F5 C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000C6FA D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000C6FF E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000C704 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000C709 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C70E 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C713 05                         byte_BC39:	dc.b 5
0000C714 F406 0000 D0               		dc.b $F4, 6, 0,	0, $D0
0000C719 F40A 0006 E0               		dc.b $F4, $A, 0, 6, $E0
0000C71E F40A 0806 08               		dc.b $F4, $A, 8, 6, 8
0000C723 F406 0800 20               		dc.b $F4, 6, 8,	0, $20
0000C728 EC0F 000F F0               		dc.b $EC, $F, 0, $F, $F0
0000C72D 01                         byte_BC53:	dc.b 1
0000C72E EC0F 002F F0               		dc.b $EC, $F, 0, $2F, $F0
0000C734 00                         		even
0000C734 00                         		even
0000C734                            
0000C734                            ; ---------------------------------------------------------------------------
0000C734                            ; Sprite mappings - spiked metal block from beta version (MZ)
0000C734                            ; ---------------------------------------------------------------------------
0000C734                            Map_obj45:
0000C734                            	include "_maps\obj45.asm"
0000C734                            ; ---------------------------------------------------------------------------
0000C734                            ; Sprite mappings - spiked metal block from beta version (MZ)
0000C734                            ; ---------------------------------------------------------------------------
0000C734 0000                       		dc.w byte_BC6C-Map_obj45
0000C736 0000                       		dc.w byte_BC7C-Map_obj45
0000C738 0000                       		dc.w byte_BC8C-Map_obj45
0000C73A 0000                       		dc.w byte_BC92-Map_obj45
0000C73C 0000                       		dc.w byte_BC9D-Map_obj45
0000C73E 0000                       		dc.w byte_BCB2-Map_obj45
0000C740 0000                       		dc.w byte_BCD1-Map_obj45
0000C742 0000                       		dc.w byte_BCFA-Map_obj45
0000C744 0000                       		dc.w byte_BCFA-Map_obj45
0000C746 03                         byte_BC6C:	dc.b 3
0000C747 E00B 001F F4               		dc.b $E0, $B, 0, $1F, $F4
0000C74C 000B 101F F4               		dc.b 0,	$B, $10, $1F, $F4
0000C751 F003 002B 0C               		dc.b $F0, 3, 0,	$2B, $C
0000C756 03                         byte_BC7C:	dc.b 3
0000C757 E80C 121B F0               		dc.b $E8, $C, $12, $1B,	$F0
0000C75C FC0C 121B F0               		dc.b $FC, $C, $12, $1B,	$F0
0000C761 100C 121B F0               		dc.b $10, $C, $12, $1B,	$F0
0000C766 01                         byte_BC8C:	dc.b 1
0000C767 F003 082B FC               		dc.b $F0, 3, 8,	$2B, $FC
0000C76C 02                         byte_BC92:	dc.b 2
0000C76D F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C772 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C777 04                         byte_BC9D:	dc.b 4
0000C778 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C77D F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C782 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000C787 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000C78C 06                         byte_BCB2:	dc.b 6
0000C78D F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C792 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C797 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000C79C F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000C7A1 F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000C7A6 F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000C7AB 08                         byte_BCD1:	dc.b 8
0000C7AC F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C7B1 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C7B6 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000C7BB F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000C7C0 F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000C7C5 F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000C7CA F805 0041 40               		dc.b $F8, 5, 0,	$41, $40
0000C7CF F805 0041 50               		dc.b $F8, 5, 0,	$41, $50
0000C7D4 08                         byte_BCFA:	dc.b 8
0000C7D5 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C7DA F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C7DF F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000C7E4 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000C7E9 F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000C7EE F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000C7F3 F805 0041 40               		dc.b $F8, 5, 0,	$41, $40
0000C7F8 F805 0041 50               		dc.b $F8, 5, 0,	$41, $50
0000C7FD F805 0041 60               		dc.b $F8, 5, 0,	$41, $60
0000C802 F805 0041 70               		dc.b $F8, 5, 0,	$41, $70
0000C808 00                         		even
0000C808 00                         		even
0000C808                            
0000C808                            ; ===========================================================================
0000C808                            ; ---------------------------------------------------------------------------
0000C808                            ; Object 32 - switches (MZ, SYZ, LZ, SBZ)
0000C808                            ; ---------------------------------------------------------------------------
0000C808                            
0000C808                            Obj32:					; XREF: Obj_Index
0000C808 7000                       		moveq	#0,d0
0000C80A 1028 0024                  		move.b	$24(a0),d0
0000C80E 323B 0000                  		move.w	Obj32_Index(pc,d0.w),d1
0000C812 4EFB 1000                  		jmp	Obj32_Index(pc,d1.w)
0000C816                            ; ===========================================================================
0000C816 0000                       Obj32_Index:	dc.w Obj32_Main-Obj32_Index
0000C818 0000                       		dc.w Obj32_Pressed-Obj32_Index
0000C81A                            ; ===========================================================================
0000C81A                            
0000C81A                            Obj32_Main:				; XREF: Obj32_Index
0000C81A 5428 0024                  		addq.b	#2,$24(a0)
0000C81E 217C 0000 0000 0004        		move.l	#Map_obj32,4(a0)
0000C826 317C 4513 0002             		move.w	#$4513,2(a0)	; MZ specific code
0000C82C 0C38 0002 FE10             		cmpi.b	#2,($FFFFFE10).w
0000C832 6700                       		beq.s	loc_BD60
0000C834 317C 0513 0002             		move.w	#$513,2(a0)	; SYZ, LZ and SBZ specific code
0000C83A                            
0000C83A                            loc_BD60:
0000C83A 117C 0004 0001             		move.b	#4,1(a0)
0000C840 117C 0010 0019             		move.b	#$10,$19(a0)
0000C846 117C 0004 0018             		move.b	#4,$18(a0)
0000C84C 5668 000C                  		addq.w	#3,$C(a0)
0000C850                            
0000C850                            Obj32_Pressed:				; XREF: Obj32_Index
0000C850 4A28 0001                  		tst.b	1(a0)
0000C854 6A00                       		bpl.s	Obj32_Display
0000C856 323C 001B                  		move.w	#$1B,d1
0000C85A 343C 0005                  		move.w	#5,d2
0000C85E 363C 0005                  		move.w	#5,d3
0000C862 3828 0008                  		move.w	8(a0),d4
0000C866 6100 0000                  		bsr.w	SolidObject
0000C86A 08A8 0000 001A             		bclr	#0,$1A(a0)	; use "unpressed" frame
0000C870 1028 0028                  		move.b	$28(a0),d0
0000C874 0240 000F                  		andi.w	#$F,d0
0000C878 47F8 F7E0                  		lea	($FFFFF7E0).w,a3
0000C87C 47F3 0000                  		lea	(a3,d0.w),a3
0000C880 7600                       		moveq	#0,d3
0000C882 0828 0006 0028             		btst	#6,$28(a0)
0000C888 6700                       		beq.s	loc_BDB2
0000C88A 7607                       		moveq	#7,d3
0000C88C                            
0000C88C                            loc_BDB2:
0000C88C 4A28 0028                  		tst.b	$28(a0)
0000C890 6A00                       		bpl.s	loc_BDBE
0000C892 6100 0000                  		bsr.w	Obj32_MZBlock
0000C896 6600                       		bne.s	loc_BDC8
0000C898                            
0000C898                            loc_BDBE:
0000C898 4A28 0025                  		tst.b	$25(a0)
0000C89C 6600                       		bne.s	loc_BDC8
0000C89E 0793                       		bclr	d3,(a3)
0000C8A0 6000                       		bra.s	loc_BDDE
0000C8A2                            ; ===========================================================================
0000C8A2                            
0000C8A2                            loc_BDC8:
0000C8A2 4A13                       		tst.b	(a3)
0000C8A4 6600                       		bne.s	loc_BDD6
0000C8A6 303C 00CD                  		move.w	#$CD,d0
0000C8AA 4EB9 0000 147C             		jsr	(PlaySound_Special).l ;	play switch sound
0000C8B0                            
0000C8B0                            loc_BDD6:
0000C8B0 07D3                       		bset	d3,(a3)
0000C8B2 08E8 0000 001A             		bset	#0,$1A(a0)	; use "pressed"	frame
0000C8B8                            
0000C8B8                            loc_BDDE:
0000C8B8 0828 0005 0028             		btst	#5,$28(a0)
0000C8BE 6700                       		beq.s	Obj32_Display
0000C8C0 5328 001E                  		subq.b	#1,$1E(a0)
0000C8C4 6A00                       		bpl.s	Obj32_Display
0000C8C6 117C 0007 001E             		move.b	#7,$1E(a0)
0000C8CC 0868 0001 001A             		bchg	#1,$1A(a0)
0000C8D2                            
0000C8D2                            Obj32_Display:
0000C8D2 6100 0000                  		bsr.w	DisplaySprite
0000C8D6 3028 0008                  		move.w	8(a0),d0
0000C8DA 0240 FF80                  		andi.w	#$FF80,d0
0000C8DE 3238 F700                  		move.w	($FFFFF700).w,d1
0000C8E2 0441 0080                  		subi.w	#$80,d1
0000C8E6 0241 FF80                  		andi.w	#$FF80,d1
0000C8EA 9041                       		sub.w	d1,d0
0000C8EC 0C40 0280                  		cmpi.w	#$280,d0
0000C8F0 6200 0000                  		bhi.w	Obj32_Delete
0000C8F4 4E75                       		rts	
0000C8F6                            ; ===========================================================================
0000C8F6                            
0000C8F6                            Obj32_Delete:
0000C8F6 6100 0000                  		bsr.w	DeleteObject
0000C8FA 4E75                       		rts	
0000C8FC                            
0000C8FC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000C8FC                            
0000C8FC                            
0000C8FC                            Obj32_MZBlock:				; XREF: Obj32_Pressed
0000C8FC 3F03                       		move.w	d3,-(sp)
0000C8FE 3428 0008                  		move.w	8(a0),d2
0000C902 3628 000C                  		move.w	$C(a0),d3
0000C906 0442 0010                  		subi.w	#$10,d2
0000C90A 5143                       		subq.w	#8,d3
0000C90C 383C 0020                  		move.w	#$20,d4
0000C910 3A3C 0010                  		move.w	#$10,d5
0000C914 43F8 D800                  		lea	($FFFFD800).w,a1 ; begin checking object RAM
0000C918 3C3C 005F                  		move.w	#$5F,d6
0000C91C                            
0000C91C                            Obj32_MZLoop:
0000C91C 4A29 0001                  		tst.b	1(a1)
0000C920 6A00                       		bpl.s	loc_BE4E
0000C922 0C11 0033                  		cmpi.b	#$33,(a1)	; is the object	a green	MZ block?
0000C926 6700                       		beq.s	loc_BE5E	; if yes, branch
0000C928                            
0000C928                            loc_BE4E:
0000C928 43E9 0040                  		lea	$40(a1),a1	; check	next object
0000C92C 51CE FFEE                  		dbf	d6,Obj32_MZLoop	; repeat $5F times
0000C930                            
0000C930 361F                       		move.w	(sp)+,d3
0000C932 7000                       		moveq	#0,d0
0000C934                            
0000C934                            locret_BE5A:
0000C934 4E75                       		rts	
0000C936                            ; ===========================================================================
0000C936 1010                       Obj32_MZData:	dc.b $10, $10
0000C938                            ; ===========================================================================
0000C938                            
0000C938                            loc_BE5E:				; XREF: Obj32_MZBlock
0000C938 7001                       		moveq	#1,d0
0000C93A 0240 003F                  		andi.w	#$3F,d0
0000C93E D040                       		add.w	d0,d0
0000C940 45FB 00F2                  		lea	Obj32_MZData-2(pc,d0.w),a2
0000C944 121A                       		move.b	(a2)+,d1
0000C946 4881                       		ext.w	d1
0000C948 3029 0008                  		move.w	8(a1),d0
0000C94C 9041                       		sub.w	d1,d0
0000C94E 9042                       		sub.w	d2,d0
0000C950 6400                       		bcc.s	loc_BE80
0000C952 D241                       		add.w	d1,d1
0000C954 D041                       		add.w	d1,d0
0000C956 6500                       		bcs.s	loc_BE84
0000C958 60CE                       		bra.s	loc_BE4E
0000C95A                            ; ===========================================================================
0000C95A                            
0000C95A                            loc_BE80:
0000C95A B044                       		cmp.w	d4,d0
0000C95C 62CA                       		bhi.s	loc_BE4E
0000C95E                            
0000C95E                            loc_BE84:
0000C95E 121A                       		move.b	(a2)+,d1
0000C960 4881                       		ext.w	d1
0000C962 3029 000C                  		move.w	$C(a1),d0
0000C966 9041                       		sub.w	d1,d0
0000C968 9043                       		sub.w	d3,d0
0000C96A 6400                       		bcc.s	loc_BE9A
0000C96C D241                       		add.w	d1,d1
0000C96E D041                       		add.w	d1,d0
0000C970 6500                       		bcs.s	loc_BE9E
0000C972 60B4                       		bra.s	loc_BE4E
0000C974                            ; ===========================================================================
0000C974                            
0000C974                            loc_BE9A:
0000C974 B045                       		cmp.w	d5,d0
0000C976 62B0                       		bhi.s	loc_BE4E
0000C978                            
0000C978                            loc_BE9E:
0000C978 361F                       		move.w	(sp)+,d3
0000C97A 7001                       		moveq	#1,d0
0000C97C 4E75                       		rts	
0000C97E                            ; End of function Obj32_MZBlock
0000C97E                            
0000C97E                            ; ===========================================================================
0000C97E                            ; ---------------------------------------------------------------------------
0000C97E                            ; Sprite mappings - switches (MZ, SYZ, LZ, SBZ)
0000C97E                            ; ---------------------------------------------------------------------------
0000C97E                            Map_obj32:
0000C97E                            	include "_maps\obj32.asm"
0000C97E                            ; ---------------------------------------------------------------------------
0000C97E                            ; Sprite mappings - switches (MZ, SYZ, LZ, SBZ)
0000C97E                            ; ---------------------------------------------------------------------------
0000C97E 0000                       		dc.w byte_BEAC-Map_obj32
0000C980 0000                       		dc.w byte_BEB7-Map_obj32
0000C982 0000                       		dc.w byte_BEC2-Map_obj32
0000C984 0000                       		dc.w byte_BEB7-Map_obj32
0000C986 02                         byte_BEAC:	dc.b 2
0000C987 F505 0000 F0               		dc.b $F5, 5, 0,	0, $F0
0000C98C F505 0800 00               		dc.b $F5, 5, 8,	0, 0
0000C991 02                         byte_BEB7:	dc.b 2
0000C992 F505 0004 F0               		dc.b $F5, 5, 0,	4, $F0
0000C997 F505 0804 00               		dc.b $F5, 5, 8,	4, 0
0000C99C 02                         byte_BEC2:	dc.b 2
0000C99D F505 FFFC F0               		dc.b $F5, 5, $FF, $FC, $F0
0000C9A2 F505 07FC 00               		dc.b $F5, 5, 7,	$FC, 0
0000C9A7 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000C9AC                            		even
0000C9AC                            		even
0000C9AC                            
0000C9AC                            ; ===========================================================================
0000C9AC                            ; ---------------------------------------------------------------------------
0000C9AC                            ; Object 33 - pushable blocks (MZ, LZ)
0000C9AC                            ; ---------------------------------------------------------------------------
0000C9AC                            
0000C9AC                            Obj33:					; XREF: Obj_Index
0000C9AC 7000                       		moveq	#0,d0
0000C9AE 1028 0024                  		move.b	$24(a0),d0
0000C9B2 323B 0000                  		move.w	Obj33_Index(pc,d0.w),d1
0000C9B6 4EFB 1000                  		jmp	Obj33_Index(pc,d1.w)
0000C9BA                            ; ===========================================================================
0000C9BA 0000                       Obj33_Index:	dc.w Obj33_Main-Obj33_Index
0000C9BC 0000                       		dc.w loc_BF6E-Obj33_Index
0000C9BE 0000                       		dc.w loc_C02C-Obj33_Index
0000C9C0                            
0000C9C0 1000                       Obj33_Var:	dc.b $10, 0	; object width,	frame number
0000C9C2 4001                       		dc.b $40, 1
0000C9C4                            ; ===========================================================================
0000C9C4                            
0000C9C4                            Obj33_Main:				; XREF: Obj33_Index
0000C9C4 5428 0024                  		addq.b	#2,$24(a0)
0000C9C8 117C 000F 0016             		move.b	#$F,$16(a0)
0000C9CE 117C 000F 0017             		move.b	#$F,$17(a0)
0000C9D4 217C 0000 0000 0004        		move.l	#Map_obj33,4(a0)
0000C9DC 317C 42B8 0002             		move.w	#$42B8,2(a0)	; MZ specific code
0000C9E2 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
0000C9E8 6600                       		bne.s	loc_BF16
0000C9EA 317C 43DE 0002             		move.w	#$43DE,2(a0)	; LZ specific code
0000C9F0                            
0000C9F0                            loc_BF16:
0000C9F0 117C 0004 0001             		move.b	#4,1(a0)
0000C9F6 117C 0003 0018             		move.b	#3,$18(a0)
0000C9FC 3168 0008 0034             		move.w	8(a0),$34(a0)
0000CA02 3168 000C 0036             		move.w	$C(a0),$36(a0)
0000CA08 7000                       		moveq	#0,d0
0000CA0A 1028 0028                  		move.b	$28(a0),d0
0000CA0E D040                       		add.w	d0,d0
0000CA10 0240 000E                  		andi.w	#$E,d0
0000CA14 45FB 00AA                  		lea	Obj33_Var(pc,d0.w),a2
0000CA18 115A 0019                  		move.b	(a2)+,$19(a0)
0000CA1C 115A 001A                  		move.b	(a2)+,$1A(a0)
0000CA20 4A28 0028                  		tst.b	$28(a0)
0000CA24 6700                       		beq.s	Obj33_ChkGone
0000CA26 317C C2B8 0002             		move.w	#$C2B8,2(a0)
0000CA2C                            
0000CA2C                            Obj33_ChkGone:
0000CA2C 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000CA30 7000                       		moveq	#0,d0
0000CA32 1028 0023                  		move.b	$23(a0),d0
0000CA36 6700                       		beq.s	loc_BF6E
0000CA38 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000CA3E 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0000CA44 6600 0000                  		bne.w	DeleteObject
0000CA48                            
0000CA48                            loc_BF6E:				; XREF: Obj33_Index
0000CA48 4A28 0032                  		tst.b	$32(a0)
0000CA4C 6600 0000                  		bne.w	loc_C046
0000CA50 7200                       		moveq	#0,d1
0000CA52 1228 0019                  		move.b	$19(a0),d1
0000CA56 0641 000B                  		addi.w	#$B,d1
0000CA5A 343C 0010                  		move.w	#$10,d2
0000CA5E 363C 0011                  		move.w	#$11,d3
0000CA62 3828 0008                  		move.w	8(a0),d4
0000CA66 6100 0000                  		bsr.w	loc_C186
0000CA6A 0C78 0200 FE10             		cmpi.w	#$200,($FFFFFE10).w ; is the level MZ act 1?
0000CA70 6600                       		bne.s	loc_BFC6	; if not, branch
0000CA72 08A8 0007 0028             		bclr	#7,$28(a0)
0000CA78 3028 0008                  		move.w	8(a0),d0
0000CA7C 0C40 0A20                  		cmpi.w	#$A20,d0
0000CA80 6500                       		bcs.s	loc_BFC6
0000CA82 0C40 0AA1                  		cmpi.w	#$AA1,d0
0000CA86 6400                       		bcc.s	loc_BFC6
0000CA88 3038 F7A4                  		move.w	($FFFFF7A4).w,d0
0000CA8C 0440 001C                  		subi.w	#$1C,d0
0000CA90 3140 000C                  		move.w	d0,$C(a0)
0000CA94 08F8 0007 F7A4             		bset	#7,($FFFFF7A4).w
0000CA9A 08E8 0007 0028             		bset	#7,$28(a0)
0000CAA0                            
0000CAA0                            loc_BFC6:
0000CAA0 3028 0008                  		move.w	8(a0),d0
0000CAA4 0240 FF80                  		andi.w	#$FF80,d0
0000CAA8 3238 F700                  		move.w	($FFFFF700).w,d1
0000CAAC 0441 0080                  		subi.w	#$80,d1
0000CAB0 0241 FF80                  		andi.w	#$FF80,d1
0000CAB4 9041                       		sub.w	d1,d0
0000CAB6 0C40 0280                  		cmpi.w	#$280,d0
0000CABA 6200                       		bhi.s	loc_BFE6
0000CABC 6000 0000                  		bra.w	DisplaySprite
0000CAC0                            ; ===========================================================================
0000CAC0                            
0000CAC0                            loc_BFE6:
0000CAC0 3028 0034                  		move.w	$34(a0),d0
0000CAC4 0240 FF80                  		andi.w	#$FF80,d0
0000CAC8 3238 F700                  		move.w	($FFFFF700).w,d1
0000CACC 0441 0080                  		subi.w	#$80,d1
0000CAD0 0241 FF80                  		andi.w	#$FF80,d1
0000CAD4 9041                       		sub.w	d1,d0
0000CAD6 0C40 0280                  		cmpi.w	#$280,d0
0000CADA 6200                       		bhi.s	loc_C016
0000CADC 3168 0034 0008             		move.w	$34(a0),8(a0)
0000CAE2 3168 0036 000C             		move.w	$36(a0),$C(a0)
0000CAE8 117C 0004 0024             		move.b	#4,$24(a0)
0000CAEE 6000                       		bra.s	loc_C02C
0000CAF0                            ; ===========================================================================
0000CAF0                            
0000CAF0                            loc_C016:
0000CAF0 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000CAF4 7000                       		moveq	#0,d0
0000CAF6 1028 0023                  		move.b	$23(a0),d0
0000CAFA 6700                       		beq.s	loc_C028
0000CAFC 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
0000CB02                            
0000CB02                            loc_C028:
0000CB02 6000 0000                  		bra.w	DeleteObject
0000CB06                            ; ===========================================================================
0000CB06                            
0000CB06                            loc_C02C:				; XREF: Obj33_Index
0000CB06 6100 0000                  		bsr.w	ChkObjOnScreen2
0000CB0A 6700                       		beq.s	locret_C044
0000CB0C 117C 0002 0024             		move.b	#2,$24(a0)
0000CB12 4228 0032                  		clr.b	$32(a0)
0000CB16 4268 0010                  		clr.w	$10(a0)
0000CB1A 4268 0012                  		clr.w	$12(a0)
0000CB1E                            
0000CB1E                            locret_C044:
0000CB1E 4E75                       		rts	
0000CB20                            ; ===========================================================================
0000CB20                            
0000CB20                            loc_C046:				; XREF: loc_BF6E
0000CB20 3F28 0008                  		move.w	8(a0),-(sp)
0000CB24 0C28 0004 0025             		cmpi.b	#4,$25(a0)
0000CB2A 6400                       		bcc.s	loc_C056
0000CB2C 6100 0000                  		bsr.w	SpeedToPos
0000CB30                            
0000CB30                            loc_C056:
0000CB30 0828 0001 0022             		btst	#1,$22(a0)
0000CB36 6700                       		beq.s	loc_C0A0
0000CB38 0668 0018 0012             		addi.w	#$18,$12(a0)
0000CB3E 4EB9 0000 0000             		jsr	ObjHitFloor
0000CB44 4A41                       		tst.w	d1
0000CB46 6A00 0000                  		bpl.w	loc_C09E
0000CB4A D368 000C                  		add.w	d1,$C(a0)
0000CB4E 4268 0012                  		clr.w	$12(a0)
0000CB52 08A8 0001 0022             		bclr	#1,$22(a0)
0000CB58 3011                       		move.w	(a1),d0
0000CB5A 0240 03FF                  		andi.w	#$3FF,d0
0000CB5E 0C40 016A                  		cmpi.w	#$16A,d0
0000CB62 6500                       		bcs.s	loc_C09E
0000CB64 3028 0030                  		move.w	$30(a0),d0
0000CB68 E640                       		asr.w	#3,d0
0000CB6A 3140 0010                  		move.w	d0,$10(a0)
0000CB6E 117C 0001 0032             		move.b	#1,$32(a0)
0000CB74 4268 000E                  		clr.w	$E(a0)
0000CB78                            
0000CB78                            loc_C09E:
0000CB78 6000                       		bra.s	loc_C0E6
0000CB7A                            ; ===========================================================================
0000CB7A                            
0000CB7A                            loc_C0A0:
0000CB7A 4A68 0010                  		tst.w	$10(a0)
0000CB7E 6700 0000                  		beq.w	loc_C0D6
0000CB82 6B00                       		bmi.s	loc_C0BC
0000CB84 7600                       		moveq	#0,d3
0000CB86 1628 0019                  		move.b	$19(a0),d3
0000CB8A 4EB9 0000 0000             		jsr	ObjHitWallRight
0000CB90 4A41                       		tst.w	d1		; has block touched a wall?
0000CB92 6B00                       		bmi.s	Obj33_StopPush	; if yes, branch
0000CB94 6000                       		bra.s	loc_C0E6
0000CB96                            ; ===========================================================================
0000CB96                            
0000CB96                            loc_C0BC:
0000CB96 7600                       		moveq	#0,d3
0000CB98 1628 0019                  		move.b	$19(a0),d3
0000CB9C 4643                       		not.w	d3
0000CB9E 4EB9 0000 0000             		jsr	ObjHitWallLeft
0000CBA4 4A41                       		tst.w	d1		; has block touched a wall?
0000CBA6 6B00                       		bmi.s	Obj33_StopPush	; if yes, branch
0000CBA8 6000                       		bra.s	loc_C0E6
0000CBAA                            ; ===========================================================================
0000CBAA                            
0000CBAA                            Obj33_StopPush:
0000CBAA 4268 0010                  		clr.w	$10(a0)		; stop block moving
0000CBAE 6000                       		bra.s	loc_C0E6
0000CBB0                            ; ===========================================================================
0000CBB0                            
0000CBB0                            loc_C0D6:
0000CBB0 06A8 0000 2001 000C        		addi.l	#$2001,$C(a0)
0000CBB8 0C28 00A0 000F             		cmpi.b	#-$60,$F(a0)
0000CBBE 6400                       		bcc.s	loc_C104
0000CBC0                            
0000CBC0                            loc_C0E6:
0000CBC0 7200                       		moveq	#0,d1
0000CBC2 1228 0019                  		move.b	$19(a0),d1
0000CBC6 0641 000B                  		addi.w	#$B,d1
0000CBCA 343C 0010                  		move.w	#$10,d2
0000CBCE 363C 0011                  		move.w	#$11,d3
0000CBD2 381F                       		move.w	(sp)+,d4
0000CBD4 6100 0000                  		bsr.w	loc_C186
0000CBD8 6100                       		bsr.s	Obj33_ChkLava
0000CBDA 6000 FEC4                  		bra.w	loc_BFC6
0000CBDE                            ; ===========================================================================
0000CBDE                            
0000CBDE                            loc_C104:
0000CBDE 381F                       		move.w	(sp)+,d4
0000CBE0 43F8 D000                  		lea	($FFFFD000).w,a1
0000CBE4 08A9 0003 0022             		bclr	#3,$22(a1)
0000CBEA 08A8 0003 0022             		bclr	#3,$22(a0)
0000CBF0 6000 FECE                  		bra.w	loc_BFE6
0000CBF4                            ; ===========================================================================
0000CBF4                            
0000CBF4                            Obj33_ChkLava:
0000CBF4 0C78 0201 FE10             		cmpi.w	#$201,($FFFFFE10).w ; is the level MZ act 2?
0000CBFA 6600                       		bne.s	Obj33_ChkLava2	; if not, branch
0000CBFC 343C FFE0                  		move.w	#-$20,d2
0000CC00 0C68 0DD0 0008             		cmpi.w	#$DD0,8(a0)
0000CC06 6700                       		beq.s	Obj33_LoadLava
0000CC08 0C68 0CC0 0008             		cmpi.w	#$CC0,8(a0)
0000CC0E 6700                       		beq.s	Obj33_LoadLava
0000CC10 0C68 0BA0 0008             		cmpi.w	#$BA0,8(a0)
0000CC16 6700                       		beq.s	Obj33_LoadLava
0000CC18 4E75                       		rts	
0000CC1A                            ; ===========================================================================
0000CC1A                            
0000CC1A                            Obj33_ChkLava2:
0000CC1A 0C78 0202 FE10             		cmpi.w	#$202,($FFFFFE10).w ; is the level MZ act 3?
0000CC20 6600                       		bne.s	Obj33_NoLava	; if not, branch
0000CC22 343C 0020                  		move.w	#$20,d2
0000CC26 0C68 0560 0008             		cmpi.w	#$560,8(a0)
0000CC2C 6700                       		beq.s	Obj33_LoadLava
0000CC2E 0C68 05C0 0008             		cmpi.w	#$5C0,8(a0)
0000CC34 6700                       		beq.s	Obj33_LoadLava
0000CC36                            
0000CC36                            Obj33_NoLava:
0000CC36 4E75                       		rts	
0000CC38                            ; ===========================================================================
0000CC38                            
0000CC38                            Obj33_LoadLava:
0000CC38 6100 0000                  		bsr.w	SingleObjLoad
0000CC3C 6600                       		bne.s	locret_C184
0000CC3E 12BC 004C                  		move.b	#$4C,0(a1)	; load lava geyser object
0000CC42 3368 0008 0008             		move.w	8(a0),8(a1)
0000CC48 D569 0008                  		add.w	d2,8(a1)
0000CC4C 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000CC52 0669 0010 000C             		addi.w	#$10,$C(a1)
0000CC58 2348 003C                  		move.l	a0,$3C(a1)
0000CC5C                            
0000CC5C                            locret_C184:
0000CC5C 4E75                       		rts	
0000CC5E                            ; ===========================================================================
0000CC5E                            
0000CC5E                            loc_C186:				; XREF: loc_BF6E
0000CC5E 1028 0025                  		move.b	$25(a0),d0
0000CC62 6700 0000                  		beq.w	loc_C218
0000CC66 5500                       		subq.b	#2,d0
0000CC68 6600                       		bne.s	loc_C1AA
0000CC6A 6100 B3DE                  		bsr.w	ExitPlatform
0000CC6E 0829 0003 0022             		btst	#3,$22(a1)
0000CC74 6600                       		bne.s	loc_C1A4
0000CC76 4228 0025                  		clr.b	$25(a0)
0000CC7A 4E75                       		rts	
0000CC7C                            ; ===========================================================================
0000CC7C                            
0000CC7C                            loc_C1A4:
0000CC7C 3404                       		move.w	d4,d2
0000CC7E 6000 B928                  		bra.w	MvSonicOnPtfm
0000CC82                            ; ===========================================================================
0000CC82                            
0000CC82                            loc_C1AA:
0000CC82 5500                       		subq.b	#2,d0
0000CC84 6600                       		bne.s	loc_C1F2
0000CC86 6100 0000                  		bsr.w	SpeedToPos
0000CC8A 0668 0018 0012             		addi.w	#$18,$12(a0)
0000CC90 4EB9 0000 0000             		jsr	ObjHitFloor
0000CC96 4A41                       		tst.w	d1
0000CC98 6A00 0000                  		bpl.w	locret_C1F0
0000CC9C D368 000C                  		add.w	d1,$C(a0)
0000CCA0 4268 0012                  		clr.w	$12(a0)
0000CCA4 4228 0025                  		clr.b	$25(a0)
0000CCA8 3011                       		move.w	(a1),d0
0000CCAA 0240 03FF                  		andi.w	#$3FF,d0
0000CCAE 0C40 016A                  		cmpi.w	#$16A,d0
0000CCB2 6500                       		bcs.s	locret_C1F0
0000CCB4 3028 0030                  		move.w	$30(a0),d0
0000CCB8 E640                       		asr.w	#3,d0
0000CCBA 3140 0010                  		move.w	d0,$10(a0)
0000CCBE 117C 0001 0032             		move.b	#1,$32(a0)
0000CCC4 4268 000E                  		clr.w	$E(a0)
0000CCC8                            
0000CCC8                            locret_C1F0:
0000CCC8 4E75                       		rts	
0000CCCA                            ; ===========================================================================
0000CCCA                            
0000CCCA                            loc_C1F2:
0000CCCA 6100 0000                  		bsr.w	SpeedToPos
0000CCCE 3028 0008                  		move.w	8(a0),d0
0000CCD2 0240 000C                  		andi.w	#$C,d0
0000CCD6 6600 0000                  		bne.w	locret_C2E4
0000CCDA 0268 FFF0 0008             		andi.w	#-$10,8(a0)
0000CCE0 3168 0010 0030             		move.w	$10(a0),$30(a0)
0000CCE6 4268 0010                  		clr.w	$10(a0)
0000CCEA 5528 0025                  		subq.b	#2,$25(a0)
0000CCEE 4E75                       		rts	
0000CCF0                            ; ===========================================================================
0000CCF0                            
0000CCF0                            loc_C218:
0000CCF0 6100 0000                  		bsr.w	loc_FAC8
0000CCF4 4A44                       		tst.w	d4
0000CCF6 6700 0000                  		beq.w	locret_C2E4
0000CCFA 6B00 0000                  		bmi.w	locret_C2E4
0000CCFE 4A28 0032                  		tst.b	$32(a0)
0000CD02 6700                       		beq.s	loc_C230
0000CD04 6000 0000                  		bra.w	locret_C2E4
0000CD08                            ; ===========================================================================
0000CD08                            
0000CD08                            loc_C230:
0000CD08 4A40                       		tst.w	d0
0000CD0A 6700 0000                  		beq.w	locret_C2E4
0000CD0E 6B00                       		bmi.s	loc_C268
0000CD10 0829 0000 0022             		btst	#0,$22(a1)
0000CD16 6600 0000                  		bne.w	locret_C2E4
0000CD1A 3F00                       		move.w	d0,-(sp)
0000CD1C 7600                       		moveq	#0,d3
0000CD1E 1628 0019                  		move.b	$19(a0),d3
0000CD22 4EB9 0000 0000             		jsr	ObjHitWallRight
0000CD28 301F                       		move.w	(sp)+,d0
0000CD2A 4A41                       		tst.w	d1
0000CD2C 6B00 0000                  		bmi.w	locret_C2E4
0000CD30 06A8 0001 0000 0008        		addi.l	#$10000,8(a0)
0000CD38 7001                       		moveq	#1,d0
0000CD3A 323C 0040                  		move.w	#$40,d1
0000CD3E 6000                       		bra.s	loc_C294
0000CD40                            ; ===========================================================================
0000CD40                            
0000CD40                            loc_C268:
0000CD40 0829 0000 0022             		btst	#0,$22(a1)
0000CD46 6700                       		beq.s	locret_C2E4
0000CD48 3F00                       		move.w	d0,-(sp)
0000CD4A 7600                       		moveq	#0,d3
0000CD4C 1628 0019                  		move.b	$19(a0),d3
0000CD50 4643                       		not.w	d3
0000CD52 4EB9 0000 0000             		jsr	ObjHitWallLeft
0000CD58 301F                       		move.w	(sp)+,d0
0000CD5A 4A41                       		tst.w	d1
0000CD5C 6B00                       		bmi.s	locret_C2E4
0000CD5E 04A8 0001 0000 0008        		subi.l	#$10000,8(a0)
0000CD66 70FF                       		moveq	#-1,d0
0000CD68 323C FFC0                  		move.w	#-$40,d1
0000CD6C                            
0000CD6C                            loc_C294:
0000CD6C 43F8 D000                  		lea	($FFFFD000).w,a1
0000CD70 D169 0008                  		add.w	d0,8(a1)
0000CD74 3341 0014                  		move.w	d1,$14(a1)
0000CD78 337C 0000 0010             		move.w	#0,$10(a1)
0000CD7E 3F00                       		move.w	d0,-(sp)
0000CD80 303C 00A7                  		move.w	#$A7,d0
0000CD84 4EB9 0000 147C             		jsr	(PlaySound_Special).l ;	play pushing sound
0000CD8A 301F                       		move.w	(sp)+,d0
0000CD8C 4A28 0028                  		tst.b	$28(a0)
0000CD90 6B00                       		bmi.s	locret_C2E4
0000CD92 3F00                       		move.w	d0,-(sp)
0000CD94 4EB9 0000 0000             		jsr	ObjHitFloor
0000CD9A 301F                       		move.w	(sp)+,d0
0000CD9C 0C41 0004                  		cmpi.w	#4,d1
0000CDA0 6F00                       		ble.s	loc_C2E0
0000CDA2 317C 0400 0010             		move.w	#$400,$10(a0)
0000CDA8 4A40                       		tst.w	d0
0000CDAA 6A00                       		bpl.s	loc_C2D8
0000CDAC 4468 0010                  		neg.w	$10(a0)
0000CDB0                            
0000CDB0                            loc_C2D8:
0000CDB0 117C 0006 0025             		move.b	#6,$25(a0)
0000CDB6 6000                       		bra.s	locret_C2E4
0000CDB8                            ; ===========================================================================
0000CDB8                            
0000CDB8                            loc_C2E0:
0000CDB8 D368 000C                  		add.w	d1,$C(a0)
0000CDBC                            
0000CDBC                            locret_C2E4:
0000CDBC 4E75                       		rts	
0000CDBE                            ; ===========================================================================
0000CDBE                            ; ---------------------------------------------------------------------------
0000CDBE                            ; Sprite mappings - pushable blocks (MZ, LZ)
0000CDBE                            ; ---------------------------------------------------------------------------
0000CDBE                            Map_obj33:
0000CDBE                            	include "_maps\obj33.asm"
0000CDBE                            ; ---------------------------------------------------------------------------
0000CDBE                            ; Sprite mappings - pushable blocks (MZ, LZ)
0000CDBE                            ; ---------------------------------------------------------------------------
0000CDBE 0000                       		dc.w byte_C2EA-Map_obj33
0000CDC0 0000                       		dc.w byte_C2F0-Map_obj33
0000CDC2 01                         byte_C2EA:	dc.b 1
0000CDC3 F00F 0008 F0               		dc.b $F0, $F, 0, 8, $F0	; single block
0000CDC8 04                         byte_C2F0:	dc.b 4
0000CDC9 F00F 0008 C0               		dc.b $F0, $F, 0, 8, $C0	; row of 4 blocks
0000CDCE F00F 0008 E0               		dc.b $F0, $F, 0, 8, $E0
0000CDD3 F00F 0008 00               		dc.b $F0, $F, 0, 8, 0
0000CDD8 F00F 0008 20               		dc.b $F0, $F, 0, 8, $20
0000CDDE 00                         		even
0000CDDE 00                         		even
0000CDDE                            
0000CDDE                            ; ===========================================================================
0000CDDE                            ; ---------------------------------------------------------------------------
0000CDDE                            ; Object 34 - zone title cards
0000CDDE                            ; ---------------------------------------------------------------------------
0000CDDE                            
0000CDDE                            Obj34:					; XREF: Obj_Index
0000CDDE 7000                       		moveq	#0,d0
0000CDE0 1028 0024                  		move.b	$24(a0),d0
0000CDE4 323B 0000                  		move.w	Obj34_Index(pc,d0.w),d1
0000CDE8 4EFB 1000                  		jmp	Obj34_Index(pc,d1.w)
0000CDEC                            ; ===========================================================================
0000CDEC 0000                       Obj34_Index:	dc.w Obj34_CheckSBZ3-Obj34_Index
0000CDEE 0000                       		dc.w Obj34_ChkPos-Obj34_Index
0000CDF0 0000                       		dc.w Obj34_Wait-Obj34_Index
0000CDF2 0000                       		dc.w Obj34_Wait-Obj34_Index
0000CDF4                            ; ===========================================================================
0000CDF4                            
0000CDF4                            Obj34_CheckSBZ3:			; XREF: Obj34_Index
0000CDF4 2248                       		movea.l	a0,a1
0000CDF6 7000                       		moveq	#0,d0
0000CDF8 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000CDFC 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; check if level is	SBZ 3
0000CE02 6600                       		bne.s	Obj34_CheckFZ
0000CE04 7005                       		moveq	#5,d0		; load title card number 5 (SBZ)
0000CE06                            
0000CE06                            Obj34_CheckFZ:
0000CE06 3400                       		move.w	d0,d2
0000CE08 0C78 0502 FE10             		cmpi.w	#$502,($FFFFFE10).w ; check if level is	FZ
0000CE0E 6600                       		bne.s	Obj34_LoadConfig
0000CE10 7006                       		moveq	#6,d0		; load title card number 6 (FZ)
0000CE12 740B                       		moveq	#$B,d2		; use "FINAL" mappings
0000CE14                            
0000CE14                            Obj34_LoadConfig:
0000CE14 47F9 0000 0000             		lea	(Obj34_ConData).l,a3
0000CE1A E948                       		lsl.w	#4,d0
0000CE1C D6C0                       		adda.w	d0,a3
0000CE1E 45F9 0000 0000             		lea	(Obj34_ItemData).l,a2
0000CE24 7203                       		moveq	#3,d1
0000CE26                            
0000CE26                            Obj34_Loop:
0000CE26 12BC 0034                  		move.b	#$34,0(a1)
0000CE2A 3353 0008                  		move.w	(a3),8(a1)	; load start x-position
0000CE2E 335B 0032                  		move.w	(a3)+,$32(a1)	; load finish x-position (same as start)
0000CE32 335B 0030                  		move.w	(a3)+,$30(a1)	; load main x-position
0000CE36 335A 000A                  		move.w	(a2)+,$A(a1)
0000CE3A 135A 0024                  		move.b	(a2)+,$24(a1)
0000CE3E 101A                       		move.b	(a2)+,d0
0000CE40 6600                       		bne.s	Obj34_ActNumber
0000CE42 1002                       		move.b	d2,d0
0000CE44                            
0000CE44                            Obj34_ActNumber:
0000CE44 0C00 0007                  		cmpi.b	#7,d0
0000CE48 6600                       		bne.s	Obj34_MakeSprite
0000CE4A D038 FE11                  		add.b	($FFFFFE11).w,d0
0000CE4E 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w
0000CE54 6600                       		bne.s	Obj34_MakeSprite
0000CE56 5300                       		subq.b	#1,d0
0000CE58                            
0000CE58                            Obj34_MakeSprite:
0000CE58 1340 001A                  		move.b	d0,$1A(a1)	; display frame	number d0
0000CE5C 237C 0000 0000 0004        		move.l	#Map_obj34,4(a1)
0000CE64 337C 8580 0002             		move.w	#$8580,2(a1)
0000CE6A 137C 0078 0019             		move.b	#$78,$19(a1)
0000CE70 137C 0000 0001             		move.b	#0,1(a1)
0000CE76 137C 0000 0018             		move.b	#0,$18(a1)
0000CE7C 337C 003C 001E             		move.w	#60,$1E(a1)	; set time delay to 1 second
0000CE82 43E9 0040                  		lea	$40(a1),a1	; next object
0000CE86 51C9 FF9E                  		dbf	d1,Obj34_Loop	; repeat sequence another 3 times
0000CE8A                            
0000CE8A                            Obj34_ChkPos:				; XREF: Obj34_Index
0000CE8A 7210                       		moveq	#$10,d1		; set horizontal speed
0000CE8C 3028 0030                  		move.w	$30(a0),d0
0000CE90 B068 0008                  		cmp.w	8(a0),d0	; has item reached the target position?
0000CE94 6700                       		beq.s	loc_C3C8	; if yes, branch
0000CE96 6C00                       		bge.s	Obj34_Move
0000CE98 4441                       		neg.w	d1
0000CE9A                            
0000CE9A                            Obj34_Move:
0000CE9A D368 0008                  		add.w	d1,8(a0)	; change item's position
0000CE9E                            
0000CE9E                            loc_C3C8:
0000CE9E 3028 0008                  		move.w	8(a0),d0
0000CEA2 6B00                       		bmi.s	locret_C3D8
0000CEA4 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000CEA8 6400                       		bcc.s	locret_C3D8	; if yes, branch
0000CEAA 6000 0000                  		bra.w	DisplaySprite
0000CEAE                            ; ===========================================================================
0000CEAE                            
0000CEAE                            locret_C3D8:
0000CEAE 4E75                       		rts	
0000CEB0                            ; ===========================================================================
0000CEB0                            
0000CEB0                            Obj34_Wait:				; XREF: Obj34_Index
0000CEB0 4A68 001E                  		tst.w	$1E(a0)		; is time remaining zero?
0000CEB4 6700                       		beq.s	Obj34_ChkPos2	; if yes, branch
0000CEB6 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time
0000CEBA 6000 0000                  		bra.w	DisplaySprite
0000CEBE                            ; ===========================================================================
0000CEBE                            
0000CEBE                            Obj34_ChkPos2:				; XREF: Obj34_Wait
0000CEBE 4A28 0001                  		tst.b	1(a0)
0000CEC2 6A00                       		bpl.s	Obj34_ChangeArt
0000CEC4 7220                       		moveq	#$20,d1
0000CEC6 3028 0032                  		move.w	$32(a0),d0
0000CECA B068 0008                  		cmp.w	8(a0),d0	; has item reached the finish position?
0000CECE 6700                       		beq.s	Obj34_ChangeArt	; if yes, branch
0000CED0 6C00                       		bge.s	Obj34_Move2
0000CED2 4441                       		neg.w	d1
0000CED4                            
0000CED4                            Obj34_Move2:
0000CED4 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000CED8 3028 0008                  		move.w	8(a0),d0
0000CEDC 6B00                       		bmi.s	locret_C412
0000CEDE 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000CEE2 6400                       		bcc.s	locret_C412	; if yes, branch
0000CEE4 6000 0000                  		bra.w	DisplaySprite
0000CEE8                            ; ===========================================================================
0000CEE8                            
0000CEE8                            locret_C412:
0000CEE8 4E75                       		rts	
0000CEEA                            ; ===========================================================================
0000CEEA                            
0000CEEA                            Obj34_ChangeArt:			; XREF: Obj34_ChkPos2
0000CEEA 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0000CEF0 6600                       		bne.s	Obj34_Delete
0000CEF2 7002                       		moveq	#2,d0
0000CEF4 4EB9 0000 16F0             		jsr	(LoadPLC).l	; load explosion patterns
0000CEFA 7000                       		moveq	#0,d0
0000CEFC 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000CF00 0640 0015                  		addi.w	#$15,d0
0000CF04 4EB9 0000 16F0             		jsr	(LoadPLC).l	; load animal patterns
0000CF0A                            
0000CF0A                            Obj34_Delete:
0000CF0A 6000 0000                  		bra.w	DeleteObject
0000CF0E                            ; ===========================================================================
0000CF0E 00D0                       Obj34_ItemData:	dc.w $D0	; y-axis position
0000CF10 0200                       		dc.b 2,	0	; routine number, frame	number (changes)
0000CF12 00E4                       		dc.w $E4
0000CF14 0206                       		dc.b 2,	6
0000CF16 00EA                       		dc.w $EA
0000CF18 0207                       		dc.b 2,	7
0000CF1A 00E0                       		dc.w $E0
0000CF1C 020A                       		dc.b 2,	$A
0000CF1E                            ; ---------------------------------------------------------------------------
0000CF1E                            ; Title	card configuration data
0000CF1E                            ; Format:
0000CF1E                            ; 4 bytes per item (YYYY XXXX)
0000CF1E                            ; 4 items per level (GREEN HILL, ZONE, ACT X, oval)
0000CF1E                            ; ---------------------------------------------------------------------------
0000CF1E 0000 0120 FEFC 013C 0414+  Obj34_ConData:	dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; GHZ
0000CF2E 0000 0120 FEF4 0134 040C+  		dc.w 0,	$120, $FEF4, $134, $40C, $14C, $20C, $14C ; LZ
0000CF3E 0000 0120 FEE0 0120 03F8+  		dc.w 0,	$120, $FEE0, $120, $3F8, $138, $1F8, $138 ; MZ
0000CF4E 0000 0120 FEFC 013C 0414+  		dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; SLZ
0000CF5E 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; SYZ
0000CF6E 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; SBZ
0000CF7E 0000 0120 FEE4 0124 03EC+  		dc.w 0,	$120, $FEE4, $124, $3EC, $3EC, $1EC, $12C ; FZ
0000CF8E                            ; ===========================================================================
0000CF8E                            ; ---------------------------------------------------------------------------
0000CF8E                            ; Object 39 - "GAME OVER" and "TIME OVER"
0000CF8E                            ; ---------------------------------------------------------------------------
0000CF8E                            
0000CF8E                            Obj39:					; XREF: Obj_Index
0000CF8E 7000                       		moveq	#0,d0
0000CF90 1028 0024                  		move.b	$24(a0),d0
0000CF94 323B 0000                  		move.w	Obj39_Index(pc,d0.w),d1
0000CF98 4EFB 1000                  		jmp	Obj39_Index(pc,d1.w)
0000CF9C                            ; ===========================================================================
0000CF9C 0000                       Obj39_Index:	dc.w Obj39_ChkPLC-Obj39_Index
0000CF9E 0000                       		dc.w loc_C50C-Obj39_Index
0000CFA0 0000                       		dc.w Obj39_Wait-Obj39_Index
0000CFA2                            ; ===========================================================================
0000CFA2                            
0000CFA2                            Obj39_ChkPLC:				; XREF: Obj39_Index
0000CFA2 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000CFA6 6700                       		beq.s	Obj39_Main	; if yes, branch
0000CFA8 4E75                       		rts	
0000CFAA                            ; ===========================================================================
0000CFAA                            
0000CFAA                            Obj39_Main:
0000CFAA 5428 0024                  		addq.b	#2,$24(a0)
0000CFAE 317C 0050 0008             		move.w	#$50,8(a0)	; set x-position
0000CFB4 0828 0000 001A             		btst	#0,$1A(a0)	; is the object	"OVER"?
0000CFBA 6700                       		beq.s	loc_C4EC	; if not, branch
0000CFBC 317C 01F0 0008             		move.w	#$1F0,8(a0)	; set x-position for "OVER"
0000CFC2                            
0000CFC2                            loc_C4EC:
0000CFC2 317C 00F0 000A             		move.w	#$F0,$A(a0)
0000CFC8 217C 0000 0000 0004        		move.l	#Map_obj39,4(a0)
0000CFD0 317C 855E 0002             		move.w	#$855E,2(a0)
0000CFD6 117C 0000 0001             		move.b	#0,1(a0)
0000CFDC 117C 0000 0018             		move.b	#0,$18(a0)
0000CFE2                            
0000CFE2                            loc_C50C:				; XREF: Obj39_Index
0000CFE2 7210                       		moveq	#$10,d1		; set horizontal speed
0000CFE4 0C68 0120 0008             		cmpi.w	#$120,8(a0)	; has item reached its target position?
0000CFEA 6700                       		beq.s	Obj39_SetWait	; if yes, branch
0000CFEC 6500                       		bcs.s	Obj39_Move
0000CFEE 4441                       		neg.w	d1
0000CFF0                            
0000CFF0                            Obj39_Move:
0000CFF0 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000CFF4 6000 0000                  		bra.w	DisplaySprite
0000CFF8                            ; ===========================================================================
0000CFF8                            
0000CFF8                            Obj39_SetWait:				; XREF: Obj39_Main
0000CFF8 317C 02D0 001E             		move.w	#720,$1E(a0)	; set time delay to 12 seconds
0000CFFE 5428 0024                  		addq.b	#2,$24(a0)
0000D002 4E75                       		rts	
0000D004                            ; ===========================================================================
0000D004                            
0000D004                            Obj39_Wait:				; XREF: Obj39_Index
0000D004 1038 F605                  		move.b	($FFFFF605).w,d0
0000D008 0200 0070                  		andi.b	#$70,d0		; is button A, B or C pressed?
0000D00C 6600                       		bne.s	Obj39_ChgMode	; if yes, branch
0000D00E 0828 0000 001A             		btst	#0,$1A(a0)
0000D014 6600                       		bne.s	Obj39_Display
0000D016 4A68 001E                  		tst.w	$1E(a0)		; has time delay reached zero?
0000D01A 6700                       		beq.s	Obj39_ChgMode	; if yes, branch
0000D01C 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000D020 6000 0000                  		bra.w	DisplaySprite
0000D024                            ; ===========================================================================
0000D024                            
0000D024                            Obj39_ChgMode:				; XREF: Obj39_Wait
0000D024 4A38 FE1A                  		tst.b	($FFFFFE1A).w	; is time over flag set?
0000D028 6600                       		bne.s	Obj39_ResetLvl	; if yes, branch
0000D02A 11FC 0014 F600             		move.b	#$14,($FFFFF600).w ; set mode to $14 (continue screen)
0000D030 4A38 FE18                  		tst.b	($FFFFFE18).w	; do you have any continues?
0000D034 6600                       		bne.s	Obj39_Display	; if yes, branch
0000D036 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set mode to 0 (Sega screen)
0000D03C 6000                       		bra.s	Obj39_Display
0000D03E                            ; ===========================================================================
0000D03E                            
0000D03E                            Obj39_ResetLvl:				; XREF: Obj39_ChgMode
0000D03E 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000D044                            
0000D044                            Obj39_Display:				; XREF: Obj39_ChgMode
0000D044 6000 0000                  		bra.w	DisplaySprite
0000D048                            ; ===========================================================================
0000D048                            ; ---------------------------------------------------------------------------
0000D048                            ; Object 3A - "SONIC GOT THROUGH" title	card
0000D048                            ; ---------------------------------------------------------------------------
0000D048                            
0000D048                            Obj3A:					; XREF: Obj_Index
0000D048 7000                       		moveq	#0,d0
0000D04A 1028 0024                  		move.b	$24(a0),d0
0000D04E 323B 0000                  		move.w	Obj3A_Index(pc,d0.w),d1
0000D052 4EFB 1000                  		jmp	Obj3A_Index(pc,d1.w)
0000D056                            ; ===========================================================================
0000D056 0000                       Obj3A_Index:	dc.w Obj3A_ChkPLC-Obj3A_Index
0000D058 0000                       		dc.w Obj3A_ChkPos-Obj3A_Index
0000D05A 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000D05C 0000                       		dc.w Obj3A_TimeBonus-Obj3A_Index
0000D05E 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000D060 0000                       		dc.w Obj3A_NextLevel-Obj3A_Index
0000D062 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000D064 0000                       		dc.w Obj3A_ChkPos2-Obj3A_Index
0000D066 0000                       		dc.w loc_C766-Obj3A_Index
0000D068                            ; ===========================================================================
0000D068                            
0000D068                            Obj3A_ChkPLC:				; XREF: Obj3A_Index
0000D068 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000D06C 6700                       		beq.s	Obj3A_Main	; if yes, branch
0000D06E 4E75                       		rts	
0000D070                            ; ===========================================================================
0000D070                            
0000D070                            Obj3A_Main:
0000D070 2248                       		movea.l	a0,a1
0000D072 45F9 0000 0000             		lea	(Obj3A_Config).l,a2
0000D078 7206                       		moveq	#6,d1
0000D07A                            
0000D07A                            Obj3A_Loop:
0000D07A 12BC 003A                  		move.b	#$3A,0(a1)
0000D07E 3352 0008                  		move.w	(a2),8(a1)	; load start x-position
0000D082 335A 0032                  		move.w	(a2)+,$32(a1)	; load finish x-position (same as start)
0000D086 335A 0030                  		move.w	(a2)+,$30(a1)	; load main x-position
0000D08A 335A 000A                  		move.w	(a2)+,$A(a1)	; load y-position
0000D08E 135A 0024                  		move.b	(a2)+,$24(a1)
0000D092 101A                       		move.b	(a2)+,d0
0000D094 0C00 0006                  		cmpi.b	#6,d0
0000D098 6600                       		bne.s	loc_C5CA
0000D09A D038 FE11                  		add.b	($FFFFFE11).w,d0 ; add act number to frame number
0000D09E                            
0000D09E                            loc_C5CA:
0000D09E 1340 001A                  		move.b	d0,$1A(a1)
0000D0A2 237C 0000 0000 0004        		move.l	#Map_obj3A,4(a1)
0000D0AA 337C 8580 0002             		move.w	#$8580,2(a1)
0000D0B0 137C 0000 0001             		move.b	#0,1(a1)
0000D0B6 43E9 0040                  		lea	$40(a1),a1
0000D0BA 51C9 FFBE                  		dbf	d1,Obj3A_Loop	; repeat 6 times
0000D0BE                            
0000D0BE                            Obj3A_ChkPos:				; XREF: Obj3A_Index
0000D0BE 7210                       		moveq	#$10,d1		; set horizontal speed
0000D0C0 3028 0030                  		move.w	$30(a0),d0
0000D0C4 B068 0008                  		cmp.w	8(a0),d0	; has item reached its target position?
0000D0C8 6700                       		beq.s	loc_C61A	; if yes, branch
0000D0CA 6C00                       		bge.s	Obj3A_Move
0000D0CC 4441                       		neg.w	d1
0000D0CE                            
0000D0CE                            Obj3A_Move:
0000D0CE D368 0008                  		add.w	d1,8(a0)	; change item's position
0000D0D2                            
0000D0D2                            loc_C5FE:				; XREF: loc_C61A
0000D0D2 3028 0008                  		move.w	8(a0),d0
0000D0D6 6B00                       		bmi.s	locret_C60E
0000D0D8 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000D0DC 6400                       		bcc.s	locret_C60E	; if yes, branch
0000D0DE 6000 0000                  		bra.w	DisplaySprite
0000D0E2                            ; ===========================================================================
0000D0E2                            
0000D0E2                            locret_C60E:
0000D0E2 4E75                       		rts	
0000D0E4                            ; ===========================================================================
0000D0E4                            
0000D0E4                            loc_C610:				; XREF: loc_C61A
0000D0E4 117C 000E 0024             		move.b	#$E,$24(a0)
0000D0EA 6000 0000                  		bra.w	Obj3A_ChkPos2
0000D0EE                            ; ===========================================================================
0000D0EE                            
0000D0EE                            loc_C61A:				; XREF: Obj3A_ChkPos
0000D0EE 0C38 000E D724             		cmpi.b	#$E,($FFFFD724).w
0000D0F4 67EE                       		beq.s	loc_C610
0000D0F6 0C28 0004 001A             		cmpi.b	#4,$1A(a0)
0000D0FC 66D4                       		bne.s	loc_C5FE
0000D0FE 5428 0024                  		addq.b	#2,$24(a0)
0000D102 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000D108                            
0000D108                            Obj3A_Wait:				; XREF: Obj3A_Index
0000D108 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000D10C 6600                       		bne.s	Obj3A_Display
0000D10E 5428 0024                  		addq.b	#2,$24(a0)
0000D112                            
0000D112                            Obj3A_Display:
0000D112 6000 0000                  		bra.w	DisplaySprite
0000D116                            ; ===========================================================================
0000D116                            
0000D116                            Obj3A_TimeBonus:			; XREF: Obj3A_Index
0000D116 6100 0000                  		bsr.w	DisplaySprite
0000D11A 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; set time/ring bonus update flag
0000D120 7000                       		moveq	#0,d0
0000D122 4A78 F7D2                  		tst.w	($FFFFF7D2).w	; is time bonus	= zero?
0000D126 6700                       		beq.s	Obj3A_RingBonus	; if yes, branch
0000D128 0640 000A                  		addi.w	#10,d0		; add 10 to score
0000D12C 0478 000A F7D2             		subi.w	#10,($FFFFF7D2).w ; subtract 10	from time bonus
0000D132                            
0000D132                            Obj3A_RingBonus:
0000D132 4A78 F7D4                  		tst.w	($FFFFF7D4).w	; is ring bonus	= zero?
0000D136 6700                       		beq.s	Obj3A_ChkBonus	; if yes, branch
0000D138 0640 000A                  		addi.w	#10,d0		; add 10 to score
0000D13C 0478 000A F7D4             		subi.w	#10,($FFFFF7D4).w ; subtract 10	from ring bonus
0000D142                            
0000D142                            Obj3A_ChkBonus:
0000D142 4A40                       		tst.w	d0		; is there any bonus?
0000D144 6600                       		bne.s	Obj3A_AddBonus	; if yes, branch
0000D146 303C 00C5                  		move.w	#$C5,d0
0000D14A 4EB9 0000 147C             		jsr	(PlaySound_Special).l ;	play "ker-ching" sound
0000D150 5428 0024                  		addq.b	#2,$24(a0)
0000D154 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w
0000D15A 6600                       		bne.s	Obj3A_SetDelay
0000D15C 5828 0024                  		addq.b	#4,$24(a0)
0000D160                            
0000D160                            Obj3A_SetDelay:
0000D160 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000D166                            
0000D166                            locret_C692:
0000D166 4E75                       		rts	
0000D168                            ; ===========================================================================
0000D168                            
0000D168                            Obj3A_AddBonus:				; XREF: Obj3A_ChkBonus
0000D168 4EB9 0000 0000             		jsr	AddPoints
0000D16E 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000D172 0200 0003                  		andi.b	#3,d0
0000D176 66EE                       		bne.s	locret_C692
0000D178 303C 00CD                  		move.w	#$CD,d0
0000D17C 4EF9 0000 147C             		jmp	(PlaySound_Special).l ;	play "blip" sound
0000D182                            ; ===========================================================================
0000D182                            
0000D182                            Obj3A_NextLevel:			; XREF: Obj3A_Index
0000D182 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000D186 0240 0007                  		andi.w	#7,d0
0000D18A E748                       		lsl.w	#3,d0
0000D18C 1238 FE11                  		move.b	($FFFFFE11).w,d1
0000D190 0241 0003                  		andi.w	#3,d1
0000D194 D241                       		add.w	d1,d1
0000D196 D041                       		add.w	d1,d0
0000D198 303B 0000                  		move.w	LevelOrder(pc,d0.w),d0 ; load level from level order array
0000D19C 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level number
0000D1A0 4A40                       		tst.w	d0
0000D1A2 6600                       		bne.s	Obj3A_ChkSS
0000D1A4 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set game mode to level (00)
0000D1AA 6000                       		bra.s	Obj3A_Display2
0000D1AC                            ; ===========================================================================
0000D1AC                            
0000D1AC                            Obj3A_ChkSS:				; XREF: Obj3A_NextLevel
0000D1AC 4238 FE30                  		clr.b	($FFFFFE30).w	; clear	lamppost counter
0000D1B0 4A38 F7CD                  		tst.b	($FFFFF7CD).w	; has Sonic jumped into	a giant	ring?
0000D1B4 6700                       		beq.s	loc_C6EA	; if not, branch
0000D1B6 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set game mode to Special Stage (10)
0000D1BC 6000                       		bra.s	Obj3A_Display2
0000D1BE                            ; ===========================================================================
0000D1BE                            
0000D1BE                            loc_C6EA:				; XREF: Obj3A_ChkSS
0000D1BE 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000D1C4                            
0000D1C4                            Obj3A_Display2:				; XREF: Obj3A_NextLevel, Obj3A_ChkSS
0000D1C4 6000 0000                  		bra.w	DisplaySprite
0000D1C8                            ; ===========================================================================
0000D1C8                            ; ---------------------------------------------------------------------------
0000D1C8                            ; Level	order array
0000D1C8                            ; ---------------------------------------------------------------------------
0000D1C8                            LevelOrder:	incbin	misc\lvl_ord.bin
0000D1F8                            		even
0000D1F8                            ; ===========================================================================
0000D1F8                            
0000D1F8                            Obj3A_ChkPos2:				; XREF: Obj3A_Index
0000D1F8 7220                       		moveq	#$20,d1		; set horizontal speed
0000D1FA 3028 0032                  		move.w	$32(a0),d0
0000D1FE B068 0008                  		cmp.w	8(a0),d0	; has item reached its finish position?
0000D202 6700                       		beq.s	Obj3A_SBZ2	; if yes, branch
0000D204 6C00                       		bge.s	Obj3A_Move2
0000D206 4441                       		neg.w	d1
0000D208                            
0000D208                            Obj3A_Move2:
0000D208 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000D20C 3028 0008                  		move.w	8(a0),d0
0000D210 6B00                       		bmi.s	locret_C748
0000D212 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000D216 6400                       		bcc.s	locret_C748	; if yes, branch
0000D218 6000 0000                  		bra.w	DisplaySprite
0000D21C                            ; ===========================================================================
0000D21C                            
0000D21C                            locret_C748:
0000D21C 4E75                       		rts	
0000D21E                            ; ===========================================================================
0000D21E                            
0000D21E                            Obj3A_SBZ2:				; XREF: Obj3A_ChkPos2
0000D21E 0C28 0004 001A             		cmpi.b	#4,$1A(a0)
0000D224 6600 0000                  		bne.w	DeleteObject
0000D228 5428 0024                  		addq.b	#2,$24(a0)
0000D22C 4238 F7CC                  		clr.b	($FFFFF7CC).w	; unlock controls
0000D230 303C 008D                  		move.w	#$8D,d0
0000D234 4EF9 0000 1476             		jmp	(PlaySound).l	; play FZ music
0000D23A                            ; ===========================================================================
0000D23A                            
0000D23A                            loc_C766:				; XREF: Obj3A_Index
0000D23A 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0000D23E 0C78 2100 F72A             		cmpi.w	#$2100,($FFFFF72A).w
0000D244 6700 0000                  		beq.w	DeleteObject
0000D248 4E75                       		rts	
0000D24A                            ; ===========================================================================
0000D24A 0004 0124 00BC             Obj3A_Config:	dc.w 4,	$124, $BC	; x-start, x-main, y-main
0000D250 0200                       		dc.b 2,	0		; routine number, frame	number (changes)
0000D252 FEE0 0120 00D0             		dc.w $FEE0, $120, $D0
0000D258 0201                       		dc.b 2,	1
0000D25A 040C 014C 00D6             		dc.w $40C, $14C, $D6
0000D260 0206                       		dc.b 2,	6
0000D262 0520 0120 00EC             		dc.w $520, $120, $EC
0000D268 0202                       		dc.b 2,	2
0000D26A 0540 0120 00FC             		dc.w $540, $120, $FC
0000D270 0203                       		dc.b 2,	3
0000D272 0560 0120 010C             		dc.w $560, $120, $10C
0000D278 0204                       		dc.b 2,	4
0000D27A 020C 014C 00CC             		dc.w $20C, $14C, $CC
0000D280 0205                       		dc.b 2,	5
0000D282                            ; ===========================================================================
0000D282                            ; ---------------------------------------------------------------------------
0000D282                            ; Object 7E - special stage results screen
0000D282                            ; ---------------------------------------------------------------------------
0000D282                            
0000D282                            Obj7E:					; XREF: Obj_Index
0000D282 7000                       		moveq	#0,d0
0000D284 1028 0024                  		move.b	$24(a0),d0
0000D288 323B 0000                  		move.w	Obj7E_Index(pc,d0.w),d1
0000D28C 4EFB 1000                  		jmp	Obj7E_Index(pc,d1.w)
0000D290                            ; ===========================================================================
0000D290 0000                       Obj7E_Index:	dc.w Obj7E_ChkPLC-Obj7E_Index
0000D292 0000                       		dc.w Obj7E_ChkPos-Obj7E_Index
0000D294 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000D296 0000                       		dc.w Obj7E_RingBonus-Obj7E_Index
0000D298 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000D29A 0000                       		dc.w Obj7E_Exit-Obj7E_Index
0000D29C 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000D29E 0000                       		dc.w Obj7E_Continue-Obj7E_Index
0000D2A0 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000D2A2 0000                       		dc.w Obj7E_Exit-Obj7E_Index
0000D2A4 0000                       		dc.w loc_C91A-Obj7E_Index
0000D2A6                            ; ===========================================================================
0000D2A6                            
0000D2A6                            Obj7E_ChkPLC:				; XREF: Obj7E_Index
0000D2A6 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000D2AA 6700                       		beq.s	Obj7E_Main	; if yes, branch
0000D2AC 4E75                       		rts	
0000D2AE                            ; ===========================================================================
0000D2AE                            
0000D2AE                            Obj7E_Main:
0000D2AE 2248                       		movea.l	a0,a1
0000D2B0 45F9 0000 0000             		lea	(Obj7E_Config).l,a2
0000D2B6 7203                       		moveq	#3,d1
0000D2B8 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	50 or more rings?
0000D2BE 6500                       		bcs.s	Obj7E_Loop	; if no, branch
0000D2C0 5241                       		addq.w	#1,d1		; if yes, add 1	to d1 (number of sprites)
0000D2C2                            
0000D2C2                            Obj7E_Loop:
0000D2C2 12BC 007E                  		move.b	#$7E,0(a1)
0000D2C6 335A 0008                  		move.w	(a2)+,8(a1)	; load start x-position
0000D2CA 335A 0030                  		move.w	(a2)+,$30(a1)	; load main x-position
0000D2CE 335A 000A                  		move.w	(a2)+,$A(a1)	; load y-position
0000D2D2 135A 0024                  		move.b	(a2)+,$24(a1)
0000D2D6 135A 001A                  		move.b	(a2)+,$1A(a1)
0000D2DA 237C 0000 0000 0004        		move.l	#Map_obj7E,4(a1)
0000D2E2 337C 8580 0002             		move.w	#$8580,2(a1)
0000D2E8 137C 0000 0001             		move.b	#0,1(a1)
0000D2EE 43E9 0040                  		lea	$40(a1),a1
0000D2F2 51C9 FFCE                  		dbf	d1,Obj7E_Loop	; repeat sequence 3 or 4 times
0000D2F6                            
0000D2F6 7007                       		moveq	#7,d0
0000D2F8 1238 FE57                  		move.b	($FFFFFE57).w,d1
0000D2FC 6700                       		beq.s	loc_C842
0000D2FE 7000                       		moveq	#0,d0
0000D300 0C01 0006                  		cmpi.b	#6,d1		; do you have all chaos	emeralds?
0000D304 6600                       		bne.s	loc_C842	; if not, branch
0000D306 7008                       		moveq	#8,d0		; load "Sonic got them all" text
0000D308 317C 0018 0008             		move.w	#$18,8(a0)
0000D30E 317C 0118 0030             		move.w	#$118,$30(a0)	; change position of text
0000D314                            
0000D314                            loc_C842:
0000D314 1140 001A                  		move.b	d0,$1A(a0)
0000D318                            
0000D318                            Obj7E_ChkPos:				; XREF: Obj7E_Index
0000D318 7210                       		moveq	#$10,d1		; set horizontal speed
0000D31A 3028 0030                  		move.w	$30(a0),d0
0000D31E B068 0008                  		cmp.w	8(a0),d0	; has item reached its target position?
0000D322 6700                       		beq.s	loc_C86C	; if yes, branch
0000D324 6C00                       		bge.s	Obj7E_Move
0000D326 4441                       		neg.w	d1
0000D328                            
0000D328                            Obj7E_Move:
0000D328 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000D32C                            
0000D32C                            loc_C85A:				; XREF: loc_C86C
0000D32C 3028 0008                  		move.w	8(a0),d0
0000D330 6B00                       		bmi.s	locret_C86A
0000D332 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000D336 6400                       		bcc.s	locret_C86A	; if yes, branch
0000D338 6000 0000                  		bra.w	DisplaySprite
0000D33C                            ; ===========================================================================
0000D33C                            
0000D33C                            locret_C86A:
0000D33C 4E75                       		rts	
0000D33E                            ; ===========================================================================
0000D33E                            
0000D33E                            loc_C86C:				; XREF: Obj7E_ChkPos
0000D33E 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000D344 66E6                       		bne.s	loc_C85A
0000D346 5428 0024                  		addq.b	#2,$24(a0)
0000D34A 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000D350 11FC 007F D800             		move.b	#$7F,($FFFFD800).w ; load chaos	emerald	object
0000D356                            
0000D356                            Obj7E_Wait:				; XREF: Obj7E_Index
0000D356 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000D35A 6600                       		bne.s	Obj7E_Display
0000D35C 5428 0024                  		addq.b	#2,$24(a0)
0000D360                            
0000D360                            Obj7E_Display:
0000D360 6000 0000                  		bra.w	DisplaySprite
0000D364                            ; ===========================================================================
0000D364                            
0000D364                            Obj7E_RingBonus:			; XREF: Obj7E_Index
0000D364 6100 0000                  		bsr.w	DisplaySprite
0000D368 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; set ring bonus update flag
0000D36E 4A78 F7D4                  		tst.w	($FFFFF7D4).w	; is ring bonus	= zero?
0000D372 6700                       		beq.s	loc_C8C4	; if yes, branch
0000D374 0478 000A F7D4             		subi.w	#10,($FFFFF7D4).w ; subtract 10	from ring bonus
0000D37A 700A                       		moveq	#10,d0		; add 10 to score
0000D37C 4EB9 0000 0000             		jsr	AddPoints
0000D382 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000D386 0200 0003                  		andi.b	#3,d0
0000D38A 6600                       		bne.s	locret_C8EA
0000D38C 303C 00CD                  		move.w	#$CD,d0
0000D390 4EF9 0000 147C             		jmp	(PlaySound_Special).l ;	play "blip" sound
0000D396                            ; ===========================================================================
0000D396                            
0000D396                            loc_C8C4:				; XREF: Obj7E_RingBonus
0000D396 303C 00C5                  		move.w	#$C5,d0
0000D39A 4EB9 0000 147C             		jsr	(PlaySound_Special).l ;	play "ker-ching" sound
0000D3A0 5428 0024                  		addq.b	#2,$24(a0)
0000D3A4 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000D3AA 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	at least 50 rings?
0000D3B0 6500                       		bcs.s	locret_C8EA	; if not, branch
0000D3B2 317C 003C 001E             		move.w	#60,$1E(a0)	; set time delay to 1 second
0000D3B8 5828 0024                  		addq.b	#4,$24(a0)	; goto "Obj7E_Continue"	routine
0000D3BC                            
0000D3BC                            locret_C8EA:
0000D3BC 4E75                       		rts	
0000D3BE                            ; ===========================================================================
0000D3BE                            
0000D3BE                            Obj7E_Exit:				; XREF: Obj7E_Index
0000D3BE 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000D3C4 6000 0000                  		bra.w	DisplaySprite
0000D3C8                            ; ===========================================================================
0000D3C8                            
0000D3C8                            Obj7E_Continue:				; XREF: Obj7E_Index
0000D3C8 11FC 0004 D6DA             		move.b	#4,($FFFFD6DA).w
0000D3CE 11FC 0014 D6E4             		move.b	#$14,($FFFFD6E4).w
0000D3D4 303C 00BF                  		move.w	#$BF,d0
0000D3D8 4EB9 0000 147C             		jsr	(PlaySound_Special).l ;	play continues music
0000D3DE 5428 0024                  		addq.b	#2,$24(a0)
0000D3E2 317C 0168 001E             		move.w	#360,$1E(a0)	; set time delay to 6 seconds
0000D3E8 6000 0000                  		bra.w	DisplaySprite
0000D3EC                            ; ===========================================================================
0000D3EC                            
0000D3EC                            loc_C91A:				; XREF: Obj7E_Index
0000D3EC 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000D3F0 0200 000F                  		andi.b	#$F,d0
0000D3F4 6600                       		bne.s	Obj7E_Display2
0000D3F6 0868 0000 001A             		bchg	#0,$1A(a0)
0000D3FC                            
0000D3FC                            Obj7E_Display2:
0000D3FC 6000 0000                  		bra.w	DisplaySprite
0000D400                            ; ===========================================================================
0000D400 0020 0120 00C4             Obj7E_Config:	dc.w $20, $120,	$C4	; start	x-pos, main x-pos, y-pos
0000D406 0200                       		dc.b 2,	0		; rountine number, frame number
0000D408 0320 0120 0118             		dc.w $320, $120, $118
0000D40E 0201                       		dc.b 2,	1
0000D410 0360 0120 0128             		dc.w $360, $120, $128
0000D416 0202                       		dc.b 2,	2
0000D418 01EC 011C 00C4             		dc.w $1EC, $11C, $C4
0000D41E 0203                       		dc.b 2,	3
0000D420 03A0 0120 0138             		dc.w $3A0, $120, $138
0000D426 0206                       		dc.b 2,	6
0000D428                            ; ===========================================================================
0000D428                            ; ---------------------------------------------------------------------------
0000D428                            ; Object 7F - chaos emeralds from the special stage results screen
0000D428                            ; ---------------------------------------------------------------------------
0000D428                            
0000D428                            Obj7F:					; XREF: Obj_Index
0000D428 7000                       		moveq	#0,d0
0000D42A 1028 0024                  		move.b	$24(a0),d0
0000D42E 323B 0000                  		move.w	Obj7F_Index(pc,d0.w),d1
0000D432 4EFB 1000                  		jmp	Obj7F_Index(pc,d1.w)
0000D436                            ; ===========================================================================
0000D436 0000                       Obj7F_Index:	dc.w Obj7F_Main-Obj7F_Index
0000D438 0000                       		dc.w Obj7F_Flash-Obj7F_Index
0000D43A                            
0000D43A                            ; ---------------------------------------------------------------------------
0000D43A                            ; X-axis positions for chaos emeralds
0000D43A                            ; ---------------------------------------------------------------------------
0000D43A 0110 0128 00F8 0140 00E0+  Obj7F_PosData:	dc.w $110, $128, $F8, $140, $E0, $158
0000D446                            ; ===========================================================================
0000D446                            
0000D446                            Obj7F_Main:				; XREF: Obj7F_Index
0000D446 2248                       		movea.l	a0,a1
0000D448 45F9 0000 D43A             		lea	(Obj7F_PosData).l,a2
0000D44E 7400                       		moveq	#0,d2
0000D450 7200                       		moveq	#0,d1
0000D452 1238 FE57                  		move.b	($FFFFFE57).w,d1 ; d1 is number	of emeralds
0000D456 5301                       		subq.b	#1,d1		; subtract 1 from d1
0000D458 6500 0000                  		bcs.w	DeleteObject	; if you have 0	emeralds, branch
0000D45C                            
0000D45C                            Obj7F_Loop:
0000D45C 12BC 007F                  		move.b	#$7F,0(a1)
0000D460 335A 0008                  		move.w	(a2)+,8(a1)	; set x-position
0000D464 337C 00F0 000A             		move.w	#$F0,$A(a1)	; set y-position
0000D46A 47F8 FE58                  		lea	($FFFFFE58).w,a3 ; check which emeralds	you have
0000D46E 1633 2000                  		move.b	(a3,d2.w),d3
0000D472 1343 001A                  		move.b	d3,$1A(a1)
0000D476 1343 001C                  		move.b	d3,$1C(a1)
0000D47A 5202                       		addq.b	#1,d2
0000D47C 5429 0024                  		addq.b	#2,$24(a1)
0000D480 237C 0000 0000 0004        		move.l	#Map_obj7F,4(a1)
0000D488 337C 8541 0002             		move.w	#$8541,2(a1)
0000D48E 137C 0000 0001             		move.b	#0,1(a1)
0000D494 43E9 0040                  		lea	$40(a1),a1	; next object
0000D498 51C9 FFC2                  		dbf	d1,Obj7F_Loop	; loop for d1 number of	emeralds
0000D49C                            
0000D49C                            Obj7F_Flash:				; XREF: Obj7F_Index
0000D49C 1028 001A                  		move.b	$1A(a0),d0
0000D4A0 117C 0006 001A             		move.b	#6,$1A(a0)	; load 6th frame (blank)
0000D4A6 0C00 0006                  		cmpi.b	#6,d0
0000D4AA 6600                       		bne.s	Obj7F_Display
0000D4AC 1168 001C 001A             		move.b	$1C(a0),$1A(a0)	; load visible frame
0000D4B2                            
0000D4B2                            Obj7F_Display:
0000D4B2 6000 0000                  		bra.w	DisplaySprite
0000D4B6                            ; ===========================================================================
0000D4B6                            ; ---------------------------------------------------------------------------
0000D4B6                            ; Sprite mappings - zone title cards
0000D4B6                            ; ---------------------------------------------------------------------------
0000D4B6                            Map_obj34:
0000D4B6                            	include "_maps\obj34.asm"
0000D4B6                            ; ---------------------------------------------------------------------------
0000D4B6                            ; Sprite mappings - zone title cards
0000D4B6                            ; ---------------------------------------------------------------------------
0000D4B6 0000                           	dc.w byte_C9FE-Map_obj34
0000D4B8 0000                       		dc.w byte_CA2C-Map_obj34
0000D4BA 0000                       		dc.w byte_CA5A-Map_obj34
0000D4BC 0000                       		dc.w byte_CA7A-Map_obj34
0000D4BE 0000                       		dc.w byte_CAA8-Map_obj34
0000D4C0 0000                       		dc.w byte_CADC-Map_obj34
0000D4C2 0000                       		dc.w byte_CB10-Map_obj34
0000D4C4 0000                       		dc.w byte_CB26-Map_obj34
0000D4C6 0000                       		dc.w byte_CB31-Map_obj34
0000D4C8 0000                       		dc.w byte_CB3C-Map_obj34
0000D4CA 0000                       		dc.w byte_CB47-Map_obj34
0000D4CC 0000                       		dc.w byte_CB8A-Map_obj34
0000D4CE 09                         byte_C9FE:	dc.b 9 			; GREEN HILL
0000D4CF F805 0018 B4               		dc.b $F8, 5, 0,	$18, $B4
0000D4D4 F805 003A C4               		dc.b $F8, 5, 0,	$3A, $C4
0000D4D9 F805 0010 D4               		dc.b $F8, 5, 0,	$10, $D4
0000D4DE F805 0010 E4               		dc.b $F8, 5, 0,	$10, $E4
0000D4E3 F805 002E F4               		dc.b $F8, 5, 0,	$2E, $F4
0000D4E8 F805 001C 14               		dc.b $F8, 5, 0,	$1C, $14
0000D4ED F801 0020 24               		dc.b $F8, 1, 0,	$20, $24
0000D4F2 F805 0026 2C               		dc.b $F8, 5, 0,	$26, $2C
0000D4F7 F805 0026 3C               		dc.b $F8, 5, 0,	$26, $3C
0000D4FC 09                         byte_CA2C:	dc.b 9			; LABYRINTH
0000D4FD F805 0026 BC               		dc.b $F8, 5, 0,	$26, $BC
0000D502 F805 0000 CC               		dc.b $F8, 5, 0,	0, $CC
0000D507 F805 0004 DC               		dc.b $F8, 5, 0,	4, $DC
0000D50C F805 004A EC               		dc.b $F8, 5, 0,	$4A, $EC
0000D511 F805 003A FC               		dc.b $F8, 5, 0,	$3A, $FC
0000D516 F801 0020 0C               		dc.b $F8, 1, 0,	$20, $C
0000D51B F805 002E 14               		dc.b $F8, 5, 0,	$2E, $14
0000D520 F805 0042 24               		dc.b $F8, 5, 0,	$42, $24
0000D525 F805 001C 34               		dc.b $F8, 5, 0,	$1C, $34
0000D52A 06                         byte_CA5A:	dc.b 6			; MARBLE
0000D52B F805 002A CF               		dc.b $F8, 5, 0,	$2A, $CF
0000D530 F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
0000D535 F805 003A F0               		dc.b $F8, 5, 0,	$3A, $F0
0000D53A F805 0004 00               		dc.b $F8, 5, 0,	4, 0
0000D53F F805 0026 10               		dc.b $F8, 5, 0,	$26, $10
0000D544 F805 0010 20               		dc.b $F8, 5, 0,	$10, $20
0000D549 00                         		dc.b 0
0000D54A 09                         byte_CA7A:	dc.b 9			; STAR	LIGHT
0000D54B F805 003E B4               		dc.b $F8, 5, 0,	$3E, $B4
0000D550 F805 0042 C4               		dc.b $F8, 5, 0,	$42, $C4
0000D555 F805 0000 D4               		dc.b $F8, 5, 0,	0, $D4
0000D55A F805 003A E4               		dc.b $F8, 5, 0,	$3A, $E4
0000D55F F805 0026 04               		dc.b $F8, 5, 0,	$26, 4
0000D564 F801 0020 14               		dc.b $F8, 1, 0,	$20, $14
0000D569 F805 0018 1C               		dc.b $F8, 5, 0,	$18, $1C
0000D56E F805 001C 2C               		dc.b $F8, 5, 0,	$1C, $2C
0000D573 F805 0042 3C               		dc.b $F8, 5, 0,	$42, $3C
0000D578 0A                         byte_CAA8:	dc.b $A			; SPRING YARD
0000D579 F805 003E AC               		dc.b $F8, 5, 0,	$3E, $AC
0000D57E F805 0036 BC               		dc.b $F8, 5, 0,	$36, $BC
0000D583 F805 003A CC               		dc.b $F8, 5, 0,	$3A, $CC
0000D588 F801 0020 DC               		dc.b $F8, 1, 0,	$20, $DC
0000D58D F805 002E E4               		dc.b $F8, 5, 0,	$2E, $E4
0000D592 F805 0018 F4               		dc.b $F8, 5, 0,	$18, $F4
0000D597 F805 004A 14               		dc.b $F8, 5, 0,	$4A, $14
0000D59C F805 0000 24               		dc.b $F8, 5, 0,	0, $24
0000D5A1 F805 003A 34               		dc.b $F8, 5, 0,	$3A, $34
0000D5A6 F805 000C 44               		dc.b $F8, 5, 0,	$C, $44
0000D5AB 00                         		dc.b 0
0000D5AC 0A                         byte_CADC:	dc.b $A			; SCRAP BRAIN
0000D5AD F805 003E AC               		dc.b $F8, 5, 0,	$3E, $AC
0000D5B2 F805 0008 BC               		dc.b $F8, 5, 0,	8, $BC
0000D5B7 F805 003A CC               		dc.b $F8, 5, 0,	$3A, $CC
0000D5BC F805 0000 DC               		dc.b $F8, 5, 0,	0, $DC
0000D5C1 F805 0036 EC               		dc.b $F8, 5, 0,	$36, $EC
0000D5C6 F805 0004 0C               		dc.b $F8, 5, 0,	4, $C
0000D5CB F805 003A 1C               		dc.b $F8, 5, 0,	$3A, $1C
0000D5D0 F805 0000 2C               		dc.b $F8, 5, 0,	0, $2C
0000D5D5 F801 0020 3C               		dc.b $F8, 1, 0,	$20, $3C
0000D5DA F805 002E 44               		dc.b $F8, 5, 0,	$2E, $44
0000D5DF 00                         		dc.b 0
0000D5E0 04                         byte_CB10:	dc.b 4			; ZONE
0000D5E1 F805 004E E0               		dc.b $F8, 5, 0,	$4E, $E0
0000D5E6 F805 0032 F0               		dc.b $F8, 5, 0,	$32, $F0
0000D5EB F805 002E 00               		dc.b $F8, 5, 0,	$2E, 0
0000D5F0 F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000D5F5 00                         		dc.b 0
0000D5F6 02                         byte_CB26:	dc.b 2			; ACT 1
0000D5F7 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000D5FC F402 0057 0C               		dc.b $F4, 2, 0,	$57, $C
0000D601 02                         byte_CB31:	dc.b 2			; ACT 2
0000D602 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000D607 F406 005A 08               		dc.b $F4, 6, 0,	$5A, 8
0000D60C 02                         byte_CB3C:	dc.b 2			; ACT 3
0000D60D 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000D612 F406 0060 08               		dc.b $F4, 6, 0,	$60, 8
0000D617 0D                         byte_CB47:	dc.b $D			; Oval
0000D618 E40C 0070 F4               		dc.b $E4, $C, 0, $70, $F4
0000D61D E402 0074 14               		dc.b $E4, 2, 0,	$74, $14
0000D622 EC04 0077 EC               		dc.b $EC, 4, 0,	$77, $EC
0000D627 F405 0079 E4               		dc.b $F4, 5, 0,	$79, $E4
0000D62C 140C 1870 EC               		dc.b $14, $C, $18, $70,	$EC
0000D631 0402 1874 E4               		dc.b 4,	2, $18,	$74, $E4
0000D636 0C04 1877 04               		dc.b $C, 4, $18, $77, 4
0000D63B FC05 1879 0C               		dc.b $FC, 5, $18, $79, $C
0000D640 EC08 007D FC               		dc.b $EC, 8, 0,	$7D, $FC
0000D645 F40C 007C F4               		dc.b $F4, $C, 0, $7C, $F4
0000D64A FC08 007C F4               		dc.b $FC, 8, 0,	$7C, $F4
0000D64F 040C 007C EC               		dc.b 4,	$C, 0, $7C, $EC
0000D654 0C08 007C EC               		dc.b $C, 8, 0, $7C, $EC
0000D659 00                         		dc.b 0
0000D65A 05                         byte_CB8A:	dc.b 5			; FINAL
0000D65B F805 0014 DC               		dc.b $F8, 5, 0,	$14, $DC
0000D660 F801 0020 EC               		dc.b $F8, 1, 0,	$20, $EC
0000D665 F805 002E F4               		dc.b $F8, 5, 0,	$2E, $F4
0000D66A F805 0000 04               		dc.b $F8, 5, 0,	0, 4
0000D66F F805 0026 14               		dc.b $F8, 5, 0,	$26, $14
0000D674                            		even
0000D674                            		even
0000D674                            ; ---------------------------------------------------------------------------
0000D674                            ; Sprite mappings - "GAME OVER"	and "TIME OVER"
0000D674                            ; ---------------------------------------------------------------------------
0000D674                            Map_obj39:
0000D674                            	include "_maps\obj39.asm"
0000D674                            ; ---------------------------------------------------------------------------
0000D674                            ; Sprite mappings - "GAME OVER"	and "TIME OVER"
0000D674                            ; ---------------------------------------------------------------------------
0000D674 0000                       		dc.w byte_CBAC-Map_obj39
0000D676 0000                       		dc.w byte_CBB7-Map_obj39
0000D678 0000                       		dc.w byte_CBC2-Map_obj39
0000D67A 0000                       		dc.w byte_CBCD-Map_obj39
0000D67C 02                         byte_CBAC:	dc.b 2
0000D67D F80D 0000 B8               		dc.b $F8, $D, 0, 0, $B8
0000D682 F80D 0008 D8               		dc.b $F8, $D, 0, 8, $D8
0000D687 02                         byte_CBB7:	dc.b 2
0000D688 F80D 0014 08               		dc.b $F8, $D, 0, $14, 8
0000D68D F80D 000C 28               		dc.b $F8, $D, 0, $C, $28
0000D692 02                         byte_CBC2:	dc.b 2
0000D693 F809 001C C4               		dc.b $F8, 9, 0,	$1C, $C4
0000D698 F80D 0008 DC               		dc.b $F8, $D, 0, 8, $DC
0000D69D 02                         byte_CBCD:	dc.b 2
0000D69E F80D 0014 0C               		dc.b $F8, $D, 0, $14, $C
0000D6A3 F80D 000C 2C               		dc.b $F8, $D, 0, $C, $2C
0000D6A8                            		even
0000D6A8                            		even
0000D6A8                            
0000D6A8                            ; ---------------------------------------------------------------------------
0000D6A8                            ; Sprite mappings - "SONIC HAS PASSED" title card
0000D6A8                            ; ---------------------------------------------------------------------------
0000D6A8 0000                       Map_obj3A:	dc.w byte_CBEA-Map_obj3A
0000D6AA 0000                       		dc.w byte_CC13-Map_obj3A
0000D6AC 0000                       		dc.w byte_CC32-Map_obj3A
0000D6AE 0000                       		dc.w byte_CC51-Map_obj3A
0000D6B0 0000                       		dc.w byte_CC75-Map_obj3A
0000D6B2 FF6F                       		dc.w byte_CB47-Map_obj3A
0000D6B4 FF4E                       		dc.w byte_CB26-Map_obj3A
0000D6B6 FF59                       		dc.w byte_CB31-Map_obj3A
0000D6B8 FF64                       		dc.w byte_CB3C-Map_obj3A
0000D6BA 08                         byte_CBEA:	dc.b 8			; SONIC HAS
0000D6BB F805 003E B8               		dc.b $F8, 5, 0,	$3E, $B8
0000D6C0 F805 0032 C8               		dc.b $F8, 5, 0,	$32, $C8
0000D6C5 F805 002E D8               		dc.b $F8, 5, 0,	$2E, $D8
0000D6CA F801 0020 E8               		dc.b $F8, 1, 0,	$20, $E8
0000D6CF F805 0008 F0               		dc.b $F8, 5, 0,	8, $F0
0000D6D4 F805 001C 10               		dc.b $F8, 5, 0,	$1C, $10
0000D6D9 F805 0000 20               		dc.b $F8, 5, 0,	0, $20
0000D6DE F805 003E 30               		dc.b $F8, 5, 0,	$3E, $30
0000D6E3 06                         byte_CC13:	dc.b 6			; PASSED
0000D6E4 F805 0036 D0               		dc.b $F8, 5, 0,	$36, $D0
0000D6E9 F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
0000D6EE F805 003E F0               		dc.b $F8, 5, 0,	$3E, $F0
0000D6F3 F805 003E 00               		dc.b $F8, 5, 0,	$3E, 0
0000D6F8 F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000D6FD F805 000C 20               		dc.b $F8, 5, 0,	$C, $20
0000D702 06                         byte_CC32:	dc.b 6			; SCORE
0000D703 F80D 014A B0               		dc.b $F8, $D, 1, $4A, $B0
0000D708 F801 0162 D0               		dc.b $F8, 1, 1,	$62, $D0
0000D70D F809 0164 18               		dc.b $F8, 9, 1,	$64, $18
0000D712 F80D 016A 30               		dc.b $F8, $D, 1, $6A, $30
0000D717 F704 006E CD               		dc.b $F7, 4, 0,	$6E, $CD
0000D71C FF04 186E CD               		dc.b $FF, 4, $18, $6E, $CD
0000D721 07                         byte_CC51:	dc.b 7			; TIME BONUS
0000D722 F80D 015A B0               		dc.b $F8, $D, 1, $5A, $B0
0000D727 F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000D72C F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000D731 F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000D736 FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000D73B F80D FFF0 28               		dc.b $F8, $D, $FF, $F0,	$28
0000D740 F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000D745 07                         byte_CC75:	dc.b 7			; RING BONUS
0000D746 F80D 0152 B0               		dc.b $F8, $D, 1, $52, $B0
0000D74B F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000D750 F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000D755 F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000D75A FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000D75F F80D FFF8 28               		dc.b $F8, $D, $FF, $F8,	$28
0000D764 F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000D76A 00                         		even
0000D76A                            ; ---------------------------------------------------------------------------
0000D76A                            ; Sprite mappings - special stage results screen
0000D76A                            ; ---------------------------------------------------------------------------
0000D76A 0000                       Map_obj7E:	dc.w byte_CCAC-Map_obj7E
0000D76C 0000                       		dc.w byte_CCEE-Map_obj7E
0000D76E 0000                       		dc.w byte_CD0D-Map_obj7E
0000D770 FEAD                       		dc.w byte_CB47-Map_obj7E
0000D772 0000                       		dc.w byte_CD31-Map_obj7E
0000D774 0000                       		dc.w byte_CD46-Map_obj7E
0000D776 0000                       		dc.w byte_CD5B-Map_obj7E
0000D778 0000                       		dc.w byte_CD6B-Map_obj7E
0000D77A 0000                       		dc.w byte_CDA8-Map_obj7E
0000D77C 0D                         byte_CCAC:	dc.b $D			; "CHAOS EMERALDS"
0000D77D F805 0008 90               		dc.b $F8, 5, 0,	8, $90
0000D782 F805 001C A0               		dc.b $F8, 5, 0,	$1C, $A0
0000D787 F805 0000 B0               		dc.b $F8, 5, 0,	0, $B0
0000D78C F805 0032 C0               		dc.b $F8, 5, 0,	$32, $C0
0000D791 F805 003E D0               		dc.b $F8, 5, 0,	$3E, $D0
0000D796 F805 0010 F0               		dc.b $F8, 5, 0,	$10, $F0
0000D79B F805 002A 00               		dc.b $F8, 5, 0,	$2A, 0
0000D7A0 F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000D7A5 F805 003A 20               		dc.b $F8, 5, 0,	$3A, $20
0000D7AA F805 0000 30               		dc.b $F8, 5, 0,	0, $30
0000D7AF F805 0026 40               		dc.b $F8, 5, 0,	$26, $40
0000D7B4 F805 000C 50               		dc.b $F8, 5, 0,	$C, $50
0000D7B9 F805 003E 60               		dc.b $F8, 5, 0,	$3E, $60
0000D7BE 06                         byte_CCEE:	dc.b 6			; "SCORE"
0000D7BF F80D 014A B0               		dc.b $F8, $D, 1, $4A, $B0
0000D7C4 F801 0162 D0               		dc.b $F8, 1, 1,	$62, $D0
0000D7C9 F809 0164 18               		dc.b $F8, 9, 1,	$64, $18
0000D7CE F80D 016A 30               		dc.b $F8, $D, 1, $6A, $30
0000D7D3 F704 006E CD               		dc.b $F7, 4, 0,	$6E, $CD
0000D7D8 FF04 186E CD               		dc.b $FF, 4, $18, $6E, $CD
0000D7DD 07                         byte_CD0D:	dc.b 7
0000D7DE F80D 0152 B0               		dc.b $F8, $D, 1, $52, $B0
0000D7E3 F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000D7E8 F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000D7ED F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000D7F2 FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000D7F7 F80D FFF8 28               		dc.b $F8, $D, $FF, $F8,	$28
0000D7FC F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000D801 04                         byte_CD31:	dc.b 4
0000D802 F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000D807 F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000D80C F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000D811 F806 1FE3 40               		dc.b $F8, 6, $1F, $E3, $40
0000D816 04                         byte_CD46:	dc.b 4
0000D817 F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000D81C F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000D821 F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000D826 F806 1FE9 40               		dc.b $F8, 6, $1F, $E9, $40
0000D82B 03                         byte_CD5B:	dc.b 3
0000D82C F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000D831 F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000D836 F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000D83B 0C                         byte_CD6B:	dc.b $C			; "SPECIAL STAGE"
0000D83C F805 003E 9C               		dc.b $F8, 5, 0,	$3E, $9C
0000D841 F805 0036 AC               		dc.b $F8, 5, 0,	$36, $AC
0000D846 F805 0010 BC               		dc.b $F8, 5, 0,	$10, $BC
0000D84B F805 0008 CC               		dc.b $F8, 5, 0,	8, $CC
0000D850 F801 0020 DC               		dc.b $F8, 1, 0,	$20, $DC
0000D855 F805 0000 E4               		dc.b $F8, 5, 0,	0, $E4
0000D85A F805 0026 F4               		dc.b $F8, 5, 0,	$26, $F4
0000D85F F805 003E 14               		dc.b $F8, 5, 0,	$3E, $14
0000D864 F805 0042 24               		dc.b $F8, 5, 0,	$42, $24
0000D869 F805 0000 34               		dc.b $F8, 5, 0,	0, $34
0000D86E F805 0018 44               		dc.b $F8, 5, 0,	$18, $44
0000D873 F805 0010 54               		dc.b $F8, 5, 0,	$10, $54
0000D878 0F                         byte_CDA8:	dc.b $F			; "SONIC GOT THEM ALL"
0000D879 F805 003E 88               		dc.b $F8, 5, 0,	$3E, $88
0000D87E F805 0032 98               		dc.b $F8, 5, 0,	$32, $98
0000D883 F805 002E A8               		dc.b $F8, 5, 0,	$2E, $A8
0000D888 F801 0020 B8               		dc.b $F8, 1, 0,	$20, $B8
0000D88D F805 0008 C0               		dc.b $F8, 5, 0,	8, $C0
0000D892 F805 0018 D8               		dc.b $F8, 5, 0,	$18, $D8
0000D897 F805 0032 E8               		dc.b $F8, 5, 0,	$32, $E8
0000D89C F805 0042 F8               		dc.b $F8, 5, 0,	$42, $F8
0000D8A1 F805 0042 10               		dc.b $F8, 5, 0,	$42, $10
0000D8A6 F805 001C 20               		dc.b $F8, 5, 0,	$1C, $20
0000D8AB F805 0010 30               		dc.b $F8, 5, 0,	$10, $30
0000D8B0 F805 002A 40               		dc.b $F8, 5, 0,	$2A, $40
0000D8B5 F805 0000 58               		dc.b $F8, 5, 0,	0, $58
0000D8BA F805 0026 68               		dc.b $F8, 5, 0,	$26, $68
0000D8BF F805 0026 78               		dc.b $F8, 5, 0,	$26, $78
0000D8C4                            		even
0000D8C4                            ; ---------------------------------------------------------------------------
0000D8C4                            ; Sprite mappings - chaos emeralds from	the special stage results screen
0000D8C4                            ; ---------------------------------------------------------------------------
0000D8C4                            Map_obj7F:
0000D8C4                            	include "_maps\obj7F.asm"
0000D8C4                            ; ---------------------------------------------------------------------------
0000D8C4                            ; Sprite mappings - chaos emeralds from	the special stage results screen
0000D8C4                            ; ---------------------------------------------------------------------------
0000D8C4 0000                       		dc.w byte_CE02-Map_obj7F
0000D8C6 0000                       		dc.w byte_CE08-Map_obj7F
0000D8C8 0000                       		dc.w byte_CE0E-Map_obj7F
0000D8CA 0000                       		dc.w byte_CE14-Map_obj7F
0000D8CC 0000                       		dc.w byte_CE1A-Map_obj7F
0000D8CE 0000                       		dc.w byte_CE20-Map_obj7F
0000D8D0 0000                       		dc.w byte_CE26-Map_obj7F
0000D8D2 01                         byte_CE02:	dc.b 1
0000D8D3 F805 2004 F8               		dc.b $F8, 5, $20, 4, $F8
0000D8D8 01                         byte_CE08:	dc.b 1
0000D8D9 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000D8DE 01                         byte_CE0E:	dc.b 1
0000D8DF F805 4004 F8               		dc.b $F8, 5, $40, 4, $F8
0000D8E4 01                         byte_CE14:	dc.b 1
0000D8E5 F805 6004 F8               		dc.b $F8, 5, $60, 4, $F8
0000D8EA 01                         byte_CE1A:	dc.b 1
0000D8EB F805 2008 F8               		dc.b $F8, 5, $20, 8, $F8
0000D8F0 01                         byte_CE20:	dc.b 1
0000D8F1 F805 200C F8               		dc.b $F8, 5, $20, $C, $F8
0000D8F6 00                         byte_CE26:	dc.b 0			; Blank frame
0000D8F8 00                         		even
0000D8F8 00                         		even
0000D8F8                            
0000D8F8                            ; ===========================================================================
0000D8F8                            ; ---------------------------------------------------------------------------
0000D8F8                            ; Object 36 - spikes
0000D8F8                            ; ---------------------------------------------------------------------------
0000D8F8                            
0000D8F8                            Obj36:					; XREF: Obj_Index
0000D8F8 7000                       		moveq	#0,d0
0000D8FA 1028 0024                  		move.b	$24(a0),d0
0000D8FE 323B 0000                  		move.w	Obj36_Index(pc,d0.w),d1
0000D902 4EFB 1000                  		jmp	Obj36_Index(pc,d1.w)
0000D906                            ; ===========================================================================
0000D906 0000                       Obj36_Index:	dc.w Obj36_Main-Obj36_Index
0000D908 0000                       		dc.w Obj36_Solid-Obj36_Index
0000D90A                            
0000D90A 0014                       Obj36_Var:	dc.b 0,	$14		; frame	number,	object width
0000D90C 0110                       		dc.b 1,	$10
0000D90E 0204                       		dc.b 2,	4
0000D910 031C                       		dc.b 3,	$1C
0000D912 0440                       		dc.b 4,	$40
0000D914 0510                       		dc.b 5,	$10
0000D916                            ; ===========================================================================
0000D916                            
0000D916                            Obj36_Main:				; XREF: Obj36_Index
0000D916 5428 0024                  		addq.b	#2,$24(a0)
0000D91A 217C 0000 0000 0004        		move.l	#Map_obj36,4(a0)
0000D922 317C 051B 0002             		move.w	#$51B,2(a0)
0000D928 0028 0004 0001             		ori.b	#4,1(a0)
0000D92E 117C 0004 0018             		move.b	#4,$18(a0)
0000D934 1028 0028                  		move.b	$28(a0),d0
0000D938 0228 000F 0028             		andi.b	#$F,$28(a0)
0000D93E 0240 00F0                  		andi.w	#$F0,d0
0000D942 43F9 0000 D90A             		lea	(Obj36_Var).l,a1
0000D948 E648                       		lsr.w	#3,d0
0000D94A D2C0                       		adda.w	d0,a1
0000D94C 1159 001A                  		move.b	(a1)+,$1A(a0)
0000D950 1159 0019                  		move.b	(a1)+,$19(a0)
0000D954 3168 0008 0030             		move.w	8(a0),$30(a0)
0000D95A 3168 000C 0032             		move.w	$C(a0),$32(a0)
0000D960                            
0000D960                            Obj36_Solid:				; XREF: Obj36_Index
0000D960 6100 0000                  		bsr.w	Obj36_Type0x	; make the object move
0000D964 343C 0004                  		move.w	#4,d2
0000D968 0C28 0005 001A             		cmpi.b	#5,$1A(a0)	; is object type $5x ?
0000D96E 6700                       		beq.s	Obj36_SideWays	; if yes, branch
0000D970 0C28 0001 001A             		cmpi.b	#1,$1A(a0)	; is object type $1x ?
0000D976 6600                       		bne.s	Obj36_Upright	; if not, branch
0000D978 343C 0014                  		move.w	#$14,d2
0000D97C                            
0000D97C                            ; Spikes types $1x and $5x face	sideways
0000D97C                            
0000D97C                            Obj36_SideWays:				; XREF: Obj36_Solid
0000D97C 323C 001B                  		move.w	#$1B,d1
0000D980 3602                       		move.w	d2,d3
0000D982 5243                       		addq.w	#1,d3
0000D984 3828 0008                  		move.w	8(a0),d4
0000D988 6100 0000                  		bsr.w	SolidObject
0000D98C 0828 0003 0022             		btst	#3,$22(a0)
0000D992 6600                       		bne.s	Obj36_Display
0000D994 0C44 0001                  		cmpi.w	#1,d4
0000D998 6700                       		beq.s	Obj36_Hurt
0000D99A 6000                       		bra.s	Obj36_Display
0000D99C                            ; ===========================================================================
0000D99C                            
0000D99C                            ; Spikes types $0x, $2x, $3x and $4x face up or	down
0000D99C                            
0000D99C                            Obj36_Upright:				; XREF: Obj36_Solid
0000D99C 7200                       		moveq	#0,d1
0000D99E 1228 0019                  		move.b	$19(a0),d1
0000D9A2 0641 000B                  		addi.w	#$B,d1
0000D9A6 343C 0010                  		move.w	#$10,d2
0000D9AA 363C 0011                  		move.w	#$11,d3
0000D9AE 3828 0008                  		move.w	8(a0),d4
0000D9B2 6100 0000                  		bsr.w	SolidObject
0000D9B6 0828 0003 0022             		btst	#3,$22(a0)
0000D9BC 6600                       		bne.s	Obj36_Hurt
0000D9BE 4A44                       		tst.w	d4
0000D9C0 6A00                       		bpl.s	Obj36_Display
0000D9C2                            
0000D9C2                            Obj36_Hurt:				; XREF: Obj36_SideWays; Obj36_Upright
0000D9C2 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0000D9C6 6600                       		bne.s	Obj36_Display	; if yes, branch
0000D9C8 4A78 D030                  		tst.w	($FFFFD030).w	; +++ is Sonic invulnerable?
0000D9CC 6600                       		bne.s	Obj36_Display	; +++ if yes, branch
0000D9CE 2F08                       		move.l	a0,-(sp)
0000D9D0 2448                       		movea.l	a0,a2
0000D9D2 41F8 D000                  		lea	($FFFFD000).w,a0
0000D9D6 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0000D9DC 6400                       		bcc.s	loc_CF20
0000D9DE 2628 000C                  		move.l	$C(a0),d3
0000D9E2 3028 0012                  		move.w	$12(a0),d0
0000D9E6 48C0                       		ext.l	d0
0000D9E8 E180                       		asl.l	#8,d0
0000D9EA 9680                       		sub.l	d0,d3
0000D9EC 2143 000C                  		move.l	d3,$C(a0)
0000D9F0 4EB9 0000 0000             		jsr	HurtSonic
0000D9F6                            
0000D9F6                            loc_CF20:
0000D9F6 205F                       		movea.l	(sp)+,a0
0000D9F8                            
0000D9F8                            Obj36_Display:
0000D9F8 6100 0000                  		bsr.w	DisplaySprite
0000D9FC 3028 0030                  		move.w	$30(a0),d0
0000DA00 0240 FF80                  		andi.w	#$FF80,d0
0000DA04 3238 F700                  		move.w	($FFFFF700).w,d1
0000DA08 0441 0080                  		subi.w	#$80,d1
0000DA0C 0241 FF80                  		andi.w	#$FF80,d1
0000DA10 9041                       		sub.w	d1,d0
0000DA12 0C40 0280                  		cmpi.w	#$280,d0
0000DA16 6200 0000                  		bhi.w	DeleteObject
0000DA1A 4E75                       		rts	
0000DA1C                            ; ===========================================================================
0000DA1C                            
0000DA1C                            Obj36_Type0x:				; XREF: Obj36_Solid
0000DA1C 7000                       		moveq	#0,d0
0000DA1E 1028 0028                  		move.b	$28(a0),d0
0000DA22 D040                       		add.w	d0,d0
0000DA24 323B 0000                  		move.w	Obj36_TypeIndex(pc,d0.w),d1
0000DA28 4EFB 1000                  		jmp	Obj36_TypeIndex(pc,d1.w)
0000DA2C                            ; ===========================================================================
0000DA2C 0000                       Obj36_TypeIndex:dc.w Obj36_Type00-Obj36_TypeIndex
0000DA2E 0000                       		dc.w Obj36_Type01-Obj36_TypeIndex
0000DA30 0000                       		dc.w Obj36_Type02-Obj36_TypeIndex
0000DA32                            ; ===========================================================================
0000DA32                            
0000DA32                            Obj36_Type00:				; XREF: Obj36_TypeIndex
0000DA32 4E75                       		rts			; don't move the object
0000DA34                            ; ===========================================================================
0000DA34                            
0000DA34                            Obj36_Type01:				; XREF: Obj36_TypeIndex
0000DA34 6100 0000                  		bsr.w	Obj36_Wait
0000DA38 7000                       		moveq	#0,d0
0000DA3A 1028 0034                  		move.b	$34(a0),d0
0000DA3E D068 0032                  		add.w	$32(a0),d0
0000DA42 3140 000C                  		move.w	d0,$C(a0)	; move the object vertically
0000DA46 4E75                       		rts	
0000DA48                            ; ===========================================================================
0000DA48                            
0000DA48                            Obj36_Type02:				; XREF: Obj36_TypeIndex
0000DA48 6100 0000                  		bsr.w	Obj36_Wait
0000DA4C 7000                       		moveq	#0,d0
0000DA4E 1028 0034                  		move.b	$34(a0),d0
0000DA52 D068 0030                  		add.w	$30(a0),d0
0000DA56 3140 0008                  		move.w	d0,8(a0)	; move the object horizontally
0000DA5A 4E75                       		rts	
0000DA5C                            ; ===========================================================================
0000DA5C                            
0000DA5C                            Obj36_Wait:
0000DA5C 4A68 0038                  		tst.w	$38(a0)		; is time delay	= zero?
0000DA60 6700                       		beq.s	loc_CFA4	; if yes, branch
0000DA62 5368 0038                  		subq.w	#1,$38(a0)	; subtract 1 from time delay
0000DA66 6600                       		bne.s	locret_CFE6
0000DA68 4A28 0001                  		tst.b	1(a0)
0000DA6C 6A00                       		bpl.s	locret_CFE6
0000DA6E 303C 00B6                  		move.w	#$B6,d0
0000DA72 4EB9 0000 147C             		jsr	(PlaySound_Special).l ;	play "spikes moving" sound
0000DA78 6000                       		bra.s	locret_CFE6
0000DA7A                            ; ===========================================================================
0000DA7A                            
0000DA7A                            loc_CFA4:
0000DA7A 4A68 0036                  		tst.w	$36(a0)
0000DA7E 6700                       		beq.s	loc_CFC6
0000DA80 0468 0800 0034             		subi.w	#$800,$34(a0)
0000DA86 6400                       		bcc.s	locret_CFE6
0000DA88 317C 0000 0034             		move.w	#0,$34(a0)
0000DA8E 317C 0000 0036             		move.w	#0,$36(a0)
0000DA94 317C 003C 0038             		move.w	#60,$38(a0)	; set time delay to 1 second
0000DA9A 6000                       		bra.s	locret_CFE6
0000DA9C                            ; ===========================================================================
0000DA9C                            
0000DA9C                            loc_CFC6:
0000DA9C 0668 0800 0034             		addi.w	#$800,$34(a0)
0000DAA2 0C68 2000 0034             		cmpi.w	#$2000,$34(a0)
0000DAA8 6500                       		bcs.s	locret_CFE6
0000DAAA 317C 2000 0034             		move.w	#$2000,$34(a0)
0000DAB0 317C 0001 0036             		move.w	#1,$36(a0)
0000DAB6 317C 003C 0038             		move.w	#60,$38(a0)	; set time delay to 1 second
0000DABC                            
0000DABC                            locret_CFE6:
0000DABC 4E75                       		rts	
0000DABE                            ; ===========================================================================
0000DABE                            ; ---------------------------------------------------------------------------
0000DABE                            ; Sprite mappings - spikes
0000DABE                            ; ---------------------------------------------------------------------------
0000DABE                            Map_obj36:
0000DABE                            	include "_maps\obj36.asm"
0000DABE                            ; ---------------------------------------------------------------------------
0000DABE                            ; Sprite mappings - spikes
0000DABE                            ; ---------------------------------------------------------------------------
0000DABE 0000                       		dc.w byte_CFF4-Map_obj36
0000DAC0 0000                       		dc.w byte_D004-Map_obj36
0000DAC2 0000                       		dc.w byte_D014-Map_obj36
0000DAC4 0000                       		dc.w byte_D01A-Map_obj36
0000DAC6 0000                       		dc.w byte_D02A-Map_obj36
0000DAC8 0000                       		dc.w byte_D049-Map_obj36
0000DACA 03                         byte_CFF4:	dc.b 3			; 3 spikes
0000DACB F003 0004 EC               		dc.b $F0, 3, 0,	4, $EC
0000DAD0 F003 0004 FC               		dc.b $F0, 3, 0,	4, $FC
0000DAD5 F003 0004 0C               		dc.b $F0, 3, 0,	4, $C
0000DADA 03                         byte_D004:	dc.b 3			; 3 spikes facing sideways
0000DADB EC0C 0000 F0               		dc.b $EC, $C, 0, 0, $F0
0000DAE0 FC0C 0000 F0               		dc.b $FC, $C, 0, 0, $F0
0000DAE5 0C0C 0000 F0               		dc.b $C, $C, 0,	0, $F0
0000DAEA 01                         byte_D014:	dc.b 1			; 1 spike
0000DAEB F003 0004 FC               		dc.b $F0, 3, 0,	4, $FC
0000DAF0 03                         byte_D01A:	dc.b 3			; 3 spikes widely spaced
0000DAF1 F003 0004 E4               		dc.b $F0, 3, 0,	4, $E4
0000DAF6 F003 0004 FC               		dc.b $F0, 3, 0,	4, $FC
0000DAFB F003 0004 14               		dc.b $F0, 3, 0,	4, $14
0000DB00 06                         byte_D02A:	dc.b 6			; 6 spikes
0000DB01 F003 0004 C0               		dc.b $F0, 3, 0,	4, $C0
0000DB06 F003 0004 D8               		dc.b $F0, 3, 0,	4, $D8
0000DB0B F003 0004 F0               		dc.b $F0, 3, 0,	4, $F0
0000DB10 F003 0004 08               		dc.b $F0, 3, 0,	4, 8
0000DB15 F003 0004 20               		dc.b $F0, 3, 0,	4, $20
0000DB1A F003 0004 38               		dc.b $F0, 3, 0,	4, $38
0000DB1F 01                         byte_D049:	dc.b 1			; 1 spike facing sideways
0000DB20 FC0C 0000 F0               		dc.b $FC, $C, 0, 0, $F0
0000DB26 00                         		even
0000DB26 00                         		even
0000DB26                            
0000DB26                            ; ===========================================================================
0000DB26                            ; ---------------------------------------------------------------------------
0000DB26                            ; Object 3B - purple rock (GHZ)
0000DB26                            ; ---------------------------------------------------------------------------
0000DB26                            
0000DB26                            Obj3B:					; XREF: Obj_Index
0000DB26 7000                       		moveq	#0,d0
0000DB28 1028 0024                  		move.b	$24(a0),d0
0000DB2C 323B 0000                  		move.w	Obj3B_Index(pc,d0.w),d1
0000DB30 4EFB 1000                  		jmp	Obj3B_Index(pc,d1.w)
0000DB34                            ; ===========================================================================
0000DB34 0000                       Obj3B_Index:	dc.w Obj3B_Main-Obj3B_Index
0000DB36 0000                       		dc.w Obj3B_Solid-Obj3B_Index
0000DB38                            ; ===========================================================================
0000DB38                            
0000DB38                            Obj3B_Main:				; XREF: Obj3B_Index
0000DB38 5428 0024                  		addq.b	#2,$24(a0)
0000DB3C 217C 0000 0000 0004        		move.l	#Map_obj3B,4(a0)
0000DB44 317C 63D0 0002             		move.w	#$63D0,2(a0)
0000DB4A 117C 0004 0001             		move.b	#4,1(a0)
0000DB50 117C 0013 0019             		move.b	#$13,$19(a0)
0000DB56 117C 0004 0018             		move.b	#4,$18(a0)
0000DB5C                            
0000DB5C                            Obj3B_Solid:				; XREF: Obj3B_Index
0000DB5C 323C 001B                  		move.w	#$1B,d1
0000DB60 343C 0010                  		move.w	#$10,d2
0000DB64 363C 0010                  		move.w	#$10,d3
0000DB68 3828 0008                  		move.w	8(a0),d4
0000DB6C 6100 0000                  		bsr.w	SolidObject
0000DB70 6100 0000                  		bsr.w	DisplaySprite
0000DB74 3028 0008                  		move.w	8(a0),d0
0000DB78 0240 FF80                  		andi.w	#$FF80,d0
0000DB7C 3238 F700                  		move.w	($FFFFF700).w,d1
0000DB80 0441 0080                  		subi.w	#$80,d1
0000DB84 0241 FF80                  		andi.w	#$FF80,d1
0000DB88 9041                       		sub.w	d1,d0
0000DB8A 0C40 0280                  		cmpi.w	#$280,d0
0000DB8E 6200 0000                  		bhi.w	DeleteObject
0000DB92 4E75                       		rts
0000DB94                            ; ===========================================================================
0000DB94                            ; ---------------------------------------------------------------------------
0000DB94                            ; Object 49 - waterfall	sound effect (GHZ)
0000DB94                            ; ---------------------------------------------------------------------------
0000DB94                            
0000DB94                            Obj49:					; XREF: Obj_Index
0000DB94 7000                       		moveq	#0,d0
0000DB96 1028 0024                  		move.b	$24(a0),d0
0000DB9A 323B 0000                  		move.w	Obj49_Index(pc,d0.w),d1
0000DB9E 4EFB 1000                  		jmp	Obj49_Index(pc,d1.w)
0000DBA2                            ; ===========================================================================
0000DBA2 0000                       Obj49_Index:	dc.w Obj49_Main-Obj49_Index
0000DBA4 0000                       		dc.w Obj49_PlaySnd-Obj49_Index
0000DBA6                            ; ===========================================================================
0000DBA6                            
0000DBA6                            Obj49_Main:				; XREF: Obj49_Index
0000DBA6 5428 0024                  		addq.b	#2,$24(a0)
0000DBAA 117C 0004 0001             		move.b	#4,1(a0)
0000DBB0                            
0000DBB0                            Obj49_PlaySnd:				; XREF: Obj49_Index
0000DBB0 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000DBB4 0200 003F                  		andi.b	#$3F,d0
0000DBB8 6600                       		bne.s	Obj49_ChkDel
0000DBBA 303C 00D0                  		move.w	#$D0,d0
0000DBBE 4EB9 0000 147C             		jsr	(PlaySound_Special).l ;	play waterfall sound
0000DBC4                            
0000DBC4                            Obj49_ChkDel:
0000DBC4 3028 0008                  		move.w	8(a0),d0
0000DBC8 0240 FF80                  		andi.w	#$FF80,d0
0000DBCC 3238 F700                  		move.w	($FFFFF700).w,d1
0000DBD0 0441 0080                  		subi.w	#$80,d1
0000DBD4 0241 FF80                  		andi.w	#$FF80,d1
0000DBD8 9041                       		sub.w	d1,d0
0000DBDA 0C40 0280                  		cmpi.w	#$280,d0
0000DBDE 6200 0000                  		bhi.w	DeleteObject
0000DBE2 4E75                       		rts	
0000DBE4                            ; ===========================================================================
0000DBE4                            ; ---------------------------------------------------------------------------
0000DBE4                            ; Sprite mappings - purple rock	(GHZ)
0000DBE4                            ; ---------------------------------------------------------------------------
0000DBE4                            Map_obj3B:
0000DBE4                            	include "_maps\obj3B.asm"
0000DBE4                            ; ---------------------------------------------------------------------------
0000DBE4                            ; Sprite mappings - purple rock	(GHZ)
0000DBE4                            ; ---------------------------------------------------------------------------
0000DBE4 0000                       		dc.w byte_D110-Map_obj3B
0000DBE6 02                         byte_D110:	dc.b 2
0000DBE7 F00B 0000 E8               		dc.b $F0, $B, 0, 0, $E8
0000DBEC F00B 000C 00               		dc.b $F0, $B, 0, $C, 0
0000DBF2 00                         		even
0000DBF2 00                         		even
0000DBF2                            
0000DBF2                            ; ===========================================================================
0000DBF2                            ; ---------------------------------------------------------------------------
0000DBF2                            ; Object 3C - smashable	wall (GHZ, SLZ)
0000DBF2                            ; ---------------------------------------------------------------------------
0000DBF2                            
0000DBF2                            Obj3C:					; XREF: Obj_Index
0000DBF2 7000                       		moveq	#0,d0
0000DBF4 1028 0024                  		move.b	$24(a0),d0
0000DBF8 323B 0000                  		move.w	Obj3C_Index(pc,d0.w),d1
0000DBFC 4EBB 1000                  		jsr	Obj3C_Index(pc,d1.w)
0000DC00 6000 0000                  		bra.w	MarkObjGone
0000DC04                            ; ===========================================================================
0000DC04 0000                       Obj3C_Index:	dc.w Obj3C_Main-Obj3C_Index
0000DC06 0000                       		dc.w Obj3C_Solid-Obj3C_Index
0000DC08 0000                       		dc.w Obj3C_FragMove-Obj3C_Index
0000DC0A                            ; ===========================================================================
0000DC0A                            
0000DC0A                            Obj3C_Main:				; XREF: Obj3C_Index
0000DC0A 5428 0024                  		addq.b	#2,$24(a0)
0000DC0E 217C 0000 0000 0004        		move.l	#Map_obj3C,4(a0)
0000DC16 317C 450F 0002             		move.w	#$450F,2(a0)
0000DC1C 117C 0004 0001             		move.b	#4,1(a0)
0000DC22 117C 0010 0019             		move.b	#$10,$19(a0)
0000DC28 117C 0004 0018             		move.b	#4,$18(a0)
0000DC2E 1168 0028 001A             		move.b	$28(a0),$1A(a0)
0000DC34                            
0000DC34                            Obj3C_Solid:				; XREF: Obj3C_Index
0000DC34 3178 D010 0030             		move.w	($FFFFD010).w,$30(a0) ;	load Sonic's horizontal speed
0000DC3A 323C 001B                  		move.w	#$1B,d1
0000DC3E 343C 0020                  		move.w	#$20,d2
0000DC42 363C 0020                  		move.w	#$20,d3
0000DC46 3828 0008                  		move.w	8(a0),d4
0000DC4A 6100 0000                  		bsr.w	SolidObject
0000DC4E 0828 0005 0022             		btst	#5,$22(a0)
0000DC54 6600                       		bne.s	Obj3C_ChkRoll
0000DC56                            
0000DC56                            locret_D180:
0000DC56 4E75                       		rts
0000DC58                            ; ===========================================================================
0000DC58                            
0000DC58                            Obj3C_ChkRoll:				; XREF: Obj3C_Solid
0000DC58 4A38 FE19                                  tst.b   (Super_Sonic_flag).w
0000DC5C 6600                                       bne.s   ObjBreakeAnyways
0000DC5E 0C29 0002 001C             		cmpi.b	#2,$1C(a1)	; is Sonic rolling?
0000DC64 66F0                       		bne.s	locret_D180	; if not, branch
0000DC66 3028 0030                  		move.w	$30(a0),d0
0000DC6A 6A00                       		bpl.s	Obj3C_ChkSpeed
0000DC6C 4440                       		neg.w	d0
0000DC6E                            
0000DC6E                            Obj3C_ChkSpeed:
0000DC6E 0C40 0480                  		cmpi.w	#$480,d0	; is Sonic's speed $480 or higher?
0000DC72 65E2                       		bcs.s	locret_D180	; if not, branch
0000DC74                            ObjBreakeAnyways:		
0000DC74 3368 0030 0010             		move.w	$30(a0),$10(a1)
0000DC7A 5869 0008                  		addq.w	#4,8(a1)
0000DC7E 49F9 0000 0000             		lea	(Obj3C_FragSpd1).l,a4 ;	use fragments that move	right
0000DC84 3028 0008                  		move.w	8(a0),d0
0000DC88 B069 0008                  		cmp.w	8(a1),d0	; is Sonic to the right	of the block?
0000DC8C 6500                       		bcs.s	Obj3C_Smash	; if yes, branch
0000DC8E 5169 0008                  		subq.w	#8,8(a1)
0000DC92 49F9 0000 0000             		lea	(Obj3C_FragSpd2).l,a4 ;	use fragments that move	left
0000DC98                            
0000DC98                            Obj3C_Smash:
0000DC98 3369 0010 0014             		move.w	$10(a1),$14(a1)
0000DC9E 08A8 0005 0022             		bclr	#5,$22(a0)
0000DCA4 08A9 0005 0022             		bclr	#5,$22(a1)
0000DCAA 7207                       		moveq	#7,d1		; load 8 fragments
0000DCAC 343C 0070                  		move.w	#$70,d2
0000DCB0 6100                       		bsr.s	SmashObject
0000DCB2                            
0000DCB2                            Obj3C_FragMove:				; XREF: Obj3C_Index
0000DCB2 6100 0000                  		bsr.w	SpeedToPos
0000DCB6 0668 0070 0012             		addi.w	#$70,$12(a0)	; make fragment	fall faster
0000DCBC 6100 0000                  		bsr.w	DisplaySprite
0000DCC0 4A28 0001                  		tst.b	1(a0)
0000DCC4 6A00 0000                  		bpl.w	DeleteObject
0000DCC8 4E75                       		rts
0000DCCA                            
0000DCCA                            ; ---------------------------------------------------------------------------
0000DCCA                            ; Subroutine to	smash a	block (GHZ walls and MZ	blocks)
0000DCCA                            ; ---------------------------------------------------------------------------
0000DCCA                            
0000DCCA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DCCA                            
0000DCCA                            
0000DCCA                            SmashObject:				; XREF: Obj3C_Smash
0000DCCA 7000                       		moveq	#0,d0
0000DCCC 1028 001A                  		move.b	$1A(a0),d0
0000DCD0 D040                       		add.w	d0,d0
0000DCD2 2668 0004                  		movea.l	4(a0),a3
0000DCD6 D6F3 0000                  		adda.w	(a3,d0.w),a3
0000DCDA 524B                       		addq.w	#1,a3
0000DCDC 08E8 0005 0001             		bset	#5,1(a0)
0000DCE2 1810                       		move.b	0(a0),d4
0000DCE4 1A28 0001                  		move.b	1(a0),d5
0000DCE8 2248                       		movea.l	a0,a1
0000DCEA 6000                       		bra.s	Smash_LoadFrag
0000DCEC                            ; ===========================================================================
0000DCEC                            
0000DCEC                            Smash_Loop:
0000DCEC 6100 0000                  		bsr.w	SingleObjLoad
0000DCF0 6600                       		bne.s	Smash_PlaySnd
0000DCF2 5A4B                       		addq.w	#5,a3
0000DCF4                            
0000DCF4                            Smash_LoadFrag:				; XREF: SmashObject
0000DCF4 137C 0004 0024             		move.b	#4,$24(a1)
0000DCFA 1284                       		move.b	d4,0(a1)
0000DCFC 234B 0004                  		move.l	a3,4(a1)
0000DD00 1345 0001                  		move.b	d5,1(a1)
0000DD04 3368 0008 0008             		move.w	8(a0),8(a1)
0000DD0A 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000DD10 3368 0002 0002             		move.w	2(a0),2(a1)
0000DD16 1368 0018 0018             		move.b	$18(a0),$18(a1)
0000DD1C 1368 0019 0019             		move.b	$19(a0),$19(a1)
0000DD22 335C 0010                  		move.w	(a4)+,$10(a1)
0000DD26 335C 0012                  		move.w	(a4)+,$12(a1)
0000DD2A B3C8                       		cmpa.l	a0,a1
0000DD2C 6400                       		bcc.s	loc_D268
0000DD2E 2F08                       		move.l	a0,-(sp)
0000DD30 2049                       		movea.l	a1,a0
0000DD32 6100 0000                  		bsr.w	SpeedToPos
0000DD36 D568 0012                  		add.w	d2,$12(a0)
0000DD3A 205F                       		movea.l	(sp)+,a0
0000DD3C 6100 0000                  		bsr.w	DisplaySprite2
0000DD40                            
0000DD40                            loc_D268:
0000DD40 51C9 FFAA                  		dbf	d1,Smash_Loop
0000DD44                            
0000DD44                            Smash_PlaySnd:
0000DD44 303C 00CB                  		move.w	#$CB,d0
0000DD48 4EF9 0000 147C             		jmp	(PlaySound_Special).l ;	play smashing sound
0000DD4E                            ; End of function SmashObject
0000DD4E                            
0000DD4E                            ; ===========================================================================
0000DD4E                            ; Smashed block	fragment speeds
0000DD4E                            ;
0000DD4E 0400 FB00                  Obj3C_FragSpd1:	dc.w $400, $FB00	; x-move speed,	y-move speed
0000DD52 0600 FF00                  		dc.w $600, $FF00
0000DD56 0600 0100                  		dc.w $600, $100
0000DD5A 0400 0500                  		dc.w $400, $500
0000DD5E 0600 FA00                  		dc.w $600, $FA00
0000DD62 0800 FE00                  		dc.w $800, $FE00
0000DD66 0800 0200                  		dc.w $800, $200
0000DD6A 0600 0600                  		dc.w $600, $600
0000DD6E                            
0000DD6E FA00 FA00                  Obj3C_FragSpd2:	dc.w $FA00, $FA00
0000DD72 F800 FE00                  		dc.w $F800, $FE00
0000DD76 F800 0200                  		dc.w $F800, $200
0000DD7A FA00 0600                  		dc.w $FA00, $600
0000DD7E FC00 FB00                  		dc.w $FC00, $FB00
0000DD82 FA00 FF00                  		dc.w $FA00, $FF00
0000DD86 FA00 0100                  		dc.w $FA00, $100
0000DD8A FC00 0500                  		dc.w $FC00, $500
0000DD8E                            ; ---------------------------------------------------------------------------
0000DD8E                            ; Sprite mappings - smashable walls (GHZ, SLZ)
0000DD8E                            ; ---------------------------------------------------------------------------
0000DD8E                            Map_obj3C:
0000DD8E                            	include "_maps\obj3C.asm"
0000DD8E                            ; ---------------------------------------------------------------------------
0000DD8E                            ; Sprite mappings - smashable walls (GHZ, SLZ)
0000DD8E                            ; ---------------------------------------------------------------------------
0000DD8E 0000                       		dc.w byte_D2BC-Map_obj3C
0000DD90 0000                       		dc.w byte_D2E5-Map_obj3C
0000DD92 0000                       		dc.w byte_D30E-Map_obj3C
0000DD94 08                         byte_D2BC:	dc.b 8
0000DD95 E005 0000 F0               		dc.b $E0, 5, 0,	0, $F0
0000DD9A F005 0000 F0               		dc.b $F0, 5, 0,	0, $F0
0000DD9F 0005 0000 F0               		dc.b 0,	5, 0, 0, $F0
0000DDA4 1005 0000 F0               		dc.b $10, 5, 0,	0, $F0
0000DDA9 E005 0004 00               		dc.b $E0, 5, 0,	4, 0
0000DDAE F005 0004 00               		dc.b $F0, 5, 0,	4, 0
0000DDB3 0005 0004 00               		dc.b 0,	5, 0, 4, 0
0000DDB8 1005 0004 00               		dc.b $10, 5, 0,	4, 0
0000DDBD 08                         byte_D2E5:	dc.b 8
0000DDBE E005 0004 F0               		dc.b $E0, 5, 0,	4, $F0
0000DDC3 F005 0004 F0               		dc.b $F0, 5, 0,	4, $F0
0000DDC8 0005 0004 F0               		dc.b 0,	5, 0, 4, $F0
0000DDCD 1005 0004 F0               		dc.b $10, 5, 0,	4, $F0
0000DDD2 E005 0004 00               		dc.b $E0, 5, 0,	4, 0
0000DDD7 F005 0004 00               		dc.b $F0, 5, 0,	4, 0
0000DDDC 0005 0004 00               		dc.b 0,	5, 0, 4, 0
0000DDE1 1005 0004 00               		dc.b $10, 5, 0,	4, 0
0000DDE6 08                         byte_D30E:	dc.b 8
0000DDE7 E005 0004 F0               		dc.b $E0, 5, 0,	4, $F0
0000DDEC F005 0004 F0               		dc.b $F0, 5, 0,	4, $F0
0000DDF1 0005 0004 F0               		dc.b 0,	5, 0, 4, $F0
0000DDF6 1005 0004 F0               		dc.b $10, 5, 0,	4, $F0
0000DDFB E005 0008 00               		dc.b $E0, 5, 0,	8, 0
0000DE00 F005 0008 00               		dc.b $F0, 5, 0,	8, 0
0000DE05 0005 0008 00               		dc.b 0,	5, 0, 8, 0
0000DE0A 1005 0008 00               		dc.b $10, 5, 0,	8, 0
0000DE10 00                         		even
0000DE10 00                         		even
0000DE10                            
0000DE10                            ; ---------------------------------------------------------------------------
0000DE10                            ; Object code loading subroutine
0000DE10                            ; ---------------------------------------------------------------------------
0000DE10                            
0000DE10                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DE10                            
0000DE10                            
0000DE10                            ObjectsLoad:				; XREF: TitleScreen; et al
0000DE10 41F8 D000                  		lea	($FFFFD000).w,a0 ; set address for object RAM
0000DE14 7E7F                       		moveq	#$7F,d7
0000DE16 7000                       		moveq	#0,d0
0000DE18 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000DE1E 6400                       		bcc.s	loc_D362
0000DE20                            
0000DE20                            loc_D348:
0000DE20 1010                       		move.b	(a0),d0		; load object number from RAM
0000DE22 6700                       		beq.s	loc_D358
0000DE24 D040                       		add.w	d0,d0
0000DE26 D040                       		add.w	d0,d0
0000DE28 227B 0000                  		movea.l	Obj_Index-4(pc,d0.w),a1
0000DE2C 4E91                       		jsr	(a1)		; run the object's code
0000DE2E 7000                       		moveq	#0,d0
0000DE30                            
0000DE30                            loc_D358:
0000DE30 41E8 0040                  		lea	$40(a0),a0	; next object
0000DE34 51CF FFEA                  		dbf	d7,loc_D348
0000DE38 4E75                       		rts	
0000DE3A                            ; ===========================================================================
0000DE3A                            
0000DE3A                            loc_D362:
0000DE3A 0C38 000A D024             		cmpi.b	#$A,($FFFFD000+$24).w	; Has Sonic drowned?
0000DE40 67DE                       		beq.s	loc_D348				; If so, run objects a little longer
0000DE42 7E1F                       		moveq	#$1F,d7
0000DE44 61DA                       		bsr.s	loc_D348
0000DE46 7E5F                       		moveq	#$5F,d7
0000DE48                            
0000DE48                            loc_D368:
0000DE48 7000                       		moveq	#0,d0
0000DE4A 1010                       		move.b	(a0),d0
0000DE4C 6700                       		beq.s	loc_D378
0000DE4E 4A28 0001                  		tst.b	1(a0)
0000DE52 6A00                       		bpl.s	loc_D378
0000DE54 6100 0000                  		bsr.w	DisplaySprite
0000DE58                            
0000DE58                            loc_D378:
0000DE58 41E8 0040                  		lea	$40(a0),a0
0000DE5C                            
0000DE5C                            loc_D37C:
0000DE5C 51CF FFEA                  		dbf	d7,loc_D368
0000DE60 4E75                       		rts	
0000DE62                            ; End of function ObjectsLoad
0000DE62                            
0000DE62                            ; ===========================================================================
0000DE62                            ; ---------------------------------------------------------------------------
0000DE62                            ; Object pointers
0000DE62                            ; ---------------------------------------------------------------------------
0000DE62                            Obj_Index:
0000DE62                            	include "_inc\Object pointers.asm"
0000DE62                            ; ---------------------------------------------------------------------------
0000DE62                            ; Object pointers
0000DE62                            ; ---------------------------------------------------------------------------
0000DE62 0000 0000 0000 0000 0000+  	dc.l Obj01, ObjectFall,	ObjectFall, ObjectFall
0000DE72 0000 0000 0000 0000 0000+  	dc.l SpinDash_dust, speedboosters, ObjectFall, Obj08
0000DE82 0000 0000 0000 0000 0000+  	dc.l Obj09, Obj0A, Obj0B, Obj0C
0000DE92 0000 0000 0000 B0FA 0000+  	dc.l Obj0D, Obj0E, Obj0F, Obj10
0000DEA2 0000 7DB6 0000 0000 0000+  	dc.l Obj11, Obj12, Obj13, Obj14
0000DEB2 0000 83DC 0000 0000 0000+  	dc.l Obj15, Obj16, Obj17, Obj18
0000DEC2 0000 8C2A 0000 8C92 0000+  	dc.l Obj19, Obj1A, Obj1B, Obj1C
0000DED2 0000 92DC 0000 95CA 0000+  	dc.l Obj1D, Obj1E, Obj1F, Obj20
0000DEE2 0000 0000 0000 A24E 0000+  	dc.l Obj21, Obj22, Obj23, Obj24
0000DEF2 0000 A590 0000 ABBE 0000+  	dc.l Obj25, Obj26, Obj27, Obj28
0000DF02 0000 9E86 0000 93B2 0000+  	dc.l Obj29, Obj2A, Obj2B, Obj2C
0000DF12 0000 B788 0000 ADBC 0000+  	dc.l Obj2D, Obj2E, Obj2F, Obj30
0000DF22 0000 C15A 0000 C808 0000+  	dc.l Obj31, Obj32, Obj33, Obj34
0000DF32 0000 BCBE 0000 D8F8 0000+  	dc.l Obj35, Obj36, Obj37, Obj38
0000DF42 0000 CF8E 0000 D048 0000+  	dc.l Obj39, Obj3A, Obj3B, Obj3C
0000DF52 0000 0000 0000 0000 0000+  	dc.l Obj3D, Obj3E, Obj3F, Obj40
0000DF62 0000 0000 0000 0000 0000+  	dc.l Obj41, Obj42, Obj43, Obj44
0000DF72 0000 C476 0000 0000 0000+  	dc.l Obj45, Obj46, Obj47, Obj48
0000DF82 0000 DB94 0000 0000 0000+  	dc.l Obj49, Obj4A, Obj4B, Obj4C
0000DF92 0000 0000 0000 0000 0000+  	dc.l Obj4D, Obj4E, Obj4F, Obj50
0000DFA2 0000 0000 0000 0000 0000+  	dc.l Obj51, Obj52, Obj53, Obj54
0000DFB2 0000 0000 0000 0000 0000+  	dc.l Obj55, Obj56, Obj57, Obj58
0000DFC2 0000 0000 0000 0000 0000+  	dc.l Obj59, Obj5A, Obj5B, Obj5C
0000DFD2 0000 0000 0000 0000 0000+  	dc.l Obj5D, Obj5E, Obj5F, Obj60
0000DFE2 0000 0000 0000 0000 0000+  	dc.l Obj61, Obj62, Obj63, Obj64
0000DFF2 0000 0000 0000 0000 0000+  	dc.l Obj65, Obj66, Obj67, Obj68
0000E002 0000 0000 0000 0000 0000+  	dc.l Obj69, Obj6A, Obj6B, Obj6C
0000E012 0000 0000 0000 0000 0000+  	dc.l Obj6D, Obj6E, Obj6F, Obj70
0000E022 0000 0000 0000 0000 0000+  	dc.l Obj71, Obj72, Obj73, Obj74
0000E032 0000 0000 0000 0000 0000+  	dc.l Obj75, Obj76, Obj77, Obj78
0000E042 0000 0000 0000 0000 0000+  	dc.l Obj79, Obj7A, Obj7B, Obj7C
0000E052 0000 0000 0000 D282 0000+  	dc.l Obj7D, Obj7E, Obj7F, Obj80
0000E062 0000 59A8 0000 0000 0000+  	dc.l Obj81, Obj82, Obj83, Obj84
0000E072 0000 0000 0000 0000 0000+  	dc.l Obj85, Obj86, Obj87, Obj88
0000E082 0000 6062 0000 0000 0000+  	dc.l Obj89, Obj8A, Obj8B, Obj8C
0000E082 0000 6062 0000 0000 0000+  	dc.l Obj89, Obj8A, Obj8B, Obj8C
0000E092                            
0000E092                            ; ---------------------------------------------------------------------------
0000E092                            ; Subroutine to	make an	object fall downwards, increasingly fast
0000E092                            ; ---------------------------------------------------------------------------
0000E092                            
0000E092                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E092                            
0000E092                            
0000E092                            ObjectFall:
0000E092 2428 0008                  		move.l	8(a0),d2
0000E096 2628 000C                  		move.l	$C(a0),d3
0000E09A 3028 0010                  		move.w	$10(a0),d0
0000E09E 48C0                       		ext.l	d0
0000E0A0 E180                       		asl.l	#8,d0
0000E0A2 D480                       		add.l	d0,d2
0000E0A4 3028 0012                  		move.w	$12(a0),d0
0000E0A8 0668 0038 0012             		addi.w	#$38,$12(a0)	; increase vertical speed
0000E0AE 48C0                       		ext.l	d0
0000E0B0 E180                       		asl.l	#8,d0
0000E0B2 D680                       		add.l	d0,d3
0000E0B4 2142 0008                  		move.l	d2,8(a0)
0000E0B8 2143 000C                  		move.l	d3,$C(a0)
0000E0BC 4E75                       		rts	
0000E0BE                            ; End of function ObjectFall
0000E0BE                            
0000E0BE                            ; ---------------------------------------------------------------------------
0000E0BE                            ; Subroutine translating object	speed to update	object position
0000E0BE                            ; ---------------------------------------------------------------------------
0000E0BE                            
0000E0BE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E0BE                            
0000E0BE                            
0000E0BE                            SpeedToPos:
0000E0BE 2428 0008                  		move.l	8(a0),d2
0000E0C2 2628 000C                  		move.l	$C(a0),d3
0000E0C6 3028 0010                  		move.w	$10(a0),d0	; load horizontal speed
0000E0CA 48C0                       		ext.l	d0
0000E0CC E180                       		asl.l	#8,d0		; multiply speed by $100
0000E0CE D480                       		add.l	d0,d2		; add to x-axis	position
0000E0D0 3028 0012                  		move.w	$12(a0),d0	; load vertical	speed
0000E0D4 48C0                       		ext.l	d0
0000E0D6 E180                       		asl.l	#8,d0		; multiply by $100
0000E0D8 D680                       		add.l	d0,d3		; add to y-axis	position
0000E0DA 2142 0008                  		move.l	d2,8(a0)	; update x-axis	position
0000E0DE 2143 000C                  		move.l	d3,$C(a0)	; update y-axis	position
0000E0E2 4E75                       		rts	
0000E0E4                            ; End of function SpeedToPos
0000E0E4                            
0000E0E4                            ; ---------------------------------------------------------------------------
0000E0E4                            ; Subroutine to	display	a sprite/object, when a0 is the	object RAM
0000E0E4                            ; ---------------------------------------------------------------------------
0000E0E4                            
0000E0E4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E0E4                            
0000E0E4                            
0000E0E4                            DisplaySprite:
0000E0E4 43F8 AC00                  		lea	($FFFFAC00).w,a1
0000E0E8 3028 0018                  		move.w	$18(a0),d0
0000E0EC E248                       		lsr.w	#1,d0
0000E0EE 0240 0380                  		andi.w	#$380,d0
0000E0F2 D2C0                       		adda.w	d0,a1
0000E0F4 0C51 007E                  		cmpi.w	#$7E,(a1)
0000E0F8 6400                       		bcc.s	locret_D620
0000E0FA 5451                       		addq.w	#2,(a1)
0000E0FC D2D1                       		adda.w	(a1),a1
0000E0FE 3288                       		move.w	a0,(a1)
0000E100                            
0000E100                            locret_D620:
0000E100 4E75                       		rts	
0000E102                            ; End of function DisplaySprite
0000E102                            
0000E102                            ; ---------------------------------------------------------------------------
0000E102                            ; Subroutine to	display	a 2nd sprite/object, when a1 is	the object RAM
0000E102                            ; ---------------------------------------------------------------------------
0000E102                            
0000E102                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E102                            
0000E102                            
0000E102                            DisplaySprite2:
0000E102 45F8 AC00                  		lea	($FFFFAC00).w,a2
0000E106 3029 0018                  		move.w	$18(a1),d0
0000E10A E248                       		lsr.w	#1,d0
0000E10C 0240 0380                  		andi.w	#$380,d0
0000E110 D4C0                       		adda.w	d0,a2
0000E112 0C52 007E                  		cmpi.w	#$7E,(a2)
0000E116 6400                       		bcc.s	locret_D63E
0000E118 5452                       		addq.w	#2,(a2)
0000E11A D4D2                       		adda.w	(a2),a2
0000E11C 3489                       		move.w	a1,(a2)
0000E11E                            
0000E11E                            locret_D63E:
0000E11E 4E75                       		rts
0000E120                            ; End of function DisplaySprite2
0000E120                            
0000E120                            ; ---------------------------------------------------------------------------
0000E120                            ; Subroutine to	delete an object
0000E120                            ; ---------------------------------------------------------------------------
0000E120                            
0000E120                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E120                            
0000E120                            
0000E120                            DeleteObject:
0000E120 2248                       		movea.l	a0,a1
0000E122                            
0000E122                            DeleteObject2:
0000E122 7200                       		moveq	#0,d1
0000E124 700F                       		moveq	#$F,d0
0000E126                            
0000E126                            loc_D646:
0000E126 22C1                       		move.l	d1,(a1)+	; clear	the object RAM
0000E128 51C8 FFFC                  		dbf	d0,loc_D646	; repeat $F times (length of object RAM)
0000E12C 4E75                       		rts
0000E12E                            ; End of function DeleteObject
0000E12E                            
0000E12E                            ; ===========================================================================
0000E12E 0000 0000                  BldSpr_ScrPos:	dc.l 0			; blank
0000E132 00FF F700                  		dc.l $FFF700		; main screen x-position
0000E136 00FF F708                  		dc.l $FFF708		; background x-position	1
0000E13A 00FF F718                  		dc.l $FFF718		; background x-position	2
0000E13E                            ; ---------------------------------------------------------------------------
0000E13E                            ; Subroutine to	convert	mappings (etc) to proper Megadrive sprites
0000E13E                            ; ---------------------------------------------------------------------------
0000E13E                            
0000E13E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E13E                            
0000E13E                            
0000E13E                            BuildSprites:				; XREF: TitleScreen; et al
0000E13E 45F8 F800                  		lea	($FFFFF800).w,a2 ; set address for sprite table
0000E142 7A00                       		moveq	#0,d5
0000E144 49F8 AC00                  		lea	($FFFFAC00).w,a4
0000E148 7E07                       		moveq	#7,d7
0000E14A                            
0000E14A                            loc_D66A:
0000E14A 4A54                       		tst.w	(a4)
0000E14C 6700 0000                  		beq.w	loc_D72E
0000E150 7C02                       		moveq	#2,d6
0000E152                            
0000E152                            loc_D672:
0000E152 3074 6000                  		movea.w	(a4,d6.w),a0
0000E156 4A10                       		tst.b	(a0)
0000E158 6700 0000                  		beq.w	loc_D726
0000E15C 08A8 0007 0001             		bclr	#7,1(a0)
0000E162 1028 0001                  		move.b	1(a0),d0
0000E166 1800                       		move.b	d0,d4
0000E168 0240 000C                  		andi.w	#$C,d0
0000E16C 6700                       		beq.s	loc_D6DE
0000E16E 227B 00BE                  		movea.l	BldSpr_ScrPos(pc,d0.w),a1
0000E172 7000                       		moveq	#0,d0
0000E174 1028 0019                  		move.b	$19(a0),d0
0000E178 3628 0008                  		move.w	8(a0),d3
0000E17C 9651                       		sub.w	(a1),d3
0000E17E 3203                       		move.w	d3,d1
0000E180 D240                       		add.w	d0,d1
0000E182 6B00 0000                  		bmi.w	loc_D726
0000E186 3203                       		move.w	d3,d1
0000E188 9240                       		sub.w	d0,d1
0000E18A 0C41 0140                  		cmpi.w	#$140,d1
0000E18E 6C00                       		bge.s	loc_D726
0000E190 0643 0080                  		addi.w	#$80,d3
0000E194 0804 0004                  		btst	#4,d4
0000E198 6700                       		beq.s	loc_D6E8
0000E19A 7000                       		moveq	#0,d0
0000E19C 1028 0016                  		move.b	$16(a0),d0
0000E1A0 3428 000C                  		move.w	$C(a0),d2
0000E1A4 9469 0004                  		sub.w	4(a1),d2
0000E1A8 3202                       		move.w	d2,d1
0000E1AA D240                       		add.w	d0,d1
0000E1AC 6B00                       		bmi.s	loc_D726
0000E1AE 3202                       		move.w	d2,d1
0000E1B0 9240                       		sub.w	d0,d1
0000E1B2 0C41 00E0                  		cmpi.w	#$E0,d1
0000E1B6 6C00                       		bge.s	loc_D726
0000E1B8 0642 0080                  		addi.w	#$80,d2
0000E1BC 6000                       		bra.s	loc_D700
0000E1BE                            ; ===========================================================================
0000E1BE                            
0000E1BE                            loc_D6DE:
0000E1BE 3428 000A                  		move.w	$A(a0),d2
0000E1C2 3628 0008                  		move.w	8(a0),d3
0000E1C6 6000                       		bra.s	loc_D700
0000E1C8                            ; ===========================================================================
0000E1C8                            
0000E1C8                            loc_D6E8:
0000E1C8 3428 000C                  		move.w	$C(a0),d2
0000E1CC 9469 0004                  		sub.w	4(a1),d2
0000E1D0 0642 0080                  		addi.w	#$80,d2
0000E1D4 0C42 0060                  		cmpi.w	#$60,d2
0000E1D8 6500                       		bcs.s	loc_D726
0000E1DA 0C42 0180                  		cmpi.w	#$180,d2
0000E1DE 6400                       		bcc.s	loc_D726
0000E1E0                            
0000E1E0                            loc_D700:
0000E1E0 2268 0004                  		movea.l	4(a0),a1
0000E1E4 7200                       		moveq	#0,d1
0000E1E6 0804 0005                  		btst	#5,d4
0000E1EA 6600                       		bne.s	loc_D71C
0000E1EC 1228 001A                  		move.b	$1A(a0),d1
0000E1F0 D241                       		add.w	d1,d1					; MJ: changed from byte to word (we want more than 7F sprites)
0000E1F2 D2F1 1000                  		adda.w	(a1,d1.w),a1
0000E1F6 7200                       		moveq	#$00,d1					; MJ: clear d1 (because of our byte to word change)
0000E1F8 1219                       		move.b	(a1)+,d1
0000E1FA 5301                       		subq.b	#1,d1
0000E1FC 6B00                       		bmi.s	loc_D720
0000E1FE                            
0000E1FE                            loc_D71C:
0000E1FE 6100 0000                  		bsr.w	sub_D750
0000E202                            
0000E202                            loc_D720:
0000E202 08E8 0007 0001             		bset	#7,1(a0)
0000E208                            
0000E208                            loc_D726:
0000E208 5446                       		addq.w	#2,d6
0000E20A 5554                       		subq.w	#2,(a4)
0000E20C 6600 FF44                  		bne.w	loc_D672
0000E210                            
0000E210                            loc_D72E:
0000E210 49EC 0080                  		lea	$80(a4),a4
0000E214 51CF FF34                  		dbf	d7,loc_D66A
0000E218 11C5 F62C                  		move.b	d5,($FFFFF62C).w
0000E21C 0C05 0050                  		cmpi.b	#$50,d5
0000E220 6700                       		beq.s	loc_D748
0000E222 24BC 0000 0000             		move.l	#0,(a2)
0000E228 4E75                       		rts	
0000E22A                            ; ===========================================================================
0000E22A                            
0000E22A                            loc_D748:
0000E22A 157C 0000 FFFB             		move.b	#0,-5(a2)
0000E230 4E75                       		rts	
0000E232                            ; End of function BuildSprites
0000E232                            
0000E232                            
0000E232                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E232                            
0000E232                            
0000E232                            sub_D750:				; XREF: BuildSprites
0000E232 3668 0002                  		movea.w	2(a0),a3
0000E236 0804 0000                  		btst	#0,d4
0000E23A 6600                       		bne.s	loc_D796
0000E23C 0804 0001                  		btst	#1,d4
0000E240 6600 0000                  		bne.w	loc_D7E4
0000E244                            ; End of function sub_D750
0000E244                            
0000E244                            
0000E244                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E244                            
0000E244                            
0000E244                            sub_D762:				; XREF: sub_D762; SS_ShowLayout
0000E244 0C05 0050                  		cmpi.b	#$50,d5
0000E248 6700                       		beq.s	locret_D794
0000E24A 1019                       		move.b	(a1)+,d0
0000E24C 4880                       		ext.w	d0
0000E24E D042                       		add.w	d2,d0
0000E250 34C0                       		move.w	d0,(a2)+
0000E252 14D9                       		move.b	(a1)+,(a2)+
0000E254 5205                       		addq.b	#1,d5
0000E256 14C5                       		move.b	d5,(a2)+
0000E258 1019                       		move.b	(a1)+,d0
0000E25A E148                       		lsl.w	#8,d0
0000E25C 1019                       		move.b	(a1)+,d0
0000E25E D04B                       		add.w	a3,d0
0000E260 34C0                       		move.w	d0,(a2)+
0000E262 1019                       		move.b	(a1)+,d0
0000E264 4880                       		ext.w	d0
0000E266 D043                       		add.w	d3,d0
0000E268 0240 01FF                  		andi.w	#$1FF,d0
0000E26C 6600                       		bne.s	loc_D78E
0000E26E 5240                       		addq.w	#1,d0
0000E270                            
0000E270                            loc_D78E:
0000E270 34C0                       		move.w	d0,(a2)+
0000E272 51C9 FFD0                  		dbf	d1,sub_D762
0000E276                            
0000E276                            locret_D794:
0000E276 4E75                       		rts	
0000E278                            ; End of function sub_D762
0000E278                            
0000E278                            ; ===========================================================================
0000E278                            
0000E278                            loc_D796:
0000E278 0804 0001                  		btst	#1,d4
0000E27C 6600 0000                  		bne.w	loc_D82A
0000E280                            
0000E280                            loc_D79E:
0000E280 0C05 0050                  		cmpi.b	#$50,d5
0000E284 6700                       		beq.s	locret_D7E2
0000E286 1019                       		move.b	(a1)+,d0
0000E288 4880                       		ext.w	d0
0000E28A D042                       		add.w	d2,d0
0000E28C 34C0                       		move.w	d0,(a2)+
0000E28E 1819                       		move.b	(a1)+,d4
0000E290 14C4                       		move.b	d4,(a2)+
0000E292 5205                       		addq.b	#1,d5
0000E294 14C5                       		move.b	d5,(a2)+
0000E296 1019                       		move.b	(a1)+,d0
0000E298 E148                       		lsl.w	#8,d0
0000E29A 1019                       		move.b	(a1)+,d0
0000E29C D04B                       		add.w	a3,d0
0000E29E 0A40 0800                  		eori.w	#$800,d0
0000E2A2 34C0                       		move.w	d0,(a2)+
0000E2A4 1019                       		move.b	(a1)+,d0
0000E2A6 4880                       		ext.w	d0
0000E2A8 4440                       		neg.w	d0
0000E2AA D804                       		add.b	d4,d4
0000E2AC 0244 0018                  		andi.w	#$18,d4
0000E2B0 5044                       		addq.w	#8,d4
0000E2B2 9044                       		sub.w	d4,d0
0000E2B4 D043                       		add.w	d3,d0
0000E2B6 0240 01FF                  		andi.w	#$1FF,d0
0000E2BA 6600                       		bne.s	loc_D7DC
0000E2BC 5240                       		addq.w	#1,d0
0000E2BE                            
0000E2BE                            loc_D7DC:
0000E2BE 34C0                       		move.w	d0,(a2)+
0000E2C0 51C9 FFBE                  		dbf	d1,loc_D79E
0000E2C4                            
0000E2C4                            locret_D7E2:
0000E2C4 4E75                       		rts	
0000E2C6                            ; ===========================================================================
0000E2C6                            
0000E2C6                            loc_D7E4:				; XREF: sub_D750
0000E2C6 0C05 0050                  		cmpi.b	#$50,d5
0000E2CA 6700                       		beq.s	locret_D828
0000E2CC 1019                       		move.b	(a1)+,d0
0000E2CE 1811                       		move.b	(a1),d4
0000E2D0 4880                       		ext.w	d0
0000E2D2 4440                       		neg.w	d0
0000E2D4 E70C                       		lsl.b	#3,d4
0000E2D6 0244 0018                  		andi.w	#$18,d4
0000E2DA 5044                       		addq.w	#8,d4
0000E2DC 9044                       		sub.w	d4,d0
0000E2DE D042                       		add.w	d2,d0
0000E2E0 34C0                       		move.w	d0,(a2)+
0000E2E2 14D9                       		move.b	(a1)+,(a2)+
0000E2E4 5205                       		addq.b	#1,d5
0000E2E6 14C5                       		move.b	d5,(a2)+
0000E2E8 1019                       		move.b	(a1)+,d0
0000E2EA E148                       		lsl.w	#8,d0
0000E2EC 1019                       		move.b	(a1)+,d0
0000E2EE D04B                       		add.w	a3,d0
0000E2F0 0A40 1000                  		eori.w	#$1000,d0
0000E2F4 34C0                       		move.w	d0,(a2)+
0000E2F6 1019                       		move.b	(a1)+,d0
0000E2F8 4880                       		ext.w	d0
0000E2FA D043                       		add.w	d3,d0
0000E2FC 0240 01FF                  		andi.w	#$1FF,d0
0000E300 6600                       		bne.s	loc_D822
0000E302 5240                       		addq.w	#1,d0
0000E304                            
0000E304                            loc_D822:
0000E304 34C0                       		move.w	d0,(a2)+
0000E306 51C9 FFBE                  		dbf	d1,loc_D7E4
0000E30A                            
0000E30A                            locret_D828:
0000E30A 4E75                       		rts	
0000E30C                            ; ===========================================================================
0000E30C                            
0000E30C                            loc_D82A:
0000E30C 0C05 0050                  		cmpi.b	#$50,d5
0000E310 6700                       		beq.s	locret_D87C
0000E312 1019                       		move.b	(a1)+,d0
0000E314 1811                       		move.b	(a1),d4
0000E316 4880                       		ext.w	d0
0000E318 4440                       		neg.w	d0
0000E31A E70C                       		lsl.b	#3,d4
0000E31C 0244 0018                  		andi.w	#$18,d4
0000E320 5044                       		addq.w	#8,d4
0000E322 9044                       		sub.w	d4,d0
0000E324 D042                       		add.w	d2,d0
0000E326 34C0                       		move.w	d0,(a2)+
0000E328 1819                       		move.b	(a1)+,d4
0000E32A 14C4                       		move.b	d4,(a2)+
0000E32C 5205                       		addq.b	#1,d5
0000E32E 14C5                       		move.b	d5,(a2)+
0000E330 1019                       		move.b	(a1)+,d0
0000E332 E148                       		lsl.w	#8,d0
0000E334 1019                       		move.b	(a1)+,d0
0000E336 D04B                       		add.w	a3,d0
0000E338 0A40 1800                  		eori.w	#$1800,d0
0000E33C 34C0                       		move.w	d0,(a2)+
0000E33E 1019                       		move.b	(a1)+,d0
0000E340 4880                       		ext.w	d0
0000E342 4440                       		neg.w	d0
0000E344 D804                       		add.b	d4,d4
0000E346 0244 0018                  		andi.w	#$18,d4
0000E34A 5044                       		addq.w	#8,d4
0000E34C 9044                       		sub.w	d4,d0
0000E34E D043                       		add.w	d3,d0
0000E350 0240 01FF                  		andi.w	#$1FF,d0
0000E354 6600                       		bne.s	loc_D876
0000E356 5240                       		addq.w	#1,d0
0000E358                            
0000E358                            loc_D876:
0000E358 34C0                       		move.w	d0,(a2)+
0000E35A 51C9 FFB0                  		dbf	d1,loc_D82A
0000E35E                            
0000E35E                            locret_D87C:
0000E35E 4E75                       		rts	
0000E360                            ; ---------------------------------------------------------------------------
0000E360                            ; Subroutine to	check if an object is on the screen
0000E360                            ; ---------------------------------------------------------------------------
0000E360                            
0000E360                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E360                            
0000E360                            
0000E360                            ChkObjOnScreen:
0000E360 3028 0008                  		move.w	8(a0),d0	; get object x-position
0000E364 9078 F700                  		sub.w	($FFFFF700).w,d0 ; subtract screen x-position
0000E368 6B00                       		bmi.s	NotOnScreen
0000E36A 0C40 0140                  		cmpi.w	#320,d0		; is object on the screen?
0000E36E 6C00                       		bge.s	NotOnScreen	; if not, branch
0000E370                            
0000E370 3228 000C                  		move.w	$C(a0),d1	; get object y-position
0000E374 9278 F704                  		sub.w	($FFFFF704).w,d1 ; subtract screen y-position
0000E378 6B00                       		bmi.s	NotOnScreen
0000E37A 0C41 00E0                  		cmpi.w	#224,d1		; is object on the screen?
0000E37E 6C00                       		bge.s	NotOnScreen	; if not, branch
0000E380                            
0000E380 7000                       		moveq	#0,d0		; set flag to 0
0000E382 4E75                       		rts	
0000E384                            ; ===========================================================================
0000E384                            
0000E384                            NotOnScreen:				; XREF: ChkObjOnScreen
0000E384 7001                       		moveq	#1,d0		; set flag to 1
0000E386 4E75                       		rts	
0000E388                            ; End of function ChkObjOnScreen
0000E388                            
0000E388                            
0000E388                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E388                            
0000E388                            
0000E388                            ChkObjOnScreen2:
0000E388 7200                       		moveq	#0,d1
0000E38A 1228 0019                  		move.b	$19(a0),d1
0000E38E 3028 0008                  		move.w	8(a0),d0
0000E392 9078 F700                  		sub.w	($FFFFF700).w,d0
0000E396 D041                       		add.w	d1,d0
0000E398 6B00                       		bmi.s	NotOnScreen2
0000E39A D241                       		add.w	d1,d1
0000E39C 9041                       		sub.w	d1,d0
0000E39E 0C40 0140                  		cmpi.w	#320,d0
0000E3A2 6C00                       		bge.s	NotOnScreen2
0000E3A4                            
0000E3A4 3228 000C                  		move.w	$C(a0),d1
0000E3A8 9278 F704                  		sub.w	($FFFFF704).w,d1
0000E3AC 6B00                       		bmi.s	NotOnScreen2
0000E3AE 0C41 00E0                  		cmpi.w	#224,d1
0000E3B2 6C00                       		bge.s	NotOnScreen2
0000E3B4                            
0000E3B4 7000                       		moveq	#0,d0
0000E3B6 4E75                       		rts	
0000E3B8                            ; ===========================================================================
0000E3B8                            
0000E3B8                            NotOnScreen2:				; XREF: ChkObjOnScreen2
0000E3B8 7001                       		moveq	#1,d0
0000E3BA 4E75                       		rts	
0000E3BC                            ; End of function ChkObjOnScreen2
0000E3BC                            
0000E3BC                            ; ---------------------------------------------------------------------------
0000E3BC                            ; Subroutine to	load a level's objects
0000E3BC                            ; ---------------------------------------------------------------------------
0000E3BC                            
0000E3BC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E3BC                            
0000E3BC                            
0000E3BC                            ObjPosLoad:				; XREF: Level; et al
0000E3BC 7000                       		moveq	#0,d0
0000E3BE 1038 F76C                  		move.b	($FFFFF76C).w,d0
0000E3C2 303B 0000                  		move.w	OPL_Index(pc,d0.w),d0
0000E3C6 4EFB 0000                  		jmp	OPL_Index(pc,d0.w)
0000E3CA                            ; End of function ObjPosLoad
0000E3CA                            
0000E3CA                            ; ===========================================================================
0000E3CA 0000                       OPL_Index:	dc.w OPL_Main-OPL_Index
0000E3CC 0000                       		dc.w OPL_Next-OPL_Index
0000E3CE                            ; ===========================================================================
0000E3CE                            
0000E3CE                            OPL_Main:				; XREF: OPL_Index
0000E3CE 5438 F76C                  		addq.b	#2,($FFFFF76C).w
0000E3D2 3038 FE10                  		move.w	($FFFFFE10).w,d0
0000E3D6 ED08                       		lsl.b	#6,d0
0000E3D8 E848                       		lsr.w	#4,d0
0000E3DA 41F9 0000 0000             		lea	(ObjPos_Index).l,a0
0000E3E0 2248                       		movea.l	a0,a1
0000E3E2 D0F0 0000                  		adda.w	(a0,d0.w),a0
0000E3E6 21C8 F770                  		move.l	a0,($FFFFF770).w
0000E3EA 21C8 F774                  		move.l	a0,($FFFFF774).w
0000E3EE D2F1 0002                  		adda.w	2(a1,d0.w),a1
0000E3F2 21C9 F778                  		move.l	a1,($FFFFF778).w
0000E3F6 21C9 F77C                  		move.l	a1,($FFFFF77C).w
0000E3FA 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000E3FE 34FC 0101                  		move.w	#$101,(a2)+
0000E402 303C 005E                  		move.w	#$5E,d0
0000E406                            
0000E406                            OPL_ClrList:
0000E406 429A                       		clr.l	(a2)+
0000E408 51C8 FFFC                  		dbf	d0,OPL_ClrList	; clear	pre-destroyed object list
0000E40C                            
0000E40C 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000E410 7400                       		moveq	#0,d2
0000E412 3C38 F700                  		move.w	($FFFFF700).w,d6
0000E416 0446 0080                  		subi.w	#$80,d6
0000E41A 6400                       		bcc.s	loc_D93C
0000E41C 7C00                       		moveq	#0,d6
0000E41E                            
0000E41E                            loc_D93C:
0000E41E 0246 FF80                  		andi.w	#$FF80,d6
0000E422 2078 F770                  		movea.l	($FFFFF770).w,a0
0000E426                            
0000E426                            loc_D944:
0000E426 BC50                       		cmp.w	(a0),d6
0000E428 6300                       		bls.s	loc_D956
0000E42A 4A28 0004                  		tst.b	4(a0)
0000E42E 6A00                       		bpl.s	loc_D952
0000E430 1412                       		move.b	(a2),d2
0000E432 5212                       		addq.b	#1,(a2)
0000E434                            
0000E434                            loc_D952:
0000E434 5C48                       		addq.w	#6,a0
0000E436 60EE                       		bra.s	loc_D944
0000E438                            ; ===========================================================================
0000E438                            
0000E438                            loc_D956:
0000E438 21C8 F770                  		move.l	a0,($FFFFF770).w
0000E43C 2078 F774                  		movea.l	($FFFFF774).w,a0
0000E440 0446 0080                  		subi.w	#$80,d6
0000E444 6500                       		bcs.s	loc_D976
0000E446                            
0000E446                            loc_D964:
0000E446 BC50                       		cmp.w	(a0),d6
0000E448 6300                       		bls.s	loc_D976
0000E44A 4A28 0004                  		tst.b	4(a0)
0000E44E 6A00                       		bpl.s	loc_D972
0000E450 522A 0001                  		addq.b	#1,1(a2)
0000E454                            
0000E454                            loc_D972:
0000E454 5C48                       		addq.w	#6,a0
0000E456 60EE                       		bra.s	loc_D964
0000E458                            ; ===========================================================================
0000E458                            
0000E458                            loc_D976:
0000E458 21C8 F774                  		move.l	a0,($FFFFF774).w
0000E45C 31FC FFFF F76E             		move.w	#-1,($FFFFF76E).w
0000E462                            
0000E462                            OPL_Next:				; XREF: OPL_Index
0000E462 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000E466 7400                       		moveq	#0,d2
0000E468 3C38 F700                  		move.w	($FFFFF700).w,d6
0000E46C 0246 FF80                  		andi.w	#$FF80,d6
0000E470 BC78 F76E                  		cmp.w	($FFFFF76E).w,d6
0000E474 6700 0000                  		beq.w	locret_DA3A
0000E478 6C00                       		bge.s	loc_D9F6
0000E47A 31C6 F76E                  		move.w	d6,($FFFFF76E).w
0000E47E 2078 F774                  		movea.l	($FFFFF774).w,a0
0000E482 0446 0080                  		subi.w	#$80,d6
0000E486 6500                       		bcs.s	loc_D9D2
0000E488                            
0000E488                            loc_D9A6:
0000E488 BC68 FFFA                  		cmp.w	-6(a0),d6
0000E48C 6C00                       		bge.s	loc_D9D2
0000E48E 5D48                       		subq.w	#6,a0
0000E490 4A28 0004                  		tst.b	4(a0)
0000E494 6A00                       		bpl.s	loc_D9BC
0000E496 532A 0001                  		subq.b	#1,1(a2)
0000E49A 142A 0001                  		move.b	1(a2),d2
0000E49E                            
0000E49E                            loc_D9BC:
0000E49E 6100 0000                  		bsr.w	loc_DA3C
0000E4A2 6600                       		bne.s	loc_D9C6
0000E4A4 5D48                       		subq.w	#6,a0
0000E4A6 60E0                       		bra.s	loc_D9A6
0000E4A8                            ; ===========================================================================
0000E4A8                            
0000E4A8                            loc_D9C6:
0000E4A8 4A28 0004                  		tst.b	4(a0)
0000E4AC 6A00                       		bpl.s	loc_D9D0
0000E4AE 522A 0001                  		addq.b	#1,1(a2)
0000E4B2                            
0000E4B2                            loc_D9D0:
0000E4B2 5C48                       		addq.w	#6,a0
0000E4B4                            
0000E4B4                            loc_D9D2:
0000E4B4 21C8 F774                  		move.l	a0,($FFFFF774).w
0000E4B8 2078 F770                  		movea.l	($FFFFF770).w,a0
0000E4BC 0646 0300                  		addi.w	#$300,d6
0000E4C0                            
0000E4C0                            loc_D9DE:
0000E4C0 BC68 FFFA                  		cmp.w	-6(a0),d6
0000E4C4 6E00                       		bgt.s	loc_D9F0
0000E4C6 4A28 FFFE                  		tst.b	-2(a0)
0000E4CA 6A00                       		bpl.s	loc_D9EC
0000E4CC 5312                       		subq.b	#1,(a2)
0000E4CE                            
0000E4CE                            loc_D9EC:
0000E4CE 5D48                       		subq.w	#6,a0
0000E4D0 60EE                       		bra.s	loc_D9DE
0000E4D2                            ; ===========================================================================
0000E4D2                            
0000E4D2                            loc_D9F0:
0000E4D2 21C8 F770                  		move.l	a0,($FFFFF770).w
0000E4D6 4E75                       		rts	
0000E4D8                            ; ===========================================================================
0000E4D8                            
0000E4D8                            loc_D9F6:
0000E4D8 31C6 F76E                  		move.w	d6,($FFFFF76E).w
0000E4DC 2078 F770                  		movea.l	($FFFFF770).w,a0
0000E4E0 0646 0280                  		addi.w	#$280,d6
0000E4E4                            
0000E4E4                            loc_DA02:
0000E4E4 BC50                       		cmp.w	(a0),d6
0000E4E6 6300                       		bls.s	loc_DA16
0000E4E8 4A28 0004                  		tst.b	4(a0)
0000E4EC 6A00                       		bpl.s	loc_DA10
0000E4EE 1412                       		move.b	(a2),d2
0000E4F0 5212                       		addq.b	#1,(a2)
0000E4F2                            
0000E4F2                            loc_DA10:
0000E4F2 6100 0000                  		bsr.w	loc_DA3C
0000E4F6 67EC                       		beq.s	loc_DA02
0000E4F8 4A28 0004                  		tst.b	$04(a0)		; was this object a remember state?
0000E4FC 6A00                       		bpl.s	loc_DA16	; if not, branch
0000E4FE 5312                       		subq.b	#$01,(a2)	; move right counter back		
0000E500                            
0000E500                            loc_DA16:
0000E500 21C8 F770                  		move.l	a0,($FFFFF770).w
0000E504 2078 F774                  		movea.l	($FFFFF774).w,a0
0000E508 0446 0300                  		subi.w	#$300,d6
0000E50C 6500                       		bcs.s	loc_DA36
0000E50E                            
0000E50E                            loc_DA24:
0000E50E BC50                       		cmp.w	(a0),d6
0000E510 6300                       		bls.s	loc_DA36
0000E512 4A28 0004                  		tst.b	4(a0)
0000E516 6A00                       		bpl.s	loc_DA32
0000E518 522A 0001                  		addq.b	#1,1(a2)
0000E51C                            
0000E51C                            loc_DA32:
0000E51C 5C48                       		addq.w	#6,a0
0000E51E 60EE                       		bra.s	loc_DA24
0000E520                            ; ===========================================================================
0000E520                            
0000E520                            loc_DA36:
0000E520 21C8 F774                  		move.l	a0,($FFFFF774).w
0000E524                            
0000E524                            locret_DA3A:
0000E524 4E75                       		rts	
0000E526                            ; ===========================================================================
0000E526                            
0000E526                            loc_DA3C:
0000E526 4A28 0004                  		tst.b	4(a0)
0000E52A 6A00                       		bpl.s	OPL_MakeItem
0000E52C 0832 0007 2002             		btst	#7,2(a2,d2.w)
0000E532 6700                       		beq.s	OPL_MakeItem
0000E534 5C48                       		addq.w	#6,a0
0000E536 7000                       		moveq	#0,d0
0000E538 4E75                       		rts	
0000E53A                            ; ===========================================================================
0000E53A                            
0000E53A                            OPL_MakeItem:
0000E53A 6100 0000                  		bsr.w	SingleObjLoad
0000E53E 6600                       		bne.s	locret_DA8A
0000E540 3358 0008                  		move.w	(a0)+,8(a1)
0000E544 3018                       		move.w	(a0)+,d0
0000E546 3200                       		move.w	d0,d1
0000E548 0240 0FFF                  		andi.w	#$FFF,d0
0000E54C 3340 000C                  		move.w	d0,$C(a1)
0000E550 E559                       		rol.w	#2,d1
0000E552 0201 0003                  		andi.b	#3,d1
0000E556 1341 0001                  		move.b	d1,1(a1)
0000E55A 1341 0022                  		move.b	d1,$22(a1)
0000E55E 1018                       		move.b	(a0)+,d0
0000E560 6A00                       		bpl.s	loc_DA80
0000E562 08F2 0007 2002             		bset	#$07,$02(a2,d2.w)	; set as removed
0000E568 0200 007F                  		andi.b	#$7F,d0
0000E56C 1342 0023                  		move.b	d2,$23(a1)
0000E570                            
0000E570                            loc_DA80:
0000E570 1280                       		move.b	d0,0(a1)
0000E572 1358 0028                  		move.b	(a0)+,$28(a1)
0000E576 7000                       		moveq	#0,d0
0000E578                            
0000E578                            locret_DA8A:
0000E578 4E75                       		rts	
0000E57A                            ; ---------------------------------------------------------------------------
0000E57A                            ; Single object	loading	subroutine
0000E57A                            ; ---------------------------------------------------------------------------
0000E57A                            
0000E57A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E57A                            
0000E57A                            
0000E57A                            SingleObjLoad:
0000E57A 43F8 D800                  		lea	($FFFFD800).w,a1 ; start address for object RAM
0000E57E 303C 005F                  		move.w	#$5F,d0
0000E582                            
0000E582                            loc_DA94:
0000E582 4A11                       		tst.b	(a1)		; is object RAM	slot empty?
0000E584 6700                       		beq.s	locret_DAA0	; if yes, branch
0000E586 43E9 0040                  		lea	$40(a1),a1	; goto next object RAM slot
0000E58A 51C8 FFF6                  		dbf	d0,loc_DA94	; repeat $5F times
0000E58E                            
0000E58E                            locret_DAA0:
0000E58E 4E75                       		rts	
0000E590                            ; End of function SingleObjLoad
0000E590                            
0000E590                            
0000E590                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E590                            
0000E590                            
0000E590                            SingleObjLoad2:
0000E590 2248                       		movea.l	a0,a1
0000E592 303C F000                  		move.w	#-$1000,d0
0000E596 9048                       		sub.w	a0,d0
0000E598 EC48                       		lsr.w	#6,d0
0000E59A 5340                       		subq.w	#1,d0
0000E59C 6500                       		bcs.s	locret_DABC
0000E59E                            
0000E59E                            loc_DAB0:
0000E59E 4A11                       		tst.b	(a1)
0000E5A0 6700                       		beq.s	locret_DABC
0000E5A2 43E9 0040                  		lea	$40(a1),a1
0000E5A6 51C8 FFF6                  		dbf	d0,loc_DAB0
0000E5AA                            
0000E5AA                            locret_DABC:
0000E5AA 4E75                       		rts	
0000E5AC                            ; End of function SingleObjLoad2
0000E5AC                            
0000E5AC                            ; ===========================================================================
0000E5AC                            ; ---------------------------------------------------------------------------
0000E5AC                            ; Object 41 - springs
0000E5AC                            ; ---------------------------------------------------------------------------
0000E5AC                            
0000E5AC                            Obj41:					; XREF: Obj_Index
0000E5AC 7000                       		moveq	#0,d0
0000E5AE 1028 0024                  		move.b	$24(a0),d0
0000E5B2 323B 0000                  		move.w	Obj41_Index(pc,d0.w),d1
0000E5B6 4EBB 1000                  		jsr	Obj41_Index(pc,d1.w)
0000E5BA 6100 FB28                  		bsr.w	DisplaySprite
0000E5BE 3028 0008                  		move.w	8(a0),d0
0000E5C2 0240 FF80                  		andi.w	#$FF80,d0
0000E5C6 3238 F700                  		move.w	($FFFFF700).w,d1
0000E5CA 0441 0080                  		subi.w	#$80,d1
0000E5CE 0241 FF80                  		andi.w	#$FF80,d1
0000E5D2 9041                       		sub.w	d1,d0
0000E5D4 0C40 0280                  		cmpi.w	#$280,d0
0000E5D8 6200 FB46                  		bhi.w	DeleteObject
0000E5DC 4E75                       		rts	
0000E5DE                            ; ===========================================================================
0000E5DE 0000                       Obj41_Index:	dc.w Obj41_Main-Obj41_Index
0000E5E0 0000                       		dc.w Obj41_Up-Obj41_Index
0000E5E2 0000                       		dc.w Obj41_AniUp-Obj41_Index
0000E5E4 0000                       		dc.w Obj41_ResetUp-Obj41_Index
0000E5E6 0000                       		dc.w Obj41_LR-Obj41_Index
0000E5E8 0000                       		dc.w Obj41_AniLR-Obj41_Index
0000E5EA 0000                       		dc.w Obj41_ResetLR-Obj41_Index
0000E5EC 0000                       		dc.w Obj41_Dwn-Obj41_Index
0000E5EE 0000                       		dc.w Obj41_AniDwn-Obj41_Index
0000E5F0 0000                       		dc.w Obj41_ResetDwn-Obj41_Index
0000E5F2                            
0000E5F2 F000                       Obj41_Powers:	dc.w -$1000		; power	of red spring
0000E5F4 F600                       		dc.w -$A00		; power	of yellow spring
0000E5F6                            ; ===========================================================================
0000E5F6                            
0000E5F6                            Obj41_Main:				; XREF: Obj41_Index
0000E5F6 5428 0024                  		addq.b	#2,$24(a0)
0000E5FA 217C 0000 0000 0004        		move.l	#Map_obj41,4(a0)
0000E602 317C 0523 0002             		move.w	#$523,2(a0)
0000E608 0028 0004 0001             		ori.b	#4,1(a0)
0000E60E 117C 0010 0019             		move.b	#$10,$19(a0)
0000E614 117C 0004 0018             		move.b	#4,$18(a0)
0000E61A 1028 0028                  		move.b	$28(a0),d0
0000E61E 0800 0004                  		btst	#4,d0		; does the spring face left/right?
0000E622 6700                       		beq.s	loc_DB54	; if not, branch
0000E624 117C 0008 0024             		move.b	#8,$24(a0)	; use "Obj41_LR" routine
0000E62A 117C 0001 001C             		move.b	#1,$1C(a0)
0000E630 117C 0003 001A             		move.b	#3,$1A(a0)
0000E636 317C 0533 0002             		move.w	#$533,2(a0)
0000E63C 117C 0008 0019             		move.b	#8,$19(a0)
0000E642                            
0000E642                            loc_DB54:
0000E642 0800 0005                  		btst	#5,d0		; does the spring face downwards?
0000E646 6700                       		beq.s	loc_DB66	; if not, branch
0000E648 117C 000E 0024             		move.b	#$E,$24(a0)	; use "Obj41_Dwn" routine
0000E64E 08E8 0001 0022             		bset	#1,$22(a0)
0000E654                            
0000E654                            loc_DB66:
0000E654 0800 0001                  		btst	#1,d0
0000E658 6700                       		beq.s	loc_DB72
0000E65A 08E8 0005 0002             		bset	#5,2(a0)
0000E660                            
0000E660                            loc_DB72:
0000E660 0240 000F                  		andi.w	#$F,d0
0000E664 317B 008C 0030             		move.w	Obj41_Powers(pc,d0.w),$30(a0)
0000E66A 4E75                       		rts	
0000E66C                            ; ===========================================================================
0000E66C                            
0000E66C                            Obj41_Up:				; XREF: Obj41_Index
0000E66C 323C 001B                  		move.w	#$1B,d1
0000E670 343C 0008                  		move.w	#8,d2
0000E674 363C 0010                  		move.w	#$10,d3
0000E678 3828 0008                  		move.w	8(a0),d4
0000E67C 6100 0000                  		bsr.w	SolidObject
0000E680 4A28 0025                  		tst.b	$25(a0)		; is Sonic on top of the spring?
0000E684 6600                       		bne.s	Obj41_BounceUp	; if yes, branch
0000E686 4E75                       		rts	
0000E688                            ; ===========================================================================
0000E688                            
0000E688                            Obj41_BounceUp:				; XREF: Obj41_Up
0000E688 5428 0024                  		addq.b	#2,$24(a0)
0000E68C 5069 000C                  		addq.w	#8,$C(a1)
0000E690 3368 0030 0012             		move.w	$30(a0),$12(a1)	; move Sonic upwards
0000E696 08E9 0001 0022             		bset	#1,$22(a1)
0000E69C 08A9 0003 0022             		bclr	#3,$22(a1)
0000E6A2 137C 0010 001C             		move.b	#$10,$1C(a1)	; use "bouncing" animation
0000E6A8 137C 0002 0024             		move.b	#2,$24(a1)
0000E6AE 08A8 0003 0022             		bclr	#3,$22(a0)
0000E6B4 4228 0025                  		clr.b	$25(a0)
0000E6B8 303C 00CC                  		move.w	#$CC,d0
0000E6BC 4EB9 0000 147C             		jsr	(PlaySound_Special).l ;	play spring sound
0000E6C2                            
0000E6C2                            Obj41_AniUp:				; XREF: Obj41_Index
0000E6C2 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000E6C8 6000 CB2C                  		bra.w	AnimateSprite
0000E6CC                            ; ===========================================================================
0000E6CC                            
0000E6CC                            Obj41_ResetUp:				; XREF: Obj41_Index
0000E6CC 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000E6D2 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_Up" routine
0000E6D6 4E75                       		rts	
0000E6D8                            ; ===========================================================================
0000E6D8                            
0000E6D8                            Obj41_LR:				; XREF: Obj41_Index
0000E6D8 323C 0013                  		move.w	#$13,d1
0000E6DC 343C 000E                  		move.w	#$E,d2
0000E6E0 363C 000F                  		move.w	#$F,d3
0000E6E4 3828 0008                  		move.w	8(a0),d4
0000E6E8 6100 0000                  		bsr.w	SolidObject
0000E6EC 0C28 0002 0024             		cmpi.b	#2,$24(a0)
0000E6F2 6600                       		bne.s	loc_DC0C
0000E6F4 117C 0008 0024             		move.b	#8,$24(a0)
0000E6FA                            
0000E6FA                            loc_DC0C:
0000E6FA 0828 0005 0022             		btst	#5,$22(a0)
0000E700 6600                       		bne.s	Obj41_BounceLR
0000E702 4E75                       		rts	
0000E704                            ; ===========================================================================
0000E704                            
0000E704                            Obj41_BounceLR:				; XREF: Obj41_LR
0000E704 5428 0024                  		addq.b	#2,$24(a0)
0000E708 3368 0030 0010             		move.w	$30(a0),$10(a1)	; move Sonic to	the left
0000E70E 5069 0008                  		addq.w	#8,8(a1)
0000E712 0828 0000 0022             		btst	#0,$22(a0)	; is object flipped?
0000E718 6600                       		bne.s	loc_DC36	; if yes, branch
0000E71A 0469 0010 0008             		subi.w	#$10,8(a1)
0000E720 4469 0010                  		neg.w	$10(a1)		; move Sonic to	the right
0000E724                            
0000E724                            loc_DC36:
0000E724 337C 000F 003E             		move.w	#$F,$3E(a1)
0000E72A 3369 0010 0014             		move.w	$10(a1),$14(a1)
0000E730 0869 0000 0022             		bchg	#0,$22(a1)
0000E736 0829 0002 0022             		btst	#2,$22(a1)
0000E73C 6600                       		bne.s	loc_DC56
0000E73E 137C 0000 001C             		move.b	#0,$1C(a1)	; use running animation
0000E744                            
0000E744                            loc_DC56:
0000E744 08A8 0005 0022             		bclr	#5,$22(a0)
0000E74A 08A9 0005 0022             		bclr	#5,$22(a1)
0000E750 303C 00CC                  		move.w	#$CC,d0
0000E754 4EB9 0000 147C             		jsr	(PlaySound_Special).l ;	play spring sound
0000E75A                            
0000E75A                            Obj41_AniLR:				; XREF: Obj41_Index
0000E75A 4278 C904                  		clr.w	($FFFFC904).w	; clear screen delay counter
0000E75E 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000E764 6000 CA90                  		bra.w	AnimateSprite
0000E768                            ; ===========================================================================
0000E768                            
0000E768                            Obj41_ResetLR:				; XREF: Obj41_Index
0000E768 117C 0002 001D             		move.b	#2,$1D(a0)	; reset	animation
0000E76E 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_LR" routine
0000E772 4E75                       		rts	
0000E774                            ; ===========================================================================
0000E774                            
0000E774                            Obj41_Dwn:				; XREF: Obj41_Index
0000E774 323C 001B                  		move.w	#$1B,d1
0000E778 343C 0008                  		move.w	#8,d2
0000E77C 363C 0010                  		move.w	#$10,d3
0000E780 3828 0008                  		move.w	8(a0),d4
0000E784 6100 0000                  		bsr.w	SolidObject
0000E788 0C28 0002 0024             		cmpi.b	#2,$24(a0)
0000E78E 6600                       		bne.s	loc_DCA4
0000E790 117C 000E 0024             		move.b	#$E,$24(a0)
0000E796                            
0000E796                            loc_DCA4:
0000E796 4A28 0025                  		tst.b	$25(a0)
0000E79A 6600                       		bne.s	locret_DCAE
0000E79C 4A44                       		tst.w	d4
0000E79E 6B00                       		bmi.s	Obj41_BounceDwn
0000E7A0                            
0000E7A0                            locret_DCAE:
0000E7A0 4E75                       		rts	
0000E7A2                            ; ===========================================================================
0000E7A2                            
0000E7A2                            Obj41_BounceDwn:			; XREF: Obj41_Dwn
0000E7A2 5428 0024                  		addq.b	#2,$24(a0)
0000E7A6 5169 000C                  		subq.w	#8,$C(a1)
0000E7AA 3368 0030 0012             		move.w	$30(a0),$12(a1)
0000E7B0 4469 0012                  		neg.w	$12(a1)		; move Sonic downwards
0000E7B4 08E9 0001 0022             		bset	#1,$22(a1)
0000E7BA 08A9 0003 0022             		bclr	#3,$22(a1)
0000E7C0 137C 0002 0024             		move.b	#2,$24(a1)
0000E7C6 08A8 0003 0022             		bclr	#3,$22(a0)
0000E7CC 4228 0025                  		clr.b	$25(a0)
0000E7D0 303C 00CC                  		move.w	#$CC,d0
0000E7D4 4EB9 0000 147C             		jsr	(PlaySound_Special).l ;	play spring sound
0000E7DA                            
0000E7DA                            Obj41_AniDwn:				; XREF: Obj41_Index
0000E7DA 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000E7E0 6000 CA14                  		bra.w	AnimateSprite
0000E7E4                            ; ===========================================================================
0000E7E4                            
0000E7E4                            Obj41_ResetDwn:				; XREF: Obj41_Index
0000E7E4 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000E7EA 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_Dwn" routine
0000E7EE 4E75                       		rts	
0000E7F0                            ; ===========================================================================
0000E7F0                            Ani_obj41:
0000E7F0                            	include "_anim\obj41.asm"
0000E7F0                            ; ---------------------------------------------------------------------------
0000E7F0                            ; Animation script - springs
0000E7F0                            ; ---------------------------------------------------------------------------
0000E7F0 0000                       		dc.w byte_DD02-Ani_obj41
0000E7F2 0000                       		dc.w byte_DD0E-Ani_obj41
0000E7F4 0001 0000 0202 0202 0202+  byte_DD02:	dc.b 0,	1, 0, 0, 2, 2, 2, 2, 2,	2, 0, $FC
0000E800 0004 0303 0505 0505 0505+  byte_DD0E:	dc.b 0,	4, 3, 3, 5, 5, 5, 5, 5,	5, 3, $FC
0000E80C                            		even
0000E80C                            		even
0000E80C                            
0000E80C                            ; ---------------------------------------------------------------------------
0000E80C                            ; Sprite mappings - springs
0000E80C                            ; ---------------------------------------------------------------------------
0000E80C                            Map_obj41:
0000E80C                            	include "_maps\obj41.asm"
0000E80C                            ; ---------------------------------------------------------------------------
0000E80C                            ; Sprite mappings - springs
0000E80C                            ; ---------------------------------------------------------------------------
0000E80C 0000                       		dc.w byte_DD26-Map_obj41
0000E80E 0000                       		dc.w byte_DD31-Map_obj41
0000E810 0000                       		dc.w byte_DD37-Map_obj41
0000E812 0000                       		dc.w byte_DD47-Map_obj41
0000E814 0000                       		dc.w byte_DD4D-Map_obj41
0000E816 0000                       		dc.w byte_DD53-Map_obj41
0000E818 02                         byte_DD26:	dc.b 2
0000E819 F80C 0000 F0               		dc.b $F8, $C, 0, 0, $F0
0000E81E 000C 0004 F0               		dc.b 0,	$C, 0, 4, $F0
0000E823 01                         byte_DD31:	dc.b 1
0000E824 000C 0000 F0               		dc.b 0,	$C, 0, 0, $F0
0000E829 03                         byte_DD37:	dc.b 3
0000E82A E80C 0000 F0               		dc.b $E8, $C, 0, 0, $F0
0000E82F F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000E834 000C 000C F0               		dc.b 0,	$C, 0, $C, $F0
0000E839 01                         byte_DD47:	dc.b 1
0000E83A F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
0000E83F 01                         byte_DD4D:	dc.b 1
0000E840 F003 0004 F8               		dc.b $F0, 3, 0,	4, $F8
0000E845 04                         byte_DD53:	dc.b 4
0000E846 F003 0004 10               		dc.b $F0, 3, 0,	4, $10
0000E84B F809 0008 F8               		dc.b $F8, 9, 0,	8, $F8
0000E850 F000 0000 F8               		dc.b $F0, 0, 0,	0, $F8
0000E855 0800 0003 F8               		dc.b 8,	0, 0, 3, $F8
0000E85A                            		even
0000E85A                            		even
0000E85A                            
0000E85A                            ; ===========================================================================
0000E85A                            ; ---------------------------------------------------------------------------
0000E85A                            ; Object 42 - Newtron enemy (GHZ)
0000E85A                            ; ---------------------------------------------------------------------------
0000E85A                            
0000E85A                            Obj42:					; XREF: Obj_Index
0000E85A 7000                       		moveq	#0,d0
0000E85C 1028 0024                  		move.b	$24(a0),d0
0000E860 323B 0000                  		move.w	Obj42_Index(pc,d0.w),d1
0000E864 4EFB 1000                  		jmp	Obj42_Index(pc,d1.w)
0000E868                            ; ===========================================================================
0000E868 0000                       Obj42_Index:	dc.w Obj42_Main-Obj42_Index
0000E86A 0000                       		dc.w Obj42_Action-Obj42_Index
0000E86C 0000                       		dc.w Obj42_Delete-Obj42_Index
0000E86E                            ; ===========================================================================
0000E86E                            
0000E86E                            Obj42_Main:				; XREF: Obj42_Index
0000E86E 5428 0024                  		addq.b	#2,$24(a0)
0000E872 217C 0000 0000 0004        		move.l	#Map_obj42,4(a0)
0000E87A 317C 049B 0002             		move.w	#$49B,2(a0)
0000E880 117C 0004 0001             		move.b	#4,1(a0)
0000E886 117C 0004 0018             		move.b	#4,$18(a0)
0000E88C 117C 0014 0019             		move.b	#$14,$19(a0)
0000E892 117C 0010 0016             		move.b	#$10,$16(a0)
0000E898 117C 0008 0017             		move.b	#8,$17(a0)
0000E89E                            
0000E89E                            Obj42_Action:				; XREF: Obj42_Index
0000E89E 7000                       		moveq	#0,d0
0000E8A0 1028 0025                  		move.b	$25(a0),d0
0000E8A4 323B 0000                  		move.w	Obj42_Index2(pc,d0.w),d1
0000E8A8 4EBB 1000                  		jsr	Obj42_Index2(pc,d1.w)
0000E8AC 43F9 0000 0000             		lea	(Ani_obj42).l,a1
0000E8B2 6100 C942                  		bsr.w	AnimateSprite
0000E8B6 6000 0000                  		bra.w	MarkObjGone
0000E8BA                            ; ===========================================================================
0000E8BA 0000                       Obj42_Index2:	dc.w Obj42_ChkDist-Obj42_Index2
0000E8BC 0000                       		dc.w Obj42_Type00-Obj42_Index2
0000E8BE 0000                       		dc.w Obj42_MatchFloor-Obj42_Index2
0000E8C0 0000                       		dc.w Obj42_Speed-Obj42_Index2
0000E8C2 0000                       		dc.w Obj42_Type01-Obj42_Index2
0000E8C4                            ; ===========================================================================
0000E8C4                            
0000E8C4                            Obj42_ChkDist:				; XREF: Obj42_Index2
0000E8C4 08E8 0000 0022             		bset	#0,$22(a0)
0000E8CA 3038 D008                  		move.w	($FFFFD008).w,d0
0000E8CE 9068 0008                  		sub.w	8(a0),d0
0000E8D2 6400                       		bcc.s	loc_DDEA
0000E8D4 4440                       		neg.w	d0
0000E8D6 08A8 0000 0022             		bclr	#0,$22(a0)
0000E8DC                            
0000E8DC                            loc_DDEA:
0000E8DC 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic within $80 pixels of	the newtron?
0000E8E0 6400                       		bcc.s	locret_DE12	; if not, branch
0000E8E2 5428 0025                  		addq.b	#2,$25(a0)
0000E8E6 117C 0001 001C             		move.b	#1,$1C(a0)
0000E8EC 4A28 0028                  		tst.b	$28(a0)		; check	object type
0000E8F0 6700                       		beq.s	locret_DE12	; if type is 00, branch
0000E8F2 317C 249B 0002             		move.w	#$249B,2(a0)
0000E8F8 117C 0008 0025             		move.b	#8,$25(a0)	; run type 01 newtron subroutine
0000E8FE 117C 0004 001C             		move.b	#4,$1C(a0)	; use different	animation
0000E904                            
0000E904                            locret_DE12:
0000E904 4E75                       		rts	
0000E906                            ; ===========================================================================
0000E906                            
0000E906                            Obj42_Type00:				; XREF: Obj42_Index2
0000E906 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; has "appearing" animation finished?
0000E90C 6400                       		bcc.s	Obj42_Fall	; is yes, branch
0000E90E 08E8 0000 0022             		bset	#0,$22(a0)
0000E914 3038 D008                  		move.w	($FFFFD008).w,d0
0000E918 9068 0008                  		sub.w	8(a0),d0
0000E91C 6400                       		bcc.s	locret_DE32
0000E91E 08A8 0000 0022             		bclr	#0,$22(a0)
0000E924                            
0000E924                            locret_DE32:
0000E924 4E75                       		rts	
0000E926                            ; ===========================================================================
0000E926                            
0000E926                            Obj42_Fall:				; XREF: Obj42_Type00
0000E926 0C28 0001 001A             		cmpi.b	#1,$1A(a0)
0000E92C 6600                       		bne.s	loc_DE42
0000E92E 117C 000C 0020             		move.b	#$C,$20(a0)
0000E934                            
0000E934                            loc_DE42:
0000E934 6100 F75C                  		bsr.w	ObjectFall
0000E938 6100 0000                  		bsr.w	ObjHitFloor
0000E93C 4A41                       		tst.w	d1		; has newtron hit the floor?
0000E93E 6A00                       		bpl.s	locret_DE86	; if not, branch
0000E940 D368 000C                  		add.w	d1,$C(a0)
0000E944 317C 0000 0012             		move.w	#0,$12(a0)	; stop newtron falling
0000E94A 5428 0025                  		addq.b	#2,$25(a0)
0000E94E 117C 0002 001C             		move.b	#2,$1C(a0)
0000E954 0828 0005 0002             		btst	#5,2(a0)
0000E95A 6700                       		beq.s	Obj42_Move
0000E95C 5228 001C                  		addq.b	#1,$1C(a0)
0000E960                            
0000E960                            Obj42_Move:
0000E960 117C 000D 0020             		move.b	#$D,$20(a0)
0000E966 317C 0200 0010             		move.w	#$200,$10(a0)	; move newtron horizontally
0000E96C 0828 0000 0022             		btst	#0,$22(a0)
0000E972 6600                       		bne.s	locret_DE86
0000E974 4468 0010                  		neg.w	$10(a0)
0000E978                            
0000E978                            locret_DE86:
0000E978 4E75                       		rts	
0000E97A                            ; ===========================================================================
0000E97A                            
0000E97A                            Obj42_MatchFloor:			; XREF: Obj42_Index2
0000E97A 6100 F742                  		bsr.w	SpeedToPos
0000E97E 6100 0000                  		bsr.w	ObjHitFloor
0000E982 0C41 FFF8                  		cmpi.w	#-8,d1
0000E986 6D00                       		blt.s	loc_DEA2
0000E988 0C41 000C                  		cmpi.w	#$C,d1
0000E98C 6C00                       		bge.s	loc_DEA2
0000E98E D368 000C                  		add.w	d1,$C(a0)	; match	newtron's position with floor
0000E992 4E75                       		rts	
0000E994                            ; ===========================================================================
0000E994                            
0000E994                            loc_DEA2:
0000E994 5428 0025                  		addq.b	#2,$25(a0)
0000E998 4E75                       		rts	
0000E99A                            ; ===========================================================================
0000E99A                            
0000E99A                            Obj42_Speed:				; XREF: Obj42_Index2
0000E99A 6100 F722                  		bsr.w	SpeedToPos
0000E99E 4E75                       		rts	
0000E9A0                            ; ===========================================================================
0000E9A0                            
0000E9A0                            Obj42_Type01:				; XREF: Obj42_Index2
0000E9A0 0C28 0001 001A             		cmpi.b	#1,$1A(a0)
0000E9A6 6600                       		bne.s	Obj42_FireMissile
0000E9A8 117C 000C 0020             		move.b	#$C,$20(a0)
0000E9AE                            
0000E9AE                            Obj42_FireMissile:
0000E9AE 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000E9B4 6600                       		bne.s	locret_DF14
0000E9B6 4A28 0032                  		tst.b	$32(a0)
0000E9BA 6600                       		bne.s	locret_DF14
0000E9BC 117C 0001 0032             		move.b	#1,$32(a0)
0000E9C2 6100 FBB6                  		bsr.w	SingleObjLoad
0000E9C6 6600                       		bne.s	locret_DF14
0000E9C8 12BC 0023                  		move.b	#$23,0(a1)	; load missile object
0000E9CC 3368 0008 0008             		move.w	8(a0),8(a1)
0000E9D2 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000E9D8 5169 000C                  		subq.w	#8,$C(a1)
0000E9DC 337C 0200 0010             		move.w	#$200,$10(a1)
0000E9E2 303C 0014                  		move.w	#$14,d0
0000E9E6 0828 0000 0022             		btst	#0,$22(a0)
0000E9EC 6600                       		bne.s	loc_DF04
0000E9EE 4440                       		neg.w	d0
0000E9F0 4469 0010                  		neg.w	$10(a1)
0000E9F4                            
0000E9F4                            loc_DF04:
0000E9F4 D169 0008                  		add.w	d0,8(a1)
0000E9F8 1368 0022 0022             		move.b	$22(a0),$22(a1)
0000E9FE 137C 0001 0028             		move.b	#1,$28(a1)
0000EA04                            
0000EA04                            locret_DF14:
0000EA04 4E75                       		rts	
0000EA06                            ; ===========================================================================
0000EA06                            
0000EA06                            Obj42_Delete:				; XREF: Obj42_Index
0000EA06 6000 F718                  		bra.w	DeleteObject
0000EA0A                            ; ===========================================================================
0000EA0A                            Ani_obj42:
0000EA0A                            	include "_anim\obj42.asm"
0000EA0A                            ; ---------------------------------------------------------------------------
0000EA0A                            ; Animation script - Newtron enemy
0000EA0A                            ; ---------------------------------------------------------------------------
0000EA0A 0000                       		dc.w byte_DF24-Ani_obj42
0000EA0C 0000                       		dc.w byte_DF28-Ani_obj42
0000EA0E 0000                       		dc.w byte_DF30-Ani_obj42
0000EA10 0000                       		dc.w byte_DF34-Ani_obj42
0000EA12 0000                       		dc.w byte_DF38-Ani_obj42
0000EA14 0F0A FF00                  byte_DF24:	dc.b $F, $A, $FF, 0
0000EA18 1300 0103 0405 FE01        byte_DF28:	dc.b $13, 0, 1,	3, 4, 5, $FE, 1
0000EA20 0206 07FF                  byte_DF30:	dc.b 2,	6, 7, $FF
0000EA24 0208 09FF                  byte_DF34:	dc.b 2,	8, 9, $FF
0000EA28 1300 0101 0201 0100 FC00   byte_DF38:	dc.b $13, 0, 1,	1, 2, 1, 1, 0, $FC, 0
0000EA32                            		even
0000EA32                            		even
0000EA32                            
0000EA32                            ; ---------------------------------------------------------------------------
0000EA32                            ; Sprite mappings - Newtron enemy (GHZ)
0000EA32                            ; ---------------------------------------------------------------------------
0000EA32                            Map_obj42:
0000EA32                            	include "_maps\obj42.asm"
0000EA32                            ; ---------------------------------------------------------------------------
0000EA32                            ; Sprite mappings - Newtron enemy (GHZ)
0000EA32                            ; ---------------------------------------------------------------------------
0000EA32 0000 0000                  		dc.w byte_DF58-Map_obj42, byte_DF68-Map_obj42
0000EA36 0000 0000                  		dc.w byte_DF78-Map_obj42, byte_DF88-Map_obj42
0000EA3A 0000 0000                  		dc.w byte_DF9D-Map_obj42, byte_DFAD-Map_obj42
0000EA3E 0000 0000                  		dc.w byte_DFB8-Map_obj42, byte_DFC8-Map_obj42
0000EA42 0000 0000                  		dc.w byte_DFD8-Map_obj42, byte_DFE8-Map_obj42
0000EA46 0000                       		dc.w byte_DFF8-Map_obj42
0000EA48 03                         byte_DF58:	dc.b 3
0000EA49 EC0D 0000 EC               		dc.b $EC, $D, 0, 0, $EC
0000EA4E F400 0008 0C               		dc.b $F4, 0, 0,	8, $C
0000EA53 FC0E 0009 F4               		dc.b $FC, $E, 0, 9, $F4
0000EA58 03                         byte_DF68:	dc.b 3
0000EA59 EC06 0015 EC               		dc.b $EC, 6, 0,	$15, $EC
0000EA5E EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000EA63 FC0A 0021 FC               		dc.b $FC, $A, 0, $21, $FC
0000EA68 03                         byte_DF78:	dc.b 3
0000EA69 EC06 002A EC               		dc.b $EC, 6, 0,	$2A, $EC
0000EA6E EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000EA73 FC0A 0021 FC               		dc.b $FC, $A, 0, $21, $FC
0000EA78 04                         byte_DF88:	dc.b 4
0000EA79 EC06 0030 EC               		dc.b $EC, 6, 0,	$30, $EC
0000EA7E EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000EA83 FC09 0036 FC               		dc.b $FC, 9, 0,	$36, $FC
0000EA88 0C00 003C 0C               		dc.b $C, 0, 0, $3C, $C
0000EA8D 03                         byte_DF9D:	dc.b 3
0000EA8E F40D 003D EC               		dc.b $F4, $D, 0, $3D, $EC
0000EA93 FC00 0020 0C               		dc.b $FC, 0, 0,	$20, $C
0000EA98 0408 0045 FC               		dc.b 4,	8, 0, $45, $FC
0000EA9D 02                         byte_DFAD:	dc.b 2
0000EA9E F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000EAA3 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000EAA8 03                         byte_DFB8:	dc.b 3
0000EAA9 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000EAAE F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000EAB3 FE00 0052 14               		dc.b $FE, 0, 0,	$52, $14
0000EAB8 03                         byte_DFC8:	dc.b 3
0000EAB9 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000EABE F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000EAC3 FE04 0053 14               		dc.b $FE, 4, 0,	$53, $14
0000EAC8 03                         byte_DFD8:	dc.b 3
0000EAC9 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000EACE F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000EAD3 FE00 E052 14               		dc.b $FE, 0, $E0, $52, $14
0000EAD8 03                         byte_DFE8:	dc.b 3
0000EAD9 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000EADE F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000EAE3 FE04 E053 14               		dc.b $FE, 4, $E0, $53, $14
0000EAE8 00                         byte_DFF8:	dc.b 0
0000EAEA 00                         		even
0000EAEA 00                         		even
0000EAEA                            
0000EAEA                            ; ===========================================================================
0000EAEA                            ; ---------------------------------------------------------------------------
0000EAEA                            ; Object 43 - Roller enemy (SYZ)
0000EAEA                            ; ---------------------------------------------------------------------------
0000EAEA                            
0000EAEA                            Obj43:					; XREF: Obj_Index
0000EAEA 7000                       		moveq	#0,d0
0000EAEC 1028 0024                  		move.b	$24(a0),d0
0000EAF0 323B 0000                  		move.w	Obj43_Index(pc,d0.w),d1
0000EAF4 4EFB 1000                  		jmp	Obj43_Index(pc,d1.w)
0000EAF8                            ; ===========================================================================
0000EAF8 0000                       Obj43_Index:	dc.w Obj43_Main-Obj43_Index
0000EAFA 0000                       		dc.w Obj43_Action-Obj43_Index
0000EAFC                            ; ===========================================================================
0000EAFC                            
0000EAFC                            Obj43_Main:				; XREF: Obj43_Index
0000EAFC 117C 000E 0016             		move.b	#$E,$16(a0)
0000EB02 117C 0008 0017             		move.b	#8,$17(a0)
0000EB08 6100 F588                  		bsr.w	ObjectFall
0000EB0C 6100 0000                  		bsr.w	ObjHitFloor
0000EB10 4A41                       		tst.w	d1
0000EB12 6A00                       		bpl.s	locret_E052
0000EB14 D368 000C                  		add.w	d1,$C(a0)	; match	roller's position with the floor
0000EB18 317C 0000 0012             		move.w	#0,$12(a0)
0000EB1E 5428 0024                  		addq.b	#2,$24(a0)
0000EB22 217C 0000 0000 0004        		move.l	#Map_obj43,4(a0)
0000EB2A 317C 04B8 0002             		move.w	#$4B8,2(a0)
0000EB30 117C 0004 0001             		move.b	#4,1(a0)
0000EB36 117C 0004 0018             		move.b	#4,$18(a0)
0000EB3C 117C 0010 0019             		move.b	#$10,$19(a0)
0000EB42                            
0000EB42                            locret_E052:
0000EB42 4E75                       		rts	
0000EB44                            ; ===========================================================================
0000EB44                            
0000EB44                            Obj43_Action:				; XREF: Obj43_Index
0000EB44 7000                       		moveq	#0,d0
0000EB46 1028 0025                  		move.b	$25(a0),d0
0000EB4A 323B 0000                  		move.w	Obj43_Index2(pc,d0.w),d1
0000EB4E 4EBB 1000                  		jsr	Obj43_Index2(pc,d1.w)
0000EB52 43F9 0000 0000             		lea	(Ani_obj43).l,a1
0000EB58 6100 C69C                  		bsr.w	AnimateSprite
0000EB5C 3028 0008                  		move.w	8(a0),d0
0000EB60 0240 FF80                  		andi.w	#$FF80,d0
0000EB64 3238 F700                  		move.w	($FFFFF700).w,d1
0000EB68 0441 0080                  		subi.w	#$80,d1
0000EB6C 0241 FF80                  		andi.w	#$FF80,d1
0000EB70 9041                       		sub.w	d1,d0
0000EB72 0C40 0280                  		cmpi.w	#$280,d0
0000EB76 6E00 0000                  		bgt.w	Obj43_ChkGone
0000EB7A 6000 F568                  		bra.w	DisplaySprite
0000EB7E                            ; ===========================================================================
0000EB7E                            
0000EB7E                            Obj43_ChkGone:				; XREF: Obj43_Action
0000EB7E 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000EB82 7000                       		moveq	#0,d0
0000EB84 1028 0023                  		move.b	$23(a0),d0
0000EB88 6700                       		beq.s	Obj43_Delete
0000EB8A 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000EB90                            
0000EB90                            Obj43_Delete:
0000EB90 6000 F58E                  		bra.w	DeleteObject
0000EB94                            ; ===========================================================================
0000EB94 0000                       Obj43_Index2:	dc.w Obj43_RollChk-Obj43_Index2
0000EB96 0000                       		dc.w Obj43_RollNoChk-Obj43_Index2
0000EB98 0000                       		dc.w Obj43_ChkJump-Obj43_Index2
0000EB9A 0000                       		dc.w Obj43_MatchFloor-Obj43_Index2
0000EB9C                            ; ===========================================================================
0000EB9C                            
0000EB9C                            Obj43_RollChk:				; XREF: Obj43_Index2
0000EB9C 3038 D008                  		move.w	($FFFFD008).w,d0
0000EBA0 0440 0100                  		subi.w	#$100,d0
0000EBA4 6500                       		bcs.s	loc_E0D2
0000EBA6 9068 0008                  		sub.w	8(a0),d0	; check	distance between Roller	and Sonic
0000EBAA 6500                       		bcs.s	loc_E0D2
0000EBAC 5828 0025                  		addq.b	#4,$25(a0)
0000EBB0 117C 0002 001C             		move.b	#2,$1C(a0)
0000EBB6 317C 0700 0010             		move.w	#$700,$10(a0)	; move Roller horizontally
0000EBBC 117C 008E 0020             		move.b	#$8E,$20(a0)	; make Roller invincible
0000EBC2                            
0000EBC2                            loc_E0D2:
0000EBC2 588F                       		addq.l	#4,sp
0000EBC4 4E75                       		rts	
0000EBC6                            ; ===========================================================================
0000EBC6                            
0000EBC6                            Obj43_RollNoChk:			; XREF: Obj43_Index2
0000EBC6 0C28 0002 001C             		cmpi.b	#2,$1C(a0)
0000EBCC 6700                       		beq.s	loc_E0F8
0000EBCE 5368 0030                  		subq.w	#1,$30(a0)
0000EBD2 6A00                       		bpl.s	locret_E0F6
0000EBD4 117C 0001 001C             		move.b	#1,$1C(a0)
0000EBDA 317C 0700 0010             		move.w	#$700,$10(a0)
0000EBE0 117C 008E 0020             		move.b	#$8E,$20(a0)
0000EBE6                            
0000EBE6                            locret_E0F6:
0000EBE6 4E75                       		rts	
0000EBE8                            ; ===========================================================================
0000EBE8                            
0000EBE8                            loc_E0F8:
0000EBE8 5428 0025                  		addq.b	#2,$25(a0)
0000EBEC 4E75                       		rts	
0000EBEE                            ; ===========================================================================
0000EBEE                            
0000EBEE                            Obj43_ChkJump:				; XREF: Obj43_Index2
0000EBEE 6100 0000                  		bsr.w	Obj43_Stop
0000EBF2 6100 F4CA                  		bsr.w	SpeedToPos
0000EBF6 6100 0000                  		bsr.w	ObjHitFloor
0000EBFA 0C41 FFF8                  		cmpi.w	#-8,d1
0000EBFE 6D00                       		blt.s	Obj43_Jump
0000EC00 0C41 000C                  		cmpi.w	#$C,d1
0000EC04 6C00                       		bge.s	Obj43_Jump
0000EC06 D368 000C                  		add.w	d1,$C(a0)
0000EC0A 4E75                       		rts	
0000EC0C                            ; ===========================================================================
0000EC0C                            
0000EC0C                            Obj43_Jump:
0000EC0C 5428 0025                  		addq.b	#2,$25(a0)
0000EC10 08E8 0000 0032             		bset	#0,$32(a0)
0000EC16 6700                       		beq.s	locret_E12E
0000EC18 317C FA00 0012             		move.w	#-$600,$12(a0)	; move Roller vertically
0000EC1E                            
0000EC1E                            locret_E12E:
0000EC1E 4E75                       		rts	
0000EC20                            ; ===========================================================================
0000EC20                            
0000EC20                            Obj43_MatchFloor:			; XREF: Obj43_Index2
0000EC20 6100 F470                  		bsr.w	ObjectFall
0000EC24 4A68 0012                  		tst.w	$12(a0)
0000EC28 6B00                       		bmi.s	locret_E150
0000EC2A 6100 0000                  		bsr.w	ObjHitFloor
0000EC2E 4A41                       		tst.w	d1
0000EC30 6A00                       		bpl.s	locret_E150
0000EC32 D368 000C                  		add.w	d1,$C(a0)	; match	Roller's position with the floor
0000EC36 5528 0025                  		subq.b	#2,$25(a0)
0000EC3A 317C 0000 0012             		move.w	#0,$12(a0)
0000EC40                            
0000EC40                            locret_E150:
0000EC40 4E75                       		rts	
0000EC42                            
0000EC42                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000EC42                            
0000EC42                            
0000EC42                            Obj43_Stop:				; XREF: Obj43_ChkJump
0000EC42 4A28 0032                  		tst.b	$32(a0)
0000EC46 6B00                       		bmi.s	locret_E188
0000EC48 3038 D008                  		move.w	($FFFFD008).w,d0
0000EC4C 0440 0030                  		subi.w	#$30,d0
0000EC50 9068 0008                  		sub.w	8(a0),d0
0000EC54 6400                       		bcc.s	locret_E188
0000EC56 117C 0000 001C             		move.b	#0,$1C(a0)
0000EC5C 117C 000E 0020             		move.b	#$E,$20(a0)
0000EC62 4268 0010                  		clr.w	$10(a0)
0000EC66 317C 0078 0030             		move.w	#120,$30(a0)	; set waiting time to 2	seconds
0000EC6C 117C 0002 0025             		move.b	#2,$25(a0)
0000EC72 08E8 0007 0032             		bset	#7,$32(a0)
0000EC78                            
0000EC78                            locret_E188:
0000EC78 4E75                       		rts	
0000EC7A                            ; End of function Obj43_Stop
0000EC7A                            
0000EC7A                            ; ===========================================================================
0000EC7A                            Ani_obj43:
0000EC7A                            	include "_anim\obj43.asm"
0000EC7A                            ; ---------------------------------------------------------------------------
0000EC7A                            ; Animation script - Roller enemy
0000EC7A                            ; ---------------------------------------------------------------------------
0000EC7A 0000                       		dc.w byte_E190-Ani_obj43
0000EC7C 0000                       		dc.w byte_E196-Ani_obj43
0000EC7E 0000                       		dc.w byte_E19C-Ani_obj43
0000EC80 0F02 0100 FE01             byte_E190:	dc.b $F, 2, 1, 0, $FE, 1
0000EC86 0F01 02FD 0200             byte_E196:	dc.b $F, 1, 2, $FD, 2, 0
0000EC8C 0303 0402 FF               byte_E19C:	dc.b 3,	3, 4, 2, $FF
0000EC92 00                         		even
0000EC92 00                         		even
0000EC92                            
0000EC92                            ; ---------------------------------------------------------------------------
0000EC92                            ; Sprite mappings - Roller enemy (SYZ)
0000EC92                            ; ---------------------------------------------------------------------------
0000EC92                            Map_obj43:
0000EC92                            	include "_maps\obj43.asm"
0000EC92                            ; ---------------------------------------------------------------------------
0000EC92                            ; Sprite mappings - Roller enemy (SYZ)
0000EC92                            ; ---------------------------------------------------------------------------
0000EC92 0000 0000                  		dc.w byte_E1AC-Map_obj43, byte_E1B7-Map_obj43
0000EC96 0000 0000                  		dc.w byte_E1C2-Map_obj43, byte_E1C8-Map_obj43
0000EC9A 0000                       		dc.w byte_E1CE-Map_obj43
0000EC9C 02                         byte_E1AC:	dc.b 2
0000EC9D DE0E 0000 F0               		dc.b $DE, $E, 0, 0, $F0
0000ECA2 F60E 000C F0               		dc.b $F6, $E, 0, $C, $F0
0000ECA7 02                         byte_E1B7:	dc.b 2
0000ECA8 E60E 0000 F0               		dc.b $E6, $E, 0, 0, $F0
0000ECAD FE0D 0018 F0               		dc.b $FE, $D, 0, $18, $F0
0000ECB2 01                         byte_E1C2:	dc.b 1
0000ECB3 F00F 0020 F0               		dc.b $F0, $F, 0, $20, $F0
0000ECB8 01                         byte_E1C8:	dc.b 1
0000ECB9 F00F 0030 F0               		dc.b $F0, $F, 0, $30, $F0
0000ECBE 01                         byte_E1CE:	dc.b 1
0000ECBF F00F 0040 F0               		dc.b $F0, $F, 0, $40, $F0
0000ECC4                            		even
0000ECC4                            		even
0000ECC4                            
0000ECC4                            ; ===========================================================================
0000ECC4                            ; ---------------------------------------------------------------------------
0000ECC4                            ; Object 44 - walls (GHZ)
0000ECC4                            ; ---------------------------------------------------------------------------
0000ECC4                            
0000ECC4                            Obj44:					; XREF: Obj_Index
0000ECC4 7000                       		moveq	#0,d0
0000ECC6 1028 0024                  		move.b	$24(a0),d0
0000ECCA 323B 0000                  		move.w	Obj44_Index(pc,d0.w),d1
0000ECCE 4EFB 1000                  		jmp	Obj44_Index(pc,d1.w)
0000ECD2                            ; ===========================================================================
0000ECD2 0000                       Obj44_Index:	dc.w Obj44_Main-Obj44_Index
0000ECD4 0000                       		dc.w Obj44_Solid-Obj44_Index
0000ECD6 0000                       		dc.w Obj44_Display-Obj44_Index
0000ECD8                            ; ===========================================================================
0000ECD8                            
0000ECD8                            Obj44_Main:				; XREF: Obj44_Index
0000ECD8 5428 0024                  		addq.b	#2,$24(a0)
0000ECDC 217C 0000 0000 0004        		move.l	#Map_obj44,4(a0)
0000ECE4 317C 434C 0002             		move.w	#$434C,2(a0)
0000ECEA 0028 0004 0001             		ori.b	#4,1(a0)
0000ECF0 117C 0008 0019             		move.b	#8,$19(a0)
0000ECF6 117C 0006 0018             		move.b	#6,$18(a0)
0000ECFC 1168 0028 001A             		move.b	$28(a0),$1A(a0)	; copy object type number to frame number
0000ED02 08A8 0004 001A             		bclr	#4,$1A(a0)	; clear	4th bit	(deduct	$10)
0000ED08 6700                       		beq.s	Obj44_Solid	; make object solid if 4th bit = 0
0000ED0A 5428 0024                  		addq.b	#2,$24(a0)
0000ED0E 6000                       		bra.s	Obj44_Display	; don't make it solid if 4th bit = 1
0000ED10                            ; ===========================================================================
0000ED10                            
0000ED10                            Obj44_Solid:				; XREF: Obj44_Index
0000ED10 323C 0013                  		move.w	#$13,d1
0000ED14 343C 0028                  		move.w	#$28,d2
0000ED18 6100 A7C6                  		bsr.w	Obj44_SolidWall
0000ED1C                            
0000ED1C                            Obj44_Display:				; XREF: Obj44_Index
0000ED1C 6100 F3C6                  		bsr.w	DisplaySprite
0000ED20 3028 0008                  		move.w	8(a0),d0
0000ED24 0240 FF80                  		andi.w	#$FF80,d0
0000ED28 3238 F700                  		move.w	($FFFFF700).w,d1
0000ED2C 0441 0080                  		subi.w	#$80,d1
0000ED30 0241 FF80                  		andi.w	#$FF80,d1
0000ED34 9041                       		sub.w	d1,d0
0000ED36 0C40 0280                  		cmpi.w	#$280,d0
0000ED3A 6200 F3E4                  		bhi.w	DeleteObject
0000ED3E 4E75                       		rts	
0000ED40                            ; ===========================================================================
0000ED40                            ; ---------------------------------------------------------------------------
0000ED40                            ; Sprite mappings - walls (GHZ)
0000ED40                            ; ---------------------------------------------------------------------------
0000ED40                            Map_obj44:
0000ED40                            	include "_maps\obj44.asm"
0000ED40                            ; ---------------------------------------------------------------------------
0000ED40                            ; Sprite mappings - walls (GHZ)
0000ED40                            ; ---------------------------------------------------------------------------
0000ED40 0000                       		dc.w byte_E256-Map_obj44
0000ED42 0000                       		dc.w byte_E26B-Map_obj44
0000ED44 0000                       		dc.w byte_E280-Map_obj44
0000ED46 04                         byte_E256:	dc.b 4
0000ED47 E005 0004 F8               		dc.b $E0, 5, 0,	4, $F8
0000ED4C F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000ED51 0005 0008 F8               		dc.b 0,	5, 0, 8, $F8
0000ED56 1005 0008 F8               		dc.b $10, 5, 0,	8, $F8
0000ED5B 04                         byte_E26B:	dc.b 4
0000ED5C E005 0008 F8               		dc.b $E0, 5, 0,	8, $F8
0000ED61 F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000ED66 0005 0008 F8               		dc.b 0,	5, 0, 8, $F8
0000ED6B 1005 0008 F8               		dc.b $10, 5, 0,	8, $F8
0000ED70 04                         byte_E280:	dc.b 4
0000ED71 E005 0000 F8               		dc.b $E0, 5, 0,	0, $F8
0000ED76 F005 0000 F8               		dc.b $F0, 5, 0,	0, $F8
0000ED7B 0005 0000 F8               		dc.b 0,	5, 0, 0, $F8
0000ED80 1005 0000 F8               		dc.b $10, 5, 0,	0, $F8
0000ED86 00                         		even
0000ED86 00                         		even
0000ED86                            
0000ED86                            ; ===========================================================================
0000ED86                            ; ---------------------------------------------------------------------------
0000ED86                            ; Object 13 - lava ball	producer (MZ, SLZ)
0000ED86                            ; ---------------------------------------------------------------------------
0000ED86                            
0000ED86                            Obj13:					; XREF: Obj_Index
0000ED86 7000                       		moveq	#0,d0
0000ED88 1028 0024                  		move.b	$24(a0),d0
0000ED8C 323B 0000                  		move.w	Obj13_Index(pc,d0.w),d1
0000ED90 4EBB 1000                  		jsr	Obj13_Index(pc,d1.w)
0000ED94 6000 0000                  		bra.w	Obj14_ChkDel
0000ED98                            ; ===========================================================================
0000ED98 0000                       Obj13_Index:	dc.w Obj13_Main-Obj13_Index
0000ED9A 0000                       		dc.w Obj13_MakeLava-Obj13_Index
0000ED9C                            ; ---------------------------------------------------------------------------
0000ED9C                            ;
0000ED9C                            ; Lava ball production rates
0000ED9C                            ;
0000ED9C 1E3C 5A78 96B4             Obj13_Rates:	dc.b 30, 60, 90, 120, 150, 180
0000EDA2                            ; ===========================================================================
0000EDA2                            
0000EDA2                            Obj13_Main:				; XREF: Obj13_Index
0000EDA2 5428 0024                  		addq.b	#2,$24(a0)
0000EDA6 1028 0028                  		move.b	$28(a0),d0
0000EDAA E848                       		lsr.w	#4,d0
0000EDAC 0240 000F                  		andi.w	#$F,d0
0000EDB0 117B 00EA 001F             		move.b	Obj13_Rates(pc,d0.w),$1F(a0)
0000EDB6 1168 001F 001E             		move.b	$1F(a0),$1E(a0)	; set time delay for lava balls
0000EDBC 0228 000F 0028             		andi.b	#$F,$28(a0)
0000EDC2                            
0000EDC2                            Obj13_MakeLava:				; XREF: Obj13_Index
0000EDC2 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from time delay
0000EDC6 6600                       		bne.s	locret_E302	; if time still	remains, branch
0000EDC8 1168 001F 001E             		move.b	$1F(a0),$1E(a0)	; reset	time delay
0000EDCE 6100 F590                  		bsr.w	ChkObjOnScreen
0000EDD2 6600                       		bne.s	locret_E302
0000EDD4 6100 F7A4                  		bsr.w	SingleObjLoad
0000EDD8 6600                       		bne.s	locret_E302
0000EDDA 12BC 0014                  		move.b	#$14,0(a1)	; load lava ball object
0000EDDE 3368 0008 0008             		move.w	8(a0),8(a1)
0000EDE4 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000EDEA 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000EDF0                            
0000EDF0                            locret_E302:
0000EDF0 4E75                       		rts	
0000EDF2                            ; ===========================================================================
0000EDF2                            ; ---------------------------------------------------------------------------
0000EDF2                            ; Object 14 - lava balls (MZ, SLZ)
0000EDF2                            ; ---------------------------------------------------------------------------
0000EDF2                            
0000EDF2                            Obj14:					; XREF: Obj_Index
0000EDF2 7000                       		moveq	#0,d0
0000EDF4 1028 0024                  		move.b	$24(a0),d0
0000EDF8 323B 0000                  		move.w	Obj14_Index(pc,d0.w),d1
0000EDFC 4EBB 1000                  		jsr	Obj14_Index(pc,d1.w)
0000EE00 6000 F2E2                  		bra.w	DisplaySprite
0000EE04                            ; ===========================================================================
0000EE04 0000                       Obj14_Index:	dc.w Obj14_Main-Obj14_Index
0000EE06 0000                       		dc.w Obj14_Action-Obj14_Index
0000EE08 0000                       		dc.w Obj14_Delete-Obj14_Index
0000EE0A                            
0000EE0A FC00 FB00 FA00 F900 FE00   Obj14_Speeds:	dc.w $FC00, $FB00, $FA00, $F900, $FE00
0000EE14 0200 FE00 0200 0000        		dc.w $200, $FE00, $200,	0
0000EE1C                            ; ===========================================================================
0000EE1C                            
0000EE1C                            Obj14_Main:				; XREF: Obj14_Index
0000EE1C 5428 0024                  		addq.b	#2,$24(a0)
0000EE20 117C 0008 0016             		move.b	#8,$16(a0)
0000EE26 117C 0008 0017             		move.b	#8,$17(a0)
0000EE2C 217C 0000 BE4E 0004        		move.l	#Map_obj14,4(a0)
0000EE34 317C 0345 0002             		move.w	#$345,2(a0)
0000EE3A 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
0000EE40 6600                       		bne.s	loc_E35A
0000EE42 317C 0480 0002             		move.w	#$480,2(a0)	; SLZ specific code
0000EE48                            
0000EE48                            loc_E35A:
0000EE48 117C 0004 0001             		move.b	#4,1(a0)
0000EE4E 117C 0003 0018             		move.b	#3,$18(a0)
0000EE54 117C 008B 0020             		move.b	#$8B,$20(a0)
0000EE5A 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000EE60 4A28 0029                  		tst.b	$29(a0)
0000EE64 6700                       		beq.s	Obj14_SetSpeed
0000EE66 5428 0018                  		addq.b	#2,$18(a0)
0000EE6A                            
0000EE6A                            Obj14_SetSpeed:
0000EE6A 7000                       		moveq	#0,d0
0000EE6C 1028 0028                  		move.b	$28(a0),d0
0000EE70 D040                       		add.w	d0,d0
0000EE72 317B 0096 0012             		move.w	Obj14_Speeds(pc,d0.w),$12(a0) ;	load object speed (vertical)
0000EE78 117C 0008 0019             		move.b	#8,$19(a0)
0000EE7E 0C28 0006 0028             		cmpi.b	#6,$28(a0)	; is object type below $6 ?
0000EE84 6500                       		bcs.s	Obj14_PlaySnd	; if yes, branch
0000EE86 117C 0010 0019             		move.b	#$10,$19(a0)
0000EE8C 117C 0002 001C             		move.b	#2,$1C(a0)	; use horizontal animation
0000EE92 3168 0012 0010             		move.w	$12(a0),$10(a0)	; set horizontal speed
0000EE98 317C 0000 0012             		move.w	#0,$12(a0)	; delete vertical speed
0000EE9E                            
0000EE9E                            Obj14_PlaySnd:
0000EE9E 303C 00AE                  		move.w	#$AE,d0
0000EEA2 4EB9 0000 147C             		jsr	(PlaySound_Special).l ;	play lava ball sound
0000EEA8                            
0000EEA8                            Obj14_Action:				; XREF: Obj14_Index
0000EEA8 7000                       		moveq	#0,d0
0000EEAA 1028 0028                  		move.b	$28(a0),d0
0000EEAE D040                       		add.w	d0,d0
0000EEB0 323B 0000                  		move.w	Obj14_TypeIndex(pc,d0.w),d1
0000EEB4 4EBB 1000                  		jsr	Obj14_TypeIndex(pc,d1.w)
0000EEB8 6100 F204                  		bsr.w	SpeedToPos
0000EEBC 43F9 0000 0000             		lea	(Ani_obj14).l,a1
0000EEC2 6100 C332                  		bsr.w	AnimateSprite
0000EEC6                            
0000EEC6                            Obj14_ChkDel:				; XREF: Obj13
0000EEC6 3028 0008                  		move.w	8(a0),d0
0000EECA 0240 FF80                  		andi.w	#$FF80,d0
0000EECE 3238 F700                  		move.w	($FFFFF700).w,d1
0000EED2 0441 0080                  		subi.w	#$80,d1
0000EED6 0241 FF80                  		andi.w	#$FF80,d1
0000EEDA 9041                       		sub.w	d1,d0
0000EEDC 0C40 0280                  		cmpi.w	#$280,d0
0000EEE0 6200 F23E                  		bhi.w	DeleteObject
0000EEE4 4E75                       		rts	
0000EEE6                            ; ===========================================================================
0000EEE6 0000 0000                  Obj14_TypeIndex:dc.w Obj14_Type00-Obj14_TypeIndex, Obj14_Type00-Obj14_TypeIndex
0000EEEA 0000 0000                  		dc.w Obj14_Type00-Obj14_TypeIndex, Obj14_Type00-Obj14_TypeIndex
0000EEEE 0000 0000                  		dc.w Obj14_Type04-Obj14_TypeIndex, Obj14_Type05-Obj14_TypeIndex
0000EEF2 0000 0000                  		dc.w Obj14_Type06-Obj14_TypeIndex, Obj14_Type07-Obj14_TypeIndex
0000EEF6 0000                       		dc.w Obj14_Type08-Obj14_TypeIndex
0000EEF8                            ; ===========================================================================
0000EEF8                            ; lavaball types 00-03 fly up and fall back down
0000EEF8                            
0000EEF8                            Obj14_Type00:				; XREF: Obj14_TypeIndex
0000EEF8 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's downward speed
0000EEFE 3028 0030                  		move.w	$30(a0),d0
0000EF02 B068 000C                  		cmp.w	$C(a0),d0	; has object fallen back to its	original position?
0000EF06 6400                       		bcc.s	loc_E41E	; if not, branch
0000EF08 5428 0024                  		addq.b	#2,$24(a0)	; goto "Obj14_Delete" routine
0000EF0C                            
0000EF0C                            loc_E41E:
0000EF0C 08A8 0001 0022             		bclr	#1,$22(a0)
0000EF12 4A68 0012                  		tst.w	$12(a0)
0000EF16 6A00                       		bpl.s	locret_E430
0000EF18 08E8 0001 0022             		bset	#1,$22(a0)
0000EF1E                            
0000EF1E                            locret_E430:
0000EF1E 4E75                       		rts	
0000EF20                            ; ===========================================================================
0000EF20                            ; lavaball type	04 flies up until it hits the ceiling
0000EF20                            
0000EF20                            Obj14_Type04:				; XREF: Obj14_TypeIndex
0000EF20 08E8 0001 0022             		bset	#1,$22(a0)
0000EF26 6100 0000                  		bsr.w	ObjHitCeiling
0000EF2A 4A41                       		tst.w	d1
0000EF2C 6A00                       		bpl.s	locret_E452
0000EF2E 117C 0008 0028             		move.b	#8,$28(a0)
0000EF34 117C 0001 001C             		move.b	#1,$1C(a0)
0000EF3A 317C 0000 0012             		move.w	#0,$12(a0)	; stop the object when it touches the ceiling
0000EF40                            
0000EF40                            locret_E452:
0000EF40 4E75                       		rts	
0000EF42                            ; ===========================================================================
0000EF42                            ; lavaball type	05 falls down until it hits the	floor
0000EF42                            
0000EF42                            Obj14_Type05:				; XREF: Obj14_TypeIndex
0000EF42 08A8 0001 0022             		bclr	#1,$22(a0)
0000EF48 6100 0000                  		bsr.w	ObjHitFloor
0000EF4C 4A41                       		tst.w	d1
0000EF4E 6A00                       		bpl.s	locret_E474
0000EF50 117C 0008 0028             		move.b	#8,$28(a0)
0000EF56 117C 0001 001C             		move.b	#1,$1C(a0)
0000EF5C 317C 0000 0012             		move.w	#0,$12(a0)	; stop the object when it touches the floor
0000EF62                            
0000EF62                            locret_E474:
0000EF62 4E75                       		rts	
0000EF64                            ; ===========================================================================
0000EF64                            ; lavaball types 06-07 move sideways
0000EF64                            
0000EF64                            Obj14_Type06:				; XREF: Obj14_TypeIndex
0000EF64 08E8 0000 0022             		bset	#0,$22(a0)
0000EF6A 76F8                       		moveq	#-8,d3
0000EF6C 6100 0000                  		bsr.w	ObjHitWallLeft
0000EF70 4A41                       		tst.w	d1
0000EF72 6A00                       		bpl.s	locret_E498
0000EF74 117C 0008 0028             		move.b	#8,$28(a0)
0000EF7A 117C 0003 001C             		move.b	#3,$1C(a0)
0000EF80 317C 0000 0010             		move.w	#0,$10(a0)	; stop object when it touches a	wall
0000EF86                            
0000EF86                            locret_E498:
0000EF86 4E75                       		rts	
0000EF88                            ; ===========================================================================
0000EF88                            
0000EF88                            Obj14_Type07:				; XREF: Obj14_TypeIndex
0000EF88 08A8 0000 0022             		bclr	#0,$22(a0)
0000EF8E 7608                       		moveq	#8,d3
0000EF90 6100 0000                  		bsr.w	ObjHitWallRight
0000EF94 4A41                       		tst.w	d1
0000EF96 6A00                       		bpl.s	locret_E4BC
0000EF98 117C 0008 0028             		move.b	#8,$28(a0)
0000EF9E 117C 0003 001C             		move.b	#3,$1C(a0)
0000EFA4 317C 0000 0010             		move.w	#0,$10(a0)	; stop object when it touches a	wall
0000EFAA                            
0000EFAA                            locret_E4BC:
0000EFAA 4E75                       		rts	
0000EFAC                            ; ===========================================================================
0000EFAC                            
0000EFAC                            Obj14_Type08:				; XREF: Obj14_TypeIndex
0000EFAC 4E75                       		rts	
0000EFAE                            ; ===========================================================================
0000EFAE                            
0000EFAE                            Obj14_Delete:				; XREF: Obj14_Index
0000EFAE 6000 F170                  		bra.w	DeleteObject
0000EFB2                            ; ===========================================================================
0000EFB2                            Ani_obj14:
0000EFB2                            	include "_anim\obj14.asm"
0000EFB2                            ; ---------------------------------------------------------------------------
0000EFB2                            ; Animation script - lava balls
0000EFB2                            ; ---------------------------------------------------------------------------
0000EFB2 0000                       		dc.w byte_E4CC-Ani_obj14
0000EFB4 0000                       		dc.w byte_E4D2-Ani_obj14
0000EFB6 0000                       		dc.w byte_E4D6-Ani_obj14
0000EFB8 0000                       		dc.w byte_E4DC-Ani_obj14
0000EFBA 0500 2001 21FF             byte_E4CC:	dc.b 5,	0, $20,	1, $21,	$FF
0000EFC0 0502 FC00                  byte_E4D2:	dc.b 5,	2, $FC,	0
0000EFC4 0503 4304 44FF             byte_E4D6:	dc.b 5,	3, $43,	4, $44,	$FF
0000EFCA 0505 FC00                  byte_E4DC:	dc.b 5,	5, $FC,	0
0000EFCE                            		even
0000EFCE                            		even
0000EFCE                            
0000EFCE                            ; ===========================================================================
0000EFCE                            ; ---------------------------------------------------------------------------
0000EFCE                            ; Object 6D - flame thrower (SBZ)
0000EFCE                            ; ---------------------------------------------------------------------------
0000EFCE                            
0000EFCE                            Obj6D:					; XREF: Obj_Index
0000EFCE 7000                       		moveq	#0,d0
0000EFD0 1028 0024                  		move.b	$24(a0),d0
0000EFD4 323B 0000                  		move.w	Obj6D_Index(pc,d0.w),d1
0000EFD8 4EFB 1000                  		jmp	Obj6D_Index(pc,d1.w)
0000EFDC                            ; ===========================================================================
0000EFDC 0000                       Obj6D_Index:	dc.w Obj6D_Main-Obj6D_Index
0000EFDE 0000                       		dc.w Obj6D_Action-Obj6D_Index
0000EFE0                            ; ===========================================================================
0000EFE0                            
0000EFE0                            Obj6D_Main:				; XREF: Obj6D_Index
0000EFE0 5428 0024                  		addq.b	#2,$24(a0)
0000EFE4 217C 0000 0000 0004        		move.l	#Map_obj6D,4(a0)
0000EFEC 317C 83D9 0002             		move.w	#$83D9,2(a0)
0000EFF2 0028 0004 0001             		ori.b	#4,1(a0)
0000EFF8 117C 0001 0018             		move.b	#1,$18(a0)
0000EFFE 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000F004 117C 000C 0019             		move.b	#$C,$19(a0)
0000F00A 1028 0028                  		move.b	$28(a0),d0
0000F00E 0240 00F0                  		andi.w	#$F0,d0		; read 1st digit of object type
0000F012 D040                       		add.w	d0,d0		; multiply by 2
0000F014 3140 0030                  		move.w	d0,$30(a0)
0000F018 3140 0032                  		move.w	d0,$32(a0)	; set flaming time
0000F01C 1028 0028                  		move.b	$28(a0),d0
0000F020 0240 000F                  		andi.w	#$F,d0		; read 2nd digit of object type
0000F024 EB48                       		lsl.w	#5,d0		; multiply by $20
0000F026 3140 0034                  		move.w	d0,$34(a0)	; set pause time
0000F02A 117C 000A 0036             		move.b	#$A,$36(a0)
0000F030 0828 0001 0022             		btst	#1,$22(a0)
0000F036 6700                       		beq.s	Obj6D_Action
0000F038 117C 0002 001C             		move.b	#2,$1C(a0)
0000F03E 117C 0015 0036             		move.b	#$15,$36(a0)
0000F044                            
0000F044                            Obj6D_Action:				; XREF: Obj6D_Index
0000F044 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time
0000F048 6A00                       		bpl.s	loc_E57A	; if time remains, branch
0000F04A 3168 0034 0030             		move.w	$34(a0),$30(a0)	; begin	pause time
0000F050 0868 0000 001C             		bchg	#0,$1C(a0)
0000F056 6700                       		beq.s	loc_E57A
0000F058 3168 0032 0030             		move.w	$32(a0),$30(a0)	; begin	flaming	time
0000F05E 303C 00B3                  		move.w	#$B3,d0
0000F062 4EB9 0000 147C             		jsr	(PlaySound_Special).l ;	play flame sound
0000F068                            
0000F068                            loc_E57A:
0000F068 43F9 0000 0000             		lea	(Ani_obj6D).l,a1
0000F06E 6100 C186                  		bsr.w	AnimateSprite
0000F072 117C 0000 0020             		move.b	#0,$20(a0)
0000F078 1028 0036                  		move.b	$36(a0),d0
0000F07C B028 001A                  		cmp.b	$1A(a0),d0
0000F080 6600                       		bne.s	Obj6D_ChkDel
0000F082 117C 00A3 0020             		move.b	#$A3,$20(a0)
0000F088                            
0000F088                            Obj6D_ChkDel:
0000F088 3028 0008                  		move.w	8(a0),d0
0000F08C 0240 FF80                  		andi.w	#$FF80,d0
0000F090 3238 F700                  		move.w	($FFFFF700).w,d1
0000F094 0441 0080                  		subi.w	#$80,d1
0000F098 0241 FF80                  		andi.w	#$FF80,d1
0000F09C 9041                       		sub.w	d1,d0
0000F09E 0C40 0280                  		cmpi.w	#$280,d0
0000F0A2 6200 F07C                  		bhi.w	DeleteObject
0000F0A6 6000 F03C                  		bra.w	DisplaySprite
0000F0AA                            ; ===========================================================================
0000F0AA                            Ani_obj6D:
0000F0AA                            	include "_anim\obj6D.asm"
0000F0AA                            ; ---------------------------------------------------------------------------
0000F0AA                            ; Animation script - flamethrower (SBZ)
0000F0AA                            ; ---------------------------------------------------------------------------
0000F0AA 0000                       		dc.w byte_E5C4-Ani_obj6D
0000F0AC 0000                       		dc.w byte_E5D2-Ani_obj6D
0000F0AE 0000                       		dc.w byte_E5DC-Ani_obj6D
0000F0B0 0000                       		dc.w byte_E5EA-Ani_obj6D
0000F0B2 0300 0102 0304 0506 0708+  byte_E5C4:	dc.b 3,	0, 1, 2, 3, 4, 5, 6, 7,	8, 9, $A, $FE, 2
0000F0C0 0009 0705 0301 00FE 0100   byte_E5D2:	dc.b 0,	9, 7, 5, 3, 1, 0, $FE, 1, 0
0000F0CA 030B 0C0D 0E0F 1011 1213+  byte_E5DC:	dc.b 3,	$B, $C,	$D, $E,	$F, $10, $11, $12, $13,	$14, $15, $FE, 2
0000F0D8 0014 1211 0F0D 0BFE 0100   byte_E5EA:	dc.b 0,	$14, $12, $11, $F, $D, $B, $FE,	1, 0
0000F0E2                            		even
0000F0E2                            		even
0000F0E2                            
0000F0E2                            ; ---------------------------------------------------------------------------
0000F0E2                            ; Sprite mappings - flame thrower (SBZ)
0000F0E2                            ; ---------------------------------------------------------------------------
0000F0E2                            Map_obj6D:
0000F0E2                            	include "_maps\obj6D.asm"
0000F0E2                            ; ---------------------------------------------------------------------------
0000F0E2                            ; Sprite mappings - flame thrower (SBZ)
0000F0E2                            ; ---------------------------------------------------------------------------
0000F0E2 0000 0000                  		dc.w byte_E620-Map_obj6D, byte_E626-Map_obj6D
0000F0E6 0000 0000                  		dc.w byte_E631-Map_obj6D, byte_E63C-Map_obj6D
0000F0EA 0000 0000                  		dc.w byte_E64C-Map_obj6D, byte_E65C-Map_obj6D
0000F0EE 0000 0000                  		dc.w byte_E671-Map_obj6D, byte_E686-Map_obj6D
0000F0F2 0000 0000                  		dc.w byte_E6A0-Map_obj6D, byte_E6BA-Map_obj6D
0000F0F6 0000 0000                  		dc.w byte_E6D9-Map_obj6D, byte_E6F8-Map_obj6D
0000F0FA 0000 0000                  		dc.w byte_E6FE-Map_obj6D, byte_E709-Map_obj6D
0000F0FE 0000 0000                  		dc.w byte_E714-Map_obj6D, byte_E724-Map_obj6D
0000F102 0000 0000                  		dc.w byte_E734-Map_obj6D, byte_E749-Map_obj6D
0000F106 0000 0000                  		dc.w byte_E75E-Map_obj6D, byte_E778-Map_obj6D
0000F10A 0000 0000                  		dc.w byte_E792-Map_obj6D, byte_E7B1-Map_obj6D
0000F10E 01                         byte_E620:	dc.b 1
0000F10F 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F114 02                         byte_E626:	dc.b 2
0000F115 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F11A 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F11F 02                         byte_E631:	dc.b 2
0000F120 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F125 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F12A 03                         byte_E63C:	dc.b 3
0000F12B 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000F130 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F135 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F13A 03                         byte_E64C:	dc.b 3
0000F13B 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000F140 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F145 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F14A 04                         byte_E65C:	dc.b 4
0000F14B 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000F150 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000F155 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F15A 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F15F 04                         byte_E671:	dc.b 4
0000F160 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000F165 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000F16A 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F16F 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F174 05                         byte_E686:	dc.b 5
0000F175 F80B 0008 F4               		dc.b $F8, $B, 0, 8, $F4
0000F17A 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000F17F 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000F184 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F189 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F18E 05                         byte_E6A0:	dc.b 5
0000F18F F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000F194 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000F199 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000F19E 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F1A3 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F1A8 06                         byte_E6BA:	dc.b 6
0000F1A9 E80B 0008 F4               		dc.b $E8, $B, 0, 8, $F4
0000F1AE F70B 0008 F4               		dc.b $F7, $B, 0, 8, $F4
0000F1B3 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000F1B8 0F06 0002 F8               		dc.b $F, 6, 0, 2, $F8
0000F1BD 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F1C2 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F1C7 06                         byte_E6D9:	dc.b 6
0000F1C8 E70B 0808 F4               		dc.b $E7, $B, 8, 8, $F4
0000F1CD F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000F1D2 0706 0802 F8               		dc.b 7,	6, 8, 2, $F8
0000F1D7 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000F1DC 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F1E1 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F1E6 01                         byte_E6F8:	dc.b 1
0000F1E7 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F1EC 02                         byte_E6FE:	dc.b 2
0000F1ED 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F1F2 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F1F7 02                         byte_E709:	dc.b 2
0000F1F8 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F1FD 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F202 03                         byte_E714:	dc.b 3
0000F203 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000F208 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F20D 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F212 03                         byte_E724:	dc.b 3
0000F213 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000F218 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F21D 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F222 04                         byte_E734:	dc.b 4
0000F223 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000F228 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000F22D 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F232 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F237 04                         byte_E749:	dc.b 4
0000F238 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000F23D 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000F242 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F247 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F24C 05                         byte_E75E:	dc.b 5
0000F24D F80B 0008 F4               		dc.b $F8, $B, 0, 8, $F4
0000F252 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000F257 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000F25C 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F261 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F266 05                         byte_E778:	dc.b 5
0000F267 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000F26C 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000F271 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000F276 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F27B 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F280 06                         byte_E792:	dc.b 6
0000F281 E80B 0008 F4               		dc.b $E8, $B, 0, 8, $F4
0000F286 F70B 0008 F4               		dc.b $F7, $B, 0, 8, $F4
0000F28B 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000F290 0F06 0002 F8               		dc.b $F, 6, 0, 2, $F8
0000F295 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F29A 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F29F 06                         byte_E7B1:	dc.b 6
0000F2A0 E70B 0808 F4               		dc.b $E7, $B, 8, 8, $F4
0000F2A5 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000F2AA 0706 0802 F8               		dc.b 7,	6, 8, 2, $F8
0000F2AF 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000F2B4 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F2B9 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F2BE                            		even
0000F2BE                            		even
0000F2BE                            
0000F2BE                            ; ===========================================================================
0000F2BE                            ; ---------------------------------------------------------------------------
0000F2BE                            ; Object 46 - solid blocks and blocks that fall	from the ceiling (MZ)
0000F2BE                            ; ---------------------------------------------------------------------------
0000F2BE                            
0000F2BE                            Obj46:					; XREF: Obj_Index
0000F2BE 7000                       		moveq	#0,d0
0000F2C0 1028 0024                  		move.b	$24(a0),d0
0000F2C4 323B 0000                  		move.w	Obj46_Index(pc,d0.w),d1
0000F2C8 4EFB 1000                  		jmp	Obj46_Index(pc,d1.w)
0000F2CC                            ; ===========================================================================
0000F2CC 0000                       Obj46_Index:	dc.w Obj46_Main-Obj46_Index
0000F2CE 0000                       		dc.w Obj46_Action-Obj46_Index
0000F2D0                            ; ===========================================================================
0000F2D0                            
0000F2D0                            Obj46_Main:				; XREF: Obj46_Index
0000F2D0 5428 0024                  		addq.b	#2,$24(a0)
0000F2D4 117C 000F 0016             		move.b	#$F,$16(a0)
0000F2DA 117C 000F 0017             		move.b	#$F,$17(a0)
0000F2E0 217C 0000 0000 0004        		move.l	#Map_obj46,4(a0)
0000F2E8 317C 4000 0002             		move.w	#$4000,2(a0)
0000F2EE 117C 0004 0001             		move.b	#4,1(a0)
0000F2F4 117C 0003 0018             		move.b	#3,$18(a0)
0000F2FA 117C 0010 0019             		move.b	#$10,$19(a0)
0000F300 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000F306 317C 05C0 0032             		move.w	#$5C0,$32(a0)
0000F30C                            
0000F30C                            Obj46_Action:				; XREF: Obj46_Index
0000F30C 4A28 0001                  		tst.b	1(a0)
0000F310 6A00                       		bpl.s	Obj46_ChkDel
0000F312 7000                       		moveq	#0,d0
0000F314 1028 0028                  		move.b	$28(a0),d0	; get object type
0000F318 0240 0007                  		andi.w	#7,d0		; read only the	1st digit
0000F31C D040                       		add.w	d0,d0
0000F31E 323B 0000                  		move.w	Obj46_TypeIndex(pc,d0.w),d1
0000F322 4EBB 1000                  		jsr	Obj46_TypeIndex(pc,d1.w)
0000F326 323C 001B                  		move.w	#$1B,d1
0000F32A 343C 0010                  		move.w	#$10,d2
0000F32E 363C 0011                  		move.w	#$11,d3
0000F332 3828 0008                  		move.w	8(a0),d4
0000F336 6100 0000                  		bsr.w	SolidObject
0000F33A                            
0000F33A                            Obj46_ChkDel:
0000F33A 6100 EDA8                  		bsr.w	DisplaySprite
0000F33E 3028 0008                  		move.w	8(a0),d0
0000F342 0240 FF80                  		andi.w	#$FF80,d0
0000F346 3238 F700                  		move.w	($FFFFF700).w,d1
0000F34A 0441 0080                  		subi.w	#$80,d1
0000F34E 0241 FF80                  		andi.w	#$FF80,d1
0000F352 9041                       		sub.w	d1,d0
0000F354 0C40 0280                  		cmpi.w	#$280,d0
0000F358 6200 EDC6                  		bhi.w	DeleteObject
0000F35C 4E75                       		rts	
0000F35E                            ; ===========================================================================
0000F35E 0000                       Obj46_TypeIndex:dc.w Obj46_Type00-Obj46_TypeIndex
0000F360 0000                       		dc.w Obj46_Type01-Obj46_TypeIndex
0000F362 0000                       		dc.w Obj46_Type02-Obj46_TypeIndex
0000F364 0000                       		dc.w Obj46_Type03-Obj46_TypeIndex
0000F366 0000                       		dc.w Obj46_Type04-Obj46_TypeIndex
0000F368                            ; ===========================================================================
0000F368                            
0000F368                            Obj46_Type00:				; XREF: Obj46_TypeIndex
0000F368 4E75                       		rts	
0000F36A                            ; ===========================================================================
0000F36A                            
0000F36A                            Obj46_Type02:				; XREF: Obj46_TypeIndex
0000F36A 3038 D008                  		move.w	($FFFFD008).w,d0
0000F36E 9068 0008                  		sub.w	8(a0),d0
0000F372 6400                       		bcc.s	loc_E888
0000F374 4440                       		neg.w	d0
0000F376                            
0000F376                            loc_E888:
0000F376 0C40 0090                  		cmpi.w	#$90,d0		; is Sonic within $90 pixels of	the block?
0000F37A 6400                       		bcc.s	Obj46_Type01	; if not, resume wobbling
0000F37C 117C 0003 0028             		move.b	#3,$28(a0)	; if yes, make the block fall
0000F382                            
0000F382                            Obj46_Type01:				; XREF: Obj46_TypeIndex
0000F382 7000                       		moveq	#0,d0
0000F384 1038 FE74                  		move.b	($FFFFFE74).w,d0
0000F388 0828 0003 0028             		btst	#3,$28(a0)
0000F38E 6700                       		beq.s	loc_E8A8
0000F390 4440                       		neg.w	d0
0000F392 0640 0010                  		addi.w	#$10,d0
0000F396                            
0000F396                            loc_E8A8:
0000F396 3228 0030                  		move.w	$30(a0),d1
0000F39A 9240                       		sub.w	d0,d1
0000F39C 3141 000C                  		move.w	d1,$C(a0)	; update the block's position to make it wobble
0000F3A0 4E75                       		rts	
0000F3A2                            ; ===========================================================================
0000F3A2                            
0000F3A2                            Obj46_Type03:				; XREF: Obj46_TypeIndex
0000F3A2 6100 ED1A                  		bsr.w	SpeedToPos
0000F3A6 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase falling speed
0000F3AC 6100 0000                  		bsr.w	ObjHitFloor
0000F3B0 4A41                       		tst.w	d1		; has the block	hit the	floor?
0000F3B2 6A00 0000                  		bpl.w	locret_E8EE	; if not, branch
0000F3B6 D368 000C                  		add.w	d1,$C(a0)
0000F3BA 4268 0012                  		clr.w	$12(a0)		; stop the block falling
0000F3BE 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000F3C4 117C 0004 0028             		move.b	#4,$28(a0)
0000F3CA 3011                       		move.w	(a1),d0
0000F3CC 0240 03FF                  		andi.w	#$3FF,d0
0000F3D0 0C40 02E8                  		cmpi.w	#$2E8,d0
0000F3D4 6400                       		bcc.s	locret_E8EE
0000F3D6 117C 0000 0028             		move.b	#0,$28(a0)
0000F3DC                            
0000F3DC                            locret_E8EE:
0000F3DC 4E75                       		rts	
0000F3DE                            ; ===========================================================================
0000F3DE                            
0000F3DE                            Obj46_Type04:				; XREF: Obj46_TypeIndex
0000F3DE 7000                       		moveq	#0,d0
0000F3E0 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000F3E4 E648                       		lsr.w	#3,d0
0000F3E6 3228 0030                  		move.w	$30(a0),d1
0000F3EA 9240                       		sub.w	d0,d1
0000F3EC 3141 000C                  		move.w	d1,$C(a0)	; make the block wobble
0000F3F0 4E75                       		rts	
0000F3F2                            ; ===========================================================================
0000F3F2                            ; ---------------------------------------------------------------------------
0000F3F2                            ; Sprite mappings - solid blocks and blocks that fall from the ceiling (MZ)
0000F3F2                            ; ---------------------------------------------------------------------------
0000F3F2                            Map_obj46:
0000F3F2                            	include "_maps\obj46.asm"
0000F3F2                            ; ---------------------------------------------------------------------------
0000F3F2                            ; Sprite mappings - solid blocks and blocks that fall from the ceiling (MZ)
0000F3F2                            ; ---------------------------------------------------------------------------
0000F3F2 0000                       		dc.w byte_E906-Map_obj46
0000F3F4 01                         byte_E906:	dc.b 1
0000F3F5 F00F 0001 F0               		dc.b $F0, $F, 0, 1, $F0
0000F3FA                            		even
0000F3FA                            		even
0000F3FA                            
0000F3FA                            ; ===========================================================================
0000F3FA                            ; ---------------------------------------------------------------------------
0000F3FA                            ; Object 12 - lamp (SYZ)
0000F3FA                            ; ---------------------------------------------------------------------------
0000F3FA                            
0000F3FA                            Obj12:					; XREF: Obj_Index
0000F3FA 7000                       		moveq	#0,d0
0000F3FC 1028 0024                  		move.b	$24(a0),d0
0000F400 323B 0000                  		move.w	Obj12_Index(pc,d0.w),d1
0000F404 4EFB 1000                  		jmp	Obj12_Index(pc,d1.w)
0000F408                            ; ===========================================================================
0000F408 0000                       Obj12_Index:	dc.w Obj12_Main-Obj12_Index
0000F40A 0000                       		dc.w Obj12_Animate-Obj12_Index
0000F40C                            ; ===========================================================================
0000F40C                            
0000F40C                            Obj12_Main:				; XREF: Obj12_Index
0000F40C 5428 0024                  		addq.b	#2,$24(a0)
0000F410 217C 0000 0000 0004        		move.l	#Map_obj12,4(a0)
0000F418 317C 0000 0002             		move.w	#0,2(a0)
0000F41E 117C 0004 0001             		move.b	#4,1(a0)
0000F424 117C 0010 0019             		move.b	#$10,$19(a0)
0000F42A 117C 0006 0018             		move.b	#6,$18(a0)
0000F430                            
0000F430                            Obj12_Animate:				; XREF: Obj12_Index
0000F430 5328 001E                  		subq.b	#1,$1E(a0)
0000F434 6A00                       		bpl.s	Obj12_ChkDel
0000F436 117C 0007 001E             		move.b	#7,$1E(a0)
0000F43C 5228 001A                  		addq.b	#1,$1A(a0)
0000F440 0C28 0006 001A             		cmpi.b	#6,$1A(a0)
0000F446 6500                       		bcs.s	Obj12_ChkDel
0000F448 117C 0000 001A             		move.b	#0,$1A(a0)
0000F44E                            
0000F44E                            Obj12_ChkDel:
0000F44E 3028 0008                  		move.w	8(a0),d0
0000F452 0240 FF80                  		andi.w	#$FF80,d0
0000F456 3238 F700                  		move.w	($FFFFF700).w,d1
0000F45A 0441 0080                  		subi.w	#$80,d1
0000F45E 0241 FF80                  		andi.w	#$FF80,d1
0000F462 9041                       		sub.w	d1,d0
0000F464 0C40 0280                  		cmpi.w	#$280,d0
0000F468 6200 ECB6                  		bhi.w	DeleteObject
0000F46C 6000 EC76                  		bra.w	DisplaySprite
0000F470                            ; ===========================================================================
0000F470                            ; ---------------------------------------------------------------------------
0000F470                            ; Sprite mappings - lamp (SYZ)
0000F470                            ; ---------------------------------------------------------------------------
0000F470                            Map_obj12:
0000F470                            	include "_maps\obj12.asm"
0000F470                            ; ---------------------------------------------------------------------------
0000F470                            ; Sprite mappings - lamp (SYZ)
0000F470                            ; ---------------------------------------------------------------------------
0000F470 0000 0000                  		dc.w byte_E98E-Map_obj12, byte_E999-Map_obj12
0000F474 0000 0000                  		dc.w byte_E9A4-Map_obj12, byte_E9AF-Map_obj12
0000F478 0000 0000                  		dc.w byte_E9BA-Map_obj12, byte_E9C5-Map_obj12
0000F47C 02                         byte_E98E:	dc.b 2
0000F47D F80C 0031 F0               		dc.b $F8, $C, 0, $31, $F0
0000F482 000C 1031 F0               		dc.b 0,	$C, $10, $31, $F0
0000F487 02                         byte_E999:	dc.b 2
0000F488 F80C 0035 F0               		dc.b $F8, $C, 0, $35, $F0
0000F48D 000C 1035 F0               		dc.b 0,	$C, $10, $35, $F0
0000F492 02                         byte_E9A4:	dc.b 2
0000F493 F80C 0039 F0               		dc.b $F8, $C, 0, $39, $F0
0000F498 000C 1039 F0               		dc.b 0,	$C, $10, $39, $F0
0000F49D 02                         byte_E9AF:	dc.b 2
0000F49E F80C 003D F0               		dc.b $F8, $C, 0, $3D, $F0
0000F4A3 000C 103D F0               		dc.b 0,	$C, $10, $3D, $F0
0000F4A8 02                         byte_E9BA:	dc.b 2
0000F4A9 F80C 0041 F0               		dc.b $F8, $C, 0, $41, $F0
0000F4AE 000C 1041 F0               		dc.b 0,	$C, $10, $41, $F0
0000F4B3 02                         byte_E9C5:	dc.b 2
0000F4B4 F80C 0045 F0               		dc.b $F8, $C, 0, $45, $F0
0000F4B9 000C 1045 F0               		dc.b 0,	$C, $10, $45, $F0
0000F4BE                            		even
0000F4BE                            		even
0000F4BE                            
0000F4BE                            ; ===========================================================================
0000F4BE                            ; ---------------------------------------------------------------------------
0000F4BE                            ; Object 47 - pinball bumper (SYZ)
0000F4BE                            ; ---------------------------------------------------------------------------
0000F4BE                            
0000F4BE                            Obj47:					; XREF: Obj_Index
0000F4BE 7000                       		moveq	#0,d0
0000F4C0 1028 0024                  		move.b	$24(a0),d0
0000F4C4 323B 0000                  		move.w	Obj47_Index(pc,d0.w),d1
0000F4C8 4EFB 1000                  		jmp	Obj47_Index(pc,d1.w)
0000F4CC                            ; ===========================================================================
0000F4CC 0000                       Obj47_Index:	dc.w Obj47_Main-Obj47_Index
0000F4CE 0000                       		dc.w Obj47_Hit-Obj47_Index
0000F4D0                            ; ===========================================================================
0000F4D0                            
0000F4D0                            Obj47_Main:				; XREF: Obj47_Index
0000F4D0 5428 0024                  		addq.b	#2,$24(a0)
0000F4D4 217C 0000 0000 0004        		move.l	#Map_obj47,4(a0)
0000F4DC 317C 0380 0002             		move.w	#$380,2(a0)
0000F4E2 117C 0004 0001             		move.b	#4,1(a0)
0000F4E8 117C 0010 0019             		move.b	#$10,$19(a0)
0000F4EE 117C 0001 0018             		move.b	#1,$18(a0)
0000F4F4 117C 00D7 0020             		move.b	#$D7,$20(a0)
0000F4FA                            
0000F4FA                            Obj47_Hit:				; XREF: Obj47_Index
0000F4FA 4A28 0021                  		tst.b	$21(a0)		; has Sonic touched the	bumper?
0000F4FE 6700 0000                  		beq.w	Obj47_Display	; if not, branch
0000F502 4228 0021                  		clr.b	$21(a0)
0000F506 43F8 D000                  		lea	($FFFFD000).w,a1
0000F50A 3228 0008                  		move.w	8(a0),d1
0000F50E 3428 000C                  		move.w	$C(a0),d2
0000F512 9269 0008                  		sub.w	8(a1),d1
0000F516 9469 000C                  		sub.w	$C(a1),d2
0000F51A 4EB9 0000 36A8             		jsr	(CalcAngle).l
0000F520 4EB9 0000 33DA             		jsr	(CalcSine).l
0000F526 C3FC F900                  		muls.w	#-$700,d1
0000F52A E081                       		asr.l	#8,d1
0000F52C 3341 0010                  		move.w	d1,$10(a1)	; bounce Sonic away
0000F530 C1FC F900                  		muls.w	#-$700,d0
0000F534 E080                       		asr.l	#8,d0
0000F536 3340 0012                  		move.w	d0,$12(a1)	; bounce Sonic away
0000F53A 08E9 0001 0022             		bset	#1,$22(a1)
0000F540 08A9 0004 0022             		bclr	#4,$22(a1)
0000F546 08A9 0005 0022             		bclr	#5,$22(a1)
0000F54C 4229 003C                  		clr.b	$3C(a1)
0000F550 117C 0001 001C             		move.b	#1,$1C(a0)
0000F556 303C 00B4                  		move.w	#$B4,d0
0000F55A 4EB9 0000 147C             		jsr	(PlaySound_Special).l ;	play bumper sound
0000F560 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000F564 7000                       		moveq	#0,d0
0000F566 1028 0023                  		move.b	$23(a0),d0
0000F56A 6700                       		beq.s	Obj47_Score
0000F56C 0C32 008A 0002             		cmpi.b	#$8A,2(a2,d0.w)	; has bumper been hit $8A times?
0000F572 6400                       		bcc.s	Obj47_Display	; if yes, Sonic	gets no	points
0000F574 5232 0002                  		addq.b	#1,2(a2,d0.w)
0000F578                            
0000F578                            Obj47_Score:
0000F578 7001                       		moveq	#1,d0
0000F57A 4EB9 0000 0000             		jsr	AddPoints	; add 10 to score
0000F580 6100 EFF8                  		bsr.w	SingleObjLoad
0000F584 6600                       		bne.s	Obj47_Display
0000F586 12BC 0029                  		move.b	#$29,0(a1)	; load points object
0000F58A 3368 0008 0008             		move.w	8(a0),8(a1)
0000F590 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000F596 137C 0004 001A             		move.b	#4,$1A(a1)
0000F59C                            
0000F59C                            Obj47_Display:
0000F59C 43F9 0000 0000             		lea	(Ani_obj47).l,a1
0000F5A2 6100 BC52                  		bsr.w	AnimateSprite
0000F5A6 3028 0008                  		move.w	8(a0),d0
0000F5AA 0240 FF80                  		andi.w	#$FF80,d0
0000F5AE 3238 F700                  		move.w	($FFFFF700).w,d1
0000F5B2 0441 0080                  		subi.w	#$80,d1
0000F5B6 0241 FF80                  		andi.w	#$FF80,d1
0000F5BA 9041                       		sub.w	d1,d0
0000F5BC 0C40 0280                  		cmpi.w	#$280,d0
0000F5C0 6200                       		bhi.s	Obj47_ChkHit
0000F5C2 6000 EB20                  		bra.w	DisplaySprite
0000F5C6                            ; ===========================================================================
0000F5C6                            
0000F5C6                            Obj47_ChkHit:				; XREF: Obj47_Display
0000F5C6 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000F5CA 7000                       		moveq	#0,d0
0000F5CC 1028 0023                  		move.b	$23(a0),d0
0000F5D0 6700                       		beq.s	Obj47_Delete
0000F5D2 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000F5D8                            
0000F5D8                            Obj47_Delete:
0000F5D8 6000 EB46                  		bra.w	DeleteObject
0000F5DC                            ; ===========================================================================
0000F5DC                            Ani_obj47:
0000F5DC                            	include "_anim\obj47.asm"
0000F5DC                            ; ---------------------------------------------------------------------------
0000F5DC                            ; Animation script - flamethrower (SBZ)
0000F5DC                            ; ---------------------------------------------------------------------------
0000F5DC 0000                       		dc.w byte_EAF4-Ani_obj47
0000F5DE 0000                       		dc.w byte_EAF8-Ani_obj47
0000F5E0 0F00 FF00                  byte_EAF4:	dc.b $F, 0, $FF, 0
0000F5E4 0301 0201 02FD 0000        byte_EAF8:	dc.b 3,	1, 2, 1, 2, $FD, 0, 0
0000F5EC                            		even
0000F5EC                            		even
0000F5EC                            
0000F5EC                            ; ---------------------------------------------------------------------------
0000F5EC                            ; Sprite mappings - pinball bumper (SYZ)
0000F5EC                            ; ---------------------------------------------------------------------------
0000F5EC                            Map_obj47:
0000F5EC                            	include "_maps\obj47.asm"
0000F5EC                            ; ---------------------------------------------------------------------------
0000F5EC                            ; Sprite mappings - pinball bumper (SYZ)
0000F5EC                            ; ---------------------------------------------------------------------------
0000F5EC 0000                       		dc.w byte_EB06-Map_obj47
0000F5EE 0000                       		dc.w byte_EB11-Map_obj47
0000F5F0 0000                       		dc.w byte_EB1C-Map_obj47
0000F5F2 02                         byte_EB06:	dc.b 2
0000F5F3 F007 0000 F0               		dc.b $F0, 7, 0,	0, $F0
0000F5F8 F007 0800 00               		dc.b $F0, 7, 8,	0, 0
0000F5FD 02                         byte_EB11:	dc.b 2
0000F5FE F406 0008 F4               		dc.b $F4, 6, 0,	8, $F4
0000F603 F402 0808 04               		dc.b $F4, 2, 8,	8, 4
0000F608 02                         byte_EB1C:	dc.b 2
0000F609 F007 000E F0               		dc.b $F0, 7, 0,	$E, $F0
0000F60E F007 080E 00               		dc.b $F0, 7, 8,	$E, 0
0000F614 00                         		even
0000F614 00                         		even
0000F614                            
0000F614                            ; ===========================================================================
0000F614                            ; ---------------------------------------------------------------------------
0000F614                            ; Object 0D - signpost at the end of a level
0000F614                            ; ---------------------------------------------------------------------------
0000F614                            
0000F614                            Obj0D:					; XREF: Obj_Index
0000F614 7000                       		moveq	#0,d0
0000F616 1028 0024                  		move.b	$24(a0),d0
0000F61A 323B 0000                  		move.w	Obj0D_Index(pc,d0.w),d1
0000F61E 4EBB 1000                  		jsr	Obj0D_Index(pc,d1.w)
0000F622 43F9 0000 0000             		lea	(Ani_obj0D).l,a1
0000F628 6100 BBCC                  		bsr.w	AnimateSprite
0000F62C 6100 EAB6                  		bsr.w	DisplaySprite
0000F630 3028 0008                  		move.w	8(a0),d0
0000F634 0240 FF80                  		andi.w	#$FF80,d0
0000F638 3238 F700                  		move.w	($FFFFF700).w,d1
0000F63C 0441 0080                  		subi.w	#$80,d1
0000F640 0241 FF80                  		andi.w	#$FF80,d1
0000F644 9041                       		sub.w	d1,d0
0000F646 0C40 0280                  		cmpi.w	#$280,d0
0000F64A 6200 EAD4                  		bhi.w	DeleteObject
0000F64E 4E75                       		rts	
0000F650                            ; ===========================================================================
0000F650 0000                       Obj0D_Index:	dc.w Obj0D_Main-Obj0D_Index
0000F652 0000                       		dc.w Obj0D_Touch-Obj0D_Index
0000F654 0000                       		dc.w Obj0D_Spin-Obj0D_Index
0000F656 0000                       		dc.w Obj0D_SonicRun-Obj0D_Index
0000F658 0000                       		dc.w locret_ED1A-Obj0D_Index
0000F65A                            ; ===========================================================================
0000F65A                            
0000F65A                            Obj0D_Main:				; XREF: Obj0D_Index
0000F65A 5428 0024                  		addq.b	#2,$24(a0)
0000F65E 217C 0000 0000 0004        		move.l	#Map_obj0D,4(a0)
0000F666 317C 0680 0002             		move.w	#$680,2(a0)
0000F66C 117C 0004 0001             		move.b	#4,1(a0)
0000F672 117C 0018 0019             		move.b	#$18,$19(a0)
0000F678 117C 0004 0018             		move.b	#4,$18(a0)
0000F67E                            
0000F67E                            Obj0D_Touch:				; XREF: Obj0D_Index
0000F67E 3038 D008                  		move.w	($FFFFD008).w,d0
0000F682 9068 0008                  		sub.w	8(a0),d0
0000F686 6500                       		bcs.s	locret_EBBA
0000F688 0C40 0020                  		cmpi.w	#$20,d0		; is Sonic within $20 pixels of	the signpost?
0000F68C 6400                       		bcc.s	locret_EBBA	; if not, branch
0000F68E 303C 00CF                  		move.w	#$CF,d0
0000F692 4EB9 0000 1476             		jsr	(PlaySound).l	; play signpost	sound
0000F698 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0000F69C 31F8 F72A F728             		move.w	($FFFFF72A).w,($FFFFF728).w ; lock screen position
0000F6A2 5428 0024                  		addq.b	#2,$24(a0)
0000F6A6                            
0000F6A6                            locret_EBBA:
0000F6A6 4E75                       		rts	
0000F6A8                            ; ===========================================================================
0000F6A8                            
0000F6A8                            Obj0D_Spin:				; XREF: Obj0D_Index
0000F6A8 4238 FE19                  		clr.b (Super_Sonic_Flag).w ; Revert Sonic to Normal
0000F6AC 31FC 0600 F760             		move.w #$600,(Sonic_top_speed).w ; Revert speeds
0000F6B2 31FC 000C F762             		move.w #$C,(Sonic_acceleration).w ; ^^^
0000F6B8 31FC 0080 F764             		move.w #$80,(Sonic_deceleration).w ; ^^^
0000F6BE 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from spin time
0000F6C2 6A00                       		bpl.s	Obj0D_Sparkle	; if time remains, branch
0000F6C4 317C 003C 0030             		move.w	#60,$30(a0)	; set spin cycle time to 1 second
0000F6CA 5228 001C                  		addq.b	#1,$1C(a0)	; next spin cycle
0000F6CE 0C28 0003 001C             		cmpi.b	#3,$1C(a0)	; have 3 spin cycles completed?
0000F6D4 6600                       		bne.s	Obj0D_Sparkle	; if not, branch
0000F6D6 5428 0024                  		addq.b	#2,$24(a0)
0000F6DA                            
0000F6DA                            Obj0D_Sparkle:
0000F6DA 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
0000F6DE 6A00                       		bpl.s	locret_EC42	; if time remains, branch
0000F6E0 317C 000B 0032             		move.w	#$B,$32(a0)	; set time between sparkles to $B frames
0000F6E6 7000                       		moveq	#0,d0
0000F6E8 1028 0034                  		move.b	$34(a0),d0
0000F6EC 5428 0034                  		addq.b	#2,$34(a0)
0000F6F0 0228 000E 0034             		andi.b	#$E,$34(a0)
0000F6F6 45FB 0000                  		lea	Obj0D_SparkPos(pc,d0.w),a2 ; load sparkle position data
0000F6FA 6100 EE7E                  		bsr.w	SingleObjLoad
0000F6FE 6600                       		bne.s	locret_EC42
0000F700 12BC 0025                  		move.b	#$25,0(a1)	; load rings object
0000F704 137C 0006 0024             		move.b	#6,$24(a1)	; jump to ring sparkle subroutine
0000F70A 101A                       		move.b	(a2)+,d0
0000F70C 4880                       		ext.w	d0
0000F70E D068 0008                  		add.w	8(a0),d0
0000F712 3340 0008                  		move.w	d0,8(a1)
0000F716 101A                       		move.b	(a2)+,d0
0000F718 4880                       		ext.w	d0
0000F71A D068 000C                  		add.w	$C(a0),d0
0000F71E 3340 000C                  		move.w	d0,$C(a1)
0000F722 237C 0000 AA38 0004        		move.l	#Map_obj25,4(a1)
0000F72A 337C 27B2 0002             		move.w	#$27B2,2(a1)
0000F730 137C 0004 0001             		move.b	#4,1(a1)
0000F736 137C 0002 0018             		move.b	#2,$18(a1)
0000F73C 137C 0008 0019             		move.b	#8,$19(a1)
0000F742                            
0000F742                            locret_EC42:
0000F742 4E75                       		rts	
0000F744                            ; ===========================================================================
0000F744 E8F0                       Obj0D_SparkPos:	dc.b -$18,-$10		; x-position, y-position
0000F746 0808                       		dc.b	8,   8
0000F748 F000                       		dc.b -$10,   0
0000F74A 18F8                       		dc.b  $18,  -8
0000F74C 00F8                       		dc.b	0,  -8
0000F74E 1000                       		dc.b  $10,   0
0000F750 E808                       		dc.b -$18,   8
0000F752 1810                       		dc.b  $18, $10
0000F754                            ; ===========================================================================
0000F754                            
0000F754                            Obj0D_SonicRun:				; XREF: Obj0D_Index
0000F754 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
0000F758 6600 0000                  		bne.w	locret_ECEE	; if yes, branch
0000F75C 0838 0001 D022             		btst	#1,($FFFFD022).w
0000F762 6600                       		bne.s	loc_EC70
0000F764 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
0000F76A 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; make Sonic run to	the right
0000F770                            
0000F770                            loc_EC70:
0000F770 4A38 D000                  		tst.b	($FFFFD000).w
0000F774 6700                       		beq.s	loc_EC86
0000F776 3038 D008                  		move.w	($FFFFD008).w,d0
0000F77A 3238 F72A                  		move.w	($FFFFF72A).w,d1
0000F77E 0641 0128                  		addi.w	#$128,d1
0000F782 B041                       		cmp.w	d1,d0
0000F784 6500                       		bcs.s	locret_ECEE
0000F786                            
0000F786                            loc_EC86:
0000F786 5428 0024                  		addq.b	#2,$24(a0)
0000F78A                            
0000F78A                            ; ---------------------------------------------------------------------------
0000F78A                            ; Subroutine to	set up bonuses at the end of an	act
0000F78A                            ; ---------------------------------------------------------------------------
0000F78A                            
0000F78A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F78A                            
0000F78A                            
0000F78A                            GotThroughAct:				; XREF: Obj3E_EndAct
0000F78A 4A38 D5C0                  		tst.b	($FFFFD5C0).w
0000F78E 6600                       		bne.s	locret_ECEE
0000F790 31F8 F72A F728             		move.w	($FFFFF72A).w,($FFFFF728).w
0000F796 4238 FE2D                  		clr.b	($FFFFFE2D).w	; disable invincibility
0000F79A 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0000F79E 11FC 003A D5C0             		move.b	#$3A,($FFFFD5C0).w
0000F7A4 7010                       		moveq	#$10,d0
0000F7A6 4EB9 0000 1722             		jsr	(LoadPLC2).l	; load title card patterns
0000F7AC 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w
0000F7B2 7000                       		moveq	#0,d0
0000F7B4 1038 FE23                  		move.b	($FFFFFE23).w,d0
0000F7B8 C0FC 003C                  		mulu.w	#60,d0		; convert minutes to seconds
0000F7BC 7200                       		moveq	#0,d1
0000F7BE 1238 FE24                  		move.b	($FFFFFE24).w,d1
0000F7C2 D041                       		add.w	d1,d0		; add up your time
0000F7C4 80FC 000F                  		divu.w	#15,d0		; divide by 15
0000F7C8 7214                       		moveq	#$14,d1
0000F7CA B041                       		cmp.w	d1,d0		; is time 5 minutes or higher?
0000F7CC 6500                       		bcs.s	loc_ECD0	; if not, branch
0000F7CE 3001                       		move.w	d1,d0		; use minimum time bonus (0)
0000F7D0                            
0000F7D0                            loc_ECD0:
0000F7D0 D040                       		add.w	d0,d0
0000F7D2 31FB 0000 F7D2             		move.w	TimeBonuses(pc,d0.w),($FFFFF7D2).w ; set time bonus
0000F7D8 3038 FE20                  		move.w	($FFFFFE20).w,d0 ; load	number of rings
0000F7DC C0FC 000A                  		mulu.w	#10,d0		; multiply by 10
0000F7E0 31C0 F7D4                  		move.w	d0,($FFFFF7D4).w ; set ring bonus
0000F7E4 303C 008E                  		move.w	#$8E,d0
0000F7E8 4EB9 0000 147C             		jsr	(PlaySound_Special).l ;	play "Sonic got	through" music
0000F7EE                            
0000F7EE                            locret_ECEE:
0000F7EE 4E75                       		rts	
0000F7F0                            ; End of function GotThroughAct
0000F7F0                            
0000F7F0                            ; ===========================================================================
0000F7F0 1388 1388 03E8 01F4 0190+  TimeBonuses:	dc.w 5000, 5000, 1000, 500, 400, 400, 300, 300,	200, 200
0000F804 00C8 00C8 0064 0064 0064+  		dc.w 200, 200, 100, 100, 100, 100, 50, 50, 50, 50, 0
0000F81A                            ; ===========================================================================
0000F81A                            
0000F81A                            locret_ED1A:				; XREF: Obj0D_Index
0000F81A 4E75                       		rts	
0000F81C                            ; ===========================================================================
0000F81C                            Ani_obj0D:
0000F81C                            	include "_anim\obj0D.asm"
0000F81C                            ; ---------------------------------------------------------------------------
0000F81C                            ; Animation script - signpost
0000F81C                            ; ---------------------------------------------------------------------------
0000F81C 0000                       		dc.w byte_ED24-Ani_obj0D
0000F81E 0000                       		dc.w byte_ED28-Ani_obj0D
0000F820 0000                       		dc.w byte_ED2E-Ani_obj0D
0000F822 0000                       		dc.w byte_ED34-Ani_obj0D
0000F824 0F00 FF00                  byte_ED24:	dc.b $F, 0, $FF, 0
0000F828 0100 0102 03FF             byte_ED28:	dc.b 1,	0, 1, 2, 3, $FF
0000F82E 0104 0102 03FF             byte_ED2E:	dc.b 1,	4, 1, 2, 3, $FF
0000F834 0F04 FF                    byte_ED34:	dc.b $F, 4, $FF
0000F838 00                         		even
0000F838 00                         		even
0000F838                            
0000F838                            ; ---------------------------------------------------------------------------
0000F838                            ; Sprite mappings - signpost
0000F838                            ; ---------------------------------------------------------------------------
0000F838                            Map_obj0D:
0000F838                            	include "_maps\obj0D.asm"
0000F838                            ; ---------------------------------------------------------------------------
0000F838                            ; Sprite mappings - signpost
0000F838                            ; ---------------------------------------------------------------------------
0000F838 0000 0000                  		dc.w byte_ED42-Map_obj0D, byte_ED52-Map_obj0D
0000F83C 0000 0000                  		dc.w byte_ED5D-Map_obj0D, byte_ED68-Map_obj0D
0000F840 0000                       		dc.w byte_ED73-Map_obj0D
0000F842 03                         byte_ED42:	dc.b 3
0000F843 F00B 0000 E8               		dc.b $F0, $B, 0, 0, $E8
0000F848 F00B 0800 00               		dc.b $F0, $B, 8, 0, 0
0000F84D 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
0000F852 02                         byte_ED52:	dc.b 2
0000F853 F00F 000C F0               		dc.b $F0, $F, 0, $C, $F0
0000F858 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
0000F85D 02                         byte_ED5D:	dc.b 2
0000F85E F003 001C FC               		dc.b $F0, 3, 0,	$1C, $FC
0000F863 1001 0838 FC               		dc.b $10, 1, 8,	$38, $FC
0000F868 02                         byte_ED68:	dc.b 2
0000F869 F00F 080C F0               		dc.b $F0, $F, 8, $C, $F0
0000F86E 1001 0838 FC               		dc.b $10, 1, 8,	$38, $FC
0000F873 03                         byte_ED73:	dc.b 3
0000F874 F00B 0020 E8               		dc.b $F0, $B, 0, $20, $E8
0000F879 F00B 002C 00               		dc.b $F0, $B, 0, $2C, 0
0000F87E 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
0000F884 00                         		even
0000F884 00                         		even
0000F884                            
0000F884                            ; ===========================================================================
0000F884                            ; ---------------------------------------------------------------------------
0000F884                            ; Object 4C - lava geyser / lavafall producer (MZ)
0000F884                            ; ---------------------------------------------------------------------------
0000F884                            
0000F884                            Obj4C:					; XREF: Obj_Index
0000F884 7000                       		moveq	#0,d0
0000F886 1028 0024                  		move.b	$24(a0),d0
0000F88A 323B 0000                  		move.w	Obj4C_Index(pc,d0.w),d1
0000F88E 4EBB 1000                  		jsr	Obj4C_Index(pc,d1.w)
0000F892 6000 0000                  		bra.w	Obj4D_ChkDel
0000F896                            ; ===========================================================================
0000F896 0000                       Obj4C_Index:	dc.w Obj4C_Main-Obj4C_Index
0000F898 0000                       		dc.w loc_EDCC-Obj4C_Index
0000F89A 0000                       		dc.w loc_EE3E-Obj4C_Index
0000F89C 0000                       		dc.w Obj4C_MakeLava-Obj4C_Index
0000F89E 0000                       		dc.w Obj4C_Display-Obj4C_Index
0000F8A0 0000                       		dc.w Obj4C_Delete-Obj4C_Index
0000F8A2                            ; ===========================================================================
0000F8A2                            
0000F8A2                            Obj4C_Main:				; XREF: Obj4C_Index
0000F8A2 5428 0024                  		addq.b	#2,$24(a0)
0000F8A6 217C 0000 0000 0004        		move.l	#Map_obj4C,4(a0)
0000F8AE 317C E3A8 0002             		move.w	#$E3A8,2(a0)
0000F8B4 117C 0004 0001             		move.b	#4,1(a0)
0000F8BA 117C 0001 0018             		move.b	#1,$18(a0)
0000F8C0 117C 0038 0019             		move.b	#$38,$19(a0)
0000F8C6 317C 0078 0034             		move.w	#120,$34(a0)	; set time delay to 2 seconds
0000F8CC                            
0000F8CC                            loc_EDCC:				; XREF: Obj4C_Index
0000F8CC 5368 0032                  		subq.w	#1,$32(a0)
0000F8D0 6A00                       		bpl.s	locret_EDF0
0000F8D2 3168 0034 0032             		move.w	$34(a0),$32(a0)
0000F8D8 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000F8DC 3228 000C                  		move.w	$C(a0),d1
0000F8E0 B041                       		cmp.w	d1,d0
0000F8E2 6400                       		bcc.s	locret_EDF0
0000F8E4 0441 0170                  		subi.w	#$170,d1
0000F8E8 B041                       		cmp.w	d1,d0
0000F8EA 6500                       		bcs.s	locret_EDF0
0000F8EC 5428 0024                  		addq.b	#2,$24(a0)
0000F8F0                            
0000F8F0                            locret_EDF0:
0000F8F0 4E75                       		rts	
0000F8F2                            ; ===========================================================================
0000F8F2                            
0000F8F2                            Obj4C_MakeLava:				; XREF: Obj4C_Index
0000F8F2 5428 0024                  		addq.b	#2,$24(a0)
0000F8F6 6100 EC98                  		bsr.w	SingleObjLoad2
0000F8FA 6600                       		bne.s	loc_EE18
0000F8FC 12BC 004D                  		move.b	#$4D,0(a1)	; load lavafall	object
0000F900 3368 0008 0008             		move.w	8(a0),8(a1)
0000F906 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000F90C 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000F912 2348 003C                  		move.l	a0,$3C(a1)
0000F916                            
0000F916                            loc_EE18:
0000F916 117C 0001 001C             		move.b	#1,$1C(a0)
0000F91C 4A28 0028                  		tst.b	$28(a0)		; is object type 00 (geyser) ?
0000F920 6700                       		beq.s	Obj4C_Type00	; if yes, branch
0000F922 117C 0004 001C             		move.b	#4,$1C(a0)
0000F928 6000                       		bra.s	Obj4C_Display
0000F92A                            ; ===========================================================================
0000F92A                            
0000F92A                            Obj4C_Type00:				; XREF: Obj4C_MakeLava
0000F92A 2268 003C                  		movea.l	$3C(a0),a1	; load geyser object
0000F92E 08E9 0001 0022             		bset	#1,$22(a1)
0000F934 337C FA80 0012             		move.w	#-$580,$12(a1)
0000F93A 6000                       		bra.s	Obj4C_Display
0000F93C                            ; ===========================================================================
0000F93C                            
0000F93C                            loc_EE3E:				; XREF: Obj4C_Index
0000F93C 4A28 0028                  		tst.b	$28(a0)		; is object type 00 (geyser) ?
0000F940 6700                       		beq.s	Obj4C_Display	; if yes, branch
0000F942 5428 0024                  		addq.b	#2,$24(a0)
0000F946 4E75                       		rts	
0000F948                            ; ===========================================================================
0000F948                            
0000F948                            Obj4C_Display:				; XREF: Obj4C_Index
0000F948 43F9 0000 0000             		lea	(Ani_obj4C).l,a1
0000F94E 6100 B8A6                  		bsr.w	AnimateSprite
0000F952 6100 E790                  		bsr.w	DisplaySprite
0000F956 4E75                       		rts	
0000F958                            ; ===========================================================================
0000F958                            
0000F958                            Obj4C_Delete:				; XREF: Obj4C_Index
0000F958 117C 0000 001C             		move.b	#0,$1C(a0)
0000F95E 117C 0002 0024             		move.b	#2,$24(a0)
0000F964 4A28 0028                  		tst.b	$28(a0)
0000F968 6700 E7B6                  		beq.w	DeleteObject
0000F96C 4E75                       		rts	
0000F96E                            ; ===========================================================================
0000F96E                            ; ---------------------------------------------------------------------------
0000F96E                            ; Object 4D - lava geyser / lavafall (MZ)
0000F96E                            ; ---------------------------------------------------------------------------
0000F96E                            
0000F96E                            Obj4D:					; XREF: Obj_Index
0000F96E 7000                       		moveq	#0,d0
0000F970 1028 0024                  		move.b	$24(a0),d0
0000F974 323B 0000                  		move.w	Obj4D_Index(pc,d0.w),d1
0000F978 4EBB 1000                  		jsr	Obj4D_Index(pc,d1.w)
0000F97C 6000 E766                  		bra.w	DisplaySprite
0000F980                            ; ===========================================================================
0000F980 0000                       Obj4D_Index:	dc.w Obj4D_Main-Obj4D_Index
0000F982 0000                       		dc.w Obj4D_Action-Obj4D_Index
0000F984 0000                       		dc.w loc_EFFC-Obj4D_Index
0000F986 0000                       		dc.w Obj4D_Delete-Obj4D_Index
0000F988                            
0000F988 FB00 0000                  Obj4D_Speeds:	dc.w $FB00, 0
0000F98C                            ; ===========================================================================
0000F98C                            
0000F98C                            Obj4D_Main:				; XREF: Obj4D_Index
0000F98C 5428 0024                  		addq.b	#2,$24(a0)
0000F990 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000F996 4A28 0028                  		tst.b	$28(a0)
0000F99A 6700                       		beq.s	loc_EEA4
0000F99C 0468 0250 000C             		subi.w	#$250,$C(a0)
0000F9A2                            
0000F9A2                            loc_EEA4:
0000F9A2 7000                       		moveq	#0,d0
0000F9A4 1028 0028                  		move.b	$28(a0),d0
0000F9A8 D040                       		add.w	d0,d0
0000F9AA 317B 00DC 0012             		move.w	Obj4D_Speeds(pc,d0.w),$12(a0)
0000F9B0 2248                       		movea.l	a0,a1
0000F9B2 7201                       		moveq	#1,d1
0000F9B4 6100                       		bsr.s	Obj4D_MakeLava
0000F9B6 6000                       		bra.s	loc_EF10
0000F9B8                            ; ===========================================================================
0000F9B8                            
0000F9B8                            Obj4D_Loop:
0000F9B8 6100 EBD6                  		bsr.w	SingleObjLoad2
0000F9BC 6600                       		bne.s	loc_EF0A
0000F9BE                            
0000F9BE                            Obj4D_MakeLava:				; XREF: Obj4D_Main
0000F9BE 12BC 004D                  		move.b	#$4D,0(a1)
0000F9C2 237C 0000 0000 0004        		move.l	#Map_obj4C,4(a1)
0000F9CA 337C 63A8 0002             		move.w	#$63A8,2(a1)
0000F9D0 137C 0004 0001             		move.b	#4,1(a1)
0000F9D6 137C 0020 0019             		move.b	#$20,$19(a1)
0000F9DC 3368 0008 0008             		move.w	8(a0),8(a1)
0000F9E2 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000F9E8 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000F9EE 137C 0001 0018             		move.b	#1,$18(a1)
0000F9F4 137C 0005 001C             		move.b	#5,$1C(a1)
0000F9FA 4A28 0028                  		tst.b	$28(a0)
0000F9FE 6700                       		beq.s	loc_EF0A
0000FA00 137C 0002 001C             		move.b	#2,$1C(a1)
0000FA06                            
0000FA06                            loc_EF0A:
0000FA06 51C9 FFB0                  		dbf	d1,Obj4D_Loop
0000FA0A 4E75                       		rts	
0000FA0C                            ; ===========================================================================
0000FA0C                            
0000FA0C                            loc_EF10:				; XREF: Obj4D_Main
0000FA0C 0669 0060 000C             		addi.w	#$60,$C(a1)
0000FA12 3368 0030 0030             		move.w	$30(a0),$30(a1)
0000FA18 0669 0060 0030             		addi.w	#$60,$30(a1)
0000FA1E 137C 0093 0020             		move.b	#$93,$20(a1)
0000FA24 137C 0080 0016             		move.b	#$80,$16(a1)
0000FA2A 08E9 0004 0001             		bset	#4,1(a1)
0000FA30 5829 0024                  		addq.b	#4,$24(a1)
0000FA34 2348 003C                  		move.l	a0,$3C(a1)
0000FA38 4A28 0028                  		tst.b	$28(a0)
0000FA3C 6700                       		beq.s	Obj4D_PlaySnd
0000FA3E 7200                       		moveq	#0,d1
0000FA40 6100 FF76                  		bsr.w	Obj4D_Loop
0000FA44 5429 0024                  		addq.b	#2,$24(a1)
0000FA48 08E9 0004 0002             		bset	#4,2(a1)
0000FA4E 0669 0100 000C             		addi.w	#$100,$C(a1)
0000FA54 137C 0000 0018             		move.b	#0,$18(a1)
0000FA5A 3368 0030 0030             		move.w	$30(a0),$30(a1)
0000FA60 2368 003C 003C             		move.l	$3C(a0),$3C(a1)
0000FA66 117C 0000 0028             		move.b	#0,$28(a0)
0000FA6C                            
0000FA6C                            Obj4D_PlaySnd:
0000FA6C 303C 00C8                  		move.w	#$C8,d0
0000FA70 4EB9 0000 147C             		jsr	(PlaySound_Special).l ;	play flame sound
0000FA76                            
0000FA76                            Obj4D_Action:				; XREF: Obj4D_Index
0000FA76 7000                       		moveq	#0,d0
0000FA78 1028 0028                  		move.b	$28(a0),d0
0000FA7C D040                       		add.w	d0,d0
0000FA7E 323B 0000                  		move.w	Obj4D_TypeIndex(pc,d0.w),d1
0000FA82 4EBB 1000                  		jsr	Obj4D_TypeIndex(pc,d1.w)
0000FA86 6100 E636                  		bsr.w	SpeedToPos
0000FA8A 43F9 0000 0000             		lea	(Ani_obj4C).l,a1
0000FA90 6100 B764                  		bsr.w	AnimateSprite
0000FA94                            
0000FA94                            Obj4D_ChkDel:				; XREF: Obj4C
0000FA94 3028 0008                  		move.w	8(a0),d0
0000FA98 0240 FF80                  		andi.w	#$FF80,d0
0000FA9C 3238 F700                  		move.w	($FFFFF700).w,d1
0000FAA0 0441 0080                  		subi.w	#$80,d1
0000FAA4 0241 FF80                  		andi.w	#$FF80,d1
0000FAA8 9041                       		sub.w	d1,d0
0000FAAA 0C40 0280                  		cmpi.w	#$280,d0
0000FAAE 6200 E670                  		bhi.w	DeleteObject
0000FAB2 4E75                       		rts	
0000FAB4                            ; ===========================================================================
0000FAB4 0000                       Obj4D_TypeIndex:dc.w Obj4D_Type00-Obj4D_TypeIndex
0000FAB6 0000                       		dc.w Obj4D_Type01-Obj4D_TypeIndex
0000FAB8                            ; ===========================================================================
0000FAB8                            
0000FAB8                            Obj4D_Type00:				; XREF: Obj4D_TypeIndex
0000FAB8 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's falling speed
0000FABE 3028 0030                  		move.w	$30(a0),d0
0000FAC2 B068 000C                  		cmp.w	$C(a0),d0
0000FAC6 6400                       		bcc.s	locret_EFDA
0000FAC8 5828 0024                  		addq.b	#4,$24(a0)
0000FACC 2268 003C                  		movea.l	$3C(a0),a1
0000FAD0 137C 0003 001C             		move.b	#3,$1C(a1)
0000FAD6                            
0000FAD6                            locret_EFDA:
0000FAD6 4E75                       		rts	
0000FAD8                            ; ===========================================================================
0000FAD8                            
0000FAD8                            Obj4D_Type01:				; XREF: Obj4D_TypeIndex
0000FAD8 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's falling speed
0000FADE 3028 0030                  		move.w	$30(a0),d0
0000FAE2 B068 000C                  		cmp.w	$C(a0),d0
0000FAE6 6400                       		bcc.s	locret_EFFA
0000FAE8 5828 0024                  		addq.b	#4,$24(a0)
0000FAEC 2268 003C                  		movea.l	$3C(a0),a1
0000FAF0 137C 0001 001C             		move.b	#1,$1C(a1)
0000FAF6                            
0000FAF6                            locret_EFFA:
0000FAF6 4E75                       		rts	
0000FAF8                            ; ===========================================================================
0000FAF8                            
0000FAF8                            loc_EFFC:				; XREF: Obj4D_Index
0000FAF8 2268 003C                  		movea.l	$3C(a0),a1
0000FAFC 0C29 0006 0024             		cmpi.b	#6,$24(a1)
0000FB02 6700 0000                  		beq.w	Obj4D_Delete
0000FB06 3029 000C                  		move.w	$C(a1),d0
0000FB0A 0640 0060                  		addi.w	#$60,d0
0000FB0E 3140 000C                  		move.w	d0,$C(a0)
0000FB12 9068 0030                  		sub.w	$30(a0),d0
0000FB16 4440                       		neg.w	d0
0000FB18 7208                       		moveq	#8,d1
0000FB1A 0C40 0040                  		cmpi.w	#$40,d0
0000FB1E 6C00                       		bge.s	loc_F026
0000FB20 720B                       		moveq	#$B,d1
0000FB22                            
0000FB22                            loc_F026:
0000FB22 0C40 0080                  		cmpi.w	#$80,d0
0000FB26 6F00                       		ble.s	loc_F02E
0000FB28 720E                       		moveq	#$E,d1
0000FB2A                            
0000FB2A                            loc_F02E:
0000FB2A 5328 001E                  		subq.b	#1,$1E(a0)
0000FB2E 6A00                       		bpl.s	loc_F04C
0000FB30 117C 0007 001E             		move.b	#7,$1E(a0)
0000FB36 5228 001B                  		addq.b	#1,$1B(a0)
0000FB3A 0C28 0002 001B             		cmpi.b	#2,$1B(a0)
0000FB40 6500                       		bcs.s	loc_F04C
0000FB42 117C 0000 001B             		move.b	#0,$1B(a0)
0000FB48                            
0000FB48                            loc_F04C:
0000FB48 1028 001B                  		move.b	$1B(a0),d0
0000FB4C D001                       		add.b	d1,d0
0000FB4E 1140 001A                  		move.b	d0,$1A(a0)
0000FB52 6000 FF40                  		bra.w	Obj4D_ChkDel
0000FB56                            ; ===========================================================================
0000FB56                            
0000FB56                            Obj4D_Delete:				; XREF: Obj4D_Index
0000FB56 6000 E5C8                  		bra.w	DeleteObject
0000FB5A                            ; ===========================================================================
0000FB5A                            ; ---------------------------------------------------------------------------
0000FB5A                            ; Object 4E - advancing	wall of	lava (MZ)
0000FB5A                            ; ---------------------------------------------------------------------------
0000FB5A                            
0000FB5A                            Obj4E:					; XREF: Obj_Index
0000FB5A 7000                       		moveq	#0,d0
0000FB5C 1028 0024                  		move.b	$24(a0),d0
0000FB60 323B 0000                  		move.w	Obj4E_Index(pc,d0.w),d1
0000FB64 4EFB 1000                  		jmp	Obj4E_Index(pc,d1.w)
0000FB68                            ; ===========================================================================
0000FB68 0000                       Obj4E_Index:	dc.w Obj4E_Main-Obj4E_Index
0000FB6A 0000                       		dc.w Obj4E_Solid-Obj4E_Index
0000FB6C 0000                       		dc.w Obj4E_Action-Obj4E_Index
0000FB6E 0000                       		dc.w Obj4E_Move2-Obj4E_Index
0000FB70 0000                       		dc.w Obj4E_Delete-Obj4E_Index
0000FB72                            ; ===========================================================================
0000FB72                            
0000FB72                            Obj4E_Main:				; XREF: Obj4E_Index
0000FB72 5828 0024                  		addq.b	#4,$24(a0)
0000FB76 2248                       		movea.l	a0,a1
0000FB78 7201                       		moveq	#1,d1
0000FB7A 6000                       		bra.s	Obj4E_Main2
0000FB7C                            ; ===========================================================================
0000FB7C                            
0000FB7C                            Obj4E_Loop:
0000FB7C 6100 EA12                  		bsr.w	SingleObjLoad2
0000FB80 6600                       		bne.s	loc_F0C8
0000FB82                            
0000FB82                            Obj4E_Main2:				; XREF: Obj4E_Main
0000FB82 12BC 004E                  		move.b	#$4E,0(a1)	; load object
0000FB86 237C 0000 0000 0004        		move.l	#Map_obj4E,4(a1)
0000FB8E 337C 63A8 0002             		move.w	#$63A8,2(a1)
0000FB94 137C 0004 0001             		move.b	#4,1(a1)
0000FB9A 137C 0050 0019             		move.b	#$50,$19(a1)
0000FBA0 3368 0008 0008             		move.w	8(a0),8(a1)
0000FBA6 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000FBAC 137C 0001 0018             		move.b	#1,$18(a1)
0000FBB2 137C 0000 001C             		move.b	#0,$1C(a1)
0000FBB8 137C 0094 0020             		move.b	#$94,$20(a1)
0000FBBE 2348 003C                  		move.l	a0,$3C(a1)
0000FBC2                            
0000FBC2                            loc_F0C8:
0000FBC2 51C9 FFB8                  		dbf	d1,Obj4E_Loop	; repeat sequence once
0000FBC6                            
0000FBC6 5C29 0024                  		addq.b	#6,$24(a1)
0000FBCA 137C 0004 001A             		move.b	#4,$1A(a1)
0000FBD0                            
0000FBD0                            Obj4E_Action:				; XREF: Obj4E_Index
0000FBD0 3038 D008                  		move.w	($FFFFD008).w,d0
0000FBD4 9068 0008                  		sub.w	8(a0),d0
0000FBD8 6400                       		bcc.s	Obj4E_ChkSonic
0000FBDA 4440                       		neg.w	d0
0000FBDC                            
0000FBDC                            Obj4E_ChkSonic:
0000FBDC 0C40 00C0                  		cmpi.w	#$C0,d0		; is Sonic within $C0 pixels (x-axis)?
0000FBE0 6400                       		bcc.s	Obj4E_Move	; if not, branch
0000FBE2 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000FBE6 9068 000C                  		sub.w	$C(a0),d0
0000FBEA 6400                       		bcc.s	loc_F0F4
0000FBEC 4440                       		neg.w	d0
0000FBEE                            
0000FBEE                            loc_F0F4:
0000FBEE 0C40 0060                  		cmpi.w	#$60,d0		; is Sonic within $60 pixels (y-axis)?
0000FBF2 6400                       		bcc.s	Obj4E_Move	; if not, branch
0000FBF4 117C 0001 0036             		move.b	#1,$36(a0)	; set object to	move
0000FBFA 6000                       		bra.s	Obj4E_Solid
0000FBFC                            ; ===========================================================================
0000FBFC                            
0000FBFC                            Obj4E_Move:				; XREF: Obj4E_ChkSonic
0000FBFC 4A28 0036                  		tst.b	$36(a0)		; is object set	to move?
0000FC00 6700                       		beq.s	Obj4E_Solid	; if not, branch
0000FC02 317C 0180 0010             		move.w	#$180,$10(a0)	; set object speed
0000FC08 5528 0024                  		subq.b	#2,$24(a0)
0000FC0C                            
0000FC0C                            Obj4E_Solid:				; XREF: Obj4E_Index
0000FC0C 323C 002B                  		move.w	#$2B,d1
0000FC10 343C 0018                  		move.w	#$18,d2
0000FC14 3602                       		move.w	d2,d3
0000FC16 5243                       		addq.w	#1,d3
0000FC18 3828 0008                  		move.w	8(a0),d4
0000FC1C 1028 0024                  		move.b	$24(a0),d0
0000FC20 3F00                       		move.w	d0,-(sp)
0000FC22 6100 0000                  		bsr.w	SolidObject
0000FC26 301F                       		move.w	(sp)+,d0
0000FC28 1140 0024                  		move.b	d0,$24(a0)
0000FC2C 0C68 06A0 0008             		cmpi.w	#$6A0,8(a0)	; has object reached $6A0 on the x-axis?
0000FC32 6600                       		bne.s	Obj4E_Animate	; if not, branch
0000FC34 4268 0010                  		clr.w	$10(a0)		; stop object moving
0000FC38 4228 0036                  		clr.b	$36(a0)
0000FC3C                            
0000FC3C                            Obj4E_Animate:
0000FC3C 43F9 0000 0000             		lea	(Ani_obj4E).l,a1
0000FC42 6100 B5B2                  		bsr.w	AnimateSprite
0000FC46 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
0000FC4C 6400                       		bcc.s	Obj4E_ChkDel
0000FC4E 6100 E46E                  		bsr.w	SpeedToPos
0000FC52                            
0000FC52                            Obj4E_ChkDel:
0000FC52 6100 E490                  		bsr.w	DisplaySprite
0000FC56 4A28 0036                  		tst.b	$36(a0)
0000FC5A 6600                       		bne.s	locret_F17E
0000FC5C 3028 0008                  		move.w	8(a0),d0
0000FC60 0240 FF80                  		andi.w	#$FF80,d0
0000FC64 3238 F700                  		move.w	($FFFFF700).w,d1
0000FC68 0441 0080                  		subi.w	#$80,d1
0000FC6C 0241 FF80                  		andi.w	#$FF80,d1
0000FC70 9041                       		sub.w	d1,d0
0000FC72 0C40 0280                  		cmpi.w	#$280,d0
0000FC76 6200                       		bhi.s	Obj4E_ChkGone
0000FC78                            
0000FC78                            locret_F17E:
0000FC78 4E75                       		rts	
0000FC7A                            ; ===========================================================================
0000FC7A                            
0000FC7A                            Obj4E_ChkGone:				; XREF: Obj4E_ChkDel
0000FC7A 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000FC7E 7000                       		moveq	#0,d0
0000FC80 1028 0023                  		move.b	$23(a0),d0
0000FC84 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000FC8A 117C 0008 0024             		move.b	#8,$24(a0)
0000FC90 4E75                       		rts	
0000FC92                            ; ===========================================================================
0000FC92                            
0000FC92                            Obj4E_Move2:				; XREF: Obj4E_Index
0000FC92 2268 003C                  		movea.l	$3C(a0),a1
0000FC96 0C29 0008 0024             		cmpi.b	#8,$24(a1)
0000FC9C 6700                       		beq.s	Obj4E_Delete
0000FC9E 3169 0008 0008             		move.w	8(a1),8(a0)	; move rest of lava wall
0000FCA4 0468 0080 0008             		subi.w	#$80,8(a0)
0000FCAA 6000 E438                  		bra.w	DisplaySprite
0000FCAE                            ; ===========================================================================
0000FCAE                            
0000FCAE                            Obj4E_Delete:				; XREF: Obj4E_Index
0000FCAE 6000 E470                  		bra.w	DeleteObject
0000FCB2                            ; ===========================================================================
0000FCB2                            ; ---------------------------------------------------------------------------
0000FCB2                            ; Object 54 - invisible	lava tag (MZ)
0000FCB2                            ; ---------------------------------------------------------------------------
0000FCB2                            
0000FCB2                            Obj54:					; XREF: Obj_Index
0000FCB2 7000                       		moveq	#0,d0
0000FCB4 1028 0024                  		move.b	$24(a0),d0
0000FCB8 323B 0000                  		move.w	Obj54_Index(pc,d0.w),d1
0000FCBC 4EFB 1000                  		jmp	Obj54_Index(pc,d1.w)
0000FCC0                            ; ===========================================================================
0000FCC0 0000                       Obj54_Index:	dc.w Obj54_Main-Obj54_Index
0000FCC2 0000                       		dc.w Obj54_ChkDel-Obj54_Index
0000FCC4                            
0000FCC4 9694 9500                  Obj54_Sizes:	dc.b $96, $94, $95, 0
0000FCC8                            ; ===========================================================================
0000FCC8                            
0000FCC8                            Obj54_Main:				; XREF: Obj54_Index
0000FCC8 5428 0024                  		addq.b	#2,$24(a0)
0000FCCC 7000                       		moveq	#0,d0
0000FCCE 1028 0028                  		move.b	$28(a0),d0
0000FCD2 117B 00F0 0020             		move.b	Obj54_Sizes(pc,d0.w),$20(a0)
0000FCD8 217C 0000 0000 0004        		move.l	#Map_obj54,4(a0)
0000FCE0 117C 0084 0001             		move.b	#$84,1(a0)
0000FCE6                            
0000FCE6                            Obj54_ChkDel:				; XREF: Obj54_Index
0000FCE6 3028 0008                  		move.w	8(a0),d0
0000FCEA 0240 FF80                  		andi.w	#$FF80,d0
0000FCEE 3238 F700                  		move.w	($FFFFF700).w,d1
0000FCF2 0441 0080                  		subi.w	#$80,d1
0000FCF6 0241 FF80                  		andi.w	#$FF80,d1
0000FCFA 9041                       		sub.w	d1,d0
0000FCFC 6B00 E422                  		bmi.w	DeleteObject
0000FD00 0C40 0280                  		cmpi.w	#$280,d0
0000FD04 6200 E41A                  		bhi.w	DeleteObject
0000FD08 4E75                       		rts	
0000FD0A                            ; ===========================================================================
0000FD0A                            ; ---------------------------------------------------------------------------
0000FD0A                            ; Sprite mappings - invisible lava tag (MZ)
0000FD0A                            ; ---------------------------------------------------------------------------
0000FD0A                            Map_obj54:
0000FD0A                            	include "_maps\obj54.asm"
0000FD0A                            ; ---------------------------------------------------------------------------
0000FD0A                            ; Sprite mappings - invisible lava tag (MZ)
0000FD0A                            ; ---------------------------------------------------------------------------
0000FD0A 0000                       		dc.w byte_F212-Map_obj54
0000FD0C 00                         byte_F212:	dc.b 0			; no sprite, because the tag is invisible!
0000FD0E 00                         		even
0000FD0E 00                         		even
0000FD0E                            
0000FD0E                            Ani_obj4C:
0000FD0E                            	include "_anim\obj4C.asm"
0000FD0E                            ; ---------------------------------------------------------------------------
0000FD0E                            ; Animation script - geyser of lava (MZ)
0000FD0E                            ; ---------------------------------------------------------------------------
0000FD0E 0000                       		dc.w byte_F220-Ani_obj4C
0000FD10 0000                       		dc.w byte_F22A-Ani_obj4C
0000FD12 0000                       		dc.w byte_F22E-Ani_obj4C
0000FD14 0000                       		dc.w byte_F232-Ani_obj4C
0000FD16 0000                       		dc.w byte_F23A-Ani_obj4C
0000FD18 0000                       		dc.w byte_F23E-Ani_obj4C
0000FD1A 0200 0100 0104 0504 05FC   byte_F220:	dc.b 2,	0, 1, 0, 1, 4, 5, 4, 5,	$FC
0000FD24 0202 03FF                  byte_F22A:	dc.b 2,	2, 3, $FF
0000FD28 0206 07FF                  byte_F22E:	dc.b 2,	6, 7, $FF
0000FD2C 0202 0300 0100 01FC        byte_F232:	dc.b 2,	2, 3, 0, 1, 0, 1, $FC
0000FD34 0F13 FF00                  byte_F23A:	dc.b $F, $13, $FF, 0
0000FD38 0211 12FF                  byte_F23E:	dc.b 2,	$11, $12, $FF
0000FD3C                            		even
0000FD3C                            		even
0000FD3C                            
0000FD3C                            Ani_obj4E:
0000FD3C                            	include "_anim\obj4E.asm"
0000FD3C                            ; ---------------------------------------------------------------------------
0000FD3C                            ; Animation script - advancing wall of lava (MZ)
0000FD3C                            ; ---------------------------------------------------------------------------
0000FD3C 0000                       		dc.w byte_F244-Ani_obj4E
0000FD3E 0900 0102 03FF             byte_F244:	dc.b 9,	0, 1, 2, 3, $FF
0000FD44                            		even
0000FD44                            		even
0000FD44                            
0000FD44                            ; ---------------------------------------------------------------------------
0000FD44                            ; Sprite mappings - lava geyser / lava that falls from the ceiling (MZ)
0000FD44                            ; ---------------------------------------------------------------------------
0000FD44                            Map_obj4C:
0000FD44                            	include "_maps\obj4C.asm"
0000FD44                            ; ---------------------------------------------------------------------------
0000FD44                            ; Sprite mappings - lava geyser / lava that falls from the ceiling (MZ)
0000FD44                            ; ---------------------------------------------------------------------------
0000FD44 0000 0000                  		dc.w byte_F272-Map_obj4C, byte_F27D-Map_obj4C
0000FD48 0000 0000                  		dc.w byte_F288-Map_obj4C, byte_F29D-Map_obj4C
0000FD4C 0000 0000                  		dc.w byte_F2B2-Map_obj4C, byte_F2D1-Map_obj4C
0000FD50 0000 0000                  		dc.w byte_F2F0-Map_obj4C, byte_F2FB-Map_obj4C
0000FD54 0000 0000                  		dc.w byte_F306-Map_obj4C, byte_F339-Map_obj4C
0000FD58 0000 0000                  		dc.w byte_F36C-Map_obj4C, byte_F39F-Map_obj4C
0000FD5C 0000 0000                  		dc.w byte_F3BE-Map_obj4C, byte_F3DD-Map_obj4C
0000FD60 0000 0000                  		dc.w byte_F3FC-Map_obj4C, byte_F44D-Map_obj4C
0000FD64 0000 0000                  		dc.w byte_F49E-Map_obj4C, byte_F4EF-Map_obj4C
0000FD68 0000 0000                  		dc.w byte_F50E-Map_obj4C, byte_F52D-Map_obj4C
0000FD6C 02                         byte_F272:	dc.b 2
0000FD6D EC0B 0000 E8               		dc.b $EC, $B, 0, 0, $E8
0000FD72 EC0B 0800 00               		dc.b $EC, $B, 8, 0, 0
0000FD77 02                         byte_F27D:	dc.b 2
0000FD78 EC0B 0018 E8               		dc.b $EC, $B, 0, $18, $E8
0000FD7D EC0B 0818 00               		dc.b $EC, $B, 8, $18, 0
0000FD82 04                         byte_F288:	dc.b 4
0000FD83 EC0B 0000 C8               		dc.b $EC, $B, 0, 0, $C8
0000FD88 F40E 000C E0               		dc.b $F4, $E, 0, $C, $E0
0000FD8D F40E 080C 00               		dc.b $F4, $E, 8, $C, 0
0000FD92 EC0B 0800 20               		dc.b $EC, $B, 8, 0, $20
0000FD97 04                         byte_F29D:	dc.b 4
0000FD98 EC0B 0018 C8               		dc.b $EC, $B, 0, $18, $C8
0000FD9D F40E 0024 E0               		dc.b $F4, $E, 0, $24, $E0
0000FDA2 F40E 0824 00               		dc.b $F4, $E, 8, $24, 0
0000FDA7 EC0B 0818 20               		dc.b $EC, $B, 8, $18, $20
0000FDAC 06                         byte_F2B2:	dc.b 6
0000FDAD EC0B 0000 C8               		dc.b $EC, $B, 0, 0, $C8
0000FDB2 F40E 000C E0               		dc.b $F4, $E, 0, $C, $E0
0000FDB7 F40E 080C 00               		dc.b $F4, $E, 8, $C, 0
0000FDBC EC0B 0800 20               		dc.b $EC, $B, 8, 0, $20
0000FDC1 E80E 0090 E0               		dc.b $E8, $E, 0, $90, $E0
0000FDC6 E80E 0890 00               		dc.b $E8, $E, 8, $90, 0
0000FDCB 06                         byte_F2D1:	dc.b 6
0000FDCC EC0B 0018 C8               		dc.b $EC, $B, 0, $18, $C8
0000FDD1 F40E 0024 E0               		dc.b $F4, $E, 0, $24, $E0
0000FDD6 F40E 0824 00               		dc.b $F4, $E, 8, $24, 0
0000FDDB EC0B 0818 20               		dc.b $EC, $B, 8, $18, $20
0000FDE0 E80E 0890 E0               		dc.b $E8, $E, 8, $90, $E0
0000FDE5 E80E 0090 00               		dc.b $E8, $E, 0, $90, 0
0000FDEA 02                         byte_F2F0:	dc.b 2
0000FDEB E00F 0030 E0               		dc.b $E0, $F, 0, $30, $E0
0000FDF0 E00F 0830 00               		dc.b $E0, $F, 8, $30, 0
0000FDF5 02                         byte_F2FB:	dc.b 2
0000FDF6 E00F 0830 E0               		dc.b $E0, $F, 8, $30, $E0
0000FDFB E00F 0030 00               		dc.b $E0, $F, 0, $30, 0
0000FE00 0A                         byte_F306:	dc.b $A
0000FE01 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
0000FE06 900F 0840 00               		dc.b $90, $F, 8, $40, 0
0000FE0B B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
0000FE10 B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
0000FE15 D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
0000FE1A D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
0000FE1F F00F 0040 E0               		dc.b $F0, $F, 0, $40, $E0
0000FE24 F00F 0840 00               		dc.b $F0, $F, 8, $40, 0
0000FE29 100F 0040 E0               		dc.b $10, $F, 0, $40, $E0
0000FE2E 100F 0840 00               		dc.b $10, $F, 8, $40, 0
0000FE33 0A                         byte_F339:	dc.b $A
0000FE34 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
0000FE39 900F 0850 00               		dc.b $90, $F, 8, $50, 0
0000FE3E B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
0000FE43 B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
0000FE48 D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
0000FE4D D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
0000FE52 F00F 0050 E0               		dc.b $F0, $F, 0, $50, $E0
0000FE57 F00F 0850 00               		dc.b $F0, $F, 8, $50, 0
0000FE5C 100F 0050 E0               		dc.b $10, $F, 0, $50, $E0
0000FE61 100F 0850 00               		dc.b $10, $F, 8, $50, 0
0000FE66 0A                         byte_F36C:	dc.b $A
0000FE67 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
0000FE6C 900F 0860 00               		dc.b $90, $F, 8, $60, 0
0000FE71 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
0000FE76 B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
0000FE7B D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
0000FE80 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
0000FE85 F00F 0060 E0               		dc.b $F0, $F, 0, $60, $E0
0000FE8A F00F 0860 00               		dc.b $F0, $F, 8, $60, 0
0000FE8F 100F 0060 E0               		dc.b $10, $F, 0, $60, $E0
0000FE94 100F 0860 00               		dc.b $10, $F, 8, $60, 0
0000FE99 06                         byte_F39F:	dc.b 6
0000FE9A 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
0000FE9F 900F 0840 00               		dc.b $90, $F, 8, $40, 0
0000FEA4 B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
0000FEA9 B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
0000FEAE D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
0000FEB3 D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
0000FEB8 06                         byte_F3BE:	dc.b 6
0000FEB9 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
0000FEBE 900F 0850 00               		dc.b $90, $F, 8, $50, 0
0000FEC3 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
0000FEC8 B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
0000FECD D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
0000FED2 D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
0000FED7 06                         byte_F3DD:	dc.b 6
0000FED8 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
0000FEDD 900F 0860 00               		dc.b $90, $F, 8, $60, 0
0000FEE2 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
0000FEE7 B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
0000FEEC D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
0000FEF1 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
0000FEF6 10                         byte_F3FC:	dc.b $10
0000FEF7 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
0000FEFC 900F 0840 00               		dc.b $90, $F, 8, $40, 0
0000FF01 B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
0000FF06 B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
0000FF0B D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
0000FF10 D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
0000FF15 F00F 0040 E0               		dc.b $F0, $F, 0, $40, $E0
0000FF1A F00F 0840 00               		dc.b $F0, $F, 8, $40, 0
0000FF1F 100F 0040 E0               		dc.b $10, $F, 0, $40, $E0
0000FF24 100F 0840 00               		dc.b $10, $F, 8, $40, 0
0000FF29 300F 0040 E0               		dc.b $30, $F, 0, $40, $E0
0000FF2E 300F 0840 00               		dc.b $30, $F, 8, $40, 0
0000FF33 500F 0040 E0               		dc.b $50, $F, 0, $40, $E0
0000FF38 500F 0840 00               		dc.b $50, $F, 8, $40, 0
0000FF3D 700F 0040 E0               		dc.b $70, $F, 0, $40, $E0
0000FF42 700F 0840 00               		dc.b $70, $F, 8, $40, 0
0000FF47 10                         byte_F44D:	dc.b $10
0000FF48 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
0000FF4D 900F 0850 00               		dc.b $90, $F, 8, $50, 0
0000FF52 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
0000FF57 B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
0000FF5C D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
0000FF61 D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
0000FF66 F00F 0050 E0               		dc.b $F0, $F, 0, $50, $E0
0000FF6B F00F 0850 00               		dc.b $F0, $F, 8, $50, 0
0000FF70 100F 0050 E0               		dc.b $10, $F, 0, $50, $E0
0000FF75 100F 0850 00               		dc.b $10, $F, 8, $50, 0
0000FF7A 300F 0050 E0               		dc.b $30, $F, 0, $50, $E0
0000FF7F 300F 0850 00               		dc.b $30, $F, 8, $50, 0
0000FF84 500F 0050 E0               		dc.b $50, $F, 0, $50, $E0
0000FF89 500F 0850 00               		dc.b $50, $F, 8, $50, 0
0000FF8E 700F 0050 E0               		dc.b $70, $F, 0, $50, $E0
0000FF93 700F 0850 00               		dc.b $70, $F, 8, $50, 0
0000FF98 10                         byte_F49E:	dc.b $10
0000FF99 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
0000FF9E 900F 0860 00               		dc.b $90, $F, 8, $60, 0
0000FFA3 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
0000FFA8 B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
0000FFAD D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
0000FFB2 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
0000FFB7 F00F 0060 E0               		dc.b $F0, $F, 0, $60, $E0
0000FFBC F00F 0860 00               		dc.b $F0, $F, 8, $60, 0
0000FFC1 100F 0060 E0               		dc.b $10, $F, 0, $60, $E0
0000FFC6 100F 0860 00               		dc.b $10, $F, 8, $60, 0
0000FFCB 300F 0060 E0               		dc.b $30, $F, 0, $60, $E0
0000FFD0 300F 0860 00               		dc.b $30, $F, 8, $60, 0
0000FFD5 500F 0060 E0               		dc.b $50, $F, 0, $60, $E0
0000FFDA 500F 0860 00               		dc.b $50, $F, 8, $60, 0
0000FFDF 700F 0060 E0               		dc.b $70, $F, 0, $60, $E0
0000FFE4 700F 0860 00               		dc.b $70, $F, 8, $60, 0
0000FFE9 06                         byte_F4EF:	dc.b 6
0000FFEA E00B 0000 C8               		dc.b $E0, $B, 0, 0, $C8
0000FFEF E80E 000C E0               		dc.b $E8, $E, 0, $C, $E0
0000FFF4 E80E 080C 00               		dc.b $E8, $E, 8, $C, 0
0000FFF9 E00B 0800 20               		dc.b $E0, $B, 8, 0, $20
0000FFFE D80E 0090 E0               		dc.b $D8, $E, 0, $90, $E0
00010003 D80E 0890 00               		dc.b $D8, $E, 8, $90, 0
00010008 06                         byte_F50E:	dc.b 6
00010009 E00B 0018 C8               		dc.b $E0, $B, 0, $18, $C8
0001000E E80E 0024 E0               		dc.b $E8, $E, 0, $24, $E0
00010013 E80E 0824 00               		dc.b $E8, $E, 8, $24, 0
00010018 E00B 0818 20               		dc.b $E0, $B, 8, $18, $20
0001001D D80E 0890 E0               		dc.b $D8, $E, 8, $90, $E0
00010022 D80E 0090 00               		dc.b $D8, $E, 0, $90, 0
00010027 00                         byte_F52D:	dc.b 0
00010028                            		even
00010028                            		even
00010028                            
00010028                            ; ---------------------------------------------------------------------------
00010028                            ; Sprite mappings - advancing wall of lava (MZ)
00010028                            ; ---------------------------------------------------------------------------
00010028                            Map_obj4E:
00010028                            	include "_maps\obj4E.asm"
00010028                            ; ---------------------------------------------------------------------------
00010028                            ; Sprite mappings - advancing wall of lava (MZ)
00010028                            ; ---------------------------------------------------------------------------
00010028 0000                       		dc.w byte_F538-Map_obj4E
0001002A 0000                       		dc.w byte_F566-Map_obj4E
0001002C 0000                       		dc.w byte_F594-Map_obj4E
0001002E 0000                       		dc.w byte_F5C2-Map_obj4E
00010030 0000                       		dc.w byte_F5F0-Map_obj4E
00010032 09                         byte_F538:	dc.b 9
00010033 E00F 0060 20               		dc.b $E0, $F, 0, $60, $20
00010038 000F 0070 3C               		dc.b 0,	$F, 0, $70, $3C
0001003D 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
00010042 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
00010047 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0001004C E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
00010051 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
00010056 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0001005B 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
00010060 09                         byte_F566:	dc.b 9
00010061 E00F 0070 20               		dc.b $E0, $F, 0, $70, $20
00010066 000F 0080 3C               		dc.b 0,	$F, 0, $80, $3C
0001006B 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
00010070 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
00010075 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0001007A E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0001007F 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
00010084 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
00010089 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0001008E 09                         byte_F594:	dc.b 9
0001008F E00F 0080 20               		dc.b $E0, $F, 0, $80, $20
00010094 000F 0070 3C               		dc.b 0,	$F, 0, $70, $3C
00010099 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0001009E E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
000100A3 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
000100A8 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
000100AD 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
000100B2 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
000100B7 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
000100BC 09                         byte_F5C2:	dc.b 9
000100BD E00F 0070 20               		dc.b $E0, $F, 0, $70, $20
000100C2 000F 0060 3C               		dc.b 0,	$F, 0, $60, $3C
000100C7 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
000100CC E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
000100D1 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
000100D6 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
000100DB 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
000100E0 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
000100E5 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
000100EA 08                         byte_F5F0:	dc.b 8
000100EB E00F FF2A 20               		dc.b $E0, $F, $FF, $2A,	$20
000100F0 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
000100F5 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
000100FA 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
000100FF E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
00010104 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
00010109 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0001010E 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
00010114 00                         		even
00010114 00                         		even
00010114                            
00010114                            ; ===========================================================================
00010114                            ; ---------------------------------------------------------------------------
00010114                            ; Object 40 - Moto Bug enemy (GHZ)
00010114                            ; ---------------------------------------------------------------------------
00010114                            
00010114                            Obj40:					; XREF: Obj_Index
00010114 7000                       		moveq	#0,d0
00010116 1028 0024                  		move.b	$24(a0),d0
0001011A 323B 0000                  		move.w	Obj40_Index(pc,d0.w),d1
0001011E 4EFB 1000                  		jmp	Obj40_Index(pc,d1.w)
00010122                            ; ===========================================================================
00010122 0000                       Obj40_Index:	dc.w Obj40_Main-Obj40_Index
00010124 0000                       		dc.w Obj40_Action-Obj40_Index
00010126 0000                       		dc.w Obj40_Animate-Obj40_Index
00010128 0000                       		dc.w Obj40_Delete-Obj40_Index
0001012A                            ; ===========================================================================
0001012A                            
0001012A                            Obj40_Main:				; XREF: Obj40_Index
0001012A 217C 0000 0000 0004        		move.l	#Map_obj40,4(a0)
00010132 317C 04F0 0002             		move.w	#$4F0,2(a0)
00010138 117C 0004 0001             		move.b	#4,1(a0)
0001013E 117C 0004 0018             		move.b	#4,$18(a0)
00010144 117C 0014 0019             		move.b	#$14,$19(a0)
0001014A 4A28 001C                  		tst.b	$1C(a0)		; is object a smoke trail?
0001014E 6600                       		bne.s	Obj40_SetSmoke	; if yes, branch
00010150 117C 000E 0016             		move.b	#$E,$16(a0)
00010156 117C 0008 0017             		move.b	#8,$17(a0)
0001015C 117C 000C 0020             		move.b	#$C,$20(a0)
00010162 6100 DF2E                  		bsr.w	ObjectFall
00010166 4EB9 0000 0000             		jsr	ObjHitFloor
0001016C 4A41                       		tst.w	d1
0001016E 6A00                       		bpl.s	locret_F68A
00010170 D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
00010174 317C 0000 0012             		move.w	#0,$12(a0)
0001017A 5428 0024                  		addq.b	#2,$24(a0)
0001017E 0868 0000 0022             		bchg	#0,$22(a0)
00010184                            
00010184                            locret_F68A:
00010184 4E75                       		rts	
00010186                            ; ===========================================================================
00010186                            
00010186                            Obj40_SetSmoke:				; XREF: Obj40_Main
00010186 5828 0024                  		addq.b	#4,$24(a0)
0001018A 6000 0000                  		bra.w	Obj40_Animate
0001018E                            ; ===========================================================================
0001018E                            
0001018E                            Obj40_Action:				; XREF: Obj40_Index
0001018E 7000                       		moveq	#0,d0
00010190 1028 0025                  		move.b	$25(a0),d0
00010194 323B 0000                  		move.w	Obj40_Index2(pc,d0.w),d1
00010198 4EBB 1000                  		jsr	Obj40_Index2(pc,d1.w)
0001019C 43F9 0000 0000             		lea	(Ani_obj40).l,a1
000101A2 6100 B052                  		bsr.w	AnimateSprite
000101A6                            
000101A6                            ; ---------------------------------------------------------------------------
000101A6                            ; Routine to mark an enemy/monitor/ring	as destroyed
000101A6                            ; ---------------------------------------------------------------------------
000101A6                            
000101A6                            MarkObjGone:
000101A6 3028 0008                  		move.w	8(a0),d0
000101AA 0240 FF80                  		andi.w	#$FF80,d0
000101AE 3238 F700                  		move.w	($FFFFF700).w,d1
000101B2 0441 0080                  		subi.w	#$80,d1
000101B6 0241 FF80                  		andi.w	#$FF80,d1
000101BA 9041                       		sub.w	d1,d0
000101BC 0C40 0280                  		cmpi.w	#$280,d0
000101C0 6200 0000                  		bhi.w	Mark_ChkGone
000101C4 6000 DF1E                  		bra.w	DisplaySprite
000101C8                            ; ===========================================================================
000101C8                            
000101C8                            Mark_ChkGone:
000101C8 45F8 FC00                  		lea	($FFFFFC00).w,a2
000101CC 7000                       		moveq	#0,d0
000101CE 1028 0023                  		move.b	$23(a0),d0
000101D2 6700                       		beq.s	Mark_Delete
000101D4 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
000101DA                            
000101DA                            Mark_Delete:
000101DA 6000 DF44                  		bra.w	DeleteObject
000101DE                            
000101DE                            ; ===========================================================================
000101DE 0000                       Obj40_Index2:	dc.w Obj40_Move-Obj40_Index2
000101E0 0000                       		dc.w Obj40_FixToFloor-Obj40_Index2
000101E2                            ; ===========================================================================
000101E2                            
000101E2                            Obj40_Move:				; XREF: Obj40_Index2
000101E2 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from pause	time
000101E6 6A00                       		bpl.s	locret_F70A	; if time remains, branch
000101E8 5428 0025                  		addq.b	#2,$25(a0)
000101EC 317C FF00 0010             		move.w	#-$100,$10(a0)	; move object to the left
000101F2 117C 0001 001C             		move.b	#1,$1C(a0)
000101F8 0868 0000 0022             		bchg	#0,$22(a0)
000101FE 6600                       		bne.s	locret_F70A
00010200 4468 0010                  		neg.w	$10(a0)		; change direction
00010204                            
00010204                            locret_F70A:
00010204 4E75                       		rts	
00010206                            ; ===========================================================================
00010206                            
00010206                            Obj40_FixToFloor:			; XREF: Obj40_Index2
00010206 6100 DEB6                  		bsr.w	SpeedToPos
0001020A 4EB9 0000 0000             		jsr	ObjHitFloor
00010210 0C41 FFF8                  		cmpi.w	#-8,d1
00010214 6D00                       		blt.s	Obj40_Pause
00010216 0C41 000C                  		cmpi.w	#$C,d1
0001021A 6C00                       		bge.s	Obj40_Pause
0001021C D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
00010220 5328 0033                  		subq.b	#1,$33(a0)
00010224 6A00                       		bpl.s	locret_F756
00010226 117C 000F 0033             		move.b	#$F,$33(a0)
0001022C 6100 E34C                  		bsr.w	SingleObjLoad
00010230 6600                       		bne.s	locret_F756
00010232 12BC 0040                  		move.b	#$40,0(a1)	; load exhaust smoke object
00010236 3368 0008 0008             		move.w	8(a0),8(a1)
0001023C 3368 000C 000C             		move.w	$C(a0),$C(a1)
00010242 1368 0022 0022             		move.b	$22(a0),$22(a1)
00010248 137C 0002 001C             		move.b	#2,$1C(a1)
0001024E                            
0001024E                            locret_F756:
0001024E 4E75                       		rts	
00010250                            ; ===========================================================================
00010250                            
00010250                            Obj40_Pause:				; XREF: Obj40_FixToFloor
00010250 5528 0025                  		subq.b	#2,$25(a0)
00010254 317C 003B 0030             		move.w	#59,$30(a0)	; set pause time to 1 second
0001025A 317C 0000 0010             		move.w	#0,$10(a0)	; stop the object moving
00010260 117C 0000 001C             		move.b	#0,$1C(a0)
00010266 4E75                       		rts	
00010268                            ; ===========================================================================
00010268                            
00010268                            Obj40_Animate:				; XREF: Obj40_Index
00010268 43F9 0000 0000             		lea	(Ani_obj40).l,a1
0001026E 6100 AF86                  		bsr.w	AnimateSprite
00010272 6000 DE70                  		bra.w	DisplaySprite
00010276                            ; ===========================================================================
00010276                            
00010276                            Obj40_Delete:				; XREF: Obj40_Index
00010276 6000 DEA8                  		bra.w	DeleteObject
0001027A                            ; ===========================================================================
0001027A                            Ani_obj40:
0001027A                            	include "_anim\obj40.asm"
0001027A                            ; ---------------------------------------------------------------------------
0001027A                            ; Animation script - Motobug enemy
0001027A                            ; ---------------------------------------------------------------------------
0001027A 0000                       		dc.w byte_F788-Ani_obj40
0001027C 0000                       		dc.w byte_F78C-Ani_obj40
0001027E 0000                       		dc.w byte_F792-Ani_obj40
00010280 0F02 FF00                  byte_F788:	dc.b $F, 2, $FF, 0
00010284 0700 0100 02FF             byte_F78C:	dc.b 7,	0, 1, 0, 2, $FF
0001028A 0103 0603 0604 0604 0604+  byte_F792:	dc.b 1,	3, 6, 3, 6, 4, 6, 4, 6,	4, 6, 5, $FC, 0
00010298                            		even
00010298                            		even
00010298                            
00010298                            ; ---------------------------------------------------------------------------
00010298                            ; Sprite mappings - Moto Bug enemy (GHZ)
00010298                            ; ---------------------------------------------------------------------------
00010298                            Map_obj40:
00010298                            	include "_maps\obj40.asm"
00010298                            ; ---------------------------------------------------------------------------
00010298                            ; Sprite mappings - Moto Bug enemy (GHZ)
00010298                            ; ---------------------------------------------------------------------------
00010298 0000 0000                  		dc.w byte_F7AE-Map_obj40, byte_F7C3-Map_obj40
0001029C 0000 0000                  		dc.w byte_F7D8-Map_obj40, byte_F7F2-Map_obj40
000102A0 0000 0000                  		dc.w byte_F7F8-Map_obj40, byte_F7FE-Map_obj40
000102A4 0000                       		dc.w byte_F804-Map_obj40
000102A6 04                         byte_F7AE:	dc.b 4
000102A7 F00D 0000 EC               		dc.b $F0, $D, 0, 0, $EC
000102AC 000C 0008 EC               		dc.b 0,	$C, 0, 8, $EC
000102B1 F801 000C 0C               		dc.b $F8, 1, 0,	$C, $C
000102B6 0808 000E F4               		dc.b 8,	8, 0, $E, $F4
000102BB 04                         byte_F7C3:	dc.b 4
000102BC F10D 0000 EC               		dc.b $F1, $D, 0, 0, $EC
000102C1 010C 0008 EC               		dc.b 1,	$C, 0, 8, $EC
000102C6 F901 000C 0C               		dc.b $F9, 1, 0,	$C, $C
000102CB 0908 0011 F4               		dc.b 9,	8, 0, $11, $F4
000102D0 05                         byte_F7D8:	dc.b 5
000102D1 F00D 0000 EC               		dc.b $F0, $D, 0, 0, $EC
000102D6 000C 0014 EC               		dc.b 0,	$C, 0, $14, $EC
000102DB F801 000C 0C               		dc.b $F8, 1, 0,	$C, $C
000102E0 0804 0018 EC               		dc.b 8,	4, 0, $18, $EC
000102E5 0804 0012 FC               		dc.b 8,	4, 0, $12, $FC
000102EA 01                         byte_F7F2:	dc.b 1
000102EB FA00 001A 10               		dc.b $FA, 0, 0,	$1A, $10
000102F0 01                         byte_F7F8:	dc.b 1
000102F1 FA00 001B 10               		dc.b $FA, 0, 0,	$1B, $10
000102F6 01                         byte_F7FE:	dc.b 1
000102F7 FA00 001C 10               		dc.b $FA, 0, 0,	$1C, $10
000102FC 00                         byte_F804:	dc.b 0
000102FE 00                         		even
000102FE 00                         		even
000102FE                            
000102FE                            ; ===========================================================================
000102FE                            ; ---------------------------------------------------------------------------
000102FE                            ; Object 4F - blank
000102FE                            ; ---------------------------------------------------------------------------
000102FE                            
000102FE                            Obj4F:					; XREF: Obj_Index
000102FE 4E75                       		rts	
00010300                            
00010300                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00010300                            
00010300                            
00010300                            Obj50_ChkWall:				; XREF: Obj50_FixToFloor
00010300 3038 FE04                  		move.w	($FFFFFE04).w,d0
00010304 D047                       		add.w	d7,d0
00010306 0240 0003                  		andi.w	#3,d0
0001030A 6600                       		bne.s	loc_F836
0001030C 7600                       		moveq	#0,d3
0001030E 1628 0019                  		move.b	$19(a0),d3
00010312 4A68 0010                  		tst.w	$10(a0)
00010316 6B00                       		bmi.s	loc_F82C
00010318 6100 0000                  		bsr.w	ObjHitWallRight
0001031C 4A41                       		tst.w	d1
0001031E 6A00                       		bpl.s	loc_F836
00010320                            
00010320                            loc_F828:
00010320 7001                       		moveq	#1,d0
00010322 4E75                       		rts	
00010324                            ; ===========================================================================
00010324                            
00010324                            loc_F82C:
00010324 4643                       		not.w	d3
00010326 6100 0000                  		bsr.w	ObjHitWallLeft
0001032A 4A41                       		tst.w	d1
0001032C 6BF2                       		bmi.s	loc_F828
0001032E                            
0001032E                            loc_F836:
0001032E 7000                       		moveq	#0,d0
00010330 4E75                       		rts	
00010332                            ; End of function Obj50_ChkWall
00010332                            
00010332                            ; ===========================================================================
00010332                            ; ---------------------------------------------------------------------------
00010332                            ; Object 50 - Yadrin enemy (SYZ)
00010332                            ; ---------------------------------------------------------------------------
00010332                            
00010332                            Obj50:					; XREF: Obj_Index
00010332 7000                       		moveq	#0,d0
00010334 1028 0024                  		move.b	$24(a0),d0
00010338 323B 0000                  		move.w	Obj50_Index(pc,d0.w),d1
0001033C 4EFB 1000                  		jmp	Obj50_Index(pc,d1.w)
00010340                            ; ===========================================================================
00010340 0000                       Obj50_Index:	dc.w Obj50_Main-Obj50_Index
00010342 0000                       		dc.w Obj50_Action-Obj50_Index
00010344                            ; ===========================================================================
00010344                            
00010344                            Obj50_Main:				; XREF: Obj50_Index
00010344 217C 0000 0000 0004        		move.l	#Map_obj50,4(a0)
0001034C 317C 247B 0002             		move.w	#$247B,2(a0)
00010352 117C 0004 0001             		move.b	#4,1(a0)
00010358 117C 0004 0018             		move.b	#4,$18(a0)
0001035E 117C 0014 0019             		move.b	#$14,$19(a0)
00010364 117C 0011 0016             		move.b	#$11,$16(a0)
0001036A 117C 0008 0017             		move.b	#8,$17(a0)
00010370 117C 00CC 0020             		move.b	#$CC,$20(a0)
00010376 6100 DD1A                  		bsr.w	ObjectFall
0001037A 6100 0000                  		bsr.w	ObjHitFloor
0001037E 4A41                       		tst.w	d1
00010380 6A00                       		bpl.s	locret_F89E
00010382 D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
00010386 317C 0000 0012             		move.w	#0,$12(a0)
0001038C 5428 0024                  		addq.b	#2,$24(a0)
00010390 0868 0000 0022             		bchg	#0,$22(a0)
00010396                            
00010396                            locret_F89E:
00010396 4E75                       		rts	
00010398                            ; ===========================================================================
00010398                            
00010398                            Obj50_Action:				; XREF: Obj50_Index
00010398 7000                       		moveq	#0,d0
0001039A 1028 0025                  		move.b	$25(a0),d0
0001039E 323B 0000                  		move.w	Obj50_Index2(pc,d0.w),d1
000103A2 4EBB 1000                  		jsr	Obj50_Index2(pc,d1.w)
000103A6 43F9 0000 0000             		lea	(Ani_obj50).l,a1
000103AC 6100 AE48                  		bsr.w	AnimateSprite
000103B0 6000 FDF4                  		bra.w	MarkObjGone
000103B4                            ; ===========================================================================
000103B4 0000                       Obj50_Index2:	dc.w Obj50_Move-Obj50_Index2
000103B6 0000                       		dc.w Obj50_FixToFloor-Obj50_Index2
000103B8                            ; ===========================================================================
000103B8                            
000103B8                            Obj50_Move:				; XREF: Obj50_Index2
000103B8 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from pause	time
000103BC 6A00                       		bpl.s	locret_F8E2	; if time remains, branch
000103BE 5428 0025                  		addq.b	#2,$25(a0)
000103C2 317C FF00 0010             		move.w	#-$100,$10(a0)	; move object
000103C8 117C 0001 001C             		move.b	#1,$1C(a0)
000103CE 0868 0000 0022             		bchg	#0,$22(a0)
000103D4 6600                       		bne.s	locret_F8E2
000103D6 4468 0010                  		neg.w	$10(a0)		; change direction
000103DA                            
000103DA                            locret_F8E2:
000103DA 4E75                       		rts	
000103DC                            ; ===========================================================================
000103DC                            
000103DC                            Obj50_FixToFloor:			; XREF: Obj50_Index2
000103DC 6100 DCE0                  		bsr.w	SpeedToPos
000103E0 6100 0000                  		bsr.w	ObjHitFloor
000103E4 0C41 FFF8                  		cmpi.w	#-8,d1
000103E8 6D00                       		blt.s	Obj50_Pause
000103EA 0C41 000C                  		cmpi.w	#$C,d1
000103EE 6C00                       		bge.s	Obj50_Pause
000103F0 D368 000C                  		add.w	d1,$C(a0)	; match	object's position to the floor
000103F4 6100 FF0A                  		bsr.w	Obj50_ChkWall
000103F8 6600                       		bne.s	Obj50_Pause
000103FA 4E75                       		rts	
000103FC                            ; ===========================================================================
000103FC                            
000103FC                            Obj50_Pause:				; XREF: Obj50_FixToFloor
000103FC 5528 0025                  		subq.b	#2,$25(a0)
00010400 317C 003B 0030             		move.w	#59,$30(a0)	; set pause time to 1 second
00010406 317C 0000 0010             		move.w	#0,$10(a0)
0001040C 117C 0000 001C             		move.b	#0,$1C(a0)
00010412 4E75                       		rts	
00010414                            ; ===========================================================================
00010414                            Ani_obj50:
00010414                            	include "_anim\obj50.asm"
00010414                            ; ---------------------------------------------------------------------------
00010414                            ; Animation script - Yadrin enemy
00010414                            ; ---------------------------------------------------------------------------
00010414 0000                       		dc.w byte_F920-Ani_obj50
00010416 0000                       		dc.w byte_F924-Ani_obj50
00010418 0700 FF00                  byte_F920:	dc.b 7,	0, $FF,	0
0001041C 0700 0301 0400 0302 05FF   byte_F924:	dc.b 7,	0, 3, 1, 4, 0, 3, 2, 5,	$FF
00010426                            		even
00010426                            		even
00010426                            
00010426                            ; ---------------------------------------------------------------------------
00010426                            ; Sprite mappings - Yadrin enemy (SYZ)
00010426                            ; ---------------------------------------------------------------------------
00010426                            Map_obj50:
00010426                            	include "_maps\obj50.asm"
00010426                            ; ---------------------------------------------------------------------------
00010426                            ; Sprite mappings - Yadrin enemy (SYZ)
00010426                            ; ---------------------------------------------------------------------------
00010426 0000 0000                  		dc.w byte_F93A-Map_obj50, byte_F954-Map_obj50
0001042A 0000 0000                  		dc.w byte_F96E-Map_obj50, byte_F988-Map_obj50
0001042E 0000 0000                  		dc.w byte_F9A2-Map_obj50, byte_F9BC-Map_obj50
00010432 05                         byte_F93A:	dc.b 5
00010433 F408 0000 F4               		dc.b $F4, 8, 0,	0, $F4
00010438 FC0E 0003 EC               		dc.b $FC, $E, 0, 3, $EC
0001043D EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
00010442 F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
00010447 0409 0031 FC               		dc.b 4,	9, 0, $31, $FC
0001044C 05                         byte_F954:	dc.b 5
0001044D F408 0014 F4               		dc.b $F4, 8, 0,	$14, $F4
00010452 FC0E 0017 EC               		dc.b $FC, $E, 0, $17, $EC
00010457 EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
0001045C F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
00010461 0409 0031 FC               		dc.b 4,	9, 0, $31, $FC
00010466 05                         byte_F96E:	dc.b 5
00010467 F409 0023 F4               		dc.b $F4, 9, 0,	$23, $F4
0001046C 040D 0029 EC               		dc.b 4,	$D, 0, $29, $EC
00010471 EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
00010476 F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
0001047B 0409 0031 FC               		dc.b 4,	9, 0, $31, $FC
00010480 05                         byte_F988:	dc.b 5
00010481 F408 0000 F4               		dc.b $F4, 8, 0,	0, $F4
00010486 FC0E 0003 EC               		dc.b $FC, $E, 0, 3, $EC
0001048B EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
00010490 F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
00010495 0409 0037 FC               		dc.b 4,	9, 0, $37, $FC
0001049A 05                         byte_F9A2:	dc.b 5
0001049B F408 0014 F4               		dc.b $F4, 8, 0,	$14, $F4
000104A0 FC0E 0017 EC               		dc.b $FC, $E, 0, $17, $EC
000104A5 EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
000104AA F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
000104AF 0409 0037 FC               		dc.b 4,	9, 0, $37, $FC
000104B4 05                         byte_F9BC:	dc.b 5
000104B5 F409 0023 F4               		dc.b $F4, 9, 0,	$23, $F4
000104BA 040D 0029 EC               		dc.b 4,	$D, 0, $29, $EC
000104BF EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
000104C4 F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
000104C9 0409 0037 FC               		dc.b 4,	9, 0, $37, $FC
000104CE                            		even
000104CE                            		even
000104CE                            
000104CE                            ; ---------------------------------------------------------------------------
000104CE                            ; Solid	object subroutine (includes spikes, blocks, rocks etc)
000104CE                            ;
000104CE                            ; variables:
000104CE                            ; d1 = width
000104CE                            ; d2 = height /	2 (when	jumping)
000104CE                            ; d3 = height /	2 (when	walking)
000104CE                            ; d4 = x-axis position
000104CE                            ; ---------------------------------------------------------------------------
000104CE                            
000104CE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000104CE                            
000104CE                            
000104CE                            SolidObject:
000104CE 4A28 0025                  		tst.b	$25(a0)
000104D2 6700 0000                  		beq.w	loc_FAC8
000104D6 3401                       		move.w	d1,d2
000104D8 D442                       		add.w	d2,d2
000104DA 43F8 D000                  		lea	($FFFFD000).w,a1
000104DE 0829 0001 0022             		btst	#1,$22(a1)
000104E4 6600                       		bne.s	loc_F9FE
000104E6 3029 0008                  		move.w	8(a1),d0
000104EA 9068 0008                  		sub.w	8(a0),d0
000104EE D041                       		add.w	d1,d0
000104F0 6B00                       		bmi.s	loc_F9FE
000104F2 B042                       		cmp.w	d2,d0
000104F4 6500                       		bcs.s	loc_FA12
000104F6                            
000104F6                            loc_F9FE:
000104F6 08A9 0003 0022             		bclr	#3,$22(a1)
000104FC 08A8 0003 0022             		bclr	#3,$22(a0)
00010502 4228 0025                  		clr.b	$25(a0)
00010506 7800                       		moveq	#0,d4
00010508 4E75                       		rts	
0001050A                            ; ===========================================================================
0001050A                            
0001050A                            loc_FA12:
0001050A 3404                       		move.w	d4,d2
0001050C 6100 809A                  		bsr.w	MvSonicOnPtfm
00010510 7800                       		moveq	#0,d4
00010512 4E75                       		rts	
00010514                            ; ===========================================================================
00010514                            
00010514                            SolidObject71:				; XREF: Obj71_Solid
00010514 4A28 0025                  		tst.b	$25(a0)
00010518 6700 0000                  		beq.w	loc_FAD0
0001051C 3401                       		move.w	d1,d2
0001051E D442                       		add.w	d2,d2
00010520 43F8 D000                  		lea	($FFFFD000).w,a1
00010524 0829 0001 0022             		btst	#1,$22(a1)
0001052A 6600                       		bne.s	loc_FA44
0001052C 3029 0008                  		move.w	8(a1),d0
00010530 9068 0008                  		sub.w	8(a0),d0
00010534 D041                       		add.w	d1,d0
00010536 6B00                       		bmi.s	loc_FA44
00010538 B042                       		cmp.w	d2,d0
0001053A 6500                       		bcs.s	loc_FA58
0001053C                            
0001053C                            loc_FA44:
0001053C 08A9 0003 0022             		bclr	#3,$22(a1)
00010542 08A8 0003 0022             		bclr	#3,$22(a0)
00010548 4228 0025                  		clr.b	$25(a0)
0001054C 7800                       		moveq	#0,d4
0001054E 4E75                       		rts	
00010550                            ; ===========================================================================
00010550                            
00010550                            loc_FA58:
00010550 3404                       		move.w	d4,d2
00010552 6100 8054                  		bsr.w	MvSonicOnPtfm
00010556 7800                       		moveq	#0,d4
00010558 4E75                       		rts	
0001055A                            ; ===========================================================================
0001055A                            
0001055A                            SolidObject2F:				; XREF: Obj2F_Solid
0001055A 43F8 D000                  		lea	($FFFFD000).w,a1
0001055E 4A28 0001                  		tst.b	1(a0)
00010562 6A00 0000                  		bpl.w	loc_FB92
00010566 3029 0008                  		move.w	8(a1),d0
0001056A 9068 0008                  		sub.w	8(a0),d0
0001056E D041                       		add.w	d1,d0
00010570 6B00 0000                  		bmi.w	loc_FB92
00010574 3601                       		move.w	d1,d3
00010576 D643                       		add.w	d3,d3
00010578 B043                       		cmp.w	d3,d0
0001057A 6200 0000                  		bhi.w	loc_FB92
0001057E 3A00                       		move.w	d0,d5
00010580 0828 0000 0001             		btst	#0,1(a0)
00010586 6700                       		beq.s	loc_FA94
00010588 4645                       		not.w	d5
0001058A DA43                       		add.w	d3,d5
0001058C                            
0001058C                            loc_FA94:
0001058C E24D                       		lsr.w	#1,d5
0001058E 7600                       		moveq	#0,d3
00010590 1632 5000                  		move.b	(a2,d5.w),d3
00010594 9612                       		sub.b	(a2),d3
00010596 3A28 000C                  		move.w	$C(a0),d5
0001059A 9A43                       		sub.w	d3,d5
0001059C 1629 0016                  		move.b	$16(a1),d3
000105A0 4883                       		ext.w	d3
000105A2 D443                       		add.w	d3,d2
000105A4 3629 000C                  		move.w	$C(a1),d3
000105A8 9645                       		sub.w	d5,d3
000105AA 5843                       		addq.w	#4,d3
000105AC D642                       		add.w	d2,d3
000105AE 6B00 0000                  		bmi.w	loc_FB92
000105B2 3802                       		move.w	d2,d4
000105B4 D844                       		add.w	d4,d4
000105B6 B644                       		cmp.w	d4,d3
000105B8 6400 0000                  		bcc.w	loc_FB92
000105BC 6000 0000                  		bra.w	loc_FB0E
000105C0                            ; ===========================================================================
000105C0                            
000105C0                            loc_FAC8:
000105C0 4A28 0001                  		tst.b	1(a0)
000105C4 6A00 0000                  		bpl.w	loc_FB92
000105C8                            
000105C8                            loc_FAD0:
000105C8 43F8 D000                  		lea	($FFFFD000).w,a1
000105CC 3029 0008                  		move.w	8(a1),d0
000105D0 9068 0008                  		sub.w	8(a0),d0
000105D4 D041                       		add.w	d1,d0
000105D6 6B00 0000                  		bmi.w	loc_FB92
000105DA 3601                       		move.w	d1,d3
000105DC D643                       		add.w	d3,d3
000105DE B043                       		cmp.w	d3,d0
000105E0 6200 0000                  		bhi.w	loc_FB92
000105E4 1629 0016                  		move.b	$16(a1),d3
000105E8 4883                       		ext.w	d3
000105EA D443                       		add.w	d3,d2
000105EC 3629 000C                  		move.w	$C(a1),d3
000105F0 9668 000C                  		sub.w	$C(a0),d3
000105F4 5843                       		addq.w	#4,d3
000105F6 D642                       		add.w	d2,d3
000105F8 6B00 0000                  		bmi.w	loc_FB92
000105FC 3802                       		move.w	d2,d4
000105FE D844                       		add.w	d4,d4
00010600 B644                       		cmp.w	d4,d3
00010602 6400 0000                  		bcc.w	loc_FB92
00010606                            
00010606                            loc_FB0E:
00010606 4A38 F7C8                  		tst.b	($FFFFF7C8).w
0001060A 6B00 0000                  		bmi.w	loc_FB92
0001060E 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00010614 6400 0000                  		bcc.w	loc_FB92
00010618 4A78 FE08                  		tst.w	($FFFFFE08).w
0001061C 6600 0000                  		bne.w	loc_FBAC
00010620 3A00                       		move.w	d0,d5
00010622 B240                       		cmp.w	d0,d1
00010624 6400                       		bcc.s	loc_FB36
00010626 D241                       		add.w	d1,d1
00010628 9041                       		sub.w	d1,d0
0001062A 3A00                       		move.w	d0,d5
0001062C 4445                       		neg.w	d5
0001062E                            
0001062E                            loc_FB36:
0001062E 3203                       		move.w	d3,d1
00010630 B443                       		cmp.w	d3,d2
00010632 6400                       		bcc.s	loc_FB44
00010634 5943                       		subq.w	#4,d3
00010636 9644                       		sub.w	d4,d3
00010638 3203                       		move.w	d3,d1
0001063A 4441                       		neg.w	d1
0001063C                            
0001063C                            loc_FB44:
0001063C BA41                       		cmp.w	d1,d5
0001063E 6200 0000                  		bhi.w	loc_FBB0
00010642 0C41 0004                  		cmpi.w	#4,d1
00010646 6300                       		bls.s	loc_FB8C
00010648 4A40                       		tst.w	d0
0001064A 6700                       		beq.s	loc_FB70
0001064C 6B00                       		bmi.s	loc_FB5E
0001064E 4A69 0010                  		tst.w	$10(a1)
00010652 6B00                       		bmi.s	loc_FB70
00010654 6000                       		bra.s	loc_FB64
00010656                            ; ===========================================================================
00010656                            
00010656                            loc_FB5E:
00010656 4A69 0010                  		tst.w	$10(a1)
0001065A 6A00                       		bpl.s	loc_FB70
0001065C                            
0001065C                            loc_FB64:
0001065C 337C 0000 0014             		move.w	#0,$14(a1)	; stop Sonic moving
00010662 337C 0000 0010             		move.w	#0,$10(a1)
00010668                            
00010668                            loc_FB70:
00010668 9169 0008                  		sub.w	d0,8(a1)
0001066C 0829 0001 0022             		btst	#1,$22(a1)
00010672 6600                       		bne.s	loc_FB8C
00010674 08E9 0005 0022             		bset	#5,$22(a1)
0001067A 08E8 0005 0022             		bset	#5,$22(a0)
00010680 7801                       		moveq	#1,d4
00010682 4E75                       		rts	
00010684                            ; ===========================================================================
00010684                            
00010684                            loc_FB8C:
00010684 6100                       		bsr.s	loc_FBA0
00010686 7801                       		moveq	#1,d4
00010688 4E75                       		rts	
0001068A                            ; ===========================================================================
0001068A                            
0001068A                            loc_FB92:
0001068A 0828 0005 0022             		btst	#5,$22(a0)
00010690 6700                       		beq.s	loc_FBAC
00010692 0C29 0002 001C             		cmp.b	#2,$1C(a1)	; check if in jumping/rolling animation
00010698 6700                       		beq.s	loc_FBA0
0001069A 0C29 0017 001C             		cmp.b	#$17,$1C(a1)	; check if in drowning animation
000106A0 6700                       		beq.s	loc_FBA0
000106A2 0C29 001A 001C             		cmp.b	#$1A,$1C(a1)	; check if in hurt animation
000106A8 6700                       		beq.s	loc_FBA0
000106AA 337C 0001 001C             		move.w	#1,$1C(a1)	; use walking animation
000106B0                            
000106B0                            loc_FBA0:
000106B0 08A8 0005 0022             		bclr	#5,$22(a0)
000106B6                            
000106B6 08A9 0005 0022             		bclr	#5,$22(a1)
000106BC                            
000106BC                            loc_FBAC:
000106BC 7800                       		moveq	#0,d4
000106BE 4E75                       		rts	
000106C0                            ; ===========================================================================
000106C0                            
000106C0                            loc_FBB0:
000106C0 4A43                       		tst.w	d3
000106C2 6B00                       		bmi.s	loc_FBBC
000106C4 0C43 0010                  		cmpi.w	#$10,d3
000106C8 6500                       		bcs.s	loc_FBEE
000106CA 60BE                       		bra.s	loc_FB92
000106CC                            ; ===========================================================================
000106CC                            
000106CC                            loc_FBBC:
000106CC 4A69 0012                  		tst.w	$12(a1)
000106D0 6700                       		beq.s	loc_FBD6
000106D2 6A00                       		bpl.s	loc_FBD2
000106D4 4A43                       		tst.w	d3
000106D6 6A00                       		bpl.s	loc_FBD2
000106D8 9769 000C                  		sub.w	d3,$C(a1)
000106DC 337C 0000 0012             		move.w	#0,$12(a1)	; stop Sonic moving
000106E2                            
000106E2                            loc_FBD2:
000106E2 78FF                       		moveq	#-1,d4
000106E4 4E75                       		rts	
000106E6                            ; ===========================================================================
000106E6                            
000106E6                            loc_FBD6:
000106E6 0829 0001 0022             		btst	#1,$22(a1)
000106EC 66F4                       		bne.s	loc_FBD2
000106EE 2F08                       		move.l	a0,-(sp)
000106F0 2049                       		movea.l	a1,a0
000106F2 4EB9 0000 0000             		jsr	KillSonic
000106F8 205F                       		movea.l	(sp)+,a0
000106FA 78FF                       		moveq	#-1,d4
000106FC 4E75                       		rts	
000106FE                            ; ===========================================================================
000106FE                            
000106FE                            loc_FBEE:
000106FE 5943                       		subq.w	#4,d3
00010700 7200                       		moveq	#0,d1
00010702 1228 0019                  		move.b	$19(a0),d1
00010706 3401                       		move.w	d1,d2
00010708 D442                       		add.w	d2,d2
0001070A D269 0008                  		add.w	8(a1),d1
0001070E 9268 0008                  		sub.w	8(a0),d1
00010712 6B00                       		bmi.s	loc_FC28
00010714 B242                       		cmp.w	d2,d1
00010716 6400                       		bcc.s	loc_FC28
00010718 4A69 0012                  		tst.w	$12(a1)
0001071C 6B00                       		bmi.s	loc_FC28
0001071E 9769 000C                  		sub.w	d3,$C(a1)
00010722 5369 000C                  		subq.w	#1,$C(a1)
00010726 6100                       		bsr.s	sub_FC2C
00010728 117C 0002 0025             		move.b	#2,$25(a0)
0001072E 08E8 0003 0022             		bset	#3,$22(a0)
00010734 78FF                       		moveq	#-1,d4
00010736 4E75                       		rts	
00010738                            ; ===========================================================================
00010738                            
00010738                            loc_FC28:
00010738 7800                       		moveq	#0,d4
0001073A 4E75                       		rts	
0001073C                            ; End of function SolidObject
0001073C                            
0001073C                            
0001073C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001073C                            
0001073C                            
0001073C                            sub_FC2C:				; XREF: SolidObject
0001073C 0829 0003 0022             		btst	#3,$22(a1)
00010742 6700                       		beq.s	loc_FC4E
00010744 7000                       		moveq	#0,d0
00010746 1029 003D                  		move.b	$3D(a1),d0
0001074A ED48                       		lsl.w	#6,d0
0001074C 0680 00FF D000             		addi.l	#$FFD000,d0
00010752 2440                       		movea.l	d0,a2
00010754 08AA 0003 0022             		bclr	#3,$22(a2)
0001075A 422A 0025                  		clr.b	$25(a2)
0001075E                            
0001075E                            loc_FC4E:
0001075E 3008                       		move.w	a0,d0
00010760 0440 D000                  		subi.w	#-$3000,d0
00010764 EC48                       		lsr.w	#6,d0
00010766 0240 007F                  		andi.w	#$7F,d0
0001076A 1340 003D                  		move.b	d0,$3D(a1)
0001076E 137C 0000 0026             		move.b	#0,$26(a1)
00010774 337C 0000 0012             		move.w	#0,$12(a1)
0001077A 3369 0010 0014             		move.w	$10(a1),$14(a1)
00010780 0829 0001 0022             		btst	#1,$22(a1)
00010786 6700                       		beq.s	loc_FC84
00010788 2F08                       		move.l	a0,-(sp)
0001078A 2049                       		movea.l	a1,a0
0001078C 4EB9 0000 0000             		jsr	Sonic_ResetOnFloor
00010792 205F                       		movea.l	(sp)+,a0
00010794                            
00010794                            loc_FC84:
00010794 08E9 0003 0022             		bset	#3,$22(a1)
0001079A 08E8 0003 0022             		bset	#3,$22(a0)
000107A0 4E75                       		rts	
000107A2                            ; End of function sub_FC2C
000107A2                            
000107A2                            ; ===========================================================================
000107A2                            ; ---------------------------------------------------------------------------
000107A2                            ; Object 51 - smashable	green block (MZ)
000107A2                            ; ---------------------------------------------------------------------------
000107A2                            
000107A2                            Obj51:					; XREF: Obj_Index
000107A2 7000                       		moveq	#0,d0
000107A4 1028 0024                  		move.b	$24(a0),d0
000107A8 323B 0000                  		move.w	Obj51_Index(pc,d0.w),d1
000107AC 4EBB 1000                  		jsr	Obj51_Index(pc,d1.w)
000107B0 6000 F9F4                  		bra.w	MarkObjGone
000107B4                            ; ===========================================================================
000107B4 0000                       Obj51_Index:	dc.w Obj51_Main-Obj51_Index
000107B6 0000                       		dc.w Obj51_Solid-Obj51_Index
000107B8 0000                       		dc.w Obj51_Display-Obj51_Index
000107BA                            ; ===========================================================================
000107BA                            
000107BA                            Obj51_Main:				; XREF: Obj51_Index
000107BA 5428 0024                  		addq.b	#2,$24(a0)
000107BE 217C 0000 0000 0004        		move.l	#Map_obj51,4(a0)
000107C6 317C 42B8 0002             		move.w	#$42B8,2(a0)
000107CC 117C 0004 0001             		move.b	#4,1(a0)
000107D2 117C 0010 0019             		move.b	#$10,$19(a0)
000107D8 117C 0004 0018             		move.b	#4,$18(a0)
000107DE 1168 0028 001A             		move.b	$28(a0),$1A(a0)
000107E4                            
000107E4                            Obj51_Solid:				; XREF: Obj51_Index
000107E4 3178 F7D0 0034             		move.w	($FFFFF7D0).w,$34(a0)
000107EA 1178 D01C 0032             		move.b	($FFFFD01C).w,$32(a0) ;	load Sonic's animation number
000107F0 323C 001B                  		move.w	#$1B,d1
000107F4 343C 0010                  		move.w	#$10,d2
000107F8 363C 0011                  		move.w	#$11,d3
000107FC 3828 0008                  		move.w	8(a0),d4
00010800 6100 FCCC                  		bsr.w	SolidObject
00010804 0828 0003 0022             		btst	#3,$22(a0)
0001080A 6600                       		bne.s	Obj51_Smash
0001080C                            
0001080C                            locret_FCFC:
0001080C 4E75                       		rts	
0001080E                            ; ===========================================================================
0001080E                            
0001080E                            Obj51_Smash:				; XREF: Obj51_Solid
0001080E 0C28 0002 0032             		cmpi.b	#2,$32(a0)	; is Sonic rolling/jumping?
00010814 66F6                       		bne.s	locret_FCFC	; if not, branch
00010816 31E8 0034 F7D0             		move.w	$34(a0),($FFFFF7D0).w
0001081C 08E9 0002 0022             		bset	#2,$22(a1)
00010822 137C 000E 0016             		move.b	#$E,$16(a1)
00010828 137C 0007 0017             		move.b	#7,$17(a1)
0001082E 137C 0002 001C             		move.b	#2,$1C(a1)
00010834 337C FD00 0012             		move.w	#-$300,$12(a1)	; bounce Sonic upwards
0001083A 08E9 0001 0022             		bset	#1,$22(a1)
00010840 08A9 0003 0022             		bclr	#3,$22(a1)
00010846 137C 0002 0024             		move.b	#2,$24(a1)
0001084C 08A8 0003 0022             		bclr	#3,$22(a0)
00010852 4228 0025                  		clr.b	$25(a0)
00010856 117C 0001 001A             		move.b	#1,$1A(a0)
0001085C 49F9 0000 0000             		lea	(Obj51_Speeds).l,a4 ; load broken	fragment speed data
00010862 7203                       		moveq	#3,d1		; set number of	fragments to 4
00010864 343C 0038                  		move.w	#$38,d2
00010868 6100 D460                  		bsr.w	SmashObject
0001086C 6100 DD0C                  		bsr.w	SingleObjLoad
00010870 6600                       		bne.s	Obj51_Display
00010872 12BC 0029                  		move.b	#$29,0(a1)	; load points object
00010876 3368 0008 0008             		move.w	8(a0),8(a1)
0001087C 3368 000C 000C             		move.w	$C(a0),$C(a1)
00010882 3438 F7D0                  		move.w	($FFFFF7D0).w,d2
00010886 5478 F7D0                  		addq.w	#2,($FFFFF7D0).w
0001088A 0C42 0006                  		cmpi.w	#6,d2
0001088E 6500                       		bcs.s	Obj51_Bonus
00010890 7406                       		moveq	#6,d2
00010892                            
00010892                            Obj51_Bonus:
00010892 7000                       		moveq	#0,d0
00010894 303B 2000                  		move.w	Obj51_Points(pc,d2.w),d0
00010898 0C78 0020 F7D0             		cmpi.w	#$20,($FFFFF7D0).w ; have 16 blocks been smashed?
0001089E 6500                       		bcs.s	loc_FD98	; if not, branch
000108A0 303C 03E8                  		move.w	#1000,d0	; give higher points for 16th block
000108A4 740A                       		moveq	#10,d2
000108A6                            
000108A6                            loc_FD98:
000108A6 4EB9 0000 0000             		jsr	AddPoints
000108AC E24A                       		lsr.w	#1,d2
000108AE 1342 001A                  		move.b	d2,$1A(a1)
000108B2                            
000108B2                            Obj51_Display:				; XREF: Obj51_Index
000108B2 6100 D80A                  		bsr.w	SpeedToPos
000108B6 0668 0038 0012             		addi.w	#$38,$12(a0)
000108BC 6100 D826                  		bsr.w	DisplaySprite
000108C0 4A28 0001                  		tst.b	1(a0)
000108C4 6A00 D85A                  		bpl.w	DeleteObject
000108C8 4E75                       		rts	
000108CA                            ; ===========================================================================
000108CA FE00 FE00                  Obj51_Speeds:	dc.w $FE00, $FE00	; x-speed, y-speed
000108CE FF00 FF00                  		dc.w $FF00, $FF00
000108D2 0200 FE00                  		dc.w $200, $FE00
000108D6 0100 FF00                  		dc.w $100, $FF00
000108DA                            
000108DA 000A 0014 0032 0064        Obj51_Points:	dc.w 10, 20, 50, 100
000108E2                            ; ---------------------------------------------------------------------------
000108E2                            ; Sprite mappings - smashable green block (MZ)
000108E2                            ; ---------------------------------------------------------------------------
000108E2                            Map_obj51:
000108E2                            	include "_maps\obj51.asm"
000108E2                            ; ---------------------------------------------------------------------------
000108E2                            ; Sprite mappings - smashable green block (MZ)
000108E2                            ; ---------------------------------------------------------------------------
000108E2 0000                       		dc.w byte_FDD8-Map_obj51
000108E4 0000                       		dc.w byte_FDE3-Map_obj51
000108E6 02                         byte_FDD8:	dc.b 2
000108E7 F00D 0000 F0               		dc.b $F0, $D, 0, 0, $F0
000108EC 000D 0000 F0               		dc.b 0,	$D, 0, 0, $F0
000108F1 04                         byte_FDE3:	dc.b 4
000108F2 F005 8000 F0               		dc.b $F0, 5, $80, 0, $F0
000108F7 0005 8000 F0               		dc.b 0,	5, $80,	0, $F0
000108FC F005 8000 00               		dc.b $F0, 5, $80, 0, 0
00010901 0005 8000 00               		dc.b 0,	5, $80,	0, 0
00010906                            		even
00010906                            		even
00010906                            
00010906                            ; ===========================================================================
00010906                            ; ---------------------------------------------------------------------------
00010906                            ; Object 52 - moving platform blocks (MZ, LZ, SBZ)
00010906                            ; ---------------------------------------------------------------------------
00010906                            
00010906                            Obj52:					; XREF: Obj_Index
00010906 7000                       		moveq	#0,d0
00010908 1028 0024                  		move.b	$24(a0),d0
0001090C 323B 0000                  		move.w	Obj52_Index(pc,d0.w),d1
00010910 4EFB 1000                  		jmp	Obj52_Index(pc,d1.w)
00010914                            ; ===========================================================================
00010914 0000                       Obj52_Index:	dc.w Obj52_Main-Obj52_Index
00010916 0000                       		dc.w Obj52_Platform-Obj52_Index
00010918 0000                       		dc.w Obj52_StandOn-Obj52_Index
0001091A                            
0001091A 1000                       Obj52_Var:	dc.b $10, 0		; object width,	frame number
0001091C 2001                       		dc.b $20, 1
0001091E 2002                       		dc.b $20, 2
00010920 4003                       		dc.b $40, 3
00010922 3004                       		dc.b $30, 4
00010924                            ; ===========================================================================
00010924                            
00010924                            Obj52_Main:				; XREF: Obj52_Index
00010924 5428 0024                  		addq.b	#2,$24(a0)
00010928 217C 0000 0000 0004        		move.l	#Map_obj52,4(a0)
00010930 317C 42B8 0002             		move.w	#$42B8,2(a0)
00010936 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
0001093C 6600                       		bne.s	loc_FE44
0001093E 217C 0000 0000 0004        		move.l	#Map_obj52a,4(a0) ; LZ specific	code
00010946 317C 43BC 0002             		move.w	#$43BC,2(a0)
0001094C 117C 0007 0016             		move.b	#7,$16(a0)
00010952                            
00010952                            loc_FE44:
00010952 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
00010958 6600                       		bne.s	loc_FE60
0001095A 317C 22C0 0002             		move.w	#$22C0,2(a0)	; SBZ specific code (object 5228)
00010960 0C28 0028 0028             		cmpi.b	#$28,$28(a0)	; is object 5228 ?
00010966 6700                       		beq.s	loc_FE60	; if yes, branch
00010968 317C 4460 0002             		move.w	#$4460,2(a0)	; SBZ specific code (object 523x)
0001096E                            
0001096E                            loc_FE60:
0001096E 117C 0004 0001             		move.b	#4,1(a0)
00010974 7000                       		moveq	#0,d0
00010976 1028 0028                  		move.b	$28(a0),d0
0001097A E648                       		lsr.w	#3,d0
0001097C 0240 001E                  		andi.w	#$1E,d0
00010980 45FB 0098                  		lea	Obj52_Var(pc,d0.w),a2
00010984 115A 0019                  		move.b	(a2)+,$19(a0)
00010988 115A 001A                  		move.b	(a2)+,$1A(a0)
0001098C 117C 0004 0018             		move.b	#4,$18(a0)
00010992 3168 0008 0030             		move.w	8(a0),$30(a0)
00010998 3168 000C 0032             		move.w	$C(a0),$32(a0)
0001099E 0228 000F 0028             		andi.b	#$F,$28(a0)
000109A4                            
000109A4                            Obj52_Platform:				; XREF: Obj52_Index
000109A4 6100 0000                  		bsr.w	Obj52_Move
000109A8 7200                       		moveq	#0,d1
000109AA 1228 0019                  		move.b	$19(a0),d1
000109AE 4EB9 0000 7ED6             		jsr	(PlatformObject).l
000109B4 6000                       		bra.s	Obj52_ChkDel
000109B6                            ; ===========================================================================
000109B6                            
000109B6                            Obj52_StandOn:				; XREF: Obj52_Index
000109B6 7200                       		moveq	#0,d1
000109B8 1228 0019                  		move.b	$19(a0),d1
000109BC 4EB9 0000 804A             		jsr	(ExitPlatform).l
000109C2 3F28 0008                  		move.w	8(a0),-(sp)
000109C6 6100 0000                  		bsr.w	Obj52_Move
000109CA 341F                       		move.w	(sp)+,d2
000109CC 4EB9 0000 85B4             		jsr	(MvSonicOnPtfm2).l
000109D2                            
000109D2                            Obj52_ChkDel:				; XREF: Obj52_Platform
000109D2 3028 0030                  		move.w	$30(a0),d0
000109D6 0240 FF80                  		andi.w	#$FF80,d0
000109DA 3238 F700                  		move.w	($FFFFF700).w,d1
000109DE 0441 0080                  		subi.w	#$80,d1
000109E2 0241 FF80                  		andi.w	#$FF80,d1
000109E6 9041                       		sub.w	d1,d0
000109E8 0C40 0280                  		cmpi.w	#$280,d0
000109EC 6200 D732                  		bhi.w	DeleteObject
000109F0 6000 D6F2                  		bra.w	DisplaySprite
000109F4                            ; ===========================================================================
000109F4                            
000109F4                            Obj52_Move:				; XREF: Obj52_Platform; Obj52_StandOn
000109F4 7000                       		moveq	#0,d0
000109F6 1028 0028                  		move.b	$28(a0),d0
000109FA 0240 000F                  		andi.w	#$F,d0
000109FE D040                       		add.w	d0,d0
00010A00 323B 0000                  		move.w	Obj52_TypeIndex(pc,d0.w),d1
00010A04 4EFB 1000                  		jmp	Obj52_TypeIndex(pc,d1.w)
00010A08                            ; ===========================================================================
00010A08 0000 0000                  Obj52_TypeIndex:dc.w Obj52_Type00-Obj52_TypeIndex, Obj52_Type01-Obj52_TypeIndex
00010A0C 0000 0000                  		dc.w Obj52_Type02-Obj52_TypeIndex, Obj52_Type03-Obj52_TypeIndex
00010A10 0000 0000                  		dc.w Obj52_Type02-Obj52_TypeIndex, Obj52_Type05-Obj52_TypeIndex
00010A14 0000 0000                  		dc.w Obj52_Type06-Obj52_TypeIndex, Obj52_Type07-Obj52_TypeIndex
00010A18 0000 0000                  		dc.w Obj52_Type08-Obj52_TypeIndex, Obj52_Type02-Obj52_TypeIndex
00010A1C 0000                       		dc.w Obj52_Type0A-Obj52_TypeIndex
00010A1E                            ; ===========================================================================
00010A1E                            
00010A1E                            Obj52_Type00:				; XREF: Obj52_TypeIndex
00010A1E 4E75                       		rts	
00010A20                            ; ===========================================================================
00010A20                            
00010A20                            Obj52_Type01:				; XREF: Obj52_TypeIndex
00010A20 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
00010A24 323C 0060                  		move.w	#$60,d1
00010A28 0828 0000 0022             		btst	#0,$22(a0)
00010A2E 6700                       		beq.s	loc_FF26
00010A30 4440                       		neg.w	d0
00010A32 D041                       		add.w	d1,d0
00010A34                            
00010A34                            loc_FF26:
00010A34 3228 0030                  		move.w	$30(a0),d1
00010A38 9240                       		sub.w	d0,d1
00010A3A 3141 0008                  		move.w	d1,8(a0)
00010A3E 4E75                       		rts	
00010A40                            ; ===========================================================================
00010A40                            
00010A40                            Obj52_Type02:				; XREF: Obj52_TypeIndex
00010A40 0C28 0004 0024             		cmpi.b	#4,$24(a0)	; is Sonic standing on the platform?
00010A46 6600                       		bne.s	Obj52_02_Wait
00010A48 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
00010A4C                            
00010A4C                            Obj52_02_Wait:
00010A4C 4E75                       		rts	
00010A4E                            ; ===========================================================================
00010A4E                            
00010A4E                            Obj52_Type03:				; XREF: Obj52_TypeIndex
00010A4E 7600                       		moveq	#0,d3
00010A50 1628 0019                  		move.b	$19(a0),d3
00010A54 6100 0000                  		bsr.w	ObjHitWallRight
00010A58 4A41                       		tst.w	d1		; has the platform hit a wall?
00010A5A 6B00                       		bmi.s	Obj52_03_End	; if yes, branch
00010A5C 5268 0008                  		addq.w	#1,8(a0)	; move platform	to the right
00010A60 3168 0008 0030             		move.w	8(a0),$30(a0)
00010A66 4E75                       		rts	
00010A68                            ; ===========================================================================
00010A68                            
00010A68                            Obj52_03_End:
00010A68 4228 0028                  		clr.b	$28(a0)		; change to type 00 (non-moving	type)
00010A6C 4E75                       		rts	
00010A6E                            ; ===========================================================================
00010A6E                            
00010A6E                            Obj52_Type05:				; XREF: Obj52_TypeIndex
00010A6E 7600                       		moveq	#0,d3
00010A70 1628 0019                  		move.b	$19(a0),d3
00010A74 6100 0000                  		bsr.w	ObjHitWallRight
00010A78 4A41                       		tst.w	d1		; has the platform hit a wall?
00010A7A 6B00                       		bmi.s	Obj52_05_End	; if yes, branch
00010A7C 5268 0008                  		addq.w	#1,8(a0)	; move platform	to the right
00010A80 3168 0008 0030             		move.w	8(a0),$30(a0)
00010A86 4E75                       		rts	
00010A88                            ; ===========================================================================
00010A88                            
00010A88                            Obj52_05_End:
00010A88 5228 0028                  		addq.b	#1,$28(a0)	; change to type 06 (falling)
00010A8C 4E75                       		rts	
00010A8E                            ; ===========================================================================
00010A8E                            
00010A8E                            Obj52_Type06:				; XREF: Obj52_TypeIndex
00010A8E 6100 D62E                  		bsr.w	SpeedToPos
00010A92 0668 0018 0012             		addi.w	#$18,$12(a0)	; make the platform fall
00010A98 6100 0000                  		bsr.w	ObjHitFloor
00010A9C 4A41                       		tst.w	d1		; has platform hit the floor?
00010A9E 6A00 0000                  		bpl.w	locret_FFA0	; if not, branch
00010AA2 D368 000C                  		add.w	d1,$C(a0)
00010AA6 4268 0012                  		clr.w	$12(a0)		; stop platform	falling
00010AAA 4228 0028                  		clr.b	$28(a0)		; change to type 00 (non-moving)
00010AAE                            
00010AAE                            locret_FFA0:
00010AAE 4E75                       		rts	
00010AB0                            ; ===========================================================================
00010AB0                            
00010AB0                            Obj52_Type07:				; XREF: Obj52_TypeIndex
00010AB0 4A38 F7E2                  		tst.b	($FFFFF7E2).w	; has switch number 02 been pressed?
00010AB4 6700                       		beq.s	Obj52_07_ChkDel
00010AB6 5728 0028                  		subq.b	#3,$28(a0)	; if yes, change object	type to	04
00010ABA                            
00010ABA                            Obj52_07_ChkDel:
00010ABA 588F                       		addq.l	#4,sp
00010ABC 3028 0030                  		move.w	$30(a0),d0
00010AC0 0240 FF80                  		andi.w	#$FF80,d0
00010AC4 3238 F700                  		move.w	($FFFFF700).w,d1
00010AC8 0441 0080                  		subi.w	#$80,d1
00010ACC 0241 FF80                  		andi.w	#$FF80,d1
00010AD0 9041                       		sub.w	d1,d0
00010AD2 0C40 0280                  		cmpi.w	#$280,d0
00010AD6 6200 D648                  		bhi.w	DeleteObject
00010ADA 4E75                       		rts	
00010ADC                            ; ===========================================================================
00010ADC                            
00010ADC                            Obj52_Type08:				; XREF: Obj52_TypeIndex
00010ADC 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
00010AE0 323C 0080                  		move.w	#$80,d1
00010AE4 0828 0000 0022             		btst	#0,$22(a0)
00010AEA 6700                       		beq.s	loc_FFE2
00010AEC 4440                       		neg.w	d0
00010AEE D041                       		add.w	d1,d0
00010AF0                            
00010AF0                            loc_FFE2:
00010AF0 3228 0032                  		move.w	$32(a0),d1
00010AF4 9240                       		sub.w	d0,d1
00010AF6 3141 000C                  		move.w	d1,$C(a0)
00010AFA 4E75                       		rts	
00010AFC                            ; ===========================================================================
00010AFC                            
00010AFC                            Obj52_Type0A:				; XREF: Obj52_TypeIndex
00010AFC 7600                       		moveq	#0,d3
00010AFE 1628 0019                  		move.b	$19(a0),d3
00010B02 D643                       		add.w	d3,d3
00010B04 7208                       		moveq	#8,d1
00010B06 0828 0000 0022             		btst	#0,$22(a0)
00010B0C 6700                       		beq.s	loc_10004
00010B0E 4441                       		neg.w	d1
00010B10 4443                       		neg.w	d3
00010B12                            
00010B12                            loc_10004:
00010B12 4A68 0036                  		tst.w	$36(a0)		; is platform set to move back?
00010B16 6600                       		bne.s	Obj52_0A_Back	; if yes, branch
00010B18 3028 0008                  		move.w	8(a0),d0
00010B1C 9068 0030                  		sub.w	$30(a0),d0
00010B20 B043                       		cmp.w	d3,d0
00010B22 6700                       		beq.s	Obj52_0A_Wait
00010B24 D368 0008                  		add.w	d1,8(a0)	; move platform
00010B28 317C 012C 0034             		move.w	#300,$34(a0)	; set time delay to 5 seconds
00010B2E 4E75                       		rts	
00010B30                            ; ===========================================================================
00010B30                            
00010B30                            Obj52_0A_Wait:
00010B30 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from time delay
00010B34 6600                       		bne.s	locret_1002E	; if time remains, branch
00010B36 317C 0001 0036             		move.w	#1,$36(a0)	; set platform to move back to its original position
00010B3C                            
00010B3C                            locret_1002E:
00010B3C 4E75                       		rts	
00010B3E                            ; ===========================================================================
00010B3E                            
00010B3E                            Obj52_0A_Back:
00010B3E 3028 0008                  		move.w	8(a0),d0
00010B42 9068 0030                  		sub.w	$30(a0),d0
00010B46 6700                       		beq.s	Obj52_0A_Reset
00010B48 9368 0008                  		sub.w	d1,8(a0)	; return platform to its original position
00010B4C 4E75                       		rts	
00010B4E                            ; ===========================================================================
00010B4E                            
00010B4E                            Obj52_0A_Reset:
00010B4E 4268 0036                  		clr.w	$36(a0)
00010B52 5328 0028                  		subq.b	#1,$28(a0)
00010B56 4E75                       		rts	
00010B58                            ; ===========================================================================
00010B58                            ; ---------------------------------------------------------------------------
00010B58                            ; Sprite mappings - moving blocks (MZ, SBZ)
00010B58                            ; ---------------------------------------------------------------------------
00010B58                            Map_obj52:
00010B58                            	include "_maps\obj52mz.asm"
00010B58                            ; ---------------------------------------------------------------------------
00010B58                            ; Sprite mappings - moving blocks (MZ, SBZ)
00010B58                            ; ---------------------------------------------------------------------------
00010B58 0000 0000                  		dc.w byte_10054-Map_obj52, byte_1005A-Map_obj52
00010B5C 0000 0000                  		dc.w byte_10065-Map_obj52, byte_1007A-Map_obj52
00010B60 0000                       		dc.w byte_1008F-Map_obj52
00010B62 01                         byte_10054:	dc.b 1
00010B63 F80F 0008 F0               		dc.b $F8, $F, 0, 8, $F0
00010B68 02                         byte_1005A:	dc.b 2
00010B69 F80F 0008 E0               		dc.b $F8, $F, 0, 8, $E0
00010B6E F80F 0008 00               		dc.b $F8, $F, 0, 8, 0
00010B73 04                         byte_10065:	dc.b 4
00010B74 F80C 2000 E0               		dc.b $F8, $C, $20, 0, $E0
00010B79 000D 0004 E0               		dc.b 0,	$D, 0, 4, $E0
00010B7E F80C 2000 00               		dc.b $F8, $C, $20, 0, 0
00010B83 000D 0004 00               		dc.b 0,	$D, 0, 4, 0
00010B88 04                         byte_1007A:	dc.b 4
00010B89 F80E 0000 C0               		dc.b $F8, $E, 0, 0, $C0
00010B8E F80E 0003 E0               		dc.b $F8, $E, 0, 3, $E0
00010B93 F80E 0003 00               		dc.b $F8, $E, 0, 3, 0
00010B98 F80E 0800 20               		dc.b $F8, $E, 8, 0, $20
00010B9D 03                         byte_1008F:	dc.b 3
00010B9E F80F 0008 D0               		dc.b $F8, $F, 0, 8, $D0
00010BA3 F80F 0008 F0               		dc.b $F8, $F, 0, 8, $F0
00010BA8 F80F 0008 10               		dc.b $F8, $F, 0, 8, $10
00010BAE 00                         		even
00010BAE 00                         		even
00010BAE                            
00010BAE                            ; ---------------------------------------------------------------------------
00010BAE                            ; Sprite mappings - moving block (LZ)
00010BAE                            ; ---------------------------------------------------------------------------
00010BAE                            Map_obj52a:
00010BAE                            	include "_maps\obj52lz.asm"
00010BAE                            ; ---------------------------------------------------------------------------
00010BAE                            ; Sprite mappings - moving block (LZ)
00010BAE                            ; ---------------------------------------------------------------------------
00010BAE 0000                       		dc.w byte_100A2-Map_obj52a
00010BB0 01                         byte_100A2:	dc.b 1
00010BB1 F80D 0000 F0               		dc.b $F8, $D, 0, 0, $F0
00010BB6                            		even
00010BB6                            		even
00010BB6                            
00010BB6                            ; ===========================================================================
00010BB6                            ; ---------------------------------------------------------------------------
00010BB6                            ; Object 55 - Basaran enemy (MZ)
00010BB6                            ; ---------------------------------------------------------------------------
00010BB6                            
00010BB6                            Obj55:					; XREF: Obj_Index
00010BB6 7000                       		moveq	#0,d0
00010BB8 1028 0024                  		move.b	$24(a0),d0
00010BBC 323B 0000                  		move.w	Obj55_Index(pc,d0.w),d1
00010BC0 4EFB 1000                  		jmp	Obj55_Index(pc,d1.w)
00010BC4                            ; ===========================================================================
00010BC4 0000                       Obj55_Index:	dc.w Obj55_Main-Obj55_Index
00010BC6 0000                       		dc.w Obj55_Action-Obj55_Index
00010BC8                            ; ===========================================================================
00010BC8                            
00010BC8                            Obj55_Main:				; XREF: Obj55_Index
00010BC8 5428 0024                  		addq.b	#2,$24(a0)
00010BCC 217C 0000 0000 0004        		move.l	#Map_obj55,4(a0)
00010BD4 317C 84B8 0002             		move.w	#$84B8,2(a0)
00010BDA 117C 0004 0001             		move.b	#4,1(a0)
00010BE0 117C 000C 0016             		move.b	#$C,$16(a0)
00010BE6 117C 0002 0018             		move.b	#2,$18(a0)
00010BEC 117C 000B 0020             		move.b	#$B,$20(a0)
00010BF2 117C 0010 0019             		move.b	#$10,$19(a0)
00010BF8                            
00010BF8                            Obj55_Action:				; XREF: Obj55_Index
00010BF8 7000                       		moveq	#0,d0
00010BFA 1028 0025                  		move.b	$25(a0),d0
00010BFE 323B 0000                  		move.w	Obj55_Index2(pc,d0.w),d1
00010C02 4EBB 1000                  		jsr	Obj55_Index2(pc,d1.w)
00010C06 43F9 0000 0000             		lea	(Ani_obj55).l,a1
00010C0C 6100 A5E8                  		bsr.w	AnimateSprite
00010C10 6000 F594                  		bra.w	MarkObjGone
00010C14                            ; ===========================================================================
00010C14 0000                       Obj55_Index2:	dc.w Obj55_ChkDrop-Obj55_Index2
00010C16 0000                       		dc.w Obj55_DropFly-Obj55_Index2
00010C18 0000                       		dc.w Obj55_PlaySnd-Obj55_Index2
00010C1A 0000                       		dc.w Obj55_FlyUp-Obj55_Index2
00010C1C                            ; ===========================================================================
00010C1C                            
00010C1C                            Obj55_ChkDrop:				; XREF: Obj55_Index2
00010C1C 343C 0080                  		move.w	#$80,d2
00010C20 6100 0000                  		bsr.w	Obj55_ChkSonic
00010C24 6400                       		bcc.s	Obj55_NoDrop
00010C26 3038 D00C                  		move.w	($FFFFD00C).w,d0
00010C2A 3140 0036                  		move.w	d0,$36(a0)
00010C2E 9068 000C                  		sub.w	$C(a0),d0
00010C32 6500                       		bcs.s	Obj55_NoDrop
00010C34 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic within $80 pixels of	basaran?
00010C38 6400                       		bcc.s	Obj55_NoDrop	; if not, branch
00010C3A 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
00010C3E 6600                       		bne.s	Obj55_NoDrop	; if yes, branch
00010C40 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00010C44 D007                       		add.b	d7,d0
00010C46 0200 0007                  		andi.b	#7,d0
00010C4A 6600                       		bne.s	Obj55_NoDrop
00010C4C 117C 0001 001C             		move.b	#1,$1C(a0)
00010C52 5428 0025                  		addq.b	#2,$25(a0)
00010C56                            
00010C56                            Obj55_NoDrop:
00010C56 4E75                       		rts	
00010C58                            ; ===========================================================================
00010C58                            
00010C58                            Obj55_DropFly:				; XREF: Obj55_Index2
00010C58 6100 D464                  		bsr.w	SpeedToPos
00010C5C 0668 0018 0012             		addi.w	#$18,$12(a0)	; make basaran fall
00010C62 343C 0080                  		move.w	#$80,d2
00010C66 6100 0000                  		bsr.w	Obj55_ChkSonic
00010C6A 3028 0036                  		move.w	$36(a0),d0
00010C6E 9068 000C                  		sub.w	$C(a0),d0
00010C72 6500                       		bcs.s	Obj55_ChkDel
00010C74 0C40 0010                  		cmpi.w	#$10,d0
00010C78 6400                       		bcc.s	locret_10180
00010C7A 3141 0010                  		move.w	d1,$10(a0)	; make basaran fly horizontally
00010C7E 317C 0000 0012             		move.w	#0,$12(a0)	; stop basaran falling
00010C84 117C 0002 001C             		move.b	#2,$1C(a0)
00010C8A 5428 0025                  		addq.b	#2,$25(a0)
00010C8E                            
00010C8E                            locret_10180:
00010C8E 4E75                       		rts	
00010C90                            ; ===========================================================================
00010C90                            
00010C90                            Obj55_ChkDel:				; XREF: Obj55_DropFly
00010C90 4A28 0001                  		tst.b	1(a0)
00010C94 6A00 D48A                  		bpl.w	DeleteObject
00010C98 4E75                       		rts	
00010C9A                            ; ===========================================================================
00010C9A                            
00010C9A                            Obj55_PlaySnd:				; XREF: Obj55_Index2
00010C9A 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00010C9E 0200 000F                  		andi.b	#$F,d0
00010CA2 6600                       		bne.s	loc_101A0
00010CA4 303C 00C0                  		move.w	#$C0,d0
00010CA8 4EB9 0000 147C             		jsr	(PlaySound_Special).l ;	play flapping sound
00010CAE                            
00010CAE                            loc_101A0:
00010CAE 6100 D40E                  		bsr.w	SpeedToPos
00010CB2 3038 D008                  		move.w	($FFFFD008).w,d0
00010CB6 9068 0008                  		sub.w	8(a0),d0
00010CBA 6400                       		bcc.s	loc_101B0
00010CBC 4440                       		neg.w	d0
00010CBE                            
00010CBE                            loc_101B0:
00010CBE 0C40 0080                  		cmpi.w	#$80,d0
00010CC2 6500                       		bcs.s	locret_101C6
00010CC4 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00010CC8 D007                       		add.b	d7,d0
00010CCA 0200 0007                  		andi.b	#7,d0
00010CCE 6600                       		bne.s	locret_101C6
00010CD0 5428 0025                  		addq.b	#2,$25(a0)
00010CD4                            
00010CD4                            locret_101C6:
00010CD4 4E75                       		rts	
00010CD6                            ; ===========================================================================
00010CD6                            
00010CD6                            Obj55_FlyUp:				; XREF: Obj55_Index2
00010CD6 6100 D3E6                  		bsr.w	SpeedToPos
00010CDA 0468 0018 0012             		subi.w	#$18,$12(a0)	; make basaran fly upwards
00010CE0 6100 0000                  		bsr.w	ObjHitCeiling
00010CE4 4A41                       		tst.w	d1		; has basaran hit the ceiling?
00010CE6 6A00                       		bpl.s	locret_101F4	; if not, branch
00010CE8 9368 000C                  		sub.w	d1,$C(a0)
00010CEC 0268 FFF8 0008             		andi.w	#$FFF8,8(a0)
00010CF2 4268 0010                  		clr.w	$10(a0)		; stop basaran moving
00010CF6 4268 0012                  		clr.w	$12(a0)
00010CFA 4228 001C                  		clr.b	$1C(a0)
00010CFE 4228 0025                  		clr.b	$25(a0)
00010D02                            
00010D02                            locret_101F4:
00010D02 4E75                       		rts	
00010D04                            ; ===========================================================================
00010D04                            
00010D04                            Obj55_ChkSonic:				; XREF: Obj55_ChkDrop
00010D04 323C 0100                  		move.w	#$100,d1
00010D08 08E8 0000 0022             		bset	#0,$22(a0)
00010D0E 3038 D008                  		move.w	($FFFFD008).w,d0
00010D12 9068 0008                  		sub.w	8(a0),d0
00010D16 6400                       		bcc.s	loc_10214
00010D18 4440                       		neg.w	d0
00010D1A 4441                       		neg.w	d1
00010D1C 08A8 0000 0022             		bclr	#0,$22(a0)
00010D22                            
00010D22                            loc_10214:
00010D22 B042                       		cmp.w	d2,d0
00010D24 4E75                       		rts	
00010D26                            ; ===========================================================================
00010D26 6100 D396                  		bsr.w	SpeedToPos
00010D2A 6100 D3B8                  		bsr.w	DisplaySprite
00010D2E 4A28 0001                  		tst.b	1(a0)
00010D32 6A00 D3EC                  		bpl.w	DeleteObject
00010D36 4E75                       		rts	
00010D38                            ; ===========================================================================
00010D38                            Ani_obj55:
00010D38                            	include "_anim\obj55.asm"
00010D38                            ; ---------------------------------------------------------------------------
00010D38                            ; Animation script - Basaran enemy
00010D38                            ; ---------------------------------------------------------------------------
00010D38 0000                       		dc.w byte_10230-Ani_obj55
00010D3A 0000                       		dc.w byte_10234-Ani_obj55
00010D3C 0000                       		dc.w byte_10238-Ani_obj55
00010D3E 0F00 FF00                  byte_10230:	dc.b $F, 0, $FF, 0
00010D42 0F01 FF00                  byte_10234:	dc.b $F, 1, $FF, 0
00010D46 0301 0203 02FF             byte_10238:	dc.b 3,	1, 2, 3, 2, $FF
00010D4C                            		even
00010D4C                            		even
00010D4C                            
00010D4C                            ; ---------------------------------------------------------------------------
00010D4C                            ; Sprite mappings - Basaran enemy (MZ)
00010D4C                            ; ---------------------------------------------------------------------------
00010D4C                            Map_obj55:
00010D4C                            	include "_maps\obj55.asm"
00010D4C                            ; ---------------------------------------------------------------------------
00010D4C                            ; Sprite mappings - Basaran enemy (MZ)
00010D4C                            ; ---------------------------------------------------------------------------
00010D4C 0000 0000                  		dc.w byte_10246-Map_obj55, byte_1024C-Map_obj55
00010D50 0000 0000                  		dc.w byte_1025C-Map_obj55, byte_10271-Map_obj55
00010D54 01                         byte_10246:	dc.b 1
00010D55 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
00010D5A 03                         byte_1024C:	dc.b 3
00010D5B F20E 0006 F4               		dc.b $F2, $E, 0, 6, $F4
00010D60 0A04 0012 FC               		dc.b $A, 4, 0, $12, $FC
00010D65 0200 0027 0C               		dc.b 2,	0, 0, $27, $C
00010D6A 04                         byte_1025C:	dc.b 4
00010D6B F804 0014 F8               		dc.b $F8, 4, 0,	$14, $F8
00010D70 000C 0016 F0               		dc.b 0,	$C, 0, $16, $F0
00010D75 0804 001A 00               		dc.b 8,	4, 0, $1A, 0
00010D7A 0000 0028 0C               		dc.b 0,	0, 0, $28, $C
00010D7F 04                         byte_10271:	dc.b 4
00010D80 F609 001C F5               		dc.b $F6, 9, 0,	$1C, $F5
00010D85 0608 0022 F4               		dc.b 6,	8, 0, $22, $F4
00010D8A 0E04 0025 F4               		dc.b $E, 4, 0, $25, $F4
00010D8F FE00 0027 0C               		dc.b $FE, 0, 0,	$27, $C
00010D94                            		even
00010D94                            		even
00010D94                            
00010D94                            ; ===========================================================================
00010D94                            ; ---------------------------------------------------------------------------
00010D94                            ; Object 56 - moving blocks (SYZ/SLZ), large doors (LZ)
00010D94                            ; ---------------------------------------------------------------------------
00010D94                            
00010D94                            Obj56:					; XREF: Obj_Index
00010D94 7000                       		moveq	#0,d0
00010D96 1028 0024                  		move.b	$24(a0),d0
00010D9A 323B 0000                  		move.w	Obj56_Index(pc,d0.w),d1
00010D9E 4EFB 1000                  		jmp	Obj56_Index(pc,d1.w)
00010DA2                            ; ===========================================================================
00010DA2 0000                       Obj56_Index:	dc.w Obj56_Main-Obj56_Index
00010DA4 0000                       		dc.w Obj56_Action-Obj56_Index
00010DA6                            
00010DA6 1010                       Obj56_Var:	dc.b  $10, $10		; width, height
00010DA8 2020                       		dc.b  $20, $20
00010DAA 1020                       		dc.b  $10, $20
00010DAC 201A                       		dc.b  $20, $1A
00010DAE 1027                       		dc.b  $10, $27
00010DB0 1010                       		dc.b  $10, $10
00010DB2 0820                       		dc.b	8, $20
00010DB4 4010                       		dc.b  $40, $10
00010DB6                            ; ===========================================================================
00010DB6                            
00010DB6                            Obj56_Main:				; XREF: Obj56_Index
00010DB6 5428 0024                  		addq.b	#2,$24(a0)
00010DBA 217C 0000 0000 0004        		move.l	#Map_obj56,4(a0)
00010DC2 317C 4000 0002             		move.w	#$4000,2(a0)
00010DC8 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00010DCE 6600                       		bne.s	loc_102C8
00010DD0 317C 43C4 0002             		move.w	#$43C4,2(a0)	; LZ specific code
00010DD6                            
00010DD6                            loc_102C8:
00010DD6 117C 0004 0001             		move.b	#4,1(a0)
00010DDC 117C 0003 0018             		move.b	#3,$18(a0)
00010DE2 7000                       		moveq	#0,d0
00010DE4 1028 0028                  		move.b	$28(a0),d0
00010DE8 E648                       		lsr.w	#3,d0
00010DEA 0240 000E                  		andi.w	#$E,d0
00010DEE 45FB 00B6                  		lea	Obj56_Var(pc,d0.w),a2
00010DF2 115A 0019                  		move.b	(a2)+,$19(a0)
00010DF6 1152 0016                  		move.b	(a2),$16(a0)
00010DFA E248                       		lsr.w	#1,d0
00010DFC 1140 001A                  		move.b	d0,$1A(a0)
00010E00 3168 0008 0034             		move.w	8(a0),$34(a0)
00010E06 3168 000C 0030             		move.w	$C(a0),$30(a0)
00010E0C 7000                       		moveq	#0,d0
00010E0E 1012                       		move.b	(a2),d0
00010E10 D040                       		add.w	d0,d0
00010E12 3140 003A                  		move.w	d0,$3A(a0)
00010E16 7000                       		moveq	#0,d0
00010E18 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00010E1E 6700                       		beq.s	loc_10332
00010E20 1028 0028                  		move.b	$28(a0),d0	; SYZ/SLZ specific code
00010E24 0240 000F                  		andi.w	#$F,d0
00010E28 5140                       		subq.w	#8,d0
00010E2A 6500                       		bcs.s	loc_10332
00010E2C E548                       		lsl.w	#2,d0
00010E2E 45F8 FE8A                  		lea	($FFFFFE8A).w,a2
00010E32 45F2 0000                  		lea	(a2,d0.w),a2
00010E36 4A52                       		tst.w	(a2)
00010E38 6A00                       		bpl.s	loc_10332
00010E3A 0868 0000 0022             		bchg	#0,$22(a0)
00010E40                            
00010E40                            loc_10332:
00010E40 1028 0028                  		move.b	$28(a0),d0
00010E44 6A00                       		bpl.s	Obj56_Action
00010E46 0200 000F                  		andi.b	#$F,d0
00010E4A 1140 003C                  		move.b	d0,$3C(a0)
00010E4E 117C 0005 0028             		move.b	#5,$28(a0)
00010E54 0C28 0007 001A             		cmpi.b	#7,$1A(a0)
00010E5A 6600                       		bne.s	Obj56_ChkGone
00010E5C 117C 000C 0028             		move.b	#$C,$28(a0)
00010E62 317C 0080 003A             		move.w	#$80,$3A(a0)
00010E68                            
00010E68                            Obj56_ChkGone:
00010E68 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010E6C 7000                       		moveq	#0,d0
00010E6E 1028 0023                  		move.b	$23(a0),d0
00010E72 6700                       		beq.s	Obj56_Action
00010E74 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00010E7A 0832 0000 0002             		btst	#0,2(a2,d0.w)
00010E80 6700                       		beq.s	Obj56_Action
00010E82 5228 0028                  		addq.b	#1,$28(a0)
00010E86 4268 003A                  		clr.w	$3A(a0)
00010E8A                            
00010E8A                            Obj56_Action:				; XREF: Obj56_Index
00010E8A 3F28 0008                  		move.w	8(a0),-(sp)
00010E8E 7000                       		moveq	#0,d0
00010E90 1028 0028                  		move.b	$28(a0),d0	; get object type
00010E94 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00010E98 D040                       		add.w	d0,d0
00010E9A 323B 0000                  		move.w	Obj56_TypeIndex(pc,d0.w),d1
00010E9E 4EBB 1000                  		jsr	Obj56_TypeIndex(pc,d1.w)
00010EA2 381F                       		move.w	(sp)+,d4
00010EA4 4A28 0001                  		tst.b	1(a0)
00010EA8 6A00                       		bpl.s	Obj56_ChkDel
00010EAA 7200                       		moveq	#0,d1
00010EAC 1228 0019                  		move.b	$19(a0),d1
00010EB0 0641 000B                  		addi.w	#$B,d1
00010EB4 7400                       		moveq	#0,d2
00010EB6 1428 0016                  		move.b	$16(a0),d2
00010EBA 3602                       		move.w	d2,d3
00010EBC 5243                       		addq.w	#1,d3
00010EBE 6100 F60E                  		bsr.w	SolidObject
00010EC2                            
00010EC2                            Obj56_ChkDel:
00010EC2 3028 0034                  		move.w	$34(a0),d0
00010EC6 0240 FF80                  		andi.w	#$FF80,d0
00010ECA 3238 F700                  		move.w	($FFFFF700).w,d1
00010ECE 0441 0080                  		subi.w	#$80,d1
00010ED2 0241 FF80                  		andi.w	#$FF80,d1
00010ED6 9041                       		sub.w	d1,d0
00010ED8 0C40 0280                  		cmpi.w	#$280,d0
00010EDC 6200 D242                  		bhi.w	DeleteObject
00010EE0 6000 D202                  		bra.w	DisplaySprite
00010EE4                            ; ===========================================================================
00010EE4 0000 0000                  Obj56_TypeIndex:dc.w Obj56_Type00-Obj56_TypeIndex, Obj56_Type01-Obj56_TypeIndex
00010EE8 0000 0000                  		dc.w Obj56_Type02-Obj56_TypeIndex, Obj56_Type03-Obj56_TypeIndex
00010EEC 0000 0000                  		dc.w Obj56_Type04-Obj56_TypeIndex, Obj56_Type05-Obj56_TypeIndex
00010EF0 0000 0000                  		dc.w Obj56_Type06-Obj56_TypeIndex, Obj56_Type07-Obj56_TypeIndex
00010EF4 0000 0000                  		dc.w Obj56_Type08-Obj56_TypeIndex, Obj56_Type09-Obj56_TypeIndex
00010EF8 0000 0000                  		dc.w Obj56_Type0A-Obj56_TypeIndex, Obj56_Type0B-Obj56_TypeIndex
00010EFC 0000 0000                  		dc.w Obj56_Type0C-Obj56_TypeIndex, Obj56_Type0D-Obj56_TypeIndex
00010F00                            ; ===========================================================================
00010F00                            
00010F00                            Obj56_Type00:				; XREF: Obj56_TypeIndex
00010F00 4E75                       		rts	
00010F02                            ; ===========================================================================
00010F02                            
00010F02                            Obj56_Type01:				; XREF: Obj56_TypeIndex
00010F02 323C 0040                  		move.w	#$40,d1
00010F06 7000                       		moveq	#0,d0
00010F08 1038 FE68                  		move.b	($FFFFFE68).w,d0
00010F0C 6000                       		bra.s	Obj56_Move_LR
00010F0E                            ; ===========================================================================
00010F0E                            
00010F0E                            Obj56_Type02:				; XREF: Obj56_TypeIndex
00010F0E 323C 0080                  		move.w	#$80,d1
00010F12 7000                       		moveq	#0,d0
00010F14 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
00010F18                            
00010F18                            Obj56_Move_LR:
00010F18 0828 0000 0022             		btst	#0,$22(a0)
00010F1E 6700                       		beq.s	loc_10416
00010F20 4440                       		neg.w	d0
00010F22 D041                       		add.w	d1,d0
00010F24                            
00010F24                            loc_10416:
00010F24 3228 0034                  		move.w	$34(a0),d1
00010F28 9240                       		sub.w	d0,d1
00010F2A 3141 0008                  		move.w	d1,8(a0)	; move object horizontally
00010F2E 4E75                       		rts	
00010F30                            ; ===========================================================================
00010F30                            
00010F30                            Obj56_Type03:				; XREF: Obj56_TypeIndex
00010F30 323C 0040                  		move.w	#$40,d1
00010F34 7000                       		moveq	#0,d0
00010F36 1038 FE68                  		move.b	($FFFFFE68).w,d0
00010F3A 6000                       		bra.s	Obj56_Move_UD
00010F3C                            ; ===========================================================================
00010F3C                            
00010F3C                            Obj56_Type04:				; XREF: Obj56_TypeIndex
00010F3C 323C 0080                  		move.w	#$80,d1
00010F40 7000                       		moveq	#0,d0
00010F42 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
00010F46                            
00010F46                            Obj56_Move_UD:
00010F46 0828 0000 0022             		btst	#0,$22(a0)
00010F4C 6700                       		beq.s	loc_10444
00010F4E 4440                       		neg.w	d0
00010F50 D041                       		add.w	d1,d0
00010F52                            
00010F52                            loc_10444:
00010F52 3228 0030                  		move.w	$30(a0),d1
00010F56 9240                       		sub.w	d0,d1
00010F58 3141 000C                  		move.w	d1,$C(a0)	; move object vertically
00010F5C 4E75                       		rts	
00010F5E                            ; ===========================================================================
00010F5E                            
00010F5E                            Obj56_Type05:				; XREF: Obj56_TypeIndex
00010F5E 4A28 0038                  		tst.b	$38(a0)
00010F62 6600                       		bne.s	loc_104A4
00010F64 0C78 0100 FE10             		cmpi.w	#$100,($FFFFFE10).w ; is level LZ1 ?
00010F6A 6600                       		bne.s	loc_1047A	; if not, branch
00010F6C 0C28 0003 003C             		cmpi.b	#3,$3C(a0)
00010F72 6600                       		bne.s	loc_1047A
00010F74 4238 F7C9                  		clr.b	($FFFFF7C9).w
00010F78 3038 D008                  		move.w	($FFFFD008).w,d0
00010F7C B068 0008                  		cmp.w	8(a0),d0
00010F80 6400                       		bcc.s	loc_1047A
00010F82 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w
00010F88                            
00010F88                            loc_1047A:
00010F88 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00010F8C 7000                       		moveq	#0,d0
00010F8E 1028 003C                  		move.b	$3C(a0),d0
00010F92 0832 0000 0000             		btst	#0,(a2,d0.w)
00010F98 6700                       		beq.s	loc_104AE
00010F9A 0C78 0100 FE10             		cmpi.w	#$100,($FFFFFE10).w ; is level LZ1 ?
00010FA0 6600                       		bne.s	loc_1049E	; if not, branch
00010FA2 0C00 0003                  		cmpi.b	#3,d0
00010FA6 6600                       		bne.s	loc_1049E
00010FA8 4238 F7C9                  		clr.b	($FFFFF7C9).w
00010FAC                            
00010FAC                            loc_1049E:
00010FAC 117C 0001 0038             		move.b	#1,$38(a0)
00010FB2                            
00010FB2                            loc_104A4:
00010FB2 4A68 003A                  		tst.w	$3A(a0)
00010FB6 6700                       		beq.s	loc_104C8
00010FB8 5568 003A                  		subq.w	#2,$3A(a0)
00010FBC                            
00010FBC                            loc_104AE:
00010FBC 3028 003A                  		move.w	$3A(a0),d0
00010FC0 0828 0000 0022             		btst	#0,$22(a0)
00010FC6 6700                       		beq.s	loc_104BC
00010FC8 4440                       		neg.w	d0
00010FCA                            
00010FCA                            loc_104BC:
00010FCA 3228 0030                  		move.w	$30(a0),d1
00010FCE D240                       		add.w	d0,d1
00010FD0 3141 000C                  		move.w	d1,$C(a0)
00010FD4 4E75                       		rts	
00010FD6                            ; ===========================================================================
00010FD6                            
00010FD6                            loc_104C8:
00010FD6 5228 0028                  		addq.b	#1,$28(a0)
00010FDA 4228 0038                  		clr.b	$38(a0)
00010FDE 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010FE2 7000                       		moveq	#0,d0
00010FE4 1028 0023                  		move.b	$23(a0),d0
00010FE8 67D2                       		beq.s	loc_104AE
00010FEA 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00010FF0 60CA                       		bra.s	loc_104AE
00010FF2                            ; ===========================================================================
00010FF2                            
00010FF2                            Obj56_Type06:				; XREF: Obj56_TypeIndex
00010FF2 4A28 0038                  		tst.b	$38(a0)
00010FF6 6600                       		bne.s	loc_10500
00010FF8 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00010FFC 7000                       		moveq	#0,d0
00010FFE 1028 003C                  		move.b	$3C(a0),d0
00011002 4A32 0000                  		tst.b	(a2,d0.w)
00011006 6A00                       		bpl.s	loc_10512
00011008 117C 0001 0038             		move.b	#1,$38(a0)
0001100E                            
0001100E                            loc_10500:
0001100E 7000                       		moveq	#0,d0
00011010 1028 0016                  		move.b	$16(a0),d0
00011014 D040                       		add.w	d0,d0
00011016 B068 003A                  		cmp.w	$3A(a0),d0
0001101A 6700                       		beq.s	loc_1052C
0001101C 5468 003A                  		addq.w	#2,$3A(a0)
00011020                            
00011020                            loc_10512:
00011020 3028 003A                  		move.w	$3A(a0),d0
00011024 0828 0000 0022             		btst	#0,$22(a0)
0001102A 6700                       		beq.s	loc_10520
0001102C 4440                       		neg.w	d0
0001102E                            
0001102E                            loc_10520:
0001102E 3228 0030                  		move.w	$30(a0),d1
00011032 D240                       		add.w	d0,d1
00011034 3141 000C                  		move.w	d1,$C(a0)
00011038 4E75                       		rts	
0001103A                            ; ===========================================================================
0001103A                            
0001103A                            loc_1052C:
0001103A 5328 0028                  		subq.b	#1,$28(a0)
0001103E 4228 0038                  		clr.b	$38(a0)
00011042 45F8 FC00                  		lea	($FFFFFC00).w,a2
00011046 7000                       		moveq	#0,d0
00011048 1028 0023                  		move.b	$23(a0),d0
0001104C 67D2                       		beq.s	loc_10512
0001104E 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
00011054 60CA                       		bra.s	loc_10512
00011056                            ; ===========================================================================
00011056                            
00011056                            Obj56_Type07:				; XREF: Obj56_TypeIndex
00011056 4A28 0038                  		tst.b	$38(a0)
0001105A 6600                       		bne.s	loc_1055E
0001105C 4A38 F7EF                  		tst.b	($FFFFF7EF).w	; has switch number $F been pressed?
00011060 6700                       		beq.s	locret_10578
00011062 117C 0001 0038             		move.b	#1,$38(a0)
00011068 4268 003A                  		clr.w	$3A(a0)
0001106C                            
0001106C                            loc_1055E:
0001106C 5268 0008                  		addq.w	#1,8(a0)
00011070 3168 0008 0034             		move.w	8(a0),$34(a0)
00011076 5268 003A                  		addq.w	#1,$3A(a0)
0001107A 0C68 0380 003A             		cmpi.w	#$380,$3A(a0)
00011080 6600                       		bne.s	locret_10578
00011082 4228 0028                  		clr.b	$28(a0)
00011086                            
00011086                            locret_10578:
00011086 4E75                       		rts	
00011088                            ; ===========================================================================
00011088                            
00011088                            Obj56_Type0C:				; XREF: Obj56_TypeIndex
00011088 4A28 0038                  		tst.b	$38(a0)
0001108C 6600                       		bne.s	loc_10598
0001108E 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00011092 7000                       		moveq	#0,d0
00011094 1028 003C                  		move.b	$3C(a0),d0
00011098 0832 0000 0000             		btst	#0,(a2,d0.w)
0001109E 6700                       		beq.s	loc_105A2
000110A0 117C 0001 0038             		move.b	#1,$38(a0)
000110A6                            
000110A6                            loc_10598:
000110A6 4A68 003A                  		tst.w	$3A(a0)
000110AA 6700                       		beq.s	loc_105C0
000110AC 5568 003A                  		subq.w	#2,$3A(a0)
000110B0                            
000110B0                            loc_105A2:
000110B0 3028 003A                  		move.w	$3A(a0),d0
000110B4 0828 0000 0022             		btst	#0,$22(a0)
000110BA 6700                       		beq.s	loc_105B4
000110BC 4440                       		neg.w	d0
000110BE 0640 0080                  		addi.w	#$80,d0
000110C2                            
000110C2                            loc_105B4:
000110C2 3228 0034                  		move.w	$34(a0),d1
000110C6 D240                       		add.w	d0,d1
000110C8 3141 0008                  		move.w	d1,8(a0)
000110CC 4E75                       		rts	
000110CE                            ; ===========================================================================
000110CE                            
000110CE                            loc_105C0:
000110CE 5228 0028                  		addq.b	#1,$28(a0)
000110D2 4228 0038                  		clr.b	$38(a0)
000110D6 45F8 FC00                  		lea	($FFFFFC00).w,a2
000110DA 7000                       		moveq	#0,d0
000110DC 1028 0023                  		move.b	$23(a0),d0
000110E0 67CE                       		beq.s	loc_105A2
000110E2 08F2 0000 0002             		bset	#0,2(a2,d0.w)
000110E8 60C6                       		bra.s	loc_105A2
000110EA                            ; ===========================================================================
000110EA                            
000110EA                            Obj56_Type0D:				; XREF: Obj56_TypeIndex
000110EA 4A28 0038                  		tst.b	$38(a0)
000110EE 6600                       		bne.s	loc_105F8
000110F0 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
000110F4 7000                       		moveq	#0,d0
000110F6 1028 003C                  		move.b	$3C(a0),d0
000110FA 4A32 0000                  		tst.b	(a2,d0.w)
000110FE 6A00                       		bpl.s	loc_10606
00011100 117C 0001 0038             		move.b	#1,$38(a0)
00011106                            
00011106                            loc_105F8:
00011106 303C 0080                  		move.w	#$80,d0
0001110A B068 003A                  		cmp.w	$3A(a0),d0
0001110E 6700                       		beq.s	loc_10624
00011110 5468 003A                  		addq.w	#2,$3A(a0)
00011114                            
00011114                            loc_10606:
00011114 3028 003A                  		move.w	$3A(a0),d0
00011118 0828 0000 0022             		btst	#0,$22(a0)
0001111E 6700                       		beq.s	loc_10618
00011120 4440                       		neg.w	d0
00011122 0640 0080                  		addi.w	#$80,d0
00011126                            
00011126                            loc_10618:
00011126 3228 0034                  		move.w	$34(a0),d1
0001112A D240                       		add.w	d0,d1
0001112C 3141 0008                  		move.w	d1,8(a0)
00011130 4E75                       		rts	
00011132                            ; ===========================================================================
00011132                            
00011132                            loc_10624:
00011132 5328 0028                  		subq.b	#1,$28(a0)
00011136 4228 0038                  		clr.b	$38(a0)
0001113A 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001113E 7000                       		moveq	#0,d0
00011140 1028 0023                  		move.b	$23(a0),d0
00011144 67CE                       		beq.s	loc_10606
00011146 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
0001114C 60C6                       		bra.s	loc_10606
0001114E                            ; ===========================================================================
0001114E                            
0001114E                            Obj56_Type08:				; XREF: Obj56_TypeIndex
0001114E 323C 0010                  		move.w	#$10,d1
00011152 7000                       		moveq	#0,d0
00011154 1038 FE88                  		move.b	($FFFFFE88).w,d0
00011158 E248                       		lsr.w	#1,d0
0001115A 3638 FE8A                  		move.w	($FFFFFE8A).w,d3
0001115E 6000                       		bra.s	Obj56_Move_Sqr
00011160                            ; ===========================================================================
00011160                            
00011160                            Obj56_Type09:				; XREF: Obj56_TypeIndex
00011160 323C 0030                  		move.w	#$30,d1
00011164 7000                       		moveq	#0,d0
00011166 1038 FE8C                  		move.b	($FFFFFE8C).w,d0
0001116A 3638 FE8E                  		move.w	($FFFFFE8E).w,d3
0001116E 6000                       		bra.s	Obj56_Move_Sqr
00011170                            ; ===========================================================================
00011170                            
00011170                            Obj56_Type0A:				; XREF: Obj56_TypeIndex
00011170 323C 0050                  		move.w	#$50,d1
00011174 7000                       		moveq	#0,d0
00011176 1038 FE90                  		move.b	($FFFFFE90).w,d0
0001117A 3638 FE92                  		move.w	($FFFFFE92).w,d3
0001117E 6000                       		bra.s	Obj56_Move_Sqr
00011180                            ; ===========================================================================
00011180                            
00011180                            Obj56_Type0B:				; XREF: Obj56_TypeIndex
00011180 323C 0070                  		move.w	#$70,d1
00011184 7000                       		moveq	#0,d0
00011186 1038 FE94                  		move.b	($FFFFFE94).w,d0
0001118A 3638 FE96                  		move.w	($FFFFFE96).w,d3
0001118E                            
0001118E                            Obj56_Move_Sqr:
0001118E 4A43                       		tst.w	d3
00011190 6600                       		bne.s	loc_1068E
00011192 5228 0022                  		addq.b	#1,$22(a0)
00011196 0228 0003 0022             		andi.b	#3,$22(a0)
0001119C                            
0001119C                            loc_1068E:
0001119C 1428 0022                  		move.b	$22(a0),d2
000111A0 0202 0003                  		andi.b	#3,d2
000111A4 6600                       		bne.s	loc_106AE
000111A6 9041                       		sub.w	d1,d0
000111A8 D068 0034                  		add.w	$34(a0),d0
000111AC 3140 0008                  		move.w	d0,8(a0)
000111B0 4441                       		neg.w	d1
000111B2 D268 0030                  		add.w	$30(a0),d1
000111B6 3141 000C                  		move.w	d1,$C(a0)
000111BA 4E75                       		rts	
000111BC                            ; ===========================================================================
000111BC                            
000111BC                            loc_106AE:
000111BC 5302                       		subq.b	#1,d2
000111BE 6600                       		bne.s	loc_106CC
000111C0 5341                       		subq.w	#1,d1
000111C2 9041                       		sub.w	d1,d0
000111C4 4440                       		neg.w	d0
000111C6 D068 0030                  		add.w	$30(a0),d0
000111CA 3140 000C                  		move.w	d0,$C(a0)
000111CE 5241                       		addq.w	#1,d1
000111D0 D268 0034                  		add.w	$34(a0),d1
000111D4 3141 0008                  		move.w	d1,8(a0)
000111D8 4E75                       		rts	
000111DA                            ; ===========================================================================
000111DA                            
000111DA                            loc_106CC:
000111DA 5302                       		subq.b	#1,d2
000111DC 6600                       		bne.s	loc_106EA
000111DE 5341                       		subq.w	#1,d1
000111E0 9041                       		sub.w	d1,d0
000111E2 4440                       		neg.w	d0
000111E4 D068 0034                  		add.w	$34(a0),d0
000111E8 3140 0008                  		move.w	d0,8(a0)
000111EC 5241                       		addq.w	#1,d1
000111EE D268 0030                  		add.w	$30(a0),d1
000111F2 3141 000C                  		move.w	d1,$C(a0)
000111F6 4E75                       		rts	
000111F8                            ; ===========================================================================
000111F8                            
000111F8                            loc_106EA:
000111F8 9041                       		sub.w	d1,d0
000111FA D068 0030                  		add.w	$30(a0),d0
000111FE 3140 000C                  		move.w	d0,$C(a0)
00011202 4441                       		neg.w	d1
00011204 D268 0034                  		add.w	$34(a0),d1
00011208 3141 0008                  		move.w	d1,8(a0)
0001120C 4E75                       		rts	
0001120E                            ; ===========================================================================
0001120E                            ; ---------------------------------------------------------------------------
0001120E                            ; Sprite mappings - moving blocks (SYZ/SLZ/LZ)
0001120E                            ; ---------------------------------------------------------------------------
0001120E                            Map_obj56:
0001120E                            	include "_maps\obj56.asm"
0001120E                            ; ---------------------------------------------------------------------------
0001120E                            ; Sprite mappings - moving blocks (SYZ/SLZ/LZ)
0001120E                            ; ---------------------------------------------------------------------------
0001120E 0000 0000                  		dc.w byte_10710-Map_obj56, byte_10716-Map_obj56
00011212 0000 0000                  		dc.w byte_1072B-Map_obj56, byte_10736-Map_obj56
00011216 0000 0000                  		dc.w byte_1074B-Map_obj56, byte_1075B-Map_obj56
0001121A 0000 0000                  		dc.w byte_10761-Map_obj56, byte_1076C-Map_obj56
0001121E 01                         byte_10710:	dc.b 1
0001121F F00F 0061 F0               		dc.b $F0, $F, 0, $61, $F0
00011224 04                         byte_10716:	dc.b 4
00011225 E00F 0061 E0               		dc.b $E0, $F, 0, $61, $E0
0001122A E00F 0061 00               		dc.b $E0, $F, 0, $61, 0
0001122F 000F 0061 E0               		dc.b 0,	$F, 0, $61, $E0
00011234 000F 0061 00               		dc.b 0,	$F, 0, $61, 0
00011239 02                         byte_1072B:	dc.b 2
0001123A E00F 0061 F0               		dc.b $E0, $F, 0, $61, $F0
0001123F 000F 0061 F0               		dc.b 0,	$F, 0, $61, $F0
00011244 04                         byte_10736:	dc.b 4
00011245 E60F 0081 E0               		dc.b $E6, $F, 0, $81, $E0
0001124A E60F 0081 00               		dc.b $E6, $F, 0, $81, 0
0001124F 000F 0081 E0               		dc.b 0,	$F, 0, $81, $E0
00011254 000F 0081 00               		dc.b 0,	$F, 0, $81, 0
00011259 03                         byte_1074B:	dc.b 3
0001125A D90F 0081 F0               		dc.b $D9, $F, 0, $81, $F0
0001125F F30F 0081 F0               		dc.b $F3, $F, 0, $81, $F0
00011264 0D0F 0081 F0               		dc.b $D, $F, 0,	$81, $F0
00011269 01                         byte_1075B:	dc.b 1
0001126A F00F 0021 F0               		dc.b $F0, $F, 0, $21, $F0
0001126F 02                         byte_10761:	dc.b 2
00011270 E007 0000 F8               		dc.b $E0, 7, 0,	0, $F8
00011275 0007 1000 F8               		dc.b 0,	7, $10,	0, $F8
0001127A 04                         byte_1076C:	dc.b 4
0001127B F00F 0022 C0               		dc.b $F0, $F, 0, $22, $C0
00011280 F00F 0022 E0               		dc.b $F0, $F, 0, $22, $E0
00011285 F00F 0022 00               		dc.b $F0, $F, 0, $22, 0
0001128A F00F 0022 20               		dc.b $F0, $F, 0, $22, $20
00011290 00                         		even
00011290 00                         		even
00011290                            
00011290                            ; ===========================================================================
00011290                            ; ---------------------------------------------------------------------------
00011290                            ; Object 57 - spiked balls (SYZ, LZ)
00011290                            ; ---------------------------------------------------------------------------
00011290                            
00011290                            Obj57:					; XREF: Obj_Index
00011290 7000                       		moveq	#0,d0
00011292 1028 0024                  		move.b	$24(a0),d0
00011296 323B 0000                  		move.w	Obj57_Index(pc,d0.w),d1
0001129A 4EFB 1000                  		jmp	Obj57_Index(pc,d1.w)
0001129E                            ; ===========================================================================
0001129E 0000                       Obj57_Index:	dc.w Obj57_Main-Obj57_Index
000112A0 0000                       		dc.w Obj57_Move-Obj57_Index
000112A2 0000                       		dc.w Obj57_Display-Obj57_Index
000112A4                            ; ===========================================================================
000112A4                            
000112A4                            Obj57_Main:				; XREF: Obj57_Index
000112A4 5428 0024                  		addq.b	#2,$24(a0)
000112A8 217C 0000 0000 0004        		move.l	#Map_obj57,4(a0)
000112B0 317C 03BA 0002             		move.w	#$3BA,2(a0)
000112B6 117C 0004 0001             		move.b	#4,1(a0)
000112BC 117C 0004 0018             		move.b	#4,$18(a0)
000112C2 117C 0008 0019             		move.b	#8,$19(a0)
000112C8 3168 0008 003A             		move.w	8(a0),$3A(a0)
000112CE 3168 000C 0038             		move.w	$C(a0),$38(a0)
000112D4 117C 0098 0020             		move.b	#$98,$20(a0)	; SYZ specific code (chain hurts Sonic)
000112DA 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
000112E0 6600                       		bne.s	loc_107E8
000112E2 117C 0000 0020             		move.b	#0,$20(a0)	; LZ specific code (chain doesn't hurt)
000112E8 317C 0310 0002             		move.w	#$310,2(a0)
000112EE 217C 0000 0000 0004        		move.l	#Map_obj57a,4(a0)
000112F6                            
000112F6                            loc_107E8:
000112F6 1228 0028                  		move.b	$28(a0),d1	; get object type
000112FA 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
000112FE 4881                       		ext.w	d1
00011300 E741                       		asl.w	#3,d1		; multiply by 8
00011302 3141 003E                  		move.w	d1,$3E(a0)	; set object twirl speed
00011306 1028 0022                  		move.b	$22(a0),d0
0001130A E418                       		ror.b	#2,d0
0001130C 0200 00C0                  		andi.b	#-$40,d0
00011310 1140 0026                  		move.b	d0,$26(a0)
00011314 45E8 0029                  		lea	$29(a0),a2
00011318 1228 0028                  		move.b	$28(a0),d1	; get object type
0001131C 0241 0007                  		andi.w	#7,d1		; read only the	2nd digit
00011320 14FC 0000                  		move.b	#0,(a2)+
00011324 3601                       		move.w	d1,d3
00011326 E94B                       		lsl.w	#4,d3
00011328 1143 003C                  		move.b	d3,$3C(a0)
0001132C 5341                       		subq.w	#1,d1		; set chain length (type-1)
0001132E 6500                       		bcs.s	loc_10894
00011330 0828 0003 0028             		btst	#3,$28(a0)
00011336 6700                       		beq.s	Obj57_MakeChain
00011338 5341                       		subq.w	#1,d1
0001133A 6500                       		bcs.s	loc_10894
0001133C                            
0001133C                            Obj57_MakeChain:
0001133C 6100 D23C                  		bsr.w	SingleObjLoad
00011340 6600                       		bne.s	loc_10894
00011342 5228 0029                  		addq.b	#1,$29(a0)
00011346 3A09                       		move.w	a1,d5
00011348 0445 D000                  		subi.w	#-$3000,d5
0001134C EC4D                       		lsr.w	#6,d5
0001134E 0245 007F                  		andi.w	#$7F,d5
00011352 14C5                       		move.b	d5,(a2)+
00011354 137C 0004 0024             		move.b	#4,$24(a1)
0001135A 1290                       		move.b	0(a0),0(a1)
0001135C 2368 0004 0004             		move.l	4(a0),4(a1)
00011362 3368 0002 0002             		move.w	2(a0),2(a1)
00011368 1368 0001 0001             		move.b	1(a0),1(a1)
0001136E 1368 0018 0018             		move.b	$18(a0),$18(a1)
00011374 1368 0019 0019             		move.b	$19(a0),$19(a1)
0001137A 1368 0020 0020             		move.b	$20(a0),$20(a1)
00011380 0403 0010                  		subi.b	#$10,d3
00011384 1343 003C                  		move.b	d3,$3C(a1)
00011388 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
0001138E 6600                       		bne.s	loc_10890
00011390 4A03                       		tst.b	d3
00011392 6600                       		bne.s	loc_10890
00011394 137C 0002 001A             		move.b	#2,$1A(a1)
0001139A                            
0001139A                            loc_10890:
0001139A 51C9 FFA0                  		dbf	d1,Obj57_MakeChain ; repeat for	length of chain
0001139E                            
0001139E                            loc_10894:
0001139E 3A08                       		move.w	a0,d5
000113A0 0445 D000                  		subi.w	#-$3000,d5
000113A4 EC4D                       		lsr.w	#6,d5
000113A6 0245 007F                  		andi.w	#$7F,d5
000113AA 14C5                       		move.b	d5,(a2)+
000113AC 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
000113B2 6600                       		bne.s	Obj57_Move
000113B4 117C 008B 0020             		move.b	#$8B,$20(a0)	; if yes, make last spikeball larger
000113BA 117C 0001 001A             		move.b	#1,$1A(a0)	; use different	frame
000113C0                            
000113C0                            Obj57_Move:				; XREF: Obj57_Index
000113C0 6100 0000                  		bsr.w	Obj57_MoveSub
000113C4 6000 0000                  		bra.w	Obj57_ChkDel
000113C8                            ; ===========================================================================
000113C8                            
000113C8                            Obj57_MoveSub:				; XREF: Obj57_Move
000113C8 3028 003E                  		move.w	$3E(a0),d0
000113CC D168 0026                  		add.w	d0,$26(a0)
000113D0 1028 0026                  		move.b	$26(a0),d0
000113D4 4EB9 0000 33DA             		jsr	(CalcSine).l
000113DA 3428 0038                  		move.w	$38(a0),d2
000113DE 3628 003A                  		move.w	$3A(a0),d3
000113E2 45E8 0029                  		lea	$29(a0),a2
000113E6 7C00                       		moveq	#0,d6
000113E8 1C1A                       		move.b	(a2)+,d6
000113EA                            
000113EA                            Obj57_MoveLoop:
000113EA 7800                       		moveq	#0,d4
000113EC 181A                       		move.b	(a2)+,d4
000113EE ED4C                       		lsl.w	#6,d4
000113F0 0684 00FF D000             		addi.l	#$FFD000,d4
000113F6 2244                       		movea.l	d4,a1
000113F8 7800                       		moveq	#0,d4
000113FA 1829 003C                  		move.b	$3C(a1),d4
000113FE 2A04                       		move.l	d4,d5
00011400 C9C0                       		muls.w	d0,d4
00011402 E084                       		asr.l	#8,d4
00011404 CBC1                       		muls.w	d1,d5
00011406 E085                       		asr.l	#8,d5
00011408 D842                       		add.w	d2,d4
0001140A DA43                       		add.w	d3,d5
0001140C 3344 000C                  		move.w	d4,$C(a1)
00011410 3345 0008                  		move.w	d5,8(a1)
00011414 51CE FFD4                  		dbf	d6,Obj57_MoveLoop
00011418 4E75                       		rts	
0001141A                            ; ===========================================================================
0001141A                            
0001141A                            Obj57_ChkDel:				; XREF: Obj57_Move
0001141A 3028 003A                  		move.w	$3A(a0),d0
0001141E 0240 FF80                  		andi.w	#$FF80,d0
00011422 3238 F700                  		move.w	($FFFFF700).w,d1
00011426 0441 0080                  		subi.w	#$80,d1
0001142A 0241 FF80                  		andi.w	#$FF80,d1
0001142E 9041                       		sub.w	d1,d0
00011430 0C40 0280                  		cmpi.w	#$280,d0
00011434 6200 0000                  		bhi.w	Obj57_Delete
00011438 6000 CCAA                  		bra.w	DisplaySprite
0001143C                            ; ===========================================================================
0001143C                            
0001143C                            Obj57_Delete:				; XREF: Obj57_ChkDel
0001143C 7400                       		moveq	#0,d2
0001143E 45E8 0029                  		lea	$29(a0),a2
00011442 141A                       		move.b	(a2)+,d2
00011444                            
00011444                            Obj57_DelLoop:
00011444 7000                       		moveq	#0,d0
00011446 101A                       		move.b	(a2)+,d0
00011448 ED48                       		lsl.w	#6,d0
0001144A 0680 00FF D000             		addi.l	#$FFD000,d0
00011450 2240                       		movea.l	d0,a1
00011452 6100 CCCE                  		bsr.w	DeleteObject2
00011456 51CA FFEC                  		dbf	d2,Obj57_DelLoop ; delete all pieces of	chain
0001145A                            
0001145A 4E75                       		rts	
0001145C                            ; ===========================================================================
0001145C                            
0001145C                            Obj57_Display:				; XREF: Obj57_Index
0001145C 6000 CC86                  		bra.w	DisplaySprite
00011460                            ; ===========================================================================
00011460                            ; ---------------------------------------------------------------------------
00011460                            ; Sprite mappings - chain of spiked balls (SYZ)
00011460                            ; ---------------------------------------------------------------------------
00011460                            Map_obj57:
00011460                            	include "_maps\obj57syz.asm"
00011460                            ; ---------------------------------------------------------------------------
00011460                            ; Sprite mappings - chain of spiked balls (SYZ)
00011460                            ; ---------------------------------------------------------------------------
00011460 0000                       		dc.w byte_10958-Map_obj57
00011462 01                         byte_10958:	dc.b 1
00011463 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00011468                            		even
00011468                            		even
00011468                            
00011468                            ; ---------------------------------------------------------------------------
00011468                            ; Sprite mappings - spiked ball	on a chain (LZ)
00011468                            ; ---------------------------------------------------------------------------
00011468                            Map_obj57a:
00011468                            	include "_maps\obj57lz.asm"
00011468                            ; ---------------------------------------------------------------------------
00011468                            ; Sprite mappings - spiked ball	on a chain (LZ)
00011468                            ; ---------------------------------------------------------------------------
00011468 0000                       		dc.w byte_10964-Map_obj57a
0001146A 0000                       		dc.w byte_1096A-Map_obj57a
0001146C 0000                       		dc.w byte_10970-Map_obj57a
0001146E 01                         byte_10964:	dc.b 1
0001146F F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00011474 01                         byte_1096A:	dc.b 1
00011475 F00F 0004 F0               		dc.b $F0, $F, 0, 4, $F0
0001147A 01                         byte_10970:	dc.b 1
0001147B F805 0014 F8               		dc.b $F8, 5, 0,	$14, $F8
00011480                            		even
00011480                            		even
00011480                            
00011480                            ; ===========================================================================
00011480                            ; ---------------------------------------------------------------------------
00011480                            ; Object 58 - giant spiked balls (SYZ)
00011480                            ; ---------------------------------------------------------------------------
00011480                            
00011480                            Obj58:					; XREF: Obj_Index
00011480 7000                       		moveq	#0,d0
00011482 1028 0024                  		move.b	$24(a0),d0
00011486 323B 0000                  		move.w	Obj58_Index(pc,d0.w),d1
0001148A 4EFB 1000                  		jmp	Obj58_Index(pc,d1.w)
0001148E                            ; ===========================================================================
0001148E 0000                       Obj58_Index:	dc.w Obj58_Main-Obj58_Index
00011490 0000                       		dc.w Obj58_Move-Obj58_Index
00011492                            ; ===========================================================================
00011492                            
00011492                            Obj58_Main:				; XREF: Obj58_Index
00011492 5428 0024                  		addq.b	#2,$24(a0)
00011496 217C 0000 0000 0004        		move.l	#Map_obj15b,4(a0)
0001149E 317C 0396 0002             		move.w	#$396,2(a0)
000114A4 117C 0004 0001             		move.b	#4,1(a0)
000114AA 117C 0004 0018             		move.b	#4,$18(a0)
000114B0 117C 0018 0019             		move.b	#$18,$19(a0)
000114B6 3168 0008 003A             		move.w	8(a0),$3A(a0)
000114BC 3168 000C 0038             		move.w	$C(a0),$38(a0)
000114C2 117C 0086 0020             		move.b	#$86,$20(a0)
000114C8 1228 0028                  		move.b	$28(a0),d1	; get object type
000114CC 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
000114D0 4881                       		ext.w	d1
000114D2 E741                       		asl.w	#3,d1		; multiply by 8
000114D4 3141 003E                  		move.w	d1,$3E(a0)	; set object speed
000114D8 1028 0022                  		move.b	$22(a0),d0
000114DC E418                       		ror.b	#2,d0
000114DE 0200 00C0                  		andi.b	#$C0,d0
000114E2 1140 0026                  		move.b	d0,$26(a0)
000114E6 117C 0050 003C             		move.b	#$50,$3C(a0)	; set diameter of circle of rotation
000114EC                            
000114EC                            Obj58_Move:				; XREF: Obj58_Index
000114EC 7000                       		moveq	#0,d0
000114EE 1028 0028                  		move.b	$28(a0),d0	; get object type
000114F2 0240 0007                  		andi.w	#7,d0		; read only the	2nd digit
000114F6 D040                       		add.w	d0,d0
000114F8 323B 0000                  		move.w	Obj58_TypeIndex(pc,d0.w),d1
000114FC 4EBB 1000                  		jsr	Obj58_TypeIndex(pc,d1.w)
00011500 3028 003A                  		move.w	$3A(a0),d0
00011504 0240 FF80                  		andi.w	#$FF80,d0
00011508 3238 F700                  		move.w	($FFFFF700).w,d1
0001150C 0441 0080                  		subi.w	#$80,d1
00011510 0241 FF80                  		andi.w	#$FF80,d1
00011514 9041                       		sub.w	d1,d0
00011516 0C40 0280                  		cmpi.w	#$280,d0
0001151A 6200 CC04                  		bhi.w	DeleteObject
0001151E 6000 CBC4                  		bra.w	DisplaySprite
00011522                            ; ===========================================================================
00011522 0000                       Obj58_TypeIndex:dc.w Obj58_Type00-Obj58_TypeIndex
00011524 0000                       		dc.w Obj58_Type01-Obj58_TypeIndex
00011526 0000                       		dc.w Obj58_Type02-Obj58_TypeIndex
00011528 0000                       		dc.w Obj58_Type03-Obj58_TypeIndex
0001152A                            ; ===========================================================================
0001152A                            
0001152A                            Obj58_Type00:				; XREF: Obj58_TypeIndex
0001152A 4E75                       		rts	
0001152C                            ; ===========================================================================
0001152C                            
0001152C                            Obj58_Type01:				; XREF: Obj58_TypeIndex
0001152C 323C 0060                  		move.w	#$60,d1
00011530 7000                       		moveq	#0,d0
00011532 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
00011536 0828 0000 0022             		btst	#0,$22(a0)
0001153C 6700                       		beq.s	loc_10A38
0001153E 4440                       		neg.w	d0
00011540 D041                       		add.w	d1,d0
00011542                            
00011542                            loc_10A38:
00011542 3228 003A                  		move.w	$3A(a0),d1
00011546 9240                       		sub.w	d0,d1
00011548 3141 0008                  		move.w	d1,8(a0)	; move object horizontally
0001154C 4E75                       		rts	
0001154E                            ; ===========================================================================
0001154E                            
0001154E                            Obj58_Type02:				; XREF: Obj58_TypeIndex
0001154E 323C 0060                  		move.w	#$60,d1
00011552 7000                       		moveq	#0,d0
00011554 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
00011558 0828 0000 0022             		btst	#0,$22(a0)
0001155E 6700                       		beq.s	loc_10A5C
00011560 4440                       		neg.w	d0
00011562 0640 0080                  		addi.w	#$80,d0
00011566                            
00011566                            loc_10A5C:
00011566 3228 0038                  		move.w	$38(a0),d1
0001156A 9240                       		sub.w	d0,d1
0001156C 3141 000C                  		move.w	d1,$C(a0)	; move object vertically
00011570 4E75                       		rts	
00011572                            ; ===========================================================================
00011572                            
00011572                            Obj58_Type03:				; XREF: Obj58_TypeIndex
00011572 3028 003E                  		move.w	$3E(a0),d0
00011576 D168 0026                  		add.w	d0,$26(a0)
0001157A 1028 0026                  		move.b	$26(a0),d0
0001157E 4EB9 0000 33DA             		jsr	(CalcSine).l
00011584 3428 0038                  		move.w	$38(a0),d2
00011588 3628 003A                  		move.w	$3A(a0),d3
0001158C 7800                       		moveq	#0,d4
0001158E 1828 003C                  		move.b	$3C(a0),d4
00011592 2A04                       		move.l	d4,d5
00011594 C9C0                       		muls.w	d0,d4
00011596 E084                       		asr.l	#8,d4
00011598 CBC1                       		muls.w	d1,d5
0001159A E085                       		asr.l	#8,d5
0001159C D842                       		add.w	d2,d4
0001159E DA43                       		add.w	d3,d5
000115A0 3144 000C                  		move.w	d4,$C(a0)
000115A4 3145 0008                  		move.w	d5,8(a0)
000115A8 4E75                       		rts	
000115AA                            ; ===========================================================================
000115AA                            ; ---------------------------------------------------------------------------
000115AA                            ; Sprite mappings - SBZ	spiked ball on a chain
000115AA                            ; ---------------------------------------------------------------------------
000115AA                            Map_obj15b:
000115AA                            	include "_maps\obj15sbz.asm"
000115AA                            ; ---------------------------------------------------------------------------
000115AA                            ; Sprite mappings - spiked ball on a chain (SBZ)
000115AA                            ; ---------------------------------------------------------------------------
000115AA 0000 0000                  		dc.w byte_10AA6-Map_obj15b, byte_10AC0-Map_obj15b
000115AE 0000                       		dc.w byte_10AC6-Map_obj15b
000115B0 05                         byte_10AA6:	dc.b 5
000115B1 E804 0000 F8               		dc.b $E8, 4, 0,	0, $F8
000115B6 F00F 0002 F0               		dc.b $F0, $F, 0, 2, $F0
000115BB F801 0012 E8               		dc.b $F8, 1, 0,	$12, $E8
000115C0 F801 0014 10               		dc.b $F8, 1, 0,	$14, $10
000115C5 1004 0016 F8               		dc.b $10, 4, 0,	$16, $F8
000115CA 01                         byte_10AC0:	dc.b 1
000115CB F805 0020 F8               		dc.b $F8, 5, 0,	$20, $F8
000115D0 02                         byte_10AC6:	dc.b 2
000115D1 F80D 0018 F0               		dc.b $F8, $D, 0, $18, $F0
000115D6 E80D 1018 F0               		dc.b $E8, $D, $10, $18,	$F0
000115DC 00                         		even
000115DC 00                         		even
000115DC                            
000115DC                            ; ===========================================================================
000115DC                            ; ---------------------------------------------------------------------------
000115DC                            ; Object 59 - platforms	that move when you stand on them (SLZ)
000115DC                            ; ---------------------------------------------------------------------------
000115DC                            
000115DC                            Obj59:					; XREF: Obj_Index
000115DC 7000                       		moveq	#0,d0
000115DE 1028 0024                  		move.b	$24(a0),d0
000115E2 323B 0000                  		move.w	Obj59_Index(pc,d0.w),d1
000115E6 4EBB 1000                  		jsr	Obj59_Index(pc,d1.w)
000115EA 3028 0032                  		move.w	$32(a0),d0
000115EE 0240 FF80                  		andi.w	#$FF80,d0
000115F2 3238 F700                  		move.w	($FFFFF700).w,d1
000115F6 0441 0080                  		subi.w	#$80,d1
000115FA 0241 FF80                  		andi.w	#$FF80,d1
000115FE 9041                       		sub.w	d1,d0
00011600 0C40 0280                  		cmpi.w	#$280,d0
00011604 6200 CB1A                  		bhi.w	DeleteObject
00011608 6000 CADA                  		bra.w	DisplaySprite
0001160C                            ; ===========================================================================
0001160C 0000                       Obj59_Index:	dc.w Obj59_Main-Obj59_Index
0001160E 0000                       		dc.w Obj59_Platform-Obj59_Index
00011610 0000                       		dc.w Obj59_Action-Obj59_Index
00011612 0000                       		dc.w Obj59_MakeMulti-Obj59_Index
00011614                            
00011614 2800                       Obj59_Var1:	dc.b $28, 0		; width, frame number
00011616                            
00011616 1001                       Obj59_Var2:	dc.b $10, 1		; width, action	type
00011618 2001                       		dc.b $20, 1
0001161A 3401                       		dc.b $34, 1
0001161C 1003                       		dc.b $10, 3
0001161E 2003                       		dc.b $20, 3
00011620 3403                       		dc.b $34, 3
00011622 1401                       		dc.b $14, 1
00011624 2401                       		dc.b $24, 1
00011626 2C01                       		dc.b $2C, 1
00011628 1403                       		dc.b $14, 3
0001162A 2403                       		dc.b $24, 3
0001162C 2C03                       		dc.b $2C, 3
0001162E 2005                       		dc.b $20, 5
00011630 2007                       		dc.b $20, 7
00011632 3009                       		dc.b $30, 9
00011634                            ; ===========================================================================
00011634                            
00011634                            Obj59_Main:				; XREF: Obj59_Index
00011634 5428 0024                  		addq.b	#2,$24(a0)
00011638 7000                       		moveq	#0,d0
0001163A 1028 0028                  		move.b	$28(a0),d0
0001163E 6A00                       		bpl.s	Obj59_Main2
00011640 5828 0024                  		addq.b	#4,$24(a0)
00011644 0240 007F                  		andi.w	#$7F,d0
00011648 C0FC 0006                  		mulu.w	#6,d0
0001164C 3140 003C                  		move.w	d0,$3C(a0)
00011650 3140 003E                  		move.w	d0,$3E(a0)
00011654 588F                       		addq.l	#4,sp
00011656 4E75                       		rts	
00011658                            ; ===========================================================================
00011658                            
00011658                            Obj59_Main2:
00011658 E648                       		lsr.w	#3,d0
0001165A 0240 001E                  		andi.w	#$1E,d0
0001165E 45FB 00B4                  		lea	Obj59_Var1(pc,d0.w),a2
00011662 115A 0019                  		move.b	(a2)+,$19(a0)
00011666 115A 001A                  		move.b	(a2)+,$1A(a0)
0001166A 7000                       		moveq	#0,d0
0001166C 1028 0028                  		move.b	$28(a0),d0
00011670 D040                       		add.w	d0,d0
00011672 0240 001E                  		andi.w	#$1E,d0
00011676 45FB 009E                  		lea	Obj59_Var2(pc,d0.w),a2
0001167A 101A                       		move.b	(a2)+,d0
0001167C E548                       		lsl.w	#2,d0
0001167E 3140 003C                  		move.w	d0,$3C(a0)
00011682 115A 0028                  		move.b	(a2)+,$28(a0)
00011686 217C 0000 0000 0004        		move.l	#Map_obj59,4(a0)
0001168E 317C 4000 0002             		move.w	#$4000,2(a0)
00011694 117C 0004 0001             		move.b	#4,1(a0)
0001169A 117C 0004 0018             		move.b	#4,$18(a0)
000116A0 3168 0008 0032             		move.w	8(a0),$32(a0)
000116A6 3168 000C 0030             		move.w	$C(a0),$30(a0)
000116AC                            
000116AC                            Obj59_Platform:				; XREF: Obj59_Index
000116AC 7200                       		moveq	#0,d1
000116AE 1228 0019                  		move.b	$19(a0),d1
000116B2 4EB9 0000 7ED6             		jsr	(PlatformObject).l
000116B8 6000 0000                  		bra.w	Obj59_Types
000116BC                            ; ===========================================================================
000116BC                            
000116BC                            Obj59_Action:				; XREF: Obj59_Index
000116BC 7200                       		moveq	#0,d1
000116BE 1228 0019                  		move.b	$19(a0),d1
000116C2 4EB9 0000 804A             		jsr	(ExitPlatform).l
000116C8 3F28 0008                  		move.w	8(a0),-(sp)
000116CC 6100 0000                  		bsr.w	Obj59_Types
000116D0 341F                       		move.w	(sp)+,d2
000116D2 4A10                       		tst.b	0(a0)
000116D4 6700                       		beq.s	locret_10BD4
000116D6 4EF9 0000 85B4             		jmp	(MvSonicOnPtfm2).l
000116DC                            ; ===========================================================================
000116DC                            
000116DC                            locret_10BD4:
000116DC 4E75                       		rts	
000116DE                            ; ===========================================================================
000116DE                            
000116DE                            Obj59_Types:
000116DE 7000                       		moveq	#0,d0
000116E0 1028 0028                  		move.b	$28(a0),d0
000116E4 0240 000F                  		andi.w	#$F,d0
000116E8 D040                       		add.w	d0,d0
000116EA 323B 0000                  		move.w	Obj59_TypeIndex(pc,d0.w),d1
000116EE 4EFB 1000                  		jmp	Obj59_TypeIndex(pc,d1.w)
000116F2                            ; ===========================================================================
000116F2 0000 0000                  Obj59_TypeIndex:dc.w Obj59_Type00-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
000116F6 0000 0000                  		dc.w Obj59_Type02-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
000116FA 0000 0000                  		dc.w Obj59_Type04-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
000116FE 0000 0000                  		dc.w Obj59_Type06-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
00011702 0000 0000                  		dc.w Obj59_Type08-Obj59_TypeIndex, Obj59_Type09-Obj59_TypeIndex
00011706                            ; ===========================================================================
00011706                            
00011706                            Obj59_Type00:				; XREF: Obj59_TypeIndex
00011706 4E75                       		rts	
00011708                            ; ===========================================================================
00011708                            
00011708                            Obj59_Type01:				; XREF: Obj59_TypeIndex
00011708 0C28 0004 0024             		cmpi.b	#4,$24(a0)	; check	if Sonic is standing on	the object
0001170E 6600                       		bne.s	locret_10C0C
00011710 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
00011714                            
00011714                            locret_10C0C:
00011714 4E75                       		rts	
00011716                            ; ===========================================================================
00011716                            
00011716                            Obj59_Type02:				; XREF: Obj59_TypeIndex
00011716 6100 0000                  		bsr.w	Obj59_Move
0001171A 3028 0034                  		move.w	$34(a0),d0
0001171E 4440                       		neg.w	d0
00011720 D068 0030                  		add.w	$30(a0),d0
00011724 3140 000C                  		move.w	d0,$C(a0)
00011728 4E75                       		rts	
0001172A                            ; ===========================================================================
0001172A                            
0001172A                            Obj59_Type04:				; XREF: Obj59_TypeIndex
0001172A 6100 0000                  		bsr.w	Obj59_Move
0001172E 3028 0034                  		move.w	$34(a0),d0
00011732 D068 0030                  		add.w	$30(a0),d0
00011736 3140 000C                  		move.w	d0,$C(a0)
0001173A 4E75                       		rts	
0001173C                            ; ===========================================================================
0001173C                            
0001173C                            Obj59_Type06:				; XREF: Obj59_TypeIndex
0001173C 6100 0000                  		bsr.w	Obj59_Move
00011740 3028 0034                  		move.w	$34(a0),d0
00011744 E240                       		asr.w	#1,d0
00011746 4440                       		neg.w	d0
00011748 D068 0030                  		add.w	$30(a0),d0
0001174C 3140 000C                  		move.w	d0,$C(a0)
00011750 3028 0034                  		move.w	$34(a0),d0
00011754 D068 0032                  		add.w	$32(a0),d0
00011758 3140 0008                  		move.w	d0,8(a0)
0001175C 4E75                       		rts	
0001175E                            ; ===========================================================================
0001175E                            
0001175E                            Obj59_Type08:				; XREF: Obj59_TypeIndex
0001175E 6100 0000                  		bsr.w	Obj59_Move
00011762 3028 0034                  		move.w	$34(a0),d0
00011766 E240                       		asr.w	#1,d0
00011768 D068 0030                  		add.w	$30(a0),d0
0001176C 3140 000C                  		move.w	d0,$C(a0)
00011770 3028 0034                  		move.w	$34(a0),d0
00011774 4440                       		neg.w	d0
00011776 D068 0032                  		add.w	$32(a0),d0
0001177A 3140 0008                  		move.w	d0,8(a0)
0001177E 4E75                       		rts	
00011780                            ; ===========================================================================
00011780                            
00011780                            Obj59_Type09:				; XREF: Obj59_TypeIndex
00011780 6100 0000                  		bsr.w	Obj59_Move
00011784 3028 0034                  		move.w	$34(a0),d0
00011788 4440                       		neg.w	d0
0001178A D068 0030                  		add.w	$30(a0),d0
0001178E 3140 000C                  		move.w	d0,$C(a0)
00011792 4A28 0028                  		tst.b	$28(a0)
00011796 6700 0000                  		beq.w	loc_10C94
0001179A 4E75                       		rts	
0001179C                            ; ===========================================================================
0001179C                            
0001179C                            loc_10C94:
0001179C 0828 0003 0022             		btst	#3,$22(a0)
000117A2 6700                       		beq.s	Obj59_Delete
000117A4 08E9 0001 0022             		bset	#1,$22(a1)
000117AA 08A9 0003 0022             		bclr	#3,$22(a1)
000117B0 137C 0002 0024             		move.b	#2,$24(a1)
000117B6                            
000117B6                            Obj59_Delete:
000117B6 6000 C968                  		bra.w	DeleteObject
000117BA                            
000117BA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000117BA                            
000117BA                            
000117BA                            Obj59_Move:				; XREF: Obj59_Type02; et al
000117BA 3028 0038                  		move.w	$38(a0),d0
000117BE 4A28 003A                  		tst.b	$3A(a0)
000117C2 6600                       		bne.s	loc_10CC8
000117C4 0C40 0800                  		cmpi.w	#$800,d0
000117C8 6400                       		bcc.s	loc_10CD0
000117CA 0640 0010                  		addi.w	#$10,d0
000117CE 6000                       		bra.s	loc_10CD0
000117D0                            ; ===========================================================================
000117D0                            
000117D0                            loc_10CC8:
000117D0 4A40                       		tst.w	d0
000117D2 6700                       		beq.s	loc_10CD0
000117D4 0440 0010                  		subi.w	#$10,d0
000117D8                            
000117D8                            loc_10CD0:
000117D8 3140 0038                  		move.w	d0,$38(a0)
000117DC 48C0                       		ext.l	d0
000117DE E180                       		asl.l	#8,d0
000117E0 D0A8 0034                  		add.l	$34(a0),d0
000117E4 2140 0034                  		move.l	d0,$34(a0)
000117E8 4840                       		swap	d0
000117EA 3428 003C                  		move.w	$3C(a0),d2
000117EE B042                       		cmp.w	d2,d0
000117F0 6300                       		bls.s	loc_10CF0
000117F2 117C 0001 003A             		move.b	#1,$3A(a0)
000117F8                            
000117F8                            loc_10CF0:
000117F8 D442                       		add.w	d2,d2
000117FA B042                       		cmp.w	d2,d0
000117FC 6600                       		bne.s	locret_10CFA
000117FE 4228 0028                  		clr.b	$28(a0)
00011802                            
00011802                            locret_10CFA:
00011802 4E75                       		rts	
00011804                            ; End of function Obj59_Move
00011804                            
00011804                            ; ===========================================================================
00011804                            
00011804                            Obj59_MakeMulti:			; XREF: Obj59_Index
00011804 5368 003C                  		subq.w	#1,$3C(a0)
00011808 6600                       		bne.s	Obj59_ChkDel
0001180A 3168 003E 003C             		move.w	$3E(a0),$3C(a0)
00011810 6100 CD68                  		bsr.w	SingleObjLoad
00011814 6600                       		bne.s	Obj59_ChkDel
00011816 12BC 0059                  		move.b	#$59,0(a1)	; duplicate the	object
0001181A 3368 0008 0008             		move.w	8(a0),8(a1)
00011820 3368 000C 000C             		move.w	$C(a0),$C(a1)
00011826 137C 000E 0028             		move.b	#$E,$28(a1)
0001182C                            
0001182C                            Obj59_ChkDel:
0001182C 588F                       		addq.l	#4,sp
0001182E 3028 0008                  		move.w	8(a0),d0
00011832 0240 FF80                  		andi.w	#$FF80,d0
00011836 3238 F700                  		move.w	($FFFFF700).w,d1
0001183A 0441 0080                  		subi.w	#$80,d1
0001183E 0241 FF80                  		andi.w	#$FF80,d1
00011842 9041                       		sub.w	d1,d0
00011844 0C40 0280                  		cmpi.w	#$280,d0
00011848 6200 C8D6                  		bhi.w	DeleteObject
0001184C 4E75                       		rts	
0001184E                            ; ===========================================================================
0001184E                            ; ---------------------------------------------------------------------------
0001184E                            ; Sprite mappings - platforms that move	when you stand on them (SLZ)
0001184E                            ; ---------------------------------------------------------------------------
0001184E                            Map_obj59:
0001184E                            	include "_maps\obj59.asm"
0001184E                            ; ---------------------------------------------------------------------------
0001184E                            ; Sprite mappings - platforms that move	when you stand on them (SLZ)
0001184E                            ; ---------------------------------------------------------------------------
0001184E 0000                       		dc.w byte_10D4A-Map_obj59
00011850 03                         byte_10D4A:	dc.b 3
00011851 F80F 0041 D8               		dc.b $F8, $F, 0, $41, $D8
00011856 F80F 0041 F8               		dc.b $F8, $F, 0, $41, $F8
0001185B F807 0041 18               		dc.b $F8, 7, 0,	$41, $18
00011860                            		even
00011860                            		even
00011860                            
00011860                            ; ===========================================================================
00011860                            ; ---------------------------------------------------------------------------
00011860                            ; Object 5A - platforms	moving in circles (SLZ)
00011860                            ; ---------------------------------------------------------------------------
00011860                            
00011860                            Obj5A:					; XREF: Obj_Index
00011860 7000                       		moveq	#0,d0
00011862 1028 0024                  		move.b	$24(a0),d0
00011866 323B 0000                  		move.w	Obj5A_Index(pc,d0.w),d1
0001186A 4EBB 1000                  		jsr	Obj5A_Index(pc,d1.w)
0001186E 3028 0032                  		move.w	$32(a0),d0
00011872 0240 FF80                  		andi.w	#$FF80,d0
00011876 3238 F700                  		move.w	($FFFFF700).w,d1
0001187A 0441 0080                  		subi.w	#$80,d1
0001187E 0241 FF80                  		andi.w	#$FF80,d1
00011882 9041                       		sub.w	d1,d0
00011884 0C40 0280                  		cmpi.w	#$280,d0
00011888 6200 C896                  		bhi.w	DeleteObject
0001188C 6000 C856                  		bra.w	DisplaySprite
00011890                            ; ===========================================================================
00011890 0000                       Obj5A_Index:	dc.w Obj5A_Main-Obj5A_Index
00011892 0000                       		dc.w Obj5A_Platform-Obj5A_Index
00011894 0000                       		dc.w Obj5A_Action-Obj5A_Index
00011896                            ; ===========================================================================
00011896                            
00011896                            Obj5A_Main:				; XREF: Obj5A_Index
00011896 5428 0024                  		addq.b	#2,$24(a0)
0001189A 217C 0000 0000 0004        		move.l	#Map_obj5A,4(a0)
000118A2 317C 4000 0002             		move.w	#$4000,2(a0)
000118A8 117C 0004 0001             		move.b	#4,1(a0)
000118AE 117C 0004 0018             		move.b	#4,$18(a0)
000118B4 117C 0018 0019             		move.b	#$18,$19(a0)
000118BA 3168 0008 0032             		move.w	8(a0),$32(a0)
000118C0 3168 000C 0030             		move.w	$C(a0),$30(a0)
000118C6                            
000118C6                            Obj5A_Platform:				; XREF: Obj5A_Index
000118C6 7200                       		moveq	#0,d1
000118C8 1228 0019                  		move.b	$19(a0),d1
000118CC 4EB9 0000 7ED6             		jsr	(PlatformObject).l
000118D2 6000 0000                  		bra.w	Obj5A_Types
000118D6                            ; ===========================================================================
000118D6                            
000118D6                            Obj5A_Action:				; XREF: Obj5A_Index
000118D6 7200                       		moveq	#0,d1
000118D8 1228 0019                  		move.b	$19(a0),d1
000118DC 4EB9 0000 804A             		jsr	(ExitPlatform).l
000118E2 3F28 0008                  		move.w	8(a0),-(sp)
000118E6 6100 0000                  		bsr.w	Obj5A_Types
000118EA 341F                       		move.w	(sp)+,d2
000118EC 4EF9 0000 85B4             		jmp	(MvSonicOnPtfm2).l
000118F2                            ; ===========================================================================
000118F2                            
000118F2                            Obj5A_Types:
000118F2 7000                       		moveq	#0,d0
000118F4 1028 0028                  		move.b	$28(a0),d0
000118F8 0240 000C                  		andi.w	#$C,d0
000118FC E248                       		lsr.w	#1,d0
000118FE 323B 0000                  		move.w	Obj5A_TypeIndex(pc,d0.w),d1
00011902 4EFB 1000                  		jmp	Obj5A_TypeIndex(pc,d1.w)
00011906                            ; ===========================================================================
00011906 0000                       Obj5A_TypeIndex:dc.w Obj5A_Type00-Obj5A_TypeIndex
00011908 0000                       		dc.w Obj5A_Type04-Obj5A_TypeIndex
0001190A                            ; ===========================================================================
0001190A                            
0001190A                            Obj5A_Type00:				; XREF: Obj5A_TypeIndex
0001190A 1238 FE80                  		move.b	($FFFFFE80).w,d1
0001190E 0401 0050                  		subi.b	#$50,d1
00011912 4881                       		ext.w	d1
00011914 1438 FE84                  		move.b	($FFFFFE84).w,d2
00011918 0402 0050                  		subi.b	#$50,d2
0001191C 4882                       		ext.w	d2
0001191E 0828 0000 0028             		btst	#0,$28(a0)
00011924 6700                       		beq.s	loc_10E24
00011926 4441                       		neg.w	d1
00011928 4442                       		neg.w	d2
0001192A                            
0001192A                            loc_10E24:
0001192A 0828 0001 0028             		btst	#1,$28(a0)
00011930 6700                       		beq.s	loc_10E30
00011932 4441                       		neg.w	d1
00011934 C342                       		exg	d1,d2
00011936                            
00011936                            loc_10E30:
00011936 D268 0032                  		add.w	$32(a0),d1
0001193A 3141 0008                  		move.w	d1,8(a0)
0001193E D468 0030                  		add.w	$30(a0),d2
00011942 3142 000C                  		move.w	d2,$C(a0)
00011946 4E75                       		rts	
00011948                            ; ===========================================================================
00011948                            
00011948                            Obj5A_Type04:				; XREF: Obj5A_TypeIndex
00011948 1238 FE80                  		move.b	($FFFFFE80).w,d1
0001194C 0401 0050                  		subi.b	#$50,d1
00011950 4881                       		ext.w	d1
00011952 1438 FE84                  		move.b	($FFFFFE84).w,d2
00011956 0402 0050                  		subi.b	#$50,d2
0001195A 4882                       		ext.w	d2
0001195C 0828 0000 0028             		btst	#0,$28(a0)
00011962 6700                       		beq.s	loc_10E62
00011964 4441                       		neg.w	d1
00011966 4442                       		neg.w	d2
00011968                            
00011968                            loc_10E62:
00011968 0828 0001 0028             		btst	#1,$28(a0)
0001196E 6700                       		beq.s	loc_10E6E
00011970 4441                       		neg.w	d1
00011972 C342                       		exg	d1,d2
00011974                            
00011974                            loc_10E6E:
00011974 4441                       		neg.w	d1
00011976 D268 0032                  		add.w	$32(a0),d1
0001197A 3141 0008                  		move.w	d1,8(a0)
0001197E D468 0030                  		add.w	$30(a0),d2
00011982 3142 000C                  		move.w	d2,$C(a0)
00011986 4E75                       		rts	
00011988                            ; ===========================================================================
00011988                            ; ---------------------------------------------------------------------------
00011988                            ; Sprite mappings - platforms that move	in circles (SLZ)
00011988                            ; ---------------------------------------------------------------------------
00011988                            Map_obj5A:
00011988                            	include "_maps\obj5A.asm"
00011988                            ; ---------------------------------------------------------------------------
00011988                            ; Sprite mappings - platforms that move	in circles (SLZ)
00011988                            ; ---------------------------------------------------------------------------
00011988 0000                       		dc.w byte_10E84-Map_obj5A
0001198A 02                         byte_10E84:	dc.b 2
0001198B F809 0051 E8               		dc.b $F8, 9, 0,	$51, $E8
00011990 F809 0851 00               		dc.b $F8, 9, 8,	$51, 0
00011996 00                         		even
00011996 00                         		even
00011996                            
00011996                            ; ===========================================================================
00011996                            ; ---------------------------------------------------------------------------
00011996                            ; Object 5B - blocks that form a staircase (SLZ)
00011996                            ; ---------------------------------------------------------------------------
00011996                            
00011996                            Obj5B:					; XREF: Obj_Index
00011996 7000                       		moveq	#0,d0
00011998 1028 0024                  		move.b	$24(a0),d0
0001199C 323B 0000                  		move.w	Obj5B_Index(pc,d0.w),d1
000119A0 4EBB 1000                  		jsr	Obj5B_Index(pc,d1.w)
000119A4 3028 0030                  		move.w	$30(a0),d0
000119A8 0240 FF80                  		andi.w	#$FF80,d0
000119AC 3238 F700                  		move.w	($FFFFF700).w,d1
000119B0 0441 0080                  		subi.w	#$80,d1
000119B4 0241 FF80                  		andi.w	#$FF80,d1
000119B8 9041                       		sub.w	d1,d0
000119BA 0C40 0280                  		cmpi.w	#$280,d0
000119BE 6200 C760                  		bhi.w	DeleteObject
000119C2 6000 C720                  		bra.w	DisplaySprite
000119C6                            ; ===========================================================================
000119C6 0000                       Obj5B_Index:	dc.w Obj5B_Main-Obj5B_Index
000119C8 0000                       		dc.w Obj5B_Move-Obj5B_Index
000119CA 0000                       		dc.w Obj5B_Solid-Obj5B_Index
000119CC                            ; ===========================================================================
000119CC                            
000119CC                            Obj5B_Main:				; XREF: Obj5B_Index
000119CC 5428 0024                  		addq.b	#2,$24(a0)
000119D0 7638                       		moveq	#$38,d3
000119D2 7801                       		moveq	#1,d4
000119D4 0828 0000 0022             		btst	#0,$22(a0)
000119DA 6700                       		beq.s	loc_10EDA
000119DC 763B                       		moveq	#$3B,d3
000119DE 78FF                       		moveq	#-1,d4
000119E0                            
000119E0                            loc_10EDA:
000119E0 3428 0008                  		move.w	8(a0),d2
000119E4 2248                       		movea.l	a0,a1
000119E6 7203                       		moveq	#3,d1
000119E8 6000                       		bra.s	Obj5B_MakeBlocks
000119EA                            ; ===========================================================================
000119EA                            
000119EA                            Obj5B_Loop:
000119EA 6100 CBA4                  		bsr.w	SingleObjLoad2
000119EE 6600 0000                  		bne.w	Obj5B_Move
000119F2 137C 0004 0024             		move.b	#4,$24(a1)
000119F8                            
000119F8                            Obj5B_MakeBlocks:			; XREF: Obj5B_Main
000119F8 12BC 005B                  		move.b	#$5B,0(a1)	; load another block object
000119FC 237C 0000 0000 0004        		move.l	#Map_obj5B,4(a1)
00011A04 337C 4000 0002             		move.w	#$4000,2(a1)
00011A0A 137C 0004 0001             		move.b	#4,1(a1)
00011A10 137C 0003 0018             		move.b	#3,$18(a1)
00011A16 137C 0010 0019             		move.b	#$10,$19(a1)
00011A1C 1368 0028 0028             		move.b	$28(a0),$28(a1)
00011A22 3342 0008                  		move.w	d2,8(a1)
00011A26 3368 000C 000C             		move.w	$C(a0),$C(a1)
00011A2C 3368 0008 0030             		move.w	8(a0),$30(a1)
00011A32 3369 000C 0032             		move.w	$C(a1),$32(a1)
00011A38 0642 0020                  		addi.w	#$20,d2
00011A3C 1343 0037                  		move.b	d3,$37(a1)
00011A40 2348 003C                  		move.l	a0,$3C(a1)
00011A44 D604                       		add.b	d4,d3
00011A46 51C9 FFA2                  		dbf	d1,Obj5B_Loop	; repeat sequence 3 times
00011A4A                            
00011A4A                            Obj5B_Move:				; XREF: Obj5B_Index
00011A4A 7000                       		moveq	#0,d0
00011A4C 1028 0028                  		move.b	$28(a0),d0
00011A50 0240 0007                  		andi.w	#7,d0
00011A54 D040                       		add.w	d0,d0
00011A56 323B 0000                  		move.w	Obj5B_TypeIndex(pc,d0.w),d1
00011A5A 4EBB 1000                  		jsr	Obj5B_TypeIndex(pc,d1.w)
00011A5E                            
00011A5E                            Obj5B_Solid:				; XREF: Obj5B_Index
00011A5E 2468 003C                  		movea.l	$3C(a0),a2
00011A62 7000                       		moveq	#0,d0
00011A64 1028 0037                  		move.b	$37(a0),d0
00011A68 1032 0000                  		move.b	(a2,d0.w),d0
00011A6C D068 0032                  		add.w	$32(a0),d0
00011A70 3140 000C                  		move.w	d0,$C(a0)
00011A74 7200                       		moveq	#0,d1
00011A76 1228 0019                  		move.b	$19(a0),d1
00011A7A 0641 000B                  		addi.w	#$B,d1
00011A7E 343C 0010                  		move.w	#$10,d2
00011A82 363C 0011                  		move.w	#$11,d3
00011A86 3828 0008                  		move.w	8(a0),d4
00011A8A 6100 EA42                  		bsr.w	SolidObject
00011A8E 4A04                       		tst.b	d4
00011A90 6A00                       		bpl.s	loc_10F92
00011A92 1544 0036                  		move.b	d4,$36(a2)
00011A96                            
00011A96                            loc_10F92:
00011A96 0828 0003 0022             		btst	#3,$22(a0)
00011A9C 6700                       		beq.s	locret_10FA0
00011A9E 157C 0001 0036             		move.b	#1,$36(a2)
00011AA4                            
00011AA4                            locret_10FA0:
00011AA4 4E75                       		rts	
00011AA6                            ; ===========================================================================
00011AA6 0000                       Obj5B_TypeIndex:dc.w Obj5B_Type00-Obj5B_TypeIndex
00011AA8 0000                       		dc.w Obj5B_Type01-Obj5B_TypeIndex
00011AAA 0000                       		dc.w Obj5B_Type02-Obj5B_TypeIndex
00011AAC 0000                       		dc.w Obj5B_Type01-Obj5B_TypeIndex
00011AAE                            ; ===========================================================================
00011AAE                            
00011AAE                            Obj5B_Type00:				; XREF: Obj5B_TypeIndex
00011AAE 4A68 0034                  		tst.w	$34(a0)
00011AB2 6600                       		bne.s	loc_10FC0
00011AB4 0C28 0001 0036             		cmpi.b	#1,$36(a0)
00011ABA 6600                       		bne.s	locret_10FBE
00011ABC 317C 001E 0034             		move.w	#$1E,$34(a0)
00011AC2                            
00011AC2                            locret_10FBE:
00011AC2 4E75                       		rts	
00011AC4                            ; ===========================================================================
00011AC4                            
00011AC4                            loc_10FC0:
00011AC4 5368 0034                  		subq.w	#1,$34(a0)
00011AC8 66F8                       		bne.s	locret_10FBE
00011ACA 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
00011ACE 4E75                       		rts	
00011AD0                            ; ===========================================================================
00011AD0                            
00011AD0                            Obj5B_Type02:				; XREF: Obj5B_TypeIndex
00011AD0 4A68 0034                  		tst.w	$34(a0)
00011AD4 6600                       		bne.s	loc_10FE0
00011AD6 4A28 0036                  		tst.b	$36(a0)
00011ADA 6A00                       		bpl.s	locret_10FDE
00011ADC 317C 003C 0034             		move.w	#$3C,$34(a0)
00011AE2                            
00011AE2                            locret_10FDE:
00011AE2 4E75                       		rts	
00011AE4                            ; ===========================================================================
00011AE4                            
00011AE4                            loc_10FE0:
00011AE4 5368 0034                  		subq.w	#1,$34(a0)
00011AE8 6600                       		bne.s	loc_10FEC
00011AEA 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
00011AEE 4E75                       		rts	
00011AF0                            ; ===========================================================================
00011AF0                            
00011AF0                            loc_10FEC:
00011AF0 43E8 0038                  		lea	$38(a0),a1
00011AF4 3028 0034                  		move.w	$34(a0),d0
00011AF8 E408                       		lsr.b	#2,d0
00011AFA 0200 0001                  		andi.b	#1,d0
00011AFE 12C0                       		move.b	d0,(a1)+
00011B00 0A00 0001                  		eori.b	#1,d0
00011B04 12C0                       		move.b	d0,(a1)+
00011B06 0A00 0001                  		eori.b	#1,d0
00011B0A 12C0                       		move.b	d0,(a1)+
00011B0C 0A00 0001                  		eori.b	#1,d0
00011B10 12C0                       		move.b	d0,(a1)+
00011B12 4E75                       		rts	
00011B14                            ; ===========================================================================
00011B14                            
00011B14                            Obj5B_Type01:				; XREF: Obj5B_TypeIndex
00011B14 43E8 0038                  		lea	$38(a0),a1
00011B18 0C11 0080                  		cmpi.b	#$80,(a1)
00011B1C 6700                       		beq.s	locret_11038
00011B1E 5211                       		addq.b	#1,(a1)
00011B20 7200                       		moveq	#0,d1
00011B22 1219                       		move.b	(a1)+,d1
00011B24 4841                       		swap	d1
00011B26 E289                       		lsr.l	#1,d1
00011B28 2401                       		move.l	d1,d2
00011B2A E289                       		lsr.l	#1,d1
00011B2C 2601                       		move.l	d1,d3
00011B2E D682                       		add.l	d2,d3
00011B30 4841                       		swap	d1
00011B32 4842                       		swap	d2
00011B34 4843                       		swap	d3
00011B36 12C3                       		move.b	d3,(a1)+
00011B38 12C2                       		move.b	d2,(a1)+
00011B3A 12C1                       		move.b	d1,(a1)+
00011B3C                            
00011B3C                            locret_11038:
00011B3C 4E75                       		rts	
00011B3E 4E75                       		rts	
00011B40                            ; ===========================================================================
00011B40                            ; ---------------------------------------------------------------------------
00011B40                            ; Sprite mappings - blocks that	form a staircase (SLZ)
00011B40                            ; ---------------------------------------------------------------------------
00011B40                            Map_obj5B:
00011B40                            	include "_maps\obj5B.asm"
00011B40                            ; ---------------------------------------------------------------------------
00011B40                            ; Sprite mappings - blocks that	form a staircase (SLZ)
00011B40                            ; ---------------------------------------------------------------------------
00011B40 0000                       		dc.w byte_1103E-Map_obj5B
00011B42 01                         byte_1103E:	dc.b 1
00011B43 F00F 0021 F0               		dc.b $F0, $F, 0, $21, $F0
00011B48                            		even
00011B48                            		even
00011B48                            
00011B48                            ; ===========================================================================
00011B48                            ; ---------------------------------------------------------------------------
00011B48                            ; Object 5C - metal girders in foreground (SLZ)
00011B48                            ; ---------------------------------------------------------------------------
00011B48                            
00011B48                            Obj5C:					; XREF: Obj_Index
00011B48 7000                       		moveq	#0,d0
00011B4A 1028 0024                  		move.b	$24(a0),d0
00011B4E 323B 0000                  		move.w	Obj5C_Index(pc,d0.w),d1
00011B52 4EFB 1000                  		jmp	Obj5C_Index(pc,d1.w)
00011B56                            ; ===========================================================================
00011B56 0000                       Obj5C_Index:	dc.w Obj5C_Main-Obj5C_Index
00011B58 0000                       		dc.w Obj5C_Display-Obj5C_Index
00011B5A                            ; ===========================================================================
00011B5A                            
00011B5A                            Obj5C_Main:				; XREF: Obj5C_Index
00011B5A 5428 0024                  		addq.b	#2,$24(a0)
00011B5E 217C 0000 0000 0004        		move.l	#Map_obj5C,4(a0)
00011B66 317C 83CC 0002             		move.w	#$83CC,2(a0)
00011B6C 117C 0010 0019             		move.b	#$10,$19(a0)
00011B72                            
00011B72                            Obj5C_Display:				; XREF: Obj5C_Index
00011B72 2238 F700                  		move.l	($FFFFF700).w,d1
00011B76 D281                       		add.l	d1,d1
00011B78 4841                       		swap	d1
00011B7A 4441                       		neg.w	d1
00011B7C 3141 0008                  		move.w	d1,8(a0)
00011B80 2238 F704                  		move.l	($FFFFF704).w,d1
00011B84 D281                       		add.l	d1,d1
00011B86 4841                       		swap	d1
00011B88 0241 003F                  		andi.w	#$3F,d1
00011B8C 4441                       		neg.w	d1
00011B8E 0641 0100                  		addi.w	#$100,d1
00011B92 3141 000A                  		move.w	d1,$A(a0)
00011B96 6000 C54C                  		bra.w	DisplaySprite
00011B9A                            ; ===========================================================================
00011B9A                            ; ---------------------------------------------------------------------------
00011B9A                            ; Sprite mappings - metal girders in foreground	(SLZ)
00011B9A                            ; ---------------------------------------------------------------------------
00011B9A                            Map_obj5C:
00011B9A                            	include "_maps\obj5C.asm"
00011B9A                            ; ---------------------------------------------------------------------------
00011B9A                            ; Sprite mappings - metal girders in foreground	(SLZ)
00011B9A                            ; ---------------------------------------------------------------------------
00011B9A 0000                       		dc.w byte_11098-Map_obj5C
00011B9C 09                         byte_11098:	dc.b 9
00011B9D 800F 0000 F0               		dc.b $80, $F, 0, 0, $F0
00011BA2 A00F 1000 F0               		dc.b $A0, $F, $10, 0, $F0
00011BA7 C00F 0000 F0               		dc.b $C0, $F, 0, 0, $F0
00011BAC E00F 1000 F0               		dc.b $E0, $F, $10, 0, $F0
00011BB1 000F 0000 F0               		dc.b 0,	$F, 0, 0, $F0
00011BB6 200F 1000 F0               		dc.b $20, $F, $10, 0, $F0
00011BBB 400F 0000 F0               		dc.b $40, $F, 0, 0, $F0
00011BC0 600F 1000 F0               		dc.b $60, $F, $10, 0, $F0
00011BC5 7F0F 0000 F0               		dc.b $7F, $F, 0, 0, $F0
00011BCA                            		even
00011BCA                            		even
00011BCA                            
00011BCA                            ; ===========================================================================
00011BCA                            ; ---------------------------------------------------------------------------
00011BCA                            ; Object 1B - water surface (LZ)
00011BCA                            ; ---------------------------------------------------------------------------
00011BCA                            
00011BCA                            Obj1B:					; XREF: Obj_Index
00011BCA 7000                       		moveq	#0,d0
00011BCC 1028 0024                  		move.b	$24(a0),d0
00011BD0 323B 0000                  		move.w	Obj1B_Index(pc,d0.w),d1
00011BD4 4EFB 1000                  		jmp	Obj1B_Index(pc,d1.w)
00011BD8                            ; ===========================================================================
00011BD8 0000                       Obj1B_Index:	dc.w Obj1B_Main-Obj1B_Index
00011BDA 0000                       		dc.w Obj1B_Action-Obj1B_Index
00011BDC                            ; ===========================================================================
00011BDC                            
00011BDC                            Obj1B_Main:				; XREF: Obj1B_Index
00011BDC 5428 0024                  		addq.b	#2,$24(a0)
00011BE0 217C 0000 0000 0004        		move.l	#Map_obj1B,4(a0)
00011BE8 317C C300 0002             		move.w	#$C300,2(a0)
00011BEE 117C 0004 0001             		move.b	#4,1(a0)
00011BF4 117C 0080 0019             		move.b	#$80,$19(a0)
00011BFA 3168 0008 0030             		move.w	8(a0),$30(a0)
00011C00                            
00011C00                            Obj1B_Action:				; XREF: Obj1B_Index
00011C00 3238 F700                  		move.w	($FFFFF700).w,d1
00011C04 0241 FFE0                  		andi.w	#$FFE0,d1
00011C08 D268 0030                  		add.w	$30(a0),d1
00011C0C 0838 0000 FE05             		btst	#0,($FFFFFE05).w
00011C12 6700                       		beq.s	loc_11114
00011C14 0641 0020                  		addi.w	#$20,d1
00011C18                            
00011C18                            loc_11114:
00011C18 3141 0008                  		move.w	d1,8(a0)	; match	obj x-position to screen position
00011C1C 3238 F646                  		move.w	($FFFFF646).w,d1
00011C20 3141 000C                  		move.w	d1,$C(a0)	; match	obj y-position to water	height
00011C24 4A28 0032                  		tst.b	$32(a0)
00011C28 6600                       		bne.s	Obj1B_Animate
00011C2A 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
00011C30 6700                       		beq.s	loc_1114A	; if not, branch
00011C32 5628 001A                  		addq.b	#3,$1A(a0)	; use different	frames
00011C36 117C 0001 0032             		move.b	#1,$32(a0)	; stop animation
00011C3C 6000                       		bra.s	Obj1B_Display
00011C3E                            ; ===========================================================================
00011C3E                            
00011C3E                            Obj1B_Animate:				; XREF: loc_11114
00011C3E 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
00011C42 6600                       		bne.s	Obj1B_Display	; if yes, branch
00011C44 117C 0000 0032             		move.b	#0,$32(a0)	; resume animation
00011C4A 5728 001A                  		subq.b	#3,$1A(a0)	; use normal frames
00011C4E                            
00011C4E                            loc_1114A:				; XREF: loc_11114
00011C4E 5328 001E                  		subq.b	#1,$1E(a0)
00011C52 6A00                       		bpl.s	Obj1B_Display
00011C54 117C 0007 001E             		move.b	#7,$1E(a0)
00011C5A 5228 001A                  		addq.b	#1,$1A(a0)
00011C5E 0C28 0003 001A             		cmpi.b	#3,$1A(a0)
00011C64 6500                       		bcs.s	Obj1B_Display
00011C66 117C 0000 001A             		move.b	#0,$1A(a0)
00011C6C                            
00011C6C                            Obj1B_Display:
00011C6C 6000 C476                  		bra.w	DisplaySprite
00011C70                            ; ===========================================================================
00011C70                            ; ---------------------------------------------------------------------------
00011C70                            ; Sprite mappings - water surface (LZ)
00011C70                            ; ---------------------------------------------------------------------------
00011C70                            Map_obj1B:
00011C70                            	include "_maps\obj1B.asm"
00011C70                            ; ---------------------------------------------------------------------------
00011C70                            ; Sprite mappings - water surface (LZ)
00011C70                            ; ---------------------------------------------------------------------------
00011C70 0000 0000                  		dc.w byte_11178-Map_obj1B, byte_11188-Map_obj1B
00011C74 0000 0000                  		dc.w byte_11198-Map_obj1B, byte_111A8-Map_obj1B
00011C78 0000 0000                  		dc.w byte_111C7-Map_obj1B, byte_111E6-Map_obj1B
00011C7C 03                         byte_11178:	dc.b 3
00011C7D FD0D 0000 A0               		dc.b $FD, $D, 0, 0, $A0
00011C82 FD0D 0000 E0               		dc.b $FD, $D, 0, 0, $E0
00011C87 FD0D 0000 20               		dc.b $FD, $D, 0, 0, $20
00011C8C 03                         byte_11188:	dc.b 3
00011C8D FD0D 0008 A0               		dc.b $FD, $D, 0, 8, $A0
00011C92 FD0D 0008 E0               		dc.b $FD, $D, 0, 8, $E0
00011C97 FD0D 0008 20               		dc.b $FD, $D, 0, 8, $20
00011C9C 03                         byte_11198:	dc.b 3
00011C9D FD0D 0800 A0               		dc.b $FD, $D, 8, 0, $A0
00011CA2 FD0D 0800 E0               		dc.b $FD, $D, 8, 0, $E0
00011CA7 FD0D 0800 20               		dc.b $FD, $D, 8, 0, $20
00011CAC 06                         byte_111A8:	dc.b 6
00011CAD FD0D 0000 A0               		dc.b $FD, $D, 0, 0, $A0
00011CB2 FD0D 0000 C0               		dc.b $FD, $D, 0, 0, $C0
00011CB7 FD0D 0000 E0               		dc.b $FD, $D, 0, 0, $E0
00011CBC FD0D 0000 00               		dc.b $FD, $D, 0, 0, 0
00011CC1 FD0D 0000 20               		dc.b $FD, $D, 0, 0, $20
00011CC6 FD0D 0000 40               		dc.b $FD, $D, 0, 0, $40
00011CCB 06                         byte_111C7:	dc.b 6
00011CCC FD0D 0008 A0               		dc.b $FD, $D, 0, 8, $A0
00011CD1 FD0D 0008 C0               		dc.b $FD, $D, 0, 8, $C0
00011CD6 FD0D 0008 E0               		dc.b $FD, $D, 0, 8, $E0
00011CDB FD0D 0008 00               		dc.b $FD, $D, 0, 8, 0
00011CE0 FD0D 0008 20               		dc.b $FD, $D, 0, 8, $20
00011CE5 FD0D 0008 40               		dc.b $FD, $D, 0, 8, $40
00011CEA 06                         byte_111E6:	dc.b 6
00011CEB FD0D 0800 A0               		dc.b $FD, $D, 8, 0, $A0
00011CF0 FD0D 0800 C0               		dc.b $FD, $D, 8, 0, $C0
00011CF5 FD0D 0800 E0               		dc.b $FD, $D, 8, 0, $E0
00011CFA FD0D 0800 00               		dc.b $FD, $D, 8, 0, 0
00011CFF FD0D 0800 20               		dc.b $FD, $D, 8, 0, $20
00011D04 FD0D 0800 40               		dc.b $FD, $D, 8, 0, $40
00011D0A 00                         		even
00011D0A 00                         		even
00011D0A                            
00011D0A                            ; ===========================================================================
00011D0A                            ; ---------------------------------------------------------------------------
00011D0A                            ; Object 0B - pole that	breaks (LZ)
00011D0A                            ; ---------------------------------------------------------------------------
00011D0A                            
00011D0A                            Obj0B:					; XREF: Obj_Index
00011D0A 7000                       		moveq	#0,d0
00011D0C 1028 0024                  		move.b	$24(a0),d0
00011D10 323B 0000                  		move.w	Obj0B_Index(pc,d0.w),d1
00011D14 4EFB 1000                  		jmp	Obj0B_Index(pc,d1.w)
00011D18                            ; ===========================================================================
00011D18 0000                       Obj0B_Index:	dc.w Obj0B_Main-Obj0B_Index
00011D1A 0000                       		dc.w Obj0B_Action-Obj0B_Index
00011D1C 0000                       		dc.w Obj0B_Display-Obj0B_Index
00011D1E                            ; ===========================================================================
00011D1E                            
00011D1E                            Obj0B_Main:				; XREF: Obj0B_Index
00011D1E 5428 0024                  		addq.b	#2,$24(a0)
00011D22 217C 0000 0000 0004        		move.l	#Map_obj0B,4(a0)
00011D2A 317C 43DE 0002             		move.w	#$43DE,2(a0)
00011D30 117C 0004 0001             		move.b	#4,1(a0)
00011D36 117C 0008 0019             		move.b	#8,$19(a0)
00011D3C 117C 0004 0018             		move.b	#4,$18(a0)
00011D42 117C 00E1 0020             		move.b	#$E1,$20(a0)
00011D48 7000                       		moveq	#0,d0
00011D4A 1028 0028                  		move.b	$28(a0),d0	; get object type
00011D4E C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 (1 second)
00011D52 3140 0030                  		move.w	d0,$30(a0)	; set breakage time
00011D56                            
00011D56                            Obj0B_Action:				; XREF: Obj0B_Index
00011D56 4A28 0032                  		tst.b	$32(a0)
00011D5A 6700                       		beq.s	Obj0B_Grab
00011D5C 4A68 0030                  		tst.w	$30(a0)
00011D60 6700                       		beq.s	Obj0B_MoveUp
00011D62 5368 0030                  		subq.w	#1,$30(a0)
00011D66 6600                       		bne.s	Obj0B_MoveUp
00011D68 117C 0001 001A             		move.b	#1,$1A(a0)	; break	the pole
00011D6E 6000                       		bra.s	Obj0B_Release
00011D70                            ; ===========================================================================
00011D70                            
00011D70                            Obj0B_MoveUp:				; XREF: Obj0B_Action
00011D70 43F8 D000                  		lea	($FFFFD000).w,a1
00011D74 3028 000C                  		move.w	$C(a0),d0
00011D78 0440 0018                  		subi.w	#$18,d0
00011D7C 0838 0000 F604             		btst	#0,($FFFFF604).w ; check if "up" is pressed
00011D82 6700                       		beq.s	Obj0B_MoveDown
00011D84 5369 000C                  		subq.w	#1,$C(a1)	; move Sonic up
00011D88 B069 000C                  		cmp.w	$C(a1),d0
00011D8C 6500                       		bcs.s	Obj0B_MoveDown
00011D8E 3340 000C                  		move.w	d0,$C(a1)
00011D92                            
00011D92                            Obj0B_MoveDown:
00011D92 0640 0024                  		addi.w	#$24,d0
00011D96 0838 0001 F604             		btst	#1,($FFFFF604).w ; check if "down" is pressed
00011D9C 6700                       		beq.s	Obj0B_LetGo
00011D9E 5269 000C                  		addq.w	#1,$C(a1)	; move Sonic down
00011DA2 B069 000C                  		cmp.w	$C(a1),d0
00011DA6 6400                       		bcc.s	Obj0B_LetGo
00011DA8 3340 000C                  		move.w	d0,$C(a1)
00011DAC                            
00011DAC                            Obj0B_LetGo:
00011DAC 1038 F603                  		move.b	($FFFFF603).w,d0
00011DB0 0240 0070                  		andi.w	#$70,d0
00011DB4 6700                       		beq.s	Obj0B_Display
00011DB6                            
00011DB6                            Obj0B_Release:				; XREF: Obj0B_Action
00011DB6 4228 0020                  		clr.b	$20(a0)
00011DBA 5428 0024                  		addq.b	#2,$24(a0)
00011DBE 4238 F7C8                  		clr.b	($FFFFF7C8).w
00011DC2 4238 F7C9                  		clr.b	($FFFFF7C9).w
00011DC6 4228 0032                  		clr.b	$32(a0)
00011DCA 6000                       		bra.s	Obj0B_Display
00011DCC                            ; ===========================================================================
00011DCC                            
00011DCC                            Obj0B_Grab:				; XREF: Obj0B_Action
00011DCC 4A28 0021                  		tst.b	$21(a0)		; has Sonic touched the	pole?
00011DD0 6700                       		beq.s	Obj0B_Display	; if not, branch
00011DD2 43F8 D000                  		lea	($FFFFD000).w,a1
00011DD6 3028 0008                  		move.w	8(a0),d0
00011DDA 0640 0014                  		addi.w	#$14,d0
00011DDE B069 0008                  		cmp.w	8(a1),d0
00011DE2 6400                       		bcc.s	Obj0B_Display
00011DE4 4228 0021                  		clr.b	$21(a0)
00011DE8 0C29 0004 0024             		cmpi.b	#4,$24(a1)
00011DEE 6400                       		bcc.s	Obj0B_Display
00011DF0 4269 0010                  		clr.w	$10(a1)		; stop Sonic moving
00011DF4 4269 0012                  		clr.w	$12(a1)		; stop Sonic moving
00011DF8 3028 0008                  		move.w	8(a0),d0
00011DFC 0640 0014                  		addi.w	#$14,d0
00011E00 3340 0008                  		move.w	d0,8(a1)
00011E04 08A9 0000 0022             		bclr	#0,$22(a1)
00011E0A 137C 0011 001C             		move.b	#$11,$1C(a1)	; set Sonic's animation to "hanging" ($11)
00011E10 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; lock	controls
00011E16 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w ; disable wind	tunnel
00011E1C 117C 0001 0032             		move.b	#1,$32(a0)	; begin	countdown to breakage
00011E22                            
00011E22                            Obj0B_Display:				; XREF: Obj0B_Index
00011E22 6000 E382                  		bra.w	MarkObjGone
00011E26                            ; ===========================================================================
00011E26                            ; ---------------------------------------------------------------------------
00011E26                            ; Sprite mappings - pole that breaks (LZ)
00011E26                            ; ---------------------------------------------------------------------------
00011E26                            Map_obj0B:
00011E26                            	include "_maps\obj0B.asm"
00011E26                            ; ---------------------------------------------------------------------------
00011E26                            ; Sprite mappings - pole that breaks (LZ)
00011E26                            ; ---------------------------------------------------------------------------
00011E26 0000                       		dc.w byte_11326-Map_obj0B
00011E28 0000                       		dc.w byte_11331-Map_obj0B
00011E2A 02                         byte_11326:	dc.b 2			; normal pole
00011E2B E003 0000 FC               		dc.b $E0, 3, 0,	0, $FC
00011E30 0003 1000 FC               		dc.b 0,	3, $10,	0, $FC
00011E35 04                         byte_11331:	dc.b 4			; broken pole
00011E36 E001 0000 FC               		dc.b $E0, 1, 0,	0, $FC
00011E3B F005 0004 FC               		dc.b $F0, 5, 0,	4, $FC
00011E40 0005 1004 FC               		dc.b 0,	5, $10,	4, $FC
00011E45 1001 1000 FC               		dc.b $10, 1, $10, 0, $FC
00011E4A                            		even
00011E4A                            		even
00011E4A                            
00011E4A                            ; ===========================================================================
00011E4A                            ; ---------------------------------------------------------------------------
00011E4A                            ; Object 0C - flapping door (LZ)
00011E4A                            ; ---------------------------------------------------------------------------
00011E4A                            
00011E4A                            Obj0C:					; XREF: Obj_Index
00011E4A 7000                       		moveq	#0,d0
00011E4C 1028 0024                  		move.b	$24(a0),d0
00011E50 323B 0000                  		move.w	Obj0C_Index(pc,d0.w),d1
00011E54 4EFB 1000                  		jmp	Obj0C_Index(pc,d1.w)
00011E58                            ; ===========================================================================
00011E58 0000                       Obj0C_Index:	dc.w Obj0C_Main-Obj0C_Index
00011E5A 0000                       		dc.w Obj0C_OpenClose-Obj0C_Index
00011E5C                            ; ===========================================================================
00011E5C                            
00011E5C                            Obj0C_Main:				; XREF: Obj0C_Index
00011E5C 5428 0024                  		addq.b	#2,$24(a0)
00011E60 217C 0000 0000 0004        		move.l	#Map_obj0C,4(a0)
00011E68 317C 4328 0002             		move.w	#$4328,2(a0)
00011E6E 0028 0004 0001             		ori.b	#4,1(a0)
00011E74 117C 0028 0019             		move.b	#$28,$19(a0)
00011E7A 7000                       		moveq	#0,d0
00011E7C 1028 0028                  		move.b	$28(a0),d0	; get object type
00011E80 C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 (1 second)
00011E84 3140 0032                  		move.w	d0,$32(a0)	; set flap delay time
00011E88                            
00011E88                            Obj0C_OpenClose:			; XREF: Obj0C_Index
00011E88 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00011E8C 6A00                       		bpl.s	Obj0C_Solid	; if time remains, branch
00011E8E 3168 0032 0030             		move.w	$32(a0),$30(a0)	; reset	time delay
00011E94 0868 0000 001C             		bchg	#0,$1C(a0)	; open/close door
00011E9A 4A28 0001                  		tst.b	1(a0)
00011E9E 6A00                       		bpl.s	Obj0C_Solid
00011EA0 303C 00BB                  		move.w	#$BB,d0
00011EA4 4EB9 0000 147C             		jsr	(PlaySound_Special).l ;	play door sound
00011EAA                            
00011EAA                            Obj0C_Solid:
00011EAA 43F9 0000 0000             		lea	(Ani_obj0C).l,a1
00011EB0 6100 9344                  		bsr.w	AnimateSprite
00011EB4 4238 F7C9                  		clr.b	($FFFFF7C9).w	; enable wind tunnel
00011EB8 4A28 001A                  		tst.b	$1A(a0)		; is the door open?
00011EBC 6600                       		bne.s	Obj0C_Display	; if yes, branch
00011EBE 3038 D008                  		move.w	($FFFFD008).w,d0
00011EC2 B068 0008                  		cmp.w	8(a0),d0	; is Sonic in front of the door?
00011EC6 6400                       		bcc.s	Obj0C_Display	; if yes, branch
00011EC8 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w ; disable wind	tunnel
00011ECE 323C 0013                  		move.w	#$13,d1
00011ED2 343C 0020                  		move.w	#$20,d2
00011ED6 3602                       		move.w	d2,d3
00011ED8 5243                       		addq.w	#1,d3
00011EDA 3828 0008                  		move.w	8(a0),d4
00011EDE 6100 E5EE                  		bsr.w	SolidObject	; make the door	solid
00011EE2                            
00011EE2                            Obj0C_Display:
00011EE2 6000 E2C2                  		bra.w	MarkObjGone
00011EE6                            ; ===========================================================================
00011EE6                            Ani_obj0C:
00011EE6                            	include "_anim\obj0C.asm"
00011EE6                            ; ---------------------------------------------------------------------------
00011EE6                            ; Animation script - flapping door (LZ)
00011EE6                            ; ---------------------------------------------------------------------------
00011EE6 0000                       		dc.w byte_113E6-Ani_obj0C
00011EE8 0000                       		dc.w byte_113EC-Ani_obj0C
00011EEA 0300 0102 FE01             byte_113E6:	dc.b 3,	0, 1, 2, $FE, 1
00011EF0 0302 0100 FE01             byte_113EC:	dc.b 3,	2, 1, 0, $FE, 1
00011EF6                            		even
00011EF6                            		even
00011EF6                            
00011EF6                            ; ---------------------------------------------------------------------------
00011EF6                            ; Sprite mappings - flapping door (LZ)
00011EF6                            ; ---------------------------------------------------------------------------
00011EF6                            Map_obj0C:
00011EF6                            	include "_maps\obj0C.asm"
00011EF6                            ; ---------------------------------------------------------------------------
00011EF6                            ; Sprite mappings - flapping door (LZ)
00011EF6                            ; ---------------------------------------------------------------------------
00011EF6 0000                       		dc.w byte_113F8-Map_obj0C
00011EF8 0000                       		dc.w byte_11403-Map_obj0C
00011EFA 0000                       		dc.w byte_1140E-Map_obj0C
00011EFC 02                         byte_113F8:	dc.b 2
00011EFD E007 0000 F8               		dc.b $E0, 7, 0,	0, $F8
00011F02 0007 1000 F8               		dc.b 0,	7, $10,	0, $F8
00011F07 02                         byte_11403:	dc.b 2
00011F08 DA0F 0008 FB               		dc.b $DA, $F, 0, 8, $FB
00011F0D 060F 1008 FB               		dc.b 6,	$F, $10, 8, $FB
00011F12 02                         byte_1140E:	dc.b 2
00011F13 D80D 0018 00               		dc.b $D8, $D, 0, $18, 0
00011F18 180D 1018 00               		dc.b $18, $D, $10, $18,	0
00011F1E 00                         		even
00011F1E 00                         		even
00011F1E                            
00011F1E                            ; ===========================================================================
00011F1E                            ; ---------------------------------------------------------------------------
00011F1E                            ; Object 71 - invisible	solid blocks
00011F1E                            ; ---------------------------------------------------------------------------
00011F1E                            
00011F1E                            Obj71:					; XREF: Obj_Index
00011F1E 7000                       		moveq	#0,d0
00011F20 1028 0024                  		move.b	$24(a0),d0
00011F24 323B 0000                  		move.w	Obj71_Index(pc,d0.w),d1
00011F28 4EFB 1000                  		jmp	Obj71_Index(pc,d1.w)
00011F2C                            ; ===========================================================================
00011F2C 0000                       Obj71_Index:	dc.w Obj71_Main-Obj71_Index
00011F2E 0000                       		dc.w Obj71_Solid-Obj71_Index
00011F30                            ; ===========================================================================
00011F30                            
00011F30                            Obj71_Main:				; XREF: Obj71_Index
00011F30 5428 0024                  		addq.b	#2,$24(a0)
00011F34 217C 0000 0000 0004        		move.l	#Map_obj71,4(a0)
00011F3C 317C 8680 0002             		move.w	#$8680,2(a0)
00011F42 0028 0004 0001             		ori.b	#4,1(a0)
00011F48 1028 0028                  		move.b	$28(a0),d0	; get object type
00011F4C 1200                       		move.b	d0,d1
00011F4E 0240 00F0                  		andi.w	#$F0,d0		; read only the	1st byte
00011F52 0640 0010                  		addi.w	#$10,d0
00011F56 E248                       		lsr.w	#1,d0
00011F58 1140 0019                  		move.b	d0,$19(a0)	; set object width
00011F5C 0241 000F                  		andi.w	#$F,d1		; read only the	2nd byte
00011F60 5241                       		addq.w	#1,d1
00011F62 E749                       		lsl.w	#3,d1
00011F64 1141 0016                  		move.b	d1,$16(a0)	; set object height
00011F68                            
00011F68                            Obj71_Solid:				; XREF: Obj71_Index
00011F68 6100 C3F6                  		bsr.w	ChkObjOnScreen
00011F6C 6600                       		bne.s	Obj71_ChkDel
00011F6E 7200                       		moveq	#0,d1
00011F70 1228 0019                  		move.b	$19(a0),d1
00011F74 0641 000B                  		addi.w	#$B,d1
00011F78 7400                       		moveq	#0,d2
00011F7A 1428 0016                  		move.b	$16(a0),d2
00011F7E 3602                       		move.w	d2,d3
00011F80 5243                       		addq.w	#1,d3
00011F82 3828 0008                  		move.w	8(a0),d4
00011F86 6100 E58C                  		bsr.w	SolidObject71
00011F8A                            
00011F8A                            Obj71_ChkDel:
00011F8A 3028 0008                  		move.w	8(a0),d0
00011F8E 0240 FF80                  		andi.w	#$FF80,d0
00011F92 3238 F700                  		move.w	($FFFFF700).w,d1
00011F96 0441 0080                  		subi.w	#$80,d1
00011F9A 0241 FF80                  		andi.w	#$FF80,d1
00011F9E 9041                       		sub.w	d1,d0
00011FA0 0C40 0280                  		cmpi.w	#$280,d0
00011FA4 6200                       		bhi.s	Obj71_Delete
00011FA6 4A78 FE08                  		tst.w	($FFFFFE08).w	; are you using	debug mode?
00011FAA 6700                       		beq.s	Obj71_NoDisplay	; if not, branch
00011FAC 4EFA C136                  		jmp	DisplaySprite	; if yes, display the object
00011FB0                            ; ===========================================================================
00011FB0                            
00011FB0                            Obj71_NoDisplay:
00011FB0 4E75                       		rts	
00011FB2                            ; ===========================================================================
00011FB2                            
00011FB2                            Obj71_Delete:
00011FB2 4EFA C16C                  		jmp	DeleteObject
00011FB6                            ; ===========================================================================
00011FB6                            ; ---------------------------------------------------------------------------
00011FB6                            ; Sprite mappings - invisible solid blocks
00011FB6                            ; ---------------------------------------------------------------------------
00011FB6                            Map_obj71:
00011FB6                            	include "_maps\obj71.asm"
00011FB6                            ; ---------------------------------------------------------------------------
00011FB6                            ; Sprite mappings - invisible solid blocks
00011FB6                            ; ---------------------------------------------------------------------------
00011FB6 0000                       		dc.w byte_114BC-Map_obj71
00011FB8 0000                       		dc.w byte_114D1-Map_obj71
00011FBA 0000                       		dc.w byte_114E6-Map_obj71
00011FBC 04                         byte_114BC:	dc.b 4
00011FBD F005 0018 F0               		dc.b $F0, 5, 0,	$18, $F0
00011FC2 F005 0018 00               		dc.b $F0, 5, 0,	$18, 0
00011FC7 0005 0018 F0               		dc.b 0,	5, 0, $18, $F0
00011FCC 0005 0018 00               		dc.b 0,	5, 0, $18, 0
00011FD1 04                         byte_114D1:	dc.b 4
00011FD2 E005 0018 C0               		dc.b $E0, 5, 0,	$18, $C0
00011FD7 E005 0018 30               		dc.b $E0, 5, 0,	$18, $30
00011FDC 1005 0018 C0               		dc.b $10, 5, 0,	$18, $C0
00011FE1 1005 0018 30               		dc.b $10, 5, 0,	$18, $30
00011FE6 04                         byte_114E6:	dc.b 4
00011FE7 E005 0018 80               		dc.b $E0, 5, 0,	$18, $80
00011FEC E005 0018 70               		dc.b $E0, 5, 0,	$18, $70
00011FF1 1005 0018 80               		dc.b $10, 5, 0,	$18, $80
00011FF6 1005 0018 70               		dc.b $10, 5, 0,	$18, $70
00011FFC 00                         		even
00011FFC 00                         		even
00011FFC                            
00011FFC                            ; ===========================================================================
00011FFC                            ; ---------------------------------------------------------------------------
00011FFC                            ; Object 5D - fans (SLZ)
00011FFC                            ; ---------------------------------------------------------------------------
00011FFC                            
00011FFC                            Obj5D:					; XREF: Obj_Index
00011FFC 7000                       		moveq	#0,d0
00011FFE 1028 0024                  		move.b	$24(a0),d0
00012002 323B 0000                  		move.w	Obj5D_Index(pc,d0.w),d1
00012006 4EFB 1000                  		jmp	Obj5D_Index(pc,d1.w)
0001200A                            ; ===========================================================================
0001200A 0000                       Obj5D_Index:	dc.w Obj5D_Main-Obj5D_Index
0001200C 0000                       		dc.w Obj5D_Delay-Obj5D_Index
0001200E                            ; ===========================================================================
0001200E                            
0001200E                            Obj5D_Main:				; XREF: Obj5D_Index
0001200E 5428 0024                  		addq.b	#2,$24(a0)
00012012 217C 0000 0000 0004        		move.l	#Map_obj5D,4(a0)
0001201A 317C 43A0 0002             		move.w	#$43A0,2(a0)
00012020 0028 0004 0001             		ori.b	#4,1(a0)
00012026 117C 0010 0019             		move.b	#$10,$19(a0)
0001202C 117C 0004 0018             		move.b	#4,$18(a0)
00012032                            
00012032                            Obj5D_Delay:				; XREF: Obj5D_Index
00012032 0828 0001 0028             		btst	#1,$28(a0)	; is object type 02/03?
00012038 6600                       		bne.s	Obj5D_Blow	; if yes, branch
0001203A 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
0001203E 6A00                       		bpl.s	Obj5D_Blow	; if time remains, branch
00012040 317C 0078 0030             		move.w	#120,$30(a0)	; set delay to 2 seconds
00012046 0868 0000 0032             		bchg	#0,$32(a0)	; switch fan on/off
0001204C 6700                       		beq.s	Obj5D_Blow	; if fan is off, branch
0001204E 317C 00B4 0030             		move.w	#180,$30(a0)	; set delay to 3 seconds
00012054                            
00012054                            Obj5D_Blow:
00012054 4A28 0032                  		tst.b	$32(a0)		; is fan switched on?
00012058 6600 0000                  		bne.w	Obj5D_ChkDel	; if not, branch
0001205C 43F8 D000                  		lea	($FFFFD000).w,a1
00012060 3029 0008                  		move.w	8(a1),d0
00012064 9068 0008                  		sub.w	8(a0),d0
00012068 0828 0000 0022             		btst	#0,$22(a0)
0001206E 6600                       		bne.s	Obj5D_ChkSonic
00012070 4440                       		neg.w	d0
00012072                            
00012072                            Obj5D_ChkSonic:
00012072 0640 0050                  		addi.w	#$50,d0
00012076 0C40 00F0                  		cmpi.w	#$F0,d0		; is Sonic more	than $A0 pixels	from the fan?
0001207A 6400                       		bcc.s	Obj5D_Animate	; if yes, branch
0001207C 3229 000C                  		move.w	$C(a1),d1
00012080 0641 0060                  		addi.w	#$60,d1
00012084 9268 000C                  		sub.w	$C(a0),d1
00012088 6500                       		bcs.s	Obj5D_Animate
0001208A 0C41 0070                  		cmpi.w	#$70,d1
0001208E 6400                       		bcc.s	Obj5D_Animate
00012090 0440 0050                  		subi.w	#$50,d0
00012094 6400                       		bcc.s	loc_1159A
00012096 4640                       		not.w	d0
00012098 D040                       		add.w	d0,d0
0001209A                            
0001209A                            loc_1159A:
0001209A 0640 0060                  		addi.w	#$60,d0
0001209E 0828 0000 0022             		btst	#0,$22(a0)
000120A4 6600                       		bne.s	loc_115A8
000120A6 4440                       		neg.w	d0
000120A8                            
000120A8                            loc_115A8:
000120A8 4400                       		neg.b	d0
000120AA E840                       		asr.w	#4,d0
000120AC 0828 0000 0028             		btst	#0,$28(a0)
000120B2 6700                       		beq.s	Obj5D_MoveSonic
000120B4 4440                       		neg.w	d0
000120B6                            
000120B6                            Obj5D_MoveSonic:
000120B6 D169 0008                  		add.w	d0,8(a1)	; push Sonic away from the fan
000120BA                            
000120BA                            Obj5D_Animate:				; XREF: Obj5D_ChkSonic
000120BA 5328 001E                  		subq.b	#1,$1E(a0)
000120BE 6A00                       		bpl.s	Obj5D_ChkDel
000120C0 117C 0000 001E             		move.b	#0,$1E(a0)
000120C6 5228 001B                  		addq.b	#1,$1B(a0)
000120CA 0C28 0003 001B             		cmpi.b	#3,$1B(a0)
000120D0 6500                       		bcs.s	loc_115D8
000120D2 117C 0000 001B             		move.b	#0,$1B(a0)
000120D8                            
000120D8                            loc_115D8:
000120D8 7000                       		moveq	#0,d0
000120DA 0828 0000 0028             		btst	#0,$28(a0)
000120E0 6700                       		beq.s	loc_115E4
000120E2 7002                       		moveq	#2,d0
000120E4                            
000120E4                            loc_115E4:
000120E4 D028 001B                  		add.b	$1B(a0),d0
000120E8 1140 001A                  		move.b	d0,$1A(a0)
000120EC                            
000120EC                            Obj5D_ChkDel:				; XREF: Obj5D_Animate
000120EC 6100 BFF6                  		bsr.w	DisplaySprite
000120F0 3028 0008                  		move.w	8(a0),d0
000120F4 0240 FF80                  		andi.w	#$FF80,d0
000120F8 3238 F700                  		move.w	($FFFFF700).w,d1
000120FC 0441 0080                  		subi.w	#$80,d1
00012100 0241 FF80                  		andi.w	#$FF80,d1
00012104 9041                       		sub.w	d1,d0
00012106 0C40 0280                  		cmpi.w	#$280,d0
0001210A 6200 C014                  		bhi.w	DeleteObject
0001210E 4E75                       		rts	
00012110                            ; ===========================================================================
00012110                            ; ---------------------------------------------------------------------------
00012110                            ; Sprite mappings - fans (SLZ)
00012110                            ; ---------------------------------------------------------------------------
00012110                            Map_obj5D:
00012110                            	include "_maps\obj5D.asm"
00012110                            ; ---------------------------------------------------------------------------
00012110                            ; Sprite mappings - fans (SLZ)
00012110                            ; ---------------------------------------------------------------------------
00012110 0000 0000                  		dc.w byte_1161A-Map_obj5D, byte_11625-Map_obj5D
00012114 0000 0000                  		dc.w byte_11630-Map_obj5D, byte_11625-Map_obj5D
00012118 0000                       		dc.w byte_1161A-Map_obj5D
0001211A 02                         byte_1161A:	dc.b 2
0001211B F009 0000 F8               		dc.b $F0, 9, 0,	0, $F8
00012120 000D 0006 F0               		dc.b 0,	$D, 0, 6, $F0
00012125 02                         byte_11625:	dc.b 2
00012126 F00D 000E F0               		dc.b $F0, $D, 0, $E, $F0
0001212B 000D 0016 F0               		dc.b 0,	$D, 0, $16, $F0
00012130 02                         byte_11630:	dc.b 2
00012131 F00D 001E F0               		dc.b $F0, $D, 0, $1E, $F0
00012136 0009 0026 F8               		dc.b 0,	9, 0, $26, $F8
0001213C 00                         		even
0001213C 00                         		even
0001213C                            
0001213C                            ; ===========================================================================
0001213C                            ; ---------------------------------------------------------------------------
0001213C                            ; Object 5E - seesaws (SLZ)
0001213C                            ; ---------------------------------------------------------------------------
0001213C                            
0001213C                            Obj5E:					; XREF: Obj_Index
0001213C 7000                       		moveq	#0,d0
0001213E 1028 0024                  		move.b	$24(a0),d0
00012142 323B 0000                  		move.w	Obj5E_Index(pc,d0.w),d1
00012146 4EBB 1000                  		jsr	Obj5E_Index(pc,d1.w)
0001214A 3028 0030                  		move.w	$30(a0),d0
0001214E 0240 FF80                  		andi.w	#$FF80,d0
00012152 3238 F700                  		move.w	($FFFFF700).w,d1
00012156 0441 0080                  		subi.w	#$80,d1
0001215A 0241 FF80                  		andi.w	#$FF80,d1
0001215E 9041                       		sub.w	d1,d0
00012160 6B00 BFBE                  		bmi.w	DeleteObject
00012164 0C40 0280                  		cmpi.w	#$280,d0
00012168 6200 BFB6                  		bhi.w	DeleteObject
0001216C 6000 BF76                  		bra.w	DisplaySprite
00012170                            ; ===========================================================================
00012170 0000                       Obj5E_Index:	dc.w Obj5E_Main-Obj5E_Index
00012172 0000                       		dc.w Obj5E_Slope-Obj5E_Index
00012174 0000                       		dc.w Obj5E_Slope2-Obj5E_Index
00012176 0000                       		dc.w Obj5E_Spikeball-Obj5E_Index
00012178 0000                       		dc.w Obj5E_MoveSpike-Obj5E_Index
0001217A 0000                       		dc.w Obj5E_SpikeFall-Obj5E_Index
0001217C                            ; ===========================================================================
0001217C                            
0001217C                            Obj5E_Main:				; XREF: Obj5E_Index
0001217C 5428 0024                  		addq.b	#2,$24(a0)
00012180 217C 0000 0000 0004        		move.l	#Map_obj5E,4(a0)
00012188 317C 0374 0002             		move.w	#$374,2(a0)
0001218E 0028 0004 0001             		ori.b	#4,1(a0)
00012194 117C 0004 0018             		move.b	#4,$18(a0)
0001219A 117C 0030 0019             		move.b	#$30,$19(a0)
000121A0 3168 0008 0030             		move.w	8(a0),$30(a0)
000121A6 4A28 0028                  		tst.b	$28(a0)		; is object type 00 ?
000121AA 6600                       		bne.s	loc_116D2	; if not, branch
000121AC 6100 C3E2                  		bsr.w	SingleObjLoad2
000121B0 6600                       		bne.s	loc_116D2
000121B2 12BC 005E                  		move.b	#$5E,0(a1)	; load spikeball object
000121B6 5C29 0024                  		addq.b	#6,$24(a1)
000121BA 3368 0008 0008             		move.w	8(a0),8(a1)
000121C0 3368 000C 000C             		move.w	$C(a0),$C(a1)
000121C6 1368 0022 0022             		move.b	$22(a0),$22(a1)
000121CC 2348 003C                  		move.l	a0,$3C(a1)
000121D0                            
000121D0                            loc_116D2:
000121D0 0828 0000 0022             		btst	#0,$22(a0)
000121D6 6700                       		beq.s	loc_116E0
000121D8 117C 0002 001A             		move.b	#2,$1A(a0)
000121DE                            
000121DE                            loc_116E0:
000121DE 1168 001A 003A             		move.b	$1A(a0),$3A(a0)
000121E4                            
000121E4                            Obj5E_Slope:				; XREF: Obj5E_Index
000121E4 1228 003A                  		move.b	$3A(a0),d1
000121E8 6100 0000                  		bsr.w	loc_11766
000121EC 45F9 0000 0000             		lea	(Obj5E_Data1).l,a2
000121F2 0828 0000 001A             		btst	#0,$1A(a0)
000121F8 6700                       		beq.s	loc_11702
000121FA 45F9 0000 0000             		lea	(Obj5E_Data2).l,a2
00012200                            
00012200                            loc_11702:
00012200 43F8 D000                  		lea	($FFFFD000).w,a1
00012204 3169 0012 0038             		move.w	$12(a1),$38(a0)
0001220A 323C 0030                  		move.w	#$30,d1
0001220E 4EB9 0000 7FAA             		jsr	(SlopeObject).l
00012214 4E75                       		rts	
00012216                            ; ===========================================================================
00012216                            
00012216                            Obj5E_Slope2:				; XREF: Obj5E_Index
00012216 6100 0000                  		bsr.w	loc_1174A
0001221A 45F9 0000 0000             		lea	(Obj5E_Data1).l,a2
00012220 0828 0000 001A             		btst	#0,$1A(a0)
00012226 6700                       		beq.s	loc_11730
00012228 45F9 0000 0000             		lea	(Obj5E_Data2).l,a2
0001222E                            
0001222E                            loc_11730:
0001222E 323C 0030                  		move.w	#$30,d1
00012232 4EB9 0000 804A             		jsr	(ExitPlatform).l
00012238 323C 0030                  		move.w	#$30,d1
0001223C 3428 0008                  		move.w	8(a0),d2
00012240 4EB9 0000 8FA8             		jsr	SlopeObject2
00012246 4E75                       		rts	
00012248                            ; ===========================================================================
00012248                            
00012248                            loc_1174A:				; XREF: Obj5E_Slope2
00012248 7202                       		moveq	#2,d1
0001224A 43F8 D000                  		lea	($FFFFD000).w,a1
0001224E 3028 0008                  		move.w	8(a0),d0
00012252 9069 0008                  		sub.w	8(a1),d0
00012256 6400                       		bcc.s	loc_1175E
00012258 4440                       		neg.w	d0
0001225A 7200                       		moveq	#0,d1
0001225C                            
0001225C                            loc_1175E:
0001225C 0C40 0008                  		cmpi.w	#8,d0
00012260 6400                       		bcc.s	loc_11766
00012262 7201                       		moveq	#1,d1
00012264                            
00012264                            loc_11766:
00012264 1028 001A                  		move.b	$1A(a0),d0
00012268 B001                       		cmp.b	d1,d0
0001226A 6700                       		beq.s	locret_11790
0001226C 6400                       		bcc.s	loc_11772
0001226E 5400                       		addq.b	#2,d0
00012270                            
00012270                            loc_11772:
00012270 5300                       		subq.b	#1,d0
00012272 1140 001A                  		move.b	d0,$1A(a0)
00012276 1141 003A                  		move.b	d1,$3A(a0)
0001227A 08A8 0000 0001             		bclr	#0,1(a0)
00012280 0828 0001 001A             		btst	#1,$1A(a0)
00012286 6700                       		beq.s	locret_11790
00012288 08E8 0000 0001             		bset	#0,1(a0)
0001228E                            
0001228E                            locret_11790:
0001228E 4E75                       		rts	
00012290                            ; ===========================================================================
00012290                            
00012290                            Obj5E_Spikeball:			; XREF: Obj5E_Index
00012290 5428 0024                  		addq.b	#2,$24(a0)
00012294 217C 0000 0000 0004        		move.l	#Map_obj5Ea,4(a0)
0001229C 317C 04F0 0002             		move.w	#$4F0,2(a0)
000122A2 0028 0004 0001             		ori.b	#4,1(a0)
000122A8 117C 0004 0018             		move.b	#4,$18(a0)
000122AE 117C 008B 0020             		move.b	#$8B,$20(a0)
000122B4 117C 000C 0019             		move.b	#$C,$19(a0)
000122BA 3168 0008 0030             		move.w	8(a0),$30(a0)
000122C0 0668 0028 0008             		addi.w	#$28,8(a0)
000122C6 3168 000C 0034             		move.w	$C(a0),$34(a0)
000122CC 117C 0001 001A             		move.b	#1,$1A(a0)
000122D2 0828 0000 0022             		btst	#0,$22(a0)
000122D8 6700                       		beq.s	Obj5E_MoveSpike
000122DA 0468 0050 0008             		subi.w	#$50,8(a0)
000122E0 117C 0002 003A             		move.b	#2,$3A(a0)
000122E6                            
000122E6                            Obj5E_MoveSpike:			; XREF: Obj5E_Index
000122E6 2268 003C                  		movea.l	$3C(a0),a1
000122EA 7000                       		moveq	#0,d0
000122EC 1028 003A                  		move.b	$3A(a0),d0
000122F0 9029 003A                  		sub.b	$3A(a1),d0
000122F4 6700                       		beq.s	loc_1183E
000122F6 6400                       		bcc.s	loc_117FC
000122F8 4400                       		neg.b	d0
000122FA                            
000122FA                            loc_117FC:
000122FA 323C F7E8                  		move.w	#-$818,d1
000122FE 343C FEEC                  		move.w	#-$114,d2
00012302 0C00 0001                  		cmpi.b	#1,d0
00012306 6700                       		beq.s	loc_11822
00012308 323C F510                  		move.w	#-$AF0,d1
0001230C 343C FF34                  		move.w	#-$CC,d2
00012310 0C69 0A00 0038             		cmpi.w	#$A00,$38(a1)
00012316 6D00                       		blt.s	loc_11822
00012318 323C F200                  		move.w	#-$E00,d1
0001231C 343C FF60                  		move.w	#-$A0,d2
00012320                            
00012320                            loc_11822:
00012320 3141 0012                  		move.w	d1,$12(a0)
00012324 3142 0010                  		move.w	d2,$10(a0)
00012328 3028 0008                  		move.w	8(a0),d0
0001232C 9068 0030                  		sub.w	$30(a0),d0
00012330 6400                       		bcc.s	loc_11838
00012332 4468 0010                  		neg.w	$10(a0)
00012336                            
00012336                            loc_11838:
00012336 5428 0024                  		addq.b	#2,$24(a0)
0001233A 6000                       		bra.s	Obj5E_SpikeFall
0001233C                            ; ===========================================================================
0001233C                            
0001233C                            loc_1183E:				; XREF: Obj5E_MoveSpike
0001233C 45F9 0000 0000             		lea	(Obj5E_Speeds).l,a2
00012342 7000                       		moveq	#0,d0
00012344 1029 001A                  		move.b	$1A(a1),d0
00012348 343C 0028                  		move.w	#$28,d2
0001234C 3228 0008                  		move.w	8(a0),d1
00012350 9268 0030                  		sub.w	$30(a0),d1
00012354 6400                       		bcc.s	loc_1185C
00012356 4442                       		neg.w	d2
00012358 5440                       		addq.w	#2,d0
0001235A                            
0001235A                            loc_1185C:
0001235A D040                       		add.w	d0,d0
0001235C 3228 0034                  		move.w	$34(a0),d1
00012360 D272 0000                  		add.w	(a2,d0.w),d1
00012364 3141 000C                  		move.w	d1,$C(a0)
00012368 D468 0030                  		add.w	$30(a0),d2
0001236C 3142 0008                  		move.w	d2,8(a0)
00012370 4268 000E                  		clr.w	$E(a0)
00012374 4268 000A                  		clr.w	$A(a0)
00012378 4E75                       		rts	
0001237A                            ; ===========================================================================
0001237A                            
0001237A                            Obj5E_SpikeFall:			; XREF: Obj5E_Index
0001237A 4A68 0012                  		tst.w	$12(a0)
0001237E 6A00                       		bpl.s	loc_1189A
00012380 6100 BD10                  		bsr.w	ObjectFall
00012384 3028 0034                  		move.w	$34(a0),d0
00012388 0440 002F                  		subi.w	#$2F,d0
0001238C B068 000C                  		cmp.w	$C(a0),d0
00012390 6E00                       		bgt.s	locret_11898
00012392 6100 BCFE                  		bsr.w	ObjectFall
00012396                            
00012396                            locret_11898:
00012396 4E75                       		rts	
00012398                            ; ===========================================================================
00012398                            
00012398                            loc_1189A:				; XREF: Obj5E_SpikeFall
00012398 6100 BCF8                  		bsr.w	ObjectFall
0001239C 2268 003C                  		movea.l	$3C(a0),a1
000123A0 45F9 0000 0000             		lea	(Obj5E_Speeds).l,a2
000123A6 7000                       		moveq	#0,d0
000123A8 1029 001A                  		move.b	$1A(a1),d0
000123AC 3228 0008                  		move.w	8(a0),d1
000123B0 9268 0030                  		sub.w	$30(a0),d1
000123B4 6400                       		bcc.s	loc_118BA
000123B6 5440                       		addq.w	#2,d0
000123B8                            
000123B8                            loc_118BA:
000123B8 D040                       		add.w	d0,d0
000123BA 3228 0034                  		move.w	$34(a0),d1
000123BE D272 0000                  		add.w	(a2,d0.w),d1
000123C2 B268 000C                  		cmp.w	$C(a0),d1
000123C6 6E00                       		bgt.s	locret_11938
000123C8 2268 003C                  		movea.l	$3C(a0),a1
000123CC 7202                       		moveq	#2,d1
000123CE 4A68 0010                  		tst.w	$10(a0)
000123D2 6B00                       		bmi.s	Obj5E_Spring
000123D4 7200                       		moveq	#0,d1
000123D6                            
000123D6                            Obj5E_Spring:
000123D6 1341 003A                  		move.b	d1,$3A(a1)
000123DA 1141 003A                  		move.b	d1,$3A(a0)
000123DE B229 001A                  		cmp.b	$1A(a1),d1
000123E2 6700                       		beq.s	loc_1192C
000123E4 08A9 0003 0022             		bclr	#3,$22(a1)
000123EA 6700                       		beq.s	loc_1192C
000123EC 4229 0025                  		clr.b	$25(a1)
000123F0 137C 0002 0024             		move.b	#2,$24(a1)
000123F6 45F8 D000                  		lea	($FFFFD000).w,a2
000123FA 3568 0012 0012             		move.w	$12(a0),$12(a2)
00012400 446A 0012                  		neg.w	$12(a2)
00012404 08EA 0001 0022             		bset	#1,$22(a2)
0001240A 08AA 0003 0022             		bclr	#3,$22(a2)
00012410 422A 003C                  		clr.b	$3C(a2)
00012414 157C 0010 001C             		move.b	#$10,$1C(a2)	; change Sonic's animation to "spring" ($10)
0001241A 157C 0002 0024             		move.b	#2,$24(a2)
00012420 303C 00CC                  		move.w	#$CC,d0
00012424 4EB9 0000 147C             		jsr	(PlaySound_Special).l ;	play spring sound
0001242A                            
0001242A                            loc_1192C:
0001242A 4268 0010                  		clr.w	$10(a0)
0001242E 4268 0012                  		clr.w	$12(a0)
00012432 5528 0024                  		subq.b	#2,$24(a0)
00012436                            
00012436                            locret_11938:
00012436 4E75                       		rts	
00012438                            ; ===========================================================================
00012438 FFF8 FFE4 FFD1 FFE4 FFF8   Obj5E_Speeds:	dc.w $FFF8, $FFE4, $FFD1, $FFE4, $FFF8
00012442                            
00012442                            Obj5E_Data1:	incbin	misc\slzssaw1.bin
00012472                            		even
00012472                            Obj5E_Data2:	incbin	misc\slzssaw2.bin
000124A2                            		even
000124A2                            ; ---------------------------------------------------------------------------
000124A2                            ; Sprite mappings - seesaws (SLZ)
000124A2                            ; ---------------------------------------------------------------------------
000124A2                            Map_obj5E:
000124A2                            	include "_maps\obj5E.asm"
000124A2                            ; ---------------------------------------------------------------------------
000124A2                            ; Sprite mappings - seesaws (SLZ)
000124A2                            ; ---------------------------------------------------------------------------
000124A2 0000 0000                  		dc.w byte_119AC-Map_obj5E, byte_119D0-Map_obj5E
000124A6 0000 0000                  		dc.w byte_119AC-Map_obj5E, byte_119D0-Map_obj5E
000124AA 07                         byte_119AC:	dc.b 7
000124AB D406 0000 D3               		dc.b $D4, 6, 0,	0, $D3
000124B0 DC06 0006 E3               		dc.b $DC, 6, 0,	6, $E3
000124B5 E404 000C F3               		dc.b $E4, 4, 0,	$C, $F3
000124BA EC0D 000E F3               		dc.b $EC, $D, 0, $E, $F3
000124BF FC08 0016 FB               		dc.b $FC, 8, 0,	$16, $FB
000124C4 F406 0006 13               		dc.b $F4, 6, 0,	6, $13
000124C9 FC05 0019 23               		dc.b $FC, 5, 0,	$19, $23
000124CE 04                         byte_119D0:	dc.b 4
000124CF E60A 001D D0               		dc.b $E6, $A, 0, $1D, $D0
000124D4 E60A 0023 E8               		dc.b $E6, $A, 0, $23, $E8
000124D9 E60A 0823 00               		dc.b $E6, $A, 8, $23, 0
000124DE E60A 081D 18               		dc.b $E6, $A, 8, $1D, $18
000124E4 00                         		even
000124E4 00                         		even
000124E4                            
000124E4                            ; ---------------------------------------------------------------------------
000124E4                            ; Sprite mappings - spiked balls on the	seesaws	(SLZ)
000124E4                            ; ---------------------------------------------------------------------------
000124E4                            Map_obj5Ea:
000124E4                            	include "_maps\obj5Eballs.asm"
000124E4                            ; ---------------------------------------------------------------------------
000124E4                            ; Sprite mappings - spiked balls on the	seesaws	(SLZ)
000124E4                            ; ---------------------------------------------------------------------------
000124E4 0000                       		dc.w byte_119EA-Map_obj5Ea
000124E6 0000                       		dc.w byte_119F0-Map_obj5Ea
000124E8 01                         byte_119EA:	dc.b 1
000124E9 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
000124EE 01                         byte_119F0:	dc.b 1
000124EF F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
000124F4                            		even
000124F4                            		even
000124F4                            
000124F4                            ; ===========================================================================
000124F4                            ; ---------------------------------------------------------------------------
000124F4                            ; Object 5F - walking bomb enemy (SLZ, SBZ)
000124F4                            ; ---------------------------------------------------------------------------
000124F4                            
000124F4                            Obj5F:					; XREF: Obj_Index
000124F4 7000                       		moveq	#0,d0
000124F6 1028 0024                  		move.b	$24(a0),d0
000124FA 323B 0000                  		move.w	Obj5F_Index(pc,d0.w),d1
000124FE 4EFB 1000                  		jmp	Obj5F_Index(pc,d1.w)
00012502                            ; ===========================================================================
00012502 0000                       Obj5F_Index:	dc.w Obj5F_Main-Obj5F_Index
00012504 0000                       		dc.w Obj5F_Action-Obj5F_Index
00012506 0000                       		dc.w Obj5F_Display-Obj5F_Index
00012508 0000                       		dc.w Obj5F_End-Obj5F_Index
0001250A                            ; ===========================================================================
0001250A                            
0001250A                            Obj5F_Main:				; XREF: Obj5F_Index
0001250A 5428 0024                  		addq.b	#2,$24(a0)
0001250E 217C 0000 0000 0004        		move.l	#Map_obj5F,4(a0)
00012516 317C 0400 0002             		move.w	#$400,2(a0)
0001251C 0028 0004 0001             		ori.b	#4,1(a0)
00012522 117C 0003 0018             		move.b	#3,$18(a0)
00012528 117C 000C 0019             		move.b	#$C,$19(a0)
0001252E 1028 0028                  		move.b	$28(a0),d0
00012532 6700                       		beq.s	loc_11A3C
00012534 1140 0024                  		move.b	d0,$24(a0)
00012538 4E75                       		rts	
0001253A                            ; ===========================================================================
0001253A                            
0001253A                            loc_11A3C:
0001253A 117C 009A 0020             		move.b	#$9A,$20(a0)
00012540 0868 0000 0022             		bchg	#0,$22(a0)
00012546                            
00012546                            Obj5F_Action:				; XREF: Obj5F_Index
00012546 7000                       		moveq	#0,d0
00012548 1028 0025                  		move.b	$25(a0),d0
0001254C 323B 0000                  		move.w	Obj5F_Index2(pc,d0.w),d1
00012550 4EBB 1000                  		jsr	Obj5F_Index2(pc,d1.w)
00012554 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
0001255A 6100 8C9A                  		bsr.w	AnimateSprite
0001255E 6000 DC46                  		bra.w	MarkObjGone
00012562                            ; ===========================================================================
00012562 0000                       Obj5F_Index2:	dc.w Obj5F_Walk-Obj5F_Index2
00012564 0000                       		dc.w Obj5F_Wait-Obj5F_Index2
00012566 0000                       		dc.w Obj5F_Explode-Obj5F_Index2
00012568                            ; ===========================================================================
00012568                            
00012568                            Obj5F_Walk:				; XREF: Obj5F_Index2
00012568 6100 0000                  		bsr.w	Obj5F_ChkSonic
0001256C 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00012570 6A00                       		bpl.s	locret_11A96	; if time remains, branch
00012572 5428 0025                  		addq.b	#2,$25(a0)
00012576 317C 05FF 0030             		move.w	#1535,$30(a0)	; set time delay to 25 seconds
0001257C 317C 0010 0010             		move.w	#$10,$10(a0)
00012582 117C 0001 001C             		move.b	#1,$1C(a0)
00012588 0868 0000 0022             		bchg	#0,$22(a0)
0001258E 6700                       		beq.s	locret_11A96
00012590 4468 0010                  		neg.w	$10(a0)		; change direction
00012594                            
00012594                            locret_11A96:
00012594 4E75                       		rts	
00012596                            ; ===========================================================================
00012596                            
00012596                            Obj5F_Wait:				; XREF: Obj5F_Index2
00012596 6100 0000                  		bsr.w	Obj5F_ChkSonic
0001259A 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
0001259E 6B00                       		bmi.s	loc_11AA8
000125A0 6100 BB1C                  		bsr.w	SpeedToPos
000125A4 4E75                       		rts	
000125A6                            ; ===========================================================================
000125A6                            
000125A6                            loc_11AA8:
000125A6 5528 0025                  		subq.b	#2,$25(a0)
000125AA 317C 00B3 0030             		move.w	#179,$30(a0)	; set time delay to 3 seconds
000125B0 4268 0010                  		clr.w	$10(a0)		; stop walking
000125B4 117C 0000 001C             		move.b	#0,$1C(a0)	; stop animation
000125BA 4E75                       		rts	
000125BC                            ; ===========================================================================
000125BC                            
000125BC                            Obj5F_Explode:				; XREF: Obj5F_Index2
000125BC 5368 0030                  		subq.w	#1,$30(a0)
000125C0 6A00                       		bpl.s	locret_11AD0
000125C2 10BC 003F                  		move.b	#$3F,0(a0)	; change bomb into an explosion
000125C6 117C 0000 0024             		move.b	#0,$24(a0)
000125CC                            
000125CC                            locret_11AD0:
000125CC 4E75                       		rts	
000125CE                            ; ===========================================================================
000125CE                            
000125CE                            Obj5F_ChkSonic:				; XREF: Obj5F_Walk; Obj5F_Wait
000125CE 3038 D008                  		move.w	($FFFFD008).w,d0
000125D2 9068 0008                  		sub.w	8(a0),d0
000125D6 6400                       		bcc.s	loc_11ADE
000125D8 4440                       		neg.w	d0
000125DA                            
000125DA                            loc_11ADE:
000125DA 0C40 0060                  		cmpi.w	#$60,d0
000125DE 6400                       		bcc.s	locret_11B5E
000125E0 3038 D00C                  		move.w	($FFFFD00C).w,d0
000125E4 9068 000C                  		sub.w	$C(a0),d0
000125E8 6400                       		bcc.s	Obj5F_MakeFuse
000125EA 4440                       		neg.w	d0
000125EC                            
000125EC                            Obj5F_MakeFuse:
000125EC 0C40 0060                  		cmpi.w	#$60,d0
000125F0 6400                       		bcc.s	locret_11B5E
000125F2 4A78 FE08                  		tst.w	($FFFFFE08).w
000125F6 6600                       		bne.s	locret_11B5E
000125F8 117C 0004 0025             		move.b	#4,$25(a0)
000125FE 317C 008F 0030             		move.w	#143,$30(a0)	; set fuse time
00012604 4268 0010                  		clr.w	$10(a0)
00012608 117C 0002 001C             		move.b	#2,$1C(a0)
0001260E 6100 BF80                  		bsr.w	SingleObjLoad2
00012612 6600                       		bne.s	locret_11B5E
00012614 12BC 005F                  		move.b	#$5F,0(a1)	; load fuse object
00012618 3368 0008 0008             		move.w	8(a0),8(a1)
0001261E 3368 000C 000C             		move.w	$C(a0),$C(a1)
00012624 3368 000C 0034             		move.w	$C(a0),$34(a1)
0001262A 1368 0022 0022             		move.b	$22(a0),$22(a1)
00012630 137C 0004 0028             		move.b	#4,$28(a1)
00012636 137C 0003 001C             		move.b	#3,$1C(a1)
0001263C 337C 0010 0012             		move.w	#$10,$12(a1)
00012642 0828 0001 0022             		btst	#1,$22(a0)
00012648 6700                       		beq.s	loc_11B54
0001264A 4469 0012                  		neg.w	$12(a1)
0001264E                            
0001264E                            loc_11B54:
0001264E 337C 008F 0030             		move.w	#143,$30(a1)	; set fuse time
00012654 2348 003C                  		move.l	a0,$3C(a1)
00012658                            
00012658                            locret_11B5E:
00012658 4E75                       		rts	
0001265A                            ; ===========================================================================
0001265A                            
0001265A                            Obj5F_Display:				; XREF: Obj5F_Index
0001265A 6100                       		bsr.s	loc_11B70
0001265C 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
00012662 6100 8B92                  		bsr.w	AnimateSprite
00012666 6000 DB3E                  		bra.w	MarkObjGone
0001266A                            ; ===========================================================================
0001266A                            
0001266A                            loc_11B70:
0001266A 5368 0030                  		subq.w	#1,$30(a0)
0001266E 6B00                       		bmi.s	loc_11B7C
00012670 6100 BA4C                  		bsr.w	SpeedToPos
00012674 4E75                       		rts	
00012676                            ; ===========================================================================
00012676                            
00012676                            loc_11B7C:
00012676 4268 0030                  		clr.w	$30(a0)
0001267A 4228 0024                  		clr.b	$24(a0)
0001267E 3168 0034 000C             		move.w	$34(a0),$C(a0)
00012684 7203                       		moveq	#3,d1
00012686 2248                       		movea.l	a0,a1
00012688 45F9 0000 0000             		lea	(Obj5F_ShrSpeed).l,a2 ;	load shrapnel speed data
0001268E 6000                       		bra.s	Obj5F_MakeShrap
00012690                            ; ===========================================================================
00012690                            
00012690                            Obj5F_Loop:
00012690 6100 BEFE                  		bsr.w	SingleObjLoad2
00012694 6600                       		bne.s	loc_11BCE
00012696                            
00012696                            Obj5F_MakeShrap:			; XREF: loc_11B7C
00012696 12BC 005F                  		move.b	#$5F,0(a1)	; load shrapnel	object
0001269A 3368 0008 0008             		move.w	8(a0),8(a1)
000126A0 3368 000C 000C             		move.w	$C(a0),$C(a1)
000126A6 137C 0006 0028             		move.b	#6,$28(a1)
000126AC 137C 0004 001C             		move.b	#4,$1C(a1)
000126B2 335A 0010                  		move.w	(a2)+,$10(a1)
000126B6 335A 0012                  		move.w	(a2)+,$12(a1)
000126BA 137C 0098 0020             		move.b	#$98,$20(a1)
000126C0 08E9 0007 0001             		bset	#7,1(a1)
000126C6                            
000126C6                            loc_11BCE:
000126C6 51C9 FFC8                  		dbf	d1,Obj5F_Loop	; repeat 3 more	times
000126CA                            
000126CA 117C 0006 0024             		move.b	#6,$24(a0)
000126D0                            
000126D0                            Obj5F_End:				; XREF: Obj5F_Index
000126D0 6100 B9EC                  		bsr.w	SpeedToPos
000126D4 0668 0018 0012             		addi.w	#$18,$12(a0)
000126DA 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
000126E0 6100 8B14                  		bsr.w	AnimateSprite
000126E4 4A28 0001                  		tst.b	1(a0)
000126E8 6A00 BA36                  		bpl.w	DeleteObject
000126EC 6000 B9F6                  		bra.w	DisplaySprite
000126F0                            ; ===========================================================================
000126F0 FE00 FD00 FF00 FE00 0200+  Obj5F_ShrSpeed:	dc.w $FE00, $FD00, $FF00, $FE00, $200, $FD00, $100, $FE00
00012700                            
00012700                            Ani_obj5F:
00012700                            	include "_anim\obj5F.asm"
00012700                            ; ---------------------------------------------------------------------------
00012700                            ; Animation script - Bomb enemy
00012700                            ; ---------------------------------------------------------------------------
00012700 0000                       		dc.w byte_11C12-Ani_obj5F
00012702 0000                       		dc.w byte_11C16-Ani_obj5F
00012704 0000                       		dc.w byte_11C1C-Ani_obj5F
00012706 0000                       		dc.w byte_11C20-Ani_obj5F
00012708 0000                       		dc.w byte_11C24-Ani_obj5F
0001270A 1301 00FF                  byte_11C12:	dc.b $13, 1, 0,	$FF
0001270E 1305 0403 02FF             byte_11C16:	dc.b $13, 5, 4,	3, 2, $FF
00012714 1307 06FF                  byte_11C1C:	dc.b $13, 7, 6,	$FF
00012718 0308 09FF                  byte_11C20:	dc.b 3,	8, 9, $FF
0001271C 030A 0BFF                  byte_11C24:	dc.b 3,	$A, $B,	$FF
00012720                            		even
00012720                            		even
00012720                            
00012720                            ; ---------------------------------------------------------------------------
00012720                            ; Sprite mappings - walking bomb enemy (SLZ, SBZ)
00012720                            ; ---------------------------------------------------------------------------
00012720                            Map_obj5F:
00012720                            	include "_maps\obj5F.asm"
00012720                            ; ---------------------------------------------------------------------------
00012720                            ; Sprite mappings - walking bomb enemy (SLZ, SBZ)
00012720                            ; ---------------------------------------------------------------------------
00012720 0000 0000                  		dc.w byte_11C40-Map_obj5F, byte_11C50-Map_obj5F
00012724 0000 0000                  		dc.w byte_11C60-Map_obj5F, byte_11C70-Map_obj5F
00012728 0000 0000                  		dc.w byte_11C80-Map_obj5F, byte_11C90-Map_obj5F
0001272C 0000 0000                  		dc.w byte_11CA0-Map_obj5F, byte_11CAB-Map_obj5F
00012730 0000 0000                  		dc.w byte_11CB6-Map_obj5F, byte_11CBC-Map_obj5F
00012734 0000 0000                  		dc.w byte_11CC2-Map_obj5F, byte_11CC8-Map_obj5F
00012738 03                         byte_11C40:	dc.b 3
00012739 F10A 0000 F4               		dc.b $F1, $A, 0, 0, $F4
0001273E 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00012743 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00012748 03                         byte_11C50:	dc.b 3
00012749 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
0001274E 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00012753 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00012758 03                         byte_11C60:	dc.b 3
00012759 F00A 0000 F4               		dc.b $F0, $A, 0, 0, $F4
0001275E 0808 0015 F4               		dc.b 8,	8, 0, $15, $F4
00012763 E601 0021 FC               		dc.b $E6, 1, 0,	$21, $FC
00012768 03                         byte_11C70:	dc.b 3
00012769 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
0001276E 0908 0018 F4               		dc.b 9,	8, 0, $18, $F4
00012773 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00012778 03                         byte_11C80:	dc.b 3
00012779 F00A 0000 F4               		dc.b $F0, $A, 0, 0, $F4
0001277E 0808 001B F4               		dc.b 8,	8, 0, $1B, $F4
00012783 E601 0021 FC               		dc.b $E6, 1, 0,	$21, $FC
00012788 03                         byte_11C90:	dc.b 3
00012789 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
0001278E 0908 001E F4               		dc.b 9,	8, 0, $1E, $F4
00012793 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00012798 02                         byte_11CA0:	dc.b 2
00012799 F10A 0000 F4               		dc.b $F1, $A, 0, 0, $F4
0001279E 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
000127A3 02                         byte_11CAB:	dc.b 2
000127A4 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
000127A9 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
000127AE 01                         byte_11CB6:	dc.b 1			; fuse	(just before it	explodes)
000127AF E701 0023 FC               		dc.b $E7, 1, 0,	$23, $FC
000127B4 01                         byte_11CBC:	dc.b 1			; fuse
000127B5 E701 0025 FC               		dc.b $E7, 1, 0,	$25, $FC
000127BA 01                         byte_11CC2:	dc.b 1			; fireball (after it exploded)
000127BB FC00 0027 FC               		dc.b $FC, 0, 0,	$27, $FC
000127C0 01                         byte_11CC8:	dc.b 1			; fireball
000127C1 FC00 0028 FC               		dc.b $FC, 0, 0,	$28, $FC
000127C6                            		even
000127C6                            		even
000127C6                            
000127C6                            ; ===========================================================================
000127C6                            ; ---------------------------------------------------------------------------
000127C6                            ; Object 60 - Orbinaut enemy (LZ, SLZ, SBZ)
000127C6                            ; ---------------------------------------------------------------------------
000127C6                            
000127C6                            Obj60:					; XREF: Obj_Index
000127C6 7000                       		moveq	#0,d0
000127C8 1028 0024                  		move.b	$24(a0),d0
000127CC 323B 0000                  		move.w	Obj60_Index(pc,d0.w),d1
000127D0 4EFB 1000                  		jmp	Obj60_Index(pc,d1.w)
000127D4                            ; ===========================================================================
000127D4 0000                       Obj60_Index:	dc.w Obj60_Main-Obj60_Index
000127D6 0000                       		dc.w Obj60_ChkSonic-Obj60_Index
000127D8 0000                       		dc.w Obj60_Display-Obj60_Index
000127DA 0000                       		dc.w Obj60_MoveOrb-Obj60_Index
000127DC 0000                       		dc.w Obj60_ChkDel2-Obj60_Index
000127DE                            ; ===========================================================================
000127DE                            
000127DE                            Obj60_Main:				; XREF: Obj60_Index
000127DE 217C 0000 0000 0004        		move.l	#Map_obj60,4(a0)
000127E6 317C 0429 0002             		move.w	#$429,2(a0)	; SBZ specific code
000127EC 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
000127F2 6700                       		beq.s	loc_11D02
000127F4 317C 2429 0002             		move.w	#$2429,2(a0)	; SLZ specific code
000127FA                            
000127FA                            loc_11D02:
000127FA 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00012800 6600                       		bne.s	loc_11D10
00012802 317C 0467 0002             		move.w	#$467,2(a0)	; LZ specific code
00012808                            
00012808                            loc_11D10:
00012808 0028 0004 0001             		ori.b	#4,1(a0)
0001280E 117C 0004 0018             		move.b	#4,$18(a0)
00012814 117C 000B 0020             		move.b	#$B,$20(a0)
0001281A 117C 000C 0019             		move.b	#$C,$19(a0)
00012820 7400                       		moveq	#0,d2
00012822 45E8 0037                  		lea	$37(a0),a2
00012826 264A                       		movea.l	a2,a3
00012828 524A                       		addq.w	#1,a2
0001282A 7203                       		moveq	#3,d1
0001282C                            
0001282C                            Obj60_MakeOrbs:
0001282C 6100 BD62                  		bsr.w	SingleObjLoad2
00012830 6600                       		bne.s	loc_11D90
00012832 5213                       		addq.b	#1,(a3)
00012834 3A09                       		move.w	a1,d5
00012836 0445 D000                  		subi.w	#-$3000,d5
0001283A EC4D                       		lsr.w	#6,d5
0001283C 0245 007F                  		andi.w	#$7F,d5
00012840 14C5                       		move.b	d5,(a2)+
00012842 1290                       		move.b	0(a0),0(a1)	; load spiked orb object
00012844 137C 0006 0024             		move.b	#6,$24(a1)
0001284A 2368 0004 0004             		move.l	4(a0),4(a1)
00012850 3368 0002 0002             		move.w	2(a0),2(a1)
00012856 0029 0004 0001             		ori.b	#4,1(a1)
0001285C 137C 0004 0018             		move.b	#4,$18(a1)
00012862 137C 0008 0019             		move.b	#8,$19(a1)
00012868 137C 0003 001A             		move.b	#3,$1A(a1)
0001286E 137C 0098 0020             		move.b	#$98,$20(a1)
00012874 1342 0026                  		move.b	d2,$26(a1)
00012878 0602 0040                  		addi.b	#$40,d2
0001287C 2348 003C                  		move.l	a0,$3C(a1)
00012880 51C9 FFAA                  		dbf	d1,Obj60_MakeOrbs ; repeat sequence 3 more times
00012884                            
00012884                            loc_11D90:
00012884 7001                       		moveq	#1,d0
00012886 0828 0000 0022             		btst	#0,$22(a0)
0001288C 6700                       		beq.s	Obj60_Move
0001288E 4440                       		neg.w	d0
00012890                            
00012890                            Obj60_Move:
00012890 1140 0036                  		move.b	d0,$36(a0)
00012894 1168 0028 0024             		move.b	$28(a0),$24(a0)	; if type is 02, skip the firing rountine
0001289A 5428 0024                  		addq.b	#2,$24(a0)
0001289E 317C FFC0 0010             		move.w	#-$40,$10(a0)	; move orbinaut	to the left
000128A4 0828 0000 0022             		btst	#0,$22(a0)	; is orbinaut reversed?
000128AA 6700                       		beq.s	locret_11DBC	; if not, branch
000128AC 4468 0010                  		neg.w	$10(a0)		; move orbinaut	to the right
000128B0                            
000128B0                            locret_11DBC:
000128B0 4E75                       		rts	
000128B2                            ; ===========================================================================
000128B2                            
000128B2                            Obj60_ChkSonic:				; XREF: Obj60_Index
000128B2 3038 D008                  		move.w	($FFFFD008).w,d0
000128B6 9068 0008                  		sub.w	8(a0),d0
000128BA 6400                       		bcc.s	loc_11DCA
000128BC 4440                       		neg.w	d0
000128BE                            
000128BE                            loc_11DCA:
000128BE 0C40 00A0                  		cmpi.w	#$A0,d0		; is Sonic within $A0 pixels of	orbinaut?
000128C2 6400                       		bcc.s	Obj60_Animate	; if not, branch
000128C4 3038 D00C                  		move.w	($FFFFD00C).w,d0
000128C8 9068 000C                  		sub.w	$C(a0),d0
000128CC 6400                       		bcc.s	loc_11DDC
000128CE 4440                       		neg.w	d0
000128D0                            
000128D0                            loc_11DDC:
000128D0 0C40 0050                  		cmpi.w	#$50,d0		; is Sonic within $50 pixels of	orbinaut?
000128D4 6400                       		bcc.s	Obj60_Animate	; if not, branch
000128D6 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
000128DA 6600                       		bne.s	Obj60_Animate	; if yes, branch
000128DC 117C 0001 001C             		move.b	#1,$1C(a0)	; use "angry" animation
000128E2                            
000128E2                            Obj60_Animate:
000128E2 43F9 0000 0000             		lea	(Ani_obj60).l,a1
000128E8 6100 890C                  		bsr.w	AnimateSprite
000128EC 6000 0000                  		bra.w	Obj60_ChkDel
000128F0                            ; ===========================================================================
000128F0                            
000128F0                            Obj60_Display:				; XREF: Obj60_Index
000128F0 6100 B7CC                  		bsr.w	SpeedToPos
000128F4                            
000128F4                            Obj60_ChkDel:				; XREF: Obj60_Animate
000128F4 3028 0008                  		move.w	8(a0),d0
000128F8 0240 FF80                  		andi.w	#$FF80,d0
000128FC 3238 F700                  		move.w	($FFFFF700).w,d1
00012900 0441 0080                  		subi.w	#$80,d1
00012904 0241 FF80                  		andi.w	#$FF80,d1
00012908 9041                       		sub.w	d1,d0
0001290A 0C40 0280                  		cmpi.w	#$280,d0
0001290E 6200 0000                  		bhi.w	Obj60_ChkGone
00012912 6000 B7D0                  		bra.w	DisplaySprite
00012916                            ; ===========================================================================
00012916                            
00012916                            Obj60_ChkGone:				; XREF: Obj60_ChkDel
00012916 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001291A 7000                       		moveq	#0,d0
0001291C 1028 0023                  		move.b	$23(a0),d0
00012920 6700                       		beq.s	loc_11E34
00012922 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00012928                            
00012928                            loc_11E34:
00012928 45E8 0037                  		lea	$37(a0),a2
0001292C 7400                       		moveq	#0,d2
0001292E 141A                       		move.b	(a2)+,d2
00012930 5342                       		subq.w	#1,d2
00012932 6500                       		bcs.s	Obj60_Delete
00012934                            
00012934                            loc_11E40:
00012934 7000                       		moveq	#0,d0
00012936 101A                       		move.b	(a2)+,d0
00012938 ED48                       		lsl.w	#6,d0
0001293A 0680 00FF D000             		addi.l	#$FFD000,d0
00012940 2240                       		movea.l	d0,a1
00012942 6100 B7DE                  		bsr.w	DeleteObject2
00012946 51CA FFEC                  		dbf	d2,loc_11E40
0001294A                            
0001294A                            Obj60_Delete:
0001294A 6000 B7D4                  		bra.w	DeleteObject
0001294E                            ; ===========================================================================
0001294E                            
0001294E                            Obj60_MoveOrb:				; XREF: Obj60_Index
0001294E 2268 003C                  		movea.l	$3C(a0),a1
00012952 0C11 0060                  		cmpi.b	#$60,0(a1)
00012956 6600 B7C8                  		bne.w	DeleteObject
0001295A 0C29 0002 001A             		cmpi.b	#2,$1A(a1)
00012960 6600                       		bne.s	Obj60_Circle
00012962 0C28 0040 0026             		cmpi.b	#$40,$26(a0)
00012968 6600                       		bne.s	Obj60_Circle
0001296A 5428 0024                  		addq.b	#2,$24(a0)
0001296E 5329 0037                  		subq.b	#1,$37(a1)
00012972 6600                       		bne.s	Obj60_FireOrb
00012974 5429 0024                  		addq.b	#2,$24(a1)
00012978                            
00012978                            Obj60_FireOrb:
00012978 317C FE00 0010             		move.w	#-$200,$10(a0)	; move orb to the left (quickly)
0001297E 0829 0000 0022             		btst	#0,$22(a1)
00012984 6700                       		beq.s	Obj60_Display2
00012986 4468 0010                  		neg.w	$10(a0)
0001298A                            
0001298A                            Obj60_Display2:
0001298A 6000 B758                  		bra.w	DisplaySprite
0001298E                            ; ===========================================================================
0001298E                            
0001298E                            Obj60_Circle:				; XREF: Obj60_MoveOrb
0001298E 1028 0026                  		move.b	$26(a0),d0
00012992 4EB9 0000 33DA             		jsr	(CalcSine).l
00012998 E841                       		asr.w	#4,d1
0001299A D269 0008                  		add.w	8(a1),d1
0001299E 3141 0008                  		move.w	d1,8(a0)
000129A2 E840                       		asr.w	#4,d0
000129A4 D069 000C                  		add.w	$C(a1),d0
000129A8 3140 000C                  		move.w	d0,$C(a0)
000129AC 1029 0036                  		move.b	$36(a1),d0
000129B0 D128 0026                  		add.b	d0,$26(a0)
000129B4 6000 B72E                  		bra.w	DisplaySprite
000129B8                            ; ===========================================================================
000129B8                            
000129B8                            Obj60_ChkDel2:				; XREF: Obj60_Index
000129B8 6100 B704                  		bsr.w	SpeedToPos
000129BC 4A28 0001                  		tst.b	1(a0)
000129C0 6A00 B75E                  		bpl.w	DeleteObject
000129C4 6000 B71E                  		bra.w	DisplaySprite
000129C8                            ; ===========================================================================
000129C8                            Ani_obj60:
000129C8                            	include "_anim\obj60.asm"
000129C8                            ; ---------------------------------------------------------------------------
000129C8                            ; Animation script - Orbinaut enemy
000129C8                            ; ---------------------------------------------------------------------------
000129C8 0000                       		dc.w byte_11EDA-Ani_obj60
000129CA 0000                       		dc.w byte_11EDE-Ani_obj60
000129CC 0F00 FF00                  byte_11EDA:	dc.b $F, 0, $FF, 0
000129D0 0F01 02FE 0100             byte_11EDE:	dc.b $F, 1, 2, $FE, 1, 0
000129D6                            		even
000129D6                            		even
000129D6                            
000129D6                            ; ---------------------------------------------------------------------------
000129D6                            ; Sprite mappings - Orbinaut enemy (LZ,	SLZ, SBZ)
000129D6                            ; ---------------------------------------------------------------------------
000129D6                            Map_obj60:
000129D6                            	include "_maps\obj60.asm"
000129D6                            ; ---------------------------------------------------------------------------
000129D6                            ; Sprite mappings - Orbinaut enemy (LZ,	SLZ, SBZ)
000129D6                            ; ---------------------------------------------------------------------------
000129D6 0000 0000                  		dc.w byte_11EEC-Map_obj60, byte_11EF2-Map_obj60
000129DA 0000 0000                  		dc.w byte_11EF8-Map_obj60, byte_11EFE-Map_obj60
000129DE 01                         byte_11EEC:	dc.b 1
000129DF F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
000129E4 01                         byte_11EF2:	dc.b 1
000129E5 F40A 2009 F4               		dc.b $F4, $A, $20, 9, $F4
000129EA 01                         byte_11EF8:	dc.b 1
000129EB F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
000129F0 01                         byte_11EFE:	dc.b 1
000129F1 F805 001B F8               		dc.b $F8, 5, 0,	$1B, $F8
000129F6                            		even
000129F6                            		even
000129F6                            
000129F6                            ; ===========================================================================
000129F6                            ; ---------------------------------------------------------------------------
000129F6                            ; Object 16 - harpoon (LZ)
000129F6                            ; ---------------------------------------------------------------------------
000129F6                            
000129F6                            Obj16:					; XREF: Obj_Index
000129F6 7000                       		moveq	#0,d0
000129F8 1028 0024                  		move.b	$24(a0),d0
000129FC 323B 0000                  		move.w	Obj16_Index(pc,d0.w),d1
00012A00 4EFB 1000                  		jmp	Obj16_Index(pc,d1.w)
00012A04                            ; ===========================================================================
00012A04 0000                       Obj16_Index:	dc.w Obj16_Main-Obj16_Index
00012A06 0000                       		dc.w Obj16_Move-Obj16_Index
00012A08 0000                       		dc.w Obj16_Wait-Obj16_Index
00012A0A                            ; ===========================================================================
00012A0A                            
00012A0A                            Obj16_Main:				; XREF: Obj16_Index
00012A0A 5428 0024                  		addq.b	#2,$24(a0)
00012A0E 217C 0000 0000 0004        		move.l	#Map_obj16,4(a0)
00012A16 317C 03CC 0002             		move.w	#$3CC,2(a0)
00012A1C 0028 0004 0001             		ori.b	#4,1(a0)
00012A22 117C 0004 0018             		move.b	#4,$18(a0)
00012A28 1168 0028 001C             		move.b	$28(a0),$1C(a0)
00012A2E 117C 0014 0019             		move.b	#$14,$19(a0)
00012A34 317C 003C 0030             		move.w	#60,$30(a0)
00012A3A                            
00012A3A                            Obj16_Move:				; XREF: Obj16_Index
00012A3A 43F9 0000 0000             		lea	(Ani_obj16).l,a1
00012A40 6100 87B4                  		bsr.w	AnimateSprite
00012A44 7000                       		moveq	#0,d0
00012A46 1028 001A                  		move.b	$1A(a0),d0	; move frame number to d0
00012A4A 117B 0000 0020             		move.b	Obj16_Data(pc,d0.w),$20(a0) ; load collision response (based on	d0)
00012A50 6000 D754                  		bra.w	MarkObjGone
00012A54                            ; ===========================================================================
00012A54 9B9C 9D9E 9FA0             Obj16_Data:	dc.b $9B, $9C, $9D, $9E, $9F, $A0
00012A5A                            ; ===========================================================================
00012A5A                            
00012A5A                            Obj16_Wait:				; XREF: Obj16_Index
00012A5A 5368 0030                  		subq.w	#1,$30(a0)
00012A5E 6A00                       		bpl.s	Obj16_ChkDel
00012A60 317C 003C 0030             		move.w	#60,$30(a0)
00012A66 5528 0024                  		subq.b	#2,$24(a0)	; run "Obj16_Move" subroutine
00012A6A 0868 0000 001C             		bchg	#0,$1C(a0)	; reverse animation
00012A70                            
00012A70                            Obj16_ChkDel:
00012A70 6000 D734                  		bra.w	MarkObjGone
00012A74                            ; ===========================================================================
00012A74                            Ani_obj16:
00012A74                            	include "_anim\obj16.asm"
00012A74                            ; ---------------------------------------------------------------------------
00012A74                            ; Animation script - harpoon (LZ)
00012A74                            ; ---------------------------------------------------------------------------
00012A74 0000                       		dc.w byte_11F8A-Ani_obj16
00012A76 0000                       		dc.w byte_11F8E-Ani_obj16
00012A78 0000                       		dc.w byte_11F92-Ani_obj16
00012A7A 0000                       		dc.w byte_11F96-Ani_obj16
00012A7C 0301 02FC                  byte_11F8A:	dc.b 3,	1, 2, $FC
00012A80 0301 00FC                  byte_11F8E:	dc.b 3,	1, 0, $FC
00012A84 0304 05FC                  byte_11F92:	dc.b 3,	4, 5, $FC
00012A88 0304 03FC                  byte_11F96:	dc.b 3,	4, 3, $FC
00012A8C                            		even
00012A8C                            		even
00012A8C                            
00012A8C                            ; ---------------------------------------------------------------------------
00012A8C                            ; Sprite mappings - harpoon (LZ)
00012A8C                            ; ---------------------------------------------------------------------------
00012A8C                            Map_obj16:
00012A8C                            	include "_maps\obj16.asm"
00012A8C                            ; ---------------------------------------------------------------------------
00012A8C                            ; Sprite mappings - harpoon (LZ)
00012A8C                            ; ---------------------------------------------------------------------------
00012A8C 0000 0000                  		dc.w byte_11FA6-Map_obj16, byte_11FAC-Map_obj16
00012A90 0000 0000                  		dc.w byte_11FB2-Map_obj16, byte_11FBD-Map_obj16
00012A94 0000 0000                  		dc.w byte_11FC3-Map_obj16, byte_11FC9-Map_obj16
00012A98 01                         byte_11FA6:	dc.b 1
00012A99 FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8
00012A9E 01                         byte_11FAC:	dc.b 1
00012A9F FC0C 0002 F8               		dc.b $FC, $C, 0, 2, $F8
00012AA4 02                         byte_11FB2:	dc.b 2
00012AA5 FC08 0006 F8               		dc.b $FC, 8, 0,	6, $F8
00012AAA FC08 0003 10               		dc.b $FC, 8, 0,	3, $10
00012AAF 01                         byte_11FBD:	dc.b 1
00012AB0 F801 0009 FC               		dc.b $F8, 1, 0,	9, $FC
00012AB5 01                         byte_11FC3:	dc.b 1
00012AB6 E803 000B FC               		dc.b $E8, 3, 0,	$B, $FC
00012ABB 02                         byte_11FC9:	dc.b 2
00012ABC D802 000B FC               		dc.b $D8, 2, 0,	$B, $FC
00012AC1 F002 000F FC               		dc.b $F0, 2, 0,	$F, $FC
00012AC6                            		even
00012AC6                            		even
00012AC6                            
00012AC6                            ; ===========================================================================
00012AC6                            ; ---------------------------------------------------------------------------
00012AC6                            ; Object 61 - blocks (LZ)
00012AC6                            ; ---------------------------------------------------------------------------
00012AC6                            
00012AC6                            Obj61:					; XREF: Obj_Index
00012AC6 7000                       		moveq	#0,d0
00012AC8 1028 0024                  		move.b	$24(a0),d0
00012ACC 323B 0000                  		move.w	Obj61_Index(pc,d0.w),d1
00012AD0 4EFB 1000                  		jmp	Obj61_Index(pc,d1.w)
00012AD4                            ; ===========================================================================
00012AD4 0000                       Obj61_Index:	dc.w Obj61_Main-Obj61_Index
00012AD6 0000                       		dc.w Obj61_Action-Obj61_Index
00012AD8                            
00012AD8 1010                       Obj61_Var:	dc.b $10, $10		; width, height
00012ADA 200C                       		dc.b $20, $C
00012ADC 1010                       		dc.b $10, $10
00012ADE 1010                       		dc.b $10, $10
00012AE0                            ; ===========================================================================
00012AE0                            
00012AE0                            Obj61_Main:				; XREF: Obj61_Index
00012AE0 5428 0024                  		addq.b	#2,$24(a0)
00012AE4 217C 0000 0000 0004        		move.l	#Map_obj61,4(a0)
00012AEC 317C 43E6 0002             		move.w	#$43E6,2(a0)
00012AF2 117C 0004 0001             		move.b	#4,1(a0)
00012AF8 117C 0003 0018             		move.b	#3,$18(a0)
00012AFE 7000                       		moveq	#0,d0
00012B00 1028 0028                  		move.b	$28(a0),d0
00012B04 E648                       		lsr.w	#3,d0
00012B06 0240 000E                  		andi.w	#$E,d0
00012B0A 45FB 00CC                  		lea	Obj61_Var(pc,d0.w),a2
00012B0E 115A 0019                  		move.b	(a2)+,$19(a0)
00012B12 1152 0016                  		move.b	(a2),$16(a0)
00012B16 E248                       		lsr.w	#1,d0
00012B18 1140 001A                  		move.b	d0,$1A(a0)
00012B1C 3168 0008 0034             		move.w	8(a0),$34(a0)
00012B22 3168 000C 0030             		move.w	$C(a0),$30(a0)
00012B28 1028 0028                  		move.b	$28(a0),d0
00012B2C 0200 000F                  		andi.b	#$F,d0
00012B30 6700                       		beq.s	Obj61_Action
00012B32 0C00 0007                  		cmpi.b	#7,d0
00012B36 6700                       		beq.s	Obj61_Action
00012B38 117C 0001 0038             		move.b	#1,$38(a0)
00012B3E                            
00012B3E                            Obj61_Action:				; XREF: Obj61_Index
00012B3E 3F28 0008                  		move.w	8(a0),-(sp)
00012B42 7000                       		moveq	#0,d0
00012B44 1028 0028                  		move.b	$28(a0),d0
00012B48 0240 000F                  		andi.w	#$F,d0
00012B4C D040                       		add.w	d0,d0
00012B4E 323B 0000                  		move.w	Obj61_TypeIndex(pc,d0.w),d1
00012B52 4EBB 1000                  		jsr	Obj61_TypeIndex(pc,d1.w)
00012B56 381F                       		move.w	(sp)+,d4
00012B58 4A28 0001                  		tst.b	1(a0)
00012B5C 6A00                       		bpl.s	Obj61_ChkDel
00012B5E 7200                       		moveq	#0,d1
00012B60 1228 0019                  		move.b	$19(a0),d1
00012B64 0641 000B                  		addi.w	#$B,d1
00012B68 7400                       		moveq	#0,d2
00012B6A 1428 0016                  		move.b	$16(a0),d2
00012B6E 3602                       		move.w	d2,d3
00012B70 5243                       		addq.w	#1,d3
00012B72 6100 D95A                  		bsr.w	SolidObject
00012B76 1144 003F                  		move.b	d4,$3F(a0)
00012B7A 6100 0000                  		bsr.w	loc_12180
00012B7E                            
00012B7E                            Obj61_ChkDel:
00012B7E 3028 0034                  		move.w	$34(a0),d0
00012B82 0240 FF80                  		andi.w	#$FF80,d0
00012B86 3238 F700                  		move.w	($FFFFF700).w,d1
00012B8A 0441 0080                  		subi.w	#$80,d1
00012B8E 0241 FF80                  		andi.w	#$FF80,d1
00012B92 9041                       		sub.w	d1,d0
00012B94 0C40 0280                  		cmpi.w	#$280,d0
00012B98 6200 B586                  		bhi.w	DeleteObject
00012B9C 6000 B546                  		bra.w	DisplaySprite
00012BA0                            ; ===========================================================================
00012BA0 0000 0000                  Obj61_TypeIndex:dc.w Obj61_Type00-Obj61_TypeIndex, Obj61_Type01-Obj61_TypeIndex
00012BA4 0000 0000                  		dc.w Obj61_Type02-Obj61_TypeIndex, Obj61_Type01-Obj61_TypeIndex
00012BA8 0000 0000                  		dc.w Obj61_Type04-Obj61_TypeIndex, Obj61_Type05-Obj61_TypeIndex
00012BAC 0000 0000                  		dc.w Obj61_Type02-Obj61_TypeIndex, Obj61_Type07-Obj61_TypeIndex
00012BB0                            ; ===========================================================================
00012BB0                            
00012BB0                            Obj61_Type00:				; XREF: Obj61_TypeIndex
00012BB0 4E75                       		rts	
00012BB2                            ; ===========================================================================
00012BB2                            
00012BB2                            Obj61_Type01:				; XREF: Obj61_TypeIndex
00012BB2 4A68 0036                  		tst.w	$36(a0)		; is Sonic standing on the object?
00012BB6 6600                       		bne.s	loc_120D6	; if yes, branch
00012BB8 0828 0003 0022             		btst	#3,$22(a0)
00012BBE 6700                       		beq.s	locret_120D4
00012BC0 317C 001E 0036             		move.w	#30,$36(a0)	; wait for � second
00012BC6                            
00012BC6                            locret_120D4:
00012BC6 4E75                       		rts	
00012BC8                            ; ===========================================================================
00012BC8                            
00012BC8                            loc_120D6:
00012BC8 5368 0036                  		subq.w	#1,$36(a0)	; subtract 1 from waiting time
00012BCC 66F8                       		bne.s	locret_120D4	; if time remains, branch
00012BCE 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
00012BD2 4228 0038                  		clr.b	$38(a0)
00012BD6 4E75                       		rts	
00012BD8                            ; ===========================================================================
00012BD8                            
00012BD8                            Obj61_Type02:				; XREF: Obj61_TypeIndex
00012BD8 6100 B4E4                  		bsr.w	SpeedToPos
00012BDC 5068 0012                  		addq.w	#8,$12(a0)	; make object fall
00012BE0 6100 0000                  		bsr.w	ObjHitFloor
00012BE4 4A41                       		tst.w	d1
00012BE6 6A00 0000                  		bpl.w	locret_12106
00012BEA 5241                       		addq.w	#1,d1
00012BEC D368 000C                  		add.w	d1,$C(a0)
00012BF0 4268 0012                  		clr.w	$12(a0)		; stop when it touches the floor
00012BF4 4228 0028                  		clr.b	$28(a0)		; set type to 00 (non-moving type)
00012BF8                            
00012BF8                            locret_12106:
00012BF8 4E75                       		rts	
00012BFA                            ; ===========================================================================
00012BFA                            
00012BFA                            Obj61_Type04:				; XREF: Obj61_TypeIndex
00012BFA 6100 B4C2                  		bsr.w	SpeedToPos
00012BFE 5168 0012                  		subq.w	#8,$12(a0)	; make object rise
00012C02 6100 0000                  		bsr.w	ObjHitCeiling
00012C06 4A41                       		tst.w	d1
00012C08 6A00 0000                  		bpl.w	locret_12126
00012C0C 9368 000C                  		sub.w	d1,$C(a0)
00012C10 4268 0012                  		clr.w	$12(a0)		; stop when it touches the ceiling
00012C14 4228 0028                  		clr.b	$28(a0)		; set type to 00 (non-moving type)
00012C18                            
00012C18                            locret_12126:
00012C18 4E75                       		rts	
00012C1A                            ; ===========================================================================
00012C1A                            
00012C1A                            Obj61_Type05:				; XREF: Obj61_TypeIndex
00012C1A 0C28 0001 003F             		cmpi.b	#1,$3F(a0)	; is Sonic touching the	object?
00012C20 6600                       		bne.s	locret_12138	; if not, branch
00012C22 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
00012C26 4228 0038                  		clr.b	$38(a0)
00012C2A                            
00012C2A                            locret_12138:
00012C2A 4E75                       		rts	
00012C2C                            ; ===========================================================================
00012C2C                            
00012C2C                            Obj61_Type07:				; XREF: Obj61_TypeIndex
00012C2C 3038 F646                  		move.w	($FFFFF646).w,d0
00012C30 9068 000C                  		sub.w	$C(a0),d0
00012C34 6700                       		beq.s	locret_1217E
00012C36 6400                       		bcc.s	loc_12162
00012C38 0C40 FFFE                  		cmpi.w	#-2,d0
00012C3C 6C00                       		bge.s	loc_1214E
00012C3E 70FE                       		moveq	#-2,d0
00012C40                            
00012C40                            loc_1214E:
00012C40 D168 000C                  		add.w	d0,$C(a0)	; make the block rise with water level
00012C44 6100 0000                  		bsr.w	ObjHitCeiling
00012C48 4A41                       		tst.w	d1
00012C4A 6A00 0000                  		bpl.w	locret_12160
00012C4E 9368 000C                  		sub.w	d1,$C(a0)
00012C52                            
00012C52                            locret_12160:
00012C52 4E75                       		rts	
00012C54                            ; ===========================================================================
00012C54                            
00012C54                            loc_12162:				; XREF: Obj61_Type07
00012C54 0C40 0002                  		cmpi.w	#2,d0
00012C58 6F00                       		ble.s	loc_1216A
00012C5A 7002                       		moveq	#2,d0
00012C5C                            
00012C5C                            loc_1216A:
00012C5C D168 000C                  		add.w	d0,$C(a0)	; make the block sink with water level
00012C60 6100 0000                  		bsr.w	ObjHitFloor
00012C64 4A41                       		tst.w	d1
00012C66 6A00 0000                  		bpl.w	locret_1217E
00012C6A 5241                       		addq.w	#1,d1
00012C6C D368 000C                  		add.w	d1,$C(a0)
00012C70                            
00012C70                            locret_1217E:
00012C70 4E75                       		rts	
00012C72                            ; ===========================================================================
00012C72                            
00012C72                            loc_12180:				; XREF: Obj61_Action
00012C72 4A28 0038                  		tst.b	$38(a0)
00012C76 6700                       		beq.s	locret_121C0
00012C78 0828 0003 0022             		btst	#3,$22(a0)
00012C7E 6600                       		bne.s	loc_1219A
00012C80 4A28 003E                  		tst.b	$3E(a0)
00012C84 6700                       		beq.s	locret_121C0
00012C86 5928 003E                  		subq.b	#4,$3E(a0)
00012C8A 6000                       		bra.s	loc_121A6
00012C8C                            ; ===========================================================================
00012C8C                            
00012C8C                            loc_1219A:
00012C8C 0C28 0040 003E             		cmpi.b	#$40,$3E(a0)
00012C92 6700                       		beq.s	locret_121C0
00012C94 5828 003E                  		addq.b	#4,$3E(a0)
00012C98                            
00012C98                            loc_121A6:
00012C98 1028 003E                  		move.b	$3E(a0),d0
00012C9C 4EB9 0000 33DA             		jsr	(CalcSine).l
00012CA2 323C 0400                  		move.w	#$400,d1
00012CA6 C1C1                       		muls.w	d1,d0
00012CA8 4840                       		swap	d0
00012CAA D068 0030                  		add.w	$30(a0),d0
00012CAE 3140 000C                  		move.w	d0,$C(a0)
00012CB2                            
00012CB2                            locret_121C0:
00012CB2 4E75                       		rts	
00012CB4                            ; ===========================================================================
00012CB4                            ; ---------------------------------------------------------------------------
00012CB4                            ; Sprite mappings - blocks (LZ)
00012CB4                            ; ---------------------------------------------------------------------------
00012CB4                            Map_obj61:
00012CB4                            	include "_maps\obj61.asm"
00012CB4                            ; ---------------------------------------------------------------------------
00012CB4                            ; Sprite mappings - blocks (LZ)
00012CB4                            ; ---------------------------------------------------------------------------
00012CB4 0000 0000                  		dc.w byte_121CA-Map_obj61, byte_121D0-Map_obj61
00012CB8 0000 0000                  		dc.w byte_121DB-Map_obj61, byte_121E1-Map_obj61
00012CBC 01                         byte_121CA:	dc.b 1
00012CBD F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
00012CC2 02                         byte_121D0:	dc.b 2
00012CC3 F40E 0069 E0               		dc.b $F4, $E, 0, $69, $E0
00012CC8 F40E 0075 00               		dc.b $F4, $E, 0, $75, 0
00012CCD 01                         byte_121DB:	dc.b 1
00012CCE F00F 011A F0               		dc.b $F0, $F, 1, $1A, $F0
00012CD3 01                         byte_121E1:	dc.b 1
00012CD4 F00F FDFA F0               		dc.b $F0, $F, $FD, $FA,	$F0
00012CDA 00                         		even
00012CDA 00                         		even
00012CDA                            
00012CDA                            ; ===========================================================================
00012CDA                            ; ---------------------------------------------------------------------------
00012CDA                            ; Object 62 - gargoyle head (LZ)
00012CDA                            ; ---------------------------------------------------------------------------
00012CDA                            
00012CDA                            Obj62:					; XREF: Obj_Index
00012CDA 7000                       		moveq	#0,d0
00012CDC 1028 0024                  		move.b	$24(a0),d0
00012CE0 323B 0000                  		move.w	Obj62_Index(pc,d0.w),d1
00012CE4 4EBB 1000                  		jsr	Obj62_Index(pc,d1.w)
00012CE8 6000 D4BC                  		bra.w	MarkObjGone
00012CEC                            ; ===========================================================================
00012CEC 0000                       Obj62_Index:	dc.w Obj62_Main-Obj62_Index
00012CEE 0000                       		dc.w Obj62_MakeFire-Obj62_Index
00012CF0 0000                       		dc.w Obj62_FireBall-Obj62_Index
00012CF2 0000                       		dc.w Obj62_AniFire-Obj62_Index
00012CF4                            
00012CF4 1E3C 5A78 96B4 D2F0        Obj62_SpitRate:	dc.b 30, 60, 90, 120, 150, 180,	210, 240
00012CFC                            ; ===========================================================================
00012CFC                            
00012CFC                            Obj62_Main:				; XREF: Obj62_Index
00012CFC 5428 0024                  		addq.b	#2,$24(a0)
00012D00 217C 0000 0000 0004        		move.l	#Map_obj62,4(a0)
00012D08 317C 42E9 0002             		move.w	#$42E9,2(a0)
00012D0E 0028 0004 0001             		ori.b	#4,1(a0)
00012D14 117C 0003 0018             		move.b	#3,$18(a0)
00012D1A 117C 0010 0019             		move.b	#$10,$19(a0)
00012D20 1028 0028                  		move.b	$28(a0),d0	; get object type
00012D24 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00012D28 117B 00CA 001F             		move.b	Obj62_SpitRate(pc,d0.w),$1F(a0)	; set fireball spit rate
00012D2E 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
00012D34 0228 000F 0028             		andi.b	#$F,$28(a0)
00012D3A                            
00012D3A                            Obj62_MakeFire:				; XREF: Obj62_Index
00012D3A 5328 001E                  		subq.b	#1,$1E(a0)
00012D3E 6600                       		bne.s	Obj62_NoFire
00012D40 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
00012D46 6100 B618                  		bsr.w	ChkObjOnScreen
00012D4A 6600                       		bne.s	Obj62_NoFire
00012D4C 6100 B82C                  		bsr.w	SingleObjLoad
00012D50 6600                       		bne.s	Obj62_NoFire
00012D52 12BC 0062                  		move.b	#$62,0(a1)	; load fireball	object
00012D56 5829 0024                  		addq.b	#4,$24(a1)
00012D5A 3368 0008 0008             		move.w	8(a0),8(a1)
00012D60 3368 000C 000C             		move.w	$C(a0),$C(a1)
00012D66 1368 0001 0001             		move.b	1(a0),1(a1)
00012D6C 1368 0022 0022             		move.b	$22(a0),$22(a1)
00012D72                            
00012D72                            Obj62_NoFire:
00012D72 4E75                       		rts	
00012D74                            ; ===========================================================================
00012D74                            
00012D74                            Obj62_FireBall:				; XREF: Obj62_Index
00012D74 5428 0024                  		addq.b	#2,$24(a0)
00012D78 117C 0008 0016             		move.b	#8,$16(a0)
00012D7E 117C 0008 0017             		move.b	#8,$17(a0)
00012D84 217C 0000 0000 0004        		move.l	#Map_obj62,4(a0)
00012D8C 317C 02E9 0002             		move.w	#$2E9,2(a0)
00012D92 0028 0004 0001             		ori.b	#4,1(a0)
00012D98 117C 0004 0018             		move.b	#4,$18(a0)
00012D9E 117C 0098 0020             		move.b	#$98,$20(a0)
00012DA4 117C 0008 0019             		move.b	#8,$19(a0)
00012DAA 117C 0002 001A             		move.b	#2,$1A(a0)
00012DB0 5068 000C                  		addq.w	#8,$C(a0)
00012DB4 317C 0200 0010             		move.w	#$200,$10(a0)
00012DBA 0828 0000 0022             		btst	#0,$22(a0)
00012DC0 6600                       		bne.s	Obj62_Sound
00012DC2 4468 0010                  		neg.w	$10(a0)
00012DC6                            
00012DC6                            Obj62_Sound:
00012DC6 303C 00AE                  		move.w	#$AE,d0
00012DCA 4EB9 0000 147C             		jsr	(PlaySound_Special).l ;	play lava ball sound
00012DD0                            
00012DD0                            Obj62_AniFire:				; XREF: Obj62_Index
00012DD0 1038 FE05                  		move.b	($FFFFFE05).w,d0
00012DD4 0200 0007                  		andi.b	#7,d0
00012DD8 6600                       		bne.s	Obj62_StopFire
00012DDA 0868 0000 001A             		bchg	#0,$1A(a0)	; switch between frame 01 and 02
00012DE0                            
00012DE0                            Obj62_StopFire:
00012DE0 6100 B2DC                  		bsr.w	SpeedToPos
00012DE4 0828 0000 0022             		btst	#0,$22(a0)
00012DEA 6600                       		bne.s	Obj62_StopFire2
00012DEC 76F8                       		moveq	#-8,d3
00012DEE 6100 0000                  		bsr.w	ObjHitWallLeft
00012DF2 4A41                       		tst.w	d1
00012DF4 6B00 B32A                  		bmi.w	DeleteObject	; delete if the	fireball hits a	wall
00012DF8 4E75                       		rts	
00012DFA                            ; ===========================================================================
00012DFA                            
00012DFA                            Obj62_StopFire2:
00012DFA 7608                       		moveq	#8,d3
00012DFC 6100 0000                  		bsr.w	ObjHitWallRight
00012E00 4A41                       		tst.w	d1
00012E02 6B00 B31C                  		bmi.w	DeleteObject
00012E06 4E75                       		rts	
00012E08                            ; ===========================================================================
00012E08                            ; ---------------------------------------------------------------------------
00012E08                            ; Sprite mappings - gargoyle head (LZ)
00012E08                            ; ---------------------------------------------------------------------------
00012E08                            Map_obj62:
00012E08                            	include "_maps\obj62.asm"
00012E08                            ; ---------------------------------------------------------------------------
00012E08                            ; Sprite mappings - gargoyle head (LZ)
00012E08                            ; ---------------------------------------------------------------------------
00012E08 0000 0000                  		dc.w byte_12320-Map_obj62, byte_12320-Map_obj62
00012E0C 0000 0000                  		dc.w byte_12330-Map_obj62, byte_12336-Map_obj62
00012E10 03                         byte_12320:	dc.b 3
00012E11 F004 0000 00               		dc.b $F0, 4, 0,	0, 0
00012E16 F80D 0002 F0               		dc.b $F8, $D, 0, 2, $F0
00012E1B 0808 000A F8               		dc.b 8,	8, 0, $A, $F8
00012E20 01                         byte_12330:	dc.b 1
00012E21 FC04 000D F8               		dc.b $FC, 4, 0,	$D, $F8
00012E26 01                         byte_12336:	dc.b 1
00012E27 FC04 000F F8               		dc.b $FC, 4, 0,	$F, $F8
00012E2C                            		even
00012E2C                            		even
00012E2C                            
00012E2C                            ; ===========================================================================
00012E2C                            ; ---------------------------------------------------------------------------
00012E2C                            ; Object 63 - platforms	on a conveyor belt (LZ)
00012E2C                            ; ---------------------------------------------------------------------------
00012E2C                            
00012E2C                            Obj63:					; XREF: Obj_Index
00012E2C 7000                       		moveq	#0,d0
00012E2E 1028 0024                  		move.b	$24(a0),d0
00012E32 323B 0000                  		move.w	Obj63_Index(pc,d0.w),d1
00012E36 4EBB 1000                  		jsr	Obj63_Index(pc,d1.w)
00012E3A 3028 0030                  		move.w	$30(a0),d0
00012E3E 0240 FF80                  		andi.w	#$FF80,d0
00012E42 3238 F700                  		move.w	($FFFFF700).w,d1
00012E46 0441 0080                  		subi.w	#$80,d1
00012E4A 0241 FF80                  		andi.w	#$FF80,d1
00012E4E 9041                       		sub.w	d1,d0
00012E50 0C40 0280                  		cmpi.w	#$280,d0
00012E54 6200                       		bhi.s	loc_1236A
00012E56                            
00012E56                            Obj63_Display:				; XREF: loc_1236A
00012E56 6000 B28C                  		bra.w	DisplaySprite
00012E5A                            ; ===========================================================================
00012E5A                            
00012E5A                            loc_1236A:				; XREF: Obj63
00012E5A 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w
00012E60 6600                       		bne.s	loc_12378
00012E62 0C40 FF80                  		cmpi.w	#-$80,d0
00012E66 64EE                       		bcc.s	Obj63_Display
00012E68                            
00012E68                            loc_12378:
00012E68 1028 002F                  		move.b	$2F(a0),d0
00012E6C 6A00 B2B2                  		bpl.w	DeleteObject
00012E70 0240 007F                  		andi.w	#$7F,d0
00012E74 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00012E78 08B2 0000 0000             		bclr	#0,(a2,d0.w)
00012E7E 6000 B2A0                  		bra.w	DeleteObject
00012E82                            ; ===========================================================================
00012E82 0000                       Obj63_Index:	dc.w Obj63_Main-Obj63_Index
00012E84 0000                       		dc.w loc_124B2-Obj63_Index
00012E86 0000                       		dc.w loc_124C2-Obj63_Index
00012E88 0000                       		dc.w loc_124DE-Obj63_Index
00012E8A                            ; ===========================================================================
00012E8A                            
00012E8A                            Obj63_Main:				; XREF: Obj63_Index
00012E8A 1028 0028                  		move.b	$28(a0),d0
00012E8E 6B00 0000                  		bmi.w	loc_12460
00012E92 5428 0024                  		addq.b	#2,$24(a0)
00012E96 217C 0000 0000 0004        		move.l	#Map_obj63,4(a0)
00012E9E 317C 43F6 0002             		move.w	#$43F6,2(a0)
00012EA4 0028 0004 0001             		ori.b	#4,1(a0)
00012EAA 117C 0010 0019             		move.b	#$10,$19(a0)
00012EB0 117C 0004 0018             		move.b	#4,$18(a0)
00012EB6 0C28 007F 0028             		cmpi.b	#$7F,$28(a0)
00012EBC 6600                       		bne.s	loc_123E2
00012EBE 5828 0024                  		addq.b	#4,$24(a0)
00012EC2 317C 03F6 0002             		move.w	#$3F6,2(a0)
00012EC8 117C 0001 0018             		move.b	#1,$18(a0)
00012ECE 6000 0000                  		bra.w	loc_124DE
00012ED2                            ; ===========================================================================
00012ED2                            
00012ED2                            loc_123E2:
00012ED2 117C 0004 001A             		move.b	#4,$1A(a0)
00012ED8 7000                       		moveq	#0,d0
00012EDA 1028 0028                  		move.b	$28(a0),d0
00012EDE 3200                       		move.w	d0,d1
00012EE0 E648                       		lsr.w	#3,d0
00012EE2 0240 001E                  		andi.w	#$1E,d0
00012EE6 45FA 0000                  		lea	Obj63_Data(pc),a2
00012EEA D4F2 0000                  		adda.w	(a2,d0.w),a2
00012EEE 315A 0038                  		move.w	(a2)+,$38(a0)
00012EF2 315A 0030                  		move.w	(a2)+,$30(a0)
00012EF6 214A 003C                  		move.l	a2,$3C(a0)
00012EFA 0241 000F                  		andi.w	#$F,d1
00012EFE E549                       		lsl.w	#2,d1
00012F00 1141 0038                  		move.b	d1,$38(a0)
00012F04 117C 0004 003A             		move.b	#4,$3A(a0)
00012F0A 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00012F0E 6700                       		beq.s	loc_1244C
00012F10 117C 0001 003B             		move.b	#1,$3B(a0)
00012F16 4428 003A                  		neg.b	$3A(a0)
00012F1A 7200                       		moveq	#0,d1
00012F1C 1228 0038                  		move.b	$38(a0),d1
00012F20 D228 003A                  		add.b	$3A(a0),d1
00012F24 B228 0039                  		cmp.b	$39(a0),d1
00012F28 6500                       		bcs.s	loc_12448
00012F2A 1001                       		move.b	d1,d0
00012F2C 7200                       		moveq	#0,d1
00012F2E 4A00                       		tst.b	d0
00012F30 6A00                       		bpl.s	loc_12448
00012F32 1228 0039                  		move.b	$39(a0),d1
00012F36 5901                       		subq.b	#4,d1
00012F38                            
00012F38                            loc_12448:
00012F38 1141 0038                  		move.b	d1,$38(a0)
00012F3C                            
00012F3C                            loc_1244C:
00012F3C 3172 1000 0034             		move.w	(a2,d1.w),$34(a0)
00012F42 3172 1002 0036             		move.w	2(a2,d1.w),$36(a0)
00012F48 6100 0000                  		bsr.w	Obj63_ChangeDir
00012F4C 6000 0000                  		bra.w	loc_124B2
00012F50                            ; ===========================================================================
00012F50                            
00012F50                            loc_12460:				; XREF: Obj63_Main
00012F50 1140 002F                  		move.b	d0,$2F(a0)
00012F54 0240 007F                  		andi.w	#$7F,d0
00012F58 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00012F5C 08F2 0000 0000             		bset	#0,(a2,d0.w)
00012F62 6600 B1BC                  		bne.w	DeleteObject
00012F66 D040                       		add.w	d0,d0
00012F68 0240 001E                  		andi.w	#$1E,d0
00012F6C 0640 0070                  		addi.w	#$70,d0
00012F70 45F9 0000 0000             		lea	(ObjPos_Index).l,a2
00012F76 D4F2 0000                  		adda.w	(a2,d0.w),a2
00012F7A 321A                       		move.w	(a2)+,d1
00012F7C 2248                       		movea.l	a0,a1
00012F7E 6000                       		bra.s	Obj63_MakePtfms
00012F80                            ; ===========================================================================
00012F80                            
00012F80                            Obj63_Loop:
00012F80 6100 B5F8                  		bsr.w	SingleObjLoad
00012F84 6600                       		bne.s	loc_124AA
00012F86                            
00012F86                            Obj63_MakePtfms:			; XREF: loc_12460
00012F86 12BC 0063                  		move.b	#$63,0(a1)
00012F8A 335A 0008                  		move.w	(a2)+,8(a1)
00012F8E 335A 000C                  		move.w	(a2)+,$C(a1)
00012F92 301A                       		move.w	(a2)+,d0
00012F94 1340 0028                  		move.b	d0,$28(a1)
00012F98                            
00012F98                            loc_124AA:
00012F98 51C9 FFE6                  		dbf	d1,Obj63_Loop
00012F9C                            
00012F9C 588F                       		addq.l	#4,sp
00012F9E 4E75                       		rts	
00012FA0                            ; ===========================================================================
00012FA0                            
00012FA0                            loc_124B2:				; XREF: Obj63_Index
00012FA0 7200                       		moveq	#0,d1
00012FA2 1228 0019                  		move.b	$19(a0),d1
00012FA6 4EB9 0000 7ED6             		jsr	(PlatformObject).l
00012FAC 6000 0000                  		bra.w	sub_12502
00012FB0                            ; ===========================================================================
00012FB0                            
00012FB0                            loc_124C2:				; XREF: Obj63_Index
00012FB0 7200                       		moveq	#0,d1
00012FB2 1228 0019                  		move.b	$19(a0),d1
00012FB6 4EB9 0000 804A             		jsr	(ExitPlatform).l
00012FBC 3F28 0008                  		move.w	8(a0),-(sp)
00012FC0 6100 0000                  		bsr.w	sub_12502
00012FC4 341F                       		move.w	(sp)+,d2
00012FC6 4EF9 0000 85B4             		jmp	(MvSonicOnPtfm2).l
00012FCC                            ; ===========================================================================
00012FCC                            
00012FCC                            loc_124DE:				; XREF: Obj63_Index
00012FCC 3038 FE04                  		move.w	($FFFFFE04).w,d0
00012FD0 0240 0003                  		andi.w	#3,d0
00012FD4 6600                       		bne.s	loc_124FC
00012FD6 7201                       		moveq	#1,d1
00012FD8 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00012FDC 6700                       		beq.s	loc_124F2
00012FDE 4401                       		neg.b	d1
00012FE0                            
00012FE0                            loc_124F2:
00012FE0 D328 001A                  		add.b	d1,$1A(a0)
00012FE4 0228 0003 001A             		andi.b	#3,$1A(a0)
00012FEA                            
00012FEA                            loc_124FC:
00012FEA 588F                       		addq.l	#4,sp
00012FEC 6000 D1B8                  		bra.w	MarkObjGone
00012FF0                            
00012FF0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00012FF0                            
00012FF0                            
00012FF0                            sub_12502:				; XREF: loc_124B2; loc_124C2
00012FF0 4A38 F7EE                  		tst.b	($FFFFF7EE).w
00012FF4 6700                       		beq.s	loc_12520
00012FF6 4A28 003B                  		tst.b	$3B(a0)
00012FFA 6600                       		bne.s	loc_12520
00012FFC 117C 0001 003B             		move.b	#1,$3B(a0)
00013002 11FC 0001 F7C0             		move.b	#1,($FFFFF7C0).w
00013008 4428 003A                  		neg.b	$3A(a0)
0001300C 6000                       		bra.s	loc_12534
0001300E                            ; ===========================================================================
0001300E                            
0001300E                            loc_12520:
0001300E 3028 0008                  		move.w	8(a0),d0
00013012 B068 0034                  		cmp.w	$34(a0),d0
00013016 6600                       		bne.s	loc_1256A
00013018 3028 000C                  		move.w	$C(a0),d0
0001301C B068 0036                  		cmp.w	$36(a0),d0
00013020 6600                       		bne.s	loc_1256A
00013022                            
00013022                            loc_12534:
00013022 7200                       		moveq	#0,d1
00013024 1228 0038                  		move.b	$38(a0),d1
00013028 D228 003A                  		add.b	$3A(a0),d1
0001302C B228 0039                  		cmp.b	$39(a0),d1
00013030 6500                       		bcs.s	loc_12552
00013032 1001                       		move.b	d1,d0
00013034 7200                       		moveq	#0,d1
00013036 4A00                       		tst.b	d0
00013038 6A00                       		bpl.s	loc_12552
0001303A 1228 0039                  		move.b	$39(a0),d1
0001303E 5901                       		subq.b	#4,d1
00013040                            
00013040                            loc_12552:
00013040 1141 0038                  		move.b	d1,$38(a0)
00013044 2268 003C                  		movea.l	$3C(a0),a1
00013048 3171 1000 0034             		move.w	(a1,d1.w),$34(a0)
0001304E 3171 1002 0036             		move.w	2(a1,d1.w),$36(a0)
00013054 6100 0000                  		bsr.w	Obj63_ChangeDir
00013058                            
00013058                            loc_1256A:
00013058 6100 B064                  		bsr.w	SpeedToPos
0001305C 4E75                       		rts	
0001305E                            ; End of function sub_12502
0001305E                            
0001305E                            
0001305E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001305E                            
0001305E                            
0001305E                            Obj63_ChangeDir:			; XREF: loc_123E2; sub_12502
0001305E 7000                       		moveq	#0,d0
00013060 343C FF00                  		move.w	#-$100,d2
00013064 3028 0008                  		move.w	8(a0),d0
00013068 9068 0034                  		sub.w	$34(a0),d0
0001306C 6400                       		bcc.s	loc_12584
0001306E 4440                       		neg.w	d0
00013070 4442                       		neg.w	d2
00013072                            
00013072                            loc_12584:
00013072 7200                       		moveq	#0,d1
00013074 363C FF00                  		move.w	#-$100,d3
00013078 3228 000C                  		move.w	$C(a0),d1
0001307C 9268 0036                  		sub.w	$36(a0),d1
00013080 6400                       		bcc.s	loc_12598
00013082 4441                       		neg.w	d1
00013084 4443                       		neg.w	d3
00013086                            
00013086                            loc_12598:
00013086 B240                       		cmp.w	d0,d1
00013088 6500                       		bcs.s	loc_125C2
0001308A 3028 0008                  		move.w	8(a0),d0
0001308E 9068 0034                  		sub.w	$34(a0),d0
00013092 6700                       		beq.s	loc_125AE
00013094 48C0                       		ext.l	d0
00013096 E180                       		asl.l	#8,d0
00013098 81C1                       		divs.w	d1,d0
0001309A 4440                       		neg.w	d0
0001309C                            
0001309C                            loc_125AE:
0001309C 3140 0010                  		move.w	d0,$10(a0)
000130A0 3143 0012                  		move.w	d3,$12(a0)
000130A4 4840                       		swap	d0
000130A6 3140 000A                  		move.w	d0,$A(a0)
000130AA 4268 000E                  		clr.w	$E(a0)
000130AE 4E75                       		rts	
000130B0                            ; ===========================================================================
000130B0                            
000130B0                            loc_125C2:				; XREF: Obj63_ChangeDir
000130B0 3228 000C                  		move.w	$C(a0),d1
000130B4 9268 0036                  		sub.w	$36(a0),d1
000130B8 6700                       		beq.s	loc_125D4
000130BA 48C1                       		ext.l	d1
000130BC E181                       		asl.l	#8,d1
000130BE 83C0                       		divs.w	d0,d1
000130C0 4441                       		neg.w	d1
000130C2                            
000130C2                            loc_125D4:
000130C2 3141 0012                  		move.w	d1,$12(a0)
000130C6 3142 0010                  		move.w	d2,$10(a0)
000130CA 4841                       		swap	d1
000130CC 3141 000E                  		move.w	d1,$E(a0)
000130D0 4268 000A                  		clr.w	$A(a0)
000130D4 4E75                       		rts	
000130D6                            ; End of function Obj63_ChangeDir
000130D6                            
000130D6                            ; ===========================================================================
000130D6 0000                       Obj63_Data:	dc.w word_125F4-Obj63_Data
000130D8 0000                       		dc.w word_12610-Obj63_Data
000130DA 0000                       		dc.w word_12628-Obj63_Data
000130DC 0000                       		dc.w word_1263C-Obj63_Data
000130DE 0000                       		dc.w word_12650-Obj63_Data
000130E0 0000                       		dc.w word_12668-Obj63_Data
000130E2 0018 1070 1078 021A 10BE+  word_125F4:	dc.w $18, $1070, $1078,	$21A, $10BE, $260, $10BE, $393
000130F2 108C 03C5 1022 0390 1022+  		dc.w $108C, $3C5, $1022, $390, $1022, $244
000130FE 0014 1280 127E 0280 12CE+  word_12610:	dc.w $14, $1280, $127E,	$280, $12CE, $2D0, $12CE, $46E
0001310E 1232 0420 1232 02CC        		dc.w $1232, $420, $1232, $2CC
00013116 0010 0D68 0D22 0482 0D22+  word_12628:	dc.w $10, $D68,	$D22, $482, $D22, $5DE,	$DAE, $5DE, $DAE, $482
0001312A 0010 0DA0 0D62 03A2 0DEE+  word_1263C:	dc.w $10, $DA0,	$D62, $3A2, $DEE, $3A2,	$DEE, $4DE, $D62, $4DE
0001313E 0014 0D00 0CAC 0242 0DDE+  word_12650:	dc.w $14, $D00,	$CAC, $242, $DDE, $242,	$DDE, $3DE, $C52, $3DE,	$C52, $29C
00013156 0010 1300 1252 020A 13DE+  word_12668:	dc.w $10, $1300, $1252,	$20A, $13DE, $20A, $13DE, $2BE,	$1252, $2BE
0001316A                            
0001316A                            ; ---------------------------------------------------------------------------
0001316A                            ; Sprite mappings - platforms on a conveyor belt (LZ)
0001316A                            ; ---------------------------------------------------------------------------
0001316A                            Map_obj63:
0001316A                            	include "_maps\obj63.asm"
0001316A                            ; ---------------------------------------------------------------------------
0001316A                            ; Sprite mappings - platforms on a conveyor belt (LZ)
0001316A                            ; ---------------------------------------------------------------------------
0001316A 0000 0000                  		dc.w byte_12686-Map_obj63, byte_1268C-Map_obj63
0001316E 0000 0000                  		dc.w byte_12692-Map_obj63, byte_12698-Map_obj63
00013172 0000                       		dc.w byte_1269E-Map_obj63
00013174 01                         byte_12686:	dc.b 1
00013175 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0001317A 01                         byte_1268C:	dc.b 1
0001317B F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
00013180 01                         byte_12692:	dc.b 1
00013181 F00F 0020 F0               		dc.b $F0, $F, 0, $20, $F0
00013186 01                         byte_12698:	dc.b 1
00013187 F00F 0030 F0               		dc.b $F0, $F, 0, $30, $F0
0001318C 01                         byte_1269E:	dc.b 1
0001318D F80D 0040 F0               		dc.b $F8, $D, 0, $40, $F0
00013192                            		even
00013192                            		even
00013192                            
00013192                            ; ===========================================================================
00013192                            ; ---------------------------------------------------------------------------
00013192                            ; Object 64 - bubbles (LZ)
00013192                            ; ---------------------------------------------------------------------------
00013192                            
00013192                            Obj64:					; XREF: Obj_Index
00013192 7000                       		moveq	#0,d0
00013194 1028 0024                  		move.b	$24(a0),d0
00013198 323B 0000                  		move.w	Obj64_Index(pc,d0.w),d1
0001319C 4EFB 1000                  		jmp	Obj64_Index(pc,d1.w)
000131A0                            ; ===========================================================================
000131A0 0000                       Obj64_Index:	dc.w Obj64_Main-Obj64_Index
000131A2 0000                       		dc.w Obj64_Animate-Obj64_Index
000131A4 0000                       		dc.w Obj64_ChkWater-Obj64_Index
000131A6 0000                       		dc.w Obj64_Display2-Obj64_Index
000131A8 0000                       		dc.w Obj64_Delete3-Obj64_Index
000131AA 0000                       		dc.w Obj64_BblMaker-Obj64_Index
000131AC                            ; ===========================================================================
000131AC                            
000131AC                            Obj64_Main:				; XREF: Obj64_Index
000131AC 5428 0024                  		addq.b	#2,$24(a0)
000131B0 217C 0000 0000 0004        		move.l	#Map_obj64,4(a0)
000131B8 317C 8348 0002             		move.w	#$8348,2(a0)
000131BE 117C 0084 0001             		move.b	#$84,1(a0)
000131C4 117C 0010 0019             		move.b	#$10,$19(a0)
000131CA 117C 0001 0018             		move.b	#1,$18(a0)
000131D0 1028 0028                  		move.b	$28(a0),d0	; get object type
000131D4 6A00                       		bpl.s	Obj64_Bubble	; if type is $0-$7F, branch
000131D6 5028 0024                  		addq.b	#8,$24(a0)
000131DA 0240 007F                  		andi.w	#$7F,d0		; read only last 7 bits	(deduct	$80)
000131DE 1140 0032                  		move.b	d0,$32(a0)
000131E2 1140 0033                  		move.b	d0,$33(a0)
000131E6 117C 0006 001C             		move.b	#6,$1C(a0)
000131EC 6000 0000                  		bra.w	Obj64_BblMaker
000131F0                            ; ===========================================================================
000131F0                            
000131F0                            Obj64_Bubble:				; XREF: Obj64_Main
000131F0 1140 001C                  		move.b	d0,$1C(a0)
000131F4 3168 0008 0030             		move.w	8(a0),$30(a0)
000131FA 317C FF78 0012             		move.w	#-$88,$12(a0)	; float	bubble upwards
00013200 4EB9 0000 33B4             		jsr	(RandomNumber).l
00013206 1140 0026                  		move.b	d0,$26(a0)
0001320A                            
0001320A                            Obj64_Animate:				; XREF: Obj64_Index
0001320A 43F9 0000 0000             		lea	(Ani_obj64).l,a1
00013210 4EB9 0000 B1F6             		jsr	AnimateSprite
00013216 0C28 0006 001A             		cmpi.b	#6,$1A(a0)
0001321C 6600                       		bne.s	Obj64_ChkWater
0001321E 117C 0001 002E             		move.b	#1,$2E(a0)
00013224                            
00013224                            Obj64_ChkWater:				; XREF: Obj64_Index
00013224 3038 F646                  		move.w	($FFFFF646).w,d0
00013228 B068 000C                  		cmp.w	$C(a0),d0	; is bubble underwater?
0001322C 6500                       		bcs.s	Obj64_Wobble	; if yes, branch
0001322E                            
0001322E                            Obj64_Burst:				; XREF: Obj64_Wobble
0001322E 117C 0006 0024             		move.b	#6,$24(a0)
00013234 5628 001C                  		addq.b	#3,$1C(a0)	; run "bursting" animation
00013238 6000 0000                  		bra.w	Obj64_Display2
0001323C                            ; ===========================================================================
0001323C                            
0001323C                            Obj64_Wobble:				; XREF: Obj64_ChkWater
0001323C 1028 0026                  		move.b	$26(a0),d0
00013240 5228 0026                  		addq.b	#1,$26(a0)
00013244 0240 007F                  		andi.w	#$7F,d0
00013248 43F9 0000 0000             		lea	(Obj0A_WobbleData).l,a1
0001324E 1031 0000                  		move.b	(a1,d0.w),d0
00013252 4880                       		ext.w	d0
00013254 D068 0030                  		add.w	$30(a0),d0
00013258 3140 0008                  		move.w	d0,8(a0)	; change bubble's horizontal position
0001325C 4A28 002E                  		tst.b	$2E(a0)
00013260 6700                       		beq.s	Obj64_Display
00013262 6100 0000                  		bsr.w	Obj64_ChkSonic	; has Sonic touched the	bubble?
00013266 6700                       		beq.s	Obj64_Display	; if not, branch
00013268                            
00013268 6100 0000                  		bsr.w	ResumeMusic	; cancel countdown music
0001326C 303C 00AD                  		move.w	#$AD,d0
00013270 4EB9 0000 147C             		jsr	(PlaySound_Special).l ;	play collecting	bubble sound
00013276 43F8 D000                  		lea	($FFFFD000).w,a1
0001327A 4269 0010                  		clr.w	$10(a1)
0001327E 4269 0012                  		clr.w	$12(a1)
00013282 4269 0014                  		clr.w	$14(a1)
00013286 137C 0015 001C             		move.b	#$15,$1C(a1)
0001328C 337C 0023 003E             		move.w	#$23,$3E(a1)
00013292 137C 0000 003C             		move.b	#0,$3C(a1)
00013298 08A9 0005 0022             		bclr	#5,$22(a1)
0001329E 08A9 0004 0022             		bclr	#4,$22(a1)
000132A4 0829 0002 0022             		btst	#2,$22(a1)
000132AA 6700 FF82                  		beq.w	Obj64_Burst
000132AE 08A9 0002 0022             		bclr	#2,$22(a1)
000132B4 137C 0013 0016             		move.b	#$13,$16(a1)
000132BA 137C 0009 0017             		move.b	#9,$17(a1)
000132C0 5B69 000C                  		subq.w	#5,$C(a1)
000132C4 6000 FF68                  		bra.w	Obj64_Burst
000132C8                            ; ===========================================================================
000132C8                            
000132C8                            Obj64_Display:				; XREF: Obj64_Wobble
000132C8 6100 ADF4                  		bsr.w	SpeedToPos
000132CC 4A28 0001                  		tst.b	1(a0)
000132D0 6A00                       		bpl.s	Obj64_Delete
000132D2 4EFA AE10                  		jmp	DisplaySprite
000132D6                            ; ===========================================================================
000132D6                            
000132D6                            Obj64_Delete:
000132D6 4EFA AE48                  		jmp	DeleteObject
000132DA                            ; ===========================================================================
000132DA                            
000132DA                            Obj64_Display2:				; XREF: Obj64_Index
000132DA 43F9 0000 0000             		lea	(Ani_obj64).l,a1
000132E0 4EB9 0000 B1F6             		jsr	AnimateSprite
000132E6 4A28 0001                  		tst.b	1(a0)
000132EA 6A00                       		bpl.s	Obj64_Delete2
000132EC 4EFA ADF6                  		jmp	DisplaySprite
000132F0                            ; ===========================================================================
000132F0                            
000132F0                            Obj64_Delete2:
000132F0 4EFA AE2E                  		jmp	DeleteObject
000132F4                            ; ===========================================================================
000132F4                            
000132F4                            Obj64_Delete3:				; XREF: Obj64_Index
000132F4 6000 AE2A                  		bra.w	DeleteObject
000132F8                            ; ===========================================================================
000132F8                            
000132F8                            Obj64_BblMaker:				; XREF: Obj64_Index
000132F8 4A68 0036                  		tst.w	$36(a0)
000132FC 6600                       		bne.s	loc_12874
000132FE 3038 F646                  		move.w	($FFFFF646).w,d0
00013302 B068 000C                  		cmp.w	$C(a0),d0	; is bubble maker underwater?
00013306 6400 0000                  		bcc.w	Obj64_ChkDel	; if not, branch
0001330A 4A28 0001                  		tst.b	1(a0)
0001330E 6A00 0000                  		bpl.w	Obj64_ChkDel
00013312 5368 0038                  		subq.w	#1,$38(a0)
00013316 6A00 0000                  		bpl.w	loc_12914
0001331A 317C 0001 0036             		move.w	#1,$36(a0)
00013320                            
00013320                            loc_1283A:
00013320 4EB9 0000 33B4             		jsr	(RandomNumber).l
00013326 3200                       		move.w	d0,d1
00013328 0240 0007                  		andi.w	#7,d0
0001332C 0C40 0006                  		cmpi.w	#6,d0
00013330 64EE                       		bcc.s	loc_1283A
00013332                            
00013332 1140 0034                  		move.b	d0,$34(a0)
00013336 0241 000C                  		andi.w	#$C,d1
0001333A 43F9 0000 0000             		lea	(Obj64_BblTypes).l,a1
00013340 D2C1                       		adda.w	d1,a1
00013342 2149 003C                  		move.l	a1,$3C(a0)
00013346 5328 0032                  		subq.b	#1,$32(a0)
0001334A 6A00                       		bpl.s	loc_12872
0001334C 1168 0033 0032             		move.b	$33(a0),$32(a0)
00013352 08E8 0007 0036             		bset	#7,$36(a0)
00013358                            
00013358                            loc_12872:
00013358 6000                       		bra.s	loc_1287C
0001335A                            ; ===========================================================================
0001335A                            
0001335A                            loc_12874:				; XREF: Obj64_BblMaker
0001335A 5368 0038                  		subq.w	#1,$38(a0)
0001335E 6A00 0000                  		bpl.w	loc_12914
00013362                            
00013362                            loc_1287C:
00013362 4EB9 0000 33B4             		jsr	(RandomNumber).l
00013368 0240 001F                  		andi.w	#$1F,d0
0001336C 3140 0038                  		move.w	d0,$38(a0)
00013370 6100 B208                  		bsr.w	SingleObjLoad
00013374 6600                       		bne.s	loc_128F8
00013376 12BC 0064                  		move.b	#$64,0(a1)	; load bubble object
0001337A 3368 0008 0008             		move.w	8(a0),8(a1)
00013380 4EB9 0000 33B4             		jsr	(RandomNumber).l
00013386 0240 000F                  		andi.w	#$F,d0
0001338A 5140                       		subq.w	#8,d0
0001338C D169 0008                  		add.w	d0,8(a1)
00013390 3368 000C 000C             		move.w	$C(a0),$C(a1)
00013396 7000                       		moveq	#0,d0
00013398 1028 0034                  		move.b	$34(a0),d0
0001339C 2468 003C                  		movea.l	$3C(a0),a2
000133A0 1372 0000 0028             		move.b	(a2,d0.w),$28(a1)
000133A6 0828 0007 0036             		btst	#7,$36(a0)
000133AC 6700                       		beq.s	loc_128F8
000133AE 4EB9 0000 33B4             		jsr	(RandomNumber).l
000133B4 0240 0003                  		andi.w	#3,d0
000133B8 6600                       		bne.s	loc_128E4
000133BA 08E8 0006 0036             		bset	#6,$36(a0)
000133C0 6600                       		bne.s	loc_128F8
000133C2 137C 0002 0028             		move.b	#2,$28(a1)
000133C8                            
000133C8                            loc_128E4:
000133C8 4A28 0034                  		tst.b	$34(a0)
000133CC 6600                       		bne.s	loc_128F8
000133CE 08E8 0006 0036             		bset	#6,$36(a0)
000133D4 6600                       		bne.s	loc_128F8
000133D6 137C 0002 0028             		move.b	#2,$28(a1)
000133DC                            
000133DC                            loc_128F8:
000133DC 5328 0034                  		subq.b	#1,$34(a0)
000133E0 6A00                       		bpl.s	loc_12914
000133E2 4EB9 0000 33B4             		jsr	(RandomNumber).l
000133E8 0240 007F                  		andi.w	#$7F,d0
000133EC 0640 0080                  		addi.w	#$80,d0
000133F0 D168 0038                  		add.w	d0,$38(a0)
000133F4 4268 0036                  		clr.w	$36(a0)
000133F8                            
000133F8                            loc_12914:
000133F8 43F9 0000 0000             		lea	(Ani_obj64).l,a1
000133FE 4EB9 0000 B1F6             		jsr	AnimateSprite
00013404                            
00013404                            Obj64_ChkDel:				; XREF: Obj64_BblMaker
00013404 3028 0008                  		move.w	8(a0),d0
00013408 0240 FF80                  		andi.w	#$FF80,d0
0001340C 3238 F700                  		move.w	($FFFFF700).w,d1
00013410 0441 0080                  		subi.w	#$80,d1
00013414 0241 FF80                  		andi.w	#$FF80,d1
00013418 9041                       		sub.w	d1,d0
0001341A 0C40 0280                  		cmpi.w	#$280,d0
0001341E 6200 AD00                  		bhi.w	DeleteObject
00013422 3038 F646                  		move.w	($FFFFF646).w,d0
00013426 B068 000C                  		cmp.w	$C(a0),d0
0001342A 6500 ACB8                  		bcs.w	DisplaySprite
0001342E 4E75                       		rts	
00013430                            ; ===========================================================================
00013430                            ; bubble production sequence
00013430                            
00013430                            ; 0 = small bubble, 1 =	large bubble
00013430                            
00013430 0001 0000 0000 0100 0000+  Obj64_BblTypes:	dc.b 0,	1, 0, 0, 0, 0, 1, 0, 0,	0, 0, 1, 0, 1, 0, 0, 1,	0
00013442                            
00013442                            ; ===========================================================================
00013442                            
00013442                            Obj64_ChkSonic:				; XREF: Obj64_Wobble
00013442 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00013446 6B00                       		bmi.s	loc_12998
00013448 43F8 D000                  		lea	($FFFFD000).w,a1
0001344C 3029 0008                  		move.w	8(a1),d0
00013450 3228 0008                  		move.w	8(a0),d1
00013454 0441 0010                  		subi.w	#$10,d1
00013458 B240                       		cmp.w	d0,d1
0001345A 6400                       		bcc.s	loc_12998
0001345C 0641 0020                  		addi.w	#$20,d1
00013460 B240                       		cmp.w	d0,d1
00013462 6500                       		bcs.s	loc_12998
00013464 3029 000C                  		move.w	$C(a1),d0
00013468 3228 000C                  		move.w	$C(a0),d1
0001346C B240                       		cmp.w	d0,d1
0001346E 6400                       		bcc.s	loc_12998
00013470 0641 0010                  		addi.w	#$10,d1
00013474 B240                       		cmp.w	d0,d1
00013476 6500                       		bcs.s	loc_12998
00013478 7001                       		moveq	#1,d0
0001347A 4E75                       		rts	
0001347C                            ; ===========================================================================
0001347C                            
0001347C                            loc_12998:
0001347C 7000                       		moveq	#0,d0
0001347E 4E75                       		rts	
00013480                            ; ===========================================================================
00013480                            Ani_obj64:
00013480                            	include "_anim\obj64.asm"
00013480                            ; ---------------------------------------------------------------------------
00013480                            ; Animation script - bubbles (LZ)
00013480                            ; ---------------------------------------------------------------------------
00013480 0000                       		dc.w byte_129AA-Ani_obj64
00013482 0000                       		dc.w byte_129B0-Ani_obj64
00013484 0000                       		dc.w byte_129B6-Ani_obj64
00013486 0000                       		dc.w byte_129BE-Ani_obj64
00013488 0000                       		dc.w byte_129BE-Ani_obj64
0001348A 0000                       		dc.w byte_129C0-Ani_obj64
0001348C 0000                       		dc.w byte_129C6-Ani_obj64
0001348E 0E00 0102 FC00             byte_129AA:	dc.b $E, 0, 1, 2, $FC, 0
00013494 0E01 0203 04FC             byte_129B0:	dc.b $E, 1, 2, 3, 4, $FC
0001349A 0E02 0304 0506 FC00        byte_129B6:	dc.b $E, 2, 3, 4, 5, 6,	$FC, 0
000134A2 04FC                       byte_129BE:	dc.b 4,	$FC
000134A4 0406 0708 FC00             byte_129C0:	dc.b 4,	6, 7, 8, $FC, 0
000134AA 0F13 1415 FF               byte_129C6:	dc.b $F, $13, $14, $15,	$FF
000134B0 00                         		even
000134B0 00                         		even
000134B0                            
000134B0                            ; ---------------------------------------------------------------------------
000134B0                            ; Sprite mappings - bubbles (LZ)
000134B0                            ; ---------------------------------------------------------------------------
000134B0                            Map_obj64:
000134B0                            	include "_maps\obj64.asm"
000134B0                            ; ---------------------------------------------------------------------------
000134B0                            ; Sprite mappings - bubbles (LZ)
000134B0                            ; ---------------------------------------------------------------------------
000134B0 0000 0000                  		dc.w byte_129FA-Map_obj64, byte_12A00-Map_obj64
000134B4 0000 0000                  		dc.w byte_12A06-Map_obj64, byte_12A0C-Map_obj64
000134B8 0000 0000                  		dc.w byte_12A12-Map_obj64, byte_12A18-Map_obj64
000134BC 0000 0000                  		dc.w byte_12A1E-Map_obj64, byte_12A24-Map_obj64
000134C0 0000 0000                  		dc.w byte_12A39-Map_obj64, byte_12A4E-Map_obj64
000134C4 0000 0000                  		dc.w byte_12A54-Map_obj64, byte_12A5A-Map_obj64
000134C8 0000 0000                  		dc.w byte_12A60-Map_obj64, byte_12A66-Map_obj64
000134CC 0000 0000                  		dc.w byte_12A6C-Map_obj64, byte_12A72-Map_obj64
000134D0 0000 0000                  		dc.w byte_12A78-Map_obj64, byte_12A7E-Map_obj64
000134D4 0000 0000                  		dc.w byte_12A84-Map_obj64, byte_12A8A-Map_obj64
000134D8 0000 0000                  		dc.w byte_12A90-Map_obj64, byte_12A96-Map_obj64
000134DC 0000                       		dc.w byte_12A9C-Map_obj64
000134DE 01                         byte_129FA:	dc.b 1
000134DF FC00 0000 FC               		dc.b $FC, 0, 0,	0, $FC
000134E4 01                         byte_12A00:	dc.b 1
000134E5 FC00 0001 FC               		dc.b $FC, 0, 0,	1, $FC
000134EA 01                         byte_12A06:	dc.b 1
000134EB FC00 0002 FC               		dc.b $FC, 0, 0,	2, $FC
000134F0 01                         byte_12A0C:	dc.b 1
000134F1 F805 0003 F8               		dc.b $F8, 5, 0,	3, $F8
000134F6 01                         byte_12A12:	dc.b 1
000134F7 F805 0007 F8               		dc.b $F8, 5, 0,	7, $F8
000134FC 01                         byte_12A18:	dc.b 1
000134FD F40A 000B F4               		dc.b $F4, $A, 0, $B, $F4
00013502 01                         byte_12A1E:	dc.b 1
00013503 F00F 0014 F0               		dc.b $F0, $F, 0, $14, $F0
00013508 04                         byte_12A24:	dc.b 4
00013509 F005 0024 F0               		dc.b $F0, 5, 0,	$24, $F0
0001350E F005 0824 00               		dc.b $F0, 5, 8,	$24, 0
00013513 0005 1024 F0               		dc.b 0,	5, $10,	$24, $F0
00013518 0005 1824 00               		dc.b 0,	5, $18,	$24, 0
0001351D 04                         byte_12A39:	dc.b 4
0001351E F005 0028 F0               		dc.b $F0, 5, 0,	$28, $F0
00013523 F005 0828 00               		dc.b $F0, 5, 8,	$28, 0
00013528 0005 1028 F0               		dc.b 0,	5, $10,	$28, $F0
0001352D 0005 1828 00               		dc.b 0,	5, $18,	$28, 0
00013532 01                         byte_12A4E:	dc.b 1
00013533 F406 002C F8               		dc.b $F4, 6, 0,	$2C, $F8
00013538 01                         byte_12A54:	dc.b 1
00013539 F406 0032 F8               		dc.b $F4, 6, 0,	$32, $F8
0001353E 01                         byte_12A5A:	dc.b 1
0001353F F406 0038 F8               		dc.b $F4, 6, 0,	$38, $F8
00013544 01                         byte_12A60:	dc.b 1
00013545 F406 003E F8               		dc.b $F4, 6, 0,	$3E, $F8
0001354A 01                         byte_12A66:	dc.b 1
0001354B F406 2044 F8               		dc.b $F4, 6, $20, $44, $F8
00013550 01                         byte_12A6C:	dc.b 1
00013551 F406 204A F8               		dc.b $F4, 6, $20, $4A, $F8
00013556 01                         byte_12A72:	dc.b 1
00013557 F406 2050 F8               		dc.b $F4, 6, $20, $50, $F8
0001355C 01                         byte_12A78:	dc.b 1
0001355D F406 2056 F8               		dc.b $F4, 6, $20, $56, $F8
00013562 01                         byte_12A7E:	dc.b 1
00013563 F406 205C F8               		dc.b $F4, 6, $20, $5C, $F8
00013568 01                         byte_12A84:	dc.b 1
00013569 F406 2062 F8               		dc.b $F4, 6, $20, $62, $F8
0001356E 01                         byte_12A8A:	dc.b 1
0001356F F805 0068 F8               		dc.b $F8, 5, 0,	$68, $F8
00013574 01                         byte_12A90:	dc.b 1
00013575 F805 006C F8               		dc.b $F8, 5, 0,	$6C, $F8
0001357A 01                         byte_12A96:	dc.b 1
0001357B F805 0070 F8               		dc.b $F8, 5, 0,	$70, $F8
00013580 00                         byte_12A9C:	dc.b 0
00013582 00                         		even
00013582 00                         		even
00013582                            
00013582                            ; ===========================================================================
00013582                            ; ---------------------------------------------------------------------------
00013582                            ; Object 65 - waterfalls (LZ)
00013582                            ; ---------------------------------------------------------------------------
00013582                            
00013582                            Obj65:					; XREF: Obj_Index
00013582 7000                       		moveq	#0,d0
00013584 1028 0024                  		move.b	$24(a0),d0
00013588 323B 0000                  		move.w	Obj65_Index(pc,d0.w),d1
0001358C 4EFB 1000                  		jmp	Obj65_Index(pc,d1.w)
00013590                            ; ===========================================================================
00013590 0000                       Obj65_Index:	dc.w Obj65_Main-Obj65_Index
00013592 0000                       		dc.w Obj65_Animate-Obj65_Index
00013594 0000                       		dc.w Obj65_ChkDel-Obj65_Index
00013596 0000                       		dc.w Obj65_FixHeight-Obj65_Index
00013598 0000                       		dc.w loc_12B36-Obj65_Index
0001359A                            ; ===========================================================================
0001359A                            
0001359A                            Obj65_Main:				; XREF: Obj65_Index
0001359A 5828 0024                  		addq.b	#4,$24(a0)
0001359E 217C 0000 0000 0004        		move.l	#Map_obj65,4(a0)
000135A6 317C 4259 0002             		move.w	#$4259,2(a0)
000135AC 0028 0004 0001             		ori.b	#4,1(a0)
000135B2 117C 0018 0019             		move.b	#$18,$19(a0)
000135B8 117C 0001 0018             		move.b	#1,$18(a0)
000135BE 1028 0028                  		move.b	$28(a0),d0	; get object type
000135C2 6A00                       		bpl.s	loc_12AE6
000135C4 08E8 0007 0002             		bset	#7,2(a0)
000135CA                            
000135CA                            loc_12AE6:
000135CA 0200 000F                  		andi.b	#$F,d0		; read only the	2nd byte
000135CE 1140 001A                  		move.b	d0,$1A(a0)	; set frame number
000135D2 0C00 0009                  		cmpi.b	#9,d0		; is object type $x9 ?
000135D6 6600                       		bne.s	Obj65_ChkDel	; if not, branch
000135D8 4228 0018                  		clr.b	$18(a0)
000135DC 5528 0024                  		subq.b	#2,$24(a0)
000135E0 0828 0006 0028             		btst	#6,$28(a0)	; is object type $4x ?
000135E6 6700                       		beq.s	loc_12B0A	; if not, branch
000135E8 117C 0006 0024             		move.b	#6,$24(a0)
000135EE                            
000135EE                            loc_12B0A:
000135EE 0828 0005 0028             		btst	#5,$28(a0)	; is object type $Ax ?
000135F4 6700                       		beq.s	Obj65_Animate	; if not, branch
000135F6 117C 0008 0024             		move.b	#8,$24(a0)
000135FC                            
000135FC                            Obj65_Animate:				; XREF: Obj65_Index
000135FC 43F9 0000 0000             		lea	(Ani_obj65).l,a1
00013602 4EB9 0000 B1F6             		jsr	AnimateSprite
00013608                            
00013608                            Obj65_ChkDel:				; XREF: Obj65_Index
00013608 6000 CB9C                  		bra.w	MarkObjGone
0001360C                            ; ===========================================================================
0001360C                            
0001360C                            Obj65_FixHeight:			; XREF: Obj65_Index
0001360C 3038 F646                  		move.w	($FFFFF646).w,d0
00013610 0440 0010                  		subi.w	#$10,d0
00013614 3140 000C                  		move.w	d0,$C(a0)	; match	object position	to water height
00013618 60E2                       		bra.s	Obj65_Animate
0001361A                            ; ===========================================================================
0001361A                            
0001361A                            loc_12B36:				; XREF: Obj65_Index
0001361A 08A8 0007 0002             		bclr	#7,2(a0)
00013620 0C38 0007 A506             		cmpi.b	#7,($FFFFA506).w
00013626 6600                       		bne.s	Obj65_Animate2
00013628 08E8 0007 0002             		bset	#7,2(a0)
0001362E                            
0001362E                            Obj65_Animate2:
0001362E 60CC                       		bra.s	Obj65_Animate
00013630                            ; ===========================================================================
00013630                            Ani_obj65:
00013630                            	include "_anim\obj65.asm"
00013630                            ; ---------------------------------------------------------------------------
00013630                            ; Animation script - waterfall (LZ)
00013630                            ; ---------------------------------------------------------------------------
00013630 0000                       		dc.w byte_12B4E-Ani_obj65
00013632 0509 0A0B FF               byte_12B4E:	dc.b 5,	9, $A, $B, $FF
00013638 00                         		even
00013638 00                         		even
00013638                            
00013638                            ; ---------------------------------------------------------------------------
00013638                            ; Sprite mappings - waterfalls (LZ)
00013638                            ; ---------------------------------------------------------------------------
00013638                            Map_obj65:
00013638                            	include "_maps\obj65.asm"
00013638                            ; ---------------------------------------------------------------------------
00013638                            ; Sprite mappings - waterfalls (LZ)
00013638                            ; ---------------------------------------------------------------------------
00013638 0000 0000                  		dc.w byte_12B6C-Map_obj65, byte_12B72-Map_obj65
0001363C 0000 0000                  		dc.w byte_12B7D-Map_obj65, byte_12B88-Map_obj65
00013640 0000 0000                  		dc.w byte_12B8E-Map_obj65, byte_12B99-Map_obj65
00013644 0000 0000                  		dc.w byte_12B9F-Map_obj65, byte_12BA5-Map_obj65
00013648 0000 0000                  		dc.w byte_12BAB-Map_obj65, byte_12BB6-Map_obj65
0001364C 0000 0000                  		dc.w byte_12BC1-Map_obj65, byte_12BCC-Map_obj65
00013650 01                         byte_12B6C:	dc.b 1
00013651 F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
00013656 02                         byte_12B72:	dc.b 2
00013657 F804 0008 FC               		dc.b $F8, 4, 0,	8, $FC
0001365C 0008 000A F4               		dc.b 0,	8, 0, $A, $F4
00013661 02                         byte_12B7D:	dc.b 2
00013662 F800 0008 00               		dc.b $F8, 0, 0,	8, 0
00013667 0004 000D F8               		dc.b 0,	4, 0, $D, $F8
0001366C 01                         byte_12B88:	dc.b 1
0001366D F801 000F 00               		dc.b $F8, 1, 0,	$F, 0
00013672 02                         byte_12B8E:	dc.b 2
00013673 F800 0008 00               		dc.b $F8, 0, 0,	8, 0
00013678 0004 000D F8               		dc.b 0,	4, 0, $D, $F8
0001367D 01                         byte_12B99:	dc.b 1
0001367E F801 0011 00               		dc.b $F8, 1, 0,	$11, 0
00013683 01                         byte_12B9F:	dc.b 1
00013684 F801 0013 00               		dc.b $F8, 1, 0,	$13, 0
00013689 01                         byte_12BA5:	dc.b 1
0001368A F007 0015 F8               		dc.b $F0, 7, 0,	$15, $F8
0001368F 02                         byte_12BAB:	dc.b 2
00013690 F80C 001D F6               		dc.b $F8, $C, 0, $1D, $F6
00013695 000C 0021 E8               		dc.b 0,	$C, 0, $21, $E8
0001369A 02                         byte_12BB6:	dc.b 2
0001369B F00B 0025 E8               		dc.b $F0, $B, 0, $25, $E8
000136A0 F00B 0031 00               		dc.b $F0, $B, 0, $31, 0
000136A5 02                         byte_12BC1:	dc.b 2
000136A6 F00B 003D E8               		dc.b $F0, $B, 0, $3D, $E8
000136AB F00B 0049 00               		dc.b $F0, $B, 0, $49, 0
000136B0 02                         byte_12BCC:	dc.b 2
000136B1 F00B 0055 E8               		dc.b $F0, $B, 0, $55, $E8
000136B6 F00B 0061 00               		dc.b $F0, $B, 0, $61, 0
000136BC 00                         		even
000136BC 00                         		even
000136BC                            
000136BC                            ; ===========================================================================
000136BC                            ; ---------------------------------------------------------------------------
000136BC                            ; Object 01 - Sonic
000136BC                            ; ---------------------------------------------------------------------------
000136BC                            
000136BC                            Obj01:					; XREF: Obj_Index
000136BC 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
000136C0 6700                       		beq.s	Obj01_Normal	; if not, branch
000136C2 4EF9 0000 0000             		jmp	DebugMode
000136C8                            ; ===========================================================================
000136C8                            
000136C8                            Obj01_Normal:
000136C8 7000                       		moveq	#0,d0
000136CA 1028 0024                  		move.b	$24(a0),d0
000136CE 323B 0000                  		move.w	Obj01_Index(pc,d0.w),d1
000136D2 4EFB 1000                  		jmp	Obj01_Index(pc,d1.w)
000136D6                            ; ===========================================================================
000136D6 0000                       Obj01_Index:	dc.w Obj01_Main-Obj01_Index
000136D8 0000                       		dc.w Obj01_Control-Obj01_Index
000136DA 0000                       		dc.w Obj01_Hurt-Obj01_Index
000136DC 0000                       		dc.w Obj01_Death-Obj01_Index
000136DE 0000                       		dc.w Obj01_ResetLevel-Obj01_Index
000136E0 0000                       		dc.w Sonic_Drowned-Obj01_Index
000136E2                            ; ===========================================================================
000136E2                            
000136E2                            Obj01_Main:				; XREF: Obj01_Index
000136E2 5428 0024                  		addq.b	#2,$24(a0)
000136E6 117C 0013 0016             		move.b	#$13,$16(a0)
000136EC 117C 0009 0017             		move.b	#9,$17(a0)
000136F2 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
000136FA 317C 0780 0002             		move.w	#$780,2(a0)
00013700 117C 0002 0018             		move.b	#2,$18(a0)
00013706 117C 0018 0019             		move.b	#$18,$19(a0)
0001370C 117C 0004 0001             		move.b	#4,1(a0)
00013712 31FC 0600 F760             		move.w	#$600,($FFFFF760).w ; Sonic's top speed
00013718 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; Sonic's acceleration
0001371E 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; Sonic's deceleration
00013724 11FC 0005 D1C0             		move.b	#5,$FFFFD1C0.w
0001372A 11FC 0000 FE19             		move.b	#0,(Super_Sonic_flag).w
00013730                            
00013730                            Obj01_Control:				; XREF: Obj01_Index
00013730 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug cheat enabled?
00013734 6700                       		beq.s	loc_12C58	; if not, branch
00013736 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button C pressed?
0001373C 6700                       		beq.s	loc_12C58	; if not, branch
0001373E 31FC 0001 FE08             		move.w	#1,($FFFFFE08).w ; change Sonic	into a ring/item
00013744 4238 F7CC                  		clr.b	($FFFFF7CC).w
00013748 4E75                       		rts	
0001374A                            ; ===========================================================================
0001374A                            
0001374A                            loc_12C58:
0001374A 4A38 F7CC                  		tst.b	($FFFFF7CC).w	; are controls locked?
0001374E 6600                       		bne.s	loc_12C64	; if yes, branch
00013750 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w ; enable joypad control
00013756                            
00013756                            loc_12C64:
00013756 0838 0000 F7C8             		btst	#0,($FFFFF7C8).w ; are controls	locked?
0001375C 6600                       		bne.s	loc_12C7E	; if yes, branch
0001375E 7000                       		moveq	#0,d0
00013760 1028 0022                  		move.b	$22(a0),d0
00013764 0240 0006                  		andi.w	#6,d0
00013768 323B 0000                  		move.w	Obj01_Modes(pc,d0.w),d1
0001376C 4EBB 1000                  		jsr	Obj01_Modes(pc,d1.w)
00013770                            
00013770                            loc_12C7E:
00013770 6100                       		bsr.s	Sonic_Display
00013772 6100 0000                  		bsr.w	Sonic_Super
00013776 6100 0000                  		bsr.w	Sonic_RecordPos
0001377A 6100 0000                  		bsr.w	Sonic_Water
0001377E 1178 F768 0036             		move.b	($FFFFF768).w,$36(a0)
00013784 1178 F76A 0037             		move.b	($FFFFF76A).w,$37(a0)
0001378A 4A38 F7C7                  		tst.b	($FFFFF7C7).w
0001378E 6700                       		beq.s	loc_12CA6
00013790 4A28 001C                  		tst.b	$1C(a0)
00013794 6600                       		bne.s	loc_12CA6
00013796 1168 001D 001C             		move.b	$1D(a0),$1C(a0)
0001379C                            
0001379C                            loc_12CA6:
0001379C 6100 0000                  		bsr.w	Sonic_Animate
000137A0 4A38 F7C8                  		tst.b	($FFFFF7C8).w
000137A4 6B00                       		bmi.s	loc_12CB6
000137A6 4EB9 0000 0000             		jsr	TouchResponse
000137AC                            
000137AC                            loc_12CB6:
000137AC 6100 0000                  		bsr.w	Sonic_Loops
000137B0 6100 0000                  		bsr.w	LoadSonicDynPLC
000137B4 4E75                       		rts	
000137B6                            ; ===========================================================================
000137B6 0000                       Obj01_Modes:	dc.w Obj01_MdNormal-Obj01_Modes
000137B8 0000                       		dc.w Obj01_MdJump-Obj01_Modes
000137BA 0000                       		dc.w Obj01_MdRoll-Obj01_Modes
000137BC 0000                       		dc.w Obj01_MdJump2-Obj01_Modes
000137BE                            ; ---------------------------------------------------------------------------
000137BE                            ; Music	to play	after invincibility wears off
000137BE                            ; ---------------------------------------------------------------------------
000137BE                            ;MusicList2:	incbin	misc\muslist2.bin
000137BE                            ;		even
000137BE                            ; ===========================================================================
000137BE                            
000137BE                            Sonic_Display:				; XREF: loc_12C7E
000137BE 3028 0030                  		move.w	$30(a0),d0
000137C2 6700                       		beq.s	Obj01_Display
000137C4 5368 0030                  		subq.w	#1,$30(a0)
000137C8 E648                       		lsr.w	#3,d0
000137CA 6400                       		bcc.s	Obj01_ChkInvin
000137CC                            
000137CC                            Obj01_Display:
000137CC 4EBA A916                  		jsr	DisplaySprite
000137D0                            
000137D0                            ; Second part of the NineKode. Play different music on different acts - after invincibility wears off
000137D0                             
000137D0                            Obj01_ChkInvin:
000137D0 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
000137D4 6700 0000                  		beq.w	Obj01_ChkShoes	; if not, branch	; change to beq.w
000137D8 4A68 0032                  		tst.w	$32(a0)		; check	time remaining for invinciblity
000137DC 6700 0000                  		beq.w	Obj01_ChkShoes	; if no	time remains, branch	; change to beq.w
000137E0 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time
000137E4 6600 0000                  		bne.w	Obj01_ChkShoes	; change to bne.w
000137E8 4A38 F7AA                  		tst.b	($FFFFF7AA).w
000137EC 6600 0000                  		bne.w	Obj01_RmvInvin	; change to bne.w
000137F0 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w
000137F6 6500 0000                  		bcs.w	Obj01_RmvInvin	; change to bcs.w
000137FA 4A38 FE2E                  		tst.b ($FFFFFE2E).w ; does Sonic have speed shoes?
000137FE 6600                       		bne.s Obj01_ChkShoes	
00013800 7000                       		moveq	#0,d0
00013802 1038 FE10                  		move.b	($FFFFFE10).w,d0
00013806                             
00013806 0C38 0000 FE11             		cmpi.b	#$0,($FFFFFE11).w	; is this act 1?
0001380C 6600                       		bne.s	Obj01_GetBgm2	; if not, branch
0001380E 43F9 0000 419A             		lea	(MusicList1).l,a1	; load Music Playlist for Acts 1
00013814 6000                       		bra.s	Obj01_PlayMusic	; go to PlayMusic
00013816                             
00013816                            Obj01_GetBgm2:
00013816 0C38 0001 FE11             		cmpi.b	#$1,($FFFFFE11).w	; is this act 2?
0001381C 6600                       		bne.s	Obj01_GetBgm3	; if not, branch
0001381E 43F9 0000 41A0             		lea	(MusicList2).l,a1	; load Music Playlist for Acts 2
00013824 6000                       		bra.s	Obj01_PlayMusic	; go to PlayMusic
00013826                             
00013826                            Obj01_GetBgm3:
00013826 0C38 0002 FE11             		cmpi.b	#$2,($FFFFFE11).w	; is this act 3?
0001382C 6600                       		bne.s	Obj01_GetBgm4	; if not, branch
0001382E 43F9 0000 41A6             		lea	(MusicList3).l,a1	; load Music Playlist for Acts 3
00013834 6000                       		bra.s	Obj01_PlayMusic	; go to PlayMusic
00013836                             
00013836                            Obj01_GetBgm4:
00013836 0C38 0003 FE11             		cmpi.b	#$3,($FFFFFE11).w	; is this act 4?
0001383C 6600                       		bne.s	Obj01_PlayMusic	; if not, branch
0001383E 43F9 0000 41AC             		lea	(MusicList4).l,a1	; load Music Playlist for Acts 4
00013844                             
00013844                            Obj01_PlayMusic:
00013844 1031 0000                  		move.b	(a1,d0.w),d0
00013848 4EB9 0000 1476             		jsr	(PlaySound).l	; play normal music
0001384E                             
0001384E                            ; NineKode ends here.
0001384E                            
0001384E                            
0001384E                            Obj01_RmvInvin:
0001384E 11FC 0000 FE2D             		move.b	#0,($FFFFFE2D).w ; cancel invincibility
00013854                            
00013854                            Obj01_ChkShoes:
00013854 4A38 FE2E                  		tst.b	($FFFFFE2E).w	; does Sonic have speed	shoes?
00013858 6700                       		beq.s	Obj01_ExitChk	; if not, branch
0001385A 4A68 0034                  		tst.w	$34(a0)		; check	time remaining
0001385E 6700                       		beq.s	Obj01_ExitChk
00013860 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from time
00013864 6600                       		bne.s	Obj01_ExitChk
00013866 31FC 0600 F760             		move.w	#$600,($FFFFF760).w ; restore Sonic's speed
0001386C 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; restore Sonic's acceleration
00013872 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; restore Sonic's deceleration
00013878 11FC 0000 FE2E             		move.b	#0,($FFFFFE2E).w ; cancel speed	shoes
0001387E 4A38 FE2D                  		tst.b ($FFFFFE2D).w ; does Sonic have invincibility?
00013882 6600                       		bne.s Obj01_ExitChk
00013884                            
00013884 7000                       		moveq #0,d0
00013886 1038 FE10                  		move.b ($FFFFFE10).w,d0
0001388A 0C78 0103 FE10             		cmpi.w #$103,($FFFFFE10).w ; check if level is SBZ3
00013890 6600                       		bne.s playthemusic
00013892 7009                       		moveq #9,d0 ; play SBZ music
00013894                            playthemusic:
00013894 43F9 0000 41A0             		lea (MusicList2).l,a1 ; load music playlist
0001389A 1031 0000                  		move.b (a1,d0.w),d0 ; add d0 to a1
0001389E 4EB9 0000 1476             		jsr (PlaySound).l ; play normal music
000138A4                            ; ===========================================================================
000138A4                            
000138A4                            Obj01_ExitChk:
000138A4 4E75                       		rts	
000138A6                            
000138A6                            ; ---------------------------------------------------------------------------
000138A6                            ; Subroutine to	record Sonic's previous positions for invincibility stars
000138A6                            ; ---------------------------------------------------------------------------
000138A6                            
000138A6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000138A6                            
000138A6                            
000138A6                            Sonic_RecordPos:			; XREF: loc_12C7E; Obj01_Hurt; Obj01_Death
000138A6 3038 F7A8                  		move.w	($FFFFF7A8).w,d0
000138AA 43F8 CB00                  		lea	($FFFFCB00).w,a1
000138AE 43F1 0000                  		lea	(a1,d0.w),a1
000138B2 32E8 0008                  		move.w	8(a0),(a1)+
000138B6 32E8 000C                  		move.w	$C(a0),(a1)+
000138BA 5838 F7A9                  		addq.b	#4,($FFFFF7A9).w
000138BE 4E75                       		rts	
000138C0                            ; End of function Sonic_RecordPos
000138C0                            
000138C0                            ; ---------------------------------------------------------------------------
000138C0                            ; Subroutine for Sonic when he's underwater
000138C0                            ; ---------------------------------------------------------------------------
000138C0                            
000138C0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000138C0                            
000138C0                            
000138C0                            Sonic_Water:				; XREF: loc_12C7E
000138C0 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
000138C6 6700                       		beq.s	Obj01_InWater	; if yes, branch
000138C8                            
000138C8                            locret_12D80:
000138C8 4E75                       		rts	
000138CA                            ; ===========================================================================
000138CA                            
000138CA                            Obj01_InWater:
000138CA 3038 F646                  		move.w	($FFFFF646).w,d0
000138CE B068 000C                  		cmp.w	$C(a0),d0	; is Sonic above the water?
000138D2 6C00                       		bge.s	Obj01_OutWater	; if yes, branch
000138D4 08E8 0006 0022             		bset	#6,$22(a0)
000138DA 66EC                       		bne.s	locret_12D80
000138DC 6100 0000                  		bsr.w	ResumeMusic
000138E0 11FC 000A D340             		move.b	#$A,($FFFFD340).w ; load bubbles object	from Sonic's mouth
000138E6 11FC 0081 D368             		move.b	#$81,($FFFFD368).w
000138EC 31FC 0300 F760             		move.w	#$300,($FFFFF760).w ; change Sonic's top speed
000138F2 31FC 0006 F762             		move.w	#6,($FFFFF762).w ; change Sonic's acceleration
000138F8 31FC 0040 F764             		move.w	#$40,($FFFFF764).w ; change Sonic's deceleration
000138FE 4A38 FE19                  	tst.b	(Super_Sonic_flag).w	; Is Sonic Super?
00013902 6700                       	beq.s	@Skip			; If not branch
00013904 31FC 0500 F760             	move.w	#$500,(Sonic_top_speed).w
0001390A 31FC 0018 F762             	move.w	#$18,(Sonic_acceleration).w
00013910 31FC 0080 F764             	move.w	#$80,(Sonic_deceleration).w
00013916                            @Skip:		
00013916 E0E8 0010                  		asr	$10(a0)
0001391A E0E8 0012                  		asr	$12(a0)
0001391E E0E8 0012                  		asr	$12(a0)
00013922 67A4                       		beq.s	locret_12D80
00013924 11FC 0008 D300             		move.b	#8,($FFFFD300).w ; load	splash object
0001392A 303C 00AA                  		move.w	#$AA,d0
0001392E 4EF9 0000 147C             		jmp	(PlaySound_Special).l ;	play splash sound
00013934                            ; ===========================================================================
00013934                            
00013934                            Obj01_OutWater:
00013934 08A8 0006 0022             		bclr	#6,$22(a0)
0001393A 678C                       		beq.s	locret_12D80
0001393C 6100 0000                  		bsr.w	ResumeMusic
00013940 31FC 0600 F760             		move.w	#$600,($FFFFF760).w ; restore Sonic's speed
00013946 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; restore Sonic's acceleration
0001394C 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; restore Sonic's deceleration
00013952 4A38 FE19                  	tst.b	(Super_Sonic_flag).w	; Is Sonic Super?
00013956 6700                       	beq.s	@Skip2			; If not branch
00013958 31FC 0A00 F760             	move.w	#$A00,(Sonic_top_speed).w
0001395E 31FC 0030 F762             	move.w	#$30,(Sonic_acceleration).w
00013964 31FC 0100 F764             	move.w	#$100,(Sonic_deceleration).w
0001396A                            @Skip2
0001396A E1E8 0012                  		asl	$12(a0)
0001396E 4A68 0012                  		tst.w   $12(a0)
00013972 6700 FF54                  		beq.w	locret_12D80
00013976 11FC 0008 D300             		move.b	#8,($FFFFD300).w ; load	splash object
0001397C 0C68 F000 0012             		cmpi.w	#-$1000,$12(a0)
00013982 6E00                       		bgt.s	loc_12E0E
00013984 317C F000 0012             		move.w	#-$1000,$12(a0)	; set maximum speed on leaving water
0001398A                            
0001398A                            loc_12E0E:
0001398A 303C 00AA                  		move.w	#$AA,d0
0001398E 4EF9 0000 147C             		jmp	(PlaySound_Special).l ;	play splash sound
00013994                            ; End of function Sonic_Water
00013994                            
00013994                            ; ===========================================================================
00013994                            ; ---------------------------------------------------------------------------
00013994                            ; Modes	for controlling	Sonic
00013994                            ; ---------------------------------------------------------------------------
00013994                            
00013994                            Obj01_MdNormal:				; XREF: Obj01_Modes
00013994 6100 0000                  		bsr.w	Sonic_SpinDash
00013998 6100 0000                  		bsr.w	Sonic_Jump
0001399C 6100 0000                  		bsr.w	Sonic_SlopeResist
000139A0 6100 0000                  		bsr.w	Sonic_Move
000139A4 6100 0000                  		bsr.w	Sonic_Roll
000139A8 6100 0000                  		bsr.w	Sonic_Super
000139AC 6100 0000                  		bsr.w	Sonic_LevelBound
000139B0 4EBA A70C                  		jsr	SpeedToPos
000139B4 6100 0000                  		bsr.w	Sonic_AnglePos
000139B8 6100 0000                  		bsr.w	Sonic_SlopeRepel
000139BC 4E75                       		rts	
000139BE                            ; ===========================================================================
000139BE                            
000139BE                            Obj01_MdJump:				; XREF: Obj01_Modes
000139BE 4228 0039                  		clr.b	$39(a0)
000139C2 6100 0000                  		bsr.w	Sonic_JumpHeight
000139C6 6100 0000                  		bsr.w	Sonic_ChgJumpDir
000139CA 6100 0000                  		bsr.w	Sonic_LevelBound
000139CE 4EBA A6C2                  		jsr	ObjectFall
000139D2 0828 0006 0022             		btst	#6,$22(a0)
000139D8 6700                       		beq.s	loc_12E5C
000139DA 0468 0028 0012             		subi.w	#$28,$12(a0)
000139E0                            
000139E0                            loc_12E5C:
000139E0 6100 0000                  		bsr.w	Sonic_JumpAngle
000139E4 6100 0000                  		bsr.w	Sonic_Floor
000139E8 4E75                       		rts	
000139EA                            ; ===========================================================================
000139EA                            
000139EA                            Obj01_MdRoll:				; XREF: Obj01_Modes
000139EA 6100 0000                  		bsr.w	Sonic_Jump
000139EE 6100 0000                  		bsr.w	Sonic_RollRepel
000139F2 6100 0000                  		bsr.w	Sonic_RollSpeed
000139F6 6100 0000                  		bsr.w	Sonic_LevelBound
000139FA 4EBA A6C2                  		jsr	SpeedToPos
000139FE 6100 0000                  		bsr.w	Sonic_AnglePos
00013A02 6100 0000                  		bsr.w	Sonic_SlopeRepel
00013A06 4E75                       		rts	
00013A08                            ; ===========================================================================
00013A08                            
00013A08                            Obj01_MdJump2:				; XREF: Obj01_Modes
00013A08 4228 0039                  		clr.b	$39(a0)
00013A0C 6100 0000                  		bsr.w	Sonic_JumpHeight
00013A10 6100 0000                  		bsr.w	Sonic_ChgJumpDir
00013A14 6100 0000                  		bsr.w	Sonic_LevelBound
00013A18 4EBA A678                  		jsr	ObjectFall
00013A1C 0828 0006 0022             		btst	#6,$22(a0)
00013A22 6700                       		beq.s	loc_12EA6
00013A24 0468 0028 0012             		subi.w	#$28,$12(a0)
00013A2A                            
00013A2A                            loc_12EA6:
00013A2A 6100 0000                  		bsr.w	Sonic_JumpAngle
00013A2E 6100 0000                  		bsr.w	Sonic_Floor
00013A32 4E75                       		rts	
00013A34                            ; ---------------------------------------------------------------------------
00013A34                            ; Subroutine to	make Sonic walk/run
00013A34                            ; ---------------------------------------------------------------------------
00013A34                            
00013A34                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013A34                            
00013A34                            
00013A34                            Sonic_Move:				; XREF: Obj01_MdNormal
00013A34 3C38 F760                  		move.w	($FFFFF760).w,d6
00013A38 3A38 F762                  		move.w	($FFFFF762).w,d5
00013A3C 3838 F764                  		move.w	($FFFFF764).w,d4
00013A40 4A38 F7CA                  		tst.b	($FFFFF7CA).w
00013A44 6600 0000                  		bne.w	loc_12FEE
00013A48 4A68 003E                  		tst.w	$3E(a0)
00013A4C 6600 0000                  		bne.w	Obj01_ResetScr
00013A50 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
00013A56 6700                       		beq.s	Obj01_NotLeft	; if not, branch
00013A58 6100 0000                  		bsr.w	Sonic_MoveLeft
00013A5C                            
00013A5C                            Obj01_NotLeft:
00013A5C 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
00013A62 6700                       		beq.s	Obj01_NotRight	; if not, branch
00013A64 6100 0000                  		bsr.w	Sonic_MoveRight
00013A68                            
00013A68                            Obj01_NotRight:
00013A68 1028 0026                  		move.b	$26(a0),d0
00013A6C 0600 0020                  		addi.b	#$20,d0
00013A70 0200 00C0                  		andi.b	#$C0,d0		; is Sonic on a	slope?
00013A74 6600 0000                  		bne.w	Obj01_ResetScr	; if yes, branch
00013A78 4A68 0014                  		tst.w	$14(a0)		; is Sonic moving?
00013A7C 6600 0000                  		bne.w	Obj01_ResetScr	; if yes, branch
00013A80 08A8 0005 0022             		bclr	#5,$22(a0)
00013A86 117C 0005 001C             		move.b	#5,$1C(a0)	; use "standing" animation
00013A8C 0828 0003 0022             		btst	#3,$22(a0)
00013A92 6700                       		beq.s	Sonic_Balance
00013A94 7000                       		moveq	#0,d0
00013A96 1028 003D                  		move.b	$3D(a0),d0
00013A9A ED48                       		lsl.w	#6,d0
00013A9C 43F8 D000                  		lea	($FFFFD000).w,a1
00013AA0 43F1 0000                  		lea	(a1,d0.w),a1
00013AA4 4A29 0022                  		tst.b	$22(a1)
00013AA8 6B00                       		bmi.s	Sonic_LookUp
00013AAA 7200                       		moveq	#0,d1
00013AAC 1229 0019                  		move.b	$19(a1),d1
00013AB0 3401                       		move.w	d1,d2
00013AB2 D442                       		add.w	d2,d2
00013AB4 5942                       		subq.w	#4,d2
00013AB6 D268 0008                  		add.w	8(a0),d1
00013ABA 9269 0008                  		sub.w	8(a1),d1
00013ABE 0C41 0004                  		cmpi.w	#4,d1
00013AC2 6D00                       		blt.s	loc_12F6A
00013AC4 B242                       		cmp.w	d2,d1
00013AC6 6C00                       		bge.s	loc_12F5A
00013AC8 6000                       		bra.s	Sonic_LookUp
00013ACA                            ; ===========================================================================
00013ACA                            
00013ACA                            Sonic_Balance:
00013ACA 4EB9 0000 0000             		jsr	ObjHitFloor
00013AD0 0C41 000C                  		cmpi.w	#$C,d1
00013AD4 6D00                       		blt.s	Sonic_LookUp
00013AD6 0C28 0003 0036             		cmpi.b	#3,$36(a0)
00013ADC 6600                       		bne.s	loc_12F62
00013ADE                            
00013ADE                            loc_12F5A:
00013ADE 08A8 0000 0022             		bclr	#0,$22(a0)
00013AE4 6000                       		bra.s	loc_12F70
00013AE6                            ; ===========================================================================
00013AE6                            
00013AE6                            loc_12F62:
00013AE6 0C28 0003 0037             		cmpi.b	#3,$37(a0)
00013AEC 6600                       		bne.s	Sonic_LookUp
00013AEE                            
00013AEE                            loc_12F6A:
00013AEE 08E8 0000 0022             		bset	#0,$22(a0)
00013AF4                            
00013AF4                            loc_12F70:
00013AF4 117C 0006 001C             		move.b	#6,$1C(a0)	; use "balancing" animation
00013AFA 6000                       		bra.s	Obj01_ResetScr
00013AFC                            ; ===========================================================================
00013AFC                            
00013AFC                            Sonic_LookUp:
00013AFC 0838 0000 F602             		btst	#0,($FFFFF602).w ; is up being pressed?
00013B02 6700                       		beq.s	Sonic_Duck	; if not, branch
00013B04 117C 0007 001C             		move.b	#7,$1C(a0)	; use "looking up" animation
00013B0A 5238 C903                  		addq.b	#1,($FFFFC903).w
00013B0E 0C38 0078 C903             		cmp.b	#$78,($FFFFC903).w
00013B14 6500                       		bcs.s	Obj01_ResetScr_Part2
00013B16 11FC 0078 C903             		move.b	#$78,($FFFFC903).w
00013B1C 0C78 00C8 F73E             		cmpi.w	#$C8,($FFFFF73E).w
00013B22 6700                       		beq.s	loc_12FC2
00013B24 5478 F73E                  		addq.w	#2,($FFFFF73E).w
00013B28 6000                       		bra.s	loc_12FC2
00013B2A                            ; ===========================================================================
00013B2A                            
00013B2A                            Sonic_Duck:
00013B2A 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
00013B30 6700                       		beq.s	Obj01_ResetScr	; if not, branch
00013B32 117C 0008 001C             		move.b	#8,$1C(a0)	; use "ducking"	animation
00013B38 5238 C903                  		addq.b	#1,($FFFFC903).w
00013B3C 0C38 0078 C903             		cmpi.b	#$78,($FFFFC903).w
00013B42 6500                       		bcs.s	Obj01_ResetScr_Part2
00013B44 11FC 0078 C903             		move.b	#$78,($FFFFC903).w
00013B4A 0C78 0008 F73E             		cmpi.w	#8,($FFFFF73E).w
00013B50 6700                       		beq.s	loc_12FC2
00013B52 5578 F73E                  		subq.w	#2,($FFFFF73E).w
00013B56 6000                       		bra.s	loc_12FC2
00013B58                            ; ===========================================================================
00013B58                            
00013B58                            Obj01_ResetScr:
00013B58 11FC 0000 C903             		move.b	#0,($FFFFC903).w
00013B5E                            		
00013B5E                            Obj01_ResetScr_Part2:
00013B5E 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w ; is	screen in its default position?
00013B64 6700                       		beq.s	loc_12FC2	; if yes, branch
00013B66 6400                       		bcc.s	loc_12FBE
00013B68 5878 F73E                  		addq.w	#4,($FFFFF73E).w ; move	screen back to default
00013B6C                            
00013B6C                            loc_12FBE:
00013B6C 5578 F73E                  		subq.w	#2,($FFFFF73E).w ; move	screen back to default
00013B70                            
00013B70                            
00013B70                            loc_12FC2:
00013B70 1038 F602                  		move.b	($FFFFF602).w,d0
00013B74 0200 000C                  		andi.b	#$C,d0		; is left/right	pressed?
00013B78 6600                       		bne.s	loc_12FEE	; if yes, branch
00013B7A 3028 0014                  		move.w	$14(a0),d0
00013B7E 6700                       		beq.s	loc_12FEE
00013B80 6B00                       		bmi.s	loc_12FE2
00013B82 9045                       		sub.w	d5,d0
00013B84 6400                       		bcc.s	loc_12FDC
00013B86 303C 0000                  		move.w	#0,d0
00013B8A                            
00013B8A                            loc_12FDC:
00013B8A 3140 0014                  		move.w	d0,$14(a0)
00013B8E 6000                       		bra.s	loc_12FEE
00013B90                            ; ===========================================================================
00013B90                            
00013B90                            loc_12FE2:
00013B90 D045                       		add.w	d5,d0
00013B92 6400                       		bcc.s	loc_12FEA
00013B94 303C 0000                  		move.w	#0,d0
00013B98                            
00013B98                            loc_12FEA:
00013B98 3140 0014                  		move.w	d0,$14(a0)
00013B9C                            
00013B9C                            loc_12FEE:
00013B9C 1028 0026                  		move.b	$26(a0),d0
00013BA0 4EB9 0000 33DA             		jsr	(CalcSine).l
00013BA6 C3E8 0014                  		muls.w	$14(a0),d1
00013BAA E081                       		asr.l	#8,d1
00013BAC 3141 0010                  		move.w	d1,$10(a0)
00013BB0 C1E8 0014                  		muls.w	$14(a0),d0
00013BB4 E080                       		asr.l	#8,d0
00013BB6 3140 0012                  		move.w	d0,$12(a0)
00013BBA                            
00013BBA                            loc_1300C:
00013BBA 1028 0026                  		move.b	$26(a0),d0
00013BBE 0600 0040                  		addi.b	#$40,d0
00013BC2 6B00                       		bmi.s	locret_1307C
00013BC4 123C 0040                  		move.b	#$40,d1
00013BC8 4A68 0014                  		tst.w	$14(a0)
00013BCC 6700                       		beq.s	locret_1307C
00013BCE 6B00                       		bmi.s	loc_13024
00013BD0 4441                       		neg.w	d1
00013BD2                            
00013BD2                            loc_13024:
00013BD2 1028 0026                  		move.b	$26(a0),d0
00013BD6 D001                       		add.b	d1,d0
00013BD8 3F00                       		move.w	d0,-(sp)
00013BDA 6100 0000                  		bsr.w	Sonic_WalkSpeed
00013BDE 301F                       		move.w	(sp)+,d0
00013BE0 4A41                       		tst.w	d1
00013BE2 6A00                       		bpl.s	locret_1307C
00013BE4 E141                       		asl.w	#8,d1
00013BE6 0600 0020                  		addi.b	#$20,d0
00013BEA 0200 00C0                  		andi.b	#$C0,d0
00013BEE 6700                       		beq.s	loc_13078
00013BF0 0C00 0040                  		cmpi.b	#$40,d0
00013BF4 6700                       		beq.s	loc_13066
00013BF6 0C00 0080                  		cmpi.b	#$80,d0
00013BFA 6700                       		beq.s	loc_13060
00013BFC D368 0010                  		add.w	d1,$10(a0)
00013C00 08E8 0005 0022             		bset	#5,$22(a0)
00013C06 317C 0000 0014             		move.w	#0,$14(a0)
00013C0C 4E75                       		rts	
00013C0E                            ; ===========================================================================
00013C0E                            
00013C0E                            loc_13060:
00013C0E 9368 0012                  		sub.w	d1,$12(a0)
00013C12 4E75                       		rts	
00013C14                            ; ===========================================================================
00013C14                            
00013C14                            loc_13066:
00013C14 9368 0010                  		sub.w	d1,$10(a0)
00013C18 08E8 0005 0022             		bset	#5,$22(a0)
00013C1E 317C 0000 0014             		move.w	#0,$14(a0)
00013C24 4E75                       		rts	
00013C26                            ; ===========================================================================
00013C26                            
00013C26                            loc_13078:
00013C26 D368 0012                  		add.w	d1,$12(a0)
00013C2A                            
00013C2A                            locret_1307C:
00013C2A 4E75                       		rts	
00013C2C                            ; End of function Sonic_Move
00013C2C                            
00013C2C                            
00013C2C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013C2C                            
00013C2C                            
00013C2C                            Sonic_MoveLeft:		   ; XREF: Sonic_Move
00013C2C 3028 0014                  		move.w	$14(a0),d0
00013C30 6700                       		beq.s	loc_13086
00013C32 6A00                       		bpl.s	loc_130B2
00013C34                            
00013C34                            loc_13086:
00013C34 08E8 0000 0022             		bset	#0,$22(a0)
00013C3A 6600                       		bne.s	loc_1309A
00013C3C 08A8 0005 0022             		bclr	#5,$22(a0)
00013C42 117C 0001 001D             		move.b	#1,$1D(a0)
00013C48                            
00013C48                            loc_1309A:
00013C48 9045                       		sub.w	d5,d0
00013C4A 3206                       		move.w	d6,d1
00013C4C 4441                       		neg.w	d1
00013C4E B041                       		cmp.w	d1,d0
00013C50 6E00                       		bgt.s	loc_130A6
00013C52 D045                       		add.w	d5,d0
00013C54 B041                       		cmp.w	d1,d0
00013C56 6F00                       		ble.s	loc_130A6
00013C58 3001                       		move.w	d1,d0
00013C5A                            
00013C5A                            loc_130A6:
00013C5A 3140 0014                  		move.w	d0,$14(a0)
00013C5E 117C 0000 001C             		move.b	#0,$1C(a0); use walking animation
00013C64 4E75                       		rts
00013C66                            
00013C66                            ; ===========================================================================
00013C66                            
00013C66                            loc_130B2:				; XREF: Sonic_MoveLeft
00013C66 9044                       		sub.w	d4,d0
00013C68 6400                       		bcc.s	loc_130BA
00013C6A 303C FF80                  		move.w	#-$80,d0
00013C6E                            
00013C6E                            loc_130BA:
00013C6E 3140 0014                  		move.w	d0,$14(a0)
00013C72 1028 0026                  		move.b	$26(a0),d0
00013C76 0600 0020                  		addi.b	#$20,d0
00013C7A 0200 00C0                  		andi.b	#$C0,d0
00013C7E 6600                       		bne.s	locret_130E8
00013C80 0C40 0400                  		cmpi.w	#$400,d0
00013C84 6D00                       		blt.s	locret_130E8
00013C86 117C 000D 001C             		move.b	#$D,$1C(a0)	; use "stopping" animation
00013C8C 08A8 0000 0022             		bclr	#0,$22(a0)
00013C92 303C 00A4                  		move.w	#$A4,d0
00013C96 4EB9 0000 147C             		jsr	(PlaySound_Special).l ;	play stopping sound
00013C9C                            
00013C9C                            locret_130E8:
00013C9C 4E75                       		rts	
00013C9E                            ; End of function Sonic_MoveLeft
00013C9E                            
00013C9E                            
00013C9E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013C9E                            
00013C9E                            
00013C9E                            Sonic_MoveRight:	   ; XREF: Sonic_Move
00013C9E 3028 0014                  		move.w	$14(a0),d0
00013CA2 6B00                       		bmi.s	loc_13118
00013CA4 08A8 0000 0022             		bclr	#0,$22(a0)
00013CAA 6700                       		beq.s	loc_13104
00013CAC 08A8 0005 0022             		bclr	#5,$22(a0)
00013CB2 117C 0001 001D             		move.b	#1,$1D(a0)
00013CB8                            
00013CB8                            loc_13104:
00013CB8 D045                       		add.w	d5,d0
00013CBA B046                       		cmp.w	d6,d0
00013CBC 6D00                       		blt.s	loc_1310C
00013CBE 9045                       		sub.w	d5,d0
00013CC0 B046                       		cmp.w	d6,d0
00013CC2 6C00                       		bge.s	loc_1310C
00013CC4 3006                       		move.w	d6,d0
00013CC6                            
00013CC6                            loc_1310C:
00013CC6 3140 0014                  		move.w	d0,$14(a0)
00013CCA 117C 0000 001C             		move.b	#0,$1C(a0); use walking animation
00013CD0 4E75                       		rts
00013CD2                            
00013CD2                            ; ===========================================================================
00013CD2                            
00013CD2                            loc_13118:				; XREF: Sonic_MoveRight
00013CD2 D044                       		add.w	d4,d0
00013CD4 6400                       		bcc.s	loc_13120
00013CD6 303C 0080                  		move.w	#$80,d0
00013CDA                            
00013CDA                            loc_13120:
00013CDA 3140 0014                  		move.w	d0,$14(a0)
00013CDE 1028 0026                  		move.b	$26(a0),d0
00013CE2 0600 0020                  		addi.b	#$20,d0
00013CE6 0200 00C0                  		andi.b	#$C0,d0
00013CEA 6600                       		bne.s	locret_1314E
00013CEC 0C40 FC00                  		cmpi.w	#-$400,d0
00013CF0 6E00                       		bgt.s	locret_1314E
00013CF2 117C 000D 001C             		move.b	#$D,$1C(a0)	; use "stopping" animation
00013CF8 08E8 0000 0022             		bset	#0,$22(a0)
00013CFE 303C 00A4                  		move.w	#$A4,d0
00013D02 4EB9 0000 147C             		jsr	(PlaySound_Special).l ;	play stopping sound
00013D08                            
00013D08                            locret_1314E:
00013D08 4E75                       		rts	
00013D0A                            ; End of function Sonic_MoveRight
00013D0A                            
00013D0A                            ; ---------------------------------------------------------------------------
00013D0A                            ; Subroutine to	change Sonic's speed as he rolls
00013D0A                            ; ---------------------------------------------------------------------------
00013D0A                            
00013D0A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013D0A                            
00013D0A                            
00013D0A                            Sonic_RollSpeed:			; XREF: Obj01_MdRoll
00013D0A 3C38 F760                  		move.w	($FFFFF760).w,d6
00013D0E E346                       		asl.w	#1,d6
00013D10 3A38 F762                  		move.w	($FFFFF762).w,d5
00013D14 E245                       		asr.w	#1,d5
00013D16 3838 F764                  		move.w	($FFFFF764).w,d4
00013D1A E444                       		asr.w	#2,d4
00013D1C 4A38 F7CA                  		tst.b	($FFFFF7CA).w
00013D20 6600 0000                  		bne.w	loc_131CC
00013D24 4A68 003E                  		tst.w	$3E(a0)
00013D28 6600                       		bne.s	loc_13188
00013D2A 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
00013D30 6700                       		beq.s	loc_1317C	; if not, branch
00013D32 6100 0000                  		bsr.w	Sonic_RollLeft
00013D36                            
00013D36                            loc_1317C:
00013D36 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
00013D3C 6700                       		beq.s	loc_13188	; if not, branch
00013D3E 6100 0000                  		bsr.w	Sonic_RollRight
00013D42                            
00013D42                            loc_13188:
00013D42 3028 0014                  		move.w	$14(a0),d0
00013D46 6700                       		beq.s	loc_131AA
00013D48 6B00                       		bmi.s	loc_1319E
00013D4A 9045                       		sub.w	d5,d0
00013D4C 6400                       		bcc.s	loc_13198
00013D4E 303C 0000                  		move.w	#0,d0
00013D52                            
00013D52                            loc_13198:
00013D52 3140 0014                  		move.w	d0,$14(a0)
00013D56 6000                       		bra.s	loc_131AA
00013D58                            ; ===========================================================================
00013D58                            
00013D58                            loc_1319E:				; XREF: Sonic_RollSpeed
00013D58 D045                       		add.w	d5,d0
00013D5A 6400                       		bcc.s	loc_131A6
00013D5C 303C 0000                  		move.w	#0,d0
00013D60                            
00013D60                            loc_131A6:
00013D60 3140 0014                  		move.w	d0,$14(a0)
00013D64                            
00013D64                            loc_131AA:
00013D64 4A68 0014                  		tst.w	$14(a0)		; is Sonic moving?
00013D68 6600                       		bne.s	loc_131CC	; if yes, branch
00013D6A 08A8 0002 0022             		bclr	#2,$22(a0)
00013D70 117C 0013 0016             		move.b	#$13,$16(a0)
00013D76 117C 0009 0017             		move.b	#9,$17(a0)
00013D7C 117C 0005 001C             		move.b	#5,$1C(a0)	; use "standing" animation
00013D82 5B68 000C                  		subq.w	#5,$C(a0)
00013D86                            
00013D86                            loc_131CC:
00013D86 0C78 0060 F73E             		cmp.w	#$60,($FFFFF73E).w
00013D8C 6700                       		beq.s	@cont2
00013D8E 6400                       		bcc.s	@cont1
00013D90 5878 F73E                  		addq.w	#4,($FFFFF73E).w
00013D94                            		
00013D94                            @cont1:
00013D94 5578 F73E                  		subq.w	#2,($FFFFF73E).w
00013D98                            		
00013D98                            @cont2:
00013D98 1028 0026                  		move.b	$26(a0),d0
00013D9C 4EB9 0000 33DA             		jsr	(CalcSine).l
00013DA2 C1E8 0014                  		muls.w	$14(a0),d0
00013DA6 E080                       		asr.l	#8,d0
00013DA8 3140 0012                  		move.w	d0,$12(a0)
00013DAC C3E8 0014                  		muls.w	$14(a0),d1
00013DB0 E081                       		asr.l	#8,d1
00013DB2 0C41 1000                  		cmpi.w	#$1000,d1
00013DB6 6F00                       		ble.s	loc_131F0
00013DB8 323C 1000                  		move.w	#$1000,d1
00013DBC                            
00013DBC                            loc_131F0:
00013DBC 0C41 F000                  		cmpi.w	#-$1000,d1
00013DC0 6C00                       		bge.s	loc_131FA
00013DC2 323C F000                  		move.w	#-$1000,d1
00013DC6                            
00013DC6                            loc_131FA:
00013DC6 3141 0010                  		move.w	d1,$10(a0)
00013DCA 6000 FDEE                  		bra.w	loc_1300C
00013DCE                            ; End of function Sonic_RollSpeed
00013DCE                            
00013DCE                            
00013DCE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013DCE                            
00013DCE                            
00013DCE                            Sonic_RollLeft:				; XREF: Sonic_RollSpeed
00013DCE 3028 0014                  		move.w	$14(a0),d0
00013DD2 6700                       		beq.s	loc_1320A
00013DD4 6A00                       		bpl.s	loc_13218
00013DD6                            
00013DD6                            loc_1320A:
00013DD6 08E8 0000 0022             		bset	#0,$22(a0)
00013DDC 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
00013DE2 4E75                       		rts	
00013DE4                            ; ===========================================================================
00013DE4                            
00013DE4                            loc_13218:
00013DE4 9044                       		sub.w	d4,d0
00013DE6 6400                       		bcc.s	loc_13220
00013DE8 303C FF80                  		move.w	#-$80,d0
00013DEC                            
00013DEC                            loc_13220:
00013DEC 3140 0014                  		move.w	d0,$14(a0)
00013DF0 4E75                       		rts	
00013DF2                            ; End of function Sonic_RollLeft
00013DF2                            
00013DF2                            
00013DF2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013DF2                            
00013DF2                            
00013DF2                            Sonic_RollRight:			; XREF: Sonic_RollSpeed
00013DF2 3028 0014                  		move.w	$14(a0),d0
00013DF6 6B00                       		bmi.s	loc_1323A
00013DF8 08A8 0000 0022             		bclr	#0,$22(a0)
00013DFE 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
00013E04 4E75                       		rts	
00013E06                            ; ===========================================================================
00013E06                            
00013E06                            loc_1323A:
00013E06 D044                       		add.w	d4,d0
00013E08 6400                       		bcc.s	loc_13242
00013E0A 303C 0080                  		move.w	#$80,d0
00013E0E                            
00013E0E                            loc_13242:
00013E0E 3140 0014                  		move.w	d0,$14(a0)
00013E12 4E75                       		rts	
00013E14                            ; End of function Sonic_RollRight
00013E14                            
00013E14                            ; ---------------------------------------------------------------------------
00013E14                            ; Subroutine to	change Sonic's direction while jumping
00013E14                            ; ---------------------------------------------------------------------------
00013E14                            
00013E14                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013E14                            
00013E14                            
00013E14                            Sonic_ChgJumpDir:		; XREF: Obj01_MdJump; Obj01_MdJump2
00013E14 3C38 F760                  		move.w	($FFFFF760).w,d6
00013E18 3A38 F762                  		move.w	($FFFFF762).w,d5
00013E1C E345                       		asl.w	#1,d5
00013E1E 0828 0004 0022             		btst	#4,$22(a0)	
00013E24 6600                       		bne.s	Obj01_ResetScr2	
00013E26 3028 0010                  		move.w	$10(a0),d0	
00013E2A 0838 0002 F602             		btst	#2,($FFFFF602).w; is left being pressed?	
00013E30 6700                       		beq.s	loc_13278; if not, branch	
00013E32 08E8 0000 0022             		bset	#0,$22(a0)	
00013E38 9045                       		sub.w	d5,d0	
00013E3A 3206                       		move.w	d6,d1	
00013E3C 4441                       		neg.w	d1	
00013E3E B041                       		cmp.w	d1,d0	
00013E40 6E00                       		bgt.s	loc_13278	
00013E42 D045                       		add.w	d5,d0		; +++ remove this frame's acceleration change
00013E44 B041                       		cmp.w	d1,d0		; +++ compare speed with top speed
00013E46 6F00                       		ble.s	loc_13278	; +++ if speed was already greater than the maximum, branch	
00013E48 3001                       		move.w	d1,d0
00013E4A                            
00013E4A                            loc_13278:
00013E4A 0838 0003 F602             		btst	#3,($FFFFF602).w; is right being pressed?	
00013E50 6700                       		beq.s	Obj01_JumpMove; if not, branch	
00013E52 08A8 0000 0022             		bclr	#0,$22(a0)	
00013E58 D045                       		add.w	d5,d0	
00013E5A B046                       		cmp.w	d6,d0	
00013E5C 6D00                       		blt.s	Obj01_JumpMove
00013E5E 9045                       		sub.w	d5,d0		; +++ remove this frame's acceleration change
00013E60 B046                       		cmp.w	d6,d0		; +++ compare speed with top speed
00013E62 6C00                       		bge.s	Obj01_JumpMove	; +++ if speed was already greater than the maximum, branch
00013E64 3006                       		move.w	d6,d0
00013E66                            
00013E66                            Obj01_JumpMove:
00013E66 3140 0010                  		move.w	d0,$10(a0)	; change Sonic's horizontal speed
00013E6A                            
00013E6A                            Obj01_ResetScr2:
00013E6A 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w ; is	the screen in its default position?
00013E70 6700                       		beq.s	loc_132A4	; if yes, branch
00013E72 6400                       		bcc.s	loc_132A0
00013E74 5878 F73E                  		addq.w	#4,($FFFFF73E).w
00013E78                            
00013E78                            loc_132A0:
00013E78 5578 F73E                  		subq.w	#2,($FFFFF73E).w
00013E7C                            
00013E7C                            loc_132A4:
00013E7C 0C68 FC00 0012             		cmpi.w	#-$400,$12(a0)	; is Sonic moving faster than -$400 upwards?
00013E82 6500                       		bcs.s	locret_132D2	; if yes, branch
00013E84 3028 0010                  		move.w	$10(a0),d0
00013E88 3200                       		move.w	d0,d1
00013E8A EA41                       		asr.w	#5,d1
00013E8C 6700                       		beq.s	locret_132D2
00013E8E 6B00                       		bmi.s	loc_132C6
00013E90 9041                       		sub.w	d1,d0
00013E92 6400                       		bcc.s	loc_132C0
00013E94 303C 0000                  		move.w	#0,d0
00013E98                            
00013E98                            loc_132C0:
00013E98 3140 0010                  		move.w	d0,$10(a0)
00013E9C 4E75                       		rts	
00013E9E                            ; ===========================================================================
00013E9E                            
00013E9E                            loc_132C6:
00013E9E 9041                       		sub.w	d1,d0
00013EA0 6500                       		bcs.s	loc_132CE
00013EA2 303C 0000                  		move.w	#0,d0
00013EA6                            
00013EA6                            loc_132CE:
00013EA6 3140 0010                  		move.w	d0,$10(a0)
00013EAA                            
00013EAA                            locret_132D2:
00013EAA 4E75                       		rts	
00013EAC                            ; End of function Sonic_ChgJumpDir
00013EAC                            
00013EAC                            ; ===========================================================================
00013EAC                            ; ---------------------------------------------------------------------------
00013EAC                            ; Unused subroutine to squash Sonic
00013EAC                            ; ---------------------------------------------------------------------------
00013EAC 1028 0026                  		move.b	$26(a0),d0
00013EB0 0600 0020                  		addi.b	#$20,d0
00013EB4 0200 00C0                  		andi.b	#$C0,d0
00013EB8 6600                       		bne.s	locret_13302
00013EBA 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00013EBE 4A41                       		tst.w	d1
00013EC0 6A00                       		bpl.s	locret_13302
00013EC2 317C 0000 0014             		move.w	#0,$14(a0)	; stop Sonic moving
00013EC8 317C 0000 0010             		move.w	#0,$10(a0)
00013ECE 317C 0000 0012             		move.w	#0,$12(a0)
00013ED4 117C 000B 001C             		move.b	#$B,$1C(a0)	; use "warping"	animation
00013EDA                            
00013EDA                            locret_13302:
00013EDA 4E75                       		rts	
00013EDC                            ; ---------------------------------------------------------------------------
00013EDC                            ; Subroutine to	prevent	Sonic leaving the boundaries of	a level
00013EDC                            ; ---------------------------------------------------------------------------
00013EDC                            
00013EDC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013EDC                            
00013EDC                            
00013EDC                            Sonic_LevelBound:			; XREF: Obj01_MdNormal; et al
00013EDC 2228 0008                  		move.l	8(a0),d1
00013EE0 3028 0010                  		move.w	$10(a0),d0
00013EE4 48C0                       		ext.l	d0
00013EE6 E180                       		asl.l	#8,d0
00013EE8 D280                       		add.l	d0,d1
00013EEA 4841                       		swap	d1
00013EEC 3038 F728                  		move.w	($FFFFF728).w,d0
00013EF0 0640 0010                  		addi.w	#$10,d0
00013EF4 B041                       		cmp.w	d1,d0		; has Sonic touched the	side boundary?
00013EF6 6200                       		bhi.s	Boundary_Sides	; if yes, branch
00013EF8 3038 F72A                  		move.w	($FFFFF72A).w,d0
00013EFC 0640 0128                  		addi.w	#$128,d0
00013F00 4A38 F7AA                  		tst.b	($FFFFF7AA).w
00013F04 6600                       		bne.s	loc_13332
00013F06 0640 0040                  		addi.w	#$40,d0
00013F0A                            
00013F0A                            loc_13332:
00013F0A B041                       		cmp.w	d1,d0		; has Sonic touched the	side boundary?
00013F0C 6300                       		bls.s	Boundary_Sides	; if yes, branch
00013F0E                            
00013F0E                            loc_13336:
00013F0E 3038 F72E                  		move.w	($FFFFF72E).w,d0
00013F12 0640 00E0                  		addi.w	#$E0,d0
00013F16 B068 000C                  		cmp.w	$C(a0),d0	; has Sonic touched the	bottom boundary?
00013F1A 6D00                       		blt.s	Boundary_Bottom	; if yes, branch
00013F1C 4E75                       		rts	
00013F1E                            ; ===========================================================================
00013F1E                            
00013F1E                            Jmp_KillSonic:
00013F1E 4EF9 0000 0000             	       jmp    KillSonic
00013F24                            
00013F24                            Boundary_Bottom:
00013F24 3038 F726                  		move.w	($FFFFF726).w,d0
00013F28 3238 F72E                  		move.w	($FFFFF72E).w,d1
00013F2C B240                       		cmp.w	d0,d1			; screen still scrolling down?
00013F2E 6D00                       		blt.s	Boundary_Bottom_locret	; if so, don't kill Sonic
00013F30 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w	; is level SBZ2 ?
00013F36 6600 FFE6                  		bne.w	Jmp_KillSonic		; if not, kill Sonic
00013F3A 0C78 2000 D008             		cmpi.w	#$2000,($FFFFD008).w
00013F40 6500 FFDC                  		bcs.w	Jmp_KillSonic
00013F44 4238 FE30                  		clr.b	($FFFFFE30).w		; clear lamppost counter
00013F48 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w	; restart the level
00013F4E 31FC 0103 FE10             		move.w	#$103,($FFFFFE10).w	; set level to SBZ3 (LZ4)
00013F54                            
00013F54                            Boundary_Bottom_locret:
00013F54 4E75                       		rts	
00013F56                            ; ===========================================================================
00013F56                            
00013F56                            
00013F56                            Boundary_Sides:
00013F56 3140 0008                  		move.w	d0,8(a0)
00013F5A 317C 0000 000A             		move.w	#0,$A(a0)
00013F60 317C 0000 0010             		move.w	#0,$10(a0)	; stop Sonic moving
00013F66 317C 0000 0014             		move.w	#0,$14(a0)
00013F6C 60A0                       		bra.s	loc_13336
00013F6E                            ; End of function Sonic_LevelBound
00013F6E                            
00013F6E                            ; ---------------------------------------------------------------------------
00013F6E                            ; Subroutine allowing Sonic to roll when he's moving
00013F6E                            ; ---------------------------------------------------------------------------
00013F6E                            
00013F6E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013F6E                            
00013F6E                            
00013F6E                            Sonic_Roll:				; XREF: Obj01_MdNormal
00013F6E 4A38 F7CA                  		tst.b	($FFFFF7CA).w
00013F72 6600                       		bne.s	Obj01_NoRoll
00013F74 3028 0014                  		move.w	$14(a0),d0
00013F78 6A00                       		bpl.s	loc_13392
00013F7A 4440                       		neg.w	d0
00013F7C                            
00013F7C                            loc_13392:
00013F7C 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic moving at $80 speed or faster?
00013F80 6500                       		bcs.s	Obj01_NoRoll	; if not, branch
00013F82 1038 F602                  		move.b	($FFFFF602).w,d0
00013F86 0200 000C                  		andi.b	#$C,d0		; is left/right	being pressed?
00013F8A 6600                       		bne.s	Obj01_NoRoll	; if yes, branch
00013F8C 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
00013F92 6600                       		bne.s	Obj01_ChkRoll	; if yes, branch
00013F94                            
00013F94                            Obj01_NoRoll:
00013F94 4E75                       		rts	
00013F96                            ; ===========================================================================
00013F96                            
00013F96                            Obj01_ChkRoll:
00013F96 0828 0002 0022             		btst	#2,$22(a0)	; is Sonic already rolling?
00013F9C 6700                       		beq.s	Obj01_DoRoll	; if not, branch
00013F9E 4E75                       		rts	
00013FA0                            ; ===========================================================================
00013FA0                            
00013FA0                            Obj01_DoRoll:
00013FA0 08E8 0002 0022             		bset	#2,$22(a0)
00013FA6 117C 000E 0016             		move.b	#$E,$16(a0)
00013FAC 117C 0007 0017             		move.b	#7,$17(a0)
00013FB2 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
00013FB8 5A68 000C                  		addq.w	#5,$C(a0)
00013FBC 303C 00BE                  		move.w	#$BE,d0
00013FC0 4EB9 0000 147C             		jsr	(PlaySound_Special).l ;	play rolling sound
00013FC6 4A68 0014                  		tst.w	$14(a0)
00013FCA 6600                       		bne.s	locret_133E8
00013FCC 317C 0200 0014             		move.w	#$200,$14(a0)
00013FD2                            
00013FD2                            locret_133E8:
00013FD2 4E75                       		rts	
00013FD4                            ; End of function Sonic_Roll
00013FD4                            
00013FD4                            ; ---------------------------------------------------------------------------
00013FD4                            ; Subroutine allowing Sonic to jump
00013FD4                            ; ---------------------------------------------------------------------------
00013FD4                            
00013FD4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013FD4                            
00013FD4                            
00013FD4                            Sonic_Jump:                ; XREF: Obj01_MdNormal; Obj01_MdRoll
00013FD4 1038 F603                  		move.b	($FFFFF603).w,d0
00013FD8 0200 0070                          andi.b	#$70,d0		; is A,	B or C 
00013FDC 6700 0000                          beq.w    locret_1348E        ; if not, branch
00013FE0 303C 00A0                          move.w    #$A0,d0    ; set jumping sound
00013FE4 4EB9 0000 1476                     jsr    (PlaySound).l ; play jumping sound
00013FEA 7000                               moveq    #0,d0
00013FEC 1028 0026                          move.b    $26(a0),d0
00013FF0 0600 0080                          addi.b    #$80,d0
00013FF4 4EB9 0000 0000                     jsr    sub_14D48
00013FFA 0C41 0006                          cmpi.w    #6,d1
00013FFE 6D00 0000                          blt.w    locret_1348E
00014002 343C 0680                          move.w    #$680,d2 ; set normal jump speed
00014006 4A38 FE19                          tst.b    ($FFFFFE19).w    ; is Sonic Super?
0001400A 6700                               beq.s    Sonic_JumpContinue2 ; if not, branch
0001400C 343C 0880                          move.w    #$880,d2        ; set higher jump speed if super
00014010                            
00014010                            Sonic_JumpContinue2:
00014010 0828 0006 0022                     btst    #6,$22(a0) ; is player underwater?
00014016 6700                               beq.s    loc_1341C ; if not, branch
00014018 343C 0380                          move.w    #$380,d2 ; if yes, decrease his jump speed
0001401C 4A38 FE19                          tst.b    ($FFFFFE19).w    ; is Sonic Super?
00014020 6700                               beq.s    loc_1341C ; if not, branch
00014022 343C 0530                          move.w    #$530,d2 ; super jump speed
00014026                            
00014026                            loc_1341C:
00014026 7000                       		moveq	#0,d0
00014028 1028 0026                  		move.b	$26(a0),d0
0001402C 0400 0040                  		subi.b	#$40,d0
00014030 4EB9 0000 33DA             		jsr	(CalcSine).l
00014036 C3C2                       		muls.w	d2,d1
00014038 E081                       		asr.l	#8,d1
0001403A D368 0010                  		add.w	d1,$10(a0)	; make Sonic jump
0001403E C1C2                       		muls.w	d2,d0
00014040 E080                       		asr.l	#8,d0
00014042 D168 0012                  		add.w	d0,$12(a0)	; make Sonic jump
00014046 08E8 0001 0022             		bset	#1,$22(a0)
0001404C 08A8 0005 0022             		bclr	#5,$22(a0)
00014052 588F                       		addq.l	#4,sp
00014054 117C 0001 003C             		move.b	#1,$3C(a0)
0001405A 4228 0038                  		clr.b	$38(a0)
0001405E 303C 00A0                  		move.w	#$A0,d0
00014062 4EB9 0000 147C             		jsr	(PlaySound_Special).l ;	play jumping sound
00014068 117C 0013 0016             		move.b	#$13,$16(a0)
0001406E 117C 0009 0017             		move.b	#9,$17(a0)
00014074 0828 0002 0022             		btst	#2,$22(a0)
0001407A 6600                       		bne.s	loc_13490
0001407C 117C 000E 0016             		move.b	#$E,$16(a0)
00014082 117C 0007 0017             		move.b	#7,$17(a0)
00014088 117C 0002 001C             		move.b	#2,$1C(a0)	; use "jumping"	animation
0001408E 08E8 0002 0022             		bset	#2,$22(a0)
00014094 5A68 000C                  		addq.w	#5,$C(a0)
00014098                            
00014098                            locret_1348E:
00014098 4E75                       		rts	
0001409A                            ; ===========================================================================
0001409A                            
0001409A                            loc_13490:
0001409A 08E8 0004 0022             		bset	#4,$22(a0)
000140A0 4E75                       		rts	
000140A2                            ; End of function Sonic_Jump
000140A2                            
000140A2                            
000140A2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000140A2                            
000140A2                            
000140A2                            Sonic_JumpHeight:			; XREF: Obj01_MdJump; Obj01_MdJump2
000140A2 4A28 003C                  		tst.b	$3C(a0)
000140A6 6700                       		beq.s	loc_134C4
000140A8 323C FC00                  		move.w	#-$400,d1
000140AC 0828 0006 0022             		btst	#6,$22(a0)
000140B2 6700                       		beq.s	loc_134AE
000140B4 323C FE00                  		move.w	#-$200,d1
000140B8                            
000140B8                            loc_134AE:
000140B8 B268 0012                  		cmp.w	$12(a0),d1
000140BC 6F00                       		ble.s	locret_134C2
000140BE 1038 F602                  		move.b	($FFFFF602).w,d0
000140C2 0200 0070                  		andi.b	#$70,d0		; is A,	B or C pressed?
000140C6 6600                       		bne.s	locret_134C2	; if yes, branch
000140C8 3141 0012                  		move.w	d1,$12(a0)
000140CC                            
000140CC                            locret_134C2:
000140CC 4A28 0012                  	tst.b	y_vel(a0)		; is Sonic exactly at the height of his jump?
000140D0 6700                       	beq.s	jmp_Sonic_CheckGoSuper	; if yes, test for turning into Super Sonic	
000140D2 4E75                       		rts	
000140D4                            ; ===========================================================================
000140D4                            
000140D4                            loc_134C4:
000140D4 0C68 F040 0012             		cmpi.w	#-$FC0,$12(a0)
000140DA 6C00                       		bge.s	locret_134D2
000140DC 317C F040 0012             		move.w	#-$FC0,$12(a0)
000140E2                            
000140E2                            locret_134D2:
000140E2 4E75                       		rts	
000140E4                            ; End of function Sonic_JumpHeight
000140E4                            
000140E4                            Jmp_Sonic_CheckGoSuper
000140E4 4EF9 0000 0000             	jmp Sonic_CheckGoSuper
000140EA                            ; ---------------------------------------------------------------------------
000140EA                            ; Subroutine to make Sonic perform a spindash
000140EA                            ; ---------------------------------------------------------------------------
000140EA                             
000140EA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000140EA                             
000140EA                             
000140EA                            Sonic_SpinDash:
000140EA 4A28 0039                  		tst.b	$39(a0)			; already Spin Dashing?
000140EE 6600                       		bne.s	loc2_1AC8E		; if set, branch
000140F0 0C28 0008 001C             		cmpi.b	#8,$1C(a0)		; is anim duck
000140F6 6600                       		bne.s	locret2_1AC8C		; if not, return
000140F8 1038 F603                  		move.b	($FFFFF603).w,d0	; read controller
000140FC 0200 0070                  		andi.b	#$70,d0			; pressing A/B/C ?
00014100 6700 0000                  		beq.w	locret2_1AC8C		; if not, return
00014104 117C 001D 001C             		move.b	#$1D,$1C(a0)		; set Spin Dash anim (9 in s2)
0001410A 303C 00D1                  		move.w	#$D1,d0			; spin sound ($E0 in s2)
0001410E 4EB9 0000 147C             		jsr	(PlaySound_Special).l	; play spin sound
00014114 588F                       		addq.l	#4,sp			; Add 4 bytes to the stack return address to skip Sonic_Jump on next rts to Obj01_MdNormal, preventing conflicts with button presses.
00014116 117C 0001 0039             		move.b	#1,$39(a0)		; set Spin Dash flag
0001411C 317C 0000 003A             		move.w	#0,$3A(a0)		; set charge count to 0
00014122 0C28 000C 0028             		cmpi.b	#$C,$28(a0)		; ??? oxygen remaining?
00014128 11FC 0002 D1DC             		move.b	#2,($FFFFD1DC).w	; Set the Spin Dash dust animation to $2.
0001412E                            						; the smoke/dust object
0001412E                            loc2_1AC84:
0001412E 6100 FDAC                  		bsr.w	Sonic_LevelBound
00014132 6100 0000                  		bsr.w	Sonic_AnglePos
00014136                            
00014136                            locret2_1AC8C:
00014136 4E75                       		rts	
00014138                            ; ---------------------------------------------------------------------------
00014138                            
00014138                            loc2_1AC8E:
00014138 117C 001D 001C             		move.b	#$1D,$1C(a0)
0001413E 1038 F602                  		move.b	($FFFFF602).w,d0	; read controller
00014142 0800 0001                  		btst	#1,d0			; check down button
00014146 6600 0000                  		bne.w	loc2_1AD30		; if set, branch
0001414A 117C 000E 0016             		move.b	#$E,$16(a0)		; $16(a0) is height/2
00014150 117C 0007 0017             		move.b	#7,$17(a0)		; $17(a0) is width/2
00014156 117C 0002 001C             		move.b	#2,$1C(a0)		; set animation to roll
0001415C 5A68 000C                  		addq.w	#5,$C(a0)		; $C(a0) is Y coordinate
00014160 117C 0000 0039             		move.b	#0,$39(a0)		; clear Spin Dash flag
00014166 7000                       		moveq	#0,d0
00014168 1028 003A                  		move.b	$3A(a0),d0		; copy charge count
0001416C D040                       		add.w	d0,d0			; double it
0001416E 317B 0000 0014             		move.w	Dash_Speeds(pc,d0.w),$14(a0) ; get normal speed
00014174 3028 0014                  		move.w	$14(a0),d0		; get inertia
00014178 0440 0800                  		subi.w	#$800,d0		; subtract $800
0001417C D040                       		add.w	d0,d0			; double it
0001417E 0240 1F00                  		andi.w	#$1F00,d0		; mask it against $1F00
00014182 4440                       		neg.w	d0			; negate it
00014184 0640 2000                  		addi.w	#$2000,d0		; add $2000
00014188 31C0 C904                  		move.w	d0,($FFFFC904).w	; move to $C904
0001418C 0828 0000 0022             		btst	#0,$22(a0)		; is sonic facing right?
00014192 6700                       		beq.s	loc2_1ACF4		; if not, branch
00014194 4468 0014                  		neg.w	$14(a0)			; negate inertia
00014198                            ; ===========================================================================
00014198                            jmp_loc2_1AD78:
00014198 4EF9 0000 0000             	jmp loc2_1AD78
0001419E                            loc2_1ACF4:
0001419E 08E8 0002 0022             		bset	#2,$22(a0)		; set unused (in s1) flag
000141A4 11FC 0000 D1DC             		move.b	#0,($FFFFD1DC).w	; clear Spin Dash dust animation.
000141AA 303C 00BC                  		move.w	#$BC,d0			; spin release sound
000141AE 4EB9 0000 147C             		jsr	(PlaySound_Special).l	; play it!
000141B4 60E2                       		bra.s	jmp_loc2_1AD78
000141B6                            ; ===========================================================================
000141B6                            ;zafast:
000141B6                            ;		move.w	SuperDash_Speeds(pc,d0.w),$14(a0) ; get super speed
000141B6                            ;		move.w	$14(a0),d0		; get inertia
000141B6                            ;		subi.w	#$800,d0		; subtract $800
000141B6                            ;		add.w	d0,d0			; double it
000141B6                            ;		andi.w	#$1F00,d0		; mask it against $1F00
000141B6                            ;		neg.w	d0			; negate it
000141B6                            ;		addi.w	#$2000,d0		; add $2000
000141B6                            ;		move.w	d0,($FFFFC904).w	; move to $C904
000141B6                            ;		btst	#0,$22(a0)		; is sonic facing right?
000141B6                            ;		beq.s	loc2_1ACF4		; if not, branch
000141B6                            ;		neg.w	$14(a0)			; negate inertia
000141B6                            
000141B6                            ; ===========================================================================
000141B6                            Dash_Speeds:
000141B6 0800                       		dc.w  $800		; 0
000141B8 0880                       		dc.w  $880		; 1
000141BA 0900                       		dc.w  $900		; 2
000141BC 0980                       		dc.w  $980		; 3
000141BE 0A00                       		dc.w  $A00		; 4
000141C0 0A80                       		dc.w  $A80		; 5
000141C2 0B00                       		dc.w  $B00		; 6
000141C4 0B80                       		dc.w  $B80		; 7
000141C6 0C00                       		dc.w  $C00		; 8
000141C8                            ;SuperDash_Speeds:
000141C8                            ;		dc.w  $B00		; 0
000141C8                            ;		dc.w  $B80		; 1
000141C8                            ;		dc.w  $C00		; 2
000141C8                            ;		dc.w  $C80		; 3
000141C8                            ;		dc.w  $D00		; 4
000141C8                            ;		dc.w  $D80		; 5
000141C8                            ;		dc.w  $E00		; 6
000141C8                            ;		dc.w  $E80		; 7
000141C8                            ;		dc.w  $F00		; 8		
000141C8                            ; ===========================================================================
000141C8                            
000141C8                            loc2_1AD30:				; If still charging the dash...
000141C8 4A68 003A                  		tst.w	$3A(a0)		; check charge count
000141CC 6700                       		beq.s	loc2_1AD48	; if zero, branch
000141CE 3028 003A                  		move.w	$3A(a0),d0	; otherwise put it in d0
000141D2 EA48                       		lsr.w	#5,d0		; shift right 5 (divide it by 32)
000141D4 9168 003A                  		sub.w	d0,$3A(a0)	; subtract from charge count
000141D8 6400                       		bcc.s	loc2_1AD48	; ??? branch if carry clear
000141DA 317C 0000 003A             		move.w	#0,$3A(a0)	; set charge count to 0
000141E0                            
000141E0                            loc2_1AD48:
000141E0 1038 F603                  		move.b	($FFFFF603).w,d0	; read controller
000141E4 0200 0070                  		andi.b	#$70,d0			; pressing A/B/C?
000141E8 6700 0000                  		beq.w	loc2_1AD78		; if not, branch
000141EC 317C 1D00 001C             		move.w	#$1D00,$1C(a0)		; reset spdsh animation
000141F2 303C 00D1                  		move.w	#$D1,d0			; was $E0 in sonic 2
000141F6 11FC 0002 D1DC             		move.b	#2,$FFFFD1DC.w	; Set the Spin Dash dust animation to $2.		
000141FC 4EB9 0000 147C             		jsr	(PlaySound_Special).l	; play charge sound
00014202 0668 0200 003A             		addi.w	#$200,$3A(a0)		; increase charge count
00014208 0C68 0800 003A             		cmpi.w	#$800,$3A(a0)		; check if it's maxed
0001420E 6500                       		bcs.s	loc2_1AD78		; if not, then branch
00014210 317C 0800 003A             		move.w	#$800,$3A(a0)		; reset it to max
00014216                            
00014216                            loc2_1AD78:
00014216 588F                       		addq.l	#4,sp			; increase stack ptr
00014218 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w
0001421E 6700                       		beq.s	loc2_1AD8C
00014220 6400                       		bcc.s	loc2_1AD88
00014222 5878 F73E                  		addq.w	#4,($FFFFF73E).w
00014226                            
00014226                            loc2_1AD88:
00014226 5578 F73E                  		subq.w	#2,($FFFFF73E).w
0001422A                            
0001422A                            loc2_1AD8C:
0001422A 6100 FCB0                  		bsr.w	Sonic_LevelBound
0001422E 6100 0000                  		bsr.w	Sonic_AnglePos
00014232                            		;move.w	#$60,($FFFFF73E).w	; reset looking up/down
00014232 4E75                       		rts
00014234                            ; End of subroutine Sonic_SpinDash
00014234                            
00014234                            SpinDash_dust:
00014234                            Sprite_1DD20:				; DATA XREF: ROM:0001600C?o
00014234 7000                       		moveq	#0,d0
00014236 1028 0024                  		move.b	$24(a0),d0
0001423A 323B 0000                  		move	off_1DD2E(pc,d0.w),d1
0001423E 4EFB 1000                  		jmp	off_1DD2E(pc,d1.w)
00014242                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00014242 0000                       off_1DD2E:	dc loc_1DD36-off_1DD2E; 0 ; DATA XREF: h+6DBA?o h+6DBC?o ...
00014244 0000                       		dc loc_1DD90-off_1DD2E; 1
00014246 0000                       		dc loc_1DE46-off_1DD2E; 2
00014248 0000                       		dc loc_1DE4A-off_1DD2E; 3
0001424A                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
0001424A                            
0001424A                            loc_1DD36:				; DATA XREF: h+6DBA?o
0001424A 5428 0024                  		addq.b	#2,$24(a0)
0001424E 217C 0000 0000 0004        		move.l	#MapUnc_1DF5E,4(a0)
00014256 0028 0004 0001             		or.b	#4,1(a0)
0001425C 117C 0001 0018             		move.b	#1,$18(a0)
00014262 117C 0010 0019             		move.b	#$10,$19(a0)
00014268 317C 07A0 0002             		move	#$7A0,2(a0)
0001426E 317C D000 003E             		move	#-$3000,$3E(a0)
00014274 317C F400 003C             		move	#$F400,$3C(a0)
0001427A B0FC D1C0                  		cmp	#-$2E40,a0
0001427E 6700                       		beq.s	loc_1DD8C
00014280 117C 0001 0034             		move.b	#1,$34(a0)
00014286                            ;		cmp	#2,($FFFFFF70).w
00014286                            ;		beq.s	loc_1DD8C
00014286                            ;		move	#$48C,2(a0)
00014286                            ;		move	#-$4FC0,$3E(a0)
00014286                            ;		move	#-$6E80,$3C(a0)
00014286                            
00014286                            loc_1DD8C:				; CODE XREF: h+6DF6?j h+6E04?j
00014286                            ;		bsr.w	sub_16D6E
00014286                            
00014286                            loc_1DD90:				; DATA XREF: h+6DBA?o
00014286 3468 003E                  		movea.w	$3E(a0),a2
0001428A 7000                       		moveq	#0,d0
0001428C 1028 001C                  		move.b	$1C(a0),d0
00014290 D040                       		add	d0,d0
00014292 323B 0000                  		move	off_1DDA4(pc,d0.w),d1
00014296 4EFB 1000                  		jmp	off_1DDA4(pc,d1.w)
0001429A                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
0001429A 0000                       off_1DDA4:	dc loc_1DE28-off_1DDA4; 0 ; DATA XREF: h+6E30?o h+6E32?o ...
0001429C 0000                       		dc loc_1DDAC-off_1DDA4; 1
0001429E 0000                       		dc loc_1DDCC-off_1DDA4; 2
000142A0 0000                       		dc loc_1DE20-off_1DDA4; 3
000142A2                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
000142A2                            
000142A2                            loc_1DDAC:				; DATA XREF: h+6E30?o
000142A2 3178 F646 000C             		move	($FFFFF646).w,$C(a0)
000142A8 4A28 001D                  		tst.b	$1D(a0)
000142AC 6600                       		bne.s	loc_1DE28
000142AE 316A 0008 0008             		move	8(a2),8(a0)
000142B4 117C 0000 0022             		move.b	#0,$22(a0)
000142BA 0268 7FFF 0002             		and	#$7FFF,2(a0)
000142C0 6000                       		bra.s	loc_1DE28
000142C2                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
000142C2                            
000142C2                            loc_1DDCC:				; DATA XREF: h+6E30?o
000142C2                            ;		cmp.b	#$C,$28(a2)
000142C2                            ;		bcs.s	loc_1DE3E
000142C2 0C2A 0004 0024             		cmp.b	#4,$24(a2)
000142C8 6400                       		bcc.s	loc_1DE3E
000142CA 4A2A 0039                  		tst.b	$39(a2)
000142CE 6700                       		beq.s	loc_1DE3E
000142D0 316A 0008 0008             		move	8(a2),8(a0)
000142D6 316A 000C 000C             		move	$C(a2),$C(a0)
000142DC 116A 0022 0022             		move.b	$22(a2),$22(a0)
000142E2 0228 0001 0022             		and.b	#1,$22(a0)
000142E8 4A28 0034                  		tst.b	$34(a0)
000142EC 6700                       		beq.s	loc_1DE06
000142EE 5968 000C                  		sub	#4,$C(a0)
000142F2                            
000142F2                            loc_1DE06:				; CODE XREF: h+6E8A?j
000142F2 4A28 001D                  		tst.b	$1D(a0)
000142F6 6600                       		bne.s	loc_1DE28
000142F8 0268 7FFF 0002             		and	#$7FFF,2(a0)
000142FE 4A6A 0002                  		tst	2(a2)
00014302 6A00                       		bpl.s	loc_1DE28
00014304 0068 8000 0002             		or	#-$8000,2(a0)
0001430A                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
0001430A                            
0001430A                            loc_1DE20:				; DATA XREF: h+6E30?o
0001430A                            loc_1DE28:				; CODE XREF: h+6E42?j h+6E56?j ...
0001430A 43F9 0000 0000             		lea	(off_1DF38).l,a1
00014310 4EB9 0000 B1F6             		jsr	AnimateSprite
00014316 6100 0000                  		bsr.w	loc_1DEE4
0001431A 4EFA 9DC8                  		jmp	DisplaySprite
0001431E                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
0001431E                            
0001431E                            loc_1DE3E:				; CODE XREF: h+6E5E?j h+6E66?j ...
0001431E 117C 0000 001C             		move.b	#0,$1C(a0)
00014324 4E75                       		rts	
00014326                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00014326                            
00014326                            loc_1DE46:				; DATA XREF: h+6DBA?o
00014326 6000 9DF8                  		bra.w	DeleteObject
0001432A                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
0001432A                            
0001432A                            
0001432A                            
0001432A                            loc_1DE4A:
0001432A 3468 003E                  	movea.w	$3E(a0),a2
0001432E 7210                       	moveq	#$10,d1
00014330 0C2A 000D 001C             	cmp.b	#$D,$1C(a2)
00014336 6700                       	beq.s	loc_1DE64
00014338 7206                       	moveq	#$6,d1
0001433A 0C2A 0003 0021             	cmp.b	#$3,$21(a2)
00014340 6700                       	beq.s	loc_1DE64
00014342 117C 0002 0024             	move.b	#2,$24(a0)
00014348 117C 0000 0032             	move.b	#0,$32(a0)
0001434E 4E75                       	rts
00014350                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00014350                            
00014350                            loc_1DE64:				; CODE XREF: h+6EE0?j
00014350 5328 0032                  		subq.b	#1,$32(a0)
00014354 6A00                       		bpl.s	loc_1DEE0
00014356 117C 0003 0032             		move.b	#3,$32(a0)
0001435C 4EBA A21C                  		jsr	SingleObjLoad
00014360 6600                       		bne.s	loc_1DEE0
00014362 1290                       		move.b	0(a0),0(a1)
00014364 336A 0008 0008             		move	8(a2),8(a1)
0001436A 336A 000C 000C             		move	$C(a2),$C(a1)
00014370 4A28 0034                  		tst.b	$34(a0)
00014374 6700                       		beq.s	loc_1DE9A
00014376 5941                       		sub	#4,d1
00014378                            
00014378                            loc_1DE9A:				; CODE XREF: h+6F1E?j
00014378 D369 000C                  		add	d1,$C(a1)
0001437C 137C 0000 0022             		move.b	#0,$22(a1)
00014382 137C 0003 001C             		move.b	#3,$1C(a1)
00014388 5429 0024                  		addq.b	#2,$24(a1)
0001438C 2368 0004 0004             		move.l	4(a0),4(a1)
00014392 1368 0001 0001             		move.b	1(a0),1(a1)
00014398 137C 0001 0018             		move.b	#1,$18(a1)
0001439E 137C 0004 0019             		move.b	#4,$19(a1)
000143A4 3368 0002 0002             		move	2(a0),2(a1)
000143AA 3368 003E 003E             		move	$3E(a0),$3E(a1)
000143B0 0269 7FFF 0002             		and	#$7FFF,2(a1)
000143B6 4A6A 0002                  		tst	2(a2)
000143BA 6A00                       		bpl.s	loc_1DEE0
000143BC 0069 8000 0002             		or	#-$8000,2(a1)
000143C2                            
000143C2                            loc_1DEE0:				; CODE XREF: h+6EF4?j h+6F00?j ...
000143C2 6100                       		bsr.s	loc_1DEE4
000143C4 4E75                       		rts	
000143C6                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
000143C6                            
000143C6                            loc_1DEE4:				; CODE XREF: h+6EC0?p h+6F6C?p
000143C6 7000                       		moveq	#0,d0
000143C8 1028 001A                  		move.b	$1A(a0),d0
000143CC B028 0030                  		cmp.b	$30(a0),d0
000143D0 6700 0000                  		beq.w	locret_1DF36
000143D4 1140 0030                  		move.b	d0,$30(a0)
000143D8 45F9 0000 0000             		lea	(off_1E074).l,a2
000143DE D040                       		add	d0,d0
000143E0 D4F2 0000                  		add	(a2,d0.w),a2
000143E4 3A1A                       		move	(a2)+,d5
000143E6 5345                       		subq	#1,d5
000143E8 6B00 0000                  		bmi.w	locret_1DF36
000143EC 3828 003C                  		move $3C(a0),d4
000143F0                            
000143F0                            loc_1DF0A:				; CODE XREF: h+6FBE?j
000143F0 7200                       		moveq	#0,d1
000143F2 321A                       		move	(a2)+,d1
000143F4 3601                       		move	d1,d3
000143F6 E04B                       		lsr.w	#8,d3
000143F8 0243 00F0                  		and	#$F0,d3	; 'ð'
000143FC 0643 0010                  		add	#$10,d3
00014400 0241 0FFF                  		and	#$FFF,d1
00014404 EB89                       		lsl.l	#5,d1
00014406 0681 0000 0000             		add.l	#Art_Dust,d1
0001440C 3404                       		move	d4,d2
0001440E D843                       		add	d3,d4
00014410 D843                       		add	d3,d4
00014412 4EB9 0000 1520             		jsr	(QueueDMATransfer).l
00014418 51CD FFD6                  		dbf	d5,loc_1DF0A
0001441C 4E75                           rts
0001441E                            
0001441E                            locret_1DF36:				; CODE XREF: h+6F7A?j h+6F90?j
0001441E 4E75                       		rts	
00014420                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00014420 0000                       off_1DF38:	dc byte_1DF40-off_1DF38; 0 ; DATA XREF: h+6EB4?o h+6FC4?o ...
00014422 0000                       		dc byte_1DF43-off_1DF38; 1
00014424 0000                       		dc byte_1DF4F-off_1DF38; 2
00014426 0000                       		dc byte_1DF58-off_1DF38; 3
00014428 1F00 FF                    byte_1DF40:	dc.b $1F,  0,$FF	; 0 ; DATA XREF: h+6FC4?o
0001442B 0301 0203 0405 0607 0809+  byte_1DF43:	dc.b   3,  1,  2,  3,  4,  5,  6,  7,  8,  9,$FD,  0; 0	; DATA XREF: h+6FC4?o
00014437 010A 0B0C 0D0E 0F10 FF     byte_1DF4F:	dc.b   1, $A, $B, $C, $D, $E, $F,$10,$FF; 0 ; DATA XREF: h+6FC4?o
00014440 0311 1213 14FC             byte_1DF58:	dc.b   3,$11,$12,$13,$14,$FC; 0	; DATA XREF: h+6FC4?o
00014446                            
00014446                            return_1ABA4:
00014446 4E75                       	rts
00014448                            Sonic_CheckGoSuper:
00014448                            	include "_inc\SuperSonic.asm"
00014448                            ; ---------------------------------------------------------------------------
00014448                            ; Subroutine called at the peak of a jump that transforms Sonic into Super Sonic
00014448                            ; if he has enough rings and emeralds
00014448                            ; ---------------------------------------------------------------------------
00014448                            
00014448                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
00014448                            ; loc_1AB38: test_set_SS:
00014448 4A38 FE19                  	tst.b	(Super_Sonic_flag).w	; is Sonic already Super?
0001444C 66F8                       	bne.s	return_1ABA4		; if yes, branch
0001444E                            ;	cmpi.b	#6,(Emerald_count).w	; does Sonic have exactly 7 emeralds?
0001444E                            ;	bne.s	return_1ABA4		; if not, branch
0001444E 0C78 0032 FE20             	cmpi.w	#50,(Ring_count).w	; does Sonic have at least 50 rings?
00014454 65F0                       	bcs.s	return_1ABA4		; if not, branch
00014456                            
00014456 11FC 0001 F65F             	move.b	#1,(Super_Sonic_palette).w
0001445C 11FC 000F F65E             	move.b	#$F,(Palette_frame_count).w
00014462 11FC 0001 FE19             	move.b	#1,(Super_Sonic_flag).w
00014468 117C 0081 002A             	move.b	#$81,obj_control(a0)
0001446E 117C 001F 001C             	move.b	#$1F,anim(a0)			; use transformation animation
00014474                            ;	move.b	#$7E,(Object_RAM+$2040).w	; Obj7E is the ending sonic which is why it's commented out
00014474 31FC 0A00 F760             	move.w	#$A00,(Sonic_top_speed).w
0001447A 31FC 0030 F762             	move.w	#$30,(Sonic_acceleration).w
00014480 31FC 0100 F764             	move.w	#$100,(Sonic_deceleration).w
00014486 317C 0000 0032             	move.w	#0,invincibility_time(a0)
0001448C 11FC 0001 FE2D             		move.b	#1,($FFFFFE2D).w ; make	Sonic invincible		move.b	#$38,($FFFFD200).w ; load stars	object ($3801)
00014492 11FC 0001 D21C             		move.b	#1,($FFFFD21C).w
00014498 11FC 0038 D240             		move.b	#$38,($FFFFD240).w ; load stars	object ($3802)
0001449E 11FC 0002 D25C             		move.b	#2,($FFFFD25C).w
000144A4 11FC 0038 D280             		move.b	#$38,($FFFFD280).w ; load stars	object ($3803)
000144AA 11FC 0003 D29C             		move.b	#3,($FFFFD29C).w
000144B0 11FC 0038 D2C0             		move.b	#$38,($FFFFD2C0).w ; load stars	object ($3804)
000144B6 11FC 0004 D2DC             		move.b	#4,($FFFFD2DC).w	
000144BC 303C 00C3                          move.w	#$C3,d0         ; 
000144C0 4EB9 0000 1476             	jsr	(PlaySound).l	; Play special ring sound effect.
000144C6 303C 009F                  	move.w	#$9F,d0         
000144CA 4EF9 0000 147C             	jmp	(PlaySound_Special).l	; load the invincibility song and return also playmusic doesn't exist
000144D0                            
000144D0                            ; End of subroutine Sonic_CheckGoSuper
000144D0                            
000144D0                            ; ---------------------------------------------------------------------------
000144D0                            ; Subroutine doing the extra logic for Super Sonic
000144D0                            ; ---------------------------------------------------------------------------
000144D0                            
000144D0                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
000144D0                            rts:
000144D0 4E75                       	rts
000144D2                            ; loc_1ABA6:
000144D2                            Sonic_Super:
000144D2 4A38 FE19                  	tst.b	(Super_Sonic_flag).w	; Ignore all this code if not Super Sonic
000144D6 6700 0000                  	beq.w	return_1AC3C
000144DA 4A38 FE1E                  	tst.b	(Update_HUD_timer).w
000144DE 6700                       	beq.s	Sonic_RevertToNormal ; ?
000144E0 5378 F670                  	subq.w	#1,(Super_Sonic_frame_count).w
000144E4 6A00 0000                  	bpl.w	return_1AC3C
000144E8 31FC 003C F670             	move.w	#60,(Super_Sonic_frame_count).w	; Reset frame counter to 60
000144EE 4A78 FE20                  	tst.w	(Ring_count).w
000144F2 6700                       	beq.s	Sonic_RevertToNormal
000144F4 0038 0001 FE1D             	ori.b	#1,(Update_HUD_rings).w
000144FA 0C78 0001 FE20             	cmpi.w	#1,(Ring_count).w
00014500 6700                       	beq.s	@update
00014502 0C78 000A FE20             	cmpi.w	#10,(Ring_count).w
00014508 6700                       	beq.s	@update
0001450A 0C78 0064 FE20             	cmpi.w	#100,(Ring_count).w
00014510 6600                       	bne.s	@update2
00014512                            @update
00014512 0038 0080 FE1D             	ori.b	#$80,(Update_HUD_rings).w
00014518                            @update2
00014518 5378 FE20                  	subq.w	#1,(Ring_count).w
0001451C 66B2                       	bne.s	rts
0001451E                            ; loc_1ABF2:
0001451E                            Sonic_RevertToNormal:
0001451E 11FC 0002 F65F             	move.b	#2,(Super_Sonic_palette).w	; Remove rotating palette
00014524 31FC 0028 F65C             	move.w	#$28,($FFFFF65C).w	; Unknown
0001452A 11FC 0000 FE19             	move.b	#0,(Super_Sonic_flag).w
00014530 117C 0001 001D             	move.b	#1,next_anim(a0)	; Change animation back to normal ?
00014536 317C 0001 0032             	move.w	#1,invincibility_time(a0)	; Remove invincibility
0001453C 31FC 0600 F760             	move.w	#$600,(Sonic_top_speed).w
00014542 31FC 000C F762             	move.w	#$C,(Sonic_acceleration).w
00014548 31FC 0080 F764             	move.w	#$80,(Sonic_deceleration).w
0001454E 0828 0006 0022             	btst	#6,status(a0)	; Check if underwater, return if not
00014554 6700                       	beq.s	return_1AC3C
00014556 31FC 0300 F760             	move.w	#$300,(Sonic_top_speed).w
0001455C 31FC 0006 F762             	move.w	#6,(Sonic_acceleration).w
00014562 31FC 0040 F764             	move.w	#$40,(Sonic_deceleration).w
00014568                            
00014568                            return_1AC3C:
00014568 4E75                       	rts
0001456A                            ; End of subroutine Sonic_Super
0001456A                            ; End of subroutine Sonic_Super
0001456A                            ; -------------------------------------------------------------------------------
0001456A                            ; Unknown Sprite Mappings
0001456A                            ; -------------------------------------------------------------------------------
0001456A                            MapUnc_1DF5E:
0001456A 0000                       	dc word_1DF8A-MapUnc_1DF5E; 0
0001456C 0000                       	dc word_1DF8C-MapUnc_1DF5E; 1
0001456E 0000                       	dc word_1DF96-MapUnc_1DF5E; 2
00014570 0000                       	dc word_1DFA0-MapUnc_1DF5E; 3
00014572 0000                       	dc word_1DFAA-MapUnc_1DF5E; 4
00014574 0000                       	dc word_1DFB4-MapUnc_1DF5E; 5
00014576 0000                       	dc word_1DFBE-MapUnc_1DF5E; 6
00014578 0000                       	dc word_1DFC8-MapUnc_1DF5E; 7
0001457A 0000                       	dc word_1DFD2-MapUnc_1DF5E; 8
0001457C 0000                       	dc word_1DFDC-MapUnc_1DF5E; 9
0001457E 0000                       	dc word_1DFE6-MapUnc_1DF5E; 10
00014580 0000                       	dc word_1DFF0-MapUnc_1DF5E; 11
00014582 0000                       	dc word_1DFFA-MapUnc_1DF5E; 12
00014584 0000                       	dc word_1E004-MapUnc_1DF5E; 13
00014586 0000                       	dc word_1E016-MapUnc_1DF5E; 14
00014588 0000                       	dc word_1E028-MapUnc_1DF5E; 15
0001458A 0000                       	dc word_1E03A-MapUnc_1DF5E; 16
0001458C 0000                       	dc word_1E04C-MapUnc_1DF5E; 17
0001458E 0000                       	dc word_1E056-MapUnc_1DF5E; 18
00014590 0000                       	dc word_1E060-MapUnc_1DF5E; 19
00014592 0000                       	dc word_1E06A-MapUnc_1DF5E; 20
00014594 0000                       	dc word_1DF8A-MapUnc_1DF5E; 21
00014596 00                         word_1DF8A:	dc.b 0
00014597 01                         word_1DF8C:	dc.b 1
00014598 F20D 0000 F0               	dc.b $F2, $0D, $0, 0,$F0; 0
0001459D 01                         word_1DF96:	dc.b 1
0001459E E20F 0000 F0               	dc.b $E2, $0F, $0, 0,$F0; 0
000145A3 01                         word_1DFA0:	dc.b 1
000145A4 E20F 0000 F0               	dc.b $E2, $0F, $0, 0,$F0; 0
000145A9 01                         word_1DFAA:	dc.b 1
000145AA E20F 0000 F0               	dc.b $E2, $0F, $0, 0,$F0; 0
000145AF 01                         word_1DFB4:	dc.b 1
000145B0 E20F 0000 F0               	dc.b $E2, $0F, $0, 0,$F0; 0
000145B5 01                         word_1DFBE:	dc.b 1
000145B6 E20F 0000 F0               	dc.b $E2, $0F, $0, 0,$F0; 0
000145BB 01                         word_1DFC8:	dc.b 1
000145BC F20D 0000 F0               	dc.b $F2, $0D, $0, 0,$F0; 0
000145C1 01                         word_1DFD2:	dc.b 1
000145C2 F20D 0000 F0               	dc.b $F2, $0D, $0, 0,$F0; 0
000145C7 01                         word_1DFDC:	dc.b 1
000145C8 F20D 0000 F0               	dc.b $F2, $0D, $0, 0,$F0; 0
000145CD 01                         word_1DFE6:	dc.b 1
000145CE 040D 0000 E0               	dc.b $4, $0D, $0, 0,$E0; 0
000145D3 01                         word_1DFF0:	dc.b 1
000145D4 040D 0000 E0               	dc.b $4, $0D, $0, 0,$E0; 0
000145D9 01                         word_1DFFA:	dc.b 1
000145DA 040D 0000 E0               	dc.b $4, $0D, $0, 0,$E0; 0
000145DF 02                         word_1E004:	dc.b 2
000145E0 F401 0000 E8               	dc.b $F4, $01, $0, 0,$E8; 0
000145E5 040D 0002 E0               	dc.b $4, $0D, $0, 2,$E0; 4
000145EA 02                         word_1E016:	dc.b 2
000145EB F405 0000 E8               	dc.b $F4, $05, $0, 0,$E8; 0
000145F0 040D 0004 E0               	dc.b $4, $0D, $0, 4,$E0; 4
000145F5 02                         word_1E028:	dc.b 2
000145F6 F409 0000 E0               	dc.b $F4, $09, $0, 0,$E0; 0
000145FB 040D 0006 E0               	dc.b $4, $0D, $0, 6,$E0; 4
00014600 02                         word_1E03A:	dc.b 2
00014601 F409 0000 E0               	dc.b $F4, $09, $0, 0,$E0; 0
00014606 040D 0006 E0               	dc.b $4, $0D, $0, 6,$E0; 4
0001460B 01                         word_1E04C:	dc.b 1
0001460C F805 0000 F8               	dc.b $F8, $05, $0, 0,$F8; 0
00014611 01                         word_1E056:	dc.b 1
00014612 F805 0004 F8               	dc.b $F8, $05, $0, 4,$F8; 0
00014617 01                         word_1E060:	dc.b 1
00014618 F805 0008 F8               	dc.b $F8, $05, $0, 8,$F8; 0
0001461D 01                         word_1E06A:	dc.b 1
0001461E F805 000C F8               	dc.b $F8, $05, $0, $C,$F8; 0
00014623 00                         	dc.b 0
00014624 0000                       off_1E074:	dc word_1E0A0-off_1E074; 0
00014626 0000                       	dc word_1E0A2-off_1E074; 1
00014628 0000                       	dc word_1E0A6-off_1E074; 2
0001462A 0000                       	dc word_1E0AA-off_1E074; 3
0001462C 0000                       	dc word_1E0AE-off_1E074; 4
0001462E 0000                       	dc word_1E0B2-off_1E074; 5
00014630 0000                       	dc word_1E0B6-off_1E074; 6
00014632 0000                       	dc word_1E0BA-off_1E074; 7
00014634 0000                       	dc word_1E0BE-off_1E074; 8
00014636 0000                       	dc word_1E0C2-off_1E074; 9
00014638 0000                       	dc word_1E0C6-off_1E074; 10
0001463A 0000                       	dc word_1E0CA-off_1E074; 11
0001463C 0000                       	dc word_1E0CE-off_1E074; 12
0001463E 0000                       	dc word_1E0D2-off_1E074; 13
00014640 0000                       	dc word_1E0D8-off_1E074; 14
00014642 0000                       	dc word_1E0DE-off_1E074; 15
00014644 0000                       	dc word_1E0E4-off_1E074; 16
00014646 0000                       	dc word_1E0EA-off_1E074; 17
00014648 0000                       	dc word_1E0EA-off_1E074; 18
0001464A 0000                       	dc word_1E0EA-off_1E074; 19
0001464C 0000                       	dc word_1E0EA-off_1E074; 20
0001464E 0000                       	dc word_1E0EC-off_1E074; 21
00014650 0000                       word_1E0A0:	dc 0
00014652 0001                       word_1E0A2:	dc 1
00014654 7000                       	dc $7000
00014656 0001                       word_1E0A6:	dc 1
00014658 F008                       	dc $F008
0001465A 0001                       word_1E0AA:	dc 1
0001465C F018                       	dc $F018
0001465E 0001                       word_1E0AE:	dc 1
00014660 F028                       	dc $F028
00014662 0001                       word_1E0B2:	dc 1
00014664 F038                       	dc $F038
00014666 0001                       word_1E0B6:	dc 1
00014668 F048                       	dc $F048
0001466A 0001                       word_1E0BA:	dc 1
0001466C 7058                       	dc $7058
0001466E 0001                       word_1E0BE:	dc 1
00014670 7060                       	dc $7060
00014672 0001                       word_1E0C2:	dc 1
00014674 7068                       	dc $7068
00014676 0001                       word_1E0C6:	dc 1
00014678 7070                       	dc $7070
0001467A 0001                       word_1E0CA:	dc 1
0001467C 7078                       	dc $7078
0001467E 0001                       word_1E0CE:	dc 1
00014680 7080                       	dc $7080
00014682 0002                       word_1E0D2:	dc 2
00014684 1088                       	dc $1088
00014686 708A                       	dc $708A
00014688 0002                       word_1E0D8:	dc 2
0001468A 3092                       	dc $3092
0001468C 7096                       	dc $7096
0001468E 0002                       word_1E0DE:	dc 2
00014690 509E                       	dc $509E
00014692 70A4                       	dc $70A4
00014694 0002                       word_1E0E4:	dc 2
00014696 50AC                       	dc $50AC
00014698 70B2                       	dc $70B2
0001469A 0000                       word_1E0EA:	dc 0
0001469C 0001                       word_1E0EC:	dc 1
0001469E F0BA                       	dc $F0BA
000146A0                            	even
000146A0                            
000146A0                            ; ---------------------------------------------------------------------------
000146A0                            ; Subroutine to	slow Sonic walking up a	slope
000146A0                            ; ---------------------------------------------------------------------------
000146A0                            
000146A0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000146A0                            
000146A0                            
000146A0                            Sonic_SlopeResist:			; XREF: Obj01_MdNormal
000146A0 1028 0026                  		move.b	$26(a0),d0
000146A4 0600 0060                  		addi.b	#$60,d0
000146A8 0C00 00C0                  		cmpi.b	#$C0,d0
000146AC 6400                       		bcc.s	locret_13508
000146AE 1028 0026                  		move.b	$26(a0),d0
000146B2 4EB9 0000 33DA             		jsr	(CalcSine).l
000146B8 C1FC 0020                  		muls.w	#$20,d0
000146BC E080                       		asr.l	#8,d0
000146BE 4A68 0014                  		tst.w	$14(a0)
000146C2 6700                       		beq.s	locret_13508
000146C4 6B00                       		bmi.s	loc_13504
000146C6 4A40                       		tst.w	d0
000146C8 6700                       		beq.s	locret_13502
000146CA D168 0014                  		add.w	d0,$14(a0)	; change Sonic's inertia
000146CE                            
000146CE                            locret_13502:
000146CE 4E75                       		rts	
000146D0                            ; ===========================================================================
000146D0                            
000146D0                            loc_13504:
000146D0 D168 0014                  		add.w	d0,$14(a0)
000146D4                            
000146D4                            locret_13508:
000146D4 4E75                       		rts	
000146D6                            ; End of function Sonic_SlopeResist
000146D6                            
000146D6                            ; ---------------------------------------------------------------------------
000146D6                            ; Subroutine to	push Sonic down	a slope	while he's rolling
000146D6                            ; ---------------------------------------------------------------------------
000146D6                            
000146D6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000146D6                            
000146D6                            
000146D6                            Sonic_RollRepel:			; XREF: Obj01_MdRoll
000146D6 1028 0026                  		move.b	$26(a0),d0
000146DA 0600 0060                  		addi.b	#$60,d0
000146DE 0C00 00C0                  		cmpi.b	#-$40,d0
000146E2 6400                       		bcc.s	locret_13544
000146E4 1028 0026                  		move.b	$26(a0),d0
000146E8 4EB9 0000 33DA             		jsr	(CalcSine).l
000146EE C1FC 0050                  		muls.w	#$50,d0
000146F2 E080                       		asr.l	#8,d0
000146F4 4A68 0014                  		tst.w	$14(a0)
000146F8 6B00                       		bmi.s	loc_1353A
000146FA 4A40                       		tst.w	d0
000146FC 6A00                       		bpl.s	loc_13534
000146FE E480                       		asr.l	#2,d0
00014700                            
00014700                            loc_13534:
00014700 D168 0014                  		add.w	d0,$14(a0)
00014704 4E75                       		rts	
00014706                            ; ===========================================================================
00014706                            
00014706                            loc_1353A:
00014706 4A40                       		tst.w	d0
00014708 6B00                       		bmi.s	loc_13540
0001470A E480                       		asr.l	#2,d0
0001470C                            
0001470C                            loc_13540:
0001470C D168 0014                  		add.w	d0,$14(a0)
00014710                            
00014710                            locret_13544:
00014710 4E75                       		rts	
00014712                            ; End of function Sonic_RollRepel
00014712                            
00014712                            ; ---------------------------------------------------------------------------
00014712                            ; Subroutine to	push Sonic down	a slope
00014712                            ; ---------------------------------------------------------------------------
00014712                            
00014712                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014712                            
00014712                            
00014712                            Sonic_SlopeRepel:			; XREF: Obj01_MdNormal; Obj01_MdRoll
00014712 4E71                       		nop	
00014714 4A28 0038                  		tst.b	$38(a0)
00014718 6600                       		bne.s	locret_13580
0001471A 4A68 003E                  		tst.w	$3E(a0)
0001471E 6600                       		bne.s	loc_13582
00014720 1028 0026                  		move.b	$26(a0),d0
00014724 0600 0020                  		addi.b	#$20,d0
00014728 0200 00C0                  		andi.b	#$C0,d0
0001472C 6700                       		beq.s	locret_13580
0001472E 3028 0014                  		move.w	$14(a0),d0
00014732 6A00                       		bpl.s	loc_1356A
00014734 4440                       		neg.w	d0
00014736                            
00014736                            loc_1356A:
00014736 0C40 0280                  		cmpi.w	#$280,d0
0001473A 6400                       		bcc.s	locret_13580
0001473C 4268 0014                  		clr.w	$14(a0)
00014740 08E8 0001 0022             		bset	#1,$22(a0)
00014746 317C 001E 003E             		move.w	#$1E,$3E(a0)
0001474C                            
0001474C                            locret_13580:
0001474C 4E75                       		rts	
0001474E                            ; ===========================================================================
0001474E                            
0001474E                            loc_13582:
0001474E 5368 003E                  		subq.w	#1,$3E(a0)
00014752 4E75                       		rts	
00014754                            ; End of function Sonic_SlopeRepel
00014754                            
00014754                            ; ---------------------------------------------------------------------------
00014754                            ; Subroutine to	return Sonic's angle to 0 as he jumps
00014754                            ; ---------------------------------------------------------------------------
00014754                            
00014754                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014754                            
00014754                            
00014754                            Sonic_JumpAngle:			; XREF: Obj01_MdJump; Obj01_MdJump2
00014754 1028 0026                  		move.b	$26(a0),d0	; get Sonic's angle
00014758 6700                       		beq.s	locret_135A2	; if already 0,	branch
0001475A 6A00                       		bpl.s	loc_13598	; if higher than 0, branch
0001475C                            
0001475C 5400                       		addq.b	#2,d0		; increase angle
0001475E 6400                       		bcc.s	loc_13596
00014760 7000                       		moveq	#0,d0
00014762                            
00014762                            loc_13596:
00014762 6000                       		bra.s	loc_1359E
00014764                            ; ===========================================================================
00014764                            
00014764                            loc_13598:
00014764 5500                       		subq.b	#2,d0		; decrease angle
00014766 6400                       		bcc.s	loc_1359E
00014768 7000                       		moveq	#0,d0
0001476A                            
0001476A                            loc_1359E:
0001476A 1140 0026                  		move.b	d0,$26(a0)
0001476E                            
0001476E                            locret_135A2:
0001476E 4E75                       		rts	
00014770                            ; End of function Sonic_JumpAngle
00014770                            
00014770                            ; ---------------------------------------------------------------------------
00014770                            ; Subroutine for Sonic to interact with	the floor after	jumping/falling
00014770                            ; ---------------------------------------------------------------------------
00014770                            
00014770                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014770                            
00014770                            
00014770                            Sonic_Floor:				; XREF: Obj01_MdJump; Obj01_MdJump2
00014770 3228 0010                  		move.w	$10(a0),d1
00014774 3428 0012                  		move.w	$12(a0),d2
00014778 4EB9 0000 36A8             		jsr	(CalcAngle).l
0001477E 11C0 FFEC                  		move.b	d0,($FFFFFFEC).w
00014782 0400 0020                  		subi.b	#$20,d0
00014786 11C0 FFED                  		move.b	d0,($FFFFFFED).w
0001478A 0200 00C0                  		andi.b	#$C0,d0
0001478E 11C0 FFEE                  		move.b	d0,($FFFFFFEE).w
00014792 0C00 0040                  		cmpi.b	#$40,d0
00014796 6700 0000                  		beq.w	loc_13680
0001479A 0C00 0080                  		cmpi.b	#$80,d0
0001479E 6700 0000                  		beq.w	loc_136E2
000147A2 0C00 00C0                  		cmpi.b	#-$40,d0
000147A6 6700 0000                  		beq.w	loc_1373E
000147AA 6100 0000                  		bsr.w	Sonic_HitWall
000147AE 4A41                       		tst.w	d1
000147B0 6A00                       		bpl.s	loc_135F0
000147B2 9368 0008                  		sub.w	d1,8(a0)
000147B6 317C 0000 0010             		move.w	#0,$10(a0)
000147BC                            
000147BC                            loc_135F0:
000147BC 6100 0000                  		bsr.w	sub_14EB4
000147C0 4A41                       		tst.w	d1
000147C2 6A00                       		bpl.s	loc_13602
000147C4 D368 0008                  		add.w	d1,8(a0)
000147C8 317C 0000 0010             		move.w	#0,$10(a0)
000147CE                            
000147CE                            loc_13602:
000147CE 6100 0000                  		bsr.w	Sonic_HitFloor
000147D2 11C1 FFEF                  		move.b	d1,($FFFFFFEF).w
000147D6 4A41                       		tst.w	d1
000147D8 6A00                       		bpl.s	locret_1367E
000147DA 1428 0012                  		move.b	$12(a0),d2
000147DE 5002                       		addq.b	#8,d2
000147E0 4402                       		neg.b	d2
000147E2 B202                       		cmp.b	d2,d1
000147E4 6C00                       		bge.s	loc_1361E
000147E6 B002                       		cmp.b	d2,d0
000147E8 6D00                       		blt.s	locret_1367E
000147EA                            
000147EA                            loc_1361E:
000147EA D368 000C                  		add.w	d1,$C(a0)
000147EE 1143 0026                  		move.b	d3,$26(a0)
000147F2 6100 0000                  		bsr.w	Sonic_ResetOnFloor
000147F6 117C 0000 001C             		move.b	#0,$1C(a0)
000147FC 1003                       		move.b	d3,d0
000147FE 0600 0020                  		addi.b	#$20,d0
00014802 0200 0040                  		andi.b	#$40,d0
00014806 6600                       		bne.s	loc_1365C
00014808 1003                       		move.b	d3,d0
0001480A 0600 0010                  		addi.b	#$10,d0
0001480E 0200 0020                  		andi.b	#$20,d0
00014812 6700                       		beq.s	loc_1364E
00014814 E0E8 0012                  		asr	$12(a0)
00014818 6000                       		bra.s	loc_13670
0001481A                            ; ===========================================================================
0001481A                            
0001481A                            loc_1364E:
0001481A 317C 0000 0012             		move.w	#0,$12(a0)
00014820 3168 0010 0014             		move.w	$10(a0),$14(a0)
00014826 4E75                       		rts	
00014828                            ; ===========================================================================
00014828                            
00014828                            loc_1365C:
00014828 317C 0000 0010             		move.w	#0,$10(a0)
0001482E 0C68 0FC0 0012             		cmpi.w	#$FC0,$12(a0)
00014834 6F00                       		ble.s	loc_13670
00014836 317C 0FC0 0012             		move.w	#$FC0,$12(a0)
0001483C                            
0001483C                            loc_13670:
0001483C 3168 0012 0014             		move.w	$12(a0),$14(a0)
00014842 4A03                       		tst.b	d3
00014844 6A00                       		bpl.s	locret_1367E
00014846 4468 0014                  		neg.w	$14(a0)
0001484A                            
0001484A                            locret_1367E:
0001484A 4E75                       		rts	
0001484C                            ; ===========================================================================
0001484C                            
0001484C                            loc_13680:
0001484C 6100 0000                  		bsr.w	Sonic_HitWall
00014850 4A41                       		tst.w	d1
00014852 6A00                       		bpl.s	loc_1369A
00014854 9368 0008                  		sub.w	d1,8(a0)
00014858 317C 0000 0010             		move.w	#0,$10(a0)
0001485E 3168 0012 0014             		move.w	$12(a0),$14(a0)
00014864 4E75                       		rts	
00014866                            ; ===========================================================================
00014866                            
00014866                            loc_1369A:
00014866 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
0001486A 4A41                       		tst.w	d1
0001486C 6A00                       		bpl.s	loc_136B4
0001486E 9368 000C                  		sub.w	d1,$C(a0)
00014872 4A68 0012                  		tst.w	$12(a0)
00014876 6A00                       		bpl.s	locret_136B2
00014878 317C 0000 0012             		move.w	#0,$12(a0)
0001487E                            
0001487E                            locret_136B2:
0001487E 4E75                       		rts	
00014880                            ; ===========================================================================
00014880                            
00014880                            loc_136B4:
00014880 4A68 0012                  		tst.w	$12(a0)
00014884 6B00                       		bmi.s	locret_136E0
00014886 6100 0000                  		bsr.w	Sonic_HitFloor
0001488A 4A41                       		tst.w	d1
0001488C 6A00                       		bpl.s	locret_136E0
0001488E D368 000C                  		add.w	d1,$C(a0)
00014892 1143 0026                  		move.b	d3,$26(a0)
00014896 6100 0000                  		bsr.w	Sonic_ResetOnFloor
0001489A 117C 0000 001C             		move.b	#0,$1C(a0)
000148A0 317C 0000 0012             		move.w	#0,$12(a0)
000148A6 3168 0010 0014             		move.w	$10(a0),$14(a0)
000148AC                            
000148AC                            locret_136E0:
000148AC 4E75                       		rts	
000148AE                            ; ===========================================================================
000148AE                            
000148AE                            loc_136E2:
000148AE 6100 0000                  		bsr.w	Sonic_HitWall
000148B2 4A41                       		tst.w	d1
000148B4 6A00                       		bpl.s	loc_136F4
000148B6 9368 0008                  		sub.w	d1,8(a0)
000148BA 317C 0000 0010             		move.w	#0,$10(a0)
000148C0                            
000148C0                            loc_136F4:
000148C0 6100 0000                  		bsr.w	sub_14EB4
000148C4 4A41                       		tst.w	d1
000148C6 6A00                       		bpl.s	loc_13706
000148C8 D368 0008                  		add.w	d1,8(a0)
000148CC 317C 0000 0010             		move.w	#0,$10(a0)
000148D2                            
000148D2                            loc_13706:
000148D2 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
000148D6 4A41                       		tst.w	d1
000148D8 6A00                       		bpl.s	locret_1373C
000148DA 9368 000C                  		sub.w	d1,$C(a0)
000148DE 1003                       		move.b	d3,d0
000148E0 0600 0020                  		addi.b	#$20,d0
000148E4 0200 0040                  		andi.b	#$40,d0
000148E8 6600                       		bne.s	loc_13726
000148EA 317C 0000 0012             		move.w	#0,$12(a0)
000148F0 4E75                       		rts	
000148F2                            ; ===========================================================================
000148F2                            
000148F2                            loc_13726:
000148F2 1143 0026                  		move.b	d3,$26(a0)
000148F6 6100 0000                  		bsr.w	Sonic_ResetOnFloor
000148FA 3168 0012 0014             		move.w	$12(a0),$14(a0)
00014900 4A03                       		tst.b	d3
00014902 6A00                       		bpl.s	locret_1373C
00014904 4468 0014                  		neg.w	$14(a0)
00014908                            
00014908                            locret_1373C:
00014908 4E75                       		rts	
0001490A                            ; ===========================================================================
0001490A                            
0001490A                            loc_1373E:
0001490A 6100 0000                  		bsr.w	sub_14EB4
0001490E 4A41                       		tst.w	d1
00014910 6A00                       		bpl.s	loc_13758
00014912 D368 0008                  		add.w	d1,8(a0)
00014916 317C 0000 0010             		move.w	#0,$10(a0)
0001491C 3168 0012 0014             		move.w	$12(a0),$14(a0)
00014922 4E75                       		rts	
00014924                            ; ===========================================================================
00014924                            
00014924                            loc_13758:
00014924 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00014928 4A41                       		tst.w	d1
0001492A 6A00                       		bpl.s	loc_13772
0001492C 9368 000C                  		sub.w	d1,$C(a0)
00014930 4A68 0012                  		tst.w	$12(a0)
00014934 6A00                       		bpl.s	locret_13770
00014936 317C 0000 0012             		move.w	#0,$12(a0)
0001493C                            
0001493C                            locret_13770:
0001493C 4E75                       		rts	
0001493E                            ; ===========================================================================
0001493E                            
0001493E                            loc_13772:
0001493E 4A68 0012                  		tst.w	$12(a0)
00014942 6B00                       		bmi.s	locret_1379E
00014944 6100 0000                  		bsr.w	Sonic_HitFloor
00014948 4A41                       		tst.w	d1
0001494A 6A00                       		bpl.s	locret_1379E
0001494C D368 000C                  		add.w	d1,$C(a0)
00014950 1143 0026                  		move.b	d3,$26(a0)
00014954 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00014958 117C 0000 001C             		move.b	#0,$1C(a0)
0001495E 317C 0000 0012             		move.w	#0,$12(a0)
00014964 3168 0010 0014             		move.w	$10(a0),$14(a0)
0001496A                            
0001496A                            locret_1379E:
0001496A 4E75                       		rts	
0001496C                            ; End of function Sonic_Floor
0001496C                            
0001496C                            ; ---------------------------------------------------------------------------
0001496C                            ; Subroutine to	reset Sonic's mode when he lands on the floor
0001496C                            ; ---------------------------------------------------------------------------
0001496C                            
0001496C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001496C                            
0001496C                            
0001496C                            Sonic_ResetOnFloor:			; XREF: PlatformObject; et al
0001496C 0828 0004 0022             		btst	#4,$22(a0)
00014972 6700                       		beq.s	loc_137AE
00014974 4E71                       		nop	
00014976 4E71                       		nop	
00014978 4E71                       		nop	
0001497A                            
0001497A                            loc_137AE:
0001497A 08A8 0005 0022             		bclr	#5,$22(a0)
00014980 08A8 0001 0022             		bclr	#1,$22(a0)
00014986 08A8 0004 0022             		bclr	#4,$22(a0)
0001498C 0828 0002 0022             		btst	#2,$22(a0)
00014992 6700                       		beq.s	loc_137E4
00014994 08A8 0002 0022             		bclr	#2,$22(a0)
0001499A 117C 0013 0016             		move.b	#$13,$16(a0)
000149A0 117C 0009 0017             		move.b	#9,$17(a0)
000149A6 117C 0000 001C             		move.b	#0,$1C(a0)	; use running/walking animation
000149AC 5B68 000C                  		subq.w	#5,$C(a0)
000149B0                            
000149B0                            loc_137E4:
000149B0 117C 0000 003C             		move.b	#0,$3C(a0)
000149B6 31FC 0000 F7D0             		move.w	#0,($FFFFF7D0).w
000149BC 4E75                       		rts	
000149BE                            ; End of function Sonic_ResetOnFloor
000149BE                            
000149BE                            ; ===========================================================================
000149BE                            ; ---------------------------------------------------------------------------
000149BE                            ; Sonic	when he	gets hurt
000149BE                            ; ---------------------------------------------------------------------------
000149BE                            
000149BE                            Obj01_Hurt:				; XREF: Obj01_Index
000149BE 4EBA 96FE                  		jsr	SpeedToPos
000149C2 0668 0030 0012             		addi.w	#$30,$12(a0)
000149C8 0828 0006 0022             		btst	#6,$22(a0)
000149CE 6700                       		beq.s	loc_1380C
000149D0 0468 0020 0012             		subi.w	#$20,$12(a0)
000149D6                            
000149D6                            loc_1380C:
000149D6 6100 0000                  		bsr.w	Sonic_HurtStop
000149DA 6100 F500                  		bsr.w	Sonic_LevelBound
000149DE 6100 EEC6                  		bsr.w	Sonic_RecordPos
000149E2 6100 EEDC                  		bsr.w	Sonic_Water		
000149E6 6100 0000                  		bsr.w	Sonic_Animate
000149EA 6100 0000                  		bsr.w	LoadSonicDynPLC
000149EE 4EFA 96F4                  		jmp	DisplaySprite
000149F2                            
000149F2                            ; ---------------------------------------------------------------------------
000149F2                            ; Subroutine to	stop Sonic falling after he's been hurt
000149F2                            ; ---------------------------------------------------------------------------
000149F2                            
000149F2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000149F2                            
000149F2                            
000149F2                            Sonic_HurtStop:				; XREF: Obj01_Hurt
000149F2 3038 F72E                  		move.w	($FFFFF72E).w,d0
000149F6 0640 00E0                  		addi.w	#$E0,d0
000149FA B068 000C                  		cmp.w	$C(a0),d0
000149FE 6500 F51E                  		bcs.w	Jmp_KillSonic
00014A02 6100 FD6C                  		bsr.w	Sonic_Floor
00014A06 0828 0001 0022             		btst	#1,$22(a0)
00014A0C 6600                       		bne.s	locret_13860
00014A0E 7000                       		moveq	#0,d0
00014A10 3140 0012                  		move.w	d0,$12(a0)
00014A14 3140 0010                  		move.w	d0,$10(a0)
00014A18 3140 0014                  		move.w	d0,$14(a0)
00014A1C 117C 0000 001C             		move.b	#0,$1C(a0)
00014A22 5528 0024                  		subq.b	#2,$24(a0)
00014A26 317C 0078 0030             		move.w	#$78,$30(a0)
00014A2C                            
00014A2C                            locret_13860:
00014A2C 4E75                       		rts	
00014A2E                            ; End of function Sonic_HurtStop
00014A2E                            
00014A2E                            ; ===========================================================================
00014A2E                            ; ---------------------------------------------------------------------------
00014A2E                            ; Sonic	when he	dies
00014A2E                            ; ---------------------------------------------------------------------------
00014A2E                            
00014A2E                            Obj01_Death:				; XREF: Obj01_Index
00014A2E 6100 0000                  		bsr.w	GameOver
00014A32 4EBA 965E                  		jsr	ObjectFall
00014A36 6100 EE6E                  		bsr.w	Sonic_RecordPos
00014A3A 6100 0000                  		bsr.w	Sonic_Animate
00014A3E 6100 0000                  		bsr.w	LoadSonicDynPLC
00014A42 4EFA 96A0                  		jmp	DisplaySprite
00014A46                            
00014A46                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014A46                            
00014A46                            
00014A46                            GameOver:				; XREF: Obj01_Death
00014A46 3038 F72E                  		move.w	($FFFFF72E).w,d0
00014A4A 0640 0100                  		addi.w	#$100,d0
00014A4E B068 000C                  		cmp.w	$C(a0),d0
00014A52 6C00 0000                  		bge.w	locret_13900
00014A56 317C FFC8 0012             		move.w	#-$38,$12(a0)
00014A5C 5428 0024                  		addq.b	#2,$24(a0)
00014A60 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
00014A64 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; update lives	counter
00014A68 5338 FE12                  		subq.b	#1,($FFFFFE12).w ; subtract 1 from number of lives
00014A6C 6600                       		bne.s	loc_138D4
00014A6E 317C 0000 003A             		move.w	#0,$3A(a0)
00014A74 11FC 0039 D080             		move.b	#$39,($FFFFD080).w ; load GAME object
00014A7A 11FC 0039 D0C0             		move.b	#$39,($FFFFD0C0).w ; load OVER object
00014A80 11FC 0001 D0DA             		move.b	#1,($FFFFD0DA).w ; set OVER object to correct frame
00014A86 4238 FE1A                  		clr.b	($FFFFFE1A).w
00014A8A                            
00014A8A                            loc_138C2:
00014A8A 303C 008F                  		move.w	#$8F,d0
00014A8E 4EB9 0000 1476             		jsr	(PlaySound).l	; play game over music
00014A94 7003                       		moveq	#3,d0
00014A96 4EF9 0000 16F0             		jmp	(LoadPLC).l	; load game over patterns
00014A9C                            ; ===========================================================================
00014A9C                            
00014A9C                            loc_138D4:
00014A9C 317C 003C 003A             		move.w	#60,$3A(a0)	; set time delay to 1 second
00014AA2 4A38 FE1A                  		tst.b	($FFFFFE1A).w	; is TIME OVER tag set?
00014AA6 6700                       		beq.s	locret_13900	; if not, branch
00014AA8 317C 0000 003A             		move.w	#0,$3A(a0)
00014AAE 11FC 0039 D080             		move.b	#$39,($FFFFD080).w ; load TIME object
00014AB4 11FC 0039 D0C0             		move.b	#$39,($FFFFD0C0).w ; load OVER object
00014ABA 11FC 0002 D09A             		move.b	#2,($FFFFD09A).w
00014AC0 11FC 0003 D0DA             		move.b	#3,($FFFFD0DA).w
00014AC6 60C2                       		bra.s	loc_138C2
00014AC8                            ; ===========================================================================
00014AC8                            
00014AC8                            locret_13900:
00014AC8 4E75                       		rts	
00014ACA                            ; End of function GameOver
00014ACA                            
00014ACA                            ; ===========================================================================
00014ACA                            ; ---------------------------------------------------------------------------
00014ACA                            ; Sonic	when the level is restarted
00014ACA                            ; ---------------------------------------------------------------------------
00014ACA                            
00014ACA                            Obj01_ResetLevel:			; XREF: Obj01_Index
00014ACA 4A68 003A                  		tst.w	$3A(a0)
00014ACE 6700                       		beq.s	locret_13914
00014AD0 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time delay
00014AD4 6600                       		bne.s	locret_13914
00014AD6 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart the level
00014ADC                            
00014ADC                            locret_13914:
00014ADC 4E75                       		rts	
00014ADE                            
00014ADE                            ; ---------------------------------------------------------------------------
00014ADE                            ; Subroutine to	make Sonic run around loops (GHZ/SLZ)
00014ADE                            ; ---------------------------------------------------------------------------
00014ADE                            
00014ADE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014ADE                            
00014ADE                            
00014ADE                            Sonic_Loops:				; XREF: Obj01_Control
00014ADE 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; is level SLZ	?
00014AE4 6700                       		beq.s	loc_13926	; if yes, branch
00014AE6 4A38 FE10                  		tst.b	($FFFFFE10).w	; is level GHZ ?
00014AEA 6600 0000                  		bne.w	locret_139C2	; if not, branch
00014AEE                            
00014AEE                            loc_13926:
00014AEE 3028 000C                  		move.w	$C(a0),d0
00014AF2 E248                       		lsr.w	#1,d0
00014AF4 0240 0380                  		andi.w	#$380,d0
00014AF8 1228 0008                  		move.b	8(a0),d1
00014AFC 0241 007F                  		andi.w	#$7F,d1
00014B00 D041                       		add.w	d1,d0
00014B02 43F8 A400                  		lea	($FFFFA400).w,a1
00014B06 1231 0000                  		move.b	(a1,d0.w),d1	; d1 is	the 256x256 tile Sonic is currently on
00014B0A B238 F7AE                  		cmp.b	($FFFFF7AE).w,d1
00014B0E 6700 F486                  		beq.w	Obj01_ChkRoll
00014B12 B238 F7AF                  		cmp.b	($FFFFF7AF).w,d1
00014B16 6700 F47E                  		beq.w	Obj01_ChkRoll
00014B1A B238 F7AC                  		cmp.b	($FFFFF7AC).w,d1
00014B1E 6700                       		beq.s	loc_13976
00014B20 B238 F7AD                  		cmp.b	($FFFFF7AD).w,d1
00014B24 6700                       		beq.s	loc_13966
00014B26 08A8 0006 0001             		bclr	#6,1(a0)
00014B2C 4E75                       		rts	
00014B2E                            ; ===========================================================================
00014B2E                            
00014B2E                            loc_13966:
00014B2E 0828 0001 0022             		btst	#1,$22(a0)
00014B34 6700                       		beq.s	loc_13976
00014B36 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
00014B3C 4E75                       		rts	
00014B3E                            ; ===========================================================================
00014B3E                            
00014B3E                            loc_13976:
00014B3E 3428 0008                  		move.w	8(a0),d2
00014B42 0C02 002C                  		cmpi.b	#$2C,d2
00014B46 6400                       		bcc.s	loc_13988
00014B48 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
00014B4E 4E75                       		rts	
00014B50                            ; ===========================================================================
00014B50                            
00014B50                            loc_13988:
00014B50 0C02 00E0                  		cmpi.b	#-$20,d2
00014B54 6500                       		bcs.s	loc_13996
00014B56 08E8 0006 0001             		bset	#6,1(a0)	; send Sonic to	low plane
00014B5C 4E75                       		rts	
00014B5E                            ; ===========================================================================
00014B5E                            
00014B5E                            loc_13996:
00014B5E 0828 0006 0001             		btst	#6,1(a0)
00014B64 6600                       		bne.s	loc_139B2
00014B66 1228 0026                  		move.b	$26(a0),d1
00014B6A 6700                       		beq.s	locret_139C2
00014B6C 0C01 0080                  		cmpi.b	#-$80,d1
00014B70 6200                       		bhi.s	locret_139C2
00014B72 08E8 0006 0001             		bset	#6,1(a0)	; send Sonic to	low plane
00014B78 4E75                       		rts	
00014B7A                            ; ===========================================================================
00014B7A                            
00014B7A                            loc_139B2:
00014B7A 1228 0026                  		move.b	$26(a0),d1
00014B7E 0C01 0080                  		cmpi.b	#-$80,d1
00014B82 6300                       		bls.s	locret_139C2
00014B84 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
00014B8A                            
00014B8A                            locret_139C2:
00014B8A 4E75                       		rts	
00014B8C                            ; End of function Sonic_Loops
00014B8C                            
00014B8C                            ; ---------------------------------------------------------------------------
00014B8C                            ; Sonic when he's drowning
00014B8C                            ; ---------------------------------------------------------------------------
00014B8C                             
00014B8C                            ; ||||||||||||||| S	U B	R O	U T	I N	E |||||||||||||||||||||||||||||||||||||||
00014B8C                             
00014B8C                             
00014B8C                            Sonic_Drowned:
00014B8C 6100 9530                  		bsr.w   SpeedToPos		; Make Sonic able to move
00014B90 0668 0010 0012             		addi.w  #$10,$12(a0)	; Apply gravity
00014B96 6100 ED0E                  		bsr.w   Sonic_RecordPos	; Record position
00014B9A 6100                       		bsr.s   Sonic_Animate	; Animate Sonic
00014B9C 6100 0000                  		bsr.w   LoadSonicDynPLC	; Load Sonic's DPLCs
00014BA0 6000 9542                  		bra.w   DisplaySprite	; And finally, display Sonic
00014BA4                            
00014BA4                            ; ---------------------------------------------------------------------------
00014BA4                            ; Subroutine to animate Sonic's sprites
00014BA4                            ; See also: AnimateSprite
00014BA4                            ; ---------------------------------------------------------------------------
00014BA4                            
00014BA4                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
00014BA4                            
00014BA4                            ; loc_1B350:
00014BA4                            Sonic_Animate:
00014BA4 43F9 0000 0000             	lea	(SonicAniData).l,a1
00014BAA 4A38 FE19                  	tst.b	(Super_Sonic_flag).w
00014BAE 6700                       	beq.s	loc1
00014BB0 43F9 0000 0000             	lea	(SuperSonicAniData).l,a1
00014BB6                            loc1
00014BB6 7000                       	moveq	#0,d0
00014BB8 1028 001C                  	move.b	anim(a0),d0
00014BBC B028 001D                  	cmp.b	next_anim(a0),d0	; has animation changed?
00014BC0 6700                       	beq.s	SAnim_Do		; if not, branch
00014BC2 1140 001D                  	move.b	d0,next_anim(a0)	; set to next animation
00014BC6 117C 0000 001B             	move.b	#0,anim_frame(a0)	; reset animation frame
00014BCC 117C 0000 001E             	move.b	#0,anim_frame_duration(a0)	; reset frame duration
00014BD2 08A8 0005 0022             	bclr	#5,status(a0)
00014BD8                            ; loc_1B384:
00014BD8                            SAnim_Do:
00014BD8 D040                       	add.w	d0,d0
00014BDA D2F1 0000                  	adda.w	(a1,d0.w),a1	; calculate address of appropriate animation script
00014BDE 1011                       	move.b	(a1),d0
00014BE0 6B00                       	bmi.s	SAnim_WalkRun	; if animation is walk/run/roll/jump, branch
00014BE2 1228 0022                  	move.b	status(a0),d1
00014BE6 0201 0001                  	andi.b	#1,d1
00014BEA 0228 00FC 0001             	andi.b	#$FC,render_flags(a0)
00014BF0 8328 0001                  	or.b	d1,render_flags(a0)
00014BF4 5328 001E                  	subq.b	#1,anim_frame_duration(a0)	; subtract 1 from frame duration
00014BF8 6A00                       	bpl.s	SAnim_Delay			; if time remains, branch
00014BFA 1140 001E                  	move.b	d0,anim_frame_duration(a0)	; load frame duration
00014BFE                            ; loc_1B3AA:
00014BFE                            SAnim_Do2:
00014BFE 7200                       	moveq	#0,d1
00014C00 1228 001B                  	move.b	anim_frame(a0),d1	; load current frame number
00014C04 1031 1001                  	move.b	1(a1,d1.w),d0		; read sprite number from script
00014C08 0C00 00F0                  	cmpi.b	#$F0,d0
00014C0C 6400                       	bcc.s	SAnim_End_FF		; if animation is complete, branch
00014C0E                            ; loc_1B3BA:
00014C0E                            SAnim_Next:
00014C0E 1140 001A                  	move.b	d0,mapping_frame(a0)	; load sprite number
00014C12 5228 001B                  	addq.b	#1,anim_frame(a0)	; go to next frame
00014C16                            ; return_1B3C2:
00014C16                            SAnim_Delay:
00014C16 4E75                       	rts
00014C18                            ; ===========================================================================
00014C18                            ; loc_1B3C4:
00014C18                            SAnim_End_FF:
00014C18 5200                       	addq.b	#1,d0		; is the end flag = $FF ?
00014C1A 6600                       	bne.s	SAnim_End_FE	; if not, branch
00014C1C 117C 0000 001B             	move.b	#0,anim_frame(a0)	; restart the animation
00014C22 1029 0001                  	move.b	1(a1),d0	; read sprite number
00014C26 60E6                       	bra.s	SAnim_Next
00014C28                            ; ===========================================================================
00014C28                            ; loc_1B3D4:
00014C28                            SAnim_End_FE:
00014C28 5200                       	addq.b	#1,d0		; is the end flag = $FE ?
00014C2A 6600                       	bne.s	SAnim_End_FD	; if not, branch
00014C2C 1031 1002                  	move.b	2(a1,d1.w),d0	; read the next byte in the script
00014C30 9128 001B                  	sub.b	d0,anim_frame(a0)	; jump back d0 bytes in the script
00014C34 9200                       	sub.b	d0,d1
00014C36 1031 1001                  	move.b	1(a1,d1.w),d0	; read sprite number
00014C3A 60D2                       	bra.s	SAnim_Next
00014C3C                            ; ===========================================================================
00014C3C                            ; loc_1B3E8:
00014C3C                            SAnim_End_FD:
00014C3C 5200                       	addq.b	#1,d0			; is the end flag = $FD ?
00014C3E 6600                       	bne.s	SAnim_End		; if not, branch
00014C40 1171 1002 001C             	move.b	2(a1,d1.w),anim(a0)	; read next byte, run that animation
00014C46                            ; return_1B3F2:
00014C46                            SAnim_End:
00014C46 4E75                       	rts
00014C48                            ; ===========================================================================
00014C48                            ; loc_1B3F4:
00014C48                            SAnim_WalkRun:
00014C48 5200                       	addq.b	#1,d0		; is the start flag = $FF ?
00014C4A 6600 0000                  	bne.w	SAnim_Roll	; if not, branch
00014C4E 7000                       	moveq	#0,d0		; is animation walking/running?
00014C50 1028 0027                  	move.b	flip_angle(a0),d0	; if not, branch
00014C54 6600 0000                  	bne.w	SAnim_Tumble
00014C58 7200                       	moveq	#0,d1
00014C5A 1028 0026                  	move.b	angle(a0),d0	; get Sonic's angle
00014C5E 6B00                       	bmi.s	loc2
00014C60 6700                       	beq.s	loc2
00014C62 5300                       	subq.b	#1,d0
00014C64                            loc2
00014C64 1428 0022                  	move.b	status(a0),d2
00014C68 0202 0001                  	andi.b	#1,d2		; is Sonic mirrored horizontally?
00014C6C 6600                       	bne.s	loc3		; if yes, branch
00014C6E 4600                       	not.b	d0		; reverse angle
00014C70                            loc3
00014C70 0600 0010                  	addi.b	#$10,d0		; add $10 to angle
00014C74 6A00                       	bpl.s	loc4		; if angle is $0-$7F, branch
00014C76 7203                       	moveq	#3,d1
00014C78                            loc4
00014C78 0228 00FC 0001             	andi.b	#$FC,render_flags(a0)
00014C7E B302                       	eor.b	d1,d2
00014C80 8528 0001                  	or.b	d2,render_flags(a0)
00014C84 0828 0005 0022             	btst	#5,status(a0)
00014C8A 6600 0000                  	bne.w	SAnim_Push
00014C8E E808                       	lsr.b	#4,d0		; divide angle by 16
00014C90 0200 0006                  	andi.b	#6,d0		; angle must be 0, 2, 4 or 6
00014C94 3428 0014                  	move.w	inertia(a0),d2	; get Sonic's "speed" for animation purposes
00014C98 6A00                       	bpl.s	loc5
00014C9A 4442                       	neg.w	d2
00014C9C                            loc5
00014C9C 4A28 002B                  	tst.b	status_secondary(a0)
00014CA0 6A00 0000                  	bpl.w	loc6
00014CA4 D442                       	add.w	d2,d2
00014CA6                            loc6
00014CA6 4A38 FE19                  	tst.b	(Super_Sonic_flag).w
00014CAA 6600                       	bne.s	SAnim_Super
00014CAC 43F9 0000 0000             	lea	(SonAni_Run).l,a1	; use running animation
00014CB2 0C42 0600                  	cmpi.w	#$600,d2		; is Sonic at running speed?
00014CB6 6400                       	bcc.s	loc7			; use running animation
00014CB8 43F9 0000 0000             	lea	(SonAni_Walk).l,a1	; if yes, branch
00014CBE D000                       	add.b	d0,d0
00014CC0                            loc7
00014CC0 D000                       	add.b	d0,d0
00014CC2 1600                       	move.b	d0,d3
00014CC4 7200                       	moveq	#0,d1
00014CC6 1228 001B                  	move.b	anim_frame(a0),d1
00014CCA 1031 1001                  	move.b	1(a1,d1.w),d0
00014CCE 0C00 00FF                  	cmpi.b	#-1,d0
00014CD2 6600                       	bne.s	loc8
00014CD4 117C 0000 001B             	move.b	#0,anim_frame(a0)
00014CDA 1029 0001                  	move.b	1(a1),d0
00014CDE                            loc8
00014CDE 1140 001A                  	move.b	d0,mapping_frame(a0)
00014CE2 D728 001A                  	add.b	d3,mapping_frame(a0)
00014CE6 5328 001E                  	subq.b	#1,anim_frame_duration(a0)
00014CEA 6A00                       	bpl.s	return_1B4AC
00014CEC 4442                       	neg.w	d2
00014CEE 0642 0800                  	addi.w	#$800,d2
00014CF2 6A00                       	bpl.s	loc81
00014CF4 7400                       	moveq	#0,d2
00014CF6                            loc81
00014CF6 E04A                       	lsr.w	#8,d2
00014CF8 1142 001E                  	move.b	d2,anim_frame_duration(a0)	; modify frame duration
00014CFC 5228 001B                  	addq.b	#1,anim_frame(a0)		; modify frame number
00014D00                            
00014D00                            return_1B4AC:
00014D00 4E75                       	rts
00014D02                            ; ===========================================================================
00014D02                            ; loc_1B4AE:
00014D02                            SAnim_Super:
00014D02 43F9 0000 0000             	lea	(SupSonAni_Run).l,a1	; use fast animation
00014D08 0C42 0800                  	cmpi.w	#$800,d2		; is Sonic moving fast?
00014D0C 6400                       	bcc.s	SAnim_SuperRun		; if yes, branch
00014D0E 43F9 0000 0000             	lea	(SupSonAni_Walk).l,a1	; use slower animation
00014D14 D000                       	add.b	d0,d0
00014D16 D000                       	add.b	d0,d0
00014D18 6000                       	bra.s	SAnim_SuperWalk
00014D1A                            ; ---------------------------------------------------------------------------
00014D1A                            ; loc_1B4C6:
00014D1A                            SAnim_SuperRun:
00014D1A E208                       	lsr.b	#1,d0
00014D1C                            ; loc_1B4C8:
00014D1C                            SAnim_SuperWalk:
00014D1C 1600                       	move.b	d0,d3
00014D1E 7200                       	moveq	#0,d1
00014D20 1228 001B                  	move.b	anim_frame(a0),d1
00014D24 1031 1001                  	move.b	1(a1,d1.w),d0
00014D28 0C00 00FF                  	cmpi.b	#-1,d0
00014D2C 6600                       	bne.s	loc9
00014D2E 117C 0000 001B             	move.b	#0,anim_frame(a0)
00014D34 1029 0001                  	move.b	1(a1),d0
00014D38                            loc9
00014D38 1140 001A                  	move.b	d0,mapping_frame(a0)
00014D3C D728 001A                  	add.b	d3,mapping_frame(a0)
00014D40 1238 FE05                  	move.b	($FFFFFE05).w,d1
00014D44 0201 0003                  	andi.b	#3,d1
00014D48 6600                       	bne.s	loc10
00014D4A 0C28 00B5 001A             	cmpi.b	#-$4B,mapping_frame(a0)
00014D50 6400                       	bcc.s	loc10
00014D52 0628 0020 001A             	addi.b	#$20,mapping_frame(a0)
00014D58                            loc10
00014D58 5328 001E                  	subq.b	#1,anim_frame_duration(a0)
00014D5C 6A00                       	bpl.s	return_1B51E
00014D5E 4442                       	neg.w	d2
00014D60 0642 0800                  	addi.w	#$800,d2
00014D64 6A00                       	bpl.s	loc11
00014D66 7400                       	moveq	#0,d2
00014D68                            loc11
00014D68 E04A                       	lsr.w	#8,d2
00014D6A 1142 001E                  	move.b	d2,anim_frame_duration(a0)
00014D6E 5228 001B                  	addq.b	#1,anim_frame(a0)
00014D72                            
00014D72                            return_1B51E:
00014D72 4E75                       	rts
00014D74                            ; ===========================================================================
00014D74                            ; loc_1B520:
00014D74                            SAnim_Tumble:
00014D74 1028 0027                  	move.b	flip_angle(a0),d0
00014D78 7200                       	moveq	#0,d1
00014D7A 1428 0022                  	move.b	status(a0),d2
00014D7E 0202 0001                  	andi.b	#1,d2
00014D82 6600                       	bne.s	SAnim_Tumble_Left
00014D84                            
00014D84 0228 00FC 0001             	andi.b	#$FC,render_flags(a0)
00014D8A 0600 000B                  	addi.b	#$B,d0
00014D8E 80FC 0016                  	divu.w	#$16,d0
00014D92 0600 005F                  	addi.b	#$5F,d0
00014D96 1140 001A                  	move.b	d0,mapping_frame(a0)
00014D9A 117C 0000 001E             	move.b	#0,anim_frame_duration(a0)
00014DA0 4E75                       	rts
00014DA2                            ; ===========================================================================
00014DA2                            ; loc_1B54E:
00014DA2                            SAnim_Tumble_Left:
00014DA2 0228 00FC 0001             	andi.b	#$FC,render_flags(a0)
00014DA8 4A28 0029                  	tst.b	flip_turned(a0)
00014DAC 6700                       	beq.s	loc_1B566
00014DAE 0028 0001 0001             	ori.b	#1,render_flags(a0)
00014DB4 0600 000B                  	addi.b	#$B,d0
00014DB8 6000                       	bra.s	loc_1B572
00014DBA                            ; ===========================================================================
00014DBA                            
00014DBA                            loc_1B566:
00014DBA 0028 0003 0001             	ori.b	#3,render_flags(a0)
00014DC0 4400                       	neg.b	d0
00014DC2 0600 008F                  	addi.b	#$8F,d0
00014DC6                            
00014DC6                            loc_1B572:
00014DC6 80FC 0016                  	divu.w	#$16,d0
00014DCA 0600 005F                  	addi.b	#$5F,d0
00014DCE 1140 001A                  	move.b	d0,mapping_frame(a0)
00014DD2 117C 0000 001E             	move.b	#0,anim_frame_duration(a0)
00014DD8 4E75                       	rts
00014DDA                            ; ===========================================================================
00014DDA                            ; loc_1B586:
00014DDA                            SAnim_Roll:
00014DDA 5328 001E                  	subq.b	#1,anim_frame_duration(a0)	; subtract 1 from frame duration
00014DDE 6A00 FE36                  	bpl.w	SAnim_Delay			; if time remains, branch
00014DE2 5200                       	addq.b	#1,d0		; is the start flag = $FE ?
00014DE4 6600                       	bne.s	SAnim_Push	; if not, branch
00014DE6 3428 0014                  	move.w	inertia(a0),d2
00014DEA 6A00                       	bpl.s	loc12
00014DEC 4442                       	neg.w	d2
00014DEE                            loc12
00014DEE 43F9 0000 0000             	lea	(SonAni_Roll2).l,a1
00014DF4 0C42 0600                  	cmpi.w	#$600,d2
00014DF8 6400                       	bcc.s	loc14
00014DFA 43F9 0000 0000             	lea	(SonAni_Roll).l,a1
00014E00                            loc14
00014E00 4442                       	neg.w	d2
00014E02 0642 0400                  	addi.w	#$400,d2
00014E06 6A00                       	bpl.s	loc15
00014E08 7400                       	moveq	#0,d2
00014E0A                            loc15
00014E0A E04A                       	lsr.w	#8,d2
00014E0C 1142 001E                  	move.b	d2,anim_frame_duration(a0)
00014E10 1228 0022                  	move.b	status(a0),d1
00014E14 0201 0001                  	andi.b	#1,d1
00014E18 0228 00FC 0001             	andi.b	#$FC,render_flags(a0)
00014E1E 8328 0001                  	or.b	d1,render_flags(a0)
00014E22 6000 FDDA                  	bra.w	SAnim_Do2
00014E26                            ; ===========================================================================
00014E26                            
00014E26                            SAnim_Push:
00014E26 5328 001E                  	subq.b	#1,anim_frame_duration(a0)	; subtract 1 from frame duration
00014E2A 6A00 FDEA                  	bpl.w	SAnim_Delay			; if time remains, branch
00014E2E 3428 0014                  	move.w	inertia(a0),d2
00014E32 6B00                       	bmi.s	loc16
00014E34 4442                       	neg.w	d2
00014E36                            loc16
00014E36 0642 0800                  	addi.w	#$800,d2
00014E3A 6A00                       	bpl.s	loc17
00014E3C 7400                       	moveq	#0,d2
00014E3E                            loc17
00014E3E EC4A                       	lsr.w	#6,d2
00014E40 1142 001E                  	move.b	d2,anim_frame_duration(a0)
00014E44 43F9 0000 0000             	lea	(SonAni_Push).l,a1
00014E4A 4A38 FE19                  	tst.b	(Super_Sonic_flag).w
00014E4E 6700                       	beq.s	loc18
00014E50 43F9 0000 0000             	lea	(SupSonAni_Push).l,a1
00014E56                            loc18
00014E56 1228 0022                  	move.b	status(a0),d1
00014E5A 0201 0001                  	andi.b	#1,d1
00014E5E 0228 00FC 0001             	andi.b	#$FC,render_flags(a0)
00014E64 8328 0001                  	or.b	d1,render_flags(a0)
00014E68 6000 FD94                  	bra.w	SAnim_Do2
00014E6C                            ; ===========================================================================
00014E6C                            
00014E6C                            ; ---------------------------------------------------------------------------
00014E6C                            ; Animation script - Sonic
00014E6C                            ; ---------------------------------------------------------------------------
00014E6C                            ; off_1B618:
00014E6C                            SonicAniData:
00014E6C                            	include "_anim\Sonic.asm"
00014E6C                            ; ---------------------------------------------------------------------------
00014E6C                            ; Animation script - Sonic
00014E6C                            ; ---------------------------------------------------------------------------
00014E6C 0000                       		dc.w SonAni_Walk-SonicAniData	; 0
00014E6E 0000                       		dc.w SonAni_Run-SonicAniData	; 1
00014E70 0000                       		dc.w SonAni_Roll-SonicAniData	; 2
00014E72 0000                       		dc.w SonAni_Roll2-SonicAniData	; 3
00014E74 0000                       		dc.w SonAni_Push-SonicAniData	; 4
00014E76 0000                       		dc.w SonAni_Wait-SonicAniData	; 5
00014E78 0000                       		dc.w SonAni_Balance-SonicAniData	; 6
00014E7A 0000                       		dc.w SonAni_LookUp-SonicAniData	; 7
00014E7C 0000                       		dc.w SonAni_Duck-SonicAniData	; 8
00014E7E 0000                       		dc.w SonAni_Warp1-SonicAniData	; 9
00014E80 0000                       		dc.w SonAni_Warp2-SonicAniData	; A
00014E82 0000                       		dc.w SonAni_Warp3-SonicAniData	; B
00014E84 0000                       		dc.w SonAni_Warp4-SonicAniData	; C
00014E86 0000                       		dc.w SonAni_Stop-SonicAniData	; D
00014E88 0000                       		dc.w SonAni_Float1-SonicAniData	; E
00014E8A 0000                       		dc.w SonAni_Float2-SonicAniData	; F
00014E8C 0000                       		dc.w SonAni_Spring-SonicAniData	; 10
00014E8E 0000                       		dc.w SonAni_LZHang-SonicAniData	; 11
00014E90 0000                       		dc.w SonAni_Leap1-SonicAniData	; 12
00014E92 0000                       		dc.w SonAni_Leap2-SonicAniData	; 13
00014E94 0000                       		dc.w SonAni_Surf-SonicAniData	; 14
00014E96 0000                       		dc.w SonAni_Bubble-SonicAniData	; 15
00014E98 0000                       		dc.w SonAni_Death-SonicAniData	; 16
00014E9A 0000                       		dc.w SonAni_Drown-SonicAniData	; 17
00014E9C 0000                       		dc.w SonAni_Hurt-SonicAniData	; 18
00014E9E 0000                       		dc.w SonAni_LZSlide-SonicAniData	; 19
00014EA0 0000                       		dc.w SonAni_Blank-SonicAniData	; 1A
00014EA2 0000                       		dc.w SonAni_Float3-SonicAniData	; 1B
00014EA4 0000                       		dc.w SonAni_Float4-SonicAniData	; 1C
00014EA6 0000                       		dc.w SonAni_Spindash-SonicAniData	; 1D
00014EA8 0000                       		dc.w SonAni_Blink-SonicAniData	; 1E
00014EAA 0000                       		dc.w SonAni_GetUp-SonicAniData	; 1F
00014EAC 0000                       		dc.w SonAni_Balance2-SonicAniData	; 20
00014EAE 0000                       		dc.w SonAni_Hang-SonicAniData		; 2A
00014EB0 0000                       		dc.w SonAni_Dash2-SonicAniData	; 2B
00014EB2 0000                       		dc.w SonAni_Dash3-SonicAniData	; 2C
00014EB4 0000                       		dc.w SonAni_Hang2-SonicAniData	; 2D
00014EB6 0000                       		dc.w SonAni_DeathBW-SonicAniData	; 2E	
00014EB8 0000                       		dc.w SonAni_Balance3-SonicAniData	; 2F
00014EBA 0000                       		dc.w SonAni_Balance4-SonicAniData	; 30		
00014EBC 0000                       		dc.w SonAni_Lying-SonicAniData	; 31
00014EBE 0000                       		dc.w SonAni_LieDown-SonicAniData	; 32
00014EC0 FF0F 1011 1213 140D 0EFF   SonAni_Walk:	dc.b $FF, $F,$10,$11,$12,$13,$14, $D, $E,$FF
00014ECA FF2D 2E2F 30FF FFFF FFFF   SonAni_Run:	dc.b $FF,$2D,$2E,$2F,$30,$FF,$FF,$FF,$FF,$FF
00014ED4 FE3D 413E 413F 4140 41FF   SonAni_Roll:	dc.b $FE,$3D,$41,$3E,$41,$3F,$41,$40,$41,$FF
00014EDE FE3D 413E 413F 4140 41FF   SonAni_Roll2:	dc.b $FE,$3D,$41,$3E,$41,$3F,$41,$40,$41,$FF
00014EE8 FD48 494A 4BFF FFFF FFFF   SonAni_Push:	dc.b $FD,$48,$49,$4A,$4B,$FF,$FF,$FF,$FF,$FF
00014EF2                            SonAni_Wait:
00014EF2 0501 0101 0101 0101 0101+  	dc.b   5,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1
00014F02 0101 0101 0101 0101 0101+  	dc.b   1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  2
00014F12 0303 0303 0304 0404 0505+  	dc.b   3,  3,  3,  3,  3,  4,  4,  4,  5,  5,  5,  4,  4,  4,  5,  5
00014F22 0504 0404 0505 0504 0404+  	dc.b   5,  4,  4,  4,  5,  5,  5,  4,  4,  4,  5,  5,  5,  6,  6,  6
00014F32 0606 0606 0606 0604 0404+  	dc.b   6,  6,  6,  6,  6,  6,  6,  4,  4,  4,  5,  5,  5,  4,  4,  4
00014F42 0505 0504 0404 0505 0504+  	dc.b   5,  5,  5,  4,  4,  4,  5,  5,  5,  4,  4,  4,  5,  5,  5,  6
00014F52 0606 0606 0606 0606 0604+  	dc.b   6,  6,  6,  6,  6,  6,  6,  6,  6,  4,  4,  4,  5,  5,  5,  4
00014F62 0404 0505 0504 0404 0505+  	dc.b   4,  4,  5,  5,  5,  4,  4,  4,  5,  5,  5,  4,  4,  4,  5,  5
00014F72 0506 0606 0606 0606 0606+  	dc.b   5,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  4,  4,  4,  5,  5
00014F82 0504 0404 0505 0504 0404+  	dc.b   5,  4,  4,  4,  5,  5,  5,  4,  4,  4,  5,  5,  5,  4,  4,  4
00014F92 0505 0506 0606 0606 0606+  	dc.b   5,  5,  5,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  7,  8,  8
00014FA2 0809 0909 FE06             	dc.b   8,  9,  9,  9,$FE,  6
00014FA8 09CC CDCE CDFF             SonAni_Balance:	dc.b   9,$CC,$CD,$CE,$CD,$FF
00014FAE 050B 0CFE 01               SonAni_LookUp:	dc.b   5, $B, $C,$FE,  1
00014FB3 054C 4DFE 01               SonAni_Duck:	dc.b   5,$4C,$4D,$FE,  1
00014FB8 3F33 FF00                  SonAni_Warp1:	dc.b $3F, $33, $FF, 0
00014FBC 3F34 FF00                  SonAni_Warp2:	dc.b $3F, $34, $FF, 0
00014FC0 3F35 FF00                  SonAni_Warp3:	dc.b $3F, $35, $FF, 0
00014FC4 3F36 FF00                  SonAni_Warp4:	dc.b $3F, $36, $FF, 0
00014FC8 0102 FD00                  SonAni_Blink:	dc.b   1,  2,$FD,  0
00014FCC 030A FD00                  SonAni_GetUp:	dc.b   3, $A,$FD,  0
00014FD0 03C8 C9CA CBFF             SonAni_Balance2:    dc.b   3,$C8,$C9,$CA,$CB,$FF
00014FD6 05D2 D3D4 D5FD 00          SonAni_Stop:	dc.b   5,$D2,$D3,$D4,$D5,$FD,  0 ; halt/skidding animation
00014FDD 0754 59FF                  SonAni_Float1:	dc.b   7,$54,$59,$FF
00014FE1 0754 5556 5758 FF          SonAni_Float2:	dc.b   7,$54,$55,$56,$57,$58,$FF
00014FE8 2F5B FD00                  SonAni_Spring:	dc.b $2F,$5B,$FD,  0
00014FEC 0441 42FF                  SonAni_LZHang:	dc.b 4,	$41, $42, $FF
00014FF0 0F43 4343 FE01             SonAni_Leap1:	dc.b $F, $43, $43, $43,	$FE, 1
00014FF6 0F43 44FE 0100             SonAni_Leap2:	dc.b $F, $43, $44, $FE,	1, 0
00014FFC 3F49 FF00                  SonAni_Surf:	dc.b $3F, $49, $FF, 0
00015000 0B5A 5A11 12FD 00          SonAni_Bubble:	dc.b  $B,$5A,$5A,$11,$12,$FD,  0 ; breathe
00015007 205D FF                    SonAni_Drown:	dc.b $20,$5D,$FF
0001500A 205C FF                    SonAni_Death:	dc.b $20,$5C,$FF
0001500D 404E FF                    SonAni_Hurt:	dc.b $40,$4E,$FF
00015010 094E 4FFF                  SonAni_LZSlide:	dc.b   9,$4E,$4F,$FF
00015014 7700 FD00                  SonAni_Blank:	dc.b $77, 0, $FD, 0
00015018 0042 4342 4442 4542 4642+  SonAni_Spindash: dc.b   0,$42,$43,$42,$44,$42,$45,$42,$46,$42,$47,$FF
00015024 0150 51FF                  SonAni_Hang:	dc.b   1,$50,$51,$FF
00015028 0F43 4343 FE01             SonAni_Dash2:	dc.b  $F,$43,$43,$43,$FE,  1
0001502E 0F43 44FE 01               SonAni_Dash3:	dc.b  $F,$43,$44,$FE,  1
00015033 136B 6CFF                  SonAni_Hang2:	dc.b $13,$6B,$6C,$FF
00015037 205E FF                    SonAni_DeathBW:	dc.b $20,$5E,$FF
0001503A 033C 3D53 3E54 FF00        SonAni_Float3:	dc.b 3,	$3C, $3D, $53, $3E, $54, $FF, 0
00015042 033C FD00                  SonAni_Float4:	dc.b 3,	$3C, $FD, 0
00015046 13D0 D1FF                  SonAni_Balance3:dc.b $13,$D0,$D1,$FF
0001504A 03CF C8C9 CACB FE04        SonAni_Balance4:dc.b   3,$CF,$C8,$C9,$CA,$CB,$FE,  4
00015052 0908 09FF                  SonAni_Lying:	dc.b   9,  8,  9,$FF
00015056 0307 FD00                  SonAni_LieDown:	dc.b   3,  7,$FD,  0
0001505A                            		even
0001505A                            ; ---------------------------------------------------------------------------
0001505A                            ; Animation script - Super Sonic
0001505A                            ; (many of these point to the data above this)
0001505A                            ; ---------------------------------------------------------------------------
0001505A                            SuperSonicAniData:
0001505A 0000                       	dc.w SupSonAni_Walk-SuperSonicAniData		; 0
0001505C 0000                       	dc.w SupSonAni_Run-SuperSonicAniData          ; 1
0001505E FE7A                       	dc.w SonAni_Roll-SuperSonicAniData            ; 2
00015060 FE84                       	dc.w SonAni_Roll2-SuperSonicAniData           ; 3
00015062 0000                       	dc.w SupSonAni_Push-SuperSonicAniData         ; 4
00015064 0000                       	dc.w SupSonAni_Stand-SuperSonicAniData        ; 5
00015066 0000                       	dc.w SupSonAni_Balance-SuperSonicAniData      ; 6
00015068 FF54                       	dc.w SonAni_LookUp-SuperSonicAniData          ; 7
0001506A 0000                       	dc.w SupSonAni_Duck-SuperSonicAniData         ; 8
0001506C FFBE                       	dc.w SonAni_Spindash-SuperSonicAniData        ; 9
0001506E FF6E                       	dc.w SonAni_Blink-SuperSonicAniData           ; 10 ; $A
00015070 FF72                       	dc.w SonAni_GetUp-SuperSonicAniData           ; 11 ; $B
00015072 FF76                       	dc.w SonAni_Balance2-SuperSonicAniData        ; 12 ; $C
00015074 FF7C                       	dc.w SonAni_Stop-SuperSonicAniData            ; 13 ; $D
00015076 FF83                       	dc.w SonAni_Float1-SuperSonicAniData           ; 14 ; $E
00015078 FF87                       	dc.w SonAni_Float2-SuperSonicAniData          ; 15 ; $F
0001507A FF8E                       	dc.w SonAni_Spring-SuperSonicAniData          ; 16 ; $10
0001507C FFCA                       	dc.w SonAni_Hang-SuperSonicAniData            ; 17 ; $11
0001507E FFCE                       	dc.w SonAni_Dash2-SuperSonicAniData           ; 18 ; $12
00015080 FFD4                       	dc.w SonAni_Dash3-SuperSonicAniData           ; 19 ; $13
00015082 FFD9                       	dc.w SonAni_Hang2-SuperSonicAniData           ; 20 ; $14
00015084 FFA6                       	dc.w SonAni_Bubble-SuperSonicAniData          ; 21 ; $15
00015086 FFDD                       	dc.w SonAni_DeathBW-SuperSonicAniData         ; 22 ; $16
00015088 FFAD                       	dc.w SonAni_Drown-SuperSonicAniData           ; 23 ; $17
0001508A FFB0                       	dc.w SonAni_Death-SuperSonicAniData           ; 24 ; $18
0001508C FFB3                       	dc.w SonAni_Hurt-SuperSonicAniData            ; 25 ; $19
0001508E FFB3                       	dc.w SonAni_Hurt-SuperSonicAniData            ; 26 ; $1A
00015090 FFB6                       	dc.w SonAni_LZSlide-SuperSonicAniData           ; 27 ; $1B
00015092 FFBA                       	dc.w SonAni_Blank-SuperSonicAniData           ; 28 ; $1C
00015094 FFEC                       	dc.w SonAni_Balance3-SuperSonicAniData        ; 29 ; $1D
00015096 FFF0                       	dc.w SonAni_Balance4-SuperSonicAniData        ; 30 ; $1E
00015098 0000                       	dc.w SupSonAni_Transform-SuperSonicAniData    ; 31 ; $1F
0001509A                            
0001509A FF77 7879 7A7B 7C75 76FF   SupSonAni_Walk:		dc.b $FF,$77,$78,$79,$7A,$7B,$7C,$75,$76,$FF
000150A4 FFB5 B9FF FFFF FFFF FFFF   SupSonAni_Run:		dc.b $FF,$B5,$B9,$FF,$FF,$FF,$FF,$FF,$FF,$FF
000150AE FDBD BEBF C0FF FFFF FFFF   SupSonAni_Push:		dc.b $FD,$BD,$BE,$BF,$C0,$FF,$FF,$FF,$FF,$FF
000150B8 0772 7374 73FF             SupSonAni_Stand:	dc.b   7,$72,$73,$74,$73,$FF
000150BE 09C2 C3C4 C3C5 C6C7 C6FF   SupSonAni_Balance:	dc.b   9,$C2,$C3,$C4,$C3,$C5,$C6,$C7,$C6,$FF
000150C8 05C1 FF                    SupSonAni_Duck:		dc.b   5,$C1,$FF
000150CB 026D 6D6E 6E6F 7071 7071+  SupSonAni_Transform:	dc.b   2,$6D,$6D,$6E,$6E,$6F,$70,$71,$70,$71,$70,$71,$70,$71,$FD,  0
000150DC 00                         	even		
000150DC 00                         	even		
000150DC                            
000150DC                            
000150DC                            ; ---------------------------------------------------------------------------
000150DC                            ; Sonic	pattern	loading	subroutine
000150DC                            ; ---------------------------------------------------------------------------
000150DC                            
000150DC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000150DC                            
000150DC                            
000150DC                            LoadSonicDynPLC:			; XREF: Obj01_Control; et al
000150DC 7000                       		moveq	#0,d0
000150DE 1028 001A                  		move.b	$1A(a0),d0	; load frame number
000150E2 B038 F766                  		cmp.b	($FFFFF766).w,d0
000150E6 6700                       		beq.s	locret_13C96
000150E8 11C0 F766                  		move.b	d0,($FFFFF766).w
000150EC 45F9 0000 0000             		lea	(SonicDynPLC).l,a2
000150F2 D040                       		add.w	d0,d0
000150F4 D4F2 0000                  		adda.w	(a2,d0.w),a2
000150F8 7A00                       		moveq	#0,d5
000150FA 1A1A                       		move.b	(a2)+,d5
000150FC 5345                       		subq.w	#1,d5
000150FE 6B00                       		bmi.s	locret_13C96
00015100 383C F000                  		move.w	#$F000,d4
00015104 2C3C 0000 0000             		move.l	#Art_Sonic,d6
0001510A                            
0001510A                            SPLC_ReadEntry:
0001510A 7200                       		moveq	#0,d1
0001510C 121A                       		move.b	(a2)+,d1
0001510E E149                       		lsl.w	#8,d1
00015110 121A                       		move.b	(a2)+,d1
00015112 3601                       		move.w	d1,d3
00015114 E04B                       		lsr.w	#8,d3
00015116 0243 00F0                  		andi.w	#$F0,d3
0001511A 0643 0010                  		addi.w	#$10,d3
0001511E 0241 0FFF                  		andi.w	#$FFF,d1
00015122 EB89                       		lsl.l	#5,d1
00015124 D286                       		add.l	d6,d1
00015126 3404                       		move.w	d4,d2
00015128 D843                       		add.w	d3,d4
0001512A D843                       		add.w	d3,d4
0001512C 4EB9 0000 1520             		jsr	(QueueDMATransfer).l
00015132 51CD FFD6                  		dbf	d5,SPLC_ReadEntry	; repeat for number of entries
00015136                            
00015136                            locret_13C96:
00015136 4E75                       		rts	
00015138                            ; End of function LoadSonicDynPLC
00015138                            
00015138                            ; ===========================================================================
00015138                            ; ---------------------------------------------------------------------------
00015138                            ; Object 0A - drowning countdown numbers and small bubbles (LZ)
00015138                            ; ---------------------------------------------------------------------------
00015138                            
00015138                            Obj0A:					; XREF: Obj_Index
00015138 7000                       		moveq	#0,d0
0001513A 1028 0024                  		move.b	$24(a0),d0
0001513E 323B 0000                  		move.w	Obj0A_Index(pc,d0.w),d1
00015142 4EFB 1000                  		jmp	Obj0A_Index(pc,d1.w)
00015146                            ; ===========================================================================
00015146 0000 0000                  Obj0A_Index:	dc.w Obj0A_Main-Obj0A_Index, Obj0A_Animate-Obj0A_Index
0001514A 0000 0000                  		dc.w Obj0A_ChkWater-Obj0A_Index, Obj0A_Display-Obj0A_Index
0001514E 0000 0000                  		dc.w Obj0A_Delete2-Obj0A_Index,	Obj0A_Countdown-Obj0A_Index
00015152 0000 0000                  		dc.w Obj0A_AirLeft-Obj0A_Index,	Obj0A_Display-Obj0A_Index
00015156 0000                       		dc.w Obj0A_Delete2-Obj0A_Index
00015158                            ; ===========================================================================
00015158                            
00015158                            Obj0A_Main:				; XREF: Obj0A_Index
00015158 5428 0024                  		addq.b	#2,$24(a0)
0001515C 217C 0001 34B0 0004        		move.l	#Map_obj64,4(a0)
00015164 317C 8348 0002             		move.w	#$8348,2(a0)
0001516A 117C 0084 0001             		move.b	#$84,1(a0)
00015170 117C 0010 0019             		move.b	#$10,$19(a0)
00015176 117C 0001 0018             		move.b	#1,$18(a0)
0001517C 1028 0028                  		move.b	$28(a0),d0
00015180 6A00                       		bpl.s	loc_13D00
00015182 5028 0024                  		addq.b	#8,$24(a0)
00015186 217C 0000 0000 0004        		move.l	#Map_obj0A,4(a0)
0001518E 317C 0440 0002             		move.w	#$440,2(a0)
00015194 0240 007F                  		andi.w	#$7F,d0
00015198 1140 0033                  		move.b	d0,$33(a0)
0001519C 6000 0000                  		bra.w	Obj0A_Countdown
000151A0                            ; ===========================================================================
000151A0                            
000151A0                            loc_13D00:
000151A0 1140 001C                  		move.b	d0,$1C(a0)
000151A4 3168 0008 0030             		move.w	8(a0),$30(a0)
000151AA 317C FF78 0012             		move.w	#-$88,$12(a0)
000151B0                            
000151B0                            Obj0A_Animate:				; XREF: Obj0A_Index
000151B0 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
000151B6 4EB9 0000 B1F6             		jsr	AnimateSprite
000151BC                            
000151BC                            Obj0A_ChkWater:				; XREF: Obj0A_Index
000151BC 3038 F646                  		move.w	($FFFFF646).w,d0
000151C0 B068 000C                  		cmp.w	$C(a0),d0	; has bubble reached the water surface?
000151C4 6500                       		bcs.s	Obj0A_Wobble	; if not, branch
000151C6 117C 0006 0024             		move.b	#6,$24(a0)
000151CC 5E28 001C                  		addq.b	#7,$1C(a0)
000151D0 0C28 000D 001C             		cmpi.b	#$D,$1C(a0)
000151D6 6700                       		beq.s	Obj0A_Display
000151D8 6000                       		bra.s	Obj0A_Display
000151DA                            ; ===========================================================================
000151DA                            
000151DA                            Obj0A_Wobble:
000151DA 4A38 F7C7                  		tst.b	($FFFFF7C7).w
000151DE 6700                       		beq.s	loc_13D44
000151E0 5868 0030                  		addq.w	#4,$30(a0)
000151E4                            
000151E4                            loc_13D44:
000151E4 1028 0026                  		move.b	$26(a0),d0
000151E8 5228 0026                  		addq.b	#1,$26(a0)
000151EC 0240 007F                  		andi.w	#$7F,d0
000151F0 43F9 0000 0000             		lea	(Obj0A_WobbleData).l,a1
000151F6 1031 0000                  		move.b	(a1,d0.w),d0
000151FA 4880                       		ext.w	d0
000151FC D068 0030                  		add.w	$30(a0),d0
00015200 3140 0008                  		move.w	d0,8(a0)
00015204 6100                       		bsr.s	Obj0A_ShowNumber
00015206 4EBA 8EB6                  		jsr	SpeedToPos
0001520A 4A28 0001                  		tst.b	1(a0)
0001520E 6A00                       		bpl.s	Obj0A_Delete
00015210 4EFA 8ED2                  		jmp	DisplaySprite
00015214                            ; ===========================================================================
00015214                            
00015214                            Obj0A_Delete:
00015214 4EFA 8F0A                  		jmp	DeleteObject
00015218                            ; ===========================================================================
00015218                            
00015218                            Obj0A_Display:				; XREF: Obj0A_Index
00015218 6100                       		bsr.s	Obj0A_ShowNumber
0001521A 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
00015220 4EB9 0000 B1F6             		jsr	AnimateSprite
00015226 4EFA 8EBC                  		jmp	DisplaySprite
0001522A                            ; ===========================================================================
0001522A                            
0001522A                            Obj0A_Delete2:				; XREF: Obj0A_Index
0001522A 4EFA 8EF4                  		jmp	DeleteObject
0001522E                            ; ===========================================================================
0001522E                            
0001522E                            Obj0A_AirLeft:				; XREF: Obj0A_Index
0001522E 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w ; check air remaining
00015234 6200                       		bhi.s	Obj0A_Delete3	; if higher than $C, branch
00015236 5368 0038                  		subq.w	#1,$38(a0)
0001523A 6600                       		bne.s	Obj0A_Display2
0001523C 117C 000E 0024             		move.b	#$E,$24(a0)
00015242 5E28 001C                  		addq.b	#7,$1C(a0)
00015246 60D0                       		bra.s	Obj0A_Display
00015248                            ; ===========================================================================
00015248                            
00015248                            Obj0A_Display2:
00015248 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
0001524E 4EB9 0000 B1F6             		jsr	AnimateSprite
00015254 4A28 0001                  		tst.b	1(a0)
00015258 6A00                       		bpl.s	Obj0A_Delete3
0001525A 4EFA 8E88                  		jmp	DisplaySprite
0001525E                            ; ===========================================================================
0001525E                            
0001525E                            Obj0A_Delete3:
0001525E 4EFA 8EC0                  		jmp	DeleteObject
00015262                            ; ===========================================================================
00015262                            
00015262                            Obj0A_ShowNumber:			; XREF: Obj0A_Wobble; Obj0A_Display
00015262 4A68 0038                  		tst.w	$38(a0)
00015266 6700                       		beq.s	locret_13E1A
00015268 5368 0038                  		subq.w	#1,$38(a0)
0001526C 6600                       		bne.s	locret_13E1A
0001526E 0C28 0007 001C             		cmpi.b	#7,$1C(a0)
00015274 6400                       		bcc.s	locret_13E1A
00015276 317C 000F 0038             		move.w	#$F,$38(a0)
0001527C 4268 0012                  		clr.w	$12(a0)
00015280 117C 0080 0001             		move.b	#$80,1(a0)
00015286 3028 0008                  		move.w	8(a0),d0
0001528A 9078 F700                  		sub.w	($FFFFF700).w,d0
0001528E 0640 0080                  		addi.w	#$80,d0
00015292 3140 0008                  		move.w	d0,8(a0)
00015296 3028 000C                  		move.w	$C(a0),d0
0001529A 9078 F704                  		sub.w	($FFFFF704).w,d0
0001529E 0640 0080                  		addi.w	#$80,d0
000152A2 3140 000A                  		move.w	d0,$A(a0)
000152A6 117C 000C 0024             		move.b	#$C,$24(a0)
000152AC                            
000152AC                            locret_13E1A:
000152AC 4E75                       		rts	
000152AE                            ; ===========================================================================
000152AE                            Obj0A_WobbleData:
000152AE 0000 0000 0000 0101 0101+  		dc.b 0, 0, 0, 0, 0, 0,	1, 1, 1, 1, 1, 2, 2, 2,	2, 2, 2
000152BF 0203 0303 0303 0303 0303+  		dc.b 2,	3, 3, 3, 3, 3, 3, 3, 3,	3, 3, 3, 3, 3, 3, 4, 3
000152D0 0303 0303 0303 0303 0303+  		dc.b 3,	3, 3, 3, 3, 3, 3, 3, 3,	3, 3, 3, 3, 2, 2, 2, 2
000152E1 0202 0201 0101 0101 0000+  		dc.b 2,	2, 2, 1, 1, 1, 1, 1, 0,	0, 0, 0, 0, 0, -1, -1
000152F1 FFFF FFFE FEFE FEFE FDFD+  		dc.b -1, -1, -1, -2, -2, -2, -2, -2, -3, -3, -3, -3, -3
000152FE FDFD FCFC FCFC FCFC FCFC+  		dc.b -3, -3, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
0001530B FCFC FCFC FCFC FCFC FCFC+  		dc.b -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
00015318 FCFC FCFC FCFD FDFD FDFD+  		dc.b -4, -4, -4, -4, -4, -3, -3, -3, -3, -3, -3, -3, -2
00015325 FEFE FEFE FFFF FFFF FF     		dc.b -2, -2, -2, -2, -1, -1, -1, -1, -1
0001532E                            ; ===========================================================================
0001532E                            
0001532E                            Obj0A_Countdown:			; XREF: Obj0A_Index
0001532E 4A68 002C                  		tst.w	$2C(a0)
00015332 6600 0000                  		bne.w	loc_13F86
00015336 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0001533C 6400 0000                  		bcc.w	locret_1408C
00015340 0838 0006 D022             		btst	#6,($FFFFD022).w
00015346 6700 0000                  		beq.w	locret_1408C
0001534A 5368 0038                  		subq.w	#1,$38(a0)
0001534E 6A00 0000                  		bpl.w	loc_13FAC
00015352 317C 003B 0038             		move.w	#59,$38(a0)
00015358 317C 0001 0036             		move.w	#1,$36(a0)
0001535E 4EB9 0000 33B4             		jsr	(RandomNumber).l
00015364 0240 0001                  		andi.w	#1,d0
00015368 1140 0034                  		move.b	d0,$34(a0)
0001536C 3038 FE14                  		move.w	($FFFFFE14).w,d0 ; check air remaining
00015370 0C40 0019                  		cmpi.w	#$19,d0
00015374 6700                       		beq.s	Obj0A_WarnSound	; play sound if	air is $19
00015376 0C40 0014                  		cmpi.w	#$14,d0
0001537A 6700                       		beq.s	Obj0A_WarnSound
0001537C 0C40 000F                  		cmpi.w	#$F,d0
00015380 6700                       		beq.s	Obj0A_WarnSound
00015382 0C40 000C                  		cmpi.w	#$C,d0
00015386 6200                       		bhi.s	Obj0A_ReduceAir	; if air is above $C, branch
00015388 6600                       		bne.s	loc_13F02
0001538A 303C 0092                  		move.w	#$92,d0
0001538E 4EB9 0000 1476             		jsr	(PlaySound).l	; play countdown music
00015394                            
00015394                            loc_13F02:
00015394 5328 0032                  		subq.b	#1,$32(a0)
00015398 6A00                       		bpl.s	Obj0A_ReduceAir
0001539A 1168 0033 0032             		move.b	$33(a0),$32(a0)
000153A0 08E8 0007 0036             		bset	#7,$36(a0)
000153A6 6000                       		bra.s	Obj0A_ReduceAir
000153A8                            ; ===========================================================================
000153A8                            
000153A8                            Obj0A_WarnSound:			; XREF: Obj0A_Countdown
000153A8 303C 00C2                  		move.w	#$C2,d0
000153AC 4EB9 0000 147C             		jsr	(PlaySound_Special).l ;	play "ding-ding" warning sound
000153B2                            
000153B2                            Obj0A_ReduceAir:
000153B2 5378 FE14                  		subq.w	#1,($FFFFFE14).w ; subtract 1 from air remaining
000153B6 6400 0000                  		bcc.w	Obj0A_GoMakeItem ; if air is above 0, branch
000153BA 6100 0000                  		bsr.w	ResumeMusic
000153BE 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w ; lock controls
000153C4 303C 00B2                  		move.w	#$B2,d0
000153C8 4EB9 0000 147C             		jsr	(PlaySound_Special).l ;	play drowning sound
000153CE 117C 000A 0034             		move.b	#$A,$34(a0)
000153D4 317C 0001 0036             		move.w	#1,$36(a0)
000153DA 317C 0078 002C             		move.w	#$78,$2C(a0)
000153E0 2F08                       		move.l	a0,-(sp)
000153E2 41F8 D000                  		lea	($FFFFD000).w,a0
000153E6 6100 F584                  		bsr.w	Sonic_ResetOnFloor
000153EA 117C 0017 001C             		move.b	#$17,$1C(a0)	; use Sonic's drowning animation
000153F0 08E8 0001 0022             		bset	#1,$22(a0)
000153F6 08E8 0007 0002             		bset	#7,2(a0)
000153FC 317C 0000 0012             		move.w	#0,$12(a0)
00015402 317C 0000 0010             		move.w	#0,$10(a0)
00015408 317C 0000 0014             		move.w	#0,$14(a0)
0001540E 117C 000A 0024             		move.b	#$A,$24(a0)		; Force the character to drown
00015414 11FC 0001 F744             		move.b	#1,($FFFFF744).w
0001541A 11FC 0000 FE1E             		move.b	#0,($FFFFFE1E).w	; Stop the timer immediately
00015420 205F                       		movea.l	(sp)+,a0
00015422 4E75                       		rts
00015424                            ; ===========================================================================
00015424                            
00015424                            loc_13F86:
00015424 5368 002C                  		subq.w	#1,$2C(a0)
00015428 6600                       		bne.s	loc_13FAC	; Make it jump straight to this location
0001542A 11FC 0006 D024             		move.b	#6,($FFFFD000+$24).w
00015430 4E75                       		rts
00015432                            ; ===========================================================================
00015432                            
00015432                            Obj0A_GoMakeItem:			; XREF: Obj0A_ReduceAir
00015432 6000                       		bra.s	Obj0A_MakeItem
00015434                            ; ===========================================================================
00015434                            
00015434                            loc_13FAC:
00015434 4A68 0036                  		tst.w	$36(a0)
00015438 6700 0000                  		beq.w	locret_1408C
0001543C 5368 003A                  		subq.w	#1,$3A(a0)
00015440 6A00 0000                  		bpl.w	locret_1408C
00015444                            
00015444                            Obj0A_MakeItem:
00015444 4EB9 0000 33B4             		jsr	(RandomNumber).l
0001544A 0240 000F                  		andi.w	#$F,d0
0001544E 3140 003A                  		move.w	d0,$3A(a0)
00015452 4EBA 9126                  		jsr	SingleObjLoad
00015456 6600 0000                  		bne.w	locret_1408C
0001545A 12BC 000A                  		move.b	#$A,0(a1)	; load object
0001545E 3378 D008 0008             		move.w	($FFFFD008).w,8(a1) ; match X position to Sonic
00015464 7006                       		moveq	#6,d0
00015466 0838 0000 D022             		btst	#0,($FFFFD022).w
0001546C 6700                       		beq.s	loc_13FF2
0001546E 4440                       		neg.w	d0
00015470 137C 0040 0026             		move.b	#$40,$26(a1)
00015476                            
00015476                            loc_13FF2:
00015476 D169 0008                  		add.w	d0,8(a1)
0001547A 3378 D00C 000C             		move.w	($FFFFD00C).w,$C(a1)
00015480 137C 0006 0028             		move.b	#6,$28(a1)
00015486 4A68 002C                  		tst.w	$2C(a0)
0001548A 6700 0000                  		beq.w	loc_1403E
0001548E 0268 0007 003A             		andi.w	#7,$3A(a0)
00015494 0668 0000 003A             		addi.w	#0,$3A(a0)
0001549A 3038 D00C                  		move.w	($FFFFD00C).w,d0
0001549E 0440 000C                  		subi.w	#$C,d0
000154A2 3340 000C                  		move.w	d0,$C(a1)
000154A6 4EB9 0000 33B4             		jsr	(RandomNumber).l
000154AC 1340 0026                  		move.b	d0,$26(a1)
000154B0 3038 FE04                  		move.w	($FFFFFE04).w,d0
000154B4 0200 0003                  		andi.b	#3,d0
000154B8 6600                       		bne.s	loc_14082
000154BA 137C 000E 0028             		move.b	#$E,$28(a1)
000154C0 6000                       		bra.s	loc_14082
000154C2                            ; ===========================================================================
000154C2                            
000154C2                            loc_1403E:
000154C2 0828 0007 0036             		btst	#7,$36(a0)
000154C8 6700                       		beq.s	loc_14082
000154CA 3438 FE14                  		move.w	($FFFFFE14).w,d2
000154CE E24A                       		lsr.w	#1,d2
000154D0 4EB9 0000 33B4             		jsr	(RandomNumber).l
000154D6 0240 0003                  		andi.w	#3,d0
000154DA 6600                       		bne.s	loc_1406A
000154DC 08E8 0006 0036             		bset	#6,$36(a0)
000154E2 6600                       		bne.s	loc_14082
000154E4 1342 0028                  		move.b	d2,$28(a1)
000154E8 337C 001C 0038             		move.w	#$1C,$38(a1)
000154EE                            
000154EE                            loc_1406A:
000154EE 4A28 0034                  		tst.b	$34(a0)
000154F2 6600                       		bne.s	loc_14082
000154F4 08E8 0006 0036             		bset	#6,$36(a0)
000154FA 6600                       		bne.s	loc_14082
000154FC 1342 0028                  		move.b	d2,$28(a1)
00015500 337C 001C 0038             		move.w	#$1C,$38(a1)
00015506                            
00015506                            loc_14082:
00015506 5328 0034                  		subq.b	#1,$34(a0)
0001550A 6A00                       		bpl.s	locret_1408C
0001550C 4268 0036                  		clr.w	$36(a0)
00015510                            
00015510                            locret_1408C:
00015510 4E75                       		rts	
00015512                            
00015512                            ; ---------------------------------------------------------------------------
00015512                            ; Subroutine to	play music for LZ/SBZ3 after a countdown
00015512                            ; ---------------------------------------------------------------------------
00015512                            
00015512                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015512                            
00015512                            
00015512                            ResumeMusic:				; XREF: Obj64_Wobble; Sonic_Water; Obj0A_ReduceAir
00015512 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w
00015518                             
00015518                            ; Third section of the NineKode - Play correct music after the countdown (if you breathe)
00015518                             
00015518 6200 0000                  		bhi.w	loc_140AC	; change to bhi.w!
0001551C                             
0001551C 0C38 0000 FE11             		cmpi.b	#$0,($FFFFFE11).w	; is this act 1?
00015522 6600                       		bne.s	Air_GetBgm2	; if not, branch
00015524 43F9 0000 419A             		lea	(MusicList1).l,a1	; load Music Playlist for Acts 1
0001552A 6000                       		bra.s	Air_PlayMusic	; go to PlayMusic
0001552C                             
0001552C                            Air_GetBgm2:
0001552C 0C38 0001 FE11             		cmpi.b	#$1,($FFFFFE11).w	; is this act 2?
00015532 6600                       		bne.s	Air_GetBgm3	; if not, branch
00015534 43F9 0000 41A0             		lea	(MusicList2).l,a1	; load Music Playlist for Acts 2
0001553A 6000                       		bra.s	Air_PlayMusic	; go to PlayMusic
0001553C                             
0001553C                            Air_GetBgm3:
0001553C 0C38 0002 FE11             		cmpi.b	#$2,($FFFFFE11).w	; is this act 3?
00015542 6600                       		bne.s	Air_GetBgm4	; if not, branch
00015544 43F9 0000 41A6             		lea	(MusicList3).l,a1	; load Music Playlist for Acts 3
0001554A 6000                       		bra.s	Air_PlayMusic	; go to PlayMusic
0001554C                             
0001554C                            Air_GetBgm4:
0001554C 0C38 0003 FE11             		cmpi.b	#$3,($FFFFFE11).w	; is this act 4?
00015552 6600                       		bne.s	Air_PlayMusic	; if not, branch
00015554 43F9 0000 41AC             		lea	(MusicList4).l,a1	; load Music Playlist for Acts 4
0001555A                             
0001555A                            Air_PlayMusic:
0001555A 1029 0001                  		move.b	1(a1),d0	; load entry $1 from the playlist
0001555E                             
0001555E                            loc_140A6:
0001555E 4EB9 0000 1476             		jsr	(PlaySound).l
00015564                             
00015564                            ; NineKode ends here
00015564                            
00015564                            loc_140AC:
00015564 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
0001556A 4238 D372                  		clr.b	($FFFFD372).w
0001556E 4E75                       		rts	
00015570                            ; End of function ResumeMusic
00015570                            
00015570                            ; ===========================================================================
00015570                            Ani_obj0A:
00015570                            	include "_anim\obj0A.asm"
00015570                            ; ---------------------------------------------------------------------------
00015570                            ; Animation script - countdown numbers and bubbles (LZ)
00015570                            ; ---------------------------------------------------------------------------
00015570 0000                       		dc.w byte_140D6-Ani_obj0A
00015572 0000                       		dc.w byte_140E0-Ani_obj0A
00015574 0000                       		dc.w byte_140EA-Ani_obj0A
00015576 0000                       		dc.w byte_140F4-Ani_obj0A
00015578 0000                       		dc.w byte_140FE-Ani_obj0A
0001557A 0000                       		dc.w byte_14108-Ani_obj0A
0001557C 0000                       		dc.w byte_14112-Ani_obj0A
0001557E 0000                       		dc.w byte_14118-Ani_obj0A
00015580 0000                       		dc.w byte_14120-Ani_obj0A
00015582 0000                       		dc.w byte_14128-Ani_obj0A
00015584 0000                       		dc.w byte_14130-Ani_obj0A
00015586 0000                       		dc.w byte_14138-Ani_obj0A
00015588 0000                       		dc.w byte_14140-Ani_obj0A
0001558A 0000                       		dc.w byte_14148-Ani_obj0A
0001558C 0000                       		dc.w byte_1414A-Ani_obj0A
0001558E 0500 0102 0304 090D FC00   byte_140D6:	dc.b 5,	0, 1, 2, 3, 4, 9, $D, $FC, 0
00015598 0500 0102 0304 0C12 FC00   byte_140E0:	dc.b 5,	0, 1, 2, 3, 4, $C, $12,	$FC, 0
000155A2 0500 0102 0304 0C11 FC00   byte_140EA:	dc.b 5,	0, 1, 2, 3, 4, $C, $11,	$FC, 0
000155AC 0500 0102 0304 0B10 FC00   byte_140F4:	dc.b 5,	0, 1, 2, 3, 4, $B, $10,	$FC, 0
000155B6 0500 0102 0304 090F FC00   byte_140FE:	dc.b 5,	0, 1, 2, 3, 4, 9, $F, $FC, 0
000155C0 0500 0102 0304 0A0E FC00   byte_14108:	dc.b 5,	0, 1, 2, 3, 4, $A, $E, $FC, 0
000155CA 0E00 0102 FC00             byte_14112:	dc.b $E, 0, 1, 2, $FC, 0
000155D0 0716 0D16 0D16 0DFC        byte_14118:	dc.b 7,	$16, $D, $16, $D, $16, $D, $FC
000155D8 0716 1216 1216 12FC        byte_14120:	dc.b 7,	$16, $12, $16, $12, $16, $12, $FC
000155E0 0716 1116 1116 11FC        byte_14128:	dc.b 7,	$16, $11, $16, $11, $16, $11, $FC
000155E8 0716 1016 1016 10FC        byte_14130:	dc.b 7,	$16, $10, $16, $10, $16, $10, $FC
000155F0 0716 0F16 0F16 0FFC        byte_14138:	dc.b 7,	$16, $F, $16, $F, $16, $F, $FC
000155F8 0716 0E16 0E16 0EFC        byte_14140:	dc.b 7,	$16, $E, $16, $E, $16, $E, $FC
00015600 0EFC                       byte_14148:	dc.b $E, $FC
00015602 0E01 0203 04FC             byte_1414A:	dc.b $E, 1, 2, 3, 4, $FC
00015608                            		even
00015608                            		even
00015608                            
00015608                            ; ---------------------------------------------------------------------------
00015608                            ; Sprite mappings - drowning countdown numbers (LZ)
00015608                            ; ---------------------------------------------------------------------------
00015608                            Map_obj0A:
00015608                            	include "_maps\obj0A.asm"
00015608                            ; ---------------------------------------------------------------------------
00015608                            ; Sprite mappings - drowning countdown numbers (LZ)
00015608                            ; ---------------------------------------------------------------------------
00015608 0000                       		dc.w byte_14152-Map_obj0A
0001560A 01                         byte_14152:	dc.b 1
0001560B E80E 0000 F2               		dc.b $E8, $E, 0, 0, $F2
00015610                            		even
00015610                            		even
00015610                            
00015610                            ; ===========================================================================
00015610                            ; ---------------------------------------------------------------------------
00015610                            ; Object 38 - shield and invincibility stars
00015610                            ; ---------------------------------------------------------------------------
00015610                            
00015610                            Obj38:					; XREF: Obj_Index
00015610 7000                       		moveq	#0,d0
00015612 1028 0024                  		move.b	$24(a0),d0
00015616 323B 0000                  		move.w	Obj38_Index(pc,d0.w),d1
0001561A 4EFB 1000                  		jmp	Obj38_Index(pc,d1.w)
0001561E                            ; ===========================================================================
0001561E 0000                       Obj38_Index:	dc.w Obj38_Main-Obj38_Index
00015620 0000                       		dc.w Obj38_Shield-Obj38_Index
00015622 0000                       		dc.w Obj38_Stars-Obj38_Index
00015624                            ; ===========================================================================
00015624                            
00015624                            Obj38_Main:				; XREF: Obj38_Index
00015624 5428 0024                  		addq.b	#2,$24(a0)
00015628 217C 0000 0000 0004        		move.l	#Map_obj38,4(a0)
00015630 117C 0004 0001             		move.b	#4,1(a0)
00015636 117C 0001 0018             		move.b	#1,$18(a0)
0001563C 117C 0010 0019             		move.b	#$10,$19(a0)
00015642 4A28 001C                  		tst.b	$1C(a0)		; is object a shield?
00015646 6600                       		bne.s	Obj38_DoStars	; if not, branch
00015648 317C 0541 0002             		move.w	#$541,2(a0)	; shield specific code
0001564E 4E75                       		rts	
00015650                            ; ===========================================================================
00015650                            
00015650                            Obj38_DoStars:
00015650 5428 0024                  		addq.b	#2,$24(a0)	; stars	specific code
00015654 317C 055C 0002             		move.w	#$55C,2(a0)
0001565A 4E75                       		rts	
0001565C                            ; ===========================================================================
0001565C                            
0001565C                            Obj38_Shield:				; XREF: Obj38_Index
0001565C 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
00015660 6600                       		bne.s	Obj38_RmvShield	; if yes, branch
00015662 4A38 FE2C                  		tst.b	($FFFFFE2C).w	; does Sonic have shield?
00015666 6700                       		beq.s	Obj38_Delete	; if not, branch
00015668 3178 D008 0008             		move.w	($FFFFD008).w,8(a0)
0001566E 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0)
00015674 1178 D022 0022             		move.b	($FFFFD022).w,$22(a0)
0001567A 43F9 0000 0000             		lea	(Ani_obj38).l,a1
00015680 4EB9 0000 B1F6             		jsr	AnimateSprite
00015686 4EFA 8A5C                  		jmp	DisplaySprite
0001568A                            ; ===========================================================================
0001568A                            
0001568A                            Obj38_RmvShield:
0001568A 4E75                       		rts	
0001568C                            ; ===========================================================================
0001568C                            
0001568C                            Obj38_Delete:
0001568C 4EFA 8A92                  		jmp	DeleteObject
00015690                            ; ===========================================================================
00015690                            
00015690                            Obj38_Stars:				; XREF: Obj38_Index
00015690 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
00015694 6700                       		beq.s	Obj38_Delete2	; if not, branch
00015696 3038 F7A8                  		move.w	($FFFFF7A8).w,d0
0001569A 1228 001C                  		move.b	$1C(a0),d1
0001569E 5301                       		subq.b	#1,d1
000156A0 6000                       		bra.s	Obj38_StarTrail
000156A2                            ; ===========================================================================
000156A2 E909                       		lsl.b	#4,d1
000156A4 5801                       		addq.b	#4,d1
000156A6 9001                       		sub.b	d1,d0
000156A8 1228 0030                  		move.b	$30(a0),d1
000156AC 9001                       		sub.b	d1,d0
000156AE 5801                       		addq.b	#4,d1
000156B0 0201 000F                  		andi.b	#$F,d1
000156B4 1141 0030                  		move.b	d1,$30(a0)
000156B8 6000                       		bra.s	Obj38_StarTrail2a
000156BA                            ; ===========================================================================
000156BA                            
000156BA                            Obj38_StarTrail:			; XREF: Obj38_Stars
000156BA E709                       		lsl.b	#3,d1
000156BC 1401                       		move.b	d1,d2
000156BE D201                       		add.b	d1,d1
000156C0 D202                       		add.b	d2,d1
000156C2 5801                       		addq.b	#4,d1
000156C4 9001                       		sub.b	d1,d0
000156C6 1228 0030                  		move.b	$30(a0),d1
000156CA 9001                       		sub.b	d1,d0
000156CC 5801                       		addq.b	#4,d1
000156CE 0C01 0018                  		cmpi.b	#$18,d1
000156D2 6500                       		bcs.s	Obj38_StarTrail2
000156D4 7200                       		moveq	#0,d1
000156D6                            
000156D6                            Obj38_StarTrail2:
000156D6 1141 0030                  		move.b	d1,$30(a0)
000156DA                            
000156DA                            Obj38_StarTrail2a:
000156DA 43F8 CB00                  		lea	($FFFFCB00).w,a1
000156DE 43F1 0000                  		lea	(a1,d0.w),a1
000156E2 3159 0008                  		move.w	(a1)+,8(a0)
000156E6 3159 000C                  		move.w	(a1)+,$C(a0)
000156EA 1178 D022 0022             		move.b	($FFFFD022).w,$22(a0)
000156F0 43F9 0000 0000             		lea	(Ani_obj38).l,a1
000156F6 4EB9 0000 B1F6             		jsr	AnimateSprite
000156FC 4EFA 89E6                  		jmp	DisplaySprite
00015700                            ; ===========================================================================
00015700                            
00015700                            Obj38_Delete2:				; XREF: Obj38_Stars
00015700 4EFA 8A1E                  		jmp	DeleteObject
00015704                            ; ===========================================================================
00015704                            ; ---------------------------------------------------------------------------
00015704                            ; Object 4A - special stage entry from beta
00015704                            ; ---------------------------------------------------------------------------
00015704                            
00015704                            Obj4A:					; XREF: Obj_Index
00015704 7000                       		moveq	#0,d0
00015706 1028 0024                  		move.b	$24(a0),d0
0001570A 323B 0000                  		move.w	Obj4A_Index(pc,d0.w),d1
0001570E 4EFB 1000                  		jmp	Obj4A_Index(pc,d1.w)
00015712                            ; ===========================================================================
00015712 0000                       Obj4A_Index:	dc.w Obj4A_Main-Obj4A_Index
00015714 0000                       		dc.w Obj4A_RmvSonic-Obj4A_Index
00015716 0000                       		dc.w Obj4A_LoadSonic-Obj4A_Index
00015718                            ; ===========================================================================
00015718                            
00015718                            Obj4A_Main:				; XREF: Obj4A_Index
00015718 4AB8 F680                  		tst.l	($FFFFF680).w	; are pattern load cues	empty?
0001571C 6700                       		beq.s	Obj4A_Main2	; if yes, branch
0001571E 4E75                       		rts	
00015720                            ; ===========================================================================
00015720                            
00015720                            Obj4A_Main2:
00015720 5428 0024                  		addq.b	#2,$24(a0)
00015724 217C 0000 0000 0004        		move.l	#Map_obj4A,4(a0)
0001572C 117C 0004 0001             		move.b	#4,1(a0)
00015732 117C 0001 0018             		move.b	#1,$18(a0)
00015738 117C 0038 0019             		move.b	#$38,$19(a0)
0001573E 317C 0541 0002             		move.w	#$541,2(a0)
00015744 317C 0078 0030             		move.w	#120,$30(a0)	; set time for Sonic's disappearance to 2 seconds
0001574A                            
0001574A                            Obj4A_RmvSonic:				; XREF: Obj4A_Index
0001574A 3178 D008 0008             		move.w	($FFFFD008).w,8(a0)
00015750 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0)
00015756 1178 D022 0022             		move.b	($FFFFD022).w,$22(a0)
0001575C 43F9 0000 0000             		lea	(Ani_obj4A).l,a1
00015762 4EB9 0000 B1F6             		jsr	AnimateSprite
00015768 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0001576E 6600                       		bne.s	Obj4A_Display
00015770 4A38 D000                  		tst.b	($FFFFD000).w
00015774 6700                       		beq.s	Obj4A_Display
00015776 11FC 0000 D000             		move.b	#0,($FFFFD000).w ; remove Sonic
0001577C 303C 00A8                  		move.w	#$A8,d0
00015780 4EB9 0000 147C             		jsr	(PlaySound_Special).l ;	play Special Stage "GOAL" sound
00015786                            
00015786                            Obj4A_Display:
00015786 4EFA 895C                  		jmp	DisplaySprite
0001578A                            ; ===========================================================================
0001578A                            
0001578A                            Obj4A_LoadSonic:			; XREF: Obj4A_Index
0001578A 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time
0001578E 6600                       		bne.s	Obj4A_Wait	; if time remains, branch
00015790 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
00015796 4EFA 8988                  		jmp	DeleteObject
0001579A                            ; ===========================================================================
0001579A                            
0001579A                            Obj4A_Wait:
0001579A 4E75                       		rts	
0001579C                            ; ===========================================================================
0001579C                            	include "_inc\sub RememberState.asm"
0001579C                            ; ---------------------------------------------------------------------------
0001579C                            ; Subroutine to remember whether an object is destroyed/collected
0001579C                            ; ---------------------------------------------------------------------------
0001579C                            
0001579C                            RememberState:
000157BA 6000 8928                  		bra.w	DisplaySprite
000157BE                            
000157BE                            	@offscreen:
000157BE 45F8 FC00                  		lea	(v_objstate).w,a2
000157C2 7000                       		moveq	#0,d0
000157C4 1028 0023                  		move.b	obRespawnNo(a0),d0
000157C8 6700                       		beq.s	@delete
000157CA 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
000157D0                            
000157D0                            	@delete:
000157D0 6000 894E                  		bra.w	DeleteObject
000157D0 6000 894E                  		bra.w	DeleteObject
000157D4 =00000034                  id_Roll:	equ (SonAni_Roll-SonicAniData)/2	; 2
000157D4 0000 0000                  ptr_sndCC:	dc.l SoundCC
000157D8                            ani_booster:
000157D8                            	include "_anim\speedbooster.asm"
000157D8                            ; ---------------------------------------------------------------------------
000157D8                            ; Animation script - Sonic 4's Speed Booster
000157D8                            ; ---------------------------------------------------------------------------
000157D8 0000                       		dc.w idle-Ani_Booster
000157DA 0101 0101 FE01             idle:	dc.b 1,	1, 1, 1, $FE, 1
000157E0                            		even
000157E0                            		even
000157E0                            speedboosters:
000157E0                            	include "_inc\speedbooster.asm"
000157E0                            ; ----------------------------------------------------------------------------
000157E0                            ; Object 06 - Booster things from CPZ
000157E0                            ; ----------------------------------------------------------------------------
000157E0                            
000157E0                            		; DATA XREF: ROM:0001600Co
000157E0 7000                       		moveq	#0,d0
000157E2 1028 0024                  		move.b	obRoutine(a0),d0
000157E6 323B 0000                  		move.w	Booster_Index(pc,d0.w),d1
000157EA 4EFB 1000                  		jmp	Booster_Index(pc,d1.w)
000157EE                            ; ===========================================================================
000157EE 0000                       Booster_Index:	dc.w Booster_Init-Booster_Index; 0 ; DATA XREF: h+B346o h+B348o
000157F0 0000                       		dc.w Booster_Loop-Booster_Index; 1
000157F2 1000                       word_222BE:	dc.w $1000		; 0
000157F4 0A00                       		dc.w  $A00		; 1
000157F6                            ; ===========================================================================
000157F6                            
000157F6                            Booster_Init:				; DATA XREF: h+B346o
000157F6 5428 0024                  		addq.b	#2,obRoutine(a0)
000157FA 217C 0000 0000 0004        		move.l	#Map_SpeedBooster,obMap(a0)
00015802                            		
00015802                            		;move.w	#$372,obGfx(a0) ; SYZ2 specific code
00015802                            		;cmpi.w	#(id_SYZ<<8)+1,(v_zone).w ; check if level is SY2
00015802                            		;beq.s	@Continue	; if yes, branch
00015802 317C 5000 0002             		move.w	#$0400*20,obGfx(a0) ; 0 = palette line, XXX = Tile address (VRAM address / $20)
00015808                            		
00015808                            	@Continue:	
00015808                            		;bsr.w	loc_22402
00015808 0028 0004 0001             		ori.b	#4,obRender(a0)
0001580E 117C 0020 0019             		move.b	#$20,obActWid(a0) ; ' '
00015814 117C 0001 0018             		move.b	#1,obPriority(a0)
0001581A 1028 0028                  		move.b	obSubtype(a0),d0
0001581E 0240 0002                  		andi.w	#2,d0
00015822 317B 00CE 0030             		move.w	word_222BE(pc,d0.w),$30(a0)
00015828                            
00015828                            Booster_Loop:				; DATA XREF: h+B346o
00015828                            		;move.b	(obTimeFrame).w,obFrame(a0)
00015828                            		;andi.b	#2,d0
00015828                            		;move.b	d0,obFrame(a0)
00015828                            		;move.b	(v_ani1_frame).w,obFrame(a0)
00015828 3028 0008                  		move.w	obX(a0),d0
0001582C 3200                       		move.w	d0,d1
0001582E 0440 0010                  		subi.w	#$10,d0
00015832 0641 0010                  		addi.w	#$10,d1
00015836 3428 000C                  		move.w	obY(a0),d2
0001583A 3602                       		move.w	d2,d3
0001583C 0442 0010                  		subi.w	#$10,d2
00015840 0643 0010                  		addi.w	#$10,d3
00015844                            		;lea	($FFFFB000).w,a1
00015844 43F8 D000                  		lea	(v_player).w,a1
00015848 0829 0001 0022             		btst	#1,obStatus(a1)
0001584E 6600                       		bne.s	loc_22384
00015850 3829 0008                  		move.w	obX(a1),d4
00015854 B840                       		cmp.w	d0,d4
00015856 6500 0000                  		bcs.w	loc_22384
0001585A B841                       		cmp.w	d1,d4
0001585C 6400 0000                  		bcc.w	loc_22384
00015860 3829 000C                  		move.w	obY(a1),d4
00015864 B842                       		cmp.w	d2,d4
00015866 6500 0000                  		bcs.w	loc_22384
0001586A B843                       		cmp.w	d3,d4
0001586C 6400 0000                  		bcc.w	loc_22384
00015870 3F00                       		move.w	d0,-(sp)
00015872 6100 0000                  		bsr.w	loc_22388
00015876 301F                       		move.w	(sp)+,d0
00015878                            		;bsr.w	loc_22388
00015878                            
00015878                            ;loc_22354:				; CODE XREF: h+B3B6j h+B3BEj ...
00015878                            		;lea	(v_player).w,a1 ; a1=character
00015878                            		;btst	#1,$22(a1)
00015878                            		;bne.s	loc_22384
00015878                            		;move.w	8(a1),d4
00015878                            		;cmp.w	d0,d4
00015878                            		;bcs.w	loc_22384
00015878                            		;cmp.w	d1,d4
00015878                            		;bcc.w	loc_22384
00015878                            		;move.w	$C(a1),d4
00015878                            		;cmp.w	d2,d4
00015878                            		;bcs.w	loc_22384
00015878                            		;cmp.w	d3,d4
00015878                            		;bcc.w	loc_22384
00015878                            		;bsr.w	loc_22388
00015878                            
00015878                            loc_22384:				; CODE XREF: h+B3EAj h+B3F2j ...
00015878 4EFA A92C                  		jmp	MarkObjGone		;jsr	loc_223FC
0001587C                            ; ===========================================================================
0001587C                            
0001587C                            loc_22388:				; CODE XREF: h+B3DAp h+B40Cp
0001587C 3029 0010                  		move.w	obVelX(a1),d0
00015880 0828 0000 0022             		btst	#0,obStatus(a0)
00015886 6700                       		beq.s	loc_22396
00015888 4440                       		neg.w	d0
0001588A                            
0001588A                            loc_22396:				; CODE XREF: h+B41Ej
0001588A 0C40 1000                  		cmpi.w	#$1000,d0 			; is the character already going super fast?
0001588E 6C00                       		bge.s	loc_223D8 			; if yes, branch to not change the speed
00015890 3368 0030 0010             		move.w	$30(a0),obVelX(a1)  ; make the character go super fast
00015896 08A9 0000 0022             		bclr	#0,obStatus(a1)		; turn him right
0001589C 0828 0000 0022             		btst	#0,obStatus(a0)		; was that the correct direction?
000158A2 6700                       		beq.s	loc_223BA 			; if yes, branch
000158A4 08E9 0000 0022             		bset	#0,obStatus(a1)		; turn him left
000158AA 4469 0010                  		neg.w	obVelX(a1)			; make the boosting direction left
000158AE                            
000158AE                            loc_223BA:				; CODE XREF: h+B43Aj
000158AE                            		;move.w	#$F,$2E(a1)
000158AE 3369 0010 0014             		move.w	obVelX(a1),obInertia(a1)
000158B4 08A8 0005 0022             		bclr	#5,obStatus(a0)
000158BA 08A8 0006 0022             		bclr	#6,obStatus(a0)
000158C0 08A9 0005 0022             		bclr	#5,obStatus(a1)
000158C6                            		
000158C6                            		;addq.w	#5,obY(a1)
000158C6                            
000158C6                            loc_223D8:				; CODE XREF: h+B426j
000158C6                            		;move.w	#$D1,d0	; 'Ì'
000158C6                            		;jmp	(play_SFX).l
000158C6                            ;		bset	#2,obStatus(a1)		;set rolling bit
000158C6                            ;		move.b	#$E,obHeight(a1) 	; change hitbox
000158C6                            ;		move.b	#7,obWidth(a1)	  	; change hitbox
000158C6                            ;		move.b	#id_Roll,obAnim(a1) ; use "rolling" animation
000158C6 303C 00D1                  		move.w	#$D1,d0
000158CA 4EF9 0000 147C             		jmp	(PlaySound_Special).l ;	play spring sound
000158D0                            ; ===========================================================================
000158D0                            ; -------------------------------------------------------------------------------
000158D0                            ; sprite mappings
000158D0                            ; -------------------------------------------------------------------------------
000158D0                            Map_SpeedBooster:	incbin "_maps/SpeedBooster.asm"
00015AAA                            Nem_SpeedBooster:	incbin "artnem/speedbooster.bin"
00015CA1                            ; ===========================================================================
00015CA1                            
00015CA1                            ;loc_223FC:				; CODE XREF: h+B410j	
00015CA1                            ;       out_of_range    DeleteObject
00015CA1                            ;		lea	(Ani_Eggman).l,a1
00015CA1                            ;		jsr	AnimateSprite
00015CA1                            ;		bra.w	RememberState
00015CA1                            ;		even
00015CA1                            ;		even
00015CA1                            ; ---------------------------------------------------------------------------
00015CA1                            ; Object 08 - water splash (LZ)
00015CA1                            ; ---------------------------------------------------------------------------
00015CA1                            
00015CA1                            Obj08:					; XREF: Obj_Index
00015CA2 0070 00                    		moveq	#0,d0
00015CA4 1028 0024                  		move.b	$24(a0),d0
00015CA8 323B 0000                  		move.w	Obj08_Index(pc,d0.w),d1
00015CAC 4EFB 1000                  		jmp	Obj08_Index(pc,d1.w)
00015CB0                            ; ===========================================================================
00015CB0 0000                       Obj08_Index:	dc.w Obj08_Main-Obj08_Index
00015CB2 0000                       		dc.w Obj08_Display-Obj08_Index
00015CB4 0000                       		dc.w Obj08_Delete-Obj08_Index
00015CB6                            ; ===========================================================================
00015CB6                            
00015CB6                            Obj08_Main:				; XREF: Obj08_Index
00015CB6 5428 0024                  		addq.b	#2,$24(a0)
00015CBA 217C 0000 0000 0004        		move.l	#Map_obj08,4(a0)
00015CC2 0028 0004 0001             		ori.b	#4,1(a0)
00015CC8 117C 0001 0018             		move.b	#1,$18(a0)
00015CCE 117C 0010 0019             		move.b	#$10,$19(a0)
00015CD4 317C 4259 0002             		move.w	#$4259,2(a0)
00015CDA 3178 D008 0008             		move.w	($FFFFD008).w,8(a0) ; copy x-position from Sonic
00015CE0                            
00015CE0                            Obj08_Display:				; XREF: Obj08_Index
00015CE0 3178 F646 000C             		move.w	($FFFFF646).w,$C(a0) ; copy y-position from water height
00015CE6 43F9 0000 0000             		lea	(Ani_obj08).l,a1
00015CEC 4EB9 0000 B1F6             		jsr	AnimateSprite
00015CF2 4EFA 83F0                  		jmp	DisplaySprite
00015CF6                            ; ===========================================================================
00015CF6                            
00015CF6                            Obj08_Delete:				; XREF: Obj08_Index
00015CF6 4EFA 8428                  		jmp	DeleteObject	; delete when animation	is complete
00015CFA                            ; ===========================================================================
00015CFA                            Ani_obj38:
00015CFA                            	include "_anim\obj38.asm"
00015CFA                            ; ---------------------------------------------------------------------------
00015CFA                            ; Animation script - shield and invincibility stars
00015CFA                            ; ---------------------------------------------------------------------------
00015CFA 0000                       		dc.w byte_14356-Ani_obj38
00015CFC 0000                       		dc.w byte_1435E-Ani_obj38
00015CFE 0000                       		dc.w byte_14364-Ani_obj38
00015D00 0000                       		dc.w byte_1437E-Ani_obj38
00015D02 0000                       		dc.w byte_14398-Ani_obj38
00015D04 0101 0002 0003 00FF        byte_14356:	dc.b 1,	1, 0, 2, 0, 3, 0, $FF
00015D0C 0504 0506 07FF             byte_1435E:	dc.b 5,	4, 5, 6, 7, $FF
00015D12 0004 0400 0404 0005 0500+  byte_14364:	dc.b 0,	4, 4, 0, 4, 4, 0, 5, 5,	0, 5, 5, 0, 6, 6, 0, 6
00015D23 0600 0707 0007 0700 FF     		dc.b 6,	0, 7, 7, 0, 7, 7, 0, $FF
00015D2C 0004 0400 0400 0005 0500+  byte_1437E:	dc.b 0,	4, 4, 0, 4, 0, 0, 5, 5,	0, 5, 0, 0, 6, 6, 0, 6
00015D3D 0000 0707 0007 0000 FF     		dc.b 0,	0, 7, 7, 0, 7, 0, 0, $FF
00015D46 0004 0000 0400 0005 0000+  byte_14398:	dc.b 0,	4, 0, 0, 4, 0, 0, 5, 0,	0, 5, 0, 0, 6, 0, 0, 6
00015D57 0000 0700 0007 0000 FF     		dc.b 0,	0, 7, 0, 0, 7, 0, 0, $FF
00015D60                            		even
00015D60                            		even
00015D60                            
00015D60                            ; ---------------------------------------------------------------------------
00015D60                            ; Sprite mappings - shield and invincibility stars
00015D60                            ; ---------------------------------------------------------------------------
00015D60                            Map_obj38:
00015D60                            	include "_maps\obj38.asm"
00015D60                            ; ---------------------------------------------------------------------------
00015D60                            ; Sprite mappings - shield and invincibility stars
00015D60                            ; ---------------------------------------------------------------------------
00015D60 0000 0000                  		dc.w byte_143CD-Map_obj38, byte_143C2-Map_obj38
00015D64 0000 0000                  		dc.w byte_143D7-Map_obj38, byte_143EC-Map_obj38
00015D68 0000 0000                  		dc.w byte_14401-Map_obj38, byte_14416-Map_obj38
00015D6C 0000 0000                  		dc.w byte_1442B-Map_obj38, byte_14440-Map_obj38
00015D70 04                         byte_143C2:	dc.b 4
00015D71 E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
00015D76 E80A 0009 00               		dc.b $E8, $A, 0, 9, 0
00015D7B 000A 1000 E8               byte_143CD:	dc.b 0,	$A, $10, 0, $E8
00015D80 000A 1009 00               		dc.b 0,	$A, $10, 9, 0
00015D85 04                         byte_143D7:	dc.b 4
00015D86 E80A 0812 E9               		dc.b $E8, $A, 8, $12, $E9
00015D8B E80A 0012 00               		dc.b $E8, $A, 0, $12, 0
00015D90 000A 1812 E9               		dc.b 0,	$A, $18, $12, $E9
00015D95 000A 1012 00               		dc.b 0,	$A, $10, $12, 0
00015D9A 04                         byte_143EC:	dc.b 4
00015D9B E80A 0809 E8               		dc.b $E8, $A, 8, 9, $E8
00015DA0 E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
00015DA5 000A 1809 E8               		dc.b 0,	$A, $18, 9, $E8
00015DAA 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
00015DAF 04                         byte_14401:	dc.b 4
00015DB0 E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
00015DB5 E80A 0009 00               		dc.b $E8, $A, 0, 9, 0
00015DBA 000A 1809 E8               		dc.b 0,	$A, $18, 9, $E8
00015DBF 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
00015DC4 04                         byte_14416:	dc.b 4
00015DC5 E80A 0809 E8               		dc.b $E8, $A, 8, 9, $E8
00015DCA E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
00015DCF 000A 1000 E8               		dc.b 0,	$A, $10, 0, $E8
00015DD4 000A 1009 00               		dc.b 0,	$A, $10, 9, 0
00015DD9 04                         byte_1442B:	dc.b 4
00015DDA E80A 0012 E8               		dc.b $E8, $A, 0, $12, $E8
00015DDF E80A 001B 00               		dc.b $E8, $A, 0, $1B, 0
00015DE4 000A 181B E8               		dc.b 0,	$A, $18, $1B, $E8
00015DE9 000A 1812 00               		dc.b 0,	$A, $18, $12, 0
00015DEE 04                         byte_14440:	dc.b 4
00015DEF E80A 081B E8               		dc.b $E8, $A, 8, $1B, $E8
00015DF4 E80A 0812 00               		dc.b $E8, $A, 8, $12, 0
00015DF9 000A 1012 E8               		dc.b 0,	$A, $10, $12, $E8
00015DFE 000A 101B 00               		dc.b 0,	$A, $10, $1B, 0
00015E04 00                         		even
00015E04 00                         		even
00015E04                            
00015E04                            Ani_obj4A:
00015E04                            	include "_anim\obj4A.asm"
00015E04                            ; ---------------------------------------------------------------------------
00015E04                            ; Animation script - special stage entry effect from beta
00015E04                            ; ---------------------------------------------------------------------------
00015E04 0000                       		dc.w byte_14458-Ani_obj4A
00015E06 0500 0100 0100 0701 0702+  byte_14458:	dc.b 5,	0, 1, 0, 1, 0, 7, 1, 7,	2, 7, 3, 7, 4, 7, 5, 7, 6, 7, $FC
00015E1A                            		even
00015E1A                            		even
00015E1A                            
00015E1A                            ; ---------------------------------------------------------------------------
00015E1A                            ; Sprite mappings - special stage entry	from beta
00015E1A                            ; ---------------------------------------------------------------------------
00015E1A                            Map_obj4A:
00015E1A                            	include "_maps\obj4A.asm"
00015E1A                            ; ---------------------------------------------------------------------------
00015E1A                            ; Sprite mappings - special stage entry	from beta
00015E1A                            ; ---------------------------------------------------------------------------
00015E1A 0000 0000                  		dc.w byte_1447C-Map_obj4A, byte_1448C-Map_obj4A
00015E1E 0000 0000                  		dc.w byte_1449C-Map_obj4A, byte_144B6-Map_obj4A
00015E22 0000 0000                  		dc.w byte_144E4-Map_obj4A, byte_1453F-Map_obj4A
00015E26 0000 0000                  		dc.w byte_14595-Map_obj4A, byte_145BF-Map_obj4A
00015E2A 03                         byte_1447C:	dc.b 3
00015E2B F800 0000 08               		dc.b $F8, 0, 0,	0, 8
00015E30 0004 0001 00               		dc.b 0,	4, 0, 1, 0
00015E35 0800 1000 08               		dc.b 8,	0, $10,	0, 8
00015E3A 03                         byte_1448C:	dc.b 3
00015E3B F00D 0003 F0               		dc.b $F0, $D, 0, 3, $F0
00015E40 000C 000B F0               		dc.b 0,	$C, 0, $B, $F0
00015E45 080D 1003 F0               		dc.b 8,	$D, $10, 3, $F0
00015E4A 05                         byte_1449C:	dc.b 5
00015E4B E40E 000F F4               		dc.b $E4, $E, 0, $F, $F4
00015E50 EC02 001B EC               		dc.b $EC, 2, 0,	$1B, $EC
00015E55 FC0C 001E F4               		dc.b $FC, $C, 0, $1E, $F4
00015E5A 040E 100F F4               		dc.b 4,	$E, $10, $F, $F4
00015E5F 0401 101B EC               		dc.b 4,	1, $10,	$1B, $EC
00015E64 09                         byte_144B6:	dc.b 9
00015E65 F008 0022 F8               		dc.b $F0, 8, 0,	$22, $F8
00015E6A F80E 0025 F0               		dc.b $F8, $E, 0, $25, $F0
00015E6F 1008 0031 F0               		dc.b $10, 8, 0,	$31, $F0
00015E74 0005 0034 10               		dc.b 0,	5, 0, $34, $10
00015E79 F800 0825 10               		dc.b $F8, 0, 8,	$25, $10
00015E7E F000 1836 18               		dc.b $F0, 0, $18, $36, $18
00015E83 F800 1825 20               		dc.b $F8, 0, $18, $25, $20
00015E88 0000 0825 28               		dc.b 0,	0, 8, $25, $28
00015E8D F800 0025 30               		dc.b $F8, 0, 0,	$25, $30
00015E92 12                         byte_144E4:	dc.b $12
00015E93 0000 1825 F0               		dc.b 0,	0, $18,	$25, $F0
00015E98 F804 0038 F8               		dc.b $F8, 4, 0,	$38, $F8
00015E9D F000 0026 08               		dc.b $F0, 0, 0,	$26, 8
00015EA2 0000 0025 00               		dc.b 0,	0, 0, $25, 0
00015EA7 0800 1825 F8               		dc.b 8,	0, $18,	$25, $F8
00015EAC 1000 1026 00               		dc.b $10, 0, $10, $26, 0
00015EB1 0800 1038 08               		dc.b 8,	0, $10,	$38, 8
00015EB6 F800 0029 10               		dc.b $F8, 0, 0,	$29, $10
00015EBB 0000 0026 10               		dc.b 0,	0, 0, $26, $10
00015EC0 0000 002D 18               		dc.b 0,	0, 0, $2D, $18
00015EC5 0800 0826 18               		dc.b 8,	0, 8, $26, $18
00015ECA 0800 0029 20               		dc.b 8,	0, 0, $29, $20
00015ECF F800 0026 20               		dc.b $F8, 0, 0,	$26, $20
00015ED4 F800 002D 28               		dc.b $F8, 0, 0,	$2D, $28
00015ED9 0000 003A 28               		dc.b 0,	0, 0, $3A, $28
00015EDE F800 1826 30               		dc.b $F8, 0, $18, $26, $30
00015EE3 0000 1025 38               		dc.b 0,	0, $10,	$25, $38
00015EE8 F800 1025 40               		dc.b $F8, 0, $10, $25, $40
00015EED 11                         byte_1453F:	dc.b $11
00015EEE F800 0825 00               		dc.b $F8, 0, 8,	$25, 0
00015EF3 F000 0038 10               		dc.b $F0, 0, 0,	$38, $10
00015EF8 1000 0825 00               		dc.b $10, 0, 8,	$25, 0
00015EFD 0000 1825 10               		dc.b 0,	0, $18,	$25, $10
00015F02 0800 1025 18               		dc.b 8,	0, $10,	$25, $18
00015F07 F800 1825 20               		dc.b $F8, 0, $18, $25, $20
00015F0C 0000 1026 28               		dc.b 0,	0, $10,	$26, $28
00015F11 F800 1025 30               		dc.b $F8, 0, $10, $25, $30
00015F16 0000 0025 30               		dc.b 0,	0, 0, $25, $30
00015F1B 0800 0825 30               		dc.b 8,	0, 8, $25, $30
00015F20 0000 0826 38               		dc.b 0,	0, 8, $26, $38
00015F25 0800 0029 38               		dc.b 8,	0, 0, $29, $38
00015F2A F800 0826 40               		dc.b $F8, 0, 8,	$26, $40
00015F2F 0000 002D 40               		dc.b 0,	0, 0, $2D, $40
00015F34 F800 0825 48               		dc.b $F8, 0, 8,	$25, $48
00015F39 0000 0025 48               		dc.b 0,	0, 0, $25, $48
00015F3E 0000 1025 50               		dc.b 0,	0, $10,	$25, $50
00015F43 09                         byte_14595:	dc.b 9
00015F44 FC00 0826 30               		dc.b $FC, 0, 8,	$26, $30
00015F49 0400 0825 28               		dc.b 4,	0, 8, $25, $28
00015F4E 0400 1027 38               		dc.b 4,	0, $10,	$27, $38
00015F53 0400 0826 40               		dc.b 4,	0, 8, $26, $40
00015F58 FC00 1025 40               		dc.b $FC, 0, $10, $25, $40
00015F5D FC00 1026 48               		dc.b $FC, 0, $10, $26, $48
00015F62 0C00 0827 48               		dc.b $C, 0, 8, $27, $48
00015F67 0400 1826 50               		dc.b 4,	0, $18,	$26, $50
00015F6C 04                         		dc.b 4
00015F6D 0008 2758 00               byte_145BF:	dc.b 0,	8, $27,	$58, 0
00015F72                            		even
00015F72                            		even
00015F72                            
00015F72                            Ani_obj08:
00015F72                            	include "_anim\obj08.asm"
00015F72                            ; ---------------------------------------------------------------------------
00015F72                            ; Animation script - water splash (LZ)
00015F72                            ; ---------------------------------------------------------------------------
00015F72 0000                       		dc.w byte_145C6-Ani_obj08
00015F74 0400 0102 FC00             byte_145C6:	dc.b 4,	0, 1, 2, $FC, 0
00015F7A                            		even
00015F7A                            		even
00015F7A                            
00015F7A                            ; ---------------------------------------------------------------------------
00015F7A                            ; Sprite mappings - water splash (LZ)
00015F7A                            ; ---------------------------------------------------------------------------
00015F7A                            Map_obj08:
00015F7A                            	include "_maps\obj08.asm"
00015F7A                            ; ---------------------------------------------------------------------------
00015F7A                            ; Sprite mappings - water splash (LZ)
00015F7A                            ; ---------------------------------------------------------------------------
00015F7A 0000                       		dc.w byte_145D2-Map_obj08
00015F7C 0000                       		dc.w byte_145DD-Map_obj08
00015F7E 0000                       		dc.w byte_145E8-Map_obj08
00015F80 02                         byte_145D2:	dc.b 2
00015F81 F204 006D F8               		dc.b $F2, 4, 0,	$6D, $F8
00015F86 FA0C 006F F0               		dc.b $FA, $C, 0, $6F, $F0
00015F8B 02                         byte_145DD:	dc.b 2
00015F8C E200 0073 F8               		dc.b $E2, 0, 0,	$73, $F8
00015F91 EA0E 0074 F0               		dc.b $EA, $E, 0, $74, $F0
00015F96 01                         byte_145E8:	dc.b 1
00015F97 E20F 0080 F0               		dc.b $E2, $F, 0, $80, $F0
00015F9C                            		even
00015F9C                            		even
00015F9C                            
00015F9C                            ; ---------------------------------------------------------------------------
00015F9C                            ; Subroutine to	change Sonic's angle & position as he walks along the floor
00015F9C                            ; ---------------------------------------------------------------------------
00015F9C                            
00015F9C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015F9C                            
00015F9C                            
00015F9C                            Sonic_AnglePos:				; XREF: Obj01_MdNormal; Obj01_MdRoll
00015F9C 0828 0003 0022             		btst	#3,$22(a0)
00015FA2 6700                       		beq.s	loc_14602
00015FA4 7000                       		moveq	#0,d0
00015FA6 11C0 F768                  		move.b	d0,($FFFFF768).w
00015FAA 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00015FAE 4E75                       		rts	
00015FB0                            ; ===========================================================================
00015FB0                            
00015FB0                            loc_14602:
00015FB0 7003                       		moveq	#3,d0
00015FB2 11C0 F768                  		move.b	d0,($FFFFF768).w
00015FB6 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00015FBA 1028 0026                  		move.b	$26(a0),d0
00015FBE 0600 0020                  		addi.b	#$20,d0
00015FC2 6A00                       		bpl.s	loc_14624
00015FC4 1028 0026                  		move.b	$26(a0),d0
00015FC8 6A00                       		bpl.s	loc_1461E
00015FCA 5300                       		subq.b	#1,d0
00015FCC                            
00015FCC                            loc_1461E:
00015FCC 0600 0020                  		addi.b	#$20,d0
00015FD0 6000                       		bra.s	loc_14630
00015FD2                            ; ===========================================================================
00015FD2                            
00015FD2                            loc_14624:
00015FD2 1028 0026                  		move.b	$26(a0),d0
00015FD6 6A00                       		bpl.s	loc_1462C
00015FD8 5200                       		addq.b	#1,d0
00015FDA                            
00015FDA                            loc_1462C:
00015FDA 0600 001F                  		addi.b	#$1F,d0
00015FDE                            
00015FDE                            loc_14630:
00015FDE 0200 00C0                  		andi.b	#$C0,d0
00015FE2 0C00 0040                  		cmpi.b	#$40,d0
00015FE6 6700 0000                  		beq.w	Sonic_WalkVertL
00015FEA 0C00 0080                  		cmpi.b	#$80,d0
00015FEE 6700 0000                  		beq.w	Sonic_WalkCeiling
00015FF2 0C00 00C0                  		cmpi.b	#$C0,d0
00015FF6 6700 0000                  		beq.w	Sonic_WalkVertR
00015FFA 3428 000C                  		move.w	$C(a0),d2
00015FFE 3628 0008                  		move.w	8(a0),d3
00016002 7000                       		moveq	#0,d0
00016004 1028 0016                  		move.b	$16(a0),d0
00016008 4880                       		ext.w	d0
0001600A D440                       		add.w	d0,d2
0001600C 1028 0017                  		move.b	$17(a0),d0
00016010 4880                       		ext.w	d0
00016012 D640                       		add.w	d0,d3
00016014 49F8 F768                  		lea	($FFFFF768).w,a4
00016018 367C 0010                  		movea.w	#$10,a3
0001601C 3C3C 0000                  		move.w	#0,d6
00016020 7A0D                       		moveq	#$D,d5
00016022 6100 0000                  		bsr.w	FindFloor
00016026 3F01                       		move.w	d1,-(sp)
00016028 3428 000C                  		move.w	$C(a0),d2
0001602C 3628 0008                  		move.w	8(a0),d3
00016030 7000                       		moveq	#0,d0
00016032 1028 0016                  		move.b	$16(a0),d0
00016036 4880                       		ext.w	d0
00016038 D440                       		add.w	d0,d2
0001603A 1028 0017                  		move.b	$17(a0),d0
0001603E 4880                       		ext.w	d0
00016040 4440                       		neg.w	d0
00016042 D640                       		add.w	d0,d3
00016044 49F8 F76A                  		lea	($FFFFF76A).w,a4
00016048 367C 0010                  		movea.w	#$10,a3
0001604C 3C3C 0000                  		move.w	#0,d6
00016050 7A0D                       		moveq	#$D,d5
00016052 6100 0000                  		bsr.w	FindFloor
00016056 301F                       		move.w	(sp)+,d0
00016058 6100 0000                  		bsr.w	Sonic_Angle
0001605C 4A41                       		tst.w	d1
0001605E 6700                       		beq.s	locret_146BE
00016060 6A00                       		bpl.s	loc_146C0
00016062 0C41 FFF2                  		cmpi.w	#-$E,d1
00016066 6D00                       		blt.s	locret_146E6
00016068 D368 000C                  		add.w	d1,$C(a0)
0001606C                            
0001606C                            locret_146BE:
0001606C 4E75                       		rts	
0001606E                            ; ===========================================================================
0001606E                            
0001606E                            loc_146C0:
0001606E 0C41 000E                  		cmpi.w	#$E,d1
00016072 6E00                       		bgt.s	loc_146CC
00016074                            
00016074                            loc_146C6:
00016074 D368 000C                  		add.w	d1,$C(a0)
00016078 4E75                       		rts	
0001607A                            ; ===========================================================================
0001607A                            
0001607A                            loc_146CC:
0001607A 4A28 0038                  		tst.b	$38(a0)
0001607E 66F4                       		bne.s	loc_146C6
00016080 08E8 0001 0022             		bset	#1,$22(a0)
00016086 08A8 0005 0022             		bclr	#5,$22(a0)
0001608C 117C 0001 001D             		move.b	#1,$1D(a0)
00016092 4E75                       		rts	
00016094                            ; ===========================================================================
00016094                            
00016094                            locret_146E6:
00016094 4E75                       		rts	
00016096                            ; End of function Sonic_AnglePos
00016096                            
00016096                            ; ===========================================================================
00016096 2428 0008                  		move.l	8(a0),d2
0001609A 3028 0010                  		move.w	$10(a0),d0
0001609E 48C0                       		ext.l	d0
000160A0 E180                       		asl.l	#8,d0
000160A2 9480                       		sub.l	d0,d2
000160A4 2142 0008                  		move.l	d2,8(a0)
000160A8 303C 0038                  		move.w	#$38,d0
000160AC 48C0                       		ext.l	d0
000160AE E180                       		asl.l	#8,d0
000160B0 9680                       		sub.l	d0,d3
000160B2 2143 000C                  		move.l	d3,$C(a0)
000160B6 4E75                       		rts	
000160B8                            ; ===========================================================================
000160B8                            
000160B8                            locret_1470A:
000160B8 4E75                       		rts	
000160BA                            ; ===========================================================================
000160BA 2628 000C                  		move.l	$C(a0),d3
000160BE 3028 0012                  		move.w	$12(a0),d0
000160C2 0440 0038                  		subi.w	#$38,d0
000160C6 3140 0012                  		move.w	d0,$12(a0)
000160CA 48C0                       		ext.l	d0
000160CC E180                       		asl.l	#8,d0
000160CE 9680                       		sub.l	d0,d3
000160D0 2143 000C                  		move.l	d3,$C(a0)
000160D4 4E75                       		rts	
000160D6 4E75                       		rts	
000160D8                            ; ===========================================================================
000160D8 2428 0008                  		move.l	8(a0),d2
000160DC 2628 000C                  		move.l	$C(a0),d3
000160E0 3028 0010                  		move.w	$10(a0),d0
000160E4 48C0                       		ext.l	d0
000160E6 E180                       		asl.l	#8,d0
000160E8 9480                       		sub.l	d0,d2
000160EA 3028 0012                  		move.w	$12(a0),d0
000160EE 48C0                       		ext.l	d0
000160F0 E180                       		asl.l	#8,d0
000160F2 9680                       		sub.l	d0,d3
000160F4 2142 0008                  		move.l	d2,8(a0)
000160F8 2143 000C                  		move.l	d3,$C(a0)
000160FC 4E75                       		rts	
000160FE                            
000160FE                            ; ---------------------------------------------------------------------------
000160FE                            ; Subroutine to	change Sonic's angle as he walks along the floor
000160FE                            ; ---------------------------------------------------------------------------
000160FE                            
000160FE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000160FE                            
000160FE                            
000160FE                            Sonic_Angle:				; XREF: Sonic_AnglePos; et al
000160FE 1438 F76A                  		move.b	($FFFFF76A).w,d2
00016102 B240                       		cmp.w	d0,d1
00016104 6F00                       		ble.s	loc_1475E
00016106 1438 F768                  		move.b	($FFFFF768).w,d2
0001610A 3200                       		move.w	d0,d1
0001610C                            
0001610C                            loc_1475E:
0001610C 0802 0000                  		btst	#0,d2
00016110 6600                       		bne.s	loc_1476A
00016112 1142 0026                  		move.b	d2,$26(a0)
00016116 4E75                       		rts	
00016118                            ; ===========================================================================
00016118                            
00016118                            loc_1476A:
00016118 1428 0026                  		move.b	$26(a0),d2
0001611C 0602 0020                  		addi.b	#$20,d2
00016120 0202 00C0                  		andi.b	#$C0,d2
00016124 1142 0026                  		move.b	d2,$26(a0)
00016128 4E75                       		rts	
0001612A                            ; End of function Sonic_Angle
0001612A                            
0001612A                            ; ---------------------------------------------------------------------------
0001612A                            ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his right
0001612A                            ; ---------------------------------------------------------------------------
0001612A                            
0001612A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001612A                            
0001612A                            
0001612A                            Sonic_WalkVertR:			; XREF: Sonic_AnglePos
0001612A 3428 000C                  		move.w	$C(a0),d2
0001612E 3628 0008                  		move.w	8(a0),d3
00016132 7000                       		moveq	#0,d0
00016134 1028 0017                  		move.b	$17(a0),d0
00016138 4880                       		ext.w	d0
0001613A 4440                       		neg.w	d0
0001613C D440                       		add.w	d0,d2
0001613E 1028 0016                  		move.b	$16(a0),d0
00016142 4880                       		ext.w	d0
00016144 D640                       		add.w	d0,d3
00016146 49F8 F768                  		lea	($FFFFF768).w,a4
0001614A 367C 0010                  		movea.w	#$10,a3
0001614E 3C3C 0000                  		move.w	#0,d6
00016152 7A0D                       		moveq	#$D,d5
00016154 6100 0000                  		bsr.w	FindWall
00016158 3F01                       		move.w	d1,-(sp)
0001615A 3428 000C                  		move.w	$C(a0),d2
0001615E 3628 0008                  		move.w	8(a0),d3
00016162 7000                       		moveq	#0,d0
00016164 1028 0017                  		move.b	$17(a0),d0
00016168 4880                       		ext.w	d0
0001616A D440                       		add.w	d0,d2
0001616C 1028 0016                  		move.b	$16(a0),d0
00016170 4880                       		ext.w	d0
00016172 D640                       		add.w	d0,d3
00016174 49F8 F76A                  		lea	($FFFFF76A).w,a4
00016178 367C 0010                  		movea.w	#$10,a3
0001617C 3C3C 0000                  		move.w	#0,d6
00016180 7A0D                       		moveq	#$D,d5
00016182 6100 0000                  		bsr.w	FindWall
00016186 301F                       		move.w	(sp)+,d0
00016188 6100 FF74                  		bsr.w	Sonic_Angle
0001618C 4A41                       		tst.w	d1
0001618E 6700                       		beq.s	locret_147F0
00016190 6A00                       		bpl.s	loc_147F2
00016192 0C41 FFF2                  		cmpi.w	#-$E,d1
00016196 6D00 FF20                  		blt.w	locret_1470A
0001619A D368 0008                  		add.w	d1,8(a0)
0001619E                            
0001619E                            locret_147F0:
0001619E 4E75                       		rts	
000161A0                            ; ===========================================================================
000161A0                            
000161A0                            loc_147F2:
000161A0 0C41 000E                  		cmpi.w	#$E,d1
000161A4 6E00                       		bgt.s	loc_147FE
000161A6                            
000161A6                            loc_147F8:
000161A6 D368 0008                  		add.w	d1,8(a0)
000161AA 4E75                       		rts	
000161AC                            ; ===========================================================================
000161AC                            
000161AC                            loc_147FE:
000161AC 4A28 0038                  		tst.b	$38(a0)
000161B0 66F4                       		bne.s	loc_147F8
000161B2 08E8 0001 0022             		bset	#1,$22(a0)
000161B8 08A8 0005 0022             		bclr	#5,$22(a0)
000161BE 117C 0001 001D             		move.b	#1,$1D(a0)
000161C4 4E75                       		rts	
000161C6                            ; End of function Sonic_WalkVertR
000161C6                            
000161C6                            ; ---------------------------------------------------------------------------
000161C6                            ; Subroutine allowing Sonic to walk upside-down
000161C6                            ; ---------------------------------------------------------------------------
000161C6                            
000161C6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000161C6                            
000161C6                            
000161C6                            Sonic_WalkCeiling:			; XREF: Sonic_AnglePos
000161C6 3428 000C                  		move.w	$C(a0),d2
000161CA 3628 0008                  		move.w	8(a0),d3
000161CE 7000                       		moveq	#0,d0
000161D0 1028 0016                  		move.b	$16(a0),d0
000161D4 4880                       		ext.w	d0
000161D6 9440                       		sub.w	d0,d2
000161D8 0A42 000F                  		eori.w	#$F,d2
000161DC 1028 0017                  		move.b	$17(a0),d0
000161E0 4880                       		ext.w	d0
000161E2 D640                       		add.w	d0,d3
000161E4 49F8 F768                  		lea	($FFFFF768).w,a4
000161E8 367C FFF0                  		movea.w	#-$10,a3
000161EC 3C3C 1000                  		move.w	#$1000,d6
000161F0 7A0D                       		moveq	#$D,d5
000161F2 6100 0000                  		bsr.w	FindFloor
000161F6 3F01                       		move.w	d1,-(sp)
000161F8 3428 000C                  		move.w	$C(a0),d2
000161FC 3628 0008                  		move.w	8(a0),d3
00016200 7000                       		moveq	#0,d0
00016202 1028 0016                  		move.b	$16(a0),d0
00016206 4880                       		ext.w	d0
00016208 9440                       		sub.w	d0,d2
0001620A 0A42 000F                  		eori.w	#$F,d2
0001620E 1028 0017                  		move.b	$17(a0),d0
00016212 4880                       		ext.w	d0
00016214 9640                       		sub.w	d0,d3
00016216 49F8 F76A                  		lea	($FFFFF76A).w,a4
0001621A 367C FFF0                  		movea.w	#-$10,a3
0001621E 3C3C 1000                  		move.w	#$1000,d6
00016222 7A0D                       		moveq	#$D,d5
00016224 6100 0000                  		bsr.w	FindFloor
00016228 301F                       		move.w	(sp)+,d0
0001622A 6100 FED2                  		bsr.w	Sonic_Angle
0001622E 4A41                       		tst.w	d1
00016230 6700                       		beq.s	locret_14892
00016232 6A00                       		bpl.s	loc_14894
00016234 0C41 FFF2                  		cmpi.w	#-$E,d1
00016238 6D00 FE5A                  		blt.w	locret_146E6
0001623C 9368 000C                  		sub.w	d1,$C(a0)
00016240                            
00016240                            locret_14892:
00016240 4E75                       		rts	
00016242                            ; ===========================================================================
00016242                            
00016242                            loc_14894:
00016242 0C41 000E                  		cmpi.w	#$E,d1
00016246 6E00                       		bgt.s	loc_148A0
00016248                            
00016248                            loc_1489A:
00016248 9368 000C                  		sub.w	d1,$C(a0)
0001624C 4E75                       		rts	
0001624E                            ; ===========================================================================
0001624E                            
0001624E                            loc_148A0:
0001624E 4A28 0038                  		tst.b	$38(a0)
00016252 66F4                       		bne.s	loc_1489A
00016254 08E8 0001 0022             		bset	#1,$22(a0)
0001625A 08A8 0005 0022             		bclr	#5,$22(a0)
00016260 117C 0001 001D             		move.b	#1,$1D(a0)
00016266 4E75                       		rts	
00016268                            ; End of function Sonic_WalkCeiling
00016268                            
00016268                            ; ---------------------------------------------------------------------------
00016268                            ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his left
00016268                            ; ---------------------------------------------------------------------------
00016268                            
00016268                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016268                            
00016268                            
00016268                            Sonic_WalkVertL:			; XREF: Sonic_AnglePos
00016268 3428 000C                  		move.w	$C(a0),d2
0001626C 3628 0008                  		move.w	8(a0),d3
00016270 7000                       		moveq	#0,d0
00016272 1028 0017                  		move.b	$17(a0),d0
00016276 4880                       		ext.w	d0
00016278 9440                       		sub.w	d0,d2
0001627A 1028 0016                  		move.b	$16(a0),d0
0001627E 4880                       		ext.w	d0
00016280 9640                       		sub.w	d0,d3
00016282 0A43 000F                  		eori.w	#$F,d3
00016286 49F8 F768                  		lea	($FFFFF768).w,a4
0001628A 367C FFF0                  		movea.w	#-$10,a3
0001628E 3C3C 0800                  		move.w	#$800,d6
00016292 7A0D                       		moveq	#$D,d5
00016294 6100 0000                  		bsr.w	FindWall
00016298 3F01                       		move.w	d1,-(sp)
0001629A 3428 000C                  		move.w	$C(a0),d2
0001629E 3628 0008                  		move.w	8(a0),d3
000162A2 7000                       		moveq	#0,d0
000162A4 1028 0017                  		move.b	$17(a0),d0
000162A8 4880                       		ext.w	d0
000162AA D440                       		add.w	d0,d2
000162AC 1028 0016                  		move.b	$16(a0),d0
000162B0 4880                       		ext.w	d0
000162B2 9640                       		sub.w	d0,d3
000162B4 0A43 000F                  		eori.w	#$F,d3
000162B8 49F8 F76A                  		lea	($FFFFF76A).w,a4
000162BC 367C FFF0                  		movea.w	#-$10,a3
000162C0 3C3C 0800                  		move.w	#$800,d6
000162C4 7A0D                       		moveq	#$D,d5
000162C6 6100 0000                  		bsr.w	FindWall
000162CA 301F                       		move.w	(sp)+,d0
000162CC 6100 FE30                  		bsr.w	Sonic_Angle
000162D0 4A41                       		tst.w	d1
000162D2 6700                       		beq.s	locret_14934
000162D4 6A00                       		bpl.s	loc_14936
000162D6 0C41 FFF2                  		cmpi.w	#-$E,d1
000162DA 6D00 FDDC                  		blt.w	locret_1470A
000162DE 9368 0008                  		sub.w	d1,8(a0)
000162E2                            
000162E2                            locret_14934:
000162E2 4E75                       		rts	
000162E4                            ; ===========================================================================
000162E4                            
000162E4                            loc_14936:
000162E4 0C41 000E                  		cmpi.w	#$E,d1
000162E8 6E00                       		bgt.s	loc_14942
000162EA                            
000162EA                            loc_1493C:
000162EA 9368 0008                  		sub.w	d1,8(a0)
000162EE 4E75                       		rts	
000162F0                            ; ===========================================================================
000162F0                            
000162F0                            loc_14942:
000162F0 4A28 0038                  		tst.b	$38(a0)
000162F4 66F4                       		bne.s	loc_1493C
000162F6 08E8 0001 0022             		bset	#1,$22(a0)
000162FC 08A8 0005 0022             		bclr	#5,$22(a0)
00016302 117C 0001 001D             		move.b	#1,$1D(a0)
00016308 4E75                       		rts	
0001630A                            ; End of function Sonic_WalkVertL
0001630A                            
0001630A                            ; ---------------------------------------------------------------------------
0001630A                            ; Subroutine to	find which tile	the object is standing on
0001630A                            ; ---------------------------------------------------------------------------
0001630A                            
0001630A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001630A                            
0001630A                            
0001630A                            Floor_ChkTile:				; XREF: FindFloor; et al
0001630A 3002                       		move.w	d2,d0
0001630C E248                       		lsr.w	#1,d0
0001630E 0240 0380                  		andi.w	#$380,d0
00016312 3203                       		move.w	d3,d1
00016314 E049                       		lsr.w	#8,d1
00016316 0241 007F                  		andi.w	#$7F,d1
0001631A D041                       		add.w	d1,d0
0001631C 72FF                       		moveq	#-1,d1
0001631E 43F8 A400                  		lea	($FFFFA400).w,a1
00016322 1231 0000                  		move.b	(a1,d0.w),d1
00016326 6700                       		beq.s	loc_14996
00016328 6B00                       		bmi.s	loc_1499A
0001632A 5301                       		subq.b	#1,d1
0001632C 4881                       		ext.w	d1
0001632E EE59                       		ror.w	#7,d1
00016330 3002                       		move.w	d2,d0
00016332 D040                       		add.w	d0,d0
00016334 0240 01E0                  		andi.w	#$1E0,d0
00016338 D240                       		add.w	d0,d1
0001633A 3003                       		move.w	d3,d0
0001633C E648                       		lsr.w	#3,d0
0001633E 0240 001E                  		andi.w	#$1E,d0
00016342 D240                       		add.w	d0,d1
00016344                            
00016344                            loc_14996:
00016344 2241                       		movea.l	d1,a1
00016346 4E75                       		rts	
00016348                            ; ===========================================================================
00016348                            
00016348                            loc_1499A:
00016348 0241 007F                  		andi.w	#$7F,d1
0001634C 0828 0006 0001             		btst	#6,1(a0)
00016352 6700                       		beq.s	loc_149B2
00016354 5241                       		addq.w	#1,d1
00016356 0C41 0029                  		cmpi.w	#$29,d1
0001635A 6600                       		bne.s	loc_149B2
0001635C 323C 0051                  		move.w	#$51,d1
00016360                            
00016360                            loc_149B2:
00016360 5301                       		subq.b	#1,d1
00016362 EE59                       		ror.w	#7,d1
00016364 3002                       		move.w	d2,d0
00016366 D040                       		add.w	d0,d0
00016368 0240 01E0                  		andi.w	#$1E0,d0
0001636C D240                       		add.w	d0,d1
0001636E 3003                       		move.w	d3,d0
00016370 E648                       		lsr.w	#3,d0
00016372 0240 001E                  		andi.w	#$1E,d0
00016376 D240                       		add.w	d0,d1
00016378 2241                       		movea.l	d1,a1
0001637A 4E75                       		rts	
0001637C                            ; End of function Floor_ChkTile
0001637C                            
0001637C                            
0001637C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001637C                            
0001637C                            
0001637C                            FindFloor:				; XREF: Sonic_AnglePos; et al
0001637C 618C                       		bsr.s	Floor_ChkTile
0001637E 3011                       		move.w	(a1),d0
00016380 3800                       		move.w	d0,d4
00016382 0240 07FF                  		andi.w	#$7FF,d0
00016386 6700                       		beq.s	loc_149DE
00016388 0B04                       		btst	d5,d4
0001638A 6600                       		bne.s	loc_149EC
0001638C                            
0001638C                            loc_149DE:
0001638C D44B                       		add.w	a3,d2
0001638E 6100 0000                  		bsr.w	FindFloor2
00016392 944B                       		sub.w	a3,d2
00016394 0641 0010                  		addi.w	#$10,d1
00016398 4E75                       		rts	
0001639A                            ; ===========================================================================
0001639A                            
0001639A                            loc_149EC:
0001639A 2478 F796                  		movea.l	($FFFFF796).w,a2 ; load	collision index
0001639E 1032 0000                  		move.b	(a2,d0.w),d0
000163A2 0240 00FF                  		andi.w	#$FF,d0
000163A6 67E4                       		beq.s	loc_149DE
000163A8 45F9 0000 0000             		lea	(AngleMap).l,a2
000163AE 18B2 0000                  		move.b	(a2,d0.w),(a4)
000163B2 E948                       		lsl.w	#4,d0
000163B4 3203                       		move.w	d3,d1
000163B6 0804 000B                  		btst	#$B,d4
000163BA 6700                       		beq.s	loc_14A12
000163BC 4641                       		not.w	d1
000163BE 4414                       		neg.b	(a4)
000163C0                            
000163C0                            loc_14A12:
000163C0 0804 000C                  		btst	#$C,d4
000163C4 6700                       		beq.s	loc_14A22
000163C6 0614 0040                  		addi.b	#$40,(a4)
000163CA 4414                       		neg.b	(a4)
000163CC 0414 0040                  		subi.b	#$40,(a4)
000163D0                            
000163D0                            loc_14A22:
000163D0 0241 000F                  		andi.w	#$F,d1
000163D4 D240                       		add.w	d0,d1
000163D6 45F9 0000 0000             		lea	(CollArray1).l,a2
000163DC 1032 1000                  		move.b	(a2,d1.w),d0
000163E0 4880                       		ext.w	d0
000163E2 BD44                       		eor.w	d6,d4
000163E4 0804 000C                  		btst	#$C,d4
000163E8 6700                       		beq.s	loc_14A3E
000163EA 4440                       		neg.w	d0
000163EC                            
000163EC                            loc_14A3E:
000163EC 4A40                       		tst.w	d0
000163EE 679C                       		beq.s	loc_149DE
000163F0 6B00                       		bmi.s	loc_14A5A
000163F2 0C00 0010                  		cmpi.b	#$10,d0
000163F6 6700                       		beq.s	loc_14A66
000163F8 3202                       		move.w	d2,d1
000163FA 0241 000F                  		andi.w	#$F,d1
000163FE D041                       		add.w	d1,d0
00016400 323C 000F                  		move.w	#$F,d1
00016404 9240                       		sub.w	d0,d1
00016406 4E75                       		rts	
00016408                            ; ===========================================================================
00016408                            
00016408                            loc_14A5A:
00016408 3202                       		move.w	d2,d1
0001640A 0241 000F                  		andi.w	#$F,d1
0001640E D041                       		add.w	d1,d0
00016410 6A00 FF7A                  		bpl.w	loc_149DE
00016414                            
00016414                            loc_14A66:
00016414 944B                       		sub.w	a3,d2
00016416 6100 0000                  		bsr.w	FindFloor2
0001641A D44B                       		add.w	a3,d2
0001641C 0441 0010                  		subi.w	#$10,d1
00016420 4E75                       		rts	
00016422                            ; End of function FindFloor
00016422                            
00016422                            
00016422                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016422                            
00016422                            
00016422                            FindFloor2:				; XREF: FindFloor
00016422 6100 FEE6                  		bsr.w	Floor_ChkTile
00016426 3011                       		move.w	(a1),d0
00016428 3800                       		move.w	d0,d4
0001642A 0240 07FF                  		andi.w	#$7FF,d0
0001642E 6700                       		beq.s	loc_14A86
00016430 0B04                       		btst	d5,d4
00016432 6600                       		bne.s	loc_14A94
00016434                            
00016434                            loc_14A86:
00016434 323C 000F                  		move.w	#$F,d1
00016438 3002                       		move.w	d2,d0
0001643A 0240 000F                  		andi.w	#$F,d0
0001643E 9240                       		sub.w	d0,d1
00016440 4E75                       		rts	
00016442                            ; ===========================================================================
00016442                            
00016442                            loc_14A94:
00016442 2478 F796                  		movea.l	($FFFFF796).w,a2
00016446 1032 0000                  		move.b	(a2,d0.w),d0
0001644A 0240 00FF                  		andi.w	#$FF,d0
0001644E 67E4                       		beq.s	loc_14A86
00016450 45F9 0000 0000             		lea	(AngleMap).l,a2
00016456 18B2 0000                  		move.b	(a2,d0.w),(a4)
0001645A E948                       		lsl.w	#4,d0
0001645C 3203                       		move.w	d3,d1
0001645E 0804 000B                  		btst	#$B,d4
00016462 6700                       		beq.s	loc_14ABA
00016464 4641                       		not.w	d1
00016466 4414                       		neg.b	(a4)
00016468                            
00016468                            loc_14ABA:
00016468 0804 000C                  		btst	#$C,d4
0001646C 6700                       		beq.s	loc_14ACA
0001646E 0614 0040                  		addi.b	#$40,(a4)
00016472 4414                       		neg.b	(a4)
00016474 0414 0040                  		subi.b	#$40,(a4)
00016478                            
00016478                            loc_14ACA:
00016478 0241 000F                  		andi.w	#$F,d1
0001647C D240                       		add.w	d0,d1
0001647E 45F9 0000 0000             		lea	(CollArray1).l,a2
00016484 1032 1000                  		move.b	(a2,d1.w),d0
00016488 4880                       		ext.w	d0
0001648A BD44                       		eor.w	d6,d4
0001648C 0804 000C                  		btst	#$C,d4
00016490 6700                       		beq.s	loc_14AE6
00016492 4440                       		neg.w	d0
00016494                            
00016494                            loc_14AE6:
00016494 4A40                       		tst.w	d0
00016496 679C                       		beq.s	loc_14A86
00016498 6B00                       		bmi.s	loc_14AFC
0001649A 3202                       		move.w	d2,d1
0001649C 0241 000F                  		andi.w	#$F,d1
000164A0 D041                       		add.w	d1,d0
000164A2 323C 000F                  		move.w	#$F,d1
000164A6 9240                       		sub.w	d0,d1
000164A8 4E75                       		rts	
000164AA                            ; ===========================================================================
000164AA                            
000164AA                            loc_14AFC:
000164AA 3202                       		move.w	d2,d1
000164AC 0241 000F                  		andi.w	#$F,d1
000164B0 D041                       		add.w	d1,d0
000164B2 6A00 FF80                  		bpl.w	loc_14A86
000164B6 4641                       		not.w	d1
000164B8 4E75                       		rts	
000164BA                            ; End of function FindFloor2
000164BA                            
000164BA                            
000164BA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000164BA                            
000164BA                            
000164BA                            FindWall:				; XREF: Sonic_WalkVertR; et al
000164BA 6100 FE4E                  		bsr.w	Floor_ChkTile
000164BE 3011                       		move.w	(a1),d0
000164C0 3800                       		move.w	d0,d4
000164C2 0240 07FF                  		andi.w	#$7FF,d0
000164C6 6700                       		beq.s	loc_14B1E
000164C8 0B04                       		btst	d5,d4
000164CA 6600                       		bne.s	loc_14B2C
000164CC                            
000164CC                            loc_14B1E:
000164CC D64B                       		add.w	a3,d3
000164CE 6100 0000                  		bsr.w	FindWall2
000164D2 964B                       		sub.w	a3,d3
000164D4 0641 0010                  		addi.w	#$10,d1
000164D8 4E75                       		rts	
000164DA                            ; ===========================================================================
000164DA                            
000164DA                            loc_14B2C:
000164DA 2478 F796                  		movea.l	($FFFFF796).w,a2
000164DE 1032 0000                  		move.b	(a2,d0.w),d0
000164E2 0240 00FF                  		andi.w	#$FF,d0
000164E6 67E4                       		beq.s	loc_14B1E
000164E8 45F9 0000 0000             		lea	(AngleMap).l,a2
000164EE 18B2 0000                  		move.b	(a2,d0.w),(a4)
000164F2 E948                       		lsl.w	#4,d0
000164F4 3202                       		move.w	d2,d1
000164F6 0804 000C                  		btst	#$C,d4
000164FA 6700                       		beq.s	loc_14B5A
000164FC 4641                       		not.w	d1
000164FE 0614 0040                  		addi.b	#$40,(a4)
00016502 4414                       		neg.b	(a4)
00016504 0414 0040                  		subi.b	#$40,(a4)
00016508                            
00016508                            loc_14B5A:
00016508 0804 000B                  		btst	#$B,d4
0001650C 6700                       		beq.s	loc_14B62
0001650E 4414                       		neg.b	(a4)
00016510                            
00016510                            loc_14B62:
00016510 0241 000F                  		andi.w	#$F,d1
00016514 D240                       		add.w	d0,d1
00016516 45F9 0000 0000             		lea	(CollArray2).l,a2
0001651C 1032 1000                  		move.b	(a2,d1.w),d0
00016520 4880                       		ext.w	d0
00016522 BD44                       		eor.w	d6,d4
00016524 0804 000B                  		btst	#$B,d4
00016528 6700                       		beq.s	loc_14B7E
0001652A 4440                       		neg.w	d0
0001652C                            
0001652C                            loc_14B7E:
0001652C 4A40                       		tst.w	d0
0001652E 679C                       		beq.s	loc_14B1E
00016530 6B00                       		bmi.s	loc_14B9A
00016532 0C00 0010                  		cmpi.b	#$10,d0
00016536 6700                       		beq.s	loc_14BA6
00016538 3203                       		move.w	d3,d1
0001653A 0241 000F                  		andi.w	#$F,d1
0001653E D041                       		add.w	d1,d0
00016540 323C 000F                  		move.w	#$F,d1
00016544 9240                       		sub.w	d0,d1
00016546 4E75                       		rts	
00016548                            ; ===========================================================================
00016548                            
00016548                            loc_14B9A:
00016548 3203                       		move.w	d3,d1
0001654A 0241 000F                  		andi.w	#$F,d1
0001654E D041                       		add.w	d1,d0
00016550 6A00 FF7A                  		bpl.w	loc_14B1E
00016554                            
00016554                            loc_14BA6:
00016554 964B                       		sub.w	a3,d3
00016556 6100 0000                  		bsr.w	FindWall2
0001655A D64B                       		add.w	a3,d3
0001655C 0441 0010                  		subi.w	#$10,d1
00016560 4E75                       		rts	
00016562                            ; End of function FindWall
00016562                            
00016562                            
00016562                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016562                            
00016562                            
00016562                            FindWall2:				; XREF: FindWall
00016562 6100 FDA6                  		bsr.w	Floor_ChkTile
00016566 3011                       		move.w	(a1),d0
00016568 3800                       		move.w	d0,d4
0001656A 0240 07FF                  		andi.w	#$7FF,d0
0001656E 6700                       		beq.s	loc_14BC6
00016570 0B04                       		btst	d5,d4
00016572 6600                       		bne.s	loc_14BD4
00016574                            
00016574                            loc_14BC6:
00016574 323C 000F                  		move.w	#$F,d1
00016578 3003                       		move.w	d3,d0
0001657A 0240 000F                  		andi.w	#$F,d0
0001657E 9240                       		sub.w	d0,d1
00016580 4E75                       		rts	
00016582                            ; ===========================================================================
00016582                            
00016582                            loc_14BD4:
00016582 2478 F796                  		movea.l	($FFFFF796).w,a2
00016586 1032 0000                  		move.b	(a2,d0.w),d0
0001658A 0240 00FF                  		andi.w	#$FF,d0
0001658E 67E4                       		beq.s	loc_14BC6
00016590 45F9 0000 0000             		lea	(AngleMap).l,a2
00016596 18B2 0000                  		move.b	(a2,d0.w),(a4)
0001659A E948                       		lsl.w	#4,d0
0001659C 3202                       		move.w	d2,d1
0001659E 0804 000C                  		btst	#$C,d4
000165A2 6700                       		beq.s	loc_14C02
000165A4 4641                       		not.w	d1
000165A6 0614 0040                  		addi.b	#$40,(a4)
000165AA 4414                       		neg.b	(a4)
000165AC 0414 0040                  		subi.b	#$40,(a4)
000165B0                            
000165B0                            loc_14C02:
000165B0 0804 000B                  		btst	#$B,d4
000165B4 6700                       		beq.s	loc_14C0A
000165B6 4414                       		neg.b	(a4)
000165B8                            
000165B8                            loc_14C0A:
000165B8 0241 000F                  		andi.w	#$F,d1
000165BC D240                       		add.w	d0,d1
000165BE 45F9 0000 0000             		lea	(CollArray2).l,a2
000165C4 1032 1000                  		move.b	(a2,d1.w),d0
000165C8 4880                       		ext.w	d0
000165CA BD44                       		eor.w	d6,d4
000165CC 0804 000B                  		btst	#$B,d4
000165D0 6700                       		beq.s	loc_14C26
000165D2 4440                       		neg.w	d0
000165D4                            
000165D4                            loc_14C26:
000165D4 4A40                       		tst.w	d0
000165D6 679C                       		beq.s	loc_14BC6
000165D8 6B00                       		bmi.s	loc_14C3C
000165DA 3203                       		move.w	d3,d1
000165DC 0241 000F                  		andi.w	#$F,d1
000165E0 D041                       		add.w	d1,d0
000165E2 323C 000F                  		move.w	#$F,d1
000165E6 9240                       		sub.w	d0,d1
000165E8 4E75                       		rts	
000165EA                            ; ===========================================================================
000165EA                            
000165EA                            loc_14C3C:
000165EA 3203                       		move.w	d3,d1
000165EC 0241 000F                  		andi.w	#$F,d1
000165F0 D041                       		add.w	d1,d0
000165F2 6A00 FF80                  		bpl.w	loc_14BC6
000165F6 4641                       		not.w	d1
000165F8 4E75                       		rts	
000165FA                            ; End of function FindWall2
000165FA                            
000165FA                            ; ---------------------------------------------------------------------------
000165FA                            ; Unused floor/wall subroutine - logs something	to do with collision
000165FA                            ; ---------------------------------------------------------------------------
000165FA                            
000165FA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000165FA                            
000165FA                            
000165FA                            FloorLog_Unk:				; XREF: Level
000165FA 4E75                       		rts	
000165FC                            
000165FC 43F9 0000 0000             		lea	(CollArray1).l,a1
00016602 45F9 0000 0000             		lea	(CollArray1).l,a2
00016608 363C 00FF                  		move.w	#$FF,d3
0001660C                            
0001660C                            loc_14C5E:
0001660C 7A10                       		moveq	#$10,d5
0001660E 343C 000F                  		move.w	#$F,d2
00016612                            
00016612                            loc_14C64:
00016612 7800                       		moveq	#0,d4
00016614 323C 000F                  		move.w	#$F,d1
00016618                            
00016618                            loc_14C6A:
00016618 3019                       		move.w	(a1)+,d0
0001661A EAA8                       		lsr.l	d5,d0
0001661C D944                       		addx.w	d4,d4
0001661E 51C9 FFF8                  		dbf	d1,loc_14C6A
00016622                            
00016622 34C4                       		move.w	d4,(a2)+
00016624 92FC 0020                  		suba.w	#$20,a1
00016628 5345                       		subq.w	#1,d5
0001662A 51CA FFE6                  		dbf	d2,loc_14C64
0001662E                            
0001662E D2FC 0020                  		adda.w	#$20,a1
00016632 51CB FFD8                  		dbf	d3,loc_14C5E
00016636                            
00016636 43F9 0000 0000             		lea	(CollArray1).l,a1
0001663C 45F9 0000 0000             		lea	(CollArray2).l,a2
00016642 6100                       		bsr.s	FloorLog_Unk2
00016644 43F9 0000 0000             		lea	(CollArray1).l,a1
0001664A 45F9 0000 0000             		lea	(CollArray1).l,a2
00016650                            
00016650                            ; End of function FloorLog_Unk
00016650                            
00016650                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016650                            
00016650                            
00016650                            FloorLog_Unk2:				; XREF: FloorLog_Unk
00016650 363C 0FFF                  		move.w	#$FFF,d3
00016654                            
00016654                            loc_14CA6:
00016654 7400                       		moveq	#0,d2
00016656 323C 000F                  		move.w	#$F,d1
0001665A 3019                       		move.w	(a1)+,d0
0001665C 6700                       		beq.s	loc_14CD4
0001665E 6B00                       		bmi.s	loc_14CBE
00016660                            
00016660                            loc_14CB2:
00016660 E248                       		lsr.w	#1,d0
00016662 6400                       		bcc.s	loc_14CB8
00016664 5202                       		addq.b	#1,d2
00016666                            
00016666                            loc_14CB8:
00016666 51C9 FFF8                  		dbf	d1,loc_14CB2
0001666A                            
0001666A 6000                       		bra.s	loc_14CD6
0001666C                            ; ===========================================================================
0001666C                            
0001666C                            loc_14CBE:
0001666C 0C40 FFFF                  		cmpi.w	#-1,d0
00016670 6700                       		beq.s	loc_14CD0
00016672                            
00016672                            loc_14CC4:
00016672 E348                       		lsl.w	#1,d0
00016674 6400                       		bcc.s	loc_14CCA
00016676 5302                       		subq.b	#1,d2
00016678                            
00016678                            loc_14CCA:
00016678 51C9 FFF8                  		dbf	d1,loc_14CC4
0001667C                            
0001667C 6000                       		bra.s	loc_14CD6
0001667E                            ; ===========================================================================
0001667E                            
0001667E                            loc_14CD0:
0001667E 303C 0010                  		move.w	#$10,d0
00016682                            
00016682                            loc_14CD4:
00016682 3400                       		move.w	d0,d2
00016684                            
00016684                            loc_14CD6:
00016684 14C2                       		move.b	d2,(a2)+
00016686 51CB FFCC                  		dbf	d3,loc_14CA6
0001668A                            
0001668A 4E75                       		rts	
0001668C                            
0001668C                            ; End of function FloorLog_Unk2
0001668C                            
0001668C                            
0001668C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001668C                            
0001668C                            
0001668C                            Sonic_WalkSpeed:			; XREF: Sonic_Move
0001668C 2628 0008                  		move.l	8(a0),d3
00016690 2428 000C                  		move.l	$C(a0),d2
00016694 3228 0010                  		move.w	$10(a0),d1
00016698 48C1                       		ext.l	d1
0001669A E181                       		asl.l	#8,d1
0001669C D681                       		add.l	d1,d3
0001669E 3228 0012                  		move.w	$12(a0),d1
000166A2 48C1                       		ext.l	d1
000166A4 E181                       		asl.l	#8,d1
000166A6 D481                       		add.l	d1,d2
000166A8 4842                       		swap	d2
000166AA 4843                       		swap	d3
000166AC 11C0 F768                  		move.b	d0,($FFFFF768).w
000166B0 11C0 F76A                  		move.b	d0,($FFFFF76A).w
000166B4 1200                       		move.b	d0,d1
000166B6 0600 0020                  		addi.b	#$20,d0
000166BA 6A00                       		bpl.s	loc_14D1A
000166BC 1001                       		move.b	d1,d0
000166BE 6A00                       		bpl.s	loc_14D14
000166C0 5300                       		subq.b	#1,d0
000166C2                            
000166C2                            loc_14D14:
000166C2 0600 0020                  		addi.b	#$20,d0
000166C6 6000                       		bra.s	loc_14D24
000166C8                            ; ===========================================================================
000166C8                            
000166C8                            loc_14D1A:
000166C8 1001                       		move.b	d1,d0
000166CA 6A00                       		bpl.s	loc_14D20
000166CC 5200                       		addq.b	#1,d0
000166CE                            
000166CE                            loc_14D20:
000166CE 0600 001F                  		addi.b	#$1F,d0
000166D2                            
000166D2                            loc_14D24:
000166D2 0200 00C0                  		andi.b	#$C0,d0
000166D6 6700 0000                  		beq.w	loc_14DF0
000166DA 0C00 0080                  		cmpi.b	#$80,d0
000166DE 6700 0000                  		beq.w	loc_14F7C
000166E2 0201 0038                  		andi.b	#$38,d1
000166E6 6600                       		bne.s	loc_14D3C
000166E8 5042                       		addq.w	#8,d2
000166EA                            
000166EA                            loc_14D3C:
000166EA 0C00 0040                  		cmpi.b	#$40,d0
000166EE 6700 0000                  		beq.w	loc_1504A
000166F2 6000 0000                  		bra.w	loc_14EBC
000166F6                            
000166F6                            ; End of function Sonic_WalkSpeed
000166F6                            
000166F6                            
000166F6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000166F6                            
000166F6                            
000166F6                            sub_14D48:				; XREF: Sonic_Jump
000166F6 11C0 F768                  		move.b	d0,($FFFFF768).w
000166FA 11C0 F76A                  		move.b	d0,($FFFFF76A).w
000166FE 0600 0020                  		addi.b	#$20,d0
00016702 0200 00C0                  		andi.b	#$C0,d0
00016706 0C00 0040                  		cmpi.b	#$40,d0
0001670A 6700 0000                  		beq.w	loc_14FD6
0001670E 0C00 0080                  		cmpi.b	#$80,d0
00016712 6700 0000                  		beq.w	Sonic_DontRunOnWalls
00016716 0C00 00C0                  		cmpi.b	#$C0,d0
0001671A 6700 0000                  		beq.w	sub_14E50
0001671E                            
0001671E                            ; End of function sub_14D48
0001671E                            
0001671E                            ; ---------------------------------------------------------------------------
0001671E                            ; Subroutine to	make Sonic land	on the floor after jumping
0001671E                            ; ---------------------------------------------------------------------------
0001671E                            
0001671E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001671E                            
0001671E                            
0001671E                            Sonic_HitFloor:				; XREF: Sonic_Floor
0001671E 3428 000C                  		move.w	$C(a0),d2
00016722 3628 0008                  		move.w	8(a0),d3
00016726 7000                       		moveq	#0,d0
00016728 1028 0016                  		move.b	$16(a0),d0
0001672C 4880                       		ext.w	d0
0001672E D440                       		add.w	d0,d2
00016730 1028 0017                  		move.b	$17(a0),d0
00016734 4880                       		ext.w	d0
00016736 D640                       		add.w	d0,d3
00016738 49F8 F768                  		lea	($FFFFF768).w,a4
0001673C 367C 0010                  		movea.w	#$10,a3
00016740 3C3C 0000                  		move.w	#0,d6
00016744 7A0D                       		moveq	#$D,d5
00016746 6100 FC34                  		bsr.w	FindFloor
0001674A 3F01                       		move.w	d1,-(sp)
0001674C 3428 000C                  		move.w	$C(a0),d2
00016750 3628 0008                  		move.w	8(a0),d3
00016754 7000                       		moveq	#0,d0
00016756 1028 0016                  		move.b	$16(a0),d0
0001675A 4880                       		ext.w	d0
0001675C D440                       		add.w	d0,d2
0001675E 1028 0017                  		move.b	$17(a0),d0
00016762 4880                       		ext.w	d0
00016764 9640                       		sub.w	d0,d3
00016766 49F8 F76A                  		lea	($FFFFF76A).w,a4
0001676A 367C 0010                  		movea.w	#$10,a3
0001676E 3C3C 0000                  		move.w	#0,d6
00016772 7A0D                       		moveq	#$D,d5
00016774 6100 FC06                  		bsr.w	FindFloor
00016778 301F                       		move.w	(sp)+,d0
0001677A 143C 0000                  		move.b	#0,d2
0001677E                            
0001677E                            loc_14DD0:
0001677E 1638 F76A                  		move.b	($FFFFF76A).w,d3
00016782 B240                       		cmp.w	d0,d1
00016784 6F00                       		ble.s	loc_14DDE
00016786 1638 F768                  		move.b	($FFFFF768).w,d3
0001678A C141                       		exg	d0,d1
0001678C                            
0001678C                            loc_14DDE:
0001678C 0803 0000                  		btst	#0,d3
00016790 6700                       		beq.s	locret_14DE6
00016792 1602                       		move.b	d2,d3
00016794                            
00016794                            locret_14DE6:
00016794 4E75                       		rts	
00016796                            
00016796                            ; End of function Sonic_HitFloor
00016796                            
00016796                            ; ===========================================================================
00016796 3428 000C                  		move.w	$C(a0),d2
0001679A 3628 0008                  		move.w	8(a0),d3
0001679E                            
0001679E                            loc_14DF0:				; XREF: Sonic_WalkSpeed
0001679E 0642 000A                  		addi.w	#$A,d2
000167A2 49F8 F768                  		lea	($FFFFF768).w,a4
000167A6 367C 0010                  		movea.w	#$10,a3
000167AA 3C3C 0000                  		move.w	#0,d6
000167AE 7A0E                       		moveq	#$E,d5
000167B0 6100 FBCA                  		bsr.w	FindFloor
000167B4 143C 0000                  		move.b	#0,d2
000167B8                            
000167B8                            loc_14E0A:				; XREF: sub_14EB4
000167B8 1638 F768                  		move.b	($FFFFF768).w,d3
000167BC 0803 0000                  		btst	#0,d3
000167C0 6700                       		beq.s	locret_14E16
000167C2 1602                       		move.b	d2,d3
000167C4                            
000167C4                            locret_14E16:
000167C4 4E75                       		rts	
000167C6                            
000167C6                            ; ---------------------------------------------------------------------------
000167C6                            ; Subroutine allowing objects to interact with the floor
000167C6                            ; ---------------------------------------------------------------------------
000167C6                            
000167C6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000167C6                            
000167C6                            
000167C6                            ObjHitFloor:
000167C6 3628 0008                  		move.w	8(a0),d3
000167CA                            
000167CA                            ; End of function ObjHitFloor
000167CA                            
000167CA                            
000167CA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000167CA                            
000167CA                            
000167CA                            ObjHitFloor2:
000167CA 3428 000C                  		move.w	$C(a0),d2
000167CE 7000                       		moveq	#0,d0
000167D0 1028 0016                  		move.b	$16(a0),d0
000167D4 4880                       		ext.w	d0
000167D6 D440                       		add.w	d0,d2
000167D8 49F8 F768                  		lea	($FFFFF768).w,a4
000167DC 18BC 0000                  		move.b	#0,(a4)
000167E0 367C 0010                  		movea.w	#$10,a3
000167E4 3C3C 0000                  		move.w	#0,d6
000167E8 7A0D                       		moveq	#$D,d5
000167EA 6100 FB90                  		bsr.w	FindFloor
000167EE 1638 F768                  		move.b	($FFFFF768).w,d3
000167F2 0803 0000                  		btst	#0,d3
000167F6 6700                       		beq.s	locret_14E4E
000167F8 163C 0000                  		move.b	#0,d3
000167FC                            
000167FC                            locret_14E4E:
000167FC 4E75                       		rts	
000167FE                            ; End of function ObjHitFloor2
000167FE                            
000167FE                            
000167FE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000167FE                            
000167FE                            
000167FE                            sub_14E50:				; XREF: sub_14D48
000167FE 3428 000C                  		move.w	$C(a0),d2
00016802 3628 0008                  		move.w	8(a0),d3
00016806 7000                       		moveq	#0,d0
00016808 1028 0017                  		move.b	$17(a0),d0
0001680C 4880                       		ext.w	d0
0001680E 9440                       		sub.w	d0,d2
00016810 1028 0016                  		move.b	$16(a0),d0
00016814 4880                       		ext.w	d0
00016816 D640                       		add.w	d0,d3
00016818 49F8 F768                  		lea	($FFFFF768).w,a4
0001681C 367C 0010                  		movea.w	#$10,a3
00016820 3C3C 0000                  		move.w	#0,d6
00016824 7A0E                       		moveq	#$E,d5
00016826 6100 FC92                  		bsr.w	FindWall
0001682A 3F01                       		move.w	d1,-(sp)
0001682C 3428 000C                  		move.w	$C(a0),d2
00016830 3628 0008                  		move.w	8(a0),d3
00016834 7000                       		moveq	#0,d0
00016836 1028 0017                  		move.b	$17(a0),d0
0001683A 4880                       		ext.w	d0
0001683C D440                       		add.w	d0,d2
0001683E 1028 0016                  		move.b	$16(a0),d0
00016842 4880                       		ext.w	d0
00016844 D640                       		add.w	d0,d3
00016846 49F8 F76A                  		lea	($FFFFF76A).w,a4
0001684A 367C 0010                  		movea.w	#$10,a3
0001684E 3C3C 0000                  		move.w	#0,d6
00016852 7A0E                       		moveq	#$E,d5
00016854 6100 FC64                  		bsr.w	FindWall
00016858 301F                       		move.w	(sp)+,d0
0001685A 143C 00C0                  		move.b	#-$40,d2
0001685E 6000 FF1E                  		bra.w	loc_14DD0
00016862                            
00016862                            ; End of function sub_14E50
00016862                            
00016862                            
00016862                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016862                            
00016862                            
00016862                            sub_14EB4:				; XREF: Sonic_Floor
00016862 3428 000C                  		move.w	$C(a0),d2
00016866 3628 0008                  		move.w	8(a0),d3
0001686A                            
0001686A                            loc_14EBC:
0001686A 0643 000A                  		addi.w	#$A,d3
0001686E 49F8 F768                  		lea	($FFFFF768).w,a4
00016872 367C 0010                  		movea.w	#$10,a3
00016876 3C3C 0000                  		move.w	#0,d6
0001687A 7A0E                       		moveq	#$E,d5
0001687C 6100 FC3C                  		bsr.w	FindWall
00016880 143C 00C0                  		move.b	#-$40,d2
00016884 6000 FF32                  		bra.w	loc_14E0A
00016888                            
00016888                            ; End of function sub_14EB4
00016888                            
00016888                            ; ---------------------------------------------------------------------------
00016888                            ; Subroutine to	detect when an object hits a wall to its right
00016888                            ; ---------------------------------------------------------------------------
00016888                            
00016888                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016888                            
00016888                            
00016888                            ObjHitWallRight:
00016888 D668 0008                  		add.w	8(a0),d3
0001688C 3428 000C                  		move.w	$C(a0),d2
00016890 49F8 F768                  		lea	($FFFFF768).w,a4
00016894 18BC 0000                  		move.b	#0,(a4)
00016898 367C 0010                  		movea.w	#$10,a3
0001689C 3C3C 0000                  		move.w	#0,d6
000168A0 7A0E                       		moveq	#$E,d5
000168A2 6100 FC16                  		bsr.w	FindWall
000168A6 1638 F768                  		move.b	($FFFFF768).w,d3
000168AA 0803 0000                  		btst	#0,d3
000168AE 6700                       		beq.s	locret_14F06
000168B0 163C 00C0                  		move.b	#-$40,d3
000168B4                            
000168B4                            locret_14F06:
000168B4 4E75                       		rts	
000168B6                            
000168B6                            ; End of function ObjHitWallRight
000168B6                            
000168B6                            ; ---------------------------------------------------------------------------
000168B6                            ; Subroutine preventing	Sonic from running on walls and	ceilings when he
000168B6                            ; touches them
000168B6                            ; ---------------------------------------------------------------------------
000168B6                            
000168B6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000168B6                            
000168B6                            
000168B6                            Sonic_DontRunOnWalls:			; XREF: Sonic_Floor; et al
000168B6 3428 000C                  		move.w	$C(a0),d2
000168BA 3628 0008                  		move.w	8(a0),d3
000168BE 7000                       		moveq	#0,d0
000168C0 1028 0016                  		move.b	$16(a0),d0
000168C4 4880                       		ext.w	d0
000168C6 9440                       		sub.w	d0,d2
000168C8 0A42 000F                  		eori.w	#$F,d2
000168CC 1028 0017                  		move.b	$17(a0),d0
000168D0 4880                       		ext.w	d0
000168D2 D640                       		add.w	d0,d3
000168D4 49F8 F768                  		lea	($FFFFF768).w,a4
000168D8 367C FFF0                  		movea.w	#-$10,a3
000168DC 3C3C 1000                  		move.w	#$1000,d6
000168E0 7A0E                       		moveq	#$E,d5
000168E2 6100 FA98                  		bsr.w	FindFloor
000168E6 3F01                       		move.w	d1,-(sp)
000168E8 3428 000C                  		move.w	$C(a0),d2
000168EC 3628 0008                  		move.w	8(a0),d3
000168F0 7000                       		moveq	#0,d0
000168F2 1028 0016                  		move.b	$16(a0),d0
000168F6 4880                       		ext.w	d0
000168F8 9440                       		sub.w	d0,d2
000168FA 0A42 000F                  		eori.w	#$F,d2
000168FE 1028 0017                  		move.b	$17(a0),d0
00016902 4880                       		ext.w	d0
00016904 9640                       		sub.w	d0,d3
00016906 49F8 F76A                  		lea	($FFFFF76A).w,a4
0001690A 367C FFF0                  		movea.w	#-$10,a3
0001690E 3C3C 1000                  		move.w	#$1000,d6
00016912 7A0E                       		moveq	#$E,d5
00016914 6100 FA66                  		bsr.w	FindFloor
00016918 301F                       		move.w	(sp)+,d0
0001691A 143C 0080                  		move.b	#-$80,d2
0001691E 6000 FE5E                  		bra.w	loc_14DD0
00016922                            ; End of function Sonic_DontRunOnWalls
00016922                            
00016922                            ; ===========================================================================
00016922 3428 000C                  		move.w	$C(a0),d2
00016926 3628 0008                  		move.w	8(a0),d3
0001692A                            
0001692A                            loc_14F7C:
0001692A 0442 000A                  		subi.w	#$A,d2
0001692E 0A42 000F                  		eori.w	#$F,d2
00016932 49F8 F768                  		lea	($FFFFF768).w,a4
00016936 367C FFF0                  		movea.w	#-$10,a3
0001693A 3C3C 1000                  		move.w	#$1000,d6
0001693E 7A0E                       		moveq	#$E,d5
00016940 6100 FA3A                  		bsr.w	FindFloor
00016944 143C 0080                  		move.b	#-$80,d2
00016948 6000 FE6E                  		bra.w	loc_14E0A
0001694C                            
0001694C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001694C                            
0001694C                            
0001694C                            ObjHitCeiling:
0001694C 3428 000C                  		move.w	$C(a0),d2
00016950 3628 0008                  		move.w	8(a0),d3
00016954 7000                       		moveq	#0,d0
00016956 1028 0016                  		move.b	$16(a0),d0
0001695A 4880                       		ext.w	d0
0001695C 9440                       		sub.w	d0,d2
0001695E 0A42 000F                  		eori.w	#$F,d2
00016962 49F8 F768                  		lea	($FFFFF768).w,a4
00016966 367C FFF0                  		movea.w	#-$10,a3
0001696A 3C3C 1000                  		move.w	#$1000,d6
0001696E 7A0E                       		moveq	#$E,d5
00016970 6100 FA0A                  		bsr.w	FindFloor
00016974 1638 F768                  		move.b	($FFFFF768).w,d3
00016978 0803 0000                  		btst	#0,d3
0001697C 6700                       		beq.s	locret_14FD4
0001697E 163C 0080                  		move.b	#-$80,d3
00016982                            
00016982                            locret_14FD4:
00016982 4E75                       		rts	
00016984                            ; End of function ObjHitCeiling
00016984                            
00016984                            ; ===========================================================================
00016984                            
00016984                            loc_14FD6:				; XREF: sub_14D48
00016984 3428 000C                  		move.w	$C(a0),d2
00016988 3628 0008                  		move.w	8(a0),d3
0001698C 7000                       		moveq	#0,d0
0001698E 1028 0017                  		move.b	$17(a0),d0
00016992 4880                       		ext.w	d0
00016994 9440                       		sub.w	d0,d2
00016996 1028 0016                  		move.b	$16(a0),d0
0001699A 4880                       		ext.w	d0
0001699C 9640                       		sub.w	d0,d3
0001699E 0A43 000F                  		eori.w	#$F,d3
000169A2 49F8 F768                  		lea	($FFFFF768).w,a4
000169A6 367C FFF0                  		movea.w	#-$10,a3
000169AA 3C3C 0800                  		move.w	#$800,d6
000169AE 7A0E                       		moveq	#$E,d5
000169B0 6100 FB08                  		bsr.w	FindWall
000169B4 3F01                       		move.w	d1,-(sp)
000169B6 3428 000C                  		move.w	$C(a0),d2
000169BA 3628 0008                  		move.w	8(a0),d3
000169BE 7000                       		moveq	#0,d0
000169C0 1028 0017                  		move.b	$17(a0),d0
000169C4 4880                       		ext.w	d0
000169C6 D440                       		add.w	d0,d2
000169C8 1028 0016                  		move.b	$16(a0),d0
000169CC 4880                       		ext.w	d0
000169CE 9640                       		sub.w	d0,d3
000169D0 0A43 000F                  		eori.w	#$F,d3
000169D4 49F8 F76A                  		lea	($FFFFF76A).w,a4
000169D8 367C FFF0                  		movea.w	#-$10,a3
000169DC 3C3C 0800                  		move.w	#$800,d6
000169E0 7A0E                       		moveq	#$E,d5
000169E2 6100 FAD6                  		bsr.w	FindWall
000169E6 301F                       		move.w	(sp)+,d0
000169E8 143C 0040                  		move.b	#$40,d2
000169EC 6000 FD90                  		bra.w	loc_14DD0
000169F0                            
000169F0                            ; ---------------------------------------------------------------------------
000169F0                            ; Subroutine to	stop Sonic when	he jumps at a wall
000169F0                            ; ---------------------------------------------------------------------------
000169F0                            
000169F0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000169F0                            
000169F0                            
000169F0                            Sonic_HitWall:				; XREF: Sonic_Floor
000169F0 3428 000C                  		move.w	$C(a0),d2
000169F4 3628 0008                  		move.w	8(a0),d3
000169F8                            
000169F8                            loc_1504A:
000169F8 0443 000A                  		subi.w	#$A,d3
000169FC 0A43 000F                  		eori.w	#$F,d3
00016A00 49F8 F768                  		lea	($FFFFF768).w,a4
00016A04 367C FFF0                  		movea.w	#-$10,a3
00016A08 3C3C 0800                  		move.w	#$800,d6
00016A0C 7A0E                       		moveq	#$E,d5
00016A0E 6100 FAAA                  		bsr.w	FindWall
00016A12 143C 0040                  		move.b	#$40,d2
00016A16 6000 FDA0                  		bra.w	loc_14E0A
00016A1A                            ; End of function Sonic_HitWall
00016A1A                            
00016A1A                            ; ---------------------------------------------------------------------------
00016A1A                            ; Subroutine to	detect when an object hits a wall to its left
00016A1A                            ; ---------------------------------------------------------------------------
00016A1A                            
00016A1A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016A1A                            
00016A1A                            
00016A1A                            ObjHitWallLeft:
00016A1A D668 0008                  		add.w	8(a0),d3
00016A1E 3428 000C                  		move.w	$C(a0),d2
00016A22 49F8 F768                  		lea	($FFFFF768).w,a4
00016A26 18BC 0000                  		move.b	#0,(a4)
00016A2A 367C FFF0                  		movea.w	#-$10,a3
00016A2E 3C3C 0800                  		move.w	#$800,d6
00016A32 7A0E                       		moveq	#$E,d5
00016A34 6100 FA84                  		bsr.w	FindWall
00016A38 1638 F768                  		move.b	($FFFFF768).w,d3
00016A3C 0803 0000                  		btst	#0,d3
00016A40 6700                       		beq.s	locret_15098
00016A42 163C 0040                  		move.b	#$40,d3
00016A46                            
00016A46                            locret_15098:
00016A46 4E75                       		rts	
00016A48                            ; End of function ObjHitWallLeft
00016A48                            
00016A48                            ; ===========================================================================
00016A48                            ; ---------------------------------------------------------------------------
00016A48                            ; Object 66 - rotating disc that grabs Sonic (SBZ)
00016A48                            ; ---------------------------------------------------------------------------
00016A48                            
00016A48                            Obj66:					; XREF: Obj_Index
00016A48 7000                       		moveq	#0,d0
00016A4A 1028 0024                  		move.b	$24(a0),d0
00016A4E 323B 0000                  		move.w	Obj66_Index(pc,d0.w),d1
00016A52 4EFB 1000                  		jmp	Obj66_Index(pc,d1.w)
00016A56                            ; ===========================================================================
00016A56 0000                       Obj66_Index:	dc.w Obj66_Main-Obj66_Index
00016A58 0000                       		dc.w Obj66_Action-Obj66_Index
00016A5A 0000                       		dc.w Obj66_Display-Obj66_Index
00016A5C 0000                       		dc.w Obj66_Release-Obj66_Index
00016A5E                            ; ===========================================================================
00016A5E                            
00016A5E                            Obj66_Main:				; XREF: Obj66_Index
00016A5E 5428 0024                  		addq.b	#2,$24(a0)
00016A62 323C 0001                  		move.w	#1,d1
00016A66 2248                       		movea.l	a0,a1
00016A68 6000                       		bra.s	Obj66_MakeItem
00016A6A                            ; ===========================================================================
00016A6A                            
00016A6A                            jmp_SingleObjLoad:
00016A6A 4EF9 0000 E57A             	jmp SingleObjLoad
00016A70                            
00016A70                            Obj66_Loop:
00016A70 6100 FFF8                  		bsr.w	jmp_SingleObjLoad
00016A74 6600                       		bne.s	loc_150FE
00016A76 12BC 0066                  		move.b	#$66,0(a1)
00016A7A 5829 0024                  		addq.b	#4,$24(a1)
00016A7E 3368 0008 0008             		move.w	8(a0),8(a1)
00016A84 3368 000C 000C             		move.w	$C(a0),$C(a1)
00016A8A 137C 0003 0018             		move.b	#3,$18(a1)
00016A90 137C 0010 001A             		move.b	#$10,$1A(a1)
00016A96                            
00016A96                            Obj66_MakeItem:				; XREF: Obj66_Main
00016A96 237C 0000 0000 0004        		move.l	#Map_obj66,4(a1)
00016A9E 337C 4348 0002             		move.w	#$4348,2(a1)
00016AA4 0029 0004 0001             		ori.b	#4,1(a1)
00016AAA 137C 0038 0019             		move.b	#$38,$19(a1)
00016AB0                            
00016AB0                            loc_150FE:
00016AB0 51C9 FFBE                  		dbf	d1,Obj66_Loop
00016AB4                            
00016AB4 117C 0030 0019             		move.b	#$30,$19(a0)
00016ABA 117C 0004 0018             		move.b	#4,$18(a0)
00016AC0 317C 003C 0030             		move.w	#$3C,$30(a0)
00016AC6 117C 0001 0034             		move.b	#1,$34(a0)
00016ACC 1168 0028 0038             		move.b	$28(a0),$38(a0)
00016AD2                            
00016AD2                            Obj66_Action:				; XREF: Obj66_Index
00016AD2 6100 0000                  		bsr.w	Obj66_ChkSwitch
00016AD6 4A28 0001                  		tst.b	1(a0)
00016ADA 6A00 0000                  		bpl.w	Obj66_Display
00016ADE 323C 0030                  		move.w	#$30,d1
00016AE2 3401                       		move.w	d1,d2
00016AE4 3602                       		move.w	d2,d3
00016AE6 5243                       		addq.w	#1,d3
00016AE8 3828 0008                  		move.w	8(a0),d4
00016AEC 6100 99E0                  		bsr.w	SolidObject
00016AF0 0828 0005 0022             		btst	#5,$22(a0)
00016AF6 6700 0000                  		beq.w	Obj66_Display
00016AFA 43F8 D000                  		lea	($FFFFD000).w,a1
00016AFE 720E                       		moveq	#$E,d1
00016B00 3029 0008                  		move.w	8(a1),d0
00016B04 B068 0008                  		cmp.w	8(a0),d0
00016B08 6500                       		bcs.s	Obj66_GrabSonic
00016B0A 7207                       		moveq	#7,d1
00016B0C                            
00016B0C                            Obj66_GrabSonic:
00016B0C B228 001A                  		cmp.b	$1A(a0),d1
00016B10 6600                       		bne.s	Obj66_Display
00016B12 1141 0032                  		move.b	d1,$32(a0)
00016B16 5828 0024                  		addq.b	#4,$24(a0)
00016B1A 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; lock	controls
00016B20 137C 0002 001C             		move.b	#2,$1C(a1)	; make Sonic use "rolling" animation
00016B26 337C 0800 0014             		move.w	#$800,$14(a1)
00016B2C 337C 0000 0010             		move.w	#0,$10(a1)
00016B32 337C 0000 0012             		move.w	#0,$12(a1)
00016B38 08A8 0005 0022             		bclr	#5,$22(a0)
00016B3E 08A9 0005 0022             		bclr	#5,$22(a1)
00016B44 08E9 0001 0022             		bset	#1,$22(a1)
00016B4A 3429 0008                  		move.w	8(a1),d2
00016B4E 3629 000C                  		move.w	$C(a1),d3
00016B52 6100 0000                  		bsr.w	Obj66_ChgPos
00016B56 D569 0008                  		add.w	d2,8(a1)
00016B5A D769 000C                  		add.w	d3,$C(a1)
00016B5E E0E9 0008                  		asr	8(a1)
00016B62 E0E9 000C                  		asr	$C(a1)
00016B66                            
00016B66                            Obj66_Display:				; XREF: Obj66_Index
00016B66 6000 963E                  		bra.w	MarkObjGone
00016B6A                            ; ===========================================================================
00016B6A                            
00016B6A                            Obj66_Release:				; XREF: Obj66_Index
00016B6A 1028 001A                  		move.b	$1A(a0),d0
00016B6E 0C00 0004                  		cmpi.b	#4,d0
00016B72 6700                       		beq.s	loc_151C8
00016B74 0C00 0007                  		cmpi.b	#7,d0
00016B78 6600                       		bne.s	loc_151F8
00016B7A                            
00016B7A                            loc_151C8:
00016B7A B028 0032                  		cmp.b	$32(a0),d0
00016B7E 6700                       		beq.s	loc_151F8
00016B80 43F8 D000                  		lea	($FFFFD000).w,a1
00016B84 337C 0000 0010             		move.w	#0,$10(a1)
00016B8A 337C 0800 0012             		move.w	#$800,$12(a1)
00016B90 0C00 0004                  		cmpi.b	#4,d0
00016B94 6700                       		beq.s	loc_151F0
00016B96 337C 0800 0010             		move.w	#$800,$10(a1)
00016B9C 337C 0800 0012             		move.w	#$800,$12(a1)
00016BA2                            
00016BA2                            loc_151F0:
00016BA2 4238 F7C8                  		clr.b	($FFFFF7C8).w	; unlock controls
00016BA6 5928 0024                  		subq.b	#4,$24(a0)
00016BAA                            
00016BAA                            loc_151F8:
00016BAA 6100                       		bsr.s	Obj66_ChkSwitch
00016BAC 6100                       		bsr.s	Obj66_ChgPos
00016BAE 6000 95F6                  		bra.w	MarkObjGone
00016BB2                            
00016BB2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016BB2                            
00016BB2                            
00016BB2                            Obj66_ChkSwitch:			; XREF: Obj66_Action
00016BB2 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00016BB6 7000                       		moveq	#0,d0
00016BB8 1028 0038                  		move.b	$38(a0),d0
00016BBC 0832 0000 0000             		btst	#0,(a2,d0.w)	; is switch pressed?
00016BC2 6700                       		beq.s	loc_15224	; if not, branch
00016BC4 4A28 0036                  		tst.b	$36(a0)		; has switch previously	been pressed?
00016BC8 6600                       		bne.s	Obj66_Animate	; if yes, branch
00016BCA 4428 0034                  		neg.b	$34(a0)
00016BCE 117C 0001 0036             		move.b	#1,$36(a0)	; set to "previously pressed"
00016BD4 6000                       		bra.s	Obj66_Animate
00016BD6                            ; ===========================================================================
00016BD6                            
00016BD6                            loc_15224:
00016BD6 4228 0036                  		clr.b	$36(a0)		; set to "not yet pressed"
00016BDA                            
00016BDA                            Obj66_Animate:
00016BDA 5328 001E                  		subq.b	#1,$1E(a0)
00016BDE 6A00                       		bpl.s	locret_15246
00016BE0 117C 0007 001E             		move.b	#7,$1E(a0)
00016BE6 1228 0034                  		move.b	$34(a0),d1
00016BEA 1028 001A                  		move.b	$1A(a0),d0
00016BEE D001                       		add.b	d1,d0
00016BF0 0200 000F                  		andi.b	#$F,d0
00016BF4 1140 001A                  		move.b	d0,$1A(a0)
00016BF8                            
00016BF8                            locret_15246:
00016BF8 4E75                       		rts	
00016BFA                            ; End of function Obj66_ChkSwitch
00016BFA                            
00016BFA                            
00016BFA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016BFA                            
00016BFA                            
00016BFA                            Obj66_ChgPos:				; XREF: Obj66_GrabSonic
00016BFA 43F8 D000                  		lea	($FFFFD000).w,a1
00016BFE 7000                       		moveq	#0,d0
00016C00 1028 001A                  		move.b	$1A(a0),d0
00016C04 D040                       		add.w	d0,d0
00016C06 45FB 0000                  		lea	Obj66_PosData(pc,d0.w),a2
00016C0A 101A                       		move.b	(a2)+,d0
00016C0C 4880                       		ext.w	d0
00016C0E D068 0008                  		add.w	8(a0),d0
00016C12 3340 0008                  		move.w	d0,8(a1)
00016C16 101A                       		move.b	(a2)+,d0
00016C18 4880                       		ext.w	d0
00016C1A D068 000C                  		add.w	$C(a0),d0
00016C1E 3340 000C                  		move.w	d0,$C(a1)
00016C22 4E75                       		rts	
00016C24                            ; End of function Obj66_ChgPos
00016C24                            
00016C24                            ; ===========================================================================
00016C24 E000 E20E                  Obj66_PosData:	dc.b  $E0,   0,	$E2,  $E ; disc	x-pos, Sonic x-pos, disc y-pos,	Sonic y-pos
00016C28 E818 F21E                  		dc.b  $E8, $18,	$F2, $1E
00016C2C 0020 0E1E                  		dc.b	0, $20,	 $E, $1E
00016C30 1818 1E0E                  		dc.b  $18, $18,	$1E,  $E
00016C34 2000 1EF2                  		dc.b  $20,   0,	$1E, $F2
00016C38 18E8 0EE2                  		dc.b  $18, $E8,	 $E, $E2
00016C3C 00E0 F2E2                  		dc.b	0, $E0,	$F2, $E2
00016C40 E8E8 E2F2                  		dc.b  $E8, $E8,	$E2, $F2
00016C44                            ; ---------------------------------------------------------------------------
00016C44                            ; Sprite mappings - rotating disc that grabs Sonic (SBZ)
00016C44                            ; ---------------------------------------------------------------------------
00016C44                            Map_obj66:
00016C44                            	include "_maps\obj66.asm"
00016C44                            ; ---------------------------------------------------------------------------
00016C44                            ; Sprite mappings - rotating disc that grabs Sonic (SBZ)
00016C44                            ; ---------------------------------------------------------------------------
00016C44 0000 0000                  		dc.w byte_152B4-Map_obj66, byte_152D3-Map_obj66
00016C48 0000 0000                  		dc.w byte_152F2-Map_obj66, byte_15311-Map_obj66
00016C4C 0000 0000                  		dc.w byte_15330-Map_obj66, byte_1534F-Map_obj66
00016C50 0000 0000                  		dc.w byte_1536E-Map_obj66, byte_1538D-Map_obj66
00016C54 0000 0000                  		dc.w byte_153AC-Map_obj66, byte_153CB-Map_obj66
00016C58 0000 0000                  		dc.w byte_153EA-Map_obj66, byte_15409-Map_obj66
00016C5C 0000 0000                  		dc.w byte_15428-Map_obj66, byte_15447-Map_obj66
00016C60 0000 0000                  		dc.w byte_15466-Map_obj66, byte_15485-Map_obj66
00016C64 0000                       		dc.w byte_154A4-Map_obj66
00016C66 06                         byte_152B4:	dc.b 6
00016C67 E805 0022 D0               		dc.b $E8, 5, 0,	$22, $D0
00016C6C 0805 1022 D0               		dc.b 8,	5, $10,	$22, $D0
00016C71 E80A 0000 C8               		dc.b $E8, $A, 0, 0, $C8
00016C76 E80A 0800 E0               		dc.b $E8, $A, 8, 0, $E0
00016C7B 000A 1000 C8               		dc.b 0,	$A, $10, 0, $C8
00016C80 000A 1800 E0               		dc.b 0,	$A, $18, 0, $E0
00016C85 06                         byte_152D3:	dc.b 6
00016C86 F803 0026 D0               		dc.b $F8, 3, 0,	$26, $D0
00016C8B 1805 002A D8               		dc.b $18, 5, 0,	$2A, $D8
00016C90 F60A 0000 CA               		dc.b $F6, $A, 0, 0, $CA
00016C95 F60A 0800 E2               		dc.b $F6, $A, 8, 0, $E2
00016C9A 0E0A 1000 CA               		dc.b $E, $A, $10, 0, $CA
00016C9F 0E0A 1800 E2               		dc.b $E, $A, $18, 0, $E2
00016CA4 06                         byte_152F2:	dc.b 6
00016CA5 0006 002E D0               		dc.b 0,	6, 0, $2E, $D0
00016CAA 2009 0034 E8               		dc.b $20, 9, 0,	$34, $E8
00016CAF 000A 0000 D0               		dc.b 0,	$A, 0, 0, $D0
00016CB4 000A 0800 E8               		dc.b 0,	$A, 8, 0, $E8
00016CB9 180A 1000 D0               		dc.b $18, $A, $10, 0, $D0
00016CBE 180A 1800 E8               		dc.b $18, $A, $18, 0, $E8
00016CC3 06                         byte_15311:	dc.b 6
00016CC4 0807 003A D8               		dc.b 8,	7, 0, $3A, $D8
00016CC9 2808 0042 F0               		dc.b $28, 8, 0,	$42, $F0
00016CCE 060A 0000 DA               		dc.b 6,	$A, 0, 0, $DA
00016CD3 060A 0800 F2               		dc.b 6,	$A, 8, 0, $F2
00016CD8 1E0A 1000 DA               		dc.b $1E, $A, $10, 0, $DA
00016CDD 1E0A 1800 F2               		dc.b $1E, $A, $18, 0, $F2
00016CE2 06                         byte_15330:	dc.b 6
00016CE3 2005 0045 E8               		dc.b $20, 5, 0,	$45, $E8
00016CE8 2005 0845 08               		dc.b $20, 5, 8,	$45, 8
00016CED 080A 0000 E8               		dc.b 8,	$A, 0, 0, $E8
00016CF2 080A 0800 00               		dc.b 8,	$A, 8, 0, 0
00016CF7 200A 1000 E8               		dc.b $20, $A, $10, 0, $E8
00016CFC 200A 1800 00               		dc.b $20, $A, $18, 0, 0
00016D01 06                         byte_1534F:	dc.b 6
00016D02 2808 0842 F8               		dc.b $28, 8, 8,	$42, $F8
00016D07 0807 083A 18               		dc.b 8,	7, 8, $3A, $18
00016D0C 060A 0000 F6               		dc.b 6,	$A, 0, 0, $F6
00016D11 060A 0800 0E               		dc.b 6,	$A, 8, 0, $E
00016D16 1E0A 1000 F6               		dc.b $1E, $A, $10, 0, $F6
00016D1B 1E0A 1800 0E               		dc.b $1E, $A, $18, 0, $E
00016D20 06                         byte_1536E:	dc.b 6
00016D21 2009 0834 00               		dc.b $20, 9, 8,	$34, 0
00016D26 0006 082E 20               		dc.b 0,	6, 8, $2E, $20
00016D2B 000A 0000 00               		dc.b 0,	$A, 0, 0, 0
00016D30 000A 0800 18               		dc.b 0,	$A, 8, 0, $18
00016D35 180A 1000 00               		dc.b $18, $A, $10, 0, 0
00016D3A 180A 1800 18               		dc.b $18, $A, $18, 0, $18
00016D3F 06                         byte_1538D:	dc.b 6
00016D40 1805 082A 18               		dc.b $18, 5, 8,	$2A, $18
00016D45 F803 0826 28               		dc.b $F8, 3, 8,	$26, $28
00016D4A F60A 0000 06               		dc.b $F6, $A, 0, 0, 6
00016D4F F60A 0800 1E               		dc.b $F6, $A, 8, 0, $1E
00016D54 0E0A 1000 06               		dc.b $E, $A, $10, 0, 6
00016D59 0E0A 1800 1E               		dc.b $E, $A, $18, 0, $1E
00016D5E 06                         byte_153AC:	dc.b 6
00016D5F E805 0822 20               		dc.b $E8, 5, 8,	$22, $20
00016D64 0805 1822 20               		dc.b 8,	5, $18,	$22, $20
00016D69 E80A 0000 08               		dc.b $E8, $A, 0, 0, 8
00016D6E E80A 0800 20               		dc.b $E8, $A, 8, 0, $20
00016D73 000A 1000 08               		dc.b 0,	$A, $10, 0, 8
00016D78 000A 1800 20               		dc.b 0,	$A, $18, 0, $20
00016D7D 06                         byte_153CB:	dc.b 6
00016D7E D805 182A 18               		dc.b $D8, 5, $18, $2A, $18
00016D83 E803 1826 28               		dc.b $E8, 3, $18, $26, $28
00016D88 DA0A 0000 06               		dc.b $DA, $A, 0, 0, 6
00016D8D DA0A 0800 1E               		dc.b $DA, $A, 8, 0, $1E
00016D92 F20A 1000 06               		dc.b $F2, $A, $10, 0, 6
00016D97 F20A 1800 1E               		dc.b $F2, $A, $18, 0, $1E
00016D9C 06                         byte_153EA:	dc.b 6
00016D9D D009 1834 00               		dc.b $D0, 9, $18, $34, 0
00016DA2 E806 182E 20               		dc.b $E8, 6, $18, $2E, $20
00016DA7 D00A 0000 00               		dc.b $D0, $A, 0, 0, 0
00016DAC D00A 0800 18               		dc.b $D0, $A, 8, 0, $18
00016DB1 E80A 1000 00               		dc.b $E8, $A, $10, 0, 0
00016DB6 E80A 1800 18               		dc.b $E8, $A, $18, 0, $18
00016DBB 06                         byte_15409:	dc.b 6
00016DBC D008 1842 F8               		dc.b $D0, 8, $18, $42, $F8
00016DC1 D807 183A 18               		dc.b $D8, 7, $18, $3A, $18
00016DC6 CA0A 0000 F6               		dc.b $CA, $A, 0, 0, $F6
00016DCB CA0A 0800 0E               		dc.b $CA, $A, 8, 0, $E
00016DD0 E20A 1000 F6               		dc.b $E2, $A, $10, 0, $F6
00016DD5 E20A 1800 0E               		dc.b $E2, $A, $18, 0, $E
00016DDA 06                         byte_15428:	dc.b 6
00016DDB D005 1045 E8               		dc.b $D0, 5, $10, $45, $E8
00016DE0 D005 1845 08               		dc.b $D0, 5, $18, $45, 8
00016DE5 C80A 0000 E8               		dc.b $C8, $A, 0, 0, $E8
00016DEA C80A 0800 00               		dc.b $C8, $A, 8, 0, 0
00016DEF E00A 1000 E8               		dc.b $E0, $A, $10, 0, $E8
00016DF4 E00A 1800 00               		dc.b $E0, $A, $18, 0, 0
00016DF9 06                         byte_15447:	dc.b 6
00016DFA D807 103A D8               		dc.b $D8, 7, $10, $3A, $D8
00016DFF D008 1042 F0               		dc.b $D0, 8, $10, $42, $F0
00016E04 CA0A 0000 DA               		dc.b $CA, $A, 0, 0, $DA
00016E09 CA0A 0800 F2               		dc.b $CA, $A, 8, 0, $F2
00016E0E E20A 1000 DA               		dc.b $E2, $A, $10, 0, $DA
00016E13 E20A 1800 F2               		dc.b $E2, $A, $18, 0, $F2
00016E18 06                         byte_15466:	dc.b 6
00016E19 E806 102E D0               		dc.b $E8, 6, $10, $2E, $D0
00016E1E D009 1034 E8               		dc.b $D0, 9, $10, $34, $E8
00016E23 D00A 0000 D0               		dc.b $D0, $A, 0, 0, $D0
00016E28 D00A 0800 E8               		dc.b $D0, $A, 8, 0, $E8
00016E2D E80A 1000 D0               		dc.b $E8, $A, $10, 0, $D0
00016E32 E80A 1800 E8               		dc.b $E8, $A, $18, 0, $E8
00016E37 06                         byte_15485:	dc.b 6
00016E38 E803 1026 D0               		dc.b $E8, 3, $10, $26, $D0
00016E3D D805 102A D8               		dc.b $D8, 5, $10, $2A, $D8
00016E42 DA0A 0000 CA               		dc.b $DA, $A, 0, 0, $CA
00016E47 DA0A 0800 E2               		dc.b $DA, $A, 8, 0, $E2
00016E4C F20A 1000 CA               		dc.b $F2, $A, $10, 0, $CA
00016E51 F20A 1800 E2               		dc.b $F2, $A, $18, 0, $E2
00016E56 0C                         byte_154A4:	dc.b $C
00016E57 C80D 0009 E0               		dc.b $C8, $D, 0, 9, $E0
00016E5C D00A 0011 D0               		dc.b $D0, $A, 0, $11, $D0
00016E61 E007 001A C8               		dc.b $E0, 7, 0,	$1A, $C8
00016E66 C80D 0809 00               		dc.b $C8, $D, 8, 9, 0
00016E6B D00A 0811 18               		dc.b $D0, $A, 8, $11, $18
00016E70 E007 081A 28               		dc.b $E0, 7, 8,	$1A, $28
00016E75 0007 101A C8               		dc.b 0,	7, $10,	$1A, $C8
00016E7A 180A 1011 D0               		dc.b $18, $A, $10, $11,	$D0
00016E7F 280D 1009 E0               		dc.b $28, $D, $10, 9, $E0
00016E84 280D 1809 00               		dc.b $28, $D, $18, 9, 0
00016E89 180A 1811 18               		dc.b $18, $A, $18, $11,	$18
00016E8E 0007 181A 28               		dc.b 0,	7, $18,	$1A, $28
00016E94 00                         		even
00016E94 00                         		even
00016E94                            
00016E94                            ; ===========================================================================
00016E94                            ; ---------------------------------------------------------------------------
00016E94                            ; Object 67 - disc that	you run	around (SBZ)
00016E94                            ; ---------------------------------------------------------------------------
00016E94                            
00016E94                            Obj67:					; XREF: Obj_Index
00016E94 7000                       		moveq	#0,d0
00016E96 1028 0024                  		move.b	$24(a0),d0
00016E9A 323B 0000                  		move.w	Obj67_Index(pc,d0.w),d1
00016E9E 4EFB 1000                  		jmp	Obj67_Index(pc,d1.w)
00016EA2                            ; ===========================================================================
00016EA2 0000                       Obj67_Index:	dc.w Obj67_Main-Obj67_Index
00016EA4 0000                       		dc.w Obj67_Action-Obj67_Index
00016EA6                            ; ===========================================================================
00016EA6                            
00016EA6                            Obj67_Main:				; XREF: Obj67_Index
00016EA6 5428 0024                  		addq.b	#2,$24(a0)
00016EAA 217C 0000 0000 0004        		move.l	#Map_obj67,4(a0)
00016EB2 317C C344 0002             		move.w	#$C344,2(a0)
00016EB8 117C 0004 0001             		move.b	#4,1(a0)
00016EBE 117C 0004 0018             		move.b	#4,$18(a0)
00016EC4 117C 0008 0019             		move.b	#8,$19(a0)
00016ECA 3168 0008 0032             		move.w	8(a0),$32(a0)
00016ED0 3168 000C 0030             		move.w	$C(a0),$30(a0)
00016ED6 117C 0018 0034             		move.b	#$18,$34(a0)
00016EDC 117C 0048 0038             		move.b	#$48,$38(a0)
00016EE2 1228 0028                  		move.b	$28(a0),d1	; get object type
00016EE6 0201 000F                  		andi.b	#$F,d1		; read only the	2nd digit
00016EEA 6700                       		beq.s	loc_15546
00016EEC 117C 0010 0034             		move.b	#$10,$34(a0)
00016EF2 117C 0038 0038             		move.b	#$38,$38(a0)
00016EF8                            
00016EF8                            loc_15546:
00016EF8 1228 0028                  		move.b	$28(a0),d1	; get object type
00016EFC 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00016F00 4881                       		ext.w	d1
00016F02 E741                       		asl.w	#3,d1
00016F04 3141 0036                  		move.w	d1,$36(a0)
00016F08 1028 0022                  		move.b	$22(a0),d0
00016F0C E418                       		ror.b	#2,d0
00016F0E 0200 00C0                  		andi.b	#-$40,d0
00016F12 1140 0026                  		move.b	d0,$26(a0)
00016F16                            
00016F16                            Obj67_Action:				; XREF: Obj67_Index
00016F16 6100 0000                  		bsr.w	Obj67_MoveSonic
00016F1A 6100 0000                  		bsr.w	Obj67_MoveSpot
00016F1E 6000 0000                  		bra.w	Obj67_ChkDel
00016F22                            ; ===========================================================================
00016F22                            
00016F22                            Obj67_MoveSonic:			; XREF: Obj67_Action
00016F22 7400                       		moveq	#0,d2
00016F24 1428 0038                  		move.b	$38(a0),d2
00016F28 3602                       		move.w	d2,d3
00016F2A D643                       		add.w	d3,d3
00016F2C 43F8 D000                  		lea	($FFFFD000).w,a1
00016F30 3029 0008                  		move.w	8(a1),d0
00016F34 9068 0032                  		sub.w	$32(a0),d0
00016F38 D042                       		add.w	d2,d0
00016F3A B043                       		cmp.w	d3,d0
00016F3C 6400                       		bcc.s	loc_155A8
00016F3E 3229 000C                  		move.w	$C(a1),d1
00016F42 9268 0030                  		sub.w	$30(a0),d1
00016F46 D242                       		add.w	d2,d1
00016F48 B243                       		cmp.w	d3,d1
00016F4A 6400                       		bcc.s	loc_155A8
00016F4C 0829 0001 0022             		btst	#1,$22(a1)
00016F52 6700                       		beq.s	loc_155B8
00016F54 4228 003A                  		clr.b	$3A(a0)
00016F58 4E75                       		rts	
00016F5A                            ; ===========================================================================
00016F5A                            
00016F5A                            loc_155A8:
00016F5A 4A28 003A                  		tst.b	$3A(a0)
00016F5E 6700                       		beq.s	locret_155B6
00016F60 4229 0038                  		clr.b	$38(a1)
00016F64 4228 003A                  		clr.b	$3A(a0)
00016F68                            
00016F68                            locret_155B6:
00016F68 4E75                       		rts	
00016F6A                            ; ===========================================================================
00016F6A                            
00016F6A                            loc_155B8:
00016F6A 4A28 003A                  		tst.b	$3A(a0)
00016F6E 6600                       		bne.s	loc_155E2
00016F70 117C 0001 003A             		move.b	#1,$3A(a0)
00016F76 0829 0002 0022             		btst	#2,$22(a1)
00016F7C 6600                       		bne.s	loc_155D0
00016F7E 4229 001C                  		clr.b	$1C(a1)
00016F82                            
00016F82                            loc_155D0:
00016F82 08A9 0005 0022             		bclr	#5,$22(a1)
00016F88 137C 0001 001D             		move.b	#1,$1D(a1)
00016F8E 137C 0001 0038             		move.b	#1,$38(a1)
00016F94                            
00016F94                            loc_155E2:
00016F94 3029 0014                  		move.w	$14(a1),d0
00016F98 4A68 0036                  		tst.w	$36(a0)
00016F9C 6A00                       		bpl.s	loc_15608
00016F9E 0C40 FC00                  		cmpi.w	#-$400,d0
00016FA2 6F00                       		ble.s	loc_155FA
00016FA4 337C FC00 0014             		move.w	#-$400,$14(a1)
00016FAA 4E75                       		rts	
00016FAC                            ; ===========================================================================
00016FAC                            
00016FAC                            loc_155FA:
00016FAC 0C40 F100                  		cmpi.w	#-$F00,d0
00016FB0 6C00                       		bge.s	locret_15606
00016FB2 337C F100 0014             		move.w	#-$F00,$14(a1)
00016FB8                            
00016FB8                            locret_15606:
00016FB8 4E75                       		rts	
00016FBA                            ; ===========================================================================
00016FBA                            
00016FBA                            loc_15608:
00016FBA 0C40 0400                  		cmpi.w	#$400,d0
00016FBE 6C00                       		bge.s	loc_15616
00016FC0 337C 0400 0014             		move.w	#$400,$14(a1)
00016FC6 4E75                       		rts	
00016FC8                            ; ===========================================================================
00016FC8                            
00016FC8                            loc_15616:
00016FC8 0C40 0F00                  		cmpi.w	#$F00,d0
00016FCC 6F00                       		ble.s	locret_15622
00016FCE 337C 0F00 0014             		move.w	#$F00,$14(a1)
00016FD4                            
00016FD4                            locret_15622:
00016FD4 4E75                       		rts	
00016FD6                            ; ===========================================================================
00016FD6                            
00016FD6                            Obj67_MoveSpot:				; XREF: Obj67_Action
00016FD6 3028 0036                  		move.w	$36(a0),d0
00016FDA D168 0026                  		add.w	d0,$26(a0)
00016FDE 1028 0026                  		move.b	$26(a0),d0
00016FE2 4EB9 0000 33DA             		jsr	(CalcSine).l
00016FE8 3428 0030                  		move.w	$30(a0),d2
00016FEC 3628 0032                  		move.w	$32(a0),d3
00016FF0 7800                       		moveq	#0,d4
00016FF2 1828 0034                  		move.b	$34(a0),d4
00016FF6 E14C                       		lsl.w	#8,d4
00016FF8 2A04                       		move.l	d4,d5
00016FFA C9C0                       		muls.w	d0,d4
00016FFC 4844                       		swap	d4
00016FFE CBC1                       		muls.w	d1,d5
00017000 4845                       		swap	d5
00017002 D842                       		add.w	d2,d4
00017004 DA43                       		add.w	d3,d5
00017006 3144 000C                  		move.w	d4,$C(a0)
0001700A 3145 0008                  		move.w	d5,8(a0)
0001700E 4E75                       		rts	
00017010                            ; ===========================================================================
00017010                            
00017010                            Obj67_ChkDel:				; XREF: Obj67_Action
00017010 3028 0032                  		move.w	$32(a0),d0
00017014 0240 FF80                  		andi.w	#-$80,d0
00017018 3238 F700                  		move.w	($FFFFF700).w,d1
0001701C 0441 0080                  		subi.w	#$80,d1
00017020 0241 FF80                  		andi.w	#-$80,d1
00017024 9041                       		sub.w	d1,d0
00017026 0C40 0280                  		cmpi.w	#$280,d0
0001702A 6200                       		bhi.s	Obj67_Delete
0001702C 4EF9 0000 E0E4             		jmp	DisplaySprite
00017032                            ; ===========================================================================
00017032                            
00017032                            Obj67_Delete:
00017032 4EF9 0000 E120             		jmp	DeleteObject
00017038                            ; ===========================================================================
00017038                            ; ---------------------------------------------------------------------------
00017038                            ; Sprite mappings - disc that you run around (SBZ)
00017038                            ; (It's just a small blob that moves around in a circle. The disc itself is
00017038                            ; part of the level tiles.)
00017038                            ; ---------------------------------------------------------------------------
00017038                            Map_obj67:
00017038                            	include "_maps\obj67.asm"
00017038                            ; ---------------------------------------------------------------------------
00017038                            ; Sprite mappings - disc that you run around (SBZ)
00017038                            ; (It's just a small blob that moves around in a circle. The disc itself is
00017038                            ; part of the level tiles.)
00017038                            ; ---------------------------------------------------------------------------
00017038 0000                       		dc.w byte_15688-Map_obj67
0001703A 01                         byte_15688:	dc.b 1
0001703B F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00017040                            		even
00017040                            		even
00017040                            
00017040                            ; ===========================================================================
00017040                            ; ---------------------------------------------------------------------------
00017040                            ; Object 68 - conveyor belts (SBZ)
00017040                            ; ---------------------------------------------------------------------------
00017040                            
00017040                            Obj68:					; XREF: Obj_Index
00017040 7000                       		moveq	#0,d0
00017042 1028 0024                  		move.b	$24(a0),d0
00017046 323B 0000                  		move.w	Obj68_Index(pc,d0.w),d1
0001704A 4EFB 1000                  		jmp	Obj68_Index(pc,d1.w)
0001704E                            ; ===========================================================================
0001704E 0000                       Obj68_Index:	dc.w Obj68_Main-Obj68_Index
00017050 0000                       		dc.w Obj68_Action-Obj68_Index
00017052                            ; ===========================================================================
00017052                            
00017052                            Obj68_Main:				; XREF: Obj68_Index
00017052 5428 0024                  		addq.b	#2,$24(a0)
00017056 117C 0080 0038             		move.b	#128,$38(a0)	; set width to 128 pixels
0001705C 1228 0028                  		move.b	$28(a0),d1	; get object type
00017060 0201 000F                  		andi.b	#$F,d1		; read only the	2nd digit
00017064 6700                       		beq.s	loc_156BA	; if zero, branch
00017066 117C 0038 0038             		move.b	#56,$38(a0)	; set width to 56 pixels
0001706C                            
0001706C                            loc_156BA:
0001706C 1228 0028                  		move.b	$28(a0),d1	; get object type
00017070 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00017074 4881                       		ext.w	d1
00017076 E841                       		asr.w	#4,d1
00017078 3141 0036                  		move.w	d1,$36(a0)	; set belt speed
0001707C                            
0001707C                            Obj68_Action:				; XREF: Obj68_Index
0001707C 6100                       		bsr.s	Obj68_MoveSonic
0001707E 3028 0008                  		move.w	8(a0),d0
00017082 0240 FF80                  		andi.w	#$FF80,d0
00017086 3238 F700                  		move.w	($FFFFF700).w,d1
0001708A 0441 0080                  		subi.w	#$80,d1
0001708E 0241 FF80                  		andi.w	#$FF80,d1
00017092 9041                       		sub.w	d1,d0
00017094 0C40 0280                  		cmpi.w	#$280,d0
00017098 6200                       		bhi.s	Obj68_Delete
0001709A 4E75                       		rts	
0001709C                            ; ===========================================================================
0001709C                            
0001709C                            Obj68_Delete:
0001709C 4EF9 0000 E120             		jmp	DeleteObject
000170A2                            ; ===========================================================================
000170A2                            
000170A2                            Obj68_MoveSonic:			; XREF: Obj68_Action
000170A2 7400                       		moveq	#0,d2
000170A4 1428 0038                  		move.b	$38(a0),d2
000170A8 3602                       		move.w	d2,d3
000170AA D643                       		add.w	d3,d3
000170AC 43F8 D000                  		lea	($FFFFD000).w,a1
000170B0 3029 0008                  		move.w	8(a1),d0
000170B4 9068 0008                  		sub.w	8(a0),d0
000170B8 D042                       		add.w	d2,d0
000170BA B043                       		cmp.w	d3,d0
000170BC 6400                       		bcc.s	locret_1572E
000170BE 3229 000C                  		move.w	$C(a1),d1
000170C2 9268 000C                  		sub.w	$C(a0),d1
000170C6 0641 0030                  		addi.w	#$30,d1
000170CA 0C41 0030                  		cmpi.w	#$30,d1
000170CE 6400                       		bcc.s	locret_1572E
000170D0 0829 0001 0022             		btst	#1,$22(a1)
000170D6 6600                       		bne.s	locret_1572E
000170D8 3028 0036                  		move.w	$36(a0),d0
000170DC D169 0008                  		add.w	d0,8(a1)
000170E0                            
000170E0                            locret_1572E:
000170E0 4E75                       		rts	
000170E2                            
000170E2                            ; ===========================================================================
000170E2                            ; ---------------------------------------------------------------------------
000170E2                            ; Object 69 - spinning platforms and trapdoors (SBZ)
000170E2                            ; ---------------------------------------------------------------------------
000170E2                            
000170E2                            Obj69:					; XREF: Obj_Index
000170E2 7000                       		moveq	#0,d0
000170E4 1028 0024                  		move.b	$24(a0),d0
000170E8 323B 0000                  		move.w	Obj69_Index(pc,d0.w),d1
000170EC 4EFB 1000                  		jmp	Obj69_Index(pc,d1.w)
000170F0                            ; ===========================================================================
000170F0 0000                       Obj69_Index:	dc.w Obj69_Main-Obj69_Index
000170F2 0000                       		dc.w Obj69_Trapdoor-Obj69_Index
000170F4 0000                       		dc.w Obj69_Spinner-Obj69_Index
000170F6                            ; ===========================================================================
000170F6                            
000170F6                            Obj69_Main:				; XREF: Obj69_Index
000170F6 5428 0024                  		addq.b	#2,$24(a0)
000170FA 217C 0000 0000 0004        		move.l	#Map_obj69,4(a0)
00017102 317C 4492 0002             		move.w	#$4492,2(a0)
00017108 0028 0004 0001             		ori.b	#4,1(a0)
0001710E 117C 0080 0019             		move.b	#$80,$19(a0)
00017114 7000                       		moveq	#0,d0
00017116 1028 0028                  		move.b	$28(a0),d0
0001711A 0240 000F                  		andi.w	#$F,d0
0001711E C0FC 003C                  		mulu.w	#$3C,d0
00017122 3140 0032                  		move.w	d0,$32(a0)
00017126 4A28 0028                  		tst.b	$28(a0)
0001712A 6A00                       		bpl.s	Obj69_Trapdoor
0001712C 5428 0024                  		addq.b	#2,$24(a0)
00017130 217C 0000 0000 0004        		move.l	#Map_obj69a,4(a0)
00017138 317C 04DF 0002             		move.w	#$4DF,2(a0)
0001713E 117C 0010 0019             		move.b	#$10,$19(a0)
00017144 117C 0002 001C             		move.b	#2,$1C(a0)
0001714A 7000                       		moveq	#0,d0
0001714C 1028 0028                  		move.b	$28(a0),d0	; get object type
00017150 3200                       		move.w	d0,d1
00017152 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00017156 C0FC 0006                  		mulu.w	#6,d0		; multiply by 6
0001715A 3140 0030                  		move.w	d0,$30(a0)	; set time delay
0001715E 3140 0032                  		move.w	d0,$32(a0)
00017162 0241 0070                  		andi.w	#$70,d1
00017166 0641 0010                  		addi.w	#$10,d1
0001716A E549                       		lsl.w	#2,d1
0001716C 5341                       		subq.w	#1,d1
0001716E 3141 0036                  		move.w	d1,$36(a0)
00017172 6000                       		bra.s	Obj69_Spinner
00017174                            ; ===========================================================================
00017174                            
00017174                            Obj69_Trapdoor:				; XREF: Obj69_Index
00017174 5368 0030                  		subq.w	#1,$30(a0)
00017178 6A00                       		bpl.s	Obj69_Animate
0001717A 3168 0032 0030             		move.w	$32(a0),$30(a0)
00017180 0868 0000 001C             		bchg	#0,$1C(a0)
00017186 4A28 0001                  		tst.b	1(a0)
0001718A 6A00                       		bpl.s	Obj69_Animate
0001718C 303C 00BB                  		move.w	#$BB,d0
00017190 4EB9 0000 147C             		jsr	(PlaySound_Special).l ;	play door sound
00017196                            
00017196                            Obj69_Animate:
00017196 43F9 0000 0000             		lea	(Ani_obj69).l,a1
0001719C 4EB9 0000 B1F6             		jsr	AnimateSprite
000171A2 4A28 001A                  		tst.b	$1A(a0)		; is frame number 0 displayed?
000171A6 6600                       		bne.s	Obj69_NotSolid	; if not, branch
000171A8 323C 004B                  		move.w	#$4B,d1
000171AC 343C 000C                  		move.w	#$C,d2
000171B0 3602                       		move.w	d2,d3
000171B2 5243                       		addq.w	#1,d3
000171B4 3828 0008                  		move.w	8(a0),d4
000171B8 6100 9314                  		bsr.w	SolidObject
000171BC 6000 8FE8                  		bra.w	MarkObjGone
000171C0                            ; ===========================================================================
000171C0                            
000171C0                            Obj69_NotSolid:
000171C0 0828 0003 0022             		btst	#3,$22(a0)
000171C6 6700                       		beq.s	Obj69_Display
000171C8 43F8 D000                  		lea	($FFFFD000).w,a1
000171CC 08A9 0003 0022             		bclr	#3,$22(a1)
000171D2 08A8 0003 0022             		bclr	#3,$22(a0)
000171D8 4228 0025                  		clr.b	$25(a0)
000171DC                            
000171DC                            Obj69_Display:
000171DC 6000 8FC8                  		bra.w	MarkObjGone
000171E0                            ; ===========================================================================
000171E0                            
000171E0                            Obj69_Spinner:				; XREF: Obj69_Index
000171E0 3038 FE04                  		move.w	($FFFFFE04).w,d0
000171E4 C068 0036                  		and.w	$36(a0),d0
000171E8 6600                       		bne.s	Obj69_Delay
000171EA 117C 0001 0034             		move.b	#1,$34(a0)
000171F0                            
000171F0                            Obj69_Delay:
000171F0 4A28 0034                  		tst.b	$34(a0)
000171F4 6700                       		beq.s	Obj69_Animate2
000171F6 5368 0030                  		subq.w	#1,$30(a0)
000171FA 6A00                       		bpl.s	Obj69_Animate2
000171FC 3168 0032 0030             		move.w	$32(a0),$30(a0)
00017202 4228 0034                  		clr.b	$34(a0)
00017206 0868 0000 001C             		bchg	#0,$1C(a0)
0001720C                            
0001720C                            Obj69_Animate2:
0001720C 43F9 0000 0000             		lea	(Ani_obj69).l,a1
00017212 4EB9 0000 B1F6             		jsr	AnimateSprite
00017218 4A28 001A                  		tst.b	$1A(a0)		; check	if frame number	0 is displayed
0001721C 6600                       		bne.s	Obj69_NotSolid2	; if not, branch
0001721E 323C 001B                  		move.w	#$1B,d1
00017222 343C 0007                  		move.w	#7,d2
00017226 3602                       		move.w	d2,d3
00017228 5243                       		addq.w	#1,d3
0001722A 3828 0008                  		move.w	8(a0),d4
0001722E 6100 929E                  		bsr.w	SolidObject
00017232 6000 8F72                  		bra.w	MarkObjGone
00017236                            ; ===========================================================================
00017236                            
00017236                            Obj69_NotSolid2:
00017236 0828 0003 0022             		btst	#3,$22(a0)
0001723C 6700                       		beq.s	Obj69_Display2
0001723E 43F8 D000                  		lea	($FFFFD000).w,a1
00017242 08A9 0003 0022             		bclr	#3,$22(a1)
00017248 08A8 0003 0022             		bclr	#3,$22(a0)
0001724E 4228 0025                  		clr.b	$25(a0)
00017252                            
00017252                            Obj69_Display2:
00017252 6000 8F52                  		bra.w	MarkObjGone
00017256                            ; ===========================================================================
00017256                            Ani_obj69:
00017256                            	include "_anim\obj69.asm"
00017256                            ; ---------------------------------------------------------------------------
00017256                            ; Animation script - trapdoor (SBZ)
00017256                            ; ---------------------------------------------------------------------------
00017256 0000                       		dc.w byte_158AC-Ani_obj69
00017258 0000                       		dc.w byte_158B2-Ani_obj69
0001725A 0000                       		dc.w byte_158B8-Ani_obj69
0001725C 0000                       		dc.w byte_158CC-Ani_obj69
0001725E 0300 0102 FE01             byte_158AC:	dc.b 3,	0, 1, 2, $FE, 1
00017264 0302 0100 FE01             byte_158B2:	dc.b 3,	2, 1, 0, $FE, 1
0001726A 0100 0102 0304 4342 4140+  byte_158B8:	dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
00017277 6423 2221 00FE 01          		dc.b $64, $23, $22, $21, 0, $FE, 1
0001727E 0100 0102 0304 4342 4140+  byte_158CC:	dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
0001728B 6423 2221 00FE 01          		dc.b $64, $23, $22, $21, 0, $FE, 1
00017292                            		even
00017292                            		even
00017292                            
00017292                            ; ---------------------------------------------------------------------------
00017292                            ; Sprite mappings - trapdoor (SBZ)
00017292                            ; ---------------------------------------------------------------------------
00017292                            Map_obj69:
00017292                            	include "_maps\obj69.asm"
00017292                            ; ---------------------------------------------------------------------------
00017292                            ; Sprite mappings - trapdoor (SBZ)
00017292                            ; ---------------------------------------------------------------------------
00017292 0000                       		dc.w byte_158E6-Map_obj69
00017294 0000                       		dc.w byte_158FB-Map_obj69
00017296 0000                       		dc.w byte_15924-Map_obj69
00017298 04                         byte_158E6:	dc.b 4
00017299 F40E 0000 C0               		dc.b $F4, $E, 0, 0, $C0
0001729E F40E 0800 E0               		dc.b $F4, $E, 8, 0, $E0
000172A3 F40E 0000 00               		dc.b $F4, $E, 0, 0, 0
000172A8 F40E 0800 20               		dc.b $F4, $E, 8, 0, $20
000172AD 08                         byte_158FB:	dc.b 8
000172AE F20F 000C B6               		dc.b $F2, $F, 0, $C, $B6
000172B3 1A0F 180C D6               		dc.b $1A, $F, $18, $C, $D6
000172B8 020A 001C D6               		dc.b 2,	$A, 0, $1C, $D6
000172BD 120A 181C BE               		dc.b $12, $A, $18, $1C,	$BE
000172C2 F20F 080C 2A               		dc.b $F2, $F, 8, $C, $2A
000172C7 1A0F 100C 0A               		dc.b $1A, $F, $10, $C, $A
000172CC 020A 081C 12               		dc.b 2,	$A, 8, $1C, $12
000172D1 120A 101C 2A               		dc.b $12, $A, $10, $1C,	$2A
000172D6 04                         byte_15924:	dc.b 4
000172D7 000B 0025 B4               		dc.b 0,	$B, 0, $25, $B4
000172DC 200B 1025 B4               		dc.b $20, $B, $10, $25,	$B4
000172E1 000B 0025 34               		dc.b 0,	$B, 0, $25, $34
000172E6 200B 1025 34               		dc.b $20, $B, $10, $25,	$34
000172EC 00                         		even
000172EC 00                         		even
000172EC                            
000172EC                            ; ---------------------------------------------------------------------------
000172EC                            ; Sprite mappings - spinning platforms (SBZ)
000172EC                            ; ---------------------------------------------------------------------------
000172EC                            Map_obj69a:
000172EC                            	include "_maps\obj69a.asm"
000172EC                            ; ---------------------------------------------------------------------------
000172EC                            ; Sprite mappings - spinning platforms (SBZ)
000172EC                            ; ---------------------------------------------------------------------------
000172EC 0000 0000                  		dc.w byte_15944-Map_obj69a, byte_1594F-Map_obj69a
000172F0 0000 0000                  		dc.w byte_1595A-Map_obj69a, byte_15965-Map_obj69a
000172F4 0000                       		dc.w byte_15970-Map_obj69a
000172F6 02                         byte_15944:	dc.b 2
000172F7 F805 0000 F0               		dc.b $F8, 5, 0,	0, $F0
000172FC F805 0800 00               		dc.b $F8, 5, 8,	0, 0
00017301 02                         byte_1594F:	dc.b 2
00017302 F00D 0014 F0               		dc.b $F0, $D, 0, $14, $F0
00017307 000D 001C F0               		dc.b 0,	$D, 0, $1C, $F0
0001730C 02                         byte_1595A:	dc.b 2
0001730D F009 0004 F0               		dc.b $F0, 9, 0,	4, $F0
00017312 0009 000A F8               		dc.b 0,	9, 0, $A, $F8
00017317 02                         byte_15965:	dc.b 2
00017318 F009 0024 F0               		dc.b $F0, 9, 0,	$24, $F0
0001731D 0009 002A F8               		dc.b 0,	9, 0, $2A, $F8
00017322 02                         byte_15970:	dc.b 2
00017323 F005 0010 F8               		dc.b $F0, 5, 0,	$10, $F8
00017328 0005 1010 F8               		dc.b 0,	5, $10,	$10, $F8
0001732E 00                         		even
0001732E 00                         		even
0001732E                            
0001732E                            ; ===========================================================================
0001732E                            ; ---------------------------------------------------------------------------
0001732E                            ; Object 6A - ground saws and pizza cutters (SBZ)
0001732E                            ; ---------------------------------------------------------------------------
0001732E                            
0001732E                            Obj6A:					; XREF: Obj_Index
0001732E 7000                       		moveq	#0,d0
00017330 1028 0024                  		move.b	$24(a0),d0
00017334 323B 0000                  		move.w	Obj6A_Index(pc,d0.w),d1
00017338 4EFB 1000                  		jmp	Obj6A_Index(pc,d1.w)
0001733C                            ; ===========================================================================
0001733C 0000                       Obj6A_Index:	dc.w Obj6A_Main-Obj6A_Index
0001733E 0000                       		dc.w Obj6A_Action-Obj6A_Index
00017340                            ; ===========================================================================
00017340                            
00017340                            Obj6A_Main:				; XREF: Obj6A_Index
00017340 5428 0024                  		addq.b	#2,$24(a0)
00017344 217C 0000 0000 0004        		move.l	#Map_obj6A,4(a0)
0001734C 317C 43B5 0002             		move.w	#$43B5,2(a0)
00017352 117C 0004 0001             		move.b	#4,1(a0)
00017358 117C 0004 0018             		move.b	#4,$18(a0)
0001735E 117C 0020 0019             		move.b	#$20,$19(a0)
00017364 3168 0008 003A             		move.w	8(a0),$3A(a0)
0001736A 3168 000C 0038             		move.w	$C(a0),$38(a0)
00017370 0C28 0003 0028             		cmpi.b	#3,$28(a0)
00017376 6400                       		bcc.s	Obj6A_Action
00017378 117C 00A2 0020             		move.b	#$A2,$20(a0)
0001737E                            
0001737E                            Obj6A_Action:				; XREF: Obj6A_Index
0001737E 7000                       		moveq	#0,d0
00017380 1028 0028                  		move.b	$28(a0),d0
00017384 0240 0007                  		andi.w	#7,d0
00017388 D040                       		add.w	d0,d0
0001738A 323B 0000                  		move.w	Obj6A_TypeIndex(pc,d0.w),d1
0001738E 4EBB 1000                  		jsr	Obj6A_TypeIndex(pc,d1.w)
00017392 3028 003A                  		move.w	$3A(a0),d0
00017396 0240 FF80                  		andi.w	#$FF80,d0
0001739A 3238 F700                  		move.w	($FFFFF700).w,d1
0001739E 0441 0080                  		subi.w	#$80,d1
000173A2 0241 FF80                  		andi.w	#$FF80,d1
000173A6 9041                       		sub.w	d1,d0
000173A8 0C40 0280                  		cmpi.w	#$280,d0
000173AC 6200                       		bhi.s	Obj6A_Delete
000173AE 4EF9 0000 E0E4             		jmp	DisplaySprite
000173B4                            ; ===========================================================================
000173B4                            
000173B4                            Obj6A_Delete:
000173B4 4EF9 0000 E120             		jmp	DeleteObject
000173BA                            ; ===========================================================================
000173BA 0000 0000                  Obj6A_TypeIndex:dc.w Obj6A_Type00-Obj6A_TypeIndex, Obj6A_Type01-Obj6A_TypeIndex
000173BE 0000 0000                  		dc.w Obj6A_Type02-Obj6A_TypeIndex, Obj6A_Type03-Obj6A_TypeIndex
000173C2 0000                       		dc.w Obj6A_Type04-Obj6A_TypeIndex
000173C4                            ; ===========================================================================
000173C4                            
000173C4                            Obj6A_Type00:				; XREF: Obj6A_TypeIndex
000173C4 4E75                       		rts	
000173C6                            ; ===========================================================================
000173C6                            
000173C6                            Obj6A_Type01:				; XREF: Obj6A_TypeIndex
000173C6 323C 0060                  		move.w	#$60,d1
000173CA 7000                       		moveq	#0,d0
000173CC 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
000173D0 0828 0000 0022             		btst	#0,$22(a0)
000173D6 6700                       		beq.s	Obj6A_Animate01
000173D8 4440                       		neg.w	d0
000173DA D041                       		add.w	d1,d0
000173DC                            
000173DC                            Obj6A_Animate01:
000173DC 3228 003A                  		move.w	$3A(a0),d1
000173E0 9240                       		sub.w	d0,d1
000173E2 3141 0008                  		move.w	d1,8(a0)	; move saw sideways
000173E6 5328 001E                  		subq.b	#1,$1E(a0)
000173EA 6A00                       		bpl.s	loc_15A46
000173EC 117C 0002 001E             		move.b	#2,$1E(a0)	; time between frame changes
000173F2 0868 0000 001A             		bchg	#0,$1A(a0)	; change frame
000173F8                            
000173F8                            loc_15A46:
000173F8 4A28 0001                  		tst.b	1(a0)
000173FC 6A00                       		bpl.s	locret_15A60
000173FE 3038 FE04                  		move.w	($FFFFFE04).w,d0
00017402 0240 000F                  		andi.w	#$F,d0
00017406 6600                       		bne.s	locret_15A60
00017408 303C 00B0                  		move.w	#$B0,d0
0001740C 4EB9 0000 147C             		jsr	(PlaySound_Special).l ;	play saw sound
00017412                            
00017412                            locret_15A60:
00017412 4E75                       		rts	
00017414                            ; ===========================================================================
00017414                            
00017414                            Obj6A_Type02:				; XREF: Obj6A_TypeIndex
00017414 323C 0030                  		move.w	#$30,d1
00017418 7000                       		moveq	#0,d0
0001741A 1038 FE64                  		move.b	($FFFFFE64).w,d0
0001741E 0828 0000 0022             		btst	#0,$22(a0)
00017424 6700                       		beq.s	Obj6A_Animate02
00017426 4440                       		neg.w	d0
00017428 0640 0080                  		addi.w	#$80,d0
0001742C                            
0001742C                            Obj6A_Animate02:
0001742C 3228 0038                  		move.w	$38(a0),d1
00017430 9240                       		sub.w	d0,d1
00017432 3141 000C                  		move.w	d1,$C(a0)	; move saw vertically
00017436 5328 001E                  		subq.b	#1,$1E(a0)
0001743A 6A00                       		bpl.s	loc_15A96
0001743C 117C 0002 001E             		move.b	#2,$1E(a0)
00017442 0868 0000 001A             		bchg	#0,$1A(a0)
00017448                            
00017448                            loc_15A96:
00017448 4A28 0001                  		tst.b	1(a0)
0001744C 6A00                       		bpl.s	locret_15AB0
0001744E 1038 FE64                  		move.b	($FFFFFE64).w,d0
00017452 0C00 0018                  		cmpi.b	#$18,d0
00017456 6600                       		bne.s	locret_15AB0
00017458 303C 00B0                  		move.w	#$B0,d0
0001745C 4EB9 0000 147C             		jsr	(PlaySound_Special).l ;	play saw sound
00017462                            
00017462                            locret_15AB0:
00017462 4E75                       		rts	
00017464                            ; ===========================================================================
00017464                            
00017464                            Obj6A_Type03:				; XREF: Obj6A_TypeIndex
00017464 4A28 003D                  		tst.b	$3D(a0)
00017468 6600                       		bne.s	Obj6A_Animate03
0001746A 3038 D008                  		move.w	($FFFFD008).w,d0
0001746E 0440 00C0                  		subi.w	#$C0,d0
00017472 6500                       		bcs.s	loc_15B02
00017474 9068 0008                  		sub.w	8(a0),d0
00017478 6500                       		bcs.s	loc_15B02
0001747A 3038 D00C                  		move.w	($FFFFD00C).w,d0
0001747E 0440 0080                  		subi.w	#$80,d0
00017482 B068 000C                  		cmp.w	$C(a0),d0
00017486 6400                       		bcc.s	locret_15B04
00017488 0640 0100                  		addi.w	#$100,d0
0001748C B068 000C                  		cmp.w	$C(a0),d0
00017490 6500                       		bcs.s	locret_15B04
00017492 117C 0001 003D             		move.b	#1,$3D(a0)
00017498 317C 0600 0010             		move.w	#$600,$10(a0)	; move object to the right
0001749E 117C 00A2 0020             		move.b	#$A2,$20(a0)
000174A4 117C 0002 001A             		move.b	#2,$1A(a0)
000174AA 303C 00B0                  		move.w	#$B0,d0
000174AE 4EB9 0000 147C             		jsr	(PlaySound_Special).l ;	play saw sound
000174B4                            
000174B4                            loc_15B02:
000174B4 588F                       		addq.l	#4,sp
000174B6                            
000174B6                            locret_15B04:
000174B6 4E75                       		rts	
000174B8                            ; ===========================================================================
000174B8                            
000174B8                            Obj6A_Animate03:			; XREF: ROM:00015AB6j
000174B8 4EB9 0000 E0BE             		jsr	SpeedToPos
000174BE 3168 0008 003A             		move.w	8(a0),$3A(a0)
000174C4 5328 001E                  		subq.b	#1,$1E(a0)
000174C8 6A00                       		bpl.s	locret_15B24
000174CA 117C 0002 001E             		move.b	#2,$1E(a0)
000174D0 0868 0000 001A             		bchg	#0,$1A(a0)
000174D6                            
000174D6                            locret_15B24:
000174D6 4E75                       		rts	
000174D8                            ; ===========================================================================
000174D8                            
000174D8                            Obj6A_Type04:				; XREF: Obj6A_TypeIndex
000174D8 4A28 003D                  		tst.b	$3D(a0)
000174DC 6600                       		bne.s	Obj6A_Animate04
000174DE 3038 D008                  		move.w	($FFFFD008).w,d0
000174E2 0640 00E0                  		addi.w	#$E0,d0
000174E6 9068 0008                  		sub.w	8(a0),d0
000174EA 6400                       		bcc.s	loc_15B74
000174EC 3038 D00C                  		move.w	($FFFFD00C).w,d0
000174F0 0440 0080                  		subi.w	#$80,d0
000174F4 B068 000C                  		cmp.w	$C(a0),d0
000174F8 6400                       		bcc.s	locret_15B76
000174FA 0640 0100                  		addi.w	#$100,d0
000174FE B068 000C                  		cmp.w	$C(a0),d0
00017502 6500                       		bcs.s	locret_15B76
00017504 117C 0001 003D             		move.b	#1,$3D(a0)
0001750A 317C FA00 0010             		move.w	#-$600,$10(a0)	; move object to the left
00017510 117C 00A2 0020             		move.b	#$A2,$20(a0)
00017516 117C 0002 001A             		move.b	#2,$1A(a0)
0001751C 303C 00B0                  		move.w	#$B0,d0
00017520 4EB9 0000 147C             		jsr	(PlaySound_Special).l ;	play saw sound
00017526                            
00017526                            loc_15B74:
00017526 588F                       		addq.l	#4,sp
00017528                            
00017528                            locret_15B76:
00017528 4E75                       		rts	
0001752A                            ; ===========================================================================
0001752A                            
0001752A                            Obj6A_Animate04:
0001752A 4EB9 0000 E0BE             		jsr	SpeedToPos
00017530 3168 0008 003A             		move.w	8(a0),$3A(a0)
00017536 5328 001E                  		subq.b	#1,$1E(a0)
0001753A 6A00                       		bpl.s	locret_15B96
0001753C 117C 0002 001E             		move.b	#2,$1E(a0)
00017542 0868 0000 001A             		bchg	#0,$1A(a0)
00017548                            
00017548                            locret_15B96:
00017548 4E75                       		rts	
0001754A                            ; ===========================================================================
0001754A                            ; ---------------------------------------------------------------------------
0001754A                            ; Sprite mappings - ground saws	and pizza cutters (SBZ)
0001754A                            ; ---------------------------------------------------------------------------
0001754A                            Map_obj6A:
0001754A                            	include "_maps\obj6A.asm"
0001754A                            ; ---------------------------------------------------------------------------
0001754A                            ; Sprite mappings - ground saws	and pizza cutters (SBZ)
0001754A                            ; ---------------------------------------------------------------------------
0001754A 0000 0000                  		dc.w byte_15BA0-Map_obj6A, byte_15BC4-Map_obj6A
0001754E 0000 0000                  		dc.w byte_15BE8-Map_obj6A, byte_15BFD-Map_obj6A
00017552 07                         byte_15BA0:	dc.b 7
00017553 C401 0020 FC               		dc.b $C4, 1, 0,	$20, $FC
00017558 D401 0020 FC               		dc.b $D4, 1, 0,	$20, $FC
0001755D E403 0020 FC               		dc.b $E4, 3, 0,	$20, $FC
00017562 E00F 0000 E0               		dc.b $E0, $F, 0, 0, $E0
00017567 E00F 0800 00               		dc.b $E0, $F, 8, 0, 0
0001756C 000F 1000 E0               		dc.b 0,	$F, $10, 0, $E0
00017571 000F 1800 00               		dc.b 0,	$F, $18, 0, 0
00017576 07                         byte_15BC4:	dc.b 7
00017577 C401 0020 FC               		dc.b $C4, 1, 0,	$20, $FC
0001757C D401 0020 FC               		dc.b $D4, 1, 0,	$20, $FC
00017581 E403 0020 FC               		dc.b $E4, 3, 0,	$20, $FC
00017586 E00F 0010 E0               		dc.b $E0, $F, 0, $10, $E0
0001758B E00F 0810 00               		dc.b $E0, $F, 8, $10, 0
00017590 000F 1010 E0               		dc.b 0,	$F, $10, $10, $E0
00017595 000F 1810 00               		dc.b 0,	$F, $18, $10, 0
0001759A 04                         byte_15BE8:	dc.b 4
0001759B E00F 0000 E0               		dc.b $E0, $F, 0, 0, $E0
000175A0 E00F 0800 00               		dc.b $E0, $F, 8, 0, 0
000175A5 000F 1000 E0               		dc.b 0,	$F, $10, 0, $E0
000175AA 000F 1800 00               		dc.b 0,	$F, $18, 0, 0
000175AF 04                         byte_15BFD:	dc.b 4
000175B0 E00F 0010 E0               		dc.b $E0, $F, 0, $10, $E0
000175B5 E00F 0810 00               		dc.b $E0, $F, 8, $10, 0
000175BA 000F 1010 E0               		dc.b 0,	$F, $10, $10, $E0
000175BF 000F 1810 00               		dc.b 0,	$F, $18, $10, 0
000175C4                            		even
000175C4                            		even
000175C4                            
000175C4                            ; ===========================================================================
000175C4                            ; ---------------------------------------------------------------------------
000175C4                            ; Object 6B - stomper (SBZ)
000175C4                            ; ---------------------------------------------------------------------------
000175C4                            
000175C4                            Obj6B:					; XREF: Obj_Index
000175C4 7000                       		moveq	#0,d0
000175C6 1028 0024                  		move.b	$24(a0),d0
000175CA 323B 0000                  		move.w	Obj6B_Index(pc,d0.w),d1
000175CE 4EFB 1000                  		jmp	Obj6B_Index(pc,d1.w)
000175D2                            ; ===========================================================================
000175D2 0000                       Obj6B_Index:	dc.w Obj6B_Main-Obj6B_Index
000175D4 0000                       		dc.w Obj6B_Action-Obj6B_Index
000175D6                            
000175D6 400C 8001                  Obj6B_Var:	dc.b  $40,  $C,	$80,   1 ; width, height, ????,	type number
000175DA 1C20 3803                  		dc.b  $1C, $20,	$38,   3
000175DE 1C20 4004                  		dc.b  $1C, $20,	$40,   4
000175E2 1C20 6004                  		dc.b  $1C, $20,	$60,   4
000175E6 8040 0005                  		dc.b  $80, $40,	  0,   5
000175EA                            ; ===========================================================================
000175EA                            
000175EA                            Obj6B_Main:				; XREF: Obj6B_Index
000175EA 5428 0024                  		addq.b	#2,$24(a0)
000175EE 7000                       		moveq	#0,d0
000175F0 1028 0028                  		move.b	$28(a0),d0
000175F4 E448                       		lsr.w	#2,d0
000175F6 0240 001C                  		andi.w	#$1C,d0
000175FA 47FB 00DA                  		lea	Obj6B_Var(pc,d0.w),a3
000175FE 115B 0019                  		move.b	(a3)+,$19(a0)
00017602 115B 0016                  		move.b	(a3)+,$16(a0)
00017606 E448                       		lsr.w	#2,d0
00017608 1140 001A                  		move.b	d0,$1A(a0)
0001760C 217C 0000 0000 0004        		move.l	#Map_obj6B,4(a0)
00017614 317C 22C0 0002             		move.w	#$22C0,2(a0)
0001761A 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ/SBZ3
00017620 6600                       		bne.s	Obj6B_SBZ12	; if not, branch
00017622 08F8 0000 F7CB             		bset	#0,($FFFFF7CB).w
00017628 6700                       		beq.s	Obj6B_SBZ3
0001762A                            
0001762A                            Obj6B_ChkGone:				; XREF: Obj6B_SBZ3
0001762A 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001762E 7000                       		moveq	#0,d0
00017630 1028 0023                  		move.b	$23(a0),d0
00017634 6700                       		beq.s	Obj6B_Delete
00017636 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0001763C                            
0001763C                            Obj6B_Delete:
0001763C 4EF9 0000 E120             		jmp	DeleteObject
00017642                            ; ===========================================================================
00017642                            
00017642                            Obj6B_SBZ3:				; XREF: Obj6B_Main
00017642 317C 41F0 0002             		move.w	#$41F0,2(a0)
00017648 0C68 0A80 0008             		cmpi.w	#$A80,8(a0)
0001764E 6600                       		bne.s	Obj6B_SBZ12
00017650 45F8 FC00                  		lea	($FFFFFC00).w,a2
00017654 7000                       		moveq	#0,d0
00017656 1028 0023                  		move.b	$23(a0),d0
0001765A 6700                       		beq.s	Obj6B_SBZ12
0001765C 0832 0000 0002             		btst	#0,2(a2,d0.w)
00017662 6700                       		beq.s	Obj6B_SBZ12
00017664 4238 F7CB                  		clr.b	($FFFFF7CB).w
00017668 60C0                       		bra.s	Obj6B_ChkGone
0001766A                            ; ===========================================================================
0001766A                            
0001766A                            Obj6B_SBZ12:				; XREF: Obj6B_Main
0001766A 0028 0004 0001             		ori.b	#4,1(a0)
00017670 117C 0004 0018             		move.b	#4,$18(a0)
00017676 3168 0008 0034             		move.w	8(a0),$34(a0)
0001767C 3168 000C 0030             		move.w	$C(a0),$30(a0)
00017682 7000                       		moveq	#0,d0
00017684 101B                       		move.b	(a3)+,d0
00017686 3140 003C                  		move.w	d0,$3C(a0)
0001768A 7000                       		moveq	#0,d0
0001768C 1028 0028                  		move.b	$28(a0),d0
00017690 6A00                       		bpl.s	Obj6B_Action
00017692 0200 000F                  		andi.b	#$F,d0
00017696 1140 003E                  		move.b	d0,$3E(a0)
0001769A 1153 0028                  		move.b	(a3),$28(a0)
0001769E 0C13 0005                  		cmpi.b	#5,(a3)
000176A2 6600                       		bne.s	Obj6B_ChkGone2
000176A4 08E8 0004 0001             		bset	#4,1(a0)
000176AA                            
000176AA                            Obj6B_ChkGone2:
000176AA 45F8 FC00                  		lea	($FFFFFC00).w,a2
000176AE 7000                       		moveq	#0,d0
000176B0 1028 0023                  		move.b	$23(a0),d0
000176B4 6700                       		beq.s	Obj6B_Action
000176B6 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
000176BC                            
000176BC                            Obj6B_Action:				; XREF: Obj6B_Index
000176BC 3F28 0008                  		move.w	8(a0),-(sp)
000176C0 7000                       		moveq	#0,d0
000176C2 1028 0028                  		move.b	$28(a0),d0
000176C6 0240 000F                  		andi.w	#$F,d0
000176CA D040                       		add.w	d0,d0
000176CC 323B 0000                  		move.w	Obj6B_TypeIndex(pc,d0.w),d1
000176D0 4EBB 1000                  		jsr	Obj6B_TypeIndex(pc,d1.w)
000176D4 381F                       		move.w	(sp)+,d4
000176D6 4A28 0001                  		tst.b	1(a0)
000176DA 6A00                       		bpl.s	Obj6B_ChkDel
000176DC 7200                       		moveq	#0,d1
000176DE 1228 0019                  		move.b	$19(a0),d1
000176E2 0641 000B                  		addi.w	#$B,d1
000176E6 7400                       		moveq	#0,d2
000176E8 1428 0016                  		move.b	$16(a0),d2
000176EC 3602                       		move.w	d2,d3
000176EE 5243                       		addq.w	#1,d3
000176F0 6100 8DDC                  		bsr.w	SolidObject
000176F4                            
000176F4                            Obj6B_ChkDel:
000176F4 3028 0034                  		move.w	$34(a0),d0
000176F8 0240 FF80                  		andi.w	#$FF80,d0
000176FC 3238 F700                  		move.w	($FFFFF700).w,d1
00017700 0441 0080                  		subi.w	#$80,d1
00017704 0241 FF80                  		andi.w	#$FF80,d1
00017708 9041                       		sub.w	d1,d0
0001770A 0C40 0280                  		cmpi.w	#$280,d0
0001770E 6200                       		bhi.s	loc_15D64
00017710 4EF9 0000 E0E4             		jmp	DisplaySprite
00017716                            ; ===========================================================================
00017716                            
00017716                            loc_15D64:
00017716 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
0001771C 6600                       		bne.s	Obj6B_Delete2
0001771E 4238 F7CB                  		clr.b	($FFFFF7CB).w
00017722 45F8 FC00                  		lea	($FFFFFC00).w,a2
00017726 7000                       		moveq	#0,d0
00017728 1028 0023                  		move.b	$23(a0),d0
0001772C 6700                       		beq.s	Obj6B_Delete2
0001772E 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00017734                            
00017734                            Obj6B_Delete2:
00017734 4EF9 0000 E120             		jmp	DeleteObject
0001773A                            ; ===========================================================================
0001773A 0000 0000                  Obj6B_TypeIndex:dc.w Obj6B_Type00-Obj6B_TypeIndex, Obj6B_Type01-Obj6B_TypeIndex
0001773E 0000 0000                  		dc.w Obj6B_Type02-Obj6B_TypeIndex, Obj6B_Type03-Obj6B_TypeIndex
00017742 0000 0000                  		dc.w Obj6B_Type04-Obj6B_TypeIndex, Obj6B_Type05-Obj6B_TypeIndex
00017746                            ; ===========================================================================
00017746                            
00017746                            Obj6B_Type00:				; XREF: Obj6B_TypeIndex
00017746 4E75                       		rts	
00017748                            ; ===========================================================================
00017748                            
00017748                            Obj6B_Type01:				; XREF: Obj6B_TypeIndex
00017748 4A28 0038                  		tst.b	$38(a0)
0001774C 6600                       		bne.s	loc_15DB4
0001774E 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00017752 7000                       		moveq	#0,d0
00017754 1028 003E                  		move.b	$3E(a0),d0
00017758 0832 0000 0000             		btst	#0,(a2,d0.w)
0001775E 6700                       		beq.s	loc_15DC2
00017760 117C 0001 0038             		move.b	#1,$38(a0)
00017766                            
00017766                            loc_15DB4:
00017766 3028 003C                  		move.w	$3C(a0),d0
0001776A B068 003A                  		cmp.w	$3A(a0),d0
0001776E 6700                       		beq.s	loc_15DE0
00017770 5468 003A                  		addq.w	#2,$3A(a0)
00017774                            
00017774                            loc_15DC2:
00017774 3028 003A                  		move.w	$3A(a0),d0
00017778 0828 0000 0022             		btst	#0,$22(a0)
0001777E 6700                       		beq.s	loc_15DD4
00017780 4440                       		neg.w	d0
00017782 0640 0080                  		addi.w	#$80,d0
00017786                            
00017786                            loc_15DD4:
00017786 3228 0034                  		move.w	$34(a0),d1
0001778A 9240                       		sub.w	d0,d1
0001778C 3141 0008                  		move.w	d1,8(a0)
00017790 4E75                       		rts	
00017792                            ; ===========================================================================
00017792                            
00017792                            loc_15DE0:
00017792 5228 0028                  		addq.b	#1,$28(a0)
00017796 317C 00B4 0036             		move.w	#$B4,$36(a0)
0001779C 4228 0038                  		clr.b	$38(a0)
000177A0 45F8 FC00                  		lea	($FFFFFC00).w,a2
000177A4 7000                       		moveq	#0,d0
000177A6 1028 0023                  		move.b	$23(a0),d0
000177AA 67C8                       		beq.s	loc_15DC2
000177AC 08F2 0000 0002             		bset	#0,2(a2,d0.w)
000177B2 60C0                       		bra.s	loc_15DC2
000177B4                            ; ===========================================================================
000177B4                            
000177B4                            Obj6B_Type02:				; XREF: Obj6B_TypeIndex
000177B4 4A28 0038                  		tst.b	$38(a0)
000177B8 6600                       		bne.s	loc_15E14
000177BA 5368 0036                  		subq.w	#1,$36(a0)
000177BE 6600                       		bne.s	loc_15E1E
000177C0 117C 0001 0038             		move.b	#1,$38(a0)
000177C6                            
000177C6                            loc_15E14:
000177C6 4A68 003A                  		tst.w	$3A(a0)
000177CA 6700                       		beq.s	loc_15E3C
000177CC 5568 003A                  		subq.w	#2,$3A(a0)
000177D0                            
000177D0                            loc_15E1E:
000177D0 3028 003A                  		move.w	$3A(a0),d0
000177D4 0828 0000 0022             		btst	#0,$22(a0)
000177DA 6700                       		beq.s	loc_15E30
000177DC 4440                       		neg.w	d0
000177DE 0640 0080                  		addi.w	#$80,d0
000177E2                            
000177E2                            loc_15E30:
000177E2 3228 0034                  		move.w	$34(a0),d1
000177E6 9240                       		sub.w	d0,d1
000177E8 3141 0008                  		move.w	d1,8(a0)
000177EC 4E75                       		rts	
000177EE                            ; ===========================================================================
000177EE                            
000177EE                            loc_15E3C:
000177EE 5328 0028                  		subq.b	#1,$28(a0)
000177F2 4228 0038                  		clr.b	$38(a0)
000177F6 45F8 FC00                  		lea	($FFFFFC00).w,a2
000177FA 7000                       		moveq	#0,d0
000177FC 1028 0023                  		move.b	$23(a0),d0
00017800 67CE                       		beq.s	loc_15E1E
00017802 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
00017808 60C6                       		bra.s	loc_15E1E
0001780A                            ; ===========================================================================
0001780A                            
0001780A                            Obj6B_Type03:				; XREF: Obj6B_TypeIndex
0001780A 4A28 0038                  		tst.b	$38(a0)
0001780E 6600                       		bne.s	loc_15E7C
00017810 4A68 003A                  		tst.w	$3A(a0)
00017814 6700                       		beq.s	loc_15E6A
00017816 5368 003A                  		subq.w	#1,$3A(a0)
0001781A 6000                       		bra.s	loc_15E8E
0001781C                            ; ===========================================================================
0001781C                            
0001781C                            loc_15E6A:
0001781C 5368 0036                  		subq.w	#1,$36(a0)
00017820 6A00                       		bpl.s	loc_15E8E
00017822 317C 003C 0036             		move.w	#$3C,$36(a0)
00017828 117C 0001 0038             		move.b	#1,$38(a0)
0001782E                            
0001782E                            loc_15E7C:
0001782E 5068 003A                  		addq.w	#8,$3A(a0)
00017832 3028 003A                  		move.w	$3A(a0),d0
00017836 B068 003C                  		cmp.w	$3C(a0),d0
0001783A 6600                       		bne.s	loc_15E8E
0001783C 4228 0038                  		clr.b	$38(a0)
00017840                            
00017840                            loc_15E8E:
00017840 3028 003A                  		move.w	$3A(a0),d0
00017844 0828 0000 0022             		btst	#0,$22(a0)
0001784A 6700                       		beq.s	loc_15EA0
0001784C 4440                       		neg.w	d0
0001784E 0640 0038                  		addi.w	#$38,d0
00017852                            
00017852                            loc_15EA0:
00017852 3228 0030                  		move.w	$30(a0),d1
00017856 D240                       		add.w	d0,d1
00017858 3141 000C                  		move.w	d1,$C(a0)
0001785C 4E75                       		rts	
0001785E                            ; ===========================================================================
0001785E                            
0001785E                            Obj6B_Type04:				; XREF: Obj6B_TypeIndex
0001785E 4A28 0038                  		tst.b	$38(a0)
00017862 6600                       		bne.s	loc_15ED0
00017864 4A68 003A                  		tst.w	$3A(a0)
00017868 6700                       		beq.s	loc_15EBE
0001786A 5168 003A                  		subq.w	#8,$3A(a0)
0001786E 6000                       		bra.s	loc_15EF0
00017870                            ; ===========================================================================
00017870                            
00017870                            loc_15EBE:
00017870 5368 0036                  		subq.w	#1,$36(a0)
00017874 6A00                       		bpl.s	loc_15EF0
00017876 317C 003C 0036             		move.w	#$3C,$36(a0)
0001787C 117C 0001 0038             		move.b	#1,$38(a0)
00017882                            
00017882                            loc_15ED0:
00017882 3028 003A                  		move.w	$3A(a0),d0
00017886 B068 003C                  		cmp.w	$3C(a0),d0
0001788A 6700                       		beq.s	loc_15EE0
0001788C 5068 003A                  		addq.w	#8,$3A(a0)
00017890 6000                       		bra.s	loc_15EF0
00017892                            ; ===========================================================================
00017892                            
00017892                            loc_15EE0:
00017892 5368 0036                  		subq.w	#1,$36(a0)
00017896 6A00                       		bpl.s	loc_15EF0
00017898 317C 003C 0036             		move.w	#$3C,$36(a0)
0001789E 4228 0038                  		clr.b	$38(a0)
000178A2                            
000178A2                            loc_15EF0:
000178A2 3028 003A                  		move.w	$3A(a0),d0
000178A6 0828 0000 0022             		btst	#0,$22(a0)
000178AC 6700                       		beq.s	loc_15F02
000178AE 4440                       		neg.w	d0
000178B0 0640 0038                  		addi.w	#$38,d0
000178B4                            
000178B4                            loc_15F02:
000178B4 3228 0030                  		move.w	$30(a0),d1
000178B8 D240                       		add.w	d0,d1
000178BA 3141 000C                  		move.w	d1,$C(a0)
000178BE 4E75                       		rts	
000178C0                            ; ===========================================================================
000178C0                            
000178C0                            Obj6B_Type05:				; XREF: Obj6B_TypeIndex
000178C0 4A28 0038                  		tst.b	$38(a0)
000178C4 6600                       		bne.s	loc_15F3E
000178C6 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
000178CA 7000                       		moveq	#0,d0
000178CC 1028 003E                  		move.b	$3E(a0),d0
000178D0 0832 0000 0000             		btst	#0,(a2,d0.w)
000178D6 6700                       		beq.s	locret_15F5C
000178D8 117C 0001 0038             		move.b	#1,$38(a0)
000178DE 45F8 FC00                  		lea	($FFFFFC00).w,a2
000178E2 7000                       		moveq	#0,d0
000178E4 1028 0023                  		move.b	$23(a0),d0
000178E8 6700                       		beq.s	loc_15F3E
000178EA 08F2 0000 0002             		bset	#0,2(a2,d0.w)
000178F0                            
000178F0                            loc_15F3E:
000178F0 04A8 0001 0000 0008        		subi.l	#$10000,8(a0)
000178F8 06A8 0000 8000 000C        		addi.l	#$8000,$C(a0)
00017900 3168 0008 0034             		move.w	8(a0),$34(a0)
00017906 0C68 0980 0008             		cmpi.w	#$980,8(a0)
0001790C 6700                       		beq.s	loc_15F5E
0001790E                            
0001790E                            locret_15F5C:
0001790E 4E75                       		rts	
00017910                            ; ===========================================================================
00017910                            
00017910                            loc_15F5E:
00017910 4228 0028                  		clr.b	$28(a0)
00017914 4228 0038                  		clr.b	$38(a0)
00017918 4E75                       		rts	
0001791A                            ; ===========================================================================
0001791A                            ; ---------------------------------------------------------------------------
0001791A                            ; Sprite mappings - stomper and	platforms (SBZ)
0001791A                            ; ---------------------------------------------------------------------------
0001791A                            Map_obj6B:
0001791A                            	include "_maps\obj6B.asm"
0001791A                            ; ---------------------------------------------------------------------------
0001791A                            ; Sprite mappings - stomper and	platforms (SBZ)
0001791A                            ; ---------------------------------------------------------------------------
0001791A 0000 0000                  		dc.w byte_15F72-Map_obj6B, byte_15F87-Map_obj6B
0001791E 0000 0000                  		dc.w byte_15F87-Map_obj6B, byte_15F87-Map_obj6B
00017922 0000                       		dc.w byte_15FB0-Map_obj6B
00017924 04                         byte_15F72:	dc.b 4
00017925 F40E 21AF C0               		dc.b $F4, $E, $21, $AF,	$C0
0001792A F40E 21B2 E0               		dc.b $F4, $E, $21, $B2,	$E0
0001792F F40E 21B2 00               		dc.b $F4, $E, $21, $B2,	0
00017934 F40E 29AF 20               		dc.b $F4, $E, $29, $AF,	$20
00017939 08                         byte_15F87:	dc.b 8
0001793A E00C 000C E4               		dc.b $E0, $C, 0, $C, $E4
0001793F E008 0010 04               		dc.b $E0, 8, 0,	$10, 4
00017944 E80E 2013 E4               		dc.b $E8, $E, $20, $13,	$E4
00017949 E80A 201F 04               		dc.b $E8, $A, $20, $1F,	4
0001794E 000E 2013 E4               		dc.b 0,	$E, $20, $13, $E4
00017953 000A 201F 04               		dc.b 0,	$A, $20, $1F, 4
00017958 180C 000C E4               		dc.b $18, $C, 0, $C, $E4
0001795D 1808 0010 04               		dc.b $18, 8, 0,	$10, 4
00017962 0E                         byte_15FB0:	dc.b $E
00017963 C00F 0000 80               		dc.b $C0, $F, 0, 0, $80
00017968 C00F 0010 A0               		dc.b $C0, $F, 0, $10, $A0
0001796D C00F 0020 C0               		dc.b $C0, $F, 0, $20, $C0
00017972 C00F 0010 E0               		dc.b $C0, $F, 0, $10, $E0
00017977 C00F 0020 00               		dc.b $C0, $F, 0, $20, 0
0001797C C00F 0010 20               		dc.b $C0, $F, 0, $10, $20
00017981 C00F 0030 40               		dc.b $C0, $F, 0, $30, $40
00017986 C00D 0040 60               		dc.b $C0, $D, 0, $40, $60
0001798B E00F 0048 80               		dc.b $E0, $F, 0, $48, $80
00017990 E00F 0048 C0               		dc.b $E0, $F, 0, $48, $C0
00017995 E00F 0058 00               		dc.b $E0, $F, 0, $58, 0
0001799A 000F 0048 80               		dc.b 0,	$F, 0, $48, $80
0001799F 000F 0058 C0               		dc.b 0,	$F, 0, $58, $C0
000179A4 200F 0058 80               		dc.b $20, $F, 0, $58, $80
000179AA 00                         		even
000179AA 00                         		even
000179AA                            
000179AA                            ; ===========================================================================
000179AA                            ; ---------------------------------------------------------------------------
000179AA                            ; Object 6C - vanishing	platforms (SBZ)
000179AA                            ; ---------------------------------------------------------------------------
000179AA                            
000179AA                            Obj6C:					; XREF: Obj_Index
000179AA 7000                       		moveq	#0,d0
000179AC 1028 0024                  		move.b	$24(a0),d0
000179B0 323B 0000                  		move.w	Obj6C_Index(pc,d0.w),d1
000179B4 4EFB 1000                  		jmp	Obj6C_Index(pc,d1.w)
000179B8                            ; ===========================================================================
000179B8 0000                       Obj6C_Index:	dc.w Obj6C_Main-Obj6C_Index
000179BA 0000                       		dc.w Obj6C_Vanish-Obj6C_Index
000179BC 0000                       		dc.w Obj6C_Vanish-Obj6C_Index
000179BE 0000                       		dc.w loc_16068-Obj6C_Index
000179C0                            ; ===========================================================================
000179C0                            
000179C0                            Obj6C_Main:				; XREF: Obj6C_Index
000179C0 5C28 0024                  		addq.b	#6,$24(a0)
000179C4 217C 0000 0000 0004        		move.l	#Map_obj6C,4(a0)
000179CC 317C 44C3 0002             		move.w	#$44C3,2(a0)
000179D2 0028 0004 0001             		ori.b	#4,1(a0)
000179D8 117C 0010 0019             		move.b	#$10,$19(a0)
000179DE 117C 0004 0018             		move.b	#4,$18(a0)
000179E4 7000                       		moveq	#0,d0
000179E6 1028 0028                  		move.b	$28(a0),d0	; get object type
000179EA 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
000179EE 5240                       		addq.w	#1,d0		; add 1
000179F0 EF48                       		lsl.w	#7,d0		; multiply by $80
000179F2 3200                       		move.w	d0,d1
000179F4 5340                       		subq.w	#1,d0
000179F6 3140 0030                  		move.w	d0,$30(a0)
000179FA 3140 0032                  		move.w	d0,$32(a0)
000179FE 7000                       		moveq	#0,d0
00017A00 1028 0028                  		move.b	$28(a0),d0	; get object type
00017A04 0240 00F0                  		andi.w	#$F0,d0		; read only the	1st digit
00017A08 0641 0080                  		addi.w	#$80,d1
00017A0C C0C1                       		mulu.w	d1,d0
00017A0E E088                       		lsr.l	#8,d0
00017A10 3140 0036                  		move.w	d0,$36(a0)
00017A14 5341                       		subq.w	#1,d1
00017A16 3141 0038                  		move.w	d1,$38(a0)
00017A1A                            
00017A1A                            loc_16068:				; XREF: Obj6C_Index
00017A1A 3038 FE04                  		move.w	($FFFFFE04).w,d0
00017A1E 9068 0036                  		sub.w	$36(a0),d0
00017A22 C068 0038                  		and.w	$38(a0),d0
00017A26 6600                       		bne.s	Obj6C_Animate
00017A28 5928 0024                  		subq.b	#4,$24(a0)
00017A2C 6000                       		bra.s	Obj6C_Vanish
00017A2E                            ; ===========================================================================
00017A2E                            
00017A2E                            Obj6C_Animate:
00017A2E 43F9 0000 0000             		lea	(Ani_obj6C).l,a1
00017A34 4EB9 0000 B1F6             		jsr	AnimateSprite
00017A3A 6000 876A                  		bra.w	MarkObjGone
00017A3E                            ; ===========================================================================
00017A3E                            
00017A3E                            Obj6C_Vanish:				; XREF: Obj6C_Index
00017A3E 5368 0030                  		subq.w	#1,$30(a0)
00017A42 6A00                       		bpl.s	loc_160AA
00017A44 317C 007F 0030             		move.w	#127,$30(a0)
00017A4A 4A28 001C                  		tst.b	$1C(a0)
00017A4E 6700                       		beq.s	loc_160A4
00017A50 3168 0032 0030             		move.w	$32(a0),$30(a0)
00017A56                            
00017A56                            loc_160A4:
00017A56 0868 0000 001C             		bchg	#0,$1C(a0)
00017A5C                            
00017A5C                            loc_160AA:
00017A5C 43F9 0000 0000             		lea	(Ani_obj6C).l,a1
00017A62 4EB9 0000 B1F6             		jsr	AnimateSprite
00017A68 0828 0001 001A             		btst	#1,$1A(a0)	; has platform vanished?
00017A6E 6600                       		bne.s	Obj6C_NotSolid	; if yes, branch
00017A70 0C28 0002 0024             		cmpi.b	#2,$24(a0)
00017A76 6600                       		bne.s	loc_160D6
00017A78 7200                       		moveq	#0,d1
00017A7A 1228 0019                  		move.b	$19(a0),d1
00017A7E 4EB9 0000 7ED6             		jsr	(PlatformObject).l
00017A84 6000 8720                  		bra.w	MarkObjGone
00017A88                            ; ===========================================================================
00017A88                            
00017A88                            loc_160D6:
00017A88 7200                       		moveq	#0,d1
00017A8A 1228 0019                  		move.b	$19(a0),d1
00017A8E 4EB9 0000 804A             		jsr	(ExitPlatform).l
00017A94 3428 0008                  		move.w	8(a0),d2
00017A98 4EB9 0000 85B4             		jsr	(MvSonicOnPtfm2).l
00017A9E 6000 8706                  		bra.w	MarkObjGone
00017AA2                            ; ===========================================================================
00017AA2                            
00017AA2                            Obj6C_NotSolid:				; XREF: Obj6C_Vanish
00017AA2 0828 0003 0022             		btst	#3,$22(a0)
00017AA8 6700                       		beq.s	Obj6C_Display
00017AAA 43F8 D000                  		lea	($FFFFD000).w,a1
00017AAE 08A9 0003 0022             		bclr	#3,$22(a1)
00017AB4 08A8 0003 0022             		bclr	#3,$22(a0)
00017ABA 117C 0002 0024             		move.b	#2,$24(a0)
00017AC0 4228 0025                  		clr.b	$25(a0)
00017AC4                            
00017AC4                            Obj6C_Display:
00017AC4 6000 86E0                  		bra.w	MarkObjGone
00017AC8                            ; ===========================================================================
00017AC8                            Ani_obj6C:
00017AC8                            	include "_anim\obj6C.asm"
00017AC8                            ; ---------------------------------------------------------------------------
00017AC8                            ; Animation script - vanishing platforms (SBZ)
00017AC8                            ; ---------------------------------------------------------------------------
00017AC8 0000                       		dc.w byte_1611A-Ani_obj6C
00017ACA 0000                       		dc.w byte_16122-Ani_obj6C
00017ACC 0700 0102 03FE 0100        byte_1611A:	dc.b 7,	0, 1, 2, 3, $FE, 1, 0
00017AD4 0703 0201 00FE 0100        byte_16122:	dc.b 7,	3, 2, 1, 0, $FE, 1, 0
00017ADC                            		even
00017ADC                            		even
00017ADC                            
00017ADC                            ; ---------------------------------------------------------------------------
00017ADC                            ; Sprite mappings - vanishing platforms	(SBZ)
00017ADC                            ; ---------------------------------------------------------------------------
00017ADC                            Map_obj6C:
00017ADC                            	include "_maps\obj6C.asm"
00017ADC                            ; ---------------------------------------------------------------------------
00017ADC                            ; Sprite mappings - vanishing platforms	(SBZ)
00017ADC                            ; ---------------------------------------------------------------------------
00017ADC 0000 0000                  		dc.w byte_16132-Map_obj6C, byte_16138-Map_obj6C
00017AE0 0000 0000                  		dc.w byte_1613E-Map_obj6C, byte_16144-Map_obj6C
00017AE4 01                         byte_16132:	dc.b 1
00017AE5 F80F 0000 F0               		dc.b $F8, $F, 0, 0, $F0
00017AEA 01                         byte_16138:	dc.b 1
00017AEB F807 0010 F8               		dc.b $F8, 7, 0,	$10, $F8
00017AF0 01                         byte_1613E:	dc.b 1
00017AF1 F803 0018 FC               		dc.b $F8, 3, 0,	$18, $FC
00017AF6 00                         byte_16144:	dc.b 0
00017AF8 00                         		even
00017AF8 00                         		even
00017AF8                            
00017AF8                            ; ===========================================================================
00017AF8                            ; ---------------------------------------------------------------------------
00017AF8                            ; Object 6E - electrocution orbs (SBZ)
00017AF8                            ; ---------------------------------------------------------------------------
00017AF8                            
00017AF8                            Obj6E:					; XREF: Obj_Index
00017AF8 7000                       		moveq	#0,d0
00017AFA 1028 0024                  		move.b	$24(a0),d0
00017AFE 323B 0000                  		move.w	Obj6E_Index(pc,d0.w),d1
00017B02 4EFB 1000                  		jmp	Obj6E_Index(pc,d1.w)
00017B06                            ; ===========================================================================
00017B06 0000                       Obj6E_Index:	dc.w Obj6E_Main-Obj6E_Index
00017B08 0000                       		dc.w Obj6E_Shock-Obj6E_Index
00017B0A                            ; ===========================================================================
00017B0A                            
00017B0A                            Obj6E_Main:				; XREF: Obj6E_Index
00017B0A 5428 0024                  		addq.b	#2,$24(a0)
00017B0E 217C 0000 0000 0004        		move.l	#Map_obj6E,4(a0)
00017B16 317C 047E 0002             		move.w	#$47E,2(a0)
00017B1C 0028 0004 0001             		ori.b	#4,1(a0)
00017B22 117C 0028 0019             		move.b	#$28,$19(a0)
00017B28 7000                       		moveq	#0,d0
00017B2A 1028 0028                  		move.b	$28(a0),d0	; read object type
00017B2E E948                       		lsl.w	#4,d0		; multiply by $10
00017B30 5340                       		subq.w	#1,d0
00017B32 3140 0034                  		move.w	d0,$34(a0)
00017B36                            
00017B36                            Obj6E_Shock:				; XREF: Obj6E_Index
00017B36 3038 FE04                  		move.w	($FFFFFE04).w,d0
00017B3A C068 0034                  		and.w	$34(a0),d0
00017B3E 6600                       		bne.s	Obj6E_Animate
00017B40 117C 0001 001C             		move.b	#1,$1C(a0)	; run "shocking" animation
00017B46 4A28 0001                  		tst.b	1(a0)
00017B4A 6A00                       		bpl.s	Obj6E_Animate
00017B4C 303C 00B1                  		move.w	#$B1,d0
00017B50 4EB9 0000 147C             		jsr	(PlaySound_Special).l ;	play electricity sound
00017B56                            
00017B56                            Obj6E_Animate:
00017B56 43F9 0000 0000             		lea	(Ani_obj6E).l,a1
00017B5C 4EB9 0000 B1F6             		jsr	AnimateSprite
00017B62 117C 0000 0020             		move.b	#0,$20(a0)
00017B68 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; is frame number 4 displayed?
00017B6E 6600                       		bne.s	Obj6E_Display	; if not, branch
00017B70 117C 00A4 0020             		move.b	#$A4,$20(a0)	; if yes, make object hurt Sonic
00017B76                            
00017B76                            Obj6E_Display:
00017B76 6000 862E                  		bra.w	MarkObjGone
00017B7A                            ; ===========================================================================
00017B7A                            Ani_obj6E:
00017B7A                            	include "_anim\obj6E.asm"
00017B7A                            ; ---------------------------------------------------------------------------
00017B7A                            ; Animation script - electrocution orbs (SBZ)
00017B7A                            ; ---------------------------------------------------------------------------
00017B7A 0000                       		dc.w byte_161CC-Ani_obj6E
00017B7C 0000                       		dc.w byte_161D0-Ani_obj6E
00017B7E 0700 FF00                  byte_161CC:	dc.b 7,	0, $FF,	0
00017B82 0001 0101 0203 0304 0404+  byte_161D0:	dc.b 0,	1, 1, 1, 2, 3, 3, 4, 4,	4, 5, 5, 5, 0, $FD, 0
00017B92                            		even
00017B92                            		even
00017B92                            
00017B92                            ; ---------------------------------------------------------------------------
00017B92                            ; Sprite mappings - electrocution orbs (SBZ)
00017B92                            ; ---------------------------------------------------------------------------
00017B92                            Map_obj6E:
00017B92                            	include "_maps\obj6E.asm"
00017B92                            ; ---------------------------------------------------------------------------
00017B92                            ; Sprite mappings - electrocution orbs (SBZ)
00017B92                            ; ---------------------------------------------------------------------------
00017B92 0000 0000                  		dc.w byte_161EC-Map_obj6E, byte_161F7-Map_obj6E
00017B96 0000 0000                  		dc.w byte_16207-Map_obj6E, byte_16221-Map_obj6E
00017B9A 0000 0000                  		dc.w byte_16236-Map_obj6E, byte_16255-Map_obj6E
00017B9E 02                         byte_161EC:	dc.b 2
00017B9F F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
00017BA4 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
00017BA9 03                         byte_161F7:	dc.b 3
00017BAA F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
00017BAF F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
00017BB4 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
00017BB9 05                         byte_16207:	dc.b 5
00017BBA F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
00017BBF F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
00017BC4 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
00017BC9 F60D 000C 08               		dc.b $F6, $D, 0, $C, 8
00017BCE F60D 080C DC               		dc.b $F6, $D, 8, $C, $DC
00017BD3 04                         byte_16221:	dc.b 4
00017BD4 F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
00017BD9 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
00017BDE F60D 000C 08               		dc.b $F6, $D, 0, $C, 8
00017BE3 F60D 080C DC               		dc.b $F6, $D, 8, $C, $DC
00017BE8 06                         byte_16236:	dc.b 6
00017BE9 F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
00017BEE 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
00017BF3 F60D 100C 08               		dc.b $F6, $D, $10, $C, 8
00017BF8 F60D 180C DC               		dc.b $F6, $D, $18, $C, $DC
00017BFD F60D 000C 24               		dc.b $F6, $D, 0, $C, $24
00017C02 F60D 080C C0               		dc.b $F6, $D, 8, $C, $C0
00017C07 04                         byte_16255:	dc.b 4
00017C08 F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
00017C0D 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
00017C12 F60D 100C 24               		dc.b $F6, $D, $10, $C, $24
00017C17 F60D 180C C0               		dc.b $F6, $D, $18, $C, $C0
00017C1C                            		even
00017C1C                            		even
00017C1C                            
00017C1C                            ; ===========================================================================
00017C1C                            ; ---------------------------------------------------------------------------
00017C1C                            ; Object 6F - spinning platforms that move around a conveyor belt (SBZ)
00017C1C                            ; ---------------------------------------------------------------------------
00017C1C                            
00017C1C                            Obj6F:					; XREF: Obj_Index
00017C1C 7000                       		moveq	#0,d0
00017C1E 1028 0024                  		move.b	$24(a0),d0
00017C22 323B 0000                  		move.w	Obj6F_Index(pc,d0.w),d1
00017C26 4EBB 1000                  		jsr	Obj6F_Index(pc,d1.w)
00017C2A 3028 0030                  		move.w	$30(a0),d0
00017C2E 0240 FF80                  		andi.w	#$FF80,d0
00017C32 3238 F700                  		move.w	($FFFFF700).w,d1
00017C36 0441 0080                  		subi.w	#$80,d1
00017C3A 0241 FF80                  		andi.w	#$FF80,d1
00017C3E 9041                       		sub.w	d1,d0
00017C40 0C40 0280                  		cmpi.w	#$280,d0
00017C44 6200                       		bhi.s	loc_1629A
00017C46                            
00017C46                            Obj6F_Display:
00017C46 4EF9 0000 E0E4             		jmp	DisplaySprite
00017C4C                            ; ===========================================================================
00017C4C                            
00017C4C                            loc_1629A:
00017C4C 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w ; check if act	is 3
00017C52 6600                       		bne.s	Obj6F_Act1or2	; if not, branch
00017C54 0C40 FF80                  		cmpi.w	#-$80,d0
00017C58 64EC                       		bcc.s	Obj6F_Display
00017C5A                            
00017C5A                            Obj6F_Act1or2:
00017C5A 1028 002F                  		move.b	$2F(a0),d0
00017C5E 6A00                       		bpl.s	Obj6F_Delete
00017C60 0240 007F                  		andi.w	#$7F,d0
00017C64 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00017C68 08B2 0000 0000             		bclr	#0,(a2,d0.w)
00017C6E                            
00017C6E                            Obj6F_Delete:
00017C6E 4EF9 0000 E120             		jmp	DeleteObject
00017C74                            ; ===========================================================================
00017C74 0000                       Obj6F_Index:	dc.w Obj6F_Main-Obj6F_Index
00017C76 0000                       		dc.w loc_163D8-Obj6F_Index
00017C78                            ; ===========================================================================
00017C78                            
00017C78                            Obj6F_Main:				; XREF: Obj6F_Index
00017C78 1028 0028                  		move.b	$28(a0),d0
00017C7C 6B00 0000                  		bmi.w	loc_16380
00017C80 5428 0024                  		addq.b	#2,$24(a0)
00017C84 217C 0001 72EC 0004        		move.l	#Map_obj69a,4(a0)
00017C8C 317C 04DF 0002             		move.w	#$4DF,2(a0)
00017C92 117C 0010 0019             		move.b	#$10,$19(a0)
00017C98 0028 0004 0001             		ori.b	#4,1(a0)
00017C9E 117C 0004 0018             		move.b	#4,$18(a0)
00017CA4 7000                       		moveq	#0,d0
00017CA6 1028 0028                  		move.b	$28(a0),d0
00017CAA 3200                       		move.w	d0,d1
00017CAC E648                       		lsr.w	#3,d0
00017CAE 0240 001E                  		andi.w	#$1E,d0
00017CB2 45FA 0000                  		lea	off_164A6(pc),a2
00017CB6 D4F2 0000                  		adda.w	(a2,d0.w),a2
00017CBA 315A 0038                  		move.w	(a2)+,$38(a0)
00017CBE 315A 0030                  		move.w	(a2)+,$30(a0)
00017CC2 214A 003C                  		move.l	a2,$3C(a0)
00017CC6 0241 000F                  		andi.w	#$F,d1
00017CCA E549                       		lsl.w	#2,d1
00017CCC 1141 0038                  		move.b	d1,$38(a0)
00017CD0 117C 0004 003A             		move.b	#4,$3A(a0)
00017CD6 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00017CDA 6700                       		beq.s	loc_16356
00017CDC 117C 0001 003B             		move.b	#1,$3B(a0)
00017CE2 4428 003A                  		neg.b	$3A(a0)
00017CE6 7200                       		moveq	#0,d1
00017CE8 1228 0038                  		move.b	$38(a0),d1
00017CEC D228 003A                  		add.b	$3A(a0),d1
00017CF0 B228 0039                  		cmp.b	$39(a0),d1
00017CF4 6500                       		bcs.s	loc_16352
00017CF6 1001                       		move.b	d1,d0
00017CF8 7200                       		moveq	#0,d1
00017CFA 4A00                       		tst.b	d0
00017CFC 6A00                       		bpl.s	loc_16352
00017CFE 1228 0039                  		move.b	$39(a0),d1
00017D02 5901                       		subq.b	#4,d1
00017D04                            
00017D04                            loc_16352:
00017D04 1141 0038                  		move.b	d1,$38(a0)
00017D08                            
00017D08                            loc_16356:
00017D08 3172 1000 0034             		move.w	(a2,d1.w),$34(a0)
00017D0E 3172 1002 0036             		move.w	2(a2,d1.w),$36(a0)
00017D14 4A41                       		tst.w	d1
00017D16 6600                       		bne.s	loc_1636C
00017D18 117C 0001 001C             		move.b	#1,$1C(a0)
00017D1E                            
00017D1E                            loc_1636C:
00017D1E 0C41 0008                  		cmpi.w	#8,d1
00017D22 6600                       		bne.s	loc_16378
00017D24 117C 0000 001C             		move.b	#0,$1C(a0)
00017D2A                            
00017D2A                            loc_16378:
00017D2A 6100 B332                  		bsr.w	Obj63_ChangeDir
00017D2E 6000 0000                  		bra.w	loc_163D8
00017D32                            ; ===========================================================================
00017D32                            
00017D32                            loc_16380:				; XREF: Obj6F_Main
00017D32 1140 002F                  		move.b	d0,$2F(a0)
00017D36 0240 007F                  		andi.w	#$7F,d0
00017D3A 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00017D3E 08F2 0000 0000             		bset	#0,(a2,d0.w)
00017D44 6700                       		beq.s	loc_1639A
00017D46 4EF9 0000 E120             		jmp	DeleteObject
00017D4C                            ; ===========================================================================
00017D4C                            
00017D4C                            loc_1639A:
00017D4C D040                       		add.w	d0,d0
00017D4E 0240 001E                  		andi.w	#$1E,d0
00017D52 0640 0080                  		addi.w	#$80,d0
00017D56 45F9 0000 0000             		lea	(ObjPos_Index).l,a2
00017D5C D4F2 0000                  		adda.w	(a2,d0.w),a2
00017D60 321A                       		move.w	(a2)+,d1
00017D62 2248                       		movea.l	a0,a1
00017D64 6000                       		bra.s	Obj6F_LoadPform
00017D66                            ; ===========================================================================
00017D66                            
00017D66                            Obj6F_Loop:
00017D66 4EB9 0000 E57A             		jsr	SingleObjLoad
00017D6C 6600                       		bne.s	loc_163D0
00017D6E                            
00017D6E                            Obj6F_LoadPform:			; XREF: loc_1639A
00017D6E 12BC 006F                  		move.b	#$6F,0(a1)
00017D72 335A 0008                  		move.w	(a2)+,8(a1)
00017D76 335A 000C                  		move.w	(a2)+,$C(a1)
00017D7A 301A                       		move.w	(a2)+,d0
00017D7C 1340 0028                  		move.b	d0,$28(a1)
00017D80                            
00017D80                            loc_163D0:
00017D80 51C9 FFE4                  		dbf	d1,Obj6F_Loop
00017D84                            
00017D84 588F                       		addq.l	#4,sp
00017D86 4E75                       		rts	
00017D88                            ; ===========================================================================
00017D88                            
00017D88                            loc_163D8:				; XREF: Obj6F_Index
00017D88 43F9 0000 0000             		lea	(Ani_obj6F).l,a1
00017D8E 4EB9 0000 B1F6             		jsr	AnimateSprite
00017D94 4A28 001A                  		tst.b	$1A(a0)
00017D98 6600                       		bne.s	loc_16404
00017D9A 3F28 0008                  		move.w	8(a0),-(sp)
00017D9E 6100 0000                  		bsr.w	loc_16424
00017DA2 323C 001B                  		move.w	#$1B,d1
00017DA6 343C 0007                  		move.w	#7,d2
00017DAA 3602                       		move.w	d2,d3
00017DAC 5243                       		addq.w	#1,d3
00017DAE 381F                       		move.w	(sp)+,d4
00017DB0 6000 871C                  		bra.w	SolidObject
00017DB4                            ; ===========================================================================
00017DB4                            
00017DB4                            loc_16404:
00017DB4 0828 0003 0022             		btst	#3,$22(a0)
00017DBA 6700                       		beq.s	loc_16420
00017DBC 43F8 D000                  		lea	($FFFFD000).w,a1
00017DC0 08A9 0003 0022             		bclr	#3,$22(a1)
00017DC6 08A8 0003 0022             		bclr	#3,$22(a0)
00017DCC 4228 0025                  		clr.b	$25(a0)
00017DD0                            
00017DD0                            loc_16420:
00017DD0 6000 0002                  		bra.w	*+4
00017DD4                            
00017DD4                            loc_16424:
00017DD4 3028 0008                  		move.w	8(a0),d0
00017DD8 B068 0034                  		cmp.w	$34(a0),d0
00017DDC 6600                       		bne.s	loc_16484
00017DDE 3028 000C                  		move.w	$C(a0),d0
00017DE2 B068 0036                  		cmp.w	$36(a0),d0
00017DE6 6600                       		bne.s	loc_16484
00017DE8 7200                       		moveq	#0,d1
00017DEA 1228 0038                  		move.b	$38(a0),d1
00017DEE D228 003A                  		add.b	$3A(a0),d1
00017DF2 B228 0039                  		cmp.b	$39(a0),d1
00017DF6 6500                       		bcs.s	loc_16456
00017DF8 1001                       		move.b	d1,d0
00017DFA 7200                       		moveq	#0,d1
00017DFC 4A00                       		tst.b	d0
00017DFE 6A00                       		bpl.s	loc_16456
00017E00 1228 0039                  		move.b	$39(a0),d1
00017E04 5901                       		subq.b	#4,d1
00017E06                            
00017E06                            loc_16456:
00017E06 1141 0038                  		move.b	d1,$38(a0)
00017E0A 2268 003C                  		movea.l	$3C(a0),a1
00017E0E 3171 1000 0034             		move.w	(a1,d1.w),$34(a0)
00017E14 3171 1002 0036             		move.w	2(a1,d1.w),$36(a0)
00017E1A 4A41                       		tst.w	d1
00017E1C 6600                       		bne.s	loc_16474
00017E1E 117C 0001 001C             		move.b	#1,$1C(a0)
00017E24                            
00017E24                            loc_16474:
00017E24 0C41 0008                  		cmpi.w	#8,d1
00017E28 6600                       		bne.s	loc_16480
00017E2A 117C 0000 001C             		move.b	#0,$1C(a0)
00017E30                            
00017E30                            loc_16480:
00017E30 6100 B22C                  		bsr.w	Obj63_ChangeDir
00017E34                            
00017E34                            loc_16484:
00017E34 4EF9 0000 E0BE             		jmp	SpeedToPos
00017E3A                            ; ===========================================================================
00017E3A                            Ani_obj6F:
00017E3A                            	include "_anim\obj6F.asm"
00017E3A                            ; ---------------------------------------------------------------------------
00017E3A                            ; Animation script - platform on conveyor belt (SBZ)
00017E3A                            ; ---------------------------------------------------------------------------
00017E3A 0000                       		dc.w byte_1648E-Ani_obj6F
00017E3C 0000                       		dc.w byte_164A2-Ani_obj6F
00017E3E 0000 0102 0304 4342 4140+  byte_1648E:	dc.b 0,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
00017E4B 6423 2221 00FF 00          		dc.b $64, $23, $22, $21, 0, $FF, 0
00017E52 0F00 FF                    byte_164A2:	dc.b $F, 0, $FF
00017E56 00                         		even
00017E56 00                         		even
00017E56                            
00017E56 0000 0000 0000             off_164A6:	dc.w word_164B2-off_164A6, word_164C6-off_164A6, word_164DA-off_164A6
00017E5C 0000 0000 0000             		dc.w word_164EE-off_164A6, word_16502-off_164A6, word_16516-off_164A6
00017E62 0010 0E80 0E14 0370 0EEF+  word_164B2:	dc.w $10, $E80,	$E14, $370, $EEF, $302,	$EEF, $340, $E14, $3AE
00017E76 0010 0F80 0F14 02E0 0FEF+  word_164C6:	dc.w $10, $F80,	$F14, $2E0, $FEF, $272,	$FEF, $2B0, $F14, $31E
00017E8A 0010 1080 1014 0270 10EF+  word_164DA:	dc.w $10, $1080, $1014,	$270, $10EF, $202, $10EF, $240,	$1014, $2AE
00017E9E 0010 0F80 0F14 0570 0FEF+  word_164EE:	dc.w $10, $F80,	$F14, $570, $FEF, $502,	$FEF, $540, $F14, $5AE
00017EB2 0010 1B80 1B14 0670 1BEF+  word_16502:	dc.w $10, $1B80, $1B14,	$670, $1BEF, $602, $1BEF, $640,	$1B14, $6AE
00017EC6 0010 1C80 1C14 05E0 1CEF+  word_16516:	dc.w $10, $1C80, $1C14,	$5E0, $1CEF, $572, $1CEF, $5B0,	$1C14, $61E
00017EDA                            ; ===========================================================================
00017EDA                            ; ---------------------------------------------------------------------------
00017EDA                            ; Object 70 - large girder block (SBZ)
00017EDA                            ; ---------------------------------------------------------------------------
00017EDA                            
00017EDA                            Obj70:					; XREF: Obj_Index
00017EDA 7000                       		moveq	#0,d0
00017EDC 1028 0024                  		move.b	$24(a0),d0
00017EE0 323B 0000                  		move.w	Obj70_Index(pc,d0.w),d1
00017EE4 4EFB 1000                  		jmp	Obj70_Index(pc,d1.w)
00017EE8                            ; ===========================================================================
00017EE8 0000                       Obj70_Index:	dc.w Obj70_Main-Obj70_Index
00017EEA 0000                       		dc.w Obj70_Action-Obj70_Index
00017EEC                            ; ===========================================================================
00017EEC                            
00017EEC                            Obj70_Main:				; XREF: Obj70_Index
00017EEC 5428 0024                  		addq.b	#2,$24(a0)
00017EF0 217C 0000 0000 0004        		move.l	#Map_obj70,4(a0)
00017EF8 317C 42F0 0002             		move.w	#$42F0,2(a0)
00017EFE 0028 0004 0001             		ori.b	#4,1(a0)
00017F04 117C 0004 0018             		move.b	#4,$18(a0)
00017F0A 117C 0060 0019             		move.b	#$60,$19(a0)
00017F10 117C 0018 0016             		move.b	#$18,$16(a0)
00017F16 3168 0008 0032             		move.w	8(a0),$32(a0)
00017F1C 3168 000C 0030             		move.w	$C(a0),$30(a0)
00017F22 6100 0000                  		bsr.w	Obj70_Move2
00017F26                            
00017F26                            Obj70_Action:				; XREF: Obj70_Index
00017F26 3F28 0008                  		move.w	8(a0),-(sp)
00017F2A 4A68 003A                  		tst.w	$3A(a0)
00017F2E 6700                       		beq.s	Obj70_Move
00017F30 5368 003A                  		subq.w	#1,$3A(a0)
00017F34 6600                       		bne.s	Obj70_Solid
00017F36                            
00017F36                            Obj70_Move:
00017F36 4EB9 0000 E0BE             		jsr	SpeedToPos
00017F3C 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from movement duration
00017F40 6600                       		bne.s	Obj70_Solid	; if time remains, branch
00017F42 6100 0000                  		bsr.w	Obj70_Move2	; if time is zero, branch
00017F46                            
00017F46                            Obj70_Solid:
00017F46 381F                       		move.w	(sp)+,d4
00017F48 4A28 0001                  		tst.b	1(a0)
00017F4C 6A00                       		bpl.s	Obj70_ChkDel
00017F4E 7200                       		moveq	#0,d1
00017F50 1228 0019                  		move.b	$19(a0),d1
00017F54 0641 000B                  		addi.w	#$B,d1
00017F58 7400                       		moveq	#0,d2
00017F5A 1428 0016                  		move.b	$16(a0),d2
00017F5E 3602                       		move.w	d2,d3
00017F60 5243                       		addq.w	#1,d3
00017F62 6100 856A                  		bsr.w	SolidObject
00017F66                            
00017F66                            Obj70_ChkDel:
00017F66 3028 0032                  		move.w	$32(a0),d0
00017F6A 0240 FF80                  		andi.w	#$FF80,d0
00017F6E 3238 F700                  		move.w	($FFFFF700).w,d1
00017F72 0441 0080                  		subi.w	#$80,d1
00017F76 0241 FF80                  		andi.w	#$FF80,d1
00017F7A 9041                       		sub.w	d1,d0
00017F7C 0C40 0280                  		cmpi.w	#$280,d0
00017F80 6200                       		bhi.s	Obj70_Delete
00017F82 4EF9 0000 E0E4             		jmp	DisplaySprite
00017F88                            ; ===========================================================================
00017F88                            
00017F88                            Obj70_Delete:
00017F88 4EF9 0000 E120             		jmp	DeleteObject
00017F8E                            ; ===========================================================================
00017F8E                            
00017F8E                            Obj70_Move2:				; XREF: Obj70_Main
00017F8E 1028 0038                  		move.b	$38(a0),d0
00017F92 0240 0018                  		andi.w	#$18,d0
00017F96 43F9 0000 0000             		lea	(Obj70_MoveData).l,a1
00017F9C 43F1 0000                  		lea	(a1,d0.w),a1
00017FA0 3159 0010                  		move.w	(a1)+,$10(a0)
00017FA4 3159 0012                  		move.w	(a1)+,$12(a0)
00017FA8 3159 0034                  		move.w	(a1)+,$34(a0)
00017FAC 5028 0038                  		addq.b	#8,$38(a0)	; use next movedata set
00017FB0 317C 0007 003A             		move.w	#7,$3A(a0)
00017FB6 4E75                       		rts	
00017FB8                            ; ===========================================================================
00017FB8 0100 0000 0060 0000        Obj70_MoveData:	dc.w   $100,	 0,   $60,     0 ; x-speed, y-speed, duration, blank
00017FC0 0000 0100 0030 0000        		dc.w	  0,  $100,   $30,     0
00017FC8 FF00 FFC0 0060 0000        		dc.w  $FF00, $FFC0,   $60,     0
00017FD0 0000 FF00 0018 0000        		dc.w	  0, $FF00,   $18,     0
00017FD8                            ; ---------------------------------------------------------------------------
00017FD8                            ; Sprite mappings - large girder block (SBZ)
00017FD8                            ; ---------------------------------------------------------------------------
00017FD8                            Map_obj70:
00017FD8                            	include "_maps\obj70.asm"
00017FD8                            ; ---------------------------------------------------------------------------
00017FD8                            ; Sprite mappings - large girder block (SBZ)
00017FD8                            ; ---------------------------------------------------------------------------
00017FD8 0000                       		dc.w byte_1662A-Map_obj70
00017FDA 0C                         byte_1662A:	dc.b $C
00017FDB E80E 0000 A0               		dc.b $E8, $E, 0, 0, $A0
00017FE0 000E 1000 A0               		dc.b 0,	$E, $10, 0, $A0
00017FE5 E80E 0006 C0               		dc.b $E8, $E, 0, 6, $C0
00017FEA 000E 1006 C0               		dc.b 0,	$E, $10, 6, $C0
00017FEF E80E 0006 E0               		dc.b $E8, $E, 0, 6, $E0
00017FF4 000E 1006 E0               		dc.b 0,	$E, $10, 6, $E0
00017FF9 E80E 0006 00               		dc.b $E8, $E, 0, 6, 0
00017FFE 000E 1006 00               		dc.b 0,	$E, $10, 6, 0
00018003 E80E 0006 20               		dc.b $E8, $E, 0, 6, $20
00018008 000E 1006 20               		dc.b 0,	$E, $10, 6, $20
0001800D E80E 0006 40               		dc.b $E8, $E, 0, 6, $40
00018012 000E 1006 40               		dc.b 0,	$E, $10, 6, $40
00018018 00                         		even
00018018 00                         		even
00018018                            
00018018                            ; ===========================================================================
00018018                            ; ---------------------------------------------------------------------------
00018018                            ; Object 72 - teleporter (SBZ)
00018018                            ; ---------------------------------------------------------------------------
00018018                            
00018018                            Obj72:					; XREF: Obj_Index
00018018 7000                       		moveq	#0,d0
0001801A 1028 0024                  		move.b	$24(a0),d0
0001801E 323B 0000                  		move.w	Obj72_Index(pc,d0.w),d1
00018022 4EBB 1000                  		jsr	Obj72_Index(pc,d1.w)
00018026 3028 0008                  		move.w	8(a0),d0
0001802A 0240 FF80                  		andi.w	#$FF80,d0
0001802E 3238 F700                  		move.w	($FFFFF700).w,d1
00018032 0441 0080                  		subi.w	#$80,d1
00018036 0241 FF80                  		andi.w	#$FF80,d1
0001803A 9041                       		sub.w	d1,d0
0001803C 0C40 0280                  		cmpi.w	#$280,d0
00018040 6200                       		bhi.s	Obj72_Delete
00018042 4E75                       		rts	
00018044                            ; ===========================================================================
00018044                            
00018044                            Obj72_Delete:
00018044 4EF9 0000 E120             		jmp	DeleteObject
0001804A                            ; ===========================================================================
0001804A 0000                       Obj72_Index:	dc.w Obj72_Main-Obj72_Index
0001804C 0000                       		dc.w loc_166C8-Obj72_Index
0001804E 0000                       		dc.w loc_1675E-Obj72_Index
00018050 0000                       		dc.w loc_16798-Obj72_Index
00018052                            ; ===========================================================================
00018052                            
00018052                            Obj72_Main:				; XREF: Obj72_Index
00018052 5428 0024                  		addq.b	#2,$24(a0)
00018056 1028 0028                  		move.b	$28(a0),d0
0001805A D040                       		add.w	d0,d0
0001805C 0240 001E                  		andi.w	#$1E,d0
00018060 45FA 0000                  		lea	Obj72_Data(pc),a2
00018064 D4F2 0000                  		adda.w	(a2,d0.w),a2
00018068 315A 003A                  		move.w	(a2)+,$3A(a0)
0001806C 214A 003C                  		move.l	a2,$3C(a0)
00018070 315A 0036                  		move.w	(a2)+,$36(a0)
00018074 315A 0038                  		move.w	(a2)+,$38(a0)
00018078                            
00018078                            loc_166C8:				; XREF: Obj72_Index
00018078 43F8 D000                  		lea	($FFFFD000).w,a1
0001807C 3029 0008                  		move.w	8(a1),d0
00018080 9068 0008                  		sub.w	8(a0),d0
00018084 0828 0000 0022             		btst	#0,$22(a0)
0001808A 6700                       		beq.s	loc_166E0
0001808C 0640 000F                  		addi.w	#$F,d0
00018090                            
00018090                            loc_166E0:
00018090 0C40 0010                  		cmpi.w	#$10,d0
00018094 6400                       		bcc.s	locret_1675C
00018096 3229 000C                  		move.w	$C(a1),d1
0001809A 9268 000C                  		sub.w	$C(a0),d1
0001809E 0641 0020                  		addi.w	#$20,d1
000180A2 0C41 0040                  		cmpi.w	#$40,d1
000180A6 6400                       		bcc.s	locret_1675C
000180A8 4A38 F7C8                  		tst.b	($FFFFF7C8).w
000180AC 6600                       		bne.s	locret_1675C
000180AE 0C28 0007 0028             		cmpi.b	#7,$28(a0)
000180B4 6600                       		bne.s	loc_1670E
000180B6 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w
000180BC 6500                       		bcs.s	locret_1675C
000180BE                            
000180BE                            loc_1670E:
000180BE 5428 0024                  		addq.b	#2,$24(a0)
000180C2 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w ; lock controls
000180C8 137C 0002 001C             		move.b	#2,$1C(a1)	; use Sonic's rolling animation
000180CE 337C 0800 0014             		move.w	#$800,$14(a1)
000180D4 337C 0000 0010             		move.w	#0,$10(a1)
000180DA 337C 0000 0012             		move.w	#0,$12(a1)
000180E0 08A8 0005 0022             		bclr	#5,$22(a0)
000180E6 08A9 0005 0022             		bclr	#5,$22(a1)
000180EC 08E9 0001 0022             		bset	#1,$22(a1)
000180F2 3368 0008 0008             		move.w	8(a0),8(a1)
000180F8 3368 000C 000C             		move.w	$C(a0),$C(a1)
000180FE 4228 0032                  		clr.b	$32(a0)
00018102 303C 00BE                  		move.w	#$BE,d0
00018106 4EB9 0000 147C             		jsr	(PlaySound_Special).l ;	play Sonic rolling sound
0001810C                            
0001810C                            locret_1675C:
0001810C 4E75                       		rts	
0001810E                            ; ===========================================================================
0001810E                            
0001810E                            loc_1675E:				; XREF: Obj72_Index
0001810E 43F8 D000                  		lea	($FFFFD000).w,a1
00018112 1028 0032                  		move.b	$32(a0),d0
00018116 5428 0032                  		addq.b	#2,$32(a0)
0001811A 4EB9 0000 33DA             		jsr	(CalcSine).l
00018120 EA40                       		asr.w	#5,d0
00018122 3428 000C                  		move.w	$C(a0),d2
00018126 9440                       		sub.w	d0,d2
00018128 3342 000C                  		move.w	d2,$C(a1)
0001812C 0C28 0080 0032             		cmpi.b	#$80,$32(a0)
00018132 6600                       		bne.s	locret_16796
00018134 6100 0000                  		bsr.w	sub_1681C
00018138 5428 0024                  		addq.b	#2,$24(a0)
0001813C 303C 00BC                  		move.w	#$BC,d0
00018140 4EB9 0000 147C             		jsr	(PlaySound_Special).l ;	play teleport sound
00018146                            
00018146                            locret_16796:
00018146 4E75                       		rts	
00018148                            ; ===========================================================================
00018148                            
00018148                            loc_16798:				; XREF: Obj72_Index
00018148 588F                       		addq.l	#4,sp
0001814A 43F8 D000                  		lea	($FFFFD000).w,a1
0001814E 5328 002E                  		subq.b	#1,$2E(a0)
00018152 6A00                       		bpl.s	loc_167DA
00018154 3368 0036 0008             		move.w	$36(a0),8(a1)
0001815A 3368 0038 000C             		move.w	$38(a0),$C(a1)
00018160 7200                       		moveq	#0,d1
00018162 1228 003A                  		move.b	$3A(a0),d1
00018166 5801                       		addq.b	#4,d1
00018168 B228 003B                  		cmp.b	$3B(a0),d1
0001816C 6500                       		bcs.s	loc_167C2
0001816E 7200                       		moveq	#0,d1
00018170 6000                       		bra.s	loc_16800
00018172                            ; ===========================================================================
00018172                            
00018172                            loc_167C2:
00018172 1141 003A                  		move.b	d1,$3A(a0)
00018176 2468 003C                  		movea.l	$3C(a0),a2
0001817A 3172 1000 0036             		move.w	(a2,d1.w),$36(a0)
00018180 3172 1002 0038             		move.w	2(a2,d1.w),$38(a0)
00018186 6000 0000                  		bra.w	sub_1681C
0001818A                            ; ===========================================================================
0001818A                            
0001818A                            loc_167DA:
0001818A 2429 0008                  		move.l	8(a1),d2
0001818E 2629 000C                  		move.l	$C(a1),d3
00018192 3029 0010                  		move.w	$10(a1),d0
00018196 48C0                       		ext.l	d0
00018198 E180                       		asl.l	#8,d0
0001819A D480                       		add.l	d0,d2
0001819C 3029 0012                  		move.w	$12(a1),d0
000181A0 48C0                       		ext.l	d0
000181A2 E180                       		asl.l	#8,d0
000181A4 D680                       		add.l	d0,d3
000181A6 2342 0008                  		move.l	d2,8(a1)
000181AA 2343 000C                  		move.l	d3,$C(a1)
000181AE 4E75                       		rts	
000181B0                            ; ===========================================================================
000181B0                            
000181B0                            loc_16800:
000181B0 0269 07FF 000C             		andi.w	#$7FF,$C(a1)
000181B6 4228 0024                  		clr.b	$24(a0)
000181BA 4238 F7C8                  		clr.b	($FFFFF7C8).w
000181BE 337C 0000 0010             		move.w	#0,$10(a1)
000181C4 337C 0200 0012             		move.w	#$200,$12(a1)
000181CA 4E75                       		rts	
000181CC                            
000181CC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000181CC                            
000181CC                            
000181CC                            sub_1681C:
000181CC 7000                       		moveq	#0,d0
000181CE 343C 1000                  		move.w	#$1000,d2
000181D2 3028 0036                  		move.w	$36(a0),d0
000181D6 9069 0008                  		sub.w	8(a1),d0
000181DA 6C00                       		bge.s	loc_16830
000181DC 4440                       		neg.w	d0
000181DE 4442                       		neg.w	d2
000181E0                            
000181E0                            loc_16830:
000181E0 7200                       		moveq	#0,d1
000181E2 363C 1000                  		move.w	#$1000,d3
000181E6 3228 0038                  		move.w	$38(a0),d1
000181EA 9269 000C                  		sub.w	$C(a1),d1
000181EE 6C00                       		bge.s	loc_16844
000181F0 4441                       		neg.w	d1
000181F2 4443                       		neg.w	d3
000181F4                            
000181F4                            loc_16844:
000181F4 B240                       		cmp.w	d0,d1
000181F6 6500                       		bcs.s	loc_1687A
000181F8 7200                       		moveq	#0,d1
000181FA 3228 0038                  		move.w	$38(a0),d1
000181FE 9269 000C                  		sub.w	$C(a1),d1
00018202 4841                       		swap	d1
00018204 83C3                       		divs.w	d3,d1
00018206 7000                       		moveq	#0,d0
00018208 3028 0036                  		move.w	$36(a0),d0
0001820C 9069 0008                  		sub.w	8(a1),d0
00018210 6700                       		beq.s	loc_16866
00018212 4840                       		swap	d0
00018214 81C1                       		divs.w	d1,d0
00018216                            
00018216                            loc_16866:
00018216 3340 0010                  		move.w	d0,$10(a1)
0001821A 3343 0012                  		move.w	d3,$12(a1)
0001821E 4A41                       		tst.w	d1
00018220 6A00                       		bpl.s	loc_16874
00018222 4441                       		neg.w	d1
00018224                            
00018224                            loc_16874:
00018224 3141 002E                  		move.w	d1,$2E(a0)
00018228 4E75                       		rts	
0001822A                            ; ===========================================================================
0001822A                            
0001822A                            loc_1687A:
0001822A 7000                       		moveq	#0,d0
0001822C 3028 0036                  		move.w	$36(a0),d0
00018230 9069 0008                  		sub.w	8(a1),d0
00018234 4840                       		swap	d0
00018236 81C2                       		divs.w	d2,d0
00018238 7200                       		moveq	#0,d1
0001823A 3228 0038                  		move.w	$38(a0),d1
0001823E 9269 000C                  		sub.w	$C(a1),d1
00018242 6700                       		beq.s	loc_16898
00018244 4841                       		swap	d1
00018246 83C0                       		divs.w	d0,d1
00018248                            
00018248                            loc_16898:
00018248 3341 0012                  		move.w	d1,$12(a1)
0001824C 3342 0010                  		move.w	d2,$10(a1)
00018250 4A40                       		tst.w	d0
00018252 6A00                       		bpl.s	loc_168A6
00018254 4440                       		neg.w	d0
00018256                            
00018256                            loc_168A6:
00018256 3140 002E                  		move.w	d0,$2E(a0)
0001825A 4E75                       		rts	
0001825C                            ; End of function sub_1681C
0001825C                            
0001825C                            ; ===========================================================================
0001825C 0000 0000 0000             Obj72_Data:	dc.w word_168BC-Obj72_Data, word_168C2-Obj72_Data, word_168C8-Obj72_Data
00018262 0000 0000 0000             		dc.w word_168E6-Obj72_Data, word_168EC-Obj72_Data, word_1690A-Obj72_Data
00018268 0000 0000                  		dc.w word_16910-Obj72_Data, word_1692E-Obj72_Data
0001826C 0004 0794 098C             word_168BC:	dc.w 4,	$794, $98C
00018272 0004 0094 038C             word_168C2:	dc.w 4,	$94, $38C
00018278 001C 0794 02E8             word_168C8:	dc.w $1C, $794,	$2E8
0001827E 07A4 02C0 07D0             		dc.w $7A4, $2C0, $7D0
00018284 02AC 0858 02AC             		dc.w $2AC, $858, $2AC
0001828A 0884 0298 0894             		dc.w $884, $298, $894
00018290 0270 0894 0190             		dc.w $270, $894, $190
00018296 0004 0894 0690             word_168E6:	dc.w 4,	$894, $690
0001829C 001C 1194 0470             word_168EC:	dc.w $1C, $1194, $470
000182A2 1184 0498 1158             		dc.w $1184, $498, $1158
000182A8 04AC 0FD0 04AC             		dc.w $4AC, $FD0, $4AC
000182AE 0FA4 04C0 0F94             		dc.w $FA4, $4C0, $F94
000182B4 04E8 0F94 0590             		dc.w $4E8, $F94, $590
000182BA 0004 1294 0490             word_1690A:	dc.w 4,	$1294, $490
000182C0 001C 1594 FFE8             word_16910:	dc.w $1C, $1594, $FFE8
000182C6 1584 FFC0 1560             		dc.w $1584, $FFC0, $1560
000182CC FFAC 14D0 FFAC             		dc.w $FFAC, $14D0, $FFAC
000182D2 14A4 FF98 1494             		dc.w $14A4, $FF98, $1494
000182D8 FF70 1494 FD90             		dc.w $FF70, $1494, $FD90
000182DE 0004 0894 0090             word_1692E:	dc.w 4,	$894, $90
000182E4                            ; ===========================================================================
000182E4                            ; ---------------------------------------------------------------------------
000182E4                            ; Object 78 - Caterkiller enemy	(MZ, SBZ)
000182E4                            ; ---------------------------------------------------------------------------
000182E4                            
000182E4                            Obj78:					; XREF: Obj_Index
000182E4 7000                       		moveq	#0,d0
000182E6 1028 0024                  		move.b	$24(a0),d0
000182EA 323B 0000                  		move.w	Obj78_Index(pc,d0.w),d1
000182EE 4EFB 1000                  		jmp	Obj78_Index(pc,d1.w)
000182F2                            ; ===========================================================================
000182F2 0000                       Obj78_Index:	dc.w Obj78_Main-Obj78_Index
000182F4 0000                       		dc.w Obj78_Action-Obj78_Index
000182F6 0000                       		dc.w Obj78_BodySeg1-Obj78_Index
000182F8 0000                       		dc.w Obj78_BodySeg2-Obj78_Index
000182FA 0000                       		dc.w Obj78_BodySeg1-Obj78_Index
000182FC 0000                       		dc.w Obj78_Delete-Obj78_Index
000182FE 0000                       		dc.w loc_16CC0-Obj78_Index
00018300                            ; ===========================================================================
00018300                            
00018300                            locret_16950:
00018300 4E75                       		rts	
00018302                            ; ===========================================================================
00018302                            
00018302                            Obj78_Main:				; XREF: Obj78_Index
00018302 117C 0007 0016             		move.b	#7,$16(a0)
00018308 117C 0008 0017             		move.b	#8,$17(a0)
0001830E 4EB9 0000 E092             		jsr	ObjectFall
00018314 4EBA E4B0                  		jsr	ObjHitFloor
00018318 4A41                       		tst.w	d1
0001831A 6AE4                       		bpl.s	locret_16950
0001831C D368 000C                  		add.w	d1,$C(a0)
00018320 4268 0012                  		clr.w	$12(a0)
00018324 5428 0024                  		addq.b	#2,$24(a0)
00018328 217C 0000 0000 0004        		move.l	#Map_obj78,4(a0)
00018330 317C 22B0 0002             		move.w	#$22B0,2(a0)
00018336 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; if level is SBZ, branch
0001833C 6700                       		beq.s	loc_16996
0001833E 317C 24FF 0002             		move.w	#$24FF,2(a0)	; MZ specific code
00018344                            
00018344                            loc_16996:
00018344 0228 0003 0001             		andi.b	#3,1(a0)
0001834A 0028 0004 0001             		ori.b	#4,1(a0)
00018350 1168 0001 0022             		move.b	1(a0),$22(a0)
00018356 117C 0004 0018             		move.b	#4,$18(a0)
0001835C 117C 0008 0019             		move.b	#8,$19(a0)
00018362 117C 000B 0020             		move.b	#$B,$20(a0)
00018368 3428 0008                  		move.w	8(a0),d2
0001836C 7A0C                       		moveq	#$C,d5
0001836E 0828 0000 0022             		btst	#0,$22(a0)
00018374 6700                       		beq.s	loc_169CA
00018376 4445                       		neg.w	d5
00018378                            
00018378                            loc_169CA:
00018378 1C3C 0004                  		move.b	#4,d6
0001837C 7600                       		moveq	#0,d3
0001837E 7804                       		moveq	#4,d4
00018380 2448                       		movea.l	a0,a2
00018382 7202                       		moveq	#2,d1
00018384                            
00018384                            Obj78_LoadBody:
00018384 4EB9 0000 E590             		jsr	SingleObjLoad2
0001838A 6600                       		bne.s	Obj78_QuitLoad
0001838C 12BC 0078                  		move.b	#$78,0(a1)	; load body segment object
00018390 1346 0024                  		move.b	d6,$24(a1)
00018394 5406                       		addq.b	#2,d6
00018396 2368 0004 0004             		move.l	4(a0),4(a1)
0001839C 3368 0002 0002             		move.w	2(a0),2(a1)
000183A2 137C 0005 0018             		move.b	#5,$18(a1)
000183A8 137C 0008 0019             		move.b	#8,$19(a1)
000183AE 137C 00CB 0020             		move.b	#$CB,$20(a1)
000183B4 D445                       		add.w	d5,d2
000183B6 3342 0008                  		move.w	d2,8(a1)
000183BA 3368 000C 000C             		move.w	$C(a0),$C(a1)
000183C0 1368 0022 0022             		move.b	$22(a0),$22(a1)
000183C6 1368 0022 0001             		move.b	$22(a0),1(a1)
000183CC 137C 0008 001A             		move.b	#8,$1A(a1)
000183D2 234A 003C                  		move.l	a2,$3C(a1)
000183D6 1344 003C                  		move.b	d4,$3C(a1)
000183DA 5804                       		addq.b	#4,d4
000183DC 2449                       		movea.l	a1,a2
000183DE                            
000183DE                            Obj78_QuitLoad:
000183DE 51C9 FFA4                  		dbf	d1,Obj78_LoadBody ; repeat sequence 2 more times
000183E2                            
000183E2 117C 0007 002A             		move.b	#7,$2A(a0)
000183E8 4228 003C                  		clr.b	$3C(a0)
000183EC                            
000183EC                            Obj78_Action:				; XREF: Obj78_Index
000183EC 4A28 0022                  		tst.b	$22(a0)
000183F0 6B00 0000                  		bmi.w	loc_16C96
000183F4 7000                       		moveq	#0,d0
000183F6 1028 0025                  		move.b	$25(a0),d0
000183FA 323B 0000                  		move.w	Obj78_Index2(pc,d0.w),d1
000183FE 4EBB 1000                  		jsr	Obj78_Index2(pc,d1.w)
00018402 1228 002B                  		move.b	$2B(a0),d1
00018406 6A00                       		bpl.s	Obj78_Display
00018408 43F9 0000 0000             		lea	(Ani_obj78).l,a1
0001840E 1028 0026                  		move.b	$26(a0),d0
00018412 0240 007F                  		andi.w	#$7F,d0
00018416 5828 0026                  		addq.b	#4,$26(a0)
0001841A 1031 0000                  		move.b	(a1,d0.w),d0
0001841E 6A00                       		bpl.s	Obj78_AniHead
00018420 08A8 0007 002B             		bclr	#7,$2B(a0)
00018426 6000                       		bra.s	Obj78_Display
00018428                            ; ===========================================================================
00018428                            
00018428                            Obj78_AniHead:
00018428 0201 0010                  		andi.b	#$10,d1
0001842C D001                       		add.b	d1,d0
0001842E 1140 001A                  		move.b	d0,$1A(a0)
00018432                            
00018432                            Obj78_Display:
00018432 3028 0008                  		move.w	8(a0),d0
00018436 0240 FF80                  		andi.w	#$FF80,d0
0001843A 3238 F700                  		move.w	($FFFFF700).w,d1
0001843E 0441 0080                  		subi.w	#$80,d1
00018442 0241 FF80                  		andi.w	#$FF80,d1
00018446 9041                       		sub.w	d1,d0
00018448 0C40 0280                  		cmpi.w	#$280,d0
0001844C 6200 0000                  		bhi.w	Obj78_ChkGone
00018450 4EF9 0000 E0E4             		jmp	DisplaySprite
00018456                            ; ===========================================================================
00018456                            
00018456                            Obj78_ChkGone:
00018456 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001845A 7000                       		moveq	#0,d0
0001845C 1028 0023                  		move.b	$23(a0),d0
00018460 6700                       		beq.s	loc_16ABC
00018462 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00018468                            
00018468                            loc_16ABC:
00018468 117C 000A 0024             		move.b	#$A,$24(a0)	; run "Obj78_Delete" routine
0001846E 4E75                       		rts	
00018470                            ; ===========================================================================
00018470                            
00018470                            Obj78_Delete:				; XREF: Obj78_Index
00018470 4EF9 0000 E120             		jmp	DeleteObject
00018476                            ; ===========================================================================
00018476 0000                       Obj78_Index2:	dc.w Obj78_Move-Obj78_Index2
00018478 0000                       		dc.w loc_16B02-Obj78_Index2
0001847A                            ; ===========================================================================
0001847A                            
0001847A                            Obj78_Move:				; XREF: Obj78_Index2
0001847A 5328 002A                  		subq.b	#1,$2A(a0)
0001847E 6B00                       		bmi.s	Obj78_Move2
00018480 4E75                       		rts	
00018482                            ; ===========================================================================
00018482                            
00018482                            Obj78_Move2:
00018482 5428 0025                  		addq.b	#2,$25(a0)
00018486 117C 0010 002A             		move.b	#$10,$2A(a0)
0001848C 317C FF40 0010             		move.w	#-$C0,$10(a0)
00018492 317C 0040 0014             		move.w	#$40,$14(a0)
00018498 0868 0004 002B             		bchg	#4,$2B(a0)
0001849E 6600                       		bne.s	loc_16AFC
000184A0 4268 0010                  		clr.w	$10(a0)
000184A4 4468 0014                  		neg.w	$14(a0)
000184A8                            
000184A8                            loc_16AFC:
000184A8 08E8 0007 002B             		bset	#7,$2B(a0)
000184AE                            
000184AE                            loc_16B02:				; XREF: Obj78_Index2
000184AE 5328 002A                  		subq.b	#1,$2A(a0)
000184B2 6B00                       		bmi.s	loc_16B5E
000184B4 2F28 0008                  		move.l	8(a0),-(sp)
000184B8 2428 0008                  		move.l	8(a0),d2
000184BC 3028 0010                  		move.w	$10(a0),d0
000184C0 0828 0000 0022             		btst	#0,$22(a0)
000184C6 6700                       		beq.s	loc_16B1E
000184C8 4440                       		neg.w	d0
000184CA                            
000184CA                            loc_16B1E:
000184CA 48C0                       		ext.l	d0
000184CC E180                       		asl.l	#8,d0
000184CE D480                       		add.l	d0,d2
000184D0 2142 0008                  		move.l	d2,8(a0)
000184D4 4EBA E2F0                  		jsr	ObjHitFloor
000184D8 241F                       		move.l	(sp)+,d2
000184DA 0C41 FFF8                  		cmpi.w	#-8,d1
000184DE 6D00                       		blt.s	loc_16B70
000184E0 0C41 000C                  		cmpi.w	#$C,d1
000184E4 6C00                       		bge.s	loc_16B70
000184E6 D368 000C                  		add.w	d1,$C(a0)
000184EA 4842                       		swap	d2
000184EC B468 0008                  		cmp.w	8(a0),d2
000184F0 6700                       		beq.s	locret_16B5C
000184F2 7000                       		moveq	#0,d0
000184F4 1028 003C                  		move.b	$3C(a0),d0
000184F8 5228 003C                  		addq.b	#1,$3C(a0)
000184FC 0228 000F 003C             		andi.b	#$F,$3C(a0)
00018502 1181 002C                  		move.b	d1,$2C(a0,d0.w)
00018506                            
00018506                            locret_16B5C:
00018506 4E75                       		rts	
00018508                            ; ===========================================================================
00018508                            
00018508                            loc_16B5E:
00018508 5528 0025                  		subq.b	#2,$25(a0)
0001850C 117C 0007 002A             		move.b	#7,$2A(a0)
00018512 317C 0000 0010             		move.w	#0,$10(a0)
00018518 4E75                       		rts	
0001851A                            ; ===========================================================================
0001851A                            
0001851A                            loc_16B70:
0001851A 2142 0008                  		move.l	d2,8(a0)
0001851E 0868 0000 0022             		bchg	#0,$22(a0)
00018524 1168 0022 0001             		move.b	$22(a0),1(a0)
0001852A 7000                       		moveq	#0,d0
0001852C 1028 003C                  		move.b	$3C(a0),d0
00018530 11BC 0080 002C             		move.b	#$80,$2C(a0,d0.w)
00018536 5228 003C                  		addq.b	#1,$3C(a0)
0001853A 0228 000F 003C             		andi.b	#$F,$3C(a0)
00018540 4E75                       		rts	
00018542                            ; ===========================================================================
00018542                            
00018542                            Obj78_BodySeg2:				; XREF: Obj78_Index
00018542 2268 003C                  		movea.l	$3C(a0),a1
00018546 1169 002B 002B             		move.b	$2B(a1),$2B(a0)
0001854C 6A00                       		bpl.s	Obj78_BodySeg1
0001854E 43F9 0000 0000             		lea	(Ani_obj78).l,a1
00018554 1028 0026                  		move.b	$26(a0),d0
00018558 0240 007F                  		andi.w	#$7F,d0
0001855C 5828 0026                  		addq.b	#4,$26(a0)
00018560 4A31 0004                  		tst.b	4(a1,d0.w)
00018564 6A00                       		bpl.s	Obj78_AniBody
00018566 5828 0026                  		addq.b	#4,$26(a0)
0001856A                            
0001856A                            Obj78_AniBody:
0001856A 1031 0000                  		move.b	(a1,d0.w),d0
0001856E 5000                       		addq.b	#8,d0
00018570 1140 001A                  		move.b	d0,$1A(a0)
00018574                            
00018574                            Obj78_BodySeg1:				; XREF: Obj78_Index
00018574 2268 003C                  		movea.l	$3C(a0),a1
00018578 4A28 0022                  		tst.b	$22(a0)
0001857C 6B00 0000                  		bmi.w	loc_16C90
00018580 1169 002B 002B             		move.b	$2B(a1),$2B(a0)
00018586 1169 0025 0025             		move.b	$25(a1),$25(a0)
0001858C 6700 0000                  		beq.w	loc_16C64
00018590 3169 0014 0014             		move.w	$14(a1),$14(a0)
00018596 3029 0010                  		move.w	$10(a1),d0
0001859A D069 0014                  		add.w	$14(a1),d0
0001859E 3140 0010                  		move.w	d0,$10(a0)
000185A2 2428 0008                  		move.l	8(a0),d2
000185A6 2602                       		move.l	d2,d3
000185A8 3028 0010                  		move.w	$10(a0),d0
000185AC 0828 0000 0022             		btst	#0,$22(a0)
000185B2 6700                       		beq.s	loc_16C0C
000185B4 4440                       		neg.w	d0
000185B6                            
000185B6                            loc_16C0C:
000185B6 48C0                       		ext.l	d0
000185B8 E180                       		asl.l	#8,d0
000185BA D480                       		add.l	d0,d2
000185BC 2142 0008                  		move.l	d2,8(a0)
000185C0 4843                       		swap	d3
000185C2 B668 0008                  		cmp.w	8(a0),d3
000185C6 6700                       		beq.s	loc_16C64
000185C8 7000                       		moveq	#0,d0
000185CA 1028 003C                  		move.b	$3C(a0),d0
000185CE 1231 002C                  		move.b	$2C(a1,d0.w),d1
000185D2 0C01 0080                  		cmpi.b	#-$80,d1
000185D6 6600                       		bne.s	loc_16C50
000185D8 4843                       		swap	d3
000185DA 2143 0008                  		move.l	d3,8(a0)
000185DE 1181 002C                  		move.b	d1,$2C(a0,d0.w)
000185E2 0868 0000 0022             		bchg	#0,$22(a0)
000185E8 1168 0022 0001             		move.b	$22(a0),1(a0)
000185EE 5228 003C                  		addq.b	#1,$3C(a0)
000185F2 0228 000F 003C             		andi.b	#$F,$3C(a0)
000185F8 6000                       		bra.s	loc_16C64
000185FA                            ; ===========================================================================
000185FA                            
000185FA                            loc_16C50:
000185FA 4881                       		ext.w	d1
000185FC D368 000C                  		add.w	d1,$C(a0)
00018600 5228 003C                  		addq.b	#1,$3C(a0)
00018604 0228 000F 003C             		andi.b	#$F,$3C(a0)
0001860A 1181 002C                  		move.b	d1,$2C(a0,d0.w)
0001860E                            
0001860E                            loc_16C64:
0001860E 0C29 000C 0024             		cmpi.b	#$C,$24(a1)
00018614 6700                       		beq.s	loc_16C90
00018616 0C11 0027                  		cmpi.b	#$27,0(a1)
0001861A 6700                       		beq.s	loc_16C7C
0001861C 0C29 000A 0024             		cmpi.b	#$A,$24(a1)
00018622 6600                       		bne.s	loc_16C82
00018624                            
00018624                            loc_16C7C:
00018624 4229 0020                  		clr.b	$20(a1)	; immediately remove all touch response values when destroying the head to avoid taking damage
00018628 117C 000A 0024             		move.b	#$A,$24(a0)
0001862E                            
0001862E                            loc_16C82:
0001862E 4EF9 0000 E0E4             		jmp	DisplaySprite
00018634                            
00018634                            ; ===========================================================================
00018634 FE00 FE80 0180 0200        Obj78_FragSpeed:dc.w $FE00, $FE80, $180, $200
0001863C                            ; ===========================================================================
0001863C                            
0001863C                            loc_16C90:
0001863C 08E9 0007 0022             		bset	#7,$22(a1)
00018642                            
00018642                            loc_16C96:
00018642 7000                       		moveq	#0,d0
00018644 1028 0024                  		move.b	$24(a0),d0
00018648 303B 00E8                  		move.w	Obj78_FragSpeed-2(pc,d0.w),d0
0001864C 0828 0000 0022             		btst	#0,$22(a0)
00018652 6700                       		beq.s	loc_16CAA
00018654 4440                       		neg.w	d0
00018656                            
00018656                            loc_16CAA:
00018656 3140 0010                  		move.w	d0,$10(a0)
0001865A 317C FC00 0012             		move.w	#-$400,$12(a0)
00018660 117C 000C 0024             		move.b	#$C,$24(a0)
00018666 0228 00F8 001A             		andi.b	#-8,$1A(a0)
0001866C                            
0001866C                            loc_16CC0:				; XREF: Obj78_Index
0001866C 4EB9 0000 E092             		jsr	ObjectFall
00018672 4A68 0012                  		tst.w	$12(a0)
00018676 6B00                       		bmi.s	loc_16CE0
00018678 4EBA E14C                  		jsr	ObjHitFloor
0001867C 4A41                       		tst.w	d1
0001867E 6A00                       		bpl.s	loc_16CE0
00018680 D368 000C                  		add.w	d1,$C(a0)
00018684 317C FC00 0012             		move.w	#-$400,$12(a0)
0001868A                            
0001868A                            loc_16CE0:
0001868A 4A28 0001                  		tst.b	1(a0)
0001868E 6A00 FDC6                  		bpl.w	Obj78_ChkGone
00018692 4EF9 0000 E0E4             		jmp	DisplaySprite
00018698                            ; ===========================================================================
00018698                            Ani_obj78:
00018698                            	include "_anim\obj78.asm"
00018698                            ; ---------------------------------------------------------------------------
00018698                            ; Animation script - Caterkiller enemy (uses non-standard format)
00018698                            ; ---------------------------------------------------------------------------
00018698 0000 0000 0000 0000 0000+  	dc.b 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 1
000186A8 0101 0101 0101 0202 0202+  	dc.b 1,	1, 1, 1, 1, 1, 2, 2, 2,	2, 2, 3, 3, 3, 3, 3
000186B8 0404 0404 0404 0505 0505+  	dc.b 4,	4, 4, 4, 4, 4, 5, 5, 5,	5, 5, 6, 6, 6, 6, 6
000186C8 0606 0707 0707 0707 0707+  	dc.b 6,	6, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, $FF, 7, 7, $FF
000186D8 0707 0707 0707 0707 0707+  	dc.b 7,	7, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, 7, 7, 7, 6
000186E8 0606 0606 0606 0505 0505+  	dc.b 6,	6, 6, 6, 6, 6, 5, 5, 5,	5, 5, 4, 4, 4, 4, 4
000186F8 0403 0303 0303 0202 0202+  	dc.b 4,	3, 3, 3, 3, 3, 2, 2, 2,	2, 2, 1, 1, 1, 1, 1
00018708 0101 0000 0000 0000 0000+  	dc.b 1,	1, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, $FF, 0, 0, $FF
00018718                            	even
00018718                            	even
00018718                            
00018718                            ; ---------------------------------------------------------------------------
00018718                            ; Sprite mappings - Caterkiller	enemy (MZ, SBZ)
00018718                            ; ---------------------------------------------------------------------------
00018718                            Map_obj78:
00018718                            	include "_maps\obj78.asm"
00018718                            ; ---------------------------------------------------------------------------
00018718                            ; Sprite mappings - Caterkiller	enemy (MZ, SBZ)
00018718                            ; ---------------------------------------------------------------------------
00018718 0000 0000                  		dc.w byte_16D9E-Map_obj78, byte_16DA4-Map_obj78
0001871C 0000 0000                  		dc.w byte_16DAA-Map_obj78, byte_16DB0-Map_obj78
00018720 0000 0000                  		dc.w byte_16DB6-Map_obj78, byte_16DBC-Map_obj78
00018724 0000 0000                  		dc.w byte_16DC2-Map_obj78, byte_16DC8-Map_obj78
00018728 0000 0000                  		dc.w byte_16DCE-Map_obj78, byte_16DD4-Map_obj78
0001872C 0000 0000                  		dc.w byte_16DDA-Map_obj78, byte_16DE0-Map_obj78
00018730 0000 0000                  		dc.w byte_16DE6-Map_obj78, byte_16DEC-Map_obj78
00018734 0000 0000                  		dc.w byte_16DF2-Map_obj78, byte_16DF8-Map_obj78
00018738 0000 0000                  		dc.w byte_16DFE-Map_obj78, byte_16E04-Map_obj78
0001873C 0000 0000                  		dc.w byte_16E0A-Map_obj78, byte_16E10-Map_obj78
00018740 0000 0000                  		dc.w byte_16E16-Map_obj78, byte_16E1C-Map_obj78
00018744 0000 0000                  		dc.w byte_16E22-Map_obj78, byte_16E28-Map_obj78
00018748 01                         byte_16D9E:	dc.b 1
00018749 F206 0000 F8               		dc.b $F2, 6, 0,	0, $F8
0001874E 01                         byte_16DA4:	dc.b 1
0001874F F106 0000 F8               		dc.b $F1, 6, 0,	0, $F8
00018754 01                         byte_16DAA:	dc.b 1
00018755 F006 0000 F8               		dc.b $F0, 6, 0,	0, $F8
0001875A 01                         byte_16DB0:	dc.b 1
0001875B EF06 0000 F8               		dc.b $EF, 6, 0,	0, $F8
00018760 01                         byte_16DB6:	dc.b 1
00018761 EE06 0000 F8               		dc.b $EE, 6, 0,	0, $F8
00018766 01                         byte_16DBC:	dc.b 1
00018767 ED06 0000 F8               		dc.b $ED, 6, 0,	0, $F8
0001876C 01                         byte_16DC2:	dc.b 1
0001876D EC06 0000 F8               		dc.b $EC, 6, 0,	0, $F8
00018772 01                         byte_16DC8:	dc.b 1
00018773 EB06 0000 F8               		dc.b $EB, 6, 0,	0, $F8
00018778 01                         byte_16DCE:	dc.b 1
00018779 F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
0001877E 01                         byte_16DD4:	dc.b 1
0001877F F705 000C F8               		dc.b $F7, 5, 0,	$C, $F8
00018784 01                         byte_16DDA:	dc.b 1
00018785 F605 000C F8               		dc.b $F6, 5, 0,	$C, $F8
0001878A 01                         byte_16DE0:	dc.b 1
0001878B F505 000C F8               		dc.b $F5, 5, 0,	$C, $F8
00018790 01                         byte_16DE6:	dc.b 1
00018791 F405 000C F8               		dc.b $F4, 5, 0,	$C, $F8
00018796 01                         byte_16DEC:	dc.b 1
00018797 F305 000C F8               		dc.b $F3, 5, 0,	$C, $F8
0001879C 01                         byte_16DF2:	dc.b 1
0001879D F205 000C F8               		dc.b $F2, 5, 0,	$C, $F8
000187A2 01                         byte_16DF8:	dc.b 1
000187A3 F105 000C F8               		dc.b $F1, 5, 0,	$C, $F8
000187A8 01                         byte_16DFE:	dc.b 1
000187A9 F206 0006 F8               		dc.b $F2, 6, 0,	6, $F8
000187AE 01                         byte_16E04:	dc.b 1
000187AF F106 0006 F8               		dc.b $F1, 6, 0,	6, $F8
000187B4 01                         byte_16E0A:	dc.b 1
000187B5 F006 0006 F8               		dc.b $F0, 6, 0,	6, $F8
000187BA 01                         byte_16E10:	dc.b 1
000187BB EF06 0006 F8               		dc.b $EF, 6, 0,	6, $F8
000187C0 01                         byte_16E16:	dc.b 1
000187C1 EE06 0006 F8               		dc.b $EE, 6, 0,	6, $F8
000187C6 01                         byte_16E1C:	dc.b 1
000187C7 ED06 0006 F8               		dc.b $ED, 6, 0,	6, $F8
000187CC 01                         byte_16E22:	dc.b 1
000187CD EC06 0006 F8               		dc.b $EC, 6, 0,	6, $F8
000187D2 01                         byte_16E28:	dc.b 1
000187D3 EB06 0006 F8               		dc.b $EB, 6, 0,	6, $F8
000187D8                            		even
000187D8                            		even
000187D8                            
000187D8                            ; ===========================================================================
000187D8                            ; ---------------------------------------------------------------------------
000187D8                            ; Object 79 - lamppost
000187D8                            ; ---------------------------------------------------------------------------
000187D8                            
000187D8                            Obj79:					; XREF: Obj_Index
000187D8 7000                       		moveq	#0,d0
000187DA 1028 0024                  		move.b	$24(a0),d0
000187DE 323B 0000                  		move.w	Obj79_Index(pc,d0.w),d1
000187E2 4EBB 1000                  		jsr	Obj79_Index(pc,d1.w)
000187E6 4EF9 0001 01A6             		jmp	MarkObjGone
000187EC                            ; ===========================================================================
000187EC 0000                       Obj79_Index:	dc.w Obj79_Main-Obj79_Index
000187EE 0000                       		dc.w Obj79_BlueLamp-Obj79_Index
000187F0 0000                       		dc.w Obj79_AfterHit-Obj79_Index
000187F2 0000                       		dc.w Obj79_Twirl-Obj79_Index
000187F4                            ; ===========================================================================
000187F4                            
000187F4                            Obj79_Main:				; XREF: Obj79_Index
000187F4 5428 0024                  		addq.b	#2,$24(a0)
000187F8 217C 0000 0000 0004        		move.l	#Map_obj79,4(a0)
00018800 317C 06C0 0002             		move.w	#($D800/$20),2(a0)
00018806 117C 0004 0001             		move.b	#4,1(a0)
0001880C 117C 0008 0019             		move.b	#8,$19(a0)
00018812 117C 0005 0018             		move.b	#5,$18(a0)
00018818 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001881C 7000                       		moveq	#0,d0
0001881E 1028 0023                  		move.b	$23(a0),d0
00018822 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00018828 0832 0000 0002             		btst	#0,2(a2,d0.w)
0001882E 6600                       		bne.s	Obj79_RedLamp
00018830 1238 FE30                  		move.b	($FFFFFE30).w,d1
00018834 0201 007F                  		andi.b	#$7F,d1
00018838 1428 0028                  		move.b	$28(a0),d2	; get lamppost number
0001883C 0202 007F                  		andi.b	#$7F,d2
00018840 B202                       		cmp.b	d2,d1		; is lamppost number higher than the number hit?
00018842 6500                       		bcs.s	Obj79_BlueLamp	; if yes, branch
00018844                            
00018844                            Obj79_RedLamp:
00018844 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0001884A 117C 0004 0024             		move.b	#4,$24(a0)	; run "Obj79_AfterHit" routine
00018850 117C 0003 001A             		move.b	#3,$1A(a0)	; use red lamppost frame
00018856 4E75                       		rts	
00018858                            ; ===========================================================================
00018858                            
00018858                            Obj79_BlueLamp:				; XREF: Obj79_Index
00018858 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
0001885C 6600 0000                  		bne.w	locret_16F90	; if yes, branch
00018860 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00018864 6B00 0000                  		bmi.w	locret_16F90
00018868 1238 FE30                  		move.b	($FFFFFE30).w,d1
0001886C 0201 007F                  		andi.b	#$7F,d1
00018870 1428 0028                  		move.b	$28(a0),d2
00018874 0202 007F                  		andi.b	#$7F,d2
00018878 B202                       		cmp.b	d2,d1
0001887A 6500                       		bcs.s	Obj79_HitLamp
0001887C 45F8 FC00                  		lea	($FFFFFC00).w,a2
00018880 7000                       		moveq	#0,d0
00018882 1028 0023                  		move.b	$23(a0),d0
00018886 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0001888C 117C 0004 0024             		move.b	#4,$24(a0)
00018892 117C 0003 001A             		move.b	#3,$1A(a0)
00018898 6000 0000                  		bra.w	locret_16F90
0001889C                            ; ===========================================================================
0001889C                            
0001889C                            Obj79_HitLamp:
0001889C 3038 D008                  		move.w	($FFFFD008).w,d0
000188A0 9068 0008                  		sub.w	8(a0),d0
000188A4 5040                       		addq.w	#8,d0
000188A6 0C40 0010                  		cmpi.w	#$10,d0
000188AA 6400 0000                  		bcc.w	locret_16F90
000188AE 3038 D00C                  		move.w	($FFFFD00C).w,d0
000188B2 9068 000C                  		sub.w	$C(a0),d0
000188B6 0640 0040                  		addi.w	#$40,d0
000188BA 0C40 0068                  		cmpi.w	#$68,d0
000188BE 6400                       		bcc.s	locret_16F90
000188C0 303C 00A1                  		move.w	#$A1,d0
000188C4 4EB9 0000 147C             		jsr	(PlaySound_Special).l ;	play lamppost sound
000188CA 5428 0024                  		addq.b	#2,$24(a0)
000188CE 4EB9 0000 E57A             		jsr	SingleObjLoad
000188D4 6600                       		bne.s	loc_16F76
000188D6 12BC 0079                  		move.b	#$79,0(a1)	; load twirling	lamp object
000188DA 137C 0006 0024             		move.b	#6,$24(a1)	; use "Obj79_Twirl" routine
000188E0 3368 0008 0030             		move.w	8(a0),$30(a1)
000188E6 3368 000C 0032             		move.w	$C(a0),$32(a1)
000188EC 0469 0018 0032             		subi.w	#$18,$32(a1)
000188F2 237C 0000 0000 0004        		move.l	#Map_obj79,4(a1)
000188FA 337C 06C0 0002             		move.w	#($D800/$20),2(a1)
00018900 137C 0004 0001             		move.b	#4,1(a1)
00018906 137C 0008 0019             		move.b	#8,$19(a1)
0001890C 137C 0004 0018             		move.b	#4,$18(a1)
00018912 137C 0002 001A             		move.b	#2,$1A(a1)
00018918 337C 0020 0036             		move.w	#$20,$36(a1)
0001891E                            
0001891E                            loc_16F76:
0001891E 117C 0001 001A             		move.b	#1,$1A(a0)	; use "post only" frame, with no lamp
00018924 6100 0000                  		bsr.w	Obj79_StoreInfo
00018928 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001892C 7000                       		moveq	#0,d0
0001892E 1028 0023                  		move.b	$23(a0),d0
00018932 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00018938                            
00018938                            locret_16F90:
00018938 4E75                       		rts	
0001893A                            ; ===========================================================================
0001893A                            
0001893A                            Obj79_AfterHit:				; XREF: Obj79_Index
0001893A 4E75                       		rts	
0001893C                            ; ===========================================================================
0001893C                            
0001893C                            Obj79_Twirl:				; XREF: Obj79_Index
0001893C 5368 0036                  		subq.w	#1,$36(a0)
00018940 6A00                       		bpl.s	loc_16FA0
00018942 117C 0004 0024             		move.b	#4,$24(a0)
00018948                            
00018948                            loc_16FA0:
00018948 1028 0026                  		move.b	$26(a0),d0
0001894C 0428 0010 0026             		subi.b	#$10,$26(a0)
00018952 0400 0040                  		subi.b	#$40,d0
00018956 4EB9 0000 33DA             		jsr	(CalcSine).l
0001895C C3FC 0C00                  		muls.w	#$C00,d1
00018960 4841                       		swap	d1
00018962 D268 0030                  		add.w	$30(a0),d1
00018966 3141 0008                  		move.w	d1,8(a0)
0001896A C1FC 0C00                  		muls.w	#$C00,d0
0001896E 4840                       		swap	d0
00018970 D068 0032                  		add.w	$32(a0),d0
00018974 3140 000C                  		move.w	d0,$C(a0)
00018978 4E75                       		rts	
0001897A                            ; ===========================================================================
0001897A                            ; ---------------------------------------------------------------------------
0001897A                            ; Subroutine to	store information when you hit a lamppost
0001897A                            ; ---------------------------------------------------------------------------
0001897A                            
0001897A                            Obj79_StoreInfo:			; XREF: Obj79_HitLamp
0001897A 11E8 0028 FE30             		move.b	$28(a0),($FFFFFE30).w 		; lamppost number
00018980 11F8 FE30 FE31             		move.b	($FFFFFE30).w,($FFFFFE31).w
00018986 31E8 0008 FE32             		move.w	8(a0),($FFFFFE32).w		; x-position
0001898C 31E8 000C FE34             		move.w	$C(a0),($FFFFFE34).w		; y-position
00018992 31F8 FE20 FE36             		move.w	($FFFFFE20).w,($FFFFFE36).w 	; rings
00018998 11F8 FE1B FE54             		move.b	($FFFFFE1B).w,($FFFFFE54).w 	; lives
0001899E 21F8 FE22 FE38             		move.l	($FFFFFE22).w,($FFFFFE38).w 	; time
000189A4 11F8 F742 FE3C             		move.b	($FFFFF742).w,($FFFFFE3C).w 	; routine counter for dynamic level mod
000189AA 31F8 F72E FE3E             		move.w	($FFFFF72E).w,($FFFFFE3E).w 	; lower y-boundary of level
000189B0 31F8 F700 FE40             		move.w	($FFFFF700).w,($FFFFFE40).w 	; screen x-position
000189B6 31F8 F704 FE42             		move.w	($FFFFF704).w,($FFFFFE42).w 	; screen y-position
000189BC 31F8 F708 FE44             		move.w	($FFFFF708).w,($FFFFFE44).w 	; bg position
000189C2 31F8 F70C FE46             		move.w	($FFFFF70C).w,($FFFFFE46).w 	; bg position
000189C8 31F8 F710 FE48             		move.w	($FFFFF710).w,($FFFFFE48).w 	; bg position
000189CE 31F8 F714 FE4A             		move.w	($FFFFF714).w,($FFFFFE4A).w 	; bg position
000189D4 31F8 F718 FE4C             		move.w	($FFFFF718).w,($FFFFFE4C).w 	; bg position
000189DA 31F8 F71C FE4E             		move.w	($FFFFF71C).w,($FFFFFE4E).w 	; bg position
000189E0 31F8 F648 FE50             		move.w	($FFFFF648).w,($FFFFFE50).w 	; water height
000189E6 11F8 F64D FE52             		move.b	($FFFFF64D).w,($FFFFFE52).w 	; rountine counter for water
000189EC 11F8 F64E FE53             		move.b	($FFFFF64E).w,($FFFFFE53).w 	; water direction
000189F2 4E75                       		rts	
000189F4                            
000189F4                            ; ---------------------------------------------------------------------------
000189F4                            ; Subroutine to	load stored info when you start	a level	from a lamppost
000189F4                            ; ---------------------------------------------------------------------------
000189F4                            
000189F4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000189F4                            
000189F4                            
000189F4                            Obj79_LoadInfo:				; XREF: LevelSizeLoad
000189F4 11F8 FE31 FE30             		move.b	($FFFFFE31).w,($FFFFFE30).w
000189FA 31F8 FE32 D008             		move.w	($FFFFFE32).w,($FFFFD008).w
00018A00 31F8 FE34 D00C             		move.w	($FFFFFE34).w,($FFFFD00C).w
00018A06 31F8 FE36 FE20             		move.w	($FFFFFE36).w,($FFFFFE20).w
00018A0C 11F8 FE54 FE1B             		move.b	($FFFFFE54).w,($FFFFFE1B).w
00018A12 4278 FE20                  		clr.w	($FFFFFE20).w
00018A16 4238 FE1B                  		clr.b	($FFFFFE1B).w
00018A1A 21F8 FE38 FE22             		move.l	($FFFFFE38).w,($FFFFFE22).w
00018A20 11FC 003B FE25             		move.b	#59,($FFFFFE25).w
00018A26 5338 FE24                  		subq.b	#1,($FFFFFE24).w
00018A2A 11F8 FE3C F742             		move.b	($FFFFFE3C).w,($FFFFF742).w
00018A30 11F8 FE52 F64D             		move.b	($FFFFFE52).w,($FFFFF64D).w
00018A36 31F8 FE3E F72E             		move.w	($FFFFFE3E).w,($FFFFF72E).w
00018A3C 31F8 FE3E F726             		move.w	($FFFFFE3E).w,($FFFFF726).w
00018A42 31F8 FE40 F700             		move.w	($FFFFFE40).w,($FFFFF700).w
00018A48 31F8 FE42 F704             		move.w	($FFFFFE42).w,($FFFFF704).w
00018A4E 31F8 FE44 F708             		move.w	($FFFFFE44).w,($FFFFF708).w
00018A54 31F8 FE46 F70C             		move.w	($FFFFFE46).w,($FFFFF70C).w
00018A5A 31F8 FE48 F710             		move.w	($FFFFFE48).w,($FFFFF710).w
00018A60 31F8 FE4A F714             		move.w	($FFFFFE4A).w,($FFFFF714).w
00018A66 31F8 FE4C F718             		move.w	($FFFFFE4C).w,($FFFFF718).w
00018A6C 31F8 FE4E F71C             		move.w	($FFFFFE4E).w,($FFFFF71C).w
00018A72 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00018A78 6600                       		bne.s	loc_170E4
00018A7A 31F8 FE50 F648             		move.w	($FFFFFE50).w,($FFFFF648).w
00018A80 11F8 FE52 F64D             		move.b	($FFFFFE52).w,($FFFFF64D).w
00018A86 11F8 FE53 F64E             		move.b	($FFFFFE53).w,($FFFFF64E).w
00018A8C                            
00018A8C                            loc_170E4:
00018A8C 4A38 FE30                  		tst.b	($FFFFFE30).w
00018A90 6A00                       		bpl.s	locret_170F6
00018A92 3038 FE32                  		move.w	($FFFFFE32).w,d0
00018A96 0440 00A0                  		subi.w	#$A0,d0
00018A9A 31C0 F728                  		move.w	d0,($FFFFF728).w
00018A9E                            
00018A9E                            locret_170F6:
00018A9E 4E75                       		rts	
00018AA0                            ; End of function Obj79_LoadInfo
00018AA0                            
00018AA0                            ; ===========================================================================
00018AA0                            ; ---------------------------------------------------------------------------
00018AA0                            ; Sprite mappings - lamppost
00018AA0                            ; ---------------------------------------------------------------------------
00018AA0                            Map_obj79:
00018AA0                            	include "_maps\obj79.asm"
00018AA0                            ; ---------------------------------------------------------------------------
00018AA0                            ; Sprite mappings - lamppost
00018AA0                            ; ---------------------------------------------------------------------------
00018AA0 0000 0000                  		dc.w byte_17100-Map_obj79, byte_1711F-Map_obj79
00018AA4 0000 0000                  		dc.w byte_17134-Map_obj79, byte_1713F-Map_obj79
00018AA8 06                         byte_17100:	dc.b 6
00018AA9 E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
00018AAE E401 0800 00               		dc.b $E4, 1, 8,	0, 0
00018AB3 F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
00018AB8 F403 2802 00               		dc.b $F4, 3, $28, 2, 0
00018ABD D401 0006 F8               		dc.b $D4, 1, 0,	6, $F8
00018AC2 D401 0806 00               		dc.b $D4, 1, 8,	6, 0
00018AC7 04                         byte_1711F:	dc.b 4
00018AC8 E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
00018ACD E401 0800 00               		dc.b $E4, 1, 8,	0, 0
00018AD2 F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
00018AD7 F403 2802 00               		dc.b $F4, 3, $28, 2, 0
00018ADC 02                         byte_17134:	dc.b 2
00018ADD F801 0008 F8               		dc.b $F8, 1, 0,	8, $F8
00018AE2 F801 0808 00               		dc.b $F8, 1, 8,	8, 0
00018AE7 06                         byte_1713F:	dc.b 6
00018AE8 E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
00018AED E401 0800 00               		dc.b $E4, 1, 8,	0, 0
00018AF2 F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
00018AF7 F403 2802 00               		dc.b $F4, 3, $28, 2, 0
00018AFC D401 0008 F8               		dc.b $D4, 1, 0,	8, $F8
00018B01 D401 0808 00               		dc.b $D4, 1, 8,	8, 0
00018B06                            		even
00018B06                            		even
00018B06                            
00018B06                            ; ===========================================================================
00018B06                            ; ---------------------------------------------------------------------------
00018B06                            ; Object 7D - hidden points at the end of a level
00018B06                            ; ---------------------------------------------------------------------------
00018B06                            
00018B06                            Obj7D:					; XREF: Obj_Index
00018B06 7000                       		moveq	#0,d0
00018B08 1028 0024                  		move.b	$24(a0),d0
00018B0C 323B 0000                  		move.w	Obj7D_Index(pc,d0.w),d1
00018B10 4EFB 1000                  		jmp	Obj7D_Index(pc,d1.w)
00018B14                            ; ===========================================================================
00018B14 0000                       Obj7D_Index:	dc.w Obj7D_Main-Obj7D_Index
00018B16 0000                       		dc.w Obj7D_DelayDel-Obj7D_Index
00018B18                            ; ===========================================================================
00018B18                            
00018B18                            Obj7D_Main:				; XREF: Obj7D_Index
00018B18 7410                       		moveq	#$10,d2
00018B1A 3602                       		move.w	d2,d3
00018B1C D643                       		add.w	d3,d3
00018B1E 43F8 D000                  		lea	($FFFFD000).w,a1
00018B22 3029 0008                  		move.w	8(a1),d0
00018B26 9068 0008                  		sub.w	8(a0),d0
00018B2A D042                       		add.w	d2,d0
00018B2C B043                       		cmp.w	d3,d0
00018B2E 6400                       		bcc.s	Obj7D_ChkDel
00018B30 3229 000C                  		move.w	$C(a1),d1
00018B34 9268 000C                  		sub.w	$C(a0),d1
00018B38 D242                       		add.w	d2,d1
00018B3A B243                       		cmp.w	d3,d1
00018B3C 6400                       		bcc.s	Obj7D_ChkDel
00018B3E 4A78 FE08                  		tst.w	($FFFFFE08).w
00018B42 6600                       		bne.s	Obj7D_ChkDel
00018B44 4A38 F7CD                  		tst.b	($FFFFF7CD).w
00018B48 6600                       		bne.s	Obj7D_ChkDel
00018B4A 5428 0024                  		addq.b	#2,$24(a0)
00018B4E 217C 0000 0000 0004        		move.l	#Map_obj7D,4(a0)
00018B56 317C 84B6 0002             		move.w	#$84B6,2(a0)
00018B5C 0028 0004 0001             		ori.b	#4,1(a0)
00018B62 117C 0000 0018             		move.b	#0,$18(a0)
00018B68 117C 0010 0019             		move.b	#$10,$19(a0)
00018B6E 1168 0028 001A             		move.b	$28(a0),$1A(a0)
00018B74 317C 0077 0030             		move.w	#119,$30(a0)	; set display time to 2	seconds
00018B7A 303C 00C9                  		move.w	#$C9,d0
00018B7E 4EB9 0000 147C             		jsr	(PlaySound_Special).l ;	play bonus sound
00018B84 7000                       		moveq	#0,d0
00018B86 1028 0028                  		move.b	$28(a0),d0
00018B8A D040                       		add.w	d0,d0
00018B8C 303B 0000                  		move.w	Obj7D_Points(pc,d0.w),d0 ; load	bonus points array
00018B90 4EB9 0000 0000             		jsr	AddPoints
00018B96                            
00018B96                            Obj7D_ChkDel:
00018B96 3028 0008                  		move.w	8(a0),d0
00018B9A 0240 FF80                  		andi.w	#$FF80,d0
00018B9E 3238 F700                  		move.w	($FFFFF700).w,d1
00018BA2 0441 0080                  		subi.w	#$80,d1
00018BA6 0241 FF80                  		andi.w	#$FF80,d1
00018BAA 9041                       		sub.w	d1,d0
00018BAC 0C40 0280                  		cmpi.w	#$280,d0
00018BB0 6200                       		bhi.s	Obj7D_Delete
00018BB2 4E75                       		rts	
00018BB4                            ; ===========================================================================
00018BB4                            
00018BB4                            Obj7D_Delete:
00018BB4 4EF9 0000 E120             		jmp	DeleteObject
00018BBA                            ; ===========================================================================
00018BBA 0000                       Obj7D_Points:	dc.w 0			; Bonus	points array
00018BBC 03E8                       		dc.w 1000
00018BBE 0064                       		dc.w 100
00018BC0 000A                       		dc.w 10
00018BC2                            ; ===========================================================================
00018BC2                            
00018BC2                            Obj7D_DelayDel:				; XREF: Obj7D_Index
00018BC2 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from display time
00018BC6 6B00                       		bmi.s	Obj7D_Delete2	; if time is zero, branch
00018BC8 3028 0008                  		move.w	8(a0),d0
00018BCC 0240 FF80                  		andi.w	#-$80,d0
00018BD0 3238 F700                  		move.w	($FFFFF700).w,d1
00018BD4 0441 0080                  		subi.w	#$80,d1
00018BD8 0241 FF80                  		andi.w	#-$80,d1
00018BDC 9041                       		sub.w	d1,d0
00018BDE 0C40 0280                  		cmpi.w	#$280,d0
00018BE2 6200                       		bhi.s	Obj7D_Delete2
00018BE4 4EF9 0000 E0E4             		jmp	DisplaySprite
00018BEA                            ; ===========================================================================
00018BEA                            
00018BEA                            Obj7D_Delete2:
00018BEA 4EF9 0000 E120             		jmp	DeleteObject
00018BF0                            ; ===========================================================================
00018BF0                            ; ---------------------------------------------------------------------------
00018BF0                            ; Sprite mappings - hidden points at the end of	a level
00018BF0                            ; ---------------------------------------------------------------------------
00018BF0                            Map_obj7D:
00018BF0                            	include "_maps\obj7D.asm"
00018BF0                            ; ---------------------------------------------------------------------------
00018BF0                            ; Sprite mappings - hidden points at the end of	a level
00018BF0                            ; ---------------------------------------------------------------------------
00018BF0 0000 0000                  		dc.w byte_17250-Map_obj7D, byte_17251-Map_obj7D
00018BF4 0000 0000                  		dc.w byte_17257-Map_obj7D, byte_1725D-Map_obj7D
00018BF8 00                         byte_17250:	dc.b 0
00018BF9 01                         byte_17251:	dc.b 1
00018BFA F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
00018BFF 01                         byte_17257:	dc.b 1
00018C00 F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
00018C05 01                         byte_1725D:	dc.b 1
00018C06 F40E 0018 F0               		dc.b $F4, $E, 0, $18, $F0
00018C0C 00                         		even
00018C0C 00                         		even
00018C0C                            
00018C0C                            ; ===========================================================================
00018C0C                            ; ---------------------------------------------------------------------------
00018C0C                            ; Object 8A - "SONIC TEAM PRESENTS" and	credits
00018C0C                            ; ---------------------------------------------------------------------------
00018C0C                            
00018C0C                            Obj8A:					; XREF: Obj_Index
00018C0C 7000                       		moveq	#0,d0
00018C0E 1028 0024                  		move.b	$24(a0),d0
00018C12 323B 0000                  		move.w	Obj8A_Index(pc,d0.w),d1
00018C16 4EFB 1000                  		jmp	Obj8A_Index(pc,d1.w)
00018C1A                            ; ===========================================================================
00018C1A 0000                       Obj8A_Index:	dc.w Obj8A_Main-Obj8A_Index
00018C1C 0000                       		dc.w Obj8A_Display-Obj8A_Index
00018C1E                            ; ===========================================================================
00018C1E                            
00018C1E                            Obj8A_Main:				; XREF: Obj8A_Index
00018C1E 5428 0024                  		addq.b	#2,$24(a0)
00018C22 317C 0120 0008             		move.w	#$120,8(a0)
00018C28 317C 00F0 000A             		move.w	#$F0,$A(a0)
00018C2E 217C 0000 0000 0004        		move.l	#Map_obj8A,4(a0)
00018C36 317C 05A0 0002             		move.w	#$5A0,2(a0)
00018C3C 3038 FFF4                  		move.w	($FFFFFFF4).w,d0 ; load	credits	index number
00018C40 1140 001A                  		move.b	d0,$1A(a0)	; display appropriate sprite
00018C44 117C 0000 0001             		move.b	#0,1(a0)
00018C4A 117C 0000 0018             		move.b	#0,$18(a0)
00018C50 0C38 0004 F600             		cmpi.b	#4,($FFFFF600).w ; is the scene	number 04 (title screen)?
00018C56 6600                       		bne.s	Obj8A_Display	; if not, branch
00018C58 317C 00A6 0002             		move.w	#$A6,2(a0)
00018C5E 117C 000A 001A             		move.b	#$A,$1A(a0)	; display "SONIC TEAM PRESENTS"
00018C64 4A38 FFE3                  		tst.b	($FFFFFFE3).w	; is hidden credits cheat on?
00018C68 6700                       		beq.s	Obj8A_Display	; if not, branch
00018C6A 0C38 0072 F604             		cmpi.b	#$72,($FFFFF604).w ; is	Start+A+C+Down being pressed?
00018C70 6600                       		bne.s	Obj8A_Display	; if not, branch
00018C72 31FC 0EEE FBC0             		move.w	#$EEE,($FFFFFBC0).w ; 3rd pallet, 1st entry = white
00018C78 31FC 0880 FBC2             		move.w	#$880,($FFFFFBC2).w ; 3rd pallet, 2nd entry = cyan
00018C7E 4EF9 0000 E120             		jmp	DeleteObject
00018C84                            ; ===========================================================================
00018C84                            
00018C84                            Obj8A_Display:				; XREF: Obj8A_Index
00018C84 4EF9 0000 E0E4             		jmp	DisplaySprite
00018C8A                            ; ===========================================================================
00018C8A                            ; ---------------------------------------------------------------------------
00018C8A                            ; Sprite mappings - "SONIC TEAM	PRESENTS" and credits
00018C8A                            ; ---------------------------------------------------------------------------
00018C8A                            Map_obj8A:
00018C8A                            	include "_maps\obj8A.asm"
00018C8A                            ; ---------------------------------------------------------------------------
00018C8A                            ; Sprite mappings - "SONIC TEAM	PRESENTS" and credits
00018C8A                            ; ---------------------------------------------------------------------------
00018C8A 0000 0000                  		dc.w byte_172F8-Map_obj8A, byte_1733F-Map_obj8A
00018C8E 0000 0000                  		dc.w byte_17390-Map_obj8A, byte_173C3-Map_obj8A
00018C92 0000 0000                  		dc.w byte_1743C-Map_obj8A, byte_174A1-Map_obj8A
00018C96 0000 0000                  		dc.w byte_17524-Map_obj8A, byte_17598-Map_obj8A
00018C9A 0000 0000                  		dc.w byte_17634-Map_obj8A, byte_17680-Map_obj8A
00018C9E 0000                       		dc.w byte_176A9-Map_obj8A
00018CA0 0E                         byte_172F8:	dc.b $E			 ; SONIC TEAM STAFF
00018CA1 F805 002E 88               		dc.b $F8, 5, 0,	$2E, $88
00018CA6 F805 0026 98               		dc.b $F8, 5, 0,	$26, $98
00018CAB F805 001A A8               		dc.b $F8, 5, 0,	$1A, $A8
00018CB0 F801 0046 B8               		dc.b $F8, 1, 0,	$46, $B8
00018CB5 F805 001E C0               		dc.b $F8, 5, 0,	$1E, $C0
00018CBA F805 003E D8               		dc.b $F8, 5, 0,	$3E, $D8
00018CBF F805 000E E8               		dc.b $F8, 5, 0,	$E, $E8
00018CC4 F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
00018CC9 F809 0008 08               		dc.b $F8, 9, 0,	8, 8
00018CCE F805 002E 28               		dc.b $F8, 5, 0,	$2E, $28
00018CD3 F805 003E 38               		dc.b $F8, 5, 0,	$3E, $38
00018CD8 F805 0004 48               		dc.b $F8, 5, 0,	4, $48
00018CDD F805 005C 58               		dc.b $F8, 5, 0,	$5C, $58
00018CE2 F805 005C 68               		dc.b $F8, 5, 0,	$5C, $68
00018CE7 10                         byte_1733F:	dc.b $10		; GAME PLAN CAROL YAS
00018CE8 D805 0000 80               		dc.b $D8, 5, 0,	0, $80
00018CED D805 0004 90               		dc.b $D8, 5, 0,	4, $90
00018CF2 D809 0008 A0               		dc.b $D8, 9, 0,	8, $A0
00018CF7 D805 000E B4               		dc.b $D8, 5, 0,	$E, $B4
00018CFC D805 0012 D0               		dc.b $D8, 5, 0,	$12, $D0
00018D01 D805 0016 E0               		dc.b $D8, 5, 0,	$16, $E0
00018D06 D805 0004 F0               		dc.b $D8, 5, 0,	4, $F0
00018D0B D805 001A 00               		dc.b $D8, 5, 0,	$1A, 0
00018D10 0805 001E C8               		dc.b 8,	5, 0, $1E, $C8
00018D15 0805 0004 D8               		dc.b 8,	5, 0, 4, $D8
00018D1A 0805 0022 E8               		dc.b 8,	5, 0, $22, $E8
00018D1F 0805 0026 F8               		dc.b 8,	5, 0, $26, $F8
00018D24 0805 0016 08               		dc.b 8,	5, 0, $16, 8
00018D29 0805 002A 20               		dc.b 8,	5, 0, $2A, $20
00018D2E 0805 0004 30               		dc.b 8,	5, 0, 4, $30
00018D33 0805 002E 44               		dc.b 8,	5, 0, $2E, $44
00018D38 0A                         byte_17390:	dc.b $A			 ; PROGRAM YU 2
00018D39 D805 0012 80               		dc.b $D8, 5, 0,	$12, $80
00018D3E D805 0022 90               		dc.b $D8, 5, 0,	$22, $90
00018D43 D805 0026 A0               		dc.b $D8, 5, 0,	$26, $A0
00018D48 D805 0000 B0               		dc.b $D8, 5, 0,	0, $B0
00018D4D D805 0022 C0               		dc.b $D8, 5, 0,	$22, $C0
00018D52 D805 0004 D0               		dc.b $D8, 5, 0,	4, $D0
00018D57 D809 0008 E0               		dc.b $D8, 9, 0,	8, $E0
00018D5C 0805 002A E8               		dc.b 8,	5, 0, $2A, $E8
00018D61 0805 0032 F8               		dc.b 8,	5, 0, $32, $F8
00018D66 0805 0036 08               		dc.b 8,	5, 0, $36, 8
00018D6B 18                         byte_173C3:	dc.b $18		 ; CHARACTER DESIGN BIGISLAND
00018D6C D805 001E 88               		dc.b $D8, 5, 0,	$1E, $88
00018D71 D805 003A 98               		dc.b $D8, 5, 0,	$3A, $98
00018D76 D805 0004 A8               		dc.b $D8, 5, 0,	4, $A8
00018D7B D805 0022 B8               		dc.b $D8, 5, 0,	$22, $B8
00018D80 D805 0004 C8               		dc.b $D8, 5, 0,	4, $C8
00018D85 D805 001E D8               		dc.b $D8, 5, 0,	$1E, $D8
00018D8A D805 003E E8               		dc.b $D8, 5, 0,	$3E, $E8
00018D8F D805 000E F8               		dc.b $D8, 5, 0,	$E, $F8
00018D94 D805 0022 08               		dc.b $D8, 5, 0,	$22, 8
00018D99 D805 0042 20               		dc.b $D8, 5, 0,	$42, $20
00018D9E D805 000E 30               		dc.b $D8, 5, 0,	$E, $30
00018DA3 D805 002E 40               		dc.b $D8, 5, 0,	$2E, $40
00018DA8 D801 0046 50               		dc.b $D8, 1, 0,	$46, $50
00018DAD D805 0000 58               		dc.b $D8, 5, 0,	0, $58
00018DB2 D805 001A 68               		dc.b $D8, 5, 0,	$1A, $68
00018DB7 0805 0048 C0               		dc.b 8,	5, 0, $48, $C0
00018DBC 0801 0046 D0               		dc.b 8,	1, 0, $46, $D0
00018DC1 0805 0000 D8               		dc.b 8,	5, 0, 0, $D8
00018DC6 0801 0046 E8               		dc.b 8,	1, 0, $46, $E8
00018DCB 0805 002E F0               		dc.b 8,	5, 0, $2E, $F0
00018DD0 0805 0016 00               		dc.b 8,	5, 0, $16, 0
00018DD5 0805 0004 10               		dc.b 8,	5, 0, 4, $10
00018DDA 0805 001A 20               		dc.b 8,	5, 0, $1A, $20
00018DDF 0805 0042 30               		dc.b 8,	5, 0, $42, $30
00018DE4 14                         byte_1743C:	dc.b $14		 ; DESIGN JINYA	PHENIX RIE
00018DE5 D005 0042 A0               		dc.b $D0, 5, 0,	$42, $A0
00018DEA D005 000E B0               		dc.b $D0, 5, 0,	$E, $B0
00018DEF D005 002E C0               		dc.b $D0, 5, 0,	$2E, $C0
00018DF4 D001 0046 D0               		dc.b $D0, 1, 0,	$46, $D0
00018DF9 D005 0000 D8               		dc.b $D0, 5, 0,	0, $D8
00018DFE D005 001A E8               		dc.b $D0, 5, 0,	$1A, $E8
00018E03 0005 004C E8               		dc.b 0,	5, 0, $4C, $E8
00018E08 0001 0046 F8               		dc.b 0,	1, 0, $46, $F8
00018E0D 0005 001A 04               		dc.b 0,	5, 0, $1A, 4
00018E12 0005 002A 14               		dc.b 0,	5, 0, $2A, $14
00018E17 0005 0004 24               		dc.b 0,	5, 0, 4, $24
00018E1C 2005 0012 D0               		dc.b $20, 5, 0,	$12, $D0
00018E21 2005 003A E0               		dc.b $20, 5, 0,	$3A, $E0
00018E26 2005 000E F0               		dc.b $20, 5, 0,	$E, $F0
00018E2B 2005 001A 00               		dc.b $20, 5, 0,	$1A, 0
00018E30 2001 0046 10               		dc.b $20, 1, 0,	$46, $10
00018E35 2005 0050 18               		dc.b $20, 5, 0,	$50, $18
00018E3A 2005 0022 30               		dc.b $20, 5, 0,	$22, $30
00018E3F 2001 0046 40               		dc.b $20, 1, 0,	$46, $40
00018E44 2005 000E 48               		dc.b $20, 5, 0,	$E, $48
00018E49 1A                         byte_174A1:	dc.b $1A		 ; SOUND PRODUCE MASATO	NAKAMURA
00018E4A D805 002E 98               		dc.b $D8, 5, 0,	$2E, $98
00018E4F D805 0026 A8               		dc.b $D8, 5, 0,	$26, $A8
00018E54 D805 0032 B8               		dc.b $D8, 5, 0,	$32, $B8
00018E59 D805 001A C8               		dc.b $D8, 5, 0,	$1A, $C8
00018E5E D805 0054 D8               		dc.b $D8, 5, 0,	$54, $D8
00018E63 D805 0012 F8               		dc.b $D8, 5, 0,	$12, $F8
00018E68 D805 0022 08               		dc.b $D8, 5, 0,	$22, 8
00018E6D D805 0026 18               		dc.b $D8, 5, 0,	$26, $18
00018E72 D805 0042 28               		dc.b $D8, 5, 0,	$42, $28
00018E77 D805 0032 38               		dc.b $D8, 5, 0,	$32, $38
00018E7C D805 001E 48               		dc.b $D8, 5, 0,	$1E, $48
00018E81 D805 000E 58               		dc.b $D8, 5, 0,	$E, $58
00018E86 0809 0008 88               		dc.b 8,	9, 0, 8, $88
00018E8B 0805 0004 9C               		dc.b 8,	5, 0, 4, $9C
00018E90 0805 002E AC               		dc.b 8,	5, 0, $2E, $AC
00018E95 0805 0004 BC               		dc.b 8,	5, 0, 4, $BC
00018E9A 0805 003E CC               		dc.b 8,	5, 0, $3E, $CC
00018E9F 0805 0026 DC               		dc.b 8,	5, 0, $26, $DC
00018EA4 0805 001A F8               		dc.b 8,	5, 0, $1A, $F8
00018EA9 0805 0004 08               		dc.b 8,	5, 0, 4, 8
00018EAE 0805 0058 18               		dc.b 8,	5, 0, $58, $18
00018EB3 0805 0004 28               		dc.b 8,	5, 0, 4, $28
00018EB8 0809 0008 38               		dc.b 8,	9, 0, 8, $38
00018EBD 0805 0032 4C               		dc.b 8,	5, 0, $32, $4C
00018EC2 0805 0022 5C               		dc.b 8,	5, 0, $22, $5C
00018EC7 0805 0004 6C               		dc.b 8,	5, 0, 4, $6C
00018ECC 17                         byte_17524:	dc.b $17		 ; SOUND PROGRAM JIMITA	MACKY
00018ECD D005 002E 98               		dc.b $D0, 5, 0,	$2E, $98
00018ED2 D005 0026 A8               		dc.b $D0, 5, 0,	$26, $A8
00018ED7 D005 0032 B8               		dc.b $D0, 5, 0,	$32, $B8
00018EDC D005 001A C8               		dc.b $D0, 5, 0,	$1A, $C8
00018EE1 D005 0054 D8               		dc.b $D0, 5, 0,	$54, $D8
00018EE6 D005 0012 F8               		dc.b $D0, 5, 0,	$12, $F8
00018EEB D005 0022 08               		dc.b $D0, 5, 0,	$22, 8
00018EF0 D005 0026 18               		dc.b $D0, 5, 0,	$26, $18
00018EF5 D005 0000 28               		dc.b $D0, 5, 0,	0, $28
00018EFA D005 0022 38               		dc.b $D0, 5, 0,	$22, $38
00018EFF D005 0004 48               		dc.b $D0, 5, 0,	4, $48
00018F04 D009 0008 58               		dc.b $D0, 9, 0,	8, $58
00018F09 0005 004C D0               		dc.b 0,	5, 0, $4C, $D0
00018F0E 0001 0046 E0               		dc.b 0,	1, 0, $46, $E0
00018F13 0009 0008 E8               		dc.b 0,	9, 0, 8, $E8
00018F18 0001 0046 FC               		dc.b 0,	1, 0, $46, $FC
00018F1D 0005 003E 04               		dc.b 0,	5, 0, $3E, 4
00018F22 0005 0004 14               		dc.b 0,	5, 0, 4, $14
00018F27 2009 0008 D0               		dc.b $20, 9, 0,	8, $D0
00018F2C 2005 0004 E4               		dc.b $20, 5, 0,	4, $E4
00018F31 2005 001E F4               		dc.b $20, 5, 0,	$1E, $F4
00018F36 2005 0058 04               		dc.b $20, 5, 0,	$58, 4
00018F3B 2005 002A 14               		dc.b $20, 5, 0,	$2A, $14
00018F40 1F                         byte_17598:	dc.b $1F		 ; SPECIAL THANKS FUJIO	MINEGISHI PAPA
00018F41 D805 002E 80               		dc.b $D8, 5, 0,	$2E, $80
00018F46 D805 0012 90               		dc.b $D8, 5, 0,	$12, $90
00018F4B D805 000E A0               		dc.b $D8, 5, 0,	$E, $A0
00018F50 D805 001E B0               		dc.b $D8, 5, 0,	$1E, $B0
00018F55 D801 0046 C0               		dc.b $D8, 1, 0,	$46, $C0
00018F5A D805 0004 C8               		dc.b $D8, 5, 0,	4, $C8
00018F5F D805 0016 D8               		dc.b $D8, 5, 0,	$16, $D8
00018F64 D805 003E F8               		dc.b $D8, 5, 0,	$3E, $F8
00018F69 D805 003A 08               		dc.b $D8, 5, 0,	$3A, 8
00018F6E D805 0004 18               		dc.b $D8, 5, 0,	4, $18
00018F73 D805 001A 28               		dc.b $D8, 5, 0,	$1A, $28
00018F78 D805 0058 38               		dc.b $D8, 5, 0,	$58, $38
00018F7D D805 002E 48               		dc.b $D8, 5, 0,	$2E, $48
00018F82 0005 005C B0               		dc.b 0,	5, 0, $5C, $B0
00018F87 0005 0032 C0               		dc.b 0,	5, 0, $32, $C0
00018F8C 0005 004C D0               		dc.b 0,	5, 0, $4C, $D0
00018F91 0001 0046 E0               		dc.b 0,	1, 0, $46, $E0
00018F96 0005 0026 E8               		dc.b 0,	5, 0, $26, $E8
00018F9B 0009 0008 00               		dc.b 0,	9, 0, 8, 0
00018FA0 0001 0046 14               		dc.b 0,	1, 0, $46, $14
00018FA5 0005 001A 1C               		dc.b 0,	5, 0, $1A, $1C
00018FAA 0005 000E 2C               		dc.b 0,	5, 0, $E, $2C
00018FAF 0005 0000 3C               		dc.b 0,	5, 0, 0, $3C
00018FB4 0001 0046 4C               		dc.b 0,	1, 0, $46, $4C
00018FB9 0005 002E 54               		dc.b 0,	5, 0, $2E, $54
00018FBE 0005 003A 64               		dc.b 0,	5, 0, $3A, $64
00018FC3 0001 0046 74               		dc.b 0,	1, 0, $46, $74
00018FC8 2005 0012 F8               		dc.b $20, 5, 0,	$12, $F8
00018FCD 2005 0004 08               		dc.b $20, 5, 0,	4, 8
00018FD2 2005 0012 18               		dc.b $20, 5, 0,	$12, $18
00018FD7 2005 0004 28               		dc.b $20, 5, 0,	4, $28
00018FDC 0F                         byte_17634:	dc.b $F			 ; PRESENTED BY	SEGA
00018FDD F805 0012 80               		dc.b $F8, 5, 0,	$12, $80
00018FE2 F805 0022 90               		dc.b $F8, 5, 0,	$22, $90
00018FE7 F805 000E A0               		dc.b $F8, 5, 0,	$E, $A0
00018FEC F805 002E B0               		dc.b $F8, 5, 0,	$2E, $B0
00018FF1 F805 000E C0               		dc.b $F8, 5, 0,	$E, $C0
00018FF6 F805 001A D0               		dc.b $F8, 5, 0,	$1A, $D0
00018FFB F805 003E E0               		dc.b $F8, 5, 0,	$3E, $E0
00019000 F805 000E F0               		dc.b $F8, 5, 0,	$E, $F0
00019005 F805 0042 00               		dc.b $F8, 5, 0,	$42, 0
0001900A F805 0048 18               		dc.b $F8, 5, 0,	$48, $18
0001900F F805 002A 28               		dc.b $F8, 5, 0,	$2A, $28
00019014 F805 002E 40               		dc.b $F8, 5, 0,	$2E, $40
00019019 F805 000E 50               		dc.b $F8, 5, 0,	$E, $50
0001901E F805 0000 60               		dc.b $F8, 5, 0,	0, $60
00019023 F805 0004 70               		dc.b $F8, 5, 0,	4, $70
00019028 08                         byte_17680:	dc.b 8			 ; TRY AGAIN
00019029 3005 003E C0               		dc.b $30, 5, 0,	$3E, $C0
0001902E 3005 0022 D0               		dc.b $30, 5, 0,	$22, $D0
00019033 3005 002A E0               		dc.b $30, 5, 0,	$2A, $E0
00019038 3005 0004 F8               		dc.b $30, 5, 0,	4, $F8
0001903D 3005 0000 08               		dc.b $30, 5, 0,	0, 8
00019042 3005 0004 18               		dc.b $30, 5, 0,	4, $18
00019047 3001 0046 28               		dc.b $30, 1, 0,	$46, $28
0001904C 3005 001A 30               		dc.b $30, 5, 0,	$1A, $30
00019051 11                         byte_176A9:	dc.b $11		 ; SONIC TEAM PRESENTS
00019052 E805 002E B4               		dc.b $E8, 5, 0,	$2E, $B4
00019057 E805 0026 C4               		dc.b $E8, 5, 0,	$26, $C4
0001905C E805 001A D4               		dc.b $E8, 5, 0,	$1A, $D4
00019061 E801 0046 E4               		dc.b $E8, 1, 0,	$46, $E4
00019066 E805 001E EC               		dc.b $E8, 5, 0,	$1E, $EC
0001906B E805 003E 04               		dc.b $E8, 5, 0,	$3E, 4
00019070 E805 000E 14               		dc.b $E8, 5, 0,	$E, $14
00019075 E805 0004 24               		dc.b $E8, 5, 0,	4, $24
0001907A E809 0008 34               		dc.b $E8, 9, 0,	8, $34
0001907F 0005 0012 C0               		dc.b 0,	5, 0, $12, $C0
00019084 0005 0022 D0               		dc.b 0,	5, 0, $22, $D0
00019089 0005 000E E0               		dc.b 0,	5, 0, $E, $E0
0001908E 0005 002E F0               		dc.b 0,	5, 0, $2E, $F0
00019093 0005 000E 00               		dc.b 0,	5, 0, $E, 0
00019098 0005 001A 10               		dc.b 0,	5, 0, $1A, $10
0001909D 0005 003E 20               		dc.b 0,	5, 0, $3E, $20
000190A2 0005 002E 30               		dc.b 0,	5, 0, $2E, $30
000190A8 00                         		even
000190A8 00                         		even
000190A8                            
000190A8                            ; ===========================================================================
000190A8                            ; ---------------------------------------------------------------------------
000190A8                            ; Object 3D - Eggman (GHZ)
000190A8                            ; ---------------------------------------------------------------------------
000190A8                            
000190A8                            Obj3D:					; XREF: Obj_Index
000190A8 7000                       		moveq	#0,d0
000190AA 1028 0024                  		move.b	$24(a0),d0
000190AE 323B 0000                  		move.w	Obj3D_Index(pc,d0.w),d1
000190B2 4EFB 1000                  		jmp	Obj3D_Index(pc,d1.w)
000190B6                            ; ===========================================================================
000190B6 0000                       Obj3D_Index:	dc.w Obj3D_Main-Obj3D_Index
000190B8 0000                       		dc.w Obj3D_ShipMain-Obj3D_Index
000190BA 0000                       		dc.w Obj3D_FaceMain-Obj3D_Index
000190BC 0000                       		dc.w Obj3D_FlameMain-Obj3D_Index
000190BE                            
000190BE 0200                       Obj3D_ObjData:	dc.b 2,	0		; routine counter, animation
000190C0 0401                       		dc.b 4,	1
000190C2 0607                       		dc.b 6,	7
000190C4                            ; ===========================================================================
000190C4                            
000190C4                            Obj3D_Main:				; XREF: Obj3D_Index
000190C4 45F9 0001 90BE             		lea	(Obj3D_ObjData).l,a2
000190CA 2248                       		movea.l	a0,a1
000190CC 7202                       		moveq	#2,d1
000190CE 6000                       		bra.s	Obj3D_LoadBoss
000190D0                            ; ===========================================================================
000190D0                            
000190D0                            Obj3D_Loop:
000190D0 4EB9 0000 E590             		jsr	SingleObjLoad2
000190D6 6600                       		bne.s	loc_17772
000190D8                            
000190D8                            Obj3D_LoadBoss:				; XREF: Obj3D_Main
000190D8 135A 0024                  		move.b	(a2)+,$24(a1)
000190DC 12BC 003D                  		move.b	#$3D,0(a1)
000190E0 3368 0008 0008             		move.w	8(a0),8(a1)
000190E6 3368 000C 000C             		move.w	$C(a0),$C(a1)
000190EC 237C 0000 0000 0004        		move.l	#Map_Eggman,4(a1)
000190F4 337C 0400 0002             		move.w	#$400,2(a1)
000190FA 137C 0004 0001             		move.b	#4,1(a1)
00019100 137C 0020 0019             		move.b	#$20,$19(a1)
00019106 137C 0003 0018             		move.b	#3,$18(a1)
0001910C 135A 001C                  		move.b	(a2)+,$1C(a1)
00019110 2348 0034                  		move.l	a0,$34(a1)
00019114 51C9 FFBA                  		dbf	d1,Obj3D_Loop	; repeat sequence 2 more times
00019118                            
00019118                            loc_17772:
00019118 3168 0008 0030             		move.w	8(a0),$30(a0)
0001911E 3168 000C 0038             		move.w	$C(a0),$38(a0)
00019124 117C 000F 0020             		move.b	#$F,$20(a0)
0001912A 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
00019130                            
00019130                            Obj3D_ShipMain:				; XREF: Obj3D_Index
00019130 7000                       		moveq	#0,d0
00019132 1028 0025                  		move.b	$25(a0),d0
00019136 323B 0000                  		move.w	Obj3D_ShipIndex(pc,d0.w),d1
0001913A 4EBB 1000                  		jsr	Obj3D_ShipIndex(pc,d1.w)
0001913E 43F9 0000 0000             		lea	(Ani_Eggman).l,a1
00019144 4EB9 0000 B1F6             		jsr	AnimateSprite
0001914A 1028 0022                  		move.b	$22(a0),d0
0001914E 0200 0003                  		andi.b	#3,d0
00019152 0228 00FC 0001             		andi.b	#$FC,1(a0)
00019158 8128 0001                  		or.b	d0,1(a0)
0001915C 4EF9 0000 E0E4             		jmp	DisplaySprite
00019162                            ; ===========================================================================
00019162 0000                       Obj3D_ShipIndex:dc.w Obj3D_ShipStart-Obj3D_ShipIndex
00019164 0000                       		dc.w Obj3D_MakeBall-Obj3D_ShipIndex
00019166 0000                       		dc.w Obj3D_ShipMove-Obj3D_ShipIndex
00019168 0000                       		dc.w loc_17954-Obj3D_ShipIndex
0001916A 0000                       		dc.w loc_1797A-Obj3D_ShipIndex
0001916C 0000                       		dc.w loc_179AC-Obj3D_ShipIndex
0001916E 0000                       		dc.w loc_179F6-Obj3D_ShipIndex
00019170                            ; ===========================================================================
00019170                            
00019170                            Obj3D_ShipStart:			; XREF: Obj3D_ShipIndex
00019170 317C 0100 0012             		move.w	#$100,$12(a0)	; move ship down
00019176 6100 0000                  		bsr.w	BossMove
0001917A 0C68 0338 0038             		cmpi.w	#$338,$38(a0)
00019180 6600                       		bne.s	loc_177E6
00019182 317C 0000 0012             		move.w	#0,$12(a0)	; stop ship
00019188 5428 0025                  		addq.b	#2,$25(a0)	; goto next routine
0001918C                            
0001918C                            loc_177E6:
0001918C 1028 003F                  		move.b	$3F(a0),d0
00019190 4EB9 0000 33DA             		jsr	(CalcSine).l
00019196 EC40                       		asr.w	#6,d0
00019198 D068 0038                  		add.w	$38(a0),d0
0001919C 3140 000C                  		move.w	d0,$C(a0)
000191A0 3168 0030 0008             		move.w	$30(a0),8(a0)
000191A6 5428 003F                  		addq.b	#2,$3F(a0)
000191AA 0C28 0008 0025             		cmpi.b	#8,$25(a0)
000191B0 6400                       		bcc.s	locret_1784A
000191B2 4A28 0022                  		tst.b	$22(a0)
000191B6 6B00                       		bmi.s	loc_1784C
000191B8 4A28 0020                  		tst.b	$20(a0)
000191BC 6600                       		bne.s	locret_1784A
000191BE 4A28 003E                  		tst.b	$3E(a0)
000191C2 6600                       		bne.s	Obj3D_ShipFlash
000191C4 117C 0020 003E             		move.b	#$20,$3E(a0)	; set number of	times for ship to flash
000191CA 303C 00AC                  		move.w	#$AC,d0
000191CE 4EB9 0000 147C             		jsr	(PlaySound_Special).l ;	play boss damage sound
000191D4                            
000191D4                            Obj3D_ShipFlash:
000191D4 43F8 FB22                  		lea	($FFFFFB22).w,a1 ; load	2nd pallet, 2nd	entry
000191D8 7000                       		moveq	#0,d0		; move 0 (black) to d0
000191DA 4A51                       		tst.w	(a1)
000191DC 6600                       		bne.s	loc_1783C
000191DE 303C 0EEE                  		move.w	#$EEE,d0	; move 0EEE (white) to d0
000191E2                            
000191E2                            loc_1783C:
000191E2 3280                       		move.w	d0,(a1)		; load colour stored in	d0
000191E4 5328 003E                  		subq.b	#1,$3E(a0)
000191E8 6600                       		bne.s	locret_1784A
000191EA 117C 000F 0020             		move.b	#$F,$20(a0)
000191F0                            
000191F0                            locret_1784A:
000191F0 4E75                       		rts	
000191F2                            ; ===========================================================================
000191F2                            
000191F2                            loc_1784C:				; XREF: loc_177E6
000191F2 7064                       		moveq	#100,d0
000191F4 6100 0000                  		bsr.w	AddPoints
000191F8 117C 0008 0025             		move.b	#8,$25(a0)
000191FE 317C 00B3 003C             		move.w	#$B3,$3C(a0)
00019204 4E75                       		rts	
00019206                            
00019206                            ; ---------------------------------------------------------------------------
00019206                            ; Defeated boss	subroutine
00019206                            ; ---------------------------------------------------------------------------
00019206                            
00019206                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00019206                            
00019206                            
00019206                            BossDefeated:
00019206 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0001920A 0200 0007                  		andi.b	#7,d0
0001920E 6600                       		bne.s	locret_178A2
00019210 4EB9 0000 E57A             		jsr	SingleObjLoad
00019216 6600                       		bne.s	locret_178A2
00019218 12BC 003F                  		move.b	#$3F,0(a1)	; load explosion object
0001921C 3368 0008 0008             		move.w	8(a0),8(a1)
00019222 3368 000C 000C             		move.w	$C(a0),$C(a1)
00019228 4EB9 0000 33B4             		jsr	(RandomNumber).l
0001922E 3200                       		move.w	d0,d1
00019230 7200                       		moveq	#0,d1
00019232 1200                       		move.b	d0,d1
00019234 E409                       		lsr.b	#2,d1
00019236 0441 0020                  		subi.w	#$20,d1
0001923A D369 0008                  		add.w	d1,8(a1)
0001923E E048                       		lsr.w	#8,d0
00019240 E608                       		lsr.b	#3,d0
00019242 D169 000C                  		add.w	d0,$C(a1)
00019246                            
00019246                            locret_178A2:
00019246 4E75                       		rts	
00019248                            ; End of function BossDefeated
00019248                            
00019248                            ; ---------------------------------------------------------------------------
00019248                            ; Subroutine to	move a boss
00019248                            ; ---------------------------------------------------------------------------
00019248                            
00019248                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00019248                            
00019248                            
00019248                            BossMove:
00019248 2428 0030                  		move.l	$30(a0),d2
0001924C 2628 0038                  		move.l	$38(a0),d3
00019250 3028 0010                  		move.w	$10(a0),d0
00019254 48C0                       		ext.l	d0
00019256 E180                       		asl.l	#8,d0
00019258 D480                       		add.l	d0,d2
0001925A 3028 0012                  		move.w	$12(a0),d0
0001925E 48C0                       		ext.l	d0
00019260 E180                       		asl.l	#8,d0
00019262 D680                       		add.l	d0,d3
00019264 2142 0030                  		move.l	d2,$30(a0)
00019268 2143 0038                  		move.l	d3,$38(a0)
0001926C 4E75                       		rts	
0001926E                            ; End of function BossMove
0001926E                            
0001926E                            ; ===========================================================================
0001926E                            
0001926E                            Obj3D_MakeBall:				; XREF: Obj3D_ShipIndex
0001926E 317C FF00 0010             		move.w	#-$100,$10(a0)
00019274 317C FFC0 0012             		move.w	#-$40,$12(a0)
0001927A 6100 FFCC                  		bsr.w	BossMove
0001927E 0C68 2A00 0030             		cmpi.w	#$2A00,$30(a0)
00019284 6600                       		bne.s	loc_17916
00019286 317C 0000 0010             		move.w	#0,$10(a0)
0001928C 317C 0000 0012             		move.w	#0,$12(a0)
00019292 5428 0025                  		addq.b	#2,$25(a0)
00019296 4EB9 0000 E590             		jsr	SingleObjLoad2
0001929C 6600                       		bne.s	loc_17910
0001929E 12BC 0048                  		move.b	#$48,0(a1)	; load swinging	ball object
000192A2 3368 0030 0008             		move.w	$30(a0),8(a1)
000192A8 3368 0038 000C             		move.w	$38(a0),$C(a1)
000192AE 2348 0034                  		move.l	a0,$34(a1)
000192B2                            
000192B2                            loc_17910:
000192B2 317C 0077 003C             		move.w	#$77,$3C(a0)
000192B8                            
000192B8                            loc_17916:
000192B8 6000 FED2                  		bra.w	loc_177E6
000192BC                            ; ===========================================================================
000192BC                            
000192BC                            Obj3D_ShipMove:				; XREF: Obj3D_ShipIndex
000192BC 5368 003C                  		subq.w	#1,$3C(a0)
000192C0 6A00                       		bpl.s	Obj3D_Reverse
000192C2 5428 0025                  		addq.b	#2,$25(a0)
000192C6 317C 003F 003C             		move.w	#$3F,$3C(a0)
000192CC 317C 0100 0010             		move.w	#$100,$10(a0)	; move the ship	sideways
000192D2 0C68 2A00 0030             		cmpi.w	#$2A00,$30(a0)
000192D8 6600                       		bne.s	Obj3D_Reverse
000192DA 317C 007F 003C             		move.w	#$7F,$3C(a0)
000192E0 317C 0040 0010             		move.w	#$40,$10(a0)
000192E6                            
000192E6                            Obj3D_Reverse:
000192E6 0828 0000 0022             		btst	#0,$22(a0)
000192EC 6600                       		bne.s	loc_17950
000192EE 4468 0010                  		neg.w	$10(a0)		; reverse direction of the ship
000192F2                            
000192F2                            loc_17950:
000192F2 6000 FE98                  		bra.w	loc_177E6
000192F6                            ; ===========================================================================
000192F6                            
000192F6                            loc_17954:				; XREF: Obj3D_ShipIndex
000192F6 5368 003C                  		subq.w	#1,$3C(a0)
000192FA 6B00                       		bmi.s	loc_17960
000192FC 6100 FF4A                  		bsr.w	BossMove
00019300 6000                       		bra.s	loc_17976
00019302                            ; ===========================================================================
00019302                            
00019302                            loc_17960:
00019302 0868 0000 0022             		bchg	#0,$22(a0)
00019308 317C 003F 003C             		move.w	#$3F,$3C(a0)
0001930E 5528 0025                  		subq.b	#2,$25(a0)
00019312 317C 0000 0010             		move.w	#0,$10(a0)
00019318                            
00019318                            loc_17976:
00019318 6000 FE72                  		bra.w	loc_177E6
0001931C                            ; ===========================================================================
0001931C                            
0001931C                            loc_1797A:				; XREF: Obj3D_ShipIndex
0001931C 5368 003C                  		subq.w	#1,$3C(a0)
00019320 6B00                       		bmi.s	loc_17984
00019322 6000 FEE2                  		bra.w	BossDefeated
00019326                            ; ===========================================================================
00019326                            
00019326                            loc_17984:
00019326 08E8 0000 0022             		bset	#0,$22(a0)
0001932C 08A8 0007 0022             		bclr	#7,$22(a0)
00019332 4268 0010                  		clr.w	$10(a0)
00019336 5428 0025                  		addq.b	#2,$25(a0)
0001933A 317C FFDA 003C             		move.w	#-$26,$3C(a0)
00019340 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00019344 6600                       		bne.s	locret_179AA
00019346 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
0001934C                            
0001934C                            locret_179AA:
0001934C 4E75                       		rts	
0001934E                            ; ===========================================================================
0001934E                            
0001934E                            loc_179AC:				; XREF: Obj3D_ShipIndex
0001934E 5268 003C                  		addq.w	#1,$3C(a0)
00019352 6700                       		beq.s	loc_179BC
00019354 6A00                       		bpl.s	loc_179C2
00019356 0668 0018 0012             		addi.w	#$18,$12(a0)
0001935C 6000                       		bra.s	loc_179EE
0001935E                            ; ===========================================================================
0001935E                            
0001935E                            loc_179BC:
0001935E 4268 0012                  		clr.w	$12(a0)
00019362 6000                       		bra.s	loc_179EE
00019364                            ; ===========================================================================
00019364                            
00019364                            loc_179C2:
00019364 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
0001936A 6500                       		bcs.s	loc_179DA
0001936C 6700                       		beq.s	loc_179E0
0001936E 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
00019374 6500                       		bcs.s	loc_179EE
00019376 5428 0025                  		addq.b	#2,$25(a0)
0001937A 6000                       		bra.s	loc_179EE
0001937C                            ; ===========================================================================
0001937C                            
0001937C                            loc_179DA:
0001937C 5168 0012                  		subq.w	#8,$12(a0)
00019380 6000                       		bra.s	loc_179EE
00019382                            ; ===========================================================================
00019382                            
00019382                            loc_179E0:
00019382 4268 0012                  		clr.w	$12(a0)
00019386 303C 0081                  		move.w	#$81,d0
0001938A 4EB9 0000 1476             		jsr	(PlaySound).l	; play GHZ music
00019390                            
00019390                            loc_179EE:
00019390 6100 FEB6                  		bsr.w	BossMove
00019394 6000 FDF6                  		bra.w	loc_177E6
00019398                            ; ===========================================================================
00019398                            
00019398                            loc_179F6:				; XREF: Obj3D_ShipIndex
00019398 317C 0400 0010             		move.w	#$400,$10(a0)
0001939E 317C FFC0 0012             		move.w	#-$40,$12(a0)
000193A4 0C78 2AC0 F72A             		cmpi.w	#$2AC0,($FFFFF72A).w
000193AA 6700                       		beq.s	loc_17A10
000193AC 5478 F72A                  		addq.w	#2,($FFFFF72A).w
000193B0 6000                       		bra.s	loc_17A16
000193B2                            ; ===========================================================================
000193B2                            
000193B2                            loc_17A10:
000193B2 4A28 0001                  		tst.b	1(a0)
000193B6 6A00                       		bpl.s	Obj3D_ShipDel
000193B8                            
000193B8                            loc_17A16:
000193B8 6100 FE8E                  		bsr.w	BossMove
000193BC 6000 FDCE                  		bra.w	loc_177E6
000193C0                            ; ===========================================================================
000193C0                            
000193C0                            Obj3D_ShipDel:
000193C0 4EF9 0000 E120             		jmp	DeleteObject
000193C6                            ; ===========================================================================
000193C6                            
000193C6                            Obj3D_FaceMain:				; XREF: Obj3D_Index
000193C6 7000                       		moveq	#0,d0
000193C8 7201                       		moveq	#1,d1
000193CA 2268 0034                  		movea.l	$34(a0),a1
000193CE 1029 0025                  		move.b	$25(a1),d0
000193D2 5900                       		subq.b	#4,d0
000193D4 6600                       		bne.s	loc_17A3E
000193D6 0C69 2A00 0030             		cmpi.w	#$2A00,$30(a1)
000193DC 6600                       		bne.s	loc_17A46
000193DE 7204                       		moveq	#4,d1
000193E0                            
000193E0                            loc_17A3E:
000193E0 5D00                       		subq.b	#6,d0
000193E2 6B00                       		bmi.s	loc_17A46
000193E4 720A                       		moveq	#$A,d1
000193E6 6000                       		bra.s	loc_17A5A
000193E8                            ; ===========================================================================
000193E8                            
000193E8                            loc_17A46:
000193E8 4A29 0020                  		tst.b	$20(a1)
000193EC 6600                       		bne.s	loc_17A50
000193EE 7205                       		moveq	#5,d1
000193F0 6000                       		bra.s	loc_17A5A
000193F2                            ; ===========================================================================
000193F2                            
000193F2                            loc_17A50:
000193F2 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
000193F8 6500                       		bcs.s	loc_17A5A
000193FA 7204                       		moveq	#4,d1
000193FC                            
000193FC                            loc_17A5A:
000193FC 1141 001C                  		move.b	d1,$1C(a0)
00019400 5500                       		subq.b	#2,d0
00019402 6600                       		bne.s	Obj3D_FaceDisp
00019404 117C 0006 001C             		move.b	#6,$1C(a0)
0001940A 4A28 0001                  		tst.b	1(a0)
0001940E 6A00                       		bpl.s	Obj3D_FaceDel
00019410                            
00019410                            Obj3D_FaceDisp:
00019410 6000                       		bra.s	Obj3D_Display
00019412                            ; ===========================================================================
00019412                            
00019412                            Obj3D_FaceDel:
00019412 4EF9 0000 E120             		jmp	DeleteObject
00019418                            ; ===========================================================================
00019418                            
00019418                            Obj3D_FlameMain:			; XREF: Obj3D_Index
00019418 117C 0007 001C             		move.b	#7,$1C(a0)
0001941E 2268 0034                  		movea.l	$34(a0),a1
00019422 0C29 000C 0025             		cmpi.b	#$C,$25(a1)
00019428 6600                       		bne.s	loc_17A96
0001942A 117C 000B 001C             		move.b	#$B,$1C(a0)
00019430 4A28 0001                  		tst.b	1(a0)
00019434 6A00                       		bpl.s	Obj3D_FlameDel
00019436 6000                       		bra.s	Obj3D_FlameDisp
00019438                            ; ===========================================================================
00019438                            
00019438                            loc_17A96:
00019438 3029 0010                  		move.w	$10(a1),d0
0001943C 6700                       		beq.s	Obj3D_FlameDisp
0001943E 117C 0008 001C             		move.b	#8,$1C(a0)
00019444                            
00019444                            Obj3D_FlameDisp:
00019444 6000                       		bra.s	Obj3D_Display
00019446                            ; ===========================================================================
00019446                            
00019446                            Obj3D_FlameDel:
00019446 4EF9 0000 E120             		jmp	DeleteObject
0001944C                            ; ===========================================================================
0001944C                            
0001944C                            Obj3D_Display:				; XREF: Obj3D_FaceDisp; Obj3D_FlameDisp
0001944C 2268 0034                  		movea.l	$34(a0),a1
00019450 3169 0008 0008             		move.w	8(a1),8(a0)
00019456 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001945C 1169 0022 0022             		move.b	$22(a1),$22(a0)
00019462 43F9 0000 0000             		lea	(Ani_Eggman).l,a1
00019468 4EB9 0000 B1F6             		jsr	AnimateSprite
0001946E 1028 0022                  		move.b	$22(a0),d0
00019472 0200 0003                  		andi.b	#3,d0
00019476 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001947C 8128 0001                  		or.b	d0,1(a0)
00019480 4EF9 0000 E0E4             		jmp	DisplaySprite
00019486                            ; ===========================================================================
00019486                            ; ---------------------------------------------------------------------------
00019486                            ; Object 48 - ball on a	chain that Eggman swings (GHZ)
00019486                            ; ---------------------------------------------------------------------------
00019486                            
00019486                            Obj48:					; XREF: Obj_Index
00019486 7000                       		moveq	#0,d0
00019488 1028 0024                  		move.b	$24(a0),d0
0001948C 323B 0000                  		move.w	Obj48_Index(pc,d0.w),d1
00019490 4EFB 1000                  		jmp	Obj48_Index(pc,d1.w)
00019494                            ; ===========================================================================
00019494 0000                       Obj48_Index:	dc.w Obj48_Main-Obj48_Index
00019496 0000                       		dc.w Obj48_Base-Obj48_Index
00019498 0000                       		dc.w Obj48_Display2-Obj48_Index
0001949A 0000                       		dc.w loc_17C68-Obj48_Index
0001949C 0000                       		dc.w Obj48_ChkVanish-Obj48_Index
0001949E                            ; ===========================================================================
0001949E                            
0001949E                            Obj48_Main:				; XREF: Obj48_Index
0001949E 5428 0024                  		addq.b	#2,$24(a0)
000194A2 317C 4080 0026             		move.w	#$4080,$26(a0)
000194A8 317C FE00 003E             		move.w	#-$200,$3E(a0)
000194AE 217C 0000 0000 0004        		move.l	#Map_BossItems,4(a0)
000194B6 317C 046C 0002             		move.w	#$46C,2(a0)
000194BC 45E8 0028                  		lea	$28(a0),a2
000194C0 14FC 0000                  		move.b	#0,(a2)+
000194C4 7205                       		moveq	#5,d1
000194C6 2248                       		movea.l	a0,a1
000194C8 6000                       		bra.s	loc_17B60
000194CA                            ; ===========================================================================
000194CA                            
000194CA                            Obj48_MakeLinks:
000194CA 4EB9 0000 E590             		jsr	SingleObjLoad2
000194D0 6600                       		bne.s	Obj48_MakeBall
000194D2 3368 0008 0008             		move.w	8(a0),8(a1)
000194D8 3368 000C 000C             		move.w	$C(a0),$C(a1)
000194DE 12BC 0048                  		move.b	#$48,0(a1)	; load chain link object
000194E2 137C 0006 0024             		move.b	#6,$24(a1)
000194E8 237C 0000 86CE 0004        		move.l	#Map_obj15,4(a1)
000194F0 337C 0380 0002             		move.w	#$380,2(a1)
000194F6 137C 0001 001A             		move.b	#1,$1A(a1)
000194FC 5228 0028                  		addq.b	#1,$28(a0)
00019500                            
00019500                            loc_17B60:				; XREF: Obj48_Main
00019500 3A09                       		move.w	a1,d5
00019502 0445 D000                  		subi.w	#$D000,d5
00019506 EC4D                       		lsr.w	#6,d5
00019508 0245 007F                  		andi.w	#$7F,d5
0001950C 14C5                       		move.b	d5,(a2)+
0001950E 137C 0004 0001             		move.b	#4,1(a1)
00019514 137C 0008 0019             		move.b	#8,$19(a1)
0001951A 137C 0006 0018             		move.b	#6,$18(a1)
00019520 2368 0034 0034             		move.l	$34(a0),$34(a1)
00019526 51C9 FFA2                  		dbf	d1,Obj48_MakeLinks ; repeat sequence 5 more times
0001952A                            
0001952A                            Obj48_MakeBall:
0001952A 137C 0008 0024             		move.b	#8,$24(a1)
00019530 237C 0000 8C2C 0004        		move.l	#Map_obj48,4(a1) ; load	different mappings for final link
00019538 337C 43AA 0002             		move.w	#$43AA,2(a1)	; use different	graphics
0001953E 137C 0001 001A             		move.b	#1,$1A(a1)
00019544 137C 0005 0018             		move.b	#5,$18(a1)
0001954A 137C 0081 0020             		move.b	#$81,$20(a1)	; make object hurt Sonic
00019550 4E75                       		rts	
00019552                            ; ===========================================================================
00019552                            
00019552 0010 2030 4060             Obj48_PosData:	dc.b 0,	$10, $20, $30, $40, $60	; y-position data for links and	giant ball
00019558                            
00019558                            ; ===========================================================================
00019558                            
00019558                            Obj48_Base:				; XREF: Obj48_Index
00019558 47F9 0001 9552             		lea	(Obj48_PosData).l,a3
0001955E 45E8 0028                  		lea	$28(a0),a2
00019562 7C00                       		moveq	#0,d6
00019564 1C1A                       		move.b	(a2)+,d6
00019566                            
00019566                            loc_17BC6:
00019566 7800                       		moveq	#0,d4
00019568 181A                       		move.b	(a2)+,d4
0001956A ED4C                       		lsl.w	#6,d4
0001956C 0684 00FF D000             		addi.l	#$FFD000,d4
00019572 2244                       		movea.l	d4,a1
00019574 101B                       		move.b	(a3)+,d0
00019576 B029 003C                  		cmp.b	$3C(a1),d0
0001957A 6700                       		beq.s	loc_17BE0
0001957C 5229 003C                  		addq.b	#1,$3C(a1)
00019580                            
00019580                            loc_17BE0:
00019580 51CE FFE4                  		dbf	d6,loc_17BC6
00019584                            
00019584 B029 003C                  		cmp.b	$3C(a1),d0
00019588 6600                       		bne.s	loc_17BFA
0001958A 2268 0034                  		movea.l	$34(a0),a1
0001958E 0C29 0006 0025             		cmpi.b	#6,$25(a1)
00019594 6600                       		bne.s	loc_17BFA
00019596 5428 0024                  		addq.b	#2,$24(a0)
0001959A                            
0001959A                            loc_17BFA:
0001959A 0C68 0020 0032             		cmpi.w	#$20,$32(a0)
000195A0 6700                       		beq.s	Obj48_Display
000195A2 5268 0032                  		addq.w	#1,$32(a0)
000195A6                            
000195A6                            Obj48_Display:
000195A6 6100 0000                  		bsr.w	sub_17C2A
000195AA 1028 0026                  		move.b	$26(a0),d0
000195AE 4EB9 0000 8640             		jsr	(Obj15_Move2).l
000195B4 4EF9 0000 E0E4             		jmp	DisplaySprite
000195BA                            ; ===========================================================================
000195BA                            
000195BA                            Obj48_Display2:				; XREF: Obj48_Index
000195BA 6100 0000                  		bsr.w	sub_17C2A
000195BE 4EB9 0000 8600             		jsr	(Obj48_Move).l
000195C4 4EF9 0000 E0E4             		jmp	DisplaySprite
000195CA                            
000195CA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000195CA                            
000195CA                            
000195CA                            sub_17C2A:				; XREF: Obj48_Display; Obj48_Display2
000195CA 2268 0034                  		movea.l	$34(a0),a1
000195CE 0628 0020 001B             		addi.b	#$20,$1B(a0)
000195D4 6400                       		bcc.s	loc_17C3C
000195D6 0868 0000 001A             		bchg	#0,$1A(a0)
000195DC                            
000195DC                            loc_17C3C:
000195DC 3169 0008 003A             		move.w	8(a1),$3A(a0)
000195E2 3029 000C                  		move.w	$C(a1),d0
000195E6 D068 0032                  		add.w	$32(a0),d0
000195EA 3140 0038                  		move.w	d0,$38(a0)
000195EE 1169 0022 0022             		move.b	$22(a1),$22(a0)
000195F4 4A29 0022                  		tst.b	$22(a1)
000195F8 6A00                       		bpl.s	locret_17C66
000195FA 10BC 003F                  		move.b	#$3F,0(a0)
000195FE 117C 0000 0024             		move.b	#0,$24(a0)
00019604                            
00019604                            locret_17C66:
00019604 4E75                       		rts	
00019606                            ; End of function sub_17C2A
00019606                            
00019606                            ; ===========================================================================
00019606                            
00019606                            loc_17C68:				; XREF: Obj48_Index
00019606 2268 0034                  		movea.l	$34(a0),a1
0001960A 4A29 0022                  		tst.b	$22(a1)
0001960E 6A00                       		bpl.s	Obj48_Display3
00019610 10BC 003F                  		move.b	#$3F,0(a0)
00019614 117C 0000 0024             		move.b	#0,$24(a0)
0001961A                            
0001961A                            Obj48_Display3:
0001961A 4EF9 0000 E0E4             		jmp	DisplaySprite
00019620                            ; ===========================================================================
00019620                            
00019620                            Obj48_ChkVanish:			; XREF: Obj48_Index
00019620 7000                       		moveq	#0,d0
00019622 4A28 001A                  		tst.b	$1A(a0)
00019626 6600                       		bne.s	Obj48_Vanish
00019628 5200                       		addq.b	#1,d0
0001962A                            
0001962A                            Obj48_Vanish:
0001962A 1140 001A                  		move.b	d0,$1A(a0)
0001962E 2268 0034                  		movea.l	$34(a0),a1
00019632 4A29 0022                  		tst.b	$22(a1)
00019636 6A00                       		bpl.s	Obj48_Display4
00019638 117C 0000 0020             		move.b	#0,$20(a0)
0001963E 6100 FBC6                  		bsr.w	BossDefeated
00019642 5328 003C                  		subq.b	#1,$3C(a0)
00019646 6A00                       		bpl.s	Obj48_Display4
00019648 10BC 003F                  		move.b	#$3F,(a0)
0001964C 117C 0000 0024             		move.b	#0,$24(a0)
00019652                            
00019652                            Obj48_Display4:
00019652 4EF9 0000 E0E4             		jmp	DisplaySprite
00019658                            ; ===========================================================================
00019658                            Ani_Eggman:
00019658                            	include "_anim\Eggman.asm"
00019658                            ; ---------------------------------------------------------------------------
00019658                            ; Animation script - Eggman (bosses)
00019658                            ; ---------------------------------------------------------------------------
00019658 0000                       		dc.w byte_17CD4-Ani_Eggman
0001965A 0000                       		dc.w byte_17CD8-Ani_Eggman
0001965C 0000                       		dc.w byte_17CDC-Ani_Eggman
0001965E 0000                       		dc.w byte_17CE0-Ani_Eggman
00019660 0000                       		dc.w byte_17CE4-Ani_Eggman
00019662 0000                       		dc.w byte_17CE8-Ani_Eggman
00019664 0000                       		dc.w byte_17CEC-Ani_Eggman
00019666 0000                       		dc.w byte_17CF0-Ani_Eggman
00019668 0000                       		dc.w byte_17CF4-Ani_Eggman
0001966A 0000                       		dc.w byte_17CF8-Ani_Eggman
0001966C 0000                       		dc.w byte_17CFC-Ani_Eggman
0001966E 0000                       		dc.w byte_17D00-Ani_Eggman
00019670 0F00 FF00                  byte_17CD4:	dc.b $F, 0, $FF, 0
00019674 0501 02FF                  byte_17CD8:	dc.b 5,	1, 2, $FF
00019678 0301 02FF                  byte_17CDC:	dc.b 3,	1, 2, $FF
0001967C 0101 02FF                  byte_17CE0:	dc.b 1,	1, 2, $FF
00019680 0403 04FF                  byte_17CE4:	dc.b 4,	3, 4, $FF
00019684 1F05 01FF                  byte_17CE8:	dc.b $1F, 5, 1,	$FF
00019688 0306 01FF                  byte_17CEC:	dc.b 3,	6, 1, $FF
0001968C 0F0A FF00                  byte_17CF0:	dc.b $F, $A, $FF, 0
00019690 0308 09FF                  byte_17CF4:	dc.b 3,	8, 9, $FF
00019694 0108 09FF                  byte_17CF8:	dc.b 1,	8, 9, $FF
00019698 0F07 FF00                  byte_17CFC:	dc.b $F, 7, $FF, 0
0001969C 0209 080B 0C0B 0C09 08FE+  byte_17D00:	dc.b 2,	9, 8, $B, $C, $B, $C, 9, 8, $FE, 2, 0
000196A8                            		even
000196A8                            		even
000196A8                            
000196A8                            ; ---------------------------------------------------------------------------
000196A8                            ; Sprite mappings - Eggman (boss levels)
000196A8                            ; ---------------------------------------------------------------------------
000196A8                            Map_Eggman:
000196A8                            	include "_maps\Eggman.asm"
000196A8                            ; ---------------------------------------------------------------------------
000196A8                            ; Sprite mappings - Eggman (boss levels)
000196A8                            ; ---------------------------------------------------------------------------
000196A8 0000 0000                  		dc.w byte_17D26-Map_Eggman, byte_17D45-Map_Eggman
000196AC 0000 0000                  		dc.w byte_17D50-Map_Eggman, byte_17D5B-Map_Eggman
000196B0 0000 0000                  		dc.w byte_17D6B-Map_Eggman, byte_17D7B-Map_Eggman
000196B4 0000 0000                  		dc.w byte_17D8B-Map_Eggman, byte_17D9B-Map_Eggman
000196B8 0000 0000                  		dc.w byte_17DB0-Map_Eggman, byte_17DB6-Map_Eggman
000196BC 0000 0000                  		dc.w byte_17DBC-Map_Eggman, byte_17DBD-Map_Eggman
000196C0 0000                       		dc.w byte_17DC8-Map_Eggman
000196C2 06                         byte_17D26:	dc.b 6
000196C3 EC01 000A E4               		dc.b $EC, 1, 0,	$A, $E4
000196C8 EC05 000C 0C               		dc.b $EC, 5, 0,	$C, $C
000196CD FC0E 2010 E4               		dc.b $FC, $E, $20, $10,	$E4
000196D2 FC0E 201C 04               		dc.b $FC, $E, $20, $1C,	4
000196D7 140C 2028 EC               		dc.b $14, $C, $20, $28,	$EC
000196DC 1400 202C 0C               		dc.b $14, 0, $20, $2C, $C
000196E1 02                         byte_17D45:	dc.b 2
000196E2 E404 0000 F4               		dc.b $E4, 4, 0,	0, $F4
000196E7 EC0D 0002 EC               		dc.b $EC, $D, 0, 2, $EC
000196EC 02                         byte_17D50:	dc.b 2
000196ED E404 0000 F4               		dc.b $E4, 4, 0,	0, $F4
000196F2 EC0D 0035 EC               		dc.b $EC, $D, 0, $35, $EC
000196F7 03                         byte_17D5B:	dc.b 3
000196F8 E408 003D F4               		dc.b $E4, 8, 0,	$3D, $F4
000196FD EC09 0040 EC               		dc.b $EC, 9, 0,	$40, $EC
00019702 EC05 0046 04               		dc.b $EC, 5, 0,	$46, 4
00019707 03                         byte_17D6B:	dc.b 3
00019708 E408 004A F4               		dc.b $E4, 8, 0,	$4A, $F4
0001970D EC09 004D EC               		dc.b $EC, 9, 0,	$4D, $EC
00019712 EC05 0053 04               		dc.b $EC, 5, 0,	$53, 4
00019717 03                         byte_17D7B:	dc.b 3
00019718 E408 0057 F4               		dc.b $E4, 8, 0,	$57, $F4
0001971D EC09 005A EC               		dc.b $EC, 9, 0,	$5A, $EC
00019722 EC05 0060 04               		dc.b $EC, 5, 0,	$60, 4
00019727 03                         byte_17D8B:	dc.b 3
00019728 E404 0064 04               		dc.b $E4, 4, 0,	$64, 4
0001972D E404 0000 F4               		dc.b $E4, 4, 0,	0, $F4
00019732 EC0D 0035 EC               		dc.b $EC, $D, 0, $35, $EC
00019737 04                         byte_17D9B:	dc.b 4
00019738 E409 0066 F4               		dc.b $E4, 9, 0,	$66, $F4
0001973D E408 0057 F4               		dc.b $E4, 8, 0,	$57, $F4
00019742 EC09 005A EC               		dc.b $EC, 9, 0,	$5A, $EC
00019747 EC05 0060 04               		dc.b $EC, 5, 0,	$60, 4
0001974C 01                         byte_17DB0:	dc.b 1
0001974D 0405 002D 22               		dc.b 4,	5, 0, $2D, $22
00019752 01                         byte_17DB6:	dc.b 1
00019753 0405 0031 22               		dc.b 4,	5, 0, $31, $22
00019758 00                         byte_17DBC:	dc.b 0
00019759 02                         byte_17DBD:	dc.b 2
0001975A 0008 012A 22               		dc.b 0,	8, 1, $2A, $22
0001975F 0808 112A 22               		dc.b 8,	8, $11,	$2A, $22
00019764 02                         byte_17DC8:	dc.b 2
00019765 F80B 012D 22               		dc.b $F8, $B, 1, $2D, $22
0001976A 0001 0139 3A               		dc.b 0,	1, 1, $39, $3A
00019770 00                         		even
00019770 00                         		even
00019770                            
00019770                            ; ---------------------------------------------------------------------------
00019770                            ; Sprite mappings - extra boss items (e.g. swinging ball on a chain in GHZ)
00019770                            ; ---------------------------------------------------------------------------
00019770                            Map_BossItems:
00019770                            	include "_maps\Boss items.asm"
00019770                            ; ---------------------------------------------------------------------------
00019770                            ; Sprite mappings - extra boss items (e.g. swinging ball on a chain in GHZ)
00019770                            ; ---------------------------------------------------------------------------
00019770 0000 0000                  		dc.w byte_17DE4-Map_BossItems, byte_17DEA-Map_BossItems
00019774 0000 0000                  		dc.w byte_17DF6-Map_BossItems, byte_17DFC-Map_BossItems
00019778 0000 0000                  		dc.w byte_17E02-Map_BossItems, byte_17E08-Map_BossItems
0001977C 0000 0000                  		dc.w byte_17E1E-Map_BossItems, byte_17E2A-Map_BossItems
00019780 01                         byte_17DE4:	dc.b 1
00019781 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00019786 02                         byte_17DEA:	dc.b 2
00019787 FC04 0004 F8               		dc.b $FC, 4, 0,	4, $F8
0001978C F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00019791 00                         		dc.b 0
00019792 01                         byte_17DF6:	dc.b 1
00019793 FC00 0006 FC               		dc.b $FC, 0, 0,	6, $FC
00019798 01                         byte_17DFC:	dc.b 1
00019799 1409 0007 F4               		dc.b $14, 9, 0,	7, $F4
0001979E 01                         byte_17E02:	dc.b 1
0001979F 1405 000D F8               		dc.b $14, 5, 0,	$D, $F8
000197A4 04                         byte_17E08:	dc.b 4
000197A5 F004 0011 F8               		dc.b $F0, 4, 0,	$11, $F8
000197AA F801 0013 F8               		dc.b $F8, 1, 0,	$13, $F8
000197AF F801 0813 00               		dc.b $F8, 1, 8,	$13, 0
000197B4 0804 0015 F8               		dc.b 8,	4, 0, $15, $F8
000197B9 00                         		dc.b 0
000197BA 02                         byte_17E1E:	dc.b 2
000197BB 0005 0017 00               		dc.b 0,	5, 0, $17, 0
000197C0 0000 001B 10               		dc.b 0,	0, 0, $1B, $10
000197C5 00                         		dc.b 0
000197C6 02                         byte_17E2A:	dc.b 2
000197C7 1804 001C 00               		dc.b $18, 4, 0,	$1C, 0
000197CC 000B 001E 10               		dc.b 0,	$B, 0, $1E, $10
000197D2 00                         		even
000197D2 00                         		even
000197D2                            
000197D2                            ; ===========================================================================
000197D2                            ; ---------------------------------------------------------------------------
000197D2                            ; Object 77 - Eggman (LZ)
000197D2                            ; ---------------------------------------------------------------------------
000197D2                            
000197D2                            Obj77:					; XREF: Obj_Index
000197D2 7000                       		moveq	#0,d0
000197D4 1028 0024                  		move.b	$24(a0),d0
000197D8 323B 0000                  		move.w	Obj77_Index(pc,d0.w),d1
000197DC 4EFB 1000                  		jmp	Obj77_Index(pc,d1.w)
000197E0                            ; ===========================================================================
000197E0 0000                       Obj77_Index:	dc.w Obj77_Main-Obj77_Index
000197E2 0000                       		dc.w Obj77_ShipMain-Obj77_Index
000197E4 0000                       		dc.w Obj77_FaceMain-Obj77_Index
000197E6 0000                       		dc.w Obj77_FlameMain-Obj77_Index
000197E8                            
000197E8 0200                       Obj77_ObjData:	dc.b 2,	0		; routine number, animation
000197EA 0401                       		dc.b 4,	1
000197EC 0607                       		dc.b 6,	7
000197EE                            ; ===========================================================================
000197EE                            
000197EE                            Obj77_Main:				; XREF: Obj77_Index
000197EE 317C 1E10 0008             		move.w	#$1E10,8(a0)
000197F4 317C 05C0 000C             		move.w	#$5C0,$C(a0)
000197FA 3168 0008 0030             		move.w	8(a0),$30(a0)
00019800 3168 000C 0038             		move.w	$C(a0),$38(a0)
00019806 117C 000F 0020             		move.b	#$F,$20(a0)
0001980C 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
00019812 117C 0004 0018             		move.b	#4,$18(a0)
00019818 45FA FFCE                  		lea	Obj77_ObjData(pc),a2
0001981C 2248                       		movea.l	a0,a1
0001981E 7202                       		moveq	#2,d1
00019820 6000                       		bra.s	Obj77_LoadBoss
00019822                            ; ===========================================================================
00019822                            
00019822                            Obj77_Loop:
00019822 4EB9 0000 E590             		jsr	SingleObjLoad2
00019828 6600                       		bne.s	Obj77_ShipMain
0001982A 12BC 0077                  		move.b	#$77,0(a1)
0001982E 3368 0008 0008             		move.w	8(a0),8(a1)
00019834 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001983A                            
0001983A                            Obj77_LoadBoss:				; XREF: Obj77_Main
0001983A 08A8 0000 0022             		bclr	#0,$22(a0)
00019840 4229 0025                  		clr.b	$25(a1)
00019844 135A 0024                  		move.b	(a2)+,$24(a1)
00019848 135A 001C                  		move.b	(a2)+,$1C(a1)
0001984C 1368 0018 0018             		move.b	$18(a0),$18(a1)
00019852 237C 0001 96A8 0004        		move.l	#Map_Eggman,4(a1)
0001985A 337C 0400 0002             		move.w	#$400,2(a1)
00019860 137C 0004 0001             		move.b	#4,1(a1)
00019866 137C 0020 0019             		move.b	#$20,$19(a1)
0001986C 2348 0034                  		move.l	a0,$34(a1)
00019870 51C9 FFB0                  		dbf	d1,Obj77_Loop
00019874                            
00019874                            Obj77_ShipMain:
00019874 43F8 D000                  		lea	($FFFFD000).w,a1
00019878 7000                       		moveq	#0,d0
0001987A 1028 0025                  		move.b	$25(a0),d0
0001987E 323B 0000                  		move.w	Obj77_ShipIndex(pc,d0.w),d1
00019882 4EBB 1000                  		jsr	Obj77_ShipIndex(pc,d1.w)
00019886 43F9 0001 9658             		lea	(Ani_Eggman).l,a1
0001988C 4EB9 0000 B1F6             		jsr	AnimateSprite
00019892 7003                       		moveq	#3,d0
00019894 C028 0022                  		and.b	$22(a0),d0
00019898 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001989E 8128 0001                  		or.b	d0,1(a0)
000198A2 4EF9 0000 E0E4             		jmp	DisplaySprite
000198A8                            ; ===========================================================================
000198A8 0000 0000                  Obj77_ShipIndex:dc.w loc_17F1E-Obj77_ShipIndex,	loc_17FA0-Obj77_ShipIndex
000198AC 0000 0000                  		dc.w loc_17FE0-Obj77_ShipIndex,	loc_1801E-Obj77_ShipIndex
000198B0 0000 0000                  		dc.w loc_180BC-Obj77_ShipIndex,	loc_180F6-Obj77_ShipIndex
000198B4 0000 0000                  		dc.w loc_1812A-Obj77_ShipIndex,	loc_18152-Obj77_ShipIndex
000198B8                            ; ===========================================================================
000198B8                            
000198B8                            loc_17F1E:				; XREF: Obj77_ShipIndex
000198B8 3029 0008                  		move.w	8(a1),d0
000198BC 0C40 1DA0                  		cmpi.w	#$1DA0,d0
000198C0 6500                       		bcs.s	loc_17F38
000198C2 317C FE80 0012             		move.w	#-$180,$12(a0)
000198C8 317C 0060 0010             		move.w	#$60,$10(a0)
000198CE 5428 0025                  		addq.b	#2,$25(a0)
000198D2                            
000198D2                            loc_17F38:
000198D2 6100 F974                  		bsr.w	BossMove
000198D6 3168 0038 000C             		move.w	$38(a0),$C(a0)
000198DC 3168 0030 0008             		move.w	$30(a0),8(a0)
000198E2                            
000198E2                            loc_17F48:
000198E2 4A28 003D                  		tst.b	$3D(a0)
000198E6 6600                       		bne.s	loc_17F8E
000198E8 4A28 0022                  		tst.b	$22(a0)
000198EC 6B00                       		bmi.s	loc_17F92
000198EE 4A28 0020                  		tst.b	$20(a0)
000198F2 6600                       		bne.s	locret_17F8C
000198F4 4A28 003E                  		tst.b	$3E(a0)
000198F8 6600                       		bne.s	loc_17F70
000198FA 117C 0020 003E             		move.b	#$20,$3E(a0)
00019900 303C 00AC                  		move.w	#$AC,d0
00019904 4EB9 0000 147C             		jsr	(PlaySound_Special).l
0001990A                            
0001990A                            loc_17F70:
0001990A 43F8 FB22                  		lea	($FFFFFB22).w,a1
0001990E 7000                       		moveq	#0,d0
00019910 4A51                       		tst.w	(a1)
00019912 6600                       		bne.s	loc_17F7E
00019914 303C 0EEE                  		move.w	#$EEE,d0
00019918                            
00019918                            loc_17F7E:
00019918 3280                       		move.w	d0,(a1)
0001991A 5328 003E                  		subq.b	#1,$3E(a0)
0001991E 6600                       		bne.s	locret_17F8C
00019920 117C 000F 0020             		move.b	#$F,$20(a0)
00019926                            
00019926                            locret_17F8C:
00019926 4E75                       		rts	
00019928                            ; ===========================================================================
00019928                            
00019928                            loc_17F8E:				; XREF: loc_17F48
00019928 6000 F8DC                  		bra.w	BossDefeated
0001992C                            ; ===========================================================================
0001992C                            
0001992C                            loc_17F92:				; XREF: loc_17F48
0001992C 7064                       		moveq	#100,d0
0001992E 6100 0000                  		bsr.w	AddPoints
00019932 117C 00FF 003D             		move.b	#-1,$3D(a0)
00019938 4E75                       		rts	
0001993A                            ; ===========================================================================
0001993A                            
0001993A                            loc_17FA0:				; XREF: Obj77_ShipIndex
0001993A 70FE                       		moveq	#-2,d0
0001993C 0C68 1E48 0030             		cmpi.w	#$1E48,$30(a0)
00019942 6500                       		bcs.s	loc_17FB6
00019944 317C 1E48 0030             		move.w	#$1E48,$30(a0)
0001994A 4268 0010                  		clr.w	$10(a0)
0001994E 5240                       		addq.w	#1,d0
00019950                            
00019950                            loc_17FB6:
00019950 0C68 0500 0038             		cmpi.w	#$500,$38(a0)
00019956 6E00                       		bgt.s	loc_17FCA
00019958 317C 0500 0038             		move.w	#$500,$38(a0)
0001995E 4268 0012                  		clr.w	$12(a0)
00019962 5240                       		addq.w	#1,d0
00019964                            
00019964                            loc_17FCA:
00019964 6600                       		bne.s	loc_17FDC
00019966 317C 0140 0010             		move.w	#$140,$10(a0)
0001996C 317C FE00 0012             		move.w	#-$200,$12(a0)
00019972 5428 0025                  		addq.b	#2,$25(a0)
00019976                            
00019976                            loc_17FDC:
00019976 6000 FF5A                  		bra.w	loc_17F38
0001997A                            ; ===========================================================================
0001997A                            
0001997A                            loc_17FE0:				; XREF: Obj77_ShipIndex
0001997A 70FE                       		moveq	#-2,d0
0001997C 0C68 1E70 0030             		cmpi.w	#$1E70,$30(a0)
00019982 6500                       		bcs.s	loc_17FF6
00019984 317C 1E70 0030             		move.w	#$1E70,$30(a0)
0001998A 4268 0010                  		clr.w	$10(a0)
0001998E 5240                       		addq.w	#1,d0
00019990                            
00019990                            loc_17FF6:
00019990 0C68 04C0 0038             		cmpi.w	#$4C0,$38(a0)
00019996 6E00                       		bgt.s	loc_1800A
00019998 317C 04C0 0038             		move.w	#$4C0,$38(a0)
0001999E 4268 0012                  		clr.w	$12(a0)
000199A2 5240                       		addq.w	#1,d0
000199A4                            
000199A4                            loc_1800A:
000199A4 6600                       		bne.s	loc_1801A
000199A6 317C FE80 0012             		move.w	#-$180,$12(a0)
000199AC 5428 0025                  		addq.b	#2,$25(a0)
000199B0 4228 003F                  		clr.b	$3F(a0)
000199B4                            
000199B4                            loc_1801A:
000199B4 6000 FF1C                  		bra.w	loc_17F38
000199B8                            ; ===========================================================================
000199B8                            
000199B8                            loc_1801E:				; XREF: Obj77_ShipIndex
000199B8 0C68 0100 0038             		cmpi.w	#$100,$38(a0)
000199BE 6E00                       		bgt.s	loc_1804E
000199C0 317C 0100 0038             		move.w	#$100,$38(a0)
000199C6 317C 0140 0010             		move.w	#$140,$10(a0)
000199CC 317C FF80 0012             		move.w	#-$80,$12(a0)
000199D2 4A28 003D                  		tst.b	$3D(a0)
000199D6 6700                       		beq.s	loc_18046
000199D8 E1E8 0010                  		asl	$10(a0)
000199DC E1E8 0012                  		asl	$12(a0)
000199E0                            
000199E0                            loc_18046:
000199E0 5428 0025                  		addq.b	#2,$25(a0)
000199E4 6000 FEEC                  		bra.w	loc_17F38
000199E8                            ; ===========================================================================
000199E8                            
000199E8                            loc_1804E:
000199E8 08E8 0000 0022             		bset	#0,$22(a0)
000199EE 5428 003F                  		addq.b	#2,$3F(a0)
000199F2 1028 003F                  		move.b	$3F(a0),d0
000199F6 4EB9 0000 33DA             		jsr	(CalcSine).l
000199FC 4A41                       		tst.w	d1
000199FE 6A00                       		bpl.s	loc_1806C
00019A00 08A8 0000 0022             		bclr	#0,$22(a0)
00019A06                            
00019A06                            loc_1806C:
00019A06 E840                       		asr.w	#4,d0
00019A08 4840                       		swap	d0
00019A0A 4240                       		clr.w	d0
00019A0C D0A8 0030                  		add.l	$30(a0),d0
00019A10 4840                       		swap	d0
00019A12 3140 0008                  		move.w	d0,8(a0)
00019A16 3028 0012                  		move.w	$12(a0),d0
00019A1A 3238 D00C                  		move.w	($FFFFD00C).w,d1
00019A1E 9268 000C                  		sub.w	$C(a0),d1
00019A22 6500                       		bcs.s	loc_180A2
00019A24 0441 0048                  		subi.w	#$48,d1
00019A28 6500                       		bcs.s	loc_180A2
00019A2A E240                       		asr.w	#1,d0
00019A2C 0441 0028                  		subi.w	#$28,d1
00019A30 6500                       		bcs.s	loc_180A2
00019A32 E240                       		asr.w	#1,d0
00019A34 0441 0028                  		subi.w	#$28,d1
00019A38 6500                       		bcs.s	loc_180A2
00019A3A 7000                       		moveq	#0,d0
00019A3C                            
00019A3C                            loc_180A2:
00019A3C 48C0                       		ext.l	d0
00019A3E E180                       		asl.l	#8,d0
00019A40 4A28 003D                  		tst.b	$3D(a0)
00019A44 6700                       		beq.s	loc_180AE
00019A46 D080                       		add.l	d0,d0
00019A48                            
00019A48                            loc_180AE:
00019A48 D1A8 0038                  		add.l	d0,$38(a0)
00019A4C 3168 0038 000C             		move.w	$38(a0),$C(a0)
00019A52 6000 FE8E                  		bra.w	loc_17F48
00019A56                            ; ===========================================================================
00019A56                            
00019A56                            loc_180BC:				; XREF: Obj77_ShipIndex
00019A56 70FE                       		moveq	#-2,d0
00019A58 0C68 1F4C 0030             		cmpi.w	#$1F4C,$30(a0)
00019A5E 6500                       		bcs.s	loc_180D2
00019A60 317C 1F4C 0030             		move.w	#$1F4C,$30(a0)
00019A66 4268 0010                  		clr.w	$10(a0)
00019A6A 5240                       		addq.w	#1,d0
00019A6C                            
00019A6C                            loc_180D2:
00019A6C 0C68 00C0 0038             		cmpi.w	#$C0,$38(a0)
00019A72 6E00                       		bgt.s	loc_180E6
00019A74 317C 00C0 0038             		move.w	#$C0,$38(a0)
00019A7A 4268 0012                  		clr.w	$12(a0)
00019A7E 5240                       		addq.w	#1,d0
00019A80                            
00019A80                            loc_180E6:
00019A80 6600                       		bne.s	loc_180F2
00019A82 5428 0025                  		addq.b	#2,$25(a0)
00019A86 08A8 0000 0022             		bclr	#0,$22(a0)
00019A8C                            
00019A8C                            loc_180F2:
00019A8C 6000 FE44                  		bra.w	loc_17F38
00019A90                            ; ===========================================================================
00019A90                            
00019A90                            loc_180F6:				; XREF: Obj77_ShipIndex
00019A90 4A28 003D                  		tst.b	$3D(a0)
00019A94 6600                       		bne.s	loc_18112
00019A96 0C69 1EC8 0008             		cmpi.w	#$1EC8,8(a1)
00019A9C 6D00                       		blt.s	loc_18126
00019A9E 0C69 00F0 000C             		cmpi.w	#$F0,$C(a1)
00019AA4 6E00                       		bgt.s	loc_18126
00019AA6 117C 0032 003C             		move.b	#$32,$3C(a0)
00019AAC                            
00019AAC                            loc_18112:
00019AAC 303C 0082                  		move.w	#$82,d0
00019AB0 4EB9 0000 1476             		jsr	(PlaySound).l	; play LZ music
00019AB6 08E8 0000 0022             		bset	#0,$22(a0)
00019ABC 5428 0025                  		addq.b	#2,$25(a0)
00019AC0                            
00019AC0                            loc_18126:
00019AC0 6000 FE10                  		bra.w	loc_17F38
00019AC4                            ; ===========================================================================
00019AC4                            
00019AC4                            loc_1812A:				; XREF: Obj77_ShipIndex
00019AC4 4A28 003D                  		tst.b	$3D(a0)
00019AC8 6600                       		bne.s	loc_18136
00019ACA 5328 003C                  		subq.b	#1,$3C(a0)
00019ACE 6600                       		bne.s	loc_1814E
00019AD0                            
00019AD0                            loc_18136:
00019AD0 4228 003C                  		clr.b	$3C(a0)
00019AD4 317C 0400 0010             		move.w	#$400,$10(a0)
00019ADA 317C FFC0 0012             		move.w	#-$40,$12(a0)
00019AE0 4228 003D                  		clr.b	$3D(a0)
00019AE4 5428 0025                  		addq.b	#2,$25(a0)
00019AE8                            
00019AE8                            loc_1814E:
00019AE8 6000 FDE8                  		bra.w	loc_17F38
00019AEC                            ; ===========================================================================
00019AEC                            
00019AEC                            loc_18152:				; XREF: Obj77_ShipIndex
00019AEC 0C78 2030 F72A             		cmpi.w	#$2030,($FFFFF72A).w
00019AF2 6400                       		bcc.s	loc_18160
00019AF4 5478 F72A                  		addq.w	#2,($FFFFF72A).w
00019AF8 6000                       		bra.s	loc_18166
00019AFA                            ; ===========================================================================
00019AFA                            
00019AFA                            loc_18160:
00019AFA 4A28 0001                  		tst.b	1(a0)
00019AFE 6A00                       		bpl.s	Obj77_ShipDel
00019B00                            
00019B00                            loc_18166:
00019B00 6000 FDD0                  		bra.w	loc_17F38
00019B04                            ; ===========================================================================
00019B04                            
00019B04                            Obj77_ShipDel:
00019B04 4EF9 0000 E120             		jmp	DeleteObject
00019B0A                            ; ===========================================================================
00019B0A                            
00019B0A                            Obj77_FaceMain:				; XREF: Obj77_Index
00019B0A 2268 0034                  		movea.l	$34(a0),a1
00019B0E 1011                       		move.b	(a1),d0
00019B10 B010                       		cmp.b	(a0),d0
00019B12 6600                       		bne.s	Obj77_FaceDel
00019B14 7000                       		moveq	#0,d0
00019B16 1029 0025                  		move.b	$25(a1),d0
00019B1A 7201                       		moveq	#1,d1
00019B1C 4A28 003D                  		tst.b	$3D(a0)
00019B20 6700                       		beq.s	loc_1818C
00019B22 720A                       		moveq	#$A,d1
00019B24 6000                       		bra.s	loc_181A0
00019B26                            ; ===========================================================================
00019B26                            
00019B26                            loc_1818C:
00019B26 4A29 0020                  		tst.b	$20(a1)
00019B2A 6600                       		bne.s	loc_18196
00019B2C 7205                       		moveq	#5,d1
00019B2E 6000                       		bra.s	loc_181A0
00019B30                            ; ===========================================================================
00019B30                            
00019B30                            loc_18196:
00019B30 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
00019B36 6500                       		bcs.s	loc_181A0
00019B38 7204                       		moveq	#4,d1
00019B3A                            
00019B3A                            loc_181A0:
00019B3A 1141 001C                  		move.b	d1,$1C(a0)
00019B3E 0C00 000E                  		cmpi.b	#$E,d0
00019B42 6600                       		bne.s	loc_181B6
00019B44 117C 0006 001C             		move.b	#6,$1C(a0)
00019B4A 4A28 0001                  		tst.b	1(a0)
00019B4E 6A00                       		bpl.s	Obj77_FaceDel
00019B50                            
00019B50                            loc_181B6:
00019B50 6000                       		bra.s	Obj77_Display
00019B52                            ; ===========================================================================
00019B52                            
00019B52                            Obj77_FaceDel:
00019B52 4EF9 0000 E120             		jmp	DeleteObject
00019B58                            ; ===========================================================================
00019B58                            
00019B58                            Obj77_FlameMain:			; XREF: Obj77_Index
00019B58 117C 0007 001C             		move.b	#7,$1C(a0)
00019B5E 2268 0034                  		movea.l	$34(a0),a1
00019B62 1011                       		move.b	(a1),d0
00019B64 B010                       		cmp.b	(a0),d0
00019B66 6600                       		bne.s	Obj77_FlameDel
00019B68 0C29 000E 0025             		cmpi.b	#$E,$25(a1)
00019B6E 6600                       		bne.s	loc_181F0
00019B70 117C 000B 001C             		move.b	#$B,$1C(a0)
00019B76 4A28 0001                  		tst.b	1(a0)
00019B7A 6A00                       		bpl.s	Obj77_FlameDel
00019B7C 6000                       		bra.s	loc_181F0
00019B7E                            ; ===========================================================================
00019B7E 4A69 0010                  		tst.w	$10(a1)
00019B82 6700                       		beq.s	loc_181F0
00019B84 117C 0008 001C             		move.b	#8,$1C(a0)
00019B8A                            
00019B8A                            loc_181F0:
00019B8A 6000                       		bra.s	Obj77_Display
00019B8C                            ; ===========================================================================
00019B8C                            
00019B8C                            Obj77_FlameDel:				; XREF: Obj77_FlameMain
00019B8C 4EF9 0000 E120             		jmp	DeleteObject
00019B92                            ; ===========================================================================
00019B92                            
00019B92                            Obj77_Display:
00019B92 43F9 0001 9658             		lea	(Ani_Eggman).l,a1
00019B98 4EB9 0000 B1F6             		jsr	AnimateSprite
00019B9E 2268 0034                  		movea.l	$34(a0),a1
00019BA2 3169 0008 0008             		move.w	8(a1),8(a0)
00019BA8 3169 000C 000C             		move.w	$C(a1),$C(a0)
00019BAE 1169 0022 0022             		move.b	$22(a1),$22(a0)
00019BB4 7003                       		moveq	#3,d0
00019BB6 C028 0022                  		and.b	$22(a0),d0
00019BBA 0228 00FC 0001             		andi.b	#-4,1(a0)
00019BC0 8128 0001                  		or.b	d0,1(a0)
00019BC4 4EF9 0000 E0E4             		jmp	DisplaySprite
00019BCA                            ; ===========================================================================
00019BCA                            ; ---------------------------------------------------------------------------
00019BCA                            ; Object 73 - Eggman (MZ)
00019BCA                            ; ---------------------------------------------------------------------------
00019BCA                            
00019BCA                            Obj73:					; XREF: Obj_Index
00019BCA 7000                       		moveq	#0,d0
00019BCC 1028 0024                  		move.b	$24(a0),d0
00019BD0 323B 0000                  		move.w	Obj73_Index(pc,d0.w),d1
00019BD4 4EFB 1000                  		jmp	Obj73_Index(pc,d1.w)
00019BD8                            ; ===========================================================================
00019BD8 0000                       Obj73_Index:	dc.w Obj73_Main-Obj73_Index
00019BDA 0000                       		dc.w Obj73_ShipMain-Obj73_Index
00019BDC 0000                       		dc.w Obj73_FaceMain-Obj73_Index
00019BDE 0000                       		dc.w Obj73_FlameMain-Obj73_Index
00019BE0 0000                       		dc.w Obj73_TubeMain-Obj73_Index
00019BE2                            
00019BE2 0200 04                    Obj73_ObjData:	dc.b 2,	0, 4		; routine number, animation, priority
00019BE5 0401 04                    		dc.b 4,	1, 4
00019BE8 0607 04                    		dc.b 6,	7, 4
00019BEB 0800 03                    		dc.b 8,	0, 3
00019BEE                            ; ===========================================================================
00019BEE                            
00019BEE                            Obj73_Main:				; XREF: Obj73_Index
00019BEE 3168 0008 0030             		move.w	8(a0),$30(a0)
00019BF4 3168 000C 0038             		move.w	$C(a0),$38(a0)
00019BFA 117C 000F 0020             		move.b	#$F,$20(a0)
00019C00 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
00019C06 45FA FFDA                  		lea	Obj73_ObjData(pc),a2
00019C0A 2248                       		movea.l	a0,a1
00019C0C 7203                       		moveq	#3,d1
00019C0E 6000                       		bra.s	Obj73_LoadBoss
00019C10                            ; ===========================================================================
00019C10                            
00019C10                            Obj73_Loop:
00019C10 4EB9 0000 E590             		jsr	SingleObjLoad2
00019C16 6600                       		bne.s	Obj73_ShipMain
00019C18 12BC 0073                  		move.b	#$73,0(a1)
00019C1C 3368 0008 0008             		move.w	8(a0),8(a1)
00019C22 3368 000C 000C             		move.w	$C(a0),$C(a1)
00019C28                            
00019C28                            Obj73_LoadBoss:				; XREF: Obj73_Main
00019C28 08A8 0000 0022             		bclr	#0,$22(a0)
00019C2E 4229 0025                  		clr.b	$25(a1)
00019C32 135A 0024                  		move.b	(a2)+,$24(a1)
00019C36 135A 001C                  		move.b	(a2)+,$1C(a1)
00019C3A 135A 0018                  		move.b	(a2)+,$18(a1)
00019C3E 237C 0001 96A8 0004        		move.l	#Map_Eggman,4(a1)
00019C46 337C 0400 0002             		move.w	#$400,2(a1)
00019C4C 137C 0004 0001             		move.b	#4,1(a1)
00019C52 137C 0020 0019             		move.b	#$20,$19(a1)
00019C58 2348 0034                  		move.l	a0,$34(a1)
00019C5C 51C9 FFB2                  		dbf	d1,Obj73_Loop	; repeat sequence 3 more times
00019C60                            
00019C60                            Obj73_ShipMain:
00019C60 7000                       		moveq	#0,d0
00019C62 1028 0025                  		move.b	$25(a0),d0
00019C66 323B 0000                  		move.w	Obj73_ShipIndex(pc,d0.w),d1
00019C6A 4EBB 1000                  		jsr	Obj73_ShipIndex(pc,d1.w)
00019C6E 43F9 0001 9658             		lea	(Ani_Eggman).l,a1
00019C74 4EB9 0000 B1F6             		jsr	AnimateSprite
00019C7A 7003                       		moveq	#3,d0
00019C7C C028 0022                  		and.b	$22(a0),d0
00019C80 0228 00FC 0001             		andi.b	#$FC,1(a0)
00019C86 8128 0001                  		or.b	d0,1(a0)
00019C8A 4EF9 0000 E0E4             		jmp	DisplaySprite
00019C90                            ; ===========================================================================
00019C90 0000                       Obj73_ShipIndex:dc.w loc_18302-Obj73_ShipIndex
00019C92 0000                       		dc.w loc_183AA-Obj73_ShipIndex
00019C94 0000                       		dc.w loc_184F6-Obj73_ShipIndex
00019C96 0000                       		dc.w loc_1852C-Obj73_ShipIndex
00019C98 0000                       		dc.w loc_18582-Obj73_ShipIndex
00019C9A                            ; ===========================================================================
00019C9A                            
00019C9A                            loc_18302:				; XREF: Obj73_ShipIndex
00019C9A 1028 003F                  		move.b	$3F(a0),d0
00019C9E 5428 003F                  		addq.b	#2,$3F(a0)
00019CA2 4EB9 0000 33DA             		jsr	(CalcSine).l
00019CA8 E440                       		asr.w	#2,d0
00019CAA 3140 0012                  		move.w	d0,$12(a0)
00019CAE 317C FF00 0010             		move.w	#-$100,$10(a0)
00019CB4 6100 F592                  		bsr.w	BossMove
00019CB8 0C68 1910 0030             		cmpi.w	#$1910,$30(a0)
00019CBE 6600                       		bne.s	loc_18334
00019CC0 5428 0025                  		addq.b	#2,$25(a0)
00019CC4 4228 0028                  		clr.b	$28(a0)
00019CC8 42A8 0010                  		clr.l	$10(a0)
00019CCC                            
00019CCC                            loc_18334:
00019CCC 4EB9 0000 33B4             		jsr	(RandomNumber).l
00019CD2 1140 0034                  		move.b	d0,$34(a0)
00019CD6                            
00019CD6                            loc_1833E:
00019CD6 3168 0038 000C             		move.w	$38(a0),$C(a0)
00019CDC 3168 0030 0008             		move.w	$30(a0),8(a0)
00019CE2 0C28 0004 0025             		cmpi.b	#4,$25(a0)
00019CE8 6400                       		bcc.s	locret_18390
00019CEA 4A28 0022                  		tst.b	$22(a0)
00019CEE 6B00                       		bmi.s	loc_18392
00019CF0 4A28 0020                  		tst.b	$20(a0)
00019CF4 6600                       		bne.s	locret_18390
00019CF6 4A28 003E                  		tst.b	$3E(a0)
00019CFA 6600                       		bne.s	loc_18374
00019CFC 117C 0028 003E             		move.b	#$28,$3E(a0)
00019D02 303C 00AC                  		move.w	#$AC,d0
00019D06 4EB9 0000 147C             		jsr	(PlaySound_Special).l ;	play boss damage sound
00019D0C                            
00019D0C                            loc_18374:
00019D0C 43F8 FB22                  		lea	($FFFFFB22).w,a1
00019D10 7000                       		moveq	#0,d0
00019D12 4A51                       		tst.w	(a1)
00019D14 6600                       		bne.s	loc_18382
00019D16 303C 0EEE                  		move.w	#$EEE,d0
00019D1A                            
00019D1A                            loc_18382:
00019D1A 3280                       		move.w	d0,(a1)
00019D1C 5328 003E                  		subq.b	#1,$3E(a0)
00019D20 6600                       		bne.s	locret_18390
00019D22 117C 000F 0020             		move.b	#$F,$20(a0)
00019D28                            
00019D28                            locret_18390:
00019D28 4E75                       		rts	
00019D2A                            ; ===========================================================================
00019D2A                            
00019D2A                            loc_18392:				; XREF: loc_1833E
00019D2A 7064                       		moveq	#100,d0
00019D2C 6100 0000                  		bsr.w	AddPoints
00019D30 117C 0004 0025             		move.b	#4,$25(a0)
00019D36 317C 00B4 003C             		move.w	#$B4,$3C(a0)
00019D3C 4268 0010                  		clr.w	$10(a0)
00019D40 4E75                       		rts	
00019D42                            ; ===========================================================================
00019D42                            
00019D42                            loc_183AA:				; XREF: Obj73_ShipIndex
00019D42 7000                       		moveq	#0,d0
00019D44 1028 0028                  		move.b	$28(a0),d0
00019D48 303B 0000                  		move.w	off_183C2(pc,d0.w),d0
00019D4C 4EBB 0000                  		jsr	off_183C2(pc,d0.w)
00019D50 0228 0006 0028             		andi.b	#6,$28(a0)
00019D56 6000 FF7E                  		bra.w	loc_1833E
00019D5A                            ; ===========================================================================
00019D5A 0000                       off_183C2:	dc.w loc_183CA-off_183C2
00019D5C 0000                       		dc.w Obj73_MakeLava2-off_183C2
00019D5E 0000                       		dc.w loc_183CA-off_183C2
00019D60 0000                       		dc.w Obj73_MakeLava2-off_183C2
00019D62                            ; ===========================================================================
00019D62                            
00019D62                            loc_183CA:				; XREF: off_183C2
00019D62 4A68 0010                  		tst.w	$10(a0)
00019D66 6600                       		bne.s	loc_183FE
00019D68 7040                       		moveq	#$40,d0
00019D6A 0C68 022C 0038             		cmpi.w	#$22C,$38(a0)
00019D70 6700                       		beq.s	loc_183E6
00019D72 6500                       		bcs.s	loc_183DE
00019D74 4440                       		neg.w	d0
00019D76                            
00019D76                            loc_183DE:
00019D76 3140 0012                  		move.w	d0,$12(a0)
00019D7A 6000 F4CC                  		bra.w	BossMove
00019D7E                            ; ===========================================================================
00019D7E                            
00019D7E                            loc_183E6:
00019D7E 317C 0200 0010             		move.w	#$200,$10(a0)
00019D84 317C 0100 0012             		move.w	#$100,$12(a0)
00019D8A 0828 0000 0022             		btst	#0,$22(a0)
00019D90 6600                       		bne.s	loc_183FE
00019D92 4468 0010                  		neg.w	$10(a0)
00019D96                            
00019D96                            loc_183FE:
00019D96 0C28 0018 003E             		cmpi.b	#$18,$3E(a0)
00019D9C 6400                       		bcc.s	Obj73_MakeLava
00019D9E 6100 F4A8                  		bsr.w	BossMove
00019DA2 5968 0012                  		subq.w	#4,$12(a0)
00019DA6                            
00019DA6                            Obj73_MakeLava:
00019DA6 5328 0034                  		subq.b	#1,$34(a0)
00019DAA 6400                       		bcc.s	loc_1845C
00019DAC 4EB9 0000 E57A             		jsr	SingleObjLoad
00019DB2 6600                       		bne.s	loc_1844A
00019DB4 12BC 0014                  		move.b	#$14,0(a1)	; load lava ball object
00019DB8 337C 02E8 000C             		move.w	#$2E8,$C(a1)	; set Y	position
00019DBE 4EB9 0000 33B4             		jsr	(RandomNumber).l
00019DC4 0280 0000 FFFF             		andi.l	#$FFFF,d0
00019DCA 80FC 0050                  		divu.w	#$50,d0
00019DCE 4840                       		swap	d0
00019DD0 0640 1878                  		addi.w	#$1878,d0
00019DD4 3340 0008                  		move.w	d0,8(a1)
00019DD8 EE09                       		lsr.b	#7,d1
00019DDA 337C 00FF 0028             		move.w	#$FF,$28(a1)
00019DE0                            
00019DE0                            loc_1844A:
00019DE0 4EB9 0000 33B4             		jsr	(RandomNumber).l
00019DE6 0200 001F                  		andi.b	#$1F,d0
00019DEA 0600 0040                  		addi.b	#$40,d0
00019DEE 1140 0034                  		move.b	d0,$34(a0)
00019DF2                            
00019DF2                            loc_1845C:
00019DF2 0828 0000 0022             		btst	#0,$22(a0)
00019DF8 6700                       		beq.s	loc_18474
00019DFA 0C68 1910 0030             		cmpi.w	#$1910,$30(a0)
00019E00 6D00                       		blt.s	locret_1849C
00019E02 317C 1910 0030             		move.w	#$1910,$30(a0)
00019E08 6000                       		bra.s	loc_18482
00019E0A                            ; ===========================================================================
00019E0A                            
00019E0A                            loc_18474:
00019E0A 0C68 1830 0030             		cmpi.w	#$1830,$30(a0)
00019E10 6E00                       		bgt.s	locret_1849C
00019E12 317C 1830 0030             		move.w	#$1830,$30(a0)
00019E18                            
00019E18                            loc_18482:
00019E18 4268 0010                  		clr.w	$10(a0)
00019E1C 317C FE80 0012             		move.w	#-$180,$12(a0)
00019E22 0C68 022C 0038             		cmpi.w	#$22C,$38(a0)
00019E28 6400                       		bcc.s	loc_18498
00019E2A 4468 0012                  		neg.w	$12(a0)
00019E2E                            
00019E2E                            loc_18498:
00019E2E 5428 0028                  		addq.b	#2,$28(a0)
00019E32                            
00019E32                            locret_1849C:
00019E32 4E75                       		rts	
00019E34                            ; ===========================================================================
00019E34                            
00019E34                            Obj73_MakeLava2:			; XREF: off_183C2
00019E34 6100 F412                  		bsr.w	BossMove
00019E38 3028 0038                  		move.w	$38(a0),d0
00019E3C 0440 022C                  		subi.w	#$22C,d0
00019E40 6E00                       		bgt.s	locret_184F4
00019E42 303C 022C                  		move.w	#$22C,d0
00019E46 4A68 0012                  		tst.w	$12(a0)
00019E4A 6700                       		beq.s	loc_184EA
00019E4C 4268 0012                  		clr.w	$12(a0)
00019E50 317C 0050 003C             		move.w	#$50,$3C(a0)
00019E56 0868 0000 0022             		bchg	#0,$22(a0)
00019E5C 4EB9 0000 E57A             		jsr	SingleObjLoad
00019E62 6600                       		bne.s	loc_184EA
00019E64 3368 0030 0008             		move.w	$30(a0),8(a1)
00019E6A 3368 0038 000C             		move.w	$38(a0),$C(a1)
00019E70 0669 0018 000C             		addi.w	#$18,$C(a1)
00019E76 12BC 0074                  		move.b	#$74,(a1)	; load lava ball object
00019E7A 137C 0001 0028             		move.b	#1,$28(a1)
00019E80                            
00019E80                            loc_184EA:
00019E80 5368 003C                  		subq.w	#1,$3C(a0)
00019E84 6600                       		bne.s	locret_184F4
00019E86 5428 0028                  		addq.b	#2,$28(a0)
00019E8A                            
00019E8A                            locret_184F4:
00019E8A 4E75                       		rts	
00019E8C                            ; ===========================================================================
00019E8C                            
00019E8C                            loc_184F6:				; XREF: Obj73_ShipIndex
00019E8C 5368 003C                  		subq.w	#1,$3C(a0)
00019E90 6B00                       		bmi.s	loc_18500
00019E92 6000 F372                  		bra.w	BossDefeated
00019E96                            ; ===========================================================================
00019E96                            
00019E96                            loc_18500:
00019E96 08E8 0000 0022             		bset	#0,$22(a0)
00019E9C 08A8 0007 0022             		bclr	#7,$22(a0)
00019EA2 4268 0010                  		clr.w	$10(a0)
00019EA6 5428 0025                  		addq.b	#2,$25(a0)
00019EAA 317C FFDA 003C             		move.w	#-$26,$3C(a0)
00019EB0 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00019EB4 6600                       		bne.s	locret_1852A
00019EB6 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
00019EBC 4268 0012                  		clr.w	$12(a0)
00019EC0                            
00019EC0                            locret_1852A:
00019EC0 4E75                       		rts	
00019EC2                            ; ===========================================================================
00019EC2                            
00019EC2                            loc_1852C:				; XREF: Obj73_ShipIndex
00019EC2 5268 003C                  		addq.w	#1,$3C(a0)
00019EC6 6700                       		beq.s	loc_18544
00019EC8 6A00                       		bpl.s	loc_1854E
00019ECA 0C68 0270 0038             		cmpi.w	#$270,$38(a0)
00019ED0 6400                       		bcc.s	loc_18544
00019ED2 0668 0018 0012             		addi.w	#$18,$12(a0)
00019ED8 6000                       		bra.s	loc_1857A
00019EDA                            ; ===========================================================================
00019EDA                            
00019EDA                            loc_18544:
00019EDA 4268 0012                  		clr.w	$12(a0)
00019EDE 4268 003C                  		clr.w	$3C(a0)
00019EE2 6000                       		bra.s	loc_1857A
00019EE4                            ; ===========================================================================
00019EE4                            
00019EE4                            loc_1854E:
00019EE4 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
00019EEA 6500                       		bcs.s	loc_18566
00019EEC 6700                       		beq.s	loc_1856C
00019EEE 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
00019EF4 6500                       		bcs.s	loc_1857A
00019EF6 5428 0025                  		addq.b	#2,$25(a0)
00019EFA 6000                       		bra.s	loc_1857A
00019EFC                            ; ===========================================================================
00019EFC                            
00019EFC                            loc_18566:
00019EFC 5168 0012                  		subq.w	#8,$12(a0)
00019F00 6000                       		bra.s	loc_1857A
00019F02                            ; ===========================================================================
00019F02                            
00019F02                            loc_1856C:
00019F02 4268 0012                  		clr.w	$12(a0)
00019F06 303C 0083                  		move.w	#$83,d0
00019F0A 4EB9 0000 1476             		jsr	(PlaySound).l	; play MZ music
00019F10                            
00019F10                            loc_1857A:
00019F10 6100 F336                  		bsr.w	BossMove
00019F14 6000 FDC0                  		bra.w	loc_1833E
00019F18                            ; ===========================================================================
00019F18                            
00019F18                            loc_18582:				; XREF: Obj73_ShipIndex
00019F18 317C 0500 0010             		move.w	#$500,$10(a0)
00019F1E 317C FFC0 0012             		move.w	#-$40,$12(a0)
00019F24 0C78 1960 F72A             		cmpi.w	#$1960,($FFFFF72A).w
00019F2A 6400                       		bcc.s	loc_1859C
00019F2C 5478 F72A                  		addq.w	#2,($FFFFF72A).w
00019F30 6000                       		bra.s	loc_185A2
00019F32                            ; ===========================================================================
00019F32                            
00019F32                            loc_1859C:
00019F32 4A28 0001                  		tst.b	1(a0)
00019F36 6A00                       		bpl.s	Obj73_ShipDel
00019F38                            
00019F38                            loc_185A2:
00019F38 6100 F30E                  		bsr.w	BossMove
00019F3C 6000 FD98                  		bra.w	loc_1833E
00019F40                            ; ===========================================================================
00019F40                            
00019F40                            Obj73_ShipDel:
00019F40 4EF9 0000 E120             		jmp	DeleteObject
00019F46                            ; ===========================================================================
00019F46                            
00019F46                            Obj73_FaceMain:				; XREF: Obj73_Index
00019F46 7000                       		moveq	#0,d0
00019F48 7201                       		moveq	#1,d1
00019F4A 2268 0034                  		movea.l	$34(a0),a1
00019F4E 1029 0025                  		move.b	$25(a1),d0
00019F52 5540                       		subq.w	#2,d0
00019F54 6600                       		bne.s	loc_185D2
00019F56 0829 0001 0028             		btst	#1,$28(a1)
00019F5C 6700                       		beq.s	loc_185DA
00019F5E 4A69 0012                  		tst.w	$12(a1)
00019F62 6600                       		bne.s	loc_185DA
00019F64 7204                       		moveq	#4,d1
00019F66 6000                       		bra.s	loc_185EE
00019F68                            ; ===========================================================================
00019F68                            
00019F68                            loc_185D2:
00019F68 5500                       		subq.b	#2,d0
00019F6A 6B00                       		bmi.s	loc_185DA
00019F6C 720A                       		moveq	#$A,d1
00019F6E 6000                       		bra.s	loc_185EE
00019F70                            ; ===========================================================================
00019F70                            
00019F70                            loc_185DA:
00019F70 4A29 0020                  		tst.b	$20(a1)
00019F74 6600                       		bne.s	loc_185E4
00019F76 7205                       		moveq	#5,d1
00019F78 6000                       		bra.s	loc_185EE
00019F7A                            ; ===========================================================================
00019F7A                            
00019F7A                            loc_185E4:
00019F7A 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
00019F80 6500                       		bcs.s	loc_185EE
00019F82 7204                       		moveq	#4,d1
00019F84                            
00019F84                            loc_185EE:
00019F84 1141 001C                  		move.b	d1,$1C(a0)
00019F88 5900                       		subq.b	#4,d0
00019F8A 6600                       		bne.s	loc_18602
00019F8C 117C 0006 001C             		move.b	#6,$1C(a0)
00019F92 4A28 0001                  		tst.b	1(a0)
00019F96 6A00                       		bpl.s	Obj73_FaceDel
00019F98                            
00019F98                            loc_18602:
00019F98 6000                       		bra.s	Obj73_Display
00019F9A                            ; ===========================================================================
00019F9A                            
00019F9A                            Obj73_FaceDel:
00019F9A 4EF9 0000 E120             		jmp	DeleteObject
00019FA0                            ; ===========================================================================
00019FA0                            
00019FA0                            Obj73_FlameMain:			; XREF: Obj73_Index
00019FA0 117C 0007 001C             		move.b	#7,$1C(a0)
00019FA6 2268 0034                  		movea.l	$34(a0),a1
00019FAA 0C29 0008 0025             		cmpi.b	#8,$25(a1)
00019FB0 6D00                       		blt.s	loc_1862A
00019FB2 117C 000B 001C             		move.b	#$B,$1C(a0)
00019FB8 4A28 0001                  		tst.b	1(a0)
00019FBC 6A00                       		bpl.s	Obj73_FlameDel
00019FBE 6000                       		bra.s	loc_18636
00019FC0                            ; ===========================================================================
00019FC0                            
00019FC0                            loc_1862A:
00019FC0 4A69 0010                  		tst.w	$10(a1)
00019FC4 6700                       		beq.s	loc_18636
00019FC6 117C 0008 001C             		move.b	#8,$1C(a0)
00019FCC                            
00019FCC                            loc_18636:
00019FCC 6000                       		bra.s	Obj73_Display
00019FCE                            ; ===========================================================================
00019FCE                            
00019FCE                            Obj73_FlameDel:				; XREF: Obj73_FlameMain
00019FCE 4EF9 0000 E120             		jmp	DeleteObject
00019FD4                            ; ===========================================================================
00019FD4                            
00019FD4                            Obj73_Display:
00019FD4 43F9 0001 9658             		lea	(Ani_Eggman).l,a1
00019FDA 4EB9 0000 B1F6             		jsr	AnimateSprite
00019FE0                            
00019FE0                            loc_1864A:
00019FE0 2268 0034                  		movea.l	$34(a0),a1
00019FE4 3169 0008 0008             		move.w	8(a1),8(a0)
00019FEA 3169 000C 000C             		move.w	$C(a1),$C(a0)
00019FF0 1169 0022 0022             		move.b	$22(a1),$22(a0)
00019FF6 7003                       		moveq	#3,d0
00019FF8 C028 0022                  		and.b	$22(a0),d0
00019FFC 0228 00FC 0001             		andi.b	#-4,1(a0)
0001A002 8128 0001                  		or.b	d0,1(a0)
0001A006 4EF9 0000 E0E4             		jmp	DisplaySprite
0001A00C                            ; ===========================================================================
0001A00C                            
0001A00C                            Obj73_TubeMain:				; XREF: Obj73_Index
0001A00C 2268 0034                  		movea.l	$34(a0),a1
0001A010 0C29 0008 0025             		cmpi.b	#8,$25(a1)
0001A016 6600                       		bne.s	loc_18688
0001A018 4A28 0001                  		tst.b	1(a0)
0001A01C 6A00                       		bpl.s	Obj73_TubeDel
0001A01E                            
0001A01E                            loc_18688:
0001A01E 217C 0001 9770 0004        		move.l	#Map_BossItems,4(a0)
0001A026 317C 246C 0002             		move.w	#$246C,2(a0)
0001A02C 117C 0004 001A             		move.b	#4,$1A(a0)
0001A032 60AC                       		bra.s	loc_1864A
0001A034                            ; ===========================================================================
0001A034                            
0001A034                            Obj73_TubeDel:
0001A034 4EF9 0000 E120             		jmp	DeleteObject
0001A03A                            ; ===========================================================================
0001A03A                            ; ---------------------------------------------------------------------------
0001A03A                            ; Object 74 - lava that	Eggman drops (MZ)
0001A03A                            ; ---------------------------------------------------------------------------
0001A03A                            
0001A03A                            Obj74:					; XREF: Obj_Index
0001A03A 7000                       		moveq	#0,d0
0001A03C 1028 0024                  		move.b	$24(a0),d0
0001A040 303B 0000                  		move.w	Obj74_Index(pc,d0.w),d0
0001A044 4EBB 0000                  		jsr	Obj74_Index(pc,d0.w)
0001A048 4EF9 0000 E0E4             		jmp	DisplaySprite
0001A04E                            ; ===========================================================================
0001A04E 0000                       Obj74_Index:	dc.w Obj74_Main-Obj74_Index
0001A050 0000                       		dc.w Obj74_Action-Obj74_Index
0001A052 0000                       		dc.w loc_18886-Obj74_Index
0001A054 0000                       		dc.w Obj74_Delete3-Obj74_Index
0001A056                            ; ===========================================================================
0001A056                            
0001A056                            Obj74_Main:				; XREF: Obj74_Index
0001A056 117C 0008 0016             		move.b	#8,$16(a0)
0001A05C 117C 0008 0017             		move.b	#8,$17(a0)
0001A062 217C 0000 BE4E 0004        		move.l	#Map_obj14,4(a0)
0001A06A 317C 0345 0002             		move.w	#$345,2(a0)
0001A070 117C 0004 0001             		move.b	#4,1(a0)
0001A076 117C 0005 0018             		move.b	#5,$18(a0)
0001A07C 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001A082 117C 0008 0019             		move.b	#8,$19(a0)
0001A088 5428 0024                  		addq.b	#2,$24(a0)
0001A08C 4A28 0028                  		tst.b	$28(a0)
0001A090 6600                       		bne.s	loc_1870A
0001A092 117C 008B 0020             		move.b	#$8B,$20(a0)
0001A098 5428 0024                  		addq.b	#2,$24(a0)
0001A09C 6000 0000                  		bra.w	loc_18886
0001A0A0                            ; ===========================================================================
0001A0A0                            
0001A0A0                            loc_1870A:
0001A0A0 117C 001E 0029             		move.b	#$1E,$29(a0)
0001A0A6 303C 00AE                  		move.w	#$AE,d0
0001A0AA 4EB9 0000 147C             		jsr	(PlaySound_Special).l ;	play lava sound
0001A0B0                            
0001A0B0                            Obj74_Action:				; XREF: Obj74_Index
0001A0B0 7000                       		moveq	#0,d0
0001A0B2 1028 0025                  		move.b	$25(a0),d0
0001A0B6 303B 0000                  		move.w	Obj74_Index2(pc,d0.w),d0
0001A0BA 4EBB 0000                  		jsr	Obj74_Index2(pc,d0.w)
0001A0BE 4EB9 0000 E0BE             		jsr	SpeedToPos
0001A0C4 43F9 0000 EFB2             		lea	(Ani_obj14).l,a1
0001A0CA 4EB9 0000 B1F6             		jsr	AnimateSprite
0001A0D0 0C68 02E8 000C             		cmpi.w	#$2E8,$C(a0)
0001A0D6 6200                       		bhi.s	Obj74_Delete
0001A0D8 4E75                       		rts	
0001A0DA                            ; ===========================================================================
0001A0DA                            
0001A0DA                            Obj74_Delete:
0001A0DA 4EF9 0000 E120             		jmp	DeleteObject
0001A0E0                            ; ===========================================================================
0001A0E0 0000                       Obj74_Index2:	dc.w Obj74_Drop-Obj74_Index2
0001A0E2 0000                       		dc.w Obj74_MakeFlame-Obj74_Index2
0001A0E4 0000                       		dc.w Obj74_Duplicate-Obj74_Index2
0001A0E6 0000                       		dc.w Obj74_FallEdge-Obj74_Index2
0001A0E8                            ; ===========================================================================
0001A0E8                            
0001A0E8                            Obj74_Drop:				; XREF: Obj74_Index2
0001A0E8 08E8 0001 0022             		bset	#1,$22(a0)
0001A0EE 5328 0029                  		subq.b	#1,$29(a0)
0001A0F2 6A00                       		bpl.s	locret_18780
0001A0F4 117C 008B 0020             		move.b	#$8B,$20(a0)
0001A0FA 4228 0028                  		clr.b	$28(a0)
0001A0FE 0668 0018 0012             		addi.w	#$18,$12(a0)
0001A104 08A8 0001 0022             		bclr	#1,$22(a0)
0001A10A 6100 C6BA                  		bsr.w	ObjHitFloor
0001A10E 4A41                       		tst.w	d1
0001A110 6A00                       		bpl.s	locret_18780
0001A112 5428 0025                  		addq.b	#2,$25(a0)
0001A116                            
0001A116                            locret_18780:
0001A116 4E75                       		rts	
0001A118                            ; ===========================================================================
0001A118                            
0001A118                            Obj74_MakeFlame:			; XREF: Obj74_Index2
0001A118 5568 000C                  		subq.w	#2,$C(a0)
0001A11C 08E8 0007 0002             		bset	#7,2(a0)
0001A122 317C 00A0 0010             		move.w	#$A0,$10(a0)
0001A128 4268 0012                  		clr.w	$12(a0)
0001A12C 3168 0008 0030             		move.w	8(a0),$30(a0)
0001A132 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001A138 117C 0003 0029             		move.b	#3,$29(a0)
0001A13E 4EB9 0000 E590             		jsr	SingleObjLoad2
0001A144 6600                       		bne.s	loc_187CA
0001A146 47D1                       		lea	(a1),a3
0001A148 45D0                       		lea	(a0),a2
0001A14A 7003                       		moveq	#3,d0
0001A14C                            
0001A14C                            Obj74_Loop:
0001A14C 26DA                       		move.l	(a2)+,(a3)+
0001A14E 26DA                       		move.l	(a2)+,(a3)+
0001A150 26DA                       		move.l	(a2)+,(a3)+
0001A152 26DA                       		move.l	(a2)+,(a3)+
0001A154 51C8 FFF6                  		dbf	d0,Obj74_Loop
0001A158                            
0001A158 4469 0010                  		neg.w	$10(a1)
0001A15C 5429 0025                  		addq.b	#2,$25(a1)
0001A160                            
0001A160                            loc_187CA:
0001A160 5428 0025                  		addq.b	#2,$25(a0)
0001A164 4E75                       		rts	
0001A166                            
0001A166                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001A166                            
0001A166                            
0001A166                            Obj74_Duplicate2:			; XREF: Obj74_Duplicate
0001A166 4EB9 0000 E590             		jsr	SingleObjLoad2
0001A16C 6600                       		bne.s	locret_187EE
0001A16E 3368 0008 0008             		move.w	8(a0),8(a1)
0001A174 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001A17A 12BC 0074                  		move.b	#$74,(a1)
0001A17E 337C 0067 0028             		move.w	#$67,$28(a1)
0001A184                            
0001A184                            locret_187EE:
0001A184 4E75                       		rts	
0001A186                            ; End of function Obj74_Duplicate2
0001A186                            
0001A186                            ; ===========================================================================
0001A186                            
0001A186                            Obj74_Duplicate:			; XREF: Obj74_Index2
0001A186 6100 C63E                  		bsr.w	ObjHitFloor
0001A18A 4A41                       		tst.w	d1
0001A18C 6A00                       		bpl.s	loc_18826
0001A18E 3028 0008                  		move.w	8(a0),d0
0001A192 0C40 1940                  		cmpi.w	#$1940,d0
0001A196 6E00                       		bgt.s	loc_1882C
0001A198 3228 0030                  		move.w	$30(a0),d1
0001A19C B240                       		cmp.w	d0,d1
0001A19E 6700                       		beq.s	loc_1881E
0001A1A0 0240 0010                  		andi.w	#$10,d0
0001A1A4 0241 0010                  		andi.w	#$10,d1
0001A1A8 B240                       		cmp.w	d0,d1
0001A1AA 6700                       		beq.s	loc_1881E
0001A1AC 61B8                       		bsr.s	Obj74_Duplicate2
0001A1AE 3168 0008 0032             		move.w	8(a0),$32(a0)
0001A1B4                            
0001A1B4                            loc_1881E:
0001A1B4 3168 0008 0030             		move.w	8(a0),$30(a0)
0001A1BA 4E75                       		rts	
0001A1BC                            ; ===========================================================================
0001A1BC                            
0001A1BC                            loc_18826:
0001A1BC 5428 0025                  		addq.b	#2,$25(a0)
0001A1C0 4E75                       		rts	
0001A1C2                            ; ===========================================================================
0001A1C2                            
0001A1C2                            loc_1882C:
0001A1C2 5428 0024                  		addq.b	#2,$24(a0)
0001A1C6 4E75                       		rts	
0001A1C8                            ; ===========================================================================
0001A1C8                            
0001A1C8                            Obj74_FallEdge:				; XREF: Obj74_Index2
0001A1C8 08A8 0001 0022             		bclr	#1,$22(a0)
0001A1CE 0668 0024 0012             		addi.w	#$24,$12(a0)	; make flame fall
0001A1D4 3028 0008                  		move.w	8(a0),d0
0001A1D8 9068 0032                  		sub.w	$32(a0),d0
0001A1DC 6A00                       		bpl.s	loc_1884A
0001A1DE 4440                       		neg.w	d0
0001A1E0                            
0001A1E0                            loc_1884A:
0001A1E0 0C40 0012                  		cmpi.w	#$12,d0
0001A1E4 6600                       		bne.s	loc_18856
0001A1E6 08A8 0007 0002             		bclr	#7,2(a0)
0001A1EC                            
0001A1EC                            loc_18856:
0001A1EC 6100 C5D8                  		bsr.w	ObjHitFloor
0001A1F0 4A41                       		tst.w	d1
0001A1F2 6A00                       		bpl.s	locret_1887E
0001A1F4 5328 0029                  		subq.b	#1,$29(a0)
0001A1F8 6700                       		beq.s	Obj74_Delete2
0001A1FA 4268 0012                  		clr.w	$12(a0)
0001A1FE 3168 0032 0008             		move.w	$32(a0),8(a0)
0001A204 3168 0038 000C             		move.w	$38(a0),$C(a0)
0001A20A 08E8 0007 0002             		bset	#7,2(a0)
0001A210 5528 0025                  		subq.b	#2,$25(a0)
0001A214                            
0001A214                            locret_1887E:
0001A214 4E75                       		rts	
0001A216                            ; ===========================================================================
0001A216                            
0001A216                            Obj74_Delete2:
0001A216 4EF9 0000 E120             		jmp	DeleteObject
0001A21C                            ; ===========================================================================
0001A21C                            
0001A21C                            loc_18886:				; XREF: Obj74_Index
0001A21C 08E8 0007 0002             		bset	#7,2(a0)
0001A222 5328 0029                  		subq.b	#1,$29(a0)
0001A226 6600                       		bne.s	Obj74_Animate
0001A228 117C 0001 001C             		move.b	#1,$1C(a0)
0001A22E 5968 000C                  		subq.w	#4,$C(a0)
0001A232 4228 0020                  		clr.b	$20(a0)
0001A236                            
0001A236                            Obj74_Animate:
0001A236 43F9 0000 EFB2             		lea	(Ani_obj14).l,a1
0001A23C 4EF9 0000 B1F6             		jmp	AnimateSprite
0001A242                            ; ===========================================================================
0001A242                            
0001A242                            Obj74_Delete3:				; XREF: Obj74_Index
0001A242 4EF9 0000 E120             		jmp	DeleteObject
0001A248                            ; ===========================================================================
0001A248                            
0001A248                            Obj7A_Delete:
0001A248 4EF9 0000 E120             		jmp	DeleteObject
0001A24E                            ; ===========================================================================
0001A24E                            ; ---------------------------------------------------------------------------
0001A24E                            ; Object 7A - Eggman (SLZ)
0001A24E                            ; ---------------------------------------------------------------------------
0001A24E                            
0001A24E                            Obj7A:					; XREF: Obj_Index
0001A24E 7000                       		moveq	#0,d0
0001A250 1028 0024                  		move.b	$24(a0),d0
0001A254 323B 0000                  		move.w	Obj7A_Index(pc,d0.w),d1
0001A258 4EFB 1000                  		jmp	Obj7A_Index(pc,d1.w)
0001A25C                            ; ===========================================================================
0001A25C 0000                       Obj7A_Index:	dc.w Obj7A_Main-Obj7A_Index
0001A25E 0000                       		dc.w Obj7A_ShipMain-Obj7A_Index
0001A260 0000                       		dc.w Obj7A_FaceMain-Obj7A_Index
0001A262 0000                       		dc.w Obj7A_FlameMain-Obj7A_Index
0001A264 0000                       		dc.w Obj7A_TubeMain-Obj7A_Index
0001A266                            
0001A266 0200 04                    Obj7A_ObjData:	dc.b 2,	0, 4		; routine number, animation, priority
0001A269 0401 04                    		dc.b 4,	1, 4
0001A26C 0607 04                    		dc.b 6,	7, 4
0001A26F 0800 03                    		dc.b 8,	0, 3
0001A272                            ; ===========================================================================
0001A272                            
0001A272                            Obj7A_Main:				; XREF: Obj7A_Index
0001A272 317C 2188 0008             		move.w	#$2188,8(a0)
0001A278 317C 0228 000C             		move.w	#$228,$C(a0)
0001A27E 3168 0008 0030             		move.w	8(a0),$30(a0)
0001A284 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001A28A 117C 000F 0020             		move.b	#$F,$20(a0)
0001A290 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
0001A296 45FA FFCE                  		lea	Obj7A_ObjData(pc),a2
0001A29A 2248                       		movea.l	a0,a1
0001A29C 7203                       		moveq	#3,d1
0001A29E 6000                       		bra.s	Obj7A_LoadBoss
0001A2A0                            ; ===========================================================================
0001A2A0                            
0001A2A0                            Obj7A_Loop:
0001A2A0 4EB9 0000 E590             		jsr	SingleObjLoad2
0001A2A6 6600                       		bne.s	loc_1895C
0001A2A8 12BC 007A                  		move.b	#$7A,0(a1)
0001A2AC 3368 0008 0008             		move.w	8(a0),8(a1)
0001A2B2 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001A2B8                            
0001A2B8                            Obj7A_LoadBoss:				; XREF: Obj7A_Main
0001A2B8 08A8 0000 0022             		bclr	#0,$22(a0)
0001A2BE 4229 0025                  		clr.b	$25(a1)
0001A2C2 135A 0024                  		move.b	(a2)+,$24(a1)
0001A2C6 135A 001C                  		move.b	(a2)+,$1C(a1)
0001A2CA 135A 0018                  		move.b	(a2)+,$18(a1)
0001A2CE 237C 0001 96A8 0004        		move.l	#Map_Eggman,4(a1)
0001A2D6 337C 0400 0002             		move.w	#$400,2(a1)
0001A2DC 137C 0004 0001             		move.b	#4,1(a1)
0001A2E2 137C 0020 0019             		move.b	#$20,$19(a1)
0001A2E8 2348 0034                  		move.l	a0,$34(a1)
0001A2EC 51C9 FFB2                  		dbf	d1,Obj7A_Loop	; repeat sequence 3 more times
0001A2F0                            
0001A2F0                            loc_1895C:
0001A2F0 43F8 D040                  		lea	($FFFFD040).w,a1
0001A2F4 45E8 002A                  		lea	$2A(a0),a2
0001A2F8 705E                       		moveq	#$5E,d0
0001A2FA 723E                       		moveq	#$3E,d1
0001A2FC                            
0001A2FC                            loc_18968:
0001A2FC B011                       		cmp.b	(a1),d0
0001A2FE 6600                       		bne.s	loc_18974
0001A300 4A29 0028                  		tst.b	$28(a1)
0001A304 6700                       		beq.s	loc_18974
0001A306 34C9                       		move.w	a1,(a2)+
0001A308                            
0001A308                            loc_18974:
0001A308 D2FC 0040                  		adda.w	#$40,a1
0001A30C 51C9 FFEE                  		dbf	d1,loc_18968
0001A310                            
0001A310                            Obj7A_ShipMain:				; XREF: Obj7A_Index
0001A310 7000                       		moveq	#0,d0
0001A312 1028 0025                  		move.b	$25(a0),d0
0001A316 303B 0000                  		move.w	Obj7A_ShipIndex(pc,d0.w),d0
0001A31A 4EBB 0000                  		jsr	Obj7A_ShipIndex(pc,d0.w)
0001A31E 43F9 0001 9658             		lea	(Ani_Eggman).l,a1
0001A324 4EB9 0000 B1F6             		jsr	AnimateSprite
0001A32A 7003                       		moveq	#3,d0
0001A32C C028 0022                  		and.b	$22(a0),d0
0001A330 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001A336 8128 0001                  		or.b	d0,1(a0)
0001A33A 4EF9 0000 E0E4             		jmp	DisplaySprite
0001A340                            ; ===========================================================================
0001A340 0000                       Obj7A_ShipIndex:dc.w loc_189B8-Obj7A_ShipIndex
0001A342 0000                       		dc.w loc_18A5E-Obj7A_ShipIndex
0001A344 0000                       		dc.w Obj7A_MakeBall-Obj7A_ShipIndex
0001A346 0000                       		dc.w loc_18B48-Obj7A_ShipIndex
0001A348 0000                       		dc.w loc_18B80-Obj7A_ShipIndex
0001A34A 0000                       		dc.w loc_18BC6-Obj7A_ShipIndex
0001A34C                            ; ===========================================================================
0001A34C                            
0001A34C                            loc_189B8:				; XREF: Obj7A_ShipIndex
0001A34C 317C FF00 0010             		move.w	#-$100,$10(a0)
0001A352 0C68 2120 0030             		cmpi.w	#$2120,$30(a0)
0001A358 6400                       		bcc.s	loc_189CA
0001A35A 5428 0025                  		addq.b	#2,$25(a0)
0001A35E                            
0001A35E                            loc_189CA:
0001A35E 6100 EEE8                  		bsr.w	BossMove
0001A362 1028 003F                  		move.b	$3F(a0),d0
0001A366 5428 003F                  		addq.b	#2,$3F(a0)
0001A36A 4EB9 0000 33DA             		jsr	(CalcSine).l
0001A370 EC40                       		asr.w	#6,d0
0001A372 D068 0038                  		add.w	$38(a0),d0
0001A376 3140 000C                  		move.w	d0,$C(a0)
0001A37A 3168 0030 0008             		move.w	$30(a0),8(a0)
0001A380 6000                       		bra.s	loc_189FE
0001A382                            ; ===========================================================================
0001A382                            
0001A382                            loc_189EE:
0001A382 6100 EEC4                  		bsr.w	BossMove
0001A386 3168 0038 000C             		move.w	$38(a0),$C(a0)
0001A38C 3168 0030 0008             		move.w	$30(a0),8(a0)
0001A392                            
0001A392                            loc_189FE:
0001A392 0C28 0006 0025             		cmpi.b	#6,$25(a0)
0001A398 6400                       		bcc.s	locret_18A44
0001A39A 4A28 0022                  		tst.b	$22(a0)
0001A39E 6B00                       		bmi.s	loc_18A46
0001A3A0 4A28 0020                  		tst.b	$20(a0)
0001A3A4 6600                       		bne.s	locret_18A44
0001A3A6 4A28 003E                  		tst.b	$3E(a0)
0001A3AA 6600                       		bne.s	loc_18A28
0001A3AC 117C 0020 003E             		move.b	#$20,$3E(a0)
0001A3B2 303C 00AC                  		move.w	#$AC,d0
0001A3B6 4EB9 0000 147C             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001A3BC                            
0001A3BC                            loc_18A28:
0001A3BC 43F8 FB22                  		lea	($FFFFFB22).w,a1
0001A3C0 7000                       		moveq	#0,d0
0001A3C2 4A51                       		tst.w	(a1)
0001A3C4 6600                       		bne.s	loc_18A36
0001A3C6 303C 0EEE                  		move.w	#$EEE,d0
0001A3CA                            
0001A3CA                            loc_18A36:
0001A3CA 3280                       		move.w	d0,(a1)
0001A3CC 5328 003E                  		subq.b	#1,$3E(a0)
0001A3D0 6600                       		bne.s	locret_18A44
0001A3D2 117C 000F 0020             		move.b	#$F,$20(a0)
0001A3D8                            
0001A3D8                            locret_18A44:
0001A3D8 4E75                       		rts	
0001A3DA                            ; ===========================================================================
0001A3DA                            
0001A3DA                            loc_18A46:
0001A3DA 7064                       		moveq	#100,d0
0001A3DC 6100 0000                  		bsr.w	AddPoints
0001A3E0 117C 0006 0025             		move.b	#6,$25(a0)
0001A3E6 117C 0078 003C             		move.b	#$78,$3C(a0)
0001A3EC 4268 0010                  		clr.w	$10(a0)
0001A3F0 4E75                       		rts	
0001A3F2                            ; ===========================================================================
0001A3F2                            
0001A3F2                            loc_18A5E:				; XREF: Obj7A_ShipIndex
0001A3F2 3028 0030                  		move.w	$30(a0),d0
0001A3F6 317C 0200 0010             		move.w	#$200,$10(a0)
0001A3FC 0828 0000 0022             		btst	#0,$22(a0)
0001A402 6600                       		bne.s	loc_18A7C
0001A404 4468 0010                  		neg.w	$10(a0)
0001A408 0C40 2008                  		cmpi.w	#$2008,d0
0001A40C 6E00                       		bgt.s	loc_18A88
0001A40E 6000                       		bra.s	loc_18A82
0001A410                            ; ===========================================================================
0001A410                            
0001A410                            loc_18A7C:
0001A410 0C40 2138                  		cmpi.w	#$2138,d0
0001A414 6D00                       		blt.s	loc_18A88
0001A416                            
0001A416                            loc_18A82:
0001A416 0868 0000 0022             		bchg	#0,$22(a0)
0001A41C                            
0001A41C                            loc_18A88:
0001A41C 3028 0008                  		move.w	8(a0),d0
0001A420 72FF                       		moveq	#-1,d1
0001A422 7402                       		moveq	#2,d2
0001A424 45E8 002A                  		lea	$2A(a0),a2
0001A428 7828                       		moveq	#$28,d4
0001A42A 4A68 0010                  		tst.w	$10(a0)
0001A42E 6A00                       		bpl.s	loc_18A9E
0001A430 4444                       		neg.w	d4
0001A432                            
0001A432                            loc_18A9E:
0001A432 321A                       		move.w	(a2)+,d1
0001A434 2641                       		movea.l	d1,a3
0001A436 082B 0003 0022             		btst	#3,$22(a3)
0001A43C 6600                       		bne.s	loc_18AB4
0001A43E 362B 0008                  		move.w	8(a3),d3
0001A442 D644                       		add.w	d4,d3
0001A444 9640                       		sub.w	d0,d3
0001A446 6700                       		beq.s	loc_18AC0
0001A448                            
0001A448                            loc_18AB4:
0001A448 51CA FFE8                  		dbf	d2,loc_18A9E
0001A44C                            
0001A44C 1142 0028                  		move.b	d2,$28(a0)
0001A450 6000 FF0C                  		bra.w	loc_189CA
0001A454                            ; ===========================================================================
0001A454                            
0001A454                            loc_18AC0:
0001A454 1142 0028                  		move.b	d2,$28(a0)
0001A458 5428 0025                  		addq.b	#2,$25(a0)
0001A45C 117C 0028 003C             		move.b	#$28,$3C(a0)
0001A462 6000 FEFA                  		bra.w	loc_189CA
0001A466                            ; ===========================================================================
0001A466                            
0001A466                            Obj7A_MakeBall:				; XREF: Obj7A_ShipIndex
0001A466 0C28 0028 003C             		cmpi.b	#$28,$3C(a0)
0001A46C 6600                       		bne.s	loc_18B36
0001A46E 70FF                       		moveq	#-1,d0
0001A470 1028 0028                  		move.b	$28(a0),d0
0001A474 4880                       		ext.w	d0
0001A476 6B00                       		bmi.s	loc_18B40
0001A478 5540                       		subq.w	#2,d0
0001A47A 4440                       		neg.w	d0
0001A47C D040                       		add.w	d0,d0
0001A47E 43E8 002A                  		lea	$2A(a0),a1
0001A482 3031 0000                  		move.w	(a1,d0.w),d0
0001A486 2440                       		movea.l	d0,a2
0001A488 43F8 D040                  		lea	($FFFFD040).w,a1
0001A48C 723E                       		moveq	#$3E,d1
0001A48E                            
0001A48E                            loc_18AFA:
0001A48E B0A9 003C                  		cmp.l	$3C(a1),d0
0001A492 6700                       		beq.s	loc_18B40
0001A494 D2FC 0040                  		adda.w	#$40,a1
0001A498 51C9 FFF4                  		dbf	d1,loc_18AFA
0001A49C                            
0001A49C 2F08                       		move.l	a0,-(sp)
0001A49E 41D2                       		lea	(a2),a0
0001A4A0 4EB9 0000 E590             		jsr	SingleObjLoad2
0001A4A6 205F                       		movea.l	(sp)+,a0
0001A4A8 6600                       		bne.s	loc_18B40
0001A4AA 12BC 007B                  		move.b	#$7B,(a1)	; load spiked ball object
0001A4AE 3368 0008 0008             		move.w	8(a0),8(a1)
0001A4B4 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001A4BA 0669 0020 000C             		addi.w	#$20,$C(a1)
0001A4C0 136A 0022 0022             		move.b	$22(a2),$22(a1)
0001A4C6 234A 003C                  		move.l	a2,$3C(a1)
0001A4CA                            
0001A4CA                            loc_18B36:
0001A4CA 5328 003C                  		subq.b	#1,$3C(a0)
0001A4CE 6700                       		beq.s	loc_18B40
0001A4D0 6000 FEC0                  		bra.w	loc_189FE
0001A4D4                            ; ===========================================================================
0001A4D4                            
0001A4D4                            loc_18B40:
0001A4D4 5528 0025                  		subq.b	#2,$25(a0)
0001A4D8 6000 FE84                  		bra.w	loc_189CA
0001A4DC                            ; ===========================================================================
0001A4DC                            
0001A4DC                            loc_18B48:				; XREF: Obj7A_ShipIndex
0001A4DC 5328 003C                  		subq.b	#1,$3C(a0)
0001A4E0 6B00                       		bmi.s	loc_18B52
0001A4E2 6000 ED22                  		bra.w	BossDefeated
0001A4E6                            ; ===========================================================================
0001A4E6                            
0001A4E6                            loc_18B52:
0001A4E6 5428 0025                  		addq.b	#2,$25(a0)
0001A4EA 4268 0012                  		clr.w	$12(a0)
0001A4EE 08E8 0000 0022             		bset	#0,$22(a0)
0001A4F4 08A8 0007 0022             		bclr	#7,$22(a0)
0001A4FA 4268 0010                  		clr.w	$10(a0)
0001A4FE 117C 00E8 003C             		move.b	#-$18,$3C(a0)
0001A504 4A38 F7A7                  		tst.b	($FFFFF7A7).w
0001A508 6600                       		bne.s	loc_18B7C
0001A50A 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
0001A510                            
0001A510                            loc_18B7C:
0001A510 6000 FE80                  		bra.w	loc_189FE
0001A514                            ; ===========================================================================
0001A514                            
0001A514                            loc_18B80:				; XREF: Obj7A_ShipIndex
0001A514 5228 003C                  		addq.b	#1,$3C(a0)
0001A518 6700                       		beq.s	loc_18B90
0001A51A 6A00                       		bpl.s	loc_18B96
0001A51C 0668 0018 0012             		addi.w	#$18,$12(a0)
0001A522 6000                       		bra.s	loc_18BC2
0001A524                            ; ===========================================================================
0001A524                            
0001A524                            loc_18B90:
0001A524 4268 0012                  		clr.w	$12(a0)
0001A528 6000                       		bra.s	loc_18BC2
0001A52A                            ; ===========================================================================
0001A52A                            
0001A52A                            loc_18B96:
0001A52A 0C28 0020 003C             		cmpi.b	#$20,$3C(a0)
0001A530 6500                       		bcs.s	loc_18BAE
0001A532 6700                       		beq.s	loc_18BB4
0001A534 0C28 002A 003C             		cmpi.b	#$2A,$3C(a0)
0001A53A 6500                       		bcs.s	loc_18BC2
0001A53C 5428 0025                  		addq.b	#2,$25(a0)
0001A540 6000                       		bra.s	loc_18BC2
0001A542                            ; ===========================================================================
0001A542                            
0001A542                            loc_18BAE:
0001A542 5168 0012                  		subq.w	#8,$12(a0)
0001A546 6000                       		bra.s	loc_18BC2
0001A548                            ; ===========================================================================
0001A548                            
0001A548                            loc_18BB4:
0001A548 4268 0012                  		clr.w	$12(a0)
0001A54C 303C 0084                  		move.w	#$84,d0
0001A550 4EB9 0000 1476             		jsr	(PlaySound).l	; play SLZ music
0001A556                            
0001A556                            loc_18BC2:
0001A556 6000 FE2A                  		bra.w	loc_189EE
0001A55A                            ; ===========================================================================
0001A55A                            
0001A55A                            loc_18BC6:				; XREF: Obj7A_ShipIndex
0001A55A 317C 0400 0010             		move.w	#$400,$10(a0)
0001A560 317C FFC0 0012             		move.w	#-$40,$12(a0)
0001A566 0C78 2160 F72A             		cmpi.w	#$2160,($FFFFF72A).w
0001A56C 6400                       		bcc.s	loc_18BE0
0001A56E 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0001A572 6000                       		bra.s	loc_18BE8
0001A574                            ; ===========================================================================
0001A574                            
0001A574                            loc_18BE0:
0001A574 4A28 0001                  		tst.b	1(a0)
0001A578 6A00 FCCE                  		bpl.w	Obj7A_Delete
0001A57C                            
0001A57C                            loc_18BE8:
0001A57C 6100 ECCA                  		bsr.w	BossMove
0001A580 6000 FDDC                  		bra.w	loc_189CA
0001A584                            ; ===========================================================================
0001A584                            
0001A584                            Obj7A_FaceMain:				; XREF: Obj7A_Index
0001A584 7000                       		moveq	#0,d0
0001A586 7201                       		moveq	#1,d1
0001A588 2268 0034                  		movea.l	$34(a0),a1
0001A58C 1029 0025                  		move.b	$25(a1),d0
0001A590 0C00 0006                  		cmpi.b	#6,d0
0001A594 6B00                       		bmi.s	loc_18C06
0001A596 720A                       		moveq	#$A,d1
0001A598 6000                       		bra.s	loc_18C1A
0001A59A                            ; ===========================================================================
0001A59A                            
0001A59A                            loc_18C06:
0001A59A 4A29 0020                  		tst.b	$20(a1)
0001A59E 6600                       		bne.s	loc_18C10
0001A5A0 7205                       		moveq	#5,d1
0001A5A2 6000                       		bra.s	loc_18C1A
0001A5A4                            ; ===========================================================================
0001A5A4                            
0001A5A4                            loc_18C10:
0001A5A4 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
0001A5AA 6500                       		bcs.s	loc_18C1A
0001A5AC 7204                       		moveq	#4,d1
0001A5AE                            
0001A5AE                            loc_18C1A:
0001A5AE 1141 001C                  		move.b	d1,$1C(a0)
0001A5B2 0C00 000A                  		cmpi.b	#$A,d0
0001A5B6 6600                       		bne.s	loc_18C32
0001A5B8 117C 0006 001C             		move.b	#6,$1C(a0)
0001A5BE 4A28 0001                  		tst.b	1(a0)
0001A5C2 6A00 FC84                  		bpl.w	Obj7A_Delete
0001A5C6                            
0001A5C6                            loc_18C32:
0001A5C6 6000                       		bra.s	loc_18C6C
0001A5C8                            ; ===========================================================================
0001A5C8                            
0001A5C8                            Obj7A_FlameMain:			; XREF: Obj7A_Index
0001A5C8 117C 0008 001C             		move.b	#8,$1C(a0)
0001A5CE 2268 0034                  		movea.l	$34(a0),a1
0001A5D2 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
0001A5D8 6600                       		bne.s	loc_18C56
0001A5DA 4A28 0001                  		tst.b	1(a0)
0001A5DE 6A00 FC68                  		bpl.w	Obj7A_Delete
0001A5E2 117C 000B 001C             		move.b	#$B,$1C(a0)
0001A5E8 6000                       		bra.s	loc_18C6C
0001A5EA                            ; ===========================================================================
0001A5EA                            
0001A5EA                            loc_18C56:
0001A5EA 0C29 0008 0025             		cmpi.b	#8,$25(a1)
0001A5F0 6E00                       		bgt.s	loc_18C6C
0001A5F2 0C29 0004 0025             		cmpi.b	#4,$25(a1)
0001A5F8 6D00                       		blt.s	loc_18C6C
0001A5FA 117C 0007 001C             		move.b	#7,$1C(a0)
0001A600                            
0001A600                            loc_18C6C:
0001A600 43F9 0001 9658             		lea	(Ani_Eggman).l,a1
0001A606 4EB9 0000 B1F6             		jsr	AnimateSprite
0001A60C                            
0001A60C                            loc_18C78:
0001A60C 2268 0034                  		movea.l	$34(a0),a1
0001A610 3169 0008 0008             		move.w	8(a1),8(a0)
0001A616 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001A61C 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001A622 7003                       		moveq	#3,d0
0001A624 C028 0022                  		and.b	$22(a0),d0
0001A628 0228 00FC 0001             		andi.b	#-4,1(a0)
0001A62E 8128 0001                  		or.b	d0,1(a0)
0001A632 4EF9 0000 E0E4             		jmp	DisplaySprite
0001A638                            ; ===========================================================================
0001A638                            
0001A638                            Obj7A_TubeMain:				; XREF: Obj7A_Index
0001A638 2268 0034                  		movea.l	$34(a0),a1
0001A63C 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
0001A642 6600                       		bne.s	loc_18CB8
0001A644 4A28 0001                  		tst.b	1(a0)
0001A648 6A00 FBFE                  		bpl.w	Obj7A_Delete
0001A64C                            
0001A64C                            loc_18CB8:
0001A64C 217C 0001 9770 0004        		move.l	#Map_BossItems,4(a0)
0001A654 317C 246C 0002             		move.w	#$246C,2(a0)
0001A65A 117C 0003 001A             		move.b	#3,$1A(a0)
0001A660 60AA                       		bra.s	loc_18C78
0001A662                            ; ===========================================================================
0001A662                            ; ---------------------------------------------------------------------------
0001A662                            ; Object 7B - exploding	spikeys	that Eggman drops (SLZ)
0001A662                            ; ---------------------------------------------------------------------------
0001A662                            
0001A662                            Obj7B:					; XREF: Obj_Index
0001A662 7000                       		moveq	#0,d0
0001A664 1028 0024                  		move.b	$24(a0),d0
0001A668 303B 0000                  		move.w	Obj7B_Index(pc,d0.w),d0
0001A66C 4EBB 0000                  		jsr	Obj7B_Index(pc,d0.w)
0001A670 3028 0030                  		move.w	$30(a0),d0
0001A674 0240 FF80                  		andi.w	#$FF80,d0
0001A678 3238 F700                  		move.w	($FFFFF700).w,d1
0001A67C 0441 0080                  		subi.w	#$80,d1
0001A680 0241 FF80                  		andi.w	#$FF80,d1
0001A684 9041                       		sub.w	d1,d0
0001A686 6B00 FBC0                  		bmi.w	Obj7A_Delete
0001A68A 0C40 0280                  		cmpi.w	#$280,d0
0001A68E 6200 FBB8                  		bhi.w	Obj7A_Delete
0001A692 4EF9 0000 E0E4             		jmp	DisplaySprite
0001A698                            ; ===========================================================================
0001A698 0000                       Obj7B_Index:	dc.w Obj7B_Main-Obj7B_Index
0001A69A 0000                       		dc.w Obj7B_Fall-Obj7B_Index
0001A69C 0000                       		dc.w loc_18DC6-Obj7B_Index
0001A69E 0000                       		dc.w loc_18EAA-Obj7B_Index
0001A6A0 0000                       		dc.w Obj7B_Explode-Obj7B_Index
0001A6A2 0000                       		dc.w Obj7B_MoveFrag-Obj7B_Index
0001A6A4                            ; ===========================================================================
0001A6A4                            
0001A6A4                            Obj7B_Main:				; XREF: Obj7B_Index
0001A6A4 217C 0001 24E4 0004        		move.l	#Map_obj5Ea,4(a0)
0001A6AC 317C 0518 0002             		move.w	#$518,2(a0)
0001A6B2 117C 0001 001A             		move.b	#1,$1A(a0)
0001A6B8 0028 0004 0001             		ori.b	#4,1(a0)
0001A6BE 117C 0004 0018             		move.b	#4,$18(a0)
0001A6C4 117C 008B 0020             		move.b	#$8B,$20(a0)
0001A6CA 117C 000C 0019             		move.b	#$C,$19(a0)
0001A6D0 2268 003C                  		movea.l	$3C(a0),a1
0001A6D4 3169 0008 0030             		move.w	8(a1),$30(a0)
0001A6DA 3169 000C 0034             		move.w	$C(a1),$34(a0)
0001A6E0 08E8 0000 0022             		bset	#0,$22(a0)
0001A6E6 3028 0008                  		move.w	8(a0),d0
0001A6EA B069 0008                  		cmp.w	8(a1),d0
0001A6EE 6E00                       		bgt.s	loc_18D68
0001A6F0 08A8 0000 0022             		bclr	#0,$22(a0)
0001A6F6 117C 0002 003A             		move.b	#2,$3A(a0)
0001A6FC                            
0001A6FC                            loc_18D68:
0001A6FC 5428 0024                  		addq.b	#2,$24(a0)
0001A700                            
0001A700                            Obj7B_Fall:				; XREF: Obj7B_Index
0001A700 4EB9 0000 E092             		jsr	ObjectFall
0001A706 2268 003C                  		movea.l	$3C(a0),a1
0001A70A 45F9 0000 0000             		lea	(word_19018).l,a2
0001A710 7000                       		moveq	#0,d0
0001A712 1029 001A                  		move.b	$1A(a1),d0
0001A716 3228 0008                  		move.w	8(a0),d1
0001A71A 9268 0030                  		sub.w	$30(a0),d1
0001A71E 6400                       		bcc.s	loc_18D8E
0001A720 5440                       		addq.w	#2,d0
0001A722                            
0001A722                            loc_18D8E:
0001A722 D040                       		add.w	d0,d0
0001A724 3228 0034                  		move.w	$34(a0),d1
0001A728 D272 0000                  		add.w	(a2,d0.w),d1
0001A72C B268 000C                  		cmp.w	$C(a0),d1
0001A730 6E00                       		bgt.s	locret_18DC4
0001A732 2268 003C                  		movea.l	$3C(a0),a1
0001A736 7202                       		moveq	#2,d1
0001A738 0828 0000 0022             		btst	#0,$22(a0)
0001A73E 6700                       		beq.s	loc_18DAE
0001A740 7200                       		moveq	#0,d1
0001A742                            
0001A742                            loc_18DAE:
0001A742 317C 00F0 0028             		move.w	#$F0,$28(a0)
0001A748 117C 000A 001F             		move.b	#10,$1F(a0)	; set frame duration to	10 frames
0001A74E 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
0001A754 6000 0000                  		bra.w	loc_18FA2
0001A758                            ; ===========================================================================
0001A758                            
0001A758                            locret_18DC4:
0001A758 4E75                       		rts	
0001A75A                            ; ===========================================================================
0001A75A                            
0001A75A                            loc_18DC6:				; XREF: Obj7B_Index
0001A75A 2268 003C                  		movea.l	$3C(a0),a1
0001A75E 7000                       		moveq	#0,d0
0001A760 1028 003A                  		move.b	$3A(a0),d0
0001A764 9029 003A                  		sub.b	$3A(a1),d0
0001A768 6700                       		beq.s	loc_18E2A
0001A76A 6400                       		bcc.s	loc_18DDA
0001A76C 4400                       		neg.b	d0
0001A76E                            
0001A76E                            loc_18DDA:
0001A76E 323C F7E8                  		move.w	#-$818,d1
0001A772 343C FEEC                  		move.w	#-$114,d2
0001A776 0C00 0001                  		cmpi.b	#1,d0
0001A77A 6700                       		beq.s	loc_18E00
0001A77C 323C F6A0                  		move.w	#-$960,d1
0001A780 343C FF0C                  		move.w	#-$F4,d2
0001A784 0C69 09C0 0038             		cmpi.w	#$9C0,$38(a1)
0001A78A 6D00                       		blt.s	loc_18E00
0001A78C 323C F5E0                  		move.w	#-$A20,d1
0001A790 343C FF80                  		move.w	#-$80,d2
0001A794                            
0001A794                            loc_18E00:
0001A794 3141 0012                  		move.w	d1,$12(a0)
0001A798 3142 0010                  		move.w	d2,$10(a0)
0001A79C 3028 0008                  		move.w	8(a0),d0
0001A7A0 9068 0030                  		sub.w	$30(a0),d0
0001A7A4 6400                       		bcc.s	loc_18E16
0001A7A6 4468 0010                  		neg.w	$10(a0)
0001A7AA                            
0001A7AA                            loc_18E16:
0001A7AA 117C 0001 001A             		move.b	#1,$1A(a0)
0001A7B0 317C 0020 0028             		move.w	#$20,$28(a0)
0001A7B6 5428 0024                  		addq.b	#2,$24(a0)
0001A7BA 6000 0000                  		bra.w	loc_18EAA
0001A7BE                            ; ===========================================================================
0001A7BE                            
0001A7BE                            loc_18E2A:				; XREF: loc_18DC6
0001A7BE 45F9 0000 0000             		lea	(word_19018).l,a2
0001A7C4 7000                       		moveq	#0,d0
0001A7C6 1029 001A                  		move.b	$1A(a1),d0
0001A7CA 343C 0028                  		move.w	#$28,d2
0001A7CE 3228 0008                  		move.w	8(a0),d1
0001A7D2 9268 0030                  		sub.w	$30(a0),d1
0001A7D6 6400                       		bcc.s	loc_18E48
0001A7D8 4442                       		neg.w	d2
0001A7DA 5440                       		addq.w	#2,d0
0001A7DC                            
0001A7DC                            loc_18E48:
0001A7DC D040                       		add.w	d0,d0
0001A7DE 3228 0034                  		move.w	$34(a0),d1
0001A7E2 D272 0000                  		add.w	(a2,d0.w),d1
0001A7E6 3141 000C                  		move.w	d1,$C(a0)
0001A7EA D468 0030                  		add.w	$30(a0),d2
0001A7EE 3142 0008                  		move.w	d2,8(a0)
0001A7F2 4268 000E                  		clr.w	$E(a0)
0001A7F6 4268 000A                  		clr.w	$A(a0)
0001A7FA 5368 0028                  		subq.w	#1,$28(a0)
0001A7FE 6600                       		bne.s	loc_18E7A
0001A800 317C 0020 0028             		move.w	#$20,$28(a0)
0001A806 117C 0008 0024             		move.b	#8,$24(a0)
0001A80C 4E75                       		rts	
0001A80E                            ; ===========================================================================
0001A80E                            
0001A80E                            loc_18E7A:
0001A80E 0C68 0078 0028             		cmpi.w	#$78,$28(a0)
0001A814 6600                       		bne.s	loc_18E88
0001A816 117C 0005 001F             		move.b	#5,$1F(a0)
0001A81C                            
0001A81C                            loc_18E88:
0001A81C 0C68 003C 0028             		cmpi.w	#$3C,$28(a0)
0001A822 6600                       		bne.s	loc_18E96
0001A824 117C 0002 001F             		move.b	#2,$1F(a0)
0001A82A                            
0001A82A                            loc_18E96:
0001A82A 5328 001E                  		subq.b	#1,$1E(a0)
0001A82E 6E00                       		bgt.s	locret_18EA8
0001A830 0868 0000 001A             		bchg	#0,$1A(a0)
0001A836 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
0001A83C                            
0001A83C                            locret_18EA8:
0001A83C 4E75                       		rts	
0001A83E                            ; ===========================================================================
0001A83E                            
0001A83E                            loc_18EAA:				; XREF: Obj7B_Index
0001A83E 43F8 D040                  		lea	($FFFFD040).w,a1
0001A842 707A                       		moveq	#$7A,d0
0001A844 7240                       		moveq	#$40,d1
0001A846 743E                       		moveq	#$3E,d2
0001A848                            
0001A848                            loc_18EB4:
0001A848 B011                       		cmp.b	(a1),d0
0001A84A 6700                       		beq.s	loc_18EC0
0001A84C D2C1                       		adda.w	d1,a1
0001A84E 51CA FFF8                  		dbf	d2,loc_18EB4
0001A852                            
0001A852 6000                       		bra.s	loc_18F38
0001A854                            ; ===========================================================================
0001A854                            
0001A854                            loc_18EC0:
0001A854 3029 0008                  		move.w	8(a1),d0
0001A858 3229 000C                  		move.w	$C(a1),d1
0001A85C 3428 0008                  		move.w	8(a0),d2
0001A860 3628 000C                  		move.w	$C(a0),d3
0001A864 45FA 0000                  		lea	byte_19022(pc),a2
0001A868 47FA 0000                  		lea	byte_19026(pc),a3
0001A86C 181A                       		move.b	(a2)+,d4
0001A86E 4884                       		ext.w	d4
0001A870 D044                       		add.w	d4,d0
0001A872 181B                       		move.b	(a3)+,d4
0001A874 4884                       		ext.w	d4
0001A876 D444                       		add.w	d4,d2
0001A878 B440                       		cmp.w	d0,d2
0001A87A 6500                       		bcs.s	loc_18F38
0001A87C 181A                       		move.b	(a2)+,d4
0001A87E 4884                       		ext.w	d4
0001A880 D044                       		add.w	d4,d0
0001A882 181B                       		move.b	(a3)+,d4
0001A884 4884                       		ext.w	d4
0001A886 D444                       		add.w	d4,d2
0001A888 B042                       		cmp.w	d2,d0
0001A88A 6500                       		bcs.s	loc_18F38
0001A88C 181A                       		move.b	(a2)+,d4
0001A88E 4884                       		ext.w	d4
0001A890 D244                       		add.w	d4,d1
0001A892 181B                       		move.b	(a3)+,d4
0001A894 4884                       		ext.w	d4
0001A896 D644                       		add.w	d4,d3
0001A898 B641                       		cmp.w	d1,d3
0001A89A 6500                       		bcs.s	loc_18F38
0001A89C 181A                       		move.b	(a2)+,d4
0001A89E 4884                       		ext.w	d4
0001A8A0 D244                       		add.w	d4,d1
0001A8A2 181B                       		move.b	(a3)+,d4
0001A8A4 4884                       		ext.w	d4
0001A8A6 D644                       		add.w	d4,d3
0001A8A8 B243                       		cmp.w	d3,d1
0001A8AA 6500                       		bcs.s	loc_18F38
0001A8AC 5428 0024                  		addq.b	#2,$24(a0)
0001A8B0 4268 0028                  		clr.w	$28(a0)
0001A8B4 4229 0020                  		clr.b	$20(a1)
0001A8B8 5329 0021                  		subq.b	#1,$21(a1)
0001A8BC 6600                       		bne.s	loc_18F38
0001A8BE 08E9 0007 0022             		bset	#7,$22(a1)
0001A8C4 4268 0010                  		clr.w	$10(a0)
0001A8C8 4268 0012                  		clr.w	$12(a0)
0001A8CC                            
0001A8CC                            loc_18F38:
0001A8CC 4A68 0012                  		tst.w	$12(a0)
0001A8D0 6A00                       		bpl.s	loc_18F5C
0001A8D2 4EB9 0000 E092             		jsr	ObjectFall
0001A8D8 3028 0034                  		move.w	$34(a0),d0
0001A8DC 0440 002F                  		subi.w	#$2F,d0
0001A8E0 B068 000C                  		cmp.w	$C(a0),d0
0001A8E4 6E00                       		bgt.s	loc_18F58
0001A8E6 4EB9 0000 E092             		jsr	ObjectFall
0001A8EC                            
0001A8EC                            loc_18F58:
0001A8EC 6000 FF20                  		bra.w	loc_18E7A
0001A8F0                            ; ===========================================================================
0001A8F0                            
0001A8F0                            loc_18F5C:
0001A8F0 4EB9 0000 E092             		jsr	ObjectFall
0001A8F6 2268 003C                  		movea.l	$3C(a0),a1
0001A8FA 45F9 0000 0000             		lea	(word_19018).l,a2
0001A900 7000                       		moveq	#0,d0
0001A902 1029 001A                  		move.b	$1A(a1),d0
0001A906 3228 0008                  		move.w	8(a0),d1
0001A90A 9268 0030                  		sub.w	$30(a0),d1
0001A90E 6400                       		bcc.s	loc_18F7E
0001A910 5440                       		addq.w	#2,d0
0001A912                            
0001A912                            loc_18F7E:
0001A912 D040                       		add.w	d0,d0
0001A914 3228 0034                  		move.w	$34(a0),d1
0001A918 D272 0000                  		add.w	(a2,d0.w),d1
0001A91C B268 000C                  		cmp.w	$C(a0),d1
0001A920 6ECA                       		bgt.s	loc_18F58
0001A922 2268 003C                  		movea.l	$3C(a0),a1
0001A926 7202                       		moveq	#2,d1
0001A928 4A68 0010                  		tst.w	$10(a0)
0001A92C 6B00                       		bmi.s	loc_18F9C
0001A92E 7200                       		moveq	#0,d1
0001A930                            
0001A930                            loc_18F9C:
0001A930 317C 0000 0028             		move.w	#0,$28(a0)
0001A936                            
0001A936                            loc_18FA2:
0001A936 1341 003A                  		move.b	d1,$3A(a1)
0001A93A 1141 003A                  		move.b	d1,$3A(a0)
0001A93E B229 001A                  		cmp.b	$1A(a1),d1
0001A942 6700                       		beq.s	loc_19008
0001A944 08A9 0003 0022             		bclr	#3,$22(a1)
0001A94A 6700                       		beq.s	loc_19008
0001A94C 4229 0025                  		clr.b	$25(a1)
0001A950 137C 0002 0024             		move.b	#2,$24(a1)
0001A956 45F8 D000                  		lea	($FFFFD000).w,a2
0001A95A 3568 0012 0012             		move.w	$12(a0),$12(a2)
0001A960 446A 0012                  		neg.w	$12(a2)
0001A964 0C29 0001 001A             		cmpi.b	#1,$1A(a1)
0001A96A 6600                       		bne.s	loc_18FDC
0001A96C E0EA 0012                  		asr	$12(a2)
0001A970                            
0001A970                            loc_18FDC:
0001A970 08EA 0001 0022             		bset	#1,$22(a2)
0001A976 08AA 0003 0022             		bclr	#3,$22(a2)
0001A97C 422A 003C                  		clr.b	$3C(a2)
0001A980 2F08                       		move.l	a0,-(sp)
0001A982 41D2                       		lea	(a2),a0
0001A984 4EBA 9610                  		jsr	Obj01_ChkRoll
0001A988 205F                       		movea.l	(sp)+,a0
0001A98A 157C 0002 0024             		move.b	#2,$24(a2)
0001A990 303C 00CC                  		move.w	#$CC,d0
0001A994 4EB9 0000 147C             		jsr	(PlaySound_Special).l ;	play "spring" sound
0001A99A                            
0001A99A                            loc_19008:
0001A99A 4268 0010                  		clr.w	$10(a0)
0001A99E 4268 0012                  		clr.w	$12(a0)
0001A9A2 5428 0024                  		addq.b	#2,$24(a0)
0001A9A6 6000 FE66                  		bra.w	loc_18E7A
0001A9AA                            ; ===========================================================================
0001A9AA FFF8 FFE4 FFD1 FFE4 FFF8   word_19018:	dc.w $FFF8, $FFE4, $FFD1, $FFE4, $FFF8
0001A9B4                            		even
0001A9B4 E830 E830                  byte_19022:	dc.b $E8, $30, $E8, $30
0001A9B8                            		even
0001A9B8 08F0 08F0                  byte_19026:	dc.b 8,	$F0, 8,	$F0
0001A9BC                            		even
0001A9BC                            ; ===========================================================================
0001A9BC                            
0001A9BC                            Obj7B_Explode:				; XREF: Obj7B_Index
0001A9BC 10BC 003F                  		move.b	#$3F,(a0)
0001A9C0 4228 0024                  		clr.b	$24(a0)
0001A9C4 0C68 0020 0028             		cmpi.w	#$20,$28(a0)
0001A9CA 6700                       		beq.s	Obj7B_MakeFrag
0001A9CC 4E75                       		rts	
0001A9CE                            ; ===========================================================================
0001A9CE                            
0001A9CE                            Obj7B_MakeFrag:
0001A9CE 3168 0034 000C             		move.w	$34(a0),$C(a0)
0001A9D4 7203                       		moveq	#3,d1
0001A9D6 45FA 0000                  		lea	Obj7B_FragSpeed(pc),a2
0001A9DA                            
0001A9DA                            Obj7B_Loop:
0001A9DA 4EB9 0000 E57A             		jsr	SingleObjLoad
0001A9E0 6600                       		bne.s	loc_1909A
0001A9E2 12BC 007B                  		move.b	#$7B,(a1)	; load shrapnel	object
0001A9E6 137C 000A 0024             		move.b	#$A,$24(a1)
0001A9EC 237C 0000 0000 0004        		move.l	#Map_obj7B,4(a1)
0001A9F4 137C 0003 0018             		move.b	#3,$18(a1)
0001A9FA 337C 0518 0002             		move.w	#$518,2(a1)
0001AA00 3368 0008 0008             		move.w	8(a0),8(a1)
0001AA06 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001AA0C 335A 0010                  		move.w	(a2)+,$10(a1)
0001AA10 335A 0012                  		move.w	(a2)+,$12(a1)
0001AA14 137C 0098 0020             		move.b	#$98,$20(a1)
0001AA1A 0029 0004 0001             		ori.b	#4,1(a1)
0001AA20 08E9 0007 0001             		bset	#7,1(a1)
0001AA26 137C 000C 0019             		move.b	#$C,$19(a1)
0001AA2C                            
0001AA2C                            loc_1909A:
0001AA2C 51C9 FFAC                  		dbf	d1,Obj7B_Loop	; repeat sequence 3 more times
0001AA30                            
0001AA30 4E75                       		rts	
0001AA32                            ; ===========================================================================
0001AA32 FF00 FCC0                  Obj7B_FragSpeed:dc.w $FF00, $FCC0	; horizontal, vertical
0001AA36 FF60 FDC0                  		dc.w $FF60, $FDC0
0001AA3A 0100 FCC0                  		dc.w $100, $FCC0
0001AA3E 00A0 FDC0                  		dc.w $A0, $FDC0
0001AA42                            ; ===========================================================================
0001AA42                            
0001AA42                            Obj7B_MoveFrag:				; XREF: Obj7B_Index
0001AA42 4EB9 0000 E0BE             		jsr	SpeedToPos
0001AA48 3168 0008 0030             		move.w	8(a0),$30(a0)
0001AA4E 3168 000C 0034             		move.w	$C(a0),$34(a0)
0001AA54 0668 0018 0012             		addi.w	#$18,$12(a0)
0001AA5A 7004                       		moveq	#4,d0
0001AA5C C078 FE0E                  		and.w	($FFFFFE0E).w,d0
0001AA60 E448                       		lsr.w	#2,d0
0001AA62 1140 001A                  		move.b	d0,$1A(a0)
0001AA66 4A28 0001                  		tst.b	1(a0)
0001AA6A 6A00 F7DC                  		bpl.w	Obj7A_Delete
0001AA6E 4E75                       		rts	
0001AA70                            ; ===========================================================================
0001AA70                            ; ---------------------------------------------------------------------------
0001AA70                            ; Sprite mappings - exploding spikeys that the SLZ boss	drops
0001AA70                            ; ---------------------------------------------------------------------------
0001AA70                            Map_obj7B:
0001AA70                            	include "_maps\obj7B.asm"
0001AA70                            ; ---------------------------------------------------------------------------
0001AA70                            ; Sprite mappings - exploding spikeys that the SLZ boss	drops
0001AA70                            ; ---------------------------------------------------------------------------
0001AA70 0000                       		dc.w byte_190E2-Map_obj7B
0001AA72 0000                       		dc.w byte_190E8-Map_obj7B
0001AA74 01                         byte_190E2:	dc.b 1
0001AA75 FC00 0027 FC               		dc.b $FC, 0, 0,	$27, $FC
0001AA7A 01                         byte_190E8:	dc.b 1
0001AA7B FC00 0028 FC               		dc.b $FC, 0, 0,	$28, $FC
0001AA80                            		even
0001AA80                            		even
0001AA80                            
0001AA80                            ; ===========================================================================
0001AA80                            ; ---------------------------------------------------------------------------
0001AA80                            ; Object 75 - Eggman (SYZ)
0001AA80                            ; ---------------------------------------------------------------------------
0001AA80                            
0001AA80                            Obj75:					; XREF: Obj_Index
0001AA80 7000                       		moveq	#0,d0
0001AA82 1028 0024                  		move.b	$24(a0),d0
0001AA86 323B 0000                  		move.w	Obj75_Index(pc,d0.w),d1
0001AA8A 4EFB 1000                  		jmp	Obj75_Index(pc,d1.w)
0001AA8E                            ; ===========================================================================
0001AA8E 0000                       Obj75_Index:	dc.w Obj75_Main-Obj75_Index
0001AA90 0000                       		dc.w Obj75_ShipMain-Obj75_Index
0001AA92 0000                       		dc.w Obj75_FaceMain-Obj75_Index
0001AA94 0000                       		dc.w Obj75_FlameMain-Obj75_Index
0001AA96 0000                       		dc.w Obj75_SpikeMain-Obj75_Index
0001AA98                            
0001AA98 0200 05                    Obj75_ObjData:	dc.b 2,	0, 5		; routine number, animation, priority
0001AA9B 0401 05                    		dc.b 4,	1, 5
0001AA9E 0607 05                    		dc.b 6,	7, 5
0001AAA1 0800 05                    		dc.b 8,	0, 5
0001AAA4                            ; ===========================================================================
0001AAA4                            
0001AAA4                            Obj75_Main:				; XREF: Obj75_Index
0001AAA4 317C 2DB0 0008             		move.w	#$2DB0,8(a0)
0001AAAA 317C 04DA 000C             		move.w	#$4DA,$C(a0)
0001AAB0 3168 0008 0030             		move.w	8(a0),$30(a0)
0001AAB6 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001AABC 117C 000F 0020             		move.b	#$F,$20(a0)
0001AAC2 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
0001AAC8 45FA FFCE                  		lea	Obj75_ObjData(pc),a2
0001AACC 2248                       		movea.l	a0,a1
0001AACE 7203                       		moveq	#3,d1
0001AAD0 6000                       		bra.s	Obj75_LoadBoss
0001AAD2                            ; ===========================================================================
0001AAD2                            
0001AAD2                            Obj75_Loop:
0001AAD2 4EB9 0000 E590             		jsr	SingleObjLoad2
0001AAD8 6600                       		bne.s	Obj75_ShipMain
0001AADA 12BC 0075                  		move.b	#$75,(a1)
0001AADE 3368 0008 0008             		move.w	8(a0),8(a1)
0001AAE4 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001AAEA                            
0001AAEA                            Obj75_LoadBoss:				; XREF: Obj75_Main
0001AAEA 08A8 0000 0022             		bclr	#0,$22(a0)
0001AAF0 4229 0025                  		clr.b	$25(a1)
0001AAF4 135A 0024                  		move.b	(a2)+,$24(a1)
0001AAF8 135A 001C                  		move.b	(a2)+,$1C(a1)
0001AAFC 135A 0018                  		move.b	(a2)+,$18(a1)
0001AB00 237C 0001 96A8 0004        		move.l	#Map_Eggman,4(a1)
0001AB08 337C 0400 0002             		move.w	#$400,2(a1)
0001AB0E 137C 0004 0001             		move.b	#4,1(a1)
0001AB14 137C 0020 0019             		move.b	#$20,$19(a1)
0001AB1A 2348 0034                  		move.l	a0,$34(a1)
0001AB1E 51C9 FFB2                  		dbf	d1,Obj75_Loop	; repeat sequence 3 more times
0001AB22                            
0001AB22                            Obj75_ShipMain:				; XREF: Obj75_Index
0001AB22 7000                       		moveq	#0,d0
0001AB24 1028 0025                  		move.b	$25(a0),d0
0001AB28 323B 0000                  		move.w	Obj75_ShipIndex(pc,d0.w),d1
0001AB2C 4EBB 1000                  		jsr	Obj75_ShipIndex(pc,d1.w)
0001AB30 43F9 0001 9658             		lea	(Ani_Eggman).l,a1
0001AB36 4EB9 0000 B1F6             		jsr	AnimateSprite
0001AB3C 7003                       		moveq	#3,d0
0001AB3E C028 0022                  		and.b	$22(a0),d0
0001AB42 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001AB48 8128 0001                  		or.b	d0,1(a0)
0001AB4C 4EF9 0000 E0E4             		jmp	DisplaySprite
0001AB52                            ; ===========================================================================
0001AB52 0000 0000                  Obj75_ShipIndex:dc.w loc_191CC-Obj75_ShipIndex,	loc_19270-Obj75_ShipIndex
0001AB56 0000 0000                  		dc.w loc_192EC-Obj75_ShipIndex,	loc_19474-Obj75_ShipIndex
0001AB5A 0000 0000                  		dc.w loc_194AC-Obj75_ShipIndex,	loc_194F2-Obj75_ShipIndex
0001AB5E                            ; ===========================================================================
0001AB5E                            
0001AB5E                            loc_191CC:				; XREF: Obj75_ShipIndex
0001AB5E 317C FF00 0010             		move.w	#-$100,$10(a0)
0001AB64 0C68 2D38 0030             		cmpi.w	#$2D38,$30(a0)
0001AB6A 6400                       		bcc.s	loc_191DE
0001AB6C 5428 0025                  		addq.b	#2,$25(a0)
0001AB70                            
0001AB70                            loc_191DE:
0001AB70 1028 003F                  		move.b	$3F(a0),d0
0001AB74 5428 003F                  		addq.b	#2,$3F(a0)
0001AB78 4EB9 0000 33DA             		jsr	(CalcSine).l
0001AB7E E440                       		asr.w	#2,d0
0001AB80 3140 0012                  		move.w	d0,$12(a0)
0001AB84                            
0001AB84                            loc_191F2:
0001AB84 6100 E6C2                  		bsr.w	BossMove
0001AB88 3168 0038 000C             		move.w	$38(a0),$C(a0)
0001AB8E 3168 0030 0008             		move.w	$30(a0),8(a0)
0001AB94                            
0001AB94                            loc_19202:
0001AB94 3028 0008                  		move.w	8(a0),d0
0001AB98 0440 2C00                  		subi.w	#$2C00,d0
0001AB9C EA48                       		lsr.w	#5,d0
0001AB9E 1140 0034                  		move.b	d0,$34(a0)
0001ABA2 0C28 0006 0025             		cmpi.b	#6,$25(a0)
0001ABA8 6400                       		bcc.s	locret_19256
0001ABAA 4A28 0022                  		tst.b	$22(a0)
0001ABAE 6B00                       		bmi.s	loc_19258
0001ABB0 4A28 0020                  		tst.b	$20(a0)
0001ABB4 6600                       		bne.s	locret_19256
0001ABB6 4A28 003E                  		tst.b	$3E(a0)
0001ABBA 6600                       		bne.s	loc_1923A
0001ABBC 117C 0020 003E             		move.b	#$20,$3E(a0)
0001ABC2 303C 00AC                  		move.w	#$AC,d0
0001ABC6 4EB9 0000 147C             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001ABCC                            
0001ABCC                            loc_1923A:
0001ABCC 43F8 FB22                  		lea	($FFFFFB22).w,a1
0001ABD0 7000                       		moveq	#0,d0
0001ABD2 4A51                       		tst.w	(a1)
0001ABD4 6600                       		bne.s	loc_19248
0001ABD6 303C 0EEE                  		move.w	#$EEE,d0
0001ABDA                            
0001ABDA                            loc_19248:
0001ABDA 3280                       		move.w	d0,(a1)
0001ABDC 5328 003E                  		subq.b	#1,$3E(a0)
0001ABE0 6600                       		bne.s	locret_19256
0001ABE2 117C 000F 0020             		move.b	#$F,$20(a0)
0001ABE8                            
0001ABE8                            locret_19256:
0001ABE8 4E75                       		rts	
0001ABEA                            ; ===========================================================================
0001ABEA                            
0001ABEA                            loc_19258:				; XREF: loc_19202
0001ABEA 7064                       		moveq	#100,d0
0001ABEC 6100 0000                  		bsr.w	AddPoints
0001ABF0 117C 0006 0025             		move.b	#6,$25(a0)
0001ABF6 317C 00B4 003C             		move.w	#$B4,$3C(a0)
0001ABFC 4268 0010                  		clr.w	$10(a0)
0001AC00 4E75                       		rts	
0001AC02                            ; ===========================================================================
0001AC02                            
0001AC02                            loc_19270:				; XREF: Obj75_ShipIndex
0001AC02 3028 0030                  		move.w	$30(a0),d0
0001AC06 317C 0140 0010             		move.w	#$140,$10(a0)
0001AC0C 0828 0000 0022             		btst	#0,$22(a0)
0001AC12 6600                       		bne.s	loc_1928E
0001AC14 4468 0010                  		neg.w	$10(a0)
0001AC18 0C40 2C08                  		cmpi.w	#$2C08,d0
0001AC1C 6E00                       		bgt.s	loc_1929E
0001AC1E 6000                       		bra.s	loc_19294
0001AC20                            ; ===========================================================================
0001AC20                            
0001AC20                            loc_1928E:
0001AC20 0C40 2D38                  		cmpi.w	#$2D38,d0
0001AC24 6D00                       		blt.s	loc_1929E
0001AC26                            
0001AC26                            loc_19294:
0001AC26 0868 0000 0022             		bchg	#0,$22(a0)
0001AC2C 4228 003D                  		clr.b	$3D(a0)
0001AC30                            
0001AC30                            loc_1929E:
0001AC30 0440 2C10                  		subi.w	#$2C10,d0
0001AC34 0240 001F                  		andi.w	#$1F,d0
0001AC38 0440 001F                  		subi.w	#$1F,d0
0001AC3C 6A00                       		bpl.s	loc_192AE
0001AC3E 4440                       		neg.w	d0
0001AC40                            
0001AC40                            loc_192AE:
0001AC40 5340                       		subq.w	#1,d0
0001AC42 6E00                       		bgt.s	loc_192E8
0001AC44 4A28 003D                  		tst.b	$3D(a0)
0001AC48 6600                       		bne.s	loc_192E8
0001AC4A 3238 D008                  		move.w	($FFFFD008).w,d1
0001AC4E 0441 2C00                  		subi.w	#$2C00,d1
0001AC52 EA41                       		asr.w	#5,d1
0001AC54 B228 0034                  		cmp.b	$34(a0),d1
0001AC58 6600                       		bne.s	loc_192E8
0001AC5A 7000                       		moveq	#0,d0
0001AC5C 1028 0034                  		move.b	$34(a0),d0
0001AC60 EB40                       		asl.w	#5,d0
0001AC62 0640 2C10                  		addi.w	#$2C10,d0
0001AC66 3140 0030                  		move.w	d0,$30(a0)
0001AC6A 6100 0000                  		bsr.w	Obj75_FindBlocks
0001AC6E 5428 0025                  		addq.b	#2,$25(a0)
0001AC72 4268 0028                  		clr.w	$28(a0)
0001AC76 4268 0010                  		clr.w	$10(a0)
0001AC7A                            
0001AC7A                            loc_192E8:
0001AC7A 6000 FEF4                  		bra.w	loc_191DE
0001AC7E                            ; ===========================================================================
0001AC7E                            
0001AC7E                            loc_192EC:				; XREF: Obj75_ShipIndex
0001AC7E 7000                       		moveq	#0,d0
0001AC80 1028 0028                  		move.b	$28(a0),d0
0001AC84 303B 0000                  		move.w	off_192FA(pc,d0.w),d0
0001AC88 4EFB 0000                  		jmp	off_192FA(pc,d0.w)
0001AC8C                            ; ===========================================================================
0001AC8C 0000                       off_192FA:	dc.w loc_19302-off_192FA
0001AC8E 0000                       		dc.w loc_19348-off_192FA
0001AC90 0000                       		dc.w loc_1938E-off_192FA
0001AC92 0000                       		dc.w loc_193D0-off_192FA
0001AC94                            ; ===========================================================================
0001AC94                            
0001AC94                            loc_19302:				; XREF: off_192FA
0001AC94 317C 0180 0012             		move.w	#$180,$12(a0)
0001AC9A 3028 0038                  		move.w	$38(a0),d0
0001AC9E 0C40 0556                  		cmpi.w	#$556,d0
0001ACA2 6500                       		bcs.s	loc_19344
0001ACA4 317C 0556 0038             		move.w	#$556,$38(a0)
0001ACAA 4268 003C                  		clr.w	$3C(a0)
0001ACAE 70FF                       		moveq	#-1,d0
0001ACB0 3028 0036                  		move.w	$36(a0),d0
0001ACB4 6700                       		beq.s	loc_1933C
0001ACB6 2240                       		movea.l	d0,a1
0001ACB8 137C 00FF 0029             		move.b	#-1,$29(a1)
0001ACBE 117C 00FF 0029             		move.b	#-1,$29(a0)
0001ACC4 2348 0034                  		move.l	a0,$34(a1)
0001ACC8 317C 0032 003C             		move.w	#$32,$3C(a0)
0001ACCE                            
0001ACCE                            loc_1933C:
0001ACCE 4268 0012                  		clr.w	$12(a0)
0001ACD2 5428 0028                  		addq.b	#2,$28(a0)
0001ACD6                            
0001ACD6                            loc_19344:
0001ACD6 6000 FEAC                  		bra.w	loc_191F2
0001ACDA                            ; ===========================================================================
0001ACDA                            
0001ACDA                            loc_19348:				; XREF: off_192FA
0001ACDA 5368 003C                  		subq.w	#1,$3C(a0)
0001ACDE 6A00                       		bpl.s	loc_19366
0001ACE0 5428 0028                  		addq.b	#2,$28(a0)
0001ACE4 317C F800 0012             		move.w	#-$800,$12(a0)
0001ACEA 4A68 0036                  		tst.w	$36(a0)
0001ACEE 6600                       		bne.s	loc_19362
0001ACF0 E0E8 0012                  		asr	$12(a0)
0001ACF4                            
0001ACF4                            loc_19362:
0001ACF4 7000                       		moveq	#0,d0
0001ACF6 6000                       		bra.s	loc_1937C
0001ACF8                            ; ===========================================================================
0001ACF8                            
0001ACF8                            loc_19366:
0001ACF8 7000                       		moveq	#0,d0
0001ACFA 0C68 001E 003C             		cmpi.w	#$1E,$3C(a0)
0001AD00 6E00                       		bgt.s	loc_1937C
0001AD02 7002                       		moveq	#2,d0
0001AD04 0828 0001 003D             		btst	#1,$3D(a0)
0001AD0A 6700                       		beq.s	loc_1937C
0001AD0C 4440                       		neg.w	d0
0001AD0E                            
0001AD0E                            loc_1937C:
0001AD0E D068 0038                  		add.w	$38(a0),d0
0001AD12 3140 000C                  		move.w	d0,$C(a0)
0001AD16 3168 0030 0008             		move.w	$30(a0),8(a0)
0001AD1C 6000 FE76                  		bra.w	loc_19202
0001AD20                            ; ===========================================================================
0001AD20                            
0001AD20                            loc_1938E:				; XREF: off_192FA
0001AD20 303C 04DA                  		move.w	#$4DA,d0
0001AD24 4A68 0036                  		tst.w	$36(a0)
0001AD28 6700                       		beq.s	loc_1939C
0001AD2A 0440 0018                  		subi.w	#$18,d0
0001AD2E                            
0001AD2E                            loc_1939C:
0001AD2E B068 0038                  		cmp.w	$38(a0),d0
0001AD32 6D00                       		blt.s	loc_193BE
0001AD34 317C 0008 003C             		move.w	#8,$3C(a0)
0001AD3A 4A68 0036                  		tst.w	$36(a0)
0001AD3E 6700                       		beq.s	loc_193B4
0001AD40 317C 002D 003C             		move.w	#$2D,$3C(a0)
0001AD46                            
0001AD46                            loc_193B4:
0001AD46 5428 0028                  		addq.b	#2,$28(a0)
0001AD4A 4268 0012                  		clr.w	$12(a0)
0001AD4E 6000                       		bra.s	loc_193CC
0001AD50                            ; ===========================================================================
0001AD50                            
0001AD50                            loc_193BE:
0001AD50 0C68 FFC0 0012             		cmpi.w	#-$40,$12(a0)
0001AD56 6C00                       		bge.s	loc_193CC
0001AD58 0668 000C 0012             		addi.w	#$C,$12(a0)
0001AD5E                            
0001AD5E                            loc_193CC:
0001AD5E 6000 FE24                  		bra.w	loc_191F2
0001AD62                            ; ===========================================================================
0001AD62                            
0001AD62                            loc_193D0:				; XREF: off_192FA
0001AD62 5368 003C                  		subq.w	#1,$3C(a0)
0001AD66 6E00                       		bgt.s	loc_19406
0001AD68 6B00                       		bmi.s	loc_193EE
0001AD6A 70FF                       		moveq	#-1,d0
0001AD6C 3028 0036                  		move.w	$36(a0),d0
0001AD70 6700                       		beq.s	loc_193E8
0001AD72 2240                       		movea.l	d0,a1
0001AD74 137C 000A 0029             		move.b	#$A,$29(a1)
0001AD7A                            
0001AD7A                            loc_193E8:
0001AD7A 4268 0036                  		clr.w	$36(a0)
0001AD7E 6000                       		bra.s	loc_19406
0001AD80                            ; ===========================================================================
0001AD80                            
0001AD80                            loc_193EE:
0001AD80 0C68 FFE2 003C             		cmpi.w	#-$1E,$3C(a0)
0001AD86 6600                       		bne.s	loc_19406
0001AD88 4228 0029                  		clr.b	$29(a0)
0001AD8C 5528 0025                  		subq.b	#2,$25(a0)
0001AD90 117C 00FF 003D             		move.b	#-1,$3D(a0)
0001AD96 6000                       		bra.s	loc_19446
0001AD98                            ; ===========================================================================
0001AD98                            
0001AD98                            loc_19406:
0001AD98 7001                       		moveq	#1,d0
0001AD9A 4A68 0036                  		tst.w	$36(a0)
0001AD9E 6700                       		beq.s	loc_19410
0001ADA0 7002                       		moveq	#2,d0
0001ADA2                            
0001ADA2                            loc_19410:
0001ADA2 0C68 04DA 0038             		cmpi.w	#$4DA,$38(a0)
0001ADA8 6700                       		beq.s	loc_19424
0001ADAA 6D00                       		blt.s	loc_1941C
0001ADAC 4440                       		neg.w	d0
0001ADAE                            
0001ADAE                            loc_1941C:
0001ADAE 4A68 0036                  		tst.w	$36(a0)
0001ADB2 D168 0038                  		add.w	d0,$38(a0)
0001ADB6                            
0001ADB6                            loc_19424:
0001ADB6 7000                       		moveq	#0,d0
0001ADB8 4A68 0036                  		tst.w	$36(a0)
0001ADBC 6700                       		beq.s	loc_19438
0001ADBE 7002                       		moveq	#2,d0
0001ADC0 0828 0000 003D             		btst	#0,$3D(a0)
0001ADC6 6700                       		beq.s	loc_19438
0001ADC8 4440                       		neg.w	d0
0001ADCA                            
0001ADCA                            loc_19438:
0001ADCA D068 0038                  		add.w	$38(a0),d0
0001ADCE 3140 000C                  		move.w	d0,$C(a0)
0001ADD2 3168 0030 0008             		move.w	$30(a0),8(a0)
0001ADD8                            
0001ADD8                            loc_19446:
0001ADD8 6000 FDBA                  		bra.w	loc_19202
0001ADDC                            
0001ADDC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001ADDC                            
0001ADDC                            
0001ADDC                            Obj75_FindBlocks:			; XREF: loc_192AE
0001ADDC 4268 0036                  		clr.w	$36(a0)
0001ADE0 43F8 D040                  		lea	($FFFFD040).w,a1
0001ADE4 703E                       		moveq	#$3E,d0
0001ADE6 7276                       		moveq	#$76,d1
0001ADE8 1428 0034                  		move.b	$34(a0),d2
0001ADEC                            
0001ADEC                            Obj75_FindLoop:
0001ADEC B211                       		cmp.b	(a1),d1		; is object a SYZ boss block?
0001ADEE 6600                       		bne.s	loc_1946A	; if not, branch
0001ADF0 B429 0028                  		cmp.b	$28(a1),d2
0001ADF4 6600                       		bne.s	loc_1946A
0001ADF6 3149 0036                  		move.w	a1,$36(a0)
0001ADFA 6000                       		bra.s	locret_19472
0001ADFC                            ; ===========================================================================
0001ADFC                            
0001ADFC                            loc_1946A:
0001ADFC 43E9 0040                  		lea	$40(a1),a1	; next object RAM entry
0001AE00 51C8 FFEA                  		dbf	d0,Obj75_FindLoop
0001AE04                            
0001AE04                            locret_19472:
0001AE04 4E75                       		rts	
0001AE06                            ; End of function Obj75_FindBlocks
0001AE06                            
0001AE06                            ; ===========================================================================
0001AE06                            
0001AE06                            loc_19474:				; XREF: Obj75_ShipIndex
0001AE06 5368 003C                  		subq.w	#1,$3C(a0)
0001AE0A 6B00                       		bmi.s	loc_1947E
0001AE0C 6000 E3F8                  		bra.w	BossDefeated
0001AE10                            ; ===========================================================================
0001AE10                            
0001AE10                            loc_1947E:
0001AE10 5428 0025                  		addq.b	#2,$25(a0)
0001AE14 4268 0012                  		clr.w	$12(a0)
0001AE18 08E8 0000 0022             		bset	#0,$22(a0)
0001AE1E 08A8 0007 0022             		bclr	#7,$22(a0)
0001AE24 4268 0010                  		clr.w	$10(a0)
0001AE28 317C FFFF 003C             		move.w	#-1,$3C(a0)
0001AE2E 4A38 F7A7                  		tst.b	($FFFFF7A7).w
0001AE32 6600                       		bne.s	loc_194A8
0001AE34 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
0001AE3A                            
0001AE3A                            loc_194A8:
0001AE3A 6000 FD58                  		bra.w	loc_19202
0001AE3E                            ; ===========================================================================
0001AE3E                            
0001AE3E                            loc_194AC:				; XREF: Obj75_ShipIndex
0001AE3E 5268 003C                  		addq.w	#1,$3C(a0)
0001AE42 6700                       		beq.s	loc_194BC
0001AE44 6A00                       		bpl.s	loc_194C2
0001AE46 0668 0018 0012             		addi.w	#$18,$12(a0)
0001AE4C 6000                       		bra.s	loc_194EE
0001AE4E                            ; ===========================================================================
0001AE4E                            
0001AE4E                            loc_194BC:
0001AE4E 4268 0012                  		clr.w	$12(a0)
0001AE52 6000                       		bra.s	loc_194EE
0001AE54                            ; ===========================================================================
0001AE54                            
0001AE54                            loc_194C2:
0001AE54 0C68 0020 003C             		cmpi.w	#$20,$3C(a0)
0001AE5A 6500                       		bcs.s	loc_194DA
0001AE5C 6700                       		beq.s	loc_194E0
0001AE5E 0C68 002A 003C             		cmpi.w	#$2A,$3C(a0)
0001AE64 6500                       		bcs.s	loc_194EE
0001AE66 5428 0025                  		addq.b	#2,$25(a0)
0001AE6A 6000                       		bra.s	loc_194EE
0001AE6C                            ; ===========================================================================
0001AE6C                            
0001AE6C                            loc_194DA:
0001AE6C 5168 0012                  		subq.w	#8,$12(a0)
0001AE70 6000                       		bra.s	loc_194EE
0001AE72                            ; ===========================================================================
0001AE72                            
0001AE72                            loc_194E0:
0001AE72 4268 0012                  		clr.w	$12(a0)
0001AE76 303C 0085                  		move.w	#$85,d0
0001AE7A 4EB9 0000 1476             		jsr	(PlaySound).l	; play SYZ music
0001AE80                            
0001AE80                            loc_194EE:
0001AE80 6000 FD02                  		bra.w	loc_191F2
0001AE84                            ; ===========================================================================
0001AE84                            
0001AE84                            loc_194F2:				; XREF: Obj75_ShipIndex
0001AE84 317C 0400 0010             		move.w	#$400,$10(a0)
0001AE8A 317C FFC0 0012             		move.w	#-$40,$12(a0)
0001AE90 0C78 2D40 F72A             		cmpi.w	#$2D40,($FFFFF72A).w
0001AE96 6400                       		bcc.s	loc_1950C
0001AE98 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0001AE9C 6000                       		bra.s	loc_19512
0001AE9E                            ; ===========================================================================
0001AE9E                            
0001AE9E                            loc_1950C:
0001AE9E 4A28 0001                  		tst.b	1(a0)
0001AEA2 6A00                       		bpl.s	Obj75_ShipDelete
0001AEA4                            
0001AEA4                            loc_19512:
0001AEA4 6100 E3A2                  		bsr.w	BossMove
0001AEA8 6000 FCC6                  		bra.w	loc_191DE
0001AEAC                            ; ===========================================================================
0001AEAC                            
0001AEAC                            Obj75_ShipDelete:
0001AEAC 4EF9 0000 E120             		jmp	DeleteObject
0001AEB2                            ; ===========================================================================
0001AEB2                            
0001AEB2                            Obj75_FaceMain:				; XREF: Obj75_Index
0001AEB2 7201                       		moveq	#1,d1
0001AEB4 2268 0034                  		movea.l	$34(a0),a1
0001AEB8 7000                       		moveq	#0,d0
0001AEBA 1029 0025                  		move.b	$25(a1),d0
0001AEBE 303B 0000                  		move.w	off_19546(pc,d0.w),d0
0001AEC2 4EBB 0000                  		jsr	off_19546(pc,d0.w)
0001AEC6 1141 001C                  		move.b	d1,$1C(a0)
0001AECA 1010                       		move.b	(a0),d0
0001AECC B011                       		cmp.b	(a1),d0
0001AECE 6600                       		bne.s	Obj75_FaceDelete
0001AED0 6000                       		bra.s	loc_195BE
0001AED2                            ; ===========================================================================
0001AED2                            
0001AED2                            Obj75_FaceDelete:
0001AED2 4EF9 0000 E120             		jmp	DeleteObject
0001AED8                            ; ===========================================================================
0001AED8 0000 0000                  off_19546:	dc.w loc_19574-off_19546, loc_19574-off_19546
0001AEDC 0000 0000                  		dc.w loc_1955A-off_19546, loc_19552-off_19546
0001AEE0 0000 0000                  		dc.w loc_19552-off_19546, loc_19556-off_19546
0001AEE4                            ; ===========================================================================
0001AEE4                            
0001AEE4                            loc_19552:				; XREF: off_19546
0001AEE4 720A                       		moveq	#$A,d1
0001AEE6 4E75                       		rts	
0001AEE8                            ; ===========================================================================
0001AEE8                            
0001AEE8                            loc_19556:				; XREF: off_19546
0001AEE8 7206                       		moveq	#6,d1
0001AEEA 4E75                       		rts	
0001AEEC                            ; ===========================================================================
0001AEEC                            
0001AEEC                            loc_1955A:				; XREF: off_19546
0001AEEC 7000                       		moveq	#0,d0
0001AEEE 1029 0028                  		move.b	$28(a1),d0
0001AEF2 303B 0000                  		move.w	off_19568(pc,d0.w),d0
0001AEF6 4EFB 0000                  		jmp	off_19568(pc,d0.w)
0001AEFA                            ; ===========================================================================
0001AEFA 0000 0000                  off_19568:	dc.w loc_19570-off_19568, loc_19572-off_19568
0001AEFE 0000 0000                  		dc.w loc_19570-off_19568, loc_19570-off_19568
0001AF02                            ; ===========================================================================
0001AF02                            
0001AF02                            loc_19570:				; XREF: off_19568
0001AF02 6000                       		bra.s	loc_19574
0001AF04                            ; ===========================================================================
0001AF04                            
0001AF04                            loc_19572:				; XREF: off_19568
0001AF04 7206                       		moveq	#6,d1
0001AF06                            
0001AF06                            loc_19574:				; XREF: off_19546
0001AF06 4A29 0020                  		tst.b	$20(a1)
0001AF0A 6600                       		bne.s	loc_1957E
0001AF0C 7205                       		moveq	#5,d1
0001AF0E 4E75                       		rts	
0001AF10                            ; ===========================================================================
0001AF10                            
0001AF10                            loc_1957E:
0001AF10 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
0001AF16 6500                       		bcs.s	locret_19588
0001AF18 7204                       		moveq	#4,d1
0001AF1A                            
0001AF1A                            locret_19588:
0001AF1A 4E75                       		rts	
0001AF1C                            ; ===========================================================================
0001AF1C                            
0001AF1C                            Obj75_FlameMain:			; XREF: Obj75_Index
0001AF1C 117C 0007 001C             		move.b	#7,$1C(a0)
0001AF22 2268 0034                  		movea.l	$34(a0),a1
0001AF26 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
0001AF2C 6600                       		bne.s	loc_195AA
0001AF2E 117C 000B 001C             		move.b	#$B,$1C(a0)
0001AF34 4A28 0001                  		tst.b	1(a0)
0001AF38 6A00                       		bpl.s	Obj75_FlameDelete
0001AF3A 6000                       		bra.s	loc_195B6
0001AF3C                            ; ===========================================================================
0001AF3C                            
0001AF3C                            loc_195AA:
0001AF3C 4A69 0010                  		tst.w	$10(a1)
0001AF40 6700                       		beq.s	loc_195B6
0001AF42 117C 0008 001C             		move.b	#8,$1C(a0)
0001AF48                            
0001AF48                            loc_195B6:
0001AF48 6000                       		bra.s	loc_195BE
0001AF4A                            ; ===========================================================================
0001AF4A                            
0001AF4A                            Obj75_FlameDelete:
0001AF4A 4EF9 0000 E120             		jmp	DeleteObject
0001AF50                            ; ===========================================================================
0001AF50                            
0001AF50                            loc_195BE:
0001AF50 43F9 0001 9658             		lea	(Ani_Eggman).l,a1
0001AF56 4EB9 0000 B1F6             		jsr	AnimateSprite
0001AF5C 2268 0034                  		movea.l	$34(a0),a1
0001AF60 3169 0008 0008             		move.w	8(a1),8(a0)
0001AF66 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001AF6C                            
0001AF6C                            loc_195DA:
0001AF6C 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001AF72 7003                       		moveq	#3,d0
0001AF74 C028 0022                  		and.b	$22(a0),d0
0001AF78 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001AF7E 8128 0001                  		or.b	d0,1(a0)
0001AF82 4EF9 0000 E0E4             		jmp	DisplaySprite
0001AF88                            ; ===========================================================================
0001AF88                            
0001AF88                            Obj75_SpikeMain:			; XREF: Obj75_Index
0001AF88 217C 0001 9770 0004        		move.l	#Map_BossItems,4(a0)
0001AF90 317C 246C 0002             		move.w	#$246C,2(a0)
0001AF96 117C 0005 001A             		move.b	#5,$1A(a0)
0001AF9C 2268 0034                  		movea.l	$34(a0),a1
0001AFA0 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
0001AFA6 6600                       		bne.s	loc_1961C
0001AFA8 4A28 0001                  		tst.b	1(a0)
0001AFAC 6A00                       		bpl.s	Obj75_SpikeDelete
0001AFAE                            
0001AFAE                            loc_1961C:
0001AFAE 3169 0008 0008             		move.w	8(a1),8(a0)
0001AFB4 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001AFBA 3028 003C                  		move.w	$3C(a0),d0
0001AFBE 0C29 0004 0025             		cmpi.b	#4,$25(a1)
0001AFC4 6600                       		bne.s	loc_19652
0001AFC6 0C29 0006 0028             		cmpi.b	#6,$28(a1)
0001AFCC 6700                       		beq.s	loc_1964C
0001AFCE 4A29 0028                  		tst.b	$28(a1)
0001AFD2 6600                       		bne.s	loc_19658
0001AFD4 0C40 0094                  		cmpi.w	#$94,d0
0001AFD8 6C00                       		bge.s	loc_19658
0001AFDA 5E40                       		addq.w	#7,d0
0001AFDC 6000                       		bra.s	loc_19658
0001AFDE                            ; ===========================================================================
0001AFDE                            
0001AFDE                            loc_1964C:
0001AFDE 4A69 003C                  		tst.w	$3C(a1)
0001AFE2 6A00                       		bpl.s	loc_19658
0001AFE4                            
0001AFE4                            loc_19652:
0001AFE4 4A40                       		tst.w	d0
0001AFE6 6F00                       		ble.s	loc_19658
0001AFE8 5B40                       		subq.w	#5,d0
0001AFEA                            
0001AFEA                            loc_19658:
0001AFEA 3140 003C                  		move.w	d0,$3C(a0)
0001AFEE E440                       		asr.w	#2,d0
0001AFF0 D168 000C                  		add.w	d0,$C(a0)
0001AFF4 117C 0008 0019             		move.b	#8,$19(a0)
0001AFFA 117C 000C 0016             		move.b	#$C,$16(a0)
0001B000 4228 0020                  		clr.b	$20(a0)
0001B004 2268 0034                  		movea.l	$34(a0),a1
0001B008 4A29 0020                  		tst.b	$20(a1)
0001B00C 6700                       		beq.s	loc_19688
0001B00E 4A29 0029                  		tst.b	$29(a1)
0001B012 6600                       		bne.s	loc_19688
0001B014 117C 0084 0020             		move.b	#$84,$20(a0)
0001B01A                            
0001B01A                            loc_19688:
0001B01A 6000 FF50                  		bra.w	loc_195DA
0001B01E                            ; ===========================================================================
0001B01E                            
0001B01E                            Obj75_SpikeDelete:
0001B01E 4EF9 0000 E120             		jmp	DeleteObject
0001B024                            ; ===========================================================================
0001B024                            ; ---------------------------------------------------------------------------
0001B024                            ; Object 76 - blocks that Eggman picks up (SYZ)
0001B024                            ; ---------------------------------------------------------------------------
0001B024                            
0001B024                            Obj76:					; XREF: Obj_Index
0001B024 7000                       		moveq	#0,d0
0001B026 1028 0024                  		move.b	$24(a0),d0
0001B02A 323B 0000                  		move.w	Obj76_Index(pc,d0.w),d1
0001B02E 4EFB 1000                  		jmp	Obj76_Index(pc,d1.w)
0001B032                            ; ===========================================================================
0001B032 0000                       Obj76_Index:	dc.w Obj76_Main-Obj76_Index
0001B034 0000                       		dc.w Obj76_Action-Obj76_Index
0001B036 0000                       		dc.w loc_19762-Obj76_Index
0001B038                            ; ===========================================================================
0001B038                            
0001B038                            Obj76_Main:				; XREF: Obj76_Index
0001B038 7800                       		moveq	#0,d4
0001B03A 3A3C 2C10                  		move.w	#$2C10,d5
0001B03E 7C09                       		moveq	#9,d6
0001B040 43D0                       		lea	(a0),a1
0001B042 6000                       		bra.s	Obj76_MakeBlock
0001B044                            ; ===========================================================================
0001B044                            
0001B044                            Obj76_Loop:
0001B044 4EB9 0000 E57A             		jsr	SingleObjLoad
0001B04A 6600                       		bne.s	Obj76_ExitLoop
0001B04C                            
0001B04C                            Obj76_MakeBlock:			; XREF: Obj76_Main
0001B04C 12BC 0076                  		move.b	#$76,(a1)
0001B050 237C 0000 0000 0004        		move.l	#Map_obj76,4(a1)
0001B058 337C 4000 0002             		move.w	#$4000,2(a1)
0001B05E 137C 0004 0001             		move.b	#4,1(a1)
0001B064 137C 0010 0019             		move.b	#$10,$19(a1)
0001B06A 137C 0010 0016             		move.b	#$10,$16(a1)
0001B070 137C 0003 0018             		move.b	#3,$18(a1)
0001B076 3345 0008                  		move.w	d5,8(a1)	; set x-position
0001B07A 337C 0582 000C             		move.w	#$582,$C(a1)
0001B080 3344 0028                  		move.w	d4,$28(a1)
0001B084 0644 0101                  		addi.w	#$101,d4
0001B088 0645 0020                  		addi.w	#$20,d5		; add $20 to next x-position
0001B08C 5429 0024                  		addq.b	#2,$24(a1)
0001B090 51CE FFB2                  		dbf	d6,Obj76_Loop	; repeat sequence 9 more times
0001B094                            
0001B094                            Obj76_ExitLoop:
0001B094 4E75                       		rts	
0001B096                            ; ===========================================================================
0001B096                            
0001B096                            Obj76_Action:				; XREF: Obj76_Index
0001B096 1028 0029                  		move.b	$29(a0),d0
0001B09A B028 0028                  		cmp.b	$28(a0),d0
0001B09E 6700                       		beq.s	Obj76_Solid
0001B0A0 4A00                       		tst.b	d0
0001B0A2 6B00                       		bmi.s	loc_19718
0001B0A4                            
0001B0A4                            loc_19712:
0001B0A4 6100 0000                  		bsr.w	Obj76_Break
0001B0A8 6000                       		bra.s	Obj76_Display
0001B0AA                            ; ===========================================================================
0001B0AA                            
0001B0AA                            loc_19718:
0001B0AA 2268 0034                  		movea.l	$34(a0),a1
0001B0AE 4A29 0021                  		tst.b	$21(a1)
0001B0B2 67F0                       		beq.s	loc_19712
0001B0B4 3169 0008 0008             		move.w	8(a1),8(a0)
0001B0BA 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001B0C0 0668 002C 000C             		addi.w	#$2C,$C(a0)
0001B0C6 B2C8                       		cmpa.w	a0,a1
0001B0C8 6500                       		bcs.s	Obj76_Display
0001B0CA 3029 0012                  		move.w	$12(a1),d0
0001B0CE 48C0                       		ext.l	d0
0001B0D0 E080                       		asr.l	#8,d0
0001B0D2 D168 000C                  		add.w	d0,$C(a0)
0001B0D6 6000                       		bra.s	Obj76_Display
0001B0D8                            ; ===========================================================================
0001B0D8                            
0001B0D8                            Obj76_Solid:				; XREF: Obj76_Action
0001B0D8 323C 001B                  		move.w	#$1B,d1
0001B0DC 343C 0010                  		move.w	#$10,d2
0001B0E0 363C 0011                  		move.w	#$11,d3
0001B0E4 3828 0008                  		move.w	8(a0),d4
0001B0E8 4EB9 0001 04CE             		jsr	SolidObject
0001B0EE                            
0001B0EE                            Obj76_Display:				; XREF: Obj76_Action
0001B0EE 4EF9 0000 E0E4             		jmp	DisplaySprite
0001B0F4                            ; ===========================================================================
0001B0F4                            
0001B0F4                            loc_19762:				; XREF: Obj76_Index
0001B0F4 4A28 0001                  		tst.b	1(a0)
0001B0F8 6A00                       		bpl.s	Obj76_Delete
0001B0FA 4EB9 0000 E092             		jsr	ObjectFall
0001B100 4EF9 0000 E0E4             		jmp	DisplaySprite
0001B106                            ; ===========================================================================
0001B106                            
0001B106                            Obj76_Delete:
0001B106 4EF9 0000 E120             		jmp	DeleteObject
0001B10C                            
0001B10C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B10C                            
0001B10C                            
0001B10C                            Obj76_Break:				; XREF: Obj76_Action
0001B10C 49FA 0000                  		lea	Obj76_FragSpeed(pc),a4
0001B110 4BFA 0000                  		lea	Obj76_FragPos(pc),a5
0001B114 7801                       		moveq	#1,d4
0001B116 7203                       		moveq	#3,d1
0001B118 7438                       		moveq	#$38,d2
0001B11A 5428 0024                  		addq.b	#2,$24(a0)
0001B11E 117C 0008 0019             		move.b	#8,$19(a0)
0001B124 117C 0008 0016             		move.b	#8,$16(a0)
0001B12A 43D0                       		lea	(a0),a1
0001B12C 6000                       		bra.s	Obj76_MakeFrag
0001B12E                            ; ===========================================================================
0001B12E                            
0001B12E                            Obj76_LoopFrag:
0001B12E 4EB9 0000 E590             		jsr	SingleObjLoad2
0001B134 6600                       		bne.s	loc_197D4
0001B136                            
0001B136                            Obj76_MakeFrag:
0001B136 45D0                       		lea	(a0),a2
0001B138 47D1                       		lea	(a1),a3
0001B13A 7603                       		moveq	#3,d3
0001B13C                            
0001B13C                            loc_197AA:
0001B13C 26DA                       		move.l	(a2)+,(a3)+
0001B13E 26DA                       		move.l	(a2)+,(a3)+
0001B140 26DA                       		move.l	(a2)+,(a3)+
0001B142 26DA                       		move.l	(a2)+,(a3)+
0001B144 51CB FFF6                  		dbf	d3,loc_197AA
0001B148                            
0001B148 335C 0010                  		move.w	(a4)+,$10(a1)
0001B14C 335C 0012                  		move.w	(a4)+,$12(a1)
0001B150 361D                       		move.w	(a5)+,d3
0001B152 D769 0008                  		add.w	d3,8(a1)
0001B156 361D                       		move.w	(a5)+,d3
0001B158 D769 000C                  		add.w	d3,$C(a1)
0001B15C 1344 001A                  		move.b	d4,$1A(a1)
0001B160 5244                       		addq.w	#1,d4
0001B162 51C9 FFCA                  		dbf	d1,Obj76_LoopFrag ; repeat sequence 3 more times
0001B166                            
0001B166                            loc_197D4:
0001B166 303C 00CB                  		move.w	#$CB,d0
0001B16A 4EF9 0000 147C             		jmp	(PlaySound_Special).l ;	play smashing sound
0001B170                            ; End of function Obj76_Break
0001B170                            
0001B170                            ; ===========================================================================
0001B170 FE80 FE00                  Obj76_FragSpeed:dc.w $FE80, $FE00
0001B174 0180 FE00                  		dc.w $180, $FE00
0001B178 FF00 FF00                  		dc.w $FF00, $FF00
0001B17C 0100 FF00                  		dc.w $100, $FF00
0001B180 FFF8 FFF8                  Obj76_FragPos:	dc.w $FFF8, $FFF8
0001B184 0010 0000                  		dc.w $10, 0
0001B188 0000 0010                  		dc.w 0,	$10
0001B18C 0010 0010                  		dc.w $10, $10
0001B190                            ; ---------------------------------------------------------------------------
0001B190                            ; Sprite mappings - blocks that	Eggman picks up (SYZ)
0001B190                            ; ---------------------------------------------------------------------------
0001B190                            Map_obj76:
0001B190                            	include "_maps\obj76.asm"
0001B190                            ; ---------------------------------------------------------------------------
0001B190                            ; Sprite mappings - blocks that	Robotnik picks up (SYZ)
0001B190                            ; ---------------------------------------------------------------------------
0001B190 0000 0000                  		dc.w byte_19808-Map_obj76, byte_19814-Map_obj76
0001B194 0000 0000                  		dc.w byte_1981A-Map_obj76, byte_19820-Map_obj76
0001B198 0000                       		dc.w byte_19826-Map_obj76
0001B19A 02                         byte_19808:	dc.b 2
0001B19B F00D 0071 F0               		dc.b $F0, $D, 0, $71, $F0
0001B1A0 000D 0079 F0               		dc.b 0,	$D, 0, $79, $F0
0001B1A5 00                         		dc.b 0
0001B1A6 01                         byte_19814:	dc.b 1
0001B1A7 F805 0071 F8               		dc.b $F8, 5, 0,	$71, $F8
0001B1AC 01                         byte_1981A:	dc.b 1
0001B1AD F805 0075 F8               		dc.b $F8, 5, 0,	$75, $F8
0001B1B2 01                         byte_19820:	dc.b 1
0001B1B3 F805 0079 F8               		dc.b $F8, 5, 0,	$79, $F8
0001B1B8 01                         byte_19826:	dc.b 1
0001B1B9 F805 007D F8               		dc.b $F8, 5, 0,	$7D, $F8
0001B1BE                            		even
0001B1BE                            		even
0001B1BE                            
0001B1BE                            ; ===========================================================================
0001B1BE                            
0001B1BE                            loc_1982C:				; XREF: loc_19C62; loc_19C80
0001B1BE 4EF9 0000 E120             		jmp	DeleteObject
0001B1C4                            ; ===========================================================================
0001B1C4                            ; ---------------------------------------------------------------------------
0001B1C4                            ; Object 82 - Eggman (SBZ2)
0001B1C4                            ; ---------------------------------------------------------------------------
0001B1C4                            
0001B1C4                            Obj82:					; XREF: Obj_Index
0001B1C4 7000                       		moveq	#0,d0
0001B1C6 1028 0024                  		move.b	$24(a0),d0
0001B1CA 323B 0000                  		move.w	Obj82_Index(pc,d0.w),d1
0001B1CE 4EFB 1000                  		jmp	Obj82_Index(pc,d1.w)
0001B1D2                            ; ===========================================================================
0001B1D2 0000                       Obj82_Index:	dc.w Obj82_Main-Obj82_Index
0001B1D4 0000                       		dc.w Obj82_Eggman-Obj82_Index
0001B1D6 0000                       		dc.w Obj82_Switch-Obj82_Index
0001B1D8                            
0001B1D8 0200 03                    Obj82_ObjData:	dc.b 2,	0, 3		; routine number, animation, priority
0001B1DB 0400 03                    		dc.b 4,	0, 3
0001B1DE                            ; ===========================================================================
0001B1DE                            
0001B1DE                            Obj82_Main:				; XREF: Obj82_Index
0001B1DE 45FA FFF8                  		lea	Obj82_ObjData(pc),a2
0001B1E2 317C 2160 0008             		move.w	#$2160,8(a0)
0001B1E8 317C 05A4 000C             		move.w	#$5A4,$C(a0)
0001B1EE 117C 000F 0020             		move.b	#$F,$20(a0)
0001B1F4 117C 0010 0021             		move.b	#$10,$21(a0)
0001B1FA 08A8 0000 0022             		bclr	#0,$22(a0)
0001B200 4228 0025                  		clr.b	$25(a0)
0001B204 115A 0024                  		move.b	(a2)+,$24(a0)
0001B208 115A 001C                  		move.b	(a2)+,$1C(a0)
0001B20C 115A 0018                  		move.b	(a2)+,$18(a0)
0001B210 217C 0000 0000 0004        		move.l	#Map_obj82,4(a0)
0001B218 317C 0400 0002             		move.w	#$400,2(a0)
0001B21E 117C 0004 0001             		move.b	#4,1(a0)
0001B224 08E8 0007 0001             		bset	#7,1(a0)
0001B22A 117C 0020 0019             		move.b	#$20,$19(a0)
0001B230 4EB9 0000 E590             		jsr	SingleObjLoad2
0001B236 6600                       		bne.s	Obj82_Eggman
0001B238 2348 0034                  		move.l	a0,$34(a1)
0001B23C 12BC 0082                  		move.b	#$82,(a1)	; load switch object
0001B240 337C 2130 0008             		move.w	#$2130,8(a1)
0001B246 337C 05BC 000C             		move.w	#$5BC,$C(a1)
0001B24C 4228 0025                  		clr.b	$25(a0)
0001B250 135A 0024                  		move.b	(a2)+,$24(a1)
0001B254 135A 001C                  		move.b	(a2)+,$1C(a1)
0001B258 135A 0018                  		move.b	(a2)+,$18(a1)
0001B25C 237C 0000 C97E 0004        		move.l	#Map_obj32,4(a1)
0001B264 337C 04A4 0002             		move.w	#$4A4,2(a1)
0001B26A 137C 0004 0001             		move.b	#4,1(a1)
0001B270 08E9 0007 0001             		bset	#7,1(a1)
0001B276 137C 0010 0019             		move.b	#$10,$19(a1)
0001B27C 137C 0000 001A             		move.b	#0,$1A(a1)
0001B282                            
0001B282                            Obj82_Eggman:				; XREF: Obj82_Index
0001B282 7000                       		moveq	#0,d0
0001B284 1028 0025                  		move.b	$25(a0),d0
0001B288 323B 0000                  		move.w	Obj82_EggIndex(pc,d0.w),d1
0001B28C 4EBB 1000                  		jsr	Obj82_EggIndex(pc,d1.w)
0001B290 43FA 0000                  		lea	Ani_obj82(pc),a1
0001B294 4EB9 0000 B1F6             		jsr	AnimateSprite
0001B29A 4EF9 0000 E0E4             		jmp	DisplaySprite
0001B2A0                            ; ===========================================================================
0001B2A0 0000                       Obj82_EggIndex:	dc.w Obj82_ChkSonic-Obj82_EggIndex
0001B2A2 0000                       		dc.w Obj82_PreLeap-Obj82_EggIndex
0001B2A4 0000                       		dc.w Obj82_Leap-Obj82_EggIndex
0001B2A6 0000                       		dc.w loc_19934-Obj82_EggIndex
0001B2A8                            ; ===========================================================================
0001B2A8                            
0001B2A8                            Obj82_ChkSonic:				; XREF: Obj82_EggIndex
0001B2A8 3028 0008                  		move.w	8(a0),d0
0001B2AC 9078 D008                  		sub.w	($FFFFD008).w,d0
0001B2B0 0C40 0080                  		cmpi.w	#128,d0		; is Sonic within 128 pixels of	Eggman?
0001B2B4 6400                       		bcc.s	loc_19934	; if not, branch
0001B2B6 5428 0025                  		addq.b	#2,$25(a0)
0001B2BA 317C 00B4 003C             		move.w	#180,$3C(a0)	; set delay to 3 seconds
0001B2C0 117C 0001 001C             		move.b	#1,$1C(a0)
0001B2C6                            
0001B2C6                            loc_19934:				; XREF: Obj82_EggIndex
0001B2C6 4EF9 0000 E0BE             		jmp	SpeedToPos
0001B2CC                            ; ===========================================================================
0001B2CC                            
0001B2CC                            Obj82_PreLeap:				; XREF: Obj82_EggIndex
0001B2CC 5368 003C                  		subq.w	#1,$3C(a0)	; subtract 1 from time delay
0001B2D0 6600                       		bne.s	loc_19954	; if time remains, branch
0001B2D2 5428 0025                  		addq.b	#2,$25(a0)
0001B2D6 117C 0002 001C             		move.b	#2,$1C(a0)
0001B2DC 5868 000C                  		addq.w	#4,$C(a0)
0001B2E0 317C 000F 003C             		move.w	#15,$3C(a0)
0001B2E6                            
0001B2E6                            loc_19954:
0001B2E6 60DE                       		bra.s	loc_19934
0001B2E8                            ; ===========================================================================
0001B2E8                            
0001B2E8                            Obj82_Leap:				; XREF: Obj82_EggIndex
0001B2E8 5368 003C                  		subq.w	#1,$3C(a0)
0001B2EC 6E00                       		bgt.s	loc_199D0
0001B2EE 6600                       		bne.s	loc_1996A
0001B2F0 317C FF04 0010             		move.w	#-$FC,$10(a0)	; make Eggman leap
0001B2F6 317C FC40 0012             		move.w	#-$3C0,$12(a0)
0001B2FC                            
0001B2FC                            loc_1996A:
0001B2FC 0C68 2132 0008             		cmpi.w	#$2132,8(a0)
0001B302 6E00                       		bgt.s	loc_19976
0001B304 4268 0010                  		clr.w	$10(a0)
0001B308                            
0001B308                            loc_19976:
0001B308 0668 0024 0012             		addi.w	#$24,$12(a0)
0001B30E 4A68 0012                  		tst.w	$12(a0)
0001B312 6B00                       		bmi.s	Obj82_FindBlocks
0001B314 0C68 0595 000C             		cmpi.w	#$595,$C(a0)
0001B31A 6500                       		bcs.s	Obj82_FindBlocks
0001B31C 317C 5357 0028             		move.w	#$5357,$28(a0)
0001B322 0C68 059B 000C             		cmpi.w	#$59B,$C(a0)
0001B328 6500                       		bcs.s	Obj82_FindBlocks
0001B32A 317C 059B 000C             		move.w	#$59B,$C(a0)
0001B330 4268 0012                  		clr.w	$12(a0)
0001B334                            
0001B334                            Obj82_FindBlocks:
0001B334 3028 0010                  		move.w	$10(a0),d0
0001B338 8068 0012                  		or.w	$12(a0),d0
0001B33C 6600                       		bne.s	loc_199D0
0001B33E 43F8 D000                  		lea	($FFFFD000).w,a1 ; start at the	first object RAM
0001B342 703E                       		moveq	#$3E,d0
0001B344 7240                       		moveq	#$40,d1
0001B346                            
0001B346                            Obj82_FindLoop:	
0001B346 D2C1                       		adda.w	d1,a1		; jump to next object RAM
0001B348 0C11 0083                  		cmpi.b	#$83,(a1)	; is object a block? (object $83)
0001B34C 57C8 FFF8                  		dbeq	d0,Obj82_FindLoop ; if not, repeat (max	$3E times)
0001B350                            
0001B350 6600                       		bne.s	loc_199D0
0001B352 337C 474F 0028             		move.w	#$474F,$28(a1)	; set block to disintegrate
0001B358 5428 0025                  		addq.b	#2,$25(a0)
0001B35C 117C 0001 001C             		move.b	#1,$1C(a0)
0001B362                            
0001B362                            loc_199D0:
0001B362 6000 FF62                  		bra.w	loc_19934
0001B366                            ; ===========================================================================
0001B366                            
0001B366                            Obj82_Switch:				; XREF: Obj82_Index
0001B366 7000                       		moveq	#0,d0
0001B368 1028 0025                  		move.b	$25(a0),d0
0001B36C 303B 0000                  		move.w	Obj82_SwIndex(pc,d0.w),d0
0001B370 4EFB 0000                  		jmp	Obj82_SwIndex(pc,d0.w)
0001B374                            ; ===========================================================================
0001B374 0000                       Obj82_SwIndex:	dc.w loc_199E6-Obj82_SwIndex
0001B376 0000                       		dc.w Obj82_SwDisplay-Obj82_SwIndex
0001B378                            ; ===========================================================================
0001B378                            
0001B378                            loc_199E6:				; XREF: Obj82_SwIndex
0001B378 2268 0034                  		movea.l	$34(a0),a1
0001B37C 0C69 5357 0028             		cmpi.w	#$5357,$28(a1)
0001B382 6600                       		bne.s	Obj82_SwDisplay
0001B384 117C 0001 001A             		move.b	#1,$1A(a0)
0001B38A 5428 0025                  		addq.b	#2,$25(a0)
0001B38E                            
0001B38E                            Obj82_SwDisplay:			; XREF: Obj82_SwIndex
0001B38E 4EF9 0000 E0E4             		jmp	DisplaySprite
0001B394                            ; ===========================================================================
0001B394                            Ani_obj82:
0001B394                            	include "_anim\obj82.asm"
0001B394                            ; ---------------------------------------------------------------------------
0001B394                            ; Animation script - Eggman (SBZ2)
0001B394                            ; ---------------------------------------------------------------------------
0001B394 0000                       		dc.w byte_19A10-Ani_obj82
0001B396 0000                       		dc.w byte_19A14-Ani_obj82
0001B398 0000                       		dc.w byte_19A18-Ani_obj82
0001B39A 0000                       		dc.w byte_19A20-Ani_obj82
0001B39C 0000                       		dc.w byte_19A24-Ani_obj82
0001B39E 0000                       		dc.w byte_19A2A-Ani_obj82
0001B3A0 0000                       		dc.w byte_19A30-Ani_obj82
0001B3A2 7E00 FF00                  byte_19A10:	dc.b $7E, 0, $FF, 0
0001B3A6 0601 02FF                  byte_19A14:	dc.b 6,	1, 2, $FF
0001B3AA 0E03 0404 0000 00FF        byte_19A18:	dc.b $E, 3, 4, 4, 0, 0,	0, $FF
0001B3B2 0005 09FF                  byte_19A20:	dc.b 0,	5, 9, $FF
0001B3B6 0607 0408 04FF             byte_19A24:	dc.b 6,	7, 4, 8, 4, $FF
0001B3BC 0F04 0303 FF00             byte_19A2A:	dc.b $F, 4, 3, 3, $FF, 0
0001B3C2 7E06 FF00                  byte_19A30:	dc.b $7E, 6, $FF, 0
0001B3C6                            		even
0001B3C6                            		even
0001B3C6                            
0001B3C6                            ; ---------------------------------------------------------------------------
0001B3C6                            ; Sprite mappings - Eggman (SBZ2)
0001B3C6                            ; ---------------------------------------------------------------------------
0001B3C6                            Map_obj82:
0001B3C6                            	include "_maps\obj82.asm"
0001B3C6                            ; ---------------------------------------------------------------------------
0001B3C6                            ; Sprite mappings - Eggman (SBZ2)
0001B3C6                            ; ---------------------------------------------------------------------------
0001B3C6 0000 0000                  		dc.w byte_19A4A-Map_obj82, byte_19A5A-Map_obj82
0001B3CA 0000 0000                  		dc.w byte_19A70-Map_obj82, byte_19A86-Map_obj82
0001B3CE 0000 0000                  		dc.w byte_19A9C-Map_obj82, byte_19AB2-Map_obj82
0001B3D2 0000 0000                  		dc.w byte_19AC8-Map_obj82, byte_19AEC-Map_obj82
0001B3D6 0000 0000                  		dc.w byte_19B06-Map_obj82, byte_19B26-Map_obj82
0001B3DA 0000                       		dc.w byte_19B4F-Map_obj82
0001B3DC 03                         byte_19A4A:	dc.b 3
0001B3DD FC00 008F E8               		dc.b $FC, 0, 0,	$8F, $E8
0001B3E2 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
0001B3E7 000F 006F F0               		dc.b 0,	$F, 0, $6F, $F0
0001B3EC 04                         byte_19A5A:	dc.b 4
0001B3ED E80D 000E F0               		dc.b $E8, $D, 0, $E, $F0
0001B3F2 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
0001B3F7 000F 006F F0               		dc.b 0,	$F, 0, $6F, $F0
0001B3FC FC00 008F E8               		dc.b $FC, 0, 0,	$8F, $E8
0001B401 00                         		dc.b 0
0001B402 04                         byte_19A70:	dc.b 4
0001B403 E90D 000E F0               		dc.b $E9, $D, 0, $E, $F0
0001B408 E90E 0000 F0               		dc.b $E9, $E, 0, 0, $F0
0001B40D 010F 007F F0               		dc.b 1,	$F, 0, $7F, $F0
0001B412 FD00 008F E8               		dc.b $FD, 0, 0,	$8F, $E8
0001B417 00                         		dc.b 0
0001B418 04                         byte_19A86:	dc.b 4
0001B419 F40F 0820 F0               		dc.b $F4, $F, 8, $20, $F0
0001B41E F504 0830 10               		dc.b $F5, 4, 8,	$30, $10
0001B423 0809 084E F0               		dc.b 8,	9, 8, $4E, $F0
0001B428 EC0E 0000 F0               		dc.b $EC, $E, 0, 0, $F0
0001B42D 00                         		dc.b 0
0001B42E 04                         byte_19A9C:	dc.b 4
0001B42F F00F 0820 F0               		dc.b $F0, $F, 8, $20, $F0
0001B434 F104 0830 10               		dc.b $F1, 4, 8,	$30, $10
0001B439 0806 083E F8               		dc.b 8,	6, 8, $3E, $F8
0001B43E E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
0001B443 00                         		dc.b 0
0001B444 04                         byte_19AB2:	dc.b 4
0001B445 E80D 0016 EC               		dc.b $E8, $D, 0, $16, $EC
0001B44A E801 001E 0C               		dc.b $E8, 1, 0,	$1E, $C
0001B44F E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
0001B454 000F 006F F0               		dc.b 0,	$F, 0, $6F, $F0
0001B459 00                         		dc.b 0
0001B45A 07                         byte_19AC8:	dc.b 7
0001B45B E80D 0016 EC               		dc.b $E8, $D, 0, $16, $EC
0001B460 E801 001E 0C               		dc.b $E8, 1, 0,	$1E, $C
0001B465 0409 0834 00               		dc.b 4,	9, 8, $34, 0
0001B46A 0405 083A E8               		dc.b 4,	5, 8, $3A, $E8
0001B46F F00F 0820 F0               		dc.b $F0, $F, 8, $20, $F0
0001B474 F104 0854 10               		dc.b $F1, 4, 8,	$54, $10
0001B479 F104 0054 E0               		dc.b $F1, 4, 0,	$54, $E0
0001B47E 05                         byte_19AEC:	dc.b 5
0001B47F F00F 0820 F0               		dc.b $F0, $F, 8, $20, $F0
0001B484 F104 0830 10               		dc.b $F1, 4, 8,	$30, $10
0001B489 0409 0834 00               		dc.b 4,	9, 8, $34, 0
0001B48E 0405 083A E8               		dc.b 4,	5, 8, $3A, $E8
0001B493 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
0001B498 06                         byte_19B06:	dc.b 6
0001B499 EE0F 0820 F0               		dc.b $EE, $F, 8, $20, $F0
0001B49E EF04 0830 10               		dc.b $EF, 4, 8,	$30, $10
0001B4A3 0905 0844 00               		dc.b 9,	5, 8, $44, 0
0001B4A8 0301 0848 F8               		dc.b 3,	1, 8, $48, $F8
0001B4AD 0B05 084A E8               		dc.b $B, 5, 8, $4A, $E8
0001B4B2 E60E 0000 F0               		dc.b $E6, $E, 0, 0, $F0
0001B4B7 00                         		dc.b 0
0001B4B8 08                         byte_19B26:	dc.b 8
0001B4B9 E80D 0016 EC               		dc.b $E8, $D, 0, $16, $EC
0001B4BE E801 001E 0C               		dc.b $E8, 1, 0,	$1E, $C
0001B4C3 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
0001B4C8 000F 006F F0               		dc.b 0,	$F, 0, $6F, $F0
0001B4CD E00D 3EF0 F0               		dc.b $E0, $D, $3E, $F0,	$F0
0001B4D2 F00D 3EF0 F0               		dc.b $F0, $D, $3E, $F0,	$F0
0001B4D7 000D 3EF0 F0               		dc.b 0,	$D, $3E, $F0, $F0
0001B4DC 100D 3EF0 F0               		dc.b $10, $D, $3E, $F0,	$F0
0001B4E1 03                         byte_19B4F:	dc.b 3
0001B4E2 EC0D 0056 E4               		dc.b $EC, $D, 0, $56, $E4
0001B4E7 F408 005E 04               		dc.b $F4, 8, 0,	$5E, 4
0001B4EC EC0D 0061 FC               		dc.b $EC, $D, 0, $61, $FC
0001B4F2 00                         		even
0001B4F2 00                         		even
0001B4F2                            
0001B4F2                            ; ===========================================================================
0001B4F2                            ; ---------------------------------------------------------------------------
0001B4F2                            ; Object 83 - blocks that disintegrate Eggman	presses	a switch (SBZ2)
0001B4F2                            ; ---------------------------------------------------------------------------
0001B4F2                            
0001B4F2                            Obj83:					; XREF: Obj_Index
0001B4F2 7000                       		moveq	#0,d0
0001B4F4 1028 0024                  		move.b	$24(a0),d0
0001B4F8 323B 0000                  		move.w	Obj83_Index(pc,d0.w),d1
0001B4FC 4EFB 1000                  		jmp	Obj83_Index(pc,d1.w)
0001B500                            ; ===========================================================================
0001B500 0000                       Obj83_Index:	dc.w Obj83_Main-Obj83_Index
0001B502 0000                       		dc.w Obj83_ChkBreak-Obj83_Index
0001B504 0000                       		dc.w loc_19C36-Obj83_Index
0001B506 0000                       		dc.w loc_19C62-Obj83_Index
0001B508 0000                       		dc.w loc_19C72-Obj83_Index
0001B50A 0000                       		dc.w loc_19C80-Obj83_Index
0001B50C                            ; ===========================================================================
0001B50C                            
0001B50C                            Obj83_Main:				; XREF: Obj83_Index
0001B50C 317C 2080 0008             		move.w	#$2080,8(a0)
0001B512 317C 05D0 000C             		move.w	#$5D0,$C(a0)
0001B518 117C 0080 0019             		move.b	#$80,$19(a0)
0001B51E 117C 0010 0016             		move.b	#$10,$16(a0)
0001B524 117C 0004 0001             		move.b	#4,1(a0)
0001B52A 08E8 0007 0001             		bset	#7,1(a0)
0001B530 7800                       		moveq	#0,d4
0001B532 3A3C 2010                  		move.w	#$2010,d5
0001B536 7C07                       		moveq	#7,d6
0001B538 45E8 0030                  		lea	$30(a0),a2
0001B53C                            
0001B53C                            Obj83_MakeBlock:
0001B53C 4EB9 0000 E57A             		jsr	SingleObjLoad
0001B542 6600                       		bne.s	Obj83_ExitMake
0001B544 34C9                       		move.w	a1,(a2)+
0001B546 12BC 0083                  		move.b	#$83,(a1)	; load block object
0001B54A 237C 0000 0000 0004        		move.l	#Map_obj83,4(a1)
0001B552 337C 4518 0002             		move.w	#$4518,2(a1)
0001B558 137C 0004 0001             		move.b	#4,1(a1)
0001B55E 137C 0010 0019             		move.b	#$10,$19(a1)
0001B564 137C 0010 0016             		move.b	#$10,$16(a1)
0001B56A 137C 0003 0018             		move.b	#3,$18(a1)
0001B570 3345 0008                  		move.w	d5,8(a1)	; set X	position
0001B574 337C 05D0 000C             		move.w	#$5D0,$C(a1)
0001B57A 0645 0020                  		addi.w	#$20,d5		; add $20 for next X position
0001B57E 137C 0008 0024             		move.b	#8,$24(a1)
0001B584 51CE FFB6                  		dbf	d6,Obj83_MakeBlock ; repeat sequence 7 more times
0001B588                            
0001B588                            Obj83_ExitMake:
0001B588 5428 0024                  		addq.b	#2,$24(a0)
0001B58C 4E75                       		rts	
0001B58E                            ; ===========================================================================
0001B58E                            
0001B58E                            Obj83_ChkBreak:				; XREF: Obj83_Index
0001B58E 0C68 474F 0028             		cmpi.w	#$474F,$28(a0)	; is object set	to disintegrate?
0001B594 6600                       		bne.s	Obj83_Solid	; if not, branch
0001B596 4228 001A                  		clr.b	$1A(a0)
0001B59A 5428 0024                  		addq.b	#2,$24(a0)	; next subroutine
0001B59E                            
0001B59E                            Obj83_Solid:
0001B59E 7000                       		moveq	#0,d0
0001B5A0 1028 001A                  		move.b	$1A(a0),d0
0001B5A4 4400                       		neg.b	d0
0001B5A6 4880                       		ext.w	d0
0001B5A8 5040                       		addq.w	#8,d0
0001B5AA E940                       		asl.w	#4,d0
0001B5AC 383C 2100                  		move.w	#$2100,d4
0001B5B0 9840                       		sub.w	d0,d4
0001B5B2 1140 0019                  		move.b	d0,$19(a0)
0001B5B6 3144 0008                  		move.w	d4,8(a0)
0001B5BA 720B                       		moveq	#$B,d1
0001B5BC D240                       		add.w	d0,d1
0001B5BE 7410                       		moveq	#$10,d2
0001B5C0 7611                       		moveq	#$11,d3
0001B5C2 4EF9 0001 04CE             		jmp	SolidObject
0001B5C8                            ; ===========================================================================
0001B5C8                            
0001B5C8                            loc_19C36:				; XREF: Obj83_Index
0001B5C8 0428 000E 001E             		subi.b	#$E,$1E(a0)
0001B5CE 6400                       		bcc.s	Obj83_Solid2
0001B5D0 70FF                       		moveq	#-1,d0
0001B5D2 1028 001A                  		move.b	$1A(a0),d0
0001B5D6 4880                       		ext.w	d0
0001B5D8 D040                       		add.w	d0,d0
0001B5DA 3030 0030                  		move.w	$30(a0,d0.w),d0
0001B5DE 2240                       		movea.l	d0,a1
0001B5E0 337C 474F 0028             		move.w	#$474F,$28(a1)
0001B5E6 5228 001A                  		addq.b	#1,$1A(a0)
0001B5EA 0C28 0008 001A             		cmpi.b	#8,$1A(a0)
0001B5F0 6700                       		beq.s	loc_19C62
0001B5F2                            
0001B5F2                            Obj83_Solid2:
0001B5F2 60AA                       		bra.s	Obj83_Solid
0001B5F4                            ; ===========================================================================
0001B5F4                            
0001B5F4                            loc_19C62:				; XREF: Obj83_Index
0001B5F4 08A8 0003 0022             		bclr	#3,$22(a0)
0001B5FA 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001B600 6000 FBBC                  		bra.w	loc_1982C
0001B604                            ; ===========================================================================
0001B604                            
0001B604                            loc_19C72:				; XREF: Obj83_Index
0001B604 0C68 474F 0028             		cmpi.w	#$474F,$28(a0)	; is object set	to disintegrate?
0001B60A 6700                       		beq.s	Obj83_Break	; if yes, branch
0001B60C 4EF9 0000 E0E4             		jmp	DisplaySprite
0001B612                            ; ===========================================================================
0001B612                            
0001B612                            loc_19C80:				; XREF: Obj83_Index
0001B612 4A28 0001                  		tst.b	1(a0)
0001B616 6A00 FBA6                  		bpl.w	loc_1982C
0001B61A 4EB9 0000 E092             		jsr	ObjectFall
0001B620 4EF9 0000 E0E4             		jmp	DisplaySprite
0001B626                            ; ===========================================================================
0001B626                            
0001B626                            Obj83_Break:				; XREF: loc_19C72
0001B626 49FA 0000                  		lea	Obj83_FragSpeed(pc),a4
0001B62A 4BFA 0000                  		lea	Obj83_FragPos(pc),a5
0001B62E 7801                       		moveq	#1,d4
0001B630 7203                       		moveq	#3,d1
0001B632 7438                       		moveq	#$38,d2
0001B634 5428 0024                  		addq.b	#2,$24(a0)
0001B638 117C 0008 0019             		move.b	#8,$19(a0)
0001B63E 117C 0008 0016             		move.b	#8,$16(a0)
0001B644 43D0                       		lea	(a0),a1
0001B646 6000                       		bra.s	Obj83_MakeFrag
0001B648                            ; ===========================================================================
0001B648                            
0001B648                            Obj83_LoopFrag:
0001B648 4EB9 0000 E590             		jsr	SingleObjLoad2
0001B64E 6600                       		bne.s	Obj83_BreakSnd
0001B650                            
0001B650                            Obj83_MakeFrag:				; XREF: Obj83_Break
0001B650 45D0                       		lea	(a0),a2
0001B652 47D1                       		lea	(a1),a3
0001B654 7603                       		moveq	#3,d3
0001B656                            
0001B656                            loc_19CC4:
0001B656 26DA                       		move.l	(a2)+,(a3)+
0001B658 26DA                       		move.l	(a2)+,(a3)+
0001B65A 26DA                       		move.l	(a2)+,(a3)+
0001B65C 26DA                       		move.l	(a2)+,(a3)+
0001B65E 51CB FFF6                  		dbf	d3,loc_19CC4
0001B662                            
0001B662 335C 0012                  		move.w	(a4)+,$12(a1)
0001B666 361D                       		move.w	(a5)+,d3
0001B668 D769 0008                  		add.w	d3,8(a1)
0001B66C 361D                       		move.w	(a5)+,d3
0001B66E D769 000C                  		add.w	d3,$C(a1)
0001B672 1344 001A                  		move.b	d4,$1A(a1)
0001B676 5244                       		addq.w	#1,d4
0001B678 51C9 FFCE                  		dbf	d1,Obj83_LoopFrag ; repeat sequence 3 more times
0001B67C                            
0001B67C                            Obj83_BreakSnd:
0001B67C 303C 00CB                  		move.w	#$CB,d0
0001B680 4EB9 0000 147C             		jsr	(PlaySound_Special).l ;	play smashing sound
0001B686 4EF9 0000 E0E4             		jmp	DisplaySprite
0001B68C                            ; ===========================================================================
0001B68C 0080 0000                  Obj83_FragSpeed:dc.w $80, 0
0001B690 0120 00C0                  		dc.w $120, $C0
0001B694 FFF8 FFF8                  Obj83_FragPos:	dc.w $FFF8, $FFF8
0001B698 0010 0000                  		dc.w $10, 0
0001B69C 0000 0010                  		dc.w 0,	$10
0001B6A0 0010 0010                  		dc.w $10, $10
0001B6A4                            ; ---------------------------------------------------------------------------
0001B6A4                            ; Sprite mappings - blocks that	disintegrate when Eggman presses a switch
0001B6A4                            ; ---------------------------------------------------------------------------
0001B6A4                            Map_obj83:
0001B6A4                            	include "_maps\obj83.asm"
0001B6A4                            ; ---------------------------------------------------------------------------
0001B6A4                            ; Sprite mappings - blocks that	disintegrate when Eggman presses a switch
0001B6A4                            ; ---------------------------------------------------------------------------
0001B6A4 0000 0000                  		dc.w byte_19D1C-Map_obj83, byte_19D22-Map_obj83
0001B6A8 0000 0000                  		dc.w byte_19D2E-Map_obj83, byte_19D3A-Map_obj83
0001B6AC 0000                       		dc.w byte_19D46-Map_obj83
0001B6AE 01                         byte_19D1C:	dc.b 1
0001B6AF F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0001B6B4 02                         byte_19D22:	dc.b 2
0001B6B5 F801 0000 F8               		dc.b $F8, 1, 0,	0, $F8
0001B6BA F801 0004 00               		dc.b $F8, 1, 0,	4, 0
0001B6BF 00                         		dc.b 0
0001B6C0 02                         byte_19D2E:	dc.b 2
0001B6C1 F801 0008 F8               		dc.b $F8, 1, 0,	8, $F8
0001B6C6 F801 000C 00               		dc.b $F8, 1, 0,	$C, 0
0001B6CB 00                         		dc.b 0
0001B6CC 02                         byte_19D3A:	dc.b 2
0001B6CD F801 0002 F8               		dc.b $F8, 1, 0,	2, $F8
0001B6D2 F801 0006 00               		dc.b $F8, 1, 0,	6, 0
0001B6D7 00                         		dc.b 0
0001B6D8 02                         byte_19D46:	dc.b 2
0001B6D9 F801 000A F8               		dc.b $F8, 1, 0,	$A, $F8
0001B6DE F801 000E 00               		dc.b $F8, 1, 0,	$E, 0
0001B6E4 00                         		even
0001B6E4 00                         		even
0001B6E4                            
0001B6E4                            ; ===========================================================================
0001B6E4                            ; ---------------------------------------------------------------------------
0001B6E4                            ; Object 85 - Eggman (FZ)
0001B6E4                            ; ---------------------------------------------------------------------------
0001B6E4                            
0001B6E4                            Obj85_Delete:
0001B6E4 4EF9 0000 E120             		jmp	DeleteObject
0001B6EA                            ; ===========================================================================
0001B6EA                            
0001B6EA                            Obj85:					; XREF: Obj_Index
0001B6EA 7000                       		moveq	#0,d0
0001B6EC 1028 0024                  		move.b	$24(a0),d0
0001B6F0 303B 0000                  		move.w	Obj85_Index(pc,d0.w),d0
0001B6F4 4EFB 0000                  		jmp	Obj85_Index(pc,d0.w)
0001B6F8                            ; ===========================================================================
0001B6F8 0000                       Obj85_Index:	dc.w Obj85_Main-Obj85_Index
0001B6FA 0000                       		dc.w Obj85_Eggman-Obj85_Index
0001B6FC 0000                       		dc.w loc_1A38E-Obj85_Index
0001B6FE 0000                       		dc.w loc_1A346-Obj85_Index
0001B700 0000                       		dc.w loc_1A2C6-Obj85_Index
0001B702 0000                       		dc.w loc_1A3AC-Obj85_Index
0001B704 0000                       		dc.w loc_1A264-Obj85_Index
0001B706                            
0001B706 0100 0100 0470             Obj85_ObjData:	dc.w $100, $100, $470	; X pos, Y pos,	VRAM setting
0001B70C 0001 B3C6                  		dc.l Map_obj82		; mappings pointer
0001B710 25B0 0590 0300             		dc.w $25B0, $590, $300
0001B716 0000 0000                  		dc.l Map_obj84
0001B71A 26E0 0596 03A0             		dc.w $26E0, $596, $3A0
0001B720 0000 0000                  		dc.l Map_FZBoss
0001B724 26E0 0596 0470             		dc.w $26E0, $596, $470
0001B72A 0001 B3C6                  		dc.l Map_obj82
0001B72E 26E0 0596 0400             		dc.w $26E0, $596, $400
0001B734 0001 96A8                  		dc.l Map_Eggman
0001B738 26E0 0596 0400             		dc.w $26E0, $596, $400
0001B73E 0001 96A8                  		dc.l Map_Eggman
0001B742                            
0001B742 0200 0420 19               Obj85_ObjData2:	dc.b 2,	0, 4, $20, $19	; routine num, animation, sprite priority, width, height
0001B747 0400 0112 08               		dc.b 4,	0, 1, $12, 8
0001B74C 0600 0300 00               		dc.b 6,	0, 3, 0, 0
0001B751 0800 0300 00               		dc.b 8,	0, 3, 0, 0
0001B756 0A00 0320 20               		dc.b $A, 0, 3, $20, $20
0001B75B 0C00 0300 00               		dc.b $C, 0, 3, 0, 0
0001B760                            ; ===========================================================================
0001B760                            
0001B760                            Obj85_Main:				; XREF: Obj85_Index
0001B760 45FA FFA4                  		lea	Obj85_ObjData(pc),a2
0001B764 47FA FFDC                  		lea	Obj85_ObjData2(pc),a3
0001B768 2248                       		movea.l	a0,a1
0001B76A 7205                       		moveq	#5,d1
0001B76C 6000                       		bra.s	Obj85_LoadBoss
0001B76E                            ; ===========================================================================
0001B76E                            
0001B76E                            Obj85_Loop:
0001B76E 4EB9 0000 E590             		jsr	SingleObjLoad2
0001B774 6600                       		bne.s	loc_19E20
0001B776                            
0001B776                            Obj85_LoadBoss:				; XREF: Obj85_Main
0001B776 12BC 0085                  		move.b	#$85,(a1)
0001B77A 335A 0008                  		move.w	(a2)+,8(a1)
0001B77E 335A 000C                  		move.w	(a2)+,$C(a1)
0001B782 335A 0002                  		move.w	(a2)+,2(a1)
0001B786 235A 0004                  		move.l	(a2)+,4(a1)
0001B78A 135B 0024                  		move.b	(a3)+,$24(a1)
0001B78E 135B 001C                  		move.b	(a3)+,$1C(a1)
0001B792 135B 0018                  		move.b	(a3)+,$18(a1)
0001B796 135B 0017                  		move.b	(a3)+,$17(a1)
0001B79A 135B 0016                  		move.b	(a3)+,$16(a1)
0001B79E 137C 0004 0001             		move.b	#4,1(a1)
0001B7A4 08E8 0007 0001             		bset	#7,1(a0)
0001B7AA 2348 0034                  		move.l	a0,$34(a1)
0001B7AE 51C9 FFBE                  		dbf	d1,Obj85_Loop
0001B7B2                            
0001B7B2                            loc_19E20:
0001B7B2 45E8 0036                  		lea	$36(a0),a2
0001B7B6 4EB9 0000 E57A             		jsr	SingleObjLoad
0001B7BC 6600                       		bne.s	loc_19E5A
0001B7BE 12BC 0086                  		move.b	#$86,(a1)	; load energy ball object
0001B7C2 3489                       		move.w	a1,(a2)
0001B7C4 2348 0034                  		move.l	a0,$34(a1)
0001B7C8 45E8 0038                  		lea	$38(a0),a2
0001B7CC 7400                       		moveq	#0,d2
0001B7CE 7203                       		moveq	#3,d1
0001B7D0                            
0001B7D0                            loc_19E3E:
0001B7D0 4EB9 0000 E590             		jsr	SingleObjLoad2
0001B7D6 6600                       		bne.s	loc_19E5A
0001B7D8 34C9                       		move.w	a1,(a2)+
0001B7DA 12BC 0084                  		move.b	#$84,(a1)	; load crushing	cylinder object
0001B7DE 2348 0034                  		move.l	a0,$34(a1)
0001B7E2 1342 0028                  		move.b	d2,$28(a1)
0001B7E6 5442                       		addq.w	#2,d2
0001B7E8 51C9 FFE6                  		dbf	d1,loc_19E3E
0001B7EC                            
0001B7EC                            loc_19E5A:
0001B7EC 317C 0000 0034             		move.w	#0,$34(a0)
0001B7F2 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
0001B7F8 317C FFFF 0030             		move.w	#-1,$30(a0)
0001B7FE                            
0001B7FE                            Obj85_Eggman:				; XREF: Obj85_Index
0001B7FE 7000                       		moveq	#0,d0
0001B800 1028 0034                  		move.b	$34(a0),d0
0001B804 303B 0000                  		move.w	off_19E80(pc,d0.w),d0
0001B808 4EBB 0000                  		jsr	off_19E80(pc,d0.w)
0001B80C 4EF9 0000 E0E4             		jmp	DisplaySprite
0001B812                            ; ===========================================================================
0001B812 0000 0000                  off_19E80:	dc.w loc_19E90-off_19E80, loc_19EA8-off_19E80
0001B816 0000 0000                  		dc.w loc_19FE6-off_19E80, loc_1A02A-off_19E80
0001B81A 0000 0000                  		dc.w loc_1A074-off_19E80, loc_1A112-off_19E80
0001B81E 0000 0000                  		dc.w loc_1A192-off_19E80, loc_1A1D4-off_19E80
0001B822                            ; ===========================================================================
0001B822                            
0001B822                            loc_19E90:				; XREF: off_19E80
0001B822 4AB8 F680                  		tst.l	($FFFFF680).w
0001B826 6600                       		bne.s	loc_19EA2
0001B828 0C78 2450 F700             		cmpi.w	#$2450,($FFFFF700).w
0001B82E 6500                       		bcs.s	loc_19EA2
0001B830 5428 0034                  		addq.b	#2,$34(a0)
0001B834                            
0001B834                            loc_19EA2:
0001B834 52B8 F636                  		addq.l	#1,($FFFFF636).w
0001B838 4E75                       		rts	
0001B83A                            ; ===========================================================================
0001B83A                            
0001B83A                            loc_19EA8:				; XREF: off_19E80
0001B83A 4A68 0030                  		tst.w	$30(a0)
0001B83E 6A00                       		bpl.s	loc_19F10
0001B840 4268 0030                  		clr.w	$30(a0)
0001B844 4EB9 0000 33B4             		jsr	(RandomNumber).l
0001B84A 0240 000C                  		andi.w	#$C,d0
0001B84E 3200                       		move.w	d0,d1
0001B850 5441                       		addq.w	#2,d1
0001B852 4A80                       		tst.l	d0
0001B854 6A00                       		bpl.s	loc_19EC6
0001B856 C340                       		exg	d1,d0
0001B858                            
0001B858                            loc_19EC6:
0001B858 43FA 0000                  		lea	word_19FD6(pc),a1
0001B85C 3031 0000                  		move.w	(a1,d0.w),d0
0001B860 3231 1000                  		move.w	(a1,d1.w),d1
0001B864 3140 0030                  		move.w	d0,$30(a0)
0001B868 74FF                       		moveq	#-1,d2
0001B86A 3430 0038                  		move.w	$38(a0,d0.w),d2
0001B86E 2242                       		movea.l	d2,a1
0001B870 137C 00FF 0029             		move.b	#-1,$29(a1)
0001B876 337C FFFF 0030             		move.w	#-1,$30(a1)
0001B87C 3430 1038                  		move.w	$38(a0,d1.w),d2
0001B880 2242                       		movea.l	d2,a1
0001B882 137C 0001 0029             		move.b	#1,$29(a1)
0001B888 337C 0000 0030             		move.w	#0,$30(a1)
0001B88E 317C 0001 0032             		move.w	#1,$32(a0)
0001B894 4228 0035                  		clr.b	$35(a0)
0001B898 303C 00B7                  		move.w	#$B7,d0
0001B89C 4EB9 0000 147C             		jsr	(PlaySound_Special).l ;	play rumbling sound
0001B8A2                            
0001B8A2                            loc_19F10:
0001B8A2 4A68 0032                  		tst.w	$32(a0)
0001B8A6 6B00 0000                  		bmi.w	loc_19FA6
0001B8AA 08A8 0000 0022             		bclr	#0,$22(a0)
0001B8B0 3038 D008                  		move.w	($FFFFD008).w,d0
0001B8B4 9068 0008                  		sub.w	8(a0),d0
0001B8B8 6500                       		bcs.s	loc_19F2E
0001B8BA 08E8 0000 0022             		bset	#0,$22(a0)
0001B8C0                            
0001B8C0                            loc_19F2E:
0001B8C0 323C 002B                  		move.w	#$2B,d1
0001B8C4 343C 0014                  		move.w	#$14,d2
0001B8C8 363C 0014                  		move.w	#$14,d3
0001B8CC 3828 0008                  		move.w	8(a0),d4
0001B8D0 4EB9 0001 04CE             		jsr	SolidObject
0001B8D6 4A44                       		tst.w	d4
0001B8D8 6E00                       		bgt.s	loc_19F50
0001B8DA                            
0001B8DA                            loc_19F48:
0001B8DA 4A28 0035                  		tst.b	$35(a0)
0001B8DE 6600                       		bne.s	loc_19F88
0001B8E0 6000                       		bra.s	loc_19F96
0001B8E2                            ; ===========================================================================
0001B8E2                            
0001B8E2                            loc_19F50:
0001B8E2 5E78 F636                  		addq.w	#7,($FFFFF636).w
0001B8E6 0C38 0002 D01C             		cmpi.b	#2,($FFFFD01C).w
0001B8EC 66EC                       		bne.s	loc_19F48
0001B8EE 303C 0300                  		move.w	#$300,d0
0001B8F2 0828 0000 0022             		btst	#0,$22(a0)
0001B8F8 6600                       		bne.s	loc_19F6A
0001B8FA 4440                       		neg.w	d0
0001B8FC                            
0001B8FC                            loc_19F6A:
0001B8FC 31C0 D010                  		move.w	d0,($FFFFD010).w
0001B900 4A28 0035                  		tst.b	$35(a0)
0001B904 6600                       		bne.s	loc_19F88
0001B906 5328 0021                  		subq.b	#1,$21(a0)
0001B90A 117C 0064 0035             		move.b	#$64,$35(a0)
0001B910 303C 00AC                  		move.w	#$AC,d0
0001B914 4EB9 0000 147C             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001B91A                            
0001B91A                            loc_19F88:
0001B91A 5328 0035                  		subq.b	#1,$35(a0)
0001B91E 6700                       		beq.s	loc_19F96
0001B920 117C 0003 001C             		move.b	#3,$1C(a0)
0001B926 6000                       		bra.s	loc_19F9C
0001B928                            ; ===========================================================================
0001B928                            
0001B928                            loc_19F96:
0001B928 117C 0001 001C             		move.b	#1,$1C(a0)
0001B92E                            
0001B92E                            loc_19F9C:
0001B92E 43FA FA64                  		lea	Ani_obj82(pc),a1
0001B932 4EF9 0000 B1F6             		jmp	AnimateSprite
0001B938                            ; ===========================================================================
0001B938                            
0001B938                            loc_19FA6:
0001B938 4A28 0021                  		tst.b	$21(a0)
0001B93C 6700                       		beq.s	loc_19FBC
0001B93E 5428 0034                  		addq.b	#2,$34(a0)
0001B942 317C FFFF 0030             		move.w	#-1,$30(a0)
0001B948 4268 0032                  		clr.w	$32(a0)
0001B94C 4E75                       		rts	
0001B94E                            ; ===========================================================================
0001B94E                            
0001B94E                            loc_19FBC:
0001B94E 117C 0006 0034             		move.b	#6,$34(a0)
0001B954 317C 25C0 0008             		move.w	#$25C0,8(a0)
0001B95A 317C 053C 000C             		move.w	#$53C,$C(a0)
0001B960 117C 0014 0016             		move.b	#$14,$16(a0)
0001B966 4E75                       		rts	
0001B968                            ; ===========================================================================
0001B968 0000 0002 0002 0004 0004+  word_19FD6:	dc.w 0,	2, 2, 4, 4, 6, 6, 0
0001B978                            ; ===========================================================================
0001B978                            
0001B978                            loc_19FE6:				; XREF: off_19E80
0001B978 70FF                       		moveq	#-1,d0
0001B97A 3028 0036                  		move.w	$36(a0),d0
0001B97E 2240                       		movea.l	d0,a1
0001B980 4A68 0030                  		tst.w	$30(a0)
0001B984 6A00                       		bpl.s	loc_1A000
0001B986 4268 0030                  		clr.w	$30(a0)
0001B98A 137C 00FF 0029             		move.b	#-1,$29(a1)
0001B990 6100                       		bsr.s	loc_1A020
0001B992                            
0001B992                            loc_1A000:
0001B992 700F                       		moveq	#$F,d0
0001B994 C078 FE0E                  		and.w	($FFFFFE0E).w,d0
0001B998 6600                       		bne.s	loc_1A00A
0001B99A 6100                       		bsr.s	loc_1A020
0001B99C                            
0001B99C                            loc_1A00A:
0001B99C 4A68 0032                  		tst.w	$32(a0)
0001B9A0 6700                       		beq.s	locret_1A01E
0001B9A2 5528 0034                  		subq.b	#2,$34(a0)
0001B9A6 317C FFFF 0030             		move.w	#-1,$30(a0)
0001B9AC 4268 0032                  		clr.w	$32(a0)
0001B9B0                            
0001B9B0                            locret_1A01E:
0001B9B0 4E75                       		rts	
0001B9B2                            ; ===========================================================================
0001B9B2                            
0001B9B2                            loc_1A020:
0001B9B2 303C 00B1                  		move.w	#$B1,d0
0001B9B6 4EF9 0000 147C             		jmp	(PlaySound_Special).l ;	play electricity sound
0001B9BC                            ; ===========================================================================
0001B9BC                            
0001B9BC                            loc_1A02A:				; XREF: off_19E80
0001B9BC 117C 0030 0017             		move.b	#$30,$17(a0)
0001B9C2 08E8 0000 0022             		bset	#0,$22(a0)
0001B9C8 4EB9 0000 E0BE             		jsr	SpeedToPos
0001B9CE 117C 0006 001A             		move.b	#6,$1A(a0)
0001B9D4 0668 0010 0012             		addi.w	#$10,$12(a0)
0001B9DA 0C68 059C 000C             		cmpi.w	#$59C,$C(a0)
0001B9E0 6500                       		bcs.s	loc_1A070
0001B9E2 317C 059C 000C             		move.w	#$59C,$C(a0)
0001B9E8 5428 0034                  		addq.b	#2,$34(a0)
0001B9EC 117C 0020 0017             		move.b	#$20,$17(a0)
0001B9F2 317C 0100 0010             		move.w	#$100,$10(a0)
0001B9F8 317C FF00 0012             		move.w	#-$100,$12(a0)
0001B9FE 5438 F742                  		addq.b	#2,($FFFFF742).w
0001BA02                            
0001BA02                            loc_1A070:
0001BA02 6000 0000                  		bra.w	loc_1A166
0001BA06                            ; ===========================================================================
0001BA06                            
0001BA06                            loc_1A074:				; XREF: off_19E80
0001BA06 08E8 0000 0022             		bset	#0,$22(a0)
0001BA0C 117C 0004 001C             		move.b	#4,$1C(a0)
0001BA12 4EB9 0000 E0BE             		jsr	SpeedToPos
0001BA18 0668 0010 0012             		addi.w	#$10,$12(a0)
0001BA1E 0C68 05A3 000C             		cmpi.w	#$5A3,$C(a0)
0001BA24 6500                       		bcs.s	loc_1A09A
0001BA26 317C FFC0 0012             		move.w	#-$40,$12(a0)
0001BA2C                            
0001BA2C                            loc_1A09A:
0001BA2C 317C 0400 0010             		move.w	#$400,$10(a0)
0001BA32 3028 0008                  		move.w	8(a0),d0
0001BA36 9078 D008                  		sub.w	($FFFFD008).w,d0
0001BA3A 6A00                       		bpl.s	loc_1A0B4
0001BA3C 317C 0500 0010             		move.w	#$500,$10(a0)
0001BA42 6000 0000                  		bra.w	loc_1A0F2
0001BA46                            ; ===========================================================================
0001BA46                            
0001BA46                            loc_1A0B4:
0001BA46 0440 0070                  		subi.w	#$70,d0
0001BA4A 6500                       		bcs.s	loc_1A0F2
0001BA4C 0468 0100 0010             		subi.w	#$100,$10(a0)
0001BA52 5140                       		subq.w	#8,d0
0001BA54 6500                       		bcs.s	loc_1A0F2
0001BA56 0468 0100 0010             		subi.w	#$100,$10(a0)
0001BA5C 5140                       		subq.w	#8,d0
0001BA5E 6500                       		bcs.s	loc_1A0F2
0001BA60 0468 0080 0010             		subi.w	#$80,$10(a0)
0001BA66 5140                       		subq.w	#8,d0
0001BA68 6500                       		bcs.s	loc_1A0F2
0001BA6A 0468 0080 0010             		subi.w	#$80,$10(a0)
0001BA70 5140                       		subq.w	#8,d0
0001BA72 6500                       		bcs.s	loc_1A0F2
0001BA74 0468 0080 0010             		subi.w	#$80,$10(a0)
0001BA7A 0440 0038                  		subi.w	#$38,d0
0001BA7E 6500                       		bcs.s	loc_1A0F2
0001BA80 4268 0010                  		clr.w	$10(a0)
0001BA84                            
0001BA84                            loc_1A0F2:
0001BA84 0C68 26A0 0008             		cmpi.w	#$26A0,8(a0)
0001BA8A 6500                       		bcs.s	loc_1A110
0001BA8C 317C 26A0 0008             		move.w	#$26A0,8(a0)
0001BA92 317C 0240 0010             		move.w	#$240,$10(a0)
0001BA98 317C FB40 0012             		move.w	#-$4C0,$12(a0)
0001BA9E 5428 0034                  		addq.b	#2,$34(a0)
0001BAA2                            
0001BAA2                            loc_1A110:
0001BAA2 6000                       		bra.s	loc_1A15C
0001BAA4                            ; ===========================================================================
0001BAA4                            
0001BAA4                            loc_1A112:				; XREF: off_19E80
0001BAA4 4EB9 0000 E0BE             		jsr	SpeedToPos
0001BAAA 0C68 26E0 0008             		cmpi.w	#$26E0,8(a0)
0001BAB0 6500                       		bcs.s	loc_1A124
0001BAB2 4268 0010                  		clr.w	$10(a0)
0001BAB6                            
0001BAB6                            loc_1A124:
0001BAB6 0668 0034 0012             		addi.w	#$34,$12(a0)
0001BABC 4A68 0012                  		tst.w	$12(a0)
0001BAC0 6B00                       		bmi.s	loc_1A142
0001BAC2 0C68 0592 000C             		cmpi.w	#$592,$C(a0)
0001BAC8 6500                       		bcs.s	loc_1A142
0001BACA 317C 0592 000C             		move.w	#$592,$C(a0)
0001BAD0 4268 0012                  		clr.w	$12(a0)
0001BAD4                            
0001BAD4                            loc_1A142:
0001BAD4 3028 0010                  		move.w	$10(a0),d0
0001BAD8 8068 0012                  		or.w	$12(a0),d0
0001BADC 6600                       		bne.s	loc_1A15C
0001BADE 5428 0034                  		addq.b	#2,$34(a0)
0001BAE2 317C FE80 0012             		move.w	#-$180,$12(a0)
0001BAE8 117C 0001 0021             		move.b	#1,$21(a0)
0001BAEE                            
0001BAEE                            loc_1A15C:
0001BAEE 43FA F8A4                  		lea	Ani_obj82(pc),a1
0001BAF2 4EB9 0000 B1F6             		jsr	AnimateSprite
0001BAF8                            
0001BAF8                            loc_1A166:
0001BAF8 0C78 2700 F72A             		cmpi.w	#$2700,($FFFFF72A).w
0001BAFE 6C00                       		bge.s	loc_1A172
0001BB00 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0001BB04                            
0001BB04                            loc_1A172:
0001BB04 0C28 000C 0034             		cmpi.b	#$C,$34(a0)
0001BB0A 6C00                       		bge.s	locret_1A190
0001BB0C 323C 001B                  		move.w	#$1B,d1
0001BB10 343C 0070                  		move.w	#$70,d2
0001BB14 363C 0071                  		move.w	#$71,d3
0001BB18 3828 0008                  		move.w	8(a0),d4
0001BB1C 4EF9 0001 04CE             		jmp	SolidObject
0001BB22                            ; ===========================================================================
0001BB22                            
0001BB22                            locret_1A190:
0001BB22 4E75                       		rts	
0001BB24                            ; ===========================================================================
0001BB24                            
0001BB24                            loc_1A192:				; XREF: off_19E80
0001BB24 217C 0001 96A8 0004        		move.l	#Map_Eggman,4(a0)
0001BB2C 317C 0400 0002             		move.w	#$400,2(a0)
0001BB32 117C 0000 001C             		move.b	#0,$1C(a0)
0001BB38 08E8 0000 0022             		bset	#0,$22(a0)
0001BB3E 4EB9 0000 E0BE             		jsr	SpeedToPos
0001BB44 0C68 0544 000C             		cmpi.w	#$544,$C(a0)
0001BB4A 6400                       		bcc.s	loc_1A1D0
0001BB4C 317C 0180 0010             		move.w	#$180,$10(a0)
0001BB52 317C FFE8 0012             		move.w	#-$18,$12(a0)
0001BB58 117C 000F 0020             		move.b	#$F,$20(a0)
0001BB5E 5428 0034                  		addq.b	#2,$34(a0)
0001BB62                            
0001BB62                            loc_1A1D0:
0001BB62 6000 FF8A                  		bra.w	loc_1A15C
0001BB66                            ; ===========================================================================
0001BB66                            
0001BB66                            loc_1A1D4:				; XREF: off_19E80
0001BB66 08E8 0000 0022             		bset	#0,$22(a0)
0001BB6C 4EB9 0000 E0BE             		jsr	SpeedToPos
0001BB72 4A68 0030                  		tst.w	$30(a0)
0001BB76 6600                       		bne.s	loc_1A1FC
0001BB78 4A28 0020                  		tst.b	$20(a0)
0001BB7C 6600                       		bne.s	loc_1A216
0001BB7E 317C 001E 0030             		move.w	#$1E,$30(a0)
0001BB84 303C 00AC                  		move.w	#$AC,d0
0001BB88 4EB9 0000 147C             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001BB8E                            
0001BB8E                            loc_1A1FC:
0001BB8E 5368 0030                  		subq.w	#1,$30(a0)
0001BB92 6600                       		bne.s	loc_1A216
0001BB94 4A28 0022                  		tst.b	$22(a0)
0001BB98 6A00                       		bpl.s	loc_1A210
0001BB9A 317C 0060 0012             		move.w	#$60,$12(a0)
0001BBA0 6000                       		bra.s	loc_1A216
0001BBA2                            ; ===========================================================================
0001BBA2                            
0001BBA2                            loc_1A210:
0001BBA2 117C 000F 0020             		move.b	#$F,$20(a0)
0001BBA8                            
0001BBA8                            loc_1A216:
0001BBA8 0C78 2790 D008             		cmpi.w	#$2790,($FFFFD008).w
0001BBAE 6D00                       		blt.s	loc_1A23A
0001BBB0 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w
0001BBB6 31FC 0000 F602             		move.w	#0,($FFFFF602).w
0001BBBC 4278 D014                  		clr.w	($FFFFD014).w
0001BBC0 4A68 0012                  		tst.w	$12(a0)
0001BBC4 6A00                       		bpl.s	loc_1A248
0001BBC6 31FC 0100 F602             		move.w	#$100,($FFFFF602).w
0001BBCC                            
0001BBCC                            loc_1A23A:
0001BBCC 0C78 27E0 D008             		cmpi.w	#$27E0,($FFFFD008).w
0001BBD2 6D00                       		blt.s	loc_1A248
0001BBD4 31FC 27E0 D008             		move.w	#$27E0,($FFFFD008).w
0001BBDA                            
0001BBDA                            loc_1A248:
0001BBDA 0C68 2900 0008             		cmpi.w	#$2900,8(a0)
0001BBE0 6500                       		bcs.s	loc_1A260
0001BBE2 4A28 0001                  		tst.b	1(a0)
0001BBE6 6B00                       		bmi.s	loc_1A260
0001BBE8 11FC 0018 F600             		move.b	#$18,($FFFFF600).w
0001BBEE 6000 FAF4                  		bra.w	Obj85_Delete
0001BBF2                            ; ===========================================================================
0001BBF2                            
0001BBF2                            loc_1A260:
0001BBF2 6000 FEFA                  		bra.w	loc_1A15C
0001BBF6                            ; ===========================================================================
0001BBF6                            
0001BBF6                            loc_1A264:				; XREF: Obj85_Index
0001BBF6 2268 0034                  		movea.l	$34(a0),a1
0001BBFA 1011                       		move.b	(a1),d0
0001BBFC B010                       		cmp.b	(a0),d0
0001BBFE 6600 FAE4                  		bne.w	Obj85_Delete
0001BC02 117C 0007 001C             		move.b	#7,$1C(a0)
0001BC08 0C29 000C 0034             		cmpi.b	#$C,$34(a1)
0001BC0E 6C00                       		bge.s	loc_1A280
0001BC10 6000                       		bra.s	loc_1A2A6
0001BC12                            ; ===========================================================================
0001BC12                            
0001BC12                            loc_1A280:
0001BC12 4A69 0010                  		tst.w	$10(a1)
0001BC16 6700                       		beq.s	loc_1A28C
0001BC18 117C 000B 001C             		move.b	#$B,$1C(a0)
0001BC1E                            
0001BC1E                            loc_1A28C:
0001BC1E 43FA DA38                  		lea	Ani_Eggman(pc),a1
0001BC22 4EB9 0000 B1F6             		jsr	AnimateSprite
0001BC28                            
0001BC28                            loc_1A296:
0001BC28 2268 0034                  		movea.l	$34(a0),a1
0001BC2C 3169 0008 0008             		move.w	8(a1),8(a0)
0001BC32 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001BC38                            
0001BC38                            loc_1A2A6:
0001BC38 2268 0034                  		movea.l	$34(a0),a1
0001BC3C 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001BC42 7003                       		moveq	#3,d0
0001BC44 C028 0022                  		and.b	$22(a0),d0
0001BC48 0228 00FC 0001             		andi.b	#-4,1(a0)
0001BC4E 8128 0001                  		or.b	d0,1(a0)
0001BC52 4EF9 0000 E0E4             		jmp	DisplaySprite
0001BC58                            ; ===========================================================================
0001BC58                            
0001BC58                            loc_1A2C6:				; XREF: Obj85_Index
0001BC58 2268 0034                  		movea.l	$34(a0),a1
0001BC5C 1011                       		move.b	(a1),d0
0001BC5E B010                       		cmp.b	(a0),d0
0001BC60 6600 FA82                  		bne.w	Obj85_Delete
0001BC64 0CA9 0001 96A8 0004        		cmpi.l	#Map_Eggman,4(a1)
0001BC6C 6700                       		beq.s	loc_1A2E4
0001BC6E 117C 000A 001A             		move.b	#$A,$1A(a0)
0001BC74 60C2                       		bra.s	loc_1A2A6
0001BC76                            ; ===========================================================================
0001BC76                            
0001BC76                            loc_1A2E4:
0001BC76 117C 0001 001C             		move.b	#1,$1C(a0)
0001BC7C 4A29 0021                  		tst.b	$21(a1)
0001BC80 6F00                       		ble.s	loc_1A312
0001BC82 117C 0006 001C             		move.b	#6,$1C(a0)
0001BC88 217C 0001 96A8 0004        		move.l	#Map_Eggman,4(a0)
0001BC90 317C 0400 0002             		move.w	#$400,2(a0)
0001BC96 43FA D9C0                  		lea	Ani_Eggman(pc),a1
0001BC9A 4EB9 0000 B1F6             		jsr	AnimateSprite
0001BCA0 6000 FF86                  		bra.w	loc_1A296
0001BCA4                            ; ===========================================================================
0001BCA4                            
0001BCA4                            loc_1A312:
0001BCA4 4A28 0001                  		tst.b	1(a0)
0001BCA8 6A00 FA3A                  		bpl.w	Obj85_Delete
0001BCAC 6100 D558                  		bsr.w	BossDefeated
0001BCB0 117C 0002 0018             		move.b	#2,$18(a0)
0001BCB6 117C 0000 001C             		move.b	#0,$1C(a0)
0001BCBC 217C 0000 0000 0004        		move.l	#Map_Eggman2,4(a0)
0001BCC4 317C 03A0 0002             		move.w	#$3A0,2(a0)
0001BCCA 43FA 0000                  		lea	Ani_obj85(pc),a1
0001BCCE 4EB9 0000 B1F6             		jsr	AnimateSprite
0001BCD4 6000 FF52                  		bra.w	loc_1A296
0001BCD8                            ; ===========================================================================
0001BCD8                            
0001BCD8                            loc_1A346:				; XREF: Obj85_Index
0001BCD8 08E8 0000 0022             		bset	#0,$22(a0)
0001BCDE 2268 0034                  		movea.l	$34(a0),a1
0001BCE2 0CA9 0001 96A8 0004        		cmpi.l	#Map_Eggman,4(a1)
0001BCEA 6700                       		beq.s	loc_1A35E
0001BCEC 6000 FF4A                  		bra.w	loc_1A2A6
0001BCF0                            ; ===========================================================================
0001BCF0                            
0001BCF0                            loc_1A35E:
0001BCF0 3169 0008 0008             		move.w	8(a1),8(a0)
0001BCF6 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001BCFC 4A28 001E                  		tst.b	$1E(a0)
0001BD00 6600                       		bne.s	loc_1A376
0001BD02 117C 0014 001E             		move.b	#$14,$1E(a0)
0001BD08                            
0001BD08                            loc_1A376:
0001BD08 5328 001E                  		subq.b	#1,$1E(a0)
0001BD0C 6E00                       		bgt.s	loc_1A38A
0001BD0E 5228 001A                  		addq.b	#1,$1A(a0)
0001BD12 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0001BD18 6E00 F9CA                  		bgt.w	Obj85_Delete
0001BD1C                            
0001BD1C                            loc_1A38A:
0001BD1C 6000 FF0A                  		bra.w	loc_1A296
0001BD20                            ; ===========================================================================
0001BD20                            
0001BD20                            loc_1A38E:				; XREF: Obj85_Index
0001BD20 117C 000B 001A             		move.b	#$B,$1A(a0)
0001BD26 3038 D008                  		move.w	($FFFFD008).w,d0
0001BD2A 9068 0008                  		sub.w	8(a0),d0
0001BD2E 6500                       		bcs.s	loc_1A3A6
0001BD30 4A28 0001                  		tst.b	1(a0)
0001BD34 6A00 F9AE                  		bpl.w	Obj85_Delete
0001BD38                            
0001BD38                            loc_1A3A6:
0001BD38 4EF9 0000 E0E4             		jmp	DisplaySprite
0001BD3E                            ; ===========================================================================
0001BD3E                            
0001BD3E                            loc_1A3AC:				; XREF: Obj85_Index
0001BD3E 117C 0000 001A             		move.b	#0,$1A(a0)
0001BD44 08E8 0000 0022             		bset	#0,$22(a0)
0001BD4A 2268 0034                  		movea.l	$34(a0),a1
0001BD4E 0C29 000C 0034             		cmpi.b	#$C,$34(a1)
0001BD54 6600                       		bne.s	loc_1A3D0
0001BD56 0CA9 0001 96A8 0004        		cmpi.l	#Map_Eggman,4(a1)
0001BD5E 6700 F984                  		beq.w	Obj85_Delete
0001BD62                            
0001BD62                            loc_1A3D0:
0001BD62 6000 FED4                  		bra.w	loc_1A2A6
0001BD66                            ; ===========================================================================
0001BD66                            Ani_obj85:
0001BD66                            	include "_anim\obj85.asm"
0001BD66                            ; ---------------------------------------------------------------------------
0001BD66                            ; Animation script - Eggman (FZ)
0001BD66                            ; ---------------------------------------------------------------------------
0001BD66 0000                       		dc.w byte_1A3D6-Ani_obj85
0001BD68 0300 01FF                  byte_1A3D6:	dc.b 3,	0, 1, $FF
0001BD6C                            		even
0001BD6C                            		even
0001BD6C                            
0001BD6C                            Map_Eggman2:
0001BD6C                            	include "_maps\Eggman2.asm"
0001BD6C                            ; ---------------------------------------------------------------------------
0001BD6C                            ; Sprite mappings - Eggman (FZ)
0001BD6C                            ; ---------------------------------------------------------------------------
0001BD6C 0000                       		dc.w byte_1A3DE-Map_Eggman2
0001BD6E 0000                       		dc.w byte_1A3FD-Map_Eggman2
0001BD70 06                         byte_1A3DE:	dc.b 6
0001BD71 E408 0020 F4               		dc.b $E4, 8, 0,	$20, $F4
0001BD76 EC0D 0023 E4               		dc.b $EC, $D, 0, $23, $E4
0001BD7B EC09 002B 04               		dc.b $EC, 9, 0,	$2B, 4
0001BD80 FC05 203A E4               		dc.b $FC, 5, $20, $3A, $E4
0001BD85 FC0E 203E 04               		dc.b $FC, $E, $20, $3E,	4
0001BD8A 1404 204A 04               		dc.b $14, 4, $20, $4A, 4
0001BD8F 06                         byte_1A3FD:	dc.b 6
0001BD90 E40A 0031 F4               		dc.b $E4, $A, 0, $31, $F4
0001BD95 EC05 0023 E4               		dc.b $EC, 5, 0,	$23, $E4
0001BD9A EC09 002B 04               		dc.b $EC, 9, 0,	$2B, 4
0001BD9F FC05 203A E4               		dc.b $FC, 5, $20, $3A, $E4
0001BDA4 FC0E 203E 04               		dc.b $FC, $E, $20, $3E,	4
0001BDA9 1404 204A 04               		dc.b $14, 4, $20, $4A, 4
0001BDAE                            		even
0001BDAE                            		even
0001BDAE                            
0001BDAE                            Map_FZBoss:
0001BDAE                            	include "_maps\FZ boss.asm"
0001BDAE                            ; ---------------------------------------------------------------------------
0001BDAE                            ; Sprite mappings - boss (FZ)
0001BDAE                            ; ---------------------------------------------------------------------------
0001BDAE 0000                       		dc.w byte_1A422-Map_FZBoss
0001BDB0 0000                       		dc.w byte_1A42D-Map_FZBoss
0001BDB2 0000                       		dc.w byte_1A43D-Map_FZBoss
0001BDB4 02                         byte_1A422:	dc.b 2
0001BDB5 140E 2800 F4               		dc.b $14, $E, $28, 0, $F4
0001BDBA 2400 280C EC               		dc.b $24, 0, $28, $C, $EC
0001BDBF 03                         byte_1A42D:	dc.b 3
0001BDC0 0C05 280D 0C               		dc.b $C, 5, $28, $D, $C
0001BDC5 1C00 2811 0C               		dc.b $1C, 0, $28, $11, $C
0001BDCA 140D 2812 EC               		dc.b $14, $D, $28, $12,	$EC
0001BDCF 02                         byte_1A43D:	dc.b 2
0001BDD0 0C01 281A 0C               		dc.b $C, 1, $28, $1A, $C
0001BDD5 140C 281C EC               		dc.b $14, $C, $28, $1C,	$EC
0001BDDA                            		even
0001BDDA                            		even
0001BDDA                            
0001BDDA                            ; ===========================================================================
0001BDDA                            
0001BDDA                            Obj84_Delete:
0001BDDA 4EF9 0000 E120             		jmp	DeleteObject
0001BDE0                            ; ===========================================================================
0001BDE0                            ; ---------------------------------------------------------------------------
0001BDE0                            ; Object 84 - cylinder Eggman	hides in (FZ)
0001BDE0                            ; ---------------------------------------------------------------------------
0001BDE0                            
0001BDE0                            Obj84:					; XREF: Obj_Index
0001BDE0 7000                       		moveq	#0,d0
0001BDE2 1028 0024                  		move.b	$24(a0),d0
0001BDE6 303B 0000                  		move.w	Obj84_Index(pc,d0.w),d0
0001BDEA 4EFB 0000                  		jmp	Obj84_Index(pc,d0.w)
0001BDEE                            ; ===========================================================================
0001BDEE 0000                       Obj84_Index:	dc.w Obj84_Main-Obj84_Index
0001BDF0 0000                       		dc.w loc_1A4CE-Obj84_Index
0001BDF2 0000                       		dc.w loc_1A57E-Obj84_Index
0001BDF4                            
0001BDF4 24D0 0620                  Obj84_PosData:	dc.w $24D0, $620
0001BDF8 2550 0620                  		dc.w $2550, $620
0001BDFC 2490 04C0                  		dc.w $2490, $4C0
0001BE00 2510 04C0                  		dc.w $2510, $4C0
0001BE04                            ; ===========================================================================
0001BE04                            
0001BE04                            Obj84_Main:				; XREF: Obj84_Index
0001BE04 43FA FFEE                  		lea	Obj84_PosData(pc),a1
0001BE08 7000                       		moveq	#0,d0
0001BE0A 1028 0028                  		move.b	$28(a0),d0
0001BE0E D040                       		add.w	d0,d0
0001BE10 D2C0                       		adda.w	d0,a1
0001BE12 117C 0004 0001             		move.b	#4,1(a0)
0001BE18 08E8 0007 0001             		bset	#7,1(a0)
0001BE1E 08E8 0004 0001             		bset	#4,1(a0)
0001BE24 317C 0300 0002             		move.w	#$300,2(a0)
0001BE2A 217C 0000 0000 0004        		move.l	#Map_obj84,4(a0)
0001BE32 3159 0008                  		move.w	(a1)+,8(a0)
0001BE36 3151 000C                  		move.w	(a1),$C(a0)
0001BE3A 3159 0038                  		move.w	(a1)+,$38(a0)
0001BE3E 117C 0020 0016             		move.b	#$20,$16(a0)
0001BE44 117C 0060 0017             		move.b	#$60,$17(a0)
0001BE4A 117C 0020 0019             		move.b	#$20,$19(a0)
0001BE50 117C 0060 0016             		move.b	#$60,$16(a0)
0001BE56 117C 0003 0018             		move.b	#3,$18(a0)
0001BE5C 5428 0024                  		addq.b	#2,$24(a0)
0001BE60                            
0001BE60                            loc_1A4CE:				; XREF: Obj84_Index
0001BE60 0C28 0002 0028             		cmpi.b	#2,$28(a0)
0001BE66 6F00                       		ble.s	loc_1A4DC
0001BE68 08E8 0001 0001             		bset	#1,1(a0)
0001BE6E                            
0001BE6E                            loc_1A4DC:
0001BE6E 42A8 003C                  		clr.l	$3C(a0)
0001BE72 4A28 0029                  		tst.b	$29(a0)
0001BE76 6700                       		beq.s	loc_1A4EA
0001BE78 5428 0024                  		addq.b	#2,$24(a0)
0001BE7C                            
0001BE7C                            loc_1A4EA:
0001BE7C 2028 003C                  		move.l	$3C(a0),d0
0001BE80 2228 0038                  		move.l	$38(a0),d1
0001BE84 D280                       		add.l	d0,d1
0001BE86 4841                       		swap	d1
0001BE88 3141 000C                  		move.w	d1,$C(a0)
0001BE8C 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0001BE92 6600                       		bne.s	loc_1A524
0001BE94 4A68 0030                  		tst.w	$30(a0)
0001BE98 6A00                       		bpl.s	loc_1A524
0001BE9A 70F6                       		moveq	#-$A,d0
0001BE9C 0C28 0002 0028             		cmpi.b	#2,$28(a0)
0001BEA2 6F00                       		ble.s	loc_1A514
0001BEA4 700E                       		moveq	#$E,d0
0001BEA6                            
0001BEA6                            loc_1A514:
0001BEA6 D240                       		add.w	d0,d1
0001BEA8 2268 0034                  		movea.l	$34(a0),a1
0001BEAC 3341 000C                  		move.w	d1,$C(a1)
0001BEB0 3368 0008 0008             		move.w	8(a0),8(a1)
0001BEB6                            
0001BEB6                            loc_1A524:
0001BEB6 323C 002B                  		move.w	#$2B,d1
0001BEBA 343C 0060                  		move.w	#$60,d2
0001BEBE 363C 0061                  		move.w	#$61,d3
0001BEC2 3828 0008                  		move.w	8(a0),d4
0001BEC6 4EB9 0001 04CE             		jsr	SolidObject
0001BECC 7000                       		moveq	#0,d0
0001BECE 3228 003C                  		move.w	$3C(a0),d1
0001BED2 6A00                       		bpl.s	loc_1A550
0001BED4 4441                       		neg.w	d1
0001BED6 5141                       		subq.w	#8,d1
0001BED8 6500                       		bcs.s	loc_1A55C
0001BEDA 5200                       		addq.b	#1,d0
0001BEDC E841                       		asr.w	#4,d1
0001BEDE D041                       		add.w	d1,d0
0001BEE0 6000                       		bra.s	loc_1A55C
0001BEE2                            ; ===========================================================================
0001BEE2                            
0001BEE2                            loc_1A550:
0001BEE2 0441 0027                  		subi.w	#$27,d1
0001BEE6 6500                       		bcs.s	loc_1A55C
0001BEE8 5200                       		addq.b	#1,d0
0001BEEA E841                       		asr.w	#4,d1
0001BEEC D041                       		add.w	d1,d0
0001BEEE                            
0001BEEE                            loc_1A55C:
0001BEEE 1140 001A                  		move.b	d0,$1A(a0)
0001BEF2 3038 D008                  		move.w	($FFFFD008).w,d0
0001BEF6 9068 0008                  		sub.w	8(a0),d0
0001BEFA 6B00                       		bmi.s	loc_1A578
0001BEFC 0440 0140                  		subi.w	#$140,d0
0001BF00 6B00                       		bmi.s	loc_1A578
0001BF02 4A28 0001                  		tst.b	1(a0)
0001BF06 6A00 FED2                  		bpl.w	Obj84_Delete
0001BF0A                            
0001BF0A                            loc_1A578:
0001BF0A 4EF9 0000 E0E4             		jmp	DisplaySprite
0001BF10                            ; ===========================================================================
0001BF10                            
0001BF10                            loc_1A57E:				; XREF: Obj84_Index
0001BF10 7000                       		moveq	#0,d0
0001BF12 1028 0028                  		move.b	$28(a0),d0
0001BF16 303B 0000                  		move.w	off_1A590(pc,d0.w),d0
0001BF1A 4EBB 0000                  		jsr	off_1A590(pc,d0.w)
0001BF1E 6000 FF5C                  		bra.w	loc_1A4EA
0001BF22                            ; ===========================================================================
0001BF22 0000                       off_1A590:	dc.w loc_1A598-off_1A590
0001BF24 0000                       		dc.w loc_1A598-off_1A590
0001BF26 0000                       		dc.w loc_1A604-off_1A590
0001BF28 0000                       		dc.w loc_1A604-off_1A590
0001BF2A                            ; ===========================================================================
0001BF2A                            
0001BF2A                            loc_1A598:				; XREF: off_1A590
0001BF2A 4A28 0029                  		tst.b	$29(a0)
0001BF2E 6600                       		bne.s	loc_1A5D4
0001BF30 2268 0034                  		movea.l	$34(a0),a1
0001BF34 4A29 0021                  		tst.b	$21(a1)
0001BF38 6600                       		bne.s	loc_1A5B4
0001BF3A 6100 D2CA                  		bsr.w	BossDefeated
0001BF3E 04A8 0001 0000 003C        		subi.l	#$10000,$3C(a0)
0001BF46                            
0001BF46                            loc_1A5B4:
0001BF46 06A8 0002 0000 003C        		addi.l	#$20000,$3C(a0)
0001BF4E 6400                       		bcc.s	locret_1A602
0001BF50 42A8 003C                  		clr.l	$3C(a0)
0001BF54 2268 0034                  		movea.l	$34(a0),a1
0001BF58 5369 0032                  		subq.w	#1,$32(a1)
0001BF5C 4269 0030                  		clr.w	$30(a1)
0001BF60 5528 0024                  		subq.b	#2,$24(a0)
0001BF64 4E75                       		rts	
0001BF66                            ; ===========================================================================
0001BF66                            
0001BF66                            loc_1A5D4:
0001BF66 0C68 FFF0 003C             		cmpi.w	#-$10,$3C(a0)
0001BF6C 6C00                       		bge.s	loc_1A5E4
0001BF6E 04A8 0002 8000 003C        		subi.l	#$28000,$3C(a0)
0001BF76                            
0001BF76                            loc_1A5E4:
0001BF76 04A8 0000 8000 003C        		subi.l	#$8000,$3C(a0)
0001BF7E 0C68 FF60 003C             		cmpi.w	#-$A0,$3C(a0)
0001BF84 6E00                       		bgt.s	locret_1A602
0001BF86 4268 003E                  		clr.w	$3E(a0)
0001BF8A 317C FF60 003C             		move.w	#-$A0,$3C(a0)
0001BF90 4228 0029                  		clr.b	$29(a0)
0001BF94                            
0001BF94                            locret_1A602:
0001BF94 4E75                       		rts	
0001BF96                            ; ===========================================================================
0001BF96                            
0001BF96                            loc_1A604:				; XREF: off_1A590
0001BF96 08E8 0001 0001             		bset	#1,1(a0)
0001BF9C 4A28 0029                  		tst.b	$29(a0)
0001BFA0 6600                       		bne.s	loc_1A646
0001BFA2 2268 0034                  		movea.l	$34(a0),a1
0001BFA6 4A29 0021                  		tst.b	$21(a1)
0001BFAA 6600                       		bne.s	loc_1A626
0001BFAC 6100 D258                  		bsr.w	BossDefeated
0001BFB0 06A8 0001 0000 003C        		addi.l	#$10000,$3C(a0)
0001BFB8                            
0001BFB8                            loc_1A626:
0001BFB8 04A8 0002 0000 003C        		subi.l	#$20000,$3C(a0)
0001BFC0 6400                       		bcc.s	locret_1A674
0001BFC2 42A8 003C                  		clr.l	$3C(a0)
0001BFC6 2268 0034                  		movea.l	$34(a0),a1
0001BFCA 5369 0032                  		subq.w	#1,$32(a1)
0001BFCE 4269 0030                  		clr.w	$30(a1)
0001BFD2 5528 0024                  		subq.b	#2,$24(a0)
0001BFD6 4E75                       		rts	
0001BFD8                            ; ===========================================================================
0001BFD8                            
0001BFD8                            loc_1A646:
0001BFD8 0C68 0010 003C             		cmpi.w	#$10,$3C(a0)
0001BFDE 6D00                       		blt.s	loc_1A656
0001BFE0 06A8 0002 8000 003C        		addi.l	#$28000,$3C(a0)
0001BFE8                            
0001BFE8                            loc_1A656:
0001BFE8 06A8 0000 8000 003C        		addi.l	#$8000,$3C(a0)
0001BFF0 0C68 00A0 003C             		cmpi.w	#$A0,$3C(a0)
0001BFF6 6D00                       		blt.s	locret_1A674
0001BFF8 4268 003E                  		clr.w	$3E(a0)
0001BFFC 317C 00A0 003C             		move.w	#$A0,$3C(a0)
0001C002 4228 0029                  		clr.b	$29(a0)
0001C006                            
0001C006                            locret_1A674:
0001C006 4E75                       		rts	
0001C008                            ; ===========================================================================
0001C008                            ; ---------------------------------------------------------------------------
0001C008                            ; Sprite mappings - cylinders Eggman hides in (FZ)
0001C008                            ; ---------------------------------------------------------------------------
0001C008                            Map_obj84:
0001C008                            	include "_maps\obj84.asm"
0001C008                            ; ---------------------------------------------------------------------------
0001C008                            ; Sprite mappings - cylinders Eggman hides in (FZ)
0001C008                            ; ---------------------------------------------------------------------------
0001C008 0000 0000                  		dc.w byte_1A68E-Map_obj84, byte_1A6AD-Map_obj84
0001C00C 0000 0000                  		dc.w byte_1A6D6-Map_obj84, byte_1A709-Map_obj84
0001C010 0000 0000                  		dc.w byte_1A746-Map_obj84, byte_1A788-Map_obj84
0001C014 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A788-Map_obj84
0001C018 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A788-Map_obj84
0001C01C 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A7CF-Map_obj84
0001C020 06                         byte_1A68E:	dc.b 6
0001C021 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001C026 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001C02B B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001C030 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001C035 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001C03A B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001C03F 08                         byte_1A6AD:	dc.b 8
0001C040 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001C045 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001C04A B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001C04F B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001C054 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001C059 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001C05E D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001C063 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001C068 0A                         byte_1A6D6:	dc.b $A
0001C069 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001C06E A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001C073 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001C078 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001C07D B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001C082 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001C087 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001C08C D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001C091 F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001C096 F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001C09B 0C                         byte_1A709:	dc.b $C
0001C09C A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001C0A1 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001C0A6 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001C0AB B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001C0B0 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001C0B5 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001C0BA D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001C0BF D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001C0C4 F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001C0C9 F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001C0CE 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001C0D3 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001C0D8 0D                         byte_1A746:	dc.b $D
0001C0D9 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001C0DE A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001C0E3 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001C0E8 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001C0ED B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001C0F2 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001C0F7 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001C0FC D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001C101 F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001C106 F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001C10B 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001C110 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001C115 380F 4050 F0               		dc.b $38, $F, $40, $50,	$F0
0001C11A 0E                         byte_1A788:	dc.b $E
0001C11B A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001C120 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001C125 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001C12A B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001C12F B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001C134 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001C139 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001C13E D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001C143 F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001C148 F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001C14D 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001C152 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001C157 380F 4050 F0               		dc.b $38, $F, $40, $50,	$F0
0001C15C 580F 4050 F0               		dc.b $58, $F, $40, $50,	$F0
0001C161 02                         byte_1A7CF:	dc.b 2
0001C162 F804 0068 F0               		dc.b $F8, 4, 0,	$68, $F0
0001C167 000C 006A F0               		dc.b 0,	$C, 0, $6A, $F0
0001C16C                            		even
0001C16C                            		even
0001C16C                            
0001C16C                            ; ===========================================================================
0001C16C                            ; ---------------------------------------------------------------------------
0001C16C                            ; Object 86 - energy balls (FZ)
0001C16C                            ; ---------------------------------------------------------------------------
0001C16C                            
0001C16C                            Obj86:					; XREF: Obj_Index
0001C16C 7000                       		moveq	#0,d0
0001C16E 1028 0024                  		move.b	$24(a0),d0
0001C172 303B 0000                  		move.w	Obj86_Index(pc,d0.w),d0
0001C176 4EFB 0000                  		jmp	Obj86_Index(pc,d0.w)
0001C17A                            ; ===========================================================================
0001C17A 0000                       Obj86_Index:	dc.w Obj86_Main-Obj86_Index
0001C17C 0000                       		dc.w Obj86_Generator-Obj86_Index
0001C17E 0000                       		dc.w Obj86_MakeBalls-Obj86_Index
0001C180 0000                       		dc.w loc_1A962-Obj86_Index
0001C182 0000                       		dc.w loc_1A982-Obj86_Index
0001C184                            ; ===========================================================================
0001C184                            
0001C184                            Obj86_Main:				; XREF: Obj86_Index
0001C184 317C 2588 0008             		move.w	#$2588,8(a0)
0001C18A 317C 053C 000C             		move.w	#$53C,$C(a0)
0001C190 317C 0300 0002             		move.w	#$300,2(a0)
0001C196 217C 0000 0000 0004        		move.l	#Map_obj86,4(a0)
0001C19E 117C 0000 001C             		move.b	#0,$1C(a0)
0001C1A4 117C 0003 0018             		move.b	#3,$18(a0)
0001C1AA 117C 0008 0017             		move.b	#8,$17(a0)
0001C1B0 117C 0008 0016             		move.b	#8,$16(a0)
0001C1B6 117C 0004 0001             		move.b	#4,1(a0)
0001C1BC 08E8 0007 0001             		bset	#7,1(a0)
0001C1C2 5428 0024                  		addq.b	#2,$24(a0)
0001C1C6                            
0001C1C6                            Obj86_Generator:			; XREF: Obj86_Index
0001C1C6 2268 0034                  		movea.l	$34(a0),a1
0001C1CA 0C29 0006 0034             		cmpi.b	#6,$34(a1)
0001C1D0 6600                       		bne.s	loc_1A850
0001C1D2 10BC 003F                  		move.b	#$3F,(a0)
0001C1D6 117C 0000 0024             		move.b	#0,$24(a0)
0001C1DC 4EF9 0000 E0E4             		jmp	DisplaySprite
0001C1E2                            ; ===========================================================================
0001C1E2                            
0001C1E2                            loc_1A850:
0001C1E2 117C 0000 001C             		move.b	#0,$1C(a0)
0001C1E8 4A28 0029                  		tst.b	$29(a0)
0001C1EC 6700                       		beq.s	loc_1A86C
0001C1EE 5428 0024                  		addq.b	#2,$24(a0)
0001C1F2 117C 0001 001C             		move.b	#1,$1C(a0)
0001C1F8 117C 003E 0028             		move.b	#$3E,$28(a0)
0001C1FE                            
0001C1FE                            loc_1A86C:
0001C1FE 323C 0013                  		move.w	#$13,d1
0001C202 343C 0008                  		move.w	#8,d2
0001C206 363C 0011                  		move.w	#$11,d3
0001C20A 3828 0008                  		move.w	8(a0),d4
0001C20E 4EB9 0001 04CE             		jsr	SolidObject
0001C214 3038 D008                  		move.w	($FFFFD008).w,d0
0001C218 9068 0008                  		sub.w	8(a0),d0
0001C21C 6B00                       		bmi.s	loc_1A89A
0001C21E 0440 0140                  		subi.w	#$140,d0
0001C222 6B00                       		bmi.s	loc_1A89A
0001C224 4A28 0001                  		tst.b	1(a0)
0001C228 6A00 FBB0                  		bpl.w	Obj84_Delete
0001C22C                            
0001C22C                            loc_1A89A:
0001C22C 43FA 0000                  		lea	Ani_obj86(pc),a1
0001C230 4EB9 0000 B1F6             		jsr	AnimateSprite
0001C236 4EF9 0000 E0E4             		jmp	DisplaySprite
0001C23C                            ; ===========================================================================
0001C23C                            
0001C23C                            Obj86_MakeBalls:			; XREF: Obj86_Index
0001C23C 4A28 0029                  		tst.b	$29(a0)
0001C240 6700 0000                  		beq.w	loc_1A954
0001C244 4228 0029                  		clr.b	$29(a0)
0001C248 D068 0030                  		add.w	$30(a0),d0
0001C24C 0240 001E                  		andi.w	#$1E,d0
0001C250 D4C0                       		adda.w	d0,a2
0001C252 5868 0030                  		addq.w	#4,$30(a0)
0001C256 4268 0032                  		clr.w	$32(a0)
0001C25A 7403                       		moveq	#3,d2
0001C25C                            
0001C25C                            Obj86_Loop:
0001C25C 4EB9 0000 E590             		jsr	SingleObjLoad2
0001C262 6600 0000                  		bne.w	loc_1A954
0001C266 12BC 0086                  		move.b	#$86,(a1)
0001C26A 3368 0008 0008             		move.w	8(a0),8(a1)
0001C270 337C 053C 000C             		move.w	#$53C,$C(a1)
0001C276 137C 0008 0024             		move.b	#8,$24(a1)
0001C27C 337C 2300 0002             		move.w	#$2300,2(a1)
0001C282 237C 0000 0000 0004        		move.l	#Map_obj86a,4(a1)
0001C28A 137C 000C 0016             		move.b	#$C,$16(a1)
0001C290 137C 000C 0017             		move.b	#$C,$17(a1)
0001C296 137C 0000 0020             		move.b	#0,$20(a1)
0001C29C 137C 0003 0018             		move.b	#3,$18(a1)
0001C2A2 337C 003E 0028             		move.w	#$3E,$28(a1)
0001C2A8 137C 0004 0001             		move.b	#4,1(a1)
0001C2AE 08E9 0007 0001             		bset	#7,1(a1)
0001C2B4 2348 0034                  		move.l	a0,$34(a1)
0001C2B8 4EB9 0000 33B4             		jsr	(RandomNumber).l
0001C2BE 3228 0032                  		move.w	$32(a0),d1
0001C2C2 C3FC FFB1                  		muls.w	#-$4F,d1
0001C2C6 0641 2578                  		addi.w	#$2578,d1
0001C2CA 0240 001F                  		andi.w	#$1F,d0
0001C2CE 0440 0010                  		subi.w	#$10,d0
0001C2D2 D041                       		add.w	d1,d0
0001C2D4 3340 0030                  		move.w	d0,$30(a1)
0001C2D8 5268 0032                  		addq.w	#1,$32(a0)
0001C2DC 3168 0032 0038             		move.w	$32(a0),$38(a0)
0001C2E2 51CA FF78                  		dbf	d2,Obj86_Loop	; repeat sequence 3 more times
0001C2E6                            
0001C2E6                            loc_1A954:
0001C2E6 4A68 0032                  		tst.w	$32(a0)
0001C2EA 6600                       		bne.s	loc_1A95E
0001C2EC 5428 0024                  		addq.b	#2,$24(a0)
0001C2F0                            
0001C2F0                            loc_1A95E:
0001C2F0 6000 FF0C                  		bra.w	loc_1A86C
0001C2F4                            ; ===========================================================================
0001C2F4                            
0001C2F4                            loc_1A962:				; XREF: Obj86_Index
0001C2F4 117C 0002 001C             		move.b	#2,$1C(a0)
0001C2FA 4A68 0038                  		tst.w	$38(a0)
0001C2FE 6600                       		bne.s	loc_1A97E
0001C300 117C 0002 0024             		move.b	#2,$24(a0)
0001C306 2268 0034                  		movea.l	$34(a0),a1
0001C30A 337C FFFF 0032             		move.w	#-1,$32(a1)
0001C310                            
0001C310                            loc_1A97E:
0001C310 6000 FEEC                  		bra.w	loc_1A86C
0001C314                            ; ===========================================================================
0001C314                            
0001C314                            loc_1A982:				; XREF: Obj86_Index
0001C314 7000                       		moveq	#0,d0
0001C316 1028 0025                  		move.b	$25(a0),d0
0001C31A 303B 0000                  		move.w	Obj86_Index2(pc,d0.w),d0
0001C31E 4EBB 0000                  		jsr	Obj86_Index2(pc,d0.w)
0001C322 43FA 0000                  		lea	Ani_obj86a(pc),a1
0001C326 4EB9 0000 B1F6             		jsr	AnimateSprite
0001C32C 4EF9 0000 E0E4             		jmp	DisplaySprite
0001C332                            ; ===========================================================================
0001C332 0000                       Obj86_Index2:	dc.w loc_1A9A6-Obj86_Index2
0001C334 0000                       		dc.w loc_1A9C0-Obj86_Index2
0001C336 0000                       		dc.w loc_1AA1E-Obj86_Index2
0001C338                            ; ===========================================================================
0001C338                            
0001C338                            loc_1A9A6:				; XREF: Obj86_Index2
0001C338 3028 0030                  		move.w	$30(a0),d0
0001C33C 9068 0008                  		sub.w	8(a0),d0
0001C340 E940                       		asl.w	#4,d0
0001C342 3140 0010                  		move.w	d0,$10(a0)
0001C346 317C 00B4 0028             		move.w	#$B4,$28(a0)
0001C34C 5428 0025                  		addq.b	#2,$25(a0)
0001C350 4E75                       		rts	
0001C352                            ; ===========================================================================
0001C352                            
0001C352                            loc_1A9C0:				; XREF: Obj86_Index2
0001C352 4A68 0010                  		tst.w	$10(a0)
0001C356 6700                       		beq.s	loc_1A9E6
0001C358 4EB9 0000 E0BE             		jsr	SpeedToPos
0001C35E 3028 0008                  		move.w	8(a0),d0
0001C362 9068 0030                  		sub.w	$30(a0),d0
0001C366 6400                       		bcc.s	loc_1A9E6
0001C368 4268 0010                  		clr.w	$10(a0)
0001C36C D168 0008                  		add.w	d0,8(a0)
0001C370 2268 0034                  		movea.l	$34(a0),a1
0001C374 5369 0032                  		subq.w	#1,$32(a1)
0001C378                            
0001C378                            loc_1A9E6:
0001C378 117C 0000 001C             		move.b	#0,$1C(a0)
0001C37E 5368 0028                  		subq.w	#1,$28(a0)
0001C382 6600                       		bne.s	locret_1AA1C
0001C384 5428 0025                  		addq.b	#2,$25(a0)
0001C388 117C 0001 001C             		move.b	#1,$1C(a0)
0001C38E 117C 009A 0020             		move.b	#$9A,$20(a0)
0001C394 317C 00B4 0028             		move.w	#$B4,$28(a0)
0001C39A 7000                       		moveq	#0,d0
0001C39C 3038 D008                  		move.w	($FFFFD008).w,d0
0001C3A0 9068 0008                  		sub.w	8(a0),d0
0001C3A4 3140 0010                  		move.w	d0,$10(a0)
0001C3A8 317C 0140 0012             		move.w	#$140,$12(a0)
0001C3AE                            
0001C3AE                            locret_1AA1C:
0001C3AE 4E75                       		rts	
0001C3B0                            ; ===========================================================================
0001C3B0                            
0001C3B0                            loc_1AA1E:				; XREF: Obj86_Index2
0001C3B0 4EB9 0000 E0BE             		jsr	SpeedToPos
0001C3B6 0C68 05E0 000C             		cmpi.w	#$5E0,$C(a0)
0001C3BC 6400                       		bcc.s	loc_1AA34
0001C3BE 5368 0028                  		subq.w	#1,$28(a0)
0001C3C2 6700                       		beq.s	loc_1AA34
0001C3C4 4E75                       		rts	
0001C3C6                            ; ===========================================================================
0001C3C6                            
0001C3C6                            loc_1AA34:
0001C3C6 2268 0034                  		movea.l	$34(a0),a1
0001C3CA 5369 0038                  		subq.w	#1,$38(a1)
0001C3CE 6000 FA0A                  		bra.w	Obj84_Delete
0001C3D2                            ; ===========================================================================
0001C3D2                            Ani_obj86:
0001C3D2                            	include "_anim\obj86.asm"
0001C3D2                            ; ---------------------------------------------------------------------------
0001C3D2                            ; Animation script - energy ball launcher (FZ)
0001C3D2                            ; ---------------------------------------------------------------------------
0001C3D2 0000                       		dc.w byte_1AA46-Ani_obj86
0001C3D4 0000                       		dc.w byte_1AA4A-Ani_obj86
0001C3D6 0000                       		dc.w byte_1AA50-Ani_obj86
0001C3D8 7E00 FF00                  byte_1AA46:	dc.b $7E, 0, $FF, 0
0001C3DC 0100 0200 03FF             byte_1AA4A:	dc.b 1,	0, 2, 0, 3, $FF
0001C3E2 0101 0201 03FF             byte_1AA50:	dc.b 1,	1, 2, 1, 3, $FF
0001C3E8                            		even
0001C3E8                            		even
0001C3E8                            
0001C3E8                            ; ---------------------------------------------------------------------------
0001C3E8                            ; Sprite mappings - energy ball	launcher (FZ)
0001C3E8                            ; ---------------------------------------------------------------------------
0001C3E8                            Map_obj86:
0001C3E8                            	include "_maps\obj86.asm"
0001C3E8                            ; ---------------------------------------------------------------------------
0001C3E8                            ; Sprite mappings - energy ball	launcher (FZ)
0001C3E8                            ; ---------------------------------------------------------------------------
0001C3E8 0000 0000                  		dc.w byte_1AA5E-Map_obj86, byte_1AA64-Map_obj86
0001C3EC 0000 0000                  		dc.w byte_1AA6A-Map_obj86, byte_1AA70-Map_obj86
0001C3F0 01                         byte_1AA5E:	dc.b 1
0001C3F1 F805 006E F8               		dc.b $F8, 5, 0,	$6E, $F8
0001C3F6 01                         byte_1AA64:	dc.b 1
0001C3F7 F805 0076 F8               		dc.b $F8, 5, 0,	$76, $F8
0001C3FC 01                         byte_1AA6A:	dc.b 1
0001C3FD F805 0072 F8               		dc.b $F8, 5, 0,	$72, $F8
0001C402 01                         byte_1AA70:	dc.b 1
0001C403 F805 1072 F8               		dc.b $F8, 5, $10, $72, $F8
0001C408                            		even
0001C408                            		even
0001C408                            
0001C408                            Ani_obj86a:
0001C408                            	include "_anim\obj86a.asm"
0001C408                            ; ---------------------------------------------------------------------------
0001C408                            ; Animation script - energy balls (FZ)
0001C408                            ; ---------------------------------------------------------------------------
0001C408 0000                       		dc.w byte_1AA7A-Ani_obj86a
0001C40A 0000                       		dc.w byte_1AA9C-Ani_obj86a
0001C40C 0100 0A08 0A01 0A09 0A06+  byte_1AA7A:	dc.b 1,	0, $A, 8, $A, 1, $A, 9,	$A, 6, $A, 7, $A, 0, $A
0001C41B 080A 010A 090A 060A 070A+  		dc.b 8,	$A, 1, $A, 9, $A, 6, $A, 7, $A,	2, $A, 3, $A, 4
0001C42A 0A05 FF00                  		dc.b $A, 5, $FF, 0
0001C42E 0006 0501 0507 0501 05FF   byte_1AA9C:	dc.b 0,	6, 5, 1, 5, 7, 5, 1, 5,	$FF
0001C438                            		even
0001C438                            		even
0001C438                            
0001C438                            ; ---------------------------------------------------------------------------
0001C438                            ; Sprite mappings - energy balls (FZ)
0001C438                            ; ---------------------------------------------------------------------------
0001C438                            Map_obj86a:
0001C438                            	include "_maps\obj86a.asm"
0001C438                            ; ---------------------------------------------------------------------------
0001C438                            ; Sprite mappings - energy balls (FZ)
0001C438                            ; ---------------------------------------------------------------------------
0001C438 0000 0000                  		dc.w byte_1AABC-Map_obj86a, byte_1AAC7-Map_obj86a
0001C43C 0000 0000                  		dc.w byte_1AAD2-Map_obj86a, byte_1AADD-Map_obj86a
0001C440 0000 0000                  		dc.w byte_1AAE8-Map_obj86a, byte_1AAF3-Map_obj86a
0001C444 0000 0000                  		dc.w byte_1AAFE-Map_obj86a, byte_1AB04-Map_obj86a
0001C448 0000 0000                  		dc.w byte_1AB0A-Map_obj86a, byte_1AB15-Map_obj86a
0001C44C 0000                       		dc.w byte_1AB20-Map_obj86a
0001C44E 02                         byte_1AABC:	dc.b 2
0001C44F F00D 007A F0               		dc.b $F0, $D, 0, $7A, $F0
0001C454 000D 187A F0               		dc.b 0,	$D, $18, $7A, $F0
0001C459 02                         byte_1AAC7:	dc.b 2
0001C45A F406 0082 F4               		dc.b $F4, 6, 0,	$82, $F4
0001C45F F402 1882 04               		dc.b $F4, 2, $18, $82, 4
0001C464 02                         byte_1AAD2:	dc.b 2
0001C465 F804 0088 F8               		dc.b $F8, 4, 0,	$88, $F8
0001C46A 0004 1088 F8               		dc.b 0,	4, $10,	$88, $F8
0001C46F 02                         byte_1AADD:	dc.b 2
0001C470 F804 008A F8               		dc.b $F8, 4, 0,	$8A, $F8
0001C475 0004 108A F8               		dc.b 0,	4, $10,	$8A, $F8
0001C47A 02                         byte_1AAE8:	dc.b 2
0001C47B F804 008C F8               		dc.b $F8, 4, 0,	$8C, $F8
0001C480 0004 108C F8               		dc.b 0,	4, $10,	$8C, $F8
0001C485 02                         byte_1AAF3:	dc.b 2
0001C486 F406 008E F4               		dc.b $F4, 6, 0,	$8E, $F4
0001C48B F402 188E 04               		dc.b $F4, 2, $18, $8E, 4
0001C490 01                         byte_1AAFE:	dc.b 1
0001C491 F805 0094 F8               		dc.b $F8, 5, 0,	$94, $F8
0001C496 01                         byte_1AB04:	dc.b 1
0001C497 F805 0098 F8               		dc.b $F8, 5, 0,	$98, $F8
0001C49C 02                         byte_1AB0A:	dc.b 2
0001C49D F00D 087A F0               		dc.b $F0, $D, 8, $7A, $F0
0001C4A2 000D 107A F0               		dc.b 0,	$D, $10, $7A, $F0
0001C4A7 02                         byte_1AB15:	dc.b 2
0001C4A8 F406 1082 F4               		dc.b $F4, 6, $10, $82, $F4
0001C4AD F402 0882 04               		dc.b $F4, 2, 8,	$82, 4
0001C4B2 00                         byte_1AB20:	dc.b 0
0001C4B4 00                         		even
0001C4B4 00                         		even
0001C4B4                            
0001C4B4                            ; ===========================================================================
0001C4B4                            ; ---------------------------------------------------------------------------
0001C4B4                            ; Object 3E - prison capsule
0001C4B4                            ; ---------------------------------------------------------------------------
0001C4B4                            
0001C4B4                            Obj3E:					; XREF: Obj_Index
0001C4B4 7000                       		moveq	#0,d0
0001C4B6 1028 0024                  		move.b	$24(a0),d0
0001C4BA 323B 0000                  		move.w	Obj3E_Index(pc,d0.w),d1
0001C4BE 4EBB 1000                  		jsr	Obj3E_Index(pc,d1.w)
0001C4C2 3028 0008                  		move.w	8(a0),d0
0001C4C6 0240 FF80                  		andi.w	#$FF80,d0
0001C4CA 3238 F700                  		move.w	($FFFFF700).w,d1
0001C4CE 0441 0080                  		subi.w	#$80,d1
0001C4D2 0241 FF80                  		andi.w	#$FF80,d1
0001C4D6 9041                       		sub.w	d1,d0
0001C4D8 0C40 0280                  		cmpi.w	#$280,d0
0001C4DC 6200                       		bhi.s	Obj3E_Delete
0001C4DE 4EF9 0000 E0E4             		jmp	DisplaySprite
0001C4E4                            ; ===========================================================================
0001C4E4                            
0001C4E4                            Obj3E_Delete:
0001C4E4 4EF9 0000 E120             		jmp	DeleteObject
0001C4EA                            ; ===========================================================================
0001C4EA 0000                       Obj3E_Index:	dc.w Obj3E_Main-Obj3E_Index
0001C4EC 0000                       		dc.w Obj3E_BodyMain-Obj3E_Index
0001C4EE 0000                       		dc.w Obj3E_Switched-Obj3E_Index
0001C4F0 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001C4F2 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001C4F4 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001C4F6 0000                       		dc.w Obj3E_Animals-Obj3E_Index
0001C4F8 0000                       		dc.w Obj3E_EndAct-Obj3E_Index
0001C4FA                            
0001C4FA 0220 0400                  Obj3E_Var:	dc.b 2,	$20, 4,	0	; routine, width, priority, frame
0001C4FE 040C 0501                  		dc.b 4,	$C, 5, 1
0001C502 0610 0403                  		dc.b 6,	$10, 4,	3
0001C506 0810 0305                  		dc.b 8,	$10, 3,	5
0001C50A                            ; ===========================================================================
0001C50A                            
0001C50A                            Obj3E_Main:				; XREF: Obj3E_Index
0001C50A 217C 0000 0000 0004        		move.l	#Map_obj3E,4(a0)
0001C512 317C 049D 0002             		move.w	#$49D,2(a0)
0001C518 117C 0004 0001             		move.b	#4,1(a0)
0001C51E 3168 000C 0030             		move.w	$C(a0),$30(a0)
0001C524 7000                       		moveq	#0,d0
0001C526 1028 0028                  		move.b	$28(a0),d0
0001C52A E548                       		lsl.w	#2,d0
0001C52C 43FB 00CC                  		lea	Obj3E_Var(pc,d0.w),a1
0001C530 1159 0024                  		move.b	(a1)+,$24(a0)
0001C534 1159 0019                  		move.b	(a1)+,$19(a0)
0001C538 1159 0018                  		move.b	(a1)+,$18(a0)
0001C53C 1159 001A                  		move.b	(a1)+,$1A(a0)
0001C540 0C40 0008                  		cmpi.w	#8,d0		; is object type number	02?
0001C544 6600                       		bne.s	Obj3E_Not02	; if not, branch
0001C546 117C 0006 0020             		move.b	#6,$20(a0)
0001C54C 117C 0008 0021             		move.b	#8,$21(a0)
0001C552                            
0001C552                            Obj3E_Not02:
0001C552 4E75                       		rts	
0001C554                            ; ===========================================================================
0001C554                            
0001C554                            Obj3E_BodyMain:				; XREF: Obj3E_Index
0001C554 0C38 0002 F7A7             		cmpi.b	#2,($FFFFF7A7).w
0001C55A 6700                       		beq.s	Obj3E_ChkOpened
0001C55C 323C 002B                  		move.w	#$2B,d1
0001C560 343C 0018                  		move.w	#$18,d2
0001C564 363C 0018                  		move.w	#$18,d3
0001C568 3828 0008                  		move.w	8(a0),d4
0001C56C 4EF9 0001 04CE             		jmp	SolidObject
0001C572                            ; ===========================================================================
0001C572                            
0001C572                            Obj3E_ChkOpened:
0001C572 4A28 0025                  		tst.b	$25(a0)		; has the prison been opened?
0001C576 6700                       		beq.s	Obj3E_DoOpen	; if yes, branch
0001C578 4228 0025                  		clr.b	$25(a0)
0001C57C 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001C582 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001C588                            
0001C588                            Obj3E_DoOpen:
0001C588 117C 0002 001A             		move.b	#2,$1A(a0)	; use frame number 2 (destroyed	prison)
0001C58E 4E75                       		rts	
0001C590                            ; ===========================================================================
0001C590                            
0001C590                            Obj3E_Switched:				; XREF: Obj3E_Index
0001C590 323C 0017                  		move.w	#$17,d1
0001C594 343C 0008                  		move.w	#8,d2
0001C598 363C 0008                  		move.w	#8,d3
0001C59C 3828 0008                  		move.w	8(a0),d4
0001C5A0 4EB9 0001 04CE             		jsr	SolidObject
0001C5A6 43F9 0000 0000             		lea	(Ani_obj3E).l,a1
0001C5AC 4EB9 0000 B1F6             		jsr	AnimateSprite
0001C5B2 3168 0030 000C             		move.w	$30(a0),$C(a0)
0001C5B8 4A28 0025                  		tst.b	$25(a0)
0001C5BC 6700                       		beq.s	locret_1AC60
0001C5BE 5068 000C                  		addq.w	#8,$C(a0)
0001C5C2 117C 000A 0024             		move.b	#$A,$24(a0)
0001C5C8 317C 003C 001E             		move.w	#$3C,$1E(a0)
0001C5CE 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0001C5D2 4238 F7AA                  		clr.b	($FFFFF7AA).w	; lock screen position
0001C5D6 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
0001C5DC 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; make Sonic run to	the right
0001C5E2 4228 0025                  		clr.b	$25(a0)
0001C5E6 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001C5EC 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001C5F2                            
0001C5F2                            locret_1AC60:
0001C5F2 4E75                       		rts	
0001C5F4                            ; ===========================================================================
0001C5F4                            
0001C5F4                            Obj3E_Explosion:			; XREF: Obj3E_Index
0001C5F4 7007                       		moveq	#7,d0
0001C5F6 C038 FE0F                  		and.b	($FFFFFE0F).w,d0
0001C5FA 6600                       		bne.s	loc_1ACA0
0001C5FC 4EB9 0000 E57A             		jsr	SingleObjLoad
0001C602 6600                       		bne.s	loc_1ACA0
0001C604 12BC 003F                  		move.b	#$3F,0(a1)	; load explosion object
0001C608 3368 0008 0008             		move.w	8(a0),8(a1)
0001C60E 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001C614 4EB9 0000 33B4             		jsr	(RandomNumber).l
0001C61A 7200                       		moveq	#0,d1
0001C61C 1200                       		move.b	d0,d1
0001C61E E409                       		lsr.b	#2,d1
0001C620 0441 0020                  		subi.w	#$20,d1
0001C624 D369 0008                  		add.w	d1,8(a1)
0001C628 E048                       		lsr.w	#8,d0
0001C62A E608                       		lsr.b	#3,d0
0001C62C D169 000C                  		add.w	d0,$C(a1)
0001C630                            
0001C630                            loc_1ACA0:
0001C630 5368 001E                  		subq.w	#1,$1E(a0)
0001C634 6700                       		beq.s	Obj3E_MakeAnimal
0001C636 4E75                       		rts	
0001C638                            ; ===========================================================================
0001C638                            
0001C638                            Obj3E_MakeAnimal:
0001C638 11FC 0002 F7A7             		move.b	#2,($FFFFF7A7).w
0001C63E 117C 000C 0024             		move.b	#$C,$24(a0)	; replace explosions with animals
0001C644 117C 0006 001A             		move.b	#6,$1A(a0)
0001C64A 317C 0096 001E             		move.w	#$96,$1E(a0)
0001C650 0668 0020 000C             		addi.w	#$20,$C(a0)
0001C656 7C07                       		moveq	#7,d6
0001C658 3A3C 009A                  		move.w	#$9A,d5
0001C65C 78E4                       		moveq	#-$1C,d4
0001C65E                            
0001C65E                            Obj3E_Loop:
0001C65E 4EB9 0000 E57A             		jsr	SingleObjLoad
0001C664 6600                       		bne.s	locret_1ACF8
0001C666 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
0001C66A 3368 0008 0008             		move.w	8(a0),8(a1)
0001C670 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001C676 D969 0008                  		add.w	d4,8(a1)
0001C67A 5E44                       		addq.w	#7,d4
0001C67C 3345 0036                  		move.w	d5,$36(a1)
0001C680 5145                       		subq.w	#8,d5
0001C682 51CE FFDA                  		dbf	d6,Obj3E_Loop	; repeat 7 more	times
0001C686                            
0001C686                            locret_1ACF8:
0001C686 4E75                       		rts	
0001C688                            ; ===========================================================================
0001C688                            
0001C688                            Obj3E_Animals:				; XREF: Obj3E_Index
0001C688 7007                       		moveq	#7,d0
0001C68A C038 FE0F                  		and.b	($FFFFFE0F).w,d0
0001C68E 6600                       		bne.s	loc_1AD38
0001C690 4EB9 0000 E57A             		jsr	SingleObjLoad
0001C696 6600                       		bne.s	loc_1AD38
0001C698 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
0001C69C 3368 0008 0008             		move.w	8(a0),8(a1)
0001C6A2 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001C6A8 4EB9 0000 33B4             		jsr	(RandomNumber).l
0001C6AE 0240 001F                  		andi.w	#$1F,d0
0001C6B2 5D40                       		subq.w	#6,d0
0001C6B4 4A41                       		tst.w	d1
0001C6B6 6A00                       		bpl.s	loc_1AD2E
0001C6B8 4440                       		neg.w	d0
0001C6BA                            
0001C6BA                            loc_1AD2E:
0001C6BA D169 0008                  		add.w	d0,8(a1)
0001C6BE 337C 000C 0036             		move.w	#$C,$36(a1)
0001C6C4                            
0001C6C4                            loc_1AD38:
0001C6C4 5368 001E                  		subq.w	#1,$1E(a0)
0001C6C8 6600                       		bne.s	locret_1AD48
0001C6CA 5428 0024                  		addq.b	#2,$24(a0)
0001C6CE 317C 00B4 001E             		move.w	#180,$1E(a0)
0001C6D4                            
0001C6D4                            locret_1AD48:
0001C6D4 4E75                       		rts	
0001C6D6                            ; ===========================================================================
0001C6D6                            
0001C6D6                            Obj3E_EndAct:				; XREF: Obj3E_Index
0001C6D6 703E                       		moveq	#$3E,d0
0001C6D8 7228                       		moveq	#$28,d1
0001C6DA 7440                       		moveq	#$40,d2
0001C6DC 43F8 D040                  		lea	($FFFFD040).w,a1 ; load	object RAM
0001C6E0                            
0001C6E0                            Obj3E_FindObj28:
0001C6E0 B211                       		cmp.b	(a1),d1		; is object $28	(animal) loaded?
0001C6E2 6700                       		beq.s	Obj3E_Obj28Found ; if yes, branch
0001C6E4 D2C2                       		adda.w	d2,a1		; next object RAM
0001C6E6 51C8 FFF8                  		dbf	d0,Obj3E_FindObj28 ; repeat $3E	times
0001C6EA                            
0001C6EA 4EB9 0000 F78A             		jsr	GotThroughAct
0001C6F0 4EF9 0000 E120             		jmp	DeleteObject
0001C6F6                            ; ===========================================================================
0001C6F6                            
0001C6F6                            Obj3E_Obj28Found:
0001C6F6 4E75                       		rts	
0001C6F8                            ; ===========================================================================
0001C6F8                            Ani_obj3E:
0001C6F8                            	include "_anim\obj3E.asm"
0001C6F8                            ; ---------------------------------------------------------------------------
0001C6F8                            ; Animation script - prison capsule
0001C6F8                            ; ---------------------------------------------------------------------------
0001C6F8 0000                       		dc.w byte_1AD70-Ani_obj3E
0001C6FA 0000                       		dc.w byte_1AD70-Ani_obj3E
0001C6FC 0201 03FF                  byte_1AD70:	dc.b 2,	1, 3, $FF
0001C700                            		even
0001C700                            		even
0001C700                            
0001C700                            ; ---------------------------------------------------------------------------
0001C700                            ; Sprite mappings - prison capsule
0001C700                            ; ---------------------------------------------------------------------------
0001C700                            Map_obj3E:
0001C700                            	include "_maps\obj3E.asm"
0001C700                            ; ---------------------------------------------------------------------------
0001C700                            ; Sprite mappings - prison capsule
0001C700                            ; ---------------------------------------------------------------------------
0001C700 0000 0000                  		dc.w byte_1AD82-Map_obj3E, byte_1ADA6-Map_obj3E
0001C704 0000 0000                  		dc.w byte_1ADAC-Map_obj3E, byte_1ADCB-Map_obj3E
0001C708 0000 0000                  		dc.w byte_1ADD1-Map_obj3E, byte_1ADDC-Map_obj3E
0001C70C 0000                       		dc.w byte_1ADE2-Map_obj3E
0001C70E 07                         byte_1AD82:	dc.b 7
0001C70F E00C 2000 F0               		dc.b $E0, $C, $20, 0, $F0
0001C714 E80D 2004 E0               		dc.b $E8, $D, $20, 4, $E0
0001C719 E80D 200C 00               		dc.b $E8, $D, $20, $C, 0
0001C71E F80E 2014 E0               		dc.b $F8, $E, $20, $14,	$E0
0001C723 F80E 2020 00               		dc.b $F8, $E, $20, $20,	0
0001C728 100D 202C E0               		dc.b $10, $D, $20, $2C,	$E0
0001C72D 100D 2034 00               		dc.b $10, $D, $20, $34,	0
0001C732 01                         byte_1ADA6:	dc.b 1
0001C733 F809 003C F4               		dc.b $F8, 9, 0,	$3C, $F4
0001C738 06                         byte_1ADAC:	dc.b 6
0001C739 0008 2042 E0               		dc.b 0,	8, $20,	$42, $E0
0001C73E 080C 2045 E0               		dc.b 8,	$C, $20, $45, $E0
0001C743 0004 2049 10               		dc.b 0,	4, $20,	$49, $10
0001C748 080C 204B 00               		dc.b 8,	$C, $20, $4B, 0
0001C74D 100D 202C E0               		dc.b $10, $D, $20, $2C,	$E0
0001C752 100D 2034 00               		dc.b $10, $D, $20, $34,	0
0001C757 01                         byte_1ADCB:	dc.b 1
0001C758 F809 004F F4               		dc.b $F8, 9, 0,	$4F, $F4
0001C75D 02                         byte_1ADD1:	dc.b 2
0001C75E E80E 2055 F0               		dc.b $E8, $E, $20, $55,	$F0
0001C763 000E 2061 F0               		dc.b 0,	$E, $20, $61, $F0
0001C768 01                         byte_1ADDC:	dc.b 1
0001C769 F007 206D F8               		dc.b $F0, 7, $20, $6D, $F8
0001C76E 00                         byte_1ADE2:	dc.b 0
0001C770 00                         		even
0001C770 00                         		even
0001C770                            
0001C770                            ; ---------------------------------------------------------------------------
0001C770                            ; Object touch response	subroutine - $20(a0) in	the object RAM
0001C770                            ; ---------------------------------------------------------------------------
0001C770                            
0001C770                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C770                            
0001C770                            
0001C770                            TouchResponse:				; XREF: Obj01
0001C770 4E71                       		nop	
0001C772 3428 0008                  		move.w	8(a0),d2	; load Sonic's x-axis value
0001C776 3628 000C                  		move.w	$C(a0),d3	; load Sonic's y-axis value
0001C77A 5142                       		subq.w	#8,d2
0001C77C 7A00                       		moveq	#0,d5
0001C77E 1A28 0016                  		move.b	$16(a0),d5	; load Sonic's height
0001C782 5705                       		subq.b	#3,d5
0001C784 9645                       		sub.w	d5,d3
0001C786 0C28 0039 001A             		cmpi.b	#$39,$1A(a0)	; is Sonic ducking?
0001C78C 6600                       		bne.s	Touch_NoDuck	; if not, branch
0001C78E 0643 000C                  		addi.w	#$C,d3
0001C792 7A0A                       		moveq	#$A,d5
0001C794                            
0001C794                            Touch_NoDuck:
0001C794 383C 0010                  		move.w	#$10,d4
0001C798 DA45                       		add.w	d5,d5
0001C79A 43F8 D800                  		lea	($FFFFD800).w,a1 ; begin checking the object RAM
0001C79E 3C3C 005F                  		move.w	#$5F,d6
0001C7A2                            
0001C7A2                            Touch_Loop:
0001C7A2 4A29 0001                  		tst.b	1(a1)
0001C7A6 6A00                       		bpl.s	Touch_NextObj
0001C7A8 1029 0020                  		move.b	$20(a1),d0	; load touch response number
0001C7AC 6600                       		bne.s	Touch_Height	; if touch response is not 0, branch
0001C7AE                            
0001C7AE                            Touch_NextObj:
0001C7AE 43E9 0040                  		lea	$40(a1),a1	; next object RAM
0001C7B2 51CE FFEE                  		dbf	d6,Touch_Loop	; repeat $5F more times
0001C7B6                            
0001C7B6 7000                       		moveq	#0,d0
0001C7B8 4E75                       		rts	
0001C7BA                            ; ===========================================================================
0001C7BA 1414                       Touch_Sizes:	dc.b  $14, $14		; width, height
0001C7BC 0C14                       		dc.b   $C, $14
0001C7BE 140C                       		dc.b  $14,  $C
0001C7C0 0410                       		dc.b	4, $10
0001C7C2 0C12                       		dc.b   $C, $12
0001C7C4 1010                       		dc.b  $10, $10
0001C7C6 0606                       		dc.b	6,   6
0001C7C8 180C                       		dc.b  $18,  $C
0001C7CA 0C10                       		dc.b   $C, $10
0001C7CC 100C                       		dc.b  $10,  $C
0001C7CE 0808                       		dc.b	8,   8
0001C7D0 1410                       		dc.b  $14, $10
0001C7D2 1408                       		dc.b  $14,   8
0001C7D4 0E0E                       		dc.b   $E,  $E
0001C7D6 1818                       		dc.b  $18, $18
0001C7D8 2810                       		dc.b  $28, $10
0001C7DA 1018                       		dc.b  $10, $18
0001C7DC 0810                       		dc.b	8, $10
0001C7DE 2070                       		dc.b  $20, $70
0001C7E0 4020                       		dc.b  $40, $20
0001C7E2 8020                       		dc.b  $80, $20
0001C7E4 2020                       		dc.b  $20, $20
0001C7E6 0808                       		dc.b	8,   8
0001C7E8 0404                       		dc.b	4,   4
0001C7EA 2008                       		dc.b  $20,   8
0001C7EC 0C0C                       		dc.b   $C,  $C
0001C7EE 0804                       		dc.b	8,   4
0001C7F0 1804                       		dc.b  $18,   4
0001C7F2 2804                       		dc.b  $28,   4
0001C7F4 0408                       		dc.b	4,   8
0001C7F6 0418                       		dc.b	4, $18
0001C7F8 0428                       		dc.b	4, $28
0001C7FA 0420                       		dc.b	4, $20
0001C7FC 1818                       		dc.b  $18, $18
0001C7FE 0C18                       		dc.b   $C, $18
0001C800 4808                       		dc.b  $48,   8
0001C802                            ; ===========================================================================
0001C802                            
0001C802                            Touch_Height:				; XREF: TouchResponse
0001C802 0240 003F                  		andi.w	#$3F,d0
0001C806 D040                       		add.w	d0,d0
0001C808 45FB 00AE                  		lea	Touch_Sizes-2(pc,d0.w),a2
0001C80C 7200                       		moveq	#0,d1
0001C80E 121A                       		move.b	(a2)+,d1
0001C810 3029 0008                  		move.w	8(a1),d0
0001C814 9041                       		sub.w	d1,d0
0001C816 9042                       		sub.w	d2,d0
0001C818 6400                       		bcc.s	loc_1AE98
0001C81A D241                       		add.w	d1,d1
0001C81C D041                       		add.w	d1,d0
0001C81E 6500                       		bcs.s	Touch_Width
0001C820 6000 FF8C                  		bra.w	Touch_NextObj
0001C824                            ; ===========================================================================
0001C824                            
0001C824                            loc_1AE98:
0001C824 B044                       		cmp.w	d4,d0
0001C826 6200 FF86                  		bhi.w	Touch_NextObj
0001C82A                            
0001C82A                            Touch_Width:
0001C82A 7200                       		moveq	#0,d1
0001C82C 121A                       		move.b	(a2)+,d1
0001C82E 3029 000C                  		move.w	$C(a1),d0
0001C832 9041                       		sub.w	d1,d0
0001C834 9043                       		sub.w	d3,d0
0001C836 6400                       		bcc.s	loc_1AEB6
0001C838 D241                       		add.w	d1,d1
0001C83A D240                       		add.w	d0,d1
0001C83C 6500                       		bcs.s	Touch_ChkValue
0001C83E 6000 FF6E                  		bra.w	Touch_NextObj
0001C842                            ; ===========================================================================
0001C842                            
0001C842                            loc_1AEB6:
0001C842 B045                       		cmp.w	d5,d0
0001C844 6200 FF68                  		bhi.w	Touch_NextObj
0001C848                            
0001C848                            Touch_ChkValue:
0001C848 1229 0020                  		move.b	$20(a1),d1	; load touch response number
0001C84C 0201 00C0                  		andi.b	#$C0,d1		; is touch response $40	or higher?
0001C850 6700 0000                  		beq.w	Touch_Enemy	; if not, branch
0001C854 0C01 00C0                  		cmpi.b	#$C0,d1		; is touch response $C0	or higher?
0001C858 6700 0000                  		beq.w	Touch_Special	; if yes, branch
0001C85C 4A01                       		tst.b	d1		; is touch response $80-$BF ?
0001C85E 6B00 0000                  		bmi.w	Touch_ChkHurt	; if yes, branch
0001C862                            
0001C862                            ; touch	response is $40-$7F
0001C862                            
0001C862 1029 0020                  		move.b	$20(a1),d0
0001C866 0200 003F                  		andi.b	#$3F,d0
0001C86A 0C00 0006                  		cmpi.b	#6,d0		; is touch response $46	?
0001C86E 6700                       		beq.s	Touch_Monitor	; if yes, branch
0001C870 0C68 005A 0030             		cmpi.w	#$5A,$30(a0)
0001C876 6400 0000                  		bcc.w	locret_1AEF2
0001C87A 5429 0024                  		addq.b	#2,$24(a1)	; advance the object's routine counter
0001C87E                            
0001C87E                            locret_1AEF2:
0001C87E 4E75                       		rts	
0001C880                            ; ===========================================================================
0001C880                            
0001C880                            Touch_Monitor:
0001C880 4A68 0012                  		tst.w	$12(a0)		; is Sonic moving upwards?
0001C884 6A00                       		bpl.s	loc_1AF1E	; if not, branch
0001C886 3028 000C                  		move.w	$C(a0),d0
0001C88A 0440 0010                  		subi.w	#$10,d0
0001C88E B069 000C                  		cmp.w	$C(a1),d0
0001C892 6500                       		bcs.s	locret_1AF2E
0001C894 4468 0012                  		neg.w	$12(a0)		; reverse Sonic's y-motion
0001C898 337C FE80 0012             		move.w	#-$180,$12(a1)
0001C89E 4A29 0025                  		tst.b	$25(a1)
0001C8A2 6600                       		bne.s	locret_1AF2E
0001C8A4 5829 0025                  		addq.b	#4,$25(a1)	; advance the monitor's routine counter
0001C8A8 4E75                       		rts	
0001C8AA                            ; ===========================================================================
0001C8AA                            
0001C8AA                            loc_1AF1E:
0001C8AA 0C28 0002 001C             		cmpi.b	#2,$1C(a0)	; is Sonic rolling/jumping?
0001C8B0 6600                       		bne.s	locret_1AF2E
0001C8B2 4468 0012                  		neg.w	$12(a0)		; reverse Sonic's y-motion
0001C8B6 5429 0024                  		addq.b	#2,$24(a1)	; advance the monitor's routine counter
0001C8BA                            
0001C8BA                            locret_1AF2E:
0001C8BA 4E75                       		rts	
0001C8BC                            ; ===========================================================================
0001C8BC                            
0001C8BC                            Touch_Enemy:				; XREF: Touch_ChkValue
0001C8BC 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0001C8C0 6600                       		bne.s	loc_1AF40	; if yes, branch
0001C8C2 0C28 001D 001C             		cmpi.b	#$1D,$1C(a0)	; is Sonic Spin Dashing?
0001C8C8 6700 0000                  		beq.w	loc_1AF40	; if yes, branch
0001C8CC 0C28 0002 001C             		cmpi.b	#2,$1C(a0)	; is Sonic rolling?
0001C8D2 6600 0000                  		bne.w	Touch_ChkHurt	; if not, branch
0001C8D6                            
0001C8D6                            loc_1AF40:
0001C8D6 4A29 0021                  		tst.b	$21(a1)
0001C8DA 6700                       		beq.s	Touch_KillEnemy
0001C8DC 4468 0010                  		neg.w	$10(a0)
0001C8E0 4468 0012                  		neg.w	$12(a0)
0001C8E4 E0E8 0010                  		asr	$10(a0)
0001C8E8 E0E8 0012                  		asr	$12(a0)
0001C8EC 137C 0000 0020             		move.b	#0,$20(a1)
0001C8F2 5329 0021                  		subq.b	#1,$21(a1)
0001C8F6 6600                       		bne.s	locret_1AF68
0001C8F8 08E9 0007 0022             		bset	#7,$22(a1)
0001C8FE                            
0001C8FE                            locret_1AF68:
0001C8FE 4E75                       		rts	
0001C900                            ; ===========================================================================
0001C900                            
0001C900                            Touch_KillEnemy:
0001C900 08E9 0007 0022             		bset	#7,$22(a1)
0001C906 7000                       		moveq	#0,d0
0001C908 3038 F7D0                  		move.w	($FFFFF7D0).w,d0
0001C90C 5478 F7D0                  		addq.w	#2,($FFFFF7D0).w ; add 2 to item bonus counter
0001C910 0C40 0006                  		cmpi.w	#6,d0
0001C914 6500                       		bcs.s	loc_1AF82
0001C916 7006                       		moveq	#6,d0
0001C918                            
0001C918                            loc_1AF82:
0001C918 3340 003E                  		move.w	d0,$3E(a1)
0001C91C 303B 0000                  		move.w	Enemy_Points(pc,d0.w),d0
0001C920 0C78 0020 F7D0             		cmpi.w	#$20,($FFFFF7D0).w ; have 16 enemies been destroyed?
0001C926 6500                       		bcs.s	loc_1AF9C	; if not, branch
0001C928 303C 03E8                  		move.w	#1000,d0	; fix bonus to 10000
0001C92C 337C 000A 003E             		move.w	#$A,$3E(a1)
0001C932                            
0001C932                            loc_1AF9C:
0001C932 6100 0000                  		bsr.w	AddPoints
0001C936 12BC 0027                  		move.b	#$27,0(a1)	; change object	to points
0001C93A 137C 0000 0024             		move.b	#0,$24(a1)
0001C940 4A68 0012                  		tst.w	$12(a0)
0001C944 6B00                       		bmi.s	loc_1AFC2
0001C946 3028 000C                  		move.w	$C(a0),d0
0001C94A B069 000C                  		cmp.w	$C(a1),d0
0001C94E 6400                       		bcc.s	loc_1AFCA
0001C950 4468 0012                  		neg.w	$12(a0)
0001C954 4E75                       		rts	
0001C956                            ; ===========================================================================
0001C956                            
0001C956                            loc_1AFC2:
0001C956 0668 0100 0012             		addi.w	#$100,$12(a0)
0001C95C 4E75                       		rts	
0001C95E                            ; ===========================================================================
0001C95E                            
0001C95E                            loc_1AFCA:
0001C95E 0468 0100 0012             		subi.w	#$100,$12(a0)
0001C964 4E75                       		rts	
0001C966                            ; ===========================================================================
0001C966 000A 0014 0032 0064        Enemy_Points:	dc.w 10, 20, 50, 100
0001C96E                            ; ===========================================================================
0001C96E                            
0001C96E                            loc_1AFDA:				; XREF: Touch_CatKiller
0001C96E 08E9 0007 0022             		bset	#7,$22(a1)
0001C974                            
0001C974                            Touch_ChkHurt:				; XREF: Touch_ChkValue
0001C974 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0001C978 6700                       		beq.s	Touch_Hurt	; if not, branch
0001C97A                            
0001C97A                            loc_1AFE6:				; XREF: Touch_Hurt
0001C97A 70FF                       		moveq	#-1,d0
0001C97C 4E75                       		rts	
0001C97E                            ; ===========================================================================
0001C97E                            
0001C97E                            Touch_Hurt:				; XREF: Touch_ChkHurt
0001C97E 4E71                       		nop	
0001C980 4A68 0030                  		tst.w	$30(a0)
0001C984 66F4                       		bne.s	loc_1AFE6
0001C986 2449                       		movea.l	a1,a2
0001C988                            
0001C988                            ; End of function TouchResponse
0001C988                            ; continue straight to HurtSonic
0001C988                            
0001C988                            ; ---------------------------------------------------------------------------
0001C988                            ; Hurting Sonic	subroutine
0001C988                            ; ---------------------------------------------------------------------------
0001C988                            
0001C988                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C988                            
0001C988                            
0001C988                            HurtSonic:
0001C988 4A38 FE2C                  		tst.b	($FFFFFE2C).w	; does Sonic have a shield?
0001C98C 6600                       		bne.s	Hurt_Shield	; if yes, branch
0001C98E 4A78 FE20                  		tst.w	($FFFFFE20).w	; does Sonic have any rings?
0001C992 6700 0000                  		beq.w	Hurt_NoRings	; if not, branch
0001C996 4EB9 0000 E57A             		jsr	SingleObjLoad
0001C99C 6600                       		bne.s	Hurt_Shield
0001C99E 12BC 0037                  		move.b	#$37,0(a1)	; load bouncing	multi rings object
0001C9A2 3368 0008 0008             		move.w	8(a0),8(a1)
0001C9A8 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001C9AE                            
0001C9AE                            Hurt_Shield:
0001C9AE 11FC 0000 FE2C             		move.b	#0,($FFFFFE2C).w ; remove shield
0001C9B4 117C 0004 0024             		move.b	#4,$24(a0)
0001C9BA 4EB9 0001 496C             		jsr	Sonic_ResetOnFloor
0001C9C0 08E8 0001 0022             		bset	#1,$22(a0)
0001C9C6 317C FC00 0012             		move.w	#-$400,$12(a0)	; make Sonic bounce away from the object
0001C9CC 317C FE00 0010             		move.w	#-$200,$10(a0)
0001C9D2 0828 0006 0022             		btst	#6,$22(a0)
0001C9D8 6700                       		beq.s	Hurt_Reverse
0001C9DA 317C FE00 0012             		move.w	#-$200,$12(a0)
0001C9E0 317C FF00 0010             		move.w	#-$100,$10(a0)
0001C9E6                            
0001C9E6                            Hurt_Reverse:
0001C9E6 3028 0008                  		move.w	8(a0),d0
0001C9EA B06A 0008                  		cmp.w	8(a2),d0
0001C9EE 6500                       		bcs.s	Hurt_ChkSpikes	; if Sonic is left of the object, branch
0001C9F0 4468 0010                  		neg.w	$10(a0)		; if Sonic is right of the object, reverse
0001C9F4                            
0001C9F4                            Hurt_ChkSpikes:
0001C9F4 117C 0000 0039             		move.b	#0,$39(a0)	; clear Spin Dash flag
0001C9FA 317C 0000 0014             		move.w	#0,$14(a0)
0001CA00 117C 001A 001C             		move.b	#$1A,$1C(a0)
0001CA06 317C 0078 0030             		move.w	#$78,$30(a0)
0001CA0C 303C 00A3                  		move.w	#$A3,d0		; load normal damage sound
0001CA10 0C12 0036                  		cmpi.b	#$36,(a2)	; was damage caused by spikes?
0001CA14 6600                       		bne.s	Hurt_Sound	; if not, branch
0001CA16 0C12 0016                  		cmpi.b	#$16,(a2)	; was damage caused by LZ harpoon?
0001CA1A 6600                       		bne.s	Hurt_Sound	; if not, branch
0001CA1C 303C 00A6                  		move.w	#$A6,d0		; load spikes damage sound
0001CA20                            
0001CA20                            Hurt_Sound:
0001CA20 4EB9 0000 147C             		jsr	(PlaySound_Special).l
0001CA26 70FF                       		moveq	#-1,d0
0001CA28 4E75                       		rts	
0001CA2A                            ; ===========================================================================
0001CA2A                            
0001CA2A                            Hurt_NoRings:
0001CA2A 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug mode	cheat on?
0001CA2E 6600 FF7E                  		bne.w	Hurt_Shield	; if yes, branch
0001CA32                            ; End of function HurtSonic
0001CA32                            
0001CA32                            ; ---------------------------------------------------------------------------
0001CA32                            ; Subroutine to	kill Sonic
0001CA32                            ; ---------------------------------------------------------------------------
0001CA32                            
0001CA32                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CA32                            
0001CA32                            
0001CA32                            KillSonic:
0001CA32 4238 FE19                  		clr.b   (Super_Sonic_Flag).w ; Revert Sonic to Normal
0001CA36 31FC 0600 F760             		move.w  #$600,(Sonic_top_speed).w ; Revert speeds
0001CA3C 31FC 000C F762             		move.w  #$C,(Sonic_acceleration).w ; ^^^
0001CA42 31FC 0080 F764             		move.w  #$80,(Sonic_deceleration).w ; ^^^
0001CA48 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	active?
0001CA4C 6600                       		bne.s	Kill_NoDeath	; if yes, branch
0001CA4E 11FC 0000 FE2D             		move.b	#0,($FFFFFE2D).w ; remove invincibility
0001CA54 117C 0006 0024             		move.b	#6,$24(a0)
0001CA5A 4EB9 0001 496C             		jsr	Sonic_ResetOnFloor
0001CA60 08E8 0001 0022             		bset	#1,$22(a0)
0001CA66 317C F900 0012             		move.w	#-$700,$12(a0)
0001CA6C 317C 0000 0010             		move.w	#0,$10(a0)
0001CA72 317C 0000 0014             		move.w	#0,$14(a0)
0001CA78 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001CA7E 117C 0016 001C             		move.b	#$16,$1C(a0)
0001CA84 08E8 0007 0002             		bset	#7,2(a0)
0001CA8A 303C 00A3                  		move.w	#$A3,d0		; play normal death sound
0001CA8E 0C12 0036                  		cmpi.b	#$36,(a2)	; check	if you were killed by spikes
0001CA92 6600                       		bne.s	Kill_Sound
0001CA94 303C 00A6                  		move.w	#$A6,d0		; play spikes death sound
0001CA98                            
0001CA98                            Kill_Sound:
0001CA98 4EB9 0000 147C             		jsr	(PlaySound_Special).l
0001CA9E                            
0001CA9E                            Kill_NoDeath:
0001CA9E 70FF                       		moveq	#-1,d0
0001CAA0 4E75                       		rts	
0001CAA2                            ; End of function KillSonic
0001CAA2                            
0001CAA2                            
0001CAA2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CAA2                            
0001CAA2                            
0001CAA2                            Touch_Special:				; XREF: Touch_ChkValue
0001CAA2 1229 0020                  		move.b	$20(a1),d1
0001CAA6 0201 003F                  		andi.b	#$3F,d1
0001CAAA 0C01 000B                  		cmpi.b	#$B,d1		; is touch response $CB	?
0001CAAE 6700                       		beq.s	Touch_CatKiller	; if yes, branch
0001CAB0 0C01 000C                  		cmpi.b	#$C,d1		; is touch response $CC	?
0001CAB4 6700                       		beq.s	Touch_Yadrin	; if yes, branch
0001CAB6 0C01 0017                  		cmpi.b	#$17,d1		; is touch response $D7	?
0001CABA 6700                       		beq.s	Touch_D7orE1	; if yes, branch
0001CABC 0C01 0021                  		cmpi.b	#$21,d1		; is touch response $E1	?
0001CAC0 6700                       		beq.s	Touch_D7orE1	; if yes, branch
0001CAC2 4E75                       		rts	
0001CAC4                            ; ===========================================================================
0001CAC4                            
0001CAC4                            Touch_CatKiller:			; XREF: Touch_Special
0001CAC4 6000 FEA8                  		bra.w	loc_1AFDA
0001CAC8                            ; ===========================================================================
0001CAC8                            
0001CAC8                            Touch_Yadrin:				; XREF: Touch_Special
0001CAC8 9A40                       		sub.w	d0,d5
0001CACA 0C45 0008                  		cmpi.w	#8,d5
0001CACE 6400                       		bcc.s	loc_1B144
0001CAD0 3029 0008                  		move.w	8(a1),d0
0001CAD4 5940                       		subq.w	#4,d0
0001CAD6 0829 0000 0022             		btst	#0,$22(a1)
0001CADC 6700                       		beq.s	loc_1B130
0001CADE 0440 0010                  		subi.w	#$10,d0
0001CAE2                            
0001CAE2                            loc_1B130:
0001CAE2 9042                       		sub.w	d2,d0
0001CAE4 6400                       		bcc.s	loc_1B13C
0001CAE6 0640 0018                  		addi.w	#$18,d0
0001CAEA 6500                       		bcs.s	loc_1B140
0001CAEC 6000                       		bra.s	loc_1B144
0001CAEE                            ; ===========================================================================
0001CAEE                            
0001CAEE                            loc_1B13C:
0001CAEE B044                       		cmp.w	d4,d0
0001CAF0 6200                       		bhi.s	loc_1B144
0001CAF2                            
0001CAF2                            loc_1B140:
0001CAF2 6000 FE80                  		bra.w	Touch_ChkHurt
0001CAF6                            ; ===========================================================================
0001CAF6                            
0001CAF6                            loc_1B144:
0001CAF6 6000 FDC4                  		bra.w	Touch_Enemy
0001CAFA                            ; ===========================================================================
0001CAFA                            
0001CAFA                            Touch_D7orE1:				; XREF: Touch_Special
0001CAFA 5229 0021                  		addq.b	#1,$21(a1)
0001CAFE 4E75                       		rts	
0001CB00                            ; End of function Touch_Special
0001CB00                            
0001CB00                            ; ---------------------------------------------------------------------------
0001CB00                            ; Subroutine to	show the special stage layout
0001CB00                            ; ---------------------------------------------------------------------------
0001CB00                            
0001CB00                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CB00                            
0001CB00                            
0001CB00                            SS_ShowLayout:				; XREF: SpecialStage
0001CB00 6100 0000                  		bsr.w	SS_AniWallsRings
0001CB04 6100 0000                  		bsr.w	SS_AniItems
0001CB08 3F05                       		move.w	d5,-(sp)
0001CB0A 43F8 8000                  		lea	($FFFF8000).w,a1
0001CB0E 1038 F780                  		move.b	($FFFFF780).w,d0
0001CB12                            ;		andi.b	#$FC,d0
0001CB12 4EB9 0000 33DA             		jsr	(CalcSine).l
0001CB18 3800                       		move.w	d0,d4
0001CB1A 3A01                       		move.w	d1,d5
0001CB1C C9FC 0018                  		muls.w	#$18,d4
0001CB20 CBFC 0018                  		muls.w	#$18,d5
0001CB24 7400                       		moveq	#0,d2
0001CB26 3438 F700                  		move.w	($FFFFF700).w,d2
0001CB2A 84FC 0018                  		divu.w	#$18,d2
0001CB2E 4842                       		swap	d2
0001CB30 4442                       		neg.w	d2
0001CB32 0642 FF4C                  		addi.w	#-$B4,d2
0001CB36 7600                       		moveq	#0,d3
0001CB38 3638 F704                  		move.w	($FFFFF704).w,d3
0001CB3C 86FC 0018                  		divu.w	#$18,d3
0001CB40 4843                       		swap	d3
0001CB42 4443                       		neg.w	d3
0001CB44 0643 FF4C                  		addi.w	#-$B4,d3
0001CB48 3E3C 000F                  		move.w	#$F,d7
0001CB4C                            
0001CB4C                            loc_1B19E:
0001CB4C 48A7 E000                  		movem.w	d0-d2,-(sp)
0001CB50 48A7 C000                  		movem.w	d0-d1,-(sp)
0001CB54 4440                       		neg.w	d0
0001CB56 C3C2                       		muls.w	d2,d1
0001CB58 C1C3                       		muls.w	d3,d0
0001CB5A 2C00                       		move.l	d0,d6
0001CB5C DC81                       		add.l	d1,d6
0001CB5E 4C9F 0003                  		movem.w	(sp)+,d0-d1
0001CB62 C1C2                       		muls.w	d2,d0
0001CB64 C3C3                       		muls.w	d3,d1
0001CB66 D280                       		add.l	d0,d1
0001CB68 2406                       		move.l	d6,d2
0001CB6A 3C3C 000F                  		move.w	#$F,d6
0001CB6E                            
0001CB6E                            loc_1B1C0:
0001CB6E 2002                       		move.l	d2,d0
0001CB70 E080                       		asr.l	#8,d0
0001CB72 32C0                       		move.w	d0,(a1)+
0001CB74 2001                       		move.l	d1,d0
0001CB76 E080                       		asr.l	#8,d0
0001CB78 32C0                       		move.w	d0,(a1)+
0001CB7A D485                       		add.l	d5,d2
0001CB7C D284                       		add.l	d4,d1
0001CB7E 51CE FFEE                  		dbf	d6,loc_1B1C0
0001CB82                            
0001CB82 4C9F 0007                  		movem.w	(sp)+,d0-d2
0001CB86 0643 0018                  		addi.w	#$18,d3
0001CB8A 51CF FFC0                  		dbf	d7,loc_1B19E
0001CB8E                            
0001CB8E 3A1F                       		move.w	(sp)+,d5
0001CB90 41F9 00FF 0000             		lea	($FF0000).l,a0
0001CB96 7000                       		moveq	#0,d0
0001CB98 3038 F704                  		move.w	($FFFFF704).w,d0
0001CB9C 80FC 0018                  		divu.w	#$18,d0
0001CBA0 C0FC 0080                  		mulu.w	#$80,d0
0001CBA4 D1C0                       		adda.l	d0,a0
0001CBA6 7000                       		moveq	#0,d0
0001CBA8 3038 F700                  		move.w	($FFFFF700).w,d0
0001CBAC 80FC 0018                  		divu.w	#$18,d0
0001CBB0 D0C0                       		adda.w	d0,a0
0001CBB2 49F8 8000                  		lea	($FFFF8000).w,a4
0001CBB6 3E3C 000F                  		move.w	#$F,d7
0001CBBA                            
0001CBBA                            loc_1B20C:
0001CBBA 3C3C 000F                  		move.w	#$F,d6
0001CBBE                            
0001CBBE                            loc_1B210:
0001CBBE 7000                       		moveq	#0,d0
0001CBC0 1018                       		move.b	(a0)+,d0
0001CBC2 6700                       		beq.s	loc_1B268
0001CBC4 0C00 004E                  		cmpi.b	#$4E,d0
0001CBC8 6200                       		bhi.s	loc_1B268
0001CBCA 3614                       		move.w	(a4),d3
0001CBCC 0643 0120                  		addi.w	#$120,d3
0001CBD0 0C43 0070                  		cmpi.w	#$70,d3
0001CBD4 6500                       		bcs.s	loc_1B268
0001CBD6 0C43 01D0                  		cmpi.w	#$1D0,d3
0001CBDA 6400                       		bcc.s	loc_1B268
0001CBDC 342C 0002                  		move.w	2(a4),d2
0001CBE0 0642 00F0                  		addi.w	#$F0,d2
0001CBE4 0C42 0070                  		cmpi.w	#$70,d2
0001CBE8 6500                       		bcs.s	loc_1B268
0001CBEA 0C42 0170                  		cmpi.w	#$170,d2
0001CBEE 6400                       		bcc.s	loc_1B268
0001CBF0 4BF9 00FF 4000             		lea	($FF4000).l,a5
0001CBF6 E748                       		lsl.w	#3,d0
0001CBF8 4BF5 0000                  		lea	(a5,d0.w),a5
0001CBFC 225D                       		movea.l	(a5)+,a1
0001CBFE 321D                       		move.w	(a5)+,d1
0001CC00 D241                       		add.w	d1,d1
0001CC02 D2F1 1000                  		adda.w	(a1,d1.w),a1
0001CC06 365D                       		movea.w	(a5)+,a3
0001CC08 7200                       		moveq	#0,d1
0001CC0A 1219                       		move.b	(a1)+,d1
0001CC0C 5301                       		subq.b	#1,d1
0001CC0E 6B00                       		bmi.s	loc_1B268
0001CC10 4EB9 0000 E244             		jsr	sub_D762
0001CC16                            
0001CC16                            loc_1B268:
0001CC16 584C                       		addq.w	#4,a4
0001CC18 51CE FFA4                  		dbf	d6,loc_1B210
0001CC1C                            
0001CC1C 41E8 0070                  		lea	$70(a0),a0
0001CC20 51CF FF98                  		dbf	d7,loc_1B20C
0001CC24                            
0001CC24 11C5 F62C                  		move.b	d5,($FFFFF62C).w
0001CC28 0C05 0050                  		cmpi.b	#$50,d5
0001CC2C 6700                       		beq.s	loc_1B288
0001CC2E 24BC 0000 0000             		move.l	#0,(a2)
0001CC34 4E75                       		rts	
0001CC36                            ; ===========================================================================
0001CC36                            
0001CC36                            loc_1B288:
0001CC36 157C 0000 FFFB             		move.b	#0,-5(a2)
0001CC3C 4E75                       		rts	
0001CC3E                            ; End of function SS_ShowLayout
0001CC3E                            
0001CC3E                            ; ---------------------------------------------------------------------------
0001CC3E                            ; Subroutine to	animate	walls and rings	in the special stage
0001CC3E                            ; ---------------------------------------------------------------------------
0001CC3E                            
0001CC3E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CC3E                            
0001CC3E                            
0001CC3E                            SS_AniWallsRings:			; XREF: SS_ShowLayout
0001CC3E 43F9 00FF 400C             		lea	($FF400C).l,a1
0001CC44 7000                       		moveq	#0,d0
0001CC46 1038 F780                  		move.b	($FFFFF780).w,d0
0001CC4A E408                       		lsr.b	#2,d0
0001CC4C 0240 000F                  		andi.w	#$F,d0
0001CC50 7223                       		moveq	#$23,d1
0001CC52                            
0001CC52                            loc_1B2A4:
0001CC52 3280                       		move.w	d0,(a1)
0001CC54 5049                       		addq.w	#8,a1
0001CC56 51C9 FFFA                  		dbf	d1,loc_1B2A4
0001CC5A                            
0001CC5A 43F9 00FF 4005             		lea	($FF4005).l,a1
0001CC60 5338 FEC2                  		subq.b	#1,($FFFFFEC2).w
0001CC64 6A00                       		bpl.s	loc_1B2C8
0001CC66 11FC 0007 FEC2             		move.b	#7,($FFFFFEC2).w
0001CC6C 5238 FEC3                  		addq.b	#1,($FFFFFEC3).w
0001CC70 0238 0003 FEC3             		andi.b	#3,($FFFFFEC3).w
0001CC76                            
0001CC76                            loc_1B2C8:
0001CC76 1378 FEC3 01D0             		move.b	($FFFFFEC3).w,$1D0(a1)
0001CC7C 5338 FEC4                  		subq.b	#1,($FFFFFEC4).w
0001CC80 6A00                       		bpl.s	loc_1B2E4
0001CC82 11FC 0007 FEC4             		move.b	#7,($FFFFFEC4).w
0001CC88 5238 FEC5                  		addq.b	#1,($FFFFFEC5).w
0001CC8C 0238 0001 FEC5             		andi.b	#1,($FFFFFEC5).w
0001CC92                            
0001CC92                            loc_1B2E4:
0001CC92 1038 FEC5                  		move.b	($FFFFFEC5).w,d0
0001CC96 1340 0138                  		move.b	d0,$138(a1)
0001CC9A 1340 0160                  		move.b	d0,$160(a1)
0001CC9E 1340 0148                  		move.b	d0,$148(a1)
0001CCA2 1340 0150                  		move.b	d0,$150(a1)
0001CCA6 1340 01D8                  		move.b	d0,$1D8(a1)
0001CCAA 1340 01E0                  		move.b	d0,$1E0(a1)
0001CCAE 1340 01E8                  		move.b	d0,$1E8(a1)
0001CCB2 1340 01F0                  		move.b	d0,$1F0(a1)
0001CCB6 1340 01F8                  		move.b	d0,$1F8(a1)
0001CCBA 1340 0200                  		move.b	d0,$200(a1)
0001CCBE 5338 FEC6                  		subq.b	#1,($FFFFFEC6).w
0001CCC2 6A00                       		bpl.s	loc_1B326
0001CCC4 11FC 0004 FEC6             		move.b	#4,($FFFFFEC6).w
0001CCCA 5238 FEC7                  		addq.b	#1,($FFFFFEC7).w
0001CCCE 0238 0003 FEC7             		andi.b	#3,($FFFFFEC7).w
0001CCD4                            
0001CCD4                            loc_1B326:
0001CCD4 1038 FEC7                  		move.b	($FFFFFEC7).w,d0
0001CCD8 1340 0168                  		move.b	d0,$168(a1)
0001CCDC 1340 0170                  		move.b	d0,$170(a1)
0001CCE0 1340 0178                  		move.b	d0,$178(a1)
0001CCE4 1340 0180                  		move.b	d0,$180(a1)
0001CCE8 5338 FEC0                  		subq.b	#1,($FFFFFEC0).w
0001CCEC 6A00                       		bpl.s	loc_1B350
0001CCEE 11FC 0007 FEC0             		move.b	#7,($FFFFFEC0).w
0001CCF4 5338 FEC1                  		subq.b	#1,($FFFFFEC1).w
0001CCF8 0238 0007 FEC1             		andi.b	#7,($FFFFFEC1).w
0001CCFE                            
0001CCFE                            loc_1B350:
0001CCFE 43F9 00FF 4016             		lea	($FF4016).l,a1
0001CD04 41F9 0000 0000             		lea	(SS_WaRiVramSet).l,a0
0001CD0A 7000                       		moveq	#0,d0
0001CD0C 1038 FEC1                  		move.b	($FFFFFEC1).w,d0
0001CD10 D040                       		add.w	d0,d0
0001CD12 41F0 0000                  		lea	(a0,d0.w),a0
0001CD16 3290                       		move.w	(a0),(a1)
0001CD18 3368 0002 0008             		move.w	2(a0),8(a1)
0001CD1E 3368 0004 0010             		move.w	4(a0),$10(a1)
0001CD24 3368 0006 0018             		move.w	6(a0),$18(a1)
0001CD2A 3368 0008 0020             		move.w	8(a0),$20(a1)
0001CD30 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001CD36 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001CD3C 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001CD42 D0FC 0020                  		adda.w	#$20,a0
0001CD46 D2FC 0048                  		adda.w	#$48,a1
0001CD4A 3290                       		move.w	(a0),(a1)
0001CD4C 3368 0002 0008             		move.w	2(a0),8(a1)
0001CD52 3368 0004 0010             		move.w	4(a0),$10(a1)
0001CD58 3368 0006 0018             		move.w	6(a0),$18(a1)
0001CD5E 3368 0008 0020             		move.w	8(a0),$20(a1)
0001CD64 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001CD6A 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001CD70 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001CD76 D0FC 0020                  		adda.w	#$20,a0
0001CD7A D2FC 0048                  		adda.w	#$48,a1
0001CD7E 3290                       		move.w	(a0),(a1)
0001CD80 3368 0002 0008             		move.w	2(a0),8(a1)
0001CD86 3368 0004 0010             		move.w	4(a0),$10(a1)
0001CD8C 3368 0006 0018             		move.w	6(a0),$18(a1)
0001CD92 3368 0008 0020             		move.w	8(a0),$20(a1)
0001CD98 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001CD9E 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001CDA4 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001CDAA D0FC 0020                  		adda.w	#$20,a0
0001CDAE D2FC 0048                  		adda.w	#$48,a1
0001CDB2 3290                       		move.w	(a0),(a1)
0001CDB4 3368 0002 0008             		move.w	2(a0),8(a1)
0001CDBA 3368 0004 0010             		move.w	4(a0),$10(a1)
0001CDC0 3368 0006 0018             		move.w	6(a0),$18(a1)
0001CDC6 3368 0008 0020             		move.w	8(a0),$20(a1)
0001CDCC 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001CDD2 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001CDD8 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001CDDE D0FC 0020                  		adda.w	#$20,a0
0001CDE2 D2FC 0048                  		adda.w	#$48,a1
0001CDE6 4E75                       		rts	
0001CDE8                            ; End of function SS_AniWallsRings
0001CDE8                            
0001CDE8                            ; ===========================================================================
0001CDE8 0142 6142 0142 0142 0142+  SS_WaRiVramSet:	dc.w $142, $6142, $142,	$142, $142, $142, $142,	$6142
0001CDF8 0142 6142 0142 0142 0142+  		dc.w $142, $6142, $142,	$142, $142, $142, $142,	$6142
0001CE08 2142 0142 2142 2142 2142+  		dc.w $2142, $142, $2142, $2142,	$2142, $2142, $2142, $142
0001CE18 2142 0142 2142 2142 2142+  		dc.w $2142, $142, $2142, $2142,	$2142, $2142, $2142, $142
0001CE28 4142 2142 4142 4142 4142+  		dc.w $4142, $2142, $4142, $4142, $4142,	$4142, $4142, $2142
0001CE38 4142 2142 4142 4142 4142+  		dc.w $4142, $2142, $4142, $4142, $4142,	$4142, $4142, $2142
0001CE48 6142 4142 6142 6142 6142+  		dc.w $6142, $4142, $6142, $6142, $6142,	$6142, $6142, $4142
0001CE58 6142 4142 6142 6142 6142+  		dc.w $6142, $4142, $6142, $6142, $6142,	$6142, $6142, $4142
0001CE68                            ; ---------------------------------------------------------------------------
0001CE68                            ; Subroutine to	remove items when you collect them in the special stage
0001CE68                            ; ---------------------------------------------------------------------------
0001CE68                            
0001CE68                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CE68                            
0001CE68                            
0001CE68                            SS_RemoveCollectedItem:			; XREF: Obj09_ChkItems
0001CE68 45F9 00FF 4400             		lea	($FF4400).l,a2
0001CE6E 303C 001F                  		move.w	#$1F,d0
0001CE72                            
0001CE72                            loc_1B4C4:
0001CE72 4A12                       		tst.b	(a2)
0001CE74 6700                       		beq.s	locret_1B4CE
0001CE76 504A                       		addq.w	#8,a2
0001CE78 51C8 FFF8                  		dbf	d0,loc_1B4C4
0001CE7C                            
0001CE7C                            locret_1B4CE:
0001CE7C 4E75                       		rts	
0001CE7E                            ; End of function SS_RemoveCollectedItem
0001CE7E                            
0001CE7E                            ; ---------------------------------------------------------------------------
0001CE7E                            ; Subroutine to	animate	special	stage items when you touch them
0001CE7E                            ; ---------------------------------------------------------------------------
0001CE7E                            
0001CE7E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CE7E                            
0001CE7E                            
0001CE7E                            SS_AniItems:				; XREF: SS_ShowLayout
0001CE7E 41F9 00FF 4400             		lea	($FF4400).l,a0
0001CE84 3E3C 001F                  		move.w	#$1F,d7
0001CE88                            
0001CE88                            loc_1B4DA:
0001CE88 7000                       		moveq	#0,d0
0001CE8A 1010                       		move.b	(a0),d0
0001CE8C 6700                       		beq.s	loc_1B4E8
0001CE8E E548                       		lsl.w	#2,d0
0001CE90 227B 0000                  		movea.l	SS_AniIndex-4(pc,d0.w),a1
0001CE94 4E91                       		jsr	(a1)
0001CE96                            
0001CE96                            loc_1B4E8:
0001CE96 5048                       		addq.w	#8,a0
0001CE98                            
0001CE98                            loc_1B4EA:
0001CE98 51CF FFEE                  		dbf	d7,loc_1B4DA
0001CE9C                            
0001CE9C 4E75                       		rts	
0001CE9E                            ; End of function SS_AniItems
0001CE9E                            
0001CE9E                            ; ===========================================================================
0001CE9E 0000 0000                  SS_AniIndex:	dc.l SS_AniRingSparks
0001CEA2 0000 0000                  		dc.l SS_AniBumper
0001CEA6 0000 0000                  		dc.l SS_Ani1Up
0001CEAA 0000 0000                  		dc.l SS_AniReverse
0001CEAE 0000 0000                  		dc.l SS_AniEmeraldSparks
0001CEB2 0000 0000                  		dc.l SS_AniGlassBlock
0001CEB6                            ; ===========================================================================
0001CEB6                            
0001CEB6                            SS_AniRingSparks:			; XREF: SS_AniIndex
0001CEB6 5328 0002                  		subq.b	#1,2(a0)
0001CEBA 6A00                       		bpl.s	locret_1B530
0001CEBC 117C 0005 0002             		move.b	#5,2(a0)
0001CEC2 7000                       		moveq	#0,d0
0001CEC4 1028 0003                  		move.b	3(a0),d0
0001CEC8 5228 0003                  		addq.b	#1,3(a0)
0001CECC 2268 0004                  		movea.l	4(a0),a1
0001CED0 103B 0000                  		move.b	SS_AniRingData(pc,d0.w),d0
0001CED4 1280                       		move.b	d0,(a1)
0001CED6 6600                       		bne.s	locret_1B530
0001CED8 4290                       		clr.l	(a0)
0001CEDA 42A8 0004                  		clr.l	4(a0)
0001CEDE                            
0001CEDE                            locret_1B530:
0001CEDE 4E75                       		rts	
0001CEE0                            ; ===========================================================================
0001CEE0 4243 4445 0000             SS_AniRingData:	dc.b $42, $43, $44, $45, 0, 0
0001CEE6                            ; ===========================================================================
0001CEE6                            
0001CEE6                            SS_AniBumper:				; XREF: SS_AniIndex
0001CEE6 5328 0002                  		subq.b	#1,2(a0)
0001CEEA 6A00                       		bpl.s	locret_1B566
0001CEEC 117C 0007 0002             		move.b	#7,2(a0)
0001CEF2 7000                       		moveq	#0,d0
0001CEF4 1028 0003                  		move.b	3(a0),d0
0001CEF8 5228 0003                  		addq.b	#1,3(a0)
0001CEFC 2268 0004                  		movea.l	4(a0),a1
0001CF00 103B 0000                  		move.b	SS_AniBumpData(pc,d0.w),d0
0001CF04 6600                       		bne.s	loc_1B564
0001CF06 4290                       		clr.l	(a0)
0001CF08 42A8 0004                  		clr.l	4(a0)
0001CF0C 12BC 0025                  		move.b	#$25,(a1)
0001CF10 4E75                       		rts	
0001CF12                            ; ===========================================================================
0001CF12                            
0001CF12                            loc_1B564:
0001CF12 1280                       		move.b	d0,(a1)
0001CF14                            
0001CF14                            locret_1B566:
0001CF14 4E75                       		rts	
0001CF16                            ; ===========================================================================
0001CF16 3233 3233 0000             SS_AniBumpData:	dc.b $32, $33, $32, $33, 0, 0
0001CF1C                            ; ===========================================================================
0001CF1C                            
0001CF1C                            SS_Ani1Up:				; XREF: SS_AniIndex
0001CF1C 5328 0002                  		subq.b	#1,2(a0)
0001CF20 6A00                       		bpl.s	locret_1B596
0001CF22 117C 0005 0002             		move.b	#5,2(a0)
0001CF28 7000                       		moveq	#0,d0
0001CF2A 1028 0003                  		move.b	3(a0),d0
0001CF2E 5228 0003                  		addq.b	#1,3(a0)
0001CF32 2268 0004                  		movea.l	4(a0),a1
0001CF36 103B 0000                  		move.b	SS_Ani1UpData(pc,d0.w),d0
0001CF3A 1280                       		move.b	d0,(a1)
0001CF3C 6600                       		bne.s	locret_1B596
0001CF3E 4290                       		clr.l	(a0)
0001CF40 42A8 0004                  		clr.l	4(a0)
0001CF44                            
0001CF44                            locret_1B596:
0001CF44 4E75                       		rts	
0001CF46                            ; ===========================================================================
0001CF46 4647 4849 0000             SS_Ani1UpData:	dc.b $46, $47, $48, $49, 0, 0
0001CF4C                            ; ===========================================================================
0001CF4C                            
0001CF4C                            SS_AniReverse:				; XREF: SS_AniIndex
0001CF4C 5328 0002                  		subq.b	#1,2(a0)
0001CF50 6A00                       		bpl.s	locret_1B5CC
0001CF52 117C 0007 0002             		move.b	#7,2(a0)
0001CF58 7000                       		moveq	#0,d0
0001CF5A 1028 0003                  		move.b	3(a0),d0
0001CF5E 5228 0003                  		addq.b	#1,3(a0)
0001CF62 2268 0004                  		movea.l	4(a0),a1
0001CF66 103B 0000                  		move.b	SS_AniRevData(pc,d0.w),d0
0001CF6A 6600                       		bne.s	loc_1B5CA
0001CF6C 4290                       		clr.l	(a0)
0001CF6E 42A8 0004                  		clr.l	4(a0)
0001CF72 12BC 002B                  		move.b	#$2B,(a1)
0001CF76 4E75                       		rts	
0001CF78                            ; ===========================================================================
0001CF78                            
0001CF78                            loc_1B5CA:
0001CF78 1280                       		move.b	d0,(a1)
0001CF7A                            
0001CF7A                            locret_1B5CC:
0001CF7A 4E75                       		rts	
0001CF7C                            ; ===========================================================================
0001CF7C 2B31 2B31 0000             SS_AniRevData:	dc.b $2B, $31, $2B, $31, 0, 0
0001CF82                            ; ===========================================================================
0001CF82                            
0001CF82                            SS_AniEmeraldSparks:			; XREF: SS_AniIndex
0001CF82 5328 0002                  		subq.b	#1,2(a0)
0001CF86 6A00                       		bpl.s	locret_1B60C
0001CF88 117C 0005 0002             		move.b	#5,2(a0)
0001CF8E 7000                       		moveq	#0,d0
0001CF90 1028 0003                  		move.b	3(a0),d0
0001CF94 5228 0003                  		addq.b	#1,3(a0)
0001CF98 2268 0004                  		movea.l	4(a0),a1
0001CF9C 103B 0000                  		move.b	SS_AniEmerData(pc,d0.w),d0
0001CFA0 1280                       		move.b	d0,(a1)
0001CFA2 6600                       		bne.s	locret_1B60C
0001CFA4 4290                       		clr.l	(a0)
0001CFA6 42A8 0004                  		clr.l	4(a0)
0001CFAA 11FC 0004 D024             		move.b	#4,($FFFFD024).w
0001CFB0 303C 00A8                  		move.w	#$A8,d0
0001CFB4 4EB9 0000 147C             		jsr	(PlaySound_Special).l ;	play special stage GOAL	sound
0001CFBA                            
0001CFBA                            locret_1B60C:
0001CFBA 4E75                       		rts	
0001CFBC                            ; ===========================================================================
0001CFBC 4647 4849 0000             SS_AniEmerData:	dc.b $46, $47, $48, $49, 0, 0
0001CFC2                            ; ===========================================================================
0001CFC2                            
0001CFC2                            SS_AniGlassBlock:			; XREF: SS_AniIndex
0001CFC2 5328 0002                  		subq.b	#1,2(a0)
0001CFC6 6A00                       		bpl.s	locret_1B640
0001CFC8 117C 0001 0002             		move.b	#1,2(a0)
0001CFCE 7000                       		moveq	#0,d0
0001CFD0 1028 0003                  		move.b	3(a0),d0
0001CFD4 5228 0003                  		addq.b	#1,3(a0)
0001CFD8 2268 0004                  		movea.l	4(a0),a1
0001CFDC 103B 0000                  		move.b	SS_AniGlassData(pc,d0.w),d0
0001CFE0 1280                       		move.b	d0,(a1)
0001CFE2 6600                       		bne.s	locret_1B640
0001CFE4 12A8 0004                  		move.b	4(a0),(a1)
0001CFE8 4290                       		clr.l	(a0)
0001CFEA 42A8 0004                  		clr.l	4(a0)
0001CFEE                            
0001CFEE                            locret_1B640:
0001CFEE 4E75                       		rts	
0001CFF0                            ; ===========================================================================
0001CFF0 4B4C 4D4E 4B4C 4D4E 0000   SS_AniGlassData:dc.b $4B, $4C, $4D, $4E, $4B, $4C, $4D,	$4E, 0,	0
0001CFFA                            ; ---------------------------------------------------------------------------
0001CFFA                            ; Special stage	layout pointers
0001CFFA                            ; ---------------------------------------------------------------------------
0001CFFA                            SS_LayoutIndex:
0001CFFA                            	include "_inc\Special stage layout pointers.asm"
0001CFFA                            ; ---------------------------------------------------------------------------
0001CFFA                            ; Special stage	layout pointers
0001CFFA                            ; ---------------------------------------------------------------------------
0001CFFA 0000 0000                  	dc.l SS_1
0001CFFE 0000 0000                  	dc.l SS_2
0001D002 0000 0000                  	dc.l SS_3
0001D006 0000 0000                  	dc.l SS_4
0001D00A 0000 0000                  	dc.l SS_5
0001D00E 0000 0000                  	dc.l SS_6
0001D012                            	even
0001D012                            	even
0001D012                            
0001D012                            ; ---------------------------------------------------------------------------
0001D012                            ; Special stage	start locations
0001D012                            ; ---------------------------------------------------------------------------
0001D012                            SS_StartLoc:	incbin	misc\sloc_ss.bin
0001D02A                            		even
0001D02A                            
0001D02A                            ; ---------------------------------------------------------------------------
0001D02A                            ; Subroutine to	load special stage layout
0001D02A                            ; ---------------------------------------------------------------------------
0001D02A                            
0001D02A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D02A                            
0001D02A                            
0001D02A                            SS_Load:				; XREF: SpecialStage
0001D02A 7000                       		moveq	#0,d0
0001D02C 1038 FE16                  		move.b	($FFFFFE16).w,d0 ; load	number of last special stage entered
0001D030 5238 FE16                  		addq.b	#1,($FFFFFE16).w
0001D034 0C38 0006 FE16             		cmpi.b	#6,($FFFFFE16).w
0001D03A 6500                       		bcs.s	SS_ChkEmldNum
0001D03C 11FC 0000 FE16             		move.b	#0,($FFFFFE16).w ; reset if higher than	6
0001D042                            
0001D042                            SS_ChkEmldNum:
0001D042 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all emeralds?
0001D048 6700                       		beq.s	SS_LoadData	; if yes, branch
0001D04A 7200                       		moveq	#0,d1
0001D04C 1238 FE57                  		move.b	($FFFFFE57).w,d1
0001D050 5301                       		subq.b	#1,d1
0001D052 6500                       		bcs.s	SS_LoadData
0001D054 47F8 FE58                  		lea	($FFFFFE58).w,a3 ; check which emeralds	you have
0001D058                            
0001D058                            SS_ChkEmldLoop:	
0001D058 B033 1000                  		cmp.b	(a3,d1.w),d0
0001D05C 6600                       		bne.s	SS_ChkEmldRepeat
0001D05E 60CA                       		bra.s	SS_Load
0001D060                            ; ===========================================================================
0001D060                            
0001D060                            SS_ChkEmldRepeat:
0001D060 51C9 FFF6                  		dbf	d1,SS_ChkEmldLoop
0001D064                            
0001D064                            SS_LoadData:
0001D064 E548                       		lsl.w	#2,d0
0001D066 43FB 00AA                  		lea	SS_StartLoc(pc,d0.w),a1
0001D06A 31D9 D008                  		move.w	(a1)+,($FFFFD008).w
0001D06E 31D9 D00C                  		move.w	(a1)+,($FFFFD00C).w
0001D072 207B 0086                  		movea.l	SS_LayoutIndex(pc,d0.w),a0
0001D076 43F9 00FF 4000             		lea	($FF4000).l,a1
0001D07C 303C 0000                  		move.w	#0,d0
0001D080 4EB9 0000 188E             		jsr	(EniDec).l
0001D086 43F9 00FF 0000             		lea	($FF0000).l,a1
0001D08C 303C 0FFF                  		move.w	#$FFF,d0
0001D090                            
0001D090                            SS_ClrRAM3:
0001D090 4299                       		clr.l	(a1)+
0001D092 51C8 FFFC                  		dbf	d0,SS_ClrRAM3
0001D096                            
0001D096 43F9 00FF 1020             		lea	($FF1020).l,a1
0001D09C 41F9 00FF 4000             		lea	($FF4000).l,a0
0001D0A2 723F                       		moveq	#$3F,d1
0001D0A4                            
0001D0A4                            loc_1B6F6:
0001D0A4 743F                       		moveq	#$3F,d2
0001D0A6                            
0001D0A6                            loc_1B6F8:
0001D0A6 12D8                       		move.b	(a0)+,(a1)+
0001D0A8 51CA FFFC                  		dbf	d2,loc_1B6F8
0001D0AC                            
0001D0AC 43E9 0040                  		lea	$40(a1),a1
0001D0B0 51C9 FFF2                  		dbf	d1,loc_1B6F6
0001D0B4                            
0001D0B4 43F9 00FF 4008             		lea	($FF4008).l,a1
0001D0BA 41F9 0000 0000             		lea	(SS_MapIndex).l,a0
0001D0C0 724D                       		moveq	#$4D,d1
0001D0C2                            
0001D0C2                            loc_1B714:
0001D0C2 22D8                       		move.l	(a0)+,(a1)+
0001D0C4 32FC 0000                  		move.w	#0,(a1)+
0001D0C8 1368 FFFC FFFF             		move.b	-4(a0),-1(a1)
0001D0CE 32D8                       		move.w	(a0)+,(a1)+
0001D0D0 51C9 FFF0                  		dbf	d1,loc_1B714
0001D0D4                            
0001D0D4 43F9 00FF 4400             		lea	($FF4400).l,a1
0001D0DA 323C 003F                  		move.w	#$3F,d1
0001D0DE                            
0001D0DE                            loc_1B730:
0001D0DE                            
0001D0DE 4299                       		clr.l	(a1)+
0001D0E0 51C9 FFFC                  		dbf	d1,loc_1B730
0001D0E4                            
0001D0E4 4E75                       		rts	
0001D0E6                            ; End of function SS_Load
0001D0E6                            
0001D0E6                            ; ===========================================================================
0001D0E6                            ; ---------------------------------------------------------------------------
0001D0E6                            ; Special stage	mappings and VRAM pointers
0001D0E6                            ; ---------------------------------------------------------------------------
0001D0E6                            SS_MapIndex:
0001D0E6                            	include "_inc\Special stage mappings and VRAM pointers.asm"
0001D0E6                            ; ---------------------------------------------------------------------------
0001D0E6                            ; Special stage	mappings and VRAM pointers
0001D0E6                            ; ---------------------------------------------------------------------------
0001D0E6 0000 0000                  	dc.l Map_SSWalls	; address of mappings
0001D0EA 0142                       	dc.w $142		; VRAM setting
0001D0EC 0000 0000                  	dc.l Map_SSWalls
0001D0F0 0142                       	dc.w $142
0001D0F2 0000 0000                  	dc.l Map_SSWalls
0001D0F6 0142                       	dc.w $142
0001D0F8 0000 0000                  	dc.l Map_SSWalls
0001D0FC 0142                       	dc.w $142
0001D0FE 0000 0000                  	dc.l Map_SSWalls
0001D102 0142                       	dc.w $142
0001D104 0000 0000                  	dc.l Map_SSWalls
0001D108 0142                       	dc.w $142
0001D10A 0000 0000                  	dc.l Map_SSWalls
0001D10E 0142                       	dc.w $142
0001D110 0000 0000                  	dc.l Map_SSWalls
0001D114 0142                       	dc.w $142
0001D116 0000 0000                  	dc.l Map_SSWalls
0001D11A 0142                       	dc.w $142
0001D11C 0000 0000                  	dc.l Map_SSWalls
0001D120 2142                       	dc.w $2142
0001D122 0000 0000                  	dc.l Map_SSWalls
0001D126 2142                       	dc.w $2142
0001D128 0000 0000                  	dc.l Map_SSWalls
0001D12C 2142                       	dc.w $2142
0001D12E 0000 0000                  	dc.l Map_SSWalls
0001D132 2142                       	dc.w $2142
0001D134 0000 0000                  	dc.l Map_SSWalls
0001D138 2142                       	dc.w $2142
0001D13A 0000 0000                  	dc.l Map_SSWalls
0001D13E 2142                       	dc.w $2142
0001D140 0000 0000                  	dc.l Map_SSWalls
0001D144 2142                       	dc.w $2142
0001D146 0000 0000                  	dc.l Map_SSWalls
0001D14A 2142                       	dc.w $2142
0001D14C 0000 0000                  	dc.l Map_SSWalls
0001D150 2142                       	dc.w $2142
0001D152 0000 0000                  	dc.l Map_SSWalls
0001D156 4142                       	dc.w $4142
0001D158 0000 0000                  	dc.l Map_SSWalls
0001D15C 4142                       	dc.w $4142
0001D15E 0000 0000                  	dc.l Map_SSWalls
0001D162 4142                       	dc.w $4142
0001D164 0000 0000                  	dc.l Map_SSWalls
0001D168 4142                       	dc.w $4142
0001D16A 0000 0000                  	dc.l Map_SSWalls
0001D16E 4142                       	dc.w $4142
0001D170 0000 0000                  	dc.l Map_SSWalls
0001D174 4142                       	dc.w $4142
0001D176 0000 0000                  	dc.l Map_SSWalls
0001D17A 4142                       	dc.w $4142
0001D17C 0000 0000                  	dc.l Map_SSWalls
0001D180 4142                       	dc.w $4142
0001D182 0000 0000                  	dc.l Map_SSWalls
0001D186 4142                       	dc.w $4142
0001D188 0000 0000                  	dc.l Map_SSWalls
0001D18C 6142                       	dc.w $6142
0001D18E 0000 0000                  	dc.l Map_SSWalls
0001D192 6142                       	dc.w $6142
0001D194 0000 0000                  	dc.l Map_SSWalls
0001D198 6142                       	dc.w $6142
0001D19A 0000 0000                  	dc.l Map_SSWalls
0001D19E 6142                       	dc.w $6142
0001D1A0 0000 0000                  	dc.l Map_SSWalls
0001D1A4 6142                       	dc.w $6142
0001D1A6 0000 0000                  	dc.l Map_SSWalls
0001D1AA 6142                       	dc.w $6142
0001D1AC 0000 0000                  	dc.l Map_SSWalls
0001D1B0 6142                       	dc.w $6142
0001D1B2 0000 0000                  	dc.l Map_SSWalls
0001D1B6 6142                       	dc.w $6142
0001D1B8 0000 0000                  	dc.l Map_SSWalls
0001D1BC 6142                       	dc.w $6142
0001D1BE 0000 F5EC                  	dc.l Map_obj47
0001D1C2 023B                       	dc.w $23B
0001D1C4 0000 0000                  	dc.l Map_SS_R
0001D1C8 0570                       	dc.w $570
0001D1CA 0000 0000                  	dc.l Map_SS_R
0001D1CE 0251                       	dc.w $251
0001D1D0 0000 0000                  	dc.l Map_SS_R
0001D1D4 0370                       	dc.w $370
0001D1D6 0000 0000                  	dc.l Map_SS_Up
0001D1DA 0263                       	dc.w $263
0001D1DC 0000 0000                  	dc.l Map_SS_Down
0001D1E0 0263                       	dc.w $263
0001D1E2 0000 0000                  	dc.l Map_SS_R
0001D1E6 22F0                       	dc.w $22F0
0001D1E8 0000 0000                  	dc.l Map_SS_Glass
0001D1EC 0470                       	dc.w $470
0001D1EE 0000 0000                  	dc.l Map_SS_Glass
0001D1F2 05F0                       	dc.w $5F0
0001D1F4 0000 0000                  	dc.l Map_SS_Glass
0001D1F8 65F0                       	dc.w $65F0
0001D1FA 0000 0000                  	dc.l Map_SS_Glass
0001D1FE 25F0                       	dc.w $25F0
0001D200 0000 0000                  	dc.l Map_SS_Glass
0001D204 45F0                       	dc.w $45F0
0001D206 0000 0000                  	dc.l Map_SS_R
0001D20A 02F0                       	dc.w $2F0
0001D20C 0100 F5EC                  	dc.l Map_obj47+$1000000	; add frame no.	* $1000000
0001D210 023B                       	dc.w $23B
0001D212 0200 F5EC                  	dc.l Map_obj47+$2000000
0001D216 023B                       	dc.w $23B
0001D218 0000 0000                  	dc.l Map_SS_R
0001D21C 0797                       	dc.w $797
0001D21E 0000 0000                  	dc.l Map_SS_R
0001D222 07A0                       	dc.w $7A0
0001D224 0000 0000                  	dc.l Map_SS_R
0001D228 07A9                       	dc.w $7A9
0001D22A 0000 0000                  	dc.l Map_SS_R
0001D22E 0797                       	dc.w $797
0001D230 0000 0000                  	dc.l Map_SS_R
0001D234 07A0                       	dc.w $7A0
0001D236 0000 0000                  	dc.l Map_SS_R
0001D23A 07A9                       	dc.w $7A9
0001D23C 0000 AA38                  	dc.l Map_obj25
0001D240 27B2                       	dc.w $27B2
0001D242 0000 0000                  	dc.l Map_SS_Chaos3
0001D246 0770                       	dc.w $770
0001D248 0000 0000                  	dc.l Map_SS_Chaos3
0001D24C 2770                       	dc.w $2770
0001D24E 0000 0000                  	dc.l Map_SS_Chaos3
0001D252 4770                       	dc.w $4770
0001D254 0000 0000                  	dc.l Map_SS_Chaos3
0001D258 6770                       	dc.w $6770
0001D25A 0000 0000                  	dc.l Map_SS_Chaos1
0001D25E 0770                       	dc.w $770
0001D260 0000 0000                  	dc.l Map_SS_Chaos2
0001D264 0770                       	dc.w $770
0001D266 0000 0000                  	dc.l Map_SS_R
0001D26A 04F0                       	dc.w $4F0
0001D26C 0400 AA38                  	dc.l Map_obj25+$4000000
0001D270 27B2                       	dc.w $27B2
0001D272 0500 AA38                  	dc.l Map_obj25+$5000000
0001D276 27B2                       	dc.w $27B2
0001D278 0600 AA38                  	dc.l Map_obj25+$6000000
0001D27C 27B2                       	dc.w $27B2
0001D27E 0700 AA38                  	dc.l Map_obj25+$7000000
0001D282 27B2                       	dc.w $27B2
0001D284 0000 0000                  	dc.l Map_SS_Glass
0001D288 23F0                       	dc.w $23F0
0001D28A 0000 0000                  	dc.l Map_SS_Glass+$1000000
0001D28E 23F0                       	dc.w $23F0
0001D290 0000 0000                  	dc.l Map_SS_Glass+$2000000
0001D294 23F0                       	dc.w $23F0
0001D296 0000 0000                  	dc.l Map_SS_Glass+$3000000
0001D29A 23F0                       	dc.w $23F0
0001D29C 0000 0000                  	dc.l Map_SS_R+$2000000
0001D2A0 04F0                       	dc.w $4F0
0001D2A2 0000 0000                  	dc.l Map_SS_Glass
0001D2A6 05F0                       	dc.w $5F0
0001D2A8 0000 0000                  	dc.l Map_SS_Glass
0001D2AC 65F0                       	dc.w $65F0
0001D2AE 0000 0000                  	dc.l Map_SS_Glass
0001D2B2 25F0                       	dc.w $25F0
0001D2B4 0000 0000                  	dc.l Map_SS_Glass
0001D2B8 45F0                       	dc.w $45F0
0001D2B8 45F0                       	dc.w $45F0
0001D2BA                            
0001D2BA                            ; ---------------------------------------------------------------------------
0001D2BA                            ; Sprite mappings - special stage "R" block
0001D2BA                            ; ---------------------------------------------------------------------------
0001D2BA                            Map_SS_R:
0001D2BA                            	include "_maps\SSRblock.asm"
0001D2BA                            ; ---------------------------------------------------------------------------
0001D2BA                            ; Sprite mappings - special stage "R" block
0001D2BA                            ; ---------------------------------------------------------------------------
0001D2BA 0000 0000                  		dc.w byte_1B912-Map_SS_R, byte_1B918-Map_SS_R
0001D2BE 0000                       		dc.w byte_1B91E-Map_SS_R
0001D2C0 01                         byte_1B912:	dc.b 1
0001D2C1 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001D2C6 01                         byte_1B918:	dc.b 1
0001D2C7 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001D2CC 00                         byte_1B91E:	dc.b 0
0001D2CE 00                         		even
0001D2CE 00                         		even
0001D2CE                            
0001D2CE                            ; ---------------------------------------------------------------------------
0001D2CE                            ; Sprite mappings - special stage breakable glass blocks and red-white blocks
0001D2CE                            ; ---------------------------------------------------------------------------
0001D2CE                            Map_SS_Glass:
0001D2CE                            	include "_maps\SSglassblock.asm"
0001D2CE                            ; ---------------------------------------------------------------------------
0001D2CE                            ; Sprite mappings - special stage breakable glass blocks and red-white blocks
0001D2CE                            ; ---------------------------------------------------------------------------
0001D2CE 0000 0000                  		dc.w byte_1B928-Map_SS_Glass, byte_1B92E-Map_SS_Glass
0001D2D2 0000 0000                  		dc.w byte_1B934-Map_SS_Glass, byte_1B93A-Map_SS_Glass
0001D2D6 01                         byte_1B928:	dc.b 1
0001D2D7 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001D2DC 01                         byte_1B92E:	dc.b 1
0001D2DD F40A 0800 F4               		dc.b $F4, $A, 8, 0, $F4
0001D2E2 01                         byte_1B934:	dc.b 1
0001D2E3 F40A 1800 F4               		dc.b $F4, $A, $18, 0, $F4
0001D2E8 01                         byte_1B93A:	dc.b 1
0001D2E9 F40A 1000 F4               		dc.b $F4, $A, $10, 0, $F4
0001D2EE                            		even
0001D2EE                            		even
0001D2EE                            
0001D2EE                            ; ---------------------------------------------------------------------------
0001D2EE                            ; Sprite mappings - special stage "UP" block
0001D2EE                            ; ---------------------------------------------------------------------------
0001D2EE                            Map_SS_Up:
0001D2EE                            	include "_maps\SSUPblock.asm"
0001D2EE                            ; ---------------------------------------------------------------------------
0001D2EE                            ; Sprite mappings - special stage "UP" block
0001D2EE                            ; ---------------------------------------------------------------------------
0001D2EE 0000                       		dc.w byte_1B944-Map_SS_Up
0001D2F0 0000                       		dc.w byte_1B94A-Map_SS_Up
0001D2F2 01                         byte_1B944:	dc.b 1
0001D2F3 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001D2F8 01                         byte_1B94A:	dc.b 1
0001D2F9 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001D2FE                            		even
0001D2FE                            		even
0001D2FE                            
0001D2FE                            ; ---------------------------------------------------------------------------
0001D2FE                            ; Sprite mappings - special stage "DOWN" block
0001D2FE                            ; ---------------------------------------------------------------------------
0001D2FE                            Map_SS_Down:
0001D2FE                            	include "_maps\SSDOWNblock.asm"
0001D2FE                            ; ---------------------------------------------------------------------------
0001D2FE                            ; Sprite mappings - special stage "DOWN" block
0001D2FE                            ; ---------------------------------------------------------------------------
0001D2FE 0000                       		dc.w byte_1B954-Map_SS_Down
0001D300 0000                       		dc.w byte_1B95A-Map_SS_Down
0001D302 01                         byte_1B954:	dc.b 1
0001D303 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001D308 01                         byte_1B95A:	dc.b 1
0001D309 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001D30E                            		even
0001D30E                            		even
0001D30E                            
0001D30E                            ; ---------------------------------------------------------------------------
0001D30E                            ; Sprite mappings - special stage chaos	emeralds
0001D30E                            ; ---------------------------------------------------------------------------
0001D30E 0000                       Map_SS_Chaos1:	dc.w byte_1B96C-Map_SS_Chaos1
0001D310 0000                       		dc.w byte_1B97E-Map_SS_Chaos1
0001D312 0000                       Map_SS_Chaos2:	dc.w byte_1B972-Map_SS_Chaos2
0001D314 0000                       		dc.w byte_1B97E-Map_SS_Chaos2
0001D316 0000                       Map_SS_Chaos3:	dc.w byte_1B978-Map_SS_Chaos3
0001D318 0000                       		dc.w byte_1B97E-Map_SS_Chaos3
0001D31A 01                         byte_1B96C:	dc.b 1
0001D31B F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0001D320 01                         byte_1B972:	dc.b 1
0001D321 F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
0001D326 01                         byte_1B978:	dc.b 1
0001D327 F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
0001D32C 01                         byte_1B97E:	dc.b 1
0001D32D F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
0001D332                            		even
0001D332                            ; ===========================================================================
0001D332                            ; ---------------------------------------------------------------------------
0001D332                            ; Object 09 - Sonic (special stage)
0001D332                            ; ---------------------------------------------------------------------------
0001D332                            
0001D332                            Obj09:					; XREF: Obj_Index
0001D332 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
0001D336 6700                       		beq.s	Obj09_Normal	; if not, branch
0001D338 6100 0000                  		bsr.w	SS_FixCamera
0001D33C 6000 0000                  		bra.w	DebugMode
0001D340                            ; ===========================================================================
0001D340                            
0001D340                            Obj09_Normal:
0001D340 7000                       		moveq	#0,d0
0001D342 1028 0024                  		move.b	$24(a0),d0
0001D346 323B 0000                  		move.w	Obj09_Index(pc,d0.w),d1
0001D34A 4EFB 1000                  		jmp	Obj09_Index(pc,d1.w)
0001D34E                            ; ===========================================================================
0001D34E 0000                       Obj09_Index:	dc.w Obj09_Main-Obj09_Index
0001D350 0000                       		dc.w Obj09_ChkDebug-Obj09_Index
0001D352 0000                       		dc.w Obj09_ExitStage-Obj09_Index
0001D354 0000                       		dc.w Obj09_Exit2-Obj09_Index
0001D356                            ; ===========================================================================
0001D356                            
0001D356                            Obj09_Main:				; XREF: Obj09_Index
0001D356 5428 0024                  		addq.b	#2,$24(a0)
0001D35A 117C 000E 0016             		move.b	#$E,$16(a0)
0001D360 117C 0007 0017             		move.b	#7,$17(a0)
0001D366 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
0001D36E 317C 0780 0002             		move.w	#$780,2(a0)
0001D374 117C 0004 0001             		move.b	#4,1(a0)
0001D37A 117C 0000 0018             		move.b	#0,$18(a0)
0001D380 117C 0002 001C             		move.b	#2,$1C(a0)
0001D386 08E8 0002 0022             		bset	#2,$22(a0)
0001D38C 08E8 0001 0022             		bset	#1,$22(a0)
0001D392                            
0001D392                            Obj09_ChkDebug:				; XREF: Obj09_Index
0001D392 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug mode	cheat enabled?
0001D396 6700                       		beq.s	Obj09_NoDebug	; if not, branch
0001D398 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button B pressed?
0001D39E 6700                       		beq.s	Obj09_NoDebug	; if not, branch
0001D3A0 31FC 0001 FE08             		move.w	#1,($FFFFFE08).w ; change Sonic	into a ring
0001D3A6                            
0001D3A6                            Obj09_NoDebug:
0001D3A6 117C 0000 0030             		move.b	#0,$30(a0)
0001D3AC 7000                       		moveq	#0,d0
0001D3AE 1028 0022                  		move.b	$22(a0),d0
0001D3B2 0240 0002                  		andi.w	#2,d0
0001D3B6 323B 0000                  		move.w	Obj09_Modes(pc,d0.w),d1
0001D3BA 4EBB 1000                  		jsr	Obj09_Modes(pc,d1.w)
0001D3BE 4EB9 0001 50DC             		jsr	LoadSonicDynPLC
0001D3C4 4EF9 0000 E0E4             		jmp	DisplaySprite
0001D3CA                            ; ===========================================================================
0001D3CA 0000                       Obj09_Modes:	dc.w Obj09_OnWall-Obj09_Modes
0001D3CC 0000                       		dc.w Obj09_InAir-Obj09_Modes
0001D3CE                            ; ===========================================================================
0001D3CE                            
0001D3CE                            Obj09_OnWall:				; XREF: Obj09_Modes
0001D3CE 6100 0000                  		bsr.w	Obj09_Jump
0001D3D2 6100 0000                  		bsr.w	Obj09_Move
0001D3D6 6100 0000                  		bsr.w	Obj09_Fall
0001D3DA 6000                       		bra.s	Obj09_Display
0001D3DC                            ; ===========================================================================
0001D3DC                            
0001D3DC                            Obj09_InAir:				; XREF: Obj09_Modes
0001D3DC 6100 0000                  		bsr.w	nullsub_2
0001D3E0 6100 0000                  		bsr.w	Obj09_Move
0001D3E4 6100 0000                  		bsr.w	Obj09_Fall
0001D3E8                            
0001D3E8                            Obj09_Display:				; XREF: Obj09_OnWall
0001D3E8 6100 0000                  		bsr.w	Obj09_ChkItems
0001D3EC 6100 0000                  		bsr.w	Obj09_ChkItems2
0001D3F0 4EB9 0000 E0BE             		jsr	SpeedToPos
0001D3F6 6100 0000                  		bsr.w	SS_FixCamera
0001D3FA 3038 F780                  		move.w	($FFFFF780).w,d0
0001D3FE D078 F782                  		add.w	($FFFFF782).w,d0
0001D402 31C0 F780                  		move.w	d0,($FFFFF780).w
0001D406 4EB9 0001 4BA4             		jsr	Sonic_Animate
0001D40C 4E75                       		rts	
0001D40E                            
0001D40E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D40E                            
0001D40E                            
0001D40E                            Obj09_Move:				; XREF: Obj09_OnWall; Obj09_InAir
0001D40E 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
0001D414 6700                       		beq.s	Obj09_ChkRight	; if not, branch
0001D416 6100 0000                  		bsr.w	Obj09_MoveLeft
0001D41A                            
0001D41A                            Obj09_ChkRight:
0001D41A 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
0001D420 6700                       		beq.s	loc_1BA78	; if not, branch
0001D422 6100 0000                  		bsr.w	Obj09_MoveRight
0001D426                            
0001D426                            loc_1BA78:
0001D426 1038 F602                  		move.b	($FFFFF602).w,d0
0001D42A 0200 000C                  		andi.b	#$C,d0
0001D42E 6600                       		bne.s	loc_1BAA8
0001D430 3028 0014                  		move.w	$14(a0),d0
0001D434 6700                       		beq.s	loc_1BAA8
0001D436 6B00                       		bmi.s	loc_1BA9A
0001D438 0440 000C                  		subi.w	#$C,d0
0001D43C 6400                       		bcc.s	loc_1BA94
0001D43E 303C 0000                  		move.w	#0,d0
0001D442                            
0001D442                            loc_1BA94:
0001D442 3140 0014                  		move.w	d0,$14(a0)
0001D446 6000                       		bra.s	loc_1BAA8
0001D448                            ; ===========================================================================
0001D448                            
0001D448                            loc_1BA9A:
0001D448 0640 000C                  		addi.w	#$C,d0
0001D44C 6400                       		bcc.s	loc_1BAA4
0001D44E 303C 0000                  		move.w	#0,d0
0001D452                            
0001D452                            loc_1BAA4:
0001D452 3140 0014                  		move.w	d0,$14(a0)
0001D456                            
0001D456                            loc_1BAA8:
0001D456 1038 F780                  		move.b	($FFFFF780).w,d0
0001D45A 0600 0020                  		addi.b	#$20,d0
0001D45E 0200 00C0                  		andi.b	#$C0,d0
0001D462 4400                       		neg.b	d0
0001D464 4EB9 0000 33DA             		jsr	(CalcSine).l
0001D46A C3E8 0014                  		muls.w	$14(a0),d1
0001D46E D3A8 0008                  		add.l	d1,8(a0)
0001D472 C1E8 0014                  		muls.w	$14(a0),d0
0001D476 D1A8 000C                  		add.l	d0,$C(a0)
0001D47A 48E7 C000                  		movem.l	d0-d1,-(sp)
0001D47E 2428 000C                  		move.l	$C(a0),d2
0001D482 2628 0008                  		move.l	8(a0),d3
0001D486 6100 0000                  		bsr.w	sub_1BCE8
0001D48A 6700                       		beq.s	loc_1BAF2
0001D48C 4CDF 0003                  		movem.l	(sp)+,d0-d1
0001D490 93A8 0008                  		sub.l	d1,8(a0)
0001D494 91A8 000C                  		sub.l	d0,$C(a0)
0001D498 317C 0000 0014             		move.w	#0,$14(a0)
0001D49E 4E75                       		rts	
0001D4A0                            ; ===========================================================================
0001D4A0                            
0001D4A0                            loc_1BAF2:
0001D4A0 4CDF 0003                  		movem.l	(sp)+,d0-d1
0001D4A4 4E75                       		rts	
0001D4A6                            ; End of function Obj09_Move
0001D4A6                            
0001D4A6                            
0001D4A6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D4A6                            
0001D4A6                            
0001D4A6                            Obj09_MoveLeft:				; XREF: Obj09_Move
0001D4A6 08E8 0000 0022             		bset	#0,$22(a0)
0001D4AC 3028 0014                  		move.w	$14(a0),d0
0001D4B0 6700                       		beq.s	loc_1BB06
0001D4B2 6A00                       		bpl.s	loc_1BB1A
0001D4B4                            
0001D4B4                            loc_1BB06:
0001D4B4 0440 000C                  		subi.w	#$C,d0
0001D4B8 0C40 F800                  		cmpi.w	#-$800,d0
0001D4BC 6E00                       		bgt.s	loc_1BB14
0001D4BE 303C F800                  		move.w	#-$800,d0
0001D4C2                            
0001D4C2                            loc_1BB14:
0001D4C2 3140 0014                  		move.w	d0,$14(a0)
0001D4C6 4E75                       		rts	
0001D4C8                            ; ===========================================================================
0001D4C8                            
0001D4C8                            loc_1BB1A:
0001D4C8 0440 0040                  		subi.w	#$40,d0
0001D4CC 6400                       		bcc.s	loc_1BB22
0001D4CE 4E71                       		nop	
0001D4D0                            
0001D4D0                            loc_1BB22:
0001D4D0 3140 0014                  		move.w	d0,$14(a0)
0001D4D4 4E75                       		rts	
0001D4D6                            ; End of function Obj09_MoveLeft
0001D4D6                            
0001D4D6                            
0001D4D6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D4D6                            
0001D4D6                            
0001D4D6                            Obj09_MoveRight:			; XREF: Obj09_Move
0001D4D6 08A8 0000 0022             		bclr	#0,$22(a0)
0001D4DC 3028 0014                  		move.w	$14(a0),d0
0001D4E0 6B00                       		bmi.s	loc_1BB48
0001D4E2 0640 000C                  		addi.w	#$C,d0
0001D4E6 0C40 0800                  		cmpi.w	#$800,d0
0001D4EA 6D00                       		blt.s	loc_1BB42
0001D4EC 303C 0800                  		move.w	#$800,d0
0001D4F0                            
0001D4F0                            loc_1BB42:
0001D4F0 3140 0014                  		move.w	d0,$14(a0)
0001D4F4 6000                       		bra.s	locret_1BB54
0001D4F6                            ; ===========================================================================
0001D4F6                            
0001D4F6                            loc_1BB48:
0001D4F6 0640 0040                  		addi.w	#$40,d0
0001D4FA 6400                       		bcc.s	loc_1BB50
0001D4FC 4E71                       		nop	
0001D4FE                            
0001D4FE                            loc_1BB50:
0001D4FE 3140 0014                  		move.w	d0,$14(a0)
0001D502                            
0001D502                            locret_1BB54:
0001D502 4E75                       		rts	
0001D504                            ; End of function Obj09_MoveRight
0001D504                            
0001D504                            
0001D504                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D504                            
0001D504                            
0001D504                            Obj09_Jump:				; XREF: Obj09_OnWall
0001D504 1038 F603                  		move.b	($FFFFF603).w,d0
0001D508 0200 0070                  		andi.b	#$70,d0		; is A,	B or C pressed?
0001D50C 6700                       		beq.s	Obj09_NoJump	; if not, branch
0001D50E 1038 F780                  		move.b	($FFFFF780).w,d0
0001D512 0200 00FC                  		andi.b	#$FC,d0
0001D516 4400                       		neg.b	d0
0001D518 0400 0040                  		subi.b	#$40,d0
0001D51C 4EB9 0000 33DA             		jsr	(CalcSine).l
0001D522 C3FC 0680                  		muls.w	#$680,d1
0001D526 E081                       		asr.l	#8,d1
0001D528 3141 0010                  		move.w	d1,$10(a0)
0001D52C C1FC 0680                  		muls.w	#$680,d0
0001D530 E080                       		asr.l	#8,d0
0001D532 3140 0012                  		move.w	d0,$12(a0)
0001D536 08E8 0001 0022             		bset	#1,$22(a0)
0001D53C 303C 00A0                  		move.w	#$A0,d0
0001D540 4EB9 0000 147C             		jsr	(PlaySound_Special).l ;	play jumping sound
0001D546                            
0001D546                            Obj09_NoJump:
0001D546 4E75                       		rts	
0001D548                            ; End of function Obj09_Jump
0001D548                            
0001D548                            
0001D548                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D548                            
0001D548                            
0001D548                            nullsub_2:				; XREF: Obj09_InAir
0001D548 4E75                       		rts	
0001D54A                            ; End of function nullsub_2
0001D54A                            
0001D54A                            ; ===========================================================================
0001D54A                            ; ---------------------------------------------------------------------------
0001D54A                            ; unused subroutine to limit Sonic's upward vertical speed
0001D54A                            ; ---------------------------------------------------------------------------
0001D54A 323C FC00                  		move.w	#-$400,d1
0001D54E B268 0012                  		cmp.w	$12(a0),d1
0001D552 6F00                       		ble.s	locret_1BBB4
0001D554 1038 F602                  		move.b	($FFFFF602).w,d0
0001D558 0200 0070                  		andi.b	#$70,d0
0001D55C 6600                       		bne.s	locret_1BBB4
0001D55E 3141 0012                  		move.w	d1,$12(a0)
0001D562                            
0001D562                            locret_1BBB4:
0001D562 4E75                       		rts	
0001D564                            ; ---------------------------------------------------------------------------
0001D564                            ; Subroutine to	fix the	camera on Sonic's position (special stage)
0001D564                            ; ---------------------------------------------------------------------------
0001D564                            
0001D564                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D564                            
0001D564                            
0001D564                            SS_FixCamera:				; XREF: Obj09
0001D564 3428 000C                  		move.w	$C(a0),d2
0001D568 3628 0008                  		move.w	8(a0),d3
0001D56C 3038 F700                  		move.w	($FFFFF700).w,d0
0001D570 0443 00A0                  		subi.w	#$A0,d3
0001D574 6500                       		bcs.s	loc_1BBCE
0001D576 9043                       		sub.w	d3,d0
0001D578 9178 F700                  		sub.w	d0,($FFFFF700).w
0001D57C                            
0001D57C                            loc_1BBCE:
0001D57C 3038 F704                  		move.w	($FFFFF704).w,d0
0001D580 0442 0070                  		subi.w	#$70,d2
0001D584 6500                       		bcs.s	locret_1BBDE
0001D586 9042                       		sub.w	d2,d0
0001D588 9178 F704                  		sub.w	d0,($FFFFF704).w
0001D58C                            
0001D58C                            locret_1BBDE:
0001D58C 4E75                       		rts	
0001D58E                            ; End of function SS_FixCamera
0001D58E                            
0001D58E                            ; ===========================================================================
0001D58E                            
0001D58E                            Obj09_ExitStage:			; XREF: Obj09_Index
0001D58E 0678 0040 F782             		addi.w	#$40,($FFFFF782).w
0001D594 0C78 1800 F782             		cmpi.w	#$1800,($FFFFF782).w
0001D59A 6600                       		bne.s	loc_1BBF4
0001D59C 11FC 000C F600             		move.b	#$C,($FFFFF600).w
0001D5A2                            
0001D5A2                            loc_1BBF4:
0001D5A2 0C78 3000 F782             		cmpi.w	#$3000,($FFFFF782).w
0001D5A8 6D00                       		blt.s	loc_1BC12
0001D5AA 31FC 0000 F782             		move.w	#0,($FFFFF782).w
0001D5B0 31FC 4000 F780             		move.w	#$4000,($FFFFF780).w
0001D5B6 5428 0024                  		addq.b	#2,$24(a0)
0001D5BA 317C 003C 0038             		move.w	#$3C,$38(a0)
0001D5C0                            
0001D5C0                            loc_1BC12:
0001D5C0 3038 F780                  		move.w	($FFFFF780).w,d0
0001D5C4 D078 F782                  		add.w	($FFFFF782).w,d0
0001D5C8 31C0 F780                  		move.w	d0,($FFFFF780).w
0001D5CC 4EB9 0001 4BA4             		jsr	Sonic_Animate
0001D5D2 4EB9 0001 50DC             		jsr	LoadSonicDynPLC
0001D5D8 6100 FF8A                  		bsr.w	SS_FixCamera
0001D5DC 4EF9 0000 E0E4             		jmp	DisplaySprite
0001D5E2                            ; ===========================================================================
0001D5E2                            
0001D5E2                            Obj09_Exit2:				; XREF: Obj09_Index
0001D5E2 5368 0038                  		subq.w	#1,$38(a0)
0001D5E6 6600                       		bne.s	loc_1BC40
0001D5E8 11FC 000C F600             		move.b	#$C,($FFFFF600).w
0001D5EE                            
0001D5EE                            loc_1BC40:
0001D5EE 4EB9 0001 4BA4             		jsr	Sonic_Animate
0001D5F4 4EB9 0001 50DC             		jsr	LoadSonicDynPLC
0001D5FA 6100 FF68                  		bsr.w	SS_FixCamera
0001D5FE 4EF9 0000 E0E4             		jmp	DisplaySprite
0001D604                            
0001D604                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D604                            
0001D604                            
0001D604                            Obj09_Fall:				; XREF: Obj09_OnWall; Obj09_InAir
0001D604 2428 000C                  		move.l	$C(a0),d2
0001D608 2628 0008                  		move.l	8(a0),d3
0001D60C 1038 F780                  		move.b	($FFFFF780).w,d0
0001D610 0200 00FC                  		andi.b	#$FC,d0
0001D614 4EB9 0000 33DA             		jsr	(CalcSine).l
0001D61A 3828 0010                  		move.w	$10(a0),d4
0001D61E 48C4                       		ext.l	d4
0001D620 E184                       		asl.l	#8,d4
0001D622 C1FC 002A                  		muls.w	#$2A,d0
0001D626 D084                       		add.l	d4,d0
0001D628 3828 0012                  		move.w	$12(a0),d4
0001D62C 48C4                       		ext.l	d4
0001D62E E184                       		asl.l	#8,d4
0001D630 C3FC 002A                  		muls.w	#$2A,d1
0001D634 D284                       		add.l	d4,d1
0001D636 D680                       		add.l	d0,d3
0001D638 6100 0000                  		bsr.w	sub_1BCE8
0001D63C 6700                       		beq.s	loc_1BCB0
0001D63E 9680                       		sub.l	d0,d3
0001D640 7000                       		moveq	#0,d0
0001D642 3140 0010                  		move.w	d0,$10(a0)
0001D646 08A8 0001 0022             		bclr	#1,$22(a0)
0001D64C D481                       		add.l	d1,d2
0001D64E 6100 0000                  		bsr.w	sub_1BCE8
0001D652 6700                       		beq.s	loc_1BCC6
0001D654 9481                       		sub.l	d1,d2
0001D656 7200                       		moveq	#0,d1
0001D658 3141 0012                  		move.w	d1,$12(a0)
0001D65C 4E75                       		rts	
0001D65E                            ; ===========================================================================
0001D65E                            
0001D65E                            loc_1BCB0:
0001D65E D481                       		add.l	d1,d2
0001D660 6100 0000                  		bsr.w	sub_1BCE8
0001D664 6700                       		beq.s	loc_1BCD4
0001D666 9481                       		sub.l	d1,d2
0001D668 7200                       		moveq	#0,d1
0001D66A 3141 0012                  		move.w	d1,$12(a0)
0001D66E 08A8 0001 0022             		bclr	#1,$22(a0)
0001D674                            
0001D674                            loc_1BCC6:
0001D674 E080                       		asr.l	#8,d0
0001D676 E081                       		asr.l	#8,d1
0001D678 3140 0010                  		move.w	d0,$10(a0)
0001D67C 3141 0012                  		move.w	d1,$12(a0)
0001D680 4E75                       		rts	
0001D682                            ; ===========================================================================
0001D682                            
0001D682                            loc_1BCD4:
0001D682 E080                       		asr.l	#8,d0
0001D684 E081                       		asr.l	#8,d1
0001D686 3140 0010                  		move.w	d0,$10(a0)
0001D68A 3141 0012                  		move.w	d1,$12(a0)
0001D68E 08E8 0001 0022             		bset	#1,$22(a0)
0001D694 4E75                       		rts	
0001D696                            ; End of function Obj09_Fall
0001D696                            
0001D696                            
0001D696                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D696                            
0001D696                            
0001D696                            sub_1BCE8:				; XREF: Obj09_Move; Obj09_Fall
0001D696 43F9 00FF 0000             		lea	($FF0000).l,a1
0001D69C 7800                       		moveq	#0,d4
0001D69E 4842                       		swap	d2
0001D6A0 3802                       		move.w	d2,d4
0001D6A2 4842                       		swap	d2
0001D6A4 0644 0044                  		addi.w	#$44,d4
0001D6A8 88FC 0018                  		divu.w	#$18,d4
0001D6AC C8FC 0080                  		mulu.w	#$80,d4
0001D6B0 D3C4                       		adda.l	d4,a1
0001D6B2 7800                       		moveq	#0,d4
0001D6B4 4843                       		swap	d3
0001D6B6 3803                       		move.w	d3,d4
0001D6B8 4843                       		swap	d3
0001D6BA 0644 0014                  		addi.w	#$14,d4
0001D6BE 88FC 0018                  		divu.w	#$18,d4
0001D6C2 D2C4                       		adda.w	d4,a1
0001D6C4 7A00                       		moveq	#0,d5
0001D6C6 1819                       		move.b	(a1)+,d4
0001D6C8 6100                       		bsr.s	sub_1BD30
0001D6CA 1819                       		move.b	(a1)+,d4
0001D6CC 6100                       		bsr.s	sub_1BD30
0001D6CE D2FC 007E                  		adda.w	#$7E,a1
0001D6D2 1819                       		move.b	(a1)+,d4
0001D6D4 6100                       		bsr.s	sub_1BD30
0001D6D6 1819                       		move.b	(a1)+,d4
0001D6D8 6100                       		bsr.s	sub_1BD30
0001D6DA 4A05                       		tst.b	d5
0001D6DC 4E75                       		rts	
0001D6DE                            ; End of function sub_1BCE8
0001D6DE                            
0001D6DE                            
0001D6DE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D6DE                            
0001D6DE                            
0001D6DE                            sub_1BD30:				; XREF: sub_1BCE8
0001D6DE 6700                       		beq.s	locret_1BD44
0001D6E0 0C04 0028                  		cmpi.b	#$28,d4
0001D6E4 6700                       		beq.s	locret_1BD44
0001D6E6 0C04 003A                  		cmpi.b	#$3A,d4
0001D6EA 6500                       		bcs.s	loc_1BD46
0001D6EC 0C04 004B                  		cmpi.b	#$4B,d4
0001D6F0 6400                       		bcc.s	loc_1BD46
0001D6F2                            
0001D6F2                            locret_1BD44:
0001D6F2 4E75                       		rts	
0001D6F4                            ; ===========================================================================
0001D6F4                            
0001D6F4                            loc_1BD46:
0001D6F4 1144 0030                  		move.b	d4,$30(a0)
0001D6F8 2149 0032                  		move.l	a1,$32(a0)
0001D6FC 7AFF                       		moveq	#-1,d5
0001D6FE 4E75                       		rts	
0001D700                            ; End of function sub_1BD30
0001D700                            
0001D700                            
0001D700                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D700                            
0001D700                            
0001D700                            Obj09_ChkItems:				; XREF: Obj09_Display
0001D700 43F9 00FF 0000             		lea	($FF0000).l,a1
0001D706 7800                       		moveq	#0,d4
0001D708 3828 000C                  		move.w	$C(a0),d4
0001D70C 0644 0050                  		addi.w	#$50,d4
0001D710 88FC 0018                  		divu.w	#$18,d4
0001D714 C8FC 0080                  		mulu.w	#$80,d4
0001D718 D3C4                       		adda.l	d4,a1
0001D71A 7800                       		moveq	#0,d4
0001D71C 3828 0008                  		move.w	8(a0),d4
0001D720 0644 0020                  		addi.w	#$20,d4
0001D724 88FC 0018                  		divu.w	#$18,d4
0001D728 D2C4                       		adda.w	d4,a1
0001D72A 1811                       		move.b	(a1),d4
0001D72C 6600                       		bne.s	Obj09_ChkCont
0001D72E 4A28 003A                  		tst.b	$3A(a0)
0001D732 6600 0000                  		bne.w	Obj09_MakeGhostSolid
0001D736 7800                       		moveq	#0,d4
0001D738 4E75                       		rts	
0001D73A                            ; ===========================================================================
0001D73A                            
0001D73A                            Obj09_ChkCont:
0001D73A 0C04 003A                  		cmpi.b	#$3A,d4		; is the item a	ring?
0001D73E 6600                       		bne.s	Obj09_Chk1Up
0001D740 6100 F726                  		bsr.w	SS_RemoveCollectedItem
0001D744 6600                       		bne.s	Obj09_GetCont
0001D746 14BC 0001                  		move.b	#1,(a2)
0001D74A 2549 0004                  		move.l	a1,4(a2)
0001D74E                            
0001D74E                            Obj09_GetCont:
0001D74E 4EB9 0000 A6DE             		jsr	CollectRing
0001D754 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; check if you have 50 rings
0001D75A 6500                       		bcs.s	Obj09_NoCont
0001D75C 08F8 0000 FE1B             		bset	#0,($FFFFFE1B).w
0001D762 6600                       		bne.s	Obj09_NoCont
0001D764 5238 FE18                  		addq.b	#1,($FFFFFE18).w ; add 1 to number of continues
0001D768 303C 00BF                  		move.w	#$BF,d0
0001D76C 4EB9 0000 1476             		jsr	(PlaySound).l	; play extra continue sound
0001D772                            
0001D772                            Obj09_NoCont:
0001D772 7800                       		moveq	#0,d4
0001D774 4E75                       		rts	
0001D776                            ; ===========================================================================
0001D776                            
0001D776                            Obj09_Chk1Up:
0001D776 0C04 0028                  		cmpi.b	#$28,d4		; is the item an extra life?
0001D77A 6600                       		bne.s	Obj09_ChkEmer
0001D77C 6100 F6EA                  		bsr.w	SS_RemoveCollectedItem
0001D780 6600                       		bne.s	Obj09_Get1Up
0001D782 14BC 0003                  		move.b	#3,(a2)
0001D786 2549 0004                  		move.l	a1,4(a2)
0001D78A                            
0001D78A                            Obj09_Get1Up:
0001D78A 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to number of lives
0001D78E 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to lives counter
0001D792 303C 0088                  		move.w	#$88,d0
0001D796 4EB9 0000 1476             		jsr	(PlaySound).l	; play extra life music
0001D79C 7800                       		moveq	#0,d4
0001D79E 4E75                       		rts	
0001D7A0                            ; ===========================================================================
0001D7A0                            
0001D7A0                            Obj09_ChkEmer:
0001D7A0 0C04 003B                  		cmpi.b	#$3B,d4		; is the item an emerald?
0001D7A4 6500                       		bcs.s	Obj09_ChkGhost
0001D7A6 0C04 0040                  		cmpi.b	#$40,d4
0001D7AA 6200                       		bhi.s	Obj09_ChkGhost
0001D7AC 6100 F6BA                  		bsr.w	SS_RemoveCollectedItem
0001D7B0 6600                       		bne.s	Obj09_GetEmer
0001D7B2 14BC 0005                  		move.b	#5,(a2)
0001D7B6 2549 0004                  		move.l	a1,4(a2)
0001D7BA                            
0001D7BA                            Obj09_GetEmer:
0001D7BA 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all the emeralds?
0001D7C0 6700                       		beq.s	Obj09_NoEmer	; if yes, branch
0001D7C2 0404 003B                  		subi.b	#$3B,d4
0001D7C6 7000                       		moveq	#0,d0
0001D7C8 1038 FE57                  		move.b	($FFFFFE57).w,d0
0001D7CC 45F8 FE58                  		lea	($FFFFFE58).w,a2
0001D7D0 1584 0000                  		move.b	d4,(a2,d0.w)
0001D7D4 5238 FE57                  		addq.b	#1,($FFFFFE57).w ; add 1 to number of emeralds
0001D7D8                            
0001D7D8                            Obj09_NoEmer:
0001D7D8 303C 0093                  		move.w	#$93,d0
0001D7DC 4EB9 0000 147C             		jsr	(PlaySound_Special).l ;	play emerald music
0001D7E2 7800                       		moveq	#0,d4
0001D7E4 4E75                       		rts	
0001D7E6                            ; ===========================================================================
0001D7E6                            
0001D7E6                            Obj09_ChkGhost:
0001D7E6 0C04 0041                  		cmpi.b	#$41,d4		; is the item a	ghost block?
0001D7EA 6600                       		bne.s	Obj09_ChkGhostTag
0001D7EC 117C 0001 003A             		move.b	#1,$3A(a0)	; mark the ghost block as "passed"
0001D7F2                            
0001D7F2                            Obj09_ChkGhostTag:
0001D7F2 0C04 004A                  		cmpi.b	#$4A,d4		; is the item a	switch for ghost blocks?
0001D7F6 6600                       		bne.s	Obj09_NoGhost
0001D7F8 0C28 0001 003A             		cmpi.b	#1,$3A(a0)	; have the ghost blocks	been passed?
0001D7FE 6600                       		bne.s	Obj09_NoGhost	; if not, branch
0001D800 117C 0002 003A             		move.b	#2,$3A(a0)	; mark the ghost blocks	as "solid"
0001D806                            
0001D806                            Obj09_NoGhost:
0001D806 78FF                       		moveq	#-1,d4
0001D808 4E75                       		rts	
0001D80A                            ; ===========================================================================
0001D80A                            
0001D80A                            Obj09_MakeGhostSolid:
0001D80A 0C28 0002 003A             		cmpi.b	#2,$3A(a0)	; is the ghost marked as "solid"?
0001D810 6600                       		bne.s	Obj09_GhostNotSolid ; if not, branch
0001D812 43F9 00FF 1020             		lea	($FF1020).l,a1
0001D818 723F                       		moveq	#$3F,d1
0001D81A                            
0001D81A                            Obj09_GhostLoop2:
0001D81A 743F                       		moveq	#$3F,d2
0001D81C                            
0001D81C                            Obj09_GhostLoop:
0001D81C 0C11 0041                  		cmpi.b	#$41,(a1)	; is the item a	ghost block?
0001D820 6600                       		bne.s	Obj09_NoReplace	; if not, branch
0001D822 12BC 002C                  		move.b	#$2C,(a1)	; replace ghost	block with a solid block
0001D826                            
0001D826                            Obj09_NoReplace:
0001D826 5249                       		addq.w	#1,a1
0001D828 51CA FFF2                  		dbf	d2,Obj09_GhostLoop
0001D82C 43E9 0040                  		lea	$40(a1),a1
0001D830 51C9 FFE8                  		dbf	d1,Obj09_GhostLoop2
0001D834                            
0001D834                            Obj09_GhostNotSolid:
0001D834 4228 003A                  		clr.b	$3A(a0)
0001D838 7800                       		moveq	#0,d4
0001D83A 4E75                       		rts	
0001D83C                            ; End of function Obj09_ChkItems
0001D83C                            
0001D83C                            
0001D83C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D83C                            
0001D83C                            
0001D83C                            Obj09_ChkItems2:			; XREF: Obj09_Display
0001D83C 1028 0030                  		move.b	$30(a0),d0
0001D840 6600                       		bne.s	Obj09_ChkBumper
0001D842 5328 0036                  		subq.b	#1,$36(a0)
0001D846 6A00                       		bpl.s	loc_1BEA0
0001D848 117C 0000 0036             		move.b	#0,$36(a0)
0001D84E                            
0001D84E                            loc_1BEA0:
0001D84E 5328 0037                  		subq.b	#1,$37(a0)
0001D852 6A00                       		bpl.s	locret_1BEAC
0001D854 117C 0000 0037             		move.b	#0,$37(a0)
0001D85A                            
0001D85A                            locret_1BEAC:
0001D85A 4E75                       		rts	
0001D85C                            ; ===========================================================================
0001D85C                            
0001D85C                            Obj09_ChkBumper:
0001D85C 0C00 0025                  		cmpi.b	#$25,d0		; is the item a	bumper?
0001D860 6600                       		bne.s	Obj09_GOAL
0001D862 2228 0032                  		move.l	$32(a0),d1
0001D866 0481 00FF 0001             		subi.l	#$FF0001,d1
0001D86C 3401                       		move.w	d1,d2
0001D86E 0241 007F                  		andi.w	#$7F,d1
0001D872 C2FC 0018                  		mulu.w	#$18,d1
0001D876 0441 0014                  		subi.w	#$14,d1
0001D87A EE4A                       		lsr.w	#7,d2
0001D87C 0242 007F                  		andi.w	#$7F,d2
0001D880 C4FC 0018                  		mulu.w	#$18,d2
0001D884 0442 0044                  		subi.w	#$44,d2
0001D888 9268 0008                  		sub.w	8(a0),d1
0001D88C 9468 000C                  		sub.w	$C(a0),d2
0001D890 4EB9 0000 36A8             		jsr	(CalcAngle).l
0001D896 4EB9 0000 33DA             		jsr	(CalcSine).l
0001D89C C3FC F900                  		muls.w	#-$700,d1
0001D8A0 E081                       		asr.l	#8,d1
0001D8A2 3141 0010                  		move.w	d1,$10(a0)
0001D8A6 C1FC F900                  		muls.w	#-$700,d0
0001D8AA E080                       		asr.l	#8,d0
0001D8AC 3140 0012                  		move.w	d0,$12(a0)
0001D8B0 08E8 0001 0022             		bset	#1,$22(a0)
0001D8B6 6100 F5B0                  		bsr.w	SS_RemoveCollectedItem
0001D8BA 6600                       		bne.s	Obj09_BumpSnd
0001D8BC 14BC 0002                  		move.b	#2,(a2)
0001D8C0 2028 0032                  		move.l	$32(a0),d0
0001D8C4 5380                       		subq.l	#1,d0
0001D8C6 2540 0004                  		move.l	d0,4(a2)
0001D8CA                            
0001D8CA                            Obj09_BumpSnd:
0001D8CA 303C 00B4                  		move.w	#$B4,d0
0001D8CE 4EF9 0000 147C             		jmp	(PlaySound_Special).l ;	play bumper sound
0001D8D4                            ; ===========================================================================
0001D8D4                            
0001D8D4                            Obj09_GOAL:
0001D8D4 0C00 0027                  		cmpi.b	#$27,d0		; is the item a	"GOAL"?
0001D8D8 6600                       		bne.s	Obj09_UPblock
0001D8DA 5428 0024                  		addq.b	#2,$24(a0)	; run routine "Obj09_ExitStage"
0001D8DE 303C 00A8                  		move.w	#$A8,d0		; change item
0001D8E2 4EB9 0000 147C             		jsr	(PlaySound_Special).l ;	play "GOAL" sound
0001D8E8 4E75                       		rts	
0001D8EA                            ; ===========================================================================
0001D8EA                            
0001D8EA                            Obj09_UPblock:
0001D8EA 0C00 0029                  		cmpi.b	#$29,d0		; is the item an "UP" block?
0001D8EE 6600                       		bne.s	Obj09_DOWNblock
0001D8F0 4A28 0036                  		tst.b	$36(a0)
0001D8F4 6600 0000                  		bne.w	Obj09_NoGlass
0001D8F8 117C 001E 0036             		move.b	#$1E,$36(a0)
0001D8FE 0838 0006 F783             		btst	#6,($FFFFF783).w
0001D904 6700                       		beq.s	Obj09_UPsnd
0001D906 E1F8 F782                  		asl	($FFFFF782).w	; increase stage rotation speed
0001D90A 2268 0032                  		movea.l	$32(a0),a1
0001D90E 5389                       		subq.l	#1,a1
0001D910 12BC 002A                  		move.b	#$2A,(a1)	; change item to a "DOWN" block
0001D914                            
0001D914                            Obj09_UPsnd:
0001D914 303C 00A9                  		move.w	#$A9,d0
0001D918 4EF9 0000 147C             		jmp	(PlaySound_Special).l ;	play up/down sound
0001D91E                            ; ===========================================================================
0001D91E                            
0001D91E                            Obj09_DOWNblock:
0001D91E 0C00 002A                  		cmpi.b	#$2A,d0		; is the item a	"DOWN" block?
0001D922 6600                       		bne.s	Obj09_Rblock
0001D924 4A28 0036                  		tst.b	$36(a0)
0001D928 6600 0000                  		bne.w	Obj09_NoGlass
0001D92C 117C 001E 0036             		move.b	#$1E,$36(a0)
0001D932 0838 0006 F783             		btst	#6,($FFFFF783).w
0001D938 6600                       		bne.s	Obj09_DOWNsnd
0001D93A E0F8 F782                  		asr	($FFFFF782).w	; reduce stage rotation	speed
0001D93E 2268 0032                  		movea.l	$32(a0),a1
0001D942 5389                       		subq.l	#1,a1
0001D944 12BC 0029                  		move.b	#$29,(a1)	; change item to an "UP" block
0001D948                            
0001D948                            Obj09_DOWNsnd:
0001D948 303C 00A9                  		move.w	#$A9,d0
0001D94C 4EF9 0000 147C             		jmp	(PlaySound_Special).l ;	play up/down sound
0001D952                            ; ===========================================================================
0001D952                            
0001D952                            Obj09_Rblock:
0001D952 0C00 002B                  		cmpi.b	#$2B,d0		; is the item an "R" block?
0001D956 6600                       		bne.s	Obj09_ChkGlass
0001D958 4A28 0037                  		tst.b	$37(a0)
0001D95C 6600 0000                  		bne.w	Obj09_NoGlass
0001D960 117C 001E 0037             		move.b	#$1E,$37(a0)
0001D966 6100 F500                  		bsr.w	SS_RemoveCollectedItem
0001D96A 6600                       		bne.s	Obj09_RevStage
0001D96C 14BC 0004                  		move.b	#4,(a2)
0001D970 2028 0032                  		move.l	$32(a0),d0
0001D974 5380                       		subq.l	#1,d0
0001D976 2540 0004                  		move.l	d0,4(a2)
0001D97A                            
0001D97A                            Obj09_RevStage:
0001D97A 4478 F782                  		neg.w	($FFFFF782).w	; reverse stage	rotation
0001D97E 303C 00A9                  		move.w	#$A9,d0
0001D982 4EF9 0000 147C             		jmp	(PlaySound_Special).l ;	play sound
0001D988                            ; ===========================================================================
0001D988                            
0001D988                            Obj09_ChkGlass:
0001D988 0C00 002D                  		cmpi.b	#$2D,d0		; is the item a	glass block?
0001D98C 6700                       		beq.s	Obj09_Glass	; if yes, branch
0001D98E 0C00 002E                  		cmpi.b	#$2E,d0
0001D992 6700                       		beq.s	Obj09_Glass
0001D994 0C00 002F                  		cmpi.b	#$2F,d0
0001D998 6700                       		beq.s	Obj09_Glass
0001D99A 0C00 0030                  		cmpi.b	#$30,d0
0001D99E 6600                       		bne.s	Obj09_NoGlass	; if not, branch
0001D9A0                            
0001D9A0                            Obj09_Glass:
0001D9A0 6100 F4C6                  		bsr.w	SS_RemoveCollectedItem
0001D9A4 6600                       		bne.s	Obj09_GlassSnd
0001D9A6 14BC 0006                  		move.b	#6,(a2)
0001D9AA 2268 0032                  		movea.l	$32(a0),a1
0001D9AE 5389                       		subq.l	#1,a1
0001D9B0 2549 0004                  		move.l	a1,4(a2)
0001D9B4 1011                       		move.b	(a1),d0
0001D9B6 5200                       		addq.b	#1,d0		; change glass type when touched
0001D9B8 0C00 0030                  		cmpi.b	#$30,d0
0001D9BC 6300                       		bls.s	Obj09_GlassUpdate ; if glass is	still there, branch
0001D9BE 4200                       		clr.b	d0		; remove the glass block when it's destroyed
0001D9C0                            
0001D9C0                            Obj09_GlassUpdate:
0001D9C0 1540 0004                  		move.b	d0,4(a2)	; update the stage layout
0001D9C4                            
0001D9C4                            Obj09_GlassSnd:
0001D9C4 303C 00BA                  		move.w	#$BA,d0
0001D9C8 4EF9 0000 147C             		jmp	(PlaySound_Special).l ;	play glass block sound
0001D9CE                            ; ===========================================================================
0001D9CE                            
0001D9CE                            Obj09_NoGlass:
0001D9CE 4E75                       		rts	
0001D9D0                            ; End of function Obj09_ChkItems2
0001D9D0                            
0001D9D0                            ; ===========================================================================
0001D9D0                            ; ---------------------------------------------------------------------------
0001D9D0                            ; Object 10 - blank
0001D9D0                            ; ---------------------------------------------------------------------------
0001D9D0                            
0001D9D0                            Obj10:					; XREF: Obj_Index
0001D9D0 4E75                       		rts	
0001D9D2                            ; ---------------------------------------------------------------------------
0001D9D2                            ; Subroutine to	animate	level graphics
0001D9D2                            ; ---------------------------------------------------------------------------
0001D9D2                            
0001D9D2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D9D2                            
0001D9D2                            
0001D9D2                            AniArt_Load:				; XREF: Demo_Time; loc_F54
0001D9D2 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
0001D9D6 6600                       		bne.s	AniArt_Pause	; if yes, branch
0001D9D8 4DF9 00C0 0000             		lea	($C00000).l,a6
0001D9DE 6100 0000                  		bsr.w	AniArt_GiantRing
0001D9E2 7000                       		moveq	#0,d0
0001D9E4 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001D9E8 D040                       		add.w	d0,d0
0001D9EA 303B 0000                  		move.w	AniArt_Index(pc,d0.w),d0
0001D9EE 4EFB 0000                  		jmp	AniArt_Index(pc,d0.w)
0001D9F2                            ; ===========================================================================
0001D9F2                            
0001D9F2                            AniArt_Pause:
0001D9F2 4E75                       		rts	
0001D9F4                            ; End of function AniArt_Load
0001D9F4                            
0001D9F4                            ; ===========================================================================
0001D9F4 0000 0000                  AniArt_Index:	dc.w AniArt_GHZ-AniArt_Index, AniArt_none-AniArt_Index
0001D9F8 0000 0000                  		dc.w AniArt_MZ-AniArt_Index, AniArt_none-AniArt_Index
0001D9FC 0000 0000                  		dc.w AniArt_none-AniArt_Index, AniArt_SBZ-AniArt_Index
0001DA00 0000                       		dc.w AniArt_Ending-AniArt_Index
0001DA02                            ; ===========================================================================
0001DA02                            ; ---------------------------------------------------------------------------
0001DA02                            ; Animated pattern routine - Green Hill
0001DA02                            ; ---------------------------------------------------------------------------
0001DA02                            
0001DA02                            AniArt_GHZ:				; XREF: AniArt_Index
0001DA02 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001DA06 6A00                       		bpl.s	loc_1C08A
0001DA08 11FC 0005 F7B1             		move.b	#5,($FFFFF7B1).w ; time	to display each	frame for
0001DA0E 43F9 0000 0000             		lea	(Art_GhzWater).l,a1 ; load waterfall patterns
0001DA14 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001DA18 5238 F7B0                  		addq.b	#1,($FFFFF7B0).w
0001DA1C 0240 0001                  		andi.w	#1,d0
0001DA20 6700                       		beq.s	loc_1C078
0001DA22 43E9 0100                  		lea	$100(a1),a1	; load next frame
0001DA26                            
0001DA26                            loc_1C078:
0001DA26 23FC 6F00 0001 00C0 0004   		move.l	#$6F000001,($C00004).l ; VRAM address
0001DA30 323C 0007                  		move.w	#7,d1		; number of 8x8	tiles
0001DA34 6000 0000                  		bra.w	LoadTiles
0001DA38                            ; ===========================================================================
0001DA38                            
0001DA38                            loc_1C08A:
0001DA38 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001DA3C 6A00                       		bpl.s	loc_1C0C0
0001DA3E 11FC 000F F7B3             		move.b	#$F,($FFFFF7B3).w
0001DA44 43F9 0000 0000             		lea	(Art_GhzFlower1).l,a1 ;	load big flower	patterns
0001DA4A 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001DA4E 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001DA52 0240 0001                  		andi.w	#1,d0
0001DA56 6700                       		beq.s	loc_1C0AE
0001DA58 43E9 0200                  		lea	$200(a1),a1
0001DA5C                            
0001DA5C                            loc_1C0AE:
0001DA5C 23FC 6B80 0001 00C0 0004   		move.l	#$6B800001,($C00004).l
0001DA66 323C 000F                  		move.w	#$F,d1
0001DA6A 6000 0000                  		bra.w	LoadTiles
0001DA6E                            ; ===========================================================================
0001DA6E                            
0001DA6E                            loc_1C0C0:
0001DA6E 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001DA72 6A00                       		bpl.s	locret_1C10C
0001DA74 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001DA7A 1038 F7B4                  		move.b	($FFFFF7B4).w,d0
0001DA7E 5238 F7B4                  		addq.b	#1,($FFFFF7B4).w
0001DA82 0240 0003                  		andi.w	#3,d0
0001DA86 103B 0000                  		move.b	byte_1C10E(pc,d0.w),d0
0001DA8A 0800 0000                  		btst	#0,d0
0001DA8E 6600                       		bne.s	loc_1C0E8
0001DA90 11FC 007F F7B5             		move.b	#$7F,($FFFFF7B5).w
0001DA96                            
0001DA96                            loc_1C0E8:
0001DA96 EF48                       		lsl.w	#7,d0
0001DA98 3200                       		move.w	d0,d1
0001DA9A D040                       		add.w	d0,d0
0001DA9C D041                       		add.w	d1,d0
0001DA9E 23FC 6D80 0001 00C0 0004   		move.l	#$6D800001,($C00004).l
0001DAA8 43F9 0000 0000             		lea	(Art_GhzFlower2).l,a1 ;	load small flower patterns
0001DAAE 43F1 0000                  		lea	(a1,d0.w),a1
0001DAB2 323C 000B                  		move.w	#$B,d1
0001DAB6 6100 0000                  		bsr.w	LoadTiles
0001DABA                            
0001DABA                            locret_1C10C:
0001DABA 4E75                       		rts	
0001DABC                            ; ===========================================================================
0001DABC 0001 0201                  byte_1C10E:	dc.b 0,	1, 2, 1
0001DAC0                            ; ===========================================================================
0001DAC0                            ; ---------------------------------------------------------------------------
0001DAC0                            ; Animated pattern routine - Marble
0001DAC0                            ; ---------------------------------------------------------------------------
0001DAC0                            
0001DAC0                            AniArt_MZ:				; XREF: AniArt_Index
0001DAC0 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001DAC4 6A00                       		bpl.s	loc_1C150
0001DAC6 11FC 0013 F7B1             		move.b	#$13,($FFFFF7B1).w
0001DACC 43F9 0000 0000             		lea	(Art_MzLava1).l,a1 ; load lava surface patterns
0001DAD2 7000                       		moveq	#0,d0
0001DAD4 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001DAD8 5200                       		addq.b	#1,d0
0001DADA 0C00 0003                  		cmpi.b	#3,d0
0001DADE 6600                       		bne.s	loc_1C134
0001DAE0 7000                       		moveq	#0,d0
0001DAE2                            
0001DAE2                            loc_1C134:
0001DAE2 11C0 F7B0                  		move.b	d0,($FFFFF7B0).w
0001DAE6 C0FC 0100                  		mulu.w	#$100,d0
0001DAEA D2C0                       		adda.w	d0,a1
0001DAEC 23FC 5C40 0001 00C0 0004   		move.l	#$5C400001,($C00004).l
0001DAF6 323C 0007                  		move.w	#7,d1
0001DAFA 6100 0000                  		bsr.w	LoadTiles
0001DAFE                            
0001DAFE                            loc_1C150:
0001DAFE 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001DB02 6A00                       		bpl.s	loc_1C1AE
0001DB04 11FC 0001 F7B3             		move.b	#1,($FFFFF7B3).w
0001DB0A 7000                       		moveq	#0,d0
0001DB0C 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001DB10 49F9 0000 0000             		lea	(Art_MzLava2).l,a4 ; load lava patterns
0001DB16 EE58                       		ror.w	#7,d0
0001DB18 D8C0                       		adda.w	d0,a4
0001DB1A 23FC 5A40 0001 00C0 0004   		move.l	#$5A400001,($C00004).l
0001DB24 7600                       		moveq	#0,d3
0001DB26 1638 F7B2                  		move.b	($FFFFF7B2).w,d3
0001DB2A 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001DB2E 1638 FE68                  		move.b	($FFFFFE68).w,d3
0001DB32 343C 0003                  		move.w	#3,d2
0001DB36                            
0001DB36                            loc_1C188:
0001DB36 3003                       		move.w	d3,d0
0001DB38 D040                       		add.w	d0,d0
0001DB3A 0240 001E                  		andi.w	#$1E,d0
0001DB3E 47F9 0000 0000             		lea	(AniArt_MZextra).l,a3
0001DB44 3033 0000                  		move.w	(a3,d0.w),d0
0001DB48 47F3 0000                  		lea	(a3,d0.w),a3
0001DB4C 224C                       		movea.l	a4,a1
0001DB4E 323C 001F                  		move.w	#$1F,d1
0001DB52 4E93                       		jsr	(a3)
0001DB54 5843                       		addq.w	#4,d3
0001DB56 51CA FFDE                  		dbf	d2,loc_1C188
0001DB5A 4E75                       		rts	
0001DB5C                            ; ===========================================================================
0001DB5C                            
0001DB5C                            loc_1C1AE:
0001DB5C 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001DB60 6A00 0000                  		bpl.w	locret_1C1EA
0001DB64 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001DB6A 43F9 0000 0000             		lea	(Art_MzTorch).l,a1 ; load torch	patterns
0001DB70 7000                       		moveq	#0,d0
0001DB72 1038 F7B6                  		move.b	($FFFFF7B6).w,d0
0001DB76 5238 F7B6                  		addq.b	#1,($FFFFF7B6).w
0001DB7A 0238 0003 F7B6             		andi.b	#3,($FFFFF7B6).w
0001DB80 C0FC 00C0                  		mulu.w	#$C0,d0
0001DB84 D2C0                       		adda.w	d0,a1
0001DB86 23FC 5E40 0001 00C0 0004   		move.l	#$5E400001,($C00004).l
0001DB90 323C 0005                  		move.w	#5,d1
0001DB94 6000 0000                  		bra.w	LoadTiles
0001DB98                            ; ===========================================================================
0001DB98                            
0001DB98                            locret_1C1EA:
0001DB98 4E75                       		rts	
0001DB9A                            ; ===========================================================================
0001DB9A                            ; ---------------------------------------------------------------------------
0001DB9A                            ; Animated pattern routine - Scrap Brain
0001DB9A                            ; ---------------------------------------------------------------------------
0001DB9A                            
0001DB9A                            AniArt_SBZ:				; XREF: AniArt_Index
0001DB9A 4A38 F7B4                  		tst.b	($FFFFF7B4).w
0001DB9E 6700                       		beq.s	loc_1C1F8
0001DBA0 5338 F7B4                  		subq.b	#1,($FFFFF7B4).w
0001DBA4 6000                       		bra.s	loc_1C250
0001DBA6                            ; ===========================================================================
0001DBA6                            
0001DBA6                            loc_1C1F8:
0001DBA6 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001DBAA 6A00                       		bpl.s	loc_1C250
0001DBAC 11FC 0007 F7B1             		move.b	#7,($FFFFF7B1).w
0001DBB2 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1 ; load smoke patterns
0001DBB8 23FC 4900 0002 00C0 0004   		move.l	#$49000002,($C00004).l
0001DBC2 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001DBC6 5238 F7B0                  		addq.b	#1,($FFFFF7B0).w
0001DBCA 0240 0007                  		andi.w	#7,d0
0001DBCE 6700                       		beq.s	loc_1C234
0001DBD0 5340                       		subq.w	#1,d0
0001DBD2 C0FC 0180                  		mulu.w	#$180,d0
0001DBD6 43F1 0000                  		lea	(a1,d0.w),a1
0001DBDA 323C 000B                  		move.w	#$B,d1
0001DBDE 6000 0000                  		bra.w	LoadTiles
0001DBE2                            ; ===========================================================================
0001DBE2                            
0001DBE2                            loc_1C234:
0001DBE2 11FC 00B4 F7B4             		move.b	#$B4,($FFFFF7B4).w
0001DBE8                            
0001DBE8                            loc_1C23A:
0001DBE8 323C 0005                  		move.w	#5,d1
0001DBEC 6100 0000                  		bsr.w	LoadTiles
0001DBF0 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1
0001DBF6 323C 0005                  		move.w	#5,d1
0001DBFA 6000 0000                  		bra.w	LoadTiles
0001DBFE                            ; ===========================================================================
0001DBFE                            
0001DBFE                            loc_1C250:
0001DBFE 4A38 F7B5                  		tst.b	($FFFFF7B5).w
0001DC02 6700                       		beq.s	loc_1C25C
0001DC04 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001DC08 6000                       		bra.s	locret_1C2A0
0001DC0A                            ; ===========================================================================
0001DC0A                            
0001DC0A                            loc_1C25C:
0001DC0A 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001DC0E 6A00                       		bpl.s	locret_1C2A0
0001DC10 11FC 0007 F7B3             		move.b	#7,($FFFFF7B3).w
0001DC16 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1
0001DC1C 23FC 4A80 0002 00C0 0004   		move.l	#$4A800002,($C00004).l
0001DC26 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001DC2A 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001DC2E 0240 0007                  		andi.w	#7,d0
0001DC32 6700                       		beq.s	loc_1C298
0001DC34 5340                       		subq.w	#1,d0
0001DC36 C0FC 0180                  		mulu.w	#$180,d0
0001DC3A 43F1 0000                  		lea	(a1,d0.w),a1
0001DC3E 323C 000B                  		move.w	#$B,d1
0001DC42 6000 0000                  		bra.w	LoadTiles
0001DC46                            ; ===========================================================================
0001DC46                            
0001DC46                            loc_1C298:
0001DC46 11FC 0078 F7B5             		move.b	#$78,($FFFFF7B5).w
0001DC4C 609A                       		bra.s	loc_1C23A
0001DC4E                            ; ===========================================================================
0001DC4E                            
0001DC4E                            locret_1C2A0:
0001DC4E 4E75                       		rts	
0001DC50                            ; ===========================================================================
0001DC50                            ; ---------------------------------------------------------------------------
0001DC50                            ; Animated pattern routine - ending sequence
0001DC50                            ; ---------------------------------------------------------------------------
0001DC50                            
0001DC50                            AniArt_Ending:				; XREF: AniArt_Index
0001DC50 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001DC54 6A00                       		bpl.s	loc_1C2F4
0001DC56 11FC 0007 F7B3             		move.b	#7,($FFFFF7B3).w
0001DC5C 43F9 0000 0000             		lea	(Art_GhzFlower1).l,a1 ;	load big flower	patterns
0001DC62 45F8 9400                  		lea	($FFFF9400).w,a2
0001DC66 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001DC6A 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001DC6E 0240 0001                  		andi.w	#1,d0
0001DC72 6700                       		beq.s	loc_1C2CE
0001DC74 43E9 0200                  		lea	$200(a1),a1
0001DC78 45EA 0200                  		lea	$200(a2),a2
0001DC7C                            
0001DC7C                            loc_1C2CE:
0001DC7C 23FC 6B80 0001 00C0 0004   		move.l	#$6B800001,($C00004).l
0001DC86 323C 000F                  		move.w	#$F,d1
0001DC8A 6100 0000                  		bsr.w	LoadTiles
0001DC8E 224A                       		movea.l	a2,a1
0001DC90 23FC 7200 0001 00C0 0004   		move.l	#$72000001,($C00004).l
0001DC9A 323C 000F                  		move.w	#$F,d1
0001DC9E 6000 0000                  		bra.w	LoadTiles
0001DCA2                            ; ===========================================================================
0001DCA2                            
0001DCA2                            loc_1C2F4:
0001DCA2 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001DCA6 6A00                       		bpl.s	loc_1C33C
0001DCA8 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001DCAE 1038 F7B4                  		move.b	($FFFFF7B4).w,d0
0001DCB2 5238 F7B4                  		addq.b	#1,($FFFFF7B4).w
0001DCB6 0240 0007                  		andi.w	#7,d0
0001DCBA 103B 0000                  		move.b	byte_1C334(pc,d0.w),d0
0001DCBE EF48                       		lsl.w	#7,d0
0001DCC0 3200                       		move.w	d0,d1
0001DCC2 D040                       		add.w	d0,d0
0001DCC4 D041                       		add.w	d1,d0
0001DCC6 23FC 6D80 0001 00C0 0004   		move.l	#$6D800001,($C00004).l
0001DCD0 43F9 0000 0000             		lea	(Art_GhzFlower2).l,a1 ;	load small flower patterns
0001DCD6 43F1 0000                  		lea	(a1,d0.w),a1
0001DCDA 323C 000B                  		move.w	#$B,d1
0001DCDE 6000 0000                  		bra.w	LoadTiles
0001DCE2                            ; ===========================================================================
0001DCE2 0000 0001 0202 0201        byte_1C334:	dc.b 0,	0, 0, 1, 2, 2, 2, 1
0001DCEA                            ; ===========================================================================
0001DCEA                            
0001DCEA                            loc_1C33C:
0001DCEA 5338 F7B9                  		subq.b	#1,($FFFFF7B9).w
0001DCEE 6A00                       		bpl.s	loc_1C37A
0001DCF0 11FC 000E F7B9             		move.b	#$E,($FFFFF7B9).w
0001DCF6 1038 F7B8                  		move.b	($FFFFF7B8).w,d0
0001DCFA 5238 F7B8                  		addq.b	#1,($FFFFF7B8).w
0001DCFE 0240 0003                  		andi.w	#3,d0
0001DD02 103B 0000                  		move.b	byte_1C376(pc,d0.w),d0
0001DD06 E148                       		lsl.w	#8,d0
0001DD08 D040                       		add.w	d0,d0
0001DD0A 23FC 7000 0001 00C0 0004   		move.l	#$70000001,($C00004).l
0001DD14 43F8 9800                  		lea	($FFFF9800).w,a1 ; load	special	flower patterns	(from RAM)
0001DD18 43F1 0000                  		lea	(a1,d0.w),a1
0001DD1C 323C 000F                  		move.w	#$F,d1
0001DD20 6000 0000                  		bra.w	LoadTiles
0001DD24                            ; ===========================================================================
0001DD24 0001 0201                  byte_1C376:	dc.b 0,	1, 2, 1
0001DD28                            ; ===========================================================================
0001DD28                            
0001DD28                            loc_1C37A:
0001DD28 5338 F7BB                  		subq.b	#1,($FFFFF7BB).w
0001DD2C 6A00                       		bpl.s	locret_1C3B4
0001DD2E 11FC 000B F7BB             		move.b	#$B,($FFFFF7BB).w
0001DD34 1038 F7BA                  		move.b	($FFFFF7BA).w,d0
0001DD38 5238 F7BA                  		addq.b	#1,($FFFFF7BA).w
0001DD3C 0240 0003                  		andi.w	#3,d0
0001DD40 103B 00E2                  		move.b	byte_1C376(pc,d0.w),d0
0001DD44 E148                       		lsl.w	#8,d0
0001DD46 D040                       		add.w	d0,d0
0001DD48 23FC 6800 0001 00C0 0004   		move.l	#$68000001,($C00004).l
0001DD52 43F8 9E00                  		lea	($FFFF9E00).w,a1 ; load	special	flower patterns	(from RAM)
0001DD56 43F1 0000                  		lea	(a1,d0.w),a1
0001DD5A 323C 000F                  		move.w	#$F,d1
0001DD5E 6000 0000                  		bra.w	LoadTiles
0001DD62                            ; ===========================================================================
0001DD62                            
0001DD62                            locret_1C3B4:
0001DD62 4E75                       		rts	
0001DD64                            ; ===========================================================================
0001DD64                            
0001DD64                            AniArt_none:				; XREF: AniArt_Index
0001DD64 4E75                       		rts	
0001DD66                            
0001DD66                            ; ---------------------------------------------------------------------------
0001DD66                            ; Subroutine to	load (d1 - 1) 8x8 tiles
0001DD66                            ; ---------------------------------------------------------------------------
0001DD66                            
0001DD66                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DD66                            
0001DD66                            
0001DD66                            LoadTiles:
0001DD66 2C99                       		move.l	(a1)+,(a6)
0001DD68 2C99                       		move.l	(a1)+,(a6)
0001DD6A 2C99                       		move.l	(a1)+,(a6)
0001DD6C 2C99                       		move.l	(a1)+,(a6)
0001DD6E 2C99                       		move.l	(a1)+,(a6)
0001DD70 2C99                       		move.l	(a1)+,(a6)
0001DD72 2C99                       		move.l	(a1)+,(a6)
0001DD74 2C99                       		move.l	(a1)+,(a6)
0001DD76 51C9 FFEE                  		dbf	d1,LoadTiles
0001DD7A 4E75                       		rts	
0001DD7C                            ; End of function LoadTiles
0001DD7C                            
0001DD7C                            ; ===========================================================================
0001DD7C                            ; ---------------------------------------------------------------------------
0001DD7C                            ; Animated pattern routine - more Marble Zone
0001DD7C                            ; ---------------------------------------------------------------------------
0001DD7C 0000 0000                  AniArt_MZextra:	dc.w loc_1C3EE-AniArt_MZextra, loc_1C3FA-AniArt_MZextra
0001DD80 0000 0000                  		dc.w loc_1C410-AniArt_MZextra, loc_1C41E-AniArt_MZextra
0001DD84 0000 0000                  		dc.w loc_1C434-AniArt_MZextra, loc_1C442-AniArt_MZextra
0001DD88 0000 0000                  		dc.w loc_1C458-AniArt_MZextra, loc_1C466-AniArt_MZextra
0001DD8C 0000 0000                  		dc.w loc_1C47C-AniArt_MZextra, loc_1C48A-AniArt_MZextra
0001DD90 0000 0000                  		dc.w loc_1C4A0-AniArt_MZextra, loc_1C4AE-AniArt_MZextra
0001DD94 0000 0000                  		dc.w loc_1C4C4-AniArt_MZextra, loc_1C4D2-AniArt_MZextra
0001DD98 0000 0000                  		dc.w loc_1C4E8-AniArt_MZextra, loc_1C4FA-AniArt_MZextra
0001DD9C                            ; ===========================================================================
0001DD9C                            
0001DD9C                            loc_1C3EE:				; XREF: AniArt_MZextra
0001DD9C 2C91                       		move.l	(a1),(a6)
0001DD9E 43E9 0010                  		lea	$10(a1),a1
0001DDA2 51C9 FFF8                  		dbf	d1,loc_1C3EE
0001DDA6 4E75                       		rts	
0001DDA8                            ; ===========================================================================
0001DDA8                            
0001DDA8                            loc_1C3FA:				; XREF: AniArt_MZextra
0001DDA8 2029 0002                  		move.l	2(a1),d0
0001DDAC 1029 0001                  		move.b	1(a1),d0
0001DDB0 E098                       		ror.l	#8,d0
0001DDB2 2C80                       		move.l	d0,(a6)
0001DDB4 43E9 0010                  		lea	$10(a1),a1
0001DDB8 51C9 FFEE                  		dbf	d1,loc_1C3FA
0001DDBC 4E75                       		rts	
0001DDBE                            ; ===========================================================================
0001DDBE                            
0001DDBE                            loc_1C410:				; XREF: AniArt_MZextra
0001DDBE 2CA9 0002                  		move.l	2(a1),(a6)
0001DDC2 43E9 0010                  		lea	$10(a1),a1
0001DDC6 51C9 FFF6                  		dbf	d1,loc_1C410
0001DDCA 4E75                       		rts	
0001DDCC                            ; ===========================================================================
0001DDCC                            
0001DDCC                            loc_1C41E:				; XREF: AniArt_MZextra
0001DDCC 2029 0004                  		move.l	4(a1),d0
0001DDD0 1029 0003                  		move.b	3(a1),d0
0001DDD4 E098                       		ror.l	#8,d0
0001DDD6 2C80                       		move.l	d0,(a6)
0001DDD8 43E9 0010                  		lea	$10(a1),a1
0001DDDC 51C9 FFEE                  		dbf	d1,loc_1C41E
0001DDE0 4E75                       		rts	
0001DDE2                            ; ===========================================================================
0001DDE2                            
0001DDE2                            loc_1C434:				; XREF: AniArt_MZextra
0001DDE2 2CA9 0004                  		move.l	4(a1),(a6)
0001DDE6 43E9 0010                  		lea	$10(a1),a1
0001DDEA 51C9 FFF6                  		dbf	d1,loc_1C434
0001DDEE 4E75                       		rts	
0001DDF0                            ; ===========================================================================
0001DDF0                            
0001DDF0                            loc_1C442:				; XREF: AniArt_MZextra
0001DDF0 2029 0006                  		move.l	6(a1),d0
0001DDF4 1029 0005                  		move.b	5(a1),d0
0001DDF8 E098                       		ror.l	#8,d0
0001DDFA 2C80                       		move.l	d0,(a6)
0001DDFC 43E9 0010                  		lea	$10(a1),a1
0001DE00 51C9 FFEE                  		dbf	d1,loc_1C442
0001DE04 4E75                       		rts	
0001DE06                            ; ===========================================================================
0001DE06                            
0001DE06                            loc_1C458:				; XREF: AniArt_MZextra
0001DE06 2CA9 0006                  		move.l	6(a1),(a6)
0001DE0A 43E9 0010                  		lea	$10(a1),a1
0001DE0E 51C9 FFF6                  		dbf	d1,loc_1C458
0001DE12 4E75                       		rts	
0001DE14                            ; ===========================================================================
0001DE14                            
0001DE14                            loc_1C466:				; XREF: AniArt_MZextra
0001DE14 2029 0008                  		move.l	8(a1),d0
0001DE18 1029 0007                  		move.b	7(a1),d0
0001DE1C E098                       		ror.l	#8,d0
0001DE1E 2C80                       		move.l	d0,(a6)
0001DE20 43E9 0010                  		lea	$10(a1),a1
0001DE24 51C9 FFEE                  		dbf	d1,loc_1C466
0001DE28 4E75                       		rts	
0001DE2A                            ; ===========================================================================
0001DE2A                            
0001DE2A                            loc_1C47C:				; XREF: AniArt_MZextra
0001DE2A 2CA9 0008                  		move.l	8(a1),(a6)
0001DE2E 43E9 0010                  		lea	$10(a1),a1
0001DE32 51C9 FFF6                  		dbf	d1,loc_1C47C
0001DE36 4E75                       		rts	
0001DE38                            ; ===========================================================================
0001DE38                            
0001DE38                            loc_1C48A:				; XREF: AniArt_MZextra
0001DE38 2029 000A                  		move.l	$A(a1),d0
0001DE3C 1029 0009                  		move.b	9(a1),d0
0001DE40 E098                       		ror.l	#8,d0
0001DE42 2C80                       		move.l	d0,(a6)
0001DE44 43E9 0010                  		lea	$10(a1),a1
0001DE48 51C9 FFEE                  		dbf	d1,loc_1C48A
0001DE4C 4E75                       		rts	
0001DE4E                            ; ===========================================================================
0001DE4E                            
0001DE4E                            loc_1C4A0:				; XREF: AniArt_MZextra
0001DE4E 2CA9 000A                  		move.l	$A(a1),(a6)
0001DE52 43E9 0010                  		lea	$10(a1),a1
0001DE56 51C9 FFF6                  		dbf	d1,loc_1C4A0
0001DE5A 4E75                       		rts	
0001DE5C                            ; ===========================================================================
0001DE5C                            
0001DE5C                            loc_1C4AE:				; XREF: AniArt_MZextra
0001DE5C 2029 000C                  		move.l	$C(a1),d0
0001DE60 1029 000B                  		move.b	$B(a1),d0
0001DE64 E098                       		ror.l	#8,d0
0001DE66 2C80                       		move.l	d0,(a6)
0001DE68 43E9 0010                  		lea	$10(a1),a1
0001DE6C 51C9 FFEE                  		dbf	d1,loc_1C4AE
0001DE70 4E75                       		rts	
0001DE72                            ; ===========================================================================
0001DE72                            
0001DE72                            loc_1C4C4:				; XREF: AniArt_MZextra
0001DE72 2CA9 000C                  		move.l	$C(a1),(a6)
0001DE76 43E9 0010                  		lea	$10(a1),a1
0001DE7A 51C9 FFF6                  		dbf	d1,loc_1C4C4
0001DE7E 4E75                       		rts	
0001DE80                            ; ===========================================================================
0001DE80                            
0001DE80                            loc_1C4D2:				; XREF: AniArt_MZextra
0001DE80 2029 000C                  		move.l	$C(a1),d0
0001DE84 E198                       		rol.l	#8,d0
0001DE86 1011                       		move.b	0(a1),d0
0001DE88 2C80                       		move.l	d0,(a6)
0001DE8A 43E9 0010                  		lea	$10(a1),a1
0001DE8E 51C9 FFF0                  		dbf	d1,loc_1C4D2
0001DE92 4E75                       		rts	
0001DE94                            ; ===========================================================================
0001DE94                            
0001DE94                            loc_1C4E8:				; XREF: AniArt_MZextra
0001DE94 3CA9 000E                  		move.w	$E(a1),(a6)
0001DE98 3C91                       		move.w	0(a1),(a6)
0001DE9A 43E9 0010                  		lea	$10(a1),a1
0001DE9E 51C9 FFF4                  		dbf	d1,loc_1C4E8
0001DEA2 4E75                       		rts	
0001DEA4                            ; ===========================================================================
0001DEA4                            
0001DEA4                            loc_1C4FA:				; XREF: AniArt_MZextra
0001DEA4 2011                       		move.l	0(a1),d0
0001DEA6 1029 000F                  		move.b	$F(a1),d0
0001DEAA E098                       		ror.l	#8,d0
0001DEAC 2C80                       		move.l	d0,(a6)
0001DEAE 43E9 0010                  		lea	$10(a1),a1
0001DEB2 51C9 FFF0                  		dbf	d1,loc_1C4FA
0001DEB6 4E75                       		rts	
0001DEB8                            
0001DEB8                            ; ---------------------------------------------------------------------------
0001DEB8                            ; Animated pattern routine - giant ring
0001DEB8                            ; ---------------------------------------------------------------------------
0001DEB8                            
0001DEB8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DEB8                            
0001DEB8                            
0001DEB8                            AniArt_GiantRing:			; XREF: AniArt_Load
0001DEB8 4A78 F7BE                  		tst.w	($FFFFF7BE).w
0001DEBC 6600                       		bne.s	loc_1C518
0001DEBE 4E75                       		rts
0001DEC0                            ; ===========================================================================
0001DEC0                            
0001DEC0                            loc_1C518:
0001DEC0 0478 01C0 F7BE             		subi.w	#$1C0,($FFFFF7BE).w
0001DEC6 43F9 0000 0000             		lea	(Art_BigRing).l,a1 ; load giant	ring patterns
0001DECC 7000                       		moveq	#0,d0
0001DECE 3038 F7BE                  		move.w	($FFFFF7BE).w,d0
0001DED2 43F1 0000                  		lea	(a1,d0.w),a1
0001DED6 0640 8000                  		addi.w	#$8000,d0
0001DEDA E588                       		lsl.l	#2,d0
0001DEDC E448                       		lsr.w	#2,d0
0001DEDE 0040 4000                  		ori.w	#$4000,d0
0001DEE2 4840                       		swap	d0
0001DEE4 2D40 0004                  		move.l	d0,4(a6)
0001DEE8 323C 000D                  		move.w	#$D,d1
0001DEEC 6000 FE78                  		bra.w	LoadTiles
0001DEF0                            ; End of function AniArt_GiantRing
0001DEF0                            
0001DEF0                            ; ===========================================================================
0001DEF0                            ; ---------------------------------------------------------------------------
0001DEF0                            ; Object 21 - SCORE, TIME, RINGS
0001DEF0                            ; ---------------------------------------------------------------------------
0001DEF0                            
0001DEF0                            Obj21:					; XREF: Obj_Index
0001DEF0 7000                       		moveq	#0,d0
0001DEF2 1028 0024                  		move.b	$24(a0),d0
0001DEF6 323B 0000                  		move.w	Obj21_Index(pc,d0.w),d1
0001DEFA 4EFB 1000                  		jmp	Obj21_Index(pc,d1.w)
0001DEFE                            ; ===========================================================================
0001DEFE 0000                       Obj21_Index:	dc.w Obj21_Main-Obj21_Index
0001DF00 0000                       		dc.w Obj21_Flash-Obj21_Index
0001DF02                            ; ===========================================================================
0001DF02                            
0001DF02                            Obj21_Main:				; XREF: Obj21_Main
0001DF02 5428 0024                  		addq.b	#2,$24(a0)
0001DF06 317C 0090 0008             		move.w	#$90,8(a0)
0001DF0C 317C 0108 000A             		move.w	#$108,$A(a0)
0001DF12 217C 0000 0000 0004        		move.l	#Map_obj21,4(a0)
0001DF1A 317C 06BA 0002                             move.w    #$6BA,2(a0)
0001DF20 117C 0000 0001             		move.b	#0,1(a0)
0001DF26 117C 0000 0018             		move.b	#0,$18(a0)
0001DF2C                            
0001DF2C                            Obj21_Flash:				; XREF: Obj21_Main
0001DF2C 7000                       		moveq	#0,d0
0001DF2E 0838 0003 FE05             		btst	#3,($FFFFFE05).w
0001DF34 6600                       		bne.s	Obj21_Display
0001DF36 4A78 FE20                  		tst.w	($FFFFFE20).w	; do you have any rings?
0001DF3A 6600                       		bne.s	Obj21_Flash2	; if not, branch
0001DF3C 5240                       		addq.w	#1,d0		; make ring counter flash red
0001DF3E                            ; ===========================================================================
0001DF3E                            
0001DF3E                            Obj21_Flash2:
0001DF3E 0C38 0009 FE23             		cmpi.b	#9,($FFFFFE23).w ; have	9 minutes elapsed?
0001DF44 6600                       		bne.s	Obj21_Display	; if not, branch
0001DF46 5440                       		addq.w	#2,d0		; make time counter flash red
0001DF48                            
0001DF48                            Obj21_Display:
0001DF48 1140 001A                  		move.b	d0,$1A(a0)
0001DF4C 4EF9 0000 E0E4             		jmp	DisplaySprite
0001DF52                            ; ===========================================================================
0001DF52                            ; ---------------------------------------------------------------------------
0001DF52                            ; Sprite mappings - SCORE, TIME, RINGS
0001DF52                            ; ---------------------------------------------------------------------------
0001DF52                            Map_obj21:
0001DF52                            	include "_maps\obj21.asm"
0001DF52                            ; ---------------------------------------------------------------------------
0001DF52                            ; Sprite mappings - SCORE, TIME, RINGS (CENTISECONDS)
0001DF52                            ; ---------------------------------------------------------------------------
0001DF52 0000 0000                  		dc.w byte_1C5BC-Map_obj21, byte_1C5F0-Map_obj21
0001DF56 0000 0000                  		dc.w byte_1C624-Map_obj21, byte_1C658-Map_obj21
0001DF5A 0B                         byte_1C5BC:	dc.b $B
0001DF5B 800D 8010 00               		dc.b $80, $D, $80, $10, 0	; SCOR
0001DF60 800D 8028 20               		dc.b $80, $D, $80, $28,	$20	; E nnn
0001DF65 800D 8030 40               		dc.b $80, $D, $80, $30,	$40	; nnnn
0001DF6A 900D 8020 00               		dc.b $90, $D, $80, $20,	0	; TIME
0001DF6F 900D 8038 28               		dc.b $90, $D, $80, $38,	$28	; n'nn
0001DF74 9009 8000 48               			dc.b $90, 9, $80, $0,	$48	; "nn
0001DF79 A00D 8018 00               		dc.b $A0, $D, $80, $18, 0	; RING
0001DF7E A001 8010 20               		dc.b $A0, 1, $80, $10, $20	; S
0001DF83 A009 8040 30               		dc.b $A0, 9, $80, $40, $30	; rings
0001DF88 4005 811A 00               		dc.b $40, 5, $81, $1A, 0	; icon
0001DF8D 400D 811E 10               		dc.b $40, $D, $81, $1E, $10	; SONIC x nn
0001DF92 00                         		dc.b 0
0001DF93 0B                         byte_1C5F0:	dc.b $B
0001DF94 800D 8010 00               		dc.b $80, $D, $80, $10, 0	; SCOR
0001DF99 800D 8028 20               		dc.b $80, $D, $80, $28,	$20	; E nnn
0001DF9E 800D 8030 40               		dc.b $80, $D, $80, $30,	$40	; nnnn
0001DFA3 900D 8020 00               		dc.b $90, $D, $80, $20,	0	; TIME
0001DFA8 900D 8038 28               		dc.b $90, $D, $80, $38,	$28	; n'nn
0001DFAD 9009 8000 48               			dc.b $90, 9, $80, $0,	$48	; "nn
0001DFB2 A00D A018 00               		dc.b $A0, $D, $A0, $18, 0	; RING
0001DFB7 A001 A010 20               		dc.b $A0, 1, $A0, $10, $20	; S
0001DFBC A009 8040 30               		dc.b $A0, 9, $80, $40, $30	; rings
0001DFC1 4005 811A 00               		dc.b $40, 5, $81, $1A, 0	; icon
0001DFC6 400D 811E 10               		dc.b $40, $D, $81, $1E, $10	; SONIC x nn
0001DFCB 00                         		dc.b 0
0001DFCC 0B                         byte_1C624:	dc.b $B
0001DFCD 800D 8010 00               		dc.b $80, $D, $80, $10, 0	; SCOR
0001DFD2 800D 8028 20               		dc.b $80, $D, $80, $28,	$20	; E nnn
0001DFD7 800D 8030 40               		dc.b $80, $D, $80, $30,	$40	; nnnn
0001DFDC 900D A020 00               		dc.b $90, $D, $A0, $20,	0	; TIME
0001DFE1 900D 8038 28               		dc.b $90, $D, $80, $38,	$28	; n'nn
0001DFE6 9009 8000 48               			dc.b $90, 9, $80, $0,	$48	; "nn
0001DFEB A00D 8018 00               		dc.b $A0, $D, $80, $18, 0	; RING
0001DFF0 A001 8010 20               		dc.b $A0, 1, $80, $10, $20	; S
0001DFF5 A009 8040 30               		dc.b $A0, 9, $80, $40, $30	; rings
0001DFFA 4005 811A 00               		dc.b $40, 5, $81, $1A, 0	; icon
0001DFFF 400D 811E 10               		dc.b $40, $D, $81, $1E, $10	; SONIC x nn
0001E004 00                         		dc.b 0
0001E005 0B                         byte_1C658:	dc.b $B
0001E006 800D 8010 00               		dc.b $80, $D, $80, $10, 0	; SCOR
0001E00B 800D 8028 20               		dc.b $80, $D, $80, $28,	$20	; E nnn
0001E010 800D 8030 40               		dc.b $80, $D, $80, $30,	$40	; nnnn
0001E015 900D A020 00               		dc.b $90, $D, $A0, $20,	0	; TIME
0001E01A 900D 8038 28               		dc.b $90, $D, $80, $38,	$28	; n'nn
0001E01F 9009 8000 48               			dc.b $90, 9, $80, $0,	$48	; "nn
0001E024 A00D A018 00               		dc.b $A0, $D, $A0, $18, 0	; RING
0001E029 A001 A010 20               		dc.b $A0, 1, $A0, $10, $20	; S
0001E02E A009 8040 30               		dc.b $A0, 9, $80, $40, $30	; rings
0001E033 4005 811A 00               		dc.b $40, 5, $81, $1A, 0	; icon
0001E038 400D 811E 10               		dc.b $40, $D, $81, $1E, $10	; SONIC x nn
0001E03E 00                         		even
0001E03E 00                         		even
0001E03E                            
0001E03E                            ; ---------------------------------------------------------------------------
0001E03E                            ; Add points subroutine
0001E03E                            ; ---------------------------------------------------------------------------
0001E03E                            
0001E03E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E03E                            
0001E03E                            
0001E03E                            AddPoints:
0001E03E 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; set score counter to	update
0001E044 45F8 FFC0                  		lea	($FFFFFFC0).w,a2
0001E048 47F8 FE26                  		lea	($FFFFFE26).w,a3
0001E04C D193                       		add.l	d0,(a3)		; add d0*10 to the score
0001E04E 223C 000F 423F             		move.l	#999999,d1
0001E054 B293                       		cmp.l	(a3),d1		; is #999999 higher than the score?
0001E056 6200 0000                  		bhi.w	loc_1C6AC	; if yes, branch
0001E05A 2681                       		move.l	d1,(a3)		; reset	score to #999999
0001E05C 2481                       		move.l	d1,(a2)
0001E05E                            
0001E05E                            loc_1C6AC:
0001E05E 2013                       		move.l	(a3),d0
0001E060 B092                       		cmp.l	(a2),d0
0001E062 6500 0000                  		bcs.w	locret_1C6B6
0001E066 2480                       		move.l	d0,(a2)
0001E068                            
0001E068                            locret_1C6B6:
0001E068 4E75                       		rts	
0001E06A                            ; End of function AddPoints
0001E06A                            
0001E06A                            ; ---------------------------------------------------------------------------
0001E06A                            ; Subroutine to	update the HUD
0001E06A                            ; ---------------------------------------------------------------------------
0001E06A                            
0001E06A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E06A                            
0001E06A                            
0001E06A                            HudUpdate:
0001E06A 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug mode	on?
0001E06E 6600 0000                  		bne.w	HudDebug	; if yes, branch
0001E072 4A38 FE1F                  		tst.b	($FFFFFE1F).w	; does the score need updating?
0001E076 6700                       		beq.s	Hud_ChkRings	; if not, branch
0001E078 4238 FE1F                  		clr.b	($FFFFFE1F).w
0001E07C 203C 5C80 0003             		move.l	#$5C800003,d0	; set VRAM address
0001E082 2238 FE26                  		move.l	($FFFFFE26).w,d1 ; load	score
0001E086 6100 0000                  		bsr.w	Hud_Score
0001E08A                            
0001E08A                            Hud_ChkRings:
0001E08A 4A38 FE1D                  		tst.b	($FFFFFE1D).w	; does the ring	counter	need updating?
0001E08E 6700                       		beq.s	Hud_ChkTime	; if not, branch
0001E090 6A00                       		bpl.s	loc_1C6E4
0001E092 6100 0000                  		bsr.w	Hud_LoadZero
0001E096                            
0001E096                            loc_1C6E4:
0001E096 4238 FE1D                  		clr.b	($FFFFFE1D).w
0001E09A 203C 5F40 0003             		move.l	#$5F400003,d0	; set VRAM address
0001E0A0 7200                       		moveq	#0,d1
0001E0A2 3238 FE20                  		move.w	($FFFFFE20).w,d1 ; load	number of rings
0001E0A6 6100 0000                  		bsr.w	Hud_Rings
0001E0AA                            
0001E0AA                            Hud_ChkTime:
0001E0AA 4A38 FE1E                          tst.b    ($FFFFFE1E).w    ; does the time    need updating?
0001E0AE 6700 0000                          beq.w    Hud_ChkLives    ; if not, branch    ;Mercury HUD Centiseconds (bsr.s => bsr.w) ported by -paranoimia-
0001E0B2 4A78 F63A                          tst.w    ($FFFFF63A).w    ; is the game paused?
0001E0B6 6600 0000                          bne.w    Hud_ChkLives    ; if yes, branch    ;Mercury HUD Centiseconds (bsr.s => bsr.w) ported by -paranoimia-
0001E0BA 43F8 FE22                          lea    ($FFFFFE22).w,a1
0001E0BE 0C99 0009 3B63                     cmpi.l    #$93B63,(a1)+    ; is the time 9'59"99?
0001E0C4 6700 0000                          beq.w    TimeOver    ; if yes, branch    ;Mercury HUD Centiseconds (bsr.s => bsr.w) ported by -paranoimia-
0001E0C8 1238 FEBF                          move.b    ($FFFFFEBF).w,d1
0001E0CC 5201                               addi.b    #1,d1
0001E0CE 0C01 0003                          cmpi.b    #3,d1
0001E0D2 6600                               bne.s    Cent_Skip
0001E0D4 123C 0000                          move.b    #0,d1
0001E0D8                            
0001E0D8                            Cent_Skip:
0001E0D8 11C1 FEBF                          move.b    d1,($FFFFFEBF).w
0001E0DC 0C01 0002                          cmpi.b    #2,d1
0001E0E0 6700                               beq.s    Cent_Skip2
0001E0E2 5201                               addi.b    #1,d1
0001E0E4                            
0001E0E4                            Cent_Skip2:
0001E0E4 D321                               add.b    d1,-(a1)
0001E0E6 0C11 0064                          cmpi.b    #100,(a1)
0001E0EA 6500                               bcs.s    Hud_DoCent
0001E0EC 12BC 0000                          move.b    #0,(a1)
0001E0F0 5221                               addq.b    #1,-(a1)
0001E0F2 0C11 003C                          cmpi.b    #60,(a1)
0001E0F6 6500                               bcs.s    loc_1C734
0001E0F8 12BC 0000                          move.b    #0,(a1)
0001E0FC 5221                               addq.b    #1,-(a1)
0001E0FE 0C11 0009                          cmpi.b    #9,(a1)
0001E102 6500                               bcs.s    loc_1C734
0001E104 12BC 0009                          move.b    #9,(a1)
0001E108                            
0001E108                            loc_1C734:
0001E108 203C 5E40 0003                     move.l    #$5E400003,d0
0001E10E 7200                               moveq    #0,d1
0001E110 1238 FE23                          move.b    ($FFFFFE23).w,d1 ; load    minutes
0001E114 6100 0000                          bsr.w    Hud_Mins
0001E118 203C 5EC0 0003                     move.l    #$5EC00003,d0
0001E11E 7200                               moveq    #0,d1
0001E120 1238 FE24                          move.b    ($FFFFFE24).w,d1 ; load    seconds
0001E124 6100 0000                          bsr.w    Hud_Secs
0001E128                            
0001E128                            Hud_DoCent:
0001E128 203C 5780 0003                     move.l    #$57800003,d0    ;Mercury Macros ported by -paranoimia-
0001E12E 7200                               moveq    #0,d1
0001E130 1238 FE25                          move.b    ($FFFFFE25).w,d1 ; load    centiseconds
0001E134 6100 0000                          bsr.w    Hud_Secs
0001E138                            
0001E138                            Hud_ChkLives:
0001E138 4A38 FE1C                          tst.b    ($FFFFFE1C).w    ; does the lives counter need updating?
0001E13C 6700                               beq.s    Hud_ChkBonus    ; if not, branch
0001E13E 4238 FE1C                          clr.b    ($FFFFFE1C).w
0001E142 6100 0000                          bsr.w    Hud_Lives
0001E146                            
0001E146                            Hud_ChkBonus:
0001E146 4A38 F7D6                          tst.b    ($FFFFF7D6).w    ; do time/ring bonus counters need updating?
0001E14A 6700                               beq.s    Hud_End        ; if not, branch
0001E14C 4238 F7D6                          clr.b    ($FFFFF7D6).w
0001E150 23FC 6E00 0002 00C0 0004           move.l    #$6E000002,($C00004).l
0001E15A 7200                               moveq    #0,d1
0001E15C 3238 F7D2                          move.w    ($FFFFF7D2).w,d1 ; load    time bonus
0001E160 6100 0000                          bsr.w    Hud_TimeRingBonus
0001E164 7200                               moveq    #0,d1
0001E166 3238 F7D4                          move.w    ($FFFFF7D4).w,d1 ; load    ring bonus
0001E16A 6100 0000                          bsr.w    Hud_TimeRingBonus
0001E16E                            
0001E16E                            Hud_End:
0001E16E 4E75                               rts
0001E170                            ; ===========================================================================
0001E170                            
0001E170                            TimeOver:				; XREF: Hud_ChkTime
0001E170 4238 FE1E                  		clr.b	($FFFFFE1E).w
0001E174 41F8 D000                  		lea	($FFFFD000).w,a0
0001E178 2448                       		movea.l	a0,a2
0001E17A 6100 E8B6                  		bsr.w	KillSonic
0001E17E 11FC 0001 FE1A             		move.b	#1,($FFFFFE1A).w
0001E184 4E75                       		rts
0001E186                            ; ===========================================================================
0001E186                            
0001E186                            HudDebug:				; XREF: HudUpdate
0001E186 6100 0000                  		bsr.w	HudDb_XY
0001E18A 4A38 FE1D                  		tst.b	($FFFFFE1D).w	; does the ring	counter	need updating?
0001E18E 6700                       		beq.s	HudDb_ObjCount	; if not, branch
0001E190 6A00                       		bpl.s	HudDb_Rings
0001E192 6100 0000                  		bsr.w	Hud_LoadZero
0001E196                            
0001E196                            HudDb_Rings:
0001E196 4238 FE1D                  		clr.b	($FFFFFE1D).w
0001E19A 203C 5F40 0003             		move.l	#$5F400003,d0	; set VRAM address
0001E1A0 7200                       		moveq	#0,d1
0001E1A2 3238 FE20                  		move.w	($FFFFFE20).w,d1 ; load	number of rings
0001E1A6 6100 0000                  		bsr.w	Hud_Rings
0001E1AA                            
0001E1AA                            HudDb_ObjCount:
0001E1AA 203C 5EC0 0003             		move.l	#$5EC00003,d0	; set VRAM address
0001E1B0 7200                       		moveq	#0,d1
0001E1B2 1238 F62C                  		move.b	($FFFFF62C).w,d1 ; load	"number	of objects" counter
0001E1B6 6100 0000                  		bsr.w	Hud_Secs
0001E1BA 4A38 FE1C                  		tst.b	($FFFFFE1C).w	; does the lives counter need updating?
0001E1BE 6700                       		beq.s	HudDb_ChkBonus	; if not, branch
0001E1C0 4238 FE1C                  		clr.b	($FFFFFE1C).w
0001E1C4 6100 0000                  		bsr.w	Hud_Lives
0001E1C8                            
0001E1C8                            HudDb_ChkBonus:
0001E1C8 4A38 F7D6                  		tst.b	($FFFFF7D6).w	; does the ring/time bonus counter need	updating?
0001E1CC 6700                       		beq.s	HudDb_End	; if not, branch
0001E1CE 4238 F7D6                  		clr.b	($FFFFF7D6).w
0001E1D2 23FC 6E00 0002 00C0 0004   		move.l	#$6E000002,($C00004).l ; set VRAM address
0001E1DC 7200                       		moveq	#0,d1
0001E1DE 3238 F7D2                  		move.w	($FFFFF7D2).w,d1 ; load	time bonus
0001E1E2 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001E1E6 7200                       		moveq	#0,d1
0001E1E8 3238 F7D4                  		move.w	($FFFFF7D4).w,d1 ; load	ring bonus
0001E1EC 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001E1F0                            
0001E1F0                            HudDb_End:
0001E1F0 4E75                       		rts
0001E1F2                            ; End of function HudUpdate
0001E1F2                            
0001E1F2                            ; ---------------------------------------------------------------------------
0001E1F2                            ; Subroutine to	load "0" on the	HUD
0001E1F2                            ; ---------------------------------------------------------------------------
0001E1F2                            
0001E1F2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E1F2                            
0001E1F2                            
0001E1F2                            Hud_LoadZero:				; XREF: HudUpdate
0001E1F2 23FC 5F40 0003 00C0 0004   		move.l	#$5F400003,($C00004).l
0001E1FC 45FA 0000                  		lea	Hud_TilesZero(pc),a2
0001E200 343C 0002                  		move.w	#2,d2
0001E204 6000                       		bra.s	loc_1C83E
0001E206                            ; End of function Hud_LoadZero
0001E206                            
0001E206                            ; ---------------------------------------------------------------------------
0001E206                            ; Subroutine to    load " on the    HUD        ported by -paranoimia-
0001E206                            ; ---------------------------------------------------------------------------
0001E206                            
0001E206                            ; ||||||||||||||| S U B    R O U T    I N E |||||||||||||||||||||||||||||||||||||||
0001E206                            
0001E206                            
0001E206                            Hud_LoadMarks:                ; XREF: HUD_Update
0001E206 23FC 5740 0003 00D0 0004           move.l    #$57400003,($D00004).l  ;locVRAM    $D740
0001E210 45FA 0000                          lea    Hud_TilesMarks(pc),a2
0001E214 343C 0002                          move.w    #2,d2
0001E218 6000                               bra.s    loc_1C83E
0001E21A                            ; End of function Hud_LoadMarks
0001E21A                            
0001E21A                            ; ---------------------------------------------------------------------------
0001E21A                            ; Subroutine to	load uncompressed HUD patterns ("E", "0", colon)
0001E21A                            ; ---------------------------------------------------------------------------
0001E21A                            
0001E21A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E21A                            
0001E21A                            
0001E21A                            Hud_Base:				; XREF: Level; SS_EndLoop; EndingSequence
0001E21A 4DF9 00C0 0000             		lea	($C00000).l,a6
0001E220 6100 0000                  		bsr.w	Hud_Lives
0001E224 61E0                       		bsr.s    Hud_LoadMarks
0001E226 23FC 5C40 0003 00C0 0004   		move.l	#$5C400003,($C00004).l
0001E230 45FA 0000                  		lea	Hud_TilesBase(pc),a2
0001E234 343C 000E                  		move.w	#$E,d2
0001E238                            
0001E238                            loc_1C83E:				; XREF: Hud_LoadZero
0001E238 43FA 0000                  		lea	Art_Hud(pc),a1
0001E23C                            
0001E23C                            loc_1C842:
0001E23C 323C 000F                  		move.w	#$F,d1
0001E240 101A                       		move.b	(a2)+,d0
0001E242 6B00                       		bmi.s	loc_1C85E
0001E244 4880                       		ext.w	d0
0001E246 EB48                       		lsl.w	#5,d0
0001E248 47F1 0000                  		lea	(a1,d0.w),a3
0001E24C                            
0001E24C                            loc_1C852:
0001E24C 2C9B                       		move.l	(a3)+,(a6)
0001E24E 51C9 FFFC                  		dbf	d1,loc_1C852
0001E252                            
0001E252                            loc_1C858:
0001E252 51CA FFE8                  		dbf	d2,loc_1C842
0001E256                            
0001E256 4E75                       		rts
0001E258                            ; ===========================================================================
0001E258                            
0001E258                            loc_1C85E:
0001E258 2CBC 0000 0000             		move.l	#0,(a6)
0001E25E 51C9 FFF8                  		dbf	d1,loc_1C85E
0001E262                            
0001E262 60EE                       		bra.s	loc_1C858
0001E264                            ; End of function Hud_Base
0001E264                            
0001E264                            ; ===========================================================================
0001E264 1A00 0000                  Hud_TilesMarks:    dc.b $1A, 0, 0, 0
0001E268 16FF FFFF FFFF FF00 0018+  Hud_TilesBase:    dc.b $16, $FF, $FF, $FF, $FF, $FF, $FF,    0, 0, $18, 0, 0
0001E274 FFFF 0000                  Hud_TilesZero:    dc.b $FF, $FF, 0, 0
0001E278                            ; ---------------------------------------------------------------------------
0001E278                            ; Subroutine to	load debug mode	numbers	patterns
0001E278                            ; ---------------------------------------------------------------------------
0001E278                            
0001E278                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E278                            
0001E278                            
0001E278                            HudDb_XY:				; XREF: HudDebug
0001E278 23FC 5C40 0003 00C0 0004   		move.l	#$5C400003,($C00004).l ; set VRAM address
0001E282 3238 F700                  		move.w	($FFFFF700).w,d1 ; load	camera x-position
0001E286 4841                       		swap	d1
0001E288 3238 D008                  		move.w	($FFFFD008).w,d1 ; load	Sonic's x-position
0001E28C 6100                       		bsr.s	HudDb_XY2
0001E28E 3238 F704                  		move.w	($FFFFF704).w,d1 ; load	camera y-position
0001E292 4841                       		swap	d1
0001E294 3238 D00C                  		move.w	($FFFFD00C).w,d1 ; load	Sonic's y-position
0001E298                            ; End of function HudDb_XY
0001E298                            
0001E298                            
0001E298                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E298                            
0001E298                            
0001E298                            HudDb_XY2:
0001E298 7C07                       		moveq	#7,d6
0001E29A 43F9 0000 0592             		lea	(Art_Text).l,a1
0001E2A0                            
0001E2A0                            HudDb_XYLoop:
0001E2A0 E959                       		rol.w	#4,d1
0001E2A2 3401                       		move.w	d1,d2
0001E2A4 0242 000F                  		andi.w	#$F,d2
0001E2A8 0C42 000A                  		cmpi.w	#$A,d2
0001E2AC 6500                       		bcs.s	loc_1C8B2
0001E2AE 5E42                       		addq.w	#7,d2
0001E2B0                            
0001E2B0                            loc_1C8B2:
0001E2B0 EB4A                       		lsl.w	#5,d2
0001E2B2 47F1 2000                  		lea	(a1,d2.w),a3
0001E2B6 2C9B                       		move.l	(a3)+,(a6)
0001E2B8 2C9B                       		move.l	(a3)+,(a6)
0001E2BA 2C9B                       		move.l	(a3)+,(a6)
0001E2BC 2C9B                       		move.l	(a3)+,(a6)
0001E2BE 2C9B                       		move.l	(a3)+,(a6)
0001E2C0 2C9B                       		move.l	(a3)+,(a6)
0001E2C2 2C9B                       		move.l	(a3)+,(a6)
0001E2C4 2C9B                       		move.l	(a3)+,(a6)
0001E2C6 4841                       		swap	d1
0001E2C8 51CE FFD6                  		dbf	d6,HudDb_XYLoop	; repeat 7 more	times
0001E2CC                            
0001E2CC 4E75                       		rts	
0001E2CE                            ; End of function HudDb_XY2
0001E2CE                            
0001E2CE                            ; ---------------------------------------------------------------------------
0001E2CE                            ; Subroutine to	load rings numbers patterns
0001E2CE                            ; ---------------------------------------------------------------------------
0001E2CE                            
0001E2CE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E2CE                            
0001E2CE                            
0001E2CE                            Hud_Rings:				; XREF: HudUpdate
0001E2CE 45F9 0000 0000             		lea	(Hud_100).l,a2
0001E2D4 7C02                       		moveq	#2,d6
0001E2D6 6000                       		bra.s	Hud_LoadArt
0001E2D8                            ; End of function Hud_Rings
0001E2D8                            
0001E2D8                            ; ---------------------------------------------------------------------------
0001E2D8                            ; Subroutine to	load score numbers patterns
0001E2D8                            ; ---------------------------------------------------------------------------
0001E2D8                            
0001E2D8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E2D8                            
0001E2D8                            
0001E2D8                            Hud_Score:				; XREF: HudUpdate
0001E2D8 45F9 0000 0000             		lea	(Hud_100000).l,a2
0001E2DE 7C05                       		moveq	#5,d6
0001E2E0                            
0001E2E0                            Hud_LoadArt:
0001E2E0 7800                       		moveq	#0,d4
0001E2E2 43FA 0000                  		lea	Art_Hud(pc),a1
0001E2E6                            
0001E2E6                            Hud_ScoreLoop:
0001E2E6 7400                       		moveq	#0,d2
0001E2E8 261A                       		move.l	(a2)+,d3
0001E2EA                            
0001E2EA                            loc_1C8EC:
0001E2EA 9283                       		sub.l	d3,d1
0001E2EC 6500                       		bcs.s	loc_1C8F4
0001E2EE 5242                       		addq.w	#1,d2
0001E2F0 60F8                       		bra.s	loc_1C8EC
0001E2F2                            ; ===========================================================================
0001E2F2                            
0001E2F2                            loc_1C8F4:
0001E2F2 D283                       		add.l	d3,d1
0001E2F4 4A42                       		tst.w	d2
0001E2F6 6700                       		beq.s	loc_1C8FE
0001E2F8 383C 0001                  		move.w	#1,d4
0001E2FC                            
0001E2FC                            loc_1C8FE:
0001E2FC 4A44                       		tst.w	d4
0001E2FE 6700                       		beq.s	loc_1C92C
0001E300 ED4A                       		lsl.w	#6,d2
0001E302 2D40 0004                  		move.l	d0,4(a6)
0001E306 47F1 2000                  		lea	(a1,d2.w),a3
0001E30A 2C9B                       		move.l	(a3)+,(a6)
0001E30C 2C9B                       		move.l	(a3)+,(a6)
0001E30E 2C9B                       		move.l	(a3)+,(a6)
0001E310 2C9B                       		move.l	(a3)+,(a6)
0001E312 2C9B                       		move.l	(a3)+,(a6)
0001E314 2C9B                       		move.l	(a3)+,(a6)
0001E316 2C9B                       		move.l	(a3)+,(a6)
0001E318 2C9B                       		move.l	(a3)+,(a6)
0001E31A 2C9B                       		move.l	(a3)+,(a6)
0001E31C 2C9B                       		move.l	(a3)+,(a6)
0001E31E 2C9B                       		move.l	(a3)+,(a6)
0001E320 2C9B                       		move.l	(a3)+,(a6)
0001E322 2C9B                       		move.l	(a3)+,(a6)
0001E324 2C9B                       		move.l	(a3)+,(a6)
0001E326 2C9B                       		move.l	(a3)+,(a6)
0001E328 2C9B                       		move.l	(a3)+,(a6)
0001E32A                            
0001E32A                            loc_1C92C:
0001E32A 0680 0040 0000             		addi.l	#$400000,d0
0001E330 51CE FFB4                  		dbf	d6,Hud_ScoreLoop
0001E334                            
0001E334 4E75                       		rts
0001E336                            ; End of function Hud_Score
0001E336                            
0001E336                            ; ---------------------------------------------------------------------------
0001E336                            ; Subroutine to	load countdown numbers on the continue screen
0001E336                            ; ---------------------------------------------------------------------------
0001E336                            
0001E336                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E336                            
0001E336                            
0001E336                            ContScrCounter:				; XREF: ContinueScreen
0001E336 23FC 5F80 0003 00C0 0004   		move.l	#$5F800003,($C00004).l ; set VRAM address
0001E340 4DF9 00C0 0000             		lea	($C00000).l,a6
0001E346 45F9 0000 0000             		lea	(Hud_10).l,a2
0001E34C 7C01                       		moveq	#1,d6
0001E34E 7800                       		moveq	#0,d4
0001E350 43FA 0000                  		lea	Art_Hud(pc),a1 ; load numbers patterns
0001E354                            
0001E354                            ContScr_Loop:
0001E354 7400                       		moveq	#0,d2
0001E356 261A                       		move.l	(a2)+,d3
0001E358                            
0001E358                            loc_1C95A:
0001E358 9283                       		sub.l	d3,d1
0001E35A 6500                       		bcs.s	loc_1C962
0001E35C 5242                       		addq.w	#1,d2
0001E35E 60F8                       		bra.s	loc_1C95A
0001E360                            ; ===========================================================================
0001E360                            
0001E360                            loc_1C962:
0001E360 D283                       		add.l	d3,d1
0001E362 ED4A                       		lsl.w	#6,d2
0001E364 47F1 2000                  		lea	(a1,d2.w),a3
0001E368 2C9B                       		move.l	(a3)+,(a6)
0001E36A 2C9B                       		move.l	(a3)+,(a6)
0001E36C 2C9B                       		move.l	(a3)+,(a6)
0001E36E 2C9B                       		move.l	(a3)+,(a6)
0001E370 2C9B                       		move.l	(a3)+,(a6)
0001E372 2C9B                       		move.l	(a3)+,(a6)
0001E374 2C9B                       		move.l	(a3)+,(a6)
0001E376 2C9B                       		move.l	(a3)+,(a6)
0001E378 2C9B                       		move.l	(a3)+,(a6)
0001E37A 2C9B                       		move.l	(a3)+,(a6)
0001E37C 2C9B                       		move.l	(a3)+,(a6)
0001E37E 2C9B                       		move.l	(a3)+,(a6)
0001E380 2C9B                       		move.l	(a3)+,(a6)
0001E382 2C9B                       		move.l	(a3)+,(a6)
0001E384 2C9B                       		move.l	(a3)+,(a6)
0001E386 2C9B                       		move.l	(a3)+,(a6)
0001E388 51CE FFCA                  		dbf	d6,ContScr_Loop	; repeat 1 more	time
0001E38C                            
0001E38C 4E75                       		rts
0001E38E                            ; End of function ContScrCounter
0001E38E                            
0001E38E                            ; ===========================================================================
0001E38E                            ; ---------------------------------------------------------------------------
0001E38E                            ; HUD counter sizes
0001E38E                            ; ---------------------------------------------------------------------------
0001E38E 0001 86A0                  Hud_100000:	dc.l 100000		; XREF: Hud_Score
0001E392 0000 2710                  Hud_10000:	dc.l 10000
0001E396 0000 03E8                  Hud_1000:	dc.l 1000		; XREF: Hud_TimeRingBonus
0001E39A 0000 0064                  Hud_100:	dc.l 100		; XREF: Hud_Rings
0001E39E 0000 000A                  Hud_10:		dc.l 10			; XREF: ContScrCounter; Hud_Secs; Hud_Lives
0001E3A2 0000 0001                  Hud_1:		dc.l 1			; XREF: Hud_Mins
0001E3A6                            
0001E3A6                            ; ---------------------------------------------------------------------------
0001E3A6                            ; Subroutine to	load time numbers patterns
0001E3A6                            ; ---------------------------------------------------------------------------
0001E3A6                            
0001E3A6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E3A6                            
0001E3A6                            
0001E3A6                            Hud_Mins:				; XREF: Hud_ChkTime
0001E3A6 45F9 0001 E3A2             		lea	(Hud_1).l,a2
0001E3AC 7C00                       		moveq	#0,d6
0001E3AE 6000                       		bra.s	loc_1C9BA
0001E3B0                            ; End of function Hud_Mins
0001E3B0                            
0001E3B0                            
0001E3B0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E3B0                            
0001E3B0                            
0001E3B0                            Hud_Secs:				; XREF: Hud_ChkTime
0001E3B0 45F9 0001 E39E             		lea	(Hud_10).l,a2
0001E3B6 7C01                       		moveq	#1,d6
0001E3B8                            
0001E3B8                            loc_1C9BA:
0001E3B8 7800                       		moveq	#0,d4
0001E3BA 43FA 0000                  		lea	Art_Hud(pc),a1
0001E3BE                            
0001E3BE                            Hud_TimeLoop:
0001E3BE 7400                       		moveq	#0,d2
0001E3C0 261A                       		move.l	(a2)+,d3
0001E3C2                            
0001E3C2                            loc_1C9C4:
0001E3C2 9283                       		sub.l	d3,d1
0001E3C4 6500                       		bcs.s	loc_1C9CC
0001E3C6 5242                       		addq.w	#1,d2
0001E3C8 60F8                       		bra.s	loc_1C9C4
0001E3CA                            ; ===========================================================================
0001E3CA                            
0001E3CA                            loc_1C9CC:
0001E3CA D283                       		add.l	d3,d1
0001E3CC 4A42                       		tst.w	d2
0001E3CE 6700                       		beq.s	loc_1C9D6
0001E3D0 383C 0001                  		move.w	#1,d4
0001E3D4                            
0001E3D4                            loc_1C9D6:
0001E3D4 ED4A                       		lsl.w	#6,d2
0001E3D6 2D40 0004                  		move.l	d0,4(a6)
0001E3DA 47F1 2000                  		lea	(a1,d2.w),a3
0001E3DE 2C9B                       		move.l	(a3)+,(a6)
0001E3E0 2C9B                       		move.l	(a3)+,(a6)
0001E3E2 2C9B                       		move.l	(a3)+,(a6)
0001E3E4 2C9B                       		move.l	(a3)+,(a6)
0001E3E6 2C9B                       		move.l	(a3)+,(a6)
0001E3E8 2C9B                       		move.l	(a3)+,(a6)
0001E3EA 2C9B                       		move.l	(a3)+,(a6)
0001E3EC 2C9B                       		move.l	(a3)+,(a6)
0001E3EE 2C9B                       		move.l	(a3)+,(a6)
0001E3F0 2C9B                       		move.l	(a3)+,(a6)
0001E3F2 2C9B                       		move.l	(a3)+,(a6)
0001E3F4 2C9B                       		move.l	(a3)+,(a6)
0001E3F6 2C9B                       		move.l	(a3)+,(a6)
0001E3F8 2C9B                       		move.l	(a3)+,(a6)
0001E3FA 2C9B                       		move.l	(a3)+,(a6)
0001E3FC 2C9B                       		move.l	(a3)+,(a6)
0001E3FE 0680 0040 0000             		addi.l	#$400000,d0
0001E404 51CE FFB8                  		dbf	d6,Hud_TimeLoop
0001E408                            
0001E408 4E75                       		rts
0001E40A                            ; End of function Hud_Secs
0001E40A                            
0001E40A                            ; ---------------------------------------------------------------------------
0001E40A                            ; Subroutine to	load time/ring bonus numbers patterns
0001E40A                            ; ---------------------------------------------------------------------------
0001E40A                            
0001E40A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E40A                            
0001E40A                            
0001E40A                            Hud_TimeRingBonus:			; XREF: Hud_ChkBonus
0001E40A 45F9 0001 E396             		lea	(Hud_1000).l,a2
0001E410 7C03                       		moveq	#3,d6
0001E412 7800                       		moveq	#0,d4
0001E414 43FA 0000                  		lea	Art_Hud(pc),a1
0001E418                            
0001E418                            Hud_BonusLoop:
0001E418 7400                       		moveq	#0,d2
0001E41A 261A                       		move.l	(a2)+,d3
0001E41C                            
0001E41C                            loc_1CA1E:
0001E41C 9283                       		sub.l	d3,d1
0001E41E 6500                       		bcs.s	loc_1CA26
0001E420 5242                       		addq.w	#1,d2
0001E422 60F8                       		bra.s	loc_1CA1E
0001E424                            ; ===========================================================================
0001E424                            
0001E424                            loc_1CA26:
0001E424 D283                       		add.l	d3,d1
0001E426 4A42                       		tst.w	d2
0001E428 6700                       		beq.s	loc_1CA30
0001E42A 383C 0001                  		move.w	#1,d4
0001E42E                            
0001E42E                            loc_1CA30:
0001E42E 4A44                       		tst.w	d4
0001E430 6700                       		beq.s	Hud_ClrBonus
0001E432 ED4A                       		lsl.w	#6,d2
0001E434 47F1 2000                  		lea	(a1,d2.w),a3
0001E438 2C9B                       		move.l	(a3)+,(a6)
0001E43A 2C9B                       		move.l	(a3)+,(a6)
0001E43C 2C9B                       		move.l	(a3)+,(a6)
0001E43E 2C9B                       		move.l	(a3)+,(a6)
0001E440 2C9B                       		move.l	(a3)+,(a6)
0001E442 2C9B                       		move.l	(a3)+,(a6)
0001E444 2C9B                       		move.l	(a3)+,(a6)
0001E446 2C9B                       		move.l	(a3)+,(a6)
0001E448 2C9B                       		move.l	(a3)+,(a6)
0001E44A 2C9B                       		move.l	(a3)+,(a6)
0001E44C 2C9B                       		move.l	(a3)+,(a6)
0001E44E 2C9B                       		move.l	(a3)+,(a6)
0001E450 2C9B                       		move.l	(a3)+,(a6)
0001E452 2C9B                       		move.l	(a3)+,(a6)
0001E454 2C9B                       		move.l	(a3)+,(a6)
0001E456 2C9B                       		move.l	(a3)+,(a6)
0001E458                            
0001E458                            loc_1CA5A:
0001E458 51CE FFBE                  		dbf	d6,Hud_BonusLoop ; repeat 3 more times
0001E45C                            
0001E45C 4E75                       		rts
0001E45E                            ; ===========================================================================
0001E45E                            
0001E45E                            Hud_ClrBonus:
0001E45E 7A0F                       		moveq	#$F,d5
0001E460                            
0001E460                            Hud_ClrBonusLoop:
0001E460 2CBC 0000 0000             		move.l	#0,(a6)
0001E466 51CD FFF8                  		dbf	d5,Hud_ClrBonusLoop
0001E46A                            
0001E46A 60EC                       		bra.s	loc_1CA5A
0001E46C                            ; End of function Hud_TimeRingBonus
0001E46C                            
0001E46C                            ; ---------------------------------------------------------------------------
0001E46C                            ; Subroutine to	load uncompressed lives	counter	patterns
0001E46C                            ; ---------------------------------------------------------------------------
0001E46C                            
0001E46C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E46C                            
0001E46C                            
0001E46C                            Hud_Lives:				; XREF: Hud_ChkLives
0001E46C 203C 7BA0 0003             		move.l	#$7BA00003,d0	; set VRAM address
0001E472 7200                       		moveq	#0,d1
0001E474 1238 FE12                  		move.b	($FFFFFE12).w,d1 ; load	number of lives
0001E478 45F9 0001 E39E             		lea	(Hud_10).l,a2
0001E47E 7C01                       		moveq	#1,d6
0001E480 7800                       		moveq	#0,d4
0001E482 43FA 0000                  		lea	Art_LivesNums(pc),a1
0001E486                            
0001E486                            Hud_LivesLoop:
0001E486 2D40 0004                  		move.l	d0,4(a6)
0001E48A 7400                       		moveq	#0,d2
0001E48C 261A                       		move.l	(a2)+,d3
0001E48E                            
0001E48E                            loc_1CA90:
0001E48E 9283                       		sub.l	d3,d1
0001E490 6500                       		bcs.s	loc_1CA98
0001E492 5242                       		addq.w	#1,d2
0001E494 60F8                       		bra.s	loc_1CA90
0001E496                            ; ===========================================================================
0001E496                            
0001E496                            loc_1CA98:
0001E496 D283                       		add.l	d3,d1
0001E498 4A42                       		tst.w	d2
0001E49A 6700                       		beq.s	loc_1CAA2
0001E49C 383C 0001                  		move.w	#1,d4
0001E4A0                            
0001E4A0                            loc_1CAA2:
0001E4A0 4A44                       		tst.w	d4
0001E4A2 6700                       		beq.s	Hud_ClrLives
0001E4A4                            
0001E4A4                            loc_1CAA6:
0001E4A4 EB4A                       		lsl.w	#5,d2
0001E4A6 47F1 2000                  		lea	(a1,d2.w),a3
0001E4AA 2C9B                       		move.l	(a3)+,(a6)
0001E4AC 2C9B                       		move.l	(a3)+,(a6)
0001E4AE 2C9B                       		move.l	(a3)+,(a6)
0001E4B0 2C9B                       		move.l	(a3)+,(a6)
0001E4B2 2C9B                       		move.l	(a3)+,(a6)
0001E4B4 2C9B                       		move.l	(a3)+,(a6)
0001E4B6 2C9B                       		move.l	(a3)+,(a6)
0001E4B8 2C9B                       		move.l	(a3)+,(a6)
0001E4BA                            
0001E4BA                            loc_1CABC:
0001E4BA 0680 0040 0000             		addi.l	#$400000,d0
0001E4C0 51CE FFC4                  		dbf	d6,Hud_LivesLoop ; repeat 1 more time
0001E4C4                            
0001E4C4 4E75                       		rts
0001E4C6                            ; ===========================================================================
0001E4C6                            
0001E4C6                            Hud_ClrLives:
0001E4C6 4A46                       		tst.w	d6
0001E4C8 67DA                       		beq.s	loc_1CAA6
0001E4CA 7A07                       		moveq	#7,d5
0001E4CC                            
0001E4CC                            Hud_ClrLivesLoop:
0001E4CC 2CBC 0000 0000             		move.l	#0,(a6)
0001E4D2 51CD FFF8                  		dbf	d5,Hud_ClrLivesLoop
0001E4D6 60E2                       		bra.s	loc_1CABC
0001E4D8                            ; End of function Hud_Lives
0001E4D8                            
0001E4D8                            ; ===========================================================================
0001E4D8                            Art_Hud:	incbin	artunc\HUD.bin		; 8x16 pixel numbers on HUD
0001E858                            		even
0001E858                            Art_LivesNums:	incbin	artunc\livescnt.bin	; 8x8 pixel numbers on lives counter
0001E998                            		even
0001E998                            ; ===========================================================================
0001E998                            ; ---------------------------------------------------------------------------
0001E998                            ; When debug mode is currently in use
0001E998                            ; ---------------------------------------------------------------------------
0001E998                            
0001E998                            DebugMode:				; XREF: Obj01; Obj09
0001E998 7000                       		moveq	#0,d0
0001E99A 1038 FE08                  		move.b	($FFFFFE08).w,d0
0001E99E 323B 0000                  		move.w	Debug_Index(pc,d0.w),d1
0001E9A2 4EFB 1000                  		jmp	Debug_Index(pc,d1.w)
0001E9A6                            ; ===========================================================================
0001E9A6 0000                       Debug_Index:	dc.w Debug_Main-Debug_Index
0001E9A8 0000                       		dc.w Debug_Skip-Debug_Index
0001E9AA                            ; ===========================================================================
0001E9AA                            
0001E9AA                            Debug_Main:				; XREF: Debug_Index
0001E9AA 5438 FE08                  		addq.b	#2,($FFFFFE08).w
0001E9AE 31F8 F72C FEF0             		move.w	($FFFFF72C).w,($FFFFFEF0).w ; buffer level x-boundary
0001E9B4 31F8 F726 FEF2             		move.w	($FFFFF726).w,($FFFFFEF2).w ; buffer level y-boundary
0001E9BA 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
0001E9C0 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
0001E9C6 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
0001E9CC 0278 07FF F704             		andi.w	#$7FF,($FFFFF704).w
0001E9D2 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
0001E9D8 117C 0000 001A             		move.b	#0,$1A(a0)
0001E9DE 117C 0000 001C             		move.b	#0,$1C(a0)
0001E9E4 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode = $10	(special stage)?
0001E9EA 6600                       		bne.s	Debug_Zone	; if not, branch
0001E9EC 31FC 0000 F782             		move.w	#0,($FFFFF782).w ; stop	special	stage rotating
0001E9F2 31FC 0000 F780             		move.w	#0,($FFFFF780).w ; make	special	stage "upright"
0001E9F8 7006                       		moveq	#6,d0		; use 6th debug	item list
0001E9FA 6000                       		bra.s	Debug_UseList
0001E9FC                            ; ===========================================================================
0001E9FC                            
0001E9FC                            Debug_Zone:
0001E9FC 7000                       		moveq	#0,d0
0001E9FE 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001EA02                            
0001EA02                            Debug_UseList:
0001EA02 45F9 0000 0000             		lea	(DebugList).l,a2
0001EA08 D040                       		add.w	d0,d0
0001EA0A D4F2 0000                  		adda.w	(a2,d0.w),a2
0001EA0E 3C1A                       		move.w	(a2)+,d6
0001EA10 BC38 FE06                  		cmp.b	($FFFFFE06).w,d6
0001EA14 6200                       		bhi.s	loc_1CF9E
0001EA16 11FC 0000 FE06             		move.b	#0,($FFFFFE06).w
0001EA1C                            
0001EA1C                            loc_1CF9E:
0001EA1C 6100 0000                  		bsr.w	Debug_ShowItem
0001EA20 11FC 000C FE0A             		move.b	#$C,($FFFFFE0A).w
0001EA26 11FC 0001 FE0B             		move.b	#1,($FFFFFE0B).w
0001EA2C                            
0001EA2C                            Debug_Skip:				; XREF: Debug_Index
0001EA2C 7006                       		moveq	#6,d0
0001EA2E 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w
0001EA34 6700                       		beq.s	loc_1CFBE
0001EA36 7000                       		moveq	#0,d0
0001EA38 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001EA3C                            
0001EA3C                            loc_1CFBE:
0001EA3C 45F9 0000 0000             		lea	(DebugList).l,a2
0001EA42 D040                       		add.w	d0,d0
0001EA44 D4F2 0000                  		adda.w	(a2,d0.w),a2
0001EA48 3C1A                       		move.w	(a2)+,d6
0001EA4A 6100 0000                  		bsr.w	Debug_Control
0001EA4E 4EF9 0000 E0E4             		jmp	DisplaySprite
0001EA54                            
0001EA54                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EA54                            
0001EA54                            
0001EA54                            Debug_Control:
0001EA54 7800                       		moveq	#0,d4
0001EA56 323C 0001                  		move.w	#1,d1
0001EA5A 1838 F605                  		move.b	($FFFFF605).w,d4
0001EA5E 0244 000F                  		andi.w	#$F,d4		; is up/down/left/right	pressed?
0001EA62 6600                       		bne.s	loc_1D018	; if yes, branch
0001EA64 1038 F604                  		move.b	($FFFFF604).w,d0
0001EA68 0240 000F                  		andi.w	#$F,d0
0001EA6C 6600                       		bne.s	loc_1D000
0001EA6E 11FC 000C FE0A             		move.b	#$C,($FFFFFE0A).w
0001EA74 11FC 000F FE0B             		move.b	#$F,($FFFFFE0B).w
0001EA7A 6000 0000                  		bra.w	Debug_BackItem
0001EA7E                            ; ===========================================================================
0001EA7E                            
0001EA7E                            loc_1D000:
0001EA7E 5338 FE0A                  		subq.b	#1,($FFFFFE0A).w
0001EA82 6600                       		bne.s	loc_1D01C
0001EA84 11FC 0001 FE0A             		move.b	#1,($FFFFFE0A).w
0001EA8A 5238 FE0B                  		addq.b	#1,($FFFFFE0B).w
0001EA8E 6600                       		bne.s	loc_1D018
0001EA90 11FC 00FF FE0B             		move.b	#-1,($FFFFFE0B).w
0001EA96                            
0001EA96                            loc_1D018:
0001EA96 1838 F604                  		move.b	($FFFFF604).w,d4
0001EA9A                            
0001EA9A                            loc_1D01C:
0001EA9A 7200                       		moveq	#0,d1
0001EA9C 1238 FE0B                  		move.b	($FFFFFE0B).w,d1
0001EAA0 5241                       		addq.w	#1,d1
0001EAA2 4841                       		swap	d1
0001EAA4 E881                       		asr.l	#4,d1
0001EAA6 2428 000C                  		move.l	$C(a0),d2
0001EAAA 2628 0008                  		move.l	8(a0),d3
0001EAAE 0804 0000                  		btst	#0,d4		; is up	being pressed?
0001EAB2 6700                       		beq.s	loc_1D03C	; if not, branch
0001EAB4 9481                       		sub.l	d1,d2
0001EAB6 6400                       		bcc.s	loc_1D03C
0001EAB8 7400                       		moveq	#0,d2
0001EABA                            
0001EABA                            loc_1D03C:
0001EABA 0804 0001                  		btst	#1,d4		; is down being	pressed?
0001EABE 6700                       		beq.s	loc_1D052	; if not, branch
0001EAC0 D481                       		add.l	d1,d2
0001EAC2 0C82 07FF 0000             		cmpi.l	#$7FF0000,d2
0001EAC8 6500                       		bcs.s	loc_1D052
0001EACA 243C 07FF 0000             		move.l	#$7FF0000,d2
0001EAD0                            
0001EAD0                            loc_1D052:
0001EAD0 0804 0002                  		btst	#2,d4
0001EAD4 6700                       		beq.s	loc_1D05E
0001EAD6 9681                       		sub.l	d1,d3
0001EAD8 6400                       		bcc.s	loc_1D05E
0001EADA 7600                       		moveq	#0,d3
0001EADC                            
0001EADC                            loc_1D05E:
0001EADC 0804 0003                  		btst	#3,d4
0001EAE0 6700                       		beq.s	loc_1D066
0001EAE2 D681                       		add.l	d1,d3
0001EAE4                            
0001EAE4                            loc_1D066:
0001EAE4 2142 000C                  		move.l	d2,$C(a0)
0001EAE8 2143 0008                  		move.l	d3,8(a0)
0001EAEC                            
0001EAEC                            Debug_BackItem:
0001EAEC 0838 0006 F604             		btst	#6,($FFFFF604).w ; is button A pressed?
0001EAF2 6700                       		beq.s	Debug_MakeItem	; if not, branch
0001EAF4 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
0001EAFA 6700                       		beq.s	Debug_NextItem	; if not, branch
0001EAFC 5338 FE06                  		subq.b	#1,($FFFFFE06).w ; go back 1 item
0001EB00 6400                       		bcc.s	Debug_NoLoop
0001EB02 DD38 FE06                  		add.b	d6,($FFFFFE06).w
0001EB06 6000                       		bra.s	Debug_NoLoop
0001EB08                            ; ===========================================================================
0001EB08                            
0001EB08                            Debug_NextItem:
0001EB08 0838 0006 F605             		btst	#6,($FFFFF605).w ; is button A pressed?
0001EB0E 6700                       		beq.s	Debug_MakeItem	; if not, branch
0001EB10 5238 FE06                  		addq.b	#1,($FFFFFE06).w ; go forwards 1 item
0001EB14 BC38 FE06                  		cmp.b	($FFFFFE06).w,d6
0001EB18 6200                       		bhi.s	Debug_NoLoop
0001EB1A 11FC 0000 FE06             		move.b	#0,($FFFFFE06).w ; loop	back to	first item
0001EB20                            
0001EB20                            Debug_NoLoop:
0001EB20 6000 0000                  		bra.w	Debug_ShowItem
0001EB24                            ; ===========================================================================
0001EB24                            
0001EB24                            Debug_MakeItem:
0001EB24 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
0001EB2A 6700                       		beq.s	Debug_Exit	; if not, branch
0001EB2C 4EB9 0000 E57A             		jsr	SingleObjLoad
0001EB32 6600                       		bne.s	Debug_Exit
0001EB34 3368 0008 0008             		move.w	8(a0),8(a1)
0001EB3A 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001EB40 12A8 0004                  		move.b	4(a0),0(a1)	; create object
0001EB44 1368 0001 0001             		move.b	1(a0),1(a1)
0001EB4A 1368 0001 0022             		move.b	1(a0),$22(a1)
0001EB50 0229 007F 0022             		andi.b	#$7F,$22(a1)
0001EB56 7000                       		moveq	#0,d0
0001EB58 1038 FE06                  		move.b	($FFFFFE06).w,d0
0001EB5C E748                       		lsl.w	#3,d0
0001EB5E 1372 0004 0028             		move.b	4(a2,d0.w),$28(a1)
0001EB64 4E75                       		rts	
0001EB66                            ; ===========================================================================
0001EB66                            
0001EB66                            Debug_Exit:
0001EB66 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button B pressed?
0001EB6C 6700                       		beq.s	Debug_DoNothing	; if not, branch
0001EB6E 7000                       		moveq	#0,d0
0001EB70 31C0 FE08                  		move.w	d0,($FFFFFE08).w ; deactivate debug mode
0001EB74 21FC 0000 0000 D004        		move.l	#Map_Sonic,($FFFFD004).w
0001EB7C 31FC 0780 D002             		move.w	#$780,($FFFFD002).w
0001EB82 11C0 D01C                  		move.b	d0,($FFFFD01C).w
0001EB86 3140 000A                  		move.w	d0,$A(a0)
0001EB8A 3140 000E                  		move.w	d0,$E(a0)
0001EB8E 31F8 FEF0 F72C             		move.w	($FFFFFEF0).w,($FFFFF72C).w ; restore level boundaries
0001EB94 31F8 FEF2 F726             		move.w	($FFFFFEF2).w,($FFFFF726).w
0001EB9A 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; are you in	the special stage?
0001EBA0 6600                       		bne.s	Debug_DoNothing	; if not, branch
0001EBA2 4278 F780                  		clr.w	($FFFFF780).w
0001EBA6 31FC 0040 F782             		move.w	#$40,($FFFFF782).w ; set new level rotation speed
0001EBAC 21FC 0000 0000 D004        		move.l	#Map_Sonic,($FFFFD004).w
0001EBB4 31FC 0780 D002             		move.w	#$780,($FFFFD002).w
0001EBBA 11FC 0002 D01C             		move.b	#2,($FFFFD01C).w
0001EBC0 08F8 0002 D022             		bset	#2,($FFFFD022).w
0001EBC6 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001EBCC                            
0001EBCC                            Debug_DoNothing:
0001EBCC 4E75                       		rts	
0001EBCE                            ; End of function Debug_Control
0001EBCE                            
0001EBCE                            
0001EBCE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EBCE                            
0001EBCE                            
0001EBCE                            Debug_ShowItem:				; XREF: Debug_Main
0001EBCE 7000                       		moveq	#0,d0
0001EBD0 1038 FE06                  		move.b	($FFFFFE06).w,d0
0001EBD4 E748                       		lsl.w	#3,d0
0001EBD6 2172 0000 0004             		move.l	(a2,d0.w),4(a0)	; load mappings	for item
0001EBDC 3172 0006 0002             		move.w	6(a2,d0.w),2(a0) ; load	VRAM setting for item
0001EBE2 1172 0005 001A             		move.b	5(a2,d0.w),$1A(a0) ; load frame	number for item
0001EBE8 4E75                       		rts	
0001EBEA                            ; End of function Debug_ShowItem
0001EBEA                            
0001EBEA                            ; ===========================================================================
0001EBEA                            ; ---------------------------------------------------------------------------
0001EBEA                            ; Debug	list pointers
0001EBEA                            ; ---------------------------------------------------------------------------
0001EBEA                            DebugList:
0001EBEA                            	include "_inc\Debug list pointers.asm"
0001EBEA                            ; ---------------------------------------------------------------------------
0001EBEA                            ; Debug	list pointers
0001EBEA                            ; ---------------------------------------------------------------------------
0001EBEA 0000                       	dc.w Debug_GHZ-DebugList
0001EBEC 0000                       	dc.w Debug_LZ-DebugList
0001EBEE 0000                       	dc.w Debug_MZ-DebugList
0001EBF0 0000                       	dc.w Debug_SLZ-DebugList
0001EBF2 0000                       	dc.w Debug_SYZ-DebugList
0001EBF4 0000                       	dc.w Debug_SBZ-DebugList
0001EBF6 0000                       	dc.w Debug_Ending-DebugList
0001EBF6 0000                       	dc.w Debug_Ending-DebugList
0001EBF8                            
0001EBF8                            ; ---------------------------------------------------------------------------
0001EBF8                            ; Debug	list - Green Hill
0001EBF8                            ; ---------------------------------------------------------------------------
0001EBF8                            Debug_GHZ:
0001EBF8                            	include "_inc\Debug list - GHZ.asm"
0001EBF8                            ; ---------------------------------------------------------------------------
0001EBF8                            ; Debug	list - Green Hill
0001EBF8                            ; ---------------------------------------------------------------------------
0001EBF8 0010                       	dc.w $10			; number of items in list
0001EBFA 2500 AA38                  	dc.l Map_obj25+$25000000	; mappings pointer, object type * 10^6
0001EBFE 0000 27B2                  	dc.b 0,	0, $27,	$B2		; subtype, frame, VRAM setting (2 bytes)
0001EC02 2600 B068                  	dc.l Map_obj26+$26000000
0001EC06 0000 0680                  	dc.b 0,	0, 6, $80
0001EC0A 1F00 A1C0                  	dc.l Map_obj1F+$1F000000
0001EC0E 0000 0400                  	dc.b 0,	0, 4, 0
0001EC12 2200 A4A0                  	dc.l Map_obj22+$22000000
0001EC16 0000 0444                  	dc.b 0,	0, 4, $44
0001EC1A 2B00 B6AE                  	dc.l Map_obj2B+$2B000000
0001EC1E 0000 047B                  	dc.b 0,	0, 4, $7B
0001EC22 3600 DABE                  	dc.l Map_obj36+$36000000
0001EC26 0000 051B                  	dc.b 0,	0, 5, $1B
0001EC2A 1800 8BBE                  	dc.l Map_obj18+$18000000
0001EC2E 0000 4000                  	dc.b 0,	0, $40,	0
0001EC32 3B00 DBE4                  	dc.l Map_obj3B+$3B000000
0001EC36 0000 63D0                  	dc.b 0,	0, $63,	$D0
0001EC3A 4001 0298                  	dc.l Map_obj40+$40000000
0001EC3E 0000 04F0                  	dc.b 0,	0, 4, $F0
0001EC42 4100 E80C                  	dc.l Map_obj41+$41000000
0001EC46 0000 0523                  	dc.b 0,	0, 5, $23
0001EC4A 4200 EA32                  	dc.l Map_obj42+$42000000
0001EC4E 0000 249B                  	dc.b 0,	0, $24,	$9B
0001EC52 4400 ED40                  	dc.l Map_obj44+$44000000
0001EC56 0000 434C                  	dc.b 0,	0, $43,	$4C
0001EC5A 1900 8C2C                  	dc.l Map_obj48+$19000000
0001EC5E 0000 43AA                  	dc.b 0,	0, $43,	$AA
0001EC62 7901 8AA0                  	dc.l Map_obj79+$79000000
0001EC66 0100 07A0                  	dc.b 1,	0, 7, $A0
0001EC6A 4B00 AA78                  	dc.l Map_obj4B+$4B000000
0001EC6E 0000 2400                  	dc.b 0,	0, $24,	0
0001EC72 7D01 8BF0                  	dc.l Map_obj7D+$7D000000
0001EC76 0101 84B6                  	dc.b 1,	1, $84,	$B6
0001EC7A                            	even
0001EC7A                            	even
0001EC7A                            
0001EC7A                            ; ---------------------------------------------------------------------------
0001EC7A                            ; Debug	list - Labyrinth
0001EC7A                            ; ---------------------------------------------------------------------------
0001EC7A                            Debug_LZ:
0001EC7A                            	include "_inc\Debug list - LZ.asm"
0001EC7A                            ; ---------------------------------------------------------------------------
0001EC7A                            ; Debug	list - Labyrinth
0001EC7A                            ; ---------------------------------------------------------------------------
0001EC7A 0019                       	dc.w $19
0001EC7C 2500 AA38                  	dc.l Map_obj25+$25000000
0001EC80 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001EC84 2600 B068                  	dc.l Map_obj26+$26000000
0001EC88 0000 0680                  	dc.b 0,	0, 6, $80
0001EC8C 4100 E80C                  	dc.l Map_obj41+$41000000
0001EC90 0000 0523                  	dc.b 0,	0, 5, $23
0001EC94 2C00 B754                  	dc.l Map_obj2C+$2C000000
0001EC98 0800 2486                  	dc.b 8,	0, $24,	$86
0001EC9C 2D00 B940                  	dc.l Map_obj2D+$2D000000
0001ECA0 0002 84A6                  	dc.b 0,	2, $84,	$A6
0001ECA4 1601 2A8C                  	dc.l Map_obj16+$16000000
0001ECA8 0000 03CC                  	dc.b 0,	0, 3, $CC
0001ECAC 1601 2A8C                  	dc.l Map_obj16+$16000000
0001ECB0 0203 03CC                  	dc.b 2,	3, 3, $CC
0001ECB4 3300 CDBE                  	dc.l Map_obj33+$33000000
0001ECB8 0000 43DE                  	dc.b 0,	0, $43,	$DE
0001ECBC 3200 C97E                  	dc.l Map_obj32+$32000000
0001ECC0 0000 0513                  	dc.b 0,	0, 5, $13
0001ECC4 3600 DABE                  	dc.l Map_obj36+$36000000
0001ECC8 0000 051B                  	dc.b 0,	0, 5, $1B
0001ECCC 5201 0BAE                  	dc.l Map_obj52a+$52000000
0001ECD0 0400 43BC                  	dc.b 4,	0, $43,	$BC
0001ECD4 6101 2CB4                  	dc.l Map_obj61+$61000000
0001ECD8 0100 43E6                  	dc.b 1,	0, $43,	$E6
0001ECDC 6101 2CB4                  	dc.l Map_obj61+$61000000
0001ECE0 1301 43E6                  	dc.b $13, 1, $43, $E6
0001ECE4 6101 2CB4                  	dc.l Map_obj61+$61000000
0001ECE8 0500 43E6                  	dc.b 5,	0, $43,	$E6
0001ECEC 6201 2E08                  	dc.l Map_obj62+$62000000
0001ECF0 0000 443E                  	dc.b 0,	0, $44,	$3E
0001ECF4 6101 2CB4                  	dc.l Map_obj61+$61000000
0001ECF8 2702 43E6                  	dc.b $27, 2, $43, $E6
0001ECFC 6101 2CB4                  	dc.l Map_obj61+$61000000
0001ED00 3003 43E6                  	dc.b $30, 3, $43, $E6
0001ED04 6301 316A                  	dc.l Map_obj63+$63000000
0001ED08 7F00 03F6                  	dc.b $7F, 0, 3,	$F6
0001ED0C 6001 29D6                  	dc.l Map_obj60+$60000000
0001ED10 0000 0467                  	dc.b 0,	0, 4, $67
0001ED14 6401 34B0                  	dc.l Map_obj64+$64000000
0001ED18 8413 8348                  	dc.b $84, $13, $83, $48
0001ED1C 6501 3638                  	dc.l Map_obj65+$65000000
0001ED20 0202 C259                  	dc.b 2,	2, $C2,	$59
0001ED24 6501 3638                  	dc.l Map_obj65+$65000000
0001ED28 0909 C259                  	dc.b 9,	9, $C2,	$59
0001ED2C 0B01 1E26                  	dc.l Map_obj0B+$B000000
0001ED30 0000 43DE                  	dc.b 0,	0, $43,	$DE
0001ED34 0C01 1EF6                  	dc.l Map_obj0C+$C000000
0001ED38 0200 4328                  	dc.b 2,	0, $43,	$28
0001ED3C 7901 8AA0                  	dc.l Map_obj79+$79000000
0001ED40 0100 07A0                  	dc.b 1,	0, 7, $A0
0001ED44                            	even
0001ED44                            	even
0001ED44                            
0001ED44                            ; ---------------------------------------------------------------------------
0001ED44                            ; Debug	list - Marble
0001ED44                            ; ---------------------------------------------------------------------------
0001ED44                            Debug_MZ:
0001ED44                            	include "_inc\Debug list - MZ.asm"
0001ED44                            ; ---------------------------------------------------------------------------
0001ED44                            ; Debug	list - Marble
0001ED44                            ; ---------------------------------------------------------------------------
0001ED44 0012                       	dc.w $12
0001ED46 2500 AA38                  	dc.l Map_obj25+$25000000
0001ED4A 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001ED4E 2600 B068                  	dc.l Map_obj26+$26000000
0001ED52 0000 0680                  	dc.b 0,	0, 6, $80
0001ED56 2200 A4A0                  	dc.l Map_obj22+$22000000
0001ED5A 0000 0444                  	dc.b 0,	0, 4, $44
0001ED5E 3600 DABE                  	dc.l Map_obj36+$36000000
0001ED62 0000 051B                  	dc.b 0,	0, 5, $1B
0001ED66 4100 E80C                  	dc.l Map_obj41+$41000000
0001ED6A 0000 0523                  	dc.b 0,	0, 5, $23
0001ED6E 1300 BE4E                  	dc.l Map_obj14+$13000000
0001ED72 0000 0345                  	dc.b 0,	0, 3, $45
0001ED76 4600 F3F2                  	dc.l Map_obj46+$46000000
0001ED7A 0000 4000                  	dc.b 0,	0, $40,	0
0001ED7E 4C00 FD44                  	dc.l Map_obj4C+$4C000000
0001ED82 0000 63A8                  	dc.b 0,	0, $63,	$A8
0001ED86 4E01 0028                  	dc.l Map_obj4E+$4E000000
0001ED8A 0000 63A8                  	dc.b 0,	0, $63,	$A8
0001ED8E 3300 CDBE                  	dc.l Map_obj33+$33000000
0001ED92 0000 42B8                  	dc.b 0,	0, $42,	$B8
0001ED96 5001 0426                  	dc.l Map_obj50+$50000000
0001ED9A 0000 247B                  	dc.b 0,	0, $24,	$7B
0001ED9E 5101 08E2                  	dc.l Map_obj51+$51000000
0001EDA2 0000 42B8                  	dc.b 0,	0, $42,	$B8
0001EDA6 5201 0B58                  	dc.l Map_obj52+$52000000
0001EDAA 0000 02B8                  	dc.b 0,	0, 2, $B8
0001EDAE 5300 91C4                  	dc.l Map_obj53+$53000000
0001EDB2 0000 62B8                  	dc.b 0,	0, $62,	$B8
0001EDB6 5400 FD0A                  	dc.l Map_obj54+$54000000
0001EDBA 0000 8680                  	dc.b 0,	0, $86,	$80
0001EDBE 5501 0D4C                  	dc.l Map_obj55+$55000000
0001EDC2 0000 04B8                  	dc.b 0,	0, 4, $B8
0001EDC6 7801 8718                  	dc.l Map_obj78+$78000000
0001EDCA 0000 24FF                  	dc.b 0,	0, $24,	$FF
0001EDCE 7901 8AA0                  	dc.l Map_obj79+$79000000
0001EDD2 0100 07A0                  	dc.b 1,	0, 7, $A0
0001EDD6                            	even
0001EDD6                            	even
0001EDD6                            
0001EDD6                            ; ---------------------------------------------------------------------------
0001EDD6                            ; Debug	list - Star Light
0001EDD6                            ; ---------------------------------------------------------------------------
0001EDD6                            Debug_SLZ:
0001EDD6                            	include "_inc\Debug list - SLZ.asm"
0001EDD6                            ; ---------------------------------------------------------------------------
0001EDD6                            ; Debug	list - Star Light
0001EDD6                            ; ---------------------------------------------------------------------------
0001EDD6 000F                       	dc.w $F
0001EDD8 2500 AA38                  	dc.l Map_obj25+$25000000
0001EDDC 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001EDE0 2600 B068                  	dc.l Map_obj26+$26000000
0001EDE4 0000 0680                  	dc.b 0,	0, 6, $80
0001EDE8 5901 184E                  	dc.l Map_obj59+$59000000
0001EDEC 0000 4000                  	dc.b 0,	0, $40,	0
0001EDF0 5300 91C4                  	dc.l Map_obj53+$53000000
0001EDF4 0002 44E0                  	dc.b 0,	2, $44,	$E0
0001EDF8 1800 8C1C                  	dc.l Map_obj18b+$18000000
0001EDFC 0000 4000                  	dc.b 0,	0, $40,	0
0001EE00 5A01 1988                  	dc.l Map_obj5A+$5A000000
0001EE04 0000 4000                  	dc.b 0,	0, $40,	0
0001EE08 5B01 1B40                  	dc.l Map_obj5B+$5B000000
0001EE0C 0000 4000                  	dc.b 0,	0, $40,	0
0001EE10 5D01 2110                  	dc.l Map_obj5D+$5D000000
0001EE14 0000 43A0                  	dc.b 0,	0, $43,	$A0
0001EE18 5E01 24A2                  	dc.l Map_obj5E+$5E000000
0001EE1C 0000 0374                  	dc.b 0,	0, 3, $74
0001EE20 4100 E80C                  	dc.l Map_obj41+$41000000
0001EE24 0000 0523                  	dc.b 0,	0, 5, $23
0001EE28 1300 BE4E                  	dc.l Map_obj14+$13000000
0001EE2C 0000 0480                  	dc.b 0,	0, 4, $80
0001EE30 1C00 92D4                  	dc.l Map_obj1C+$1C000000
0001EE34 0000 44D8                  	dc.b 0,	0, $44,	$D8
0001EE38 5F01 2720                  	dc.l Map_obj5F+$5F000000
0001EE3C 0000 0400                  	dc.b 0,	0, 4, 0
0001EE40 6001 29D6                  	dc.l Map_obj60+$60000000
0001EE44 0000 2429                  	dc.b 0,	0, $24,	$29
0001EE48 7901 8AA0                  	dc.l Map_obj79+$79000000
0001EE4C 0100 07A0                  	dc.b 1,	0, 7, $A0
0001EE50                            	even
0001EE50                            	even
0001EE50                            
0001EE50                            ; ---------------------------------------------------------------------------
0001EE50                            ; Debug	list - Spring Yard
0001EE50                            ; ---------------------------------------------------------------------------
0001EE50                            Debug_SYZ:
0001EE50                            	include "_inc\Debug list - SYZ.asm"
0001EE50                            ; ---------------------------------------------------------------------------
0001EE50                            ; Debug	list - Spring Yard
0001EE50                            ; ---------------------------------------------------------------------------
0001EE50 000F                       	dc.w $F
0001EE52 2500 AA38                  	dc.l Map_obj25+$25000000
0001EE56 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001EE5A 2600 B068                  	dc.l Map_obj26+$26000000
0001EE5E 0000 0680                  	dc.b 0,	0, 6, $80
0001EE62 3600 DABE                  	dc.l Map_obj36+$36000000
0001EE66 0000 051B                  	dc.b 0,	0, 5, $1B
0001EE6A 4100 E80C                  	dc.l Map_obj41+$41000000
0001EE6E 0000 0523                  	dc.b 0,	0, 5, $23
0001EE72 4300 EC92                  	dc.l Map_obj43+$43000000
0001EE76 0000 04B8                  	dc.b 0,	0, 4, $B8
0001EE7A 1200 F470                  	dc.l Map_obj12+$12000000
0001EE7E 0000 0000                  	dc.b 0,	0, 0, 0
0001EE82 4700 F5EC                  	dc.l Map_obj47+$47000000
0001EE86 0000 0380                  	dc.b 0,	0, 3, $80
0001EE8A 1F00 A1C0                  	dc.l Map_obj1F+$1F000000
0001EE8E 0000 0400                  	dc.b 0,	0, 4, 0
0001EE92 2200 A4A0                  	dc.l Map_obj22+$22000000
0001EE96 0000 0444                  	dc.b 0,	0, 4, $44
0001EE9A 5001 0426                  	dc.l Map_obj50+$50000000
0001EE9E 0000 247B                  	dc.b 0,	0, $24,	$7B
0001EEA2 1800 8C0A                  	dc.l Map_obj18a+$18000000
0001EEA6 0000 4000                  	dc.b 0,	0, $40,	0
0001EEAA 5601 120E                  	dc.l Map_obj56+$56000000
0001EEAE 0000 4000                  	dc.b 0,	0, $40,	0
0001EEB2 3200 C97E                  	dc.l Map_obj32+$32000000
0001EEB6 0000 0513                  	dc.b 0,	0, 5, $13
0001EEBA 7801 8718                  	dc.l Map_obj78+$78000000
0001EEBE 0000 24FF                  	dc.b 0,	0, $24,	$FF
0001EEC2 7901 8AA0                  	dc.l Map_obj79+$79000000
0001EEC6 0100 07A0                  	dc.b 1,	0, 7, $A0
0001EECA                            	even
0001EECA                            	even
0001EECA                            
0001EECA                            ; ---------------------------------------------------------------------------
0001EECA                            ; Debug	list - Scrap Brain
0001EECA                            ; ---------------------------------------------------------------------------
0001EECA                            Debug_SBZ:
0001EECA                            	include "_inc\Debug list - SBZ.asm"
0001EECA                            ; ---------------------------------------------------------------------------
0001EECA                            ; Debug	list - Scrap Brain
0001EECA                            ; ---------------------------------------------------------------------------
0001EECA 001D                       	dc.w $1D
0001EECC 2500 AA38                  	dc.l Map_obj25+$25000000
0001EED0 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001EED4 2600 B068                  	dc.l Map_obj26+$26000000
0001EED8 0000 0680                  	dc.b 0,	0, 6, $80
0001EEDC 5F01 2720                  	dc.l Map_obj5F+$5F000000
0001EEE0 0000 0400                  	dc.b 0,	0, 4, 0
0001EEE4 6001 29D6                  	dc.l Map_obj60+$60000000
0001EEE8 0000 0429                  	dc.b 0,	0, 4, $29
0001EEEC 7801 8718                  	dc.l Map_obj78+$78000000
0001EEF0 0000 22B0                  	dc.b 0,	0, $22,	$B0
0001EEF4 1501 15AA                  	dc.l Map_obj15b+$15000000
0001EEF8 0702 4391                  	dc.b 7,	2, $43,	$91
0001EEFC 6701 7038                  	dc.l Map_obj67+$67000000
0001EF00 E000 C344                  	dc.b $E0, 0, $C3, $44
0001EF04 5201 0B58                  	dc.l Map_obj52+$52000000
0001EF08 2802 22C0                  	dc.b $28, 2, $22, $C0
0001EF0C 3200 C97E                  	dc.l Map_obj32+$32000000
0001EF10 0000 0513                  	dc.b 0,	0, 5, $13
0001EF14 6901 7292                  	dc.l Map_obj69+$69000000
0001EF18 0300 4492                  	dc.b 3,	0, $44,	$92
0001EF1C 6901 72EC                  	dc.l Map_obj69a+$69000000
0001EF20 8300 04DF                  	dc.b $83, 0, 4,	$DF
0001EF24 6A01 754A                  	dc.l Map_obj6A+$6A000000
0001EF28 0200 43B5                  	dc.b 2,	0, $43,	$B5
0001EF2C 5300 91C4                  	dc.l Map_obj53+$53000000
0001EF30 0000 43F5                  	dc.b 0,	0, $43,	$F5
0001EF34 5201 0B58                  	dc.l Map_obj52+$52000000
0001EF38 3903 4460                  	dc.b $39, 3, $44, $60
0001EF3C 6B01 791A                  	dc.l Map_obj6B+$6B000000
0001EF40 0000 22C0                  	dc.b 0,	0, $22,	$C0
0001EF44 2A00 946A                  	dc.l Map_obj2A+$2A000000
0001EF48 0000 42E8                  	dc.b 0,	0, $42,	$E8
0001EF4C 6B01 791A                  	dc.l Map_obj6B+$6B000000
0001EF50 1301 22C0                  	dc.b $13, 1, $22, $C0
0001EF54 6A01 754A                  	dc.l Map_obj6A+$6A000000
0001EF58 0100 43B5                  	dc.b 1,	0, $43,	$B5
0001EF5C 6B01 791A                  	dc.l Map_obj6B+$6B000000
0001EF60 2401 22C0                  	dc.b $24, 1, $22, $C0
0001EF64 6A01 754A                  	dc.l Map_obj6A+$6A000000
0001EF68 0402 43B5                  	dc.b 4,	2, $43,	$B5
0001EF6C 6B01 791A                  	dc.l Map_obj6B+$6B000000
0001EF70 3401 22C0                  	dc.b $34, 1, $22, $C0
0001EF74 6C01 7ADC                  	dc.l Map_obj6C+$6C000000
0001EF78 0000 44C3                  	dc.b 0,	0, $44,	$C3
0001EF7C 6D00 F0E2                  	dc.l Map_obj6D+$6D000000
0001EF80 6400 83D9                  	dc.b $64, 0, $83, $D9
0001EF84 6D00 F0E2                  	dc.l Map_obj6D+$6D000000
0001EF88 640B 83D9                  	dc.b $64, $B, $83, $D9
0001EF8C 6E01 7B92                  	dc.l Map_obj6E+$6E000000
0001EF90 0400 047E                  	dc.b 4,	0, 4, $7E
0001EF94 7001 7FD8                  	dc.l Map_obj70+$70000000
0001EF98 0000 42F0                  	dc.b 0,	0, $42,	$F0
0001EF9C 7101 1FB6                  	dc.l Map_obj71+$71000000
0001EFA0 1100 8680                  	dc.b $11, 0, $86, $80
0001EFA4 1E00 98D8                  	dc.l Map_obj1E+$1E000000
0001EFA8 0400 2302                  	dc.b 4,	0, $23,	2
0001EFAC 7901 8AA0                  	dc.l Map_obj79+$79000000
0001EFB0 0100 07A0                  	dc.b 1,	0, 7, $A0
0001EFB4                            	even
0001EFB4                            	even
0001EFB4                            
0001EFB4                            ; ---------------------------------------------------------------------------
0001EFB4                            ; Debug	list - ending sequence / special stage
0001EFB4                            ; ---------------------------------------------------------------------------
0001EFB4                            Debug_Ending:
0001EFB4                            	include "_inc\Debug list - Ending and SS.asm"
0001EFB4                            ; ---------------------------------------------------------------------------
0001EFB4                            ; Debug	list - ending sequence / special stage
0001EFB4                            ; ---------------------------------------------------------------------------
0001EFB4 000D                       	dc.w $D
0001EFB6 2500 AA38                  	dc.l Map_obj25+$25000000
0001EFBA 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001EFBE 4700 F5EC                  	dc.l Map_obj47+$47000000
0001EFC2 0000 0380                  	dc.b 0,	0, 3, $80
0001EFC6 2800 9EF2                  	dc.l Map_obj28a+$28000000
0001EFCA 0A00 05A0                  	dc.b $A, 0, 5, $A0
0001EFCE 2800 9EF2                  	dc.l Map_obj28a+$28000000
0001EFD2 0B00 05A0                  	dc.b $B, 0, 5, $A0
0001EFD6 2800 9EF2                  	dc.l Map_obj28a+$28000000
0001EFDA 0C00 05A0                  	dc.b $C, 0, 5, $A0
0001EFDE 2800 9EDA                  	dc.l Map_obj28+$28000000
0001EFE2 0D00 0553                  	dc.b $D, 0, 5, $53
0001EFE6 2800 9EDA                  	dc.l Map_obj28+$28000000
0001EFEA 0E00 0553                  	dc.b $E, 0, 5, $53
0001EFEE 2800 9EDA                  	dc.l Map_obj28+$28000000
0001EFF2 0F00 0573                  	dc.b $F, 0, 5, $73
0001EFF6 2800 9EDA                  	dc.l Map_obj28+$28000000
0001EFFA 1000 0573                  	dc.b $10, 0, 5,	$73
0001EFFE 2800 9EF2                  	dc.l Map_obj28a+$28000000
0001F002 1100 0585                  	dc.b $11, 0, 5,	$85
0001F006 2800 9F0A                  	dc.l Map_obj28b+$28000000
0001F00A 1200 0593                  	dc.b $12, 0, 5,	$93
0001F00E 2800 9EF2                  	dc.l Map_obj28a+$28000000
0001F012 1300 0565                  	dc.b $13, 0, 5,	$65
0001F016 2800 9F0A                  	dc.l Map_obj28b+$28000000
0001F01A 1400 05B3                  	dc.b $14, 0, 5,	$B3
0001F01E                            	even
0001F01E                            	even
0001F01E                            
0001F01E                            ; ---------------------------------------------------------------------------
0001F01E                            ; Main level load blocks
0001F01E                            ; ---------------------------------------------------------------------------
0001F01E                            MainLoadBlocks:
0001F01E                            	include "_inc\Main level load blocks.asm"
0001F01E                            ; ---------------------------------------------------------------------------
0001F01E                            ; Main level load blocks
0001F01E                            ;
0001F01E                            ; ===FORMAT===
0001F01E                            ; level	patterns + (1st	PLC num	* 10^6)
0001F01E                            ; 16x16	mappings + (2nd	PLC num	* 10^6)
0001F01E                            ; 256x256 mappings
0001F01E                            ; blank, music (unused), pal index (unused), pal index
0001F01E                            ; ---------------------------------------------------------------------------
0001F01E 0000 0000                  	dc.l Nem_GHZ+$4000000
0001F022 0000 0000                  	dc.l Blk16_GHZ+$5000000
0001F026 0000 0000                  	dc.l Blk256_GHZ
0001F02A 0081 0404                  	dc.b 0,	$81, 4,	4
0001F02E 0000 0000                  	dc.l Nem_LZ+$6000000
0001F032 0000 0000                  	dc.l Blk16_LZ+$7000000
0001F036 0000 0000                  	dc.l Blk256_LZ
0001F03A 0082 0505                  	dc.b 0,	$82, 5,	5
0001F03E 0000 0000                  	dc.l Nem_MZ+$8000000
0001F042 0000 0000                  	dc.l Blk16_MZ+$9000000
0001F046 0000 0000                  	dc.l Blk256_MZ
0001F04A 0083 0606                  	dc.b 0,	$83, 6,	6
0001F04E 0000 0000                  	dc.l Nem_SLZ+$A000000
0001F052 0000 0000                  	dc.l Blk16_SLZ+$B000000
0001F056 0000 0000                  	dc.l Blk256_SLZ
0001F05A 0084 0707                  	dc.b 0,	$84, 7,	7
0001F05E 0000 0000                  	dc.l Nem_SYZ+$C000000
0001F062 0000 0000                  	dc.l Blk16_SYZ+$D000000
0001F066 0000 0000                  	dc.l Blk256_SYZ
0001F06A 0085 0808                  	dc.b 0,	$85, 8,	8
0001F06E 0000 0000                  	dc.l Nem_SBZ+$E000000
0001F072 0000 0000                  	dc.l Blk16_SBZ+$F000000
0001F076 0000 0000                  	dc.l Blk256_SBZ
0001F07A 0086 0909                  	dc.b 0,	$86, 9,	9
0001F07E 0000 0000                  	dc.l Nem_GHZ_2nd	; main load block for ending
0001F082 0000 0000                  	dc.l Blk16_GHZ
0001F086 0000 0000                  	dc.l Blk256_GHZ
0001F08A 0086 1313                  	dc.b 0,	$86, $13, $13
0001F08E                            	even
0001F08E                            	even
0001F08E                            
0001F08E                            ; ---------------------------------------------------------------------------
0001F08E                            ; Pattern load cues
0001F08E                            ; ---------------------------------------------------------------------------
0001F08E                            ArtLoadCues:
0001F08E                            	include "_inc\Pattern load cues.asm"
0001F08E                            ; ---------------------------------------------------------------------------
0001F08E                            ; Pattern load cues - index
0001F08E                            ; ---------------------------------------------------------------------------
0001F08E 0000 0000                  	dc.w PLC_Main-ArtLoadCues, PLC_Main2-ArtLoadCues
0001F092 0000 0000                  	dc.w PLC_Explode-ArtLoadCues, PLC_GameOver-ArtLoadCues
0001F096 0000 0000                  	dc.w PLC_GHZ-ArtLoadCues, PLC_GHZ2-ArtLoadCues
0001F09A 0000 0000                  	dc.w PLC_LZ-ArtLoadCues, PLC_LZ2-ArtLoadCues
0001F09E 0000 0000                  	dc.w PLC_MZ-ArtLoadCues, PLC_MZ2-ArtLoadCues
0001F0A2 0000 0000                  	dc.w PLC_SLZ-ArtLoadCues, PLC_SLZ2-ArtLoadCues
0001F0A6 0000 0000                  	dc.w PLC_SYZ-ArtLoadCues, PLC_SYZ2-ArtLoadCues
0001F0AA 0000 0000                  	dc.w PLC_SBZ-ArtLoadCues, PLC_SBZ2-ArtLoadCues
0001F0AE 0000 0000                  	dc.w PLC_TitleCard-ArtLoadCues,	PLC_Boss-ArtLoadCues
0001F0B2 0000 0000                  	dc.w PLC_Signpost-ArtLoadCues, PLC_Warp-ArtLoadCues
0001F0B6 0000 0000                  	dc.w PLC_SpeStage-ArtLoadCues, PLC_GHZAnimals-ArtLoadCues
0001F0BA 0000 0000                  	dc.w PLC_LZAnimals-ArtLoadCues,	PLC_MZAnimals-ArtLoadCues
0001F0BE 0000 0000                  	dc.w PLC_SLZAnimals-ArtLoadCues, PLC_SYZAnimals-ArtLoadCues
0001F0C2 0000 0000                  	dc.w PLC_SBZAnimals-ArtLoadCues, PLC_SpeStResult-ArtLoadCues
0001F0C6 0000 0000                  	dc.w PLC_Ending-ArtLoadCues, PLC_TryAgain-ArtLoadCues
0001F0CA 0000 0000                  	dc.w PLC_EggmanSBZ2-ArtLoadCues, PLC_FZBoss-ArtLoadCues
0001F0CE                            ; ---------------------------------------------------------------------------
0001F0CE                            ; Pattern load cues - standard block 1
0001F0CE                            ; ---------------------------------------------------------------------------
0001F0CE 0004                       PLC_Main:	dc.w 4
0001F0D0 0000 0000                  		dc.l Nem_Lamp		; lamppost
0001F0D4 D800                       		dc.w $D800
0001F0D6 0000 0000                  		dc.l Nem_Hud		; HUD
0001F0DA D940                       		dc.w $D940
0001F0DC 0000 0000                  		dc.l Nem_Lives		; lives	counter
0001F0E0 FA80                       		dc.w $FA80
0001F0E2 0000 0000                  		dc.l Nem_Ring		; rings
0001F0E6 F640                       		dc.w $F640
0001F0E8 0000 0000                  		dc.l Nem_Points		; points from enemy
0001F0EC F2E0                       		dc.w $F2E0
0001F0EE                            ; ---------------------------------------------------------------------------
0001F0EE                            ; Pattern load cues - standard block 2
0001F0EE                            ; ---------------------------------------------------------------------------
0001F0EE 0002                       PLC_Main2:	dc.w 2
0001F0F0 0000 0000                  		dc.l Nem_Monitors	; monitors
0001F0F4 D000                       		dc.w $D000
0001F0F6 0000 0000                  		dc.l Nem_Shield		; shield
0001F0FA A820                       		dc.w $A820
0001F0FC 0000 0000                  		dc.l Nem_Stars		; invincibility	stars
0001F100 AB80                       		dc.w $AB80
0001F102                            ; ---------------------------------------------------------------------------
0001F102                            ; Pattern load cues - explosion
0001F102                            ; ---------------------------------------------------------------------------
0001F102 0000                       PLC_Explode:	dc.w 0
0001F104 0000 0000                  		dc.l Nem_Explode	; explosion
0001F108 B400                       		dc.w $B400
0001F10A                            ; ---------------------------------------------------------------------------
0001F10A                            ; Pattern load cues - game/time	over
0001F10A                            ; ---------------------------------------------------------------------------
0001F10A 0000                       PLC_GameOver:	dc.w 0
0001F10C 0000 0000                  		dc.l Nem_GameOver	; game/time over
0001F110 ABC0                       		dc.w $ABC0
0001F112                            ; ---------------------------------------------------------------------------
0001F112                            ; Pattern load cues - Green Hill
0001F112                            ; ---------------------------------------------------------------------------
0001F112 000A                       PLC_GHZ:	dc.w $A
0001F114 0000 0000                  		dc.l Nem_GHZ	; GHZ main patterns
0001F118 0000                       		dc.w 0
0001F11A 0000 0000                  		dc.l Nem_Stalk		; flower stalk
0001F11E 6B00                       		dc.w $6B00
0001F120 0000 0000                  		dc.l Nem_PplRock	; purple rock
0001F124 7A00                       		dc.w $7A00
0001F126 0000 0000                  		dc.l Nem_Crabmeat	; crabmeat enemy
0001F12A 8000                       		dc.w $8000
0001F12C 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001F130 8880                       		dc.w $8880
0001F132 0000 0000                  		dc.l Nem_Chopper	; chopper enemy
0001F136 8F60                       		dc.w $8F60
0001F138 0000 0000                  		dc.l Nem_Newtron	; newtron enemy
0001F13C 9360                       		dc.w $9360
0001F13E 0000 0000                  		dc.l Nem_Motobug	; motobug enemy
0001F142 9E00                       		dc.w $9E00
0001F144 0000 0000                  		dc.l Nem_Spikes		; spikes
0001F148 A360                       		dc.w $A360
0001F14A 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001F14E A460                       		dc.w $A460
0001F150 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001F154 A660                       		dc.w $A660
0001F156 0000 0000                  		dc.l ArtNem_DignlSprng	; diagonal spring
0001F15A A860                       		dc.W $A860
0001F15C 0005                       PLC_GHZ2:	dc.w 5
0001F15E 0000 0000                  		dc.l Nem_Swing		; swinging platform
0001F162 7000                       		dc.w $7000
0001F164 0000 0000                  		dc.l Nem_Bridge		; bridge
0001F168 71C0                       		dc.w $71C0
0001F16A 0000 0000                  		dc.l Nem_SpikePole	; spiked pole
0001F16E 7300                       		dc.w $7300
0001F170 0000 0000                  		dc.l Nem_Ball		; giant	ball
0001F174 7540                       		dc.w $7540
0001F176 0000 0000                  		dc.l Nem_GhzWall1	; breakable wall
0001F17A A1E0                       		dc.w $A1E0
0001F17C 0000 0000                  		dc.l Nem_GhzWall2	; normal wall
0001F180 6980                       		dc.w $6980
0001F182                            ; ---------------------------------------------------------------------------
0001F182                            ; Pattern load cues - Labyrinth
0001F182                            ; ---------------------------------------------------------------------------
0001F182 000B                       PLC_LZ:		dc.w $B
0001F184 0000 0000                  		dc.l Nem_LZ		; LZ main patterns
0001F188 0000                       		dc.w 0
0001F18A 0000 0000                  		dc.l Nem_LzBlock1	; block
0001F18E 3C00                       		dc.w $3C00
0001F190 0000 0000                  		dc.l Nem_LzBlock2	; blocks
0001F194 3E00                       		dc.w $3E00
0001F196 0000 0000                  		dc.l Nem_Splash		; waterfalls and splash
0001F19A 4B20                       		dc.w $4B20
0001F19C 0000 0000                  		dc.l Nem_Water		; water	surface
0001F1A0 6000                       		dc.w $6000
0001F1A2 0000 0000                  		dc.l Nem_LzSpikeBall	; spiked ball
0001F1A6 6200                       		dc.w $6200
0001F1A8 0000 0000                  		dc.l Nem_FlapDoor	; flapping door
0001F1AC 6500                       		dc.w $6500
0001F1AE 0000 0000                  		dc.l Nem_Bubbles	; bubbles and numbers
0001F1B2 6900                       		dc.w $6900
0001F1B4 0000 0000                  		dc.l Nem_LzBlock3	; block
0001F1B8 7780                       		dc.w $7780
0001F1BA 0000 0000                  		dc.l Nem_LzDoor1	; vertical door
0001F1BE 7880                       		dc.w $7880
0001F1C0 0000 0000                  		dc.l Nem_Harpoon	; harpoon
0001F1C4 7980                       		dc.w $7980
0001F1C6 0000 0000                  		dc.l Nem_Burrobot	; burrobot enemy
0001F1CA 94C0                       		dc.w $94C0
0001F1CC 000C                       PLC_LZ2:	dc.w $C
0001F1CE 0000 0000                  		dc.l Nem_LzPole		; pole that breaks
0001F1D2 7BC0                       		dc.w $7BC0
0001F1D4 0000 0000                  		dc.l Nem_LzDoor2	; large	horizontal door
0001F1D8 7CC0                       		dc.w $7CC0
0001F1DA 0000 0000                  		dc.l Nem_LzWheel	; wheel
0001F1DE 7EC0                       		dc.w $7EC0
0001F1E0 0000 0000                  		dc.l Nem_Gargoyle	; gargoyle head
0001F1E4 5D20                       		dc.w $5D20
0001F1E6 0000 0000                  		dc.l Nem_LzSonic	; Sonic	holding	his breath
0001F1EA 8800                       		dc.w $8800
0001F1EC 0000 0000                  		dc.l Nem_LzPlatfm	; rising platform
0001F1F0 89E0                       		dc.w $89E0
0001F1F2 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001F1F6 8CE0                       		dc.w $8CE0
0001F1F8 0000 0000                  		dc.l Nem_Jaws		; jaws enemy
0001F1FC 90C0                       		dc.w $90C0
0001F1FE 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001F202 A1E0                       		dc.w $A1E0
0001F204 0000 0000                  		dc.l Nem_Cork		; cork block
0001F208 A000                       		dc.w $A000
0001F20A 0000 0000                  		dc.l Nem_Spikes		; spikes
0001F20E A360                       		dc.w $A360
0001F210 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001F214 A460                       		dc.w $A460
0001F216 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001F21A A660                       		dc.w $A660
0001F21C 0000 0000                  		dc.l ArtNem_DignlSprng	; diagonal spring
0001F220 A860                       		dc.W $A860
0001F222                            ; ---------------------------------------------------------------------------
0001F222                            ; Pattern load cues - Marble
0001F222                            ; ---------------------------------------------------------------------------
0001F222 0009                       PLC_MZ:		dc.w 9
0001F224 0000 0000                  		dc.l Nem_MZ		; MZ main patterns
0001F228 0000                       		dc.w 0
0001F22A 0000 0000                  		dc.l Nem_MzMetal	; metal	blocks
0001F22E 6000                       		dc.w $6000
0001F230 0000 0000                  		dc.l Nem_MzFire		; fireballs
0001F234 68A0                       		dc.w $68A0
0001F236 0000 0000                  		dc.l Nem_Swing		; swinging platform
0001F23A 7000                       		dc.w $7000
0001F23C 0000 0000                  		dc.l Nem_MzGlass	; green	glassy block
0001F240 71C0                       		dc.w $71C0
0001F242 0000 0000                  		dc.l Nem_Lava		; lava
0001F246 7500                       		dc.w $7500
0001F248 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001F24C 8880                       		dc.w $8880
0001F24E 0000 0000                  		dc.l Nem_Yadrin		; yadrin enemy
0001F252 8F60                       		dc.w $8F60
0001F254 0000 0000                  		dc.l Nem_Basaran	; basaran enemy
0001F258 9700                       		dc.w $9700
0001F25A 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001F25E 9FE0                       		dc.w $9FE0
0001F260 0004                       PLC_MZ2:	dc.w 4
0001F262 0000 0000                  		dc.l Nem_MzSwitch	; switch
0001F266 A260                       		dc.w $A260
0001F268 0000 0000                  		dc.l Nem_Spikes		; spikes
0001F26C A360                       		dc.w $A360
0001F26E 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001F272 A460                       		dc.w $A460
0001F274 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001F278 A660                       		dc.w $A660
0001F27A 0000 0000                  		dc.l ArtNem_DignlSprng	; diagonal spring
0001F27E A860                       		dc.W $A860
0001F280 0000 0000                  		dc.l Nem_MzBlock	; green	stone block
0001F284 5700                       		dc.w $5700
0001F286                            ; ---------------------------------------------------------------------------
0001F286                            ; Pattern load cues - Star Light
0001F286                            ; ---------------------------------------------------------------------------
0001F286 0008                       PLC_SLZ:	dc.w 8
0001F288 0000 0000                  		dc.l Nem_SLZ		; SLZ main patterns
0001F28C 0000                       		dc.w 0
0001F28E 0000 0000                  		dc.l Nem_Bomb		; bomb enemy
0001F292 8000                       		dc.w $8000
0001F294 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001F298 8520                       		dc.w $8520
0001F29A 0000 0000                  		dc.l Nem_MzFire		; fireballs
0001F29E 9000                       		dc.w $9000
0001F2A0 0000 0000                  		dc.l Nem_SlzBlock	; block
0001F2A4 9C00                       		dc.w $9C00
0001F2A6 0000 0000                  		dc.l Nem_SlzWall	; breakable wall
0001F2AA A260                       		dc.w $A260
0001F2AC 0000 0000                  		dc.l Nem_Spikes		; spikes
0001F2B0 A360                       		dc.w $A360
0001F2B2 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001F2B6 A460                       		dc.w $A460
0001F2B8 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001F2BC A660                       		dc.w $A660
0001F2BE 0000 0000                  		dc.l ArtNem_DignlSprng	; diagonal spring
0001F2C2 A860                       		dc.W $A860
0001F2C4 0005                       PLC_SLZ2:	dc.w 5
0001F2C6 0000 0000                  		dc.l Nem_Seesaw		; seesaw
0001F2CA 6E80                       		dc.w $6E80
0001F2CC 0000 0000                  		dc.l Nem_Fan		; fan
0001F2D0 7400                       		dc.w $7400
0001F2D2 0000 0000                  		dc.l Nem_Pylon		; foreground pylon
0001F2D6 7980                       		dc.w $7980
0001F2D8 0000 0000                  		dc.l Nem_SlzSwing	; swinging platform
0001F2DC 7B80                       		dc.w $7B80
0001F2DE 0000 0000                  		dc.l Nem_SlzCannon	; fireball launcher
0001F2E2 9B00                       		dc.w $9B00
0001F2E4 0000 0000                  		dc.l Nem_SlzSpike	; spikeball
0001F2E8 9E00                       		dc.w $9E00
0001F2EA                            ; ---------------------------------------------------------------------------
0001F2EA                            ; Pattern load cues - Spring Yard
0001F2EA                            ; ---------------------------------------------------------------------------
0001F2EA 0004                       PLC_SYZ:	dc.w 4
0001F2EC 0000 0000                  		dc.l Nem_SYZ		; SYZ main patterns
0001F2F0 0000                       		dc.w 0
0001F2F2 0000 0000                  		dc.l Nem_Crabmeat	; crabmeat enemy
0001F2F6 8000                       		dc.w $8000
0001F2F8 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001F2FC 8880                       		dc.w $8880
0001F2FE 0000 0000                  		dc.l Nem_Yadrin		; yadrin enemy
0001F302 8F60                       		dc.w $8F60
0001F304 0000 0000                  		dc.l Nem_Roller		; roller enemy
0001F308 9700                       		dc.w $9700
0001F30A 0007                       PLC_SYZ2:	dc.w 7
0001F30C 0000 0000                  		dc.l Nem_Bumper		; bumper
0001F310 7000                       		dc.w $7000
0001F312 0000 0000                  		dc.l Nem_SyzSpike1	; large	spikeball
0001F316 72C0                       		dc.w $72C0
0001F318 0000 0000                  		dc.l Nem_SyzSpike2	; small	spikeball
0001F31C 7740                       		dc.w $7740
0001F31E 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001F322 9FE0                       		dc.w $9FE0
0001F324 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001F328 A1E0                       		dc.w $A1E0
0001F32A 0000 0000                  		dc.l Nem_Spikes		; spikes
0001F32E A360                       		dc.w $A360
0001F330 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001F334 A460                       		dc.w $A460
0001F336 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001F33A A660                       		dc.w $A660
0001F33C 0000 0000                  		dc.l ArtNem_DignlSprng	; diagonal spring
0001F340 A860                       		dc.W $A860
0001F342                            ; ---------------------------------------------------------------------------
0001F342                            ; Pattern load cues - Scrap Brain
0001F342                            ; ---------------------------------------------------------------------------
0001F342 000B                       PLC_SBZ:	dc.w $B
0001F344 0000 0000                  		dc.l Nem_SBZ		; SBZ main patterns
0001F348 0000                       		dc.w 0
0001F34A 0000 0000                  		dc.l Nem_Stomper	; moving platform and stomper
0001F34E 5800                       		dc.w $5800
0001F350 0000 0000                  		dc.l Nem_SbzDoor1	; door
0001F354 5D00                       		dc.w $5D00
0001F356 0000 0000                  		dc.l Nem_Girder		; girder
0001F35A 5E00                       		dc.w $5E00
0001F35C 0000 0000                  		dc.l Nem_BallHog	; ball hog enemy
0001F360 6040                       		dc.w $6040
0001F362 0000 0000                  		dc.l Nem_SbzWheel1	; spot on large	wheel
0001F366 6880                       		dc.w $6880
0001F368 0000 0000                  		dc.l Nem_SbzWheel2	; wheel	that grabs Sonic
0001F36C 6900                       		dc.w $6900
0001F36E 0000 0000                  		dc.l Nem_SyzSpike1	; large	spikeball
0001F372 7220                       		dc.w $7220
0001F374 0000 0000                  		dc.l Nem_Cutter		; pizza	cutter
0001F378 76A0                       		dc.w $76A0
0001F37A 0000 0000                  		dc.l Nem_FlamePipe	; flaming pipe
0001F37E 7B20                       		dc.w $7B20
0001F380 0000 0000                  		dc.l Nem_SbzFloor	; collapsing floor
0001F384 7EA0                       		dc.w $7EA0
0001F386 0000 0000                  		dc.l Nem_SbzBlock	; vanishing block
0001F38A 9860                       		dc.w $9860
0001F38C 000C                       PLC_SBZ2:	dc.w $C
0001F38E 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001F392 5600                       		dc.w $5600
0001F394 0000 0000                  		dc.l Nem_Bomb		; bomb enemy
0001F398 8000                       		dc.w $8000
0001F39A 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001F39E 8520                       		dc.w $8520
0001F3A0 0000 0000                  		dc.l Nem_SlideFloor	; floor	that slides away
0001F3A4 8C00                       		dc.w $8C00
0001F3A6 0000 0000                  		dc.l Nem_SbzDoor2	; horizontal door
0001F3AA 8DE0                       		dc.w $8DE0
0001F3AC 0000 0000                  		dc.l Nem_Electric	; electric orb
0001F3B0 8FC0                       		dc.w $8FC0
0001F3B2 0000 0000                  		dc.l Nem_TrapDoor	; trapdoor
0001F3B6 9240                       		dc.w $9240
0001F3B8 0000 0000                  		dc.l Nem_SbzFloor	; collapsing floor
0001F3BC 7F20                       		dc.w $7F20
0001F3BE 0000 0000                  		dc.l Nem_SpinPform	; small	spinning platform
0001F3C2 9BE0                       		dc.w $9BE0
0001F3C4 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001F3C8 A1E0                       		dc.w $A1E0
0001F3CA 0000 0000                  		dc.l Nem_Spikes		; spikes
0001F3CE A360                       		dc.w $A360
0001F3D0 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001F3D4 A460                       		dc.w $A460
0001F3D6 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001F3DA A660                       		dc.w $A660
0001F3DC 0000 0000                  		dc.l ArtNem_DignlSprng	; diagonal spring
0001F3E0 A860                       		dc.W $A860
0001F3E2                            ; ---------------------------------------------------------------------------
0001F3E2                            ; Pattern load cues - title card
0001F3E2                            ; ---------------------------------------------------------------------------
0001F3E2 0000                       PLC_TitleCard:	dc.w 0
0001F3E4 0000 0000                  		dc.l Nem_TitleCard
0001F3E8 B000                       		dc.w $B000
0001F3EA                            ; ---------------------------------------------------------------------------
0001F3EA                            ; Pattern load cues - act 3 boss
0001F3EA                            ; ---------------------------------------------------------------------------
0001F3EA 0005                       PLC_Boss:	dc.w 5
0001F3EC 0000 0000                  		dc.l Nem_Eggman		; Eggman main patterns
0001F3F0 8000                       		dc.w $8000
0001F3F2 0000 0000                  		dc.l Nem_Weapons	; Eggman's weapons
0001F3F6 8D80                       		dc.w $8D80
0001F3F8 0000 0000                  		dc.l Nem_Prison		; prison capsule
0001F3FC 93A0                       		dc.w $93A0
0001F3FE 0000 0000                  		dc.l Nem_Bomb		; bomb enemy (gets overwritten)
0001F402 A300                       		dc.w $A300
0001F404 0000 0000                  		dc.l Nem_SlzSpike	; spikeball (SLZ boss)
0001F408 A300                       		dc.w $A300
0001F40A 0000 0000                  		dc.l Nem_Exhaust	; exhaust flame
0001F40E A540                       		dc.w $A540
0001F410                            ; ---------------------------------------------------------------------------
0001F410                            ; Pattern load cues - act 1/2 signpost
0001F410                            ; ---------------------------------------------------------------------------
0001F410 0002                       PLC_Signpost:	dc.w 2
0001F412 0000 0000                  		dc.l Nem_SignPost	; signpost
0001F416 D000                       		dc.w $D000
0001F418 0000 0000                  		dc.l Nem_Bonus		; hidden bonus points
0001F41C 96C0                       		dc.w $96C0
0001F41E 0000 0000                  		dc.l Nem_BigFlash	; giant	ring flash effect
0001F422 8C40                       		dc.w $8C40
0001F424                            ; ---------------------------------------------------------------------------
0001F424                            ; Pattern load cues - beta special stage warp effect
0001F424                            ; ---------------------------------------------------------------------------
0001F424 0000                       PLC_Warp:	dc.w 0
0001F426 0000 0000                  		dc.l Nem_Warp
0001F42A A820                       		dc.w $A820
0001F42C                            ; ---------------------------------------------------------------------------
0001F42C                            ; Pattern load cues - special stage
0001F42C                            ; ---------------------------------------------------------------------------
0001F42C 0010                       PLC_SpeStage:	dc.w $10
0001F42E 0000 0000                  		dc.l Nem_SSBgCloud	; bubble and cloud background
0001F432 0000                       		dc.w 0
0001F434 0000 0000                  		dc.l Nem_SSBgFish	; bird and fish	background
0001F438 0A20                       		dc.w $A20
0001F43A 0000 0000                  		dc.l Nem_SSWalls	; walls
0001F43E 2840                       		dc.w $2840
0001F440 0000 0000                  		dc.l Nem_Bumper		; bumper
0001F444 4760                       		dc.w $4760
0001F446 0000 0000                  		dc.l Nem_SSGOAL		; GOAL block
0001F44A 4A20                       		dc.w $4A20
0001F44C 0000 0000                  		dc.l Nem_SSUpDown	; UP and DOWN blocks
0001F450 4C60                       		dc.w $4C60
0001F452 0000 0000                  		dc.l Nem_SSRBlock	; R block
0001F456 5E00                       		dc.w $5E00
0001F458 0000 0000                  		dc.l Nem_SS1UpBlock	; 1UP block
0001F45C 6E00                       		dc.w $6E00
0001F45E 0000 0000                  		dc.l Nem_SSEmStars	; emerald collection stars
0001F462 7E00                       		dc.w $7E00
0001F464 0000 0000                  		dc.l Nem_SSRedWhite	; red and white	block
0001F468 8E00                       		dc.w $8E00
0001F46A 0000 0000                  		dc.l Nem_SSGhost	; ghost	block
0001F46E 9E00                       		dc.w $9E00
0001F470 0000 0000                  		dc.l Nem_SSWBlock	; W block
0001F474 AE00                       		dc.w $AE00
0001F476 0000 0000                  		dc.l Nem_SSGlass	; glass	block
0001F47A BE00                       		dc.w $BE00
0001F47C 0000 0000                  		dc.l Nem_SSEmerald	; emeralds
0001F480 EE00                       		dc.w $EE00
0001F482 0000 0000                  		dc.l Nem_SSZone1	; ZONE 1 block
0001F486 F2E0                       		dc.w $F2E0
0001F488 0000 0000                  		dc.l Nem_SSZone2	; ZONE 2 block
0001F48C F400                       		dc.w $F400
0001F48E 0000 0000                  		dc.l Nem_SSZone3	; ZONE 3 block
0001F492 F520                       		dc.w $F520
0001F494 0000 0000                  		dc.l Nem_SSZone4	; ZONE 4 block
0001F498 F2E0                       		dc.w $F2E0
0001F49A 0000 0000                  		dc.l Nem_SSZone5	; ZONE 5 block
0001F49E F400                       		dc.w $F400
0001F4A0 0000 0000                  		dc.l Nem_SSZone6	; ZONE 6 block
0001F4A4 F520                       		dc.w $F520
0001F4A6                            ; ---------------------------------------------------------------------------
0001F4A6                            ; Pattern load cues - GHZ animals
0001F4A6                            ; ---------------------------------------------------------------------------
0001F4A6 0001                       PLC_GHZAnimals:	dc.w 1
0001F4A8 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001F4AC B000                       		dc.w $B000
0001F4AE 0000 0000                  		dc.l Nem_Flicky		; flicky
0001F4B2 B240                       		dc.w $B240
0001F4B4                            ; ---------------------------------------------------------------------------
0001F4B4                            ; Pattern load cues - LZ animals
0001F4B4                            ; ---------------------------------------------------------------------------
0001F4B4 0001                       PLC_LZAnimals:	dc.w 1
0001F4B6 0000 0000                  		dc.l Nem_BlackBird	; blackbird
0001F4BA B000                       		dc.w $B000
0001F4BC 0000 0000                  		dc.l Nem_Seal		; seal
0001F4C0 B240                       		dc.w $B240
0001F4C2                            ; ---------------------------------------------------------------------------
0001F4C2                            ; Pattern load cues - MZ animals
0001F4C2                            ; ---------------------------------------------------------------------------
0001F4C2 0001                       PLC_MZAnimals:	dc.w 1
0001F4C4 0000 0000                  		dc.l Nem_Squirrel	; squirrel
0001F4C8 B000                       		dc.w $B000
0001F4CA 0000 0000                  		dc.l Nem_Seal		; seal
0001F4CE B240                       		dc.w $B240
0001F4D0                            ; ---------------------------------------------------------------------------
0001F4D0                            ; Pattern load cues - SLZ animals
0001F4D0                            ; ---------------------------------------------------------------------------
0001F4D0 0001                       PLC_SLZAnimals:	dc.w 1
0001F4D2 0000 0000                  		dc.l Nem_Pig		; pig
0001F4D6 B000                       		dc.w $B000
0001F4D8 0000 0000                  		dc.l Nem_Flicky		; flicky
0001F4DC B240                       		dc.w $B240
0001F4DE                            ; ---------------------------------------------------------------------------
0001F4DE                            ; Pattern load cues - SYZ animals
0001F4DE                            ; ---------------------------------------------------------------------------
0001F4DE 0001                       PLC_SYZAnimals:	dc.w 1
0001F4E0 0000 0000                  		dc.l Nem_Pig		; pig
0001F4E4 B000                       		dc.w $B000
0001F4E6 0000 0000                  		dc.l Nem_Chicken	; chicken
0001F4EA B240                       		dc.w $B240
0001F4EC                            ; ---------------------------------------------------------------------------
0001F4EC                            ; Pattern load cues - SBZ animals
0001F4EC                            ; ---------------------------------------------------------------------------
0001F4EC 0001                       PLC_SBZAnimals:	dc.w 1
0001F4EE 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001F4F2 B000                       		dc.w $B000
0001F4F4 0000 0000                  		dc.l Nem_Chicken	; chicken
0001F4F8 B240                       		dc.w $B240
0001F4FA                            ; ---------------------------------------------------------------------------
0001F4FA                            ; Pattern load cues - special stage results screen
0001F4FA                            ; ---------------------------------------------------------------------------
0001F4FA 0001                       PLC_SpeStResult:dc.w 1
0001F4FC 0000 0000                  		dc.l Nem_ResultEm	; emeralds
0001F500 A820                       		dc.w $A820
0001F502 0000 0000                  		dc.l Nem_MiniSonic	; mini Sonic
0001F506 AA20                       		dc.w $AA20
0001F508                            ; ---------------------------------------------------------------------------
0001F508                            ; Pattern load cues - ending sequence
0001F508                            ; ---------------------------------------------------------------------------
0001F508 000E                       PLC_Ending:	dc.w $E
0001F50A 0000 0000                  		dc.l Nem_GHZ_1st	; GHZ main patterns
0001F50E 0000                       		dc.w 0
0001F510 0000 0000                  		dc.l Nem_GHZ_2nd	; GHZ secondary	patterns
0001F514 39A0                       		dc.w $39A0
0001F516 0000 0000                  		dc.l Nem_Stalk		; flower stalk
0001F51A 6B00                       		dc.w $6B00
0001F51C 0000 0000                  		dc.l Nem_EndFlower	; flowers
0001F520 7400                       		dc.w $7400
0001F522 0000 0000                  		dc.l Nem_EndEm		; emeralds
0001F526 78A0                       		dc.w $78A0
0001F528 0000 0000                  		dc.l Nem_EndSonic	; Sonic
0001F52C 7C20                       		dc.w $7C20
0001F52E 0000 0000                  		dc.l Nem_EndEggman	; Eggman's death (unused)
0001F532 A480                       		dc.w $A480
0001F534 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001F538 AA60                       		dc.w $AA60
0001F53A 0000 0000                  		dc.l Nem_Chicken	; chicken
0001F53E ACA0                       		dc.w $ACA0
0001F540 0000 0000                  		dc.l Nem_BlackBird	; blackbird
0001F544 AE60                       		dc.w $AE60
0001F546 0000 0000                  		dc.l Nem_Seal		; seal
0001F54A B0A0                       		dc.w $B0A0
0001F54C 0000 0000                  		dc.l Nem_Pig		; pig
0001F550 B260                       		dc.w $B260
0001F552 0000 0000                  		dc.l Nem_Flicky		; flicky
0001F556 B4A0                       		dc.w $B4A0
0001F558 0000 0000                  		dc.l Nem_Squirrel	; squirrel
0001F55C B660                       		dc.w $B660
0001F55E 0000 0000                  		dc.l Nem_EndStH		; "SONIC THE HEDGEHOG"
0001F562 B8A0                       		dc.w $B8A0
0001F564                            ; ---------------------------------------------------------------------------
0001F564                            ; Pattern load cues - "TRY AGAIN" and "END" screens
0001F564                            ; ---------------------------------------------------------------------------
0001F564 0002                       PLC_TryAgain:	dc.w 2
0001F566 0000 0000                  		dc.l Nem_EndEm		; emeralds
0001F56A 78A0                       		dc.w $78A0
0001F56C 0000 0000                  		dc.l Nem_TryAgain	; Eggman
0001F570 7C20                       		dc.w $7C20
0001F572 0000 0000                  		dc.l Nem_CreditText	; credits alphabet
0001F576 B400                       		dc.w $B400
0001F578                            ; ---------------------------------------------------------------------------
0001F578                            ; Pattern load cues - Eggman on SBZ 2
0001F578                            ; ---------------------------------------------------------------------------
0001F578 0002                       PLC_EggmanSBZ2:	dc.w 2
0001F57A 0000 0000                  		dc.l Nem_SbzBlock	; block
0001F57E A300                       		dc.w $A300
0001F580 0000 0000                  		dc.l Nem_Sbz2Eggman	; Eggman
0001F584 8000                       		dc.w $8000
0001F586 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001F58A 9400                       		dc.w $9400
0001F58C                            ; ---------------------------------------------------------------------------
0001F58C                            ; Pattern load cues - final boss
0001F58C                            ; ---------------------------------------------------------------------------
0001F58C 0004                       PLC_FZBoss:	dc.w 4
0001F58E 0000 0000                  		dc.l Nem_FzEggman	; Eggman after boss
0001F592 7400                       		dc.w $7400
0001F594 0000 0000                  		dc.l Nem_FzBoss		; FZ boss
0001F598 6000                       		dc.w $6000
0001F59A 0000 0000                  		dc.l Nem_Eggman		; Eggman main patterns
0001F59E 8000                       		dc.w $8000
0001F5A0 0000 0000                  		dc.l Nem_Sbz2Eggman	; Eggman without ship
0001F5A4 8E00                       		dc.w $8E00
0001F5A6 0000 0000                  		dc.l Nem_Exhaust	; exhaust flame
0001F5AA A540                       		dc.w $A540
0001F5AC                            		even
0001F5AC                            		even
0001F5AC                            
0001F5AC                            		incbin	misc\padding.bin
0001F69A                            		even
0001F69A                            Nem_SegaLogo:	incbin	artnem\segalogo.bin	; large Sega logo
0001FAFC                            		even
0001FAFC                            Eni_SegaLogo:	incbin	mapeni\segalogo.bin	; large Sega logo (mappings)
0001FBF4                            		even
0001FBF4                            Eni_Title:	incbin	mapeni\titlescr.bin	; title screen foreground (mappings)
0001FD08                            		even
0001FD08                            Nem_TitleFg:	incbin	artnem\titlefor.bin	; title screen foreground
00020D14                            		even
00020D14                            Nem_TitleSonic:	incbin	artnem\titleson.bin	; Sonic on title screen
000226E2                            		even
000226E2                            Nem_TitleTM:	incbin	artnem\titletm.bin	; TM on title screen
00022716                            		even
00022716                            Eni_JapNames:	incbin	mapeni\japcreds.bin	; Japanese credits (mappings)
000227D4                            		even
000227D4                            Nem_JapNames:	incbin	artnem\japcreds.bin	; Japanese credits
00022C7C                            		even
00022C7C                            ; ---------------------------------------------------------------------------
00022C7C                            ; Sprite mappings - Sonic
00022C7C                            ; ---------------------------------------------------------------------------
00022C7C                            Map_Sonic:
00022C7C                            	include "_maps\Sonic.asm"
00022C7C                            ; --------------------------------------------------------------------------------
00022C7C                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00022C7C                            ; --------------------------------------------------------------------------------
00022C7C                            
00022C7C                            SME_N6hqJ:	
00022C7C 0000 0000                  		dc.w SME_N6hqJ_1AC-SME_N6hqJ, SME_N6hqJ_1AD-SME_N6hqJ	
00022C80 0000 0000                  		dc.w SME_N6hqJ_1C2-SME_N6hqJ, SME_N6hqJ_1CD-SME_N6hqJ	
00022C84 0000 0000                  		dc.w SME_N6hqJ_1E2-SME_N6hqJ, SME_N6hqJ_1F7-SME_N6hqJ	
00022C88 0000 0000                  		dc.w SME_N6hqJ_211-SME_N6hqJ, SME_N6hqJ_221-SME_N6hqJ	
00022C8C 0000 0000                  		dc.w SME_N6hqJ_22C-SME_N6hqJ, SME_N6hqJ_237-SME_N6hqJ	
00022C90 0000 0000                  		dc.w SME_N6hqJ_242-SME_N6hqJ, SME_N6hqJ_24D-SME_N6hqJ	
00022C94 0000 0000                  		dc.w SME_N6hqJ_262-SME_N6hqJ, SME_N6hqJ_277-SME_N6hqJ	
00022C98 0000 0000                  		dc.w SME_N6hqJ_287-SME_N6hqJ, SME_N6hqJ_29C-SME_N6hqJ	
00022C9C 0000 0000                  		dc.w SME_N6hqJ_2AC-SME_N6hqJ, SME_N6hqJ_2B7-SME_N6hqJ	
00022CA0 0000 0000                  		dc.w SME_N6hqJ_2C7-SME_N6hqJ, SME_N6hqJ_2DC-SME_N6hqJ	
00022CA4 0000 0000                  		dc.w SME_N6hqJ_2EC-SME_N6hqJ, SME_N6hqJ_2F7-SME_N6hqJ	
00022CA8 0000 0000                  		dc.w SME_N6hqJ_30C-SME_N6hqJ, SME_N6hqJ_326-SME_N6hqJ	
00022CAC 0000 0000                  		dc.w SME_N6hqJ_33B-SME_N6hqJ, SME_N6hqJ_350-SME_N6hqJ	
00022CB0 0000 0000                  		dc.w SME_N6hqJ_36A-SME_N6hqJ, SME_N6hqJ_384-SME_N6hqJ	
00022CB4 0000 0000                  		dc.w SME_N6hqJ_399-SME_N6hqJ, SME_N6hqJ_3B3-SME_N6hqJ	
00022CB8 0000 0000                  		dc.w SME_N6hqJ_3C3-SME_N6hqJ, SME_N6hqJ_3D3-SME_N6hqJ	
00022CBC 0000 0000                  		dc.w SME_N6hqJ_3E3-SME_N6hqJ, SME_N6hqJ_3EE-SME_N6hqJ	
00022CC0 0000 0000                  		dc.w SME_N6hqJ_3FE-SME_N6hqJ, SME_N6hqJ_40E-SME_N6hqJ	
00022CC4 0000 0000                  		dc.w SME_N6hqJ_41E-SME_N6hqJ, SME_N6hqJ_429-SME_N6hqJ	
00022CC8 0000 0000                  		dc.w SME_N6hqJ_43E-SME_N6hqJ, SME_N6hqJ_458-SME_N6hqJ	
00022CCC 0000 0000                  		dc.w SME_N6hqJ_46D-SME_N6hqJ, SME_N6hqJ_482-SME_N6hqJ	
00022CD0 0000 0000                  		dc.w SME_N6hqJ_497-SME_N6hqJ, SME_N6hqJ_4B1-SME_N6hqJ	
00022CD4 0000 0000                  		dc.w SME_N6hqJ_4C6-SME_N6hqJ, SME_N6hqJ_4DB-SME_N6hqJ	
00022CD8 0000 0000                  		dc.w SME_N6hqJ_4E6-SME_N6hqJ, SME_N6hqJ_4F1-SME_N6hqJ	
00022CDC 0000 0000                  		dc.w SME_N6hqJ_4FC-SME_N6hqJ, SME_N6hqJ_507-SME_N6hqJ	
00022CE0 0000 0000                  		dc.w SME_N6hqJ_51C-SME_N6hqJ, SME_N6hqJ_52C-SME_N6hqJ	
00022CE4 0000 0000                  		dc.w SME_N6hqJ_541-SME_N6hqJ, SME_N6hqJ_551-SME_N6hqJ	
00022CE8 0000 0000                  		dc.w SME_N6hqJ_55C-SME_N6hqJ, SME_N6hqJ_567-SME_N6hqJ	
00022CEC 0000 0000                  		dc.w SME_N6hqJ_572-SME_N6hqJ, SME_N6hqJ_57D-SME_N6hqJ	
00022CF0 0000 0000                  		dc.w SME_N6hqJ_58D-SME_N6hqJ, SME_N6hqJ_598-SME_N6hqJ	
00022CF4 0000 0000                  		dc.w SME_N6hqJ_5A8-SME_N6hqJ, SME_N6hqJ_5B3-SME_N6hqJ	
00022CF8 0000 0000                  		dc.w SME_N6hqJ_5B9-SME_N6hqJ, SME_N6hqJ_5BF-SME_N6hqJ	
00022CFC 0000 0000                  		dc.w SME_N6hqJ_5C5-SME_N6hqJ, SME_N6hqJ_5CB-SME_N6hqJ	
00022D00 0000 0000                  		dc.w SME_N6hqJ_5D1-SME_N6hqJ, SME_N6hqJ_5D7-SME_N6hqJ	
00022D04 0000 0000                  		dc.w SME_N6hqJ_5DD-SME_N6hqJ, SME_N6hqJ_5E3-SME_N6hqJ	
00022D08 0000 0000                  		dc.w SME_N6hqJ_5E9-SME_N6hqJ, SME_N6hqJ_5EF-SME_N6hqJ	
00022D0C 0000 0000                  		dc.w SME_N6hqJ_5F5-SME_N6hqJ, SME_N6hqJ_605-SME_N6hqJ	
00022D10 0000 0000                  		dc.w SME_N6hqJ_615-SME_N6hqJ, SME_N6hqJ_625-SME_N6hqJ	
00022D14 0000 0000                  		dc.w SME_N6hqJ_635-SME_N6hqJ, SME_N6hqJ_63B-SME_N6hqJ	
00022D18 0000 0000                  		dc.w SME_N6hqJ_641-SME_N6hqJ, SME_N6hqJ_64C-SME_N6hqJ	
00022D1C 0000 0000                  		dc.w SME_N6hqJ_657-SME_N6hqJ, SME_N6hqJ_667-SME_N6hqJ	
00022D20 0000 0000                  		dc.w SME_N6hqJ_677-SME_N6hqJ, SME_N6hqJ_682-SME_N6hqJ	
00022D24 0000 0000                  		dc.w SME_N6hqJ_68D-SME_N6hqJ, SME_N6hqJ_69D-SME_N6hqJ	
00022D28 0000 0000                  		dc.w SME_N6hqJ_6B2-SME_N6hqJ, SME_N6hqJ_6C2-SME_N6hqJ	
00022D2C 0000 0000                  		dc.w SME_N6hqJ_6D2-SME_N6hqJ, SME_N6hqJ_6E2-SME_N6hqJ	
00022D30 0000 0000                  		dc.w SME_N6hqJ_6F2-SME_N6hqJ, SME_N6hqJ_702-SME_N6hqJ	
00022D34 0000 0000                  		dc.w SME_N6hqJ_70D-SME_N6hqJ, SME_N6hqJ_722-SME_N6hqJ	
00022D38 0000 0000                  		dc.w SME_N6hqJ_737-SME_N6hqJ, SME_N6hqJ_747-SME_N6hqJ	
00022D3C 0000 0000                  		dc.w SME_N6hqJ_757-SME_N6hqJ, SME_N6hqJ_767-SME_N6hqJ	
00022D40 0000 0000                  		dc.w SME_N6hqJ_772-SME_N6hqJ, SME_N6hqJ_778-SME_N6hqJ	
00022D44 0000 0000                  		dc.w SME_N6hqJ_783-SME_N6hqJ, SME_N6hqJ_793-SME_N6hqJ	
00022D48 0000 0000                  		dc.w SME_N6hqJ_7A3-SME_N6hqJ, SME_N6hqJ_7B3-SME_N6hqJ	
00022D4C 0000 0000                  		dc.w SME_N6hqJ_7BE-SME_N6hqJ, SME_N6hqJ_7C9-SME_N6hqJ	
00022D50 0000 0000                  		dc.w SME_N6hqJ_7D9-SME_N6hqJ, SME_N6hqJ_7E4-SME_N6hqJ	
00022D54 0000 0000                  		dc.w SME_N6hqJ_7F4-SME_N6hqJ, SME_N6hqJ_804-SME_N6hqJ	
00022D58 0000 0000                  		dc.w SME_N6hqJ_80A-SME_N6hqJ, SME_N6hqJ_81A-SME_N6hqJ	
00022D5C 0000 0000                  		dc.w SME_N6hqJ_82A-SME_N6hqJ, SME_N6hqJ_844-SME_N6hqJ	
00022D60 0000 0000                  		dc.w SME_N6hqJ_85E-SME_N6hqJ, SME_N6hqJ_869-SME_N6hqJ	
00022D64 0000 0000                  		dc.w SME_N6hqJ_874-SME_N6hqJ, SME_N6hqJ_87F-SME_N6hqJ	
00022D68 0000 0000                  		dc.w SME_N6hqJ_88F-SME_N6hqJ, SME_N6hqJ_8A4-SME_N6hqJ	
00022D6C 0000 0000                  		dc.w SME_N6hqJ_8B4-SME_N6hqJ, SME_N6hqJ_8BF-SME_N6hqJ	
00022D70 0000 0000                  		dc.w SME_N6hqJ_8CF-SME_N6hqJ, SME_N6hqJ_8E4-SME_N6hqJ	
00022D74 0000 0000                  		dc.w SME_N6hqJ_8F4-SME_N6hqJ, SME_N6hqJ_8FF-SME_N6hqJ	
00022D78 0000 0000                  		dc.w SME_N6hqJ_914-SME_N6hqJ, SME_N6hqJ_92E-SME_N6hqJ	
00022D7C 0000 0000                  		dc.w SME_N6hqJ_948-SME_N6hqJ, SME_N6hqJ_962-SME_N6hqJ	
00022D80 0000 0000                  		dc.w SME_N6hqJ_981-SME_N6hqJ, SME_N6hqJ_9A0-SME_N6hqJ	
00022D84 0000 0000                  		dc.w SME_N6hqJ_9BA-SME_N6hqJ, SME_N6hqJ_9D4-SME_N6hqJ	
00022D88 0000 0000                  		dc.w SME_N6hqJ_9E4-SME_N6hqJ, SME_N6hqJ_9F4-SME_N6hqJ	
00022D8C 0000 0000                  		dc.w SME_N6hqJ_A04-SME_N6hqJ, SME_N6hqJ_A0F-SME_N6hqJ	
00022D90 0000 0000                  		dc.w SME_N6hqJ_A1F-SME_N6hqJ, SME_N6hqJ_A2F-SME_N6hqJ	
00022D94 0000 0000                  		dc.w SME_N6hqJ_A3F-SME_N6hqJ, SME_N6hqJ_A4A-SME_N6hqJ	
00022D98 0000 0000                  		dc.w SME_N6hqJ_A5F-SME_N6hqJ, SME_N6hqJ_A79-SME_N6hqJ	
00022D9C 0000 0000                  		dc.w SME_N6hqJ_A8E-SME_N6hqJ, SME_N6hqJ_AA3-SME_N6hqJ	
00022DA0 0000 0000                  		dc.w SME_N6hqJ_AB8-SME_N6hqJ, SME_N6hqJ_AD2-SME_N6hqJ	
00022DA4 0000 0000                  		dc.w SME_N6hqJ_AE7-SME_N6hqJ, SME_N6hqJ_AFC-SME_N6hqJ	
00022DA8 0000 0000                  		dc.w SME_N6hqJ_B0C-SME_N6hqJ, SME_N6hqJ_B21-SME_N6hqJ	
00022DAC 0000 0000                  		dc.w SME_N6hqJ_B31-SME_N6hqJ, SME_N6hqJ_B3C-SME_N6hqJ	
00022DB0 0000 0000                  		dc.w SME_N6hqJ_B4C-SME_N6hqJ, SME_N6hqJ_B61-SME_N6hqJ	
00022DB4 0000 0000                  		dc.w SME_N6hqJ_B71-SME_N6hqJ, SME_N6hqJ_B7C-SME_N6hqJ	
00022DB8 0000 0000                  		dc.w SME_N6hqJ_B96-SME_N6hqJ, SME_N6hqJ_BB5-SME_N6hqJ	
00022DBC 0000 0000                  		dc.w SME_N6hqJ_BCF-SME_N6hqJ, SME_N6hqJ_BE9-SME_N6hqJ	
00022DC0 0000 0000                  		dc.w SME_N6hqJ_C08-SME_N6hqJ, SME_N6hqJ_C27-SME_N6hqJ	
00022DC4 0000 0000                  		dc.w SME_N6hqJ_C41-SME_N6hqJ, SME_N6hqJ_C60-SME_N6hqJ	
00022DC8 0000 0000                  		dc.w SME_N6hqJ_C70-SME_N6hqJ, SME_N6hqJ_C80-SME_N6hqJ	
00022DCC 0000 0000                  		dc.w SME_N6hqJ_C90-SME_N6hqJ, SME_N6hqJ_C9B-SME_N6hqJ	
00022DD0 0000 0000                  		dc.w SME_N6hqJ_CAB-SME_N6hqJ, SME_N6hqJ_CBB-SME_N6hqJ	
00022DD4 0000 0000                  		dc.w SME_N6hqJ_CCB-SME_N6hqJ, SME_N6hqJ_CD6-SME_N6hqJ	
00022DD8 0000 0000                  		dc.w SME_N6hqJ_CEB-SME_N6hqJ, SME_N6hqJ_D05-SME_N6hqJ	
00022DDC 0000 0000                  		dc.w SME_N6hqJ_D1F-SME_N6hqJ, SME_N6hqJ_D34-SME_N6hqJ	
00022DE0 0000 0000                  		dc.w SME_N6hqJ_D49-SME_N6hqJ, SME_N6hqJ_D63-SME_N6hqJ	
00022DE4 0000 0000                  		dc.w SME_N6hqJ_D7D-SME_N6hqJ, SME_N6hqJ_D97-SME_N6hqJ	
00022DE8 0000 0000                  		dc.w SME_N6hqJ_DAC-SME_N6hqJ, SME_N6hqJ_DC1-SME_N6hqJ	
00022DEC 0000 0000                  		dc.w SME_N6hqJ_DD6-SME_N6hqJ, SME_N6hqJ_DF0-SME_N6hqJ	
00022DF0 0000 0000                  		dc.w SME_N6hqJ_E05-SME_N6hqJ, SME_N6hqJ_E1A-SME_N6hqJ	
00022DF4 0000 0000                  		dc.w SME_N6hqJ_E2F-SME_N6hqJ, SME_N6hqJ_E49-SME_N6hqJ	
00022DF8 0000 0000                  		dc.w SME_N6hqJ_E5E-SME_N6hqJ, SME_N6hqJ_E73-SME_N6hqJ	
00022DFC 0000 0000                  		dc.w SME_N6hqJ_E88-SME_N6hqJ, SME_N6hqJ_E9D-SME_N6hqJ	
00022E00 0000 0000                  		dc.w SME_N6hqJ_EA8-SME_N6hqJ, SME_N6hqJ_EB8-SME_N6hqJ	
00022E04 0000 0000                  		dc.w SME_N6hqJ_EC8-SME_N6hqJ, SME_N6hqJ_ED8-SME_N6hqJ	
00022E08 0000 0000                  		dc.w SME_N6hqJ_EE8-SME_N6hqJ, SME_N6hqJ_EF8-SME_N6hqJ	
00022E0C 0000 0000                  		dc.w SME_N6hqJ_F08-SME_N6hqJ, SME_N6hqJ_F18-SME_N6hqJ	
00022E10 0000 0000                  		dc.w SME_N6hqJ_F28-SME_N6hqJ, SME_N6hqJ_F38-SME_N6hqJ	
00022E14 0000 0000                  		dc.w SME_N6hqJ_F52-SME_N6hqJ, SME_N6hqJ_F67-SME_N6hqJ	
00022E18 0000 0000                  		dc.w SME_N6hqJ_F7C-SME_N6hqJ, SME_N6hqJ_F91-SME_N6hqJ	
00022E1C 0000 0000                  		dc.w SME_N6hqJ_FA1-SME_N6hqJ, SME_N6hqJ_FB1-SME_N6hqJ	
00022E20 0000 0000                  		dc.w SME_N6hqJ_FC1-SME_N6hqJ, SME_N6hqJ_FD6-SME_N6hqJ	
00022E24 0000 0000                  		dc.w SME_N6hqJ_FEB-SME_N6hqJ, SME_N6hqJ_1000-SME_N6hqJ	
00022E28 00                         SME_N6hqJ_1AC:	dc.b 0	
00022E29 04                         SME_N6hqJ_1AD:	dc.b 4	
00022E2A E405 0000 F8               		dc.b $E4, 5, 0, 0, $F8	
00022E2F EC03 0004 F0               		dc.b $EC, 3, 0, 4, $F0	
00022E34 F409 0008 F8               		dc.b $F4, 9, 0, 8, $F8	
00022E39 0409 000E F8               		dc.b 4, 9, 0, $E, $F8	
00022E3E 02                         SME_N6hqJ_1C2:	dc.b 2	
00022E3F EC0B 0000 F0               		dc.b $EC, $B, 0, 0, $F0	
00022E44 0C09 000C F8               		dc.b $C, 9, 0, $C, $F8	
00022E49 04                         SME_N6hqJ_1CD:	dc.b 4	
00022E4A EC03 0000 F0               		dc.b $EC, 3, 0, 0, $F0	
00022E4F EC05 0004 F8               		dc.b $EC, 5, 0, 4, $F8	
00022E54 FC05 0008 F8               		dc.b $FC, 5, 0, 8, $F8	
00022E59 0C09 000C F8               		dc.b $C, 9, 0, $C, $F8	
00022E5E 04                         SME_N6hqJ_1E2:	dc.b 4	
00022E5F EC03 0000 F0               		dc.b $EC, 3, 0, 0, $F0	
00022E64 EC05 0004 F8               		dc.b $EC, 5, 0, 4, $F8	
00022E69 FC05 0008 F8               		dc.b $FC, 5, 0, 8, $F8	
00022E6E 0C09 000C F8               		dc.b $C, 9, 0, $C, $F8	
00022E73 05                         SME_N6hqJ_1F7:	dc.b 5	
00022E74 EC03 0000 F0               		dc.b $EC, 3, 0, 0, $F0	
00022E79 EC05 0004 F8               		dc.b $EC, 5, 0, 4, $F8	
00022E7E FC05 0008 F8               		dc.b $FC, 5, 0, 8, $F8	
00022E83 0C01 000C F8               		dc.b $C, 1, 0, $C, $F8	
00022E88 0C05 000E 00               		dc.b $C, 5, 0, $E, 0	
00022E8D 03                         SME_N6hqJ_211:	dc.b 3	
00022E8E EC03 0000 F0               		dc.b $EC, 3, 0, 0, $F0	
00022E93 EC07 0004 F8               		dc.b $EC, 7, 0, 4, $F8	
00022E98 0C09 000C F8               		dc.b $C, 9, 0, $C, $F8	
00022E9D 02                         SME_N6hqJ_221:	dc.b 2	
00022E9E F40B 0000 F0               		dc.b $F4, $B, 0, 0, $F0	
00022EA3 0401 000C 08               		dc.b 4, 1, 0, $C, 8	
00022EA8 02                         SME_N6hqJ_22C:	dc.b 2	
00022EA9 F40B 0000 E8               		dc.b $F4, $B, 0, 0, $E8	
00022EAE 0405 000C 00               		dc.b 4, 5, 0, $C, 0	
00022EB3 02                         SME_N6hqJ_237:	dc.b 2	
00022EB4 F40B 0000 E8               		dc.b $F4, $B, 0, 0, $E8	
00022EB9 0405 000C 00               		dc.b 4, 5, 0, $C, 0	
00022EBE 02                         SME_N6hqJ_242:	dc.b 2	
00022EBF E40B 0000 F0               		dc.b $E4, $B, 0, 0, $F0	
00022EC4 040D 000C F0               		dc.b 4, $D, 0, $C, $F0	
00022EC9 04                         SME_N6hqJ_24D:	dc.b 4	
00022ECA E405 0000 F8               		dc.b $E4, 5, 0, 0, $F8	
00022ECF EC03 0004 F0               		dc.b $EC, 3, 0, 4, $F0	
00022ED4 F409 0008 F8               		dc.b $F4, 9, 0, 8, $F8	
00022ED9 0409 000E F8               		dc.b 4, 9, 0, $E, $F8	
00022EDE 04                         SME_N6hqJ_262:	dc.b 4	
00022EDF EC03 0000 F0               		dc.b $EC, 3, 0, 0, $F0	
00022EE4 E405 0004 F8               		dc.b $E4, 5, 0, 4, $F8	
00022EE9 F405 0008 F8               		dc.b $F4, 5, 0, 8, $F8	
00022EEE 0409 000C F8               		dc.b 4, 9, 0, $C, $F8	
00022EF3 03                         SME_N6hqJ_277:	dc.b 3	
00022EF4 EB0D 0000 EE               		dc.b $EB, $D, 0, 0, $EE	
00022EF9 0301 0008 EC               		dc.b 3, 1, 0, 8, $EC	
00022EFE FB0F 000A F4               		dc.b $FB, $F, 0, $A, $F4	
00022F03 04                         SME_N6hqJ_287:	dc.b 4	
00022F04 EC0D 0000 EE               		dc.b $EC, $D, 0, 0, $EE	
00022F09 0401 0008 EC               		dc.b 4, 1, 0, 8, $EC	
00022F0E FC0B 000A F4               		dc.b $FC, $B, 0, $A, $F4	
00022F13 0401 0016 0C               		dc.b 4, 1, 0, $16, $C	
00022F18 03                         SME_N6hqJ_29C:	dc.b 3	
00022F19 ED0D 0000 ED               		dc.b $ED, $D, 0, 0, $ED	
00022F1E FD09 0008 F4               		dc.b $FD, 9, 0, 8, $F4	
00022F23 0D05 000E F7               		dc.b $D, 5, 0, $E, $F7	
00022F28 02                         SME_N6hqJ_2AC:	dc.b 2	
00022F29 EC09 0000 F4               		dc.b $EC, 9, 0, 0, $F4	
00022F2E FC0F 0006 EE               		dc.b $FC, $F, 0, 6, $EE	
00022F33 03                         SME_N6hqJ_2B7:	dc.b 3	
00022F34 EB09 0000 F4               		dc.b $EB, 9, 0, 0, $F4	
00022F39 FB0F 0006 EE               		dc.b $FB, $F, 0, 6, $EE	
00022F3E FB01 0016 0E               		dc.b $FB, 1, 0, $16, $E	
00022F43 04                         SME_N6hqJ_2C7:	dc.b 4	
00022F44 EC09 0000 F4               		dc.b $EC, 9, 0, 0, $F4	
00022F49 0401 0006 EC               		dc.b 4, 1, 0, 6, $EC	
00022F4E FC0B 0008 F4               		dc.b $FC, $B, 0, 8, $F4	
00022F53 0401 0014 0C               		dc.b 4, 1, 0, $14, $C	
00022F58 03                         SME_N6hqJ_2DC:	dc.b 3	
00022F59 ED0D 0000 ED               		dc.b $ED, $D, 0, 0, $ED	
00022F5E FD09 0008 F4               		dc.b $FD, 9, 0, 8, $F4	
00022F63 0D05 000E F7               		dc.b $D, 5, 0, $E, $F7	
00022F68 02                         SME_N6hqJ_2EC:	dc.b 2	
00022F69 EC0D 0000 EE               		dc.b $EC, $D, 0, 0, $EE	
00022F6E FC0B 0008 F3               		dc.b $FC, $B, 0, 8, $F3	
00022F73 04                         SME_N6hqJ_2F7:	dc.b 4	
00022F74 EB09 0000 EA               		dc.b $EB, 9, 0, 0, $EA	
00022F79 FB09 0006 EA               		dc.b $FB, 9, 0, 6, $EA	
00022F7E F305 000C 02               		dc.b $F3, 5, 0, $C, 2	
00022F83 0B01 0010 FA               		dc.b $B, 1, 0, $10, $FA	
00022F88 05                         SME_N6hqJ_30C:	dc.b 5	
00022F89 EC09 0000 EB               		dc.b $EC, 9, 0, 0, $EB	
00022F8E EC01 0006 03               		dc.b $EC, 1, 0, 6, 3	
00022F93 FC0D 0008 EB               		dc.b $FC, $D, 0, 8, $EB	
00022F98 FC05 0010 0B               		dc.b $FC, 5, 0, $10, $B	
00022F9D 0C01 0014 FB               		dc.b $C, 1, 0, $14, $FB	
00022FA2 04                         SME_N6hqJ_326:	dc.b 4	
00022FA3 ED07 0000 EC               		dc.b $ED, 7, 0, 0, $EC	
00022FA8 ED03 0008 FC               		dc.b $ED, 3, 0, 8, $FC	
00022FAD F501 000C 04               		dc.b $F5, 1, 0, $C, 4	
00022FB2 0505 000E 04               		dc.b 5, 5, 0, $E, 4	
00022FB7 04                         SME_N6hqJ_33B:	dc.b 4	
00022FB8 EC09 0000 EB               		dc.b $EC, 9, 0, 0, $EB	
00022FBD EC01 0006 03               		dc.b $EC, 1, 0, 6, 3	
00022FC2 FC05 0008 EB               		dc.b $FC, 5, 0, 8, $EB	
00022FC7 FC0B 000C FB               		dc.b $FC, $B, 0, $C, $FB	
00022FCC 05                         SME_N6hqJ_350:	dc.b 5	
00022FCD EB09 0000 EA               		dc.b $EB, 9, 0, 0, $EA	
00022FD2 EB01 0006 02               		dc.b $EB, 1, 0, 6, 2	
00022FD7 FB0D 0008 EA               		dc.b $FB, $D, 0, 8, $EA	
00022FDC F301 0010 0A               		dc.b $F3, 1, 0, $10, $A	
00022FE1 0B05 0012 F2               		dc.b $B, 5, 0, $12, $F2	
00022FE6 05                         SME_N6hqJ_36A:	dc.b 5	
00022FE7 EC09 0000 EB               		dc.b $EC, 9, 0, 0, $EB	
00022FEC EC01 0006 03               		dc.b $EC, 1, 0, 6, 3	
00022FF1 FC0D 0008 EB               		dc.b $FC, $D, 0, 8, $EB	
00022FF6 FA05 0010 0B               		dc.b $FA, 5, 0, $10, $B	
00022FFB 0C01 0014 FB               		dc.b $C, 1, 0, $14, $FB	
00023000 04                         SME_N6hqJ_384:	dc.b 4	
00023001 ED07 0000 EC               		dc.b $ED, 7, 0, 0, $EC	
00023006 ED03 0008 FC               		dc.b $ED, 3, 0, 8, $FC	
0002300B F501 000C 04               		dc.b $F5, 1, 0, $C, 4	
00023010 0505 000E 04               		dc.b 5, 5, 0, $E, 4	
00023015 05                         SME_N6hqJ_399:	dc.b 5	
00023016 EC09 0000 EB               		dc.b $EC, 9, 0, 0, $EB	
0002301B FC09 0006 EB               		dc.b $FC, 9, 0, 6, $EB	
00023020 F401 000C 03               		dc.b $F4, 1, 0, $C, 3	
00023025 0C01 000E FB               		dc.b $C, 1, 0, $E, $FB	
0002302A 0405 0010 03               		dc.b 4, 5, 0, $10, 3	
0002302F 03                         SME_N6hqJ_3B3:	dc.b 3	
00023030 F207 0000 EB               		dc.b $F2, 7, 0, 0, $EB	
00023035 EC0B 0008 FB               		dc.b $EC, $B, 0, 8, $FB	
0002303A 0C05 0014 03               		dc.b $C, 5, 0, $14, 3	
0002303F 03                         SME_N6hqJ_3C3:	dc.b 3	
00023040 F207 0000 EC               		dc.b $F2, 7, 0, 0, $EC	
00023045 EC0B 0008 FC               		dc.b $EC, $B, 0, 8, $FC	
0002304A 0C05 0014 04               		dc.b $C, 5, 0, $14, 4	
0002304F 03                         SME_N6hqJ_3D3:	dc.b 3	
00023050 F307 0000 ED               		dc.b $F3, 7, 0, 0, $ED	
00023055 F403 0008 FD               		dc.b $F4, 3, 0, 8, $FD	
0002305A F905 000C 05               		dc.b $F9, 5, 0, $C, 5	
0002305F 02                         SME_N6hqJ_3E3:	dc.b 2	
00023060 F407 0000 EC               		dc.b $F4, 7, 0, 0, $EC	
00023065 F20B 0008 FC               		dc.b $F2, $B, 0, 8, $FC	
0002306A 03                         SME_N6hqJ_3EE:	dc.b 3	
0002306B F407 0000 EB               		dc.b $F4, 7, 0, 0, $EB	
00023070 E305 0008 FB               		dc.b $E3, 5, 0, 8, $FB	
00023075 F30B 000C FB               		dc.b $F3, $B, 0, $C, $FB	
0002307A 03                         SME_N6hqJ_3FE:	dc.b 3	
0002307B F407 0000 EC               		dc.b $F4, 7, 0, 0, $EC	
00023080 EC0B 0008 FC               		dc.b $EC, $B, 0, 8, $FC	
00023085 0C05 0014 04               		dc.b $C, 5, 0, $14, 4	
0002308A 03                         SME_N6hqJ_40E:	dc.b 3	
0002308B F307 0000 ED               		dc.b $F3, 7, 0, 0, $ED	
00023090 F403 0008 FD               		dc.b $F4, 3, 0, 8, $FD	
00023095 F905 000C 05               		dc.b $F9, 5, 0, $C, 5	
0002309A 02                         SME_N6hqJ_41E:	dc.b 2	
0002309B F207 0000 EC               		dc.b $F2, 7, 0, 0, $EC	
000230A0 F40B 0008 FC               		dc.b $F4, $B, 0, 8, $FC	
000230A5 04                         SME_N6hqJ_429:	dc.b 4	
000230A6 EE05 0000 F3               		dc.b $EE, 5, 0, 0, $F3	
000230AB FE07 0004 EB               		dc.b $FE, 7, 0, 4, $EB	
000230B0 FE0D 000C FB               		dc.b $FE, $D, 0, $C, $FB	
000230B5 0E01 0014 FB               		dc.b $E, 1, 0, $14, $FB	
000230BA 05                         SME_N6hqJ_43E:	dc.b 5	
000230BB DD05 0000 FC               		dc.b $DD, 5, 0, 0, $FC	
000230C0 ED09 0004 F4               		dc.b $ED, 9, 0, 4, $F4	
000230C5 FD07 000A EC               		dc.b $FD, 7, 0, $A, $EC	
000230CA FD0D 0012 FC               		dc.b $FD, $D, 0, $12, $FC	
000230CF 0D01 001A FC               		dc.b $D, 1, 0, $1A, $FC	
000230D4 04                         SME_N6hqJ_458:	dc.b 4	
000230D5 EC0D 0000 F5               		dc.b $EC, $D, 0, 0, $F5	
000230DA FC07 0008 ED               		dc.b $FC, 7, 0, 8, $ED	
000230DF FC05 0010 FD               		dc.b $FC, 5, 0, $10, $FD	
000230E4 0C01 0014 FD               		dc.b $C, 1, 0, $14, $FD	
000230E9 04                         SME_N6hqJ_46D:	dc.b 4	
000230EA ED0D 0000 F4               		dc.b $ED, $D, 0, 0, $F4	
000230EF FD07 0008 EC               		dc.b $FD, 7, 0, 8, $EC	
000230F4 FD09 0010 FC               		dc.b $FD, 9, 0, $10, $FC	
000230F9 0D01 0016 FC               		dc.b $D, 1, 0, $16, $FC	
000230FE 04                         SME_N6hqJ_482:	dc.b 4	
000230FF EE09 0000 F3               		dc.b $EE, 9, 0, 0, $F3	
00023104 FE07 0006 EB               		dc.b $FE, 7, 0, 6, $EB	
00023109 FE0D 000E FB               		dc.b $FE, $D, 0, $E, $FB	
0002310E 0E01 0016 FB               		dc.b $E, 1, 0, $16, $FB	
00023113 05                         SME_N6hqJ_497:	dc.b 5	
00023114 DD05 0000 FA               		dc.b $DD, 5, 0, 0, $FA	
00023119 ED09 0004 F4               		dc.b $ED, 9, 0, 4, $F4	
0002311E FD07 000A EC               		dc.b $FD, 7, 0, $A, $EC	
00023123 FD0D 0012 FC               		dc.b $FD, $D, 0, $12, $FC	
00023128 0D01 001A FC               		dc.b $D, 1, 0, $1A, $FC	
0002312D 04                         SME_N6hqJ_4B1:	dc.b 4	
0002312E EC0D 0000 F5               		dc.b $EC, $D, 0, 0, $F5	
00023133 FC07 0008 ED               		dc.b $FC, 7, 0, 8, $ED	
00023138 FC05 0010 FD               		dc.b $FC, 5, 0, $10, $FD	
0002313D 0C01 0014 FD               		dc.b $C, 1, 0, $14, $FD	
00023142 04                         SME_N6hqJ_4C6:	dc.b 4	
00023143 ED0D 0000 F4               		dc.b $ED, $D, 0, 0, $F4	
00023148 FD07 0008 EC               		dc.b $FD, 7, 0, 8, $EC	
0002314D FD09 0010 FC               		dc.b $FD, 9, 0, $10, $FC	
00023152 0D01 0016 FC               		dc.b $D, 1, 0, $16, $FC	
00023157 02                         SME_N6hqJ_4DB:	dc.b 2	
00023158 EE09 0000 F8               		dc.b $EE, 9, 0, 0, $F8	
0002315D FE0F 0006 F0               		dc.b $FE, $F, 0, 6, $F0	
00023162 02                         SME_N6hqJ_4E6:	dc.b 2	
00023163 EE09 0000 F8               		dc.b $EE, 9, 0, 0, $F8	
00023168 FE0F 0006 F0               		dc.b $FE, $F, 0, 6, $F0	
0002316D 02                         SME_N6hqJ_4F1:	dc.b 2	
0002316E EE09 0000 F8               		dc.b $EE, 9, 0, 0, $F8	
00023173 FE0F 0006 F0               		dc.b $FE, $F, 0, 6, $F0	
00023178 02                         SME_N6hqJ_4FC:	dc.b 2	
00023179 EE09 0000 F8               		dc.b $EE, 9, 0, 0, $F8	
0002317E FE0F 0006 F0               		dc.b $FE, $F, 0, 6, $F0	
00023183 04                         SME_N6hqJ_507:	dc.b 4	
00023184 EC09 0000 ED               		dc.b $EC, 9, 0, 0, $ED	
00023189 EC01 0006 05               		dc.b $EC, 1, 0, 6, 5	
0002318E FC0D 0008 F4               		dc.b $FC, $D, 0, 8, $F4	
00023193 0C09 0010 FA               		dc.b $C, 9, 0, $10, $FA	
00023198 03                         SME_N6hqJ_51C:	dc.b 3	
00023199 EC0D 0000 ED               		dc.b $EC, $D, 0, 0, $ED	
0002319E FC0D 0008 F5               		dc.b $FC, $D, 0, 8, $F5	
000231A3 0C09 0010 F8               		dc.b $C, 9, 0, $10, $F8	
000231A8 04                         SME_N6hqJ_52C:	dc.b 4	
000231A9 EC09 0000 ED               		dc.b $EC, 9, 0, 0, $ED	
000231AE EC01 0006 05               		dc.b $EC, 1, 0, 6, 5	
000231B3 FC0D 0008 F4               		dc.b $FC, $D, 0, 8, $F4	
000231B8 0C09 0010 FD               		dc.b $C, 9, 0, $10, $FD	
000231BD 03                         SME_N6hqJ_541:	dc.b 3	
000231BE EC0D 0000 ED               		dc.b $EC, $D, 0, 0, $ED	
000231C3 FC0D 0008 F5               		dc.b $FC, $D, 0, 8, $F5	
000231C8 0C09 0010 F8               		dc.b $C, 9, 0, $10, $F8	
000231CD 02                         SME_N6hqJ_551:	dc.b 2	
000231CE F007 0000 EE               		dc.b $F0, 7, 0, 0, $EE	
000231D3 F00B 0008 FE               		dc.b $F0, $B, 0, 8, $FE	
000231D8 02                         SME_N6hqJ_55C:	dc.b 2	
000231D9 F007 0000 EE               		dc.b $F0, 7, 0, 0, $EE	
000231DE F00B 0008 FE               		dc.b $F0, $B, 0, 8, $FE	
000231E3 02                         SME_N6hqJ_567:	dc.b 2	
000231E4 F007 0000 EE               		dc.b $F0, 7, 0, 0, $EE	
000231E9 F00B 0008 FE               		dc.b $F0, $B, 0, 8, $FE	
000231EE 02                         SME_N6hqJ_572:	dc.b 2	
000231EF F007 0000 EE               		dc.b $F0, 7, 0, 0, $EE	
000231F4 F00B 0008 FE               		dc.b $F0, $B, 0, 8, $FE	
000231F9 03                         SME_N6hqJ_57D:	dc.b 3	
000231FA E901 0000 F4               		dc.b $E9, 1, 0, 0, $F4	
000231FF F907 0002 EC               		dc.b $F9, 7, 0, 2, $EC	
00023204 EC0B 000A FC               		dc.b $EC, $B, 0, $A, $FC	
00023209 02                         SME_N6hqJ_58D:	dc.b 2	
0002320A F307 0000 EC               		dc.b $F3, 7, 0, 0, $EC	
0002320F EB0B 0008 FC               		dc.b $EB, $B, 0, 8, $FC	
00023214 03                         SME_N6hqJ_598:	dc.b 3	
00023215 E901 0000 F4               		dc.b $E9, 1, 0, 0, $F4	
0002321A F907 0002 EC               		dc.b $F9, 7, 0, 2, $EC	
0002321F EC0B 000A FC               		dc.b $EC, $B, 0, $A, $FC	
00023224 02                         SME_N6hqJ_5A8:	dc.b 2	
00023225 F307 0000 EC               		dc.b $F3, 7, 0, 0, $EC	
0002322A EB0B 0008 FC               		dc.b $EB, $B, 0, 8, $FC	
0002322F 01                         SME_N6hqJ_5B3:	dc.b 1	
00023230 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
00023235 01                         SME_N6hqJ_5B9:	dc.b 1	
00023236 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
0002323B 01                         SME_N6hqJ_5BF:	dc.b 1	
0002323C F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
00023241 01                         SME_N6hqJ_5C5:	dc.b 1	
00023242 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
00023247 01                         SME_N6hqJ_5CB:	dc.b 1	
00023248 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
0002324D 01                         SME_N6hqJ_5D1:	dc.b 1	
0002324E F80F 0000 F4               		dc.b $F8, $F, 0, 0, $F4	
00023253 01                         SME_N6hqJ_5D7:	dc.b 1	
00023254 F80F 0000 F4               		dc.b $F8, $F, 0, 0, $F4	
00023259 01                         SME_N6hqJ_5DD:	dc.b 1	
0002325A F80F 0000 F4               		dc.b $F8, $F, 0, 0, $F4	
0002325F 01                         SME_N6hqJ_5E3:	dc.b 1	
00023260 F80F 0000 F4               		dc.b $F8, $F, 0, 0, $F4	
00023265 01                         SME_N6hqJ_5E9:	dc.b 1	
00023266 F80F 0000 F4               		dc.b $F8, $F, 0, 0, $F4	
0002326B 01                         SME_N6hqJ_5EF:	dc.b 1	
0002326C F80F 0000 F4               		dc.b $F8, $F, 0, 0, $F4	
00023271 03                         SME_N6hqJ_5F5:	dc.b 3	
00023272 E509 0000 F3               		dc.b $E5, 9, 0, 0, $F3	
00023277 F509 0006 F3               		dc.b $F5, 9, 0, 6, $F3	
0002327C 050D 000C EB               		dc.b 5, $D, 0, $C, $EB	
00023281 03                         SME_N6hqJ_605:	dc.b 3	
00023282 E409 0000 F3               		dc.b $E4, 9, 0, 0, $F3	
00023287 F409 0006 F3               		dc.b $F4, 9, 0, 6, $F3	
0002328C 0409 000C F3               		dc.b 4, 9, 0, $C, $F3	
00023291 03                         SME_N6hqJ_615:	dc.b 3	
00023292 E509 0000 F3               		dc.b $E5, 9, 0, 0, $F3	
00023297 F509 0006 F3               		dc.b $F5, 9, 0, 6, $F3	
0002329C 050D 000C EB               		dc.b 5, $D, 0, $C, $EB	
000232A1 03                         SME_N6hqJ_625:	dc.b 3	
000232A2 E509 0000 F3               		dc.b $E5, 9, 0, 0, $F3	
000232A7 F509 0006 F3               		dc.b $F5, 9, 0, 6, $F3	
000232AC 0509 000C F3               		dc.b 5, 9, 0, $C, $F3	
000232B1 01                         SME_N6hqJ_635:	dc.b 1	
000232B2 F40B 0000 F6               		dc.b $F4, $B, 0, 0, $F6	
000232B7 01                         SME_N6hqJ_63B:	dc.b 1	
000232B8 F40F 0000 F2               		dc.b $F4, $F, 0, 0, $F2	
000232BD 02                         SME_N6hqJ_641:	dc.b 2	
000232BE F801 0000 EC               		dc.b $F8, 1, 0, 0, $EC	
000232C3 F00F 0002 F4               		dc.b $F0, $F, 0, 2, $F4	
000232C8 02                         SME_N6hqJ_64C:	dc.b 2	
000232C9 F003 0000 EC               		dc.b $F0, 3, 0, 0, $EC	
000232CE F00F 0004 F4               		dc.b $F0, $F, 0, 4, $F4	
000232D3 03                         SME_N6hqJ_657:	dc.b 3	
000232D4 E80F 0000 E8               		dc.b $E8, $F, 0, 0, $E8	
000232D9 E801 0010 08               		dc.b $E8, 1, 0, $10, 8	
000232DE F805 0012 08               		dc.b $F8, 5, 0, $12, 8	
000232E3 03                         SME_N6hqJ_667:	dc.b 3	
000232E4 E80F 0000 E8               		dc.b $E8, $F, 0, 0, $E8	
000232E9 E801 0010 08               		dc.b $E8, 1, 0, $10, 8	
000232EE F805 0012 08               		dc.b $F8, 5, 0, $12, 8	
000232F3 02                         SME_N6hqJ_677:	dc.b 2	
000232F4 E80B 0000 F4               		dc.b $E8, $B, 0, 0, $F4	
000232F9 0809 000C F4               		dc.b 8, 9, 0, $C, $F4	
000232FE 02                         SME_N6hqJ_682:	dc.b 2	
000232FF E80B 0000 F4               		dc.b $E8, $B, 0, 0, $F4	
00023304 0809 000C F4               		dc.b 8, 9, 0, $C, $F4	
00023309 03                         SME_N6hqJ_68D:	dc.b 3	
0002330A FC05 0000 EC               		dc.b $FC, 5, 0, 0, $EC	
0002330F F40B 0004 FC               		dc.b $F4, $B, 0, 4, $FC	
00023314 F401 0010 14               		dc.b $F4, 1, 0, $10, $14	
00023319 04                         SME_N6hqJ_69D:	dc.b 4	
0002331A F401 0000 E8               		dc.b $F4, 1, 0, 0, $E8	
0002331F F407 0002 F0               		dc.b $F4, 7, 0, 2, $F0	
00023324 F407 0802 00               		dc.b $F4, 7, 8, 2, 0	
00023329 F401 0800 10               		dc.b $F4, 1, 8, 0, $10	
0002332E 03                         SME_N6hqJ_6B2:	dc.b 3	
0002332F FC05 0800 04               		dc.b $FC, 5, 8, 0, 4	
00023334 F40B 0804 EC               		dc.b $F4, $B, 8, 4, $EC	
00023339 F401 0810 E4               		dc.b $F4, 1, 8, $10, $E4	
0002333E 03                         SME_N6hqJ_6C2:	dc.b 3	
0002333F F401 0000 E4               		dc.b $F4, 1, 0, 0, $E4	
00023344 F40B 0002 EC               		dc.b $F4, $B, 0, 2, $EC	
00023349 FC01 000E 04               		dc.b $FC, 1, 0, $E, 4	
0002334E 03                         SME_N6hqJ_6D2:	dc.b 3	
0002334F F401 0800 14               		dc.b $F4, 1, 8, 0, $14	
00023354 F40B 0802 FC               		dc.b $F4, $B, 8, 2, $FC	
00023359 FC01 080E F4               		dc.b $FC, 1, 8, $E, $F4	
0002335E 03                         SME_N6hqJ_6E2:	dc.b 3	
0002335F FC05 0000 EC               		dc.b $FC, 5, 0, 0, $EC	
00023364 F40B 0004 FC               		dc.b $F4, $B, 0, 4, $FC	
00023369 F401 0010 14               		dc.b $F4, 1, 0, $10, $14	
0002336E 03                         SME_N6hqJ_6F2:	dc.b 3	
0002336F E409 0000 F4               		dc.b $E4, 9, 0, 0, $F4	
00023374 F40F 0006 EC               		dc.b $F4, $F, 0, 6, $EC	
00023379 0401 0016 0C               		dc.b 4, 1, 0, $16, $C	
0002337E 02                         SME_N6hqJ_702:	dc.b 2	
0002337F E80B 0000 F4               		dc.b $E8, $B, 0, 0, $F4	
00023384 0805 000C FC               		dc.b 8, 5, 0, $C, $FC	
00023389 04                         SME_N6hqJ_70D:	dc.b 4	
0002338A EA01 0000 E8               		dc.b $EA, 1, 0, 0, $E8	
0002338F EA0B 0002 F0               		dc.b $EA, $B, 0, 2, $F0	
00023394 EA01 000E 08               		dc.b $EA, 1, 0, $E, 8	
00023399 0A0D 0010 F0               		dc.b $A, $D, 0, $10, $F0	
0002339E 04                         SME_N6hqJ_722:	dc.b 4	
0002339F EA01 0000 E8               		dc.b $EA, 1, 0, 0, $E8	
000233A4 EA0B 0002 F0               		dc.b $EA, $B, 0, 2, $F0	
000233A9 EA01 000E 08               		dc.b $EA, 1, 0, $E, 8	
000233AE 0A0D 0010 F0               		dc.b $A, $D, 0, $10, $F0	
000233B3 03                         SME_N6hqJ_737:	dc.b 3	
000233B4 EA0D 0000 E8               		dc.b $EA, $D, 0, 0, $E8	
000233B9 EA01 0008 08               		dc.b $EA, 1, 0, 8, 8	
000233BE FA0B 000A F0               		dc.b $FA, $B, 0, $A, $F0	
000233C3 03                         SME_N6hqJ_747:	dc.b 3	
000233C4 E409 0000 F0               		dc.b $E4, 9, 0, 0, $F0	
000233C9 F40B 0006 F0               		dc.b $F4, $B, 0, 6, $F0	
000233CE F401 0012 08               		dc.b $F4, 1, 0, $12, 8	
000233D3 03                         SME_N6hqJ_757:	dc.b 3	
000233D4 E50B 0000 F0               		dc.b $E5, $B, 0, 0, $F0	
000233D9 F401 000C 08               		dc.b $F4, 1, 0, $C, 8	
000233DE 0505 000E F8               		dc.b 5, 5, 0, $E, $F8	
000233E3 02                         SME_N6hqJ_767:	dc.b 2	
000233E4 EC0B 0000 F1               		dc.b $EC, $B, 0, 0, $F1	
000233E9 FC01 000C 09               		dc.b $FC, 1, 0, $C, 9	
000233EE 01                         SME_N6hqJ_772:	dc.b 1	
000233EF EE0F 0000 F0               		dc.b $EE, $F, 0, 0, $F0	
000233F4 02                         SME_N6hqJ_778:	dc.b 2	
000233F5 F20B 0000 F0               		dc.b $F2, $B, 0, 0, $F0	
000233FA FA01 000C 08               		dc.b $FA, 1, 0, $C, 8	
000233FF 03                         SME_N6hqJ_783:	dc.b 3	
00023400 E401 0000 00               		dc.b $E4, 1, 0, 0, 0	
00023405 F40B 0002 F0               		dc.b $F4, $B, 0, 2, $F0	
0002340A F401 000E 08               		dc.b $F4, 1, 0, $E, 8	
0002340F 03                         SME_N6hqJ_793:	dc.b 3	
00023410 E509 0000 F0               		dc.b $E5, 9, 0, 0, $F0	
00023415 F50B 0006 F0               		dc.b $F5, $B, 0, 6, $F0	
0002341A ED03 0012 08               		dc.b $ED, 3, 0, $12, 8	
0002341F 03                         SME_N6hqJ_7A3:	dc.b 3	
00023420 E405 0000 F8               		dc.b $E4, 5, 0, 0, $F8	
00023425 F40B 0004 F0               		dc.b $F4, $B, 0, 4, $F0	
0002342A F401 0010 08               		dc.b $F4, 1, 0, $10, 8	
0002342F 02                         SME_N6hqJ_7B3:	dc.b 2	
00023430 ED0B 0000 F0               		dc.b $ED, $B, 0, 0, $F0	
00023435 F501 000C 08               		dc.b $F5, 1, 0, $C, 8	
0002343A 02                         SME_N6hqJ_7BE:	dc.b 2	
0002343B F401 0000 F0               		dc.b $F4, 1, 0, 0, $F0	
00023440 F10B 0002 F8               		dc.b $F1, $B, 0, 2, $F8	
00023445 03                         SME_N6hqJ_7C9:	dc.b 3	
00023446 E405 0000 F1               		dc.b $E4, 5, 0, 0, $F1	
0002344B F40B 0004 F0               		dc.b $F4, $B, 0, 4, $F0	
00023450 F401 0010 08               		dc.b $F4, 1, 0, $10, 8	
00023455 02                         SME_N6hqJ_7D9:	dc.b 2	
00023456 E105 0000 F0               		dc.b $E1, 5, 0, 0, $F0	
0002345B F10F 0004 F0               		dc.b $F1, $F, 0, 4, $F0	
00023460 03                         SME_N6hqJ_7E4:	dc.b 3	
00023461 E807 0000 F0               		dc.b $E8, 7, 0, 0, $F0	
00023466 E003 0008 00               		dc.b $E0, 3, 0, 8, 0	
0002346B 0009 000C 00               		dc.b 0, 9, 0, $C, 0	
00023470 03                         SME_N6hqJ_7F4:	dc.b 3	
00023471 E807 0000 F0               		dc.b $E8, 7, 0, 0, $F0	
00023476 E003 0008 00               		dc.b $E0, 3, 0, 8, 0	
0002347B 0009 000C 00               		dc.b 0, 9, 0, $C, 0	
00023480 01                         SME_N6hqJ_804:	dc.b 1	
00023481 F00B 0000 F5               		dc.b $F0, $B, 0, 0, $F5	
00023486 03                         SME_N6hqJ_80A:	dc.b 3	
00023487 E60B 0000 F0               		dc.b $E6, $B, 0, 0, $F0	
0002348C EE01 000C 08               		dc.b $EE, 1, 0, $C, 8	
00023491 0609 000E F0               		dc.b 6, 9, 0, $E, $F0	
00023496 03                         SME_N6hqJ_81A:	dc.b 3	
00023497 E40A 0000 F0               		dc.b $E4, $A, 0, 0, $F0	
0002349C FC00 0009 08               		dc.b $FC, 0, 0, 9, 8	
000234A1 FC0A 000A F0               		dc.b $FC, $A, 0, $A, $F0	
000234A6 05                         SME_N6hqJ_82A:	dc.b 5	
000234A7 E408 0000 F0               		dc.b $E4, 8, 0, 0, $F0	
000234AC EC01 0003 F0               		dc.b $EC, 1, 0, 3, $F0	
000234B1 EC05 0005 F8               		dc.b $EC, 5, 0, 5, $F8	
000234B6 FC0A 0009 F0               		dc.b $FC, $A, 0, 9, $F0	
000234BB FD00 0012 08               		dc.b $FD, 0, 0, $12, 8	
000234C0 05                         SME_N6hqJ_844:	dc.b 5	
000234C1 E408 0000 F0               		dc.b $E4, 8, 0, 0, $F0	
000234C6 EC01 0003 F0               		dc.b $EC, 1, 0, 3, $F0	
000234CB EC05 0005 F8               		dc.b $EC, 5, 0, 5, $F8	
000234D0 FC0A 0009 F0               		dc.b $FC, $A, 0, 9, $F0	
000234D5 FD00 0012 08               		dc.b $FD, 0, 0, $12, 8	
000234DA 02                         SME_N6hqJ_85E:	dc.b 2	
000234DB E70A 0000 F1               		dc.b $E7, $A, 0, 0, $F1	
000234E0 FF0A 0009 F3               		dc.b $FF, $A, 0, 9, $F3	
000234E5 02                         SME_N6hqJ_869:	dc.b 2	
000234E6 E70A 0000 F1               		dc.b $E7, $A, 0, 0, $F1	
000234EB FF0A 0009 F3               		dc.b $FF, $A, 0, 9, $F3	
000234F0 02                         SME_N6hqJ_874:	dc.b 2	
000234F1 E70A 0000 F1               		dc.b $E7, $A, 0, 0, $F1	
000234F6 FF0A 0009 F3               		dc.b $FF, $A, 0, 9, $F3	
000234FB 03                         SME_N6hqJ_87F:	dc.b 3	
000234FC E30E 0000 EE               		dc.b $E3, $E, 0, 0, $EE	
00023501 0301 000C EC               		dc.b 3, 1, 0, $C, $EC	
00023506 FB0F 000E F4               		dc.b $FB, $F, 0, $E, $F4	
0002350B 04                         SME_N6hqJ_88F:	dc.b 4	
0002350C E40E 0000 EE               		dc.b $E4, $E, 0, 0, $EE	
00023511 0401 000C EC               		dc.b 4, 1, 0, $C, $EC	
00023516 FC0B 000E F4               		dc.b $FC, $B, 0, $E, $F4	
0002351B 0401 001A 0C               		dc.b 4, 1, 0, $1A, $C	
00023520 03                         SME_N6hqJ_8A4:	dc.b 3	
00023521 E50E 0000 ED               		dc.b $E5, $E, 0, 0, $ED	
00023526 FD09 000C F4               		dc.b $FD, 9, 0, $C, $F4	
0002352B 0D05 0012 F7               		dc.b $D, 5, 0, $12, $F7	
00023530 02                         SME_N6hqJ_8B4:	dc.b 2	
00023531 E40A 0000 F4               		dc.b $E4, $A, 0, 0, $F4	
00023536 FC0F 0009 EE               		dc.b $FC, $F, 0, 9, $EE	
0002353B 03                         SME_N6hqJ_8BF:	dc.b 3	
0002353C E30A 0000 F4               		dc.b $E3, $A, 0, 0, $F4	
00023541 FB0F 0009 EE               		dc.b $FB, $F, 0, 9, $EE	
00023546 FB01 0019 0E               		dc.b $FB, 1, 0, $19, $E	
0002354B 04                         SME_N6hqJ_8CF:	dc.b 4	
0002354C E40A 0000 F4               		dc.b $E4, $A, 0, 0, $F4	
00023551 0401 0009 EC               		dc.b 4, 1, 0, 9, $EC	
00023556 FC0B 000B F4               		dc.b $FC, $B, 0, $B, $F4	
0002355B 0401 0017 0C               		dc.b 4, 1, 0, $17, $C	
00023560 03                         SME_N6hqJ_8E4:	dc.b 3	
00023561 E50E 0000 ED               		dc.b $E5, $E, 0, 0, $ED	
00023566 FD09 000C F4               		dc.b $FD, 9, 0, $C, $F4	
0002356B 0D05 0012 F7               		dc.b $D, 5, 0, $12, $F7	
00023570 02                         SME_N6hqJ_8F4:	dc.b 2	
00023571 E40E 0000 EE               		dc.b $E4, $E, 0, 0, $EE	
00023576 FC0B 000C F3               		dc.b $FC, $B, 0, $C, $F3	
0002357B 04                         SME_N6hqJ_8FF:	dc.b 4	
0002357C EB0D 0000 E2               		dc.b $EB, $D, 0, 0, $E2	
00023581 F305 0008 02               		dc.b $F3, 5, 0, 8, 2	
00023586 FB09 000C EA               		dc.b $FB, 9, 0, $C, $EA	
0002358B 0B01 0012 FA               		dc.b $B, 1, 0, $12, $FA	
00023590 05                         SME_N6hqJ_914:	dc.b 5	
00023591 EC0D 0000 E3               		dc.b $EC, $D, 0, 0, $E3	
00023596 EC01 0008 03               		dc.b $EC, 1, 0, 8, 3	
0002359B FC0D 000A EB               		dc.b $FC, $D, 0, $A, $EB	
000235A0 FC05 0012 0B               		dc.b $FC, 5, 0, $12, $B	
000235A5 0C01 0016 FB               		dc.b $C, 1, 0, $16, $FB	
000235AA 05                         SME_N6hqJ_92E:	dc.b 5	
000235AB ED0A 0000 E4               		dc.b $ED, $A, 0, 0, $E4	
000235B0 ED03 0009 FC               		dc.b $ED, 3, 0, 9, $FC	
000235B5 0500 000D F4               		dc.b 5, 0, 0, $D, $F4	
000235BA F501 000E 04               		dc.b $F5, 1, 0, $E, 4	
000235BF 0505 0010 04               		dc.b 5, 5, 0, $10, 4	
000235C4 05                         SME_N6hqJ_948:	dc.b 5	
000235C5 E400 0000 F1               		dc.b $E4, 0, 0, 0, $F1	
000235CA EC0D 0001 E3               		dc.b $EC, $D, 0, 1, $E3	
000235CF EC01 0009 03               		dc.b $EC, 1, 0, 9, 3	
000235D4 FC05 000B EB               		dc.b $FC, 5, 0, $B, $EB	
000235D9 FC0B 000F FB               		dc.b $FC, $B, 0, $F, $FB	
000235DE 06                         SME_N6hqJ_962:	dc.b 6	
000235DF E300 0000 F0               		dc.b $E3, 0, 0, 0, $F0	
000235E4 EB0D 0001 E2               		dc.b $EB, $D, 0, 1, $E2	
000235E9 EB01 0009 02               		dc.b $EB, 1, 0, 9, 2	
000235EE F301 000B 0A               		dc.b $F3, 1, 0, $B, $A	
000235F3 FB0D 000D EA               		dc.b $FB, $D, 0, $D, $EA	
000235F8 0B05 0015 F2               		dc.b $B, 5, 0, $15, $F2	
000235FD 06                         SME_N6hqJ_981:	dc.b 6	
000235FE E400 0000 F1               		dc.b $E4, 0, 0, 0, $F1	
00023603 EC0D 0001 E3               		dc.b $EC, $D, 0, 1, $E3	
00023608 EC01 0009 03               		dc.b $EC, 1, 0, 9, 3	
0002360D FC0D 000B EB               		dc.b $FC, $D, 0, $B, $EB	
00023612 FA05 0013 0B               		dc.b $FA, 5, 0, $13, $B	
00023617 0C01 0017 FB               		dc.b $C, 1, 0, $17, $FB	
0002361C 05                         SME_N6hqJ_9A0:	dc.b 5	
0002361D ED0A 0000 E4               		dc.b $ED, $A, 0, 0, $E4	
00023622 ED03 0009 FC               		dc.b $ED, 3, 0, 9, $FC	
00023627 0500 000D F4               		dc.b 5, 0, 0, $D, $F4	
0002362C F501 000E 04               		dc.b $F5, 1, 0, $E, 4	
00023631 0505 0010 04               		dc.b 5, 5, 0, $10, 4	
00023636 05                         SME_N6hqJ_9BA:	dc.b 5	
00023637 EC0D 0000 E3               		dc.b $EC, $D, 0, 0, $E3	
0002363C F401 0008 03               		dc.b $F4, 1, 0, 8, 3	
00023641 FC09 000A EB               		dc.b $FC, 9, 0, $A, $EB	
00023646 0C00 0010 FB               		dc.b $C, 0, 0, $10, $FB	
0002364B 0405 0011 03               		dc.b 4, 5, 0, $11, 3	
00023650 03                         SME_N6hqJ_9D4:	dc.b 3	
00023651 F20B 0000 E3               		dc.b $F2, $B, 0, 0, $E3	
00023656 EC0B 000C FB               		dc.b $EC, $B, 0, $C, $FB	
0002365B 0C05 0018 03               		dc.b $C, 5, 0, $18, 3	
00023660 03                         SME_N6hqJ_9E4:	dc.b 3	
00023661 F20B 0000 E4               		dc.b $F2, $B, 0, 0, $E4	
00023666 EC0B 000C FC               		dc.b $EC, $B, 0, $C, $FC	
0002366B 0C05 0018 04               		dc.b $C, 5, 0, $18, 4	
00023670 03                         SME_N6hqJ_9F4:	dc.b 3	
00023671 F30B 0000 E5               		dc.b $F3, $B, 0, 0, $E5	
00023676 F403 000C FD               		dc.b $F4, 3, 0, $C, $FD	
0002367B F905 0010 05               		dc.b $F9, 5, 0, $10, 5	
00023680 02                         SME_N6hqJ_A04:	dc.b 2	
00023681 F40A 0000 E4               		dc.b $F4, $A, 0, 0, $E4	
00023686 F20B 0009 FC               		dc.b $F2, $B, 0, 9, $FC	
0002368B 03                         SME_N6hqJ_A0F:	dc.b 3	
0002368C F40A 0000 E3               		dc.b $F4, $A, 0, 0, $E3	
00023691 E305 0009 FB               		dc.b $E3, 5, 0, 9, $FB	
00023696 F30B 000D FB               		dc.b $F3, $B, 0, $D, $FB	
0002369B 03                         SME_N6hqJ_A1F:	dc.b 3	
0002369C F40A 0000 E4               		dc.b $F4, $A, 0, 0, $E4	
000236A1 EC0B 0009 FC               		dc.b $EC, $B, 0, 9, $FC	
000236A6 0C05 0015 04               		dc.b $C, 5, 0, $15, 4	
000236AB 03                         SME_N6hqJ_A2F:	dc.b 3	
000236AC F30B 0000 E5               		dc.b $F3, $B, 0, 0, $E5	
000236B1 F403 000C FD               		dc.b $F4, 3, 0, $C, $FD	
000236B6 F905 0010 05               		dc.b $F9, 5, 0, $10, 5	
000236BB 02                         SME_N6hqJ_A3F:	dc.b 2	
000236BC F40B 0000 E4               		dc.b $F4, $B, 0, 0, $E4	
000236C1 F20B 000C FC               		dc.b $F2, $B, 0, $C, $FC	
000236C6 04                         SME_N6hqJ_A4A:	dc.b 4	
000236C7 EE05 0000 F3               		dc.b $EE, 5, 0, 0, $F3	
000236CC FE07 0004 EB               		dc.b $FE, 7, 0, 4, $EB	
000236D1 FE0D 000C FB               		dc.b $FE, $D, 0, $C, $FB	
000236D6 0E00 0014 FB               		dc.b $E, 0, 0, $14, $FB	
000236DB 05                         SME_N6hqJ_A5F:	dc.b 5	
000236DC DD05 0000 FC               		dc.b $DD, 5, 0, 0, $FC	
000236E1 ED09 0004 F4               		dc.b $ED, 9, 0, 4, $F4	
000236E6 FD07 000A EC               		dc.b $FD, 7, 0, $A, $EC	
000236EB FD0D 0012 FC               		dc.b $FD, $D, 0, $12, $FC	
000236F0 0D00 001A FC               		dc.b $D, 0, 0, $1A, $FC	
000236F5 04                         SME_N6hqJ_A79:	dc.b 4	
000236F6 EC0D 0000 F5               		dc.b $EC, $D, 0, 0, $F5	
000236FB FC07 0008 ED               		dc.b $FC, 7, 0, 8, $ED	
00023700 FC05 0010 FD               		dc.b $FC, 5, 0, $10, $FD	
00023705 0C01 0014 FD               		dc.b $C, 1, 0, $14, $FD	
0002370A 04                         SME_N6hqJ_A8E:	dc.b 4	
0002370B ED0D 0000 F4               		dc.b $ED, $D, 0, 0, $F4	
00023710 FD0B 0008 E4               		dc.b $FD, $B, 0, 8, $E4	
00023715 FD09 0014 FC               		dc.b $FD, 9, 0, $14, $FC	
0002371A 0D00 001A FC               		dc.b $D, 0, 0, $1A, $FC	
0002371F 04                         SME_N6hqJ_AA3:	dc.b 4	
00023720 EE09 0000 F3               		dc.b $EE, 9, 0, 0, $F3	
00023725 FE0B 0006 E3               		dc.b $FE, $B, 0, 6, $E3	
0002372A FE0D 0012 FB               		dc.b $FE, $D, 0, $12, $FB	
0002372F 0E00 001A FB               		dc.b $E, 0, 0, $1A, $FB	
00023734 05                         SME_N6hqJ_AB8:	dc.b 5	
00023735 DD05 0000 FA               		dc.b $DD, 5, 0, 0, $FA	
0002373A ED09 0004 F4               		dc.b $ED, 9, 0, 4, $F4	
0002373F FD0B 000A E4               		dc.b $FD, $B, 0, $A, $E4	
00023744 FD0D 0016 FC               		dc.b $FD, $D, 0, $16, $FC	
00023749 0D00 001E FC               		dc.b $D, 0, 0, $1E, $FC	
0002374E 04                         SME_N6hqJ_AD2:	dc.b 4	
0002374F EC0D 0000 F5               		dc.b $EC, $D, 0, 0, $F5	
00023754 FC07 0008 ED               		dc.b $FC, 7, 0, 8, $ED	
00023759 FC05 0010 FD               		dc.b $FC, 5, 0, $10, $FD	
0002375E 0C01 0014 FD               		dc.b $C, 1, 0, $14, $FD	
00023763 04                         SME_N6hqJ_AE7:	dc.b 4	
00023764 ED0D 0000 F4               		dc.b $ED, $D, 0, 0, $F4	
00023769 FD07 0008 EC               		dc.b $FD, 7, 0, 8, $EC	
0002376E FD09 0010 FC               		dc.b $FD, 9, 0, $10, $FC	
00023773 0D00 0016 FC               		dc.b $D, 0, 0, $16, $FC	
00023778 03                         SME_N6hqJ_AFC:	dc.b 3	
00023779 E30E 0000 EE               		dc.b $E3, $E, 0, 0, $EE	
0002377E 0301 000C EC               		dc.b 3, 1, 0, $C, $EC	
00023783 FB0F 000E F4               		dc.b $FB, $F, 0, $E, $F4	
00023788 04                         SME_N6hqJ_B0C:	dc.b 4	
00023789 E40E 0000 EE               		dc.b $E4, $E, 0, 0, $EE	
0002378E 0401 000C EC               		dc.b 4, 1, 0, $C, $EC	
00023793 FC0B 000E F4               		dc.b $FC, $B, 0, $E, $F4	
00023798 0401 001A 0C               		dc.b 4, 1, 0, $1A, $C	
0002379D 03                         SME_N6hqJ_B21:	dc.b 3	
0002379E E50E 0000 ED               		dc.b $E5, $E, 0, 0, $ED	
000237A3 FD09 000C F4               		dc.b $FD, 9, 0, $C, $F4	
000237A8 0D05 0012 F7               		dc.b $D, 5, 0, $12, $F7	
000237AD 02                         SME_N6hqJ_B31:	dc.b 2	
000237AE E40A 0000 F4               		dc.b $E4, $A, 0, 0, $F4	
000237B3 FC0F 0009 EE               		dc.b $FC, $F, 0, 9, $EE	
000237B8 03                         SME_N6hqJ_B3C:	dc.b 3	
000237B9 E30A 0000 F4               		dc.b $E3, $A, 0, 0, $F4	
000237BE FB0F 0009 EE               		dc.b $FB, $F, 0, 9, $EE	
000237C3 FB01 0019 0E               		dc.b $FB, 1, 0, $19, $E	
000237C8 04                         SME_N6hqJ_B4C:	dc.b 4	
000237C9 E40A 0000 F4               		dc.b $E4, $A, 0, 0, $F4	
000237CE 0401 0009 EC               		dc.b 4, 1, 0, 9, $EC	
000237D3 FC0B 000B F4               		dc.b $FC, $B, 0, $B, $F4	
000237D8 0401 0017 0C               		dc.b 4, 1, 0, $17, $C	
000237DD 03                         SME_N6hqJ_B61:	dc.b 3	
000237DE E50E 0000 ED               		dc.b $E5, $E, 0, 0, $ED	
000237E3 FD09 000C F4               		dc.b $FD, 9, 0, $C, $F4	
000237E8 0D05 0012 F7               		dc.b $D, 5, 0, $12, $F7	
000237ED 02                         SME_N6hqJ_B71:	dc.b 2	
000237EE E40E 0000 EE               		dc.b $E4, $E, 0, 0, $EE	
000237F3 FC0B 000C F3               		dc.b $FC, $B, 0, $C, $F3	
000237F8 05                         SME_N6hqJ_B7C:	dc.b 5	
000237F9 E304 0000 EA               		dc.b $E3, 4, 0, 0, $EA	
000237FE EB0D 0002 E2               		dc.b $EB, $D, 0, 2, $E2	
00023803 FB09 000A EA               		dc.b $FB, 9, 0, $A, $EA	
00023808 F305 0010 02               		dc.b $F3, 5, 0, $10, 2	
0002380D 0B01 0014 FA               		dc.b $B, 1, 0, $14, $FA	
00023812 06                         SME_N6hqJ_B96:	dc.b 6	
00023813 E404 0000 EB               		dc.b $E4, 4, 0, 0, $EB	
00023818 EC0D 0002 E3               		dc.b $EC, $D, 0, 2, $E3	
0002381D EC01 000A 03               		dc.b $EC, 1, 0, $A, 3	
00023822 FC0D 000C EB               		dc.b $FC, $D, 0, $C, $EB	
00023827 FC05 0014 0B               		dc.b $FC, 5, 0, $14, $B	
0002382C 0C01 0018 FB               		dc.b $C, 1, 0, $18, $FB	
00023831 05                         SME_N6hqJ_BB5:	dc.b 5	
00023832 EB09 0000 E4               		dc.b $EB, 9, 0, 0, $E4	
00023837 FB05 0006 EC               		dc.b $FB, 5, 0, 6, $EC	
0002383C ED03 000A FC               		dc.b $ED, 3, 0, $A, $FC	
00023841 F501 000E 04               		dc.b $F5, 1, 0, $E, 4	
00023846 0505 0010 04               		dc.b 5, 5, 0, $10, 4	
0002384B 05                         SME_N6hqJ_BCF:	dc.b 5	
0002384C E404 0000 EB               		dc.b $E4, 4, 0, 0, $EB	
00023851 EC0D 0002 E3               		dc.b $EC, $D, 0, 2, $E3	
00023856 EC01 000A 03               		dc.b $EC, 1, 0, $A, 3	
0002385B FC05 000C EB               		dc.b $FC, 5, 0, $C, $EB	
00023860 FC0B 0010 FB               		dc.b $FC, $B, 0, $10, $FB	
00023865 06                         SME_N6hqJ_BE9:	dc.b 6	
00023866 E304 0000 EA               		dc.b $E3, 4, 0, 0, $EA	
0002386B EB0D 0002 E2               		dc.b $EB, $D, 0, 2, $E2	
00023870 EB01 000A 02               		dc.b $EB, 1, 0, $A, 2	
00023875 F301 000C 0A               		dc.b $F3, 1, 0, $C, $A	
0002387A FB0D 000E EA               		dc.b $FB, $D, 0, $E, $EA	
0002387F 0B05 0016 F2               		dc.b $B, 5, 0, $16, $F2	
00023884 06                         SME_N6hqJ_C08:	dc.b 6	
00023885 E404 0000 EB               		dc.b $E4, 4, 0, 0, $EB	
0002388A EC0D 0002 E3               		dc.b $EC, $D, 0, 2, $E3	
0002388F EC01 000A 03               		dc.b $EC, 1, 0, $A, 3	
00023894 FC0D 000C EB               		dc.b $FC, $D, 0, $C, $EB	
00023899 FA05 0014 0B               		dc.b $FA, 5, 0, $14, $B	
0002389E 0C01 0018 FB               		dc.b $C, 1, 0, $18, $FB	
000238A3 05                         SME_N6hqJ_C27:	dc.b 5	
000238A4 EB09 0000 E4               		dc.b $EB, 9, 0, 0, $E4	
000238A9 FB05 0006 EC               		dc.b $FB, 5, 0, 6, $EC	
000238AE ED03 000A FC               		dc.b $ED, 3, 0, $A, $FC	
000238B3 F501 000E 04               		dc.b $F5, 1, 0, $E, 4	
000238B8 0505 0010 04               		dc.b 5, 5, 0, $10, 4	
000238BD 06                         SME_N6hqJ_C41:	dc.b 6	
000238BE E404 0000 EB               		dc.b $E4, 4, 0, 0, $EB	
000238C3 EC0D 0002 E3               		dc.b $EC, $D, 0, 2, $E3	
000238C8 FC09 000A EB               		dc.b $FC, 9, 0, $A, $EB	
000238CD F401 0010 03               		dc.b $F4, 1, 0, $10, 3	
000238D2 0405 0012 03               		dc.b 4, 5, 0, $12, 3	
000238D7 0C01 0016 FB               		dc.b $C, 1, 0, $16, $FB	
000238DC 03                         SME_N6hqJ_C60:	dc.b 3	
000238DD F20B 0000 E3               		dc.b $F2, $B, 0, 0, $E3	
000238E2 EC0B 000C FB               		dc.b $EC, $B, 0, $C, $FB	
000238E7 0C05 0018 03               		dc.b $C, 5, 0, $18, 3	
000238EC 03                         SME_N6hqJ_C70:	dc.b 3	
000238ED F20B 0000 E4               		dc.b $F2, $B, 0, 0, $E4	
000238F2 EC0B 000C FC               		dc.b $EC, $B, 0, $C, $FC	
000238F7 0C05 0018 04               		dc.b $C, 5, 0, $18, 4	
000238FC 03                         SME_N6hqJ_C80:	dc.b 3	
000238FD F30B 0000 E5               		dc.b $F3, $B, 0, 0, $E5	
00023902 F403 000C FD               		dc.b $F4, 3, 0, $C, $FD	
00023907 F905 0010 05               		dc.b $F9, 5, 0, $10, 5	
0002390C 02                         SME_N6hqJ_C90:	dc.b 2	
0002390D F40A 0000 E4               		dc.b $F4, $A, 0, 0, $E4	
00023912 F20B 0009 FC               		dc.b $F2, $B, 0, 9, $FC	
00023917 03                         SME_N6hqJ_C9B:	dc.b 3	
00023918 F40A 0000 E3               		dc.b $F4, $A, 0, 0, $E3	
0002391D E305 0009 FB               		dc.b $E3, 5, 0, 9, $FB	
00023922 F30B 000D FB               		dc.b $F3, $B, 0, $D, $FB	
00023927 03                         SME_N6hqJ_CAB:	dc.b 3	
00023928 F40A 0000 E4               		dc.b $F4, $A, 0, 0, $E4	
0002392D EC0B 0009 FC               		dc.b $EC, $B, 0, 9, $FC	
00023932 0C05 0015 04               		dc.b $C, 5, 0, $15, 4	
00023937 03                         SME_N6hqJ_CBB:	dc.b 3	
00023938 F30B 0000 E5               		dc.b $F3, $B, 0, 0, $E5	
0002393D F403 000C FD               		dc.b $F4, 3, 0, $C, $FD	
00023942 F905 0010 05               		dc.b $F9, 5, 0, $10, 5	
00023947 02                         SME_N6hqJ_CCB:	dc.b 2	
00023948 F20B 0000 E4               		dc.b $F2, $B, 0, 0, $E4	
0002394D F40B 000C FC               		dc.b $F4, $B, 0, $C, $FC	
00023952 04                         SME_N6hqJ_CD6:	dc.b 4	
00023953 EE05 0000 F3               		dc.b $EE, 5, 0, 0, $F3	
00023958 FE0B 0004 E3               		dc.b $FE, $B, 0, 4, $E3	
0002395D FE0D 0010 FB               		dc.b $FE, $D, 0, $10, $FB	
00023962 0E00 0018 FB               		dc.b $E, 0, 0, $18, $FB	
00023967 05                         SME_N6hqJ_CEB:	dc.b 5	
00023968 DD05 0000 FC               		dc.b $DD, 5, 0, 0, $FC	
0002396D ED09 0004 F4               		dc.b $ED, 9, 0, 4, $F4	
00023972 FD0B 000A E4               		dc.b $FD, $B, 0, $A, $E4	
00023977 FD0D 0016 FC               		dc.b $FD, $D, 0, $16, $FC	
0002397C 0D00 001E FC               		dc.b $D, 0, 0, $1E, $FC	
00023981 05                         SME_N6hqJ_D05:	dc.b 5	
00023982 EC0D 0000 F5               		dc.b $EC, $D, 0, 0, $F5	
00023987 0401 0008 E5               		dc.b 4, 1, 0, 8, $E5	
0002398C FC07 000A ED               		dc.b $FC, 7, 0, $A, $ED	
00023991 FC05 0012 FD               		dc.b $FC, 5, 0, $12, $FD	
00023996 0C00 0016 FD               		dc.b $C, 0, 0, $16, $FD	
0002399B 04                         SME_N6hqJ_D1F:	dc.b 4	
0002399C ED0D 0000 F4               		dc.b $ED, $D, 0, 0, $F4	
000239A1 FD0B 0008 E4               		dc.b $FD, $B, 0, 8, $E4	
000239A6 FD09 0014 FC               		dc.b $FD, 9, 0, $14, $FC	
000239AB 0D00 001A FC               		dc.b $D, 0, 0, $1A, $FC	
000239B0 04                         SME_N6hqJ_D34:	dc.b 4	
000239B1 EE09 0000 F3               		dc.b $EE, 9, 0, 0, $F3	
000239B6 FE0B 0006 E3               		dc.b $FE, $B, 0, 6, $E3	
000239BB FE0D 0012 FB               		dc.b $FE, $D, 0, $12, $FB	
000239C0 0E00 001A FB               		dc.b $E, 0, 0, $1A, $FB	
000239C5 05                         SME_N6hqJ_D49:	dc.b 5	
000239C6 DD05 0000 FA               		dc.b $DD, 5, 0, 0, $FA	
000239CB ED09 0004 F4               		dc.b $ED, 9, 0, 4, $F4	
000239D0 FD0B 000A E4               		dc.b $FD, $B, 0, $A, $E4	
000239D5 FD0D 0016 FC               		dc.b $FD, $D, 0, $16, $FC	
000239DA 0D00 001E FC               		dc.b $D, 0, 0, $1E, $FC	
000239DF 05                         SME_N6hqJ_D63:	dc.b 5	
000239E0 EC0D 0000 F5               		dc.b $EC, $D, 0, 0, $F5	
000239E5 0401 0008 E5               		dc.b 4, 1, 0, 8, $E5	
000239EA FC07 000A ED               		dc.b $FC, 7, 0, $A, $ED	
000239EF FC05 0012 FD               		dc.b $FC, 5, 0, $12, $FD	
000239F4 0C00 0016 FD               		dc.b $C, 0, 0, $16, $FD	
000239F9 05                         SME_N6hqJ_D7D:	dc.b 5	
000239FA ED0D 0000 F4               		dc.b $ED, $D, 0, 0, $F4	
000239FF 0501 0008 E4               		dc.b 5, 1, 0, 8, $E4	
00023A04 FD07 000A EC               		dc.b $FD, 7, 0, $A, $EC	
00023A09 FD09 0012 FC               		dc.b $FD, 9, 0, $12, $FC	
00023A0E 0D00 0018 FC               		dc.b $D, 0, 0, $18, $FC	
00023A13 04                         SME_N6hqJ_D97:	dc.b 4	
00023A14 F008 0000 FC               		dc.b $F0, 8, 0, 0, $FC	
00023A19 F800 0003 FC               		dc.b $F8, 0, 0, 3, $FC	
00023A1E F805 0004 04               		dc.b $F8, 5, 0, 4, 4	
00023A23 0009 0008 EC               		dc.b 0, 9, 0, 8, $EC	
00023A28 04                         SME_N6hqJ_DAC:	dc.b 4	
00023A29 E604 0000 FA               		dc.b $E6, 4, 0, 0, $FA	
00023A2E EE0B 0002 F2               		dc.b $EE, $B, 0, 2, $F2	
00023A33 EE02 000E 0A               		dc.b $EE, 2, 0, $E, $A	
00023A38 0E04 0011 FA               		dc.b $E, 4, 0, $11, $FA	
00023A3D 04                         SME_N6hqJ_DC1:	dc.b 4	
00023A3E EC02 0000 F0               		dc.b $EC, 2, 0, 0, $F0	
00023A43 EC05 0003 F8               		dc.b $EC, 5, 0, 3, $F8	
00023A48 FC08 0007 F8               		dc.b $FC, 8, 0, 7, $F8	
00023A4D 0405 000A 00               		dc.b 4, 5, 0, $A, 0	
00023A52 05                         SME_N6hqJ_DD6:	dc.b 5	
00023A53 EE08 0000 EE               		dc.b $EE, 8, 0, 0, $EE	
00023A58 F60D 0003 E6               		dc.b $F6, $D, 0, 3, $E6	
00023A5D F605 000B 06               		dc.b $F6, 5, 0, $B, 6	
00023A62 0604 000F EE               		dc.b 6, 4, 0, $F, $EE	
00023A67 0600 0011 06               		dc.b 6, 0, 0, $11, 6	
00023A6C 04                         SME_N6hqJ_DF0:	dc.b 4	
00023A6D E809 0000 FC               		dc.b $E8, 9, 0, 0, $FC	
00023A72 F800 0006 FC               		dc.b $F8, 0, 0, 6, $FC	
00023A77 F805 0007 04               		dc.b $F8, 5, 0, 7, 4	
00023A7C 0009 000B EC               		dc.b 0, 9, 0, $B, $EC	
00023A81 04                         SME_N6hqJ_E05:	dc.b 4	
00023A82 E604 0000 FA               		dc.b $E6, 4, 0, 0, $FA	
00023A87 EE0B 0002 F2               		dc.b $EE, $B, 0, 2, $F2	
00023A8C EE02 000E 0A               		dc.b $EE, 2, 0, $E, $A	
00023A91 0E00 0011 FA               		dc.b $E, 0, 0, $11, $FA	
00023A96 04                         SME_N6hqJ_E1A:	dc.b 4	
00023A97 EC06 0000 E8               		dc.b $EC, 6, 0, 0, $E8	
00023A9C EC05 0006 F8               		dc.b $EC, 5, 0, 6, $F8	
00023AA1 FC00 000A F8               		dc.b $FC, 0, 0, $A, $F8	
00023AA6 FC06 000B 00               		dc.b $FC, 6, 0, $B, 0	
00023AAB 05                         SME_N6hqJ_E2F:	dc.b 5	
00023AAC EE08 0000 EE               		dc.b $EE, 8, 0, 0, $EE	
00023AB1 F60D 0003 E6               		dc.b $F6, $D, 0, 3, $E6	
00023AB6 F605 000B 06               		dc.b $F6, 5, 0, $B, 6	
00023ABB 0604 000F EE               		dc.b 6, 4, 0, $F, $EE	
00023AC0 0600 0011 06               		dc.b 6, 0, 0, $11, 6	
00023AC5 04                         SME_N6hqJ_E49:	dc.b 4	
00023AC6 E509 0000 EE               		dc.b $E5, 9, 0, 0, $EE	
00023ACB F505 0006 EB               		dc.b $F5, 5, 0, 6, $EB	
00023AD0 F505 000A FB               		dc.b $F5, 5, 0, $A, $FB	
00023AD5 050D 000E EB               		dc.b 5, $D, 0, $E, $EB	
00023ADA 04                         SME_N6hqJ_E5E:	dc.b 4	
00023ADB E409 0000 EE               		dc.b $E4, 9, 0, 0, $EE	
00023AE0 F405 0006 EB               		dc.b $F4, 5, 0, 6, $EB	
00023AE5 F405 000A FB               		dc.b $F4, 5, 0, $A, $FB	
00023AEA 040D 000E EB               		dc.b 4, $D, 0, $E, $EB	
00023AEF 04                         SME_N6hqJ_E73:	dc.b 4	
00023AF0 E509 0000 EE               		dc.b $E5, 9, 0, 0, $EE	
00023AF5 F505 0006 EB               		dc.b $F5, 5, 0, 6, $EB	
00023AFA F505 000A FB               		dc.b $F5, 5, 0, $A, $FB	
00023AFF 050D 000E EB               		dc.b 5, $D, 0, $E, $EB	
00023B04 04                         SME_N6hqJ_E88:	dc.b 4	
00023B05 E409 0000 EE               		dc.b $E4, 9, 0, 0, $EE	
00023B0A F405 0006 EB               		dc.b $F4, 5, 0, 6, $EB	
00023B0F F405 000A FB               		dc.b $F4, 5, 0, $A, $FB	
00023B14 040D 000E EB               		dc.b 4, $D, 0, $E, $EB	
00023B19 02                         SME_N6hqJ_E9D:	dc.b 2	
00023B1A FC02 0000 F0               		dc.b $FC, 2, 0, 0, $F0	
00023B1F F40B 0003 F8               		dc.b $F4, $B, 0, 3, $F8	
00023B24 03                         SME_N6hqJ_EA8:	dc.b 3	
00023B25 E40A 0000 EC               		dc.b $E4, $A, 0, 0, $EC	
00023B2A FC08 0009 EC               		dc.b $FC, 8, 0, 9, $EC	
00023B2F 0405 000C F1               		dc.b 4, 5, 0, $C, $F1	
00023B34 03                         SME_N6hqJ_EB8:	dc.b 3	
00023B35 E40A 0000 EC               		dc.b $E4, $A, 0, 0, $EC	
00023B3A FC08 0009 EC               		dc.b $FC, 8, 0, 9, $EC	
00023B3F 0405 000C F1               		dc.b 4, 5, 0, $C, $F1	
00023B44 03                         SME_N6hqJ_EC8:	dc.b 3	
00023B45 E40A 0000 EC               		dc.b $E4, $A, 0, 0, $EC	
00023B4A FC08 0009 EC               		dc.b $FC, 8, 0, 9, $EC	
00023B4F 0405 000C F1               		dc.b 4, 5, 0, $C, $F1	
00023B54 03                         SME_N6hqJ_ED8:	dc.b 3	
00023B55 E50A 0000 ED               		dc.b $E5, $A, 0, 0, $ED	
00023B5A FD08 0009 ED               		dc.b $FD, 8, 0, 9, $ED	
00023B5F 0505 000C F1               		dc.b 5, 5, 0, $C, $F1	
00023B64 03                         SME_N6hqJ_EE8:	dc.b 3	
00023B65 E50A 0000 ED               		dc.b $E5, $A, 0, 0, $ED	
00023B6A FD08 0009 ED               		dc.b $FD, 8, 0, 9, $ED	
00023B6F 0505 000C F1               		dc.b 5, 5, 0, $C, $F1	
00023B74 03                         SME_N6hqJ_EF8:	dc.b 3	
00023B75 E50A 0000 ED               		dc.b $E5, $A, 0, 0, $ED	
00023B7A FD08 0009 ED               		dc.b $FD, 8, 0, 9, $ED	
00023B7F 0505 000C F1               		dc.b 5, 5, 0, $C, $F1	
00023B84 03                         SME_N6hqJ_F08:	dc.b 3	
00023B85 EC0B 0000 F0               		dc.b $EC, $B, 0, 0, $F0	
00023B8A EC03 000C 08               		dc.b $EC, 3, 0, $C, 8	
00023B8F 0C05 0010 F1               		dc.b $C, 5, 0, $10, $F1	
00023B94 03                         SME_N6hqJ_F18:	dc.b 3	
00023B95 EC0B 0000 F0               		dc.b $EC, $B, 0, 0, $F0	
00023B9A EC03 000C 08               		dc.b $EC, 3, 0, $C, 8	
00023B9F 0C05 0010 F1               		dc.b $C, 5, 0, $10, $F1	
00023BA4 03                         SME_N6hqJ_F28:	dc.b 3	
00023BA5 EC0B 0000 F0               		dc.b $EC, $B, 0, 0, $F0	
00023BAA EC03 000C 08               		dc.b $EC, 3, 0, $C, 8	
00023BAF 0C05 0010 F1               		dc.b $C, 5, 0, $10, $F1	
00023BB4 05                         SME_N6hqJ_F38:	dc.b 5	
00023BB5 EC0B 0000 F0               		dc.b $EC, $B, 0, 0, $F0	
00023BBA EC01 000C 08               		dc.b $EC, 1, 0, $C, 8	
00023BBF EC01 000E 10               		dc.b $EC, 1, 0, $E, $10	
00023BC4 FC01 0010 08               		dc.b $FC, 1, 0, $10, 8	
00023BC9 0C05 0012 F1               		dc.b $C, 5, 0, $12, $F1	
00023BCE 04                         SME_N6hqJ_F52:	dc.b 4	
00023BCF EC07 0000 EB               		dc.b $EC, 7, 0, 0, $EB	
00023BD4 EC09 0008 FB               		dc.b $EC, 9, 0, 8, $FB	
00023BD9 FC05 000E FB               		dc.b $FC, 5, 0, $E, $FB	
00023BDE 0C09 0012 EE               		dc.b $C, 9, 0, $12, $EE	
00023BE3 04                         SME_N6hqJ_F67:	dc.b 4	
00023BE4 EC07 0000 EC               		dc.b $EC, 7, 0, 0, $EC	
00023BE9 EC09 0008 FC               		dc.b $EC, 9, 0, 8, $FC	
00023BEE FC05 000E FC               		dc.b $FC, 5, 0, $E, $FC	
00023BF3 0C09 0012 EF               		dc.b $C, 9, 0, $12, $EF	
00023BF8 04                         SME_N6hqJ_F7C:	dc.b 4	
00023BF9 EC07 0000 EC               		dc.b $EC, 7, 0, 0, $EC	
00023BFE EC09 0008 FC               		dc.b $EC, 9, 0, 8, $FC	
00023C03 FC09 000E FC               		dc.b $FC, 9, 0, $E, $FC	
00023C08 0C09 0014 F0               		dc.b $C, 9, 0, $14, $F0	
00023C0D 03                         SME_N6hqJ_F91:	dc.b 3	
00023C0E F403 0000 E8               		dc.b $F4, 3, 0, 0, $E8	
00023C13 EC0B 0004 F0               		dc.b $EC, $B, 0, 4, $F0	
00023C18 0C05 0010 F0               		dc.b $C, 5, 0, $10, $F0	
00023C1D 03                         SME_N6hqJ_FA1:	dc.b 3	
00023C1E F403 0800 0C               		dc.b $F4, 3, 8, 0, $C	
00023C23 EC0B 0804 F4               		dc.b $EC, $B, 8, 4, $F4	
00023C28 0C05 0810 FC               		dc.b $C, 5, 8, $10, $FC	
00023C2D 03                         SME_N6hqJ_FB1:	dc.b 3	
00023C2E F403 0800 0C               		dc.b $F4, 3, 8, 0, $C	
00023C33 EC0B 0804 F4               		dc.b $EC, $B, 8, 4, $F4	
00023C38 0C05 0810 FC               		dc.b $C, 5, 8, $10, $FC	
00023C3D 04                         SME_N6hqJ_FC1:	dc.b 4	
00023C3E EC0D 0000 ED               		dc.b $EC, $D, 0, 0, $ED	
00023C43 FC0D 0008 EF               		dc.b $FC, $D, 0, 8, $EF	
00023C48 FC01 0010 0F               		dc.b $FC, 1, 0, $10, $F	
00023C4D 0C05 0012 01               		dc.b $C, 5, 0, $12, 1	
00023C52 04                         SME_N6hqJ_FD6:	dc.b 4	
00023C53 EC0D 0000 EE               		dc.b $EC, $D, 0, 0, $EE	
00023C58 FC0D 0008 EF               		dc.b $FC, $D, 0, 8, $EF	
00023C5D FC01 0010 0F               		dc.b $FC, 1, 0, $10, $F	
00023C62 0C05 0012 01               		dc.b $C, 5, 0, $12, 1	
00023C67 04                         SME_N6hqJ_FEB:	dc.b 4	
00023C68 EC0D 0000 EF               		dc.b $EC, $D, 0, 0, $EF	
00023C6D FC0D 0008 EF               		dc.b $FC, $D, 0, 8, $EF	
00023C72 FC01 0010 0F               		dc.b $FC, 1, 0, $10, $F	
00023C77 0C05 0012 01               		dc.b $C, 5, 0, $12, 1	
00023C7C 02                         SME_N6hqJ_1000:	dc.b 2	
00023C7D EC09 0000 F4               		dc.b $EC, 9, 0, 0, $F4	
00023C82 FC0B 0006 F7               		dc.b $FC, $B, 0, 6, $F7	
00023C88 00                         		even
00023C88 00                         		even
00023C88                            
00023C88                            ; ---------------------------------------------------------------------------
00023C88                            ; Uncompressed graphics	loading	array for Sonic
00023C88                            ; ---------------------------------------------------------------------------
00023C88                            SonicDynPLC:
00023C88                            	include "_inc\Sonic dynamic pattern load cues.asm"
00023C88                            ; --------------------------------------------------------------------------------
00023C88                            ; Dynamic Pattern Loading Cues - output from SonMapEd - Sonic 1 format; --------------------------------------------------------------------------------
00023C88                            
00023C88                            SME_QQU6s:	
00023C88 0000 0000                  		dc.w SME_QQU6s_1AC-SME_QQU6s, SME_QQU6s_1AD-SME_QQU6s	
00023C8C 0000 0000                  		dc.w SME_QQU6s_1B6-SME_QQU6s, SME_QQU6s_1BB-SME_QQU6s	
00023C90 0000 0000                  		dc.w SME_QQU6s_1C4-SME_QQU6s, SME_QQU6s_1CD-SME_QQU6s	
00023C94 0000 0000                  		dc.w SME_QQU6s_1D8-SME_QQU6s, SME_QQU6s_1DF-SME_QQU6s	
00023C98 0000 0000                  		dc.w SME_QQU6s_1E4-SME_QQU6s, SME_QQU6s_1E9-SME_QQU6s	
00023C9C 0000 0000                  		dc.w SME_QQU6s_1EE-SME_QQU6s, SME_QQU6s_1F3-SME_QQU6s	
00023CA0 0000 0000                  		dc.w SME_QQU6s_1FC-SME_QQU6s, SME_QQU6s_205-SME_QQU6s	
00023CA4 0000 0000                  		dc.w SME_QQU6s_20C-SME_QQU6s, SME_QQU6s_215-SME_QQU6s	
00023CA8 0000 0000                  		dc.w SME_QQU6s_21C-SME_QQU6s, SME_QQU6s_221-SME_QQU6s	
00023CAC 0000 0000                  		dc.w SME_QQU6s_228-SME_QQU6s, SME_QQU6s_231-SME_QQU6s	
00023CB0 0000 0000                  		dc.w SME_QQU6s_238-SME_QQU6s, SME_QQU6s_23D-SME_QQU6s	
00023CB4 0000 0000                  		dc.w SME_QQU6s_246-SME_QQU6s, SME_QQU6s_251-SME_QQU6s	
00023CB8 0000 0000                  		dc.w SME_QQU6s_25A-SME_QQU6s, SME_QQU6s_263-SME_QQU6s	
00023CBC 0000 0000                  		dc.w SME_QQU6s_26E-SME_QQU6s, SME_QQU6s_279-SME_QQU6s	
00023CC0 0000 0000                  		dc.w SME_QQU6s_282-SME_QQU6s, SME_QQU6s_28D-SME_QQU6s	
00023CC4 0000 0000                  		dc.w SME_QQU6s_294-SME_QQU6s, SME_QQU6s_29B-SME_QQU6s	
00023CC8 0000 0000                  		dc.w SME_QQU6s_2A2-SME_QQU6s, SME_QQU6s_2A7-SME_QQU6s	
00023CCC 0000 0000                  		dc.w SME_QQU6s_2AE-SME_QQU6s, SME_QQU6s_2B5-SME_QQU6s	
00023CD0 0000 0000                  		dc.w SME_QQU6s_2BC-SME_QQU6s, SME_QQU6s_2C1-SME_QQU6s	
00023CD4 0000 0000                  		dc.w SME_QQU6s_2CA-SME_QQU6s, SME_QQU6s_2D5-SME_QQU6s	
00023CD8 0000 0000                  		dc.w SME_QQU6s_2DE-SME_QQU6s, SME_QQU6s_2E7-SME_QQU6s	
00023CDC 0000 0000                  		dc.w SME_QQU6s_2F0-SME_QQU6s, SME_QQU6s_2FB-SME_QQU6s	
00023CE0 0000 0000                  		dc.w SME_QQU6s_304-SME_QQU6s, SME_QQU6s_30D-SME_QQU6s	
00023CE4 0000 0000                  		dc.w SME_QQU6s_312-SME_QQU6s, SME_QQU6s_317-SME_QQU6s	
00023CE8 0000 0000                  		dc.w SME_QQU6s_31C-SME_QQU6s, SME_QQU6s_321-SME_QQU6s	
00023CEC 0000 0000                  		dc.w SME_QQU6s_32A-SME_QQU6s, SME_QQU6s_331-SME_QQU6s	
00023CF0 0000 0000                  		dc.w SME_QQU6s_33A-SME_QQU6s, SME_QQU6s_341-SME_QQU6s	
00023CF4 0000 0000                  		dc.w SME_QQU6s_346-SME_QQU6s, SME_QQU6s_34B-SME_QQU6s	
00023CF8 0000 0000                  		dc.w SME_QQU6s_350-SME_QQU6s, SME_QQU6s_355-SME_QQU6s	
00023CFC 0000 0000                  		dc.w SME_QQU6s_35C-SME_QQU6s, SME_QQU6s_361-SME_QQU6s	
00023D00 0000 0000                  		dc.w SME_QQU6s_368-SME_QQU6s, SME_QQU6s_36D-SME_QQU6s	
00023D04 0000 0000                  		dc.w SME_QQU6s_370-SME_QQU6s, SME_QQU6s_373-SME_QQU6s	
00023D08 0000 0000                  		dc.w SME_QQU6s_376-SME_QQU6s, SME_QQU6s_379-SME_QQU6s	
00023D0C 0000 0000                  		dc.w SME_QQU6s_37C-SME_QQU6s, SME_QQU6s_37F-SME_QQU6s	
00023D10 0000 0000                  		dc.w SME_QQU6s_382-SME_QQU6s, SME_QQU6s_385-SME_QQU6s	
00023D14 0000 0000                  		dc.w SME_QQU6s_388-SME_QQU6s, SME_QQU6s_38B-SME_QQU6s	
00023D18 0000 0000                  		dc.w SME_QQU6s_38E-SME_QQU6s, SME_QQU6s_395-SME_QQU6s	
00023D1C 0000 0000                  		dc.w SME_QQU6s_39C-SME_QQU6s, SME_QQU6s_3A3-SME_QQU6s	
00023D20 0000 0000                  		dc.w SME_QQU6s_3AA-SME_QQU6s, SME_QQU6s_3AD-SME_QQU6s	
00023D24 0000 0000                  		dc.w SME_QQU6s_3B0-SME_QQU6s, SME_QQU6s_3B5-SME_QQU6s	
00023D28 0000 0000                  		dc.w SME_QQU6s_3BA-SME_QQU6s, SME_QQU6s_3C1-SME_QQU6s	
00023D2C 0000 0000                  		dc.w SME_QQU6s_3C8-SME_QQU6s, SME_QQU6s_3CD-SME_QQU6s	
00023D30 0000 0000                  		dc.w SME_QQU6s_3D2-SME_QQU6s, SME_QQU6s_3D9-SME_QQU6s	
00023D34 0000 0000                  		dc.w SME_QQU6s_3DE-SME_QQU6s, SME_QQU6s_3E5-SME_QQU6s	
00023D38 0000 0000                  		dc.w SME_QQU6s_3EC-SME_QQU6s, SME_QQU6s_3F3-SME_QQU6s	
00023D3C 0000 0000                  		dc.w SME_QQU6s_3FA-SME_QQU6s, SME_QQU6s_401-SME_QQU6s	
00023D40 0000 0000                  		dc.w SME_QQU6s_406-SME_QQU6s, SME_QQU6s_40F-SME_QQU6s	
00023D44 0000 0000                  		dc.w SME_QQU6s_418-SME_QQU6s, SME_QQU6s_41F-SME_QQU6s	
00023D48 0000 0000                  		dc.w SME_QQU6s_426-SME_QQU6s, SME_QQU6s_42D-SME_QQU6s	
00023D4C 0000 0000                  		dc.w SME_QQU6s_432-SME_QQU6s, SME_QQU6s_435-SME_QQU6s	
00023D50 0000 0000                  		dc.w SME_QQU6s_43A-SME_QQU6s, SME_QQU6s_441-SME_QQU6s	
00023D54 0000 0000                  		dc.w SME_QQU6s_448-SME_QQU6s, SME_QQU6s_44F-SME_QQU6s	
00023D58 0000 0000                  		dc.w SME_QQU6s_454-SME_QQU6s, SME_QQU6s_459-SME_QQU6s	
00023D5C 0000 0000                  		dc.w SME_QQU6s_460-SME_QQU6s, SME_QQU6s_465-SME_QQU6s	
00023D60 0000 0000                  		dc.w SME_QQU6s_46C-SME_QQU6s, SME_QQU6s_473-SME_QQU6s	
00023D64 0000 0000                  		dc.w SME_QQU6s_476-SME_QQU6s, SME_QQU6s_47D-SME_QQU6s	
00023D68 0000 0000                  		dc.w SME_QQU6s_484-SME_QQU6s, SME_QQU6s_48F-SME_QQU6s	
00023D6C 0000 0000                  		dc.w SME_QQU6s_49A-SME_QQU6s, SME_QQU6s_49F-SME_QQU6s	
00023D70 0000 0000                  		dc.w SME_QQU6s_4A4-SME_QQU6s, SME_QQU6s_4A9-SME_QQU6s	
00023D74 0000 0000                  		dc.w SME_QQU6s_4B0-SME_QQU6s, SME_QQU6s_4B9-SME_QQU6s	
00023D78 0000 0000                  		dc.w SME_QQU6s_4C0-SME_QQU6s, SME_QQU6s_4C5-SME_QQU6s	
00023D7C 0000 0000                  		dc.w SME_QQU6s_4CC-SME_QQU6s, SME_QQU6s_4D5-SME_QQU6s	
00023D80 0000 0000                  		dc.w SME_QQU6s_4DC-SME_QQU6s, SME_QQU6s_4E1-SME_QQU6s	
00023D84 0000 0000                  		dc.w SME_QQU6s_4EA-SME_QQU6s, SME_QQU6s_4F5-SME_QQU6s	
00023D88 0000 0000                  		dc.w SME_QQU6s_500-SME_QQU6s, SME_QQU6s_50B-SME_QQU6s	
00023D8C 0000 0000                  		dc.w SME_QQU6s_518-SME_QQU6s, SME_QQU6s_525-SME_QQU6s	
00023D90 0000 0000                  		dc.w SME_QQU6s_530-SME_QQU6s, SME_QQU6s_53B-SME_QQU6s	
00023D94 0000 0000                  		dc.w SME_QQU6s_542-SME_QQU6s, SME_QQU6s_549-SME_QQU6s	
00023D98 0000 0000                  		dc.w SME_QQU6s_550-SME_QQU6s, SME_QQU6s_555-SME_QQU6s	
00023D9C 0000 0000                  		dc.w SME_QQU6s_55C-SME_QQU6s, SME_QQU6s_563-SME_QQU6s	
00023DA0 0000 0000                  		dc.w SME_QQU6s_56A-SME_QQU6s, SME_QQU6s_56F-SME_QQU6s	
00023DA4 0000 0000                  		dc.w SME_QQU6s_578-SME_QQU6s, SME_QQU6s_583-SME_QQU6s	
00023DA8 0000 0000                  		dc.w SME_QQU6s_58C-SME_QQU6s, SME_QQU6s_595-SME_QQU6s	
00023DAC 0000 0000                  		dc.w SME_QQU6s_59E-SME_QQU6s, SME_QQU6s_5A9-SME_QQU6s	
00023DB0 0000 0000                  		dc.w SME_QQU6s_5B2-SME_QQU6s, SME_QQU6s_5BB-SME_QQU6s	
00023DB4 0000 0000                  		dc.w SME_QQU6s_5C2-SME_QQU6s, SME_QQU6s_5CB-SME_QQU6s	
00023DB8 0000 0000                  		dc.w SME_QQU6s_5D2-SME_QQU6s, SME_QQU6s_5D7-SME_QQU6s	
00023DBC 0000 0000                  		dc.w SME_QQU6s_5DE-SME_QQU6s, SME_QQU6s_5E7-SME_QQU6s	
00023DC0 0000 0000                  		dc.w SME_QQU6s_5EE-SME_QQU6s, SME_QQU6s_5F3-SME_QQU6s	
00023DC4 0000 0000                  		dc.w SME_QQU6s_5FE-SME_QQU6s, SME_QQU6s_60B-SME_QQU6s	
00023DC8 0000 0000                  		dc.w SME_QQU6s_616-SME_QQU6s, SME_QQU6s_621-SME_QQU6s	
00023DCC 0000 0000                  		dc.w SME_QQU6s_62E-SME_QQU6s, SME_QQU6s_63B-SME_QQU6s	
00023DD0 0000 0000                  		dc.w SME_QQU6s_646-SME_QQU6s, SME_QQU6s_653-SME_QQU6s	
00023DD4 0000 0000                  		dc.w SME_QQU6s_65A-SME_QQU6s, SME_QQU6s_661-SME_QQU6s	
00023DD8 0000 0000                  		dc.w SME_QQU6s_668-SME_QQU6s, SME_QQU6s_66D-SME_QQU6s	
00023DDC 0000 0000                  		dc.w SME_QQU6s_674-SME_QQU6s, SME_QQU6s_67B-SME_QQU6s	
00023DE0 0000 0000                  		dc.w SME_QQU6s_682-SME_QQU6s, SME_QQU6s_687-SME_QQU6s	
00023DE4 0000 0000                  		dc.w SME_QQU6s_690-SME_QQU6s, SME_QQU6s_69B-SME_QQU6s	
00023DE8 0000 0000                  		dc.w SME_QQU6s_6A6-SME_QQU6s, SME_QQU6s_6AF-SME_QQU6s	
00023DEC 0000 0000                  		dc.w SME_QQU6s_6B8-SME_QQU6s, SME_QQU6s_6C3-SME_QQU6s	
00023DF0 0000 0000                  		dc.w SME_QQU6s_6CE-SME_QQU6s, SME_QQU6s_6D9-SME_QQU6s	
00023DF4 0000 0000                  		dc.w SME_QQU6s_6E2-SME_QQU6s, SME_QQU6s_6EB-SME_QQU6s	
00023DF8 0000 0000                  		dc.w SME_QQU6s_6F4-SME_QQU6s, SME_QQU6s_6FF-SME_QQU6s	
00023DFC 0000 0000                  		dc.w SME_QQU6s_708-SME_QQU6s, SME_QQU6s_711-SME_QQU6s	
00023E00 0000 0000                  		dc.w SME_QQU6s_71A-SME_QQU6s, SME_QQU6s_725-SME_QQU6s	
00023E04 0000 0000                  		dc.w SME_QQU6s_72E-SME_QQU6s, SME_QQU6s_737-SME_QQU6s	
00023E08 0000 0000                  		dc.w SME_QQU6s_740-SME_QQU6s, SME_QQU6s_749-SME_QQU6s	
00023E0C 0000 0000                  		dc.w SME_QQU6s_74E-SME_QQU6s, SME_QQU6s_755-SME_QQU6s	
00023E10 0000 0000                  		dc.w SME_QQU6s_75C-SME_QQU6s, SME_QQU6s_763-SME_QQU6s	
00023E14 0000 0000                  		dc.w SME_QQU6s_76A-SME_QQU6s, SME_QQU6s_771-SME_QQU6s	
00023E18 0000 0000                  		dc.w SME_QQU6s_778-SME_QQU6s, SME_QQU6s_77F-SME_QQU6s	
00023E1C 0000 0000                  		dc.w SME_QQU6s_786-SME_QQU6s, SME_QQU6s_78D-SME_QQU6s	
00023E20 0000 0000                  		dc.w SME_QQU6s_798-SME_QQU6s, SME_QQU6s_7A1-SME_QQU6s	
00023E24 0000 0000                  		dc.w SME_QQU6s_7AA-SME_QQU6s, SME_QQU6s_7B3-SME_QQU6s	
00023E28 0000 0000                  		dc.w SME_QQU6s_7BA-SME_QQU6s, SME_QQU6s_7C1-SME_QQU6s	
00023E2C 0000 0000                  		dc.w SME_QQU6s_7C8-SME_QQU6s, SME_QQU6s_7D1-SME_QQU6s	
00023E30 0000 0000                  		dc.w SME_QQU6s_7DA-SME_QQU6s, SME_QQU6s_7E3-SME_QQU6s	
00023E34 00                         SME_QQU6s_1AC:	dc.b 0	
00023E35 0430 0030 0450 0850 0E     SME_QQU6s_1AD:	dc.b 4, $30, 0, $30, 4, $50, 8, $50, $E	
00023E3E 02B0 1450 20               SME_QQU6s_1B6:	dc.b 2, $B0, $14, $50, $20	
00023E43 0430 2630 2A30 2E50 32     SME_QQU6s_1BB:	dc.b 4, $30, $26, $30, $2A, $30, $2E, $50, $32	
00023E4C 0430 2630 3830 2E50 32     SME_QQU6s_1C4:	dc.b 4, $30, $26, $30, $38, $30, $2E, $50, $32	
00023E55 0530 2630 3830 2E10 3230+  SME_QQU6s_1CD:	dc.b 5, $30, $26, $30, $38, $30, $2E, $10, $32, $30, $3C	
00023E60 0330 2670 4050 32          SME_QQU6s_1D8:	dc.b 3, $30, $26, $70, $40, $50, $32	
00023E67 02B0 4810 54               SME_QQU6s_1DF:	dc.b 2, $B0, $48, $10, $54	
00023E6C 02B0 5630 62               SME_QQU6s_1E4:	dc.b 2, $B0, $56, $30, $62	
00023E71 02B0 5630 66               SME_QQU6s_1E9:	dc.b 2, $B0, $56, $30, $66	
00023E76 02B0 6A70 76               SME_QQU6s_1EE:	dc.b 2, $B0, $6A, $70, $76	
00023E7B 0430 7E30 8250 8650 0E     SME_QQU6s_1F3:	dc.b 4, $30, $7E, $30, $82, $50, $86, $50, $E	
00023E84 0430 8C30 9030 9450 0E     SME_QQU6s_1FC:	dc.b 4, $30, $8C, $30, $90, $30, $94, $50, $E	
00023E8D 0370 9810 A0F0 A2          SME_QQU6s_205:	dc.b 3, $70, $98, $10, $A0, $F0, $A2	
00023E94 0470 9810 B2B0 B410 C0     SME_QQU6s_20C:	dc.b 4, $70, $98, $10, $B2, $B0, $B4, $10, $C0	
00023E9D 0370 C250 CA30 D0          SME_QQU6s_215:	dc.b 3, $70, $C2, $50, $CA, $30, $D0	
00023EA4 0250 D4F0 DA               SME_QQU6s_21C:	dc.b 2, $50, $D4, $F0, $DA	
00023EA9 0350 D4F0 EA10 FA          SME_QQU6s_221:	dc.b 3, $50, $D4, $F0, $EA, $10, $FA	
00023EB0 0450 D410 FCB0 FE11 0A     SME_QQU6s_228:	dc.b 4, $50, $D4, $10, $FC, $B0, $FE, $11, $A	
00023EB9 0370 C251 0C31 12          SME_QQU6s_231:	dc.b 3, $70, $C2, $51, $C, $31, $12	
00023EC0 0270 98B1 16               SME_QQU6s_238:	dc.b 2, $70, $98, $B1, $16	
00023EC5 0451 2251 2831 2E11 32     SME_QQU6s_23D:	dc.b 4, $51, $22, $51, $28, $31, $2E, $11, $32	
00023ECE 0551 2211 3471 3631 3E11+  SME_QQU6s_246:	dc.b 5, $51, $22, $11, $34, $71, $36, $31, $3E, $11, $42	
00023ED9 0471 4431 4C11 5031 52     SME_QQU6s_251:	dc.b 4, $71, $44, $31, $4C, $11, $50, $31, $52	
00023EE2 0451 5611 5C31 5EB1 62     SME_QQU6s_25A:	dc.b 4, $51, $56, $11, $5C, $31, $5E, $B1, $62	
00023EEB 0551 5611 6E71 7011 7831+  SME_QQU6s_263:	dc.b 5, $51, $56, $11, $6E, $71, $70, $11, $78, $31, $7A	
00023EF6 0551 5611 7E71 8031 8811+  SME_QQU6s_26E:	dc.b 5, $51, $56, $11, $7E, $71, $80, $31, $88, $11, $8C	
00023F01 0471 4431 8E11 9231 94     SME_QQU6s_279:	dc.b 4, $71, $44, $31, $8E, $11, $92, $31, $94	
00023F0A 0551 2251 9811 9E11 A031+  SME_QQU6s_282:	dc.b 5, $51, $22, $51, $98, $11, $9E, $11, $A0, $31, $A2	
00023F15 0371 A6B1 AE31 BA          SME_QQU6s_28D:	dc.b 3, $71, $A6, $B1, $AE, $31, $BA	
00023F1C 0371 A6B1 BE31 CA          SME_QQU6s_294:	dc.b 3, $71, $A6, $B1, $BE, $31, $CA	
00023F23 0371 CE31 D631 DA          SME_QQU6s_29B:	dc.b 3, $71, $CE, $31, $D6, $31, $DA	
00023F2A 0271 DEB1 E6               SME_QQU6s_2A2:	dc.b 2, $71, $DE, $B1, $E6	
00023F2F 0371 DE31 F2B1 F6          SME_QQU6s_2A7:	dc.b 3, $71, $DE, $31, $F2, $B1, $F6	
00023F36 0371 DEB2 0232 0E          SME_QQU6s_2AE:	dc.b 3, $71, $DE, $B2, 2, $32, $E	
00023F3D 0371 CE32 1232 16          SME_QQU6s_2B5:	dc.b 3, $71, $CE, $32, $12, $32, $16	
00023F44 0271 A6B2 1A               SME_QQU6s_2BC:	dc.b 2, $71, $A6, $B2, $1A	
00023F49 0432 2672 2A72 3212 3A     SME_QQU6s_2C1:	dc.b 4, $32, $26, $72, $2A, $72, $32, $12, $3A	
00023F52 0532 3C52 4072 2A72 4612+  SME_QQU6s_2CA:	dc.b 5, $32, $3C, $52, $40, $72, $2A, $72, $46, $12, $3A	
00023F5D 0472 4E72 5632 5E12 62     SME_QQU6s_2D5:	dc.b 4, $72, $4E, $72, $56, $32, $5E, $12, $62	
00023F66 0472 6472 6C52 7412 7A     SME_QQU6s_2DE:	dc.b 4, $72, $64, $72, $6C, $52, $74, $12, $7A	
00023F6F 0452 7C72 6C72 8212 7A     SME_QQU6s_2E7:	dc.b 4, $52, $7C, $72, $6C, $72, $82, $12, $7A	
00023F78 0532 8A52 8E72 6C72 9412+  SME_QQU6s_2F0:	dc.b 5, $32, $8A, $52, $8E, $72, $6C, $72, $94, $12, $7A	
00023F83 0472 9C72 5632 A412 62     SME_QQU6s_2FB:	dc.b 4, $72, $9C, $72, $56, $32, $A4, $12, $62	
00023F8C 0472 A872 2A52 B012 3A     SME_QQU6s_304:	dc.b 4, $72, $A8, $72, $2A, $52, $B0, $12, $3A	
00023F95 0252 B6F2 BC               SME_QQU6s_30D:	dc.b 2, $52, $B6, $F2, $BC	
00023F9A 0252 CCF2 D2               SME_QQU6s_312:	dc.b 2, $52, $CC, $F2, $D2	
00023F9F 0252 B6F2 E2               SME_QQU6s_317:	dc.b 2, $52, $B6, $F2, $E2	
00023FA4 0252 CCF2 F2               SME_QQU6s_31C:	dc.b 2, $52, $CC, $F2, $F2	
00023FA9 0453 0213 0873 0A53 12     SME_QQU6s_321:	dc.b 4, $53, 2, $13, 8, $73, $A, $53, $12	
00023FB2 0373 1873 2053 28          SME_QQU6s_32A:	dc.b 3, $73, $18, $73, $20, $53, $28	
00023FB9 0453 0213 2E73 3053 38     SME_QQU6s_331:	dc.b 4, $53, 2, $13, $2E, $73, $30, $53, $38	
00023FC2 0373 1873 3E53 46          SME_QQU6s_33A:	dc.b 3, $73, $18, $73, $3E, $53, $46	
00023FC9 0273 4CB3 54               SME_QQU6s_341:	dc.b 2, $73, $4C, $B3, $54	
00023FCE 0273 60B3 68               SME_QQU6s_346:	dc.b 2, $73, $60, $B3, $68	
00023FD3 0273 4CB3 74               SME_QQU6s_34B:	dc.b 2, $73, $4C, $B3, $74	
00023FD8 0273 60B3 80               SME_QQU6s_350:	dc.b 2, $73, $60, $B3, $80	
00023FDD 0313 8C73 8EB3 96          SME_QQU6s_355:	dc.b 3, $13, $8C, $73, $8E, $B3, $96	
00023FE4 0273 A2B3 AA               SME_QQU6s_35C:	dc.b 2, $73, $A2, $B3, $AA	
00023FE9 0313 B673 8EB3 C0          SME_QQU6s_361:	dc.b 3, $13, $B6, $73, $8E, $B3, $C0	
00023FF0 0273 A2B3 CC               SME_QQU6s_368:	dc.b 2, $73, $A2, $B3, $CC	
00023FF5 01F4 00                    SME_QQU6s_36D:	dc.b 1, $F4, 0	
00023FF8 01F4 10                    SME_QQU6s_370:	dc.b 1, $F4, $10	
00023FFB 01F4 20                    SME_QQU6s_373:	dc.b 1, $F4, $20	
00023FFE 01F4 30                    SME_QQU6s_376:	dc.b 1, $F4, $30	
00024001 01F4 40                    SME_QQU6s_379:	dc.b 1, $F4, $40	
00024004 01F4 50                    SME_QQU6s_37C:	dc.b 1, $F4, $50	
00024007 01F4 60                    SME_QQU6s_37F:	dc.b 1, $F4, $60	
0002400A 01F4 70                    SME_QQU6s_382:	dc.b 1, $F4, $70	
0002400D 01F4 80                    SME_QQU6s_385:	dc.b 1, $F4, $80	
00024010 01F4 90                    SME_QQU6s_388:	dc.b 1, $F4, $90	
00024013 01F4 A0                    SME_QQU6s_38B:	dc.b 1, $F4, $A0	
00024016 0353 D853 DE73 E4          SME_QQU6s_38E:	dc.b 3, $53, $D8, $53, $DE, $73, $E4	
0002401D 0353 D853 EC53 F2          SME_QQU6s_395:	dc.b 3, $53, $D8, $53, $EC, $53, $F2	
00024024 0353 D853 DE73 B8          SME_QQU6s_39C:	dc.b 3, $53, $D8, $53, $DE, $73, $B8	
0002402B 0353 D853 EC54 B0          SME_QQU6s_3A3:	dc.b 3, $53, $D8, $53, $EC, $54, $B0	
00024032 01B4 B6                    SME_QQU6s_3AA:	dc.b 1, $B4, $B6	
00024035 01F4 C2                    SME_QQU6s_3AD:	dc.b 1, $F4, $C2	
00024038 0214 D2F4 D4               SME_QQU6s_3B0:	dc.b 2, $14, $D2, $F4, $D4	
0002403D 0234 E4F4 E8               SME_QQU6s_3B5:	dc.b 2, $34, $E4, $F4, $E8	
00024042 03F4 F815 0835 0A          SME_QQU6s_3BA:	dc.b 3, $F4, $F8, $15, 8, $35, $A	
00024049 03F5 0E15 1E35 20          SME_QQU6s_3C1:	dc.b 3, $F5, $E, $15, $1E, $35, $20	
00024050 02B5 2455 30               SME_QQU6s_3C8:	dc.b 2, $B5, $24, $55, $30	
00024055 02B5 3655 42               SME_QQU6s_3CD:	dc.b 2, $B5, $36, $55, $42	
0002405A 0335 48B5 4C15 58          SME_QQU6s_3D2:	dc.b 3, $35, $48, $B5, $4C, $15, $58	
00024061 0215 5A75 5C               SME_QQU6s_3D9:	dc.b 2, $15, $5A, $75, $5C	
00024066 0335 48B5 4C15 58          SME_QQU6s_3DE:	dc.b 3, $35, $48, $B5, $4C, $15, $58	
0002406D 0315 64B5 6615 72          SME_QQU6s_3E5:	dc.b 3, $15, $64, $B5, $66, $15, $72	
00024074 0315 64B5 6615 72          SME_QQU6s_3EC:	dc.b 3, $15, $64, $B5, $66, $15, $72	
0002407B 0335 74B5 7815 84          SME_QQU6s_3F3:	dc.b 3, $35, $74, $B5, $78, $15, $84	
00024082 0355 86F5 8C15 9C          SME_QQU6s_3FA:	dc.b 3, $55, $86, $F5, $8C, $15, $9C	
00024089 02B5 9E35 AA               SME_QQU6s_401:	dc.b 2, $B5, $9E, $35, $AA	
0002408E 0415 AEB5 B015 BC75 BE     SME_QQU6s_406:	dc.b 4, $15, $AE, $B5, $B0, $15, $BC, $75, $BE	
00024097 0415 AEB5 C615 BC75 BE     SME_QQU6s_40F:	dc.b 4, $15, $AE, $B5, $C6, $15, $BC, $75, $BE	
000240A0 0375 D215 DAB5 DC          SME_QQU6s_418:	dc.b 3, $75, $D2, $15, $DA, $B5, $DC	
000240A7 0355 E8B5 EE15 FA          SME_QQU6s_41F:	dc.b 3, $55, $E8, $B5, $EE, $15, $FA	
000240AE 03B5 FC16 0836 0A          SME_QQU6s_426:	dc.b 3, $B5, $FC, $16, 8, $36, $A	
000240B5 02B6 0E16 1A               SME_QQU6s_42D:	dc.b 2, $B6, $E, $16, $1A	
000240BA 01F6 1C                    SME_QQU6s_432:	dc.b 1, $F6, $1C	
000240BD 02B6 2C16 38               SME_QQU6s_435:	dc.b 2, $B6, $2C, $16, $38	
000240C2 0316 3AB6 3C16 48          SME_QQU6s_43A:	dc.b 3, $16, $3A, $B6, $3C, $16, $48	
000240C9 0356 4AB6 5036 5C          SME_QQU6s_441:	dc.b 3, $56, $4A, $B6, $50, $36, $5C	
000240D0 0336 60B6 6416 70          SME_QQU6s_448:	dc.b 3, $36, $60, $B6, $64, $16, $70	
000240D7 02B6 7216 7E               SME_QQU6s_44F:	dc.b 2, $B6, $72, $16, $7E	
000240DC 0216 80B6 82               SME_QQU6s_454:	dc.b 2, $16, $80, $B6, $82	
000240E1 0336 8EB6 9216 9E          SME_QQU6s_459:	dc.b 3, $36, $8E, $B6, $92, $16, $9E	
000240E8 0236 A0F6 A4               SME_QQU6s_460:	dc.b 2, $36, $A0, $F6, $A4	
000240ED 0376 B436 BC56 C0          SME_QQU6s_465:	dc.b 3, $76, $B4, $36, $BC, $56, $C0	
000240F4 0376 C636 BC56 CE          SME_QQU6s_46C:	dc.b 3, $76, $C6, $36, $BC, $56, $CE	
000240FB 01B7 D6                    SME_QQU6s_473:	dc.b 1, $B7, $D6	
000240FE 03B7 E217 EE57 F0          SME_QQU6s_476:	dc.b 3, $B7, $E2, $17, $EE, $57, $F0	
00024105 0387 F60A 1888 00          SME_QQU6s_47D:	dc.b 3, $87, $F6, $A, $18, $88, 0	
0002410C 0528 0918 0C38 0E88 1208+  SME_QQU6s_484:	dc.b 5, $28, 9, $18, $C, $38, $E, $88, $12, 8, $1B	
00024117 0528 1C18 1F38 0E88 1208+  SME_QQU6s_48F:	dc.b 5, $28, $1C, $18, $1F, $38, $E, $88, $12, 8, $1B	
00024122 0288 2188 2A               SME_QQU6s_49A:	dc.b 2, $88, $21, $88, $2A	
00024127 0288 3388 2A               SME_QQU6s_49F:	dc.b 2, $88, $33, $88, $2A	
0002412C 0288 3C88 2A               SME_QQU6s_4A4:	dc.b 2, $88, $3C, $88, $2A	
00024131 03B6 D410 A0F0 A2          SME_QQU6s_4A9:	dc.b 3, $B6, $D4, $10, $A0, $F0, $A2	
00024138 04B6 D410 B2B0 B410 C0     SME_QQU6s_4B0:	dc.b 4, $B6, $D4, $10, $B2, $B0, $B4, $10, $C0	
00024141 03B6 E050 CA30 D0          SME_QQU6s_4B9:	dc.b 3, $B6, $E0, $50, $CA, $30, $D0	
00024148 0286 ECF0 DA               SME_QQU6s_4C0:	dc.b 2, $86, $EC, $F0, $DA	
0002414D 0386 ECF0 EA10 FA          SME_QQU6s_4C5:	dc.b 3, $86, $EC, $F0, $EA, $10, $FA	
00024154 0486 EC10 FCB0 FE11 0A     SME_QQU6s_4CC:	dc.b 4, $86, $EC, $10, $FC, $B0, $FE, $11, $A	
0002415D 03B6 E051 0C31 12          SME_QQU6s_4D5:	dc.b 3, $B6, $E0, $51, $C, $31, $12	
00024164 02B6 D4B1 16               SME_QQU6s_4DC:	dc.b 2, $B6, $D4, $B1, $16	
00024169 0476 F531 2E51 2811 32     SME_QQU6s_4E1:	dc.b 4, $76, $F5, $31, $2E, $51, $28, $11, $32	
00024172 0576 F511 3471 3631 3E11+  SME_QQU6s_4EA:	dc.b 5, $76, $F5, $11, $34, $71, $36, $31, $3E, $11, $42	
0002417D 0586 FD31 4C07 0611 5031+  SME_QQU6s_4F5:	dc.b 5, $86, $FD, $31, $4C, 7, 6, $11, $50, $31, $52	
00024188 0507 0777 0811 5C31 5EB1+  SME_QQU6s_500:	dc.b 5, 7, 7, $77, 8, $11, $5C, $31, $5E, $B1, $62	
00024193 0607 0777 0811 6E11 7871+  SME_QQU6s_50B:	dc.b 6, 7, 7, $77, 8, $11, $6E, $11, $78, $71, $70, $31, $7A	
000241A0 0607 0777 0811 7E71 8031+  SME_QQU6s_518:	dc.b 6, 7, 7, $77, 8, $11, $7E, $71, $80, $31, $88, $11, $8C	
000241AD 0586 FD31 8E07 0611 9231+  SME_QQU6s_525:	dc.b 5, $86, $FD, $31, $8E, 7, 6, $11, $92, $31, $94	
000241B8 0576 F511 9E51 9801 A031+  SME_QQU6s_530:	dc.b 5, $76, $F5, $11, $9E, $51, $98, 1, $A0, $31, $A2	
000241C3 03B7 10B1 AE31 BA          SME_QQU6s_53B:	dc.b 3, $B7, $10, $B1, $AE, $31, $BA	
000241CA 03B7 10B1 BE31 CA          SME_QQU6s_542:	dc.b 3, $B7, $10, $B1, $BE, $31, $CA	
000241D1 03B7 1C31 D631 DA          SME_QQU6s_549:	dc.b 3, $B7, $1C, $31, $D6, $31, $DA	
000241D8 0287 28B1 E6               SME_QQU6s_550:	dc.b 2, $87, $28, $B1, $E6	
000241DD 0387 2831 F2B1 F6          SME_QQU6s_555:	dc.b 3, $87, $28, $31, $F2, $B1, $F6	
000241E4 0387 28B2 0232 0E          SME_QQU6s_55C:	dc.b 3, $87, $28, $B2, 2, $32, $E	
000241EB 03B7 1C32 1232 16          SME_QQU6s_563:	dc.b 3, $B7, $1C, $32, $12, $32, $16	
000241F2 02B7 10B2 1A               SME_QQU6s_56A:	dc.b 2, $B7, $10, $B2, $1A	
000241F7 0432 2677 3172 3207 39     SME_QQU6s_56F:	dc.b 4, $32, $26, $77, $31, $72, $32, 7, $39	
00024200 0532 3C52 4077 3172 4607+  SME_QQU6s_578:	dc.b 5, $32, $3C, $52, $40, $77, $31, $72, $46, 7, $39	
0002420B 0472 4E77 3A32 5E17 42     SME_QQU6s_583:	dc.b 4, $72, $4E, $77, $3A, $32, $5E, $17, $42	
00024214 0472 64B7 4452 7407 50     SME_QQU6s_58C:	dc.b 4, $72, $64, $B7, $44, $52, $74, 7, $50	
0002421D 0452 7CB7 4472 8207 50     SME_QQU6s_595:	dc.b 4, $52, $7C, $B7, $44, $72, $82, 7, $50	
00024226 0532 8A52 8EB7 4472 9407+  SME_QQU6s_59E:	dc.b 5, $32, $8A, $52, $8E, $B7, $44, $72, $94, 7, $50	
00024231 0472 9C77 3A32 A417 42     SME_QQU6s_5A9:	dc.b 4, $72, $9C, $77, $3A, $32, $A4, $17, $42	
0002423A 0472 A877 3152 B007 39     SME_QQU6s_5B2:	dc.b 4, $72, $A8, $77, $31, $52, $B0, 7, $39	
00024243 03B7 5110 A0F0 A2          SME_QQU6s_5BB:	dc.b 3, $B7, $51, $10, $A0, $F0, $A2	
0002424A 04B7 5110 B2B0 B410 C0     SME_QQU6s_5C2:	dc.b 4, $B7, $51, $10, $B2, $B0, $B4, $10, $C0	
00024253 03B7 5D50 CA30 D0          SME_QQU6s_5CB:	dc.b 3, $B7, $5D, $50, $CA, $30, $D0	
0002425A 0287 69F0 DA               SME_QQU6s_5D2:	dc.b 2, $87, $69, $F0, $DA	
0002425F 0387 69F0 EA10 FA          SME_QQU6s_5D7:	dc.b 3, $87, $69, $F0, $EA, $10, $FA	
00024266 0487 6910 FCB0 FE11 0A     SME_QQU6s_5DE:	dc.b 4, $87, $69, $10, $FC, $B0, $FE, $11, $A	
0002426F 03B7 5D51 0C31 12          SME_QQU6s_5E7:	dc.b 3, $B7, $5D, $51, $C, $31, $12	
00024276 02B7 51B1 16               SME_QQU6s_5EE:	dc.b 2, $B7, $51, $B1, $16	
0002427B 0517 7277 7451 2831 2E11+  SME_QQU6s_5F3:	dc.b 5, $17, $72, $77, $74, $51, $28, $31, $2E, $11, $32	
00024286 0617 7277 7411 3471 3631+  SME_QQU6s_5FE:	dc.b 6, $17, $72, $77, $74, $11, $34, $71, $36, $31, $3E, $11, $42	
00024293 0557 7C37 8231 4C11 5031+  SME_QQU6s_60B:	dc.b 5, $57, $7C, $37, $82, $31, $4C, $11, $50, $31, $52	
0002429E 0517 8677 8811 5C31 5EB1+  SME_QQU6s_616:	dc.b 5, $17, $86, $77, $88, $11, $5C, $31, $5E, $B1, $62	
000242A9 0617 8677 8811 6E11 7871+  SME_QQU6s_621:	dc.b 6, $17, $86, $77, $88, $11, $6E, $11, $78, $71, $70, $31, $7A	
000242B6 0617 8677 8811 7E71 8031+  SME_QQU6s_62E:	dc.b 6, $17, $86, $77, $88, $11, $7E, $71, $80, $31, $88, $11, $8C	
000242C3 0557 7C37 8231 8E11 9231+  SME_QQU6s_63B:	dc.b 5, $57, $7C, $37, $82, $31, $8E, $11, $92, $31, $94	
000242CE 0617 7277 7451 9811 9E31+  SME_QQU6s_646:	dc.b 6, $17, $72, $77, $74, $51, $98, $11, $9E, $31, $A2, $11, $A0	
000242DB 03B7 90B1 AE31 BA          SME_QQU6s_653:	dc.b 3, $B7, $90, $B1, $AE, $31, $BA	
000242E2 03B7 90B1 BE31 CA          SME_QQU6s_65A:	dc.b 3, $B7, $90, $B1, $BE, $31, $CA	
000242E9 03B7 9C31 D631 DA          SME_QQU6s_661:	dc.b 3, $B7, $9C, $31, $D6, $31, $DA	
000242F0 0287 A8B1 E6               SME_QQU6s_668:	dc.b 2, $87, $A8, $B1, $E6	
000242F5 0387 A831 F2B1 F6          SME_QQU6s_66D:	dc.b 3, $87, $A8, $31, $F2, $B1, $F6	
000242FC 0387 A8B2 0232 0E          SME_QQU6s_674:	dc.b 3, $87, $A8, $B2, 2, $32, $E	
00024303 03B7 9C32 1232 16          SME_QQU6s_67B:	dc.b 3, $B7, $9C, $32, $12, $32, $16	
0002430A 02B7 90B2 1A               SME_QQU6s_682:	dc.b 2, $B7, $90, $B2, $1A	
0002430F 0432 26B7 B172 3207 BD     SME_QQU6s_687:	dc.b 4, $32, $26, $B7, $B1, $72, $32, 7, $BD	
00024318 0532 3C52 40B7 B172 4607+  SME_QQU6s_690:	dc.b 5, $32, $3C, $52, $40, $B7, $B1, $72, $46, 7, $BD	
00024323 0572 4E17 BE77 C032 5E07+  SME_QQU6s_69B:	dc.b 5, $72, $4E, $17, $BE, $77, $C0, $32, $5E, 7, $C8	
0002432E 0472 64B7 C952 7407 D5     SME_QQU6s_6A6:	dc.b 4, $72, $64, $B7, $C9, $52, $74, 7, $D5	
00024337 0452 7CB7 C972 8207 D5     SME_QQU6s_6AF:	dc.b 4, $52, $7C, $B7, $C9, $72, $82, 7, $D5	
00024340 0532 8A52 8EB7 C972 9407+  SME_QQU6s_6B8:	dc.b 5, $32, $8A, $52, $8E, $B7, $C9, $72, $94, 7, $D5	
0002434B 0572 9C17 BE77 C032 A407+  SME_QQU6s_6C3:	dc.b 5, $72, $9C, $17, $BE, $77, $C0, $32, $A4, 7, $C8	
00024356 0572 A817 B277 B552 B007+  SME_QQU6s_6CE:	dc.b 5, $72, $A8, $17, $B2, $77, $B5, $52, $B0, 7, $BD	
00024361 0428 4508 4838 4958 4D     SME_QQU6s_6D9:	dc.b 4, $28, $45, 8, $48, $38, $49, $58, $4D	
0002436A 0418 53B8 5528 6118 64     SME_QQU6s_6E2:	dc.b 4, $18, $53, $B8, $55, $28, $61, $18, $64	
00024373 0428 6638 6928 6D38 70     SME_QQU6s_6EB:	dc.b 4, $28, $66, $38, $69, $28, $6D, $38, $70	
0002437C 0528 7478 7738 7F18 8308+  SME_QQU6s_6F4:	dc.b 5, $28, $74, $78, $77, $38, $7F, $18, $83, 8, $85	
00024387 0458 8608 8C38 4958 8D     SME_QQU6s_6FF:	dc.b 4, $58, $86, 8, $8C, $38, $49, $58, $8D	
00024390 0418 93B8 9528 6108 A1     SME_QQU6s_708:	dc.b 4, $18, $93, $B8, $95, $28, $61, 8, $A1	
00024399 0458 A238 6908 A858 A9     SME_QQU6s_711:	dc.b 4, $58, $A2, $38, $69, 8, $A8, $58, $A9	
000243A2 0528 7478 AF38 B718 BB08+  SME_QQU6s_71A:	dc.b 5, $28, $74, $78, $AF, $38, $B7, $18, $BB, 8, $85	
000243AD 0458 BD38 C338 C778 CB     SME_QQU6s_725:	dc.b 4, $58, $BD, $38, $C3, $38, $C7, $78, $CB	
000243B6 0458 D338 D938 C778 DD     SME_QQU6s_72E:	dc.b 4, $58, $D3, $38, $D9, $38, $C7, $78, $DD	
000243BF 0458 BD38 C338 C778 E5     SME_QQU6s_737:	dc.b 4, $58, $BD, $38, $C3, $38, $C7, $78, $E5	
000243C8 0458 D338 D938 C778 ED     SME_QQU6s_740:	dc.b 4, $58, $D3, $38, $D9, $38, $C7, $78, $ED	
000243D1 0228 F5B8 F8               SME_QQU6s_749:	dc.b 2, $28, $F5, $B8, $F8	
000243D6 0389 0429 0D39 10          SME_QQU6s_74E:	dc.b 3, $89, 4, $29, $D, $39, $10	
000243DD 0388 3329 0D39 10          SME_QQU6s_755:	dc.b 3, $88, $33, $29, $D, $39, $10	
000243E4 0388 3C29 0D39 10          SME_QQU6s_75C:	dc.b 3, $88, $3C, $29, $D, $39, $10	
000243EB 0389 0429 0D39 14          SME_QQU6s_763:	dc.b 3, $89, 4, $29, $D, $39, $14	
000243F2 0388 3329 0D39 14          SME_QQU6s_76A:	dc.b 3, $88, $33, $29, $D, $39, $14	
000243F9 0388 3C29 0D39 14          SME_QQU6s_771:	dc.b 3, $88, $3C, $29, $D, $39, $14	
00024400 03B9 1839 2439 28          SME_QQU6s_778:	dc.b 3, $B9, $18, $39, $24, $39, $28	
00024407 03B9 2C39 3839 28          SME_QQU6s_77F:	dc.b 3, $B9, $2C, $39, $38, $39, $28	
0002440E 03B9 3C39 4839 28          SME_QQU6s_786:	dc.b 3, $B9, $3C, $39, $48, $39, $28	
00024415 05B9 4C19 2419 5819 3A39+  SME_QQU6s_78D:	dc.b 5, $B9, $4C, $19, $24, $19, $58, $19, $3A, $39, $28	
00024420 0479 5A59 6239 6859 6C     SME_QQU6s_798:	dc.b 4, $79, $5A, $59, $62, $39, $68, $59, $6C	
00024429 0479 7259 6239 7A59 7E     SME_QQU6s_7A1:	dc.b 4, $79, $72, $59, $62, $39, $7A, $59, $7E	
00024432 0479 8459 6259 8C59 92     SME_QQU6s_7AA:	dc.b 4, $79, $84, $59, $62, $59, $8C, $59, $92	
0002443B 0339 98B9 9C39 A8          SME_QQU6s_7B3:	dc.b 3, $39, $98, $B9, $9C, $39, $A8	
00024442 0339 ACB9 B039 BC          SME_QQU6s_7BA:	dc.b 3, $39, $AC, $B9, $B0, $39, $BC	
00024449 0339 C0B9 C439 BC          SME_QQU6s_7C1:	dc.b 3, $39, $C0, $B9, $C4, $39, $BC	
00024450 0479 D079 D819 E039 E2     SME_QQU6s_7C8:	dc.b 4, $79, $D0, $79, $D8, $19, $E0, $39, $E2	
00024459 0479 E679 EE19 E039 E2     SME_QQU6s_7D1:	dc.b 4, $79, $E6, $79, $EE, $19, $E0, $39, $E2	
00024462 0479 F679 FE19 E039 E2     SME_QQU6s_7DA:	dc.b 4, $79, $F6, $79, $FE, $19, $E0, $39, $E2	
0002446B 025A 06BA 0C               SME_QQU6s_7E3:	dc.b 2, $5A, 6, $BA, $C	
00024470                            		even
00024470                            		even
00024470                            
00024470                            ; ---------------------------------------------------------------------------
00024470                            ; Uncompressed graphics	- Sonic
00024470                            ; ---------------------------------------------------------------------------
00024470                            Art_Sonic:	incbin	artunc\sonic.bin	; Sonic
00038790                            		even
00038790                            Art_Dust:	incbin	artunc\spindust.bin		
0003A0D0                            		even
0003A0D0                            ; ---------------------------------------------------------------------------
0003A0D0                            ; Compressed graphics - various
0003A0D0                            ; ---------------------------------------------------------------------------
0003A0D0                            Nem_Smoke:	incbin	artnem\xxxsmoke.bin	; unused smoke
0003A1D4                            		even
0003A1D4                            Nem_SyzSparkle:	incbin	artnem\xxxstars.bin	; unused stars
0003A20E                            		even
0003A20E                            Nem_Shield:	incbin	artnem\shield.bin	; shield
0003A3A4                            		even
0003A3A4                            Nem_Stars:	incbin	artnem\invstars.bin	; invincibility stars
0003A4EC                            		even
0003A4EC                            Nem_LzSonic:	incbin	artnem\xxxlzson.bin	; unused LZ Sonic holding his breath
0003A5F6                            		even
0003A5F6                            Nem_UnkFire:	incbin	artnem\xxxfire.bin	; unused fireball
0003A648                            		even
0003A648                            Nem_Warp:	incbin	artnem\xxxflash.bin	; unused entry to special stage flash
0003A890                            		even
0003A890                            Nem_Goggle:	incbin	artnem\xxxgoggl.bin	; unused goggles
0003AA16                            		even
0003AA16                            ; ---------------------------------------------------------------------------
0003AA16                            ; Sprite mappings - walls of the special stage
0003AA16                            ; ---------------------------------------------------------------------------
0003AA16                            Map_SSWalls:
0003AA16                            	include "_maps\SSwalls.asm"
0003AA16                            ; ---------------------------------------------------------------------------
0003AA16                            ; Sprite mappings - walls of the special stage
0003AA16                            ; ---------------------------------------------------------------------------
0003AA16 0000 0000                  		dc.w byte_2C584-Map_SSWalls, byte_2C58A-Map_SSWalls
0003AA1A 0000 0000                  		dc.w byte_2C590-Map_SSWalls, byte_2C596-Map_SSWalls
0003AA1E 0000 0000                  		dc.w byte_2C59C-Map_SSWalls, byte_2C5A2-Map_SSWalls
0003AA22 0000 0000                  		dc.w byte_2C5A8-Map_SSWalls, byte_2C5AE-Map_SSWalls
0003AA26 0000 0000                  		dc.w byte_2C5B4-Map_SSWalls, byte_2C5BA-Map_SSWalls
0003AA2A 0000 0000                  		dc.w byte_2C5C0-Map_SSWalls, byte_2C5C6-Map_SSWalls
0003AA2E 0000 0000                  		dc.w byte_2C5CC-Map_SSWalls, byte_2C5D2-Map_SSWalls
0003AA32 0000 0000                  		dc.w byte_2C5D8-Map_SSWalls, byte_2C5DE-Map_SSWalls
0003AA36 01                         byte_2C584:	dc.b 1
0003AA37 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0003AA3C 01                         byte_2C58A:	dc.b 1
0003AA3D F00F 0009 F0               		dc.b $F0, $F, 0, 9, $F0
0003AA42 01                         byte_2C590:	dc.b 1
0003AA43 F00F 0019 F0               		dc.b $F0, $F, 0, $19, $F0
0003AA48 01                         byte_2C596:	dc.b 1
0003AA49 F00F 0029 F0               		dc.b $F0, $F, 0, $29, $F0
0003AA4E 01                         byte_2C59C:	dc.b 1
0003AA4F F00F 0039 F0               		dc.b $F0, $F, 0, $39, $F0
0003AA54 01                         byte_2C5A2:	dc.b 1
0003AA55 F00F 0049 F0               		dc.b $F0, $F, 0, $49, $F0
0003AA5A 01                         byte_2C5A8:	dc.b 1
0003AA5B F00F 0059 F0               		dc.b $F0, $F, 0, $59, $F0
0003AA60 01                         byte_2C5AE:	dc.b 1
0003AA61 F00F 0069 F0               		dc.b $F0, $F, 0, $69, $F0
0003AA66 01                         byte_2C5B4:	dc.b 1
0003AA67 F00F 0079 F0               		dc.b $F0, $F, 0, $79, $F0
0003AA6C 01                         byte_2C5BA:	dc.b 1
0003AA6D F00F 0089 F0               		dc.b $F0, $F, 0, $89, $F0
0003AA72 01                         byte_2C5C0:	dc.b 1
0003AA73 F00F 0099 F0               		dc.b $F0, $F, 0, $99, $F0
0003AA78 01                         byte_2C5C6:	dc.b 1
0003AA79 F00F 00A9 F0               		dc.b $F0, $F, 0, $A9, $F0
0003AA7E 01                         byte_2C5CC:	dc.b 1
0003AA7F F00F 00B9 F0               		dc.b $F0, $F, 0, $B9, $F0
0003AA84 01                         byte_2C5D2:	dc.b 1
0003AA85 F00F 00C9 F0               		dc.b $F0, $F, 0, $C9, $F0
0003AA8A 01                         byte_2C5D8:	dc.b 1
0003AA8B F00F 00D9 F0               		dc.b $F0, $F, 0, $D9, $F0
0003AA90 01                         byte_2C5DE:	dc.b 1
0003AA91 F00F 00E9 F0               		dc.b $F0, $F, 0, $E9, $F0
0003AA96                            		even
0003AA96                            		even
0003AA96                            ; ---------------------------------------------------------------------------
0003AA96                            ; Compressed graphics - special stage
0003AA96                            ; ---------------------------------------------------------------------------
0003AA96                            Nem_SSWalls:	incbin	artnem\sswalls.bin	; special stage walls
0003B3CE                            		even
0003B3CE                            Eni_SSBg1:	incbin	mapeni\ssbg1.bin	; special stage background (mappings)
0003B502                            		even
0003B502                            Nem_SSBgFish:	incbin	artnem\ssbg1.bin	; special stage birds and fish background
0003C192                            		even
0003C192                            Eni_SSBg2:	incbin	mapeni\ssbg2.bin	; special stage background (mappings)
0003C492                            		even
0003C492                            Nem_SSBgCloud:	incbin	artnem\ssbg2.bin	; special stage clouds background
0003C986                            		even
0003C986                            Nem_SSGOAL:	incbin	artnem\ssgoal.bin	; special stage GOAL block
0003CA74                            		even
0003CA74                            Nem_SSRBlock:	incbin	artnem\ssr.bin		; special stage R block
0003CB44                            		even
0003CB44                            Nem_SS1UpBlock:	incbin	artnem\ss1up.bin	; special stage 1UP block
0003CC3A                            		even
0003CC3A                            Nem_SSEmStars:	incbin	artnem\ssemstar.bin	; special stage stars from a collected emerald
0003CC98                            		even
0003CC98                            Nem_SSRedWhite:	incbin	artnem\ssredwhi.bin	; special stage red/white block
0003CD2A                            		even
0003CD2A                            Nem_SSZone1:	incbin	artnem\sszone1.bin	; special stage ZONE1 block
0003CDEC                            		even
0003CDEC                            Nem_SSZone2:	incbin	artnem\sszone2.bin	; ZONE2 block
0003CEBA                            		even
0003CEBA                            Nem_SSZone3:	incbin	artnem\sszone3.bin	; ZONE3 block
0003CF86                            		even
0003CF86                            Nem_SSZone4:	incbin	artnem\sszone4.bin	; ZONE4 block
0003D04E                            		even
0003D04E                            Nem_SSZone5:	incbin	artnem\sszone5.bin	; ZONE5 block
0003D118                            		even
0003D118                            Nem_SSZone6:	incbin	artnem\sszone6.bin	; ZONE6 block
0003D1E8                            		even
0003D1E8                            Nem_SSUpDown:	incbin	artnem\ssupdown.bin	; special stage UP/DOWN block
0003D3DC                            		even
0003D3DC                            Nem_SSEmerald:	incbin	artnem\ssemeral.bin	; special stage chaos emeralds
0003D544                            		even
0003D544                            Nem_SSGhost:	incbin	artnem\ssghost.bin	; special stage ghost block
0003D5F4                            		even
0003D5F4                            Nem_SSWBlock:	incbin	artnem\ssw.bin		; special stage W block
0003D6CE                            		even
0003D6CE                            Nem_SSGlass:	incbin	artnem\ssglass.bin	; special stage destroyable glass block
0003D752                            		even
0003D752                            Nem_ResultEm:	incbin	artnem\ssresems.bin	; chaos emeralds on special stage results screen
0003D8D0                            		even
0003D8D0                            ; ---------------------------------------------------------------------------
0003D8D0                            ; Compressed graphics - GHZ stuff
0003D8D0                            ; ---------------------------------------------------------------------------
0003D8D0                            Nem_Stalk:	incbin	artnem\ghzstalk.bin	; GHZ flower stalk
0003D91A                            		even
0003D91A                            Nem_Swing:	incbin	artnem\ghzswing.bin	; GHZ swinging platform
0003DA34                            		even
0003DA34                            Nem_Bridge:	incbin	artnem\ghzbridg.bin	; GHZ bridge
0003DB20                            		even
0003DB20                            Nem_GhzUnkBlock:incbin	artnem\xxxghzbl.bin	; unused GHZ block
0003DB68                            		even
0003DB68                            Nem_Ball:	incbin	artnem\ghzball.bin	; GHZ giant ball
0003DD06                            		even
0003DD06                            Nem_Spikes:	incbin	artnem\spikes.bin	; spikes
0003DD82                            		even
0003DD82                            Nem_GhzLog:	incbin	artnem\xxxghzlo.bin	; unused GHZ log
0003DF96                            		even
0003DF96                            Nem_SpikePole:	incbin	artnem\ghzlog.bin	; GHZ spiked log
0003E0C2                            		even
0003E0C2                            Nem_PplRock:	incbin	artnem\ghzrock.bin	; GHZ purple rock
0003E1F0                            		even
0003E1F0                            Nem_GhzWall1:	incbin	artnem\ghzwall1.bin	; GHZ destroyable wall
0003E28E                            		even
0003E28E                            Nem_GhzWall2:	incbin	artnem\ghzwall2.bin	; GHZ normal wall
0003E2EE                            		even
0003E2EE                            ; ---------------------------------------------------------------------------
0003E2EE                            ; Compressed graphics - LZ stuff
0003E2EE                            ; ---------------------------------------------------------------------------
0003E2EE                            Nem_Water:	incbin	artnem\lzwater.bin	; LZ water surface
0003E412                            		even
0003E412                            Nem_Splash:	incbin	artnem\lzsplash.bin	; LZ waterfalls and splashes
0003EC06                            		even
0003EC06                            Nem_LzSpikeBall:incbin	artnem\lzspball.bin	; LZ spiked ball on chain
0003ED86                            		even
0003ED86                            Nem_FlapDoor:	incbin	artnem\lzflapdo.bin	; LZ flapping door
0003EEF0                            		even
0003EEF0                            Nem_Bubbles:	incbin	artnem\lzbubble.bin	; LZ bubbles and countdown numbers
0003F546                            		even
0003F546                            Nem_LzBlock3:	incbin	artnem\lzblock3.bin	; LZ 32x16 block
0003F5FC                            		even
0003F5FC                            Nem_LzDoor1:	incbin	artnem\lzvdoor.bin	; LZ vertical door
0003F69E                            		even
0003F69E                            Nem_Harpoon:	incbin	artnem\lzharpoo.bin	; LZ harpoon
0003F7FA                            		even
0003F7FA                            Nem_LzPole:	incbin	artnem\lzpole.bin	; LZ pole that breaks
0003F85E                            		even
0003F85E                            Nem_LzDoor2:	incbin	artnem\lzhdoor.bin	; LZ large horizontal door
0003F9B0                            		even
0003F9B0                            Nem_LzWheel:	incbin	artnem\lzwheel.bin	; LZ wheel from corner of conveyor belt
0003FE92                            		even
0003FE92                            Nem_Gargoyle:	incbin	artnem\lzgargoy.bin	; LZ gargoyle head and spitting fire
00040002                            		even
00040002                            Nem_LzBlock2:	incbin	artnem\lzblock2.bin	; LZ blocks
000402BA                            		even
000402BA                            Nem_LzPlatfm:	incbin	artnem\lzptform.bin	; LZ rising platforms
000403F2                            		even
000403F2                            Nem_Cork:	incbin	artnem\lzcork.bin	; LZ cork block
0004051C                            		even
0004051C                            Nem_LzBlock1:	incbin	artnem\lzblock1.bin	; LZ 32x32 block
0004062C                            		even
0004062C                            ; ---------------------------------------------------------------------------
0004062C                            ; Compressed graphics - MZ stuff
0004062C                            ; ---------------------------------------------------------------------------
0004062C                            Nem_MzMetal:	incbin	artnem\mzmetal.bin	; MZ metal blocks
000408BA                            		even
000408BA                            Nem_MzSwitch:	incbin	artnem\mzswitch.bin	; MZ switch
00040978                            		even
00040978                            Nem_MzGlass:	incbin	artnem\mzglassy.bin	; MZ green glassy block
00040A30                            		even
00040A30                            Nem_GhzGrass:	incbin	artnem\xxxgrass.bin	; unused grass (GHZ or MZ?)
00040A84                            		even
00040A84                            Nem_MzFire:	incbin	artnem\mzfire.bin	; MZ fireballs
00040D62                            		even
00040D62                            Nem_Lava:	incbin	artnem\mzlava.bin	; MZ lava
00041678                            		even
00041678                            Nem_MzBlock:	incbin	artnem\mzblock.bin	; MZ green pushable block
000417DC                            		even
000417DC                            Nem_MzUnkBlock:	incbin	artnem\xxxmzblo.bin	; MZ unused background block
00041864                            		even
00041864                            ; ---------------------------------------------------------------------------
00041864                            ; Compressed graphics - SLZ stuff
00041864                            ; ---------------------------------------------------------------------------
00041864                            Nem_Seesaw:	incbin	artnem\slzseesa.bin	; SLZ seesaw
00041AA0                            		even
00041AA0                            Nem_SlzSpike:	incbin	artnem\slzspike.bin	; SLZ spikeball that sits on a seesaw
00041BE6                            		even
00041BE6                            Nem_Fan:	incbin	artnem\slzfan.bin	; SLZ fan
00041E2A                            		even
00041E2A                            Nem_SlzWall:	incbin	artnem\slzwall.bin	; SLZ smashable wall
00041E8C                            		even
00041E8C                            Nem_Pylon:	incbin	artnem\slzpylon.bin	; SLZ foreground pylon
00041F6E                            		even
00041F6E                            Nem_SlzSwing:	incbin	artnem\slzswing.bin	; SLZ swinging platform
00042150                            		even
00042150                            Nem_SlzBlock:	incbin	artnem\slzblock.bin	; SLZ 32x32 block
0004225C                            		even
0004225C                            Nem_SlzCannon:	incbin	artnem\slzcanno.bin	; SLZ fireball launcher cannon
00042300                            		even
00042300                            ; ---------------------------------------------------------------------------
00042300                            ; Compressed graphics - SYZ stuff
00042300                            ; ---------------------------------------------------------------------------
00042300                            Nem_Bumper:	incbin	artnem\syzbumpe.bin	; SYZ bumper
0004246A                            		even
0004246A                            Nem_SyzSpike2:	incbin	artnem\syzsspik.bin	; SYZ small spikeball
000424CC                            		even
000424CC                            Nem_LzSwitch:	incbin	artnem\switch.bin	; LZ/SYZ/SBZ switch
000425AE                            		even
000425AE                            Nem_SyzSpike1:	incbin	artnem\syzlspik.bin	; SYZ/SBZ large spikeball
0004283C                            		even
0004283C                            ; ---------------------------------------------------------------------------
0004283C                            ; Compressed graphics - SBZ stuff
0004283C                            ; ---------------------------------------------------------------------------
0004283C                            Nem_SbzWheel1:	incbin	artnem\sbzwhee1.bin	; SBZ spot on rotating wheel that Sonic runs around
00042890                            		even
00042890                            Nem_SbzWheel2:	incbin	artnem\sbzwhee2.bin	; SBZ wheel that grabs Sonic
00042B2C                            		even
00042B2C                            Nem_Cutter:	incbin	artnem\sbzcutte.bin	; SBZ pizza cutter
00042D30                            		even
00042D30                            Nem_Stomper:	incbin	artnem\sbzstomp.bin	; SBZ stomper
00042ECE                            		even
00042ECE                            Nem_SpinPform:	incbin	artnem\sbzpform.bin	; SBZ spinning platform
000431FE                            		even
000431FE                            Nem_TrapDoor:	incbin	artnem\sbztrapd.bin	; SBZ trapdoor
000433DC                            		even
000433DC                            Nem_SbzFloor:	incbin	artnem\sbzfloor.bin	; SBZ collapsing floor
00043434                            		even
00043434                            Nem_Electric:	incbin	artnem\sbzshock.bin	; SBZ electric shock orb
000435B4                            		even
000435B4                            Nem_SbzBlock:	incbin	artnem\sbzvanis.bin	; SBZ vanishing block
000436B2                            		even
000436B2                            Nem_FlamePipe:	incbin	artnem\sbzflame.bin	; SBZ flaming pipe
0004383E                            		even
0004383E                            Nem_SbzDoor1:	incbin	artnem\sbzvdoor.bin	; SBZ small vertical door
0004388E                            		even
0004388E                            Nem_SlideFloor:	incbin	artnem\sbzslide.bin	; SBZ floor that slides away
000438E6                            		even
000438E6                            Nem_SbzDoor2:	incbin	artnem\sbzhdoor.bin	; SBZ large horizontal door
000439E2                            		even
000439E2                            Nem_Girder:	incbin	artnem\sbzgirde.bin	; SBZ crushing girder
00043AF8                            		even
00043AF8                            ; ---------------------------------------------------------------------------
00043AF8                            ; Compressed graphics - enemies
00043AF8                            ; ---------------------------------------------------------------------------
00043AF8                            Nem_BallHog:	incbin	artnem\ballhog.bin	; ball hog
00043EB8                            		even
00043EB8                            Nem_Crabmeat:	incbin	artnem\crabmeat.bin	; crabmeat
000443A6                            		even
000443A6                            Nem_Buzz:	incbin	artnem\buzzbomb.bin	; buzz bomber
0004474C                            		even
0004474C                            Nem_UnkExplode:	incbin	artnem\xxxexplo.bin	; unused explosion
00044934                            		even
00044934                            Nem_Burrobot:	incbin	artnem\burrobot.bin	; burrobot
0004501E                            		even
0004501E                            Nem_Chopper:	incbin	artnem\chopper.bin	; chopper
00045286                            		even
00045286                            Nem_Jaws:	incbin	artnem\jaws.bin		; jaws
00045510                            		even
00045510                            Nem_Roller:	incbin	artnem\roller.bin	; roller
00045A34                            		even
00045A34                            Nem_Motobug:	incbin	artnem\motobug.bin	; moto bug
00045CBE                            		even
00045CBE                            Nem_Newtron:	incbin	artnem\newtron.bin	; newtron
000462DC                            		even
000462DC                            Nem_Yadrin:	incbin	artnem\yadrin.bin	; yadrin
000466C4                            		even
000466C4                            Nem_Basaran:	incbin	artnem\basaran.bin	; basaran
000469C0                            		even
000469C0                            Nem_Splats:	incbin	artnem\splats.bin	; splats
00046C08                            		even
00046C08                            Nem_Bomb:	incbin	artnem\bomb.bin		; bomb
00046EA0                            		even
00046EA0                            Nem_Orbinaut:	incbin	artnem\orbinaut.bin	; orbinaut
0004707E                            		even
0004707E                            Nem_Cater:	incbin	artnem\caterkil.bin	; caterkiller
0004720C                            		even
0004720C                            ; ---------------------------------------------------------------------------
0004720C                            ; Compressed graphics - various
0004720C                            ; ---------------------------------------------------------------------------
0004720C                            Nem_TitleCard:	incbin	artnem\ttlcards.bin	; title cards
0004781A                            		even
0004781A                            Nem_Hud:	incbin	artnem\hud.bin		; HUD (rings, time, score)
00047910                            		even
00047910                            Nem_Lives:	incbin	artnem\lifeicon.bin	; life counter icon
00047A16                            		even
00047A16                            Nem_Ring:	incbin	artnem\rings.bin	; rings
00047B0A                            		even
00047B0A                            Nem_Monitors:	incbin	artnem\monitors.bin	; monitors
00047F7C 00                         		even
00047F7C                            Nem_Explode:	incbin	artnem\explosio.bin	; explosion
000485E2                            		even
000485E2                            Nem_Points:	incbin	artnem\points.bin	; points from destroyed enemy or object
00048692                            		even
00048692                            Nem_GameOver:	incbin	artnem\gameover.bin	; game over / time over
00048824                            		even
00048824                            Nem_HSpring:	incbin	artnem\springh.bin	; horizontal spring
00048926                            		even
00048926                            Nem_VSpring:	incbin	artnem\springv.bin	; vertical spring
00048A02                            		even
00048A02                            ArtNem_DignlSprng:	incbin	"artnem\Diagonal spring.bin" ; diagonal spring
00048BD6 00                         		even
00048BD6                            Nem_SignPost:	incbin	artnem\signpost.bin	; end of level signpost
00049052                            		even
00049052                            Nem_Lamp:	incbin	artnem\lamppost.bin	; lamppost
00049112                            		even
00049112                            Nem_BigFlash:	incbin	artnem\rngflash.bin	; flash from giant ring
00049286                            		even
00049286                            Nem_Bonus:	incbin	artnem\bonus.bin	; hidden bonuses at end of a level
00049588                            		even
00049588                            ; ---------------------------------------------------------------------------
00049588                            ; Compressed graphics - continue screen
00049588                            ; ---------------------------------------------------------------------------
00049588                            Nem_ContSonic:	incbin	artnem\cntsonic.bin	; Sonic on continue screen
00049838                            		even
00049838                            Nem_MiniSonic:	incbin	artnem\cntother.bin	; mini Sonic and text on continue screen
00049A72                            		even
00049A72                            ; ---------------------------------------------------------------------------
00049A72                            ; Compressed graphics - animals
00049A72                            ; ---------------------------------------------------------------------------
00049A72                            Nem_Rabbit:	incbin	artnem\rabbit.bin	; rabbit
00049BCA                            		even
00049BCA                            Nem_Chicken:	incbin	artnem\chicken.bin	; chicken
00049D26                            		even
00049D26                            Nem_BlackBird:	incbin	artnem\blackbrd.bin	; blackbird
00049EA2                            		even
00049EA2                            Nem_Seal:	incbin	artnem\seal.bin		; seal
00049FBE                            		even
00049FBE                            Nem_Pig:	incbin	artnem\pig.bin		; pig
0004A0F4                            		even
0004A0F4                            Nem_Flicky:	incbin	artnem\flicky.bin	; flicky
0004A22E                            		even
0004A22E                            Nem_Squirrel:	incbin	artnem\squirrel.bin	; squirrel
0004A38A                            		even
0004A38A                            ; ---------------------------------------------------------------------------
0004A38A                            ; Compressed graphics - primary patterns and block mappings
0004A38A                            ; ---------------------------------------------------------------------------
0004A38A                            Blk16_GHZ:	incbin	map16\ghz.bin
0004AC9E                            		even
0004AC9E                            Nem_GHZ:	incbin	artnem\8x8ghz.bin	; GHZ primary patterns
0004C2B0                            		even
0004C2B0                            Nem_GHZ_1st:	incbin	artnem\8x8ghz1.bin	; Title Screen and Ending only
0004D910                            		even
0004D910                            Nem_GHZ_2nd:	incbin	artnem\8x8ghz2.bin	; Title Screen and Ending only
0004ECB8                            		even
0004ECB8                            Blk256_GHZ:	incbin	map256\ghz.bin
00050D72                            		even
00050D72                            Blk16_TS:	incbin	map16\ts.bin
00050E74                            		even
00050E74                            Nem_TS_1st:	incbin	artnem\8x8ts1.bin; GHZ primary patterns
00051ACA                            		even
00051ACA                            Blk256_TS:	incbin	map256\ts.bin
00052018                            		even
00052018                            Blk16_LZ:	incbin	map16\lz.bin
00052342                            		even
00052342                            Nem_LZ:		incbin	artnem\8x8lz.bin	; LZ primary patterns
00053E8A                            		even
00053E8A                            Blk256_LZ:	incbin	map256\lz.bin
0005667A                            		even
0005667A                            Blk16_MZ:	incbin	map16\mz.bin
00056E84                            		even
00056E84                            Nem_MZ:		incbin	artnem\8x8mz.bin	; MZ primary patterns
000596C8                            		even
000596C8                            Blk256_MZ:	incbin	map256\mz.bin
0005AE88                            		even
0005AE88                            Blk16_SLZ:	incbin	map16\slz.bin
0005B66C                            		even
0005B66C                            Nem_SLZ:	incbin	artnem\8x8slz.bin	; SLZ primary patterns
0005F1C0                            		even
0005F1C0                            Blk256_SLZ:	incbin	map256\slz.bin
000615F0                            		even
000615F0                            Blk16_SYZ:	incbin	map16\syz.bin
00061F5E                            		even
00061F5E                            Nem_SYZ:	incbin	artnem\8x8syz.bin	; SYZ primary patterns
0006568A                            		even
0006568A                            Blk256_SYZ:	incbin	map256\syz.bin
00067A3A                            		even
00067A3A                            Blk16_SBZ:	incbin	map16\sbz.bin
000688D4                            		even
000688D4                            Nem_SBZ:	incbin	artnem\8x8sbz.bin	; SBZ primary patterns
0006B080                            		even
0006B080                            Blk256_SBZ:	incbin	map256\sbz.bin
0006DAD0                            		even
0006DAD0                            ; ---------------------------------------------------------------------------
0006DAD0                            ; Compressed graphics - bosses and ending sequence
0006DAD0                            ; ---------------------------------------------------------------------------
0006DAD0                            Nem_Eggman:	incbin	artnem\bossmain.bin	; boss main patterns
0006E334                            		even
0006E334                            Nem_Weapons:	incbin	artnem\bossxtra.bin	; boss add-ons and weapons
0006E61E                            		even
0006E61E                            Nem_Prison:	incbin	artnem\prison.bin	; prison capsule
0006EEA2                            		even
0006EEA2                            Nem_Sbz2Eggman:	incbin	artnem\sbz2boss.bin	; Eggman in SBZ2 and FZ
0006F6CE                            		even
0006F6CE                            Nem_FzBoss:	incbin	artnem\fzboss.bin	; FZ boss
0006FE36                            		even
0006FE36                            Nem_FzEggman:	incbin	artnem\fzboss2.bin	; Eggman after the FZ boss
000703B6                            		even
000703B6                            Nem_Exhaust:	incbin	artnem\bossflam.bin	; boss exhaust flame
000704D6                            		even
000704D6                            Nem_EndEm:	incbin	artnem\endemera.bin	; ending sequence chaos emeralds
000706D4                            		even
000706D4                            Nem_EndSonic:	incbin	artnem\endsonic.bin	; ending sequence Sonic
000718B2                            		even
000718B2                            Nem_TryAgain:	incbin	artnem\tryagain.bin	; ending "try again" screen
000721F6                            		even
000721F6                            Nem_EndEggman:	incbin	artnem\xxxend.bin	; unused boss sequence on ending
000725CC                            		even
000725CC                            Kos_EndFlowers:	incbin	artkos\flowers.bin	; ending sequence animated flowers
00072B5C                            		even
00072B5C                            Nem_EndFlower:	incbin	artnem\endflowe.bin	; ending sequence flowers
00072DE4                            		even
00072DE4                            Nem_CreditText:	incbin	artnem\credits.bin	; credits alphabet
000733E2                            		even
000733E2                            Nem_EndStH:	incbin	artnem\endtext.bin	; ending sequence "Sonic the Hedgehog" text
0007366A                            		even
0007366A                            		incbin	misc\padding2.bin
0007376E                            		even
0007376E                            ; ---------------------------------------------------------------------------
0007376E                            ; Collision data
0007376E                            ; ---------------------------------------------------------------------------
0007376E                            AngleMap:	incbin	collide\anglemap.bin	; floor angle map
0007386E                            		even
0007386E                            CollArray1:	incbin	collide\carray_n.bin	; normal collision array
0007486E                            		even
0007486E                            CollArray2:	incbin	collide\carray_r.bin	; rotated collision array
0007586E                            		even
0007586E                            Col_GHZ:	incbin	collide\ghz.bin		; GHZ index
00075A26 00                         		even
00075A26                            Col_LZ:		incbin	collide\lz.bin		; LZ index
00075AEE                            		even
00075AEE                            Col_MZ:		incbin	collide\mz.bin		; MZ index
00075C7E                            		even
00075C7E                            Col_SLZ:	incbin	collide\slz.bin		; SLZ index
00075E72                            		even
00075E72                            Col_SYZ:	incbin	collide\syz.bin		; SYZ index
00076066                            		even
00076066                            Col_SBZ:	incbin	collide\sbz.bin		; SBZ index
000762BE                            		even
000762BE                            ; ---------------------------------------------------------------------------
000762BE                            ; Special layouts
000762BE                            ; ---------------------------------------------------------------------------
000762BE                            SS_1:		incbin	sslayout\1.bin
00076538                            		even
00076538                            SS_2:		incbin	sslayout\2.bin
0007694A                            		even
0007694A                            SS_3:		incbin	sslayout\3.bin
00076CA6                            		even
00076CA6                            SS_4:		incbin	sslayout\4.bin
00077180                            		even
00077180                            SS_5:		incbin	sslayout\5.bin
00077652                            		even
00077652                            SS_6:		incbin	sslayout\6.bin
00077962                            		even
00077962                            ; ---------------------------------------------------------------------------
00077962                            ; Animated uncompressed graphics
00077962                            ; ---------------------------------------------------------------------------
00077962                            Art_GhzWater:	incbin	artunc\ghzwater.bin	; GHZ waterfall
00077B62                            		even
00077B62                            Art_GhzFlower1:	incbin	artunc\ghzflowl.bin	; GHZ large flower
00077F62                            		even
00077F62                            Art_GhzFlower2:	incbin	artunc\ghzflows.bin	; GHZ small flower
000783E2                            		even
000783E2                            Art_MzLava1:	incbin	artunc\mzlava1.bin	; MZ lava surface
000786E2                            		even
000786E2                            Art_MzLava2:	incbin	artunc\mzlava2.bin	; MZ lava
00078CE2                            		even
00078CE2                            Art_MzTorch:	incbin	artunc\mztorch.bin	; MZ torch in background
00078FE2                            		even
00078FE2                            Art_SbzSmoke:	incbin	artunc\sbzsmoke.bin	; SBZ smoke in background
00079A62                            		even
00079A62                            
00079A62                            ; ---------------------------------------------------------------------------
00079A62                            ; Level	layout index
00079A62                            ; ---------------------------------------------------------------------------
00079A62 0000 0000 0000             Level_Index:	dc.w Level_GHZ1-Level_Index, Level_GHZbg-Level_Index, byte_68D70-Level_Index
00079A68 0000 0000 0000             		dc.w Level_GHZ2-Level_Index, Level_GHZbg-Level_Index, byte_68E3C-Level_Index
00079A6E 0000 0000 0000             		dc.w Level_GHZ3-Level_Index, Level_GHZbg-Level_Index, byte_68F84-Level_Index
00079A74 0000 0000 0000             		dc.w byte_68F88-Level_Index, byte_68F88-Level_Index, byte_68F88-Level_Index
00079A7A 0000 0000 0000             		dc.w Level_LZ1-Level_Index, Level_LZbg-Level_Index, byte_69190-Level_Index
00079A80 0000 0000 0000             		dc.w Level_LZ2-Level_Index, Level_LZbg-Level_Index, byte_6922E-Level_Index
00079A86 0000 0000 0000             		dc.w Level_LZ3-Level_Index, Level_LZbg-Level_Index, byte_6934C-Level_Index
00079A8C 0000 0000 0000             		dc.w Level_SBZ3-Level_Index, Level_LZbg-Level_Index, byte_6940A-Level_Index
00079A92 0000 0000 0000             		dc.w Level_MZ1-Level_Index, Level_MZ1bg-Level_Index, Level_MZ1-Level_Index
00079A98 0000 0000 0000             		dc.w Level_MZ2-Level_Index, Level_MZ2bg-Level_Index, byte_6965C-Level_Index
00079A9E 0000 0000 0000             		dc.w Level_MZ3-Level_Index, Level_MZ3bg-Level_Index, byte_697E6-Level_Index
00079AA4 0000 0000 0000             		dc.w byte_697EA-Level_Index, byte_697EA-Level_Index, byte_697EA-Level_Index
00079AAA 0000 0000 0000             		dc.w Level_SLZ1-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
00079AB0 0000 0000 0000             		dc.w Level_SLZ2-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
00079AB6 0000 0000 0000             		dc.w Level_SLZ3-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
00079ABC 0000 0000 0000             		dc.w byte_69B84-Level_Index, byte_69B84-Level_Index, byte_69B84-Level_Index
00079AC2 0000 0000 0000             		dc.w Level_SYZ1-Level_Index, Level_SYZbg-Level_Index, byte_69C7E-Level_Index
00079AC8 0000 0000 0000             		dc.w Level_SYZ2-Level_Index, Level_SYZbg-Level_Index, byte_69D86-Level_Index
00079ACE 0000 0000 0000             		dc.w Level_SYZ3-Level_Index, Level_SYZbg-Level_Index, byte_69EE4-Level_Index
00079AD4 0000 0000 0000             		dc.w byte_69EE8-Level_Index, byte_69EE8-Level_Index, byte_69EE8-Level_Index
00079ADA 0000 0000 0000             		dc.w Level_SBZ1-Level_Index, Level_SBZ1bg-Level_Index, Level_SBZ1bg-Level_Index
00079AE0 0000 0000 0000             		dc.w Level_SBZ2-Level_Index, Level_SBZ2bg-Level_Index, Level_SBZ2bg-Level_Index
00079AE6 0000 0000 0000             		dc.w Level_SBZ2-Level_Index, Level_SBZ2bg-Level_Index, byte_6A2F8-Level_Index
00079AEC 0000 0000 0000             		dc.w byte_6A2FC-Level_Index, byte_6A2FC-Level_Index, byte_6A2FC-Level_Index
00079AF2 0000 0000 0000             		dc.w Level_End-Level_Index, Level_GHZbg-Level_Index, byte_6A320-Level_Index
00079AF8 0000 0000 0000             		dc.w Level_End-Level_Index, Level_GHZbg-Level_Index, byte_6A320-Level_Index
00079AFE 0000 0000 0000             		dc.w byte_6A320-Level_Index, byte_6A320-Level_Index, byte_6A320-Level_Index
00079B04 0000 0000 0000             		dc.w byte_6A320-Level_Index, byte_6A320-Level_Index, byte_6A320-Level_Index
00079B0A                            
00079B0A                            Level_GHZ1:	incbin	levels\ghz1.bin
00079BFC                            		even
00079BFC 0000 0000                  byte_68D70:	dc.b 0,	0, 0, 0
00079C00                            Level_GHZ2:	incbin	levels\ghz2.bin
00079CC8                            		even
00079CC8 0000 0000                  byte_68E3C:	dc.b 0,	0, 0, 0
00079CCC                            Level_GHZ3:	incbin	levels\ghz3.bin
00079DEE                            		even
00079DEE                            Level_GHZbg:	incbin	levels\ghzbg.bin
00079E10                            		even
00079E10 0000 0000                  byte_68F84:	dc.b 0,	0, 0, 0
00079E14 0000 0000                  byte_68F88:	dc.b 0,	0, 0, 0
00079E18                            
00079E18                            Level_LZ1:	incbin	levels\lz1.bin
00079F1A                            		even
00079F1A                            Level_LZbg:	incbin	levels\lzbg.bin
0007A01C                            		even
0007A01C 0000 0000                  byte_69190:	dc.b 0,	0, 0, 0
0007A020                            Level_LZ2:	incbin	levels\lz2.bin
0007A0BA                            		even
0007A0BA 0000 0000                  byte_6922E:	dc.b 0,	0, 0, 0
0007A0BE                            Level_LZ3:	incbin	levels\lz3.bin
0007A1D8                            		even
0007A1D8 0000 0000                  byte_6934C:	dc.b 0,	0, 0, 0
0007A1DC                            Level_SBZ3:	incbin	levels\sbz3.bin
0007A296                            		even
0007A296 0000 0000                  byte_6940A:	dc.b 0,	0, 0, 0
0007A29A                            
0007A29A                            Level_MZ1:	incbin	levels\mz1.bin
0007A338                            		even
0007A338                            Level_MZ1bg:	incbin	levels\mz1bg.bin
0007A3B2                            		even
0007A3B2                            Level_MZ2:	incbin	levels\mz2.bin
0007A456                            		even
0007A456                            Level_MZ2bg:	incbin	levels\mz2bg.bin
0007A4E8                            		even
0007A4E8 0000 0000                  byte_6965C:	dc.b 0,	0, 0, 0
0007A4EC                            Level_MZ3:	incbin	levels\mz3.bin
0007A5CE                            		even
0007A5CE                            Level_MZ3bg:	incbin	levels\mz3bg.bin
0007A672                            		even
0007A672 0000 0000                  byte_697E6:	dc.b 0,	0, 0, 0
0007A676 0000 0000                  byte_697EA:	dc.b 0,	0, 0, 0
0007A67A                            
0007A67A                            Level_SLZ1:	incbin	levels\slz1.bin
0007A78C                            		even
0007A78C                            Level_SLZbg:	incbin	levels\slzbg.bin
0007A806                            		even
0007A806                            Level_SLZ2:	incbin	levels\slz2.bin
0007A8F6                            		even
0007A8F6                            Level_SLZ3:	incbin	levels\slz3.bin
0007AA10                            		even
0007AA10 0000 0000                  byte_69B84:	dc.b 0,	0, 0, 0
0007AA14                            
0007AA14                            Level_SYZ1:	incbin	levels\syz1.bin
0007AAD0                            		even
0007AAD0                            Level_SYZbg:	incbin	levels\syzbg.bin
0007AB0A                            		even
0007AB0A 0000 0000                  byte_69C7E:	dc.b 0,	0, 0, 0
0007AB0E                            Level_SYZ2:	incbin	levels\syz2.bin
0007AC12                            		even
0007AC12 0000 0000                  byte_69D86:	dc.b 0,	0, 0, 0
0007AC16                            Level_SYZ3:	incbin	levels\syz3.bin
0007AD70                            		even
0007AD70 0000 0000                  byte_69EE4:	dc.b 0,	0, 0, 0
0007AD74 0000 0000                  byte_69EE8:	dc.b 0,	0, 0, 0
0007AD78                            
0007AD78                            Level_SBZ1:	incbin	levels\sbz1.bin
0007AE9A                            		even
0007AE9A                            Level_SBZ1bg:	incbin	levels\sbz1bg.bin
0007AED8                            		even
0007AED8                            Level_SBZ2:	incbin	levels\sbz2.bin
0007B01A                            		even
0007B01A                            Level_SBZ2bg:	incbin	levels\sbz2bg.bin
0007B184                            		even
0007B184 0000 0000                  byte_6A2F8:	dc.b 0,	0, 0, 0
0007B188 0000 0000                  byte_6A2FC:	dc.b 0,	0, 0, 0
0007B18C                            Level_End:	incbin	levels\ending.bin
0007B1BC 00                         		even
0007B1BC 0000 0000                  byte_6A320:	dc.b 0,	0, 0, 0
0007B1C0                            
0007B1C0                            ; ---------------------------------------------------------------------------
0007B1C0                            ; Animated uncompressed giant ring graphics
0007B1C0                            ; ---------------------------------------------------------------------------
0007B1C0                            Art_BigRing:	incbin	artunc\bigring.bin
0007BE00                            		even
0007BE00                            
0007BE00                            		incbin	misc\padding3.bin
0007BE9C                            		even
0007BE9C                            
0007BE9C                            ; ---------------------------------------------------------------------------
0007BE9C                            ; Sprite locations index
0007BE9C                            ; ---------------------------------------------------------------------------
0007BE9C 0000 0000                  ObjPos_Index:	dc.w ObjPos_GHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007BEA0 0000 0000                  		dc.w ObjPos_GHZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007BEA4 0000 0000                  		dc.w ObjPos_GHZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007BEA8 0000 0000                  		dc.w ObjPos_GHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007BEAC 0000 0000                  		dc.w ObjPos_LZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007BEB0 0000 0000                  		dc.w ObjPos_LZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007BEB4 0000 0000                  		dc.w ObjPos_LZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007BEB8 0000 0000                  		dc.w ObjPos_SBZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007BEBC 0000 0000                  		dc.w ObjPos_MZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007BEC0 0000 0000                  		dc.w ObjPos_MZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007BEC4 0000 0000                  		dc.w ObjPos_MZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007BEC8 0000 0000                  		dc.w ObjPos_MZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007BECC 0000 0000                  		dc.w ObjPos_SLZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007BED0 0000 0000                  		dc.w ObjPos_SLZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007BED4 0000 0000                  		dc.w ObjPos_SLZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007BED8 0000 0000                  		dc.w ObjPos_SLZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007BEDC 0000 0000                  		dc.w ObjPos_SYZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007BEE0 0000 0000                  		dc.w ObjPos_SYZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007BEE4 0000 0000                  		dc.w ObjPos_SYZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007BEE8 0000 0000                  		dc.w ObjPos_SYZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007BEEC 0000 0000                  		dc.w ObjPos_SBZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007BEF0 0000 0000                  		dc.w ObjPos_SBZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007BEF4 0000 0000                  		dc.w ObjPos_FZ-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007BEF8 0000 0000                  		dc.w ObjPos_SBZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007BEFC 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007BF00 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007BF04 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007BF08 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007BF0C 0000 0000                  		dc.w ObjPos_LZ1pf1-ObjPos_Index, ObjPos_LZ1pf2-ObjPos_Index
0007BF10 0000 0000                  		dc.w ObjPos_LZ2pf1-ObjPos_Index, ObjPos_LZ2pf2-ObjPos_Index
0007BF14 0000 0000                  		dc.w ObjPos_LZ3pf1-ObjPos_Index, ObjPos_LZ3pf2-ObjPos_Index
0007BF18 0000 0000                  		dc.w ObjPos_LZ1pf1-ObjPos_Index, ObjPos_LZ1pf2-ObjPos_Index
0007BF1C 0000 0000                  		dc.w ObjPos_SBZ1pf1-ObjPos_Index, ObjPos_SBZ1pf2-ObjPos_Index
0007BF20 0000 0000                  		dc.w ObjPos_SBZ1pf3-ObjPos_Index, ObjPos_SBZ1pf4-ObjPos_Index
0007BF24 0000 0000                  		dc.w ObjPos_SBZ1pf5-ObjPos_Index, ObjPos_SBZ1pf6-ObjPos_Index
0007BF28 0000 0000                  		dc.w ObjPos_SBZ1pf1-ObjPos_Index, ObjPos_SBZ1pf2-ObjPos_Index
0007BF2C FFFF 0000 0000             		dc.b $FF, $FF, 0, 0, 0,	0
0007BF32                            ObjPos_GHZ1:	incbin	objpos\ghz1.bin
0007C43C                            		even
0007C43C                            ObjPos_GHZ2:	incbin	objpos\ghz2.bin
0007C9FA                            		even
0007C9FA                            ObjPos_GHZ3:	incbin	objpos\ghz3.bin
0007D0B4                            		even
0007D0B4                            ObjPos_LZ1:	incbin	objpos\lz1.bin
0007D522                            		even
0007D522                            ObjPos_LZ2:	incbin	objpos\lz2.bin
0007D864                            		even
0007D864                            ObjPos_LZ3:	incbin	objpos\lz3.bin
0007DE46                            		even
0007DE46                            ObjPos_SBZ3:	incbin	objpos\sbz3.bin
0007E2DE                            		even
0007E2DE                            ObjPos_LZ1pf1:	incbin	objpos\lz1pf1.bin
0007E310                            		even
0007E310                            ObjPos_LZ1pf2:	incbin	objpos\lz1pf2.bin
0007E342                            		even
0007E342                            ObjPos_LZ2pf1:	incbin	objpos\lz2pf1.bin
0007E374                            		even
0007E374                            ObjPos_LZ2pf2:	incbin	objpos\lz2pf2.bin
0007E3A6                            		even
0007E3A6                            ObjPos_LZ3pf1:	incbin	objpos\lz3pf1.bin
0007E3F0                            		even
0007E3F0                            ObjPos_LZ3pf2:	incbin	objpos\lz3pf2.bin
0007E42E                            		even
0007E42E                            ObjPos_MZ1:	incbin	objpos\mz1.bin
0007E79A                            		even
0007E79A                            ObjPos_MZ2:	incbin	objpos\mz2.bin
0007EC44                            		even
0007EC44                            ObjPos_MZ3:	incbin	objpos\mz3.bin
0007F1BA                            		even
0007F1BA                            ObjPos_SLZ1:	incbin	objpos\slz1.bin
0007F6FA                            		even
0007F6FA                            ObjPos_SLZ2:	incbin	objpos\slz2.bin
0007FB62                            		even
0007FB62                            ObjPos_SLZ3:	incbin	objpos\slz3.bin
00080144                            		even
00080144                            ObjPos_SYZ1:	incbin	objpos\syz1.bin
000805D0                            		even
000805D0                            ObjPos_SYZ2:	incbin	objpos\syz2.bin
00080B3A                            		even
00080B3A                            ObjPos_SYZ3:	incbin	objpos\syz3.bin
00081140                            		even
00081140                            ObjPos_SBZ1:	incbin	objpos\sbz1.bin
0008187E                            		even
0008187E                            ObjPos_SBZ2:	incbin	objpos\sbz2.bin
00081F5C                            		even
00081F5C                            ObjPos_FZ:	incbin	objpos\fz.bin
00081F6E                            		even
00081F6E                            ObjPos_SBZ1pf1:	incbin	objpos\sbz1pf1.bin
00081FA0                            		even
00081FA0                            ObjPos_SBZ1pf2:	incbin	objpos\sbz1pf2.bin
00081FD2                            		even
00081FD2                            ObjPos_SBZ1pf3:	incbin	objpos\sbz1pf3.bin
00082004                            		even
00082004                            ObjPos_SBZ1pf4:	incbin	objpos\sbz1pf4.bin
00082036                            		even
00082036                            ObjPos_SBZ1pf5:	incbin	objpos\sbz1pf5.bin
00082068                            		even
00082068                            ObjPos_SBZ1pf6:	incbin	objpos\sbz1pf6.bin
000820A0                            		even
000820A0                            ObjPos_End:	incbin	objpos\ending.bin
000821FC                            		even
000821FC FFFF 0000 0000             ObjPos_Null:	dc.b $FF, $FF, 0, 0, 0,	0
00082202                            ; ---------------------------------------------------------------------------
00082202                            		incbin	misc\padding4.bin
0008282C                            		even
0008282C                            
0008282C 0000 0000                  Go_SoundTypes:	dc.l SoundTypes		; XREF: Sound_Play
00082830 0000 0000                  Go_SoundD0:	dc.l SoundD0Index	; XREF: Sound_D0toDF
00082834 0000 0000                  Go_MusicIndex:	dc.l MusicIndex		; XREF: Sound_81to9F
00082838 0000 0000                  Go_SoundIndex:	dc.l SoundIndex		; XREF: Sound_A0toCF
0008283C 0000 0000                  off_719A0:	dc.l byte_71A94		; XREF: Sound_81to9F
00082840 0000 0000                  Go_PSGIndex:	dc.l PSG_Index		; XREF: sub_72926
00082844                            ; ---------------------------------------------------------------------------
00082844                            ; PSG instruments used in music
00082844                            ; ---------------------------------------------------------------------------
00082844 0000 0000 0000 0000 0000+  PSG_Index:	dc.l PSG1, PSG2, PSG3
00082850 0000 0000 0000 0000 0000+  		dc.l PSG4, PSG5, PSG6
0008285C 0000 0000 0000 0000 0000+  		dc.l PSG7, PSG8, PSG9
00082868                            PSG1:		incbin	sound\psg1.bin
0008287F                            PSG2:		incbin	sound\psg2.bin
00082886                            PSG3:		incbin	sound\psg3.bin
00082897                            PSG4:		incbin	sound\psg4.bin
000828A2                            PSG6:		incbin	sound\psg6.bin
000828B1                            PSG5:		incbin	sound\psg5.bin
000828DB                            PSG7:		incbin	sound\psg7.bin
000828F7                            PSG8:		incbin	sound\psg8.bin
0008291F                            PSG9:		incbin	sound\psg9.bin
00082930                            
00082930 0772 7326 1508 FF05        byte_71A94:	dc.b 7,	$72, $73, $26, $15, 8, $FF, 5
00082938                            ; ---------------------------------------------------------------------------
00082938                            ; Music	Pointers
00082938                            ; ---------------------------------------------------------------------------
00082938 0000 0000 0000 0000        MusicIndex:	dc.l Music81, Music82
00082940 0000 0000 0000 0000        		dc.l Music83, Music84
00082948 0000 0000 0000 0000        		dc.l Music85, Music86
00082950 0000 0000 0000 0000        		dc.l Music87, Music88
00082958 0000 0000 0000 0000        		dc.l Music89, Music8A
00082960 0000 0000 0000 0000        		dc.l Music8B, Music8C
00082968 0000 0000 0000 0000        		dc.l Music8D, Music8E
00082970 0000 0000 0000 0000        		dc.l Music8F, Music90
00082978 0000 0000 0000 0000        		dc.l Music91, Music92
00082980 0000 0000 0000 0000        		dc.l Music93, Music94
00082988 0000 0000 0000 0000        		dc.l Music95, Music96
00082990 0000 0000 0000 0000        		dc.l Music97, Music98
00082998 0000 0000 0000 0000        		dc.l Music99, Music9A
000829A0 0000 0000 0000 0000        		dc.l Music9B, Music9C
000829A8 0000 0000 0000 0000        		dc.l Music9D, Music9E
000829B0 0000 0000                  		dc.l Music9F
000829B4                            ; ---------------------------------------------------------------------------
000829B4                            ; Type of sound	being played ($90 = music; $70 = normal	sound effect)
000829B4                            ; ---------------------------------------------------------------------------
000829B4 9090 9090 9090 9090 9090+  SoundTypes:	dc.b $90, $90, $90, $90, $90, $90, $90,	$90, $90, $90, $90, $90, $90, $90, $90,	$90
000829C4 9090 9090 9090 9090 9090+  		dc.b $90, $90, $90, $90, $90, $90, $90,	$90, $90, $90, $90, $90, $90, $90, $90,	$80
000829D4 7070 7070 7070 7070 7068+  		dc.b $70, $70, $70, $70, $70, $70, $70,	$70, $70, $68, $70, $70, $70, $60, $70,	$70
000829E4 6070 6070 7070 7070 7070+  		dc.b $60, $70, $60, $70, $70, $70, $70,	$70, $70, $70, $70, $70, $70, $70, $7F,	$60
000829F4 7070 7070 7070 7070 7070+  		dc.b $70, $70, $70, $70, $70, $70, $70,	$70, $70, $70, $70, $70, $70, $70, $70,	$80
00082A04 8080 8080 8080 8080 8080+  		dc.b $80, $80, $80, $80, $80, $80, $80,	$80, $80, $80, $80, $80, $80, $80, $80,	$90
00082A14 9090 9090                  		dc.b $90, $90, $90, $90
00082A18                            
00082A18                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00082A18                            
00082A18                            YM_Access_WaitRead:
00082A18 33FC 0000 00A1 1100        		StartZ80					; EXT: request Z80 stop off (allow it to continue)
00082A20                            		rept	$10					; EXT: delay for a long enough time to allow the...
00082A20                            		nop						; EXT: '' ...68k pointer to be saved correctly.
00082A20 4E71 4E71 4E71 4E71 4E71+  		endr						; EXT: ''
00082A40                            
00082A40                            sub_71B4C:
00082A40 4DF9 00FF F000             		lea	($FFF000).l,a6
00082A46                            
00082A46 41F9 00A0 02EF             		lea	($A00000+YM_Access).l,a0		; EXT: load access address in Z80
00082A4C 203C 00A0 0000             		move.l	#$A00000,d0				; EXT: prepare Z80 RAM address in d0 (i.e. start of Cue list address)
00082A52 33FC 0100 00A1 1100 0839+  		StopZ80						; EXT: request Z80 stop on
00082A64 4A18                       		tst.b	(a0)+					; EXT: is the Z80 accessing the 68k pointer?
00082A66 66B0                       		bne.s	YM_Access_WaitRead			; EXT: if so, branch and wait for it to finish...
00082A68 1218                       		move.b	(a0)+,d1				; EXT: load lower byte of pointer
00082A6A 1018                       		move.b	(a0)+,d0				; EXT: load upper byte of pointer
00082A6C 33FC 0000 00A1 1100        		StartZ80					; EXT: request Z80 stop off
00082A74 E148                       		lsl.w	#$08,d0					; EXT: shift upper byte up
00082A76 1001                       		move.b	d1,d0					; EXT: put lower byte with it
00082A78 2D40 0010                  		move.l	d0,$10(a6)				; EXT: store the cue address
00082A7C                            
00082A7C 422E 000E                  		clr.b	$E(a6)
00082A80 4A2E 0003                  		tst.b	3(a6)		; is music paused?
00082A84 6600 0000                  		bne.w	loc_71E50	; if yes, branch
00082A88 532E 0001                  		subq.b	#1,1(a6)
00082A8C 6600                       		bne.s	loc_71B9E
00082A8E 4EBA 0000                  		jsr	sub_7260C(pc)
00082A92                            
00082A92                            loc_71B9E:
00082A92 102E 0004                  		move.b	4(a6),d0
00082A96 6700                       		beq.s	loc_71BA8
00082A98 4EBA 0000                  		jsr	sub_72504(pc)
00082A9C                            
00082A9C                            loc_71BA8:
00082A9C 4A2E 0024                  		tst.b	$24(a6)
00082AA0 6700                       		beq.s	loc_71BB2
00082AA2 4EBA 0000                  		jsr	sub_7267C(pc)
00082AA6                            
00082AA6                            loc_71BB2:
00082AA6 4A6E 000A                  		tst.w	$A(a6)		; is music or sound being played?
00082AAA 6700                       		beq.s	loc_71BBC	; if not, branch
00082AAC 4EBA 0000                  		jsr	Sound_Play(pc)
00082AB0                            
00082AB0                            loc_71BBC:
00082AB0 0C2E 0080 0009             		cmpi.b	#$80,9(a6)
00082AB6 6700                       		beq.s	loc_71BC8
00082AB8 4EBA 0000                  		jsr	Sound_ChkValue(pc)
00082ABC                            
00082ABC                            loc_71BC8:
00082ABC 4BEE 0010                  		lea	$40-$30(a6),a5			; MJ: making correction for flow below
00082AC0 7E01                       		moveq	#2-1,d7				; MJ: set number of PCM channels to run
00082AC2 1D7C 007F 0008             		move.b	#$80-1,$08(a6)			; MJ: reset as PCM channel
00082AC8                            
00082AC8                            SD_NextPCM:
00082AC8 522E 0008                  		addq.b	#$01,$08(a6)			; MJ: advance PCM channel ID
00082ACC 4BED 0030                  		lea	$30(a5),a5			; MJ: advance to next channel
00082AD0 4A15                       		tst.b	(a5)
00082AD2 6A00                       		bpl.s	loc_71BD4
00082AD4 4EBA 0000                  		jsr	sub_71C4E(pc)
00082AD8                            
00082AD8                            loc_71BD4:
00082AD8 51CF FFEE                  		dbf	d7,SD_NextPCM			; MJ: repeat for number of PCM channels available
00082ADC 422E 0008                  		clr.b	8(a6)
00082AE0 7E05                       		moveq	#5,d7
00082AE2                            
00082AE2                            loc_71BDA:
00082AE2 DAFC 0030                  		adda.w	#$30,a5
00082AE6 4A15                       		tst.b	(a5)
00082AE8 6A00                       		bpl.s	loc_71BE6
00082AEA 4EBA 0000                  		jsr	sub_71CCA(pc)
00082AEE                            
00082AEE                            loc_71BE6:
00082AEE 51CF FFF2                  		dbf	d7,loc_71BDA
00082AF2                            
00082AF2 7E02                       		moveq	#2,d7
00082AF4                            
00082AF4                            loc_71BEC:
00082AF4 DAFC 0030                  		adda.w	#$30,a5
00082AF8 4A15                       		tst.b	(a5)
00082AFA 6A00                       		bpl.s	loc_71BF8
00082AFC 4EBA 0000                  		jsr	sub_72850(pc)
00082B00                            
00082B00                            loc_71BF8:
00082B00 51CF FFF2                  		dbf	d7,loc_71BEC
00082B04                            
00082B04 1D7C 0080 000E             		move.b	#$80,$E(a6)
00082B0A 7E02                       		moveq	#2,d7
00082B0C                            
00082B0C                            loc_71C04:
00082B0C DAFC 0030                  		adda.w	#$30,a5
00082B10 4A15                       		tst.b	(a5)
00082B12 6A00                       		bpl.s	loc_71C10
00082B14 4EBA 0000                  		jsr	sub_71CCA(pc)
00082B18                            
00082B18                            loc_71C10:
00082B18 51CF FFF2                  		dbf	d7,loc_71C04
00082B1C                            
00082B1C 7E02                       		moveq	#2,d7
00082B1E                            
00082B1E                            loc_71C16:
00082B1E DAFC 0030                  		adda.w	#$30,a5
00082B22 4A15                       		tst.b	(a5)
00082B24 6A00                       		bpl.s	loc_71C22
00082B26 4EBA 0000                  		jsr	sub_72850(pc)
00082B2A                            
00082B2A                            loc_71C22:
00082B2A 51CF FFF2                  		dbf	d7,loc_71C16
00082B2E 1D7C 0040 000E             		move.b	#$40,$E(a6)
00082B34 DAFC 0030                  		adda.w	#$30,a5
00082B38 4A15                       		tst.b	(a5)
00082B3A 6A00                       		bpl.s	loc_71C38
00082B3C 4EBA 0000                  		jsr	sub_71CCA(pc)
00082B40                            
00082B40                            loc_71C38:
00082B40 DAFC 0030                  		adda.w	#$30,a5
00082B44 4A15                       		tst.b	(a5)
00082B46 6A00                       		bpl.s	loc_71C44
00082B48 4EBA 0000                  		jsr	sub_72850(pc)
00082B4C                            
00082B4C                            loc_71C44:
00082B4C 6000                       		bra.s	YM_Access_TestWrite			; EXT: jump into the access loop
00082B4E                            
00082B4E                            YM_Access_WaitWrite:
00082B4E 33FC 0000 00A1 1100        		StartZ80					; EXT: request Z80 stop off (allow it to continue)
00082B56                            		rept	$10					; EXT: delay for a long enough time to let the Z80...
00082B56                            		nop						; EXT: '' ...finish writing the 68k pointer, so it doesn't...
00082B56 4E71 4E71 4E71 4E71 4E71+  		endr						; EXT: '' ...clash with 68k's pointer writing.
00082B76                            
00082B76                            YM_Access_TestWrite:
00082B76 41F9 00A0 02EF             		lea	($A00000+YM_Access).l,a0		; EXT: load access address in Z80
00082B7C 43EE 0013                  		lea	$13(a6),a1				; EXT: load the 68k's pointer finish location
00082B80 33FC 0100 00A1 1100 0839+  		StopZ80						; EXT: request Z80 stop on
00082B92 4A18                       		tst.b	(a0)+					; EXT: is the Z80 accessing the 68k pointer?
00082B94 66B8                       		bne.s	YM_Access_WaitWrite			; EXT: if so, branch and wait for it to finish...
00082B96 10D1                       		move.b	(a1),(a0)+				; EXT: save lower byte of pointer
00082B98 10A1                       		move.b	-(a1),(a0)				; EXT: save upper byte of pointer
00082B9A 33FC 0000 00A1 1100        		StartZ80					; EXT: request Z80 stop off
00082BA2                            
00082BA2 4E75                       		rts	
00082BA4                            
00082BA4                            ; End of function sub_71B4C
00082BA4                            
00082BA4                            
00082BA4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00082BA4                            
00082BA4                            
00082BA4                            sub_71C4E:				; XREF: sub_71B4C
00082BA4 532D 000E                  		subq.b	#1,$E(a5)
00082BA8 6600 0000                  		bne.w	locret_71CAA
00082BAC 286D 0004                  		movea.l	4(a5),a4
00082BB0                            
00082BB0                            loc_71C5E:
00082BB0 7A00                       		moveq	#0,d5
00082BB2 1A1C                       		move.b	(a4)+,d5
00082BB4 0C05 00E0                  		cmpi.b	#-$20,d5
00082BB8 6500                       		bcs.s	loc_71C6E
00082BBA 4EBA 0000                  		jsr	sub_72A5A(pc)
00082BBE 60F0                       		bra.s	loc_71C5E
00082BC0                            ; ===========================================================================
00082BC0                            
00082BC0                            loc_71C6E:
00082BC0 4A05                       		tst.b	d5
00082BC2 6A00                       		bpl.s	loc_71C84
00082BC4 1B45 0010                  		move.b	d5,$10(a5)
00082BC8 1A1C                       		move.b	(a4)+,d5
00082BCA 6A00                       		bpl.s	loc_71C84
00082BCC 534C                       		subq.w	#1,a4
00082BCE 1B6D 000F 000E             		move.b	$F(a5),$E(a5)
00082BD4 6000                       		bra.s	loc_71C88
00082BD6                            ; ===========================================================================
00082BD6                            
00082BD6                            loc_71C84:
00082BD6 4EBA 0000                  		jsr	sub_71D40(pc)
00082BDA                            
00082BDA                            loc_71C88:
00082BDA 2B4C 0004                  		move.l	a4,4(a5)
00082BDE 0815 0002                  		btst	#2,(a5)
00082BE2 6600                       		bne.s	locret_71CAA
00082BE4 7000                       		moveq	#0,d0
00082BE6 102D 0010                  		move.b	$10(a5),d0
00082BEA 0400 0080                  		subi.b	#$80,d0					; MJ: minus 80
00082BEE D040                       		add.w	d0,d0					; MJ: multiply by 4 (long-word size)
00082BF0 D040                       		add.w	d0,d0					; MJ: ''
00082BF2 48E7 00C0                  		movem.l	a0/a1,-(sp)				; MJ: store register data
00082BF6 41F9 0000 0000             		lea	(SampleList).l,a0			; MJ: load sample list
00082BFC 2070 0000                  		move.l	(a0,d0.w),a0				; MJ: load correct sample z80 pointer address
00082C00                            
00082C00 0C2E 0080 0008             		cmpi.b	#$80,$08(a6)				; MJ: is this PCM 1?
00082C06 6600                       		bne.s	WritePCM2				; MJ: if not, branch for PCM 2 writing
00082C08                            
00082C08                            	; --- Writing to PCM 1 ---
00082C08                            
00082C08 33FC 0100 00A1 1100 0839+  		StopZ80
00082C1A 43F9 00A0 02E6             		lea	($A00000+PCM1_Sample).l,a1			; MJ: load PCM 1 slot address
00082C20 12D8                       		move.b	(a0)+,(a1)+					; MJ: set address of sample
00082C22 12D8                       		move.b	(a0)+,(a1)+					; MJ: ''
00082C24 12D8                       		move.b	(a0)+,(a1)+					; MJ: ''
00082C26 13FC 0064 00A0 0047        		move.b	#(CUPCM1_NewSample&$FF),($A00000+CU_Stack).l	; MJ: set routine to run
00082C2E 13FC 0002 00A0 0048        		move.b	#(CUPCM1_NewSample>>$08),($A00000+CU_Stack+1).l	; MJ: ''
00082C36 13FC 00C9 00A0 01D2        		move.b	#%11001001,($A00000+CUPCM1_RET).l		; MJ: change "NOP" to "RET"
00082C3E 33FC 0000 00A1 1100        		StartZ80
00082C46                            
00082C46 4CDF 0300                  		movem.l	(sp)+,a0/a1				; MJ: restore register data
00082C4A                            
00082C4A                            locret_71CAA:
00082C4A 4E75                       		rts						; MJ: return
00082C4C                            
00082C4C                            	; --- Writing to PCM 2 ---
00082C4C                            
00082C4C                            WritePCM2:
00082C4C 33FC 0100 00A1 1100 0839+  		StopZ80
00082C5E 43F9 00A0 02E9             		lea	($A00000+PCM2_Sample).l,a1			; MJ: load PCM 2 slot address
00082C64 12D8                       		move.b	(a0)+,(a1)+					; MJ: ''
00082C66 12D8                       		move.b	(a0)+,(a1)+					; MJ: ''
00082C68 12D8                       		move.b	(a0)+,(a1)+					; MJ: ''
00082C6A 13FC 0028 00A0 01D3        		move.b	#%00101000,($A00000+CUPCM2_RET).l		; change "JR NZ" to "JR Z"
00082C72 33FC 0000 00A1 1100        		StartZ80
00082C7A                            
00082C7A 4CDF 0300                  		movem.l	(sp)+,a0/a1				; MJ: restore register data
00082C7E 4E75                       		rts						; MJ: return
00082C80                            
00082C80                            ; ===========================================================================
00082C80                            
00082C80                            sub_71CCA:				; XREF: sub_71B4C
00082C80 532D 000E                  		subq.b	#1,$E(a5)
00082C84 6600                       		bne.s	loc_71CE0
00082C86 0895 0004                  		bclr	#4,(a5)
00082C8A 4EBA 0000                  		jsr	sub_71CEC(pc)
00082C8E 4EBA 0000                  		jsr	sub_71E18(pc)
00082C92 6000 0000                  		bra.w	loc_726E2
00082C96                            ; ===========================================================================
00082C96                            
00082C96                            loc_71CE0:
00082C96 4EBA 0000                  		jsr	sub_71D9E(pc)
00082C9A 4EBA 0000                  		jsr	sub_71DC6(pc)
00082C9E 6000 0000                  		bra.w	loc_71E24
00082CA2                            ; End of function sub_71CCA
00082CA2                            
00082CA2                            
00082CA2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00082CA2                            
00082CA2                            
00082CA2                            sub_71CEC:				; XREF: sub_71CCA
00082CA2 286D 0004                  		movea.l	4(a5),a4
00082CA6 0895 0001                  		bclr	#1,(a5)
00082CAA                            
00082CAA                            loc_71CF4:
00082CAA 7A00                       		moveq	#0,d5
00082CAC 1A1C                       		move.b	(a4)+,d5
00082CAE 0C05 00E0                  		cmpi.b	#-$20,d5
00082CB2 6500                       		bcs.s	loc_71D04
00082CB4 4EBA 0000                  		jsr	sub_72A5A(pc)
00082CB8 60F0                       		bra.s	loc_71CF4
00082CBA                            ; ===========================================================================
00082CBA                            
00082CBA                            loc_71D04:
00082CBA 4EBA 0000                  		jsr	sub_726FE(pc)
00082CBE 4A05                       		tst.b	d5
00082CC0 6A00                       		bpl.s	loc_71D1A
00082CC2 4EBA 0000                  		jsr	sub_71D22(pc)
00082CC6 1A1C                       		move.b	(a4)+,d5
00082CC8 6A00                       		bpl.s	loc_71D1A
00082CCA 534C                       		subq.w	#1,a4
00082CCC 6000 0000                  		bra.w	sub_71D60
00082CD0                            ; ===========================================================================
00082CD0                            
00082CD0                            loc_71D1A:
00082CD0 4EBA 0000                  		jsr	sub_71D40(pc)
00082CD4 6000 0000                  		bra.w	sub_71D60
00082CD8                            ; End of function sub_71CEC
00082CD8                            
00082CD8                            
00082CD8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00082CD8                            
00082CD8                            
00082CD8                            sub_71D22:				; XREF: sub_71CEC
00082CD8 0405 0080                  		subi.b	#$80,d5
00082CDC 6700                       		beq.s	loc_71D58
00082CDE DA2D 0008                  		add.b	8(a5),d5
00082CE2 0245 007F                  		andi.w	#$7F,d5
00082CE6 E34D                       		lsl.w	#1,d5
00082CE8 41FA 0000                  		lea	word_72790(pc),a0
00082CEC 3C30 5000                  		move.w	(a0,d5.w),d6
00082CF0 3B46 0010                  		move.w	d6,$10(a5)
00082CF4 4E75                       		rts	
00082CF6                            ; End of function sub_71D22
00082CF6                            
00082CF6                            
00082CF6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00082CF6                            
00082CF6                            
00082CF6                            sub_71D40:				; XREF: sub_71C4E; sub_71CEC; sub_72878
00082CF6 1005                       		move.b	d5,d0
00082CF8 122D 0002                  		move.b	2(a5),d1
00082CFC                            
00082CFC                            loc_71D46:
00082CFC 5301                       		subq.b	#1,d1
00082CFE 6700                       		beq.s	loc_71D4E
00082D00 D005                       		add.b	d5,d0
00082D02 60F8                       		bra.s	loc_71D46
00082D04                            ; ===========================================================================
00082D04                            
00082D04                            loc_71D4E:
00082D04 1B40 000F                  		move.b	d0,$F(a5)
00082D08 1B40 000E                  		move.b	d0,$E(a5)
00082D0C 4E75                       		rts	
00082D0E                            ; End of function sub_71D40
00082D0E                            
00082D0E                            ; ===========================================================================
00082D0E                            
00082D0E                            loc_71D58:				; XREF: sub_71D22
00082D0E 08D5 0001                  		bset	#1,(a5)
00082D12 426D 0010                  		clr.w	$10(a5)
00082D16                            
00082D16                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00082D16                            
00082D16                            
00082D16                            sub_71D60:				; XREF: sub_71CEC; sub_72878; sub_728AC
00082D16 2B4C 0004                  		move.l	a4,4(a5)
00082D1A 1B6D 000F 000E             		move.b	$F(a5),$E(a5)
00082D20 0815 0004                  		btst	#4,(a5)
00082D24 6600                       		bne.s	locret_71D9C
00082D26 1B6D 0013 0012             		move.b	$13(a5),$12(a5)
00082D2C 422D 000C                  		clr.b	$C(a5)
00082D30 0815 0003                  		btst	#3,(a5)
00082D34 6700                       		beq.s	locret_71D9C
00082D36 206D 0014                  		movea.l	$14(a5),a0
00082D3A 1B58 0018                  		move.b	(a0)+,$18(a5)
00082D3E 1B58 0019                  		move.b	(a0)+,$19(a5)
00082D42 1B58 001A                  		move.b	(a0)+,$1A(a5)
00082D46 1018                       		move.b	(a0)+,d0
00082D48 E208                       		lsr.b	#1,d0
00082D4A 1B40 001B                  		move.b	d0,$1B(a5)
00082D4E 426D 001C                  		clr.w	$1C(a5)
00082D52                            
00082D52                            locret_71D9C:
00082D52 4E75                       		rts	
00082D54                            ; End of function sub_71D60
00082D54                            
00082D54                            
00082D54                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00082D54                            
00082D54                            
00082D54                            sub_71D9E:				; XREF: sub_71CCA; sub_72850
00082D54 4A2D 0012                  		tst.b	$12(a5)
00082D58 6700                       		beq.s	locret_71DC4
00082D5A 532D 0012                  		subq.b	#1,$12(a5)
00082D5E 6600                       		bne.s	locret_71DC4
00082D60 08D5 0001                  		bset	#1,(a5)
00082D64 4A2D 0001                  		tst.b	1(a5)
00082D68 6B00 0000                  		bmi.w	loc_71DBE
00082D6C 4EBA 0000                  		jsr	sub_726FE(pc)
00082D70 584F                       		addq.w	#4,sp
00082D72 4E75                       		rts	
00082D74                            ; ===========================================================================
00082D74                            
00082D74                            loc_71DBE:
00082D74 4EBA 0000                  		jsr	sub_729A0(pc)
00082D78 584F                       		addq.w	#4,sp
00082D7A                            
00082D7A                            locret_71DC4:
00082D7A 4E75                       		rts	
00082D7C                            ; End of function sub_71D9E
00082D7C                            
00082D7C                            
00082D7C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00082D7C                            
00082D7C                            
00082D7C                            sub_71DC6:				; XREF: sub_71CCA; sub_72850
00082D7C 584F                       		addq.w	#4,sp
00082D7E 0815 0003                  		btst	#3,(a5)
00082D82 6700                       		beq.s	locret_71E16
00082D84 4A2D 0018                  		tst.b	$18(a5)
00082D88 6700                       		beq.s	loc_71DDA
00082D8A 532D 0018                  		subq.b	#1,$18(a5)
00082D8E 4E75                       		rts	
00082D90                            ; ===========================================================================
00082D90                            
00082D90                            loc_71DDA:
00082D90 532D 0019                  		subq.b	#1,$19(a5)
00082D94 6700                       		beq.s	loc_71DE2
00082D96 4E75                       		rts	
00082D98                            ; ===========================================================================
00082D98                            
00082D98                            loc_71DE2:
00082D98 206D 0014                  		movea.l	$14(a5),a0
00082D9C 1B68 0001 0019             		move.b	1(a0),$19(a5)
00082DA2 4A2D 001B                  		tst.b	$1B(a5)
00082DA6 6600                       		bne.s	loc_71DFE
00082DA8 1B68 0003 001B             		move.b	3(a0),$1B(a5)
00082DAE 442D 001A                  		neg.b	$1A(a5)
00082DB2 4E75                       		rts	
00082DB4                            ; ===========================================================================
00082DB4                            
00082DB4                            loc_71DFE:
00082DB4 532D 001B                  		subq.b	#1,$1B(a5)
00082DB8 1C2D 001A                  		move.b	$1A(a5),d6
00082DBC 4886                       		ext.w	d6
00082DBE DC6D 001C                  		add.w	$1C(a5),d6
00082DC2 3B46 001C                  		move.w	d6,$1C(a5)
00082DC6 DC6D 0010                  		add.w	$10(a5),d6
00082DCA 594F                       		subq.w	#4,sp
00082DCC                            
00082DCC                            locret_71E16:
00082DCC 4E75                       		rts	
00082DCE                            ; End of function sub_71DC6
00082DCE                            
00082DCE                            
00082DCE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00082DCE                            
00082DCE                            
00082DCE                            sub_71E18:				; XREF: sub_71CCA
00082DCE 0815 0001                  		btst	#1,(a5)
00082DD2 6600                       		bne.s	locret_71E48
00082DD4 3C2D 0010                  		move.w	$10(a5),d6
00082DD8 6700                       		beq.s	loc_71E4A
00082DDA                            
00082DDA                            loc_71E24:				; XREF: sub_71CCA
00082DDA 102D 001E                  		move.b	$1E(a5),d0
00082DDE 4880                       		ext.w	d0
00082DE0 DC40                       		add.w	d0,d6
00082DE2 0815 0002                  		btst	#2,(a5)
00082DE6 6600                       		bne.s	locret_71E48
00082DE8 3206                       		move.w	d6,d1
00082DEA E049                       		lsr.w	#8,d1
00082DEC 103C 00A4                  		move.b	#-$5C,d0
00082DF0 4EBA 0000                  		jsr	sub_72722(pc)
00082DF4 1206                       		move.b	d6,d1
00082DF6 103C 00A0                  		move.b	#-$60,d0
00082DFA 4EBA 0000                  		jsr	sub_72722(pc)
00082DFE                            
00082DFE                            locret_71E48:
00082DFE 4E75                       		rts	
00082E00                            ; ===========================================================================
00082E00                            
00082E00                            loc_71E4A:
00082E00 08D5 0001                  		bset	#1,(a5)
00082E04 4E75                       		rts	
00082E06                            ; End of function sub_71E18
00082E06                            
00082E06                            ; ===========================================================================
00082E06                            
00082E06                            loc_71E50:				; XREF: sub_71B4C
00082E06 6B00                       		bmi.s	loc_71E94
00082E08 0C2E 0002 0003             		cmpi.b	#2,3(a6)
00082E0E 6700 0000                  		beq.w	loc_71EFE
00082E12 1D7C 0002 0003             		move.b	#2,3(a6)
00082E18 7602                       		moveq	#2,d3
00082E1A 103C 00B4                  		move.b	#-$4C,d0
00082E1E 7200                       		moveq	#0,d1
00082E20                            
00082E20                            loc_71E6A:
00082E20 4EBA 0000                  		jsr	sub_7272E(pc)
00082E24 4EBA 0000                  		jsr	sub_72764(pc)
00082E28 5200                       		addq.b	#1,d0
00082E2A 51CB FFF4                  		dbf	d3,loc_71E6A
00082E2E                            
00082E2E 7602                       		moveq	#2,d3
00082E30 7028                       		moveq	#$28,d0
00082E32                            
00082E32                            loc_71E7C:
00082E32 1203                       		move.b	d3,d1
00082E34 4EBA 0000                  		jsr	sub_7272E(pc)
00082E38 5801                       		addq.b	#4,d1
00082E3A 4EBA 0000                  		jsr	sub_7272E(pc)
00082E3E 51CB FFF2                  		dbf	d3,loc_71E7C
00082E42                            
00082E42 4EBA 0000                  		jsr	sub_729B6(pc)
00082E46 6000 FD04                  		bra.w	loc_71C44
00082E4A                            ; ===========================================================================
00082E4A                            
00082E4A                            loc_71E94:				; XREF: loc_71E50
00082E4A 422E 0003                  		clr.b	3(a6)
00082E4E 7630                       		moveq	#$30,d3
00082E50 4BEE 0040                  		lea	$40(a6),a5
00082E54 7807                       		moveq	#7,d4					; MJ: number of YM2612 based channels
00082E56                            
00082E56                            loc_71EA0:
00082E56 0815 0007                  		btst	#7,(a5)
00082E5A 6700                       		beq.s	loc_71EB8
00082E5C 0815 0002                  		btst	#2,(a5)
00082E60 6600                       		bne.s	loc_71EB8
00082E62 103C 00B4                  		move.b	#-$4C,d0
00082E66 122D 000A                  		move.b	$A(a5),d1
00082E6A 4EBA 0000                  		jsr	sub_72722(pc)
00082E6E                            
00082E6E                            loc_71EB8:
00082E6E DAC3                       		adda.w	d3,a5
00082E70 51CC FFE4                  		dbf	d4,loc_71EA0
00082E74                            
00082E74 4BEE 0250                  		lea	$250(a6),a5				; MJ: new SFX location
00082E78 7802                       		moveq	#2,d4
00082E7A                            
00082E7A                            loc_71EC4:
00082E7A 0815 0007                  		btst	#7,(a5)
00082E7E 6700                       		beq.s	loc_71EDC
00082E80 0815 0002                  		btst	#2,(a5)
00082E84 6600                       		bne.s	loc_71EDC
00082E86 103C 00B4                  		move.b	#-$4C,d0
00082E8A 122D 000A                  		move.b	$A(a5),d1
00082E8E 4EBA 0000                  		jsr	sub_72722(pc)
00082E92                            
00082E92                            loc_71EDC:
00082E92 DAC3                       		adda.w	d3,a5
00082E94 51CC FFE4                  		dbf	d4,loc_71EC4
00082E98                            
00082E98 4BEE 0370                  		lea	$370(a6),a5				; MJ: new SFX location
00082E9C 0815 0007                  		btst	#7,(a5)
00082EA0 6700                       		beq.s	loc_71EFE
00082EA2 0815 0002                  		btst	#2,(a5)
00082EA6 6600                       		bne.s	loc_71EFE
00082EA8 103C 00B4                  		move.b	#-$4C,d0
00082EAC 122D 000A                  		move.b	$A(a5),d1
00082EB0 4EBA 0000                  		jsr	sub_72722(pc)
00082EB4                            
00082EB4                            loc_71EFE:
00082EB4 6000 FC96                  		bra.w	loc_71C44
00082EB8                            
00082EB8                            ; ---------------------------------------------------------------------------
00082EB8                            ; Subroutine to	play a sound or	music track
00082EB8                            ; ---------------------------------------------------------------------------
00082EB8                            
00082EB8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00082EB8                            
00082EB8                            
00082EB8                            Sound_Play:				; XREF: sub_71B4C
00082EB8 2079 0008 282C             		movea.l	(Go_SoundTypes).l,a0
00082EBE 43EE 000A                  		lea	$A(a6),a1	; load music track number
00082EC2 1616                       		move.b	0(a6),d3
00082EC4 7802                       		moveq	#2,d4
00082EC6                            
00082EC6                            loc_71F12:
00082EC6 1011                       		move.b	(a1),d0		; move track number to d0
00082EC8 1200                       		move.b	d0,d1
00082ECA 4219                       		clr.b	(a1)+
00082ECC 0400 0081                  		subi.b	#$81,d0
00082ED0 6500                       		bcs.s	loc_71F3E
00082ED2 0C2E 0080 0009             		cmpi.b	#$80,9(a6)
00082ED8 6700                       		beq.s	loc_71F2C
00082EDA 1D41 000A                  		move.b	d1,$A(a6)
00082EDE 6000                       		bra.s	loc_71F3E
00082EE0                            ; ===========================================================================
00082EE0                            
00082EE0                            loc_71F2C:
00082EE0 0240 007F                  		andi.w	#$7F,d0
00082EE4 1430 0000                  		move.b	(a0,d0.w),d2
00082EE8 B403                       		cmp.b	d3,d2
00082EEA 6500                       		bcs.s	loc_71F3E
00082EEC 1602                       		move.b	d2,d3
00082EEE 1D41 0009                  		move.b	d1,9(a6)	; set music flag
00082EF2                            
00082EF2                            loc_71F3E:
00082EF2 51CC FFD2                  		dbf	d4,loc_71F12
00082EF6                            
00082EF6 4A03                       		tst.b	d3
00082EF8 6B00                       		bmi.s	locret_71F4A
00082EFA 1C83                       		move.b	d3,0(a6)
00082EFC                            
00082EFC                            locret_71F4A:
00082EFC 4E75                       		rts	
00082EFE                            ; End of function Sound_Play
00082EFE                            
00082EFE                            
00082EFE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00082EFE                            
00082EFE                            
00082EFE                            Sound_ChkValue:				; XREF: sub_71B4C
00082EFE 7E00                       		moveq	#0,d7
00082F00 1E2E 0009                  		move.b	9(a6),d7
00082F04 6700 0000                  		beq.w	Sound_E4
00082F08 6A00                       		bpl.s	locret_71F8C
00082F0A 1D7C 0080 0009             		move.b	#$80,9(a6)	; reset	music flag
00082F10 0C07 009F                  		cmpi.b	#$9F,d7
00082F14 6300 0000                  		bls.w	Sound_81to9F	; music	$81-$9F
00082F18 0C07 00A0                  		cmpi.b	#$A0,d7
00082F1C 6500 0000                  		bcs.w	locret_71F8C
00082F20 0C07 00CF                  		cmpi.b	#$CF,d7
00082F24 6300 0000                  		bls.w	Sound_A0toCF	; sound	$A0-$CF
00082F28 0C07 00D0                  		cmpi.b	#$D0,d7
00082F2C 6500 0000                  		bcs.w	locret_71F8C
00082F30 0C07 00D1                  		cmpi.b	#$D1,d7
00082F34 6500 0000                  		bcs.w	Sound_D0toDF	; sound	$D0-$DF
00082F38 0C07 00DF                  		cmpi.b	#$DF,d7
00082F3C 6500 0000                  		blo.w	Sound_D1toDF	; sound	$D1-$DF
00082F40 0C07 00E4                  		cmpi.b	#$E4,d7
00082F44 6300                       		bls.s	Sound_E0toE4	; sound	$E0-$E4
00082F46                            
00082F46                            locret_71F8C:
00082F46 4E75                       		rts	
00082F48                            ; ===========================================================================
00082F48                            
00082F48                            Sound_E0toE4:				; XREF: Sound_ChkValue
00082F48 0407 00E0                  		subi.b	#$E0,d7
00082F4C E54F                       		lsl.w	#2,d7
00082F4E 4EFB 7000                  		jmp	Sound_ExIndex(pc,d7.w)
00082F52                            ; ===========================================================================
00082F52                            
00082F52                            Sound_ExIndex:
00082F52 6000 0000                  		bra.w	Sound_E0
00082F56                            ; ===========================================================================
00082F56 6000 0000                  		bra.w	Sound_E1
00082F5A                            ; ===========================================================================
00082F5A 6000 0000                  		bra.w	Sound_E2
00082F5E                            ; ===========================================================================
00082F5E 6000 0000                  		bra.w	Sound_E3
00082F62                            ; ===========================================================================
00082F62 6000 0000                  		bra.w	Sound_E4
00082F66                            ; ===========================================================================
00082F66                            ; ---------------------------------------------------------------------------
00082F66                            ; Play "Say-gaa" PCM sound
00082F66                            ; ---------------------------------------------------------------------------
00082F66                            
00082F66                            Sound_E1:
00082F66 33FC 0100 00A1 1100 0839+  		StopZ80						; MJ: request Z80 stop "ON"
00082F78 45F9 0000 0000             		lea	(SegaPCM).l,a2				; MJ: load sample address
00082F7E 47F9 00A0 4000             		lea	($A04000).l,a3				; MJ: load YM2612 port
00082F84 16FC 002A                  		move.b	#$2A,(a3)+				; MJ: set YM2612 address to the PCM data port
00082F88 283C 0000 0000             		move.l	#(SegaPCM_End-SegaPCM)-$01,d4		; MJ: prepare size
00082F8E 3604                       		move.w	d4,d3					; MJ: get lower word size
00082F90 4844                       		swap	d4					; MJ: get upper word size
00082F92                            
00082F92                            PlayPCM_Loop:
00082F92 169A                       		move.b	(a2)+,(a3)				; MJ: save sample data to port
00082F94 702B                       		moveq	#$2B,d0					; MJ: set delay time
00082F96 51C8 FFFE                  		dbf	d0,*					; MJ: delay...
00082F9A 51CB FFF6                  		dbf	d3,PlayPCM_Loop				; MJ: repeat til done
00082F9E 51CC FFF2                  		dbf	d4,PlayPCM_Loop				; MJ: ''
00082FA2 16BC 0080                  		move.b	#$80,(a3)				; MJ: save mute data to port
00082FA6 584F                       		addq.w	#$04,sp					; MJ: skip return address
00082FA8 534B                       		subq.w	#$01,a3					; MJ: move back to address port
00082FAA 4A13                       		tst.b	(a3)					; MJ: is the YM2612 busy?
00082FAC 6BFC                       		bmi.s	*-$02					; MJ: if so, branch and recheck
00082FAE 16BC 002A                  		move.b	#$2A,(a3)				; MJ: write address (set it back to DAC port for the Z80)
00082FB2 33FC 0000 00A1 1100        		StartZ80					; MJ: request Z80 stop "OFF"
00082FBA 4E75                       		rts						; MJ: return
00082FBC                            
00082FBC                            ; ===========================================================================
00082FBC                            ; ---------------------------------------------------------------------------
00082FBC                            ; Play music track $81-$9F
00082FBC                            ; ---------------------------------------------------------------------------
00082FBC                            
00082FBC                            Sound_81to9F:				; XREF: Sound_ChkValue
00082FBC                            
00082FBC                            
00082FBC 33FC 0100 00A1 1100 0839+  		StopZ80
00082FCE 41F9 0000 0000             		lea	(StopSample).l,a0				; MJ: load stop sample address
00082FD4 43F9 00A0 02E6             		lea	($A00000+PCM1_Sample).l,a1			; MJ: load PCM 1 slot address
00082FDA 12D8                       		move.b	(a0)+,(a1)+					; MJ: set address of sample
00082FDC 12D8                       		move.b	(a0)+,(a1)+					; MJ: ''
00082FDE 12D8                       		move.b	(a0)+,(a1)+					; MJ: ''
00082FE0 13FC 0064 00A0 0047        		move.b	#(CUPCM1_NewSample&$FF),($A00000+CU_Stack).l	; MJ: set routine to run
00082FE8 13FC 0002 00A0 0048        		move.b	#(CUPCM1_NewSample>>$08),($A00000+CU_Stack+1).l	; MJ: ''
00082FF0 13FC 00C9 00A0 01D2        		move.b	#%11001001,($A00000+CUPCM1_RET).l		; MJ: change "NOP" to "RET"
00082FF8 41F9 0000 0000             		lea	(StopSample).l,a0				; MJ: load stop sample address
00082FFE 43F9 00A0 02E9             		lea	($A00000+PCM2_Sample).l,a1			; MJ: load PCM 2 slot address
00083004 12D8                       		move.b	(a0)+,(a1)+					; MJ: ''
00083006 12D8                       		move.b	(a0)+,(a1)+					; MJ: ''
00083008 12D8                       		move.b	(a0)+,(a1)+					; MJ: ''
0008300A 13FC 0028 00A0 01D3        		move.b	#%00101000,($A00000+CUPCM2_RET).l		; MJ: change "JR NZ" to "JR Z"
00083012 33FC 0000 00A1 1100        		StartZ80
0008301A                            
0008301A                            
0008301A                            
0008301A 0C07 0088                  		cmpi.b	#$88,d7		; is "extra life" music	played?
0008301E 6600                       		bne.s	loc_72024	; if not, branch
00083020 4A2E 0027                  		tst.b	$27(a6)
00083024 6600 0000                  		bne.w	loc_721B6
00083028 4BEE 0040                  		lea	$40(a6),a5
0008302C 700A                       		moveq	#10,d0					; MJ: number of channels in total
0008302E                            
0008302E                            loc_71FE6:
0008302E 0895 0002                  		bclr	#2,(a5)
00083032 DAFC 0030                  		adda.w	#$30,a5
00083036 51C8 FFF6                  		dbf	d0,loc_71FE6
0008303A                            
0008303A 4BEE 0250                  		lea	$250(a6),a5				; MJ: new SFX location
0008303E 7005                       		moveq	#5,d0
00083040                            
00083040                            loc_71FF8:
00083040 0895 0007                  		bclr	#7,(a5)
00083044 DAFC 0030                  		adda.w	#$30,a5
00083048 51C8 FFF6                  		dbf	d0,loc_71FF8
0008304C 4216                       		clr.b	0(a6)
0008304E 204E                       		movea.l	a6,a0
00083050 43EE 03D0                  		lea	$3D0(a6),a1				; MJ: new SFX location
00083054 303C 0087                  		move.w	#$87,d0
00083058                            
00083058                            loc_72012:
00083058 22D8                       		move.l	(a0)+,(a1)+
0008305A 51C8 FFFC                  		dbf	d0,loc_72012
0008305E                            
0008305E 1D7C 0080 0027             		move.b	#$80,$27(a6)
00083064 4216                       		clr.b	0(a6)
00083066 6000                       		bra.s	loc_7202C
00083068                            ; ===========================================================================
00083068                            
00083068                            loc_72024:
00083068 422E 0027                  		clr.b	$27(a6)
0008306C 422E 0026                  		clr.b	$26(a6)
00083070                            
00083070                            loc_7202C:
00083070 4EBA 0000                  		jsr	sub_725CA(pc)
00083074 2879 0008 283C             		movea.l	(off_719A0).l,a4
0008307A 0407 0081                  		subi.b	#$81,d7
0008307E 1D74 7000 0029             		move.b	(a4,d7.w),$29(a6)
00083084 2879 0008 2834             		movea.l	(Go_MusicIndex).l,a4
0008308A E54F                       		lsl.w	#2,d7
0008308C 2874 7000                  		movea.l	(a4,d7.w),a4
00083090 7000                       		moveq	#0,d0
00083092 3014                       		move.w	(a4),d0
00083094 D08C                       		add.l	a4,d0
00083096 2D40 0018                  		move.l	d0,$18(a6)
0008309A 102C 0005                  		move.b	5(a4),d0
0008309E 1D40 0028                  		move.b	d0,$28(a6)
000830A2 4A2E 002A                  		tst.b	$2A(a6)
000830A6 6700                       		beq.s	loc_72068
000830A8 102E 0029                  		move.b	$29(a6),d0
000830AC                            
000830AC                            loc_72068:
000830AC 1D40 0002                  		move.b	d0,2(a6)
000830B0 1D40 0001                  		move.b	d0,1(a6)
000830B4 7200                       		moveq	#0,d1
000830B6 264C                       		movea.l	a4,a3
000830B8 5C4C                       		addq.w	#6,a4
000830BA 7E00                       		moveq	#0,d7
000830BC 1E2B 0002                  		move.b	2(a3),d7
000830C0 6700 0000                  		beq.w	loc_72114
000830C4 5307                       		subq.b	#1,d7
000830C6 123C 00C0                  		move.b	#-$40,d1
000830CA 182B 0004                  		move.b	4(a3),d4
000830CE 7C30                       		moveq	#$30,d6
000830D0 1A3C 0001                  		move.b	#1,d5
000830D4 43EE 0040                  		lea	$40(a6),a1
000830D8 45FA 0000                  		lea	byte_721BA(pc),a2
000830DC                            
000830DC                            loc_72098:
000830DC 08D1 0007                  		bset	#7,(a1)
000830E0 135A 0001                  		move.b	(a2)+,1(a1)
000830E4 1344 0002                  		move.b	d4,2(a1)
000830E8 1346 000D                  		move.b	d6,$D(a1)
000830EC 1341 000A                  		move.b	d1,$A(a1)
000830F0 1345 000E                  		move.b	d5,$E(a1)
000830F4 7000                       		moveq	#0,d0
000830F6 3340 0010                  		move.w	d0,$10(a1)				; MJ: clear FM's frequency (ensures no frequency writing)
000830FA 301C                       		move.w	(a4)+,d0
000830FC D08B                       		add.l	a3,d0
000830FE 2340 0004                  		move.l	d0,4(a1)
00083102 335C 0008                  		move.w	(a4)+,8(a1)
00083106 D2C6                       		adda.w	d6,a1
00083108 51CF FFD2                  		dbf	d7,loc_72098
0008310C 702B                       		moveq	#$2B,d0					; MJ: set YM2612 address to DAC/FM6 switch
0008310E 123C 0080                  		move.b	#%10000000,d1				; MJ: set to turn DAC on
00083112 0C2B 0008 0002             		cmpi.b	#8,2(a3)				; MJ: changed to 8 (8 = 6FM channels, no DAC)
00083118 6600                       		bne.s	loc_720D8
0008311A                            	;	moveq	#$2B,d0					; MJ: removed...
0008311A 7200                       		moveq	#0,d1
0008311C 4EBA 0000                  		jsr	sub_7272E(pc)
00083120 6000 0000                  		bra.w	loc_72114
00083124                            ; ===========================================================================
00083124                            
00083124                            loc_720D8:
00083124 4EBA 0000                  		jsr	sub_7272E(pc)				; MJ: added... (turn DAC on)
00083128 7028                       		moveq	#$28,d0
0008312A 7206                       		moveq	#6,d1
0008312C 4EBA 0000                  		jsr	sub_7272E(pc)
00083130 103C 0042                  		move.b	#$42,d0
00083134 727F                       		moveq	#$7F,d1
00083136 4EBA 0000                  		jsr	sub_72764(pc)
0008313A 103C 004A                  		move.b	#$4A,d0
0008313E 727F                       		moveq	#$7F,d1
00083140 4EBA 0000                  		jsr	sub_72764(pc)
00083144 103C 0046                  		move.b	#$46,d0
00083148 727F                       		moveq	#$7F,d1
0008314A 4EBA 0000                  		jsr	sub_72764(pc)
0008314E 103C 004E                  		move.b	#$4E,d0
00083152 727F                       		moveq	#$7F,d1
00083154 4EBA 0000                  		jsr	sub_72764(pc)
00083158 103C 00B6                  		move.b	#-$4A,d0
0008315C 123C 00C0                  		move.b	#-$40,d1
00083160 4EBA 0000                  		jsr	sub_72764(pc)
00083164                            
00083164                            loc_72114:
00083164 7A02                       		moveq	#$02,d5					; EXT: set PSG to delay for 1 extra frame (This is to match the PSG with the FM/DAC which is delayed a frame by the Z80)
00083166 7E00                       		moveq	#0,d7
00083168 1E2B 0003                  		move.b	3(a3),d7
0008316C 6700                       		beq.s	loc_72154
0008316E 5307                       		subq.b	#1,d7
00083170 43EE 01C0                  		lea	$1C0(a6),a1				; MJ: new BGM/SFX location
00083174 45FA 0000                  		lea	byte_721C2(pc),a2
00083178                            
00083178                            loc_72126:
00083178 08D1 0007                  		bset	#7,(a1)
0008317C 135A 0001                  		move.b	(a2)+,1(a1)
00083180 1344 0002                  		move.b	d4,2(a1)
00083184 1346 000D                  		move.b	d6,$D(a1)
00083188 1345 000E                  		move.b	d5,$E(a1)
0008318C 337C FFFF 0010             		move.w	#$FFFF,$10(a1)				; MJ: clear PSG's frequency (ensures no frequency writing)
00083192 137C 0001 0012             		move.b	#$01,$12(a1)				; MJ: set key release rate to 1
00083198 7000                       		moveq	#0,d0
0008319A 301C                       		move.w	(a4)+,d0
0008319C D08B                       		add.l	a3,d0
0008319E 2340 0004                  		move.l	d0,4(a1)
000831A2 335C 0008                  		move.w	(a4)+,8(a1)
000831A6 101C                       		move.b	(a4)+,d0
000831A8 135C 000B                  		move.b	(a4)+,$B(a1)
000831AC D2C6                       		adda.w	d6,a1
000831AE 51CF FFC8                  		dbf	d7,loc_72126
000831B2                            
000831B2                            loc_72154:
000831B2 43EE 0250                  		lea	$250(a6),a1				; MJ: new SFX location
000831B6 7E05                       		moveq	#5,d7
000831B8                            
000831B8                            loc_7215A:
000831B8 4A11                       		tst.b	(a1)
000831BA 6A00 0000                  		bpl.w	loc_7217C
000831BE 7000                       		moveq	#0,d0
000831C0 1029 0001                  		move.b	1(a1),d0
000831C4 6B00                       		bmi.s	loc_7216E
000831C6 5500                       		subq.b	#2,d0
000831C8 E508                       		lsl.b	#2,d0
000831CA 6000                       		bra.s	loc_72170
000831CC                            ; ===========================================================================
000831CC                            
000831CC                            loc_7216E:
000831CC E608                       		lsr.b	#3,d0
000831CE                            
000831CE                            loc_72170:
000831CE 41FA 0000                  		lea	dword_722CC(pc),a0
000831D2 2070 0000                  		movea.l	(a0,d0.w),a0
000831D6 08D0 0002                  		bset	#2,(a0)
000831DA                            
000831DA                            loc_7217C:
000831DA D2C6                       		adda.w	d6,a1
000831DC 51CF FFDA                  		dbf	d7,loc_7215A
000831E0                            
000831E0 4A6E 0370                  		tst.w	$370(a6)				; MJ: new SFX location
000831E4 6A00                       		bpl.s	loc_7218E
000831E6 08EE 0002 0130             		bset	#2,$130(a6)				; MJ: new BGM location
000831EC                            
000831EC                            loc_7218E:
000831EC 4A6E 03A0                  		tst.w	$3A0(a6)				; MJ: new SFX location
000831F0 6A00                       		bpl.s	loc_7219A
000831F2 08EE 0002 0220             		bset	#2,$220(a6)				; MJ: new BGM location
000831F8                            
000831F8                            
000831F8                            loc_7219A:
000831F8 4BEE 00A0                  		lea	$A0(a6),a5				; MJ: new FM location
000831FC 7805                       		moveq	#5,d4
000831FE                            
000831FE                            loc_721A0:
000831FE 4EBA 0000                  		jsr	sub_726FE(pc)
00083202 DAC6                       		adda.w	d6,a5
00083204 51CC FFF8                  		dbf	d4,loc_721A0
00083208 7802                       		moveq	#2,d4
0008320A                            
0008320A                            loc_721AC:
0008320A 4EBA 0000                  		jsr	sub_729A0(pc)
0008320E DAC6                       		adda.w	d6,a5
00083210 51CC FFF8                  		dbf	d4,loc_721AC
00083214                            
00083214                            loc_721B6:
00083214 584F                       		addq.w	#4,sp
00083216 4E75                       		rts	
00083218                            ; ===========================================================================
00083218 0606 0001 0204 0506 00     byte_721BA:	dc.b 6,	6, 0, 1, 2, 4, 5, 6, 0			; MJ: extra 6 (for PCM 2)
00083222 00                         		even
00083222 80A0 C000                  byte_721C2:	dc.b $80, $A0, $C0, 0
00083226                            		even
00083226                            ; ===========================================================================
00083226                            ; ---------------------------------------------------------------------------
00083226                            ; Play normal sound effect
00083226                            ; ---------------------------------------------------------------------------
00083226                            
00083226                            Sound_D1toDF:
00083226 4A2E 0027                  		tst.b	$27(a6)
0008322A 6600 0000                  		bne.w	loc_722C6
0008322E 4A2E 0004                  		tst.b	4(a6)
00083232 6600 0000                  		bne.w	loc_722C6
00083236 4A2E 0024                  		tst.b	$24(a6)
0008323A 6600 0000                  		bne.w	loc_722C6
0008323E 4238 C900                  		clr.b	($FFFFC900).w
00083242 0C07 00D1                  		cmp.b	#$D1,d7		; is this the Spin Dash sound?
00083246 6600                       		bne.s	@cont3	; if not, branch
00083248 3F00                       		move.w	d0,-(sp)
0008324A 1038 C902                  		move.b	($FFFFC902).w,d0	; store extra frequency
0008324E 4A38 C901                  		tst.b	($FFFFC901).w	; is the Spin Dash timer active?
00083252 6600                       		bne.s	@cont1		; if it is, branch
00083254 103C 00FF                  		move.b	#-1,d0		; otherwise, reset frequency (becomes 0 on next line)
00083258                            		
00083258                            @cont1:
00083258 5200                       		addq.b	#1,d0
0008325A 0C00 000C                  		cmp.b	#$C,d0		; has the limit been reached?
0008325E 6400                       		bcc.s	@cont2		; if it has, branch
00083260 11C0 C902                  		move.b	d0,($FFFFC902).w	; otherwise, set new frequency
00083264                            		
00083264                            @cont2:
00083264 11FC 0001 C900             		move.b	#1,($FFFFC900).w	; set flag
0008326A 11FC 003C C901             		move.b	#60,($FFFFC901).w	; set timer
00083270 301F                       		move.w	(sp)+,d0
00083272                            		
00083272                            @cont3:
00083272 2079 0008 2838             		movea.l	(Go_SoundIndex).l,a0
00083278 0407 00A1                  		sub.b	#$A1,d7
0008327C 6000 0000                  		bra	SoundEffects_Common
00083280                            
00083280                            Sound_A0toCF:				; XREF: Sound_ChkValue
00083280 4A2E 0027                  		tst.b	$27(a6)
00083284 6600 0000                  		bne.w	loc_722C6
00083288 4A2E 0004                  		tst.b	4(a6)
0008328C 6600 0000                  		bne.w	loc_722C6
00083290 4A2E 0024                  		tst.b	$24(a6)
00083294 6600 0000                  		bne.w	loc_722C6
00083298 4238 C900                  		clr.b	($FFFFC900).w		
0008329C 0C07 00B5                  		cmpi.b	#$B5,d7		; is ring sound	effect played?
000832A0 6600                       		bne.s	Sound_notB5	; if not, branch
000832A2 4A2E 002B                  		tst.b	$2B(a6)
000832A6 6600                       		bne.s	loc_721EE
000832A8 1E3C 00CE                  		move.b	#$CE,d7		; play ring sound in left speaker
000832AC                            
000832AC                            loc_721EE:
000832AC 086E 0000 002B             		bchg	#0,$2B(a6)	; change speaker
000832B2                            
000832B2                            Sound_notB5:
000832B2 0C07 00A7                  		cmpi.b	#$A7,d7		; is "pushing" sound played?
000832B6 6600                       		bne.s	Sound_notA7	; if not, branch
000832B8 4A2E 002C                  		tst.b	$2C(a6)
000832BC 6600 0000                  		bne.w	locret_722C4
000832C0 1D7C 0080 002C             		move.b	#$80,$2C(a6)
000832C6                            
000832C6                            Sound_notA7:
000832C6 2079 0008 2838             		movea.l	(Go_SoundIndex).l,a0
000832CC 0407 00A0                  		subi.b	#$A0,d7
000832D0                            SoundEffects_Common:
000832D0 E54F                       		lsl.w	#2,d7
000832D2 2670 7000                  		movea.l	(a0,d7.w),a3
000832D6 224B                       		movea.l	a3,a1
000832D8 7200                       		moveq	#0,d1
000832DA 3219                       		move.w	(a1)+,d1
000832DC D28B                       		add.l	a3,d1
000832DE 1A19                       		move.b	(a1)+,d5
000832E0 1E19                       		move.b	(a1)+,d7
000832E2 5307                       		subq.b	#1,d7
000832E4 7C30                       		moveq	#$30,d6
000832E6                            
000832E6                            loc_72228:
000832E6 7600                       		moveq	#0,d3
000832E8 1629 0001                  		move.b	1(a1),d3
000832EC 7402                       		moveq	#$02,d2					; EXT: set PSG to delay for 1 extra frame (This is to match the PSG with the FM/DAC which is delayed a frame by the Z80)
000832EE 1803                       		move.b	d3,d4
000832F0 6B00                       		bmi.s	loc_72244
000832F2 143C 0001                  		move.b	#$01,d2					; EXT: set DAC/FM to delay for 0 frames like normal (these have an auto delay of 1 frame in the Z80)
000832F6 5543                       		subq.w	#2,d3
000832F8 E54B                       		lsl.w	#2,d3
000832FA 4BFA 0000                  		lea	dword_722CC(pc),a5
000832FE 2A75 3000                  		movea.l	(a5,d3.w),a5
00083302 08D5 0002                  		bset	#2,(a5)
00083306 6000                       		bra.s	loc_7226E
00083308                            		
00083308                            ; ===========================================================================
00083308                            
00083308                            loc_72244:
00083308 E64B                       		lsr.w	#3,d3
0008330A 4BFA 0000                  		lea	dword_722CC(pc),a5
0008330E 2A75 3000                  		movea.l	(a5,d3.w),a5
00083312 08D5 0002                  		bset	#2,(a5)
00083316 0C04 00C0                  		cmpi.b	#$C0,d4
0008331A 6600                       		bne.s	loc_7226E
0008331C 1004                       		move.b	d4,d0
0008331E 0000 001F                  		ori.b	#$1F,d0
00083322 13C0 00C0 0011             		move.b	d0,($C00011).l
00083328 0840 0005                  		bchg	#5,d0
0008332C 13C0 00C0 0011             		move.b	d0,($C00011).l
00083332                            
00083332                            loc_7226E:
00083332 4BFA 0000                  		lea	dword_722EC(pc),a5
00083336 2A75 3000                  		movea.l	(a5,d3.w),a5
0008333A 244D                       		movea.l	a5,a2
0008333C 700B                       		moveq	#$B,d0
0008333E                            
0008333E                            loc_72276:
0008333E 429A                       		clr.l	(a2)+
00083340 51C8 FFFC                  		dbf	d0,loc_72276
00083344                            
00083344 3A99                       		move.w	(a1)+,(a5)
00083346 1B45 0002                  		move.b	d5,2(a5)
0008334A 7000                       		moveq	#0,d0
0008334C 3019                       		move.w	(a1)+,d0
0008334E D08B                       		add.l	a3,d0
00083350 2B40 0004                  		move.l	d0,4(a5)
00083354 3B59 0008                  		move.w	(a1)+,8(a5)
00083358 4A38 C900                  		tst.b	($FFFFC900).w	; is the Spin Dash sound playing?
0008335C 6700                       		beq.s	@cont		; if not, branch
0008335E 3F00                       		move.w	d0,-(sp)
00083360 1038 C902                  		move.b	($FFFFC902).w,d0
00083364 D12D 0008                  		add.b	d0,8(a5)
00083368 301F                       		move.w	(sp)+,d0
0008336A                            		
0008336A                            @cont:
0008336A 1B42 000E                  		move.b	d2,$E(a5)				; EXT: moving d2 contents (1 for FM/4 for PSG)
0008336E 1B46 000D                  		move.b	d6,$D(a5)
00083372 4A04                       		tst.b	d4
00083374 6B00                       		bmi.s	loc_722A8
00083376 1B7C 00C0 000A             		move.b	#$C0,$A(a5)
0008337C 2B41 0020                  		move.l	d1,$20(a5)
00083380                            
00083380                            loc_722A8:
00083380 51CF FF64                  		dbf	d7,loc_72228
00083384                            
00083384 4A2E 0280                  		tst.b	$280(a6)				; MJ: new SFX location
00083388 6A00                       		bpl.s	loc_722B8
0008338A 08EE 0002 0370             		bset	#2,$370(a6)				; MJ: new SFX location
00083390                            
00083390                            loc_722B8:
00083390 4A2E 0340                  		tst.b	$340(a6)				; MJ: new SFX location
00083394 6A00                       		bpl.s	locret_722C4
00083396 08EE 0002 03A0             		bset	#2,$3A0(a6)				; MJ: new SFX location
0008339C                            
0008339C                            locret_722C4:
0008339C 4E75                       		rts	
0008339E                            ; ===========================================================================
0008339E                            
0008339E                            loc_722C6:
0008339E 4216                       		clr.b	0(a6)
000833A0 4E75                       		rts	
000833A2                            ; ===========================================================================
000833A2 00FF F100                  dword_722CC:	dc.l $FFF0D0+$30				; MJ: new locations (see all +$30)
000833A6 0000 0000                  		dc.l 0
000833AA 00FF F130                  		dc.l $FFF100+$30
000833AE 00FF F160                  		dc.l $FFF130+$30
000833B2 00FF F1C0                  		dc.l $FFF190+$30
000833B6 00FF F1F0                  		dc.l $FFF1C0+$30
000833BA 00FF F220                  		dc.l $FFF1F0+$30
000833BE 00FF F220                  		dc.l $FFF1F0+$30
000833C2 00FF F250                  dword_722EC:	dc.l $FFF220+$30
000833C6 0000 0000                  		dc.l 0
000833CA 00FF F280                  		dc.l $FFF250+$30
000833CE 00FF F2B0                  		dc.l $FFF280+$30
000833D2 00FF F2E0                  		dc.l $FFF2B0+$30
000833D6 00FF F310                  		dc.l $FFF2E0+$30
000833DA 00FF F340                  		dc.l $FFF310+$30
000833DE 00FF F340                  		dc.l $FFF310+$30
000833E2                            ; ===========================================================================
000833E2                            ; ---------------------------------------------------------------------------
000833E2                            ; Play GHZ waterfall sound
000833E2                            ; ---------------------------------------------------------------------------
000833E2                            
000833E2                            Sound_D0toDF:				; XREF: Sound_ChkValue
000833E2 4A2E 0027                  		tst.b	$27(a6)
000833E6 6600 0000                  		bne.w	locret_723C6
000833EA 4A2E 0004                  		tst.b	4(a6)
000833EE 6600 0000                  		bne.w	locret_723C6
000833F2 4A2E 0024                  		tst.b	$24(a6)
000833F6 6600 0000                  		bne.w	locret_723C6
000833FA 2079 0008 2830             		movea.l	(Go_SoundD0).l,a0
00083400 0407 00D0                  		subi.b	#$D0,d7
00083404 E54F                       		lsl.w	#2,d7
00083406 2670 7000                  		movea.l	(a0,d7.w),a3
0008340A 224B                       		movea.l	a3,a1
0008340C 7000                       		moveq	#0,d0
0008340E 3019                       		move.w	(a1)+,d0
00083410 D08B                       		add.l	a3,d0
00083412 2D40 0020                  		move.l	d0,$20(a6)
00083416 1A19                       		move.b	(a1)+,d5
00083418 1E19                       		move.b	(a1)+,d7
0008341A 5307                       		subq.b	#1,d7
0008341C 7C30                       		moveq	#$30,d6
0008341E                            
0008341E                            loc_72348:
0008341E 1829 0001                  		move.b	1(a1),d4
00083422 6B00                       		bmi.s	loc_7235A
00083424 08EE 0002 0130             		bset	#2,$130(a6)				; MJ: new BGM location
0008342A 4BEE 0370                  		lea	$370(a6),a5				; MJ: new SFX location
0008342E 6000                       		bra.s	loc_72364
00083430                            ; ===========================================================================
00083430                            
00083430                            loc_7235A:
00083430 08EE 0002 0220             		bset	#2,$220(a6)				; MJ: new BGM location
00083436 4BEE 03A0                  		lea	$3A0(a6),a5				; MJ: new SFX location
0008343A                            
0008343A                            loc_72364:
0008343A 244D                       		movea.l	a5,a2
0008343C 700B                       		moveq	#$B,d0
0008343E                            
0008343E                            loc_72368:
0008343E 429A                       		clr.l	(a2)+
00083440 51C8 FFFC                  		dbf	d0,loc_72368
00083444                            
00083444 3A99                       		move.w	(a1)+,(a5)
00083446 1B45 0002                  		move.b	d5,2(a5)
0008344A 7000                       		moveq	#0,d0
0008344C 3019                       		move.w	(a1)+,d0
0008344E D08B                       		add.l	a3,d0
00083450 2B40 0004                  		move.l	d0,4(a5)
00083454 3B59 0008                  		move.w	(a1)+,8(a5)
00083458 1B7C 0001 000E             		move.b	#1,$E(a5)
0008345E 1B46 000D                  		move.b	d6,$D(a5)
00083462 4A04                       		tst.b	d4
00083464 6B00                       		bmi.s	loc_72396
00083466 1B7C 00C0 000A             		move.b	#$C0,$A(a5)
0008346C                            
0008346C                            loc_72396:
0008346C 51CF FFB0                  		dbf	d7,loc_72348
00083470                            
00083470 4A2E 0280                  		tst.b	$280(a6)				; MJ: new SFX location
00083474 6A00                       		bpl.s	loc_723A6
00083476 08EE 0002 0370             		bset	#2,$370(a6)				; MJ: new SFX location
0008347C                            
0008347C                            loc_723A6:
0008347C 4A2E 0340                  		tst.b	$340(a6)				; MJ: new SFX location
00083480 6A00                       		bpl.s	locret_723C6
00083482 08EE 0002 03A0             		bset	#2,$3A0(a6)				; MJ: new SFX location
00083488 0004 001F                  		ori.b	#$1F,d4
0008348C 13C4 00C0 0011             		move.b	d4,($C00011).l
00083492 0844 0005                  		bchg	#5,d4
00083496 13C4 00C0 0011             		move.b	d4,($C00011).l
0008349C                            
0008349C                            locret_723C6:
0008349C 4E75                       		rts	
0008349E                            ; End of function Sound_ChkValue
0008349E                            
0008349E                            ; ===========================================================================
0008349E 00FF F130                  		dc.l $FFF100+$30				; MJ: new channel locations (see +$30)
000834A2 00FF F220                  		dc.l $FFF1F0+$30
000834A6 00FF F280                  		dc.l $FFF250+$30
000834AA 00FF F340                  		dc.l $FFF310+$30
000834AE 00FF F370                  		dc.l $FFF340+$30
000834B2 00FF F3A0                  		dc.l $FFF370+$30
000834B6                            
000834B6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000834B6                            
000834B6                            
000834B6                            Snd_FadeOut1:				; XREF: Sound_E0
000834B6 4216                       		clr.b	0(a6)
000834B8 4BEE 0250                  		lea	$250(a6),a5				; MJ: new SFX location
000834BC 7E05                       		moveq	#5,d7
000834BE                            
000834BE                            loc_723EA:
000834BE 4A15                       		tst.b	(a5)
000834C0 6A00 0000                  		bpl.w	loc_72472
000834C4 0895 0007                  		bclr	#7,(a5)
000834C8 7600                       		moveq	#0,d3
000834CA 162D 0001                  		move.b	1(a5),d3
000834CE 6B00                       		bmi.s	loc_7243C
000834D0 4EBA 0000                  		jsr	sub_726FE(pc)
000834D4 0C03 0004                  		cmpi.b	#4,d3
000834D8 6600                       		bne.s	loc_72416
000834DA 4A2E 0370                  		tst.b	$370(a6)				; MJ: new SFX location
000834DE 6A00                       		bpl.s	loc_72416
000834E0 4BEE 0370                  		lea	$370(a6),a5				; MJ: new SFX location
000834E4 226E 0020                  		movea.l	$20(a6),a1
000834E8 6000                       		bra.s	loc_72428
000834EA                            ; ===========================================================================
000834EA                            
000834EA                            loc_72416:
000834EA 5503                       		subq.b	#2,d3
000834EC E50B                       		lsl.b	#2,d3
000834EE 41FA FEB2                  		lea	dword_722CC(pc),a0
000834F2 264D                       		movea.l	a5,a3
000834F4 2A70 3000                  		movea.l	(a0,d3.w),a5
000834F8 226E 0018                  		movea.l	$18(a6),a1
000834FC                            
000834FC                            loc_72428:
000834FC 0895 0002                  		bclr	#2,(a5)
00083500 08D5 0001                  		bset	#1,(a5)
00083504 102D 000B                  		move.b	$B(a5),d0
00083508 4EBA 0000                  		jsr	sub_72C4E(pc)
0008350C 2A4B                       		movea.l	a3,a5
0008350E 6000                       		bra.s	loc_72472
00083510                            ; ===========================================================================
00083510                            
00083510                            loc_7243C:
00083510 4EBA 0000                  		jsr	sub_729A0(pc)
00083514 41EE 03A0                  		lea	$3A0(a6),a0				; MJ: new SFX location
00083518 0C03 00E0                  		cmpi.b	#$E0,d3
0008351C 6700                       		beq.s	loc_7245A
0008351E 0C03 00C0                  		cmpi.b	#$C0,d3
00083522 6700                       		beq.s	loc_7245A
00083524 E60B                       		lsr.b	#3,d3
00083526 41FA FE7A                  		lea	dword_722CC(pc),a0
0008352A 2070 3000                  		movea.l	(a0,d3.w),a0
0008352E                            
0008352E                            loc_7245A:
0008352E 0890 0002                  		bclr	#2,(a0)
00083532 08D0 0001                  		bset	#1,(a0)
00083536 0C28 00E0 0001             		cmpi.b	#$E0,1(a0)
0008353C 6600                       		bne.s	loc_72472
0008353E 13E8 001F 00C0 0011        		move.b	$1F(a0),($C00011).l
00083546                            
00083546                            loc_72472:
00083546 DAFC 0030                  		adda.w	#$30,a5
0008354A 51CF FF72                  		dbf	d7,loc_723EA
0008354E                            
0008354E 4E75                       		rts	
00083550                            ; End of function Snd_FadeOut1
00083550                            
00083550                            
00083550                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00083550                            
00083550                            
00083550                            Snd_FadeOut2:				; XREF: Sound_E0
00083550 4BEE 0370                  		lea	$370(a6),a5				; MJ: new SFX location
00083554 4A15                       		tst.b	(a5)
00083556 6A00                       		bpl.s	loc_724AE
00083558 0895 0007                  		bclr	#7,(a5)
0008355C 0815 0002                  		btst	#2,(a5)
00083560 6600                       		bne.s	loc_724AE
00083562 4EBA 0000                  		jsr	loc_7270A(pc)
00083566 4BEE 0130                  		lea	$130(a6),a5				; MJ: new BGM location
0008356A 0895 0002                  		bclr	#2,(a5)
0008356E 08D5 0001                  		bset	#1,(a5)
00083572 4A15                       		tst.b	(a5)
00083574 6A00                       		bpl.s	loc_724AE
00083576 226E 0018                  		movea.l	$18(a6),a1
0008357A 102D 000B                  		move.b	$B(a5),d0
0008357E 4EBA 0000                  		jsr	sub_72C4E(pc)
00083582                            
00083582                            loc_724AE:
00083582 4BEE 03A0                  		lea	$3A0(a6),a5				; MJ: new SFX location
00083586 4A15                       		tst.b	(a5)
00083588 6A00                       		bpl.s	locret_724E4
0008358A 0895 0007                  		bclr	#7,(a5)
0008358E 0815 0002                  		btst	#2,(a5)
00083592 6600                       		bne.s	locret_724E4
00083594 4EBA 0000                  		jsr	loc_729A6(pc)
00083598 4BEE 0220                  		lea	$220(a6),a5				; MJ: new BGM location
0008359C 0895 0002                  		bclr	#2,(a5)
000835A0 08D5 0001                  		bset	#1,(a5)
000835A4 4A15                       		tst.b	(a5)
000835A6 6A00                       		bpl.s	locret_724E4
000835A8 0C2D 00E0 0001             		cmpi.b	#-$20,1(a5)
000835AE 6600                       		bne.s	locret_724E4
000835B0 13ED 001F 00C0 0011        		move.b	$1F(a5),($C00011).l
000835B8                            
000835B8                            locret_724E4:
000835B8 4E75                       		rts	
000835BA                            ; End of function Snd_FadeOut2
000835BA                            
000835BA                            ; ===========================================================================
000835BA                            ; ---------------------------------------------------------------------------
000835BA                            ; Fade out music
000835BA                            ; ---------------------------------------------------------------------------
000835BA                            
000835BA                            Sound_E0:				; XREF: Sound_ExIndex
000835BA 4EBA FEFA                  		jsr	Snd_FadeOut1(pc)
000835BE 4EBA FF90                  		jsr	Snd_FadeOut2(pc)
000835C2 1D7C 0003 0006             		move.b	#3,6(a6)
000835C8 1D7C 0028 0004             		move.b	#$28,4(a6)
000835CE 422E 0040                  		clr.b	$40(a6)
000835D2 422E 0070                  		clr.b	$70(a6)					; MJ: stop PCM 2 as well
000835D6 422E 002A                  		clr.b	$2A(a6)
000835DA 4E75                       		rts	
000835DC                            
000835DC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000835DC                            
000835DC                            
000835DC                            sub_72504:				; XREF: sub_71B4C
000835DC 102E 0006                  		move.b	6(a6),d0
000835E0 6700                       		beq.s	loc_72510
000835E2 532E 0006                  		subq.b	#1,6(a6)
000835E6 4E75                       		rts	
000835E8                            ; ===========================================================================
000835E8                            
000835E8                            loc_72510:
000835E8 532E 0004                  		subq.b	#1,4(a6)
000835EC 6700 0000                  		beq.w	Sound_E4
000835F0 1D7C 0003 0006             		move.b	#3,6(a6)
000835F6 4BEE 00A0                  		lea	$A0(a6),a5				; MJ: new FM location
000835FA 7E05                       		moveq	#5,d7
000835FC                            
000835FC                            loc_72524:
000835FC 4A15                       		tst.b	(a5)
000835FE 6A00                       		bpl.s	loc_72538
00083600 522D 0009                  		addq.b	#1,9(a5)
00083604 6A00                       		bpl.s	loc_72534
00083606 0895 0007                  		bclr	#7,(a5)
0008360A 6000                       		bra.s	loc_72538
0008360C                            ; ===========================================================================
0008360C                            
0008360C                            loc_72534:
0008360C 4EBA 0000                  		jsr	sub_72CB4(pc)
00083610                            
00083610                            loc_72538:
00083610 DAFC 0030                  		adda.w	#$30,a5
00083614 51CF FFE6                  		dbf	d7,loc_72524
00083618                            
00083618 7E02                       		moveq	#2,d7
0008361A                            
0008361A                            loc_72542:
0008361A 4A15                       		tst.b	(a5)
0008361C 6A00                       		bpl.s	loc_72560
0008361E 522D 0009                  		addq.b	#1,9(a5)
00083622 0C2D 0010 0009             		cmpi.b	#$10,9(a5)
00083628 6500                       		bcs.s	loc_72558
0008362A 0895 0007                  		bclr	#7,(a5)
0008362E 6000                       		bra.s	loc_72560
00083630                            ; ===========================================================================
00083630                            
00083630                            loc_72558:
00083630 1C2D 0009                  		move.b	9(a5),d6
00083634 4EBA 0000                  		jsr	sub_7296A(pc)
00083638                            
00083638                            loc_72560:
00083638 DAFC 0030                  		adda.w	#$30,a5
0008363C 51CF FFDC                  		dbf	d7,loc_72542
00083640                            
00083640 4E75                       		rts	
00083642                            ; End of function sub_72504
00083642                            
00083642                            
00083642                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00083642                            
00083642                            
00083642                            sub_7256A:				; XREF: Sound_E4; sub_725CA
00083642 7602                       		moveq	#2,d3
00083644 7028                       		moveq	#$28,d0
00083646                            
00083646                            loc_7256E:
00083646 1203                       		move.b	d3,d1
00083648 4EBA 0000                  		jsr	sub_7272E(pc)
0008364C 5801                       		addq.b	#4,d1
0008364E 4EBA 0000                  		jsr	sub_7272E(pc)
00083652 51CB FFF2                  		dbf	d3,loc_7256E
00083656                            
00083656 7040                       		moveq	#$40,d0
00083658 727F                       		moveq	#$7F,d1
0008365A 7802                       		moveq	#2,d4
0008365C                            
0008365C                            loc_72584:
0008365C 7603                       		moveq	#3,d3
0008365E                            
0008365E                            loc_72586:
0008365E 4EBA 0000                  		jsr	sub_7272E(pc)
00083662 4EBA 0000                  		jsr	sub_72764(pc)
00083666 5840                       		addq.w	#4,d0
00083668 51CB FFF4                  		dbf	d3,loc_72586
0008366C                            
0008366C 0400 000F                  		subi.b	#$F,d0
00083670 51CC FFEA                  		dbf	d4,loc_72584
00083674                            
00083674 4E75                       		rts	
00083676                            ; End of function sub_7256A
00083676                            
00083676                            ; ===========================================================================
00083676                            ; ---------------------------------------------------------------------------
00083676                            ; Stop music
00083676                            ; ---------------------------------------------------------------------------
00083676                            
00083676                            Sound_E4:
00083676 33FC 0100 00A1 1100 0839+  		StopZ80
00083688 41F9 0000 0000             		lea	(StopSample).l,a0				; EXT: load stop sample address
0008368E 43F9 00A0 02E6             		lea	($A00000+PCM1_Sample).l,a1			; EXT: load PCM 1 slot address
00083694 12D8                       		move.b	(a0)+,(a1)+					; EXT: set address of sample
00083696 12D8                       		move.b	(a0)+,(a1)+					; EXT: ''
00083698 12D8                       		move.b	(a0)+,(a1)+					; EXT: ''
0008369A 13FC 0064 00A0 0047        		move.b	#(CUPCM1_NewSample&$FF),($A00000+CU_Stack).l	; EXT: set routine to run
000836A2 13FC 0002 00A0 0048        		move.b	#(CUPCM1_NewSample>>$08),($A00000+CU_Stack+1).l	; EXT: ''
000836AA 13FC 00C9 00A0 01D2        		move.b	#%11001001,($A00000+CUPCM1_RET).l		; EXT: change "NOP" to "RET"
000836B2 41F9 0000 0000             		lea	(StopSample).l,a0				; EXT: load stop sample address
000836B8 43F9 00A0 02E9             		lea	($A00000+PCM2_Sample).l,a1			; EXT: load PCM 2 slot address
000836BE 12D8                       		move.b	(a0)+,(a1)+					; EXT: ''
000836C0 12D8                       		move.b	(a0)+,(a1)+					; EXT: ''
000836C2 12D8                       		move.b	(a0)+,(a1)+					; EXT: ''
000836C4 13FC 0028 00A0 01D3        		move.b	#%00101000,($A00000+CUPCM2_RET).l		; EXT: change "JR NZ" to "JR Z"
000836CC 33FC 0000 00A1 1100        		StartZ80
000836D4                            
000836D4 702B                       		moveq	#$2B,d0
000836D6 123C 0080                  		move.b	#$80,d1
000836DA 4EBA 0000                  		jsr	sub_7272E(pc)
000836DE 7027                       		moveq	#$27,d0
000836E0 7200                       		moveq	#0,d1
000836E2 4EBA 0000                  		jsr	sub_7272E(pc)
000836E6 204E                       		movea.l	a6,a0
000836E8 2C2E 0010                  		move.l	$10(a6),d6					; EXT: store YM Cue list pointer
000836EC 303C 00EF                  		move.w	#$EF,d0						; MJ: new size of data to clear
000836F0                            
000836F0                            loc_725B6:
000836F0 4298                       		clr.l	(a0)+
000836F2 51C8 FFFC                  		dbf	d0,loc_725B6
000836F6                            
000836F6 2D46 0010                  		move.l	d6,$10(a6)					; EXT: restore YM Cue list pointer
000836FA 1D7C 0080 0009             		move.b	#$80,9(a6)	; set music to $80 (silence)
00083700 4EBA FF40                  		jsr	sub_7256A(pc)
00083704 6000 0000                  		bra.w	sub_729B6
00083708                            
00083708                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00083708                            
00083708                            
00083708                            sub_725CA:				; XREF: Sound_ChkValue
00083708 204E                       		movea.l	a6,a0
0008370A 1216                       		move.b	0(a6),d1
0008370C 142E 0027                  		move.b	$27(a6),d2
00083710 162E 002A                  		move.b	$2A(a6),d3
00083714 182E 0026                  		move.b	$26(a6),d4
00083718 3A2E 000A                  		move.w	$A(a6),d5
0008371C 2C2E 0010                  		move.l	$10(a6),d6					; EXT: store YM Cue list pointer
00083720 303C 0093                  		move.w	#$93,d0						; MJ: new size
00083724                            
00083724                            loc_725E4:
00083724 4298                       		clr.l	(a0)+
00083726 51C8 FFFC                  		dbf	d0,loc_725E4
0008372A                            
0008372A 1C81                       		move.b	d1,0(a6)
0008372C 1D42 0027                  		move.b	d2,$27(a6)
00083730 1D43 002A                  		move.b	d3,$2A(a6)
00083734 1D44 0026                  		move.b	d4,$26(a6)
00083738 3D45 000A                  		move.w	d5,$A(a6)
0008373C 2D46 0010                  		move.l	d6,$10(a6)					; EXT: restore YM Cue list pointer
00083740 1D7C 0080 0009             		move.b	#$80,9(a6)
00083746 4EBA FEFA                  		jsr	sub_7256A(pc)
0008374A 6000 0000                  		bra.w	sub_729B6
0008374E                            ; End of function sub_725CA
0008374E                            
0008374E                            
0008374E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008374E                            
0008374E                            
0008374E                            sub_7260C:				; XREF: sub_71B4C
0008374E 1D6E 0002 0001             		move.b	2(a6),1(a6)
00083754 41EE 004E                  		lea	$4E(a6),a0
00083758 7030                       		moveq	#$30,d0
0008375A 720A                       		moveq	#10,d1				; MJ: new number of channels
0008375C                            
0008375C                            loc_7261A:
0008375C 5210                       		addq.b	#1,(a0)
0008375E D0C0                       		adda.w	d0,a0
00083760 51C9 FFFA                  		dbf	d1,loc_7261A
00083764                            
00083764 4E75                       		rts	
00083766                            ; End of function sub_7260C
00083766                            
00083766                            ; ===========================================================================
00083766                            ; ---------------------------------------------------------------------------
00083766                            ; Speed	up music
00083766                            ; ---------------------------------------------------------------------------
00083766                            
00083766                            Sound_E2:				; XREF: Sound_ExIndex
00083766 4A2E 0027                  		tst.b	$27(a6)
0008376A 6600                       		bne.s	loc_7263E
0008376C 1D6E 0029 0002             		move.b	$29(a6),2(a6)
00083772 1D6E 0029 0001             		move.b	$29(a6),1(a6)
00083778 1D7C 0080 002A             		move.b	#$80,$2A(a6)
0008377E 4E75                       		rts	
00083780                            ; ===========================================================================
00083780                            
00083780                            loc_7263E:
00083780 1D6E 03F9 03D2             		move.b	$3F9(a6),$3D2(a6)			; MJ: new location
00083786 1D6E 03F9 03D1             		move.b	$3F9(a6),$3D1(a6)			; MJ: new location
0008378C 1D7C 0080 03FA             		move.b	#$80,$3FA(a6)
00083792 4E75                       		rts	
00083794                            ; ===========================================================================
00083794                            ; ---------------------------------------------------------------------------
00083794                            ; Change music back to normal speed
00083794                            ; ---------------------------------------------------------------------------
00083794                            
00083794                            Sound_E3:				; XREF: Sound_ExIndex
00083794 4A2E 0027                  		tst.b	$27(a6)
00083798 6600                       		bne.s	loc_7266A
0008379A 1D6E 0028 0002             		move.b	$28(a6),2(a6)
000837A0 1D6E 0028 0001             		move.b	$28(a6),1(a6)
000837A6 422E 002A                  		clr.b	$2A(a6)
000837AA 4E75                       		rts	
000837AC                            ; ===========================================================================
000837AC                            
000837AC                            loc_7266A:
000837AC 1D6E 03F8 03D2             		move.b	$3F8(a6),$3D2(a6)
000837B2 1D6E 03F8 03D1             		move.b	$3F8(a6),$3D1(a6)
000837B8 422E 03FA                  		clr.b	$3FA(a6)
000837BC 4E75                       		rts	
000837BE                            
000837BE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000837BE                            
000837BE                            
000837BE                            sub_7267C:				; XREF: sub_71B4C
000837BE 4A2E 0025                  		tst.b	$25(a6)
000837C2 6700                       		beq.s	loc_72688
000837C4 532E 0025                  		subq.b	#1,$25(a6)
000837C8 4E75                       		rts	
000837CA                            ; ===========================================================================
000837CA                            
000837CA                            loc_72688:
000837CA 4A2E 0026                  		tst.b	$26(a6)
000837CE 6700                       		beq.s	loc_726D6
000837D0 532E 0026                  		subq.b	#1,$26(a6)
000837D4 1D7C 0002 0025             		move.b	#2,$25(a6)
000837DA 4BEE 00A0                  		lea	$A0(a6),a5				; MJ: new SFX location
000837DE 7E05                       		moveq	#5,d7
000837E0                            
000837E0                            loc_7269E:
000837E0 4A15                       		tst.b	(a5)
000837E2 6A00                       		bpl.s	loc_726AA
000837E4 532D 0009                  		subq.b	#1,9(a5)
000837E8 4EBA 0000                  		jsr	sub_72CB4(pc)
000837EC                            
000837EC                            loc_726AA:
000837EC DAFC 0030                  		adda.w	#$30,a5
000837F0 51CF FFEE                  		dbf	d7,loc_7269E
000837F4 7E02                       		moveq	#2,d7
000837F6                            
000837F6                            loc_726B4:
000837F6 4A15                       		tst.b	(a5)
000837F8 6A00                       		bpl.s	loc_726CC
000837FA 532D 0009                  		subq.b	#1,9(a5)
000837FE 1C2D 0009                  		move.b	9(a5),d6
00083802 0C06 0010                  		cmpi.b	#$10,d6
00083806 6500                       		bcs.s	loc_726C8
00083808 7C0F                       		moveq	#$F,d6
0008380A                            
0008380A                            loc_726C8:
0008380A 4EBA 0000                  		jsr	sub_7296A(pc)
0008380E                            
0008380E                            loc_726CC:
0008380E DAFC 0030                  		adda.w	#$30,a5
00083812 51CF FFE2                  		dbf	d7,loc_726B4
00083816 4E75                       		rts	
00083818                            ; ===========================================================================
00083818                            
00083818                            loc_726D6:
00083818 08AE 0002 0040             		bclr	#2,$40(a6)
0008381E 08AE 0002 0070             		bclr	#2,$70(a6)				; MJ: do PCM 2 as well...
00083824 422E 0024                  		clr.b	$24(a6)
00083828 4E75                       		rts	
0008382A                            ; End of function sub_7267C
0008382A                            
0008382A                            ; ===========================================================================
0008382A                            
0008382A                            loc_726E2:				; XREF: sub_71CCA
0008382A 0815 0001                  		btst	#1,(a5)
0008382E 6600                       		bne.s	locret_726FC
00083830 0815 0002                  		btst	#2,(a5)
00083834 6600                       		bne.s	locret_726FC
00083836 7028                       		moveq	#$28,d0
00083838 122D 0001                  		move.b	1(a5),d1
0008383C 0001 00F0                  		ori.b	#-$10,d1
00083840 6000 0000                  		bra.w	sub_7272E
00083844                            ; ===========================================================================
00083844                            
00083844                            locret_726FC:
00083844 4E75                       		rts	
00083846                            
00083846                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00083846                            
00083846                            
00083846                            sub_726FE:				; XREF: sub_71CEC; sub_71D9E; Sound_ChkValue; Snd_FadeOut1
00083846 0815 0004                  		btst	#4,(a5)
0008384A 6600                       		bne.s	locret_72714
0008384C 0815 0002                  		btst	#2,(a5)
00083850 6600                       		bne.s	locret_72714
00083852                            
00083852                            loc_7270A:				; XREF: Snd_FadeOut2
00083852 7028                       		moveq	#$28,d0
00083854 122D 0001                  		move.b	1(a5),d1
00083858 6000 0000                  		bra.w	sub_7272E
0008385C                            ; ===========================================================================
0008385C                            
0008385C                            locret_72714:
0008385C 4E75                       		rts	
0008385E                            ; End of function sub_726FE
0008385E                            
0008385E                            ; ===========================================================================
0008385E                            
0008385E                            loc_72716:				; XREF: sub_72A5A
0008385E 0815 0002                  		btst	#2,(a5)
00083862 6600                       		bne.s	locret_72720
00083864 6000 0000                  		bra.w	sub_72722
00083868                            ; ===========================================================================
00083868                            
00083868                            locret_72720:
00083868 4E75                       		rts
0008386A                            
0008386A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008386A                            
0008386A                            
0008386A                            sub_72722:				; XREF: sub_71E18; sub_72C4E; sub_72CB4
0008386A 082D 0002 0001             		btst	#2,1(a5)
00083870 6600                       		bne.s	loc_7275A
00083872 D02D 0001                  		add.b	1(a5),d0
00083876                            ; End of function sub_72722
00083876                            
00083876                            
00083876                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00083876                            
00083876                            sub_7272E:
00083876 48E7 2080                  		movem.l	d2/a0,-(sp)				; EXT: store register data
0008387A 206E 0010                  		movea.l	$10(a6),a0				; EXT: load Cue pointer
0008387E 5248                       		addq.w	#$01,a0					; EXT: skip $40
00083880 143C 0000                  		move.b	#$00,d2					; EXT: prepare d2 for YM2612 port address ($4000 - $4001)
00083884 33FC 0100 00A1 1100 0839+  		StopZ80						; EXT: request Z80 stop "ON"
00083896 10C2                       		move.b	d2,(a0)+				; EXT: write YM2612 port address
00083898 10C1                       		move.b	d1,(a0)+				; EXT: write YM2612 data
0008389A 10C0                       		move.b	d0,(a0)+				; EXT: write YM2612 address
0008389C 33FC 0000 00A1 1100        		StartZ80					; EXT: request Z80 stop "OFF"
000838A4 3408                       		move.w	a0,d2					; EXT: load Cue pointer
000838A6 0242 0FFF                  		andi.w	#$0FFF,d2				; EXT: wrap it
000838AA 0042 1000                  		ori.w	#$1000,d2				; EXT: ''
000838AE 3D42 0012                  		move.w	d2,$12(a6)				; EXT: update it
000838B2 4CDF 0104                  		movem.l	(sp)+,d2/a0				; EXT: restore register data
000838B6 4E75                       		rts						; EXT: return
000838B8                            
000838B8                            ; ===========================================================================
000838B8                            
000838B8                            loc_7275A:				; XREF: sub_72722
000838B8 142D 0001                  		move.b	1(a5),d2
000838BC 0882 0002                  		bclr	#2,d2
000838C0 D002                       		add.b	d2,d0
000838C2                            
000838C2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000838C2                            
000838C2                            
000838C2                            sub_72764:
000838C2 48E7 2080                  		movem.l	d2/a0,-(sp)				; EXT: store register data
000838C6 206E 0010                  		movea.l	$10(a6),a0				; EXT: load Cue pointer
000838CA 5248                       		addq.w	#$01,a0					; EXT: skip $40
000838CC 143C 0002                  		move.b	#$02,d2					; EXT: prepare d2 for YM2612 port address ($4002 - $4003)
000838D0 33FC 0100 00A1 1100 0839+  		StopZ80						; EXT: request Z80 stop "ON"
000838E2 10C2                       		move.b	d2,(a0)+				; EXT: write YM2612 port address
000838E4 10C1                       		move.b	d1,(a0)+				; EXT: write YM2612 data
000838E6 10C0                       		move.b	d0,(a0)+				; EXT: write YM2612 address
000838E8 33FC 0000 00A1 1100        		StartZ80					; EXT: request Z80 stop "OFF"
000838F0 3408                       		move.w	a0,d2					; EXT: load Cue pointer
000838F2 0242 0FFF                  		andi.w	#$0FFF,d2				; EXT: wrap it
000838F6 0042 1000                  		ori.w	#$1000,d2				; EXT: ''
000838FA 3D42 0012                  		move.w	d2,$12(a6)				; EXT: update it
000838FE 4CDF 0104                  		movem.l	(sp)+,d2/a0				; EXT: restore register data
00083902 4E75                       		rts						; EXT: return
00083904                            
00083904                            ; ===========================================================================
00083904 025E 0284 02AB 02D3 02FE+  word_72790:	dc.w $25E, $284, $2AB, $2D3, $2FE, $32D, $35C, $38F, $3C5
00083916 03FF 043C 047C 0A5E 0A84+  		dc.w $3FF, $43C, $47C, $A5E, $A84, $AAB, $AD3, $AFE, $B2D
00083928 0B5C 0B8F 0BC5 0BFF 0C3C+  		dc.w $B5C, $B8F, $BC5, $BFF, $C3C, $C7C, $125E,	$1284
00083938 12AB 12D3 12FE 132D 135C+  		dc.w $12AB, $12D3, $12FE, $132D, $135C,	$138F, $13C5, $13FF
00083948 143C 147C 1A5E 1A84 1AAB+  		dc.w $143C, $147C, $1A5E, $1A84, $1AAB,	$1AD3, $1AFE, $1B2D
00083958 1B5C 1B8F 1BC5 1BFF 1C3C+  		dc.w $1B5C, $1B8F, $1BC5, $1BFF, $1C3C,	$1C7C, $225E, $2284
00083968 22AB 22D3 22FE 232D 235C+  		dc.w $22AB, $22D3, $22FE, $232D, $235C,	$238F, $23C5, $23FF
00083978 243C 247C 2A5E 2A84 2AAB+  		dc.w $243C, $247C, $2A5E, $2A84, $2AAB,	$2AD3, $2AFE, $2B2D
00083988 2B5C 2B8F 2BC5 2BFF 2C3C+  		dc.w $2B5C, $2B8F, $2BC5, $2BFF, $2C3C,	$2C7C, $325E, $3284
00083998 32AB 32D3 32FE 332D 335C+  		dc.w $32AB, $32D3, $32FE, $332D, $335C,	$338F, $33C5, $33FF
000839A8 343C 347C 3A5E 3A84 3AAB+  		dc.w $343C, $347C, $3A5E, $3A84, $3AAB,	$3AD3, $3AFE, $3B2D
000839B8 3B5C 3B8F 3BC5 3BFF 3C3C+  		dc.w $3B5C, $3B8F, $3BC5, $3BFF, $3C3C,	$3C7C
000839C4                            
000839C4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000839C4                            
000839C4                            
000839C4                            sub_72850:				; XREF: sub_71B4C
000839C4 532D 000E                  		subq.b	#1,$E(a5)
000839C8 6600                       		bne.s	loc_72866
000839CA 0895 0004                  		bclr	#4,(a5)
000839CE 4EBA 0000                  		jsr	sub_72878(pc)
000839D2 4EBA 0000                  		jsr	sub_728DC(pc)
000839D6 6000 0000                  		bra.w	loc_7292E
000839DA                            ; ===========================================================================
000839DA                            
000839DA                            loc_72866:
000839DA 4EBA F378                  		jsr	sub_71D9E(pc)
000839DE 4EBA 0000                  		jsr	sub_72926(pc)
000839E2 4EBA F398                  		jsr	sub_71DC6(pc)
000839E6 4EBA 0000                  		jsr	sub_728E2(pc)
000839EA 4E75                       		rts	
000839EC                            ; End of function sub_72850
000839EC                            
000839EC                            
000839EC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000839EC                            
000839EC                            
000839EC                            sub_72878:				; XREF: sub_72850
000839EC 0895 0001                  		bclr	#1,(a5)
000839F0 286D 0004                  		movea.l	4(a5),a4
000839F4                            
000839F4                            loc_72880:
000839F4 7A00                       		moveq	#0,d5
000839F6 1A1C                       		move.b	(a4)+,d5
000839F8 0C05 00E0                  		cmpi.b	#$E0,d5
000839FC 6500                       		bcs.s	loc_72890
000839FE 4EBA 0000                  		jsr	sub_72A5A(pc)
00083A02 60F0                       		bra.s	loc_72880
00083A04                            ; ===========================================================================
00083A04                            
00083A04                            loc_72890:
00083A04 4A05                       		tst.b	d5
00083A06 6A00                       		bpl.s	loc_728A4
00083A08 4EBA 0000                  		jsr	sub_728AC(pc)
00083A0C 1A1C                       		move.b	(a4)+,d5
00083A0E 4A05                       		tst.b	d5
00083A10 6A00                       		bpl.s	loc_728A4
00083A12 534C                       		subq.w	#1,a4
00083A14 6000 F300                  		bra.w	sub_71D60
00083A18                            ; ===========================================================================
00083A18                            
00083A18                            loc_728A4:
00083A18 4EBA F2DC                  		jsr	sub_71D40(pc)
00083A1C 6000 F2F8                  		bra.w	sub_71D60
00083A20                            ; End of function sub_72878
00083A20                            
00083A20                            
00083A20                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00083A20                            
00083A20                            
00083A20                            sub_728AC:				; XREF: sub_72878
00083A20 0405 0081                  		subi.b	#$81,d5
00083A24 6500                       		bcs.s	loc_728CA
00083A26 DA2D 0008                  		add.b	8(a5),d5
00083A2A 0245 007F                  		andi.w	#$7F,d5
00083A2E E34D                       		lsl.w	#1,d5
00083A30 41FA 0000                  		lea	word_729CE(pc),a0
00083A34 3B70 5000 0010             		move.w	(a0,d5.w),$10(a5)
00083A3A 6000 F2DA                  		bra.w	sub_71D60
00083A3E                            ; ===========================================================================
00083A3E                            
00083A3E                            loc_728CA:
00083A3E 08D5 0001                  		bset	#1,(a5)
00083A42 3B7C FFFF 0010             		move.w	#-1,$10(a5)
00083A48 4EBA F2CC                  		jsr	sub_71D60(pc)
00083A4C 6000 0000                  		bra.w	sub_729A0
00083A50                            ; End of function sub_728AC
00083A50                            
00083A50                            
00083A50                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00083A50                            
00083A50                            
00083A50                            sub_728DC:				; XREF: sub_72850
00083A50 3C2D 0010                  		move.w	$10(a5),d6
00083A54 6B00                       		bmi.s	loc_72920
00083A56                            ; End of function sub_728DC
00083A56                            
00083A56                            
00083A56                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00083A56                            
00083A56                            
00083A56                            sub_728E2:				; XREF: sub_72850
00083A56 102D 001E                  		move.b	$1E(a5),d0
00083A5A 4880                       		ext.w	d0
00083A5C DC40                       		add.w	d0,d6
00083A5E 0815 0002                  		btst	#2,(a5)
00083A62 6600                       		bne.s	locret_7291E
00083A64 0815 0001                  		btst	#1,(a5)
00083A68 6600                       		bne.s	locret_7291E
00083A6A 102D 0001                  		move.b	1(a5),d0
00083A6E 0C00 00E0                  		cmpi.b	#$E0,d0
00083A72 6600                       		bne.s	loc_72904
00083A74 103C 00C0                  		move.b	#$C0,d0
00083A78                            
00083A78                            loc_72904:
00083A78 3206                       		move.w	d6,d1
00083A7A 0201 000F                  		andi.b	#$F,d1
00083A7E 8001                       		or.b	d1,d0
00083A80 E84E                       		lsr.w	#4,d6
00083A82 0206 003F                  		andi.b	#$3F,d6
00083A86 13C0 00C0 0011             		move.b	d0,($C00011).l
00083A8C 13C6 00C0 0011             		move.b	d6,($C00011).l
00083A92                            
00083A92                            locret_7291E:
00083A92 4E75                       		rts	
00083A94                            ; End of function sub_728E2
00083A94                            
00083A94                            ; ===========================================================================
00083A94                            
00083A94                            loc_72920:				; XREF: sub_728DC
00083A94 08D5 0001                  		bset	#1,(a5)
00083A98 4E75                       		rts	
00083A9A                            
00083A9A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00083A9A                            
00083A9A                            
00083A9A                            sub_72926:				; XREF: sub_72850
00083A9A 4A2D 000B                  		tst.b	$B(a5)
00083A9E 6700 0000                  		beq.w	locret_7298A
00083AA2                            
00083AA2                            loc_7292E:				; XREF: sub_72850
00083AA2 1C2D 0009                  		move.b	9(a5),d6
00083AA6 7000                       		moveq	#0,d0
00083AA8 102D 000B                  		move.b	$B(a5),d0
00083AAC 6700                       		beq.s	sub_7296A
00083AAE 2079 0008 2840             		movea.l	(Go_PSGIndex).l,a0
00083AB4 5340                       		subq.w	#1,d0
00083AB6 E548                       		lsl.w	#2,d0
00083AB8 2070 0000                  		movea.l	(a0,d0.w),a0
00083ABC 102D 000C                  		move.b	$C(a5),d0
00083AC0 1030 0000                  		move.b	(a0,d0.w),d0
00083AC4 522D 000C                  		addq.b	#1,$C(a5)
00083AC8 0800 0007                  		btst	#7,d0
00083ACC 6700                       		beq.s	loc_72960
00083ACE 0C00 0080                  		cmpi.b	#$80,d0
00083AD2 6700                       		beq.s	loc_7299A
00083AD4                            
00083AD4                            loc_72960:
00083AD4 DC40                       		add.w	d0,d6
00083AD6 0C06 0010                  		cmpi.b	#$10,d6
00083ADA 6500                       		bcs.s	sub_7296A
00083ADC 7C0F                       		moveq	#$F,d6
00083ADE                            ; End of function sub_72926
00083ADE                            
00083ADE                            
00083ADE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00083ADE                            
00083ADE                            
00083ADE                            sub_7296A:				; XREF: sub_72504; sub_7267C; sub_72926
00083ADE 0815 0001                  		btst	#1,(a5)
00083AE2 6600                       		bne.s	locret_7298A
00083AE4 0815 0002                  		btst	#2,(a5)
00083AE8 6600                       		bne.s	locret_7298A
00083AEA 0815 0004                  		btst	#4,(a5)
00083AEE 6600                       		bne.s	loc_7298C
00083AF0                            
00083AF0                            loc_7297C:
00083AF0 8C2D 0001                  		or.b	1(a5),d6
00083AF4 0606 0010                  		addi.b	#$10,d6
00083AF8 13C6 00C0 0011             		move.b	d6,($C00011).l
00083AFE                            
00083AFE                            locret_7298A:
00083AFE 4E75                       		rts	
00083B00                            ; ===========================================================================
00083B00                            
00083B00                            loc_7298C:
00083B00 4A2D 0013                  		tst.b	$13(a5)
00083B04 67EA                       		beq.s	loc_7297C
00083B06 4A2D 0012                  		tst.b	$12(a5)
00083B0A 66E4                       		bne.s	loc_7297C
00083B0C 4E75                       		rts	
00083B0E                            ; End of function sub_7296A
00083B0E                            
00083B0E                            ; ===========================================================================
00083B0E                            
00083B0E                            loc_7299A:				; XREF: sub_72926
00083B0E 532D 000C                  		subq.b	#1,$C(a5)
00083B12 4E75                       		rts	
00083B14                            
00083B14                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00083B14                            
00083B14                            
00083B14                            sub_729A0:				; XREF: sub_71D9E; Sound_ChkValue; Snd_FadeOut1; sub_728AC
00083B14 0815 0002                  		btst	#2,(a5)
00083B18 6600                       		bne.s	locret_729B4
00083B1A                            
00083B1A                            loc_729A6:				; XREF: Snd_FadeOut2
00083B1A 102D 0001                  		move.b	1(a5),d0
00083B1E 0000 001F                  		ori.b	#$1F,d0
00083B22 13C0 00C0 0011             		move.b	d0,($C00011).l
00083B28                            
00083B28                            locret_729B4:
00083B28 4E75                       		rts	
00083B2A                            ; End of function sub_729A0
00083B2A                            
00083B2A                            
00083B2A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00083B2A                            
00083B2A                            
00083B2A                            sub_729B6:				; XREF: loc_71E7C
00083B2A 41F9 00C0 0011             		lea	($C00011).l,a0
00083B30 10BC 009F                  		move.b	#$9F,(a0)
00083B34 10BC 00BF                  		move.b	#$BF,(a0)
00083B38 10BC 00DF                  		move.b	#$DF,(a0)
00083B3C 10BC 00FF                  		move.b	#$FF,(a0)
00083B40 4E75                       		rts	
00083B42                            ; End of function sub_729B6
00083B42                            
00083B42                            ; ===========================================================================
00083B42 0356 0326 02F9 02CE 02A5+  word_729CE:	dc.w $356, $326, $2F9, $2CE, $2A5, $280, $25C, $23A, $21A
00083B54 01FB 01DF 01C4 01AB 0193+  		dc.w $1FB, $1DF, $1C4, $1AB, $193, $17D, $167, $153, $140
00083B66 012E 011D 010D 00FE 00EF+  		dc.w $12E, $11D, $10D, $FE, $EF, $E2, $D6, $C9,	$BE, $B4
00083B7A 00A9 00A0 0097 008F 0087+  		dc.w $A9, $A0, $97, $8F, $87, $7F, $78,	$71, $6B, $65
00083B8E 005F 005A 0055 0050 004B+  		dc.w $5F, $5A, $55, $50, $4B, $47, $43,	$40, $3C, $39
00083BA2 0036 0033 0030 002D 002B+  		dc.w $36, $33, $30, $2D, $2B, $28, $26,	$24, $22, $20
00083BB6 001F 001D 001B 001A 0018+  		dc.w $1F, $1D, $1B, $1A, $18, $17, $16,	$15, $13, $12
00083BCA 0011 0000                  		dc.w $11, 0
00083BCE                            
00083BCE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00083BCE                            
00083BCE                            
00083BCE                            sub_72A5A:				; XREF: sub_71C4E; sub_71CEC; sub_72878
00083BCE 0445 00E0                  		subi.w	#$E0,d5
00083BD2 E54D                       		lsl.w	#2,d5
00083BD4 4EFB 5000                  		jmp	loc_72A64(pc,d5.w)
00083BD8                            ; End of function sub_72A5A
00083BD8                            
00083BD8                            ; ===========================================================================
00083BD8                            
00083BD8                            loc_72A64:
00083BD8 6000 0000                  		bra.w	loc_72ACC
00083BDC                            ; ===========================================================================
00083BDC 6000 0000                  		bra.w	loc_72AEC
00083BE0                            ; ===========================================================================
00083BE0 6000 0000                  		bra.w	loc_72AF2
00083BE4                            ; ===========================================================================
00083BE4 6000 0000                  		bra.w	loc_72AF8
00083BE8                            ; ===========================================================================
00083BE8 6000 0000                  		bra.w	loc_72B14
00083BEC                            ; ===========================================================================
00083BEC 6000 0000                  		bra.w	loc_72B9E
00083BF0                            ; ===========================================================================
00083BF0 6000 0000                  		bra.w	loc_72BA4
00083BF4                            ; ===========================================================================
00083BF4 6000 0000                  		bra.w	loc_72BAE
00083BF8                            ; ===========================================================================
00083BF8 6000 0000                  		bra.w	loc_72BB4
00083BFC                            ; ===========================================================================
00083BFC 6000 0000                  		bra.w	loc_72BBE
00083C00                            ; ===========================================================================
00083C00 6000 0000                  		bra.w	loc_72BC6
00083C04                            ; ===========================================================================
00083C04 6000 0000                  		bra.w	loc_72BD0
00083C08                            ; ===========================================================================
00083C08 6000 0000                  		bra.w	loc_72BE6
00083C0C                            ; ===========================================================================
00083C0C 6000 0000                  		bra.w	loc_72BEE
00083C10                            ; ===========================================================================
00083C10 6000 0000                  		bra.w	loc_72BF4
00083C14                            ; ===========================================================================
00083C14 6000 0000                  		bra.w	loc_72C26
00083C18                            ; ===========================================================================
00083C18 6000 0000                  		bra.w	loc_72D30
00083C1C                            ; ===========================================================================
00083C1C 6000 0000                  		bra.w	loc_72D52
00083C20                            ; ===========================================================================
00083C20 6000 0000                  		bra.w	loc_72D58
00083C24                            ; ===========================================================================
00083C24 6000 0000                  		bra.w	loc_72E06
00083C28                            ; ===========================================================================
00083C28 6000 0000                  		bra.w	loc_72E20
00083C2C                            ; ===========================================================================
00083C2C 6000 0000                  		bra.w	loc_72E26
00083C30                            ; ===========================================================================
00083C30 6000 0000                  		bra.w	loc_72E2C
00083C34                            ; ===========================================================================
00083C34 6000 0000                  		bra.w	loc_72E38
00083C38                            ; ===========================================================================
00083C38 6000 0000                  		bra.w	loc_72E52
00083C3C                            ; ===========================================================================
00083C3C 6000 0000                  		bra.w	loc_72E64
00083C40                            ; ===========================================================================
00083C40                            
00083C40                            loc_72ACC:				; XREF: loc_72A64
00083C40 121C                       		move.b	(a4)+,d1
00083C42 4A2D 0001                  		tst.b	1(a5)
00083C46 6B00                       		bmi.s	locret_72AEA
00083C48 102D 000A                  		move.b	$A(a5),d0
00083C4C 0200 0037                  		andi.b	#$37,d0
00083C50 8200                       		or.b	d0,d1
00083C52 1B41 000A                  		move.b	d1,$A(a5)
00083C56 103C 00B4                  		move.b	#$B4,d0
00083C5A 6000 FC02                  		bra.w	loc_72716
00083C5E                            ; ===========================================================================
00083C5E                            
00083C5E                            locret_72AEA:
00083C5E 4E75                       		rts	
00083C60                            ; ===========================================================================
00083C60                            
00083C60                            loc_72AEC:				; XREF: loc_72A64
00083C60 1B5C 001E                  		move.b	(a4)+,$1E(a5)
00083C64 4E75                       		rts	
00083C66                            ; ===========================================================================
00083C66                            
00083C66                            loc_72AF2:				; XREF: loc_72A64
00083C66 1D5C 0007                  		move.b	(a4)+,7(a6)
00083C6A 4E75                       		rts	
00083C6C                            ; ===========================================================================
00083C6C                            
00083C6C                            loc_72AF8:				; XREF: loc_72A64
00083C6C 7000                       		moveq	#0,d0
00083C6E 102D 000D                  		move.b	$D(a5),d0
00083C72 2875 0000                  		movea.l	(a5,d0.w),a4
00083C76 2BBC 0000 0000 0000        		move.l	#0,(a5,d0.w)
00083C7E 544C                       		addq.w	#2,a4
00083C80 5800                       		addq.b	#4,d0
00083C82 1B40 000D                  		move.b	d0,$D(a5)
00083C86 4E75                       		rts	
00083C88                            ; ===========================================================================
00083C88                            
00083C88                            loc_72B14:				; XREF: loc_72A64
00083C88 204E                       		movea.l	a6,a0
00083C8A 43EE 03D0                  		lea	$3D0(a6),a1				; MJ: new SFX location
00083C8E 303C 0093                  		move.w	#$93,d0					; MJ: new size to store
00083C92                            
00083C92                            loc_72B1E:
00083C92 20D9                       		move.l	(a1)+,(a0)+
00083C94 51C8 FFFC                  		dbf	d0,loc_72B1E
00083C98                            
00083C98 08EE 0002 0040             		bset	#2,$40(a6)
00083C9E 08EE 0002 0070             		bset	#2,$70(a6)				; MJ: enable PCM 2
00083CA4 264D                       		movea.l	a5,a3
00083CA6 1C3C 0028                  		move.b	#$28,d6
00083CAA 9C2E 0026                  		sub.b	$26(a6),d6
00083CAE 7E05                       		moveq	#5,d7
00083CB0 4BEE 00A0                  		lea	$A0(a6),a5				; MJ: new FM location
00083CB4                            
00083CB4                            loc_72B3A:
00083CB4 0815 0007                  		btst	#7,(a5)
00083CB8 6700                       		beq.s	loc_72B5C
00083CBA 08D5 0001                  		bset	#1,(a5)
00083CBE DD2D 0009                  		add.b	d6,9(a5)
00083CC2 0815 0002                  		btst	#2,(a5)
00083CC6 6600                       		bne.s	loc_72B5C
00083CC8 7000                       		moveq	#0,d0
00083CCA 102D 000B                  		move.b	$B(a5),d0
00083CCE 226E 0018                  		movea.l	$18(a6),a1
00083CD2 4EBA 0000                  		jsr	sub_72C4E(pc)
00083CD6                            
00083CD6                            loc_72B5C:
00083CD6 DAFC 0030                  		adda.w	#$30,a5
00083CDA 51CF FFD8                  		dbf	d7,loc_72B3A
00083CDE                            
00083CDE 7E02                       		moveq	#2,d7
00083CE0                            
00083CE0                            loc_72B66:
00083CE0 0815 0007                  		btst	#7,(a5)
00083CE4 6700                       		beq.s	loc_72B78
00083CE6 08D5 0001                  		bset	#1,(a5)
00083CEA 4EBA FE28                  		jsr	sub_729A0(pc)
00083CEE DD2D 0009                  		add.b	d6,9(a5)
00083CF2                            
00083CF2                            loc_72B78:
00083CF2 DAFC 0030                  		adda.w	#$30,a5
00083CF6 51CF FFE8                  		dbf	d7,loc_72B66
00083CFA 2A4B                       		movea.l	a3,a5
00083CFC 1D7C 0080 0024             		move.b	#$80,$24(a6)
00083D02 1D7C 0028 0026             		move.b	#$28,$26(a6)
00083D08 422E 0027                  		clr.b	$27(a6)
00083D0C 504F                       		addq.w	#8,sp
00083D0E 4E75                       		rts	
00083D10                            ; ===========================================================================
00083D10                            
00083D10                            loc_72B9E:				; XREF: loc_72A64
00083D10 1B5C 0002                  		move.b	(a4)+,2(a5)
00083D14 4E75                       		rts	
00083D16                            ; ===========================================================================
00083D16                            
00083D16                            loc_72BA4:				; XREF: loc_72A64
00083D16 101C                       		move.b	(a4)+,d0
00083D18 D12D 0009                  		add.b	d0,9(a5)
00083D1C 6000 0000                  		bra.w	sub_72CB4
00083D20                            ; ===========================================================================
00083D20                            
00083D20                            loc_72BAE:				; XREF: loc_72A64
00083D20 08D5 0004                  		bset	#4,(a5)
00083D24 4E75                       		rts	
00083D26                            ; ===========================================================================
00083D26                            
00083D26                            loc_72BB4:				; XREF: loc_72A64
00083D26 1B54 0012                  		move.b	(a4),$12(a5)
00083D2A 1B5C 0013                  		move.b	(a4)+,$13(a5)
00083D2E 4E75                       		rts	
00083D30                            ; ===========================================================================
00083D30                            
00083D30                            loc_72BBE:				; XREF: loc_72A64
00083D30 101C                       		move.b	(a4)+,d0
00083D32 D12D 0008                  		add.b	d0,8(a5)
00083D36 4E75                       		rts	
00083D38                            ; ===========================================================================
00083D38                            
00083D38                            loc_72BC6:				; XREF: loc_72A64
00083D38 1D54 0002                  		move.b	(a4),2(a6)
00083D3C 1D5C 0001                  		move.b	(a4)+,1(a6)
00083D40 4E75                       		rts	
00083D42                            ; ===========================================================================
00083D42                            
00083D42                            loc_72BD0:				; XREF: loc_72A64
00083D42 41EE 0040                  		lea	$40(a6),a0
00083D46 101C                       		move.b	(a4)+,d0
00083D48 7230                       		moveq	#$30,d1
00083D4A 740A                       		moveq	#10,d2				; MJ: extra channel
00083D4C                            
00083D4C                            loc_72BDA:
00083D4C 1140 0002                  		move.b	d0,2(a0)
00083D50 D0C1                       		adda.w	d1,a0
00083D52 51CA FFF8                  		dbf	d2,loc_72BDA
00083D56                            
00083D56 4E75                       		rts	
00083D58                            ; ===========================================================================
00083D58                            
00083D58                            loc_72BE6:				; XREF: loc_72A64
00083D58 101C                       		move.b	(a4)+,d0
00083D5A D12D 0009                  		add.b	d0,9(a5)
00083D5E 4E75                       		rts	
00083D60                            ; ===========================================================================
00083D60                            
00083D60                            loc_72BEE:				; XREF: loc_72A64
00083D60 422E 002C                  		clr.b	$2C(a6)
00083D64 4E75                       		rts	
00083D66                            ; ===========================================================================
00083D66                            
00083D66                            loc_72BF4:				; XREF: loc_72A64
00083D66 0895 0007                  		bclr	#7,(a5)
00083D6A 0895 0004                  		bclr	#4,(a5)
00083D6E 4EBA FAD6                  		jsr	sub_726FE(pc)
00083D72 4A2E 0280                  		tst.b	$280(a6)				; MJ: new SFX location
00083D76 6B00                       		bmi.s	loc_72C22
00083D78 264D                       		movea.l	a5,a3
00083D7A 4BEE 0130                  		lea	$130(a6),a5				; MJ: new BGM location
00083D7E 226E 0018                  		movea.l	$18(a6),a1
00083D82 0895 0002                  		bclr	#2,(a5)
00083D86 08D5 0001                  		bset	#1,(a5)
00083D8A 102D 000B                  		move.b	$B(a5),d0
00083D8E 4EBA 0000                  		jsr	sub_72C4E(pc)
00083D92 2A4B                       		movea.l	a3,a5
00083D94                            
00083D94                            loc_72C22:
00083D94 504F                       		addq.w	#8,sp
00083D96 4E75                       		rts	
00083D98                            ; ===========================================================================
00083D98                            
00083D98                            loc_72C26:				; XREF: loc_72A64
00083D98 7000                       		moveq	#0,d0
00083D9A 101C                       		move.b	(a4)+,d0
00083D9C 1B40 000B                  		move.b	d0,$B(a5)
00083DA0 0815 0002                  		btst	#2,(a5)
00083DA4 6600 0000                  		bne.w	locret_72CAA
00083DA8 226E 0018                  		movea.l	$18(a6),a1
00083DAC 4A2E 000E                  		tst.b	$E(a6)
00083DB0 6700                       		beq.s	sub_72C4E
00083DB2 226D 0020                  		movea.l	$20(a5),a1
00083DB6 4A2E 000E                  		tst.b	$E(a6)
00083DBA 6B00                       		bmi.s	sub_72C4E
00083DBC 226E 0020                  		movea.l	$20(a6),a1
00083DC0                            
00083DC0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00083DC0                            
00083DC0                            
00083DC0                            sub_72C4E:				; XREF: Snd_FadeOut1; et al
00083DC0 5340                       		subq.w	#1,d0
00083DC2 6B00                       		bmi.s	loc_72C5C
00083DC4 323C 0019                  		move.w	#$19,d1
00083DC8                            
00083DC8                            loc_72C56:
00083DC8 D2C1                       		adda.w	d1,a1
00083DCA 51C8 FFFC                  		dbf	d0,loc_72C56
00083DCE                            
00083DCE                            loc_72C5C:
00083DCE 1219                       		move.b	(a1)+,d1
00083DD0 1B41 001F                  		move.b	d1,$1F(a5)
00083DD4 1801                       		move.b	d1,d4
00083DD6 103C 00B0                  		move.b	#$B0,d0
00083DDA 4EBA FA8E                  		jsr	sub_72722(pc)
00083DDE 45FA 0000                  		lea	byte_72D18(pc),a2
00083DE2 7613                       		moveq	#$13,d3
00083DE4                            
00083DE4                            loc_72C72:
00083DE4 101A                       		move.b	(a2)+,d0
00083DE6 1219                       		move.b	(a1)+,d1
00083DE8 4EBA FA80                  		jsr	sub_72722(pc)
00083DEC 51CB FFF6                  		dbf	d3,loc_72C72
00083DF0 7A03                       		moveq	#3,d5
00083DF2 0244 0007                  		andi.w	#7,d4
00083DF6 183B 4000                  		move.b	byte_72CAC(pc,d4.w),d4
00083DFA 162D 0009                  		move.b	9(a5),d3
00083DFE                            
00083DFE                            loc_72C8C:
00083DFE 101A                       		move.b	(a2)+,d0
00083E00 1219                       		move.b	(a1)+,d1
00083E02 E20C                       		lsr.b	#1,d4
00083E04 6400                       		bcc.s	loc_72C96
00083E06 D203                       		add.b	d3,d1
00083E08                            
00083E08                            loc_72C96:
00083E08 4EBA FA60                  		jsr	sub_72722(pc)
00083E0C 51CD FFF0                  		dbf	d5,loc_72C8C
00083E10 103C 00B4                  		move.b	#$B4,d0
00083E14 122D 000A                  		move.b	$A(a5),d1
00083E18 4EBA FA50                  		jsr	sub_72722(pc)
00083E1C                            
00083E1C                            locret_72CAA:
00083E1C 4E75                       		rts	
00083E1E                            ; End of function sub_72C4E
00083E1E                            
00083E1E                            ; ===========================================================================
00083E1E 0808 0808 0A0E 0E0F        byte_72CAC:	dc.b 8,	8, 8, 8, $A, $E, $E, $F
00083E26                            
00083E26                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00083E26                            
00083E26                            
00083E26                            sub_72CB4:				; XREF: sub_72504; sub_7267C; loc_72BA4
00083E26 0815 0002                  		btst	#2,(a5)
00083E2A 6600                       		bne.s	locret_72D16
00083E2C 7000                       		moveq	#0,d0
00083E2E 102D 000B                  		move.b	$B(a5),d0
00083E32 226E 0018                  		movea.l	$18(a6),a1
00083E36 4A2E 000E                  		tst.b	$E(a6)
00083E3A 6700                       		beq.s	loc_72CD8
00083E3C 226E 0020                  		movea.l	$20(a6),a1
00083E40 4A2E 000E                  		tst.b	$E(a6)
00083E44 6B00                       		bmi.s	loc_72CD8
00083E46 226E 0020                  		movea.l	$20(a6),a1
00083E4A                            
00083E4A                            loc_72CD8:
00083E4A 5340                       		subq.w	#1,d0
00083E4C 6B00                       		bmi.s	loc_72CE6
00083E4E 323C 0019                  		move.w	#$19,d1
00083E52                            
00083E52                            loc_72CE0:
00083E52 D2C1                       		adda.w	d1,a1
00083E54 51C8 FFFC                  		dbf	d0,loc_72CE0
00083E58                            
00083E58                            loc_72CE6:
00083E58 D2FC 0015                  		adda.w	#$15,a1
00083E5C 45FA 0000                  		lea	byte_72D2C(pc),a2
00083E60 102D 001F                  		move.b	$1F(a5),d0
00083E64 0240 0007                  		andi.w	#7,d0
00083E68 183B 00B4                  		move.b	byte_72CAC(pc,d0.w),d4
00083E6C 162D 0009                  		move.b	9(a5),d3
00083E70 6B00                       		bmi.s	locret_72D16
00083E72 7A03                       		moveq	#3,d5
00083E74                            
00083E74                            loc_72D02:
00083E74 101A                       		move.b	(a2)+,d0
00083E76 1219                       		move.b	(a1)+,d1
00083E78 E20C                       		lsr.b	#1,d4
00083E7A 6400                       		bcc.s	loc_72D12
00083E7C D203                       		add.b	d3,d1
00083E7E 6500                       		bcs.s	loc_72D12
00083E80 4EBA F9E8                  		jsr	sub_72722(pc)
00083E84                            
00083E84                            loc_72D12:
00083E84 51CD FFEE                  		dbf	d5,loc_72D02
00083E88                            
00083E88                            locret_72D16:
00083E88 4E75                       		rts	
00083E8A                            ; End of function sub_72CB4
00083E8A                            
00083E8A                            ; ===========================================================================
00083E8A 3038 343C 5058 545C 6068   byte_72D18:	dc.b $30, $38, $34, $3C, $50, $58, $54,	$5C, $60, $68
00083E94 646C 7078 747C 8088 848C   		dc.b $64, $6C, $70, $78, $74, $7C, $80,	$88, $84, $8C
00083E9E 4048 444C                  byte_72D2C:	dc.b $40, $48, $44, $4C
00083EA2                            ; ===========================================================================
00083EA2                            
00083EA2                            loc_72D30:				; XREF: loc_72A64
00083EA2 08D5 0003                  		bset	#3,(a5)
00083EA6 2B4C 0014                  		move.l	a4,$14(a5)
00083EAA 1B5C 0018                  		move.b	(a4)+,$18(a5)
00083EAE 1B5C 0019                  		move.b	(a4)+,$19(a5)
00083EB2 1B5C 001A                  		move.b	(a4)+,$1A(a5)
00083EB6 101C                       		move.b	(a4)+,d0
00083EB8 E208                       		lsr.b	#1,d0
00083EBA 1B40 001B                  		move.b	d0,$1B(a5)
00083EBE 426D 001C                  		clr.w	$1C(a5)
00083EC2 4E75                       		rts	
00083EC4                            ; ===========================================================================
00083EC4                            
00083EC4                            loc_72D52:				; XREF: loc_72A64
00083EC4 08D5 0003                  		bset	#3,(a5)
00083EC8 4E75                       		rts	
00083ECA                            ; ===========================================================================
00083ECA                            
00083ECA                            loc_72D58:				; XREF: loc_72A64
00083ECA 0895 0007                  		bclr	#7,(a5)
00083ECE 0895 0004                  		bclr	#4,(a5)
00083ED2 4A2D 0001                  		tst.b	1(a5)
00083ED6 6B00                       		bmi.s	loc_72D74
00083ED8 4A2E 0008                  		tst.b	8(a6)
00083EDC 6B00 0000                  		bmi.w	loc_72E02
00083EE0 4EBA F964                  		jsr	sub_726FE(pc)
00083EE4 6000                       		bra.s	loc_72D78
00083EE6                            ; ===========================================================================
00083EE6                            
00083EE6                            loc_72D74:
00083EE6 4EBA FC2C                  		jsr	sub_729A0(pc)
00083EEA                            
00083EEA                            loc_72D78:
00083EEA 4A2E 000E                  		tst.b	$E(a6)
00083EEE 6A00 0000                  		bpl.w	loc_72E02
00083EF2 4216                       		clr.b	0(a6)
00083EF4 7000                       		moveq	#0,d0
00083EF6 102D 0001                  		move.b	1(a5),d0
00083EFA 6B00                       		bmi.s	loc_72DCC
00083EFC 41FA F4A4                  		lea	dword_722CC(pc),a0
00083F00 264D                       		movea.l	a5,a3
00083F02 0C00 0004                  		cmpi.b	#4,d0
00083F06 6600                       		bne.s	loc_72DA8
00083F08 4A2E 0370                  		tst.b	$370(a6)				; MJ: new SFX location
00083F0C 6A00                       		bpl.s	loc_72DA8
00083F0E 4BEE 0370                  		lea	$370(a6),a5				; MJ: new SFX location
00083F12 226E 0020                  		movea.l	$20(a6),a1
00083F16 6000                       		bra.s	loc_72DB8
00083F18                            ; ===========================================================================
00083F18                            
00083F18                            loc_72DA8:
00083F18 5500                       		subq.b	#2,d0
00083F1A E508                       		lsl.b	#2,d0
00083F1C 2A70 0000                  		movea.l	(a0,d0.w),a5
00083F20 4A15                       		tst.b	(a5)
00083F22 6A00                       		bpl.s	loc_72DC8
00083F24 226E 0018                  		movea.l	$18(a6),a1
00083F28                            
00083F28                            loc_72DB8:
00083F28 0895 0002                  		bclr	#2,(a5)
00083F2C 08D5 0001                  		bset	#1,(a5)
00083F30 102D 000B                  		move.b	$B(a5),d0
00083F34 4EBA FE8A                  		jsr	sub_72C4E(pc)
00083F38                            
00083F38                            loc_72DC8:
00083F38 2A4B                       		movea.l	a3,a5
00083F3A 6000                       		bra.s	loc_72E02
00083F3C                            ; ===========================================================================
00083F3C                            
00083F3C                            loc_72DCC:
00083F3C 41EE 03A0                  		lea	$3A0(a6),a0				; MJ: new SFX location
00083F40 4A10                       		tst.b	(a0)
00083F42 6A00                       		bpl.s	loc_72DE0
00083F44 0C00 00E0                  		cmpi.b	#$E0,d0
00083F48 6700                       		beq.s	loc_72DEA
00083F4A 0C00 00C0                  		cmpi.b	#$C0,d0
00083F4E 6700                       		beq.s	loc_72DEA
00083F50                            
00083F50                            loc_72DE0:
00083F50 41FA F450                  		lea	dword_722CC(pc),a0
00083F54 E608                       		lsr.b	#3,d0
00083F56 2070 0000                  		movea.l	(a0,d0.w),a0
00083F5A                            
00083F5A                            loc_72DEA:
00083F5A 0890 0002                  		bclr	#2,(a0)
00083F5E 08D0 0001                  		bset	#1,(a0)
00083F62 0C28 00E0 0001             		cmpi.b	#$E0,1(a0)
00083F68 6600                       		bne.s	loc_72E02
00083F6A 13E8 001F 00C0 0011        		move.b	$1F(a0),($C00011).l
00083F72                            
00083F72                            loc_72E02:
00083F72 584F                       		addq.w	#4,sp					; MJ: changed to 4 (go back, but not out of sound driver)
00083F74 4A2E 0008                  		tst.b	$08(a6)					; MJ: is this a PCM channel?
00083F78 6600                       		bne.s	FlagF2_NoWaitFrame			; MJ: if so, branch
00083F7A 584F                       		addq.w	#4,sp					; MJ: go back outside the sound driver like normal
00083F7C                            
00083F7C                            FlagF2_NoWaitFrame:
00083F7C 4E75                       		rts	
00083F7E                            ; ===========================================================================
00083F7E                            
00083F7E                            loc_72E06:				; XREF: loc_72A64
00083F7E 1B7C 00E0 0001             		move.b	#$E0,1(a5)
00083F84 1B5C 001F                  		move.b	(a4)+,$1F(a5)
00083F88 0815 0002                  		btst	#2,(a5)
00083F8C 6600                       		bne.s	locret_72E1E 
00083F8E 102C FFFF                  		move.b	-1(a4),d0				; MJ: reload F3 setting to d0
00083F92 13C0 00C0 0011             		move.b	d0,($C00011).l				; MJ: save F3 setting (should be EX (PSG 4) related)
00083F98 0200 0003                  		andi.b	#%00000011,d0				; MJ: get only frequency mode bits
00083F9C 0C00 0003                  		cmpi.b	#%00000011,d0				; MJ: has it been set to use PSG 3's frequency?
00083FA0 6600                       		bne.s	locret_72E1E				; MJ: if not, branch
00083FA2 13FC 00DF 00C0 0011        		move.b	#%11011111,($C00011).l			; MJ: mute PSG 3's volume
00083FAA                            
00083FAA                            locret_72E1E:
00083FAA 4E75                       		rts	
00083FAC                            ; ===========================================================================
00083FAC                            
00083FAC                            loc_72E20:				; XREF: loc_72A64
00083FAC 0895 0003                  		bclr	#3,(a5)
00083FB0 4E75                       		rts	
00083FB2                            ; ===========================================================================
00083FB2                            
00083FB2                            loc_72E26:				; XREF: loc_72A64
00083FB2 1B5C 000B                  		move.b	(a4)+,$B(a5)
00083FB6 4E75                       		rts	
00083FB8                            ; ===========================================================================
00083FB8                            
00083FB8                            loc_72E2C:				; XREF: loc_72A64
00083FB8 101C                       		move.b	(a4)+,d0
00083FBA E148                       		lsl.w	#8,d0
00083FBC 101C                       		move.b	(a4)+,d0
00083FBE D8C0                       		adda.w	d0,a4
00083FC0 534C                       		subq.w	#1,a4
00083FC2 4E75                       		rts	
00083FC4                            ; ===========================================================================
00083FC4                            
00083FC4                            loc_72E38:				; XREF: loc_72A64
00083FC4 7000                       		moveq	#0,d0
00083FC6 101C                       		move.b	(a4)+,d0
00083FC8 121C                       		move.b	(a4)+,d1
00083FCA 4A35 0024                  		tst.b	$24(a5,d0.w)
00083FCE 6600                       		bne.s	loc_72E48
00083FD0 1B81 0024                  		move.b	d1,$24(a5,d0.w)
00083FD4                            
00083FD4                            loc_72E48:
00083FD4 5335 0024                  		subq.b	#1,$24(a5,d0.w)
00083FD8 66DE                       		bne.s	loc_72E2C
00083FDA 544C                       		addq.w	#2,a4
00083FDC 4E75                       		rts	
00083FDE                            ; ===========================================================================
00083FDE                            
00083FDE                            loc_72E52:				; XREF: loc_72A64
00083FDE 7000                       		moveq	#0,d0
00083FE0 102D 000D                  		move.b	$D(a5),d0
00083FE4 5900                       		subq.b	#4,d0
00083FE6 2B8C 0000                  		move.l	a4,(a5,d0.w)
00083FEA 1B40 000D                  		move.b	d0,$D(a5)
00083FEE 60C8                       		bra.s	loc_72E2C
00083FF0                            ; ===========================================================================
00083FF0                            
00083FF0                            loc_72E64:				; XREF: loc_72A64
00083FF0 103C 0088                  		move.b	#$88,d0
00083FF4 123C 000F                  		move.b	#$F,d1
00083FF8 4EBA F87C                  		jsr	sub_7272E(pc)
00083FFC 103C 008C                  		move.b	#$8C,d0
00084000 123C 000F                  		move.b	#$F,d1
00084004 6000 F870                  		bra.w	sub_7272E
00084008                            ; ===========================================================================
00084008                            Z80ROM:		incbin	"Dual PCM\Z80.bin"
00086008                            Z80ROM_End:	even
00086008                            Music81:	incbin	sound\music81.bin
000873D6 00                         		even
000873D6                            Music82:	incbin	sound\music82.bin
0008CF00                            		even
0008CF00                            Music83:	incbin	sound\music83.bin
0008E3C8 00                         		even
0008E3C8                            Music84:	incbin	sound\music84.bin
0008FA98 00                         		even
0008FA98                            Music85:	incbin	sound\music85.bin
000909C4                            		even
000909C4                            Music86:	incbin	sound\music86.bin
00093BE6 00                         		even
00093BE6                            Music87:	incbin	sound\music87.bin
00093DD2 00                         		even
00093DD2                            Music88:	incbin	sound\music88.bin
00093EC6 00                         		even
00093EC6                            Music89:	incbin	sound\music89.bin
0009524A 00                         		even
0009524A                            Music8A:	incbin	sound\music8A.bin
000A798A 00                         		even
000A798A                            Music8B:	incbin	sound\music8B.bin
000A8A6A 00                         		even
000A8A6A                            Music8C:	incbin	sound\music8C.bin
000AB8A0 00                         		even
000AB8A0                            Music8D:	incbin	sound\music8D.bin
000AC832 00                         		even
000AC832                            Music8E:	incbin	sound\music8E.bin
000ACB44 00                         		even
000ACB44                            Music8F:	incbin	sound\music8F.bin
000ACC9A 00                         		even
000ACC9A                            Music90:	incbin	sound\music90.bin
000ACDFE 00                         		even
000ACDFE                            Music91:	incbin	sound\music91.bin
000BA5FA 00                         		even
000BA5FA                            Music92:	incbin	sound\music92.bin
000BA72A 00                         		even
000BA72A                            Music93:	incbin	sound\music93.bin
000BA7FE 00                         		even
000BA7FE                            Music94:	incbin	sound\music94.bin
000BC498                            		even
000BC498                            Music95:	incbin	sound\music95.bin
000BF240 00                         		even
000BF240                            Music96:	incbin	sound\music96.bin
000C0930 00                         		even
000C0930                            Music97:	incbin	sound\music97.bin
000C6D4A 00                         		even
000C6D4A                            Music98:	incbin	sound\music98.bin
000CAB0C 00                         		even
000CAB0C                            Music99:	incbin	sound\music92.bin
000CAC3C 00                         		even
000CAC3C                            Music9A:	incbin	sound\music9A.bin
000CCC0A                            		even
000CCC0A                            Music9B:	incbin	sound\music9B.bin
000D2FBC                            		even
000D2FBC                            Music9C:	incbin	sound\music9C.bin
000D5412                            		even
000D5412                            Music9D:	incbin	sound\music9D.bin
000D85A4                            		even
000D85A4                            Music9E:	incbin	sound\music9E.bin
000DF154 00                         		even
000DF154                            Music9F:	incbin	sound\music9F.bin
000E6274 00                         		even
000E6274                            ; ---------------------------------------------------------------------------
000E6274                            ; Sound	effect pointers
000E6274                            ; ---------------------------------------------------------------------------
000E6274 0000 0000 0000 0000 0000+  SoundIndex:	dc.l SoundA0, SoundA1, SoundA2
000E6280 0000 0000 0000 0000 0000+  		dc.l SoundA3, SoundA4, SoundA5
000E628C 0000 0000 0000 0000 0000+  		dc.l SoundA6, SoundA7, SoundA8
000E6298 0000 0000 0000 0000 0000+  		dc.l SoundA9, SoundAA, SoundAB
000E62A4 0000 0000 0000 0000 0000+  		dc.l SoundAC, SoundAD, SoundAE
000E62B0 0000 0000 0000 0000 0000+  		dc.l SoundAF, SoundB0, SoundB1
000E62BC 0000 0000 0000 0000 0000+  		dc.l SoundB2, SoundB3, SoundB4
000E62C8 0000 0000 0000 0000 0000+  		dc.l SoundB5, SoundB6, SoundB7
000E62D4 0000 0000 0000 0000 0000+  		dc.l SoundB8, SoundB9, SoundBA
000E62E0 0000 0000 0000 0000 0000+  		dc.l SoundBB, SoundBC, SoundBD
000E62EC 0000 0000 0000 0000 0000+  		dc.l SoundBE, SoundBF, SoundC0
000E62F8 0000 0000 0000 0000 0000+  		dc.l SoundC1, SoundC2, SoundC3
000E6304 0000 0000 0000 0000 0000+  		dc.l SoundC4, SoundC5, SoundC6
000E6310 0000 0000 0000 0000 0000+  		dc.l SoundC7, SoundC8, SoundC9
000E631C 0000 0000 0000 0000 0000+  		dc.l SoundCA, SoundCB, SoundCC
000E6328 0000 0000 0000 0000 0000+  		dc.l SoundCD, SoundCE, SoundCF
000E6334 0000 0000                  		dc.l SoundD1
000E6338                            
000E6338 0000 0000                  SoundD0Index:	dc.l SoundD0
000E633C                            SoundA0:	incbin	sound\soundA0.bin
000E6352                            		even
000E6352                            SoundA1:	incbin	sound\soundA1.bin
000E637C                            		even
000E637C                            SoundA2:	incbin	sound\soundA2.bin
000E639C                            		even
000E639C                            SoundA3:	incbin	sound\soundA3.bin
000E63CE                            		even
000E63CE                            SoundA4:	incbin	sound\soundA4.bin
000E6404                            		even
000E6404                            SoundA5:	incbin	sound\soundA5.bin
000E6430                            		even
000E6430                            SoundA6:	incbin	sound\soundA6.bin
000E6460                            		even
000E6460                            SoundA7:	incbin	sound\soundA7.bin
000E6490                            		even
000E6490                            SoundA8:	incbin	sound\soundA8.bin
000E64C4                            		even
000E64C4                            SoundA9:	incbin	sound\soundA9.bin
000E64D6                            		even
000E64D6                            SoundAA:	incbin	sound\soundAA.bin
000E6518                            		even
000E6518                            SoundAB:	incbin	sound\soundAB.bin
000E6538                            		even
000E6538                            SoundAC:	incbin	sound\soundAC.bin
000E656C                            		even
000E656C                            SoundAD:	incbin	sound\soundAD.bin
000E65A2                            		even
000E65A2                            SoundAE:	incbin	sound\soundAE.bin
000E65EC                            		even
000E65EC                            SoundAF:	incbin	sound\soundAF.bin
000E661A                            		even
000E661A                            SoundB0:	incbin	sound\soundB0.bin
000E664C                            		even
000E664C                            SoundB1:	incbin	sound\soundB1.bin
000E6678                            		even
000E6678                            SoundB2:	incbin	sound\soundB2.bin
000E66C8                            		even
000E66C8                            SoundB3:	incbin	sound\soundB3.bin
000E6712                            		even
000E6712                            SoundB4:	incbin	sound\soundB4.bin
000E676E                            		even
000E676E                            SoundB5:	incbin	sound\soundB5.bin
000E679C                            		even
000E679C                            SoundB6:	incbin	sound\soundB6.bin
000E67BA                            		even
000E67BA                            SoundB7:	incbin	sound\soundB7.bin
000E67F6                            		even
000E67F6                            SoundB8:	incbin	sound\soundB8.bin
000E6814                            		even
000E6814                            SoundB9:	incbin	sound\soundB9.bin
000E6878                            		even
000E6878                            SoundBA:	incbin	sound\soundBA.bin
000E68A0                            		even
000E68A0                            SoundBB:	incbin	sound\soundBB.bin
000E68CC                            		even
000E68CC                            SoundBC:	incbin	sound\soundBC.bin
000E690E                            		even
000E690E                            SoundBD:	incbin	sound\soundBD.bin
000E6962                            		even
000E6962                            SoundBE:	incbin	sound\soundBE.bin
000E699C                            		even
000E699C                            SoundBF:	incbin	sound\soundBF.bin
000E6A0E                            		even
000E6A0E                            SoundC0:	incbin	sound\soundC0.bin
000E6A3C                            		even
000E6A3C                            SoundC1:	incbin	sound\soundC1.bin
000E6A76                            		even
000E6A76                            SoundC2:	incbin	sound\soundC2.bin
000E6AA0                            		even
000E6AA0                            SoundC3:	incbin	sound\soundC3.bin
000E6B1A                            		even
000E6B1A                            SoundC4:	incbin	sound\soundC4.bin
000E6B42                            		even
000E6B42                            SoundC5:	incbin	sound\soundC5.bin
000E6BAA                            		even
000E6BAA                            SoundC6:	incbin	sound\soundC6.bin
000E6BEC                            		even
000E6BEC                            SoundC7:	incbin	sound\soundC7.bin
000E6C1A                            		even
000E6C1A                            SoundC8:	incbin	sound\soundC8.bin
000E6C2C                            		even
000E6C2C                            SoundC9:	incbin	sound\soundC9.bin
000E6C5A                            		even
000E6C5A                            SoundCA:	incbin	sound\soundCA.bin
000E6C88                            		even
000E6C88                            SoundCB:	incbin	sound\soundCB.bin
000E6CD4                            		even
000E6CD4                            SoundCC:	incbin	sound\soundCC.bin
000E6D0E                            		even
000E6D0E                            SoundCD:	incbin	sound\soundCD.bin
000E6D1C                            		even
000E6D1C                            SoundCE:	incbin	sound\soundCE.bin
000E6D4A                            		even
000E6D4A                            SoundCF:	incbin	sound\soundCF.bin
000E6D82                            		even
000E6D82                            SoundD0:	incbin	sound\soundD0.bin
000E6DBC                            		even
000E6DBC                            SoundD1:	incbin	sound\soundD1.bin
000E6DF8                            		even			
000E6DF8                            SegaPCM:	incbin	sound\segapcm.wav,$3A
000F847E 00                         SegaPCM_End:	even
000F847E                            
000F847E                            ; ===========================================================================
000F847E                            ; ---------------------------------------------------------------------------
000F847E                            ; Sample 68k PCM list
000F847E                            ; ---------------------------------------------------------------------------
000F847E                            
000F847E 0000 0000                  SampleList:		dc.l	StopSample			; 80 (THIS IS A REST NOTE, DO NOT EDIT...)
000F8482 0000 0000                  			dc.l	Sonic1Kick			; 81
000F8486 0000 0000                  			dc.l	Sonic1Snare			; 82
000F848A 0000 0000                  			dc.l	Sonic1TimpaniLow		; 83
000F848E 0000 0000                  			dc.l	ChaotixCrash			; 84
000F8492 0000 0000                   			dc.l	ChaotixSplash			; 85
000F8496 0000 0000                  			dc.l	ChaotixTom1			; 86
000F849A 0000 0000                  			dc.l	ChaotixTom2			; 87
000F849E 0000 0000                  			dc.l	Sonic1TimpaniHigh		; 88
000F84A2 0000 0000                  			dc.l	Sonic1TimpaniMid		; 89
000F84A6 0000 0000                  			dc.l	Sonic1TimpaniLow		; 8A
000F84AA 0000 0000                  			dc.l	Sonic1TimpaniLower		; 8B
000F84AE 0000 0000                  			dc.l	Sonic3CleanSnare		; 8C
000F84B2 0000 0000                  			dc.l	KSTHi		; 8D
000F84B6 0000 0000                  			dc.l	KSTLo		; 8E
000F84BA 0000 0000                  			dc.l	MainCrash		; 8F
000F84BE 0000 0000                  			dc.l	RideCymbal		; 90
000F84C2 0000 0000                  			dc.l	Sonic1SnareSonic3Kick		; 91
000F84C6 0000 0000                  			dc.l	Sonic3Kick		; 92
000F84CA 0000 0000                  			dc.l	Tom1		; 93
000F84CE 0000 0000                  			dc.l	Tom2		; 94
000F84D2 0000 0000                  			dc.l	Tom3		; 95
000F84D6 0000 0000                  			dc.l	Tom4		; 96
000F84DA 0000 0000                  			dc.l	Sonic2Clap		; 97
000F84DE 0000 0000                  			dc.l	Sonic1SnareSonic2Clap		; 98
000F84E2 0000 0000                  			dc.l	S1STom1		; 99	
000F84E6 0000 0000                  			dc.l	S1STom2		; 9A			
000F84EA 0000 0000                  			dc.l	S1STom3		; 9B
000F84EE 0000 0000                  			dc.l	S1STom4		; 9C			
000F84F2 0000 0000                  			dc.l	S1SLLZK		; 9D
000F84F6 0000 0000                  			dc.l	LLZK		; 9E			
000F84FA 0000 0000                  			dc.l	Bongo1		; 9F
000F84FE 0000 0000                  			dc.l	Bongo2		; A0
000F8502 0000 0000                  			dc.l	S1SnareCrash	;A1
000F8506 0000 0000                  			dc.l	S1SnareKick	;A2
000F850A 0000 0000                  			dc.l	MainCrashWoo	;A3
000F850E 0000 0000                  			dc.l	Woo		;A4
000F8512 0000 0000                  			dc.l	GoS1Snare	;A5
000F8516 0000 0000                  			dc.l	CmonRoll	;A6
000F851A 0000 0000                  			dc.l	ReverseCymbal	;A7
000F851E 0000 0000                  			dc.l	Cutscene1	;A8
000F8522 0000 0000                  			dc.l	Cutscene2	;A9
000F8526 0000 0000                  			dc.l	Snare3	;AA
000F852A 0000 0000                  			dc.l	Snare3Crash	;AB
000F852E 0000 0000                  			dc.l	EGGStation	;AC
000F8532                            ; ---------------------------------------------------------------------------
000F8532                            ; Sample z80 pointers
000F8532                            ; ---------------------------------------------------------------------------
000F8532                            
000F8532 0000 00                    StopSample:		dcz80	SWF_StopSample
000F8535 0000 00                    Sonic1Kick:		dcz80	SWF_S1Kick
000F8538 0000 00                    Sonic1Snare:		dcz80	SWF_S1Snare
000F853B 0000 00                    Sonic1TimpaniHigh:	dcz80	SWF_S1TimpaniHigh
000F853E 0000 00                    Sonic1TimpaniMid:	dcz80	SWF_S1TimpaniMid
000F8541 0000 00                    Sonic1TimpaniLow:	dcz80	SWF_S1TimpaniLow
000F8544 0000 00                    Sonic1TimpaniLower:	dcz80	SWF_S1TimpaniLower
000F8547 0000 00                    ChaotixCrash:	dcz80	SWF_ChaotixCrash
000F854A 0000 00                    ChaotixSplash:	dcz80	SWF_ChaotixSplash
000F854D 0000 00                    ChaotixTom1:	dcz80	SWF_ChaotixTom1
000F8550 0000 00                    ChaotixTom2:	dcz80	SWF_ChaotixTom2
000F8553 0000 00                    Sonic3CleanSnare:	dcz80	SWF_Sonic3CleanSnare
000F8556 0000 00                    KSTHi:	dcz80	SWF_KSTHi
000F8559 0000 00                    KSTLo:	dcz80	SWF_KSTLo
000F855C 0000 00                    MainCrash:	dcz80	SWF_MainCrash
000F855F 0000 00                    RideCymbal:	dcz80	SWF_RideCymbal
000F8562 0000 00                    Sonic1SnareSonic3Kick:	dcz80	SWF_Sonic1SnareSonic3Kick
000F8565 0000 00                    Sonic3Kick:	dcz80	SWF_Sonic3Kick
000F8568 0000 00                    Tom1:	dcz80	SWF_Tom1
000F856B 0000 00                    Tom2:	dcz80	SWF_Tom2
000F856E 0000 00                    Tom3:	dcz80	SWF_Tom3
000F8571 0000 00                    Tom4:	dcz80	SWF_Tom4
000F8574 0000 00                    Sonic2Clap:	dcz80	SWF_Sonic2Clap
000F8577 0000 00                    Sonic1SnareSonic2Clap:	dcz80	SWF_Sonic1SnareSonic2Clap
000F857A 0000 00                    S1STom1:	dcz80	SWF_S1STom1
000F857D 0000 00                    S1STom2:	dcz80	SWF_S1STom2
000F8580 0000 00                    S1STom3:	dcz80	SWF_S1STom3
000F8583 0000 00                    S1STom4:	dcz80	SWF_S1STom4
000F8586 0000 00                    LLZK:	dcz80	SWF_LLZK
000F8589 0000 00                    S1SLLZK:	dcz80	SWF_S1SLLZK
000F858C 0000 00                    Bongo1:	dcz80	SWF_Bongo1
000F858F 0000 00                    Bongo2:	dcz80	SWF_Bongo2
000F8592 0000 00                    S1SnareCrash: dcz80 SWF_S1SnareCrash
000F8595 0000 00                    S1SnareKick: dcz80 SWF_S1SnareKick
000F8598 0000 00                    MainCrashWoo: dcz80 SWF_MainCrashWoo
000F859B 0000 00                    Woo: dcz80 SWF_Woo
000F859E 0000 00                    GoS1Snare: dcz80 SWF_GoS1Snare
000F85A1 0000 00                    CmonRoll: dcz80 SWF_CmonRoll
000F85A4 0000 00                    ReverseCymbal: dcz80 SWF_ReverseCymbal
000F85A7 0000 00                    Cutscene1: dcz80 SWF_Cutscene1
000F85AA 0000 00                    Cutscene2: dcz80 SWF_Cutscene2
000F85AD 0000 00                    Snare3: dcz80 SWF_Snare3
000F85B0 0000 00                    Snare3Crash: dcz80 SWF_Snare3Crash
000F85B3 0000 00                    EGGStation: dcz80 SWF_EGGStation
000F85B6                            ; ---------------------------------------------------------------------------
000F85B6                            ; Sample file includes
000F85B6                            ; ---------------------------------------------------------------------------
000F85B6 0000 0000 0000 0000 0000   			align	$20,$FF
000F85C0                            SWF_StopSample:		dcb.b	$7FFF,$00
001005BF 80                         			dc.b	$80
001005C0                            ; ---------------------------------------------------------------------------
001005C0                            SWF_S1Kick:		incbin	"Dual PCM\Samples\incswf\Sonic 1 Kick.swf"
001016E0                            SWF_S1Snare:		incbin	"Dual PCM\Samples\incswf\Sonic 1 Snare.swf"
00102420                            SWF_S1TimpaniHigh:	incbin	"Dual PCM\Samples\incswf\Sonic 1 Timpani High.swf"
00106AC0                            SWF_S1TimpaniMid:	incbin	"Dual PCM\Samples\incswf\Sonic 1 Timpani Mid.swf"
0010BA00                            SWF_S1TimpaniLow:	incbin	"Dual PCM\Samples\incswf\Sonic 1 Timpani Low.swf"
00111840                            SWF_S1TimpaniLower:	incbin	"Dual PCM\Samples\incswf\Sonic 1 Timpani Lower.swf"
00117C20                            SWF_ChaotixCrash:	incbin	"Dual PCM\Samples\incswf\Knuckles Chaotix Crash Cymbal.swf"
0011F420                            SWF_ChaotixSplash:	incbin	"Dual PCM\Samples\incswf\Knuckles Chaotix Splash Cymbal.swf"
00121AC0                            SWF_ChaotixTom1:	incbin	"Dual PCM\Samples\incswf\Knuckles Chaotix Tom 1.swf"
00128B00                            SWF_ChaotixTom2:	incbin	"Dual PCM\Samples\incswf\Knuckles Chaotix Tom 2.swf"
00129C60                            SWF_Sonic3CleanSnare:	incbin	"Dual PCM\Samples\incswf\Sonic 3 Cleaner Snare.swf"
0012AB40                            SWF_KSTHi:	incbin	"Dual PCM\Samples\incswf\KSTHi.swf"
0012F1E0                            SWF_KSTLo:	incbin	"Dual PCM\Samples\incswf\KSTLo.swf"
00135020                            SWF_MainCrash:	incbin	"Dual PCM\Samples\incswf\MainCrash.swf"
00139F60                            SWF_RideCymbal:	incbin	"Dual PCM\Samples\incswf\RideCymbal.swf"
0013BDC0                            SWF_Sonic1SnareSonic3Kick:	incbin	"Dual PCM\Samples\incswf\Sonic 1 Snare and Sonic 3 Kick.swf"
0013CAE0                            SWF_Sonic3Kick:	incbin	"Dual PCM\Samples\incswf\Sonic 3 Kick.swf"
0013D100                            SWF_Tom1:	incbin	"Dual PCM\Samples\incswf\Tom1.swf"
0013DFE0                            SWF_Tom2:	incbin	"Dual PCM\Samples\incswf\Tom2.swf"
0013F1C0                            SWF_Tom3:	incbin	"Dual PCM\Samples\incswf\Tom3.swf"
001407A0                            SWF_Tom4:	incbin	"Dual PCM\Samples\incswf\Tom4.swf"
00142740                            SWF_Sonic2Clap:	incbin	"Dual PCM\Samples\incswf\Sonic 2 Clap.swf"
00143460                            SWF_Sonic1SnareSonic2Clap:	incbin	"Dual PCM\Samples\incswf\Sonic 1 Snare and Sonic 2 Clap.swf"
001441A0                            SWF_S1STom1:	incbin	"Dual PCM\Samples\incswf\S1STom1.swf"
00145080                            SWF_S1STom2:	incbin	"Dual PCM\Samples\incswf\S1STom2.swf"
00146260                            SWF_S1STom3:	incbin	"Dual PCM\Samples\incswf\S1STom3.swf"
00147840                            SWF_S1STom4:	incbin	"Dual PCM\Samples\incswf\S1STom4.swf"
001497E0                            SWF_LLZK:	incbin	"Dual PCM\Samples\incswf\LLZK.swf"
0014B260                            SWF_S1SLLZK:	incbin	"Dual PCM\Samples\incswf\S1SLLZK.swf"
0014CCE0                            SWF_Bongo1:	incbin	"Dual PCM\Samples\incswf\Bongo1.swf"
0014D680                            SWF_Bongo2:	incbin	"Dual PCM\Samples\incswf\Bongo2.swf"
0014E3C0                            SWF_S1SnareCrash:	incbin	"Dual PCM\Samples\incswf\S1Snare and MainCrash.swf"
001532E0                            SWF_S1SnareKick:	incbin	"Dual PCM\Samples\incswf\S1SnareKick.swf"
00154400                            SWF_MainCrashWoo:	incbin	"Dual PCM\Samples\incswf\MainCrashWoo.swf"
00159320                            SWF_Woo:	incbin	"Dual PCM\Samples\incswf\Woo.swf"
0015A860                            SWF_GoS1Snare:	incbin	"Dual PCM\Samples\incswf\GoS1Snare.swf"
0015BC60                            SWF_CmonRoll:	incbin	"Dual PCM\Samples\incswf\CmonRoll.swf"
0015E9A0                            SWF_ReverseCymbal:	incbin	"Dual PCM\Samples\incswf\Reverse cymbal.swf"
00162220                            SWF_Cutscene1:	incbin	"Dual PCM\Samples\incswf\Cutscene1.swf"
00167140                            SWF_Cutscene2:	incbin	"Dual PCM\Samples\incswf\Cutscene2.swf"
0016C060                            SWF_Snare3:	incbin	"Dual PCM\Samples\incswf\Snare3.swf"
0016D560                            SWF_Snare3Crash:	incbin	"Dual PCM\Samples\incswf\Snare3Crash.swf"
00172480                            SWF_EGGStation:	incbin	"Dual PCM\Samples\incswf\EGGStation.swf"
001773A0                            ; ===============================================================
001773A0                            ; ---------------------------------------------------------------
001773A0                            ; Error handling module
001773A0                            ; ---------------------------------------------------------------
001773A0                             
001773A0 4EBA 0000                  BusError:   jsr ErrorHandler(pc)
001773A4 4255 5320 4552 524F 5200           dc.b    "BUS ERROR",0           ; text
001773AE 01                                 dc.b    1               ; extended stack frame
001773B0 00                                 even
001773B0                             
001773B0 4EBA 0000                  AddressError:   jsr ErrorHandler(pc)
001773B4 4144 4452 4553 5320 4552+          dc.b    "ADDRESS ERROR",0       ; text
001773C2 01                                 dc.b    1               ; extended stack frame
001773C4 00                                 even
001773C4                             
001773C4 4EBA 0000                  IllegalInstr:   jsr ErrorHandler(pc)
001773C8 494C 4C45 4741 4C20 494E+          dc.b    "ILLEGAL INSTRUCTION",0     ; text
001773DC 00                                 dc.b    0               ; extended stack frame
001773DE 00                                 even
001773DE                             
001773DE 4EBA 0000                  ZeroDivide: jsr ErrorHandler(pc)
001773E2 5A45 524F 2044 4956 4944+          dc.b    "ZERO DIVIDE",0         ; text
001773EE 00                                 dc.b    0               ; extended stack frame
001773F0 00                                 even
001773F0                             
001773F0 4EBA 0000                  ChkInstr:   jsr ErrorHandler(pc)
001773F4 4348 4B20 494E 5354 5255+          dc.b    "CHK INSTRUCTION",0         ; text
00177404 00                                 dc.b    0               ; extended stack frame
00177406 00                                 even
00177406                             
00177406 4EBA 0000                  TrapvInstr: jsr ErrorHandler(pc)
0017740A 5452 4150 5620 494E 5354+          dc.b    "TRAPV INSTRUCTION",0       ; text
0017741C 00                                 dc.b    0               ; extended stack frame
0017741E 00                                 even
0017741E                             
0017741E 4EBA 0000                  PrivilegeViol:  jsr ErrorHandler(pc)
00177422 5052 4956 494C 4547 4520+          dc.b    "PRIVILEGE VIOLATION",0     ; text
00177436 00                                 dc.b    0               ; extended stack frame
00177438 00                                 even
00177438                             
00177438 4EBA 0000                  Trace:      jsr ErrorHandler(pc)
0017743C 5452 4143 4500                     dc.b    "TRACE",0           ; text
00177442 00                                 dc.b    0               ; extended stack frame
00177444 00                                 even
00177444                             
00177444 4EBA 0000                  Line1010Emu:    jsr ErrorHandler(pc)
00177448 4C49 4E45 2031 3031 3020+          dc.b    "LINE 1010 EMULATOR",0      ; text
0017745B 00                                 dc.b    0               ; extended stack frame
0017745C                                    even
0017745C                             
0017745C 4EBA 0000                  Line1111Emu:    jsr ErrorHandler(pc)
00177460 4C49 4E45 2031 3131 3120+          dc.b    "LINE 1111 EMULATOR",0      ; text
00177473 00                                 dc.b    0               ; extended stack frame
00177474                                    even
00177474                             
00177474 4EBA 0000                  ErrorExcept:    jsr ErrorHandler(pc)
00177478 4552 524F 5220 4558 4345+          dc.b    "ERROR EXCEPTION",0         ; text
00177488 00                                 dc.b    0               ; extended stack frame
0017748A 00                                 even
0017748A                             
0017748A                            ErrorHandler:   incbin  "ErrorHandler.bin"
00177C6E                            
00177C6E                            	include	"s2_menu.asm"	; Sonic 2 level select
00177C6E                            ;===============================================================================
00177C6E                            ; Menu do Sonic 2 No Sonic 1 reprogramado por Esrael L. G. Neto
00177C6E                            ; [ In�cio ]
00177C6E                            ;
00177C6E                            ; O c�digo deste menu foi desenvolvido para funcionar com
00177C6E                            ; o disassembly do Sonic 1 feito por -> drx (www.hacking-cult.org)
00177C6E                            ; 
00177C6E                            ; Se estiver usando um disassembly diferente modifique os jumps no final do 
00177C6E                            ; c�digo para que aponte para as rotinas equivalentes.
00177C6E                            ; 
00177C6E                            ; Para pode utilizar este menu basta fazer a seguinte modifica��o no c�digo 
00177C6E                            ; original:
00177C6E                            ; Localize o label  -> loc_3242 adicione -> jmp     Level_Select_Menu
00177C6E                            ; O c�digo deve ficar como abaixo
00177C6E                            ;               ......................
00177C6E                            ; loc_3242:
00177C6E                            ;		tst.b	($FFFFFFE0).w
00177C6E                            ;		beq.w	PlayLevel	
00177C6E                            ;		btst	#6,($FFFFF604).w 
00177C6E                            ;		beq.w	PlayLevel	  		
00177C6E                            ;		jmp     Level_Select_Menu ; <- Carrega o Menu do Sonic 2	
00177C6E                            ;		moveq	#2,d0		
00177C6E                            ;		bsr.w	PalLoad		 
00177C6E                            ;               ...............
00177C6E                            ;
00177C6E                            ; N�o esque�a de incluir este asm em seu c�digo com a diretiva include:
00177C6E                            ;               include 's2_menu.asm'
00177C6E                            ;===============================================================================  
00177C6E =FFFFFFE1                  Slow_Motion_Flag      equ $FFFFFFE1
00177C6E =FFFFFFE2                  Debug_Mode_Flag       equ $FFFFFFE2
00177C6E                            
00177C6E =00000083                  Level_Select_Menu_snd   = $0083
00177C6E =00000093                  Emerald_Snd             = $0093
00177C6E =000000B5                  Ring_Snd                = $00B5
00177C6E =000000E0                  Volume_Down             = $00E0
00177C6E =000000E4                  Stop_Sound              = $00E4
00177C6E                            ;-------------------------------------------------------------------------------
00177C6E                            Level_Select_Menu:
00177C6E 103C 00E4                                  move.b  #Stop_Sound, D0
00177C72 6100 0000                                  bsr     Menu_Play_Music
00177C76 6100 0000                                  bsr     Menu_Pal_FadeFrom
00177C7A 46FC 2700                                  move    #$2700, SR
00177C7E 3038 F60C                                  move.w  ($FFFFF60C).w, D0
00177C82 0200 00BF                                  andi.b  #$BF, D0
00177C86 33C0 00C0 0004                             move.w  D0, ($00C00004)
00177C8C 6100 0000                                  bsr     Menu_ClearScreen
00177C90 4DF9 00C0 0004                             lea     ($00C00004), A6
00177C96 3CBC 8004                                  move.w  #$8004, (A6)
00177C9A 3CBC 8230                                  move.w  #$8230, (A6)
00177C9E 3CBC 8407                                  move.w  #$8407, (A6)
00177CA2 3CBC 8230                                  move.w  #$8230, (A6)
00177CA6 3CBC 8700                                  move.w  #$8700, (A6)
00177CAA 3CBC 8C81                                  move.w  #$8C81, (A6)
00177CAE 3CBC 9001                                  move.w  #$9001, (A6)
00177CB2 43F8 AC00                                  lea     ($FFFFAC00).w, A1
00177CB6 7000                                       moveq   #$00, D0
00177CB8 323C 00FF                                  move.w  #$00FF, D1
00177CBC                            Offset_0x026ACA:
00177CBC 22C0                                       move.l  D0, (A1)+
00177CBE 51C9 FFFC                                  dbra    D1, Offset_0x026ACA
00177CC2 43F8 B000                                  lea     ($FFFFB000).w, A1
00177CC6 7000                                       moveq   #$00, D0
00177CC8 323C 07FF                                  move.w  #$07FF, D1
00177CCC                            Offset_0x026ADA:
00177CCC 22C0                                       move.l  D0, (A1)+
00177CCE 51C9 FFFC                                  dbra    D1, Offset_0x026ADA
00177CD2 4278 DC00                                  clr.w   ($FFFFDC00).w
00177CD6 21FC FFFF DC00 DCFC                        move.l  #$FFFFDC00, ($FFFFDCFC).w
00177CDE 23FC 4200 0000 00C0 0004                   move.l  #$42000000, ($00C00004)
00177CE8 41F9 0000 0000                             lea     (Menu_Font), A0
00177CEE 6100 0000                                  bsr     Menu_NemesisDec
00177CF2 23FC 5200 0000 00C0 0004                   move.l  #$52000000, ($00C00004)
00177CFC 41F9 0000 0000                             lea     (Level_Icons), A0
00177D02 4EB9 0000 0000                             jsr     Menu_NemesisDec
00177D08                            ;-------------------------------------------------------------------------------                
00177D08                            ; Carrega o Mapeamento do Fundo Sonic/Miles               
00177D08                            ;-------------------------------------------------------------------------------
00177D08 43F9 FFFF 0000                             lea     ($FFFF0000), A1
00177D0E 41F9 0000 0000                             lea     (Menu_Mappings), A0
00177D14 303C 6000                                  move.w  #$6000, D0
00177D18 6100 0000                                  bsr     Menu_EnigmaDec
00177D1C 43F9 FFFF 0000                             lea     ($FFFF0000), A1
00177D22 203C 6000 0003                             move.l  #$60000003, D0
00177D28 7227                                       moveq   #$27, D1
00177D2A 741B                                       moveq   #$1B, D2
00177D2C 6100 0000                                  bsr     Menu_ShowVDPGraphics
00177D30                            ;-------------------------------------------------------------------------------                
00177D30                            ; Carrega o Texto do Menu de Seleзгo de Fases               
00177D30                            ;-------------------------------------------------------------------------------
00177D30 47F9 FFFF 0000             		lea		($FFFF0000),a3
00177D36 323C 045F                  		move.w	#$045F,d1
00177D3A                            
00177D3A                            Offset_0x026B4E:
00177D3A 36FC 0000                  		move.w	#$0000,(a3)+
00177D3E 51C9 FFFA                  		dbra	d1,Offset_0x026B4E
00177D42 47F9 FFFF 0000             		lea		($FFFF0000),a3
00177D48 43F9 0000 0000             		lea		(Menu_Level_Select_Text),a1
00177D4E 4BF9 0000 0000             		lea		(Menu_Text_Positions),a5
00177D54 7000                       		moveq	#$00,d0
00177D56 323C 0009                  		move.w	#$0009,d1	; Quantidade de textos a ser carregada e posiзгo do Sound Test
00177D5A                            
00177D5A                            Menu_Loop_Load_Text:
00177D5A 361D                       		move.w	(a5)+,d3
00177D5C 45F3 3000                  		lea		$00(a3,d3),a2
00177D60 7400                       		moveq	#$00,d2
00177D62 1419                       		move.b	(a1)+,d2
00177D64 3602                       		move.w	d2,d3
00177D66                            
00177D66                            Offset_0x026B7A:
00177D66 1019                       		move.b	(a1)+,d0
00177D68 34C0                       		move.w	d0,(a2)+
00177D6A 51CA FFFA                  		dbra	d2,Offset_0x026B7A
00177D6E 343C 000D                  		move.w	#$000D,d2
00177D72 9443                       		sub.w	d3,d2
00177D74 6500                       		bcs.s	Offset_0x026B92
00177D76                            
00177D76                            Offset_0x026B8A:
00177D76 34FC 0000                  		move.w	#$0000,(a2)+
00177D7A 51CA FFFA                  		dbra	d2,Offset_0x026B8A
00177D7E                            
00177D7E                            Offset_0x026B92:
00177D7E 34BC 0011                  		move.w	#$0011,(a2) 	 	 	 ; Load "1"
00177D82 45EA 0050                  		lea		$0050(a2),a2
00177D86 34BC 0012                  		move.w	#$0012,(a2) 	 	 	 ; Load "2"
00177D8A 45EA 0050                  		lea		$0050(a2),a2
00177D8E 34BC 0013                  		move.w	#$0013,(a2) 	 	 	 ; Load "3"
00177D92 51C9 FFC6                  		dbra	d1,Menu_Loop_Load_Text
00177D96                            ;-------------------------------------------------------------------------------
00177D96 720E                       		moveq	#$0E,d1
00177D98 45EA FBA0                  		lea		$FFFFFBA0(a2),a2
00177D9C                            
00177D9C                            Menu_Clear_Act_x:						; Limpa os nъmeros dos acts nгo usados e carrega o "*" do Sound Test
00177D9C 34BC 0000                  		move.w	#$0000,(a2)				; Load " "
00177DA0 45EA 0050                  		lea		$0050(a2),a2
00177DA4 51C9 FFF6                  		dbra	d1,Menu_Clear_Act_x
00177DA8                            ;		lea     $FF10(a2), a2
00177DA8                            ;		move.w  #$001A, (a2)          ; Load "*"
00177DA8                            ;-------------------------------------------------------------------------------
00177DA8                            ; Carrega o Mapeamento das Asas onde s�o mostrados os �cones
00177DA8                            ;------------------------------------------------------------------------------- 
00177DA8 41F9 0000 0000                             lea     (Wings_Mappings), A0
00177DAE 43F9 FFFF 0670                             lea     ($FFFF0670), A1
00177DB4 323C 0006                                  move     #$06, D1
00177DB8                            Menu_Loop_Next_Line:
00177DB8 303C 0009                                  move     #$09, D0
00177DBC                            Menu_Loop_Load_Wings:
00177DBC 32D8                                       move.w   (A0)+, (A1)+
00177DBE 51C8 FFFC                                  dbra     D0, Menu_Loop_Load_Wings
00177DC2 D2FC 003C                                  add.w    #$3C, A1
00177DC6 51C9 FFF0                                  dbra     D1, Menu_Loop_Next_Line
00177DCA                            ;-------------------------------------------------------------------------------                
00177DCA                            ; Carrega o Mapeamento dos �cones               
00177DCA                            ;-------------------------------------------------------------------------------                                    
00177DCA 43F9 FFFF 08C0                             lea     ($FFFF08C0), A1
00177DD0 41F9 0000 0000                             lea     (Icons_Mappings), A0
00177DD6 303C 0090                                  move.w  #$0090, D0
00177DDA 6100 0000                                  bsr     Menu_EnigmaDec
00177DDE 43F9 FFFF 0000                             lea     ($FFFF0000), A1
00177DE4 203C 4000 0003                             move.l  #$40000003, D0
00177DEA 7227                                       moveq   #$27, D1
00177DEC 741B                                       moveq   #$1B, D2
00177DEE 6100 0000                                  bsr     Menu_ShowVDPGraphics
00177DF2                            ;-------------------------------------------------------------------------------                
00177DF2 7600                                       moveq   #$00, D3
00177DF4 6100 0000                                  bsr     Offset_0x027040
00177DF8 4278 FF70                                  clr.w   ($FFFFFF70).w
00177DFC 4278 FE40                                  clr.w   ($FFFFFE40).w
00177E00 4238 F711                                  clr.b   ($FFFFF711).w
00177E04 4278 F7F0                                  clr.w   ($FFFFF7F0).w
00177E08                            ;------------------------------------------------------------------------------- 
00177E08 31FC 0000 F7B8                             move.w  #$0000, ($FFFFF7B8).w  ; Inicializa os quadros das anima��es do menu
00177E0E 31FC 0000 F7DA                             move.w  #$0000, ($FFFFF7DA).w  ; Inicializa o contador das anima��es do menu 
00177E14 4EB9 0000 0000                             jsr     Dynamic_Menu           ; Chama a rotina de anima��o
00177E1A                            ;-------------------------------------------------------------------------------
00177E1A                            
00177E1A 7014                                       moveq   #$14, D0
00177E1C 6100 0000                                  bsr     Menu_PalLoad1
00177E20 43F8 FB40                                  lea     ($FFFFFB40).w, A1
00177E24 45F8 FBC0                                  lea     ($FFFFFBC0).w, A2
00177E28 7207                                       moveq   #$07, D1
00177E2A                            Offset_0x026C26:
00177E2A 24D1                                       move.l  (A1), (A2)+
00177E2C 4299                                       clr.l   (A1)+
00177E2E 51C9 FFFA                                  dbra    D1, Offset_0x026C26
00177E32 103C 0083                                  move.b  #Level_Select_Menu_snd, D0
00177E36 6100 0000                                  bsr     Menu_Play_Music
00177E3A 7000                                       moveq   #$00, D0
00177E3C 4EB9 0000 0000                             jsr     Menu_LoadPLC2
00177E42 31FC 0707 F614                             move.w  #$0707, ($FFFFF614).w
00177E48 4278 FFDC                                  clr.w   ($FFFFFFDC).w
00177E4C 42B8 EE00                                  clr.l   ($FFFFEE00).w
00177E50 42B8 EE04                                  clr.l   ($FFFFEE04).w
00177E54 4278 FF0C                                  clr.w   ($FFFFFF0C).w
00177E58 4278 FF0E                                  clr.w   ($FFFFFF0E).w
00177E5C 11FC 0018 F62A                             move.b  #$18, ($FFFFF62A).w
00177E62 6100 0000                                  bsr     Menu_DelayProgram
00177E66 3038 F60C                                  move.w  ($FFFFF60C).w, D0
00177E6A 0000 0040                                  ori.b   #$40, D0
00177E6E 33C0 00C0 0004                             move.w  D0, ($00C00004)
00177E74 6100 0000                                  bsr     Menu_Pal_FadeTo
00177E78                            Menu_Main_Loop:
00177E78 11FC 0018 F62A                             move.b  #$18, ($FFFFF62A).w
00177E7E 6100 0000                                  bsr     Menu_DelayProgram
00177E82 46FC 2700                                  move    #$2700, SR
00177E86 7600                                       moveq   #$00, D3
00177E88 6100 0000                                  bsr     Offset_0x026ED8
00177E8C 6100 0000                                  bsr     Offset_0x026DEC
00177E90 363C 6000                                  move.w  #$6000, D3
00177E94 6100 0000                                  bsr     Offset_0x027048
00177E98 46FC 2300                                  move    #$2300, SR
00177E9C 4EB9 0000 0000                             jsr     Dynamic_Menu
00177EA2 6100 0000                                  bsr     Menu_RunPLC
00177EA6 0838 0004 F604                             btst    #$04, ($FFFFF604).w
00177EAC 6700                                       beq.s   Offset_0x026CC6
00177EAE 31FC 0001 FFD8                             move.w  #$0001, ($FFFFFFD8).w
00177EB4                            Offset_0x026CC6:
00177EB4 1038 F605                                  move.b  ($FFFFF605).w, D0
00177EB8 8038 F607                                  or.b    ($FFFFF607).w, D0
00177EBC 0200 0080                                  andi.b  #$80, D0
00177EC0 6600                                       bne.s   Offset_0x026CD8
00177EC2 60B4                                       bra     Menu_Main_Loop
00177EC4                            Offset_0x026CD8:
00177EC4 3038 FF82                                  move.w  ($FFFFFF82).w, D0
00177EC8 D040                                       add.w   D0, D0
00177ECA 303B 0000                                  move.w  Menu_Level_Select_Array(PC, D0), D0
00177ECE 6B00 0000                                  bmi     Menu_Game_Reset
00177ED2 0C40 0600                                  cmpi.w  #$0600, D0
00177ED6 6700 0000                                  beq     Menu_Ending_Sequence
00177EDA 0C40 5555                                  cmpi.w  #$5555, D0
00177EDE 6798                                       beq     Menu_Main_Loop
00177EE0 0C40 4000                                  cmpi.w  #$4000, D0
00177EE4 6600 0000                                  bne     Menu_Load_Level
00177EE8 11FC 0010 F600                             move.b  #$10, ($FFFFF600).w
00177EEE 4278 FE10                                  clr.w   ($FFFFFE10).w
00177EF2 11FC 0003 FE12                             move.b  #$03, ($FFFFFE12).w
00177EF8 11FC 0003 FEC6                             move.b  #$03, ($FFFFFEC6).w
00177EFE 7000                                       moveq   #$00, D0
00177F00 31C0 FE20                                  move.w  D0, ($FFFFFE20).w
00177F04 21C0 FE22                                  move.l  D0, ($FFFFFE22).w
00177F08 21C0 FE26                                  move.l  D0, ($FFFFFE26).w
00177F0C 31C0 FED0                                  move.w  D0, ($FFFFFED0).w
00177F10 21C0 FED2                                  move.l  D0, ($FFFFFED2).w
00177F14 21C0 FED6                                  move.l  D0, ($FFFFFED6).w
00177F18 21FC 0000 1388 FFC0                        move.l  #$00001388, ($FFFFFFC0).w
00177F20 21FC 0000 1388 FFC4                        move.l  #$00001388, ($FFFFFFC4).w
00177F28 31F8 FF72 FF70                             move.w  ($FFFFFF72).w, ($FFFFFF70).w
00177F2E 4E75                                       rts
00177F30                            Menu_Game_Reset:
00177F30 11FC 0000 F600                             move.b  #$0000, ($FFFFF600).w
00177F36 4E75                                       rts
00177F38                            Menu_Ending_Sequence:
00177F38 11FC 0018 F600                             move.b	#$0018,($FFFFF600).w
00177F3E 31FC 0600 FE10             		move.w	#$0600,($FFFFFE10).w
00177F44 4E75                       		rts
00177F46                            Menu_Level_Select_Array:
00177F46 0000 0001 0002                             dc.w    $0000, $0001, $0002	;GHZ
00177F4C 0200 0201 0202                             dc.w    $0200, $0201, $0202	;MZ
00177F52 0400 0401 0402                             dc.w    $0400, $0401, $0402	;SYZ				
00177F58 0100 0101 0102                             dc.w    $0100, $0101, $0102 ;LZ
00177F5E 0300 0301 0302                             dc.w    $0300, $0301, $0302	;SLZ
00177F64 0500 0501 0103                             dc.w    $0500, $0501, $0103	;SBZ
00177F6A 0502 4000 0600                             dc.w    $0502, $4000, $0600	
00177F70 FFFF                                       dc.w    $FFFF
00177F72                            Menu_Load_Level:
00177F72 0240 3FFF                                  andi.w  #$3FFF, D0
00177F76 31C0 FE10                                  move.w  D0, ($FFFFFE10).w
00177F7A 11FC 000C F600                             move.b  #$0C, ($FFFFF600).w
00177F80 11FC 0003 FE12                             move.b  #$03, ($FFFFFE12).w
00177F86 11FC 0003 FEC6                             move.b  #$03, ($FFFFFEC6).w
00177F8C 7000                                       moveq   #$00, D0
00177F8E 31C0 FE20                                  move.w  D0, ($FFFFFE20).w
00177F92 21C0 FE22                                  move.l  D0, ($FFFFFE22).w
00177F96 21C0 FE26                                  move.l  D0, ($FFFFFE26).w
00177F9A 31C0 FED0                                  move.w  D0, ($FFFFFED0).w
00177F9E 21C0 FED2                                  move.l  D0, ($FFFFFED2).w
00177FA2 21C0 FED6                                  move.l  D0, ($FFFFFED6).w
00177FA6 4E71                                       nop
00177FA8 4E71                                       nop
00177FAA 21FC 0000 1388 FFC0                        move.l  #$00001388, ($FFFFFFC0).w
00177FB2 21FC 0000 1388 FFC4                        move.l  #$00001388, ($FFFFFFC4).w
00177FBA 103C 00E0                                  move.b  #Volume_Down, D0
00177FBE 6100 0000                                  bsr     Menu_Play_Music     
00177FC2 7000                                       moveq   #$00, D0
00177FC4 31C0 FF8A                                  move.w  D0, ($FFFFFF8A).w
00177FC8 31C0 FFDC                                  move.w  D0, ($FFFFFFDC).w
00177FCC 4E75                                       rts
00177FCE                            Offset_0x026DEC:
00177FCE 1238 F605                                  move.b  ($FFFFF605).w, D1
00177FD2 0201 0003                                  andi.b  #$03, D1
00177FD6 6600                                       bne.s   Offset_0x026DFC
00177FD8 5378 FF80                                  subq.w  #$01, ($FFFFFF80).w
00177FDC 6A00                                       bpl.s   Offset_0x026E32
00177FDE                            Offset_0x026DFC:
00177FDE 31FC 000B FF80                             move.w  #$000B, ($FFFFFF80).w
00177FE4 1238 F604                                  move.b  ($FFFFF604).w, D1
00177FE8 0201 0003                                  andi.b  #$03, D1
00177FEC 6700                                       beq.s   Offset_0x026E32
00177FEE 3038 FF82                                  move.w  ($FFFFFF82).w, D0
00177FF2 0801 0000                                  btst    #$00, D1
00177FF6 6700                                       beq.s   Offset_0x026E1C
00177FF8 5340                                       subq.w  #$01, D0
00177FFA 6400                                       bcc.s   Offset_0x026E1C
00177FFC 7015                                       moveq   #$15, D0     ; �ltimo item ap�s apertar para cima
00177FFE                            Offset_0x026E1C:
00177FFE 0801 0001                                  btst    #$01, D1
00178002 6700                                       beq.s   Offset_0x026E2C
00178004 5240                                       addq.w  #$01, D0
00178006 0C40 0016                                  cmpi.w  #$0016, D0   ; Verifica qual o �ltimo item da lista
0017800A 6500                                       bcs.s   Offset_0x026E2C
0017800C 7000                                       moveq   #$00, D0
0017800E                            Offset_0x026E2C:
0017800E 31C0 FF82                                  move.w  D0, ($FFFFFF82).w
00178012 4E75                                       rts
00178014                            Offset_0x026E32:
00178014 0C78 0015 FF82                             cmpi.w  #$0015, ($FFFFFF82).w ; se o item for igual muda as fun��es de esquerda e direita 
0017801A 6600                                       bne.s   Offset_0x026E9C
0017801C 3038 FF84                                  move.w  ($FFFFFF84).w, D0
00178020 1238 F605                                  move.b  ($FFFFF605).w, D1
00178024 0801 0002                                  btst    #$02, D1
00178028 6700                                       beq.s   Offset_0x026E4E
0017802A 5300                                       subq.b  #$01, D0
0017802C 6400                                       bcc.s   Offset_0x026E4E
0017802E 707F                                       moveq   #$7F, D0
00178030                            Offset_0x026E4E:
00178030 0801 0003                                  btst    #$03, D1
00178034 6700                                       beq.s   Offset_0x026E5E
00178036 5200                                       addq.b  #$01, D0
00178038 0C40 0080                                  cmpi.w  #$0080, D0
0017803C 6500                                       bcs.s   Offset_0x026E5E
0017803E 7000                                       moveq   #$00, D0
00178040                            Offset_0x026E5E:
00178040 0801 0006                                  btst    #$06, D1
00178044 6700                                       beq.s   Offset_0x026E6C
00178046 0600 0010                                  addi.b  #$10, D0
0017804A 0200 007F                                  andi.b  #$7F, D0
0017804E                            Offset_0x026E6C:
0017804E 31C0 FF84                                  move.w  D0, ($FFFFFF84).w
00178052 0241 0030                                  andi.w  #$0030, D1
00178056 6700                                       beq.s   Offset_0x026E9A
00178058 3038 FF84                                  move.w  ($FFFFFF84).w, D0
0017805C 0640 0080                                  addi.w  #$0080, D0
00178060 6100 0000                                  bsr     Menu_Play_Music 
00178064 41F9 0000 0000                             lea     (Code_Debug_Mode), A0   
0017806A 45F9 0000 0000                             lea     (Code_All_Emeralds), A2 
00178070 43F8 FF0A                                  lea     ($FFFFFF0A).w, A1
00178074 7401                                       moveq   #$01, D2
00178076 6100 0000                                  bsr     Menu_Code_Test 
0017807A                            Offset_0x026E9A:
0017807A 4E75                                       rts
0017807C                            Offset_0x026E9C:
0017807C 1238 F605                                  move.b  ($FFFFF605).w, D1
00178080 0201 000C                                  andi.b  #$0C, D1
00178084 6700                                       beq.s   Offset_0x026EB2
00178086 3038 FF82                                  move.w  ($FFFFFF82).w, D0
0017808A 103B 0000                                  move.b  Menu_Left_Right_Select(PC, D0), D0
0017808E 31C0 FF82                                  move.w  D0, ($FFFFFF82).w
00178092                            Offset_0x026EB2:
00178092 4E75                                       rts
00178094                            Menu_Left_Right_Select:                   
00178094 0F10 1112 1212 1313 1314+                  dc.b    $0F, $10, $11, $12, $12, $12, $13, $13, $13, $14, $14, $14, $15, $15, $15
001780A3 0001 0203 0609 0C                          dc.b    $00, $01, $02, $03, $06, $09, $0C
001780AA                            Offset_0x026ED8:
001780AA 49F9 FFFF 0000                             lea     ($FFFF0000), A4
001780B0 4BF9 0000 0000                             lea     (Menu_Text_Highlight), A5
001780B6 4DF9 00C0 0000                             lea     ($00C00000), A6
001780BC 7000                                       moveq   #$00, D0
001780BE 3038 FF82                                  move.w  ($FFFFFF82).w, D0
001780C2 E548                                       lsl.w   #$02, D0
001780C4 47F5 0000                                  lea     $00(A5, D0), A3
001780C8 7000                                       moveq   #$00, D0
001780CA 1013                                       move.b  (A3), D0
001780CC C0FC 0050                                  mulu.w  #$0050, D0
001780D0 7200                                       moveq   #$00, D1
001780D2 122B 0001                                  move.b  $0001(A3), D1
001780D6 D041                                       add.w   D1, D0
001780D8 43F4 0000                                  lea     $00(A4, D0), A1
001780DC 7200                                       moveq   #$00, D1
001780DE 1213                                       move.b  (A3), D1
001780E0 EF49                                       lsl.w   #$07, D1
001780E2 D22B 0001                                  add.b   $0001(A3), D1
001780E6 0641 C000                                  addi.w  #$C000, D1
001780EA E589                                       lsl.l   #$02, D1
001780EC E449                                       lsr.w   #$02, D1
001780EE 0041 4000                                  ori.w   #$4000, D1
001780F2 4841                                       swap.w  D1
001780F4 2D41 0004                                  move.l  D1, $0004(A6)
001780F8 740E                                       moveq   #$0E, D2    ; Quantidade de letras a selecionar (Highlight)
001780FA                            Offset_0x026F28:                
001780FA 3019                                       move.w  (A1)+, D0
001780FC D043                                       add.w   D3, D0
001780FE 3C80                                       move.w  D0, (A6)
00178100 51CA FFF8                                  dbra    D2, Offset_0x026F28
00178104 544B                                       addq.w  #$02, A3
00178106 7000                                       moveq   #$00, D0
00178108 1013                                       move.b  (A3), D0
0017810A 6700                                       beq.s   Offset_0x026F6C
0017810C C0FC 0050                                  mulu.w  #$0050, D0
00178110 7200                                       moveq   #$00, D1
00178112 122B 0001                                  move.b  $0001(A3), D1
00178116 D041                                       add.w   D1, D0
00178118 43F4 0000                                  lea     $00(A4, D0), A1
0017811C 7200                                       moveq   #$00, D1
0017811E 1213                                       move.b  (A3), D1
00178120 EF49                                       lsl.w   #$07, D1
00178122 D22B 0001                                  add.b   $0001(A3), D1
00178126 0641 C000                                  addi.w  #$C000, D1
0017812A E589                                       lsl.l   #$02, D1
0017812C E449                                       lsr.w   #$02, D1
0017812E 0041 4000                                  ori.w   #$4000, D1
00178132 4841                                       swap.w  D1
00178134 2D41 0004                                  move.l  D1, $0004(A6)
00178138 3019                                       move.w  (A1)+, D0
0017813A D043                                       add.w   D3, D0
0017813C 3C80                                       move.w  D0, (A6)
0017813E                            Offset_0x026F6C:
0017813E 0C78 0015 FF82                             cmpi.w  #$0015, ($FFFFFF82).w  ; Se for igual seleciona o n�mero do Sound Test
00178144 6600                                       bne.s   Offset_0x026F78
00178146 6100 0000                                  bsr     Offset_0x026F7A
0017814A                            Offset_0x026F78:
0017814A 4E75                                       rts
0017814C                            Offset_0x026F7A:
0017814C 23FC 49C6 0003 00C0 0004                   move.l  #$49C60003, ($00C00004) ; Posi��o dos n�meros do Sound Test
00178156 3038 FF84                                  move.w  ($FFFFFF84).w, D0
0017815A 1400                                       move.b  D0, D2
0017815C E808                                       lsr.b   #$04, D0
0017815E 6100                                       bsr.s   Offset_0x026F90
00178160 1002                                       move.b  D2, D0
00178162                            Offset_0x026F90:
00178162 0240 000F                                  andi.w  #$000F, D0
00178166 0C00 000A                                  cmpi.b  #$0A, D0
0017816A 6500                                       bcs.s   Offset_0x026F9E
0017816C 5800                                       addi.b  #$04, D0
0017816E                            Offset_0x026F9E:
0017816E 0600 0010                                  addi.b  #$10, D0
00178172 D043                                       add.w   D3, D0
00178174 3C80                                       move.w  D0, (A6)
00178176 4E75                                       rts
00178178                            ;-------------------------------------------------------------------------------                
00178178                            Menu_Code_Test: 
00178178 3038 FF0C                                  move.w  ($FFFFFF0C).w, D0
0017817C D0C0                                       adda.w  D0, A0
0017817E 3038 FF84                                  move.w  ($FFFFFF84).w, D0
00178182 B010                                       cmp.b   (A0), D0
00178184 6600                                       bne.s   Menu_Reset_Debug_Mode_Code_Counter
00178186 5278 FF0C                                  addq.w  #$01, ($FFFFFF0C).w
0017818A 4A28 0001                                  tst.b   $0001(A0)
0017818E 6A00                                       bpl.s   Menu_All_Emeralds_Code_Test 
00178190 32BC 0101                                  move.w  #$0101, (A1)
00178194 6000 0000                                  bra     Menu_Set_Debug_Flag 
00178198                            Menu_Reset_Debug_Mode_Code_Counter: 
00178198 31FC 0000 FF0C                             move.w  #$0000, ($FFFFFF0C).w
0017819E                            Menu_All_Emeralds_Code_Test: 
0017819E 3038 FF0E                                  move.w  ($FFFFFF0E).w, D0
001781A2 D4C0                                       adda.w  D0, A2
001781A4 3038 FF84                                  move.w  ($FFFFFF84).w, D0
001781A8 B012                                       cmp.b   (A2), D0
001781AA 6600                                       bne.s   Menu_Reset_All_Emerald_Code_Counter 
001781AC 5278 FF0E                                  addq.w  #$01, ($FFFFFF0E).w
001781B0 4A2A 0001                                  tst.b   $0001(A2)
001781B4 6A00                                       bpl.s   Menu_Code_Not_0xFF 
001781B6 4A42                                       tst.w   D2
001781B8 6600                                       bne.s   Menu_Set_All_Emeralds 
001781BA                            Menu_Set_Debug_Flag: 
001781BA 11FC 0001 FFE1                             move.b  #$01, (Slow_Motion_Flag).w
001781C0 11FC 0001 FFE2                             move.b  #$01, (Debug_Mode_Flag).w
001781C6 103C 00B5                                  move.b  #Ring_Snd, D0
001781CA 6100 0000                                  bsr     Menu_Play_Music 
001781CE 6000                                       bra.s   Menu_Reset_All_Emerald_Code_Counter 
001781D0                            Menu_Set_All_Emeralds: 
001781D0 31FC 0006 FE56                             move.w  #$0006, ($FFFFFE56).w
001781D6 103C 0093                                  move.b  #Emerald_Snd, D0
001781DA 6100 0000                                  bsr     Menu_Play_Music 
001781DE                            Menu_Reset_All_Emerald_Code_Counter: 
001781DE 31FC 0000 FF0E                             move.w  #$0000, ($FFFFFF0E).w
001781E4                            Menu_Code_Not_0xFF: 
001781E4 4E75                                       rts               
001781E6                            Code_Debug_Mode: 
001781E6 0109 0902 0101 0204 FF                     dc.b    $01, $09, $09, $02, $01, $01, $02, $04, $FF
001781EF                            Code_All_Emeralds: 
001781EF 0401 0206 FF                               dc.b    $04, $01, $02, $06, $FF
001781F4                            ;-------------------------------------------------------------------------------                 
001781F4                            Offset_0x027040:
001781F4 6100 FF56                                  bsr     Offset_0x026F7A
001781F8 6000 0000                                  bra     Offset_0x027050
001781FC                            Offset_0x027048:
001781FC 6100 FEAC                                  bsr     Offset_0x026ED8
00178200 6000 0000                                  bra     Offset_0x027050
00178204                            Offset_0x027050:
00178204 3038 FF82                                  move.w  ($FFFFFF82).w, D0
00178208 47F9 0000 0000                             lea     (Menu_Icon_List), A3
0017820E 47F3 0000                                  lea     $00(A3, D0), A3
00178212 43F9 FFFF 08C0                             lea     ($FFFF08C0), A1
00178218 7000                                       moveq   #$00, D0
0017821A 1013                                       move.b  (A3), D0
0017821C E748                                       lsl.w   #$03, D0
0017821E 3200                                       move.w  D0, D1
00178220 D040                                       add.w   D0, D0
00178222 D041                                       add.w   D1, D0
00178224 43F1 0000                                  lea     $00(A1, D0), A1
00178228 203C 4B36 0003                             move.l  #$4B360003, D0        ; Posi��o Horizontal dos �cones
0017822E 7203                                       moveq   #$03, D1
00178230 7402                                       moveq   #$02, D2
00178232 6100 0000                                  bsr     Menu_ShowVDPGraphics 
00178236 43F9 0000 0000                             lea     (Icon_Palettes), A1  
0017823C 7000                                       moveq   #$00, D0
0017823E 1013                                       move.b  (A3), D0
00178240 EB48                                       lsl.w   #$05, D0
00178242 43F1 0000                                  lea     $00(A1, D0), A1
00178246 45F8 FB40                                  lea     ($FFFFFB40).w, A2
0017824A 7207                                       moveq   #$07, D1
0017824C                            Offset_0x027098:                
0017824C 24D9                                       move.l  (A1)+, (A2)+
0017824E 51C9 FFFC                                  dbra    D1, Offset_0x027098
00178252 4E75                                       rts
00178254                            ;-------------------------------------------------------------------------------                            
00178254                            Dynamic_Menu:                           
00178254 5338 F7DA                                  subq.b  #$01, ($FFFFF7DA).w          ; Decrementa em 1 o Tempo
00178258 6A00                                       bpl.s   Exit_Dinamic_Menu            ; Se for maior ou igual a 0 sai da fun��o
0017825A 11FC 0007 F7DA                             move.b  #$07, ($FFFFF7DA).w          ; Inicializa o tempo de dura��o de cada frame
00178260 1038 F7B8                                  move.b  ($FFFFF7B8).w, D0            ; Carrega o Id do Frame Atual em D0
00178264 5238 F7B8                                  addq.b  #$01, ($FFFFF7B8).w          ; Carrega o pr�ximo frame em $FFFFFFB8
00178268 0240 001F                                  andi.w  #$001F, D0
0017826C 103B 0000                                  move.b  Sonic_Miles_Frame_Select(PC, D0), D0  ; Carrega o Id do frame em D0
00178270                                          ; muls.w  #$0140, D0                   ; Multiplica o Id pelo tamanho em bytes de cada frame
00178270 ED48                                       lsl.w   #$06, D0
00178272 4DF9 00C0 0000                             lea     ($00C00000), A6
00178278 2D7C 4020 0000 0004                        move.l  #$40200000, $0004(A6)
00178280 43F9 0000 0000                             lea     (Sonic_Miles_Spr), A1
00178286 43F1 0000                                  lea     $00(A1, D0), A1
0017828A 303C 0009                                  move.w  #$0009, D0                   ; Tiles-1 a serem carregados por vez 
0017828E                            Menu_Loop_Load_Tiles:
0017828E 2C99                                       move.l  (A1)+, (A6)
00178290 2C99                                       move.l  (A1)+, (A6)     
00178292 2C99                                       move.l  (A1)+, (A6)     
00178294 2C99                                       move.l  (A1)+, (A6)     
00178296 2C99                                       move.l  (A1)+, (A6)     
00178298 2C99                                       move.l  (A1)+, (A6)
0017829A 2C99                                       move.l  (A1)+, (A6)
0017829C 2C99                                       move.l  (A1)+, (A6)
0017829E 51C8 FFEE                                  dbra    D0, Menu_Loop_Load_Tiles
001782A2                            Exit_Dinamic_Menu:                
001782A2 4E75                                       rts              
001782A4                            Sonic_Miles_Frame_Select:     
001782A4 0000 0000 0000 0000 0000+                  dc.b    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
001782B2 050A                                       dc.b    $05, $0A
001782B4 0F0F 0F0F 0F0F 0F0F 0F0F+                  dc.b    $0F, $0F, $0F, $0F, $0F, $0F, $0F, $0F, $0F, $0F, $0F, $0F, $0F, $0F
001782C2 0A05                                       dc.b    $0A, $05   
001782C4                                            ; 0 = 0000000000  ; 1 = 0101000000  ; 2 = 1010000000 ; 3 = 1111000000
001782C4                            ;------------------------------------------------------------------------------                  
001782C4 =00000000                  __ = $00
001782C4 =0000001E                  _A = $1E
001782C4 =0000001F                  _B = $1F
001782C4 =00000020                  _C = $20
001782C4 =00000021                  _D = $21
001782C4 =00000022                  _E = $22    
001782C4 =00000023                  _F = $23
001782C4 =00000024                  _G = $24
001782C4 =00000025                  _H = $25
001782C4 =00000026                  _I = $26
001782C4 =00000027                  _J = $27
001782C4 =00000028                  _K = $28
001782C4 =00000029                  _L = $29
001782C4 =0000002A                  _M = $2A
001782C4 =0000002B                  _N = $2B
001782C4 =0000002C                  _O = $2C
001782C4 =0000002D                  _P = $2D
001782C4 =0000002E                  _Q = $2E
001782C4 =0000002F                  _R = $2F
001782C4 =00000030                  _S = $30
001782C4 =00000031                  _T = $31
001782C4 =00000032                  _U = $32
001782C4 =00000033                  _V = $33
001782C4 =00000034                  _W = $34
001782C4 =00000035                  _X = $35
001782C4 =00000036                  _Y = $36
001782C4 =00000037                  _Z = $37
001782C4 =0000001A                  _st = $1A
001782C4                            ;-------------------------------------------------------------------------------  
001782C4                            Icon_Palettes: 
001782C4 0000 0000 0048 006A 008E+                  dc.w    $0000, $0000, $0048, $006A, $008E, $00CE, $0EEE, $00E0
001782D4 00A4 0082 0062 0000 0E86+                  dc.w    $00A4, $0082, $0062, $0000, $0E86, $0026, $0E42, $0C00
001782E4 0000 0000 0420 0820 0C00+                  dc.w    $0000, $0000, $0420, $0820, $0C00, $0E60, $0A00, $0000
001782F4 0E00 0000 0000 0000 0444+                  dc.w    $0E00, $0000, $0000, $0000, $0444, $0666, $0AAA, $0EEE
00178304 0000 0204 0026 0248 046A+                  dc.w    $0000, $0204, $0026, $0248, $046A, $048C, $06CE, $0002
00178314 0000 0220 0040 0060 0080+                  dc.w    $0000, $0220, $0040, $0060, $0080, $02A0, $06E0, $0A0C
00178324 0000 0000 0A00 0660 0C80+                  dc.w    $0000, $0000, $0A00, $0660, $0C80, $0EC0, $006A, $0008
00178334 028A 00AE 004C 006E 0060+                  dc.w    $028A, $00AE, $004C, $006E, $0060, $0066, $00C0, $00CA
00178344 0000 0000 0CE2 0000 0480+                  dc.w    $0000, $0000, $0CE2, $0000, $0480, $0240, $0EEE, $04AC
00178354 006A 0026 0842 0620 0400+                  dc.w    $006A, $0026, $0842, $0620, $0400, $0000, $0000, $0000
00178364 0000 0000 0EEE 0ECA 0E86+                  dc.w    $0000, $0000, $0EEE, $0ECA, $0E86, $0E64, $0E42, $06AE
00178374 048A 0268 0246 0024 0888+                  dc.w    $048A, $0268, $0246, $0024, $0888, $0444, $000E, $0008
00178384 0000 0000 0A26 0C48 0E8C+                  dc.w    $0000, $0000, $0A26, $0C48, $0E8C, $00CE, $00C4, $0080
00178394 0C00 0000 0EEE 0EEA 0EC8+                  dc.w    $0C00, $0000, $0EEE, $0EEA, $0EC8, $006E, $004A, $0028
001783A4 0000 0000 0048 006A 008E+                  dc.w    $0000, $0000, $0048, $006A, $008E, $00CE, $0EEE, $00E0
001783B4 00A4 0082 0062 0808 0A4A+                  dc.w    $00A4, $0082, $0062, $0808, $0A4A, $0026, $0626, $0404
001783C4 0000 0000 0EEE 0ECA 0E86+                  dc.w    $0000, $0000, $0EEE, $0ECA, $0E86, $0E64, $0E42, $06AE
001783D4 048A 0268 0246 0024 0888+                  dc.w    $048A, $0268, $0246, $0024, $0888, $0444, $000E, $0008
001783E4 0000 0000 0048 006A 008E+                  dc.w    $0000, $0000, $0048, $006A, $008E, $00CE, $0EEE, $00E0
001783F4 00A4 0082 0062 0400 0E86+                  dc.w    $00A4, $0082, $0062, $0400, $0E86, $006E, $0E42, $0C00
00178404 0000 0000 0CE2 08C0 0480+                  dc.w    $0000, $0000, $0CE2, $08C0, $0480, $0240, $0EEE, $02AC
00178414 006A 0026 0AA6 0000 060A+                  dc.w    $006A, $0026, $0AA6, $0000, $060A, $0408, $0204, $0000
00178424 0000 0000 0C06 0C0A 0C6E+                  dc.w    $0000, $0000, $0C06, $0C0A, $0C6E, $0068, $008A, $0000
00178434 02CE 00EC 00AE 006E 0EEE+                  dc.w    $02CE, $00EC, $00AE, $006E, $0EEE, $0000, $000E, $00C4
00178444 0000 0000 0EEE 0AAA 0000+                  dc.w    $0000, $0000, $0EEE, $0AAA, $0000, $0666, $0444, $0E40
00178454 0C00 0800 00CE 028E 000E+                  dc.w    $0C00, $0800, $00CE, $028E, $000E, $0084, $0062, $0020
00178464 0000 0000 0004 0044 0084+                  dc.w    $0000, $0000, $0004, $0044, $0084, $0088, $00A8, $00AC
00178474 006C 002C 0028 0006 0666+                  dc.w    $006C, $002C, $0028, $0006, $0666, $0888, $0CCC, $0EEE
00178484 0000 0000 06CE 04AC 028A+                  dc.w    $0000, $0000, $06CE, $04AC, $028A, $0068, $0046, $00E8
00178494 00C4 0080 0040 0EEE 0C00+                  dc.w    $00C4, $0080, $0040, $0EEE, $0C00, $0EC0, $0860, $0000
001784A4 0000 0000 0E64 0E86 0EA8+                  dc.w    $0000, $0000, $0E64, $0E86, $0EA8, $0ECA, $0EEE, $0000
001784B4 00AE 006E 0E22 00E0 0000+                  dc.w    $00AE, $006E, $0E22, $00E0, $0000, $0000, $0000, $0000
001784C4 0000 0E20 004E 006E 0048+                  dc.w    $0000, $0E20, $004E, $006E, $0048, $008C, $00CE, $08EE
001784D4 0800 0400 0000 0EE8 0E80+                  dc.w    $0800, $0400, $0000, $0EE8, $0E80, $0E60, $0000, $0000
001784E4 0000 0000 0A22 0C42 0000+                  dc.w    $0000, $0000, $0A22, $0C42, $0000, $0E66, $0EEE, $0AAA
001784F4 0888 0444 08AE 046A 000E+                  dc.w    $0888, $0444, $08AE, $046A, $000E, $0000, $00EE, $0000
00178504 0000 0000 0A22 0C42 0000+                  dc.w    $0000, $0000, $0A22, $0C42, $0000, $0E66, $0EEE, $0AAA
00178514 0888 0444 08AE 046A 000E+                  dc.w    $0888, $0444, $08AE, $046A, $000E, $0000, $00EE, $0000
00178524                            ;-------------------------------------------------------------------------------  
00178524                            Menu_Icon_List: 
00178524 0000 000E 0E0E 0606 060B+                  dc.b    $00, $00, $00, $0E, $0E, $0E, $06, $06, $06, $0B, $0B, $0B, $0D, $0D, $0D, $09
00178534 0909 0410 0F11                             dc.b    $09, $09, $04, $10, $0F, $11
0017853A                            ;-------------------------------------------------------------------------------                 
0017853A                            Menu_Text_Highlight:                  
0017853A 0306 0324 0306 0424 0306+                  dc.w    $0306, $0324, $0306, $0424, $0306, $0524, $0706, $0724
0017854A 0706 0824 0706 0924 0B06+                  dc.w    $0706, $0824, $0706, $0924, $0B06, $0B24, $0B06, $0C24
0017855A 0B06 0D24 0F06 0F24 0F06+                  dc.w    $0B06, $0D24, $0F06, $0F24, $0F06, $1024, $0F06, $1124
0017856A 1306 1324 1306 1424 1306+                  dc.w    $1306, $1324, $1306, $1424, $1306, $1524, $032C, $034A
0017857A 032C 044A 032C 054A 072C+                  dc.w    $032C, $044A, $032C, $054A, $072C, $0000, $0B2C, $0000
0017858A 0F2C 0000 132C 134A                        dc.w    $0F2C, $0000, $132C, $134A
00178592                            ;-------------------------------------------------------------------------------                
00178592                            Menu_Text_Positions:                   
00178592 00F6 0236 0376 04B6 05F6+                  dc.w    $00F6, $0236, $0376, $04B6, $05F6, $011C, $025C, $039C
001785A2 04DC 061C                                  dc.w    $04DC, $061C
001785A6                            ;-------------------------------------------------------------------------------                          
001785A6                            Menu_Level_Select_Text: 
001785A6 0E30 2D29 1E30 2500 2526+                  dc.b    $0E, _S, _P, _L, _A, _S, _H, __, _H, _I, _L, _L, __, __, __, __
001785B6 0E2A 222B 3200 0000 0000+                  dc.b    $0E, _M, _E, _N, _U, __, __, __, __, __, __, __, __, __, __, __
001785C6 0E20 1E30 262B 2C00 3031+                  dc.b    $0E, _C, _A, _S, _I, _N, _O, __, _S, _T, _R, _E, _E, _T, __, __
001785D6 0E29 2C30 3100 291E 1F36+                  dc.b    $0E, _L, _O, _S, _T, __, _L, _A, _B, _Y, _R, _I, _N, _T, _H, __
001785E6 0E34 2C2F 2921 002A 1E2D+                  dc.b    $0E, _W, _O, _R, _L, _D, __, _M, _A, _P, __, __, __, __, __, __
001785F6 0E2A 1E21 0024 221E 2F00+                  dc.b    $0E, _M, _A, _D, __, _G, _E, _A, _R, __, __, __, __, __, __, __
00178606 0E22 2424 0030 311E 3126+                  dc.b    $0E, _E, _G, _G, __, _S, _T, _A, _T, _I, _O, _N, __, __, __, __   
00178616 0E30 2D22 2026 1E29 0030+                  dc.b    $0E, _S, _P, _E, _C, _I, _A, _L, __, _S, _T, _A, _G, _E, __, __
00178626 0E22 2B21 262B 2400 3022+                  dc.b    $0E, _E, _N, _D, _I, _N, _G, __, _S, _E, _Q, _U, _E, _N, _C, _E
00178636 0E30 2C32 2B21 0031 2230+                  dc.b    $0E, _S, _O, _U, _N, _D, __, _T, _E, _S, _T, __, __, _st,__, __
00178646                            ;-------------------------------------------------------------------------------
00178646                            Wings_Mappings: 
00178646 6000 6000 6000 604D 604E+                  dc.w    $6000, $6000, $6000, $604D, $604E, $684E, $684D, $6000, $6000, $6000   
0017865A                            ;Wings_Line_1:                 
0017865A 604F 6050 6051 6052 6053+                  dc.w    $604F, $6050, $6051, $6052, $6053, $6853, $6852, $6851, $6850, $684F
0017866E                            ;Wings_Line_2:
0017866E 6054 6055 6056 6057 6057+                  dc.w    $6054, $6055, $6056, $6057, $6057, $6057, $6057, $6856, $6855, $6854
00178682                            ;Wings_Line_3:
00178682 6058 6059 605A 6057 6057+                  dc.w    $6058, $6059, $605A, $6057, $6057, $6057, $6057, $685A, $6859, $6858
00178696                            ;Wings_Line_4:
00178696 605B 605C 605D 6057 6057+                  dc.w    $605B, $605C, $605D, $6057, $6057, $6057, $6057, $685D, $685C, $685B
001786AA                            ;Wings_Line_5:
001786AA 6000 605E 605F 6060 6061+                  dc.w    $6000, $605E, $605F, $6060, $6061, $6062, $6063, $6064, $685E, $6000
001786BE                            ;Wings_Line_6:
001786BE 6000 6000 6065 6066 6067+                  dc.w    $6000, $6000, $6065, $6066, $6067, $6867, $6866, $6865, $6000, $6000 
001786D2                            ;-------------------------------------------------------------------------------    
001786D2                            Menu_Palette:
001786D2                                            incbin  'data\menu\menu.pal'            
00178752                            Menu_ClearScreen:
00178752 4EF8 1386                                  jmp     ClearScreen
00178756                            Menu_ShowVDPGraphics:                
00178756 4EF8 1500                                  jmp     ShowVDPGraphics                
0017875A                            Menu_NemesisDec: 
0017875A 4EF8 15B0                                  jmp     NemDec  
0017875E                            Menu_LoadPLC2:      
0017875E 4EF8 1722                                  jmp     LoadPLC2
00178762                            Menu_RunPLC:                    
00178762 4EF8 175C                                  jmp     RunPLC_RAM                           
00178766                            Menu_EnigmaDec
00178766 4EF8 188E                                  jmp     EniDec
0017876A                            Menu_Pal_FadeTo:
0017876A 4EF8 20D0                                  jmp     Pal_FadeTo
0017876E                            Menu_Pal_FadeFrom:
0017876E 4EF8 2186                                  jmp     Pal_FadeFrom     
00178772                            Menu_Play_Music:
00178772 4EF8 1476                                  jmp     PlaySound  
00178776                            Menu_PalLoad1:
00178776 4EF8 2434                                  jmp     PalLoad1
0017877A                            Menu_DelayProgram:
0017877A 4EF8 33A8                                  jmp     DelayProgram
0017877E                            ;-------------------------------------------------------------------------------
0017877E                            Menu_Font:
0017877E                                            incbin  'data\menu\menufont.nem' 
00178CF2                            Level_Icons:
00178CF2                                            incbin  'data\menu\levelico.nem'   
00179FEE                            Menu_Mappings:
00179FEE                                            incbin  'data\menu\menubg.eni'
0017A19A                            Icons_Mappings:
0017A19A                                            incbin  'data\menu\iconsmap.eni'
0017A1B0                            Sonic_Miles_Spr:                                         
0017A1B0                                            incbin  'data\menu\soncmils.dat'   
0017A6B0                            ;===============================================================================
0017A6B0                            ; Menu do Sonic 2 No Sonic 1 reprogramado por Esrael L. G. Neto
0017A6B0                            ; [ Fim ]
0017A6B0                            ;===============================================================================
0017A6B0                            ;===============================================================================
0017A6B0                            ; end of 'ROM'
0017A6B0                            EndOfRom:
0017A6B0                            
0017A6B0                            
