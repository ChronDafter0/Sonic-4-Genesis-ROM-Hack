00000000                            ; /=========================================================================\
00000000                            ; �	This file is generated by The Interactive Disassembler (IDA)	    �
00000000                            ; �	Copyright (c) 2003 by DataRescue sa/nv,	<ida@datarescue.com>	    �
00000000                            ; \=========================================================================/
00000000                            ;
00000000                            ; Disassembly created by Hivebrain
00000000                            ; thanks to drx and Stealth
00000000                            
00000000                            ; Processor:	    68000
00000000                            ; Target Assembler: 680x0 Assembler in MRI compatible mode
00000000                            ; This file should be compiled with "as	-M"
00000000                            
00000000                            ; ===========================================================================
00000000                            		include	"Equz80.asm"
00000000                            ; ===========================================================================
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; ListEqu.exe generated from "Dual PCM\Z80.lst"
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000 =00000E80                  E_BuffStart = $E80 ; Start of the buffer (ALWAYS keep it multiples of 20)
00000000 =00000FFF                  E_BuffFinish = $FFF ; End of the buffer (keep in multiples of 100 - 1, e.g. 0FFF, 0EFF, 0DFF, 0CFF, etc)
00000000 =00000020                  E_BuffSize = $20 ; Number of bytes to buffer ahead of time (keep at POT) (part of it is done manually, so just changing this value won't do it all).
00000000 =00001000                  E_CueStart = $1000 ; Start of the cue, (ALWAYS keep in multiples of 10)
00000000 =00002000                  E_CueFinish = $2000 ; End of the cue (keep in multiples of 10)
00000000 =00000300                  E_CueSize = $300 ; Number of bytes for the 68k to cue ahead (keep in multiples of 100)
00000000 =00000000                  M_Flush = $0 
00000000 =00000000                  Start = $0 
00000000 =00000008                  Switch_PCM = $8 
00000000 =0000000E                  SD_NextBit = $E 
00000000 =0000001F                  CUPCM1_Switch = $1F 
00000000 =0000002D                  CUPCM1_SwStack = $2D 
00000000 =00000031                  CUPCM2_Switch = $31 
00000000 =0000003F                  CUPCM2_SwStack = $3F 
00000000 =00000047                  CU_Stack = $47 
00000000 =00000049                  InitRout = $49 
00000000 =000000E0                  CUPCM1_Reset = $E0 
00000000 =000000F8                  CUPCM1_Mute = $F8 
00000000 =0000011B                  CatchUp_Exx = $11B 
00000000 =0000011C                  CatchUp = $11C 
00000000 =0000011C                  CUPCM1_Switch0 = $11C 
00000000 =0000011D                  CUPCM1_Switch1 = $11D 
00000000 =0000011E                  CUPCM1_Switch2 = $11E 
00000000 =0000011F                  CUPCM1_Switch3 = $11F 
00000000 =00000120                  CUPCM1_Switch4 = $120 
00000000 =00000121                  CUPCM1_Switch5 = $121 
00000000 =00000122                  CUPCM1_Switch6 = $122 
00000000 =00000123                  CUPCM1_Switch7 = $123 
00000000 =00000124                  CUPCM1_Switch8 = $124 
00000000 =00000132                  CUPCM1_Load = $132 
00000000 =0000015B                  CUPCM1_ResRet = $15B 
00000000 =0000015E                  CUPCM1_MuteRet = $15E 
00000000 =0000015F                  CUPCM2_Switch0 = $15F 
00000000 =00000160                  CUPCM2_Switch1 = $160 
00000000 =00000161                  CUPCM2_Switch2 = $161 
00000000 =00000162                  CUPCM2_Switch3 = $162 
00000000 =00000163                  CUPCM2_Switch4 = $163 
00000000 =00000164                  CUPCM2_Switch5 = $164 
00000000 =00000165                  CUPCM2_Switch6 = $165 
00000000 =00000166                  CUPCM2_Switch7 = $166 
00000000 =00000167                  CUPCM2_Switch8 = $167 
00000000 =00000173                  CUPCM2_Load = $173 
00000000 =000001B8                  CUPCM2_ResRet = $1B8 
00000000 =000001BB                  CUPCM2_MuteRet = $1BB 
00000000 =000001BE                  CU_ResBufINRet = $1BE 
00000000 =000001C3                  CU_ResBufOTRet = $1C3 
00000000 =000001D2                  CUPCM1_RET = $1D2 
00000000 =000001D3                  CUPCM2_RET = $1D3 
00000000 =000001D6                  Flush = $1D6 
00000000 =000001D9                  FL_Return = $1D9 
00000000 =000001DD                  BM_ResBufOTRet = $1DD 
00000000 =000001DD                  FL_FlushSwitch = $1DD 
00000000 =000001E0                  CUPCM2_Mute = $1E0 
00000000 =00000202                  CUPCM2_Reset = $202 
00000000 =0000021A                  CU_ResetBufferIN = $21A 
00000000 =00000227                  CU_ResetBufferOUT = $227 
00000000 =00000234                  BM_ResetBufferOUT = $234 
00000000 =00000241                  CUPCM2_NewSample = $241 
00000000 =00000264                  CUPCM1_NewSample = $264 
00000000 =00000287                  FL_Loop = $287 
00000000 =0000028D                  BM_NextByte = $28D 
00000000 =000002BE                  Valid = $2BE 
00000000 =000002D7                  OutRange = $2D7 
00000000 =000002E0                  PCM1_SampCur = $2E0 
00000000 =000002E2                  PCM1_BankCur = $2E2 
00000000 =000002E3                  PCM2_SampCur = $2E3 
00000000 =000002E5                  PCM2_BankCur = $2E5 
00000000 =000002E6                  PCM1_Sample = $2E6 
00000000 =000002E8                  PCM1_Bank = $2E8 
00000000 =000002E9                  PCM2_Sample = $2E9 
00000000 =000002EB                  PCM2_Bank = $2EB 
00000000 =000002EC                  MuteSample = $2EC 
00000000 =000002EF                  YM_Access = $2EF 
00000000 =000002F0                  YM_Point68k = $2F0 
00000000 =000002F2                  YM_PointZ80 = $2F2 
00000000 =00001000                  YM_List = $1000 
00000000                            
00000000                            ; ===========================================================================
00000000                            ; ===========================================================================
00000000                            		include	"Macros.asm"
00000000 =FFFFD000                  v_objspace:	equ $FFFFD000	; object variable space ($40 bytes per object) ($2000 bytes)
00000000 =FFFFD000                  v_player:	equ v_objspace	; object variable space for Sonic ($40 bytes)
00000000 =FFFFF700                  v_screenposx:	equ $FFFFF700
00000000 =FFFFFC00                  v_objstate:	equ $FFFFFC00
00000000                            
00000000                            ; Object variables
00000000 =00000001                  obRender:	equ 1	; bitfield for x/y flip, display mode
00000000 =00000002                  obGfx:		equ 2	; palette line & VRAM setting (2 bytes)
00000000 =00000004                  obMap:		equ 4	; mappings address (4 bytes)
00000000 =00000008                  obX:		equ 8	; x-axis position (2-4 bytes)
00000000 =0000000A                  obScreenY:	equ $A	; y-axis position for screen-fixed items (2 bytes)
00000000 =0000000C                  obY:		equ $C	; y-axis position (2-4 bytes)
00000000 =00000010                  obVelX:		equ $10	; x-axis velocity (2 bytes)
00000000 =00000012                  obVelY:		equ $12	; y-axis velocity (2 bytes)
00000000 =00000014                  obInertia:	equ $14	; potential speed (2 bytes)
00000000 =00000016                  obHeight:	equ $16	; height/2
00000000 =00000017                  obWidth:	equ $17	; width/2
00000000 =00000018                  obPriority:	equ $18	; sprite stack priority -- 0 is front
00000000 =00000019                  obActWid:	equ $19	; action width
00000000 =0000001A                  obFrame:	equ $1A	; current frame displayed
00000000 =0000001B                  obAniFrame:	equ $1B	; current frame in animation script
00000000 =0000001C                  obAnim:		equ $1C	; current animation
00000000 =0000001D                  obNextAni:	equ $1D	; next animation
00000000 =0000001E                  obTimeFrame:	equ $1E	; time to next frame
00000000 =0000001F                  obDelayAni:	equ $1F	; time to delay animation
00000000 =00000020                  obColType:	equ $20	; collision response type
00000000 =00000021                  obColProp:	equ $21	; collision extra property
00000000 =00000022                  obStatus:	equ $22	; orientation or mode
00000000 =00000023                  obRespawnNo:	equ $23	; respawn list index number
00000000 =00000024                  obRoutine:	equ $24	; routine number
00000000 =00000025                  ob2ndRout:	equ $25	; secondary routine number
00000000 =00000026                  obAngle:	equ $26	; angle
00000000 =00000028                  obSubtype:	equ $28	; object subtype
00000000 =00000025                  obSolid:	equ ob2ndRout ; solid status flag
00000000                            out_of_range:	macro exit,pos
00000000                            		if (narg=2)
00000000                            		move.w	pos,d0		; get object position (if specified as not obX)
00000000                            		else
00000000                            		move.w	obX(a0),d0	; get object position
00000000                            		endc
00000000                            		andi.w	#$FF80,d0	; round down to nearest $80
00000000                            		move.w	(v_screenposx).w,d1 ; get screen position
00000000                            		subi.w	#128,d1
00000000                            		andi.w	#$FF80,d1
00000000                            		sub.w	d1,d0		; approx distance between object and screen
00000000                            		cmpi.w	#128+320+192,d0
00000000                            		bhi.\0	exit
00000000                            		endm
00000000                            ; ===========================================================================
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Macros
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            	; --- Alignment ---
00000000                            
00000000                            align		macro	Size,Value
00000000                            		dcb.b	Size-(*%Size),Value
00000000                            		endm
00000000                            
00000000                            	; --- Stop Z80 ---
00000000                            
00000000                            StopZ80		macro
00000000                            		move.w	#$0100,($A11100).l			; request Z80 stop (ON)
00000000                            		btst.b	#$00,($A11100).l			; has the Z80 stopped yet?
00000000                            		bne.s	*-$08					; if not, branch
00000000                            		endm
00000000                            
00000000                            	; --- Start Z80 ---
00000000                            
00000000                            StartZ80	macro
00000000                            		move.w	#$0000,($A11100).l			; request Z80 stop (OFF)
00000000                            		endm
00000000                            
00000000                            	; --- Turning DMA mode on ---
00000000                            
00000000                            Z80DMA_ON	macro
00000000                            		StopZ80
00000000                            		move.b	#(Flush&$FF),($A00000+FL_FlushSwitch+1).l	; change the "jp" instruction address to "Flush" routine loop
00000000                            		StartZ80
00000000                            		move.w	#$0180,d7				; set delay time (give z80 time to get out of the "CatchUp" routine...
00000000                            		nop						; ...and into the "Flush" routine, so the 68k doesn't start DMA before...
00000000                            		nop						; ...the z80 has a chance to stop reading from the window
00000000                            		dbf	d7,*-$04				; loop back and perform the nops again...
00000000                            		endm
00000000                            
00000000                            	; --- Turning DMA mode off ---
00000000                            
00000000                            Z80DMA_OFF	macro
00000000                            		StopZ80
00000000                            		move.b	#(CatchUp&$FF),($A00000+FL_FlushSwitch+1).l	; change the "jp" instruction address to "CatchUp" routine loop
00000000                            		StartZ80
00000000                            		endm
00000000                            
00000000                            
00000000                            	; --- Storing 68k address for Z80 as dc ---
00000000                            
00000000                            dcz80		macro	Sample
00000000                            		dc.b	(Sample&$FF)
00000000                            		dc.b	(((Sample>>$08)&$7F)|$80)
00000000                            		dc.b	((Sample&$7F8000)>>$0F)
00000000                            		endm
00000000                            
00000000                            ; =============
00000000                            ;Sonic 2 Macros
00000000                            ; =============
00000000                            
00000000                            align macro
00000000                            	cnop 0,\1
00000000                            	endm
00000000                            ; >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
00000000                            ; Equates section - Names for variables.
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; size variables - you'll get an informational error if you need to change these...
00000000                            ; they are all in units of bytes
00000000 =00002F00                  Size_of_DAC_samples =		$2F00
00000000 =00006174                  Size_of_SEGA_sound =		$6174
00000000 =00000F64                  Size_of_Snd_driver_guess =	$F64 ; approximate post-compressed size of the Z80 sound driver
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Object Status Table offsets (for everything between Object_RAM and Primary_Collision)
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; universally followed object conventions:
00000000 =00000001                  render_flags =		  1 ; bitfield ; bit 7 = onscreen flag, bit 0 = x mirror, bit 1 = y mirror, bit 2 = coordinate system
00000000 =00000002                  art_tile =		  2 ; and 3 ; start of sprite's art
00000000 =00000004                  mappings =		  4 ; and 5 and 6 and 7
00000000 =00000008                  x_pos =			  8 ; and 9 ... some objects use $A and $B as well when extra precision is required (see ObjectMove) ... for screen-space objects this is called x_pixel instead
00000000 =0000000C                  y_pos =			 $C ; and $D ... some objects use $E and $F as well when extra precision is required ... screen-space objects use y_pixel instead
00000000 =00000018                  priority =		$18 ; 0 = front
00000000 =00000019                  width_pixels =		$19
00000000 =0000001A                  mapping_frame =		$1A
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; conventions followed by most objects:
00000000 =00000010                  x_vel =			$10 ; and $11 ; horizontal velocity
00000000 =00000012                  y_vel =			$12 ; and $13 ; vertical velocity
00000000 =00000016                  y_radius =		$16 ; collision width / 2
00000000 =00000017                  x_radius =		$17 ; collision height / 2
00000000 =0000001B                  anim_frame =		$1B
00000000 =0000001C                  anim =			$1C
00000000 =0000001D                  next_anim =		$1D
00000000 =0000001E                  anim_frame_duration =	$1E
00000000 =00000022                  status =		$22 ; note: exact meaning depends on the object... for sonic/tails: bit 0: leftfacing. bit 1: inair. bit 2: spinning. bit 3: onobject. bit 4: rolljumping. bit 5: pushing. bit 6: underwater.
00000000 =00000024                  routine =		$24
00000000 =00000025                  routine_secondary =	$25
00000000 =00000026                  angle =			$26 ; angle about the z=0 axis (360 degrees = 256)
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; conventions followed by many objects but NOT sonic/tails:
00000000 =00000020                  collision_flags =	$20
00000000 =00000021                  collision_property =	$21
00000000 =00000023                  respawn_index =		$23
00000000 =00000028                  subtype =		$28
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; conventions specific to sonic/tails (Obj01, Obj02, and ObjDB):
00000000                            ; note: $1F, $20, and $21 are unused and available
00000000 =00000014                  inertia =		$14 ; and $15 ; directionless representation of speed... not updated in the air
00000000 =00000027                  flip_angle =		$27 ; angle about the x=0 axis (360 degrees = 256) (twist/tumble)
00000000 =00000028                  air_left =		$28
00000000 =00000029                  flip_turned =		$29 ; 0 for normal, 1 to invert flipping (it's a 180 degree rotation about the axis of Sonic's spine, so he stays in the same position but looks turned around)
00000000 =0000002A                  obj_control =		$2A ; 0 for normal, 1 for hanging or for resting on a flipper, $81 for going through CNZ/OOZ/MTZ tubes or stopped in CNZ cages or stoppers or flying if Tails
00000000 =0000002B                  status_secondary =	$2B
00000000 =0000002C                  flips_remaining =	$2C ; number of flip revolutions remaining
00000000 =0000002D                  flip_speed =		$2D ; number of flip revolutions per frame / 256
00000000 =0000002E                  move_lock =		$2E ; and $2F ; horizontal control lock, counts down to 0
00000000 =00000030                  invulnerable_time =	$30 ; and $31 ; time remaining until you stop blinking
00000000 =00000032                  invincibility_time =	$32 ; and $33 ; remaining
00000000 =00000034                  speedshoes_time =	$34 ; and $35 ; remaining
00000000 =00000036                  next_tilt =		$36 ; angle on ground in front of sprite
00000000 =00000037                  tilt =			$37 ; angle on ground
00000000 =00000038                  stick_to_convex =	$38 ; 0 for normal, 1 to make Sonic stick to convex surfaces like the rotating discs in Sonic 1 and 3 (unused in Sonic 2 but fully functional)
00000000 =00000039                  spindash_flag =		$39 ; 0 for normal, 1 for charging a spindash or forced rolling
00000000 =0000003A                  spindash_counter =	$3A ; and $3B
00000000 =0000003C                  jumping =		$3C
00000000 =0000003D                  interact =		$3D ; RAM address of the last object Sonic stood on, minus $FFFFB000 and divided by $40
00000000 =0000003E                  layer =			$3E ; collision plane, track switching...
00000000 =0000003F                  layer_plus =		$3F ; always same as layer+1 ?? used for collision somehow
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; conventions followed by several objects but NOT sonic/tails:
00000000 =0000000A                  y_pixel =		2+x_pos ; and 3+x_pos ; y coordinate for objects using screen-space coordinate system
00000000 =00000008                  x_pixel =		x_pos ; and 1+x_pos ; x coordinate for objects using screen-space coordinate system
00000000 =0000003E                  parent =		$3E ; and $3F ; address of object that owns or spawned this one, if applicable
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; unknown or inconsistently used offsets that are not applicable to sonic/tails:
00000000                            ; (provided because rearrangement of the above values sometimes requires making space in here too)
00000000 =0000000A                  objoff_A =		2+x_pos ; note: x_pos can be 4 bytes, but sometimes the last 2 bytes of x_pos are used for other unrelated things
00000000 =0000000B                  objoff_B =		3+x_pos
00000000 =0000000E                  objoff_E =		2+y_pos
00000000 =0000000F                  objoff_F =		3+y_pos
00000000 =00000014                  objoff_14 =		$14
00000000 =00000015                  objoff_15 =		$15
00000000 =0000001F                  objoff_1F =		$1F
00000000 =00000027                  objoff_27 =		$27
00000000 =00000028                  objoff_28 =		$28 ; overlaps subtype, but a few objects use it for other things anyway
00000000 =00000029                  objoff_29 =		$29
00000000 =0000002A                  objoff_2A =		$2A
00000000 =0000002B                  objoff_2B =		$2B
00000000 =0000002C                  objoff_2C =		$2C
00000000 =0000002D                  objoff_2D =		$2D
00000000 =0000002E                  objoff_2E =		$2E
00000000 =0000002F                  objoff_2F =		$2F
00000000 =00000030                  objoff_30 =		$30
00000000 =00000031                  objoff_31 =		$31
00000000 =00000032                  objoff_32 =		$32
00000000 =00000033                  objoff_33 =		$33
00000000 =00000034                  objoff_34 =		$34
00000000 =00000035                  objoff_35 =		$35
00000000 =00000036                  objoff_36 =		$36
00000000 =00000037                  objoff_37 =		$37
00000000 =00000038                  objoff_38 =		$38
00000000 =00000039                  objoff_39 =		$39
00000000 =0000003A                  objoff_3A =		$3A
00000000 =0000003B                  objoff_3B =		$3B
00000000 =0000003C                  objoff_3C =		$3C
00000000 =0000003D                  objoff_3D =		$3D
00000000 =0000003E                  objoff_3E =		$3E
00000000 =0000003F                  objoff_3F =		$3F
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; property of all objects:
00000000 =00000040                  next_object =		$40 ; the size of an object
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; RAM variables
00000000 =FFFF0000                  RAM_Start =			$FFFF0000
00000000 =FFFF0000                  Metablock_Table =		$FFFF0000
00000000 =FFFF8000                  Level_Layout =			$FFFF8000
00000000 =FFFF9000                  Block_Table =			$FFFF9000
00000000 =FFFFAA00                  Decomp_Buffer =			$FFFFAA00
00000000 =FFFFAC00                  Sprite_Table_Input = 		$FFFFAC00 ; in custom format before being converted and stored in Sprite_Table/Sprite_Table_2
00000000 =FFFFB000                  Object_RAM =			$FFFFB000 ; through $FFFFD5FF
00000000 =FFFFB000                  MainCharacter =			$FFFFB000 ; first object (usually Sonic except in a Tails Alone game)
00000000 =FFFFB040                  Sidekick =			$FFFFB040 ; second object (Tails in a Sonic and Tails game)
00000000 =FFFFD000                  Tails_Tails =			$FFFFD000 ; address of the Tail's Tails object
00000000 =FFFFD100                  Sonic_Dust =			$FFFFD100
00000000 =FFFFD140                  Tails_Dust =			$FFFFD140
00000000                            
00000000 =FFFFD000                  PNT_Buffer =			$FFFFD000 ; in special stage
00000000 =FFFFD600                  Primary_Collision =		$FFFFD600
00000000 =FFFFD700                  Horiz_Scroll_Buf_2 =		$FFFFD700 ; in special stage
00000000 =FFFFD900                  Secondary_Collision =		$FFFFD900
00000000 =FFFFDC00                  VDP_Command_Buffer =		$FFFFDC00 ; stores VDP commands to issue the next time ProcessDMAQueue is called
00000000 =FFFFDCFC                  VDP_Command_Buffer_Slot =	$FFFFDCFC ; stores the address of the next open slot for a queued VDP command
00000000 =FFFFDD00                  Sprite_Table_2 =		$FFFFDD00 ; Sprite attribute table buffer for the bottom split screen in 2-player mode
00000000 =FFFFE000                  Horiz_Scroll_Buf =		$FFFFE000
00000000 =FFFFE400                  Sonic_Stat_Record_Buf =		$FFFFE400
00000000 =FFFFE500                  Sonic_Pos_Record_Buf =		$FFFFE500
00000000 =FFFFE600                  Tails_Pos_Record_Buf =		$FFFFE600
00000000 =FFFFE800                  Ring_Positions =		$FFFFE800
00000000 =FFFFEE00                  Camera_RAM =			$FFFFEE00
00000000 =FFFFEE00                  Camera_X_pos =			$FFFFEE00
00000000 =FFFFEE04                  Camera_Y_pos =			$FFFFEE04
00000000 =FFFFEEC6                  Camera_Max_Y_pos =		$FFFFEEC6
00000000 =FFFFEEC8                  Camera_Min_X_pos =		$FFFFEEC8
00000000 =FFFFEECA                  Camera_Max_X_pos =		$FFFFEECA
00000000 =FFFFEECC                  Camera_Min_Y_pos =		$FFFFEECC
00000000 =FFFFEECE                  Camera_Max_Y_pos_now =		$FFFFEECE ; was "Camera_max_scroll_spd"...
00000000 =FFFFEED2                  Sonic_Pos_Record_Index =	$FFFFEED2 ; into Sonic_Pos_Record_Buf and Sonic_Stat_Record_Buf
00000000 =FFFFEED6                  Tails_Pos_Record_Index =	$FFFFEED6 ; into Tails_Pos_Record_Buf
00000000 =FFFFEED8                  Camera_Y_pos_bias =		$FFFFEED8 ; added to y position for lookup/lookdown, $60 is center
00000000 =FFFFEEDA                  Camera_Y_pos_bias_2P =		$FFFFEEDA ; for Tails
00000000 =FFFFEEDF                  Dynamic_Resize_Routine =	$FFFFEEDF
00000000 =FFFFEEF8                  Tails_Min_X_pos =		$FFFFEEF8
00000000 =FFFFEEFA                  Tails_Max_X_pos =		$FFFFEEFA
00000000 =FFFFEEFE                  Tails_Max_Y_pos =		$FFFFEEFE
00000000                            
00000000 =FFFFF000                  Underwater_palette_2 = 		$FFFFF000 ; not sure what it's used for but it's only used when there's water
00000000 =FFFFF080                  Underwater_palette = 		$FFFFF080 ; main palette for underwater parts of the screen
00000000 =FFFFF0E0                  Underwater_palette_line4 = 	$FFFFF0E0
00000000                            
00000000 =FFFFF600                  Game_Mode =			$FFFFF600 ; 1 byte ; see GameModesArray (master level trigger, Mstr_Lvl_Trigger)
00000000 =FFFFF602                  Ctrl_1_Logical =		$FFFFF602 ; 2 bytes
00000000 =FFFFF602                  Ctrl_1_Held_Logical =		$FFFFF602 ; 1 byte
00000000 =FFFFF603                  Ctrl_1_Press_Logical =		$FFFFF603 ; 1 byte
00000000 =FFFFF604                  Ctrl_1 =			$FFFFF604 ; 2 bytes
00000000 =FFFFF604                  Ctrl_1_Held =			$FFFFF604 ; 1 byte ; (pressed and held were switched around before)
00000000 =FFFFF605                  Ctrl_1_Press =			$FFFFF605 ; 1 byte
00000000 =FFFFF606                  Ctrl_2 =			$FFFFF606 ; 2 bytes
00000000 =FFFFF606                  Ctrl_2_Held =			$FFFFF606 ; 1 byte
00000000 =FFFFF607                  Ctrl_2_Press =			$FFFFF607 ; 1 byte
00000000 =FFFFF614                  Demo_Time_left =		$FFFFF614 ; 2 bytes
00000000                            
00000000 =FFFFF616                  Vscroll_Factor =		$FFFFF616
00000000 =FFFFF624                  Hint_counter_reserve =		$FFFFF624 ; Must contain a VDP command word, preferably a write to register $0A. Executed every V-INT.
00000000 =FFFFF62A                  Delay_Time =			$FFFFF62A ; number of frames to delay the game
00000000 =FFFFF636                  RNG_seed =			$FFFFF636 ; used for random number generation
00000000 =FFFFF63A                  Game_paused =			$FFFFF63A
00000000 =FFFFF640                  DMA_data_thunk =		$FFFFF640 ; Used as a RAM holder for the final DMA command word. Data will NOT be preserved across V-INTs, so consider this space reserved.
00000000                            
00000000 =FFFFF646                  Water_Level_1 =			$FFFFF646
00000000 =FFFFF648                  Water_Level_2 =			$FFFFF648
00000000 =FFFFF64A                  Water_Level_3 =			$FFFFF64A
00000000 =FFFFF64D                  Water_routine =			$FFFFF64D
00000000 =FFFFF64E                  Water_move =			$FFFFF64E
00000000 =FFFFF64C                  Water_on =			$FFFFF64C ; is set based on Water_flag
00000000 =FFFFF650                  New_Water_Level =		$FFFFF650
00000000 =FFFFF652                  Water_change_speed =		$FFFFF652
00000000 =FFFFF65E                  Palette_frame_count =		$FFFFF65E
00000000                            
00000000 =FFFFF66A                  Ctrl_2_Logical =		$FFFFF66A ; 2 bytes
00000000 =FFFFF66A                  Ctrl_2_Held_Logical =		$FFFFF66A ; 1 byte
00000000 =FFFFF66B                  Ctrl_2_Press_Logical =		$FFFFF66B ; 1 byte
00000000 =FFFFF66C                  Sonic_Look_delay_counter = 	$FFFFF66C ; 2 bytes
00000000 =FFFFF66E                  Tails_Look_delay_counter = 	$FFFFF66E ; 2 bytes
00000000 =FFFFF670                  Super_Sonic_frame_count =	$FFFFF670
00000000 =FFFFF680                  Plc_Buffer =			$FFFFF680 ; Pattern load queue
00000000                            
00000000 =FFFFF700                  Misc_Variables =		$FFFFF700
00000000                            
00000000                            ; extra variables for the second player (CPU) in 1-player mode
00000000 =FFFFF702                  Tails_control_counter =		$FFFFF702 ; how long until the CPU takes control
00000000 =FFFFF704                  Tails_respawn_counter =		$FFFFF704
00000000 =FFFFF708                  Tails_CPU_routine =		$FFFFF708
00000000 =FFFFF70A                  Tails_CPU_target_x =		$FFFFF70A
00000000 =FFFFF70C                  Tails_CPU_target_y =		$FFFFF70C
00000000 =FFFFF70E                  Tails_interact_ID =		$FFFFF70E ; object ID of last object stood on
00000000                            
00000000 =FFFFF711                  Level_started_flag =		$FFFFF711
00000000 =FFFFF71A                  CNZ_Bumper_routine =		$FFFFF71A
00000000 =FFFFF72C                  Dirty_flag =			$FFFFF72C ; if whole screen needs to redraw
00000000 =FFFFF730                  Water_flag =			$FFFFF730 ; if the level has water or oil
00000000                            
00000000 =FFFFF760                  Sonic_top_speed =		$FFFFF760
00000000 =FFFFF762                  Sonic_acceleration =		$FFFFF762
00000000 =FFFFF764                  Sonic_deceleration =		$FFFFF764
00000000 =FFFFF76C                  Obj_placement_routine =		$FFFFF76C
00000000 =FFFFF770                  Obj_load_addr_0 =		$FFFFF770
00000000 =FFFFF774                  Obj_load_addr_1 =		$FFFFF774
00000000 =FFFFF778                  Obj_load_addr_2 =		$FFFFF778
00000000 =FFFFF77C                  Obj_load_addr_3 =		$FFFFF77C
00000000 =FFFFF790                  Demo_button_index =		$FFFFF790 ; index into button press demo data, for player 1
00000000 =FFFFF792                  Demo_press_counter =		$FFFFF792 ; frames remaining until next button press, for player 1
00000000 =FFFFF732                  Demo_button_index_2P =		$FFFFF732 ; index into button press demo data, for player 2
00000000 =FFFFF734                  Demo_press_counter_2P =		$FFFFF734 ; frames remaining until next button press, for player 2
00000000 =FFFFF796                  Collision_addr =		$FFFFF796
00000000 =FFFFF7AA                  Current_Boss_ID =		$FFFFF7AA
00000000 =FFFFF7CC                  Control_Locked =		$FFFFF7CC
00000000 =FFFFF7D0                  Chain_Bonus_counter =		$FFFFF7D0 ; counts up when you destroy things that give points, resets when you touch the ground
00000000 =FFFFF7D2                  Bonus_Countdown_1 =		$FFFFF7D2 ; level results time bonus or special stage sonic ring bonus
00000000 =FFFFF7D4                  Bonus_Countdown_2 =		$FFFFF7D4 ; level results ring bonus or special stage tails ring bonus
00000000 =FFFFF7D6                  Update_Bonus_score =		$FFFFF7D6
00000000 =FFFFF7DA                  Camera_X_pos_coarse =		$FFFFF7DA ; (Camera_X_pos - 128) / 256
00000000                            
00000000 =FFFFF800                  Sprite_Table =			$FFFFF800 ; Sprite attribute table buffer
00000000                            
00000000 =FFFFFB00                  Normal_palette =		$FFFFFB00
00000000 =FFFFFB20                  Normal_palette_line2 =		$FFFFFB20
00000000 =FFFFFB40                  Normal_palette_line3 =		$FFFFFB40
00000000 =FFFFFB60                  Normal_palette_line4 =		$FFFFFB60
00000000 =FFFFFB80                  Second_palette =		$FFFFFB80
00000000 =FFFFFBA0                  Second_palette_line2 =		$FFFFFBA0
00000000 =FFFFFBC0                  Second_palette_line3 =		$FFFFFBC0
00000000 =FFFFFBE0                  Second_palette_line4 =		$FFFFFBE0
00000000                            
00000000 =FFFFFC00                  Object_Respawn_Table =		$FFFFFC00
00000000 =FFFFFE00                  System_Stack =			$FFFFFE00
00000000 =FFFFFE02                  Level_Inactive_flag = 		$FFFFFE02 ; (2 bytes)
00000000 =FFFFFE04                  Timer_frames =			$FFFFFE04 ; (2 bytes)
00000000 =FFFFFE06                  Debug_object =			$FFFFFE06
00000000 =FFFFFE08                  Debug_placement_mode =		$FFFFFE08
00000000 =FFFFFE10                  Current_ZoneAndAct =		$FFFFFE10 ; 2 bytes
00000000 =FFFFFE10                  Current_Zone =			$FFFFFE10 ; 1 byte
00000000 =FFFFFE11                  Current_Act =			$FFFFFE11 ; 1 byte
00000000 =FFFFFE12                  Life_count =			$FFFFFE12
00000000 =FFFFFE16                  Current_Special_Stage =		$FFFFFE16
00000000 =FFFFFE18                  Continue_count =		$FFFFFE18
00000000 =FFFFFE19                  Super_Sonic_flag =		$FFFFFE19
00000000 =FFFFFE1A                  Time_Over_flag =		$FFFFFE1A
00000000 =FFFFFE1B                  Extra_life_flags =		$FFFFFE1B
00000000                            
00000000                            ; If set, the respective HUD element will be updated.
00000000 =FFFFFE1C                  Update_HUD_lives =		$FFFFFE1C
00000000 =FFFFFE1D                  Update_HUD_rings =		$FFFFFE1D
00000000 =FFFFFE1E                  Update_HUD_timer =		$FFFFFE1E
00000000 =FFFFFE1F                  Update_HUD_score =		$FFFFFE1F
00000000                            
00000000 =FFFFFE20                  Ring_count =			$FFFFFE20 ; 2 bytes
00000000 =FFFFFE22                  Timer =				$FFFFFE22 ; 4 bytes
00000000 =FFFFFE22                  Timer_minute_word =		$FFFFFE22 ; 2 bytes
00000000 =FFFFFE23                  Timer_minute =			$FFFFFE23 ; 1 byte
00000000 =FFFFFE24                  Timer_second =			$FFFFFE24 ; 1 byte
00000000 =FFFFFE25                  Timer_centisecond =		$FFFFFE25 ; 1 byte
00000000 =FFFFFE26                  Score =				$FFFFFE26 ; 4 bytes
00000000 =FFFFFE30                  Last_star_pole_hit =		$FFFFFE30 ; 1 byte -- max activated starpole ID in this act
00000000                            
00000000 =FFFFFE31                  Saved_Last_star_pole_hit =	$FFFFFE31
00000000 =FFFFFE32                  Saved_x_pos =			$FFFFFE32
00000000 =FFFFFE34                  Saved_y_pos =			$FFFFFE34
00000000 =FFFFFE36                  Saved_Ring_count =		$FFFFFE36
00000000 =FFFFFE38                  Saved_Timer =			$FFFFFE38
00000000 =FFFFFE3C                  Saved_art_tile =		$FFFFFE3C
00000000 =FFFFFE3E                  Saved_layer =			$FFFFFE3E
00000000 =FFFFFE40                  Saved_Camera_X_pos =		$FFFFFE40
00000000 =FFFFFE42                  Saved_Camera_Y_pos =		$FFFFFE42
00000000 =FFFFFE50                  Saved_Water_Level =		$FFFFFE50
00000000 =FFFFFE52                  Saved_Water_routine =		$FFFFFE52
00000000 =FFFFFE53                  Saved_Water_move =		$FFFFFE53
00000000 =FFFFFE54                  Saved_Extra_life_flags =	$FFFFFE54
00000000 =FFFFFE55                  Saved_Extra_life_flags_2P =	$FFFFFE55
00000000 =FFFFFE56                  Saved_Camera_Max_Y_pos =	$FFFFFE56
00000000 =FFFFFE58                  Saved_Dynamic_Resize_Routine =	$FFFFFE58
00000000                            
00000000 =FFFFFEA0                  Logspike_anim_counter =		$FFFFFEA0
00000000 =FFFFFEA1                  Logspike_anim_frame =		$FFFFFEA1
00000000 =FFFFFEA2                  Rings_anim_counter =		$FFFFFEA2
00000000 =FFFFFEA3                  Rings_anim_frame =		$FFFFFEA3
00000000 =FFFFFEA4                  Unknown_anim_counter =		$FFFFFEA4 ; I think this was $FFFFFEC4 in the alpha
00000000 =FFFFFEA5                  Unknown_anim_frame =		$FFFFFEA5
00000000 =FFFFFEA6                  Ring_spill_anim_counter =	$FFFFFEA6 ; scattered rings
00000000 =FFFFFEA7                  Ring_spill_anim_frame =		$FFFFFEA7
00000000 =FFFFFEA8                  Ring_spill_anim_accum =		$FFFFFEA8
00000000                            
00000000                            ; values for the second player (some of these only apply to 2-player games)
00000000 =FFFFFEC0                  Tails_top_speed =		$FFFFFEC0 ; Tails_max_vel
00000000 =FFFFFEC2                  Tails_acceleration =		$FFFFFEC2
00000000 =FFFFFEC4                  Tails_deceleration =		$FFFFFEC4
00000000 =FFFFFEC6                  Life_count_2P =			$FFFFFEC6
00000000 =FFFFFEC7                  Extra_life_flags_2P =		$FFFFFEC7
00000000 =FFFFFEC8                  Update_HUD_lives_2P =		$FFFFFEC8
00000000 =FFFFFEC9                  Update_HUD_rings_2P =		$FFFFFEC9
00000000 =FFFFFECA                  Update_HUD_timer_2P =		$FFFFFECA
00000000 =FFFFFECB                  Update_HUD_score_2P =		$FFFFFECB ; mostly unused
00000000 =FFFFFECC                  Time_Over_flag_2P =		$FFFFFECC
00000000 =FFFFFED0                  Ring_count_2P =			$FFFFFED0
00000000 =FFFFFED2                  Timer_2P =			$FFFFFED2 ; 4 bytes
00000000 =FFFFFED2                  Timer_minute_word_2P =		$FFFFFED2 ; 2 bytes
00000000 =FFFFFED3                  Timer_minute_2P =		$FFFFFED3 ; 1 byte
00000000 =FFFFFED4                  Timer_second_2P =		$FFFFFED4 ; 1 byte
00000000 =FFFFFED5                  Timer_centisecond_2P =		$FFFFFED5 ; 1 byte
00000000 =FFFFFED6                  Score_2P =			$FFFFFED6
00000000 =FFFFFEE0                  Last_star_pole_hit_2P =		$FFFFFEE0
00000000                            
00000000 =FFFFFEE1                  Saved_Last_star_pole_hit_2P =	$FFFFFEE1
00000000 =FFFFFEE2                  Saved_x_pos_2P =		$FFFFFEE2
00000000 =FFFFFEE4                  Saved_y_pos_2P =		$FFFFFEE4
00000000 =FFFFFEE6                  Saved_Ring_count_2P =		$FFFFFEE6
00000000 =FFFFFEE8                  Saved_Timer_2P =		$FFFFFEE8
00000000 =FFFFFEEC                  Saved_art_tile_2P =		$FFFFFEEC
00000000 =FFFFFEEE                  Saved_layer_2P =		$FFFFFEEE
00000000                            
00000000 =FFFFFEF8                  Loser_Time_Left =		$FFFFFEF8
00000000 =FFFFFF10                  Results_Screen_2P =		$FFFFFF10 ; 0 = act, 1 = zone, 2 = game, 3 = SS, 4 = SS all
00000000 =FFFFFF20                  Results_Data_2P =		$FFFFFF20 ; $18 bytes
00000000 =FFFFFF20                  EHZ_Results_2P =		$FFFFFF20 ; 6 bytes
00000000 =FFFFFF26                  MCZ_Results_2P =		$FFFFFF26 ; 6 bytes
00000000 =FFFFFF2C                  CNZ_Results_2P =		$FFFFFF2C ; 6 bytes
00000000 =FFFFFF32                  SS_Results_2P =			$FFFFFF32 ; 6 bytes
00000000 =FFFFFF38                  SS_Total_Won =			$FFFFFF38 ; 2 bytes (player 1 then player 2)
00000000 =FFFFFF40                  Perfect_rings_left =		$FFFFFF40
00000000 =FFFFFF70                  Player_mode =			$FFFFFF70 ; 0 = Sonic and Tails, 1 = Sonic, 2 = Tails
00000000 =FFFFFF72                  Player_option =			$FFFFFF72 ; 0 = Sonic and Tails, 1 = Sonic, 2 = Tails
00000000                            
00000000 =FFFFFF74                  Two_player_items =		$FFFFFF74
00000000 =FFFFFF82                  Level_select_zone =		$FFFFFF82
00000000 =FFFFFF84                  Sound_test_sound =		$FFFFFF84
00000000 =FFFFFF86                  Title_screen_option =		$FFFFFF86
00000000 =FFFFFF88                  Current_Zone_2P =		$FFFFFF88
00000000 =FFFFFF89                  Current_Act_2P =		$FFFFFF89
00000000 =FFFFFF8A                  Two_player_mode_copy =		$FFFFFF8A
00000000 =FFFFFF8C                  Options_menu_box =		$FFFFFF8C
00000000 =FFFFFF90                  Level_Music =			$FFFFFF90
00000000 =FFFFFF98                  Game_Over_2P =			$FFFFFF98
00000000 =FFFFFFB0                  Got_Emerald =			$FFFFFFB0
00000000 =FFFFFFB1                  Emerald_count =			$FFFFFFB1
00000000 =FFFFFFB2                  Got_Emeralds_array =		$FFFFFFB2 ; 7 bytes
00000000 =FFFFFFC0                  Next_Extra_life_score =		$FFFFFFC0
00000000 =FFFFFFC4                  Next_Extra_life_score_2P =	$FFFFFFC4
00000000 =FFFFFFC8                  Level_Has_Signpost =		$FFFFFFC8 ; 1 byte ; 1 = signpost, 0 = boss or nothing
00000000 =FFFFFFD0                  Level_select_flag =		$FFFFFFD0
00000000 =FFFFFFD4                  Correct_cheat_entries =		$FFFFFFD4
00000000 =FFFFFFD6                  Correct_cheat_entries_2 =	$FFFFFFD6 ; for 14 continues or 7 emeralds codes
00000000 =FFFFFFD8                  Two_player_mode =		$FFFFFFD8 ; flag (0 for main game)
00000000                            
00000000                            ; Values in these variables are passed to the sound driver during V-INT.
00000000                            ; They use a playlist index, not a sound test index.
00000000 =FFFFFFE0                  Music_to_play =			$FFFFFFE0
00000000 =FFFFFFE1                  SFX_to_play =			$FFFFFFE1 ; normal
00000000 =FFFFFFE2                  SFX_to_play_2 =			$FFFFFFE2 ; alternating stereo
00000000 =FFFFFFE4                  Music_to_play_2 =		$FFFFFFE4 ; alternate (higher priority?) slot
00000000                            
00000000 =FFFFFFF0                  Demo_mode_flag =		$FFFFFFF0 ; 1 if a demo is playing (2 bytes)
00000000 =FFFFFFF2                  Demo_number =			$FFFFFFF2 ; which demo will play next (2 bytes)
00000000 =FFFFFFF8                  Graphics_Flags =		$FFFFFFF8 ; misc. bitfield
00000000 =FFFFFFFC                  Checksum_fourcc =		$FFFFFFFC ; (4 bytes)
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; VDP addressses
00000000 =00C00000                  VDP_data_port =			$C00000 ; (8=r/w, 16=r/w)
00000000 =00C00004                  VDP_control_port =		$C00004 ; (8=r/w, 16=r/w)
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Z80 addresses
00000000 =00A00000                  Z80_RAM =			$A00000 ; start of Z80 RAM
00000000 =00A02000                  Z80_RAM_End =			$A02000 ; end of non-reserved Z80 RAM
00000000 =00A10001                  Z80_Version =			$A10001
00000000 =00A10002                  Z80_Port_1_Data =		$A10002
00000000 =00A10008                  Z80_Port_1_Control =		$A10008
00000000 =00A1000A                  Z80_Port_2_Control =		$A1000A
00000000 =00A1000C                  Z80_Expansion_Control =		$A1000C
00000000 =00A11100                  Z80_Bus_Request =		$A11100
00000000 =00A11200                  Z80_Reset =			$A11200
00000000                            
00000000 =00A14000                  Security_Addr =			$A14000	
00000000 =00A14000                  Security_Addr =			$A14000	
00000000                            StartOfRom:
00000000 00FF FE00 0000 0000 0000+  Vectors:    dc.l $FFFE00, EntryPoint, BusError, AddressError
00000010 0000 0000 0000 0000 0000+          dc.l IllegalInstr, ZeroDivide, ChkInstr, TrapvInstr
00000020 0000 0000 0000 0000 0000+          dc.l PrivilegeViol, Trace, Line1010Emu, Line1111Emu
00000030 0000 0000 0000 0000 0000+          dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000040 0000 0000 0000 0000 0000+          dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000050 0000 0000 0000 0000 0000+          dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000060 0000 0000 0000 0000 0000+          dc.l ErrorExcept, ErrorTrap, ErrorTrap, ErrorTrap
00000070 0000 0000 0000 0000 0000+          dc.l PalToCRAM,    ErrorTrap, loc_B10, ErrorTrap
00000080 0000 0000 0000 0000 0000+          dc.l ErrorTrap, ErrorTrap, ErrorTrap, ErrorTrap
00000090 0000 0000 0000 0000 0000+          dc.l ErrorTrap, ErrorTrap, ErrorTrap, ErrorTrap
000000A0 0000 0000 0000 0000 0000+          dc.l ErrorTrap, ErrorTrap, ErrorTrap, ErrorTrap
000000B0 0000 0000 0000 0000 0000+          dc.l ErrorTrap, ErrorTrap, ErrorTrap, ErrorTrap
000000C0 0000 0000 0000 0000 0000+          dc.l ErrorTrap, ErrorTrap, ErrorTrap, ErrorTrap
000000D0 0000 0000 0000 0000 0000+          dc.l ErrorTrap, ErrorTrap, ErrorTrap, ErrorTrap
000000E0 0000 0000 0000 0000 0000+          dc.l ErrorTrap, ErrorTrap, ErrorTrap, ErrorTrap
000000F0 0000 0000 0000 0000 0000+          dc.l ErrorTrap, ErrorTrap, ErrorTrap, ErrorTrap
00000100                            
00000100 5345 4741 204D 4547 4120+  Console:	dc.b 'SEGA MEGA DRIVE ' ; Hardware system ID
00000110 2843 2953 4547 4120 3139+  Date:		dc.b '(C)SEGA 1991.APR' ; Release date
00000120 534F 4E49 4320 5448 4520+  Title_Local:	dc.b 'SONIC THE               HEDGEHOG 4 EPISODE I    ' ; Domestic name
00000150 534F 4E49 4320 5448 4520+  Title_Int:	dc.b 'SONIC THE               HEDGEHOG 4 EPISODE I    ' ; International name
00000180 474D 2030 3030 3031 3030+  Serial:		dc.b 'GM 00001009-00'   ; Serial/version number
0000018E 0000                       Checksum:	dc.w 0
00000190 4A20 2020 2020 2020 2020+  		dc.b 'J               ' ; I/O support
000001A0 0000 0000                  RomStartLoc:	dc.l StartOfRom		; ROM start
000001A4 0000 0000                  RomEndLoc:	dc.l EndOfRom-1		; ROM end
000001A8 00FF 0000                  RamStartLoc:	dc.l $FF0000		; RAM start
000001AC 00FF FFFF                  RamEndLoc:	dc.l $FFFFFF		; RAM end
000001B0 2020 2020                  SRAMSupport:	dc.l $20202020		; change to $5241E020 to create	SRAM
000001B4 2020 2020                  		dc.l $20202020		; SRAM start
000001B8 2020 2020                  		dc.l $20202020		; SRAM end
000001BC 2020 2020 2020 2020 2020+  Notes:		dc.b '                                                    '
000001F0 4A55 4520 2020 2020 2020+  Region:		dc.b 'JUE             ' ; Region
00000200                            
00000200                            ; ===========================================================================
00000200                            
00000200                            ErrorTrap:
00000200 4E71                       		nop	
00000202 4E71                       		nop	
00000204 60FA                       		bra.s	ErrorTrap
00000206                            ; ===========================================================================
00000206                            
00000206                            EntryPoint:
00000206 4AB9 00A1 0008             		tst.l	($A10008).l	; test port A control
0000020C 6600                       		bne.s	PortA_Ok
0000020E 4A79 00A1 000C             		tst.w	($A1000C).l	; test port C control
00000214                            
00000214                            PortA_Ok:
00000214 6600                       		bne.s	PortC_Ok
00000216 4BFA 0000                  		lea	SetupValues(pc),a5
0000021A 4C9D 00E0                  		movem.w	(a5)+,d5-d7
0000021E 4CDD 1F00                  		movem.l	(a5)+,a0-a4
00000222 1029 EF01                  		move.b	-$10FF(a1),d0	; get hardware version
00000226 0200 000F                  		andi.b	#$F,d0
0000022A 6700                       		beq.s	SkipSecurity
0000022C 237C 5345 4741 2F00        		move.l	#'SEGA',$2F00(a1)
00000234                            
00000234                            SkipSecurity:
00000234 3014                       		move.w	(a4),d0		; check	if VDP works
00000236 7000                       		moveq	#0,d0
00000238 2C40                       		movea.l	d0,a6
0000023A 4E66                       		move.l	a6,usp		; set usp to $0
0000023C 7217                       		moveq	#$17,d1
0000023E                            
0000023E                            VDPInitLoop:
0000023E 1A1D                       		move.b	(a5)+,d5	; add $8000 to value
00000240 3885                       		move.w	d5,(a4)		; move value to	VDP register
00000242 DA47                       		add.w	d7,d5		; next register
00000244 51C9 FFF8                  		dbf	d1,VDPInitLoop
00000248 289D                       		move.l	(a5)+,(a4)
0000024A 3680                       		move.w	d0,(a3)		; clear	the screen
0000024C 3287                       		move.w	d7,(a1)		; stop the Z80
0000024E 3487                       		move.w	d7,(a2)		; reset	the Z80
00000250                            
00000250                            WaitForZ80:
00000250 0111                       		btst	d0,(a1)		; has the Z80 stopped?
00000252 66FC                       		bne.s	WaitForZ80	; if not, branch
00000254 7425                       		moveq	#$25,d2
00000256                            
00000256                            Z80InitLoop:
00000256 10DD                       		move.b	(a5)+,(a0)+
00000258 51CA FFFC                  		dbf	d2,Z80InitLoop
0000025C 3480                       		move.w	d0,(a2)
0000025E 3280                       		move.w	d0,(a1)		; start	the Z80
00000260 3487                       		move.w	d7,(a2)		; reset	the Z80
00000262                            
00000262                            ClrRAMLoop:
00000262 2D00                       		move.l	d0,-(a6)
00000264 51CE FFFC                  		dbf	d6,ClrRAMLoop	; clear	the entire RAM
00000268 289D                       		move.l	(a5)+,(a4)	; set VDP display mode and increment
0000026A 289D                       		move.l	(a5)+,(a4)	; set VDP to CRAM write
0000026C 761F                       		moveq	#$1F,d3
0000026E                            
0000026E                            ClrCRAMLoop:
0000026E 2680                       		move.l	d0,(a3)
00000270 51CB FFFC                  		dbf	d3,ClrCRAMLoop	; clear	the CRAM
00000274 289D                       		move.l	(a5)+,(a4)
00000276 7813                       		moveq	#$13,d4
00000278                            
00000278                            ClrVDPStuff:
00000278 2680                       		move.l	d0,(a3)
0000027A 51CC FFFC                  		dbf	d4,ClrVDPStuff
0000027E 7A03                       		moveq	#3,d5
00000280                            
00000280                            PSGInitLoop:
00000280 175D 0011                  		move.b	(a5)+,$11(a3)	; reset	the PSG
00000284 51CD FFFA                  		dbf	d5,PSGInitLoop
00000288 3480                       		move.w	d0,(a2)
0000028A 4CD6 7FFF                  		movem.l	(a6),d0-a6	; clear	all registers
0000028E 46FC 2700                  		move	#$2700,sr	; set the sr
00000292                            
00000292                            PortC_Ok:
00000292 6000                       		bra.s	GameProgram
00000294                            ; ===========================================================================
00000294 8000                       SetupValues:	dc.w $8000		; XREF: PortA_Ok
00000296 3FFF                       		dc.w $3FFF
00000298 0100                       		dc.w $100
0000029A                            
0000029A 00A0 0000                  		dc.l $A00000		; start	of Z80 RAM
0000029E 00A1 1100                  		dc.l $A11100		; Z80 bus request
000002A2 00A1 1200                  		dc.l $A11200		; Z80 reset
000002A6 00C0 0000                  		dc.l $C00000
000002AA 00C0 0004                  		dc.l $C00004		; address for VDP registers
000002AE                            
000002AE 0414 303C                  		dc.b 4,	$14, $30, $3C	; values for VDP registers
000002B2 076C 0000                  		dc.b 7,	$6C, 0,	0
000002B6 0000 FF00                  		dc.b 0,	0, $FF,	0
000002BA 8137 0001                  		dc.b $81, $37, 0, 1
000002BE 0100 00FF                  		dc.b 1,	0, 0, $FF
000002C2 FF00 0080                  		dc.b $FF, 0, 0,	$80
000002C6                            
000002C6 4000 0080                  		dc.l $40000080
000002CA                            
000002CA AF01 D91F 1127 0021 2600+  		dc.b $AF, 1, $D9, $1F, $11, $27, 0, $21, $26, 0, $F9, $77 ; Z80	instructions
000002D6 EDB0 DDE1 FDE1 ED47 ED4F   		dc.b $ED, $B0, $DD, $E1, $FD, $E1, $ED,	$47, $ED, $4F
000002E0 D1E1 F108 D9C1 D1E1 F1F9+  		dc.b $D1, $E1, $F1, 8, $D9, $C1, $D1, $E1, $F1,	$F9, $F3
000002EB ED56 36E9 E9               		dc.b $ED, $56, $36, $E9, $E9
000002F0                            
000002F0 8104                       		dc.w $8104		; value	for VDP	display	mode
000002F2 8F02                       		dc.w $8F02		; value	for VDP	increment
000002F4 C000 0000                  		dc.l $C0000000		; value	for CRAM write mode
000002F8 4000 0010                  		dc.l $40000010
000002FC                            
000002FC 9FBF DFFF                  		dc.b $9F, $BF, $DF, $FF	; values for PSG channel volumes
00000300                            ; ===========================================================================
00000300                            
00000300                            jmp_DisplaySprite:
00000300 4EF9 0000 0000             	jmp DisplaySprite
00000306                            
00000306                            GameProgram:
00000306 4A79 00C0 0004             		tst.w	($C00004).l
0000030C 0839 0006 00A1 000D        		btst	#6,($A1000D).l
00000314 6700                       		beq.s	CheckSumCheck
00000316 0CB8 696E 6974 FFFC        		cmpi.l	#'init',($FFFFFFFC).w ; has checksum routine already run?
0000031E 6700 0000                  		beq.w	GameInit	; if yes, branch
00000322                            
00000322                            CheckSumCheck:
00000322 207C 0000 0200             		movea.l	#ErrorTrap,a0	; start	checking bytes after the header	($200)
00000328 227C 0000 01A4             		movea.l	#RomEndLoc,a1	; stop at end of ROM
0000032E 2011                       		move.l	(a1),d0
00000330 7200                       		moveq	#0,d1
00000332                            
00000332                            loc_32C:
00000332 D258                       		add.w	(a0)+,d1
00000334 B088                       		cmp.l	a0,d0
00000336 64FA                       		bcc.s	loc_32C
00000338 227C 0000 018E             		movea.l	#Checksum,a1	; read the checksum
0000033E B251                       		cmp.w	(a1),d1		; compare correct checksum to the one in ROM
00000340 6600 0000                  		bne.w	CheckSumError	; if they don't match, branch
00000344 4DF8 FE00                  		lea	($FFFFFE00).w,a6
00000348 7E00                       		moveq	#0,d7
0000034A 3C3C 007F                  		move.w	#$7F,d6
0000034E                            
0000034E                            loc_348:
0000034E 2CC7                       		move.l	d7,(a6)+
00000350 51CE FFFC                  		dbf	d6,loc_348
00000354 1039 00A1 0001             		move.b	($A10001).l,d0
0000035A 0200 00C0                  		andi.b	#$C0,d0
0000035E 11C0 FFF8                  		move.b	d0,($FFFFFFF8).w
00000362 21FC 696E 6974 FFFC        		move.l	#'init',($FFFFFFFC).w ; set flag so checksum won't be run again
0000036A                            
0000036A                            GameInit:
0000036A 4DF9 00FF 0000             		lea	($FF0000).l,a6
00000370 7E00                       		moveq	#0,d7
00000372 3C3C 3F7F                  		move.w	#$3F7F,d6
00000376                            
00000376                            GameClrRAM:
00000376 2CC7                       		move.l	d7,(a6)+
00000378 51CE FFFC                  		dbf	d6,GameClrRAM	; fill RAM ($0000-$FDFF) with $0
0000037C 6100 0000                  		bsr.w	VDPSetupGame
00000380 6100 0000                  		bsr.w	SoundDriverLoad
00000384 6100 0000                  		bsr.w	JoypadInit
00000388 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set Game Mode to Sega Screen
0000038E                            
0000038E                            MainGameLoop:
0000038E 1038 F600                  		move.b	($FFFFF600).w,d0 ; load	Game Mode
00000392 0240 001C                  		andi.w	#$1C,d0
00000396 4EBB 0000                  		jsr	GameModeArray(pc,d0.w) ; jump to apt location in ROM
0000039A 60F2                       		bra.s	MainGameLoop
0000039C                            ; ===========================================================================
0000039C                            ; ---------------------------------------------------------------------------
0000039C                            ; Main game mode array
0000039C                            ; ---------------------------------------------------------------------------
0000039C                            
0000039C                            GameModeArray:
0000039C 6000 0000                  		bra.w	SegaScreen	; Sega Screen ($00)
000003A0                            ; ===========================================================================
000003A0 6000 0000                  		bra.w	TitleScreen	; Title	Screen ($04)
000003A4                            ; ===========================================================================
000003A4 6000 0000                  		bra.w	Level		; Demo Mode ($08)
000003A8                            ; ===========================================================================
000003A8 6000 0000                  		bra.w	Level		; Normal Level ($0C)
000003AC                            ; ===========================================================================
000003AC 6000 0000                  		bra.w	SpecialStage	; Special Stage	($10)
000003B0                            ; ===========================================================================
000003B0 6000 0000                  		bra.w	ContinueScreen	; Continue Screen ($14)
000003B4                            ; ===========================================================================
000003B4 6000 0000                  		bra.w	EndingSequence	; End of game sequence ($18)
000003B8                            ; ===========================================================================
000003B8 6000 0000                  		bra.w	Credits		; Credits ($1C)
000003BC                            ; ===========================================================================
000003BC 4E75                       		rts	
000003BE                            ; ===========================================================================
000003BE                            
000003BE                            CheckSumError:
000003BE 6100 0000                  		bsr.w	VDPSetupGame
000003C2 23FC C000 0000 00C0 0004   		move.l	#$C0000000,($C00004).l ; set VDP to CRAM write
000003CC 7E3F                       		moveq	#$3F,d7
000003CE                            
000003CE                            CheckSum_Red:
000003CE 33FC 000E 00C0 0000        		move.w	#$E,($C00000).l	; fill screen with colour red
000003D6 51CF FFF6                  		dbf	d7,CheckSum_Red	; repeat $3F more times
000003DA                            
000003DA                            CheckSum_Loop:
000003DA 60FE                       		bra.s	CheckSum_Loop
000003DC                            ; ===========================================================================
000003DC                            
000003DC                            loc_43A:
000003DC 46FC 2700                  		move	#$2700,sr
000003E0 544F                       		addq.w	#2,sp
000003E2 21DF FC40                  		move.l	(sp)+,($FFFFFC40).w
000003E6 544F                       		addq.w	#2,sp
000003E8 48F8 FFFF FC00             		movem.l	d0-a7,($FFFFFC00).w
000003EE 6100 0000                  		bsr.w	ShowErrorMsg
000003F2 202F 0002                  		move.l	2(sp),d0
000003F6 6100 0000                  		bsr.w	sub_5BA
000003FA 2038 FC40                  		move.l	($FFFFFC40).w,d0
000003FE 6100 0000                  		bsr.w	sub_5BA
00000402 6000                       		bra.s	loc_478
00000404                            ; ===========================================================================
00000404                            
00000404                            loc_462:
00000404 46FC 2700                  		move	#$2700,sr
00000408 48F8 FFFF FC00             		movem.l	d0-a7,($FFFFFC00).w
0000040E 6100 0000                  		bsr.w	ShowErrorMsg
00000412 202F 0002                  		move.l	2(sp),d0
00000416 6100 0000                  		bsr.w	sub_5BA
0000041A                            
0000041A                            loc_478:
0000041A 6100 0000                  		bsr.w	ErrorWaitForC
0000041E 4CF8 FFFF FC00             		movem.l	($FFFFFC00).w,d0-a7
00000424 46FC 2300                  		move	#$2300,sr
00000428 4E73                       		rte	
0000042A                            
0000042A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000042A                            
0000042A                            
0000042A                            ShowErrorMsg:				; XREF: loc_43A; loc_462
0000042A 4DF9 00C0 0000             		lea	($C00000).l,a6
00000430 23FC 7800 0003 00C0 0004   		move.l	#$78000003,($C00004).l
0000043A 41F9 0000 0000             		lea	(Art_Text).l,a0
00000440 323C 027F                  		move.w	#$27F,d1
00000444                            
00000444                            Error_LoadGfx:
00000444 3C98                       		move.w	(a0)+,(a6)
00000446 51C9 FFFC                  		dbf	d1,Error_LoadGfx
0000044A 7000                       		moveq	#0,d0		; clear	d0
0000044C 1038 FC44                  		move.b	($FFFFFC44).w,d0 ; load	error code
00000450 303B 0000                  		move.w	ErrorText(pc,d0.w),d0
00000454 41FB 0000                  		lea	ErrorText(pc,d0.w),a0
00000458 23FC 4604 0003 00C0 0004   		move.l	#$46040003,($C00004).l ; position
00000462 7212                       		moveq	#$12,d1		; number of characters
00000464                            
00000464                            Error_LoopChars:
00000464 7000                       		moveq	#0,d0
00000466 1018                       		move.b	(a0)+,d0
00000468 0640 0790                  		addi.w	#$790,d0
0000046C 3C80                       		move.w	d0,(a6)
0000046E 51C9 FFF4                  		dbf	d1,Error_LoopChars ; repeat for	number of characters
00000472 4E75                       		rts	
00000474                            ; End of function ShowErrorMsg
00000474                            
00000474                            ; ===========================================================================
00000474 0000 0000                  ErrorText:	dc.w asc_4E8-ErrorText,	asc_4FB-ErrorText ; XREF: ShowErrorMsg
00000478 0000 0000                  		dc.w asc_50E-ErrorText,	asc_521-ErrorText
0000047C 0000 0000                  		dc.w asc_534-ErrorText,	asc_547-ErrorText
00000480 0000 0000                  		dc.w asc_55A-ErrorText,	asc_56D-ErrorText
00000484 0000 0000                  		dc.w asc_580-ErrorText,	asc_593-ErrorText
00000488 0000                       		dc.w asc_5A6-ErrorText
0000048A 4552 524F 5220 4558 4345+  asc_4E8:	dc.b 'ERROR EXCEPTION    '
0000049D 4255 5320 4552 524F 5220+  asc_4FB:	dc.b 'BUS ERROR          '
000004B0 4144 4452 4553 5320 4552+  asc_50E:	dc.b 'ADDRESS ERROR      '
000004C3 494C 4C45 4741 4C20 494E+  asc_521:	dc.b 'ILLEGAL INSTRUCTION'
000004D6 4045 524F 2044 4956 4944+  asc_534:	dc.b '@ERO DIVIDE        '
000004E9 4348 4B20 494E 5354 5255+  asc_547:	dc.b 'CHK INSTRUCTION    '
000004FC 5452 4150 5620 494E 5354+  asc_55A:	dc.b 'TRAPV INSTRUCTION  '
0000050F 5052 4956 494C 4547 4520+  asc_56D:	dc.b 'PRIVILEGE VIOLATION'
00000522 5452 4143 4520 2020 2020+  asc_580:	dc.b 'TRACE              '
00000535 4C49 4E45 2031 3031 3020+  asc_593:	dc.b 'LINE 1010 EMULATOR '
00000548 4C49 4E45 2031 3131 3120+  asc_5A6:	dc.b 'LINE 1111 EMULATOR '
0000055C 00                         		even
0000055C                            
0000055C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000055C                            
0000055C                            
0000055C                            sub_5BA:				; XREF: loc_43A; loc_462
0000055C 3CBC 07CA                  		move.w	#$7CA,(a6)
00000560 7407                       		moveq	#7,d2
00000562                            
00000562                            loc_5C0:
00000562 E998                       		rol.l	#4,d0
00000564 6100                       		bsr.s	sub_5CA
00000566 51CA FFFA                  		dbf	d2,loc_5C0
0000056A 4E75                       		rts	
0000056C                            ; End of function sub_5BA
0000056C                            
0000056C                            
0000056C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000056C                            
0000056C                            
0000056C                            sub_5CA:				; XREF: sub_5BA
0000056C 3200                       		move.w	d0,d1
0000056E 0241 000F                  		andi.w	#$F,d1
00000572 0C41 000A                  		cmpi.w	#$A,d1
00000576 6500                       		bcs.s	loc_5D8
00000578 5E41                       		addq.w	#7,d1
0000057A                            
0000057A                            loc_5D8:
0000057A 0641 07C0                  		addi.w	#$7C0,d1
0000057E 3C81                       		move.w	d1,(a6)
00000580 4E75                       		rts	
00000582                            ; End of function sub_5CA
00000582                            
00000582                            
00000582                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000582                            
00000582                            
00000582                            ErrorWaitForC:				; XREF: loc_478
00000582 6100 0000                  		bsr.w	ReadJoypads
00000586 0C38 0020 F605             		cmpi.b	#$20,($FFFFF605).w ; is	button C pressed?
0000058C 6600 FFF4                  		bne.w	ErrorWaitForC	; if not, branch
00000590 4E75                       		rts	
00000592                            ; End of function ErrorWaitForC
00000592                            
00000592                            ; ===========================================================================
00000592                            
00000592                            Art_Text:	incbin	artunc\menutext.bin	; text used in level select and debug mode
00000AB2                            		even
00000AB2                            
00000AB2                            ; ===========================================================================
00000AB2                            
00000AB2                            loc_B10:				; XREF: Vectors
00000AB2 48E7 FFFE                  		movem.l	d0-a6,-(sp)
00000AB6 4A38 F62A                  		tst.b	($FFFFF62A).w
00000ABA 6700                       		beq.s	loc_B88
00000ABC 3039 00C0 0004             		move.w	($C00004).l,d0
00000AC2 23FC 4000 0010 00C0 0004   		move.l	#$40000010,($C00004).l
00000ACC 23F8 F616 00C0 0000        		move.l	($FFFFF616).w,($C00000).l
00000AD4 0838 0006 FFF8             		btst	#6,($FFFFFFF8).w
00000ADA 6700                       		beq.s	loc_B42
00000ADC 303C 0700                  		move.w	#$700,d0
00000AE0                            
00000AE0                            loc_B3E:
00000AE0 51C8 FFFE                  		dbf	d0,loc_B3E
00000AE4                            
00000AE4                            loc_B42:
00000AE4 1038 F62A                  		move.b	($FFFFF62A).w,d0
00000AE8 11FC 0000 F62A             		move.b	#0,($FFFFF62A).w
00000AEE 31FC 0001 F644             		move.w	#1,($FFFFF644).w
00000AF4 0240 003E                  		andi.w	#$3E,d0
00000AF8 303B 0000                  		move.w	off_B6E(pc,d0.w),d0
00000AFC 4EBB 0000                  		jsr	off_B6E(pc,d0.w)
00000B00                            
00000B00                            loc_B5E:				; XREF: loc_B88
00000B00 4EB9 0000 0000             		jsr	sub_71B4C
00000B06                            
00000B06                            loc_B64:				; XREF: loc_D50
00000B06 52B8 FE0C                  		addq.l	#1,($FFFFFE0C).w
00000B0A 4CDF 7FFF                  		movem.l	(sp)+,d0-a6
00000B0E 4E73                       		rte	
00000B10                            ; ===========================================================================
00000B10 0000 0000                  off_B6E:	dc.w loc_B88-off_B6E, loc_C32-off_B6E
00000B14 0000 0000                  		dc.w loc_C44-off_B6E, loc_C5E-off_B6E
00000B18 0000 0000                  		dc.w loc_C6E-off_B6E, loc_DA6-off_B6E
00000B1C 0000 0000                  		dc.w loc_E72-off_B6E, loc_F8A-off_B6E
00000B20 0000 0000                  		dc.w loc_C64-off_B6E, loc_F9A-off_B6E
00000B24 0000 0000                  		dc.w loc_C36-off_B6E, loc_FA6-off_B6E
00000B28 0000                       		dc.w loc_E72-off_B6E
00000B2A                            ; ===========================================================================
00000B2A                            
00000B2A                            loc_B88:				; XREF: loc_B10; off_B6E
00000B2A 0C38 008C F600             		cmpi.b	#$8C,($FFFFF600).w
00000B30 6700                       		beq.s	loc_B9A
00000B32 0C38 000C F600             		cmpi.b	#$C,($FFFFF600).w
00000B38 6600 FFC6                  		bne.w	loc_B5E
00000B3C                            
00000B3C                            loc_B9A:
00000B3C 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ ?
00000B42 6600 FFBC                  		bne.w	loc_B5E		; if not, branch
00000B46 3039 00C0 0004             		move.w	($C00004).l,d0
00000B4C 0838 0006 FFF8             		btst	#6,($FFFFFFF8).w
00000B52 6700                       		beq.s	loc_BBA
00000B54 303C 0700                  		move.w	#$700,d0
00000B58                            
00000B58                            loc_BB6:
00000B58 51C8 FFFE                  		dbf	d0,loc_BB6
00000B5C                            
00000B5C                            loc_BBA:
00000B5C 31FC 0001 F644             		move.w	#1,($FFFFF644).w
00000B62 33FC 0100 00A1 1100 0839+  	Z80DMA_ON
00000B90 4A38 F64E                  		tst.b	($FFFFF64E).w
00000B94 6600                       		bne.s	loc_BFE
00000B96 4BF9 00C0 0004             		lea	($C00004).l,a5
00000B9C 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000BA2 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000BA8 3ABC 977F                  		move.w	#$977F,(a5)
00000BAC 3ABC C000                  		move.w	#$C000,(a5)
00000BB0 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000BB6 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000BBA 6000                       		bra.s	loc_C22
00000BBC                            ; ===========================================================================
00000BBC                            
00000BBC                            loc_BFE:				; XREF: loc_BC8
00000BBC 4BF9 00C0 0004             		lea	($C00004).l,a5
00000BC2 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000BC8 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
00000BCE 3ABC 977F                  		move.w	#$977F,(a5)
00000BD2 3ABC C000                  		move.w	#$C000,(a5)
00000BD6 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000BDC 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000BE0                            
00000BE0                            loc_C22:				; XREF: loc_BC8
00000BE0 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000BE4 33FC 0100 00A1 1100 0839+  	Z80DMA_OFF
00000C06 6000 FEF8                  		bra.w	loc_B5E
00000C0A                            ; ===========================================================================
00000C0A                            
00000C0A                            loc_C32:				; XREF: off_B6E
00000C0A 6100 0000                  		bsr.w	sub_106E
00000C0E                            
00000C0E                            loc_C36:				; XREF: off_B6E
00000C0E 4A78 F614                  		tst.w	($FFFFF614).w
00000C12 6700 0000                  		beq.w	locret_C42
00000C16 5378 F614                  		subq.w	#1,($FFFFF614).w
00000C1A                            
00000C1A                            locret_C42:
00000C1A 4E75                       		rts	
00000C1C                            ; ===========================================================================
00000C1C                            
00000C1C                            loc_C44:				; XREF: off_B6E
00000C1C 6100 0000                  		bsr.w	sub_106E
00000C20 6100 0000                  		bsr.w	sub_6886
00000C24 6100 0000                  		bsr.w	sub_1642
00000C28 4A78 F614                  		tst.w	($FFFFF614).w
00000C2C 6700 0000                  		beq.w	locret_C5C
00000C30 5378 F614                  		subq.w	#1,($FFFFF614).w
00000C34                            
00000C34                            locret_C5C:
00000C34 4E75                       		rts	
00000C36                            ; ===========================================================================
00000C36                            
00000C36                            loc_C5E:				; XREF: off_B6E
00000C36 6100 0000                  		bsr.w	sub_106E
00000C3A 4E75                       		rts
00000C3C                            
00000C3C                            Return:
00000C3C 6100 0000                  		bsr.w	ReadJoypads
00000C40 4E75                       		rts	
00000C42                            ; ===========================================================================
00000C42                            
00000C42                            loc_C64:				; XREF: off_B6E
00000C42 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode = $10	(special stage)	?
00000C48 6700 0000                  		beq.w	loc_DA6		; if yes, branch
00000C4C                            
00000C4C                            loc_C6E:				; XREF: off_B6E
00000C4C 33FC 0100 00A1 1100 0839+  	Z80DMA_ON
00000C7A 6100 0000                  		bsr.w	ReadJoypads
00000C7E 4A38 F64E                  		tst.b	($FFFFF64E).w
00000C82 6600                       		bne.s	loc_CB0
00000C84 4BF9 00C0 0004             		lea	($C00004).l,a5
00000C8A 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000C90 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000C96 3ABC 977F                  		move.w	#$977F,(a5)
00000C9A 3ABC C000                  		move.w	#$C000,(a5)
00000C9E 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000CA4 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000CA8 6000                       		bra.s	loc_CD4
00000CAA                            ; ===========================================================================
00000CAA                            
00000CAA                            loc_CB0:				; XREF: loc_C76
00000CAA 4BF9 00C0 0004             		lea	($C00004).l,a5
00000CB0 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000CB6 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
00000CBC 3ABC 977F                  		move.w	#$977F,(a5)
00000CC0 3ABC C000                  		move.w	#$C000,(a5)
00000CC4 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000CCA 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000CCE                            
00000CCE                            loc_CD4:				; XREF: loc_C76
00000CCE 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000CD2 4BF9 00C0 0004             		lea	($C00004).l,a5
00000CD8 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00000CDE 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00000CE4 3ABC 977F                  		move.w	#$977F,(a5)
00000CE8 3ABC 7C00                  		move.w	#$7C00,(a5)
00000CEC 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000CF2 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000CF6 4BF9 00C0 0004             		lea	($C00004).l,a5
00000CFC 2ABC 9401 9340             		move.l	#$94019340,(a5)
00000D02 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00000D08 3ABC 977F                  		move.w	#$977F,(a5)
00000D0C 3ABC 7800                  		move.w	#$7800,(a5)
00000D10 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000D16 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000D1A 4EB9 0000 0000             		jsr	(ProcessDMAQueue).l
00000D20                            
00000D20                            loc_D50:
00000D20 33FC 0100 00A1 1100 0839+  	Z80DMA_OFF
00000D42 4CF8 00FF F700             		movem.l	($FFFFF700).w,d0-d7
00000D48 48F8 00FF FF10             		movem.l	d0-d7,($FFFFFF10).w
00000D4E 4CF8 0003 F754             		movem.l	($FFFFF754).w,d0-d1
00000D54 48F8 0003 FF30             		movem.l	d0-d1,($FFFFFF30).w
00000D5A 0C38 0060 F625             		cmpi.b	#$60,($FFFFF625).w
00000D60 6400                       		bcc.s	Demo_Time
00000D62 11FC 0001 F64F             		move.b	#1,($FFFFF64F).w
00000D68 588F                       		addq.l	#4,sp
00000D6A 6000 FD9A                  		bra.w	loc_B64
00000D6E                            
00000D6E                            ; ---------------------------------------------------------------------------
00000D6E                            ; Subroutine to	run a demo for an amount of time
00000D6E                            ; ---------------------------------------------------------------------------
00000D6E                            
00000D6E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000D6E                            
00000D6E                            
00000D6E                            Demo_Time:				; XREF: loc_D50; PalToCRAM
00000D6E 6100 0000                  		bsr.w	LoadTilesAsYouMove
00000D72 4EB9 0000 0000             		jsr	AniArt_Load
00000D78 4EB9 0000 0000             		jsr	HudUpdate
00000D7E 6100 0000                  		bsr.w	sub_165E
00000D82 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
00000D86 6700 0000                  		beq.w	Demo_TimeEnd	; if not, branch
00000D8A 5378 F614                  		subq.w	#1,($FFFFF614).w ; subtract 1 from time	left
00000D8E                            
00000D8E                            Demo_TimeEnd:
00000D8E 4E75                       		rts	
00000D90                            ; End of function Demo_Time
00000D90                            
00000D90                            ; ===========================================================================
00000D90                            
00000D90                            loc_DA6:				; XREF: off_B6E
00000D90 6100 0000                  		bsr.w	ReadJoypads
00000D94 33FC 0100 00A1 1100 0839+  	Z80DMA_ON
00000DC2 4BF9 00C0 0004             		lea	($C00004).l,a5
00000DC8 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000DCE 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000DD4 3ABC 977F                  		move.w	#$977F,(a5)
00000DD8 3ABC C000                  		move.w	#$C000,(a5)
00000DDC 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000DE2 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000DE6 4BF9 00C0 0004             		lea	($C00004).l,a5
00000DEC 2ABC 9401 9340             		move.l	#$94019340,(a5)
00000DF2 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00000DF8 3ABC 977F                  		move.w	#$977F,(a5)
00000DFC 3ABC 7800                  		move.w	#$7800,(a5)
00000E00 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000E06 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000E0A 4BF9 00C0 0004             		lea	($C00004).l,a5
00000E10 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00000E16 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00000E1C 3ABC 977F                  		move.w	#$977F,(a5)
00000E20 3ABC 7C00                  		move.w	#$7C00,(a5)
00000E24 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000E2A 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000E2E 6100 0000                  		bsr.w	PalCycle_SS
00000E32 4A38 F767                  		tst.b	($FFFFF767).w
00000E36 6700                       		beq.s	loc_E64
00000E38 4BF9 00C0 0004             		lea	($C00004).l,a5
00000E3E 2ABC 9401 9370             		move.l	#$94019370,(a5)
00000E44 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
00000E4A 3ABC 977F                  		move.w	#$977F,(a5)
00000E4E 3ABC 7000                  		move.w	#$7000,(a5)
00000E52 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000E58 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000E5C 11FC 0000 F767             		move.b	#0,($FFFFF767).w
00000E62                            
00000E62                            loc_E64:
00000E62 33FC 0100 00A1 1100 0839+  	Z80DMA_OFF
00000E84 4A78 F614                  		tst.w	($FFFFF614).w
00000E88 6700 0000                  		beq.w	locret_E70
00000E8C 5378 F614                  		subq.w	#1,($FFFFF614).w
00000E90                            
00000E90                            locret_E70:
00000E90 4E75                       		rts	
00000E92                            ; ===========================================================================
00000E92                            
00000E92                            loc_E72:				; XREF: off_B6E
00000E92 6100 0000                  		bsr.w	ReadJoypads
00000E96 33FC 0100 00A1 1100 0839+  	Z80DMA_ON
00000EC4 4A38 F64E                  		tst.b	($FFFFF64E).w
00000EC8 6600                       		bne.s	loc_EB4
00000ECA 4BF9 00C0 0004             		lea	($C00004).l,a5
00000ED0 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000ED6 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000EDC 3ABC 977F                  		move.w	#$977F,(a5)
00000EE0 3ABC C000                  		move.w	#$C000,(a5)
00000EE4 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000EEA 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000EEE 6000                       		bra.s	loc_ED8
00000EF0                            ; ===========================================================================
00000EF0                            
00000EF0                            loc_EB4:				; XREF: loc_E7A
00000EF0 4BF9 00C0 0004             		lea	($C00004).l,a5
00000EF6 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000EFC 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
00000F02 3ABC 977F                  		move.w	#$977F,(a5)
00000F06 3ABC C000                  		move.w	#$C000,(a5)
00000F0A 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000F10 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F14                            
00000F14                            loc_ED8:				; XREF: loc_E7A
00000F14 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000F18 4BF9 00C0 0004             		lea	($C00004).l,a5
00000F1E 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00000F24 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00000F2A                            
00000F2A                            loc_EEE:
00000F2A 3ABC 977F                  		move.w	#$977F,(a5)
00000F2E 3ABC 7C00                  		move.w	#$7C00,(a5)
00000F32 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000F38 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F3C 4BF9 00C0 0004             		lea	($C00004).l,a5
00000F42 2ABC 9401 9340             		move.l	#$94019340,(a5)
00000F48 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00000F4E 3ABC 977F                  		move.w	#$977F,(a5)
00000F52 3ABC 7800                  		move.w	#$7800,(a5)
00000F56 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000F5C 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F60 4A38 F767                  		tst.b	($FFFFF767).w
00000F64 6700                       		beq.s	loc_F54
00000F66 4BF9 00C0 0004             		lea	($C00004).l,a5
00000F6C 2ABC 9401 9370             		move.l	#$94019370,(a5)
00000F72 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
00000F78 3ABC 977F                  		move.w	#$977F,(a5)
00000F7C 3ABC 7000                  		move.w	#$7000,(a5)
00000F80 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000F86 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F8A 11FC 0000 F767             		move.b	#0,($FFFFF767).w
00000F90                            
00000F90                            loc_F54:
00000F90 33FC 0100 00A1 1100 0839+  	Z80DMA_OFF
00000FB2 4CF8 00FF F700             		movem.l	($FFFFF700).w,d0-d7
00000FB8 48F8 00FF FF10             		movem.l	d0-d7,($FFFFFF10).w
00000FBE 4CF8 0003 F754             		movem.l	($FFFFF754).w,d0-d1
00000FC4 48F8 0003 FF30             		movem.l	d0-d1,($FFFFFF30).w
00000FCA 6100 0000                  		bsr.w	LoadTilesAsYouMove
00000FCE 4EB9 0000 0000             		jsr	AniArt_Load
00000FD4 4EB9 0000 0000             		jsr	HudUpdate
00000FDA 6100 0000                  		bsr.w	sub_1642
00000FDE 4E75                       		rts	
00000FE0                            ; ===========================================================================
00000FE0                            
00000FE0                            loc_F8A:				; XREF: off_B6E
00000FE0 6100 0000                  		bsr.w	sub_106E
00000FE4 5238 F628                  		addq.b	#1,($FFFFF628).w
00000FE8 11FC 000E F62A             		move.b	#$E,($FFFFF62A).w
00000FEE 4E75                       		rts	
00000FF0                            ; ===========================================================================
00000FF0                            
00000FF0                            loc_F9A:				; XREF: off_B6E
00000FF0 6100 0000                  		bsr.w	sub_106E
00000FF4 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000FF8 6000 0000                  		bra.w	sub_1642
00000FFC                            ; ===========================================================================
00000FFC                            
00000FFC                            loc_FA6:				; XREF: off_B6E
00000FFC 6100 0000                  		bsr.w	ReadJoypads
00001000 33FC 0100 00A1 1100 0839+  	Z80DMA_ON
0000102E 4BF9 00C0 0004             		lea	($C00004).l,a5
00001034 2ABC 9400 9340             		move.l	#$94009340,(a5)
0000103A 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00001040 3ABC 977F                  		move.w	#$977F,(a5)
00001044 3ABC C000                  		move.w	#$C000,(a5)
00001048 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
0000104E 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001052 4BF9 00C0 0004             		lea	($C00004).l,a5
00001058 2ABC 9401 9340             		move.l	#$94019340,(a5)
0000105E 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00001064 3ABC 977F                  		move.w	#$977F,(a5)
00001068 3ABC 7800                  		move.w	#$7800,(a5)
0000106C 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001072 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001076 4BF9 00C0 0004             		lea	($C00004).l,a5
0000107C 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00001082 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00001088 3ABC 977F                  		move.w	#$977F,(a5)
0000108C 3ABC 7C00                  		move.w	#$7C00,(a5)
00001090 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001096 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000109A 4A38 F767                  		tst.b	($FFFFF767).w
0000109E 6700                       		beq.s	loc_1060
000010A0 4BF9 00C0 0004             		lea	($C00004).l,a5
000010A6 2ABC 9401 9370             		move.l	#$94019370,(a5)
000010AC 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
000010B2 3ABC 977F                  		move.w	#$977F,(a5)
000010B6 3ABC 7000                  		move.w	#$7000,(a5)
000010BA 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
000010C0 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000010C4 11FC 0000 F767             		move.b	#0,($FFFFF767).w
000010CA                            
000010CA                            loc_1060:
000010CA 33FC 0100 00A1 1100 0839+  	Z80DMA_OFF
000010EC 4A78 F614                  		tst.w	($FFFFF614).w
000010F0 6700 0000                  		beq.w	locret_106C
000010F4 5378 F614                  		subq.w	#1,($FFFFF614).w
000010F8                            
000010F8                            locret_106C:
000010F8 4E75                       		rts	
000010FA                            
000010FA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000010FA                            
000010FA                            
000010FA                            sub_106E:				; XREF: loc_C32; et al
000010FA 6100 0000                  		bsr.w	ReadJoypads
000010FE 33FC 0100 00A1 1100 0839+  	Z80DMA_ON
0000112C 4A38 F64E                  		tst.b	($FFFFF64E).w
00001130 6600                       		bne.s	loc_10B0
00001132 4BF9 00C0 0004             		lea	($C00004).l,a5
00001138 2ABC 9400 9340             		move.l	#$94009340,(a5)
0000113E 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00001144 3ABC 977F                  		move.w	#$977F,(a5)
00001148 3ABC C000                  		move.w	#$C000,(a5)
0000114C 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00001152 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001156                            
00001156                            PAL1_LOAD:
00001156 6000                       		bra.s	loc_10D4
00001158                            ; ===========================================================================
00001158                            
00001158                            loc_10B0:
00001158 4BF9 00C0 0004             		lea	($C00004).l,a5
0000115E 2ABC 9400 9340             		move.l	#$94009340,(a5)
00001164 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
0000116A 3ABC 977F                  		move.w	#$977F,(a5)
0000116E 3ABC C000                  		move.w	#$C000,(a5)
00001172 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00001178 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000117C                            loc_10D4:
0000117C 4BF9 00C0 0004             		lea	($C00004).l,a5
00001182 2ABC 9401 9340             		move.l	#$94019340,(a5)
00001188 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
0000118E 3ABC 977F                  		move.w	#$977F,(a5)
00001192 3ABC 7800                  		move.w	#$7800,(a5)
00001196 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
0000119C 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000011A0 4BF9 00C0 0004             		lea	($C00004).l,a5
000011A6 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
000011AC 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
000011B2 3ABC 977F                  		move.w	#$977F,(a5)
000011B6 3ABC 7C00                  		move.w	#$7C00,(a5)
000011BA 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
000011C0 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000011C4 33FC 0100 00A1 1100 0839+  	Z80DMA_OFF
000011E6 4E75                       		rts	
000011E8                            ; End of function sub_106E
000011E8                            
000011E8                            ; ---------------------------------------------------------------------------
000011E8                            ; Subroutine to	move pallets from the RAM to CRAM
000011E8                            ; ---------------------------------------------------------------------------
000011E8                            
000011E8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000011E8                            
000011E8                            
000011E8                            PalToCRAM:
000011E8 46FC 2700                  		move	#$2700,sr
000011EC 4A78 F644                  		tst.w	($FFFFF644).w
000011F0 6700                       		beq.s	locret_119C
000011F2 31FC 0000 F644             		move.w	#0,($FFFFF644).w
000011F8 48E7 00C0                  		movem.l	a0-a1,-(sp)
000011FC 43F9 00C0 0000             		lea	($C00000).l,a1
00001202 41F8 FA80                  		lea	($FFFFFA80).w,a0 ; load	pallet from RAM
00001206 237C C000 0000 0004        		move.l	#$C0000000,4(a1) ; set VDP to CRAM write
0000120E 2298                       		move.l	(a0)+,(a1)	; move pallet to CRAM
00001210 2298                       		move.l	(a0)+,(a1)
00001212 2298                       		move.l	(a0)+,(a1)
00001214 2298                       		move.l	(a0)+,(a1)
00001216 2298                       		move.l	(a0)+,(a1)
00001218 2298                       		move.l	(a0)+,(a1)
0000121A 2298                       		move.l	(a0)+,(a1)
0000121C 2298                       		move.l	(a0)+,(a1)
0000121E 2298                       		move.l	(a0)+,(a1)
00001220 2298                       		move.l	(a0)+,(a1)
00001222 2298                       		move.l	(a0)+,(a1)
00001224 2298                       		move.l	(a0)+,(a1)
00001226 2298                       		move.l	(a0)+,(a1)
00001228 2298                       		move.l	(a0)+,(a1)
0000122A 2298                       		move.l	(a0)+,(a1)
0000122C 2298                       		move.l	(a0)+,(a1)
0000122E 2298                       		move.l	(a0)+,(a1)
00001230 2298                       		move.l	(a0)+,(a1)
00001232 2298                       		move.l	(a0)+,(a1)
00001234 2298                       		move.l	(a0)+,(a1)
00001236 2298                       		move.l	(a0)+,(a1)
00001238 2298                       		move.l	(a0)+,(a1)
0000123A 2298                       		move.l	(a0)+,(a1)
0000123C 2298                       		move.l	(a0)+,(a1)
0000123E 2298                       		move.l	(a0)+,(a1)
00001240 2298                       		move.l	(a0)+,(a1)
00001242 2298                       		move.l	(a0)+,(a1)
00001244 2298                       		move.l	(a0)+,(a1)
00001246 2298                       		move.l	(a0)+,(a1)
00001248 2298                       		move.l	(a0)+,(a1)
0000124A 2298                       		move.l	(a0)+,(a1)
0000124C 2298                       		move.l	(a0)+,(a1)
0000124E 337C 8ADF 0004             		move.w	#$8ADF,4(a1)
00001254 4CDF 0300                  		movem.l	(sp)+,a0-a1
00001258 4A38 F64F                  		tst.b	($FFFFF64F).w
0000125C 6600                       		bne.s	loc_119E
0000125E                            
0000125E                            locret_119C:
0000125E 4E73                       		rte	
00001260                            ; ===========================================================================
00001260                            
00001260                            loc_119E:				; XREF: PalToCRAM
00001260 4238 F64F                  		clr.b	($FFFFF64F).w
00001264 48E7 FFFE                  		movem.l	d0-a6,-(sp)
00001268 6100 FB04                  		bsr.w	Demo_Time
0000126C 4EB9 0000 0000             		jsr	sub_71B4C
00001272 4CDF 7FFF                  		movem.l	(sp)+,d0-a6
00001276 4E73                       		rte	
00001278                            ; End of function PalToCRAM
00001278                            
00001278                            ; ---------------------------------------------------------------------------
00001278                            ; Subroutine to	initialise joypads
00001278                            ; ---------------------------------------------------------------------------
00001278                            
00001278                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001278                            
00001278                            
00001278                            JoypadInit:				; XREF: GameClrRAM
00001278 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00001280                            
00001280                            Joypad_WaitZ80:
00001280 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has the Z80 stopped?
00001288 66F6                       		bne.s	Joypad_WaitZ80	; if not, branch
0000128A 7040                       		moveq	#$40,d0
0000128C 13C0 00A1 0009             		move.b	d0,($A10009).l	; init port 1 (joypad 1)
00001292 13C0 00A1 000B             		move.b	d0,($A1000B).l	; init port 2 (joypad 2)
00001298 13C0 00A1 000D             		move.b	d0,($A1000D).l	; init port 3 (extra)
0000129E 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
000012A6 4E75                       		rts	
000012A8                            ; End of function JoypadInit
000012A8                            
000012A8                            ; ---------------------------------------------------------------------------
000012A8                            ; Subroutine to	read joypad input, and send it to the RAM
000012A8                            ; ---------------------------------------------------------------------------
000012A8                            
000012A8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000012A8                            
000012A8                            
000012A8                            ReadJoypads:
000012A8 41F8 F604                  		lea	($FFFFF604).w,a0 ; address where joypad	states are written
000012AC 43F9 00A1 0003             		lea	($A10003).l,a1	; first	joypad port
000012B2 6100                       		bsr.s	Joypad_Read	; do the first joypad
000012B4 5449                       		addq.w	#2,a1		; do the second	joypad
000012B6                            
000012B6                            Joypad_Read:
000012B6 12BC 0000                  		move.b	#0,(a1)
000012BA 4E71                       		nop	
000012BC 4E71                       		nop	
000012BE 1011                       		move.b	(a1),d0
000012C0 E508                       		lsl.b	#2,d0
000012C2 0200 00C0                  		andi.b	#$C0,d0
000012C6 12BC 0040                  		move.b	#$40,(a1)
000012CA 4E71                       		nop	
000012CC 4E71                       		nop	
000012CE 1211                       		move.b	(a1),d1
000012D0 0201 003F                  		andi.b	#$3F,d1
000012D4 8001                       		or.b	d1,d0
000012D6 4600                       		not.b	d0
000012D8 1210                       		move.b	(a0),d1
000012DA B101                       		eor.b	d0,d1
000012DC 10C0                       		move.b	d0,(a0)+
000012DE C200                       		and.b	d0,d1
000012E0 10C1                       		move.b	d1,(a0)+
000012E2 4E75                       		rts	
000012E4                            ; End of function ReadJoypads
000012E4                            
000012E4                            
000012E4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000012E4                            
000012E4                            
000012E4                            VDPSetupGame:				; XREF: GameClrRAM; ChecksumError
000012E4 41F9 00C0 0004             		lea	($C00004).l,a0
000012EA 43F9 00C0 0000             		lea	($C00000).l,a1
000012F0 45F9 0000 0000             		lea	(VDPSetupArray).l,a2
000012F6 7E12                       		moveq	#$12,d7
000012F8                            
000012F8                            VDP_Loop:
000012F8 309A                       		move.w	(a2)+,(a0)
000012FA 51CF FFFC                  		dbf	d7,VDP_Loop	; set the VDP registers
000012FE                            
000012FE 3039 0000 0000             		move.w	(VDPSetupArray+2).l,d0
00001304 31C0 F60C                  		move.w	d0,($FFFFF60C).w
00001308 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
0000130E 7000                       		moveq	#0,d0
00001310 23FC C000 0000 00C0 0004   		move.l	#$C0000000,($C00004).l ; set VDP to CRAM write
0000131A 3E3C 003F                  		move.w	#$3F,d7
0000131E                            
0000131E                            VDP_ClrCRAM:
0000131E 3280                       		move.w	d0,(a1)
00001320 51CF FFFC                  		dbf	d7,VDP_ClrCRAM	; clear	the CRAM
00001324                            
00001324 42B8 F616                  		clr.l	($FFFFF616).w
00001328 42B8 F61A                  		clr.l	($FFFFF61A).w
0000132C 2F01                       		move.l	d1,-(sp)
0000132E 4BF9 00C0 0004             		lea	($C00004).l,a5
00001334 3ABC 8F01                  		move.w	#$8F01,(a5)
00001338 2ABC 94FF 93FF             		move.l	#$94FF93FF,(a5)
0000133E 3ABC 9780                  		move.w	#$9780,(a5)
00001342 2ABC 4000 0080             		move.l	#$40000080,(a5)
00001348 33FC 0000 00C0 0000        		move.w	#0,($C00000).l	; clear	the screen
00001350                            
00001350                            loc_128E:
00001350 3215                       		move.w	(a5),d1
00001352 0801 0001                  		btst	#1,d1
00001356 66F8                       		bne.s	loc_128E
00001358                            
00001358 3ABC 8F02                  		move.w	#$8F02,(a5)
0000135C 221F                       		move.l	(sp)+,d1
0000135E 4E75                       		rts	
00001360                            ; End of function VDPSetupGame
00001360                            
00001360                            ; ===========================================================================
00001360 8004 8134 8230 8328        VDPSetupArray:	dc.w $8004, $8134, $8230, $8328	; XREF: VDPSetupGame
00001368 8407 857C 8600 8700        		dc.w $8407, $857C, $8600, $8700
00001370 8800 8900 8A00 8B00        		dc.w $8800, $8900, $8A00, $8B00
00001378 8C81 8D3F 8E00 8F02        		dc.w $8C81, $8D3F, $8E00, $8F02
00001380 9001 9100 9200             		dc.w $9001, $9100, $9200
00001386                            
00001386                            ; ---------------------------------------------------------------------------
00001386                            ; Subroutine to	clear the screen
00001386                            ; ---------------------------------------------------------------------------
00001386                            
00001386                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001386                            
00001386                            
00001386                            ClearScreen:
00001386 4BF9 00C0 0004             		lea	($C00004).l,a5
0000138C 3ABC 8F01                  		move.w	#$8F01,(a5)
00001390 2ABC 940F 93FF             		move.l	#$940F93FF,(a5)
00001396 3ABC 9780                  		move.w	#$9780,(a5)
0000139A 2ABC 4000 0083             		move.l	#$40000083,(a5)
000013A0 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
000013A8                            
000013A8                            loc_12E6:
000013A8 3215                       		move.w	(a5),d1
000013AA 0801 0001                  		btst	#1,d1
000013AE 66F8                       		bne.s	loc_12E6
000013B0                            
000013B0 3ABC 8F02                  		move.w	#$8F02,(a5)
000013B4 4BF9 00C0 0004             		lea	($C00004).l,a5
000013BA 3ABC 8F01                  		move.w	#$8F01,(a5)
000013BE 2ABC 940F 93FF             		move.l	#$940F93FF,(a5)
000013C4 3ABC 9780                  		move.w	#$9780,(a5)
000013C8 2ABC 6000 0083             		move.l	#$60000083,(a5)
000013CE 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
000013D6                            
000013D6                            loc_1314:
000013D6 3215                       		move.w	(a5),d1
000013D8 0801 0001                  		btst	#1,d1
000013DC 66F8                       		bne.s	loc_1314
000013DE                            
000013DE 3ABC 8F02                  		move.w	#$8F02,(a5)
000013E2 21FC 0000 0000 F616        		move.l	#0,($FFFFF616).w
000013EA 21FC 0000 0000 F61A        		move.l	#0,($FFFFF61A).w
000013F2 43F8 F800                  		lea	($FFFFF800).w,a1
000013F6 7000                       		moveq	#0,d0
000013F8 323C 00A0                  		move.w	#$A0,d1
000013FC                            
000013FC                            loc_133A:
000013FC 22C0                       		move.l	d0,(a1)+
000013FE 51C9 FFFC                  		dbf	d1,loc_133A
00001402                            
00001402 43F8 CC00                  		lea	($FFFFCC00).w,a1
00001406 7000                       		moveq	#0,d0
00001408 323C 0100                  		move.w	#$100,d1
0000140C                            
0000140C                            loc_134A:
0000140C 22C0                       		move.l	d0,(a1)+
0000140E 51C9 FFFC                  		dbf	d1,loc_134A
00001412 4E75                       		rts	
00001414                            ; End of function ClearScreen
00001414                            
00001414                            ; ---------------------------------------------------------------------------
00001414                            ; Subroutine to	load the sound driver
00001414                            ; ---------------------------------------------------------------------------
00001414                            
00001414                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001414                            
00001414                            
00001414                            SoundDriverLoad:
00001414 41F9 0000 0000             		lea	(Z80ROM).l,a0				; load Z80 ROM data
0000141A 43F9 00A0 0000             		lea	($A00000).l,a1				; load Z80 RAM space address
00001420 323C 0000                  		move.w	#(Z80ROM_End-Z80ROM)-$01,d1		; set repeat times
00001424 33FC 0100 00A1 1100        		move.w	#$0100,($A11100).l			; request Z80 stop (ON)
0000142C 33FC 0100 00A1 1200        		move.w	#$0100,($A11200).l			; request Z80 reset (OFF)
00001434 0839 0000 00A1 1100        		btst.b	#$00,($A11100).l			; has the Z80 stopped yet?
0000143C 66F6                       		bne.s	*-$08					; if not, branch
0000143E                            
0000143E                            SM_LoadZ80:
0000143E 12D8                       		move.b	(a0)+,(a1)+				; dump Z80 data to Z80 space
00001440 51C9 FFFC                  		dbf	d1,SM_LoadZ80				; repeat til done
00001444 41F9 0000 0000             		lea	(StopSample).l,a0			; load stop/mute sample address
0000144A 43F9 00A0 02EC             		lea	($A00000+MuteSample).l,a1		; load Z80 RAM space where the pointer is to be stored
00001450 12D8                       		move.b	(a0)+,(a1)+				; copy pointer over into Z80
00001452 12D8                       		move.b	(a0)+,(a1)+				; ''
00001454 12D8                       		move.b	(a0)+,(a1)+				; ''
00001456 33FC 0000 00A1 1200        		move.w	#$0000,($A11200).l			; request Z80 reset (ON)
0000145E 727F                       		moveq	#$7F,d1					; set repeat times
00001460 51C9 FFFE                  		dbf	d1,*					; there's no way of checking for reset, so a manual delay is necessary
00001464 33FC 0000 00A1 1100        		move.w	#$0000,($A11100).l			; request Z80 stop (OFF)
0000146C 33FC 0100 00A1 1200        		move.w	#$0100,($A11200).l			; request Z80 reset (OFF)
00001474 4E75                       		rts						; return
00001476                            
00001476                            ; ---------------------------------------------------------------------------
00001476                            ; Subroutine to	play a sound or	music track
00001476                            ; ---------------------------------------------------------------------------
00001476                            
00001476                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001476                            
00001476                            
00001476                            PlaySound:
00001476 11C0 F00A                  		move.b	d0,($FFFFF00A).w
0000147A 4E75                       		rts	
0000147C                            ; End of function PlaySound
0000147C                            
0000147C                            ; ---------------------------------------------------------------------------
0000147C                            ; Subroutine to	play a special sound/music (E0-E4)
0000147C                            ;
0000147C                            ; E0 - Fade out
0000147C                            ; E1 - Sega
0000147C                            ; E2 - Speed up
0000147C                            ; E3 - Normal speed
0000147C                            ; E4 - Stop
0000147C                            ; ---------------------------------------------------------------------------
0000147C                            
0000147C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000147C                            
0000147C                            
0000147C                            PlaySound_Special:
0000147C 11C0 F00B                  		move.b	d0,($FFFFF00B).w
00001480 4E75                       		rts	
00001482                            ; End of function PlaySound_Special
00001482                            
00001482                            ; ===========================================================================
00001482                            ; ---------------------------------------------------------------------------
00001482                            ; Unused sound/music subroutine
00001482                            ; ---------------------------------------------------------------------------
00001482                            
00001482                            PlaySound_Unk:
00001482 11C0 F00C                  		move.b	d0,($FFFFF00C).w
00001486 4E75                       		rts	
00001488                            
00001488                            ; ---------------------------------------------------------------------------
00001488                            ; Subroutine to	pause the game
00001488                            ; ---------------------------------------------------------------------------
00001488                            
00001488                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001488                            
00001488                            
00001488                            PauseGame:				; XREF: Level_MainLoop; et al
00001488 4E71                       		nop	
0000148A 4A38 FE12                  		tst.b	($FFFFFE12).w	; do you have any lives	left?
0000148E 6700                       		beq.s	Unpause		; if not, branch
00001490 4A78 F63A                  		tst.w	($FFFFF63A).w	; is game already paused?
00001494 6600                       		bne.s	loc_13BE	; if yes, branch
00001496 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
0000149C 6700                       		beq.s	Pause_DoNothing	; if not, branch
0000149E                            
0000149E                            loc_13BE:
0000149E 31FC 0001 F63A             		move.w	#1,($FFFFF63A).w ; freeze time
000014A4 11FC 0001 F003             		move.b	#1,($FFFFF003).w ; pause music
000014AA                            
000014AA                            loc_13CA:
000014AA 11FC 0010 F62A             		move.b	#$10,($FFFFF62A).w
000014B0 6100 0000                  		bsr.w	DelayProgram
000014B4 4A38 FFE1                  		tst.b	($FFFFFFE1).w	; is slow-motion cheat on?
000014B8 6700                       		beq.s	Pause_ChkStart	; if not, branch
000014BA 0838 0006 F605             		btst	#6,($FFFFF605).w ; is button A pressed?
000014C0 6700                       		beq.s	Pause_ChkBC	; if not, branch
000014C2 11FC 0004 F600             		move.b	#4,($FFFFF600).w ; set game mode to 4 (title screen)
000014C8 4E71                       		nop	
000014CA 6000                       		bra.s	loc_1404
000014CC                            ; ===========================================================================
000014CC                            
000014CC                            Pause_ChkBC:				; XREF: PauseGame
000014CC 0838 0004 F604             		btst	#4,($FFFFF604).w ; is button B pressed?
000014D2 6600                       		bne.s	Pause_SlowMo	; if yes, branch
000014D4 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
000014DA 6600                       		bne.s	Pause_SlowMo	; if yes, branch
000014DC                            
000014DC                            Pause_ChkStart:				; XREF: PauseGame
000014DC 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
000014E2 67C6                       		beq.s	loc_13CA	; if not, branch
000014E4                            
000014E4                            loc_1404:				; XREF: PauseGame
000014E4 11FC 0080 F003             		move.b	#$80,($FFFFF003).w
000014EA                            
000014EA                            Unpause:				; XREF: PauseGame
000014EA 31FC 0000 F63A             		move.w	#0,($FFFFF63A).w ; unpause the game
000014F0                            
000014F0                            Pause_DoNothing:			; XREF: PauseGame
000014F0 4E75                       		rts	
000014F2                            ; ===========================================================================
000014F2                            
000014F2                            Pause_SlowMo:				; XREF: PauseGame
000014F2 31FC 0001 F63A             		move.w	#1,($FFFFF63A).w
000014F8 11FC 0080 F003             		move.b	#$80,($FFFFF003).w
000014FE 4E75                       		rts	
00001500                            ; End of function PauseGame
00001500                            
00001500                            ; ---------------------------------------------------------------------------
00001500                            ; Subroutine to	display	patterns via the VDP
00001500                            ; ---------------------------------------------------------------------------
00001500                            
00001500                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001500                            
00001500                            
00001500                            ShowVDPGraphics:			; XREF: SegaScreen; TitleScreen; SS_BGLoad
00001500 4DF9 00C0 0000             		lea	($C00000).l,a6
00001506 283C 0080 0000             		move.l	#$800000,d4
0000150C                            
0000150C                            loc_142C:
0000150C 2D40 0004                  		move.l	d0,4(a6)
00001510 3601                       		move.w	d1,d3
00001512                            
00001512                            loc_1432:
00001512 3C99                       		move.w	(a1)+,(a6)
00001514 51CB FFFC                  		dbf	d3,loc_1432
00001518 D084                       		add.l	d4,d0
0000151A 51CA FFF0                  		dbf	d2,loc_142C
0000151E 4E75                       		rts	
00001520                            ; End of function ShowVDPGraphics
00001520                            
00001520                            ; ---------------------------------------------------------------------------
00001520                            ; Subroutine for queueing VDP commands (seems to only queue transfers to VRAM),
00001520                            ; to be issued the next time ProcessDMAQueue is called.
00001520                            ; Can be called a maximum of 18 times before the buffer needs to be cleared
00001520                            ; by issuing the commands (this subroutine DOES check for overflow)
00001520                            ; ---------------------------------------------------------------------------
00001520                            ; In case you wish to use this queue system outside of the spin dash, this is the
00001520                            ; registers in which it expects data in:
00001520                            ; d1.l: Address to data (In 68k address space)
00001520                            ; d2.w: Destination in VRAM
00001520                            ; d3.w: Length of data
00001520                            ; ---------------------------------------------------------------------------
00001520                            
00001520                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
00001520                            
00001520                            ; sub_144E: DMA_68KtoVRAM: QueueCopyToVRAM: QueueVDPCommand: Add_To_DMA_Queue:
00001520                            QueueDMATransfer:
00001520 2278 C8FC                  		movea.l	($FFFFC8FC).w,a1
00001524 B2FC C8FC                  		cmpa.w	#$C8FC,a1
00001528 6700                       		beq.s	QueueDMATransfer_Done ; return if there's no more room in the buffer
0000152A                            
0000152A                            		; piece together some VDP commands and store them for later...
0000152A 303C 9300                  		move.w	#$9300,d0 ; command to specify DMA transfer length & $00FF
0000152E 1003                       		move.b	d3,d0
00001530 32C0                       		move.w	d0,(a1)+ ; store command
00001532                            
00001532 303C 9400                  		move.w	#$9400,d0 ; command to specify DMA transfer length & $FF00
00001536 E04B                       		lsr.w	#8,d3
00001538 1003                       		move.b	d3,d0
0000153A 32C0                       		move.w	d0,(a1)+ ; store command
0000153C                            
0000153C 303C 9500                  		move.w	#$9500,d0 ; command to specify source address & $0001FE
00001540 E289                       		lsr.l	#1,d1
00001542 1001                       		move.b	d1,d0
00001544 32C0                       		move.w	d0,(a1)+ ; store command
00001546                            
00001546 303C 9600                  		move.w	#$9600,d0 ; command to specify source address & $01FE00
0000154A E089                       		lsr.l	#8,d1
0000154C 1001                       		move.b	d1,d0
0000154E 32C0                       		move.w	d0,(a1)+ ; store command
00001550                            
00001550 303C 9700                  		move.w	#$9700,d0 ; command to specify source address & $FE0000
00001554 E089                       		lsr.l	#8,d1
00001556 1001                       		move.b	d1,d0
00001558 32C0                       		move.w	d0,(a1)+ ; store command
0000155A                            
0000155A 0282 0000 FFFF             		andi.l	#$FFFF,d2 ; command to specify destination address and begin DMA
00001560 E58A                       		lsl.l	#2,d2
00001562 E44A                       		lsr.w	#2,d2
00001564 4842                       		swap	d2
00001566 0082 4000 0080             		ori.l	#$40000080,d2 ; set bits to specify VRAM transfer
0000156C 22C2                       		move.l	d2,(a1)+ ; store command
0000156E                            
0000156E 21C9 C8FC                  		move.l	a1,($FFFFC8FC).w ; set the next free slot address
00001572 B2FC C8FC                  		cmpa.w	#$C8FC,a1
00001576 6700                       		beq.s	QueueDMATransfer_Done ; return if there's no more room in the buffer
00001578 32BC 0000                  		move.w	#0,(a1) ; put a stop token at the end of the used part of the buffer
0000157C                            ; return_14AA:
0000157C                            QueueDMATransfer_Done:
0000157C 4E75                       		rts
0000157E                            ; End of function QueueDMATransfer
0000157E                            
0000157E                            
0000157E                            ; ---------------------------------------------------------------------------
0000157E                            ; Subroutine for issuing all VDP commands that were queued
0000157E                            ; (by earlier calls to QueueDMATransfer)
0000157E                            ; Resets the queue when it's done
0000157E                            ; ---------------------------------------------------------------------------
0000157E                            
0000157E                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
0000157E                            
0000157E                            ; sub_14AC: CopyToVRAM: IssueVDPCommands: Process_DMA: Process_DMA_Queue:
0000157E                            ProcessDMAQueue:
0000157E 4BF9 00C0 0004             		lea	($C00004).l,a5
00001584 43F8 C800                  		lea	($FFFFC800).w,a1
00001588                            ; loc_14B6:
00001588                            ProcessDMAQueue_Loop:
00001588 3019                       		move.w	(a1)+,d0
0000158A 6700                       		beq.s	ProcessDMAQueue_Done ; branch if we reached a stop token
0000158C                            		; issue a set of VDP commands...
0000158C 3A80                       		move.w	d0,(a5)		; transfer length
0000158E 3A99                       		move.w	(a1)+,(a5)	; transfer length
00001590 3A99                       		move.w	(a1)+,(a5)	; source address
00001592 3A99                       		move.w	(a1)+,(a5)	; source address
00001594 3A99                       		move.w	(a1)+,(a5)	; source address
00001596 3A99                       		move.w	(a1)+,(a5)	; destination
00001598 3A99                       		move.w	(a1)+,(a5)	; destination
0000159A B2FC C8FC                  		cmpa.w	#$C8FC,a1
0000159E 66E8                       		bne.s	ProcessDMAQueue_Loop ; loop if we haven't reached the end of the buffer
000015A0                            ; loc_14CE:
000015A0                            ProcessDMAQueue_Done:
000015A0 31FC 0000 C800             		move.w	#0,($FFFFC800).w
000015A6 21FC FFFF C800 C8FC        		move.l	#$FFFFC800,($FFFFC8FC).w
000015AE 4E75                       		rts
000015B0                            ; End of function ProcessDMAQueue
000015B0                            
000015B0                            ; ---------------------------------------------------------------------------
000015B0                            ; Nemesis decompression	algorithm
000015B0                            ; ---------------------------------------------------------------------------
000015B0                            
000015B0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000015B0                            
000015B0                            
000015B0                            NemDec:
000015B0 48E7 FFDC                  		movem.l	d0-a1/a3-a5,-(sp)
000015B4 47F9 0000 0000             		lea	(loc_1502).l,a3
000015BA 49F9 00C0 0000             		lea	($C00000).l,a4
000015C0 6000                       		bra.s	loc_145C
000015C2                            ; ===========================================================================
000015C2 48E7 FFDC                  		movem.l	d0-a1/a3-a5,-(sp)
000015C6 47F9 0000 0000             		lea	(loc_1518).l,a3
000015CC                            
000015CC                            loc_145C:				; XREF: NemDec
000015CC 43F8 AA00                  		lea	($FFFFAA00).w,a1
000015D0 3418                       		move.w	(a0)+,d2
000015D2 E34A                       		lsl.w	#1,d2
000015D4 6400                       		bcc.s	loc_146A
000015D6 D6FC 000A                  		adda.w	#$A,a3
000015DA                            
000015DA                            loc_146A:
000015DA E54A                       		lsl.w	#2,d2
000015DC 3A42                       		movea.w	d2,a5
000015DE 7608                       		moveq	#8,d3
000015E0 7400                       		moveq	#0,d2
000015E2 7800                       		moveq	#0,d4
000015E4 6100 0000                  		bsr.w	NemDec4
000015E8 1A18                       		move.b	(a0)+,d5
000015EA E145                       		asl.w	#8,d5
000015EC 1A18                       		move.b	(a0)+,d5
000015EE 3C3C 0010                  		move.w	#$10,d6
000015F2 6100                       		bsr.s	NemDec2
000015F4 4CDF 3BFF                  		movem.l	(sp)+,d0-a1/a3-a5
000015F8 4E75                       		rts	
000015FA                            ; End of function NemDec
000015FA                            
000015FA                            
000015FA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000015FA                            
000015FA                            
000015FA                            NemDec2:				; XREF: NemDec
000015FA 3E06                       		move.w	d6,d7
000015FC 5147                       		subq.w	#8,d7
000015FE 3205                       		move.w	d5,d1
00001600 EE69                       		lsr.w	d7,d1
00001602 0C01 00FC                  		cmpi.b	#-4,d1
00001606 6400                       		bcc.s	loc_14D6
00001608 0241 00FF                  		andi.w	#$FF,d1
0000160C D241                       		add.w	d1,d1
0000160E 1031 1000                  		move.b	(a1,d1.w),d0
00001612 4880                       		ext.w	d0
00001614 9C40                       		sub.w	d0,d6
00001616 0C46 0009                  		cmpi.w	#9,d6
0000161A 6400                       		bcc.s	loc_14B2
0000161C 5046                       		addq.w	#8,d6
0000161E E145                       		asl.w	#8,d5
00001620 1A18                       		move.b	(a0)+,d5
00001622                            
00001622                            loc_14B2:
00001622 1231 1001                  		move.b	1(a1,d1.w),d1
00001626 3001                       		move.w	d1,d0
00001628 0241 000F                  		andi.w	#$F,d1
0000162C 0240 00F0                  		andi.w	#$F0,d0
00001630                            
00001630                            loc_14C0:				; XREF: NemDec3
00001630 E848                       		lsr.w	#4,d0
00001632                            
00001632                            loc_14C2:				; XREF: NemDec3
00001632 E98C                       		lsl.l	#4,d4
00001634 8801                       		or.b	d1,d4
00001636 5343                       		subq.w	#1,d3
00001638 6600                       		bne.s	loc_14D0
0000163A 4ED3                       		jmp	(a3)
0000163C                            ; End of function NemDec2
0000163C                            
0000163C                            
0000163C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000163C                            
0000163C                            
0000163C                            NemDec3:				; XREF: loc_1502
0000163C 7800                       		moveq	#0,d4
0000163E 7608                       		moveq	#8,d3
00001640                            
00001640                            loc_14D0:				; XREF: NemDec2
00001640 51C8 FFF0                  		dbf	d0,loc_14C2
00001644 60B4                       		bra.s	NemDec2
00001646                            ; ===========================================================================
00001646                            
00001646                            loc_14D6:				; XREF: NemDec2
00001646 5D46                       		subq.w	#6,d6
00001648 0C46 0009                  		cmpi.w	#9,d6
0000164C 6400                       		bcc.s	loc_14E4
0000164E 5046                       		addq.w	#8,d6
00001650 E145                       		asl.w	#8,d5
00001652 1A18                       		move.b	(a0)+,d5
00001654                            
00001654                            loc_14E4:				; XREF: NemDec3
00001654 5F46                       		subq.w	#7,d6
00001656 3205                       		move.w	d5,d1
00001658 EC69                       		lsr.w	d6,d1
0000165A 3001                       		move.w	d1,d0
0000165C 0241 000F                  		andi.w	#$F,d1
00001660 0240 0070                  		andi.w	#$70,d0
00001664 0C46 0009                  		cmpi.w	#9,d6
00001668 64C6                       		bcc.s	loc_14C0
0000166A 5046                       		addq.w	#8,d6
0000166C E145                       		asl.w	#8,d5
0000166E 1A18                       		move.b	(a0)+,d5
00001670 60BE                       		bra.s	loc_14C0
00001672                            ; End of function NemDec3
00001672                            
00001672                            ; ===========================================================================
00001672                            
00001672                            loc_1502:				; XREF: NemDec
00001672 2884                       		move.l	d4,(a4)
00001674 534D                       		subq.w	#1,a5
00001676 380D                       		move.w	a5,d4
00001678 66C2                       		bne.s	NemDec3
0000167A 4E75                       		rts	
0000167C                            ; ===========================================================================
0000167C B982                       		eor.l	d4,d2
0000167E 2882                       		move.l	d2,(a4)
00001680 534D                       		subq.w	#1,a5
00001682 380D                       		move.w	a5,d4
00001684 66B6                       		bne.s	NemDec3
00001686 4E75                       		rts	
00001688                            ; ===========================================================================
00001688                            
00001688                            loc_1518:				; XREF: NemDec
00001688 28C4                       		move.l	d4,(a4)+
0000168A 534D                       		subq.w	#1,a5
0000168C 380D                       		move.w	a5,d4
0000168E 66AC                       		bne.s	NemDec3
00001690 4E75                       		rts	
00001692                            ; ===========================================================================
00001692 B982                       		eor.l	d4,d2
00001694 28C2                       		move.l	d2,(a4)+
00001696 534D                       		subq.w	#1,a5
00001698 380D                       		move.w	a5,d4
0000169A 66A0                       		bne.s	NemDec3
0000169C 4E75                       		rts	
0000169E                            
0000169E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000169E                            
0000169E                            
0000169E                            NemDec4:				; XREF: NemDec
0000169E 1018                       		move.b	(a0)+,d0
000016A0                            
000016A0                            loc_1530:
000016A0 0C00 00FF                  		cmpi.b	#-1,d0
000016A4 6600                       		bne.s	loc_1538
000016A6 4E75                       		rts	
000016A8                            ; ===========================================================================
000016A8                            
000016A8                            loc_1538:				; XREF: NemDec4
000016A8 3E00                       		move.w	d0,d7
000016AA                            
000016AA                            loc_153A:
000016AA 1018                       		move.b	(a0)+,d0
000016AC 0C00 0080                  		cmpi.b	#$80,d0
000016B0 64EE                       		bcc.s	loc_1530
000016B2 1200                       		move.b	d0,d1
000016B4 0247 000F                  		andi.w	#$F,d7
000016B8 0241 0070                  		andi.w	#$70,d1
000016BC 8E41                       		or.w	d1,d7
000016BE 0240 000F                  		andi.w	#$F,d0
000016C2 1200                       		move.b	d0,d1
000016C4 E149                       		lsl.w	#8,d1
000016C6 8E41                       		or.w	d1,d7
000016C8 7208                       		moveq	#8,d1
000016CA 9240                       		sub.w	d0,d1
000016CC 6600                       		bne.s	loc_1568
000016CE 1018                       		move.b	(a0)+,d0
000016D0 D040                       		add.w	d0,d0
000016D2 3387 0000                  		move.w	d7,(a1,d0.w)
000016D6 60D2                       		bra.s	loc_153A
000016D8                            ; ===========================================================================
000016D8                            
000016D8                            loc_1568:				; XREF: NemDec4
000016D8 1018                       		move.b	(a0)+,d0
000016DA E368                       		lsl.w	d1,d0
000016DC D040                       		add.w	d0,d0
000016DE 7A01                       		moveq	#1,d5
000016E0 E36D                       		lsl.w	d1,d5
000016E2 5345                       		subq.w	#1,d5
000016E4                            
000016E4                            loc_1574:
000016E4 3387 0000                  		move.w	d7,(a1,d0.w)
000016E8 5440                       		addq.w	#2,d0
000016EA 51CD FFF8                  		dbf	d5,loc_1574
000016EE 60BA                       		bra.s	loc_153A
000016F0                            ; End of function NemDec4
000016F0                            
000016F0                            ; ---------------------------------------------------------------------------
000016F0                            ; Subroutine to	load pattern load cues
000016F0                            ; ---------------------------------------------------------------------------
000016F0                            
000016F0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000016F0                            
000016F0                            
000016F0                            LoadPLC:
000016F0 48E7 0060                  		movem.l	a1-a2,-(sp)
000016F4 43F9 0000 0000             		lea	(ArtLoadCues).l,a1
000016FA D040                       		add.w	d0,d0
000016FC 3031 0000                  		move.w	(a1,d0.w),d0
00001700 43F1 0000                  		lea	(a1,d0.w),a1
00001704 45F8 F680                  		lea	($FFFFF680).w,a2
00001708                            
00001708                            loc_1598:
00001708 4A92                       		tst.l	(a2)
0000170A 6700                       		beq.s	loc_15A0
0000170C 5C4A                       		addq.w	#6,a2
0000170E 60F8                       		bra.s	loc_1598
00001710                            ; ===========================================================================
00001710                            
00001710                            loc_15A0:				; XREF: LoadPLC
00001710 3019                       		move.w	(a1)+,d0
00001712 6B00                       		bmi.s	loc_15AC
00001714                            
00001714                            loc_15A4:
00001714 24D9                       		move.l	(a1)+,(a2)+
00001716 34D9                       		move.w	(a1)+,(a2)+
00001718 51C8 FFFA                  		dbf	d0,loc_15A4
0000171C                            
0000171C                            loc_15AC:
0000171C 4CDF 0600                  		movem.l	(sp)+,a1-a2
00001720 4E75                       		rts	
00001722                            ; End of function LoadPLC
00001722                            
00001722                            
00001722                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001722                            
00001722                            
00001722                            LoadPLC2:
00001722 48E7 0060                  		movem.l	a1-a2,-(sp)
00001726 43F9 0000 0000             		lea	(ArtLoadCues).l,a1
0000172C D040                       		add.w	d0,d0
0000172E 3031 0000                  		move.w	(a1,d0.w),d0
00001732 43F1 0000                  		lea	(a1,d0.w),a1
00001736 6100                       		bsr.s	ClearPLC
00001738 45F8 F680                  		lea	($FFFFF680).w,a2
0000173C 3019                       		move.w	(a1)+,d0
0000173E 6B00                       		bmi.s	loc_15D8
00001740                            
00001740                            loc_15D0:
00001740 24D9                       		move.l	(a1)+,(a2)+
00001742 34D9                       		move.w	(a1)+,(a2)+
00001744 51C8 FFFA                  		dbf	d0,loc_15D0
00001748                            
00001748                            loc_15D8:
00001748 4CDF 0600                  		movem.l	(sp)+,a1-a2
0000174C 4E75                       		rts	
0000174E                            ; End of function LoadPLC2
0000174E                            
0000174E                            ; ---------------------------------------------------------------------------
0000174E                            ; Subroutine to	clear the pattern load cues
0000174E                            ; ---------------------------------------------------------------------------
0000174E                            
0000174E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000174E                            
0000174E                            
0000174E                            ClearPLC:				; XREF: LoadPLC2
0000174E 45F8 F680                  		lea	($FFFFF680).w,a2
00001752 701F                       		moveq	#$1F,d0
00001754                            
00001754                            ClearPLC_Loop:
00001754 429A                       		clr.l	(a2)+
00001756 51C8 FFFC                  		dbf	d0,ClearPLC_Loop
0000175A 4E75                       		rts	
0000175C                            ; End of function ClearPLC
0000175C                            
0000175C                            ; ---------------------------------------------------------------------------
0000175C                            ; Subroutine to	use graphics listed in a pattern load cue
0000175C                            ; ---------------------------------------------------------------------------
0000175C                            
0000175C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000175C                            
0000175C                            
0000175C                            RunPLC_RAM:				; XREF: Pal_FadeTo
0000175C 4AB8 F680                  		tst.l	($FFFFF680).w
00001760 6700                       		beq.s	locret_1640
00001762 4A78 F6F8                  		tst.w	($FFFFF6F8).w
00001766 6600                       		bne.s	locret_1640
00001768 2078 F680                  		movea.l	($FFFFF680).w,a0
0000176C 47F9 0000 1672             		lea	(loc_1502).l,a3
00001772 43F8 AA00                  		lea	($FFFFAA00).w,a1
00001776 3418                       		move.w	(a0)+,d2
00001778 6A00                       		bpl.s	loc_160E
0000177A D6FC 000A                  		adda.w	#$A,a3
0000177E                            
0000177E                            loc_160E:
0000177E 0242 7FFF                  		andi.w	#$7FFF,d2
00001782 31C2 F6F8                  		move.w	d2,($FFFFF6F8).w
00001786 6100 FF16                  		bsr.w	NemDec4
0000178A 1A18                       		move.b	(a0)+,d5
0000178C E145                       		asl.w	#8,d5
0000178E 1A18                       		move.b	(a0)+,d5
00001790 7C10                       		moveq	#$10,d6
00001792 7000                       		moveq	#0,d0
00001794 21C8 F680                  		move.l	a0,($FFFFF680).w
00001798 21CB F6E0                  		move.l	a3,($FFFFF6E0).w
0000179C 21C0 F6E4                  		move.l	d0,($FFFFF6E4).w
000017A0 21C0 F6E8                  		move.l	d0,($FFFFF6E8).w
000017A4 21C0 F6EC                  		move.l	d0,($FFFFF6EC).w
000017A8 21C5 F6F0                  		move.l	d5,($FFFFF6F0).w
000017AC 21C6 F6F4                  		move.l	d6,($FFFFF6F4).w
000017B0                            
000017B0                            locret_1640:
000017B0 4E75                       		rts	
000017B2                            ; End of function RunPLC_RAM
000017B2                            
000017B2                            
000017B2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000017B2                            
000017B2                            
000017B2                            sub_1642:				; XREF: loc_C44; loc_F54; loc_F9A
000017B2 4A78 F6F8                  		tst.w	($FFFFF6F8).w
000017B6 6700 0000                  		beq.w	locret_16DA
000017BA 31FC 0009 F6FA             		move.w	#9,($FFFFF6FA).w
000017C0 7000                       		moveq	#0,d0
000017C2 3038 F684                  		move.w	($FFFFF684).w,d0
000017C6 0678 0120 F684             		addi.w	#$120,($FFFFF684).w
000017CC 6000                       		bra.s	loc_1676
000017CE                            ; End of function sub_1642
000017CE                            
000017CE                            
000017CE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000017CE                            
000017CE                            
000017CE                            sub_165E:				; XREF: Demo_Time
000017CE 4A78 F6F8                  		tst.w	($FFFFF6F8).w
000017D2 6700                       		beq.s	locret_16DA
000017D4 31FC 0003 F6FA             		move.w	#3,($FFFFF6FA).w
000017DA 7000                       		moveq	#0,d0
000017DC 3038 F684                  		move.w	($FFFFF684).w,d0
000017E0 0678 0060 F684             		addi.w	#$60,($FFFFF684).w
000017E6                            
000017E6                            loc_1676:				; XREF: sub_1642
000017E6 49F9 00C0 0004             		lea	($C00004).l,a4
000017EC E588                       		lsl.l	#2,d0
000017EE E448                       		lsr.w	#2,d0
000017F0 0040 4000                  		ori.w	#$4000,d0
000017F4 4840                       		swap	d0
000017F6 2880                       		move.l	d0,(a4)
000017F8 594C                       		subq.w	#4,a4
000017FA 2078 F680                  		movea.l	($FFFFF680).w,a0
000017FE 2678 F6E0                  		movea.l	($FFFFF6E0).w,a3
00001802 2038 F6E4                  		move.l	($FFFFF6E4).w,d0
00001806 2238 F6E8                  		move.l	($FFFFF6E8).w,d1
0000180A 2438 F6EC                  		move.l	($FFFFF6EC).w,d2
0000180E 2A38 F6F0                  		move.l	($FFFFF6F0).w,d5
00001812 2C38 F6F4                  		move.l	($FFFFF6F4).w,d6
00001816 43F8 AA00                  		lea	($FFFFAA00).w,a1
0000181A                            
0000181A                            loc_16AA:				; XREF: sub_165E
0000181A 3A7C 0008                  		movea.w	#8,a5
0000181E 6100 FE1C                  		bsr.w	NemDec3
00001822 5378 F6F8                  		subq.w	#1,($FFFFF6F8).w
00001826 6700                       		beq.s	loc_16DC
00001828 5378 F6FA                  		subq.w	#1,($FFFFF6FA).w
0000182C 66EC                       		bne.s	loc_16AA
0000182E 21C8 F680                  		move.l	a0,($FFFFF680).w
00001832 21CB F6E0                  		move.l	a3,($FFFFF6E0).w
00001836 21C0 F6E4                  		move.l	d0,($FFFFF6E4).w
0000183A 21C1 F6E8                  		move.l	d1,($FFFFF6E8).w
0000183E 21C2 F6EC                  		move.l	d2,($FFFFF6EC).w
00001842 21C5 F6F0                  		move.l	d5,($FFFFF6F0).w
00001846 21C6 F6F4                  		move.l	d6,($FFFFF6F4).w
0000184A                            
0000184A                            locret_16DA:				; XREF: sub_1642
0000184A 4E75                       		rts	
0000184C                            ; ===========================================================================
0000184C                            
0000184C                            loc_16DC:				; XREF: sub_165E
0000184C 41F8 F680                  		lea	($FFFFF680).w,a0
00001850 7015                       		moveq	#$15,d0
00001852                            
00001852                            loc_16E2:				; XREF: sub_165E
00001852 20E8 0006                  		move.l	6(a0),(a0)+
00001856 51C8 FFFA                  		dbf	d0,loc_16E2
0000185A 4E75                       		rts	
0000185C                            ; End of function sub_165E
0000185C                            
0000185C                            ; ---------------------------------------------------------------------------
0000185C                            ; Subroutine to	execute	the pattern load cue
0000185C                            ; ---------------------------------------------------------------------------
0000185C                            
0000185C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000185C                            
0000185C                            
0000185C                            RunPLC_ROM:
0000185C 43F9 0000 0000             		lea	(ArtLoadCues).l,a1 ; load the PLC index
00001862 D040                       		add.w	d0,d0
00001864 3031 0000                  		move.w	(a1,d0.w),d0
00001868 43F1 0000                  		lea	(a1,d0.w),a1
0000186C 3219                       		move.w	(a1)+,d1	; load number of entries in the	PLC
0000186E                            
0000186E                            RunPLC_Loop:
0000186E 2059                       		movea.l	(a1)+,a0	; get art pointer
00001870 7000                       		moveq	#0,d0
00001872 3019                       		move.w	(a1)+,d0	; get VRAM address
00001874 E588                       		lsl.l	#2,d0		; divide address by $20
00001876 E448                       		lsr.w	#2,d0
00001878 0040 4000                  		ori.w	#$4000,d0
0000187C 4840                       		swap	d0
0000187E 23C0 00C0 0004             		move.l	d0,($C00004).l	; put the VRAM address into VDP
00001884 6100 FD2A                  		bsr.w	NemDec		; decompress
00001888 51C9 FFE4                  		dbf	d1,RunPLC_Loop	; loop for number of entries
0000188C 4E75                       		rts	
0000188E                            ; End of function RunPLC_ROM
0000188E                            
0000188E                            ; ---------------------------------------------------------------------------
0000188E                            ; Enigma decompression algorithm
0000188E                            ; ---------------------------------------------------------------------------
0000188E                            
0000188E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000188E                            
0000188E                            
0000188E                            EniDec:
0000188E 48E7 FF7C                  		movem.l	d0-d7/a1-a5,-(sp)
00001892 3640                       		movea.w	d0,a3
00001894 1018                       		move.b	(a0)+,d0
00001896 4880                       		ext.w	d0
00001898 3A40                       		movea.w	d0,a5
0000189A 1818                       		move.b	(a0)+,d4
0000189C E70C                       		lsl.b	#3,d4
0000189E 3458                       		movea.w	(a0)+,a2
000018A0 D4CB                       		adda.w	a3,a2
000018A2 3858                       		movea.w	(a0)+,a4
000018A4 D8CB                       		adda.w	a3,a4
000018A6 1A18                       		move.b	(a0)+,d5
000018A8 E145                       		asl.w	#8,d5
000018AA 1A18                       		move.b	(a0)+,d5
000018AC 7C10                       		moveq	#$10,d6
000018AE                            
000018AE                            loc_173E:				; XREF: loc_1768
000018AE 7007                       		moveq	#7,d0
000018B0 3E06                       		move.w	d6,d7
000018B2 9E40                       		sub.w	d0,d7
000018B4 3205                       		move.w	d5,d1
000018B6 EE69                       		lsr.w	d7,d1
000018B8 0241 007F                  		andi.w	#$7F,d1
000018BC 3401                       		move.w	d1,d2
000018BE 0C41 0040                  		cmpi.w	#$40,d1
000018C2 6400                       		bcc.s	loc_1758
000018C4 7006                       		moveq	#6,d0
000018C6 E24A                       		lsr.w	#1,d2
000018C8                            
000018C8                            loc_1758:
000018C8 6100 0000                  		bsr.w	sub_188C
000018CC 0242 000F                  		andi.w	#$F,d2
000018D0 E849                       		lsr.w	#4,d1
000018D2 D241                       		add.w	d1,d1
000018D4 4EFB 1000                  		jmp	loc_17B4(pc,d1.w)
000018D8                            ; End of function EniDec
000018D8                            
000018D8                            ; ===========================================================================
000018D8                            
000018D8                            loc_1768:				; XREF: loc_17B4
000018D8 32CA                       		move.w	a2,(a1)+
000018DA 524A                       		addq.w	#1,a2
000018DC 51CA FFFA                  		dbf	d2,loc_1768
000018E0 60CC                       		bra.s	loc_173E
000018E2                            ; ===========================================================================
000018E2                            
000018E2                            loc_1772:				; XREF: loc_17B4
000018E2 32CC                       		move.w	a4,(a1)+
000018E4 51CA FFFC                  		dbf	d2,loc_1772
000018E8 60C4                       		bra.s	loc_173E
000018EA                            ; ===========================================================================
000018EA                            
000018EA                            loc_177A:				; XREF: loc_17B4
000018EA 6100 0000                  		bsr.w	loc_17DC
000018EE                            
000018EE                            loc_177E:
000018EE 32C1                       		move.w	d1,(a1)+
000018F0 51CA FFFC                  		dbf	d2,loc_177E
000018F4 60B8                       		bra.s	loc_173E
000018F6                            ; ===========================================================================
000018F6                            
000018F6                            loc_1786:				; XREF: loc_17B4
000018F6 6100 0000                  		bsr.w	loc_17DC
000018FA                            
000018FA                            loc_178A:
000018FA 32C1                       		move.w	d1,(a1)+
000018FC 5241                       		addq.w	#1,d1
000018FE 51CA FFFA                  		dbf	d2,loc_178A
00001902 60AA                       		bra.s	loc_173E
00001904                            ; ===========================================================================
00001904                            
00001904                            loc_1794:				; XREF: loc_17B4
00001904 6100 0000                  		bsr.w	loc_17DC
00001908                            
00001908                            loc_1798:
00001908 32C1                       		move.w	d1,(a1)+
0000190A 5341                       		subq.w	#1,d1
0000190C 51CA FFFA                  		dbf	d2,loc_1798
00001910 609C                       		bra.s	loc_173E
00001912                            ; ===========================================================================
00001912                            
00001912                            loc_17A2:				; XREF: loc_17B4
00001912 0C42 000F                  		cmpi.w	#$F,d2
00001916 6700                       		beq.s	loc_17C4
00001918                            
00001918                            loc_17A8:
00001918 6100 0000                  		bsr.w	loc_17DC
0000191C 32C1                       		move.w	d1,(a1)+
0000191E 51CA FFF8                  		dbf	d2,loc_17A8
00001922 608A                       		bra.s	loc_173E
00001924                            ; ===========================================================================
00001924                            
00001924                            loc_17B4:				; XREF: EniDec
00001924 60B2                       		bra.s	loc_1768
00001926                            ; ===========================================================================
00001926 60B0                       		bra.s	loc_1768
00001928                            ; ===========================================================================
00001928 60B8                       		bra.s	loc_1772
0000192A                            ; ===========================================================================
0000192A 60B6                       		bra.s	loc_1772
0000192C                            ; ===========================================================================
0000192C 60BC                       		bra.s	loc_177A
0000192E                            ; ===========================================================================
0000192E 60C6                       		bra.s	loc_1786
00001930                            ; ===========================================================================
00001930 60D2                       		bra.s	loc_1794
00001932                            ; ===========================================================================
00001932 60DE                       		bra.s	loc_17A2
00001934                            ; ===========================================================================
00001934                            
00001934                            loc_17C4:				; XREF: loc_17A2
00001934 5348                       		subq.w	#1,a0
00001936 0C46 0010                  		cmpi.w	#$10,d6
0000193A 6600                       		bne.s	loc_17CE
0000193C 5348                       		subq.w	#1,a0
0000193E                            
0000193E                            loc_17CE:
0000193E 3008                       		move.w	a0,d0
00001940 E248                       		lsr.w	#1,d0
00001942 6400                       		bcc.s	loc_17D6
00001944 5248                       		addq.w	#1,a0
00001946                            
00001946                            loc_17D6:
00001946 4CDF 3EFF                  		movem.l	(sp)+,d0-d7/a1-a5
0000194A 4E75                       		rts	
0000194C                            ; ===========================================================================
0000194C                            
0000194C                            loc_17DC:				; XREF: loc_17A2
0000194C 360B                       		move.w	a3,d3
0000194E 1204                       		move.b	d4,d1
00001950 D201                       		add.b	d1,d1
00001952 6400                       		bcc.s	loc_17EE
00001954 5346                       		subq.w	#1,d6
00001956 0D05                       		btst	d6,d5
00001958 6700                       		beq.s	loc_17EE
0000195A 0043 8000                  		ori.w	#-$8000,d3
0000195E                            
0000195E                            loc_17EE:
0000195E D201                       		add.b	d1,d1
00001960 6400                       		bcc.s	loc_17FC
00001962 5346                       		subq.w	#1,d6
00001964 0D05                       		btst	d6,d5
00001966 6700                       		beq.s	loc_17FC
00001968 0643 4000                  		addi.w	#$4000,d3
0000196C                            
0000196C                            loc_17FC:
0000196C D201                       		add.b	d1,d1
0000196E 6400                       		bcc.s	loc_180A
00001970 5346                       		subq.w	#1,d6
00001972 0D05                       		btst	d6,d5
00001974 6700                       		beq.s	loc_180A
00001976 0643 2000                  		addi.w	#$2000,d3
0000197A                            
0000197A                            loc_180A:
0000197A D201                       		add.b	d1,d1
0000197C 6400                       		bcc.s	loc_1818
0000197E 5346                       		subq.w	#1,d6
00001980 0D05                       		btst	d6,d5
00001982 6700                       		beq.s	loc_1818
00001984 0043 1000                  		ori.w	#$1000,d3
00001988                            
00001988                            loc_1818:
00001988 D201                       		add.b	d1,d1
0000198A 6400                       		bcc.s	loc_1826
0000198C 5346                       		subq.w	#1,d6
0000198E 0D05                       		btst	d6,d5
00001990 6700                       		beq.s	loc_1826
00001992 0043 0800                  		ori.w	#$800,d3
00001996                            
00001996                            loc_1826:
00001996 3205                       		move.w	d5,d1
00001998 3E06                       		move.w	d6,d7
0000199A 9E4D                       		sub.w	a5,d7
0000199C 6400                       		bcc.s	loc_1856
0000199E 3C07                       		move.w	d7,d6
000019A0 0646 0010                  		addi.w	#$10,d6
000019A4 4447                       		neg.w	d7
000019A6 EF69                       		lsl.w	d7,d1
000019A8 1A10                       		move.b	(a0),d5
000019AA EF3D                       		rol.b	d7,d5
000019AC DE47                       		add.w	d7,d7
000019AE CA7B 7000                  		and.w	word_186C-2(pc,d7.w),d5
000019B2 D245                       		add.w	d5,d1
000019B4                            
000019B4                            loc_1844:				; XREF: loc_1868
000019B4 300D                       		move.w	a5,d0
000019B6 D040                       		add.w	d0,d0
000019B8 C27B 0000                  		and.w	word_186C-2(pc,d0.w),d1
000019BC D243                       		add.w	d3,d1
000019BE 1A18                       		move.b	(a0)+,d5
000019C0 E14D                       		lsl.w	#8,d5
000019C2 1A18                       		move.b	(a0)+,d5
000019C4 4E75                       		rts	
000019C6                            ; ===========================================================================
000019C6                            
000019C6                            loc_1856:				; XREF: loc_1826
000019C6 6700                       		beq.s	loc_1868
000019C8 EE69                       		lsr.w	d7,d1
000019CA 300D                       		move.w	a5,d0
000019CC D040                       		add.w	d0,d0
000019CE C27B 0000                  		and.w	word_186C-2(pc,d0.w),d1
000019D2 D243                       		add.w	d3,d1
000019D4 300D                       		move.w	a5,d0
000019D6 6000                       		bra.s	sub_188C
000019D8                            ; ===========================================================================
000019D8                            
000019D8                            loc_1868:				; XREF: loc_1856
000019D8 7C10                       		moveq	#$10,d6
000019DA                            
000019DA                            loc_186A:
000019DA 60D8                       		bra.s	loc_1844
000019DC                            ; ===========================================================================
000019DC 0001 0003 0007 000F 001F+  word_186C:	dc.w 1,	3, 7, $F, $1F, $3F, $7F, $FF, $1FF, $3FF, $7FF
000019F2 0FFF 1FFF 3FFF 7FFF FFFF   		dc.w $FFF, $1FFF, $3FFF, $7FFF,	$FFFF	; XREF: loc_1856
000019FC                            
000019FC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000019FC                            
000019FC                            
000019FC                            sub_188C:				; XREF: EniDec
000019FC 9C40                       		sub.w	d0,d6
000019FE 0C46 0009                  		cmpi.w	#9,d6
00001A02 6400                       		bcc.s	locret_189A
00001A04 5046                       		addq.w	#8,d6
00001A06 E145                       		asl.w	#8,d5
00001A08 1A18                       		move.b	(a0)+,d5
00001A0A                            
00001A0A                            locret_189A:
00001A0A 4E75                       		rts	
00001A0C                            ; End of function sub_188C
00001A0C                            
00001A0C                            ; ---------------------------------------------------------------------------
00001A0C                            ; Kosinski decompression algorithm
00001A0C                            ; ---------------------------------------------------------------------------
00001A0C                            
00001A0C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001A0C                            
00001A0C                            
00001A0C                            KosDec:
00001A0C                            
00001A0C =FFFFFFFE                  var_2		= -2
00001A0C =FFFFFFFF                  var_1		= -1
00001A0C                            
00001A0C 558F                       		subq.l	#2,sp
00001A0E 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001A12 1E98                       		move.b	(a0)+,(sp)
00001A14 3A17                       		move.w	(sp),d5
00001A16 780F                       		moveq	#$F,d4
00001A18                            
00001A18                            loc_18A8:
00001A18 E24D                       		lsr.w	#1,d5
00001A1A 40C6                       		move	sr,d6
00001A1C 51CC 0000                  		dbf	d4,loc_18BA
00001A20 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001A24 1E98                       		move.b	(a0)+,(sp)
00001A26 3A17                       		move.w	(sp),d5
00001A28 780F                       		moveq	#$F,d4
00001A2A                            
00001A2A                            loc_18BA:
00001A2A 44C6                       		move	d6,ccr
00001A2C 6400                       		bcc.s	loc_18C2
00001A2E 12D8                       		move.b	(a0)+,(a1)+
00001A30 60E6                       		bra.s	loc_18A8
00001A32                            ; ===========================================================================
00001A32                            
00001A32                            loc_18C2:				; XREF: KosDec
00001A32 7600                       		moveq	#0,d3
00001A34 E24D                       		lsr.w	#1,d5
00001A36 40C6                       		move	sr,d6
00001A38 51CC 0000                  		dbf	d4,loc_18D6
00001A3C 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001A40 1E98                       		move.b	(a0)+,(sp)
00001A42 3A17                       		move.w	(sp),d5
00001A44 780F                       		moveq	#$F,d4
00001A46                            
00001A46                            loc_18D6:
00001A46 44C6                       		move	d6,ccr
00001A48 6500                       		bcs.s	loc_1906
00001A4A E24D                       		lsr.w	#1,d5
00001A4C 51CC 0000                  		dbf	d4,loc_18EA
00001A50 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001A54 1E98                       		move.b	(a0)+,(sp)
00001A56 3A17                       		move.w	(sp),d5
00001A58 780F                       		moveq	#$F,d4
00001A5A                            
00001A5A                            loc_18EA:
00001A5A E353                       		roxl.w	#1,d3
00001A5C E24D                       		lsr.w	#1,d5
00001A5E 51CC 0000                  		dbf	d4,loc_18FC
00001A62 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001A66 1E98                       		move.b	(a0)+,(sp)
00001A68 3A17                       		move.w	(sp),d5
00001A6A 780F                       		moveq	#$F,d4
00001A6C                            
00001A6C                            loc_18FC:
00001A6C E353                       		roxl.w	#1,d3
00001A6E 5243                       		addq.w	#1,d3
00001A70 74FF                       		moveq	#-1,d2
00001A72 1418                       		move.b	(a0)+,d2
00001A74 6000                       		bra.s	loc_191C
00001A76                            ; ===========================================================================
00001A76                            
00001A76                            loc_1906:				; XREF: loc_18C2
00001A76 1018                       		move.b	(a0)+,d0
00001A78 1218                       		move.b	(a0)+,d1
00001A7A 74FF                       		moveq	#-1,d2
00001A7C 1401                       		move.b	d1,d2
00001A7E EB4A                       		lsl.w	#5,d2
00001A80 1400                       		move.b	d0,d2
00001A82 0241 0007                  		andi.w	#7,d1
00001A86 6700                       		beq.s	loc_1928
00001A88 1601                       		move.b	d1,d3
00001A8A 5243                       		addq.w	#1,d3
00001A8C                            
00001A8C                            loc_191C:
00001A8C 1031 2000                  		move.b	(a1,d2.w),d0
00001A90 12C0                       		move.b	d0,(a1)+
00001A92 51CB FFF8                  		dbf	d3,loc_191C
00001A96 6080                       		bra.s	loc_18A8
00001A98                            ; ===========================================================================
00001A98                            
00001A98                            loc_1928:				; XREF: loc_1906
00001A98 1218                       		move.b	(a0)+,d1
00001A9A 6700                       		beq.s	loc_1938
00001A9C 0C01 0001                  		cmpi.b	#1,d1
00001AA0 6700 FF76                  		beq.w	loc_18A8
00001AA4 1601                       		move.b	d1,d3
00001AA6 60E4                       		bra.s	loc_191C
00001AA8                            ; ===========================================================================
00001AA8                            
00001AA8                            loc_1938:				; XREF: loc_1928
00001AA8 548F                       		addq.l	#2,sp
00001AAA 4E75                       		rts	
00001AAC                            ; End of function KosDec
00001AAC                            
00001AAC                            ; ---------------------------------------------------------------------------
00001AAC                            ; Pallet cycling routine loading subroutine
00001AAC                            ; ---------------------------------------------------------------------------
00001AAC                            
00001AAC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001AAC                            
00001AAC                            
00001AAC                            PalCycle_Load:				; XREF: Demo; Level_MainLoop; End_MainLoop
00001AAC 4EB9 0000 0000                 	jsr    PalCycle_SuperSonic
00001AB2 7400                       		moveq	#0,d2
00001AB4 7000                       		moveq	#0,d0
00001AB6 1038 FE10                  		move.b	($FFFFFE10).w,d0 ; get level number
00001ABA D040                       		add.w	d0,d0		; multiply by 2
00001ABC 303B 0000                  		move.w	PalCycle(pc,d0.w),d0 ; load animated pallets offset index into d0
00001AC0 4EFB 0000                  		jmp	PalCycle(pc,d0.w) ; jump to PalCycle + offset index
00001AC4                            ; End of function PalCycle_Load
00001AC4                            
00001AC4                            ; ===========================================================================
00001AC4                            ; ---------------------------------------------------------------------------
00001AC4                            ; Pallet cycling routines
00001AC4                            ; ---------------------------------------------------------------------------
00001AC4 0000                       PalCycle:	dc.w PalCycle_GHZ-PalCycle
00001AC6 0000                       		dc.w PalCycle_LZ-PalCycle
00001AC8 0000                       		dc.w PalCycle_MZ-PalCycle
00001ACA 0000                       		dc.w PalCycle_SLZ-PalCycle
00001ACC 0000                       		dc.w PalCycle_SYZ-PalCycle
00001ACE 0000                       		dc.w PalCycle_SBZ-PalCycle
00001AD0 0000                       		dc.w PalCycle_GHZ-PalCycle
00001AD2                            
00001AD2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001AD2                            
00001AD2                            
00001AD2                            PalCycle_Title:				; XREF: TitleScreen
00001AD2 41F9 0000 0000             		lea	(Pal_TitleCyc).l,a0
00001AD8 6000                       		bra.s	loc_196A
00001ADA                            ; ===========================================================================
00001ADA                            
00001ADA                            PalCycle_GHZ:				; XREF: PalCycle
00001ADA 41F9 0000 0000             		lea	(Pal_GHZCyc).l,a0
00001AE0                            
00001AE0                            loc_196A:				; XREF: PalCycle_Title
00001AE0 5378 F634                  		subq.w	#1,($FFFFF634).w
00001AE4 6A00                       		bpl.s	locret_1990
00001AE6 31FC 0005 F634             		move.w	#5,($FFFFF634).w
00001AEC 3038 F632                  		move.w	($FFFFF632).w,d0
00001AF0 5278 F632                  		addq.w	#1,($FFFFF632).w
00001AF4 0240 0003                  		andi.w	#3,d0
00001AF8 E748                       		lsl.w	#3,d0
00001AFA 43F8 FB50                  		lea	($FFFFFB50).w,a1
00001AFE 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001B02 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001B06                            
00001B06                            locret_1990:
00001B06 4E75                       		rts	
00001B08                            ; End of function PalCycle_Title
00001B08                            
00001B08                            
00001B08                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001B08                            
00001B08                            
00001B08                            PalCycle_LZ:				; XREF: PalCycle
00001B08 5378 F634                  		subq.w	#1,($FFFFF634).w
00001B0C 6A00                       		bpl.s	loc_19D8
00001B0E 31FC 0002 F634             		move.w	#2,($FFFFF634).w
00001B14 3038 F632                  		move.w	($FFFFF632).w,d0
00001B18 5278 F632                  		addq.w	#1,($FFFFF632).w
00001B1C 0240 0003                  		andi.w	#3,d0
00001B20 E748                       		lsl.w	#3,d0
00001B22 41F9 0000 0000             		lea	(Pal_LZCyc1).l,a0
00001B28 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; check if level is SBZ3
00001B2E 6600                       		bne.s	loc_19C0
00001B30 41F9 0000 0000             		lea	(Pal_SBZ3Cyc1).l,a0 ; load SBZ3	pallet instead
00001B36                            
00001B36                            loc_19C0:
00001B36 43F8 FB56                  		lea	($FFFFFB56).w,a1
00001B3A 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001B3E 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001B42 43F8 FAD6                  		lea	($FFFFFAD6).w,a1
00001B46 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001B4A 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001B4E                            
00001B4E                            loc_19D8:
00001B4E 3038 FE04                  		move.w	($FFFFFE04).w,d0
00001B52 0240 0007                  		andi.w	#7,d0
00001B56 103B 0000                  		move.b	byte_1A3C(pc,d0.w),d0
00001B5A 6700                       		beq.s	locret_1A3A
00001B5C 7201                       		moveq	#1,d1
00001B5E 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00001B62 6700                       		beq.s	loc_19F0
00001B64 4441                       		neg.w	d1
00001B66                            
00001B66                            loc_19F0:
00001B66 3038 F650                  		move.w	($FFFFF650).w,d0
00001B6A 0240 0003                  		andi.w	#3,d0
00001B6E D041                       		add.w	d1,d0
00001B70 0C40 0003                  		cmpi.w	#3,d0
00001B74 6500                       		bcs.s	loc_1A0A
00001B76 3200                       		move.w	d0,d1
00001B78 7000                       		moveq	#0,d0
00001B7A 4A41                       		tst.w	d1
00001B7C 6A00                       		bpl.s	loc_1A0A
00001B7E 7002                       		moveq	#2,d0
00001B80                            
00001B80                            loc_1A0A:
00001B80 31C0 F650                  		move.w	d0,($FFFFF650).w
00001B84 D040                       		add.w	d0,d0
00001B86 3200                       		move.w	d0,d1
00001B88 D040                       		add.w	d0,d0
00001B8A D041                       		add.w	d1,d0
00001B8C 41F9 0000 0000             		lea	(Pal_LZCyc2).l,a0
00001B92 43F8 FB76                  		lea	($FFFFFB76).w,a1
00001B96 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001B9A 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001B9E 41F9 0000 0000             		lea	(Pal_LZCyc3).l,a0
00001BA4 43F8 FAF6                  		lea	($FFFFFAF6).w,a1
00001BA8 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001BAC 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001BB0                            
00001BB0                            locret_1A3A:
00001BB0 4E75                       		rts	
00001BB2                            ; End of function PalCycle_LZ
00001BB2                            
00001BB2                            ; ===========================================================================
00001BB2 0100 0001 0000 0100        byte_1A3C:	dc.b 1,	0, 0, 1, 0, 0, 1, 0
00001BBA                            ; ===========================================================================
00001BBA                            
00001BBA                            PalCycle_MZ:				; XREF: PalCycle
00001BBA 4E75                       		rts	
00001BBC                            
00001BBC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001BBC                            
00001BBC                            
00001BBC                            PalCycle_SLZ:				; XREF: PalCycle
00001BBC 5378 F634                  		subq.w	#1,($FFFFF634).w
00001BC0 6A00                       		bpl.s	locret_1A80
00001BC2 31FC 0007 F634             		move.w	#7,($FFFFF634).w
00001BC8 3038 F632                  		move.w	($FFFFF632).w,d0
00001BCC 5240                       		addq.w	#1,d0
00001BCE 0C40 0006                  		cmpi.w	#6,d0
00001BD2 6500                       		bcs.s	loc_1A60
00001BD4 7000                       		moveq	#0,d0
00001BD6                            
00001BD6                            loc_1A60:
00001BD6 31C0 F632                  		move.w	d0,($FFFFF632).w
00001BDA 3200                       		move.w	d0,d1
00001BDC D241                       		add.w	d1,d1
00001BDE D041                       		add.w	d1,d0
00001BE0 D040                       		add.w	d0,d0
00001BE2 41F9 0000 0000             		lea	(Pal_SLZCyc).l,a0
00001BE8 43F8 FB56                  		lea	($FFFFFB56).w,a1
00001BEC 32B0 0000                  		move.w	(a0,d0.w),(a1)
00001BF0 2370 0002 0004             		move.l	2(a0,d0.w),4(a1)
00001BF6                            
00001BF6                            locret_1A80:
00001BF6 4E75                       		rts	
00001BF8                            ; End of function PalCycle_SLZ
00001BF8                            
00001BF8                            
00001BF8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001BF8                            
00001BF8                            
00001BF8                            PalCycle_SYZ:				; XREF: PalCycle
00001BF8 5378 F634                  		subq.w	#1,($FFFFF634).w
00001BFC 6A00                       		bpl.s	locret_1AC6
00001BFE 31FC 0005 F634             		move.w	#5,($FFFFF634).w
00001C04 3038 F632                  		move.w	($FFFFF632).w,d0
00001C08 5278 F632                  		addq.w	#1,($FFFFF632).w
00001C0C 0240 0003                  		andi.w	#3,d0
00001C10 E548                       		lsl.w	#2,d0
00001C12 3200                       		move.w	d0,d1
00001C14 D040                       		add.w	d0,d0
00001C16 41F9 0000 0000             		lea	(Pal_SYZCyc1).l,a0
00001C1C 43F8 FB6E                  		lea	($FFFFFB6E).w,a1
00001C20 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001C24 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001C28 41F9 0000 0000             		lea	(Pal_SYZCyc2).l,a0
00001C2E 43F8 FB76                  		lea	($FFFFFB76).w,a1
00001C32 32B0 1000                  		move.w	(a0,d1.w),(a1)
00001C36 3370 1002 0004             		move.w	2(a0,d1.w),4(a1)
00001C3C                            
00001C3C                            locret_1AC6:
00001C3C 4E75                       		rts	
00001C3E                            ; End of function PalCycle_SYZ
00001C3E                            
00001C3E                            
00001C3E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001C3E                            
00001C3E                            
00001C3E                            PalCycle_SBZ:				; XREF: PalCycle
00001C3E 45F9 0000 0000             		lea	(Pal_SBZCycList).l,a2
00001C44 4A38 FE11                  		tst.b	($FFFFFE11).w
00001C48 6700                       		beq.s	loc_1ADA
00001C4A 45F9 0000 0000             		lea	(Pal_SBZCycList2).l,a2
00001C50                            
00001C50                            loc_1ADA:
00001C50 43F8 F650                  		lea	($FFFFF650).w,a1
00001C54 321A                       		move.w	(a2)+,d1
00001C56                            
00001C56                            loc_1AE0:
00001C56 5311                       		subq.b	#1,(a1)
00001C58 6B00                       		bmi.s	loc_1AEA
00001C5A 5489                       		addq.l	#2,a1
00001C5C 5C8A                       		addq.l	#6,a2
00001C5E 6000                       		bra.s	loc_1B06
00001C60                            ; ===========================================================================
00001C60                            
00001C60                            loc_1AEA:				; XREF: PalCycle_SBZ
00001C60 12DA                       		move.b	(a2)+,(a1)+
00001C62 1011                       		move.b	(a1),d0
00001C64 5200                       		addq.b	#1,d0
00001C66 B01A                       		cmp.b	(a2)+,d0
00001C68 6500                       		bcs.s	loc_1AF6
00001C6A 7000                       		moveq	#0,d0
00001C6C                            
00001C6C                            loc_1AF6:
00001C6C 12C0                       		move.b	d0,(a1)+
00001C6E 0240 000F                  		andi.w	#$F,d0
00001C72 D040                       		add.w	d0,d0
00001C74 305A                       		movea.w	(a2)+,a0
00001C76 365A                       		movea.w	(a2)+,a3
00001C78 36B0 0000                  		move.w	(a0,d0.w),(a3)
00001C7C                            
00001C7C                            loc_1B06:				; XREF: PalCycle_SBZ
00001C7C 51C9 FFD8                  		dbf	d1,loc_1AE0
00001C80 5378 F634                  		subq.w	#1,($FFFFF634).w
00001C84 6A00                       		bpl.s	locret_1B64
00001C86 41F9 0000 0000             		lea	(Pal_SBZCyc4).l,a0
00001C8C 31FC 0001 F634             		move.w	#1,($FFFFF634).w
00001C92 4A38 FE11                  		tst.b	($FFFFFE11).w
00001C96 6700                       		beq.s	loc_1B2E
00001C98 41F9 0000 0000             		lea	(Pal_SBZCyc10).l,a0
00001C9E 31FC 0000 F634             		move.w	#0,($FFFFF634).w
00001CA4                            
00001CA4                            loc_1B2E:
00001CA4 72FF                       		moveq	#-1,d1
00001CA6 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00001CAA 6700                       		beq.s	loc_1B38
00001CAC 4441                       		neg.w	d1
00001CAE                            
00001CAE                            loc_1B38:
00001CAE 3038 F632                  		move.w	($FFFFF632).w,d0
00001CB2 0240 0003                  		andi.w	#3,d0
00001CB6 D041                       		add.w	d1,d0
00001CB8 0C40 0003                  		cmpi.w	#3,d0
00001CBC 6500                       		bcs.s	loc_1B52
00001CBE 3200                       		move.w	d0,d1
00001CC0 7000                       		moveq	#0,d0
00001CC2 4A41                       		tst.w	d1
00001CC4 6A00                       		bpl.s	loc_1B52
00001CC6 7002                       		moveq	#2,d0
00001CC8                            
00001CC8                            loc_1B52:
00001CC8 31C0 F632                  		move.w	d0,($FFFFF632).w
00001CCC D040                       		add.w	d0,d0
00001CCE 43F8 FB58                  		lea	($FFFFFB58).w,a1
00001CD2 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001CD6 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001CDA                            
00001CDA                            locret_1B64:
00001CDA 4E75                       		rts	
00001CDC                            ; End of function PalCycle_SBZ
00001CDC                            
00001CDC =FFFFFFC4                  Palette_frame equ   $FFFFFFC4   ; < free RAM word (make sure its even or youll get errors!!!!)
00001CDC =FFFFF65F                  Super_Sonic_palette equ $FFFFF65F    ; < free RAM byte
00001CDC =FFFFF65C                  Palette_timer equ $FFFFF65C  ; < free RAM byte
00001CDC                            
00001CDC                            PalCycle_SuperSonic:
00001CDC 1038 F65F                          move.b    ($FFFFF65F).w,d0
00001CE0 6700                               beq.s    return_2186
00001CE2 6B00 0000                          bmi.w    loc_21E6
00001CE6 5300                               subq.b    #1,d0
00001CE8 6600                               bne.s    loc_2188
00001CEA 5338 F65E                          subq.b    #1,($FFFFF65E).w
00001CEE 6A00                               bpl.s    return_2186
00001CF0 11FC 0003 F65E                     move.b    #3,($FFFFF65E).w
00001CF6 41F9 0000 0000                     lea    (Pal_2246).l,a0
00001CFC 3038 F65C                          move.w    ($FFFFF65C).w,d0
00001D00 5C78 F65C                          addq.w    #6,($FFFFF65C).w ; was 8
00001D04 0C78 0030 F65C                     cmpi.w    #$30,($FFFFF65C).w
00001D0A 6500                               bcs.s    PalCycleSS_1
00001D0C 11FC 00FF F65F                     move.b    #-1,($FFFFF65F).w
00001D12 11FC 0000 F7F2                     move.b    #0,($FFFFF7C8+$2A).w
00001D18                            
00001D18                            PalCycleSS_1:
00001D18 43F8 FB04                          lea    ($FFFFFB04).w,a1 ; 04
00001D1C 22F0 0000                          move.l    (a0,d0.w),(a1)+ ; there was +
00001D20 22B0 0004                          move.l    4(a0,d0.w),(a1)
00001D24                            
00001D24                            return_2186:
00001D24 4E75                               rts
00001D26                            ; ===========================================================================
00001D26                            
00001D26                            loc_2188:
00001D26 5338 F65E                          subq.b    #1,($FFFFF65E).w
00001D2A 6AF8                               bpl.s    return_2186
00001D2C 11FC 0003 F65E                     move.b    #3,($FFFFF65E).w
00001D32 41F9 0000 0000                     lea    (Pal_2246).l,a0
00001D38 3038 F65C                          move.w    ($FFFFF65C).w,d0
00001D3C 5D78 F65C                          subq.w    #$6,($FFFFF65C).w ; it was 8
00001D40 6400                               bcc.s     loc_21B0
00001D42 11FC 0000 F65C                     move.b    #0,($FFFFF65C).w
00001D48 11FC 0000 F65F                     move.b    #0,($FFFFF65F).w
00001D4E 4278 FB02                          clr.w 	  ($FFFFFB02).w
00001D52 4278 FB04                          clr.w 	  ($FFFFFB04).w
00001D56 4E75                               rts
00001D58                            
00001D58                            loc_21B0:
00001D58 43F8 FB04                          lea    ($FFFFFB04).w,a1
00001D5C 22F0 0000                          move.l    (a0,d0.w),(a1)+ ; there was +
00001D60 22B0 0004                          move.l    4(a0,d0.w),(a1)
00001D64 0C38 0001 FE10                     cmpi.b    #$1,($FFFFFE10).w
00001D6A 6700                               beq.s    PalCycleSS_2
00001D6C 4E75                               rts
00001D6E                            ; ===========================================================================
00001D6E                            
00001D6E                            PalCycleSS_2:
00001D6E 43F8 F084                          lea    ($FFFFF084).w,a1
00001D72 22F0 0000                          move.l    (a0,d0.w),(a1)+
00001D76 22B0 0004                          move.l    4(a0,d0.w),(a1)
00001D7A 4E75                               rts
00001D7C                            ; ===========================================================================
00001D7C                            
00001D7C                            loc_21E6:
00001D7C 5338 F65E                          subq.b    #1,($FFFFF65E).w
00001D80 6AA2                               bpl.s    return_2186
00001D82 11FC 0007 F65E                     move.b    #7,($FFFFF65E).w
00001D88 41F9 0000 0000                     lea    (Pal_2246).l,a0
00001D8E 3038 F65C                          move.w    ($FFFFF65C).w,d0
00001D92 5078 F65C                          addq.w    #8,($FFFFF65C).w ; it was 8
00001D96 0C78 0078 F65C                     cmpi.w    #$78,($FFFFF65C).w
00001D9C 6500                               bcs.s    PalCycleSS_3
00001D9E 31FC 0030 F65C                     move.w    #$30,($FFFFF65C).w
00001DA4                            
00001DA4                            PalCycleSS_3:
00001DA4 43F8 FB04                          lea    ($FFFFFB04).w,a1
00001DA8 22F0 0000                          move.l    (a0,d0.w),(a1)+ ; there was +
00001DAC 22B0 0004                          move.l    4(a0,d0.w),(a1)
00001DB0                            ;		cmpi.b  #$02,($FFFFFFBB).w ; is it Shadow?
00001DB0                            ;		beq.s   PalCycle_SSEnd ; if not, branch
00001DB0                            ;        lea    ($FFFFFB02).w,a1 ; it was 04
00001DB0                            ;        move.w    (a0,d0.w),(a1) ; there was +
00001DB0                            ;        move.w    4(a0,d0.w),(a1)
00001DB0 0C38 0001 FE10                     cmpi.b    #$1,($FFFFFE10).w
00001DB6 6700                               beq.s    PalCycleSS_4
00001DB8 4E75                               rts
00001DBA                            ; ===========================================================================
00001DBA                            PalCycleSS_4:
00001DBA 43F8 F084                          lea    ($FFFFF084).w,a1
00001DBE 22F0 0000                          move.l    (a0,d0.w),(a1)+
00001DC2 22B0 0004                          move.l    4(a0,d0.w),(a1)
00001DC6 4E75                               rts
00001DC8                            
00001DC8                            PalCycle_SSEnd:
00001DC8 4E75                       		rts
00001DCA                            ; End of function PalCycle_SuperSonic
00001DCA                            
00001DCA                            ; ===========================================================================
00001DCA                            ;----------------------------------------------------------------------------
00001DCA                            ;Palette for transformation to Super Sonic
00001DCA                            ;----------------------------------------------------------------------------
00001DCA                            Pal_2246:
00001DCA                            	incbin  "pallet/SuperSonic.bin"
00001E4A                                even
00001E4A                            ;----------------------------------------------------------------------------
00001E4A                            ;Palette for transformation to Super Sonic while underwater in CPZ
00001E4A                            ;----------------------------------------------------------------------------
00001E4A                            ; Pal_22C6:
00001E4A                            CyclingPal_CPZUWTransformation:
00001E4A                            	incbin  "pallet/CPZWater SS transformation.bin"
00001E6A                                even
00001E6A                            ;----------------------------------------------------------------------------
00001E6A                            ;Palette for transformation to Super Sonic while underwater in ARZ
00001E6A                            ;----------------------------------------------------------------------------
00001E6A                            ; Pal_2346:
00001E6A                            CyclingPal_ARZUWTransformation:
00001E6A                                incbin  "pallet/ARZWater SS transformation.bin"
00001E8A                                even
00001E8A                            
00001E8A                            ; ===========================================================================
00001E8A                            Pal_TitleCyc:	incbin	pallet\c_title.bin
00001EAA                            Pal_GHZCyc:	incbin	pallet\c_ghz.bin
00001ECA                            Pal_LZCyc1:	incbin	pallet\c_lz_wat.bin	; waterfalls pallet
00001EEA                            Pal_LZCyc2:	incbin	pallet\c_lz_bel.bin	; conveyor belt pallet
00001EFC                            Pal_LZCyc3:	incbin	pallet\c_lz_buw.bin	; conveyor belt (underwater) pallet
00001F0E                            Pal_SBZ3Cyc1:	incbin	pallet\c_sbz3_w.bin	; waterfalls pallet
00001F76                            Pal_SLZCyc:	incbin	pallet\c_slz.bin
00001F9A                            Pal_SYZCyc1:	incbin	pallet\c_syz_1.bin
00001FBA                            Pal_SYZCyc2:	incbin	pallet\c_syz_2.bin
00001FCA                            
00001FCA                            Pal_SBZCycList:
00001FCA                            	include "_inc\SBZ pallet script 1.asm"
00001FCA                            ; ---------------------------------------------------------------------------
00001FCA                            ; Scrap Brain Zone 1 pallet cycling script
00001FCA                            ; ---------------------------------------------------------------------------
00001FCA 0008                       	dc.w 8			; number of entries - 1
00001FCC 0708                       	dc.b 7,	8		; duration in frames, number of	colours
00001FCE 0000                       	dc.w Pal_SBZCyc1	; pallet pointer
00001FD0 FB50                       	dc.w $FB50		; RAM address
00001FD2 0D08                       	dc.b $D, 8
00001FD4 0000                       	dc.w Pal_SBZCyc2
00001FD6 FB52                       	dc.w $FB52
00001FD8 0E08                       	dc.b $E, 8
00001FDA 0000                       	dc.w Pal_SBZCyc3
00001FDC FB6E                       	dc.w $FB6E
00001FDE 0B08                       	dc.b $B, 8
00001FE0 0000                       	dc.w Pal_SBZCyc5
00001FE2 FB70                       	dc.w $FB70
00001FE4 0708                       	dc.b 7,	8
00001FE6 0000                       	dc.w Pal_SBZCyc6
00001FE8 FB72                       	dc.w $FB72
00001FEA 1C10                       	dc.b $1C, $10
00001FEC 0000                       	dc.w Pal_SBZCyc7
00001FEE FB7E                       	dc.w $FB7E
00001FF0 0303                       	dc.b 3,	3
00001FF2 0000                       	dc.w Pal_SBZCyc8
00001FF4 FB78                       	dc.w $FB78
00001FF6 0303                       	dc.b 3,	3
00001FF8 0000                       	dc.w Pal_SBZCyc8+2
00001FFA FB7A                       	dc.w $FB7A
00001FFC 0303                       	dc.b 3,	3
00001FFE 0000                       	dc.w Pal_SBZCyc8+4
00002000 FB7C                       	dc.w $FB7C
00002002                            	even
00002002                            	even
00002002                            
00002002                            Pal_SBZCycList2:
00002002                            	include "_inc\SBZ pallet script 2.asm"
00002002                            ; ---------------------------------------------------------------------------
00002002                            ; Scrap Brain Zone 2 pallet cycling script
00002002                            ; ---------------------------------------------------------------------------
00002002 0006                       	dc.w 6
00002004 0708                       	dc.b 7,	8
00002006 0000                       	dc.w Pal_SBZCyc1
00002008 FB50                       	dc.w $FB50
0000200A 0D08                       	dc.b $D, 8
0000200C 0000                       	dc.w Pal_SBZCyc2
0000200E FB52                       	dc.w $FB52
00002010 0908                       	dc.b 9,	8
00002012 0000                       	dc.w Pal_SBZCyc9
00002014 FB70                       	dc.w $FB70
00002016 0708                       	dc.b 7,	8
00002018 0000                       	dc.w Pal_SBZCyc6
0000201A FB72                       	dc.w $FB72
0000201C 0303                       	dc.b 3,	3
0000201E 0000                       	dc.w Pal_SBZCyc8
00002020 FB78                       	dc.w $FB78
00002022 0303                       	dc.b 3,	3
00002024 0000                       	dc.w Pal_SBZCyc8+2
00002026 FB7A                       	dc.w $FB7A
00002028 0303                       	dc.b 3,	3
0000202A 0000                       	dc.w Pal_SBZCyc8+4
0000202C FB7C                       	dc.w $FB7C
0000202E                            	even
0000202E                            	even
0000202E                            
0000202E                            Pal_SBZCyc1:	incbin	pallet\c_sbz_1.bin
0000203E                            Pal_SBZCyc2:	incbin	pallet\c_sbz_2.bin
0000204E                            Pal_SBZCyc3:	incbin	pallet\c_sbz_3.bin
0000205E                            Pal_SBZCyc4:	incbin	pallet\c_sbz_4.bin
0000206A                            Pal_SBZCyc5:	incbin	pallet\c_sbz_5.bin
0000207A                            Pal_SBZCyc6:	incbin	pallet\c_sbz_6.bin
0000208A                            Pal_SBZCyc7:	incbin	pallet\c_sbz_7.bin
000020AA                            Pal_SBZCyc8:	incbin	pallet\c_sbz_8.bin
000020B4                            Pal_SBZCyc9:	incbin	pallet\c_sbz_9.bin
000020C4                            Pal_SBZCyc10:	incbin	pallet\c_sbz_10.bin
000020D0                            ; ---------------------------------------------------------------------------
000020D0                            ; Subroutine to	fade out and fade in
000020D0                            ; ---------------------------------------------------------------------------
000020D0                            
000020D0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000020D0                            
000020D0                            
000020D0                            Pal_FadeTo:
000020D0 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
000020D6                            
000020D6                            Pal_FadeTo2:
000020D6 7000                       		moveq	#0,d0
000020D8 41F8 FB00                  		lea	($FFFFFB00).w,a0
000020DC 1038 F626                  		move.b	($FFFFF626).w,d0
000020E0 D0C0                       		adda.w	d0,a0
000020E2 7200                       		moveq	#0,d1
000020E4 1038 F627                  		move.b	($FFFFF627).w,d0
000020E8                            
000020E8                            Pal_ToBlack:
000020E8 30C1                       		move.w	d1,(a0)+
000020EA 51C8 FFFC                  		dbf	d0,Pal_ToBlack	; fill pallet with $000	(black)
000020EE 780E                       		moveq	#$0E,d4					; MJ: prepare maximum colour check
000020F0 7C00                       		moveq	#$00,d6					; MJ: clear d6
000020F2                            
000020F2                            loc_1DCE:
000020F2 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
000020F8 6100 0000                  		bsr.w	DelayProgram
000020FC 0846 0000                  		bchg	#$00,d6					; MJ: change delay counter
00002100 67F0                       		beq	loc_1DCE				; MJ: if null, delay a frame
00002102 6100                       		bsr.s	Pal_FadeIn
00002104 6100 F656                  		bsr.w	RunPLC_RAM
00002108 5504                       		subq.b	#$02,d4					; MJ: decrease colour check
0000210A 66E6                       		bne	loc_1DCE				; MJ: if it has not reached null, branch
0000210C 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w			; MJ: wait for V-blank again (so colours transfer)
00002112 6000 0000                  		bra	DelayProgram				; MJ: ''
00002116                            
00002116                            ; End of function Pal_FadeTo
00002116                            
00002116                            ; ---------------------------------------------------------------------------
00002116                            ; Pallet fade-in subroutine
00002116                            ; ---------------------------------------------------------------------------
00002116                            
00002116                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002116                            
00002116                            
00002116                            Pal_FadeIn:				; XREF: Pal_FadeTo
00002116 7000                       		moveq	#0,d0
00002118 41F8 FB00                  		lea	($FFFFFB00).w,a0
0000211C 43F8 FB80                  		lea	($FFFFFB80).w,a1
00002120 1038 F626                  		move.b	($FFFFF626).w,d0
00002124 D0C0                       		adda.w	d0,a0
00002126 D2C0                       		adda.w	d0,a1
00002128 1038 F627                  		move.b	($FFFFF627).w,d0
0000212C                            
0000212C                            loc_1DFA:
0000212C 6100                       		bsr.s	Pal_AddColor
0000212E 51C8 FFFC                  		dbf	d0,loc_1DFA
00002132 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00002138 6600                       		bne.s	locret_1E24
0000213A 7000                       		moveq	#0,d0
0000213C 41F8 FA80                  		lea	($FFFFFA80).w,a0
00002140 43F8 FA00                  		lea	($FFFFFA00).w,a1
00002144 1038 F626                  		move.b	($FFFFF626).w,d0
00002148 D0C0                       		adda.w	d0,a0
0000214A D2C0                       		adda.w	d0,a1
0000214C 1038 F627                  		move.b	($FFFFF627).w,d0
00002150                            
00002150                            loc_1E1E:
00002150 6100                       		bsr.s	Pal_AddColor
00002152 51C8 FFFC                  		dbf	d0,loc_1E1E
00002156                            
00002156                            locret_1E24:
00002156 4E75                       		rts	
00002158                            ; End of function Pal_FadeIn
00002158                            
00002158                            
00002158                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002158                            
00002158                            
00002158                            Pal_AddColor:				; XREF: Pal_FadeIn
00002158 1A11                       		move.b	(a1),d5					; MJ: load blue
0000215A 3219                       		move.w	(a1)+,d1				; MJ: load green and red
0000215C 1401                       		move.b	d1,d2					; MJ: load red
0000215E E809                       		lsr.b	#$04,d1					; MJ: get only green
00002160 0202 000E                  		andi.b	#$0E,d2					; MJ: get only red
00002164 3610                       		move.w	(a0),d3					; MJ: load current colour in buffer
00002166 B805                       		cmp.b	d5,d4					; MJ: is it time for blue to fade?
00002168 6200 0000                  		bhi	FCI_NoBlue				; MJ: if not, branch
0000216C 0643 0200                  		addi.w	#$0200,d3				; MJ: increase blue
00002170                            
00002170                            FCI_NoBlue:
00002170 B801                       		cmp.b	d1,d4					; MJ: is it time for green to fade?
00002172 6200 0000                  		bhi	FCI_NoGreen				; MJ: if not, branch
00002176 0603 0020                  		addi.b	#$20,d3					; MJ: increase green
0000217A                            
0000217A                            FCI_NoGreen:
0000217A B802                       		cmp.b	d2,d4					; MJ: is it time for red to fade?
0000217C 6200 0000                  		bhi	FCI_NoRed				; MJ: if not, branch
00002180 5403                       		addq.b	#$02,d3					; MJ: increase red
00002182                            
00002182                            FCI_NoRed:
00002182 30C3                       		move.w	d3,(a0)+				; MJ: save colour
00002184 4E75                       		rts						; MJ: return
00002186                            
00002186                            ; End of function Pal_AddColor
00002186                            
00002186                            
00002186                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002186                            
00002186                            
00002186                            Pal_FadeFrom:
00002186 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
0000218C 7807                       		moveq	#$07,d4					; MJ: set repeat times
0000218E 7C00                       		moveq	#$00,d6					; MJ: clear d6
00002190                            
00002190                            loc_1E5C:
00002190 6100 F5CA                  		bsr.w	RunPLC_RAM
00002194 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
0000219A 6100 0000                  		bsr.w	DelayProgram
0000219E 0846 0000                  		bchg	#$00,d6					; MJ: change delay counter
000021A2 67EC                       		beq	loc_1E5C				; MJ: if null, delay a frame
000021A4 6100                       		bsr.s	Pal_FadeOut
000021A6 51CC FFE8                  		dbf	d4,loc_1E5C
000021AA 4E75                       		rts	
000021AC                            ; End of function Pal_FadeFrom
000021AC                            
000021AC                            ; ---------------------------------------------------------------------------
000021AC                            ; Pallet fade-out subroutine
000021AC                            ; ---------------------------------------------------------------------------
000021AC                            
000021AC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000021AC                            
000021AC                            
000021AC                            Pal_FadeOut:				; XREF: Pal_FadeFrom
000021AC 7000                       		moveq	#0,d0
000021AE 41F8 FB00                  		lea	($FFFFFB00).w,a0
000021B2 1038 F626                  		move.b	($FFFFF626).w,d0
000021B6 D0C0                       		adda.w	d0,a0
000021B8 1038 F627                  		move.b	($FFFFF627).w,d0
000021BC                            
000021BC                            loc_1E82:
000021BC 6100                       		bsr.s	Pal_DecColor
000021BE 51C8 FFFC                  		dbf	d0,loc_1E82
000021C2                            
000021C2 7000                       		moveq	#0,d0
000021C4 41F8 FA80                  		lea	($FFFFFA80).w,a0
000021C8 1038 F626                  		move.b	($FFFFF626).w,d0
000021CC D0C0                       		adda.w	d0,a0
000021CE 1038 F627                  		move.b	($FFFFF627).w,d0
000021D2                            
000021D2                            loc_1E98:
000021D2 6100                       		bsr.s	Pal_DecColor
000021D4 51C8 FFFC                  		dbf	d0,loc_1E98
000021D8 4E75                       		rts	
000021DA                            ; End of function Pal_FadeOut
000021DA                            
000021DA                            
000021DA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000021DA                            
000021DA                            
000021DA                            Pal_DecColor:				; XREF: Pal_FadeOut
000021DA 3A10                       		move.w	(a0),d5					; MJ: load colour
000021DC 3205                       		move.w	d5,d1					; MJ: copy to d1
000021DE 1401                       		move.b	d1,d2					; MJ: load green and red
000021E0 1601                       		move.b	d1,d3					; MJ: load red
000021E2 0241 0E00                  		andi.w	#$0E00,d1				; MJ: get only blue
000021E6 6700 0000                  		beq	FCO_NoBlue				; MJ: if blue is finished, branch
000021EA 0445 0200                  		subi.w	#$0200,d5				; MJ: decrease blue
000021EE                            
000021EE                            FCO_NoBlue:
000021EE 0242 00E0                  		andi.w	#$00E0,d2				; MJ: get only green (needs to be word)
000021F2 6700 0000                  		beq	FCO_NoGreen				; MJ: if green is finished, branch
000021F6 0405 0020                  		subi.b	#$20,d5					; MJ: decrease green
000021FA                            
000021FA                            FCO_NoGreen:
000021FA 0203 000E                  		andi.b	#$0E,d3					; MJ: get only red
000021FE 6700 0000                  		beq	FCO_NoRed				; MJ: if red is finished, branch
00002202 5505                       		subq.b	#$02,d5					; MJ: decrease red
00002204                            
00002204                            FCO_NoRed:
00002204 30C5                       		move.w	d5,(a0)+				; MJ: save new colour
00002206 4E75                       		rts						; MJ: return
00002208                            
00002208                            ; End of function Pal_DecColor
00002208                            
00002208                            ; ---------------------------------------------------------------------------
00002208                            ; Subroutine to	fill the pallet	with white (special stage)
00002208                            ; ---------------------------------------------------------------------------
00002208                            
00002208                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002208                            
00002208                            
00002208                            Pal_MakeWhite:				; XREF: SpecialStage
00002208 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
0000220E 7000                       		moveq	#0,d0
00002210 41F8 FB00                  		lea	($FFFFFB00).w,a0
00002214 1038 F626                  		move.b	($FFFFF626).w,d0
00002218 D0C0                       		adda.w	d0,a0
0000221A 323C 0EEE                  		move.w	#$EEE,d1
0000221E 1038 F627                  		move.b	($FFFFF627).w,d0
00002222                            
00002222                            PalWhite_Loop:
00002222 30C1                       		move.w	d1,(a0)+
00002224 51C8 FFFC                  		dbf	d0,PalWhite_Loop
00002228 383C 0015                  		move.w	#$15,d4
0000222C                            
0000222C                            loc_1EF4:
0000222C 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00002232 6100 0000                  		bsr.w	DelayProgram
00002236 6100                       		bsr.s	Pal_WhiteToBlack
00002238 6100 F522                  		bsr.w	RunPLC_RAM
0000223C 51CC FFEE                  		dbf	d4,loc_1EF4
00002240 4E75                       		rts	
00002242                            ; End of function Pal_MakeWhite
00002242                            
00002242                            
00002242                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002242                            
00002242                            
00002242                            Pal_WhiteToBlack:			; XREF: Pal_MakeWhite
00002242 7000                       		moveq	#0,d0
00002244 41F8 FB00                  		lea	($FFFFFB00).w,a0
00002248 43F8 FB80                  		lea	($FFFFFB80).w,a1
0000224C 1038 F626                  		move.b	($FFFFF626).w,d0
00002250 D0C0                       		adda.w	d0,a0
00002252 D2C0                       		adda.w	d0,a1
00002254 1038 F627                  		move.b	($FFFFF627).w,d0
00002258                            
00002258                            loc_1F20:
00002258 6100                       		bsr.s	Pal_DecColor2
0000225A 51C8 FFFC                  		dbf	d0,loc_1F20
0000225E                            
0000225E 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00002264 6600                       		bne.s	locret_1F4A
00002266 7000                       		moveq	#0,d0
00002268 41F8 FA80                  		lea	($FFFFFA80).w,a0
0000226C 43F8 FA00                  		lea	($FFFFFA00).w,a1
00002270 1038 F626                  		move.b	($FFFFF626).w,d0
00002274 D0C0                       		adda.w	d0,a0
00002276 D2C0                       		adda.w	d0,a1
00002278 1038 F627                  		move.b	($FFFFF627).w,d0
0000227C                            
0000227C                            loc_1F44:
0000227C 6100                       		bsr.s	Pal_DecColor2
0000227E 51C8 FFFC                  		dbf	d0,loc_1F44
00002282                            
00002282                            locret_1F4A:
00002282 4E75                       		rts	
00002284                            ; End of function Pal_WhiteToBlack
00002284                            
00002284                            
00002284                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002284                            
00002284                            
00002284                            Pal_DecColor2:				; XREF: Pal_WhiteToBlack
00002284 3419                       		move.w	(a1)+,d2
00002286 3610                       		move.w	(a0),d3
00002288 B642                       		cmp.w	d2,d3
0000228A 6700                       		beq.s	loc_1F78
0000228C 3203                       		move.w	d3,d1
0000228E 0441 0200                  		subi.w	#$200,d1	; decrease blue	value
00002292 6500                       		bcs.s	loc_1F64
00002294 B242                       		cmp.w	d2,d1
00002296 6500                       		bcs.s	loc_1F64
00002298 30C1                       		move.w	d1,(a0)+
0000229A 4E75                       		rts	
0000229C                            ; ===========================================================================
0000229C                            
0000229C                            loc_1F64:				; XREF: Pal_DecColor2
0000229C 3203                       		move.w	d3,d1
0000229E 0441 0020                  		subi.w	#$20,d1		; decrease green value
000022A2 6500                       		bcs.s	loc_1F74
000022A4 B242                       		cmp.w	d2,d1
000022A6 6500                       		bcs.s	loc_1F74
000022A8 30C1                       		move.w	d1,(a0)+
000022AA 4E75                       		rts	
000022AC                            ; ===========================================================================
000022AC                            
000022AC                            loc_1F74:				; XREF: loc_1F64
000022AC 5558                       		subq.w	#2,(a0)+	; decrease red value
000022AE 4E75                       		rts	
000022B0                            ; ===========================================================================
000022B0                            
000022B0                            loc_1F78:				; XREF: Pal_DecColor2
000022B0 5448                       		addq.w	#2,a0
000022B2 4E75                       		rts	
000022B4                            ; End of function Pal_DecColor2
000022B4                            
000022B4                            ; ---------------------------------------------------------------------------
000022B4                            ; Subroutine to	make a white flash when	you enter a special stage
000022B4                            ; ---------------------------------------------------------------------------
000022B4                            
000022B4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000022B4                            
000022B4                            
000022B4                            Pal_MakeFlash:				; XREF: SpecialStage
000022B4 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
000022BA 383C 0015                  		move.w	#$15,d4
000022BE                            
000022BE                            loc_1F86:
000022BE 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
000022C4 6100 0000                  		bsr.w	DelayProgram
000022C8 6100                       		bsr.s	Pal_ToWhite
000022CA 6100 F490                  		bsr.w	RunPLC_RAM
000022CE 51CC FFEE                  		dbf	d4,loc_1F86
000022D2 4E75                       		rts	
000022D4                            ; End of function Pal_MakeFlash
000022D4                            
000022D4                            
000022D4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000022D4                            
000022D4                            
000022D4                            Pal_ToWhite:				; XREF: Pal_MakeFlash
000022D4 7000                       		moveq	#0,d0
000022D6 41F8 FB00                  		lea	($FFFFFB00).w,a0
000022DA 1038 F626                  		move.b	($FFFFF626).w,d0
000022DE D0C0                       		adda.w	d0,a0
000022E0 1038 F627                  		move.b	($FFFFF627).w,d0
000022E4                            
000022E4                            loc_1FAC:
000022E4 6100                       		bsr.s	Pal_AddColor2
000022E6 51C8 FFFC                  		dbf	d0,loc_1FAC
000022EA 7000                       		moveq	#0,d0
000022EC 41F8 FA80                  		lea	($FFFFFA80).w,a0
000022F0 1038 F626                  		move.b	($FFFFF626).w,d0
000022F4 D0C0                       		adda.w	d0,a0
000022F6 1038 F627                  		move.b	($FFFFF627).w,d0
000022FA                            
000022FA                            loc_1FC2:
000022FA 6100                       		bsr.s	Pal_AddColor2
000022FC 51C8 FFFC                  		dbf	d0,loc_1FC2
00002300 4E75                       		rts	
00002302                            ; End of function Pal_ToWhite
00002302                            
00002302                            
00002302                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002302                            
00002302                            
00002302                            Pal_AddColor2:				; XREF: Pal_ToWhite
00002302 3410                       		move.w	(a0),d2
00002304 0C42 0EEE                  		cmpi.w	#$EEE,d2
00002308 6700                       		beq.s	loc_2006
0000230A 3202                       		move.w	d2,d1
0000230C 0241 000E                  		andi.w	#$E,d1
00002310 0C41 000E                  		cmpi.w	#$E,d1
00002314 6700                       		beq.s	loc_1FE2
00002316 5458                       		addq.w	#2,(a0)+	; increase red value
00002318 4E75                       		rts	
0000231A                            ; ===========================================================================
0000231A                            
0000231A                            loc_1FE2:				; XREF: Pal_AddColor2
0000231A 3202                       		move.w	d2,d1
0000231C 0241 00E0                  		andi.w	#$E0,d1
00002320 0C41 00E0                  		cmpi.w	#$E0,d1
00002324 6700                       		beq.s	loc_1FF4
00002326 0658 0020                  		addi.w	#$20,(a0)+	; increase green value
0000232A 4E75                       		rts	
0000232C                            ; ===========================================================================
0000232C                            
0000232C                            loc_1FF4:				; XREF: loc_1FE2
0000232C 3202                       		move.w	d2,d1
0000232E 0241 0E00                  		andi.w	#$E00,d1
00002332 0C41 0E00                  		cmpi.w	#$E00,d1
00002336 6700                       		beq.s	loc_2006
00002338 0658 0200                  		addi.w	#$200,(a0)+	; increase blue	value
0000233C 4E75                       		rts	
0000233E                            ; ===========================================================================
0000233E                            
0000233E                            loc_2006:				; XREF: Pal_AddColor2
0000233E 5448                       		addq.w	#2,a0
00002340 4E75                       		rts	
00002342                            ; End of function Pal_AddColor2
00002342                            
00002342                            ; ---------------------------------------------------------------------------
00002342                            ; Pallet cycling routine - Sega	logo
00002342                            ; ---------------------------------------------------------------------------
00002342                            
00002342                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002342                            
00002342                            
00002342                            PalCycle_Sega:				; XREF: SegaScreen
00002342 4A38 F635                  		tst.b	($FFFFF635).w
00002346 6600                       		bne.s	loc_206A
00002348 43F8 FB20                  		lea	($FFFFFB20).w,a1
0000234C 41F9 0000 0000             		lea	(Pal_Sega1).l,a0
00002352 7205                       		moveq	#5,d1
00002354 3038 F632                  		move.w	($FFFFF632).w,d0
00002358                            
00002358                            loc_2020:
00002358 6A00                       		bpl.s	loc_202A
0000235A 5448                       		addq.w	#2,a0
0000235C 5341                       		subq.w	#1,d1
0000235E 5440                       		addq.w	#2,d0
00002360 60F6                       		bra.s	loc_2020
00002362                            ; ===========================================================================
00002362                            
00002362                            loc_202A:				; XREF: PalCycle_Sega
00002362 3400                       		move.w	d0,d2
00002364 0242 001E                  		andi.w	#$1E,d2
00002368 6600                       		bne.s	loc_2034
0000236A 5440                       		addq.w	#2,d0
0000236C                            
0000236C                            loc_2034:
0000236C 0C40 0060                  		cmpi.w	#$60,d0
00002370 6400                       		bcc.s	loc_203E
00002372 3398 0000                  		move.w	(a0)+,(a1,d0.w)
00002376                            
00002376                            loc_203E:
00002376 5440                       		addq.w	#2,d0
00002378 51C9 FFE8                  		dbf	d1,loc_202A
0000237C 3038 F632                  		move.w	($FFFFF632).w,d0
00002380 5440                       		addq.w	#2,d0
00002382 3400                       		move.w	d0,d2
00002384 0242 001E                  		andi.w	#$1E,d2
00002388 6600                       		bne.s	loc_2054
0000238A 5440                       		addq.w	#2,d0
0000238C                            
0000238C                            loc_2054:
0000238C 0C40 0064                  		cmpi.w	#$64,d0
00002390 6D00                       		blt.s	loc_2062
00002392 31FC 0401 F634             		move.w	#$401,($FFFFF634).w
00002398 70F4                       		moveq	#-$C,d0
0000239A                            
0000239A                            loc_2062:
0000239A 31C0 F632                  		move.w	d0,($FFFFF632).w
0000239E 7001                       		moveq	#1,d0
000023A0 4E75                       		rts	
000023A2                            ; ===========================================================================
000023A2                            
000023A2                            loc_206A:				; XREF: loc_202A
000023A2 5338 F634                  		subq.b	#1,($FFFFF634).w
000023A6 6A00                       		bpl.s	loc_20BC
000023A8 11FC 0004 F634             		move.b	#4,($FFFFF634).w
000023AE 3038 F632                  		move.w	($FFFFF632).w,d0
000023B2 0640 000C                  		addi.w	#$C,d0
000023B6 0C40 0030                  		cmpi.w	#$30,d0
000023BA 6500                       		bcs.s	loc_2088
000023BC 7000                       		moveq	#0,d0
000023BE 4E75                       		rts	
000023C0                            ; ===========================================================================
000023C0                            
000023C0                            loc_2088:				; XREF: loc_206A
000023C0 31C0 F632                  		move.w	d0,($FFFFF632).w
000023C4 41F9 0000 0000             		lea	(Pal_Sega2).l,a0
000023CA 41F0 0000                  		lea	(a0,d0.w),a0
000023CE 43F8 FB04                  		lea	($FFFFFB04).w,a1
000023D2 22D8                       		move.l	(a0)+,(a1)+
000023D4 22D8                       		move.l	(a0)+,(a1)+
000023D6 3298                       		move.w	(a0)+,(a1)
000023D8 43F8 FB20                  		lea	($FFFFFB20).w,a1
000023DC 7000                       		moveq	#0,d0
000023DE 722C                       		moveq	#$2C,d1
000023E0                            
000023E0                            loc_20A8:
000023E0 3400                       		move.w	d0,d2
000023E2 0242 001E                  		andi.w	#$1E,d2
000023E6 6600                       		bne.s	loc_20B2
000023E8 5440                       		addq.w	#2,d0
000023EA                            
000023EA                            loc_20B2:
000023EA 3390 0000                  		move.w	(a0),(a1,d0.w)
000023EE 5440                       		addq.w	#2,d0
000023F0 51C9 FFEE                  		dbf	d1,loc_20A8
000023F4                            
000023F4                            loc_20BC:
000023F4 7001                       		moveq	#1,d0
000023F6 4E75                       		rts	
000023F8                            ; End of function PalCycle_Sega
000023F8                            
000023F8                            ; ===========================================================================
000023F8                            
000023F8                            Pal_Sega1:	incbin	pallet\sega1.bin
00002404                            Pal_Sega2:	incbin	pallet\sega2.bin
00002434                            	
00002434                            ; ---------------------------------------------------------------------------
00002434                            ; Subroutines to load pallets
00002434                            ; ---------------------------------------------------------------------------
00002434                            
00002434                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
00002434                            
00002434                            PalLoad1:
00002434 1238 FE11                  		move.b ($FFFFFE11),d1
00002438 43F9 0000 0000             		lea (PalPointers).l,a1
0000243E 0C01 0000                  		cmp.b #0,d1
00002442 6700 0000                  		beq.w PalLoad1_Continue
00002446 43F9 0000 0000             		lea (PalPointers2).l,a1
0000244C 0C01 0001                  		cmp.b #1,d1
00002450 6700 0000                  		beq.w PalLoad1_Continue
00002454 43F9 0000 0000             		lea (PalPointers3).l,a1
0000245A                            
0000245A                            PalLoad1_Continue:
0000245A E748                       		lsl.w #3,d0
0000245C D2C0                       		adda.w d0,a1
0000245E 2459                       		movea.l (a1)+,a2
00002460 3659                       		movea.w (a1)+,a3
00002462 D6FC 0080                  		adda.w #$80,a3
00002466 3E19                       		move.w (a1)+,d7
00002468                            
00002468                            loc_2110:
00002468 26DA                       		move.l (a2)+,(a3)+
0000246A 51CF FFFC                  		dbf d7,loc_2110
0000246E 4E75                       		rts
00002470                             ; End of function PalLoad1
00002470                            
00002470                            
00002470                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
00002470                            
00002470                            PalLoad2:
00002470 1238 FE11                  		move.b ($FFFFFE11),d1
00002474 43F9 0000 0000             		lea (PalPointers).l,a1
0000247A 0C01 0000                  		cmp.b #0,d1
0000247E 6700 0000                  		beq.w PalLoad2_Continue
00002482 43F9 0000 0000             		lea (PalPointers2).l,a1
00002488 0C01 0001                  		cmp.b #1,d1
0000248C 6700 0000                  		beq.w PalLoad2_Continue
00002490 43F9 0000 0000             		lea (PalPointers3).l,a1
00002496                            
00002496                            
00002496                            PalLoad2_Continue:
00002496 E748                       		lsl.w #3,d0
00002498 D2C0                       		adda.w d0,a1
0000249A 2459                       		movea.l (a1)+,a2
0000249C 3659                       		movea.w (a1)+,a3
0000249E 3E19                       		move.w (a1)+,d7
000024A0                            
000024A0                            loc_2128:
000024A0 26DA                       		move.l (a2)+,(a3)+
000024A2 51CF FFFC                  		dbf d7,loc_2128
000024A6 4E75                       		rts
000024A8                            ; End of function PalLoad2
000024A8                            
000024A8                            
000024A8                            ; ---------------------------------------------------------------------------
000024A8                            ; Underwater pallet loading subroutine
000024A8                            ; ---------------------------------------------------------------------------
000024A8                            
000024A8                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
000024A8                            
000024A8                            PalLoad3_Water:
000024A8 1238 FE11                  		move.b ($FFFFFE11),d1
000024AC 43F9 0000 0000             		lea (PalPointers).l,a1
000024B2 0C01 0000                  		cmp.b #0,d1
000024B6 6700 0000                  		beq.w PalLoad3_Continue
000024BA 43F9 0000 0000             		lea (PalPointers2).l,a1
000024C0 0C01 0001                  		cmp.b #1,d1
000024C4 6700 0000                  		beq.w PalLoad3_Continue
000024C8 43F9 0000 0000             		lea (PalPointers3).l,a1
000024CE                            
000024CE                            PalLoad3_Continue:
000024CE E748                       		lsl.w #3,d0
000024D0 D2C0                       		adda.w d0,a1
000024D2 2459                       		movea.l (a1)+,a2
000024D4 3659                       		movea.w (a1)+,a3
000024D6 96FC 0080                  		suba.w #$80,a3
000024DA 3E19                       		move.w (a1)+,d7
000024DC                            
000024DC                            loc_2144:
000024DC 26DA                       		move.l (a2)+,(a3)+
000024DE 51CF FFFC                  		dbf d7,loc_2144
000024E2 4E75                       		rts
000024E4                            ; End of function PalLoad3_Water
000024E4                            
000024E4                            
000024E4                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
000024E4                            
000024E4                            
000024E4                            PalLoad4_Water:
000024E4 1238 FE11                  		move.b ($FFFFFE11),d1
000024E8 43F9 0000 0000             		lea (PalPointers).l,a1
000024EE 0C01 0000                  		cmp.b #0,d1
000024F2 6700 0000                  		beq.w PalLoad4_Continue
000024F6 43F9 0000 0000             		lea (PalPointers2).l,a1
000024FC 0C01 0001                  		cmp.b #1,d1
00002500 6700 0000                  		beq.w PalLoad4_Continue
00002504 43F9 0000 0000             		lea (PalPointers3).l,a1
0000250A                            
0000250A                            PalLoad4_Continue:
0000250A E748                       		lsl.w #3,d0
0000250C D2C0                       		adda.w d0,a1
0000250E 2459                       		movea.l (a1)+,a2
00002510 3659                       		movea.w (a1)+,a3
00002512 96FC 0100                  		suba.w #$100,a3
00002516 3E19                       		move.w (a1)+,d7
00002518                            loc_2160:
00002518 26DA                       		move.l (a2)+,(a3)+
0000251A 51CF FFFC                  		dbf d7,loc_2160
0000251E 4E75                       		rts
00002520                             ; End of function PalLoad4_Water
00002520                            
00002520                            ; ===========================================================================
00002520                            ; ---------------------------------------------------------------------------
00002520                            ; Pallet pointers
00002520                            ; ---------------------------------------------------------------------------
00002520                            PalPointers:
00002520                            	include "_inc\Pallet pointers.asm"
00002520                            ; ---------------------------------------------------------------------------
00002520                            ; Pallet pointers
00002520                            ; ---------------------------------------------------------------------------
00002520 0000 0000                  	dc.l Pal_SegaBG		; pallet address
00002524 FB00                       	dc.w $FB00		; RAM address
00002526 001F                       	dc.w $1F		; (pallet length / 2) - 1
00002528 0000 0000                  	dc.l Pal_Title
0000252C FB00                       	dc.w $FB00
0000252E 001F                       	dc.w $1F
00002530 0000 0000                  	dc.l Pal_LevelSel
00002534 FB00                       	dc.w $FB00
00002536 001F                       	dc.w $1F
00002538 0000 0000                  	dc.l Pal_Sonic
0000253C FB00                       	dc.w $FB00
0000253E 0007                       	dc.w 7
00002540 0000 0000                  	dc.l Pal_GHZ
00002544 FB20                       	dc.w $FB20
00002546 0017                       	dc.w $17
00002548 0000 0000                  	dc.l Pal_LZ
0000254C FB20                       	dc.w $FB20
0000254E 0017                       	dc.w $17
00002550 0000 0000                  	dc.l Pal_MZ
00002554 FB20                       	dc.w $FB20
00002556 0017                       	dc.w $17
00002558 0000 0000                  	dc.l Pal_SLZ
0000255C FB20                       	dc.w $FB20
0000255E 0017                       	dc.w $17
00002560 0000 0000                  	dc.l Pal_SYZ
00002564 FB20                       	dc.w $FB20
00002566 0017                       	dc.w $17
00002568 0000 0000                  	dc.l Pal_SBZ1
0000256C FB20                       	dc.w $FB20
0000256E 0017                       	dc.w $17
00002570 0000 0000                  	dc.l Pal_Special
00002574 FB00                       	dc.w $FB00
00002576 001F                       	dc.w $1F
00002578 0000 0000                  	dc.l Pal_LZWater
0000257C FB00                       	dc.w $FB00
0000257E 001F                       	dc.w $1F
00002580 0000 0000                  	dc.l Pal_SBZ3
00002584 FB20                       	dc.w $FB20
00002586 0017                       	dc.w $17
00002588 0000 0000                  	dc.l Pal_SBZ3Water
0000258C FB00                       	dc.w $FB00
0000258E 001F                       	dc.w $1F
00002590 0000 0000                  	dc.l Pal_SBZ2
00002594 FB20                       	dc.w $FB20
00002596 0017                       	dc.w $17
00002598 0000 0000                  	dc.l Pal_LZSonWater
0000259C FB00                       	dc.w $FB00
0000259E 0007                       	dc.w 7
000025A0 0000 0000                  	dc.l Pal_SBZ3SonWat
000025A4 FB00                       	dc.w $FB00
000025A6 0007                       	dc.w 7
000025A8 0000 0000                  	dc.l Pal_SpeResult
000025AC FB00                       	dc.w $FB00
000025AE 001F                       	dc.w $1F
000025B0 0000 0000                  	dc.l Pal_SpeContinue
000025B4 FB00                       	dc.w $FB00
000025B6 000F                       	dc.w $F
000025B8 0000 0000                  	dc.l Pal_Ending
000025BC FB00                       	dc.w $FB00
000025BE 001F                       	dc.w $1F
000025C0 0000 0000                  	dc.l Menu_Palette; pallet address
000025C4 FB00                       	dc.w $FB00	; RAM address
000025C6 001F                       	dc.w $1F	; (pallet length / 2) - 1	
000025C6 001F                       	dc.w $1F	; (pallet length / 2) - 1	
000025C8                            PalPointers2:
000025C8                            		include "_inc\Pallet pointers2.asm"
000025C8                            	
000025C8                            ; ---------------------------------------------------------------------------
000025C8                            ; Pallet pointers 2
000025C8                            ; ---------------------------------------------------------------------------
000025C8 0000 0000                  	dc.l Pal_SegaBG		; pallet address
000025CC FB00                       	dc.w $FB00		; RAM address
000025CE 001F                       	dc.w $1F		; (pallet length / 2) - 1
000025D0 0000 0000                  	dc.l Pal_Title
000025D4 FB00                       	dc.w $FB00
000025D6 001F                       	dc.w $1F
000025D8 0000 0000                  	dc.l Pal_LevelSel
000025DC FB00                       	dc.w $FB00
000025DE 001F                       	dc.w $1F
000025E0 0000 0000                  	dc.l Pal_Sonic
000025E4 FB00                       	dc.w $FB00
000025E6 0007                       	dc.w 7
000025E8 0000 0000                  	dc.l Pal_GHZ2
000025EC FB20                       	dc.w $FB20
000025EE 0017                       	dc.w $17
000025F0 0000 0000                  	dc.l Pal_LZ2
000025F4 FB20                       	dc.w $FB20
000025F6 0017                       	dc.w $17
000025F8 0000 0000                  	dc.l Pal_MZ2
000025FC FB20                       	dc.w $FB20
000025FE 0017                       	dc.w $17
00002600 0000 0000                  	dc.l Pal_SLZ2
00002604 FB20                       	dc.w $FB20
00002606 0017                       	dc.w $17
00002608 0000 0000                  	dc.l Pal_SYZ2
0000260C FB20                       	dc.w $FB20
0000260E 0017                       	dc.w $17
00002610 0000 0000                  	dc.l Pal_SBZ1
00002614 FB20                       	dc.w $FB20
00002616 0017                       	dc.w $17
00002618 0000 0000                  	dc.l Pal_Special
0000261C FB00                       	dc.w $FB00
0000261E 001F                       	dc.w $1F
00002620 0000 0000                  	dc.l Pal_LZWater2
00002624 FB00                       	dc.w $FB00
00002626 001F                       	dc.w $1F
00002628 0000 0000                  	dc.l Pal_SBZ3
0000262C FB20                       	dc.w $FB20
0000262E 0017                       	dc.w $17
00002630 0000 0000                  	dc.l Pal_SBZ3Water
00002634 FB00                       	dc.w $FB00
00002636 001F                       	dc.w $1F
00002638 0000 0000                  	dc.l Pal_SBZ2
0000263C FB20                       	dc.w $FB20
0000263E 0017                       	dc.w $17
00002640 0000 0000                  	dc.l Pal_LZSonWater2
00002644 FB00                       	dc.w $FB00
00002646 0007                       	dc.w 7
00002648 0000 0000                  	dc.l Pal_SBZ3SonWat
0000264C FB00                       	dc.w $FB00
0000264E 0007                       	dc.w 7
00002650 0000 0000                  	dc.l Pal_SpeResult
00002654 FB00                       	dc.w $FB00
00002656 001F                       	dc.w $1F
00002658 0000 0000                  	dc.l Pal_SpeContinue
0000265C FB00                       	dc.w $FB00
0000265E 000F                       	dc.w $F
00002660 0000 0000                  	dc.l Pal_Ending
00002664 FB00                       	dc.w $FB00
00002666 001F                       	dc.w $1F
00002666 001F                       	dc.w $1F
00002668                            PalPointers3:
00002668                            		include "_inc\Pallet pointers3.asm"
00002668                            	
00002668                            ; ---------------------------------------------------------------------------
00002668                            ; Pallet pointers 3
00002668                            ; ---------------------------------------------------------------------------
00002668 0000 0000                  	dc.l Pal_SegaBG		; pallet address
0000266C FB00                       	dc.w $FB00		; RAM address
0000266E 001F                       	dc.w $1F		; (pallet length / 2) - 1
00002670 0000 0000                  	dc.l Pal_Title
00002674 FB00                       	dc.w $FB00
00002676 001F                       	dc.w $1F
00002678 0000 0000                  	dc.l Pal_LevelSel
0000267C FB00                       	dc.w $FB00
0000267E 001F                       	dc.w $1F
00002680 0000 0000                  	dc.l Pal_Sonic
00002684 FB00                       	dc.w $FB00
00002686 0007                       	dc.w 7
00002688 0000 0000                  	dc.l Pal_GHZ3
0000268C FB20                       	dc.w $FB20
0000268E 0017                       	dc.w $17
00002690 0000 0000                  	dc.l Pal_LZ3
00002694 FB20                       	dc.w $FB20
00002696 0017                       	dc.w $17
00002698 0000 0000                  	dc.l Pal_MZ3
0000269C FB20                       	dc.w $FB20
0000269E 0017                       	dc.w $17
000026A0 0000 0000                  	dc.l Pal_SLZ3
000026A4 FB20                       	dc.w $FB20
000026A6 0017                       	dc.w $17
000026A8 0000 0000                  	dc.l Pal_SYZ3
000026AC FB20                       	dc.w $FB20
000026AE 0017                       	dc.w $17
000026B0 0000 0000                  	dc.l Pal_SBZ1
000026B4 FB20                       	dc.w $FB20
000026B6 0017                       	dc.w $17
000026B8 0000 0000                  	dc.l Pal_Special
000026BC FB00                       	dc.w $FB00
000026BE 001F                       	dc.w $1F
000026C0 0000 0000                  	dc.l Pal_LZWater3
000026C4 FB00                       	dc.w $FB00
000026C6 001F                       	dc.w $1F
000026C8 0000 0000                  	dc.l Pal_SBZ3
000026CC FB20                       	dc.w $FB20
000026CE 0017                       	dc.w $17
000026D0 0000 0000                  	dc.l Pal_SBZ3Water
000026D4 FB00                       	dc.w $FB00
000026D6 001F                       	dc.w $1F
000026D8 0000 0000                  	dc.l Pal_SBZ2
000026DC FB20                       	dc.w $FB20
000026DE 0017                       	dc.w $17
000026E0 0000 0000                  	dc.l Pal_LZSonWater3
000026E4 FB00                       	dc.w $FB00
000026E6 0007                       	dc.w 7
000026E8 0000 0000                  	dc.l Pal_SBZ3SonWat
000026EC FB00                       	dc.w $FB00
000026EE 0007                       	dc.w 7
000026F0 0000 0000                  	dc.l Pal_SpeResult
000026F4 FB00                       	dc.w $FB00
000026F6 001F                       	dc.w $1F
000026F8 0000 0000                  	dc.l Pal_SpeContinue
000026FC FB00                       	dc.w $FB00
000026FE 000F                       	dc.w $F
00002700 0000 0000                  	dc.l Pal_Ending
00002704 FB00                       	dc.w $FB00
00002706 001F                       	dc.w $1F
00002706 001F                       	dc.w $1F
00002708                            ; ---------------------------------------------------------------------------
00002708                            ; Pallet data
00002708                            ; ---------------------------------------------------------------------------
00002708                            Pal_SegaBG:	incbin	pallet\sega_bg.bin
00002788                            Pal_Title:	incbin	pallet\title.bin
00002808                            Pal_LevelSel:	incbin	pallet\levelsel.bin
00002888                            Pal_Sonic:	incbin	pallet\sonic.bin
000028A8                            Pal_GHZ:	incbin	pallet\ghz.bin
00002908                            Pal_GHZ2: incbin pallet\ghz2.bin
00002968                            Pal_GHZ3: incbin pallet\ghz3.bin
000029C8                            Pal_LZ:		incbin	pallet\lz.bin
00002A28                            Pal_LZ2: incbin pallet\lz2.bin
00002A88                            Pal_LZ3: incbin pallet\lz3.bin
00002AE8                            Pal_LZWater: incbin pallet\lz_uw.bin; LZ underwater pallets
00002B68                            Pal_LZWater2: incbin pallet\lz_uw2.bin; LZ underwater pallets
00002BE8                            Pal_LZWater3: incbin pallet\lz_uw3.bin; LZ underwater pallets
00002C68                            Pal_MZ:		incbin	pallet\mz.bin
00002CC8                            Pal_MZ2: incbin pallet\mz2.bin
00002D28                            Pal_MZ3: incbin pallet\mz3.bin
00002D88                            Pal_SLZ:	incbin	pallet\slz.bin
00002DE8                            Pal_SLZ2: incbin pallet\slz2.bin
00002E48                            Pal_SLZ3: incbin pallet\slz3.bin
00002EA8                            Pal_SYZ:	incbin	pallet\syz.bin
00002F08                            Pal_SYZ2: incbin pallet\syz2.bin
00002F68                            Pal_SYZ3: incbin pallet\syz3.bin
00002FC8                            Pal_SBZ1:	incbin	pallet\sbz_act1.bin	; SBZ act 1 pallets
00003028                            Pal_SBZ2:	incbin	pallet\sbz_act2.bin	; SBZ act 2 & Final Zone pallets
00003088                            Pal_Special:	incbin	pallet\special.bin	; special stage pallets
00003108                            Pal_SBZ3:	incbin	pallet\sbz_act3.bin	; SBZ act 3 pallets
00003168                            Pal_SBZ3Water:	incbin	pallet\sbz_a3uw.bin	; SBZ act 3 (underwater) pallets
000031E8                            Pal_LZSonWater:	incbin	pallet\son_lzuw.bin	; Sonic (underwater in LZ) pallet
00003208                            Pal_LZSonWater2:	incbin	pallet\son_lzuw2.bin	; Sonic (underwater in LZ) pallet
00003228                            Pal_LZSonWater3:	incbin	pallet\son_lzuw3.bin	; Sonic (underwater in LZ) pallet
00003248                            Pal_SBZ3SonWat:	incbin	pallet\son_sbzu.bin	; Sonic (underwater in SBZ act 3) pallet
00003268                            Pal_SpeResult:	incbin	pallet\ssresult.bin	; special stage results screen pallets
000032E8                            Pal_SpeContinue:incbin	pallet\sscontin.bin	; special stage results screen continue pallet
00003328                            Pal_Ending:	incbin	pallet\ending.bin	; ending sequence pallets
000033A8                            
000033A8                            ; ---------------------------------------------------------------------------
000033A8                            ; Subroutine to	delay the program by ($FFFFF62A) frames
000033A8                            ; ---------------------------------------------------------------------------
000033A8                            
000033A8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000033A8                            
000033A8                            
000033A8                            DelayProgram:				; XREF: PauseGame
000033A8 46FC 2300                  		move	#$2300,sr
000033AC                            
000033AC                            loc_29AC:
000033AC 4A38 F62A                  		tst.b	($FFFFF62A).w
000033B0 66FA                       		bne.s	loc_29AC
000033B2 4E75                       		rts	
000033B4                            ; End of function DelayProgram
000033B4                            
000033B4                            ; ---------------------------------------------------------------------------
000033B4                            ; Subroutine to	generate a pseudo-random number	in d0
000033B4                            ; ---------------------------------------------------------------------------
000033B4                            
000033B4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000033B4                            
000033B4                            
000033B4                            RandomNumber:
000033B4 2238 F636                  		move.l	($FFFFF636).w,d1
000033B8 6600                       		bne.s	loc_29C0
000033BA 223C 2A6D 365A             		move.l	#$2A6D365A,d1
000033C0                            
000033C0                            loc_29C0:
000033C0 2001                       		move.l	d1,d0
000033C2 E581                       		asl.l	#2,d1
000033C4 D280                       		add.l	d0,d1
000033C6 E781                       		asl.l	#3,d1
000033C8 D280                       		add.l	d0,d1
000033CA 3001                       		move.w	d1,d0
000033CC 4841                       		swap	d1
000033CE D041                       		add.w	d1,d0
000033D0 3200                       		move.w	d0,d1
000033D2 4841                       		swap	d1
000033D4 21C1 F636                  		move.l	d1,($FFFFF636).w
000033D8 4E75                       		rts	
000033DA                            ; End of function RandomNumber
000033DA                            
000033DA                            
000033DA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000033DA                            
000033DA                            
000033DA                            CalcSine:				; XREF: SS_BGAnimate; et al
000033DA 0240 00FF                  		andi.w	#$FF,d0
000033DE D040                       		add.w	d0,d0
000033E0 0640 0080                  		addi.w	#$80,d0
000033E4 323B 0000                  		move.w	Sine_Data(pc,d0.w),d1
000033E8 0440 0080                  		subi.w	#$80,d0
000033EC 303B 0000                  		move.w	Sine_Data(pc,d0.w),d0
000033F0 4E75                       		rts	
000033F2                            ; End of function CalcSine
000033F2                            
000033F2                            ; ===========================================================================
000033F2                            
000033F2                            Sine_Data:	incbin	misc\sinewave.bin	; values for a 360� sine wave
00003672                            
00003672                            ; ===========================================================================
00003672 48E7 6000                  		movem.l	d1-d2,-(sp)
00003676 3200                       		move.w	d0,d1
00003678 4841                       		swap	d1
0000367A 7000                       		moveq	#0,d0
0000367C 3200                       		move.w	d0,d1
0000367E 7407                       		moveq	#7,d2
00003680                            
00003680                            loc_2C80:
00003680 E599                       		rol.l	#2,d1
00003682 D040                       		add.w	d0,d0
00003684 5240                       		addq.w	#1,d0
00003686 9240                       		sub.w	d0,d1
00003688 6400                       		bcc.s	loc_2C9A
0000368A D240                       		add.w	d0,d1
0000368C 5340                       		subq.w	#1,d0
0000368E 51CA FFF0                  		dbf	d2,loc_2C80
00003692 E248                       		lsr.w	#1,d0
00003694 4CDF 0006                  		movem.l	(sp)+,d1-d2
00003698 4E75                       		rts	
0000369A                            ; ===========================================================================
0000369A                            
0000369A                            loc_2C9A:
0000369A 5240                       		addq.w	#1,d0
0000369C 51CA FFE2                  		dbf	d2,loc_2C80
000036A0 E248                       		lsr.w	#1,d0
000036A2 4CDF 0006                  		movem.l	(sp)+,d1-d2
000036A6 4E75                       		rts	
000036A8                            
000036A8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000036A8                            
000036A8                            
000036A8                            CalcAngle:
000036A8 48E7 1800                  		movem.l	d3-d4,-(sp)
000036AC 7600                       		moveq	#0,d3
000036AE 7800                       		moveq	#0,d4
000036B0 3601                       		move.w	d1,d3
000036B2 3802                       		move.w	d2,d4
000036B4 8843                       		or.w	d3,d4
000036B6 6700                       		beq.s	loc_2D04
000036B8 3802                       		move.w	d2,d4
000036BA 4A43                       		tst.w	d3
000036BC 6A00 0000                  		bpl.w	loc_2CC2
000036C0 4443                       		neg.w	d3
000036C2                            
000036C2                            loc_2CC2:
000036C2 4A44                       		tst.w	d4
000036C4 6A00 0000                  		bpl.w	loc_2CCA
000036C8 4444                       		neg.w	d4
000036CA                            
000036CA                            loc_2CCA:
000036CA B843                       		cmp.w	d3,d4
000036CC 6400 0000                  		bcc.w	loc_2CDC
000036D0 E18C                       		lsl.l	#8,d4
000036D2 88C3                       		divu.w	d3,d4
000036D4 7000                       		moveq	#0,d0
000036D6 103B 4000                  		move.b	Angle_Data(pc,d4.w),d0
000036DA 6000                       		bra.s	loc_2CE6
000036DC                            ; ===========================================================================
000036DC                            
000036DC                            loc_2CDC:				; XREF: CalcAngle
000036DC E18B                       		lsl.l	#8,d3
000036DE 86C4                       		divu.w	d4,d3
000036E0 7040                       		moveq	#$40,d0
000036E2 903B 3000                  		sub.b	Angle_Data(pc,d3.w),d0
000036E6                            
000036E6                            loc_2CE6:
000036E6 4A41                       		tst.w	d1
000036E8 6A00 0000                  		bpl.w	loc_2CF2
000036EC 4440                       		neg.w	d0
000036EE 0640 0080                  		addi.w	#$80,d0
000036F2                            
000036F2                            loc_2CF2:
000036F2 4A42                       		tst.w	d2
000036F4 6A00 0000                  		bpl.w	loc_2CFE
000036F8 4440                       		neg.w	d0
000036FA 0640 0100                  		addi.w	#$100,d0
000036FE                            
000036FE                            loc_2CFE:
000036FE 4CDF 0018                  		movem.l	(sp)+,d3-d4
00003702 4E75                       		rts	
00003704                            ; ===========================================================================
00003704                            
00003704                            loc_2D04:				; XREF: CalcAngle
00003704 303C 0040                  		move.w	#$40,d0
00003708 4CDF 0018                  		movem.l	(sp)+,d3-d4
0000370C 4E75                       		rts	
0000370E                            ; End of function CalcAngle
0000370E                            
0000370E                            ; ===========================================================================
0000370E                            
0000370E                            Angle_Data:	incbin	misc\angles.bin
00003810                            
00003810                            ; ===========================================================================
00003810                            
00003810                            ; ---------------------------------------------------------------------------
00003810                            ; Sega screen
00003810                            ; ---------------------------------------------------------------------------
00003810                            
00003810                            SegaScreen:				; XREF: GameModeArray
00003810 103C 00E4                  		move.b	#$E4,d0
00003814 6100 DC66                  		bsr.w	PlaySound_Special ; stop music
00003818 6100 DF34                  		bsr.w	ClearPLC
0000381C 6100 EA96                  		bsr.w	Pal_MakeFlash
00003820 4DF9 00C0 0004             		lea	($C00004).l,a6
00003826 3CBC 8004                  		move.w	#$8004,(a6)
0000382A 3CBC 8230                  		move.w	#$8230,(a6)
0000382E 3CBC 8407                  		move.w	#$8407,(a6)
00003832 3CBC 8700                  		move.w	#$8700,(a6)
00003836 3CBC 8B00                  		move.w	#$8B00,(a6)
0000383A 4238 F64E                  		clr.b	($FFFFF64E).w
0000383E 46FC 2700                  		move	#$2700,sr
00003842 3038 F60C                  		move.w	($FFFFF60C).w,d0
00003846 0200 00BF                  		andi.b	#$BF,d0
0000384A 33C0 00C0 0004             		move.w	d0,($C00004).l
00003850 6100 DB34                  		bsr.w	ClearScreen
00003854 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
0000385E 41F9 0000 0000             		lea	(Nem_SegaLogo).l,a0 ; load Sega	logo patterns
00003864 6100 DD4A                  		bsr.w	NemDec
00003868 43F9 00FF 0000             		lea	($FF0000).l,a1
0000386E 41F9 0000 0000             		lea	(Eni_SegaLogo).l,a0 ; load Sega	logo mappings
00003874 303C 0000                  		move.w	#0,d0
00003878 6100 E014                  		bsr.w	EniDec
0000387C 43F9 00FF 0000             		lea	($FF0000).l,a1
00003882 203C 6510 0003             		move.l	#$65100003,d0
00003888 7217                       		moveq	#$17,d1
0000388A 7407                       		moveq	#7,d2
0000388C 6100 DC72                  		bsr.w	ShowVDPGraphics
00003890 43F9 00FF 0180             		lea	($FF0180).l,a1
00003896 203C 4000 0003             		move.l	#$40000003,d0
0000389C 7227                       		moveq	#$27,d1
0000389E 741B                       		moveq	#$1B,d2
000038A0 6100 DC5E                  		bsr.w	ShowVDPGraphics
000038A4 7000                       		moveq	#0,d0
000038A6 6100 EBC8                  		bsr.w	PalLoad2	; load Sega logo pallet
000038AA 31FC FFF6 F632             		move.w	#-$A,($FFFFF632).w
000038B0 31FC 0000 F634             		move.w	#0,($FFFFF634).w
000038B6 31FC 0000 F662             		move.w	#0,($FFFFF662).w
000038BC 31FC 0000 F660             		move.w	#0,($FFFFF660).w
000038C2 3038 F60C                  		move.w	($FFFFF60C).w,d0
000038C6 0000 0040                  		ori.b	#$40,d0
000038CA 33C0 00C0 0004             		move.w	d0,($C00004).l
000038D0                            
000038D0                            Sega_WaitPallet:
000038D0 11FC 0002 F62A             		move.b	#2,($FFFFF62A).w
000038D6 6100 FAD0                  		bsr.w	DelayProgram
000038DA 6100 EA66                  		bsr.w	PalCycle_Sega
000038DE 66F0                       		bne.s	Sega_WaitPallet
000038E0                            
000038E0 103C 00E1                  		move.b	#$E1,d0
000038E4 6100 DB96                  		bsr.w	PlaySound_Special ; play "SEGA"	sound
000038E8 11FC 0014 F62A             		move.b	#$14,($FFFFF62A).w
000038EE 6100 FAB8                  		bsr.w	DelayProgram
000038F2 31FC 001E F614             		move.w	#$1E,($FFFFF614).w
000038F8                            
000038F8                            Sega_WaitEnd:
000038F8 11FC 0002 F62A             		move.b	#2,($FFFFF62A).w
000038FE 6100 FAA8                  		bsr.w	DelayProgram
00003902 4A78 F614                  		tst.w	($FFFFF614).w
00003906 6700                       		beq.s	Sega_GotoTitle
00003908 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
0000390E 67E8                       		beq.s	Sega_WaitEnd	; if not, branch
00003910                            
00003910                            Sega_GotoTitle:
00003910 11FC 0004 F600             		move.b	#4,($FFFFF600).w ; go to title screen
00003916 4E75                       		rts	
00003918                            ; ===========================================================================
00003918                            
00003918                            ; ---------------------------------------------------------------------------
00003918                            ; Title	screen
00003918                            ; ---------------------------------------------------------------------------
00003918                            
00003918                            TitleScreen:				; XREF: GameModeArray
00003918 103C 00E4                  		move.b	#$E4,d0
0000391C 6100 DB5E                  		bsr.w	PlaySound_Special ; stop music
00003920 6100 DE2C                  		bsr.w	ClearPLC
00003924 6100 E860                  		bsr.w	Pal_FadeFrom
00003928 46FC 2700                  		move	#$2700,sr
0000392C 6100 DAE6                  		bsr.w	SoundDriverLoad
00003930 4DF9 00C0 0004             		lea	($C00004).l,a6
00003936 3CBC 8004                  		move.w	#$8004,(a6)
0000393A 3CBC 8230                  		move.w	#$8230,(a6)
0000393E 3CBC 8407                  		move.w	#$8407,(a6)
00003942 3CBC 9001                  		move.w	#$9001,(a6)
00003946 3CBC 9200                  		move.w	#$9200,(a6)
0000394A 3CBC 8B03                  		move.w	#$8B03,(a6)
0000394E 3CBC 8720                  		move.w	#$8720,(a6)
00003952 4238 F64E                  		clr.b	($FFFFF64E).w
00003956 6100 DA2E                  		bsr.w	ClearScreen
0000395A 43F8 D000                  		lea	($FFFFD000).w,a1
0000395E 7000                       		moveq	#0,d0
00003960 323C 07FF                  		move.w	#$7FF,d1
00003964                            
00003964                            Title_ClrObjRam:
00003964 22C0                       		move.l	d0,(a1)+
00003966 51C9 FFFC                  		dbf	d1,Title_ClrObjRam ; fill object RAM ($D000-$EFFF) with	$0
0000396A                            
0000396A 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
00003974 41F9 0000 0000             		lea	(Nem_JapNames).l,a0 ; load Japanese credits
0000397A 6100 DC34                  		bsr.w	NemDec
0000397E 23FC 54C0 0000 00C0 0004   		move.l	#$54C00000,($C00004).l
00003988 41F9 0000 0000             		lea	(Nem_CreditText).l,a0 ;	load alphabet
0000398E 6100 DC20                  		bsr.w	NemDec
00003992 43F9 00FF 0000             		lea	($FF0000).l,a1
00003998 41F9 0000 0000             		lea	(Eni_JapNames).l,a0 ; load mappings for	Japanese credits
0000399E 303C 0000                  		move.w	#0,d0
000039A2 6100 DEEA                  		bsr.w	EniDec
000039A6 43F9 00FF 0000             		lea	($FF0000).l,a1
000039AC 203C 4000 0003             		move.l	#$40000003,d0
000039B2 7227                       		moveq	#$27,d1
000039B4 741B                       		moveq	#$1B,d2
000039B6 6100 DB48                  		bsr.w	ShowVDPGraphics
000039BA 43F8 FB80                  		lea	($FFFFFB80).w,a1
000039BE 7000                       		moveq	#0,d0
000039C0 323C 001F                  		move.w	#$1F,d1
000039C4                            
000039C4                            Title_ClrPallet:
000039C4 22C0                       		move.l	d0,(a1)+
000039C6 51C9 FFFC                  		dbf	d1,Title_ClrPallet ; fill pallet with 0	(black)
000039CA                            
000039CA 7003                       		moveq	#3,d0		; load Sonic's pallet
000039CC 6100 EA66                  		bsr.w	PalLoad1
000039D0 11FC 008A D080             		move.b	#$8A,($FFFFD080).w ; load "SONIC TEAM PRESENTS"	object
000039D6 4EB9 0000 0000             		jsr	ObjectsLoad
000039DC 4EB9 0000 0000             		jsr	BuildSprites
000039E2 6100 E6EC                  		bsr.w	Pal_FadeTo
000039E6 46FC 2700                  		move	#$2700,sr
000039EA 23FC 4000 0001 00C0 0004   		move.l	#$40000001,($C00004).l
000039F4 41F9 0000 0000             		lea	(Nem_TitleFg).l,a0 ; load title	screen patterns
000039FA 6100 DBB4                  		bsr.w	NemDec
000039FE 23FC 6000 0001 00C0 0004   		move.l	#$60000001,($C00004).l
00003A08 41F9 0000 0000             		lea	(Nem_TitleSonic).l,a0 ;	load Sonic title screen	patterns
00003A0E 6100 DBA0                  		bsr.w	NemDec
00003A12 23FC 6200 0002 00C0 0004   		move.l	#$62000002,($C00004).l
00003A1C 41F9 0000 0000             		lea	(Nem_TitleTM).l,a0 ; load "TM" patterns
00003A22 6100 DB8C                  		bsr.w	NemDec
00003A26 4DF9 00C0 0000             		lea	($C00000).l,a6
00003A2C 2D7C 5000 0003 0004        		move.l	#$50000003,4(a6)
00003A34 4BF9 0000 0592             		lea	(Art_Text).l,a5
00003A3A 323C 028F                  		move.w	#$28F,d1
00003A3E                            
00003A3E                            Title_LoadText:
00003A3E 3C9D                       		move.w	(a5)+,(a6)
00003A40 51C9 FFFC                  		dbf	d1,Title_LoadText ; load uncompressed text patterns
00003A44                            
00003A44 11FC 0000 FE30             		move.b	#0,($FFFFFE30).w ; clear lamppost counter
00003A4A 31FC 0000 FE08             		move.w	#0,($FFFFFE08).w ; disable debug item placement	mode
00003A50 31FC 0000 FFF0             		move.w	#0,($FFFFFFF0).w ; disable debug mode
00003A56 31FC 0000 FFEA             		move.w	#0,($FFFFFFEA).w
00003A5C 31FC 0000 FE10             		move.w	#0,($FFFFFE10).w ; set level to	GHZ (00)
00003A62 31FC 0000 F634             		move.w	#0,($FFFFF634).w ; disable pallet cycling
00003A68 6100 0000                  		bsr.w	LevelSizeLoad
00003A6C 6100 0000                  		bsr.w	DeformBgLayer
00003A70 43F8 B000                  		lea	($FFFFB000).w,a1
00003A74 41F9 0000 0000             		lea	(Blk16_TS).l,a0 ; load TS 16x16 mappings
00003A7A 303C 0000                  		move.w	#0,d0
00003A7E 6100 DE0E                  		bsr.w	EniDec
00003A82 41F9 0000 0000             		lea	(Blk256_TS).l,a0 ; load TS 256x256 mappings
00003A88 43F9 00FF 0000             		lea	($FF0000).l,a1
00003A8E 6100 DF7C                  		bsr.w	KosDec
00003A92 6100 0000                  		bsr.w	LevelLayoutLoad
00003A96 6100 E6EE                  		bsr.w	Pal_FadeFrom
00003A9A 46FC 2700                  		move	#$2700,sr
00003A9E 6100 D8E6                  		bsr.w	ClearScreen
00003AA2 4BF9 00C0 0004             		lea	($C00004).l,a5
00003AA8 4DF9 00C0 0000             		lea	($C00000).l,a6
00003AAE 47F8 F708                  		lea	($FFFFF708).w,a3
00003AB2 49F8 A440                  		lea	($FFFFA440).w,a4
00003AB6 343C 6000                  		move.w	#$6000,d2
00003ABA 6100 0000                  		bsr.w	LoadTilesFromStart2
00003ABE 43F9 00FF 0000             		lea	($FF0000).l,a1
00003AC4 41F9 0000 0000             		lea	(Eni_Title).l,a0 ; load	title screen mappings
00003ACA 303C 0000                  		move.w	#0,d0
00003ACE 6100 DDBE                  		bsr.w	EniDec
00003AD2 43F9 00FF 0000             		lea	($FF0000).l,a1
00003AD8 203C 4208 0003             		move.l	#$42080003,d0
00003ADE 7221                       		moveq	#$21,d1
00003AE0 7415                       		moveq	#$15,d2
00003AE2 6100 DA1C                  		bsr.w	ShowVDPGraphics
00003AE6 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
00003AF0 41F9 0000 0000             		lea	(Nem_TS_1st).l,a0 ; load TS patterns
00003AF6 6100 DAB8                  		bsr.w	NemDec
00003AFA 7001                       		moveq	#1,d0		; load title screen pallet
00003AFC 6100 E936                  		bsr.w	PalLoad1
00003B00 103C 008A                  		move.b	#$8A,d0		; play title screen music
00003B04 6100 D976                  		bsr.w	PlaySound_Special
00003B08 11FC 0000 FFFA             		move.b	#0,($FFFFFFFA).w ; disable debug mode
00003B0E 31FC 0178 F614             		move.w	#$178,($FFFFF614).w ; run title	screen for $178	frames
00003B14 43F8 D080                  		lea	($FFFFD080).w,a1
00003B18 7000                       		moveq	#0,d0
00003B1A 323C 000F                  		move.w	#$F,d1	; ($40 / 4) - 1
00003B1E                            
00003B1E                            Title_ClrObjRam2:
00003B1E 22C0                       		move.l	d0,(a1)+
00003B20 51C9 FFFC                  		dbf	d1,Title_ClrObjRam2
00003B24                            
00003B24 11FC 000E D040             		move.b	#$E,($FFFFD040).w ; load big Sonic object
00003B2A 11FC 000F D080             		move.b	#$F,($FFFFD080).w ; load "PRESS	START BUTTON" object
00003B30 11FC 000F D0C0             		move.b	#$F,($FFFFD0C0).w ; load "TM" object
00003B36 11FC 0003 D0DA             		move.b	#3,($FFFFD0DA).w
00003B3C 11FC 000F D100             		move.b	#$F,($FFFFD100).w
00003B42 11FC 0002 D11A             		move.b	#2,($FFFFD11A).w
00003B48 4EB9 0000 0000             		jsr	ObjectsLoad
00003B4E 6100 0000                  		bsr.w	DeformBgLayer
00003B52 4EB9 0000 0000             		jsr	BuildSprites
00003B58 7000                       		moveq	#0,d0
00003B5A 6100 DBC6                  		bsr.w	LoadPLC2
00003B5E 31FC 0000 FFE4             		move.w	#0,($FFFFFFE4).w
00003B64 31FC 0000 FFE6             		move.w	#0,($FFFFFFE6).w
00003B6A 3038 F60C                  		move.w	($FFFFF60C).w,d0
00003B6E 0000 0040                  		ori.b	#$40,d0
00003B72 33C0 00C0 0004             		move.w	d0,($C00004).l
00003B78 6100 E556                  		bsr.w	Pal_FadeTo
00003B7C                            
00003B7C                            loc_317C:
00003B7C 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00003B82 6100 F824                  		bsr.w	DelayProgram
00003B86 4EB9 0000 0000             		jsr	ObjectsLoad
00003B8C 6100 0000                  		bsr.w	DeformBgLayer
00003B90 4EB9 0000 0000             		jsr	BuildSprites
00003B96 6100 DF3A                  		bsr.w	PalCycle_Title
00003B9A 6100 DBC0                  		bsr.w	RunPLC_RAM
00003B9E 3038 D008                  		move.w	($FFFFD008).w,d0
00003BA2 5440                       		addq.w	#2,d0
00003BA4 31C0 D008                  		move.w	d0,($FFFFD008).w ; move	Sonic to the right
00003BA8 0C40 1C00                  		cmpi.w	#$1C00,d0	; has Sonic object passed x-position $1C00?
00003BAC 6500                       		bcs.s	Title_ChkRegion	; if not, branch
00003BAE 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
00003BB4 4E75                       		rts	
00003BB6                            ; ===========================================================================
00003BB6                            
00003BB6                            Title_ChkRegion:
00003BB6 4A38 FFF8                  		tst.b	($FFFFFFF8).w	; check	if the machine is US or	Japanese
00003BBA 6A00                       		bpl.s	Title_RegionJ	; if Japanese, branch
00003BBC 41F9 0000 0000             		lea	(LevelSelectCode_US).l,a0 ; load US code
00003BC2 6000                       		bra.s	Title_EnterCheat
00003BC4                            ; ===========================================================================
00003BC4                            
00003BC4                            Title_RegionJ:				; XREF: Title_ChkRegion
00003BC4 41F9 0000 0000             		lea	(LevelSelectCode_J).l,a0 ; load	J code
00003BCA                            
00003BCA                            Title_EnterCheat:			; XREF: Title_ChkRegion
00003BCA 3038 FFE4                  		move.w	($FFFFFFE4).w,d0
00003BCE D0C0                       		adda.w	d0,a0
00003BD0 1038 F605                  		move.b	($FFFFF605).w,d0 ; get button press
00003BD4 0200 000F                  		andi.b	#$F,d0		; read only up/down/left/right buttons
00003BD8 B010                       		cmp.b	(a0),d0		; does button press match the cheat code?
00003BDA 6600                       		bne.s	loc_3210	; if not, branch
00003BDC 5278 FFE4                  		addq.w	#1,($FFFFFFE4).w ; next	button press
00003BE0 4A00                       		tst.b	d0
00003BE2 6600                       		bne.s	Title_CountC
00003BE4 41F8 FFE0                  		lea	($FFFFFFE0).w,a0
00003BE8 3238 FFE6                  		move.w	($FFFFFFE6).w,d1
00003BEC E249                       		lsr.w	#1,d1
00003BEE 0241 0003                  		andi.w	#3,d1
00003BF2 6700                       		beq.s	Title_PlayRing
00003BF4 4A38 FFF8                  		tst.b	($FFFFFFF8).w
00003BF8 6A00                       		bpl.s	Title_PlayRing
00003BFA 7201                       		moveq	#1,d1
00003BFC 1181 1001                  		move.b	d1,1(a0,d1.w)
00003C00                            
00003C00                            Title_PlayRing:
00003C00 11BC 0001 1000             		move.b	#1,(a0,d1.w)	; activate cheat
00003C06 103C 00B5                  		move.b	#$B5,d0		; play ring sound when code is entered
00003C0A 6100 D870                  		bsr.w	PlaySound_Special
00003C0E 6000                       		bra.s	Title_CountC
00003C10                            ; ===========================================================================
00003C10                            
00003C10                            loc_3210:				; XREF: Title_EnterCheat
00003C10 4A00                       		tst.b	d0
00003C12 6700                       		beq.s	Title_CountC
00003C14 0C78 0009 FFE4             		cmpi.w	#9,($FFFFFFE4).w
00003C1A 6700                       		beq.s	Title_CountC
00003C1C 31FC 0000 FFE4             		move.w	#0,($FFFFFFE4).w
00003C22                            
00003C22                            Title_CountC:
00003C22 1038 F605                  		move.b	($FFFFF605).w,d0
00003C26 0200 0020                  		andi.b	#$20,d0		; is C button pressed?
00003C2A 6700                       		beq.s	loc_3230	; if not, branch
00003C2C 5278 FFE6                  		addq.w	#1,($FFFFFFE6).w ; increment C button counter
00003C30                            
00003C30                            loc_3230:
00003C30 4A78 F614                  		tst.w	($FFFFF614).w
00003C34 6700 0000                  		beq.w	Demo
00003C38 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; check if Start is pressed
00003C3E 6700 FF3C                  		beq.w	loc_317C	; if not, branch
00003C42                            
00003C42                            Title_ChkLevSel:
00003C42 4A38 FFE0                  		tst.b	($FFFFFFE0).w		; check	if level select	code is	on
00003C46 6700 0000                  		beq.w	PlayLevel		; if not, play level
00003C4A 0838 0006 F604             		btst	#6,($FFFFF604).w ; check if A is pressed
00003C50 6700 0000                  		beq.w	PlayLevel		; if not, play level
00003C54 4EF9 0000 0000             		jmp	Level_Select_Menu	; if yes, goto Sonic 2 level select	
00003C5A 7002                       		moveq	#2,d0
00003C5C 43F8 CC00                  		lea	($FFFFCC00).w,a1
00003C60 7000                       		moveq	#0,d0
00003C62 323C 00DF                  		move.w	#$DF,d1
00003C66                            
00003C66                            Title_ClrScroll:
00003C66 22C0                       		move.l	d0,(a1)+
00003C68 51C9 FFFC                  		dbf	d1,Title_ClrScroll ; fill scroll data with 0
00003C6C                            
00003C6C 21C0 F616                  		move.l	d0,($FFFFF616).w
00003C70 46FC 2700                  		move	#$2700,sr
00003C74 4DF9 00C0 0000             		lea	($C00000).l,a6
00003C7A 23FC 6000 0003 00C0 0004   		move.l	#$60000003,($C00004).l
00003C84 323C 03FF                  		move.w	#$3FF,d1
00003C88                            
00003C88                            Title_ClrVram:
00003C88 2C80                       		move.l	d0,(a6)
00003C8A 51C9 FFFC                  		dbf	d1,Title_ClrVram ; fill	VRAM with 0
00003C8E                            
00003C8E 6100 0000                  		bsr.w	LevSelTextLoad
00003C92                            
00003C92                            ; ---------------------------------------------------------------------------
00003C92                            ; Level	Select
00003C92                            ; ---------------------------------------------------------------------------
00003C92                            
00003C92                            LevelSelect:
00003C92 11FC 0002 F62A             		move.b	#2,($FFFFF62A).w
00003C98 6100 F70E                  		bsr.w	DelayProgram
00003C9C 6100 0000                  		bsr.w	LevSelControls
00003CA0 6100 DABA                  		bsr.w	RunPLC_RAM
00003CA4 4AB8 F680                  		tst.l	($FFFFF680).w
00003CA8 66E8                       		bne.s	LevelSelect
00003CAA 0238 00F0 F605             		andi.b	#$F0,($FFFFF605).w ; is	A, B, C, or Start pressed?
00003CB0 67E0                       		beq.s	LevelSelect	; if not, branch
00003CB2 3038 FF82                  		move.w	($FFFFFF82).w,d0
00003CB6 0C40 0014                  		cmpi.w	#$14,d0		; have you selected item $14 (sound test)?
00003CBA 6600                       		bne.s	LevSel_Level_SS	; if not, go to	Level/SS subroutine
00003CBC 3038 FF84                  		move.w	($FFFFFF84).w,d0
00003CC0 0640 0080                  		addi.w	#$80,d0
00003CC4 4A38 FFE3                  		tst.b	($FFFFFFE3).w	; is Japanese Credits cheat on?
00003CC8 6700                       		beq.s	LevSel_NoCheat	; if not, branch
00003CCA 0C40 009F                  		cmpi.w	#$9F,d0		; is sound $9F being played?
00003CCE 6700                       		beq.s	LevSel_Ending	; if yes, branch
00003CD0 0C40 009E                  		cmpi.w	#$9E,d0		; is sound $9E being played?
00003CD4 6700                       		beq.s	LevSel_Credits	; if yes, branch
00003CD6                            
00003CD6                            LevSel_NoCheat:
00003CD6 0C40 00A0                  		cmpi.w	#$A0,d0		; is sound $80-$94 being played?
00003CDA 6500                       		bcs.s	LevSel_PlaySnd	; if yes, branch
00003CDC 0C40 00A0                  		cmpi.w	#$A0,d0		; is sound $95-$A0 being played?
00003CE0 65B0                       		bcs.s	LevelSelect	; if yes, branch
00003CE2                            
00003CE2                            LevSel_PlaySnd:
00003CE2 6100 D798                  		bsr.w	PlaySound_Special
00003CE6 60AA                       		bra.s	LevelSelect
00003CE8                            ; ===========================================================================
00003CE8                            
00003CE8                            LevSel_Ending:				; XREF: LevelSelect
00003CE8 11FC 0018 F600             		move.b	#$18,($FFFFF600).w ; set screen	mode to	$18 (Ending)
00003CEE 31FC 0600 FE10             		move.w	#$600,($FFFFFE10).w ; set level	to 0600	(Ending)
00003CF4 4E75                       		rts	
00003CF6                            ; ===========================================================================
00003CF6                            
00003CF6                            LevSel_Credits:				; XREF: LevelSelect
00003CF6 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; set screen	mode to	$1C (Credits)
00003CFC 103C 0091                  		move.b	#$91,d0
00003D00 6100 D77A                  		bsr.w	PlaySound_Special ; play credits music
00003D04 31FC 0000 FFF4             		move.w	#0,($FFFFFFF4).w
00003D0A 4E75                       		rts	
00003D0C                            ; ===========================================================================
00003D0C                            
00003D0C                            LevSel_Level_SS:			; XREF: LevelSelect
00003D0C D040                       		add.w	d0,d0
00003D0E 303B 0000                  		move.w	LSelectPointers(pc,d0.w),d0 ; load level number
00003D12 6B00 FF7E                  		bmi.w	LevelSelect
00003D16 0C40 0700                  		cmpi.w	#$700,d0	; check	if level is 0700 (Special Stage)
00003D1A 6600                       		bne.s	LevSel_Level	; if not, branch
00003D1C 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set screen	mode to	$10 (Special Stage)
00003D22 4278 FE10                  		clr.w	($FFFFFE10).w	; clear	level
00003D26 11FC 0003 FE12             		move.b	#3,($FFFFFE12).w ; set lives to	3
00003D2C 7000                       		moveq	#0,d0
00003D2E 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00003D32 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00003D36 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00003D3A 4E75                       		rts	
00003D3C                            ; ===========================================================================
00003D3C                            
00003D3C                            LevSel_Level:				; XREF: LevSel_Level_SS
00003D3C 0240 3FFF                  		andi.w	#$3FFF,d0
00003D40 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level number
00003D44                            
00003D44                            PlayLevel:				; XREF: ROM:00003246j ...
00003D44 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
00003D4A 11FC 0003 FE12             		move.b	#3,($FFFFFE12).w ; set lives to	3
00003D50 7000                       		moveq	#0,d0
00003D52 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00003D56 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00003D5A 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00003D5E 11C0 FE16                  		move.b	d0,($FFFFFE16).w ; clear special stage number
00003D62 11C0 FE57                  		move.b	d0,($FFFFFE57).w ; clear emeralds
00003D66 21C0 FE58                  		move.l	d0,($FFFFFE58).w ; clear emeralds
00003D6A 21C0 FE5C                  		move.l	d0,($FFFFFE5C).w ; clear emeralds
00003D6E 11C0 FE18                  		move.b	d0,($FFFFFE18).w ; clear continues
00003D72 103C 00E0                  		move.b	#$E0,d0
00003D76 6100 D704                  		bsr.w	PlaySound_Special ; fade out music
00003D7A 4E75                       		rts	
00003D7C                            ; ===========================================================================
00003D7C                            ; ---------------------------------------------------------------------------
00003D7C                            ; Level	select - level pointers
00003D7C                            ; ---------------------------------------------------------------------------
00003D7C                            LSelectPointers:
00003D7C                            		incbin	misc\ls_point.bin
00003DA6                            		even
00003DA6                            ; ---------------------------------------------------------------------------
00003DA6                            ; Level	select codes
00003DA6                            ; ---------------------------------------------------------------------------
00003DA6                            LevelSelectCode_J:
00003DA6                            		incbin	misc\ls_jcode.bin
00003DAC                            		even
00003DAC                            
00003DAC                            LevelSelectCode_US:
00003DAC                            		incbin	misc\ls_ucode.bin
00003DB2                            		even
00003DB2                            ; ===========================================================================
00003DB2                            
00003DB2                            ; ---------------------------------------------------------------------------
00003DB2                            ; Demo mode
00003DB2                            ; ---------------------------------------------------------------------------
00003DB2                            
00003DB2                            Demo:					; XREF: TitleScreen
00003DB2 31FC 001E F614             		move.w	#$1E,($FFFFF614).w
00003DB8                            
00003DB8                            loc_33B6:				; XREF: loc_33E4
00003DB8 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00003DBE 6100 F5E8                  		bsr.w	DelayProgram
00003DC2 6100 0000                  		bsr.w	DeformBgLayer
00003DC6 6100 DCE4                  		bsr.w	PalCycle_Load
00003DCA 6100 D990                  		bsr.w	RunPLC_RAM
00003DCE 3038 D008                  		move.w	($FFFFD008).w,d0
00003DD2 5440                       		addq.w	#2,d0
00003DD4 31C0 D008                  		move.w	d0,($FFFFD008).w
00003DD8 0C40 1C00                  		cmpi.w	#$1C00,d0
00003DDC 6500                       		bcs.s	loc_33E4
00003DDE 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set screen mode to 00 (level)
00003DE4 4E75                       		rts	
00003DE6                            ; ===========================================================================
00003DE6                            
00003DE6                            loc_33E4:				; XREF: Demo
00003DE6 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
00003DEC 6600 FE54                  		bne.w	Title_ChkLevSel	; if yes, branch
00003DF0 4A78 F614                  		tst.w	($FFFFF614).w
00003DF4 6600 FFC2                  		bne.w	loc_33B6
00003DF8 103C 00E0                  		move.b	#$E0,d0
00003DFC 6100 D67E                  		bsr.w	PlaySound_Special ; fade out music
00003E00 3038 FFF2                  		move.w	($FFFFFFF2).w,d0 ; load	demo number
00003E04 0240 0007                  		andi.w	#7,d0
00003E08 D040                       		add.w	d0,d0
00003E0A 303B 0000                  		move.w	Demo_Levels(pc,d0.w),d0	; load level number for	demo
00003E0E 31C0 FE10                  		move.w	d0,($FFFFFE10).w
00003E12 5278 FFF2                  		addq.w	#1,($FFFFFFF2).w ; add 1 to demo number
00003E16 0C78 0004 FFF2             		cmpi.w	#4,($FFFFFFF2).w ; is demo number less than 4?
00003E1C 6500                       		bcs.s	loc_3422	; if yes, branch
00003E1E 31FC 0000 FFF2             		move.w	#0,($FFFFFFF2).w ; reset demo number to	0
00003E24                            
00003E24                            loc_3422:
00003E24 31FC 0001 FFF0             		move.w	#1,($FFFFFFF0).w ; turn	demo mode on
00003E2A 11FC 0008 F600             		move.b	#8,($FFFFF600).w ; set screen mode to 08 (demo)
00003E30 0C40 0600                  		cmpi.w	#$600,d0	; is level number 0600 (special	stage)?
00003E34 6600                       		bne.s	Demo_Level	; if not, branch
00003E36 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set screen	mode to	$10 (Special Stage)
00003E3C 4278 FE10                  		clr.w	($FFFFFE10).w	; clear	level number
00003E40 4238 FE16                  		clr.b	($FFFFFE16).w	; clear	special	stage number
00003E44                            
00003E44                            Demo_Level:
00003E44 11FC 0003 FE12             		move.b	#3,($FFFFFE12).w ; set lives to	3
00003E4A 7000                       		moveq	#0,d0
00003E4C 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00003E50 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00003E54 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00003E58 4E75                       		rts	
00003E5A                            ; ===========================================================================
00003E5A                            ; ---------------------------------------------------------------------------
00003E5A                            ; Levels used in demos
00003E5A                            ; ---------------------------------------------------------------------------
00003E5A                            Demo_Levels:	incbin	misc\dm_ord1.bin
00003E62                            		even
00003E62                            
00003E62                            ; ---------------------------------------------------------------------------
00003E62                            ; Subroutine to	change what you're selecting in the level select
00003E62                            ; ---------------------------------------------------------------------------
00003E62                            
00003E62                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003E62                            
00003E62                            
00003E62                            LevSelControls:				; XREF: LevelSelect
00003E62 1238 F605                  		move.b	($FFFFF605).w,d1
00003E66 0201 0003                  		andi.b	#3,d1		; is up/down pressed and held?
00003E6A 6600                       		bne.s	LevSel_UpDown	; if yes, branch
00003E6C 5378 FF80                  		subq.w	#1,($FFFFFF80).w ; subtract 1 from time	to next	move
00003E70 6A00                       		bpl.s	LevSel_SndTest	; if time remains, branch
00003E72                            
00003E72                            LevSel_UpDown:
00003E72 31FC 000B FF80             		move.w	#$B,($FFFFFF80).w ; reset time delay
00003E78 1238 F604                  		move.b	($FFFFF604).w,d1
00003E7C 0201 0003                  		andi.b	#3,d1		; is up/down pressed?
00003E80 6700                       		beq.s	LevSel_SndTest	; if not, branch
00003E82 3038 FF82                  		move.w	($FFFFFF82).w,d0
00003E86 0801 0000                  		btst	#0,d1		; is up	pressed?
00003E8A 6700                       		beq.s	LevSel_Down	; if not, branch
00003E8C 5340                       		subq.w	#1,d0		; move up 1 selection
00003E8E 6400                       		bcc.s	LevSel_Down
00003E90 7014                       		moveq	#$14,d0		; if selection moves below 0, jump to selection	$14
00003E92                            
00003E92                            LevSel_Down:
00003E92 0801 0001                  		btst	#1,d1		; is down pressed?
00003E96 6700                       		beq.s	LevSel_Refresh	; if not, branch
00003E98 5240                       		addq.w	#1,d0		; move down 1 selection
00003E9A 0C40 0015                  		cmpi.w	#$15,d0
00003E9E 6500                       		bcs.s	LevSel_Refresh
00003EA0 7000                       		moveq	#0,d0		; if selection moves above $14,	jump to	selection 0
00003EA2                            
00003EA2                            LevSel_Refresh:
00003EA2 31C0 FF82                  		move.w	d0,($FFFFFF82).w ; set new selection
00003EA6 6100 0000                  		bsr.w	LevSelTextLoad	; refresh text
00003EAA 4E75                       		rts	
00003EAC                            ; ===========================================================================
00003EAC                            
00003EAC                            LevSel_SndTest:				; XREF: LevSelControls
00003EAC 0C78 0014 FF82             		cmpi.w	#$14,($FFFFFF82).w ; is	item $14 selected?
00003EB2 6600                       		bne.s	LevSel_NoMove	; if not, branch
00003EB4 1238 F605                  		move.b	($FFFFF605).w,d1
00003EB8 0201 000C                  		andi.b	#$C,d1		; is left/right	pressed?
00003EBC 6700                       		beq.s	LevSel_NoMove	; if not, branch
00003EBE 3038 FF84                  		move.w	($FFFFFF84).w,d0
00003EC2 0801 0002                  		btst	#2,d1		; is left pressed?
00003EC6 6700                       		beq.s	LevSel_Right	; if not, branch
00003EC8 5340                       		subq.w	#1,d0		; subtract 1 from sound	test
00003ECA 6400                       		bcc.s	LevSel_Right
00003ECC 704F                       		moveq	#$4F,d0		; if sound test	moves below 0, set to $4F
00003ECE                            
00003ECE                            LevSel_Right:
00003ECE 0801 0003                  		btst	#3,d1		; is right pressed?
00003ED2 6700                       		beq.s	LevSel_Refresh2	; if not, branch
00003ED4 5240                       		addq.w	#1,d0		; add 1	to sound test
00003ED6 0C40 0050                  		cmpi.w	#$50,d0
00003EDA 6500                       		bcs.s	LevSel_Refresh2
00003EDC 7000                       		moveq	#0,d0		; if sound test	moves above $4F, set to	0
00003EDE                            
00003EDE                            LevSel_Refresh2:
00003EDE 31C0 FF84                  		move.w	d0,($FFFFFF84).w ; set sound test number
00003EE2 6100 0000                  		bsr.w	LevSelTextLoad	; refresh text
00003EE6                            
00003EE6                            LevSel_NoMove:
00003EE6 4E75                       		rts	
00003EE8                            ; End of function LevSelControls
00003EE8                            
00003EE8                            ; ---------------------------------------------------------------------------
00003EE8                            ; Subroutine to load level select text
00003EE8                            ; ---------------------------------------------------------------------------
00003EE8                            
00003EE8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003EE8                            
00003EE8                            
00003EE8                            LevSelTextLoad:				; XREF: TitleScreen
00003EE8 43F9 0000 0000             		lea	(LevelMenuText).l,a1
00003EEE 4DF9 00C0 0000             		lea	($C00000).l,a6
00003EF4 283C 6210 0003             		move.l	#$62100003,d4	; screen position (text)
00003EFA 363C E680                  		move.w	#$E680,d3	; VRAM setting
00003EFE 7214                       		moveq	#$14,d1		; number of lines of text
00003F00                            
00003F00                            loc_34FE:				; XREF: LevSelTextLoad+26j
00003F00 2D44 0004                  		move.l	d4,4(a6)
00003F04 6100 0000                  		bsr.w	LevSel_ChgLine
00003F08 0684 0080 0000             		addi.l	#$800000,d4
00003F0E 51C9 FFF0                  		dbf	d1,loc_34FE
00003F12 7000                       		moveq	#0,d0
00003F14 3038 FF82                  		move.w	($FFFFFF82).w,d0
00003F18 3200                       		move.w	d0,d1
00003F1A 283C 6210 0003             		move.l	#$62100003,d4
00003F20 EF48                       		lsl.w	#7,d0
00003F22 4840                       		swap	d0
00003F24 D880                       		add.l	d0,d4
00003F26 43F9 0000 0000             		lea	(LevelMenuText).l,a1
00003F2C E749                       		lsl.w	#3,d1
00003F2E 3001                       		move.w	d1,d0
00003F30 D241                       		add.w	d1,d1
00003F32 D240                       		add.w	d0,d1
00003F34 D2C1                       		adda.w	d1,a1
00003F36 363C C680                  		move.w	#$C680,d3
00003F3A 2D44 0004                  		move.l	d4,4(a6)
00003F3E 6100 0000                  		bsr.w	LevSel_ChgLine
00003F42 363C E680                  		move.w	#$E680,d3
00003F46 0C78 0014 FF82             		cmpi.w	#$14,($FFFFFF82).w
00003F4C 6600                       		bne.s	loc_3550
00003F4E 363C C680                  		move.w	#$C680,d3
00003F52                            
00003F52                            loc_3550:
00003F52 23FC 6C30 0003 00C0 0004   		move.l	#$6C300003,($C00004).l ; screen	position (sound	test)
00003F5C 3038 FF84                  		move.w	($FFFFFF84).w,d0
00003F60 0640 0080                  		addi.w	#$80,d0
00003F64 1400                       		move.b	d0,d2
00003F66 E808                       		lsr.b	#4,d0
00003F68 6100 0000                  		bsr.w	LevSel_ChgSnd
00003F6C 1002                       		move.b	d2,d0
00003F6E 6100 0000                  		bsr.w	LevSel_ChgSnd
00003F72 4E75                       		rts	
00003F74                            ; End of function LevSelTextLoad
00003F74                            
00003F74                            
00003F74                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003F74                            
00003F74                            
00003F74                            LevSel_ChgSnd:				; XREF: LevSelTextLoad
00003F74 0240 000F                  		andi.w	#$F,d0
00003F78 0C00 000A                  		cmpi.b	#$A,d0
00003F7C 6500                       		bcs.s	loc_3580
00003F7E 5E00                       		addi.b	#7,d0
00003F80                            
00003F80                            loc_3580:
00003F80 D043                       		add.w	d3,d0
00003F82 3C80                       		move.w	d0,(a6)
00003F84 4E75                       		rts	
00003F86                            ; End of function LevSel_ChgSnd
00003F86                            
00003F86                            
00003F86                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003F86                            
00003F86                            
00003F86                            LevSel_ChgLine:				; XREF: LevSelTextLoad
00003F86 7417                       		moveq	#$17,d2		; number of characters per line
00003F88                            
00003F88                            loc_3588:
00003F88 7000                       		moveq	#0,d0
00003F8A 1019                       		move.b	(a1)+,d0
00003F8C 6A00                       		bpl.s	loc_3598
00003F8E 3CBC 0000                  		move.w	#0,(a6)
00003F92 51CA FFF4                  		dbf	d2,loc_3588
00003F96 4E75                       		rts	
00003F98                            ; ===========================================================================
00003F98                            
00003F98                            loc_3598:				; XREF: LevSel_ChgLine
00003F98 D043                       		add.w	d3,d0
00003F9A 3C80                       		move.w	d0,(a6)
00003F9C 51CA FFEA                  		dbf	d2,loc_3588
00003FA0 4E75                       		rts	
00003FA2                            ; End of function LevSel_ChgLine
00003FA2                            
00003FA2                            ; ===========================================================================
00003FA2                            ; ---------------------------------------------------------------------------
00003FA2                            ; Level	select menu text
00003FA2                            ; ---------------------------------------------------------------------------
00003FA2                            LevelMenuText:	incbin	misc\menutext.bin
0000419A                            		even
0000419A                            ; ---------------------------------------------------------------------------
0000419A                            ; Music	playlist
0000419A                            ; ---------------------------------------------------------------------------
0000419A                            MusicList1:	incbin	misc\muslist1.bin
000041A0                            		even
000041A0                            MusicList2:	incbin	misc\muslist2.bin
000041A6                            		even
000041A6                            MusicList3:	incbin	misc\muslist3.bin
000041AC                            		even
000041AC                            MusicList4:	incbin	misc\muslist4.bin
000041B2                            		even						
000041B2                            ; ===========================================================================
000041B2                            
000041B2                            ; ---------------------------------------------------------------------------
000041B2                            ; Level
000041B2                            ; ---------------------------------------------------------------------------
000041B2                            
000041B2                            Level:					; XREF: GameModeArray
000041B2 08F8 0007 F600             		bset	#7,($FFFFF600).w ; add $80 to screen mode (for pre level sequence)
000041B8 4A78 FFF0                  		tst.w	($FFFFFFF0).w
000041BC 6B00                       		bmi.s	loc_37B6
000041BE 103C 00E0                  		move.b	#$E0,d0
000041C2 6100 D2B8                  		bsr.w	PlaySound_Special ; fade out music
000041C6                            
000041C6                            loc_37B6:
000041C6 6100 D586                  		bsr.w	ClearPLC
000041CA 6100 DFBA                  		bsr.w	Pal_FadeFrom
000041CE 4A78 FFF0                  		tst.w	($FFFFFFF0).w
000041D2 6B00                       		bmi.s	Level_ClrRam
000041D4 46FC 2700                  		move	#$2700,sr
000041D8 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
000041E2 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
000041E8 6100 D3C6                  		bsr.w	NemDec
000041EC 46FC 2300                  		move	#$2300,sr
000041F0 7000                       		moveq	#0,d0
000041F2 1038 FE10                  		move.b	($FFFFFE10).w,d0
000041F6 E948                       		lsl.w	#4,d0
000041F8 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2
000041FE 45F2 0000                  		lea	(a2,d0.w),a2
00004202 7000                       		moveq	#0,d0
00004204 1012                       		move.b	(a2),d0
00004206 6700                       		beq.s	loc_37FC
00004208 6100 D4E6                  		bsr.w	LoadPLC		; load level patterns
0000420C                            
0000420C                            loc_37FC:
0000420C 7001                       		moveq	#1,d0
0000420E 6100 D4E0                  		bsr.w	LoadPLC		; load standard	patterns
00004212                            
00004212                            Level_ClrRam:
00004212 43F8 D000                  		lea	($FFFFD000).w,a1
00004216 7000                       		moveq	#0,d0
00004218 323C 07FF                  		move.w	#$7FF,d1
0000421C                            
0000421C                            Level_ClrObjRam:
0000421C 22C0                       		move.l	d0,(a1)+
0000421E 51C9 FFFC                  		dbf	d1,Level_ClrObjRam ; clear object RAM
00004222                            
00004222 43F8 F628                  		lea	($FFFFF628).w,a1
00004226 7000                       		moveq	#0,d0
00004228 323C 0015                  		move.w	#$15,d1
0000422C                            
0000422C                            Level_ClrVars:
0000422C 22C0                       		move.l	d0,(a1)+
0000422E 51C9 FFFC                  		dbf	d1,Level_ClrVars ; clear misc variables
00004232                            
00004232 43F8 F700                  		lea	($FFFFF700).w,a1
00004236 7000                       		moveq	#0,d0
00004238 323C 003F                  		move.w	#$3F,d1
0000423C                            
0000423C                            Level_ClrVars2:
0000423C 22C0                       		move.l	d0,(a1)+
0000423E 51C9 FFFC                  		dbf	d1,Level_ClrVars2 ; clear misc variables
00004242                            
00004242 43F8 FE60                  		lea	($FFFFFE60).w,a1
00004246 7000                       		moveq	#0,d0
00004248 323C 0047                  		move.w	#$47,d1
0000424C                            
0000424C                            Level_ClrVars3:
0000424C 22C0                       		move.l	d0,(a1)+
0000424E 51C9 FFFC                  		dbf	d1,Level_ClrVars3 ; clear object variables
00004252                            
00004252 46FC 2700                  		move	#$2700,sr
00004256 6100 D12E                  		bsr.w	ClearScreen
0000425A 4DF9 00C0 0004             		lea	($C00004).l,a6
00004260 3CBC 8B03                  		move.w	#$8B03,(a6)
00004264 3CBC 8230                  		move.w	#$8230,(a6)
00004268 3CBC 8407                  		move.w	#$8407,(a6)
0000426C 3CBC 857C                  		move.w	#$857C,(a6)
00004270 3CBC 9001                  		move.w	#$9001,(a6)
00004274 3CBC 8004                  		move.w	#$8004,(a6)
00004278 3CBC 8720                  		move.w	#$8720,(a6)
0000427C 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
00004282 3CB8 F624                  		move.w	($FFFFF624).w,(a6)
00004286 4278 C800                  		clr.w	($FFFFC800).w
0000428A 21FC FFFF C800 C8FC        		move.l	#$FFFFC800,($FFFFC8FC).w
00004292 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
00004298 6600                       		bne.s	Level_LoadPal	; if not, branch
0000429A 3CBC 8014                  		move.w	#$8014,(a6)
0000429E 7000                       		moveq	#0,d0
000042A0 1038 FE11                  		move.b	($FFFFFE11).w,d0
000042A4 D040                       		add.w	d0,d0
000042A6 43F9 0000 0000             		lea	(WaterHeight).l,a1 ; load water	height array
000042AC 3031 0000                  		move.w	(a1,d0.w),d0
000042B0 31C0 F646                  		move.w	d0,($FFFFF646).w ; set water heights
000042B4 31C0 F648                  		move.w	d0,($FFFFF648).w
000042B8 31C0 F64A                  		move.w	d0,($FFFFF64A).w
000042BC 4238 F64D                  		clr.b	($FFFFF64D).w	; clear	water routine counter
000042C0 4238 F64E                  		clr.b	($FFFFF64E).w	; clear	water movement
000042C4 11FC 0001 F64C             		move.b	#1,($FFFFF64C).w ; enable water
000042CA                            
000042CA                            Level_LoadPal:
000042CA 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
000042D0 46FC 2300                  		move	#$2300,sr
000042D4 7003                       		moveq	#3,d0
000042D6 6100 E198                  		bsr.w	PalLoad2	; load Sonic's pallet line
000042DA 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
000042E0 6600                       		bne.s	Level_GetBgm	; if not, branch
000042E2 700F                       		moveq	#$F,d0		; pallet number	$0F (LZ)
000042E4 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; is act number 3?
000042EA 6600                       		bne.s	Level_WaterPal	; if not, branch
000042EC 7010                       		moveq	#$10,d0		; pallet number	$10 (SBZ3)
000042EE                            
000042EE                            Level_WaterPal:
000042EE 6100 E1B8                  		bsr.w	PalLoad3_Water	; load underwater pallet (see d0)
000042F2 4A38 FE30                  		tst.b	($FFFFFE30).w
000042F6 6700                       		beq.s	Level_GetBgm
000042F8 11F8 FE53 F64E             		move.b	($FFFFFE53).w,($FFFFF64E).w
000042FE                            
000042FE                            ; NineKode begins here - How to play different songs on different acts
000042FE                             
000042FE                            Level_GetBgm:
000042FE 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00004302 6B00 0000                  		bmi.w	loc_3946	; change from bmi.s to bmi.w or you'll get an error
00004306 7000                       		moveq	#0,d0
00004308 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000430C                             
0000430C 0C38 0000 FE11             		cmpi.b	#$0,($FFFFFE11).w	; is this act 1?
00004312 6600                       		bne.s	Level_GetBgm2	; if not, branch
00004314 43F9 0000 419A             		lea	(MusicList1).l,a1	; load Music Playlist for Acts 1
0000431A 6000                       		bra.s	Level_PlayBgm	; go to PlayBgm
0000431C                             
0000431C                            Level_GetBgm2:
0000431C 0C38 0001 FE11             		cmpi.b	#$1,($FFFFFE11).w	; is this act 2?
00004322 6600                       		bne.s	Level_GetBgm3	; if not, branch
00004324 43F9 0000 41A0             		lea	(MusicList2).l,a1	; load Music Playlist for Acts 2
0000432A 6000                       		bra.s	Level_PlayBgm	; go to PlayBgm
0000432C                             
0000432C                            Level_GetBgm3:
0000432C 0C38 0002 FE11             		cmpi.b	#$2,($FFFFFE11).w	; is this act 3?
00004332 6600                       		bne.s	Level_GetBgm4	; if not, branch
00004334 43F9 0000 41A6             		lea	(MusicList3).l,a1	; load Music Playlist for Acts 3
0000433A 6000                       		bra.s	Level_PlayBgm	; go to PlayBgm
0000433C                             
0000433C                            Level_GetBgm4:
0000433C 0C38 0003 FE11             		cmpi.b	#$3,($FFFFFE11).w	; is this act 4?
00004342 6600                       		bne.s	Level_PlayBgm	; if not, branch
00004344 43F9 0000 41AC             		lea	(MusicList4).l,a1	; load Music Playlist for Acts 4
0000434A                             
0000434A                            Level_PlayBgm:
0000434A 1031 0000                  		move.b	(a1,d0.w),d0	; get d0-th entry from the playlist
0000434E 6100 D126                  		bsr.w	PlaySound	; play music
00004352 11FC 0034 D080             		move.b	#$34,($FFFFD080).w ; load title	card object
00004358                             
00004358                            ; NineKode ends here
00004358                            
00004358                            Level_TtlCard:
00004358 11FC 000C F62A             		move.b	#$C,($FFFFF62A).w
0000435E 6100 F048                  		bsr.w	DelayProgram
00004362 4EB9 0000 0000             		jsr	ObjectsLoad
00004368 4EB9 0000 0000             		jsr	BuildSprites
0000436E 6100 D3EC                  		bsr.w	RunPLC_RAM
00004372 3038 D108                  		move.w	($FFFFD108).w,d0
00004376 B078 D130                  		cmp.w	($FFFFD130).w,d0 ; has title card sequence finished?
0000437A 66DC                       		bne.s	Level_TtlCard	; if not, branch
0000437C 4AB8 F680                  		tst.l	($FFFFF680).w	; are there any	items in the pattern load cue?
00004380 66D6                       		bne.s	Level_TtlCard	; if yes, branch
00004382 4EB9 0000 0000             		jsr	Hud_Base
00004388                            
00004388                            loc_3946:
00004388 7003                       		moveq	#3,d0
0000438A 6100 E0A8                  		bsr.w	PalLoad1	; load Sonic's pallet line
0000438E 6100 0000                  		bsr.w	LevelSizeLoad
00004392 6100 0000                  		bsr.w	DeformBgLayer
00004396 08F8 0002 F754             		bset	#2,($FFFFF754).w
0000439C 6100 0000                  		bsr.w	MainLoadBlockLoad ; load block mappings	and pallets
000043A0 6100 0000                  		bsr.w	LoadTilesFromStart
000043A4 4EB9 0000 0000             		jsr	FloorLog_Unk
000043AA 6100 0000                  		bsr.w	ColIndexLoad
000043AE 6100 0000                  		bsr.w	LZWaterEffects
000043B2 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
000043B8 4A78 FFF0                  		tst.w	($FFFFFFF0).w
000043BC 6B00                       		bmi.s	Level_ChkDebug
000043BE 11FC 0021 D040             		move.b	#$21,($FFFFD040).w ; load HUD object
000043C4                            
000043C4                            Level_ChkDebug:
000043C4 4A38 FFE2                  		tst.b	($FFFFFFE2).w	; has debug cheat been entered?
000043C8 6700                       		beq.s	Level_ChkWater	; if not, branch
000043CA 0838 0006 F604             		btst	#6,($FFFFF604).w ; is A	button pressed?
000043D0 6700                       		beq.s	Level_ChkWater	; if not, branch
000043D2 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
000043D8                            
000043D8                            Level_ChkWater:
000043D8 31FC 0000 F602             		move.w	#0,($FFFFF602).w
000043DE 31FC 0000 F604             		move.w	#0,($FFFFF604).w
000043E4 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
000043EA 6600                       		bne.s	Level_LoadObj	; if not, branch
000043EC 11FC 001B D780             		move.b	#$1B,($FFFFD780).w ; load water	surface	object
000043F2 31FC 0060 D788             		move.w	#$60,($FFFFD788).w
000043F8 11FC 001B D7C0             		move.b	#$1B,($FFFFD7C0).w
000043FE 31FC 0120 D7C8             		move.w	#$120,($FFFFD7C8).w
00004404                            
00004404                            Level_LoadObj:
00004404 4EB9 0000 0000             		jsr	ObjPosLoad
0000440A 4EB9 0000 0000             		jsr	ObjectsLoad
00004410 4EB9 0000 0000             		jsr	BuildSprites
00004416 7000                       		moveq	#0,d0
00004418 4A38 FE30                  		tst.b	($FFFFFE30).w	; are you starting from	a lamppost?
0000441C 6600                       		bne.s	loc_39E8	; if yes, branch
0000441E 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00004422 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00004426 11C0 FE1B                  		move.b	d0,($FFFFFE1B).w ; clear lives counter
0000442A                            
0000442A                            loc_39E8:
0000442A 11C0 FE1A                  		move.b	d0,($FFFFFE1A).w
0000442E 11C0 FE2C                  		move.b	d0,($FFFFFE2C).w ; clear shield
00004432 11C0 FE2D                  		move.b	d0,($FFFFFE2D).w ; clear invincibility
00004436 11C0 FE2E                  		move.b	d0,($FFFFFE2E).w ; clear speed shoes
0000443A 11C0 FE2F                  		move.b	d0,($FFFFFE2F).w
0000443E 31C0 FE08                  		move.w	d0,($FFFFFE08).w
00004442 31C0 FE02                  		move.w	d0,($FFFFFE02).w
00004446 31C0 FE04                  		move.w	d0,($FFFFFE04).w
0000444A 6100 0000                  		bsr.w	OscillateNumInit
0000444E 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; update score	counter
00004454 11FC 0001 FE1D             		move.b	#1,($FFFFFE1D).w ; update rings	counter
0000445A 11FC 0001 FE1E             		move.b	#1,($FFFFFE1E).w ; update time counter
00004460 31FC 0000 F790             		move.w	#0,($FFFFF790).w
00004466 43F9 0000 0000             		lea	(Demo_Index).l,a1 ; load demo data
0000446C 7000                       		moveq	#0,d0
0000446E 1038 FE10                  		move.b	($FFFFFE10).w,d0
00004472 E548                       		lsl.w	#2,d0
00004474 2271 0000                  		movea.l	(a1,d0.w),a1
00004478 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
0000447C 6A00                       		bpl.s	Level_Demo	; if yes, branch
0000447E 43F9 0000 0000             		lea	(Demo_EndIndex).l,a1 ; load ending demo	data
00004484 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
00004488 5340                       		subq.w	#1,d0
0000448A E548                       		lsl.w	#2,d0
0000448C 2271 0000                  		movea.l	(a1,d0.w),a1
00004490                            
00004490                            Level_Demo:
00004490 11E9 0001 F792             		move.b	1(a1),($FFFFF792).w ; load key press duration
00004496 5338 F792                  		subq.b	#1,($FFFFF792).w ; subtract 1 from duration
0000449A 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
000044A0 4A78 FFF0                  		tst.w	($FFFFFFF0).w
000044A4 6A00                       		bpl.s	Level_ChkWaterPal
000044A6 31FC 021C F614             		move.w	#540,($FFFFF614).w
000044AC 0C78 0004 FFF4             		cmpi.w	#4,($FFFFFFF4).w
000044B2 6600                       		bne.s	Level_ChkWaterPal
000044B4 31FC 01FE F614             		move.w	#510,($FFFFF614).w
000044BA                            
000044BA                            Level_ChkWaterPal:
000044BA 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ/SBZ3?
000044C0 6600                       		bne.s	Level_Delay	; if not, branch
000044C2 700B                       		moveq	#$B,d0		; pallet $0B (LZ underwater)
000044C4 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; is level SBZ3?
000044CA 6600                       		bne.s	Level_WaterPal2	; if not, branch
000044CC 700D                       		moveq	#$D,d0		; pallet $0D (SBZ3 underwater)
000044CE                            
000044CE                            Level_WaterPal2:
000044CE 6100 E014                  		bsr.w	PalLoad4_Water
000044D2                            
000044D2                            Level_Delay:
000044D2 323C 0003                  		move.w	#3,d1
000044D6                            
000044D6                            Level_DelayLoop:
000044D6 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
000044DC 6100 EECA                  		bsr.w	DelayProgram
000044E0 51C9 FFF4                  		dbf	d1,Level_DelayLoop
000044E4                            
000044E4 31FC 202F F626             		move.w	#$202F,($FFFFF626).w
000044EA 6100 DBEA                  		bsr.w	Pal_FadeTo2
000044EE 4A78 FFF0                  		tst.w	($FFFFFFF0).w
000044F2 6B00                       		bmi.s	Level_ClrCardArt
000044F4 5438 D0A4                  		addq.b	#2,($FFFFD0A4).w ; make	title card move
000044F8 5838 D0E4                  		addq.b	#4,($FFFFD0E4).w
000044FC 5838 D124                  		addq.b	#4,($FFFFD124).w
00004500 5838 D164                  		addq.b	#4,($FFFFD164).w
00004504 6000                       		bra.s	Level_StartGame
00004506                            ; ===========================================================================
00004506                            
00004506                            Level_ClrCardArt:
00004506 7002                       		moveq	#2,d0
00004508 4EB9 0000 16F0             		jsr	(LoadPLC).l	; load explosion patterns
0000450E 7000                       		moveq	#0,d0
00004510 1038 FE10                  		move.b	($FFFFFE10).w,d0
00004514 0640 0015                  		addi.w	#$15,d0
00004518 4EB9 0000 16F0             		jsr	(LoadPLC).l	; load animal patterns (level no. + $15)
0000451E                            
0000451E                            Level_StartGame:
0000451E 08B8 0007 F600             		bclr	#7,($FFFFF600).w ; subtract 80 from screen mode
00004524                            
00004524                            ; ---------------------------------------------------------------------------
00004524                            ; Main level loop (when	all title card and loading sequences are finished)
00004524                            ; ---------------------------------------------------------------------------
00004524                            
00004524                            Level_MainLoop:
00004524 6100 CF62                  		bsr.w	PauseGame
00004528 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
0000452E 6100 EE78                  		bsr.w	DelayProgram
00004532 5278 FE04                  		addq.w	#1,($FFFFFE04).w ; add 1 to level timer
00004536 6100 0000                  		bsr.w	MoveSonicInDemo
0000453A 6100 0000                  		bsr.w	LZWaterEffects
0000453E 4EB9 0000 0000             		jsr	ObjectsLoad
00004544 4A78 FE08                  		tst.w	($FFFFFE08).w
00004548 6600                       		bne.s	loc_3B10
0000454A 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00004550 6400                       		bcc.s	loc_3B14
00004552                            
00004552                            loc_3B10:
00004552 6100 0000                  		bsr.w	DeformBgLayer
00004556                            
00004556                            loc_3B14:
00004556 4EB9 0000 0000             		jsr	BuildSprites
0000455C 4EB9 0000 0000             		jsr	ObjPosLoad
00004562 6100 D548                  		bsr.w	PalCycle_Load
00004566 6100 D1F4                  		bsr.w	RunPLC_RAM
0000456A 6100 0000                  		bsr.w	OscillateNumDo
0000456E 6100 0000                  		bsr.w	ChangeRingFrame
00004572 6100 0000                  		bsr.w	SignpostArtLoad
00004576 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w
0000457C 6700                       		beq.s	Level_ChkDemo	; if screen mode is 08 (demo), branch
0000457E 4A78 FE02                  		tst.w	($FFFFFE02).w	; is the level set to restart?
00004582 6600 FC2E                  		bne.w	Level		; if yes, branch
00004586 0C38 000C F600             		cmpi.b	#$C,($FFFFF600).w
0000458C 6700 FF96                  		beq.w	Level_MainLoop	; if screen mode is $0C	(level), branch
00004590 4E75                       		rts	
00004592                            ; ===========================================================================
00004592                            
00004592                            Level_ChkDemo:				; XREF: Level_MainLoop
00004592 4A78 FE02                  		tst.w	($FFFFFE02).w	; is level set to restart?
00004596 6600                       		bne.s	Level_EndDemo	; if yes, branch
00004598 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
0000459C 6700                       		beq.s	Level_EndDemo	; if not, branch
0000459E 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w
000045A4 6700 FF7E                  		beq.w	Level_MainLoop	; if screen mode is 08 (demo), branch
000045A8 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
000045AE 4E75                       		rts	
000045B0                            ; ===========================================================================
000045B0                            
000045B0                            Level_EndDemo:				; XREF: Level_ChkDemo
000045B0 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w ; is screen mode 08 (demo)?
000045B6 6600                       		bne.s	loc_3B88	; if not, branch
000045B8 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
000045BE 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
000045C2 6A00                       		bpl.s	loc_3B88	; if yes, branch
000045C4 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; go	to credits
000045CA                            
000045CA                            loc_3B88:
000045CA 31FC 003C F614             		move.w	#$3C,($FFFFF614).w
000045D0 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
000045D6 4278 F794                  		clr.w	($FFFFF794).w
000045DA                            
000045DA                            loc_3B98:
000045DA 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
000045E0 6100 EDC6                  		bsr.w	DelayProgram
000045E4 6100 0000                  		bsr.w	MoveSonicInDemo
000045E8 4EB9 0000 0000             		jsr	ObjectsLoad
000045EE 4EB9 0000 0000             		jsr	BuildSprites
000045F4 4EB9 0000 0000             		jsr	ObjPosLoad
000045FA 5378 F794                  		subq.w	#1,($FFFFF794).w
000045FE 6A00                       		bpl.s	loc_3BC8
00004600 31FC 0002 F794             		move.w	#2,($FFFFF794).w
00004606 6100 DBA4                  		bsr.w	Pal_FadeOut
0000460A                            
0000460A                            loc_3BC8:
0000460A 4A78 F614                  		tst.w	($FFFFF614).w
0000460E 66CA                       		bne.s	loc_3B98
00004610 4E75                       		rts	
00004612                            ; ===========================================================================
00004612                            ; ---------------------------------------------------------------------------
00004612                            ; Subroutine to	do special water effects in Labyrinth Zone
00004612                            ; ---------------------------------------------------------------------------
00004612                            
00004612                            LZWaterEffects:				; XREF: Level
00004612 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00004618 6600                       		bne.s	locret_3C28	; if not, branch
0000461A 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00004620 6400                       		bcc.s	LZMoveWater
00004622 6100 0000                  		bsr.w	LZWindTunnels
00004626 6100 0000                  		bsr.w	LZWaterSlides
0000462A 6100 0000                  		bsr.w	LZDynamicWater
0000462E                            
0000462E                            LZMoveWater:
0000462E 4238 F64E                  		clr.b	($FFFFF64E).w
00004632 7000                       		moveq	#0,d0
00004634 1038 FE60                  		move.b	($FFFFFE60).w,d0
00004638 E248                       		lsr.w	#1,d0
0000463A D078 F648                  		add.w	($FFFFF648).w,d0
0000463E 31C0 F646                  		move.w	d0,($FFFFF646).w
00004642 3038 F646                  		move.w	($FFFFF646).w,d0
00004646 9078 F704                  		sub.w	($FFFFF704).w,d0
0000464A 6400                       		bcc.s	loc_3C1A
0000464C 4A40                       		tst.w	d0
0000464E 6A00                       		bpl.s	loc_3C1A
00004650 11FC 00DF F625             		move.b	#-$21,($FFFFF625).w
00004656 11FC 0001 F64E             		move.b	#1,($FFFFF64E).w
0000465C                            
0000465C                            loc_3C1A:
0000465C 0C40 00DF                  		cmpi.w	#$DF,d0
00004660 6500                       		bcs.s	loc_3C24
00004662 303C 00DF                  		move.w	#$DF,d0
00004666                            
00004666                            loc_3C24:
00004666 11C0 F625                  		move.b	d0,($FFFFF625).w
0000466A                            
0000466A                            locret_3C28:
0000466A 4E75                       		rts	
0000466C                            ; ===========================================================================
0000466C                            ; ---------------------------------------------------------------------------
0000466C                            ; Labyrinth default water heights
0000466C                            ; ---------------------------------------------------------------------------
0000466C                            WaterHeight:	incbin	misc\lz_heigh.bin
00004674                            		even
00004674                            
00004674                            ; ===========================================================================
00004674                            
00004674                            ; ---------------------------------------------------------------------------
00004674                            ; Labyrinth dynamic water routines
00004674                            ; ---------------------------------------------------------------------------
00004674                            
00004674                            LZDynamicWater:				; XREF: LZWaterEffects
00004674 7000                       		moveq	#0,d0
00004676 1038 FE11                  		move.b	($FFFFFE11).w,d0
0000467A D040                       		add.w	d0,d0
0000467C 303B 0000                  		move.w	DynWater_Index(pc,d0.w),d0
00004680 4EBB 0000                  		jsr	DynWater_Index(pc,d0.w)
00004684 7200                       		moveq	#0,d1
00004686 1238 F64C                  		move.b	($FFFFF64C).w,d1
0000468A 3038 F64A                  		move.w	($FFFFF64A).w,d0
0000468E 9078 F648                  		sub.w	($FFFFF648).w,d0
00004692 6700                       		beq.s	locret_3C5A
00004694 6400                       		bcc.s	loc_3C56
00004696 4441                       		neg.w	d1
00004698                            
00004698                            loc_3C56:
00004698 D378 F648                  		add.w	d1,($FFFFF648).w
0000469C                            
0000469C                            locret_3C5A:
0000469C 4E75                       		rts	
0000469E                            ; ===========================================================================
0000469E 0000                       DynWater_Index:	dc.w DynWater_LZ1-DynWater_Index
000046A0 0000                       		dc.w DynWater_LZ2-DynWater_Index
000046A2 0000                       		dc.w DynWater_LZ3-DynWater_Index
000046A4 0000                       		dc.w DynWater_SBZ3-DynWater_Index
000046A6                            ; ===========================================================================
000046A6                            
000046A6                            DynWater_LZ1:				; XREF: DynWater_Index
000046A6 3038 F700                  		move.w	($FFFFF700).w,d0
000046AA 1438 F64D                  		move.b	($FFFFF64D).w,d2
000046AE 6600                       		bne.s	loc_3CD0
000046B0 323C 00B8                  		move.w	#$B8,d1
000046B4 0C40 0600                  		cmpi.w	#$600,d0
000046B8 6500                       		bcs.s	loc_3CB4
000046BA 323C 0108                  		move.w	#$108,d1
000046BE 0C78 0200 D00C             		cmpi.w	#$200,($FFFFD00C).w
000046C4 6500                       		bcs.s	loc_3CBA
000046C6 0C40 0C00                  		cmpi.w	#$C00,d0
000046CA 6500                       		bcs.s	loc_3CB4
000046CC 323C 0318                  		move.w	#$318,d1
000046D0 0C40 1080                  		cmpi.w	#$1080,d0
000046D4 6500                       		bcs.s	loc_3CB4
000046D6 11FC 0080 F7E5             		move.b	#-$80,($FFFFF7E5).w
000046DC 323C 05C8                  		move.w	#$5C8,d1
000046E0 0C40 1380                  		cmpi.w	#$1380,d0
000046E4 6500                       		bcs.s	loc_3CB4
000046E6 323C 03A8                  		move.w	#$3A8,d1
000046EA B278 F648                  		cmp.w	($FFFFF648).w,d1
000046EE 6600                       		bne.s	loc_3CB4
000046F0 11FC 0001 F64D             		move.b	#1,($FFFFF64D).w
000046F6                            
000046F6                            loc_3CB4:
000046F6 31C1 F64A                  		move.w	d1,($FFFFF64A).w
000046FA 4E75                       		rts	
000046FC                            ; ===========================================================================
000046FC                            
000046FC                            loc_3CBA:				; XREF: DynWater_LZ1
000046FC 0C40 0C80                  		cmpi.w	#$C80,d0
00004700 65F4                       		bcs.s	loc_3CB4
00004702 323C 00E8                  		move.w	#$E8,d1
00004706 0C40 1500                  		cmpi.w	#$1500,d0
0000470A 65EA                       		bcs.s	loc_3CB4
0000470C 323C 0108                  		move.w	#$108,d1
00004710 60E4                       		bra.s	loc_3CB4
00004712                            ; ===========================================================================
00004712                            
00004712                            loc_3CD0:				; XREF: DynWater_LZ1
00004712 5302                       		subq.b	#1,d2
00004714 6600                       		bne.s	locret_3CF4
00004716 0C78 02E0 D00C             		cmpi.w	#$2E0,($FFFFD00C).w
0000471C 6400                       		bcc.s	locret_3CF4
0000471E 323C 03A8                  		move.w	#$3A8,d1
00004722 0C40 1300                  		cmpi.w	#$1300,d0
00004726 6500                       		bcs.s	loc_3CF0
00004728 323C 0108                  		move.w	#$108,d1
0000472C 11FC 0002 F64D             		move.b	#2,($FFFFF64D).w
00004732                            
00004732                            loc_3CF0:
00004732 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00004736                            
00004736                            locret_3CF4:
00004736 4E75                       		rts	
00004738                            ; ===========================================================================
00004738                            
00004738                            DynWater_LZ2:				; XREF: DynWater_Index
00004738 3038 F700                  		move.w	($FFFFF700).w,d0
0000473C 323C 0328                  		move.w	#$328,d1
00004740 0C40 0500                  		cmpi.w	#$500,d0
00004744 6500                       		bcs.s	loc_3D12
00004746 323C 03C8                  		move.w	#$3C8,d1
0000474A 0C40 0B00                  		cmpi.w	#$B00,d0
0000474E 6500                       		bcs.s	loc_3D12
00004750 323C 0428                  		move.w	#$428,d1
00004754                            
00004754                            loc_3D12:
00004754 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00004758 4E75                       		rts	
0000475A                            ; ===========================================================================
0000475A                            
0000475A                            DynWater_LZ3:				; XREF: DynWater_Index
0000475A 3038 F700                  		move.w	($FFFFF700).w,d0
0000475E 1438 F64D                  		move.b	($FFFFF64D).w,d2
00004762 6600                       		bne.s	loc_3D5E
00004764 323C 0900                  		move.w	#$900,d1
00004768 0C40 0600                  		cmpi.w	#$600,d0
0000476C 6500                       		bcs.s	loc_3D54
0000476E 0C78 03C0 D00C             		cmpi.w	#$3C0,($FFFFD00C).w
00004774 6500                       		bcs.s	loc_3D54
00004776 0C78 0600 D00C             		cmpi.w	#$600,($FFFFD00C).w
0000477C 6400                       		bcc.s	loc_3D54
0000477E 323C 04C8                  		move.w	#$4C8,d1
00004782 11FC 004B A506             		move.b	#$4B,($FFFFA506).w ; change level layout
00004788 11FC 0001 F64D             		move.b	#1,($FFFFF64D).w
0000478E 303C 00B7                  		move.w	#$B7,d0
00004792 6100 CCE8                  		bsr.w	PlaySound_Special ; play sound $B7 (rumbling)
00004796                            
00004796                            loc_3D54:
00004796 31C1 F64A                  		move.w	d1,($FFFFF64A).w
0000479A 31C1 F648                  		move.w	d1,($FFFFF648).w
0000479E 4E75                       		rts	
000047A0                            ; ===========================================================================
000047A0                            
000047A0                            loc_3D5E:				; XREF: DynWater_LZ3
000047A0 5302                       		subq.b	#1,d2
000047A2 6600                       		bne.s	loc_3DA8
000047A4 323C 04C8                  		move.w	#$4C8,d1
000047A8 0C40 0770                  		cmpi.w	#$770,d0
000047AC 6500                       		bcs.s	loc_3DA2
000047AE 323C 0308                  		move.w	#$308,d1
000047B2 0C40 1400                  		cmpi.w	#$1400,d0
000047B6 6500                       		bcs.s	loc_3DA2
000047B8 0C78 0508 F64A             		cmpi.w	#$508,($FFFFF64A).w
000047BE 6700                       		beq.s	loc_3D8E
000047C0 0C78 0600 D00C             		cmpi.w	#$600,($FFFFD00C).w
000047C6 6400                       		bcc.s	loc_3D8E
000047C8 0C78 0280 D00C             		cmpi.w	#$280,($FFFFD00C).w
000047CE 6400                       		bcc.s	loc_3DA2
000047D0                            
000047D0                            loc_3D8E:
000047D0 323C 0508                  		move.w	#$508,d1
000047D4 31C1 F648                  		move.w	d1,($FFFFF648).w
000047D8 0C40 1770                  		cmpi.w	#$1770,d0
000047DC 6500                       		bcs.s	loc_3DA2
000047DE 11FC 0002 F64D             		move.b	#2,($FFFFF64D).w
000047E4                            
000047E4                            loc_3DA2:
000047E4 31C1 F64A                  		move.w	d1,($FFFFF64A).w
000047E8 4E75                       		rts	
000047EA                            ; ===========================================================================
000047EA                            
000047EA                            loc_3DA8:
000047EA 5302                       		subq.b	#1,d2
000047EC 6600                       		bne.s	loc_3DD2
000047EE 323C 0508                  		move.w	#$508,d1
000047F2 0C40 1860                  		cmpi.w	#$1860,d0
000047F6 6500                       		bcs.s	loc_3DCC
000047F8 323C 0188                  		move.w	#$188,d1
000047FC 0C40 1AF0                  		cmpi.w	#$1AF0,d0
00004800 6400                       		bcc.s	loc_3DC6
00004802 B278 F648                  		cmp.w	($FFFFF648).w,d1
00004806 6600                       		bne.s	loc_3DCC
00004808                            
00004808                            loc_3DC6:
00004808 11FC 0003 F64D             		move.b	#3,($FFFFF64D).w
0000480E                            
0000480E                            loc_3DCC:
0000480E 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00004812 4E75                       		rts	
00004814                            ; ===========================================================================
00004814                            
00004814                            loc_3DD2:
00004814 5302                       		subq.b	#1,d2
00004816 6600                       		bne.s	loc_3E0E
00004818 323C 0188                  		move.w	#$188,d1
0000481C 0C40 1AF0                  		cmpi.w	#$1AF0,d0
00004820 6500                       		bcs.s	loc_3E04
00004822 323C 0900                  		move.w	#$900,d1
00004826 0C40 1BC0                  		cmpi.w	#$1BC0,d0
0000482A 6500                       		bcs.s	loc_3E04
0000482C 11FC 0004 F64D             		move.b	#4,($FFFFF64D).w
00004832 31FC 0608 F64A             		move.w	#$608,($FFFFF64A).w
00004838 31FC 07C0 F648             		move.w	#$7C0,($FFFFF648).w
0000483E 11FC 0001 F7E8             		move.b	#1,($FFFFF7E8).w
00004844 4E75                       		rts	
00004846                            ; ===========================================================================
00004846                            
00004846                            loc_3E04:
00004846 31C1 F64A                  		move.w	d1,($FFFFF64A).w
0000484A 31C1 F648                  		move.w	d1,($FFFFF648).w
0000484E 4E75                       		rts	
00004850                            ; ===========================================================================
00004850                            
00004850                            loc_3E0E:
00004850 0C40 1E00                  		cmpi.w	#$1E00,d0
00004854 6500                       		bcs.s	locret_3E1A
00004856 31FC 0128 F64A             		move.w	#$128,($FFFFF64A).w
0000485C                            
0000485C                            locret_3E1A:
0000485C 4E75                       		rts	
0000485E                            ; ===========================================================================
0000485E                            
0000485E                            DynWater_SBZ3:				; XREF: DynWater_Index
0000485E 323C 0228                  		move.w	#$228,d1
00004862 0C78 0F00 F700             		cmpi.w	#$F00,($FFFFF700).w
00004868 6500                       		bcs.s	loc_3E2C
0000486A 323C 04C8                  		move.w	#$4C8,d1
0000486E                            
0000486E                            loc_3E2C:
0000486E 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00004872 4E75                       		rts
00004874                            
00004874                            ; ---------------------------------------------------------------------------
00004874                            ; Labyrinth Zone "wind tunnels"	subroutine
00004874                            ; ---------------------------------------------------------------------------
00004874                            
00004874                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004874                            
00004874                            
00004874                            LZWindTunnels:				; XREF: LZWaterEffects
00004874 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
00004878 6600 0000                  		bne.w	locret_3F0A	; if yes, branch
0000487C 45F9 0000 0000             		lea	(LZWind_Data).l,a2
00004882 7000                       		moveq	#0,d0
00004884 1038 FE11                  		move.b	($FFFFFE11).w,d0
00004888 E748                       		lsl.w	#3,d0
0000488A D4C0                       		adda.w	d0,a2
0000488C 7200                       		moveq	#0,d1
0000488E 4A38 FE11                  		tst.b	($FFFFFE11).w
00004892 6600                       		bne.s	loc_3E56
00004894 7201                       		moveq	#1,d1
00004896 514A                       		subq.w	#8,a2
00004898                            
00004898                            loc_3E56:
00004898 43F8 D000                  		lea	($FFFFD000).w,a1
0000489C                            
0000489C                            LZWind_Loop:
0000489C 3029 0008                  		move.w	8(a1),d0
000048A0 B052                       		cmp.w	(a2),d0
000048A2 6500 0000                  		bcs.w	loc_3EF4
000048A6 B06A 0004                  		cmp.w	4(a2),d0
000048AA 6400 0000                  		bcc.w	loc_3EF4
000048AE 3429 000C                  		move.w	$C(a1),d2
000048B2 B46A 0002                  		cmp.w	2(a2),d2
000048B6 6500                       		bcs.s	loc_3EF4
000048B8 B46A 0006                  		cmp.w	6(a2),d2
000048BC 6400                       		bcc.s	loc_3EF4
000048BE 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
000048C2 0200 003F                  		andi.b	#$3F,d0
000048C6 6600                       		bne.s	loc_3E90
000048C8 303C 00D0                  		move.w	#$D0,d0
000048CC 4EB9 0000 147C             		jsr	(PlaySound_Special).l ;	play rushing water sound
000048D2                            
000048D2                            loc_3E90:
000048D2 4A38 F7C9                  		tst.b	($FFFFF7C9).w
000048D6 6600 0000                  		bne.w	locret_3F0A
000048DA 0C29 0004 0024             		cmpi.b	#4,$24(a1)
000048E0 6400                       		bcc.s	loc_3F06
000048E2 11FC 0001 F7C7             		move.b	#1,($FFFFF7C7).w
000048E8 0440 0080                  		subi.w	#$80,d0
000048EC B052                       		cmp.w	(a2),d0
000048EE 6400                       		bcc.s	LZWind_Move
000048F0 7002                       		moveq	#2,d0
000048F2 0C38 0001 FE11             		cmpi.b	#1,($FFFFFE11).w
000048F8 6600                       		bne.s	loc_3EBA
000048FA 4440                       		neg.w	d0
000048FC                            
000048FC                            loc_3EBA:
000048FC D169 000C                  		add.w	d0,$C(a1)
00004900                            
00004900                            LZWind_Move:
00004900 5869 0008                  		addq.w	#4,8(a1)
00004904 337C 0400 0010             		move.w	#$400,$10(a1)	; move Sonic horizontally
0000490A 337C 0000 0012             		move.w	#0,$12(a1)
00004910 137C 000F 001C             		move.b	#$F,$1C(a1)	; use floating animation
00004916 08E9 0001 0022             		bset	#1,$22(a1)
0000491C 0838 0000 F602             		btst	#0,($FFFFF602).w ; is up pressed?
00004922 6700                       		beq.s	LZWind_MoveDown	; if not, branch
00004924 5369 000C                  		subq.w	#1,$C(a1)	; move Sonic up
00004928                            
00004928                            LZWind_MoveDown:
00004928 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
0000492E 6700                       		beq.s	locret_3EF2	; if not, branch
00004930 5269 000C                  		addq.w	#1,$C(a1)	; move Sonic down
00004934                            
00004934                            locret_3EF2:
00004934 4E75                       		rts	
00004936                            ; ===========================================================================
00004936                            
00004936                            loc_3EF4:				; XREF: LZWindTunnels
00004936 504A                       		addq.w	#8,a2
00004938 51C9 FF62                  		dbf	d1,LZWind_Loop
0000493C 4A38 F7C7                  		tst.b	($FFFFF7C7).w
00004940 6700                       		beq.s	locret_3F0A
00004942 137C 0000 001C             		move.b	#0,$1C(a1)
00004948                            
00004948                            loc_3F06:
00004948 4238 F7C7                  		clr.b	($FFFFF7C7).w
0000494C                            
0000494C                            locret_3F0A:
0000494C 4E75                       		rts	
0000494E                            ; End of function LZWindTunnels
0000494E                            
0000494E                            ; ===========================================================================
0000494E 0A80 0300 0C10 0380        		dc.w $A80, $300, $C10, $380
00004956 0F80 0100 1410 0180 0460+  LZWind_Data:	dc.w $F80, $100, $1410,	$180, $460, $400, $710,	$480, $A20
00004968 0600 1610 06E0 0C80 0600+  		dc.w $600, $1610, $6E0,	$C80, $600, $13D0, $680
00004976                            					; XREF: LZWindTunnels
00004976                            		even
00004976                            
00004976                            ; ---------------------------------------------------------------------------
00004976                            ; Labyrinth Zone water slide subroutine
00004976                            ; ---------------------------------------------------------------------------
00004976                            
00004976                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004976                            
00004976                            
00004976                            LZWaterSlides:				; XREF: LZWaterEffects
00004976 43F8 D000                  		lea	($FFFFD000).w,a1
0000497A 0829 0001 0022             		btst	#1,$22(a1)
00004980 6600                       		bne.s	loc_3F6A
00004982 3029 000C                  		move.w	$C(a1),d0
00004986 E248                       		lsr.w	#1,d0
00004988 0240 0380                  		andi.w	#$380,d0
0000498C 1229 0008                  		move.b	8(a1),d1
00004990 0241 007F                  		andi.w	#$7F,d1
00004994 D041                       		add.w	d1,d0
00004996 45F8 A400                  		lea	($FFFFA400).w,a2
0000499A 1032 0000                  		move.b	(a2,d0.w),d0
0000499E 45FA 0000                  		lea	byte_3FCF(pc),a2
000049A2 7206                       		moveq	#6,d1
000049A4                            
000049A4                            loc_3F62:
000049A4 B022                       		cmp.b	-(a2),d0
000049A6 57C9 FFFC                  		dbeq	d1,loc_3F62
000049AA 6700                       		beq.s	LZSlide_Move
000049AC                            
000049AC                            loc_3F6A:
000049AC 4A38 F7CA                  		tst.b	($FFFFF7CA).w
000049B0 6700                       		beq.s	locret_3F7A
000049B2 337C 0005 003E             		move.w	#5,$3E(a1)
000049B8 4238 F7CA                  		clr.b	($FFFFF7CA).w
000049BC                            
000049BC                            locret_3F7A:
000049BC 4E75                       		rts	
000049BE                            ; ===========================================================================
000049BE                            
000049BE                            LZSlide_Move:				; XREF: LZWaterSlides
000049BE 0C41 0003                  		cmpi.w	#3,d1
000049C2 6400                       		bcc.s	loc_3F84
000049C4 4E71                       		nop	
000049C6                            
000049C6                            loc_3F84:
000049C6 08A9 0000 0022             		bclr	#0,$22(a1)
000049CC 103B 1000                  		move.b	byte_3FC0(pc,d1.w),d0
000049D0 1340 0014                  		move.b	d0,$14(a1)
000049D4 6A00                       		bpl.s	loc_3F9A
000049D6 08E9 0000 0022             		bset	#0,$22(a1)
000049DC                            
000049DC                            loc_3F9A:
000049DC 4229 0015                  		clr.b	$15(a1)
000049E0 137C 001B 001C             		move.b	#$1B,$1C(a1)	; use Sonic's "sliding" animation
000049E6 11FC 0001 F7CA             		move.b	#1,($FFFFF7CA).w ; lock	controls (except jumping)
000049EC 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
000049F0 0200 001F                  		andi.b	#$1F,d0
000049F4 6600                       		bne.s	locret_3FBE
000049F6 303C 00D0                  		move.w	#$D0,d0
000049FA 4EB9 0000 147C             		jsr	(PlaySound_Special).l ;	play water sound
00004A00                            
00004A00                            locret_3FBE:
00004A00 4E75                       		rts	
00004A02                            ; End of function LZWaterSlides
00004A02                            
00004A02                            ; ===========================================================================
00004A02 0AF5 0AF6 F5F4 0B00 0207+  byte_3FC0:	dc.b $A, $F5, $A, $F6, $F5, $F4, $B, 0,	2, 7, 3, $4C, $4B, 8, 4
00004A11 00                         byte_3FCF:	dc.b 0			; XREF: LZWaterSlides
00004A12                            		even
00004A12                            
00004A12                            ; ---------------------------------------------------------------------------
00004A12                            ; Subroutine to	move Sonic in demo mode
00004A12                            ; ---------------------------------------------------------------------------
00004A12                            
00004A12                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004A12                            
00004A12                            
00004A12                            MoveSonicInDemo:			; XREF: Level_MainLoop; et al
00004A12 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00004A16 6600                       		bne.s	MoveDemo_On	; if yes, branch
00004A18 4E75                       		rts	
00004A1A                            ; ===========================================================================
00004A1A                            
00004A1A                            ; This is an unused subroutine for recording a demo
00004A1A                            
00004A1A                            MoveDemo_Record:
00004A1A 43F9 0008 0000             		lea	($80000).l,a1
00004A20 3038 F790                  		move.w	($FFFFF790).w,d0
00004A24 D2C0                       		adda.w	d0,a1
00004A26 1038 F604                  		move.b	($FFFFF604).w,d0
00004A2A B011                       		cmp.b	(a1),d0
00004A2C 6600                       		bne.s	loc_3FFA
00004A2E 5229 0001                  		addq.b	#1,1(a1)
00004A32 0C29 00FF 0001             		cmpi.b	#$FF,1(a1)
00004A38 6700                       		beq.s	loc_3FFA
00004A3A 4E75                       		rts	
00004A3C                            ; ===========================================================================
00004A3C                            
00004A3C                            loc_3FFA:				; XREF: MoveDemo_Record
00004A3C 1340 0002                  		move.b	d0,2(a1)
00004A40 137C 0000 0003             		move.b	#0,3(a1)
00004A46 5478 F790                  		addq.w	#2,($FFFFF790).w
00004A4A 0278 03FF F790             		andi.w	#$3FF,($FFFFF790).w
00004A50 4E75                       		rts	
00004A52                            ; ===========================================================================
00004A52                            
00004A52                            MoveDemo_On:				; XREF: MoveSonicInDemo
00004A52 4A38 F604                  		tst.b	($FFFFF604).w
00004A56 6A00                       		bpl.s	loc_4022
00004A58 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00004A5C 6B00                       		bmi.s	loc_4022
00004A5E 11FC 0004 F600             		move.b	#4,($FFFFF600).w
00004A64                            
00004A64                            loc_4022:
00004A64 43F9 0000 0000             		lea	(Demo_Index).l,a1
00004A6A 7000                       		moveq	#0,d0
00004A6C 1038 FE10                  		move.b	($FFFFFE10).w,d0
00004A70 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w
00004A76 6600                       		bne.s	loc_4038
00004A78 7006                       		moveq	#6,d0
00004A7A                            
00004A7A                            loc_4038:
00004A7A E548                       		lsl.w	#2,d0
00004A7C 2271 0000                  		movea.l	(a1,d0.w),a1
00004A80 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00004A84 6A00                       		bpl.s	loc_4056
00004A86 43F9 0000 0000             		lea	(Demo_EndIndex).l,a1
00004A8C 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
00004A90 5340                       		subq.w	#1,d0
00004A92 E548                       		lsl.w	#2,d0
00004A94 2271 0000                  		movea.l	(a1,d0.w),a1
00004A98                            
00004A98                            loc_4056:
00004A98 3038 F790                  		move.w	($FFFFF790).w,d0
00004A9C D2C0                       		adda.w	d0,a1
00004A9E 1011                       		move.b	(a1),d0
00004AA0 41F8 F604                  		lea	($FFFFF604).w,a0
00004AA4 1200                       		move.b	d0,d1
00004AA6 1410                       		move.b	(a0),d2
00004AA8 B500                       		eor.b	d2,d0
00004AAA 10C1                       		move.b	d1,(a0)+
00004AAC C001                       		and.b	d1,d0
00004AAE 10C0                       		move.b	d0,(a0)+
00004AB0 5338 F792                  		subq.b	#1,($FFFFF792).w
00004AB4 6400                       		bcc.s	locret_407E
00004AB6 11E9 0003 F792             		move.b	3(a1),($FFFFF792).w
00004ABC 5478 F790                  		addq.w	#2,($FFFFF790).w
00004AC0                            
00004AC0                            locret_407E:
00004AC0 4E75                       		rts	
00004AC2                            ; End of function MoveSonicInDemo
00004AC2                            
00004AC2                            ; ===========================================================================
00004AC2                            ; ---------------------------------------------------------------------------
00004AC2                            ; Demo sequence	pointers
00004AC2                            ; ---------------------------------------------------------------------------
00004AC2                            Demo_Index:
00004AC2                            	include "_inc\Demo pointers for intro.asm"
00004AC2                            ; ---------------------------------------------------------------------------
00004AC2                            ; Demo sequence	pointers
00004AC2                            ; ---------------------------------------------------------------------------
00004AC2 0000 0000                  	dc.l Demo_GHZ
00004AC6 0000 0000                  	dc.l Demo_GHZ
00004ACA 0000 0000                  	dc.l Demo_MZ
00004ACE 0000 0000                  	dc.l Demo_MZ
00004AD2 0000 0000                  	dc.l Demo_SYZ
00004AD6 0000 0000                  	dc.l Demo_SYZ
00004ADA 0000 0000                  	dc.l Demo_SS
00004ADE 0000 0000                  	dc.l Demo_SS
00004ADE 0000 0000                  	dc.l Demo_SS
00004AE2                            
00004AE2                            Demo_EndIndex:
00004AE2                            	include "_inc\Demo pointers for ending.asm"
00004AE2                            ; ---------------------------------------------------------------------------
00004AE2                            ; Demo (ending) sequence pointers
00004AE2                            ; ---------------------------------------------------------------------------
00004AE2 0000 0000                  	dc.l Demo_EndGHZ1
00004AE6 0000 0000                  	dc.l Demo_EndMZ
00004AEA 0000 0000                  	dc.l Demo_EndSYZ
00004AEE 0000 0000                  	dc.l Demo_EndLZ
00004AF2 0000 0000                  	dc.l Demo_EndSLZ
00004AF6 0000 0000                  	dc.l Demo_EndSBZ1
00004AFA 0000 0000                  	dc.l Demo_EndSBZ2
00004AFE 0000 0000                  	dc.l Demo_EndGHZ2
00004AFE 0000 0000                  	dc.l Demo_EndGHZ2
00004B02                            
00004B02 008B 0837 0042 085C 006A+  		dc.b 0,	$8B, 8,	$37, 0,	$42, 8,	$5C, 0,	$6A, 8,	$5F, 0,	$2F, 8,	$2C
00004B12 0021 0803 2830 0808 002E+  		dc.b 0,	$21, 8,	3, $28,	$30, 8,	8, 0, $2E, 8, $15, 0, $F, 8, $46
00004B22 001A 08FF 08CA 0000 0000+  		dc.b 0,	$1A, 8,	$FF, 8,	$CA, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0
00004B32                            		even
00004B32                            
00004B32                            ; ---------------------------------------------------------------------------
00004B32                            ; Collision index loading subroutine
00004B32                            ; ---------------------------------------------------------------------------
00004B32                            
00004B32                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004B32                            
00004B32                            
00004B32                            ColIndexLoad:				; XREF: Level
00004B32 7000                       		moveq	#0,d0
00004B34 1038 FE10                  		move.b	($FFFFFE10).w,d0
00004B38 E548                       		lsl.w	#2,d0
00004B3A 21FB 0000 F796             		move.l	ColPointers(pc,d0.w),($FFFFF796).w
00004B40 4E75                       		rts	
00004B42                            ; End of function ColIndexLoad
00004B42                            
00004B42                            ; ===========================================================================
00004B42                            ; ---------------------------------------------------------------------------
00004B42                            ; Collision index pointers
00004B42                            ; ---------------------------------------------------------------------------
00004B42                            ColPointers:
00004B42                            	include "_inc\Collision index pointers.asm"
00004B42                            ; ---------------------------------------------------------------------------
00004B42                            ; Collision index pointers
00004B42                            ; ---------------------------------------------------------------------------
00004B42 0000 0000                  	dc.l Col_GHZ
00004B46 0000 0000                  	dc.l Col_LZ
00004B4A 0000 0000                  	dc.l Col_MZ
00004B4E 0000 0000                  	dc.l Col_SLZ
00004B52 0000 0000                  	dc.l Col_SYZ
00004B56 0000 0000                  	dc.l Col_SBZ
00004B56 0000 0000                  	dc.l Col_SBZ
00004B5A                            
00004B5A                            ; ---------------------------------------------------------------------------
00004B5A                            ; Oscillating number subroutine
00004B5A                            ; ---------------------------------------------------------------------------
00004B5A                            
00004B5A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004B5A                            
00004B5A                            
00004B5A                            OscillateNumInit:			; XREF: Level
00004B5A 43F8 FE5E                  		lea	($FFFFFE5E).w,a1
00004B5E 45F9 0000 0000             		lea	(Osc_Data).l,a2
00004B64 7220                       		moveq	#$20,d1
00004B66                            
00004B66                            Osc_Loop:
00004B66 32DA                       		move.w	(a2)+,(a1)+
00004B68 51C9 FFFC                  		dbf	d1,Osc_Loop
00004B6C 4E75                       		rts	
00004B6E                            ; End of function OscillateNumInit
00004B6E                            
00004B6E                            ; ===========================================================================
00004B6E 007C 0080                  Osc_Data:	dc.w $7C, $80		; baseline values
00004B72 0000 0080                  		dc.w 0,	$80
00004B76 0000 0080                  		dc.w 0,	$80
00004B7A 0000 0080                  		dc.w 0,	$80
00004B7E 0000 0080                  		dc.w 0,	$80
00004B82 0000 0080                  		dc.w 0,	$80
00004B86 0000 0080                  		dc.w 0,	$80
00004B8A 0000 0080                  		dc.w 0,	$80
00004B8E 0000 0080                  		dc.w 0,	$80
00004B92 0000 50F0                  		dc.w 0,	$50F0
00004B96 011E 2080                  		dc.w $11E, $2080
00004B9A 00B4 3080                  		dc.w $B4, $3080
00004B9E 010E 5080                  		dc.w $10E, $5080
00004BA2 01C2 7080                  		dc.w $1C2, $7080
00004BA6 0276 0080                  		dc.w $276, $80
00004BAA 0000 0080                  		dc.w 0,	$80
00004BAE 0000                       		dc.w 0
00004BB0                            		even
00004BB0                            
00004BB0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004BB0                            
00004BB0                            
00004BB0                            OscillateNumDo:				; XREF: Level
00004BB0 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00004BB6 6400                       		bcc.s	locret_41C4
00004BB8 43F8 FE5E                  		lea	($FFFFFE5E).w,a1
00004BBC 45F9 0000 0000             		lea	(Osc_Data2).l,a2
00004BC2 3619                       		move.w	(a1)+,d3
00004BC4 720F                       		moveq	#$F,d1
00004BC6                            
00004BC6                            loc_4184:
00004BC6 341A                       		move.w	(a2)+,d2
00004BC8 381A                       		move.w	(a2)+,d4
00004BCA 0303                       		btst	d1,d3
00004BCC 6600                       		bne.s	loc_41A4
00004BCE 3029 0002                  		move.w	2(a1),d0
00004BD2 D042                       		add.w	d2,d0
00004BD4 3340 0002                  		move.w	d0,2(a1)
00004BD8 D151                       		add.w	d0,0(a1)
00004BDA B811                       		cmp.b	0(a1),d4
00004BDC 6200                       		bhi.s	loc_41BA
00004BDE 03C3                       		bset	d1,d3
00004BE0 6000                       		bra.s	loc_41BA
00004BE2                            ; ===========================================================================
00004BE2                            
00004BE2                            loc_41A4:				; XREF: OscillateNumDo
00004BE2 3029 0002                  		move.w	2(a1),d0
00004BE6 9042                       		sub.w	d2,d0
00004BE8 3340 0002                  		move.w	d0,2(a1)
00004BEC D151                       		add.w	d0,0(a1)
00004BEE B811                       		cmp.b	0(a1),d4
00004BF0 6300                       		bls.s	loc_41BA
00004BF2 0383                       		bclr	d1,d3
00004BF4                            
00004BF4                            loc_41BA:
00004BF4 5849                       		addq.w	#4,a1
00004BF6 51C9 FFCE                  		dbf	d1,loc_4184
00004BFA 31C3 FE5E                  		move.w	d3,($FFFFFE5E).w
00004BFE                            
00004BFE                            locret_41C4:
00004BFE 4E75                       		rts	
00004C00                            ; End of function OscillateNumDo
00004C00                            
00004C00                            ; ===========================================================================
00004C00 0002 0010                  Osc_Data2:	dc.w 2,	$10		; XREF: OscillateNumDo
00004C04 0002 0018                  		dc.w 2,	$18
00004C08 0002 0020                  		dc.w 2,	$20
00004C0C 0002 0030                  		dc.w 2,	$30
00004C10 0004 0020                  		dc.w 4,	$20
00004C14 0008 0008                  		dc.w 8,	8
00004C18 0008 0040                  		dc.w 8,	$40
00004C1C 0004 0040                  		dc.w 4,	$40
00004C20 0002 0050                  		dc.w 2,	$50
00004C24 0002 0050                  		dc.w 2,	$50
00004C28 0002 0020                  		dc.w 2,	$20
00004C2C 0003 0030                  		dc.w 3,	$30
00004C30 0005 0050                  		dc.w 5,	$50
00004C34 0007 0070                  		dc.w 7,	$70
00004C38 0002 0010                  		dc.w 2,	$10
00004C3C 0002 0010                  		dc.w 2,	$10
00004C40                            		even
00004C40                            
00004C40                            ; ---------------------------------------------------------------------------
00004C40                            ; Subroutine to	change object animation	variables (rings, giant	rings)
00004C40                            ; ---------------------------------------------------------------------------
00004C40                            
00004C40                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004C40                            
00004C40                            
00004C40                            ChangeRingFrame:			; XREF: Level
00004C40 5338 FEC0                  		subq.b	#1,($FFFFFEC0).w
00004C44 6A00                       		bpl.s	loc_421C
00004C46 11FC 000B FEC0             		move.b	#$B,($FFFFFEC0).w
00004C4C 5338 FEC1                  		subq.b	#1,($FFFFFEC1).w
00004C50 0238 0007 FEC1             		andi.b	#7,($FFFFFEC1).w
00004C56                            
00004C56                            loc_421C:
00004C56 5338 FEC2                  		subq.b	#1,($FFFFFEC2).w
00004C5A 6A00                       		bpl.s	loc_4232
00004C5C 11FC 0007 FEC2             		move.b	#7,($FFFFFEC2).w
00004C62 5238 FEC3                  		addq.b	#1,($FFFFFEC3).w
00004C66 0238 0003 FEC3             		andi.b	#3,($FFFFFEC3).w
00004C6C                            
00004C6C                            loc_4232:
00004C6C 5338 FEC4                  		subq.b	#1,($FFFFFEC4).w
00004C70 6A00                       		bpl.s	loc_4250
00004C72 11FC 0007 FEC4             		move.b	#7,($FFFFFEC4).w
00004C78 5238 FEC5                  		addq.b	#1,($FFFFFEC5).w
00004C7C 0C38 0006 FEC5             		cmpi.b	#6,($FFFFFEC5).w
00004C82 6500                       		bcs.s	loc_4250
00004C84 11FC 0000 FEC5             		move.b	#0,($FFFFFEC5).w
00004C8A                            
00004C8A                            loc_4250:
00004C8A 4A38 FEC6                  		tst.b	($FFFFFEC6).w
00004C8E 6700                       		beq.s	locret_4272
00004C90 7000                       		moveq	#0,d0
00004C92 1038 FEC6                  		move.b	($FFFFFEC6).w,d0
00004C96 D078 FEC8                  		add.w	($FFFFFEC8).w,d0
00004C9A 31C0 FEC8                  		move.w	d0,($FFFFFEC8).w
00004C9E EF58                       		rol.w	#7,d0
00004CA0 0240 0003                  		andi.w	#3,d0
00004CA4 11C0 FEC7                  		move.b	d0,($FFFFFEC7).w
00004CA8 5338 FEC6                  		subq.b	#1,($FFFFFEC6).w
00004CAC                            
00004CAC                            locret_4272:
00004CAC 4E75                       		rts	
00004CAE                            ; End of function ChangeRingFrame
00004CAE                            
00004CAE                            ; ---------------------------------------------------------------------------
00004CAE                            ; End-of-act signpost pattern loading subroutine
00004CAE                            ; ---------------------------------------------------------------------------
00004CAE                            
00004CAE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004CAE                            
00004CAE                            
00004CAE                            SignpostArtLoad:			; XREF: Level
00004CAE 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
00004CB2 6600 0000                  		bne.w	Signpost_Exit	; if yes, branch
00004CB6 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w ; is act number 02 (act 3)?
00004CBC 6700                       		beq.s	Signpost_Exit	; if yes, branch
00004CBE 3038 F700                  		move.w	($FFFFF700).w,d0
00004CC2 3238 F72A                  		move.w	($FFFFF72A).w,d1
00004CC6 0441 0100                  		subi.w	#$100,d1
00004CCA B041                       		cmp.w	d1,d0		; has Sonic reached the	edge of	the level?
00004CCC 6D00                       		blt.s	Signpost_Exit	; if not, branch
00004CCE 4A38 FE1E                  		tst.b	($FFFFFE1E).w
00004CD2 6700                       		beq.s	Signpost_Exit
00004CD4 B278 F728                  		cmp.w	($FFFFF728).w,d1
00004CD8 6700                       		beq.s	Signpost_Exit
00004CDA 31C1 F728                  		move.w	d1,($FFFFF728).w ; move	left boundary to current screen	position
00004CDE 7012                       		moveq	#$12,d0
00004CE0 6000 CA40                  		bra.w	LoadPLC2	; load signpost	patterns
00004CE4                            ; ===========================================================================
00004CE4                            
00004CE4                            Signpost_Exit:
00004CE4 4E75                       		rts	
00004CE6                            ; End of function SignpostArtLoad
00004CE6                            
00004CE6                            ; ===========================================================================
00004CE6                            Demo_GHZ:	incbin	demodata\i_ghz.bin
00004D66                            Demo_MZ:	incbin	demodata\i_mz.bin
00004E96                            Demo_SYZ:	incbin	demodata\i_syz.bin
00004F16                            Demo_SS:	incbin	demodata\i_ss.bin
00005016                            ; ===========================================================================
00005016                            
00005016                            ; ---------------------------------------------------------------------------
00005016                            ; Special Stage
00005016                            ; ---------------------------------------------------------------------------
00005016                            
00005016                            SpecialStage:				; XREF: GameModeArray
00005016 303C 00CA                  		move.w	#$CA,d0
0000501A 6100 C460                  		bsr.w	PlaySound_Special ; play special stage entry sound
0000501E 6100 D294                  		bsr.w	Pal_MakeFlash
00005022 46FC 2700                  		move	#$2700,sr
00005026 4DF9 00C0 0004             		lea	($C00004).l,a6
0000502C 3CBC 8B03                  		move.w	#$8B03,(a6)
00005030 3CBC 8004                  		move.w	#$8004,(a6)
00005034 31FC 8AAF F624             		move.w	#$8AAF,($FFFFF624).w
0000503A 3CBC 9011                  		move.w	#$9011,(a6)
0000503E 3038 F60C                  		move.w	($FFFFF60C).w,d0
00005042 0200 00BF                  		andi.b	#$BF,d0
00005046 33C0 00C0 0004             		move.w	d0,($C00004).l
0000504C 6100 C338                  		bsr.w	ClearScreen
00005050 46FC 2300                  		move	#$2300,sr
00005054 4BF9 00C0 0004             		lea	($C00004).l,a5
0000505A 3ABC 8F01                  		move.w	#$8F01,(a5)
0000505E 2ABC 946F 93FF             		move.l	#$946F93FF,(a5)
00005064 3ABC 9780                  		move.w	#$9780,(a5)
00005068 2ABC 5000 0081             		move.l	#$50000081,(a5)
0000506E 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
00005076                            
00005076                            loc_463C:
00005076 3215                       		move.w	(a5),d1
00005078 0801 0001                  		btst	#1,d1
0000507C 66F8                       		bne.s	loc_463C
0000507E 3ABC 8F02                  		move.w	#$8F02,(a5)
00005082 6100 0000                  		bsr.w	SS_BGLoad
00005086 7014                       		moveq	#$14,d0
00005088 6100 C7D2                  		bsr.w	RunPLC_ROM	; load special stage patterns
0000508C 43F8 D000                  		lea	($FFFFD000).w,a1
00005090 7000                       		moveq	#0,d0
00005092 323C 07FF                  		move.w	#$7FF,d1
00005096                            
00005096                            SS_ClrObjRam:
00005096 22C0                       		move.l	d0,(a1)+
00005098 51C9 FFFC                  		dbf	d1,SS_ClrObjRam	; clear	the object RAM
0000509C                            
0000509C 43F8 F700                  		lea	($FFFFF700).w,a1
000050A0 7000                       		moveq	#0,d0
000050A2 323C 003F                  		move.w	#$3F,d1
000050A6                            
000050A6                            SS_ClrRam:
000050A6 22C0                       		move.l	d0,(a1)+
000050A8 51C9 FFFC                  		dbf	d1,SS_ClrRam	; clear	variables
000050AC                            
000050AC 43F8 FE60                  		lea	($FFFFFE60).w,a1
000050B0 7000                       		moveq	#0,d0
000050B2 323C 0027                  		move.w	#$27,d1
000050B6                            
000050B6                            SS_ClrRam2:
000050B6 22C0                       		move.l	d0,(a1)+
000050B8 51C9 FFFC                  		dbf	d1,SS_ClrRam2	; clear	variables
000050BC                            
000050BC 43F8 AA00                  		lea	($FFFFAA00).w,a1
000050C0 7000                       		moveq	#0,d0
000050C2 323C 007F                  		move.w	#$7F,d1
000050C6                            
000050C6                            SS_ClrNemRam:
000050C6 22C0                       		move.l	d0,(a1)+
000050C8 51C9 FFFC                  		dbf	d1,SS_ClrNemRam	; clear	Nemesis	buffer
000050CC                            
000050CC 4238 F64E                  		clr.b	($FFFFF64E).w
000050D0 4278 FE02                  		clr.w	($FFFFFE02).w
000050D4 700A                       		moveq	#$A,d0
000050D6 6100 D35C                  		bsr.w	PalLoad1	; load special stage pallet
000050DA 4EB9 0000 0000             		jsr	SS_Load
000050E0 21FC 0000 0000 F700        		move.l	#0,($FFFFF700).w
000050E8 21FC 0000 0000 F704        		move.l	#0,($FFFFF704).w
000050F0 11FC 0009 D000             		move.b	#9,($FFFFD000).w ; load	special	stage Sonic object
000050F6 6100 0000                  		bsr.w	PalCycle_SS
000050FA 4278 F780                  		clr.w	($FFFFF780).w	; set stage angle to "upright"
000050FE 31FC 0040 F782             		move.w	#$40,($FFFFF782).w ; set stage rotation	speed
00005104 303C 0089                  		move.w	#$89,d0
00005108 6100 C36C                  		bsr.w	PlaySound	; play special stage BG	music
0000510C 31FC 0000 F790             		move.w	#0,($FFFFF790).w
00005112 43F9 0000 4AC2             		lea	(Demo_Index).l,a1
00005118 7006                       		moveq	#6,d0
0000511A E548                       		lsl.w	#2,d0
0000511C 2271 0000                  		movea.l	(a1,d0.w),a1
00005120 11E9 0001 F792             		move.b	1(a1),($FFFFF792).w
00005126 5338 F792                  		subq.b	#1,($FFFFF792).w
0000512A 4278 FE20                  		clr.w	($FFFFFE20).w
0000512E 4238 FE1B                  		clr.b	($FFFFFE1B).w
00005132 31FC 0000 FE08             		move.w	#0,($FFFFFE08).w
00005138 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
0000513E 4A38 FFE2                  		tst.b	($FFFFFFE2).w	; has debug cheat been entered?
00005142 6700                       		beq.s	SS_NoDebug	; if not, branch
00005144 0838 0006 F604             		btst	#6,($FFFFF604).w ; is A	button pressed?
0000514A 6700                       		beq.s	SS_NoDebug	; if not, branch
0000514C 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
00005152                            
00005152                            SS_NoDebug:
00005152 3038 F60C                  		move.w	($FFFFF60C).w,d0
00005156 0000 0040                  		ori.b	#$40,d0
0000515A 33C0 00C0 0004             		move.w	d0,($C00004).l
00005160 6100 D0A6                  		bsr.w	Pal_MakeWhite
00005164                            
00005164                            ; ---------------------------------------------------------------------------
00005164                            ; Main Special Stage loop
00005164                            ; ---------------------------------------------------------------------------
00005164                            
00005164                            SS_MainLoop:
00005164 6100 C322                  		bsr.w	PauseGame
00005168 11FC 000A F62A             		move.b	#$A,($FFFFF62A).w
0000516E 6100 E238                  		bsr.w	DelayProgram
00005172 6100 F89E                  		bsr.w	MoveSonicInDemo
00005176 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w
0000517C 4EB9 0000 0000             		jsr	ObjectsLoad
00005182 4EB9 0000 0000             		jsr	BuildSprites
00005188 4EB9 0000 0000             		jsr	SS_ShowLayout
0000518E 6100 0000                  		bsr.w	SS_BGAnimate
00005192 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00005196 6700                       		beq.s	SS_ChkEnd	; if not, branch
00005198 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
0000519C 6700 0000                  		beq.w	SS_ToSegaScreen	; if not, branch
000051A0                            
000051A0                            SS_ChkEnd:
000051A0 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode $10 (special stage)?
000051A6 6700 FFBC                  		beq.w	SS_MainLoop	; if yes, branch
000051AA                            
000051AA 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
000051AE 6600 0000                  		bne.w	SS_ToSegaScreen	; if yes, branch
000051B2 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
000051B8 0C78 0503 FE10             		cmpi.w	#$503,($FFFFFE10).w ; is level number higher than FZ?
000051BE 6500                       		bcs.s	SS_End		; if not, branch
000051C0 4278 FE10                  		clr.w	($FFFFFE10).w	; set to GHZ1
000051C4                            
000051C4                            SS_End:
000051C4 31FC 003C F614             		move.w	#60,($FFFFF614).w ; set	delay time to 1	second
000051CA 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
000051D0 4278 F794                  		clr.w	($FFFFF794).w
000051D4                            
000051D4                            SS_EndLoop:
000051D4 11FC 0016 F62A             		move.b	#$16,($FFFFF62A).w
000051DA 6100 E1CC                  		bsr.w	DelayProgram
000051DE 6100 F832                  		bsr.w	MoveSonicInDemo
000051E2 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w
000051E8 4EB9 0000 0000             		jsr	ObjectsLoad
000051EE 4EB9 0000 0000             		jsr	BuildSprites
000051F4 4EB9 0000 0000             		jsr	SS_ShowLayout
000051FA 6100 0000                  		bsr.w	SS_BGAnimate
000051FE 5378 F794                  		subq.w	#1,($FFFFF794).w
00005202 6A00                       		bpl.s	loc_47D4
00005204 31FC 0002 F794             		move.w	#2,($FFFFF794).w
0000520A 6100 D0C8                  		bsr.w	Pal_ToWhite
0000520E                            
0000520E                            loc_47D4:
0000520E 4A78 F614                  		tst.w	($FFFFF614).w
00005212 66C0                       		bne.s	SS_EndLoop
00005214                            
00005214 46FC 2700                  		move	#$2700,sr
00005218 4DF9 00C0 0004             		lea	($C00004).l,a6
0000521E 3CBC 8230                  		move.w	#$8230,(a6)
00005222 3CBC 8407                  		move.w	#$8407,(a6)
00005226 3CBC 9001                  		move.w	#$9001,(a6)
0000522A 6100 C15A                  		bsr.w	ClearScreen
0000522E 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
00005238 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
0000523E 6100 C370                  		bsr.w	NemDec
00005242 4EB9 0000 0000             		jsr	Hud_Base
00005248 4278 C800                  		clr.w	($FFFFC800).w
0000524C 21FC FFFF C800 C8FC        		move.l	#$FFFFC800,($FFFFC8FC).w
00005254 46FC 2300                  		move	#$2300,sr
00005258 7011                       		moveq	#$11,d0
0000525A 6100 D214                  		bsr.w	PalLoad2	; load results screen pallet
0000525E 7000                       		moveq	#0,d0
00005260 6100 C4C0                  		bsr.w	LoadPLC2
00005264 701B                       		moveq	#$1B,d0
00005266 6100 C488                  		bsr.w	LoadPLC		; load results screen patterns
0000526A 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; update score	counter
00005270 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; update ring bonus counter
00005276 3038 FE20                  		move.w	($FFFFFE20).w,d0
0000527A C0FC 000A                  		mulu.w	#10,d0		; multiply rings by 10
0000527E 31C0 F7D4                  		move.w	d0,($FFFFF7D4).w ; set rings bonus
00005282 303C 008E                  		move.w	#$8E,d0
00005286 4EB9 0000 147C             		jsr	(PlaySound_Special).l ;	play end-of-level music
0000528C 43F8 D000                  		lea	($FFFFD000).w,a1
00005290 7000                       		moveq	#0,d0
00005292 323C 07FF                  		move.w	#$7FF,d1
00005296                            
00005296                            SS_EndClrObjRam:
00005296 22C0                       		move.l	d0,(a1)+
00005298 51C9 FFFC                  		dbf	d1,SS_EndClrObjRam ; clear object RAM
0000529C                            
0000529C 11FC 007E D5C0             		move.b	#$7E,($FFFFD5C0).w ; load results screen object
000052A2                            
000052A2                            SS_NormalExit:
000052A2 6100 C1E4                  		bsr.w	PauseGame
000052A6 11FC 000C F62A             		move.b	#$C,($FFFFF62A).w
000052AC 6100 E0FA                  		bsr.w	DelayProgram
000052B0 4EB9 0000 0000             		jsr	ObjectsLoad
000052B6 4EB9 0000 0000             		jsr	BuildSprites
000052BC 6100 C49E                  		bsr.w	RunPLC_RAM
000052C0 4A78 FE02                  		tst.w	($FFFFFE02).w
000052C4 67DC                       		beq.s	SS_NormalExit
000052C6 4AB8 F680                  		tst.l	($FFFFF680).w
000052CA 66D6                       		bne.s	SS_NormalExit
000052CC 303C 00CA                  		move.w	#$CA,d0
000052D0 6100 C1AA                  		bsr.w	PlaySound_Special ; play special stage exit sound
000052D4 6100 CFDE                  		bsr.w	Pal_MakeFlash
000052D8 4E75                       		rts	
000052DA                            ; ===========================================================================
000052DA                            
000052DA                            SS_ToSegaScreen:
000052DA 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set screen mode to 00 (Sega screen)
000052E0 4E75                       		rts
000052E2                            
000052E2                            ; ---------------------------------------------------------------------------
000052E2                            ; Special stage	background loading subroutine
000052E2                            ; ---------------------------------------------------------------------------
000052E2                            
000052E2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000052E2                            
000052E2                            
000052E2                            SS_BGLoad:				; XREF: SpecialStage
000052E2 43F9 00FF 0000             		lea	($FF0000).l,a1
000052E8 41F9 0000 0000             		lea	(Eni_SSBg1).l,a0 ; load	mappings for the birds and fish
000052EE 303C 4051                  		move.w	#$4051,d0
000052F2 6100 C59A                  		bsr.w	EniDec
000052F6 263C 5000 0001             		move.l	#$50000001,d3
000052FC 45F9 00FF 0080             		lea	($FF0080).l,a2
00005302 7E06                       		moveq	#6,d7
00005304                            
00005304                            loc_48BE:
00005304 2003                       		move.l	d3,d0
00005306 7C03                       		moveq	#3,d6
00005308 7800                       		moveq	#0,d4
0000530A 0C47 0003                  		cmpi.w	#3,d7
0000530E 6400                       		bcc.s	loc_48CC
00005310 7801                       		moveq	#1,d4
00005312                            
00005312                            loc_48CC:
00005312 7A07                       		moveq	#7,d5
00005314                            
00005314                            loc_48CE:
00005314 224A                       		movea.l	a2,a1
00005316 0A04 0001                  		eori.b	#1,d4
0000531A 6600                       		bne.s	loc_48E2
0000531C 0C47 0006                  		cmpi.w	#6,d7
00005320 6600                       		bne.s	loc_48F2
00005322 43F9 00FF 0000             		lea	($FF0000).l,a1
00005328                            
00005328                            loc_48E2:
00005328 48E7 F800                  		movem.l	d0-d4,-(sp)
0000532C 7207                       		moveq	#7,d1
0000532E 7407                       		moveq	#7,d2
00005330 6100 C1CE                  		bsr.w	ShowVDPGraphics
00005334 4CDF 001F                  		movem.l	(sp)+,d0-d4
00005338                            
00005338                            loc_48F2:
00005338 0680 0010 0000             		addi.l	#$100000,d0
0000533E 51CD FFD4                  		dbf	d5,loc_48CE
00005342 0680 0380 0000             		addi.l	#$3800000,d0
00005348 0A04 0001                  		eori.b	#1,d4
0000534C 51CE FFC4                  		dbf	d6,loc_48CC
00005350 0683 1000 0000             		addi.l	#$10000000,d3
00005356 6A00                       		bpl.s	loc_491C
00005358 4843                       		swap	d3
0000535A 0683 0000 C000             		addi.l	#$C000,d3
00005360 4843                       		swap	d3
00005362                            
00005362                            loc_491C:
00005362 D4FC 0080                  		adda.w	#$80,a2
00005366 51CF FF9C                  		dbf	d7,loc_48BE
0000536A 43F9 00FF 0000             		lea	($FF0000).l,a1
00005370 41F9 0000 0000             		lea	(Eni_SSBg2).l,a0 ; load	mappings for the clouds
00005376 303C 4000                  		move.w	#$4000,d0
0000537A 6100 C512                  		bsr.w	EniDec
0000537E 43F9 00FF 0000             		lea	($FF0000).l,a1
00005384 203C 4000 0003             		move.l	#$40000003,d0
0000538A 723F                       		moveq	#$3F,d1
0000538C 741F                       		moveq	#$1F,d2
0000538E 6100 C170                  		bsr.w	ShowVDPGraphics
00005392 43F9 00FF 0000             		lea	($FF0000).l,a1
00005398 203C 5000 0003             		move.l	#$50000003,d0
0000539E 723F                       		moveq	#$3F,d1
000053A0 743F                       		moveq	#$3F,d2
000053A2 6100 C15C                  		bsr.w	ShowVDPGraphics
000053A6 4E75                       		rts	
000053A8                            ; End of function SS_BGLoad
000053A8                            
000053A8                            ; ---------------------------------------------------------------------------
000053A8                            ; Pallet cycling routine - special stage
000053A8                            ; ---------------------------------------------------------------------------
000053A8                            
000053A8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000053A8                            
000053A8                            
000053A8                            PalCycle_SS:				; XREF: loc_DA6; SpecialStage
000053A8 4A78 F63A                  		tst.w	($FFFFF63A).w
000053AC 6600                       		bne.s	locret_49E6
000053AE 5378 F79C                  		subq.w	#1,($FFFFF79C).w
000053B2 6A00                       		bpl.s	locret_49E6
000053B4 4DF9 00C0 0004             		lea	($C00004).l,a6
000053BA 3038 F79A                  		move.w	($FFFFF79A).w,d0
000053BE 5278 F79A                  		addq.w	#1,($FFFFF79A).w
000053C2 0240 001F                  		andi.w	#$1F,d0
000053C6 E548                       		lsl.w	#2,d0
000053C8 41F9 0000 0000             		lea	(byte_4A3C).l,a0
000053CE D0C0                       		adda.w	d0,a0
000053D0 1018                       		move.b	(a0)+,d0
000053D2 6A00                       		bpl.s	loc_4992
000053D4 303C 01FF                  		move.w	#$1FF,d0
000053D8                            
000053D8                            loc_4992:
000053D8 31C0 F79C                  		move.w	d0,($FFFFF79C).w
000053DC 7000                       		moveq	#0,d0
000053DE 1018                       		move.b	(a0)+,d0
000053E0 31C0 F7A0                  		move.w	d0,($FFFFF7A0).w
000053E4 43F9 0000 0000             		lea	(byte_4ABC).l,a1
000053EA 43F1 0000                  		lea	(a1,d0.w),a1
000053EE 303C 8200                  		move.w	#-$7E00,d0
000053F2 1019                       		move.b	(a1)+,d0
000053F4 3C80                       		move.w	d0,(a6)
000053F6 11D1 F616                  		move.b	(a1),($FFFFF616).w
000053FA 303C 8400                  		move.w	#-$7C00,d0
000053FE 1018                       		move.b	(a0)+,d0
00005400 3C80                       		move.w	d0,(a6)
00005402 23FC 4000 0010 00C0 0004   		move.l	#$40000010,($C00004).l
0000540C 23F8 F616 00C0 0000        		move.l	($FFFFF616).w,($C00000).l
00005414 7000                       		moveq	#0,d0
00005416 1018                       		move.b	(a0)+,d0
00005418 6B00                       		bmi.s	loc_49E8
0000541A 43F9 0000 0000             		lea	(Pal_SSCyc1).l,a1
00005420 D2C0                       		adda.w	d0,a1
00005422 45F8 FB4E                  		lea	($FFFFFB4E).w,a2
00005426 24D9                       		move.l	(a1)+,(a2)+
00005428 24D9                       		move.l	(a1)+,(a2)+
0000542A 24D9                       		move.l	(a1)+,(a2)+
0000542C                            
0000542C                            locret_49E6:
0000542C 4E75                       		rts	
0000542E                            ; ===========================================================================
0000542E                            
0000542E                            loc_49E8:				; XREF: PalCycle_SS
0000542E 3238 F79E                  		move.w	($FFFFF79E).w,d1
00005432 0C40 008A                  		cmpi.w	#$8A,d0
00005436 6500                       		bcs.s	loc_49F4
00005438 5241                       		addq.w	#1,d1
0000543A                            
0000543A                            loc_49F4:
0000543A C2FC 002A                  		mulu.w	#$2A,d1
0000543E 43F9 0000 0000             		lea	(Pal_SSCyc2).l,a1
00005444 D2C1                       		adda.w	d1,a1
00005446 0240 007F                  		andi.w	#$7F,d0
0000544A 0880 0000                  		bclr	#0,d0
0000544E 6700                       		beq.s	loc_4A18
00005450 45F8 FB6E                  		lea	($FFFFFB6E).w,a2
00005454 24D1                       		move.l	(a1),(a2)+
00005456 24E9 0004                  		move.l	4(a1),(a2)+
0000545A 24E9 0008                  		move.l	8(a1),(a2)+
0000545E                            
0000545E                            loc_4A18:
0000545E D2FC 000C                  		adda.w	#$C,a1
00005462 45F8 FB5A                  		lea	($FFFFFB5A).w,a2
00005466 0C40 000A                  		cmpi.w	#$A,d0
0000546A 6500                       		bcs.s	loc_4A2E
0000546C 0440 000A                  		subi.w	#$A,d0
00005470 45F8 FB7A                  		lea	($FFFFFB7A).w,a2
00005474                            
00005474                            loc_4A2E:
00005474 3200                       		move.w	d0,d1
00005476 D040                       		add.w	d0,d0
00005478 D041                       		add.w	d1,d0
0000547A D2C0                       		adda.w	d0,a1
0000547C 24D9                       		move.l	(a1)+,(a2)+
0000547E 34D9                       		move.w	(a1)+,(a2)+
00005480 4E75                       		rts	
00005482                            ; End of function PalCycle_SS
00005482                            
00005482                            ; ===========================================================================
00005482 0300 0792 0300 0790 0300+  byte_4A3C:	dc.b 3,	0, 7, $92, 3, 0, 7, $90, 3, 0, 7, $8E, 3, 0, 7,	$8C
00005492                            					; XREF: PalCycle_SS
00005492 0300 078B 0300 0780 0300+  		dc.b 3,	0, 7, $8B, 3, 0, 7, $80, 3, 0, 7, $82, 3, 0, 7,	$84
000054A2 0300 0786 0300 0788 0708+  		dc.b 3,	0, 7, $86, 3, 0, 7, $88, 7, 8, 7, 0, 7,	$A, 7, $C
000054B2 FF0C 0718 FF0C 0718 070A+  		dc.b $FF, $C, 7, $18, $FF, $C, 7, $18, 7, $A, 7, $C, 7,	8, 7, 0
000054C2 0300 0688 0300 0686 0300+  		dc.b 3,	0, 6, $88, 3, 0, 6, $86, 3, 0, 6, $84, 3, 0, 6,	$82
000054D2 0300 0681 0300 068A 0300+  		dc.b 3,	0, 6, $81, 3, 0, 6, $8A, 3, 0, 6, $8C, 3, 0, 6,	$8E
000054E2 0300 0690 0300 0692 0702+  		dc.b 3,	0, 6, $90, 3, 0, 6, $92, 7, 2, 6, $24, 7, 4, 6,	$30
000054F2 FF06 063C FF06 063C 0704+  		dc.b $FF, 6, 6,	$3C, $FF, 6, 6,	$3C, 7,	4, 6, $30, 7, 2, 6, $24
00005502                            		even
00005502 1001 1800 1801 2000 2001+  byte_4ABC:	dc.b $10, 1, $18, 0, $18, 1, $20, 0, $20, 1, $28, 0, $28, 1
00005510                            					; XREF: PalCycle_SS
00005510                            		even
00005510                            
00005510                            Pal_SSCyc1:	incbin	pallet\c_ss_1.bin
00005558                            		even
00005558                            Pal_SSCyc2:	incbin	pallet\c_ss_2.bin
0000562A                            		even
0000562A                            
0000562A                            ; ---------------------------------------------------------------------------
0000562A                            ; Subroutine to	make the special stage background animated
0000562A                            ; ---------------------------------------------------------------------------
0000562A                            
0000562A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000562A                            
0000562A                            
0000562A                            SS_BGAnimate:				; XREF: SpecialStage
0000562A 3038 F7A0                  		move.w	($FFFFF7A0).w,d0
0000562E 6600                       		bne.s	loc_4BF6
00005630 31FC 0000 F70C             		move.w	#0,($FFFFF70C).w
00005636 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
0000563C                            
0000563C                            loc_4BF6:
0000563C 0C40 0008                  		cmpi.w	#8,d0
00005640 6400                       		bcc.s	loc_4C4E
00005642 0C40 0006                  		cmpi.w	#6,d0
00005646 6600                       		bne.s	loc_4C10
00005648 5278 F718                  		addq.w	#1,($FFFFF718).w
0000564C 5278 F70C                  		addq.w	#1,($FFFFF70C).w
00005650 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00005656                            
00005656                            loc_4C10:
00005656 7000                       		moveq	#0,d0
00005658 3038 F708                  		move.w	($FFFFF708).w,d0
0000565C 4440                       		neg.w	d0
0000565E 4840                       		swap	d0
00005660 43F9 0000 0000             		lea	(byte_4CCC).l,a1
00005666 47F8 AA00                  		lea	($FFFFAA00).w,a3
0000566A 7609                       		moveq	#9,d3
0000566C                            
0000566C                            loc_4C26:
0000566C 302B 0002                  		move.w	2(a3),d0
00005670 6100 DD68                  		bsr.w	CalcSine
00005674 7400                       		moveq	#0,d2
00005676 1419                       		move.b	(a1)+,d2
00005678 C1C2                       		muls.w	d2,d0
0000567A E080                       		asr.l	#8,d0
0000567C 36C0                       		move.w	d0,(a3)+
0000567E 1419                       		move.b	(a1)+,d2
00005680 4882                       		ext.w	d2
00005682 D55B                       		add.w	d2,(a3)+
00005684 51CB FFE6                  		dbf	d3,loc_4C26
00005688 47F8 AA00                  		lea	($FFFFAA00).w,a3
0000568C 45F9 0000 0000             		lea	(byte_4CB8).l,a2
00005692 6000                       		bra.s	loc_4C7E
00005694                            ; ===========================================================================
00005694                            
00005694                            loc_4C4E:				; XREF: SS_BGAnimate
00005694 0C40 000C                  		cmpi.w	#$C,d0
00005698 6600                       		bne.s	loc_4C74
0000569A 5378 F718                  		subq.w	#1,($FFFFF718).w
0000569E 47F8 AB00                  		lea	($FFFFAB00).w,a3
000056A2 243C 0001 8000             		move.l	#$18000,d2
000056A8 7206                       		moveq	#6,d1
000056AA                            
000056AA                            loc_4C64:
000056AA 2013                       		move.l	(a3),d0
000056AC 9082                       		sub.l	d2,d0
000056AE 26C0                       		move.l	d0,(a3)+
000056B0 0482 0000 2000             		subi.l	#$2000,d2
000056B6 51C9 FFF2                  		dbf	d1,loc_4C64
000056BA                            
000056BA                            loc_4C74:
000056BA 47F8 AB00                  		lea	($FFFFAB00).w,a3
000056BE 45F9 0000 0000             		lea	(byte_4CC4).l,a2
000056C4                            
000056C4                            loc_4C7E:
000056C4 43F8 CC00                  		lea	($FFFFCC00).w,a1
000056C8 3038 F718                  		move.w	($FFFFF718).w,d0
000056CC 4440                       		neg.w	d0
000056CE 4840                       		swap	d0
000056D0 7600                       		moveq	#0,d3
000056D2 161A                       		move.b	(a2)+,d3
000056D4 3438 F70C                  		move.w	($FFFFF70C).w,d2
000056D8 4442                       		neg.w	d2
000056DA 0242 00FF                  		andi.w	#$FF,d2
000056DE E54A                       		lsl.w	#2,d2
000056E0                            
000056E0                            loc_4C9A:
000056E0 301B                       		move.w	(a3)+,d0
000056E2 544B                       		addq.w	#2,a3
000056E4 7200                       		moveq	#0,d1
000056E6 121A                       		move.b	(a2)+,d1
000056E8 5341                       		subq.w	#1,d1
000056EA                            
000056EA                            loc_4CA4:
000056EA 2380 2000                  		move.l	d0,(a1,d2.w)
000056EE 5842                       		addq.w	#4,d2
000056F0 0242 03FC                  		andi.w	#$3FC,d2
000056F4 51C9 FFF4                  		dbf	d1,loc_4CA4
000056F8 51CB FFE6                  		dbf	d3,loc_4C9A
000056FC 4E75                       		rts	
000056FE                            ; End of function SS_BGAnimate
000056FE                            
000056FE                            ; ===========================================================================
000056FE 0928 1810 2818 1030 1808+  byte_4CB8:	dc.b 9,	$28, $18, $10, $28, $18, $10, $30, $18,	8, $10,	0
0000570A                            		even
0000570A 0630 3030 2818 1818        byte_4CC4:	dc.b 6,	$30, $30, $30, $28, $18, $18, $18
00005712                            		even
00005712 0802 04FF 0203 08FF 0402+  byte_4CCC:	dc.b 8,	2, 4, $FF, 2, 3, 8, $FF, 4, 2, 2, 3, 8,	$FD, 4,	2, 2, 3, 2, $FF
00005726                            		even
00005726                            					; XREF: SS_BGAnimate
00005726                            ; ===========================================================================
00005726                            
00005726                            ; ---------------------------------------------------------------------------
00005726                            ; Continue screen
00005726                            ; ---------------------------------------------------------------------------
00005726                            
00005726                            ContinueScreen:				; XREF: GameModeArray
00005726 6100 CA5E                  		bsr.w	Pal_FadeFrom
0000572A 46FC 2700                  		move	#$2700,sr
0000572E 3038 F60C                  		move.w	($FFFFF60C).w,d0
00005732 0200 00BF                  		andi.b	#$BF,d0
00005736 33C0 00C0 0004             		move.w	d0,($C00004).l
0000573C 4DF9 00C0 0004             		lea	($C00004).l,a6
00005742 3CBC 8004                  		move.w	#$8004,(a6)
00005746 3CBC 8700                  		move.w	#$8700,(a6)
0000574A 6100 BC3A                  		bsr.w	ClearScreen
0000574E 43F8 D000                  		lea	($FFFFD000).w,a1
00005752 7000                       		moveq	#0,d0
00005754 323C 07FF                  		move.w	#$7FF,d1
00005758                            
00005758                            Cont_ClrObjRam:
00005758 22C0                       		move.l	d0,(a1)+
0000575A 51C9 FFFC                  		dbf	d1,Cont_ClrObjRam ; clear object RAM
0000575E                            
0000575E 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
00005768 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
0000576E 6100 BE40                  		bsr.w	NemDec
00005772 23FC 6000 0002 00C0 0004   		move.l	#$60000002,($C00004).l
0000577C 41F9 0000 0000             		lea	(Nem_ContSonic).l,a0 ; load Sonic patterns
00005782 6100 BE2C                  		bsr.w	NemDec
00005786 23FC 6A20 0002 00C0 0004   		move.l	#$6A200002,($C00004).l
00005790 41F9 0000 0000             		lea	(Nem_MiniSonic).l,a0 ; load continue screen patterns
00005796 6100 BE18                  		bsr.w	NemDec
0000579A 720A                       		moveq	#10,d1
0000579C 4EB9 0000 0000             		jsr	ContScrCounter	; run countdown	(start from 10)
000057A2 7012                       		moveq	#$12,d0
000057A4 6100 CC8E                  		bsr.w	PalLoad1	; load continue	screen pallet
000057A8 103C 0090                  		move.b	#$90,d0
000057AC 6100 BCC8                  		bsr.w	PlaySound	; play continue	music
000057B0 31FC 0293 F614             		move.w	#659,($FFFFF614).w ; set time delay to 11 seconds
000057B6 42B8 F700                  		clr.l	($FFFFF700).w
000057BA 21FC 0100 0000 F704        		move.l	#$1000000,($FFFFF704).w
000057C2 11FC 0081 D000             		move.b	#$81,($FFFFD000).w ; load Sonic	object
000057C8 11FC 0080 D040             		move.b	#$80,($FFFFD040).w ; load continue screen objects
000057CE 11FC 0080 D080             		move.b	#$80,($FFFFD080).w
000057D4 11FC 0003 D098             		move.b	#3,($FFFFD098).w
000057DA 11FC 0004 D09A             		move.b	#4,($FFFFD09A).w
000057E0 11FC 0080 D0C0             		move.b	#$80,($FFFFD0C0).w
000057E6 11FC 0004 D0E4             		move.b	#4,($FFFFD0E4).w
000057EC 4EB9 0000 0000             		jsr	ObjectsLoad
000057F2 4EB9 0000 0000             		jsr	BuildSprites
000057F8 3038 F60C                  		move.w	($FFFFF60C).w,d0
000057FC 0000 0040                  		ori.b	#$40,d0
00005800 33C0 00C0 0004             		move.w	d0,($C00004).l
00005806 6100 C8C8                  		bsr.w	Pal_FadeTo
0000580A                            
0000580A                            ; ---------------------------------------------------------------------------
0000580A                            ; Continue screen main loop
0000580A                            ; ---------------------------------------------------------------------------
0000580A                            
0000580A                            Cont_MainLoop:
0000580A 11FC 0016 F62A             		move.b	#$16,($FFFFF62A).w
00005810 6100 DB96                  		bsr.w	DelayProgram
00005814 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000581A 6400                       		bcc.s	loc_4DF2
0000581C 46FC 2700                  		move	#$2700,sr
00005820 3238 F614                  		move.w	($FFFFF614).w,d1
00005824 82FC 003C                  		divu.w	#$3C,d1
00005828 0281 0000 000F             		andi.l	#$F,d1
0000582E 4EB9 0000 0000             		jsr	ContScrCounter
00005834 46FC 2300                  		move	#$2300,sr
00005838                            
00005838                            loc_4DF2:
00005838 4EB9 0000 0000             		jsr	ObjectsLoad
0000583E 4EB9 0000 0000             		jsr	BuildSprites
00005844 0C78 0180 D008             		cmpi.w	#$180,($FFFFD008).w ; has Sonic	run off	screen?
0000584A 6400                       		bcc.s	Cont_GotoLevel	; if yes, branch
0000584C 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00005852 64B6                       		bcc.s	Cont_MainLoop
00005854 4A78 F614                  		tst.w	($FFFFF614).w
00005858 6600 FFB0                  		bne.w	Cont_MainLoop
0000585C 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
00005862 4E75                       		rts	
00005864                            ; ===========================================================================
00005864                            
00005864                            Cont_GotoLevel:				; XREF: Cont_MainLoop
00005864 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
0000586A 11FC 0003 FE12             		move.b	#3,($FFFFFE12).w ; set lives to	3
00005870 7000                       		moveq	#0,d0
00005872 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00005876 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
0000587A 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
0000587E 11C0 FE30                  		move.b	d0,($FFFFFE30).w ; clear lamppost count
00005882 5338 FE18                  		subq.b	#1,($FFFFFE18).w ; subtract 1 from continues
00005886 4E75                       		rts	
00005888                            ; ===========================================================================
00005888                            
00005888                            ; ---------------------------------------------------------------------------
00005888                            ; Object 80 - Continue screen elements
00005888                            ; ---------------------------------------------------------------------------
00005888                            
00005888                            Obj80:					; XREF: Obj_Index
00005888 7000                       		moveq	#0,d0
0000588A 1028 0024                  		move.b	$24(a0),d0
0000588E 323B 0000                  		move.w	Obj80_Index(pc,d0.w),d1
00005892 4EFB 1000                  		jmp	Obj80_Index(pc,d1.w)
00005896                            ; ===========================================================================
00005896 0000                       Obj80_Index:	dc.w Obj80_Main-Obj80_Index
00005898 0000                       		dc.w Obj80_Display-Obj80_Index
0000589A 0000                       		dc.w Obj80_MakeMiniSonic-Obj80_Index
0000589C 0000                       		dc.w Obj80_ChkType-Obj80_Index
0000589E                            ; ===========================================================================
0000589E                            
0000589E                            Obj80_Main:				; XREF: Obj80_Index
0000589E 5428 0024                  		addq.b	#2,$24(a0)
000058A2 217C 0000 0000 0004        		move.l	#Map_obj80,4(a0)
000058AA 317C 8500 0002             		move.w	#$8500,2(a0)
000058B0 117C 0000 0001             		move.b	#0,1(a0)
000058B6 117C 003C 0019             		move.b	#$3C,$19(a0)
000058BC 317C 0120 0008             		move.w	#$120,8(a0)
000058C2 317C 00C0 000A             		move.w	#$C0,$A(a0)
000058C8 31FC 0000 FE20             		move.w	#0,($FFFFFE20).w ; clear rings
000058CE                            
000058CE                            Obj80_Display:				; XREF: Obj80_Index
000058CE 4EF9 0000 0000             		jmp	DisplaySprite
000058D4                            ; ===========================================================================
000058D4                            Obj80_MiniSonicPos:
000058D4 0116 012A 0102 013E 00EE+  		dc.w $116, $12A, $102, $13E, $EE, $152, $DA, $166, $C6
000058E6 017A 00B2 018E 009E 01A2+  		dc.w $17A, $B2,	$18E, $9E, $1A2, $8A
000058F2                            ; ===========================================================================
000058F2                            
000058F2                            Obj80_MakeMiniSonic:			; XREF: Obj80_Index
000058F2 2248                       		movea.l	a0,a1
000058F4 45F9 0000 58D4             		lea	(Obj80_MiniSonicPos).l,a2
000058FA 7200                       		moveq	#0,d1
000058FC 1238 FE18                  		move.b	($FFFFFE18).w,d1
00005900 5501                       		subq.b	#2,d1
00005902 6400                       		bcc.s	loc_4EC4
00005904 4EF9 0000 0000             		jmp	DeleteObject
0000590A                            ; ===========================================================================
0000590A                            
0000590A                            loc_4EC4:				; XREF: Obj80_MakeMiniSonic
0000590A 7601                       		moveq	#1,d3
0000590C 0C01 000E                  		cmpi.b	#$E,d1
00005910 6500                       		bcs.s	loc_4ED0
00005912 7600                       		moveq	#0,d3
00005914 720E                       		moveq	#$E,d1
00005916                            
00005916                            loc_4ED0:
00005916 1401                       		move.b	d1,d2
00005918 0202 0001                  		andi.b	#1,d2
0000591C                            
0000591C                            Obj80_MiniSonLoop:
0000591C 12BC 0080                  		move.b	#$80,0(a1)	; load mini Sonic object
00005920 335A 0008                  		move.w	(a2)+,8(a1)
00005924 4A02                       		tst.b	d2
00005926 6700                       		beq.s	loc_4EEA
00005928 0469 000A 0008             		subi.w	#$A,8(a1)
0000592E                            
0000592E                            loc_4EEA:
0000592E 337C 00D0 000A             		move.w	#$D0,$A(a1)
00005934 137C 0006 001A             		move.b	#6,$1A(a1)
0000593A 137C 0006 0024             		move.b	#6,$24(a1)
00005940 237C 0000 0000 0004        		move.l	#Map_obj80,4(a1)
00005948 337C 8551 0002             		move.w	#$8551,2(a1)
0000594E 137C 0000 0001             		move.b	#0,1(a1)
00005954 43E9 0040                  		lea	$40(a1),a1
00005958 51C9 FFC2                  		dbf	d1,Obj80_MiniSonLoop ; repeat for number of continues
0000595C 43E9 FFC0                  		lea	-$40(a1),a1
00005960 1343 0028                  		move.b	d3,$28(a1)
00005964                            
00005964                            Obj80_ChkType:				; XREF: Obj80_Index
00005964 4A28 0028                  		tst.b	$28(a0)
00005968 6700                       		beq.s	loc_4F40
0000596A 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00005970 6500                       		bcs.s	loc_4F40
00005972 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00005976 0200 0001                  		andi.b	#1,d0
0000597A 6600                       		bne.s	loc_4F40
0000597C 4A78 D010                  		tst.w	($FFFFD010).w
00005980 6600                       		bne.s	Obj80_Delete
00005982 4E75                       		rts	
00005984                            ; ===========================================================================
00005984                            
00005984                            loc_4F40:				; XREF: Obj80_ChkType
00005984 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00005988 0200 000F                  		andi.b	#$F,d0
0000598C 6600                       		bne.s	Obj80_Display2
0000598E 0868 0000 001A             		bchg	#0,$1A(a0)
00005994                            
00005994                            Obj80_Display2:
00005994 4EF9 0000 0000             		jmp	DisplaySprite
0000599A                            ; ===========================================================================
0000599A                            
0000599A                            Obj80_Delete:				; XREF: Obj80_ChkType
0000599A 4EF9 0000 0000             		jmp	DeleteObject
000059A0                            ; ===========================================================================
000059A0                            
000059A0                            ; ---------------------------------------------------------------------------
000059A0                            ; Object 81 - Sonic on the continue screen
000059A0                            ; ---------------------------------------------------------------------------
000059A0                            
000059A0                            Obj81:					; XREF: Obj_Index
000059A0 7000                       		moveq	#0,d0
000059A2 1028 0024                  		move.b	$24(a0),d0
000059A6 323B 0000                  		move.w	Obj81_Index(pc,d0.w),d1
000059AA 4EBB 1000                  		jsr	Obj81_Index(pc,d1.w)
000059AE 4EF9 0000 0000             		jmp	DisplaySprite
000059B4                            ; ===========================================================================
000059B4 0000                       Obj81_Index:	dc.w Obj81_Main-Obj81_Index
000059B6 0000                       		dc.w Obj81_ChkLand-Obj81_Index
000059B8 0000                       		dc.w Obj81_Animate-Obj81_Index
000059BA 0000                       		dc.w Obj81_Run-Obj81_Index
000059BC                            ; ===========================================================================
000059BC                            
000059BC                            Obj81_Main:				; XREF: Obj81_Index
000059BC 5428 0024                  		addq.b	#2,$24(a0)
000059C0 317C 00A0 0008             		move.w	#$A0,8(a0)
000059C6 317C 00C0 000C             		move.w	#$C0,$C(a0)
000059CC 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
000059D4 317C 0780 0002             		move.w	#$780,2(a0)
000059DA 117C 0004 0001             		move.b	#4,1(a0)
000059E0 117C 0002 0018             		move.b	#2,$18(a0)
000059E6 117C 001D 001C             		move.b	#$1D,$1C(a0)	; use "floating" animation
000059EC 317C 0400 0012             		move.w	#$400,$12(a0)	; make Sonic fall from above
000059F2                            
000059F2                            Obj81_ChkLand:				; XREF: Obj81_Index
000059F2 0C68 01A0 000C             		cmpi.w	#$1A0,$C(a0)	; has Sonic landed yet?
000059F8 6600                       		bne.s	Obj81_ShowFall	; if not, branch
000059FA 5428 0024                  		addq.b	#2,$24(a0)
000059FE 4268 0012                  		clr.w	$12(a0)		; stop Sonic falling
00005A02 217C 0000 0000 0004        		move.l	#Map_obj80,4(a0)
00005A0A 317C 8500 0002             		move.w	#$8500,2(a0)
00005A10 117C 0000 001C             		move.b	#0,$1C(a0)
00005A16 6000                       		bra.s	Obj81_Animate
00005A18                            ; ===========================================================================
00005A18                            
00005A18                            Obj81_ShowFall:				; XREF: Obj81_ChkLand
00005A18 4EB9 0000 0000             		jsr	SpeedToPos
00005A1E 4EB9 0000 0000             		jsr	Sonic_Animate
00005A24 4EF9 0000 0000             		jmp	LoadSonicDynPLC
00005A2A                            ; ===========================================================================
00005A2A                            
00005A2A                            Obj81_Animate:				; XREF: Obj81_Index
00005A2A 4A38 F605                  		tst.b	($FFFFF605).w	; is any button	pressed?
00005A2E 6B00                       		bmi.s	Obj81_GetUp	; if yes, branch
00005A30 43F9 0000 0000             		lea	(Ani_obj81).l,a1
00005A36 4EF9 0000 0000             		jmp	AnimateSprite
00005A3C                            ; ===========================================================================
00005A3C                            
00005A3C                            Obj81_GetUp:				; XREF: Obj81_Animate
00005A3C 5428 0024                  		addq.b	#2,$24(a0)
00005A40 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
00005A48 317C 0780 0002             		move.w	#$780,2(a0)
00005A4E 117C 001E 001C             		move.b	#$1E,$1C(a0)	; use "getting up" animation
00005A54 4268 0014                  		clr.w	$14(a0)
00005A58 5168 000C                  		subq.w	#8,$C(a0)
00005A5C 103C 00E0                  		move.b	#$E0,d0
00005A60 6100 BA1A                  		bsr.w	PlaySound_Special ; fade out music
00005A64                            
00005A64                            Obj81_Run:				; XREF: Obj81_Index
00005A64 0C68 0800 0014             		cmpi.w	#$800,$14(a0)	; check	Sonic's "run speed" (not moving)
00005A6A 6600                       		bne.s	Obj81_AddSpeed	; if too low, branch
00005A6C 317C 1000 0010             		move.w	#$1000,$10(a0)	; move Sonic to	the right
00005A72 6000                       		bra.s	Obj81_ShowRun
00005A74                            ; ===========================================================================
00005A74                            
00005A74                            Obj81_AddSpeed:				; XREF: Obj81_Run
00005A74 0668 0020 0014             		addi.w	#$20,$14(a0)	; increase "run	speed"
00005A7A                            
00005A7A                            Obj81_ShowRun:				; XREF: Obj81_Run
00005A7A 4EB9 0000 0000             		jsr	SpeedToPos
00005A80 4EB9 0000 0000             		jsr	Sonic_Animate
00005A86 4EF9 0000 0000             		jmp	LoadSonicDynPLC
00005A8C                            ; ===========================================================================
00005A8C                            Ani_obj81:
00005A8C                            	include "_anim\obj81.asm"
00005A8C                            ; ---------------------------------------------------------------------------
00005A8C                            ; Animation script - Sonic on the continue screen
00005A8C                            ; ---------------------------------------------------------------------------
00005A8C 0000                       		dc.w byte_504A-Ani_obj81
00005A8E 0401 0101 0102 0202 0303+  byte_504A:	dc.b 4,	1, 1, 1, 1, 2, 2, 2, 3,	3, $FF
00005A9A 00                         		even
00005A9A 00                         		even
00005A9A                            
00005A9A                            ; ---------------------------------------------------------------------------
00005A9A                            ; Sprite mappings - Continue screen
00005A9A                            ; ---------------------------------------------------------------------------
00005A9A                            Map_obj80:
00005A9A                            	include "_maps\obj80.asm"
00005A9A                            ; ---------------------------------------------------------------------------
00005A9A                            ; Sprite mappings - Continue screen
00005A9A                            ; ---------------------------------------------------------------------------
00005A9A 0000 0000                  		dc.w byte_5066-Map_obj80, byte_509E-Map_obj80
00005A9E 0000 0000                  		dc.w byte_50AE-Map_obj80, byte_50BE-Map_obj80
00005AA2 0000 0000                  		dc.w byte_50CE-Map_obj80, byte_50D9-Map_obj80
00005AA6 0000 0000                  		dc.w byte_50D9-Map_obj80, byte_50DF-Map_obj80
00005AAA 0B                         byte_5066:	dc.b $B
00005AAB F805 0088 C4               		dc.b $F8, 5, 0,	$88, $C4 ; "CONTINUE", stars and countdown
00005AB0 F805 00B2 D4               		dc.b $F8, 5, 0,	$B2, $D4
00005AB5 F805 00AE E4               		dc.b $F8, 5, 0,	$AE, $E4
00005ABA F805 00C2 F4               		dc.b $F8, 5, 0,	$C2, $F4
00005ABF F801 00A0 04               		dc.b $F8, 1, 0,	$A0, 4
00005AC4 F805 00AE 0C               		dc.b $F8, 5, 0,	$AE, $C
00005AC9 F805 00C6 1C               		dc.b $F8, 5, 0,	$C6, $1C
00005ACE F805 0090 2C               		dc.b $F8, 5, 0,	$90, $2C
00005AD3 3805 2021 E8               		dc.b $38, 5, $20, $21, $E8
00005AD8 3805 2021 08               		dc.b $38, 5, $20, $21, 8
00005ADD 3605 01FC F8               		dc.b $36, 5, 1,	$FC, $F8
00005AE2 03                         byte_509E:	dc.b 3
00005AE3 0405 0015 FC               		dc.b 4,	5, 0, $15, $FC	; Sonic	on floor
00005AE8 F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
00005AED F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
00005AF2 03                         byte_50AE:	dc.b 3
00005AF3 0405 0019 FC               		dc.b 4,	5, 0, $19, $FC	; Sonic	on floor #2
00005AF8 F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
00005AFD F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
00005B02 03                         byte_50BE:	dc.b 3
00005B03 0405 001D FC               		dc.b 4,	5, 0, $1D, $FC	; Sonic	on floor #3
00005B08 F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
00005B0D F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
00005B12 02                         byte_50CE:	dc.b 2
00005B13 6009 2000 E8               		dc.b $60, 9, $20, 0, $E8 ; circle on the floor
00005B18 6009 2800 00               		dc.b $60, 9, $28, 0, 0
00005B1D 01                         byte_50D9:	dc.b 1
00005B1E 0006 0012 00               		dc.b 0,	6, 0, $12, 0	; mini Sonic
00005B23 01                         byte_50DF:	dc.b 1
00005B24 0006 0018 00               		dc.b 0,	6, 0, $18, 0	; mini Sonic #2
00005B2A 00                         		even
00005B2A 00                         		even
00005B2A                            
00005B2A                            ; ===========================================================================
00005B2A                            ; ---------------------------------------------------------------------------
00005B2A                            ; Ending sequence in Green Hill	Zone
00005B2A                            ; ---------------------------------------------------------------------------
00005B2A                            
00005B2A                            EndingSequence:				; XREF: GameModeArray
00005B2A 103C 00E4                  		move.b	#$E4,d0
00005B2E 6100 B94C                  		bsr.w	PlaySound_Special ; stop music
00005B32 6100 C652                  		bsr.w	Pal_FadeFrom
00005B36 43F8 D000                  		lea	($FFFFD000).w,a1
00005B3A 7000                       		moveq	#0,d0
00005B3C 323C 07FF                  		move.w	#$7FF,d1
00005B40                            
00005B40                            End_ClrObjRam:
00005B40 22C0                       		move.l	d0,(a1)+
00005B42 51C9 FFFC                  		dbf	d1,End_ClrObjRam ; clear object	RAM
00005B46                            
00005B46 43F8 F628                  		lea	($FFFFF628).w,a1
00005B4A 7000                       		moveq	#0,d0
00005B4C 323C 0015                  		move.w	#$15,d1
00005B50                            
00005B50                            End_ClrRam:
00005B50 22C0                       		move.l	d0,(a1)+
00005B52 51C9 FFFC                  		dbf	d1,End_ClrRam	; clear	variables
00005B56                            
00005B56 43F8 F700                  		lea	($FFFFF700).w,a1
00005B5A 7000                       		moveq	#0,d0
00005B5C 323C 003F                  		move.w	#$3F,d1
00005B60                            
00005B60                            End_ClrRam2:
00005B60 22C0                       		move.l	d0,(a1)+
00005B62 51C9 FFFC                  		dbf	d1,End_ClrRam2	; clear	variables
00005B66                            
00005B66 43F8 FE60                  		lea	($FFFFFE60).w,a1
00005B6A 7000                       		moveq	#0,d0
00005B6C 323C 0047                  		move.w	#$47,d1
00005B70                            
00005B70                            End_ClrRam3:
00005B70 22C0                       		move.l	d0,(a1)+
00005B72 51C9 FFFC                  		dbf	d1,End_ClrRam3	; clear	variables
00005B76                            
00005B76 46FC 2700                  		move	#$2700,sr
00005B7A 3038 F60C                  		move.w	($FFFFF60C).w,d0
00005B7E 0200 00BF                  		andi.b	#$BF,d0
00005B82 33C0 00C0 0004             		move.w	d0,($C00004).l
00005B88 6100 B7FC                  		bsr.w	ClearScreen
00005B8C 4DF9 00C0 0004             		lea	($C00004).l,a6
00005B92 3CBC 8B03                  		move.w	#$8B03,(a6)
00005B96 3CBC 8230                  		move.w	#$8230,(a6)
00005B9A 3CBC 8407                  		move.w	#$8407,(a6)
00005B9E 3CBC 857C                  		move.w	#$857C,(a6)
00005BA2 3CBC 9001                  		move.w	#$9001,(a6)
00005BA6 3CBC 8004                  		move.w	#$8004,(a6)
00005BAA 3CBC 8720                  		move.w	#$8720,(a6)
00005BAE 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
00005BB4 3CB8 F624                  		move.w	($FFFFF624).w,(a6)
00005BB8 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
00005BBE 31FC 0600 FE10             		move.w	#$600,($FFFFFE10).w ; set level	number to 0600 (extra flowers)
00005BC4 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
00005BCA 6700                       		beq.s	End_LoadData	; if yes, branch
00005BCC 31FC 0601 FE10             		move.w	#$601,($FFFFFE10).w ; set level	number to 0601 (no flowers)
00005BD2                            
00005BD2                            End_LoadData:
00005BD2 701C                       		moveq	#$1C,d0
00005BD4 6100 BC86                  		bsr.w	RunPLC_ROM	; load ending sequence patterns
00005BD8 4EB9 0000 0000             		jsr	Hud_Base
00005BDE 6100 0000                  		bsr.w	LevelSizeLoad
00005BE2 6100 0000                  		bsr.w	DeformBgLayer
00005BE6 08F8 0002 F754             		bset	#2,($FFFFF754).w
00005BEC 6100 0000                  		bsr.w	MainLoadBlockLoad
00005BF0 6100 0000                  		bsr.w	LoadTilesFromStart
00005BF4 21FC 0000 0000 F796        		move.l	#Col_GHZ,($FFFFF796).w ; load collision	index
00005BFC 46FC 2300                  		move	#$2300,sr
00005C00 41F9 0000 0000             		lea	(Kos_EndFlowers).l,a0 ;	load extra flower patterns
00005C06 43F8 9400                  		lea	($FFFF9400).w,a1 ; RAM address to buffer the patterns
00005C0A 6100 BE00                  		bsr.w	KosDec
00005C0E 7003                       		moveq	#3,d0
00005C10 6100 C822                  		bsr.w	PalLoad1	; load Sonic's pallet
00005C14 303C 008B                  		move.w	#$8B,d0
00005C18 6100 B85C                  		bsr.w	PlaySound	; play ending sequence music
00005C1C 0838 0006 F604             		btst	#6,($FFFFF604).w ; is button A pressed?
00005C22 6700                       		beq.s	End_LoadSonic	; if not, branch
00005C24 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
00005C2A                            
00005C2A                            End_LoadSonic:
00005C2A 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
00005C30 08F8 0000 D022             		bset	#0,($FFFFD022).w ; make	Sonic face left
00005C36 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
00005C3C 31FC 0400 F602             		move.w	#$400,($FFFFF602).w ; move Sonic to the	left
00005C42 31FC F800 D014             		move.w	#$F800,($FFFFD014).w ; set Sonic's speed
00005C48 11FC 0021 D040             		move.b	#$21,($FFFFD040).w ; load HUD object
00005C4E 4EB9 0000 0000             		jsr	ObjPosLoad
00005C54 4EB9 0000 0000             		jsr	ObjectsLoad
00005C5A 4EB9 0000 0000             		jsr	BuildSprites
00005C60 7000                       		moveq	#0,d0
00005C62 31C0 FE20                  		move.w	d0,($FFFFFE20).w
00005C66 21C0 FE22                  		move.l	d0,($FFFFFE22).w
00005C6A 11C0 FE1B                  		move.b	d0,($FFFFFE1B).w
00005C6E 11C0 FE2C                  		move.b	d0,($FFFFFE2C).w
00005C72 11C0 FE2D                  		move.b	d0,($FFFFFE2D).w
00005C76 11C0 FE2E                  		move.b	d0,($FFFFFE2E).w
00005C7A 11C0 FE2F                  		move.b	d0,($FFFFFE2F).w
00005C7E 31C0 FE08                  		move.w	d0,($FFFFFE08).w
00005C82 31C0 FE02                  		move.w	d0,($FFFFFE02).w
00005C86 31C0 FE04                  		move.w	d0,($FFFFFE04).w
00005C8A 6100 EECE                  		bsr.w	OscillateNumInit
00005C8E 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w
00005C94 11FC 0001 FE1D             		move.b	#1,($FFFFFE1D).w
00005C9A 11FC 0000 FE1E             		move.b	#0,($FFFFFE1E).w
00005CA0 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
00005CA6 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
00005CAC 6100 D6FA                  		bsr.w	DelayProgram
00005CB0 3038 F60C                  		move.w	($FFFFF60C).w,d0
00005CB4 0000 0040                  		ori.b	#$40,d0
00005CB8 33C0 00C0 0004             		move.w	d0,($C00004).l
00005CBE 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00005CC4 6100 C40A                  		bsr.w	Pal_FadeTo
00005CC8                            
00005CC8                            ; ---------------------------------------------------------------------------
00005CC8                            ; Main ending sequence loop
00005CC8                            ; ---------------------------------------------------------------------------
00005CC8                            
00005CC8                            End_MainLoop:
00005CC8 6100 B7BE                  		bsr.w	PauseGame
00005CCC 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
00005CD2 6100 D6D4                  		bsr.w	DelayProgram
00005CD6 5278 FE04                  		addq.w	#1,($FFFFFE04).w
00005CDA 6100 0000                  		bsr.w	End_MoveSonic
00005CDE 4EB9 0000 0000             		jsr	ObjectsLoad
00005CE4 6100 0000                  		bsr.w	DeformBgLayer
00005CE8 4EB9 0000 0000             		jsr	BuildSprites
00005CEE 4EB9 0000 0000             		jsr	ObjPosLoad
00005CF4 6100 BDB6                  		bsr.w	PalCycle_Load
00005CF8 6100 EEB6                  		bsr.w	OscillateNumDo
00005CFC 6100 EF42                  		bsr.w	ChangeRingFrame
00005D00 0C38 0018 F600             		cmpi.b	#$18,($FFFFF600).w ; is	scene number $18 (ending)?
00005D06 6700                       		beq.s	loc_52DA	; if yes, branch
00005D08 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; set scene to $1C (credits)
00005D0E 103C 0091                  		move.b	#$91,d0
00005D12 6100 B768                  		bsr.w	PlaySound_Special ; play credits music
00005D16 31FC 0000 FFF4             		move.w	#0,($FFFFFFF4).w ; set credits index number to 0
00005D1C 4E75                       		rts	
00005D1E                            ; ===========================================================================
00005D1E                            
00005D1E                            loc_52DA:
00005D1E 4A78 FE02                  		tst.w	($FFFFFE02).w	; is level set to restart?
00005D22 6700 FFA4                  		beq.w	End_MainLoop	; if not, branch
00005D26                            
00005D26 4278 FE02                  		clr.w	($FFFFFE02).w
00005D2A 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00005D30 4278 F794                  		clr.w	($FFFFF794).w
00005D34                            
00005D34                            End_AllEmlds:				; XREF: loc_5334
00005D34 6100 B752                  		bsr.w	PauseGame
00005D38 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
00005D3E 6100 D668                  		bsr.w	DelayProgram
00005D42 5278 FE04                  		addq.w	#1,($FFFFFE04).w
00005D46 6100 0000                  		bsr.w	End_MoveSonic
00005D4A 4EB9 0000 0000             		jsr	ObjectsLoad
00005D50 6100 0000                  		bsr.w	DeformBgLayer
00005D54 4EB9 0000 0000             		jsr	BuildSprites
00005D5A 4EB9 0000 0000             		jsr	ObjPosLoad
00005D60 6100 EE4E                  		bsr.w	OscillateNumDo
00005D64 6100 EEDA                  		bsr.w	ChangeRingFrame
00005D68 5378 F794                  		subq.w	#1,($FFFFF794).w
00005D6C 6A00                       		bpl.s	loc_5334
00005D6E 31FC 0002 F794             		move.w	#2,($FFFFF794).w
00005D74 6100 C55E                  		bsr.w	Pal_ToWhite
00005D78                            
00005D78                            loc_5334:
00005D78 4A78 FE02                  		tst.w	($FFFFFE02).w
00005D7C 6700 FFB6                  		beq.w	End_AllEmlds
00005D80 4278 FE02                  		clr.w	($FFFFFE02).w
00005D84 31FC 2E2F A480             		move.w	#$2E2F,($FFFFA480).w ; modify level layout
00005D8A 4BF9 00C0 0004             		lea	($C00004).l,a5
00005D90 4DF9 00C0 0000             		lea	($C00000).l,a6
00005D96 47F8 F700                  		lea	($FFFFF700).w,a3
00005D9A 49F8 A400                  		lea	($FFFFA400).w,a4
00005D9E 343C 4000                  		move.w	#$4000,d2
00005DA2 6100 0000                  		bsr.w	LoadTilesFromStart2
00005DA6 7013                       		moveq	#$13,d0
00005DA8 6100 C68A                  		bsr.w	PalLoad1	; load ending pallet
00005DAC 6100 C45A                  		bsr.w	Pal_MakeWhite
00005DB0 6000 FF16                  		bra.w	End_MainLoop
00005DB4                            
00005DB4                            ; ---------------------------------------------------------------------------
00005DB4                            ; Subroutine controlling Sonic on the ending sequence
00005DB4                            ; ---------------------------------------------------------------------------
00005DB4                            
00005DB4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005DB4                            
00005DB4                            
00005DB4                            End_MoveSonic:				; XREF: End_MainLoop
00005DB4 1038 F7D7                  		move.b	($FFFFF7D7).w,d0
00005DB8 6600                       		bne.s	End_MoveSonic2
00005DBA 0C78 0090 D008             		cmpi.w	#$90,($FFFFD008).w ; has Sonic passed $90 on y-axis?
00005DC0 6400                       		bcc.s	End_MoveSonExit	; if not, branch
00005DC2 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
00005DC6 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	player's controls
00005DCC 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; move Sonic to the	right
00005DD2 4E75                       		rts	
00005DD4                            ; ===========================================================================
00005DD4                            
00005DD4                            End_MoveSonic2:				; XREF: End_MoveSonic
00005DD4 5500                       		subq.b	#2,d0
00005DD6 6600                       		bne.s	End_MoveSonic3
00005DD8 0C78 00A0 D008             		cmpi.w	#$A0,($FFFFD008).w ; has Sonic passed $A0 on y-axis?
00005DDE 6500                       		bcs.s	End_MoveSonExit	; if not, branch
00005DE0 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
00005DE4 7000                       		moveq	#0,d0
00005DE6 11C0 F7CC                  		move.b	d0,($FFFFF7CC).w
00005DEA 31C0 F602                  		move.w	d0,($FFFFF602).w ; stop	Sonic moving
00005DEE 31C0 D014                  		move.w	d0,($FFFFD014).w
00005DF2 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w
00005DF8 11FC 0003 D01A             		move.b	#3,($FFFFD01A).w
00005DFE 31FC 0505 D01C             		move.w	#$505,($FFFFD01C).w ; use "standing" animation
00005E04 11FC 0003 D01E             		move.b	#3,($FFFFD01E).w
00005E0A 4E75                       		rts	
00005E0C                            ; ===========================================================================
00005E0C                            
00005E0C                            End_MoveSonic3:				; XREF: End_MoveSonic
00005E0C 5500                       		subq.b	#2,d0
00005E0E 6600                       		bne.s	End_MoveSonExit
00005E10 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
00005E14 31FC 00A0 D008             		move.w	#$A0,($FFFFD008).w
00005E1A 11FC 0087 D000             		move.b	#$87,($FFFFD000).w ; load Sonic	ending sequence	object
00005E20 4278 D024                  		clr.w	($FFFFD024).w
00005E24                            
00005E24                            End_MoveSonExit:
00005E24 4E75                       		rts	
00005E26                            ; End of function End_MoveSonic
00005E26                            
00005E26                            ; ===========================================================================
00005E26                            ; ---------------------------------------------------------------------------
00005E26                            ; Object 87 - Sonic on ending sequence
00005E26                            ; ---------------------------------------------------------------------------
00005E26                            
00005E26                            Obj87:					; XREF: Obj_Index
00005E26 7000                       		moveq	#0,d0
00005E28 1028 0025                  		move.b	$25(a0),d0
00005E2C 323B 0000                  		move.w	Obj87_Index(pc,d0.w),d1
00005E30 4EBB 1000                  		jsr	Obj87_Index(pc,d1.w)
00005E34 4EF9 0000 0000             		jmp	DisplaySprite
00005E3A                            ; ===========================================================================
00005E3A 0000 0000                  Obj87_Index:	dc.w Obj87_Main-Obj87_Index, Obj87_MakeEmlds-Obj87_Index
00005E3E 0000 0000                  		dc.w Obj87_Animate-Obj87_Index,	Obj87_LookUp-Obj87_Index
00005E42 0000 0000                  		dc.w Obj87_ClrObjRam-Obj87_Index, Obj87_Animate-Obj87_Index
00005E46 0000 0000                  		dc.w Obj87_MakeLogo-Obj87_Index, Obj87_Animate-Obj87_Index
00005E4A 0000 0000                  		dc.w Obj87_Leap-Obj87_Index, Obj87_Animate-Obj87_Index
00005E4E                            ; ===========================================================================
00005E4E                            
00005E4E                            Obj87_Main:				; XREF: Obj87_Index
00005E4E 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
00005E54 6700                       		beq.s	Obj87_Main2	; if yes, branch
00005E56 0628 0010 0025             		addi.b	#$10,$25(a0)	; else,	skip emerald sequence
00005E5C 317C 00D8 0030             		move.w	#$D8,$30(a0)
00005E62 4E75                       		rts	
00005E64                            ; ===========================================================================
00005E64                            
00005E64                            Obj87_Main2:				; XREF: Obj87_Main
00005E64 5428 0025                  		addq.b	#2,$25(a0)
00005E68 217C 0000 0000 0004        		move.l	#Map_obj87,4(a0)
00005E70 317C 03E1 0002             		move.w	#$3E1,2(a0)
00005E76 117C 0004 0001             		move.b	#4,1(a0)
00005E7C 4228 0022                  		clr.b	$22(a0)
00005E80 117C 0002 0018             		move.b	#2,$18(a0)
00005E86 117C 0000 001A             		move.b	#0,$1A(a0)
00005E8C 317C 0050 0030             		move.w	#$50,$30(a0)	; set duration for Sonic to pause
00005E92                            
00005E92                            Obj87_MakeEmlds:			; XREF: Obj87_Index
00005E92 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from duration
00005E96 6600                       		bne.s	Obj87_Wait
00005E98 5428 0025                  		addq.b	#2,$25(a0)
00005E9C 317C 0001 001C             		move.w	#1,$1C(a0)
00005EA2 11FC 0088 D400             		move.b	#$88,($FFFFD400).w ; load chaos	emeralds objects
00005EA8                            
00005EA8                            Obj87_Wait:
00005EA8 4E75                       		rts	
00005EAA                            ; ===========================================================================
00005EAA                            
00005EAA                            Obj87_LookUp:				; XREF: Obj87_Index
00005EAA 0C79 2000 00FF D43C        		cmpi.w	#$2000,($FFD43C).l
00005EB2 6600                       		bne.s	locret_5480
00005EB4 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; set level to	restart	(causes	flash)
00005EBA 317C 005A 0030             		move.w	#$5A,$30(a0)
00005EC0 5428 0025                  		addq.b	#2,$25(a0)
00005EC4                            
00005EC4                            locret_5480:
00005EC4 4E75                       		rts	
00005EC6                            ; ===========================================================================
00005EC6                            
00005EC6                            Obj87_ClrObjRam:			; XREF: Obj87_Index
00005EC6 5368 0030                  		subq.w	#1,$30(a0)
00005ECA 6600                       		bne.s	Obj87_Wait2
00005ECC 43F8 D400                  		lea	($FFFFD400).w,a1
00005ED0 323C 00FF                  		move.w	#$FF,d1
00005ED4                            
00005ED4                            Obj87_ClrLoop:
00005ED4 4299                       		clr.l	(a1)+
00005ED6 51C9 FFFC                  		dbf	d1,Obj87_ClrLoop ; clear the object RAM
00005EDA 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w
00005EE0 5428 0025                  		addq.b	#2,$25(a0)
00005EE4 117C 0001 001C             		move.b	#1,$1C(a0)
00005EEA 317C 003C 0030             		move.w	#$3C,$30(a0)
00005EF0                            
00005EF0                            Obj87_Wait2:
00005EF0 4E75                       		rts	
00005EF2                            ; ===========================================================================
00005EF2                            
00005EF2                            Obj87_MakeLogo:				; XREF: Obj87_Index
00005EF2 5368 0030                  		subq.w	#1,$30(a0)
00005EF6 6600                       		bne.s	Obj87_Wait3
00005EF8 5428 0025                  		addq.b	#2,$25(a0)
00005EFC 317C 00B4 0030             		move.w	#$B4,$30(a0)
00005F02 117C 0002 001C             		move.b	#2,$1C(a0)
00005F08 11FC 0089 D400             		move.b	#$89,($FFFFD400).w ; load "SONIC THE HEDGEHOG" object
00005F0E                            
00005F0E                            Obj87_Wait3:
00005F0E 4E75                       		rts	
00005F10                            ; ===========================================================================
00005F10                            
00005F10                            Obj87_Animate:				; XREF: Obj87_Index
00005F10 43F9 0000 0000             		lea	(Ani_obj87).l,a1
00005F16 4EF9 0000 0000             		jmp	AnimateSprite
00005F1C                            ; ===========================================================================
00005F1C                            
00005F1C                            Obj87_Leap:				; XREF: Obj87_Index
00005F1C 5368 0030                  		subq.w	#1,$30(a0)
00005F20 6600                       		bne.s	Obj87_Wait4
00005F22 5428 0025                  		addq.b	#2,$25(a0)
00005F26 217C 0000 0000 0004        		move.l	#Map_obj87,4(a0)
00005F2E 317C 03E1 0002             		move.w	#$3E1,2(a0)
00005F34 117C 0004 0001             		move.b	#4,1(a0)
00005F3A 4228 0022                  		clr.b	$22(a0)
00005F3E 117C 0002 0018             		move.b	#2,$18(a0)
00005F44 117C 0005 001A             		move.b	#5,$1A(a0)
00005F4A 117C 0002 001C             		move.b	#2,$1C(a0)	; use "leaping"	animation
00005F50 11FC 0089 D400             		move.b	#$89,($FFFFD400).w ; load "SONIC THE HEDGEHOG" object
00005F56 60B8                       		bra.s	Obj87_Animate
00005F58                            ; ===========================================================================
00005F58                            
00005F58                            Obj87_Wait4:				; XREF: Obj87_Leap
00005F58 4E75                       		rts	
00005F5A                            ; ===========================================================================
00005F5A                            Ani_obj87:
00005F5A                            	include "_anim\obj87.asm"
00005F5A                            ; ---------------------------------------------------------------------------
00005F5A                            ; Animation script - Sonic on the ending sequence
00005F5A                            ; ---------------------------------------------------------------------------
00005F5A 0000                       		dc.w byte_551C-Ani_obj87
00005F5C 0000                       		dc.w byte_552A-Ani_obj87
00005F5E 0000                       		dc.w byte_5534-Ani_obj87
00005F60 0301 0001 0001 0001 0001+  byte_551C:	dc.b 3,	1, 0, 1, 0, 1, 0, 1, 0,	1, 0, 1, 2, $FA
00005F6E 0503 0403 0403 0403 FA00   byte_552A:	dc.b 5,	3, 4, 3, 4, 3, 4, 3, $FA, 0
00005F78 0305 0505 0607 FE01        byte_5534:	dc.b 3,	5, 5, 5, 6, 7, $FE, 1
00005F80                            		even
00005F80                            		even
00005F80                            
00005F80                            ; ===========================================================================
00005F80                            ; ---------------------------------------------------------------------------
00005F80                            ; Object 88 - chaos emeralds on	the ending sequence
00005F80                            ; ---------------------------------------------------------------------------
00005F80                            
00005F80                            Obj88:					; XREF: Obj_Index
00005F80 7000                       		moveq	#0,d0
00005F82 1028 0024                  		move.b	$24(a0),d0
00005F86 323B 0000                  		move.w	Obj88_Index(pc,d0.w),d1
00005F8A 4EBB 1000                  		jsr	Obj88_Index(pc,d1.w)
00005F8E 4EF9 0000 0000             		jmp	DisplaySprite
00005F94                            ; ===========================================================================
00005F94 0000                       Obj88_Index:	dc.w Obj88_Main-Obj88_Index
00005F96 0000                       		dc.w Obj88_Move-Obj88_Index
00005F98                            ; ===========================================================================
00005F98                            
00005F98                            Obj88_Main:				; XREF: Obj88_Index
00005F98 0C38 0002 D01A             		cmpi.b	#2,($FFFFD01A).w
00005F9E 6700                       		beq.s	Obj88_Main2
00005FA0 588F                       		addq.l	#4,sp
00005FA2 4E75                       		rts	
00005FA4                            ; ===========================================================================
00005FA4                            
00005FA4                            Obj88_Main2:				; XREF: Obj88_Main
00005FA4 3178 D008 0008             		move.w	($FFFFD008).w,8(a0) ; match X position with Sonic
00005FAA 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0) ; match Y position	with Sonic
00005FB0 2248                       		movea.l	a0,a1
00005FB2 7600                       		moveq	#0,d3
00005FB4 7401                       		moveq	#1,d2
00005FB6 7205                       		moveq	#5,d1
00005FB8                            
00005FB8                            Obj88_MainLoop:
00005FB8 12BC 0088                  		move.b	#$88,(a1)	; load chaos emerald object
00005FBC 5429 0024                  		addq.b	#2,$24(a1)
00005FC0 237C 0000 0000 0004        		move.l	#Map_obj88,4(a1)
00005FC8 337C 03C5 0002             		move.w	#$3C5,2(a1)
00005FCE 137C 0004 0001             		move.b	#4,1(a1)
00005FD4 137C 0001 0018             		move.b	#1,$18(a1)
00005FDA 3368 0008 0038             		move.w	8(a0),$38(a1)
00005FE0 3368 000C 003A             		move.w	$C(a0),$3A(a1)
00005FE6 1342 001C                  		move.b	d2,$1C(a1)
00005FEA 1342 001A                  		move.b	d2,$1A(a1)
00005FEE 5202                       		addq.b	#1,d2
00005FF0 1343 0026                  		move.b	d3,$26(a1)
00005FF4 0603 002A                  		addi.b	#$2A,d3
00005FF8 43E9 0040                  		lea	$40(a1),a1
00005FFC 51C9 FFBA                  		dbf	d1,Obj88_MainLoop ; repeat 5 more times
00006000                            
00006000                            Obj88_Move:				; XREF: Obj88_Index
00006000 3028 003E                  		move.w	$3E(a0),d0
00006004 D168 0026                  		add.w	d0,$26(a0)
00006008 1028 0026                  		move.b	$26(a0),d0
0000600C 4EB9 0000 33DA             		jsr	(CalcSine).l
00006012 7800                       		moveq	#0,d4
00006014 1828 003C                  		move.b	$3C(a0),d4
00006018 C3C4                       		muls.w	d4,d1
0000601A E081                       		asr.l	#8,d1
0000601C C1C4                       		muls.w	d4,d0
0000601E E080                       		asr.l	#8,d0
00006020 D268 0038                  		add.w	$38(a0),d1
00006024 D068 003A                  		add.w	$3A(a0),d0
00006028 3141 0008                  		move.w	d1,8(a0)
0000602C 3140 000C                  		move.w	d0,$C(a0)
00006030 0C68 2000 003C             		cmpi.w	#$2000,$3C(a0)
00006036 6700                       		beq.s	loc_55FA
00006038 0668 0020 003C             		addi.w	#$20,$3C(a0)
0000603E                            
0000603E                            loc_55FA:
0000603E 0C68 2000 003E             		cmpi.w	#$2000,$3E(a0)
00006044 6700                       		beq.s	loc_5608
00006046 0668 0020 003E             		addi.w	#$20,$3E(a0)
0000604C                            
0000604C                            loc_5608:
0000604C 0C68 0140 003A             		cmpi.w	#$140,$3A(a0)
00006052 6700                       		beq.s	locret_5614
00006054 5368 003A                  		subq.w	#1,$3A(a0)
00006058                            
00006058                            locret_5614:
00006058 4E75                       		rts	
0000605A                            ; ===========================================================================
0000605A                            ; ---------------------------------------------------------------------------
0000605A                            ; Object 89 - "SONIC THE HEDGEHOG" text	on the ending sequence
0000605A                            ; ---------------------------------------------------------------------------
0000605A                            
0000605A                            Obj89:					; XREF: Obj_Index
0000605A 7000                       		moveq	#0,d0
0000605C 1028 0024                  		move.b	$24(a0),d0
00006060 323B 0000                  		move.w	Obj89_Index(pc,d0.w),d1
00006064 4EFB 1000                  		jmp	Obj89_Index(pc,d1.w)
00006068                            ; ===========================================================================
00006068 0000                       Obj89_Index:	dc.w Obj89_Main-Obj89_Index
0000606A 0000                       		dc.w Obj89_Move-Obj89_Index
0000606C 0000                       		dc.w Obj89_GotoCredits-Obj89_Index
0000606E                            ; ===========================================================================
0000606E                            
0000606E                            Obj89_Main:				; XREF: Obj89_Index
0000606E 5428 0024                  		addq.b	#2,$24(a0)
00006072 317C FFE0 0008             		move.w	#-$20,8(a0)	; object starts	outside	the level boundary
00006078 317C 00D8 000A             		move.w	#$D8,$A(a0)
0000607E 217C 0000 0000 0004        		move.l	#Map_obj89,4(a0)
00006086 317C 05C5 0002             		move.w	#$5C5,2(a0)
0000608C 117C 0000 0001             		move.b	#0,1(a0)
00006092 117C 0000 0018             		move.b	#0,$18(a0)
00006098                            
00006098                            Obj89_Move:				; XREF: Obj89_Index
00006098 0C68 00C0 0008             		cmpi.w	#$C0,8(a0)	; has object reached $C0?
0000609E 6700                       		beq.s	Obj89_Delay	; if yes, branch
000060A0 0668 0010 0008             		addi.w	#$10,8(a0)	; move object to the right
000060A6 6000 A258                  		bra.w	jmp_DisplaySprite
000060AA                            ; ===========================================================================
000060AA                            
000060AA                            Obj89_Delay:				; XREF: Obj89_Move
000060AA 5428 0024                  		addq.b	#2,$24(a0)
000060AE 317C 0078 0030             		move.w	#120,$30(a0)	; set duration for delay (2 seconds)
000060B4                            
000060B4                            Obj89_GotoCredits:			; XREF: Obj89_Index
000060B4 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from duration
000060B8 6A00                       		bpl.s	Obj89_Display
000060BA 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; exit to credits
000060C0                            
000060C0                            Obj89_Display:
000060C0 6000 A23E                  		bra.w	jmp_DisplaySprite
000060C4                            ; ===========================================================================
000060C4                            ; ---------------------------------------------------------------------------
000060C4                            ; Sprite mappings - Sonic on the ending	sequence
000060C4                            ; ---------------------------------------------------------------------------
000060C4                            Map_obj87:
000060C4                            	include "_maps\obj87.asm"
000060C4                            ; ---------------------------------------------------------------------------
000060C4                            ; Sprite mappings - Sonic on the ending	sequence
000060C4                            ; ---------------------------------------------------------------------------
000060C4 0000 0000                  		dc.w byte_5690-Map_obj87, byte_569B-Map_obj87
000060C8 0000 0000                  		dc.w byte_56AB-Map_obj87, byte_56B6-Map_obj87
000060CC 0000 0000                  		dc.w byte_56C1-Map_obj87, byte_56CC-Map_obj87
000060D0 0000 0000                  		dc.w byte_56DC-Map_obj87, byte_5700-Map_obj87
000060D4 02                         byte_5690:	dc.b 2
000060D5 EC0B 0000 F8               		dc.b $EC, $B, 0, 0, $F8	; holding emeralds
000060DA 0C0C 000C F0               		dc.b $C, $C, 0,	$C, $F0
000060DF 03                         byte_569B:	dc.b 3
000060E0 FC0D 0010 F0               		dc.b $FC, $D, 0, $10, $F0 ; holding emeralds (glowing)
000060E5 EC0B 0000 F8               		dc.b $EC, $B, 0, 0, $F8
000060EA 0C0C 000C F0               		dc.b $C, $C, 0,	$C, $F0
000060EF 02                         byte_56AB:	dc.b 2
000060F0 EC09 0018 F8               		dc.b $EC, 9, 0,	$18, $F8 ; looking up
000060F5 FC0E 001E F0               		dc.b $FC, $E, 0, $1E, $F0
000060FA 02                         byte_56B6:	dc.b 2
000060FB EC09 002A F8               		dc.b $EC, 9, 0,	$2A, $F8 ; confused
00006100 FC0E 0030 F0               		dc.b $FC, $E, 0, $30, $F0
00006105 02                         byte_56C1:	dc.b 2
00006106 EC09 082A F0               		dc.b $EC, 9, 8,	$2A, $F0 ; confused #2
0000610B FC0E 0830 F0               		dc.b $FC, $E, 8, $30, $F0
00006110 03                         byte_56CC:	dc.b 3
00006111 EC06 003C F0               		dc.b $EC, 6, 0,	$3C, $F0 ; leaping
00006116 EC06 083C 00               		dc.b $EC, 6, 8,	$3C, 0
0000611B 040D 0042 F0               		dc.b 4,	$D, 0, $42, $F0
00006120 07                         byte_56DC:	dc.b 7
00006121 B20C 004A F8               		dc.b $B2, $C, 0, $4A, $F8 ; leaping #2
00006126 BA0F 004E F0               		dc.b $BA, $F, 0, $4E, $F0
0000612B BA05 005E 10               		dc.b $BA, 5, 0,	$5E, $10
00006130 CA02 0062 10               		dc.b $CA, 2, 0,	$62, $10
00006135 DA0C 0065 F0               		dc.b $DA, $C, 0, $65, $F0
0000613A E208 0069 F8               		dc.b $E2, 8, 0,	$69, $F8
0000613F EA05 006C F8               		dc.b $EA, 5, 0,	$6C, $F8
00006144 18                         byte_5700:	dc.b $18
00006145 800F 0070 F8               		dc.b $80, $F, 0, $70, $F8 ; leaping #3
0000614A 900B 0080 E0               		dc.b $90, $B, 0, $80, $E0
0000614F 900B 008C 18               		dc.b $90, $B, 0, $8C, $18
00006154 980B 0098 30               		dc.b $98, $B, 0, $98, $30
00006159 A00F 00A4 58               		dc.b $A0, $F, 0, $A4, $58
0000615E 8800 00B4 F0               		dc.b $88, 0, 0,	$B4, $F0
00006163 8005 00B5 18               		dc.b $80, 5, 0,	$B5, $18
00006168 A00F 00B9 F8               		dc.b $A0, $F, 0, $B9, $F8
0000616D B00B 00C9 E0               		dc.b $B0, $B, 0, $C9, $E0
00006172 B80F 00D5 38               		dc.b $B8, $F, 0, $D5, $38
00006177 A805 00E5 48               		dc.b $A8, 5, 0,	$E5, $48
0000617C C002 00E9 58               		dc.b $C0, 2, 0,	$E9, $58
00006181 C00F 00EC F8               		dc.b $C0, $F, 0, $EC, $F8
00006186 B80F 00FC 18               		dc.b $B8, $F, 0, $FC, $18
0000618B B008 010C 18               		dc.b $B0, 8, 1,	$C, $18
00006190 D80D 010F 30               		dc.b $D8, $D, 1, $F, $30
00006195 D808 0117 18               		dc.b $D8, 8, 1,	$17, $18
0000619A D80F 011A D8               		dc.b $D8, $F, 1, $1A, $D8
0000619F E00D 012A F8               		dc.b $E0, $D, 1, $2A, $F8
000061A4 E000 0132 28               		dc.b $E0, 0, 1,	$32, $28
000061A9 D004 0133 E0               		dc.b $D0, 4, 1,	$33, $E0
000061AE E805 0135 C8               		dc.b $E8, 5, 1,	$35, $C8
000061B3 F80C 0139 C8               		dc.b $F8, $C, 1, $39, $C8
000061B8 F006 013D F8               		dc.b $F0, 6, 1,	$3D, $F8
000061BE 00                         		even
000061BE 00                         		even
000061BE                            
000061BE                            ; ---------------------------------------------------------------------------
000061BE                            ; Sprite mappings - chaos emeralds on the ending sequence
000061BE                            ; ---------------------------------------------------------------------------
000061BE                            Map_obj88:
000061BE                            	include "_maps\obj88.asm"
000061BE                            ; ---------------------------------------------------------------------------
000061BE                            ; Sprite mappings - chaos emeralds on the ending sequence
000061BE                            ; ---------------------------------------------------------------------------
000061BE 0000 0000                  		dc.w byte_5788-Map_obj88, byte_578E-Map_obj88
000061C2 0000 0000                  		dc.w byte_5794-Map_obj88, byte_579A-Map_obj88
000061C6 0000 0000                  		dc.w byte_57A0-Map_obj88, byte_57A6-Map_obj88
000061CA 0000                       		dc.w byte_57AC-Map_obj88
000061CC 01                         byte_5788:	dc.b 1
000061CD F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
000061D2 01                         byte_578E:	dc.b 1
000061D3 F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
000061D8 01                         byte_5794:	dc.b 1
000061D9 F805 4010 F8               		dc.b $F8, 5, $40, $10, $F8
000061DE 01                         byte_579A:	dc.b 1
000061DF F805 2018 F8               		dc.b $F8, 5, $20, $18, $F8
000061E4 01                         byte_57A0:	dc.b 1
000061E5 F805 4014 F8               		dc.b $F8, 5, $40, $14, $F8
000061EA 01                         byte_57A6:	dc.b 1
000061EB F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
000061F0 01                         byte_57AC:	dc.b 1
000061F1 F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
000061F6                            		even
000061F6                            		even
000061F6                            
000061F6                            ; ---------------------------------------------------------------------------
000061F6                            ; Sprite mappings - "SONIC THE HEDGEHOG" text on the ending sequence
000061F6                            ; ---------------------------------------------------------------------------
000061F6                            Map_obj89:
000061F6                            	include "_maps\obj89.asm"
000061F6                            ; ---------------------------------------------------------------------------
000061F6                            ; Sprite mappings - "SONIC THE HEDGEHOG" text on the ending sequence
000061F6                            ; ---------------------------------------------------------------------------
000061F6 0000                       		dc.w byte_57B4-Map_obj89
000061F8 03                         byte_57B4:	dc.b 3
000061F9 F00F 0000 D0               		dc.b $F0, $F, 0, 0, $D0
000061FE F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
00006203 F00F 0020 10               		dc.b $F0, $F, 0, $20, $10
00006208                            		even
00006208                            		even
00006208                            
00006208                            ; ===========================================================================
00006208                            ; ---------------------------------------------------------------------------
00006208                            ; Credits ending sequence
00006208                            ; ---------------------------------------------------------------------------
00006208                            
00006208                            Credits:				; XREF: GameModeArray
00006208 6100 B544                  		bsr.w	ClearPLC
0000620C 6100 BF78                  		bsr.w	Pal_FadeFrom
00006210 4DF9 00C0 0004             		lea	($C00004).l,a6
00006216 3CBC 8004                  		move.w	#$8004,(a6)
0000621A 3CBC 8230                  		move.w	#$8230,(a6)
0000621E 3CBC 8407                  		move.w	#$8407,(a6)
00006222 3CBC 9001                  		move.w	#$9001,(a6)
00006226 3CBC 9200                  		move.w	#$9200,(a6)
0000622A 3CBC 8B03                  		move.w	#$8B03,(a6)
0000622E 3CBC 8720                  		move.w	#$8720,(a6)
00006232 4238 F64E                  		clr.b	($FFFFF64E).w
00006236 6100 B14E                  		bsr.w	ClearScreen
0000623A 43F8 D000                  		lea	($FFFFD000).w,a1
0000623E 7000                       		moveq	#0,d0
00006240 323C 07FF                  		move.w	#$7FF,d1
00006244                            
00006244                            Cred_ClrObjRam:
00006244 22C0                       		move.l	d0,(a1)+
00006246 51C9 FFFC                  		dbf	d1,Cred_ClrObjRam ; clear object RAM
0000624A                            
0000624A 23FC 7400 0002 00C0 0004   		move.l	#$74000002,($C00004).l
00006254 41F9 0000 0000             		lea	(Nem_CreditText).l,a0 ;	load credits alphabet patterns
0000625A 6100 B354                  		bsr.w	NemDec
0000625E 43F8 FB80                  		lea	($FFFFFB80).w,a1
00006262 7000                       		moveq	#0,d0
00006264 323C 001F                  		move.w	#$1F,d1
00006268                            
00006268                            Cred_ClrPallet:
00006268 22C0                       		move.l	d0,(a1)+
0000626A 51C9 FFFC                  		dbf	d1,Cred_ClrPallet ; fill pallet	with black ($0000)
0000626E                            
0000626E 7003                       		moveq	#3,d0
00006270 6100 C1C2                  		bsr.w	PalLoad1	; load Sonic's pallet
00006274 11FC 008A D080             		move.b	#$8A,($FFFFD080).w ; load credits object
0000627A 4EB9 0000 0000             		jsr	ObjectsLoad
00006280 4EB9 0000 0000             		jsr	BuildSprites
00006286 6100 0000                  		bsr.w	EndingDemoLoad
0000628A 7000                       		moveq	#0,d0
0000628C 1038 FE10                  		move.b	($FFFFFE10).w,d0
00006290 E948                       		lsl.w	#4,d0
00006292 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2 ;	load block mappings etc
00006298 45F2 0000                  		lea	(a2,d0.w),a2
0000629C 7000                       		moveq	#0,d0
0000629E 1012                       		move.b	(a2),d0
000062A0 6700                       		beq.s	loc_5862
000062A2 6100 B44C                  		bsr.w	LoadPLC		; load level patterns
000062A6                            
000062A6                            loc_5862:
000062A6 7001                       		moveq	#1,d0
000062A8 6100 B446                  		bsr.w	LoadPLC		; load standard	level patterns
000062AC 31FC 0078 F614             		move.w	#120,($FFFFF614).w ; display a credit for 2 seconds
000062B2 6100 BE1C                  		bsr.w	Pal_FadeTo
000062B6                            
000062B6                            Cred_WaitLoop:
000062B6 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
000062BC 6100 D0EA                  		bsr.w	DelayProgram
000062C0 6100 B49A                  		bsr.w	RunPLC_RAM
000062C4 4A78 F614                  		tst.w	($FFFFF614).w	; have 2 seconds elapsed?
000062C8 66EC                       		bne.s	Cred_WaitLoop	; if not, branch
000062CA 4AB8 F680                  		tst.l	($FFFFF680).w	; have level gfx finished decompressing?
000062CE 66E6                       		bne.s	Cred_WaitLoop	; if not, branch
000062D0 0C78 0009 FFF4             		cmpi.w	#9,($FFFFFFF4).w ; have	the credits finished?
000062D6 6700 0000                  		beq.w	TryAgainEnd	; if yes, branch
000062DA 4E75                       		rts	
000062DC                            
000062DC                            ; ---------------------------------------------------------------------------
000062DC                            ; Ending sequence demo loading subroutine
000062DC                            ; ---------------------------------------------------------------------------
000062DC                            
000062DC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000062DC                            
000062DC                            
000062DC                            EndingDemoLoad:				; XREF: Credits
000062DC 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
000062E0 0240 000F                  		andi.w	#$F,d0
000062E4 D040                       		add.w	d0,d0
000062E6 303B 0000                  		move.w	EndDemo_Levels(pc,d0.w),d0 ; load level	array
000062EA 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level from level	array
000062EE 5278 FFF4                  		addq.w	#1,($FFFFFFF4).w
000062F2 0C78 0009 FFF4             		cmpi.w	#9,($FFFFFFF4).w ; have	credits	finished?
000062F8 6400                       		bcc.s	EndDemo_Exit	; if yes, branch
000062FA 31FC 8001 FFF0             		move.w	#$8001,($FFFFFFF0).w ; force demo mode
00006300 11FC 0008 F600             		move.b	#8,($FFFFF600).w ; set game mode to 08 (demo)
00006306 11FC 0003 FE12             		move.b	#3,($FFFFFE12).w ; set lives to	3
0000630C 7000                       		moveq	#0,d0
0000630E 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00006312 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00006316 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
0000631A 11C0 FE30                  		move.b	d0,($FFFFFE30).w ; clear lamppost counter
0000631E 0C78 0004 FFF4             		cmpi.w	#4,($FFFFFFF4).w ; is SLZ demo running?
00006324 6600                       		bne.s	EndDemo_Exit	; if not, branch
00006326 43F9 0000 0000             		lea	(EndDemo_LampVar).l,a1 ; load lamppost variables
0000632C 45F8 FE30                  		lea	($FFFFFE30).w,a2
00006330 303C 0008                  		move.w	#8,d0
00006334                            
00006334                            EndDemo_LampLoad:
00006334 24D9                       		move.l	(a1)+,(a2)+
00006336 51C8 FFFC                  		dbf	d0,EndDemo_LampLoad
0000633A                            
0000633A                            EndDemo_Exit:
0000633A 4E75                       		rts	
0000633C                            ; End of function EndingDemoLoad
0000633C                            
0000633C                            ; ===========================================================================
0000633C                            ; ---------------------------------------------------------------------------
0000633C                            ; Levels used in the end sequence demos
0000633C                            ; ---------------------------------------------------------------------------
0000633C                            EndDemo_Levels:	incbin	misc\dm_ord2.bin
0000634C                            
0000634C                            ; ---------------------------------------------------------------------------
0000634C                            ; Lamppost variables in the end sequence demo (Star Light Zone)
0000634C                            ; ---------------------------------------------------------------------------
0000634C                            EndDemo_LampVar:
0000634C 0101                       		dc.b 1,	1		; XREF: EndingDemoLoad
0000634E 0A00 062C 000D             		dc.w $A00, $62C, $D
00006354 0000 0000                  		dc.l 0
00006358 0000                       		dc.b 0,	0
0000635A 0800 0957 05CC 04AB 03A6+  		dc.w $800, $957, $5CC, $4AB, $3A6, 0, $28C, 0, 0, $308
0000636E 0101                       		dc.b 1,	1
00006370                            ; ===========================================================================
00006370                            ; ---------------------------------------------------------------------------
00006370                            ; "TRY AGAIN" and "END"	screens
00006370                            ; ---------------------------------------------------------------------------
00006370                            
00006370                            TryAgainEnd:				; XREF: Credits
00006370 6100 B3DC                  		bsr.w	ClearPLC
00006374 6100 BE10                  		bsr.w	Pal_FadeFrom
00006378 4DF9 00C0 0004             		lea	($C00004).l,a6
0000637E 3CBC 8004                  		move.w	#$8004,(a6)
00006382 3CBC 8230                  		move.w	#$8230,(a6)
00006386 3CBC 8407                  		move.w	#$8407,(a6)
0000638A 3CBC 9001                  		move.w	#$9001,(a6)
0000638E 3CBC 9200                  		move.w	#$9200,(a6)
00006392 3CBC 8B03                  		move.w	#$8B03,(a6)
00006396 3CBC 8720                  		move.w	#$8720,(a6)
0000639A 4238 F64E                  		clr.b	($FFFFF64E).w
0000639E 6100 AFE6                  		bsr.w	ClearScreen
000063A2 43F8 D000                  		lea	($FFFFD000).w,a1
000063A6 7000                       		moveq	#0,d0
000063A8 323C 07FF                  		move.w	#$7FF,d1
000063AC                            
000063AC                            TryAg_ClrObjRam:
000063AC 22C0                       		move.l	d0,(a1)+
000063AE 51C9 FFFC                  		dbf	d1,TryAg_ClrObjRam ; clear object RAM
000063B2                            
000063B2 701D                       		moveq	#$1D,d0
000063B4 6100 B4A6                  		bsr.w	RunPLC_ROM	; load "TRY AGAIN" or "END" patterns
000063B8 43F8 FB80                  		lea	($FFFFFB80).w,a1
000063BC 7000                       		moveq	#0,d0
000063BE 323C 001F                  		move.w	#$1F,d1
000063C2                            
000063C2                            TryAg_ClrPallet:
000063C2 22C0                       		move.l	d0,(a1)+
000063C4 51C9 FFFC                  		dbf	d1,TryAg_ClrPallet ; fill pallet with black ($0000)
000063C8                            
000063C8 7013                       		moveq	#$13,d0
000063CA 6100 C068                  		bsr.w	PalLoad1	; load ending pallet
000063CE 4278 FBC0                  		clr.w	($FFFFFBC0).w
000063D2 11FC 008B D080             		move.b	#$8B,($FFFFD080).w ; load Eggman object
000063D8 4EB9 0000 0000             		jsr	ObjectsLoad
000063DE 4EB9 0000 0000             		jsr	BuildSprites
000063E4 31FC 0708 F614             		move.w	#1800,($FFFFF614).w ; show screen for 30 seconds
000063EA 6100 BCE4                  		bsr.w	Pal_FadeTo
000063EE                            
000063EE                            ; ---------------------------------------------------------------------------
000063EE                            ; "TRY AGAIN" and "END"	screen main loop
000063EE                            ; ---------------------------------------------------------------------------
000063EE                            TryAg_MainLoop:
000063EE 6100 B098                  		bsr.w	PauseGame
000063F2 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
000063F8 6100 CFAE                  		bsr.w	DelayProgram
000063FC 4EB9 0000 0000             		jsr	ObjectsLoad
00006402 4EB9 0000 0000             		jsr	BuildSprites
00006408 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
0000640E 6600                       		bne.s	TryAg_Exit	; if yes, branch
00006410 4A78 F614                  		tst.w	($FFFFF614).w	; has 30 seconds elapsed?
00006414 6700                       		beq.s	TryAg_Exit	; if yes, branch
00006416 0C38 001C F600             		cmpi.b	#$1C,($FFFFF600).w
0000641C 67D0                       		beq.s	TryAg_MainLoop
0000641E                            
0000641E                            TryAg_Exit:
0000641E 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
00006424 4E75                       		rts	
00006426                            
00006426                            ; ===========================================================================
00006426                            ; ---------------------------------------------------------------------------
00006426                            ; Object 8B - Eggman on "TRY AGAIN" and "END"	screens
00006426                            ; ---------------------------------------------------------------------------
00006426                            
00006426                            Obj8B:					; XREF: Obj_Index
00006426 7000                       		moveq	#0,d0
00006428 1028 0024                  		move.b	$24(a0),d0
0000642C 323B 0000                  		move.w	Obj8B_Index(pc,d0.w),d1
00006430 4EBB 1000                  		jsr	Obj8B_Index(pc,d1.w)
00006434 4EF9 0000 0000             		jmp	DisplaySprite
0000643A                            ; ===========================================================================
0000643A 0000                       Obj8B_Index:	dc.w Obj8B_Main-Obj8B_Index
0000643C 0000                       		dc.w Obj8B_Animate-Obj8B_Index
0000643E 0000                       		dc.w Obj8B_Juggle-Obj8B_Index
00006440 0000                       		dc.w loc_5A8E-Obj8B_Index
00006442                            ; ===========================================================================
00006442                            
00006442                            Obj8B_Main:				; XREF: Obj8B_Index
00006442 5428 0024                  		addq.b	#2,$24(a0)
00006446 317C 0120 0008             		move.w	#$120,8(a0)
0000644C 317C 00F4 000A             		move.w	#$F4,$A(a0)
00006452 217C 0000 0000 0004        		move.l	#Map_obj8B,4(a0)
0000645A 317C 03E1 0002             		move.w	#$3E1,2(a0)
00006460 117C 0000 0001             		move.b	#0,1(a0)
00006466 117C 0002 0018             		move.b	#2,$18(a0)
0000646C 117C 0002 001C             		move.b	#2,$1C(a0)	; use "END" animation
00006472 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
00006478 6700                       		beq.s	Obj8B_Animate	; if yes, branch
0000647A 11FC 008A D0C0             		move.b	#$8A,($FFFFD0C0).w ; load credits object
00006480 31FC 0009 FFF4             		move.w	#9,($FFFFFFF4).w ; use "TRY AGAIN" text
00006486 11FC 008C D800             		move.b	#$8C,($FFFFD800).w ; load emeralds object on "TRY AGAIN" screen
0000648C 117C 0000 001C             		move.b	#0,$1C(a0)	; use "TRY AGAIN" animation
00006492                            
00006492                            Obj8B_Animate:				; XREF: Obj8B_Index
00006492 43F9 0000 0000             		lea	(Ani_obj8B).l,a1
00006498 4EF9 0000 0000             		jmp	AnimateSprite
0000649E                            ; ===========================================================================
0000649E                            
0000649E                            Obj8B_Juggle:				; XREF: Obj8B_Index
0000649E 5428 0024                  		addq.b	#2,$24(a0)
000064A2 7002                       		moveq	#2,d0
000064A4 0828 0000 001C             		btst	#0,$1C(a0)
000064AA 6700                       		beq.s	loc_5A6A
000064AC 4440                       		neg.w	d0
000064AE                            
000064AE                            loc_5A6A:
000064AE 43F8 D800                  		lea	($FFFFD800).w,a1
000064B2 7205                       		moveq	#5,d1
000064B4                            
000064B4                            loc_5A70:
000064B4 1340 003E                  		move.b	d0,$3E(a1)
000064B8 3400                       		move.w	d0,d2
000064BA E742                       		asl.w	#3,d2
000064BC D529 0026                  		add.b	d2,$26(a1)
000064C0 43E9 0040                  		lea	$40(a1),a1
000064C4 51C9 FFEE                  		dbf	d1,loc_5A70
000064C8 5228 001A                  		addq.b	#1,$1A(a0)
000064CC 317C 0070 0030             		move.w	#112,$30(a0)
000064D2                            
000064D2                            loc_5A8E:				; XREF: Obj8B_Index
000064D2 5368 0030                  		subq.w	#1,$30(a0)
000064D6 6A00                       		bpl.s	locret_5AA0
000064D8 0868 0000 001C             		bchg	#0,$1C(a0)
000064DE 117C 0002 0024             		move.b	#2,$24(a0)
000064E4                            
000064E4                            locret_5AA0:
000064E4 4E75                       		rts	
000064E6                            ; ===========================================================================
000064E6                            Ani_obj8B:
000064E6                            	include "_anim\obj8B.asm"
000064E6                            ; ---------------------------------------------------------------------------
000064E6                            ; Animation script - Eggman on the "TRY AGAIN" and "END" screens
000064E6                            ; ---------------------------------------------------------------------------
000064E6 0000                       		dc.w byte_5AA8-Ani_obj8B
000064E8 0000                       		dc.w byte_5AAC-Ani_obj8B
000064EA 0000                       		dc.w byte_5AB0-Ani_obj8B
000064EC 0500 FC01                  byte_5AA8:	dc.b 5,	0, $FC,	1
000064F0 0502 FC03                  byte_5AAC:	dc.b 5,	2, $FC,	3
000064F4 0704 0506 0504 0506 0504+  byte_5AB0:	dc.b 7,	4, 5, 6, 5, 4, 5, 6, 5,	4, 5, 6, 5, 7, 5, 6, 5,	$FF
00006506                            		even
00006506                            		even
00006506                            
00006506                            ; ===========================================================================
00006506                            ; ---------------------------------------------------------------------------
00006506                            ; Object 8C - chaos emeralds on	the "TRY AGAIN"	screen
00006506                            ; ---------------------------------------------------------------------------
00006506                            
00006506                            Obj8C:					; XREF: Obj_Index
00006506 7000                       		moveq	#0,d0
00006508 1028 0024                  		move.b	$24(a0),d0
0000650C 323B 0000                  		move.w	Obj8C_Index(pc,d0.w),d1
00006510 4EBB 1000                  		jsr	Obj8C_Index(pc,d1.w)
00006514 4EF9 0000 0000             		jmp	DisplaySprite
0000651A                            ; ===========================================================================
0000651A 0000                       Obj8C_Index:	dc.w Obj8C_Main-Obj8C_Index
0000651C 0000                       		dc.w Obj8C_Move-Obj8C_Index
0000651E                            ; ===========================================================================
0000651E                            
0000651E                            Obj8C_Main:				; XREF: Obj8C_Index
0000651E 2248                       		movea.l	a0,a1
00006520 7400                       		moveq	#0,d2
00006522 7600                       		moveq	#0,d3
00006524 7205                       		moveq	#5,d1
00006526 9238 FE57                  		sub.b	($FFFFFE57).w,d1
0000652A                            
0000652A                            Obj8C_MakeEms:				; XREF: loc_5B42
0000652A 12BC 008C                  		move.b	#$8C,(a1)	; load emerald object
0000652E 5429 0024                  		addq.b	#2,$24(a1)
00006532 237C 0000 61BE 0004        		move.l	#Map_obj88,4(a1)
0000653A 337C 03C5 0002             		move.w	#$3C5,2(a1)
00006540 137C 0000 0001             		move.b	#0,1(a1)
00006546 137C 0001 0018             		move.b	#1,$18(a1)
0000654C 337C 0104 0008             		move.w	#$104,8(a1)
00006552 337C 0120 0038             		move.w	#$120,$38(a1)
00006558 337C 00EC 000A             		move.w	#$EC,$A(a1)
0000655E 3369 000A 003A             		move.w	$A(a1),$3A(a1)
00006564 137C 001C 003C             		move.b	#$1C,$3C(a1)
0000656A 47F8 FE58                  		lea	($FFFFFE58).w,a3
0000656E                            
0000656E                            Obj8C_ChkEms:
0000656E 7000                       		moveq	#0,d0
00006570 1038 FE57                  		move.b	($FFFFFE57).w,d0
00006574 5340                       		subq.w	#1,d0
00006576 6500                       		bcs.s	loc_5B42
00006578                            
00006578                            Obj8C_ChkEmLoop:
00006578 B433 0000                  		cmp.b	(a3,d0.w),d2
0000657C 6600                       		bne.s	loc_5B3E
0000657E 5202                       		addq.b	#1,d2
00006580 60EC                       		bra.s	Obj8C_ChkEms
00006582                            ; ===========================================================================
00006582                            
00006582                            loc_5B3E:
00006582 51C8 FFF4                  		dbf	d0,Obj8C_ChkEmLoop ; checks which emeralds you have
00006586                            
00006586                            loc_5B42:
00006586 1342 001A                  		move.b	d2,$1A(a1)
0000658A 5229 001A                  		addq.b	#1,$1A(a1)
0000658E 5202                       		addq.b	#1,d2
00006590 137C 0080 0026             		move.b	#$80,$26(a1)
00006596 1343 001E                  		move.b	d3,$1E(a1)
0000659A 1343 001F                  		move.b	d3,$1F(a1)
0000659E 0643 000A                  		addi.w	#$A,d3
000065A2 43E9 0040                  		lea	$40(a1),a1
000065A6 51C9 FF82                  		dbf	d1,Obj8C_MakeEms
000065AA                            
000065AA                            Obj8C_Move:				; XREF: Obj8C_Index
000065AA 4A68 003E                  		tst.w	$3E(a0)
000065AE 6700                       		beq.s	locret_5BBA
000065B0 4A28 001E                  		tst.b	$1E(a0)
000065B4 6700                       		beq.s	loc_5B78
000065B6 5328 001E                  		subq.b	#1,$1E(a0)
000065BA 6600                       		bne.s	loc_5B80
000065BC                            
000065BC                            loc_5B78:
000065BC 3028 003E                  		move.w	$3E(a0),d0
000065C0 D168 0026                  		add.w	d0,$26(a0)
000065C4                            
000065C4                            loc_5B80:
000065C4 1028 0026                  		move.b	$26(a0),d0
000065C8 6700                       		beq.s	loc_5B8C
000065CA 0C00 0080                  		cmpi.b	#$80,d0
000065CE 6600                       		bne.s	loc_5B96
000065D0                            
000065D0                            loc_5B8C:
000065D0 4268 003E                  		clr.w	$3E(a0)
000065D4 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
000065DA                            
000065DA                            loc_5B96:
000065DA 4EB9 0000 33DA             		jsr	(CalcSine).l
000065E0 7800                       		moveq	#0,d4
000065E2 1828 003C                  		move.b	$3C(a0),d4
000065E6 C3C4                       		muls.w	d4,d1
000065E8 E081                       		asr.l	#8,d1
000065EA C1C4                       		muls.w	d4,d0
000065EC E080                       		asr.l	#8,d0
000065EE D268 0038                  		add.w	$38(a0),d1
000065F2 D068 003A                  		add.w	$3A(a0),d0
000065F6 3141 0008                  		move.w	d1,8(a0)
000065FA 3140 000A                  		move.w	d0,$A(a0)
000065FE                            
000065FE                            locret_5BBA:
000065FE 4E75                       		rts	
00006600                            ; ===========================================================================
00006600                            ; ---------------------------------------------------------------------------
00006600                            ; Sprite mappings - Eggman on	the "TRY AGAIN"	and "END" screens
00006600                            ; ---------------------------------------------------------------------------
00006600                            Map_obj8B:
00006600                            	include "_maps\obj8B.asm"
00006600                            ; ---------------------------------------------------------------------------
00006600                            ; Sprite mappings - Robotnik on	the "TRY AGAIN"	and "END" screens
00006600                            ; ---------------------------------------------------------------------------
00006600 0000 0000                  		dc.w byte_5BCC-Map_obj8B, byte_5BF5-Map_obj8B
00006604 0000 0000                  		dc.w byte_5C1E-Map_obj8B, byte_5C47-Map_obj8B
00006608 0000 0000                  		dc.w byte_5C70-Map_obj8B, byte_5CAD-Map_obj8B
0000660C 0000 0000                  		dc.w byte_5CE0-Map_obj8B, byte_5D13-Map_obj8B
00006610 08                         byte_5BCC:	dc.b 8
00006611 E905 0000 F0               		dc.b $E9, 5, 0,	0, $F0
00006616 F90C 0004 E0               		dc.b $F9, $C, 0, 4, $E0
0000661B E904 0008 00               		dc.b $E9, 4, 0,	8, 0
00006620 F10D 000A 00               		dc.b $F1, $D, 0, $A, 0
00006625 0106 0023 F0               		dc.b 1,	6, 0, $23, $F0
0000662A 0106 0823 00               		dc.b 1,	6, 8, $23, 0
0000662F 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00006634 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00006639 08                         byte_5BF5:	dc.b 8
0000663A E80D 0012 E0               		dc.b $E8, $D, 0, $12, $E0
0000663F F808 001A E8               		dc.b $F8, 8, 0,	$1A, $E8
00006644 E805 0800 00               		dc.b $E8, 5, 8,	0, 0
00006649 F80C 0804 00               		dc.b $F8, $C, 8, 4, 0
0000664E 0006 001D F0               		dc.b 0,	6, 0, $1D, $F0
00006653 0006 081D 00               		dc.b 0,	6, 8, $1D, 0
00006658 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
0000665D 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00006662 08                         byte_5C1E:	dc.b 8
00006663 E904 0808 F0               		dc.b $E9, 4, 8,	8, $F0
00006668 F10D 080A E0               		dc.b $F1, $D, 8, $A, $E0
0000666D E905 0800 00               		dc.b $E9, 5, 8,	0, 0
00006672 F90C 0804 00               		dc.b $F9, $C, 8, 4, 0
00006677 0106 0023 F0               		dc.b 1,	6, 0, $23, $F0
0000667C 0106 0823 00               		dc.b 1,	6, 8, $23, 0
00006681 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00006686 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
0000668B 08                         byte_5C47:	dc.b 8
0000668C E805 0000 F0               		dc.b $E8, 5, 0,	0, $F0
00006691 F80C 0004 E0               		dc.b $F8, $C, 0, 4, $E0
00006696 E80D 0812 00               		dc.b $E8, $D, 8, $12, 0
0000669B F808 081A 00               		dc.b $F8, 8, 8,	$1A, 0
000066A0 0006 001D F0               		dc.b 0,	6, 0, $1D, $F0
000066A5 0006 081D 00               		dc.b 0,	6, 8, $1D, 0
000066AA 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
000066AF 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
000066B4 0C                         byte_5C70:	dc.b $C
000066B5 ED0A 002B E8               		dc.b $ED, $A, 0, $2B, $E8
000066BA F500 0034 E0               		dc.b $F5, 0, 0,	$34, $E0
000066BF 0504 0035 F0               		dc.b 5,	4, 0, $35, $F0
000066C4 0D08 0037 E8               		dc.b $D, 8, 0, $37, $E8
000066C9 ED0A 082B 00               		dc.b $ED, $A, 8, $2B, 0
000066CE F500 0834 18               		dc.b $F5, 0, 8,	$34, $18
000066D3 0504 0835 00               		dc.b 5,	4, 8, $35, 0
000066D8 0D08 0837 00               		dc.b $D, 8, 8, $37, 0
000066DD 100D 0073 E0               		dc.b $10, $D, 0, $73, $E0
000066E2 100D 007B 00               		dc.b $10, $D, 0, $7B, 0
000066E7 1C0C 005B E0               		dc.b $1C, $C, 0, $5B, $E0
000066EC 1C0C 085B 00               		dc.b $1C, $C, 8, $5B, 0
000066F1 0A                         byte_5CAD:	dc.b $A
000066F2 D207 003A F0               		dc.b $D2, 7, 0,	$3A, $F0
000066F7 DA00 0042 E8               		dc.b $DA, 0, 0,	$42, $E8
000066FC F207 0043 F0               		dc.b $F2, 7, 0,	$43, $F0
00006701 D207 083A 00               		dc.b $D2, 7, 8,	$3A, 0
00006706 DA00 0842 10               		dc.b $DA, 0, 8,	$42, $10
0000670B F207 0843 00               		dc.b $F2, 7, 8,	$43, 0
00006710 100D 0067 E8               		dc.b $10, $D, 0, $67, $E8
00006715 1005 006F 08               		dc.b $10, 5, 0,	$6F, 8
0000671A 1C0C 005F E0               		dc.b $1C, $C, 0, $5F, $E0
0000671F 1C0C 085F 00               		dc.b $1C, $C, 8, $5F, 0
00006724 0A                         byte_5CE0:	dc.b $A
00006725 C40B 004B E8               		dc.b $C4, $B, 0, $4B, $E8
0000672A E408 0057 E8               		dc.b $E4, 8, 0,	$57, $E8
0000672F EC00 005A F0               		dc.b $EC, 0, 0,	$5A, $F0
00006734 C40B 084B 00               		dc.b $C4, $B, 8, $4B, 0
00006739 E408 0857 00               		dc.b $E4, 8, 8,	$57, 0
0000673E EC00 085A 08               		dc.b $EC, 0, 8,	$5A, 8
00006743 100D 0067 E8               		dc.b $10, $D, 0, $67, $E8
00006748 1005 006F 08               		dc.b $10, 5, 0,	$6F, 8
0000674D 1C0C 0063 E0               		dc.b $1C, $C, 0, $63, $E0
00006752 1C0C 0863 00               		dc.b $1C, $C, 8, $63, 0
00006757 0C                         byte_5D13:	dc.b $C
00006758 F40A 002B E8               		dc.b $F4, $A, 0, $2B, $E8
0000675D FC00 0034 E0               		dc.b $FC, 0, 0,	$34, $E0
00006762 0C04 0035 F0               		dc.b $C, 4, 0, $35, $F0
00006767 1408 0037 E8               		dc.b $14, 8, 0,	$37, $E8
0000676C F40A 082B 00               		dc.b $F4, $A, 8, $2B, 0
00006771 FC00 0834 18               		dc.b $FC, 0, 8,	$34, $18
00006776 0C04 0835 00               		dc.b $C, 4, 8, $35, 0
0000677B 1408 0837 00               		dc.b $14, 8, 8,	$37, 0
00006780 180C 0083 E0               		dc.b $18, $C, 0, $83, $E0
00006785 180C 0087 00               		dc.b $18, $C, 0, $87, 0
0000678A 1C0C 005B E0               		dc.b $1C, $C, 0, $5B, $E0
0000678F 1C0C 085B 00               		dc.b $1C, $C, 8, $5B, 0
00006794                            		even
00006794                            		even
00006794                            
00006794                            ; ---------------------------------------------------------------------------
00006794                            ; Ending sequence demos
00006794                            ; ---------------------------------------------------------------------------
00006794                            Demo_EndGHZ1:	incbin	demodata\e_ghz1.bin
000067C2                            		even
000067C2                            Demo_EndMZ:	incbin	demodata\e_mz.bin
00006802                            		even
00006802                            Demo_EndSYZ:	incbin	demodata\e_syz.bin
00006832                            		even
00006832                            Demo_EndLZ:	incbin	demodata\e_lz.bin
00006862                            		even
00006862                            Demo_EndSLZ:	incbin	demodata\e_slz.bin
00006882                            		even
00006882                            Demo_EndSBZ1:	incbin	demodata\e_sbz1.bin
000068A2                            		even
000068A2                            Demo_EndSBZ2:	incbin	demodata\e_sbz2.bin
000068D2                            		even
000068D2                            Demo_EndGHZ2:	incbin	demodata\e_ghz2.bin
00006902                            		even
00006902                            
00006902                            ; ---------------------------------------------------------------------------
00006902                            ; Subroutine to	load level boundaries and start	locations
00006902                            ; ---------------------------------------------------------------------------
00006902                            
00006902                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006902                            
00006902                            
00006902                            LevelSizeLoad:				; XREF: TitleScreen; Level; EndingSequence
00006902 7000                       		moveq	#0,d0
00006904 11C0 F740                  		move.b	d0,($FFFFF740).w
00006908 11C0 F741                  		move.b	d0,($FFFFF741).w
0000690C 11C0 F746                  		move.b	d0,($FFFFF746).w
00006910 11C0 F748                  		move.b	d0,($FFFFF748).w
00006914 11C0 F742                  		move.b	d0,($FFFFF742).w
00006918 3038 FE10                  		move.w	($FFFFFE10).w,d0
0000691C ED08                       		lsl.b	#6,d0
0000691E E848                       		lsr.w	#4,d0
00006920 3200                       		move.w	d0,d1
00006922 D040                       		add.w	d0,d0
00006924 D041                       		add.w	d1,d0
00006926 41FB 0000                  		lea	LevelSizeArray(pc,d0.w),a0 ; load level	boundaries
0000692A 3018                       		move.w	(a0)+,d0
0000692C 31C0 F730                  		move.w	d0,($FFFFF730).w
00006930 2018                       		move.l	(a0)+,d0
00006932 21C0 F728                  		move.l	d0,($FFFFF728).w
00006936 21C0 F720                  		move.l	d0,($FFFFF720).w
0000693A 2018                       		move.l	(a0)+,d0
0000693C 21C0 F72C                  		move.l	d0,($FFFFF72C).w
00006940 21C0 F724                  		move.l	d0,($FFFFF724).w
00006944 3038 F728                  		move.w	($FFFFF728).w,d0
00006948 0640 0240                  		addi.w	#$240,d0
0000694C 31C0 F732                  		move.w	d0,($FFFFF732).w
00006950 31FC 1010 F74A             		move.w	#$1010,($FFFFF74A).w
00006956 3018                       		move.w	(a0)+,d0
00006958 31C0 F73E                  		move.w	d0,($FFFFF73E).w
0000695C 6000 0000                  		bra.w	LevSz_ChkLamp
00006960                            ; ===========================================================================
00006960                            ; ---------------------------------------------------------------------------
00006960                            ; Level size array and ending start location array
00006960                            ; ---------------------------------------------------------------------------
00006960                            LevelSizeArray:	incbin	misc\lvl_size.bin
00006AB0                            		even
00006AB0                            
00006AB0                            EndingStLocArray:
00006AB0                            		incbin	misc\sloc_end.bin
00006AD0                            		even
00006AD0                            
00006AD0                            ; ===========================================================================
00006AD0                            
00006AD0                            LevSz_ChkLamp:				; XREF: LevelSizeLoad
00006AD0 4A38 FE30                  		tst.b	($FFFFFE30).w	; have any lampposts been hit?
00006AD4 6700                       		beq.s	LevSz_StartLoc	; if not, branch
00006AD6 4EB9 0000 0000             		jsr	Obj79_LoadInfo
00006ADC 3238 D008                  		move.w	($FFFFD008).w,d1
00006AE0 3038 D00C                  		move.w	($FFFFD00C).w,d0
00006AE4 6000                       		bra.s	loc_60D0
00006AE6                            ; ===========================================================================
00006AE6                            
00006AE6                            LevSz_StartLoc:				; XREF: LevelSizeLoad
00006AE6 3038 FE10                  		move.w	($FFFFFE10).w,d0
00006AEA ED08                       		lsl.b	#6,d0
00006AEC E848                       		lsr.w	#4,d0
00006AEE 43FB 0000                  		lea	StartLocArray(pc,d0.w),a1 ; load Sonic's start location
00006AF2 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00006AF6 6A00                       		bpl.s	LevSz_SonicPos	; if not, branch
00006AF8 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
00006AFC 5340                       		subq.w	#1,d0
00006AFE E548                       		lsl.w	#2,d0
00006B00 43FB 00AE                  		lea	EndingStLocArray(pc,d0.w),a1 ; load Sonic's start location
00006B04                            
00006B04                            LevSz_SonicPos:
00006B04 7200                       		moveq	#0,d1
00006B06 3219                       		move.w	(a1)+,d1
00006B08 31C1 D008                  		move.w	d1,($FFFFD008).w ; set Sonic's position on x-axis
00006B0C 7000                       		moveq	#0,d0
00006B0E 3011                       		move.w	(a1),d0
00006B10 31C0 D00C                  		move.w	d0,($FFFFD00C).w ; set Sonic's position on y-axis
00006B14                            
00006B14                            loc_60D0:				; XREF: LevSz_ChkLamp
00006B14 4278 F7A8                  		clr.w	($FFFFF7A8).w		; reset Sonic's position tracking index
00006B18 45F8 CB00                  		lea	($FFFFCB00).w,a2	; load the tracking array into a2
00006B1C 743F                       		moveq	#63,d2				; begin a 64-step loop
00006B1E                            @looppoint:
00006B1E 34C1                       		move.w	d1,(a2)+			; fill in X
00006B20 34C0                       		move.w	d0,(a2)+			; fill in Y
00006B22 51CA FFFA                  		dbf	d2,@looppoint		; loop
00006B26 0441 00A0                  		subi.w	#$A0,d1
00006B2A 6400                       		bcc.s	loc_60D8
00006B2C 7200                       		moveq	#0,d1
00006B2E                            
00006B2E                            loc_60D8:
00006B2E 3438 F72A                  		move.w	($FFFFF72A).w,d2
00006B32 B242                       		cmp.w	d2,d1
00006B34 6500                       		bcs.s	loc_60E2
00006B36 3202                       		move.w	d2,d1
00006B38                            
00006B38                            loc_60E2:
00006B38 31C1 F700                  		move.w	d1,($FFFFF700).w
00006B3C 0440 0060                  		subi.w	#$60,d0
00006B40 6400                       		bcc.s	loc_60EE
00006B42 7000                       		moveq	#0,d0
00006B44                            
00006B44                            loc_60EE:
00006B44 B078 F72E                  		cmp.w	($FFFFF72E).w,d0
00006B48 6D00                       		blt.s	loc_60F8
00006B4A 3038 F72E                  		move.w	($FFFFF72E).w,d0
00006B4E                            
00006B4E                            loc_60F8:
00006B4E 31C0 F704                  		move.w	d0,($FFFFF704).w
00006B52 6100 0000                  		bsr.w	BgScrollSpeed
00006B56 7000                       		moveq	#0,d0
00006B58 1038 FE10                  		move.b	($FFFFFE10).w,d0
00006B5C E508                       		lsl.b	#2,d0
00006B5E 21FB 0000 F7AC             		move.l	LoopTileNums(pc,d0.w),($FFFFF7AC).w
00006B64 6000 0000                  		bra.w	LevSz_Unk
00006B68                            ; ===========================================================================
00006B68                            ; ---------------------------------------------------------------------------
00006B68                            ; Sonic	start location array
00006B68                            ; ---------------------------------------------------------------------------
00006B68                            StartLocArray:	incbin	misc\sloc_lev.bin
00006BD8                            		even
00006BD8                            
00006BD8                            ; ---------------------------------------------------------------------------
00006BD8                            ; Which	256x256	tiles contain loops or roll-tunnels
00006BD8                            ; ---------------------------------------------------------------------------
00006BD8                            ; Format - 4 bytes per zone, referring to which 256x256 evoke special events:
00006BD8                            ; loop,	loop, tunnel, tunnel
00006BD8                            ; ---------------------------------------------------------------------------
00006BD8                            LoopTileNums:	incbin	misc\loopnums.bin
00006BF4                            		even
00006BF4                            
00006BF4                            ; ===========================================================================
00006BF4                            
00006BF4                            LevSz_Unk:				; XREF: LevelSizeLoad
00006BF4 7000                       		moveq	#0,d0
00006BF6 1038 FE10                  		move.b	($FFFFFE10).w,d0
00006BFA E748                       		lsl.w	#3,d0
00006BFC 43FB 0000                  		lea	dword_61B4(pc,d0.w),a1
00006C00 45F8 F7F0                  		lea	($FFFFF7F0).w,a2
00006C04 24D9                       		move.l	(a1)+,(a2)+
00006C06 24D9                       		move.l	(a1)+,(a2)+
00006C08 4E75                       		rts	
00006C0A                            ; End of function LevelSizeLoad
00006C0A                            
00006C0A                            ; ===========================================================================
00006C0A 0070 0100 0100 0100        dword_61B4:	dc.l $700100, $1000100
00006C12 0800 0100 0100 0000        		dc.l $8000100, $1000000
00006C1A 0800 0100 0100 0000        		dc.l $8000100, $1000000
00006C22 0800 0100 0100 0000        		dc.l $8000100, $1000000
00006C2A 0800 0100 0100 0000        		dc.l $8000100, $1000000
00006C32 0800 0100 0100 0000        		dc.l $8000100, $1000000
00006C3A 0070 0100 0100 0100        		dc.l $700100, $1000100
00006C42                            
00006C42                            ; ---------------------------------------------------------------------------
00006C42                            ; Subroutine to	set scroll speed of some backgrounds
00006C42                            ; ---------------------------------------------------------------------------
00006C42                            
00006C42                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006C42                            
00006C42                            
00006C42                            BgScrollSpeed:				; XREF: LevelSizeLoad
00006C42 4A38 FE30                  		tst.b	($FFFFFE30).w
00006C46 6600                       		bne.s	loc_6206
00006C48 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00006C4C 31C0 F714                  		move.w	d0,($FFFFF714).w
00006C50 31C1 F708                  		move.w	d1,($FFFFF708).w
00006C54 31C1 F710                  		move.w	d1,($FFFFF710).w
00006C58 31C1 F718                  		move.w	d1,($FFFFF718).w
00006C5C                            
00006C5C                            loc_6206:
00006C5C 7400                       		moveq	#0,d2
00006C5E 1438 FE10                  		move.b	($FFFFFE10).w,d2
00006C62 D442                       		add.w	d2,d2
00006C64 343B 2000                  		move.w	BgScroll_Index(pc,d2.w),d2
00006C68 4EFB 2000                  		jmp	BgScroll_Index(pc,d2.w)
00006C6C                            ; End of function BgScrollSpeed
00006C6C                            
00006C6C                            ; ===========================================================================
00006C6C 0000 0000                  BgScroll_Index:	dc.w BgScroll_GHZ-BgScroll_Index, BgScroll_LZ-BgScroll_Index
00006C70 0000 0000                  		dc.w BgScroll_MZ-BgScroll_Index, BgScroll_SLZ-BgScroll_Index
00006C74 0000 0000                  		dc.w BgScroll_SYZ-BgScroll_Index, BgScroll_SBZ-BgScroll_Index
00006C78 0000                       		dc.w BgScroll_End-BgScroll_Index
00006C7A                            ; ===========================================================================
00006C7A                            
00006C7A                            BgScroll_GHZ:				; XREF: BgScroll_Index
00006C7A 6000 0000                  		bra.w	Deform_GHZ
00006C7E                            ; ===========================================================================
00006C7E                            
00006C7E                            BgScroll_LZ:				; XREF: BgScroll_Index
00006C7E E280                       		asr.l	#1,d0
00006C80 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00006C84 4E75                       		rts	
00006C86                            ; ===========================================================================
00006C86                            
00006C86                            BgScroll_MZ:				; XREF: BgScroll_Index
00006C86 4E75                       		rts	
00006C88                            ; ===========================================================================
00006C88                            
00006C88                            BgScroll_SLZ:				; XREF: BgScroll_Index
00006C88 E280                       		asr.l	#1,d0
00006C8A 0640 00C0                  		addi.w	#$C0,d0
00006C8E 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00006C92 4E75                       		rts	
00006C94                            ; ===========================================================================
00006C94                            
00006C94                            BgScroll_SYZ:				; XREF: BgScroll_Index
00006C94 E980                       		asl.l	#4,d0
00006C96 2400                       		move.l	d0,d2
00006C98 E380                       		asl.l	#1,d0
00006C9A D082                       		add.l	d2,d0
00006C9C E080                       		asr.l	#8,d0
00006C9E 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00006CA2 31C0 F714                  		move.w	d0,($FFFFF714).w
00006CA6 4E75                       		rts	
00006CA8                            ; ===========================================================================
00006CA8                            
00006CA8                            BgScroll_SBZ:				; XREF: BgScroll_Index
00006CA8 E980                       		asl.l	#4,d0
00006CAA E380                       		asl.l	#1,d0
00006CAC E080                       		asr.l	#8,d0
00006CAE 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00006CB2 4E75                       		rts	
00006CB4                            ; ===========================================================================
00006CB4                            
00006CB4                            BgScroll_End:				; XREF: BgScroll_Index
00006CB4 31FC 001E F70C             		move.w	#$1E,($FFFFF70C).w
00006CBA 31FC 001E F714             		move.w	#$1E,($FFFFF714).w
00006CC0 4E75                       		rts	
00006CC2                            ; ===========================================================================
00006CC2 31FC 00A8 F708             		move.w	#$A8,($FFFFF708).w
00006CC8 31FC 001E F70C             		move.w	#$1E,($FFFFF70C).w
00006CCE 31FC FFC0 F710             		move.w	#-$40,($FFFFF710).w
00006CD4 31FC 001E F714             		move.w	#$1E,($FFFFF714).w
00006CDA 4E75                       		rts
00006CDC                            
00006CDC                            ; ---------------------------------------------------------------------------
00006CDC                            ; Background layer deformation subroutines
00006CDC                            ; ---------------------------------------------------------------------------
00006CDC                            
00006CDC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006CDC                            
00006CDC                            
00006CDC                            DeformBgLayer:				; XREF: TitleScreen; Level; EndingSequence
00006CDC 4A38 F744                  		tst.b	($FFFFF744).w
00006CE0 6700                       		beq.s	loc_628E
00006CE2 4E75                       		rts	
00006CE4                            ; ===========================================================================
00006CE4                            
00006CE4                            loc_628E:
00006CE4 4278 F754                  		clr.w	($FFFFF754).w
00006CE8 4278 F756                  		clr.w	($FFFFF756).w
00006CEC 4278 F758                  		clr.w	($FFFFF758).w
00006CF0 4278 F75A                  		clr.w	($FFFFF75A).w
00006CF4 6100 0000                  		bsr.w	ScrollHoriz
00006CF8 6100 0000                  		bsr.w	ScrollVertical
00006CFC 6100 0000                  		bsr.w	DynScrResizeLoad
00006D00 31F8 F700 F61A             		move.w	($FFFFF700).w,($FFFFF61A).w
00006D06 31F8 F704 F616             		move.w	($FFFFF704).w,($FFFFF616).w
00006D0C 31F8 F708 F61C             		move.w	($FFFFF708).w,($FFFFF61C).w
00006D12 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006D18 31F8 F718 F620             		move.w	($FFFFF718).w,($FFFFF620).w
00006D1E 31F8 F71C F61E             		move.w	($FFFFF71C).w,($FFFFF61E).w
00006D24 7000                       		moveq	#0,d0
00006D26 1038 FE10                  		move.b	($FFFFFE10).w,d0
00006D2A D040                       		add.w	d0,d0
00006D2C 303B 0000                  		move.w	Deform_Index(pc,d0.w),d0
00006D30 4EFB 0000                  		jmp	Deform_Index(pc,d0.w)
00006D34                            ; End of function DeformBgLayer
00006D34                            
00006D34                            ; ===========================================================================
00006D34                            ; ---------------------------------------------------------------------------
00006D34                            ; Offset index for background layer deformation	code
00006D34                            ; ---------------------------------------------------------------------------
00006D34 0000 0000                  Deform_Index:	dc.w Deform_GHZ-Deform_Index, Deform_LZ-Deform_Index
00006D38 0000 0000                  		dc.w Deform_MZ-Deform_Index, Deform_SLZ-Deform_Index
00006D3C 0000 0000                  		dc.w Deform_SYZ-Deform_Index, Deform_SBZ-Deform_Index
00006D40 0000                       		dc.w Deform_GHZ-Deform_Index
00006D42                            ; ---------------------------------------------------------------------------
00006D42                            ; Green	Hill Zone background layer deformation code
00006D42                            ; ---------------------------------------------------------------------------
00006D42                            
00006D42                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006D42                            
00006D42                            
00006D42                            Deform_GHZ:				; XREF: Deform_Index
00006D42 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006D46 48C4                       		ext.l	d4
00006D48 EB84                       		asl.l	#5,d4
00006D4A 2204                       		move.l	d4,d1
00006D4C E384                       		asl.l	#1,d4
00006D4E D881                       		add.l	d1,d4
00006D50 7A00                       		moveq	#0,d5
00006D52 6100 0000                  		bsr.w	ScrollBlock1
00006D56 6100 0000                  		bsr.w	ScrollBlock4
00006D5A 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006D5E 3038 F704                  		move.w	($FFFFF704).w,d0
00006D62 0240 07FF                  		andi.w	#$7FF,d0
00006D66 EA48                       		lsr.w	#5,d0
00006D68 4440                       		neg.w	d0
00006D6A 0640 0026                  		addi.w	#$26,d0
00006D6E 31C0 F714                  		move.w	d0,($FFFFF714).w
00006D72 3800                       		move.w	d0,d4
00006D74 6100 0000                  		bsr.w	ScrollBlock3
00006D78 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006D7E 323C 006F                  		move.w	#$6F,d1
00006D82 9244                       		sub.w	d4,d1
00006D84 3038 F700                  		move.w	($FFFFF700).w,d0
00006D88 0C38 0004 F600             		cmpi.b	#4,($FFFFF600).w
00006D8E 6600                       		bne.s	loc_633C
00006D90 7000                       		moveq	#0,d0
00006D92                            
00006D92                            loc_633C:
00006D92 4440                       		neg.w	d0
00006D94 4840                       		swap	d0
00006D96 3038 F708                  		move.w	($FFFFF708).w,d0
00006D9A 4440                       		neg.w	d0
00006D9C                            
00006D9C                            loc_6346:
00006D9C 22C0                       		move.l	d0,(a1)+
00006D9E 51C9 FFFC                  		dbf	d1,loc_6346
00006DA2 323C 0027                  		move.w	#$27,d1
00006DA6 3038 F710                  		move.w	($FFFFF710).w,d0
00006DAA 4440                       		neg.w	d0
00006DAC                            
00006DAC                            loc_6356:
00006DAC 22C0                       		move.l	d0,(a1)+
00006DAE 51C9 FFFC                  		dbf	d1,loc_6356
00006DB2 3038 F710                  		move.w	($FFFFF710).w,d0
00006DB6 0640 0000                  		addi.w	#0,d0
00006DBA 3438 F700                  		move.w	($FFFFF700).w,d2
00006DBE 0642 FE00                  		addi.w	#-$200,d2
00006DC2 9440                       		sub.w	d0,d2
00006DC4 48C2                       		ext.l	d2
00006DC6 E182                       		asl.l	#8,d2
00006DC8 85FC 0068                  		divs.w	#$68,d2
00006DCC 48C2                       		ext.l	d2
00006DCE E182                       		asl.l	#8,d2
00006DD0 7600                       		moveq	#0,d3
00006DD2 3600                       		move.w	d0,d3
00006DD4 323C 0047                  		move.w	#$47,d1
00006DD8 D244                       		add.w	d4,d1
00006DDA                            
00006DDA                            loc_6384:
00006DDA 3003                       		move.w	d3,d0
00006DDC 4440                       		neg.w	d0
00006DDE 22C0                       		move.l	d0,(a1)+
00006DE0 4843                       		swap	d3
00006DE2 D682                       		add.l	d2,d3
00006DE4 4843                       		swap	d3
00006DE6 51C9 FFF2                  		dbf	d1,loc_6384
00006DEA 4E75                       		rts	
00006DEC                            ; End of function Deform_GHZ
00006DEC                            
00006DEC                            ; ---------------------------------------------------------------------------
00006DEC                            ; Labyrinth Zone background layer deformation code
00006DEC                            ; ---------------------------------------------------------------------------
00006DEC                            
00006DEC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006DEC                            
00006DEC                            
00006DEC                            Deform_LZ:				; XREF: Deform_Index
00006DEC 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006DF0 48C4                       		ext.l	d4
00006DF2 EF84                       		asl.l	#7,d4
00006DF4 3A38 F73C                  		move.w	($FFFFF73C).w,d5
00006DF8 48C5                       		ext.l	d5
00006DFA EF85                       		asl.l	#7,d5
00006DFC 6100 0000                  		bsr.w	ScrollBlock1
00006E00 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006E06 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006E0A 323C 00DF                  		move.w	#$DF,d1
00006E0E 3038 F700                  		move.w	($FFFFF700).w,d0
00006E12 4440                       		neg.w	d0
00006E14 4840                       		swap	d0
00006E16 3038 F708                  		move.w	($FFFFF708).w,d0
00006E1A 4440                       		neg.w	d0
00006E1C                            
00006E1C                            loc_63C6:
00006E1C 22C0                       		move.l	d0,(a1)+
00006E1E 51C9 FFFC                  		dbf	d1,loc_63C6
00006E22 3038 F646                  		move.w	($FFFFF646).w,d0
00006E26 9078 F704                  		sub.w	($FFFFF704).w,d0
00006E2A 4E75                       		rts	
00006E2C                            ; End of function Deform_LZ
00006E2C                            
00006E2C                            ; ---------------------------------------------------------------------------
00006E2C                            ; Marble Zone background layer deformation code
00006E2C                            ; ---------------------------------------------------------------------------
00006E2C                            
00006E2C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006E2C                            
00006E2C                            
00006E2C                            Deform_MZ:				; XREF: Deform_Index
00006E2C 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006E30 48C4                       		ext.l	d4
00006E32 ED84                       		asl.l	#6,d4
00006E34 2204                       		move.l	d4,d1
00006E36 E384                       		asl.l	#1,d4
00006E38 D881                       		add.l	d1,d4
00006E3A 7A00                       		moveq	#0,d5
00006E3C 6100 0000                  		bsr.w	ScrollBlock1
00006E40 303C 0200                  		move.w	#$200,d0
00006E44 3238 F704                  		move.w	($FFFFF704).w,d1
00006E48 0441 01C8                  		subi.w	#$1C8,d1
00006E4C 6500                       		bcs.s	loc_6402
00006E4E 3401                       		move.w	d1,d2
00006E50 D241                       		add.w	d1,d1
00006E52 D242                       		add.w	d2,d1
00006E54 E441                       		asr.w	#2,d1
00006E56 D041                       		add.w	d1,d0
00006E58                            
00006E58                            loc_6402:
00006E58 31C0 F714                  		move.w	d0,($FFFFF714).w
00006E5C 6100 0000                  		bsr.w	ScrollBlock3
00006E60 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006E66 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006E6A 323C 00DF                  		move.w	#$DF,d1
00006E6E 3038 F700                  		move.w	($FFFFF700).w,d0
00006E72 4440                       		neg.w	d0
00006E74 4840                       		swap	d0
00006E76 3038 F708                  		move.w	($FFFFF708).w,d0
00006E7A 4440                       		neg.w	d0
00006E7C                            
00006E7C                            loc_6426:
00006E7C 22C0                       		move.l	d0,(a1)+
00006E7E 51C9 FFFC                  		dbf	d1,loc_6426
00006E82 4E75                       		rts	
00006E84                            ; End of function Deform_MZ
00006E84                            
00006E84                            ; ---------------------------------------------------------------------------
00006E84                            ; Star Light Zone background layer deformation code
00006E84                            ; ---------------------------------------------------------------------------
00006E84                            
00006E84                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006E84                            
00006E84                            
00006E84                            Deform_SLZ:				; XREF: Deform_Index
00006E84 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006E88 48C4                       		ext.l	d4
00006E8A EF84                       		asl.l	#7,d4
00006E8C 3A38 F73C                  		move.w	($FFFFF73C).w,d5
00006E90 48C5                       		ext.l	d5
00006E92 EF85                       		asl.l	#7,d5
00006E94 6100 0000                  		bsr.w	ScrollBlock2
00006E98 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006E9E 6100 0000                  		bsr.w	Deform_SLZ_2
00006EA2 45F8 A800                  		lea	($FFFFA800).w,a2
00006EA6 3038 F70C                  		move.w	($FFFFF70C).w,d0
00006EAA 3400                       		move.w	d0,d2
00006EAC 0440 00C0                  		subi.w	#$C0,d0
00006EB0 0240 03F0                  		andi.w	#$3F0,d0
00006EB4 E648                       		lsr.w	#3,d0
00006EB6 45F2 0000                  		lea	(a2,d0.w),a2
00006EBA 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006EBE 323C 000E                  		move.w	#$E,d1
00006EC2 3038 F700                  		move.w	($FFFFF700).w,d0
00006EC6 4440                       		neg.w	d0
00006EC8 4840                       		swap	d0
00006ECA 0242 000F                  		andi.w	#$F,d2
00006ECE D442                       		add.w	d2,d2
00006ED0 301A                       		move.w	(a2)+,d0
00006ED2 4EFB 2000                  		jmp	loc_6482(pc,d2.w)
00006ED6                            ; ===========================================================================
00006ED6                            
00006ED6                            loc_6480:				; XREF: Deform_SLZ
00006ED6 301A                       		move.w	(a2)+,d0
00006ED8                            
00006ED8                            loc_6482:
00006ED8 22C0                       		move.l	d0,(a1)+
00006EDA 22C0                       		move.l	d0,(a1)+
00006EDC 22C0                       		move.l	d0,(a1)+
00006EDE 22C0                       		move.l	d0,(a1)+
00006EE0 22C0                       		move.l	d0,(a1)+
00006EE2 22C0                       		move.l	d0,(a1)+
00006EE4 22C0                       		move.l	d0,(a1)+
00006EE6 22C0                       		move.l	d0,(a1)+
00006EE8 22C0                       		move.l	d0,(a1)+
00006EEA 22C0                       		move.l	d0,(a1)+
00006EEC 22C0                       		move.l	d0,(a1)+
00006EEE 22C0                       		move.l	d0,(a1)+
00006EF0 22C0                       		move.l	d0,(a1)+
00006EF2 22C0                       		move.l	d0,(a1)+
00006EF4 22C0                       		move.l	d0,(a1)+
00006EF6 22C0                       		move.l	d0,(a1)+
00006EF8 51C9 FFDC                  		dbf	d1,loc_6480
00006EFC 4E75                       		rts	
00006EFE                            ; End of function Deform_SLZ
00006EFE                            
00006EFE                            
00006EFE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006EFE                            
00006EFE                            
00006EFE                            Deform_SLZ_2:				; XREF: Deform_SLZ
00006EFE 43F8 A800                  		lea	($FFFFA800).w,a1
00006F02 3438 F700                  		move.w	($FFFFF700).w,d2
00006F06 4442                       		neg.w	d2
00006F08 3002                       		move.w	d2,d0
00006F0A E640                       		asr.w	#3,d0
00006F0C 9042                       		sub.w	d2,d0
00006F0E 48C0                       		ext.l	d0
00006F10 E980                       		asl.l	#4,d0
00006F12 81FC 001C                  		divs.w	#$1C,d0
00006F16 48C0                       		ext.l	d0
00006F18 E980                       		asl.l	#4,d0
00006F1A E180                       		asl.l	#8,d0
00006F1C 7600                       		moveq	#0,d3
00006F1E 3602                       		move.w	d2,d3
00006F20 323C 001B                  		move.w	#$1B,d1
00006F24                            
00006F24                            loc_64CE:
00006F24 32C3                       		move.w	d3,(a1)+
00006F26 4843                       		swap	d3
00006F28 D680                       		add.l	d0,d3
00006F2A 4843                       		swap	d3
00006F2C 51C9 FFF6                  		dbf	d1,loc_64CE
00006F30 3002                       		move.w	d2,d0
00006F32 E640                       		asr.w	#3,d0
00006F34 323C 0004                  		move.w	#4,d1
00006F38                            
00006F38                            loc_64E2:
00006F38 32C0                       		move.w	d0,(a1)+
00006F3A 51C9 FFFC                  		dbf	d1,loc_64E2
00006F3E 3002                       		move.w	d2,d0
00006F40 E440                       		asr.w	#2,d0
00006F42 323C 0004                  		move.w	#4,d1
00006F46                            
00006F46                            loc_64F0:
00006F46 32C0                       		move.w	d0,(a1)+
00006F48 51C9 FFFC                  		dbf	d1,loc_64F0
00006F4C 3002                       		move.w	d2,d0
00006F4E E240                       		asr.w	#1,d0
00006F50 323C 001D                  		move.w	#$1D,d1
00006F54                            
00006F54                            loc_64FE:
00006F54 32C0                       		move.w	d0,(a1)+
00006F56 51C9 FFFC                  		dbf	d1,loc_64FE
00006F5A 4E75                       		rts	
00006F5C                            ; End of function Deform_SLZ_2
00006F5C                            
00006F5C                            ; ---------------------------------------------------------------------------
00006F5C                            ; Spring Yard Zone background layer deformation	code
00006F5C                            ; ---------------------------------------------------------------------------
00006F5C                            
00006F5C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006F5C                            
00006F5C                            
00006F5C                            Deform_SYZ:				; XREF: Deform_Index
00006F5C 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006F60 48C4                       		ext.l	d4
00006F62 ED84                       		asl.l	#6,d4
00006F64 3A38 F73C                  		move.w	($FFFFF73C).w,d5
00006F68 48C5                       		ext.l	d5
00006F6A E985                       		asl.l	#4,d5
00006F6C 2205                       		move.l	d5,d1
00006F6E E385                       		asl.l	#1,d5
00006F70 DA81                       		add.l	d1,d5
00006F72 6100 0000                  		bsr.w	ScrollBlock1
00006F76 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006F7C 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006F80 323C 00DF                  		move.w	#$DF,d1
00006F84 3038 F700                  		move.w	($FFFFF700).w,d0
00006F88 4440                       		neg.w	d0
00006F8A 4840                       		swap	d0
00006F8C 3038 F708                  		move.w	($FFFFF708).w,d0
00006F90 4440                       		neg.w	d0
00006F92                            
00006F92                            loc_653C:
00006F92 22C0                       		move.l	d0,(a1)+
00006F94 51C9 FFFC                  		dbf	d1,loc_653C
00006F98 4E75                       		rts	
00006F9A                            ; End of function Deform_SYZ
00006F9A                            
00006F9A                            ; ---------------------------------------------------------------------------
00006F9A                            ; Scrap	Brain Zone background layer deformation	code
00006F9A                            ; ---------------------------------------------------------------------------
00006F9A                            
00006F9A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006F9A                            
00006F9A                            
00006F9A                            Deform_SBZ:				; XREF: Deform_Index
00006F9A 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006F9E 48C4                       		ext.l	d4
00006FA0 ED84                       		asl.l	#6,d4
00006FA2 3A38 F73C                  		move.w	($FFFFF73C).w,d5
00006FA6 48C5                       		ext.l	d5
00006FA8 E985                       		asl.l	#4,d5
00006FAA E385                       		asl.l	#1,d5
00006FAC 6100 0000                  		bsr.w	ScrollBlock1
00006FB0 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006FB6 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006FBA 323C 00DF                  		move.w	#$DF,d1
00006FBE 3038 F700                  		move.w	($FFFFF700).w,d0
00006FC2 4440                       		neg.w	d0
00006FC4 4840                       		swap	d0
00006FC6 3038 F708                  		move.w	($FFFFF708).w,d0
00006FCA 4440                       		neg.w	d0
00006FCC                            
00006FCC                            loc_6576:
00006FCC 22C0                       		move.l	d0,(a1)+
00006FCE 51C9 FFFC                  		dbf	d1,loc_6576
00006FD2 4E75                       		rts	
00006FD4                            ; End of function Deform_SBZ
00006FD4                            
00006FD4                            ; ---------------------------------------------------------------------------
00006FD4                            ; Subroutine to	scroll the level horizontally as Sonic moves
00006FD4                            ; ---------------------------------------------------------------------------
00006FD4                            
00006FD4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006FD4                            
00006FD4                            
00006FD4                            ScrollHoriz:				; XREF: DeformBgLayer
00006FD4 3838 F700                  		move.w	($FFFFF700).w,d4
00006FD8 6100                       		bsr.s	ScrollHoriz2
00006FDA 3038 F700                  		move.w	($FFFFF700).w,d0
00006FDE 0240 0010                  		andi.w	#$10,d0
00006FE2 1238 F74A                  		move.b	($FFFFF74A).w,d1
00006FE6 B300                       		eor.b	d1,d0
00006FE8 6600                       		bne.s	locret_65B0
00006FEA 0A38 0010 F74A             		eori.b	#$10,($FFFFF74A).w
00006FF0 3038 F700                  		move.w	($FFFFF700).w,d0
00006FF4 9044                       		sub.w	d4,d0
00006FF6 6A00                       		bpl.s	loc_65AA
00006FF8 08F8 0002 F754             		bset	#2,($FFFFF754).w
00006FFE 4E75                       		rts	
00007000                            ; ===========================================================================
00007000                            
00007000                            loc_65AA:
00007000 08F8 0003 F754             		bset	#3,($FFFFF754).w
00007006                            
00007006                            locret_65B0:
00007006 4E75                       		rts	
00007008                            ; End of function ScrollHoriz
00007008                            
00007008                            
00007008                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007008                            
00007008                            
00007008                            ScrollHoriz2:				; XREF: ScrollHoriz
00007008 3238 C904                  		move.w	($FFFFC904).w,d1
0000700C 6700                       		beq.s	@cont1
0000700E 0441 0100                  		sub.w	#$100,d1
00007012 31C1 C904                  		move.w	d1,($FFFFC904).w
00007016 7200                       		moveq	#0,d1
00007018 1238 C904                  		move.b	($FFFFC904).w,d1
0000701C E509                       		lsl.b	#2,d1
0000701E 5801                       		addq.b	#4,d1
00007020 3038 F7A8                  		move.w	($FFFFF7A8).w,d0
00007024 9001                       		sub.b	d1,d0
00007026 43F8 CB00                  		lea	($FFFFCB00).w,a1
0000702A 3031 0000                  		move.w	(a1,d0.w),d0
0000702E 0240 3FFF                  		and.w	#$3FFF,d0
00007032 6000                       		bra.s	@cont2
00007034                            		
00007034                            @cont1:
00007034 3038 D008                  		move.w	($FFFFD008).w,d0
00007038                            		
00007038                            @cont2:
00007038 9078 F700                  		sub.w	($FFFFF700).w,d0
0000703C 0440 0090                  		subi.w	#$90,d0
00007040 6500                       		bcs.s	loc_65F6
00007042 0440 0010                  		subi.w	#$10,d0
00007046 6400                       		bcc.s	loc_65CC
00007048 4278 F73A                  		clr.w	($FFFFF73A).w
0000704C 4E75                       		rts	
0000704E                            ; ===========================================================================
0000704E                            
0000704E                            loc_65CC:
0000704E 0C40 0010                  		cmpi.w	#$10,d0
00007052 6500                       		bcs.s	loc_65D6
00007054 303C 0010                  		move.w	#$10,d0
00007058                            
00007058                            loc_65D6:
00007058 D078 F700                  		add.w	($FFFFF700).w,d0
0000705C B078 F72A                  		cmp.w	($FFFFF72A).w,d0
00007060 6D00                       		blt.s	loc_65E4
00007062 3038 F72A                  		move.w	($FFFFF72A).w,d0
00007066                            
00007066                            loc_65E4:
00007066 3200                       		move.w	d0,d1
00007068 9278 F700                  		sub.w	($FFFFF700).w,d1
0000706C E141                       		asl.w	#8,d1
0000706E 31C0 F700                  		move.w	d0,($FFFFF700).w
00007072 31C1 F73A                  		move.w	d1,($FFFFF73A).w
00007076 4E75                       		rts	
00007078                            ; ===========================================================================
00007078                            
00007078                            loc_65F6:				; XREF: ScrollHoriz2
00007078 0C40 FFF0                  		cmpi.w	#-$10,d0
0000707C 6E00                       		bgt.s	@cont
0000707E 303C FFF0                  		move.w	#-$10,d0	
00007082                            		
00007082                            @cont:
00007082 D078 F700                  		add.w	($FFFFF700).w,d0
00007086 B078 F728                  		cmp.w	($FFFFF728).w,d0
0000708A 6EDA                       		bgt.s	loc_65E4
0000708C 3038 F728                  		move.w	($FFFFF728).w,d0
00007090 60D4                       		bra.s	loc_65E4
00007092                            ; End of function ScrollHoriz2
00007092                            
00007092                            ; ===========================================================================
00007092 4A40                       		tst.w	d0
00007094 6A00                       		bpl.s	loc_6610
00007096 303C FFFE                  		move.w	#-2,d0
0000709A 60DC                       		bra.s	loc_65F6
0000709C                            ; ===========================================================================
0000709C                            
0000709C                            loc_6610:
0000709C 303C 0002                  		move.w	#2,d0
000070A0 60AC                       		bra.s	loc_65CC
000070A2                            
000070A2                            ; ---------------------------------------------------------------------------
000070A2                            ; Subroutine to	scroll the level vertically as Sonic moves
000070A2                            ; ---------------------------------------------------------------------------
000070A2                            
000070A2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000070A2                            
000070A2                            
000070A2                            ScrollVertical:				; XREF: DeformBgLayer
000070A2 7200                       		moveq	#0,d1
000070A4 3038 D00C                  		move.w	($FFFFD00C).w,d0
000070A8 9078 F704                  		sub.w	($FFFFF704).w,d0
000070AC 0838 0002 D022             		btst	#2,($FFFFD022).w
000070B2 6700                       		beq.s	loc_662A
000070B4 5B40                       		subq.w	#5,d0
000070B6                            
000070B6                            loc_662A:
000070B6 0838 0001 D022             		btst	#1,($FFFFD022).w
000070BC 6700                       		beq.s	loc_664A
000070BE 0640 0020                  		addi.w	#$20,d0
000070C2 9078 F73E                  		sub.w	($FFFFF73E).w,d0
000070C6 6500                       		bcs.s	loc_6696
000070C8 0440 0040                  		subi.w	#$40,d0
000070CC 6400                       		bcc.s	loc_6696
000070CE 4A38 F75C                  		tst.b	($FFFFF75C).w
000070D2 6600                       		bne.s	loc_66A8
000070D4 6000                       		bra.s	loc_6656
000070D6                            ; ===========================================================================
000070D6                            
000070D6                            loc_664A:
000070D6 9078 F73E                  		sub.w	($FFFFF73E).w,d0
000070DA 6600                       		bne.s	loc_665C
000070DC 4A38 F75C                  		tst.b	($FFFFF75C).w
000070E0 6600                       		bne.s	loc_66A8
000070E2                            
000070E2                            loc_6656:
000070E2 4278 F73C                  		clr.w	($FFFFF73C).w
000070E6 4E75                       		rts	
000070E8                            ; ===========================================================================
000070E8                            
000070E8                            loc_665C:
000070E8 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w
000070EE 6600                       		bne.s	loc_6684
000070F0 3238 D014                  		move.w	($FFFFD014).w,d1
000070F4 6A00                       		bpl.s	loc_666C
000070F6 4441                       		neg.w	d1
000070F8                            
000070F8                            loc_666C:
000070F8 0C41 0800                  		cmpi.w	#$800,d1
000070FC 6400                       		bcc.s	loc_6696
000070FE 323C 0600                  		move.w	#$600,d1
00007102 0C40 0006                  		cmpi.w	#6,d0
00007106 6E00                       		bgt.s	loc_66F6
00007108 0C40 FFFA                  		cmpi.w	#-6,d0
0000710C 6D00                       		blt.s	loc_66C0
0000710E 6000                       		bra.s	loc_66AE
00007110                            ; ===========================================================================
00007110                            
00007110                            loc_6684:
00007110 323C 0200                  		move.w	#$200,d1
00007114 0C40 0002                  		cmpi.w	#2,d0
00007118 6E00                       		bgt.s	loc_66F6
0000711A 0C40 FFFE                  		cmpi.w	#-2,d0
0000711E 6D00                       		blt.s	loc_66C0
00007120 6000                       		bra.s	loc_66AE
00007122                            ; ===========================================================================
00007122                            
00007122                            loc_6696:
00007122 323C 1000                  		move.w	#$1000,d1
00007126 0C40 0010                  		cmpi.w	#$10,d0
0000712A 6E00                       		bgt.s	loc_66F6
0000712C 0C40 FFF0                  		cmpi.w	#-$10,d0
00007130 6D00                       		blt.s	loc_66C0
00007132 6000                       		bra.s	loc_66AE
00007134                            ; ===========================================================================
00007134                            
00007134                            loc_66A8:
00007134 7000                       		moveq	#0,d0
00007136 11C0 F75C                  		move.b	d0,($FFFFF75C).w
0000713A                            
0000713A                            loc_66AE:
0000713A 7200                       		moveq	#0,d1
0000713C 3200                       		move.w	d0,d1
0000713E D278 F704                  		add.w	($FFFFF704).w,d1
00007142 4A40                       		tst.w	d0
00007144 6A00 0000                  		bpl.w	loc_6700
00007148 6000 0000                  		bra.w	loc_66CC
0000714C                            ; ===========================================================================
0000714C                            
0000714C                            loc_66C0:
0000714C 4441                       		neg.w	d1
0000714E 48C1                       		ext.l	d1
00007150 E181                       		asl.l	#8,d1
00007152 D2B8 F704                  		add.l	($FFFFF704).w,d1
00007156 4841                       		swap	d1
00007158                            
00007158                            loc_66CC:
00007158 B278 F72C                  		cmp.w	($FFFFF72C).w,d1
0000715C 6E00                       		bgt.s	loc_6724
0000715E 0C41 FF00                  		cmpi.w	#-$100,d1
00007162 6E00                       		bgt.s	loc_66F0
00007164 0241 07FF                  		andi.w	#$7FF,d1
00007168 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
0000716E 0278 07FF F704             		andi.w	#$7FF,($FFFFF704).w
00007174 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
0000717A 6000                       		bra.s	loc_6724
0000717C                            ; ===========================================================================
0000717C                            
0000717C                            loc_66F0:
0000717C 3238 F72C                  		move.w	($FFFFF72C).w,d1
00007180 6000                       		bra.s	loc_6724
00007182                            ; ===========================================================================
00007182                            
00007182                            loc_66F6:
00007182 48C1                       		ext.l	d1
00007184 E181                       		asl.l	#8,d1
00007186 D2B8 F704                  		add.l	($FFFFF704).w,d1
0000718A 4841                       		swap	d1
0000718C                            
0000718C                            loc_6700:
0000718C B278 F72E                  		cmp.w	($FFFFF72E).w,d1
00007190 6D00                       		blt.s	loc_6724
00007192 0441 0800                  		subi.w	#$800,d1
00007196 6500                       		bcs.s	loc_6720
00007198 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
0000719E 0478 0800 F704             		subi.w	#$800,($FFFFF704).w
000071A4 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
000071AA 6000                       		bra.s	loc_6724
000071AC                            ; ===========================================================================
000071AC                            
000071AC                            loc_6720:
000071AC 3238 F72E                  		move.w	($FFFFF72E).w,d1
000071B0                            
000071B0                            loc_6724:
000071B0 3838 F704                  		move.w	($FFFFF704).w,d4
000071B4 4841                       		swap	d1
000071B6 2601                       		move.l	d1,d3
000071B8 96B8 F704                  		sub.l	($FFFFF704).w,d3
000071BC E09B                       		ror.l	#8,d3
000071BE 31C3 F73C                  		move.w	d3,($FFFFF73C).w
000071C2 21C1 F704                  		move.l	d1,($FFFFF704).w
000071C6 3038 F704                  		move.w	($FFFFF704).w,d0
000071CA 0240 0010                  		andi.w	#$10,d0
000071CE 1238 F74B                  		move.b	($FFFFF74B).w,d1
000071D2 B300                       		eor.b	d1,d0
000071D4 6600                       		bne.s	locret_6766
000071D6 0A38 0010 F74B             		eori.b	#$10,($FFFFF74B).w
000071DC 3038 F704                  		move.w	($FFFFF704).w,d0
000071E0 9044                       		sub.w	d4,d0
000071E2 6A00                       		bpl.s	loc_6760
000071E4 08F8 0000 F754             		bset	#0,($FFFFF754).w
000071EA 4E75                       		rts	
000071EC                            ; ===========================================================================
000071EC                            
000071EC                            loc_6760:
000071EC 08F8 0001 F754             		bset	#1,($FFFFF754).w
000071F2                            
000071F2                            locret_6766:
000071F2 4E75                       		rts	
000071F4                            ; End of function ScrollVertical
000071F4                            
000071F4                            
000071F4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000071F4                            
000071F4                            
000071F4                            ScrollBlock1:				; XREF: Deform_GHZ; et al
000071F4 2438 F708                  		move.l	($FFFFF708).w,d2
000071F8 2002                       		move.l	d2,d0
000071FA D084                       		add.l	d4,d0
000071FC 21C0 F708                  		move.l	d0,($FFFFF708).w
00007200 2200                       		move.l	d0,d1
00007202 4841                       		swap	d1
00007204 0241 0010                  		andi.w	#$10,d1
00007208 1638 F74C                  		move.b	($FFFFF74C).w,d3
0000720C B701                       		eor.b	d3,d1
0000720E 6600                       		bne.s	loc_679C
00007210 0A38 0010 F74C             		eori.b	#$10,($FFFFF74C).w
00007216 9082                       		sub.l	d2,d0
00007218 6A00                       		bpl.s	loc_6796
0000721A 08F8 0002 F756             		bset	#2,($FFFFF756).w
00007220 6000                       		bra.s	loc_679C
00007222                            ; ===========================================================================
00007222                            
00007222                            loc_6796:
00007222 08F8 0003 F756             		bset	#3,($FFFFF756).w
00007228                            
00007228                            loc_679C:
00007228 2638 F70C                  		move.l	($FFFFF70C).w,d3
0000722C 2003                       		move.l	d3,d0
0000722E D085                       		add.l	d5,d0
00007230 21C0 F70C                  		move.l	d0,($FFFFF70C).w
00007234 2200                       		move.l	d0,d1
00007236 4841                       		swap	d1
00007238 0241 0010                  		andi.w	#$10,d1
0000723C 1438 F74D                  		move.b	($FFFFF74D).w,d2
00007240 B501                       		eor.b	d2,d1
00007242 6600                       		bne.s	locret_67D0
00007244 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
0000724A 9083                       		sub.l	d3,d0
0000724C 6A00                       		bpl.s	loc_67CA
0000724E 08F8 0000 F756             		bset	#0,($FFFFF756).w
00007254 4E75                       		rts	
00007256                            ; ===========================================================================
00007256                            
00007256                            loc_67CA:
00007256 08F8 0001 F756             		bset	#1,($FFFFF756).w
0000725C                            
0000725C                            locret_67D0:
0000725C 4E75                       		rts	
0000725E                            ; End of function ScrollBlock1
0000725E                            
0000725E                            
0000725E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000725E                            
0000725E                            
0000725E                            ScrollBlock2:				; XREF: Deform_SLZ
0000725E 2438 F708                  		move.l	($FFFFF708).w,d2
00007262 2002                       		move.l	d2,d0
00007264 D084                       		add.l	d4,d0
00007266 21C0 F708                  		move.l	d0,($FFFFF708).w
0000726A 2638 F70C                  		move.l	($FFFFF70C).w,d3
0000726E 2003                       		move.l	d3,d0
00007270 D085                       		add.l	d5,d0
00007272 21C0 F70C                  		move.l	d0,($FFFFF70C).w
00007276 2200                       		move.l	d0,d1
00007278 4841                       		swap	d1
0000727A 0241 0010                  		andi.w	#$10,d1
0000727E 1438 F74D                  		move.b	($FFFFF74D).w,d2
00007282 B501                       		eor.b	d2,d1
00007284 6600                       		bne.s	locret_6812
00007286 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
0000728C 9083                       		sub.l	d3,d0
0000728E 6A00                       		bpl.s	loc_680C
00007290 08F8 0000 F756             		bset	#0,($FFFFF756).w
00007296 4E75                       		rts	
00007298                            ; ===========================================================================
00007298                            
00007298                            loc_680C:
00007298 08F8 0001 F756             		bset	#1,($FFFFF756).w
0000729E                            
0000729E                            locret_6812:
0000729E 4E75                       		rts	
000072A0                            ; End of function ScrollBlock2
000072A0                            
000072A0                            
000072A0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000072A0                            
000072A0                            
000072A0                            ScrollBlock3:				; XREF: Deform_GHZ; et al
000072A0 3638 F70C                  		move.w	($FFFFF70C).w,d3
000072A4 31C0 F70C                  		move.w	d0,($FFFFF70C).w
000072A8 3200                       		move.w	d0,d1
000072AA 0241 0010                  		andi.w	#$10,d1
000072AE 1438 F74D                  		move.b	($FFFFF74D).w,d2
000072B2 B501                       		eor.b	d2,d1
000072B4 6600                       		bne.s	locret_6842
000072B6 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
000072BC 9043                       		sub.w	d3,d0
000072BE 6A00                       		bpl.s	loc_683C
000072C0 08F8 0000 F756             		bset	#0,($FFFFF756).w
000072C6 4E75                       		rts	
000072C8                            ; ===========================================================================
000072C8                            
000072C8                            loc_683C:
000072C8 08F8 0001 F756             		bset	#1,($FFFFF756).w
000072CE                            
000072CE                            locret_6842:
000072CE 4E75                       		rts	
000072D0                            ; End of function ScrollBlock3
000072D0                            
000072D0                            
000072D0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000072D0                            
000072D0                            
000072D0                            ScrollBlock4:				; XREF: Deform_GHZ
000072D0 3438 F710                  		move.w	($FFFFF710).w,d2
000072D4 3638 F714                  		move.w	($FFFFF714).w,d3
000072D8 3038 F73A                  		move.w	($FFFFF73A).w,d0
000072DC 48C0                       		ext.l	d0
000072DE EF80                       		asl.l	#7,d0
000072E0 D1B8 F710                  		add.l	d0,($FFFFF710).w
000072E4 3038 F710                  		move.w	($FFFFF710).w,d0
000072E8 0240 0010                  		andi.w	#$10,d0
000072EC 1238 F74E                  		move.b	($FFFFF74E).w,d1
000072F0 B300                       		eor.b	d1,d0
000072F2 6600                       		bne.s	locret_6884
000072F4 0A38 0010 F74E             		eori.b	#$10,($FFFFF74E).w
000072FA 3038 F710                  		move.w	($FFFFF710).w,d0
000072FE 9042                       		sub.w	d2,d0
00007300 6A00                       		bpl.s	loc_687E
00007302 08F8 0002 F758             		bset	#2,($FFFFF758).w
00007308 6000                       		bra.s	locret_6884
0000730A                            ; ===========================================================================
0000730A                            
0000730A                            loc_687E:
0000730A 08F8 0003 F758             		bset	#3,($FFFFF758).w
00007310                            
00007310                            locret_6884:
00007310 4E75                       		rts	
00007312                            ; End of function ScrollBlock4
00007312                            
00007312                            
00007312                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007312                            
00007312                            
00007312                            sub_6886:				; XREF: loc_C44
00007312 4BF9 00C0 0004             		lea	($C00004).l,a5
00007318 4DF9 00C0 0000             		lea	($C00000).l,a6
0000731E 45F8 F756                  		lea	($FFFFF756).w,a2
00007322 47F8 F708                  		lea	($FFFFF708).w,a3
00007326 49F8 A440                  		lea	($FFFFA440).w,a4
0000732A 343C 6000                  		move.w	#$6000,d2
0000732E 6100 0000                  		bsr.w	sub_6954
00007332 45F8 F758                  		lea	($FFFFF758).w,a2
00007336 47F8 F710                  		lea	($FFFFF710).w,a3
0000733A 6000 0000                  		bra.w	sub_69F4
0000733E                            ; End of function sub_6886
0000733E                            
0000733E                            ; ---------------------------------------------------------------------------
0000733E                            ; Subroutine to	display	correct	tiles as you move
0000733E                            ; ---------------------------------------------------------------------------
0000733E                            
0000733E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000733E                            
0000733E                            
0000733E                            LoadTilesAsYouMove:			; XREF: Demo_Time
0000733E 4BF9 00C0 0004             		lea	($C00004).l,a5
00007344 4DF9 00C0 0000             		lea	($C00000).l,a6
0000734A 45F8 FF32                  		lea	($FFFFFF32).w,a2
0000734E 47F8 FF18                  		lea	($FFFFFF18).w,a3
00007352 49F8 A440                  		lea	($FFFFA440).w,a4
00007356 343C 6000                  		move.w	#$6000,d2
0000735A 6100 0000                  		bsr.w	sub_6954
0000735E 45F8 FF34                  		lea	($FFFFFF34).w,a2
00007362 47F8 FF20                  		lea	($FFFFFF20).w,a3
00007366 6100 0000                  		bsr.w	sub_69F4
0000736A 45F8 FF30                  		lea	($FFFFFF30).w,a2
0000736E 47F8 FF10                  		lea	($FFFFFF10).w,a3
00007372 49F8 A400                  		lea	($FFFFA400).w,a4
00007376 343C 4000                  		move.w	#$4000,d2
0000737A 4A12                       		tst.b	(a2)
0000737C 6700                       		beq.s	locret_6952
0000737E 0892 0000                  		bclr	#0,(a2)
00007382 6700                       		beq.s	loc_6908
00007384 78F0                       		moveq	#-$10,d4
00007386 7AF0                       		moveq	#-$10,d5
00007388 6100 0000                  		bsr.w	sub_6C20
0000738C 78F0                       		moveq	#-$10,d4
0000738E 7AF0                       		moveq	#-$10,d5
00007390 6100 0000                  		bsr.w	sub_6AD8
00007394                            
00007394                            loc_6908:
00007394 0892 0001                  		bclr	#1,(a2)
00007398 6700                       		beq.s	loc_6922
0000739A 383C 00E0                  		move.w	#$E0,d4
0000739E 7AF0                       		moveq	#-$10,d5
000073A0 6100 0000                  		bsr.w	sub_6C20
000073A4 383C 00E0                  		move.w	#$E0,d4
000073A8 7AF0                       		moveq	#-$10,d5
000073AA 6100 0000                  		bsr.w	sub_6AD8
000073AE                            
000073AE                            loc_6922:
000073AE 0892 0002                  		bclr	#2,(a2)
000073B2 6700                       		beq.s	loc_6938
000073B4 78F0                       		moveq	#-$10,d4
000073B6 7AF0                       		moveq	#-$10,d5
000073B8 6100 0000                  		bsr.w	sub_6C20
000073BC 78F0                       		moveq	#-$10,d4
000073BE 7AF0                       		moveq	#-$10,d5
000073C0 6100 0000                  		bsr.w	sub_6B04
000073C4                            
000073C4                            loc_6938:
000073C4 0892 0003                  		bclr	#3,(a2)
000073C8 6700                       		beq.s	locret_6952
000073CA 78F0                       		moveq	#-$10,d4
000073CC 3A3C 0140                  		move.w	#$140,d5
000073D0 6100 0000                  		bsr.w	sub_6C20
000073D4 78F0                       		moveq	#-$10,d4
000073D6 3A3C 0140                  		move.w	#$140,d5
000073DA 6100 0000                  		bsr.w	sub_6B04
000073DE                            
000073DE                            locret_6952:
000073DE 4E75                       		rts	
000073E0                            ; End of function LoadTilesAsYouMove
000073E0                            
000073E0                            
000073E0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000073E0                            
000073E0                            
000073E0                            sub_6954:				; XREF: sub_6886; LoadTilesAsYouMove
000073E0 4A12                       		tst.b	(a2)
000073E2 6700 0000                  		beq.w	locret_69F2
000073E6 0892 0000                  		bclr	#0,(a2)
000073EA 6700                       		beq.s	loc_6972
000073EC 78F0                       		moveq	#-$10,d4
000073EE 7AF0                       		moveq	#-$10,d5
000073F0 6100 0000                  		bsr.w	sub_6C20
000073F4 78F0                       		moveq	#-$10,d4
000073F6 7AF0                       		moveq	#-$10,d5
000073F8 7C1F                       		moveq	#$1F,d6
000073FA 6100 0000                  		bsr.w	sub_6ADA
000073FE                            
000073FE                            loc_6972:
000073FE 0892 0001                  		bclr	#1,(a2)
00007402 6700                       		beq.s	loc_698E
00007404 383C 00E0                  		move.w	#$E0,d4
00007408 7AF0                       		moveq	#-$10,d5
0000740A 6100 0000                  		bsr.w	sub_6C20
0000740E 383C 00E0                  		move.w	#$E0,d4
00007412 7AF0                       		moveq	#-$10,d5
00007414 7C1F                       		moveq	#$1F,d6
00007416 6100 0000                  		bsr.w	sub_6ADA
0000741A                            
0000741A                            loc_698E:
0000741A 0892 0002                  		bclr	#2,(a2)
0000741E 6700                       		beq.s	loc_69BE
00007420 78F0                       		moveq	#-$10,d4
00007422 7AF0                       		moveq	#-$10,d5
00007424 6100 0000                  		bsr.w	sub_6C20
00007428 78F0                       		moveq	#-$10,d4
0000742A 7AF0                       		moveq	#-$10,d5
0000742C 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
00007430 322B 0004                  		move.w	4(a3),d1
00007434 0241 FFF0                  		andi.w	#-$10,d1
00007438 9C41                       		sub.w	d1,d6
0000743A 6D00                       		blt.s	loc_69BE
0000743C E84E                       		lsr.w	#4,d6
0000743E 0C46 000F                  		cmpi.w	#$F,d6
00007442 6500                       		bcs.s	loc_69BA
00007444 7C0F                       		moveq	#$F,d6
00007446                            
00007446                            loc_69BA:
00007446 6100 0000                  		bsr.w	sub_6B06
0000744A                            
0000744A                            loc_69BE:
0000744A 0892 0003                  		bclr	#3,(a2)
0000744E 6700                       		beq.s	locret_69F2
00007450 78F0                       		moveq	#-$10,d4
00007452 3A3C 0140                  		move.w	#$140,d5
00007456 6100 0000                  		bsr.w	sub_6C20
0000745A 78F0                       		moveq	#-$10,d4
0000745C 3A3C 0140                  		move.w	#$140,d5
00007460 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
00007464 322B 0004                  		move.w	4(a3),d1
00007468 0241 FFF0                  		andi.w	#-$10,d1
0000746C 9C41                       		sub.w	d1,d6
0000746E 6D00                       		blt.s	locret_69F2
00007470 E84E                       		lsr.w	#4,d6
00007472 0C46 000F                  		cmpi.w	#$F,d6
00007476 6500                       		bcs.s	loc_69EE
00007478 7C0F                       		moveq	#$F,d6
0000747A                            
0000747A                            loc_69EE:
0000747A 6100 0000                  		bsr.w	sub_6B06
0000747E                            
0000747E                            locret_69F2:
0000747E 4E75                       		rts	
00007480                            ; End of function sub_6954
00007480                            
00007480                            
00007480                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007480                            
00007480                            
00007480                            sub_69F4:				; XREF: sub_6886; LoadTilesAsYouMove
00007480 4A12                       		tst.b	(a2)
00007482 6700 0000                  		beq.w	locret_6A80
00007486 0892 0002                  		bclr	#2,(a2)
0000748A 6700                       		beq.s	loc_6A3E
0000748C 0C53 0010                  		cmpi.w	#$10,(a3)
00007490 6500                       		bcs.s	loc_6A3E
00007492 3838 F7F0                  		move.w	($FFFFF7F0).w,d4
00007496 322B 0004                  		move.w	4(a3),d1
0000749A 0241 FFF0                  		andi.w	#-$10,d1
0000749E 9841                       		sub.w	d1,d4
000074A0 3F04                       		move.w	d4,-(sp)
000074A2 7AF0                       		moveq	#-$10,d5
000074A4 6100 0000                  		bsr.w	sub_6C20
000074A8 381F                       		move.w	(sp)+,d4
000074AA 7AF0                       		moveq	#-$10,d5
000074AC 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
000074B0 322B 0004                  		move.w	4(a3),d1
000074B4 0241 FFF0                  		andi.w	#-$10,d1
000074B8 9C41                       		sub.w	d1,d6
000074BA 6D00                       		blt.s	loc_6A3E
000074BC E84E                       		lsr.w	#4,d6
000074BE 0446 000E                  		subi.w	#$E,d6
000074C2 6400                       		bcc.s	loc_6A3E
000074C4 4446                       		neg.w	d6
000074C6 6100 0000                  		bsr.w	sub_6B06
000074CA                            
000074CA                            loc_6A3E:
000074CA 0892 0003                  		bclr	#3,(a2)
000074CE 6700                       		beq.s	locret_6A80
000074D0 3838 F7F0                  		move.w	($FFFFF7F0).w,d4
000074D4 322B 0004                  		move.w	4(a3),d1
000074D8 0241 FFF0                  		andi.w	#-$10,d1
000074DC 9841                       		sub.w	d1,d4
000074DE 3F04                       		move.w	d4,-(sp)
000074E0 3A3C 0140                  		move.w	#$140,d5
000074E4 6100 0000                  		bsr.w	sub_6C20
000074E8 381F                       		move.w	(sp)+,d4
000074EA 3A3C 0140                  		move.w	#$140,d5
000074EE 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
000074F2 322B 0004                  		move.w	4(a3),d1
000074F6 0241 FFF0                  		andi.w	#-$10,d1
000074FA 9C41                       		sub.w	d1,d6
000074FC 6D00                       		blt.s	locret_6A80
000074FE E84E                       		lsr.w	#4,d6
00007500 0446 000E                  		subi.w	#$E,d6
00007504 6400                       		bcc.s	locret_6A80
00007506 4446                       		neg.w	d6
00007508 6100 0000                  		bsr.w	sub_6B06
0000750C                            
0000750C                            locret_6A80:
0000750C 4E75                       		rts	
0000750E                            ; End of function sub_69F4
0000750E                            
0000750E                            ; ===========================================================================
0000750E 4A12                       		tst.b	(a2)
00007510 6700                       		beq.s	locret_6AD6
00007512 0892 0002                  		bclr	#2,(a2)
00007516 6700                       		beq.s	loc_6AAC
00007518 383C 00D0                  		move.w	#$D0,d4
0000751C 322B 0004                  		move.w	4(a3),d1
00007520 0241 FFF0                  		andi.w	#-$10,d1
00007524 9841                       		sub.w	d1,d4
00007526 3F04                       		move.w	d4,-(sp)
00007528 7AF0                       		moveq	#-$10,d5
0000752A 6100 0000                  		bsr.w	sub_6C3C
0000752E 381F                       		move.w	(sp)+,d4
00007530 7AF0                       		moveq	#-$10,d5
00007532 7C02                       		moveq	#2,d6
00007534 6100 0000                  		bsr.w	sub_6B06
00007538                            
00007538                            loc_6AAC:
00007538 0892 0003                  		bclr	#3,(a2)
0000753C 6700                       		beq.s	locret_6AD6
0000753E 383C 00D0                  		move.w	#$D0,d4
00007542 322B 0004                  		move.w	4(a3),d1
00007546 0241 FFF0                  		andi.w	#-$10,d1
0000754A 9841                       		sub.w	d1,d4
0000754C 3F04                       		move.w	d4,-(sp)
0000754E 3A3C 0140                  		move.w	#$140,d5
00007552 6100 0000                  		bsr.w	sub_6C3C
00007556 381F                       		move.w	(sp)+,d4
00007558 3A3C 0140                  		move.w	#$140,d5
0000755C 7C02                       		moveq	#2,d6
0000755E 6100 0000                  		bsr.w	sub_6B06
00007562                            
00007562                            locret_6AD6:
00007562 4E75                       		rts	
00007564                            
00007564                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007564                            
00007564                            
00007564                            sub_6AD8:				; XREF: LoadTilesAsYouMove
00007564 7C15                       		moveq	#$15,d6
00007566                            ; End of function sub_6AD8
00007566                            
00007566                            
00007566                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007566                            
00007566                            
00007566                            sub_6ADA:				; XREF: sub_6954; LoadTilesFromStart2
00007566 2E3C 0080 0000             		move.l	#$800000,d7
0000756C 2200                       		move.l	d0,d1
0000756E                            
0000756E                            loc_6AE2:
0000756E 48E7 0C00                  		movem.l	d4-d5,-(sp)
00007572 6100 0000                  		bsr.w	sub_6BD6
00007576 2001                       		move.l	d1,d0
00007578 6100 0000                  		bsr.w	sub_6B32
0000757C 5801                       		addq.b	#4,d1
0000757E 0201 007F                  		andi.b	#$7F,d1
00007582 4CDF 0030                  		movem.l	(sp)+,d4-d5
00007586 0645 0010                  		addi.w	#$10,d5
0000758A 51CE FFE2                  		dbf	d6,loc_6AE2
0000758E 4E75                       		rts	
00007590                            ; End of function sub_6ADA
00007590                            
00007590                            
00007590                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007590                            
00007590                            
00007590                            sub_6B04:				; XREF: LoadTilesAsYouMove
00007590 7C0F                       		moveq	#$F,d6
00007592                            ; End of function sub_6B04
00007592                            
00007592                            
00007592                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007592                            
00007592                            
00007592                            sub_6B06:				; XREF: sub_6954
00007592 2E3C 0080 0000             		move.l	#$800000,d7
00007598 2200                       		move.l	d0,d1
0000759A                            
0000759A                            loc_6B0E:
0000759A 48E7 0C00                  		movem.l	d4-d5,-(sp)
0000759E 6100 0000                  		bsr.w	sub_6BD6
000075A2 2001                       		move.l	d1,d0
000075A4 6100 0000                  		bsr.w	sub_6B32
000075A8 0641 0100                  		addi.w	#$100,d1
000075AC 0241 0FFF                  		andi.w	#$FFF,d1
000075B0 4CDF 0030                  		movem.l	(sp)+,d4-d5
000075B4 0644 0010                  		addi.w	#$10,d4
000075B8 51CE FFE0                  		dbf	d6,loc_6B0E
000075BC 4E75                       		rts	
000075BE                            ; End of function sub_6B06
000075BE                            
000075BE                            
000075BE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000075BE                            
000075BE                            
000075BE                            sub_6B32:				; XREF: sub_6ADA; sub_6B06
000075BE 8042                       		or.w	d2,d0
000075C0 4840                       		swap	d0
000075C2 0810 0004                  		btst	#4,(a0)
000075C6 6600                       		bne.s	loc_6B6E
000075C8 0810 0003                  		btst	#3,(a0)
000075CC 6600                       		bne.s	loc_6B4E
000075CE 2A80                       		move.l	d0,(a5)
000075D0 2C99                       		move.l	(a1)+,(a6)
000075D2 D087                       		add.l	d7,d0
000075D4 2A80                       		move.l	d0,(a5)
000075D6 2C99                       		move.l	(a1)+,(a6)
000075D8 4E75                       		rts	
000075DA                            ; ===========================================================================
000075DA                            
000075DA                            loc_6B4E:
000075DA 2A80                       		move.l	d0,(a5)
000075DC 2819                       		move.l	(a1)+,d4
000075DE 0A84 0800 0800             		eori.l	#$8000800,d4
000075E4 4844                       		swap	d4
000075E6 2C84                       		move.l	d4,(a6)
000075E8 D087                       		add.l	d7,d0
000075EA 2A80                       		move.l	d0,(a5)
000075EC 2819                       		move.l	(a1)+,d4
000075EE 0A84 0800 0800             		eori.l	#$8000800,d4
000075F4 4844                       		swap	d4
000075F6 2C84                       		move.l	d4,(a6)
000075F8 4E75                       		rts	
000075FA                            ; ===========================================================================
000075FA                            
000075FA                            loc_6B6E:
000075FA 0810 0003                  		btst	#3,(a0)
000075FE 6600                       		bne.s	loc_6B90
00007600 2A80                       		move.l	d0,(a5)
00007602 2A19                       		move.l	(a1)+,d5
00007604 2819                       		move.l	(a1)+,d4
00007606 0A84 1000 1000             		eori.l	#$10001000,d4
0000760C 2C84                       		move.l	d4,(a6)
0000760E D087                       		add.l	d7,d0
00007610 2A80                       		move.l	d0,(a5)
00007612 0A85 1000 1000             		eori.l	#$10001000,d5
00007618 2C85                       		move.l	d5,(a6)
0000761A 4E75                       		rts	
0000761C                            ; ===========================================================================
0000761C                            
0000761C                            loc_6B90:
0000761C 2A80                       		move.l	d0,(a5)
0000761E 2A19                       		move.l	(a1)+,d5
00007620 2819                       		move.l	(a1)+,d4
00007622 0A84 1800 1800             		eori.l	#$18001800,d4
00007628 4844                       		swap	d4
0000762A 2C84                       		move.l	d4,(a6)
0000762C D087                       		add.l	d7,d0
0000762E 2A80                       		move.l	d0,(a5)
00007630 0A85 1800 1800             		eori.l	#$18001800,d5
00007636 4845                       		swap	d5
00007638 2C85                       		move.l	d5,(a6)
0000763A 4E75                       		rts	
0000763C                            ; End of function sub_6B32
0000763C                            
0000763C                            ; ===========================================================================
0000763C 4E75                       		rts	
0000763E                            ; ===========================================================================
0000763E 2A80                       		move.l	d0,(a5)
00007640 3A3C 2000                  		move.w	#$2000,d5
00007644 3819                       		move.w	(a1)+,d4
00007646 D845                       		add.w	d5,d4
00007648 3C84                       		move.w	d4,(a6)
0000764A 3819                       		move.w	(a1)+,d4
0000764C D845                       		add.w	d5,d4
0000764E 3C84                       		move.w	d4,(a6)
00007650 D087                       		add.l	d7,d0
00007652 2A80                       		move.l	d0,(a5)
00007654 3819                       		move.w	(a1)+,d4
00007656 D845                       		add.w	d5,d4
00007658 3C84                       		move.w	d4,(a6)
0000765A 3819                       		move.w	(a1)+,d4
0000765C D845                       		add.w	d5,d4
0000765E 3C84                       		move.w	d4,(a6)
00007660 4E75                       		rts	
00007662                            
00007662                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007662                            
00007662                            
00007662                            sub_6BD6:				; XREF: sub_6ADA; sub_6B06
00007662 43F8 B000                  		lea	($FFFFB000).w,a1
00007666 D86B 0004                  		add.w	4(a3),d4
0000766A DA53                       		add.w	(a3),d5
0000766C 3604                       		move.w	d4,d3
0000766E E24B                       		lsr.w	#1,d3
00007670 0243 0380                  		andi.w	#$380,d3
00007674 E64D                       		lsr.w	#3,d5
00007676 3005                       		move.w	d5,d0
00007678 EA48                       		lsr.w	#5,d0
0000767A 0240 007F                  		andi.w	#$7F,d0
0000767E D043                       		add.w	d3,d0
00007680 76FF                       		moveq	#-1,d3
00007682 1634 0000                  		move.b	(a4,d0.w),d3
00007686 6700                       		beq.s	locret_6C1E
00007688 5303                       		subq.b	#1,d3
0000768A 0243 007F                  		andi.w	#$7F,d3
0000768E EE5B                       		ror.w	#7,d3
00007690 D844                       		add.w	d4,d4
00007692 0244 01E0                  		andi.w	#$1E0,d4
00007696 0245 001E                  		andi.w	#$1E,d5
0000769A D644                       		add.w	d4,d3
0000769C D645                       		add.w	d5,d3
0000769E 2043                       		movea.l	d3,a0
000076A0 3610                       		move.w	(a0),d3
000076A2 0243 03FF                  		andi.w	#$3FF,d3
000076A6 E74B                       		lsl.w	#3,d3
000076A8 D2C3                       		adda.w	d3,a1
000076AA                            
000076AA                            locret_6C1E:
000076AA 4E75                       		rts	
000076AC                            ; End of function sub_6BD6
000076AC                            
000076AC                            
000076AC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000076AC                            
000076AC                            
000076AC                            sub_6C20:				; XREF: LoadTilesAsYouMove; et al
000076AC D86B 0004                  		add.w	4(a3),d4
000076B0 DA53                       		add.w	(a3),d5
000076B2 0244 00F0                  		andi.w	#$F0,d4
000076B6 0245 01F0                  		andi.w	#$1F0,d5
000076BA E94C                       		lsl.w	#4,d4
000076BC E44D                       		lsr.w	#2,d5
000076BE D845                       		add.w	d5,d4
000076C0 7003                       		moveq	#3,d0
000076C2 4840                       		swap	d0
000076C4 3004                       		move.w	d4,d0
000076C6 4E75                       		rts	
000076C8                            ; End of function sub_6C20
000076C8                            
000076C8                            
000076C8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000076C8                            ; not used
000076C8                            
000076C8                            
000076C8                            sub_6C3C:
000076C8 D86B 0004                  		add.w	4(a3),d4
000076CC DA53                       		add.w	(a3),d5
000076CE 0244 00F0                  		andi.w	#$F0,d4
000076D2 0245 01F0                  		andi.w	#$1F0,d5
000076D6 E94C                       		lsl.w	#4,d4
000076D8 E44D                       		lsr.w	#2,d5
000076DA D845                       		add.w	d5,d4
000076DC 7002                       		moveq	#2,d0
000076DE 4840                       		swap	d0
000076E0 3004                       		move.w	d4,d0
000076E2 4E75                       		rts	
000076E4                            ; End of function sub_6C3C
000076E4                            
000076E4                            ; ---------------------------------------------------------------------------
000076E4                            ; Subroutine to	load tiles as soon as the level	appears
000076E4                            ; ---------------------------------------------------------------------------
000076E4                            
000076E4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000076E4                            
000076E4                            
000076E4                            LoadTilesFromStart:			; XREF: Level; EndingSequence
000076E4 4BF9 00C0 0004             		lea	($C00004).l,a5
000076EA 4DF9 00C0 0000             		lea	($C00000).l,a6
000076F0 47F8 F700                  		lea	($FFFFF700).w,a3
000076F4 49F8 A400                  		lea	($FFFFA400).w,a4
000076F8 343C 4000                  		move.w	#$4000,d2
000076FC 6100                       		bsr.s	LoadTilesFromStart2
000076FE 47F8 F708                  		lea	($FFFFF708).w,a3
00007702 49F8 A440                  		lea	($FFFFA440).w,a4
00007706 343C 6000                  		move.w	#$6000,d2
0000770A                            ; End of function LoadTilesFromStart
0000770A                            
0000770A                            
0000770A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000770A                            
0000770A                            
0000770A                            LoadTilesFromStart2:			; XREF: LoadTilesFromStart
0000770A 78F0                       		moveq	#-$10,d4
0000770C 7C0F                       		moveq	#$F,d6
0000770E                            
0000770E                            loc_6C82:
0000770E 48E7 0E00                  		movem.l	d4-d6,-(sp)
00007712 7A00                       		moveq	#0,d5
00007714 3204                       		move.w	d4,d1
00007716 6100 FF94                  		bsr.w	sub_6C20
0000771A 3801                       		move.w	d1,d4
0000771C 7A00                       		moveq	#0,d5
0000771E 7C1F                       		moveq	#$1F,d6
00007720 6100 FE44                  		bsr.w	sub_6ADA
00007724 4CDF 0070                  		movem.l	(sp)+,d4-d6
00007728 0644 0010                  		addi.w	#$10,d4
0000772C 51CE FFE0                  		dbf	d6,loc_6C82
00007730 4E75                       		rts	
00007732                            ; End of function LoadTilesFromStart2
00007732                            
00007732                            ; ---------------------------------------------------------------------------
00007732                            ; Main Load Block loading subroutine
00007732                            ; ---------------------------------------------------------------------------
00007732                            
00007732                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007732                            
00007732                            
00007732                            MainLoadBlockLoad:			; XREF: Level; EndingSequence
00007732 7000                       		moveq	#0,d0
00007734 1038 FE10                  		move.b	($FFFFFE10).w,d0
00007738 E948                       		lsl.w	#4,d0
0000773A 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2
00007740 45F2 0000                  		lea	(a2,d0.w),a2
00007744 2F0A                       		move.l	a2,-(sp)
00007746 588A                       		addq.l	#4,a2
00007748 205A                       		movea.l	(a2)+,a0
0000774A 43F8 B000                  		lea	($FFFFB000).w,a1 ; RAM address for 16x16 mappings
0000774E 303C 0000                  		move.w	#0,d0
00007752 6100 A13A                  		bsr.w	EniDec
00007756 205A                       		movea.l	(a2)+,a0
00007758 43F9 00FF 0000             		lea	($FF0000).l,a1	; RAM address for 256x256 mappings
0000775E 6100 A2AC                  		bsr.w	KosDec
00007762 6100 0000                  		bsr.w	LevelLayoutLoad
00007766 301A                       		move.w	(a2)+,d0
00007768 3012                       		move.w	(a2),d0
0000776A 0240 00FF                  		andi.w	#$FF,d0
0000776E 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; is level SBZ3 (LZ4) ?
00007774 6600                       		bne.s	MLB_ChkSBZPal	; if not, branch
00007776 700C                       		moveq	#$C,d0		; use SB3 pallet
00007778                            
00007778                            MLB_ChkSBZPal:
00007778 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w ; is level SBZ2?
0000777E 6700                       		beq.s	MLB_UsePal0E	; if yes, branch
00007780 0C78 0502 FE10             		cmpi.w	#$502,($FFFFFE10).w ; is level FZ?
00007786 6600                       		bne.s	MLB_NormalPal	; if not, branch
00007788                            
00007788                            MLB_UsePal0E:
00007788 700E                       		moveq	#$E,d0		; use SBZ2/FZ pallet
0000778A                            
0000778A                            MLB_NormalPal:
0000778A 6100 ACA8                  		bsr.w	PalLoad1	; load pallet (based on	d0)
0000778E 245F                       		movea.l	(sp)+,a2
00007790 584A                       		addq.w	#4,a2
00007792 7000                       		moveq	#0,d0
00007794 1012                       		move.b	(a2),d0
00007796 6700                       		beq.s	locret_6D10
00007798 6100 9F56                  		bsr.w	LoadPLC		; load pattern load cues
0000779C                            
0000779C                            locret_6D10:
0000779C 4E75                       		rts	
0000779E                            ; End of function MainLoadBlockLoad
0000779E                            
0000779E                            ; ---------------------------------------------------------------------------
0000779E                            ; Level	layout loading subroutine
0000779E                            ; ---------------------------------------------------------------------------
0000779E                            
0000779E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000779E                            
0000779E                            
0000779E                            LevelLayoutLoad:			; XREF: TitleScreen; MainLoadBlockLoad
0000779E 47F8 A400                  		lea	($FFFFA400).w,a3
000077A2 323C 01FF                  		move.w	#$1FF,d1
000077A6 7000                       		moveq	#0,d0
000077A8                            
000077A8                            LevLoad_ClrRam:
000077A8 26C0                       		move.l	d0,(a3)+
000077AA 51C9 FFFC                  		dbf	d1,LevLoad_ClrRam ; clear the RAM ($FFFFA400-A7FF)
000077AE                            
000077AE 47F8 A400                  		lea	($FFFFA400).w,a3 ; RAM address for level layout
000077B2 7200                       		moveq	#0,d1
000077B4 6100 0000                  		bsr.w	LevelLayoutLoad2 ; load	level layout into RAM
000077B8 47F8 A440                  		lea	($FFFFA440).w,a3 ; RAM address for background layout
000077BC 7202                       		moveq	#2,d1
000077BE                            ; End of function LevelLayoutLoad
000077BE                            
000077BE                            ; "LevelLayoutLoad2" is	run twice - for	the level and the background
000077BE                            
000077BE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000077BE                            
000077BE                            
000077BE                            LevelLayoutLoad2:			; XREF: LevelLayoutLoad
000077BE 3038 FE10                  		move.w	($FFFFFE10).w,d0
000077C2 ED08                       		lsl.b	#6,d0
000077C4 EA48                       		lsr.w	#5,d0
000077C6 3400                       		move.w	d0,d2
000077C8 D040                       		add.w	d0,d0
000077CA D042                       		add.w	d2,d0
000077CC D041                       		add.w	d1,d0
000077CE 43F9 0000 0000             		lea	(Level_Index).l,a1
000077D4 3031 0000                  		move.w	(a1,d0.w),d0
000077D8 43F1 0000                  		lea	(a1,d0.w),a1
000077DC 7200                       		moveq	#0,d1
000077DE 3401                       		move.w	d1,d2
000077E0 1219                       		move.b	(a1)+,d1	; load level width (in tiles)
000077E2 1419                       		move.b	(a1)+,d2	; load level height (in	tiles)
000077E4                            
000077E4                            LevLoad_NumRows:
000077E4 3001                       		move.w	d1,d0
000077E6 204B                       		movea.l	a3,a0
000077E8                            
000077E8                            LevLoad_Row:
000077E8 10D9                       		move.b	(a1)+,(a0)+
000077EA 51C8 FFFC                  		dbf	d0,LevLoad_Row	; load 1 row
000077EE 47EB 0080                  		lea	$80(a3),a3	; do next row
000077F2 51CA FFF0                  		dbf	d2,LevLoad_NumRows ; repeat for	number of rows
000077F6 4E75                       		rts	
000077F8                            ; End of function LevelLayoutLoad2
000077F8                            
000077F8                            ; ---------------------------------------------------------------------------
000077F8                            ; Dynamic screen resize	loading	subroutine
000077F8                            ; ---------------------------------------------------------------------------
000077F8                            
000077F8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000077F8                            
000077F8                            
000077F8                            DynScrResizeLoad:			; XREF: DeformBgLayer
000077F8 7000                       		moveq	#0,d0
000077FA 1038 FE10                  		move.b	($FFFFFE10).w,d0
000077FE D040                       		add.w	d0,d0
00007800 303B 0000                  		move.w	Resize_Index(pc,d0.w),d0
00007804 4EBB 0000                  		jsr	Resize_Index(pc,d0.w)
00007808 7202                       		moveq	#2,d1
0000780A 3038 F726                  		move.w	($FFFFF726).w,d0
0000780E 9078 F72E                  		sub.w	($FFFFF72E).w,d0
00007812 6700                       		beq.s	locret_6DAA
00007814 6400                       		bcc.s	loc_6DAC
00007816 4441                       		neg.w	d1
00007818 3038 F704                  		move.w	($FFFFF704).w,d0
0000781C B078 F726                  		cmp.w	($FFFFF726).w,d0
00007820 6300                       		bls.s	loc_6DA0
00007822 31C0 F72E                  		move.w	d0,($FFFFF72E).w
00007826 0278 FFFE F72E             		andi.w	#-2,($FFFFF72E).w
0000782C                            
0000782C                            loc_6DA0:
0000782C D378 F72E                  		add.w	d1,($FFFFF72E).w
00007830 11FC 0001 F75C             		move.b	#1,($FFFFF75C).w
00007836                            
00007836                            locret_6DAA:
00007836 4E75                       		rts	
00007838                            ; ===========================================================================
00007838                            
00007838                            loc_6DAC:				; XREF: DynScrResizeLoad
00007838 3038 F704                  		move.w	($FFFFF704).w,d0
0000783C 5040                       		addq.w	#8,d0
0000783E B078 F72E                  		cmp.w	($FFFFF72E).w,d0
00007842 6500                       		bcs.s	loc_6DC4
00007844 0838 0001 D022             		btst	#1,($FFFFD022).w
0000784A 6700                       		beq.s	loc_6DC4
0000784C D241                       		add.w	d1,d1
0000784E D241                       		add.w	d1,d1
00007850                            
00007850                            loc_6DC4:
00007850 D378 F72E                  		add.w	d1,($FFFFF72E).w
00007854 11FC 0001 F75C             		move.b	#1,($FFFFF75C).w
0000785A 4E75                       		rts	
0000785C                            ; End of function DynScrResizeLoad
0000785C                            
0000785C                            ; ===========================================================================
0000785C                            ; ---------------------------------------------------------------------------
0000785C                            ; Offset index for dynamic screen resizing
0000785C                            ; ---------------------------------------------------------------------------
0000785C 0000 0000                  Resize_Index:	dc.w Resize_GHZ-Resize_Index, Resize_LZ-Resize_Index
00007860 0000 0000                  		dc.w Resize_MZ-Resize_Index, Resize_SLZ-Resize_Index
00007864 0000 0000                  		dc.w Resize_SYZ-Resize_Index, Resize_SBZ-Resize_Index
00007868 0000                       		dc.w Resize_Ending-Resize_Index
0000786A                            ; ===========================================================================
0000786A                            ; ---------------------------------------------------------------------------
0000786A                            ; Green	Hill Zone dynamic screen resizing
0000786A                            ; ---------------------------------------------------------------------------
0000786A                            
0000786A                            Resize_GHZ:				; XREF: Resize_Index
0000786A 7000                       		moveq	#0,d0
0000786C 1038 FE11                  		move.b	($FFFFFE11).w,d0
00007870 D040                       		add.w	d0,d0
00007872 303B 0000                  		move.w	Resize_GHZx(pc,d0.w),d0
00007876 4EFB 0000                  		jmp	Resize_GHZx(pc,d0.w)
0000787A                            ; ===========================================================================
0000787A 0000                       Resize_GHZx:	dc.w Resize_GHZ1-Resize_GHZx
0000787C 0000                       		dc.w Resize_GHZ2-Resize_GHZx
0000787E 0000                       		dc.w Resize_GHZ3-Resize_GHZx
00007880                            ; ===========================================================================
00007880                            
00007880                            Resize_GHZ1:
00007880 31FC 0300 F726             		move.w	#$300,($FFFFF726).w ; set lower	y-boundary
00007886 0C78 1780 F700             		cmpi.w	#$1780,($FFFFF700).w ; has the camera reached $1780 on x-axis?
0000788C 6500                       		bcs.s	locret_6E08	; if not, branch
0000788E 31FC 0400 F726             		move.w	#$400,($FFFFF726).w ; set lower	y-boundary
00007894                            
00007894                            locret_6E08:
00007894 4E75                       		rts	
00007896                            ; ===========================================================================
00007896                            
00007896                            Resize_GHZ2:
00007896 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
0000789C 0C78 0ED0 F700             		cmpi.w	#$ED0,($FFFFF700).w
000078A2 6500                       		bcs.s	locret_6E3A
000078A4 31FC 0200 F726             		move.w	#$200,($FFFFF726).w
000078AA 0C78 1600 F700             		cmpi.w	#$1600,($FFFFF700).w
000078B0 6500                       		bcs.s	locret_6E3A
000078B2 31FC 0400 F726             		move.w	#$400,($FFFFF726).w
000078B8 0C78 1D60 F700             		cmpi.w	#$1D60,($FFFFF700).w
000078BE 6500                       		bcs.s	locret_6E3A
000078C0 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
000078C6                            
000078C6                            locret_6E3A:
000078C6 4E75                       		rts	
000078C8                            ; ===========================================================================
000078C8                            
000078C8                            Resize_GHZ3:
000078C8 7000                       		moveq	#0,d0
000078CA 1038 F742                  		move.b	($FFFFF742).w,d0
000078CE 303B 0000                  		move.w	off_6E4A(pc,d0.w),d0
000078D2 4EFB 0000                  		jmp	off_6E4A(pc,d0.w)
000078D6                            ; ===========================================================================
000078D6 0000                       off_6E4A:	dc.w Resize_GHZ3main-off_6E4A
000078D8 0000                       		dc.w Resize_GHZ3boss-off_6E4A
000078DA 0000                       		dc.w Resize_GHZ3end-off_6E4A
000078DC                            ; ===========================================================================
000078DC                            
000078DC                            Resize_GHZ3main:
000078DC 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
000078E2 0C78 0380 F700             		cmpi.w	#$380,($FFFFF700).w
000078E8 6500                       		bcs.s	locret_6E96
000078EA 31FC 0310 F726             		move.w	#$310,($FFFFF726).w
000078F0 0C78 0960 F700             		cmpi.w	#$960,($FFFFF700).w
000078F6 6500                       		bcs.s	locret_6E96
000078F8 0C78 0280 F704             		cmpi.w	#$280,($FFFFF704).w
000078FE 6500                       		bcs.s	loc_6E98
00007900 31FC 0400 F726             		move.w	#$400,($FFFFF726).w
00007906 0C78 1380 F700             		cmpi.w	#$1380,($FFFFF700).w
0000790C 6400                       		bcc.s	loc_6E8E
0000790E 31FC 04C0 F726             		move.w	#$4C0,($FFFFF726).w
00007914 31FC 04C0 F72E             		move.w	#$4C0,($FFFFF72E).w
0000791A                            
0000791A                            loc_6E8E:
0000791A 0C78 1700 F700             		cmpi.w	#$1700,($FFFFF700).w
00007920 6400                       		bcc.s	loc_6E98
00007922                            
00007922                            locret_6E96:
00007922 4E75                       		rts	
00007924                            ; ===========================================================================
00007924                            
00007924                            loc_6E98:
00007924 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
0000792A 5438 F742                  		addq.b	#2,($FFFFF742).w
0000792E 4E75                       		rts	
00007930                            ; ===========================================================================
00007930                            
00007930                            Resize_GHZ3boss:
00007930 0C78 0960 F700             		cmpi.w	#$960,($FFFFF700).w
00007936 6400                       		bcc.s	loc_6EB0
00007938 5538 F742                  		subq.b	#2,($FFFFF742).w
0000793C                            
0000793C                            loc_6EB0:
0000793C 0C78 2960 F700             		cmpi.w	#$2960,($FFFFF700).w
00007942 6500                       		bcs.s	locret_6EE8
00007944 6100 0000                  		bsr.w	SingleObjLoad
00007948 6600                       		bne.s	loc_6ED0
0000794A 12BC 003D                  		move.b	#$3D,0(a1)	; load GHZ boss	object
0000794E 337C 2A60 0008             		move.w	#$2A60,8(a1)
00007954 337C 0280 000C             		move.w	#$280,$C(a1)
0000795A                            
0000795A                            loc_6ED0:
0000795A 303C 008C                  		move.w	#$8C,d0
0000795E 6100 9B16                  		bsr.w	PlaySound	; play boss music
00007962 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007968 5438 F742                  		addq.b	#2,($FFFFF742).w
0000796C 7011                       		moveq	#$11,d0
0000796E 6000 9D80                  		bra.w	LoadPLC		; load boss patterns
00007972                            ; ===========================================================================
00007972                            
00007972                            locret_6EE8:
00007972 4E75                       		rts	
00007974                            ; ===========================================================================
00007974                            
00007974                            Resize_GHZ3end:
00007974 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
0000797A 4E75                       		rts	
0000797C                            ; ===========================================================================
0000797C                            ; ---------------------------------------------------------------------------
0000797C                            ; Labyrinth Zone dynamic screen	resizing
0000797C                            ; ---------------------------------------------------------------------------
0000797C                            
0000797C                            Resize_LZ:				; XREF: Resize_Index
0000797C 7000                       		moveq	#0,d0
0000797E 1038 FE11                  		move.b	($FFFFFE11).w,d0
00007982 D040                       		add.w	d0,d0
00007984 303B 0000                  		move.w	Resize_LZx(pc,d0.w),d0
00007988 4EFB 0000                  		jmp	Resize_LZx(pc,d0.w)
0000798C                            ; ===========================================================================
0000798C 0000                       Resize_LZx:	dc.w Resize_LZ12-Resize_LZx
0000798E 0000                       		dc.w Resize_LZ12-Resize_LZx
00007990 0000                       		dc.w Resize_LZ3-Resize_LZx
00007992 0000                       		dc.w Resize_SBZ3-Resize_LZx
00007994                            ; ===========================================================================
00007994                            
00007994                            Resize_LZ12:
00007994 4E75                       		rts	
00007996                            ; ===========================================================================
00007996                            
00007996                            Resize_LZ3:
00007996 4A38 F7EF                  		tst.b	($FFFFF7EF).w	; has switch $F	been pressed?
0000799A 6700                       		beq.s	loc_6F28	; if not, branch
0000799C 43F8 A506                  		lea	($FFFFA506).w,a1
000079A0 0C11 0007                  		cmpi.b	#7,(a1)
000079A4 6700                       		beq.s	loc_6F28
000079A6 12BC 0007                  		move.b	#7,(a1)		; modify level layout
000079AA 303C 00B7                  		move.w	#$B7,d0
000079AE 6100 9ACC                  		bsr.w	PlaySound_Special ; play rumbling sound
000079B2                            
000079B2                            loc_6F28:
000079B2 4A38 F742                  		tst.b	($FFFFF742).w
000079B6 6600                       		bne.s	locret_6F64
000079B8 0C78 1CA0 F700             		cmpi.w	#$1CA0,($FFFFF700).w
000079BE 6500                       		bcs.s	locret_6F62
000079C0 0C78 0600 F704             		cmpi.w	#$600,($FFFFF704).w
000079C6 6400                       		bcc.s	locret_6F62
000079C8 6100 0000                  		bsr.w	SingleObjLoad
000079CC 6600                       		bne.s	loc_6F4A
000079CE 12BC 0077                  		move.b	#$77,0(a1)	; load LZ boss object
000079D2                            
000079D2                            loc_6F4A:
000079D2 303C 008C                  		move.w	#$8C,d0
000079D6 6100 9A9E                  		bsr.w	PlaySound	; play boss music
000079DA 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
000079E0 5438 F742                  		addq.b	#2,($FFFFF742).w
000079E4 7011                       		moveq	#$11,d0
000079E6 6000 9D08                  		bra.w	LoadPLC		; load boss patterns
000079EA                            ; ===========================================================================
000079EA                            
000079EA                            locret_6F62:
000079EA 4E75                       		rts	
000079EC                            ; ===========================================================================
000079EC                            
000079EC                            locret_6F64:
000079EC 4E75                       		rts	
000079EE                            ; ===========================================================================
000079EE                            
000079EE                            Resize_SBZ3:
000079EE 0C78 0D00 F700             		cmpi.w	#$D00,($FFFFF700).w
000079F4 6500                       		bcs.s	locret_6F8C
000079F6 0C78 0018 D00C             		cmpi.w	#$18,($FFFFD00C).w ; has Sonic reached the top of the level?
000079FC 6400                       		bcc.s	locret_6F8C	; if not, branch
000079FE 4238 FE30                  		clr.b	($FFFFFE30).w
00007A02 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
00007A08 31FC 0502 FE10             		move.w	#$502,($FFFFFE10).w ; set level	number to 0502 (FZ)
00007A0E 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; freeze Sonic
00007A14                            
00007A14                            locret_6F8C:
00007A14 4E75                       		rts	
00007A16                            ; ===========================================================================
00007A16                            ; ---------------------------------------------------------------------------
00007A16                            ; Marble Zone dynamic screen resizing
00007A16                            ; ---------------------------------------------------------------------------
00007A16                            
00007A16                            Resize_MZ:				; XREF: Resize_Index
00007A16 7000                       		moveq	#0,d0
00007A18 1038 FE11                  		move.b	($FFFFFE11).w,d0
00007A1C D040                       		add.w	d0,d0
00007A1E 303B 0000                  		move.w	Resize_MZx(pc,d0.w),d0
00007A22 4EFB 0000                  		jmp	Resize_MZx(pc,d0.w)
00007A26                            ; ===========================================================================
00007A26 0000                       Resize_MZx:	dc.w Resize_MZ1-Resize_MZx
00007A28 0000                       		dc.w Resize_MZ2-Resize_MZx
00007A2A 0000                       		dc.w Resize_MZ3-Resize_MZx
00007A2C                            ; ===========================================================================
00007A2C                            
00007A2C                            Resize_MZ1:
00007A2C 7000                       		moveq	#0,d0
00007A2E 1038 F742                  		move.b	($FFFFF742).w,d0
00007A32 303B 0000                  		move.w	off_6FB2(pc,d0.w),d0
00007A36 4EFB 0000                  		jmp	off_6FB2(pc,d0.w)
00007A3A                            ; ===========================================================================
00007A3A 0000                       off_6FB2:	dc.w loc_6FBA-off_6FB2
00007A3C 0000                       		dc.w loc_6FEA-off_6FB2
00007A3E 0000                       		dc.w loc_702E-off_6FB2
00007A40 0000                       		dc.w loc_7050-off_6FB2
00007A42                            ; ===========================================================================
00007A42                            
00007A42                            loc_6FBA:
00007A42 31FC 01D0 F726             		move.w	#$1D0,($FFFFF726).w
00007A48 0C78 0700 F700             		cmpi.w	#$700,($FFFFF700).w
00007A4E 6500                       		bcs.s	locret_6FE8
00007A50 31FC 0220 F726             		move.w	#$220,($FFFFF726).w
00007A56 0C78 0D00 F700             		cmpi.w	#$D00,($FFFFF700).w
00007A5C 6500                       		bcs.s	locret_6FE8
00007A5E 31FC 0340 F726             		move.w	#$340,($FFFFF726).w
00007A64 0C78 0340 F704             		cmpi.w	#$340,($FFFFF704).w
00007A6A 6500                       		bcs.s	locret_6FE8
00007A6C 5438 F742                  		addq.b	#2,($FFFFF742).w
00007A70                            
00007A70                            locret_6FE8:
00007A70 4E75                       		rts	
00007A72                            ; ===========================================================================
00007A72                            
00007A72                            loc_6FEA:
00007A72 0C78 0340 F704             		cmpi.w	#$340,($FFFFF704).w
00007A78 6400                       		bcc.s	loc_6FF8
00007A7A 5538 F742                  		subq.b	#2,($FFFFF742).w
00007A7E 4E75                       		rts	
00007A80                            ; ===========================================================================
00007A80                            
00007A80                            loc_6FF8:
00007A80 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
00007A86 0C78 0E00 F700             		cmpi.w	#$E00,($FFFFF700).w
00007A8C 6400                       		bcc.s	locret_702C
00007A8E 31FC 0340 F72C             		move.w	#$340,($FFFFF72C).w
00007A94 31FC 0340 F726             		move.w	#$340,($FFFFF726).w
00007A9A 0C78 0A90 F700             		cmpi.w	#$A90,($FFFFF700).w
00007AA0 6400                       		bcc.s	locret_702C
00007AA2 31FC 0500 F726             		move.w	#$500,($FFFFF726).w
00007AA8 0C78 0370 F704             		cmpi.w	#$370,($FFFFF704).w
00007AAE 6500                       		bcs.s	locret_702C
00007AB0 5438 F742                  		addq.b	#2,($FFFFF742).w
00007AB4                            
00007AB4                            locret_702C:
00007AB4 4E75                       		rts	
00007AB6                            ; ===========================================================================
00007AB6                            
00007AB6                            loc_702E:
00007AB6 0C78 0370 F704             		cmpi.w	#$370,($FFFFF704).w
00007ABC 6400                       		bcc.s	loc_703C
00007ABE 5538 F742                  		subq.b	#2,($FFFFF742).w
00007AC2 4E75                       		rts	
00007AC4                            ; ===========================================================================
00007AC4                            
00007AC4                            loc_703C:
00007AC4 0C78 0500 F704             		cmpi.w	#$500,($FFFFF704).w
00007ACA 6500                       		bcs.s	locret_704E
00007ACC 31FC 0500 F72C             		move.w	#$500,($FFFFF72C).w
00007AD2 5438 F742                  		addq.b	#2,($FFFFF742).w
00007AD6                            
00007AD6                            locret_704E:
00007AD6 4E75                       		rts	
00007AD8                            ; ===========================================================================
00007AD8                            
00007AD8                            loc_7050:
00007AD8 0C78 0E70 F700             		cmpi.w	#$E70,($FFFFF700).w
00007ADE 6500                       		bcs.s	locret_7072
00007AE0 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
00007AE6 31FC 0500 F726             		move.w	#$500,($FFFFF726).w
00007AEC 0C78 1430 F700             		cmpi.w	#$1430,($FFFFF700).w
00007AF2 6500                       		bcs.s	locret_7072
00007AF4 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
00007AFA                            
00007AFA                            locret_7072:
00007AFA 4E75                       		rts	
00007AFC                            ; ===========================================================================
00007AFC                            
00007AFC                            Resize_MZ2:
00007AFC 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
00007B02 0C78 1700 F700             		cmpi.w	#$1700,($FFFFF700).w
00007B08 6500                       		bcs.s	locret_7088
00007B0A 31FC 0200 F726             		move.w	#$200,($FFFFF726).w
00007B10                            
00007B10                            locret_7088:
00007B10 4E75                       		rts	
00007B12                            ; ===========================================================================
00007B12                            
00007B12                            Resize_MZ3:
00007B12 7000                       		moveq	#0,d0
00007B14 1038 F742                  		move.b	($FFFFF742).w,d0
00007B18 303B 0000                  		move.w	off_7098(pc,d0.w),d0
00007B1C 4EFB 0000                  		jmp	off_7098(pc,d0.w)
00007B20                            ; ===========================================================================
00007B20 0000                       off_7098:	dc.w Resize_MZ3boss-off_7098
00007B22 0000                       		dc.w Resize_MZ3end-off_7098
00007B24                            ; ===========================================================================
00007B24                            
00007B24                            Resize_MZ3boss:
00007B24 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
00007B2A 0C78 1560 F700             		cmpi.w	#$1560,($FFFFF700).w
00007B30 6500                       		bcs.s	locret_70E8
00007B32 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
00007B38 0C78 17F0 F700             		cmpi.w	#$17F0,($FFFFF700).w
00007B3E 6500                       		bcs.s	locret_70E8
00007B40 6100 0000                  		bsr.w	SingleObjLoad
00007B44 6600                       		bne.s	loc_70D0
00007B46 12BC 0073                  		move.b	#$73,0(a1)	; load MZ boss object
00007B4A 337C 19F0 0008             		move.w	#$19F0,8(a1)
00007B50 337C 022C 000C             		move.w	#$22C,$C(a1)
00007B56                            
00007B56                            loc_70D0:
00007B56 303C 008C                  		move.w	#$8C,d0
00007B5A 6100 991A                  		bsr.w	PlaySound	; play boss music
00007B5E 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007B64 5438 F742                  		addq.b	#2,($FFFFF742).w
00007B68 7011                       		moveq	#$11,d0
00007B6A 6000 9B84                  		bra.w	LoadPLC		; load boss patterns
00007B6E                            ; ===========================================================================
00007B6E                            
00007B6E                            locret_70E8:
00007B6E 4E75                       		rts	
00007B70                            ; ===========================================================================
00007B70                            
00007B70                            Resize_MZ3end:
00007B70 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
00007B76 4E75                       		rts	
00007B78                            ; ===========================================================================
00007B78                            ; ---------------------------------------------------------------------------
00007B78                            ; Star Light Zone dynamic screen resizing
00007B78                            ; ---------------------------------------------------------------------------
00007B78                            
00007B78                            Resize_SLZ:				; XREF: Resize_Index
00007B78 7000                       		moveq	#0,d0
00007B7A 1038 FE11                  		move.b	($FFFFFE11).w,d0
00007B7E D040                       		add.w	d0,d0
00007B80 303B 0000                  		move.w	Resize_SLZx(pc,d0.w),d0
00007B84 4EFB 0000                  		jmp	Resize_SLZx(pc,d0.w)
00007B88                            ; ===========================================================================
00007B88 0000                       Resize_SLZx:	dc.w Resize_SLZ12-Resize_SLZx
00007B8A 0000                       		dc.w Resize_SLZ12-Resize_SLZx
00007B8C 0000                       		dc.w Resize_SLZ3-Resize_SLZx
00007B8E                            ; ===========================================================================
00007B8E                            
00007B8E                            Resize_SLZ12:
00007B8E 4E75                       		rts	
00007B90                            ; ===========================================================================
00007B90                            
00007B90                            Resize_SLZ3:
00007B90 7000                       		moveq	#0,d0
00007B92 1038 F742                  		move.b	($FFFFF742).w,d0
00007B96 303B 0000                  		move.w	off_7118(pc,d0.w),d0
00007B9A 4EFB 0000                  		jmp	off_7118(pc,d0.w)
00007B9E                            ; ===========================================================================
00007B9E 0000                       off_7118:	dc.w Resize_SLZ3main-off_7118
00007BA0 0000                       		dc.w Resize_SLZ3boss-off_7118
00007BA2 0000                       		dc.w Resize_SLZ3end-off_7118
00007BA4                            ; ===========================================================================
00007BA4                            
00007BA4                            Resize_SLZ3main:
00007BA4 0C78 1E70 F700             		cmpi.w	#$1E70,($FFFFF700).w
00007BAA 6500                       		bcs.s	locret_7130
00007BAC 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
00007BB2 5438 F742                  		addq.b	#2,($FFFFF742).w
00007BB6                            
00007BB6                            locret_7130:
00007BB6 4E75                       		rts	
00007BB8                            ; ===========================================================================
00007BB8                            
00007BB8                            Resize_SLZ3boss:
00007BB8 0C78 2000 F700             		cmpi.w	#$2000,($FFFFF700).w
00007BBE 6500                       		bcs.s	locret_715C
00007BC0 6100 0000                  		bsr.w	SingleObjLoad
00007BC4 6600                       		bne.s	loc_7144
00007BC6 12BC 007A                  		move.b	#$7A,(a1)	; load SLZ boss	object
00007BCA                            
00007BCA                            loc_7144:
00007BCA 303C 008C                  		move.w	#$8C,d0
00007BCE 6100 98A6                  		bsr.w	PlaySound	; play boss music
00007BD2 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007BD8 5438 F742                  		addq.b	#2,($FFFFF742).w
00007BDC 7011                       		moveq	#$11,d0
00007BDE 6000 9B10                  		bra.w	LoadPLC		; load boss patterns
00007BE2                            ; ===========================================================================
00007BE2                            
00007BE2                            locret_715C:
00007BE2 4E75                       		rts	
00007BE4                            ; ===========================================================================
00007BE4                            
00007BE4                            Resize_SLZ3end:
00007BE4 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
00007BEA 4E75                       		rts
00007BEC 4E75                       		rts
00007BEE                            ; ===========================================================================
00007BEE                            ; ---------------------------------------------------------------------------
00007BEE                            ; Spring Yard Zone dynamic screen resizing
00007BEE                            ; ---------------------------------------------------------------------------
00007BEE                            
00007BEE                            Resize_SYZ:				; XREF: Resize_Index
00007BEE 7000                       		moveq	#0,d0
00007BF0 1038 FE11                  		move.b	($FFFFFE11).w,d0
00007BF4 D040                       		add.w	d0,d0
00007BF6 303B 0000                  		move.w	Resize_SYZx(pc,d0.w),d0
00007BFA 4EFB 0000                  		jmp	Resize_SYZx(pc,d0.w)
00007BFE                            ; ===========================================================================
00007BFE 0000                       Resize_SYZx:	dc.w Resize_SYZ1-Resize_SYZx
00007C00 0000                       		dc.w Resize_SYZ2-Resize_SYZx
00007C02 0000                       		dc.w Resize_SYZ3-Resize_SYZx
00007C04                            ; ===========================================================================
00007C04                            
00007C04                            Resize_SYZ1:
00007C04 4E75                       		rts	
00007C06                            ; ===========================================================================
00007C06                            
00007C06                            Resize_SYZ2:
00007C06 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
00007C0C 0C78 25A0 F700             		cmpi.w	#$25A0,($FFFFF700).w
00007C12 6500                       		bcs.s	locret_71A2
00007C14 31FC 0420 F726             		move.w	#$420,($FFFFF726).w
00007C1A 0C78 04D0 D00C             		cmpi.w	#$4D0,($FFFFD00C).w
00007C20 6500                       		bcs.s	locret_71A2
00007C22 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
00007C28                            
00007C28                            locret_71A2:
00007C28 4E75                       		rts	
00007C2A                            ; ===========================================================================
00007C2A                            
00007C2A                            Resize_SYZ3:
00007C2A 7000                       		moveq	#0,d0
00007C2C 1038 F742                  		move.b	($FFFFF742).w,d0
00007C30 303B 0000                  		move.w	off_71B2(pc,d0.w),d0
00007C34 4EFB 0000                  		jmp	off_71B2(pc,d0.w)
00007C38                            ; ===========================================================================
00007C38 0000                       off_71B2:	dc.w Resize_SYZ3main-off_71B2
00007C3A 0000                       		dc.w Resize_SYZ3boss-off_71B2
00007C3C 0000                       		dc.w Resize_SYZ3end-off_71B2
00007C3E                            ; ===========================================================================
00007C3E                            
00007C3E                            Resize_SYZ3main:
00007C3E 0C78 2AC0 F700             		cmpi.w	#$2AC0,($FFFFF700).w
00007C44 6500                       		bcs.s	locret_71CE
00007C46 6100 0000                  		bsr.w	SingleObjLoad
00007C4A 6600                       		bne.s	locret_71CE
00007C4C 12BC 0076                  		move.b	#$76,(a1)	; load blocks that boss	picks up
00007C50 5438 F742                  		addq.b	#2,($FFFFF742).w
00007C54                            
00007C54                            locret_71CE:
00007C54 4E75                       		rts	
00007C56                            ; ===========================================================================
00007C56                            
00007C56                            Resize_SYZ3boss:
00007C56 0C78 2C00 F700             		cmpi.w	#$2C00,($FFFFF700).w
00007C5C 6500                       		bcs.s	locret_7200
00007C5E 31FC 04CC F726             		move.w	#$4CC,($FFFFF726).w
00007C64 6100 0000                  		bsr.w	SingleObjLoad
00007C68 6600                       		bne.s	loc_71EC
00007C6A 12BC 0075                  		move.b	#$75,(a1)	; load SYZ boss	object
00007C6E 5438 F742                  		addq.b	#2,($FFFFF742).w
00007C72                            
00007C72                            loc_71EC:
00007C72 303C 008C                  		move.w	#$8C,d0
00007C76 6100 97FE                  		bsr.w	PlaySound	; play boss music
00007C7A 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007C80 7011                       		moveq	#$11,d0
00007C82 6000 9A6C                  		bra.w	LoadPLC		; load boss patterns
00007C86                            ; ===========================================================================
00007C86                            
00007C86                            locret_7200:
00007C86 4E75                       		rts	
00007C88                            ; ===========================================================================
00007C88                            
00007C88                            Resize_SYZ3end:
00007C88 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
00007C8E 4E75                       		rts	
00007C90                            ; ===========================================================================
00007C90                            ; ---------------------------------------------------------------------------
00007C90                            ; Scrap	Brain Zone dynamic screen resizing
00007C90                            ; ---------------------------------------------------------------------------
00007C90                            
00007C90                            Resize_SBZ:				; XREF: Resize_Index
00007C90 7000                       		moveq	#0,d0
00007C92 1038 FE11                  		move.b	($FFFFFE11).w,d0
00007C96 D040                       		add.w	d0,d0
00007C98 303B 0000                  		move.w	Resize_SBZx(pc,d0.w),d0
00007C9C 4EFB 0000                  		jmp	Resize_SBZx(pc,d0.w)
00007CA0                            ; ===========================================================================
00007CA0 0000                       Resize_SBZx:	dc.w Resize_SBZ1-Resize_SBZx
00007CA2 0000                       		dc.w Resize_SBZ2-Resize_SBZx
00007CA4 0000                       		dc.w Resize_FZ-Resize_SBZx
00007CA6                            ; ===========================================================================
00007CA6                            
00007CA6                            Resize_SBZ1:
00007CA6 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
00007CAC 0C78 1880 F700             		cmpi.w	#$1880,($FFFFF700).w
00007CB2 6500                       		bcs.s	locret_7242
00007CB4 31FC 0620 F726             		move.w	#$620,($FFFFF726).w
00007CBA 0C78 2000 F700             		cmpi.w	#$2000,($FFFFF700).w
00007CC0 6500                       		bcs.s	locret_7242
00007CC2 31FC 02A0 F726             		move.w	#$2A0,($FFFFF726).w
00007CC8                            
00007CC8                            locret_7242:
00007CC8 4E75                       		rts	
00007CCA                            ; ===========================================================================
00007CCA                            
00007CCA                            Resize_SBZ2:
00007CCA 7000                       		moveq	#0,d0
00007CCC 1038 F742                  		move.b	($FFFFF742).w,d0
00007CD0 303B 0000                  		move.w	off_7252(pc,d0.w),d0
00007CD4 4EFB 0000                  		jmp	off_7252(pc,d0.w)
00007CD8                            ; ===========================================================================
00007CD8 0000                       off_7252:	dc.w Resize_SBZ2main-off_7252
00007CDA 0000                       		dc.w Resize_SBZ2boss-off_7252
00007CDC 0000                       		dc.w Resize_SBZ2boss2-off_7252
00007CDE 0000                       		dc.w Resize_SBZ2end-off_7252
00007CE0                            ; ===========================================================================
00007CE0                            
00007CE0                            Resize_SBZ2main:
00007CE0 31FC 0800 F726             		move.w	#$800,($FFFFF726).w
00007CE6 0C78 1800 F700             		cmpi.w	#$1800,($FFFFF700).w
00007CEC 6500                       		bcs.s	locret_727A
00007CEE 31FC 0510 F726             		move.w	#$510,($FFFFF726).w
00007CF4 0C78 1E00 F700             		cmpi.w	#$1E00,($FFFFF700).w
00007CFA 6500                       		bcs.s	locret_727A
00007CFC 5438 F742                  		addq.b	#2,($FFFFF742).w
00007D00                            
00007D00                            locret_727A:
00007D00 4E75                       		rts	
00007D02                            ; ===========================================================================
00007D02                            
00007D02                            Resize_SBZ2boss:
00007D02 0C78 1EB0 F700             		cmpi.w	#$1EB0,($FFFFF700).w
00007D08 6500                       		bcs.s	locret_7298
00007D0A 6100 0000                  		bsr.w	SingleObjLoad
00007D0E 6600                       		bne.s	locret_7298
00007D10 12BC 0083                  		move.b	#$83,(a1)	; load collapsing block	object
00007D14 5438 F742                  		addq.b	#2,($FFFFF742).w
00007D18 701E                       		moveq	#$1E,d0
00007D1A 6000 99D4                  		bra.w	LoadPLC		; load SBZ2 Eggman patterns
00007D1E                            ; ===========================================================================
00007D1E                            
00007D1E                            locret_7298:
00007D1E 4E75                       		rts	
00007D20                            ; ===========================================================================
00007D20                            
00007D20                            Resize_SBZ2boss2:
00007D20 0C78 1F60 F700             		cmpi.w	#$1F60,($FFFFF700).w
00007D26 6500                       		bcs.s	loc_72B6
00007D28 6100 0000                  		bsr.w	SingleObjLoad
00007D2C 6600                       		bne.s	loc_72B0
00007D2E 12BC 0082                  		move.b	#$82,(a1)	; load SBZ2 Eggman object
00007D32 5438 F742                  		addq.b	#2,($FFFFF742).w
00007D36                            
00007D36                            loc_72B0:
00007D36 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007D3C                            
00007D3C                            loc_72B6:
00007D3C 6000                       		bra.s	loc_72C2
00007D3E                            ; ===========================================================================
00007D3E                            
00007D3E                            Resize_SBZ2end:
00007D3E 0C78 2050 F700             		cmpi.w	#$2050,($FFFFF700).w
00007D44 6500                       		bcs.s	loc_72C2
00007D46 4E75                       		rts	
00007D48                            ; ===========================================================================
00007D48                            
00007D48                            loc_72C2:
00007D48 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
00007D4E 4E75                       		rts	
00007D50                            ; ===========================================================================
00007D50                            
00007D50                            Resize_FZ:
00007D50 7000                       		moveq	#0,d0
00007D52 1038 F742                  		move.b	($FFFFF742).w,d0
00007D56 303B 0000                  		move.w	off_72D8(pc,d0.w),d0
00007D5A 4EFB 0000                  		jmp	off_72D8(pc,d0.w)
00007D5E                            ; ===========================================================================
00007D5E 0000 0000                  off_72D8:	dc.w Resize_FZmain-off_72D8, Resize_FZboss-off_72D8
00007D62 0000 0000                  		dc.w Resize_FZend-off_72D8, locret_7322-off_72D8
00007D66 0000                       		dc.w Resize_FZend2-off_72D8
00007D68                            ; ===========================================================================
00007D68                            
00007D68                            Resize_FZmain:
00007D68 0C78 2148 F700             		cmpi.w	#$2148,($FFFFF700).w
00007D6E 6500                       		bcs.s	loc_72F4
00007D70 5438 F742                  		addq.b	#2,($FFFFF742).w
00007D74 701F                       		moveq	#$1F,d0
00007D76 6100 9978                  		bsr.w	LoadPLC		; load FZ boss patterns
00007D7A                            
00007D7A                            loc_72F4:
00007D7A 60CC                       		bra.s	loc_72C2
00007D7C                            ; ===========================================================================
00007D7C                            
00007D7C                            Resize_FZboss:
00007D7C 0C78 2300 F700             		cmpi.w	#$2300,($FFFFF700).w
00007D82 6500                       		bcs.s	loc_7312
00007D84 6100 0000                  		bsr.w	SingleObjLoad
00007D88 6600                       		bne.s	loc_7312
00007D8A 12BC 0085                  		move.b	#$85,(a1)	; load FZ boss object
00007D8E 5438 F742                  		addq.b	#2,($FFFFF742).w
00007D92 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007D98                            
00007D98                            loc_7312:
00007D98 60AE                       		bra.s	loc_72C2
00007D9A                            ; ===========================================================================
00007D9A                            
00007D9A                            Resize_FZend:
00007D9A 0C78 2450 F700             		cmpi.w	#$2450,($FFFFF700).w
00007DA0 6500                       		bcs.s	loc_7320
00007DA2 5438 F742                  		addq.b	#2,($FFFFF742).w
00007DA6                            
00007DA6                            loc_7320:
00007DA6 60A0                       		bra.s	loc_72C2
00007DA8                            ; ===========================================================================
00007DA8                            
00007DA8                            locret_7322:
00007DA8 4E75                       		rts	
00007DAA                            ; ===========================================================================
00007DAA                            
00007DAA                            Resize_FZend2:
00007DAA 609C                       		bra.s	loc_72C2
00007DAC                            ; ===========================================================================
00007DAC                            ; ---------------------------------------------------------------------------
00007DAC                            ; Ending sequence dynamic screen resizing (empty)
00007DAC                            ; ---------------------------------------------------------------------------
00007DAC                            
00007DAC                            Resize_Ending:				; XREF: Resize_Index
00007DAC 4E75                       		rts	
00007DAE                            ; ===========================================================================
00007DAE                            ; ---------------------------------------------------------------------------
00007DAE                            ; Object 11 - GHZ bridge
00007DAE                            ; ---------------------------------------------------------------------------
00007DAE                            
00007DAE                            Obj11:					; XREF: Obj_Index
00007DAE 7000                       		moveq	#0,d0
00007DB0 1028 0024                  		move.b	$24(a0),d0
00007DB4 323B 0000                  		move.w	Obj11_Index(pc,d0.w),d1
00007DB8 4EFB 1000                  		jmp	Obj11_Index(pc,d1.w)
00007DBC                            ; ===========================================================================
00007DBC 0000 0000                  Obj11_Index:	dc.w Obj11_Main-Obj11_Index, Obj11_Action-Obj11_Index
00007DC0 0000 0000                  		dc.w Obj11_Action2-Obj11_Index,	Obj11_Delete2-Obj11_Index
00007DC4 0000 0000                  		dc.w Obj11_Delete2-Obj11_Index,	Obj11_Display2-Obj11_Index
00007DC8                            ; ===========================================================================
00007DC8                            
00007DC8                            Obj11_Main:				; XREF: Obj11_Index
00007DC8 5428 0024                  		addq.b	#2,$24(a0)
00007DCC 217C 0000 0000 0004        		move.l	#Map_obj11,4(a0)
00007DD4 317C 438E 0002             		move.w	#$438E,2(a0)
00007DDA 117C 0004 0001             		move.b	#4,1(a0)
00007DE0 117C 0003 0018             		move.b	#3,$18(a0)
00007DE6 117C 0080 0019             		move.b	#$80,$19(a0)
00007DEC 3428 000C                  		move.w	$C(a0),d2
00007DF0 3628 0008                  		move.w	8(a0),d3
00007DF4 1810                       		move.b	0(a0),d4	; copy object number ($11) to d4
00007DF6 45E8 0028                  		lea	$28(a0),a2	; copy bridge subtype to a2
00007DFA 7200                       		moveq	#0,d1
00007DFC 1212                       		move.b	(a2),d1		; copy a2 to d1
00007DFE 14FC 0000                  		move.b	#0,(a2)+
00007E02 3001                       		move.w	d1,d0
00007E04 E248                       		lsr.w	#1,d0
00007E06 E948                       		lsl.w	#4,d0
00007E08 9640                       		sub.w	d0,d3
00007E0A 5501                       		subq.b	#2,d1
00007E0C 6500                       		bcs.s	Obj11_Action
00007E0E                            
00007E0E                            Obj11_MakeBdg:
00007E0E 6100 0000                  		bsr.w	SingleObjLoad
00007E12 6600                       		bne.s	Obj11_Action
00007E14 5228 0028                  		addq.b	#1,$28(a0)
00007E18 B668 0008                  		cmp.w	8(a0),d3
00007E1C 6600                       		bne.s	loc_73B8
00007E1E 0643 0010                  		addi.w	#$10,d3
00007E22 3142 000C                  		move.w	d2,$C(a0)
00007E26 3142 003C                  		move.w	d2,$3C(a0)
00007E2A 3A08                       		move.w	a0,d5
00007E2C 0445 D000                  		subi.w	#-$3000,d5
00007E30 EC4D                       		lsr.w	#6,d5
00007E32 0245 007F                  		andi.w	#$7F,d5
00007E36 14C5                       		move.b	d5,(a2)+
00007E38 5228 0028                  		addq.b	#1,$28(a0)
00007E3C                            
00007E3C                            loc_73B8:				; XREF: ROM:00007398j
00007E3C 3A09                       		move.w	a1,d5
00007E3E 0445 D000                  		subi.w	#-$3000,d5
00007E42 EC4D                       		lsr.w	#6,d5
00007E44 0245 007F                  		andi.w	#$7F,d5
00007E48 14C5                       		move.b	d5,(a2)+
00007E4A 137C 000A 0024             		move.b	#$A,$24(a1)
00007E50 1284                       		move.b	d4,0(a1)	; load bridge object (d4 = $11)
00007E52 3342 000C                  		move.w	d2,$C(a1)
00007E56 3342 003C                  		move.w	d2,$3C(a1)
00007E5A 3343 0008                  		move.w	d3,8(a1)
00007E5E 237C 0000 0000 0004        		move.l	#Map_obj11,4(a1)
00007E66 337C 438E 0002             		move.w	#$438E,2(a1)
00007E6C 137C 0004 0001             		move.b	#4,1(a1)
00007E72 137C 0003 0018             		move.b	#3,$18(a1)
00007E78 137C 0008 0019             		move.b	#8,$19(a1)
00007E7E 0643 0010                  		addi.w	#$10,d3
00007E82 51C9 FF8A                  		dbf	d1,Obj11_MakeBdg ; repeat d1 times (length of bridge)
00007E86                            
00007E86                            Obj11_Action:				; XREF: Obj11_Index
00007E86 6100                       		bsr.s	Obj11_Solid
00007E88 4A28 003E                  		tst.b	$3E(a0)
00007E8C 6700                       		beq.s	Obj11_Display
00007E8E 5928 003E                  		subq.b	#4,$3E(a0)
00007E92 6100 0000                  		bsr.w	Obj11_Bend
00007E96                            
00007E96                            Obj11_Display:
00007E96 6100 0000                  		bsr.w	DisplaySprite
00007E9A 6000 0000                  		bra.w	Obj11_ChkDel
00007E9E                            
00007E9E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007E9E                            
00007E9E                            
00007E9E                            Obj11_Solid:				; XREF: Obj11_Action
00007E9E 7200                       		moveq	#0,d1
00007EA0 1228 0028                  		move.b	$28(a0),d1
00007EA4 E749                       		lsl.w	#3,d1
00007EA6 3401                       		move.w	d1,d2
00007EA8 5041                       		addq.w	#8,d1
00007EAA D442                       		add.w	d2,d2
00007EAC 43F8 D000                  		lea	($FFFFD000).w,a1
00007EB0 4A69 0012                  		tst.w	$12(a1)
00007EB4 6B00 0000                  		bmi.w	locret_751E
00007EB8 3029 0008                  		move.w	8(a1),d0
00007EBC 9068 0008                  		sub.w	8(a0),d0
00007EC0 D041                       		add.w	d1,d0
00007EC2 6B00 0000                  		bmi.w	locret_751E
00007EC6 B042                       		cmp.w	d2,d0
00007EC8 6400 0000                  		bcc.w	locret_751E
00007ECC 6000                       		bra.s	Platform2
00007ECE                            ; End of function Obj11_Solid
00007ECE                            
00007ECE                            ; ---------------------------------------------------------------------------
00007ECE                            ; Platform subroutine
00007ECE                            ; ---------------------------------------------------------------------------
00007ECE                            
00007ECE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007ECE                            
00007ECE                            
00007ECE                            PlatformObject:
00007ECE 43F8 D000                  		lea	($FFFFD000).w,a1
00007ED2 4A69 0012                  		tst.w	$12(a1)
00007ED6 6B00 0000                  		bmi.w	locret_751E
00007EDA 3029 0008                  		move.w	8(a1),d0
00007EDE 9068 0008                  		sub.w	8(a0),d0
00007EE2 D041                       		add.w	d1,d0
00007EE4 6B00 0000                  		bmi.w	locret_751E
00007EE8 D241                       		add.w	d1,d1
00007EEA B041                       		cmp.w	d1,d0
00007EEC 6400 0000                  		bcc.w	locret_751E
00007EF0                            
00007EF0                            Platform2:
00007EF0 3028 000C                  		move.w	$C(a0),d0
00007EF4 5140                       		subq.w	#8,d0
00007EF6                            
00007EF6                            Platform3:
00007EF6 3429 000C                  		move.w	$C(a1),d2
00007EFA 1229 0016                  		move.b	$16(a1),d1
00007EFE 4881                       		ext.w	d1
00007F00 D242                       		add.w	d2,d1
00007F02 5841                       		addq.w	#4,d1
00007F04 9041                       		sub.w	d1,d0
00007F06 6200 0000                  		bhi.w	locret_751E
00007F0A 0C40 FFF0                  		cmpi.w	#-$10,d0
00007F0E 6500 0000                  		bcs.w	locret_751E
00007F12 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00007F16 6B00 0000                  		bmi.w	locret_751E
00007F1A 0C29 0006 0024             		cmpi.b	#6,$24(a1)
00007F20 6400 0000                  		bcc.w	locret_751E
00007F24 D440                       		add.w	d0,d2
00007F26 5642                       		addq.w	#3,d2
00007F28 3342 000C                  		move.w	d2,$C(a1)
00007F2C 5428 0024                  		addq.b	#2,$24(a0)
00007F30                            
00007F30                            loc_74AE:
00007F30 0829 0003 0022             		btst	#3,$22(a1)
00007F36 6700                       		beq.s	loc_74DC
00007F38 7000                       		moveq	#0,d0
00007F3A 1029 003D                  		move.b	$3D(a1),d0
00007F3E ED48                       		lsl.w	#6,d0
00007F40 0680 00FF D000             		addi.l	#$FFD000,d0
00007F46 2440                       		movea.l	d0,a2
00007F48 08AA 0003 0022             		bclr	#3,$22(a2)
00007F4E 422A 0025                  		clr.b	$25(a2)
00007F52 0C2A 0004 0024             		cmpi.b	#4,$24(a2)
00007F58 6600                       		bne.s	loc_74DC
00007F5A 552A 0024                  		subq.b	#2,$24(a2)
00007F5E                            
00007F5E                            loc_74DC:
00007F5E 3008                       		move.w	a0,d0
00007F60 0440 D000                  		subi.w	#-$3000,d0
00007F64 EC48                       		lsr.w	#6,d0
00007F66 0240 007F                  		andi.w	#$7F,d0
00007F6A 1340 003D                  		move.b	d0,$3D(a1)
00007F6E 137C 0000 0026             		move.b	#0,$26(a1)
00007F74 337C 0000 0012             		move.w	#0,$12(a1)
00007F7A 3369 0010 0014             		move.w	$10(a1),$14(a1)
00007F80 0829 0001 0022             		btst	#1,$22(a1)
00007F86 6700                       		beq.s	loc_7512
00007F88 2F08                       		move.l	a0,-(sp)
00007F8A 2049                       		movea.l	a1,a0
00007F8C 4EB9 0000 0000             		jsr	Sonic_ResetOnFloor
00007F92 205F                       		movea.l	(sp)+,a0
00007F94                            
00007F94                            loc_7512:
00007F94 08E9 0003 0022             		bset	#3,$22(a1)
00007F9A 08E8 0003 0022             		bset	#3,$22(a0)
00007FA0                            
00007FA0                            locret_751E:
00007FA0 4E75                       		rts	
00007FA2                            ; End of function PlatformObject
00007FA2                            
00007FA2                            ; ---------------------------------------------------------------------------
00007FA2                            ; Sloped platform subroutine (GHZ collapsing ledges and	SLZ seesaws)
00007FA2                            ; ---------------------------------------------------------------------------
00007FA2                            
00007FA2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007FA2                            
00007FA2                            
00007FA2                            SlopeObject:				; XREF: Obj1A_Slope; Obj5E_Slope
00007FA2 43F8 D000                  		lea	($FFFFD000).w,a1
00007FA6 4A69 0012                  		tst.w	$12(a1)
00007FAA 6B00 FFF4                  		bmi.w	locret_751E
00007FAE 3029 0008                  		move.w	8(a1),d0
00007FB2 9068 0008                  		sub.w	8(a0),d0
00007FB6 D041                       		add.w	d1,d0
00007FB8 6BE6                       		bmi.s	locret_751E
00007FBA D241                       		add.w	d1,d1
00007FBC B041                       		cmp.w	d1,d0
00007FBE 64E0                       		bcc.s	locret_751E
00007FC0 0828 0000 0001             		btst	#0,1(a0)
00007FC6 6700                       		beq.s	loc_754A
00007FC8 4640                       		not.w	d0
00007FCA D041                       		add.w	d1,d0
00007FCC                            
00007FCC                            loc_754A:
00007FCC E248                       		lsr.w	#1,d0
00007FCE 7600                       		moveq	#0,d3
00007FD0 1632 0000                  		move.b	(a2,d0.w),d3
00007FD4 3028 000C                  		move.w	$C(a0),d0
00007FD8 9043                       		sub.w	d3,d0
00007FDA 6000 FF1A                  		bra.w	Platform3
00007FDE                            ; End of function SlopeObject
00007FDE                            
00007FDE                            
00007FDE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007FDE                            
00007FDE                            
00007FDE                            Obj15_Solid:				; XREF: Obj15_SetSolid
00007FDE 43F8 D000                  		lea	($FFFFD000).w,a1
00007FE2 4A69 0012                  		tst.w	$12(a1)
00007FE6 6B00 FFB8                  		bmi.w	locret_751E
00007FEA 3029 0008                  		move.w	8(a1),d0
00007FEE 9068 0008                  		sub.w	8(a0),d0
00007FF2 D041                       		add.w	d1,d0
00007FF4 6B00 FFAA                  		bmi.w	locret_751E
00007FF8 D241                       		add.w	d1,d1
00007FFA B041                       		cmp.w	d1,d0
00007FFC 6400 FFA2                  		bcc.w	locret_751E
00008000 3028 000C                  		move.w	$C(a0),d0
00008004 9043                       		sub.w	d3,d0
00008006 6000 FEEE                  		bra.w	Platform3
0000800A                            ; End of function Obj15_Solid
0000800A                            
0000800A                            ; ===========================================================================
0000800A                            
0000800A                            Obj11_Action2:				; XREF: Obj11_Index
0000800A 6100                       		bsr.s	Obj11_WalkOff
0000800C 6100 0000                  		bsr.w	DisplaySprite
00008010 6000 0000                  		bra.w	Obj11_ChkDel
00008014                            
00008014                            ; ---------------------------------------------------------------------------
00008014                            ; Subroutine allowing Sonic to walk off a bridge
00008014                            ; ---------------------------------------------------------------------------
00008014                            
00008014                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008014                            
00008014                            
00008014                            Obj11_WalkOff:				; XREF: Obj11_Action2
00008014 7200                       		moveq	#0,d1
00008016 1228 0028                  		move.b	$28(a0),d1
0000801A E749                       		lsl.w	#3,d1
0000801C 3401                       		move.w	d1,d2
0000801E 5041                       		addq.w	#8,d1
00008020 6100                       		bsr.s	ExitPlatform2
00008022 6400                       		bcc.s	locret_75BE
00008024 E848                       		lsr.w	#4,d0
00008026 1140 003F                  		move.b	d0,$3F(a0)
0000802A 1028 003E                  		move.b	$3E(a0),d0
0000802E 0C00 0040                  		cmpi.b	#$40,d0
00008032 6700                       		beq.s	loc_75B6
00008034 5828 003E                  		addq.b	#4,$3E(a0)
00008038                            
00008038                            loc_75B6:
00008038 6100 0000                  		bsr.w	Obj11_Bend
0000803C 6100 0000                  		bsr.w	Obj11_MoveSonic
00008040                            
00008040                            locret_75BE:
00008040 4E75                       		rts	
00008042                            ; End of function Obj11_WalkOff
00008042                            
00008042                            ; ---------------------------------------------------------------------------
00008042                            ; Subroutine allowing Sonic to walk or jump off	a platform
00008042                            ; ---------------------------------------------------------------------------
00008042                            
00008042                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008042                            
00008042                            
00008042                            ExitPlatform:
00008042 3401                       		move.w	d1,d2
00008044                            
00008044                            ExitPlatform2:
00008044 D442                       		add.w	d2,d2
00008046 43F8 D000                  		lea	($FFFFD000).w,a1
0000804A 0829 0001 0022             		btst	#1,$22(a1)
00008050 6600                       		bne.s	loc_75E0
00008052 3029 0008                  		move.w	8(a1),d0
00008056 9068 0008                  		sub.w	8(a0),d0
0000805A D041                       		add.w	d1,d0
0000805C 6B00                       		bmi.s	loc_75E0
0000805E B042                       		cmp.w	d2,d0
00008060 6500                       		bcs.s	locret_75F2
00008062                            
00008062                            loc_75E0:
00008062 08A9 0003 0022             		bclr	#3,$22(a1)
00008068 117C 0002 0024             		move.b	#2,$24(a0)
0000806E 08A8 0003 0022             		bclr	#3,$22(a0)
00008074                            
00008074                            locret_75F2:
00008074 4E75                       		rts	
00008076                            ; End of function ExitPlatform
00008076                            
00008076                            
00008076                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008076                            
00008076                            
00008076                            Obj11_MoveSonic:			; XREF: Obj11_WalkOff
00008076 7000                       		moveq	#0,d0
00008078 1028 003F                  		move.b	$3F(a0),d0
0000807C 1030 0029                  		move.b	$29(a0,d0.w),d0
00008080 ED48                       		lsl.w	#6,d0
00008082 0680 00FF D000             		addi.l	#$FFD000,d0
00008088 2440                       		movea.l	d0,a2
0000808A 43F8 D000                  		lea	($FFFFD000).w,a1
0000808E 302A 000C                  		move.w	$C(a2),d0
00008092 5140                       		subq.w	#8,d0
00008094 7200                       		moveq	#0,d1
00008096 1229 0016                  		move.b	$16(a1),d1
0000809A 9041                       		sub.w	d1,d0
0000809C 3340 000C                  		move.w	d0,$C(a1)	; change Sonic's position on y-axis
000080A0 4E75                       		rts	
000080A2                            ; End of function Obj11_MoveSonic
000080A2                            
000080A2                            
000080A2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000080A2                            
000080A2                            
000080A2                            Obj11_Bend:				; XREF: Obj11_Action; Obj11_WalkOff
000080A2 1028 003E                  		move.b	$3E(a0),d0
000080A6 6100 B332                  		bsr.w	CalcSine
000080AA 3800                       		move.w	d0,d4
000080AC 49F9 0000 0000             		lea	(Obj11_BendData2).l,a4
000080B2 7000                       		moveq	#0,d0
000080B4 1028 0028                  		move.b	$28(a0),d0
000080B8 E948                       		lsl.w	#4,d0
000080BA 7600                       		moveq	#0,d3
000080BC 1628 003F                  		move.b	$3F(a0),d3
000080C0 3403                       		move.w	d3,d2
000080C2 D640                       		add.w	d0,d3
000080C4 7A00                       		moveq	#0,d5
000080C6 4BF9 0000 0000             		lea	(Obj11_BendData).l,a5
000080CC 1A35 3000                  		move.b	(a5,d3.w),d5
000080D0 0243 000F                  		andi.w	#$F,d3
000080D4 E94B                       		lsl.w	#4,d3
000080D6 47F4 3000                  		lea	(a4,d3.w),a3
000080DA 45E8 0029                  		lea	$29(a0),a2
000080DE                            
000080DE                            loc_765C:
000080DE 7000                       		moveq	#0,d0
000080E0 101A                       		move.b	(a2)+,d0
000080E2 ED48                       		lsl.w	#6,d0
000080E4 0680 00FF D000             		addi.l	#$FFD000,d0
000080EA 2240                       		movea.l	d0,a1
000080EC 7000                       		moveq	#0,d0
000080EE 101B                       		move.b	(a3)+,d0
000080F0 5240                       		addq.w	#1,d0
000080F2 C0C5                       		mulu.w	d5,d0
000080F4 C0C4                       		mulu.w	d4,d0
000080F6 4840                       		swap	d0
000080F8 D069 003C                  		add.w	$3C(a1),d0
000080FC 3340 000C                  		move.w	d0,$C(a1)
00008100 51CA FFDC                  		dbf	d2,loc_765C
00008104 7000                       		moveq	#0,d0
00008106 1028 0028                  		move.b	$28(a0),d0
0000810A 7600                       		moveq	#0,d3
0000810C 1628 003F                  		move.b	$3F(a0),d3
00008110 5203                       		addq.b	#1,d3
00008112 9600                       		sub.b	d0,d3
00008114 4403                       		neg.b	d3
00008116 6B00                       		bmi.s	locret_76CA
00008118 3403                       		move.w	d3,d2
0000811A E94B                       		lsl.w	#4,d3
0000811C 47F4 3000                  		lea	(a4,d3.w),a3
00008120 D6C2                       		adda.w	d2,a3
00008122 5342                       		subq.w	#1,d2
00008124 6500                       		bcs.s	locret_76CA
00008126                            
00008126                            loc_76A4:
00008126 7000                       		moveq	#0,d0
00008128 101A                       		move.b	(a2)+,d0
0000812A ED48                       		lsl.w	#6,d0
0000812C 0680 00FF D000             		addi.l	#$FFD000,d0
00008132 2240                       		movea.l	d0,a1
00008134 7000                       		moveq	#0,d0
00008136 1023                       		move.b	-(a3),d0
00008138 5240                       		addq.w	#1,d0
0000813A C0C5                       		mulu.w	d5,d0
0000813C C0C4                       		mulu.w	d4,d0
0000813E 4840                       		swap	d0
00008140 D069 003C                  		add.w	$3C(a1),d0
00008144 3340 000C                  		move.w	d0,$C(a1)
00008148 51CA FFDC                  		dbf	d2,loc_76A4
0000814C                            
0000814C                            locret_76CA:
0000814C 4E75                       		rts	
0000814E                            ; End of function Obj11_Bend
0000814E                            
0000814E                            ; ===========================================================================
0000814E                            ; ---------------------------------------------------------------------------
0000814E                            ; GHZ bridge-bending data
0000814E                            ; (Defines how the bridge bends	when Sonic walks across	it)
0000814E                            ; ---------------------------------------------------------------------------
0000814E                            Obj11_BendData:	incbin	misc\ghzbend1.bin
0000825E                            		even
0000825E                            Obj11_BendData2:incbin	misc\ghzbend2.bin
0000835E                            		even
0000835E                            
0000835E                            ; ===========================================================================
0000835E                            
0000835E                            Obj11_ChkDel:				; XREF: Obj11_Display; Obj11_Action2
0000835E 3028 0008                  		move.w	8(a0),d0
00008362 0240 FF80                  		andi.w	#$FF80,d0
00008366 3238 F700                  		move.w	($FFFFF700).w,d1
0000836A 0441 0080                  		subi.w	#$80,d1
0000836E 0241 FF80                  		andi.w	#$FF80,d1
00008372 9041                       		sub.w	d1,d0
00008374 0C40 0280                  		cmpi.w	#$280,d0
00008378 6200 0000                  		bhi.w	Obj11_DelAll
0000837C 4E75                       		rts	
0000837E                            ; ===========================================================================
0000837E                            
0000837E                            Obj11_DelAll:				; XREF: Obj11_ChkDel
0000837E 7400                       		moveq	#0,d2
00008380 45E8 0028                  		lea	$28(a0),a2	; load bridge length
00008384 141A                       		move.b	(a2)+,d2	; move bridge length to	d2
00008386 5302                       		subq.b	#1,d2		; subtract 1
00008388 6500                       		bcs.s	Obj11_Delete
0000838A                            
0000838A                            Obj11_DelLoop:
0000838A 7000                       		moveq	#0,d0
0000838C 101A                       		move.b	(a2)+,d0
0000838E ED48                       		lsl.w	#6,d0
00008390 0680 00FF D000             		addi.l	#$FFD000,d0
00008396 2240                       		movea.l	d0,a1
00008398 B048                       		cmp.w	a0,d0
0000839A 6700                       		beq.s	loc_791E
0000839C 6100 0000                  		bsr.w	DeleteObject2
000083A0                            
000083A0                            loc_791E:
000083A0 51CA FFE8                  		dbf	d2,Obj11_DelLoop ; repeat d2 times (bridge length)
000083A4                            
000083A4                            Obj11_Delete:
000083A4 6100 0000                  		bsr.w	DeleteObject
000083A8 4E75                       		rts	
000083AA                            ; ===========================================================================
000083AA                            
000083AA                            Obj11_Delete2:				; XREF: Obj11_Index
000083AA 6100 0000                  		bsr.w	DeleteObject
000083AE 4E75                       		rts	
000083B0                            ; ===========================================================================
000083B0                            
000083B0                            Obj11_Display2:				; XREF: Obj11_Index
000083B0 6100 0000                  		bsr.w	DisplaySprite
000083B4 4E75                       		rts	
000083B6                            ; ===========================================================================
000083B6                            ; ---------------------------------------------------------------------------
000083B6                            ; Sprite mappings - GHZ	bridge
000083B6                            ; ---------------------------------------------------------------------------
000083B6                            Map_obj11:
000083B6                            	include "_maps\obj11.asm"
000083B6                            ; ---------------------------------------------------------------------------
000083B6                            ; Sprite mappings - GHZ	bridge
000083B6                            ; ---------------------------------------------------------------------------
000083B6 0000 0000                  		dc.w byte_793A-Map_obj11, byte_7940-Map_obj11
000083BA 0000                       		dc.w byte_794B-Map_obj11
000083BC 01                         byte_793A:	dc.b 1
000083BD F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
000083C2 02                         byte_7940:	dc.b 2
000083C3 F804 0004 F0               		dc.b $F8, 4, 0,	4, $F0
000083C8 000C 0006 F0               		dc.b 0,	$C, 0, 6, $F0
000083CD 01                         byte_794B:	dc.b 1
000083CE FC04 0008 F8               		dc.b $FC, 4, 0,	8, $F8
000083D4 00                         		even
000083D4 00                         		even
000083D4                            
000083D4                            ; ===========================================================================
000083D4                            ; ---------------------------------------------------------------------------
000083D4                            ; Object 15 - swinging platforms (GHZ, MZ, SLZ)
000083D4                            ;	    - spiked ball on a chain (SBZ)
000083D4                            ; ---------------------------------------------------------------------------
000083D4                            
000083D4                            Obj15:					; XREF: Obj_Index
000083D4 7000                       		moveq	#0,d0
000083D6 1028 0024                  		move.b	$24(a0),d0
000083DA 323B 0000                  		move.w	Obj15_Index(pc,d0.w),d1
000083DE 4EFB 1000                  		jmp	Obj15_Index(pc,d1.w)
000083E2                            ; ===========================================================================
000083E2 0000 0000                  Obj15_Index:	dc.w Obj15_Main-Obj15_Index, Obj15_SetSolid-Obj15_Index
000083E6 0000 0000                  		dc.w Obj15_Action2-Obj15_Index,	Obj15_Delete-Obj15_Index
000083EA 0000 0000                  		dc.w Obj15_Delete-Obj15_Index, Obj15_Display-Obj15_Index
000083EE 0000                       		dc.w Obj15_Action-Obj15_Index
000083F0                            ; ===========================================================================
000083F0                            
000083F0                            Obj15_Main:				; XREF: Obj15_Index
000083F0 5428 0024                  		addq.b	#2,$24(a0)
000083F4 217C 0000 0000 0004        		move.l	#Map_obj15,4(a0) ; GHZ and MZ specific code
000083FC 317C 4380 0002             		move.w	#$4380,2(a0)
00008402 117C 0004 0001             		move.b	#4,1(a0)
00008408 117C 0003 0018             		move.b	#3,$18(a0)
0000840E 117C 0018 0019             		move.b	#$18,$19(a0)
00008414 117C 0008 0016             		move.b	#8,$16(a0)
0000841A 3168 000C 0038             		move.w	$C(a0),$38(a0)
00008420 3168 0008 003A             		move.w	8(a0),$3A(a0)
00008426 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
0000842C 6600                       		bne.s	Obj15_NotSLZ
0000842E 217C 0000 0000 0004        		move.l	#Map_obj15a,4(a0) ; SLZ	specific code
00008436 317C 43DC 0002             		move.w	#$43DC,2(a0)
0000843C 117C 0020 0019             		move.b	#$20,$19(a0)
00008442 117C 0010 0016             		move.b	#$10,$16(a0)
00008448 117C 0099 0020             		move.b	#$99,$20(a0)
0000844E                            
0000844E                            Obj15_NotSLZ:
0000844E 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
00008454 6600                       		bne.s	Obj15_SetLength
00008456 217C 0000 0000 0004        		move.l	#Map_obj15b,4(a0) ; SBZ	specific code
0000845E 317C 0391 0002             		move.w	#$391,2(a0)
00008464 117C 0018 0019             		move.b	#$18,$19(a0)
0000846A 117C 0018 0016             		move.b	#$18,$16(a0)
00008470 117C 0086 0020             		move.b	#$86,$20(a0)
00008476 117C 000C 0024             		move.b	#$C,$24(a0)
0000847C                            
0000847C                            Obj15_SetLength:
0000847C 1810                       		move.b	0(a0),d4
0000847E 7200                       		moveq	#0,d1
00008480 45E8 0028                  		lea	$28(a0),a2	; move chain length to a2
00008484 1212                       		move.b	(a2),d1		; move a2 to d1
00008486 3F01                       		move.w	d1,-(sp)
00008488 0241 000F                  		andi.w	#$F,d1
0000848C 14FC 0000                  		move.b	#0,(a2)+
00008490 3601                       		move.w	d1,d3
00008492 E94B                       		lsl.w	#4,d3
00008494 5003                       		addq.b	#8,d3
00008496 1143 003C                  		move.b	d3,$3C(a0)
0000849A 5103                       		subq.b	#8,d3
0000849C 4A28 001A                  		tst.b	$1A(a0)
000084A0 6700                       		beq.s	Obj15_MakeChain
000084A2 5003                       		addq.b	#8,d3
000084A4 5341                       		subq.w	#1,d1
000084A6                            
000084A6                            Obj15_MakeChain:
000084A6 6100 0000                  		bsr.w	SingleObjLoad
000084AA 6600                       		bne.s	loc_7A92
000084AC 5228 0028                  		addq.b	#1,$28(a0)
000084B0 3A09                       		move.w	a1,d5
000084B2 0445 D000                  		subi.w	#-$3000,d5
000084B6 EC4D                       		lsr.w	#6,d5
000084B8 0245 007F                  		andi.w	#$7F,d5
000084BC 14C5                       		move.b	d5,(a2)+
000084BE 137C 000A 0024             		move.b	#$A,$24(a1)
000084C4 1284                       		move.b	d4,0(a1)	; load swinging	object
000084C6 2368 0004 0004             		move.l	4(a0),4(a1)
000084CC 3368 0002 0002             		move.w	2(a0),2(a1)
000084D2 08A9 0006 0002             		bclr	#6,2(a1)
000084D8 137C 0004 0001             		move.b	#4,1(a1)
000084DE 137C 0004 0018             		move.b	#4,$18(a1)
000084E4 137C 0008 0019             		move.b	#8,$19(a1)
000084EA 137C 0001 001A             		move.b	#1,$1A(a1)
000084F0 1343 003C                  		move.b	d3,$3C(a1)
000084F4 0403 0010                  		subi.b	#$10,d3
000084F8 6400                       		bcc.s	loc_7A8E
000084FA 137C 0002 001A             		move.b	#2,$1A(a1)
00008500 137C 0003 0018             		move.b	#3,$18(a1)
00008506 08E9 0006 0002             		bset	#6,2(a1)
0000850C                            
0000850C                            loc_7A8E:
0000850C 51C9 FF98                  		dbf	d1,Obj15_MakeChain ; repeat d1 times (chain length)
00008510                            
00008510                            loc_7A92:
00008510 3A08                       		move.w	a0,d5
00008512 0445 D000                  		subi.w	#-$3000,d5
00008516 EC4D                       		lsr.w	#6,d5
00008518 0245 007F                  		andi.w	#$7F,d5
0000851C 14C5                       		move.b	d5,(a2)+
0000851E 317C 4080 0026             		move.w	#$4080,$26(a0)
00008524 317C FE00 003E             		move.w	#-$200,$3E(a0)
0000852A 321F                       		move.w	(sp)+,d1
0000852C 0801 0004                  		btst	#4,d1		; is object type $8X ?
00008530 6700                       		beq.s	loc_7AD4	; if not, branch
00008532 217C 0000 0000 0004        		move.l	#Map_obj48,4(a0) ; use GHZ ball	mappings
0000853A 317C 43AA 0002             		move.w	#$43AA,2(a0)
00008540 117C 0001 001A             		move.b	#1,$1A(a0)
00008546 117C 0002 0018             		move.b	#2,$18(a0)
0000854C 117C 0081 0020             		move.b	#$81,$20(a0)	; make object hurt when	touched
00008552                            
00008552                            loc_7AD4:
00008552 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; is zone SBZ?
00008558 6700                       		beq.s	Obj15_Action	; if yes, branch
0000855A                            
0000855A                            Obj15_SetSolid:				; XREF: Obj15_Index
0000855A 7200                       		moveq	#0,d1
0000855C 1228 0019                  		move.b	$19(a0),d1
00008560 7600                       		moveq	#0,d3
00008562 1628 0016                  		move.b	$16(a0),d3
00008566 6100 FA76                  		bsr.w	Obj15_Solid
0000856A                            
0000856A                            Obj15_Action:				; XREF: Obj15_Index
0000856A 6100 0000                  		bsr.w	Obj15_Move
0000856E 6100 0000                  		bsr.w	DisplaySprite
00008572 6000 0000                  		bra.w	Obj15_ChkDel
00008576                            ; ===========================================================================
00008576                            
00008576                            Obj15_Action2:				; XREF: Obj15_Index
00008576 7200                       		moveq	#0,d1
00008578 1228 0019                  		move.b	$19(a0),d1
0000857C 6100 FAC4                  		bsr.w	ExitPlatform
00008580 3F28 0008                  		move.w	8(a0),-(sp)
00008584 6100 0000                  		bsr.w	Obj15_Move
00008588 341F                       		move.w	(sp)+,d2
0000858A 7600                       		moveq	#0,d3
0000858C 1628 0016                  		move.b	$16(a0),d3
00008590 5203                       		addq.b	#1,d3
00008592 6100 0000                  		bsr.w	MvSonicOnPtfm
00008596 6100 0000                  		bsr.w	DisplaySprite
0000859A 6000 0000                  		bra.w	Obj15_ChkDel
0000859E                            
0000859E 4E75                       		rts
000085A0                            
000085A0                            ; ---------------------------------------------------------------------------
000085A0                            ; Subroutine to	change Sonic's position with a platform
000085A0                            ; ---------------------------------------------------------------------------
000085A0                            
000085A0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000085A0                            
000085A0                            
000085A0                            MvSonicOnPtfm:
000085A0 43F8 D000                  		lea	($FFFFD000).w,a1
000085A4 3028 000C                  		move.w	$C(a0),d0
000085A8 9043                       		sub.w	d3,d0
000085AA 6000                       		bra.s	MvSonic2
000085AC                            ; End of function MvSonicOnPtfm
000085AC                            
000085AC                            ; ---------------------------------------------------------------------------
000085AC                            ; Subroutine to	change Sonic's position with a platform
000085AC                            ; ---------------------------------------------------------------------------
000085AC                            
000085AC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000085AC                            
000085AC                            
000085AC                            MvSonicOnPtfm2:
000085AC 43F8 D000                  		lea	($FFFFD000).w,a1
000085B0 3028 000C                  		move.w	$C(a0),d0
000085B4 0440 0009                  		subi.w	#9,d0
000085B8                            
000085B8                            MvSonic2:
000085B8 4A38 F7C8                  		tst.b	($FFFFF7C8).w
000085BC 6B00                       		bmi.s	locret_7B62
000085BE 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
000085C4 6400                       		bcc.s	locret_7B62
000085C6 4A78 FE08                  		tst.w	($FFFFFE08).w
000085CA 6600                       		bne.s	locret_7B62
000085CC 7200                       		moveq	#0,d1
000085CE 1229 0016                  		move.b	$16(a1),d1
000085D2 9041                       		sub.w	d1,d0
000085D4 3340 000C                  		move.w	d0,$C(a1)
000085D8 9468 0008                  		sub.w	8(a0),d2
000085DC 9569 0008                  		sub.w	d2,8(a1)
000085E0                            
000085E0                            locret_7B62:
000085E0 4E75                       		rts	
000085E2                            ; End of function MvSonicOnPtfm2
000085E2                            
000085E2                            
000085E2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000085E2                            
000085E2                            
000085E2                            Obj15_Move:				; XREF: Obj15_Action; Obj15_Action2
000085E2 1038 FE78                  		move.b	($FFFFFE78).w,d0
000085E6 323C 0080                  		move.w	#$80,d1
000085EA 0828 0000 0022             		btst	#0,$22(a0)
000085F0 6700                       		beq.s	loc_7B78
000085F2 4440                       		neg.w	d0
000085F4 D041                       		add.w	d1,d0
000085F6                            
000085F6                            loc_7B78:
000085F6 6000                       		bra.s	Obj15_Move2
000085F8                            ; End of function Obj15_Move
000085F8                            
000085F8                            
000085F8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000085F8                            
000085F8                            
000085F8                            Obj48_Move:				; XREF: Obj48_Display2
000085F8 4A28 003D                  		tst.b	$3D(a0)
000085FC 6600                       		bne.s	loc_7B9C
000085FE 3028 003E                  		move.w	$3E(a0),d0
00008602 5040                       		addq.w	#8,d0
00008604 3140 003E                  		move.w	d0,$3E(a0)
00008608 D168 0026                  		add.w	d0,$26(a0)
0000860C 0C40 0200                  		cmpi.w	#$200,d0
00008610 6600                       		bne.s	loc_7BB6
00008612 117C 0001 003D             		move.b	#1,$3D(a0)
00008618 6000                       		bra.s	loc_7BB6
0000861A                            ; ===========================================================================
0000861A                            
0000861A                            loc_7B9C:
0000861A 3028 003E                  		move.w	$3E(a0),d0
0000861E 5140                       		subq.w	#8,d0
00008620 3140 003E                  		move.w	d0,$3E(a0)
00008624 D168 0026                  		add.w	d0,$26(a0)
00008628 0C40 FE00                  		cmpi.w	#-$200,d0
0000862C 6600                       		bne.s	loc_7BB6
0000862E 117C 0000 003D             		move.b	#0,$3D(a0)
00008634                            
00008634                            loc_7BB6:
00008634 1028 0026                  		move.b	$26(a0),d0
00008638                            ; End of function Obj48_Move
00008638                            
00008638                            
00008638                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008638                            
00008638                            
00008638                            Obj15_Move2:				; XREF: Obj15_Move; Obj48_Display
00008638 6100 ADA0                  		bsr.w	CalcSine
0000863C 3428 0038                  		move.w	$38(a0),d2
00008640 3628 003A                  		move.w	$3A(a0),d3
00008644 45E8 0028                  		lea	$28(a0),a2
00008648 7C00                       		moveq	#0,d6
0000864A 1C1A                       		move.b	(a2)+,d6
0000864C                            
0000864C                            loc_7BCE:
0000864C 7800                       		moveq	#0,d4
0000864E 181A                       		move.b	(a2)+,d4
00008650 ED4C                       		lsl.w	#6,d4
00008652 0684 00FF D000             		addi.l	#$FFD000,d4
00008658 2244                       		movea.l	d4,a1
0000865A 7800                       		moveq	#0,d4
0000865C 1829 003C                  		move.b	$3C(a1),d4
00008660 2A04                       		move.l	d4,d5
00008662 C9C0                       		muls.w	d0,d4
00008664 E084                       		asr.l	#8,d4
00008666 CBC1                       		muls.w	d1,d5
00008668 E085                       		asr.l	#8,d5
0000866A D842                       		add.w	d2,d4
0000866C DA43                       		add.w	d3,d5
0000866E 3344 000C                  		move.w	d4,$C(a1)
00008672 3345 0008                  		move.w	d5,8(a1)
00008676 51CE FFD4                  		dbf	d6,loc_7BCE
0000867A 4E75                       		rts	
0000867C                            ; End of function Obj15_Move2
0000867C                            
0000867C                            ; ===========================================================================
0000867C                            
0000867C                            Obj15_ChkDel:				; XREF: Obj15_Action; Obj15_Action2
0000867C 3028 003A                  		move.w	$3A(a0),d0
00008680 0240 FF80                  		andi.w	#$FF80,d0
00008684 3238 F700                  		move.w	($FFFFF700).w,d1
00008688 0441 0080                  		subi.w	#$80,d1
0000868C 0241 FF80                  		andi.w	#$FF80,d1
00008690 9041                       		sub.w	d1,d0
00008692 0C40 0280                  		cmpi.w	#$280,d0
00008696 6200 0000                  		bhi.w	Obj15_DelAll
0000869A 4E75                       		rts	
0000869C                            ; ===========================================================================
0000869C                            
0000869C                            Obj15_DelAll:				; XREF: Obj15_ChkDel
0000869C 7400                       		moveq	#0,d2
0000869E 45E8 0028                  		lea	$28(a0),a2
000086A2 141A                       		move.b	(a2)+,d2
000086A4                            
000086A4                            Obj15_DelLoop:
000086A4 7000                       		moveq	#0,d0
000086A6 101A                       		move.b	(a2)+,d0
000086A8 ED48                       		lsl.w	#6,d0
000086AA 0680 00FF D000             		addi.l	#$FFD000,d0
000086B0 2240                       		movea.l	d0,a1
000086B2 6100 0000                  		bsr.w	DeleteObject2
000086B6 51CA FFEC                  		dbf	d2,Obj15_DelLoop ; repeat for length of	chain
000086BA 4E75                       		rts	
000086BC                            ; ===========================================================================
000086BC                            
000086BC                            Obj15_Delete:				; XREF: Obj15_Index
000086BC 6100 0000                  		bsr.w	DeleteObject
000086C0 4E75                       		rts	
000086C2                            ; ===========================================================================
000086C2                            
000086C2                            Obj15_Display:				; XREF: Obj15_Index
000086C2 6000 0000                  		bra.w	DisplaySprite
000086C6                            ; ===========================================================================
000086C6                            ; ---------------------------------------------------------------------------
000086C6                            ; Sprite mappings - GHZ	and MZ swinging	platforms
000086C6                            ; ---------------------------------------------------------------------------
000086C6                            Map_obj15:
000086C6                            	include "_maps\obj15ghz.asm"
000086C6                            ; ---------------------------------------------------------------------------
000086C6                            ; Sprite mappings - GHZ	and MZ swinging	platforms
000086C6                            ; ---------------------------------------------------------------------------
000086C6 0000                       		dc.w byte_7C4E-Map_obj15
000086C8 0000                       		dc.w byte_7C59-Map_obj15
000086CA 0000                       		dc.w byte_7C5F-Map_obj15
000086CC 02                         byte_7C4E:	dc.b 2
000086CD F809 0004 E8               		dc.b $F8, 9, 0,	4, $E8
000086D2 F809 0004 00               		dc.b $F8, 9, 0,	4, 0
000086D7 01                         byte_7C59:	dc.b 1
000086D8 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
000086DD 01                         byte_7C5F:	dc.b 1
000086DE F805 000A F8               		dc.b $F8, 5, 0,	$A, $F8
000086E4 00                         		even
000086E4 00                         		even
000086E4                            
000086E4                            ; ---------------------------------------------------------------------------
000086E4                            ; Sprite mappings - SLZ	swinging platforms
000086E4                            ; ---------------------------------------------------------------------------
000086E4                            Map_obj15a:
000086E4                            	include "_maps\obj15slz.asm"
000086E4                            ; ---------------------------------------------------------------------------
000086E4                            ; Sprite mappings - SLZ	swinging platforms
000086E4                            ; ---------------------------------------------------------------------------
000086E4 0000                       		dc.w byte_7C6C-Map_obj15a
000086E6 0000                       		dc.w byte_7C95-Map_obj15a
000086E8 0000                       		dc.w byte_7C9B-Map_obj15a
000086EA 08                         byte_7C6C:	dc.b 8
000086EB F00F 0004 E0               		dc.b $F0, $F, 0, 4, $E0
000086F0 F00F 0804 00               		dc.b $F0, $F, 8, 4, 0
000086F5 F005 0014 D0               		dc.b $F0, 5, 0,	$14, $D0
000086FA F005 0814 20               		dc.b $F0, 5, 8,	$14, $20
000086FF 1004 0018 E0               		dc.b $10, 4, 0,	$18, $E0
00008704 1004 0818 10               		dc.b $10, 4, 8,	$18, $10
00008709 1001 001A F8               		dc.b $10, 1, 0,	$1A, $F8
0000870E 1001 081A 00               		dc.b $10, 1, 8,	$1A, 0
00008713 01                         byte_7C95:	dc.b 1
00008714 F805 4000 F8               		dc.b $F8, 5, $40, 0, $F8
00008719 01                         byte_7C9B:	dc.b 1
0000871A F805 001C F8               		dc.b $F8, 5, 0,	$1C, $F8
00008720 00                         		even
00008720 00                         		even
00008720                            
00008720                            ; ===========================================================================
00008720                            ; ---------------------------------------------------------------------------
00008720                            ; Object 17 - helix of spikes on a pole	(GHZ)
00008720                            ; ---------------------------------------------------------------------------
00008720                            
00008720                            Obj17:					; XREF: Obj_Index
00008720 7000                       		moveq	#0,d0
00008722 1028 0024                  		move.b	$24(a0),d0
00008726 323B 0000                  		move.w	Obj17_Index(pc,d0.w),d1
0000872A 4EFB 1000                  		jmp	Obj17_Index(pc,d1.w)
0000872E                            ; ===========================================================================
0000872E 0000                       Obj17_Index:	dc.w Obj17_Main-Obj17_Index
00008730 0000                       		dc.w Obj17_Action-Obj17_Index
00008732 0000                       		dc.w Obj17_Action-Obj17_Index
00008734 0000                       		dc.w Obj17_Delete-Obj17_Index
00008736 0000                       		dc.w Obj17_Display-Obj17_Index
00008738                            ; ===========================================================================
00008738                            
00008738                            Obj17_Main:				; XREF: Obj17_Index
00008738 5428 0024                  		addq.b	#2,$24(a0)
0000873C 217C 0000 0000 0004        		move.l	#Map_obj17,4(a0)
00008744 317C 4398 0002             		move.w	#$4398,2(a0)
0000874A 117C 0007 0022             		move.b	#7,$22(a0)
00008750 117C 0004 0001             		move.b	#4,1(a0)
00008756 117C 0003 0018             		move.b	#3,$18(a0)
0000875C 117C 0008 0019             		move.b	#8,$19(a0)
00008762 3428 000C                  		move.w	$C(a0),d2
00008766 3628 0008                  		move.w	8(a0),d3
0000876A 1810                       		move.b	0(a0),d4
0000876C 45E8 0028                  		lea	$28(a0),a2	; move helix length to a2
00008770 7200                       		moveq	#0,d1
00008772 1212                       		move.b	(a2),d1		; move a2 to d1
00008774 14FC 0000                  		move.b	#0,(a2)+
00008778 3001                       		move.w	d1,d0
0000877A E248                       		lsr.w	#1,d0
0000877C E948                       		lsl.w	#4,d0
0000877E 9640                       		sub.w	d0,d3
00008780 5501                       		subq.b	#2,d1
00008782 6500                       		bcs.s	Obj17_Action
00008784 7C00                       		moveq	#0,d6
00008786                            
00008786                            Obj17_MakeHelix:
00008786 6100 0000                  		bsr.w	SingleObjLoad
0000878A 6600                       		bne.s	Obj17_Action
0000878C 5228 0028                  		addq.b	#1,$28(a0)
00008790 3A09                       		move.w	a1,d5
00008792 0445 D000                  		subi.w	#$D000,d5
00008796 EC4D                       		lsr.w	#6,d5
00008798 0245 007F                  		andi.w	#$7F,d5
0000879C 14C5                       		move.b	d5,(a2)+
0000879E 137C 0008 0024             		move.b	#8,$24(a1)
000087A4 1284                       		move.b	d4,0(a1)
000087A6 3342 000C                  		move.w	d2,$C(a1)
000087AA 3343 0008                  		move.w	d3,8(a1)
000087AE 2368 0004 0004             		move.l	4(a0),4(a1)
000087B4 337C 4398 0002             		move.w	#$4398,2(a1)
000087BA 137C 0004 0001             		move.b	#4,1(a1)
000087C0 137C 0003 0018             		move.b	#3,$18(a1)
000087C6 137C 0008 0019             		move.b	#8,$19(a1)
000087CC 1346 003E                  		move.b	d6,$3E(a1)
000087D0 5206                       		addq.b	#1,d6
000087D2 0206 0007                  		andi.b	#7,d6
000087D6 0643 0010                  		addi.w	#$10,d3
000087DA B668 0008                  		cmp.w	8(a0),d3
000087DE 6600                       		bne.s	loc_7D78
000087E0 1146 003E                  		move.b	d6,$3E(a0)
000087E4 5206                       		addq.b	#1,d6
000087E6 0206 0007                  		andi.b	#7,d6
000087EA 0643 0010                  		addi.w	#$10,d3
000087EE 5228 0028                  		addq.b	#1,$28(a0)
000087F2                            
000087F2                            loc_7D78:
000087F2 51C9 FF92                  		dbf	d1,Obj17_MakeHelix ; repeat d1 times (helix length)
000087F6                            
000087F6                            Obj17_Action:				; XREF: Obj17_Index
000087F6 6100 0000                  		bsr.w	Obj17_RotateSpikes
000087FA 6100 0000                  		bsr.w	DisplaySprite
000087FE 6000 0000                  		bra.w	Obj17_ChkDel
00008802                            
00008802                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008802                            
00008802                            
00008802                            Obj17_RotateSpikes:			; XREF: Obj17_Action; Obj17_Display
00008802 1038 FEC1                  		move.b	($FFFFFEC1).w,d0
00008806 117C 0000 0020             		move.b	#0,$20(a0)	; make object harmless
0000880C D028 003E                  		add.b	$3E(a0),d0
00008810 0200 0007                  		andi.b	#7,d0
00008814 1140 001A                  		move.b	d0,$1A(a0)	; change current frame
00008818 6600                       		bne.s	locret_7DA6
0000881A 117C 0084 0020             		move.b	#$84,$20(a0)	; make object harmful
00008820                            
00008820                            locret_7DA6:
00008820 4E75                       		rts	
00008822                            ; End of function Obj17_RotateSpikes
00008822                            
00008822                            ; ===========================================================================
00008822                            
00008822                            Obj17_ChkDel:				; XREF: Obj17_Action
00008822 3028 0008                  		move.w	8(a0),d0
00008826 0240 FF80                  		andi.w	#$FF80,d0
0000882A 3238 F700                  		move.w	($FFFFF700).w,d1
0000882E 0441 0080                  		subi.w	#$80,d1
00008832 0241 FF80                  		andi.w	#$FF80,d1
00008836 9041                       		sub.w	d1,d0
00008838 0C40 0280                  		cmpi.w	#$280,d0
0000883C 6200 0000                  		bhi.w	Obj17_DelAll
00008840 4E75                       		rts	
00008842                            ; ===========================================================================
00008842                            
00008842                            Obj17_DelAll:				; XREF: Obj17_ChkDel
00008842 7400                       		moveq	#0,d2
00008844 45E8 0028                  		lea	$28(a0),a2	; move helix length to a2
00008848 141A                       		move.b	(a2)+,d2	; move a2 to d2
0000884A 5502                       		subq.b	#2,d2
0000884C 6500                       		bcs.s	Obj17_Delete
0000884E                            
0000884E                            Obj17_DelLoop:
0000884E 7000                       		moveq	#0,d0
00008850 101A                       		move.b	(a2)+,d0
00008852 ED48                       		lsl.w	#6,d0
00008854 0680 00FF D000             		addi.l	#$FFD000,d0
0000885A 2240                       		movea.l	d0,a1
0000885C 6100 0000                  		bsr.w	DeleteObject2	; delete object
00008860 51CA FFEC                  		dbf	d2,Obj17_DelLoop ; repeat d2 times (helix length)
00008864                            
00008864                            Obj17_Delete:				; XREF: Obj17_Index
00008864 6100 0000                  		bsr.w	DeleteObject
00008868 4E75                       		rts	
0000886A                            ; ===========================================================================
0000886A                            
0000886A                            Obj17_Display:				; XREF: Obj17_Index
0000886A 6100 FF96                  		bsr.w	Obj17_RotateSpikes
0000886E 6000 0000                  		bra.w	DisplaySprite
00008872                            ; ===========================================================================
00008872                            ; ---------------------------------------------------------------------------
00008872                            ; Sprite mappings - helix of spikes on a pole (GHZ)
00008872                            ; ---------------------------------------------------------------------------
00008872                            Map_obj17:
00008872                            	include "_maps\obj17.asm"
00008872                            ; ---------------------------------------------------------------------------
00008872                            ; Sprite mappings - helix of spikes on a pole (GHZ)
00008872                            ; ---------------------------------------------------------------------------
00008872 0000 0000                  		dc.w byte_7E08-Map_obj17, byte_7E0E-Map_obj17
00008876 0000 0000                  		dc.w byte_7E14-Map_obj17, byte_7E1A-Map_obj17
0000887A 0000 0000                  		dc.w byte_7E20-Map_obj17, byte_7E26-Map_obj17
0000887E 0000 0000                  		dc.w byte_7E2D+1-Map_obj17, byte_7E2C-Map_obj17
00008882 01                         byte_7E08:	dc.b 1
00008883 F001 0000 FC               		dc.b $F0, 1, 0,	0, $FC
00008888 01                         byte_7E0E:	dc.b 1
00008889 F505 0002 F8               		dc.b $F5, 5, 0,	2, $F8
0000888E 01                         byte_7E14:	dc.b 1
0000888F F805 0006 F8               		dc.b $F8, 5, 0,	6, $F8
00008894 01                         byte_7E1A:	dc.b 1
00008895 FB05 000A F8               		dc.b $FB, 5, 0,	$A, $F8
0000889A 01                         byte_7E20:	dc.b 1
0000889B 0001 000E FC               		dc.b 0,	1, 0, $E, $FC
000088A0 01                         byte_7E26:	dc.b 1
000088A1 0400 0010 FD               		dc.b 4,	0, 0, $10, $FD
000088A6 01                         byte_7E2C:	dc.b 1
000088A7 F400 0011 FD               byte_7E2D:	dc.b $F4, 0, 0,	$11, $FD
000088AC                            		even
000088AC                            		even
000088AC                            
000088AC                            ; ===========================================================================
000088AC                            ; ---------------------------------------------------------------------------
000088AC                            ; Object 18 - platforms	(GHZ, SYZ, SLZ)
000088AC                            ; ---------------------------------------------------------------------------
000088AC                            
000088AC                            Obj18:					; XREF: Obj_Index
000088AC 7000                       		moveq	#0,d0
000088AE 1028 0024                  		move.b	$24(a0),d0
000088B2 323B 0000                  		move.w	Obj18_Index(pc,d0.w),d1
000088B6 4EFB 1000                  		jmp	Obj18_Index(pc,d1.w)
000088BA                            ; ===========================================================================
000088BA 0000                       Obj18_Index:	dc.w Obj18_Main-Obj18_Index
000088BC 0000                       		dc.w Obj18_Solid-Obj18_Index
000088BE 0000                       		dc.w Obj18_Action2-Obj18_Index
000088C0 0000                       		dc.w Obj18_Delete-Obj18_Index
000088C2 0000                       		dc.w Obj18_Action-Obj18_Index
000088C4                            ; ===========================================================================
000088C4                            
000088C4                            Obj18_Main:				; XREF: Obj18_Index
000088C4 5428 0024                  		addq.b	#2,$24(a0)
000088C8 317C 4000 0002             		move.w	#$4000,2(a0)
000088CE 217C 0000 0000 0004        		move.l	#Map_obj18,4(a0)
000088D6 117C 0020 0019             		move.b	#$20,$19(a0)
000088DC 0C38 0004 FE10             		cmpi.b	#4,($FFFFFE10).w ; check if level is SYZ
000088E2 6600                       		bne.s	Obj18_NotSYZ
000088E4 217C 0000 0000 0004        		move.l	#Map_obj18a,4(a0) ; SYZ	specific code
000088EC 117C 0020 0019             		move.b	#$20,$19(a0)
000088F2                            
000088F2                            Obj18_NotSYZ:
000088F2 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
000088F8 6600                       		bne.s	Obj18_NotSLZ
000088FA 217C 0000 0000 0004        		move.l	#Map_obj18b,4(a0) ; SLZ	specific code
00008902 117C 0020 0019             		move.b	#$20,$19(a0)
00008908 317C 4000 0002             		move.w	#$4000,2(a0)
0000890E 117C 0003 0028             		move.b	#3,$28(a0)
00008914                            
00008914                            Obj18_NotSLZ:
00008914 117C 0004 0001             		move.b	#4,1(a0)
0000891A 117C 0004 0018             		move.b	#4,$18(a0)
00008920 3168 000C 002C             		move.w	$C(a0),$2C(a0)
00008926 3168 000C 0034             		move.w	$C(a0),$34(a0)
0000892C 3168 0008 0032             		move.w	8(a0),$32(a0)
00008932 317C 0080 0026             		move.w	#$80,$26(a0)
00008938 7200                       		moveq	#0,d1
0000893A 1028 0028                  		move.b	$28(a0),d0
0000893E 0C00 000A                  		cmpi.b	#$A,d0		; is object type $A (large platform)?
00008942 6600                       		bne.s	Obj18_SetFrame	; if not, branch
00008944 5201                       		addq.b	#1,d1		; use frame #1
00008946 117C 0020 0019             		move.b	#$20,$19(a0)	; set width
0000894C                            
0000894C                            Obj18_SetFrame:
0000894C 1141 001A                  		move.b	d1,$1A(a0)	; set frame to d1
00008950                            
00008950                            Obj18_Solid:				; XREF: Obj18_Index
00008950 4A28 0038                  		tst.b	$38(a0)
00008954 6700                       		beq.s	loc_7EE0
00008956 5928 0038                  		subq.b	#4,$38(a0)
0000895A                            
0000895A                            loc_7EE0:
0000895A 7200                       		moveq	#0,d1
0000895C 1228 0019                  		move.b	$19(a0),d1
00008960 6100 F56C                  		bsr.w	PlatformObject
00008964                            
00008964                            Obj18_Action:				; XREF: Obj18_Index
00008964 6100 0000                  		bsr.w	Obj18_Move
00008968 6100 0000                  		bsr.w	Obj18_Nudge
0000896C 6100 0000                  		bsr.w	DisplaySprite
00008970 6000 0000                  		bra.w	Obj18_ChkDel
00008974                            ; ===========================================================================
00008974                            
00008974                            Obj18_Action2:				; XREF: Obj18_Index
00008974 0C28 0040 0038             		cmpi.b	#$40,$38(a0)
0000897A 6700                       		beq.s	loc_7F06
0000897C 5828 0038                  		addq.b	#4,$38(a0)
00008980                            
00008980                            loc_7F06:
00008980 7200                       		moveq	#0,d1
00008982 1228 0019                  		move.b	$19(a0),d1
00008986 6100 F6BA                  		bsr.w	ExitPlatform
0000898A 3F28 0008                  		move.w	8(a0),-(sp)
0000898E 6100 0000                  		bsr.w	Obj18_Move
00008992 6100 0000                  		bsr.w	Obj18_Nudge
00008996 341F                       		move.w	(sp)+,d2
00008998 6100 FC12                  		bsr.w	MvSonicOnPtfm2
0000899C 6100 0000                  		bsr.w	DisplaySprite
000089A0 6000 0000                  		bra.w	Obj18_ChkDel
000089A4                            
000089A4 4E75                       		rts
000089A6                            
000089A6                            ; ---------------------------------------------------------------------------
000089A6                            ; Subroutine to	move platform slightly when you	stand on it
000089A6                            ; ---------------------------------------------------------------------------
000089A6                            
000089A6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000089A6                            
000089A6                            
000089A6                            Obj18_Nudge:				; XREF: Obj18_Action; Obj18_Action2
000089A6 1028 0038                  		move.b	$38(a0),d0
000089AA 6100 AA2E                  		bsr.w	CalcSine
000089AE 323C 0400                  		move.w	#$400,d1
000089B2 C1C1                       		muls.w	d1,d0
000089B4 4840                       		swap	d0
000089B6 D068 002C                  		add.w	$2C(a0),d0
000089BA 3140 000C                  		move.w	d0,$C(a0)
000089BE 4E75                       		rts	
000089C0                            ; End of function Obj18_Nudge
000089C0                            
000089C0                            ; ---------------------------------------------------------------------------
000089C0                            ; Subroutine to	move platforms
000089C0                            ; ---------------------------------------------------------------------------
000089C0                            
000089C0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000089C0                            
000089C0                            
000089C0                            Obj18_Move:				; XREF: Obj18_Action; Obj18_Action2
000089C0 7000                       		moveq	#0,d0
000089C2 1028 0028                  		move.b	$28(a0),d0
000089C6 0240 000F                  		andi.w	#$F,d0
000089CA D040                       		add.w	d0,d0
000089CC 323B 0000                  		move.w	Obj18_TypeIndex(pc,d0.w),d1
000089D0 4EFB 1000                  		jmp	Obj18_TypeIndex(pc,d1.w)
000089D4                            ; End of function Obj18_Move
000089D4                            
000089D4                            ; ===========================================================================
000089D4 0000 0000                  Obj18_TypeIndex:dc.w Obj18_Type00-Obj18_TypeIndex, Obj18_Type01-Obj18_TypeIndex
000089D8 0000 0000                  		dc.w Obj18_Type02-Obj18_TypeIndex, Obj18_Type03-Obj18_TypeIndex
000089DC 0000 0000                  		dc.w Obj18_Type04-Obj18_TypeIndex, Obj18_Type05-Obj18_TypeIndex
000089E0 0000 0000                  		dc.w Obj18_Type06-Obj18_TypeIndex, Obj18_Type07-Obj18_TypeIndex
000089E4 0000 0000                  		dc.w Obj18_Type08-Obj18_TypeIndex, Obj18_Type00-Obj18_TypeIndex
000089E8 0000 0000                  		dc.w Obj18_Type0A-Obj18_TypeIndex, Obj18_Type0B-Obj18_TypeIndex
000089EC 0000                       		dc.w Obj18_Type0C-Obj18_TypeIndex
000089EE                            ; ===========================================================================
000089EE                            
000089EE                            Obj18_Type00:
000089EE 4E75                       		rts			; platform 00 doesn't move
000089F0                            ; ===========================================================================
000089F0                            
000089F0                            Obj18_Type05:
000089F0 3028 0032                  		move.w	$32(a0),d0
000089F4 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
000089F8 4401                       		neg.b	d1		; reverse platform-motion
000089FA 0601 0040                  		addi.b	#$40,d1
000089FE 6000                       		bra.s	Obj18_01_Move
00008A00                            ; ===========================================================================
00008A00                            
00008A00                            Obj18_Type01:
00008A00 3028 0032                  		move.w	$32(a0),d0
00008A04 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
00008A08 0401 0040                  		subi.b	#$40,d1
00008A0C                            
00008A0C                            Obj18_01_Move:
00008A0C 4881                       		ext.w	d1
00008A0E D041                       		add.w	d1,d0
00008A10 3140 0008                  		move.w	d0,8(a0)	; change position on x-axis
00008A14 6000 0000                  		bra.w	Obj18_ChgMotion
00008A18                            ; ===========================================================================
00008A18                            
00008A18                            Obj18_Type0C:
00008A18 3028 0034                  		move.w	$34(a0),d0
00008A1C 1238 FE6C                  		move.b	($FFFFFE6C).w,d1 ; load	platform-motion	variable
00008A20 4401                       		neg.b	d1		; reverse platform-motion
00008A22 0601 0030                  		addi.b	#$30,d1
00008A26 6000                       		bra.s	Obj18_02_Move
00008A28                            ; ===========================================================================
00008A28                            
00008A28                            Obj18_Type0B:
00008A28 3028 0034                  		move.w	$34(a0),d0
00008A2C 1238 FE6C                  		move.b	($FFFFFE6C).w,d1 ; load	platform-motion	variable
00008A30 0401 0030                  		subi.b	#$30,d1
00008A34 6000                       		bra.s	Obj18_02_Move
00008A36                            ; ===========================================================================
00008A36                            
00008A36                            Obj18_Type06:
00008A36 3028 0034                  		move.w	$34(a0),d0
00008A3A 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
00008A3E 4401                       		neg.b	d1		; reverse platform-motion
00008A40 0601 0040                  		addi.b	#$40,d1
00008A44 6000                       		bra.s	Obj18_02_Move
00008A46                            ; ===========================================================================
00008A46                            
00008A46                            Obj18_Type02:
00008A46 3028 0034                  		move.w	$34(a0),d0
00008A4A 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
00008A4E 0401 0040                  		subi.b	#$40,d1
00008A52                            
00008A52                            Obj18_02_Move:
00008A52 4881                       		ext.w	d1
00008A54 D041                       		add.w	d1,d0
00008A56 3140 002C                  		move.w	d0,$2C(a0)	; change position on y-axis
00008A5A 6000 0000                  		bra.w	Obj18_ChgMotion
00008A5E                            ; ===========================================================================
00008A5E                            
00008A5E                            Obj18_Type03:
00008A5E 4A68 003A                  		tst.w	$3A(a0)		; is time delay	set?
00008A62 6600                       		bne.s	Obj18_03_Wait	; if yes, branch
00008A64 0828 0003 0022             		btst	#3,$22(a0)	; is Sonic standing on the platform?
00008A6A 6700                       		beq.s	Obj18_03_NoMove	; if not, branch
00008A6C 317C 001E 003A             		move.w	#30,$3A(a0)	; set time delay to 0.5	seconds
00008A72                            
00008A72                            Obj18_03_NoMove:
00008A72 4E75                       		rts	
00008A74                            ; ===========================================================================
00008A74                            
00008A74                            Obj18_03_Wait:
00008A74 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time
00008A78 66F8                       		bne.s	Obj18_03_NoMove	; if time is > 0, branch
00008A7A 317C 0020 003A             		move.w	#32,$3A(a0)
00008A80 5228 0028                  		addq.b	#1,$28(a0)	; change to type 04 (falling)
00008A84 4E75                       		rts	
00008A86                            ; ===========================================================================
00008A86                            
00008A86                            Obj18_Type04:
00008A86 4A68 003A                  		tst.w	$3A(a0)
00008A8A 6700                       		beq.s	loc_8048
00008A8C 5368 003A                  		subq.w	#1,$3A(a0)
00008A90 6600                       		bne.s	loc_8048
00008A92 0828 0003 0022             		btst	#3,$22(a0)
00008A98 6700                       		beq.s	loc_8042
00008A9A 08E9 0001 0022             		bset	#1,$22(a1)
00008AA0 08A9 0003 0022             		bclr	#3,$22(a1)
00008AA6 137C 0002 0024             		move.b	#2,$24(a1)
00008AAC 08A8 0003 0022             		bclr	#3,$22(a0)
00008AB2 4228 0025                  		clr.b	$25(a0)
00008AB6 3368 0012 0012             		move.w	$12(a0),$12(a1)
00008ABC                            
00008ABC                            loc_8042:
00008ABC 117C 0008 0024             		move.b	#8,$24(a0)
00008AC2                            
00008AC2                            loc_8048:
00008AC2 2628 002C                  		move.l	$2C(a0),d3
00008AC6 3028 0012                  		move.w	$12(a0),d0
00008ACA 48C0                       		ext.l	d0
00008ACC E180                       		asl.l	#8,d0
00008ACE D680                       		add.l	d0,d3
00008AD0 2143 002C                  		move.l	d3,$2C(a0)
00008AD4 0668 0038 0012             		addi.w	#$38,$12(a0)
00008ADA 3038 F72E                  		move.w	($FFFFF72E).w,d0
00008ADE 0640 00E0                  		addi.w	#$E0,d0
00008AE2 B068 002C                  		cmp.w	$2C(a0),d0
00008AE6 6400                       		bcc.s	locret_8074
00008AE8 117C 0006 0024             		move.b	#6,$24(a0)
00008AEE                            
00008AEE                            locret_8074:
00008AEE 4E75                       		rts	
00008AF0                            ; ===========================================================================
00008AF0                            
00008AF0                            Obj18_Type07:
00008AF0 4A68 003A                  		tst.w	$3A(a0)		; is time delay	set?
00008AF4 6600                       		bne.s	Obj18_07_Wait	; if yes, branch
00008AF6 45F8 F7E0                  		lea	($FFFFF7E0).w,a2 ; load	switch statuses
00008AFA 7000                       		moveq	#0,d0
00008AFC 1028 0028                  		move.b	$28(a0),d0	; move object type ($x7) to d0
00008B00 E848                       		lsr.w	#4,d0		; divide d0 by 8, round	down
00008B02 4A32 0000                  		tst.b	(a2,d0.w)	; has switch no. d0 been pressed?
00008B06 6700                       		beq.s	Obj18_07_NoMove	; if not, branch
00008B08 317C 003C 003A             		move.w	#60,$3A(a0)	; set time delay to 1 second
00008B0E                            
00008B0E                            Obj18_07_NoMove:
00008B0E 4E75                       		rts	
00008B10                            ; ===========================================================================
00008B10                            
00008B10                            Obj18_07_Wait:
00008B10 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time delay
00008B14 66F8                       		bne.s	Obj18_07_NoMove	; if time is > 0, branch
00008B16 5228 0028                  		addq.b	#1,$28(a0)	; change to type 08
00008B1A 4E75                       		rts	
00008B1C                            ; ===========================================================================
00008B1C                            
00008B1C                            Obj18_Type08:
00008B1C 5568 002C                  		subq.w	#2,$2C(a0)	; move platform	up
00008B20 3028 0034                  		move.w	$34(a0),d0
00008B24 0440 0200                  		subi.w	#$200,d0
00008B28 B068 002C                  		cmp.w	$2C(a0),d0	; has platform moved $200 pixels?
00008B2C 6600                       		bne.s	Obj18_08_NoStop	; if not, branch
00008B2E 4228 0028                  		clr.b	$28(a0)		; change to type 00 (stop moving)
00008B32                            
00008B32                            Obj18_08_NoStop:
00008B32 4E75                       		rts	
00008B34                            ; ===========================================================================
00008B34                            
00008B34                            Obj18_Type0A:
00008B34 3028 0034                  		move.w	$34(a0),d0
00008B38 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
00008B3C 0401 0040                  		subi.b	#$40,d1
00008B40 4881                       		ext.w	d1
00008B42 E241                       		asr.w	#1,d1
00008B44 D041                       		add.w	d1,d0
00008B46 3140 002C                  		move.w	d0,$2C(a0)	; change position on y-axis
00008B4A                            
00008B4A                            Obj18_ChgMotion:
00008B4A 1178 FE78 0026             		move.b	($FFFFFE78).w,$26(a0) ;	update platform-movement variable
00008B50 4E75                       		rts	
00008B52                            ; ===========================================================================
00008B52                            
00008B52                            Obj18_ChkDel:				; XREF: Obj18_Action; Obj18_Action2
00008B52 3028 0032                  		move.w	$32(a0),d0
00008B56 0240 FF80                  		andi.w	#$FF80,d0
00008B5A 3238 F700                  		move.w	($FFFFF700).w,d1
00008B5E 0441 0080                  		subi.w	#$80,d1
00008B62 0241 FF80                  		andi.w	#$FF80,d1
00008B66 9041                       		sub.w	d1,d0
00008B68 0C40 0280                  		cmpi.w	#$280,d0
00008B6C 6200                       		bhi.s	Obj18_Delete
00008B6E 4E75                       		rts	
00008B70                            ; ===========================================================================
00008B70                            
00008B70                            Obj18_Delete:				; XREF: Obj18_Index
00008B70 6000 0000                  		bra.w	DeleteObject
00008B74                            ; ===========================================================================
00008B74                            ; ---------------------------------------------------------------------------
00008B74                            ; Sprite mappings - unused
00008B74                            ; ---------------------------------------------------------------------------
00008B74                            Map_obj18x:
00008B74                            	include "_maps\obj18x.asm"
00008B74                            ; ---------------------------------------------------------------------------
00008B74                            ; Sprite mappings - unused
00008B74                            ; ---------------------------------------------------------------------------
00008B74 0000                       		dc.w byte_80FE-Map_obj18x
00008B76 0000                       		dc.w byte_8109-Map_obj18x
00008B78 02                         byte_80FE:	dc.b 2
00008B79 F40B 003C E8               		dc.b $F4, $B, 0, $3C, $E8
00008B7E F40B 0048 00               		dc.b $F4, $B, 0, $48, 0
00008B83 0A                         byte_8109:	dc.b $A
00008B84 F40F 00CA E0               		dc.b $F4, $F, 0, $CA, $E0
00008B89 040F 00DA E0               		dc.b 4,	$F, 0, $DA, $E0
00008B8E 240F 00DA E0               		dc.b $24, $F, 0, $DA, $E0
00008B93 440F 00DA E0               		dc.b $44, $F, 0, $DA, $E0
00008B98 640F 00DA E0               		dc.b $64, $F, 0, $DA, $E0
00008B9D F40F 08CA 00               		dc.b $F4, $F, 8, $CA, 0
00008BA2 040F 08DA 00               		dc.b 4,	$F, 8, $DA, 0
00008BA7 240F 08DA 00               		dc.b $24, $F, 8, $DA, 0
00008BAC 440F 08DA 00               		dc.b $44, $F, 8, $DA, 0
00008BB1 640F 08DA 00               		dc.b $64, $F, 8, $DA, 0
00008BB6                            		even
00008BB6                            		even
00008BB6                            
00008BB6                            ; ---------------------------------------------------------------------------
00008BB6                            ; Sprite mappings - GHZ	platforms
00008BB6                            ; ---------------------------------------------------------------------------
00008BB6                            Map_obj18:
00008BB6                            	include "_maps\obj18ghz.asm"
00008BB6                            ; ---------------------------------------------------------------------------
00008BB6                            ; Sprite mappings - GHZ	platforms
00008BB6                            ; ---------------------------------------------------------------------------
00008BB6 0000                       		dc.w byte_8140-Map_obj18
00008BB8 0000                       		dc.w byte_8155-Map_obj18
00008BBA 04                         byte_8140:	dc.b 4
00008BBB F40B 003B E0               		dc.b $F4, $B, 0, $3B, $E0 ; small platform
00008BC0 F407 003F F8               		dc.b $F4, 7, 0,	$3F, $F8
00008BC5 F407 003F 08               		dc.b $F4, 7, 0,	$3F, 8
00008BCA F403 0047 18               		dc.b $F4, 3, 0,	$47, $18
00008BCF 0A                         byte_8155:	dc.b $A
00008BD0 F40F 00C5 E0               		dc.b $F4, $F, 0, $C5, $E0 ; large column platform
00008BD5 040F 00D5 E0               		dc.b 4,	$F, 0, $D5, $E0
00008BDA 240F 00D5 E0               		dc.b $24, $F, 0, $D5, $E0
00008BDF 440F 00D5 E0               		dc.b $44, $F, 0, $D5, $E0
00008BE4 640F 00D5 E0               		dc.b $64, $F, 0, $D5, $E0
00008BE9 F40F 08C5 00               		dc.b $F4, $F, 8, $C5, 0
00008BEE 040F 08D5 00               		dc.b 4,	$F, 8, $D5, 0
00008BF3 240F 08D5 00               		dc.b $24, $F, 8, $D5, 0
00008BF8 440F 08D5 00               		dc.b $44, $F, 8, $D5, 0
00008BFD 640F 08D5 00               		dc.b $64, $F, 8, $D5, 0
00008C02                            		even
00008C02                            		even
00008C02                            
00008C02                            ; ---------------------------------------------------------------------------
00008C02                            ; Sprite mappings - SYZ	platforms
00008C02                            ; ---------------------------------------------------------------------------
00008C02                            Map_obj18a:
00008C02                            	include "_maps\obj18syz.asm"
00008C02                            ; ---------------------------------------------------------------------------
00008C02                            ; Sprite mappings - SYZ	platforms
00008C02                            ; ---------------------------------------------------------------------------
00008C02 0000                       		dc.w byte_818A-Map_obj18a
00008C04 03                         byte_818A:	dc.b 3
00008C05 F60B 0049 E0               		dc.b $F6, $B, 0, $49, $E0
00008C0A F607 0051 F8               		dc.b $F6, 7, 0,	$51, $F8
00008C0F F60B 0055 08               		dc.b $F6, $B, 0, $55, 8
00008C14                            		even
00008C14                            		even
00008C14                            
00008C14                            ; ---------------------------------------------------------------------------
00008C14                            ; Sprite mappings - SLZ	platforms
00008C14                            ; ---------------------------------------------------------------------------
00008C14                            Map_obj18b:
00008C14                            	include "_maps\obj18slz.asm"
00008C14                            ; ---------------------------------------------------------------------------
00008C14                            ; Sprite mappings - SLZ	platforms
00008C14                            ; ---------------------------------------------------------------------------
00008C14 0000                       		dc.w byte_819C-Map_obj18b
00008C16 02                         byte_819C:	dc.b 2
00008C17 F80F 0021 E0               		dc.b $F8, $F, 0, $21, $E0
00008C1C F80F 0021 00               		dc.b $F8, $F, 0, $21, 0
00008C22 00                         		even
00008C22 00                         		even
00008C22                            
00008C22                            ; ===========================================================================
00008C22                            ; ---------------------------------------------------------------------------
00008C22                            ; Object 19 - blank
00008C22                            ; ---------------------------------------------------------------------------
00008C22                            
00008C22                            Obj19:					; XREF: Obj_Index
00008C22 4E75                       		rts	
00008C24                            ; ===========================================================================
00008C24                            ; ---------------------------------------------------------------------------
00008C24                            ; Sprite mappings - swinging ball on a chain from GHZ boss
00008C24                            ; ---------------------------------------------------------------------------
00008C24                            Map_obj48:
00008C24                            	include "_maps\obj48.asm"
00008C24                            ; ---------------------------------------------------------------------------
00008C24                            ; Sprite mappings - swinging ball on a chain from GHZ boss
00008C24                            ; ---------------------------------------------------------------------------
00008C24 0000 0000                  		dc.w byte_81B2-Map_obj48, byte_81D1-Map_obj48
00008C28 0000 0000                  		dc.w byte_81E6-Map_obj48, byte_81FB-Map_obj48
00008C2C 06                         byte_81B2:	dc.b 6
00008C2D F004 0024 F0               		dc.b $F0, 4, 0,	$24, $F0
00008C32 F804 1024 F0               		dc.b $F8, 4, $10, $24, $F0
00008C37 E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
00008C3C E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
00008C41 000A 1000 E8               		dc.b 0,	$A, $10, 0, $E8
00008C46 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
00008C4B 04                         byte_81D1:	dc.b 4
00008C4C E80A 0009 E8               		dc.b $E8, $A, 0, 9, $E8
00008C51 E80A 0809 00               		dc.b $E8, $A, 8, 9, 0
00008C56 000A 1009 E8               		dc.b 0,	$A, $10, 9, $E8
00008C5B 000A 1809 00               		dc.b 0,	$A, $18, 9, 0
00008C60 04                         byte_81E6:	dc.b 4
00008C61 E80A 0012 E8               		dc.b $E8, $A, 0, $12, $E8
00008C66 E80A 001B 00               		dc.b $E8, $A, 0, $1B, 0
00008C6B 000A 181B E8               		dc.b 0,	$A, $18, $1B, $E8
00008C70 000A 1812 00               		dc.b 0,	$A, $18, $12, 0
00008C75 04                         byte_81FB:	dc.b 4
00008C76 E80A 081B E8               		dc.b $E8, $A, 8, $1B, $E8
00008C7B E80A 0812 00               		dc.b $E8, $A, 8, $12, 0
00008C80 000A 1012 E8               		dc.b 0,	$A, $10, $12, $E8
00008C85 000A 101B 00               		dc.b 0,	$A, $10, $1B, 0
00008C8A                            		even
00008C8A                            		even
00008C8A                            
00008C8A                            ; ===========================================================================
00008C8A                            ; ---------------------------------------------------------------------------
00008C8A                            ; Object 1A - GHZ collapsing ledge
00008C8A                            ; ---------------------------------------------------------------------------
00008C8A                            
00008C8A                            Obj1A:					; XREF: Obj_Index
00008C8A 7000                       		moveq	#0,d0
00008C8C 1028 0024                  		move.b	$24(a0),d0
00008C90 323B 0000                  		move.w	Obj1A_Index(pc,d0.w),d1
00008C94 4EFB 1000                  		jmp	Obj1A_Index(pc,d1.w)
00008C98                            ; ===========================================================================
00008C98 0000 0000                  Obj1A_Index:	dc.w Obj1A_Main-Obj1A_Index, Obj1A_ChkTouch-Obj1A_Index
00008C9C 0000 0000                  		dc.w Obj1A_Touch-Obj1A_Index, Obj1A_Display-Obj1A_Index
00008CA0 0000 0000                  		dc.w Obj1A_Delete-Obj1A_Index, Obj1A_WalkOff-Obj1A_Index
00008CA4                            ; ===========================================================================
00008CA4                            
00008CA4                            Obj1A_Main:				; XREF: Obj1A_Index
00008CA4 5428 0024                  		addq.b	#2,$24(a0)
00008CA8 217C 0000 0000 0004        		move.l	#Map_obj1A,4(a0)
00008CB0 317C 4000 0002             		move.w	#$4000,2(a0)
00008CB6 0028 0004 0001             		ori.b	#4,1(a0)
00008CBC 117C 0004 0018             		move.b	#4,$18(a0)
00008CC2 117C 0007 0038             		move.b	#7,$38(a0)	; set time delay for collapse
00008CC8 117C 0064 0019             		move.b	#$64,$19(a0)
00008CCE 1168 0028 001A             		move.b	$28(a0),$1A(a0)
00008CD4 117C 0038 0016             		move.b	#$38,$16(a0)
00008CDA 08E8 0004 0001             		bset	#4,1(a0)
00008CE0                            
00008CE0                            Obj1A_ChkTouch:				; XREF: Obj1A_Index
00008CE0 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	platform?
00008CE4 6700                       		beq.s	Obj1A_Slope	; if not, branch
00008CE6 4A28 0038                  		tst.b	$38(a0)		; has time reached zero?
00008CEA 6700 0000                  		beq.w	Obj1A_Collapse	; if yes, branch
00008CEE 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
00008CF2                            
00008CF2                            Obj1A_Slope:
00008CF2 323C 0030                  		move.w	#$30,d1
00008CF6 45F9 0000 0000             		lea	(Obj1A_SlopeData).l,a2
00008CFC 6100 F2A4                  		bsr.w	SlopeObject
00008D00 6000 0000                  		bra.w	MarkObjGone
00008D04                            ; ===========================================================================
00008D04                            
00008D04                            Obj1A_Touch:				; XREF: Obj1A_Index
00008D04 4A28 0038                  		tst.b	$38(a0)
00008D08 6700 0000                  		beq.w	loc_847A
00008D0C 117C 0001 003A             		move.b	#1,$3A(a0)	; set object as	"touched"
00008D12 5328 0038                  		subq.b	#1,$38(a0)
00008D16                            
00008D16                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008D16                            
00008D16                            
00008D16                            Obj1A_WalkOff:				; XREF: Obj1A_Index
00008D16 323C 0030                  		move.w	#$30,d1
00008D1A 6100 F326                  		bsr.w	ExitPlatform
00008D1E 323C 0030                  		move.w	#$30,d1
00008D22 45F9 0000 0000             		lea	(Obj1A_SlopeData).l,a2
00008D28 3428 0008                  		move.w	8(a0),d2
00008D2C 6100 0000                  		bsr.w	SlopeObject2
00008D30 6000 0000                  		bra.w	MarkObjGone
00008D34                            ; End of function Obj1A_WalkOff
00008D34                            
00008D34                            ; ===========================================================================
00008D34                            
00008D34                            Obj1A_Display:				; XREF: Obj1A_Index
00008D34 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
00008D38 6700                       		beq.s	Obj1A_TimeZero	; if yes, branch
00008D3A 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
00008D3E 6600 0000                  		bne.w	loc_82D0	; if yes, branch
00008D42 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
00008D46 6000 0000                  		bra.w	DisplaySprite
00008D4A                            ; ===========================================================================
00008D4A                            
00008D4A                            loc_82D0:				; XREF: Obj1A_Display
00008D4A 5328 0038                  		subq.b	#1,$38(a0)
00008D4E 6100 FFC6                  		bsr.w	Obj1A_WalkOff
00008D52 43F8 D000                  		lea	($FFFFD000).w,a1
00008D56 0829 0003 0022             		btst	#3,$22(a1)
00008D5C 6700                       		beq.s	loc_82FC
00008D5E 4A28 0038                  		tst.b	$38(a0)
00008D62 6600                       		bne.s	locret_8308
00008D64 08A9 0003 0022             		bclr	#3,$22(a1)
00008D6A 08A9 0005 0022             		bclr	#5,$22(a1)
00008D70 137C 0001 001D             		move.b	#1,$1D(a1)
00008D76                            
00008D76                            loc_82FC:
00008D76 117C 0000 003A             		move.b	#0,$3A(a0)
00008D7C 117C 0006 0024             		move.b	#6,$24(a0)	; run "Obj1A_Display" routine
00008D82                            
00008D82                            locret_8308:
00008D82 4E75                       		rts	
00008D84                            ; ===========================================================================
00008D84                            
00008D84                            Obj1A_TimeZero:				; XREF: Obj1A_Display
00008D84 6100 0000                  		bsr.w	ObjectFall
00008D88 6100 0000                  		bsr.w	DisplaySprite
00008D8C 4A28 0001                  		tst.b	1(a0)
00008D90 6A00                       		bpl.s	Obj1A_Delete
00008D92 4E75                       		rts	
00008D94                            ; ===========================================================================
00008D94                            
00008D94                            Obj1A_Delete:				; XREF: Obj1A_Index
00008D94 6100 0000                  		bsr.w	DeleteObject
00008D98 4E75                       		rts	
00008D9A                            ; ===========================================================================
00008D9A                            ; ---------------------------------------------------------------------------
00008D9A                            ; Object 53 - collapsing floors	(MZ, SLZ, SBZ)
00008D9A                            ; ---------------------------------------------------------------------------
00008D9A                            
00008D9A                            Obj53:					; XREF: Obj_Index
00008D9A 7000                       		moveq	#0,d0
00008D9C 1028 0024                  		move.b	$24(a0),d0
00008DA0 323B 0000                  		move.w	Obj53_Index(pc,d0.w),d1
00008DA4 4EFB 1000                  		jmp	Obj53_Index(pc,d1.w)
00008DA8                            ; ===========================================================================
00008DA8 0000 0000                  Obj53_Index:	dc.w Obj53_Main-Obj53_Index, Obj53_ChkTouch-Obj53_Index
00008DAC 0000 0000                  		dc.w Obj53_Touch-Obj53_Index, Obj53_Display-Obj53_Index
00008DB0 0000 0000                  		dc.w Obj53_Delete-Obj53_Index, Obj53_WalkOff-Obj53_Index
00008DB4                            ; ===========================================================================
00008DB4                            
00008DB4                            Obj53_Main:				; XREF: Obj53_Index
00008DB4 5428 0024                  		addq.b	#2,$24(a0)
00008DB8 217C 0000 0000 0004        		move.l	#Map_obj53,4(a0)
00008DC0 317C 42B8 0002             		move.w	#$42B8,2(a0)
00008DC6 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
00008DCC 6600                       		bne.s	Obj53_NotSLZ
00008DCE 317C 44E0 0002             		move.w	#$44E0,2(a0)	; SLZ specific code
00008DD4 5428 001A                  		addq.b	#2,$1A(a0)
00008DD8                            
00008DD8                            Obj53_NotSLZ:
00008DD8 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
00008DDE 6600                       		bne.s	Obj53_NotSBZ
00008DE0 317C 43F5 0002             		move.w	#$43F5,2(a0)	; SBZ specific code
00008DE6                            
00008DE6                            Obj53_NotSBZ:
00008DE6 0028 0004 0001             		ori.b	#4,1(a0)
00008DEC 117C 0004 0018             		move.b	#4,$18(a0)
00008DF2 117C 0007 0038             		move.b	#7,$38(a0)
00008DF8 117C 0044 0019             		move.b	#$44,$19(a0)
00008DFE                            
00008DFE                            Obj53_ChkTouch:				; XREF: Obj53_Index
00008DFE 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
00008E02 6700                       		beq.s	Obj53_Solid	; if not, branch
00008E04 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
00008E08 6700 0000                  		beq.w	Obj53_Collapse	; if yes, branch
00008E0C 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
00008E10                            
00008E10                            Obj53_Solid:
00008E10 323C 0020                  		move.w	#$20,d1
00008E14 6100 F0B8                  		bsr.w	PlatformObject
00008E18 4A28 0028                  		tst.b	$28(a0)
00008E1C 6A00                       		bpl.s	Obj53_MarkAsGone
00008E1E 0829 0003 0022             		btst	#3,$22(a1)
00008E24 6700                       		beq.s	Obj53_MarkAsGone
00008E26 08A8 0000 0001             		bclr	#0,1(a0)
00008E2C 3029 0008                  		move.w	8(a1),d0
00008E30 9068 0008                  		sub.w	8(a0),d0
00008E34 6400                       		bcc.s	Obj53_MarkAsGone
00008E36 08E8 0000 0001             		bset	#0,1(a0)
00008E3C                            
00008E3C                            Obj53_MarkAsGone:
00008E3C 6000 0000                  		bra.w	MarkObjGone
00008E40                            ; ===========================================================================
00008E40                            
00008E40                            Obj53_Touch:				; XREF: Obj53_Index
00008E40 4A28 0038                  		tst.b	$38(a0)
00008E44 6700 0000                  		beq.w	loc_8458
00008E48 117C 0001 003A             		move.b	#1,$3A(a0)	; set object as	"touched"
00008E4E 5328 0038                  		subq.b	#1,$38(a0)
00008E52                            
00008E52                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008E52                            
00008E52                            
00008E52                            Obj53_WalkOff:				; XREF: Obj53_Index
00008E52 323C 0020                  		move.w	#$20,d1
00008E56 6100 F1EA                  		bsr.w	ExitPlatform
00008E5A 3428 0008                  		move.w	8(a0),d2
00008E5E 6100 F74C                  		bsr.w	MvSonicOnPtfm2
00008E62 6000 0000                  		bra.w	MarkObjGone
00008E66                            ; End of function Obj53_WalkOff
00008E66                            
00008E66                            ; ===========================================================================
00008E66                            
00008E66                            Obj53_Display:				; XREF: Obj53_Index
00008E66 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
00008E6A 6700                       		beq.s	Obj53_TimeZero	; if yes, branch
00008E6C 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
00008E70 6600 0000                  		bne.w	loc_8402	; if yes, branch
00008E74 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
00008E78 6000 0000                  		bra.w	DisplaySprite
00008E7C                            ; ===========================================================================
00008E7C                            
00008E7C                            loc_8402:
00008E7C 5328 0038                  		subq.b	#1,$38(a0)
00008E80 6100 FFD0                  		bsr.w	Obj53_WalkOff
00008E84 43F8 D000                  		lea	($FFFFD000).w,a1
00008E88 0829 0003 0022             		btst	#3,$22(a1)
00008E8E 6700                       		beq.s	loc_842E
00008E90 4A28 0038                  		tst.b	$38(a0)
00008E94 6600                       		bne.s	locret_843A
00008E96 08A9 0003 0022             		bclr	#3,$22(a1)
00008E9C 08A9 0005 0022             		bclr	#5,$22(a1)
00008EA2 137C 0001 001D             		move.b	#1,$1D(a1)
00008EA8                            
00008EA8                            loc_842E:
00008EA8 117C 0000 003A             		move.b	#0,$3A(a0)
00008EAE 117C 0006 0024             		move.b	#6,$24(a0)	; run "Obj53_Display" routine
00008EB4                            
00008EB4                            locret_843A:
00008EB4 4E75                       		rts	
00008EB6                            ; ===========================================================================
00008EB6                            
00008EB6                            Obj53_TimeZero:				; XREF: Obj53_Display
00008EB6 6100 0000                  		bsr.w	ObjectFall
00008EBA 6100 0000                  		bsr.w	DisplaySprite
00008EBE 4A28 0001                  		tst.b	1(a0)
00008EC2 6A00                       		bpl.s	Obj53_Delete
00008EC4 4E75                       		rts	
00008EC6                            ; ===========================================================================
00008EC6                            
00008EC6                            Obj53_Delete:				; XREF: Obj53_Index
00008EC6 6100 0000                  		bsr.w	DeleteObject
00008ECA 4E75                       		rts	
00008ECC                            ; ===========================================================================
00008ECC                            
00008ECC                            Obj53_Collapse:				; XREF: Obj53_ChkTouch
00008ECC 117C 0000 003A             		move.b	#0,$3A(a0)
00008ED2                            
00008ED2                            loc_8458:				; XREF: Obj53_Touch
00008ED2 49F9 0000 0000             		lea	(Obj53_Data2).l,a4
00008ED8 0828 0000 0028             		btst	#0,$28(a0)
00008EDE 6700                       		beq.s	loc_846C
00008EE0 49F9 0000 0000             		lea	(Obj53_Data3).l,a4
00008EE6                            
00008EE6                            loc_846C:
00008EE6 7207                       		moveq	#7,d1
00008EE8 5228 001A                  		addq.b	#1,$1A(a0)
00008EEC 6000                       		bra.s	loc_8486
00008EEE                            ; ===========================================================================
00008EEE                            
00008EEE                            Obj1A_Collapse:				; XREF: Obj1A_ChkTouch
00008EEE 117C 0000 003A             		move.b	#0,$3A(a0)
00008EF4                            
00008EF4                            loc_847A:				; XREF: Obj1A_Touch
00008EF4 49F9 0000 0000             		lea	(Obj53_Data1).l,a4
00008EFA 7218                       		moveq	#$18,d1
00008EFC 5428 001A                  		addq.b	#2,$1A(a0)
00008F00                            
00008F00                            loc_8486:				; XREF: Obj53_Collapse
00008F00 7000                       		moveq	#0,d0
00008F02 1028 001A                  		move.b	$1A(a0),d0
00008F06 D040                       		add.w	d0,d0
00008F08 2668 0004                  		movea.l	4(a0),a3
00008F0C D6F3 0000                  		adda.w	(a3,d0.w),a3
00008F10 524B                       		addq.w	#1,a3
00008F12 08E8 0005 0001             		bset	#5,1(a0)
00008F18 1810                       		move.b	0(a0),d4
00008F1A 1A28 0001                  		move.b	1(a0),d5
00008F1E 2248                       		movea.l	a0,a1
00008F20 6000                       		bra.s	loc_84B2
00008F22                            ; ===========================================================================
00008F22                            
00008F22                            loc_84AA:
00008F22 6100 0000                  		bsr.w	SingleObjLoad
00008F26 6600                       		bne.s	loc_84F2
00008F28 5A4B                       		addq.w	#5,a3
00008F2A                            
00008F2A                            loc_84B2:
00008F2A 137C 0006 0024             		move.b	#6,$24(a1)
00008F30 1284                       		move.b	d4,0(a1)
00008F32 234B 0004                  		move.l	a3,4(a1)
00008F36 1345 0001                  		move.b	d5,1(a1)
00008F3A 3368 0008 0008             		move.w	8(a0),8(a1)
00008F40 3368 000C 000C             		move.w	$C(a0),$C(a1)
00008F46 3368 0002 0002             		move.w	2(a0),2(a1)
00008F4C 1368 0018 0018             		move.b	$18(a0),$18(a1)
00008F52 1368 0019 0019             		move.b	$19(a0),$19(a1)
00008F58 135C 0038                  		move.b	(a4)+,$38(a1)
00008F5C B3C8                       		cmpa.l	a0,a1
00008F5E 6400                       		bcc.s	loc_84EE
00008F60 6100 0000                  		bsr.w	DisplaySprite2
00008F64                            
00008F64                            loc_84EE:
00008F64 51C9 FFBC                  		dbf	d1,loc_84AA
00008F68                            
00008F68                            loc_84F2:
00008F68 6100 0000                  		bsr.w	DisplaySprite
00008F6C 303C 00B9                  		move.w	#$B9,d0
00008F70 4EF9 0000 147C             		jmp	(PlaySound_Special).l ;	play collapsing	sound
00008F76                            ; ===========================================================================
00008F76                            ; ---------------------------------------------------------------------------
00008F76                            ; Disintegration data for collapsing ledges (MZ, SLZ, SBZ)
00008F76                            ; ---------------------------------------------------------------------------
00008F76 1C18 1410 1A16 120E 0A06+  Obj53_Data1:	dc.b $1C, $18, $14, $10, $1A, $16, $12,	$E, $A,	6, $18,	$14, $10, $C, 8, 4
00008F86 1612 0E0A 0602 1410 0C00   		dc.b $16, $12, $E, $A, 6, 2, $14, $10, $C, 0
00008F90 1E16 0E06 1A12 0A02        Obj53_Data2:	dc.b $1E, $16, $E, 6, $1A, $12,	$A, 2
00008F98 161E 1A12 060E 0A02        Obj53_Data3:	dc.b $16, $1E, $1A, $12, 6, $E,	$A, 2
00008FA0                            
00008FA0                            ; ---------------------------------------------------------------------------
00008FA0                            ; Sloped platform subroutine (GHZ collapsing ledges and	MZ platforms)
00008FA0                            ; ---------------------------------------------------------------------------
00008FA0                            
00008FA0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008FA0                            
00008FA0                            
00008FA0                            SlopeObject2:				; XREF: Obj1A_WalkOff; et al
00008FA0 43F8 D000                  		lea	($FFFFD000).w,a1
00008FA4 0829 0003 0022             		btst	#3,$22(a1)
00008FAA 6700                       		beq.s	locret_856E
00008FAC 3029 0008                  		move.w	8(a1),d0
00008FB0 9068 0008                  		sub.w	8(a0),d0
00008FB4 D041                       		add.w	d1,d0
00008FB6 E248                       		lsr.w	#1,d0
00008FB8 0828 0000 0001             		btst	#0,1(a0)
00008FBE 6700                       		beq.s	loc_854E
00008FC0 4640                       		not.w	d0
00008FC2 D041                       		add.w	d1,d0
00008FC4                            
00008FC4                            loc_854E:
00008FC4 7200                       		moveq	#0,d1
00008FC6 1232 0000                  		move.b	(a2,d0.w),d1
00008FCA 3028 000C                  		move.w	$C(a0),d0
00008FCE 9041                       		sub.w	d1,d0
00008FD0 7200                       		moveq	#0,d1
00008FD2 1229 0016                  		move.b	$16(a1),d1
00008FD6 9041                       		sub.w	d1,d0
00008FD8 3340 000C                  		move.w	d0,$C(a1)
00008FDC 9468 0008                  		sub.w	8(a0),d2
00008FE0 9569 0008                  		sub.w	d2,8(a1)
00008FE4                            
00008FE4                            locret_856E:
00008FE4 4E75                       		rts	
00008FE6                            ; End of function SlopeObject2
00008FE6                            
00008FE6                            ; ===========================================================================
00008FE6                            ; ---------------------------------------------------------------------------
00008FE6                            ; Collision data for GHZ collapsing ledge
00008FE6                            ; ---------------------------------------------------------------------------
00008FE6                            Obj1A_SlopeData:
00008FE6                            		incbin	misc\ghzledge.bin
00009016                            		even
00009016                            
00009016                            ; ---------------------------------------------------------------------------
00009016                            ; Sprite mappings - GHZ	collapsing ledge
00009016                            ; ---------------------------------------------------------------------------
00009016                            Map_obj1A:
00009016                            	include "_maps\obj1A.asm"
00009016                            ; ---------------------------------------------------------------------------
00009016                            ; Sprite mappings - GHZ	collapsing ledge
00009016                            ; ---------------------------------------------------------------------------
00009016 0000 0000                  		dc.w byte_85A8-Map_obj1A, byte_85F9-Map_obj1A
0000901A 0000 0000                  		dc.w byte_864A-Map_obj1A, byte_86C8-Map_obj1A
0000901E 10                         byte_85A8:	dc.b $10
0000901F C80E 0057 10               		dc.b $C8, $E, 0, $57, $10 ; ledge facing left
00009024 D00D 0063 F0               		dc.b $D0, $D, 0, $63, $F0
00009029 E00D 006B 10               		dc.b $E0, $D, 0, $6B, $10
0000902E E00D 0073 F0               		dc.b $E0, $D, 0, $73, $F0
00009033 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00009038 D806 0081 D0               		dc.b $D8, 6, 0,	$81, $D0
0000903D F00D 0087 10               		dc.b $F0, $D, 0, $87, $10
00009042 F00D 008F F0               		dc.b $F0, $D, 0, $8F, $F0
00009047 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
0000904C F005 009B D0               		dc.b $F0, 5, 0,	$9B, $D0
00009051 000D 009F 10               		dc.b 0,	$D, 0, $9F, $10
00009056 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
0000905B 000D 00AB E0               		dc.b 0,	$D, 0, $AB, $E0
00009060 0005 00B3 D0               		dc.b 0,	5, 0, $B3, $D0
00009065 100D 00AB 10               		dc.b $10, $D, 0, $AB, $10
0000906A 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
0000906F 10                         byte_85F9:	dc.b $10
00009070 C80E 0057 10               		dc.b $C8, $E, 0, $57, $10 ; ledge facing right
00009075 D00D 0063 F0               		dc.b $D0, $D, 0, $63, $F0
0000907A E00D 006B 10               		dc.b $E0, $D, 0, $6B, $10
0000907F E00D 0073 F0               		dc.b $E0, $D, 0, $73, $F0
00009084 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00009089 D806 00BB D0               		dc.b $D8, 6, 0,	$BB, $D0
0000908E F00D 0087 10               		dc.b $F0, $D, 0, $87, $10
00009093 F00D 008F F0               		dc.b $F0, $D, 0, $8F, $F0
00009098 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
0000909D F005 00C1 D0               		dc.b $F0, 5, 0,	$C1, $D0
000090A2 000D 009F 10               		dc.b 0,	$D, 0, $9F, $10
000090A7 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
000090AC 000D 00AB E0               		dc.b 0,	$D, 0, $AB, $E0
000090B1 0005 00B7 D0               		dc.b 0,	5, 0, $B7, $D0
000090B6 100D 00AB 10               		dc.b $10, $D, 0, $AB, $10
000090BB 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
000090C0 19                         byte_864A:	dc.b $19
000090C1 C806 005D 20               		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	left in	pieces
000090C6 C806 0057 10               		dc.b $C8, 6, 0,	$57, $10
000090CB D005 0067 00               		dc.b $D0, 5, 0,	$67, 0
000090D0 D005 0063 F0               		dc.b $D0, 5, 0,	$63, $F0
000090D5 E005 006F 20               		dc.b $E0, 5, 0,	$6F, $20
000090DA E005 006B 10               		dc.b $E0, 5, 0,	$6B, $10
000090DF E005 0077 00               		dc.b $E0, 5, 0,	$77, 0
000090E4 E005 0073 F0               		dc.b $E0, 5, 0,	$73, $F0
000090E9 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
000090EE D806 0081 D0               		dc.b $D8, 6, 0,	$81, $D0
000090F3 F005 008B 20               		dc.b $F0, 5, 0,	$8B, $20
000090F8 F005 0087 10               		dc.b $F0, 5, 0,	$87, $10
000090FD F005 0093 00               		dc.b $F0, 5, 0,	$93, 0
00009102 F005 008F F0               		dc.b $F0, 5, 0,	$8F, $F0
00009107 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
0000910C F005 009B D0               		dc.b $F0, 5, 0,	$9B, $D0
00009111 0005 008B 20               		dc.b 0,	5, 0, $8B, $20
00009116 0005 008B 10               		dc.b 0,	5, 0, $8B, $10
0000911B 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00009120 0005 00AB F0               		dc.b 0,	5, 0, $AB, $F0
00009125 0005 00AB E0               		dc.b 0,	5, 0, $AB, $E0
0000912A 0005 00B3 D0               		dc.b 0,	5, 0, $B3, $D0
0000912F 1005 00AB 20               		dc.b $10, 5, 0,	$AB, $20
00009134 1005 00AB 10               		dc.b $10, 5, 0,	$AB, $10
00009139 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
0000913E 19                         byte_86C8:	dc.b $19
0000913F C806 005D 20               		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	right in pieces
00009144 C806 0057 10               		dc.b $C8, 6, 0,	$57, $10
00009149 D005 0067 00               		dc.b $D0, 5, 0,	$67, 0
0000914E D005 0063 F0               		dc.b $D0, 5, 0,	$63, $F0
00009153 E005 006F 20               		dc.b $E0, 5, 0,	$6F, $20
00009158 E005 006B 10               		dc.b $E0, 5, 0,	$6B, $10
0000915D E005 0077 00               		dc.b $E0, 5, 0,	$77, 0
00009162 E005 0073 F0               		dc.b $E0, 5, 0,	$73, $F0
00009167 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
0000916C D806 00BB D0               		dc.b $D8, 6, 0,	$BB, $D0
00009171 F005 008B 20               		dc.b $F0, 5, 0,	$8B, $20
00009176 F005 0087 10               		dc.b $F0, 5, 0,	$87, $10
0000917B F005 0093 00               		dc.b $F0, 5, 0,	$93, 0
00009180 F005 008F F0               		dc.b $F0, 5, 0,	$8F, $F0
00009185 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
0000918A F005 00C1 D0               		dc.b $F0, 5, 0,	$C1, $D0
0000918F 0005 008B 20               		dc.b 0,	5, 0, $8B, $20
00009194 0005 008B 10               		dc.b 0,	5, 0, $8B, $10
00009199 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
0000919E 0005 00AB F0               		dc.b 0,	5, 0, $AB, $F0
000091A3 0005 00AB E0               		dc.b 0,	5, 0, $AB, $E0
000091A8 0005 00B7 D0               		dc.b 0,	5, 0, $B7, $D0
000091AD 1005 00AB 20               		dc.b $10, 5, 0,	$AB, $20
000091B2 1005 00AB 10               		dc.b $10, 5, 0,	$AB, $10
000091B7 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
000091BC                            		even
000091BC                            		even
000091BC                            
000091BC                            ; ---------------------------------------------------------------------------
000091BC                            ; Sprite mappings - collapsing floors (MZ, SLZ,	SBZ)
000091BC                            ; ---------------------------------------------------------------------------
000091BC                            Map_obj53:
000091BC                            	include "_maps\obj53.asm"
000091BC                            ; ---------------------------------------------------------------------------
000091BC                            ; Sprite mappings - collapsing floors (MZ, SLZ,	SBZ)
000091BC                            ; ---------------------------------------------------------------------------
000091BC 0000 0000                  		dc.w byte_874E-Map_obj53, byte_8763-Map_obj53
000091C0 0000 0000                  		dc.w byte_878C-Map_obj53, byte_87A1-Map_obj53
000091C4 04                         byte_874E:	dc.b 4
000091C5 F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	; MZ and SBZ blocks
000091CA 080D 0000 E0               		dc.b 8,	$D, 0, 0, $E0
000091CF F80D 0000 00               		dc.b $F8, $D, 0, 0, 0
000091D4 080D 0000 00               		dc.b 8,	$D, 0, 0, 0
000091D9 08                         byte_8763:	dc.b 8
000091DA F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
000091DF F805 0000 F0               		dc.b $F8, 5, 0,	0, $F0
000091E4 F805 0000 00               		dc.b $F8, 5, 0,	0, 0
000091E9 F805 0000 10               		dc.b $F8, 5, 0,	0, $10
000091EE 0805 0000 E0               		dc.b 8,	5, 0, 0, $E0
000091F3 0805 0000 F0               		dc.b 8,	5, 0, 0, $F0
000091F8 0805 0000 00               		dc.b 8,	5, 0, 0, 0
000091FD 0805 0000 10               		dc.b 8,	5, 0, 0, $10
00009202 04                         byte_878C:	dc.b 4
00009203 F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	; SLZ blocks
00009208 080D 0008 E0               		dc.b 8,	$D, 0, 8, $E0
0000920D F80D 0000 00               		dc.b $F8, $D, 0, 0, 0
00009212 080D 0008 00               		dc.b 8,	$D, 0, 8, 0
00009217 08                         byte_87A1:	dc.b 8
00009218 F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
0000921D F805 0004 F0               		dc.b $F8, 5, 0,	4, $F0
00009222 F805 0000 00               		dc.b $F8, 5, 0,	0, 0
00009227 F805 0004 10               		dc.b $F8, 5, 0,	4, $10
0000922C 0805 0008 E0               		dc.b 8,	5, 0, 8, $E0
00009231 0805 000C F0               		dc.b 8,	5, 0, $C, $F0
00009236 0805 0008 00               		dc.b 8,	5, 0, 8, 0
0000923B 0805 000C 10               		dc.b 8,	5, 0, $C, $10
00009240                            		even
00009240                            		even
00009240                            
00009240                            ; ===========================================================================
00009240                            ; ---------------------------------------------------------------------------
00009240                            ; Object 1C - scenery (GHZ bridge stump, SLZ lava thrower)
00009240                            ; ---------------------------------------------------------------------------
00009240                            
00009240                            Obj1C:					; XREF: Obj_Index
00009240 7000                       		moveq	#0,d0
00009242 1028 0024                  		move.b	$24(a0),d0
00009246 323B 0000                  		move.w	Obj1C_Index(pc,d0.w),d1
0000924A 4EFB 1000                  		jmp	Obj1C_Index(pc,d1.w)
0000924E                            ; ===========================================================================
0000924E 0000                       Obj1C_Index:	dc.w Obj1C_Main-Obj1C_Index
00009250 0000                       		dc.w Obj1C_ChkDel-Obj1C_Index
00009252                            ; ===========================================================================
00009252                            
00009252                            Obj1C_Main:				; XREF: Obj1C_Index
00009252 5428 0024                  		addq.b	#2,$24(a0)
00009256 7000                       		moveq	#0,d0
00009258 1028 0028                  		move.b	$28(a0),d0	; copy object type to d0
0000925C C0FC 000A                  		mulu.w	#$A,d0		; multiply by $A
00009260 43FB 0000                  		lea	Obj1C_Var(pc,d0.w),a1
00009264 2159 0004                  		move.l	(a1)+,4(a0)
00009268 3159 0002                  		move.w	(a1)+,2(a0)
0000926C 0028 0004 0001             		ori.b	#4,1(a0)
00009272 1159 001A                  		move.b	(a1)+,$1A(a0)
00009276 1159 0019                  		move.b	(a1)+,$19(a0)
0000927A 1159 0018                  		move.b	(a1)+,$18(a0)
0000927E 1159 0020                  		move.b	(a1)+,$20(a0)
00009282                            
00009282                            Obj1C_ChkDel:				; XREF: Obj1C_Index
00009282 3028 0008                  		move.w	8(a0),d0
00009286 0240 FF80                  		andi.w	#$FF80,d0
0000928A 3238 F700                  		move.w	($FFFFF700).w,d1
0000928E 0441 0080                  		subi.w	#$80,d1
00009292 0241 FF80                  		andi.w	#$FF80,d1
00009296 9041                       		sub.w	d1,d0
00009298 0C40 0280                  		cmpi.w	#$280,d0
0000929C 6200 0000                  		bhi.w	DeleteObject
000092A0 6000 0000                  		bra.w	DisplaySprite
000092A4                            ; ===========================================================================
000092A4                            ; ---------------------------------------------------------------------------
000092A4                            ; Variables for	object $1C are stored in an array
000092A4                            ; ---------------------------------------------------------------------------
000092A4 0000 0000                  Obj1C_Var:	dc.l Map_obj1C		; mappings address
000092A8 44D8                       		dc.w $44D8		; VRAM setting
000092AA 0008 0200                  		dc.b 0,	8, 2, 0		; frame, width,	priority, collision response
000092AE 0000 0000                  		dc.l Map_obj1C
000092B2 44D8                       		dc.w $44D8
000092B4 0008 0200                  		dc.b 0,	8, 2, 0
000092B8 0000 0000                  		dc.l Map_obj1C
000092BC 44D8                       		dc.w $44D8
000092BE 0008 0200                  		dc.b 0,	8, 2, 0
000092C2 0000 83B6                  		dc.l Map_obj11
000092C6 438E                       		dc.w $438E
000092C8 0110 0100                  		dc.b 1,	$10, 1,	0
000092CC                            ; ---------------------------------------------------------------------------
000092CC                            ; Sprite mappings - SLZ	lava thrower
000092CC                            ; ---------------------------------------------------------------------------
000092CC                            Map_obj1C:
000092CC                            	include "_maps\obj1C.asm"
000092CC                            ; ---------------------------------------------------------------------------
000092CC                            ; Sprite mappings - SLZ	lava thrower
000092CC                            ; ---------------------------------------------------------------------------
000092CC 0000                       		dc.w byte_8858-Map_obj1C
000092CE 01                         byte_8858:	dc.b 1
000092CF F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
000092D4                            		even
000092D4                            		even
000092D4                            
000092D4                            ; ===========================================================================
000092D4                            ; ---------------------------------------------------------------------------
000092D4                            ; Object 1D - switch that activates when Sonic touches it
000092D4                            ; (this	is not used anywhere in	the game)
000092D4                            ; ---------------------------------------------------------------------------
000092D4                            
000092D4                            Obj1D:					; XREF: Obj_Index
000092D4 7000                       		moveq	#0,d0
000092D6 1028 0024                  		move.b	$24(a0),d0
000092DA 323B 0000                  		move.w	Obj1D_Index(pc,d0.w),d1
000092DE 4EFB 1000                  		jmp	Obj1D_Index(pc,d1.w)
000092E2                            ; ===========================================================================
000092E2 0000                       Obj1D_Index:	dc.w Obj1D_Main-Obj1D_Index
000092E4 0000                       		dc.w Obj1D_Action-Obj1D_Index
000092E6 0000                       		dc.w Obj1D_Delete-Obj1D_Index
000092E8                            ; ===========================================================================
000092E8                            
000092E8                            Obj1D_Main:				; XREF: Obj1D_Index
000092E8 5428 0024                  		addq.b	#2,$24(a0)
000092EC 217C 0000 0000 0004        		move.l	#Map_obj1D,4(a0)
000092F4 317C 4000 0002             		move.w	#$4000,2(a0)
000092FA 117C 0004 0001             		move.b	#4,1(a0)
00009300 3168 000C 0030             		move.w	$C(a0),$30(a0)	; save position	on y-axis
00009306 117C 0010 0019             		move.b	#$10,$19(a0)
0000930C 117C 0005 0018             		move.b	#5,$18(a0)
00009312                            
00009312                            Obj1D_Action:				; XREF: Obj1D_Index
00009312 3168 0030 000C             		move.w	$30(a0),$C(a0)	; restore position on y-axis
00009318 323C 0010                  		move.w	#$10,d1
0000931C 6100 0000                  		bsr.w	Obj1D_ChkTouch
00009320 6700                       		beq.s	Obj1D_ChkDel
00009322 5468 000C                  		addq.w	#2,$C(a0)	; move object 2	pixels
00009326 7001                       		moveq	#1,d0
00009328 31C0 F7E0                  		move.w	d0,($FFFFF7E0).w ; set switch 0	as "pressed"
0000932C                            
0000932C                            Obj1D_ChkDel:
0000932C 6100 0000                  		bsr.w	DisplaySprite
00009330 3028 0008                  		move.w	8(a0),d0
00009334 0240 FF80                  		andi.w	#$FF80,d0
00009338 3238 F700                  		move.w	($FFFFF700).w,d1
0000933C 0441 0080                  		subi.w	#$80,d1
00009340 0241 FF80                  		andi.w	#$FF80,d1
00009344 9041                       		sub.w	d1,d0
00009346 0C40 0280                  		cmpi.w	#$280,d0
0000934A 6200 0000                  		bhi.w	Obj1D_Delete
0000934E 4E75                       		rts	
00009350                            ; ===========================================================================
00009350                            
00009350                            Obj1D_Delete:				; XREF: Obj1D_Index
00009350 6100 0000                  		bsr.w	DeleteObject
00009354 4E75                       		rts	
00009356                            ; ---------------------------------------------------------------------------
00009356                            ; Subroutine to	check if Sonic touches the object
00009356                            ; ---------------------------------------------------------------------------
00009356                            
00009356                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009356                            
00009356                            
00009356                            Obj1D_ChkTouch:				; XREF: Obj1D_Action
00009356 43F8 D000                  		lea	($FFFFD000).w,a1
0000935A 3029 0008                  		move.w	8(a1),d0
0000935E 9068 0008                  		sub.w	8(a0),d0
00009362 D041                       		add.w	d1,d0
00009364 6B00                       		bmi.s	loc_8918
00009366 D241                       		add.w	d1,d1
00009368 B041                       		cmp.w	d1,d0
0000936A 6400                       		bcc.s	loc_8918
0000936C 3429 000C                  		move.w	$C(a1),d2
00009370 1229 0016                  		move.b	$16(a1),d1
00009374 4881                       		ext.w	d1
00009376 D242                       		add.w	d2,d1
00009378 3028 000C                  		move.w	$C(a0),d0
0000937C 0440 0010                  		subi.w	#$10,d0
00009380 9041                       		sub.w	d1,d0
00009382 6200                       		bhi.s	loc_8918
00009384 0C40 FFF0                  		cmpi.w	#-$10,d0
00009388 6500                       		bcs.s	loc_8918
0000938A 70FF                       		moveq	#-1,d0
0000938C 4E75                       		rts	
0000938E                            ; ===========================================================================
0000938E                            
0000938E                            loc_8918:
0000938E 7000                       		moveq	#0,d0
00009390 4E75                       		rts	
00009392                            ; End of function Obj1D_ChkTouch
00009392                            
00009392                            ; ===========================================================================
00009392                            ; ---------------------------------------------------------------------------
00009392                            ; Sprite mappings - object 1D
00009392                            ; ---------------------------------------------------------------------------
00009392                            Map_obj1D:
00009392                            	include "_maps\obj1D.asm"
00009392                            ; ---------------------------------------------------------------------------
00009392                            ; Sprite mappings - object 1D
00009392                            ; ---------------------------------------------------------------------------
00009392 0000                       		dc.w byte_891E-Map_obj1D
00009394 04                         byte_891E:	dc.b 4
00009395 E807 0054 F0               		dc.b $E8, 7, 0,	$54, $F0
0000939A 0805 005C F0               		dc.b 8,	5, 0, $5C, $F0
0000939F E807 0054 00               		dc.b $E8, 7, 0,	$54, 0
000093A4 0805 005C 00               		dc.b 8,	5, 0, $5C, 0
000093AA 00                         		even
000093AA 00                         		even
000093AA                            
000093AA                            ; ===========================================================================
000093AA                            ; ---------------------------------------------------------------------------
000093AA                            ; Object 2A - doors (SBZ)
000093AA                            ; ---------------------------------------------------------------------------
000093AA                            
000093AA                            Obj2A:					; XREF: Obj_Index
000093AA 7000                       		moveq	#0,d0
000093AC 1028 0024                  		move.b	$24(a0),d0
000093B0 323B 0000                  		move.w	Obj2A_Index(pc,d0.w),d1
000093B4 4EFB 1000                  		jmp	Obj2A_Index(pc,d1.w)
000093B8                            ; ===========================================================================
000093B8 0000                       Obj2A_Index:	dc.w Obj2A_Main-Obj2A_Index
000093BA 0000                       		dc.w Obj2A_OpenShut-Obj2A_Index
000093BC                            ; ===========================================================================
000093BC                            
000093BC                            Obj2A_Main:				; XREF: Obj2A_Index
000093BC 5428 0024                  		addq.b	#2,$24(a0)
000093C0 217C 0000 0000 0004        		move.l	#Map_obj2A,4(a0)
000093C8 317C 42E8 0002             		move.w	#$42E8,2(a0)
000093CE 0028 0004 0001             		ori.b	#4,1(a0)
000093D4 117C 0008 0019             		move.b	#8,$19(a0)
000093DA 117C 0004 0018             		move.b	#4,$18(a0)
000093E0                            
000093E0                            Obj2A_OpenShut:				; XREF: Obj2A_Index
000093E0 323C 0040                  		move.w	#$40,d1
000093E4 4228 001C                  		clr.b	$1C(a0)		; use "closing"	animation
000093E8 3038 D008                  		move.w	($FFFFD008).w,d0
000093EC D041                       		add.w	d1,d0
000093EE B068 0008                  		cmp.w	8(a0),d0
000093F2 6500                       		bcs.s	Obj2A_Animate
000093F4 9041                       		sub.w	d1,d0
000093F6 9041                       		sub.w	d1,d0
000093F8 B068 0008                  		cmp.w	8(a0),d0
000093FC 6400                       		bcc.s	Obj2A_Animate
000093FE D041                       		add.w	d1,d0
00009400 B068 0008                  		cmp.w	8(a0),d0
00009404 6400                       		bcc.s	loc_899A
00009406 0828 0000 0022             		btst	#0,$22(a0)
0000940C 6600                       		bne.s	Obj2A_Animate
0000940E 6000                       		bra.s	Obj2A_Open
00009410                            ; ===========================================================================
00009410                            
00009410                            loc_899A:				; XREF: Obj2A_OpenShut
00009410 0828 0000 0022             		btst	#0,$22(a0)
00009416 6700                       		beq.s	Obj2A_Animate
00009418                            
00009418                            Obj2A_Open:				; XREF: Obj2A_OpenShut
00009418 117C 0001 001C             		move.b	#1,$1C(a0)	; use "opening"	animation
0000941E                            
0000941E                            Obj2A_Animate:				; XREF: Obj2A_OpenShut; loc_899A
0000941E 43F9 0000 0000             		lea	(Ani_obj2A).l,a1
00009424 6100 0000                  		bsr.w	AnimateSprite
00009428 4A28 001A                  		tst.b	$1A(a0)		; is the door open?
0000942C 6600                       		bne.s	Obj2A_MarkAsUsed ; if yes, branch
0000942E 323C 0011                  		move.w	#$11,d1
00009432 343C 0020                  		move.w	#$20,d2
00009436 3602                       		move.w	d2,d3
00009438 5243                       		addq.w	#1,d3
0000943A 3828 0008                  		move.w	8(a0),d4
0000943E 6100 0000                  		bsr.w	SolidObject
00009442                            
00009442                            Obj2A_MarkAsUsed:
00009442 6000 0000                  		bra.w	MarkObjGone
00009446                            ; ===========================================================================
00009446                            Ani_obj2A:
00009446                            	include "_anim\obj2A.asm"
00009446                            ; ---------------------------------------------------------------------------
00009446                            ; Animation script - doors (SBZ)
00009446                            ; ---------------------------------------------------------------------------
00009446 0000                       		dc.w Ani_obj2A_Shut-Ani_obj2A
00009448 0000                       		dc.w Ani_obj2A_Open-Ani_obj2A
0000944A 0008 0706 0504 0302 0100+  Ani_obj2A_Shut:	dc.b 0,	8, 7, 6, 5, 4, 3, 2, 1,	0, $FE,	1
00009456 0000 0102 0304 0506 0708+  Ani_obj2A_Open:	dc.b 0,	0, 1, 2, 3, 4, 5, 6, 7,	8, $FE,	1
00009462                            		even
00009462                            		even
00009462                            
00009462                            ; ---------------------------------------------------------------------------
00009462                            ; Sprite mappings - doors (SBZ)
00009462                            ; ---------------------------------------------------------------------------
00009462                            Map_obj2A:
00009462                            	include "_maps\obj2A.asm"
00009462                            ; ---------------------------------------------------------------------------
00009462                            ; Sprite mappings - doors (SBZ)
00009462                            ; ---------------------------------------------------------------------------
00009462 0000 0000                  		dc.w byte_89FE-Map_obj2A, byte_8A09-Map_obj2A
00009466 0000 0000                  		dc.w byte_8A14-Map_obj2A, byte_8A1F-Map_obj2A
0000946A 0000 0000                  		dc.w byte_8A2A-Map_obj2A, byte_8A35-Map_obj2A
0000946E 0000 0000                  		dc.w byte_8A40-Map_obj2A, byte_8A4B-Map_obj2A
00009472 0000                       		dc.w byte_8A56-Map_obj2A
00009474 02                         byte_89FE:	dc.b 2
00009475 E007 0800 F8               		dc.b $E0, 7, 8,	0, $F8	; door closed
0000947A 0007 0800 F8               		dc.b 0,	7, 8, 0, $F8
0000947F 02                         byte_8A09:	dc.b 2
00009480 DC07 0800 F8               		dc.b $DC, 7, 8,	0, $F8
00009485 0407 0800 F8               		dc.b 4,	7, 8, 0, $F8
0000948A 02                         byte_8A14:	dc.b 2
0000948B D807 0800 F8               		dc.b $D8, 7, 8,	0, $F8
00009490 0807 0800 F8               		dc.b 8,	7, 8, 0, $F8
00009495 02                         byte_8A1F:	dc.b 2
00009496 D407 0800 F8               		dc.b $D4, 7, 8,	0, $F8
0000949B 0C07 0800 F8               		dc.b $C, 7, 8, 0, $F8
000094A0 02                         byte_8A2A:	dc.b 2
000094A1 D007 0800 F8               		dc.b $D0, 7, 8,	0, $F8
000094A6 1007 0800 F8               		dc.b $10, 7, 8,	0, $F8
000094AB 02                         byte_8A35:	dc.b 2
000094AC CC07 0800 F8               		dc.b $CC, 7, 8,	0, $F8
000094B1 1407 0800 F8               		dc.b $14, 7, 8,	0, $F8
000094B6 02                         byte_8A40:	dc.b 2
000094B7 C807 0800 F8               		dc.b $C8, 7, 8,	0, $F8
000094BC 1807 0800 F8               		dc.b $18, 7, 8,	0, $F8
000094C1 02                         byte_8A4B:	dc.b 2
000094C2 C407 0800 F8               		dc.b $C4, 7, 8,	0, $F8
000094C7 1C07 0800 F8               		dc.b $1C, 7, 8,	0, $F8
000094CC 02                         byte_8A56:	dc.b 2
000094CD C007 0800 F8               		dc.b $C0, 7, 8,	0, $F8	; door fully open
000094D2 2007 0800 F8               		dc.b $20, 7, 8,	0, $F8
000094D8 00                         		even
000094D8 00                         		even
000094D8                            
000094D8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000094D8                            
000094D8                            
000094D8                            Obj44_SolidWall:			; XREF: Obj44_Solid
000094D8 6100 0000                  		bsr.w	Obj44_SolidWall2
000094DC 6700                       		beq.s	loc_8AA8
000094DE 6B00 0000                  		bmi.w	loc_8AC4
000094E2 4A40                       		tst.w	d0
000094E4 6700 0000                  		beq.w	loc_8A92
000094E8 6B00                       		bmi.s	loc_8A7C
000094EA 4A69 0010                  		tst.w	$10(a1)
000094EE 6B00                       		bmi.s	loc_8A92
000094F0 6000                       		bra.s	loc_8A82
000094F2                            ; ===========================================================================
000094F2                            
000094F2                            loc_8A7C:
000094F2 4A69 0010                  		tst.w	$10(a1)
000094F6 6A00                       		bpl.s	loc_8A92
000094F8                            
000094F8                            loc_8A82:
000094F8 9169 0008                  		sub.w	d0,8(a1)
000094FC 337C 0000 0014             		move.w	#0,$14(a1)
00009502 337C 0000 0010             		move.w	#0,$10(a1)
00009508                            
00009508                            loc_8A92:
00009508 0829 0001 0022             		btst	#1,$22(a1)
0000950E 6600                       		bne.s	loc_8AB6
00009510 08E9 0005 0022             		bset	#5,$22(a1)
00009516 08E8 0005 0022             		bset	#5,$22(a0)
0000951C 4E75                       		rts	
0000951E                            ; ===========================================================================
0000951E                            
0000951E                            loc_8AA8:
0000951E 0828 0005 0022             		btst	#5,$22(a0)
00009524 6700                       		beq.s	locret_8AC2
00009526 337C 0001 001C             		move.w	#1,$1C(a1)
0000952C                            
0000952C                            loc_8AB6:
0000952C 08A8 0005 0022             		bclr	#5,$22(a0)
00009532 08A9 0005 0022             		bclr	#5,$22(a1)
00009538                            
00009538                            locret_8AC2:
00009538 4E75                       		rts	
0000953A                            ; ===========================================================================
0000953A                            
0000953A                            loc_8AC4:
0000953A 4A69 0012                  		tst.w	$12(a1)
0000953E 6A00                       		bpl.s	locret_8AD8
00009540 4A43                       		tst.w	d3
00009542 6A00                       		bpl.s	locret_8AD8
00009544 9769 000C                  		sub.w	d3,$C(a1)
00009548 337C 0000 0012             		move.w	#0,$12(a1)
0000954E                            
0000954E                            locret_8AD8:
0000954E 4E75                       		rts	
00009550                            ; End of function Obj44_SolidWall
00009550                            
00009550                            
00009550                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009550                            
00009550                            
00009550                            Obj44_SolidWall2:			; XREF: Obj44_SolidWall
00009550 43F8 D000                  		lea	($FFFFD000).w,a1
00009554 3029 0008                  		move.w	8(a1),d0
00009558 9068 0008                  		sub.w	8(a0),d0
0000955C D041                       		add.w	d1,d0
0000955E 6B00                       		bmi.s	loc_8B48
00009560 3601                       		move.w	d1,d3
00009562 D643                       		add.w	d3,d3
00009564 B043                       		cmp.w	d3,d0
00009566 6200                       		bhi.s	loc_8B48
00009568 1629 0016                  		move.b	$16(a1),d3
0000956C 4883                       		ext.w	d3
0000956E D443                       		add.w	d3,d2
00009570 3629 000C                  		move.w	$C(a1),d3
00009574 9668 000C                  		sub.w	$C(a0),d3
00009578 D642                       		add.w	d2,d3
0000957A 6B00                       		bmi.s	loc_8B48
0000957C 3802                       		move.w	d2,d4
0000957E D844                       		add.w	d4,d4
00009580 B644                       		cmp.w	d4,d3
00009582 6400                       		bcc.s	loc_8B48
00009584 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00009588 6B00                       		bmi.s	loc_8B48
0000958A 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00009590 6400                       		bcc.s	loc_8B48
00009592 4A78 FE08                  		tst.w	($FFFFFE08).w
00009596 6600                       		bne.s	loc_8B48
00009598 3A00                       		move.w	d0,d5
0000959A B240                       		cmp.w	d0,d1
0000959C 6400                       		bcc.s	loc_8B30
0000959E D241                       		add.w	d1,d1
000095A0 9041                       		sub.w	d1,d0
000095A2 3A00                       		move.w	d0,d5
000095A4 4445                       		neg.w	d5
000095A6                            
000095A6                            loc_8B30:
000095A6 3203                       		move.w	d3,d1
000095A8 B443                       		cmp.w	d3,d2
000095AA 6400                       		bcc.s	loc_8B3C
000095AC 9644                       		sub.w	d4,d3
000095AE 3203                       		move.w	d3,d1
000095B0 4441                       		neg.w	d1
000095B2                            
000095B2                            loc_8B3C:
000095B2 BA41                       		cmp.w	d1,d5
000095B4 6200                       		bhi.s	loc_8B44
000095B6 7801                       		moveq	#1,d4
000095B8 4E75                       		rts	
000095BA                            ; ===========================================================================
000095BA                            
000095BA                            loc_8B44:
000095BA 78FF                       		moveq	#-1,d4
000095BC 4E75                       		rts	
000095BE                            ; ===========================================================================
000095BE                            
000095BE                            loc_8B48:
000095BE 7800                       		moveq	#0,d4
000095C0 4E75                       		rts	
000095C2                            ; End of function Obj44_SolidWall2
000095C2                            
000095C2                            ; ===========================================================================
000095C2                            ; ---------------------------------------------------------------------------
000095C2                            ; Object 1E - Ball Hog enemy (SBZ)
000095C2                            ; ---------------------------------------------------------------------------
000095C2                            
000095C2                            Obj1E:					; XREF: Obj_Index
000095C2 7000                       		moveq	#0,d0
000095C4 1028 0024                  		move.b	$24(a0),d0
000095C8 323B 0000                  		move.w	Obj1E_Index(pc,d0.w),d1
000095CC 4EFB 1000                  		jmp	Obj1E_Index(pc,d1.w)
000095D0                            ; ===========================================================================
000095D0 0000                       Obj1E_Index:	dc.w Obj1E_Main-Obj1E_Index
000095D2 0000                       		dc.w Obj1E_Action-Obj1E_Index
000095D4                            ; ===========================================================================
000095D4                            
000095D4                            Obj1E_Main:				; XREF: Obj1E_Index
000095D4 117C 0013 0016             		move.b	#$13,$16(a0)
000095DA 117C 0008 0017             		move.b	#8,$17(a0)
000095E0 217C 0000 0000 0004        		move.l	#Map_obj1E,4(a0)
000095E8 317C 2302 0002             		move.w	#$2302,2(a0)
000095EE 117C 0004 0001             		move.b	#4,1(a0)
000095F4 117C 0004 0018             		move.b	#4,$18(a0)
000095FA 117C 0005 0020             		move.b	#5,$20(a0)
00009600 117C 000C 0019             		move.b	#$C,$19(a0)
00009606 6100 0000                  		bsr.w	ObjectFall
0000960A 4EB9 0000 0000             		jsr	ObjHitFloor
00009610 4A41                       		tst.w	d1
00009612 6A00                       		bpl.s	locret_8BAC
00009614 D368 000C                  		add.w	d1,$C(a0)
00009618 317C 0000 0012             		move.w	#0,$12(a0)
0000961E 5428 0024                  		addq.b	#2,$24(a0)
00009622                            
00009622                            locret_8BAC:
00009622 4E75                       		rts	
00009624                            ; ===========================================================================
00009624                            
00009624                            Obj1E_Action:				; XREF: Obj1E_Index
00009624 43F9 0000 0000             		lea	(Ani_obj1E).l,a1
0000962A 6100 0000                  		bsr.w	AnimateSprite
0000962E 0C28 0001 001A             		cmpi.b	#1,$1A(a0)	; is final frame (01) displayed?
00009634 6600                       		bne.s	Obj1E_SetBall	; if not, branch
00009636 4A28 0032                  		tst.b	$32(a0)		; is it	set to launch cannonball?
0000963A 6700                       		beq.s	Obj1E_MakeBall	; if yes, branch
0000963C 6000                       		bra.s	Obj1E_MarkAsGone
0000963E                            ; ===========================================================================
0000963E                            
0000963E                            Obj1E_SetBall:				; XREF: Obj1E_Action
0000963E 4228 0032                  		clr.b	$32(a0)		; set to launch	cannonball
00009642                            
00009642                            Obj1E_MarkAsGone:			; XREF: Obj1E_Action
00009642 6000 0000                  		bra.w	MarkObjGone
00009646                            ; ===========================================================================
00009646                            
00009646                            Obj1E_MakeBall:				; XREF: Obj1E_Action
00009646 117C 0001 0032             		move.b	#1,$32(a0)
0000964C 6100 0000                  		bsr.w	SingleObjLoad
00009650 6600                       		bne.s	loc_8C1A
00009652 12BC 0020                  		move.b	#$20,0(a1)	; load cannonball object ($20)
00009656 3368 0008 0008             		move.w	8(a0),8(a1)
0000965C 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009662 337C FF00 0010             		move.w	#-$100,$10(a1)	; cannonball bounces to	the left
00009668 337C 0000 0012             		move.w	#0,$12(a1)
0000966E 70FC                       		moveq	#-4,d0
00009670 0828 0000 0022             		btst	#0,$22(a0)	; is Ball Hog facing right?
00009676 6700                       		beq.s	loc_8C0A	; if not, branch
00009678 4440                       		neg.w	d0
0000967A 4469 0010                  		neg.w	$10(a1)		; cannonball bounces to	the right
0000967E                            
0000967E                            loc_8C0A:
0000967E D169 0008                  		add.w	d0,8(a1)
00009682 0669 000C 000C             		addi.w	#$C,$C(a1)
00009688 1368 0028 0028             		move.b	$28(a0),$28(a1)	; copy object type from	Ball Hog
0000968E                            
0000968E                            loc_8C1A:
0000968E 60B2                       		bra.s	Obj1E_MarkAsGone
00009690                            ; ===========================================================================
00009690                            ; ---------------------------------------------------------------------------
00009690                            ; Object 20 - cannonball that Ball Hog throws (SBZ)
00009690                            ; ---------------------------------------------------------------------------
00009690                            
00009690                            Obj20:					; XREF: Obj_Index
00009690 7000                       		moveq	#0,d0
00009692 1028 0024                  		move.b	$24(a0),d0
00009696 323B 0000                  		move.w	Obj20_Index(pc,d0.w),d1
0000969A 4EFB 1000                  		jmp	Obj20_Index(pc,d1.w)
0000969E                            ; ===========================================================================
0000969E 0000                       Obj20_Index:	dc.w Obj20_Main-Obj20_Index
000096A0 0000                       		dc.w Obj20_Bounce-Obj20_Index
000096A2                            ; ===========================================================================
000096A2                            
000096A2                            Obj20_Main:				; XREF: Obj20_Index
000096A2 5428 0024                  		addq.b	#2,$24(a0)
000096A6 117C 0007 0016             		move.b	#7,$16(a0)
000096AC 217C 0000 0000 0004        		move.l	#Map_obj1E,4(a0)
000096B4 317C 2302 0002             		move.w	#$2302,2(a0)
000096BA 117C 0004 0001             		move.b	#4,1(a0)
000096C0 117C 0003 0018             		move.b	#3,$18(a0)
000096C6 117C 0087 0020             		move.b	#$87,$20(a0)
000096CC 117C 0008 0019             		move.b	#8,$19(a0)
000096D2 7000                       		moveq	#0,d0
000096D4 1028 0028                  		move.b	$28(a0),d0	; move object type to d0
000096D8 C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 frames	(1 second)
000096DC 3140 0030                  		move.w	d0,$30(a0)	; set explosion	time
000096E0 117C 0004 001A             		move.b	#4,$1A(a0)
000096E6                            
000096E6                            Obj20_Bounce:				; XREF: Obj20_Index
000096E6 4EB9 0000 0000             		jsr	ObjectFall
000096EC 4A68 0012                  		tst.w	$12(a0)
000096F0 6B00                       		bmi.s	Obj20_ChkExplode
000096F2 4EB9 0000 0000             		jsr	ObjHitFloor
000096F8 4A41                       		tst.w	d1
000096FA 6A00                       		bpl.s	Obj20_ChkExplode
000096FC D368 000C                  		add.w	d1,$C(a0)
00009700 317C FD00 0012             		move.w	#-$300,$12(a0)
00009706 4A03                       		tst.b	d3
00009708 6700                       		beq.s	Obj20_ChkExplode
0000970A 6B00                       		bmi.s	loc_8CA4
0000970C 4A68 0010                  		tst.w	$10(a0)
00009710 6A00                       		bpl.s	Obj20_ChkExplode
00009712 4468 0010                  		neg.w	$10(a0)
00009716 6000                       		bra.s	Obj20_ChkExplode
00009718                            ; ===========================================================================
00009718                            
00009718                            loc_8CA4:				; XREF: Obj20_Bounce
00009718 4A68 0010                  		tst.w	$10(a0)
0000971C 6B00                       		bmi.s	Obj20_ChkExplode
0000971E 4468 0010                  		neg.w	$10(a0)
00009722                            
00009722                            Obj20_ChkExplode:			; XREF: Obj20_Bounce
00009722 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from explosion time
00009726 6A00                       		bpl.s	Obj20_Animate	; if time is > 0, branch
00009728 10BC 0024                  		move.b	#$24,0(a0)
0000972C 10BC 003F                  		move.b	#$3F,0(a0)	; change object	to an explosion	($3F)
00009730 117C 0000 0024             		move.b	#0,$24(a0)	; reset	routine	counter
00009736 6000 0000                  		bra.w	Obj3F		; jump to explosion code
0000973A                            ; ===========================================================================
0000973A                            
0000973A                            Obj20_Animate:				; XREF: Obj20_ChkExplode
0000973A 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
0000973E 6A00                       		bpl.s	Obj20_Display
00009740 117C 0005 001E             		move.b	#5,$1E(a0)	; set frame duration to	5 frames
00009746 0868 0000 001A             		bchg	#0,$1A(a0)	; change frame
0000974C                            
0000974C                            Obj20_Display:
0000974C 6100 0000                  		bsr.w	DisplaySprite
00009750 3038 F72E                  		move.w	($FFFFF72E).w,d0
00009754 0640 00E0                  		addi.w	#$E0,d0
00009758 B068 000C                  		cmp.w	$C(a0),d0	; has object fallen off	the level?
0000975C 6500 0000                  		bcs.w	DeleteObject	; if yes, branch
00009760 4E75                       		rts	
00009762                            ; ===========================================================================
00009762                            ; ---------------------------------------------------------------------------
00009762                            ; Object 24 - explosion	from a destroyed monitor
00009762                            ; ---------------------------------------------------------------------------
00009762                            
00009762                            Obj24:					; XREF: Obj_Index
00009762 7000                       		moveq	#0,d0
00009764 1028 0024                  		move.b	$24(a0),d0
00009768 323B 0000                  		move.w	Obj24_Index(pc,d0.w),d1
0000976C 4EFB 1000                  		jmp	Obj24_Index(pc,d1.w)
00009770                            ; ===========================================================================
00009770 0000                       Obj24_Index:	dc.w Obj24_Main-Obj24_Index
00009772 0000                       		dc.w Obj24_Animate-Obj24_Index
00009774                            ; ===========================================================================
00009774                            
00009774                            Obj24_Main:				; XREF: Obj24_Index
00009774 5428 0024                  		addq.b	#2,$24(a0)
00009778 217C 0000 0000 0004        		move.l	#Map_obj24,4(a0)
00009780 317C 041C 0002             		move.w	#$41C,2(a0)
00009786 117C 0004 0001             		move.b	#4,1(a0)
0000978C 117C 0001 0018             		move.b	#1,$18(a0)
00009792 117C 0000 0020             		move.b	#0,$20(a0)
00009798 117C 000C 0019             		move.b	#$C,$19(a0)
0000979E 117C 0009 001E             		move.b	#9,$1E(a0)
000097A4 117C 0000 001A             		move.b	#0,$1A(a0)
000097AA 303C 00A5                  		move.w	#$A5,d0
000097AE 4EB9 0000 147C             		jsr	(PlaySound_Special).l ;	play explosion sound
000097B4                            
000097B4                            Obj24_Animate:				; XREF: Obj24_Index
000097B4 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
000097B8 6A00                       		bpl.s	Obj24_Display
000097BA 117C 0009 001E             		move.b	#9,$1E(a0)	; set frame duration to	9 frames
000097C0 5228 001A                  		addq.b	#1,$1A(a0)	; next frame
000097C4 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; is the final frame (04) displayed?
000097CA 6700 0000                  		beq.w	DeleteObject	; if yes, branch
000097CE                            
000097CE                            Obj24_Display:
000097CE 6000 0000                  		bra.w	DisplaySprite
000097D2                            ; ===========================================================================
000097D2                            ; ---------------------------------------------------------------------------
000097D2                            ; Object 27 - explosion	from a destroyed enemy
000097D2                            ; ---------------------------------------------------------------------------
000097D2                            
000097D2                            Obj27:					; XREF: Obj_Index
000097D2 7000                       		moveq	#0,d0
000097D4 1028 0024                  		move.b	$24(a0),d0
000097D8 323B 0000                  		move.w	Obj27_Index(pc,d0.w),d1
000097DC 4EFB 1000                  		jmp	Obj27_Index(pc,d1.w)
000097E0                            ; ===========================================================================
000097E0 0000                       Obj27_Index:	dc.w Obj27_LoadAnimal-Obj27_Index
000097E2 0000                       		dc.w Obj27_Main-Obj27_Index
000097E4 0000                       		dc.w Obj27_Animate-Obj27_Index
000097E6                            ; ===========================================================================
000097E6                            
000097E6                            Obj27_LoadAnimal:			; XREF: Obj27_Index
000097E6 5428 0024                  		addq.b	#2,$24(a0)
000097EA 6100 0000                  		bsr.w	SingleObjLoad
000097EE 6600                       		bne.s	Obj27_Main
000097F0 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
000097F4 3368 0008 0008             		move.w	8(a0),8(a1)
000097FA 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009800 3368 003E 003E             		move.w	$3E(a0),$3E(a1)
00009806                            
00009806                            Obj27_Main:				; XREF: Obj27_Index
00009806 5428 0024                  		addq.b	#2,$24(a0)
0000980A 217C 0000 0000 0004        		move.l	#Map_obj27,4(a0)
00009812 317C 05A0 0002             		move.w	#$5A0,2(a0)
00009818 117C 0004 0001             		move.b	#4,1(a0)
0000981E 117C 0001 0018             		move.b	#1,$18(a0)
00009824 117C 0000 0020             		move.b	#0,$20(a0)
0000982A 117C 000C 0019             		move.b	#$C,$19(a0)
00009830 117C 0007 001E             		move.b	#7,$1E(a0)	; set frame duration to	7 frames
00009836 117C 0000 001A             		move.b	#0,$1A(a0)
0000983C 303C 00C1                  		move.w	#$C1,d0
00009840 4EB9 0000 147C             		jsr	(PlaySound_Special).l ;	play breaking enemy sound
00009846                            
00009846                            Obj27_Animate:				; XREF: Obj27_Index
00009846 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
0000984A 6A00                       		bpl.s	Obj27_Display
0000984C 117C 0007 001E             		move.b	#7,$1E(a0)	; set frame duration to	7 frames
00009852 5228 001A                  		addq.b	#1,$1A(a0)	; next frame
00009856 0C28 0005 001A             		cmpi.b	#5,$1A(a0)	; is the final frame (05) displayed?
0000985C 6700 0000                  		beq.w	DeleteObject	; if yes, branch
00009860                            
00009860                            Obj27_Display:
00009860 6000 0000                  		bra.w	DisplaySprite
00009864                            ; ===========================================================================
00009864                            ; ---------------------------------------------------------------------------
00009864                            ; Object 3F - explosion	from a destroyed boss, bomb or cannonball
00009864                            ; ---------------------------------------------------------------------------
00009864                            
00009864                            Obj3F:					; XREF: Obj_Index
00009864 7000                       		moveq	#0,d0
00009866 1028 0024                  		move.b	$24(a0),d0
0000986A 323B 0000                  		move.w	Obj3F_Index(pc,d0.w),d1
0000986E 4EFB 1000                  		jmp	Obj3F_Index(pc,d1.w)
00009872                            ; ===========================================================================
00009872 0000                       Obj3F_Index:	dc.w Obj3F_Main-Obj3F_Index
00009874 FFD4                       		dc.w Obj27_Animate-Obj3F_Index
00009876                            ; ===========================================================================
00009876                            
00009876                            Obj3F_Main:				; XREF: Obj3F_Index
00009876 5428 0024                  		addq.b	#2,$24(a0)
0000987A 217C 0000 0000 0004        		move.l	#Map_obj3F,4(a0)
00009882 317C 05A0 0002             		move.w	#$5A0,2(a0)
00009888 117C 0004 0001             		move.b	#4,1(a0)
0000988E 117C 0001 0018             		move.b	#1,$18(a0)
00009894 117C 0000 0020             		move.b	#0,$20(a0)
0000989A 117C 000C 0019             		move.b	#$C,$19(a0)
000098A0 117C 0007 001E             		move.b	#7,$1E(a0)
000098A6 117C 0000 001A             		move.b	#0,$1A(a0)
000098AC 303C 00C4                  		move.w	#$C4,d0
000098B0 4EF9 0000 147C             		jmp	(PlaySound_Special).l ;	play exploding bomb sound
000098B6                            ; ===========================================================================
000098B6                            Ani_obj1E:
000098B6                            	include "_anim\obj1E.asm"
000098B6                            ; ---------------------------------------------------------------------------
000098B6                            ; Animation script - doors (SBZ)
000098B6                            ; ---------------------------------------------------------------------------
000098B6 0000                       		dc.w byte_8E4A-Ani_obj1E
000098B8 0900 0002 0203 0200 0002+  byte_8E4A:	dc.b 9,	0, 0, 2, 2, 3, 2, 0, 0,	2, 2, 3, 2, 0, 0, 2, 2, 3, 2, 0, 0, 1, $FF
000098D0 00                         		even
000098D0 00                         		even
000098D0                            
000098D0                            ; ---------------------------------------------------------------------------
000098D0                            ; Sprite mappings - Ball Hog enemy (SBZ)
000098D0                            ; ---------------------------------------------------------------------------
000098D0                            Map_obj1E:
000098D0                            	include "_maps\obj1E.asm"
000098D0                            ; ---------------------------------------------------------------------------
000098D0                            ; Sprite mappings - Ball Hog enemy (SBZ)
000098D0                            ; ---------------------------------------------------------------------------
000098D0 0000 0000                  		dc.w byte_8E6E-Map_obj1E, byte_8E79-Map_obj1E
000098D4 0000 0000                  		dc.w byte_8E84-Map_obj1E, byte_8E8F-Map_obj1E
000098D8 0000 0000                  		dc.w byte_8E9A-Map_obj1E, byte_8EA0-Map_obj1E
000098DC 02                         byte_8E6E:	dc.b 2
000098DD EF09 0000 F4               		dc.b $EF, 9, 0,	0, $F4
000098E2 FF0A 0006 F4               		dc.b $FF, $A, 0, 6, $F4
000098E7 02                         byte_8E79:	dc.b 2
000098E8 EF09 0000 F4               		dc.b $EF, 9, 0,	0, $F4
000098ED FF0A 000F F4               		dc.b $FF, $A, 0, $F, $F4
000098F2 02                         byte_8E84:	dc.b 2
000098F3 F409 0000 F4               		dc.b $F4, 9, 0,	0, $F4
000098F8 0409 0018 F4               		dc.b 4,	9, 0, $18, $F4
000098FD 02                         byte_8E8F:	dc.b 2
000098FE E409 0000 F4               		dc.b $E4, 9, 0,	0, $F4
00009903 F40A 001E F4               		dc.b $F4, $A, 0, $1E, $F4
00009908 01                         byte_8E9A:	dc.b 1
00009909 F805 0027 F8               		dc.b $F8, 5, 0,	$27, $F8
0000990E 01                         byte_8EA0:	dc.b 1
0000990F F805 002B F8               		dc.b $F8, 5, 0,	$2B, $F8
00009914                            		even
00009914                            		even
00009914                            
00009914                            ; ---------------------------------------------------------------------------
00009914                            ; Sprite mappings - explosion
00009914                            ; ---------------------------------------------------------------------------
00009914                            Map_obj24:
00009914                            	include "_maps\obj24.asm"
00009914                            ; ---------------------------------------------------------------------------
00009914                            ; Sprite mappings - explosion
00009914                            ; ---------------------------------------------------------------------------
00009914 0000 0000                  		dc.w byte_8EAE-Map_obj24, byte_8EB4-Map_obj24
00009918 0000 0000                  		dc.w byte_8EBA-Map_obj24, byte_8EC0-Map_obj24
0000991C 01                         byte_8EAE:	dc.b 1
0000991D F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
00009922 01                         byte_8EB4:	dc.b 1
00009923 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
00009928 01                         byte_8EBA:	dc.b 1
00009929 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0000992E 01                         byte_8EC0:	dc.b 1
0000992F F40A 001B F4               		dc.b $F4, $A, 0, $1B, $F4
00009934                            		even
00009934                            		even
00009934                            
00009934                            ; ---------------------------------------------------------------------------
00009934                            ; Sprite mappings - explosion
00009934                            ; ---------------------------------------------------------------------------
00009934 0000 0000                  Map_obj27:	dc.w byte_8ED0-Map_obj27, byte_8ED6-Map_obj27
00009938 0000 0000                  		dc.w byte_8EDC-Map_obj27, byte_8EE2-Map_obj27
0000993C 0000                       		dc.w byte_8EF7-Map_obj27
0000993E 01                         byte_8ED0:	dc.b 1
0000993F F809 0000 F4               		dc.b $F8, 9, 0,	0, $F4
00009944 01                         byte_8ED6:	dc.b 1
00009945 F00F 0006 F0               		dc.b $F0, $F, 0, 6, $F0
0000994A 01                         byte_8EDC:	dc.b 1
0000994B F00F 0016 F0               		dc.b $F0, $F, 0, $16, $F0
00009950 04                         byte_8EE2:	dc.b 4
00009951 EC0A 0026 EC               		dc.b $EC, $A, 0, $26, $EC
00009956 EC05 002F 04               		dc.b $EC, 5, 0,	$2F, 4
0000995B 0405 182F EC               		dc.b 4,	5, $18,	$2F, $EC
00009960 FC0A 1826 FC               		dc.b $FC, $A, $18, $26,	$FC
00009965 04                         byte_8EF7:	dc.b 4
00009966 EC0A 0033 EC               		dc.b $EC, $A, 0, $33, $EC
0000996B EC05 003C 04               		dc.b $EC, 5, 0,	$3C, 4
00009970 0405 183C EC               		dc.b 4,	5, $18,	$3C, $EC
00009975 FC0A 1833 FC               		dc.b $FC, $A, $18, $33,	$FC
0000997A                            		even
0000997A                            ; ---------------------------------------------------------------------------
0000997A                            ; Sprite mappings - explosion from when	a boss is destroyed
0000997A                            ; ---------------------------------------------------------------------------
0000997A FFC4                       Map_obj3F:	dc.w byte_8ED0-Map_obj3F
0000997C 0000                       		dc.w byte_8F16-Map_obj3F
0000997E 0000                       		dc.w byte_8F1C-Map_obj3F
00009980 FFD6                       		dc.w byte_8EE2-Map_obj3F
00009982 FFEB                       		dc.w byte_8EF7-Map_obj3F
00009984 01                         byte_8F16:	dc.b 1
00009985 F00F 0040 F0               		dc.b $F0, $F, 0, $40, $F0
0000998A 01                         byte_8F1C:	dc.b 1
0000998B F00F 0050 F0               		dc.b $F0, $F, 0, $50, $F0
00009990                            		even
00009990                            ; ===========================================================================
00009990                            ; ---------------------------------------------------------------------------
00009990                            ; Object 28 - animals
00009990                            ; ---------------------------------------------------------------------------
00009990                            
00009990                            Obj28:					; XREF: Obj_Index
00009990 7000                       		moveq	#0,d0
00009992 1028 0024                  		move.b	$24(a0),d0
00009996 323B 0000                  		move.w	Obj28_Index(pc,d0.w),d1
0000999A 4EFB 1000                  		jmp	Obj28_Index(pc,d1.w)
0000999E                            ; ===========================================================================
0000999E 0000 0000                  Obj28_Index:	dc.w Obj28_Ending-Obj28_Index, loc_912A-Obj28_Index
000099A2 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_91C0-Obj28_Index
000099A6 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_9184-Obj28_Index
000099AA 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_91C0-Obj28_Index
000099AE 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_9240-Obj28_Index
000099B2 0000 0000                  		dc.w loc_9260-Obj28_Index, loc_9260-Obj28_Index
000099B6 0000 0000                  		dc.w loc_9280-Obj28_Index, loc_92BA-Obj28_Index
000099BA 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9332-Obj28_Index
000099BE 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9332-Obj28_Index
000099C2 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9370-Obj28_Index
000099C6 0000                       		dc.w loc_92D6-Obj28_Index
000099C8                            
000099C8 0005 0203 0603 0405 0401+  Obj28_VarIndex:	dc.b 0,	5, 2, 3, 6, 3, 4, 5, 4,	1, 0, 1
000099D4                            
000099D4 FE00 FC00                  Obj28_Variables:dc.w $FE00, $FC00
000099D8 0000 0000                  		dc.l Map_obj28
000099DC FE00 FD00                  		dc.w $FE00, $FD00	; horizontal speed, vertical speed
000099E0 0000 0000                  		dc.l Map_obj28a		; mappings address
000099E4 FE80 FD00                  		dc.w $FE80, $FD00
000099E8 0000 0000                  		dc.l Map_obj28
000099EC FEC0 FE80                  		dc.w $FEC0, $FE80
000099F0 0000 0000                  		dc.l Map_obj28a
000099F4 FE40 FD00                  		dc.w $FE40, $FD00
000099F8 0000 0000                  		dc.l Map_obj28b
000099FC FD00 FC00                  		dc.w $FD00, $FC00
00009A00 0000 0000                  		dc.l Map_obj28a
00009A04 FD80 FC80                  		dc.w $FD80, $FC80
00009A08 0000 0000                  		dc.l Map_obj28b
00009A0C                            
00009A0C FBC0 FC00 FBC0 FC00 FBC0+  Obj28_EndSpeed:	dc.w $FBC0, $FC00, $FBC0, $FC00, $FBC0,	$FC00, $FD00, $FC00
00009A1C FD00 FC00 FE80 FD00 FE80+  		dc.w $FD00, $FC00, $FE80, $FD00, $FE80,	$FD00, $FEC0, $FE80
00009A2C FE40 FD00 FE00 FD00 FD80+  		dc.w $FE40, $FD00, $FE00, $FD00, $FD80,	$FC80
00009A38                            
00009A38 0000 0000 0000 0000 0000+  Obj28_EndMap:	dc.l Map_obj28a, Map_obj28a, Map_obj28a, Map_obj28, Map_obj28
00009A4C 0000 0000 0000 0000 0000+  		dc.l Map_obj28,	Map_obj28, Map_obj28a, Map_obj28b, Map_obj28a
00009A60 0000 0000                  		dc.l Map_obj28b
00009A64                            
00009A64 05A5 05A5 05A5 0553 0553+  Obj28_EndVram:	dc.w $5A5, $5A5, $5A5, $553, $553, $573, $573, $585, $593
00009A76 0565 05B3                  		dc.w $565, $5B3
00009A7A                            ; ===========================================================================
00009A7A                            
00009A7A                            Obj28_Ending:				; XREF: Obj28_Index
00009A7A 4A28 0028                  		tst.b	$28(a0)		; did animal come from a destroyed enemy?
00009A7E 6700 0000                  		beq.w	Obj28_FromEnemy	; if yes, branch
00009A82 7000                       		moveq	#0,d0
00009A84 1028 0028                  		move.b	$28(a0),d0	; move object type to d0
00009A88 D040                       		add.w	d0,d0		; multiply d0 by 2
00009A8A 1140 0024                  		move.b	d0,$24(a0)	; move d0 to routine counter
00009A8E 0440 0014                  		subi.w	#$14,d0
00009A92 317B 00D0 0002             		move.w	Obj28_EndVram(pc,d0.w),2(a0)
00009A98 D040                       		add.w	d0,d0
00009A9A 217B 009C 0004             		move.l	Obj28_EndMap(pc,d0.w),4(a0)
00009AA0 43FA FF6A                  		lea	Obj28_EndSpeed(pc),a1
00009AA4 3171 0000 0032             		move.w	(a1,d0.w),$32(a0) ; load horizontal speed
00009AAA 3171 0000 0010             		move.w	(a1,d0.w),$10(a0)
00009AB0 3171 0002 0034             		move.w	2(a1,d0.w),$34(a0) ; load vertical speed
00009AB6 3171 0002 0012             		move.w	2(a1,d0.w),$12(a0)
00009ABC 117C 000C 0016             		move.b	#$C,$16(a0)
00009AC2 117C 0004 0001             		move.b	#4,1(a0)
00009AC8 08E8 0000 0001             		bset	#0,1(a0)
00009ACE 117C 0006 0018             		move.b	#6,$18(a0)
00009AD4 117C 0008 0019             		move.b	#8,$19(a0)
00009ADA 117C 0007 001E             		move.b	#7,$1E(a0)
00009AE0 6000 0000                  		bra.w	DisplaySprite
00009AE4                            ; ===========================================================================
00009AE4                            
00009AE4                            Obj28_FromEnemy:			; XREF: Obj28_Ending
00009AE4 5428 0024                  		addq.b	#2,$24(a0)
00009AE8 6100 98CA                  		bsr.w	RandomNumber
00009AEC 0240 0001                  		andi.w	#1,d0
00009AF0 7200                       		moveq	#0,d1
00009AF2 1238 FE10                  		move.b	($FFFFFE10).w,d1
00009AF6 D241                       		add.w	d1,d1
00009AF8 D240                       		add.w	d0,d1
00009AFA 43FA FECC                  		lea	Obj28_VarIndex(pc),a1
00009AFE 1031 1000                  		move.b	(a1,d1.w),d0
00009B02 1140 0030                  		move.b	d0,$30(a0)
00009B06 E748                       		lsl.w	#3,d0
00009B08 43FA FECA                  		lea	Obj28_Variables(pc),a1
00009B0C D2C0                       		adda.w	d0,a1
00009B0E 3159 0032                  		move.w	(a1)+,$32(a0)	; load horizontal speed
00009B12 3159 0034                  		move.w	(a1)+,$34(a0)	; load vertical	speed
00009B16 2159 0004                  		move.l	(a1)+,4(a0)	; load mappings
00009B1A 317C 0580 0002             		move.w	#$580,2(a0)	; VRAM setting for 1st animal
00009B20 0828 0000 0030             		btst	#0,$30(a0)	; is 1st animal	used?
00009B26 6700                       		beq.s	loc_90C0	; if yes, branch
00009B28 317C 0592 0002             		move.w	#$592,2(a0)	; VRAM setting for 2nd animal
00009B2E                            
00009B2E                            loc_90C0:
00009B2E 117C 000C 0016             		move.b	#$C,$16(a0)
00009B34 117C 0004 0001             		move.b	#4,1(a0)
00009B3A 08E8 0000 0001             		bset	#0,1(a0)
00009B40 117C 0006 0018             		move.b	#6,$18(a0)
00009B46 117C 0008 0019             		move.b	#8,$19(a0)
00009B4C 117C 0007 001E             		move.b	#7,$1E(a0)
00009B52 117C 0002 001A             		move.b	#2,$1A(a0)
00009B58 317C FC00 0012             		move.w	#-$400,$12(a0)
00009B5E 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00009B62 6600                       		bne.s	loc_911C
00009B64 6100 0000                  		bsr.w	SingleObjLoad
00009B68 6600                       		bne.s	Obj28_Display
00009B6A 12BC 0029                  		move.b	#$29,0(a1)	; load points object
00009B6E 3368 0008 0008             		move.w	8(a0),8(a1)
00009B74 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009B7A 3028 003E                  		move.w	$3E(a0),d0
00009B7E E248                       		lsr.w	#1,d0
00009B80 1340 001A                  		move.b	d0,$1A(a1)
00009B84                            
00009B84                            Obj28_Display:
00009B84 6000 0000                  		bra.w	DisplaySprite
00009B88                            ; ===========================================================================
00009B88                            
00009B88                            loc_911C:
00009B88 117C 0012 0024             		move.b	#$12,$24(a0)
00009B8E 4268 0010                  		clr.w	$10(a0)
00009B92 6000 0000                  		bra.w	DisplaySprite
00009B96                            ; ===========================================================================
00009B96                            
00009B96                            loc_912A:				; XREF: Obj28_Index
00009B96 4A28 0001                  		tst.b	1(a0)
00009B9A 6A00 0000                  		bpl.w	DeleteObject
00009B9E 6100 0000                  		bsr.w	ObjectFall
00009BA2 4A68 0012                  		tst.w	$12(a0)
00009BA6 6B00                       		bmi.s	loc_9180
00009BA8 4EB9 0000 0000             		jsr	ObjHitFloor
00009BAE 4A41                       		tst.w	d1
00009BB0 6A00                       		bpl.s	loc_9180
00009BB2 D368 000C                  		add.w	d1,$C(a0)
00009BB6 3168 0032 0010             		move.w	$32(a0),$10(a0)
00009BBC 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009BC2 117C 0001 001A             		move.b	#1,$1A(a0)
00009BC8 1028 0030                  		move.b	$30(a0),d0
00009BCC D000                       		add.b	d0,d0
00009BCE 5800                       		addq.b	#4,d0
00009BD0 1140 0024                  		move.b	d0,$24(a0)
00009BD4 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00009BD8 6700                       		beq.s	loc_9180
00009BDA 0838 0004 FE0F             		btst	#4,($FFFFFE0F).w
00009BE0 6700                       		beq.s	loc_9180
00009BE2 4468 0010                  		neg.w	$10(a0)
00009BE6 0868 0000 0001             		bchg	#0,1(a0)
00009BEC                            
00009BEC                            loc_9180:
00009BEC 6000 0000                  		bra.w	DisplaySprite
00009BF0                            ; ===========================================================================
00009BF0                            
00009BF0                            loc_9184:				; XREF: Obj28_Index
00009BF0 6100 0000                  		bsr.w	ObjectFall
00009BF4 117C 0001 001A             		move.b	#1,$1A(a0)
00009BFA 4A68 0012                  		tst.w	$12(a0)
00009BFE 6B00                       		bmi.s	loc_91AE
00009C00 117C 0000 001A             		move.b	#0,$1A(a0)
00009C06 4EB9 0000 0000             		jsr	ObjHitFloor
00009C0C 4A41                       		tst.w	d1
00009C0E 6A00                       		bpl.s	loc_91AE
00009C10 D368 000C                  		add.w	d1,$C(a0)
00009C14 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009C1A                            
00009C1A                            loc_91AE:
00009C1A 4A28 0028                  		tst.b	$28(a0)
00009C1E 6600                       		bne.s	loc_9224
00009C20 4A28 0001                  		tst.b	1(a0)
00009C24 6A00 0000                  		bpl.w	DeleteObject
00009C28 6000 0000                  		bra.w	DisplaySprite
00009C2C                            ; ===========================================================================
00009C2C                            
00009C2C                            loc_91C0:				; XREF: Obj28_Index
00009C2C 6100 0000                  		bsr.w	SpeedToPos
00009C30 0668 0018 0012             		addi.w	#$18,$12(a0)
00009C36 4A68 0012                  		tst.w	$12(a0)
00009C3A 6B00                       		bmi.s	loc_91FC
00009C3C 4EB9 0000 0000             		jsr	ObjHitFloor
00009C42 4A41                       		tst.w	d1
00009C44 6A00                       		bpl.s	loc_91FC
00009C46 D368 000C                  		add.w	d1,$C(a0)
00009C4A 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009C50 4A28 0028                  		tst.b	$28(a0)
00009C54 6700                       		beq.s	loc_91FC
00009C56 0C28 000A 0028             		cmpi.b	#$A,$28(a0)
00009C5C 6700                       		beq.s	loc_91FC
00009C5E 4468 0010                  		neg.w	$10(a0)
00009C62 0868 0000 0001             		bchg	#0,1(a0)
00009C68                            
00009C68                            loc_91FC:
00009C68 5328 001E                  		subq.b	#1,$1E(a0)
00009C6C 6A00                       		bpl.s	loc_9212
00009C6E 117C 0001 001E             		move.b	#1,$1E(a0)
00009C74 5228 001A                  		addq.b	#1,$1A(a0)
00009C78 0228 0001 001A             		andi.b	#1,$1A(a0)
00009C7E                            
00009C7E                            loc_9212:
00009C7E 4A28 0028                  		tst.b	$28(a0)
00009C82 6600                       		bne.s	loc_9224
00009C84 4A28 0001                  		tst.b	1(a0)
00009C88 6A00 0000                  		bpl.w	DeleteObject
00009C8C 6000 0000                  		bra.w	DisplaySprite
00009C90                            ; ===========================================================================
00009C90                            
00009C90                            loc_9224:				; XREF: Obj28_Index
00009C90 3028 0008                  		move.w	8(a0),d0
00009C94 9078 D008                  		sub.w	($FFFFD008).w,d0
00009C98 6500                       		bcs.s	loc_923C
00009C9A 0440 0180                  		subi.w	#$180,d0
00009C9E 6A00                       		bpl.s	loc_923C
00009CA0 4A28 0001                  		tst.b	1(a0)
00009CA4 6A00 0000                  		bpl.w	DeleteObject
00009CA8                            
00009CA8                            loc_923C:
00009CA8 6000 0000                  		bra.w	DisplaySprite
00009CAC                            ; ===========================================================================
00009CAC                            
00009CAC                            loc_9240:				; XREF: Obj28_Index
00009CAC 4A28 0001                  		tst.b	1(a0)
00009CB0 6A00 0000                  		bpl.w	DeleteObject
00009CB4 5368 0036                  		subq.w	#1,$36(a0)
00009CB8 6600 0000                  		bne.w	loc_925C
00009CBC 117C 0002 0024             		move.b	#2,$24(a0)
00009CC2 117C 0003 0018             		move.b	#3,$18(a0)
00009CC8                            
00009CC8                            loc_925C:
00009CC8 6000 0000                  		bra.w	DisplaySprite
00009CCC                            ; ===========================================================================
00009CCC                            
00009CCC                            loc_9260:				; XREF: Obj28_Index
00009CCC 6100 0000                  		bsr.w	sub_9404
00009CD0 6400                       		bcc.s	loc_927C
00009CD2 3168 0032 0010             		move.w	$32(a0),$10(a0)
00009CD8 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009CDE 117C 000E 0024             		move.b	#$E,$24(a0)
00009CE4 6000 FF46                  		bra.w	loc_91C0
00009CE8                            ; ===========================================================================
00009CE8                            
00009CE8                            loc_927C:
00009CE8 6000 FFA6                  		bra.w	loc_9224
00009CEC                            ; ===========================================================================
00009CEC                            
00009CEC                            loc_9280:				; XREF: Obj28_Index
00009CEC 6100 0000                  		bsr.w	sub_9404
00009CF0 6A00                       		bpl.s	loc_92B6
00009CF2 4268 0010                  		clr.w	$10(a0)
00009CF6 4268 0032                  		clr.w	$32(a0)
00009CFA 6100 0000                  		bsr.w	SpeedToPos
00009CFE 0668 0018 0012             		addi.w	#$18,$12(a0)
00009D04 6100 0000                  		bsr.w	loc_93C4
00009D08 6100 0000                  		bsr.w	loc_93EC
00009D0C 5328 001E                  		subq.b	#1,$1E(a0)
00009D10 6A00                       		bpl.s	loc_92B6
00009D12 117C 0001 001E             		move.b	#1,$1E(a0)
00009D18 5228 001A                  		addq.b	#1,$1A(a0)
00009D1C 0228 0001 001A             		andi.b	#1,$1A(a0)
00009D22                            
00009D22                            loc_92B6:
00009D22 6000 FF6C                  		bra.w	loc_9224
00009D26                            ; ===========================================================================
00009D26                            
00009D26                            loc_92BA:				; XREF: Obj28_Index
00009D26 6100 0000                  		bsr.w	sub_9404
00009D2A 6A00                       		bpl.s	loc_9310
00009D2C 3168 0032 0010             		move.w	$32(a0),$10(a0)
00009D32 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009D38 117C 0004 0024             		move.b	#4,$24(a0)
00009D3E 6000 FEB0                  		bra.w	loc_9184
00009D42                            ; ===========================================================================
00009D42                            
00009D42                            loc_92D6:				; XREF: Obj28_Index
00009D42 6100 0000                  		bsr.w	ObjectFall
00009D46 117C 0001 001A             		move.b	#1,$1A(a0)
00009D4C 4A68 0012                  		tst.w	$12(a0)
00009D50 6B00                       		bmi.s	loc_9310
00009D52 117C 0000 001A             		move.b	#0,$1A(a0)
00009D58 4EB9 0000 0000             		jsr	ObjHitFloor
00009D5E 4A41                       		tst.w	d1
00009D60 6A00                       		bpl.s	loc_9310
00009D62 4628 0029                  		not.b	$29(a0)
00009D66 6600                       		bne.s	loc_9306
00009D68 4468 0010                  		neg.w	$10(a0)
00009D6C 0868 0000 0001             		bchg	#0,1(a0)
00009D72                            
00009D72                            loc_9306:
00009D72 D368 000C                  		add.w	d1,$C(a0)
00009D76 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009D7C                            
00009D7C                            loc_9310:
00009D7C 6000 FF12                  		bra.w	loc_9224
00009D80                            ; ===========================================================================
00009D80                            
00009D80                            loc_9314:				; XREF: Obj28_Index
00009D80 6100 0000                  		bsr.w	sub_9404
00009D84 6A00                       		bpl.s	loc_932E
00009D86 4268 0010                  		clr.w	$10(a0)
00009D8A 4268 0032                  		clr.w	$32(a0)
00009D8E 6100 0000                  		bsr.w	ObjectFall
00009D92 6100 0000                  		bsr.w	loc_93C4
00009D96 6100 0000                  		bsr.w	loc_93EC
00009D9A                            
00009D9A                            loc_932E:
00009D9A 6000 FEF4                  		bra.w	loc_9224
00009D9E                            ; ===========================================================================
00009D9E                            
00009D9E                            loc_9332:				; XREF: Obj28_Index
00009D9E 6100 0000                  		bsr.w	sub_9404
00009DA2 6A00                       		bpl.s	loc_936C
00009DA4 6100 0000                  		bsr.w	ObjectFall
00009DA8 117C 0001 001A             		move.b	#1,$1A(a0)
00009DAE 4A68 0012                  		tst.w	$12(a0)
00009DB2 6B00                       		bmi.s	loc_936C
00009DB4 117C 0000 001A             		move.b	#0,$1A(a0)
00009DBA 4EB9 0000 0000             		jsr	ObjHitFloor
00009DC0 4A41                       		tst.w	d1
00009DC2 6A00                       		bpl.s	loc_936C
00009DC4 4468 0010                  		neg.w	$10(a0)
00009DC8 0868 0000 0001             		bchg	#0,1(a0)
00009DCE D368 000C                  		add.w	d1,$C(a0)
00009DD2 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009DD8                            
00009DD8                            loc_936C:
00009DD8 6000 FEB6                  		bra.w	loc_9224
00009DDC                            ; ===========================================================================
00009DDC                            
00009DDC                            loc_9370:				; XREF: Obj28_Index
00009DDC 6100 0000                  		bsr.w	sub_9404
00009DE0 6A00                       		bpl.s	loc_93C0
00009DE2 6100 0000                  		bsr.w	SpeedToPos
00009DE6 0668 0018 0012             		addi.w	#$18,$12(a0)
00009DEC 4A68 0012                  		tst.w	$12(a0)
00009DF0 6B00                       		bmi.s	loc_93AA
00009DF2 4EB9 0000 0000             		jsr	ObjHitFloor
00009DF8 4A41                       		tst.w	d1
00009DFA 6A00                       		bpl.s	loc_93AA
00009DFC 4628 0029                  		not.b	$29(a0)
00009E00 6600                       		bne.s	loc_93A0
00009E02 4468 0010                  		neg.w	$10(a0)
00009E06 0868 0000 0001             		bchg	#0,1(a0)
00009E0C                            
00009E0C                            loc_93A0:
00009E0C D368 000C                  		add.w	d1,$C(a0)
00009E10 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009E16                            
00009E16                            loc_93AA:
00009E16 5328 001E                  		subq.b	#1,$1E(a0)
00009E1A 6A00                       		bpl.s	loc_93C0
00009E1C 117C 0001 001E             		move.b	#1,$1E(a0)
00009E22 5228 001A                  		addq.b	#1,$1A(a0)
00009E26 0228 0001 001A             		andi.b	#1,$1A(a0)
00009E2C                            
00009E2C                            loc_93C0:
00009E2C 6000 FE62                  		bra.w	loc_9224
00009E30                            ; ===========================================================================
00009E30                            
00009E30                            loc_93C4:
00009E30 117C 0001 001A             		move.b	#1,$1A(a0)
00009E36 4A68 0012                  		tst.w	$12(a0)
00009E3A 6B00                       		bmi.s	locret_93EA
00009E3C 117C 0000 001A             		move.b	#0,$1A(a0)
00009E42 4EB9 0000 0000             		jsr	ObjHitFloor
00009E48 4A41                       		tst.w	d1
00009E4A 6A00                       		bpl.s	locret_93EA
00009E4C D368 000C                  		add.w	d1,$C(a0)
00009E50 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009E56                            
00009E56                            locret_93EA:
00009E56 4E75                       		rts	
00009E58                            ; ===========================================================================
00009E58                            
00009E58                            loc_93EC:
00009E58 08E8 0000 0001             		bset	#0,1(a0)
00009E5E 3028 0008                  		move.w	8(a0),d0
00009E62 9078 D008                  		sub.w	($FFFFD008).w,d0
00009E66 6400                       		bcc.s	locret_9402
00009E68 08A8 0000 0001             		bclr	#0,1(a0)
00009E6E                            
00009E6E                            locret_9402:
00009E6E 4E75                       		rts	
00009E70                            
00009E70                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009E70                            
00009E70                            
00009E70                            sub_9404:
00009E70 3038 D008                  		move.w	($FFFFD008).w,d0
00009E74 9068 0008                  		sub.w	8(a0),d0
00009E78 0440 00B8                  		subi.w	#$B8,d0
00009E7C 4E75                       		rts	
00009E7E                            ; End of function sub_9404
00009E7E                            
00009E7E                            ; ===========================================================================
00009E7E                            ; ---------------------------------------------------------------------------
00009E7E                            ; Object 29 - points that appear when you destroy something
00009E7E                            ; ---------------------------------------------------------------------------
00009E7E                            
00009E7E                            Obj29:					; XREF: Obj_Index
00009E7E 7000                       		moveq	#0,d0
00009E80 1028 0024                  		move.b	$24(a0),d0
00009E84 323B 0000                  		move.w	Obj29_Index(pc,d0.w),d1
00009E88 4EBB 1000                  		jsr	Obj29_Index(pc,d1.w)
00009E8C 6000 0000                  		bra.w	DisplaySprite
00009E90                            ; ===========================================================================
00009E90 0000                       Obj29_Index:	dc.w Obj29_Main-Obj29_Index
00009E92 0000                       		dc.w Obj29_Slower-Obj29_Index
00009E94                            ; ===========================================================================
00009E94                            
00009E94                            Obj29_Main:				; XREF: Obj29_Index
00009E94 5428 0024                  		addq.b	#2,$24(a0)
00009E98 217C 0000 0000 0004        		move.l	#Map_obj29,4(a0)
00009EA0 317C 2797 0002             		move.w	#$2797,2(a0)
00009EA6 117C 0004 0001             		move.b	#4,1(a0)
00009EAC 117C 0001 0018             		move.b	#1,$18(a0)
00009EB2 117C 0008 0019             		move.b	#8,$19(a0)
00009EB8 317C FD00 0012             		move.w	#-$300,$12(a0)	; move object upwards
00009EBE                            
00009EBE                            Obj29_Slower:				; XREF: Obj29_Index
00009EBE 4A68 0012                  		tst.w	$12(a0)		; is object moving?
00009EC2 6A00 0000                  		bpl.w	DeleteObject	; if not, branch
00009EC6 6100 0000                  		bsr.w	SpeedToPos
00009ECA 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce object	speed
00009ED0 4E75                       		rts	
00009ED2                            ; ===========================================================================
00009ED2                            ; ---------------------------------------------------------------------------
00009ED2                            ; Sprite mappings - animals
00009ED2                            ; ---------------------------------------------------------------------------
00009ED2                            Map_obj28:
00009ED2                            	include "_maps\obj28.asm"
00009ED2                            ; ---------------------------------------------------------------------------
00009ED2                            ; Sprite mappings - animals
00009ED2                            ; ---------------------------------------------------------------------------
00009ED2 0000                       		dc.w byte_9472-Map_obj28
00009ED4 0000                       		dc.w byte_9478-Map_obj28
00009ED6 0000                       		dc.w byte_946C-Map_obj28
00009ED8 01                         byte_946C:	dc.b 1
00009ED9 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
00009EDE 01                         byte_9472:	dc.b 1
00009EDF F406 0006 F8               		dc.b $F4, 6, 0,	6, $F8
00009EE4 01                         byte_9478:	dc.b 1
00009EE5 F406 000C F8               		dc.b $F4, 6, 0,	$C, $F8
00009EEA                            		even
00009EEA                            		even
00009EEA                            
00009EEA                            Map_obj28a:
00009EEA                            	include "_maps\obj28a.asm"
00009EEA                            ; ---------------------------------------------------------------------------
00009EEA                            ; Sprite mappings - animals
00009EEA                            ; ---------------------------------------------------------------------------
00009EEA 0000                       		dc.w byte_948A-Map_obj28a
00009EEC 0000                       		dc.w byte_9490-Map_obj28a
00009EEE 0000                       		dc.w byte_9484-Map_obj28a
00009EF0 01                         byte_9484:	dc.b 1
00009EF1 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
00009EF6 01                         byte_948A:	dc.b 1
00009EF7 FC05 0006 F8               		dc.b $FC, 5, 0,	6, $F8
00009EFC 01                         byte_9490:	dc.b 1
00009EFD FC05 000A F8               		dc.b $FC, 5, 0,	$A, $F8
00009F02                            		even
00009F02                            		even
00009F02                            
00009F02                            Map_obj28b:
00009F02                            	include "_maps\obj28b.asm"
00009F02                            ; ---------------------------------------------------------------------------
00009F02                            ; Sprite mappings - animals
00009F02                            ; ---------------------------------------------------------------------------
00009F02 0000                       		dc.w byte_94A2-Map_obj28b
00009F04 0000                       		dc.w byte_94A8-Map_obj28b
00009F06 0000                       		dc.w byte_949C-Map_obj28b
00009F08 01                         byte_949C:	dc.b 1
00009F09 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
00009F0E 01                         byte_94A2:	dc.b 1
00009F0F FC09 0006 F4               		dc.b $FC, 9, 0,	6, $F4
00009F14 01                         byte_94A8:	dc.b 1
00009F15 FC09 000C F4               		dc.b $FC, 9, 0,	$C, $F4
00009F1A                            		even
00009F1A                            		even
00009F1A                            
00009F1A                            ; ---------------------------------------------------------------------------
00009F1A                            ; Sprite mappings - points that	appear when you	destroy	something
00009F1A                            ; ---------------------------------------------------------------------------
00009F1A                            Map_obj29:
00009F1A                            	include "_maps\obj29.asm"
00009F1A                            ; ---------------------------------------------------------------------------
00009F1A                            ; Sprite mappings - points that	appear when you	destroy	something
00009F1A                            ; ---------------------------------------------------------------------------
00009F1A 0000 0000                  		dc.w byte_94BC-Map_obj29, byte_94C2-Map_obj29
00009F1E 0000 0000                  		dc.w byte_94C8-Map_obj29, byte_94CE-Map_obj29
00009F22 0000 0000                  		dc.w byte_94D4-Map_obj29, byte_94DA-Map_obj29
00009F26 0000                       		dc.w byte_94E5-Map_obj29
00009F28 01                         byte_94BC:	dc.b 1
00009F29 FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8	; 100 points
00009F2E 01                         byte_94C2:	dc.b 1
00009F2F FC04 0002 F8               		dc.b $FC, 4, 0,	2, $F8	; 200 points
00009F34 01                         byte_94C8:	dc.b 1
00009F35 FC04 0004 F8               		dc.b $FC, 4, 0,	4, $F8	; 500 points
00009F3A 01                         byte_94CE:	dc.b 1
00009F3B FC08 0006 F8               		dc.b $FC, 8, 0,	6, $F8	; 1000 points
00009F40 01                         byte_94D4:	dc.b 1
00009F41 FC00 0006 FC               		dc.b $FC, 0, 0,	6, $FC	; 10 points
00009F46 02                         byte_94DA:	dc.b 2
00009F47 FC08 0006 F4               		dc.b $FC, 8, 0,	6, $F4	; 10,000 points
00009F4C FC04 0007 01               		dc.b $FC, 4, 0,	7, 1
00009F51 02                         byte_94E5:	dc.b 2
00009F52 FC08 0006 F4               		dc.b $FC, 8, 0,	6, $F4	; 100,000 points
00009F57 FC04 0007 06               		dc.b $FC, 4, 0,	7, 6
00009F5C                            		even
00009F5C                            		even
00009F5C                            
00009F5C                            ; ===========================================================================
00009F5C                            ; ---------------------------------------------------------------------------
00009F5C                            ; Object 1F - Crabmeat enemy (GHZ, SYZ)
00009F5C                            ; ---------------------------------------------------------------------------
00009F5C                            
00009F5C                            Obj1F:					; XREF: Obj_Index
00009F5C 7000                       		moveq	#0,d0
00009F5E 1028 0024                  		move.b	$24(a0),d0
00009F62 323B 0000                  		move.w	Obj1F_Index(pc,d0.w),d1
00009F66 4EFB 1000                  		jmp	Obj1F_Index(pc,d1.w)
00009F6A                            ; ===========================================================================
00009F6A 0000                       Obj1F_Index:	dc.w Obj1F_Main-Obj1F_Index
00009F6C 0000                       		dc.w Obj1F_Action-Obj1F_Index
00009F6E 0000                       		dc.w Obj1F_Delete-Obj1F_Index
00009F70 0000                       		dc.w Obj1F_BallMain-Obj1F_Index
00009F72 0000                       		dc.w Obj1F_BallMove-Obj1F_Index
00009F74                            ; ===========================================================================
00009F74                            
00009F74                            Obj1F_Main:				; XREF: Obj1F_Index
00009F74 117C 0010 0016             		move.b	#$10,$16(a0)
00009F7A 117C 0008 0017             		move.b	#8,$17(a0)
00009F80 217C 0000 0000 0004        		move.l	#Map_obj1F,4(a0)
00009F88 317C 0400 0002             		move.w	#$400,2(a0)
00009F8E 117C 0004 0001             		move.b	#4,1(a0)
00009F94 117C 0003 0018             		move.b	#3,$18(a0)
00009F9A 117C 0006 0020             		move.b	#6,$20(a0)
00009FA0 117C 0015 0019             		move.b	#$15,$19(a0)
00009FA6 6100 0000                  		bsr.w	ObjectFall
00009FAA 4EB9 0000 0000             		jsr	ObjHitFloor
00009FB0 4A41                       		tst.w	d1
00009FB2 6A00                       		bpl.s	locret_955A
00009FB4 D368 000C                  		add.w	d1,$C(a0)
00009FB8 1143 0026                  		move.b	d3,$26(a0)
00009FBC 317C 0000 0012             		move.w	#0,$12(a0)
00009FC2 5428 0024                  		addq.b	#2,$24(a0)
00009FC6                            
00009FC6                            locret_955A:
00009FC6 4E75                       		rts	
00009FC8                            ; ===========================================================================
00009FC8                            
00009FC8                            Obj1F_Action:				; XREF: Obj1F_Index
00009FC8 7000                       		moveq	#0,d0
00009FCA 1028 0025                  		move.b	$25(a0),d0
00009FCE 323B 0000                  		move.w	Obj1F_Index2(pc,d0.w),d1
00009FD2 4EBB 1000                  		jsr	Obj1F_Index2(pc,d1.w)
00009FD6 43F9 0000 0000             		lea	(Ani_obj1F).l,a1
00009FDC 6100 0000                  		bsr.w	AnimateSprite
00009FE0 6000 0000                  		bra.w	MarkObjGone
00009FE4                            ; ===========================================================================
00009FE4 0000                       Obj1F_Index2:	dc.w Obj1F_WaitFire-Obj1F_Index2
00009FE6 0000                       		dc.w Obj1F_WalkOnFloor-Obj1F_Index2
00009FE8                            ; ===========================================================================
00009FE8                            
00009FE8                            Obj1F_WaitFire:				; XREF: Obj1F_Index2
00009FE8 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00009FEC 6A00                       		bpl.s	locret_95B6
00009FEE 4A28 0001                  		tst.b	1(a0)
00009FF2 6A00                       		bpl.s	Obj1F_Move
00009FF4 0868 0001 0032             		bchg	#1,$32(a0)
00009FFA 6600                       		bne.s	Obj1F_MakeFire
00009FFC                            
00009FFC                            Obj1F_Move:
00009FFC 5428 0025                  		addq.b	#2,$25(a0)
0000A000 317C 007F 0030             		move.w	#127,$30(a0)	; set time delay to approx 2 seconds
0000A006 317C 0080 0010             		move.w	#$80,$10(a0)	; move Crabmeat	to the right
0000A00C 6100 0000                  		bsr.w	Obj1F_SetAni
0000A010 5600                       		addq.b	#3,d0
0000A012 1140 001C                  		move.b	d0,$1C(a0)
0000A016 0868 0000 0022             		bchg	#0,$22(a0)
0000A01C 6600                       		bne.s	locret_95B6
0000A01E 4468 0010                  		neg.w	$10(a0)		; change direction
0000A022                            
0000A022                            locret_95B6:
0000A022 4E75                       		rts	
0000A024                            ; ===========================================================================
0000A024                            
0000A024                            Obj1F_MakeFire:				; XREF: Obj1F_WaitFire
0000A024 317C 003B 0030             		move.w	#$3B,$30(a0)
0000A02A 117C 0006 001C             		move.b	#6,$1C(a0)	; use firing animation
0000A030 6100 0000                  		bsr.w	SingleObjLoad
0000A034 6600                       		bne.s	Obj1F_MakeFire2
0000A036 12BC 001F                  		move.b	#$1F,0(a1)	; load left fireball
0000A03A 137C 0006 0024             		move.b	#6,$24(a1)
0000A040 3368 0008 0008             		move.w	8(a0),8(a1)
0000A046 0469 0010 0008             		subi.w	#$10,8(a1)
0000A04C 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A052 337C FF00 0010             		move.w	#-$100,$10(a1)
0000A058                            
0000A058                            Obj1F_MakeFire2:
0000A058 6100 0000                  		bsr.w	SingleObjLoad
0000A05C 6600                       		bne.s	locret_9618
0000A05E 12BC 001F                  		move.b	#$1F,0(a1)	; load right fireball
0000A062 137C 0006 0024             		move.b	#6,$24(a1)
0000A068 3368 0008 0008             		move.w	8(a0),8(a1)
0000A06E 0669 0010 0008             		addi.w	#$10,8(a1)
0000A074 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A07A 337C 0100 0010             		move.w	#$100,$10(a1)
0000A080                            
0000A080                            locret_9618:
0000A080 4E75                       		rts	
0000A082                            ; ===========================================================================
0000A082                            
0000A082                            Obj1F_WalkOnFloor:			; XREF: Obj1F_Index2
0000A082 5368 0030                  		subq.w	#1,$30(a0)
0000A086 6B00                       		bmi.s	loc_966E
0000A088 6100 0000                  		bsr.w	SpeedToPos
0000A08C 0868 0000 0032             		bchg	#0,$32(a0)
0000A092 6600                       		bne.s	loc_9654
0000A094 3628 0008                  		move.w	8(a0),d3
0000A098 0643 0010                  		addi.w	#$10,d3
0000A09C 0828 0000 0022             		btst	#0,$22(a0)
0000A0A2 6700                       		beq.s	loc_9640
0000A0A4 0443 0020                  		subi.w	#$20,d3
0000A0A8                            
0000A0A8                            loc_9640:
0000A0A8 4EB9 0000 0000             		jsr	ObjHitFloor2
0000A0AE 0C41 FFF8                  		cmpi.w	#-8,d1
0000A0B2 6D00                       		blt.s	loc_966E
0000A0B4 0C41 000C                  		cmpi.w	#$C,d1
0000A0B8 6C00                       		bge.s	loc_966E
0000A0BA 4E75                       		rts	
0000A0BC                            ; ===========================================================================
0000A0BC                            
0000A0BC                            loc_9654:				; XREF: Obj1F_WalkOnFloor
0000A0BC 4EB9 0000 0000             		jsr	ObjHitFloor
0000A0C2 D368 000C                  		add.w	d1,$C(a0)
0000A0C6 1143 0026                  		move.b	d3,$26(a0)
0000A0CA 6100 0000                  		bsr.w	Obj1F_SetAni
0000A0CE 5600                       		addq.b	#3,d0
0000A0D0 1140 001C                  		move.b	d0,$1C(a0)
0000A0D4 4E75                       		rts	
0000A0D6                            ; ===========================================================================
0000A0D6                            
0000A0D6                            loc_966E:				; XREF: Obj1F_WalkOnFloor
0000A0D6 5528 0025                  		subq.b	#2,$25(a0)
0000A0DA 317C 003B 0030             		move.w	#59,$30(a0)
0000A0E0 317C 0000 0010             		move.w	#0,$10(a0)
0000A0E6 6100 0000                  		bsr.w	Obj1F_SetAni
0000A0EA 1140 001C                  		move.b	d0,$1C(a0)
0000A0EE 4E75                       		rts	
0000A0F0                            ; ---------------------------------------------------------------------------
0000A0F0                            ; Subroutine to	set the	correct	animation for a	Crabmeat
0000A0F0                            ; ---------------------------------------------------------------------------
0000A0F0                            
0000A0F0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A0F0                            
0000A0F0                            
0000A0F0                            Obj1F_SetAni:				; XREF: loc_966E
0000A0F0 7000                       		moveq	#0,d0
0000A0F2 1628 0026                  		move.b	$26(a0),d3
0000A0F6 6B00                       		bmi.s	loc_96A4
0000A0F8 0C03 0006                  		cmpi.b	#6,d3
0000A0FC 6500                       		bcs.s	locret_96A2
0000A0FE 7001                       		moveq	#1,d0
0000A100 0828 0000 0022             		btst	#0,$22(a0)
0000A106 6600                       		bne.s	locret_96A2
0000A108 7002                       		moveq	#2,d0
0000A10A                            
0000A10A                            locret_96A2:
0000A10A 4E75                       		rts	
0000A10C                            ; ===========================================================================
0000A10C                            
0000A10C                            loc_96A4:				; XREF: Obj1F_SetAni
0000A10C 0C03 00FA                  		cmpi.b	#-6,d3
0000A110 6200                       		bhi.s	locret_96B6
0000A112 7002                       		moveq	#2,d0
0000A114 0828 0000 0022             		btst	#0,$22(a0)
0000A11A 6600                       		bne.s	locret_96B6
0000A11C 7001                       		moveq	#1,d0
0000A11E                            
0000A11E                            locret_96B6:
0000A11E 4E75                       		rts	
0000A120                            ; End of function Obj1F_SetAni
0000A120                            
0000A120                            ; ===========================================================================
0000A120                            
0000A120                            Obj1F_Delete:				; XREF: Obj1F_Index
0000A120 6100 0000                  		bsr.w	DeleteObject
0000A124 4E75                       		rts	
0000A126                            ; ===========================================================================
0000A126                            ; ---------------------------------------------------------------------------
0000A126                            ; Sub-object - missile that the	Crabmeat throws
0000A126                            ; ---------------------------------------------------------------------------
0000A126                            
0000A126                            Obj1F_BallMain:				; XREF: Obj1F_Index
0000A126 5428 0024                  		addq.b	#2,$24(a0)
0000A12A 217C 0000 0000 0004        		move.l	#Map_obj1F,4(a0)
0000A132 317C 0400 0002             		move.w	#$400,2(a0)
0000A138 117C 0004 0001             		move.b	#4,1(a0)
0000A13E 117C 0003 0018             		move.b	#3,$18(a0)
0000A144 117C 0087 0020             		move.b	#$87,$20(a0)
0000A14A 117C 0008 0019             		move.b	#8,$19(a0)
0000A150 317C FC00 0012             		move.w	#-$400,$12(a0)
0000A156 117C 0007 001C             		move.b	#7,$1C(a0)
0000A15C                            
0000A15C                            Obj1F_BallMove:				; XREF: Obj1F_Index
0000A15C 43F9 0000 0000             		lea	(Ani_obj1F).l,a1
0000A162 6100 0000                  		bsr.w	AnimateSprite
0000A166 6100 0000                  		bsr.w	ObjectFall
0000A16A 6100 0000                  		bsr.w	DisplaySprite
0000A16E 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000A172 0640 00E0                  		addi.w	#$E0,d0
0000A176 B068 000C                  		cmp.w	$C(a0),d0	; has object moved below the level boundary?
0000A17A 6500                       		bcs.s	Obj1F_Delete2	; if yes, branch
0000A17C 4E75                       		rts	
0000A17E                            ; ===========================================================================
0000A17E                            
0000A17E                            Obj1F_Delete2:
0000A17E 6000 0000                  		bra.w	DeleteObject
0000A182                            ; ===========================================================================
0000A182                            Ani_obj1F:
0000A182                            	include "_anim\obj1F.asm"
0000A182                            ; ---------------------------------------------------------------------------
0000A182                            ; Animation script - Crabmeat enemy
0000A182                            ; ---------------------------------------------------------------------------
0000A182 0000 0000 0000             		dc.w byte_972A-Ani_obj1F, byte_972E-Ani_obj1F, byte_9732-Ani_obj1F
0000A188 0000 0000 0000             		dc.w byte_9736-Ani_obj1F, byte_973C-Ani_obj1F, byte_9742-Ani_obj1F
0000A18E 0000 0000                  		dc.w byte_9748-Ani_obj1F, byte_974C-Ani_obj1F
0000A192 0F00 FF00                  byte_972A:	dc.b $F, 0, $FF, 0
0000A196 0F02 FF00                  byte_972E:	dc.b $F, 2, $FF, 0
0000A19A 0F22 FF00                  byte_9732:	dc.b $F, $22, $FF, 0
0000A19E 0F01 2100 FF00             byte_9736:	dc.b $F, 1, $21, 0, $FF, 0
0000A1A4 0F21 0302 FF00             byte_973C:	dc.b $F, $21, 3, 2, $FF, 0
0000A1AA 0F01 2322 FF00             byte_9742:	dc.b $F, 1, $23, $22, $FF, 0
0000A1B0 0F04 FF00                  byte_9748:	dc.b $F, 4, $FF, 0
0000A1B4 0105 06FF                  byte_974C:	dc.b 1,	5, 6, $FF
0000A1B8                            		even
0000A1B8                            		even
0000A1B8                            
0000A1B8                            ; ---------------------------------------------------------------------------
0000A1B8                            ; Sprite mappings - Crabmeat enemy (GHZ, SYZ)
0000A1B8                            ; ---------------------------------------------------------------------------
0000A1B8                            Map_obj1F:
0000A1B8                            	include "_maps\obj1F.asm"
0000A1B8                            ; ---------------------------------------------------------------------------
0000A1B8                            ; Sprite mappings - Crabmeat enemy (GHZ, SYZ)
0000A1B8                            ; ---------------------------------------------------------------------------
0000A1B8 0000 0000                  		dc.w byte_975E-Map_obj1F, byte_9773-Map_obj1F
0000A1BC 0000 0000                  		dc.w byte_9788-Map_obj1F, byte_979D-Map_obj1F
0000A1C0 0000 0000                  		dc.w byte_97B2-Map_obj1F, byte_97D1-Map_obj1F
0000A1C4 0000                       		dc.w byte_97D7-Map_obj1F
0000A1C6 04                         byte_975E:	dc.b 4
0000A1C7 F009 0000 E8               		dc.b $F0, 9, 0,	0, $E8
0000A1CC F009 0800 00               		dc.b $F0, 9, 8,	0, 0
0000A1D1 0005 0006 F0               		dc.b 0,	5, 0, 6, $F0
0000A1D6 0005 0806 00               		dc.b 0,	5, 8, 6, 0
0000A1DB 04                         byte_9773:	dc.b 4
0000A1DC F009 000A E8               		dc.b $F0, 9, 0,	$A, $E8
0000A1E1 F009 0010 00               		dc.b $F0, 9, 0,	$10, 0
0000A1E6 0005 0016 F0               		dc.b 0,	5, 0, $16, $F0
0000A1EB 0009 001A 00               		dc.b 0,	9, 0, $1A, 0
0000A1F0 04                         byte_9788:	dc.b 4
0000A1F1 EC09 0000 E8               		dc.b $EC, 9, 0,	0, $E8
0000A1F6 EC09 0800 00               		dc.b $EC, 9, 8,	0, 0
0000A1FB FC05 0806 00               		dc.b $FC, 5, 8,	6, 0
0000A200 FC06 0020 F0               		dc.b $FC, 6, 0,	$20, $F0
0000A205 04                         byte_979D:	dc.b 4
0000A206 EC09 000A E8               		dc.b $EC, 9, 0,	$A, $E8
0000A20B EC09 0010 00               		dc.b $EC, 9, 0,	$10, 0
0000A210 FC09 0026 00               		dc.b $FC, 9, 0,	$26, 0
0000A215 FC06 002C F0               		dc.b $FC, 6, 0,	$2C, $F0
0000A21A 06                         byte_97B2:	dc.b 6
0000A21B F004 0032 F0               		dc.b $F0, 4, 0,	$32, $F0
0000A220 F004 0832 00               		dc.b $F0, 4, 8,	$32, 0
0000A225 F809 0034 E8               		dc.b $F8, 9, 0,	$34, $E8
0000A22A F809 0834 00               		dc.b $F8, 9, 8,	$34, 0
0000A22F 0804 003A F0               		dc.b 8,	4, 0, $3A, $F0
0000A234 0804 083A 00               		dc.b 8,	4, 8, $3A, 0
0000A239 01                         byte_97D1:	dc.b 1
0000A23A F805 003C F8               		dc.b $F8, 5, 0,	$3C, $F8
0000A23F 01                         byte_97D7:	dc.b 1
0000A240 F805 0040 F8               		dc.b $F8, 5, 0,	$40, $F8
0000A246 00                         		even
0000A246 00                         		even
0000A246                            
0000A246                            ; ===========================================================================
0000A246                            ; ---------------------------------------------------------------------------
0000A246                            ; Object 22 - Buzz Bomber enemy	(GHZ, MZ, SYZ)
0000A246                            ; ---------------------------------------------------------------------------
0000A246                            
0000A246                            Obj22:					; XREF: Obj_Index
0000A246 7000                       		moveq	#0,d0
0000A248 1028 0024                  		move.b	$24(a0),d0
0000A24C 323B 0000                  		move.w	Obj22_Index(pc,d0.w),d1
0000A250 4EFB 1000                  		jmp	Obj22_Index(pc,d1.w)
0000A254                            ; ===========================================================================
0000A254 0000                       Obj22_Index:	dc.w Obj22_Main-Obj22_Index
0000A256 0000                       		dc.w Obj22_Action-Obj22_Index
0000A258 0000                       		dc.w Obj22_Delete-Obj22_Index
0000A25A                            ; ===========================================================================
0000A25A                            
0000A25A                            Obj22_Main:				; XREF: Obj22_Index
0000A25A 5428 0024                  		addq.b	#2,$24(a0)
0000A25E 217C 0000 0000 0004        		move.l	#Map_obj22,4(a0)
0000A266 317C 0444 0002             		move.w	#$444,2(a0)
0000A26C 117C 0004 0001             		move.b	#4,1(a0)
0000A272 117C 0003 0018             		move.b	#3,$18(a0)
0000A278 117C 0008 0020             		move.b	#8,$20(a0)
0000A27E 117C 0018 0019             		move.b	#$18,$19(a0)
0000A284                            
0000A284                            Obj22_Action:				; XREF: Obj22_Index
0000A284 7000                       		moveq	#0,d0
0000A286 1028 0025                  		move.b	$25(a0),d0
0000A28A 323B 0000                  		move.w	Obj22_Index2(pc,d0.w),d1
0000A28E 4EBB 1000                  		jsr	Obj22_Index2(pc,d1.w)
0000A292 43F9 0000 0000             		lea	(Ani_obj22).l,a1
0000A298 6100 0000                  		bsr.w	AnimateSprite
0000A29C 6000 0000                  		bra.w	MarkObjGone
0000A2A0                            ; ===========================================================================
0000A2A0 0000                       Obj22_Index2:	dc.w Obj22_Move-Obj22_Index2
0000A2A2 0000                       		dc.w Obj22_ChkNrSonic-Obj22_Index2
0000A2A4                            ; ===========================================================================
0000A2A4                            
0000A2A4                            Obj22_Move:				; XREF: Obj22_Index2
0000A2A4 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
0000A2A8 6A00                       		bpl.s	locret_986C	; if time remains, branch
0000A2AA 0828 0001 0034             		btst	#1,$34(a0)	; is Buzz Bomber near Sonic?
0000A2B0 6600                       		bne.s	Obj22_Fire	; if yes, branch
0000A2B2 5428 0025                  		addq.b	#2,$25(a0)
0000A2B6 317C 007F 0032             		move.w	#127,$32(a0)	; set time delay to just over 2	seconds
0000A2BC 317C 0400 0010             		move.w	#$400,$10(a0)	; move Buzz Bomber to the right
0000A2C2 117C 0001 001C             		move.b	#1,$1C(a0)	; use "flying" animation
0000A2C8 0828 0000 0022             		btst	#0,$22(a0)	; is Buzz Bomber facing	left?
0000A2CE 6600                       		bne.s	locret_986C	; if not, branch
0000A2D0 4468 0010                  		neg.w	$10(a0)		; move Buzz Bomber to the left
0000A2D4                            
0000A2D4                            locret_986C:
0000A2D4 4E75                       		rts	
0000A2D6                            ; ===========================================================================
0000A2D6                            
0000A2D6                            Obj22_Fire:				; XREF: Obj22_Move
0000A2D6 6100 0000                  		bsr.w	SingleObjLoad
0000A2DA 6600                       		bne.s	locret_98D0
0000A2DC 12BC 0023                  		move.b	#$23,0(a1)	; load missile object
0000A2E0 3368 0008 0008             		move.w	8(a0),8(a1)
0000A2E6 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A2EC 0669 001C 000C             		addi.w	#$1C,$C(a1)
0000A2F2 337C 0200 0012             		move.w	#$200,$12(a1)	; move missile downwards
0000A2F8 337C 0200 0010             		move.w	#$200,$10(a1)	; move missile to the right
0000A2FE 303C 0018                  		move.w	#$18,d0
0000A302 0828 0000 0022             		btst	#0,$22(a0)	; is Buzz Bomber facing	left?
0000A308 6600                       		bne.s	loc_98AA	; if not, branch
0000A30A 4440                       		neg.w	d0
0000A30C 4469 0010                  		neg.w	$10(a1)		; move missile to the left
0000A310                            
0000A310                            loc_98AA:
0000A310 D169 0008                  		add.w	d0,8(a1)
0000A314 1368 0022 0022             		move.b	$22(a0),$22(a1)
0000A31A 337C 000E 0032             		move.w	#$E,$32(a1)
0000A320 2348 003C                  		move.l	a0,$3C(a1)
0000A324 117C 0001 0034             		move.b	#1,$34(a0)	; set to "already fired" to prevent refiring
0000A32A 317C 003B 0032             		move.w	#$3B,$32(a0)
0000A330 117C 0002 001C             		move.b	#2,$1C(a0)	; use "firing" animation
0000A336                            
0000A336                            locret_98D0:
0000A336 4E75                       		rts	
0000A338                            ; ===========================================================================
0000A338                            
0000A338                            Obj22_ChkNrSonic:			; XREF: Obj22_Index2
0000A338 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
0000A33C 6B00                       		bmi.s	Obj22_ChgDir
0000A33E 6100 0000                  		bsr.w	SpeedToPos
0000A342 4A28 0034                  		tst.b	$34(a0)
0000A346 6600                       		bne.s	locret_992A
0000A348 3038 D008                  		move.w	($FFFFD008).w,d0
0000A34C 9068 0008                  		sub.w	8(a0),d0
0000A350 6A00                       		bpl.s	Obj22_SetNrSonic
0000A352 4440                       		neg.w	d0
0000A354                            
0000A354                            Obj22_SetNrSonic:
0000A354 0C40 0060                  		cmpi.w	#$60,d0		; is Buzz Bomber within	$60 pixels of Sonic?
0000A358 6400                       		bcc.s	locret_992A	; if not, branch
0000A35A 4A28 0001                  		tst.b	1(a0)
0000A35E 6A00                       		bpl.s	locret_992A
0000A360 117C 0002 0034             		move.b	#2,$34(a0)	; set Buzz Bomber to "near Sonic"
0000A366 317C 001D 0032             		move.w	#29,$32(a0)	; set time delay to half a second
0000A36C 6000                       		bra.s	Obj22_Stop
0000A36E                            ; ===========================================================================
0000A36E                            
0000A36E                            Obj22_ChgDir:				; XREF: Obj22_ChkNrSonic
0000A36E 117C 0000 0034             		move.b	#0,$34(a0)	; set Buzz Bomber to "normal"
0000A374 0868 0000 0022             		bchg	#0,$22(a0)	; change direction
0000A37A 317C 003B 0032             		move.w	#59,$32(a0)
0000A380                            
0000A380                            Obj22_Stop:				; XREF: Obj22_SetNrSonic
0000A380 5528 0025                  		subq.b	#2,$25(a0)	; run "Obj22_Fire" routine
0000A384 317C 0000 0010             		move.w	#0,$10(a0)	; stop Buzz Bomber moving
0000A38A 117C 0000 001C             		move.b	#0,$1C(a0)	; use "hovering" animation
0000A390                            
0000A390                            locret_992A:
0000A390 4E75                       		rts	
0000A392                            ; ===========================================================================
0000A392                            
0000A392                            Obj22_Delete:				; XREF: Obj22_Index
0000A392 6100 0000                  		bsr.w	DeleteObject
0000A396 4E75                       		rts	
0000A398                            ; ===========================================================================
0000A398                            ; ---------------------------------------------------------------------------
0000A398                            ; Object 23 - missile that Buzz	Bomber throws
0000A398                            ; ---------------------------------------------------------------------------
0000A398                            
0000A398                            Obj23:					; XREF: Obj_Index
0000A398 7000                       		moveq	#0,d0
0000A39A 1028 0024                  		move.b	$24(a0),d0
0000A39E 323B 0000                  		move.w	Obj23_Index(pc,d0.w),d1
0000A3A2 4EFB 1000                  		jmp	Obj23_Index(pc,d1.w)
0000A3A6                            ; ===========================================================================
0000A3A6 0000                       Obj23_Index:	dc.w Obj23_Main-Obj23_Index
0000A3A8 0000                       		dc.w Obj23_Animate-Obj23_Index
0000A3AA 0000                       		dc.w Obj23_FromBuzz-Obj23_Index
0000A3AC 0000                       		dc.w Obj23_Delete-Obj23_Index
0000A3AE 0000                       		dc.w Obj23_FromNewt-Obj23_Index
0000A3B0                            ; ===========================================================================
0000A3B0                            
0000A3B0                            Obj23_Main:				; XREF: Obj23_Index
0000A3B0 5368 0032                  		subq.w	#1,$32(a0)
0000A3B4 6A00                       		bpl.s	Obj23_ChkCancel
0000A3B6 5428 0024                  		addq.b	#2,$24(a0)
0000A3BA 217C 0000 0000 0004        		move.l	#Map_obj23,4(a0)
0000A3C2 317C 2444 0002             		move.w	#$2444,2(a0)
0000A3C8 117C 0004 0001             		move.b	#4,1(a0)
0000A3CE 117C 0003 0018             		move.b	#3,$18(a0)
0000A3D4 117C 0008 0019             		move.b	#8,$19(a0)
0000A3DA 0228 0003 0022             		andi.b	#3,$22(a0)
0000A3E0 4A28 0028                  		tst.b	$28(a0)		; was object created by	a Newtron?
0000A3E4 6700                       		beq.s	Obj23_Animate	; if not, branch
0000A3E6 117C 0008 0024             		move.b	#8,$24(a0)	; run "Obj23_FromNewt" routine
0000A3EC 117C 0087 0020             		move.b	#$87,$20(a0)
0000A3F2 117C 0001 001C             		move.b	#1,$1C(a0)
0000A3F8 6000                       		bra.s	Obj23_Animate2
0000A3FA                            ; ===========================================================================
0000A3FA                            
0000A3FA                            Obj23_Animate:				; XREF: Obj23_Index
0000A3FA 6100                       		bsr.s	Obj23_ChkCancel
0000A3FC 43F9 0000 0000             		lea	(Ani_obj23).l,a1
0000A402 6100 0000                  		bsr.w	AnimateSprite
0000A406 6000 0000                  		bra.w	DisplaySprite
0000A40A                            ; ---------------------------------------------------------------------------
0000A40A                            ; Subroutine to	check if the Buzz Bomber which fired the missile has been
0000A40A                            ; destroyed, and if it has, then cancel	the missile
0000A40A                            ; ---------------------------------------------------------------------------
0000A40A                            
0000A40A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A40A                            
0000A40A                            
0000A40A                            Obj23_ChkCancel:			; XREF: Obj23_Main
0000A40A 2268 003C                  		movea.l	$3C(a0),a1
0000A40E 0C11 0027                  		cmpi.b	#$27,0(a1)	; has Buzz Bomber been destroyed?
0000A412 6700                       		beq.s	Obj23_Delete	; if yes, branch
0000A414 4E75                       		rts	
0000A416                            ; End of function Obj23_ChkCancel
0000A416                            
0000A416                            ; ===========================================================================
0000A416                            
0000A416                            Obj23_FromBuzz:				; XREF: Obj23_Index
0000A416 0828 0007 0022             		btst	#7,$22(a0)
0000A41C 6600                       		bne.s	Obj23_Explode
0000A41E 117C 0087 0020             		move.b	#$87,$20(a0)
0000A424 117C 0001 001C             		move.b	#1,$1C(a0)
0000A42A 6100 0000                  		bsr.w	SpeedToPos
0000A42E 43F9 0000 0000             		lea	(Ani_obj23).l,a1
0000A434 6100 0000                  		bsr.w	AnimateSprite
0000A438 6100 0000                  		bsr.w	DisplaySprite
0000A43C 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000A440 0640 00E0                  		addi.w	#$E0,d0
0000A444 B068 000C                  		cmp.w	$C(a0),d0	; has object moved below the level boundary?
0000A448 6500                       		bcs.s	Obj23_Delete	; if yes, branch
0000A44A 4E75                       		rts	
0000A44C                            ; ===========================================================================
0000A44C                            
0000A44C                            Obj23_Explode:				; XREF: Obj23_FromBuzz
0000A44C 10BC 0024                  		move.b	#$24,0(a0)	; change object	to an explosion	(Obj24)
0000A450 117C 0000 0024             		move.b	#0,$24(a0)
0000A456 6000 F30A                  		bra.w	Obj24
0000A45A                            ; ===========================================================================
0000A45A                            
0000A45A                            Obj23_Delete:				; XREF: Obj23_Index
0000A45A 6100 0000                  		bsr.w	DeleteObject
0000A45E 4E75                       		rts	
0000A460                            ; ===========================================================================
0000A460                            
0000A460                            Obj23_FromNewt:				; XREF: Obj23_Index
0000A460 4A28 0001                  		tst.b	1(a0)
0000A464 6AF4                       		bpl.s	Obj23_Delete
0000A466 6100 0000                  		bsr.w	SpeedToPos
0000A46A                            
0000A46A                            Obj23_Animate2:				; XREF: Obj23_Main
0000A46A 43F9 0000 0000             		lea	(Ani_obj23).l,a1
0000A470 6100 0000                  		bsr.w	AnimateSprite
0000A474 6100 0000                  		bsr.w	DisplaySprite
0000A478 4E75                       		rts	
0000A47A                            ; ===========================================================================
0000A47A                            Ani_obj22:
0000A47A                            	include "_anim\obj22.asm"
0000A47A                            ; ---------------------------------------------------------------------------
0000A47A                            ; Animation script - Buzz Bomber enemy
0000A47A                            ; ---------------------------------------------------------------------------
0000A47A 0000                       		dc.w byte_9A1E-Ani_obj22
0000A47C 0000                       		dc.w byte_9A22-Ani_obj22
0000A47E 0000                       		dc.w byte_9A26-Ani_obj22
0000A480 0100 01FF                  byte_9A1E:	dc.b 1,	0, 1, $FF
0000A484 0102 03FF                  byte_9A22:	dc.b 1,	2, 3, $FF
0000A488 0104 05FF                  byte_9A26:	dc.b 1,	4, 5, $FF
0000A48C                            		even
0000A48C                            		even
0000A48C                            
0000A48C                            Ani_obj23:
0000A48C                            	include "_anim\obj23.asm"
0000A48C                            ; ---------------------------------------------------------------------------
0000A48C                            ; Animation script - missile that Buzz Bomber throws
0000A48C                            ; ---------------------------------------------------------------------------
0000A48C 0000                       		dc.w byte_9A2E-Ani_obj23
0000A48E 0000                       		dc.w byte_9A32-Ani_obj23
0000A490 0700 01FC                  byte_9A2E:	dc.b 7,	0, 1, $FC
0000A494 0102 03FF                  byte_9A32:	dc.b 1,	2, 3, $FF
0000A498                            		even
0000A498                            		even
0000A498                            
0000A498                            ; ---------------------------------------------------------------------------
0000A498                            ; Sprite mappings - Buzz Bomber	enemy
0000A498                            ; ---------------------------------------------------------------------------
0000A498                            Map_obj22:
0000A498                            	include "_maps\obj22.asm"
0000A498                            ; ---------------------------------------------------------------------------
0000A498                            ; Sprite mappings - Buzz Bomber	enemy
0000A498                            ; ---------------------------------------------------------------------------
0000A498 0000 0000                  		dc.w byte_9A42-Map_obj22, byte_9A61-Map_obj22
0000A49C 0000 0000                  		dc.w byte_9A80-Map_obj22, byte_9AA4-Map_obj22
0000A4A0 0000 0000                  		dc.w byte_9AC8-Map_obj22, byte_9AE7-Map_obj22
0000A4A4 06                         byte_9A42:	dc.b 6
0000A4A5 F409 0000 E8               		dc.b $F4, 9, 0,	0, $E8
0000A4AA F409 000F 00               		dc.b $F4, 9, 0,	$F, 0
0000A4AF 0408 0015 E8               		dc.b 4,	8, 0, $15, $E8
0000A4B4 0404 0018 00               		dc.b 4,	4, 0, $18, 0
0000A4B9 F108 001A EC               		dc.b $F1, 8, 0,	$1A, $EC
0000A4BE F104 001D 04               		dc.b $F1, 4, 0,	$1D, 4
0000A4C3 06                         byte_9A61:	dc.b 6
0000A4C4 F409 0000 E8               		dc.b $F4, 9, 0,	0, $E8
0000A4C9 F409 000F 00               		dc.b $F4, 9, 0,	$F, 0
0000A4CE 0408 0015 E8               		dc.b 4,	8, 0, $15, $E8
0000A4D3 0404 0018 00               		dc.b 4,	4, 0, $18, 0
0000A4D8 F408 001F EC               		dc.b $F4, 8, 0,	$1F, $EC
0000A4DD F404 0022 04               		dc.b $F4, 4, 0,	$22, 4
0000A4E2 07                         byte_9A80:	dc.b 7
0000A4E3 0400 0030 0C               		dc.b 4,	0, 0, $30, $C
0000A4E8 F409 0000 E8               		dc.b $F4, 9, 0,	0, $E8
0000A4ED F409 000F 00               		dc.b $F4, 9, 0,	$F, 0
0000A4F2 0408 0015 E8               		dc.b 4,	8, 0, $15, $E8
0000A4F7 0404 0018 00               		dc.b 4,	4, 0, $18, 0
0000A4FC F108 001A EC               		dc.b $F1, 8, 0,	$1A, $EC
0000A501 F104 001D 04               		dc.b $F1, 4, 0,	$1D, 4
0000A506 07                         byte_9AA4:	dc.b 7
0000A507 0404 0031 0C               		dc.b 4,	4, 0, $31, $C
0000A50C F409 0000 E8               		dc.b $F4, 9, 0,	0, $E8
0000A511 F409 000F 00               		dc.b $F4, 9, 0,	$F, 0
0000A516 0408 0015 E8               		dc.b 4,	8, 0, $15, $E8
0000A51B 0404 0018 00               		dc.b 4,	4, 0, $18, 0
0000A520 F408 001F EC               		dc.b $F4, 8, 0,	$1F, $EC
0000A525 F404 0022 04               		dc.b $F4, 4, 0,	$22, 4
0000A52A 06                         byte_9AC8:	dc.b 6
0000A52B F40D 0000 EC               		dc.b $F4, $D, 0, 0, $EC
0000A530 040C 0008 EC               		dc.b 4,	$C, 0, 8, $EC
0000A535 0400 000C 0C               		dc.b 4,	0, 0, $C, $C
0000A53A 0C04 000D F4               		dc.b $C, 4, 0, $D, $F4
0000A53F F108 001A EC               		dc.b $F1, 8, 0,	$1A, $EC
0000A544 F104 001D 04               		dc.b $F1, 4, 0,	$1D, 4
0000A549 04                         byte_9AE7:	dc.b 4
0000A54A F40D 0000 EC               		dc.b $F4, $D, 0, 0, $EC
0000A54F 040C 0008 EC               		dc.b 4,	$C, 0, 8, $EC
0000A554 0400 000C 0C               		dc.b 4,	0, 0, $C, $C
0000A559 0C04 000D F4               		dc.b $C, 4, 0, $D, $F4
0000A55E F408 001F EC               		dc.b $F4, 8, 0,	$1F, $EC
0000A563 F404 0022 04               		dc.b $F4, 4, 0,	$22, 4
0000A568                            		even
0000A568                            		even
0000A568                            
0000A568                            ; ---------------------------------------------------------------------------
0000A568                            ; Sprite mappings - missile that Buzz Bomber throws
0000A568                            ; ---------------------------------------------------------------------------
0000A568                            Map_obj23:
0000A568                            	include "_maps\obj23.asm"
0000A568                            ; ---------------------------------------------------------------------------
0000A568                            ; Sprite mappings - missile that Buzz Bomber throws
0000A568                            ; ---------------------------------------------------------------------------
0000A568 0000 0000                  		dc.w byte_9B0E-Map_obj23, byte_9B14-Map_obj23
0000A56C 0000 0000                  		dc.w byte_9B1A-Map_obj23, byte_9B20-Map_obj23
0000A570 01                         byte_9B0E:	dc.b 1
0000A571 F805 0024 F8               		dc.b $F8, 5, 0,	$24, $F8
0000A576 01                         byte_9B14:	dc.b 1
0000A577 F805 0028 F8               		dc.b $F8, 5, 0,	$28, $F8
0000A57C 01                         byte_9B1A:	dc.b 1
0000A57D F805 002C F8               		dc.b $F8, 5, 0,	$2C, $F8
0000A582 01                         byte_9B20:	dc.b 1
0000A583 F805 0033 F8               		dc.b $F8, 5, 0,	$33, $F8
0000A588                            		even
0000A588                            		even
0000A588                            
0000A588                            ; ===========================================================================
0000A588                            ; ---------------------------------------------------------------------------
0000A588                            ; Object 25 - rings
0000A588                            ; ---------------------------------------------------------------------------
0000A588                            
0000A588                            Obj25:					; XREF: Obj_Index
0000A588 7000                       		moveq	#0,d0
0000A58A 1028 0024                  		move.b	$24(a0),d0
0000A58E 323B 0000                  		move.w	Obj25_Index(pc,d0.w),d1
0000A592 4EFB 1000                  		jmp	Obj25_Index(pc,d1.w)
0000A596                            ; ===========================================================================
0000A596 0000                       Obj25_Index:	dc.w Obj25_Main-Obj25_Index
0000A598 0000                       		dc.w Obj25_Animate-Obj25_Index
0000A59A 0000                       		dc.w Obj25_Collect-Obj25_Index
0000A59C 0000                       		dc.w Obj25_Sparkle-Obj25_Index
0000A59E 0000                       		dc.w Obj25_Delete-Obj25_Index
0000A5A0                            ; ---------------------------------------------------------------------------
0000A5A0                            ; Distances between rings (format: horizontal, vertical)
0000A5A0                            ; ---------------------------------------------------------------------------
0000A5A0 1000                       Obj25_PosData:	dc.b $10, 0		; horizontal tight
0000A5A2 1800                       		dc.b $18, 0		; horizontal normal
0000A5A4 2000                       		dc.b $20, 0		; horizontal wide
0000A5A6 0010                       		dc.b 0,	$10		; vertical tight
0000A5A8 0018                       		dc.b 0,	$18		; vertical normal
0000A5AA 0020                       		dc.b 0,	$20		; vertical wide
0000A5AC 1010                       		dc.b $10, $10		; diagonal
0000A5AE 1818                       		dc.b $18, $18
0000A5B0 2020                       		dc.b $20, $20
0000A5B2 F010                       		dc.b $F0, $10
0000A5B4 E818                       		dc.b $E8, $18
0000A5B6 E020                       		dc.b $E0, $20
0000A5B8 1008                       		dc.b $10, 8
0000A5BA 1810                       		dc.b $18, $10
0000A5BC F008                       		dc.b $F0, 8
0000A5BE E810                       		dc.b $E8, $10
0000A5C0                            ; ===========================================================================
0000A5C0                            
0000A5C0                            Obj25_Main:				; XREF: Obj25_Index
0000A5C0 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000A5C4 7000                       		moveq	#0,d0
0000A5C6 1028 0023                  		move.b	$23(a0),d0
0000A5CA 45F2 0002                  		lea	2(a2,d0.w),a2
0000A5CE 1812                       		move.b	(a2),d4
0000A5D0 1228 0028                  		move.b	$28(a0),d1
0000A5D4 1001                       		move.b	d1,d0
0000A5D6 0241 0007                  		andi.w	#7,d1
0000A5DA 0C41 0007                  		cmpi.w	#7,d1
0000A5DE 6600                       		bne.s	loc_9B80
0000A5E0 7206                       		moveq	#6,d1
0000A5E2                            
0000A5E2                            loc_9B80:
0000A5E2 4841                       		swap	d1
0000A5E4 323C 0000                  		move.w	#0,d1
0000A5E8 E808                       		lsr.b	#4,d0
0000A5EA D040                       		add.w	d0,d0
0000A5EC 1A3B 00B2                  		move.b	Obj25_PosData(pc,d0.w),d5 ; load ring spacing data
0000A5F0 4885                       		ext.w	d5
0000A5F2 1C3B 00AD                  		move.b	Obj25_PosData+1(pc,d0.w),d6
0000A5F6 4886                       		ext.w	d6
0000A5F8 2248                       		movea.l	a0,a1
0000A5FA 3428 0008                  		move.w	8(a0),d2
0000A5FE 3628 000C                  		move.w	$C(a0),d3
0000A602 E20C                       		lsr.b	#1,d4
0000A604 6500                       		bcs.s	loc_9C02
0000A606 0892 0007                  		bclr	#7,(a2)
0000A60A 6000                       		bra.s	loc_9BBA
0000A60C                            ; ===========================================================================
0000A60C                            
0000A60C                            Obj25_MakeRings:
0000A60C 4841                       		swap	d1
0000A60E E20C                       		lsr.b	#1,d4
0000A610 6500                       		bcs.s	loc_9C02
0000A612 0892 0007                  		bclr	#7,(a2)
0000A616 6100 0000                  		bsr.w	SingleObjLoad
0000A61A 6600                       		bne.s	loc_9C0E
0000A61C                            
0000A61C                            loc_9BBA:				; XREF: Obj25_Main
0000A61C 12BC 0025                  		move.b	#$25,0(a1)	; load ring object
0000A620 5429 0024                  		addq.b	#2,$24(a1)
0000A624 3342 0008                  		move.w	d2,8(a1)	; set x-axis position based on d2
0000A628 3368 0008 0032             		move.w	8(a0),$32(a1)
0000A62E 3343 000C                  		move.w	d3,$C(a1)	; set y-axis position based on d3
0000A632 237C 0000 0000 0004        		move.l	#Map_obj25,4(a1)
0000A63A 337C 27B2 0002             		move.w	#$27B2,2(a1)
0000A640 137C 0004 0001             		move.b	#4,1(a1)
0000A646 137C 0002 0018             		move.b	#2,$18(a1)
0000A64C 137C 0047 0020             		move.b	#$47,$20(a1)
0000A652 137C 0008 0019             		move.b	#8,$19(a1)
0000A658 1368 0023 0023             		move.b	$23(a0),$23(a1)
0000A65E 1341 0034                  		move.b	d1,$34(a1)
0000A662                            
0000A662                            loc_9C02:
0000A662 5241                       		addq.w	#1,d1
0000A664 D445                       		add.w	d5,d2		; add ring spacing value to d2
0000A666 D646                       		add.w	d6,d3		; add ring spacing value to d3
0000A668 4841                       		swap	d1
0000A66A 51C9 FFA0                  		dbf	d1,Obj25_MakeRings ; repeat for	number of rings
0000A66E                            
0000A66E                            loc_9C0E:
0000A66E 0812 0000                  		btst	#0,(a2)
0000A672 6600 0000                  		bne.w	DeleteObject
0000A676                            
0000A676                            Obj25_Animate:				; XREF: Obj25_Index
0000A676 1178 FEC3 001A             		move.b	($FFFFFEC3).w,$1A(a0) ;	set frame
0000A67C 6100 0000                  		bsr.w	DisplaySprite
0000A680 3028 0032                  		move.w	$32(a0),d0
0000A684 0240 FF80                  		andi.w	#$FF80,d0
0000A688 3238 F700                  		move.w	($FFFFF700).w,d1
0000A68C 0441 0080                  		subi.w	#$80,d1
0000A690 0241 FF80                  		andi.w	#$FF80,d1
0000A694 9041                       		sub.w	d1,d0
0000A696 0C40 0280                  		cmpi.w	#$280,d0
0000A69A 6200                       		bhi.s	Obj25_Delete
0000A69C 4E75                       		rts	
0000A69E                            ; ===========================================================================
0000A69E                            
0000A69E                            Obj25_Collect:				; XREF: Obj25_Index
0000A69E 5428 0024                  		addq.b	#2,$24(a0)
0000A6A2 117C 0000 0020             		move.b	#0,$20(a0)
0000A6A8 117C 0001 0018             		move.b	#1,$18(a0)
0000A6AE 6100 0000                  		bsr.w	CollectRing
0000A6B2 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000A6B6 7000                       		moveq	#0,d0
0000A6B8 1028 0023                  		move.b	$23(a0),d0
0000A6BC 1228 0034                  		move.b	$34(a0),d1
0000A6C0 03F2 0002                  		bset	d1,2(a2,d0.w)
0000A6C4                            
0000A6C4                            Obj25_Sparkle:				; XREF: Obj25_Index
0000A6C4 43F9 0000 0000             		lea	(Ani_obj25).l,a1
0000A6CA 6100 0000                  		bsr.w	AnimateSprite
0000A6CE 6000 0000                  		bra.w	DisplaySprite
0000A6D2                            ; ===========================================================================
0000A6D2                            
0000A6D2                            Obj25_Delete:				; XREF: Obj25_Index
0000A6D2 6000 0000                  		bra.w	DeleteObject
0000A6D6                            
0000A6D6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A6D6                            
0000A6D6                            
0000A6D6                            CollectRing:				; XREF: Obj25_Collect
0000A6D6 5278 FE20                  		addq.w	#1,($FFFFFE20).w ; add 1 to rings
0000A6DA 0038 0001 FE1D             		ori.b	#1,($FFFFFE1D).w ; update the rings counter
0000A6E0 303C 00B5                  		move.w	#$B5,d0		; play ring sound
0000A6E4 0C78 0064 FE20             		cmpi.w	#100,($FFFFFE20).w ; do	you have < 100 rings?
0000A6EA 6500                       		bcs.s	Obj25_PlaySnd	; if yes, branch
0000A6EC 08F8 0001 FE1B             		bset	#1,($FFFFFE1B).w ; update lives	counter
0000A6F2 6700                       		beq.s	loc_9CA4
0000A6F4 0C78 00C8 FE20             		cmpi.w	#200,($FFFFFE20).w ; do	you have < 200 rings?
0000A6FA 6500                       		bcs.s	Obj25_PlaySnd	; if yes, branch
0000A6FC 08F8 0002 FE1B             		bset	#2,($FFFFFE1B).w ; update lives	counter
0000A702 6600                       		bne.s	Obj25_PlaySnd
0000A704                            
0000A704                            loc_9CA4:
0000A704 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to the	number of lives	you have
0000A708 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to the	lives counter
0000A70C 303C 0088                  		move.w	#$88,d0		; play extra life music
0000A710                            
0000A710                            Obj25_PlaySnd:
0000A710 4EF9 0000 147C             		jmp	(PlaySound_Special).l
0000A716                            ; End of function CollectRing
0000A716                            
0000A716                            ; ===========================================================================
0000A716                            ; ---------------------------------------------------------------------------
0000A716                            ; Object 37 - rings flying out of Sonic	when he's hit
0000A716                            ; ---------------------------------------------------------------------------
0000A716                            
0000A716                            Obj37:					; XREF: Obj_Index
0000A716 7000                       		moveq	#0,d0
0000A718 1028 0024                  		move.b	$24(a0),d0
0000A71C 323B 0000                  		move.w	Obj37_Index(pc,d0.w),d1
0000A720 4EFB 1000                  		jmp	Obj37_Index(pc,d1.w)
0000A724                            ; ===========================================================================
0000A724 0000                       Obj37_Index:	dc.w Obj37_CountRings-Obj37_Index
0000A726 0000                       		dc.w Obj37_Bounce-Obj37_Index
0000A728 0000                       		dc.w Obj37_Collect-Obj37_Index
0000A72A 0000                       		dc.w Obj37_Sparkle-Obj37_Index
0000A72C 0000                       		dc.w Obj37_Delete-Obj37_Index
0000A72E                            ; ===========================================================================
0000A72E                            
0000A72E                            Obj37_CountRings:			; XREF: Obj37_Index
0000A72E 2248                       		movea.l	a0,a1
0000A730 7A00                       		moveq	#0,d5
0000A732 3A38 FE20                  		move.w	($FFFFFE20).w,d5 ; check number	of rings you have
0000A736 7020                       		moveq	#32,d0
0000A738 BA40                       		cmp.w	d0,d5		; do you have 32 or more?
0000A73A 6500                       		bcs.s	loc_9CDE	; if not, branch
0000A73C 3A00                       		move.w	d0,d5		; if yes, set d5 to 32
0000A73E                            
0000A73E                            loc_9CDE:
0000A73E 5345                       		subq.w	#1,d5
0000A740 383C 0288                  		move.w	#$288,d4
0000A744 6000                       		bra.s	Obj37_MakeRings
0000A746                            ; ===========================================================================
0000A746                            
0000A746                            Obj37_Loop:
0000A746 6100 0000                  		bsr.w	SingleObjLoad
0000A74A 6600 0000                  		bne.w	Obj37_ResetCounter
0000A74E                            
0000A74E                            Obj37_MakeRings:			; XREF: Obj37_CountRings
0000A74E 12BC 0037                  		move.b	#$37,0(a1)	; load bouncing	ring object
0000A752 5429 0024                  		addq.b	#2,$24(a1)
0000A756 137C 0008 0016             		move.b	#8,$16(a1)
0000A75C 137C 0008 0017             		move.b	#8,$17(a1)
0000A762 3368 0008 0008             		move.w	8(a0),8(a1)
0000A768 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A76E 237C 0000 0000 0004        		move.l	#Map_obj25,4(a1)
0000A776 337C 27B2 0002             		move.w	#$27B2,2(a1)
0000A77C 137C 0004 0001             		move.b	#4,1(a1)
0000A782 137C 0003 0018             		move.b	#3,$18(a1)
0000A788 137C 0047 0020             		move.b	#$47,$20(a1)
0000A78E 137C 0008 0019             		move.b	#8,$19(a1)
0000A794 4A44                       		tst.w	d4
0000A796 6B00                       		bmi.s	loc_9D62
0000A798 3004                       		move.w	d4,d0
0000A79A 6100 8C3E                  		bsr.w	CalcSine
0000A79E 3404                       		move.w	d4,d2
0000A7A0 E04A                       		lsr.w	#8,d2
0000A7A2 4A38 F64C                  		tst.b	($FFFFF64C).w		; Does the level have water?
0000A7A6 6700                       		beq.s	@skiphalvingvel		; If not, branch and skip underwater checks
0000A7A8 3C38 F646                  		move.w	($FFFFF646).w,d6	; Move water level to d6
0000A7AC BC68 000C                  		cmp.w	$C(a0),d6		; Is the ring object underneath the water level?
0000A7B0 6E00                       		bgt.s	@skiphalvingvel		; If not, branch and skip underwater commands
0000A7B2 E240                       		asr.w	d0			; Half d0. Makes the ring's x_vel bounce to the left/right slower
0000A7B4 E241                       		asr.w	d1			; Half d1. Makes the ring's y_vel bounce up/down slower
0000A7B6                            
0000A7B6                            @skiphalvingvel:		
0000A7B6 E560                       		asl.w	d2,d0
0000A7B8 E561                       		asl.w	d2,d1
0000A7BA 3400                       		move.w	d0,d2
0000A7BC 3601                       		move.w	d1,d3
0000A7BE 0604 0010                  		addi.b	#$10,d4
0000A7C2 6400                       		bcc.s	loc_9D62
0000A7C4 0444 0080                  		subi.w	#$80,d4
0000A7C8 6400                       		bcc.s	loc_9D62
0000A7CA 383C 0288                  		move.w	#$288,d4
0000A7CE                            
0000A7CE                            loc_9D62:
0000A7CE 3342 0010                  		move.w	d2,$10(a1)
0000A7D2 3343 0012                  		move.w	d3,$12(a1)
0000A7D6 4442                       		neg.w	d2
0000A7D8 4444                       		neg.w	d4
0000A7DA 51CD FF6A                  		dbf	d5,Obj37_Loop	; repeat for number of rings (max 31)
0000A7DE                            
0000A7DE                            Obj37_ResetCounter:			; XREF: Obj37_Loop
0000A7DE 31FC 0000 FE20             		move.w	#0,($FFFFFE20).w ; reset number	of rings to zero
0000A7E4 11FC 0080 FE1D             		move.b	#$80,($FFFFFE1D).w ; update ring counter
0000A7EA 11FC 0000 FE1B             		move.b	#0,($FFFFFE1B).w
0000A7F0 70FF                       		moveq	#-1,d0			; Move #-1 to d0
0000A7F2 1140 001F                  		move.b	d0,$1F(a0)	; Move d0 to new timer
0000A7F6 11C0 FEC6                  		move.b	d0,($FFFFFEC6).w	; Move d0 to old timer (for animated purposes)
0000A7FA 303C 00C6                  		move.w	#$C6,d0
0000A7FE 4EB9 0000 147C             		jsr	(PlaySound_Special).l ;	play ring loss sound
0000A804                            
0000A804                            Obj37_Bounce:				; XREF: Obj37_Index
0000A804 1178 FEC7 001A             		move.b	($FFFFFEC7).w,$1A(a0)
0000A80A 6100 0000                  		bsr.w	SpeedToPos
0000A80E 0668 0018 0012             		addi.w	#$18,$12(a0)
0000A814 6B00                       		bmi.s	Obj37_ChkDel
0000A816 4A38 F64C                  		tst.b	($FFFFF64C).w		; Does the level have water?
0000A81A 6700                       		beq.s	@skipbounceslow		; If not, branch and skip underwater checks
0000A81C 3C38 F646                  		move.w	($FFFFF646).w,d6	; Move water level to d6
0000A820 BC68 000C                  		cmp.w	$C(a0),d6		; Is the ring object underneath the water level?
0000A824 6E00                       		bgt.s	@skipbounceslow		; If not, branch and skip underwater commands
0000A826 0468 000E 0012             		subi.w	#$E,$12(a0)		; Reduce gravity by $E ($18-$E=$A), giving the underwater effect
0000A82C                            
0000A82C                            @skipbounceslow:
0000A82C 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000A830 D007                       		add.b	d7,d0
0000A832 0200 0003                  		andi.b	#3,d0
0000A836 6600                       		bne.s	Obj37_ChkDel
0000A838 4EB9 0000 0000             		jsr	ObjHitFloor
0000A83E 4A41                       		tst.w	d1
0000A840 6A00                       		bpl.s	Obj37_ChkDel
0000A842 D368 000C                  		add.w	d1,$C(a0)
0000A846 3028 0012                  		move.w	$12(a0),d0
0000A84A E440                       		asr.w	#2,d0
0000A84C 9168 0012                  		sub.w	d0,$12(a0)
0000A850 4468 0012                  		neg.w	$12(a0)
0000A854                            
0000A854                            Obj37_ChkDel:
0000A854 5328 001F                  		subq.b  #1,$1F(a0)  ; Subtract 1   ; RHS Ring Timer fix
0000A858 6700 0000                                  beq.w   DeleteObject       ; If 0, delete ; RHS Ring Timer fix
0000A85C 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000A860 0640 00E0                  		addi.w	#$E0,d0
0000A864 B068 000C                  		cmp.w	$C(a0),d0	   ; has object moved below level boundary?
0000A868 6500                       		bcs.s	Obj37_Delete	   ; if yes, branch	
0000A86A                            ;Mercury Lost Rings Flash
0000A86A 0828 0000 001F             		btst	#0, $1F(a0) ; Test the first bit of the timer, so rings flash every other frame.
0000A870 6700 0000                  		beq.w	DisplaySprite      ; If the bit is 0, the ring will appear.
0000A874 0C28 0050 001F             		cmpi.b	#80,$1F(a0) ; Rings will flash during last 80 steps of their life.
0000A87A 6200 0000                  		bhi.w	DisplaySprite      ; If the timer is higher than 80, obviously the rings will STAY visible.
0000A87E 4E75                       		rts
0000A880                            ;end Lost Rings Flash
0000A880                            ; ===========================================================================
0000A880                            
0000A880                            Obj37_Collect:				; XREF: Obj37_Index
0000A880 5428 0024                  		addq.b	#2,$24(a0)
0000A884 117C 0000 0020             		move.b	#0,$20(a0)
0000A88A 117C 0001 0018             		move.b	#1,$18(a0)
0000A890 6100 FE44                  		bsr.w	CollectRing
0000A894                            
0000A894                            Obj37_Sparkle:				; XREF: Obj37_Index
0000A894 43F9 0000 0000             		lea	(Ani_obj25).l,a1
0000A89A 6100 0000                  		bsr.w	AnimateSprite
0000A89E 6000 0000                  		bra.w	DisplaySprite
0000A8A2                            ; ===========================================================================
0000A8A2                            
0000A8A2                            Obj37_Delete:				; XREF: Obj37_Index
0000A8A2 6000 0000                  		bra.w	DeleteObject
0000A8A6                            ; ===========================================================================
0000A8A6                            ; ---------------------------------------------------------------------------
0000A8A6                            ; Object 4B - giant ring for entry to special stage
0000A8A6                            ; ---------------------------------------------------------------------------
0000A8A6                            
0000A8A6                            Obj4B:					; XREF: Obj_Index
0000A8A6 7000                       		moveq	#0,d0
0000A8A8 1028 0024                  		move.b	$24(a0),d0
0000A8AC 323B 0000                  		move.w	Obj4B_Index(pc,d0.w),d1
0000A8B0 4EFB 1000                  		jmp	Obj4B_Index(pc,d1.w)
0000A8B4                            ; ===========================================================================
0000A8B4 0000                       Obj4B_Index:	dc.w Obj4B_Main-Obj4B_Index
0000A8B6 0000                       		dc.w Obj4B_Animate-Obj4B_Index
0000A8B8 0000                       		dc.w Obj4B_Collect-Obj4B_Index
0000A8BA 0000                       		dc.w Obj4B_Delete-Obj4B_Index
0000A8BC                            ; ===========================================================================
0000A8BC                            
0000A8BC                            Obj4B_Main:				; XREF: Obj4B_Index
0000A8BC 217C 0000 0000 0004        		move.l	#Map_obj4B,4(a0)
0000A8C4 317C 2400 0002             		move.w	#$2400,2(a0)
0000A8CA 0028 0004 0001             		ori.b	#4,1(a0)
0000A8D0 117C 0040 0019             		move.b	#$40,$19(a0)
0000A8D6 4A28 0001                  		tst.b	1(a0)
0000A8DA 6A00                       		bpl.s	Obj4B_Animate
0000A8DC 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have 6 emeralds?
0000A8E2 6700 0000                  		beq.w	Obj4B_Delete	; if yes, branch
0000A8E6 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	at least 50 rings?
0000A8EC 6400                       		bcc.s	Obj4B_Okay	; if yes, branch
0000A8EE 4E75                       		rts	
0000A8F0                            ; ===========================================================================
0000A8F0                            
0000A8F0                            Obj4B_Okay:				; XREF: Obj4B_Main
0000A8F0 5428 0024                  		addq.b	#2,$24(a0)
0000A8F4 117C 0002 0018             		move.b	#2,$18(a0)
0000A8FA 117C 0052 0020             		move.b	#$52,$20(a0)
0000A900 31FC 0C40 F7BE             		move.w	#$C40,($FFFFF7BE).w
0000A906                            
0000A906                            Obj4B_Animate:				; XREF: Obj4B_Index
0000A906 1178 FEC3 001A             		move.b	($FFFFFEC3).w,$1A(a0)
0000A90C 3028 0008                  		move.w	8(a0),d0
0000A910 0240 FF80                  		andi.w	#$FF80,d0
0000A914 3238 F700                  		move.w	($FFFFF700).w,d1
0000A918 0441 0080                  		subi.w	#$80,d1
0000A91C 0241 FF80                  		andi.w	#$FF80,d1
0000A920 9041                       		sub.w	d1,d0
0000A922 0C40 0280                  		cmpi.w	#$280,d0
0000A926 6200 0000                  		bhi.w	DeleteObject
0000A92A 6000 0000                  		bra.w	DisplaySprite
0000A92E                            ; ===========================================================================
0000A92E                            
0000A92E                            Obj4B_Collect:				; XREF: Obj4B_Index
0000A92E 5528 0024                  		subq.b	#2,$24(a0)
0000A932 117C 0000 0020             		move.b	#0,$20(a0)
0000A938 6100 0000                  		bsr.w	SingleObjLoad
0000A93C 6600 0000                  		bne.w	Obj4B_PlaySnd
0000A940 12BC 007C                  		move.b	#$7C,0(a1)	; load giant ring flash	object
0000A944 3368 0008 0008             		move.w	8(a0),8(a1)
0000A94A 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A950 2348 003C                  		move.l	a0,$3C(a1)
0000A954 3038 D008                  		move.w	($FFFFD008).w,d0
0000A958 B068 0008                  		cmp.w	8(a0),d0	; has Sonic come from the left?
0000A95C 6500                       		bcs.s	Obj4B_PlaySnd	; if yes, branch
0000A95E 08E9 0000 0001             		bset	#0,1(a1)	; reverse flash	object
0000A964                            
0000A964                            Obj4B_PlaySnd:
0000A964 303C 00C3                  		move.w	#$C3,d0
0000A968 4EB9 0000 147C             		jsr	(PlaySound_Special).l ;	play giant ring	sound
0000A96E 6096                       		bra.s	Obj4B_Animate
0000A970                            ; ===========================================================================
0000A970                            
0000A970                            Obj4B_Delete:				; XREF: Obj4B_Index
0000A970 6000 0000                  		bra.w	DeleteObject
0000A974                            ; ===========================================================================
0000A974                            ; ---------------------------------------------------------------------------
0000A974                            ; Object 7C - flash effect when	you collect the	giant ring
0000A974                            ; ---------------------------------------------------------------------------
0000A974                            
0000A974                            Obj7C:					; XREF: Obj_Index
0000A974 7000                       		moveq	#0,d0
0000A976 1028 0024                  		move.b	$24(a0),d0
0000A97A 323B 0000                  		move.w	Obj7C_Index(pc,d0.w),d1
0000A97E 4EFB 1000                  		jmp	Obj7C_Index(pc,d1.w)
0000A982                            ; ===========================================================================
0000A982 0000                       Obj7C_Index:	dc.w Obj7C_Main-Obj7C_Index
0000A984 0000                       		dc.w Obj7C_ChkDel-Obj7C_Index
0000A986 0000                       		dc.w Obj7C_Delete-Obj7C_Index
0000A988                            ; ===========================================================================
0000A988                            
0000A988                            Obj7C_Main:				; XREF: Obj7C_Index
0000A988 5428 0024                  		addq.b	#2,$24(a0)
0000A98C 217C 0000 0000 0004        		move.l	#Map_obj7C,4(a0)
0000A994 317C 2462 0002             		move.w	#$2462,2(a0)
0000A99A 0028 0004 0001             		ori.b	#4,1(a0)
0000A9A0 117C 0000 0018             		move.b	#0,$18(a0)
0000A9A6 117C 0020 0019             		move.b	#$20,$19(a0)
0000A9AC 117C 00FF 001A             		move.b	#$FF,$1A(a0)
0000A9B2                            
0000A9B2                            Obj7C_ChkDel:				; XREF: Obj7C_Index
0000A9B2 6100                       		bsr.s	Obj7C_Collect
0000A9B4 3028 0008                  		move.w	8(a0),d0
0000A9B8 0240 FF80                  		andi.w	#$FF80,d0
0000A9BC 3238 F700                  		move.w	($FFFFF700).w,d1
0000A9C0 0441 0080                  		subi.w	#$80,d1
0000A9C4 0241 FF80                  		andi.w	#$FF80,d1
0000A9C8 9041                       		sub.w	d1,d0
0000A9CA 0C40 0280                  		cmpi.w	#$280,d0
0000A9CE 6200 0000                  		bhi.w	DeleteObject
0000A9D2 6000 0000                  		bra.w	DisplaySprite
0000A9D6                            
0000A9D6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A9D6                            
0000A9D6                            
0000A9D6                            Obj7C_Collect:				; XREF: Obj7C_ChkDel
0000A9D6 5328 001E                  		subq.b	#1,$1E(a0)
0000A9DA 6A00                       		bpl.s	locret_9F76
0000A9DC 117C 0001 001E             		move.b	#1,$1E(a0)
0000A9E2 5228 001A                  		addq.b	#1,$1A(a0)
0000A9E6 0C28 0008 001A             		cmpi.b	#8,$1A(a0)	; has animation	finished?
0000A9EC 6400                       		bcc.s	Obj7C_End	; if yes, branch
0000A9EE 0C28 0003 001A             		cmpi.b	#3,$1A(a0)	; is 3rd frame displayed?
0000A9F4 6600                       		bne.s	locret_9F76	; if not, branch
0000A9F6 2268 003C                  		movea.l	$3C(a0),a1
0000A9FA 137C 0006 0024             		move.b	#6,$24(a1)	; delete giant ring object (Obj4B)
0000AA00 11FC 001C D01C             		move.b	#$1C,($FFFFD01C).w ; make Sonic	invisible
0000AA06 11FC 0001 F7CD             		move.b	#1,($FFFFF7CD).w ; stop	Sonic getting bonuses
0000AA0C 4238 FE2D                  		clr.b	($FFFFFE2D).w	; remove invincibility
0000AA10 4238 FE2C                  		clr.b	($FFFFFE2C).w	; remove shield
0000AA14                            
0000AA14                            locret_9F76:
0000AA14 4E75                       		rts	
0000AA16                            ; ===========================================================================
0000AA16                            
0000AA16                            Obj7C_End:				; XREF: Obj7C_Collect
0000AA16 5428 0024                  		addq.b	#2,$24(a0)
0000AA1A 31FC 0000 D000             		move.w	#0,($FFFFD000).w ; remove Sonic	object
0000AA20 588F                       		addq.l	#4,sp
0000AA22 4E75                       		rts	
0000AA24                            ; End of function Obj7C_Collect
0000AA24                            
0000AA24                            ; ===========================================================================
0000AA24                            
0000AA24                            Obj7C_Delete:				; XREF: Obj7C_Index
0000AA24 6000 0000                  		bra.w	DeleteObject
0000AA28                            ; ===========================================================================
0000AA28                            Ani_obj25:
0000AA28                            	include "_anim\obj25.asm"
0000AA28                            ; ---------------------------------------------------------------------------
0000AA28                            ; Animation script - ring
0000AA28                            ; ---------------------------------------------------------------------------
0000AA28 0000                       		dc.w byte_9F8C-Ani_obj25
0000AA2A 0504 0506 07FC             byte_9F8C:	dc.b 5,	4, 5, 6, 7, $FC
0000AA30                            		even
0000AA30                            		even
0000AA30                            
0000AA30                            ; ---------------------------------------------------------------------------
0000AA30                            ; Sprite mappings - rings
0000AA30                            ; ---------------------------------------------------------------------------
0000AA30                            Map_obj25:
0000AA30                            	include "_maps\obj25.asm"
0000AA30                            ; ---------------------------------------------------------------------------
0000AA30                            ; Sprite mappings - rings
0000AA30                            ; ---------------------------------------------------------------------------
0000AA30 0000 0000                  		dc.w byte_9FA2-Map_obj25, byte_9FA8-Map_obj25
0000AA34 0000 0000                  		dc.w byte_9FAE-Map_obj25, byte_9FB4-Map_obj25
0000AA38 0000 0000                  		dc.w byte_9FBA-Map_obj25, byte_9FC0-Map_obj25
0000AA3C 0000 0000                  		dc.w byte_9FC6-Map_obj25, byte_9FCC-Map_obj25
0000AA40 01                         byte_9FA2:	dc.b 1
0000AA41 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000AA46 01                         byte_9FA8:	dc.b 1
0000AA47 F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
0000AA4C 01                         byte_9FAE:	dc.b 1
0000AA4D F801 0008 FC               		dc.b $F8, 1, 0,	8, $FC
0000AA52 01                         byte_9FB4:	dc.b 1
0000AA53 F805 0804 F8               		dc.b $F8, 5, 8,	4, $F8
0000AA58 01                         byte_9FBA:	dc.b 1
0000AA59 F805 000A F8               		dc.b $F8, 5, 0,	$A, $F8
0000AA5E 01                         byte_9FC0:	dc.b 1
0000AA5F F805 180A F8               		dc.b $F8, 5, $18, $A, $F8
0000AA64 01                         byte_9FC6:	dc.b 1
0000AA65 F805 080A F8               		dc.b $F8, 5, 8,	$A, $F8
0000AA6A 01                         byte_9FCC:	dc.b 1
0000AA6B F805 100A F8               		dc.b $F8, 5, $10, $A, $F8
0000AA70                            		even
0000AA70                            		even
0000AA70                            
0000AA70                            ; ---------------------------------------------------------------------------
0000AA70                            ; Sprite mappings - giant ring
0000AA70                            ; ---------------------------------------------------------------------------
0000AA70                            Map_obj4B:
0000AA70                            	include "_maps\obj4B.asm"
0000AA70                            ; ---------------------------------------------------------------------------
0000AA70                            ; Sprite mappings - giant ring
0000AA70                            ; ---------------------------------------------------------------------------
0000AA70 0000 0000                  		dc.w byte_9FDA-Map_obj4B, byte_A00D-Map_obj4B
0000AA74 0000 0000                  		dc.w byte_A036-Map_obj4B, byte_A04B-Map_obj4B
0000AA78 0A                         byte_9FDA:	dc.b $A
0000AA79 E008 0000 E8               		dc.b $E0, 8, 0,	0, $E8
0000AA7E E008 0003 00               		dc.b $E0, 8, 0,	3, 0
0000AA83 E80C 0006 E0               		dc.b $E8, $C, 0, 6, $E0
0000AA88 E80C 000A 00               		dc.b $E8, $C, 0, $A, 0
0000AA8D F007 000E E0               		dc.b $F0, 7, 0,	$E, $E0
0000AA92 F007 0016 10               		dc.b $F0, 7, 0,	$16, $10
0000AA97 100C 001E E0               		dc.b $10, $C, 0, $1E, $E0
0000AA9C 100C 0022 00               		dc.b $10, $C, 0, $22, 0
0000AAA1 1808 0026 E8               		dc.b $18, 8, 0,	$26, $E8
0000AAA6 1808 0029 00               		dc.b $18, 8, 0,	$29, 0
0000AAAB 08                         byte_A00D:	dc.b 8
0000AAAC E00C 002C F0               		dc.b $E0, $C, 0, $2C, $F0
0000AAB1 E808 0030 E8               		dc.b $E8, 8, 0,	$30, $E8
0000AAB6 E809 0033 00               		dc.b $E8, 9, 0,	$33, 0
0000AABB F007 0039 E8               		dc.b $F0, 7, 0,	$39, $E8
0000AAC0 F805 0041 08               		dc.b $F8, 5, 0,	$41, 8
0000AAC5 0809 0045 00               		dc.b 8,	9, 0, $45, 0
0000AACA 1008 004B E8               		dc.b $10, 8, 0,	$4B, $E8
0000AACF 180C 004E F0               		dc.b $18, $C, 0, $4E, $F0
0000AAD4 04                         byte_A036:	dc.b 4
0000AAD5 E007 0052 F4               		dc.b $E0, 7, 0,	$52, $F4
0000AADA E003 0852 04               		dc.b $E0, 3, 8,	$52, 4
0000AADF 0007 005A F4               		dc.b 0,	7, 0, $5A, $F4
0000AAE4 0003 085A 04               		dc.b 0,	3, 8, $5A, 4
0000AAE9 08                         byte_A04B:	dc.b 8
0000AAEA E00C 082C F0               		dc.b $E0, $C, 8, $2C, $F0
0000AAEF E808 0830 00               		dc.b $E8, 8, 8,	$30, 0
0000AAF4 E809 0833 E8               		dc.b $E8, 9, 8,	$33, $E8
0000AAF9 F007 0839 08               		dc.b $F0, 7, 8,	$39, 8
0000AAFE F805 0841 E8               		dc.b $F8, 5, 8,	$41, $E8
0000AB03 0809 0845 E8               		dc.b 8,	9, 8, $45, $E8
0000AB08 1008 084B 00               		dc.b $10, 8, 8,	$4B, 0
0000AB0D 180C 084E F0               		dc.b $18, $C, 8, $4E, $F0
0000AB12                            		even
0000AB12                            		even
0000AB12                            
0000AB12                            ; ---------------------------------------------------------------------------
0000AB12                            ; Sprite mappings - flash effect when you collect the giant ring
0000AB12                            ; ---------------------------------------------------------------------------
0000AB12                            Map_obj7C:
0000AB12                            	include "_maps\obj7C.asm"
0000AB12                            ; ---------------------------------------------------------------------------
0000AB12                            ; Sprite mappings - flash effect when you collect the giant ring
0000AB12                            ; ---------------------------------------------------------------------------
0000AB12 0000 0000                  		dc.w byte_A084-Map_obj7C, byte_A08F-Map_obj7C
0000AB16 0000 0000                  		dc.w byte_A0A4-Map_obj7C, byte_A0B9-Map_obj7C
0000AB1A 0000 0000                  		dc.w byte_A0CE-Map_obj7C, byte_A0E3-Map_obj7C
0000AB1E 0000 0000                  		dc.w byte_A0F8-Map_obj7C, byte_A103-Map_obj7C
0000AB22 02                         byte_A084:	dc.b 2
0000AB23 E00F 0000 00               		dc.b $E0, $F, 0, 0, 0
0000AB28 000F 1000 00               		dc.b 0,	$F, $10, 0, 0
0000AB2D 04                         byte_A08F:	dc.b 4
0000AB2E E00F 0010 F0               		dc.b $E0, $F, 0, $10, $F0
0000AB33 E007 0020 10               		dc.b $E0, 7, 0,	$20, $10
0000AB38 000F 1010 F0               		dc.b 0,	$F, $10, $10, $F0
0000AB3D 0007 1020 10               		dc.b 0,	7, $10,	$20, $10
0000AB42 04                         byte_A0A4:	dc.b 4
0000AB43 E00F 0028 E8               		dc.b $E0, $F, 0, $28, $E8
0000AB48 E00B 0038 08               		dc.b $E0, $B, 0, $38, 8
0000AB4D 000F 1028 E8               		dc.b 0,	$F, $10, $28, $E8
0000AB52 000B 1038 08               		dc.b 0,	$B, $10, $38, 8
0000AB57 04                         byte_A0B9:	dc.b 4
0000AB58 E00F 0834 E0               		dc.b $E0, $F, 8, $34, $E0
0000AB5D E00F 0034 00               		dc.b $E0, $F, 0, $34, 0
0000AB62 000F 1834 E0               		dc.b 0,	$F, $18, $34, $E0
0000AB67 000F 1034 00               		dc.b 0,	$F, $10, $34, 0
0000AB6C 04                         byte_A0CE:	dc.b 4
0000AB6D E00B 0838 E0               		dc.b $E0, $B, 8, $38, $E0
0000AB72 E00F 0828 F8               		dc.b $E0, $F, 8, $28, $F8
0000AB77 000B 1838 E0               		dc.b 0,	$B, $18, $38, $E0
0000AB7C 000F 1828 F8               		dc.b 0,	$F, $18, $28, $F8
0000AB81 04                         byte_A0E3:	dc.b 4
0000AB82 E007 0820 E0               		dc.b $E0, 7, 8,	$20, $E0
0000AB87 E00F 0810 F0               		dc.b $E0, $F, 8, $10, $F0
0000AB8C 0007 1820 E0               		dc.b 0,	7, $18,	$20, $E0
0000AB91 000F 1810 F0               		dc.b 0,	$F, $18, $10, $F0
0000AB96 02                         byte_A0F8:	dc.b 2
0000AB97 E00F 0800 E0               		dc.b $E0, $F, 8, 0, $E0
0000AB9C 000F 1800 E0               		dc.b 0,	$F, $18, 0, $E0
0000ABA1 04                         byte_A103:	dc.b 4
0000ABA2 E00F 0044 E0               		dc.b $E0, $F, 0, $44, $E0
0000ABA7 E00F 0844 00               		dc.b $E0, $F, 8, $44, 0
0000ABAC 000F 1044 E0               		dc.b 0,	$F, $10, $44, $E0
0000ABB1 000F 1844 00               		dc.b 0,	$F, $18, $44, 0
0000ABB6                            		even
0000ABB6                            		even
0000ABB6                            
0000ABB6                            ; ===========================================================================
0000ABB6                            ; ---------------------------------------------------------------------------
0000ABB6                            ; Object 26 - monitors
0000ABB6                            ; ---------------------------------------------------------------------------
0000ABB6                            
0000ABB6                            Obj26:					; XREF: Obj_Index
0000ABB6 7000                       		moveq	#0,d0
0000ABB8 1028 0024                  		move.b	$24(a0),d0
0000ABBC 323B 0000                  		move.w	Obj26_Index(pc,d0.w),d1
0000ABC0 4EFB 1000                  		jmp	Obj26_Index(pc,d1.w)
0000ABC4                            ; ===========================================================================
0000ABC4 0000                       Obj26_Index:	dc.w Obj26_Main-Obj26_Index
0000ABC6 0000                       		dc.w Obj26_Solid-Obj26_Index
0000ABC8 0000                       		dc.w Obj26_BreakOpen-Obj26_Index
0000ABCA 0000                       		dc.w Obj26_Animate-Obj26_Index
0000ABCC 0000                       		dc.w Obj26_Display-Obj26_Index
0000ABCE                            ; ===========================================================================
0000ABCE                            
0000ABCE                            Obj26_Main:				; XREF: Obj26_Index
0000ABCE 5428 0024                  		addq.b	#2,$24(a0)
0000ABD2 117C 000E 0016             		move.b	#$E,$16(a0)
0000ABD8 117C 000E 0017             		move.b	#$E,$17(a0)
0000ABDE 217C 0000 0000 0004        		move.l	#Map_obj26,4(a0)
0000ABE6 317C 0680 0002             		move.w	#$680,2(a0)
0000ABEC 117C 0004 0001             		move.b	#4,1(a0)
0000ABF2 117C 0003 0018             		move.b	#3,$18(a0)
0000ABF8 117C 000F 0019             		move.b	#$F,$19(a0)
0000ABFE 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000AC02 7000                       		moveq	#0,d0
0000AC04 1028 0023                  		move.b	$23(a0),d0
0000AC08 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000AC0E 0832 0000 0002             		btst	#0,2(a2,d0.w)	; has monitor been broken?
0000AC14 6700                       		beq.s	Obj26_NotBroken	; if not, branch
0000AC16 117C 0008 0024             		move.b	#8,$24(a0)	; run "Obj26_Display" routine
0000AC1C 117C 000B 001A             		move.b	#$B,$1A(a0)	; use broken monitor frame
0000AC22 4E75                       		rts	
0000AC24                            ; ===========================================================================
0000AC24                            
0000AC24                            Obj26_NotBroken:			; XREF: Obj26_Main
0000AC24 117C 0046 0020             		move.b	#$46,$20(a0)
0000AC2A 1168 0028 001C             		move.b	$28(a0),$1C(a0)
0000AC30                            
0000AC30                            Obj26_Solid:				; XREF: Obj26_Index
0000AC30 1028 0025                  		move.b	$25(a0),d0	; is monitor set to fall?
0000AC34 6700                       		beq.s	loc_A1EC	; if not, branch
0000AC36 5500                       		subq.b	#2,d0
0000AC38 6600                       		bne.s	Obj26_Fall
0000AC3A 7200                       		moveq	#0,d1
0000AC3C 1228 0019                  		move.b	$19(a0),d1
0000AC40 0641 000B                  		addi.w	#$B,d1
0000AC44 6100 D3FC                  		bsr.w	ExitPlatform
0000AC48 0829 0003 0022             		btst	#3,$22(a1)
0000AC4E 6600 0000                  		bne.w	loc_A1BC
0000AC52 4228 0025                  		clr.b	$25(a0)
0000AC56 6000 0000                  		bra.w	Obj26_Animate
0000AC5A                            ; ===========================================================================
0000AC5A                            
0000AC5A                            loc_A1BC:				; XREF: Obj26_Solid
0000AC5A 363C 0010                  		move.w	#$10,d3
0000AC5E 3428 0008                  		move.w	8(a0),d2
0000AC62 6100 D93C                  		bsr.w	MvSonicOnPtfm
0000AC66 6000 0000                  		bra.w	Obj26_Animate
0000AC6A                            ; ===========================================================================
0000AC6A                            
0000AC6A                            Obj26_Fall:				; XREF: Obj26_Solid
0000AC6A 6100 0000                  		bsr.w	ObjectFall
0000AC6E 4EB9 0000 0000             		jsr	ObjHitFloor
0000AC74 4A41                       		tst.w	d1
0000AC76 6A00 0000                  		bpl.w	Obj26_Animate
0000AC7A D368 000C                  		add.w	d1,$C(a0)
0000AC7E 4268 0012                  		clr.w	$12(a0)
0000AC82 4228 0025                  		clr.b	$25(a0)
0000AC86 6000 0000                  		bra.w	Obj26_Animate
0000AC8A                            ; ===========================================================================
0000AC8A                            
0000AC8A                            loc_A1EC:				; XREF: Obj26_Solid
0000AC8A 323C 001A                  		move.w	#$1A,d1
0000AC8E 343C 000F                  		move.w	#$F,d2
0000AC92 6100 0000                  		bsr.w	Obj26_SolidSides
0000AC96 6700 0000                  		beq.w	loc_A25C
0000AC9A 4A69 0012                  		tst.w	$12(a1)
0000AC9E 6B00                       		bmi.s	loc_A20A
0000ACA0 0C29 0002 001C             		cmpi.b	#2,$1C(a1)	; is Sonic rolling?
0000ACA6 6700                       		beq.s	loc_A25C	; if yes, branch
0000ACA8 0C29 001F 001C             		cmpi.b	#$1F,$1C(a1)	; is Sonic spin-dashing?
0000ACAE 6700                       		beq.s	loc_A25C	; if yes, branch
0000ACB0                            
0000ACB0                            loc_A20A:
0000ACB0 4A41                       		tst.w	d1
0000ACB2 6A00                       		bpl.s	loc_A220
0000ACB4 9769 000C                  		sub.w	d3,$C(a1)
0000ACB8 6100 D276                  		bsr.w	loc_74AE
0000ACBC 117C 0002 0025             		move.b	#2,$25(a0)
0000ACC2 6000 0000                  		bra.w	Obj26_Animate
0000ACC6                            ; ===========================================================================
0000ACC6                            
0000ACC6                            loc_A220:
0000ACC6 4A40                       		tst.w	d0
0000ACC8 6700 0000                  		beq.w	loc_A246
0000ACCC 6B00                       		bmi.s	loc_A230
0000ACCE 4A69 0010                  		tst.w	$10(a1)
0000ACD2 6B00                       		bmi.s	loc_A246
0000ACD4 6000                       		bra.s	loc_A236
0000ACD6                            ; ===========================================================================
0000ACD6                            
0000ACD6                            loc_A230:
0000ACD6 4A69 0010                  		tst.w	$10(a1)
0000ACDA 6A00                       		bpl.s	loc_A246
0000ACDC                            
0000ACDC                            loc_A236:
0000ACDC 9169 0008                  		sub.w	d0,8(a1)
0000ACE0 337C 0000 0014             		move.w	#0,$14(a1)
0000ACE6 337C 0000 0010             		move.w	#0,$10(a1)
0000ACEC                            
0000ACEC                            loc_A246:
0000ACEC 0829 0001 0022             		btst	#1,$22(a1)
0000ACF2 6600                       		bne.s	loc_A26A
0000ACF4 08E9 0005 0022             		bset	#5,$22(a1)
0000ACFA 08E8 0005 0022             		bset	#5,$22(a0)
0000AD00 6000                       		bra.s	Obj26_Animate
0000AD02                            ; ===========================================================================
0000AD02                            
0000AD02                            loc_A25C:
0000AD02 0828 0005 0022             		btst	#5,$22(a0)
0000AD08 6700                       		beq.s	Obj26_Animate
0000AD0A 0C29 0002 001C             		cmp.b	#2,$1C(a1)	; check if in jumping/rolling animation
0000AD10 6700                       		beq.s	loc_A26A
0000AD12 0C29 0017 001C             		cmp.b	#$17,$1C(a1)	; check if in drowning animation
0000AD18 6700                       		beq.s	loc_A26A
0000AD1A 337C 0001 001C             		move.w	#1,$1C(a1)
0000AD20                            
0000AD20                            loc_A26A:
0000AD20 08A8 0005 0022             		bclr	#5,$22(a0)
0000AD26 08A9 0005 0022             		bclr	#5,$22(a1)
0000AD2C                            
0000AD2C                            Obj26_Animate:				; XREF: Obj26_Index
0000AD2C 43F9 0000 0000             		lea	(Ani_obj26).l,a1
0000AD32 6100 0000                  		bsr.w	AnimateSprite
0000AD36                            
0000AD36                            Obj26_Display:				; XREF: Obj26_Index
0000AD36 6100 0000                  		bsr.w	DisplaySprite
0000AD3A 3028 0008                  		move.w	8(a0),d0
0000AD3E 0240 FF80                  		andi.w	#$FF80,d0
0000AD42 3238 F700                  		move.w	($FFFFF700).w,d1
0000AD46 0441 0080                  		subi.w	#$80,d1
0000AD4A 0241 FF80                  		andi.w	#$FF80,d1
0000AD4E 9041                       		sub.w	d1,d0
0000AD50 0C40 0280                  		cmpi.w	#$280,d0
0000AD54 6200 0000                  		bhi.w	DeleteObject
0000AD58 4E75                       		rts	
0000AD5A                            ; ===========================================================================
0000AD5A                            
0000AD5A                            Obj26_BreakOpen:			; XREF: Obj26_Index
0000AD5A 5428 0024                  		addq.b	#2,$24(a0)
0000AD5E 117C 0000 0020             		move.b	#0,$20(a0)
0000AD64 6100 0000                  		bsr.w	SingleObjLoad
0000AD68 6600                       		bne.s	Obj26_Explode
0000AD6A 12BC 002E                  		move.b	#$2E,0(a1)	; load monitor contents	object
0000AD6E 3368 0008 0008             		move.w	8(a0),8(a1)
0000AD74 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000AD7A 1368 001C 001C             		move.b	$1C(a0),$1C(a1)
0000AD80                            
0000AD80                            Obj26_Explode:
0000AD80 6100 0000                  		bsr.w	SingleObjLoad
0000AD84 6600                       		bne.s	Obj26_SetBroken
0000AD86 12BC 0027                  		move.b	#$27,0(a1)	; load explosion object
0000AD8A 5429 0024                  		addq.b	#2,$24(a1)
0000AD8E 3368 0008 0008             		move.w	8(a0),8(a1)
0000AD94 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000AD9A                            
0000AD9A                            Obj26_SetBroken:
0000AD9A 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000AD9E 7000                       		moveq	#0,d0
0000ADA0 1028 0023                  		move.b	$23(a0),d0
0000ADA4 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0000ADAA 117C 0009 001C             		move.b	#9,$1C(a0)	; set monitor type to broken
0000ADB0 6000 0000                  		bra.w	DisplaySprite
0000ADB4                            ; ===========================================================================
0000ADB4                            ; ---------------------------------------------------------------------------
0000ADB4                            ; Object 2E - contents of monitors
0000ADB4                            ; ---------------------------------------------------------------------------
0000ADB4                            
0000ADB4                            Obj2E:					; XREF: Obj_Index
0000ADB4 7000                       		moveq	#0,d0
0000ADB6 1028 0024                  		move.b	$24(a0),d0
0000ADBA 323B 0000                  		move.w	Obj2E_Index(pc,d0.w),d1
0000ADBE 4EBB 1000                  		jsr	Obj2E_Index(pc,d1.w)
0000ADC2 6000 0000                  		bra.w	DisplaySprite
0000ADC6                            ; ===========================================================================
0000ADC6 0000                       Obj2E_Index:	dc.w Obj2E_Main-Obj2E_Index
0000ADC8 0000                       		dc.w Obj2E_Move-Obj2E_Index
0000ADCA 0000                       		dc.w Obj2E_Delete-Obj2E_Index
0000ADCC                            ; ===========================================================================
0000ADCC                            
0000ADCC                            Obj2E_Main:				; XREF: Obj2E_Index
0000ADCC 5428 0024                  		addq.b	#2,$24(a0)
0000ADD0 317C 0680 0002             		move.w	#$680,2(a0)
0000ADD6 117C 0024 0001             		move.b	#$24,1(a0)
0000ADDC 117C 0003 0018             		move.b	#3,$18(a0)
0000ADE2 117C 0008 0019             		move.b	#8,$19(a0)
0000ADE8 317C FD00 0012             		move.w	#-$300,$12(a0)
0000ADEE 7000                       		moveq	#0,d0
0000ADF0 1028 001C                  		move.b	$1C(a0),d0
0000ADF4 5400                       		addq.b	#2,d0
0000ADF6 1140 001A                  		move.b	d0,$1A(a0)
0000ADFA 227C 0000 0000             		movea.l	#Map_obj26,a1
0000AE00 D000                       		add.b	d0,d0
0000AE02 D2F1 0000                  		adda.w	(a1,d0.w),a1
0000AE06 5249                       		addq.w	#1,a1
0000AE08 2149 0004                  		move.l	a1,4(a0)
0000AE0C                            
0000AE0C                            Obj2E_Move:				; XREF: Obj2E_Index
0000AE0C 4A68 0012                  		tst.w	$12(a0)		; is object moving?
0000AE10 6A00 0000                  		bpl.w	Obj2E_ChkEggman	; if not, branch
0000AE14 6100 0000                  		bsr.w	SpeedToPos
0000AE18 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce object	speed
0000AE1E 4E75                       		rts	
0000AE20                            ; ===========================================================================
0000AE20                            
0000AE20                            Obj2E_ChkEggman:    ; XREF: Obj2E_Move
0000AE20 5428 0024                          addq.b    #2,$24(a0)
0000AE24 317C 001D 001E                     move.w    #29,$1E(a0)
0000AE2A 1028 001C                          move.b    $1C(a0),d0
0000AE2E 0C00 0001                          cmpi.b    #1,d0; does monitor contain Eggman?
0000AE32 6600                               bne.s    Obj2E_ChkSonic ; if not, go and check for the next monitor type (1-up icon)
0000AE34 2248                               move.l    a0,a1 ; move a0 to a1, because Touch_ChkHurt wants the damaging object to be in a1
0000AE36 2F08                               move.l    a0,-(sp) ; push a0 on the stack, and decrement stack pointer
0000AE38 41F8 D000                          lea    ($FFFFD000).w,a0 ; put Sonic's ram address in a0, because Touch_ChkHurt wants the damaged object to be in a0
0000AE3C 4EB9 0000 0000                     jsr    Sonic_CheckGoSuper ; run the Touch_ChkHurt routine
0000AE42 205F                               move.l    (sp)+,a0 ; pop the previous value of a0 from the stack, and increment stack pointer
0000AE44 4E75                               rts ; The Eggman monitor now does something!
0000AE46                            
0000AE46                            ; ===========================================================================
0000AE46                            
0000AE46                            Obj2E_ChkSonic:
0000AE46 0C00 0002                  		cmpi.b	#2,d0		; does monitor contain Sonic?
0000AE4A 6600                       		bne.s	Obj2E_ChkShoes
0000AE4C                            
0000AE4C                            ExtraLife:
0000AE4C 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to the	number of lives	you have
0000AE50 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to the	lives counter
0000AE54 303C 0088                  		move.w	#$88,d0
0000AE58 4EF9 0000 1476             		jmp	(PlaySound).l	; play extra life music
0000AE5E                            ; ===========================================================================
0000AE5E                            
0000AE5E                            Obj2E_ChkShoes:
0000AE5E 0C00 0003                  		cmpi.b	#3,d0		; does monitor contain speed shoes?
0000AE62 6600                       		bne.s	Obj2E_ChkShield
0000AE64 0C38 0001 FE19             		cmpi.b #1,(Super_Sonic_Flag).w ; Prevent Sonic from getting (invincibility, shoes) if Super
0000AE6A 6700 0000                                  beq Obj2E_NoMusic		
0000AE6E 11FC 0001 FE2E             		move.b	#1,($FFFFFE2E).w ; speed up the	BG music
0000AE74 31FC 04B0 D034             		move.w	#$4B0,($FFFFD034).w ; time limit for the power-up
0000AE7A 31FC 0C00 F760             		move.w	#$C00,($FFFFF760).w ; change Sonic's top speed
0000AE80 31FC 0018 F762             		move.w	#$18,($FFFFF762).w
0000AE86 31FC 0080 F764             		move.w	#$80,($FFFFF764).w
0000AE8C 303C 009E                  		move.w	#$9E,d0
0000AE90 4EF9 0000 1476             		jmp	(PlaySound).l	; Speed	up the music
0000AE96                            ; ===========================================================================
0000AE96                            
0000AE96                            Obj2E_ChkShield:
0000AE96 0C00 0004                  		cmpi.b	#4,d0		; does monitor contain a shield?
0000AE9A 6600                       		bne.s	Obj2E_ChkInvinc
0000AE9C 11FC 0001 FE2C             		move.b	#1,($FFFFFE2C).w ; give	Sonic a	shield
0000AEA2 11FC 0038 D180             		move.b	#$38,($FFFFD180).w ; load shield object	($38)
0000AEA8 303C 00AF                  		move.w	#$AF,d0
0000AEAC 4EF9 0000 1476             		jmp	(PlaySound).l	; play shield sound
0000AEB2                            ; ===========================================================================
0000AEB2                            
0000AEB2                            Obj2E_ChkInvinc:
0000AEB2 0C00 0005                  		cmpi.b	#5,d0		; does monitor contain invincibility?
0000AEB6 6600                       		bne.s	Obj2E_ChkRings
0000AEB8 0C38 0001 FE19             		cmpi.b #1,(Super_Sonic_Flag).w ; Prevent Sonic from getting (invincibility, shoes) if Super
0000AEBE 6700 0000                                  beq Obj2E_NoMusic		
0000AEC2 11FC 0001 FE2D             		move.b	#1,($FFFFFE2D).w ; make	Sonic invincible
0000AEC8 31FC 04B0 D032             		move.w	#$4B0,($FFFFD032).w ; time limit for the power-up
0000AECE 11FC 0038 D200             		move.b	#$38,($FFFFD200).w ; load stars	object ($3801)
0000AED4 11FC 0001 D21C             		move.b	#1,($FFFFD21C).w
0000AEDA 11FC 0038 D240             		move.b	#$38,($FFFFD240).w ; load stars	object ($3802)
0000AEE0 11FC 0002 D25C             		move.b	#2,($FFFFD25C).w
0000AEE6 11FC 0038 D280             		move.b	#$38,($FFFFD280).w ; load stars	object ($3803)
0000AEEC 11FC 0003 D29C             		move.b	#3,($FFFFD29C).w
0000AEF2 11FC 0038 D2C0             		move.b	#$38,($FFFFD2C0).w ; load stars	object ($3804)
0000AEF8 11FC 0004 D2DC             		move.b	#4,($FFFFD2DC).w
0000AEFE 4A38 F7AA                  		tst.b	($FFFFF7AA).w	; is boss mode on?
0000AF02 6600                       		bne.s	Obj2E_NoMusic	; if yes, branch
0000AF04 303C 0087                  		move.w	#$87,d0
0000AF08 4EF9 0000 1476             		jmp	(PlaySound).l	; play invincibility music
0000AF0E                            ; ===========================================================================
0000AF0E                            
0000AF0E                            Obj2E_NoMusic:
0000AF0E 4E75                       		rts	
0000AF10                            ; ===========================================================================
0000AF10                            
0000AF10                            Obj2E_ChkRings:
0000AF10 0C00 0006                  		cmpi.b	#6,d0		; does monitor contain 10 rings?
0000AF14 6600                       		bne.s	Obj2E_ChkS
0000AF16 0678 004A FE20             		addi.w	#$4A,($FFFFFE20).w ; add	10 rings to the	number of rings	you have
0000AF1C 0038 0001 FE1D             		ori.b	#1,($FFFFFE1D).w ; update the ring counter
0000AF22 0C78 0064 FE20             		cmpi.w	#100,($FFFFFE20).w ; check if you have 100 rings
0000AF28 6500                       		bcs.s	Obj2E_RingSound
0000AF2A 08F8 0001 FE1B             		bset	#1,($FFFFFE1B).w
0000AF30 6700 FF1A                  		beq.w	ExtraLife
0000AF34 0C78 00C8 FE20             		cmpi.w	#200,($FFFFFE20).w ; check if you have 200 rings
0000AF3A 6500                       		bcs.s	Obj2E_RingSound
0000AF3C 08F8 0002 FE1B             		bset	#2,($FFFFFE1B).w
0000AF42 6700 FF08                  		beq.w	ExtraLife
0000AF46                            
0000AF46                            Obj2E_RingSound:
0000AF46 303C 00B5                  		move.w	#$B5,d0
0000AF4A 4EF9 0000 1476             		jmp	(PlaySound).l	; play ring sound
0000AF50                            ; ===========================================================================
0000AF50                            
0000AF50                            Obj2E_ChkS:
0000AF50 0C00 0007                  		cmpi.b	#7,d0		; does monitor contain 'S'
0000AF54 6600                       		bne.s	Obj2E_ChkEnd
0000AF56 4E71                       		nop	
0000AF58                            
0000AF58                            Obj2E_ChkEnd:
0000AF58 4E75                       		rts			; 'S' and goggles monitors do nothing
0000AF5A                            ; ===========================================================================
0000AF5A                            
0000AF5A                            Obj2E_Delete:				; XREF: Obj2E_Index
0000AF5A 5368 001E                  		subq.w	#1,$1E(a0)
0000AF5E 6B00 0000                  		bmi.w	DeleteObject
0000AF62 4E75                       		rts	
0000AF64                            ; ---------------------------------------------------------------------------
0000AF64                            ; Subroutine to	make the sides of a monitor solid
0000AF64                            ; ---------------------------------------------------------------------------
0000AF64                            
0000AF64                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000AF64                            
0000AF64                            
0000AF64                            Obj26_SolidSides:			; XREF: loc_A1EC
0000AF64 43F8 D000                  		lea	($FFFFD000).w,a1
0000AF68 3029 0008                  		move.w	8(a1),d0
0000AF6C 9068 0008                  		sub.w	8(a0),d0
0000AF70 D041                       		add.w	d1,d0
0000AF72 6B00                       		bmi.s	loc_A4E6
0000AF74 3601                       		move.w	d1,d3
0000AF76 D643                       		add.w	d3,d3
0000AF78 B043                       		cmp.w	d3,d0
0000AF7A 6200                       		bhi.s	loc_A4E6
0000AF7C 1629 0016                  		move.b	$16(a1),d3
0000AF80 4883                       		ext.w	d3
0000AF82 D443                       		add.w	d3,d2
0000AF84 3629 000C                  		move.w	$C(a1),d3
0000AF88 9668 000C                  		sub.w	$C(a0),d3
0000AF8C D642                       		add.w	d2,d3
0000AF8E 6B00                       		bmi.s	loc_A4E6
0000AF90 D442                       		add.w	d2,d2
0000AF92 B642                       		cmp.w	d2,d3
0000AF94 6400                       		bcc.s	loc_A4E6
0000AF96 4A38 F7C8                  		tst.b	($FFFFF7C8).w
0000AF9A 6B00                       		bmi.s	loc_A4E6
0000AF9C 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000AFA2 6400                       		bcc.s	loc_A4E6
0000AFA4 4A78 FE08                  		tst.w	($FFFFFE08).w
0000AFA8 6600                       		bne.s	loc_A4E6
0000AFAA B240                       		cmp.w	d0,d1
0000AFAC 6400                       		bcc.s	loc_A4DC
0000AFAE D241                       		add.w	d1,d1
0000AFB0 9041                       		sub.w	d1,d0
0000AFB2                            
0000AFB2                            loc_A4DC:
0000AFB2 0C43 0010                  		cmpi.w	#$10,d3
0000AFB6 6500                       		bcs.s	loc_A4EA
0000AFB8                            
0000AFB8                            loc_A4E2:
0000AFB8 7201                       		moveq	#1,d1
0000AFBA 4E75                       		rts	
0000AFBC                            ; ===========================================================================
0000AFBC                            
0000AFBC                            loc_A4E6:
0000AFBC 7200                       		moveq	#0,d1
0000AFBE 4E75                       		rts	
0000AFC0                            ; ===========================================================================
0000AFC0                            
0000AFC0                            loc_A4EA:
0000AFC0 7200                       		moveq	#0,d1
0000AFC2 1228 0019                  		move.b	$19(a0),d1
0000AFC6 5841                       		addq.w	#4,d1
0000AFC8 3401                       		move.w	d1,d2
0000AFCA D442                       		add.w	d2,d2
0000AFCC D269 0008                  		add.w	8(a1),d1
0000AFD0 9268 0008                  		sub.w	8(a0),d1
0000AFD4 6BE2                       		bmi.s	loc_A4E2
0000AFD6 B242                       		cmp.w	d2,d1
0000AFD8 64DE                       		bcc.s	loc_A4E2
0000AFDA 72FF                       		moveq	#-1,d1
0000AFDC 4E75                       		rts	
0000AFDE                            ; End of function Obj26_SolidSides
0000AFDE                            
0000AFDE                            ; ===========================================================================
0000AFDE                            Ani_obj26:
0000AFDE                            	include "_anim\obj26.asm"
0000AFDE                            ; ---------------------------------------------------------------------------
0000AFDE                            ; Animation script - monitors
0000AFDE                            ; ---------------------------------------------------------------------------
0000AFDE 0000 0000 0000             		dc.w byte_A51C-Ani_obj26, byte_A522-Ani_obj26, byte_A52E-Ani_obj26
0000AFE4 0000 0000 0000             		dc.w byte_A53A-Ani_obj26, byte_A546-Ani_obj26, byte_A552-Ani_obj26
0000AFEA 0000 0000 0000             		dc.w byte_A55E-Ani_obj26, byte_A56A-Ani_obj26, byte_A576-Ani_obj26
0000AFF0 0000                       		dc.w byte_A582-Ani_obj26
0000AFF2 0100 0102 FF00             byte_A51C:	dc.b 1,	0, 1, 2, $FF, 0
0000AFF8 0100 0303 0103 0302 0303+  byte_A522:	dc.b 1,	0, 3, 3, 1, 3, 3, 2, 3,	3, $FF,	0
0000B004 0100 0404 0104 0402 0404+  byte_A52E:	dc.b 1,	0, 4, 4, 1, 4, 4, 2, 4,	4, $FF,	0
0000B010 0100 0505 0105 0502 0505+  byte_A53A:	dc.b 1,	0, 5, 5, 1, 5, 5, 2, 5,	5, $FF,	0
0000B01C 0100 0606 0106 0602 0606+  byte_A546:	dc.b 1,	0, 6, 6, 1, 6, 6, 2, 6,	6, $FF,	0
0000B028 0100 0707 0107 0702 0707+  byte_A552:	dc.b 1,	0, 7, 7, 1, 7, 7, 2, 7,	7, $FF,	0
0000B034 0100 0808 0108 0802 0808+  byte_A55E:	dc.b 1,	0, 8, 8, 1, 8, 8, 2, 8,	8, $FF,	0
0000B040 0100 0909 0109 0902 0909+  byte_A56A:	dc.b 1,	0, 9, 9, 1, 9, 9, 2, 9,	9, $FF,	0
0000B04C 0100 0A0A 010A 0A02 0A0A+  byte_A576:	dc.b 1,	0, $A, $A, 1, $A, $A, 2, $A, $A, $FF, 0
0000B058 0200 0102 0BFE 0100        byte_A582:	dc.b 2,	0, 1, 2, $B, $FE, 1, 0
0000B060                            		even
0000B060                            		even
0000B060                            
0000B060                            ; ---------------------------------------------------------------------------
0000B060                            ; Sprite mappings - monitors
0000B060                            ; ---------------------------------------------------------------------------
0000B060                            Map_obj26:
0000B060                            	include "_maps\obj26.asm"
0000B060                            ; ---------------------------------------------------------------------------
0000B060                            ; Sprite mappings - monitors
0000B060                            ; ---------------------------------------------------------------------------
0000B060 0000 0000                  		dc.w byte_A5A2-Map_obj26, byte_A5A8-Map_obj26
0000B064 0000 0000                  		dc.w byte_A5B3-Map_obj26, byte_A5BE-Map_obj26
0000B068 0000 0000                  		dc.w byte_A5C9-Map_obj26, byte_A5D4-Map_obj26
0000B06C 0000 0000                  		dc.w byte_A5DF-Map_obj26, byte_A5EA-Map_obj26
0000B070 0000 0000                  		dc.w byte_A5F5-Map_obj26, byte_A600-Map_obj26
0000B074 0000 0000                  		dc.w byte_A60B-Map_obj26, byte_A616-Map_obj26
0000B078 01                         byte_A5A2:	dc.b 1			; static monitor
0000B079 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000B07E 02                         byte_A5A8:	dc.b 2			; static monitor
0000B07F F505 0010 F8               		dc.b $F5, 5, 0,	$10, $F8
0000B084 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000B089 02                         byte_A5B3:	dc.b 2			; static monitor
0000B08A F505 0014 F8               		dc.b $F5, 5, 0,	$14, $F8
0000B08F EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000B094 02                         byte_A5BE:	dc.b 2			; Eggman monitor
0000B095 F505 0018 F8               		dc.b $F5, 5, 0,	$18, $F8
0000B09A EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000B09F 02                         byte_A5C9:	dc.b 2			; Sonic	monitor
0000B0A0 F505 001C F8               		dc.b $F5, 5, 0,	$1C, $F8
0000B0A5 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000B0AA 02                         byte_A5D4:	dc.b 2			; speed	shoes monitor
0000B0AB F505 0024 F8               		dc.b $F5, 5, 0,	$24, $F8
0000B0B0 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000B0B5 02                         byte_A5DF:	dc.b 2			; shield monitor
0000B0B6 F505 0028 F8               		dc.b $F5, 5, 0,	$28, $F8
0000B0BB EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000B0C0 02                         byte_A5EA:	dc.b 2			; invincibility	monitor
0000B0C1 F505 002C F8               		dc.b $F5, 5, 0,	$2C, $F8
0000B0C6 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000B0CB 02                         byte_A5F5:	dc.b 2			; 10 rings monitor
0000B0CC F505 0030 F8               		dc.b $F5, 5, 0,	$30, $F8
0000B0D1 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000B0D6 02                         byte_A600:	dc.b 2			; 'S' monitor
0000B0D7 F505 0034 F8               byte_A601:	dc.b $F5, 5, 0,	$34, $F8
0000B0DC EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000B0E1 02                         byte_A60B:	dc.b 2			; goggles monitor
0000B0E2 F505 0020 F8               		dc.b $F5, 5, 0,	$20, $F8
0000B0E7 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000B0EC 01                         byte_A616:	dc.b 1			; broken monitor
0000B0ED FF0D 0038 F0               		dc.b $FF, $D, 0, $38, $F0
0000B0F2                            		even
0000B0F2                            		even
0000B0F2                            
0000B0F2                            ; ===========================================================================
0000B0F2                            ; ---------------------------------------------------------------------------
0000B0F2                            ; Object 0E - Sonic on the title screen
0000B0F2                            ; ---------------------------------------------------------------------------
0000B0F2                            
0000B0F2                            Obj0E:					; XREF: Obj_Index
0000B0F2 7000                       		moveq	#0,d0
0000B0F4 1028 0024                  		move.b	$24(a0),d0
0000B0F8 323B 0000                  		move.w	Obj0E_Index(pc,d0.w),d1
0000B0FC 4EFB 1000                  		jmp	Obj0E_Index(pc,d1.w)
0000B100                            ; ===========================================================================
0000B100 0000                       Obj0E_Index:	dc.w Obj0E_Main-Obj0E_Index
0000B102 0000                       		dc.w Obj0E_Delay-Obj0E_Index
0000B104 0000                       		dc.w Obj0E_Move-Obj0E_Index
0000B106 0000                       		dc.w Obj0E_Animate-Obj0E_Index
0000B108                            ; ===========================================================================
0000B108                            
0000B108                            Obj0E_Main:				; XREF: Obj0E_Index
0000B108 5428 0024                  		addq.b	#2,$24(a0)
0000B10C 317C 00F8 0008             		move.w	#$F8,8(a0)
0000B112 317C 00DE 000A             		move.w	#$DE,$A(a0)
0000B118 217C 0000 0000 0004        		move.l	#Map_obj0E,4(a0)
0000B120 317C 2300 0002             		move.w	#$2300,2(a0)
0000B126 117C 0001 0018             		move.b	#1,$18(a0)
0000B12C 117C 001D 001F             		move.b	#29,$1F(a0)	; set time delay to 0.5	seconds
0000B132 43F9 0000 0000             		lea	(Ani_obj0E).l,a1
0000B138 6100 0000                  		bsr.w	AnimateSprite
0000B13C                            
0000B13C                            Obj0E_Delay:				; XREF: Obj0E_Index
0000B13C 5328 001F                  		subq.b	#1,$1F(a0)	; subtract 1 from time delay
0000B140 6A00                       		bpl.s	Obj0E_Wait	; if time remains, branch
0000B142 5428 0024                  		addq.b	#2,$24(a0)	; go to	next routine
0000B146 6000 0000                  		bra.w	DisplaySprite
0000B14A                            ; ===========================================================================
0000B14A                            
0000B14A                            Obj0E_Wait:				; XREF: Obj0E_Delay
0000B14A 4E75                       		rts	
0000B14C                            ; ===========================================================================
0000B14C                            
0000B14C                            Obj0E_Move:				; XREF: Obj0E_Index
0000B14C 5168 000A                  		subq.w	#8,$A(a0)
0000B150 0C68 0096 000A             		cmpi.w	#$96,$A(a0)
0000B156 6600                       		bne.s	Obj0E_Display
0000B158 5428 0024                  		addq.b	#2,$24(a0)
0000B15C                            
0000B15C                            Obj0E_Display:
0000B15C 6000 0000                  		bra.w	DisplaySprite
0000B160                            ; ===========================================================================
0000B160 4E75                       		rts	
0000B162                            ; ===========================================================================
0000B162                            
0000B162                            Obj0E_Animate:				; XREF: Obj0E_Index
0000B162 43F9 0000 0000             		lea	(Ani_obj0E).l,a1
0000B168 6100 0000                  		bsr.w	AnimateSprite
0000B16C 6000 0000                  		bra.w	DisplaySprite
0000B170                            ; ===========================================================================
0000B170 4E75                       		rts	
0000B172                            ; ===========================================================================
0000B172                            ; ---------------------------------------------------------------------------
0000B172                            ; Object 0F - "PRESS START BUTTON" and "TM" from title screen
0000B172                            ; ---------------------------------------------------------------------------
0000B172                            
0000B172                            Obj0F:					; XREF: Obj_Index
0000B172 7000                       		moveq	#0,d0
0000B174 1028 0024                  		move.b	$24(a0),d0
0000B178 323B 0000                  		move.w	Obj0F_Index(pc,d0.w),d1
0000B17C 4EBB 1000                  		jsr	Obj0F_Index(pc,d1.w)
0000B180 6000 0000                  		bra.w	DisplaySprite
0000B184                            ; ===========================================================================
0000B184 0000                       Obj0F_Index:	dc.w Obj0F_Main-Obj0F_Index
0000B186 0000                       		dc.w Obj0F_PrsStart-Obj0F_Index
0000B188 0000                       		dc.w locret_A6F8-Obj0F_Index
0000B18A                            ; ===========================================================================
0000B18A                            
0000B18A                            Obj0F_Main:				; XREF: Obj0F_Index
0000B18A 5428 0024                  		addq.b	#2,$24(a0)
0000B18E 317C 00D8 0008             		move.w	#$D8,8(a0)
0000B194 317C 0130 000A             		move.w	#$130,$A(a0)
0000B19A 217C 0000 0000 0004        		move.l	#Map_obj0F,4(a0)
0000B1A2 317C 0200 0002             		move.w	#$200,2(a0)
0000B1A8 0C28 0002 001A             		cmpi.b	#2,$1A(a0)	; is object "PRESS START"?
0000B1AE 6500                       		bcs.s	Obj0F_PrsStart	; if yes, branch
0000B1B0 5428 0024                  		addq.b	#2,$24(a0)
0000B1B4 0C28 0003 001A             		cmpi.b	#3,$1A(a0)	; is the object	"TM"?
0000B1BA 6600                       		bne.s	locret_A6F8	; if not, branch
0000B1BC 317C 2510 0002             		move.w	#$2510,2(a0)	; "TM" specific	code
0000B1C2 317C 0178 0008             		move.w	#$178,8(a0)
0000B1C8 317C 00F8 000A             		move.w	#$F8,$A(a0)
0000B1CE                            
0000B1CE                            locret_A6F8:				; XREF: Obj0F_Index
0000B1CE 4E75                       		rts	
0000B1D0                            ; ===========================================================================
0000B1D0                            
0000B1D0                            Obj0F_PrsStart:				; XREF: Obj0F_Index
0000B1D0 43F9 0000 0000             		lea	(Ani_obj0F).l,a1
0000B1D6 6000 0000                  		bra.w	AnimateSprite
0000B1DA                            ; ===========================================================================
0000B1DA                            Ani_obj0E:
0000B1DA                            	include "_anim\obj0E.asm"
0000B1DA                            ; ---------------------------------------------------------------------------
0000B1DA                            ; Animation script - Sonic on the title screen
0000B1DA                            ; ---------------------------------------------------------------------------
0000B1DA 0000                       		dc.w byte_A706-Ani_obj0E
0000B1DC 0700 0102 0304 0506 07FE+  byte_A706:	dc.b 7,	0, 1, 2, 3, 4, 5, 6, 7,	$FE, 2,	0
0000B1E8                            		even
0000B1E8                            		even
0000B1E8                            
0000B1E8                            Ani_obj0F:
0000B1E8                            	include "_anim\obj0F.asm"
0000B1E8                            ; ---------------------------------------------------------------------------
0000B1E8                            ; Animation script - "TM" and "PRESS START BUTTON" on the title screen
0000B1E8                            ; ---------------------------------------------------------------------------
0000B1E8 0000                       		dc.w byte_A714-Ani_obj0F
0000B1EA 1F00 01FF                  byte_A714:	dc.b $1F, 0, 1,	$FF
0000B1EE                            		even
0000B1EE                            		even
0000B1EE                            
0000B1EE                            ; ---------------------------------------------------------------------------
0000B1EE                            ; Subroutine to	animate	a sprite using an animation script
0000B1EE                            ; ---------------------------------------------------------------------------
0000B1EE                            
0000B1EE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B1EE                            
0000B1EE                            
0000B1EE                            AnimateSprite:
0000B1EE 7000                       		moveq	#0,d0
0000B1F0 1028 001C                  		move.b	$1C(a0),d0	; move animation number	to d0
0000B1F4 B028 001D                  		cmp.b	$1D(a0),d0	; is animation set to restart?
0000B1F8 6700                       		beq.s	Anim_Run	; if not, branch
0000B1FA 1140 001D                  		move.b	d0,$1D(a0)	; set to "no restart"
0000B1FE 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
0000B204 117C 0000 001E             		move.b	#0,$1E(a0)	; reset	frame duration
0000B20A                            
0000B20A                            Anim_Run:
0000B20A 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
0000B20E 6A00                       		bpl.s	Anim_Wait	; if time remains, branch
0000B210 D040                       		add.w	d0,d0
0000B212 D2F1 0000                  		adda.w	(a1,d0.w),a1	; jump to appropriate animation	script
0000B216 1151 001E                  		move.b	(a1),$1E(a0)	; load frame duration
0000B21A 7200                       		moveq	#0,d1
0000B21C 1228 001B                  		move.b	$1B(a0),d1	; load current frame number
0000B220 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number from script
0000B224 0C00 00FA                  		cmp.b	#$FA,d0					; MJ: is it a flag from FA to FF?
0000B228 6400 0000                  		bhs	Anim_End_FF				; MJ: if so, branch to flag routines
0000B22C                            
0000B22C                            Anim_Next:
0000B22C 1200                       		move.b	d0,d1
0000B22E 0200 001F                  		andi.b	#$1F,d0
0000B232 1140 001A                  		move.b	d0,$1A(a0)	; load sprite number
0000B236 1028 0022                  		move.b	$22(a0),d0
0000B23A E719                       		rol.b	#3,d1
0000B23C B101                       		eor.b	d0,d1
0000B23E 0201 0003                  		andi.b	#3,d1
0000B242 0228 00FC 0001             		andi.b	#$FC,1(a0)
0000B248 8328 0001                  		or.b	d1,1(a0)
0000B24C 5228 001B                  		addq.b	#1,$1B(a0)	; next frame number
0000B250                            
0000B250                            Anim_Wait:
0000B250 4E75                       		rts	
0000B252                            ; ===========================================================================
0000B252                            
0000B252                            Anim_End_FF:
0000B252 5200                       		addq.b	#1,d0		; is the end flag = $FF	?
0000B254 6600                       		bne.s	Anim_End_FE	; if not, branch
0000B256 117C 0000 001B             		move.b	#0,$1B(a0)	; restart the animation
0000B25C 1029 0001                  		move.b	1(a1),d0	; read sprite number
0000B260 60CA                       		bra.s	Anim_Next
0000B262                            ; ===========================================================================
0000B262                            
0000B262                            Anim_End_FE:
0000B262 5200                       		addq.b	#1,d0		; is the end flag = $FE	?
0000B264 6600                       		bne.s	Anim_End_FD	; if not, branch
0000B266 1031 1002                  		move.b	2(a1,d1.w),d0	; read the next	byte in	the script
0000B26A 9128 001B                  		sub.b	d0,$1B(a0)	; jump back d0 bytes in	the script
0000B26E 9200                       		sub.b	d0,d1
0000B270 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number
0000B274 60B6                       		bra.s	Anim_Next
0000B276                            ; ===========================================================================
0000B276                            
0000B276                            Anim_End_FD:
0000B276 5200                       		addq.b	#1,d0		; is the end flag = $FD	?
0000B278 6600                       		bne.s	Anim_End_FC	; if not, branch
0000B27A 1171 1002 001C             		move.b	2(a1,d1.w),$1C(a0) ; read next byte, run that animation
0000B280                            
0000B280                            Anim_End_FC:
0000B280 5200                       		addq.b	#1,d0		; is the end flag = $FC	?
0000B282 6600                       		bne.s	Anim_End_FB	; if not, branch
0000B284 5428 0024                  		addq.b	#2,$24(a0)	; jump to next routine
0000B288                            
0000B288                            Anim_End_FB:
0000B288 5200                       		addq.b	#1,d0		; is the end flag = $FB	?
0000B28A 6600                       		bne.s	Anim_End_FA	; if not, branch
0000B28C 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
0000B292 4228 0025                  		clr.b	$25(a0)		; reset	2nd routine counter
0000B296                            
0000B296                            Anim_End_FA:
0000B296 5200                       		addq.b	#1,d0		; is the end flag = $FA	?
0000B298 6600                       		bne.s	Anim_End	; if not, branch
0000B29A 5428 0025                  		addq.b	#2,$25(a0)	; jump to next routine
0000B29E                            
0000B29E                            Anim_End:
0000B29E 4E75                       		rts	
0000B2A0                            ; End of function AnimateSprite
0000B2A0                            
0000B2A0                            ; ===========================================================================
0000B2A0                            ; ---------------------------------------------------------------------------
0000B2A0                            ; Sprite mappings - "PRESS START BUTTON" and "TM" from title screen
0000B2A0                            ; ---------------------------------------------------------------------------
0000B2A0                            Map_obj0F:
0000B2A0                            	include "_maps\obj0F.asm"
0000B2A0                            ; ---------------------------------------------------------------------------
0000B2A0                            ; Sprite mappings - "PRESS START BUTTON" and "TM" from title screen
0000B2A0                            ; ---------------------------------------------------------------------------
0000B2A0 0000                       		dc.w byte_A7CD-Map_obj0F
0000B2A2 0000                       		dc.w byte_A7CC-Map_obj0F
0000B2A4 0000                       		dc.w byte_A7EB-Map_obj0F
0000B2A6 0000                       		dc.w byte_A882-Map_obj0F
0000B2A8 06                         byte_A7CC:	dc.b 6			; "PRESS START BUTTON"
0000B2A9 000C 00F0 00               byte_A7CD:	dc.b 0,	$C, 0, $F0, 0
0000B2AE 0000 00F3 20               		dc.b 0,	0, 0, $F3, $20
0000B2B3 0000 00F3 30               		dc.b 0,	0, 0, $F3, $30
0000B2B8 000C 00F4 38               		dc.b 0,	$C, 0, $F4, $38
0000B2BD 0008 00F8 60               		dc.b 0,	8, 0, $F8, $60
0000B2C2 0008 00FB 78               		dc.b 0,	8, 0, $FB, $78
0000B2C7 1E                         byte_A7EB:	dc.b $1E		; sprite list filler
0000B2C8 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B2CD B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B2D2 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B2D7 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B2DC B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B2E1 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B2E6 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B2EB B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B2F0 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B2F5 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B2FA D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B2FF D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B304 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B309 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B30E D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B313 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B318 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B31D D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B322 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B327 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B32C F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B331 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B336 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B33B F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B340 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B345 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B34A F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B34F F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B354 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B359 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B35E 01                         byte_A882:	dc.b 1			; "TM"
0000B35F FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8
0000B364                            		even
0000B364                            		even
0000B364                            
0000B364                            ; ---------------------------------------------------------------------------
0000B364                            ; Sprite mappings - Sonic on the title screen
0000B364                            ; ---------------------------------------------------------------------------
0000B364                            Map_obj0E:
0000B364                            	include "_maps\obj0E.asm"
0000B364                            ; ---------------------------------------------------------------------------
0000B364                            ; Sprite mappings - Sonic on the title screen
0000B364                            ; ---------------------------------------------------------------------------
0000B364 0000                       		dc.w byte_A898-Map_obj0E
0000B366 0000                       		dc.w byte_A8CB-Map_obj0E
0000B368 0000                       		dc.w byte_A917-Map_obj0E
0000B36A 0000                       		dc.w byte_A96D-Map_obj0E
0000B36C 0000                       		dc.w byte_A9AF-Map_obj0E
0000B36E 0000                       		dc.w byte_A9E7-Map_obj0E
0000B370 0000                       		dc.w byte_AA47-Map_obj0E
0000B372 0000                       		dc.w byte_AAB1-Map_obj0E
0000B374 0A                         byte_A898:	dc.b $A
0000B375 0808 0000 08               		dc.b 8,	8, 0, 0, 8
0000B37A 100F 0003 08               		dc.b $10, $F, 0, 3, 8
0000B37F 100F 0013 28               		dc.b $10, $F, 0, $13, $28
0000B384 300E 0023 08               		dc.b $30, $E, 0, $23, 8
0000B389 300E 002F 28               		dc.b $30, $E, 0, $2F, $28
0000B38E 480D 003B 00               		dc.b $48, $D, 0, $3B, 0
0000B393 4809 0043 20               		dc.b $48, 9, 0,	$43, $20
0000B398 4800 0049 38               		dc.b $48, 0, 0,	$49, $38
0000B39D 580C 004A 08               		dc.b $58, $C, 0, $4A, 8
0000B3A2 5800 004E 28               		dc.b $58, 0, 0,	$4E, $28
0000B3A7 0F                         byte_A8CB:	dc.b $F
0000B3A8 480E 01BD 20               		dc.b $48, $E, 1, $BD, $20
0000B3AD 3805 01C9 38               		dc.b $38, 5, 1,	$C9, $38
0000B3B2 4000 01CD 30               		dc.b $40, 0, 1,	$CD, $30
0000B3B7 4800 01CE 40               		dc.b $48, 0, 1,	$CE, $40
0000B3BC 6000 01CF 20               		dc.b $60, 0, 1,	$CF, $20
0000B3C1 100E 004F 08               		dc.b $10, $E, 0, $4F, 8
0000B3C6 100E 005B 28               		dc.b $10, $E, 0, $5B, $28
0000B3CB 1801 0067 48               		dc.b $18, 1, 0,	$67, $48
0000B3D0 2802 0069 00               		dc.b $28, 2, 0,	$69, 0
0000B3D5 280F 006C 08               		dc.b $28, $F, 0, $6C, 8
0000B3DA 280F 007C 28               		dc.b $28, $F, 0, $7C, $28
0000B3DF 3002 008C 48               		dc.b $30, 2, 0,	$8C, $48
0000B3E4 480E 008F 10               		dc.b $48, $E, 0, $8F, $10
0000B3E9 4809 009B 30               		dc.b $48, 9, 0,	$9B, $30
0000B3EE 5804 00A1 30               		dc.b $58, 4, 0,	$A1, $30
0000B3F3 11                         byte_A917:	dc.b $11
0000B3F4 380E 01BD 28               		dc.b $38, $E, 1, $BD, $28
0000B3F9 2805 01C9 40               		dc.b $28, 5, 1,	$C9, $40
0000B3FE 3000 01CD 38               		dc.b $30, 0, 1,	$CD, $38
0000B403 3800 01CE 48               		dc.b $38, 0, 1,	$CE, $48
0000B408 5000 01CF 28               		dc.b $50, 0, 1,	$CF, $28
0000B40D 200F 01A9 08               		dc.b $20, $F, 1, $A9, 8
0000B412 2003 01B9 28               		dc.b $20, 3, 1,	$B9, $28
0000B417 100E 004F 08               		dc.b $10, $E, 0, $4F, 8
0000B41C 100E 005B 28               		dc.b $10, $E, 0, $5B, $28
0000B421 1801 0067 48               		dc.b $18, 1, 0,	$67, $48
0000B426 2802 0069 00               		dc.b $28, 2, 0,	$69, 0
0000B42B 280F 006C 08               		dc.b $28, $F, 0, $6C, 8
0000B430 280F 007C 28               		dc.b $28, $F, 0, $7C, $28
0000B435 3002 008C 48               		dc.b $30, 2, 0,	$8C, $48
0000B43A 480E 008F 10               		dc.b $48, $E, 0, $8F, $10
0000B43F 4809 009B 30               		dc.b $48, 9, 0,	$9B, $30
0000B444 5804 00A1 30               		dc.b $58, 4, 0,	$A1, $30
0000B449 0D                         byte_A96D:	dc.b $D
0000B44A 100F 00A3 08               		dc.b $10, $F, 0, $A3, 8
0000B44F 0808 00B3 28               		dc.b 8,	8, 0, $B3, $28
0000B454 100F 00B6 28               		dc.b $10, $F, 0, $B6, $28
0000B459 1800 00C6 48               		dc.b $18, 0, 0,	$C6, $48
0000B45E 2006 00C7 48               		dc.b $20, 6, 0,	$C7, $48
0000B463 3800 00CD 48               		dc.b $38, 0, 0,	$CD, $48
0000B468 300D 00CE 08               		dc.b $30, $D, 0, $CE, 8
0000B46D 300E 00D6 28               		dc.b $30, $E, 0, $D6, $28
0000B472 400B 00E2 10               		dc.b $40, $B, 0, $E2, $10
0000B477 4808 00EE 28               		dc.b $48, 8, 0,	$EE, $28
0000B47C 5001 00F1 08               		dc.b $50, 1, 0,	$F1, 8
0000B481 5004 00F3 28               		dc.b $50, 4, 0,	$F3, $28
0000B486 5800 00F5 28               		dc.b $58, 0, 0,	$F5, $28
0000B48B 0B                         byte_A9AF:	dc.b $B
0000B48C 080F 00F6 10               		dc.b 8,	$F, 0, $F6, $10
0000B491 080B 0106 30               		dc.b 8,	$B, 1, 6, $30
0000B496 1006 0112 48               		dc.b $10, 6, 1,	$12, $48
0000B49B 280E 0118 18               		dc.b $28, $E, 1, $18, $18
0000B4A0 280E 0124 38               		dc.b $28, $E, 1, $24, $38
0000B4A5 2801 0130 10               		dc.b $28, 1, 1,	$30, $10
0000B4AA 400E 0132 10               		dc.b $40, $E, 1, $32, $10
0000B4AF 4006 013E 30               		dc.b $40, 6, 1,	$3E, $30
0000B4B4 4004 0144 40               		dc.b $40, 4, 1,	$44, $40
0000B4B9 4800 0146 40               		dc.b $48, 0, 1,	$46, $40
0000B4BE 5808 0147 18               		dc.b $58, 8, 1,	$47, $18
0000B4C3 13                         byte_A9E7:	dc.b $13
0000B4C4 280E 01E4 38               		dc.b $28, $E, 1, $E4, $38
0000B4C9 1805 01F0 48               		dc.b $18, 5, 1,	$F0, $48
0000B4CE 4008 01F4 38               		dc.b $40, 8, 1,	$F4, $38
0000B4D3 4804 01F7 38               		dc.b $48, 4, 1,	$F7, $38
0000B4D8 100F 014A 10               		dc.b $10, $F, 1, $4A, $10
0000B4DD 0804 015A 20               		dc.b 8,	4, 1, $5A, $20
0000B4E2 000B 015C 30               		dc.b 0,	$B, 1, $5C, $30
0000B4E7 0800 0168 48               		dc.b 8,	0, 1, $68, $48
0000B4EC 1800 0169 48               		dc.b $18, 0, 1,	$69, $48
0000B4F1 1805 016A 00               		dc.b $18, 5, 1,	$6A, 0
0000B4F6 2802 016E 08               		dc.b $28, 2, 1,	$6E, 8
0000B4FB 300F 0171 10               		dc.b $30, $F, 1, $71, $10
0000B500 200D 0181 30               		dc.b $20, $D, 1, $81, $30
0000B505 2001 0189 50               		dc.b $20, 1, 1,	$89, $50
0000B50A 3008 018B 30               		dc.b $30, 8, 1,	$8B, $30
0000B50F 380E 018E 30               		dc.b $38, $E, 1, $8E, $30
0000B514 500D 019A 08               		dc.b $50, $D, 1, $9A, 8
0000B519 500C 01A2 28               		dc.b $50, $C, 1, $A2, $28
0000B51E 5808 01A6 28               		dc.b $58, 8, 1,	$A6, $28
0000B523 15                         byte_AA47:	dc.b $15
0000B524 280E 01E4 38               		dc.b $28, $E, 1, $E4, $38
0000B529 1805 01F0 48               		dc.b $18, 5, 1,	$F0, $48
0000B52E 4008 01F4 38               		dc.b $40, 8, 1,	$F4, $38
0000B533 4804 01F7 38               		dc.b $48, 4, 1,	$F7, $38
0000B538 180F 01D0 08               		dc.b $18, $F, 1, $D0, 8
0000B53D 1803 01E0 28               		dc.b $18, 3, 1,	$E0, $28
0000B542 100F 014A 10               		dc.b $10, $F, 1, $4A, $10
0000B547 0804 015A 20               		dc.b 8,	4, 1, $5A, $20
0000B54C 000B 015C 30               		dc.b 0,	$B, 1, $5C, $30
0000B551 0800 0168 48               		dc.b 8,	0, 1, $68, $48
0000B556 1800 0169 48               		dc.b $18, 0, 1,	$69, $48
0000B55B 1805 016A 00               		dc.b $18, 5, 1,	$6A, 0
0000B560 2802 016E 08               		dc.b $28, 2, 1,	$6E, 8
0000B565 300F 0171 10               		dc.b $30, $F, 1, $71, $10
0000B56A 200D 0181 30               		dc.b $20, $D, 1, $81, $30
0000B56F 2001 0189 50               		dc.b $20, 1, 1,	$89, $50
0000B574 3008 018B 30               		dc.b $30, 8, 1,	$8B, $30
0000B579 380E 018E 30               		dc.b $38, $E, 1, $8E, $30
0000B57E 500D 019A 08               		dc.b $50, $D, 1, $9A, 8
0000B583 500C 01A2 28               		dc.b $50, $C, 1, $A2, $28
0000B588 5808 01A6 28               		dc.b $58, 8, 1,	$A6, $28
0000B58D 16                         byte_AAB1:	dc.b $16
0000B58E 1804 01F9 38               		dc.b $18, 4, 1,	$F9, $38
0000B593 2000 01FB 38               		dc.b $20, 0, 1,	$FB, $38
0000B598 2808 01FC 30               		dc.b $28, 8, 1,	$FC, $30
0000B59D 3001 01FF 30               		dc.b $30, 1, 1,	$FF, $30
0000B5A2 300B 0201 38               		dc.b $30, $B, 2, 1, $38
0000B5A7 180F 01D0 08               		dc.b $18, $F, 1, $D0, 8
0000B5AC 1803 01E0 28               		dc.b $18, 3, 1,	$E0, $28
0000B5B1 100F 014A 10               		dc.b $10, $F, 1, $4A, $10
0000B5B6 0804 015A 20               		dc.b 8,	4, 1, $5A, $20
0000B5BB 000B 015C 30               		dc.b 0,	$B, 1, $5C, $30
0000B5C0 0800 0168 48               		dc.b 8,	0, 1, $68, $48
0000B5C5 1800 0169 48               		dc.b $18, 0, 1,	$69, $48
0000B5CA 1805 016A 00               		dc.b $18, 5, 1,	$6A, 0
0000B5CF 2802 016E 08               		dc.b $28, 2, 1,	$6E, 8
0000B5D4 300F 0171 10               		dc.b $30, $F, 1, $71, $10
0000B5D9 200D 0181 30               		dc.b $20, $D, 1, $81, $30
0000B5DE 2001 0189 50               		dc.b $20, 1, 1,	$89, $50
0000B5E3 3008 018B 30               		dc.b $30, 8, 1,	$8B, $30
0000B5E8 380E 018E 30               		dc.b $38, $E, 1, $8E, $30
0000B5ED 500D 019A 08               		dc.b $50, $D, 1, $9A, 8
0000B5F2 500C 01A2 28               		dc.b $50, $C, 1, $A2, $28
0000B5F7 5808 01A6 28               		dc.b $58, 8, 1,	$A6, $28
0000B5FC                            		even
0000B5FC                            		even
0000B5FC                            
0000B5FC                            ; ===========================================================================
0000B5FC                            ; ---------------------------------------------------------------------------
0000B5FC                            ; Object 2B - Chopper enemy (GHZ)
0000B5FC                            ; ---------------------------------------------------------------------------
0000B5FC                            
0000B5FC                            Obj2B:					; XREF: Obj_Index
0000B5FC 7000                       		moveq	#0,d0
0000B5FE 1028 0024                  		move.b	$24(a0),d0
0000B602 323B 0000                  		move.w	Obj2B_Index(pc,d0.w),d1
0000B606 4EBB 1000                  		jsr	Obj2B_Index(pc,d1.w)
0000B60A 6000 0000                  		bra.w	MarkObjGone
0000B60E                            ; ===========================================================================
0000B60E 0000                       Obj2B_Index:	dc.w Obj2B_Main-Obj2B_Index
0000B610 0000                       		dc.w Obj2B_ChgSpeed-Obj2B_Index
0000B612                            ; ===========================================================================
0000B612                            
0000B612                            Obj2B_Main:				; XREF: Obj2B_Index
0000B612 5428 0024                  		addq.b	#2,$24(a0)
0000B616 217C 0000 0000 0004        		move.l	#Map_obj2B,4(a0)
0000B61E 317C 047B 0002             		move.w	#$47B,2(a0)
0000B624 117C 0004 0001             		move.b	#4,1(a0)
0000B62A 117C 0004 0018             		move.b	#4,$18(a0)
0000B630 117C 0009 0020             		move.b	#9,$20(a0)
0000B636 117C 0010 0019             		move.b	#$10,$19(a0)
0000B63C 317C F900 0012             		move.w	#-$700,$12(a0)	; set vertical speed
0000B642 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000B648                            
0000B648                            Obj2B_ChgSpeed:				; XREF: Obj2B_Index
0000B648 43F9 0000 0000             		lea	(Ani_obj2B).l,a1
0000B64E 6100 FB9E                  		bsr.w	AnimateSprite
0000B652 6100 0000                  		bsr.w	SpeedToPos
0000B656 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce speed
0000B65C 3028 0030                  		move.w	$30(a0),d0
0000B660 B068 000C                  		cmp.w	$C(a0),d0
0000B664 6400                       		bcc.s	Obj2B_ChgAni
0000B666 3140 000C                  		move.w	d0,$C(a0)
0000B66A 317C F900 0012             		move.w	#-$700,$12(a0)	; set vertical speed
0000B670                            
0000B670                            Obj2B_ChgAni:
0000B670 117C 0001 001C             		move.b	#1,$1C(a0)	; use fast animation
0000B676 0440 00C0                  		subi.w	#$C0,d0
0000B67A B068 000C                  		cmp.w	$C(a0),d0
0000B67E 6400                       		bcc.s	locret_ABB6
0000B680 117C 0000 001C             		move.b	#0,$1C(a0)	; use slow animation
0000B686 4A68 0012                  		tst.w	$12(a0)		; is Chopper at	its highest point?
0000B68A 6B00                       		bmi.s	locret_ABB6	; if not, branch
0000B68C 117C 0002 001C             		move.b	#2,$1C(a0)	; use stationary animation
0000B692                            
0000B692                            locret_ABB6:
0000B692 4E75                       		rts	
0000B694                            ; ===========================================================================
0000B694                            Ani_obj2B:
0000B694                            	include "_anim\obj2B.asm"
0000B694                            ; ---------------------------------------------------------------------------
0000B694                            ; Animation script - Chopper enemy
0000B694                            ; ---------------------------------------------------------------------------
0000B694 0000                       		dc.w byte_ABBE-Ani_obj2B
0000B696 0000                       		dc.w byte_ABC2-Ani_obj2B
0000B698 0000                       		dc.w byte_ABC6-Ani_obj2B
0000B69A 0700 01FF                  byte_ABBE:	dc.b 7,	0, 1, $FF
0000B69E 0300 01FF                  byte_ABC2:	dc.b 3,	0, 1, $FF
0000B6A2 0700 FF                    byte_ABC6:	dc.b 7,	0, $FF
0000B6A6 00                         		even
0000B6A6 00                         		even
0000B6A6                            
0000B6A6                            ; ---------------------------------------------------------------------------
0000B6A6                            ; Sprite mappings - Chopper enemy (GHZ)
0000B6A6                            ; ---------------------------------------------------------------------------
0000B6A6                            Map_obj2B:
0000B6A6                            	include "_maps\obj2B.asm"
0000B6A6                            ; ---------------------------------------------------------------------------
0000B6A6                            ; Sprite mappings - Chopper enemy (GHZ)
0000B6A6                            ; ---------------------------------------------------------------------------
0000B6A6 0000                       		dc.w byte_ABCE-Map_obj2B
0000B6A8 0000                       		dc.w byte_ABD4-Map_obj2B
0000B6AA 01                         byte_ABCE:	dc.b 1
0000B6AB F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0000B6B0 01                         byte_ABD4:	dc.b 1
0000B6B1 F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
0000B6B6                            		even
0000B6B6                            		even
0000B6B6                            
0000B6B6                            ; ===========================================================================
0000B6B6                            ; ---------------------------------------------------------------------------
0000B6B6                            ; Object 2C - Jaws enemy (LZ)
0000B6B6                            ; ---------------------------------------------------------------------------
0000B6B6                            
0000B6B6                            Obj2C:					; XREF: Obj_Index
0000B6B6 7000                       		moveq	#0,d0
0000B6B8 1028 0024                  		move.b	$24(a0),d0
0000B6BC 323B 0000                  		move.w	Obj2C_Index(pc,d0.w),d1
0000B6C0 4EFB 1000                  		jmp	Obj2C_Index(pc,d1.w)
0000B6C4                            ; ===========================================================================
0000B6C4 0000                       Obj2C_Index:	dc.w Obj2C_Main-Obj2C_Index
0000B6C6 0000                       		dc.w Obj2C_Turn-Obj2C_Index
0000B6C8                            ; ===========================================================================
0000B6C8                            
0000B6C8                            Obj2C_Main:				; XREF: Obj2C_Index
0000B6C8 5428 0024                  		addq.b	#2,$24(a0)
0000B6CC 217C 0000 0000 0004        		move.l	#Map_obj2C,4(a0)
0000B6D4 317C 2486 0002             		move.w	#$2486,2(a0)
0000B6DA 0028 0004 0001             		ori.b	#4,1(a0)
0000B6E0 117C 000A 0020             		move.b	#$A,$20(a0)
0000B6E6 117C 0004 0018             		move.b	#4,$18(a0)
0000B6EC 117C 0010 0019             		move.b	#$10,$19(a0)
0000B6F2 7000                       		moveq	#0,d0
0000B6F4 1028 0028                  		move.b	$28(a0),d0	; load object subtype number
0000B6F8 ED48                       		lsl.w	#6,d0		; multiply d0 by 64
0000B6FA 5340                       		subq.w	#1,d0
0000B6FC 3140 0030                  		move.w	d0,$30(a0)	; set turn delay time
0000B700 3140 0032                  		move.w	d0,$32(a0)
0000B704 317C FFC0 0010             		move.w	#-$40,$10(a0)	; move Jaws to the left
0000B70A 0828 0000 0022             		btst	#0,$22(a0)	; is Jaws facing left?
0000B710 6700                       		beq.s	Obj2C_Turn	; if yes, branch
0000B712 4468 0010                  		neg.w	$10(a0)		; move Jaws to the right
0000B716                            
0000B716                            Obj2C_Turn:				; XREF: Obj2C_Index
0000B716 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from turn delay time
0000B71A 6A00                       		bpl.s	Obj2C_Animate	; if time remains, branch
0000B71C 3168 0032 0030             		move.w	$32(a0),$30(a0)	; reset	turn delay time
0000B722 4468 0010                  		neg.w	$10(a0)		; change speed direction
0000B726 0868 0000 0022             		bchg	#0,$22(a0)	; change Jaws facing direction
0000B72C 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000B732                            
0000B732                            Obj2C_Animate:
0000B732 43F9 0000 0000             		lea	(Ani_obj2C).l,a1
0000B738 6100 FAB4                  		bsr.w	AnimateSprite
0000B73C 6100 0000                  		bsr.w	SpeedToPos
0000B740 6000 0000                  		bra.w	MarkObjGone
0000B744                            ; ===========================================================================
0000B744                            Ani_obj2C:
0000B744                            	include "_anim\obj2C.asm"
0000B744                            ; ---------------------------------------------------------------------------
0000B744                            ; Animation script - Jaws enemy
0000B744                            ; ---------------------------------------------------------------------------
0000B744 0000                       		dc.w byte_AC6A-Ani_obj2C
0000B746 0700 0102 03FF             byte_AC6A:	dc.b 7,	0, 1, 2, 3, $FF
0000B74C                            		even
0000B74C                            		even
0000B74C                            
0000B74C                            ; ---------------------------------------------------------------------------
0000B74C                            ; Sprite mappings - Jaws enemy (LZ)
0000B74C                            ; ---------------------------------------------------------------------------
0000B74C                            Map_obj2C:
0000B74C                            	include "_maps\obj2C.asm"
0000B74C                            ; ---------------------------------------------------------------------------
0000B74C                            ; Sprite mappings - Jaws enemy (LZ)
0000B74C                            ; ---------------------------------------------------------------------------
0000B74C 0000                       		dc.w byte_AC78-Map_obj2C
0000B74E 0000                       		dc.w byte_AC83-Map_obj2C
0000B750 0000                       		dc.w byte_AC8E-Map_obj2C
0000B752 0000                       		dc.w byte_AC99-Map_obj2C
0000B754 02                         byte_AC78:	dc.b 2
0000B755 F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
0000B75A F505 0018 10               		dc.b $F5, 5, 0,	$18, $10
0000B75F 02                         byte_AC83:	dc.b 2
0000B760 F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
0000B765 F505 001C 10               		dc.b $F5, 5, 0,	$1C, $10
0000B76A 02                         byte_AC8E:	dc.b 2
0000B76B F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
0000B770 F505 1018 10               		dc.b $F5, 5, $10, $18, $10
0000B775 02                         byte_AC99:	dc.b 2
0000B776 F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
0000B77B F505 101C 10               		dc.b $F5, 5, $10, $1C, $10
0000B780                            		even
0000B780                            		even
0000B780                            
0000B780                            ; ===========================================================================
0000B780                            ; ---------------------------------------------------------------------------
0000B780                            ; Object 2D - Burrobot enemy (LZ)
0000B780                            ; ---------------------------------------------------------------------------
0000B780                            
0000B780                            Obj2D:					; XREF: Obj_Index
0000B780 7000                       		moveq	#0,d0
0000B782 1028 0024                  		move.b	$24(a0),d0
0000B786 323B 0000                  		move.w	Obj2D_Index(pc,d0.w),d1
0000B78A 4EFB 1000                  		jmp	Obj2D_Index(pc,d1.w)
0000B78E                            ; ===========================================================================
0000B78E 0000                       Obj2D_Index:	dc.w Obj2D_Main-Obj2D_Index
0000B790 0000                       		dc.w Obj2D_Action-Obj2D_Index
0000B792                            ; ===========================================================================
0000B792                            
0000B792                            Obj2D_Main:				; XREF: Obj2D_Index
0000B792 5428 0024                  		addq.b	#2,$24(a0)
0000B796 117C 0013 0016             		move.b	#$13,$16(a0)
0000B79C 117C 0008 0017             		move.b	#8,$17(a0)
0000B7A2 217C 0000 0000 0004        		move.l	#Map_obj2D,4(a0)
0000B7AA 317C 04A6 0002             		move.w	#$4A6,2(a0)
0000B7B0 0028 0004 0001             		ori.b	#4,1(a0)
0000B7B6 117C 0004 0018             		move.b	#4,$18(a0)
0000B7BC 117C 0005 0020             		move.b	#5,$20(a0)
0000B7C2 117C 000C 0019             		move.b	#$C,$19(a0)
0000B7C8 5C28 0025                  		addq.b	#6,$25(a0)	; run "Obj2D_ChkSonic" routine
0000B7CC 117C 0002 001C             		move.b	#2,$1C(a0)
0000B7D2                            
0000B7D2                            Obj2D_Action:				; XREF: Obj2D_Index
0000B7D2 7000                       		moveq	#0,d0
0000B7D4 1028 0025                  		move.b	$25(a0),d0
0000B7D8 323B 0000                  		move.w	Obj2D_Index2(pc,d0.w),d1
0000B7DC 4EBB 1000                  		jsr	Obj2D_Index2(pc,d1.w)
0000B7E0 43F9 0000 0000             		lea	(Ani_obj2D).l,a1
0000B7E6 6100 FA06                  		bsr.w	AnimateSprite
0000B7EA 6000 0000                  		bra.w	MarkObjGone
0000B7EE                            ; ===========================================================================
0000B7EE 0000                       Obj2D_Index2:	dc.w Obj2D_ChgDir-Obj2D_Index2
0000B7F0 0000                       		dc.w Obj2D_Move-Obj2D_Index2
0000B7F2 0000                       		dc.w Obj2D_Jump-Obj2D_Index2
0000B7F4 0000                       		dc.w Obj2D_ChkSonic-Obj2D_Index2
0000B7F6                            ; ===========================================================================
0000B7F6                            
0000B7F6                            Obj2D_ChgDir:				; XREF: Obj2D_Index2
0000B7F6 5368 0030                  		subq.w	#1,$30(a0)
0000B7FA 6A00                       		bpl.s	locret_AD42
0000B7FC 5428 0025                  		addq.b	#2,$25(a0)
0000B800 317C 00FF 0030             		move.w	#$FF,$30(a0)
0000B806 317C 0080 0010             		move.w	#$80,$10(a0)
0000B80C 117C 0001 001C             		move.b	#1,$1C(a0)
0000B812 0868 0000 0022             		bchg	#0,$22(a0)	; change direction the Burrobot	is facing
0000B818 6700                       		beq.s	locret_AD42
0000B81A 4468 0010                  		neg.w	$10(a0)		; change direction the Burrobot	is moving
0000B81E                            
0000B81E                            locret_AD42:
0000B81E 4E75                       		rts	
0000B820                            ; ===========================================================================
0000B820                            
0000B820                            Obj2D_Move:				; XREF: Obj2D_Index2
0000B820 5368 0030                  		subq.w	#1,$30(a0)
0000B824 6B00                       		bmi.s	loc_AD84
0000B826 6100 0000                  		bsr.w	SpeedToPos
0000B82A 0868 0000 0032             		bchg	#0,$32(a0)
0000B830 6600                       		bne.s	loc_AD78
0000B832 3628 0008                  		move.w	8(a0),d3
0000B836 0643 000C                  		addi.w	#$C,d3
0000B83A 0828 0000 0022             		btst	#0,$22(a0)
0000B840 6600                       		bne.s	loc_AD6A
0000B842 0443 0018                  		subi.w	#$18,d3
0000B846                            
0000B846                            loc_AD6A:
0000B846 4EB9 0000 0000             		jsr	ObjHitFloor2
0000B84C 0C41 000C                  		cmpi.w	#$C,d1
0000B850 6C00                       		bge.s	loc_AD84
0000B852 4E75                       		rts	
0000B854                            ; ===========================================================================
0000B854                            
0000B854                            loc_AD78:				; XREF: Obj2D_Move
0000B854 4EB9 0000 0000             		jsr	ObjHitFloor
0000B85A D368 000C                  		add.w	d1,$C(a0)
0000B85E 4E75                       		rts	
0000B860                            ; ===========================================================================
0000B860                            
0000B860                            loc_AD84:				; XREF: Obj2D_Move
0000B860 0838 0002 FE0F             		btst	#2,($FFFFFE0F).w
0000B866 6700                       		beq.s	loc_ADA4
0000B868 5528 0025                  		subq.b	#2,$25(a0)
0000B86C 317C 003B 0030             		move.w	#$3B,$30(a0)
0000B872 317C 0000 0010             		move.w	#0,$10(a0)
0000B878 117C 0000 001C             		move.b	#0,$1C(a0)
0000B87E 4E75                       		rts	
0000B880                            ; ===========================================================================
0000B880                            
0000B880                            loc_ADA4:
0000B880 5428 0025                  		addq.b	#2,$25(a0)
0000B884 317C FC00 0012             		move.w	#-$400,$12(a0)
0000B88A 117C 0002 001C             		move.b	#2,$1C(a0)
0000B890 4E75                       		rts	
0000B892                            ; ===========================================================================
0000B892                            
0000B892                            Obj2D_Jump:				; XREF: Obj2D_Index2
0000B892 6100 0000                  		bsr.w	SpeedToPos
0000B896 0668 0018 0012             		addi.w	#$18,$12(a0)
0000B89C 6B00                       		bmi.s	locret_ADF0
0000B89E 117C 0003 001C             		move.b	#3,$1C(a0)
0000B8A4 4EB9 0000 0000             		jsr	ObjHitFloor
0000B8AA 4A41                       		tst.w	d1
0000B8AC 6A00                       		bpl.s	locret_ADF0
0000B8AE D368 000C                  		add.w	d1,$C(a0)
0000B8B2 317C 0000 0012             		move.w	#0,$12(a0)
0000B8B8 117C 0001 001C             		move.b	#1,$1C(a0)
0000B8BE 317C 00FF 0030             		move.w	#$FF,$30(a0)
0000B8C4 5528 0025                  		subq.b	#2,$25(a0)
0000B8C8 6100 0000                  		bsr.w	Obj2D_ChkSonic2
0000B8CC                            
0000B8CC                            locret_ADF0:
0000B8CC 4E75                       		rts	
0000B8CE                            ; ===========================================================================
0000B8CE                            
0000B8CE                            Obj2D_ChkSonic:				; XREF: Obj2D_Index2
0000B8CE 343C 0060                  		move.w	#$60,d2
0000B8D2 6100 0000                  		bsr.w	Obj2D_ChkSonic2
0000B8D6 6400                       		bcc.s	locret_AE20
0000B8D8 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000B8DC 9068 000C                  		sub.w	$C(a0),d0
0000B8E0 6400                       		bcc.s	locret_AE20
0000B8E2 0C40 FF80                  		cmpi.w	#-$80,d0
0000B8E6 6500                       		bcs.s	locret_AE20
0000B8E8 4A78 FE08                  		tst.w	($FFFFFE08).w
0000B8EC 6600                       		bne.s	locret_AE20
0000B8EE 5528 0025                  		subq.b	#2,$25(a0)
0000B8F2 3141 0010                  		move.w	d1,$10(a0)
0000B8F6 317C FC00 0012             		move.w	#-$400,$12(a0)
0000B8FC                            
0000B8FC                            locret_AE20:
0000B8FC 4E75                       		rts	
0000B8FE                            
0000B8FE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B8FE                            
0000B8FE                            
0000B8FE                            Obj2D_ChkSonic2:			; XREF: Obj2D_ChkSonic
0000B8FE 323C 0080                  		move.w	#$80,d1
0000B902 08E8 0000 0022             		bset	#0,$22(a0)
0000B908 3038 D008                  		move.w	($FFFFD008).w,d0
0000B90C 9068 0008                  		sub.w	8(a0),d0
0000B910 6400                       		bcc.s	loc_AE40
0000B912 4440                       		neg.w	d0
0000B914 4441                       		neg.w	d1
0000B916 08A8 0000 0022             		bclr	#0,$22(a0)
0000B91C                            
0000B91C                            loc_AE40:
0000B91C B042                       		cmp.w	d2,d0
0000B91E 4E75                       		rts	
0000B920                            ; End of function Obj2D_ChkSonic2
0000B920                            
0000B920                            ; ===========================================================================
0000B920                            Ani_obj2D:
0000B920                            	include "_anim\obj2D.asm"
0000B920                            ; ---------------------------------------------------------------------------
0000B920                            ; Animation script - Burrobot enemy
0000B920                            ; ---------------------------------------------------------------------------
0000B920 0000                       		dc.w byte_AE4C-Ani_obj2D
0000B922 0000                       		dc.w byte_AE50-Ani_obj2D
0000B924 0000                       		dc.w byte_AE54-Ani_obj2D
0000B926 0000                       		dc.w byte_AE58-Ani_obj2D
0000B928 0300 06FF                  byte_AE4C:	dc.b 3,	0, 6, $FF
0000B92C 0300 01FF                  byte_AE50:	dc.b 3,	0, 1, $FF
0000B930 0302 03FF                  byte_AE54:	dc.b 3,	2, 3, $FF
0000B934 0304 FF                    byte_AE58:	dc.b 3,	4, $FF
0000B938 00                         		even
0000B938 00                         		even
0000B938                            
0000B938                            ; ---------------------------------------------------------------------------
0000B938                            ; Sprite mappings - Burrobot enemy (LZ)
0000B938                            ; ---------------------------------------------------------------------------
0000B938                            Map_obj2D:
0000B938                            	include "_maps\obj2D.asm"
0000B938                            ; ---------------------------------------------------------------------------
0000B938                            ; Sprite mappings - Burrobot enemy (LZ)
0000B938                            ; ---------------------------------------------------------------------------
0000B938 0000                       		dc.w byte_AE6A-Map_obj2D
0000B93A 0000                       		dc.w byte_AE75-Map_obj2D
0000B93C 0000                       		dc.w byte_AE80-Map_obj2D
0000B93E 0000                       		dc.w byte_AE8B-Map_obj2D
0000B940 0000                       		dc.w byte_AE96-Map_obj2D
0000B942 0000                       		dc.w byte_AEA1-Map_obj2D
0000B944 0000                       		dc.w byte_AEAC-Map_obj2D
0000B946 02                         byte_AE6A:	dc.b 2
0000B947 EC0A 0000 F0               		dc.b $EC, $A, 0, 0, $F0
0000B94C 0409 0009 F4               		dc.b 4,	9, 0, 9, $F4
0000B951 02                         byte_AE75:	dc.b 2
0000B952 EC0A 000F F0               		dc.b $EC, $A, 0, $F, $F0
0000B957 0409 0018 F4               		dc.b 4,	9, 0, $18, $F4
0000B95C 02                         byte_AE80:	dc.b 2
0000B95D E80A 001E F4               		dc.b $E8, $A, 0, $1E, $F4
0000B962 000A 0027 F4               		dc.b 0,	$A, 0, $27, $F4
0000B967 02                         byte_AE8B:	dc.b 2
0000B968 E80A 0030 F4               		dc.b $E8, $A, 0, $30, $F4
0000B96D 000A 0039 F4               		dc.b 0,	$A, 0, $39, $F4
0000B972 02                         byte_AE96:	dc.b 2
0000B973 E80A 000F F0               		dc.b $E8, $A, 0, $F, $F0
0000B978 000A 0042 F4               		dc.b 0,	$A, 0, $42, $F4
0000B97D 02                         byte_AEA1:	dc.b 2
0000B97E F406 004B E8               		dc.b $F4, 6, 0,	$4B, $E8
0000B983 F40A 0051 F8               		dc.b $F4, $A, 0, $51, $F8
0000B988 02                         byte_AEAC:	dc.b 2
0000B989 EC0A 000F F0               		dc.b $EC, $A, 0, $F, $F0
0000B98E 0409 0009 F4               		dc.b 4,	9, 0, 9, $F4
0000B994 00                         		even
0000B994 00                         		even
0000B994                            
0000B994                            ; ===========================================================================
0000B994                            ; ---------------------------------------------------------------------------
0000B994                            ; Object 2F - large moving platforms (MZ)
0000B994                            ; ---------------------------------------------------------------------------
0000B994                            
0000B994                            Obj2F:					; XREF: Obj_Index
0000B994 7000                       		moveq	#0,d0
0000B996 1028 0024                  		move.b	$24(a0),d0
0000B99A 323B 0000                  		move.w	Obj2F_Index(pc,d0.w),d1
0000B99E 4EFB 1000                  		jmp	Obj2F_Index(pc,d1.w)
0000B9A2                            ; ===========================================================================
0000B9A2 0000                       Obj2F_Index:	dc.w Obj2F_Main-Obj2F_Index
0000B9A4 0000                       		dc.w Obj2F_Action-Obj2F_Index
0000B9A6                            
0000B9A6 0000                       Obj2F_Data:	dc.w Obj2F_Data1-Obj2F_Data 	; collision angle data
0000B9A8 0040                       		dc.b 0,	$40			; frame	number,	platform width
0000B9AA 0000                       		dc.w Obj2F_Data3-Obj2F_Data
0000B9AC 0140                       		dc.b 1,	$40
0000B9AE 0000                       		dc.w Obj2F_Data2-Obj2F_Data
0000B9B0 0220                       		dc.b 2,	$20
0000B9B2                            ; ===========================================================================
0000B9B2                            
0000B9B2                            Obj2F_Main:				; XREF: Obj2F_Index
0000B9B2 5428 0024                  		addq.b	#2,$24(a0)
0000B9B6 217C 0000 0000 0004        		move.l	#Map_obj2F,4(a0)
0000B9BE 317C C000 0002             		move.w	#$C000,2(a0)
0000B9C4 117C 0004 0001             		move.b	#4,1(a0)
0000B9CA 117C 0005 0018             		move.b	#5,$18(a0)
0000B9D0 3168 000C 002C             		move.w	$C(a0),$2C(a0)
0000B9D6 3168 0008 002A             		move.w	8(a0),$2A(a0)
0000B9DC 7000                       		moveq	#0,d0
0000B9DE 1028 0028                  		move.b	$28(a0),d0
0000B9E2 E448                       		lsr.w	#2,d0
0000B9E4 0240 001C                  		andi.w	#$1C,d0
0000B9E8 43FB 00BC                  		lea	Obj2F_Data(pc,d0.w),a1
0000B9EC 3019                       		move.w	(a1)+,d0
0000B9EE 45FB 00B6                  		lea	Obj2F_Data(pc,d0.w),a2
0000B9F2 214A 0030                  		move.l	a2,$30(a0)
0000B9F6 1159 001A                  		move.b	(a1)+,$1A(a0)
0000B9FA 1151 0019                  		move.b	(a1),$19(a0)
0000B9FE 0228 000F 0028             		andi.b	#$F,$28(a0)
0000BA04 117C 0040 0016             		move.b	#$40,$16(a0)
0000BA0A 08E8 0004 0001             		bset	#4,1(a0)
0000BA10                            
0000BA10                            Obj2F_Action:				; XREF: Obj2F_Index
0000BA10 6100 0000                  		bsr.w	Obj2F_Types
0000BA14 4A28 0025                  		tst.b	$25(a0)
0000BA18 6700                       		beq.s	Obj2F_Solid
0000BA1A 7200                       		moveq	#0,d1
0000BA1C 1228 0019                  		move.b	$19(a0),d1
0000BA20 0641 000B                  		addi.w	#$B,d1
0000BA24 6100 C61C                  		bsr.w	ExitPlatform
0000BA28 0829 0003 0022             		btst	#3,$22(a1)
0000BA2E 6600 0000                  		bne.w	Obj2F_Slope
0000BA32 4228 0025                  		clr.b	$25(a0)
0000BA36 6000                       		bra.s	Obj2F_Display
0000BA38                            ; ===========================================================================
0000BA38                            
0000BA38                            Obj2F_Slope:				; XREF: Obj2F_Action
0000BA38 7200                       		moveq	#0,d1
0000BA3A 1228 0019                  		move.b	$19(a0),d1
0000BA3E 0641 000B                  		addi.w	#$B,d1
0000BA42 2468 0030                  		movea.l	$30(a0),a2
0000BA46 3428 0008                  		move.w	8(a0),d2
0000BA4A 6100 D554                  		bsr.w	SlopeObject2
0000BA4E 6000                       		bra.s	Obj2F_Display
0000BA50                            ; ===========================================================================
0000BA50                            
0000BA50                            Obj2F_Solid:				; XREF: Obj2F_Action
0000BA50 7200                       		moveq	#0,d1
0000BA52 1228 0019                  		move.b	$19(a0),d1
0000BA56 0641 000B                  		addi.w	#$B,d1
0000BA5A 343C 0020                  		move.w	#$20,d2
0000BA5E 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000BA64 6600                       		bne.s	loc_AF8E
0000BA66 343C 0030                  		move.w	#$30,d2
0000BA6A                            
0000BA6A                            loc_AF8E:
0000BA6A 2468 0030                  		movea.l	$30(a0),a2
0000BA6E 6100 0000                  		bsr.w	SolidObject2F
0000BA72                            
0000BA72                            Obj2F_Display:				; XREF: Obj2F_Action
0000BA72 6100 0000                  		bsr.w	DisplaySprite
0000BA76 6000 0000                  		bra.w	Obj2F_ChkDel
0000BA7A                            
0000BA7A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000BA7A                            
0000BA7A                            
0000BA7A                            Obj2F_Types:				; XREF: Obj2F_Action
0000BA7A 7000                       		moveq	#0,d0
0000BA7C 1028 0028                  		move.b	$28(a0),d0
0000BA80 0240 0007                  		andi.w	#7,d0
0000BA84 D040                       		add.w	d0,d0
0000BA86 323B 0000                  		move.w	Obj2F_TypeIndex(pc,d0.w),d1
0000BA8A 4EFB 1000                  		jmp	Obj2F_TypeIndex(pc,d1.w)
0000BA8E                            ; End of function Obj2F_Types
0000BA8E                            
0000BA8E                            ; ===========================================================================
0000BA8E 0000                       Obj2F_TypeIndex:dc.w Obj2F_Type00-Obj2F_TypeIndex
0000BA90 0000                       		dc.w Obj2F_Type01-Obj2F_TypeIndex
0000BA92 0000                       		dc.w Obj2F_Type02-Obj2F_TypeIndex
0000BA94 0000                       		dc.w Obj2F_Type03-Obj2F_TypeIndex
0000BA96 0000                       		dc.w Obj2F_Type04-Obj2F_TypeIndex
0000BA98 0000                       		dc.w Obj2F_Type05-Obj2F_TypeIndex
0000BA9A                            ; ===========================================================================
0000BA9A                            
0000BA9A                            Obj2F_Type00:				; XREF: Obj2F_TypeIndex
0000BA9A 4E75                       		rts			; type 00 platform doesn't move
0000BA9C                            ; ===========================================================================
0000BA9C                            
0000BA9C                            Obj2F_Type01:				; XREF: Obj2F_TypeIndex
0000BA9C 1038 FE60                  		move.b	($FFFFFE60).w,d0
0000BAA0 323C 0020                  		move.w	#$20,d1
0000BAA4 6000                       		bra.s	Obj2F_Move
0000BAA6                            ; ===========================================================================
0000BAA6                            
0000BAA6                            Obj2F_Type02:				; XREF: Obj2F_TypeIndex
0000BAA6 1038 FE64                  		move.b	($FFFFFE64).w,d0
0000BAAA 323C 0030                  		move.w	#$30,d1
0000BAAE 6000                       		bra.s	Obj2F_Move
0000BAB0                            ; ===========================================================================
0000BAB0                            
0000BAB0                            Obj2F_Type03:				; XREF: Obj2F_TypeIndex
0000BAB0 1038 FE68                  		move.b	($FFFFFE68).w,d0
0000BAB4 323C 0040                  		move.w	#$40,d1
0000BAB8 6000                       		bra.s	Obj2F_Move
0000BABA                            ; ===========================================================================
0000BABA                            
0000BABA                            Obj2F_Type04:				; XREF: Obj2F_TypeIndex
0000BABA 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
0000BABE 323C 0060                  		move.w	#$60,d1
0000BAC2                            
0000BAC2                            Obj2F_Move:
0000BAC2 0828 0003 0028             		btst	#3,$28(a0)
0000BAC8 6700                       		beq.s	loc_AFF2
0000BACA 4440                       		neg.w	d0
0000BACC D041                       		add.w	d1,d0
0000BACE                            
0000BACE                            loc_AFF2:
0000BACE 3228 002C                  		move.w	$2C(a0),d1
0000BAD2 9240                       		sub.w	d0,d1
0000BAD4 3141 000C                  		move.w	d1,$C(a0)	; update position on y-axis
0000BAD8 4E75                       		rts	
0000BADA                            ; ===========================================================================
0000BADA                            
0000BADA                            Obj2F_Type05:				; XREF: Obj2F_TypeIndex
0000BADA 1028 0034                  		move.b	$34(a0),d0
0000BADE 4A28 0025                  		tst.b	$25(a0)
0000BAE2 6600                       		bne.s	loc_B010
0000BAE4 5500                       		subq.b	#2,d0
0000BAE6 6400                       		bcc.s	loc_B01C
0000BAE8 7000                       		moveq	#0,d0
0000BAEA 6000                       		bra.s	loc_B01C
0000BAEC                            ; ===========================================================================
0000BAEC                            
0000BAEC                            loc_B010:
0000BAEC 5800                       		addq.b	#4,d0
0000BAEE 0C00 0040                  		cmpi.b	#$40,d0
0000BAF2 6500                       		bcs.s	loc_B01C
0000BAF4 103C 0040                  		move.b	#$40,d0
0000BAF8                            
0000BAF8                            loc_B01C:
0000BAF8 1140 0034                  		move.b	d0,$34(a0)
0000BAFC 4EB9 0000 33DA             		jsr	(CalcSine).l
0000BB02 E848                       		lsr.w	#4,d0
0000BB04 3200                       		move.w	d0,d1
0000BB06 D068 002C                  		add.w	$2C(a0),d0
0000BB0A 3140 000C                  		move.w	d0,$C(a0)
0000BB0E 0C28 0020 0034             		cmpi.b	#$20,$34(a0)
0000BB14 6600                       		bne.s	loc_B07A
0000BB16 4A28 0035                  		tst.b	$35(a0)
0000BB1A 6600                       		bne.s	loc_B07A
0000BB1C 117C 0001 0035             		move.b	#1,$35(a0)
0000BB22 6100 0000                  		bsr.w	SingleObjLoad2
0000BB26 6600                       		bne.s	loc_B07A
0000BB28 12BC 0035                  		move.b	#$35,0(a1)	; load sitting flame object
0000BB2C 3368 0008 0008             		move.w	8(a0),8(a1)
0000BB32 3368 002C 002C             		move.w	$2C(a0),$2C(a1)
0000BB38 5069 002C                  		addq.w	#8,$2C(a1)
0000BB3C 5769 002C                  		subq.w	#3,$2C(a1)
0000BB40 0469 0040 0008             		subi.w	#$40,8(a1)
0000BB46 2368 0030 0030             		move.l	$30(a0),$30(a1)
0000BB4C 2348 0038                  		move.l	a0,$38(a1)
0000BB50 2448                       		movea.l	a0,a2
0000BB52 6100                       		bsr.s	sub_B09C
0000BB54                            
0000BB54                            loc_B07A:
0000BB54 7400                       		moveq	#0,d2
0000BB56 45E8 0036                  		lea	$36(a0),a2
0000BB5A 141A                       		move.b	(a2)+,d2
0000BB5C 5302                       		subq.b	#1,d2
0000BB5E 6500                       		bcs.s	locret_B09A
0000BB60                            
0000BB60                            loc_B086:
0000BB60 7000                       		moveq	#0,d0
0000BB62 101A                       		move.b	(a2)+,d0
0000BB64 ED48                       		lsl.w	#6,d0
0000BB66 0640 D000                  		addi.w	#-$3000,d0
0000BB6A 3240                       		movea.w	d0,a1
0000BB6C 3341 003C                  		move.w	d1,$3C(a1)
0000BB70 51CA FFEE                  		dbf	d2,loc_B086
0000BB74                            
0000BB74                            locret_B09A:
0000BB74 4E75                       		rts	
0000BB76                            
0000BB76                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000BB76                            
0000BB76                            
0000BB76                            sub_B09C:
0000BB76 45EA 0036                  		lea	$36(a2),a2
0000BB7A 7000                       		moveq	#0,d0
0000BB7C 1012                       		move.b	(a2),d0
0000BB7E 5212                       		addq.b	#1,(a2)
0000BB80 45F2 0001                  		lea	1(a2,d0.w),a2
0000BB84 3009                       		move.w	a1,d0
0000BB86 0440 D000                  		subi.w	#-$3000,d0
0000BB8A EC48                       		lsr.w	#6,d0
0000BB8C 0240 007F                  		andi.w	#$7F,d0
0000BB90 1480                       		move.b	d0,(a2)
0000BB92 4E75                       		rts	
0000BB94                            ; End of function sub_B09C
0000BB94                            
0000BB94                            ; ===========================================================================
0000BB94                            
0000BB94                            Obj2F_ChkDel:				; XREF: Obj2F_Display
0000BB94 4A28 0035                  		tst.b	$35(a0)
0000BB98 6700                       		beq.s	loc_B0C6
0000BB9A 4A28 0001                  		tst.b	1(a0)
0000BB9E 6A00                       		bpl.s	Obj2F_DelFlames
0000BBA0                            
0000BBA0                            loc_B0C6:
0000BBA0 3028 002A                  		move.w	$2A(a0),d0
0000BBA4 0240 FF80                  		andi.w	#$FF80,d0
0000BBA8 3238 F700                  		move.w	($FFFFF700).w,d1
0000BBAC 0441 0080                  		subi.w	#$80,d1
0000BBB0 0241 FF80                  		andi.w	#$FF80,d1
0000BBB4 9041                       		sub.w	d1,d0
0000BBB6 0C40 0280                  		cmpi.w	#$280,d0
0000BBBA 6200 0000                  		bhi.w	DeleteObject
0000BBBE 4E75                       		rts	
0000BBC0                            ; ===========================================================================
0000BBC0                            
0000BBC0                            Obj2F_DelFlames:			; XREF: Obj2F_ChkDel
0000BBC0 7400                       		moveq	#0,d2
0000BBC2                            
0000BBC2                            loc_B0E8:
0000BBC2 45E8 0036                  		lea	$36(a0),a2
0000BBC6 1412                       		move.b	(a2),d2
0000BBC8 421A                       		clr.b	(a2)+
0000BBCA 5302                       		subq.b	#1,d2
0000BBCC 6500                       		bcs.s	locret_B116
0000BBCE                            
0000BBCE                            loc_B0F4:
0000BBCE 7000                       		moveq	#0,d0
0000BBD0 1012                       		move.b	(a2),d0
0000BBD2 421A                       		clr.b	(a2)+
0000BBD4 ED48                       		lsl.w	#6,d0
0000BBD6 0640 D000                  		addi.w	#-$3000,d0
0000BBDA 3240                       		movea.w	d0,a1
0000BBDC 6100 0000                  		bsr.w	DeleteObject2
0000BBE0 51CA FFEC                  		dbf	d2,loc_B0F4
0000BBE4 117C 0000 0035             		move.b	#0,$35(a0)
0000BBEA 117C 0000 0034             		move.b	#0,$34(a0)
0000BBF0                            
0000BBF0                            locret_B116:
0000BBF0 4E75                       		rts	
0000BBF2                            ; ===========================================================================
0000BBF2                            ; ---------------------------------------------------------------------------
0000BBF2                            ; Collision data for large moving platforms (MZ)
0000BBF2                            ; ---------------------------------------------------------------------------
0000BBF2                            Obj2F_Data1:	incbin	misc\mz_pfm1.bin
0000BC3E                            		even
0000BC3E                            Obj2F_Data2:	incbin	misc\mz_pfm2.bin
0000BC6A                            		even
0000BC6A                            Obj2F_Data3:	incbin	misc\mz_pfm3.bin
0000BCB6                            		even
0000BCB6                            ; ===========================================================================
0000BCB6                            ; ---------------------------------------------------------------------------
0000BCB6                            ; Object 35 - fireball that sits on the	floor (MZ)
0000BCB6                            ; (appears when	you walk on sinking platforms)
0000BCB6                            ; ---------------------------------------------------------------------------
0000BCB6                            
0000BCB6                            Obj35:					; XREF: Obj_Index
0000BCB6 7000                       		moveq	#0,d0
0000BCB8 1028 0024                  		move.b	$24(a0),d0
0000BCBC 323B 0000                  		move.w	Obj35_Index(pc,d0.w),d1
0000BCC0 4EFB 1000                  		jmp	Obj35_Index(pc,d1.w)
0000BCC4                            ; ===========================================================================
0000BCC4 0000                       Obj35_Index:	dc.w Obj35_Main-Obj35_Index
0000BCC6 0000                       		dc.w loc_B238-Obj35_Index
0000BCC8 0000                       		dc.w Obj35_Move-Obj35_Index
0000BCCA                            ; ===========================================================================
0000BCCA                            
0000BCCA                            Obj35_Main:				; XREF: Obj35_Index
0000BCCA 5428 0024                  		addq.b	#2,$24(a0)
0000BCCE 217C 0000 0000 0004        		move.l	#Map_obj14,4(a0)
0000BCD6 317C 0345 0002             		move.w	#$345,2(a0)
0000BCDC 3168 0008 002A             		move.w	8(a0),$2A(a0)
0000BCE2 117C 0004 0001             		move.b	#4,1(a0)
0000BCE8 117C 0001 0018             		move.b	#1,$18(a0)
0000BCEE 117C 008B 0020             		move.b	#$8B,$20(a0)
0000BCF4 117C 0008 0019             		move.b	#8,$19(a0)
0000BCFA 303C 00C8                  		move.w	#$C8,d0
0000BCFE 4EB9 0000 147C             		jsr	(PlaySound_Special).l ;	play flame sound
0000BD04 4A28 0028                  		tst.b	$28(a0)
0000BD08 6700                       		beq.s	loc_B238
0000BD0A 5428 0024                  		addq.b	#2,$24(a0)
0000BD0E 6000 0000                  		bra.w	Obj35_Move
0000BD12                            ; ===========================================================================
0000BD12                            
0000BD12                            loc_B238:				; XREF: Obj35_Index
0000BD12 2268 0030                  		movea.l	$30(a0),a1
0000BD16 3228 0008                  		move.w	8(a0),d1
0000BD1A 9268 002A                  		sub.w	$2A(a0),d1
0000BD1E 0641 000C                  		addi.w	#$C,d1
0000BD22 3001                       		move.w	d1,d0
0000BD24 E248                       		lsr.w	#1,d0
0000BD26 1031 0000                  		move.b	(a1,d0.w),d0
0000BD2A 4440                       		neg.w	d0
0000BD2C D068 002C                  		add.w	$2C(a0),d0
0000BD30 3400                       		move.w	d0,d2
0000BD32 D068 003C                  		add.w	$3C(a0),d0
0000BD36 3140 000C                  		move.w	d0,$C(a0)
0000BD3A 0C41 0084                  		cmpi.w	#$84,d1
0000BD3E 6400                       		bcc.s	loc_B2B0
0000BD40 06A8 0001 0000 0008        		addi.l	#$10000,8(a0)
0000BD48 0C41 0080                  		cmpi.w	#$80,d1
0000BD4C 6400                       		bcc.s	loc_B2B0
0000BD4E 2028 0008                  		move.l	8(a0),d0
0000BD52 0680 0008 0000             		addi.l	#$80000,d0
0000BD58 0280 000F FFFF             		andi.l	#$FFFFF,d0
0000BD5E 6600                       		bne.s	loc_B2B0
0000BD60 6100 0000                  		bsr.w	SingleObjLoad2
0000BD64 6600                       		bne.s	loc_B2B0
0000BD66 12BC 0035                  		move.b	#$35,0(a1)
0000BD6A 3368 0008 0008             		move.w	8(a0),8(a1)
0000BD70 3342 002C                  		move.w	d2,$2C(a1)
0000BD74 3368 003C 003C             		move.w	$3C(a0),$3C(a1)
0000BD7A 137C 0001 0028             		move.b	#1,$28(a1)
0000BD80 2468 0038                  		movea.l	$38(a0),a2
0000BD84 6100 FDF0                  		bsr.w	sub_B09C
0000BD88                            
0000BD88                            loc_B2B0:
0000BD88 6000                       		bra.s	Obj35_Animate
0000BD8A                            ; ===========================================================================
0000BD8A                            
0000BD8A                            Obj35_Move:				; XREF: Obj35_Index
0000BD8A 3028 002C                  		move.w	$2C(a0),d0
0000BD8E D068 003C                  		add.w	$3C(a0),d0
0000BD92 3140 000C                  		move.w	d0,$C(a0)
0000BD96                            
0000BD96                            Obj35_Animate:				; XREF: loc_B238
0000BD96 43F9 0000 0000             		lea	(Ani_obj35).l,a1
0000BD9C 6100 F450                  		bsr.w	AnimateSprite
0000BDA0 6000 0000                  		bra.w	DisplaySprite
0000BDA4                            ; ===========================================================================
0000BDA4                            Ani_obj35:
0000BDA4                            	include "_anim\obj35.asm"
0000BDA4                            ; ---------------------------------------------------------------------------
0000BDA4                            ; Animation script - fireball that sits on the	floor (MZ)
0000BDA4                            ; ---------------------------------------------------------------------------
0000BDA4 0000                       		dc.w byte_B2CE-Ani_obj35
0000BDA6 0500 2001 21FF             byte_B2CE:	dc.b 5,	0, $20,	1, $21,	$FF
0000BDAC                            		even
0000BDAC                            		even
0000BDAC                            
0000BDAC                            ; ---------------------------------------------------------------------------
0000BDAC                            ; Sprite mappings - large moving platforms (MZ)
0000BDAC                            ; ---------------------------------------------------------------------------
0000BDAC                            Map_obj2F:
0000BDAC                            	include "_maps\obj2F.asm"
0000BDAC                            ; ---------------------------------------------------------------------------
0000BDAC                            ; Sprite mappings - large moving platforms (MZ)
0000BDAC                            ; ---------------------------------------------------------------------------
0000BDAC 0000                       		dc.w byte_B2DA-Map_obj2F
0000BDAE 0000                       		dc.w byte_B31C-Map_obj2F
0000BDB0 0000                       		dc.w byte_B34F-Map_obj2F
0000BDB2 0D                         byte_B2DA:	dc.b $D
0000BDB3 D806 0057 C0               		dc.b $D8, 6, 0,	$57, $C0
0000BDB8 F005 0053 C0               		dc.b $F0, 5, 0,	$53, $C0
0000BDBD 000F 0001 C0               		dc.b 0,	$F, 0, 1, $C0
0000BDC2 D00F 0027 D0               		dc.b $D0, $F, 0, $27, $D0
0000BDC7 F00D 0037 D0               		dc.b $F0, $D, 0, $37, $D0
0000BDCC F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000BDD1 D00F 0011 F0               		dc.b $D0, $F, 0, $11, $F0
0000BDD6 D00F 003F 10               		dc.b $D0, $F, 0, $3F, $10
0000BDDB F00D 004F 10               		dc.b $F0, $D, 0, $4F, $10
0000BDE0 F00F 0001 00               		dc.b $F0, $F, 0, 1, 0
0000BDE5 000F 0001 20               		dc.b 0,	$F, 0, 1, $20
0000BDEA D806 0057 30               		dc.b $D8, 6, 0,	$57, $30
0000BDEF F005 0053 30               		dc.b $F0, 5, 0,	$53, $30
0000BDF4 0A                         byte_B31C:	dc.b $A
0000BDF5 D00F 0027 C0               		dc.b $D0, $F, 0, $27, $C0
0000BDFA F00D 0037 C0               		dc.b $F0, $D, 0, $37, $C0
0000BDFF 000F 0001 C0               		dc.b 0,	$F, 0, 1, $C0
0000BE04 C00F 0027 E0               		dc.b $C0, $F, 0, $27, $E0
0000BE09 E00D 0037 E0               		dc.b $E0, $D, 0, $37, $E0
0000BE0E F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000BE13 C00F 0011 00               		dc.b $C0, $F, 0, $11, 0
0000BE18 E00F 0001 00               		dc.b $E0, $F, 0, 1, 0
0000BE1D C00F 003F 20               		dc.b $C0, $F, 0, $3F, $20
0000BE22 E00D 004F 20               		dc.b $E0, $D, 0, $4F, $20
0000BE27 06                         byte_B34F:	dc.b 6
0000BE28 D00F 0011 E0               		dc.b $D0, $F, 0, $11, $E0
0000BE2D F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000BE32 100F 0001 E0               		dc.b $10, $F, 0, 1, $E0
0000BE37 D00F 0011 00               		dc.b $D0, $F, 0, $11, 0
0000BE3C F00F 0001 00               		dc.b $F0, $F, 0, 1, 0
0000BE41 100F 0001 00               		dc.b $10, $F, 0, 1, 0
0000BE46                            		even
0000BE46                            		even
0000BE46                            
0000BE46                            ; ---------------------------------------------------------------------------
0000BE46                            ; Sprite mappings - lava balls (MZ, SLZ)
0000BE46                            ; ---------------------------------------------------------------------------
0000BE46                            Map_obj14:
0000BE46                            	include "_maps\obj14.asm"
0000BE46                            ; ---------------------------------------------------------------------------
0000BE46                            ; Sprite mappings - lava balls (MZ, SLZ)
0000BE46                            ; ---------------------------------------------------------------------------
0000BE46 0000                       		dc.w byte_B37A-Map_obj14
0000BE48 0000                       		dc.w byte_B380-Map_obj14
0000BE4A 0000                       		dc.w byte_B386-Map_obj14
0000BE4C 0000                       		dc.w byte_B38C-Map_obj14
0000BE4E 0000                       		dc.w byte_B392-Map_obj14
0000BE50 0000                       		dc.w byte_B398-Map_obj14
0000BE52 01                         byte_B37A:	dc.b 1
0000BE53 E807 0000 F8               		dc.b $E8, 7, 0,	0, $F8
0000BE58 01                         byte_B380:	dc.b 1
0000BE59 E807 0008 F8               		dc.b $E8, 7, 0,	8, $F8
0000BE5E 01                         byte_B386:	dc.b 1
0000BE5F F006 0010 F8               		dc.b $F0, 6, 0,	$10, $F8
0000BE64 01                         byte_B38C:	dc.b 1
0000BE65 F80D 0016 E8               		dc.b $F8, $D, 0, $16, $E8
0000BE6A 01                         byte_B392:	dc.b 1
0000BE6B F80D 001E E8               		dc.b $F8, $D, 0, $1E, $E8
0000BE70 01                         byte_B398:	dc.b 1
0000BE71 F809 0026 F0               		dc.b $F8, 9, 0,	$26, $F0
0000BE76                            		even
0000BE76                            		even
0000BE76                            
0000BE76                            ; ===========================================================================
0000BE76                            ; ---------------------------------------------------------------------------
0000BE76                            ; Object 30 - large green glassy blocks	(MZ)
0000BE76                            ; ---------------------------------------------------------------------------
0000BE76                            
0000BE76                            Obj30:					; XREF: Obj_Index
0000BE76 7000                       		moveq	#0,d0
0000BE78 1028 0024                  		move.b	$24(a0),d0
0000BE7C 323B 0000                  		move.w	Obj30_Index(pc,d0.w),d1
0000BE80 4EBB 1000                  		jsr	Obj30_Index(pc,d1.w)
0000BE84 3028 0008                  		move.w	8(a0),d0
0000BE88 0240 FF80                  		andi.w	#$FF80,d0
0000BE8C 3238 F700                  		move.w	($FFFFF700).w,d1
0000BE90 0441 0080                  		subi.w	#$80,d1
0000BE94 0241 FF80                  		andi.w	#$FF80,d1
0000BE98 9041                       		sub.w	d1,d0
0000BE9A 0C40 0280                  		cmpi.w	#$280,d0
0000BE9E 6200 0000                  		bhi.w	Obj30_Delete
0000BEA2 6000 0000                  		bra.w	DisplaySprite
0000BEA6                            ; ===========================================================================
0000BEA6                            
0000BEA6                            Obj30_Delete:
0000BEA6 6000 0000                  		bra.w	DeleteObject
0000BEAA                            ; ===========================================================================
0000BEAA 0000                       Obj30_Index:	dc.w Obj30_Main-Obj30_Index
0000BEAC 0000                       		dc.w Obj30_Block012-Obj30_Index
0000BEAE 0000                       		dc.w Obj30_Reflect012-Obj30_Index
0000BEB0 0000                       		dc.w Obj30_Block34-Obj30_Index
0000BEB2 0000                       		dc.w Obj30_Reflect34-Obj30_Index
0000BEB4                            
0000BEB4 0200 00                    Obj30_Vars1:	dc.b 2,	0, 0	; routine num, y-axis dist from	origin,	frame num
0000BEB7 0400 01                    		dc.b 4,	0, 1
0000BEBA 0600 02                    Obj30_Vars2:	dc.b 6,	0, 2
0000BEBD 0800 01                    		dc.b 8,	0, 1
0000BEC0                            ; ===========================================================================
0000BEC0                            
0000BEC0                            Obj30_Main:				; XREF: Obj30_Index
0000BEC0 45F9 0000 BEB4             		lea	(Obj30_Vars1).l,a2
0000BEC6 7201                       		moveq	#1,d1
0000BEC8 117C 0048 0016             		move.b	#$48,$16(a0)
0000BECE 0C28 0003 0028             		cmpi.b	#3,$28(a0)	; is object type 0/1/2 ?
0000BED4 6500                       		bcs.s	loc_B40C	; if yes, branch
0000BED6 45F9 0000 BEBA             		lea	(Obj30_Vars2).l,a2
0000BEDC 7201                       		moveq	#1,d1
0000BEDE 117C 0038 0016             		move.b	#$38,$16(a0)
0000BEE4                            
0000BEE4                            loc_B40C:
0000BEE4 2248                       		movea.l	a0,a1
0000BEE6 6000                       		bra.s	Obj30_Load	; load main object
0000BEE8                            ; ===========================================================================
0000BEE8                            
0000BEE8                            Obj30_Loop:
0000BEE8 6100 0000                  		bsr.w	SingleObjLoad2
0000BEEC 6600                       		bne.s	loc_B480
0000BEEE                            
0000BEEE                            Obj30_Load:				; XREF: Obj30_Main
0000BEEE 135A 0024                  		move.b	(a2)+,$24(a1)
0000BEF2 12BC 0030                  		move.b	#$30,0(a1)
0000BEF6 3368 0008 0008             		move.w	8(a0),8(a1)
0000BEFC 101A                       		move.b	(a2)+,d0
0000BEFE 4880                       		ext.w	d0
0000BF00 D068 000C                  		add.w	$C(a0),d0
0000BF04 3340 000C                  		move.w	d0,$C(a1)
0000BF08 237C 0000 0000 0004        		move.l	#Map_obj30,4(a1)
0000BF10 337C C38E 0002             		move.w	#$C38E,2(a1)
0000BF16 137C 0004 0001             		move.b	#4,1(a1)
0000BF1C 3369 000C 0030             		move.w	$C(a1),$30(a1)
0000BF22 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000BF28 137C 0020 0019             		move.b	#$20,$19(a1)
0000BF2E 137C 0004 0018             		move.b	#4,$18(a1)
0000BF34 135A 001A                  		move.b	(a2)+,$1A(a1)
0000BF38 2348 003C                  		move.l	a0,$3C(a1)
0000BF3C 51C9 FFAA                  		dbf	d1,Obj30_Loop	; repeat once to load "reflection object"
0000BF40                            
0000BF40 137C 0010 0019             		move.b	#$10,$19(a1)
0000BF46 137C 0003 0018             		move.b	#3,$18(a1)
0000BF4C 5029 0028                  		addq.b	#8,$28(a1)
0000BF50 0229 000F 0028             		andi.b	#$F,$28(a1)
0000BF56                            
0000BF56                            loc_B480:
0000BF56 317C 0090 0032             		move.w	#$90,$32(a0)
0000BF5C 08E8 0004 0001             		bset	#4,1(a0)
0000BF62                            
0000BF62                            Obj30_Block012:				; XREF: Obj30_Index
0000BF62 6100 0000                  		bsr.w	Obj30_Types
0000BF66 323C 002B                  		move.w	#$2B,d1
0000BF6A 343C 0048                  		move.w	#$48,d2
0000BF6E 363C 0049                  		move.w	#$49,d3
0000BF72 3828 0008                  		move.w	8(a0),d4
0000BF76 6000 0000                  		bra.w	SolidObject
0000BF7A                            ; ===========================================================================
0000BF7A                            
0000BF7A                            Obj30_Reflect012:			; XREF: Obj30_Index
0000BF7A 2268 003C                  		movea.l	$3C(a0),a1
0000BF7E 3169 0032 0032             		move.w	$32(a1),$32(a0)
0000BF84 6000 0000                  		bra.w	Obj30_Types
0000BF88                            ; ===========================================================================
0000BF88                            
0000BF88                            Obj30_Block34:				; XREF: Obj30_Index
0000BF88 6100 0000                  		bsr.w	Obj30_Types
0000BF8C 323C 002B                  		move.w	#$2B,d1
0000BF90 343C 0038                  		move.w	#$38,d2
0000BF94 363C 0039                  		move.w	#$39,d3
0000BF98 3828 0008                  		move.w	8(a0),d4
0000BF9C 6000 0000                  		bra.w	SolidObject
0000BFA0                            ; ===========================================================================
0000BFA0                            
0000BFA0                            Obj30_Reflect34:			; XREF: Obj30_Index
0000BFA0 2268 003C                  		movea.l	$3C(a0),a1
0000BFA4 3169 0032 0032             		move.w	$32(a1),$32(a0)
0000BFAA 3169 000C 0030             		move.w	$C(a1),$30(a0)
0000BFB0 6000 0002                  		bra.w	*+4
0000BFB4                            
0000BFB4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000BFB4                            
0000BFB4                            
0000BFB4                            Obj30_Types:				; XREF: Obj30_Block012; et al
0000BFB4 7000                       		moveq	#0,d0
0000BFB6 1028 0028                  		move.b	$28(a0),d0
0000BFBA 0240 0007                  		andi.w	#7,d0
0000BFBE D040                       		add.w	d0,d0
0000BFC0 323B 0000                  		move.w	Obj30_TypeIndex(pc,d0.w),d1
0000BFC4 4EFB 1000                  		jmp	Obj30_TypeIndex(pc,d1.w)
0000BFC8                            ; End of function Obj30_Types
0000BFC8                            
0000BFC8                            ; ===========================================================================
0000BFC8 0000                       Obj30_TypeIndex:dc.w Obj30_Type00-Obj30_TypeIndex
0000BFCA 0000                       		dc.w Obj30_Type01-Obj30_TypeIndex
0000BFCC 0000                       		dc.w Obj30_Type02-Obj30_TypeIndex
0000BFCE 0000                       		dc.w Obj30_Type03-Obj30_TypeIndex
0000BFD0 0000                       		dc.w Obj30_Type04-Obj30_TypeIndex
0000BFD2                            ; ===========================================================================
0000BFD2                            
0000BFD2                            Obj30_Type00:				; XREF: Obj30_TypeIndex
0000BFD2 4E75                       		rts	
0000BFD4                            ; ===========================================================================
0000BFD4                            
0000BFD4                            Obj30_Type01:				; XREF: Obj30_TypeIndex
0000BFD4 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000BFD8 323C 0040                  		move.w	#$40,d1
0000BFDC 6000                       		bra.s	loc_B514
0000BFDE                            ; ===========================================================================
0000BFDE                            
0000BFDE                            Obj30_Type02:				; XREF: Obj30_TypeIndex
0000BFDE 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000BFE2 323C 0040                  		move.w	#$40,d1
0000BFE6 4440                       		neg.w	d0
0000BFE8 D041                       		add.w	d1,d0
0000BFEA                            
0000BFEA                            loc_B514:				; XREF: Obj30_Type01
0000BFEA 0828 0003 0028             		btst	#3,$28(a0)
0000BFF0 6700                       		beq.s	loc_B526
0000BFF2 4440                       		neg.w	d0
0000BFF4 D041                       		add.w	d1,d0
0000BFF6 E208                       		lsr.b	#1,d0
0000BFF8 0640 0020                  		addi.w	#$20,d0
0000BFFC                            
0000BFFC                            loc_B526:
0000BFFC 6000 0000                  		bra.w	loc_B5EE
0000C000                            ; ===========================================================================
0000C000                            
0000C000                            Obj30_Type03:				; XREF: Obj30_TypeIndex
0000C000 0828 0003 0028             		btst	#3,$28(a0)
0000C006 6700                       		beq.s	loc_B53E
0000C008 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000C00C 0440 0010                  		subi.w	#$10,d0
0000C010 6000 0000                  		bra.w	loc_B5EE
0000C014                            ; ===========================================================================
0000C014                            
0000C014                            loc_B53E:
0000C014 0828 0003 0022             		btst	#3,$22(a0)
0000C01A 6600                       		bne.s	loc_B54E
0000C01C 08A8 0000 0034             		bclr	#0,$34(a0)
0000C022 6000                       		bra.s	loc_B582
0000C024                            ; ===========================================================================
0000C024                            
0000C024                            loc_B54E:
0000C024 4A28 0034                  		tst.b	$34(a0)
0000C028 6600                       		bne.s	loc_B582
0000C02A 117C 0001 0034             		move.b	#1,$34(a0)
0000C030 08E8 0000 0035             		bset	#0,$35(a0)
0000C036 6700                       		beq.s	loc_B582
0000C038 08E8 0007 0034             		bset	#7,$34(a0)
0000C03E 317C 0010 0036             		move.w	#$10,$36(a0)
0000C044 117C 000A 0038             		move.b	#$A,$38(a0)
0000C04A 0C68 0040 0032             		cmpi.w	#$40,$32(a0)
0000C050 6600                       		bne.s	loc_B582
0000C052 317C 0040 0036             		move.w	#$40,$36(a0)
0000C058                            
0000C058                            loc_B582:
0000C058 4A28 0034                  		tst.b	$34(a0)
0000C05C 6A00                       		bpl.s	loc_B5AA
0000C05E 4A28 0038                  		tst.b	$38(a0)
0000C062 6700                       		beq.s	loc_B594
0000C064 5328 0038                  		subq.b	#1,$38(a0)
0000C068 6600                       		bne.s	loc_B5AA
0000C06A                            
0000C06A                            loc_B594:
0000C06A 4A68 0032                  		tst.w	$32(a0)
0000C06E 6700                       		beq.s	loc_B5A4
0000C070 5368 0032                  		subq.w	#1,$32(a0)
0000C074 5368 0036                  		subq.w	#1,$36(a0)
0000C078 6600                       		bne.s	loc_B5AA
0000C07A                            
0000C07A                            loc_B5A4:
0000C07A 08A8 0007 0034             		bclr	#7,$34(a0)
0000C080                            
0000C080                            loc_B5AA:
0000C080 3028 0032                  		move.w	$32(a0),d0
0000C084 6000                       		bra.s	loc_B5EE
0000C086                            ; ===========================================================================
0000C086                            
0000C086                            Obj30_Type04:				; XREF: Obj30_TypeIndex
0000C086 0828 0003 0028             		btst	#3,$28(a0)
0000C08C 6700                       		beq.s	Obj30_ChkSwitch
0000C08E 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000C092 0440 0010                  		subi.w	#$10,d0
0000C096 6000                       		bra.s	loc_B5EE
0000C098                            ; ===========================================================================
0000C098                            
0000C098                            Obj30_ChkSwitch:			; XREF: Obj30_Type04
0000C098 4A28 0034                  		tst.b	$34(a0)
0000C09C 6600                       		bne.s	loc_B5E0
0000C09E 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
0000C0A2 7000                       		moveq	#0,d0
0000C0A4 1028 0028                  		move.b	$28(a0),d0	; load object type number
0000C0A8 E848                       		lsr.w	#4,d0		; read only the	first nybble
0000C0AA 4A32 0000                  		tst.b	(a2,d0.w)	; has switch number d0 been pressed?
0000C0AE 6700                       		beq.s	loc_B5EA	; if not, branch
0000C0B0 117C 0001 0034             		move.b	#1,$34(a0)
0000C0B6                            
0000C0B6                            loc_B5E0:
0000C0B6 4A68 0032                  		tst.w	$32(a0)
0000C0BA 6700                       		beq.s	loc_B5EA
0000C0BC 5568 0032                  		subq.w	#2,$32(a0)
0000C0C0                            
0000C0C0                            loc_B5EA:
0000C0C0 3028 0032                  		move.w	$32(a0),d0
0000C0C4                            
0000C0C4                            loc_B5EE:
0000C0C4 3228 0030                  		move.w	$30(a0),d1
0000C0C8 9240                       		sub.w	d0,d1
0000C0CA 3141 000C                  		move.w	d1,$C(a0)
0000C0CE 4E75                       		rts	
0000C0D0                            ; ===========================================================================
0000C0D0                            ; ---------------------------------------------------------------------------
0000C0D0                            ; Sprite mappings - large green	glassy blocks (MZ)
0000C0D0                            ; ---------------------------------------------------------------------------
0000C0D0                            Map_obj30:
0000C0D0                            	include "_maps\obj30.asm"
0000C0D0                            ; ---------------------------------------------------------------------------
0000C0D0                            ; Sprite mappings - large green	glassy blocks (MZ)
0000C0D0                            ; ---------------------------------------------------------------------------
0000C0D0 0000                       		dc.w byte_B600-Map_obj30
0000C0D2 0000                       		dc.w byte_B63D-Map_obj30
0000C0D4 0000                       		dc.w byte_B648-Map_obj30
0000C0D6 0C                         byte_B600:	dc.b $C
0000C0D7 B80C 0000 E0               		dc.b $B8, $C, 0, 0, $E0
0000C0DC B80C 0800 00               		dc.b $B8, $C, 8, 0, 0
0000C0E1 C00F 0004 E0               		dc.b $C0, $F, 0, 4, $E0
0000C0E6 C00F 0804 00               		dc.b $C0, $F, 8, 4, 0
0000C0EB E00F 0004 E0               		dc.b $E0, $F, 0, 4, $E0
0000C0F0 E00F 0804 00               		dc.b $E0, $F, 8, 4, 0
0000C0F5 000F 0004 E0               		dc.b 0,	$F, 0, 4, $E0
0000C0FA 000F 0804 00               		dc.b 0,	$F, 8, 4, 0
0000C0FF 200F 0004 E0               		dc.b $20, $F, 0, 4, $E0
0000C104 200F 0804 00               		dc.b $20, $F, 8, 4, 0
0000C109 400C 1000 E0               		dc.b $40, $C, $10, 0, $E0
0000C10E 400C 1800 00               		dc.b $40, $C, $18, 0, 0
0000C113 02                         byte_B63D:	dc.b 2
0000C114 0806 0014 F0               		dc.b 8,	6, 0, $14, $F0
0000C119 0006 0014 00               		dc.b 0,	6, 0, $14, 0
0000C11E 0A                         byte_B648:	dc.b $A
0000C11F C80C 0000 E0               		dc.b $C8, $C, 0, 0, $E0
0000C124 C80C 0800 00               		dc.b $C8, $C, 8, 0, 0
0000C129 D00F 0004 E0               		dc.b $D0, $F, 0, 4, $E0
0000C12E D00F 0804 00               		dc.b $D0, $F, 8, 4, 0
0000C133 F00F 0004 E0               		dc.b $F0, $F, 0, 4, $E0
0000C138 F00F 0804 00               		dc.b $F0, $F, 8, 4, 0
0000C13D 100F 0004 E0               		dc.b $10, $F, 0, 4, $E0
0000C142 100F 0804 00               		dc.b $10, $F, 8, 4, 0
0000C147 300C 1000 E0               		dc.b $30, $C, $10, 0, $E0
0000C14C 300C 1800 00               		dc.b $30, $C, $18, 0, 0
0000C152 00                         		even
0000C152 00                         		even
0000C152                            
0000C152                            ; ===========================================================================
0000C152                            ; ---------------------------------------------------------------------------
0000C152                            ; Object 31 - stomping metal blocks on chains (MZ)
0000C152                            ; ---------------------------------------------------------------------------
0000C152                            
0000C152                            Obj31:					; XREF: Obj_Index
0000C152 7000                       		moveq	#0,d0
0000C154 1028 0024                  		move.b	$24(a0),d0
0000C158 323B 0000                  		move.w	Obj31_Index(pc,d0.w),d1
0000C15C 4EFB 1000                  		jmp	Obj31_Index(pc,d1.w)
0000C160                            ; ===========================================================================
0000C160 0000                       Obj31_Index:	dc.w Obj31_Main-Obj31_Index
0000C162 0000                       		dc.w loc_B798-Obj31_Index
0000C164 0000                       		dc.w loc_B7FE-Obj31_Index
0000C166 0000                       		dc.w Obj31_Display2-Obj31_Index
0000C168 0000                       		dc.w loc_B7E2-Obj31_Index
0000C16A                            
0000C16A 0000                       Obj31_SwchNums:	dc.b 0,	0		; switch number, obj number
0000C16C 0100                       		dc.b 1,	0
0000C16E                            
0000C16E 0200 00                    Obj31_Var:	dc.b 2,	0, 0		; XREF: ROM:0000B6E0o
0000C171 041C 01                    		dc.b 4,	$1C, 1		; routine number, y-position, frame number
0000C174 08CC 03                    		dc.b 8,	$CC, 3
0000C177 06F0 02                    		dc.b 6,	$F0, 2
0000C17A                            
0000C17A 7000 A000                  word_B6A4:	dc.w $7000, $A000
0000C17E 5000 7800                  		dc.w $5000, $7800
0000C182 3800 5800                  		dc.w $3800, $5800
0000C186 B800                       		dc.w $B800
0000C188                            ; ===========================================================================
0000C188                            
0000C188                            Obj31_Main:				; XREF: Obj31_Index
0000C188 7000                       		moveq	#0,d0
0000C18A 1028 0028                  		move.b	$28(a0),d0
0000C18E 6A00                       		bpl.s	loc_B6CE
0000C190 0240 007F                  		andi.w	#$7F,d0
0000C194 D040                       		add.w	d0,d0
0000C196 45FB 00D2                  		lea	Obj31_SwchNums(pc,d0.w),a2
0000C19A 115A 003A                  		move.b	(a2)+,$3A(a0)
0000C19E 101A                       		move.b	(a2)+,d0
0000C1A0 1140 0028                  		move.b	d0,$28(a0)
0000C1A4                            
0000C1A4                            loc_B6CE:
0000C1A4 0200 000F                  		andi.b	#$F,d0
0000C1A8 D040                       		add.w	d0,d0
0000C1AA 343B 00CE                  		move.w	word_B6A4(pc,d0.w),d2
0000C1AE 4A40                       		tst.w	d0
0000C1B0 6600                       		bne.s	loc_B6E0
0000C1B2 3142 0032                  		move.w	d2,$32(a0)
0000C1B6                            
0000C1B6                            loc_B6E0:
0000C1B6 45F9 0000 C16E             		lea	(Obj31_Var).l,a2
0000C1BC 2248                       		movea.l	a0,a1
0000C1BE 7203                       		moveq	#3,d1
0000C1C0 6000                       		bra.s	Obj31_MakeStomper
0000C1C2                            ; ===========================================================================
0000C1C2                            
0000C1C2                            Obj31_Loop:
0000C1C2 6100 0000                  		bsr.w	SingleObjLoad2
0000C1C6 6600 0000                  		bne.w	Obj31_SetSize
0000C1CA                            
0000C1CA                            Obj31_MakeStomper:			; XREF: Obj31_Main
0000C1CA 135A 0024                  		move.b	(a2)+,$24(a1)
0000C1CE 12BC 0031                  		move.b	#$31,0(a1)
0000C1D2 3368 0008 0008             		move.w	8(a0),8(a1)
0000C1D8 101A                       		move.b	(a2)+,d0
0000C1DA 4880                       		ext.w	d0
0000C1DC D068 000C                  		add.w	$C(a0),d0
0000C1E0 3340 000C                  		move.w	d0,$C(a1)
0000C1E4 237C 0000 0000 0004        		move.l	#Map_obj31,4(a1)
0000C1EC 337C 0300 0002             		move.w	#$300,2(a1)
0000C1F2 137C 0004 0001             		move.b	#4,1(a1)
0000C1F8 3369 000C 0030             		move.w	$C(a1),$30(a1)
0000C1FE 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000C204 137C 0010 0019             		move.b	#$10,$19(a1)
0000C20A 3342 0034                  		move.w	d2,$34(a1)
0000C20E 137C 0004 0018             		move.b	#4,$18(a1)
0000C214 135A 001A                  		move.b	(a2)+,$1A(a1)
0000C218 0C29 0001 001A             		cmpi.b	#1,$1A(a1)
0000C21E 6600                       		bne.s	loc_B76A
0000C220 5341                       		subq.w	#1,d1
0000C222 1028 0028                  		move.b	$28(a0),d0
0000C226 0240 00F0                  		andi.w	#$F0,d0
0000C22A 0C40 0020                  		cmpi.w	#$20,d0
0000C22E 679A                       		beq.s	Obj31_MakeStomper
0000C230 137C 0038 0019             		move.b	#$38,$19(a1)
0000C236 137C 0090 0020             		move.b	#$90,$20(a1)
0000C23C 5241                       		addq.w	#1,d1
0000C23E                            
0000C23E                            loc_B76A:
0000C23E 2348 003C                  		move.l	a0,$3C(a1)
0000C242 51C9 FF7E                  		dbf	d1,Obj31_Loop
0000C246                            
0000C246 137C 0003 0018             		move.b	#3,$18(a1)
0000C24C                            
0000C24C                            Obj31_SetSize:
0000C24C 7000                       		moveq	#0,d0
0000C24E 1028 0028                  		move.b	$28(a0),d0
0000C252 E648                       		lsr.w	#3,d0
0000C254 0200 000E                  		andi.b	#$E,d0
0000C258 45FB 0000                  		lea	Obj31_Var2(pc,d0.w),a2
0000C25C 115A 0019                  		move.b	(a2)+,$19(a0)
0000C260 115A 001A                  		move.b	(a2)+,$1A(a0)
0000C264 6000                       		bra.s	loc_B798
0000C266                            ; ===========================================================================
0000C266 3800                       Obj31_Var2:	dc.b $38, 0		; width, frame number
0000C268 3009                       		dc.b $30, 9
0000C26A 100A                       		dc.b $10, $A
0000C26C                            ; ===========================================================================
0000C26C                            
0000C26C                            loc_B798:				; XREF: Obj31_Index
0000C26C 6100 0000                  		bsr.w	Obj31_Types
0000C270 31E8 000C F7A4             		move.w	$C(a0),($FFFFF7A4).w
0000C276 7200                       		moveq	#0,d1
0000C278 1228 0019                  		move.b	$19(a0),d1
0000C27C 0641 000B                  		addi.w	#$B,d1
0000C280 343C 000C                  		move.w	#$C,d2
0000C284 363C 000D                  		move.w	#$D,d3
0000C288 3828 0008                  		move.w	8(a0),d4
0000C28C 6100 0000                  		bsr.w	SolidObject
0000C290 0828 0003 0022             		btst	#3,$22(a0)
0000C296 6700                       		beq.s	Obj31_Display
0000C298 0C28 0010 0032             		cmpi.b	#$10,$32(a0)
0000C29E 6400                       		bcc.s	Obj31_Display
0000C2A0 2448                       		movea.l	a0,a2
0000C2A2 41F8 D000                  		lea	($FFFFD000).w,a0
0000C2A6 4EB9 0000 0000             		jsr	KillSonic
0000C2AC 204A                       		movea.l	a2,a0
0000C2AE                            
0000C2AE                            Obj31_Display:
0000C2AE 6100 0000                  		bsr.w	DisplaySprite
0000C2B2 6000 0000                  		bra.w	Obj31_ChkDel
0000C2B6                            ; ===========================================================================
0000C2B6                            
0000C2B6                            loc_B7E2:				; XREF: Obj31_Index
0000C2B6 117C 0080 0016             		move.b	#$80,$16(a0)
0000C2BC 08E8 0004 0001             		bset	#4,1(a0)
0000C2C2 2268 003C                  		movea.l	$3C(a0),a1
0000C2C6 1029 0032                  		move.b	$32(a1),d0
0000C2CA EA08                       		lsr.b	#5,d0
0000C2CC 5600                       		addq.b	#3,d0
0000C2CE 1140 001A                  		move.b	d0,$1A(a0)
0000C2D2                            
0000C2D2                            loc_B7FE:				; XREF: Obj31_Index
0000C2D2 2268 003C                  		movea.l	$3C(a0),a1
0000C2D6 7000                       		moveq	#0,d0
0000C2D8 1029 0032                  		move.b	$32(a1),d0
0000C2DC D068 0030                  		add.w	$30(a0),d0
0000C2E0 3140 000C                  		move.w	d0,$C(a0)
0000C2E4                            
0000C2E4                            Obj31_Display2:				; XREF: Obj31_Index
0000C2E4 6100 0000                  		bsr.w	DisplaySprite
0000C2E8                            
0000C2E8                            Obj31_ChkDel:				; XREF: Obj31_Display
0000C2E8 3028 0008                  		move.w	8(a0),d0
0000C2EC 0240 FF80                  		andi.w	#$FF80,d0
0000C2F0 3238 F700                  		move.w	($FFFFF700).w,d1
0000C2F4 0441 0080                  		subi.w	#$80,d1
0000C2F8 0241 FF80                  		andi.w	#$FF80,d1
0000C2FC 9041                       		sub.w	d1,d0
0000C2FE 0C40 0280                  		cmpi.w	#$280,d0
0000C302 6200 0000                  		bhi.w	DeleteObject
0000C306 4E75                       		rts	
0000C308                            ; ===========================================================================
0000C308                            
0000C308                            Obj31_Types:				; XREF: loc_B798
0000C308 1028 0028                  		move.b	$28(a0),d0
0000C30C 0240 000F                  		andi.w	#$F,d0
0000C310 D040                       		add.w	d0,d0
0000C312 323B 0000                  		move.w	Obj31_TypeIndex(pc,d0.w),d1
0000C316 4EFB 1000                  		jmp	Obj31_TypeIndex(pc,d1.w)
0000C31A                            ; ===========================================================================
0000C31A 0000                       Obj31_TypeIndex:dc.w Obj31_Type00-Obj31_TypeIndex
0000C31C 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000C31E 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000C320 0000                       		dc.w Obj31_Type03-Obj31_TypeIndex
0000C322 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000C324 0000                       		dc.w Obj31_Type03-Obj31_TypeIndex
0000C326 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000C328                            ; ===========================================================================
0000C328                            
0000C328                            Obj31_Type00:				; XREF: Obj31_TypeIndex
0000C328 45F8 F7E0                  		lea	($FFFFF7E0).w,a2 ; load	switch statuses
0000C32C 7000                       		moveq	#0,d0
0000C32E 1028 003A                  		move.b	$3A(a0),d0	; move number 0	or 1 to	d0
0000C332 4A32 0000                  		tst.b	(a2,d0.w)	; has switch (d0) been pressed?
0000C336 6700                       		beq.s	loc_B8A8	; if not, branch
0000C338 4A78 F7A4                  		tst.w	($FFFFF7A4).w
0000C33C 6A00                       		bpl.s	loc_B872
0000C33E 0C28 0010 0032             		cmpi.b	#$10,$32(a0)
0000C344 6700                       		beq.s	loc_B8A0
0000C346                            
0000C346                            loc_B872:
0000C346 4A68 0032                  		tst.w	$32(a0)
0000C34A 6700                       		beq.s	loc_B8A0
0000C34C 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000C350 0200 000F                  		andi.b	#$F,d0
0000C354 6600                       		bne.s	loc_B892
0000C356 4A28 0001                  		tst.b	1(a0)
0000C35A 6A00                       		bpl.s	loc_B892
0000C35C 303C 00C7                  		move.w	#$C7,d0
0000C360 4EB9 0000 147C             		jsr	(PlaySound_Special).l ;	play rising chain sound
0000C366                            
0000C366                            loc_B892:
0000C366 0468 0080 0032             		subi.w	#$80,$32(a0)
0000C36C 6400                       		bcc.s	Obj31_Restart
0000C36E 317C 0000 0032             		move.w	#0,$32(a0)
0000C374                            
0000C374                            loc_B8A0:
0000C374 317C 0000 0012             		move.w	#0,$12(a0)
0000C37A 6000                       		bra.s	Obj31_Restart
0000C37C                            ; ===========================================================================
0000C37C                            
0000C37C                            loc_B8A8:				; XREF: Obj31_Type00
0000C37C 3228 0034                  		move.w	$34(a0),d1
0000C380 B268 0032                  		cmp.w	$32(a0),d1
0000C384 6700                       		beq.s	Obj31_Restart
0000C386 3028 0012                  		move.w	$12(a0),d0
0000C38A 0668 0070 0012             		addi.w	#$70,$12(a0)	; make object fall
0000C390 D168 0032                  		add.w	d0,$32(a0)
0000C394 B268 0032                  		cmp.w	$32(a0),d1
0000C398 6200                       		bhi.s	Obj31_Restart
0000C39A 3141 0032                  		move.w	d1,$32(a0)
0000C39E 317C 0000 0012             		move.w	#0,$12(a0)	; stop object falling
0000C3A4 4A28 0001                  		tst.b	1(a0)
0000C3A8 6A00                       		bpl.s	Obj31_Restart
0000C3AA 303C 00BD                  		move.w	#$BD,d0
0000C3AE 4EB9 0000 147C             		jsr	(PlaySound_Special).l ;	play stomping sound
0000C3B4                            
0000C3B4                            Obj31_Restart:
0000C3B4 7000                       		moveq	#0,d0
0000C3B6 1028 0032                  		move.b	$32(a0),d0
0000C3BA D068 0030                  		add.w	$30(a0),d0
0000C3BE 3140 000C                  		move.w	d0,$C(a0)
0000C3C2 4E75                       		rts	
0000C3C4                            ; ===========================================================================
0000C3C4                            
0000C3C4                            Obj31_Type01:				; XREF: Obj31_TypeIndex
0000C3C4 4A68 0036                  		tst.w	$36(a0)
0000C3C8 6700                       		beq.s	loc_B938
0000C3CA 4A68 0038                  		tst.w	$38(a0)
0000C3CE 6700                       		beq.s	loc_B902
0000C3D0 5368 0038                  		subq.w	#1,$38(a0)
0000C3D4 6000                       		bra.s	loc_B97C
0000C3D6                            ; ===========================================================================
0000C3D6                            
0000C3D6                            loc_B902:
0000C3D6 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000C3DA 0200 000F                  		andi.b	#$F,d0
0000C3DE 6600                       		bne.s	loc_B91C
0000C3E0 4A28 0001                  		tst.b	1(a0)
0000C3E4 6A00                       		bpl.s	loc_B91C
0000C3E6 303C 00C7                  		move.w	#$C7,d0
0000C3EA 4EB9 0000 147C             		jsr	(PlaySound_Special).l ;	play rising chain sound
0000C3F0                            
0000C3F0                            loc_B91C:
0000C3F0 0468 0080 0032             		subi.w	#$80,$32(a0)
0000C3F6 6400                       		bcc.s	loc_B97C
0000C3F8 317C 0000 0032             		move.w	#0,$32(a0)
0000C3FE 317C 0000 0012             		move.w	#0,$12(a0)
0000C404 317C 0000 0036             		move.w	#0,$36(a0)
0000C40A 6000                       		bra.s	loc_B97C
0000C40C                            ; ===========================================================================
0000C40C                            
0000C40C                            loc_B938:				; XREF: Obj31_Type01
0000C40C 3228 0034                  		move.w	$34(a0),d1
0000C410 B268 0032                  		cmp.w	$32(a0),d1
0000C414 6700                       		beq.s	loc_B97C
0000C416 3028 0012                  		move.w	$12(a0),d0
0000C41A 0668 0070 0012             		addi.w	#$70,$12(a0)	; make object fall
0000C420 D168 0032                  		add.w	d0,$32(a0)
0000C424 B268 0032                  		cmp.w	$32(a0),d1
0000C428 6200                       		bhi.s	loc_B97C
0000C42A 3141 0032                  		move.w	d1,$32(a0)
0000C42E 317C 0000 0012             		move.w	#0,$12(a0)	; stop object falling
0000C434 317C 0001 0036             		move.w	#1,$36(a0)
0000C43A 317C 003C 0038             		move.w	#$3C,$38(a0)
0000C440 4A28 0001                  		tst.b	1(a0)
0000C444 6A00                       		bpl.s	loc_B97C
0000C446 303C 00BD                  		move.w	#$BD,d0
0000C44A 4EB9 0000 147C             		jsr	(PlaySound_Special).l ;	play stomping sound
0000C450                            
0000C450                            loc_B97C:
0000C450 6000 FF62                  		bra.w	Obj31_Restart
0000C454                            ; ===========================================================================
0000C454                            
0000C454                            Obj31_Type03:				; XREF: Obj31_TypeIndex
0000C454 3038 D008                  		move.w	($FFFFD008).w,d0
0000C458 9068 0008                  		sub.w	8(a0),d0
0000C45C 6400                       		bcc.s	loc_B98C
0000C45E 4440                       		neg.w	d0
0000C460                            
0000C460                            loc_B98C:
0000C460 0C40 0090                  		cmpi.w	#$90,d0
0000C464 6400                       		bcc.s	loc_B996
0000C466 5228 0028                  		addq.b	#1,$28(a0)
0000C46A                            
0000C46A                            loc_B996:
0000C46A 6000 FF48                  		bra.w	Obj31_Restart
0000C46E                            ; ===========================================================================
0000C46E                            ; ---------------------------------------------------------------------------
0000C46E                            ; Object 45 - spiked metal block from beta version (MZ)
0000C46E                            ; ---------------------------------------------------------------------------
0000C46E                            
0000C46E                            Obj45:					; XREF: Obj_Index
0000C46E 7000                       		moveq	#0,d0
0000C470 1028 0024                  		move.b	$24(a0),d0
0000C474 323B 0000                  		move.w	Obj45_Index(pc,d0.w),d1
0000C478 4EFB 1000                  		jmp	Obj45_Index(pc,d1.w)
0000C47C                            ; ===========================================================================
0000C47C 0000                       Obj45_Index:	dc.w Obj45_Main-Obj45_Index
0000C47E 0000                       		dc.w Obj45_Solid-Obj45_Index
0000C480 0000                       		dc.w loc_BA8E-Obj45_Index
0000C482 0000                       		dc.w Obj45_Display-Obj45_Index
0000C484 0000                       		dc.w loc_BA7A-Obj45_Index
0000C486                            
0000C486 0204 00                    Obj45_Var:	dc.b	2,   4,	  0	; routine number, x-position, frame number
0000C489 04E4 01                    		dc.b	4, $E4,	  1
0000C48C 0834 03                    		dc.b	8, $34,	  3
0000C48F 0628 02                    		dc.b	6, $28,	  2
0000C492                            
0000C492 3800                       word_B9BE:	dc.w $3800
0000C494 A000                       		dc.w -$6000
0000C496 5000                       		dc.w $5000
0000C498                            ; ===========================================================================
0000C498                            
0000C498                            Obj45_Main:				; XREF: Obj45_Index
0000C498 7000                       		moveq	#0,d0
0000C49A 1028 0028                  		move.b	$28(a0),d0
0000C49E D040                       		add.w	d0,d0
0000C4A0 343B 00F0                  		move.w	word_B9BE(pc,d0.w),d2
0000C4A4 45F9 0000 C486             		lea	(Obj45_Var).l,a2
0000C4AA 2248                       		movea.l	a0,a1
0000C4AC 7203                       		moveq	#3,d1
0000C4AE 6000                       		bra.s	Obj45_Load
0000C4B0                            ; ===========================================================================
0000C4B0                            
0000C4B0                            Obj45_Loop:
0000C4B0 6100 0000                  		bsr.w	SingleObjLoad2
0000C4B4 6600                       		bne.s	loc_BA52
0000C4B6                            
0000C4B6                            Obj45_Load:				; XREF: Obj45_Main
0000C4B6 135A 0024                  		move.b	(a2)+,$24(a1)
0000C4BA 12BC 0045                  		move.b	#$45,0(a1)
0000C4BE 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000C4C4 101A                       		move.b	(a2)+,d0
0000C4C6 4880                       		ext.w	d0
0000C4C8 D068 0008                  		add.w	8(a0),d0
0000C4CC 3340 0008                  		move.w	d0,8(a1)
0000C4D0 237C 0000 0000 0004        		move.l	#Map_obj45,4(a1)
0000C4D8 337C 0300 0002             		move.w	#$300,2(a1)
0000C4DE 137C 0004 0001             		move.b	#4,1(a1)
0000C4E4 3369 0008 0030             		move.w	8(a1),$30(a1)
0000C4EA 3368 0008 003A             		move.w	8(a0),$3A(a1)
0000C4F0 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000C4F6 137C 0020 0019             		move.b	#$20,$19(a1)
0000C4FC 3342 0034                  		move.w	d2,$34(a1)
0000C500 137C 0004 0018             		move.b	#4,$18(a1)
0000C506 0C12 0001                  		cmpi.b	#1,(a2)
0000C50A 6600                       		bne.s	loc_BA40
0000C50C 137C 0091 0020             		move.b	#$91,$20(a1)
0000C512                            
0000C512                            loc_BA40:
0000C512 135A 001A                  		move.b	(a2)+,$1A(a1)
0000C516 2348 003C                  		move.l	a0,$3C(a1)
0000C51A 51C9 FF94                  		dbf	d1,Obj45_Loop	; repeat 3 times
0000C51E                            
0000C51E 137C 0003 0018             		move.b	#3,$18(a1)
0000C524                            
0000C524                            loc_BA52:
0000C524 117C 0010 0019             		move.b	#$10,$19(a0)
0000C52A                            
0000C52A                            Obj45_Solid:				; XREF: Obj45_Index
0000C52A 3F28 0008                  		move.w	8(a0),-(sp)
0000C52E 6100 0000                  		bsr.w	Obj45_Move
0000C532 323C 0017                  		move.w	#$17,d1
0000C536 343C 0020                  		move.w	#$20,d2
0000C53A 363C 0020                  		move.w	#$20,d3
0000C53E 381F                       		move.w	(sp)+,d4
0000C540 6100 0000                  		bsr.w	SolidObject
0000C544 6100 0000                  		bsr.w	DisplaySprite
0000C548 6000 0000                  		bra.w	Obj45_ChkDel
0000C54C                            ; ===========================================================================
0000C54C                            
0000C54C                            loc_BA7A:				; XREF: Obj45_Index
0000C54C 2268 003C                  		movea.l	$3C(a0),a1
0000C550 1029 0032                  		move.b	$32(a1),d0
0000C554 0600 0010                  		addi.b	#$10,d0
0000C558 EA08                       		lsr.b	#5,d0
0000C55A 5600                       		addq.b	#3,d0
0000C55C 1140 001A                  		move.b	d0,$1A(a0)
0000C560                            
0000C560                            loc_BA8E:				; XREF: Obj45_Index
0000C560 2268 003C                  		movea.l	$3C(a0),a1
0000C564 7000                       		moveq	#0,d0
0000C566 1029 0032                  		move.b	$32(a1),d0
0000C56A 4440                       		neg.w	d0
0000C56C D068 0030                  		add.w	$30(a0),d0
0000C570 3140 0008                  		move.w	d0,8(a0)
0000C574                            
0000C574                            Obj45_Display:				; XREF: Obj45_Index
0000C574 6100 0000                  		bsr.w	DisplaySprite
0000C578                            
0000C578                            Obj45_ChkDel:				; XREF: Obj45_Solid
0000C578 3028 003A                  		move.w	$3A(a0),d0
0000C57C 0240 FF80                  		andi.w	#$FF80,d0
0000C580 3238 F700                  		move.w	($FFFFF700).w,d1
0000C584 0441 0080                  		subi.w	#$80,d1
0000C588 0241 FF80                  		andi.w	#$FF80,d1
0000C58C 9041                       		sub.w	d1,d0
0000C58E 0C40 0280                  		cmpi.w	#$280,d0
0000C592 6200 0000                  		bhi.w	DeleteObject
0000C596 4E75                       		rts	
0000C598                            
0000C598                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000C598                            
0000C598                            
0000C598                            Obj45_Move:				; XREF: Obj45_Solid
0000C598 7000                       		moveq	#0,d0
0000C59A 1028 0028                  		move.b	$28(a0),d0
0000C59E D040                       		add.w	d0,d0
0000C5A0 323B 0000                  		move.w	off_BAD6(pc,d0.w),d1
0000C5A4 4EFB 1000                  		jmp	off_BAD6(pc,d1.w)
0000C5A8                            ; End of function Obj45_Move
0000C5A8                            
0000C5A8                            ; ===========================================================================
0000C5A8 0000                       off_BAD6:	dc.w loc_BADA-off_BAD6
0000C5AA 0000                       		dc.w loc_BADA-off_BAD6
0000C5AC                            ; ===========================================================================
0000C5AC                            
0000C5AC                            loc_BADA:				; XREF: off_BAD6
0000C5AC 4A68 0036                  		tst.w	$36(a0)
0000C5B0 6700                       		beq.s	loc_BB08
0000C5B2 4A68 0038                  		tst.w	$38(a0)
0000C5B6 6700                       		beq.s	loc_BAEC
0000C5B8 5368 0038                  		subq.w	#1,$38(a0)
0000C5BC 6000                       		bra.s	loc_BB3C
0000C5BE                            ; ===========================================================================
0000C5BE                            
0000C5BE                            loc_BAEC:
0000C5BE 0468 0080 0032             		subi.w	#$80,$32(a0)
0000C5C4 6400                       		bcc.s	loc_BB3C
0000C5C6 317C 0000 0032             		move.w	#0,$32(a0)
0000C5CC 317C 0000 0010             		move.w	#0,$10(a0)
0000C5D2 317C 0000 0036             		move.w	#0,$36(a0)
0000C5D8 6000                       		bra.s	loc_BB3C
0000C5DA                            ; ===========================================================================
0000C5DA                            
0000C5DA                            loc_BB08:				; XREF: loc_BADA
0000C5DA 3228 0034                  		move.w	$34(a0),d1
0000C5DE B268 0032                  		cmp.w	$32(a0),d1
0000C5E2 6700                       		beq.s	loc_BB3C
0000C5E4 3028 0010                  		move.w	$10(a0),d0
0000C5E8 0668 0070 0010             		addi.w	#$70,$10(a0)
0000C5EE D168 0032                  		add.w	d0,$32(a0)
0000C5F2 B268 0032                  		cmp.w	$32(a0),d1
0000C5F6 6200                       		bhi.s	loc_BB3C
0000C5F8 3141 0032                  		move.w	d1,$32(a0)
0000C5FC 317C 0000 0010             		move.w	#0,$10(a0)
0000C602 317C 0001 0036             		move.w	#1,$36(a0)
0000C608 317C 003C 0038             		move.w	#$3C,$38(a0)
0000C60E                            
0000C60E                            loc_BB3C:
0000C60E 7000                       		moveq	#0,d0
0000C610 1028 0032                  		move.b	$32(a0),d0
0000C614 4440                       		neg.w	d0
0000C616 D068 0030                  		add.w	$30(a0),d0
0000C61A 3140 0008                  		move.w	d0,8(a0)
0000C61E 4E75                       		rts	
0000C620                            ; ===========================================================================
0000C620                            ; ---------------------------------------------------------------------------
0000C620                            ; Sprite mappings - metal stomping blocks on chains (MZ)
0000C620                            ; ---------------------------------------------------------------------------
0000C620                            Map_obj31:
0000C620                            	include "_maps\obj31.asm"
0000C620                            ; ---------------------------------------------------------------------------
0000C620                            ; Sprite mappings - metal stomping blocks on chains (MZ)
0000C620                            ; ---------------------------------------------------------------------------
0000C620 0000                       		dc.w byte_BB64-Map_obj31
0000C622 0000                       		dc.w byte_BB7E-Map_obj31
0000C624 0000                       		dc.w byte_BB98-Map_obj31
0000C626 0000                       		dc.w byte_BB9E-Map_obj31
0000C628 0000                       		dc.w byte_BBA9-Map_obj31
0000C62A 0000                       		dc.w byte_BBBE-Map_obj31
0000C62C 0000                       		dc.w byte_BBDD-Map_obj31
0000C62E 0000                       		dc.w byte_BC06-Map_obj31
0000C630 0000                       		dc.w byte_BC06-Map_obj31
0000C632 0000                       		dc.w byte_BC39-Map_obj31
0000C634 0000                       		dc.w byte_BC53-Map_obj31
0000C636 05                         byte_BB64:	dc.b 5
0000C637 F406 0000 C8               		dc.b $F4, 6, 0,	0, $C8
0000C63C F40A 0006 D8               		dc.b $F4, $A, 0, 6, $D8
0000C641 EC0F 000F F0               		dc.b $EC, $F, 0, $F, $F0
0000C646 F40A 0806 10               		dc.b $F4, $A, 8, 6, $10
0000C64B F406 0800 28               		dc.b $F4, 6, 8,	0, $28
0000C650 05                         byte_BB7E:	dc.b 5
0000C651 F003 121F D4               		dc.b $F0, 3, $12, $1F, $D4
0000C656 F003 121F E8               		dc.b $F0, 3, $12, $1F, $E8
0000C65B F003 121F FC               		dc.b $F0, 3, $12, $1F, $FC
0000C660 F003 121F 10               		dc.b $F0, 3, $12, $1F, $10
0000C665 F003 121F 24               		dc.b $F0, 3, $12, $1F, $24
0000C66A 01                         byte_BB98:	dc.b 1
0000C66B DC0F 100F F0               		dc.b $DC, $F, $10, $F, $F0
0000C670 02                         byte_BB9E:	dc.b 2
0000C671 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C676 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C67B 04                         byte_BBA9:	dc.b 4
0000C67C E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000C681 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000C686 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C68B 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C690 06                         byte_BBBE:	dc.b 6
0000C691 C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000C696 D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000C69B E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000C6A0 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000C6A5 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C6AA 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C6AF 08                         byte_BBDD:	dc.b 8
0000C6B0 A001 003F FC               		dc.b $A0, 1, 0,	$3F, $FC
0000C6B5 B001 003F FC               		dc.b $B0, 1, 0,	$3F, $FC
0000C6BA C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000C6BF D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000C6C4 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000C6C9 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000C6CE 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C6D3 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C6D8 0A                         byte_BC06:	dc.b $A
0000C6D9 8001 003F FC               		dc.b $80, 1, 0,	$3F, $FC
0000C6DE 9001 003F FC               		dc.b $90, 1, 0,	$3F, $FC
0000C6E3 A001 003F FC               		dc.b $A0, 1, 0,	$3F, $FC
0000C6E8 B001 003F FC               		dc.b $B0, 1, 0,	$3F, $FC
0000C6ED C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000C6F2 D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000C6F7 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000C6FC F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000C701 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C706 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C70B 05                         byte_BC39:	dc.b 5
0000C70C F406 0000 D0               		dc.b $F4, 6, 0,	0, $D0
0000C711 F40A 0006 E0               		dc.b $F4, $A, 0, 6, $E0
0000C716 F40A 0806 08               		dc.b $F4, $A, 8, 6, 8
0000C71B F406 0800 20               		dc.b $F4, 6, 8,	0, $20
0000C720 EC0F 000F F0               		dc.b $EC, $F, 0, $F, $F0
0000C725 01                         byte_BC53:	dc.b 1
0000C726 EC0F 002F F0               		dc.b $EC, $F, 0, $2F, $F0
0000C72C 00                         		even
0000C72C 00                         		even
0000C72C                            
0000C72C                            ; ---------------------------------------------------------------------------
0000C72C                            ; Sprite mappings - spiked metal block from beta version (MZ)
0000C72C                            ; ---------------------------------------------------------------------------
0000C72C                            Map_obj45:
0000C72C                            	include "_maps\obj45.asm"
0000C72C                            ; ---------------------------------------------------------------------------
0000C72C                            ; Sprite mappings - spiked metal block from beta version (MZ)
0000C72C                            ; ---------------------------------------------------------------------------
0000C72C 0000                       		dc.w byte_BC6C-Map_obj45
0000C72E 0000                       		dc.w byte_BC7C-Map_obj45
0000C730 0000                       		dc.w byte_BC8C-Map_obj45
0000C732 0000                       		dc.w byte_BC92-Map_obj45
0000C734 0000                       		dc.w byte_BC9D-Map_obj45
0000C736 0000                       		dc.w byte_BCB2-Map_obj45
0000C738 0000                       		dc.w byte_BCD1-Map_obj45
0000C73A 0000                       		dc.w byte_BCFA-Map_obj45
0000C73C 0000                       		dc.w byte_BCFA-Map_obj45
0000C73E 03                         byte_BC6C:	dc.b 3
0000C73F E00B 001F F4               		dc.b $E0, $B, 0, $1F, $F4
0000C744 000B 101F F4               		dc.b 0,	$B, $10, $1F, $F4
0000C749 F003 002B 0C               		dc.b $F0, 3, 0,	$2B, $C
0000C74E 03                         byte_BC7C:	dc.b 3
0000C74F E80C 121B F0               		dc.b $E8, $C, $12, $1B,	$F0
0000C754 FC0C 121B F0               		dc.b $FC, $C, $12, $1B,	$F0
0000C759 100C 121B F0               		dc.b $10, $C, $12, $1B,	$F0
0000C75E 01                         byte_BC8C:	dc.b 1
0000C75F F003 082B FC               		dc.b $F0, 3, 8,	$2B, $FC
0000C764 02                         byte_BC92:	dc.b 2
0000C765 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C76A F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C76F 04                         byte_BC9D:	dc.b 4
0000C770 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C775 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C77A F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000C77F F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000C784 06                         byte_BCB2:	dc.b 6
0000C785 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C78A F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C78F F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000C794 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000C799 F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000C79E F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000C7A3 08                         byte_BCD1:	dc.b 8
0000C7A4 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C7A9 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C7AE F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000C7B3 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000C7B8 F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000C7BD F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000C7C2 F805 0041 40               		dc.b $F8, 5, 0,	$41, $40
0000C7C7 F805 0041 50               		dc.b $F8, 5, 0,	$41, $50
0000C7CC 08                         byte_BCFA:	dc.b 8
0000C7CD F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C7D2 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C7D7 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000C7DC F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000C7E1 F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000C7E6 F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000C7EB F805 0041 40               		dc.b $F8, 5, 0,	$41, $40
0000C7F0 F805 0041 50               		dc.b $F8, 5, 0,	$41, $50
0000C7F5 F805 0041 60               		dc.b $F8, 5, 0,	$41, $60
0000C7FA F805 0041 70               		dc.b $F8, 5, 0,	$41, $70
0000C800 00                         		even
0000C800 00                         		even
0000C800                            
0000C800                            ; ===========================================================================
0000C800                            ; ---------------------------------------------------------------------------
0000C800                            ; Object 32 - switches (MZ, SYZ, LZ, SBZ)
0000C800                            ; ---------------------------------------------------------------------------
0000C800                            
0000C800                            Obj32:					; XREF: Obj_Index
0000C800 7000                       		moveq	#0,d0
0000C802 1028 0024                  		move.b	$24(a0),d0
0000C806 323B 0000                  		move.w	Obj32_Index(pc,d0.w),d1
0000C80A 4EFB 1000                  		jmp	Obj32_Index(pc,d1.w)
0000C80E                            ; ===========================================================================
0000C80E 0000                       Obj32_Index:	dc.w Obj32_Main-Obj32_Index
0000C810 0000                       		dc.w Obj32_Pressed-Obj32_Index
0000C812                            ; ===========================================================================
0000C812                            
0000C812                            Obj32_Main:				; XREF: Obj32_Index
0000C812 5428 0024                  		addq.b	#2,$24(a0)
0000C816 217C 0000 0000 0004        		move.l	#Map_obj32,4(a0)
0000C81E 317C 4513 0002             		move.w	#$4513,2(a0)	; MZ specific code
0000C824 0C38 0002 FE10             		cmpi.b	#2,($FFFFFE10).w
0000C82A 6700                       		beq.s	loc_BD60
0000C82C 317C 0513 0002             		move.w	#$513,2(a0)	; SYZ, LZ and SBZ specific code
0000C832                            
0000C832                            loc_BD60:
0000C832 117C 0004 0001             		move.b	#4,1(a0)
0000C838 117C 0010 0019             		move.b	#$10,$19(a0)
0000C83E 117C 0004 0018             		move.b	#4,$18(a0)
0000C844 5668 000C                  		addq.w	#3,$C(a0)
0000C848                            
0000C848                            Obj32_Pressed:				; XREF: Obj32_Index
0000C848 4A28 0001                  		tst.b	1(a0)
0000C84C 6A00                       		bpl.s	Obj32_Display
0000C84E 323C 001B                  		move.w	#$1B,d1
0000C852 343C 0005                  		move.w	#5,d2
0000C856 363C 0005                  		move.w	#5,d3
0000C85A 3828 0008                  		move.w	8(a0),d4
0000C85E 6100 0000                  		bsr.w	SolidObject
0000C862 08A8 0000 001A             		bclr	#0,$1A(a0)	; use "unpressed" frame
0000C868 1028 0028                  		move.b	$28(a0),d0
0000C86C 0240 000F                  		andi.w	#$F,d0
0000C870 47F8 F7E0                  		lea	($FFFFF7E0).w,a3
0000C874 47F3 0000                  		lea	(a3,d0.w),a3
0000C878 7600                       		moveq	#0,d3
0000C87A 0828 0006 0028             		btst	#6,$28(a0)
0000C880 6700                       		beq.s	loc_BDB2
0000C882 7607                       		moveq	#7,d3
0000C884                            
0000C884                            loc_BDB2:
0000C884 4A28 0028                  		tst.b	$28(a0)
0000C888 6A00                       		bpl.s	loc_BDBE
0000C88A 6100 0000                  		bsr.w	Obj32_MZBlock
0000C88E 6600                       		bne.s	loc_BDC8
0000C890                            
0000C890                            loc_BDBE:
0000C890 4A28 0025                  		tst.b	$25(a0)
0000C894 6600                       		bne.s	loc_BDC8
0000C896 0793                       		bclr	d3,(a3)
0000C898 6000                       		bra.s	loc_BDDE
0000C89A                            ; ===========================================================================
0000C89A                            
0000C89A                            loc_BDC8:
0000C89A 4A13                       		tst.b	(a3)
0000C89C 6600                       		bne.s	loc_BDD6
0000C89E 303C 00CD                  		move.w	#$CD,d0
0000C8A2 4EB9 0000 147C             		jsr	(PlaySound_Special).l ;	play switch sound
0000C8A8                            
0000C8A8                            loc_BDD6:
0000C8A8 07D3                       		bset	d3,(a3)
0000C8AA 08E8 0000 001A             		bset	#0,$1A(a0)	; use "pressed"	frame
0000C8B0                            
0000C8B0                            loc_BDDE:
0000C8B0 0828 0005 0028             		btst	#5,$28(a0)
0000C8B6 6700                       		beq.s	Obj32_Display
0000C8B8 5328 001E                  		subq.b	#1,$1E(a0)
0000C8BC 6A00                       		bpl.s	Obj32_Display
0000C8BE 117C 0007 001E             		move.b	#7,$1E(a0)
0000C8C4 0868 0001 001A             		bchg	#1,$1A(a0)
0000C8CA                            
0000C8CA                            Obj32_Display:
0000C8CA 6100 0000                  		bsr.w	DisplaySprite
0000C8CE 3028 0008                  		move.w	8(a0),d0
0000C8D2 0240 FF80                  		andi.w	#$FF80,d0
0000C8D6 3238 F700                  		move.w	($FFFFF700).w,d1
0000C8DA 0441 0080                  		subi.w	#$80,d1
0000C8DE 0241 FF80                  		andi.w	#$FF80,d1
0000C8E2 9041                       		sub.w	d1,d0
0000C8E4 0C40 0280                  		cmpi.w	#$280,d0
0000C8E8 6200 0000                  		bhi.w	Obj32_Delete
0000C8EC 4E75                       		rts	
0000C8EE                            ; ===========================================================================
0000C8EE                            
0000C8EE                            Obj32_Delete:
0000C8EE 6100 0000                  		bsr.w	DeleteObject
0000C8F2 4E75                       		rts	
0000C8F4                            
0000C8F4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000C8F4                            
0000C8F4                            
0000C8F4                            Obj32_MZBlock:				; XREF: Obj32_Pressed
0000C8F4 3F03                       		move.w	d3,-(sp)
0000C8F6 3428 0008                  		move.w	8(a0),d2
0000C8FA 3628 000C                  		move.w	$C(a0),d3
0000C8FE 0442 0010                  		subi.w	#$10,d2
0000C902 5143                       		subq.w	#8,d3
0000C904 383C 0020                  		move.w	#$20,d4
0000C908 3A3C 0010                  		move.w	#$10,d5
0000C90C 43F8 D800                  		lea	($FFFFD800).w,a1 ; begin checking object RAM
0000C910 3C3C 005F                  		move.w	#$5F,d6
0000C914                            
0000C914                            Obj32_MZLoop:
0000C914 4A29 0001                  		tst.b	1(a1)
0000C918 6A00                       		bpl.s	loc_BE4E
0000C91A 0C11 0033                  		cmpi.b	#$33,(a1)	; is the object	a green	MZ block?
0000C91E 6700                       		beq.s	loc_BE5E	; if yes, branch
0000C920                            
0000C920                            loc_BE4E:
0000C920 43E9 0040                  		lea	$40(a1),a1	; check	next object
0000C924 51CE FFEE                  		dbf	d6,Obj32_MZLoop	; repeat $5F times
0000C928                            
0000C928 361F                       		move.w	(sp)+,d3
0000C92A 7000                       		moveq	#0,d0
0000C92C                            
0000C92C                            locret_BE5A:
0000C92C 4E75                       		rts	
0000C92E                            ; ===========================================================================
0000C92E 1010                       Obj32_MZData:	dc.b $10, $10
0000C930                            ; ===========================================================================
0000C930                            
0000C930                            loc_BE5E:				; XREF: Obj32_MZBlock
0000C930 7001                       		moveq	#1,d0
0000C932 0240 003F                  		andi.w	#$3F,d0
0000C936 D040                       		add.w	d0,d0
0000C938 45FB 00F2                  		lea	Obj32_MZData-2(pc,d0.w),a2
0000C93C 121A                       		move.b	(a2)+,d1
0000C93E 4881                       		ext.w	d1
0000C940 3029 0008                  		move.w	8(a1),d0
0000C944 9041                       		sub.w	d1,d0
0000C946 9042                       		sub.w	d2,d0
0000C948 6400                       		bcc.s	loc_BE80
0000C94A D241                       		add.w	d1,d1
0000C94C D041                       		add.w	d1,d0
0000C94E 6500                       		bcs.s	loc_BE84
0000C950 60CE                       		bra.s	loc_BE4E
0000C952                            ; ===========================================================================
0000C952                            
0000C952                            loc_BE80:
0000C952 B044                       		cmp.w	d4,d0
0000C954 62CA                       		bhi.s	loc_BE4E
0000C956                            
0000C956                            loc_BE84:
0000C956 121A                       		move.b	(a2)+,d1
0000C958 4881                       		ext.w	d1
0000C95A 3029 000C                  		move.w	$C(a1),d0
0000C95E 9041                       		sub.w	d1,d0
0000C960 9043                       		sub.w	d3,d0
0000C962 6400                       		bcc.s	loc_BE9A
0000C964 D241                       		add.w	d1,d1
0000C966 D041                       		add.w	d1,d0
0000C968 6500                       		bcs.s	loc_BE9E
0000C96A 60B4                       		bra.s	loc_BE4E
0000C96C                            ; ===========================================================================
0000C96C                            
0000C96C                            loc_BE9A:
0000C96C B045                       		cmp.w	d5,d0
0000C96E 62B0                       		bhi.s	loc_BE4E
0000C970                            
0000C970                            loc_BE9E:
0000C970 361F                       		move.w	(sp)+,d3
0000C972 7001                       		moveq	#1,d0
0000C974 4E75                       		rts	
0000C976                            ; End of function Obj32_MZBlock
0000C976                            
0000C976                            ; ===========================================================================
0000C976                            ; ---------------------------------------------------------------------------
0000C976                            ; Sprite mappings - switches (MZ, SYZ, LZ, SBZ)
0000C976                            ; ---------------------------------------------------------------------------
0000C976                            Map_obj32:
0000C976                            	include "_maps\obj32.asm"
0000C976                            ; ---------------------------------------------------------------------------
0000C976                            ; Sprite mappings - switches (MZ, SYZ, LZ, SBZ)
0000C976                            ; ---------------------------------------------------------------------------
0000C976 0000                       		dc.w byte_BEAC-Map_obj32
0000C978 0000                       		dc.w byte_BEB7-Map_obj32
0000C97A 0000                       		dc.w byte_BEC2-Map_obj32
0000C97C 0000                       		dc.w byte_BEB7-Map_obj32
0000C97E 02                         byte_BEAC:	dc.b 2
0000C97F F505 0000 F0               		dc.b $F5, 5, 0,	0, $F0
0000C984 F505 0800 00               		dc.b $F5, 5, 8,	0, 0
0000C989 02                         byte_BEB7:	dc.b 2
0000C98A F505 0004 F0               		dc.b $F5, 5, 0,	4, $F0
0000C98F F505 0804 00               		dc.b $F5, 5, 8,	4, 0
0000C994 02                         byte_BEC2:	dc.b 2
0000C995 F505 FFFC F0               		dc.b $F5, 5, $FF, $FC, $F0
0000C99A F505 07FC 00               		dc.b $F5, 5, 7,	$FC, 0
0000C99F F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000C9A4                            		even
0000C9A4                            		even
0000C9A4                            
0000C9A4                            ; ===========================================================================
0000C9A4                            ; ---------------------------------------------------------------------------
0000C9A4                            ; Object 33 - pushable blocks (MZ, LZ)
0000C9A4                            ; ---------------------------------------------------------------------------
0000C9A4                            
0000C9A4                            Obj33:					; XREF: Obj_Index
0000C9A4 7000                       		moveq	#0,d0
0000C9A6 1028 0024                  		move.b	$24(a0),d0
0000C9AA 323B 0000                  		move.w	Obj33_Index(pc,d0.w),d1
0000C9AE 4EFB 1000                  		jmp	Obj33_Index(pc,d1.w)
0000C9B2                            ; ===========================================================================
0000C9B2 0000                       Obj33_Index:	dc.w Obj33_Main-Obj33_Index
0000C9B4 0000                       		dc.w loc_BF6E-Obj33_Index
0000C9B6 0000                       		dc.w loc_C02C-Obj33_Index
0000C9B8                            
0000C9B8 1000                       Obj33_Var:	dc.b $10, 0	; object width,	frame number
0000C9BA 4001                       		dc.b $40, 1
0000C9BC                            ; ===========================================================================
0000C9BC                            
0000C9BC                            Obj33_Main:				; XREF: Obj33_Index
0000C9BC 5428 0024                  		addq.b	#2,$24(a0)
0000C9C0 117C 000F 0016             		move.b	#$F,$16(a0)
0000C9C6 117C 000F 0017             		move.b	#$F,$17(a0)
0000C9CC 217C 0000 0000 0004        		move.l	#Map_obj33,4(a0)
0000C9D4 317C 42B8 0002             		move.w	#$42B8,2(a0)	; MZ specific code
0000C9DA 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
0000C9E0 6600                       		bne.s	loc_BF16
0000C9E2 317C 43DE 0002             		move.w	#$43DE,2(a0)	; LZ specific code
0000C9E8                            
0000C9E8                            loc_BF16:
0000C9E8 117C 0004 0001             		move.b	#4,1(a0)
0000C9EE 117C 0003 0018             		move.b	#3,$18(a0)
0000C9F4 3168 0008 0034             		move.w	8(a0),$34(a0)
0000C9FA 3168 000C 0036             		move.w	$C(a0),$36(a0)
0000CA00 7000                       		moveq	#0,d0
0000CA02 1028 0028                  		move.b	$28(a0),d0
0000CA06 D040                       		add.w	d0,d0
0000CA08 0240 000E                  		andi.w	#$E,d0
0000CA0C 45FB 00AA                  		lea	Obj33_Var(pc,d0.w),a2
0000CA10 115A 0019                  		move.b	(a2)+,$19(a0)
0000CA14 115A 001A                  		move.b	(a2)+,$1A(a0)
0000CA18 4A28 0028                  		tst.b	$28(a0)
0000CA1C 6700                       		beq.s	Obj33_ChkGone
0000CA1E 317C C2B8 0002             		move.w	#$C2B8,2(a0)
0000CA24                            
0000CA24                            Obj33_ChkGone:
0000CA24 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000CA28 7000                       		moveq	#0,d0
0000CA2A 1028 0023                  		move.b	$23(a0),d0
0000CA2E 6700                       		beq.s	loc_BF6E
0000CA30 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000CA36 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0000CA3C 6600 0000                  		bne.w	DeleteObject
0000CA40                            
0000CA40                            loc_BF6E:				; XREF: Obj33_Index
0000CA40 4A28 0032                  		tst.b	$32(a0)
0000CA44 6600 0000                  		bne.w	loc_C046
0000CA48 7200                       		moveq	#0,d1
0000CA4A 1228 0019                  		move.b	$19(a0),d1
0000CA4E 0641 000B                  		addi.w	#$B,d1
0000CA52 343C 0010                  		move.w	#$10,d2
0000CA56 363C 0011                  		move.w	#$11,d3
0000CA5A 3828 0008                  		move.w	8(a0),d4
0000CA5E 6100 0000                  		bsr.w	loc_C186
0000CA62 0C78 0200 FE10             		cmpi.w	#$200,($FFFFFE10).w ; is the level MZ act 1?
0000CA68 6600                       		bne.s	loc_BFC6	; if not, branch
0000CA6A 08A8 0007 0028             		bclr	#7,$28(a0)
0000CA70 3028 0008                  		move.w	8(a0),d0
0000CA74 0C40 0A20                  		cmpi.w	#$A20,d0
0000CA78 6500                       		bcs.s	loc_BFC6
0000CA7A 0C40 0AA1                  		cmpi.w	#$AA1,d0
0000CA7E 6400                       		bcc.s	loc_BFC6
0000CA80 3038 F7A4                  		move.w	($FFFFF7A4).w,d0
0000CA84 0440 001C                  		subi.w	#$1C,d0
0000CA88 3140 000C                  		move.w	d0,$C(a0)
0000CA8C 08F8 0007 F7A4             		bset	#7,($FFFFF7A4).w
0000CA92 08E8 0007 0028             		bset	#7,$28(a0)
0000CA98                            
0000CA98                            loc_BFC6:
0000CA98 3028 0008                  		move.w	8(a0),d0
0000CA9C 0240 FF80                  		andi.w	#$FF80,d0
0000CAA0 3238 F700                  		move.w	($FFFFF700).w,d1
0000CAA4 0441 0080                  		subi.w	#$80,d1
0000CAA8 0241 FF80                  		andi.w	#$FF80,d1
0000CAAC 9041                       		sub.w	d1,d0
0000CAAE 0C40 0280                  		cmpi.w	#$280,d0
0000CAB2 6200                       		bhi.s	loc_BFE6
0000CAB4 6000 0000                  		bra.w	DisplaySprite
0000CAB8                            ; ===========================================================================
0000CAB8                            
0000CAB8                            loc_BFE6:
0000CAB8 3028 0034                  		move.w	$34(a0),d0
0000CABC 0240 FF80                  		andi.w	#$FF80,d0
0000CAC0 3238 F700                  		move.w	($FFFFF700).w,d1
0000CAC4 0441 0080                  		subi.w	#$80,d1
0000CAC8 0241 FF80                  		andi.w	#$FF80,d1
0000CACC 9041                       		sub.w	d1,d0
0000CACE 0C40 0280                  		cmpi.w	#$280,d0
0000CAD2 6200                       		bhi.s	loc_C016
0000CAD4 3168 0034 0008             		move.w	$34(a0),8(a0)
0000CADA 3168 0036 000C             		move.w	$36(a0),$C(a0)
0000CAE0 117C 0004 0024             		move.b	#4,$24(a0)
0000CAE6 6000                       		bra.s	loc_C02C
0000CAE8                            ; ===========================================================================
0000CAE8                            
0000CAE8                            loc_C016:
0000CAE8 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000CAEC 7000                       		moveq	#0,d0
0000CAEE 1028 0023                  		move.b	$23(a0),d0
0000CAF2 6700                       		beq.s	loc_C028
0000CAF4 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
0000CAFA                            
0000CAFA                            loc_C028:
0000CAFA 6000 0000                  		bra.w	DeleteObject
0000CAFE                            ; ===========================================================================
0000CAFE                            
0000CAFE                            loc_C02C:				; XREF: Obj33_Index
0000CAFE 6100 0000                  		bsr.w	ChkObjOnScreen2
0000CB02 6700                       		beq.s	locret_C044
0000CB04 117C 0002 0024             		move.b	#2,$24(a0)
0000CB0A 4228 0032                  		clr.b	$32(a0)
0000CB0E 4268 0010                  		clr.w	$10(a0)
0000CB12 4268 0012                  		clr.w	$12(a0)
0000CB16                            
0000CB16                            locret_C044:
0000CB16 4E75                       		rts	
0000CB18                            ; ===========================================================================
0000CB18                            
0000CB18                            loc_C046:				; XREF: loc_BF6E
0000CB18 3F28 0008                  		move.w	8(a0),-(sp)
0000CB1C 0C28 0004 0025             		cmpi.b	#4,$25(a0)
0000CB22 6400                       		bcc.s	loc_C056
0000CB24 6100 0000                  		bsr.w	SpeedToPos
0000CB28                            
0000CB28                            loc_C056:
0000CB28 0828 0001 0022             		btst	#1,$22(a0)
0000CB2E 6700                       		beq.s	loc_C0A0
0000CB30 0668 0018 0012             		addi.w	#$18,$12(a0)
0000CB36 4EB9 0000 0000             		jsr	ObjHitFloor
0000CB3C 4A41                       		tst.w	d1
0000CB3E 6A00 0000                  		bpl.w	loc_C09E
0000CB42 D368 000C                  		add.w	d1,$C(a0)
0000CB46 4268 0012                  		clr.w	$12(a0)
0000CB4A 08A8 0001 0022             		bclr	#1,$22(a0)
0000CB50 3011                       		move.w	(a1),d0
0000CB52 0240 03FF                  		andi.w	#$3FF,d0
0000CB56 0C40 016A                  		cmpi.w	#$16A,d0
0000CB5A 6500                       		bcs.s	loc_C09E
0000CB5C 3028 0030                  		move.w	$30(a0),d0
0000CB60 E640                       		asr.w	#3,d0
0000CB62 3140 0010                  		move.w	d0,$10(a0)
0000CB66 117C 0001 0032             		move.b	#1,$32(a0)
0000CB6C 4268 000E                  		clr.w	$E(a0)
0000CB70                            
0000CB70                            loc_C09E:
0000CB70 6000                       		bra.s	loc_C0E6
0000CB72                            ; ===========================================================================
0000CB72                            
0000CB72                            loc_C0A0:
0000CB72 4A68 0010                  		tst.w	$10(a0)
0000CB76 6700 0000                  		beq.w	loc_C0D6
0000CB7A 6B00                       		bmi.s	loc_C0BC
0000CB7C 7600                       		moveq	#0,d3
0000CB7E 1628 0019                  		move.b	$19(a0),d3
0000CB82 4EB9 0000 0000             		jsr	ObjHitWallRight
0000CB88 4A41                       		tst.w	d1		; has block touched a wall?
0000CB8A 6B00                       		bmi.s	Obj33_StopPush	; if yes, branch
0000CB8C 6000                       		bra.s	loc_C0E6
0000CB8E                            ; ===========================================================================
0000CB8E                            
0000CB8E                            loc_C0BC:
0000CB8E 7600                       		moveq	#0,d3
0000CB90 1628 0019                  		move.b	$19(a0),d3
0000CB94 4643                       		not.w	d3
0000CB96 4EB9 0000 0000             		jsr	ObjHitWallLeft
0000CB9C 4A41                       		tst.w	d1		; has block touched a wall?
0000CB9E 6B00                       		bmi.s	Obj33_StopPush	; if yes, branch
0000CBA0 6000                       		bra.s	loc_C0E6
0000CBA2                            ; ===========================================================================
0000CBA2                            
0000CBA2                            Obj33_StopPush:
0000CBA2 4268 0010                  		clr.w	$10(a0)		; stop block moving
0000CBA6 6000                       		bra.s	loc_C0E6
0000CBA8                            ; ===========================================================================
0000CBA8                            
0000CBA8                            loc_C0D6:
0000CBA8 06A8 0000 2001 000C        		addi.l	#$2001,$C(a0)
0000CBB0 0C28 00A0 000F             		cmpi.b	#-$60,$F(a0)
0000CBB6 6400                       		bcc.s	loc_C104
0000CBB8                            
0000CBB8                            loc_C0E6:
0000CBB8 7200                       		moveq	#0,d1
0000CBBA 1228 0019                  		move.b	$19(a0),d1
0000CBBE 0641 000B                  		addi.w	#$B,d1
0000CBC2 343C 0010                  		move.w	#$10,d2
0000CBC6 363C 0011                  		move.w	#$11,d3
0000CBCA 381F                       		move.w	(sp)+,d4
0000CBCC 6100 0000                  		bsr.w	loc_C186
0000CBD0 6100                       		bsr.s	Obj33_ChkLava
0000CBD2 6000 FEC4                  		bra.w	loc_BFC6
0000CBD6                            ; ===========================================================================
0000CBD6                            
0000CBD6                            loc_C104:
0000CBD6 381F                       		move.w	(sp)+,d4
0000CBD8 43F8 D000                  		lea	($FFFFD000).w,a1
0000CBDC 08A9 0003 0022             		bclr	#3,$22(a1)
0000CBE2 08A8 0003 0022             		bclr	#3,$22(a0)
0000CBE8 6000 FECE                  		bra.w	loc_BFE6
0000CBEC                            ; ===========================================================================
0000CBEC                            
0000CBEC                            Obj33_ChkLava:
0000CBEC 0C78 0201 FE10             		cmpi.w	#$201,($FFFFFE10).w ; is the level MZ act 2?
0000CBF2 6600                       		bne.s	Obj33_ChkLava2	; if not, branch
0000CBF4 343C FFE0                  		move.w	#-$20,d2
0000CBF8 0C68 0DD0 0008             		cmpi.w	#$DD0,8(a0)
0000CBFE 6700                       		beq.s	Obj33_LoadLava
0000CC00 0C68 0CC0 0008             		cmpi.w	#$CC0,8(a0)
0000CC06 6700                       		beq.s	Obj33_LoadLava
0000CC08 0C68 0BA0 0008             		cmpi.w	#$BA0,8(a0)
0000CC0E 6700                       		beq.s	Obj33_LoadLava
0000CC10 4E75                       		rts	
0000CC12                            ; ===========================================================================
0000CC12                            
0000CC12                            Obj33_ChkLava2:
0000CC12 0C78 0202 FE10             		cmpi.w	#$202,($FFFFFE10).w ; is the level MZ act 3?
0000CC18 6600                       		bne.s	Obj33_NoLava	; if not, branch
0000CC1A 343C 0020                  		move.w	#$20,d2
0000CC1E 0C68 0560 0008             		cmpi.w	#$560,8(a0)
0000CC24 6700                       		beq.s	Obj33_LoadLava
0000CC26 0C68 05C0 0008             		cmpi.w	#$5C0,8(a0)
0000CC2C 6700                       		beq.s	Obj33_LoadLava
0000CC2E                            
0000CC2E                            Obj33_NoLava:
0000CC2E 4E75                       		rts	
0000CC30                            ; ===========================================================================
0000CC30                            
0000CC30                            Obj33_LoadLava:
0000CC30 6100 0000                  		bsr.w	SingleObjLoad
0000CC34 6600                       		bne.s	locret_C184
0000CC36 12BC 004C                  		move.b	#$4C,0(a1)	; load lava geyser object
0000CC3A 3368 0008 0008             		move.w	8(a0),8(a1)
0000CC40 D569 0008                  		add.w	d2,8(a1)
0000CC44 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000CC4A 0669 0010 000C             		addi.w	#$10,$C(a1)
0000CC50 2348 003C                  		move.l	a0,$3C(a1)
0000CC54                            
0000CC54                            locret_C184:
0000CC54 4E75                       		rts	
0000CC56                            ; ===========================================================================
0000CC56                            
0000CC56                            loc_C186:				; XREF: loc_BF6E
0000CC56 1028 0025                  		move.b	$25(a0),d0
0000CC5A 6700 0000                  		beq.w	loc_C218
0000CC5E 5500                       		subq.b	#2,d0
0000CC60 6600                       		bne.s	loc_C1AA
0000CC62 6100 B3DE                  		bsr.w	ExitPlatform
0000CC66 0829 0003 0022             		btst	#3,$22(a1)
0000CC6C 6600                       		bne.s	loc_C1A4
0000CC6E 4228 0025                  		clr.b	$25(a0)
0000CC72 4E75                       		rts	
0000CC74                            ; ===========================================================================
0000CC74                            
0000CC74                            loc_C1A4:
0000CC74 3404                       		move.w	d4,d2
0000CC76 6000 B928                  		bra.w	MvSonicOnPtfm
0000CC7A                            ; ===========================================================================
0000CC7A                            
0000CC7A                            loc_C1AA:
0000CC7A 5500                       		subq.b	#2,d0
0000CC7C 6600                       		bne.s	loc_C1F2
0000CC7E 6100 0000                  		bsr.w	SpeedToPos
0000CC82 0668 0018 0012             		addi.w	#$18,$12(a0)
0000CC88 4EB9 0000 0000             		jsr	ObjHitFloor
0000CC8E 4A41                       		tst.w	d1
0000CC90 6A00 0000                  		bpl.w	locret_C1F0
0000CC94 D368 000C                  		add.w	d1,$C(a0)
0000CC98 4268 0012                  		clr.w	$12(a0)
0000CC9C 4228 0025                  		clr.b	$25(a0)
0000CCA0 3011                       		move.w	(a1),d0
0000CCA2 0240 03FF                  		andi.w	#$3FF,d0
0000CCA6 0C40 016A                  		cmpi.w	#$16A,d0
0000CCAA 6500                       		bcs.s	locret_C1F0
0000CCAC 3028 0030                  		move.w	$30(a0),d0
0000CCB0 E640                       		asr.w	#3,d0
0000CCB2 3140 0010                  		move.w	d0,$10(a0)
0000CCB6 117C 0001 0032             		move.b	#1,$32(a0)
0000CCBC 4268 000E                  		clr.w	$E(a0)
0000CCC0                            
0000CCC0                            locret_C1F0:
0000CCC0 4E75                       		rts	
0000CCC2                            ; ===========================================================================
0000CCC2                            
0000CCC2                            loc_C1F2:
0000CCC2 6100 0000                  		bsr.w	SpeedToPos
0000CCC6 3028 0008                  		move.w	8(a0),d0
0000CCCA 0240 000C                  		andi.w	#$C,d0
0000CCCE 6600 0000                  		bne.w	locret_C2E4
0000CCD2 0268 FFF0 0008             		andi.w	#-$10,8(a0)
0000CCD8 3168 0010 0030             		move.w	$10(a0),$30(a0)
0000CCDE 4268 0010                  		clr.w	$10(a0)
0000CCE2 5528 0025                  		subq.b	#2,$25(a0)
0000CCE6 4E75                       		rts	
0000CCE8                            ; ===========================================================================
0000CCE8                            
0000CCE8                            loc_C218:
0000CCE8 6100 0000                  		bsr.w	loc_FAC8
0000CCEC 4A44                       		tst.w	d4
0000CCEE 6700 0000                  		beq.w	locret_C2E4
0000CCF2 6B00 0000                  		bmi.w	locret_C2E4
0000CCF6 4A28 0032                  		tst.b	$32(a0)
0000CCFA 6700                       		beq.s	loc_C230
0000CCFC 6000 0000                  		bra.w	locret_C2E4
0000CD00                            ; ===========================================================================
0000CD00                            
0000CD00                            loc_C230:
0000CD00 4A40                       		tst.w	d0
0000CD02 6700 0000                  		beq.w	locret_C2E4
0000CD06 6B00                       		bmi.s	loc_C268
0000CD08 0829 0000 0022             		btst	#0,$22(a1)
0000CD0E 6600 0000                  		bne.w	locret_C2E4
0000CD12 3F00                       		move.w	d0,-(sp)
0000CD14 7600                       		moveq	#0,d3
0000CD16 1628 0019                  		move.b	$19(a0),d3
0000CD1A 4EB9 0000 0000             		jsr	ObjHitWallRight
0000CD20 301F                       		move.w	(sp)+,d0
0000CD22 4A41                       		tst.w	d1
0000CD24 6B00 0000                  		bmi.w	locret_C2E4
0000CD28 06A8 0001 0000 0008        		addi.l	#$10000,8(a0)
0000CD30 7001                       		moveq	#1,d0
0000CD32 323C 0040                  		move.w	#$40,d1
0000CD36 6000                       		bra.s	loc_C294
0000CD38                            ; ===========================================================================
0000CD38                            
0000CD38                            loc_C268:
0000CD38 0829 0000 0022             		btst	#0,$22(a1)
0000CD3E 6700                       		beq.s	locret_C2E4
0000CD40 3F00                       		move.w	d0,-(sp)
0000CD42 7600                       		moveq	#0,d3
0000CD44 1628 0019                  		move.b	$19(a0),d3
0000CD48 4643                       		not.w	d3
0000CD4A 4EB9 0000 0000             		jsr	ObjHitWallLeft
0000CD50 301F                       		move.w	(sp)+,d0
0000CD52 4A41                       		tst.w	d1
0000CD54 6B00                       		bmi.s	locret_C2E4
0000CD56 04A8 0001 0000 0008        		subi.l	#$10000,8(a0)
0000CD5E 70FF                       		moveq	#-1,d0
0000CD60 323C FFC0                  		move.w	#-$40,d1
0000CD64                            
0000CD64                            loc_C294:
0000CD64 43F8 D000                  		lea	($FFFFD000).w,a1
0000CD68 D169 0008                  		add.w	d0,8(a1)
0000CD6C 3341 0014                  		move.w	d1,$14(a1)
0000CD70 337C 0000 0010             		move.w	#0,$10(a1)
0000CD76 3F00                       		move.w	d0,-(sp)
0000CD78 303C 00A7                  		move.w	#$A7,d0
0000CD7C 4EB9 0000 147C             		jsr	(PlaySound_Special).l ;	play pushing sound
0000CD82 301F                       		move.w	(sp)+,d0
0000CD84 4A28 0028                  		tst.b	$28(a0)
0000CD88 6B00                       		bmi.s	locret_C2E4
0000CD8A 3F00                       		move.w	d0,-(sp)
0000CD8C 4EB9 0000 0000             		jsr	ObjHitFloor
0000CD92 301F                       		move.w	(sp)+,d0
0000CD94 0C41 0004                  		cmpi.w	#4,d1
0000CD98 6F00                       		ble.s	loc_C2E0
0000CD9A 317C 0400 0010             		move.w	#$400,$10(a0)
0000CDA0 4A40                       		tst.w	d0
0000CDA2 6A00                       		bpl.s	loc_C2D8
0000CDA4 4468 0010                  		neg.w	$10(a0)
0000CDA8                            
0000CDA8                            loc_C2D8:
0000CDA8 117C 0006 0025             		move.b	#6,$25(a0)
0000CDAE 6000                       		bra.s	locret_C2E4
0000CDB0                            ; ===========================================================================
0000CDB0                            
0000CDB0                            loc_C2E0:
0000CDB0 D368 000C                  		add.w	d1,$C(a0)
0000CDB4                            
0000CDB4                            locret_C2E4:
0000CDB4 4E75                       		rts	
0000CDB6                            ; ===========================================================================
0000CDB6                            ; ---------------------------------------------------------------------------
0000CDB6                            ; Sprite mappings - pushable blocks (MZ, LZ)
0000CDB6                            ; ---------------------------------------------------------------------------
0000CDB6                            Map_obj33:
0000CDB6                            	include "_maps\obj33.asm"
0000CDB6                            ; ---------------------------------------------------------------------------
0000CDB6                            ; Sprite mappings - pushable blocks (MZ, LZ)
0000CDB6                            ; ---------------------------------------------------------------------------
0000CDB6 0000                       		dc.w byte_C2EA-Map_obj33
0000CDB8 0000                       		dc.w byte_C2F0-Map_obj33
0000CDBA 01                         byte_C2EA:	dc.b 1
0000CDBB F00F 0008 F0               		dc.b $F0, $F, 0, 8, $F0	; single block
0000CDC0 04                         byte_C2F0:	dc.b 4
0000CDC1 F00F 0008 C0               		dc.b $F0, $F, 0, 8, $C0	; row of 4 blocks
0000CDC6 F00F 0008 E0               		dc.b $F0, $F, 0, 8, $E0
0000CDCB F00F 0008 00               		dc.b $F0, $F, 0, 8, 0
0000CDD0 F00F 0008 20               		dc.b $F0, $F, 0, 8, $20
0000CDD6 00                         		even
0000CDD6 00                         		even
0000CDD6                            
0000CDD6                            ; ===========================================================================
0000CDD6                            ; ---------------------------------------------------------------------------
0000CDD6                            ; Object 34 - zone title cards
0000CDD6                            ; ---------------------------------------------------------------------------
0000CDD6                            
0000CDD6                            Obj34:					; XREF: Obj_Index
0000CDD6 7000                       		moveq	#0,d0
0000CDD8 1028 0024                  		move.b	$24(a0),d0
0000CDDC 323B 0000                  		move.w	Obj34_Index(pc,d0.w),d1
0000CDE0 4EFB 1000                  		jmp	Obj34_Index(pc,d1.w)
0000CDE4                            ; ===========================================================================
0000CDE4 0000                       Obj34_Index:	dc.w Obj34_CheckSBZ3-Obj34_Index
0000CDE6 0000                       		dc.w Obj34_ChkPos-Obj34_Index
0000CDE8 0000                       		dc.w Obj34_Wait-Obj34_Index
0000CDEA 0000                       		dc.w Obj34_Wait-Obj34_Index
0000CDEC                            ; ===========================================================================
0000CDEC                            
0000CDEC                            Obj34_CheckSBZ3:			; XREF: Obj34_Index
0000CDEC 2248                       		movea.l	a0,a1
0000CDEE 7000                       		moveq	#0,d0
0000CDF0 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000CDF4 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; check if level is	SBZ 3
0000CDFA 6600                       		bne.s	Obj34_CheckFZ
0000CDFC 7005                       		moveq	#5,d0		; load title card number 5 (SBZ)
0000CDFE                            
0000CDFE                            Obj34_CheckFZ:
0000CDFE 3400                       		move.w	d0,d2
0000CE00 0C78 0502 FE10             		cmpi.w	#$502,($FFFFFE10).w ; check if level is	FZ
0000CE06 6600                       		bne.s	Obj34_LoadConfig
0000CE08 7006                       		moveq	#6,d0		; load title card number 6 (FZ)
0000CE0A 740B                       		moveq	#$B,d2		; use "FINAL" mappings
0000CE0C                            
0000CE0C                            Obj34_LoadConfig:
0000CE0C 47F9 0000 0000             		lea	(Obj34_ConData).l,a3
0000CE12 E948                       		lsl.w	#4,d0
0000CE14 D6C0                       		adda.w	d0,a3
0000CE16 45F9 0000 0000             		lea	(Obj34_ItemData).l,a2
0000CE1C 7203                       		moveq	#3,d1
0000CE1E                            
0000CE1E                            Obj34_Loop:
0000CE1E 12BC 0034                  		move.b	#$34,0(a1)
0000CE22 3353 0008                  		move.w	(a3),8(a1)	; load start x-position
0000CE26 335B 0032                  		move.w	(a3)+,$32(a1)	; load finish x-position (same as start)
0000CE2A 335B 0030                  		move.w	(a3)+,$30(a1)	; load main x-position
0000CE2E 335A 000A                  		move.w	(a2)+,$A(a1)
0000CE32 135A 0024                  		move.b	(a2)+,$24(a1)
0000CE36 101A                       		move.b	(a2)+,d0
0000CE38 6600                       		bne.s	Obj34_ActNumber
0000CE3A 1002                       		move.b	d2,d0
0000CE3C                            
0000CE3C                            Obj34_ActNumber:
0000CE3C 0C00 0007                  		cmpi.b	#7,d0
0000CE40 6600                       		bne.s	Obj34_MakeSprite
0000CE42 D038 FE11                  		add.b	($FFFFFE11).w,d0
0000CE46 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w
0000CE4C 6600                       		bne.s	Obj34_MakeSprite
0000CE4E 5300                       		subq.b	#1,d0
0000CE50                            
0000CE50                            Obj34_MakeSprite:
0000CE50 1340 001A                  		move.b	d0,$1A(a1)	; display frame	number d0
0000CE54 237C 0000 0000 0004        		move.l	#Map_obj34,4(a1)
0000CE5C 337C 8580 0002             		move.w	#$8580,2(a1)
0000CE62 137C 0078 0019             		move.b	#$78,$19(a1)
0000CE68 137C 0000 0001             		move.b	#0,1(a1)
0000CE6E 137C 0000 0018             		move.b	#0,$18(a1)
0000CE74 337C 003C 001E             		move.w	#60,$1E(a1)	; set time delay to 1 second
0000CE7A 43E9 0040                  		lea	$40(a1),a1	; next object
0000CE7E 51C9 FF9E                  		dbf	d1,Obj34_Loop	; repeat sequence another 3 times
0000CE82                            
0000CE82                            Obj34_ChkPos:				; XREF: Obj34_Index
0000CE82 7210                       		moveq	#$10,d1		; set horizontal speed
0000CE84 3028 0030                  		move.w	$30(a0),d0
0000CE88 B068 0008                  		cmp.w	8(a0),d0	; has item reached the target position?
0000CE8C 6700                       		beq.s	loc_C3C8	; if yes, branch
0000CE8E 6C00                       		bge.s	Obj34_Move
0000CE90 4441                       		neg.w	d1
0000CE92                            
0000CE92                            Obj34_Move:
0000CE92 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000CE96                            
0000CE96                            loc_C3C8:
0000CE96 3028 0008                  		move.w	8(a0),d0
0000CE9A 6B00                       		bmi.s	locret_C3D8
0000CE9C 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000CEA0 6400                       		bcc.s	locret_C3D8	; if yes, branch
0000CEA2 6000 0000                  		bra.w	DisplaySprite
0000CEA6                            ; ===========================================================================
0000CEA6                            
0000CEA6                            locret_C3D8:
0000CEA6 4E75                       		rts	
0000CEA8                            ; ===========================================================================
0000CEA8                            
0000CEA8                            Obj34_Wait:				; XREF: Obj34_Index
0000CEA8 4A68 001E                  		tst.w	$1E(a0)		; is time remaining zero?
0000CEAC 6700                       		beq.s	Obj34_ChkPos2	; if yes, branch
0000CEAE 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time
0000CEB2 6000 0000                  		bra.w	DisplaySprite
0000CEB6                            ; ===========================================================================
0000CEB6                            
0000CEB6                            Obj34_ChkPos2:				; XREF: Obj34_Wait
0000CEB6 4A28 0001                  		tst.b	1(a0)
0000CEBA 6A00                       		bpl.s	Obj34_ChangeArt
0000CEBC 7220                       		moveq	#$20,d1
0000CEBE 3028 0032                  		move.w	$32(a0),d0
0000CEC2 B068 0008                  		cmp.w	8(a0),d0	; has item reached the finish position?
0000CEC6 6700                       		beq.s	Obj34_ChangeArt	; if yes, branch
0000CEC8 6C00                       		bge.s	Obj34_Move2
0000CECA 4441                       		neg.w	d1
0000CECC                            
0000CECC                            Obj34_Move2:
0000CECC D368 0008                  		add.w	d1,8(a0)	; change item's position
0000CED0 3028 0008                  		move.w	8(a0),d0
0000CED4 6B00                       		bmi.s	locret_C412
0000CED6 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000CEDA 6400                       		bcc.s	locret_C412	; if yes, branch
0000CEDC 6000 0000                  		bra.w	DisplaySprite
0000CEE0                            ; ===========================================================================
0000CEE0                            
0000CEE0                            locret_C412:
0000CEE0 4E75                       		rts	
0000CEE2                            ; ===========================================================================
0000CEE2                            
0000CEE2                            Obj34_ChangeArt:			; XREF: Obj34_ChkPos2
0000CEE2 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0000CEE8 6600                       		bne.s	Obj34_Delete
0000CEEA 7002                       		moveq	#2,d0
0000CEEC 4EB9 0000 16F0             		jsr	(LoadPLC).l	; load explosion patterns
0000CEF2 7000                       		moveq	#0,d0
0000CEF4 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000CEF8 0640 0015                  		addi.w	#$15,d0
0000CEFC 4EB9 0000 16F0             		jsr	(LoadPLC).l	; load animal patterns
0000CF02                            
0000CF02                            Obj34_Delete:
0000CF02 6000 0000                  		bra.w	DeleteObject
0000CF06                            ; ===========================================================================
0000CF06 00D0                       Obj34_ItemData:	dc.w $D0	; y-axis position
0000CF08 0200                       		dc.b 2,	0	; routine number, frame	number (changes)
0000CF0A 00E4                       		dc.w $E4
0000CF0C 0206                       		dc.b 2,	6
0000CF0E 00EA                       		dc.w $EA
0000CF10 0207                       		dc.b 2,	7
0000CF12 00E0                       		dc.w $E0
0000CF14 020A                       		dc.b 2,	$A
0000CF16                            ; ---------------------------------------------------------------------------
0000CF16                            ; Title	card configuration data
0000CF16                            ; Format:
0000CF16                            ; 4 bytes per item (YYYY XXXX)
0000CF16                            ; 4 items per level (GREEN HILL, ZONE, ACT X, oval)
0000CF16                            ; ---------------------------------------------------------------------------
0000CF16 0000 0120 FEFC 013C 0414+  Obj34_ConData:	dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; GHZ
0000CF26 0000 0120 FEF4 0134 040C+  		dc.w 0,	$120, $FEF4, $134, $40C, $14C, $20C, $14C ; LZ
0000CF36 0000 0120 FEE0 0120 03F8+  		dc.w 0,	$120, $FEE0, $120, $3F8, $138, $1F8, $138 ; MZ
0000CF46 0000 0120 FEFC 013C 0414+  		dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; SLZ
0000CF56 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; SYZ
0000CF66 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; SBZ
0000CF76 0000 0120 FEE4 0124 03EC+  		dc.w 0,	$120, $FEE4, $124, $3EC, $3EC, $1EC, $12C ; FZ
0000CF86                            ; ===========================================================================
0000CF86                            ; ---------------------------------------------------------------------------
0000CF86                            ; Object 39 - "GAME OVER" and "TIME OVER"
0000CF86                            ; ---------------------------------------------------------------------------
0000CF86                            
0000CF86                            Obj39:					; XREF: Obj_Index
0000CF86 7000                       		moveq	#0,d0
0000CF88 1028 0024                  		move.b	$24(a0),d0
0000CF8C 323B 0000                  		move.w	Obj39_Index(pc,d0.w),d1
0000CF90 4EFB 1000                  		jmp	Obj39_Index(pc,d1.w)
0000CF94                            ; ===========================================================================
0000CF94 0000                       Obj39_Index:	dc.w Obj39_ChkPLC-Obj39_Index
0000CF96 0000                       		dc.w loc_C50C-Obj39_Index
0000CF98 0000                       		dc.w Obj39_Wait-Obj39_Index
0000CF9A                            ; ===========================================================================
0000CF9A                            
0000CF9A                            Obj39_ChkPLC:				; XREF: Obj39_Index
0000CF9A 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000CF9E 6700                       		beq.s	Obj39_Main	; if yes, branch
0000CFA0 4E75                       		rts	
0000CFA2                            ; ===========================================================================
0000CFA2                            
0000CFA2                            Obj39_Main:
0000CFA2 5428 0024                  		addq.b	#2,$24(a0)
0000CFA6 317C 0050 0008             		move.w	#$50,8(a0)	; set x-position
0000CFAC 0828 0000 001A             		btst	#0,$1A(a0)	; is the object	"OVER"?
0000CFB2 6700                       		beq.s	loc_C4EC	; if not, branch
0000CFB4 317C 01F0 0008             		move.w	#$1F0,8(a0)	; set x-position for "OVER"
0000CFBA                            
0000CFBA                            loc_C4EC:
0000CFBA 317C 00F0 000A             		move.w	#$F0,$A(a0)
0000CFC0 217C 0000 0000 0004        		move.l	#Map_obj39,4(a0)
0000CFC8 317C 855E 0002             		move.w	#$855E,2(a0)
0000CFCE 117C 0000 0001             		move.b	#0,1(a0)
0000CFD4 117C 0000 0018             		move.b	#0,$18(a0)
0000CFDA                            
0000CFDA                            loc_C50C:				; XREF: Obj39_Index
0000CFDA 7210                       		moveq	#$10,d1		; set horizontal speed
0000CFDC 0C68 0120 0008             		cmpi.w	#$120,8(a0)	; has item reached its target position?
0000CFE2 6700                       		beq.s	Obj39_SetWait	; if yes, branch
0000CFE4 6500                       		bcs.s	Obj39_Move
0000CFE6 4441                       		neg.w	d1
0000CFE8                            
0000CFE8                            Obj39_Move:
0000CFE8 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000CFEC 6000 0000                  		bra.w	DisplaySprite
0000CFF0                            ; ===========================================================================
0000CFF0                            
0000CFF0                            Obj39_SetWait:				; XREF: Obj39_Main
0000CFF0 317C 02D0 001E             		move.w	#720,$1E(a0)	; set time delay to 12 seconds
0000CFF6 5428 0024                  		addq.b	#2,$24(a0)
0000CFFA 4E75                       		rts	
0000CFFC                            ; ===========================================================================
0000CFFC                            
0000CFFC                            Obj39_Wait:				; XREF: Obj39_Index
0000CFFC 1038 F605                  		move.b	($FFFFF605).w,d0
0000D000 0200 0070                  		andi.b	#$70,d0		; is button A, B or C pressed?
0000D004 6600                       		bne.s	Obj39_ChgMode	; if yes, branch
0000D006 0828 0000 001A             		btst	#0,$1A(a0)
0000D00C 6600                       		bne.s	Obj39_Display
0000D00E 4A68 001E                  		tst.w	$1E(a0)		; has time delay reached zero?
0000D012 6700                       		beq.s	Obj39_ChgMode	; if yes, branch
0000D014 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000D018 6000 0000                  		bra.w	DisplaySprite
0000D01C                            ; ===========================================================================
0000D01C                            
0000D01C                            Obj39_ChgMode:				; XREF: Obj39_Wait
0000D01C 4A38 FE1A                  		tst.b	($FFFFFE1A).w	; is time over flag set?
0000D020 6600                       		bne.s	Obj39_ResetLvl	; if yes, branch
0000D022 11FC 0014 F600             		move.b	#$14,($FFFFF600).w ; set mode to $14 (continue screen)
0000D028 4A38 FE18                  		tst.b	($FFFFFE18).w	; do you have any continues?
0000D02C 6600                       		bne.s	Obj39_Display	; if yes, branch
0000D02E 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set mode to 0 (Sega screen)
0000D034 6000                       		bra.s	Obj39_Display
0000D036                            ; ===========================================================================
0000D036                            
0000D036                            Obj39_ResetLvl:				; XREF: Obj39_ChgMode
0000D036 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000D03C                            
0000D03C                            Obj39_Display:				; XREF: Obj39_ChgMode
0000D03C 6000 0000                  		bra.w	DisplaySprite
0000D040                            ; ===========================================================================
0000D040                            ; ---------------------------------------------------------------------------
0000D040                            ; Object 3A - "SONIC GOT THROUGH" title	card
0000D040                            ; ---------------------------------------------------------------------------
0000D040                            
0000D040                            Obj3A:					; XREF: Obj_Index
0000D040 7000                       		moveq	#0,d0
0000D042 1028 0024                  		move.b	$24(a0),d0
0000D046 323B 0000                  		move.w	Obj3A_Index(pc,d0.w),d1
0000D04A 4EFB 1000                  		jmp	Obj3A_Index(pc,d1.w)
0000D04E                            ; ===========================================================================
0000D04E 0000                       Obj3A_Index:	dc.w Obj3A_ChkPLC-Obj3A_Index
0000D050 0000                       		dc.w Obj3A_ChkPos-Obj3A_Index
0000D052 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000D054 0000                       		dc.w Obj3A_TimeBonus-Obj3A_Index
0000D056 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000D058 0000                       		dc.w Obj3A_NextLevel-Obj3A_Index
0000D05A 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000D05C 0000                       		dc.w Obj3A_ChkPos2-Obj3A_Index
0000D05E 0000                       		dc.w loc_C766-Obj3A_Index
0000D060                            ; ===========================================================================
0000D060                            
0000D060                            Obj3A_ChkPLC:				; XREF: Obj3A_Index
0000D060 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000D064 6700                       		beq.s	Obj3A_Main	; if yes, branch
0000D066 4E75                       		rts	
0000D068                            ; ===========================================================================
0000D068                            
0000D068                            Obj3A_Main:
0000D068 2248                       		movea.l	a0,a1
0000D06A 45F9 0000 0000             		lea	(Obj3A_Config).l,a2
0000D070 7206                       		moveq	#6,d1
0000D072                            
0000D072                            Obj3A_Loop:
0000D072 12BC 003A                  		move.b	#$3A,0(a1)
0000D076 3352 0008                  		move.w	(a2),8(a1)	; load start x-position
0000D07A 335A 0032                  		move.w	(a2)+,$32(a1)	; load finish x-position (same as start)
0000D07E 335A 0030                  		move.w	(a2)+,$30(a1)	; load main x-position
0000D082 335A 000A                  		move.w	(a2)+,$A(a1)	; load y-position
0000D086 135A 0024                  		move.b	(a2)+,$24(a1)
0000D08A 101A                       		move.b	(a2)+,d0
0000D08C 0C00 0006                  		cmpi.b	#6,d0
0000D090 6600                       		bne.s	loc_C5CA
0000D092 D038 FE11                  		add.b	($FFFFFE11).w,d0 ; add act number to frame number
0000D096                            
0000D096                            loc_C5CA:
0000D096 1340 001A                  		move.b	d0,$1A(a1)
0000D09A 237C 0000 0000 0004        		move.l	#Map_obj3A,4(a1)
0000D0A2 337C 8580 0002             		move.w	#$8580,2(a1)
0000D0A8 137C 0000 0001             		move.b	#0,1(a1)
0000D0AE 43E9 0040                  		lea	$40(a1),a1
0000D0B2 51C9 FFBE                  		dbf	d1,Obj3A_Loop	; repeat 6 times
0000D0B6                            
0000D0B6                            Obj3A_ChkPos:				; XREF: Obj3A_Index
0000D0B6 7210                       		moveq	#$10,d1		; set horizontal speed
0000D0B8 3028 0030                  		move.w	$30(a0),d0
0000D0BC B068 0008                  		cmp.w	8(a0),d0	; has item reached its target position?
0000D0C0 6700                       		beq.s	loc_C61A	; if yes, branch
0000D0C2 6C00                       		bge.s	Obj3A_Move
0000D0C4 4441                       		neg.w	d1
0000D0C6                            
0000D0C6                            Obj3A_Move:
0000D0C6 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000D0CA                            
0000D0CA                            loc_C5FE:				; XREF: loc_C61A
0000D0CA 3028 0008                  		move.w	8(a0),d0
0000D0CE 6B00                       		bmi.s	locret_C60E
0000D0D0 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000D0D4 6400                       		bcc.s	locret_C60E	; if yes, branch
0000D0D6 6000 0000                  		bra.w	DisplaySprite
0000D0DA                            ; ===========================================================================
0000D0DA                            
0000D0DA                            locret_C60E:
0000D0DA 4E75                       		rts	
0000D0DC                            ; ===========================================================================
0000D0DC                            
0000D0DC                            loc_C610:				; XREF: loc_C61A
0000D0DC 117C 000E 0024             		move.b	#$E,$24(a0)
0000D0E2 6000 0000                  		bra.w	Obj3A_ChkPos2
0000D0E6                            ; ===========================================================================
0000D0E6                            
0000D0E6                            loc_C61A:				; XREF: Obj3A_ChkPos
0000D0E6 0C38 000E D724             		cmpi.b	#$E,($FFFFD724).w
0000D0EC 67EE                       		beq.s	loc_C610
0000D0EE 0C28 0004 001A             		cmpi.b	#4,$1A(a0)
0000D0F4 66D4                       		bne.s	loc_C5FE
0000D0F6 5428 0024                  		addq.b	#2,$24(a0)
0000D0FA 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000D100                            
0000D100                            Obj3A_Wait:				; XREF: Obj3A_Index
0000D100 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000D104 6600                       		bne.s	Obj3A_Display
0000D106 5428 0024                  		addq.b	#2,$24(a0)
0000D10A                            
0000D10A                            Obj3A_Display:
0000D10A 6000 0000                  		bra.w	DisplaySprite
0000D10E                            ; ===========================================================================
0000D10E                            
0000D10E                            Obj3A_TimeBonus:			; XREF: Obj3A_Index
0000D10E 6100 0000                  		bsr.w	DisplaySprite
0000D112 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; set time/ring bonus update flag
0000D118 7000                       		moveq	#0,d0
0000D11A 4A78 F7D2                  		tst.w	($FFFFF7D2).w	; is time bonus	= zero?
0000D11E 6700                       		beq.s	Obj3A_RingBonus	; if yes, branch
0000D120 0640 000A                  		addi.w	#10,d0		; add 10 to score
0000D124 0478 000A F7D2             		subi.w	#10,($FFFFF7D2).w ; subtract 10	from time bonus
0000D12A                            
0000D12A                            Obj3A_RingBonus:
0000D12A 4A78 F7D4                  		tst.w	($FFFFF7D4).w	; is ring bonus	= zero?
0000D12E 6700                       		beq.s	Obj3A_ChkBonus	; if yes, branch
0000D130 0640 000A                  		addi.w	#10,d0		; add 10 to score
0000D134 0478 000A F7D4             		subi.w	#10,($FFFFF7D4).w ; subtract 10	from ring bonus
0000D13A                            
0000D13A                            Obj3A_ChkBonus:
0000D13A 4A40                       		tst.w	d0		; is there any bonus?
0000D13C 6600                       		bne.s	Obj3A_AddBonus	; if yes, branch
0000D13E 303C 00C5                  		move.w	#$C5,d0
0000D142 4EB9 0000 147C             		jsr	(PlaySound_Special).l ;	play "ker-ching" sound
0000D148 5428 0024                  		addq.b	#2,$24(a0)
0000D14C 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w
0000D152 6600                       		bne.s	Obj3A_SetDelay
0000D154 5828 0024                  		addq.b	#4,$24(a0)
0000D158                            
0000D158                            Obj3A_SetDelay:
0000D158 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000D15E                            
0000D15E                            locret_C692:
0000D15E 4E75                       		rts	
0000D160                            ; ===========================================================================
0000D160                            
0000D160                            Obj3A_AddBonus:				; XREF: Obj3A_ChkBonus
0000D160 4EB9 0000 0000             		jsr	AddPoints
0000D166 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000D16A 0200 0003                  		andi.b	#3,d0
0000D16E 66EE                       		bne.s	locret_C692
0000D170 303C 00CD                  		move.w	#$CD,d0
0000D174 4EF9 0000 147C             		jmp	(PlaySound_Special).l ;	play "blip" sound
0000D17A                            ; ===========================================================================
0000D17A                            
0000D17A                            Obj3A_NextLevel:			; XREF: Obj3A_Index
0000D17A 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000D17E 0240 0007                  		andi.w	#7,d0
0000D182 E748                       		lsl.w	#3,d0
0000D184 1238 FE11                  		move.b	($FFFFFE11).w,d1
0000D188 0241 0003                  		andi.w	#3,d1
0000D18C D241                       		add.w	d1,d1
0000D18E D041                       		add.w	d1,d0
0000D190 303B 0000                  		move.w	LevelOrder(pc,d0.w),d0 ; load level from level order array
0000D194 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level number
0000D198 4A40                       		tst.w	d0
0000D19A 6600                       		bne.s	Obj3A_ChkSS
0000D19C 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set game mode to level (00)
0000D1A2 6000                       		bra.s	Obj3A_Display2
0000D1A4                            ; ===========================================================================
0000D1A4                            
0000D1A4                            Obj3A_ChkSS:				; XREF: Obj3A_NextLevel
0000D1A4 4238 FE30                  		clr.b	($FFFFFE30).w	; clear	lamppost counter
0000D1A8 4A38 F7CD                  		tst.b	($FFFFF7CD).w	; has Sonic jumped into	a giant	ring?
0000D1AC 6700                       		beq.s	loc_C6EA	; if not, branch
0000D1AE 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set game mode to Special Stage (10)
0000D1B4 6000                       		bra.s	Obj3A_Display2
0000D1B6                            ; ===========================================================================
0000D1B6                            
0000D1B6                            loc_C6EA:				; XREF: Obj3A_ChkSS
0000D1B6 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000D1BC                            
0000D1BC                            Obj3A_Display2:				; XREF: Obj3A_NextLevel, Obj3A_ChkSS
0000D1BC 6000 0000                  		bra.w	DisplaySprite
0000D1C0                            ; ===========================================================================
0000D1C0                            ; ---------------------------------------------------------------------------
0000D1C0                            ; Level	order array
0000D1C0                            ; ---------------------------------------------------------------------------
0000D1C0                            LevelOrder:	incbin	misc\lvl_ord.bin
0000D1F0                            		even
0000D1F0                            ; ===========================================================================
0000D1F0                            
0000D1F0                            Obj3A_ChkPos2:				; XREF: Obj3A_Index
0000D1F0 7220                       		moveq	#$20,d1		; set horizontal speed
0000D1F2 3028 0032                  		move.w	$32(a0),d0
0000D1F6 B068 0008                  		cmp.w	8(a0),d0	; has item reached its finish position?
0000D1FA 6700                       		beq.s	Obj3A_SBZ2	; if yes, branch
0000D1FC 6C00                       		bge.s	Obj3A_Move2
0000D1FE 4441                       		neg.w	d1
0000D200                            
0000D200                            Obj3A_Move2:
0000D200 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000D204 3028 0008                  		move.w	8(a0),d0
0000D208 6B00                       		bmi.s	locret_C748
0000D20A 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000D20E 6400                       		bcc.s	locret_C748	; if yes, branch
0000D210 6000 0000                  		bra.w	DisplaySprite
0000D214                            ; ===========================================================================
0000D214                            
0000D214                            locret_C748:
0000D214 4E75                       		rts	
0000D216                            ; ===========================================================================
0000D216                            
0000D216                            Obj3A_SBZ2:				; XREF: Obj3A_ChkPos2
0000D216 0C28 0004 001A             		cmpi.b	#4,$1A(a0)
0000D21C 6600 0000                  		bne.w	DeleteObject
0000D220 5428 0024                  		addq.b	#2,$24(a0)
0000D224 4238 F7CC                  		clr.b	($FFFFF7CC).w	; unlock controls
0000D228 303C 008D                  		move.w	#$8D,d0
0000D22C 4EF9 0000 1476             		jmp	(PlaySound).l	; play FZ music
0000D232                            ; ===========================================================================
0000D232                            
0000D232                            loc_C766:				; XREF: Obj3A_Index
0000D232 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0000D236 0C78 2100 F72A             		cmpi.w	#$2100,($FFFFF72A).w
0000D23C 6700 0000                  		beq.w	DeleteObject
0000D240 4E75                       		rts	
0000D242                            ; ===========================================================================
0000D242 0004 0124 00BC             Obj3A_Config:	dc.w 4,	$124, $BC	; x-start, x-main, y-main
0000D248 0200                       		dc.b 2,	0		; routine number, frame	number (changes)
0000D24A FEE0 0120 00D0             		dc.w $FEE0, $120, $D0
0000D250 0201                       		dc.b 2,	1
0000D252 040C 014C 00D6             		dc.w $40C, $14C, $D6
0000D258 0206                       		dc.b 2,	6
0000D25A 0520 0120 00EC             		dc.w $520, $120, $EC
0000D260 0202                       		dc.b 2,	2
0000D262 0540 0120 00FC             		dc.w $540, $120, $FC
0000D268 0203                       		dc.b 2,	3
0000D26A 0560 0120 010C             		dc.w $560, $120, $10C
0000D270 0204                       		dc.b 2,	4
0000D272 020C 014C 00CC             		dc.w $20C, $14C, $CC
0000D278 0205                       		dc.b 2,	5
0000D27A                            ; ===========================================================================
0000D27A                            ; ---------------------------------------------------------------------------
0000D27A                            ; Object 7E - special stage results screen
0000D27A                            ; ---------------------------------------------------------------------------
0000D27A                            
0000D27A                            Obj7E:					; XREF: Obj_Index
0000D27A 7000                       		moveq	#0,d0
0000D27C 1028 0024                  		move.b	$24(a0),d0
0000D280 323B 0000                  		move.w	Obj7E_Index(pc,d0.w),d1
0000D284 4EFB 1000                  		jmp	Obj7E_Index(pc,d1.w)
0000D288                            ; ===========================================================================
0000D288 0000                       Obj7E_Index:	dc.w Obj7E_ChkPLC-Obj7E_Index
0000D28A 0000                       		dc.w Obj7E_ChkPos-Obj7E_Index
0000D28C 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000D28E 0000                       		dc.w Obj7E_RingBonus-Obj7E_Index
0000D290 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000D292 0000                       		dc.w Obj7E_Exit-Obj7E_Index
0000D294 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000D296 0000                       		dc.w Obj7E_Continue-Obj7E_Index
0000D298 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000D29A 0000                       		dc.w Obj7E_Exit-Obj7E_Index
0000D29C 0000                       		dc.w loc_C91A-Obj7E_Index
0000D29E                            ; ===========================================================================
0000D29E                            
0000D29E                            Obj7E_ChkPLC:				; XREF: Obj7E_Index
0000D29E 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000D2A2 6700                       		beq.s	Obj7E_Main	; if yes, branch
0000D2A4 4E75                       		rts	
0000D2A6                            ; ===========================================================================
0000D2A6                            
0000D2A6                            Obj7E_Main:
0000D2A6 2248                       		movea.l	a0,a1
0000D2A8 45F9 0000 0000             		lea	(Obj7E_Config).l,a2
0000D2AE 7203                       		moveq	#3,d1
0000D2B0 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	50 or more rings?
0000D2B6 6500                       		bcs.s	Obj7E_Loop	; if no, branch
0000D2B8 5241                       		addq.w	#1,d1		; if yes, add 1	to d1 (number of sprites)
0000D2BA                            
0000D2BA                            Obj7E_Loop:
0000D2BA 12BC 007E                  		move.b	#$7E,0(a1)
0000D2BE 335A 0008                  		move.w	(a2)+,8(a1)	; load start x-position
0000D2C2 335A 0030                  		move.w	(a2)+,$30(a1)	; load main x-position
0000D2C6 335A 000A                  		move.w	(a2)+,$A(a1)	; load y-position
0000D2CA 135A 0024                  		move.b	(a2)+,$24(a1)
0000D2CE 135A 001A                  		move.b	(a2)+,$1A(a1)
0000D2D2 237C 0000 0000 0004        		move.l	#Map_obj7E,4(a1)
0000D2DA 337C 8580 0002             		move.w	#$8580,2(a1)
0000D2E0 137C 0000 0001             		move.b	#0,1(a1)
0000D2E6 43E9 0040                  		lea	$40(a1),a1
0000D2EA 51C9 FFCE                  		dbf	d1,Obj7E_Loop	; repeat sequence 3 or 4 times
0000D2EE                            
0000D2EE 7007                       		moveq	#7,d0
0000D2F0 1238 FE57                  		move.b	($FFFFFE57).w,d1
0000D2F4 6700                       		beq.s	loc_C842
0000D2F6 7000                       		moveq	#0,d0
0000D2F8 0C01 0006                  		cmpi.b	#6,d1		; do you have all chaos	emeralds?
0000D2FC 6600                       		bne.s	loc_C842	; if not, branch
0000D2FE 7008                       		moveq	#8,d0		; load "Sonic got them all" text
0000D300 317C 0018 0008             		move.w	#$18,8(a0)
0000D306 317C 0118 0030             		move.w	#$118,$30(a0)	; change position of text
0000D30C                            
0000D30C                            loc_C842:
0000D30C 1140 001A                  		move.b	d0,$1A(a0)
0000D310                            
0000D310                            Obj7E_ChkPos:				; XREF: Obj7E_Index
0000D310 7210                       		moveq	#$10,d1		; set horizontal speed
0000D312 3028 0030                  		move.w	$30(a0),d0
0000D316 B068 0008                  		cmp.w	8(a0),d0	; has item reached its target position?
0000D31A 6700                       		beq.s	loc_C86C	; if yes, branch
0000D31C 6C00                       		bge.s	Obj7E_Move
0000D31E 4441                       		neg.w	d1
0000D320                            
0000D320                            Obj7E_Move:
0000D320 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000D324                            
0000D324                            loc_C85A:				; XREF: loc_C86C
0000D324 3028 0008                  		move.w	8(a0),d0
0000D328 6B00                       		bmi.s	locret_C86A
0000D32A 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000D32E 6400                       		bcc.s	locret_C86A	; if yes, branch
0000D330 6000 0000                  		bra.w	DisplaySprite
0000D334                            ; ===========================================================================
0000D334                            
0000D334                            locret_C86A:
0000D334 4E75                       		rts	
0000D336                            ; ===========================================================================
0000D336                            
0000D336                            loc_C86C:				; XREF: Obj7E_ChkPos
0000D336 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000D33C 66E6                       		bne.s	loc_C85A
0000D33E 5428 0024                  		addq.b	#2,$24(a0)
0000D342 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000D348 11FC 007F D800             		move.b	#$7F,($FFFFD800).w ; load chaos	emerald	object
0000D34E                            
0000D34E                            Obj7E_Wait:				; XREF: Obj7E_Index
0000D34E 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000D352 6600                       		bne.s	Obj7E_Display
0000D354 5428 0024                  		addq.b	#2,$24(a0)
0000D358                            
0000D358                            Obj7E_Display:
0000D358 6000 0000                  		bra.w	DisplaySprite
0000D35C                            ; ===========================================================================
0000D35C                            
0000D35C                            Obj7E_RingBonus:			; XREF: Obj7E_Index
0000D35C 6100 0000                  		bsr.w	DisplaySprite
0000D360 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; set ring bonus update flag
0000D366 4A78 F7D4                  		tst.w	($FFFFF7D4).w	; is ring bonus	= zero?
0000D36A 6700                       		beq.s	loc_C8C4	; if yes, branch
0000D36C 0478 000A F7D4             		subi.w	#10,($FFFFF7D4).w ; subtract 10	from ring bonus
0000D372 700A                       		moveq	#10,d0		; add 10 to score
0000D374 4EB9 0000 0000             		jsr	AddPoints
0000D37A 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000D37E 0200 0003                  		andi.b	#3,d0
0000D382 6600                       		bne.s	locret_C8EA
0000D384 303C 00CD                  		move.w	#$CD,d0
0000D388 4EF9 0000 147C             		jmp	(PlaySound_Special).l ;	play "blip" sound
0000D38E                            ; ===========================================================================
0000D38E                            
0000D38E                            loc_C8C4:				; XREF: Obj7E_RingBonus
0000D38E 303C 00C5                  		move.w	#$C5,d0
0000D392 4EB9 0000 147C             		jsr	(PlaySound_Special).l ;	play "ker-ching" sound
0000D398 5428 0024                  		addq.b	#2,$24(a0)
0000D39C 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000D3A2 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	at least 50 rings?
0000D3A8 6500                       		bcs.s	locret_C8EA	; if not, branch
0000D3AA 317C 003C 001E             		move.w	#60,$1E(a0)	; set time delay to 1 second
0000D3B0 5828 0024                  		addq.b	#4,$24(a0)	; goto "Obj7E_Continue"	routine
0000D3B4                            
0000D3B4                            locret_C8EA:
0000D3B4 4E75                       		rts	
0000D3B6                            ; ===========================================================================
0000D3B6                            
0000D3B6                            Obj7E_Exit:				; XREF: Obj7E_Index
0000D3B6 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000D3BC 6000 0000                  		bra.w	DisplaySprite
0000D3C0                            ; ===========================================================================
0000D3C0                            
0000D3C0                            Obj7E_Continue:				; XREF: Obj7E_Index
0000D3C0 11FC 0004 D6DA             		move.b	#4,($FFFFD6DA).w
0000D3C6 11FC 0014 D6E4             		move.b	#$14,($FFFFD6E4).w
0000D3CC 303C 00BF                  		move.w	#$BF,d0
0000D3D0 4EB9 0000 147C             		jsr	(PlaySound_Special).l ;	play continues music
0000D3D6 5428 0024                  		addq.b	#2,$24(a0)
0000D3DA 317C 0168 001E             		move.w	#360,$1E(a0)	; set time delay to 6 seconds
0000D3E0 6000 0000                  		bra.w	DisplaySprite
0000D3E4                            ; ===========================================================================
0000D3E4                            
0000D3E4                            loc_C91A:				; XREF: Obj7E_Index
0000D3E4 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000D3E8 0200 000F                  		andi.b	#$F,d0
0000D3EC 6600                       		bne.s	Obj7E_Display2
0000D3EE 0868 0000 001A             		bchg	#0,$1A(a0)
0000D3F4                            
0000D3F4                            Obj7E_Display2:
0000D3F4 6000 0000                  		bra.w	DisplaySprite
0000D3F8                            ; ===========================================================================
0000D3F8 0020 0120 00C4             Obj7E_Config:	dc.w $20, $120,	$C4	; start	x-pos, main x-pos, y-pos
0000D3FE 0200                       		dc.b 2,	0		; rountine number, frame number
0000D400 0320 0120 0118             		dc.w $320, $120, $118
0000D406 0201                       		dc.b 2,	1
0000D408 0360 0120 0128             		dc.w $360, $120, $128
0000D40E 0202                       		dc.b 2,	2
0000D410 01EC 011C 00C4             		dc.w $1EC, $11C, $C4
0000D416 0203                       		dc.b 2,	3
0000D418 03A0 0120 0138             		dc.w $3A0, $120, $138
0000D41E 0206                       		dc.b 2,	6
0000D420                            ; ===========================================================================
0000D420                            ; ---------------------------------------------------------------------------
0000D420                            ; Object 7F - chaos emeralds from the special stage results screen
0000D420                            ; ---------------------------------------------------------------------------
0000D420                            
0000D420                            Obj7F:					; XREF: Obj_Index
0000D420 7000                       		moveq	#0,d0
0000D422 1028 0024                  		move.b	$24(a0),d0
0000D426 323B 0000                  		move.w	Obj7F_Index(pc,d0.w),d1
0000D42A 4EFB 1000                  		jmp	Obj7F_Index(pc,d1.w)
0000D42E                            ; ===========================================================================
0000D42E 0000                       Obj7F_Index:	dc.w Obj7F_Main-Obj7F_Index
0000D430 0000                       		dc.w Obj7F_Flash-Obj7F_Index
0000D432                            
0000D432                            ; ---------------------------------------------------------------------------
0000D432                            ; X-axis positions for chaos emeralds
0000D432                            ; ---------------------------------------------------------------------------
0000D432 0110 0128 00F8 0140 00E0+  Obj7F_PosData:	dc.w $110, $128, $F8, $140, $E0, $158
0000D43E                            ; ===========================================================================
0000D43E                            
0000D43E                            Obj7F_Main:				; XREF: Obj7F_Index
0000D43E 2248                       		movea.l	a0,a1
0000D440 45F9 0000 D432             		lea	(Obj7F_PosData).l,a2
0000D446 7400                       		moveq	#0,d2
0000D448 7200                       		moveq	#0,d1
0000D44A 1238 FE57                  		move.b	($FFFFFE57).w,d1 ; d1 is number	of emeralds
0000D44E 5301                       		subq.b	#1,d1		; subtract 1 from d1
0000D450 6500 0000                  		bcs.w	DeleteObject	; if you have 0	emeralds, branch
0000D454                            
0000D454                            Obj7F_Loop:
0000D454 12BC 007F                  		move.b	#$7F,0(a1)
0000D458 335A 0008                  		move.w	(a2)+,8(a1)	; set x-position
0000D45C 337C 00F0 000A             		move.w	#$F0,$A(a1)	; set y-position
0000D462 47F8 FE58                  		lea	($FFFFFE58).w,a3 ; check which emeralds	you have
0000D466 1633 2000                  		move.b	(a3,d2.w),d3
0000D46A 1343 001A                  		move.b	d3,$1A(a1)
0000D46E 1343 001C                  		move.b	d3,$1C(a1)
0000D472 5202                       		addq.b	#1,d2
0000D474 5429 0024                  		addq.b	#2,$24(a1)
0000D478 237C 0000 0000 0004        		move.l	#Map_obj7F,4(a1)
0000D480 337C 8541 0002             		move.w	#$8541,2(a1)
0000D486 137C 0000 0001             		move.b	#0,1(a1)
0000D48C 43E9 0040                  		lea	$40(a1),a1	; next object
0000D490 51C9 FFC2                  		dbf	d1,Obj7F_Loop	; loop for d1 number of	emeralds
0000D494                            
0000D494                            Obj7F_Flash:				; XREF: Obj7F_Index
0000D494 1028 001A                  		move.b	$1A(a0),d0
0000D498 117C 0006 001A             		move.b	#6,$1A(a0)	; load 6th frame (blank)
0000D49E 0C00 0006                  		cmpi.b	#6,d0
0000D4A2 6600                       		bne.s	Obj7F_Display
0000D4A4 1168 001C 001A             		move.b	$1C(a0),$1A(a0)	; load visible frame
0000D4AA                            
0000D4AA                            Obj7F_Display:
0000D4AA 6000 0000                  		bra.w	DisplaySprite
0000D4AE                            ; ===========================================================================
0000D4AE                            ; ---------------------------------------------------------------------------
0000D4AE                            ; Sprite mappings - zone title cards
0000D4AE                            ; ---------------------------------------------------------------------------
0000D4AE                            Map_obj34:
0000D4AE                            	include "_maps\obj34.asm"
0000D4AE                            ; ---------------------------------------------------------------------------
0000D4AE                            ; Sprite mappings - zone title cards
0000D4AE                            ; ---------------------------------------------------------------------------
0000D4AE 0000                           	dc.w byte_C9FE-Map_obj34
0000D4B0 0000                       		dc.w byte_CA2C-Map_obj34
0000D4B2 0000                       		dc.w byte_CA5A-Map_obj34
0000D4B4 0000                       		dc.w byte_CA7A-Map_obj34
0000D4B6 0000                       		dc.w byte_CAA8-Map_obj34
0000D4B8 0000                       		dc.w byte_CADC-Map_obj34
0000D4BA 0000                       		dc.w byte_CB10-Map_obj34
0000D4BC 0000                       		dc.w byte_CB26-Map_obj34
0000D4BE 0000                       		dc.w byte_CB31-Map_obj34
0000D4C0 0000                       		dc.w byte_CB3C-Map_obj34
0000D4C2 0000                       		dc.w byte_CB47-Map_obj34
0000D4C4 0000                       		dc.w byte_CB8A-Map_obj34
0000D4C6 09                         byte_C9FE:	dc.b 9 			; GREEN HILL
0000D4C7 F805 0018 B4               		dc.b $F8, 5, 0,	$18, $B4
0000D4CC F805 003A C4               		dc.b $F8, 5, 0,	$3A, $C4
0000D4D1 F805 0010 D4               		dc.b $F8, 5, 0,	$10, $D4
0000D4D6 F805 0010 E4               		dc.b $F8, 5, 0,	$10, $E4
0000D4DB F805 002E F4               		dc.b $F8, 5, 0,	$2E, $F4
0000D4E0 F805 001C 14               		dc.b $F8, 5, 0,	$1C, $14
0000D4E5 F801 0020 24               		dc.b $F8, 1, 0,	$20, $24
0000D4EA F805 0026 2C               		dc.b $F8, 5, 0,	$26, $2C
0000D4EF F805 0026 3C               		dc.b $F8, 5, 0,	$26, $3C
0000D4F4 09                         byte_CA2C:	dc.b 9			; LABYRINTH
0000D4F5 F805 0026 BC               		dc.b $F8, 5, 0,	$26, $BC
0000D4FA F805 0000 CC               		dc.b $F8, 5, 0,	0, $CC
0000D4FF F805 0004 DC               		dc.b $F8, 5, 0,	4, $DC
0000D504 F805 004A EC               		dc.b $F8, 5, 0,	$4A, $EC
0000D509 F805 003A FC               		dc.b $F8, 5, 0,	$3A, $FC
0000D50E F801 0020 0C               		dc.b $F8, 1, 0,	$20, $C
0000D513 F805 002E 14               		dc.b $F8, 5, 0,	$2E, $14
0000D518 F805 0042 24               		dc.b $F8, 5, 0,	$42, $24
0000D51D F805 001C 34               		dc.b $F8, 5, 0,	$1C, $34
0000D522 06                         byte_CA5A:	dc.b 6			; MARBLE
0000D523 F805 002A CF               		dc.b $F8, 5, 0,	$2A, $CF
0000D528 F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
0000D52D F805 003A F0               		dc.b $F8, 5, 0,	$3A, $F0
0000D532 F805 0004 00               		dc.b $F8, 5, 0,	4, 0
0000D537 F805 0026 10               		dc.b $F8, 5, 0,	$26, $10
0000D53C F805 0010 20               		dc.b $F8, 5, 0,	$10, $20
0000D541 00                         		dc.b 0
0000D542 09                         byte_CA7A:	dc.b 9			; STAR	LIGHT
0000D543 F805 003E B4               		dc.b $F8, 5, 0,	$3E, $B4
0000D548 F805 0042 C4               		dc.b $F8, 5, 0,	$42, $C4
0000D54D F805 0000 D4               		dc.b $F8, 5, 0,	0, $D4
0000D552 F805 003A E4               		dc.b $F8, 5, 0,	$3A, $E4
0000D557 F805 0026 04               		dc.b $F8, 5, 0,	$26, 4
0000D55C F801 0020 14               		dc.b $F8, 1, 0,	$20, $14
0000D561 F805 0018 1C               		dc.b $F8, 5, 0,	$18, $1C
0000D566 F805 001C 2C               		dc.b $F8, 5, 0,	$1C, $2C
0000D56B F805 0042 3C               		dc.b $F8, 5, 0,	$42, $3C
0000D570 0A                         byte_CAA8:	dc.b $A			; SPRING YARD
0000D571 F805 003E AC               		dc.b $F8, 5, 0,	$3E, $AC
0000D576 F805 0036 BC               		dc.b $F8, 5, 0,	$36, $BC
0000D57B F805 003A CC               		dc.b $F8, 5, 0,	$3A, $CC
0000D580 F801 0020 DC               		dc.b $F8, 1, 0,	$20, $DC
0000D585 F805 002E E4               		dc.b $F8, 5, 0,	$2E, $E4
0000D58A F805 0018 F4               		dc.b $F8, 5, 0,	$18, $F4
0000D58F F805 004A 14               		dc.b $F8, 5, 0,	$4A, $14
0000D594 F805 0000 24               		dc.b $F8, 5, 0,	0, $24
0000D599 F805 003A 34               		dc.b $F8, 5, 0,	$3A, $34
0000D59E F805 000C 44               		dc.b $F8, 5, 0,	$C, $44
0000D5A3 00                         		dc.b 0
0000D5A4 0A                         byte_CADC:	dc.b $A			; SCRAP BRAIN
0000D5A5 F805 003E AC               		dc.b $F8, 5, 0,	$3E, $AC
0000D5AA F805 0008 BC               		dc.b $F8, 5, 0,	8, $BC
0000D5AF F805 003A CC               		dc.b $F8, 5, 0,	$3A, $CC
0000D5B4 F805 0000 DC               		dc.b $F8, 5, 0,	0, $DC
0000D5B9 F805 0036 EC               		dc.b $F8, 5, 0,	$36, $EC
0000D5BE F805 0004 0C               		dc.b $F8, 5, 0,	4, $C
0000D5C3 F805 003A 1C               		dc.b $F8, 5, 0,	$3A, $1C
0000D5C8 F805 0000 2C               		dc.b $F8, 5, 0,	0, $2C
0000D5CD F801 0020 3C               		dc.b $F8, 1, 0,	$20, $3C
0000D5D2 F805 002E 44               		dc.b $F8, 5, 0,	$2E, $44
0000D5D7 00                         		dc.b 0
0000D5D8 04                         byte_CB10:	dc.b 4			; ZONE
0000D5D9 F805 004E E0               		dc.b $F8, 5, 0,	$4E, $E0
0000D5DE F805 0032 F0               		dc.b $F8, 5, 0,	$32, $F0
0000D5E3 F805 002E 00               		dc.b $F8, 5, 0,	$2E, 0
0000D5E8 F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000D5ED 00                         		dc.b 0
0000D5EE 02                         byte_CB26:	dc.b 2			; ACT 1
0000D5EF 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000D5F4 F402 0057 0C               		dc.b $F4, 2, 0,	$57, $C
0000D5F9 02                         byte_CB31:	dc.b 2			; ACT 2
0000D5FA 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000D5FF F406 005A 08               		dc.b $F4, 6, 0,	$5A, 8
0000D604 02                         byte_CB3C:	dc.b 2			; ACT 3
0000D605 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000D60A F406 0060 08               		dc.b $F4, 6, 0,	$60, 8
0000D60F 0D                         byte_CB47:	dc.b $D			; Oval
0000D610 E40C 0070 F4               		dc.b $E4, $C, 0, $70, $F4
0000D615 E402 0074 14               		dc.b $E4, 2, 0,	$74, $14
0000D61A EC04 0077 EC               		dc.b $EC, 4, 0,	$77, $EC
0000D61F F405 0079 E4               		dc.b $F4, 5, 0,	$79, $E4
0000D624 140C 1870 EC               		dc.b $14, $C, $18, $70,	$EC
0000D629 0402 1874 E4               		dc.b 4,	2, $18,	$74, $E4
0000D62E 0C04 1877 04               		dc.b $C, 4, $18, $77, 4
0000D633 FC05 1879 0C               		dc.b $FC, 5, $18, $79, $C
0000D638 EC08 007D FC               		dc.b $EC, 8, 0,	$7D, $FC
0000D63D F40C 007C F4               		dc.b $F4, $C, 0, $7C, $F4
0000D642 FC08 007C F4               		dc.b $FC, 8, 0,	$7C, $F4
0000D647 040C 007C EC               		dc.b 4,	$C, 0, $7C, $EC
0000D64C 0C08 007C EC               		dc.b $C, 8, 0, $7C, $EC
0000D651 00                         		dc.b 0
0000D652 05                         byte_CB8A:	dc.b 5			; FINAL
0000D653 F805 0014 DC               		dc.b $F8, 5, 0,	$14, $DC
0000D658 F801 0020 EC               		dc.b $F8, 1, 0,	$20, $EC
0000D65D F805 002E F4               		dc.b $F8, 5, 0,	$2E, $F4
0000D662 F805 0000 04               		dc.b $F8, 5, 0,	0, 4
0000D667 F805 0026 14               		dc.b $F8, 5, 0,	$26, $14
0000D66C                            		even
0000D66C                            		even
0000D66C                            ; ---------------------------------------------------------------------------
0000D66C                            ; Sprite mappings - "GAME OVER"	and "TIME OVER"
0000D66C                            ; ---------------------------------------------------------------------------
0000D66C                            Map_obj39:
0000D66C                            	include "_maps\obj39.asm"
0000D66C                            ; ---------------------------------------------------------------------------
0000D66C                            ; Sprite mappings - "GAME OVER"	and "TIME OVER"
0000D66C                            ; ---------------------------------------------------------------------------
0000D66C 0000                       		dc.w byte_CBAC-Map_obj39
0000D66E 0000                       		dc.w byte_CBB7-Map_obj39
0000D670 0000                       		dc.w byte_CBC2-Map_obj39
0000D672 0000                       		dc.w byte_CBCD-Map_obj39
0000D674 02                         byte_CBAC:	dc.b 2
0000D675 F80D 0000 B8               		dc.b $F8, $D, 0, 0, $B8
0000D67A F80D 0008 D8               		dc.b $F8, $D, 0, 8, $D8
0000D67F 02                         byte_CBB7:	dc.b 2
0000D680 F80D 0014 08               		dc.b $F8, $D, 0, $14, 8
0000D685 F80D 000C 28               		dc.b $F8, $D, 0, $C, $28
0000D68A 02                         byte_CBC2:	dc.b 2
0000D68B F809 001C C4               		dc.b $F8, 9, 0,	$1C, $C4
0000D690 F80D 0008 DC               		dc.b $F8, $D, 0, 8, $DC
0000D695 02                         byte_CBCD:	dc.b 2
0000D696 F80D 0014 0C               		dc.b $F8, $D, 0, $14, $C
0000D69B F80D 000C 2C               		dc.b $F8, $D, 0, $C, $2C
0000D6A0                            		even
0000D6A0                            		even
0000D6A0                            
0000D6A0                            ; ---------------------------------------------------------------------------
0000D6A0                            ; Sprite mappings - "SONIC HAS PASSED" title card
0000D6A0                            ; ---------------------------------------------------------------------------
0000D6A0 0000                       Map_obj3A:	dc.w byte_CBEA-Map_obj3A
0000D6A2 0000                       		dc.w byte_CC13-Map_obj3A
0000D6A4 0000                       		dc.w byte_CC32-Map_obj3A
0000D6A6 0000                       		dc.w byte_CC51-Map_obj3A
0000D6A8 0000                       		dc.w byte_CC75-Map_obj3A
0000D6AA FF6F                       		dc.w byte_CB47-Map_obj3A
0000D6AC FF4E                       		dc.w byte_CB26-Map_obj3A
0000D6AE FF59                       		dc.w byte_CB31-Map_obj3A
0000D6B0 FF64                       		dc.w byte_CB3C-Map_obj3A
0000D6B2 08                         byte_CBEA:	dc.b 8			; SONIC HAS
0000D6B3 F805 003E B8               		dc.b $F8, 5, 0,	$3E, $B8
0000D6B8 F805 0032 C8               		dc.b $F8, 5, 0,	$32, $C8
0000D6BD F805 002E D8               		dc.b $F8, 5, 0,	$2E, $D8
0000D6C2 F801 0020 E8               		dc.b $F8, 1, 0,	$20, $E8
0000D6C7 F805 0008 F0               		dc.b $F8, 5, 0,	8, $F0
0000D6CC F805 001C 10               		dc.b $F8, 5, 0,	$1C, $10
0000D6D1 F805 0000 20               		dc.b $F8, 5, 0,	0, $20
0000D6D6 F805 003E 30               		dc.b $F8, 5, 0,	$3E, $30
0000D6DB 06                         byte_CC13:	dc.b 6			; PASSED
0000D6DC F805 0036 D0               		dc.b $F8, 5, 0,	$36, $D0
0000D6E1 F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
0000D6E6 F805 003E F0               		dc.b $F8, 5, 0,	$3E, $F0
0000D6EB F805 003E 00               		dc.b $F8, 5, 0,	$3E, 0
0000D6F0 F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000D6F5 F805 000C 20               		dc.b $F8, 5, 0,	$C, $20
0000D6FA 06                         byte_CC32:	dc.b 6			; SCORE
0000D6FB F80D 014A B0               		dc.b $F8, $D, 1, $4A, $B0
0000D700 F801 0162 D0               		dc.b $F8, 1, 1,	$62, $D0
0000D705 F809 0164 18               		dc.b $F8, 9, 1,	$64, $18
0000D70A F80D 016A 30               		dc.b $F8, $D, 1, $6A, $30
0000D70F F704 006E CD               		dc.b $F7, 4, 0,	$6E, $CD
0000D714 FF04 186E CD               		dc.b $FF, 4, $18, $6E, $CD
0000D719 07                         byte_CC51:	dc.b 7			; TIME BONUS
0000D71A F80D 015A B0               		dc.b $F8, $D, 1, $5A, $B0
0000D71F F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000D724 F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000D729 F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000D72E FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000D733 F80D FFF0 28               		dc.b $F8, $D, $FF, $F0,	$28
0000D738 F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000D73D 07                         byte_CC75:	dc.b 7			; RING BONUS
0000D73E F80D 0152 B0               		dc.b $F8, $D, 1, $52, $B0
0000D743 F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000D748 F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000D74D F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000D752 FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000D757 F80D FFF8 28               		dc.b $F8, $D, $FF, $F8,	$28
0000D75C F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000D762 00                         		even
0000D762                            ; ---------------------------------------------------------------------------
0000D762                            ; Sprite mappings - special stage results screen
0000D762                            ; ---------------------------------------------------------------------------
0000D762 0000                       Map_obj7E:	dc.w byte_CCAC-Map_obj7E
0000D764 0000                       		dc.w byte_CCEE-Map_obj7E
0000D766 0000                       		dc.w byte_CD0D-Map_obj7E
0000D768 FEAD                       		dc.w byte_CB47-Map_obj7E
0000D76A 0000                       		dc.w byte_CD31-Map_obj7E
0000D76C 0000                       		dc.w byte_CD46-Map_obj7E
0000D76E 0000                       		dc.w byte_CD5B-Map_obj7E
0000D770 0000                       		dc.w byte_CD6B-Map_obj7E
0000D772 0000                       		dc.w byte_CDA8-Map_obj7E
0000D774 0D                         byte_CCAC:	dc.b $D			; "CHAOS EMERALDS"
0000D775 F805 0008 90               		dc.b $F8, 5, 0,	8, $90
0000D77A F805 001C A0               		dc.b $F8, 5, 0,	$1C, $A0
0000D77F F805 0000 B0               		dc.b $F8, 5, 0,	0, $B0
0000D784 F805 0032 C0               		dc.b $F8, 5, 0,	$32, $C0
0000D789 F805 003E D0               		dc.b $F8, 5, 0,	$3E, $D0
0000D78E F805 0010 F0               		dc.b $F8, 5, 0,	$10, $F0
0000D793 F805 002A 00               		dc.b $F8, 5, 0,	$2A, 0
0000D798 F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000D79D F805 003A 20               		dc.b $F8, 5, 0,	$3A, $20
0000D7A2 F805 0000 30               		dc.b $F8, 5, 0,	0, $30
0000D7A7 F805 0026 40               		dc.b $F8, 5, 0,	$26, $40
0000D7AC F805 000C 50               		dc.b $F8, 5, 0,	$C, $50
0000D7B1 F805 003E 60               		dc.b $F8, 5, 0,	$3E, $60
0000D7B6 06                         byte_CCEE:	dc.b 6			; "SCORE"
0000D7B7 F80D 014A B0               		dc.b $F8, $D, 1, $4A, $B0
0000D7BC F801 0162 D0               		dc.b $F8, 1, 1,	$62, $D0
0000D7C1 F809 0164 18               		dc.b $F8, 9, 1,	$64, $18
0000D7C6 F80D 016A 30               		dc.b $F8, $D, 1, $6A, $30
0000D7CB F704 006E CD               		dc.b $F7, 4, 0,	$6E, $CD
0000D7D0 FF04 186E CD               		dc.b $FF, 4, $18, $6E, $CD
0000D7D5 07                         byte_CD0D:	dc.b 7
0000D7D6 F80D 0152 B0               		dc.b $F8, $D, 1, $52, $B0
0000D7DB F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000D7E0 F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000D7E5 F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000D7EA FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000D7EF F80D FFF8 28               		dc.b $F8, $D, $FF, $F8,	$28
0000D7F4 F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000D7F9 04                         byte_CD31:	dc.b 4
0000D7FA F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000D7FF F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000D804 F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000D809 F806 1FE3 40               		dc.b $F8, 6, $1F, $E3, $40
0000D80E 04                         byte_CD46:	dc.b 4
0000D80F F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000D814 F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000D819 F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000D81E F806 1FE9 40               		dc.b $F8, 6, $1F, $E9, $40
0000D823 03                         byte_CD5B:	dc.b 3
0000D824 F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000D829 F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000D82E F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000D833 0C                         byte_CD6B:	dc.b $C			; "SPECIAL STAGE"
0000D834 F805 003E 9C               		dc.b $F8, 5, 0,	$3E, $9C
0000D839 F805 0036 AC               		dc.b $F8, 5, 0,	$36, $AC
0000D83E F805 0010 BC               		dc.b $F8, 5, 0,	$10, $BC
0000D843 F805 0008 CC               		dc.b $F8, 5, 0,	8, $CC
0000D848 F801 0020 DC               		dc.b $F8, 1, 0,	$20, $DC
0000D84D F805 0000 E4               		dc.b $F8, 5, 0,	0, $E4
0000D852 F805 0026 F4               		dc.b $F8, 5, 0,	$26, $F4
0000D857 F805 003E 14               		dc.b $F8, 5, 0,	$3E, $14
0000D85C F805 0042 24               		dc.b $F8, 5, 0,	$42, $24
0000D861 F805 0000 34               		dc.b $F8, 5, 0,	0, $34
0000D866 F805 0018 44               		dc.b $F8, 5, 0,	$18, $44
0000D86B F805 0010 54               		dc.b $F8, 5, 0,	$10, $54
0000D870 0F                         byte_CDA8:	dc.b $F			; "SONIC GOT THEM ALL"
0000D871 F805 003E 88               		dc.b $F8, 5, 0,	$3E, $88
0000D876 F805 0032 98               		dc.b $F8, 5, 0,	$32, $98
0000D87B F805 002E A8               		dc.b $F8, 5, 0,	$2E, $A8
0000D880 F801 0020 B8               		dc.b $F8, 1, 0,	$20, $B8
0000D885 F805 0008 C0               		dc.b $F8, 5, 0,	8, $C0
0000D88A F805 0018 D8               		dc.b $F8, 5, 0,	$18, $D8
0000D88F F805 0032 E8               		dc.b $F8, 5, 0,	$32, $E8
0000D894 F805 0042 F8               		dc.b $F8, 5, 0,	$42, $F8
0000D899 F805 0042 10               		dc.b $F8, 5, 0,	$42, $10
0000D89E F805 001C 20               		dc.b $F8, 5, 0,	$1C, $20
0000D8A3 F805 0010 30               		dc.b $F8, 5, 0,	$10, $30
0000D8A8 F805 002A 40               		dc.b $F8, 5, 0,	$2A, $40
0000D8AD F805 0000 58               		dc.b $F8, 5, 0,	0, $58
0000D8B2 F805 0026 68               		dc.b $F8, 5, 0,	$26, $68
0000D8B7 F805 0026 78               		dc.b $F8, 5, 0,	$26, $78
0000D8BC                            		even
0000D8BC                            ; ---------------------------------------------------------------------------
0000D8BC                            ; Sprite mappings - chaos emeralds from	the special stage results screen
0000D8BC                            ; ---------------------------------------------------------------------------
0000D8BC                            Map_obj7F:
0000D8BC                            	include "_maps\obj7F.asm"
0000D8BC                            ; ---------------------------------------------------------------------------
0000D8BC                            ; Sprite mappings - chaos emeralds from	the special stage results screen
0000D8BC                            ; ---------------------------------------------------------------------------
0000D8BC 0000                       		dc.w byte_CE02-Map_obj7F
0000D8BE 0000                       		dc.w byte_CE08-Map_obj7F
0000D8C0 0000                       		dc.w byte_CE0E-Map_obj7F
0000D8C2 0000                       		dc.w byte_CE14-Map_obj7F
0000D8C4 0000                       		dc.w byte_CE1A-Map_obj7F
0000D8C6 0000                       		dc.w byte_CE20-Map_obj7F
0000D8C8 0000                       		dc.w byte_CE26-Map_obj7F
0000D8CA 01                         byte_CE02:	dc.b 1
0000D8CB F805 2004 F8               		dc.b $F8, 5, $20, 4, $F8
0000D8D0 01                         byte_CE08:	dc.b 1
0000D8D1 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000D8D6 01                         byte_CE0E:	dc.b 1
0000D8D7 F805 4004 F8               		dc.b $F8, 5, $40, 4, $F8
0000D8DC 01                         byte_CE14:	dc.b 1
0000D8DD F805 6004 F8               		dc.b $F8, 5, $60, 4, $F8
0000D8E2 01                         byte_CE1A:	dc.b 1
0000D8E3 F805 2008 F8               		dc.b $F8, 5, $20, 8, $F8
0000D8E8 01                         byte_CE20:	dc.b 1
0000D8E9 F805 200C F8               		dc.b $F8, 5, $20, $C, $F8
0000D8EE 00                         byte_CE26:	dc.b 0			; Blank frame
0000D8F0 00                         		even
0000D8F0 00                         		even
0000D8F0                            
0000D8F0                            ; ===========================================================================
0000D8F0                            ; ---------------------------------------------------------------------------
0000D8F0                            ; Object 36 - spikes
0000D8F0                            ; ---------------------------------------------------------------------------
0000D8F0                            
0000D8F0                            Obj36:					; XREF: Obj_Index
0000D8F0 7000                       		moveq	#0,d0
0000D8F2 1028 0024                  		move.b	$24(a0),d0
0000D8F6 323B 0000                  		move.w	Obj36_Index(pc,d0.w),d1
0000D8FA 4EFB 1000                  		jmp	Obj36_Index(pc,d1.w)
0000D8FE                            ; ===========================================================================
0000D8FE 0000                       Obj36_Index:	dc.w Obj36_Main-Obj36_Index
0000D900 0000                       		dc.w Obj36_Solid-Obj36_Index
0000D902                            
0000D902 0014                       Obj36_Var:	dc.b 0,	$14		; frame	number,	object width
0000D904 0110                       		dc.b 1,	$10
0000D906 0204                       		dc.b 2,	4
0000D908 031C                       		dc.b 3,	$1C
0000D90A 0440                       		dc.b 4,	$40
0000D90C 0510                       		dc.b 5,	$10
0000D90E                            ; ===========================================================================
0000D90E                            
0000D90E                            Obj36_Main:				; XREF: Obj36_Index
0000D90E 5428 0024                  		addq.b	#2,$24(a0)
0000D912 217C 0000 0000 0004        		move.l	#Map_obj36,4(a0)
0000D91A 317C 051B 0002             		move.w	#$51B,2(a0)
0000D920 0028 0004 0001             		ori.b	#4,1(a0)
0000D926 117C 0004 0018             		move.b	#4,$18(a0)
0000D92C 1028 0028                  		move.b	$28(a0),d0
0000D930 0228 000F 0028             		andi.b	#$F,$28(a0)
0000D936 0240 00F0                  		andi.w	#$F0,d0
0000D93A 43F9 0000 D902             		lea	(Obj36_Var).l,a1
0000D940 E648                       		lsr.w	#3,d0
0000D942 D2C0                       		adda.w	d0,a1
0000D944 1159 001A                  		move.b	(a1)+,$1A(a0)
0000D948 1159 0019                  		move.b	(a1)+,$19(a0)
0000D94C 3168 0008 0030             		move.w	8(a0),$30(a0)
0000D952 3168 000C 0032             		move.w	$C(a0),$32(a0)
0000D958                            
0000D958                            Obj36_Solid:				; XREF: Obj36_Index
0000D958 6100 0000                  		bsr.w	Obj36_Type0x	; make the object move
0000D95C 343C 0004                  		move.w	#4,d2
0000D960 0C28 0005 001A             		cmpi.b	#5,$1A(a0)	; is object type $5x ?
0000D966 6700                       		beq.s	Obj36_SideWays	; if yes, branch
0000D968 0C28 0001 001A             		cmpi.b	#1,$1A(a0)	; is object type $1x ?
0000D96E 6600                       		bne.s	Obj36_Upright	; if not, branch
0000D970 343C 0014                  		move.w	#$14,d2
0000D974                            
0000D974                            ; Spikes types $1x and $5x face	sideways
0000D974                            
0000D974                            Obj36_SideWays:				; XREF: Obj36_Solid
0000D974 323C 001B                  		move.w	#$1B,d1
0000D978 3602                       		move.w	d2,d3
0000D97A 5243                       		addq.w	#1,d3
0000D97C 3828 0008                  		move.w	8(a0),d4
0000D980 6100 0000                  		bsr.w	SolidObject
0000D984 0828 0003 0022             		btst	#3,$22(a0)
0000D98A 6600                       		bne.s	Obj36_Display
0000D98C 0C44 0001                  		cmpi.w	#1,d4
0000D990 6700                       		beq.s	Obj36_Hurt
0000D992 6000                       		bra.s	Obj36_Display
0000D994                            ; ===========================================================================
0000D994                            
0000D994                            ; Spikes types $0x, $2x, $3x and $4x face up or	down
0000D994                            
0000D994                            Obj36_Upright:				; XREF: Obj36_Solid
0000D994 7200                       		moveq	#0,d1
0000D996 1228 0019                  		move.b	$19(a0),d1
0000D99A 0641 000B                  		addi.w	#$B,d1
0000D99E 343C 0010                  		move.w	#$10,d2
0000D9A2 363C 0011                  		move.w	#$11,d3
0000D9A6 3828 0008                  		move.w	8(a0),d4
0000D9AA 6100 0000                  		bsr.w	SolidObject
0000D9AE 0828 0003 0022             		btst	#3,$22(a0)
0000D9B4 6600                       		bne.s	Obj36_Hurt
0000D9B6 4A44                       		tst.w	d4
0000D9B8 6A00                       		bpl.s	Obj36_Display
0000D9BA                            
0000D9BA                            Obj36_Hurt:				; XREF: Obj36_SideWays; Obj36_Upright
0000D9BA 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0000D9BE 6600                       		bne.s	Obj36_Display	; if yes, branch
0000D9C0 4A78 D030                  		tst.w	($FFFFD030).w	; +++ is Sonic invulnerable?
0000D9C4 6600                       		bne.s	Obj36_Display	; +++ if yes, branch
0000D9C6 2F08                       		move.l	a0,-(sp)
0000D9C8 2448                       		movea.l	a0,a2
0000D9CA 41F8 D000                  		lea	($FFFFD000).w,a0
0000D9CE 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0000D9D4 6400                       		bcc.s	loc_CF20
0000D9D6 2628 000C                  		move.l	$C(a0),d3
0000D9DA 3028 0012                  		move.w	$12(a0),d0
0000D9DE 48C0                       		ext.l	d0
0000D9E0 E180                       		asl.l	#8,d0
0000D9E2 9680                       		sub.l	d0,d3
0000D9E4 2143 000C                  		move.l	d3,$C(a0)
0000D9E8 4EB9 0000 0000             		jsr	HurtSonic
0000D9EE                            
0000D9EE                            loc_CF20:
0000D9EE 205F                       		movea.l	(sp)+,a0
0000D9F0                            
0000D9F0                            Obj36_Display:
0000D9F0 6100 0000                  		bsr.w	DisplaySprite
0000D9F4 3028 0030                  		move.w	$30(a0),d0
0000D9F8 0240 FF80                  		andi.w	#$FF80,d0
0000D9FC 3238 F700                  		move.w	($FFFFF700).w,d1
0000DA00 0441 0080                  		subi.w	#$80,d1
0000DA04 0241 FF80                  		andi.w	#$FF80,d1
0000DA08 9041                       		sub.w	d1,d0
0000DA0A 0C40 0280                  		cmpi.w	#$280,d0
0000DA0E 6200 0000                  		bhi.w	DeleteObject
0000DA12 4E75                       		rts	
0000DA14                            ; ===========================================================================
0000DA14                            
0000DA14                            Obj36_Type0x:				; XREF: Obj36_Solid
0000DA14 7000                       		moveq	#0,d0
0000DA16 1028 0028                  		move.b	$28(a0),d0
0000DA1A D040                       		add.w	d0,d0
0000DA1C 323B 0000                  		move.w	Obj36_TypeIndex(pc,d0.w),d1
0000DA20 4EFB 1000                  		jmp	Obj36_TypeIndex(pc,d1.w)
0000DA24                            ; ===========================================================================
0000DA24 0000                       Obj36_TypeIndex:dc.w Obj36_Type00-Obj36_TypeIndex
0000DA26 0000                       		dc.w Obj36_Type01-Obj36_TypeIndex
0000DA28 0000                       		dc.w Obj36_Type02-Obj36_TypeIndex
0000DA2A                            ; ===========================================================================
0000DA2A                            
0000DA2A                            Obj36_Type00:				; XREF: Obj36_TypeIndex
0000DA2A 4E75                       		rts			; don't move the object
0000DA2C                            ; ===========================================================================
0000DA2C                            
0000DA2C                            Obj36_Type01:				; XREF: Obj36_TypeIndex
0000DA2C 6100 0000                  		bsr.w	Obj36_Wait
0000DA30 7000                       		moveq	#0,d0
0000DA32 1028 0034                  		move.b	$34(a0),d0
0000DA36 D068 0032                  		add.w	$32(a0),d0
0000DA3A 3140 000C                  		move.w	d0,$C(a0)	; move the object vertically
0000DA3E 4E75                       		rts	
0000DA40                            ; ===========================================================================
0000DA40                            
0000DA40                            Obj36_Type02:				; XREF: Obj36_TypeIndex
0000DA40 6100 0000                  		bsr.w	Obj36_Wait
0000DA44 7000                       		moveq	#0,d0
0000DA46 1028 0034                  		move.b	$34(a0),d0
0000DA4A D068 0030                  		add.w	$30(a0),d0
0000DA4E 3140 0008                  		move.w	d0,8(a0)	; move the object horizontally
0000DA52 4E75                       		rts	
0000DA54                            ; ===========================================================================
0000DA54                            
0000DA54                            Obj36_Wait:
0000DA54 4A68 0038                  		tst.w	$38(a0)		; is time delay	= zero?
0000DA58 6700                       		beq.s	loc_CFA4	; if yes, branch
0000DA5A 5368 0038                  		subq.w	#1,$38(a0)	; subtract 1 from time delay
0000DA5E 6600                       		bne.s	locret_CFE6
0000DA60 4A28 0001                  		tst.b	1(a0)
0000DA64 6A00                       		bpl.s	locret_CFE6
0000DA66 303C 00B6                  		move.w	#$B6,d0
0000DA6A 4EB9 0000 147C             		jsr	(PlaySound_Special).l ;	play "spikes moving" sound
0000DA70 6000                       		bra.s	locret_CFE6
0000DA72                            ; ===========================================================================
0000DA72                            
0000DA72                            loc_CFA4:
0000DA72 4A68 0036                  		tst.w	$36(a0)
0000DA76 6700                       		beq.s	loc_CFC6
0000DA78 0468 0800 0034             		subi.w	#$800,$34(a0)
0000DA7E 6400                       		bcc.s	locret_CFE6
0000DA80 317C 0000 0034             		move.w	#0,$34(a0)
0000DA86 317C 0000 0036             		move.w	#0,$36(a0)
0000DA8C 317C 003C 0038             		move.w	#60,$38(a0)	; set time delay to 1 second
0000DA92 6000                       		bra.s	locret_CFE6
0000DA94                            ; ===========================================================================
0000DA94                            
0000DA94                            loc_CFC6:
0000DA94 0668 0800 0034             		addi.w	#$800,$34(a0)
0000DA9A 0C68 2000 0034             		cmpi.w	#$2000,$34(a0)
0000DAA0 6500                       		bcs.s	locret_CFE6
0000DAA2 317C 2000 0034             		move.w	#$2000,$34(a0)
0000DAA8 317C 0001 0036             		move.w	#1,$36(a0)
0000DAAE 317C 003C 0038             		move.w	#60,$38(a0)	; set time delay to 1 second
0000DAB4                            
0000DAB4                            locret_CFE6:
0000DAB4 4E75                       		rts	
0000DAB6                            ; ===========================================================================
0000DAB6                            ; ---------------------------------------------------------------------------
0000DAB6                            ; Sprite mappings - spikes
0000DAB6                            ; ---------------------------------------------------------------------------
0000DAB6                            Map_obj36:
0000DAB6                            	include "_maps\obj36.asm"
0000DAB6                            ; ---------------------------------------------------------------------------
0000DAB6                            ; Sprite mappings - spikes
0000DAB6                            ; ---------------------------------------------------------------------------
0000DAB6 0000                       		dc.w byte_CFF4-Map_obj36
0000DAB8 0000                       		dc.w byte_D004-Map_obj36
0000DABA 0000                       		dc.w byte_D014-Map_obj36
0000DABC 0000                       		dc.w byte_D01A-Map_obj36
0000DABE 0000                       		dc.w byte_D02A-Map_obj36
0000DAC0 0000                       		dc.w byte_D049-Map_obj36
0000DAC2 03                         byte_CFF4:	dc.b 3			; 3 spikes
0000DAC3 F003 0004 EC               		dc.b $F0, 3, 0,	4, $EC
0000DAC8 F003 0004 FC               		dc.b $F0, 3, 0,	4, $FC
0000DACD F003 0004 0C               		dc.b $F0, 3, 0,	4, $C
0000DAD2 03                         byte_D004:	dc.b 3			; 3 spikes facing sideways
0000DAD3 EC0C 0000 F0               		dc.b $EC, $C, 0, 0, $F0
0000DAD8 FC0C 0000 F0               		dc.b $FC, $C, 0, 0, $F0
0000DADD 0C0C 0000 F0               		dc.b $C, $C, 0,	0, $F0
0000DAE2 01                         byte_D014:	dc.b 1			; 1 spike
0000DAE3 F003 0004 FC               		dc.b $F0, 3, 0,	4, $FC
0000DAE8 03                         byte_D01A:	dc.b 3			; 3 spikes widely spaced
0000DAE9 F003 0004 E4               		dc.b $F0, 3, 0,	4, $E4
0000DAEE F003 0004 FC               		dc.b $F0, 3, 0,	4, $FC
0000DAF3 F003 0004 14               		dc.b $F0, 3, 0,	4, $14
0000DAF8 06                         byte_D02A:	dc.b 6			; 6 spikes
0000DAF9 F003 0004 C0               		dc.b $F0, 3, 0,	4, $C0
0000DAFE F003 0004 D8               		dc.b $F0, 3, 0,	4, $D8
0000DB03 F003 0004 F0               		dc.b $F0, 3, 0,	4, $F0
0000DB08 F003 0004 08               		dc.b $F0, 3, 0,	4, 8
0000DB0D F003 0004 20               		dc.b $F0, 3, 0,	4, $20
0000DB12 F003 0004 38               		dc.b $F0, 3, 0,	4, $38
0000DB17 01                         byte_D049:	dc.b 1			; 1 spike facing sideways
0000DB18 FC0C 0000 F0               		dc.b $FC, $C, 0, 0, $F0
0000DB1E 00                         		even
0000DB1E 00                         		even
0000DB1E                            
0000DB1E                            ; ===========================================================================
0000DB1E                            ; ---------------------------------------------------------------------------
0000DB1E                            ; Object 3B - purple rock (GHZ)
0000DB1E                            ; ---------------------------------------------------------------------------
0000DB1E                            
0000DB1E                            Obj3B:					; XREF: Obj_Index
0000DB1E 7000                       		moveq	#0,d0
0000DB20 1028 0024                  		move.b	$24(a0),d0
0000DB24 323B 0000                  		move.w	Obj3B_Index(pc,d0.w),d1
0000DB28 4EFB 1000                  		jmp	Obj3B_Index(pc,d1.w)
0000DB2C                            ; ===========================================================================
0000DB2C 0000                       Obj3B_Index:	dc.w Obj3B_Main-Obj3B_Index
0000DB2E 0000                       		dc.w Obj3B_Solid-Obj3B_Index
0000DB30                            ; ===========================================================================
0000DB30                            
0000DB30                            Obj3B_Main:				; XREF: Obj3B_Index
0000DB30 5428 0024                  		addq.b	#2,$24(a0)
0000DB34 217C 0000 0000 0004        		move.l	#Map_obj3B,4(a0)
0000DB3C 317C 63D0 0002             		move.w	#$63D0,2(a0)
0000DB42 117C 0004 0001             		move.b	#4,1(a0)
0000DB48 117C 0013 0019             		move.b	#$13,$19(a0)
0000DB4E 117C 0004 0018             		move.b	#4,$18(a0)
0000DB54                            
0000DB54                            Obj3B_Solid:				; XREF: Obj3B_Index
0000DB54 323C 001B                  		move.w	#$1B,d1
0000DB58 343C 0010                  		move.w	#$10,d2
0000DB5C 363C 0010                  		move.w	#$10,d3
0000DB60 3828 0008                  		move.w	8(a0),d4
0000DB64 6100 0000                  		bsr.w	SolidObject
0000DB68 6100 0000                  		bsr.w	DisplaySprite
0000DB6C 3028 0008                  		move.w	8(a0),d0
0000DB70 0240 FF80                  		andi.w	#$FF80,d0
0000DB74 3238 F700                  		move.w	($FFFFF700).w,d1
0000DB78 0441 0080                  		subi.w	#$80,d1
0000DB7C 0241 FF80                  		andi.w	#$FF80,d1
0000DB80 9041                       		sub.w	d1,d0
0000DB82 0C40 0280                  		cmpi.w	#$280,d0
0000DB86 6200 0000                  		bhi.w	DeleteObject
0000DB8A 4E75                       		rts	
0000DB8C                            ; ===========================================================================
0000DB8C                            ; ---------------------------------------------------------------------------
0000DB8C                            ; Object 49 - waterfall	sound effect (GHZ)
0000DB8C                            ; ---------------------------------------------------------------------------
0000DB8C                            
0000DB8C                            Obj49:					; XREF: Obj_Index
0000DB8C 7000                       		moveq	#0,d0
0000DB8E 1028 0024                  		move.b	$24(a0),d0
0000DB92 323B 0000                  		move.w	Obj49_Index(pc,d0.w),d1
0000DB96 4EFB 1000                  		jmp	Obj49_Index(pc,d1.w)
0000DB9A                            ; ===========================================================================
0000DB9A 0000                       Obj49_Index:	dc.w Obj49_Main-Obj49_Index
0000DB9C 0000                       		dc.w Obj49_PlaySnd-Obj49_Index
0000DB9E                            ; ===========================================================================
0000DB9E                            
0000DB9E                            Obj49_Main:				; XREF: Obj49_Index
0000DB9E 5428 0024                  		addq.b	#2,$24(a0)
0000DBA2 117C 0004 0001             		move.b	#4,1(a0)
0000DBA8                            
0000DBA8                            Obj49_PlaySnd:				; XREF: Obj49_Index
0000DBA8 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000DBAC 0200 003F                  		andi.b	#$3F,d0
0000DBB0 6600                       		bne.s	Obj49_ChkDel
0000DBB2 303C 00D0                  		move.w	#$D0,d0
0000DBB6 4EB9 0000 147C             		jsr	(PlaySound_Special).l ;	play waterfall sound
0000DBBC                            
0000DBBC                            Obj49_ChkDel:
0000DBBC 3028 0008                  		move.w	8(a0),d0
0000DBC0 0240 FF80                  		andi.w	#$FF80,d0
0000DBC4 3238 F700                  		move.w	($FFFFF700).w,d1
0000DBC8 0441 0080                  		subi.w	#$80,d1
0000DBCC 0241 FF80                  		andi.w	#$FF80,d1
0000DBD0 9041                       		sub.w	d1,d0
0000DBD2 0C40 0280                  		cmpi.w	#$280,d0
0000DBD6 6200 0000                  		bhi.w	DeleteObject
0000DBDA 4E75                       		rts	
0000DBDC                            ; ===========================================================================
0000DBDC                            ; ---------------------------------------------------------------------------
0000DBDC                            ; Sprite mappings - purple rock	(GHZ)
0000DBDC                            ; ---------------------------------------------------------------------------
0000DBDC                            Map_obj3B:
0000DBDC                            	include "_maps\obj3B.asm"
0000DBDC                            ; ---------------------------------------------------------------------------
0000DBDC                            ; Sprite mappings - purple rock	(GHZ)
0000DBDC                            ; ---------------------------------------------------------------------------
0000DBDC 0000                       		dc.w byte_D110-Map_obj3B
0000DBDE 02                         byte_D110:	dc.b 2
0000DBDF F00B 0000 E8               		dc.b $F0, $B, 0, 0, $E8
0000DBE4 F00B 000C 00               		dc.b $F0, $B, 0, $C, 0
0000DBEA 00                         		even
0000DBEA 00                         		even
0000DBEA                            
0000DBEA                            ; ===========================================================================
0000DBEA                            ; ---------------------------------------------------------------------------
0000DBEA                            ; Object 3C - smashable	wall (GHZ, SLZ)
0000DBEA                            ; ---------------------------------------------------------------------------
0000DBEA                            
0000DBEA                            Obj3C:					; XREF: Obj_Index
0000DBEA 7000                       		moveq	#0,d0
0000DBEC 1028 0024                  		move.b	$24(a0),d0
0000DBF0 323B 0000                  		move.w	Obj3C_Index(pc,d0.w),d1
0000DBF4 4EBB 1000                  		jsr	Obj3C_Index(pc,d1.w)
0000DBF8 6000 0000                  		bra.w	MarkObjGone
0000DBFC                            ; ===========================================================================
0000DBFC 0000                       Obj3C_Index:	dc.w Obj3C_Main-Obj3C_Index
0000DBFE 0000                       		dc.w Obj3C_Solid-Obj3C_Index
0000DC00 0000                       		dc.w Obj3C_FragMove-Obj3C_Index
0000DC02                            ; ===========================================================================
0000DC02                            
0000DC02                            Obj3C_Main:				; XREF: Obj3C_Index
0000DC02 5428 0024                  		addq.b	#2,$24(a0)
0000DC06 217C 0000 0000 0004        		move.l	#Map_obj3C,4(a0)
0000DC0E 317C 450F 0002             		move.w	#$450F,2(a0)
0000DC14 117C 0004 0001             		move.b	#4,1(a0)
0000DC1A 117C 0010 0019             		move.b	#$10,$19(a0)
0000DC20 117C 0004 0018             		move.b	#4,$18(a0)
0000DC26 1168 0028 001A             		move.b	$28(a0),$1A(a0)
0000DC2C                            
0000DC2C                            Obj3C_Solid:				; XREF: Obj3C_Index
0000DC2C 3178 D010 0030             		move.w	($FFFFD010).w,$30(a0) ;	load Sonic's horizontal speed
0000DC32 323C 001B                  		move.w	#$1B,d1
0000DC36 343C 0020                  		move.w	#$20,d2
0000DC3A 363C 0020                  		move.w	#$20,d3
0000DC3E 3828 0008                  		move.w	8(a0),d4
0000DC42 6100 0000                  		bsr.w	SolidObject
0000DC46 0828 0005 0022             		btst	#5,$22(a0)
0000DC4C 6600                       		bne.s	Obj3C_ChkRoll
0000DC4E                            
0000DC4E                            locret_D180:
0000DC4E 4E75                       		rts	
0000DC50                            ; ===========================================================================
0000DC50                            
0000DC50                            Obj3C_ChkRoll:				; XREF: Obj3C_Solid
0000DC50 0C29 0002 001C             		cmpi.b	#2,$1C(a1)	; is Sonic rolling?
0000DC56 66F6                       		bne.s	locret_D180	; if not, branch
0000DC58 3028 0030                  		move.w	$30(a0),d0
0000DC5C 6A00                       		bpl.s	Obj3C_ChkSpeed
0000DC5E 4440                       		neg.w	d0
0000DC60                            
0000DC60                            Obj3C_ChkSpeed:
0000DC60 0C40 0480                  		cmpi.w	#$480,d0	; is Sonic's speed $480 or higher?
0000DC64 65E8                       		bcs.s	locret_D180	; if not, branch
0000DC66 3368 0030 0010             		move.w	$30(a0),$10(a1)
0000DC6C 5869 0008                  		addq.w	#4,8(a1)
0000DC70 49F9 0000 0000             		lea	(Obj3C_FragSpd1).l,a4 ;	use fragments that move	right
0000DC76 3028 0008                  		move.w	8(a0),d0
0000DC7A B069 0008                  		cmp.w	8(a1),d0	; is Sonic to the right	of the block?
0000DC7E 6500                       		bcs.s	Obj3C_Smash	; if yes, branch
0000DC80 5169 0008                  		subq.w	#8,8(a1)
0000DC84 49F9 0000 0000             		lea	(Obj3C_FragSpd2).l,a4 ;	use fragments that move	left
0000DC8A                            
0000DC8A                            Obj3C_Smash:
0000DC8A 3369 0010 0014             		move.w	$10(a1),$14(a1)
0000DC90 08A8 0005 0022             		bclr	#5,$22(a0)
0000DC96 08A9 0005 0022             		bclr	#5,$22(a1)
0000DC9C 7207                       		moveq	#7,d1		; load 8 fragments
0000DC9E 343C 0070                  		move.w	#$70,d2
0000DCA2 6100                       		bsr.s	SmashObject
0000DCA4                            
0000DCA4                            Obj3C_FragMove:				; XREF: Obj3C_Index
0000DCA4 6100 0000                  		bsr.w	SpeedToPos
0000DCA8 0668 0070 0012             		addi.w	#$70,$12(a0)	; make fragment	fall faster
0000DCAE 6100 0000                  		bsr.w	DisplaySprite
0000DCB2 4A28 0001                  		tst.b	1(a0)
0000DCB6 6A00 0000                  		bpl.w	DeleteObject
0000DCBA 4E75                       		rts	
0000DCBC                            
0000DCBC                            ; ---------------------------------------------------------------------------
0000DCBC                            ; Subroutine to	smash a	block (GHZ walls and MZ	blocks)
0000DCBC                            ; ---------------------------------------------------------------------------
0000DCBC                            
0000DCBC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DCBC                            
0000DCBC                            
0000DCBC                            SmashObject:				; XREF: Obj3C_Smash
0000DCBC 7000                       		moveq	#0,d0
0000DCBE 1028 001A                  		move.b	$1A(a0),d0
0000DCC2 D040                       		add.w	d0,d0
0000DCC4 2668 0004                  		movea.l	4(a0),a3
0000DCC8 D6F3 0000                  		adda.w	(a3,d0.w),a3
0000DCCC 524B                       		addq.w	#1,a3
0000DCCE 08E8 0005 0001             		bset	#5,1(a0)
0000DCD4 1810                       		move.b	0(a0),d4
0000DCD6 1A28 0001                  		move.b	1(a0),d5
0000DCDA 2248                       		movea.l	a0,a1
0000DCDC 6000                       		bra.s	Smash_LoadFrag
0000DCDE                            ; ===========================================================================
0000DCDE                            
0000DCDE                            Smash_Loop:
0000DCDE 6100 0000                  		bsr.w	SingleObjLoad
0000DCE2 6600                       		bne.s	Smash_PlaySnd
0000DCE4 5A4B                       		addq.w	#5,a3
0000DCE6                            
0000DCE6                            Smash_LoadFrag:				; XREF: SmashObject
0000DCE6 137C 0004 0024             		move.b	#4,$24(a1)
0000DCEC 1284                       		move.b	d4,0(a1)
0000DCEE 234B 0004                  		move.l	a3,4(a1)
0000DCF2 1345 0001                  		move.b	d5,1(a1)
0000DCF6 3368 0008 0008             		move.w	8(a0),8(a1)
0000DCFC 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000DD02 3368 0002 0002             		move.w	2(a0),2(a1)
0000DD08 1368 0018 0018             		move.b	$18(a0),$18(a1)
0000DD0E 1368 0019 0019             		move.b	$19(a0),$19(a1)
0000DD14 335C 0010                  		move.w	(a4)+,$10(a1)
0000DD18 335C 0012                  		move.w	(a4)+,$12(a1)
0000DD1C B3C8                       		cmpa.l	a0,a1
0000DD1E 6400                       		bcc.s	loc_D268
0000DD20 2F08                       		move.l	a0,-(sp)
0000DD22 2049                       		movea.l	a1,a0
0000DD24 6100 0000                  		bsr.w	SpeedToPos
0000DD28 D568 0012                  		add.w	d2,$12(a0)
0000DD2C 205F                       		movea.l	(sp)+,a0
0000DD2E 6100 0000                  		bsr.w	DisplaySprite2
0000DD32                            
0000DD32                            loc_D268:
0000DD32 51C9 FFAA                  		dbf	d1,Smash_Loop
0000DD36                            
0000DD36                            Smash_PlaySnd:
0000DD36 303C 00CB                  		move.w	#$CB,d0
0000DD3A 4EF9 0000 147C             		jmp	(PlaySound_Special).l ;	play smashing sound
0000DD40                            ; End of function SmashObject
0000DD40                            
0000DD40                            ; ===========================================================================
0000DD40                            ; Smashed block	fragment speeds
0000DD40                            ;
0000DD40 0400 FB00                  Obj3C_FragSpd1:	dc.w $400, $FB00	; x-move speed,	y-move speed
0000DD44 0600 FF00                  		dc.w $600, $FF00
0000DD48 0600 0100                  		dc.w $600, $100
0000DD4C 0400 0500                  		dc.w $400, $500
0000DD50 0600 FA00                  		dc.w $600, $FA00
0000DD54 0800 FE00                  		dc.w $800, $FE00
0000DD58 0800 0200                  		dc.w $800, $200
0000DD5C 0600 0600                  		dc.w $600, $600
0000DD60                            
0000DD60 FA00 FA00                  Obj3C_FragSpd2:	dc.w $FA00, $FA00
0000DD64 F800 FE00                  		dc.w $F800, $FE00
0000DD68 F800 0200                  		dc.w $F800, $200
0000DD6C FA00 0600                  		dc.w $FA00, $600
0000DD70 FC00 FB00                  		dc.w $FC00, $FB00
0000DD74 FA00 FF00                  		dc.w $FA00, $FF00
0000DD78 FA00 0100                  		dc.w $FA00, $100
0000DD7C FC00 0500                  		dc.w $FC00, $500
0000DD80                            ; ---------------------------------------------------------------------------
0000DD80                            ; Sprite mappings - smashable walls (GHZ, SLZ)
0000DD80                            ; ---------------------------------------------------------------------------
0000DD80                            Map_obj3C:
0000DD80                            	include "_maps\obj3C.asm"
0000DD80                            ; ---------------------------------------------------------------------------
0000DD80                            ; Sprite mappings - smashable walls (GHZ, SLZ)
0000DD80                            ; ---------------------------------------------------------------------------
0000DD80 0000                       		dc.w byte_D2BC-Map_obj3C
0000DD82 0000                       		dc.w byte_D2E5-Map_obj3C
0000DD84 0000                       		dc.w byte_D30E-Map_obj3C
0000DD86 08                         byte_D2BC:	dc.b 8
0000DD87 E005 0000 F0               		dc.b $E0, 5, 0,	0, $F0
0000DD8C F005 0000 F0               		dc.b $F0, 5, 0,	0, $F0
0000DD91 0005 0000 F0               		dc.b 0,	5, 0, 0, $F0
0000DD96 1005 0000 F0               		dc.b $10, 5, 0,	0, $F0
0000DD9B E005 0004 00               		dc.b $E0, 5, 0,	4, 0
0000DDA0 F005 0004 00               		dc.b $F0, 5, 0,	4, 0
0000DDA5 0005 0004 00               		dc.b 0,	5, 0, 4, 0
0000DDAA 1005 0004 00               		dc.b $10, 5, 0,	4, 0
0000DDAF 08                         byte_D2E5:	dc.b 8
0000DDB0 E005 0004 F0               		dc.b $E0, 5, 0,	4, $F0
0000DDB5 F005 0004 F0               		dc.b $F0, 5, 0,	4, $F0
0000DDBA 0005 0004 F0               		dc.b 0,	5, 0, 4, $F0
0000DDBF 1005 0004 F0               		dc.b $10, 5, 0,	4, $F0
0000DDC4 E005 0004 00               		dc.b $E0, 5, 0,	4, 0
0000DDC9 F005 0004 00               		dc.b $F0, 5, 0,	4, 0
0000DDCE 0005 0004 00               		dc.b 0,	5, 0, 4, 0
0000DDD3 1005 0004 00               		dc.b $10, 5, 0,	4, 0
0000DDD8 08                         byte_D30E:	dc.b 8
0000DDD9 E005 0004 F0               		dc.b $E0, 5, 0,	4, $F0
0000DDDE F005 0004 F0               		dc.b $F0, 5, 0,	4, $F0
0000DDE3 0005 0004 F0               		dc.b 0,	5, 0, 4, $F0
0000DDE8 1005 0004 F0               		dc.b $10, 5, 0,	4, $F0
0000DDED E005 0008 00               		dc.b $E0, 5, 0,	8, 0
0000DDF2 F005 0008 00               		dc.b $F0, 5, 0,	8, 0
0000DDF7 0005 0008 00               		dc.b 0,	5, 0, 8, 0
0000DDFC 1005 0008 00               		dc.b $10, 5, 0,	8, 0
0000DE02 00                         		even
0000DE02 00                         		even
0000DE02                            
0000DE02                            ; ---------------------------------------------------------------------------
0000DE02                            ; Object code loading subroutine
0000DE02                            ; ---------------------------------------------------------------------------
0000DE02                            
0000DE02                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DE02                            
0000DE02                            
0000DE02                            ObjectsLoad:				; XREF: TitleScreen; et al
0000DE02 41F8 D000                  		lea	($FFFFD000).w,a0 ; set address for object RAM
0000DE06 7E7F                       		moveq	#$7F,d7
0000DE08 7000                       		moveq	#0,d0
0000DE0A 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000DE10 6400                       		bcc.s	loc_D362
0000DE12                            
0000DE12                            loc_D348:
0000DE12 1010                       		move.b	(a0),d0		; load object number from RAM
0000DE14 6700                       		beq.s	loc_D358
0000DE16 D040                       		add.w	d0,d0
0000DE18 D040                       		add.w	d0,d0
0000DE1A 227B 0000                  		movea.l	Obj_Index-4(pc,d0.w),a1
0000DE1E 4E91                       		jsr	(a1)		; run the object's code
0000DE20 7000                       		moveq	#0,d0
0000DE22                            
0000DE22                            loc_D358:
0000DE22 41E8 0040                  		lea	$40(a0),a0	; next object
0000DE26 51CF FFEA                  		dbf	d7,loc_D348
0000DE2A 4E75                       		rts	
0000DE2C                            ; ===========================================================================
0000DE2C                            
0000DE2C                            loc_D362:
0000DE2C 0C38 000A D024             		cmpi.b	#$A,($FFFFD000+$24).w	; Has Sonic drowned?
0000DE32 67DE                       		beq.s	loc_D348				; If so, run objects a little longer
0000DE34 7E1F                       		moveq	#$1F,d7
0000DE36 61DA                       		bsr.s	loc_D348
0000DE38 7E5F                       		moveq	#$5F,d7
0000DE3A                            
0000DE3A                            loc_D368:
0000DE3A 7000                       		moveq	#0,d0
0000DE3C 1010                       		move.b	(a0),d0
0000DE3E 6700                       		beq.s	loc_D378
0000DE40 4A28 0001                  		tst.b	1(a0)
0000DE44 6A00                       		bpl.s	loc_D378
0000DE46 6100 0000                  		bsr.w	DisplaySprite
0000DE4A                            
0000DE4A                            loc_D378:
0000DE4A 41E8 0040                  		lea	$40(a0),a0
0000DE4E                            
0000DE4E                            loc_D37C:
0000DE4E 51CF FFEA                  		dbf	d7,loc_D368
0000DE52 4E75                       		rts	
0000DE54                            ; End of function ObjectsLoad
0000DE54                            
0000DE54                            ; ===========================================================================
0000DE54                            ; ---------------------------------------------------------------------------
0000DE54                            ; Object pointers
0000DE54                            ; ---------------------------------------------------------------------------
0000DE54                            Obj_Index:
0000DE54                            	include "_inc\Object pointers.asm"
0000DE54                            ; ---------------------------------------------------------------------------
0000DE54                            ; Object pointers
0000DE54                            ; ---------------------------------------------------------------------------
0000DE54 0000 0000 0000 0000 0000+  	dc.l Obj01, ObjectFall,	ObjectFall, ObjectFall
0000DE64 0000 0000 0000 0000 0000+  	dc.l SpinDash_dust, speedboosters, ObjectFall, Obj08
0000DE74 0000 0000 0000 0000 0000+  	dc.l Obj09, Obj0A, Obj0B, Obj0C
0000DE84 0000 0000 0000 B0F2 0000+  	dc.l Obj0D, Obj0E, Obj0F, Obj10
0000DE94 0000 7DAE 0000 0000 0000+  	dc.l Obj11, Obj12, Obj13, Obj14
0000DEA4 0000 83D4 0000 0000 0000+  	dc.l Obj15, Obj16, Obj17, Obj18
0000DEB4 0000 8C22 0000 8C8A 0000+  	dc.l Obj19, Obj1A, Obj1B, Obj1C
0000DEC4 0000 92D4 0000 95C2 0000+  	dc.l Obj1D, Obj1E, Obj1F, Obj20
0000DED4 0000 0000 0000 A246 0000+  	dc.l Obj21, Obj22, Obj23, Obj24
0000DEE4 0000 A588 0000 ABB6 0000+  	dc.l Obj25, Obj26, Obj27, Obj28
0000DEF4 0000 9E7E 0000 93AA 0000+  	dc.l Obj29, Obj2A, Obj2B, Obj2C
0000DF04 0000 B780 0000 ADB4 0000+  	dc.l Obj2D, Obj2E, Obj2F, Obj30
0000DF14 0000 C152 0000 C800 0000+  	dc.l Obj31, Obj32, Obj33, Obj34
0000DF24 0000 BCB6 0000 D8F0 0000+  	dc.l Obj35, Obj36, Obj37, Obj38
0000DF34 0000 CF86 0000 D040 0000+  	dc.l Obj39, Obj3A, Obj3B, Obj3C
0000DF44 0000 0000 0000 0000 0000+  	dc.l Obj3D, Obj3E, Obj3F, Obj40
0000DF54 0000 0000 0000 0000 0000+  	dc.l Obj41, Obj42, Obj43, Obj44
0000DF64 0000 C46E 0000 0000 0000+  	dc.l Obj45, Obj46, Obj47, Obj48
0000DF74 0000 DB8C 0000 0000 0000+  	dc.l Obj49, Obj4A, Obj4B, Obj4C
0000DF84 0000 0000 0000 0000 0000+  	dc.l Obj4D, Obj4E, Obj4F, Obj50
0000DF94 0000 0000 0000 0000 0000+  	dc.l Obj51, Obj52, Obj53, Obj54
0000DFA4 0000 0000 0000 0000 0000+  	dc.l Obj55, Obj56, Obj57, Obj58
0000DFB4 0000 0000 0000 0000 0000+  	dc.l Obj59, Obj5A, Obj5B, Obj5C
0000DFC4 0000 0000 0000 0000 0000+  	dc.l Obj5D, Obj5E, Obj5F, Obj60
0000DFD4 0000 0000 0000 0000 0000+  	dc.l Obj61, Obj62, Obj63, Obj64
0000DFE4 0000 0000 0000 0000 0000+  	dc.l Obj65, Obj66, Obj67, Obj68
0000DFF4 0000 0000 0000 0000 0000+  	dc.l Obj69, Obj6A, Obj6B, Obj6C
0000E004 0000 0000 0000 0000 0000+  	dc.l Obj6D, Obj6E, Obj6F, Obj70
0000E014 0000 0000 0000 0000 0000+  	dc.l Obj71, Obj72, Obj73, Obj74
0000E024 0000 0000 0000 0000 0000+  	dc.l Obj75, Obj76, Obj77, Obj78
0000E034 0000 0000 0000 0000 0000+  	dc.l Obj79, Obj7A, Obj7B, Obj7C
0000E044 0000 0000 0000 D27A 0000+  	dc.l Obj7D, Obj7E, Obj7F, Obj80
0000E054 0000 59A0 0000 0000 0000+  	dc.l Obj81, Obj82, Obj83, Obj84
0000E064 0000 0000 0000 0000 0000+  	dc.l Obj85, Obj86, Obj87, Obj88
0000E074 0000 605A 0000 0000 0000+  	dc.l Obj89, Obj8A, Obj8B, Obj8C
0000E074 0000 605A 0000 0000 0000+  	dc.l Obj89, Obj8A, Obj8B, Obj8C
0000E084                            
0000E084                            ; ---------------------------------------------------------------------------
0000E084                            ; Subroutine to	make an	object fall downwards, increasingly fast
0000E084                            ; ---------------------------------------------------------------------------
0000E084                            
0000E084                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E084                            
0000E084                            
0000E084                            ObjectFall:
0000E084 2428 0008                  		move.l	8(a0),d2
0000E088 2628 000C                  		move.l	$C(a0),d3
0000E08C 3028 0010                  		move.w	$10(a0),d0
0000E090 48C0                       		ext.l	d0
0000E092 E180                       		asl.l	#8,d0
0000E094 D480                       		add.l	d0,d2
0000E096 3028 0012                  		move.w	$12(a0),d0
0000E09A 0668 0038 0012             		addi.w	#$38,$12(a0)	; increase vertical speed
0000E0A0 48C0                       		ext.l	d0
0000E0A2 E180                       		asl.l	#8,d0
0000E0A4 D680                       		add.l	d0,d3
0000E0A6 2142 0008                  		move.l	d2,8(a0)
0000E0AA 2143 000C                  		move.l	d3,$C(a0)
0000E0AE 4E75                       		rts	
0000E0B0                            ; End of function ObjectFall
0000E0B0                            
0000E0B0                            ; ---------------------------------------------------------------------------
0000E0B0                            ; Subroutine translating object	speed to update	object position
0000E0B0                            ; ---------------------------------------------------------------------------
0000E0B0                            
0000E0B0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E0B0                            
0000E0B0                            
0000E0B0                            SpeedToPos:
0000E0B0 2428 0008                  		move.l	8(a0),d2
0000E0B4 2628 000C                  		move.l	$C(a0),d3
0000E0B8 3028 0010                  		move.w	$10(a0),d0	; load horizontal speed
0000E0BC 48C0                       		ext.l	d0
0000E0BE E180                       		asl.l	#8,d0		; multiply speed by $100
0000E0C0 D480                       		add.l	d0,d2		; add to x-axis	position
0000E0C2 3028 0012                  		move.w	$12(a0),d0	; load vertical	speed
0000E0C6 48C0                       		ext.l	d0
0000E0C8 E180                       		asl.l	#8,d0		; multiply by $100
0000E0CA D680                       		add.l	d0,d3		; add to y-axis	position
0000E0CC 2142 0008                  		move.l	d2,8(a0)	; update x-axis	position
0000E0D0 2143 000C                  		move.l	d3,$C(a0)	; update y-axis	position
0000E0D4 4E75                       		rts	
0000E0D6                            ; End of function SpeedToPos
0000E0D6                            
0000E0D6                            ; ---------------------------------------------------------------------------
0000E0D6                            ; Subroutine to	display	a sprite/object, when a0 is the	object RAM
0000E0D6                            ; ---------------------------------------------------------------------------
0000E0D6                            
0000E0D6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E0D6                            
0000E0D6                            
0000E0D6                            DisplaySprite:
0000E0D6 43F8 AC00                  		lea	($FFFFAC00).w,a1
0000E0DA 3028 0018                  		move.w	$18(a0),d0
0000E0DE E248                       		lsr.w	#1,d0
0000E0E0 0240 0380                  		andi.w	#$380,d0
0000E0E4 D2C0                       		adda.w	d0,a1
0000E0E6 0C51 007E                  		cmpi.w	#$7E,(a1)
0000E0EA 6400                       		bcc.s	locret_D620
0000E0EC 5451                       		addq.w	#2,(a1)
0000E0EE D2D1                       		adda.w	(a1),a1
0000E0F0 3288                       		move.w	a0,(a1)
0000E0F2                            
0000E0F2                            locret_D620:
0000E0F2 4E75                       		rts	
0000E0F4                            ; End of function DisplaySprite
0000E0F4                            
0000E0F4                            ; ---------------------------------------------------------------------------
0000E0F4                            ; Subroutine to	display	a 2nd sprite/object, when a1 is	the object RAM
0000E0F4                            ; ---------------------------------------------------------------------------
0000E0F4                            
0000E0F4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E0F4                            
0000E0F4                            
0000E0F4                            DisplaySprite2:
0000E0F4 45F8 AC00                  		lea	($FFFFAC00).w,a2
0000E0F8 3029 0018                  		move.w	$18(a1),d0
0000E0FC E248                       		lsr.w	#1,d0
0000E0FE 0240 0380                  		andi.w	#$380,d0
0000E102 D4C0                       		adda.w	d0,a2
0000E104 0C52 007E                  		cmpi.w	#$7E,(a2)
0000E108 6400                       		bcc.s	locret_D63E
0000E10A 5452                       		addq.w	#2,(a2)
0000E10C D4D2                       		adda.w	(a2),a2
0000E10E 3489                       		move.w	a1,(a2)
0000E110                            
0000E110                            locret_D63E:
0000E110 4E75                       		rts	
0000E112                            ; End of function DisplaySprite2
0000E112                            
0000E112                            ; ---------------------------------------------------------------------------
0000E112                            ; Subroutine to	delete an object
0000E112                            ; ---------------------------------------------------------------------------
0000E112                            
0000E112                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E112                            
0000E112                            
0000E112                            DeleteObject:
0000E112 2248                       		movea.l	a0,a1
0000E114                            
0000E114                            DeleteObject2:
0000E114 7200                       		moveq	#0,d1
0000E116 700F                       		moveq	#$F,d0
0000E118                            
0000E118                            loc_D646:
0000E118 22C1                       		move.l	d1,(a1)+	; clear	the object RAM
0000E11A 51C8 FFFC                  		dbf	d0,loc_D646	; repeat $F times (length of object RAM)
0000E11E 4E75                       		rts	
0000E120                            ; End of function DeleteObject
0000E120                            
0000E120                            ; ===========================================================================
0000E120 0000 0000                  BldSpr_ScrPos:	dc.l 0			; blank
0000E124 00FF F700                  		dc.l $FFF700		; main screen x-position
0000E128 00FF F708                  		dc.l $FFF708		; background x-position	1
0000E12C 00FF F718                  		dc.l $FFF718		; background x-position	2
0000E130                            ; ---------------------------------------------------------------------------
0000E130                            ; Subroutine to	convert	mappings (etc) to proper Megadrive sprites
0000E130                            ; ---------------------------------------------------------------------------
0000E130                            
0000E130                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E130                            
0000E130                            
0000E130                            BuildSprites:				; XREF: TitleScreen; et al
0000E130 45F8 F800                  		lea	($FFFFF800).w,a2 ; set address for sprite table
0000E134 7A00                       		moveq	#0,d5
0000E136 49F8 AC00                  		lea	($FFFFAC00).w,a4
0000E13A 7E07                       		moveq	#7,d7
0000E13C                            
0000E13C                            loc_D66A:
0000E13C 4A54                       		tst.w	(a4)
0000E13E 6700 0000                  		beq.w	loc_D72E
0000E142 7C02                       		moveq	#2,d6
0000E144                            
0000E144                            loc_D672:
0000E144 3074 6000                  		movea.w	(a4,d6.w),a0
0000E148 4A10                       		tst.b	(a0)
0000E14A 6700 0000                  		beq.w	loc_D726
0000E14E 08A8 0007 0001             		bclr	#7,1(a0)
0000E154 1028 0001                  		move.b	1(a0),d0
0000E158 1800                       		move.b	d0,d4
0000E15A 0240 000C                  		andi.w	#$C,d0
0000E15E 6700                       		beq.s	loc_D6DE
0000E160 227B 00BE                  		movea.l	BldSpr_ScrPos(pc,d0.w),a1
0000E164 7000                       		moveq	#0,d0
0000E166 1028 0019                  		move.b	$19(a0),d0
0000E16A 3628 0008                  		move.w	8(a0),d3
0000E16E 9651                       		sub.w	(a1),d3
0000E170 3203                       		move.w	d3,d1
0000E172 D240                       		add.w	d0,d1
0000E174 6B00 0000                  		bmi.w	loc_D726
0000E178 3203                       		move.w	d3,d1
0000E17A 9240                       		sub.w	d0,d1
0000E17C 0C41 0140                  		cmpi.w	#$140,d1
0000E180 6C00                       		bge.s	loc_D726
0000E182 0643 0080                  		addi.w	#$80,d3
0000E186 0804 0004                  		btst	#4,d4
0000E18A 6700                       		beq.s	loc_D6E8
0000E18C 7000                       		moveq	#0,d0
0000E18E 1028 0016                  		move.b	$16(a0),d0
0000E192 3428 000C                  		move.w	$C(a0),d2
0000E196 9469 0004                  		sub.w	4(a1),d2
0000E19A 3202                       		move.w	d2,d1
0000E19C D240                       		add.w	d0,d1
0000E19E 6B00                       		bmi.s	loc_D726
0000E1A0 3202                       		move.w	d2,d1
0000E1A2 9240                       		sub.w	d0,d1
0000E1A4 0C41 00E0                  		cmpi.w	#$E0,d1
0000E1A8 6C00                       		bge.s	loc_D726
0000E1AA 0642 0080                  		addi.w	#$80,d2
0000E1AE 6000                       		bra.s	loc_D700
0000E1B0                            ; ===========================================================================
0000E1B0                            
0000E1B0                            loc_D6DE:
0000E1B0 3428 000A                  		move.w	$A(a0),d2
0000E1B4 3628 0008                  		move.w	8(a0),d3
0000E1B8 6000                       		bra.s	loc_D700
0000E1BA                            ; ===========================================================================
0000E1BA                            
0000E1BA                            loc_D6E8:
0000E1BA 3428 000C                  		move.w	$C(a0),d2
0000E1BE 9469 0004                  		sub.w	4(a1),d2
0000E1C2 0642 0080                  		addi.w	#$80,d2
0000E1C6 0C42 0060                  		cmpi.w	#$60,d2
0000E1CA 6500                       		bcs.s	loc_D726
0000E1CC 0C42 0180                  		cmpi.w	#$180,d2
0000E1D0 6400                       		bcc.s	loc_D726
0000E1D2                            
0000E1D2                            loc_D700:
0000E1D2 2268 0004                  		movea.l	4(a0),a1
0000E1D6 7200                       		moveq	#0,d1
0000E1D8 0804 0005                  		btst	#5,d4
0000E1DC 6600                       		bne.s	loc_D71C
0000E1DE 1228 001A                  		move.b	$1A(a0),d1
0000E1E2 D241                       		add.w	d1,d1					; MJ: changed from byte to word (we want more than 7F sprites)
0000E1E4 D2F1 1000                  		adda.w	(a1,d1.w),a1
0000E1E8 7200                       		moveq	#$00,d1					; MJ: clear d1 (because of our byte to word change)
0000E1EA 1219                       		move.b	(a1)+,d1
0000E1EC 5301                       		subq.b	#1,d1
0000E1EE 6B00                       		bmi.s	loc_D720
0000E1F0                            
0000E1F0                            loc_D71C:
0000E1F0 6100 0000                  		bsr.w	sub_D750
0000E1F4                            
0000E1F4                            loc_D720:
0000E1F4 08E8 0007 0001             		bset	#7,1(a0)
0000E1FA                            
0000E1FA                            loc_D726:
0000E1FA 5446                       		addq.w	#2,d6
0000E1FC 5554                       		subq.w	#2,(a4)
0000E1FE 6600 FF44                  		bne.w	loc_D672
0000E202                            
0000E202                            loc_D72E:
0000E202 49EC 0080                  		lea	$80(a4),a4
0000E206 51CF FF34                  		dbf	d7,loc_D66A
0000E20A 11C5 F62C                  		move.b	d5,($FFFFF62C).w
0000E20E 0C05 0050                  		cmpi.b	#$50,d5
0000E212 6700                       		beq.s	loc_D748
0000E214 24BC 0000 0000             		move.l	#0,(a2)
0000E21A 4E75                       		rts	
0000E21C                            ; ===========================================================================
0000E21C                            
0000E21C                            loc_D748:
0000E21C 157C 0000 FFFB             		move.b	#0,-5(a2)
0000E222 4E75                       		rts	
0000E224                            ; End of function BuildSprites
0000E224                            
0000E224                            
0000E224                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E224                            
0000E224                            
0000E224                            sub_D750:				; XREF: BuildSprites
0000E224 3668 0002                  		movea.w	2(a0),a3
0000E228 0804 0000                  		btst	#0,d4
0000E22C 6600                       		bne.s	loc_D796
0000E22E 0804 0001                  		btst	#1,d4
0000E232 6600 0000                  		bne.w	loc_D7E4
0000E236                            ; End of function sub_D750
0000E236                            
0000E236                            
0000E236                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E236                            
0000E236                            
0000E236                            sub_D762:				; XREF: sub_D762; SS_ShowLayout
0000E236 0C05 0050                  		cmpi.b	#$50,d5
0000E23A 6700                       		beq.s	locret_D794
0000E23C 1019                       		move.b	(a1)+,d0
0000E23E 4880                       		ext.w	d0
0000E240 D042                       		add.w	d2,d0
0000E242 34C0                       		move.w	d0,(a2)+
0000E244 14D9                       		move.b	(a1)+,(a2)+
0000E246 5205                       		addq.b	#1,d5
0000E248 14C5                       		move.b	d5,(a2)+
0000E24A 1019                       		move.b	(a1)+,d0
0000E24C E148                       		lsl.w	#8,d0
0000E24E 1019                       		move.b	(a1)+,d0
0000E250 D04B                       		add.w	a3,d0
0000E252 34C0                       		move.w	d0,(a2)+
0000E254 1019                       		move.b	(a1)+,d0
0000E256 4880                       		ext.w	d0
0000E258 D043                       		add.w	d3,d0
0000E25A 0240 01FF                  		andi.w	#$1FF,d0
0000E25E 6600                       		bne.s	loc_D78E
0000E260 5240                       		addq.w	#1,d0
0000E262                            
0000E262                            loc_D78E:
0000E262 34C0                       		move.w	d0,(a2)+
0000E264 51C9 FFD0                  		dbf	d1,sub_D762
0000E268                            
0000E268                            locret_D794:
0000E268 4E75                       		rts	
0000E26A                            ; End of function sub_D762
0000E26A                            
0000E26A                            ; ===========================================================================
0000E26A                            
0000E26A                            loc_D796:
0000E26A 0804 0001                  		btst	#1,d4
0000E26E 6600 0000                  		bne.w	loc_D82A
0000E272                            
0000E272                            loc_D79E:
0000E272 0C05 0050                  		cmpi.b	#$50,d5
0000E276 6700                       		beq.s	locret_D7E2
0000E278 1019                       		move.b	(a1)+,d0
0000E27A 4880                       		ext.w	d0
0000E27C D042                       		add.w	d2,d0
0000E27E 34C0                       		move.w	d0,(a2)+
0000E280 1819                       		move.b	(a1)+,d4
0000E282 14C4                       		move.b	d4,(a2)+
0000E284 5205                       		addq.b	#1,d5
0000E286 14C5                       		move.b	d5,(a2)+
0000E288 1019                       		move.b	(a1)+,d0
0000E28A E148                       		lsl.w	#8,d0
0000E28C 1019                       		move.b	(a1)+,d0
0000E28E D04B                       		add.w	a3,d0
0000E290 0A40 0800                  		eori.w	#$800,d0
0000E294 34C0                       		move.w	d0,(a2)+
0000E296 1019                       		move.b	(a1)+,d0
0000E298 4880                       		ext.w	d0
0000E29A 4440                       		neg.w	d0
0000E29C D804                       		add.b	d4,d4
0000E29E 0244 0018                  		andi.w	#$18,d4
0000E2A2 5044                       		addq.w	#8,d4
0000E2A4 9044                       		sub.w	d4,d0
0000E2A6 D043                       		add.w	d3,d0
0000E2A8 0240 01FF                  		andi.w	#$1FF,d0
0000E2AC 6600                       		bne.s	loc_D7DC
0000E2AE 5240                       		addq.w	#1,d0
0000E2B0                            
0000E2B0                            loc_D7DC:
0000E2B0 34C0                       		move.w	d0,(a2)+
0000E2B2 51C9 FFBE                  		dbf	d1,loc_D79E
0000E2B6                            
0000E2B6                            locret_D7E2:
0000E2B6 4E75                       		rts	
0000E2B8                            ; ===========================================================================
0000E2B8                            
0000E2B8                            loc_D7E4:				; XREF: sub_D750
0000E2B8 0C05 0050                  		cmpi.b	#$50,d5
0000E2BC 6700                       		beq.s	locret_D828
0000E2BE 1019                       		move.b	(a1)+,d0
0000E2C0 1811                       		move.b	(a1),d4
0000E2C2 4880                       		ext.w	d0
0000E2C4 4440                       		neg.w	d0
0000E2C6 E70C                       		lsl.b	#3,d4
0000E2C8 0244 0018                  		andi.w	#$18,d4
0000E2CC 5044                       		addq.w	#8,d4
0000E2CE 9044                       		sub.w	d4,d0
0000E2D0 D042                       		add.w	d2,d0
0000E2D2 34C0                       		move.w	d0,(a2)+
0000E2D4 14D9                       		move.b	(a1)+,(a2)+
0000E2D6 5205                       		addq.b	#1,d5
0000E2D8 14C5                       		move.b	d5,(a2)+
0000E2DA 1019                       		move.b	(a1)+,d0
0000E2DC E148                       		lsl.w	#8,d0
0000E2DE 1019                       		move.b	(a1)+,d0
0000E2E0 D04B                       		add.w	a3,d0
0000E2E2 0A40 1000                  		eori.w	#$1000,d0
0000E2E6 34C0                       		move.w	d0,(a2)+
0000E2E8 1019                       		move.b	(a1)+,d0
0000E2EA 4880                       		ext.w	d0
0000E2EC D043                       		add.w	d3,d0
0000E2EE 0240 01FF                  		andi.w	#$1FF,d0
0000E2F2 6600                       		bne.s	loc_D822
0000E2F4 5240                       		addq.w	#1,d0
0000E2F6                            
0000E2F6                            loc_D822:
0000E2F6 34C0                       		move.w	d0,(a2)+
0000E2F8 51C9 FFBE                  		dbf	d1,loc_D7E4
0000E2FC                            
0000E2FC                            locret_D828:
0000E2FC 4E75                       		rts	
0000E2FE                            ; ===========================================================================
0000E2FE                            
0000E2FE                            loc_D82A:
0000E2FE 0C05 0050                  		cmpi.b	#$50,d5
0000E302 6700                       		beq.s	locret_D87C
0000E304 1019                       		move.b	(a1)+,d0
0000E306 1811                       		move.b	(a1),d4
0000E308 4880                       		ext.w	d0
0000E30A 4440                       		neg.w	d0
0000E30C E70C                       		lsl.b	#3,d4
0000E30E 0244 0018                  		andi.w	#$18,d4
0000E312 5044                       		addq.w	#8,d4
0000E314 9044                       		sub.w	d4,d0
0000E316 D042                       		add.w	d2,d0
0000E318 34C0                       		move.w	d0,(a2)+
0000E31A 1819                       		move.b	(a1)+,d4
0000E31C 14C4                       		move.b	d4,(a2)+
0000E31E 5205                       		addq.b	#1,d5
0000E320 14C5                       		move.b	d5,(a2)+
0000E322 1019                       		move.b	(a1)+,d0
0000E324 E148                       		lsl.w	#8,d0
0000E326 1019                       		move.b	(a1)+,d0
0000E328 D04B                       		add.w	a3,d0
0000E32A 0A40 1800                  		eori.w	#$1800,d0
0000E32E 34C0                       		move.w	d0,(a2)+
0000E330 1019                       		move.b	(a1)+,d0
0000E332 4880                       		ext.w	d0
0000E334 4440                       		neg.w	d0
0000E336 D804                       		add.b	d4,d4
0000E338 0244 0018                  		andi.w	#$18,d4
0000E33C 5044                       		addq.w	#8,d4
0000E33E 9044                       		sub.w	d4,d0
0000E340 D043                       		add.w	d3,d0
0000E342 0240 01FF                  		andi.w	#$1FF,d0
0000E346 6600                       		bne.s	loc_D876
0000E348 5240                       		addq.w	#1,d0
0000E34A                            
0000E34A                            loc_D876:
0000E34A 34C0                       		move.w	d0,(a2)+
0000E34C 51C9 FFB0                  		dbf	d1,loc_D82A
0000E350                            
0000E350                            locret_D87C:
0000E350 4E75                       		rts	
0000E352                            ; ---------------------------------------------------------------------------
0000E352                            ; Subroutine to	check if an object is on the screen
0000E352                            ; ---------------------------------------------------------------------------
0000E352                            
0000E352                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E352                            
0000E352                            
0000E352                            ChkObjOnScreen:
0000E352 3028 0008                  		move.w	8(a0),d0	; get object x-position
0000E356 9078 F700                  		sub.w	($FFFFF700).w,d0 ; subtract screen x-position
0000E35A 6B00                       		bmi.s	NotOnScreen
0000E35C 0C40 0140                  		cmpi.w	#320,d0		; is object on the screen?
0000E360 6C00                       		bge.s	NotOnScreen	; if not, branch
0000E362                            
0000E362 3228 000C                  		move.w	$C(a0),d1	; get object y-position
0000E366 9278 F704                  		sub.w	($FFFFF704).w,d1 ; subtract screen y-position
0000E36A 6B00                       		bmi.s	NotOnScreen
0000E36C 0C41 00E0                  		cmpi.w	#224,d1		; is object on the screen?
0000E370 6C00                       		bge.s	NotOnScreen	; if not, branch
0000E372                            
0000E372 7000                       		moveq	#0,d0		; set flag to 0
0000E374 4E75                       		rts	
0000E376                            ; ===========================================================================
0000E376                            
0000E376                            NotOnScreen:				; XREF: ChkObjOnScreen
0000E376 7001                       		moveq	#1,d0		; set flag to 1
0000E378 4E75                       		rts	
0000E37A                            ; End of function ChkObjOnScreen
0000E37A                            
0000E37A                            
0000E37A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E37A                            
0000E37A                            
0000E37A                            ChkObjOnScreen2:
0000E37A 7200                       		moveq	#0,d1
0000E37C 1228 0019                  		move.b	$19(a0),d1
0000E380 3028 0008                  		move.w	8(a0),d0
0000E384 9078 F700                  		sub.w	($FFFFF700).w,d0
0000E388 D041                       		add.w	d1,d0
0000E38A 6B00                       		bmi.s	NotOnScreen2
0000E38C D241                       		add.w	d1,d1
0000E38E 9041                       		sub.w	d1,d0
0000E390 0C40 0140                  		cmpi.w	#320,d0
0000E394 6C00                       		bge.s	NotOnScreen2
0000E396                            
0000E396 3228 000C                  		move.w	$C(a0),d1
0000E39A 9278 F704                  		sub.w	($FFFFF704).w,d1
0000E39E 6B00                       		bmi.s	NotOnScreen2
0000E3A0 0C41 00E0                  		cmpi.w	#224,d1
0000E3A4 6C00                       		bge.s	NotOnScreen2
0000E3A6                            
0000E3A6 7000                       		moveq	#0,d0
0000E3A8 4E75                       		rts	
0000E3AA                            ; ===========================================================================
0000E3AA                            
0000E3AA                            NotOnScreen2:				; XREF: ChkObjOnScreen2
0000E3AA 7001                       		moveq	#1,d0
0000E3AC 4E75                       		rts	
0000E3AE                            ; End of function ChkObjOnScreen2
0000E3AE                            
0000E3AE                            ; ---------------------------------------------------------------------------
0000E3AE                            ; Subroutine to	load a level's objects
0000E3AE                            ; ---------------------------------------------------------------------------
0000E3AE                            
0000E3AE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E3AE                            
0000E3AE                            
0000E3AE                            ObjPosLoad:				; XREF: Level; et al
0000E3AE 7000                       		moveq	#0,d0
0000E3B0 1038 F76C                  		move.b	($FFFFF76C).w,d0
0000E3B4 303B 0000                  		move.w	OPL_Index(pc,d0.w),d0
0000E3B8 4EFB 0000                  		jmp	OPL_Index(pc,d0.w)
0000E3BC                            ; End of function ObjPosLoad
0000E3BC                            
0000E3BC                            ; ===========================================================================
0000E3BC 0000                       OPL_Index:	dc.w OPL_Main-OPL_Index
0000E3BE 0000                       		dc.w OPL_Next-OPL_Index
0000E3C0                            ; ===========================================================================
0000E3C0                            
0000E3C0                            OPL_Main:				; XREF: OPL_Index
0000E3C0 5438 F76C                  		addq.b	#2,($FFFFF76C).w
0000E3C4 3038 FE10                  		move.w	($FFFFFE10).w,d0
0000E3C8 ED08                       		lsl.b	#6,d0
0000E3CA E848                       		lsr.w	#4,d0
0000E3CC 41F9 0000 0000             		lea	(ObjPos_Index).l,a0
0000E3D2 2248                       		movea.l	a0,a1
0000E3D4 D0F0 0000                  		adda.w	(a0,d0.w),a0
0000E3D8 21C8 F770                  		move.l	a0,($FFFFF770).w
0000E3DC 21C8 F774                  		move.l	a0,($FFFFF774).w
0000E3E0 D2F1 0002                  		adda.w	2(a1,d0.w),a1
0000E3E4 21C9 F778                  		move.l	a1,($FFFFF778).w
0000E3E8 21C9 F77C                  		move.l	a1,($FFFFF77C).w
0000E3EC 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000E3F0 34FC 0101                  		move.w	#$101,(a2)+
0000E3F4 303C 005E                  		move.w	#$5E,d0
0000E3F8                            
0000E3F8                            OPL_ClrList:
0000E3F8 429A                       		clr.l	(a2)+
0000E3FA 51C8 FFFC                  		dbf	d0,OPL_ClrList	; clear	pre-destroyed object list
0000E3FE                            
0000E3FE 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000E402 7400                       		moveq	#0,d2
0000E404 3C38 F700                  		move.w	($FFFFF700).w,d6
0000E408 0446 0080                  		subi.w	#$80,d6
0000E40C 6400                       		bcc.s	loc_D93C
0000E40E 7C00                       		moveq	#0,d6
0000E410                            
0000E410                            loc_D93C:
0000E410 0246 FF80                  		andi.w	#$FF80,d6
0000E414 2078 F770                  		movea.l	($FFFFF770).w,a0
0000E418                            
0000E418                            loc_D944:
0000E418 BC50                       		cmp.w	(a0),d6
0000E41A 6300                       		bls.s	loc_D956
0000E41C 4A28 0004                  		tst.b	4(a0)
0000E420 6A00                       		bpl.s	loc_D952
0000E422 1412                       		move.b	(a2),d2
0000E424 5212                       		addq.b	#1,(a2)
0000E426                            
0000E426                            loc_D952:
0000E426 5C48                       		addq.w	#6,a0
0000E428 60EE                       		bra.s	loc_D944
0000E42A                            ; ===========================================================================
0000E42A                            
0000E42A                            loc_D956:
0000E42A 21C8 F770                  		move.l	a0,($FFFFF770).w
0000E42E 2078 F774                  		movea.l	($FFFFF774).w,a0
0000E432 0446 0080                  		subi.w	#$80,d6
0000E436 6500                       		bcs.s	loc_D976
0000E438                            
0000E438                            loc_D964:
0000E438 BC50                       		cmp.w	(a0),d6
0000E43A 6300                       		bls.s	loc_D976
0000E43C 4A28 0004                  		tst.b	4(a0)
0000E440 6A00                       		bpl.s	loc_D972
0000E442 522A 0001                  		addq.b	#1,1(a2)
0000E446                            
0000E446                            loc_D972:
0000E446 5C48                       		addq.w	#6,a0
0000E448 60EE                       		bra.s	loc_D964
0000E44A                            ; ===========================================================================
0000E44A                            
0000E44A                            loc_D976:
0000E44A 21C8 F774                  		move.l	a0,($FFFFF774).w
0000E44E 31FC FFFF F76E             		move.w	#-1,($FFFFF76E).w
0000E454                            
0000E454                            OPL_Next:				; XREF: OPL_Index
0000E454 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000E458 7400                       		moveq	#0,d2
0000E45A 3C38 F700                  		move.w	($FFFFF700).w,d6
0000E45E 0246 FF80                  		andi.w	#$FF80,d6
0000E462 BC78 F76E                  		cmp.w	($FFFFF76E).w,d6
0000E466 6700 0000                  		beq.w	locret_DA3A
0000E46A 6C00                       		bge.s	loc_D9F6
0000E46C 31C6 F76E                  		move.w	d6,($FFFFF76E).w
0000E470 2078 F774                  		movea.l	($FFFFF774).w,a0
0000E474 0446 0080                  		subi.w	#$80,d6
0000E478 6500                       		bcs.s	loc_D9D2
0000E47A                            
0000E47A                            loc_D9A6:
0000E47A BC68 FFFA                  		cmp.w	-6(a0),d6
0000E47E 6C00                       		bge.s	loc_D9D2
0000E480 5D48                       		subq.w	#6,a0
0000E482 4A28 0004                  		tst.b	4(a0)
0000E486 6A00                       		bpl.s	loc_D9BC
0000E488 532A 0001                  		subq.b	#1,1(a2)
0000E48C 142A 0001                  		move.b	1(a2),d2
0000E490                            
0000E490                            loc_D9BC:
0000E490 6100 0000                  		bsr.w	loc_DA3C
0000E494 6600                       		bne.s	loc_D9C6
0000E496 5D48                       		subq.w	#6,a0
0000E498 60E0                       		bra.s	loc_D9A6
0000E49A                            ; ===========================================================================
0000E49A                            
0000E49A                            loc_D9C6:
0000E49A 4A28 0004                  		tst.b	4(a0)
0000E49E 6A00                       		bpl.s	loc_D9D0
0000E4A0 522A 0001                  		addq.b	#1,1(a2)
0000E4A4                            
0000E4A4                            loc_D9D0:
0000E4A4 5C48                       		addq.w	#6,a0
0000E4A6                            
0000E4A6                            loc_D9D2:
0000E4A6 21C8 F774                  		move.l	a0,($FFFFF774).w
0000E4AA 2078 F770                  		movea.l	($FFFFF770).w,a0
0000E4AE 0646 0300                  		addi.w	#$300,d6
0000E4B2                            
0000E4B2                            loc_D9DE:
0000E4B2 BC68 FFFA                  		cmp.w	-6(a0),d6
0000E4B6 6E00                       		bgt.s	loc_D9F0
0000E4B8 4A28 FFFE                  		tst.b	-2(a0)
0000E4BC 6A00                       		bpl.s	loc_D9EC
0000E4BE 5312                       		subq.b	#1,(a2)
0000E4C0                            
0000E4C0                            loc_D9EC:
0000E4C0 5D48                       		subq.w	#6,a0
0000E4C2 60EE                       		bra.s	loc_D9DE
0000E4C4                            ; ===========================================================================
0000E4C4                            
0000E4C4                            loc_D9F0:
0000E4C4 21C8 F770                  		move.l	a0,($FFFFF770).w
0000E4C8 4E75                       		rts	
0000E4CA                            ; ===========================================================================
0000E4CA                            
0000E4CA                            loc_D9F6:
0000E4CA 31C6 F76E                  		move.w	d6,($FFFFF76E).w
0000E4CE 2078 F770                  		movea.l	($FFFFF770).w,a0
0000E4D2 0646 0280                  		addi.w	#$280,d6
0000E4D6                            
0000E4D6                            loc_DA02:
0000E4D6 BC50                       		cmp.w	(a0),d6
0000E4D8 6300                       		bls.s	loc_DA16
0000E4DA 4A28 0004                  		tst.b	4(a0)
0000E4DE 6A00                       		bpl.s	loc_DA10
0000E4E0 1412                       		move.b	(a2),d2
0000E4E2 5212                       		addq.b	#1,(a2)
0000E4E4                            
0000E4E4                            loc_DA10:
0000E4E4 6100 0000                  		bsr.w	loc_DA3C
0000E4E8 67EC                       		beq.s	loc_DA02
0000E4EA 4A28 0004                  		tst.b	$04(a0)		; was this object a remember state?
0000E4EE 6A00                       		bpl.s	loc_DA16	; if not, branch
0000E4F0 5312                       		subq.b	#$01,(a2)	; move right counter back		
0000E4F2                            
0000E4F2                            loc_DA16:
0000E4F2 21C8 F770                  		move.l	a0,($FFFFF770).w
0000E4F6 2078 F774                  		movea.l	($FFFFF774).w,a0
0000E4FA 0446 0300                  		subi.w	#$300,d6
0000E4FE 6500                       		bcs.s	loc_DA36
0000E500                            
0000E500                            loc_DA24:
0000E500 BC50                       		cmp.w	(a0),d6
0000E502 6300                       		bls.s	loc_DA36
0000E504 4A28 0004                  		tst.b	4(a0)
0000E508 6A00                       		bpl.s	loc_DA32
0000E50A 522A 0001                  		addq.b	#1,1(a2)
0000E50E                            
0000E50E                            loc_DA32:
0000E50E 5C48                       		addq.w	#6,a0
0000E510 60EE                       		bra.s	loc_DA24
0000E512                            ; ===========================================================================
0000E512                            
0000E512                            loc_DA36:
0000E512 21C8 F774                  		move.l	a0,($FFFFF774).w
0000E516                            
0000E516                            locret_DA3A:
0000E516 4E75                       		rts	
0000E518                            ; ===========================================================================
0000E518                            
0000E518                            loc_DA3C:
0000E518 4A28 0004                  		tst.b	4(a0)
0000E51C 6A00                       		bpl.s	OPL_MakeItem
0000E51E 0832 0007 2002             		btst	#7,2(a2,d2.w)
0000E524 6700                       		beq.s	OPL_MakeItem
0000E526 5C48                       		addq.w	#6,a0
0000E528 7000                       		moveq	#0,d0
0000E52A 4E75                       		rts	
0000E52C                            ; ===========================================================================
0000E52C                            
0000E52C                            OPL_MakeItem:
0000E52C 6100 0000                  		bsr.w	SingleObjLoad
0000E530 6600                       		bne.s	locret_DA8A
0000E532 3358 0008                  		move.w	(a0)+,8(a1)
0000E536 3018                       		move.w	(a0)+,d0
0000E538 3200                       		move.w	d0,d1
0000E53A 0240 0FFF                  		andi.w	#$FFF,d0
0000E53E 3340 000C                  		move.w	d0,$C(a1)
0000E542 E559                       		rol.w	#2,d1
0000E544 0201 0003                  		andi.b	#3,d1
0000E548 1341 0001                  		move.b	d1,1(a1)
0000E54C 1341 0022                  		move.b	d1,$22(a1)
0000E550 1018                       		move.b	(a0)+,d0
0000E552 6A00                       		bpl.s	loc_DA80
0000E554 08F2 0007 2002             		bset	#$07,$02(a2,d2.w)	; set as removed
0000E55A 0200 007F                  		andi.b	#$7F,d0
0000E55E 1342 0023                  		move.b	d2,$23(a1)
0000E562                            
0000E562                            loc_DA80:
0000E562 1280                       		move.b	d0,0(a1)
0000E564 1358 0028                  		move.b	(a0)+,$28(a1)
0000E568 7000                       		moveq	#0,d0
0000E56A                            
0000E56A                            locret_DA8A:
0000E56A 4E75                       		rts	
0000E56C                            ; ---------------------------------------------------------------------------
0000E56C                            ; Single object	loading	subroutine
0000E56C                            ; ---------------------------------------------------------------------------
0000E56C                            
0000E56C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E56C                            
0000E56C                            
0000E56C                            SingleObjLoad:
0000E56C 43F8 D800                  		lea	($FFFFD800).w,a1 ; start address for object RAM
0000E570 303C 005F                  		move.w	#$5F,d0
0000E574                            
0000E574                            loc_DA94:
0000E574 4A11                       		tst.b	(a1)		; is object RAM	slot empty?
0000E576 6700                       		beq.s	locret_DAA0	; if yes, branch
0000E578 43E9 0040                  		lea	$40(a1),a1	; goto next object RAM slot
0000E57C 51C8 FFF6                  		dbf	d0,loc_DA94	; repeat $5F times
0000E580                            
0000E580                            locret_DAA0:
0000E580 4E75                       		rts	
0000E582                            ; End of function SingleObjLoad
0000E582                            
0000E582                            
0000E582                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E582                            
0000E582                            
0000E582                            SingleObjLoad2:
0000E582 2248                       		movea.l	a0,a1
0000E584 303C F000                  		move.w	#-$1000,d0
0000E588 9048                       		sub.w	a0,d0
0000E58A EC48                       		lsr.w	#6,d0
0000E58C 5340                       		subq.w	#1,d0
0000E58E 6500                       		bcs.s	locret_DABC
0000E590                            
0000E590                            loc_DAB0:
0000E590 4A11                       		tst.b	(a1)
0000E592 6700                       		beq.s	locret_DABC
0000E594 43E9 0040                  		lea	$40(a1),a1
0000E598 51C8 FFF6                  		dbf	d0,loc_DAB0
0000E59C                            
0000E59C                            locret_DABC:
0000E59C 4E75                       		rts	
0000E59E                            ; End of function SingleObjLoad2
0000E59E                            
0000E59E                            ; ===========================================================================
0000E59E                            ; ---------------------------------------------------------------------------
0000E59E                            ; Object 41 - springs
0000E59E                            ; ---------------------------------------------------------------------------
0000E59E                            
0000E59E                            Obj41:					; XREF: Obj_Index
0000E59E 7000                       		moveq	#0,d0
0000E5A0 1028 0024                  		move.b	$24(a0),d0
0000E5A4 323B 0000                  		move.w	Obj41_Index(pc,d0.w),d1
0000E5A8 4EBB 1000                  		jsr	Obj41_Index(pc,d1.w)
0000E5AC 6100 FB28                  		bsr.w	DisplaySprite
0000E5B0 3028 0008                  		move.w	8(a0),d0
0000E5B4 0240 FF80                  		andi.w	#$FF80,d0
0000E5B8 3238 F700                  		move.w	($FFFFF700).w,d1
0000E5BC 0441 0080                  		subi.w	#$80,d1
0000E5C0 0241 FF80                  		andi.w	#$FF80,d1
0000E5C4 9041                       		sub.w	d1,d0
0000E5C6 0C40 0280                  		cmpi.w	#$280,d0
0000E5CA 6200 FB46                  		bhi.w	DeleteObject
0000E5CE 4E75                       		rts	
0000E5D0                            ; ===========================================================================
0000E5D0 0000                       Obj41_Index:	dc.w Obj41_Main-Obj41_Index
0000E5D2 0000                       		dc.w Obj41_Up-Obj41_Index
0000E5D4 0000                       		dc.w Obj41_AniUp-Obj41_Index
0000E5D6 0000                       		dc.w Obj41_ResetUp-Obj41_Index
0000E5D8 0000                       		dc.w Obj41_LR-Obj41_Index
0000E5DA 0000                       		dc.w Obj41_AniLR-Obj41_Index
0000E5DC 0000                       		dc.w Obj41_ResetLR-Obj41_Index
0000E5DE 0000                       		dc.w Obj41_Dwn-Obj41_Index
0000E5E0 0000                       		dc.w Obj41_AniDwn-Obj41_Index
0000E5E2 0000                       		dc.w Obj41_ResetDwn-Obj41_Index
0000E5E4                            
0000E5E4 F000                       Obj41_Powers:	dc.w -$1000		; power	of red spring
0000E5E6 F600                       		dc.w -$A00		; power	of yellow spring
0000E5E8                            ; ===========================================================================
0000E5E8                            
0000E5E8                            Obj41_Main:				; XREF: Obj41_Index
0000E5E8 5428 0024                  		addq.b	#2,$24(a0)
0000E5EC 217C 0000 0000 0004        		move.l	#Map_obj41,4(a0)
0000E5F4 317C 0523 0002             		move.w	#$523,2(a0)
0000E5FA 0028 0004 0001             		ori.b	#4,1(a0)
0000E600 117C 0010 0019             		move.b	#$10,$19(a0)
0000E606 117C 0004 0018             		move.b	#4,$18(a0)
0000E60C 1028 0028                  		move.b	$28(a0),d0
0000E610 0800 0004                  		btst	#4,d0		; does the spring face left/right?
0000E614 6700                       		beq.s	loc_DB54	; if not, branch
0000E616 117C 0008 0024             		move.b	#8,$24(a0)	; use "Obj41_LR" routine
0000E61C 117C 0001 001C             		move.b	#1,$1C(a0)
0000E622 117C 0003 001A             		move.b	#3,$1A(a0)
0000E628 317C 0533 0002             		move.w	#$533,2(a0)
0000E62E 117C 0008 0019             		move.b	#8,$19(a0)
0000E634                            
0000E634                            loc_DB54:
0000E634 0800 0005                  		btst	#5,d0		; does the spring face downwards?
0000E638 6700                       		beq.s	loc_DB66	; if not, branch
0000E63A 117C 000E 0024             		move.b	#$E,$24(a0)	; use "Obj41_Dwn" routine
0000E640 08E8 0001 0022             		bset	#1,$22(a0)
0000E646                            
0000E646                            loc_DB66:
0000E646 0800 0001                  		btst	#1,d0
0000E64A 6700                       		beq.s	loc_DB72
0000E64C 08E8 0005 0002             		bset	#5,2(a0)
0000E652                            
0000E652                            loc_DB72:
0000E652 0240 000F                  		andi.w	#$F,d0
0000E656 317B 008C 0030             		move.w	Obj41_Powers(pc,d0.w),$30(a0)
0000E65C 4E75                       		rts	
0000E65E                            ; ===========================================================================
0000E65E                            
0000E65E                            Obj41_Up:				; XREF: Obj41_Index
0000E65E 323C 001B                  		move.w	#$1B,d1
0000E662 343C 0008                  		move.w	#8,d2
0000E666 363C 0010                  		move.w	#$10,d3
0000E66A 3828 0008                  		move.w	8(a0),d4
0000E66E 6100 0000                  		bsr.w	SolidObject
0000E672 4A28 0025                  		tst.b	$25(a0)		; is Sonic on top of the spring?
0000E676 6600                       		bne.s	Obj41_BounceUp	; if yes, branch
0000E678 4E75                       		rts	
0000E67A                            ; ===========================================================================
0000E67A                            
0000E67A                            Obj41_BounceUp:				; XREF: Obj41_Up
0000E67A 5428 0024                  		addq.b	#2,$24(a0)
0000E67E 5069 000C                  		addq.w	#8,$C(a1)
0000E682 3368 0030 0012             		move.w	$30(a0),$12(a1)	; move Sonic upwards
0000E688 08E9 0001 0022             		bset	#1,$22(a1)
0000E68E 08A9 0003 0022             		bclr	#3,$22(a1)
0000E694 137C 0010 001C             		move.b	#$10,$1C(a1)	; use "bouncing" animation
0000E69A 137C 0002 0024             		move.b	#2,$24(a1)
0000E6A0 08A8 0003 0022             		bclr	#3,$22(a0)
0000E6A6 4228 0025                  		clr.b	$25(a0)
0000E6AA 303C 00CC                  		move.w	#$CC,d0
0000E6AE 4EB9 0000 147C             		jsr	(PlaySound_Special).l ;	play spring sound
0000E6B4                            
0000E6B4                            Obj41_AniUp:				; XREF: Obj41_Index
0000E6B4 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000E6BA 6000 CB32                  		bra.w	AnimateSprite
0000E6BE                            ; ===========================================================================
0000E6BE                            
0000E6BE                            Obj41_ResetUp:				; XREF: Obj41_Index
0000E6BE 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000E6C4 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_Up" routine
0000E6C8 4E75                       		rts	
0000E6CA                            ; ===========================================================================
0000E6CA                            
0000E6CA                            Obj41_LR:				; XREF: Obj41_Index
0000E6CA 323C 0013                  		move.w	#$13,d1
0000E6CE 343C 000E                  		move.w	#$E,d2
0000E6D2 363C 000F                  		move.w	#$F,d3
0000E6D6 3828 0008                  		move.w	8(a0),d4
0000E6DA 6100 0000                  		bsr.w	SolidObject
0000E6DE 0C28 0002 0024             		cmpi.b	#2,$24(a0)
0000E6E4 6600                       		bne.s	loc_DC0C
0000E6E6 117C 0008 0024             		move.b	#8,$24(a0)
0000E6EC                            
0000E6EC                            loc_DC0C:
0000E6EC 0828 0005 0022             		btst	#5,$22(a0)
0000E6F2 6600                       		bne.s	Obj41_BounceLR
0000E6F4 4E75                       		rts	
0000E6F6                            ; ===========================================================================
0000E6F6                            
0000E6F6                            Obj41_BounceLR:				; XREF: Obj41_LR
0000E6F6 5428 0024                  		addq.b	#2,$24(a0)
0000E6FA 3368 0030 0010             		move.w	$30(a0),$10(a1)	; move Sonic to	the left
0000E700 5069 0008                  		addq.w	#8,8(a1)
0000E704 0828 0000 0022             		btst	#0,$22(a0)	; is object flipped?
0000E70A 6600                       		bne.s	loc_DC36	; if yes, branch
0000E70C 0469 0010 0008             		subi.w	#$10,8(a1)
0000E712 4469 0010                  		neg.w	$10(a1)		; move Sonic to	the right
0000E716                            
0000E716                            loc_DC36:
0000E716 337C 000F 003E             		move.w	#$F,$3E(a1)
0000E71C 3369 0010 0014             		move.w	$10(a1),$14(a1)
0000E722 0869 0000 0022             		bchg	#0,$22(a1)
0000E728 0829 0002 0022             		btst	#2,$22(a1)
0000E72E 6600                       		bne.s	loc_DC56
0000E730 137C 0000 001C             		move.b	#0,$1C(a1)	; use running animation
0000E736                            
0000E736                            loc_DC56:
0000E736 08A8 0005 0022             		bclr	#5,$22(a0)
0000E73C 08A9 0005 0022             		bclr	#5,$22(a1)
0000E742 303C 00CC                  		move.w	#$CC,d0
0000E746 4EB9 0000 147C             		jsr	(PlaySound_Special).l ;	play spring sound
0000E74C                            
0000E74C                            Obj41_AniLR:				; XREF: Obj41_Index
0000E74C 4278 C904                  		clr.w	($FFFFC904).w	; clear screen delay counter
0000E750 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000E756 6000 CA96                  		bra.w	AnimateSprite
0000E75A                            ; ===========================================================================
0000E75A                            
0000E75A                            Obj41_ResetLR:				; XREF: Obj41_Index
0000E75A 117C 0002 001D             		move.b	#2,$1D(a0)	; reset	animation
0000E760 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_LR" routine
0000E764 4E75                       		rts	
0000E766                            ; ===========================================================================
0000E766                            
0000E766                            Obj41_Dwn:				; XREF: Obj41_Index
0000E766 323C 001B                  		move.w	#$1B,d1
0000E76A 343C 0008                  		move.w	#8,d2
0000E76E 363C 0010                  		move.w	#$10,d3
0000E772 3828 0008                  		move.w	8(a0),d4
0000E776 6100 0000                  		bsr.w	SolidObject
0000E77A 0C28 0002 0024             		cmpi.b	#2,$24(a0)
0000E780 6600                       		bne.s	loc_DCA4
0000E782 117C 000E 0024             		move.b	#$E,$24(a0)
0000E788                            
0000E788                            loc_DCA4:
0000E788 4A28 0025                  		tst.b	$25(a0)
0000E78C 6600                       		bne.s	locret_DCAE
0000E78E 4A44                       		tst.w	d4
0000E790 6B00                       		bmi.s	Obj41_BounceDwn
0000E792                            
0000E792                            locret_DCAE:
0000E792 4E75                       		rts	
0000E794                            ; ===========================================================================
0000E794                            
0000E794                            Obj41_BounceDwn:			; XREF: Obj41_Dwn
0000E794 5428 0024                  		addq.b	#2,$24(a0)
0000E798 5169 000C                  		subq.w	#8,$C(a1)
0000E79C 3368 0030 0012             		move.w	$30(a0),$12(a1)
0000E7A2 4469 0012                  		neg.w	$12(a1)		; move Sonic downwards
0000E7A6 08E9 0001 0022             		bset	#1,$22(a1)
0000E7AC 08A9 0003 0022             		bclr	#3,$22(a1)
0000E7B2 137C 0002 0024             		move.b	#2,$24(a1)
0000E7B8 08A8 0003 0022             		bclr	#3,$22(a0)
0000E7BE 4228 0025                  		clr.b	$25(a0)
0000E7C2 303C 00CC                  		move.w	#$CC,d0
0000E7C6 4EB9 0000 147C             		jsr	(PlaySound_Special).l ;	play spring sound
0000E7CC                            
0000E7CC                            Obj41_AniDwn:				; XREF: Obj41_Index
0000E7CC 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000E7D2 6000 CA1A                  		bra.w	AnimateSprite
0000E7D6                            ; ===========================================================================
0000E7D6                            
0000E7D6                            Obj41_ResetDwn:				; XREF: Obj41_Index
0000E7D6 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000E7DC 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_Dwn" routine
0000E7E0 4E75                       		rts	
0000E7E2                            ; ===========================================================================
0000E7E2                            Ani_obj41:
0000E7E2                            	include "_anim\obj41.asm"
0000E7E2                            ; ---------------------------------------------------------------------------
0000E7E2                            ; Animation script - springs
0000E7E2                            ; ---------------------------------------------------------------------------
0000E7E2 0000                       		dc.w byte_DD02-Ani_obj41
0000E7E4 0000                       		dc.w byte_DD0E-Ani_obj41
0000E7E6 0001 0000 0202 0202 0202+  byte_DD02:	dc.b 0,	1, 0, 0, 2, 2, 2, 2, 2,	2, 0, $FC
0000E7F2 0004 0303 0505 0505 0505+  byte_DD0E:	dc.b 0,	4, 3, 3, 5, 5, 5, 5, 5,	5, 3, $FC
0000E7FE                            		even
0000E7FE                            		even
0000E7FE                            
0000E7FE                            ; ---------------------------------------------------------------------------
0000E7FE                            ; Sprite mappings - springs
0000E7FE                            ; ---------------------------------------------------------------------------
0000E7FE                            Map_obj41:
0000E7FE                            	include "_maps\obj41.asm"
0000E7FE                            ; ---------------------------------------------------------------------------
0000E7FE                            ; Sprite mappings - springs
0000E7FE                            ; ---------------------------------------------------------------------------
0000E7FE 0000                       		dc.w byte_DD26-Map_obj41
0000E800 0000                       		dc.w byte_DD31-Map_obj41
0000E802 0000                       		dc.w byte_DD37-Map_obj41
0000E804 0000                       		dc.w byte_DD47-Map_obj41
0000E806 0000                       		dc.w byte_DD4D-Map_obj41
0000E808 0000                       		dc.w byte_DD53-Map_obj41
0000E80A 02                         byte_DD26:	dc.b 2
0000E80B F80C 0000 F0               		dc.b $F8, $C, 0, 0, $F0
0000E810 000C 0004 F0               		dc.b 0,	$C, 0, 4, $F0
0000E815 01                         byte_DD31:	dc.b 1
0000E816 000C 0000 F0               		dc.b 0,	$C, 0, 0, $F0
0000E81B 03                         byte_DD37:	dc.b 3
0000E81C E80C 0000 F0               		dc.b $E8, $C, 0, 0, $F0
0000E821 F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000E826 000C 000C F0               		dc.b 0,	$C, 0, $C, $F0
0000E82B 01                         byte_DD47:	dc.b 1
0000E82C F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
0000E831 01                         byte_DD4D:	dc.b 1
0000E832 F003 0004 F8               		dc.b $F0, 3, 0,	4, $F8
0000E837 04                         byte_DD53:	dc.b 4
0000E838 F003 0004 10               		dc.b $F0, 3, 0,	4, $10
0000E83D F809 0008 F8               		dc.b $F8, 9, 0,	8, $F8
0000E842 F000 0000 F8               		dc.b $F0, 0, 0,	0, $F8
0000E847 0800 0003 F8               		dc.b 8,	0, 0, 3, $F8
0000E84C                            		even
0000E84C                            		even
0000E84C                            
0000E84C                            ; ===========================================================================
0000E84C                            ; ---------------------------------------------------------------------------
0000E84C                            ; Object 42 - Newtron enemy (GHZ)
0000E84C                            ; ---------------------------------------------------------------------------
0000E84C                            
0000E84C                            Obj42:					; XREF: Obj_Index
0000E84C 7000                       		moveq	#0,d0
0000E84E 1028 0024                  		move.b	$24(a0),d0
0000E852 323B 0000                  		move.w	Obj42_Index(pc,d0.w),d1
0000E856 4EFB 1000                  		jmp	Obj42_Index(pc,d1.w)
0000E85A                            ; ===========================================================================
0000E85A 0000                       Obj42_Index:	dc.w Obj42_Main-Obj42_Index
0000E85C 0000                       		dc.w Obj42_Action-Obj42_Index
0000E85E 0000                       		dc.w Obj42_Delete-Obj42_Index
0000E860                            ; ===========================================================================
0000E860                            
0000E860                            Obj42_Main:				; XREF: Obj42_Index
0000E860 5428 0024                  		addq.b	#2,$24(a0)
0000E864 217C 0000 0000 0004        		move.l	#Map_obj42,4(a0)
0000E86C 317C 049B 0002             		move.w	#$49B,2(a0)
0000E872 117C 0004 0001             		move.b	#4,1(a0)
0000E878 117C 0004 0018             		move.b	#4,$18(a0)
0000E87E 117C 0014 0019             		move.b	#$14,$19(a0)
0000E884 117C 0010 0016             		move.b	#$10,$16(a0)
0000E88A 117C 0008 0017             		move.b	#8,$17(a0)
0000E890                            
0000E890                            Obj42_Action:				; XREF: Obj42_Index
0000E890 7000                       		moveq	#0,d0
0000E892 1028 0025                  		move.b	$25(a0),d0
0000E896 323B 0000                  		move.w	Obj42_Index2(pc,d0.w),d1
0000E89A 4EBB 1000                  		jsr	Obj42_Index2(pc,d1.w)
0000E89E 43F9 0000 0000             		lea	(Ani_obj42).l,a1
0000E8A4 6100 C948                  		bsr.w	AnimateSprite
0000E8A8 6000 0000                  		bra.w	MarkObjGone
0000E8AC                            ; ===========================================================================
0000E8AC 0000                       Obj42_Index2:	dc.w Obj42_ChkDist-Obj42_Index2
0000E8AE 0000                       		dc.w Obj42_Type00-Obj42_Index2
0000E8B0 0000                       		dc.w Obj42_MatchFloor-Obj42_Index2
0000E8B2 0000                       		dc.w Obj42_Speed-Obj42_Index2
0000E8B4 0000                       		dc.w Obj42_Type01-Obj42_Index2
0000E8B6                            ; ===========================================================================
0000E8B6                            
0000E8B6                            Obj42_ChkDist:				; XREF: Obj42_Index2
0000E8B6 08E8 0000 0022             		bset	#0,$22(a0)
0000E8BC 3038 D008                  		move.w	($FFFFD008).w,d0
0000E8C0 9068 0008                  		sub.w	8(a0),d0
0000E8C4 6400                       		bcc.s	loc_DDEA
0000E8C6 4440                       		neg.w	d0
0000E8C8 08A8 0000 0022             		bclr	#0,$22(a0)
0000E8CE                            
0000E8CE                            loc_DDEA:
0000E8CE 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic within $80 pixels of	the newtron?
0000E8D2 6400                       		bcc.s	locret_DE12	; if not, branch
0000E8D4 5428 0025                  		addq.b	#2,$25(a0)
0000E8D8 117C 0001 001C             		move.b	#1,$1C(a0)
0000E8DE 4A28 0028                  		tst.b	$28(a0)		; check	object type
0000E8E2 6700                       		beq.s	locret_DE12	; if type is 00, branch
0000E8E4 317C 249B 0002             		move.w	#$249B,2(a0)
0000E8EA 117C 0008 0025             		move.b	#8,$25(a0)	; run type 01 newtron subroutine
0000E8F0 117C 0004 001C             		move.b	#4,$1C(a0)	; use different	animation
0000E8F6                            
0000E8F6                            locret_DE12:
0000E8F6 4E75                       		rts	
0000E8F8                            ; ===========================================================================
0000E8F8                            
0000E8F8                            Obj42_Type00:				; XREF: Obj42_Index2
0000E8F8 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; has "appearing" animation finished?
0000E8FE 6400                       		bcc.s	Obj42_Fall	; is yes, branch
0000E900 08E8 0000 0022             		bset	#0,$22(a0)
0000E906 3038 D008                  		move.w	($FFFFD008).w,d0
0000E90A 9068 0008                  		sub.w	8(a0),d0
0000E90E 6400                       		bcc.s	locret_DE32
0000E910 08A8 0000 0022             		bclr	#0,$22(a0)
0000E916                            
0000E916                            locret_DE32:
0000E916 4E75                       		rts	
0000E918                            ; ===========================================================================
0000E918                            
0000E918                            Obj42_Fall:				; XREF: Obj42_Type00
0000E918 0C28 0001 001A             		cmpi.b	#1,$1A(a0)
0000E91E 6600                       		bne.s	loc_DE42
0000E920 117C 000C 0020             		move.b	#$C,$20(a0)
0000E926                            
0000E926                            loc_DE42:
0000E926 6100 F75C                  		bsr.w	ObjectFall
0000E92A 6100 0000                  		bsr.w	ObjHitFloor
0000E92E 4A41                       		tst.w	d1		; has newtron hit the floor?
0000E930 6A00                       		bpl.s	locret_DE86	; if not, branch
0000E932 D368 000C                  		add.w	d1,$C(a0)
0000E936 317C 0000 0012             		move.w	#0,$12(a0)	; stop newtron falling
0000E93C 5428 0025                  		addq.b	#2,$25(a0)
0000E940 117C 0002 001C             		move.b	#2,$1C(a0)
0000E946 0828 0005 0002             		btst	#5,2(a0)
0000E94C 6700                       		beq.s	Obj42_Move
0000E94E 5228 001C                  		addq.b	#1,$1C(a0)
0000E952                            
0000E952                            Obj42_Move:
0000E952 117C 000D 0020             		move.b	#$D,$20(a0)
0000E958 317C 0200 0010             		move.w	#$200,$10(a0)	; move newtron horizontally
0000E95E 0828 0000 0022             		btst	#0,$22(a0)
0000E964 6600                       		bne.s	locret_DE86
0000E966 4468 0010                  		neg.w	$10(a0)
0000E96A                            
0000E96A                            locret_DE86:
0000E96A 4E75                       		rts	
0000E96C                            ; ===========================================================================
0000E96C                            
0000E96C                            Obj42_MatchFloor:			; XREF: Obj42_Index2
0000E96C 6100 F742                  		bsr.w	SpeedToPos
0000E970 6100 0000                  		bsr.w	ObjHitFloor
0000E974 0C41 FFF8                  		cmpi.w	#-8,d1
0000E978 6D00                       		blt.s	loc_DEA2
0000E97A 0C41 000C                  		cmpi.w	#$C,d1
0000E97E 6C00                       		bge.s	loc_DEA2
0000E980 D368 000C                  		add.w	d1,$C(a0)	; match	newtron's position with floor
0000E984 4E75                       		rts	
0000E986                            ; ===========================================================================
0000E986                            
0000E986                            loc_DEA2:
0000E986 5428 0025                  		addq.b	#2,$25(a0)
0000E98A 4E75                       		rts	
0000E98C                            ; ===========================================================================
0000E98C                            
0000E98C                            Obj42_Speed:				; XREF: Obj42_Index2
0000E98C 6100 F722                  		bsr.w	SpeedToPos
0000E990 4E75                       		rts	
0000E992                            ; ===========================================================================
0000E992                            
0000E992                            Obj42_Type01:				; XREF: Obj42_Index2
0000E992 0C28 0001 001A             		cmpi.b	#1,$1A(a0)
0000E998 6600                       		bne.s	Obj42_FireMissile
0000E99A 117C 000C 0020             		move.b	#$C,$20(a0)
0000E9A0                            
0000E9A0                            Obj42_FireMissile:
0000E9A0 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000E9A6 6600                       		bne.s	locret_DF14
0000E9A8 4A28 0032                  		tst.b	$32(a0)
0000E9AC 6600                       		bne.s	locret_DF14
0000E9AE 117C 0001 0032             		move.b	#1,$32(a0)
0000E9B4 6100 FBB6                  		bsr.w	SingleObjLoad
0000E9B8 6600                       		bne.s	locret_DF14
0000E9BA 12BC 0023                  		move.b	#$23,0(a1)	; load missile object
0000E9BE 3368 0008 0008             		move.w	8(a0),8(a1)
0000E9C4 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000E9CA 5169 000C                  		subq.w	#8,$C(a1)
0000E9CE 337C 0200 0010             		move.w	#$200,$10(a1)
0000E9D4 303C 0014                  		move.w	#$14,d0
0000E9D8 0828 0000 0022             		btst	#0,$22(a0)
0000E9DE 6600                       		bne.s	loc_DF04
0000E9E0 4440                       		neg.w	d0
0000E9E2 4469 0010                  		neg.w	$10(a1)
0000E9E6                            
0000E9E6                            loc_DF04:
0000E9E6 D169 0008                  		add.w	d0,8(a1)
0000E9EA 1368 0022 0022             		move.b	$22(a0),$22(a1)
0000E9F0 137C 0001 0028             		move.b	#1,$28(a1)
0000E9F6                            
0000E9F6                            locret_DF14:
0000E9F6 4E75                       		rts	
0000E9F8                            ; ===========================================================================
0000E9F8                            
0000E9F8                            Obj42_Delete:				; XREF: Obj42_Index
0000E9F8 6000 F718                  		bra.w	DeleteObject
0000E9FC                            ; ===========================================================================
0000E9FC                            Ani_obj42:
0000E9FC                            	include "_anim\obj42.asm"
0000E9FC                            ; ---------------------------------------------------------------------------
0000E9FC                            ; Animation script - Newtron enemy
0000E9FC                            ; ---------------------------------------------------------------------------
0000E9FC 0000                       		dc.w byte_DF24-Ani_obj42
0000E9FE 0000                       		dc.w byte_DF28-Ani_obj42
0000EA00 0000                       		dc.w byte_DF30-Ani_obj42
0000EA02 0000                       		dc.w byte_DF34-Ani_obj42
0000EA04 0000                       		dc.w byte_DF38-Ani_obj42
0000EA06 0F0A FF00                  byte_DF24:	dc.b $F, $A, $FF, 0
0000EA0A 1300 0103 0405 FE01        byte_DF28:	dc.b $13, 0, 1,	3, 4, 5, $FE, 1
0000EA12 0206 07FF                  byte_DF30:	dc.b 2,	6, 7, $FF
0000EA16 0208 09FF                  byte_DF34:	dc.b 2,	8, 9, $FF
0000EA1A 1300 0101 0201 0100 FC00   byte_DF38:	dc.b $13, 0, 1,	1, 2, 1, 1, 0, $FC, 0
0000EA24                            		even
0000EA24                            		even
0000EA24                            
0000EA24                            ; ---------------------------------------------------------------------------
0000EA24                            ; Sprite mappings - Newtron enemy (GHZ)
0000EA24                            ; ---------------------------------------------------------------------------
0000EA24                            Map_obj42:
0000EA24                            	include "_maps\obj42.asm"
0000EA24                            ; ---------------------------------------------------------------------------
0000EA24                            ; Sprite mappings - Newtron enemy (GHZ)
0000EA24                            ; ---------------------------------------------------------------------------
0000EA24 0000 0000                  		dc.w byte_DF58-Map_obj42, byte_DF68-Map_obj42
0000EA28 0000 0000                  		dc.w byte_DF78-Map_obj42, byte_DF88-Map_obj42
0000EA2C 0000 0000                  		dc.w byte_DF9D-Map_obj42, byte_DFAD-Map_obj42
0000EA30 0000 0000                  		dc.w byte_DFB8-Map_obj42, byte_DFC8-Map_obj42
0000EA34 0000 0000                  		dc.w byte_DFD8-Map_obj42, byte_DFE8-Map_obj42
0000EA38 0000                       		dc.w byte_DFF8-Map_obj42
0000EA3A 03                         byte_DF58:	dc.b 3
0000EA3B EC0D 0000 EC               		dc.b $EC, $D, 0, 0, $EC
0000EA40 F400 0008 0C               		dc.b $F4, 0, 0,	8, $C
0000EA45 FC0E 0009 F4               		dc.b $FC, $E, 0, 9, $F4
0000EA4A 03                         byte_DF68:	dc.b 3
0000EA4B EC06 0015 EC               		dc.b $EC, 6, 0,	$15, $EC
0000EA50 EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000EA55 FC0A 0021 FC               		dc.b $FC, $A, 0, $21, $FC
0000EA5A 03                         byte_DF78:	dc.b 3
0000EA5B EC06 002A EC               		dc.b $EC, 6, 0,	$2A, $EC
0000EA60 EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000EA65 FC0A 0021 FC               		dc.b $FC, $A, 0, $21, $FC
0000EA6A 04                         byte_DF88:	dc.b 4
0000EA6B EC06 0030 EC               		dc.b $EC, 6, 0,	$30, $EC
0000EA70 EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000EA75 FC09 0036 FC               		dc.b $FC, 9, 0,	$36, $FC
0000EA7A 0C00 003C 0C               		dc.b $C, 0, 0, $3C, $C
0000EA7F 03                         byte_DF9D:	dc.b 3
0000EA80 F40D 003D EC               		dc.b $F4, $D, 0, $3D, $EC
0000EA85 FC00 0020 0C               		dc.b $FC, 0, 0,	$20, $C
0000EA8A 0408 0045 FC               		dc.b 4,	8, 0, $45, $FC
0000EA8F 02                         byte_DFAD:	dc.b 2
0000EA90 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000EA95 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000EA9A 03                         byte_DFB8:	dc.b 3
0000EA9B F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000EAA0 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000EAA5 FE00 0052 14               		dc.b $FE, 0, 0,	$52, $14
0000EAAA 03                         byte_DFC8:	dc.b 3
0000EAAB F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000EAB0 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000EAB5 FE04 0053 14               		dc.b $FE, 4, 0,	$53, $14
0000EABA 03                         byte_DFD8:	dc.b 3
0000EABB F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000EAC0 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000EAC5 FE00 E052 14               		dc.b $FE, 0, $E0, $52, $14
0000EACA 03                         byte_DFE8:	dc.b 3
0000EACB F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000EAD0 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000EAD5 FE04 E053 14               		dc.b $FE, 4, $E0, $53, $14
0000EADA 00                         byte_DFF8:	dc.b 0
0000EADC 00                         		even
0000EADC 00                         		even
0000EADC                            
0000EADC                            ; ===========================================================================
0000EADC                            ; ---------------------------------------------------------------------------
0000EADC                            ; Object 43 - Roller enemy (SYZ)
0000EADC                            ; ---------------------------------------------------------------------------
0000EADC                            
0000EADC                            Obj43:					; XREF: Obj_Index
0000EADC 7000                       		moveq	#0,d0
0000EADE 1028 0024                  		move.b	$24(a0),d0
0000EAE2 323B 0000                  		move.w	Obj43_Index(pc,d0.w),d1
0000EAE6 4EFB 1000                  		jmp	Obj43_Index(pc,d1.w)
0000EAEA                            ; ===========================================================================
0000EAEA 0000                       Obj43_Index:	dc.w Obj43_Main-Obj43_Index
0000EAEC 0000                       		dc.w Obj43_Action-Obj43_Index
0000EAEE                            ; ===========================================================================
0000EAEE                            
0000EAEE                            Obj43_Main:				; XREF: Obj43_Index
0000EAEE 117C 000E 0016             		move.b	#$E,$16(a0)
0000EAF4 117C 0008 0017             		move.b	#8,$17(a0)
0000EAFA 6100 F588                  		bsr.w	ObjectFall
0000EAFE 6100 0000                  		bsr.w	ObjHitFloor
0000EB02 4A41                       		tst.w	d1
0000EB04 6A00                       		bpl.s	locret_E052
0000EB06 D368 000C                  		add.w	d1,$C(a0)	; match	roller's position with the floor
0000EB0A 317C 0000 0012             		move.w	#0,$12(a0)
0000EB10 5428 0024                  		addq.b	#2,$24(a0)
0000EB14 217C 0000 0000 0004        		move.l	#Map_obj43,4(a0)
0000EB1C 317C 04B8 0002             		move.w	#$4B8,2(a0)
0000EB22 117C 0004 0001             		move.b	#4,1(a0)
0000EB28 117C 0004 0018             		move.b	#4,$18(a0)
0000EB2E 117C 0010 0019             		move.b	#$10,$19(a0)
0000EB34                            
0000EB34                            locret_E052:
0000EB34 4E75                       		rts	
0000EB36                            ; ===========================================================================
0000EB36                            
0000EB36                            Obj43_Action:				; XREF: Obj43_Index
0000EB36 7000                       		moveq	#0,d0
0000EB38 1028 0025                  		move.b	$25(a0),d0
0000EB3C 323B 0000                  		move.w	Obj43_Index2(pc,d0.w),d1
0000EB40 4EBB 1000                  		jsr	Obj43_Index2(pc,d1.w)
0000EB44 43F9 0000 0000             		lea	(Ani_obj43).l,a1
0000EB4A 6100 C6A2                  		bsr.w	AnimateSprite
0000EB4E 3028 0008                  		move.w	8(a0),d0
0000EB52 0240 FF80                  		andi.w	#$FF80,d0
0000EB56 3238 F700                  		move.w	($FFFFF700).w,d1
0000EB5A 0441 0080                  		subi.w	#$80,d1
0000EB5E 0241 FF80                  		andi.w	#$FF80,d1
0000EB62 9041                       		sub.w	d1,d0
0000EB64 0C40 0280                  		cmpi.w	#$280,d0
0000EB68 6E00 0000                  		bgt.w	Obj43_ChkGone
0000EB6C 6000 F568                  		bra.w	DisplaySprite
0000EB70                            ; ===========================================================================
0000EB70                            
0000EB70                            Obj43_ChkGone:				; XREF: Obj43_Action
0000EB70 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000EB74 7000                       		moveq	#0,d0
0000EB76 1028 0023                  		move.b	$23(a0),d0
0000EB7A 6700                       		beq.s	Obj43_Delete
0000EB7C 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000EB82                            
0000EB82                            Obj43_Delete:
0000EB82 6000 F58E                  		bra.w	DeleteObject
0000EB86                            ; ===========================================================================
0000EB86 0000                       Obj43_Index2:	dc.w Obj43_RollChk-Obj43_Index2
0000EB88 0000                       		dc.w Obj43_RollNoChk-Obj43_Index2
0000EB8A 0000                       		dc.w Obj43_ChkJump-Obj43_Index2
0000EB8C 0000                       		dc.w Obj43_MatchFloor-Obj43_Index2
0000EB8E                            ; ===========================================================================
0000EB8E                            
0000EB8E                            Obj43_RollChk:				; XREF: Obj43_Index2
0000EB8E 3038 D008                  		move.w	($FFFFD008).w,d0
0000EB92 0440 0100                  		subi.w	#$100,d0
0000EB96 6500                       		bcs.s	loc_E0D2
0000EB98 9068 0008                  		sub.w	8(a0),d0	; check	distance between Roller	and Sonic
0000EB9C 6500                       		bcs.s	loc_E0D2
0000EB9E 5828 0025                  		addq.b	#4,$25(a0)
0000EBA2 117C 0002 001C             		move.b	#2,$1C(a0)
0000EBA8 317C 0700 0010             		move.w	#$700,$10(a0)	; move Roller horizontally
0000EBAE 117C 008E 0020             		move.b	#$8E,$20(a0)	; make Roller invincible
0000EBB4                            
0000EBB4                            loc_E0D2:
0000EBB4 588F                       		addq.l	#4,sp
0000EBB6 4E75                       		rts	
0000EBB8                            ; ===========================================================================
0000EBB8                            
0000EBB8                            Obj43_RollNoChk:			; XREF: Obj43_Index2
0000EBB8 0C28 0002 001C             		cmpi.b	#2,$1C(a0)
0000EBBE 6700                       		beq.s	loc_E0F8
0000EBC0 5368 0030                  		subq.w	#1,$30(a0)
0000EBC4 6A00                       		bpl.s	locret_E0F6
0000EBC6 117C 0001 001C             		move.b	#1,$1C(a0)
0000EBCC 317C 0700 0010             		move.w	#$700,$10(a0)
0000EBD2 117C 008E 0020             		move.b	#$8E,$20(a0)
0000EBD8                            
0000EBD8                            locret_E0F6:
0000EBD8 4E75                       		rts	
0000EBDA                            ; ===========================================================================
0000EBDA                            
0000EBDA                            loc_E0F8:
0000EBDA 5428 0025                  		addq.b	#2,$25(a0)
0000EBDE 4E75                       		rts	
0000EBE0                            ; ===========================================================================
0000EBE0                            
0000EBE0                            Obj43_ChkJump:				; XREF: Obj43_Index2
0000EBE0 6100 0000                  		bsr.w	Obj43_Stop
0000EBE4 6100 F4CA                  		bsr.w	SpeedToPos
0000EBE8 6100 0000                  		bsr.w	ObjHitFloor
0000EBEC 0C41 FFF8                  		cmpi.w	#-8,d1
0000EBF0 6D00                       		blt.s	Obj43_Jump
0000EBF2 0C41 000C                  		cmpi.w	#$C,d1
0000EBF6 6C00                       		bge.s	Obj43_Jump
0000EBF8 D368 000C                  		add.w	d1,$C(a0)
0000EBFC 4E75                       		rts	
0000EBFE                            ; ===========================================================================
0000EBFE                            
0000EBFE                            Obj43_Jump:
0000EBFE 5428 0025                  		addq.b	#2,$25(a0)
0000EC02 08E8 0000 0032             		bset	#0,$32(a0)
0000EC08 6700                       		beq.s	locret_E12E
0000EC0A 317C FA00 0012             		move.w	#-$600,$12(a0)	; move Roller vertically
0000EC10                            
0000EC10                            locret_E12E:
0000EC10 4E75                       		rts	
0000EC12                            ; ===========================================================================
0000EC12                            
0000EC12                            Obj43_MatchFloor:			; XREF: Obj43_Index2
0000EC12 6100 F470                  		bsr.w	ObjectFall
0000EC16 4A68 0012                  		tst.w	$12(a0)
0000EC1A 6B00                       		bmi.s	locret_E150
0000EC1C 6100 0000                  		bsr.w	ObjHitFloor
0000EC20 4A41                       		tst.w	d1
0000EC22 6A00                       		bpl.s	locret_E150
0000EC24 D368 000C                  		add.w	d1,$C(a0)	; match	Roller's position with the floor
0000EC28 5528 0025                  		subq.b	#2,$25(a0)
0000EC2C 317C 0000 0012             		move.w	#0,$12(a0)
0000EC32                            
0000EC32                            locret_E150:
0000EC32 4E75                       		rts	
0000EC34                            
0000EC34                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000EC34                            
0000EC34                            
0000EC34                            Obj43_Stop:				; XREF: Obj43_ChkJump
0000EC34 4A28 0032                  		tst.b	$32(a0)
0000EC38 6B00                       		bmi.s	locret_E188
0000EC3A 3038 D008                  		move.w	($FFFFD008).w,d0
0000EC3E 0440 0030                  		subi.w	#$30,d0
0000EC42 9068 0008                  		sub.w	8(a0),d0
0000EC46 6400                       		bcc.s	locret_E188
0000EC48 117C 0000 001C             		move.b	#0,$1C(a0)
0000EC4E 117C 000E 0020             		move.b	#$E,$20(a0)
0000EC54 4268 0010                  		clr.w	$10(a0)
0000EC58 317C 0078 0030             		move.w	#120,$30(a0)	; set waiting time to 2	seconds
0000EC5E 117C 0002 0025             		move.b	#2,$25(a0)
0000EC64 08E8 0007 0032             		bset	#7,$32(a0)
0000EC6A                            
0000EC6A                            locret_E188:
0000EC6A 4E75                       		rts	
0000EC6C                            ; End of function Obj43_Stop
0000EC6C                            
0000EC6C                            ; ===========================================================================
0000EC6C                            Ani_obj43:
0000EC6C                            	include "_anim\obj43.asm"
0000EC6C                            ; ---------------------------------------------------------------------------
0000EC6C                            ; Animation script - Roller enemy
0000EC6C                            ; ---------------------------------------------------------------------------
0000EC6C 0000                       		dc.w byte_E190-Ani_obj43
0000EC6E 0000                       		dc.w byte_E196-Ani_obj43
0000EC70 0000                       		dc.w byte_E19C-Ani_obj43
0000EC72 0F02 0100 FE01             byte_E190:	dc.b $F, 2, 1, 0, $FE, 1
0000EC78 0F01 02FD 0200             byte_E196:	dc.b $F, 1, 2, $FD, 2, 0
0000EC7E 0303 0402 FF               byte_E19C:	dc.b 3,	3, 4, 2, $FF
0000EC84 00                         		even
0000EC84 00                         		even
0000EC84                            
0000EC84                            ; ---------------------------------------------------------------------------
0000EC84                            ; Sprite mappings - Roller enemy (SYZ)
0000EC84                            ; ---------------------------------------------------------------------------
0000EC84                            Map_obj43:
0000EC84                            	include "_maps\obj43.asm"
0000EC84                            ; ---------------------------------------------------------------------------
0000EC84                            ; Sprite mappings - Roller enemy (SYZ)
0000EC84                            ; ---------------------------------------------------------------------------
0000EC84 0000 0000                  		dc.w byte_E1AC-Map_obj43, byte_E1B7-Map_obj43
0000EC88 0000 0000                  		dc.w byte_E1C2-Map_obj43, byte_E1C8-Map_obj43
0000EC8C 0000                       		dc.w byte_E1CE-Map_obj43
0000EC8E 02                         byte_E1AC:	dc.b 2
0000EC8F DE0E 0000 F0               		dc.b $DE, $E, 0, 0, $F0
0000EC94 F60E 000C F0               		dc.b $F6, $E, 0, $C, $F0
0000EC99 02                         byte_E1B7:	dc.b 2
0000EC9A E60E 0000 F0               		dc.b $E6, $E, 0, 0, $F0
0000EC9F FE0D 0018 F0               		dc.b $FE, $D, 0, $18, $F0
0000ECA4 01                         byte_E1C2:	dc.b 1
0000ECA5 F00F 0020 F0               		dc.b $F0, $F, 0, $20, $F0
0000ECAA 01                         byte_E1C8:	dc.b 1
0000ECAB F00F 0030 F0               		dc.b $F0, $F, 0, $30, $F0
0000ECB0 01                         byte_E1CE:	dc.b 1
0000ECB1 F00F 0040 F0               		dc.b $F0, $F, 0, $40, $F0
0000ECB6                            		even
0000ECB6                            		even
0000ECB6                            
0000ECB6                            ; ===========================================================================
0000ECB6                            ; ---------------------------------------------------------------------------
0000ECB6                            ; Object 44 - walls (GHZ)
0000ECB6                            ; ---------------------------------------------------------------------------
0000ECB6                            
0000ECB6                            Obj44:					; XREF: Obj_Index
0000ECB6 7000                       		moveq	#0,d0
0000ECB8 1028 0024                  		move.b	$24(a0),d0
0000ECBC 323B 0000                  		move.w	Obj44_Index(pc,d0.w),d1
0000ECC0 4EFB 1000                  		jmp	Obj44_Index(pc,d1.w)
0000ECC4                            ; ===========================================================================
0000ECC4 0000                       Obj44_Index:	dc.w Obj44_Main-Obj44_Index
0000ECC6 0000                       		dc.w Obj44_Solid-Obj44_Index
0000ECC8 0000                       		dc.w Obj44_Display-Obj44_Index
0000ECCA                            ; ===========================================================================
0000ECCA                            
0000ECCA                            Obj44_Main:				; XREF: Obj44_Index
0000ECCA 5428 0024                  		addq.b	#2,$24(a0)
0000ECCE 217C 0000 0000 0004        		move.l	#Map_obj44,4(a0)
0000ECD6 317C 434C 0002             		move.w	#$434C,2(a0)
0000ECDC 0028 0004 0001             		ori.b	#4,1(a0)
0000ECE2 117C 0008 0019             		move.b	#8,$19(a0)
0000ECE8 117C 0006 0018             		move.b	#6,$18(a0)
0000ECEE 1168 0028 001A             		move.b	$28(a0),$1A(a0)	; copy object type number to frame number
0000ECF4 08A8 0004 001A             		bclr	#4,$1A(a0)	; clear	4th bit	(deduct	$10)
0000ECFA 6700                       		beq.s	Obj44_Solid	; make object solid if 4th bit = 0
0000ECFC 5428 0024                  		addq.b	#2,$24(a0)
0000ED00 6000                       		bra.s	Obj44_Display	; don't make it solid if 4th bit = 1
0000ED02                            ; ===========================================================================
0000ED02                            
0000ED02                            Obj44_Solid:				; XREF: Obj44_Index
0000ED02 323C 0013                  		move.w	#$13,d1
0000ED06 343C 0028                  		move.w	#$28,d2
0000ED0A 6100 A7CC                  		bsr.w	Obj44_SolidWall
0000ED0E                            
0000ED0E                            Obj44_Display:				; XREF: Obj44_Index
0000ED0E 6100 F3C6                  		bsr.w	DisplaySprite
0000ED12 3028 0008                  		move.w	8(a0),d0
0000ED16 0240 FF80                  		andi.w	#$FF80,d0
0000ED1A 3238 F700                  		move.w	($FFFFF700).w,d1
0000ED1E 0441 0080                  		subi.w	#$80,d1
0000ED22 0241 FF80                  		andi.w	#$FF80,d1
0000ED26 9041                       		sub.w	d1,d0
0000ED28 0C40 0280                  		cmpi.w	#$280,d0
0000ED2C 6200 F3E4                  		bhi.w	DeleteObject
0000ED30 4E75                       		rts	
0000ED32                            ; ===========================================================================
0000ED32                            ; ---------------------------------------------------------------------------
0000ED32                            ; Sprite mappings - walls (GHZ)
0000ED32                            ; ---------------------------------------------------------------------------
0000ED32                            Map_obj44:
0000ED32                            	include "_maps\obj44.asm"
0000ED32                            ; ---------------------------------------------------------------------------
0000ED32                            ; Sprite mappings - walls (GHZ)
0000ED32                            ; ---------------------------------------------------------------------------
0000ED32 0000                       		dc.w byte_E256-Map_obj44
0000ED34 0000                       		dc.w byte_E26B-Map_obj44
0000ED36 0000                       		dc.w byte_E280-Map_obj44
0000ED38 04                         byte_E256:	dc.b 4
0000ED39 E005 0004 F8               		dc.b $E0, 5, 0,	4, $F8
0000ED3E F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000ED43 0005 0008 F8               		dc.b 0,	5, 0, 8, $F8
0000ED48 1005 0008 F8               		dc.b $10, 5, 0,	8, $F8
0000ED4D 04                         byte_E26B:	dc.b 4
0000ED4E E005 0008 F8               		dc.b $E0, 5, 0,	8, $F8
0000ED53 F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000ED58 0005 0008 F8               		dc.b 0,	5, 0, 8, $F8
0000ED5D 1005 0008 F8               		dc.b $10, 5, 0,	8, $F8
0000ED62 04                         byte_E280:	dc.b 4
0000ED63 E005 0000 F8               		dc.b $E0, 5, 0,	0, $F8
0000ED68 F005 0000 F8               		dc.b $F0, 5, 0,	0, $F8
0000ED6D 0005 0000 F8               		dc.b 0,	5, 0, 0, $F8
0000ED72 1005 0000 F8               		dc.b $10, 5, 0,	0, $F8
0000ED78 00                         		even
0000ED78 00                         		even
0000ED78                            
0000ED78                            ; ===========================================================================
0000ED78                            ; ---------------------------------------------------------------------------
0000ED78                            ; Object 13 - lava ball	producer (MZ, SLZ)
0000ED78                            ; ---------------------------------------------------------------------------
0000ED78                            
0000ED78                            Obj13:					; XREF: Obj_Index
0000ED78 7000                       		moveq	#0,d0
0000ED7A 1028 0024                  		move.b	$24(a0),d0
0000ED7E 323B 0000                  		move.w	Obj13_Index(pc,d0.w),d1
0000ED82 4EBB 1000                  		jsr	Obj13_Index(pc,d1.w)
0000ED86 6000 0000                  		bra.w	Obj14_ChkDel
0000ED8A                            ; ===========================================================================
0000ED8A 0000                       Obj13_Index:	dc.w Obj13_Main-Obj13_Index
0000ED8C 0000                       		dc.w Obj13_MakeLava-Obj13_Index
0000ED8E                            ; ---------------------------------------------------------------------------
0000ED8E                            ;
0000ED8E                            ; Lava ball production rates
0000ED8E                            ;
0000ED8E 1E3C 5A78 96B4             Obj13_Rates:	dc.b 30, 60, 90, 120, 150, 180
0000ED94                            ; ===========================================================================
0000ED94                            
0000ED94                            Obj13_Main:				; XREF: Obj13_Index
0000ED94 5428 0024                  		addq.b	#2,$24(a0)
0000ED98 1028 0028                  		move.b	$28(a0),d0
0000ED9C E848                       		lsr.w	#4,d0
0000ED9E 0240 000F                  		andi.w	#$F,d0
0000EDA2 117B 00EA 001F             		move.b	Obj13_Rates(pc,d0.w),$1F(a0)
0000EDA8 1168 001F 001E             		move.b	$1F(a0),$1E(a0)	; set time delay for lava balls
0000EDAE 0228 000F 0028             		andi.b	#$F,$28(a0)
0000EDB4                            
0000EDB4                            Obj13_MakeLava:				; XREF: Obj13_Index
0000EDB4 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from time delay
0000EDB8 6600                       		bne.s	locret_E302	; if time still	remains, branch
0000EDBA 1168 001F 001E             		move.b	$1F(a0),$1E(a0)	; reset	time delay
0000EDC0 6100 F590                  		bsr.w	ChkObjOnScreen
0000EDC4 6600                       		bne.s	locret_E302
0000EDC6 6100 F7A4                  		bsr.w	SingleObjLoad
0000EDCA 6600                       		bne.s	locret_E302
0000EDCC 12BC 0014                  		move.b	#$14,0(a1)	; load lava ball object
0000EDD0 3368 0008 0008             		move.w	8(a0),8(a1)
0000EDD6 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000EDDC 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000EDE2                            
0000EDE2                            locret_E302:
0000EDE2 4E75                       		rts	
0000EDE4                            ; ===========================================================================
0000EDE4                            ; ---------------------------------------------------------------------------
0000EDE4                            ; Object 14 - lava balls (MZ, SLZ)
0000EDE4                            ; ---------------------------------------------------------------------------
0000EDE4                            
0000EDE4                            Obj14:					; XREF: Obj_Index
0000EDE4 7000                       		moveq	#0,d0
0000EDE6 1028 0024                  		move.b	$24(a0),d0
0000EDEA 323B 0000                  		move.w	Obj14_Index(pc,d0.w),d1
0000EDEE 4EBB 1000                  		jsr	Obj14_Index(pc,d1.w)
0000EDF2 6000 F2E2                  		bra.w	DisplaySprite
0000EDF6                            ; ===========================================================================
0000EDF6 0000                       Obj14_Index:	dc.w Obj14_Main-Obj14_Index
0000EDF8 0000                       		dc.w Obj14_Action-Obj14_Index
0000EDFA 0000                       		dc.w Obj14_Delete-Obj14_Index
0000EDFC                            
0000EDFC FC00 FB00 FA00 F900 FE00   Obj14_Speeds:	dc.w $FC00, $FB00, $FA00, $F900, $FE00
0000EE06 0200 FE00 0200 0000        		dc.w $200, $FE00, $200,	0
0000EE0E                            ; ===========================================================================
0000EE0E                            
0000EE0E                            Obj14_Main:				; XREF: Obj14_Index
0000EE0E 5428 0024                  		addq.b	#2,$24(a0)
0000EE12 117C 0008 0016             		move.b	#8,$16(a0)
0000EE18 117C 0008 0017             		move.b	#8,$17(a0)
0000EE1E 217C 0000 BE46 0004        		move.l	#Map_obj14,4(a0)
0000EE26 317C 0345 0002             		move.w	#$345,2(a0)
0000EE2C 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
0000EE32 6600                       		bne.s	loc_E35A
0000EE34 317C 0480 0002             		move.w	#$480,2(a0)	; SLZ specific code
0000EE3A                            
0000EE3A                            loc_E35A:
0000EE3A 117C 0004 0001             		move.b	#4,1(a0)
0000EE40 117C 0003 0018             		move.b	#3,$18(a0)
0000EE46 117C 008B 0020             		move.b	#$8B,$20(a0)
0000EE4C 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000EE52 4A28 0029                  		tst.b	$29(a0)
0000EE56 6700                       		beq.s	Obj14_SetSpeed
0000EE58 5428 0018                  		addq.b	#2,$18(a0)
0000EE5C                            
0000EE5C                            Obj14_SetSpeed:
0000EE5C 7000                       		moveq	#0,d0
0000EE5E 1028 0028                  		move.b	$28(a0),d0
0000EE62 D040                       		add.w	d0,d0
0000EE64 317B 0096 0012             		move.w	Obj14_Speeds(pc,d0.w),$12(a0) ;	load object speed (vertical)
0000EE6A 117C 0008 0019             		move.b	#8,$19(a0)
0000EE70 0C28 0006 0028             		cmpi.b	#6,$28(a0)	; is object type below $6 ?
0000EE76 6500                       		bcs.s	Obj14_PlaySnd	; if yes, branch
0000EE78 117C 0010 0019             		move.b	#$10,$19(a0)
0000EE7E 117C 0002 001C             		move.b	#2,$1C(a0)	; use horizontal animation
0000EE84 3168 0012 0010             		move.w	$12(a0),$10(a0)	; set horizontal speed
0000EE8A 317C 0000 0012             		move.w	#0,$12(a0)	; delete vertical speed
0000EE90                            
0000EE90                            Obj14_PlaySnd:
0000EE90 303C 00AE                  		move.w	#$AE,d0
0000EE94 4EB9 0000 147C             		jsr	(PlaySound_Special).l ;	play lava ball sound
0000EE9A                            
0000EE9A                            Obj14_Action:				; XREF: Obj14_Index
0000EE9A 7000                       		moveq	#0,d0
0000EE9C 1028 0028                  		move.b	$28(a0),d0
0000EEA0 D040                       		add.w	d0,d0
0000EEA2 323B 0000                  		move.w	Obj14_TypeIndex(pc,d0.w),d1
0000EEA6 4EBB 1000                  		jsr	Obj14_TypeIndex(pc,d1.w)
0000EEAA 6100 F204                  		bsr.w	SpeedToPos
0000EEAE 43F9 0000 0000             		lea	(Ani_obj14).l,a1
0000EEB4 6100 C338                  		bsr.w	AnimateSprite
0000EEB8                            
0000EEB8                            Obj14_ChkDel:				; XREF: Obj13
0000EEB8 3028 0008                  		move.w	8(a0),d0
0000EEBC 0240 FF80                  		andi.w	#$FF80,d0
0000EEC0 3238 F700                  		move.w	($FFFFF700).w,d1
0000EEC4 0441 0080                  		subi.w	#$80,d1
0000EEC8 0241 FF80                  		andi.w	#$FF80,d1
0000EECC 9041                       		sub.w	d1,d0
0000EECE 0C40 0280                  		cmpi.w	#$280,d0
0000EED2 6200 F23E                  		bhi.w	DeleteObject
0000EED6 4E75                       		rts	
0000EED8                            ; ===========================================================================
0000EED8 0000 0000                  Obj14_TypeIndex:dc.w Obj14_Type00-Obj14_TypeIndex, Obj14_Type00-Obj14_TypeIndex
0000EEDC 0000 0000                  		dc.w Obj14_Type00-Obj14_TypeIndex, Obj14_Type00-Obj14_TypeIndex
0000EEE0 0000 0000                  		dc.w Obj14_Type04-Obj14_TypeIndex, Obj14_Type05-Obj14_TypeIndex
0000EEE4 0000 0000                  		dc.w Obj14_Type06-Obj14_TypeIndex, Obj14_Type07-Obj14_TypeIndex
0000EEE8 0000                       		dc.w Obj14_Type08-Obj14_TypeIndex
0000EEEA                            ; ===========================================================================
0000EEEA                            ; lavaball types 00-03 fly up and fall back down
0000EEEA                            
0000EEEA                            Obj14_Type00:				; XREF: Obj14_TypeIndex
0000EEEA 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's downward speed
0000EEF0 3028 0030                  		move.w	$30(a0),d0
0000EEF4 B068 000C                  		cmp.w	$C(a0),d0	; has object fallen back to its	original position?
0000EEF8 6400                       		bcc.s	loc_E41E	; if not, branch
0000EEFA 5428 0024                  		addq.b	#2,$24(a0)	; goto "Obj14_Delete" routine
0000EEFE                            
0000EEFE                            loc_E41E:
0000EEFE 08A8 0001 0022             		bclr	#1,$22(a0)
0000EF04 4A68 0012                  		tst.w	$12(a0)
0000EF08 6A00                       		bpl.s	locret_E430
0000EF0A 08E8 0001 0022             		bset	#1,$22(a0)
0000EF10                            
0000EF10                            locret_E430:
0000EF10 4E75                       		rts	
0000EF12                            ; ===========================================================================
0000EF12                            ; lavaball type	04 flies up until it hits the ceiling
0000EF12                            
0000EF12                            Obj14_Type04:				; XREF: Obj14_TypeIndex
0000EF12 08E8 0001 0022             		bset	#1,$22(a0)
0000EF18 6100 0000                  		bsr.w	ObjHitCeiling
0000EF1C 4A41                       		tst.w	d1
0000EF1E 6A00                       		bpl.s	locret_E452
0000EF20 117C 0008 0028             		move.b	#8,$28(a0)
0000EF26 117C 0001 001C             		move.b	#1,$1C(a0)
0000EF2C 317C 0000 0012             		move.w	#0,$12(a0)	; stop the object when it touches the ceiling
0000EF32                            
0000EF32                            locret_E452:
0000EF32 4E75                       		rts	
0000EF34                            ; ===========================================================================
0000EF34                            ; lavaball type	05 falls down until it hits the	floor
0000EF34                            
0000EF34                            Obj14_Type05:				; XREF: Obj14_TypeIndex
0000EF34 08A8 0001 0022             		bclr	#1,$22(a0)
0000EF3A 6100 0000                  		bsr.w	ObjHitFloor
0000EF3E 4A41                       		tst.w	d1
0000EF40 6A00                       		bpl.s	locret_E474
0000EF42 117C 0008 0028             		move.b	#8,$28(a0)
0000EF48 117C 0001 001C             		move.b	#1,$1C(a0)
0000EF4E 317C 0000 0012             		move.w	#0,$12(a0)	; stop the object when it touches the floor
0000EF54                            
0000EF54                            locret_E474:
0000EF54 4E75                       		rts	
0000EF56                            ; ===========================================================================
0000EF56                            ; lavaball types 06-07 move sideways
0000EF56                            
0000EF56                            Obj14_Type06:				; XREF: Obj14_TypeIndex
0000EF56 08E8 0000 0022             		bset	#0,$22(a0)
0000EF5C 76F8                       		moveq	#-8,d3
0000EF5E 6100 0000                  		bsr.w	ObjHitWallLeft
0000EF62 4A41                       		tst.w	d1
0000EF64 6A00                       		bpl.s	locret_E498
0000EF66 117C 0008 0028             		move.b	#8,$28(a0)
0000EF6C 117C 0003 001C             		move.b	#3,$1C(a0)
0000EF72 317C 0000 0010             		move.w	#0,$10(a0)	; stop object when it touches a	wall
0000EF78                            
0000EF78                            locret_E498:
0000EF78 4E75                       		rts	
0000EF7A                            ; ===========================================================================
0000EF7A                            
0000EF7A                            Obj14_Type07:				; XREF: Obj14_TypeIndex
0000EF7A 08A8 0000 0022             		bclr	#0,$22(a0)
0000EF80 7608                       		moveq	#8,d3
0000EF82 6100 0000                  		bsr.w	ObjHitWallRight
0000EF86 4A41                       		tst.w	d1
0000EF88 6A00                       		bpl.s	locret_E4BC
0000EF8A 117C 0008 0028             		move.b	#8,$28(a0)
0000EF90 117C 0003 001C             		move.b	#3,$1C(a0)
0000EF96 317C 0000 0010             		move.w	#0,$10(a0)	; stop object when it touches a	wall
0000EF9C                            
0000EF9C                            locret_E4BC:
0000EF9C 4E75                       		rts	
0000EF9E                            ; ===========================================================================
0000EF9E                            
0000EF9E                            Obj14_Type08:				; XREF: Obj14_TypeIndex
0000EF9E 4E75                       		rts	
0000EFA0                            ; ===========================================================================
0000EFA0                            
0000EFA0                            Obj14_Delete:				; XREF: Obj14_Index
0000EFA0 6000 F170                  		bra.w	DeleteObject
0000EFA4                            ; ===========================================================================
0000EFA4                            Ani_obj14:
0000EFA4                            	include "_anim\obj14.asm"
0000EFA4                            ; ---------------------------------------------------------------------------
0000EFA4                            ; Animation script - lava balls
0000EFA4                            ; ---------------------------------------------------------------------------
0000EFA4 0000                       		dc.w byte_E4CC-Ani_obj14
0000EFA6 0000                       		dc.w byte_E4D2-Ani_obj14
0000EFA8 0000                       		dc.w byte_E4D6-Ani_obj14
0000EFAA 0000                       		dc.w byte_E4DC-Ani_obj14
0000EFAC 0500 2001 21FF             byte_E4CC:	dc.b 5,	0, $20,	1, $21,	$FF
0000EFB2 0502 FC00                  byte_E4D2:	dc.b 5,	2, $FC,	0
0000EFB6 0503 4304 44FF             byte_E4D6:	dc.b 5,	3, $43,	4, $44,	$FF
0000EFBC 0505 FC00                  byte_E4DC:	dc.b 5,	5, $FC,	0
0000EFC0                            		even
0000EFC0                            		even
0000EFC0                            
0000EFC0                            ; ===========================================================================
0000EFC0                            ; ---------------------------------------------------------------------------
0000EFC0                            ; Object 6D - flame thrower (SBZ)
0000EFC0                            ; ---------------------------------------------------------------------------
0000EFC0                            
0000EFC0                            Obj6D:					; XREF: Obj_Index
0000EFC0 7000                       		moveq	#0,d0
0000EFC2 1028 0024                  		move.b	$24(a0),d0
0000EFC6 323B 0000                  		move.w	Obj6D_Index(pc,d0.w),d1
0000EFCA 4EFB 1000                  		jmp	Obj6D_Index(pc,d1.w)
0000EFCE                            ; ===========================================================================
0000EFCE 0000                       Obj6D_Index:	dc.w Obj6D_Main-Obj6D_Index
0000EFD0 0000                       		dc.w Obj6D_Action-Obj6D_Index
0000EFD2                            ; ===========================================================================
0000EFD2                            
0000EFD2                            Obj6D_Main:				; XREF: Obj6D_Index
0000EFD2 5428 0024                  		addq.b	#2,$24(a0)
0000EFD6 217C 0000 0000 0004        		move.l	#Map_obj6D,4(a0)
0000EFDE 317C 83D9 0002             		move.w	#$83D9,2(a0)
0000EFE4 0028 0004 0001             		ori.b	#4,1(a0)
0000EFEA 117C 0001 0018             		move.b	#1,$18(a0)
0000EFF0 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000EFF6 117C 000C 0019             		move.b	#$C,$19(a0)
0000EFFC 1028 0028                  		move.b	$28(a0),d0
0000F000 0240 00F0                  		andi.w	#$F0,d0		; read 1st digit of object type
0000F004 D040                       		add.w	d0,d0		; multiply by 2
0000F006 3140 0030                  		move.w	d0,$30(a0)
0000F00A 3140 0032                  		move.w	d0,$32(a0)	; set flaming time
0000F00E 1028 0028                  		move.b	$28(a0),d0
0000F012 0240 000F                  		andi.w	#$F,d0		; read 2nd digit of object type
0000F016 EB48                       		lsl.w	#5,d0		; multiply by $20
0000F018 3140 0034                  		move.w	d0,$34(a0)	; set pause time
0000F01C 117C 000A 0036             		move.b	#$A,$36(a0)
0000F022 0828 0001 0022             		btst	#1,$22(a0)
0000F028 6700                       		beq.s	Obj6D_Action
0000F02A 117C 0002 001C             		move.b	#2,$1C(a0)
0000F030 117C 0015 0036             		move.b	#$15,$36(a0)
0000F036                            
0000F036                            Obj6D_Action:				; XREF: Obj6D_Index
0000F036 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time
0000F03A 6A00                       		bpl.s	loc_E57A	; if time remains, branch
0000F03C 3168 0034 0030             		move.w	$34(a0),$30(a0)	; begin	pause time
0000F042 0868 0000 001C             		bchg	#0,$1C(a0)
0000F048 6700                       		beq.s	loc_E57A
0000F04A 3168 0032 0030             		move.w	$32(a0),$30(a0)	; begin	flaming	time
0000F050 303C 00B3                  		move.w	#$B3,d0
0000F054 4EB9 0000 147C             		jsr	(PlaySound_Special).l ;	play flame sound
0000F05A                            
0000F05A                            loc_E57A:
0000F05A 43F9 0000 0000             		lea	(Ani_obj6D).l,a1
0000F060 6100 C18C                  		bsr.w	AnimateSprite
0000F064 117C 0000 0020             		move.b	#0,$20(a0)
0000F06A 1028 0036                  		move.b	$36(a0),d0
0000F06E B028 001A                  		cmp.b	$1A(a0),d0
0000F072 6600                       		bne.s	Obj6D_ChkDel
0000F074 117C 00A3 0020             		move.b	#$A3,$20(a0)
0000F07A                            
0000F07A                            Obj6D_ChkDel:
0000F07A 3028 0008                  		move.w	8(a0),d0
0000F07E 0240 FF80                  		andi.w	#$FF80,d0
0000F082 3238 F700                  		move.w	($FFFFF700).w,d1
0000F086 0441 0080                  		subi.w	#$80,d1
0000F08A 0241 FF80                  		andi.w	#$FF80,d1
0000F08E 9041                       		sub.w	d1,d0
0000F090 0C40 0280                  		cmpi.w	#$280,d0
0000F094 6200 F07C                  		bhi.w	DeleteObject
0000F098 6000 F03C                  		bra.w	DisplaySprite
0000F09C                            ; ===========================================================================
0000F09C                            Ani_obj6D:
0000F09C                            	include "_anim\obj6D.asm"
0000F09C                            ; ---------------------------------------------------------------------------
0000F09C                            ; Animation script - flamethrower (SBZ)
0000F09C                            ; ---------------------------------------------------------------------------
0000F09C 0000                       		dc.w byte_E5C4-Ani_obj6D
0000F09E 0000                       		dc.w byte_E5D2-Ani_obj6D
0000F0A0 0000                       		dc.w byte_E5DC-Ani_obj6D
0000F0A2 0000                       		dc.w byte_E5EA-Ani_obj6D
0000F0A4 0300 0102 0304 0506 0708+  byte_E5C4:	dc.b 3,	0, 1, 2, 3, 4, 5, 6, 7,	8, 9, $A, $FE, 2
0000F0B2 0009 0705 0301 00FE 0100   byte_E5D2:	dc.b 0,	9, 7, 5, 3, 1, 0, $FE, 1, 0
0000F0BC 030B 0C0D 0E0F 1011 1213+  byte_E5DC:	dc.b 3,	$B, $C,	$D, $E,	$F, $10, $11, $12, $13,	$14, $15, $FE, 2
0000F0CA 0014 1211 0F0D 0BFE 0100   byte_E5EA:	dc.b 0,	$14, $12, $11, $F, $D, $B, $FE,	1, 0
0000F0D4                            		even
0000F0D4                            		even
0000F0D4                            
0000F0D4                            ; ---------------------------------------------------------------------------
0000F0D4                            ; Sprite mappings - flame thrower (SBZ)
0000F0D4                            ; ---------------------------------------------------------------------------
0000F0D4                            Map_obj6D:
0000F0D4                            	include "_maps\obj6D.asm"
0000F0D4                            ; ---------------------------------------------------------------------------
0000F0D4                            ; Sprite mappings - flame thrower (SBZ)
0000F0D4                            ; ---------------------------------------------------------------------------
0000F0D4 0000 0000                  		dc.w byte_E620-Map_obj6D, byte_E626-Map_obj6D
0000F0D8 0000 0000                  		dc.w byte_E631-Map_obj6D, byte_E63C-Map_obj6D
0000F0DC 0000 0000                  		dc.w byte_E64C-Map_obj6D, byte_E65C-Map_obj6D
0000F0E0 0000 0000                  		dc.w byte_E671-Map_obj6D, byte_E686-Map_obj6D
0000F0E4 0000 0000                  		dc.w byte_E6A0-Map_obj6D, byte_E6BA-Map_obj6D
0000F0E8 0000 0000                  		dc.w byte_E6D9-Map_obj6D, byte_E6F8-Map_obj6D
0000F0EC 0000 0000                  		dc.w byte_E6FE-Map_obj6D, byte_E709-Map_obj6D
0000F0F0 0000 0000                  		dc.w byte_E714-Map_obj6D, byte_E724-Map_obj6D
0000F0F4 0000 0000                  		dc.w byte_E734-Map_obj6D, byte_E749-Map_obj6D
0000F0F8 0000 0000                  		dc.w byte_E75E-Map_obj6D, byte_E778-Map_obj6D
0000F0FC 0000 0000                  		dc.w byte_E792-Map_obj6D, byte_E7B1-Map_obj6D
0000F100 01                         byte_E620:	dc.b 1
0000F101 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F106 02                         byte_E626:	dc.b 2
0000F107 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F10C 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F111 02                         byte_E631:	dc.b 2
0000F112 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F117 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F11C 03                         byte_E63C:	dc.b 3
0000F11D 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000F122 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F127 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F12C 03                         byte_E64C:	dc.b 3
0000F12D 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000F132 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F137 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F13C 04                         byte_E65C:	dc.b 4
0000F13D 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000F142 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000F147 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F14C 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F151 04                         byte_E671:	dc.b 4
0000F152 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000F157 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000F15C 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F161 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F166 05                         byte_E686:	dc.b 5
0000F167 F80B 0008 F4               		dc.b $F8, $B, 0, 8, $F4
0000F16C 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000F171 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000F176 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F17B 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F180 05                         byte_E6A0:	dc.b 5
0000F181 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000F186 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000F18B 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000F190 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F195 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F19A 06                         byte_E6BA:	dc.b 6
0000F19B E80B 0008 F4               		dc.b $E8, $B, 0, 8, $F4
0000F1A0 F70B 0008 F4               		dc.b $F7, $B, 0, 8, $F4
0000F1A5 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000F1AA 0F06 0002 F8               		dc.b $F, 6, 0, 2, $F8
0000F1AF 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F1B4 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F1B9 06                         byte_E6D9:	dc.b 6
0000F1BA E70B 0808 F4               		dc.b $E7, $B, 8, 8, $F4
0000F1BF F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000F1C4 0706 0802 F8               		dc.b 7,	6, 8, 2, $F8
0000F1C9 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000F1CE 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F1D3 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F1D8 01                         byte_E6F8:	dc.b 1
0000F1D9 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F1DE 02                         byte_E6FE:	dc.b 2
0000F1DF 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F1E4 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F1E9 02                         byte_E709:	dc.b 2
0000F1EA 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F1EF 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F1F4 03                         byte_E714:	dc.b 3
0000F1F5 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000F1FA 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F1FF 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F204 03                         byte_E724:	dc.b 3
0000F205 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000F20A 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F20F 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F214 04                         byte_E734:	dc.b 4
0000F215 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000F21A 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000F21F 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F224 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F229 04                         byte_E749:	dc.b 4
0000F22A 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000F22F 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000F234 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F239 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F23E 05                         byte_E75E:	dc.b 5
0000F23F F80B 0008 F4               		dc.b $F8, $B, 0, 8, $F4
0000F244 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000F249 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000F24E 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F253 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F258 05                         byte_E778:	dc.b 5
0000F259 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000F25E 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000F263 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000F268 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F26D 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F272 06                         byte_E792:	dc.b 6
0000F273 E80B 0008 F4               		dc.b $E8, $B, 0, 8, $F4
0000F278 F70B 0008 F4               		dc.b $F7, $B, 0, 8, $F4
0000F27D 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000F282 0F06 0002 F8               		dc.b $F, 6, 0, 2, $F8
0000F287 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F28C 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F291 06                         byte_E7B1:	dc.b 6
0000F292 E70B 0808 F4               		dc.b $E7, $B, 8, 8, $F4
0000F297 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000F29C 0706 0802 F8               		dc.b 7,	6, 8, 2, $F8
0000F2A1 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000F2A6 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F2AB 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F2B0                            		even
0000F2B0                            		even
0000F2B0                            
0000F2B0                            ; ===========================================================================
0000F2B0                            ; ---------------------------------------------------------------------------
0000F2B0                            ; Object 46 - solid blocks and blocks that fall	from the ceiling (MZ)
0000F2B0                            ; ---------------------------------------------------------------------------
0000F2B0                            
0000F2B0                            Obj46:					; XREF: Obj_Index
0000F2B0 7000                       		moveq	#0,d0
0000F2B2 1028 0024                  		move.b	$24(a0),d0
0000F2B6 323B 0000                  		move.w	Obj46_Index(pc,d0.w),d1
0000F2BA 4EFB 1000                  		jmp	Obj46_Index(pc,d1.w)
0000F2BE                            ; ===========================================================================
0000F2BE 0000                       Obj46_Index:	dc.w Obj46_Main-Obj46_Index
0000F2C0 0000                       		dc.w Obj46_Action-Obj46_Index
0000F2C2                            ; ===========================================================================
0000F2C2                            
0000F2C2                            Obj46_Main:				; XREF: Obj46_Index
0000F2C2 5428 0024                  		addq.b	#2,$24(a0)
0000F2C6 117C 000F 0016             		move.b	#$F,$16(a0)
0000F2CC 117C 000F 0017             		move.b	#$F,$17(a0)
0000F2D2 217C 0000 0000 0004        		move.l	#Map_obj46,4(a0)
0000F2DA 317C 4000 0002             		move.w	#$4000,2(a0)
0000F2E0 117C 0004 0001             		move.b	#4,1(a0)
0000F2E6 117C 0003 0018             		move.b	#3,$18(a0)
0000F2EC 117C 0010 0019             		move.b	#$10,$19(a0)
0000F2F2 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000F2F8 317C 05C0 0032             		move.w	#$5C0,$32(a0)
0000F2FE                            
0000F2FE                            Obj46_Action:				; XREF: Obj46_Index
0000F2FE 4A28 0001                  		tst.b	1(a0)
0000F302 6A00                       		bpl.s	Obj46_ChkDel
0000F304 7000                       		moveq	#0,d0
0000F306 1028 0028                  		move.b	$28(a0),d0	; get object type
0000F30A 0240 0007                  		andi.w	#7,d0		; read only the	1st digit
0000F30E D040                       		add.w	d0,d0
0000F310 323B 0000                  		move.w	Obj46_TypeIndex(pc,d0.w),d1
0000F314 4EBB 1000                  		jsr	Obj46_TypeIndex(pc,d1.w)
0000F318 323C 001B                  		move.w	#$1B,d1
0000F31C 343C 0010                  		move.w	#$10,d2
0000F320 363C 0011                  		move.w	#$11,d3
0000F324 3828 0008                  		move.w	8(a0),d4
0000F328 6100 0000                  		bsr.w	SolidObject
0000F32C                            
0000F32C                            Obj46_ChkDel:
0000F32C 6100 EDA8                  		bsr.w	DisplaySprite
0000F330 3028 0008                  		move.w	8(a0),d0
0000F334 0240 FF80                  		andi.w	#$FF80,d0
0000F338 3238 F700                  		move.w	($FFFFF700).w,d1
0000F33C 0441 0080                  		subi.w	#$80,d1
0000F340 0241 FF80                  		andi.w	#$FF80,d1
0000F344 9041                       		sub.w	d1,d0
0000F346 0C40 0280                  		cmpi.w	#$280,d0
0000F34A 6200 EDC6                  		bhi.w	DeleteObject
0000F34E 4E75                       		rts	
0000F350                            ; ===========================================================================
0000F350 0000                       Obj46_TypeIndex:dc.w Obj46_Type00-Obj46_TypeIndex
0000F352 0000                       		dc.w Obj46_Type01-Obj46_TypeIndex
0000F354 0000                       		dc.w Obj46_Type02-Obj46_TypeIndex
0000F356 0000                       		dc.w Obj46_Type03-Obj46_TypeIndex
0000F358 0000                       		dc.w Obj46_Type04-Obj46_TypeIndex
0000F35A                            ; ===========================================================================
0000F35A                            
0000F35A                            Obj46_Type00:				; XREF: Obj46_TypeIndex
0000F35A 4E75                       		rts	
0000F35C                            ; ===========================================================================
0000F35C                            
0000F35C                            Obj46_Type02:				; XREF: Obj46_TypeIndex
0000F35C 3038 D008                  		move.w	($FFFFD008).w,d0
0000F360 9068 0008                  		sub.w	8(a0),d0
0000F364 6400                       		bcc.s	loc_E888
0000F366 4440                       		neg.w	d0
0000F368                            
0000F368                            loc_E888:
0000F368 0C40 0090                  		cmpi.w	#$90,d0		; is Sonic within $90 pixels of	the block?
0000F36C 6400                       		bcc.s	Obj46_Type01	; if not, resume wobbling
0000F36E 117C 0003 0028             		move.b	#3,$28(a0)	; if yes, make the block fall
0000F374                            
0000F374                            Obj46_Type01:				; XREF: Obj46_TypeIndex
0000F374 7000                       		moveq	#0,d0
0000F376 1038 FE74                  		move.b	($FFFFFE74).w,d0
0000F37A 0828 0003 0028             		btst	#3,$28(a0)
0000F380 6700                       		beq.s	loc_E8A8
0000F382 4440                       		neg.w	d0
0000F384 0640 0010                  		addi.w	#$10,d0
0000F388                            
0000F388                            loc_E8A8:
0000F388 3228 0030                  		move.w	$30(a0),d1
0000F38C 9240                       		sub.w	d0,d1
0000F38E 3141 000C                  		move.w	d1,$C(a0)	; update the block's position to make it wobble
0000F392 4E75                       		rts	
0000F394                            ; ===========================================================================
0000F394                            
0000F394                            Obj46_Type03:				; XREF: Obj46_TypeIndex
0000F394 6100 ED1A                  		bsr.w	SpeedToPos
0000F398 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase falling speed
0000F39E 6100 0000                  		bsr.w	ObjHitFloor
0000F3A2 4A41                       		tst.w	d1		; has the block	hit the	floor?
0000F3A4 6A00 0000                  		bpl.w	locret_E8EE	; if not, branch
0000F3A8 D368 000C                  		add.w	d1,$C(a0)
0000F3AC 4268 0012                  		clr.w	$12(a0)		; stop the block falling
0000F3B0 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000F3B6 117C 0004 0028             		move.b	#4,$28(a0)
0000F3BC 3011                       		move.w	(a1),d0
0000F3BE 0240 03FF                  		andi.w	#$3FF,d0
0000F3C2 0C40 02E8                  		cmpi.w	#$2E8,d0
0000F3C6 6400                       		bcc.s	locret_E8EE
0000F3C8 117C 0000 0028             		move.b	#0,$28(a0)
0000F3CE                            
0000F3CE                            locret_E8EE:
0000F3CE 4E75                       		rts	
0000F3D0                            ; ===========================================================================
0000F3D0                            
0000F3D0                            Obj46_Type04:				; XREF: Obj46_TypeIndex
0000F3D0 7000                       		moveq	#0,d0
0000F3D2 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000F3D6 E648                       		lsr.w	#3,d0
0000F3D8 3228 0030                  		move.w	$30(a0),d1
0000F3DC 9240                       		sub.w	d0,d1
0000F3DE 3141 000C                  		move.w	d1,$C(a0)	; make the block wobble
0000F3E2 4E75                       		rts	
0000F3E4                            ; ===========================================================================
0000F3E4                            ; ---------------------------------------------------------------------------
0000F3E4                            ; Sprite mappings - solid blocks and blocks that fall from the ceiling (MZ)
0000F3E4                            ; ---------------------------------------------------------------------------
0000F3E4                            Map_obj46:
0000F3E4                            	include "_maps\obj46.asm"
0000F3E4                            ; ---------------------------------------------------------------------------
0000F3E4                            ; Sprite mappings - solid blocks and blocks that fall from the ceiling (MZ)
0000F3E4                            ; ---------------------------------------------------------------------------
0000F3E4 0000                       		dc.w byte_E906-Map_obj46
0000F3E6 01                         byte_E906:	dc.b 1
0000F3E7 F00F 0001 F0               		dc.b $F0, $F, 0, 1, $F0
0000F3EC                            		even
0000F3EC                            		even
0000F3EC                            
0000F3EC                            ; ===========================================================================
0000F3EC                            ; ---------------------------------------------------------------------------
0000F3EC                            ; Object 12 - lamp (SYZ)
0000F3EC                            ; ---------------------------------------------------------------------------
0000F3EC                            
0000F3EC                            Obj12:					; XREF: Obj_Index
0000F3EC 7000                       		moveq	#0,d0
0000F3EE 1028 0024                  		move.b	$24(a0),d0
0000F3F2 323B 0000                  		move.w	Obj12_Index(pc,d0.w),d1
0000F3F6 4EFB 1000                  		jmp	Obj12_Index(pc,d1.w)
0000F3FA                            ; ===========================================================================
0000F3FA 0000                       Obj12_Index:	dc.w Obj12_Main-Obj12_Index
0000F3FC 0000                       		dc.w Obj12_Animate-Obj12_Index
0000F3FE                            ; ===========================================================================
0000F3FE                            
0000F3FE                            Obj12_Main:				; XREF: Obj12_Index
0000F3FE 5428 0024                  		addq.b	#2,$24(a0)
0000F402 217C 0000 0000 0004        		move.l	#Map_obj12,4(a0)
0000F40A 317C 0000 0002             		move.w	#0,2(a0)
0000F410 117C 0004 0001             		move.b	#4,1(a0)
0000F416 117C 0010 0019             		move.b	#$10,$19(a0)
0000F41C 117C 0006 0018             		move.b	#6,$18(a0)
0000F422                            
0000F422                            Obj12_Animate:				; XREF: Obj12_Index
0000F422 5328 001E                  		subq.b	#1,$1E(a0)
0000F426 6A00                       		bpl.s	Obj12_ChkDel
0000F428 117C 0007 001E             		move.b	#7,$1E(a0)
0000F42E 5228 001A                  		addq.b	#1,$1A(a0)
0000F432 0C28 0006 001A             		cmpi.b	#6,$1A(a0)
0000F438 6500                       		bcs.s	Obj12_ChkDel
0000F43A 117C 0000 001A             		move.b	#0,$1A(a0)
0000F440                            
0000F440                            Obj12_ChkDel:
0000F440 3028 0008                  		move.w	8(a0),d0
0000F444 0240 FF80                  		andi.w	#$FF80,d0
0000F448 3238 F700                  		move.w	($FFFFF700).w,d1
0000F44C 0441 0080                  		subi.w	#$80,d1
0000F450 0241 FF80                  		andi.w	#$FF80,d1
0000F454 9041                       		sub.w	d1,d0
0000F456 0C40 0280                  		cmpi.w	#$280,d0
0000F45A 6200 ECB6                  		bhi.w	DeleteObject
0000F45E 6000 EC76                  		bra.w	DisplaySprite
0000F462                            ; ===========================================================================
0000F462                            ; ---------------------------------------------------------------------------
0000F462                            ; Sprite mappings - lamp (SYZ)
0000F462                            ; ---------------------------------------------------------------------------
0000F462                            Map_obj12:
0000F462                            	include "_maps\obj12.asm"
0000F462                            ; ---------------------------------------------------------------------------
0000F462                            ; Sprite mappings - lamp (SYZ)
0000F462                            ; ---------------------------------------------------------------------------
0000F462 0000 0000                  		dc.w byte_E98E-Map_obj12, byte_E999-Map_obj12
0000F466 0000 0000                  		dc.w byte_E9A4-Map_obj12, byte_E9AF-Map_obj12
0000F46A 0000 0000                  		dc.w byte_E9BA-Map_obj12, byte_E9C5-Map_obj12
0000F46E 02                         byte_E98E:	dc.b 2
0000F46F F80C 0031 F0               		dc.b $F8, $C, 0, $31, $F0
0000F474 000C 1031 F0               		dc.b 0,	$C, $10, $31, $F0
0000F479 02                         byte_E999:	dc.b 2
0000F47A F80C 0035 F0               		dc.b $F8, $C, 0, $35, $F0
0000F47F 000C 1035 F0               		dc.b 0,	$C, $10, $35, $F0
0000F484 02                         byte_E9A4:	dc.b 2
0000F485 F80C 0039 F0               		dc.b $F8, $C, 0, $39, $F0
0000F48A 000C 1039 F0               		dc.b 0,	$C, $10, $39, $F0
0000F48F 02                         byte_E9AF:	dc.b 2
0000F490 F80C 003D F0               		dc.b $F8, $C, 0, $3D, $F0
0000F495 000C 103D F0               		dc.b 0,	$C, $10, $3D, $F0
0000F49A 02                         byte_E9BA:	dc.b 2
0000F49B F80C 0041 F0               		dc.b $F8, $C, 0, $41, $F0
0000F4A0 000C 1041 F0               		dc.b 0,	$C, $10, $41, $F0
0000F4A5 02                         byte_E9C5:	dc.b 2
0000F4A6 F80C 0045 F0               		dc.b $F8, $C, 0, $45, $F0
0000F4AB 000C 1045 F0               		dc.b 0,	$C, $10, $45, $F0
0000F4B0                            		even
0000F4B0                            		even
0000F4B0                            
0000F4B0                            ; ===========================================================================
0000F4B0                            ; ---------------------------------------------------------------------------
0000F4B0                            ; Object 47 - pinball bumper (SYZ)
0000F4B0                            ; ---------------------------------------------------------------------------
0000F4B0                            
0000F4B0                            Obj47:					; XREF: Obj_Index
0000F4B0 7000                       		moveq	#0,d0
0000F4B2 1028 0024                  		move.b	$24(a0),d0
0000F4B6 323B 0000                  		move.w	Obj47_Index(pc,d0.w),d1
0000F4BA 4EFB 1000                  		jmp	Obj47_Index(pc,d1.w)
0000F4BE                            ; ===========================================================================
0000F4BE 0000                       Obj47_Index:	dc.w Obj47_Main-Obj47_Index
0000F4C0 0000                       		dc.w Obj47_Hit-Obj47_Index
0000F4C2                            ; ===========================================================================
0000F4C2                            
0000F4C2                            Obj47_Main:				; XREF: Obj47_Index
0000F4C2 5428 0024                  		addq.b	#2,$24(a0)
0000F4C6 217C 0000 0000 0004        		move.l	#Map_obj47,4(a0)
0000F4CE 317C 0380 0002             		move.w	#$380,2(a0)
0000F4D4 117C 0004 0001             		move.b	#4,1(a0)
0000F4DA 117C 0010 0019             		move.b	#$10,$19(a0)
0000F4E0 117C 0001 0018             		move.b	#1,$18(a0)
0000F4E6 117C 00D7 0020             		move.b	#$D7,$20(a0)
0000F4EC                            
0000F4EC                            Obj47_Hit:				; XREF: Obj47_Index
0000F4EC 4A28 0021                  		tst.b	$21(a0)		; has Sonic touched the	bumper?
0000F4F0 6700 0000                  		beq.w	Obj47_Display	; if not, branch
0000F4F4 4228 0021                  		clr.b	$21(a0)
0000F4F8 43F8 D000                  		lea	($FFFFD000).w,a1
0000F4FC 3228 0008                  		move.w	8(a0),d1
0000F500 3428 000C                  		move.w	$C(a0),d2
0000F504 9269 0008                  		sub.w	8(a1),d1
0000F508 9469 000C                  		sub.w	$C(a1),d2
0000F50C 4EB9 0000 36A8             		jsr	(CalcAngle).l
0000F512 4EB9 0000 33DA             		jsr	(CalcSine).l
0000F518 C3FC F900                  		muls.w	#-$700,d1
0000F51C E081                       		asr.l	#8,d1
0000F51E 3341 0010                  		move.w	d1,$10(a1)	; bounce Sonic away
0000F522 C1FC F900                  		muls.w	#-$700,d0
0000F526 E080                       		asr.l	#8,d0
0000F528 3340 0012                  		move.w	d0,$12(a1)	; bounce Sonic away
0000F52C 08E9 0001 0022             		bset	#1,$22(a1)
0000F532 08A9 0004 0022             		bclr	#4,$22(a1)
0000F538 08A9 0005 0022             		bclr	#5,$22(a1)
0000F53E 4229 003C                  		clr.b	$3C(a1)
0000F542 117C 0001 001C             		move.b	#1,$1C(a0)
0000F548 303C 00B4                  		move.w	#$B4,d0
0000F54C 4EB9 0000 147C             		jsr	(PlaySound_Special).l ;	play bumper sound
0000F552 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000F556 7000                       		moveq	#0,d0
0000F558 1028 0023                  		move.b	$23(a0),d0
0000F55C 6700                       		beq.s	Obj47_Score
0000F55E 0C32 008A 0002             		cmpi.b	#$8A,2(a2,d0.w)	; has bumper been hit $8A times?
0000F564 6400                       		bcc.s	Obj47_Display	; if yes, Sonic	gets no	points
0000F566 5232 0002                  		addq.b	#1,2(a2,d0.w)
0000F56A                            
0000F56A                            Obj47_Score:
0000F56A 7001                       		moveq	#1,d0
0000F56C 4EB9 0000 0000             		jsr	AddPoints	; add 10 to score
0000F572 6100 EFF8                  		bsr.w	SingleObjLoad
0000F576 6600                       		bne.s	Obj47_Display
0000F578 12BC 0029                  		move.b	#$29,0(a1)	; load points object
0000F57C 3368 0008 0008             		move.w	8(a0),8(a1)
0000F582 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000F588 137C 0004 001A             		move.b	#4,$1A(a1)
0000F58E                            
0000F58E                            Obj47_Display:
0000F58E 43F9 0000 0000             		lea	(Ani_obj47).l,a1
0000F594 6100 BC58                  		bsr.w	AnimateSprite
0000F598 3028 0008                  		move.w	8(a0),d0
0000F59C 0240 FF80                  		andi.w	#$FF80,d0
0000F5A0 3238 F700                  		move.w	($FFFFF700).w,d1
0000F5A4 0441 0080                  		subi.w	#$80,d1
0000F5A8 0241 FF80                  		andi.w	#$FF80,d1
0000F5AC 9041                       		sub.w	d1,d0
0000F5AE 0C40 0280                  		cmpi.w	#$280,d0
0000F5B2 6200                       		bhi.s	Obj47_ChkHit
0000F5B4 6000 EB20                  		bra.w	DisplaySprite
0000F5B8                            ; ===========================================================================
0000F5B8                            
0000F5B8                            Obj47_ChkHit:				; XREF: Obj47_Display
0000F5B8 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000F5BC 7000                       		moveq	#0,d0
0000F5BE 1028 0023                  		move.b	$23(a0),d0
0000F5C2 6700                       		beq.s	Obj47_Delete
0000F5C4 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000F5CA                            
0000F5CA                            Obj47_Delete:
0000F5CA 6000 EB46                  		bra.w	DeleteObject
0000F5CE                            ; ===========================================================================
0000F5CE                            Ani_obj47:
0000F5CE                            	include "_anim\obj47.asm"
0000F5CE                            ; ---------------------------------------------------------------------------
0000F5CE                            ; Animation script - flamethrower (SBZ)
0000F5CE                            ; ---------------------------------------------------------------------------
0000F5CE 0000                       		dc.w byte_EAF4-Ani_obj47
0000F5D0 0000                       		dc.w byte_EAF8-Ani_obj47
0000F5D2 0F00 FF00                  byte_EAF4:	dc.b $F, 0, $FF, 0
0000F5D6 0301 0201 02FD 0000        byte_EAF8:	dc.b 3,	1, 2, 1, 2, $FD, 0, 0
0000F5DE                            		even
0000F5DE                            		even
0000F5DE                            
0000F5DE                            ; ---------------------------------------------------------------------------
0000F5DE                            ; Sprite mappings - pinball bumper (SYZ)
0000F5DE                            ; ---------------------------------------------------------------------------
0000F5DE                            Map_obj47:
0000F5DE                            	include "_maps\obj47.asm"
0000F5DE                            ; ---------------------------------------------------------------------------
0000F5DE                            ; Sprite mappings - pinball bumper (SYZ)
0000F5DE                            ; ---------------------------------------------------------------------------
0000F5DE 0000                       		dc.w byte_EB06-Map_obj47
0000F5E0 0000                       		dc.w byte_EB11-Map_obj47
0000F5E2 0000                       		dc.w byte_EB1C-Map_obj47
0000F5E4 02                         byte_EB06:	dc.b 2
0000F5E5 F007 0000 F0               		dc.b $F0, 7, 0,	0, $F0
0000F5EA F007 0800 00               		dc.b $F0, 7, 8,	0, 0
0000F5EF 02                         byte_EB11:	dc.b 2
0000F5F0 F406 0008 F4               		dc.b $F4, 6, 0,	8, $F4
0000F5F5 F402 0808 04               		dc.b $F4, 2, 8,	8, 4
0000F5FA 02                         byte_EB1C:	dc.b 2
0000F5FB F007 000E F0               		dc.b $F0, 7, 0,	$E, $F0
0000F600 F007 080E 00               		dc.b $F0, 7, 8,	$E, 0
0000F606 00                         		even
0000F606 00                         		even
0000F606                            
0000F606                            ; ===========================================================================
0000F606                            ; ---------------------------------------------------------------------------
0000F606                            ; Object 0D - signpost at the end of a level
0000F606                            ; ---------------------------------------------------------------------------
0000F606                            
0000F606                            Obj0D:					; XREF: Obj_Index
0000F606 7000                       		moveq	#0,d0
0000F608 1028 0024                  		move.b	$24(a0),d0
0000F60C 323B 0000                  		move.w	Obj0D_Index(pc,d0.w),d1
0000F610 4EBB 1000                  		jsr	Obj0D_Index(pc,d1.w)
0000F614 43F9 0000 0000             		lea	(Ani_obj0D).l,a1
0000F61A 6100 BBD2                  		bsr.w	AnimateSprite
0000F61E 6100 EAB6                  		bsr.w	DisplaySprite
0000F622 3028 0008                  		move.w	8(a0),d0
0000F626 0240 FF80                  		andi.w	#$FF80,d0
0000F62A 3238 F700                  		move.w	($FFFFF700).w,d1
0000F62E 0441 0080                  		subi.w	#$80,d1
0000F632 0241 FF80                  		andi.w	#$FF80,d1
0000F636 9041                       		sub.w	d1,d0
0000F638 0C40 0280                  		cmpi.w	#$280,d0
0000F63C 6200 EAD4                  		bhi.w	DeleteObject
0000F640 4E75                       		rts	
0000F642                            ; ===========================================================================
0000F642 0000                       Obj0D_Index:	dc.w Obj0D_Main-Obj0D_Index
0000F644 0000                       		dc.w Obj0D_Touch-Obj0D_Index
0000F646 0000                       		dc.w Obj0D_Spin-Obj0D_Index
0000F648 0000                       		dc.w Obj0D_SonicRun-Obj0D_Index
0000F64A 0000                       		dc.w locret_ED1A-Obj0D_Index
0000F64C                            ; ===========================================================================
0000F64C                            
0000F64C                            Obj0D_Main:				; XREF: Obj0D_Index
0000F64C 5428 0024                  		addq.b	#2,$24(a0)
0000F650 217C 0000 0000 0004        		move.l	#Map_obj0D,4(a0)
0000F658 317C 0680 0002             		move.w	#$680,2(a0)
0000F65E 117C 0004 0001             		move.b	#4,1(a0)
0000F664 117C 0018 0019             		move.b	#$18,$19(a0)
0000F66A 117C 0004 0018             		move.b	#4,$18(a0)
0000F670                            
0000F670                            Obj0D_Touch:				; XREF: Obj0D_Index
0000F670 3038 D008                  		move.w	($FFFFD008).w,d0
0000F674 9068 0008                  		sub.w	8(a0),d0
0000F678 6500                       		bcs.s	locret_EBBA
0000F67A 0C40 0020                  		cmpi.w	#$20,d0		; is Sonic within $20 pixels of	the signpost?
0000F67E 6400                       		bcc.s	locret_EBBA	; if not, branch
0000F680 303C 00CF                  		move.w	#$CF,d0
0000F684 4EB9 0000 1476             		jsr	(PlaySound).l	; play signpost	sound
0000F68A 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0000F68E 31F8 F72A F728             		move.w	($FFFFF72A).w,($FFFFF728).w ; lock screen position
0000F694 5428 0024                  		addq.b	#2,$24(a0)
0000F698                            
0000F698                            locret_EBBA:
0000F698 4E75                       		rts	
0000F69A                            ; ===========================================================================
0000F69A                            
0000F69A                            Obj0D_Spin:				; XREF: Obj0D_Index
0000F69A 4238 FE19                  		clr.b (Super_Sonic_Flag).w ; Revert Sonic to Normal
0000F69E 31FC 0600 F760             		move.w #$600,(Sonic_top_speed).w ; Revert speeds
0000F6A4 31FC 000C F762             		move.w #$C,(Sonic_acceleration).w ; ^^^
0000F6AA 31FC 0080 F764             		move.w #$80,(Sonic_deceleration).w ; ^^^
0000F6B0 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from spin time
0000F6B4 6A00                       		bpl.s	Obj0D_Sparkle	; if time remains, branch
0000F6B6 317C 003C 0030             		move.w	#60,$30(a0)	; set spin cycle time to 1 second
0000F6BC 5228 001C                  		addq.b	#1,$1C(a0)	; next spin cycle
0000F6C0 0C28 0003 001C             		cmpi.b	#3,$1C(a0)	; have 3 spin cycles completed?
0000F6C6 6600                       		bne.s	Obj0D_Sparkle	; if not, branch
0000F6C8 5428 0024                  		addq.b	#2,$24(a0)
0000F6CC                            
0000F6CC                            Obj0D_Sparkle:
0000F6CC 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
0000F6D0 6A00                       		bpl.s	locret_EC42	; if time remains, branch
0000F6D2 317C 000B 0032             		move.w	#$B,$32(a0)	; set time between sparkles to $B frames
0000F6D8 7000                       		moveq	#0,d0
0000F6DA 1028 0034                  		move.b	$34(a0),d0
0000F6DE 5428 0034                  		addq.b	#2,$34(a0)
0000F6E2 0228 000E 0034             		andi.b	#$E,$34(a0)
0000F6E8 45FB 0000                  		lea	Obj0D_SparkPos(pc,d0.w),a2 ; load sparkle position data
0000F6EC 6100 EE7E                  		bsr.w	SingleObjLoad
0000F6F0 6600                       		bne.s	locret_EC42
0000F6F2 12BC 0025                  		move.b	#$25,0(a1)	; load rings object
0000F6F6 137C 0006 0024             		move.b	#6,$24(a1)	; jump to ring sparkle subroutine
0000F6FC 101A                       		move.b	(a2)+,d0
0000F6FE 4880                       		ext.w	d0
0000F700 D068 0008                  		add.w	8(a0),d0
0000F704 3340 0008                  		move.w	d0,8(a1)
0000F708 101A                       		move.b	(a2)+,d0
0000F70A 4880                       		ext.w	d0
0000F70C D068 000C                  		add.w	$C(a0),d0
0000F710 3340 000C                  		move.w	d0,$C(a1)
0000F714 237C 0000 AA30 0004        		move.l	#Map_obj25,4(a1)
0000F71C 337C 27B2 0002             		move.w	#$27B2,2(a1)
0000F722 137C 0004 0001             		move.b	#4,1(a1)
0000F728 137C 0002 0018             		move.b	#2,$18(a1)
0000F72E 137C 0008 0019             		move.b	#8,$19(a1)
0000F734                            
0000F734                            locret_EC42:
0000F734 4E75                       		rts	
0000F736                            ; ===========================================================================
0000F736 E8F0                       Obj0D_SparkPos:	dc.b -$18,-$10		; x-position, y-position
0000F738 0808                       		dc.b	8,   8
0000F73A F000                       		dc.b -$10,   0
0000F73C 18F8                       		dc.b  $18,  -8
0000F73E 00F8                       		dc.b	0,  -8
0000F740 1000                       		dc.b  $10,   0
0000F742 E808                       		dc.b -$18,   8
0000F744 1810                       		dc.b  $18, $10
0000F746                            ; ===========================================================================
0000F746                            
0000F746                            Obj0D_SonicRun:				; XREF: Obj0D_Index
0000F746 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
0000F74A 6600 0000                  		bne.w	locret_ECEE	; if yes, branch
0000F74E 0838 0001 D022             		btst	#1,($FFFFD022).w
0000F754 6600                       		bne.s	loc_EC70
0000F756 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
0000F75C 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; make Sonic run to	the right
0000F762                            
0000F762                            loc_EC70:
0000F762 4A38 D000                  		tst.b	($FFFFD000).w
0000F766 6700                       		beq.s	loc_EC86
0000F768 3038 D008                  		move.w	($FFFFD008).w,d0
0000F76C 3238 F72A                  		move.w	($FFFFF72A).w,d1
0000F770 0641 0128                  		addi.w	#$128,d1
0000F774 B041                       		cmp.w	d1,d0
0000F776 6500                       		bcs.s	locret_ECEE
0000F778                            
0000F778                            loc_EC86:
0000F778 5428 0024                  		addq.b	#2,$24(a0)
0000F77C                            
0000F77C                            ; ---------------------------------------------------------------------------
0000F77C                            ; Subroutine to	set up bonuses at the end of an	act
0000F77C                            ; ---------------------------------------------------------------------------
0000F77C                            
0000F77C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F77C                            
0000F77C                            
0000F77C                            GotThroughAct:				; XREF: Obj3E_EndAct
0000F77C 4A38 D5C0                  		tst.b	($FFFFD5C0).w
0000F780 6600                       		bne.s	locret_ECEE
0000F782 31F8 F72A F728             		move.w	($FFFFF72A).w,($FFFFF728).w
0000F788 4238 FE2D                  		clr.b	($FFFFFE2D).w	; disable invincibility
0000F78C 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0000F790 11FC 003A D5C0             		move.b	#$3A,($FFFFD5C0).w
0000F796 7010                       		moveq	#$10,d0
0000F798 4EB9 0000 1722             		jsr	(LoadPLC2).l	; load title card patterns
0000F79E 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w
0000F7A4 7000                       		moveq	#0,d0
0000F7A6 1038 FE23                  		move.b	($FFFFFE23).w,d0
0000F7AA C0FC 003C                  		mulu.w	#60,d0		; convert minutes to seconds
0000F7AE 7200                       		moveq	#0,d1
0000F7B0 1238 FE24                  		move.b	($FFFFFE24).w,d1
0000F7B4 D041                       		add.w	d1,d0		; add up your time
0000F7B6 80FC 000F                  		divu.w	#15,d0		; divide by 15
0000F7BA 7214                       		moveq	#$14,d1
0000F7BC B041                       		cmp.w	d1,d0		; is time 5 minutes or higher?
0000F7BE 6500                       		bcs.s	loc_ECD0	; if not, branch
0000F7C0 3001                       		move.w	d1,d0		; use minimum time bonus (0)
0000F7C2                            
0000F7C2                            loc_ECD0:
0000F7C2 D040                       		add.w	d0,d0
0000F7C4 31FB 0000 F7D2             		move.w	TimeBonuses(pc,d0.w),($FFFFF7D2).w ; set time bonus
0000F7CA 3038 FE20                  		move.w	($FFFFFE20).w,d0 ; load	number of rings
0000F7CE C0FC 000A                  		mulu.w	#10,d0		; multiply by 10
0000F7D2 31C0 F7D4                  		move.w	d0,($FFFFF7D4).w ; set ring bonus
0000F7D6 303C 008E                  		move.w	#$8E,d0
0000F7DA 4EB9 0000 147C             		jsr	(PlaySound_Special).l ;	play "Sonic got	through" music
0000F7E0                            
0000F7E0                            locret_ECEE:
0000F7E0 4E75                       		rts	
0000F7E2                            ; End of function GotThroughAct
0000F7E2                            
0000F7E2                            ; ===========================================================================
0000F7E2 1388 1388 03E8 01F4 0190+  TimeBonuses:	dc.w 5000, 5000, 1000, 500, 400, 400, 300, 300,	200, 200
0000F7F6 00C8 00C8 0064 0064 0064+  		dc.w 200, 200, 100, 100, 100, 100, 50, 50, 50, 50, 0
0000F80C                            ; ===========================================================================
0000F80C                            
0000F80C                            locret_ED1A:				; XREF: Obj0D_Index
0000F80C 4E75                       		rts	
0000F80E                            ; ===========================================================================
0000F80E                            Ani_obj0D:
0000F80E                            	include "_anim\obj0D.asm"
0000F80E                            ; ---------------------------------------------------------------------------
0000F80E                            ; Animation script - signpost
0000F80E                            ; ---------------------------------------------------------------------------
0000F80E 0000                       		dc.w byte_ED24-Ani_obj0D
0000F810 0000                       		dc.w byte_ED28-Ani_obj0D
0000F812 0000                       		dc.w byte_ED2E-Ani_obj0D
0000F814 0000                       		dc.w byte_ED34-Ani_obj0D
0000F816 0F00 FF00                  byte_ED24:	dc.b $F, 0, $FF, 0
0000F81A 0100 0102 03FF             byte_ED28:	dc.b 1,	0, 1, 2, 3, $FF
0000F820 0104 0102 03FF             byte_ED2E:	dc.b 1,	4, 1, 2, 3, $FF
0000F826 0F04 FF                    byte_ED34:	dc.b $F, 4, $FF
0000F82A 00                         		even
0000F82A 00                         		even
0000F82A                            
0000F82A                            ; ---------------------------------------------------------------------------
0000F82A                            ; Sprite mappings - signpost
0000F82A                            ; ---------------------------------------------------------------------------
0000F82A                            Map_obj0D:
0000F82A                            	include "_maps\obj0D.asm"
0000F82A                            ; ---------------------------------------------------------------------------
0000F82A                            ; Sprite mappings - signpost
0000F82A                            ; ---------------------------------------------------------------------------
0000F82A 0000 0000                  		dc.w byte_ED42-Map_obj0D, byte_ED52-Map_obj0D
0000F82E 0000 0000                  		dc.w byte_ED5D-Map_obj0D, byte_ED68-Map_obj0D
0000F832 0000                       		dc.w byte_ED73-Map_obj0D
0000F834 03                         byte_ED42:	dc.b 3
0000F835 F00B 0000 E8               		dc.b $F0, $B, 0, 0, $E8
0000F83A F00B 0800 00               		dc.b $F0, $B, 8, 0, 0
0000F83F 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
0000F844 02                         byte_ED52:	dc.b 2
0000F845 F00F 000C F0               		dc.b $F0, $F, 0, $C, $F0
0000F84A 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
0000F84F 02                         byte_ED5D:	dc.b 2
0000F850 F003 001C FC               		dc.b $F0, 3, 0,	$1C, $FC
0000F855 1001 0838 FC               		dc.b $10, 1, 8,	$38, $FC
0000F85A 02                         byte_ED68:	dc.b 2
0000F85B F00F 080C F0               		dc.b $F0, $F, 8, $C, $F0
0000F860 1001 0838 FC               		dc.b $10, 1, 8,	$38, $FC
0000F865 03                         byte_ED73:	dc.b 3
0000F866 F00B 0020 E8               		dc.b $F0, $B, 0, $20, $E8
0000F86B F00B 002C 00               		dc.b $F0, $B, 0, $2C, 0
0000F870 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
0000F876 00                         		even
0000F876 00                         		even
0000F876                            
0000F876                            ; ===========================================================================
0000F876                            ; ---------------------------------------------------------------------------
0000F876                            ; Object 4C - lava geyser / lavafall producer (MZ)
0000F876                            ; ---------------------------------------------------------------------------
0000F876                            
0000F876                            Obj4C:					; XREF: Obj_Index
0000F876 7000                       		moveq	#0,d0
0000F878 1028 0024                  		move.b	$24(a0),d0
0000F87C 323B 0000                  		move.w	Obj4C_Index(pc,d0.w),d1
0000F880 4EBB 1000                  		jsr	Obj4C_Index(pc,d1.w)
0000F884 6000 0000                  		bra.w	Obj4D_ChkDel
0000F888                            ; ===========================================================================
0000F888 0000                       Obj4C_Index:	dc.w Obj4C_Main-Obj4C_Index
0000F88A 0000                       		dc.w loc_EDCC-Obj4C_Index
0000F88C 0000                       		dc.w loc_EE3E-Obj4C_Index
0000F88E 0000                       		dc.w Obj4C_MakeLava-Obj4C_Index
0000F890 0000                       		dc.w Obj4C_Display-Obj4C_Index
0000F892 0000                       		dc.w Obj4C_Delete-Obj4C_Index
0000F894                            ; ===========================================================================
0000F894                            
0000F894                            Obj4C_Main:				; XREF: Obj4C_Index
0000F894 5428 0024                  		addq.b	#2,$24(a0)
0000F898 217C 0000 0000 0004        		move.l	#Map_obj4C,4(a0)
0000F8A0 317C E3A8 0002             		move.w	#$E3A8,2(a0)
0000F8A6 117C 0004 0001             		move.b	#4,1(a0)
0000F8AC 117C 0001 0018             		move.b	#1,$18(a0)
0000F8B2 117C 0038 0019             		move.b	#$38,$19(a0)
0000F8B8 317C 0078 0034             		move.w	#120,$34(a0)	; set time delay to 2 seconds
0000F8BE                            
0000F8BE                            loc_EDCC:				; XREF: Obj4C_Index
0000F8BE 5368 0032                  		subq.w	#1,$32(a0)
0000F8C2 6A00                       		bpl.s	locret_EDF0
0000F8C4 3168 0034 0032             		move.w	$34(a0),$32(a0)
0000F8CA 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000F8CE 3228 000C                  		move.w	$C(a0),d1
0000F8D2 B041                       		cmp.w	d1,d0
0000F8D4 6400                       		bcc.s	locret_EDF0
0000F8D6 0441 0170                  		subi.w	#$170,d1
0000F8DA B041                       		cmp.w	d1,d0
0000F8DC 6500                       		bcs.s	locret_EDF0
0000F8DE 5428 0024                  		addq.b	#2,$24(a0)
0000F8E2                            
0000F8E2                            locret_EDF0:
0000F8E2 4E75                       		rts	
0000F8E4                            ; ===========================================================================
0000F8E4                            
0000F8E4                            Obj4C_MakeLava:				; XREF: Obj4C_Index
0000F8E4 5428 0024                  		addq.b	#2,$24(a0)
0000F8E8 6100 EC98                  		bsr.w	SingleObjLoad2
0000F8EC 6600                       		bne.s	loc_EE18
0000F8EE 12BC 004D                  		move.b	#$4D,0(a1)	; load lavafall	object
0000F8F2 3368 0008 0008             		move.w	8(a0),8(a1)
0000F8F8 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000F8FE 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000F904 2348 003C                  		move.l	a0,$3C(a1)
0000F908                            
0000F908                            loc_EE18:
0000F908 117C 0001 001C             		move.b	#1,$1C(a0)
0000F90E 4A28 0028                  		tst.b	$28(a0)		; is object type 00 (geyser) ?
0000F912 6700                       		beq.s	Obj4C_Type00	; if yes, branch
0000F914 117C 0004 001C             		move.b	#4,$1C(a0)
0000F91A 6000                       		bra.s	Obj4C_Display
0000F91C                            ; ===========================================================================
0000F91C                            
0000F91C                            Obj4C_Type00:				; XREF: Obj4C_MakeLava
0000F91C 2268 003C                  		movea.l	$3C(a0),a1	; load geyser object
0000F920 08E9 0001 0022             		bset	#1,$22(a1)
0000F926 337C FA80 0012             		move.w	#-$580,$12(a1)
0000F92C 6000                       		bra.s	Obj4C_Display
0000F92E                            ; ===========================================================================
0000F92E                            
0000F92E                            loc_EE3E:				; XREF: Obj4C_Index
0000F92E 4A28 0028                  		tst.b	$28(a0)		; is object type 00 (geyser) ?
0000F932 6700                       		beq.s	Obj4C_Display	; if yes, branch
0000F934 5428 0024                  		addq.b	#2,$24(a0)
0000F938 4E75                       		rts	
0000F93A                            ; ===========================================================================
0000F93A                            
0000F93A                            Obj4C_Display:				; XREF: Obj4C_Index
0000F93A 43F9 0000 0000             		lea	(Ani_obj4C).l,a1
0000F940 6100 B8AC                  		bsr.w	AnimateSprite
0000F944 6100 E790                  		bsr.w	DisplaySprite
0000F948 4E75                       		rts	
0000F94A                            ; ===========================================================================
0000F94A                            
0000F94A                            Obj4C_Delete:				; XREF: Obj4C_Index
0000F94A 117C 0000 001C             		move.b	#0,$1C(a0)
0000F950 117C 0002 0024             		move.b	#2,$24(a0)
0000F956 4A28 0028                  		tst.b	$28(a0)
0000F95A 6700 E7B6                  		beq.w	DeleteObject
0000F95E 4E75                       		rts	
0000F960                            ; ===========================================================================
0000F960                            ; ---------------------------------------------------------------------------
0000F960                            ; Object 4D - lava geyser / lavafall (MZ)
0000F960                            ; ---------------------------------------------------------------------------
0000F960                            
0000F960                            Obj4D:					; XREF: Obj_Index
0000F960 7000                       		moveq	#0,d0
0000F962 1028 0024                  		move.b	$24(a0),d0
0000F966 323B 0000                  		move.w	Obj4D_Index(pc,d0.w),d1
0000F96A 4EBB 1000                  		jsr	Obj4D_Index(pc,d1.w)
0000F96E 6000 E766                  		bra.w	DisplaySprite
0000F972                            ; ===========================================================================
0000F972 0000                       Obj4D_Index:	dc.w Obj4D_Main-Obj4D_Index
0000F974 0000                       		dc.w Obj4D_Action-Obj4D_Index
0000F976 0000                       		dc.w loc_EFFC-Obj4D_Index
0000F978 0000                       		dc.w Obj4D_Delete-Obj4D_Index
0000F97A                            
0000F97A FB00 0000                  Obj4D_Speeds:	dc.w $FB00, 0
0000F97E                            ; ===========================================================================
0000F97E                            
0000F97E                            Obj4D_Main:				; XREF: Obj4D_Index
0000F97E 5428 0024                  		addq.b	#2,$24(a0)
0000F982 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000F988 4A28 0028                  		tst.b	$28(a0)
0000F98C 6700                       		beq.s	loc_EEA4
0000F98E 0468 0250 000C             		subi.w	#$250,$C(a0)
0000F994                            
0000F994                            loc_EEA4:
0000F994 7000                       		moveq	#0,d0
0000F996 1028 0028                  		move.b	$28(a0),d0
0000F99A D040                       		add.w	d0,d0
0000F99C 317B 00DC 0012             		move.w	Obj4D_Speeds(pc,d0.w),$12(a0)
0000F9A2 2248                       		movea.l	a0,a1
0000F9A4 7201                       		moveq	#1,d1
0000F9A6 6100                       		bsr.s	Obj4D_MakeLava
0000F9A8 6000                       		bra.s	loc_EF10
0000F9AA                            ; ===========================================================================
0000F9AA                            
0000F9AA                            Obj4D_Loop:
0000F9AA 6100 EBD6                  		bsr.w	SingleObjLoad2
0000F9AE 6600                       		bne.s	loc_EF0A
0000F9B0                            
0000F9B0                            Obj4D_MakeLava:				; XREF: Obj4D_Main
0000F9B0 12BC 004D                  		move.b	#$4D,0(a1)
0000F9B4 237C 0000 0000 0004        		move.l	#Map_obj4C,4(a1)
0000F9BC 337C 63A8 0002             		move.w	#$63A8,2(a1)
0000F9C2 137C 0004 0001             		move.b	#4,1(a1)
0000F9C8 137C 0020 0019             		move.b	#$20,$19(a1)
0000F9CE 3368 0008 0008             		move.w	8(a0),8(a1)
0000F9D4 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000F9DA 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000F9E0 137C 0001 0018             		move.b	#1,$18(a1)
0000F9E6 137C 0005 001C             		move.b	#5,$1C(a1)
0000F9EC 4A28 0028                  		tst.b	$28(a0)
0000F9F0 6700                       		beq.s	loc_EF0A
0000F9F2 137C 0002 001C             		move.b	#2,$1C(a1)
0000F9F8                            
0000F9F8                            loc_EF0A:
0000F9F8 51C9 FFB0                  		dbf	d1,Obj4D_Loop
0000F9FC 4E75                       		rts	
0000F9FE                            ; ===========================================================================
0000F9FE                            
0000F9FE                            loc_EF10:				; XREF: Obj4D_Main
0000F9FE 0669 0060 000C             		addi.w	#$60,$C(a1)
0000FA04 3368 0030 0030             		move.w	$30(a0),$30(a1)
0000FA0A 0669 0060 0030             		addi.w	#$60,$30(a1)
0000FA10 137C 0093 0020             		move.b	#$93,$20(a1)
0000FA16 137C 0080 0016             		move.b	#$80,$16(a1)
0000FA1C 08E9 0004 0001             		bset	#4,1(a1)
0000FA22 5829 0024                  		addq.b	#4,$24(a1)
0000FA26 2348 003C                  		move.l	a0,$3C(a1)
0000FA2A 4A28 0028                  		tst.b	$28(a0)
0000FA2E 6700                       		beq.s	Obj4D_PlaySnd
0000FA30 7200                       		moveq	#0,d1
0000FA32 6100 FF76                  		bsr.w	Obj4D_Loop
0000FA36 5429 0024                  		addq.b	#2,$24(a1)
0000FA3A 08E9 0004 0002             		bset	#4,2(a1)
0000FA40 0669 0100 000C             		addi.w	#$100,$C(a1)
0000FA46 137C 0000 0018             		move.b	#0,$18(a1)
0000FA4C 3368 0030 0030             		move.w	$30(a0),$30(a1)
0000FA52 2368 003C 003C             		move.l	$3C(a0),$3C(a1)
0000FA58 117C 0000 0028             		move.b	#0,$28(a0)
0000FA5E                            
0000FA5E                            Obj4D_PlaySnd:
0000FA5E 303C 00C8                  		move.w	#$C8,d0
0000FA62 4EB9 0000 147C             		jsr	(PlaySound_Special).l ;	play flame sound
0000FA68                            
0000FA68                            Obj4D_Action:				; XREF: Obj4D_Index
0000FA68 7000                       		moveq	#0,d0
0000FA6A 1028 0028                  		move.b	$28(a0),d0
0000FA6E D040                       		add.w	d0,d0
0000FA70 323B 0000                  		move.w	Obj4D_TypeIndex(pc,d0.w),d1
0000FA74 4EBB 1000                  		jsr	Obj4D_TypeIndex(pc,d1.w)
0000FA78 6100 E636                  		bsr.w	SpeedToPos
0000FA7C 43F9 0000 0000             		lea	(Ani_obj4C).l,a1
0000FA82 6100 B76A                  		bsr.w	AnimateSprite
0000FA86                            
0000FA86                            Obj4D_ChkDel:				; XREF: Obj4C
0000FA86 3028 0008                  		move.w	8(a0),d0
0000FA8A 0240 FF80                  		andi.w	#$FF80,d0
0000FA8E 3238 F700                  		move.w	($FFFFF700).w,d1
0000FA92 0441 0080                  		subi.w	#$80,d1
0000FA96 0241 FF80                  		andi.w	#$FF80,d1
0000FA9A 9041                       		sub.w	d1,d0
0000FA9C 0C40 0280                  		cmpi.w	#$280,d0
0000FAA0 6200 E670                  		bhi.w	DeleteObject
0000FAA4 4E75                       		rts	
0000FAA6                            ; ===========================================================================
0000FAA6 0000                       Obj4D_TypeIndex:dc.w Obj4D_Type00-Obj4D_TypeIndex
0000FAA8 0000                       		dc.w Obj4D_Type01-Obj4D_TypeIndex
0000FAAA                            ; ===========================================================================
0000FAAA                            
0000FAAA                            Obj4D_Type00:				; XREF: Obj4D_TypeIndex
0000FAAA 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's falling speed
0000FAB0 3028 0030                  		move.w	$30(a0),d0
0000FAB4 B068 000C                  		cmp.w	$C(a0),d0
0000FAB8 6400                       		bcc.s	locret_EFDA
0000FABA 5828 0024                  		addq.b	#4,$24(a0)
0000FABE 2268 003C                  		movea.l	$3C(a0),a1
0000FAC2 137C 0003 001C             		move.b	#3,$1C(a1)
0000FAC8                            
0000FAC8                            locret_EFDA:
0000FAC8 4E75                       		rts	
0000FACA                            ; ===========================================================================
0000FACA                            
0000FACA                            Obj4D_Type01:				; XREF: Obj4D_TypeIndex
0000FACA 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's falling speed
0000FAD0 3028 0030                  		move.w	$30(a0),d0
0000FAD4 B068 000C                  		cmp.w	$C(a0),d0
0000FAD8 6400                       		bcc.s	locret_EFFA
0000FADA 5828 0024                  		addq.b	#4,$24(a0)
0000FADE 2268 003C                  		movea.l	$3C(a0),a1
0000FAE2 137C 0001 001C             		move.b	#1,$1C(a1)
0000FAE8                            
0000FAE8                            locret_EFFA:
0000FAE8 4E75                       		rts	
0000FAEA                            ; ===========================================================================
0000FAEA                            
0000FAEA                            loc_EFFC:				; XREF: Obj4D_Index
0000FAEA 2268 003C                  		movea.l	$3C(a0),a1
0000FAEE 0C29 0006 0024             		cmpi.b	#6,$24(a1)
0000FAF4 6700 0000                  		beq.w	Obj4D_Delete
0000FAF8 3029 000C                  		move.w	$C(a1),d0
0000FAFC 0640 0060                  		addi.w	#$60,d0
0000FB00 3140 000C                  		move.w	d0,$C(a0)
0000FB04 9068 0030                  		sub.w	$30(a0),d0
0000FB08 4440                       		neg.w	d0
0000FB0A 7208                       		moveq	#8,d1
0000FB0C 0C40 0040                  		cmpi.w	#$40,d0
0000FB10 6C00                       		bge.s	loc_F026
0000FB12 720B                       		moveq	#$B,d1
0000FB14                            
0000FB14                            loc_F026:
0000FB14 0C40 0080                  		cmpi.w	#$80,d0
0000FB18 6F00                       		ble.s	loc_F02E
0000FB1A 720E                       		moveq	#$E,d1
0000FB1C                            
0000FB1C                            loc_F02E:
0000FB1C 5328 001E                  		subq.b	#1,$1E(a0)
0000FB20 6A00                       		bpl.s	loc_F04C
0000FB22 117C 0007 001E             		move.b	#7,$1E(a0)
0000FB28 5228 001B                  		addq.b	#1,$1B(a0)
0000FB2C 0C28 0002 001B             		cmpi.b	#2,$1B(a0)
0000FB32 6500                       		bcs.s	loc_F04C
0000FB34 117C 0000 001B             		move.b	#0,$1B(a0)
0000FB3A                            
0000FB3A                            loc_F04C:
0000FB3A 1028 001B                  		move.b	$1B(a0),d0
0000FB3E D001                       		add.b	d1,d0
0000FB40 1140 001A                  		move.b	d0,$1A(a0)
0000FB44 6000 FF40                  		bra.w	Obj4D_ChkDel
0000FB48                            ; ===========================================================================
0000FB48                            
0000FB48                            Obj4D_Delete:				; XREF: Obj4D_Index
0000FB48 6000 E5C8                  		bra.w	DeleteObject
0000FB4C                            ; ===========================================================================
0000FB4C                            ; ---------------------------------------------------------------------------
0000FB4C                            ; Object 4E - advancing	wall of	lava (MZ)
0000FB4C                            ; ---------------------------------------------------------------------------
0000FB4C                            
0000FB4C                            Obj4E:					; XREF: Obj_Index
0000FB4C 7000                       		moveq	#0,d0
0000FB4E 1028 0024                  		move.b	$24(a0),d0
0000FB52 323B 0000                  		move.w	Obj4E_Index(pc,d0.w),d1
0000FB56 4EFB 1000                  		jmp	Obj4E_Index(pc,d1.w)
0000FB5A                            ; ===========================================================================
0000FB5A 0000                       Obj4E_Index:	dc.w Obj4E_Main-Obj4E_Index
0000FB5C 0000                       		dc.w Obj4E_Solid-Obj4E_Index
0000FB5E 0000                       		dc.w Obj4E_Action-Obj4E_Index
0000FB60 0000                       		dc.w Obj4E_Move2-Obj4E_Index
0000FB62 0000                       		dc.w Obj4E_Delete-Obj4E_Index
0000FB64                            ; ===========================================================================
0000FB64                            
0000FB64                            Obj4E_Main:				; XREF: Obj4E_Index
0000FB64 5828 0024                  		addq.b	#4,$24(a0)
0000FB68 2248                       		movea.l	a0,a1
0000FB6A 7201                       		moveq	#1,d1
0000FB6C 6000                       		bra.s	Obj4E_Main2
0000FB6E                            ; ===========================================================================
0000FB6E                            
0000FB6E                            Obj4E_Loop:
0000FB6E 6100 EA12                  		bsr.w	SingleObjLoad2
0000FB72 6600                       		bne.s	loc_F0C8
0000FB74                            
0000FB74                            Obj4E_Main2:				; XREF: Obj4E_Main
0000FB74 12BC 004E                  		move.b	#$4E,0(a1)	; load object
0000FB78 237C 0000 0000 0004        		move.l	#Map_obj4E,4(a1)
0000FB80 337C 63A8 0002             		move.w	#$63A8,2(a1)
0000FB86 137C 0004 0001             		move.b	#4,1(a1)
0000FB8C 137C 0050 0019             		move.b	#$50,$19(a1)
0000FB92 3368 0008 0008             		move.w	8(a0),8(a1)
0000FB98 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000FB9E 137C 0001 0018             		move.b	#1,$18(a1)
0000FBA4 137C 0000 001C             		move.b	#0,$1C(a1)
0000FBAA 137C 0094 0020             		move.b	#$94,$20(a1)
0000FBB0 2348 003C                  		move.l	a0,$3C(a1)
0000FBB4                            
0000FBB4                            loc_F0C8:
0000FBB4 51C9 FFB8                  		dbf	d1,Obj4E_Loop	; repeat sequence once
0000FBB8                            
0000FBB8 5C29 0024                  		addq.b	#6,$24(a1)
0000FBBC 137C 0004 001A             		move.b	#4,$1A(a1)
0000FBC2                            
0000FBC2                            Obj4E_Action:				; XREF: Obj4E_Index
0000FBC2 3038 D008                  		move.w	($FFFFD008).w,d0
0000FBC6 9068 0008                  		sub.w	8(a0),d0
0000FBCA 6400                       		bcc.s	Obj4E_ChkSonic
0000FBCC 4440                       		neg.w	d0
0000FBCE                            
0000FBCE                            Obj4E_ChkSonic:
0000FBCE 0C40 00C0                  		cmpi.w	#$C0,d0		; is Sonic within $C0 pixels (x-axis)?
0000FBD2 6400                       		bcc.s	Obj4E_Move	; if not, branch
0000FBD4 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000FBD8 9068 000C                  		sub.w	$C(a0),d0
0000FBDC 6400                       		bcc.s	loc_F0F4
0000FBDE 4440                       		neg.w	d0
0000FBE0                            
0000FBE0                            loc_F0F4:
0000FBE0 0C40 0060                  		cmpi.w	#$60,d0		; is Sonic within $60 pixels (y-axis)?
0000FBE4 6400                       		bcc.s	Obj4E_Move	; if not, branch
0000FBE6 117C 0001 0036             		move.b	#1,$36(a0)	; set object to	move
0000FBEC 6000                       		bra.s	Obj4E_Solid
0000FBEE                            ; ===========================================================================
0000FBEE                            
0000FBEE                            Obj4E_Move:				; XREF: Obj4E_ChkSonic
0000FBEE 4A28 0036                  		tst.b	$36(a0)		; is object set	to move?
0000FBF2 6700                       		beq.s	Obj4E_Solid	; if not, branch
0000FBF4 317C 0180 0010             		move.w	#$180,$10(a0)	; set object speed
0000FBFA 5528 0024                  		subq.b	#2,$24(a0)
0000FBFE                            
0000FBFE                            Obj4E_Solid:				; XREF: Obj4E_Index
0000FBFE 323C 002B                  		move.w	#$2B,d1
0000FC02 343C 0018                  		move.w	#$18,d2
0000FC06 3602                       		move.w	d2,d3
0000FC08 5243                       		addq.w	#1,d3
0000FC0A 3828 0008                  		move.w	8(a0),d4
0000FC0E 1028 0024                  		move.b	$24(a0),d0
0000FC12 3F00                       		move.w	d0,-(sp)
0000FC14 6100 0000                  		bsr.w	SolidObject
0000FC18 301F                       		move.w	(sp)+,d0
0000FC1A 1140 0024                  		move.b	d0,$24(a0)
0000FC1E 0C68 06A0 0008             		cmpi.w	#$6A0,8(a0)	; has object reached $6A0 on the x-axis?
0000FC24 6600                       		bne.s	Obj4E_Animate	; if not, branch
0000FC26 4268 0010                  		clr.w	$10(a0)		; stop object moving
0000FC2A 4228 0036                  		clr.b	$36(a0)
0000FC2E                            
0000FC2E                            Obj4E_Animate:
0000FC2E 43F9 0000 0000             		lea	(Ani_obj4E).l,a1
0000FC34 6100 B5B8                  		bsr.w	AnimateSprite
0000FC38 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
0000FC3E 6400                       		bcc.s	Obj4E_ChkDel
0000FC40 6100 E46E                  		bsr.w	SpeedToPos
0000FC44                            
0000FC44                            Obj4E_ChkDel:
0000FC44 6100 E490                  		bsr.w	DisplaySprite
0000FC48 4A28 0036                  		tst.b	$36(a0)
0000FC4C 6600                       		bne.s	locret_F17E
0000FC4E 3028 0008                  		move.w	8(a0),d0
0000FC52 0240 FF80                  		andi.w	#$FF80,d0
0000FC56 3238 F700                  		move.w	($FFFFF700).w,d1
0000FC5A 0441 0080                  		subi.w	#$80,d1
0000FC5E 0241 FF80                  		andi.w	#$FF80,d1
0000FC62 9041                       		sub.w	d1,d0
0000FC64 0C40 0280                  		cmpi.w	#$280,d0
0000FC68 6200                       		bhi.s	Obj4E_ChkGone
0000FC6A                            
0000FC6A                            locret_F17E:
0000FC6A 4E75                       		rts	
0000FC6C                            ; ===========================================================================
0000FC6C                            
0000FC6C                            Obj4E_ChkGone:				; XREF: Obj4E_ChkDel
0000FC6C 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000FC70 7000                       		moveq	#0,d0
0000FC72 1028 0023                  		move.b	$23(a0),d0
0000FC76 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000FC7C 117C 0008 0024             		move.b	#8,$24(a0)
0000FC82 4E75                       		rts	
0000FC84                            ; ===========================================================================
0000FC84                            
0000FC84                            Obj4E_Move2:				; XREF: Obj4E_Index
0000FC84 2268 003C                  		movea.l	$3C(a0),a1
0000FC88 0C29 0008 0024             		cmpi.b	#8,$24(a1)
0000FC8E 6700                       		beq.s	Obj4E_Delete
0000FC90 3169 0008 0008             		move.w	8(a1),8(a0)	; move rest of lava wall
0000FC96 0468 0080 0008             		subi.w	#$80,8(a0)
0000FC9C 6000 E438                  		bra.w	DisplaySprite
0000FCA0                            ; ===========================================================================
0000FCA0                            
0000FCA0                            Obj4E_Delete:				; XREF: Obj4E_Index
0000FCA0 6000 E470                  		bra.w	DeleteObject
0000FCA4                            ; ===========================================================================
0000FCA4                            ; ---------------------------------------------------------------------------
0000FCA4                            ; Object 54 - invisible	lava tag (MZ)
0000FCA4                            ; ---------------------------------------------------------------------------
0000FCA4                            
0000FCA4                            Obj54:					; XREF: Obj_Index
0000FCA4 7000                       		moveq	#0,d0
0000FCA6 1028 0024                  		move.b	$24(a0),d0
0000FCAA 323B 0000                  		move.w	Obj54_Index(pc,d0.w),d1
0000FCAE 4EFB 1000                  		jmp	Obj54_Index(pc,d1.w)
0000FCB2                            ; ===========================================================================
0000FCB2 0000                       Obj54_Index:	dc.w Obj54_Main-Obj54_Index
0000FCB4 0000                       		dc.w Obj54_ChkDel-Obj54_Index
0000FCB6                            
0000FCB6 9694 9500                  Obj54_Sizes:	dc.b $96, $94, $95, 0
0000FCBA                            ; ===========================================================================
0000FCBA                            
0000FCBA                            Obj54_Main:				; XREF: Obj54_Index
0000FCBA 5428 0024                  		addq.b	#2,$24(a0)
0000FCBE 7000                       		moveq	#0,d0
0000FCC0 1028 0028                  		move.b	$28(a0),d0
0000FCC4 117B 00F0 0020             		move.b	Obj54_Sizes(pc,d0.w),$20(a0)
0000FCCA 217C 0000 0000 0004        		move.l	#Map_obj54,4(a0)
0000FCD2 117C 0084 0001             		move.b	#$84,1(a0)
0000FCD8                            
0000FCD8                            Obj54_ChkDel:				; XREF: Obj54_Index
0000FCD8 3028 0008                  		move.w	8(a0),d0
0000FCDC 0240 FF80                  		andi.w	#$FF80,d0
0000FCE0 3238 F700                  		move.w	($FFFFF700).w,d1
0000FCE4 0441 0080                  		subi.w	#$80,d1
0000FCE8 0241 FF80                  		andi.w	#$FF80,d1
0000FCEC 9041                       		sub.w	d1,d0
0000FCEE 6B00 E422                  		bmi.w	DeleteObject
0000FCF2 0C40 0280                  		cmpi.w	#$280,d0
0000FCF6 6200 E41A                  		bhi.w	DeleteObject
0000FCFA 4E75                       		rts	
0000FCFC                            ; ===========================================================================
0000FCFC                            ; ---------------------------------------------------------------------------
0000FCFC                            ; Sprite mappings - invisible lava tag (MZ)
0000FCFC                            ; ---------------------------------------------------------------------------
0000FCFC                            Map_obj54:
0000FCFC                            	include "_maps\obj54.asm"
0000FCFC                            ; ---------------------------------------------------------------------------
0000FCFC                            ; Sprite mappings - invisible lava tag (MZ)
0000FCFC                            ; ---------------------------------------------------------------------------
0000FCFC 0000                       		dc.w byte_F212-Map_obj54
0000FCFE 00                         byte_F212:	dc.b 0			; no sprite, because the tag is invisible!
0000FD00 00                         		even
0000FD00 00                         		even
0000FD00                            
0000FD00                            Ani_obj4C:
0000FD00                            	include "_anim\obj4C.asm"
0000FD00                            ; ---------------------------------------------------------------------------
0000FD00                            ; Animation script - geyser of lava (MZ)
0000FD00                            ; ---------------------------------------------------------------------------
0000FD00 0000                       		dc.w byte_F220-Ani_obj4C
0000FD02 0000                       		dc.w byte_F22A-Ani_obj4C
0000FD04 0000                       		dc.w byte_F22E-Ani_obj4C
0000FD06 0000                       		dc.w byte_F232-Ani_obj4C
0000FD08 0000                       		dc.w byte_F23A-Ani_obj4C
0000FD0A 0000                       		dc.w byte_F23E-Ani_obj4C
0000FD0C 0200 0100 0104 0504 05FC   byte_F220:	dc.b 2,	0, 1, 0, 1, 4, 5, 4, 5,	$FC
0000FD16 0202 03FF                  byte_F22A:	dc.b 2,	2, 3, $FF
0000FD1A 0206 07FF                  byte_F22E:	dc.b 2,	6, 7, $FF
0000FD1E 0202 0300 0100 01FC        byte_F232:	dc.b 2,	2, 3, 0, 1, 0, 1, $FC
0000FD26 0F13 FF00                  byte_F23A:	dc.b $F, $13, $FF, 0
0000FD2A 0211 12FF                  byte_F23E:	dc.b 2,	$11, $12, $FF
0000FD2E                            		even
0000FD2E                            		even
0000FD2E                            
0000FD2E                            Ani_obj4E:
0000FD2E                            	include "_anim\obj4E.asm"
0000FD2E                            ; ---------------------------------------------------------------------------
0000FD2E                            ; Animation script - advancing wall of lava (MZ)
0000FD2E                            ; ---------------------------------------------------------------------------
0000FD2E 0000                       		dc.w byte_F244-Ani_obj4E
0000FD30 0900 0102 03FF             byte_F244:	dc.b 9,	0, 1, 2, 3, $FF
0000FD36                            		even
0000FD36                            		even
0000FD36                            
0000FD36                            ; ---------------------------------------------------------------------------
0000FD36                            ; Sprite mappings - lava geyser / lava that falls from the ceiling (MZ)
0000FD36                            ; ---------------------------------------------------------------------------
0000FD36                            Map_obj4C:
0000FD36                            	include "_maps\obj4C.asm"
0000FD36                            ; ---------------------------------------------------------------------------
0000FD36                            ; Sprite mappings - lava geyser / lava that falls from the ceiling (MZ)
0000FD36                            ; ---------------------------------------------------------------------------
0000FD36 0000 0000                  		dc.w byte_F272-Map_obj4C, byte_F27D-Map_obj4C
0000FD3A 0000 0000                  		dc.w byte_F288-Map_obj4C, byte_F29D-Map_obj4C
0000FD3E 0000 0000                  		dc.w byte_F2B2-Map_obj4C, byte_F2D1-Map_obj4C
0000FD42 0000 0000                  		dc.w byte_F2F0-Map_obj4C, byte_F2FB-Map_obj4C
0000FD46 0000 0000                  		dc.w byte_F306-Map_obj4C, byte_F339-Map_obj4C
0000FD4A 0000 0000                  		dc.w byte_F36C-Map_obj4C, byte_F39F-Map_obj4C
0000FD4E 0000 0000                  		dc.w byte_F3BE-Map_obj4C, byte_F3DD-Map_obj4C
0000FD52 0000 0000                  		dc.w byte_F3FC-Map_obj4C, byte_F44D-Map_obj4C
0000FD56 0000 0000                  		dc.w byte_F49E-Map_obj4C, byte_F4EF-Map_obj4C
0000FD5A 0000 0000                  		dc.w byte_F50E-Map_obj4C, byte_F52D-Map_obj4C
0000FD5E 02                         byte_F272:	dc.b 2
0000FD5F EC0B 0000 E8               		dc.b $EC, $B, 0, 0, $E8
0000FD64 EC0B 0800 00               		dc.b $EC, $B, 8, 0, 0
0000FD69 02                         byte_F27D:	dc.b 2
0000FD6A EC0B 0018 E8               		dc.b $EC, $B, 0, $18, $E8
0000FD6F EC0B 0818 00               		dc.b $EC, $B, 8, $18, 0
0000FD74 04                         byte_F288:	dc.b 4
0000FD75 EC0B 0000 C8               		dc.b $EC, $B, 0, 0, $C8
0000FD7A F40E 000C E0               		dc.b $F4, $E, 0, $C, $E0
0000FD7F F40E 080C 00               		dc.b $F4, $E, 8, $C, 0
0000FD84 EC0B 0800 20               		dc.b $EC, $B, 8, 0, $20
0000FD89 04                         byte_F29D:	dc.b 4
0000FD8A EC0B 0018 C8               		dc.b $EC, $B, 0, $18, $C8
0000FD8F F40E 0024 E0               		dc.b $F4, $E, 0, $24, $E0
0000FD94 F40E 0824 00               		dc.b $F4, $E, 8, $24, 0
0000FD99 EC0B 0818 20               		dc.b $EC, $B, 8, $18, $20
0000FD9E 06                         byte_F2B2:	dc.b 6
0000FD9F EC0B 0000 C8               		dc.b $EC, $B, 0, 0, $C8
0000FDA4 F40E 000C E0               		dc.b $F4, $E, 0, $C, $E0
0000FDA9 F40E 080C 00               		dc.b $F4, $E, 8, $C, 0
0000FDAE EC0B 0800 20               		dc.b $EC, $B, 8, 0, $20
0000FDB3 E80E 0090 E0               		dc.b $E8, $E, 0, $90, $E0
0000FDB8 E80E 0890 00               		dc.b $E8, $E, 8, $90, 0
0000FDBD 06                         byte_F2D1:	dc.b 6
0000FDBE EC0B 0018 C8               		dc.b $EC, $B, 0, $18, $C8
0000FDC3 F40E 0024 E0               		dc.b $F4, $E, 0, $24, $E0
0000FDC8 F40E 0824 00               		dc.b $F4, $E, 8, $24, 0
0000FDCD EC0B 0818 20               		dc.b $EC, $B, 8, $18, $20
0000FDD2 E80E 0890 E0               		dc.b $E8, $E, 8, $90, $E0
0000FDD7 E80E 0090 00               		dc.b $E8, $E, 0, $90, 0
0000FDDC 02                         byte_F2F0:	dc.b 2
0000FDDD E00F 0030 E0               		dc.b $E0, $F, 0, $30, $E0
0000FDE2 E00F 0830 00               		dc.b $E0, $F, 8, $30, 0
0000FDE7 02                         byte_F2FB:	dc.b 2
0000FDE8 E00F 0830 E0               		dc.b $E0, $F, 8, $30, $E0
0000FDED E00F 0030 00               		dc.b $E0, $F, 0, $30, 0
0000FDF2 0A                         byte_F306:	dc.b $A
0000FDF3 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
0000FDF8 900F 0840 00               		dc.b $90, $F, 8, $40, 0
0000FDFD B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
0000FE02 B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
0000FE07 D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
0000FE0C D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
0000FE11 F00F 0040 E0               		dc.b $F0, $F, 0, $40, $E0
0000FE16 F00F 0840 00               		dc.b $F0, $F, 8, $40, 0
0000FE1B 100F 0040 E0               		dc.b $10, $F, 0, $40, $E0
0000FE20 100F 0840 00               		dc.b $10, $F, 8, $40, 0
0000FE25 0A                         byte_F339:	dc.b $A
0000FE26 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
0000FE2B 900F 0850 00               		dc.b $90, $F, 8, $50, 0
0000FE30 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
0000FE35 B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
0000FE3A D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
0000FE3F D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
0000FE44 F00F 0050 E0               		dc.b $F0, $F, 0, $50, $E0
0000FE49 F00F 0850 00               		dc.b $F0, $F, 8, $50, 0
0000FE4E 100F 0050 E0               		dc.b $10, $F, 0, $50, $E0
0000FE53 100F 0850 00               		dc.b $10, $F, 8, $50, 0
0000FE58 0A                         byte_F36C:	dc.b $A
0000FE59 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
0000FE5E 900F 0860 00               		dc.b $90, $F, 8, $60, 0
0000FE63 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
0000FE68 B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
0000FE6D D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
0000FE72 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
0000FE77 F00F 0060 E0               		dc.b $F0, $F, 0, $60, $E0
0000FE7C F00F 0860 00               		dc.b $F0, $F, 8, $60, 0
0000FE81 100F 0060 E0               		dc.b $10, $F, 0, $60, $E0
0000FE86 100F 0860 00               		dc.b $10, $F, 8, $60, 0
0000FE8B 06                         byte_F39F:	dc.b 6
0000FE8C 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
0000FE91 900F 0840 00               		dc.b $90, $F, 8, $40, 0
0000FE96 B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
0000FE9B B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
0000FEA0 D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
0000FEA5 D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
0000FEAA 06                         byte_F3BE:	dc.b 6
0000FEAB 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
0000FEB0 900F 0850 00               		dc.b $90, $F, 8, $50, 0
0000FEB5 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
0000FEBA B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
0000FEBF D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
0000FEC4 D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
0000FEC9 06                         byte_F3DD:	dc.b 6
0000FECA 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
0000FECF 900F 0860 00               		dc.b $90, $F, 8, $60, 0
0000FED4 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
0000FED9 B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
0000FEDE D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
0000FEE3 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
0000FEE8 10                         byte_F3FC:	dc.b $10
0000FEE9 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
0000FEEE 900F 0840 00               		dc.b $90, $F, 8, $40, 0
0000FEF3 B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
0000FEF8 B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
0000FEFD D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
0000FF02 D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
0000FF07 F00F 0040 E0               		dc.b $F0, $F, 0, $40, $E0
0000FF0C F00F 0840 00               		dc.b $F0, $F, 8, $40, 0
0000FF11 100F 0040 E0               		dc.b $10, $F, 0, $40, $E0
0000FF16 100F 0840 00               		dc.b $10, $F, 8, $40, 0
0000FF1B 300F 0040 E0               		dc.b $30, $F, 0, $40, $E0
0000FF20 300F 0840 00               		dc.b $30, $F, 8, $40, 0
0000FF25 500F 0040 E0               		dc.b $50, $F, 0, $40, $E0
0000FF2A 500F 0840 00               		dc.b $50, $F, 8, $40, 0
0000FF2F 700F 0040 E0               		dc.b $70, $F, 0, $40, $E0
0000FF34 700F 0840 00               		dc.b $70, $F, 8, $40, 0
0000FF39 10                         byte_F44D:	dc.b $10
0000FF3A 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
0000FF3F 900F 0850 00               		dc.b $90, $F, 8, $50, 0
0000FF44 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
0000FF49 B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
0000FF4E D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
0000FF53 D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
0000FF58 F00F 0050 E0               		dc.b $F0, $F, 0, $50, $E0
0000FF5D F00F 0850 00               		dc.b $F0, $F, 8, $50, 0
0000FF62 100F 0050 E0               		dc.b $10, $F, 0, $50, $E0
0000FF67 100F 0850 00               		dc.b $10, $F, 8, $50, 0
0000FF6C 300F 0050 E0               		dc.b $30, $F, 0, $50, $E0
0000FF71 300F 0850 00               		dc.b $30, $F, 8, $50, 0
0000FF76 500F 0050 E0               		dc.b $50, $F, 0, $50, $E0
0000FF7B 500F 0850 00               		dc.b $50, $F, 8, $50, 0
0000FF80 700F 0050 E0               		dc.b $70, $F, 0, $50, $E0
0000FF85 700F 0850 00               		dc.b $70, $F, 8, $50, 0
0000FF8A 10                         byte_F49E:	dc.b $10
0000FF8B 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
0000FF90 900F 0860 00               		dc.b $90, $F, 8, $60, 0
0000FF95 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
0000FF9A B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
0000FF9F D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
0000FFA4 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
0000FFA9 F00F 0060 E0               		dc.b $F0, $F, 0, $60, $E0
0000FFAE F00F 0860 00               		dc.b $F0, $F, 8, $60, 0
0000FFB3 100F 0060 E0               		dc.b $10, $F, 0, $60, $E0
0000FFB8 100F 0860 00               		dc.b $10, $F, 8, $60, 0
0000FFBD 300F 0060 E0               		dc.b $30, $F, 0, $60, $E0
0000FFC2 300F 0860 00               		dc.b $30, $F, 8, $60, 0
0000FFC7 500F 0060 E0               		dc.b $50, $F, 0, $60, $E0
0000FFCC 500F 0860 00               		dc.b $50, $F, 8, $60, 0
0000FFD1 700F 0060 E0               		dc.b $70, $F, 0, $60, $E0
0000FFD6 700F 0860 00               		dc.b $70, $F, 8, $60, 0
0000FFDB 06                         byte_F4EF:	dc.b 6
0000FFDC E00B 0000 C8               		dc.b $E0, $B, 0, 0, $C8
0000FFE1 E80E 000C E0               		dc.b $E8, $E, 0, $C, $E0
0000FFE6 E80E 080C 00               		dc.b $E8, $E, 8, $C, 0
0000FFEB E00B 0800 20               		dc.b $E0, $B, 8, 0, $20
0000FFF0 D80E 0090 E0               		dc.b $D8, $E, 0, $90, $E0
0000FFF5 D80E 0890 00               		dc.b $D8, $E, 8, $90, 0
0000FFFA 06                         byte_F50E:	dc.b 6
0000FFFB E00B 0018 C8               		dc.b $E0, $B, 0, $18, $C8
00010000 E80E 0024 E0               		dc.b $E8, $E, 0, $24, $E0
00010005 E80E 0824 00               		dc.b $E8, $E, 8, $24, 0
0001000A E00B 0818 20               		dc.b $E0, $B, 8, $18, $20
0001000F D80E 0890 E0               		dc.b $D8, $E, 8, $90, $E0
00010014 D80E 0090 00               		dc.b $D8, $E, 0, $90, 0
00010019 00                         byte_F52D:	dc.b 0
0001001A                            		even
0001001A                            		even
0001001A                            
0001001A                            ; ---------------------------------------------------------------------------
0001001A                            ; Sprite mappings - advancing wall of lava (MZ)
0001001A                            ; ---------------------------------------------------------------------------
0001001A                            Map_obj4E:
0001001A                            	include "_maps\obj4E.asm"
0001001A                            ; ---------------------------------------------------------------------------
0001001A                            ; Sprite mappings - advancing wall of lava (MZ)
0001001A                            ; ---------------------------------------------------------------------------
0001001A 0000                       		dc.w byte_F538-Map_obj4E
0001001C 0000                       		dc.w byte_F566-Map_obj4E
0001001E 0000                       		dc.w byte_F594-Map_obj4E
00010020 0000                       		dc.w byte_F5C2-Map_obj4E
00010022 0000                       		dc.w byte_F5F0-Map_obj4E
00010024 09                         byte_F538:	dc.b 9
00010025 E00F 0060 20               		dc.b $E0, $F, 0, $60, $20
0001002A 000F 0070 3C               		dc.b 0,	$F, 0, $70, $3C
0001002F 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
00010034 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
00010039 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0001003E E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
00010043 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
00010048 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0001004D 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
00010052 09                         byte_F566:	dc.b 9
00010053 E00F 0070 20               		dc.b $E0, $F, 0, $70, $20
00010058 000F 0080 3C               		dc.b 0,	$F, 0, $80, $3C
0001005D 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
00010062 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
00010067 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0001006C E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
00010071 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
00010076 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0001007B 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
00010080 09                         byte_F594:	dc.b 9
00010081 E00F 0080 20               		dc.b $E0, $F, 0, $80, $20
00010086 000F 0070 3C               		dc.b 0,	$F, 0, $70, $3C
0001008B 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
00010090 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
00010095 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0001009A E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0001009F 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
000100A4 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
000100A9 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
000100AE 09                         byte_F5C2:	dc.b 9
000100AF E00F 0070 20               		dc.b $E0, $F, 0, $70, $20
000100B4 000F 0060 3C               		dc.b 0,	$F, 0, $60, $3C
000100B9 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
000100BE E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
000100C3 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
000100C8 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
000100CD 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
000100D2 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
000100D7 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
000100DC 08                         byte_F5F0:	dc.b 8
000100DD E00F FF2A 20               		dc.b $E0, $F, $FF, $2A,	$20
000100E2 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
000100E7 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
000100EC 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
000100F1 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
000100F6 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
000100FB E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
00010100 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
00010106 00                         		even
00010106 00                         		even
00010106                            
00010106                            ; ===========================================================================
00010106                            ; ---------------------------------------------------------------------------
00010106                            ; Object 40 - Moto Bug enemy (GHZ)
00010106                            ; ---------------------------------------------------------------------------
00010106                            
00010106                            Obj40:					; XREF: Obj_Index
00010106 7000                       		moveq	#0,d0
00010108 1028 0024                  		move.b	$24(a0),d0
0001010C 323B 0000                  		move.w	Obj40_Index(pc,d0.w),d1
00010110 4EFB 1000                  		jmp	Obj40_Index(pc,d1.w)
00010114                            ; ===========================================================================
00010114 0000                       Obj40_Index:	dc.w Obj40_Main-Obj40_Index
00010116 0000                       		dc.w Obj40_Action-Obj40_Index
00010118 0000                       		dc.w Obj40_Animate-Obj40_Index
0001011A 0000                       		dc.w Obj40_Delete-Obj40_Index
0001011C                            ; ===========================================================================
0001011C                            
0001011C                            Obj40_Main:				; XREF: Obj40_Index
0001011C 217C 0000 0000 0004        		move.l	#Map_obj40,4(a0)
00010124 317C 04F0 0002             		move.w	#$4F0,2(a0)
0001012A 117C 0004 0001             		move.b	#4,1(a0)
00010130 117C 0004 0018             		move.b	#4,$18(a0)
00010136 117C 0014 0019             		move.b	#$14,$19(a0)
0001013C 4A28 001C                  		tst.b	$1C(a0)		; is object a smoke trail?
00010140 6600                       		bne.s	Obj40_SetSmoke	; if yes, branch
00010142 117C 000E 0016             		move.b	#$E,$16(a0)
00010148 117C 0008 0017             		move.b	#8,$17(a0)
0001014E 117C 000C 0020             		move.b	#$C,$20(a0)
00010154 6100 DF2E                  		bsr.w	ObjectFall
00010158 4EB9 0000 0000             		jsr	ObjHitFloor
0001015E 4A41                       		tst.w	d1
00010160 6A00                       		bpl.s	locret_F68A
00010162 D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
00010166 317C 0000 0012             		move.w	#0,$12(a0)
0001016C 5428 0024                  		addq.b	#2,$24(a0)
00010170 0868 0000 0022             		bchg	#0,$22(a0)
00010176                            
00010176                            locret_F68A:
00010176 4E75                       		rts	
00010178                            ; ===========================================================================
00010178                            
00010178                            Obj40_SetSmoke:				; XREF: Obj40_Main
00010178 5828 0024                  		addq.b	#4,$24(a0)
0001017C 6000 0000                  		bra.w	Obj40_Animate
00010180                            ; ===========================================================================
00010180                            
00010180                            Obj40_Action:				; XREF: Obj40_Index
00010180 7000                       		moveq	#0,d0
00010182 1028 0025                  		move.b	$25(a0),d0
00010186 323B 0000                  		move.w	Obj40_Index2(pc,d0.w),d1
0001018A 4EBB 1000                  		jsr	Obj40_Index2(pc,d1.w)
0001018E 43F9 0000 0000             		lea	(Ani_obj40).l,a1
00010194 6100 B058                  		bsr.w	AnimateSprite
00010198                            
00010198                            ; ---------------------------------------------------------------------------
00010198                            ; Routine to mark an enemy/monitor/ring	as destroyed
00010198                            ; ---------------------------------------------------------------------------
00010198                            
00010198                            MarkObjGone:
00010198 3028 0008                  		move.w	8(a0),d0
0001019C 0240 FF80                  		andi.w	#$FF80,d0
000101A0 3238 F700                  		move.w	($FFFFF700).w,d1
000101A4 0441 0080                  		subi.w	#$80,d1
000101A8 0241 FF80                  		andi.w	#$FF80,d1
000101AC 9041                       		sub.w	d1,d0
000101AE 0C40 0280                  		cmpi.w	#$280,d0
000101B2 6200 0000                  		bhi.w	Mark_ChkGone
000101B6 6000 DF1E                  		bra.w	DisplaySprite
000101BA                            ; ===========================================================================
000101BA                            
000101BA                            Mark_ChkGone:
000101BA 45F8 FC00                  		lea	($FFFFFC00).w,a2
000101BE 7000                       		moveq	#0,d0
000101C0 1028 0023                  		move.b	$23(a0),d0
000101C4 6700                       		beq.s	Mark_Delete
000101C6 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
000101CC                            
000101CC                            Mark_Delete:
000101CC 6000 DF44                  		bra.w	DeleteObject
000101D0                            
000101D0                            ; ===========================================================================
000101D0 0000                       Obj40_Index2:	dc.w Obj40_Move-Obj40_Index2
000101D2 0000                       		dc.w Obj40_FixToFloor-Obj40_Index2
000101D4                            ; ===========================================================================
000101D4                            
000101D4                            Obj40_Move:				; XREF: Obj40_Index2
000101D4 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from pause	time
000101D8 6A00                       		bpl.s	locret_F70A	; if time remains, branch
000101DA 5428 0025                  		addq.b	#2,$25(a0)
000101DE 317C FF00 0010             		move.w	#-$100,$10(a0)	; move object to the left
000101E4 117C 0001 001C             		move.b	#1,$1C(a0)
000101EA 0868 0000 0022             		bchg	#0,$22(a0)
000101F0 6600                       		bne.s	locret_F70A
000101F2 4468 0010                  		neg.w	$10(a0)		; change direction
000101F6                            
000101F6                            locret_F70A:
000101F6 4E75                       		rts	
000101F8                            ; ===========================================================================
000101F8                            
000101F8                            Obj40_FixToFloor:			; XREF: Obj40_Index2
000101F8 6100 DEB6                  		bsr.w	SpeedToPos
000101FC 4EB9 0000 0000             		jsr	ObjHitFloor
00010202 0C41 FFF8                  		cmpi.w	#-8,d1
00010206 6D00                       		blt.s	Obj40_Pause
00010208 0C41 000C                  		cmpi.w	#$C,d1
0001020C 6C00                       		bge.s	Obj40_Pause
0001020E D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
00010212 5328 0033                  		subq.b	#1,$33(a0)
00010216 6A00                       		bpl.s	locret_F756
00010218 117C 000F 0033             		move.b	#$F,$33(a0)
0001021E 6100 E34C                  		bsr.w	SingleObjLoad
00010222 6600                       		bne.s	locret_F756
00010224 12BC 0040                  		move.b	#$40,0(a1)	; load exhaust smoke object
00010228 3368 0008 0008             		move.w	8(a0),8(a1)
0001022E 3368 000C 000C             		move.w	$C(a0),$C(a1)
00010234 1368 0022 0022             		move.b	$22(a0),$22(a1)
0001023A 137C 0002 001C             		move.b	#2,$1C(a1)
00010240                            
00010240                            locret_F756:
00010240 4E75                       		rts	
00010242                            ; ===========================================================================
00010242                            
00010242                            Obj40_Pause:				; XREF: Obj40_FixToFloor
00010242 5528 0025                  		subq.b	#2,$25(a0)
00010246 317C 003B 0030             		move.w	#59,$30(a0)	; set pause time to 1 second
0001024C 317C 0000 0010             		move.w	#0,$10(a0)	; stop the object moving
00010252 117C 0000 001C             		move.b	#0,$1C(a0)
00010258 4E75                       		rts	
0001025A                            ; ===========================================================================
0001025A                            
0001025A                            Obj40_Animate:				; XREF: Obj40_Index
0001025A 43F9 0000 0000             		lea	(Ani_obj40).l,a1
00010260 6100 AF8C                  		bsr.w	AnimateSprite
00010264 6000 DE70                  		bra.w	DisplaySprite
00010268                            ; ===========================================================================
00010268                            
00010268                            Obj40_Delete:				; XREF: Obj40_Index
00010268 6000 DEA8                  		bra.w	DeleteObject
0001026C                            ; ===========================================================================
0001026C                            Ani_obj40:
0001026C                            	include "_anim\obj40.asm"
0001026C                            ; ---------------------------------------------------------------------------
0001026C                            ; Animation script - Motobug enemy
0001026C                            ; ---------------------------------------------------------------------------
0001026C 0000                       		dc.w byte_F788-Ani_obj40
0001026E 0000                       		dc.w byte_F78C-Ani_obj40
00010270 0000                       		dc.w byte_F792-Ani_obj40
00010272 0F02 FF00                  byte_F788:	dc.b $F, 2, $FF, 0
00010276 0700 0100 02FF             byte_F78C:	dc.b 7,	0, 1, 0, 2, $FF
0001027C 0103 0603 0604 0604 0604+  byte_F792:	dc.b 1,	3, 6, 3, 6, 4, 6, 4, 6,	4, 6, 5, $FC, 0
0001028A                            		even
0001028A                            		even
0001028A                            
0001028A                            ; ---------------------------------------------------------------------------
0001028A                            ; Sprite mappings - Moto Bug enemy (GHZ)
0001028A                            ; ---------------------------------------------------------------------------
0001028A                            Map_obj40:
0001028A                            	include "_maps\obj40.asm"
0001028A                            ; ---------------------------------------------------------------------------
0001028A                            ; Sprite mappings - Moto Bug enemy (GHZ)
0001028A                            ; ---------------------------------------------------------------------------
0001028A 0000 0000                  		dc.w byte_F7AE-Map_obj40, byte_F7C3-Map_obj40
0001028E 0000 0000                  		dc.w byte_F7D8-Map_obj40, byte_F7F2-Map_obj40
00010292 0000 0000                  		dc.w byte_F7F8-Map_obj40, byte_F7FE-Map_obj40
00010296 0000                       		dc.w byte_F804-Map_obj40
00010298 04                         byte_F7AE:	dc.b 4
00010299 F00D 0000 EC               		dc.b $F0, $D, 0, 0, $EC
0001029E 000C 0008 EC               		dc.b 0,	$C, 0, 8, $EC
000102A3 F801 000C 0C               		dc.b $F8, 1, 0,	$C, $C
000102A8 0808 000E F4               		dc.b 8,	8, 0, $E, $F4
000102AD 04                         byte_F7C3:	dc.b 4
000102AE F10D 0000 EC               		dc.b $F1, $D, 0, 0, $EC
000102B3 010C 0008 EC               		dc.b 1,	$C, 0, 8, $EC
000102B8 F901 000C 0C               		dc.b $F9, 1, 0,	$C, $C
000102BD 0908 0011 F4               		dc.b 9,	8, 0, $11, $F4
000102C2 05                         byte_F7D8:	dc.b 5
000102C3 F00D 0000 EC               		dc.b $F0, $D, 0, 0, $EC
000102C8 000C 0014 EC               		dc.b 0,	$C, 0, $14, $EC
000102CD F801 000C 0C               		dc.b $F8, 1, 0,	$C, $C
000102D2 0804 0018 EC               		dc.b 8,	4, 0, $18, $EC
000102D7 0804 0012 FC               		dc.b 8,	4, 0, $12, $FC
000102DC 01                         byte_F7F2:	dc.b 1
000102DD FA00 001A 10               		dc.b $FA, 0, 0,	$1A, $10
000102E2 01                         byte_F7F8:	dc.b 1
000102E3 FA00 001B 10               		dc.b $FA, 0, 0,	$1B, $10
000102E8 01                         byte_F7FE:	dc.b 1
000102E9 FA00 001C 10               		dc.b $FA, 0, 0,	$1C, $10
000102EE 00                         byte_F804:	dc.b 0
000102F0 00                         		even
000102F0 00                         		even
000102F0                            
000102F0                            ; ===========================================================================
000102F0                            ; ---------------------------------------------------------------------------
000102F0                            ; Object 4F - blank
000102F0                            ; ---------------------------------------------------------------------------
000102F0                            
000102F0                            Obj4F:					; XREF: Obj_Index
000102F0 4E75                       		rts	
000102F2                            
000102F2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000102F2                            
000102F2                            
000102F2                            Obj50_ChkWall:				; XREF: Obj50_FixToFloor
000102F2 3038 FE04                  		move.w	($FFFFFE04).w,d0
000102F6 D047                       		add.w	d7,d0
000102F8 0240 0003                  		andi.w	#3,d0
000102FC 6600                       		bne.s	loc_F836
000102FE 7600                       		moveq	#0,d3
00010300 1628 0019                  		move.b	$19(a0),d3
00010304 4A68 0010                  		tst.w	$10(a0)
00010308 6B00                       		bmi.s	loc_F82C
0001030A 6100 0000                  		bsr.w	ObjHitWallRight
0001030E 4A41                       		tst.w	d1
00010310 6A00                       		bpl.s	loc_F836
00010312                            
00010312                            loc_F828:
00010312 7001                       		moveq	#1,d0
00010314 4E75                       		rts	
00010316                            ; ===========================================================================
00010316                            
00010316                            loc_F82C:
00010316 4643                       		not.w	d3
00010318 6100 0000                  		bsr.w	ObjHitWallLeft
0001031C 4A41                       		tst.w	d1
0001031E 6BF2                       		bmi.s	loc_F828
00010320                            
00010320                            loc_F836:
00010320 7000                       		moveq	#0,d0
00010322 4E75                       		rts	
00010324                            ; End of function Obj50_ChkWall
00010324                            
00010324                            ; ===========================================================================
00010324                            ; ---------------------------------------------------------------------------
00010324                            ; Object 50 - Yadrin enemy (SYZ)
00010324                            ; ---------------------------------------------------------------------------
00010324                            
00010324                            Obj50:					; XREF: Obj_Index
00010324 7000                       		moveq	#0,d0
00010326 1028 0024                  		move.b	$24(a0),d0
0001032A 323B 0000                  		move.w	Obj50_Index(pc,d0.w),d1
0001032E 4EFB 1000                  		jmp	Obj50_Index(pc,d1.w)
00010332                            ; ===========================================================================
00010332 0000                       Obj50_Index:	dc.w Obj50_Main-Obj50_Index
00010334 0000                       		dc.w Obj50_Action-Obj50_Index
00010336                            ; ===========================================================================
00010336                            
00010336                            Obj50_Main:				; XREF: Obj50_Index
00010336 217C 0000 0000 0004        		move.l	#Map_obj50,4(a0)
0001033E 317C 247B 0002             		move.w	#$247B,2(a0)
00010344 117C 0004 0001             		move.b	#4,1(a0)
0001034A 117C 0004 0018             		move.b	#4,$18(a0)
00010350 117C 0014 0019             		move.b	#$14,$19(a0)
00010356 117C 0011 0016             		move.b	#$11,$16(a0)
0001035C 117C 0008 0017             		move.b	#8,$17(a0)
00010362 117C 00CC 0020             		move.b	#$CC,$20(a0)
00010368 6100 DD1A                  		bsr.w	ObjectFall
0001036C 6100 0000                  		bsr.w	ObjHitFloor
00010370 4A41                       		tst.w	d1
00010372 6A00                       		bpl.s	locret_F89E
00010374 D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
00010378 317C 0000 0012             		move.w	#0,$12(a0)
0001037E 5428 0024                  		addq.b	#2,$24(a0)
00010382 0868 0000 0022             		bchg	#0,$22(a0)
00010388                            
00010388                            locret_F89E:
00010388 4E75                       		rts	
0001038A                            ; ===========================================================================
0001038A                            
0001038A                            Obj50_Action:				; XREF: Obj50_Index
0001038A 7000                       		moveq	#0,d0
0001038C 1028 0025                  		move.b	$25(a0),d0
00010390 323B 0000                  		move.w	Obj50_Index2(pc,d0.w),d1
00010394 4EBB 1000                  		jsr	Obj50_Index2(pc,d1.w)
00010398 43F9 0000 0000             		lea	(Ani_obj50).l,a1
0001039E 6100 AE4E                  		bsr.w	AnimateSprite
000103A2 6000 FDF4                  		bra.w	MarkObjGone
000103A6                            ; ===========================================================================
000103A6 0000                       Obj50_Index2:	dc.w Obj50_Move-Obj50_Index2
000103A8 0000                       		dc.w Obj50_FixToFloor-Obj50_Index2
000103AA                            ; ===========================================================================
000103AA                            
000103AA                            Obj50_Move:				; XREF: Obj50_Index2
000103AA 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from pause	time
000103AE 6A00                       		bpl.s	locret_F8E2	; if time remains, branch
000103B0 5428 0025                  		addq.b	#2,$25(a0)
000103B4 317C FF00 0010             		move.w	#-$100,$10(a0)	; move object
000103BA 117C 0001 001C             		move.b	#1,$1C(a0)
000103C0 0868 0000 0022             		bchg	#0,$22(a0)
000103C6 6600                       		bne.s	locret_F8E2
000103C8 4468 0010                  		neg.w	$10(a0)		; change direction
000103CC                            
000103CC                            locret_F8E2:
000103CC 4E75                       		rts	
000103CE                            ; ===========================================================================
000103CE                            
000103CE                            Obj50_FixToFloor:			; XREF: Obj50_Index2
000103CE 6100 DCE0                  		bsr.w	SpeedToPos
000103D2 6100 0000                  		bsr.w	ObjHitFloor
000103D6 0C41 FFF8                  		cmpi.w	#-8,d1
000103DA 6D00                       		blt.s	Obj50_Pause
000103DC 0C41 000C                  		cmpi.w	#$C,d1
000103E0 6C00                       		bge.s	Obj50_Pause
000103E2 D368 000C                  		add.w	d1,$C(a0)	; match	object's position to the floor
000103E6 6100 FF0A                  		bsr.w	Obj50_ChkWall
000103EA 6600                       		bne.s	Obj50_Pause
000103EC 4E75                       		rts	
000103EE                            ; ===========================================================================
000103EE                            
000103EE                            Obj50_Pause:				; XREF: Obj50_FixToFloor
000103EE 5528 0025                  		subq.b	#2,$25(a0)
000103F2 317C 003B 0030             		move.w	#59,$30(a0)	; set pause time to 1 second
000103F8 317C 0000 0010             		move.w	#0,$10(a0)
000103FE 117C 0000 001C             		move.b	#0,$1C(a0)
00010404 4E75                       		rts	
00010406                            ; ===========================================================================
00010406                            Ani_obj50:
00010406                            	include "_anim\obj50.asm"
00010406                            ; ---------------------------------------------------------------------------
00010406                            ; Animation script - Yadrin enemy
00010406                            ; ---------------------------------------------------------------------------
00010406 0000                       		dc.w byte_F920-Ani_obj50
00010408 0000                       		dc.w byte_F924-Ani_obj50
0001040A 0700 FF00                  byte_F920:	dc.b 7,	0, $FF,	0
0001040E 0700 0301 0400 0302 05FF   byte_F924:	dc.b 7,	0, 3, 1, 4, 0, 3, 2, 5,	$FF
00010418                            		even
00010418                            		even
00010418                            
00010418                            ; ---------------------------------------------------------------------------
00010418                            ; Sprite mappings - Yadrin enemy (SYZ)
00010418                            ; ---------------------------------------------------------------------------
00010418                            Map_obj50:
00010418                            	include "_maps\obj50.asm"
00010418                            ; ---------------------------------------------------------------------------
00010418                            ; Sprite mappings - Yadrin enemy (SYZ)
00010418                            ; ---------------------------------------------------------------------------
00010418 0000 0000                  		dc.w byte_F93A-Map_obj50, byte_F954-Map_obj50
0001041C 0000 0000                  		dc.w byte_F96E-Map_obj50, byte_F988-Map_obj50
00010420 0000 0000                  		dc.w byte_F9A2-Map_obj50, byte_F9BC-Map_obj50
00010424 05                         byte_F93A:	dc.b 5
00010425 F408 0000 F4               		dc.b $F4, 8, 0,	0, $F4
0001042A FC0E 0003 EC               		dc.b $FC, $E, 0, 3, $EC
0001042F EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
00010434 F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
00010439 0409 0031 FC               		dc.b 4,	9, 0, $31, $FC
0001043E 05                         byte_F954:	dc.b 5
0001043F F408 0014 F4               		dc.b $F4, 8, 0,	$14, $F4
00010444 FC0E 0017 EC               		dc.b $FC, $E, 0, $17, $EC
00010449 EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
0001044E F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
00010453 0409 0031 FC               		dc.b 4,	9, 0, $31, $FC
00010458 05                         byte_F96E:	dc.b 5
00010459 F409 0023 F4               		dc.b $F4, 9, 0,	$23, $F4
0001045E 040D 0029 EC               		dc.b 4,	$D, 0, $29, $EC
00010463 EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
00010468 F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
0001046D 0409 0031 FC               		dc.b 4,	9, 0, $31, $FC
00010472 05                         byte_F988:	dc.b 5
00010473 F408 0000 F4               		dc.b $F4, 8, 0,	0, $F4
00010478 FC0E 0003 EC               		dc.b $FC, $E, 0, 3, $EC
0001047D EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
00010482 F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
00010487 0409 0037 FC               		dc.b 4,	9, 0, $37, $FC
0001048C 05                         byte_F9A2:	dc.b 5
0001048D F408 0014 F4               		dc.b $F4, 8, 0,	$14, $F4
00010492 FC0E 0017 EC               		dc.b $FC, $E, 0, $17, $EC
00010497 EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
0001049C F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
000104A1 0409 0037 FC               		dc.b 4,	9, 0, $37, $FC
000104A6 05                         byte_F9BC:	dc.b 5
000104A7 F409 0023 F4               		dc.b $F4, 9, 0,	$23, $F4
000104AC 040D 0029 EC               		dc.b 4,	$D, 0, $29, $EC
000104B1 EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
000104B6 F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
000104BB 0409 0037 FC               		dc.b 4,	9, 0, $37, $FC
000104C0                            		even
000104C0                            		even
000104C0                            
000104C0                            ; ---------------------------------------------------------------------------
000104C0                            ; Solid	object subroutine (includes spikes, blocks, rocks etc)
000104C0                            ;
000104C0                            ; variables:
000104C0                            ; d1 = width
000104C0                            ; d2 = height /	2 (when	jumping)
000104C0                            ; d3 = height /	2 (when	walking)
000104C0                            ; d4 = x-axis position
000104C0                            ; ---------------------------------------------------------------------------
000104C0                            
000104C0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000104C0                            
000104C0                            
000104C0                            SolidObject:
000104C0 4A28 0025                  		tst.b	$25(a0)
000104C4 6700 0000                  		beq.w	loc_FAC8
000104C8 3401                       		move.w	d1,d2
000104CA D442                       		add.w	d2,d2
000104CC 43F8 D000                  		lea	($FFFFD000).w,a1
000104D0 0829 0001 0022             		btst	#1,$22(a1)
000104D6 6600                       		bne.s	loc_F9FE
000104D8 3029 0008                  		move.w	8(a1),d0
000104DC 9068 0008                  		sub.w	8(a0),d0
000104E0 D041                       		add.w	d1,d0
000104E2 6B00                       		bmi.s	loc_F9FE
000104E4 B042                       		cmp.w	d2,d0
000104E6 6500                       		bcs.s	loc_FA12
000104E8                            
000104E8                            loc_F9FE:
000104E8 08A9 0003 0022             		bclr	#3,$22(a1)
000104EE 08A8 0003 0022             		bclr	#3,$22(a0)
000104F4 4228 0025                  		clr.b	$25(a0)
000104F8 7800                       		moveq	#0,d4
000104FA 4E75                       		rts	
000104FC                            ; ===========================================================================
000104FC                            
000104FC                            loc_FA12:
000104FC 3404                       		move.w	d4,d2
000104FE 6100 80A0                  		bsr.w	MvSonicOnPtfm
00010502 7800                       		moveq	#0,d4
00010504 4E75                       		rts	
00010506                            ; ===========================================================================
00010506                            
00010506                            SolidObject71:				; XREF: Obj71_Solid
00010506 4A28 0025                  		tst.b	$25(a0)
0001050A 6700 0000                  		beq.w	loc_FAD0
0001050E 3401                       		move.w	d1,d2
00010510 D442                       		add.w	d2,d2
00010512 43F8 D000                  		lea	($FFFFD000).w,a1
00010516 0829 0001 0022             		btst	#1,$22(a1)
0001051C 6600                       		bne.s	loc_FA44
0001051E 3029 0008                  		move.w	8(a1),d0
00010522 9068 0008                  		sub.w	8(a0),d0
00010526 D041                       		add.w	d1,d0
00010528 6B00                       		bmi.s	loc_FA44
0001052A B042                       		cmp.w	d2,d0
0001052C 6500                       		bcs.s	loc_FA58
0001052E                            
0001052E                            loc_FA44:
0001052E 08A9 0003 0022             		bclr	#3,$22(a1)
00010534 08A8 0003 0022             		bclr	#3,$22(a0)
0001053A 4228 0025                  		clr.b	$25(a0)
0001053E 7800                       		moveq	#0,d4
00010540 4E75                       		rts	
00010542                            ; ===========================================================================
00010542                            
00010542                            loc_FA58:
00010542 3404                       		move.w	d4,d2
00010544 6100 805A                  		bsr.w	MvSonicOnPtfm
00010548 7800                       		moveq	#0,d4
0001054A 4E75                       		rts	
0001054C                            ; ===========================================================================
0001054C                            
0001054C                            SolidObject2F:				; XREF: Obj2F_Solid
0001054C 43F8 D000                  		lea	($FFFFD000).w,a1
00010550 4A28 0001                  		tst.b	1(a0)
00010554 6A00 0000                  		bpl.w	loc_FB92
00010558 3029 0008                  		move.w	8(a1),d0
0001055C 9068 0008                  		sub.w	8(a0),d0
00010560 D041                       		add.w	d1,d0
00010562 6B00 0000                  		bmi.w	loc_FB92
00010566 3601                       		move.w	d1,d3
00010568 D643                       		add.w	d3,d3
0001056A B043                       		cmp.w	d3,d0
0001056C 6200 0000                  		bhi.w	loc_FB92
00010570 3A00                       		move.w	d0,d5
00010572 0828 0000 0001             		btst	#0,1(a0)
00010578 6700                       		beq.s	loc_FA94
0001057A 4645                       		not.w	d5
0001057C DA43                       		add.w	d3,d5
0001057E                            
0001057E                            loc_FA94:
0001057E E24D                       		lsr.w	#1,d5
00010580 7600                       		moveq	#0,d3
00010582 1632 5000                  		move.b	(a2,d5.w),d3
00010586 9612                       		sub.b	(a2),d3
00010588 3A28 000C                  		move.w	$C(a0),d5
0001058C 9A43                       		sub.w	d3,d5
0001058E 1629 0016                  		move.b	$16(a1),d3
00010592 4883                       		ext.w	d3
00010594 D443                       		add.w	d3,d2
00010596 3629 000C                  		move.w	$C(a1),d3
0001059A 9645                       		sub.w	d5,d3
0001059C 5843                       		addq.w	#4,d3
0001059E D642                       		add.w	d2,d3
000105A0 6B00 0000                  		bmi.w	loc_FB92
000105A4 3802                       		move.w	d2,d4
000105A6 D844                       		add.w	d4,d4
000105A8 B644                       		cmp.w	d4,d3
000105AA 6400 0000                  		bcc.w	loc_FB92
000105AE 6000 0000                  		bra.w	loc_FB0E
000105B2                            ; ===========================================================================
000105B2                            
000105B2                            loc_FAC8:
000105B2 4A28 0001                  		tst.b	1(a0)
000105B6 6A00 0000                  		bpl.w	loc_FB92
000105BA                            
000105BA                            loc_FAD0:
000105BA 43F8 D000                  		lea	($FFFFD000).w,a1
000105BE 3029 0008                  		move.w	8(a1),d0
000105C2 9068 0008                  		sub.w	8(a0),d0
000105C6 D041                       		add.w	d1,d0
000105C8 6B00 0000                  		bmi.w	loc_FB92
000105CC 3601                       		move.w	d1,d3
000105CE D643                       		add.w	d3,d3
000105D0 B043                       		cmp.w	d3,d0
000105D2 6200 0000                  		bhi.w	loc_FB92
000105D6 1629 0016                  		move.b	$16(a1),d3
000105DA 4883                       		ext.w	d3
000105DC D443                       		add.w	d3,d2
000105DE 3629 000C                  		move.w	$C(a1),d3
000105E2 9668 000C                  		sub.w	$C(a0),d3
000105E6 5843                       		addq.w	#4,d3
000105E8 D642                       		add.w	d2,d3
000105EA 6B00 0000                  		bmi.w	loc_FB92
000105EE 3802                       		move.w	d2,d4
000105F0 D844                       		add.w	d4,d4
000105F2 B644                       		cmp.w	d4,d3
000105F4 6400 0000                  		bcc.w	loc_FB92
000105F8                            
000105F8                            loc_FB0E:
000105F8 4A38 F7C8                  		tst.b	($FFFFF7C8).w
000105FC 6B00 0000                  		bmi.w	loc_FB92
00010600 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00010606 6400 0000                  		bcc.w	loc_FB92
0001060A 4A78 FE08                  		tst.w	($FFFFFE08).w
0001060E 6600 0000                  		bne.w	loc_FBAC
00010612 3A00                       		move.w	d0,d5
00010614 B240                       		cmp.w	d0,d1
00010616 6400                       		bcc.s	loc_FB36
00010618 D241                       		add.w	d1,d1
0001061A 9041                       		sub.w	d1,d0
0001061C 3A00                       		move.w	d0,d5
0001061E 4445                       		neg.w	d5
00010620                            
00010620                            loc_FB36:
00010620 3203                       		move.w	d3,d1
00010622 B443                       		cmp.w	d3,d2
00010624 6400                       		bcc.s	loc_FB44
00010626 5943                       		subq.w	#4,d3
00010628 9644                       		sub.w	d4,d3
0001062A 3203                       		move.w	d3,d1
0001062C 4441                       		neg.w	d1
0001062E                            
0001062E                            loc_FB44:
0001062E BA41                       		cmp.w	d1,d5
00010630 6200 0000                  		bhi.w	loc_FBB0
00010634 0C41 0004                  		cmpi.w	#4,d1
00010638 6300                       		bls.s	loc_FB8C
0001063A 4A40                       		tst.w	d0
0001063C 6700                       		beq.s	loc_FB70
0001063E 6B00                       		bmi.s	loc_FB5E
00010640 4A69 0010                  		tst.w	$10(a1)
00010644 6B00                       		bmi.s	loc_FB70
00010646 6000                       		bra.s	loc_FB64
00010648                            ; ===========================================================================
00010648                            
00010648                            loc_FB5E:
00010648 4A69 0010                  		tst.w	$10(a1)
0001064C 6A00                       		bpl.s	loc_FB70
0001064E                            
0001064E                            loc_FB64:
0001064E 337C 0000 0014             		move.w	#0,$14(a1)	; stop Sonic moving
00010654 337C 0000 0010             		move.w	#0,$10(a1)
0001065A                            
0001065A                            loc_FB70:
0001065A 9169 0008                  		sub.w	d0,8(a1)
0001065E 0829 0001 0022             		btst	#1,$22(a1)
00010664 6600                       		bne.s	loc_FB8C
00010666 08E9 0005 0022             		bset	#5,$22(a1)
0001066C 08E8 0005 0022             		bset	#5,$22(a0)
00010672 7801                       		moveq	#1,d4
00010674 4E75                       		rts	
00010676                            ; ===========================================================================
00010676                            
00010676                            loc_FB8C:
00010676 6100                       		bsr.s	loc_FBA0
00010678 7801                       		moveq	#1,d4
0001067A 4E75                       		rts	
0001067C                            ; ===========================================================================
0001067C                            
0001067C                            loc_FB92:
0001067C 0828 0005 0022             		btst	#5,$22(a0)
00010682 6700                       		beq.s	loc_FBAC
00010684 0C29 0002 001C             		cmp.b	#2,$1C(a1)	; check if in jumping/rolling animation
0001068A 6700                       		beq.s	loc_FBA0
0001068C 0C29 0017 001C             		cmp.b	#$17,$1C(a1)	; check if in drowning animation
00010692 6700                       		beq.s	loc_FBA0
00010694 0C29 001A 001C             		cmp.b	#$1A,$1C(a1)	; check if in hurt animation
0001069A 6700                       		beq.s	loc_FBA0
0001069C 337C 0001 001C             		move.w	#1,$1C(a1)	; use walking animation
000106A2                            
000106A2                            loc_FBA0:
000106A2 08A8 0005 0022             		bclr	#5,$22(a0)
000106A8                            
000106A8 08A9 0005 0022             		bclr	#5,$22(a1)
000106AE                            
000106AE                            loc_FBAC:
000106AE 7800                       		moveq	#0,d4
000106B0 4E75                       		rts	
000106B2                            ; ===========================================================================
000106B2                            
000106B2                            loc_FBB0:
000106B2 4A43                       		tst.w	d3
000106B4 6B00                       		bmi.s	loc_FBBC
000106B6 0C43 0010                  		cmpi.w	#$10,d3
000106BA 6500                       		bcs.s	loc_FBEE
000106BC 60BE                       		bra.s	loc_FB92
000106BE                            ; ===========================================================================
000106BE                            
000106BE                            loc_FBBC:
000106BE 4A69 0012                  		tst.w	$12(a1)
000106C2 6700                       		beq.s	loc_FBD6
000106C4 6A00                       		bpl.s	loc_FBD2
000106C6 4A43                       		tst.w	d3
000106C8 6A00                       		bpl.s	loc_FBD2
000106CA 9769 000C                  		sub.w	d3,$C(a1)
000106CE 337C 0000 0012             		move.w	#0,$12(a1)	; stop Sonic moving
000106D4                            
000106D4                            loc_FBD2:
000106D4 78FF                       		moveq	#-1,d4
000106D6 4E75                       		rts	
000106D8                            ; ===========================================================================
000106D8                            
000106D8                            loc_FBD6:
000106D8 0829 0001 0022             		btst	#1,$22(a1)
000106DE 66F4                       		bne.s	loc_FBD2
000106E0 2F08                       		move.l	a0,-(sp)
000106E2 2049                       		movea.l	a1,a0
000106E4 4EB9 0000 0000             		jsr	KillSonic
000106EA 205F                       		movea.l	(sp)+,a0
000106EC 78FF                       		moveq	#-1,d4
000106EE 4E75                       		rts	
000106F0                            ; ===========================================================================
000106F0                            
000106F0                            loc_FBEE:
000106F0 5943                       		subq.w	#4,d3
000106F2 7200                       		moveq	#0,d1
000106F4 1228 0019                  		move.b	$19(a0),d1
000106F8 3401                       		move.w	d1,d2
000106FA D442                       		add.w	d2,d2
000106FC D269 0008                  		add.w	8(a1),d1
00010700 9268 0008                  		sub.w	8(a0),d1
00010704 6B00                       		bmi.s	loc_FC28
00010706 B242                       		cmp.w	d2,d1
00010708 6400                       		bcc.s	loc_FC28
0001070A 4A69 0012                  		tst.w	$12(a1)
0001070E 6B00                       		bmi.s	loc_FC28
00010710 9769 000C                  		sub.w	d3,$C(a1)
00010714 5369 000C                  		subq.w	#1,$C(a1)
00010718 6100                       		bsr.s	sub_FC2C
0001071A 117C 0002 0025             		move.b	#2,$25(a0)
00010720 08E8 0003 0022             		bset	#3,$22(a0)
00010726 78FF                       		moveq	#-1,d4
00010728 4E75                       		rts	
0001072A                            ; ===========================================================================
0001072A                            
0001072A                            loc_FC28:
0001072A 7800                       		moveq	#0,d4
0001072C 4E75                       		rts	
0001072E                            ; End of function SolidObject
0001072E                            
0001072E                            
0001072E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001072E                            
0001072E                            
0001072E                            sub_FC2C:				; XREF: SolidObject
0001072E 0829 0003 0022             		btst	#3,$22(a1)
00010734 6700                       		beq.s	loc_FC4E
00010736 7000                       		moveq	#0,d0
00010738 1029 003D                  		move.b	$3D(a1),d0
0001073C ED48                       		lsl.w	#6,d0
0001073E 0680 00FF D000             		addi.l	#$FFD000,d0
00010744 2440                       		movea.l	d0,a2
00010746 08AA 0003 0022             		bclr	#3,$22(a2)
0001074C 422A 0025                  		clr.b	$25(a2)
00010750                            
00010750                            loc_FC4E:
00010750 3008                       		move.w	a0,d0
00010752 0440 D000                  		subi.w	#-$3000,d0
00010756 EC48                       		lsr.w	#6,d0
00010758 0240 007F                  		andi.w	#$7F,d0
0001075C 1340 003D                  		move.b	d0,$3D(a1)
00010760 137C 0000 0026             		move.b	#0,$26(a1)
00010766 337C 0000 0012             		move.w	#0,$12(a1)
0001076C 3369 0010 0014             		move.w	$10(a1),$14(a1)
00010772 0829 0001 0022             		btst	#1,$22(a1)
00010778 6700                       		beq.s	loc_FC84
0001077A 2F08                       		move.l	a0,-(sp)
0001077C 2049                       		movea.l	a1,a0
0001077E 4EB9 0000 0000             		jsr	Sonic_ResetOnFloor
00010784 205F                       		movea.l	(sp)+,a0
00010786                            
00010786                            loc_FC84:
00010786 08E9 0003 0022             		bset	#3,$22(a1)
0001078C 08E8 0003 0022             		bset	#3,$22(a0)
00010792 4E75                       		rts	
00010794                            ; End of function sub_FC2C
00010794                            
00010794                            ; ===========================================================================
00010794                            ; ---------------------------------------------------------------------------
00010794                            ; Object 51 - smashable	green block (MZ)
00010794                            ; ---------------------------------------------------------------------------
00010794                            
00010794                            Obj51:					; XREF: Obj_Index
00010794 7000                       		moveq	#0,d0
00010796 1028 0024                  		move.b	$24(a0),d0
0001079A 323B 0000                  		move.w	Obj51_Index(pc,d0.w),d1
0001079E 4EBB 1000                  		jsr	Obj51_Index(pc,d1.w)
000107A2 6000 F9F4                  		bra.w	MarkObjGone
000107A6                            ; ===========================================================================
000107A6 0000                       Obj51_Index:	dc.w Obj51_Main-Obj51_Index
000107A8 0000                       		dc.w Obj51_Solid-Obj51_Index
000107AA 0000                       		dc.w Obj51_Display-Obj51_Index
000107AC                            ; ===========================================================================
000107AC                            
000107AC                            Obj51_Main:				; XREF: Obj51_Index
000107AC 5428 0024                  		addq.b	#2,$24(a0)
000107B0 217C 0000 0000 0004        		move.l	#Map_obj51,4(a0)
000107B8 317C 42B8 0002             		move.w	#$42B8,2(a0)
000107BE 117C 0004 0001             		move.b	#4,1(a0)
000107C4 117C 0010 0019             		move.b	#$10,$19(a0)
000107CA 117C 0004 0018             		move.b	#4,$18(a0)
000107D0 1168 0028 001A             		move.b	$28(a0),$1A(a0)
000107D6                            
000107D6                            Obj51_Solid:				; XREF: Obj51_Index
000107D6 3178 F7D0 0034             		move.w	($FFFFF7D0).w,$34(a0)
000107DC 1178 D01C 0032             		move.b	($FFFFD01C).w,$32(a0) ;	load Sonic's animation number
000107E2 323C 001B                  		move.w	#$1B,d1
000107E6 343C 0010                  		move.w	#$10,d2
000107EA 363C 0011                  		move.w	#$11,d3
000107EE 3828 0008                  		move.w	8(a0),d4
000107F2 6100 FCCC                  		bsr.w	SolidObject
000107F6 0828 0003 0022             		btst	#3,$22(a0)
000107FC 6600                       		bne.s	Obj51_Smash
000107FE                            
000107FE                            locret_FCFC:
000107FE 4E75                       		rts	
00010800                            ; ===========================================================================
00010800                            
00010800                            Obj51_Smash:				; XREF: Obj51_Solid
00010800 0C28 0002 0032             		cmpi.b	#2,$32(a0)	; is Sonic rolling/jumping?
00010806 66F6                       		bne.s	locret_FCFC	; if not, branch
00010808 31E8 0034 F7D0             		move.w	$34(a0),($FFFFF7D0).w
0001080E 08E9 0002 0022             		bset	#2,$22(a1)
00010814 137C 000E 0016             		move.b	#$E,$16(a1)
0001081A 137C 0007 0017             		move.b	#7,$17(a1)
00010820 137C 0002 001C             		move.b	#2,$1C(a1)
00010826 337C FD00 0012             		move.w	#-$300,$12(a1)	; bounce Sonic upwards
0001082C 08E9 0001 0022             		bset	#1,$22(a1)
00010832 08A9 0003 0022             		bclr	#3,$22(a1)
00010838 137C 0002 0024             		move.b	#2,$24(a1)
0001083E 08A8 0003 0022             		bclr	#3,$22(a0)
00010844 4228 0025                  		clr.b	$25(a0)
00010848 117C 0001 001A             		move.b	#1,$1A(a0)
0001084E 49F9 0000 0000             		lea	(Obj51_Speeds).l,a4 ; load broken	fragment speed data
00010854 7203                       		moveq	#3,d1		; set number of	fragments to 4
00010856 343C 0038                  		move.w	#$38,d2
0001085A 6100 D460                  		bsr.w	SmashObject
0001085E 6100 DD0C                  		bsr.w	SingleObjLoad
00010862 6600                       		bne.s	Obj51_Display
00010864 12BC 0029                  		move.b	#$29,0(a1)	; load points object
00010868 3368 0008 0008             		move.w	8(a0),8(a1)
0001086E 3368 000C 000C             		move.w	$C(a0),$C(a1)
00010874 3438 F7D0                  		move.w	($FFFFF7D0).w,d2
00010878 5478 F7D0                  		addq.w	#2,($FFFFF7D0).w
0001087C 0C42 0006                  		cmpi.w	#6,d2
00010880 6500                       		bcs.s	Obj51_Bonus
00010882 7406                       		moveq	#6,d2
00010884                            
00010884                            Obj51_Bonus:
00010884 7000                       		moveq	#0,d0
00010886 303B 2000                  		move.w	Obj51_Points(pc,d2.w),d0
0001088A 0C78 0020 F7D0             		cmpi.w	#$20,($FFFFF7D0).w ; have 16 blocks been smashed?
00010890 6500                       		bcs.s	loc_FD98	; if not, branch
00010892 303C 03E8                  		move.w	#1000,d0	; give higher points for 16th block
00010896 740A                       		moveq	#10,d2
00010898                            
00010898                            loc_FD98:
00010898 4EB9 0000 0000             		jsr	AddPoints
0001089E E24A                       		lsr.w	#1,d2
000108A0 1342 001A                  		move.b	d2,$1A(a1)
000108A4                            
000108A4                            Obj51_Display:				; XREF: Obj51_Index
000108A4 6100 D80A                  		bsr.w	SpeedToPos
000108A8 0668 0038 0012             		addi.w	#$38,$12(a0)
000108AE 6100 D826                  		bsr.w	DisplaySprite
000108B2 4A28 0001                  		tst.b	1(a0)
000108B6 6A00 D85A                  		bpl.w	DeleteObject
000108BA 4E75                       		rts	
000108BC                            ; ===========================================================================
000108BC FE00 FE00                  Obj51_Speeds:	dc.w $FE00, $FE00	; x-speed, y-speed
000108C0 FF00 FF00                  		dc.w $FF00, $FF00
000108C4 0200 FE00                  		dc.w $200, $FE00
000108C8 0100 FF00                  		dc.w $100, $FF00
000108CC                            
000108CC 000A 0014 0032 0064        Obj51_Points:	dc.w 10, 20, 50, 100
000108D4                            ; ---------------------------------------------------------------------------
000108D4                            ; Sprite mappings - smashable green block (MZ)
000108D4                            ; ---------------------------------------------------------------------------
000108D4                            Map_obj51:
000108D4                            	include "_maps\obj51.asm"
000108D4                            ; ---------------------------------------------------------------------------
000108D4                            ; Sprite mappings - smashable green block (MZ)
000108D4                            ; ---------------------------------------------------------------------------
000108D4 0000                       		dc.w byte_FDD8-Map_obj51
000108D6 0000                       		dc.w byte_FDE3-Map_obj51
000108D8 02                         byte_FDD8:	dc.b 2
000108D9 F00D 0000 F0               		dc.b $F0, $D, 0, 0, $F0
000108DE 000D 0000 F0               		dc.b 0,	$D, 0, 0, $F0
000108E3 04                         byte_FDE3:	dc.b 4
000108E4 F005 8000 F0               		dc.b $F0, 5, $80, 0, $F0
000108E9 0005 8000 F0               		dc.b 0,	5, $80,	0, $F0
000108EE F005 8000 00               		dc.b $F0, 5, $80, 0, 0
000108F3 0005 8000 00               		dc.b 0,	5, $80,	0, 0
000108F8                            		even
000108F8                            		even
000108F8                            
000108F8                            ; ===========================================================================
000108F8                            ; ---------------------------------------------------------------------------
000108F8                            ; Object 52 - moving platform blocks (MZ, LZ, SBZ)
000108F8                            ; ---------------------------------------------------------------------------
000108F8                            
000108F8                            Obj52:					; XREF: Obj_Index
000108F8 7000                       		moveq	#0,d0
000108FA 1028 0024                  		move.b	$24(a0),d0
000108FE 323B 0000                  		move.w	Obj52_Index(pc,d0.w),d1
00010902 4EFB 1000                  		jmp	Obj52_Index(pc,d1.w)
00010906                            ; ===========================================================================
00010906 0000                       Obj52_Index:	dc.w Obj52_Main-Obj52_Index
00010908 0000                       		dc.w Obj52_Platform-Obj52_Index
0001090A 0000                       		dc.w Obj52_StandOn-Obj52_Index
0001090C                            
0001090C 1000                       Obj52_Var:	dc.b $10, 0		; object width,	frame number
0001090E 2001                       		dc.b $20, 1
00010910 2002                       		dc.b $20, 2
00010912 4003                       		dc.b $40, 3
00010914 3004                       		dc.b $30, 4
00010916                            ; ===========================================================================
00010916                            
00010916                            Obj52_Main:				; XREF: Obj52_Index
00010916 5428 0024                  		addq.b	#2,$24(a0)
0001091A 217C 0000 0000 0004        		move.l	#Map_obj52,4(a0)
00010922 317C 42B8 0002             		move.w	#$42B8,2(a0)
00010928 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
0001092E 6600                       		bne.s	loc_FE44
00010930 217C 0000 0000 0004        		move.l	#Map_obj52a,4(a0) ; LZ specific	code
00010938 317C 43BC 0002             		move.w	#$43BC,2(a0)
0001093E 117C 0007 0016             		move.b	#7,$16(a0)
00010944                            
00010944                            loc_FE44:
00010944 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
0001094A 6600                       		bne.s	loc_FE60
0001094C 317C 22C0 0002             		move.w	#$22C0,2(a0)	; SBZ specific code (object 5228)
00010952 0C28 0028 0028             		cmpi.b	#$28,$28(a0)	; is object 5228 ?
00010958 6700                       		beq.s	loc_FE60	; if yes, branch
0001095A 317C 4460 0002             		move.w	#$4460,2(a0)	; SBZ specific code (object 523x)
00010960                            
00010960                            loc_FE60:
00010960 117C 0004 0001             		move.b	#4,1(a0)
00010966 7000                       		moveq	#0,d0
00010968 1028 0028                  		move.b	$28(a0),d0
0001096C E648                       		lsr.w	#3,d0
0001096E 0240 001E                  		andi.w	#$1E,d0
00010972 45FB 0098                  		lea	Obj52_Var(pc,d0.w),a2
00010976 115A 0019                  		move.b	(a2)+,$19(a0)
0001097A 115A 001A                  		move.b	(a2)+,$1A(a0)
0001097E 117C 0004 0018             		move.b	#4,$18(a0)
00010984 3168 0008 0030             		move.w	8(a0),$30(a0)
0001098A 3168 000C 0032             		move.w	$C(a0),$32(a0)
00010990 0228 000F 0028             		andi.b	#$F,$28(a0)
00010996                            
00010996                            Obj52_Platform:				; XREF: Obj52_Index
00010996 6100 0000                  		bsr.w	Obj52_Move
0001099A 7200                       		moveq	#0,d1
0001099C 1228 0019                  		move.b	$19(a0),d1
000109A0 4EB9 0000 7ECE             		jsr	(PlatformObject).l
000109A6 6000                       		bra.s	Obj52_ChkDel
000109A8                            ; ===========================================================================
000109A8                            
000109A8                            Obj52_StandOn:				; XREF: Obj52_Index
000109A8 7200                       		moveq	#0,d1
000109AA 1228 0019                  		move.b	$19(a0),d1
000109AE 4EB9 0000 8042             		jsr	(ExitPlatform).l
000109B4 3F28 0008                  		move.w	8(a0),-(sp)
000109B8 6100 0000                  		bsr.w	Obj52_Move
000109BC 341F                       		move.w	(sp)+,d2
000109BE 4EB9 0000 85AC             		jsr	(MvSonicOnPtfm2).l
000109C4                            
000109C4                            Obj52_ChkDel:				; XREF: Obj52_Platform
000109C4 3028 0030                  		move.w	$30(a0),d0
000109C8 0240 FF80                  		andi.w	#$FF80,d0
000109CC 3238 F700                  		move.w	($FFFFF700).w,d1
000109D0 0441 0080                  		subi.w	#$80,d1
000109D4 0241 FF80                  		andi.w	#$FF80,d1
000109D8 9041                       		sub.w	d1,d0
000109DA 0C40 0280                  		cmpi.w	#$280,d0
000109DE 6200 D732                  		bhi.w	DeleteObject
000109E2 6000 D6F2                  		bra.w	DisplaySprite
000109E6                            ; ===========================================================================
000109E6                            
000109E6                            Obj52_Move:				; XREF: Obj52_Platform; Obj52_StandOn
000109E6 7000                       		moveq	#0,d0
000109E8 1028 0028                  		move.b	$28(a0),d0
000109EC 0240 000F                  		andi.w	#$F,d0
000109F0 D040                       		add.w	d0,d0
000109F2 323B 0000                  		move.w	Obj52_TypeIndex(pc,d0.w),d1
000109F6 4EFB 1000                  		jmp	Obj52_TypeIndex(pc,d1.w)
000109FA                            ; ===========================================================================
000109FA 0000 0000                  Obj52_TypeIndex:dc.w Obj52_Type00-Obj52_TypeIndex, Obj52_Type01-Obj52_TypeIndex
000109FE 0000 0000                  		dc.w Obj52_Type02-Obj52_TypeIndex, Obj52_Type03-Obj52_TypeIndex
00010A02 0000 0000                  		dc.w Obj52_Type02-Obj52_TypeIndex, Obj52_Type05-Obj52_TypeIndex
00010A06 0000 0000                  		dc.w Obj52_Type06-Obj52_TypeIndex, Obj52_Type07-Obj52_TypeIndex
00010A0A 0000 0000                  		dc.w Obj52_Type08-Obj52_TypeIndex, Obj52_Type02-Obj52_TypeIndex
00010A0E 0000                       		dc.w Obj52_Type0A-Obj52_TypeIndex
00010A10                            ; ===========================================================================
00010A10                            
00010A10                            Obj52_Type00:				; XREF: Obj52_TypeIndex
00010A10 4E75                       		rts	
00010A12                            ; ===========================================================================
00010A12                            
00010A12                            Obj52_Type01:				; XREF: Obj52_TypeIndex
00010A12 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
00010A16 323C 0060                  		move.w	#$60,d1
00010A1A 0828 0000 0022             		btst	#0,$22(a0)
00010A20 6700                       		beq.s	loc_FF26
00010A22 4440                       		neg.w	d0
00010A24 D041                       		add.w	d1,d0
00010A26                            
00010A26                            loc_FF26:
00010A26 3228 0030                  		move.w	$30(a0),d1
00010A2A 9240                       		sub.w	d0,d1
00010A2C 3141 0008                  		move.w	d1,8(a0)
00010A30 4E75                       		rts	
00010A32                            ; ===========================================================================
00010A32                            
00010A32                            Obj52_Type02:				; XREF: Obj52_TypeIndex
00010A32 0C28 0004 0024             		cmpi.b	#4,$24(a0)	; is Sonic standing on the platform?
00010A38 6600                       		bne.s	Obj52_02_Wait
00010A3A 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
00010A3E                            
00010A3E                            Obj52_02_Wait:
00010A3E 4E75                       		rts	
00010A40                            ; ===========================================================================
00010A40                            
00010A40                            Obj52_Type03:				; XREF: Obj52_TypeIndex
00010A40 7600                       		moveq	#0,d3
00010A42 1628 0019                  		move.b	$19(a0),d3
00010A46 6100 0000                  		bsr.w	ObjHitWallRight
00010A4A 4A41                       		tst.w	d1		; has the platform hit a wall?
00010A4C 6B00                       		bmi.s	Obj52_03_End	; if yes, branch
00010A4E 5268 0008                  		addq.w	#1,8(a0)	; move platform	to the right
00010A52 3168 0008 0030             		move.w	8(a0),$30(a0)
00010A58 4E75                       		rts	
00010A5A                            ; ===========================================================================
00010A5A                            
00010A5A                            Obj52_03_End:
00010A5A 4228 0028                  		clr.b	$28(a0)		; change to type 00 (non-moving	type)
00010A5E 4E75                       		rts	
00010A60                            ; ===========================================================================
00010A60                            
00010A60                            Obj52_Type05:				; XREF: Obj52_TypeIndex
00010A60 7600                       		moveq	#0,d3
00010A62 1628 0019                  		move.b	$19(a0),d3
00010A66 6100 0000                  		bsr.w	ObjHitWallRight
00010A6A 4A41                       		tst.w	d1		; has the platform hit a wall?
00010A6C 6B00                       		bmi.s	Obj52_05_End	; if yes, branch
00010A6E 5268 0008                  		addq.w	#1,8(a0)	; move platform	to the right
00010A72 3168 0008 0030             		move.w	8(a0),$30(a0)
00010A78 4E75                       		rts	
00010A7A                            ; ===========================================================================
00010A7A                            
00010A7A                            Obj52_05_End:
00010A7A 5228 0028                  		addq.b	#1,$28(a0)	; change to type 06 (falling)
00010A7E 4E75                       		rts	
00010A80                            ; ===========================================================================
00010A80                            
00010A80                            Obj52_Type06:				; XREF: Obj52_TypeIndex
00010A80 6100 D62E                  		bsr.w	SpeedToPos
00010A84 0668 0018 0012             		addi.w	#$18,$12(a0)	; make the platform fall
00010A8A 6100 0000                  		bsr.w	ObjHitFloor
00010A8E 4A41                       		tst.w	d1		; has platform hit the floor?
00010A90 6A00 0000                  		bpl.w	locret_FFA0	; if not, branch
00010A94 D368 000C                  		add.w	d1,$C(a0)
00010A98 4268 0012                  		clr.w	$12(a0)		; stop platform	falling
00010A9C 4228 0028                  		clr.b	$28(a0)		; change to type 00 (non-moving)
00010AA0                            
00010AA0                            locret_FFA0:
00010AA0 4E75                       		rts	
00010AA2                            ; ===========================================================================
00010AA2                            
00010AA2                            Obj52_Type07:				; XREF: Obj52_TypeIndex
00010AA2 4A38 F7E2                  		tst.b	($FFFFF7E2).w	; has switch number 02 been pressed?
00010AA6 6700                       		beq.s	Obj52_07_ChkDel
00010AA8 5728 0028                  		subq.b	#3,$28(a0)	; if yes, change object	type to	04
00010AAC                            
00010AAC                            Obj52_07_ChkDel:
00010AAC 588F                       		addq.l	#4,sp
00010AAE 3028 0030                  		move.w	$30(a0),d0
00010AB2 0240 FF80                  		andi.w	#$FF80,d0
00010AB6 3238 F700                  		move.w	($FFFFF700).w,d1
00010ABA 0441 0080                  		subi.w	#$80,d1
00010ABE 0241 FF80                  		andi.w	#$FF80,d1
00010AC2 9041                       		sub.w	d1,d0
00010AC4 0C40 0280                  		cmpi.w	#$280,d0
00010AC8 6200 D648                  		bhi.w	DeleteObject
00010ACC 4E75                       		rts	
00010ACE                            ; ===========================================================================
00010ACE                            
00010ACE                            Obj52_Type08:				; XREF: Obj52_TypeIndex
00010ACE 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
00010AD2 323C 0080                  		move.w	#$80,d1
00010AD6 0828 0000 0022             		btst	#0,$22(a0)
00010ADC 6700                       		beq.s	loc_FFE2
00010ADE 4440                       		neg.w	d0
00010AE0 D041                       		add.w	d1,d0
00010AE2                            
00010AE2                            loc_FFE2:
00010AE2 3228 0032                  		move.w	$32(a0),d1
00010AE6 9240                       		sub.w	d0,d1
00010AE8 3141 000C                  		move.w	d1,$C(a0)
00010AEC 4E75                       		rts	
00010AEE                            ; ===========================================================================
00010AEE                            
00010AEE                            Obj52_Type0A:				; XREF: Obj52_TypeIndex
00010AEE 7600                       		moveq	#0,d3
00010AF0 1628 0019                  		move.b	$19(a0),d3
00010AF4 D643                       		add.w	d3,d3
00010AF6 7208                       		moveq	#8,d1
00010AF8 0828 0000 0022             		btst	#0,$22(a0)
00010AFE 6700                       		beq.s	loc_10004
00010B00 4441                       		neg.w	d1
00010B02 4443                       		neg.w	d3
00010B04                            
00010B04                            loc_10004:
00010B04 4A68 0036                  		tst.w	$36(a0)		; is platform set to move back?
00010B08 6600                       		bne.s	Obj52_0A_Back	; if yes, branch
00010B0A 3028 0008                  		move.w	8(a0),d0
00010B0E 9068 0030                  		sub.w	$30(a0),d0
00010B12 B043                       		cmp.w	d3,d0
00010B14 6700                       		beq.s	Obj52_0A_Wait
00010B16 D368 0008                  		add.w	d1,8(a0)	; move platform
00010B1A 317C 012C 0034             		move.w	#300,$34(a0)	; set time delay to 5 seconds
00010B20 4E75                       		rts	
00010B22                            ; ===========================================================================
00010B22                            
00010B22                            Obj52_0A_Wait:
00010B22 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from time delay
00010B26 6600                       		bne.s	locret_1002E	; if time remains, branch
00010B28 317C 0001 0036             		move.w	#1,$36(a0)	; set platform to move back to its original position
00010B2E                            
00010B2E                            locret_1002E:
00010B2E 4E75                       		rts	
00010B30                            ; ===========================================================================
00010B30                            
00010B30                            Obj52_0A_Back:
00010B30 3028 0008                  		move.w	8(a0),d0
00010B34 9068 0030                  		sub.w	$30(a0),d0
00010B38 6700                       		beq.s	Obj52_0A_Reset
00010B3A 9368 0008                  		sub.w	d1,8(a0)	; return platform to its original position
00010B3E 4E75                       		rts	
00010B40                            ; ===========================================================================
00010B40                            
00010B40                            Obj52_0A_Reset:
00010B40 4268 0036                  		clr.w	$36(a0)
00010B44 5328 0028                  		subq.b	#1,$28(a0)
00010B48 4E75                       		rts	
00010B4A                            ; ===========================================================================
00010B4A                            ; ---------------------------------------------------------------------------
00010B4A                            ; Sprite mappings - moving blocks (MZ, SBZ)
00010B4A                            ; ---------------------------------------------------------------------------
00010B4A                            Map_obj52:
00010B4A                            	include "_maps\obj52mz.asm"
00010B4A                            ; ---------------------------------------------------------------------------
00010B4A                            ; Sprite mappings - moving blocks (MZ, SBZ)
00010B4A                            ; ---------------------------------------------------------------------------
00010B4A 0000 0000                  		dc.w byte_10054-Map_obj52, byte_1005A-Map_obj52
00010B4E 0000 0000                  		dc.w byte_10065-Map_obj52, byte_1007A-Map_obj52
00010B52 0000                       		dc.w byte_1008F-Map_obj52
00010B54 01                         byte_10054:	dc.b 1
00010B55 F80F 0008 F0               		dc.b $F8, $F, 0, 8, $F0
00010B5A 02                         byte_1005A:	dc.b 2
00010B5B F80F 0008 E0               		dc.b $F8, $F, 0, 8, $E0
00010B60 F80F 0008 00               		dc.b $F8, $F, 0, 8, 0
00010B65 04                         byte_10065:	dc.b 4
00010B66 F80C 2000 E0               		dc.b $F8, $C, $20, 0, $E0
00010B6B 000D 0004 E0               		dc.b 0,	$D, 0, 4, $E0
00010B70 F80C 2000 00               		dc.b $F8, $C, $20, 0, 0
00010B75 000D 0004 00               		dc.b 0,	$D, 0, 4, 0
00010B7A 04                         byte_1007A:	dc.b 4
00010B7B F80E 0000 C0               		dc.b $F8, $E, 0, 0, $C0
00010B80 F80E 0003 E0               		dc.b $F8, $E, 0, 3, $E0
00010B85 F80E 0003 00               		dc.b $F8, $E, 0, 3, 0
00010B8A F80E 0800 20               		dc.b $F8, $E, 8, 0, $20
00010B8F 03                         byte_1008F:	dc.b 3
00010B90 F80F 0008 D0               		dc.b $F8, $F, 0, 8, $D0
00010B95 F80F 0008 F0               		dc.b $F8, $F, 0, 8, $F0
00010B9A F80F 0008 10               		dc.b $F8, $F, 0, 8, $10
00010BA0 00                         		even
00010BA0 00                         		even
00010BA0                            
00010BA0                            ; ---------------------------------------------------------------------------
00010BA0                            ; Sprite mappings - moving block (LZ)
00010BA0                            ; ---------------------------------------------------------------------------
00010BA0                            Map_obj52a:
00010BA0                            	include "_maps\obj52lz.asm"
00010BA0                            ; ---------------------------------------------------------------------------
00010BA0                            ; Sprite mappings - moving block (LZ)
00010BA0                            ; ---------------------------------------------------------------------------
00010BA0 0000                       		dc.w byte_100A2-Map_obj52a
00010BA2 01                         byte_100A2:	dc.b 1
00010BA3 F80D 0000 F0               		dc.b $F8, $D, 0, 0, $F0
00010BA8                            		even
00010BA8                            		even
00010BA8                            
00010BA8                            ; ===========================================================================
00010BA8                            ; ---------------------------------------------------------------------------
00010BA8                            ; Object 55 - Basaran enemy (MZ)
00010BA8                            ; ---------------------------------------------------------------------------
00010BA8                            
00010BA8                            Obj55:					; XREF: Obj_Index
00010BA8 7000                       		moveq	#0,d0
00010BAA 1028 0024                  		move.b	$24(a0),d0
00010BAE 323B 0000                  		move.w	Obj55_Index(pc,d0.w),d1
00010BB2 4EFB 1000                  		jmp	Obj55_Index(pc,d1.w)
00010BB6                            ; ===========================================================================
00010BB6 0000                       Obj55_Index:	dc.w Obj55_Main-Obj55_Index
00010BB8 0000                       		dc.w Obj55_Action-Obj55_Index
00010BBA                            ; ===========================================================================
00010BBA                            
00010BBA                            Obj55_Main:				; XREF: Obj55_Index
00010BBA 5428 0024                  		addq.b	#2,$24(a0)
00010BBE 217C 0000 0000 0004        		move.l	#Map_obj55,4(a0)
00010BC6 317C 84B8 0002             		move.w	#$84B8,2(a0)
00010BCC 117C 0004 0001             		move.b	#4,1(a0)
00010BD2 117C 000C 0016             		move.b	#$C,$16(a0)
00010BD8 117C 0002 0018             		move.b	#2,$18(a0)
00010BDE 117C 000B 0020             		move.b	#$B,$20(a0)
00010BE4 117C 0010 0019             		move.b	#$10,$19(a0)
00010BEA                            
00010BEA                            Obj55_Action:				; XREF: Obj55_Index
00010BEA 7000                       		moveq	#0,d0
00010BEC 1028 0025                  		move.b	$25(a0),d0
00010BF0 323B 0000                  		move.w	Obj55_Index2(pc,d0.w),d1
00010BF4 4EBB 1000                  		jsr	Obj55_Index2(pc,d1.w)
00010BF8 43F9 0000 0000             		lea	(Ani_obj55).l,a1
00010BFE 6100 A5EE                  		bsr.w	AnimateSprite
00010C02 6000 F594                  		bra.w	MarkObjGone
00010C06                            ; ===========================================================================
00010C06 0000                       Obj55_Index2:	dc.w Obj55_ChkDrop-Obj55_Index2
00010C08 0000                       		dc.w Obj55_DropFly-Obj55_Index2
00010C0A 0000                       		dc.w Obj55_PlaySnd-Obj55_Index2
00010C0C 0000                       		dc.w Obj55_FlyUp-Obj55_Index2
00010C0E                            ; ===========================================================================
00010C0E                            
00010C0E                            Obj55_ChkDrop:				; XREF: Obj55_Index2
00010C0E 343C 0080                  		move.w	#$80,d2
00010C12 6100 0000                  		bsr.w	Obj55_ChkSonic
00010C16 6400                       		bcc.s	Obj55_NoDrop
00010C18 3038 D00C                  		move.w	($FFFFD00C).w,d0
00010C1C 3140 0036                  		move.w	d0,$36(a0)
00010C20 9068 000C                  		sub.w	$C(a0),d0
00010C24 6500                       		bcs.s	Obj55_NoDrop
00010C26 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic within $80 pixels of	basaran?
00010C2A 6400                       		bcc.s	Obj55_NoDrop	; if not, branch
00010C2C 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
00010C30 6600                       		bne.s	Obj55_NoDrop	; if yes, branch
00010C32 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00010C36 D007                       		add.b	d7,d0
00010C38 0200 0007                  		andi.b	#7,d0
00010C3C 6600                       		bne.s	Obj55_NoDrop
00010C3E 117C 0001 001C             		move.b	#1,$1C(a0)
00010C44 5428 0025                  		addq.b	#2,$25(a0)
00010C48                            
00010C48                            Obj55_NoDrop:
00010C48 4E75                       		rts	
00010C4A                            ; ===========================================================================
00010C4A                            
00010C4A                            Obj55_DropFly:				; XREF: Obj55_Index2
00010C4A 6100 D464                  		bsr.w	SpeedToPos
00010C4E 0668 0018 0012             		addi.w	#$18,$12(a0)	; make basaran fall
00010C54 343C 0080                  		move.w	#$80,d2
00010C58 6100 0000                  		bsr.w	Obj55_ChkSonic
00010C5C 3028 0036                  		move.w	$36(a0),d0
00010C60 9068 000C                  		sub.w	$C(a0),d0
00010C64 6500                       		bcs.s	Obj55_ChkDel
00010C66 0C40 0010                  		cmpi.w	#$10,d0
00010C6A 6400                       		bcc.s	locret_10180
00010C6C 3141 0010                  		move.w	d1,$10(a0)	; make basaran fly horizontally
00010C70 317C 0000 0012             		move.w	#0,$12(a0)	; stop basaran falling
00010C76 117C 0002 001C             		move.b	#2,$1C(a0)
00010C7C 5428 0025                  		addq.b	#2,$25(a0)
00010C80                            
00010C80                            locret_10180:
00010C80 4E75                       		rts	
00010C82                            ; ===========================================================================
00010C82                            
00010C82                            Obj55_ChkDel:				; XREF: Obj55_DropFly
00010C82 4A28 0001                  		tst.b	1(a0)
00010C86 6A00 D48A                  		bpl.w	DeleteObject
00010C8A 4E75                       		rts	
00010C8C                            ; ===========================================================================
00010C8C                            
00010C8C                            Obj55_PlaySnd:				; XREF: Obj55_Index2
00010C8C 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00010C90 0200 000F                  		andi.b	#$F,d0
00010C94 6600                       		bne.s	loc_101A0
00010C96 303C 00C0                  		move.w	#$C0,d0
00010C9A 4EB9 0000 147C             		jsr	(PlaySound_Special).l ;	play flapping sound
00010CA0                            
00010CA0                            loc_101A0:
00010CA0 6100 D40E                  		bsr.w	SpeedToPos
00010CA4 3038 D008                  		move.w	($FFFFD008).w,d0
00010CA8 9068 0008                  		sub.w	8(a0),d0
00010CAC 6400                       		bcc.s	loc_101B0
00010CAE 4440                       		neg.w	d0
00010CB0                            
00010CB0                            loc_101B0:
00010CB0 0C40 0080                  		cmpi.w	#$80,d0
00010CB4 6500                       		bcs.s	locret_101C6
00010CB6 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00010CBA D007                       		add.b	d7,d0
00010CBC 0200 0007                  		andi.b	#7,d0
00010CC0 6600                       		bne.s	locret_101C6
00010CC2 5428 0025                  		addq.b	#2,$25(a0)
00010CC6                            
00010CC6                            locret_101C6:
00010CC6 4E75                       		rts	
00010CC8                            ; ===========================================================================
00010CC8                            
00010CC8                            Obj55_FlyUp:				; XREF: Obj55_Index2
00010CC8 6100 D3E6                  		bsr.w	SpeedToPos
00010CCC 0468 0018 0012             		subi.w	#$18,$12(a0)	; make basaran fly upwards
00010CD2 6100 0000                  		bsr.w	ObjHitCeiling
00010CD6 4A41                       		tst.w	d1		; has basaran hit the ceiling?
00010CD8 6A00                       		bpl.s	locret_101F4	; if not, branch
00010CDA 9368 000C                  		sub.w	d1,$C(a0)
00010CDE 0268 FFF8 0008             		andi.w	#$FFF8,8(a0)
00010CE4 4268 0010                  		clr.w	$10(a0)		; stop basaran moving
00010CE8 4268 0012                  		clr.w	$12(a0)
00010CEC 4228 001C                  		clr.b	$1C(a0)
00010CF0 4228 0025                  		clr.b	$25(a0)
00010CF4                            
00010CF4                            locret_101F4:
00010CF4 4E75                       		rts	
00010CF6                            ; ===========================================================================
00010CF6                            
00010CF6                            Obj55_ChkSonic:				; XREF: Obj55_ChkDrop
00010CF6 323C 0100                  		move.w	#$100,d1
00010CFA 08E8 0000 0022             		bset	#0,$22(a0)
00010D00 3038 D008                  		move.w	($FFFFD008).w,d0
00010D04 9068 0008                  		sub.w	8(a0),d0
00010D08 6400                       		bcc.s	loc_10214
00010D0A 4440                       		neg.w	d0
00010D0C 4441                       		neg.w	d1
00010D0E 08A8 0000 0022             		bclr	#0,$22(a0)
00010D14                            
00010D14                            loc_10214:
00010D14 B042                       		cmp.w	d2,d0
00010D16 4E75                       		rts	
00010D18                            ; ===========================================================================
00010D18 6100 D396                  		bsr.w	SpeedToPos
00010D1C 6100 D3B8                  		bsr.w	DisplaySprite
00010D20 4A28 0001                  		tst.b	1(a0)
00010D24 6A00 D3EC                  		bpl.w	DeleteObject
00010D28 4E75                       		rts	
00010D2A                            ; ===========================================================================
00010D2A                            Ani_obj55:
00010D2A                            	include "_anim\obj55.asm"
00010D2A                            ; ---------------------------------------------------------------------------
00010D2A                            ; Animation script - Basaran enemy
00010D2A                            ; ---------------------------------------------------------------------------
00010D2A 0000                       		dc.w byte_10230-Ani_obj55
00010D2C 0000                       		dc.w byte_10234-Ani_obj55
00010D2E 0000                       		dc.w byte_10238-Ani_obj55
00010D30 0F00 FF00                  byte_10230:	dc.b $F, 0, $FF, 0
00010D34 0F01 FF00                  byte_10234:	dc.b $F, 1, $FF, 0
00010D38 0301 0203 02FF             byte_10238:	dc.b 3,	1, 2, 3, 2, $FF
00010D3E                            		even
00010D3E                            		even
00010D3E                            
00010D3E                            ; ---------------------------------------------------------------------------
00010D3E                            ; Sprite mappings - Basaran enemy (MZ)
00010D3E                            ; ---------------------------------------------------------------------------
00010D3E                            Map_obj55:
00010D3E                            	include "_maps\obj55.asm"
00010D3E                            ; ---------------------------------------------------------------------------
00010D3E                            ; Sprite mappings - Basaran enemy (MZ)
00010D3E                            ; ---------------------------------------------------------------------------
00010D3E 0000 0000                  		dc.w byte_10246-Map_obj55, byte_1024C-Map_obj55
00010D42 0000 0000                  		dc.w byte_1025C-Map_obj55, byte_10271-Map_obj55
00010D46 01                         byte_10246:	dc.b 1
00010D47 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
00010D4C 03                         byte_1024C:	dc.b 3
00010D4D F20E 0006 F4               		dc.b $F2, $E, 0, 6, $F4
00010D52 0A04 0012 FC               		dc.b $A, 4, 0, $12, $FC
00010D57 0200 0027 0C               		dc.b 2,	0, 0, $27, $C
00010D5C 04                         byte_1025C:	dc.b 4
00010D5D F804 0014 F8               		dc.b $F8, 4, 0,	$14, $F8
00010D62 000C 0016 F0               		dc.b 0,	$C, 0, $16, $F0
00010D67 0804 001A 00               		dc.b 8,	4, 0, $1A, 0
00010D6C 0000 0028 0C               		dc.b 0,	0, 0, $28, $C
00010D71 04                         byte_10271:	dc.b 4
00010D72 F609 001C F5               		dc.b $F6, 9, 0,	$1C, $F5
00010D77 0608 0022 F4               		dc.b 6,	8, 0, $22, $F4
00010D7C 0E04 0025 F4               		dc.b $E, 4, 0, $25, $F4
00010D81 FE00 0027 0C               		dc.b $FE, 0, 0,	$27, $C
00010D86                            		even
00010D86                            		even
00010D86                            
00010D86                            ; ===========================================================================
00010D86                            ; ---------------------------------------------------------------------------
00010D86                            ; Object 56 - moving blocks (SYZ/SLZ), large doors (LZ)
00010D86                            ; ---------------------------------------------------------------------------
00010D86                            
00010D86                            Obj56:					; XREF: Obj_Index
00010D86 7000                       		moveq	#0,d0
00010D88 1028 0024                  		move.b	$24(a0),d0
00010D8C 323B 0000                  		move.w	Obj56_Index(pc,d0.w),d1
00010D90 4EFB 1000                  		jmp	Obj56_Index(pc,d1.w)
00010D94                            ; ===========================================================================
00010D94 0000                       Obj56_Index:	dc.w Obj56_Main-Obj56_Index
00010D96 0000                       		dc.w Obj56_Action-Obj56_Index
00010D98                            
00010D98 1010                       Obj56_Var:	dc.b  $10, $10		; width, height
00010D9A 2020                       		dc.b  $20, $20
00010D9C 1020                       		dc.b  $10, $20
00010D9E 201A                       		dc.b  $20, $1A
00010DA0 1027                       		dc.b  $10, $27
00010DA2 1010                       		dc.b  $10, $10
00010DA4 0820                       		dc.b	8, $20
00010DA6 4010                       		dc.b  $40, $10
00010DA8                            ; ===========================================================================
00010DA8                            
00010DA8                            Obj56_Main:				; XREF: Obj56_Index
00010DA8 5428 0024                  		addq.b	#2,$24(a0)
00010DAC 217C 0000 0000 0004        		move.l	#Map_obj56,4(a0)
00010DB4 317C 4000 0002             		move.w	#$4000,2(a0)
00010DBA 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00010DC0 6600                       		bne.s	loc_102C8
00010DC2 317C 43C4 0002             		move.w	#$43C4,2(a0)	; LZ specific code
00010DC8                            
00010DC8                            loc_102C8:
00010DC8 117C 0004 0001             		move.b	#4,1(a0)
00010DCE 117C 0003 0018             		move.b	#3,$18(a0)
00010DD4 7000                       		moveq	#0,d0
00010DD6 1028 0028                  		move.b	$28(a0),d0
00010DDA E648                       		lsr.w	#3,d0
00010DDC 0240 000E                  		andi.w	#$E,d0
00010DE0 45FB 00B6                  		lea	Obj56_Var(pc,d0.w),a2
00010DE4 115A 0019                  		move.b	(a2)+,$19(a0)
00010DE8 1152 0016                  		move.b	(a2),$16(a0)
00010DEC E248                       		lsr.w	#1,d0
00010DEE 1140 001A                  		move.b	d0,$1A(a0)
00010DF2 3168 0008 0034             		move.w	8(a0),$34(a0)
00010DF8 3168 000C 0030             		move.w	$C(a0),$30(a0)
00010DFE 7000                       		moveq	#0,d0
00010E00 1012                       		move.b	(a2),d0
00010E02 D040                       		add.w	d0,d0
00010E04 3140 003A                  		move.w	d0,$3A(a0)
00010E08 7000                       		moveq	#0,d0
00010E0A 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00010E10 6700                       		beq.s	loc_10332
00010E12 1028 0028                  		move.b	$28(a0),d0	; SYZ/SLZ specific code
00010E16 0240 000F                  		andi.w	#$F,d0
00010E1A 5140                       		subq.w	#8,d0
00010E1C 6500                       		bcs.s	loc_10332
00010E1E E548                       		lsl.w	#2,d0
00010E20 45F8 FE8A                  		lea	($FFFFFE8A).w,a2
00010E24 45F2 0000                  		lea	(a2,d0.w),a2
00010E28 4A52                       		tst.w	(a2)
00010E2A 6A00                       		bpl.s	loc_10332
00010E2C 0868 0000 0022             		bchg	#0,$22(a0)
00010E32                            
00010E32                            loc_10332:
00010E32 1028 0028                  		move.b	$28(a0),d0
00010E36 6A00                       		bpl.s	Obj56_Action
00010E38 0200 000F                  		andi.b	#$F,d0
00010E3C 1140 003C                  		move.b	d0,$3C(a0)
00010E40 117C 0005 0028             		move.b	#5,$28(a0)
00010E46 0C28 0007 001A             		cmpi.b	#7,$1A(a0)
00010E4C 6600                       		bne.s	Obj56_ChkGone
00010E4E 117C 000C 0028             		move.b	#$C,$28(a0)
00010E54 317C 0080 003A             		move.w	#$80,$3A(a0)
00010E5A                            
00010E5A                            Obj56_ChkGone:
00010E5A 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010E5E 7000                       		moveq	#0,d0
00010E60 1028 0023                  		move.b	$23(a0),d0
00010E64 6700                       		beq.s	Obj56_Action
00010E66 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00010E6C 0832 0000 0002             		btst	#0,2(a2,d0.w)
00010E72 6700                       		beq.s	Obj56_Action
00010E74 5228 0028                  		addq.b	#1,$28(a0)
00010E78 4268 003A                  		clr.w	$3A(a0)
00010E7C                            
00010E7C                            Obj56_Action:				; XREF: Obj56_Index
00010E7C 3F28 0008                  		move.w	8(a0),-(sp)
00010E80 7000                       		moveq	#0,d0
00010E82 1028 0028                  		move.b	$28(a0),d0	; get object type
00010E86 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00010E8A D040                       		add.w	d0,d0
00010E8C 323B 0000                  		move.w	Obj56_TypeIndex(pc,d0.w),d1
00010E90 4EBB 1000                  		jsr	Obj56_TypeIndex(pc,d1.w)
00010E94 381F                       		move.w	(sp)+,d4
00010E96 4A28 0001                  		tst.b	1(a0)
00010E9A 6A00                       		bpl.s	Obj56_ChkDel
00010E9C 7200                       		moveq	#0,d1
00010E9E 1228 0019                  		move.b	$19(a0),d1
00010EA2 0641 000B                  		addi.w	#$B,d1
00010EA6 7400                       		moveq	#0,d2
00010EA8 1428 0016                  		move.b	$16(a0),d2
00010EAC 3602                       		move.w	d2,d3
00010EAE 5243                       		addq.w	#1,d3
00010EB0 6100 F60E                  		bsr.w	SolidObject
00010EB4                            
00010EB4                            Obj56_ChkDel:
00010EB4 3028 0034                  		move.w	$34(a0),d0
00010EB8 0240 FF80                  		andi.w	#$FF80,d0
00010EBC 3238 F700                  		move.w	($FFFFF700).w,d1
00010EC0 0441 0080                  		subi.w	#$80,d1
00010EC4 0241 FF80                  		andi.w	#$FF80,d1
00010EC8 9041                       		sub.w	d1,d0
00010ECA 0C40 0280                  		cmpi.w	#$280,d0
00010ECE 6200 D242                  		bhi.w	DeleteObject
00010ED2 6000 D202                  		bra.w	DisplaySprite
00010ED6                            ; ===========================================================================
00010ED6 0000 0000                  Obj56_TypeIndex:dc.w Obj56_Type00-Obj56_TypeIndex, Obj56_Type01-Obj56_TypeIndex
00010EDA 0000 0000                  		dc.w Obj56_Type02-Obj56_TypeIndex, Obj56_Type03-Obj56_TypeIndex
00010EDE 0000 0000                  		dc.w Obj56_Type04-Obj56_TypeIndex, Obj56_Type05-Obj56_TypeIndex
00010EE2 0000 0000                  		dc.w Obj56_Type06-Obj56_TypeIndex, Obj56_Type07-Obj56_TypeIndex
00010EE6 0000 0000                  		dc.w Obj56_Type08-Obj56_TypeIndex, Obj56_Type09-Obj56_TypeIndex
00010EEA 0000 0000                  		dc.w Obj56_Type0A-Obj56_TypeIndex, Obj56_Type0B-Obj56_TypeIndex
00010EEE 0000 0000                  		dc.w Obj56_Type0C-Obj56_TypeIndex, Obj56_Type0D-Obj56_TypeIndex
00010EF2                            ; ===========================================================================
00010EF2                            
00010EF2                            Obj56_Type00:				; XREF: Obj56_TypeIndex
00010EF2 4E75                       		rts	
00010EF4                            ; ===========================================================================
00010EF4                            
00010EF4                            Obj56_Type01:				; XREF: Obj56_TypeIndex
00010EF4 323C 0040                  		move.w	#$40,d1
00010EF8 7000                       		moveq	#0,d0
00010EFA 1038 FE68                  		move.b	($FFFFFE68).w,d0
00010EFE 6000                       		bra.s	Obj56_Move_LR
00010F00                            ; ===========================================================================
00010F00                            
00010F00                            Obj56_Type02:				; XREF: Obj56_TypeIndex
00010F00 323C 0080                  		move.w	#$80,d1
00010F04 7000                       		moveq	#0,d0
00010F06 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
00010F0A                            
00010F0A                            Obj56_Move_LR:
00010F0A 0828 0000 0022             		btst	#0,$22(a0)
00010F10 6700                       		beq.s	loc_10416
00010F12 4440                       		neg.w	d0
00010F14 D041                       		add.w	d1,d0
00010F16                            
00010F16                            loc_10416:
00010F16 3228 0034                  		move.w	$34(a0),d1
00010F1A 9240                       		sub.w	d0,d1
00010F1C 3141 0008                  		move.w	d1,8(a0)	; move object horizontally
00010F20 4E75                       		rts	
00010F22                            ; ===========================================================================
00010F22                            
00010F22                            Obj56_Type03:				; XREF: Obj56_TypeIndex
00010F22 323C 0040                  		move.w	#$40,d1
00010F26 7000                       		moveq	#0,d0
00010F28 1038 FE68                  		move.b	($FFFFFE68).w,d0
00010F2C 6000                       		bra.s	Obj56_Move_UD
00010F2E                            ; ===========================================================================
00010F2E                            
00010F2E                            Obj56_Type04:				; XREF: Obj56_TypeIndex
00010F2E 323C 0080                  		move.w	#$80,d1
00010F32 7000                       		moveq	#0,d0
00010F34 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
00010F38                            
00010F38                            Obj56_Move_UD:
00010F38 0828 0000 0022             		btst	#0,$22(a0)
00010F3E 6700                       		beq.s	loc_10444
00010F40 4440                       		neg.w	d0
00010F42 D041                       		add.w	d1,d0
00010F44                            
00010F44                            loc_10444:
00010F44 3228 0030                  		move.w	$30(a0),d1
00010F48 9240                       		sub.w	d0,d1
00010F4A 3141 000C                  		move.w	d1,$C(a0)	; move object vertically
00010F4E 4E75                       		rts	
00010F50                            ; ===========================================================================
00010F50                            
00010F50                            Obj56_Type05:				; XREF: Obj56_TypeIndex
00010F50 4A28 0038                  		tst.b	$38(a0)
00010F54 6600                       		bne.s	loc_104A4
00010F56 0C78 0100 FE10             		cmpi.w	#$100,($FFFFFE10).w ; is level LZ1 ?
00010F5C 6600                       		bne.s	loc_1047A	; if not, branch
00010F5E 0C28 0003 003C             		cmpi.b	#3,$3C(a0)
00010F64 6600                       		bne.s	loc_1047A
00010F66 4238 F7C9                  		clr.b	($FFFFF7C9).w
00010F6A 3038 D008                  		move.w	($FFFFD008).w,d0
00010F6E B068 0008                  		cmp.w	8(a0),d0
00010F72 6400                       		bcc.s	loc_1047A
00010F74 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w
00010F7A                            
00010F7A                            loc_1047A:
00010F7A 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00010F7E 7000                       		moveq	#0,d0
00010F80 1028 003C                  		move.b	$3C(a0),d0
00010F84 0832 0000 0000             		btst	#0,(a2,d0.w)
00010F8A 6700                       		beq.s	loc_104AE
00010F8C 0C78 0100 FE10             		cmpi.w	#$100,($FFFFFE10).w ; is level LZ1 ?
00010F92 6600                       		bne.s	loc_1049E	; if not, branch
00010F94 0C00 0003                  		cmpi.b	#3,d0
00010F98 6600                       		bne.s	loc_1049E
00010F9A 4238 F7C9                  		clr.b	($FFFFF7C9).w
00010F9E                            
00010F9E                            loc_1049E:
00010F9E 117C 0001 0038             		move.b	#1,$38(a0)
00010FA4                            
00010FA4                            loc_104A4:
00010FA4 4A68 003A                  		tst.w	$3A(a0)
00010FA8 6700                       		beq.s	loc_104C8
00010FAA 5568 003A                  		subq.w	#2,$3A(a0)
00010FAE                            
00010FAE                            loc_104AE:
00010FAE 3028 003A                  		move.w	$3A(a0),d0
00010FB2 0828 0000 0022             		btst	#0,$22(a0)
00010FB8 6700                       		beq.s	loc_104BC
00010FBA 4440                       		neg.w	d0
00010FBC                            
00010FBC                            loc_104BC:
00010FBC 3228 0030                  		move.w	$30(a0),d1
00010FC0 D240                       		add.w	d0,d1
00010FC2 3141 000C                  		move.w	d1,$C(a0)
00010FC6 4E75                       		rts	
00010FC8                            ; ===========================================================================
00010FC8                            
00010FC8                            loc_104C8:
00010FC8 5228 0028                  		addq.b	#1,$28(a0)
00010FCC 4228 0038                  		clr.b	$38(a0)
00010FD0 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010FD4 7000                       		moveq	#0,d0
00010FD6 1028 0023                  		move.b	$23(a0),d0
00010FDA 67D2                       		beq.s	loc_104AE
00010FDC 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00010FE2 60CA                       		bra.s	loc_104AE
00010FE4                            ; ===========================================================================
00010FE4                            
00010FE4                            Obj56_Type06:				; XREF: Obj56_TypeIndex
00010FE4 4A28 0038                  		tst.b	$38(a0)
00010FE8 6600                       		bne.s	loc_10500
00010FEA 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00010FEE 7000                       		moveq	#0,d0
00010FF0 1028 003C                  		move.b	$3C(a0),d0
00010FF4 4A32 0000                  		tst.b	(a2,d0.w)
00010FF8 6A00                       		bpl.s	loc_10512
00010FFA 117C 0001 0038             		move.b	#1,$38(a0)
00011000                            
00011000                            loc_10500:
00011000 7000                       		moveq	#0,d0
00011002 1028 0016                  		move.b	$16(a0),d0
00011006 D040                       		add.w	d0,d0
00011008 B068 003A                  		cmp.w	$3A(a0),d0
0001100C 6700                       		beq.s	loc_1052C
0001100E 5468 003A                  		addq.w	#2,$3A(a0)
00011012                            
00011012                            loc_10512:
00011012 3028 003A                  		move.w	$3A(a0),d0
00011016 0828 0000 0022             		btst	#0,$22(a0)
0001101C 6700                       		beq.s	loc_10520
0001101E 4440                       		neg.w	d0
00011020                            
00011020                            loc_10520:
00011020 3228 0030                  		move.w	$30(a0),d1
00011024 D240                       		add.w	d0,d1
00011026 3141 000C                  		move.w	d1,$C(a0)
0001102A 4E75                       		rts	
0001102C                            ; ===========================================================================
0001102C                            
0001102C                            loc_1052C:
0001102C 5328 0028                  		subq.b	#1,$28(a0)
00011030 4228 0038                  		clr.b	$38(a0)
00011034 45F8 FC00                  		lea	($FFFFFC00).w,a2
00011038 7000                       		moveq	#0,d0
0001103A 1028 0023                  		move.b	$23(a0),d0
0001103E 67D2                       		beq.s	loc_10512
00011040 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
00011046 60CA                       		bra.s	loc_10512
00011048                            ; ===========================================================================
00011048                            
00011048                            Obj56_Type07:				; XREF: Obj56_TypeIndex
00011048 4A28 0038                  		tst.b	$38(a0)
0001104C 6600                       		bne.s	loc_1055E
0001104E 4A38 F7EF                  		tst.b	($FFFFF7EF).w	; has switch number $F been pressed?
00011052 6700                       		beq.s	locret_10578
00011054 117C 0001 0038             		move.b	#1,$38(a0)
0001105A 4268 003A                  		clr.w	$3A(a0)
0001105E                            
0001105E                            loc_1055E:
0001105E 5268 0008                  		addq.w	#1,8(a0)
00011062 3168 0008 0034             		move.w	8(a0),$34(a0)
00011068 5268 003A                  		addq.w	#1,$3A(a0)
0001106C 0C68 0380 003A             		cmpi.w	#$380,$3A(a0)
00011072 6600                       		bne.s	locret_10578
00011074 4228 0028                  		clr.b	$28(a0)
00011078                            
00011078                            locret_10578:
00011078 4E75                       		rts	
0001107A                            ; ===========================================================================
0001107A                            
0001107A                            Obj56_Type0C:				; XREF: Obj56_TypeIndex
0001107A 4A28 0038                  		tst.b	$38(a0)
0001107E 6600                       		bne.s	loc_10598
00011080 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00011084 7000                       		moveq	#0,d0
00011086 1028 003C                  		move.b	$3C(a0),d0
0001108A 0832 0000 0000             		btst	#0,(a2,d0.w)
00011090 6700                       		beq.s	loc_105A2
00011092 117C 0001 0038             		move.b	#1,$38(a0)
00011098                            
00011098                            loc_10598:
00011098 4A68 003A                  		tst.w	$3A(a0)
0001109C 6700                       		beq.s	loc_105C0
0001109E 5568 003A                  		subq.w	#2,$3A(a0)
000110A2                            
000110A2                            loc_105A2:
000110A2 3028 003A                  		move.w	$3A(a0),d0
000110A6 0828 0000 0022             		btst	#0,$22(a0)
000110AC 6700                       		beq.s	loc_105B4
000110AE 4440                       		neg.w	d0
000110B0 0640 0080                  		addi.w	#$80,d0
000110B4                            
000110B4                            loc_105B4:
000110B4 3228 0034                  		move.w	$34(a0),d1
000110B8 D240                       		add.w	d0,d1
000110BA 3141 0008                  		move.w	d1,8(a0)
000110BE 4E75                       		rts	
000110C0                            ; ===========================================================================
000110C0                            
000110C0                            loc_105C0:
000110C0 5228 0028                  		addq.b	#1,$28(a0)
000110C4 4228 0038                  		clr.b	$38(a0)
000110C8 45F8 FC00                  		lea	($FFFFFC00).w,a2
000110CC 7000                       		moveq	#0,d0
000110CE 1028 0023                  		move.b	$23(a0),d0
000110D2 67CE                       		beq.s	loc_105A2
000110D4 08F2 0000 0002             		bset	#0,2(a2,d0.w)
000110DA 60C6                       		bra.s	loc_105A2
000110DC                            ; ===========================================================================
000110DC                            
000110DC                            Obj56_Type0D:				; XREF: Obj56_TypeIndex
000110DC 4A28 0038                  		tst.b	$38(a0)
000110E0 6600                       		bne.s	loc_105F8
000110E2 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
000110E6 7000                       		moveq	#0,d0
000110E8 1028 003C                  		move.b	$3C(a0),d0
000110EC 4A32 0000                  		tst.b	(a2,d0.w)
000110F0 6A00                       		bpl.s	loc_10606
000110F2 117C 0001 0038             		move.b	#1,$38(a0)
000110F8                            
000110F8                            loc_105F8:
000110F8 303C 0080                  		move.w	#$80,d0
000110FC B068 003A                  		cmp.w	$3A(a0),d0
00011100 6700                       		beq.s	loc_10624
00011102 5468 003A                  		addq.w	#2,$3A(a0)
00011106                            
00011106                            loc_10606:
00011106 3028 003A                  		move.w	$3A(a0),d0
0001110A 0828 0000 0022             		btst	#0,$22(a0)
00011110 6700                       		beq.s	loc_10618
00011112 4440                       		neg.w	d0
00011114 0640 0080                  		addi.w	#$80,d0
00011118                            
00011118                            loc_10618:
00011118 3228 0034                  		move.w	$34(a0),d1
0001111C D240                       		add.w	d0,d1
0001111E 3141 0008                  		move.w	d1,8(a0)
00011122 4E75                       		rts	
00011124                            ; ===========================================================================
00011124                            
00011124                            loc_10624:
00011124 5328 0028                  		subq.b	#1,$28(a0)
00011128 4228 0038                  		clr.b	$38(a0)
0001112C 45F8 FC00                  		lea	($FFFFFC00).w,a2
00011130 7000                       		moveq	#0,d0
00011132 1028 0023                  		move.b	$23(a0),d0
00011136 67CE                       		beq.s	loc_10606
00011138 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
0001113E 60C6                       		bra.s	loc_10606
00011140                            ; ===========================================================================
00011140                            
00011140                            Obj56_Type08:				; XREF: Obj56_TypeIndex
00011140 323C 0010                  		move.w	#$10,d1
00011144 7000                       		moveq	#0,d0
00011146 1038 FE88                  		move.b	($FFFFFE88).w,d0
0001114A E248                       		lsr.w	#1,d0
0001114C 3638 FE8A                  		move.w	($FFFFFE8A).w,d3
00011150 6000                       		bra.s	Obj56_Move_Sqr
00011152                            ; ===========================================================================
00011152                            
00011152                            Obj56_Type09:				; XREF: Obj56_TypeIndex
00011152 323C 0030                  		move.w	#$30,d1
00011156 7000                       		moveq	#0,d0
00011158 1038 FE8C                  		move.b	($FFFFFE8C).w,d0
0001115C 3638 FE8E                  		move.w	($FFFFFE8E).w,d3
00011160 6000                       		bra.s	Obj56_Move_Sqr
00011162                            ; ===========================================================================
00011162                            
00011162                            Obj56_Type0A:				; XREF: Obj56_TypeIndex
00011162 323C 0050                  		move.w	#$50,d1
00011166 7000                       		moveq	#0,d0
00011168 1038 FE90                  		move.b	($FFFFFE90).w,d0
0001116C 3638 FE92                  		move.w	($FFFFFE92).w,d3
00011170 6000                       		bra.s	Obj56_Move_Sqr
00011172                            ; ===========================================================================
00011172                            
00011172                            Obj56_Type0B:				; XREF: Obj56_TypeIndex
00011172 323C 0070                  		move.w	#$70,d1
00011176 7000                       		moveq	#0,d0
00011178 1038 FE94                  		move.b	($FFFFFE94).w,d0
0001117C 3638 FE96                  		move.w	($FFFFFE96).w,d3
00011180                            
00011180                            Obj56_Move_Sqr:
00011180 4A43                       		tst.w	d3
00011182 6600                       		bne.s	loc_1068E
00011184 5228 0022                  		addq.b	#1,$22(a0)
00011188 0228 0003 0022             		andi.b	#3,$22(a0)
0001118E                            
0001118E                            loc_1068E:
0001118E 1428 0022                  		move.b	$22(a0),d2
00011192 0202 0003                  		andi.b	#3,d2
00011196 6600                       		bne.s	loc_106AE
00011198 9041                       		sub.w	d1,d0
0001119A D068 0034                  		add.w	$34(a0),d0
0001119E 3140 0008                  		move.w	d0,8(a0)
000111A2 4441                       		neg.w	d1
000111A4 D268 0030                  		add.w	$30(a0),d1
000111A8 3141 000C                  		move.w	d1,$C(a0)
000111AC 4E75                       		rts	
000111AE                            ; ===========================================================================
000111AE                            
000111AE                            loc_106AE:
000111AE 5302                       		subq.b	#1,d2
000111B0 6600                       		bne.s	loc_106CC
000111B2 5341                       		subq.w	#1,d1
000111B4 9041                       		sub.w	d1,d0
000111B6 4440                       		neg.w	d0
000111B8 D068 0030                  		add.w	$30(a0),d0
000111BC 3140 000C                  		move.w	d0,$C(a0)
000111C0 5241                       		addq.w	#1,d1
000111C2 D268 0034                  		add.w	$34(a0),d1
000111C6 3141 0008                  		move.w	d1,8(a0)
000111CA 4E75                       		rts	
000111CC                            ; ===========================================================================
000111CC                            
000111CC                            loc_106CC:
000111CC 5302                       		subq.b	#1,d2
000111CE 6600                       		bne.s	loc_106EA
000111D0 5341                       		subq.w	#1,d1
000111D2 9041                       		sub.w	d1,d0
000111D4 4440                       		neg.w	d0
000111D6 D068 0034                  		add.w	$34(a0),d0
000111DA 3140 0008                  		move.w	d0,8(a0)
000111DE 5241                       		addq.w	#1,d1
000111E0 D268 0030                  		add.w	$30(a0),d1
000111E4 3141 000C                  		move.w	d1,$C(a0)
000111E8 4E75                       		rts	
000111EA                            ; ===========================================================================
000111EA                            
000111EA                            loc_106EA:
000111EA 9041                       		sub.w	d1,d0
000111EC D068 0030                  		add.w	$30(a0),d0
000111F0 3140 000C                  		move.w	d0,$C(a0)
000111F4 4441                       		neg.w	d1
000111F6 D268 0034                  		add.w	$34(a0),d1
000111FA 3141 0008                  		move.w	d1,8(a0)
000111FE 4E75                       		rts	
00011200                            ; ===========================================================================
00011200                            ; ---------------------------------------------------------------------------
00011200                            ; Sprite mappings - moving blocks (SYZ/SLZ/LZ)
00011200                            ; ---------------------------------------------------------------------------
00011200                            Map_obj56:
00011200                            	include "_maps\obj56.asm"
00011200                            ; ---------------------------------------------------------------------------
00011200                            ; Sprite mappings - moving blocks (SYZ/SLZ/LZ)
00011200                            ; ---------------------------------------------------------------------------
00011200 0000 0000                  		dc.w byte_10710-Map_obj56, byte_10716-Map_obj56
00011204 0000 0000                  		dc.w byte_1072B-Map_obj56, byte_10736-Map_obj56
00011208 0000 0000                  		dc.w byte_1074B-Map_obj56, byte_1075B-Map_obj56
0001120C 0000 0000                  		dc.w byte_10761-Map_obj56, byte_1076C-Map_obj56
00011210 01                         byte_10710:	dc.b 1
00011211 F00F 0061 F0               		dc.b $F0, $F, 0, $61, $F0
00011216 04                         byte_10716:	dc.b 4
00011217 E00F 0061 E0               		dc.b $E0, $F, 0, $61, $E0
0001121C E00F 0061 00               		dc.b $E0, $F, 0, $61, 0
00011221 000F 0061 E0               		dc.b 0,	$F, 0, $61, $E0
00011226 000F 0061 00               		dc.b 0,	$F, 0, $61, 0
0001122B 02                         byte_1072B:	dc.b 2
0001122C E00F 0061 F0               		dc.b $E0, $F, 0, $61, $F0
00011231 000F 0061 F0               		dc.b 0,	$F, 0, $61, $F0
00011236 04                         byte_10736:	dc.b 4
00011237 E60F 0081 E0               		dc.b $E6, $F, 0, $81, $E0
0001123C E60F 0081 00               		dc.b $E6, $F, 0, $81, 0
00011241 000F 0081 E0               		dc.b 0,	$F, 0, $81, $E0
00011246 000F 0081 00               		dc.b 0,	$F, 0, $81, 0
0001124B 03                         byte_1074B:	dc.b 3
0001124C D90F 0081 F0               		dc.b $D9, $F, 0, $81, $F0
00011251 F30F 0081 F0               		dc.b $F3, $F, 0, $81, $F0
00011256 0D0F 0081 F0               		dc.b $D, $F, 0,	$81, $F0
0001125B 01                         byte_1075B:	dc.b 1
0001125C F00F 0021 F0               		dc.b $F0, $F, 0, $21, $F0
00011261 02                         byte_10761:	dc.b 2
00011262 E007 0000 F8               		dc.b $E0, 7, 0,	0, $F8
00011267 0007 1000 F8               		dc.b 0,	7, $10,	0, $F8
0001126C 04                         byte_1076C:	dc.b 4
0001126D F00F 0022 C0               		dc.b $F0, $F, 0, $22, $C0
00011272 F00F 0022 E0               		dc.b $F0, $F, 0, $22, $E0
00011277 F00F 0022 00               		dc.b $F0, $F, 0, $22, 0
0001127C F00F 0022 20               		dc.b $F0, $F, 0, $22, $20
00011282 00                         		even
00011282 00                         		even
00011282                            
00011282                            ; ===========================================================================
00011282                            ; ---------------------------------------------------------------------------
00011282                            ; Object 57 - spiked balls (SYZ, LZ)
00011282                            ; ---------------------------------------------------------------------------
00011282                            
00011282                            Obj57:					; XREF: Obj_Index
00011282 7000                       		moveq	#0,d0
00011284 1028 0024                  		move.b	$24(a0),d0
00011288 323B 0000                  		move.w	Obj57_Index(pc,d0.w),d1
0001128C 4EFB 1000                  		jmp	Obj57_Index(pc,d1.w)
00011290                            ; ===========================================================================
00011290 0000                       Obj57_Index:	dc.w Obj57_Main-Obj57_Index
00011292 0000                       		dc.w Obj57_Move-Obj57_Index
00011294 0000                       		dc.w Obj57_Display-Obj57_Index
00011296                            ; ===========================================================================
00011296                            
00011296                            Obj57_Main:				; XREF: Obj57_Index
00011296 5428 0024                  		addq.b	#2,$24(a0)
0001129A 217C 0000 0000 0004        		move.l	#Map_obj57,4(a0)
000112A2 317C 03BA 0002             		move.w	#$3BA,2(a0)
000112A8 117C 0004 0001             		move.b	#4,1(a0)
000112AE 117C 0004 0018             		move.b	#4,$18(a0)
000112B4 117C 0008 0019             		move.b	#8,$19(a0)
000112BA 3168 0008 003A             		move.w	8(a0),$3A(a0)
000112C0 3168 000C 0038             		move.w	$C(a0),$38(a0)
000112C6 117C 0098 0020             		move.b	#$98,$20(a0)	; SYZ specific code (chain hurts Sonic)
000112CC 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
000112D2 6600                       		bne.s	loc_107E8
000112D4 117C 0000 0020             		move.b	#0,$20(a0)	; LZ specific code (chain doesn't hurt)
000112DA 317C 0310 0002             		move.w	#$310,2(a0)
000112E0 217C 0000 0000 0004        		move.l	#Map_obj57a,4(a0)
000112E8                            
000112E8                            loc_107E8:
000112E8 1228 0028                  		move.b	$28(a0),d1	; get object type
000112EC 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
000112F0 4881                       		ext.w	d1
000112F2 E741                       		asl.w	#3,d1		; multiply by 8
000112F4 3141 003E                  		move.w	d1,$3E(a0)	; set object twirl speed
000112F8 1028 0022                  		move.b	$22(a0),d0
000112FC E418                       		ror.b	#2,d0
000112FE 0200 00C0                  		andi.b	#-$40,d0
00011302 1140 0026                  		move.b	d0,$26(a0)
00011306 45E8 0029                  		lea	$29(a0),a2
0001130A 1228 0028                  		move.b	$28(a0),d1	; get object type
0001130E 0241 0007                  		andi.w	#7,d1		; read only the	2nd digit
00011312 14FC 0000                  		move.b	#0,(a2)+
00011316 3601                       		move.w	d1,d3
00011318 E94B                       		lsl.w	#4,d3
0001131A 1143 003C                  		move.b	d3,$3C(a0)
0001131E 5341                       		subq.w	#1,d1		; set chain length (type-1)
00011320 6500                       		bcs.s	loc_10894
00011322 0828 0003 0028             		btst	#3,$28(a0)
00011328 6700                       		beq.s	Obj57_MakeChain
0001132A 5341                       		subq.w	#1,d1
0001132C 6500                       		bcs.s	loc_10894
0001132E                            
0001132E                            Obj57_MakeChain:
0001132E 6100 D23C                  		bsr.w	SingleObjLoad
00011332 6600                       		bne.s	loc_10894
00011334 5228 0029                  		addq.b	#1,$29(a0)
00011338 3A09                       		move.w	a1,d5
0001133A 0445 D000                  		subi.w	#-$3000,d5
0001133E EC4D                       		lsr.w	#6,d5
00011340 0245 007F                  		andi.w	#$7F,d5
00011344 14C5                       		move.b	d5,(a2)+
00011346 137C 0004 0024             		move.b	#4,$24(a1)
0001134C 1290                       		move.b	0(a0),0(a1)
0001134E 2368 0004 0004             		move.l	4(a0),4(a1)
00011354 3368 0002 0002             		move.w	2(a0),2(a1)
0001135A 1368 0001 0001             		move.b	1(a0),1(a1)
00011360 1368 0018 0018             		move.b	$18(a0),$18(a1)
00011366 1368 0019 0019             		move.b	$19(a0),$19(a1)
0001136C 1368 0020 0020             		move.b	$20(a0),$20(a1)
00011372 0403 0010                  		subi.b	#$10,d3
00011376 1343 003C                  		move.b	d3,$3C(a1)
0001137A 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00011380 6600                       		bne.s	loc_10890
00011382 4A03                       		tst.b	d3
00011384 6600                       		bne.s	loc_10890
00011386 137C 0002 001A             		move.b	#2,$1A(a1)
0001138C                            
0001138C                            loc_10890:
0001138C 51C9 FFA0                  		dbf	d1,Obj57_MakeChain ; repeat for	length of chain
00011390                            
00011390                            loc_10894:
00011390 3A08                       		move.w	a0,d5
00011392 0445 D000                  		subi.w	#-$3000,d5
00011396 EC4D                       		lsr.w	#6,d5
00011398 0245 007F                  		andi.w	#$7F,d5
0001139C 14C5                       		move.b	d5,(a2)+
0001139E 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
000113A4 6600                       		bne.s	Obj57_Move
000113A6 117C 008B 0020             		move.b	#$8B,$20(a0)	; if yes, make last spikeball larger
000113AC 117C 0001 001A             		move.b	#1,$1A(a0)	; use different	frame
000113B2                            
000113B2                            Obj57_Move:				; XREF: Obj57_Index
000113B2 6100 0000                  		bsr.w	Obj57_MoveSub
000113B6 6000 0000                  		bra.w	Obj57_ChkDel
000113BA                            ; ===========================================================================
000113BA                            
000113BA                            Obj57_MoveSub:				; XREF: Obj57_Move
000113BA 3028 003E                  		move.w	$3E(a0),d0
000113BE D168 0026                  		add.w	d0,$26(a0)
000113C2 1028 0026                  		move.b	$26(a0),d0
000113C6 4EB9 0000 33DA             		jsr	(CalcSine).l
000113CC 3428 0038                  		move.w	$38(a0),d2
000113D0 3628 003A                  		move.w	$3A(a0),d3
000113D4 45E8 0029                  		lea	$29(a0),a2
000113D8 7C00                       		moveq	#0,d6
000113DA 1C1A                       		move.b	(a2)+,d6
000113DC                            
000113DC                            Obj57_MoveLoop:
000113DC 7800                       		moveq	#0,d4
000113DE 181A                       		move.b	(a2)+,d4
000113E0 ED4C                       		lsl.w	#6,d4
000113E2 0684 00FF D000             		addi.l	#$FFD000,d4
000113E8 2244                       		movea.l	d4,a1
000113EA 7800                       		moveq	#0,d4
000113EC 1829 003C                  		move.b	$3C(a1),d4
000113F0 2A04                       		move.l	d4,d5
000113F2 C9C0                       		muls.w	d0,d4
000113F4 E084                       		asr.l	#8,d4
000113F6 CBC1                       		muls.w	d1,d5
000113F8 E085                       		asr.l	#8,d5
000113FA D842                       		add.w	d2,d4
000113FC DA43                       		add.w	d3,d5
000113FE 3344 000C                  		move.w	d4,$C(a1)
00011402 3345 0008                  		move.w	d5,8(a1)
00011406 51CE FFD4                  		dbf	d6,Obj57_MoveLoop
0001140A 4E75                       		rts	
0001140C                            ; ===========================================================================
0001140C                            
0001140C                            Obj57_ChkDel:				; XREF: Obj57_Move
0001140C 3028 003A                  		move.w	$3A(a0),d0
00011410 0240 FF80                  		andi.w	#$FF80,d0
00011414 3238 F700                  		move.w	($FFFFF700).w,d1
00011418 0441 0080                  		subi.w	#$80,d1
0001141C 0241 FF80                  		andi.w	#$FF80,d1
00011420 9041                       		sub.w	d1,d0
00011422 0C40 0280                  		cmpi.w	#$280,d0
00011426 6200 0000                  		bhi.w	Obj57_Delete
0001142A 6000 CCAA                  		bra.w	DisplaySprite
0001142E                            ; ===========================================================================
0001142E                            
0001142E                            Obj57_Delete:				; XREF: Obj57_ChkDel
0001142E 7400                       		moveq	#0,d2
00011430 45E8 0029                  		lea	$29(a0),a2
00011434 141A                       		move.b	(a2)+,d2
00011436                            
00011436                            Obj57_DelLoop:
00011436 7000                       		moveq	#0,d0
00011438 101A                       		move.b	(a2)+,d0
0001143A ED48                       		lsl.w	#6,d0
0001143C 0680 00FF D000             		addi.l	#$FFD000,d0
00011442 2240                       		movea.l	d0,a1
00011444 6100 CCCE                  		bsr.w	DeleteObject2
00011448 51CA FFEC                  		dbf	d2,Obj57_DelLoop ; delete all pieces of	chain
0001144C                            
0001144C 4E75                       		rts	
0001144E                            ; ===========================================================================
0001144E                            
0001144E                            Obj57_Display:				; XREF: Obj57_Index
0001144E 6000 CC86                  		bra.w	DisplaySprite
00011452                            ; ===========================================================================
00011452                            ; ---------------------------------------------------------------------------
00011452                            ; Sprite mappings - chain of spiked balls (SYZ)
00011452                            ; ---------------------------------------------------------------------------
00011452                            Map_obj57:
00011452                            	include "_maps\obj57syz.asm"
00011452                            ; ---------------------------------------------------------------------------
00011452                            ; Sprite mappings - chain of spiked balls (SYZ)
00011452                            ; ---------------------------------------------------------------------------
00011452 0000                       		dc.w byte_10958-Map_obj57
00011454 01                         byte_10958:	dc.b 1
00011455 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0001145A                            		even
0001145A                            		even
0001145A                            
0001145A                            ; ---------------------------------------------------------------------------
0001145A                            ; Sprite mappings - spiked ball	on a chain (LZ)
0001145A                            ; ---------------------------------------------------------------------------
0001145A                            Map_obj57a:
0001145A                            	include "_maps\obj57lz.asm"
0001145A                            ; ---------------------------------------------------------------------------
0001145A                            ; Sprite mappings - spiked ball	on a chain (LZ)
0001145A                            ; ---------------------------------------------------------------------------
0001145A 0000                       		dc.w byte_10964-Map_obj57a
0001145C 0000                       		dc.w byte_1096A-Map_obj57a
0001145E 0000                       		dc.w byte_10970-Map_obj57a
00011460 01                         byte_10964:	dc.b 1
00011461 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00011466 01                         byte_1096A:	dc.b 1
00011467 F00F 0004 F0               		dc.b $F0, $F, 0, 4, $F0
0001146C 01                         byte_10970:	dc.b 1
0001146D F805 0014 F8               		dc.b $F8, 5, 0,	$14, $F8
00011472                            		even
00011472                            		even
00011472                            
00011472                            ; ===========================================================================
00011472                            ; ---------------------------------------------------------------------------
00011472                            ; Object 58 - giant spiked balls (SYZ)
00011472                            ; ---------------------------------------------------------------------------
00011472                            
00011472                            Obj58:					; XREF: Obj_Index
00011472 7000                       		moveq	#0,d0
00011474 1028 0024                  		move.b	$24(a0),d0
00011478 323B 0000                  		move.w	Obj58_Index(pc,d0.w),d1
0001147C 4EFB 1000                  		jmp	Obj58_Index(pc,d1.w)
00011480                            ; ===========================================================================
00011480 0000                       Obj58_Index:	dc.w Obj58_Main-Obj58_Index
00011482 0000                       		dc.w Obj58_Move-Obj58_Index
00011484                            ; ===========================================================================
00011484                            
00011484                            Obj58_Main:				; XREF: Obj58_Index
00011484 5428 0024                  		addq.b	#2,$24(a0)
00011488 217C 0000 0000 0004        		move.l	#Map_obj15b,4(a0)
00011490 317C 0396 0002             		move.w	#$396,2(a0)
00011496 117C 0004 0001             		move.b	#4,1(a0)
0001149C 117C 0004 0018             		move.b	#4,$18(a0)
000114A2 117C 0018 0019             		move.b	#$18,$19(a0)
000114A8 3168 0008 003A             		move.w	8(a0),$3A(a0)
000114AE 3168 000C 0038             		move.w	$C(a0),$38(a0)
000114B4 117C 0086 0020             		move.b	#$86,$20(a0)
000114BA 1228 0028                  		move.b	$28(a0),d1	; get object type
000114BE 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
000114C2 4881                       		ext.w	d1
000114C4 E741                       		asl.w	#3,d1		; multiply by 8
000114C6 3141 003E                  		move.w	d1,$3E(a0)	; set object speed
000114CA 1028 0022                  		move.b	$22(a0),d0
000114CE E418                       		ror.b	#2,d0
000114D0 0200 00C0                  		andi.b	#$C0,d0
000114D4 1140 0026                  		move.b	d0,$26(a0)
000114D8 117C 0050 003C             		move.b	#$50,$3C(a0)	; set diameter of circle of rotation
000114DE                            
000114DE                            Obj58_Move:				; XREF: Obj58_Index
000114DE 7000                       		moveq	#0,d0
000114E0 1028 0028                  		move.b	$28(a0),d0	; get object type
000114E4 0240 0007                  		andi.w	#7,d0		; read only the	2nd digit
000114E8 D040                       		add.w	d0,d0
000114EA 323B 0000                  		move.w	Obj58_TypeIndex(pc,d0.w),d1
000114EE 4EBB 1000                  		jsr	Obj58_TypeIndex(pc,d1.w)
000114F2 3028 003A                  		move.w	$3A(a0),d0
000114F6 0240 FF80                  		andi.w	#$FF80,d0
000114FA 3238 F700                  		move.w	($FFFFF700).w,d1
000114FE 0441 0080                  		subi.w	#$80,d1
00011502 0241 FF80                  		andi.w	#$FF80,d1
00011506 9041                       		sub.w	d1,d0
00011508 0C40 0280                  		cmpi.w	#$280,d0
0001150C 6200 CC04                  		bhi.w	DeleteObject
00011510 6000 CBC4                  		bra.w	DisplaySprite
00011514                            ; ===========================================================================
00011514 0000                       Obj58_TypeIndex:dc.w Obj58_Type00-Obj58_TypeIndex
00011516 0000                       		dc.w Obj58_Type01-Obj58_TypeIndex
00011518 0000                       		dc.w Obj58_Type02-Obj58_TypeIndex
0001151A 0000                       		dc.w Obj58_Type03-Obj58_TypeIndex
0001151C                            ; ===========================================================================
0001151C                            
0001151C                            Obj58_Type00:				; XREF: Obj58_TypeIndex
0001151C 4E75                       		rts	
0001151E                            ; ===========================================================================
0001151E                            
0001151E                            Obj58_Type01:				; XREF: Obj58_TypeIndex
0001151E 323C 0060                  		move.w	#$60,d1
00011522 7000                       		moveq	#0,d0
00011524 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
00011528 0828 0000 0022             		btst	#0,$22(a0)
0001152E 6700                       		beq.s	loc_10A38
00011530 4440                       		neg.w	d0
00011532 D041                       		add.w	d1,d0
00011534                            
00011534                            loc_10A38:
00011534 3228 003A                  		move.w	$3A(a0),d1
00011538 9240                       		sub.w	d0,d1
0001153A 3141 0008                  		move.w	d1,8(a0)	; move object horizontally
0001153E 4E75                       		rts	
00011540                            ; ===========================================================================
00011540                            
00011540                            Obj58_Type02:				; XREF: Obj58_TypeIndex
00011540 323C 0060                  		move.w	#$60,d1
00011544 7000                       		moveq	#0,d0
00011546 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
0001154A 0828 0000 0022             		btst	#0,$22(a0)
00011550 6700                       		beq.s	loc_10A5C
00011552 4440                       		neg.w	d0
00011554 0640 0080                  		addi.w	#$80,d0
00011558                            
00011558                            loc_10A5C:
00011558 3228 0038                  		move.w	$38(a0),d1
0001155C 9240                       		sub.w	d0,d1
0001155E 3141 000C                  		move.w	d1,$C(a0)	; move object vertically
00011562 4E75                       		rts	
00011564                            ; ===========================================================================
00011564                            
00011564                            Obj58_Type03:				; XREF: Obj58_TypeIndex
00011564 3028 003E                  		move.w	$3E(a0),d0
00011568 D168 0026                  		add.w	d0,$26(a0)
0001156C 1028 0026                  		move.b	$26(a0),d0
00011570 4EB9 0000 33DA             		jsr	(CalcSine).l
00011576 3428 0038                  		move.w	$38(a0),d2
0001157A 3628 003A                  		move.w	$3A(a0),d3
0001157E 7800                       		moveq	#0,d4
00011580 1828 003C                  		move.b	$3C(a0),d4
00011584 2A04                       		move.l	d4,d5
00011586 C9C0                       		muls.w	d0,d4
00011588 E084                       		asr.l	#8,d4
0001158A CBC1                       		muls.w	d1,d5
0001158C E085                       		asr.l	#8,d5
0001158E D842                       		add.w	d2,d4
00011590 DA43                       		add.w	d3,d5
00011592 3144 000C                  		move.w	d4,$C(a0)
00011596 3145 0008                  		move.w	d5,8(a0)
0001159A 4E75                       		rts	
0001159C                            ; ===========================================================================
0001159C                            ; ---------------------------------------------------------------------------
0001159C                            ; Sprite mappings - SBZ	spiked ball on a chain
0001159C                            ; ---------------------------------------------------------------------------
0001159C                            Map_obj15b:
0001159C                            	include "_maps\obj15sbz.asm"
0001159C                            ; ---------------------------------------------------------------------------
0001159C                            ; Sprite mappings - spiked ball on a chain (SBZ)
0001159C                            ; ---------------------------------------------------------------------------
0001159C 0000 0000                  		dc.w byte_10AA6-Map_obj15b, byte_10AC0-Map_obj15b
000115A0 0000                       		dc.w byte_10AC6-Map_obj15b
000115A2 05                         byte_10AA6:	dc.b 5
000115A3 E804 0000 F8               		dc.b $E8, 4, 0,	0, $F8
000115A8 F00F 0002 F0               		dc.b $F0, $F, 0, 2, $F0
000115AD F801 0012 E8               		dc.b $F8, 1, 0,	$12, $E8
000115B2 F801 0014 10               		dc.b $F8, 1, 0,	$14, $10
000115B7 1004 0016 F8               		dc.b $10, 4, 0,	$16, $F8
000115BC 01                         byte_10AC0:	dc.b 1
000115BD F805 0020 F8               		dc.b $F8, 5, 0,	$20, $F8
000115C2 02                         byte_10AC6:	dc.b 2
000115C3 F80D 0018 F0               		dc.b $F8, $D, 0, $18, $F0
000115C8 E80D 1018 F0               		dc.b $E8, $D, $10, $18,	$F0
000115CE 00                         		even
000115CE 00                         		even
000115CE                            
000115CE                            ; ===========================================================================
000115CE                            ; ---------------------------------------------------------------------------
000115CE                            ; Object 59 - platforms	that move when you stand on them (SLZ)
000115CE                            ; ---------------------------------------------------------------------------
000115CE                            
000115CE                            Obj59:					; XREF: Obj_Index
000115CE 7000                       		moveq	#0,d0
000115D0 1028 0024                  		move.b	$24(a0),d0
000115D4 323B 0000                  		move.w	Obj59_Index(pc,d0.w),d1
000115D8 4EBB 1000                  		jsr	Obj59_Index(pc,d1.w)
000115DC 3028 0032                  		move.w	$32(a0),d0
000115E0 0240 FF80                  		andi.w	#$FF80,d0
000115E4 3238 F700                  		move.w	($FFFFF700).w,d1
000115E8 0441 0080                  		subi.w	#$80,d1
000115EC 0241 FF80                  		andi.w	#$FF80,d1
000115F0 9041                       		sub.w	d1,d0
000115F2 0C40 0280                  		cmpi.w	#$280,d0
000115F6 6200 CB1A                  		bhi.w	DeleteObject
000115FA 6000 CADA                  		bra.w	DisplaySprite
000115FE                            ; ===========================================================================
000115FE 0000                       Obj59_Index:	dc.w Obj59_Main-Obj59_Index
00011600 0000                       		dc.w Obj59_Platform-Obj59_Index
00011602 0000                       		dc.w Obj59_Action-Obj59_Index
00011604 0000                       		dc.w Obj59_MakeMulti-Obj59_Index
00011606                            
00011606 2800                       Obj59_Var1:	dc.b $28, 0		; width, frame number
00011608                            
00011608 1001                       Obj59_Var2:	dc.b $10, 1		; width, action	type
0001160A 2001                       		dc.b $20, 1
0001160C 3401                       		dc.b $34, 1
0001160E 1003                       		dc.b $10, 3
00011610 2003                       		dc.b $20, 3
00011612 3403                       		dc.b $34, 3
00011614 1401                       		dc.b $14, 1
00011616 2401                       		dc.b $24, 1
00011618 2C01                       		dc.b $2C, 1
0001161A 1403                       		dc.b $14, 3
0001161C 2403                       		dc.b $24, 3
0001161E 2C03                       		dc.b $2C, 3
00011620 2005                       		dc.b $20, 5
00011622 2007                       		dc.b $20, 7
00011624 3009                       		dc.b $30, 9
00011626                            ; ===========================================================================
00011626                            
00011626                            Obj59_Main:				; XREF: Obj59_Index
00011626 5428 0024                  		addq.b	#2,$24(a0)
0001162A 7000                       		moveq	#0,d0
0001162C 1028 0028                  		move.b	$28(a0),d0
00011630 6A00                       		bpl.s	Obj59_Main2
00011632 5828 0024                  		addq.b	#4,$24(a0)
00011636 0240 007F                  		andi.w	#$7F,d0
0001163A C0FC 0006                  		mulu.w	#6,d0
0001163E 3140 003C                  		move.w	d0,$3C(a0)
00011642 3140 003E                  		move.w	d0,$3E(a0)
00011646 588F                       		addq.l	#4,sp
00011648 4E75                       		rts	
0001164A                            ; ===========================================================================
0001164A                            
0001164A                            Obj59_Main2:
0001164A E648                       		lsr.w	#3,d0
0001164C 0240 001E                  		andi.w	#$1E,d0
00011650 45FB 00B4                  		lea	Obj59_Var1(pc,d0.w),a2
00011654 115A 0019                  		move.b	(a2)+,$19(a0)
00011658 115A 001A                  		move.b	(a2)+,$1A(a0)
0001165C 7000                       		moveq	#0,d0
0001165E 1028 0028                  		move.b	$28(a0),d0
00011662 D040                       		add.w	d0,d0
00011664 0240 001E                  		andi.w	#$1E,d0
00011668 45FB 009E                  		lea	Obj59_Var2(pc,d0.w),a2
0001166C 101A                       		move.b	(a2)+,d0
0001166E E548                       		lsl.w	#2,d0
00011670 3140 003C                  		move.w	d0,$3C(a0)
00011674 115A 0028                  		move.b	(a2)+,$28(a0)
00011678 217C 0000 0000 0004        		move.l	#Map_obj59,4(a0)
00011680 317C 4000 0002             		move.w	#$4000,2(a0)
00011686 117C 0004 0001             		move.b	#4,1(a0)
0001168C 117C 0004 0018             		move.b	#4,$18(a0)
00011692 3168 0008 0032             		move.w	8(a0),$32(a0)
00011698 3168 000C 0030             		move.w	$C(a0),$30(a0)
0001169E                            
0001169E                            Obj59_Platform:				; XREF: Obj59_Index
0001169E 7200                       		moveq	#0,d1
000116A0 1228 0019                  		move.b	$19(a0),d1
000116A4 4EB9 0000 7ECE             		jsr	(PlatformObject).l
000116AA 6000 0000                  		bra.w	Obj59_Types
000116AE                            ; ===========================================================================
000116AE                            
000116AE                            Obj59_Action:				; XREF: Obj59_Index
000116AE 7200                       		moveq	#0,d1
000116B0 1228 0019                  		move.b	$19(a0),d1
000116B4 4EB9 0000 8042             		jsr	(ExitPlatform).l
000116BA 3F28 0008                  		move.w	8(a0),-(sp)
000116BE 6100 0000                  		bsr.w	Obj59_Types
000116C2 341F                       		move.w	(sp)+,d2
000116C4 4A10                       		tst.b	0(a0)
000116C6 6700                       		beq.s	locret_10BD4
000116C8 4EF9 0000 85AC             		jmp	(MvSonicOnPtfm2).l
000116CE                            ; ===========================================================================
000116CE                            
000116CE                            locret_10BD4:
000116CE 4E75                       		rts	
000116D0                            ; ===========================================================================
000116D0                            
000116D0                            Obj59_Types:
000116D0 7000                       		moveq	#0,d0
000116D2 1028 0028                  		move.b	$28(a0),d0
000116D6 0240 000F                  		andi.w	#$F,d0
000116DA D040                       		add.w	d0,d0
000116DC 323B 0000                  		move.w	Obj59_TypeIndex(pc,d0.w),d1
000116E0 4EFB 1000                  		jmp	Obj59_TypeIndex(pc,d1.w)
000116E4                            ; ===========================================================================
000116E4 0000 0000                  Obj59_TypeIndex:dc.w Obj59_Type00-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
000116E8 0000 0000                  		dc.w Obj59_Type02-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
000116EC 0000 0000                  		dc.w Obj59_Type04-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
000116F0 0000 0000                  		dc.w Obj59_Type06-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
000116F4 0000 0000                  		dc.w Obj59_Type08-Obj59_TypeIndex, Obj59_Type09-Obj59_TypeIndex
000116F8                            ; ===========================================================================
000116F8                            
000116F8                            Obj59_Type00:				; XREF: Obj59_TypeIndex
000116F8 4E75                       		rts	
000116FA                            ; ===========================================================================
000116FA                            
000116FA                            Obj59_Type01:				; XREF: Obj59_TypeIndex
000116FA 0C28 0004 0024             		cmpi.b	#4,$24(a0)	; check	if Sonic is standing on	the object
00011700 6600                       		bne.s	locret_10C0C
00011702 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
00011706                            
00011706                            locret_10C0C:
00011706 4E75                       		rts	
00011708                            ; ===========================================================================
00011708                            
00011708                            Obj59_Type02:				; XREF: Obj59_TypeIndex
00011708 6100 0000                  		bsr.w	Obj59_Move
0001170C 3028 0034                  		move.w	$34(a0),d0
00011710 4440                       		neg.w	d0
00011712 D068 0030                  		add.w	$30(a0),d0
00011716 3140 000C                  		move.w	d0,$C(a0)
0001171A 4E75                       		rts	
0001171C                            ; ===========================================================================
0001171C                            
0001171C                            Obj59_Type04:				; XREF: Obj59_TypeIndex
0001171C 6100 0000                  		bsr.w	Obj59_Move
00011720 3028 0034                  		move.w	$34(a0),d0
00011724 D068 0030                  		add.w	$30(a0),d0
00011728 3140 000C                  		move.w	d0,$C(a0)
0001172C 4E75                       		rts	
0001172E                            ; ===========================================================================
0001172E                            
0001172E                            Obj59_Type06:				; XREF: Obj59_TypeIndex
0001172E 6100 0000                  		bsr.w	Obj59_Move
00011732 3028 0034                  		move.w	$34(a0),d0
00011736 E240                       		asr.w	#1,d0
00011738 4440                       		neg.w	d0
0001173A D068 0030                  		add.w	$30(a0),d0
0001173E 3140 000C                  		move.w	d0,$C(a0)
00011742 3028 0034                  		move.w	$34(a0),d0
00011746 D068 0032                  		add.w	$32(a0),d0
0001174A 3140 0008                  		move.w	d0,8(a0)
0001174E 4E75                       		rts	
00011750                            ; ===========================================================================
00011750                            
00011750                            Obj59_Type08:				; XREF: Obj59_TypeIndex
00011750 6100 0000                  		bsr.w	Obj59_Move
00011754 3028 0034                  		move.w	$34(a0),d0
00011758 E240                       		asr.w	#1,d0
0001175A D068 0030                  		add.w	$30(a0),d0
0001175E 3140 000C                  		move.w	d0,$C(a0)
00011762 3028 0034                  		move.w	$34(a0),d0
00011766 4440                       		neg.w	d0
00011768 D068 0032                  		add.w	$32(a0),d0
0001176C 3140 0008                  		move.w	d0,8(a0)
00011770 4E75                       		rts	
00011772                            ; ===========================================================================
00011772                            
00011772                            Obj59_Type09:				; XREF: Obj59_TypeIndex
00011772 6100 0000                  		bsr.w	Obj59_Move
00011776 3028 0034                  		move.w	$34(a0),d0
0001177A 4440                       		neg.w	d0
0001177C D068 0030                  		add.w	$30(a0),d0
00011780 3140 000C                  		move.w	d0,$C(a0)
00011784 4A28 0028                  		tst.b	$28(a0)
00011788 6700 0000                  		beq.w	loc_10C94
0001178C 4E75                       		rts	
0001178E                            ; ===========================================================================
0001178E                            
0001178E                            loc_10C94:
0001178E 0828 0003 0022             		btst	#3,$22(a0)
00011794 6700                       		beq.s	Obj59_Delete
00011796 08E9 0001 0022             		bset	#1,$22(a1)
0001179C 08A9 0003 0022             		bclr	#3,$22(a1)
000117A2 137C 0002 0024             		move.b	#2,$24(a1)
000117A8                            
000117A8                            Obj59_Delete:
000117A8 6000 C968                  		bra.w	DeleteObject
000117AC                            
000117AC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000117AC                            
000117AC                            
000117AC                            Obj59_Move:				; XREF: Obj59_Type02; et al
000117AC 3028 0038                  		move.w	$38(a0),d0
000117B0 4A28 003A                  		tst.b	$3A(a0)
000117B4 6600                       		bne.s	loc_10CC8
000117B6 0C40 0800                  		cmpi.w	#$800,d0
000117BA 6400                       		bcc.s	loc_10CD0
000117BC 0640 0010                  		addi.w	#$10,d0
000117C0 6000                       		bra.s	loc_10CD0
000117C2                            ; ===========================================================================
000117C2                            
000117C2                            loc_10CC8:
000117C2 4A40                       		tst.w	d0
000117C4 6700                       		beq.s	loc_10CD0
000117C6 0440 0010                  		subi.w	#$10,d0
000117CA                            
000117CA                            loc_10CD0:
000117CA 3140 0038                  		move.w	d0,$38(a0)
000117CE 48C0                       		ext.l	d0
000117D0 E180                       		asl.l	#8,d0
000117D2 D0A8 0034                  		add.l	$34(a0),d0
000117D6 2140 0034                  		move.l	d0,$34(a0)
000117DA 4840                       		swap	d0
000117DC 3428 003C                  		move.w	$3C(a0),d2
000117E0 B042                       		cmp.w	d2,d0
000117E2 6300                       		bls.s	loc_10CF0
000117E4 117C 0001 003A             		move.b	#1,$3A(a0)
000117EA                            
000117EA                            loc_10CF0:
000117EA D442                       		add.w	d2,d2
000117EC B042                       		cmp.w	d2,d0
000117EE 6600                       		bne.s	locret_10CFA
000117F0 4228 0028                  		clr.b	$28(a0)
000117F4                            
000117F4                            locret_10CFA:
000117F4 4E75                       		rts	
000117F6                            ; End of function Obj59_Move
000117F6                            
000117F6                            ; ===========================================================================
000117F6                            
000117F6                            Obj59_MakeMulti:			; XREF: Obj59_Index
000117F6 5368 003C                  		subq.w	#1,$3C(a0)
000117FA 6600                       		bne.s	Obj59_ChkDel
000117FC 3168 003E 003C             		move.w	$3E(a0),$3C(a0)
00011802 6100 CD68                  		bsr.w	SingleObjLoad
00011806 6600                       		bne.s	Obj59_ChkDel
00011808 12BC 0059                  		move.b	#$59,0(a1)	; duplicate the	object
0001180C 3368 0008 0008             		move.w	8(a0),8(a1)
00011812 3368 000C 000C             		move.w	$C(a0),$C(a1)
00011818 137C 000E 0028             		move.b	#$E,$28(a1)
0001181E                            
0001181E                            Obj59_ChkDel:
0001181E 588F                       		addq.l	#4,sp
00011820 3028 0008                  		move.w	8(a0),d0
00011824 0240 FF80                  		andi.w	#$FF80,d0
00011828 3238 F700                  		move.w	($FFFFF700).w,d1
0001182C 0441 0080                  		subi.w	#$80,d1
00011830 0241 FF80                  		andi.w	#$FF80,d1
00011834 9041                       		sub.w	d1,d0
00011836 0C40 0280                  		cmpi.w	#$280,d0
0001183A 6200 C8D6                  		bhi.w	DeleteObject
0001183E 4E75                       		rts	
00011840                            ; ===========================================================================
00011840                            ; ---------------------------------------------------------------------------
00011840                            ; Sprite mappings - platforms that move	when you stand on them (SLZ)
00011840                            ; ---------------------------------------------------------------------------
00011840                            Map_obj59:
00011840                            	include "_maps\obj59.asm"
00011840                            ; ---------------------------------------------------------------------------
00011840                            ; Sprite mappings - platforms that move	when you stand on them (SLZ)
00011840                            ; ---------------------------------------------------------------------------
00011840 0000                       		dc.w byte_10D4A-Map_obj59
00011842 03                         byte_10D4A:	dc.b 3
00011843 F80F 0041 D8               		dc.b $F8, $F, 0, $41, $D8
00011848 F80F 0041 F8               		dc.b $F8, $F, 0, $41, $F8
0001184D F807 0041 18               		dc.b $F8, 7, 0,	$41, $18
00011852                            		even
00011852                            		even
00011852                            
00011852                            ; ===========================================================================
00011852                            ; ---------------------------------------------------------------------------
00011852                            ; Object 5A - platforms	moving in circles (SLZ)
00011852                            ; ---------------------------------------------------------------------------
00011852                            
00011852                            Obj5A:					; XREF: Obj_Index
00011852 7000                       		moveq	#0,d0
00011854 1028 0024                  		move.b	$24(a0),d0
00011858 323B 0000                  		move.w	Obj5A_Index(pc,d0.w),d1
0001185C 4EBB 1000                  		jsr	Obj5A_Index(pc,d1.w)
00011860 3028 0032                  		move.w	$32(a0),d0
00011864 0240 FF80                  		andi.w	#$FF80,d0
00011868 3238 F700                  		move.w	($FFFFF700).w,d1
0001186C 0441 0080                  		subi.w	#$80,d1
00011870 0241 FF80                  		andi.w	#$FF80,d1
00011874 9041                       		sub.w	d1,d0
00011876 0C40 0280                  		cmpi.w	#$280,d0
0001187A 6200 C896                  		bhi.w	DeleteObject
0001187E 6000 C856                  		bra.w	DisplaySprite
00011882                            ; ===========================================================================
00011882 0000                       Obj5A_Index:	dc.w Obj5A_Main-Obj5A_Index
00011884 0000                       		dc.w Obj5A_Platform-Obj5A_Index
00011886 0000                       		dc.w Obj5A_Action-Obj5A_Index
00011888                            ; ===========================================================================
00011888                            
00011888                            Obj5A_Main:				; XREF: Obj5A_Index
00011888 5428 0024                  		addq.b	#2,$24(a0)
0001188C 217C 0000 0000 0004        		move.l	#Map_obj5A,4(a0)
00011894 317C 4000 0002             		move.w	#$4000,2(a0)
0001189A 117C 0004 0001             		move.b	#4,1(a0)
000118A0 117C 0004 0018             		move.b	#4,$18(a0)
000118A6 117C 0018 0019             		move.b	#$18,$19(a0)
000118AC 3168 0008 0032             		move.w	8(a0),$32(a0)
000118B2 3168 000C 0030             		move.w	$C(a0),$30(a0)
000118B8                            
000118B8                            Obj5A_Platform:				; XREF: Obj5A_Index
000118B8 7200                       		moveq	#0,d1
000118BA 1228 0019                  		move.b	$19(a0),d1
000118BE 4EB9 0000 7ECE             		jsr	(PlatformObject).l
000118C4 6000 0000                  		bra.w	Obj5A_Types
000118C8                            ; ===========================================================================
000118C8                            
000118C8                            Obj5A_Action:				; XREF: Obj5A_Index
000118C8 7200                       		moveq	#0,d1
000118CA 1228 0019                  		move.b	$19(a0),d1
000118CE 4EB9 0000 8042             		jsr	(ExitPlatform).l
000118D4 3F28 0008                  		move.w	8(a0),-(sp)
000118D8 6100 0000                  		bsr.w	Obj5A_Types
000118DC 341F                       		move.w	(sp)+,d2
000118DE 4EF9 0000 85AC             		jmp	(MvSonicOnPtfm2).l
000118E4                            ; ===========================================================================
000118E4                            
000118E4                            Obj5A_Types:
000118E4 7000                       		moveq	#0,d0
000118E6 1028 0028                  		move.b	$28(a0),d0
000118EA 0240 000C                  		andi.w	#$C,d0
000118EE E248                       		lsr.w	#1,d0
000118F0 323B 0000                  		move.w	Obj5A_TypeIndex(pc,d0.w),d1
000118F4 4EFB 1000                  		jmp	Obj5A_TypeIndex(pc,d1.w)
000118F8                            ; ===========================================================================
000118F8 0000                       Obj5A_TypeIndex:dc.w Obj5A_Type00-Obj5A_TypeIndex
000118FA 0000                       		dc.w Obj5A_Type04-Obj5A_TypeIndex
000118FC                            ; ===========================================================================
000118FC                            
000118FC                            Obj5A_Type00:				; XREF: Obj5A_TypeIndex
000118FC 1238 FE80                  		move.b	($FFFFFE80).w,d1
00011900 0401 0050                  		subi.b	#$50,d1
00011904 4881                       		ext.w	d1
00011906 1438 FE84                  		move.b	($FFFFFE84).w,d2
0001190A 0402 0050                  		subi.b	#$50,d2
0001190E 4882                       		ext.w	d2
00011910 0828 0000 0028             		btst	#0,$28(a0)
00011916 6700                       		beq.s	loc_10E24
00011918 4441                       		neg.w	d1
0001191A 4442                       		neg.w	d2
0001191C                            
0001191C                            loc_10E24:
0001191C 0828 0001 0028             		btst	#1,$28(a0)
00011922 6700                       		beq.s	loc_10E30
00011924 4441                       		neg.w	d1
00011926 C342                       		exg	d1,d2
00011928                            
00011928                            loc_10E30:
00011928 D268 0032                  		add.w	$32(a0),d1
0001192C 3141 0008                  		move.w	d1,8(a0)
00011930 D468 0030                  		add.w	$30(a0),d2
00011934 3142 000C                  		move.w	d2,$C(a0)
00011938 4E75                       		rts	
0001193A                            ; ===========================================================================
0001193A                            
0001193A                            Obj5A_Type04:				; XREF: Obj5A_TypeIndex
0001193A 1238 FE80                  		move.b	($FFFFFE80).w,d1
0001193E 0401 0050                  		subi.b	#$50,d1
00011942 4881                       		ext.w	d1
00011944 1438 FE84                  		move.b	($FFFFFE84).w,d2
00011948 0402 0050                  		subi.b	#$50,d2
0001194C 4882                       		ext.w	d2
0001194E 0828 0000 0028             		btst	#0,$28(a0)
00011954 6700                       		beq.s	loc_10E62
00011956 4441                       		neg.w	d1
00011958 4442                       		neg.w	d2
0001195A                            
0001195A                            loc_10E62:
0001195A 0828 0001 0028             		btst	#1,$28(a0)
00011960 6700                       		beq.s	loc_10E6E
00011962 4441                       		neg.w	d1
00011964 C342                       		exg	d1,d2
00011966                            
00011966                            loc_10E6E:
00011966 4441                       		neg.w	d1
00011968 D268 0032                  		add.w	$32(a0),d1
0001196C 3141 0008                  		move.w	d1,8(a0)
00011970 D468 0030                  		add.w	$30(a0),d2
00011974 3142 000C                  		move.w	d2,$C(a0)
00011978 4E75                       		rts	
0001197A                            ; ===========================================================================
0001197A                            ; ---------------------------------------------------------------------------
0001197A                            ; Sprite mappings - platforms that move	in circles (SLZ)
0001197A                            ; ---------------------------------------------------------------------------
0001197A                            Map_obj5A:
0001197A                            	include "_maps\obj5A.asm"
0001197A                            ; ---------------------------------------------------------------------------
0001197A                            ; Sprite mappings - platforms that move	in circles (SLZ)
0001197A                            ; ---------------------------------------------------------------------------
0001197A 0000                       		dc.w byte_10E84-Map_obj5A
0001197C 02                         byte_10E84:	dc.b 2
0001197D F809 0051 E8               		dc.b $F8, 9, 0,	$51, $E8
00011982 F809 0851 00               		dc.b $F8, 9, 8,	$51, 0
00011988 00                         		even
00011988 00                         		even
00011988                            
00011988                            ; ===========================================================================
00011988                            ; ---------------------------------------------------------------------------
00011988                            ; Object 5B - blocks that form a staircase (SLZ)
00011988                            ; ---------------------------------------------------------------------------
00011988                            
00011988                            Obj5B:					; XREF: Obj_Index
00011988 7000                       		moveq	#0,d0
0001198A 1028 0024                  		move.b	$24(a0),d0
0001198E 323B 0000                  		move.w	Obj5B_Index(pc,d0.w),d1
00011992 4EBB 1000                  		jsr	Obj5B_Index(pc,d1.w)
00011996 3028 0030                  		move.w	$30(a0),d0
0001199A 0240 FF80                  		andi.w	#$FF80,d0
0001199E 3238 F700                  		move.w	($FFFFF700).w,d1
000119A2 0441 0080                  		subi.w	#$80,d1
000119A6 0241 FF80                  		andi.w	#$FF80,d1
000119AA 9041                       		sub.w	d1,d0
000119AC 0C40 0280                  		cmpi.w	#$280,d0
000119B0 6200 C760                  		bhi.w	DeleteObject
000119B4 6000 C720                  		bra.w	DisplaySprite
000119B8                            ; ===========================================================================
000119B8 0000                       Obj5B_Index:	dc.w Obj5B_Main-Obj5B_Index
000119BA 0000                       		dc.w Obj5B_Move-Obj5B_Index
000119BC 0000                       		dc.w Obj5B_Solid-Obj5B_Index
000119BE                            ; ===========================================================================
000119BE                            
000119BE                            Obj5B_Main:				; XREF: Obj5B_Index
000119BE 5428 0024                  		addq.b	#2,$24(a0)
000119C2 7638                       		moveq	#$38,d3
000119C4 7801                       		moveq	#1,d4
000119C6 0828 0000 0022             		btst	#0,$22(a0)
000119CC 6700                       		beq.s	loc_10EDA
000119CE 763B                       		moveq	#$3B,d3
000119D0 78FF                       		moveq	#-1,d4
000119D2                            
000119D2                            loc_10EDA:
000119D2 3428 0008                  		move.w	8(a0),d2
000119D6 2248                       		movea.l	a0,a1
000119D8 7203                       		moveq	#3,d1
000119DA 6000                       		bra.s	Obj5B_MakeBlocks
000119DC                            ; ===========================================================================
000119DC                            
000119DC                            Obj5B_Loop:
000119DC 6100 CBA4                  		bsr.w	SingleObjLoad2
000119E0 6600 0000                  		bne.w	Obj5B_Move
000119E4 137C 0004 0024             		move.b	#4,$24(a1)
000119EA                            
000119EA                            Obj5B_MakeBlocks:			; XREF: Obj5B_Main
000119EA 12BC 005B                  		move.b	#$5B,0(a1)	; load another block object
000119EE 237C 0000 0000 0004        		move.l	#Map_obj5B,4(a1)
000119F6 337C 4000 0002             		move.w	#$4000,2(a1)
000119FC 137C 0004 0001             		move.b	#4,1(a1)
00011A02 137C 0003 0018             		move.b	#3,$18(a1)
00011A08 137C 0010 0019             		move.b	#$10,$19(a1)
00011A0E 1368 0028 0028             		move.b	$28(a0),$28(a1)
00011A14 3342 0008                  		move.w	d2,8(a1)
00011A18 3368 000C 000C             		move.w	$C(a0),$C(a1)
00011A1E 3368 0008 0030             		move.w	8(a0),$30(a1)
00011A24 3369 000C 0032             		move.w	$C(a1),$32(a1)
00011A2A 0642 0020                  		addi.w	#$20,d2
00011A2E 1343 0037                  		move.b	d3,$37(a1)
00011A32 2348 003C                  		move.l	a0,$3C(a1)
00011A36 D604                       		add.b	d4,d3
00011A38 51C9 FFA2                  		dbf	d1,Obj5B_Loop	; repeat sequence 3 times
00011A3C                            
00011A3C                            Obj5B_Move:				; XREF: Obj5B_Index
00011A3C 7000                       		moveq	#0,d0
00011A3E 1028 0028                  		move.b	$28(a0),d0
00011A42 0240 0007                  		andi.w	#7,d0
00011A46 D040                       		add.w	d0,d0
00011A48 323B 0000                  		move.w	Obj5B_TypeIndex(pc,d0.w),d1
00011A4C 4EBB 1000                  		jsr	Obj5B_TypeIndex(pc,d1.w)
00011A50                            
00011A50                            Obj5B_Solid:				; XREF: Obj5B_Index
00011A50 2468 003C                  		movea.l	$3C(a0),a2
00011A54 7000                       		moveq	#0,d0
00011A56 1028 0037                  		move.b	$37(a0),d0
00011A5A 1032 0000                  		move.b	(a2,d0.w),d0
00011A5E D068 0032                  		add.w	$32(a0),d0
00011A62 3140 000C                  		move.w	d0,$C(a0)
00011A66 7200                       		moveq	#0,d1
00011A68 1228 0019                  		move.b	$19(a0),d1
00011A6C 0641 000B                  		addi.w	#$B,d1
00011A70 343C 0010                  		move.w	#$10,d2
00011A74 363C 0011                  		move.w	#$11,d3
00011A78 3828 0008                  		move.w	8(a0),d4
00011A7C 6100 EA42                  		bsr.w	SolidObject
00011A80 4A04                       		tst.b	d4
00011A82 6A00                       		bpl.s	loc_10F92
00011A84 1544 0036                  		move.b	d4,$36(a2)
00011A88                            
00011A88                            loc_10F92:
00011A88 0828 0003 0022             		btst	#3,$22(a0)
00011A8E 6700                       		beq.s	locret_10FA0
00011A90 157C 0001 0036             		move.b	#1,$36(a2)
00011A96                            
00011A96                            locret_10FA0:
00011A96 4E75                       		rts	
00011A98                            ; ===========================================================================
00011A98 0000                       Obj5B_TypeIndex:dc.w Obj5B_Type00-Obj5B_TypeIndex
00011A9A 0000                       		dc.w Obj5B_Type01-Obj5B_TypeIndex
00011A9C 0000                       		dc.w Obj5B_Type02-Obj5B_TypeIndex
00011A9E 0000                       		dc.w Obj5B_Type01-Obj5B_TypeIndex
00011AA0                            ; ===========================================================================
00011AA0                            
00011AA0                            Obj5B_Type00:				; XREF: Obj5B_TypeIndex
00011AA0 4A68 0034                  		tst.w	$34(a0)
00011AA4 6600                       		bne.s	loc_10FC0
00011AA6 0C28 0001 0036             		cmpi.b	#1,$36(a0)
00011AAC 6600                       		bne.s	locret_10FBE
00011AAE 317C 001E 0034             		move.w	#$1E,$34(a0)
00011AB4                            
00011AB4                            locret_10FBE:
00011AB4 4E75                       		rts	
00011AB6                            ; ===========================================================================
00011AB6                            
00011AB6                            loc_10FC0:
00011AB6 5368 0034                  		subq.w	#1,$34(a0)
00011ABA 66F8                       		bne.s	locret_10FBE
00011ABC 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
00011AC0 4E75                       		rts	
00011AC2                            ; ===========================================================================
00011AC2                            
00011AC2                            Obj5B_Type02:				; XREF: Obj5B_TypeIndex
00011AC2 4A68 0034                  		tst.w	$34(a0)
00011AC6 6600                       		bne.s	loc_10FE0
00011AC8 4A28 0036                  		tst.b	$36(a0)
00011ACC 6A00                       		bpl.s	locret_10FDE
00011ACE 317C 003C 0034             		move.w	#$3C,$34(a0)
00011AD4                            
00011AD4                            locret_10FDE:
00011AD4 4E75                       		rts	
00011AD6                            ; ===========================================================================
00011AD6                            
00011AD6                            loc_10FE0:
00011AD6 5368 0034                  		subq.w	#1,$34(a0)
00011ADA 6600                       		bne.s	loc_10FEC
00011ADC 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
00011AE0 4E75                       		rts	
00011AE2                            ; ===========================================================================
00011AE2                            
00011AE2                            loc_10FEC:
00011AE2 43E8 0038                  		lea	$38(a0),a1
00011AE6 3028 0034                  		move.w	$34(a0),d0
00011AEA E408                       		lsr.b	#2,d0
00011AEC 0200 0001                  		andi.b	#1,d0
00011AF0 12C0                       		move.b	d0,(a1)+
00011AF2 0A00 0001                  		eori.b	#1,d0
00011AF6 12C0                       		move.b	d0,(a1)+
00011AF8 0A00 0001                  		eori.b	#1,d0
00011AFC 12C0                       		move.b	d0,(a1)+
00011AFE 0A00 0001                  		eori.b	#1,d0
00011B02 12C0                       		move.b	d0,(a1)+
00011B04 4E75                       		rts	
00011B06                            ; ===========================================================================
00011B06                            
00011B06                            Obj5B_Type01:				; XREF: Obj5B_TypeIndex
00011B06 43E8 0038                  		lea	$38(a0),a1
00011B0A 0C11 0080                  		cmpi.b	#$80,(a1)
00011B0E 6700                       		beq.s	locret_11038
00011B10 5211                       		addq.b	#1,(a1)
00011B12 7200                       		moveq	#0,d1
00011B14 1219                       		move.b	(a1)+,d1
00011B16 4841                       		swap	d1
00011B18 E289                       		lsr.l	#1,d1
00011B1A 2401                       		move.l	d1,d2
00011B1C E289                       		lsr.l	#1,d1
00011B1E 2601                       		move.l	d1,d3
00011B20 D682                       		add.l	d2,d3
00011B22 4841                       		swap	d1
00011B24 4842                       		swap	d2
00011B26 4843                       		swap	d3
00011B28 12C3                       		move.b	d3,(a1)+
00011B2A 12C2                       		move.b	d2,(a1)+
00011B2C 12C1                       		move.b	d1,(a1)+
00011B2E                            
00011B2E                            locret_11038:
00011B2E 4E75                       		rts	
00011B30 4E75                       		rts	
00011B32                            ; ===========================================================================
00011B32                            ; ---------------------------------------------------------------------------
00011B32                            ; Sprite mappings - blocks that	form a staircase (SLZ)
00011B32                            ; ---------------------------------------------------------------------------
00011B32                            Map_obj5B:
00011B32                            	include "_maps\obj5B.asm"
00011B32                            ; ---------------------------------------------------------------------------
00011B32                            ; Sprite mappings - blocks that	form a staircase (SLZ)
00011B32                            ; ---------------------------------------------------------------------------
00011B32 0000                       		dc.w byte_1103E-Map_obj5B
00011B34 01                         byte_1103E:	dc.b 1
00011B35 F00F 0021 F0               		dc.b $F0, $F, 0, $21, $F0
00011B3A                            		even
00011B3A                            		even
00011B3A                            
00011B3A                            ; ===========================================================================
00011B3A                            ; ---------------------------------------------------------------------------
00011B3A                            ; Object 5C - metal girders in foreground (SLZ)
00011B3A                            ; ---------------------------------------------------------------------------
00011B3A                            
00011B3A                            Obj5C:					; XREF: Obj_Index
00011B3A 7000                       		moveq	#0,d0
00011B3C 1028 0024                  		move.b	$24(a0),d0
00011B40 323B 0000                  		move.w	Obj5C_Index(pc,d0.w),d1
00011B44 4EFB 1000                  		jmp	Obj5C_Index(pc,d1.w)
00011B48                            ; ===========================================================================
00011B48 0000                       Obj5C_Index:	dc.w Obj5C_Main-Obj5C_Index
00011B4A 0000                       		dc.w Obj5C_Display-Obj5C_Index
00011B4C                            ; ===========================================================================
00011B4C                            
00011B4C                            Obj5C_Main:				; XREF: Obj5C_Index
00011B4C 5428 0024                  		addq.b	#2,$24(a0)
00011B50 217C 0000 0000 0004        		move.l	#Map_obj5C,4(a0)
00011B58 317C 83CC 0002             		move.w	#$83CC,2(a0)
00011B5E 117C 0010 0019             		move.b	#$10,$19(a0)
00011B64                            
00011B64                            Obj5C_Display:				; XREF: Obj5C_Index
00011B64 2238 F700                  		move.l	($FFFFF700).w,d1
00011B68 D281                       		add.l	d1,d1
00011B6A 4841                       		swap	d1
00011B6C 4441                       		neg.w	d1
00011B6E 3141 0008                  		move.w	d1,8(a0)
00011B72 2238 F704                  		move.l	($FFFFF704).w,d1
00011B76 D281                       		add.l	d1,d1
00011B78 4841                       		swap	d1
00011B7A 0241 003F                  		andi.w	#$3F,d1
00011B7E 4441                       		neg.w	d1
00011B80 0641 0100                  		addi.w	#$100,d1
00011B84 3141 000A                  		move.w	d1,$A(a0)
00011B88 6000 C54C                  		bra.w	DisplaySprite
00011B8C                            ; ===========================================================================
00011B8C                            ; ---------------------------------------------------------------------------
00011B8C                            ; Sprite mappings - metal girders in foreground	(SLZ)
00011B8C                            ; ---------------------------------------------------------------------------
00011B8C                            Map_obj5C:
00011B8C                            	include "_maps\obj5C.asm"
00011B8C                            ; ---------------------------------------------------------------------------
00011B8C                            ; Sprite mappings - metal girders in foreground	(SLZ)
00011B8C                            ; ---------------------------------------------------------------------------
00011B8C 0000                       		dc.w byte_11098-Map_obj5C
00011B8E 09                         byte_11098:	dc.b 9
00011B8F 800F 0000 F0               		dc.b $80, $F, 0, 0, $F0
00011B94 A00F 1000 F0               		dc.b $A0, $F, $10, 0, $F0
00011B99 C00F 0000 F0               		dc.b $C0, $F, 0, 0, $F0
00011B9E E00F 1000 F0               		dc.b $E0, $F, $10, 0, $F0
00011BA3 000F 0000 F0               		dc.b 0,	$F, 0, 0, $F0
00011BA8 200F 1000 F0               		dc.b $20, $F, $10, 0, $F0
00011BAD 400F 0000 F0               		dc.b $40, $F, 0, 0, $F0
00011BB2 600F 1000 F0               		dc.b $60, $F, $10, 0, $F0
00011BB7 7F0F 0000 F0               		dc.b $7F, $F, 0, 0, $F0
00011BBC                            		even
00011BBC                            		even
00011BBC                            
00011BBC                            ; ===========================================================================
00011BBC                            ; ---------------------------------------------------------------------------
00011BBC                            ; Object 1B - water surface (LZ)
00011BBC                            ; ---------------------------------------------------------------------------
00011BBC                            
00011BBC                            Obj1B:					; XREF: Obj_Index
00011BBC 7000                       		moveq	#0,d0
00011BBE 1028 0024                  		move.b	$24(a0),d0
00011BC2 323B 0000                  		move.w	Obj1B_Index(pc,d0.w),d1
00011BC6 4EFB 1000                  		jmp	Obj1B_Index(pc,d1.w)
00011BCA                            ; ===========================================================================
00011BCA 0000                       Obj1B_Index:	dc.w Obj1B_Main-Obj1B_Index
00011BCC 0000                       		dc.w Obj1B_Action-Obj1B_Index
00011BCE                            ; ===========================================================================
00011BCE                            
00011BCE                            Obj1B_Main:				; XREF: Obj1B_Index
00011BCE 5428 0024                  		addq.b	#2,$24(a0)
00011BD2 217C 0000 0000 0004        		move.l	#Map_obj1B,4(a0)
00011BDA 317C C300 0002             		move.w	#$C300,2(a0)
00011BE0 117C 0004 0001             		move.b	#4,1(a0)
00011BE6 117C 0080 0019             		move.b	#$80,$19(a0)
00011BEC 3168 0008 0030             		move.w	8(a0),$30(a0)
00011BF2                            
00011BF2                            Obj1B_Action:				; XREF: Obj1B_Index
00011BF2 3238 F700                  		move.w	($FFFFF700).w,d1
00011BF6 0241 FFE0                  		andi.w	#$FFE0,d1
00011BFA D268 0030                  		add.w	$30(a0),d1
00011BFE 0838 0000 FE05             		btst	#0,($FFFFFE05).w
00011C04 6700                       		beq.s	loc_11114
00011C06 0641 0020                  		addi.w	#$20,d1
00011C0A                            
00011C0A                            loc_11114:
00011C0A 3141 0008                  		move.w	d1,8(a0)	; match	obj x-position to screen position
00011C0E 3238 F646                  		move.w	($FFFFF646).w,d1
00011C12 3141 000C                  		move.w	d1,$C(a0)	; match	obj y-position to water	height
00011C16 4A28 0032                  		tst.b	$32(a0)
00011C1A 6600                       		bne.s	Obj1B_Animate
00011C1C 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
00011C22 6700                       		beq.s	loc_1114A	; if not, branch
00011C24 5628 001A                  		addq.b	#3,$1A(a0)	; use different	frames
00011C28 117C 0001 0032             		move.b	#1,$32(a0)	; stop animation
00011C2E 6000                       		bra.s	Obj1B_Display
00011C30                            ; ===========================================================================
00011C30                            
00011C30                            Obj1B_Animate:				; XREF: loc_11114
00011C30 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
00011C34 6600                       		bne.s	Obj1B_Display	; if yes, branch
00011C36 117C 0000 0032             		move.b	#0,$32(a0)	; resume animation
00011C3C 5728 001A                  		subq.b	#3,$1A(a0)	; use normal frames
00011C40                            
00011C40                            loc_1114A:				; XREF: loc_11114
00011C40 5328 001E                  		subq.b	#1,$1E(a0)
00011C44 6A00                       		bpl.s	Obj1B_Display
00011C46 117C 0007 001E             		move.b	#7,$1E(a0)
00011C4C 5228 001A                  		addq.b	#1,$1A(a0)
00011C50 0C28 0003 001A             		cmpi.b	#3,$1A(a0)
00011C56 6500                       		bcs.s	Obj1B_Display
00011C58 117C 0000 001A             		move.b	#0,$1A(a0)
00011C5E                            
00011C5E                            Obj1B_Display:
00011C5E 6000 C476                  		bra.w	DisplaySprite
00011C62                            ; ===========================================================================
00011C62                            ; ---------------------------------------------------------------------------
00011C62                            ; Sprite mappings - water surface (LZ)
00011C62                            ; ---------------------------------------------------------------------------
00011C62                            Map_obj1B:
00011C62                            	include "_maps\obj1B.asm"
00011C62                            ; ---------------------------------------------------------------------------
00011C62                            ; Sprite mappings - water surface (LZ)
00011C62                            ; ---------------------------------------------------------------------------
00011C62 0000 0000                  		dc.w byte_11178-Map_obj1B, byte_11188-Map_obj1B
00011C66 0000 0000                  		dc.w byte_11198-Map_obj1B, byte_111A8-Map_obj1B
00011C6A 0000 0000                  		dc.w byte_111C7-Map_obj1B, byte_111E6-Map_obj1B
00011C6E 03                         byte_11178:	dc.b 3
00011C6F FD0D 0000 A0               		dc.b $FD, $D, 0, 0, $A0
00011C74 FD0D 0000 E0               		dc.b $FD, $D, 0, 0, $E0
00011C79 FD0D 0000 20               		dc.b $FD, $D, 0, 0, $20
00011C7E 03                         byte_11188:	dc.b 3
00011C7F FD0D 0008 A0               		dc.b $FD, $D, 0, 8, $A0
00011C84 FD0D 0008 E0               		dc.b $FD, $D, 0, 8, $E0
00011C89 FD0D 0008 20               		dc.b $FD, $D, 0, 8, $20
00011C8E 03                         byte_11198:	dc.b 3
00011C8F FD0D 0800 A0               		dc.b $FD, $D, 8, 0, $A0
00011C94 FD0D 0800 E0               		dc.b $FD, $D, 8, 0, $E0
00011C99 FD0D 0800 20               		dc.b $FD, $D, 8, 0, $20
00011C9E 06                         byte_111A8:	dc.b 6
00011C9F FD0D 0000 A0               		dc.b $FD, $D, 0, 0, $A0
00011CA4 FD0D 0000 C0               		dc.b $FD, $D, 0, 0, $C0
00011CA9 FD0D 0000 E0               		dc.b $FD, $D, 0, 0, $E0
00011CAE FD0D 0000 00               		dc.b $FD, $D, 0, 0, 0
00011CB3 FD0D 0000 20               		dc.b $FD, $D, 0, 0, $20
00011CB8 FD0D 0000 40               		dc.b $FD, $D, 0, 0, $40
00011CBD 06                         byte_111C7:	dc.b 6
00011CBE FD0D 0008 A0               		dc.b $FD, $D, 0, 8, $A0
00011CC3 FD0D 0008 C0               		dc.b $FD, $D, 0, 8, $C0
00011CC8 FD0D 0008 E0               		dc.b $FD, $D, 0, 8, $E0
00011CCD FD0D 0008 00               		dc.b $FD, $D, 0, 8, 0
00011CD2 FD0D 0008 20               		dc.b $FD, $D, 0, 8, $20
00011CD7 FD0D 0008 40               		dc.b $FD, $D, 0, 8, $40
00011CDC 06                         byte_111E6:	dc.b 6
00011CDD FD0D 0800 A0               		dc.b $FD, $D, 8, 0, $A0
00011CE2 FD0D 0800 C0               		dc.b $FD, $D, 8, 0, $C0
00011CE7 FD0D 0800 E0               		dc.b $FD, $D, 8, 0, $E0
00011CEC FD0D 0800 00               		dc.b $FD, $D, 8, 0, 0
00011CF1 FD0D 0800 20               		dc.b $FD, $D, 8, 0, $20
00011CF6 FD0D 0800 40               		dc.b $FD, $D, 8, 0, $40
00011CFC 00                         		even
00011CFC 00                         		even
00011CFC                            
00011CFC                            ; ===========================================================================
00011CFC                            ; ---------------------------------------------------------------------------
00011CFC                            ; Object 0B - pole that	breaks (LZ)
00011CFC                            ; ---------------------------------------------------------------------------
00011CFC                            
00011CFC                            Obj0B:					; XREF: Obj_Index
00011CFC 7000                       		moveq	#0,d0
00011CFE 1028 0024                  		move.b	$24(a0),d0
00011D02 323B 0000                  		move.w	Obj0B_Index(pc,d0.w),d1
00011D06 4EFB 1000                  		jmp	Obj0B_Index(pc,d1.w)
00011D0A                            ; ===========================================================================
00011D0A 0000                       Obj0B_Index:	dc.w Obj0B_Main-Obj0B_Index
00011D0C 0000                       		dc.w Obj0B_Action-Obj0B_Index
00011D0E 0000                       		dc.w Obj0B_Display-Obj0B_Index
00011D10                            ; ===========================================================================
00011D10                            
00011D10                            Obj0B_Main:				; XREF: Obj0B_Index
00011D10 5428 0024                  		addq.b	#2,$24(a0)
00011D14 217C 0000 0000 0004        		move.l	#Map_obj0B,4(a0)
00011D1C 317C 43DE 0002             		move.w	#$43DE,2(a0)
00011D22 117C 0004 0001             		move.b	#4,1(a0)
00011D28 117C 0008 0019             		move.b	#8,$19(a0)
00011D2E 117C 0004 0018             		move.b	#4,$18(a0)
00011D34 117C 00E1 0020             		move.b	#$E1,$20(a0)
00011D3A 7000                       		moveq	#0,d0
00011D3C 1028 0028                  		move.b	$28(a0),d0	; get object type
00011D40 C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 (1 second)
00011D44 3140 0030                  		move.w	d0,$30(a0)	; set breakage time
00011D48                            
00011D48                            Obj0B_Action:				; XREF: Obj0B_Index
00011D48 4A28 0032                  		tst.b	$32(a0)
00011D4C 6700                       		beq.s	Obj0B_Grab
00011D4E 4A68 0030                  		tst.w	$30(a0)
00011D52 6700                       		beq.s	Obj0B_MoveUp
00011D54 5368 0030                  		subq.w	#1,$30(a0)
00011D58 6600                       		bne.s	Obj0B_MoveUp
00011D5A 117C 0001 001A             		move.b	#1,$1A(a0)	; break	the pole
00011D60 6000                       		bra.s	Obj0B_Release
00011D62                            ; ===========================================================================
00011D62                            
00011D62                            Obj0B_MoveUp:				; XREF: Obj0B_Action
00011D62 43F8 D000                  		lea	($FFFFD000).w,a1
00011D66 3028 000C                  		move.w	$C(a0),d0
00011D6A 0440 0018                  		subi.w	#$18,d0
00011D6E 0838 0000 F604             		btst	#0,($FFFFF604).w ; check if "up" is pressed
00011D74 6700                       		beq.s	Obj0B_MoveDown
00011D76 5369 000C                  		subq.w	#1,$C(a1)	; move Sonic up
00011D7A B069 000C                  		cmp.w	$C(a1),d0
00011D7E 6500                       		bcs.s	Obj0B_MoveDown
00011D80 3340 000C                  		move.w	d0,$C(a1)
00011D84                            
00011D84                            Obj0B_MoveDown:
00011D84 0640 0024                  		addi.w	#$24,d0
00011D88 0838 0001 F604             		btst	#1,($FFFFF604).w ; check if "down" is pressed
00011D8E 6700                       		beq.s	Obj0B_LetGo
00011D90 5269 000C                  		addq.w	#1,$C(a1)	; move Sonic down
00011D94 B069 000C                  		cmp.w	$C(a1),d0
00011D98 6400                       		bcc.s	Obj0B_LetGo
00011D9A 3340 000C                  		move.w	d0,$C(a1)
00011D9E                            
00011D9E                            Obj0B_LetGo:
00011D9E 1038 F603                  		move.b	($FFFFF603).w,d0
00011DA2 0240 0070                  		andi.w	#$70,d0
00011DA6 6700                       		beq.s	Obj0B_Display
00011DA8                            
00011DA8                            Obj0B_Release:				; XREF: Obj0B_Action
00011DA8 4228 0020                  		clr.b	$20(a0)
00011DAC 5428 0024                  		addq.b	#2,$24(a0)
00011DB0 4238 F7C8                  		clr.b	($FFFFF7C8).w
00011DB4 4238 F7C9                  		clr.b	($FFFFF7C9).w
00011DB8 4228 0032                  		clr.b	$32(a0)
00011DBC 6000                       		bra.s	Obj0B_Display
00011DBE                            ; ===========================================================================
00011DBE                            
00011DBE                            Obj0B_Grab:				; XREF: Obj0B_Action
00011DBE 4A28 0021                  		tst.b	$21(a0)		; has Sonic touched the	pole?
00011DC2 6700                       		beq.s	Obj0B_Display	; if not, branch
00011DC4 43F8 D000                  		lea	($FFFFD000).w,a1
00011DC8 3028 0008                  		move.w	8(a0),d0
00011DCC 0640 0014                  		addi.w	#$14,d0
00011DD0 B069 0008                  		cmp.w	8(a1),d0
00011DD4 6400                       		bcc.s	Obj0B_Display
00011DD6 4228 0021                  		clr.b	$21(a0)
00011DDA 0C29 0004 0024             		cmpi.b	#4,$24(a1)
00011DE0 6400                       		bcc.s	Obj0B_Display
00011DE2 4269 0010                  		clr.w	$10(a1)		; stop Sonic moving
00011DE6 4269 0012                  		clr.w	$12(a1)		; stop Sonic moving
00011DEA 3028 0008                  		move.w	8(a0),d0
00011DEE 0640 0014                  		addi.w	#$14,d0
00011DF2 3340 0008                  		move.w	d0,8(a1)
00011DF6 08A9 0000 0022             		bclr	#0,$22(a1)
00011DFC 137C 0011 001C             		move.b	#$11,$1C(a1)	; set Sonic's animation to "hanging" ($11)
00011E02 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; lock	controls
00011E08 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w ; disable wind	tunnel
00011E0E 117C 0001 0032             		move.b	#1,$32(a0)	; begin	countdown to breakage
00011E14                            
00011E14                            Obj0B_Display:				; XREF: Obj0B_Index
00011E14 6000 E382                  		bra.w	MarkObjGone
00011E18                            ; ===========================================================================
00011E18                            ; ---------------------------------------------------------------------------
00011E18                            ; Sprite mappings - pole that breaks (LZ)
00011E18                            ; ---------------------------------------------------------------------------
00011E18                            Map_obj0B:
00011E18                            	include "_maps\obj0B.asm"
00011E18                            ; ---------------------------------------------------------------------------
00011E18                            ; Sprite mappings - pole that breaks (LZ)
00011E18                            ; ---------------------------------------------------------------------------
00011E18 0000                       		dc.w byte_11326-Map_obj0B
00011E1A 0000                       		dc.w byte_11331-Map_obj0B
00011E1C 02                         byte_11326:	dc.b 2			; normal pole
00011E1D E003 0000 FC               		dc.b $E0, 3, 0,	0, $FC
00011E22 0003 1000 FC               		dc.b 0,	3, $10,	0, $FC
00011E27 04                         byte_11331:	dc.b 4			; broken pole
00011E28 E001 0000 FC               		dc.b $E0, 1, 0,	0, $FC
00011E2D F005 0004 FC               		dc.b $F0, 5, 0,	4, $FC
00011E32 0005 1004 FC               		dc.b 0,	5, $10,	4, $FC
00011E37 1001 1000 FC               		dc.b $10, 1, $10, 0, $FC
00011E3C                            		even
00011E3C                            		even
00011E3C                            
00011E3C                            ; ===========================================================================
00011E3C                            ; ---------------------------------------------------------------------------
00011E3C                            ; Object 0C - flapping door (LZ)
00011E3C                            ; ---------------------------------------------------------------------------
00011E3C                            
00011E3C                            Obj0C:					; XREF: Obj_Index
00011E3C 7000                       		moveq	#0,d0
00011E3E 1028 0024                  		move.b	$24(a0),d0
00011E42 323B 0000                  		move.w	Obj0C_Index(pc,d0.w),d1
00011E46 4EFB 1000                  		jmp	Obj0C_Index(pc,d1.w)
00011E4A                            ; ===========================================================================
00011E4A 0000                       Obj0C_Index:	dc.w Obj0C_Main-Obj0C_Index
00011E4C 0000                       		dc.w Obj0C_OpenClose-Obj0C_Index
00011E4E                            ; ===========================================================================
00011E4E                            
00011E4E                            Obj0C_Main:				; XREF: Obj0C_Index
00011E4E 5428 0024                  		addq.b	#2,$24(a0)
00011E52 217C 0000 0000 0004        		move.l	#Map_obj0C,4(a0)
00011E5A 317C 4328 0002             		move.w	#$4328,2(a0)
00011E60 0028 0004 0001             		ori.b	#4,1(a0)
00011E66 117C 0028 0019             		move.b	#$28,$19(a0)
00011E6C 7000                       		moveq	#0,d0
00011E6E 1028 0028                  		move.b	$28(a0),d0	; get object type
00011E72 C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 (1 second)
00011E76 3140 0032                  		move.w	d0,$32(a0)	; set flap delay time
00011E7A                            
00011E7A                            Obj0C_OpenClose:			; XREF: Obj0C_Index
00011E7A 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00011E7E 6A00                       		bpl.s	Obj0C_Solid	; if time remains, branch
00011E80 3168 0032 0030             		move.w	$32(a0),$30(a0)	; reset	time delay
00011E86 0868 0000 001C             		bchg	#0,$1C(a0)	; open/close door
00011E8C 4A28 0001                  		tst.b	1(a0)
00011E90 6A00                       		bpl.s	Obj0C_Solid
00011E92 303C 00BB                  		move.w	#$BB,d0
00011E96 4EB9 0000 147C             		jsr	(PlaySound_Special).l ;	play door sound
00011E9C                            
00011E9C                            Obj0C_Solid:
00011E9C 43F9 0000 0000             		lea	(Ani_obj0C).l,a1
00011EA2 6100 934A                  		bsr.w	AnimateSprite
00011EA6 4238 F7C9                  		clr.b	($FFFFF7C9).w	; enable wind tunnel
00011EAA 4A28 001A                  		tst.b	$1A(a0)		; is the door open?
00011EAE 6600                       		bne.s	Obj0C_Display	; if yes, branch
00011EB0 3038 D008                  		move.w	($FFFFD008).w,d0
00011EB4 B068 0008                  		cmp.w	8(a0),d0	; is Sonic in front of the door?
00011EB8 6400                       		bcc.s	Obj0C_Display	; if yes, branch
00011EBA 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w ; disable wind	tunnel
00011EC0 323C 0013                  		move.w	#$13,d1
00011EC4 343C 0020                  		move.w	#$20,d2
00011EC8 3602                       		move.w	d2,d3
00011ECA 5243                       		addq.w	#1,d3
00011ECC 3828 0008                  		move.w	8(a0),d4
00011ED0 6100 E5EE                  		bsr.w	SolidObject	; make the door	solid
00011ED4                            
00011ED4                            Obj0C_Display:
00011ED4 6000 E2C2                  		bra.w	MarkObjGone
00011ED8                            ; ===========================================================================
00011ED8                            Ani_obj0C:
00011ED8                            	include "_anim\obj0C.asm"
00011ED8                            ; ---------------------------------------------------------------------------
00011ED8                            ; Animation script - flapping door (LZ)
00011ED8                            ; ---------------------------------------------------------------------------
00011ED8 0000                       		dc.w byte_113E6-Ani_obj0C
00011EDA 0000                       		dc.w byte_113EC-Ani_obj0C
00011EDC 0300 0102 FE01             byte_113E6:	dc.b 3,	0, 1, 2, $FE, 1
00011EE2 0302 0100 FE01             byte_113EC:	dc.b 3,	2, 1, 0, $FE, 1
00011EE8                            		even
00011EE8                            		even
00011EE8                            
00011EE8                            ; ---------------------------------------------------------------------------
00011EE8                            ; Sprite mappings - flapping door (LZ)
00011EE8                            ; ---------------------------------------------------------------------------
00011EE8                            Map_obj0C:
00011EE8                            	include "_maps\obj0C.asm"
00011EE8                            ; ---------------------------------------------------------------------------
00011EE8                            ; Sprite mappings - flapping door (LZ)
00011EE8                            ; ---------------------------------------------------------------------------
00011EE8 0000                       		dc.w byte_113F8-Map_obj0C
00011EEA 0000                       		dc.w byte_11403-Map_obj0C
00011EEC 0000                       		dc.w byte_1140E-Map_obj0C
00011EEE 02                         byte_113F8:	dc.b 2
00011EEF E007 0000 F8               		dc.b $E0, 7, 0,	0, $F8
00011EF4 0007 1000 F8               		dc.b 0,	7, $10,	0, $F8
00011EF9 02                         byte_11403:	dc.b 2
00011EFA DA0F 0008 FB               		dc.b $DA, $F, 0, 8, $FB
00011EFF 060F 1008 FB               		dc.b 6,	$F, $10, 8, $FB
00011F04 02                         byte_1140E:	dc.b 2
00011F05 D80D 0018 00               		dc.b $D8, $D, 0, $18, 0
00011F0A 180D 1018 00               		dc.b $18, $D, $10, $18,	0
00011F10 00                         		even
00011F10 00                         		even
00011F10                            
00011F10                            ; ===========================================================================
00011F10                            ; ---------------------------------------------------------------------------
00011F10                            ; Object 71 - invisible	solid blocks
00011F10                            ; ---------------------------------------------------------------------------
00011F10                            
00011F10                            Obj71:					; XREF: Obj_Index
00011F10 7000                       		moveq	#0,d0
00011F12 1028 0024                  		move.b	$24(a0),d0
00011F16 323B 0000                  		move.w	Obj71_Index(pc,d0.w),d1
00011F1A 4EFB 1000                  		jmp	Obj71_Index(pc,d1.w)
00011F1E                            ; ===========================================================================
00011F1E 0000                       Obj71_Index:	dc.w Obj71_Main-Obj71_Index
00011F20 0000                       		dc.w Obj71_Solid-Obj71_Index
00011F22                            ; ===========================================================================
00011F22                            
00011F22                            Obj71_Main:				; XREF: Obj71_Index
00011F22 5428 0024                  		addq.b	#2,$24(a0)
00011F26 217C 0000 0000 0004        		move.l	#Map_obj71,4(a0)
00011F2E 317C 8680 0002             		move.w	#$8680,2(a0)
00011F34 0028 0004 0001             		ori.b	#4,1(a0)
00011F3A 1028 0028                  		move.b	$28(a0),d0	; get object type
00011F3E 1200                       		move.b	d0,d1
00011F40 0240 00F0                  		andi.w	#$F0,d0		; read only the	1st byte
00011F44 0640 0010                  		addi.w	#$10,d0
00011F48 E248                       		lsr.w	#1,d0
00011F4A 1140 0019                  		move.b	d0,$19(a0)	; set object width
00011F4E 0241 000F                  		andi.w	#$F,d1		; read only the	2nd byte
00011F52 5241                       		addq.w	#1,d1
00011F54 E749                       		lsl.w	#3,d1
00011F56 1141 0016                  		move.b	d1,$16(a0)	; set object height
00011F5A                            
00011F5A                            Obj71_Solid:				; XREF: Obj71_Index
00011F5A 6100 C3F6                  		bsr.w	ChkObjOnScreen
00011F5E 6600                       		bne.s	Obj71_ChkDel
00011F60 7200                       		moveq	#0,d1
00011F62 1228 0019                  		move.b	$19(a0),d1
00011F66 0641 000B                  		addi.w	#$B,d1
00011F6A 7400                       		moveq	#0,d2
00011F6C 1428 0016                  		move.b	$16(a0),d2
00011F70 3602                       		move.w	d2,d3
00011F72 5243                       		addq.w	#1,d3
00011F74 3828 0008                  		move.w	8(a0),d4
00011F78 6100 E58C                  		bsr.w	SolidObject71
00011F7C                            
00011F7C                            Obj71_ChkDel:
00011F7C 3028 0008                  		move.w	8(a0),d0
00011F80 0240 FF80                  		andi.w	#$FF80,d0
00011F84 3238 F700                  		move.w	($FFFFF700).w,d1
00011F88 0441 0080                  		subi.w	#$80,d1
00011F8C 0241 FF80                  		andi.w	#$FF80,d1
00011F90 9041                       		sub.w	d1,d0
00011F92 0C40 0280                  		cmpi.w	#$280,d0
00011F96 6200                       		bhi.s	Obj71_Delete
00011F98 4A78 FE08                  		tst.w	($FFFFFE08).w	; are you using	debug mode?
00011F9C 6700                       		beq.s	Obj71_NoDisplay	; if not, branch
00011F9E 4EFA C136                  		jmp	DisplaySprite	; if yes, display the object
00011FA2                            ; ===========================================================================
00011FA2                            
00011FA2                            Obj71_NoDisplay:
00011FA2 4E75                       		rts	
00011FA4                            ; ===========================================================================
00011FA4                            
00011FA4                            Obj71_Delete:
00011FA4 4EFA C16C                  		jmp	DeleteObject
00011FA8                            ; ===========================================================================
00011FA8                            ; ---------------------------------------------------------------------------
00011FA8                            ; Sprite mappings - invisible solid blocks
00011FA8                            ; ---------------------------------------------------------------------------
00011FA8                            Map_obj71:
00011FA8                            	include "_maps\obj71.asm"
00011FA8                            ; ---------------------------------------------------------------------------
00011FA8                            ; Sprite mappings - invisible solid blocks
00011FA8                            ; ---------------------------------------------------------------------------
00011FA8 0000                       		dc.w byte_114BC-Map_obj71
00011FAA 0000                       		dc.w byte_114D1-Map_obj71
00011FAC 0000                       		dc.w byte_114E6-Map_obj71
00011FAE 04                         byte_114BC:	dc.b 4
00011FAF F005 0018 F0               		dc.b $F0, 5, 0,	$18, $F0
00011FB4 F005 0018 00               		dc.b $F0, 5, 0,	$18, 0
00011FB9 0005 0018 F0               		dc.b 0,	5, 0, $18, $F0
00011FBE 0005 0018 00               		dc.b 0,	5, 0, $18, 0
00011FC3 04                         byte_114D1:	dc.b 4
00011FC4 E005 0018 C0               		dc.b $E0, 5, 0,	$18, $C0
00011FC9 E005 0018 30               		dc.b $E0, 5, 0,	$18, $30
00011FCE 1005 0018 C0               		dc.b $10, 5, 0,	$18, $C0
00011FD3 1005 0018 30               		dc.b $10, 5, 0,	$18, $30
00011FD8 04                         byte_114E6:	dc.b 4
00011FD9 E005 0018 80               		dc.b $E0, 5, 0,	$18, $80
00011FDE E005 0018 70               		dc.b $E0, 5, 0,	$18, $70
00011FE3 1005 0018 80               		dc.b $10, 5, 0,	$18, $80
00011FE8 1005 0018 70               		dc.b $10, 5, 0,	$18, $70
00011FEE 00                         		even
00011FEE 00                         		even
00011FEE                            
00011FEE                            ; ===========================================================================
00011FEE                            ; ---------------------------------------------------------------------------
00011FEE                            ; Object 5D - fans (SLZ)
00011FEE                            ; ---------------------------------------------------------------------------
00011FEE                            
00011FEE                            Obj5D:					; XREF: Obj_Index
00011FEE 7000                       		moveq	#0,d0
00011FF0 1028 0024                  		move.b	$24(a0),d0
00011FF4 323B 0000                  		move.w	Obj5D_Index(pc,d0.w),d1
00011FF8 4EFB 1000                  		jmp	Obj5D_Index(pc,d1.w)
00011FFC                            ; ===========================================================================
00011FFC 0000                       Obj5D_Index:	dc.w Obj5D_Main-Obj5D_Index
00011FFE 0000                       		dc.w Obj5D_Delay-Obj5D_Index
00012000                            ; ===========================================================================
00012000                            
00012000                            Obj5D_Main:				; XREF: Obj5D_Index
00012000 5428 0024                  		addq.b	#2,$24(a0)
00012004 217C 0000 0000 0004        		move.l	#Map_obj5D,4(a0)
0001200C 317C 43A0 0002             		move.w	#$43A0,2(a0)
00012012 0028 0004 0001             		ori.b	#4,1(a0)
00012018 117C 0010 0019             		move.b	#$10,$19(a0)
0001201E 117C 0004 0018             		move.b	#4,$18(a0)
00012024                            
00012024                            Obj5D_Delay:				; XREF: Obj5D_Index
00012024 0828 0001 0028             		btst	#1,$28(a0)	; is object type 02/03?
0001202A 6600                       		bne.s	Obj5D_Blow	; if yes, branch
0001202C 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00012030 6A00                       		bpl.s	Obj5D_Blow	; if time remains, branch
00012032 317C 0078 0030             		move.w	#120,$30(a0)	; set delay to 2 seconds
00012038 0868 0000 0032             		bchg	#0,$32(a0)	; switch fan on/off
0001203E 6700                       		beq.s	Obj5D_Blow	; if fan is off, branch
00012040 317C 00B4 0030             		move.w	#180,$30(a0)	; set delay to 3 seconds
00012046                            
00012046                            Obj5D_Blow:
00012046 4A28 0032                  		tst.b	$32(a0)		; is fan switched on?
0001204A 6600 0000                  		bne.w	Obj5D_ChkDel	; if not, branch
0001204E 43F8 D000                  		lea	($FFFFD000).w,a1
00012052 3029 0008                  		move.w	8(a1),d0
00012056 9068 0008                  		sub.w	8(a0),d0
0001205A 0828 0000 0022             		btst	#0,$22(a0)
00012060 6600                       		bne.s	Obj5D_ChkSonic
00012062 4440                       		neg.w	d0
00012064                            
00012064                            Obj5D_ChkSonic:
00012064 0640 0050                  		addi.w	#$50,d0
00012068 0C40 00F0                  		cmpi.w	#$F0,d0		; is Sonic more	than $A0 pixels	from the fan?
0001206C 6400                       		bcc.s	Obj5D_Animate	; if yes, branch
0001206E 3229 000C                  		move.w	$C(a1),d1
00012072 0641 0060                  		addi.w	#$60,d1
00012076 9268 000C                  		sub.w	$C(a0),d1
0001207A 6500                       		bcs.s	Obj5D_Animate
0001207C 0C41 0070                  		cmpi.w	#$70,d1
00012080 6400                       		bcc.s	Obj5D_Animate
00012082 0440 0050                  		subi.w	#$50,d0
00012086 6400                       		bcc.s	loc_1159A
00012088 4640                       		not.w	d0
0001208A D040                       		add.w	d0,d0
0001208C                            
0001208C                            loc_1159A:
0001208C 0640 0060                  		addi.w	#$60,d0
00012090 0828 0000 0022             		btst	#0,$22(a0)
00012096 6600                       		bne.s	loc_115A8
00012098 4440                       		neg.w	d0
0001209A                            
0001209A                            loc_115A8:
0001209A 4400                       		neg.b	d0
0001209C E840                       		asr.w	#4,d0
0001209E 0828 0000 0028             		btst	#0,$28(a0)
000120A4 6700                       		beq.s	Obj5D_MoveSonic
000120A6 4440                       		neg.w	d0
000120A8                            
000120A8                            Obj5D_MoveSonic:
000120A8 D169 0008                  		add.w	d0,8(a1)	; push Sonic away from the fan
000120AC                            
000120AC                            Obj5D_Animate:				; XREF: Obj5D_ChkSonic
000120AC 5328 001E                  		subq.b	#1,$1E(a0)
000120B0 6A00                       		bpl.s	Obj5D_ChkDel
000120B2 117C 0000 001E             		move.b	#0,$1E(a0)
000120B8 5228 001B                  		addq.b	#1,$1B(a0)
000120BC 0C28 0003 001B             		cmpi.b	#3,$1B(a0)
000120C2 6500                       		bcs.s	loc_115D8
000120C4 117C 0000 001B             		move.b	#0,$1B(a0)
000120CA                            
000120CA                            loc_115D8:
000120CA 7000                       		moveq	#0,d0
000120CC 0828 0000 0028             		btst	#0,$28(a0)
000120D2 6700                       		beq.s	loc_115E4
000120D4 7002                       		moveq	#2,d0
000120D6                            
000120D6                            loc_115E4:
000120D6 D028 001B                  		add.b	$1B(a0),d0
000120DA 1140 001A                  		move.b	d0,$1A(a0)
000120DE                            
000120DE                            Obj5D_ChkDel:				; XREF: Obj5D_Animate
000120DE 6100 BFF6                  		bsr.w	DisplaySprite
000120E2 3028 0008                  		move.w	8(a0),d0
000120E6 0240 FF80                  		andi.w	#$FF80,d0
000120EA 3238 F700                  		move.w	($FFFFF700).w,d1
000120EE 0441 0080                  		subi.w	#$80,d1
000120F2 0241 FF80                  		andi.w	#$FF80,d1
000120F6 9041                       		sub.w	d1,d0
000120F8 0C40 0280                  		cmpi.w	#$280,d0
000120FC 6200 C014                  		bhi.w	DeleteObject
00012100 4E75                       		rts	
00012102                            ; ===========================================================================
00012102                            ; ---------------------------------------------------------------------------
00012102                            ; Sprite mappings - fans (SLZ)
00012102                            ; ---------------------------------------------------------------------------
00012102                            Map_obj5D:
00012102                            	include "_maps\obj5D.asm"
00012102                            ; ---------------------------------------------------------------------------
00012102                            ; Sprite mappings - fans (SLZ)
00012102                            ; ---------------------------------------------------------------------------
00012102 0000 0000                  		dc.w byte_1161A-Map_obj5D, byte_11625-Map_obj5D
00012106 0000 0000                  		dc.w byte_11630-Map_obj5D, byte_11625-Map_obj5D
0001210A 0000                       		dc.w byte_1161A-Map_obj5D
0001210C 02                         byte_1161A:	dc.b 2
0001210D F009 0000 F8               		dc.b $F0, 9, 0,	0, $F8
00012112 000D 0006 F0               		dc.b 0,	$D, 0, 6, $F0
00012117 02                         byte_11625:	dc.b 2
00012118 F00D 000E F0               		dc.b $F0, $D, 0, $E, $F0
0001211D 000D 0016 F0               		dc.b 0,	$D, 0, $16, $F0
00012122 02                         byte_11630:	dc.b 2
00012123 F00D 001E F0               		dc.b $F0, $D, 0, $1E, $F0
00012128 0009 0026 F8               		dc.b 0,	9, 0, $26, $F8
0001212E 00                         		even
0001212E 00                         		even
0001212E                            
0001212E                            ; ===========================================================================
0001212E                            ; ---------------------------------------------------------------------------
0001212E                            ; Object 5E - seesaws (SLZ)
0001212E                            ; ---------------------------------------------------------------------------
0001212E                            
0001212E                            Obj5E:					; XREF: Obj_Index
0001212E 7000                       		moveq	#0,d0
00012130 1028 0024                  		move.b	$24(a0),d0
00012134 323B 0000                  		move.w	Obj5E_Index(pc,d0.w),d1
00012138 4EBB 1000                  		jsr	Obj5E_Index(pc,d1.w)
0001213C 3028 0030                  		move.w	$30(a0),d0
00012140 0240 FF80                  		andi.w	#$FF80,d0
00012144 3238 F700                  		move.w	($FFFFF700).w,d1
00012148 0441 0080                  		subi.w	#$80,d1
0001214C 0241 FF80                  		andi.w	#$FF80,d1
00012150 9041                       		sub.w	d1,d0
00012152 6B00 BFBE                  		bmi.w	DeleteObject
00012156 0C40 0280                  		cmpi.w	#$280,d0
0001215A 6200 BFB6                  		bhi.w	DeleteObject
0001215E 6000 BF76                  		bra.w	DisplaySprite
00012162                            ; ===========================================================================
00012162 0000                       Obj5E_Index:	dc.w Obj5E_Main-Obj5E_Index
00012164 0000                       		dc.w Obj5E_Slope-Obj5E_Index
00012166 0000                       		dc.w Obj5E_Slope2-Obj5E_Index
00012168 0000                       		dc.w Obj5E_Spikeball-Obj5E_Index
0001216A 0000                       		dc.w Obj5E_MoveSpike-Obj5E_Index
0001216C 0000                       		dc.w Obj5E_SpikeFall-Obj5E_Index
0001216E                            ; ===========================================================================
0001216E                            
0001216E                            Obj5E_Main:				; XREF: Obj5E_Index
0001216E 5428 0024                  		addq.b	#2,$24(a0)
00012172 217C 0000 0000 0004        		move.l	#Map_obj5E,4(a0)
0001217A 317C 0374 0002             		move.w	#$374,2(a0)
00012180 0028 0004 0001             		ori.b	#4,1(a0)
00012186 117C 0004 0018             		move.b	#4,$18(a0)
0001218C 117C 0030 0019             		move.b	#$30,$19(a0)
00012192 3168 0008 0030             		move.w	8(a0),$30(a0)
00012198 4A28 0028                  		tst.b	$28(a0)		; is object type 00 ?
0001219C 6600                       		bne.s	loc_116D2	; if not, branch
0001219E 6100 C3E2                  		bsr.w	SingleObjLoad2
000121A2 6600                       		bne.s	loc_116D2
000121A4 12BC 005E                  		move.b	#$5E,0(a1)	; load spikeball object
000121A8 5C29 0024                  		addq.b	#6,$24(a1)
000121AC 3368 0008 0008             		move.w	8(a0),8(a1)
000121B2 3368 000C 000C             		move.w	$C(a0),$C(a1)
000121B8 1368 0022 0022             		move.b	$22(a0),$22(a1)
000121BE 2348 003C                  		move.l	a0,$3C(a1)
000121C2                            
000121C2                            loc_116D2:
000121C2 0828 0000 0022             		btst	#0,$22(a0)
000121C8 6700                       		beq.s	loc_116E0
000121CA 117C 0002 001A             		move.b	#2,$1A(a0)
000121D0                            
000121D0                            loc_116E0:
000121D0 1168 001A 003A             		move.b	$1A(a0),$3A(a0)
000121D6                            
000121D6                            Obj5E_Slope:				; XREF: Obj5E_Index
000121D6 1228 003A                  		move.b	$3A(a0),d1
000121DA 6100 0000                  		bsr.w	loc_11766
000121DE 45F9 0000 0000             		lea	(Obj5E_Data1).l,a2
000121E4 0828 0000 001A             		btst	#0,$1A(a0)
000121EA 6700                       		beq.s	loc_11702
000121EC 45F9 0000 0000             		lea	(Obj5E_Data2).l,a2
000121F2                            
000121F2                            loc_11702:
000121F2 43F8 D000                  		lea	($FFFFD000).w,a1
000121F6 3169 0012 0038             		move.w	$12(a1),$38(a0)
000121FC 323C 0030                  		move.w	#$30,d1
00012200 4EB9 0000 7FA2             		jsr	(SlopeObject).l
00012206 4E75                       		rts	
00012208                            ; ===========================================================================
00012208                            
00012208                            Obj5E_Slope2:				; XREF: Obj5E_Index
00012208 6100 0000                  		bsr.w	loc_1174A
0001220C 45F9 0000 0000             		lea	(Obj5E_Data1).l,a2
00012212 0828 0000 001A             		btst	#0,$1A(a0)
00012218 6700                       		beq.s	loc_11730
0001221A 45F9 0000 0000             		lea	(Obj5E_Data2).l,a2
00012220                            
00012220                            loc_11730:
00012220 323C 0030                  		move.w	#$30,d1
00012224 4EB9 0000 8042             		jsr	(ExitPlatform).l
0001222A 323C 0030                  		move.w	#$30,d1
0001222E 3428 0008                  		move.w	8(a0),d2
00012232 4EB9 0000 8FA0             		jsr	SlopeObject2
00012238 4E75                       		rts	
0001223A                            ; ===========================================================================
0001223A                            
0001223A                            loc_1174A:				; XREF: Obj5E_Slope2
0001223A 7202                       		moveq	#2,d1
0001223C 43F8 D000                  		lea	($FFFFD000).w,a1
00012240 3028 0008                  		move.w	8(a0),d0
00012244 9069 0008                  		sub.w	8(a1),d0
00012248 6400                       		bcc.s	loc_1175E
0001224A 4440                       		neg.w	d0
0001224C 7200                       		moveq	#0,d1
0001224E                            
0001224E                            loc_1175E:
0001224E 0C40 0008                  		cmpi.w	#8,d0
00012252 6400                       		bcc.s	loc_11766
00012254 7201                       		moveq	#1,d1
00012256                            
00012256                            loc_11766:
00012256 1028 001A                  		move.b	$1A(a0),d0
0001225A B001                       		cmp.b	d1,d0
0001225C 6700                       		beq.s	locret_11790
0001225E 6400                       		bcc.s	loc_11772
00012260 5400                       		addq.b	#2,d0
00012262                            
00012262                            loc_11772:
00012262 5300                       		subq.b	#1,d0
00012264 1140 001A                  		move.b	d0,$1A(a0)
00012268 1141 003A                  		move.b	d1,$3A(a0)
0001226C 08A8 0000 0001             		bclr	#0,1(a0)
00012272 0828 0001 001A             		btst	#1,$1A(a0)
00012278 6700                       		beq.s	locret_11790
0001227A 08E8 0000 0001             		bset	#0,1(a0)
00012280                            
00012280                            locret_11790:
00012280 4E75                       		rts	
00012282                            ; ===========================================================================
00012282                            
00012282                            Obj5E_Spikeball:			; XREF: Obj5E_Index
00012282 5428 0024                  		addq.b	#2,$24(a0)
00012286 217C 0000 0000 0004        		move.l	#Map_obj5Ea,4(a0)
0001228E 317C 04F0 0002             		move.w	#$4F0,2(a0)
00012294 0028 0004 0001             		ori.b	#4,1(a0)
0001229A 117C 0004 0018             		move.b	#4,$18(a0)
000122A0 117C 008B 0020             		move.b	#$8B,$20(a0)
000122A6 117C 000C 0019             		move.b	#$C,$19(a0)
000122AC 3168 0008 0030             		move.w	8(a0),$30(a0)
000122B2 0668 0028 0008             		addi.w	#$28,8(a0)
000122B8 3168 000C 0034             		move.w	$C(a0),$34(a0)
000122BE 117C 0001 001A             		move.b	#1,$1A(a0)
000122C4 0828 0000 0022             		btst	#0,$22(a0)
000122CA 6700                       		beq.s	Obj5E_MoveSpike
000122CC 0468 0050 0008             		subi.w	#$50,8(a0)
000122D2 117C 0002 003A             		move.b	#2,$3A(a0)
000122D8                            
000122D8                            Obj5E_MoveSpike:			; XREF: Obj5E_Index
000122D8 2268 003C                  		movea.l	$3C(a0),a1
000122DC 7000                       		moveq	#0,d0
000122DE 1028 003A                  		move.b	$3A(a0),d0
000122E2 9029 003A                  		sub.b	$3A(a1),d0
000122E6 6700                       		beq.s	loc_1183E
000122E8 6400                       		bcc.s	loc_117FC
000122EA 4400                       		neg.b	d0
000122EC                            
000122EC                            loc_117FC:
000122EC 323C F7E8                  		move.w	#-$818,d1
000122F0 343C FEEC                  		move.w	#-$114,d2
000122F4 0C00 0001                  		cmpi.b	#1,d0
000122F8 6700                       		beq.s	loc_11822
000122FA 323C F510                  		move.w	#-$AF0,d1
000122FE 343C FF34                  		move.w	#-$CC,d2
00012302 0C69 0A00 0038             		cmpi.w	#$A00,$38(a1)
00012308 6D00                       		blt.s	loc_11822
0001230A 323C F200                  		move.w	#-$E00,d1
0001230E 343C FF60                  		move.w	#-$A0,d2
00012312                            
00012312                            loc_11822:
00012312 3141 0012                  		move.w	d1,$12(a0)
00012316 3142 0010                  		move.w	d2,$10(a0)
0001231A 3028 0008                  		move.w	8(a0),d0
0001231E 9068 0030                  		sub.w	$30(a0),d0
00012322 6400                       		bcc.s	loc_11838
00012324 4468 0010                  		neg.w	$10(a0)
00012328                            
00012328                            loc_11838:
00012328 5428 0024                  		addq.b	#2,$24(a0)
0001232C 6000                       		bra.s	Obj5E_SpikeFall
0001232E                            ; ===========================================================================
0001232E                            
0001232E                            loc_1183E:				; XREF: Obj5E_MoveSpike
0001232E 45F9 0000 0000             		lea	(Obj5E_Speeds).l,a2
00012334 7000                       		moveq	#0,d0
00012336 1029 001A                  		move.b	$1A(a1),d0
0001233A 343C 0028                  		move.w	#$28,d2
0001233E 3228 0008                  		move.w	8(a0),d1
00012342 9268 0030                  		sub.w	$30(a0),d1
00012346 6400                       		bcc.s	loc_1185C
00012348 4442                       		neg.w	d2
0001234A 5440                       		addq.w	#2,d0
0001234C                            
0001234C                            loc_1185C:
0001234C D040                       		add.w	d0,d0
0001234E 3228 0034                  		move.w	$34(a0),d1
00012352 D272 0000                  		add.w	(a2,d0.w),d1
00012356 3141 000C                  		move.w	d1,$C(a0)
0001235A D468 0030                  		add.w	$30(a0),d2
0001235E 3142 0008                  		move.w	d2,8(a0)
00012362 4268 000E                  		clr.w	$E(a0)
00012366 4268 000A                  		clr.w	$A(a0)
0001236A 4E75                       		rts	
0001236C                            ; ===========================================================================
0001236C                            
0001236C                            Obj5E_SpikeFall:			; XREF: Obj5E_Index
0001236C 4A68 0012                  		tst.w	$12(a0)
00012370 6A00                       		bpl.s	loc_1189A
00012372 6100 BD10                  		bsr.w	ObjectFall
00012376 3028 0034                  		move.w	$34(a0),d0
0001237A 0440 002F                  		subi.w	#$2F,d0
0001237E B068 000C                  		cmp.w	$C(a0),d0
00012382 6E00                       		bgt.s	locret_11898
00012384 6100 BCFE                  		bsr.w	ObjectFall
00012388                            
00012388                            locret_11898:
00012388 4E75                       		rts	
0001238A                            ; ===========================================================================
0001238A                            
0001238A                            loc_1189A:				; XREF: Obj5E_SpikeFall
0001238A 6100 BCF8                  		bsr.w	ObjectFall
0001238E 2268 003C                  		movea.l	$3C(a0),a1
00012392 45F9 0000 0000             		lea	(Obj5E_Speeds).l,a2
00012398 7000                       		moveq	#0,d0
0001239A 1029 001A                  		move.b	$1A(a1),d0
0001239E 3228 0008                  		move.w	8(a0),d1
000123A2 9268 0030                  		sub.w	$30(a0),d1
000123A6 6400                       		bcc.s	loc_118BA
000123A8 5440                       		addq.w	#2,d0
000123AA                            
000123AA                            loc_118BA:
000123AA D040                       		add.w	d0,d0
000123AC 3228 0034                  		move.w	$34(a0),d1
000123B0 D272 0000                  		add.w	(a2,d0.w),d1
000123B4 B268 000C                  		cmp.w	$C(a0),d1
000123B8 6E00                       		bgt.s	locret_11938
000123BA 2268 003C                  		movea.l	$3C(a0),a1
000123BE 7202                       		moveq	#2,d1
000123C0 4A68 0010                  		tst.w	$10(a0)
000123C4 6B00                       		bmi.s	Obj5E_Spring
000123C6 7200                       		moveq	#0,d1
000123C8                            
000123C8                            Obj5E_Spring:
000123C8 1341 003A                  		move.b	d1,$3A(a1)
000123CC 1141 003A                  		move.b	d1,$3A(a0)
000123D0 B229 001A                  		cmp.b	$1A(a1),d1
000123D4 6700                       		beq.s	loc_1192C
000123D6 08A9 0003 0022             		bclr	#3,$22(a1)
000123DC 6700                       		beq.s	loc_1192C
000123DE 4229 0025                  		clr.b	$25(a1)
000123E2 137C 0002 0024             		move.b	#2,$24(a1)
000123E8 45F8 D000                  		lea	($FFFFD000).w,a2
000123EC 3568 0012 0012             		move.w	$12(a0),$12(a2)
000123F2 446A 0012                  		neg.w	$12(a2)
000123F6 08EA 0001 0022             		bset	#1,$22(a2)
000123FC 08AA 0003 0022             		bclr	#3,$22(a2)
00012402 422A 003C                  		clr.b	$3C(a2)
00012406 157C 0010 001C             		move.b	#$10,$1C(a2)	; change Sonic's animation to "spring" ($10)
0001240C 157C 0002 0024             		move.b	#2,$24(a2)
00012412 303C 00CC                  		move.w	#$CC,d0
00012416 4EB9 0000 147C             		jsr	(PlaySound_Special).l ;	play spring sound
0001241C                            
0001241C                            loc_1192C:
0001241C 4268 0010                  		clr.w	$10(a0)
00012420 4268 0012                  		clr.w	$12(a0)
00012424 5528 0024                  		subq.b	#2,$24(a0)
00012428                            
00012428                            locret_11938:
00012428 4E75                       		rts	
0001242A                            ; ===========================================================================
0001242A FFF8 FFE4 FFD1 FFE4 FFF8   Obj5E_Speeds:	dc.w $FFF8, $FFE4, $FFD1, $FFE4, $FFF8
00012434                            
00012434                            Obj5E_Data1:	incbin	misc\slzssaw1.bin
00012464                            		even
00012464                            Obj5E_Data2:	incbin	misc\slzssaw2.bin
00012494                            		even
00012494                            ; ---------------------------------------------------------------------------
00012494                            ; Sprite mappings - seesaws (SLZ)
00012494                            ; ---------------------------------------------------------------------------
00012494                            Map_obj5E:
00012494                            	include "_maps\obj5E.asm"
00012494                            ; ---------------------------------------------------------------------------
00012494                            ; Sprite mappings - seesaws (SLZ)
00012494                            ; ---------------------------------------------------------------------------
00012494 0000 0000                  		dc.w byte_119AC-Map_obj5E, byte_119D0-Map_obj5E
00012498 0000 0000                  		dc.w byte_119AC-Map_obj5E, byte_119D0-Map_obj5E
0001249C 07                         byte_119AC:	dc.b 7
0001249D D406 0000 D3               		dc.b $D4, 6, 0,	0, $D3
000124A2 DC06 0006 E3               		dc.b $DC, 6, 0,	6, $E3
000124A7 E404 000C F3               		dc.b $E4, 4, 0,	$C, $F3
000124AC EC0D 000E F3               		dc.b $EC, $D, 0, $E, $F3
000124B1 FC08 0016 FB               		dc.b $FC, 8, 0,	$16, $FB
000124B6 F406 0006 13               		dc.b $F4, 6, 0,	6, $13
000124BB FC05 0019 23               		dc.b $FC, 5, 0,	$19, $23
000124C0 04                         byte_119D0:	dc.b 4
000124C1 E60A 001D D0               		dc.b $E6, $A, 0, $1D, $D0
000124C6 E60A 0023 E8               		dc.b $E6, $A, 0, $23, $E8
000124CB E60A 0823 00               		dc.b $E6, $A, 8, $23, 0
000124D0 E60A 081D 18               		dc.b $E6, $A, 8, $1D, $18
000124D6 00                         		even
000124D6 00                         		even
000124D6                            
000124D6                            ; ---------------------------------------------------------------------------
000124D6                            ; Sprite mappings - spiked balls on the	seesaws	(SLZ)
000124D6                            ; ---------------------------------------------------------------------------
000124D6                            Map_obj5Ea:
000124D6                            	include "_maps\obj5Eballs.asm"
000124D6                            ; ---------------------------------------------------------------------------
000124D6                            ; Sprite mappings - spiked balls on the	seesaws	(SLZ)
000124D6                            ; ---------------------------------------------------------------------------
000124D6 0000                       		dc.w byte_119EA-Map_obj5Ea
000124D8 0000                       		dc.w byte_119F0-Map_obj5Ea
000124DA 01                         byte_119EA:	dc.b 1
000124DB F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
000124E0 01                         byte_119F0:	dc.b 1
000124E1 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
000124E6                            		even
000124E6                            		even
000124E6                            
000124E6                            ; ===========================================================================
000124E6                            ; ---------------------------------------------------------------------------
000124E6                            ; Object 5F - walking bomb enemy (SLZ, SBZ)
000124E6                            ; ---------------------------------------------------------------------------
000124E6                            
000124E6                            Obj5F:					; XREF: Obj_Index
000124E6 7000                       		moveq	#0,d0
000124E8 1028 0024                  		move.b	$24(a0),d0
000124EC 323B 0000                  		move.w	Obj5F_Index(pc,d0.w),d1
000124F0 4EFB 1000                  		jmp	Obj5F_Index(pc,d1.w)
000124F4                            ; ===========================================================================
000124F4 0000                       Obj5F_Index:	dc.w Obj5F_Main-Obj5F_Index
000124F6 0000                       		dc.w Obj5F_Action-Obj5F_Index
000124F8 0000                       		dc.w Obj5F_Display-Obj5F_Index
000124FA 0000                       		dc.w Obj5F_End-Obj5F_Index
000124FC                            ; ===========================================================================
000124FC                            
000124FC                            Obj5F_Main:				; XREF: Obj5F_Index
000124FC 5428 0024                  		addq.b	#2,$24(a0)
00012500 217C 0000 0000 0004        		move.l	#Map_obj5F,4(a0)
00012508 317C 0400 0002             		move.w	#$400,2(a0)
0001250E 0028 0004 0001             		ori.b	#4,1(a0)
00012514 117C 0003 0018             		move.b	#3,$18(a0)
0001251A 117C 000C 0019             		move.b	#$C,$19(a0)
00012520 1028 0028                  		move.b	$28(a0),d0
00012524 6700                       		beq.s	loc_11A3C
00012526 1140 0024                  		move.b	d0,$24(a0)
0001252A 4E75                       		rts	
0001252C                            ; ===========================================================================
0001252C                            
0001252C                            loc_11A3C:
0001252C 117C 009A 0020             		move.b	#$9A,$20(a0)
00012532 0868 0000 0022             		bchg	#0,$22(a0)
00012538                            
00012538                            Obj5F_Action:				; XREF: Obj5F_Index
00012538 7000                       		moveq	#0,d0
0001253A 1028 0025                  		move.b	$25(a0),d0
0001253E 323B 0000                  		move.w	Obj5F_Index2(pc,d0.w),d1
00012542 4EBB 1000                  		jsr	Obj5F_Index2(pc,d1.w)
00012546 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
0001254C 6100 8CA0                  		bsr.w	AnimateSprite
00012550 6000 DC46                  		bra.w	MarkObjGone
00012554                            ; ===========================================================================
00012554 0000                       Obj5F_Index2:	dc.w Obj5F_Walk-Obj5F_Index2
00012556 0000                       		dc.w Obj5F_Wait-Obj5F_Index2
00012558 0000                       		dc.w Obj5F_Explode-Obj5F_Index2
0001255A                            ; ===========================================================================
0001255A                            
0001255A                            Obj5F_Walk:				; XREF: Obj5F_Index2
0001255A 6100 0000                  		bsr.w	Obj5F_ChkSonic
0001255E 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00012562 6A00                       		bpl.s	locret_11A96	; if time remains, branch
00012564 5428 0025                  		addq.b	#2,$25(a0)
00012568 317C 05FF 0030             		move.w	#1535,$30(a0)	; set time delay to 25 seconds
0001256E 317C 0010 0010             		move.w	#$10,$10(a0)
00012574 117C 0001 001C             		move.b	#1,$1C(a0)
0001257A 0868 0000 0022             		bchg	#0,$22(a0)
00012580 6700                       		beq.s	locret_11A96
00012582 4468 0010                  		neg.w	$10(a0)		; change direction
00012586                            
00012586                            locret_11A96:
00012586 4E75                       		rts	
00012588                            ; ===========================================================================
00012588                            
00012588                            Obj5F_Wait:				; XREF: Obj5F_Index2
00012588 6100 0000                  		bsr.w	Obj5F_ChkSonic
0001258C 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00012590 6B00                       		bmi.s	loc_11AA8
00012592 6100 BB1C                  		bsr.w	SpeedToPos
00012596 4E75                       		rts	
00012598                            ; ===========================================================================
00012598                            
00012598                            loc_11AA8:
00012598 5528 0025                  		subq.b	#2,$25(a0)
0001259C 317C 00B3 0030             		move.w	#179,$30(a0)	; set time delay to 3 seconds
000125A2 4268 0010                  		clr.w	$10(a0)		; stop walking
000125A6 117C 0000 001C             		move.b	#0,$1C(a0)	; stop animation
000125AC 4E75                       		rts	
000125AE                            ; ===========================================================================
000125AE                            
000125AE                            Obj5F_Explode:				; XREF: Obj5F_Index2
000125AE 5368 0030                  		subq.w	#1,$30(a0)
000125B2 6A00                       		bpl.s	locret_11AD0
000125B4 10BC 003F                  		move.b	#$3F,0(a0)	; change bomb into an explosion
000125B8 117C 0000 0024             		move.b	#0,$24(a0)
000125BE                            
000125BE                            locret_11AD0:
000125BE 4E75                       		rts	
000125C0                            ; ===========================================================================
000125C0                            
000125C0                            Obj5F_ChkSonic:				; XREF: Obj5F_Walk; Obj5F_Wait
000125C0 3038 D008                  		move.w	($FFFFD008).w,d0
000125C4 9068 0008                  		sub.w	8(a0),d0
000125C8 6400                       		bcc.s	loc_11ADE
000125CA 4440                       		neg.w	d0
000125CC                            
000125CC                            loc_11ADE:
000125CC 0C40 0060                  		cmpi.w	#$60,d0
000125D0 6400                       		bcc.s	locret_11B5E
000125D2 3038 D00C                  		move.w	($FFFFD00C).w,d0
000125D6 9068 000C                  		sub.w	$C(a0),d0
000125DA 6400                       		bcc.s	Obj5F_MakeFuse
000125DC 4440                       		neg.w	d0
000125DE                            
000125DE                            Obj5F_MakeFuse:
000125DE 0C40 0060                  		cmpi.w	#$60,d0
000125E2 6400                       		bcc.s	locret_11B5E
000125E4 4A78 FE08                  		tst.w	($FFFFFE08).w
000125E8 6600                       		bne.s	locret_11B5E
000125EA 117C 0004 0025             		move.b	#4,$25(a0)
000125F0 317C 008F 0030             		move.w	#143,$30(a0)	; set fuse time
000125F6 4268 0010                  		clr.w	$10(a0)
000125FA 117C 0002 001C             		move.b	#2,$1C(a0)
00012600 6100 BF80                  		bsr.w	SingleObjLoad2
00012604 6600                       		bne.s	locret_11B5E
00012606 12BC 005F                  		move.b	#$5F,0(a1)	; load fuse object
0001260A 3368 0008 0008             		move.w	8(a0),8(a1)
00012610 3368 000C 000C             		move.w	$C(a0),$C(a1)
00012616 3368 000C 0034             		move.w	$C(a0),$34(a1)
0001261C 1368 0022 0022             		move.b	$22(a0),$22(a1)
00012622 137C 0004 0028             		move.b	#4,$28(a1)
00012628 137C 0003 001C             		move.b	#3,$1C(a1)
0001262E 337C 0010 0012             		move.w	#$10,$12(a1)
00012634 0828 0001 0022             		btst	#1,$22(a0)
0001263A 6700                       		beq.s	loc_11B54
0001263C 4469 0012                  		neg.w	$12(a1)
00012640                            
00012640                            loc_11B54:
00012640 337C 008F 0030             		move.w	#143,$30(a1)	; set fuse time
00012646 2348 003C                  		move.l	a0,$3C(a1)
0001264A                            
0001264A                            locret_11B5E:
0001264A 4E75                       		rts	
0001264C                            ; ===========================================================================
0001264C                            
0001264C                            Obj5F_Display:				; XREF: Obj5F_Index
0001264C 6100                       		bsr.s	loc_11B70
0001264E 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
00012654 6100 8B98                  		bsr.w	AnimateSprite
00012658 6000 DB3E                  		bra.w	MarkObjGone
0001265C                            ; ===========================================================================
0001265C                            
0001265C                            loc_11B70:
0001265C 5368 0030                  		subq.w	#1,$30(a0)
00012660 6B00                       		bmi.s	loc_11B7C
00012662 6100 BA4C                  		bsr.w	SpeedToPos
00012666 4E75                       		rts	
00012668                            ; ===========================================================================
00012668                            
00012668                            loc_11B7C:
00012668 4268 0030                  		clr.w	$30(a0)
0001266C 4228 0024                  		clr.b	$24(a0)
00012670 3168 0034 000C             		move.w	$34(a0),$C(a0)
00012676 7203                       		moveq	#3,d1
00012678 2248                       		movea.l	a0,a1
0001267A 45F9 0000 0000             		lea	(Obj5F_ShrSpeed).l,a2 ;	load shrapnel speed data
00012680 6000                       		bra.s	Obj5F_MakeShrap
00012682                            ; ===========================================================================
00012682                            
00012682                            Obj5F_Loop:
00012682 6100 BEFE                  		bsr.w	SingleObjLoad2
00012686 6600                       		bne.s	loc_11BCE
00012688                            
00012688                            Obj5F_MakeShrap:			; XREF: loc_11B7C
00012688 12BC 005F                  		move.b	#$5F,0(a1)	; load shrapnel	object
0001268C 3368 0008 0008             		move.w	8(a0),8(a1)
00012692 3368 000C 000C             		move.w	$C(a0),$C(a1)
00012698 137C 0006 0028             		move.b	#6,$28(a1)
0001269E 137C 0004 001C             		move.b	#4,$1C(a1)
000126A4 335A 0010                  		move.w	(a2)+,$10(a1)
000126A8 335A 0012                  		move.w	(a2)+,$12(a1)
000126AC 137C 0098 0020             		move.b	#$98,$20(a1)
000126B2 08E9 0007 0001             		bset	#7,1(a1)
000126B8                            
000126B8                            loc_11BCE:
000126B8 51C9 FFC8                  		dbf	d1,Obj5F_Loop	; repeat 3 more	times
000126BC                            
000126BC 117C 0006 0024             		move.b	#6,$24(a0)
000126C2                            
000126C2                            Obj5F_End:				; XREF: Obj5F_Index
000126C2 6100 B9EC                  		bsr.w	SpeedToPos
000126C6 0668 0018 0012             		addi.w	#$18,$12(a0)
000126CC 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
000126D2 6100 8B1A                  		bsr.w	AnimateSprite
000126D6 4A28 0001                  		tst.b	1(a0)
000126DA 6A00 BA36                  		bpl.w	DeleteObject
000126DE 6000 B9F6                  		bra.w	DisplaySprite
000126E2                            ; ===========================================================================
000126E2 FE00 FD00 FF00 FE00 0200+  Obj5F_ShrSpeed:	dc.w $FE00, $FD00, $FF00, $FE00, $200, $FD00, $100, $FE00
000126F2                            
000126F2                            Ani_obj5F:
000126F2                            	include "_anim\obj5F.asm"
000126F2                            ; ---------------------------------------------------------------------------
000126F2                            ; Animation script - Bomb enemy
000126F2                            ; ---------------------------------------------------------------------------
000126F2 0000                       		dc.w byte_11C12-Ani_obj5F
000126F4 0000                       		dc.w byte_11C16-Ani_obj5F
000126F6 0000                       		dc.w byte_11C1C-Ani_obj5F
000126F8 0000                       		dc.w byte_11C20-Ani_obj5F
000126FA 0000                       		dc.w byte_11C24-Ani_obj5F
000126FC 1301 00FF                  byte_11C12:	dc.b $13, 1, 0,	$FF
00012700 1305 0403 02FF             byte_11C16:	dc.b $13, 5, 4,	3, 2, $FF
00012706 1307 06FF                  byte_11C1C:	dc.b $13, 7, 6,	$FF
0001270A 0308 09FF                  byte_11C20:	dc.b 3,	8, 9, $FF
0001270E 030A 0BFF                  byte_11C24:	dc.b 3,	$A, $B,	$FF
00012712                            		even
00012712                            		even
00012712                            
00012712                            ; ---------------------------------------------------------------------------
00012712                            ; Sprite mappings - walking bomb enemy (SLZ, SBZ)
00012712                            ; ---------------------------------------------------------------------------
00012712                            Map_obj5F:
00012712                            	include "_maps\obj5F.asm"
00012712                            ; ---------------------------------------------------------------------------
00012712                            ; Sprite mappings - walking bomb enemy (SLZ, SBZ)
00012712                            ; ---------------------------------------------------------------------------
00012712 0000 0000                  		dc.w byte_11C40-Map_obj5F, byte_11C50-Map_obj5F
00012716 0000 0000                  		dc.w byte_11C60-Map_obj5F, byte_11C70-Map_obj5F
0001271A 0000 0000                  		dc.w byte_11C80-Map_obj5F, byte_11C90-Map_obj5F
0001271E 0000 0000                  		dc.w byte_11CA0-Map_obj5F, byte_11CAB-Map_obj5F
00012722 0000 0000                  		dc.w byte_11CB6-Map_obj5F, byte_11CBC-Map_obj5F
00012726 0000 0000                  		dc.w byte_11CC2-Map_obj5F, byte_11CC8-Map_obj5F
0001272A 03                         byte_11C40:	dc.b 3
0001272B F10A 0000 F4               		dc.b $F1, $A, 0, 0, $F4
00012730 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00012735 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
0001273A 03                         byte_11C50:	dc.b 3
0001273B F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00012740 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00012745 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
0001274A 03                         byte_11C60:	dc.b 3
0001274B F00A 0000 F4               		dc.b $F0, $A, 0, 0, $F4
00012750 0808 0015 F4               		dc.b 8,	8, 0, $15, $F4
00012755 E601 0021 FC               		dc.b $E6, 1, 0,	$21, $FC
0001275A 03                         byte_11C70:	dc.b 3
0001275B F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00012760 0908 0018 F4               		dc.b 9,	8, 0, $18, $F4
00012765 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
0001276A 03                         byte_11C80:	dc.b 3
0001276B F00A 0000 F4               		dc.b $F0, $A, 0, 0, $F4
00012770 0808 001B F4               		dc.b 8,	8, 0, $1B, $F4
00012775 E601 0021 FC               		dc.b $E6, 1, 0,	$21, $FC
0001277A 03                         byte_11C90:	dc.b 3
0001277B F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00012780 0908 001E F4               		dc.b 9,	8, 0, $1E, $F4
00012785 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
0001278A 02                         byte_11CA0:	dc.b 2
0001278B F10A 0000 F4               		dc.b $F1, $A, 0, 0, $F4
00012790 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00012795 02                         byte_11CAB:	dc.b 2
00012796 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
0001279B 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
000127A0 01                         byte_11CB6:	dc.b 1			; fuse	(just before it	explodes)
000127A1 E701 0023 FC               		dc.b $E7, 1, 0,	$23, $FC
000127A6 01                         byte_11CBC:	dc.b 1			; fuse
000127A7 E701 0025 FC               		dc.b $E7, 1, 0,	$25, $FC
000127AC 01                         byte_11CC2:	dc.b 1			; fireball (after it exploded)
000127AD FC00 0027 FC               		dc.b $FC, 0, 0,	$27, $FC
000127B2 01                         byte_11CC8:	dc.b 1			; fireball
000127B3 FC00 0028 FC               		dc.b $FC, 0, 0,	$28, $FC
000127B8                            		even
000127B8                            		even
000127B8                            
000127B8                            ; ===========================================================================
000127B8                            ; ---------------------------------------------------------------------------
000127B8                            ; Object 60 - Orbinaut enemy (LZ, SLZ, SBZ)
000127B8                            ; ---------------------------------------------------------------------------
000127B8                            
000127B8                            Obj60:					; XREF: Obj_Index
000127B8 7000                       		moveq	#0,d0
000127BA 1028 0024                  		move.b	$24(a0),d0
000127BE 323B 0000                  		move.w	Obj60_Index(pc,d0.w),d1
000127C2 4EFB 1000                  		jmp	Obj60_Index(pc,d1.w)
000127C6                            ; ===========================================================================
000127C6 0000                       Obj60_Index:	dc.w Obj60_Main-Obj60_Index
000127C8 0000                       		dc.w Obj60_ChkSonic-Obj60_Index
000127CA 0000                       		dc.w Obj60_Display-Obj60_Index
000127CC 0000                       		dc.w Obj60_MoveOrb-Obj60_Index
000127CE 0000                       		dc.w Obj60_ChkDel2-Obj60_Index
000127D0                            ; ===========================================================================
000127D0                            
000127D0                            Obj60_Main:				; XREF: Obj60_Index
000127D0 217C 0000 0000 0004        		move.l	#Map_obj60,4(a0)
000127D8 317C 0429 0002             		move.w	#$429,2(a0)	; SBZ specific code
000127DE 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
000127E4 6700                       		beq.s	loc_11D02
000127E6 317C 2429 0002             		move.w	#$2429,2(a0)	; SLZ specific code
000127EC                            
000127EC                            loc_11D02:
000127EC 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
000127F2 6600                       		bne.s	loc_11D10
000127F4 317C 0467 0002             		move.w	#$467,2(a0)	; LZ specific code
000127FA                            
000127FA                            loc_11D10:
000127FA 0028 0004 0001             		ori.b	#4,1(a0)
00012800 117C 0004 0018             		move.b	#4,$18(a0)
00012806 117C 000B 0020             		move.b	#$B,$20(a0)
0001280C 117C 000C 0019             		move.b	#$C,$19(a0)
00012812 7400                       		moveq	#0,d2
00012814 45E8 0037                  		lea	$37(a0),a2
00012818 264A                       		movea.l	a2,a3
0001281A 524A                       		addq.w	#1,a2
0001281C 7203                       		moveq	#3,d1
0001281E                            
0001281E                            Obj60_MakeOrbs:
0001281E 6100 BD62                  		bsr.w	SingleObjLoad2
00012822 6600                       		bne.s	loc_11D90
00012824 5213                       		addq.b	#1,(a3)
00012826 3A09                       		move.w	a1,d5
00012828 0445 D000                  		subi.w	#-$3000,d5
0001282C EC4D                       		lsr.w	#6,d5
0001282E 0245 007F                  		andi.w	#$7F,d5
00012832 14C5                       		move.b	d5,(a2)+
00012834 1290                       		move.b	0(a0),0(a1)	; load spiked orb object
00012836 137C 0006 0024             		move.b	#6,$24(a1)
0001283C 2368 0004 0004             		move.l	4(a0),4(a1)
00012842 3368 0002 0002             		move.w	2(a0),2(a1)
00012848 0029 0004 0001             		ori.b	#4,1(a1)
0001284E 137C 0004 0018             		move.b	#4,$18(a1)
00012854 137C 0008 0019             		move.b	#8,$19(a1)
0001285A 137C 0003 001A             		move.b	#3,$1A(a1)
00012860 137C 0098 0020             		move.b	#$98,$20(a1)
00012866 1342 0026                  		move.b	d2,$26(a1)
0001286A 0602 0040                  		addi.b	#$40,d2
0001286E 2348 003C                  		move.l	a0,$3C(a1)
00012872 51C9 FFAA                  		dbf	d1,Obj60_MakeOrbs ; repeat sequence 3 more times
00012876                            
00012876                            loc_11D90:
00012876 7001                       		moveq	#1,d0
00012878 0828 0000 0022             		btst	#0,$22(a0)
0001287E 6700                       		beq.s	Obj60_Move
00012880 4440                       		neg.w	d0
00012882                            
00012882                            Obj60_Move:
00012882 1140 0036                  		move.b	d0,$36(a0)
00012886 1168 0028 0024             		move.b	$28(a0),$24(a0)	; if type is 02, skip the firing rountine
0001288C 5428 0024                  		addq.b	#2,$24(a0)
00012890 317C FFC0 0010             		move.w	#-$40,$10(a0)	; move orbinaut	to the left
00012896 0828 0000 0022             		btst	#0,$22(a0)	; is orbinaut reversed?
0001289C 6700                       		beq.s	locret_11DBC	; if not, branch
0001289E 4468 0010                  		neg.w	$10(a0)		; move orbinaut	to the right
000128A2                            
000128A2                            locret_11DBC:
000128A2 4E75                       		rts	
000128A4                            ; ===========================================================================
000128A4                            
000128A4                            Obj60_ChkSonic:				; XREF: Obj60_Index
000128A4 3038 D008                  		move.w	($FFFFD008).w,d0
000128A8 9068 0008                  		sub.w	8(a0),d0
000128AC 6400                       		bcc.s	loc_11DCA
000128AE 4440                       		neg.w	d0
000128B0                            
000128B0                            loc_11DCA:
000128B0 0C40 00A0                  		cmpi.w	#$A0,d0		; is Sonic within $A0 pixels of	orbinaut?
000128B4 6400                       		bcc.s	Obj60_Animate	; if not, branch
000128B6 3038 D00C                  		move.w	($FFFFD00C).w,d0
000128BA 9068 000C                  		sub.w	$C(a0),d0
000128BE 6400                       		bcc.s	loc_11DDC
000128C0 4440                       		neg.w	d0
000128C2                            
000128C2                            loc_11DDC:
000128C2 0C40 0050                  		cmpi.w	#$50,d0		; is Sonic within $50 pixels of	orbinaut?
000128C6 6400                       		bcc.s	Obj60_Animate	; if not, branch
000128C8 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
000128CC 6600                       		bne.s	Obj60_Animate	; if yes, branch
000128CE 117C 0001 001C             		move.b	#1,$1C(a0)	; use "angry" animation
000128D4                            
000128D4                            Obj60_Animate:
000128D4 43F9 0000 0000             		lea	(Ani_obj60).l,a1
000128DA 6100 8912                  		bsr.w	AnimateSprite
000128DE 6000 0000                  		bra.w	Obj60_ChkDel
000128E2                            ; ===========================================================================
000128E2                            
000128E2                            Obj60_Display:				; XREF: Obj60_Index
000128E2 6100 B7CC                  		bsr.w	SpeedToPos
000128E6                            
000128E6                            Obj60_ChkDel:				; XREF: Obj60_Animate
000128E6 3028 0008                  		move.w	8(a0),d0
000128EA 0240 FF80                  		andi.w	#$FF80,d0
000128EE 3238 F700                  		move.w	($FFFFF700).w,d1
000128F2 0441 0080                  		subi.w	#$80,d1
000128F6 0241 FF80                  		andi.w	#$FF80,d1
000128FA 9041                       		sub.w	d1,d0
000128FC 0C40 0280                  		cmpi.w	#$280,d0
00012900 6200 0000                  		bhi.w	Obj60_ChkGone
00012904 6000 B7D0                  		bra.w	DisplaySprite
00012908                            ; ===========================================================================
00012908                            
00012908                            Obj60_ChkGone:				; XREF: Obj60_ChkDel
00012908 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001290C 7000                       		moveq	#0,d0
0001290E 1028 0023                  		move.b	$23(a0),d0
00012912 6700                       		beq.s	loc_11E34
00012914 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0001291A                            
0001291A                            loc_11E34:
0001291A 45E8 0037                  		lea	$37(a0),a2
0001291E 7400                       		moveq	#0,d2
00012920 141A                       		move.b	(a2)+,d2
00012922 5342                       		subq.w	#1,d2
00012924 6500                       		bcs.s	Obj60_Delete
00012926                            
00012926                            loc_11E40:
00012926 7000                       		moveq	#0,d0
00012928 101A                       		move.b	(a2)+,d0
0001292A ED48                       		lsl.w	#6,d0
0001292C 0680 00FF D000             		addi.l	#$FFD000,d0
00012932 2240                       		movea.l	d0,a1
00012934 6100 B7DE                  		bsr.w	DeleteObject2
00012938 51CA FFEC                  		dbf	d2,loc_11E40
0001293C                            
0001293C                            Obj60_Delete:
0001293C 6000 B7D4                  		bra.w	DeleteObject
00012940                            ; ===========================================================================
00012940                            
00012940                            Obj60_MoveOrb:				; XREF: Obj60_Index
00012940 2268 003C                  		movea.l	$3C(a0),a1
00012944 0C11 0060                  		cmpi.b	#$60,0(a1)
00012948 6600 B7C8                  		bne.w	DeleteObject
0001294C 0C29 0002 001A             		cmpi.b	#2,$1A(a1)
00012952 6600                       		bne.s	Obj60_Circle
00012954 0C28 0040 0026             		cmpi.b	#$40,$26(a0)
0001295A 6600                       		bne.s	Obj60_Circle
0001295C 5428 0024                  		addq.b	#2,$24(a0)
00012960 5329 0037                  		subq.b	#1,$37(a1)
00012964 6600                       		bne.s	Obj60_FireOrb
00012966 5429 0024                  		addq.b	#2,$24(a1)
0001296A                            
0001296A                            Obj60_FireOrb:
0001296A 317C FE00 0010             		move.w	#-$200,$10(a0)	; move orb to the left (quickly)
00012970 0829 0000 0022             		btst	#0,$22(a1)
00012976 6700                       		beq.s	Obj60_Display2
00012978 4468 0010                  		neg.w	$10(a0)
0001297C                            
0001297C                            Obj60_Display2:
0001297C 6000 B758                  		bra.w	DisplaySprite
00012980                            ; ===========================================================================
00012980                            
00012980                            Obj60_Circle:				; XREF: Obj60_MoveOrb
00012980 1028 0026                  		move.b	$26(a0),d0
00012984 4EB9 0000 33DA             		jsr	(CalcSine).l
0001298A E841                       		asr.w	#4,d1
0001298C D269 0008                  		add.w	8(a1),d1
00012990 3141 0008                  		move.w	d1,8(a0)
00012994 E840                       		asr.w	#4,d0
00012996 D069 000C                  		add.w	$C(a1),d0
0001299A 3140 000C                  		move.w	d0,$C(a0)
0001299E 1029 0036                  		move.b	$36(a1),d0
000129A2 D128 0026                  		add.b	d0,$26(a0)
000129A6 6000 B72E                  		bra.w	DisplaySprite
000129AA                            ; ===========================================================================
000129AA                            
000129AA                            Obj60_ChkDel2:				; XREF: Obj60_Index
000129AA 6100 B704                  		bsr.w	SpeedToPos
000129AE 4A28 0001                  		tst.b	1(a0)
000129B2 6A00 B75E                  		bpl.w	DeleteObject
000129B6 6000 B71E                  		bra.w	DisplaySprite
000129BA                            ; ===========================================================================
000129BA                            Ani_obj60:
000129BA                            	include "_anim\obj60.asm"
000129BA                            ; ---------------------------------------------------------------------------
000129BA                            ; Animation script - Orbinaut enemy
000129BA                            ; ---------------------------------------------------------------------------
000129BA 0000                       		dc.w byte_11EDA-Ani_obj60
000129BC 0000                       		dc.w byte_11EDE-Ani_obj60
000129BE 0F00 FF00                  byte_11EDA:	dc.b $F, 0, $FF, 0
000129C2 0F01 02FE 0100             byte_11EDE:	dc.b $F, 1, 2, $FE, 1, 0
000129C8                            		even
000129C8                            		even
000129C8                            
000129C8                            ; ---------------------------------------------------------------------------
000129C8                            ; Sprite mappings - Orbinaut enemy (LZ,	SLZ, SBZ)
000129C8                            ; ---------------------------------------------------------------------------
000129C8                            Map_obj60:
000129C8                            	include "_maps\obj60.asm"
000129C8                            ; ---------------------------------------------------------------------------
000129C8                            ; Sprite mappings - Orbinaut enemy (LZ,	SLZ, SBZ)
000129C8                            ; ---------------------------------------------------------------------------
000129C8 0000 0000                  		dc.w byte_11EEC-Map_obj60, byte_11EF2-Map_obj60
000129CC 0000 0000                  		dc.w byte_11EF8-Map_obj60, byte_11EFE-Map_obj60
000129D0 01                         byte_11EEC:	dc.b 1
000129D1 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
000129D6 01                         byte_11EF2:	dc.b 1
000129D7 F40A 2009 F4               		dc.b $F4, $A, $20, 9, $F4
000129DC 01                         byte_11EF8:	dc.b 1
000129DD F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
000129E2 01                         byte_11EFE:	dc.b 1
000129E3 F805 001B F8               		dc.b $F8, 5, 0,	$1B, $F8
000129E8                            		even
000129E8                            		even
000129E8                            
000129E8                            ; ===========================================================================
000129E8                            ; ---------------------------------------------------------------------------
000129E8                            ; Object 16 - harpoon (LZ)
000129E8                            ; ---------------------------------------------------------------------------
000129E8                            
000129E8                            Obj16:					; XREF: Obj_Index
000129E8 7000                       		moveq	#0,d0
000129EA 1028 0024                  		move.b	$24(a0),d0
000129EE 323B 0000                  		move.w	Obj16_Index(pc,d0.w),d1
000129F2 4EFB 1000                  		jmp	Obj16_Index(pc,d1.w)
000129F6                            ; ===========================================================================
000129F6 0000                       Obj16_Index:	dc.w Obj16_Main-Obj16_Index
000129F8 0000                       		dc.w Obj16_Move-Obj16_Index
000129FA 0000                       		dc.w Obj16_Wait-Obj16_Index
000129FC                            ; ===========================================================================
000129FC                            
000129FC                            Obj16_Main:				; XREF: Obj16_Index
000129FC 5428 0024                  		addq.b	#2,$24(a0)
00012A00 217C 0000 0000 0004        		move.l	#Map_obj16,4(a0)
00012A08 317C 03CC 0002             		move.w	#$3CC,2(a0)
00012A0E 0028 0004 0001             		ori.b	#4,1(a0)
00012A14 117C 0004 0018             		move.b	#4,$18(a0)
00012A1A 1168 0028 001C             		move.b	$28(a0),$1C(a0)
00012A20 117C 0014 0019             		move.b	#$14,$19(a0)
00012A26 317C 003C 0030             		move.w	#60,$30(a0)
00012A2C                            
00012A2C                            Obj16_Move:				; XREF: Obj16_Index
00012A2C 43F9 0000 0000             		lea	(Ani_obj16).l,a1
00012A32 6100 87BA                  		bsr.w	AnimateSprite
00012A36 7000                       		moveq	#0,d0
00012A38 1028 001A                  		move.b	$1A(a0),d0	; move frame number to d0
00012A3C 117B 0000 0020             		move.b	Obj16_Data(pc,d0.w),$20(a0) ; load collision response (based on	d0)
00012A42 6000 D754                  		bra.w	MarkObjGone
00012A46                            ; ===========================================================================
00012A46 9B9C 9D9E 9FA0             Obj16_Data:	dc.b $9B, $9C, $9D, $9E, $9F, $A0
00012A4C                            ; ===========================================================================
00012A4C                            
00012A4C                            Obj16_Wait:				; XREF: Obj16_Index
00012A4C 5368 0030                  		subq.w	#1,$30(a0)
00012A50 6A00                       		bpl.s	Obj16_ChkDel
00012A52 317C 003C 0030             		move.w	#60,$30(a0)
00012A58 5528 0024                  		subq.b	#2,$24(a0)	; run "Obj16_Move" subroutine
00012A5C 0868 0000 001C             		bchg	#0,$1C(a0)	; reverse animation
00012A62                            
00012A62                            Obj16_ChkDel:
00012A62 6000 D734                  		bra.w	MarkObjGone
00012A66                            ; ===========================================================================
00012A66                            Ani_obj16:
00012A66                            	include "_anim\obj16.asm"
00012A66                            ; ---------------------------------------------------------------------------
00012A66                            ; Animation script - harpoon (LZ)
00012A66                            ; ---------------------------------------------------------------------------
00012A66 0000                       		dc.w byte_11F8A-Ani_obj16
00012A68 0000                       		dc.w byte_11F8E-Ani_obj16
00012A6A 0000                       		dc.w byte_11F92-Ani_obj16
00012A6C 0000                       		dc.w byte_11F96-Ani_obj16
00012A6E 0301 02FC                  byte_11F8A:	dc.b 3,	1, 2, $FC
00012A72 0301 00FC                  byte_11F8E:	dc.b 3,	1, 0, $FC
00012A76 0304 05FC                  byte_11F92:	dc.b 3,	4, 5, $FC
00012A7A 0304 03FC                  byte_11F96:	dc.b 3,	4, 3, $FC
00012A7E                            		even
00012A7E                            		even
00012A7E                            
00012A7E                            ; ---------------------------------------------------------------------------
00012A7E                            ; Sprite mappings - harpoon (LZ)
00012A7E                            ; ---------------------------------------------------------------------------
00012A7E                            Map_obj16:
00012A7E                            	include "_maps\obj16.asm"
00012A7E                            ; ---------------------------------------------------------------------------
00012A7E                            ; Sprite mappings - harpoon (LZ)
00012A7E                            ; ---------------------------------------------------------------------------
00012A7E 0000 0000                  		dc.w byte_11FA6-Map_obj16, byte_11FAC-Map_obj16
00012A82 0000 0000                  		dc.w byte_11FB2-Map_obj16, byte_11FBD-Map_obj16
00012A86 0000 0000                  		dc.w byte_11FC3-Map_obj16, byte_11FC9-Map_obj16
00012A8A 01                         byte_11FA6:	dc.b 1
00012A8B FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8
00012A90 01                         byte_11FAC:	dc.b 1
00012A91 FC0C 0002 F8               		dc.b $FC, $C, 0, 2, $F8
00012A96 02                         byte_11FB2:	dc.b 2
00012A97 FC08 0006 F8               		dc.b $FC, 8, 0,	6, $F8
00012A9C FC08 0003 10               		dc.b $FC, 8, 0,	3, $10
00012AA1 01                         byte_11FBD:	dc.b 1
00012AA2 F801 0009 FC               		dc.b $F8, 1, 0,	9, $FC
00012AA7 01                         byte_11FC3:	dc.b 1
00012AA8 E803 000B FC               		dc.b $E8, 3, 0,	$B, $FC
00012AAD 02                         byte_11FC9:	dc.b 2
00012AAE D802 000B FC               		dc.b $D8, 2, 0,	$B, $FC
00012AB3 F002 000F FC               		dc.b $F0, 2, 0,	$F, $FC
00012AB8                            		even
00012AB8                            		even
00012AB8                            
00012AB8                            ; ===========================================================================
00012AB8                            ; ---------------------------------------------------------------------------
00012AB8                            ; Object 61 - blocks (LZ)
00012AB8                            ; ---------------------------------------------------------------------------
00012AB8                            
00012AB8                            Obj61:					; XREF: Obj_Index
00012AB8 7000                       		moveq	#0,d0
00012ABA 1028 0024                  		move.b	$24(a0),d0
00012ABE 323B 0000                  		move.w	Obj61_Index(pc,d0.w),d1
00012AC2 4EFB 1000                  		jmp	Obj61_Index(pc,d1.w)
00012AC6                            ; ===========================================================================
00012AC6 0000                       Obj61_Index:	dc.w Obj61_Main-Obj61_Index
00012AC8 0000                       		dc.w Obj61_Action-Obj61_Index
00012ACA                            
00012ACA 1010                       Obj61_Var:	dc.b $10, $10		; width, height
00012ACC 200C                       		dc.b $20, $C
00012ACE 1010                       		dc.b $10, $10
00012AD0 1010                       		dc.b $10, $10
00012AD2                            ; ===========================================================================
00012AD2                            
00012AD2                            Obj61_Main:				; XREF: Obj61_Index
00012AD2 5428 0024                  		addq.b	#2,$24(a0)
00012AD6 217C 0000 0000 0004        		move.l	#Map_obj61,4(a0)
00012ADE 317C 43E6 0002             		move.w	#$43E6,2(a0)
00012AE4 117C 0004 0001             		move.b	#4,1(a0)
00012AEA 117C 0003 0018             		move.b	#3,$18(a0)
00012AF0 7000                       		moveq	#0,d0
00012AF2 1028 0028                  		move.b	$28(a0),d0
00012AF6 E648                       		lsr.w	#3,d0
00012AF8 0240 000E                  		andi.w	#$E,d0
00012AFC 45FB 00CC                  		lea	Obj61_Var(pc,d0.w),a2
00012B00 115A 0019                  		move.b	(a2)+,$19(a0)
00012B04 1152 0016                  		move.b	(a2),$16(a0)
00012B08 E248                       		lsr.w	#1,d0
00012B0A 1140 001A                  		move.b	d0,$1A(a0)
00012B0E 3168 0008 0034             		move.w	8(a0),$34(a0)
00012B14 3168 000C 0030             		move.w	$C(a0),$30(a0)
00012B1A 1028 0028                  		move.b	$28(a0),d0
00012B1E 0200 000F                  		andi.b	#$F,d0
00012B22 6700                       		beq.s	Obj61_Action
00012B24 0C00 0007                  		cmpi.b	#7,d0
00012B28 6700                       		beq.s	Obj61_Action
00012B2A 117C 0001 0038             		move.b	#1,$38(a0)
00012B30                            
00012B30                            Obj61_Action:				; XREF: Obj61_Index
00012B30 3F28 0008                  		move.w	8(a0),-(sp)
00012B34 7000                       		moveq	#0,d0
00012B36 1028 0028                  		move.b	$28(a0),d0
00012B3A 0240 000F                  		andi.w	#$F,d0
00012B3E D040                       		add.w	d0,d0
00012B40 323B 0000                  		move.w	Obj61_TypeIndex(pc,d0.w),d1
00012B44 4EBB 1000                  		jsr	Obj61_TypeIndex(pc,d1.w)
00012B48 381F                       		move.w	(sp)+,d4
00012B4A 4A28 0001                  		tst.b	1(a0)
00012B4E 6A00                       		bpl.s	Obj61_ChkDel
00012B50 7200                       		moveq	#0,d1
00012B52 1228 0019                  		move.b	$19(a0),d1
00012B56 0641 000B                  		addi.w	#$B,d1
00012B5A 7400                       		moveq	#0,d2
00012B5C 1428 0016                  		move.b	$16(a0),d2
00012B60 3602                       		move.w	d2,d3
00012B62 5243                       		addq.w	#1,d3
00012B64 6100 D95A                  		bsr.w	SolidObject
00012B68 1144 003F                  		move.b	d4,$3F(a0)
00012B6C 6100 0000                  		bsr.w	loc_12180
00012B70                            
00012B70                            Obj61_ChkDel:
00012B70 3028 0034                  		move.w	$34(a0),d0
00012B74 0240 FF80                  		andi.w	#$FF80,d0
00012B78 3238 F700                  		move.w	($FFFFF700).w,d1
00012B7C 0441 0080                  		subi.w	#$80,d1
00012B80 0241 FF80                  		andi.w	#$FF80,d1
00012B84 9041                       		sub.w	d1,d0
00012B86 0C40 0280                  		cmpi.w	#$280,d0
00012B8A 6200 B586                  		bhi.w	DeleteObject
00012B8E 6000 B546                  		bra.w	DisplaySprite
00012B92                            ; ===========================================================================
00012B92 0000 0000                  Obj61_TypeIndex:dc.w Obj61_Type00-Obj61_TypeIndex, Obj61_Type01-Obj61_TypeIndex
00012B96 0000 0000                  		dc.w Obj61_Type02-Obj61_TypeIndex, Obj61_Type01-Obj61_TypeIndex
00012B9A 0000 0000                  		dc.w Obj61_Type04-Obj61_TypeIndex, Obj61_Type05-Obj61_TypeIndex
00012B9E 0000 0000                  		dc.w Obj61_Type02-Obj61_TypeIndex, Obj61_Type07-Obj61_TypeIndex
00012BA2                            ; ===========================================================================
00012BA2                            
00012BA2                            Obj61_Type00:				; XREF: Obj61_TypeIndex
00012BA2 4E75                       		rts	
00012BA4                            ; ===========================================================================
00012BA4                            
00012BA4                            Obj61_Type01:				; XREF: Obj61_TypeIndex
00012BA4 4A68 0036                  		tst.w	$36(a0)		; is Sonic standing on the object?
00012BA8 6600                       		bne.s	loc_120D6	; if yes, branch
00012BAA 0828 0003 0022             		btst	#3,$22(a0)
00012BB0 6700                       		beq.s	locret_120D4
00012BB2 317C 001E 0036             		move.w	#30,$36(a0)	; wait for � second
00012BB8                            
00012BB8                            locret_120D4:
00012BB8 4E75                       		rts	
00012BBA                            ; ===========================================================================
00012BBA                            
00012BBA                            loc_120D6:
00012BBA 5368 0036                  		subq.w	#1,$36(a0)	; subtract 1 from waiting time
00012BBE 66F8                       		bne.s	locret_120D4	; if time remains, branch
00012BC0 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
00012BC4 4228 0038                  		clr.b	$38(a0)
00012BC8 4E75                       		rts	
00012BCA                            ; ===========================================================================
00012BCA                            
00012BCA                            Obj61_Type02:				; XREF: Obj61_TypeIndex
00012BCA 6100 B4E4                  		bsr.w	SpeedToPos
00012BCE 5068 0012                  		addq.w	#8,$12(a0)	; make object fall
00012BD2 6100 0000                  		bsr.w	ObjHitFloor
00012BD6 4A41                       		tst.w	d1
00012BD8 6A00 0000                  		bpl.w	locret_12106
00012BDC 5241                       		addq.w	#1,d1
00012BDE D368 000C                  		add.w	d1,$C(a0)
00012BE2 4268 0012                  		clr.w	$12(a0)		; stop when it touches the floor
00012BE6 4228 0028                  		clr.b	$28(a0)		; set type to 00 (non-moving type)
00012BEA                            
00012BEA                            locret_12106:
00012BEA 4E75                       		rts	
00012BEC                            ; ===========================================================================
00012BEC                            
00012BEC                            Obj61_Type04:				; XREF: Obj61_TypeIndex
00012BEC 6100 B4C2                  		bsr.w	SpeedToPos
00012BF0 5168 0012                  		subq.w	#8,$12(a0)	; make object rise
00012BF4 6100 0000                  		bsr.w	ObjHitCeiling
00012BF8 4A41                       		tst.w	d1
00012BFA 6A00 0000                  		bpl.w	locret_12126
00012BFE 9368 000C                  		sub.w	d1,$C(a0)
00012C02 4268 0012                  		clr.w	$12(a0)		; stop when it touches the ceiling
00012C06 4228 0028                  		clr.b	$28(a0)		; set type to 00 (non-moving type)
00012C0A                            
00012C0A                            locret_12126:
00012C0A 4E75                       		rts	
00012C0C                            ; ===========================================================================
00012C0C                            
00012C0C                            Obj61_Type05:				; XREF: Obj61_TypeIndex
00012C0C 0C28 0001 003F             		cmpi.b	#1,$3F(a0)	; is Sonic touching the	object?
00012C12 6600                       		bne.s	locret_12138	; if not, branch
00012C14 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
00012C18 4228 0038                  		clr.b	$38(a0)
00012C1C                            
00012C1C                            locret_12138:
00012C1C 4E75                       		rts	
00012C1E                            ; ===========================================================================
00012C1E                            
00012C1E                            Obj61_Type07:				; XREF: Obj61_TypeIndex
00012C1E 3038 F646                  		move.w	($FFFFF646).w,d0
00012C22 9068 000C                  		sub.w	$C(a0),d0
00012C26 6700                       		beq.s	locret_1217E
00012C28 6400                       		bcc.s	loc_12162
00012C2A 0C40 FFFE                  		cmpi.w	#-2,d0
00012C2E 6C00                       		bge.s	loc_1214E
00012C30 70FE                       		moveq	#-2,d0
00012C32                            
00012C32                            loc_1214E:
00012C32 D168 000C                  		add.w	d0,$C(a0)	; make the block rise with water level
00012C36 6100 0000                  		bsr.w	ObjHitCeiling
00012C3A 4A41                       		tst.w	d1
00012C3C 6A00 0000                  		bpl.w	locret_12160
00012C40 9368 000C                  		sub.w	d1,$C(a0)
00012C44                            
00012C44                            locret_12160:
00012C44 4E75                       		rts	
00012C46                            ; ===========================================================================
00012C46                            
00012C46                            loc_12162:				; XREF: Obj61_Type07
00012C46 0C40 0002                  		cmpi.w	#2,d0
00012C4A 6F00                       		ble.s	loc_1216A
00012C4C 7002                       		moveq	#2,d0
00012C4E                            
00012C4E                            loc_1216A:
00012C4E D168 000C                  		add.w	d0,$C(a0)	; make the block sink with water level
00012C52 6100 0000                  		bsr.w	ObjHitFloor
00012C56 4A41                       		tst.w	d1
00012C58 6A00 0000                  		bpl.w	locret_1217E
00012C5C 5241                       		addq.w	#1,d1
00012C5E D368 000C                  		add.w	d1,$C(a0)
00012C62                            
00012C62                            locret_1217E:
00012C62 4E75                       		rts	
00012C64                            ; ===========================================================================
00012C64                            
00012C64                            loc_12180:				; XREF: Obj61_Action
00012C64 4A28 0038                  		tst.b	$38(a0)
00012C68 6700                       		beq.s	locret_121C0
00012C6A 0828 0003 0022             		btst	#3,$22(a0)
00012C70 6600                       		bne.s	loc_1219A
00012C72 4A28 003E                  		tst.b	$3E(a0)
00012C76 6700                       		beq.s	locret_121C0
00012C78 5928 003E                  		subq.b	#4,$3E(a0)
00012C7C 6000                       		bra.s	loc_121A6
00012C7E                            ; ===========================================================================
00012C7E                            
00012C7E                            loc_1219A:
00012C7E 0C28 0040 003E             		cmpi.b	#$40,$3E(a0)
00012C84 6700                       		beq.s	locret_121C0
00012C86 5828 003E                  		addq.b	#4,$3E(a0)
00012C8A                            
00012C8A                            loc_121A6:
00012C8A 1028 003E                  		move.b	$3E(a0),d0
00012C8E 4EB9 0000 33DA             		jsr	(CalcSine).l
00012C94 323C 0400                  		move.w	#$400,d1
00012C98 C1C1                       		muls.w	d1,d0
00012C9A 4840                       		swap	d0
00012C9C D068 0030                  		add.w	$30(a0),d0
00012CA0 3140 000C                  		move.w	d0,$C(a0)
00012CA4                            
00012CA4                            locret_121C0:
00012CA4 4E75                       		rts	
00012CA6                            ; ===========================================================================
00012CA6                            ; ---------------------------------------------------------------------------
00012CA6                            ; Sprite mappings - blocks (LZ)
00012CA6                            ; ---------------------------------------------------------------------------
00012CA6                            Map_obj61:
00012CA6                            	include "_maps\obj61.asm"
00012CA6                            ; ---------------------------------------------------------------------------
00012CA6                            ; Sprite mappings - blocks (LZ)
00012CA6                            ; ---------------------------------------------------------------------------
00012CA6 0000 0000                  		dc.w byte_121CA-Map_obj61, byte_121D0-Map_obj61
00012CAA 0000 0000                  		dc.w byte_121DB-Map_obj61, byte_121E1-Map_obj61
00012CAE 01                         byte_121CA:	dc.b 1
00012CAF F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
00012CB4 02                         byte_121D0:	dc.b 2
00012CB5 F40E 0069 E0               		dc.b $F4, $E, 0, $69, $E0
00012CBA F40E 0075 00               		dc.b $F4, $E, 0, $75, 0
00012CBF 01                         byte_121DB:	dc.b 1
00012CC0 F00F 011A F0               		dc.b $F0, $F, 1, $1A, $F0
00012CC5 01                         byte_121E1:	dc.b 1
00012CC6 F00F FDFA F0               		dc.b $F0, $F, $FD, $FA,	$F0
00012CCC 00                         		even
00012CCC 00                         		even
00012CCC                            
00012CCC                            ; ===========================================================================
00012CCC                            ; ---------------------------------------------------------------------------
00012CCC                            ; Object 62 - gargoyle head (LZ)
00012CCC                            ; ---------------------------------------------------------------------------
00012CCC                            
00012CCC                            Obj62:					; XREF: Obj_Index
00012CCC 7000                       		moveq	#0,d0
00012CCE 1028 0024                  		move.b	$24(a0),d0
00012CD2 323B 0000                  		move.w	Obj62_Index(pc,d0.w),d1
00012CD6 4EBB 1000                  		jsr	Obj62_Index(pc,d1.w)
00012CDA 6000 D4BC                  		bra.w	MarkObjGone
00012CDE                            ; ===========================================================================
00012CDE 0000                       Obj62_Index:	dc.w Obj62_Main-Obj62_Index
00012CE0 0000                       		dc.w Obj62_MakeFire-Obj62_Index
00012CE2 0000                       		dc.w Obj62_FireBall-Obj62_Index
00012CE4 0000                       		dc.w Obj62_AniFire-Obj62_Index
00012CE6                            
00012CE6 1E3C 5A78 96B4 D2F0        Obj62_SpitRate:	dc.b 30, 60, 90, 120, 150, 180,	210, 240
00012CEE                            ; ===========================================================================
00012CEE                            
00012CEE                            Obj62_Main:				; XREF: Obj62_Index
00012CEE 5428 0024                  		addq.b	#2,$24(a0)
00012CF2 217C 0000 0000 0004        		move.l	#Map_obj62,4(a0)
00012CFA 317C 42E9 0002             		move.w	#$42E9,2(a0)
00012D00 0028 0004 0001             		ori.b	#4,1(a0)
00012D06 117C 0003 0018             		move.b	#3,$18(a0)
00012D0C 117C 0010 0019             		move.b	#$10,$19(a0)
00012D12 1028 0028                  		move.b	$28(a0),d0	; get object type
00012D16 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00012D1A 117B 00CA 001F             		move.b	Obj62_SpitRate(pc,d0.w),$1F(a0)	; set fireball spit rate
00012D20 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
00012D26 0228 000F 0028             		andi.b	#$F,$28(a0)
00012D2C                            
00012D2C                            Obj62_MakeFire:				; XREF: Obj62_Index
00012D2C 5328 001E                  		subq.b	#1,$1E(a0)
00012D30 6600                       		bne.s	Obj62_NoFire
00012D32 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
00012D38 6100 B618                  		bsr.w	ChkObjOnScreen
00012D3C 6600                       		bne.s	Obj62_NoFire
00012D3E 6100 B82C                  		bsr.w	SingleObjLoad
00012D42 6600                       		bne.s	Obj62_NoFire
00012D44 12BC 0062                  		move.b	#$62,0(a1)	; load fireball	object
00012D48 5829 0024                  		addq.b	#4,$24(a1)
00012D4C 3368 0008 0008             		move.w	8(a0),8(a1)
00012D52 3368 000C 000C             		move.w	$C(a0),$C(a1)
00012D58 1368 0001 0001             		move.b	1(a0),1(a1)
00012D5E 1368 0022 0022             		move.b	$22(a0),$22(a1)
00012D64                            
00012D64                            Obj62_NoFire:
00012D64 4E75                       		rts	
00012D66                            ; ===========================================================================
00012D66                            
00012D66                            Obj62_FireBall:				; XREF: Obj62_Index
00012D66 5428 0024                  		addq.b	#2,$24(a0)
00012D6A 117C 0008 0016             		move.b	#8,$16(a0)
00012D70 117C 0008 0017             		move.b	#8,$17(a0)
00012D76 217C 0000 0000 0004        		move.l	#Map_obj62,4(a0)
00012D7E 317C 02E9 0002             		move.w	#$2E9,2(a0)
00012D84 0028 0004 0001             		ori.b	#4,1(a0)
00012D8A 117C 0004 0018             		move.b	#4,$18(a0)
00012D90 117C 0098 0020             		move.b	#$98,$20(a0)
00012D96 117C 0008 0019             		move.b	#8,$19(a0)
00012D9C 117C 0002 001A             		move.b	#2,$1A(a0)
00012DA2 5068 000C                  		addq.w	#8,$C(a0)
00012DA6 317C 0200 0010             		move.w	#$200,$10(a0)
00012DAC 0828 0000 0022             		btst	#0,$22(a0)
00012DB2 6600                       		bne.s	Obj62_Sound
00012DB4 4468 0010                  		neg.w	$10(a0)
00012DB8                            
00012DB8                            Obj62_Sound:
00012DB8 303C 00AE                  		move.w	#$AE,d0
00012DBC 4EB9 0000 147C             		jsr	(PlaySound_Special).l ;	play lava ball sound
00012DC2                            
00012DC2                            Obj62_AniFire:				; XREF: Obj62_Index
00012DC2 1038 FE05                  		move.b	($FFFFFE05).w,d0
00012DC6 0200 0007                  		andi.b	#7,d0
00012DCA 6600                       		bne.s	Obj62_StopFire
00012DCC 0868 0000 001A             		bchg	#0,$1A(a0)	; switch between frame 01 and 02
00012DD2                            
00012DD2                            Obj62_StopFire:
00012DD2 6100 B2DC                  		bsr.w	SpeedToPos
00012DD6 0828 0000 0022             		btst	#0,$22(a0)
00012DDC 6600                       		bne.s	Obj62_StopFire2
00012DDE 76F8                       		moveq	#-8,d3
00012DE0 6100 0000                  		bsr.w	ObjHitWallLeft
00012DE4 4A41                       		tst.w	d1
00012DE6 6B00 B32A                  		bmi.w	DeleteObject	; delete if the	fireball hits a	wall
00012DEA 4E75                       		rts	
00012DEC                            ; ===========================================================================
00012DEC                            
00012DEC                            Obj62_StopFire2:
00012DEC 7608                       		moveq	#8,d3
00012DEE 6100 0000                  		bsr.w	ObjHitWallRight
00012DF2 4A41                       		tst.w	d1
00012DF4 6B00 B31C                  		bmi.w	DeleteObject
00012DF8 4E75                       		rts	
00012DFA                            ; ===========================================================================
00012DFA                            ; ---------------------------------------------------------------------------
00012DFA                            ; Sprite mappings - gargoyle head (LZ)
00012DFA                            ; ---------------------------------------------------------------------------
00012DFA                            Map_obj62:
00012DFA                            	include "_maps\obj62.asm"
00012DFA                            ; ---------------------------------------------------------------------------
00012DFA                            ; Sprite mappings - gargoyle head (LZ)
00012DFA                            ; ---------------------------------------------------------------------------
00012DFA 0000 0000                  		dc.w byte_12320-Map_obj62, byte_12320-Map_obj62
00012DFE 0000 0000                  		dc.w byte_12330-Map_obj62, byte_12336-Map_obj62
00012E02 03                         byte_12320:	dc.b 3
00012E03 F004 0000 00               		dc.b $F0, 4, 0,	0, 0
00012E08 F80D 0002 F0               		dc.b $F8, $D, 0, 2, $F0
00012E0D 0808 000A F8               		dc.b 8,	8, 0, $A, $F8
00012E12 01                         byte_12330:	dc.b 1
00012E13 FC04 000D F8               		dc.b $FC, 4, 0,	$D, $F8
00012E18 01                         byte_12336:	dc.b 1
00012E19 FC04 000F F8               		dc.b $FC, 4, 0,	$F, $F8
00012E1E                            		even
00012E1E                            		even
00012E1E                            
00012E1E                            ; ===========================================================================
00012E1E                            ; ---------------------------------------------------------------------------
00012E1E                            ; Object 63 - platforms	on a conveyor belt (LZ)
00012E1E                            ; ---------------------------------------------------------------------------
00012E1E                            
00012E1E                            Obj63:					; XREF: Obj_Index
00012E1E 7000                       		moveq	#0,d0
00012E20 1028 0024                  		move.b	$24(a0),d0
00012E24 323B 0000                  		move.w	Obj63_Index(pc,d0.w),d1
00012E28 4EBB 1000                  		jsr	Obj63_Index(pc,d1.w)
00012E2C 3028 0030                  		move.w	$30(a0),d0
00012E30 0240 FF80                  		andi.w	#$FF80,d0
00012E34 3238 F700                  		move.w	($FFFFF700).w,d1
00012E38 0441 0080                  		subi.w	#$80,d1
00012E3C 0241 FF80                  		andi.w	#$FF80,d1
00012E40 9041                       		sub.w	d1,d0
00012E42 0C40 0280                  		cmpi.w	#$280,d0
00012E46 6200                       		bhi.s	loc_1236A
00012E48                            
00012E48                            Obj63_Display:				; XREF: loc_1236A
00012E48 6000 B28C                  		bra.w	DisplaySprite
00012E4C                            ; ===========================================================================
00012E4C                            
00012E4C                            loc_1236A:				; XREF: Obj63
00012E4C 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w
00012E52 6600                       		bne.s	loc_12378
00012E54 0C40 FF80                  		cmpi.w	#-$80,d0
00012E58 64EE                       		bcc.s	Obj63_Display
00012E5A                            
00012E5A                            loc_12378:
00012E5A 1028 002F                  		move.b	$2F(a0),d0
00012E5E 6A00 B2B2                  		bpl.w	DeleteObject
00012E62 0240 007F                  		andi.w	#$7F,d0
00012E66 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00012E6A 08B2 0000 0000             		bclr	#0,(a2,d0.w)
00012E70 6000 B2A0                  		bra.w	DeleteObject
00012E74                            ; ===========================================================================
00012E74 0000                       Obj63_Index:	dc.w Obj63_Main-Obj63_Index
00012E76 0000                       		dc.w loc_124B2-Obj63_Index
00012E78 0000                       		dc.w loc_124C2-Obj63_Index
00012E7A 0000                       		dc.w loc_124DE-Obj63_Index
00012E7C                            ; ===========================================================================
00012E7C                            
00012E7C                            Obj63_Main:				; XREF: Obj63_Index
00012E7C 1028 0028                  		move.b	$28(a0),d0
00012E80 6B00 0000                  		bmi.w	loc_12460
00012E84 5428 0024                  		addq.b	#2,$24(a0)
00012E88 217C 0000 0000 0004        		move.l	#Map_obj63,4(a0)
00012E90 317C 43F6 0002             		move.w	#$43F6,2(a0)
00012E96 0028 0004 0001             		ori.b	#4,1(a0)
00012E9C 117C 0010 0019             		move.b	#$10,$19(a0)
00012EA2 117C 0004 0018             		move.b	#4,$18(a0)
00012EA8 0C28 007F 0028             		cmpi.b	#$7F,$28(a0)
00012EAE 6600                       		bne.s	loc_123E2
00012EB0 5828 0024                  		addq.b	#4,$24(a0)
00012EB4 317C 03F6 0002             		move.w	#$3F6,2(a0)
00012EBA 117C 0001 0018             		move.b	#1,$18(a0)
00012EC0 6000 0000                  		bra.w	loc_124DE
00012EC4                            ; ===========================================================================
00012EC4                            
00012EC4                            loc_123E2:
00012EC4 117C 0004 001A             		move.b	#4,$1A(a0)
00012ECA 7000                       		moveq	#0,d0
00012ECC 1028 0028                  		move.b	$28(a0),d0
00012ED0 3200                       		move.w	d0,d1
00012ED2 E648                       		lsr.w	#3,d0
00012ED4 0240 001E                  		andi.w	#$1E,d0
00012ED8 45FA 0000                  		lea	Obj63_Data(pc),a2
00012EDC D4F2 0000                  		adda.w	(a2,d0.w),a2
00012EE0 315A 0038                  		move.w	(a2)+,$38(a0)
00012EE4 315A 0030                  		move.w	(a2)+,$30(a0)
00012EE8 214A 003C                  		move.l	a2,$3C(a0)
00012EEC 0241 000F                  		andi.w	#$F,d1
00012EF0 E549                       		lsl.w	#2,d1
00012EF2 1141 0038                  		move.b	d1,$38(a0)
00012EF6 117C 0004 003A             		move.b	#4,$3A(a0)
00012EFC 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00012F00 6700                       		beq.s	loc_1244C
00012F02 117C 0001 003B             		move.b	#1,$3B(a0)
00012F08 4428 003A                  		neg.b	$3A(a0)
00012F0C 7200                       		moveq	#0,d1
00012F0E 1228 0038                  		move.b	$38(a0),d1
00012F12 D228 003A                  		add.b	$3A(a0),d1
00012F16 B228 0039                  		cmp.b	$39(a0),d1
00012F1A 6500                       		bcs.s	loc_12448
00012F1C 1001                       		move.b	d1,d0
00012F1E 7200                       		moveq	#0,d1
00012F20 4A00                       		tst.b	d0
00012F22 6A00                       		bpl.s	loc_12448
00012F24 1228 0039                  		move.b	$39(a0),d1
00012F28 5901                       		subq.b	#4,d1
00012F2A                            
00012F2A                            loc_12448:
00012F2A 1141 0038                  		move.b	d1,$38(a0)
00012F2E                            
00012F2E                            loc_1244C:
00012F2E 3172 1000 0034             		move.w	(a2,d1.w),$34(a0)
00012F34 3172 1002 0036             		move.w	2(a2,d1.w),$36(a0)
00012F3A 6100 0000                  		bsr.w	Obj63_ChangeDir
00012F3E 6000 0000                  		bra.w	loc_124B2
00012F42                            ; ===========================================================================
00012F42                            
00012F42                            loc_12460:				; XREF: Obj63_Main
00012F42 1140 002F                  		move.b	d0,$2F(a0)
00012F46 0240 007F                  		andi.w	#$7F,d0
00012F4A 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00012F4E 08F2 0000 0000             		bset	#0,(a2,d0.w)
00012F54 6600 B1BC                  		bne.w	DeleteObject
00012F58 D040                       		add.w	d0,d0
00012F5A 0240 001E                  		andi.w	#$1E,d0
00012F5E 0640 0070                  		addi.w	#$70,d0
00012F62 45F9 0000 0000             		lea	(ObjPos_Index).l,a2
00012F68 D4F2 0000                  		adda.w	(a2,d0.w),a2
00012F6C 321A                       		move.w	(a2)+,d1
00012F6E 2248                       		movea.l	a0,a1
00012F70 6000                       		bra.s	Obj63_MakePtfms
00012F72                            ; ===========================================================================
00012F72                            
00012F72                            Obj63_Loop:
00012F72 6100 B5F8                  		bsr.w	SingleObjLoad
00012F76 6600                       		bne.s	loc_124AA
00012F78                            
00012F78                            Obj63_MakePtfms:			; XREF: loc_12460
00012F78 12BC 0063                  		move.b	#$63,0(a1)
00012F7C 335A 0008                  		move.w	(a2)+,8(a1)
00012F80 335A 000C                  		move.w	(a2)+,$C(a1)
00012F84 301A                       		move.w	(a2)+,d0
00012F86 1340 0028                  		move.b	d0,$28(a1)
00012F8A                            
00012F8A                            loc_124AA:
00012F8A 51C9 FFE6                  		dbf	d1,Obj63_Loop
00012F8E                            
00012F8E 588F                       		addq.l	#4,sp
00012F90 4E75                       		rts	
00012F92                            ; ===========================================================================
00012F92                            
00012F92                            loc_124B2:				; XREF: Obj63_Index
00012F92 7200                       		moveq	#0,d1
00012F94 1228 0019                  		move.b	$19(a0),d1
00012F98 4EB9 0000 7ECE             		jsr	(PlatformObject).l
00012F9E 6000 0000                  		bra.w	sub_12502
00012FA2                            ; ===========================================================================
00012FA2                            
00012FA2                            loc_124C2:				; XREF: Obj63_Index
00012FA2 7200                       		moveq	#0,d1
00012FA4 1228 0019                  		move.b	$19(a0),d1
00012FA8 4EB9 0000 8042             		jsr	(ExitPlatform).l
00012FAE 3F28 0008                  		move.w	8(a0),-(sp)
00012FB2 6100 0000                  		bsr.w	sub_12502
00012FB6 341F                       		move.w	(sp)+,d2
00012FB8 4EF9 0000 85AC             		jmp	(MvSonicOnPtfm2).l
00012FBE                            ; ===========================================================================
00012FBE                            
00012FBE                            loc_124DE:				; XREF: Obj63_Index
00012FBE 3038 FE04                  		move.w	($FFFFFE04).w,d0
00012FC2 0240 0003                  		andi.w	#3,d0
00012FC6 6600                       		bne.s	loc_124FC
00012FC8 7201                       		moveq	#1,d1
00012FCA 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00012FCE 6700                       		beq.s	loc_124F2
00012FD0 4401                       		neg.b	d1
00012FD2                            
00012FD2                            loc_124F2:
00012FD2 D328 001A                  		add.b	d1,$1A(a0)
00012FD6 0228 0003 001A             		andi.b	#3,$1A(a0)
00012FDC                            
00012FDC                            loc_124FC:
00012FDC 588F                       		addq.l	#4,sp
00012FDE 6000 D1B8                  		bra.w	MarkObjGone
00012FE2                            
00012FE2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00012FE2                            
00012FE2                            
00012FE2                            sub_12502:				; XREF: loc_124B2; loc_124C2
00012FE2 4A38 F7EE                  		tst.b	($FFFFF7EE).w
00012FE6 6700                       		beq.s	loc_12520
00012FE8 4A28 003B                  		tst.b	$3B(a0)
00012FEC 6600                       		bne.s	loc_12520
00012FEE 117C 0001 003B             		move.b	#1,$3B(a0)
00012FF4 11FC 0001 F7C0             		move.b	#1,($FFFFF7C0).w
00012FFA 4428 003A                  		neg.b	$3A(a0)
00012FFE 6000                       		bra.s	loc_12534
00013000                            ; ===========================================================================
00013000                            
00013000                            loc_12520:
00013000 3028 0008                  		move.w	8(a0),d0
00013004 B068 0034                  		cmp.w	$34(a0),d0
00013008 6600                       		bne.s	loc_1256A
0001300A 3028 000C                  		move.w	$C(a0),d0
0001300E B068 0036                  		cmp.w	$36(a0),d0
00013012 6600                       		bne.s	loc_1256A
00013014                            
00013014                            loc_12534:
00013014 7200                       		moveq	#0,d1
00013016 1228 0038                  		move.b	$38(a0),d1
0001301A D228 003A                  		add.b	$3A(a0),d1
0001301E B228 0039                  		cmp.b	$39(a0),d1
00013022 6500                       		bcs.s	loc_12552
00013024 1001                       		move.b	d1,d0
00013026 7200                       		moveq	#0,d1
00013028 4A00                       		tst.b	d0
0001302A 6A00                       		bpl.s	loc_12552
0001302C 1228 0039                  		move.b	$39(a0),d1
00013030 5901                       		subq.b	#4,d1
00013032                            
00013032                            loc_12552:
00013032 1141 0038                  		move.b	d1,$38(a0)
00013036 2268 003C                  		movea.l	$3C(a0),a1
0001303A 3171 1000 0034             		move.w	(a1,d1.w),$34(a0)
00013040 3171 1002 0036             		move.w	2(a1,d1.w),$36(a0)
00013046 6100 0000                  		bsr.w	Obj63_ChangeDir
0001304A                            
0001304A                            loc_1256A:
0001304A 6100 B064                  		bsr.w	SpeedToPos
0001304E 4E75                       		rts	
00013050                            ; End of function sub_12502
00013050                            
00013050                            
00013050                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013050                            
00013050                            
00013050                            Obj63_ChangeDir:			; XREF: loc_123E2; sub_12502
00013050 7000                       		moveq	#0,d0
00013052 343C FF00                  		move.w	#-$100,d2
00013056 3028 0008                  		move.w	8(a0),d0
0001305A 9068 0034                  		sub.w	$34(a0),d0
0001305E 6400                       		bcc.s	loc_12584
00013060 4440                       		neg.w	d0
00013062 4442                       		neg.w	d2
00013064                            
00013064                            loc_12584:
00013064 7200                       		moveq	#0,d1
00013066 363C FF00                  		move.w	#-$100,d3
0001306A 3228 000C                  		move.w	$C(a0),d1
0001306E 9268 0036                  		sub.w	$36(a0),d1
00013072 6400                       		bcc.s	loc_12598
00013074 4441                       		neg.w	d1
00013076 4443                       		neg.w	d3
00013078                            
00013078                            loc_12598:
00013078 B240                       		cmp.w	d0,d1
0001307A 6500                       		bcs.s	loc_125C2
0001307C 3028 0008                  		move.w	8(a0),d0
00013080 9068 0034                  		sub.w	$34(a0),d0
00013084 6700                       		beq.s	loc_125AE
00013086 48C0                       		ext.l	d0
00013088 E180                       		asl.l	#8,d0
0001308A 81C1                       		divs.w	d1,d0
0001308C 4440                       		neg.w	d0
0001308E                            
0001308E                            loc_125AE:
0001308E 3140 0010                  		move.w	d0,$10(a0)
00013092 3143 0012                  		move.w	d3,$12(a0)
00013096 4840                       		swap	d0
00013098 3140 000A                  		move.w	d0,$A(a0)
0001309C 4268 000E                  		clr.w	$E(a0)
000130A0 4E75                       		rts	
000130A2                            ; ===========================================================================
000130A2                            
000130A2                            loc_125C2:				; XREF: Obj63_ChangeDir
000130A2 3228 000C                  		move.w	$C(a0),d1
000130A6 9268 0036                  		sub.w	$36(a0),d1
000130AA 6700                       		beq.s	loc_125D4
000130AC 48C1                       		ext.l	d1
000130AE E181                       		asl.l	#8,d1
000130B0 83C0                       		divs.w	d0,d1
000130B2 4441                       		neg.w	d1
000130B4                            
000130B4                            loc_125D4:
000130B4 3141 0012                  		move.w	d1,$12(a0)
000130B8 3142 0010                  		move.w	d2,$10(a0)
000130BC 4841                       		swap	d1
000130BE 3141 000E                  		move.w	d1,$E(a0)
000130C2 4268 000A                  		clr.w	$A(a0)
000130C6 4E75                       		rts	
000130C8                            ; End of function Obj63_ChangeDir
000130C8                            
000130C8                            ; ===========================================================================
000130C8 0000                       Obj63_Data:	dc.w word_125F4-Obj63_Data
000130CA 0000                       		dc.w word_12610-Obj63_Data
000130CC 0000                       		dc.w word_12628-Obj63_Data
000130CE 0000                       		dc.w word_1263C-Obj63_Data
000130D0 0000                       		dc.w word_12650-Obj63_Data
000130D2 0000                       		dc.w word_12668-Obj63_Data
000130D4 0018 1070 1078 021A 10BE+  word_125F4:	dc.w $18, $1070, $1078,	$21A, $10BE, $260, $10BE, $393
000130E4 108C 03C5 1022 0390 1022+  		dc.w $108C, $3C5, $1022, $390, $1022, $244
000130F0 0014 1280 127E 0280 12CE+  word_12610:	dc.w $14, $1280, $127E,	$280, $12CE, $2D0, $12CE, $46E
00013100 1232 0420 1232 02CC        		dc.w $1232, $420, $1232, $2CC
00013108 0010 0D68 0D22 0482 0D22+  word_12628:	dc.w $10, $D68,	$D22, $482, $D22, $5DE,	$DAE, $5DE, $DAE, $482
0001311C 0010 0DA0 0D62 03A2 0DEE+  word_1263C:	dc.w $10, $DA0,	$D62, $3A2, $DEE, $3A2,	$DEE, $4DE, $D62, $4DE
00013130 0014 0D00 0CAC 0242 0DDE+  word_12650:	dc.w $14, $D00,	$CAC, $242, $DDE, $242,	$DDE, $3DE, $C52, $3DE,	$C52, $29C
00013148 0010 1300 1252 020A 13DE+  word_12668:	dc.w $10, $1300, $1252,	$20A, $13DE, $20A, $13DE, $2BE,	$1252, $2BE
0001315C                            
0001315C                            ; ---------------------------------------------------------------------------
0001315C                            ; Sprite mappings - platforms on a conveyor belt (LZ)
0001315C                            ; ---------------------------------------------------------------------------
0001315C                            Map_obj63:
0001315C                            	include "_maps\obj63.asm"
0001315C                            ; ---------------------------------------------------------------------------
0001315C                            ; Sprite mappings - platforms on a conveyor belt (LZ)
0001315C                            ; ---------------------------------------------------------------------------
0001315C 0000 0000                  		dc.w byte_12686-Map_obj63, byte_1268C-Map_obj63
00013160 0000 0000                  		dc.w byte_12692-Map_obj63, byte_12698-Map_obj63
00013164 0000                       		dc.w byte_1269E-Map_obj63
00013166 01                         byte_12686:	dc.b 1
00013167 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0001316C 01                         byte_1268C:	dc.b 1
0001316D F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
00013172 01                         byte_12692:	dc.b 1
00013173 F00F 0020 F0               		dc.b $F0, $F, 0, $20, $F0
00013178 01                         byte_12698:	dc.b 1
00013179 F00F 0030 F0               		dc.b $F0, $F, 0, $30, $F0
0001317E 01                         byte_1269E:	dc.b 1
0001317F F80D 0040 F0               		dc.b $F8, $D, 0, $40, $F0
00013184                            		even
00013184                            		even
00013184                            
00013184                            ; ===========================================================================
00013184                            ; ---------------------------------------------------------------------------
00013184                            ; Object 64 - bubbles (LZ)
00013184                            ; ---------------------------------------------------------------------------
00013184                            
00013184                            Obj64:					; XREF: Obj_Index
00013184 7000                       		moveq	#0,d0
00013186 1028 0024                  		move.b	$24(a0),d0
0001318A 323B 0000                  		move.w	Obj64_Index(pc,d0.w),d1
0001318E 4EFB 1000                  		jmp	Obj64_Index(pc,d1.w)
00013192                            ; ===========================================================================
00013192 0000                       Obj64_Index:	dc.w Obj64_Main-Obj64_Index
00013194 0000                       		dc.w Obj64_Animate-Obj64_Index
00013196 0000                       		dc.w Obj64_ChkWater-Obj64_Index
00013198 0000                       		dc.w Obj64_Display2-Obj64_Index
0001319A 0000                       		dc.w Obj64_Delete3-Obj64_Index
0001319C 0000                       		dc.w Obj64_BblMaker-Obj64_Index
0001319E                            ; ===========================================================================
0001319E                            
0001319E                            Obj64_Main:				; XREF: Obj64_Index
0001319E 5428 0024                  		addq.b	#2,$24(a0)
000131A2 217C 0000 0000 0004        		move.l	#Map_obj64,4(a0)
000131AA 317C 8348 0002             		move.w	#$8348,2(a0)
000131B0 117C 0084 0001             		move.b	#$84,1(a0)
000131B6 117C 0010 0019             		move.b	#$10,$19(a0)
000131BC 117C 0001 0018             		move.b	#1,$18(a0)
000131C2 1028 0028                  		move.b	$28(a0),d0	; get object type
000131C6 6A00                       		bpl.s	Obj64_Bubble	; if type is $0-$7F, branch
000131C8 5028 0024                  		addq.b	#8,$24(a0)
000131CC 0240 007F                  		andi.w	#$7F,d0		; read only last 7 bits	(deduct	$80)
000131D0 1140 0032                  		move.b	d0,$32(a0)
000131D4 1140 0033                  		move.b	d0,$33(a0)
000131D8 117C 0006 001C             		move.b	#6,$1C(a0)
000131DE 6000 0000                  		bra.w	Obj64_BblMaker
000131E2                            ; ===========================================================================
000131E2                            
000131E2                            Obj64_Bubble:				; XREF: Obj64_Main
000131E2 1140 001C                  		move.b	d0,$1C(a0)
000131E6 3168 0008 0030             		move.w	8(a0),$30(a0)
000131EC 317C FF78 0012             		move.w	#-$88,$12(a0)	; float	bubble upwards
000131F2 4EB9 0000 33B4             		jsr	(RandomNumber).l
000131F8 1140 0026                  		move.b	d0,$26(a0)
000131FC                            
000131FC                            Obj64_Animate:				; XREF: Obj64_Index
000131FC 43F9 0000 0000             		lea	(Ani_obj64).l,a1
00013202 4EB9 0000 B1EE             		jsr	AnimateSprite
00013208 0C28 0006 001A             		cmpi.b	#6,$1A(a0)
0001320E 6600                       		bne.s	Obj64_ChkWater
00013210 117C 0001 002E             		move.b	#1,$2E(a0)
00013216                            
00013216                            Obj64_ChkWater:				; XREF: Obj64_Index
00013216 3038 F646                  		move.w	($FFFFF646).w,d0
0001321A B068 000C                  		cmp.w	$C(a0),d0	; is bubble underwater?
0001321E 6500                       		bcs.s	Obj64_Wobble	; if yes, branch
00013220                            
00013220                            Obj64_Burst:				; XREF: Obj64_Wobble
00013220 117C 0006 0024             		move.b	#6,$24(a0)
00013226 5628 001C                  		addq.b	#3,$1C(a0)	; run "bursting" animation
0001322A 6000 0000                  		bra.w	Obj64_Display2
0001322E                            ; ===========================================================================
0001322E                            
0001322E                            Obj64_Wobble:				; XREF: Obj64_ChkWater
0001322E 1028 0026                  		move.b	$26(a0),d0
00013232 5228 0026                  		addq.b	#1,$26(a0)
00013236 0240 007F                  		andi.w	#$7F,d0
0001323A 43F9 0000 0000             		lea	(Obj0A_WobbleData).l,a1
00013240 1031 0000                  		move.b	(a1,d0.w),d0
00013244 4880                       		ext.w	d0
00013246 D068 0030                  		add.w	$30(a0),d0
0001324A 3140 0008                  		move.w	d0,8(a0)	; change bubble's horizontal position
0001324E 4A28 002E                  		tst.b	$2E(a0)
00013252 6700                       		beq.s	Obj64_Display
00013254 6100 0000                  		bsr.w	Obj64_ChkSonic	; has Sonic touched the	bubble?
00013258 6700                       		beq.s	Obj64_Display	; if not, branch
0001325A                            
0001325A 6100 0000                  		bsr.w	ResumeMusic	; cancel countdown music
0001325E 303C 00AD                  		move.w	#$AD,d0
00013262 4EB9 0000 147C             		jsr	(PlaySound_Special).l ;	play collecting	bubble sound
00013268 43F8 D000                  		lea	($FFFFD000).w,a1
0001326C 4269 0010                  		clr.w	$10(a1)
00013270 4269 0012                  		clr.w	$12(a1)
00013274 4269 0014                  		clr.w	$14(a1)
00013278 137C 0015 001C             		move.b	#$15,$1C(a1)
0001327E 337C 0023 003E             		move.w	#$23,$3E(a1)
00013284 137C 0000 003C             		move.b	#0,$3C(a1)
0001328A 08A9 0005 0022             		bclr	#5,$22(a1)
00013290 08A9 0004 0022             		bclr	#4,$22(a1)
00013296 0829 0002 0022             		btst	#2,$22(a1)
0001329C 6700 FF82                  		beq.w	Obj64_Burst
000132A0 08A9 0002 0022             		bclr	#2,$22(a1)
000132A6 137C 0013 0016             		move.b	#$13,$16(a1)
000132AC 137C 0009 0017             		move.b	#9,$17(a1)
000132B2 5B69 000C                  		subq.w	#5,$C(a1)
000132B6 6000 FF68                  		bra.w	Obj64_Burst
000132BA                            ; ===========================================================================
000132BA                            
000132BA                            Obj64_Display:				; XREF: Obj64_Wobble
000132BA 6100 ADF4                  		bsr.w	SpeedToPos
000132BE 4A28 0001                  		tst.b	1(a0)
000132C2 6A00                       		bpl.s	Obj64_Delete
000132C4 4EFA AE10                  		jmp	DisplaySprite
000132C8                            ; ===========================================================================
000132C8                            
000132C8                            Obj64_Delete:
000132C8 4EFA AE48                  		jmp	DeleteObject
000132CC                            ; ===========================================================================
000132CC                            
000132CC                            Obj64_Display2:				; XREF: Obj64_Index
000132CC 43F9 0000 0000             		lea	(Ani_obj64).l,a1
000132D2 4EB9 0000 B1EE             		jsr	AnimateSprite
000132D8 4A28 0001                  		tst.b	1(a0)
000132DC 6A00                       		bpl.s	Obj64_Delete2
000132DE 4EFA ADF6                  		jmp	DisplaySprite
000132E2                            ; ===========================================================================
000132E2                            
000132E2                            Obj64_Delete2:
000132E2 4EFA AE2E                  		jmp	DeleteObject
000132E6                            ; ===========================================================================
000132E6                            
000132E6                            Obj64_Delete3:				; XREF: Obj64_Index
000132E6 6000 AE2A                  		bra.w	DeleteObject
000132EA                            ; ===========================================================================
000132EA                            
000132EA                            Obj64_BblMaker:				; XREF: Obj64_Index
000132EA 4A68 0036                  		tst.w	$36(a0)
000132EE 6600                       		bne.s	loc_12874
000132F0 3038 F646                  		move.w	($FFFFF646).w,d0
000132F4 B068 000C                  		cmp.w	$C(a0),d0	; is bubble maker underwater?
000132F8 6400 0000                  		bcc.w	Obj64_ChkDel	; if not, branch
000132FC 4A28 0001                  		tst.b	1(a0)
00013300 6A00 0000                  		bpl.w	Obj64_ChkDel
00013304 5368 0038                  		subq.w	#1,$38(a0)
00013308 6A00 0000                  		bpl.w	loc_12914
0001330C 317C 0001 0036             		move.w	#1,$36(a0)
00013312                            
00013312                            loc_1283A:
00013312 4EB9 0000 33B4             		jsr	(RandomNumber).l
00013318 3200                       		move.w	d0,d1
0001331A 0240 0007                  		andi.w	#7,d0
0001331E 0C40 0006                  		cmpi.w	#6,d0
00013322 64EE                       		bcc.s	loc_1283A
00013324                            
00013324 1140 0034                  		move.b	d0,$34(a0)
00013328 0241 000C                  		andi.w	#$C,d1
0001332C 43F9 0000 0000             		lea	(Obj64_BblTypes).l,a1
00013332 D2C1                       		adda.w	d1,a1
00013334 2149 003C                  		move.l	a1,$3C(a0)
00013338 5328 0032                  		subq.b	#1,$32(a0)
0001333C 6A00                       		bpl.s	loc_12872
0001333E 1168 0033 0032             		move.b	$33(a0),$32(a0)
00013344 08E8 0007 0036             		bset	#7,$36(a0)
0001334A                            
0001334A                            loc_12872:
0001334A 6000                       		bra.s	loc_1287C
0001334C                            ; ===========================================================================
0001334C                            
0001334C                            loc_12874:				; XREF: Obj64_BblMaker
0001334C 5368 0038                  		subq.w	#1,$38(a0)
00013350 6A00 0000                  		bpl.w	loc_12914
00013354                            
00013354                            loc_1287C:
00013354 4EB9 0000 33B4             		jsr	(RandomNumber).l
0001335A 0240 001F                  		andi.w	#$1F,d0
0001335E 3140 0038                  		move.w	d0,$38(a0)
00013362 6100 B208                  		bsr.w	SingleObjLoad
00013366 6600                       		bne.s	loc_128F8
00013368 12BC 0064                  		move.b	#$64,0(a1)	; load bubble object
0001336C 3368 0008 0008             		move.w	8(a0),8(a1)
00013372 4EB9 0000 33B4             		jsr	(RandomNumber).l
00013378 0240 000F                  		andi.w	#$F,d0
0001337C 5140                       		subq.w	#8,d0
0001337E D169 0008                  		add.w	d0,8(a1)
00013382 3368 000C 000C             		move.w	$C(a0),$C(a1)
00013388 7000                       		moveq	#0,d0
0001338A 1028 0034                  		move.b	$34(a0),d0
0001338E 2468 003C                  		movea.l	$3C(a0),a2
00013392 1372 0000 0028             		move.b	(a2,d0.w),$28(a1)
00013398 0828 0007 0036             		btst	#7,$36(a0)
0001339E 6700                       		beq.s	loc_128F8
000133A0 4EB9 0000 33B4             		jsr	(RandomNumber).l
000133A6 0240 0003                  		andi.w	#3,d0
000133AA 6600                       		bne.s	loc_128E4
000133AC 08E8 0006 0036             		bset	#6,$36(a0)
000133B2 6600                       		bne.s	loc_128F8
000133B4 137C 0002 0028             		move.b	#2,$28(a1)
000133BA                            
000133BA                            loc_128E4:
000133BA 4A28 0034                  		tst.b	$34(a0)
000133BE 6600                       		bne.s	loc_128F8
000133C0 08E8 0006 0036             		bset	#6,$36(a0)
000133C6 6600                       		bne.s	loc_128F8
000133C8 137C 0002 0028             		move.b	#2,$28(a1)
000133CE                            
000133CE                            loc_128F8:
000133CE 5328 0034                  		subq.b	#1,$34(a0)
000133D2 6A00                       		bpl.s	loc_12914
000133D4 4EB9 0000 33B4             		jsr	(RandomNumber).l
000133DA 0240 007F                  		andi.w	#$7F,d0
000133DE 0640 0080                  		addi.w	#$80,d0
000133E2 D168 0038                  		add.w	d0,$38(a0)
000133E6 4268 0036                  		clr.w	$36(a0)
000133EA                            
000133EA                            loc_12914:
000133EA 43F9 0000 0000             		lea	(Ani_obj64).l,a1
000133F0 4EB9 0000 B1EE             		jsr	AnimateSprite
000133F6                            
000133F6                            Obj64_ChkDel:				; XREF: Obj64_BblMaker
000133F6 3028 0008                  		move.w	8(a0),d0
000133FA 0240 FF80                  		andi.w	#$FF80,d0
000133FE 3238 F700                  		move.w	($FFFFF700).w,d1
00013402 0441 0080                  		subi.w	#$80,d1
00013406 0241 FF80                  		andi.w	#$FF80,d1
0001340A 9041                       		sub.w	d1,d0
0001340C 0C40 0280                  		cmpi.w	#$280,d0
00013410 6200 AD00                  		bhi.w	DeleteObject
00013414 3038 F646                  		move.w	($FFFFF646).w,d0
00013418 B068 000C                  		cmp.w	$C(a0),d0
0001341C 6500 ACB8                  		bcs.w	DisplaySprite
00013420 4E75                       		rts	
00013422                            ; ===========================================================================
00013422                            ; bubble production sequence
00013422                            
00013422                            ; 0 = small bubble, 1 =	large bubble
00013422                            
00013422 0001 0000 0000 0100 0000+  Obj64_BblTypes:	dc.b 0,	1, 0, 0, 0, 0, 1, 0, 0,	0, 0, 1, 0, 1, 0, 0, 1,	0
00013434                            
00013434                            ; ===========================================================================
00013434                            
00013434                            Obj64_ChkSonic:				; XREF: Obj64_Wobble
00013434 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00013438 6B00                       		bmi.s	loc_12998
0001343A 43F8 D000                  		lea	($FFFFD000).w,a1
0001343E 3029 0008                  		move.w	8(a1),d0
00013442 3228 0008                  		move.w	8(a0),d1
00013446 0441 0010                  		subi.w	#$10,d1
0001344A B240                       		cmp.w	d0,d1
0001344C 6400                       		bcc.s	loc_12998
0001344E 0641 0020                  		addi.w	#$20,d1
00013452 B240                       		cmp.w	d0,d1
00013454 6500                       		bcs.s	loc_12998
00013456 3029 000C                  		move.w	$C(a1),d0
0001345A 3228 000C                  		move.w	$C(a0),d1
0001345E B240                       		cmp.w	d0,d1
00013460 6400                       		bcc.s	loc_12998
00013462 0641 0010                  		addi.w	#$10,d1
00013466 B240                       		cmp.w	d0,d1
00013468 6500                       		bcs.s	loc_12998
0001346A 7001                       		moveq	#1,d0
0001346C 4E75                       		rts	
0001346E                            ; ===========================================================================
0001346E                            
0001346E                            loc_12998:
0001346E 7000                       		moveq	#0,d0
00013470 4E75                       		rts	
00013472                            ; ===========================================================================
00013472                            Ani_obj64:
00013472                            	include "_anim\obj64.asm"
00013472                            ; ---------------------------------------------------------------------------
00013472                            ; Animation script - bubbles (LZ)
00013472                            ; ---------------------------------------------------------------------------
00013472 0000                       		dc.w byte_129AA-Ani_obj64
00013474 0000                       		dc.w byte_129B0-Ani_obj64
00013476 0000                       		dc.w byte_129B6-Ani_obj64
00013478 0000                       		dc.w byte_129BE-Ani_obj64
0001347A 0000                       		dc.w byte_129BE-Ani_obj64
0001347C 0000                       		dc.w byte_129C0-Ani_obj64
0001347E 0000                       		dc.w byte_129C6-Ani_obj64
00013480 0E00 0102 FC00             byte_129AA:	dc.b $E, 0, 1, 2, $FC, 0
00013486 0E01 0203 04FC             byte_129B0:	dc.b $E, 1, 2, 3, 4, $FC
0001348C 0E02 0304 0506 FC00        byte_129B6:	dc.b $E, 2, 3, 4, 5, 6,	$FC, 0
00013494 04FC                       byte_129BE:	dc.b 4,	$FC
00013496 0406 0708 FC00             byte_129C0:	dc.b 4,	6, 7, 8, $FC, 0
0001349C 0F13 1415 FF               byte_129C6:	dc.b $F, $13, $14, $15,	$FF
000134A2 00                         		even
000134A2 00                         		even
000134A2                            
000134A2                            ; ---------------------------------------------------------------------------
000134A2                            ; Sprite mappings - bubbles (LZ)
000134A2                            ; ---------------------------------------------------------------------------
000134A2                            Map_obj64:
000134A2                            	include "_maps\obj64.asm"
000134A2                            ; ---------------------------------------------------------------------------
000134A2                            ; Sprite mappings - bubbles (LZ)
000134A2                            ; ---------------------------------------------------------------------------
000134A2 0000 0000                  		dc.w byte_129FA-Map_obj64, byte_12A00-Map_obj64
000134A6 0000 0000                  		dc.w byte_12A06-Map_obj64, byte_12A0C-Map_obj64
000134AA 0000 0000                  		dc.w byte_12A12-Map_obj64, byte_12A18-Map_obj64
000134AE 0000 0000                  		dc.w byte_12A1E-Map_obj64, byte_12A24-Map_obj64
000134B2 0000 0000                  		dc.w byte_12A39-Map_obj64, byte_12A4E-Map_obj64
000134B6 0000 0000                  		dc.w byte_12A54-Map_obj64, byte_12A5A-Map_obj64
000134BA 0000 0000                  		dc.w byte_12A60-Map_obj64, byte_12A66-Map_obj64
000134BE 0000 0000                  		dc.w byte_12A6C-Map_obj64, byte_12A72-Map_obj64
000134C2 0000 0000                  		dc.w byte_12A78-Map_obj64, byte_12A7E-Map_obj64
000134C6 0000 0000                  		dc.w byte_12A84-Map_obj64, byte_12A8A-Map_obj64
000134CA 0000 0000                  		dc.w byte_12A90-Map_obj64, byte_12A96-Map_obj64
000134CE 0000                       		dc.w byte_12A9C-Map_obj64
000134D0 01                         byte_129FA:	dc.b 1
000134D1 FC00 0000 FC               		dc.b $FC, 0, 0,	0, $FC
000134D6 01                         byte_12A00:	dc.b 1
000134D7 FC00 0001 FC               		dc.b $FC, 0, 0,	1, $FC
000134DC 01                         byte_12A06:	dc.b 1
000134DD FC00 0002 FC               		dc.b $FC, 0, 0,	2, $FC
000134E2 01                         byte_12A0C:	dc.b 1
000134E3 F805 0003 F8               		dc.b $F8, 5, 0,	3, $F8
000134E8 01                         byte_12A12:	dc.b 1
000134E9 F805 0007 F8               		dc.b $F8, 5, 0,	7, $F8
000134EE 01                         byte_12A18:	dc.b 1
000134EF F40A 000B F4               		dc.b $F4, $A, 0, $B, $F4
000134F4 01                         byte_12A1E:	dc.b 1
000134F5 F00F 0014 F0               		dc.b $F0, $F, 0, $14, $F0
000134FA 04                         byte_12A24:	dc.b 4
000134FB F005 0024 F0               		dc.b $F0, 5, 0,	$24, $F0
00013500 F005 0824 00               		dc.b $F0, 5, 8,	$24, 0
00013505 0005 1024 F0               		dc.b 0,	5, $10,	$24, $F0
0001350A 0005 1824 00               		dc.b 0,	5, $18,	$24, 0
0001350F 04                         byte_12A39:	dc.b 4
00013510 F005 0028 F0               		dc.b $F0, 5, 0,	$28, $F0
00013515 F005 0828 00               		dc.b $F0, 5, 8,	$28, 0
0001351A 0005 1028 F0               		dc.b 0,	5, $10,	$28, $F0
0001351F 0005 1828 00               		dc.b 0,	5, $18,	$28, 0
00013524 01                         byte_12A4E:	dc.b 1
00013525 F406 002C F8               		dc.b $F4, 6, 0,	$2C, $F8
0001352A 01                         byte_12A54:	dc.b 1
0001352B F406 0032 F8               		dc.b $F4, 6, 0,	$32, $F8
00013530 01                         byte_12A5A:	dc.b 1
00013531 F406 0038 F8               		dc.b $F4, 6, 0,	$38, $F8
00013536 01                         byte_12A60:	dc.b 1
00013537 F406 003E F8               		dc.b $F4, 6, 0,	$3E, $F8
0001353C 01                         byte_12A66:	dc.b 1
0001353D F406 2044 F8               		dc.b $F4, 6, $20, $44, $F8
00013542 01                         byte_12A6C:	dc.b 1
00013543 F406 204A F8               		dc.b $F4, 6, $20, $4A, $F8
00013548 01                         byte_12A72:	dc.b 1
00013549 F406 2050 F8               		dc.b $F4, 6, $20, $50, $F8
0001354E 01                         byte_12A78:	dc.b 1
0001354F F406 2056 F8               		dc.b $F4, 6, $20, $56, $F8
00013554 01                         byte_12A7E:	dc.b 1
00013555 F406 205C F8               		dc.b $F4, 6, $20, $5C, $F8
0001355A 01                         byte_12A84:	dc.b 1
0001355B F406 2062 F8               		dc.b $F4, 6, $20, $62, $F8
00013560 01                         byte_12A8A:	dc.b 1
00013561 F805 0068 F8               		dc.b $F8, 5, 0,	$68, $F8
00013566 01                         byte_12A90:	dc.b 1
00013567 F805 006C F8               		dc.b $F8, 5, 0,	$6C, $F8
0001356C 01                         byte_12A96:	dc.b 1
0001356D F805 0070 F8               		dc.b $F8, 5, 0,	$70, $F8
00013572 00                         byte_12A9C:	dc.b 0
00013574 00                         		even
00013574 00                         		even
00013574                            
00013574                            ; ===========================================================================
00013574                            ; ---------------------------------------------------------------------------
00013574                            ; Object 65 - waterfalls (LZ)
00013574                            ; ---------------------------------------------------------------------------
00013574                            
00013574                            Obj65:					; XREF: Obj_Index
00013574 7000                       		moveq	#0,d0
00013576 1028 0024                  		move.b	$24(a0),d0
0001357A 323B 0000                  		move.w	Obj65_Index(pc,d0.w),d1
0001357E 4EFB 1000                  		jmp	Obj65_Index(pc,d1.w)
00013582                            ; ===========================================================================
00013582 0000                       Obj65_Index:	dc.w Obj65_Main-Obj65_Index
00013584 0000                       		dc.w Obj65_Animate-Obj65_Index
00013586 0000                       		dc.w Obj65_ChkDel-Obj65_Index
00013588 0000                       		dc.w Obj65_FixHeight-Obj65_Index
0001358A 0000                       		dc.w loc_12B36-Obj65_Index
0001358C                            ; ===========================================================================
0001358C                            
0001358C                            Obj65_Main:				; XREF: Obj65_Index
0001358C 5828 0024                  		addq.b	#4,$24(a0)
00013590 217C 0000 0000 0004        		move.l	#Map_obj65,4(a0)
00013598 317C 4259 0002             		move.w	#$4259,2(a0)
0001359E 0028 0004 0001             		ori.b	#4,1(a0)
000135A4 117C 0018 0019             		move.b	#$18,$19(a0)
000135AA 117C 0001 0018             		move.b	#1,$18(a0)
000135B0 1028 0028                  		move.b	$28(a0),d0	; get object type
000135B4 6A00                       		bpl.s	loc_12AE6
000135B6 08E8 0007 0002             		bset	#7,2(a0)
000135BC                            
000135BC                            loc_12AE6:
000135BC 0200 000F                  		andi.b	#$F,d0		; read only the	2nd byte
000135C0 1140 001A                  		move.b	d0,$1A(a0)	; set frame number
000135C4 0C00 0009                  		cmpi.b	#9,d0		; is object type $x9 ?
000135C8 6600                       		bne.s	Obj65_ChkDel	; if not, branch
000135CA 4228 0018                  		clr.b	$18(a0)
000135CE 5528 0024                  		subq.b	#2,$24(a0)
000135D2 0828 0006 0028             		btst	#6,$28(a0)	; is object type $4x ?
000135D8 6700                       		beq.s	loc_12B0A	; if not, branch
000135DA 117C 0006 0024             		move.b	#6,$24(a0)
000135E0                            
000135E0                            loc_12B0A:
000135E0 0828 0005 0028             		btst	#5,$28(a0)	; is object type $Ax ?
000135E6 6700                       		beq.s	Obj65_Animate	; if not, branch
000135E8 117C 0008 0024             		move.b	#8,$24(a0)
000135EE                            
000135EE                            Obj65_Animate:				; XREF: Obj65_Index
000135EE 43F9 0000 0000             		lea	(Ani_obj65).l,a1
000135F4 4EB9 0000 B1EE             		jsr	AnimateSprite
000135FA                            
000135FA                            Obj65_ChkDel:				; XREF: Obj65_Index
000135FA 6000 CB9C                  		bra.w	MarkObjGone
000135FE                            ; ===========================================================================
000135FE                            
000135FE                            Obj65_FixHeight:			; XREF: Obj65_Index
000135FE 3038 F646                  		move.w	($FFFFF646).w,d0
00013602 0440 0010                  		subi.w	#$10,d0
00013606 3140 000C                  		move.w	d0,$C(a0)	; match	object position	to water height
0001360A 60E2                       		bra.s	Obj65_Animate
0001360C                            ; ===========================================================================
0001360C                            
0001360C                            loc_12B36:				; XREF: Obj65_Index
0001360C 08A8 0007 0002             		bclr	#7,2(a0)
00013612 0C38 0007 A506             		cmpi.b	#7,($FFFFA506).w
00013618 6600                       		bne.s	Obj65_Animate2
0001361A 08E8 0007 0002             		bset	#7,2(a0)
00013620                            
00013620                            Obj65_Animate2:
00013620 60CC                       		bra.s	Obj65_Animate
00013622                            ; ===========================================================================
00013622                            Ani_obj65:
00013622                            	include "_anim\obj65.asm"
00013622                            ; ---------------------------------------------------------------------------
00013622                            ; Animation script - waterfall (LZ)
00013622                            ; ---------------------------------------------------------------------------
00013622 0000                       		dc.w byte_12B4E-Ani_obj65
00013624 0509 0A0B FF               byte_12B4E:	dc.b 5,	9, $A, $B, $FF
0001362A 00                         		even
0001362A 00                         		even
0001362A                            
0001362A                            ; ---------------------------------------------------------------------------
0001362A                            ; Sprite mappings - waterfalls (LZ)
0001362A                            ; ---------------------------------------------------------------------------
0001362A                            Map_obj65:
0001362A                            	include "_maps\obj65.asm"
0001362A                            ; ---------------------------------------------------------------------------
0001362A                            ; Sprite mappings - waterfalls (LZ)
0001362A                            ; ---------------------------------------------------------------------------
0001362A 0000 0000                  		dc.w byte_12B6C-Map_obj65, byte_12B72-Map_obj65
0001362E 0000 0000                  		dc.w byte_12B7D-Map_obj65, byte_12B88-Map_obj65
00013632 0000 0000                  		dc.w byte_12B8E-Map_obj65, byte_12B99-Map_obj65
00013636 0000 0000                  		dc.w byte_12B9F-Map_obj65, byte_12BA5-Map_obj65
0001363A 0000 0000                  		dc.w byte_12BAB-Map_obj65, byte_12BB6-Map_obj65
0001363E 0000 0000                  		dc.w byte_12BC1-Map_obj65, byte_12BCC-Map_obj65
00013642 01                         byte_12B6C:	dc.b 1
00013643 F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
00013648 02                         byte_12B72:	dc.b 2
00013649 F804 0008 FC               		dc.b $F8, 4, 0,	8, $FC
0001364E 0008 000A F4               		dc.b 0,	8, 0, $A, $F4
00013653 02                         byte_12B7D:	dc.b 2
00013654 F800 0008 00               		dc.b $F8, 0, 0,	8, 0
00013659 0004 000D F8               		dc.b 0,	4, 0, $D, $F8
0001365E 01                         byte_12B88:	dc.b 1
0001365F F801 000F 00               		dc.b $F8, 1, 0,	$F, 0
00013664 02                         byte_12B8E:	dc.b 2
00013665 F800 0008 00               		dc.b $F8, 0, 0,	8, 0
0001366A 0004 000D F8               		dc.b 0,	4, 0, $D, $F8
0001366F 01                         byte_12B99:	dc.b 1
00013670 F801 0011 00               		dc.b $F8, 1, 0,	$11, 0
00013675 01                         byte_12B9F:	dc.b 1
00013676 F801 0013 00               		dc.b $F8, 1, 0,	$13, 0
0001367B 01                         byte_12BA5:	dc.b 1
0001367C F007 0015 F8               		dc.b $F0, 7, 0,	$15, $F8
00013681 02                         byte_12BAB:	dc.b 2
00013682 F80C 001D F6               		dc.b $F8, $C, 0, $1D, $F6
00013687 000C 0021 E8               		dc.b 0,	$C, 0, $21, $E8
0001368C 02                         byte_12BB6:	dc.b 2
0001368D F00B 0025 E8               		dc.b $F0, $B, 0, $25, $E8
00013692 F00B 0031 00               		dc.b $F0, $B, 0, $31, 0
00013697 02                         byte_12BC1:	dc.b 2
00013698 F00B 003D E8               		dc.b $F0, $B, 0, $3D, $E8
0001369D F00B 0049 00               		dc.b $F0, $B, 0, $49, 0
000136A2 02                         byte_12BCC:	dc.b 2
000136A3 F00B 0055 E8               		dc.b $F0, $B, 0, $55, $E8
000136A8 F00B 0061 00               		dc.b $F0, $B, 0, $61, 0
000136AE 00                         		even
000136AE 00                         		even
000136AE                            
000136AE                            ; ===========================================================================
000136AE                            ; ---------------------------------------------------------------------------
000136AE                            ; Object 01 - Sonic
000136AE                            ; ---------------------------------------------------------------------------
000136AE                            
000136AE                            Obj01:					; XREF: Obj_Index
000136AE 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
000136B2 6700                       		beq.s	Obj01_Normal	; if not, branch
000136B4 4EF9 0000 0000             		jmp	DebugMode
000136BA                            ; ===========================================================================
000136BA                            
000136BA                            Obj01_Normal:
000136BA 7000                       		moveq	#0,d0
000136BC 1028 0024                  		move.b	$24(a0),d0
000136C0 323B 0000                  		move.w	Obj01_Index(pc,d0.w),d1
000136C4 4EFB 1000                  		jmp	Obj01_Index(pc,d1.w)
000136C8                            ; ===========================================================================
000136C8 0000                       Obj01_Index:	dc.w Obj01_Main-Obj01_Index
000136CA 0000                       		dc.w Obj01_Control-Obj01_Index
000136CC 0000                       		dc.w Obj01_Hurt-Obj01_Index
000136CE 0000                       		dc.w Obj01_Death-Obj01_Index
000136D0 0000                       		dc.w Obj01_ResetLevel-Obj01_Index
000136D2 0000                       		dc.w Sonic_Drowned-Obj01_Index
000136D4                            ; ===========================================================================
000136D4                            
000136D4                            Obj01_Main:				; XREF: Obj01_Index
000136D4 5428 0024                  		addq.b	#2,$24(a0)
000136D8 117C 0013 0016             		move.b	#$13,$16(a0)
000136DE 117C 0009 0017             		move.b	#9,$17(a0)
000136E4 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
000136EC 317C 0780 0002             		move.w	#$780,2(a0)
000136F2 117C 0002 0018             		move.b	#2,$18(a0)
000136F8 117C 0018 0019             		move.b	#$18,$19(a0)
000136FE 117C 0004 0001             		move.b	#4,1(a0)
00013704 31FC 0600 F760             		move.w	#$600,($FFFFF760).w ; Sonic's top speed
0001370A 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; Sonic's acceleration
00013710 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; Sonic's deceleration
00013716 11FC 0005 D1C0             		move.b	#5,$FFFFD1C0.w
0001371C 11FC 0000 FE19             		move.b	#0,(Super_Sonic_flag).w
00013722                            
00013722                            Obj01_Control:				; XREF: Obj01_Index
00013722 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug cheat enabled?
00013726 6700                       		beq.s	loc_12C58	; if not, branch
00013728 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button C pressed?
0001372E 6700                       		beq.s	loc_12C58	; if not, branch
00013730 31FC 0001 FE08             		move.w	#1,($FFFFFE08).w ; change Sonic	into a ring/item
00013736 4238 F7CC                  		clr.b	($FFFFF7CC).w
0001373A 4E75                       		rts	
0001373C                            ; ===========================================================================
0001373C                            
0001373C                            loc_12C58:
0001373C 4A38 F7CC                  		tst.b	($FFFFF7CC).w	; are controls locked?
00013740 6600                       		bne.s	loc_12C64	; if yes, branch
00013742 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w ; enable joypad control
00013748                            
00013748                            loc_12C64:
00013748 0838 0000 F7C8             		btst	#0,($FFFFF7C8).w ; are controls	locked?
0001374E 6600                       		bne.s	loc_12C7E	; if yes, branch
00013750 7000                       		moveq	#0,d0
00013752 1028 0022                  		move.b	$22(a0),d0
00013756 0240 0006                  		andi.w	#6,d0
0001375A 323B 0000                  		move.w	Obj01_Modes(pc,d0.w),d1
0001375E 4EBB 1000                  		jsr	Obj01_Modes(pc,d1.w)
00013762                            
00013762                            loc_12C7E:
00013762 6100                       		bsr.s	Sonic_Display
00013764 6100 0000                  		bsr.w	Sonic_Super
00013768 6100 0000                  		bsr.w	Sonic_RecordPos
0001376C 6100 0000                  		bsr.w	Sonic_Water
00013770 1178 F768 0036             		move.b	($FFFFF768).w,$36(a0)
00013776 1178 F76A 0037             		move.b	($FFFFF76A).w,$37(a0)
0001377C 4A38 F7C7                  		tst.b	($FFFFF7C7).w
00013780 6700                       		beq.s	loc_12CA6
00013782 4A28 001C                  		tst.b	$1C(a0)
00013786 6600                       		bne.s	loc_12CA6
00013788 1168 001D 001C             		move.b	$1D(a0),$1C(a0)
0001378E                            
0001378E                            loc_12CA6:
0001378E 6100 0000                  		bsr.w	Sonic_Animate
00013792 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00013796 6B00                       		bmi.s	loc_12CB6
00013798 4EB9 0000 0000             		jsr	TouchResponse
0001379E                            
0001379E                            loc_12CB6:
0001379E 6100 0000                  		bsr.w	Sonic_Loops
000137A2 6100 0000                  		bsr.w	LoadSonicDynPLC
000137A6 4E75                       		rts	
000137A8                            ; ===========================================================================
000137A8 0000                       Obj01_Modes:	dc.w Obj01_MdNormal-Obj01_Modes
000137AA 0000                       		dc.w Obj01_MdJump-Obj01_Modes
000137AC 0000                       		dc.w Obj01_MdRoll-Obj01_Modes
000137AE 0000                       		dc.w Obj01_MdJump2-Obj01_Modes
000137B0                            ; ---------------------------------------------------------------------------
000137B0                            ; Music	to play	after invincibility wears off
000137B0                            ; ---------------------------------------------------------------------------
000137B0                            ;MusicList2:	incbin	misc\muslist2.bin
000137B0                            ;		even
000137B0                            ; ===========================================================================
000137B0                            
000137B0                            Sonic_Display:				; XREF: loc_12C7E
000137B0 3028 0030                  		move.w	$30(a0),d0
000137B4 6700                       		beq.s	Obj01_Display
000137B6 5368 0030                  		subq.w	#1,$30(a0)
000137BA E648                       		lsr.w	#3,d0
000137BC 6400                       		bcc.s	Obj01_ChkInvin
000137BE                            
000137BE                            Obj01_Display:
000137BE 4EBA A916                  		jsr	DisplaySprite
000137C2                            
000137C2                            ; Second part of the NineKode. Play different music on different acts - after invincibility wears off
000137C2                             
000137C2                            Obj01_ChkInvin:
000137C2 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
000137C6 6700 0000                  		beq.w	Obj01_ChkShoes	; if not, branch	; change to beq.w
000137CA 4A68 0032                  		tst.w	$32(a0)		; check	time remaining for invinciblity
000137CE 6700 0000                  		beq.w	Obj01_ChkShoes	; if no	time remains, branch	; change to beq.w
000137D2 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time
000137D6 6600 0000                  		bne.w	Obj01_ChkShoes	; change to bne.w
000137DA 4A38 F7AA                  		tst.b	($FFFFF7AA).w
000137DE 6600 0000                  		bne.w	Obj01_RmvInvin	; change to bne.w
000137E2 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w
000137E8 6500 0000                  		bcs.w	Obj01_RmvInvin	; change to bcs.w
000137EC 4A38 FE2E                  		tst.b ($FFFFFE2E).w ; does Sonic have speed shoes?
000137F0 6600                       		bne.s Obj01_ChkShoes	
000137F2 7000                       		moveq	#0,d0
000137F4 1038 FE10                  		move.b	($FFFFFE10).w,d0
000137F8                             
000137F8 0C38 0000 FE11             		cmpi.b	#$0,($FFFFFE11).w	; is this act 1?
000137FE 6600                       		bne.s	Obj01_GetBgm2	; if not, branch
00013800 43F9 0000 419A             		lea	(MusicList1).l,a1	; load Music Playlist for Acts 1
00013806 6000                       		bra.s	Obj01_PlayMusic	; go to PlayMusic
00013808                             
00013808                            Obj01_GetBgm2:
00013808 0C38 0001 FE11             		cmpi.b	#$1,($FFFFFE11).w	; is this act 2?
0001380E 6600                       		bne.s	Obj01_GetBgm3	; if not, branch
00013810 43F9 0000 41A0             		lea	(MusicList2).l,a1	; load Music Playlist for Acts 2
00013816 6000                       		bra.s	Obj01_PlayMusic	; go to PlayMusic
00013818                             
00013818                            Obj01_GetBgm3:
00013818 0C38 0002 FE11             		cmpi.b	#$2,($FFFFFE11).w	; is this act 3?
0001381E 6600                       		bne.s	Obj01_GetBgm4	; if not, branch
00013820 43F9 0000 41A6             		lea	(MusicList3).l,a1	; load Music Playlist for Acts 3
00013826 6000                       		bra.s	Obj01_PlayMusic	; go to PlayMusic
00013828                             
00013828                            Obj01_GetBgm4:
00013828 0C38 0003 FE11             		cmpi.b	#$3,($FFFFFE11).w	; is this act 4?
0001382E 6600                       		bne.s	Obj01_PlayMusic	; if not, branch
00013830 43F9 0000 41AC             		lea	(MusicList4).l,a1	; load Music Playlist for Acts 4
00013836                             
00013836                            Obj01_PlayMusic:
00013836 1031 0000                  		move.b	(a1,d0.w),d0
0001383A 4EB9 0000 1476             		jsr	(PlaySound).l	; play normal music
00013840                             
00013840                            ; NineKode ends here.
00013840                            
00013840                            
00013840                            Obj01_RmvInvin:
00013840 11FC 0000 FE2D             		move.b	#0,($FFFFFE2D).w ; cancel invincibility
00013846                            
00013846                            Obj01_ChkShoes:
00013846 4A38 FE2E                  		tst.b	($FFFFFE2E).w	; does Sonic have speed	shoes?
0001384A 6700                       		beq.s	Obj01_ExitChk	; if not, branch
0001384C 4A68 0034                  		tst.w	$34(a0)		; check	time remaining
00013850 6700                       		beq.s	Obj01_ExitChk
00013852 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from time
00013856 6600                       		bne.s	Obj01_ExitChk
00013858 31FC 0600 F760             		move.w	#$600,($FFFFF760).w ; restore Sonic's speed
0001385E 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; restore Sonic's acceleration
00013864 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; restore Sonic's deceleration
0001386A 11FC 0000 FE2E             		move.b	#0,($FFFFFE2E).w ; cancel speed	shoes
00013870 4A38 FE2D                  		tst.b ($FFFFFE2D).w ; does Sonic have invincibility?
00013874 6600                       		bne.s Obj01_ExitChk
00013876                            
00013876 7000                       		moveq #0,d0
00013878 1038 FE10                  		move.b ($FFFFFE10).w,d0
0001387C 0C78 0103 FE10             		cmpi.w #$103,($FFFFFE10).w ; check if level is SBZ3
00013882 6600                       		bne.s playthemusic
00013884 7009                       		moveq #9,d0 ; play SBZ music
00013886                            playthemusic:
00013886 43F9 0000 41A0             		lea (MusicList2).l,a1 ; load music playlist
0001388C 1031 0000                  		move.b (a1,d0.w),d0 ; add d0 to a1
00013890 4EB9 0000 1476             		jsr (PlaySound).l ; play normal music
00013896                            ; ===========================================================================
00013896                            
00013896                            Obj01_ExitChk:
00013896 4E75                       		rts	
00013898                            
00013898                            ; ---------------------------------------------------------------------------
00013898                            ; Subroutine to	record Sonic's previous positions for invincibility stars
00013898                            ; ---------------------------------------------------------------------------
00013898                            
00013898                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013898                            
00013898                            
00013898                            Sonic_RecordPos:			; XREF: loc_12C7E; Obj01_Hurt; Obj01_Death
00013898 3038 F7A8                  		move.w	($FFFFF7A8).w,d0
0001389C 43F8 CB00                  		lea	($FFFFCB00).w,a1
000138A0 43F1 0000                  		lea	(a1,d0.w),a1
000138A4 32E8 0008                  		move.w	8(a0),(a1)+
000138A8 32E8 000C                  		move.w	$C(a0),(a1)+
000138AC 5838 F7A9                  		addq.b	#4,($FFFFF7A9).w
000138B0 4E75                       		rts	
000138B2                            ; End of function Sonic_RecordPos
000138B2                            
000138B2                            ; ---------------------------------------------------------------------------
000138B2                            ; Subroutine for Sonic when he's underwater
000138B2                            ; ---------------------------------------------------------------------------
000138B2                            
000138B2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000138B2                            
000138B2                            
000138B2                            Sonic_Water:				; XREF: loc_12C7E
000138B2 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
000138B8 6700                       		beq.s	Obj01_InWater	; if yes, branch
000138BA                            
000138BA                            locret_12D80:
000138BA 4E75                       		rts	
000138BC                            ; ===========================================================================
000138BC                            
000138BC                            Obj01_InWater:
000138BC 3038 F646                  		move.w	($FFFFF646).w,d0
000138C0 B068 000C                  		cmp.w	$C(a0),d0	; is Sonic above the water?
000138C4 6C00                       		bge.s	Obj01_OutWater	; if yes, branch
000138C6 08E8 0006 0022             		bset	#6,$22(a0)
000138CC 66EC                       		bne.s	locret_12D80
000138CE 6100 0000                  		bsr.w	ResumeMusic
000138D2 11FC 000A D340             		move.b	#$A,($FFFFD340).w ; load bubbles object	from Sonic's mouth
000138D8 11FC 0081 D368             		move.b	#$81,($FFFFD368).w
000138DE 31FC 0300 F760             		move.w	#$300,($FFFFF760).w ; change Sonic's top speed
000138E4 31FC 0006 F762             		move.w	#6,($FFFFF762).w ; change Sonic's acceleration
000138EA 31FC 0040 F764             		move.w	#$40,($FFFFF764).w ; change Sonic's deceleration
000138F0 4A38 FE19                  	tst.b	(Super_Sonic_flag).w	; Is Sonic Super?
000138F4 6700                       	beq.s	@Skip			; If not branch
000138F6 31FC 0500 F760             	move.w	#$500,(Sonic_top_speed).w
000138FC 31FC 0018 F762             	move.w	#$18,(Sonic_acceleration).w
00013902 31FC 0080 F764             	move.w	#$80,(Sonic_deceleration).w
00013908                            @Skip:		
00013908 E0E8 0010                  		asr	$10(a0)
0001390C E0E8 0012                  		asr	$12(a0)
00013910 E0E8 0012                  		asr	$12(a0)
00013914 67A4                       		beq.s	locret_12D80
00013916 11FC 0008 D300             		move.b	#8,($FFFFD300).w ; load	splash object
0001391C 303C 00AA                  		move.w	#$AA,d0
00013920 4EF9 0000 147C             		jmp	(PlaySound_Special).l ;	play splash sound
00013926                            ; ===========================================================================
00013926                            
00013926                            Obj01_OutWater:
00013926 08A8 0006 0022             		bclr	#6,$22(a0)
0001392C 678C                       		beq.s	locret_12D80
0001392E 6100 0000                  		bsr.w	ResumeMusic
00013932 31FC 0600 F760             		move.w	#$600,($FFFFF760).w ; restore Sonic's speed
00013938 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; restore Sonic's acceleration
0001393E 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; restore Sonic's deceleration
00013944 4A38 FE19                  	tst.b	(Super_Sonic_flag).w	; Is Sonic Super?
00013948 6700                       	beq.s	@Skip2			; If not branch
0001394A 31FC 0A00 F760             	move.w	#$A00,(Sonic_top_speed).w
00013950 31FC 0030 F762             	move.w	#$30,(Sonic_acceleration).w
00013956 31FC 0100 F764             	move.w	#$100,(Sonic_deceleration).w
0001395C                            @Skip2
0001395C E1E8 0012                  		asl	$12(a0)
00013960 4A68 0012                  		tst.w   $12(a0)
00013964 6700 FF54                  		beq.w	locret_12D80
00013968 11FC 0008 D300             		move.b	#8,($FFFFD300).w ; load	splash object
0001396E 0C68 F000 0012             		cmpi.w	#-$1000,$12(a0)
00013974 6E00                       		bgt.s	loc_12E0E
00013976 317C F000 0012             		move.w	#-$1000,$12(a0)	; set maximum speed on leaving water
0001397C                            
0001397C                            loc_12E0E:
0001397C 303C 00AA                  		move.w	#$AA,d0
00013980 4EF9 0000 147C             		jmp	(PlaySound_Special).l ;	play splash sound
00013986                            ; End of function Sonic_Water
00013986                            
00013986                            ; ===========================================================================
00013986                            ; ---------------------------------------------------------------------------
00013986                            ; Modes	for controlling	Sonic
00013986                            ; ---------------------------------------------------------------------------
00013986                            
00013986                            Obj01_MdNormal:				; XREF: Obj01_Modes
00013986 6100 0000                  		bsr.w	Sonic_SpinDash
0001398A 6100 0000                  		bsr.w	Sonic_Jump
0001398E 6100 0000                  		bsr.w	Sonic_SlopeResist
00013992 6100 0000                  		bsr.w	Sonic_Move
00013996 6100 0000                  		bsr.w	Sonic_Roll
0001399A 6100 0000                  		bsr.w	Sonic_Super
0001399E 6100 0000                  		bsr.w	Sonic_LevelBound
000139A2 4EBA A70C                  		jsr	SpeedToPos
000139A6 6100 0000                  		bsr.w	Sonic_AnglePos
000139AA 6100 0000                  		bsr.w	Sonic_SlopeRepel
000139AE 4E75                       		rts	
000139B0                            ; ===========================================================================
000139B0                            
000139B0                            Obj01_MdJump:				; XREF: Obj01_Modes
000139B0 4228 0039                  		clr.b	$39(a0)
000139B4 6100 0000                  		bsr.w	Sonic_JumpHeight
000139B8 6100 0000                  		bsr.w	Sonic_ChgJumpDir
000139BC 6100 0000                  		bsr.w	Sonic_LevelBound
000139C0 4EBA A6C2                  		jsr	ObjectFall
000139C4 0828 0006 0022             		btst	#6,$22(a0)
000139CA 6700                       		beq.s	loc_12E5C
000139CC 0468 0028 0012             		subi.w	#$28,$12(a0)
000139D2                            
000139D2                            loc_12E5C:
000139D2 6100 0000                  		bsr.w	Sonic_JumpAngle
000139D6 6100 0000                  		bsr.w	Sonic_Floor
000139DA 4E75                       		rts	
000139DC                            ; ===========================================================================
000139DC                            
000139DC                            Obj01_MdRoll:				; XREF: Obj01_Modes
000139DC 6100 0000                  		bsr.w	Sonic_Jump
000139E0 6100 0000                  		bsr.w	Sonic_RollRepel
000139E4 6100 0000                  		bsr.w	Sonic_RollSpeed
000139E8 6100 0000                  		bsr.w	Sonic_LevelBound
000139EC 4EBA A6C2                  		jsr	SpeedToPos
000139F0 6100 0000                  		bsr.w	Sonic_AnglePos
000139F4 6100 0000                  		bsr.w	Sonic_SlopeRepel
000139F8 4E75                       		rts	
000139FA                            ; ===========================================================================
000139FA                            
000139FA                            Obj01_MdJump2:				; XREF: Obj01_Modes
000139FA 4228 0039                  		clr.b	$39(a0)
000139FE 6100 0000                  		bsr.w	Sonic_JumpHeight
00013A02 6100 0000                  		bsr.w	Sonic_ChgJumpDir
00013A06 6100 0000                  		bsr.w	Sonic_LevelBound
00013A0A 4EBA A678                  		jsr	ObjectFall
00013A0E 0828 0006 0022             		btst	#6,$22(a0)
00013A14 6700                       		beq.s	loc_12EA6
00013A16 0468 0028 0012             		subi.w	#$28,$12(a0)
00013A1C                            
00013A1C                            loc_12EA6:
00013A1C 6100 0000                  		bsr.w	Sonic_JumpAngle
00013A20 6100 0000                  		bsr.w	Sonic_Floor
00013A24 4E75                       		rts	
00013A26                            ; ---------------------------------------------------------------------------
00013A26                            ; Subroutine to	make Sonic walk/run
00013A26                            ; ---------------------------------------------------------------------------
00013A26                            
00013A26                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013A26                            
00013A26                            
00013A26                            Sonic_Move:				; XREF: Obj01_MdNormal
00013A26 3C38 F760                  		move.w	($FFFFF760).w,d6
00013A2A 3A38 F762                  		move.w	($FFFFF762).w,d5
00013A2E 3838 F764                  		move.w	($FFFFF764).w,d4
00013A32 4A38 F7CA                  		tst.b	($FFFFF7CA).w
00013A36 6600 0000                  		bne.w	loc_12FEE
00013A3A 4A68 003E                  		tst.w	$3E(a0)
00013A3E 6600 0000                  		bne.w	Obj01_ResetScr
00013A42 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
00013A48 6700                       		beq.s	Obj01_NotLeft	; if not, branch
00013A4A 6100 0000                  		bsr.w	Sonic_MoveLeft
00013A4E                            
00013A4E                            Obj01_NotLeft:
00013A4E 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
00013A54 6700                       		beq.s	Obj01_NotRight	; if not, branch
00013A56 6100 0000                  		bsr.w	Sonic_MoveRight
00013A5A                            
00013A5A                            Obj01_NotRight:
00013A5A 1028 0026                  		move.b	$26(a0),d0
00013A5E 0600 0020                  		addi.b	#$20,d0
00013A62 0200 00C0                  		andi.b	#$C0,d0		; is Sonic on a	slope?
00013A66 6600 0000                  		bne.w	Obj01_ResetScr	; if yes, branch
00013A6A 4A68 0014                  		tst.w	$14(a0)		; is Sonic moving?
00013A6E 6600 0000                  		bne.w	Obj01_ResetScr	; if yes, branch
00013A72 08A8 0005 0022             		bclr	#5,$22(a0)
00013A78 117C 0005 001C             		move.b	#5,$1C(a0)	; use "standing" animation
00013A7E 0828 0003 0022             		btst	#3,$22(a0)
00013A84 6700                       		beq.s	Sonic_Balance
00013A86 7000                       		moveq	#0,d0
00013A88 1028 003D                  		move.b	$3D(a0),d0
00013A8C ED48                       		lsl.w	#6,d0
00013A8E 43F8 D000                  		lea	($FFFFD000).w,a1
00013A92 43F1 0000                  		lea	(a1,d0.w),a1
00013A96 4A29 0022                  		tst.b	$22(a1)
00013A9A 6B00                       		bmi.s	Sonic_LookUp
00013A9C 7200                       		moveq	#0,d1
00013A9E 1229 0019                  		move.b	$19(a1),d1
00013AA2 3401                       		move.w	d1,d2
00013AA4 D442                       		add.w	d2,d2
00013AA6 5942                       		subq.w	#4,d2
00013AA8 D268 0008                  		add.w	8(a0),d1
00013AAC 9269 0008                  		sub.w	8(a1),d1
00013AB0 0C41 0004                  		cmpi.w	#4,d1
00013AB4 6D00                       		blt.s	loc_12F6A
00013AB6 B242                       		cmp.w	d2,d1
00013AB8 6C00                       		bge.s	loc_12F5A
00013ABA 6000                       		bra.s	Sonic_LookUp
00013ABC                            ; ===========================================================================
00013ABC                            
00013ABC                            Sonic_Balance:
00013ABC 4EB9 0000 0000             		jsr	ObjHitFloor
00013AC2 0C41 000C                  		cmpi.w	#$C,d1
00013AC6 6D00                       		blt.s	Sonic_LookUp
00013AC8 0C28 0003 0036             		cmpi.b	#3,$36(a0)
00013ACE 6600                       		bne.s	loc_12F62
00013AD0                            
00013AD0                            loc_12F5A:
00013AD0 08A8 0000 0022             		bclr	#0,$22(a0)
00013AD6 6000                       		bra.s	loc_12F70
00013AD8                            ; ===========================================================================
00013AD8                            
00013AD8                            loc_12F62:
00013AD8 0C28 0003 0037             		cmpi.b	#3,$37(a0)
00013ADE 6600                       		bne.s	Sonic_LookUp
00013AE0                            
00013AE0                            loc_12F6A:
00013AE0 08E8 0000 0022             		bset	#0,$22(a0)
00013AE6                            
00013AE6                            loc_12F70:
00013AE6 117C 0006 001C             		move.b	#6,$1C(a0)	; use "balancing" animation
00013AEC 6000                       		bra.s	Obj01_ResetScr
00013AEE                            ; ===========================================================================
00013AEE                            
00013AEE                            Sonic_LookUp:
00013AEE 0838 0000 F602             		btst	#0,($FFFFF602).w ; is up being pressed?
00013AF4 6700                       		beq.s	Sonic_Duck	; if not, branch
00013AF6 117C 0007 001C             		move.b	#7,$1C(a0)	; use "looking up" animation
00013AFC 5238 C903                  		addq.b	#1,($FFFFC903).w
00013B00 0C38 0078 C903             		cmp.b	#$78,($FFFFC903).w
00013B06 6500                       		bcs.s	Obj01_ResetScr_Part2
00013B08 11FC 0078 C903             		move.b	#$78,($FFFFC903).w
00013B0E 0C78 00C8 F73E             		cmpi.w	#$C8,($FFFFF73E).w
00013B14 6700                       		beq.s	loc_12FC2
00013B16 5478 F73E                  		addq.w	#2,($FFFFF73E).w
00013B1A 6000                       		bra.s	loc_12FC2
00013B1C                            ; ===========================================================================
00013B1C                            
00013B1C                            Sonic_Duck:
00013B1C 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
00013B22 6700                       		beq.s	Obj01_ResetScr	; if not, branch
00013B24 117C 0008 001C             		move.b	#8,$1C(a0)	; use "ducking"	animation
00013B2A 5238 C903                  		addq.b	#1,($FFFFC903).w
00013B2E 0C38 0078 C903             		cmpi.b	#$78,($FFFFC903).w
00013B34 6500                       		bcs.s	Obj01_ResetScr_Part2
00013B36 11FC 0078 C903             		move.b	#$78,($FFFFC903).w
00013B3C 0C78 0008 F73E             		cmpi.w	#8,($FFFFF73E).w
00013B42 6700                       		beq.s	loc_12FC2
00013B44 5578 F73E                  		subq.w	#2,($FFFFF73E).w
00013B48 6000                       		bra.s	loc_12FC2
00013B4A                            ; ===========================================================================
00013B4A                            
00013B4A                            Obj01_ResetScr:
00013B4A 11FC 0000 C903             		move.b	#0,($FFFFC903).w
00013B50                            		
00013B50                            Obj01_ResetScr_Part2:
00013B50 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w ; is	screen in its default position?
00013B56 6700                       		beq.s	loc_12FC2	; if yes, branch
00013B58 6400                       		bcc.s	loc_12FBE
00013B5A 5878 F73E                  		addq.w	#4,($FFFFF73E).w ; move	screen back to default
00013B5E                            
00013B5E                            loc_12FBE:
00013B5E 5578 F73E                  		subq.w	#2,($FFFFF73E).w ; move	screen back to default
00013B62                            
00013B62                            
00013B62                            loc_12FC2:
00013B62 1038 F602                  		move.b	($FFFFF602).w,d0
00013B66 0200 000C                  		andi.b	#$C,d0		; is left/right	pressed?
00013B6A 6600                       		bne.s	loc_12FEE	; if yes, branch
00013B6C 3028 0014                  		move.w	$14(a0),d0
00013B70 6700                       		beq.s	loc_12FEE
00013B72 6B00                       		bmi.s	loc_12FE2
00013B74 9045                       		sub.w	d5,d0
00013B76 6400                       		bcc.s	loc_12FDC
00013B78 303C 0000                  		move.w	#0,d0
00013B7C                            
00013B7C                            loc_12FDC:
00013B7C 3140 0014                  		move.w	d0,$14(a0)
00013B80 6000                       		bra.s	loc_12FEE
00013B82                            ; ===========================================================================
00013B82                            
00013B82                            loc_12FE2:
00013B82 D045                       		add.w	d5,d0
00013B84 6400                       		bcc.s	loc_12FEA
00013B86 303C 0000                  		move.w	#0,d0
00013B8A                            
00013B8A                            loc_12FEA:
00013B8A 3140 0014                  		move.w	d0,$14(a0)
00013B8E                            
00013B8E                            loc_12FEE:
00013B8E 1028 0026                  		move.b	$26(a0),d0
00013B92 4EB9 0000 33DA             		jsr	(CalcSine).l
00013B98 C3E8 0014                  		muls.w	$14(a0),d1
00013B9C E081                       		asr.l	#8,d1
00013B9E 3141 0010                  		move.w	d1,$10(a0)
00013BA2 C1E8 0014                  		muls.w	$14(a0),d0
00013BA6 E080                       		asr.l	#8,d0
00013BA8 3140 0012                  		move.w	d0,$12(a0)
00013BAC                            
00013BAC                            loc_1300C:
00013BAC 1028 0026                  		move.b	$26(a0),d0
00013BB0 0600 0040                  		addi.b	#$40,d0
00013BB4 6B00                       		bmi.s	locret_1307C
00013BB6 123C 0040                  		move.b	#$40,d1
00013BBA 4A68 0014                  		tst.w	$14(a0)
00013BBE 6700                       		beq.s	locret_1307C
00013BC0 6B00                       		bmi.s	loc_13024
00013BC2 4441                       		neg.w	d1
00013BC4                            
00013BC4                            loc_13024:
00013BC4 1028 0026                  		move.b	$26(a0),d0
00013BC8 D001                       		add.b	d1,d0
00013BCA 3F00                       		move.w	d0,-(sp)
00013BCC 6100 0000                  		bsr.w	Sonic_WalkSpeed
00013BD0 301F                       		move.w	(sp)+,d0
00013BD2 4A41                       		tst.w	d1
00013BD4 6A00                       		bpl.s	locret_1307C
00013BD6 E141                       		asl.w	#8,d1
00013BD8 0600 0020                  		addi.b	#$20,d0
00013BDC 0200 00C0                  		andi.b	#$C0,d0
00013BE0 6700                       		beq.s	loc_13078
00013BE2 0C00 0040                  		cmpi.b	#$40,d0
00013BE6 6700                       		beq.s	loc_13066
00013BE8 0C00 0080                  		cmpi.b	#$80,d0
00013BEC 6700                       		beq.s	loc_13060
00013BEE D368 0010                  		add.w	d1,$10(a0)
00013BF2 08E8 0005 0022             		bset	#5,$22(a0)
00013BF8 317C 0000 0014             		move.w	#0,$14(a0)
00013BFE 4E75                       		rts	
00013C00                            ; ===========================================================================
00013C00                            
00013C00                            loc_13060:
00013C00 9368 0012                  		sub.w	d1,$12(a0)
00013C04 4E75                       		rts	
00013C06                            ; ===========================================================================
00013C06                            
00013C06                            loc_13066:
00013C06 9368 0010                  		sub.w	d1,$10(a0)
00013C0A 08E8 0005 0022             		bset	#5,$22(a0)
00013C10 317C 0000 0014             		move.w	#0,$14(a0)
00013C16 4E75                       		rts	
00013C18                            ; ===========================================================================
00013C18                            
00013C18                            loc_13078:
00013C18 D368 0012                  		add.w	d1,$12(a0)
00013C1C                            
00013C1C                            locret_1307C:
00013C1C 4E75                       		rts	
00013C1E                            ; End of function Sonic_Move
00013C1E                            
00013C1E                            
00013C1E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013C1E                            
00013C1E                            
00013C1E                            Sonic_MoveLeft:		   ; XREF: Sonic_Move
00013C1E 3028 0014                  		move.w	$14(a0),d0
00013C22 6700                       		beq.s	loc_13086
00013C24 6A00                       		bpl.s	loc_130B2
00013C26                            
00013C26                            loc_13086:
00013C26 08E8 0000 0022             		bset	#0,$22(a0)
00013C2C 6600                       		bne.s	loc_1309A
00013C2E 08A8 0005 0022             		bclr	#5,$22(a0)
00013C34 117C 0001 001D             		move.b	#1,$1D(a0)
00013C3A                            
00013C3A                            loc_1309A:
00013C3A 9045                       		sub.w	d5,d0
00013C3C 3206                       		move.w	d6,d1
00013C3E 4441                       		neg.w	d1
00013C40 B041                       		cmp.w	d1,d0
00013C42 6E00                       		bgt.s	loc_130A6
00013C44 D045                       		add.w	d5,d0
00013C46 B041                       		cmp.w	d1,d0
00013C48 6F00                       		ble.s	loc_130A6
00013C4A 3001                       		move.w	d1,d0
00013C4C                            
00013C4C                            loc_130A6:
00013C4C 3140 0014                  		move.w	d0,$14(a0)
00013C50 117C 0000 001C             		move.b	#0,$1C(a0); use walking animation
00013C56 4E75                       		rts
00013C58                            
00013C58                            ; ===========================================================================
00013C58                            
00013C58                            loc_130B2:				; XREF: Sonic_MoveLeft
00013C58 9044                       		sub.w	d4,d0
00013C5A 6400                       		bcc.s	loc_130BA
00013C5C 303C FF80                  		move.w	#-$80,d0
00013C60                            
00013C60                            loc_130BA:
00013C60 3140 0014                  		move.w	d0,$14(a0)
00013C64 1028 0026                  		move.b	$26(a0),d0
00013C68 0600 0020                  		addi.b	#$20,d0
00013C6C 0200 00C0                  		andi.b	#$C0,d0
00013C70 6600                       		bne.s	locret_130E8
00013C72 0C40 0400                  		cmpi.w	#$400,d0
00013C76 6D00                       		blt.s	locret_130E8
00013C78 117C 000D 001C             		move.b	#$D,$1C(a0)	; use "stopping" animation
00013C7E 08A8 0000 0022             		bclr	#0,$22(a0)
00013C84 303C 00A4                  		move.w	#$A4,d0
00013C88 4EB9 0000 147C             		jsr	(PlaySound_Special).l ;	play stopping sound
00013C8E                            
00013C8E                            locret_130E8:
00013C8E 4E75                       		rts	
00013C90                            ; End of function Sonic_MoveLeft
00013C90                            
00013C90                            
00013C90                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013C90                            
00013C90                            
00013C90                            Sonic_MoveRight:	   ; XREF: Sonic_Move
00013C90 3028 0014                  		move.w	$14(a0),d0
00013C94 6B00                       		bmi.s	loc_13118
00013C96 08A8 0000 0022             		bclr	#0,$22(a0)
00013C9C 6700                       		beq.s	loc_13104
00013C9E 08A8 0005 0022             		bclr	#5,$22(a0)
00013CA4 117C 0001 001D             		move.b	#1,$1D(a0)
00013CAA                            
00013CAA                            loc_13104:
00013CAA D045                       		add.w	d5,d0
00013CAC B046                       		cmp.w	d6,d0
00013CAE 6D00                       		blt.s	loc_1310C
00013CB0 9045                       		sub.w	d5,d0
00013CB2 B046                       		cmp.w	d6,d0
00013CB4 6C00                       		bge.s	loc_1310C
00013CB6 3006                       		move.w	d6,d0
00013CB8                            
00013CB8                            loc_1310C:
00013CB8 3140 0014                  		move.w	d0,$14(a0)
00013CBC 117C 0000 001C             		move.b	#0,$1C(a0); use walking animation
00013CC2 4E75                       		rts
00013CC4                            
00013CC4                            ; ===========================================================================
00013CC4                            
00013CC4                            loc_13118:				; XREF: Sonic_MoveRight
00013CC4 D044                       		add.w	d4,d0
00013CC6 6400                       		bcc.s	loc_13120
00013CC8 303C 0080                  		move.w	#$80,d0
00013CCC                            
00013CCC                            loc_13120:
00013CCC 3140 0014                  		move.w	d0,$14(a0)
00013CD0 1028 0026                  		move.b	$26(a0),d0
00013CD4 0600 0020                  		addi.b	#$20,d0
00013CD8 0200 00C0                  		andi.b	#$C0,d0
00013CDC 6600                       		bne.s	locret_1314E
00013CDE 0C40 FC00                  		cmpi.w	#-$400,d0
00013CE2 6E00                       		bgt.s	locret_1314E
00013CE4 117C 000D 001C             		move.b	#$D,$1C(a0)	; use "stopping" animation
00013CEA 08E8 0000 0022             		bset	#0,$22(a0)
00013CF0 303C 00A4                  		move.w	#$A4,d0
00013CF4 4EB9 0000 147C             		jsr	(PlaySound_Special).l ;	play stopping sound
00013CFA                            
00013CFA                            locret_1314E:
00013CFA 4E75                       		rts	
00013CFC                            ; End of function Sonic_MoveRight
00013CFC                            
00013CFC                            ; ---------------------------------------------------------------------------
00013CFC                            ; Subroutine to	change Sonic's speed as he rolls
00013CFC                            ; ---------------------------------------------------------------------------
00013CFC                            
00013CFC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013CFC                            
00013CFC                            
00013CFC                            Sonic_RollSpeed:			; XREF: Obj01_MdRoll
00013CFC 3C38 F760                  		move.w	($FFFFF760).w,d6
00013D00 E346                       		asl.w	#1,d6
00013D02 3A38 F762                  		move.w	($FFFFF762).w,d5
00013D06 E245                       		asr.w	#1,d5
00013D08 3838 F764                  		move.w	($FFFFF764).w,d4
00013D0C E444                       		asr.w	#2,d4
00013D0E 4A38 F7CA                  		tst.b	($FFFFF7CA).w
00013D12 6600 0000                  		bne.w	loc_131CC
00013D16 4A68 003E                  		tst.w	$3E(a0)
00013D1A 6600                       		bne.s	loc_13188
00013D1C 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
00013D22 6700                       		beq.s	loc_1317C	; if not, branch
00013D24 6100 0000                  		bsr.w	Sonic_RollLeft
00013D28                            
00013D28                            loc_1317C:
00013D28 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
00013D2E 6700                       		beq.s	loc_13188	; if not, branch
00013D30 6100 0000                  		bsr.w	Sonic_RollRight
00013D34                            
00013D34                            loc_13188:
00013D34 3028 0014                  		move.w	$14(a0),d0
00013D38 6700                       		beq.s	loc_131AA
00013D3A 6B00                       		bmi.s	loc_1319E
00013D3C 9045                       		sub.w	d5,d0
00013D3E 6400                       		bcc.s	loc_13198
00013D40 303C 0000                  		move.w	#0,d0
00013D44                            
00013D44                            loc_13198:
00013D44 3140 0014                  		move.w	d0,$14(a0)
00013D48 6000                       		bra.s	loc_131AA
00013D4A                            ; ===========================================================================
00013D4A                            
00013D4A                            loc_1319E:				; XREF: Sonic_RollSpeed
00013D4A D045                       		add.w	d5,d0
00013D4C 6400                       		bcc.s	loc_131A6
00013D4E 303C 0000                  		move.w	#0,d0
00013D52                            
00013D52                            loc_131A6:
00013D52 3140 0014                  		move.w	d0,$14(a0)
00013D56                            
00013D56                            loc_131AA:
00013D56 4A68 0014                  		tst.w	$14(a0)		; is Sonic moving?
00013D5A 6600                       		bne.s	loc_131CC	; if yes, branch
00013D5C 08A8 0002 0022             		bclr	#2,$22(a0)
00013D62 117C 0013 0016             		move.b	#$13,$16(a0)
00013D68 117C 0009 0017             		move.b	#9,$17(a0)
00013D6E 117C 0005 001C             		move.b	#5,$1C(a0)	; use "standing" animation
00013D74 5B68 000C                  		subq.w	#5,$C(a0)
00013D78                            
00013D78                            loc_131CC:
00013D78 0C78 0060 F73E             		cmp.w	#$60,($FFFFF73E).w
00013D7E 6700                       		beq.s	@cont2
00013D80 6400                       		bcc.s	@cont1
00013D82 5878 F73E                  		addq.w	#4,($FFFFF73E).w
00013D86                            		
00013D86                            @cont1:
00013D86 5578 F73E                  		subq.w	#2,($FFFFF73E).w
00013D8A                            		
00013D8A                            @cont2:
00013D8A 1028 0026                  		move.b	$26(a0),d0
00013D8E 4EB9 0000 33DA             		jsr	(CalcSine).l
00013D94 C1E8 0014                  		muls.w	$14(a0),d0
00013D98 E080                       		asr.l	#8,d0
00013D9A 3140 0012                  		move.w	d0,$12(a0)
00013D9E C3E8 0014                  		muls.w	$14(a0),d1
00013DA2 E081                       		asr.l	#8,d1
00013DA4 0C41 1000                  		cmpi.w	#$1000,d1
00013DA8 6F00                       		ble.s	loc_131F0
00013DAA 323C 1000                  		move.w	#$1000,d1
00013DAE                            
00013DAE                            loc_131F0:
00013DAE 0C41 F000                  		cmpi.w	#-$1000,d1
00013DB2 6C00                       		bge.s	loc_131FA
00013DB4 323C F000                  		move.w	#-$1000,d1
00013DB8                            
00013DB8                            loc_131FA:
00013DB8 3141 0010                  		move.w	d1,$10(a0)
00013DBC 6000 FDEE                  		bra.w	loc_1300C
00013DC0                            ; End of function Sonic_RollSpeed
00013DC0                            
00013DC0                            
00013DC0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013DC0                            
00013DC0                            
00013DC0                            Sonic_RollLeft:				; XREF: Sonic_RollSpeed
00013DC0 3028 0014                  		move.w	$14(a0),d0
00013DC4 6700                       		beq.s	loc_1320A
00013DC6 6A00                       		bpl.s	loc_13218
00013DC8                            
00013DC8                            loc_1320A:
00013DC8 08E8 0000 0022             		bset	#0,$22(a0)
00013DCE 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
00013DD4 4E75                       		rts	
00013DD6                            ; ===========================================================================
00013DD6                            
00013DD6                            loc_13218:
00013DD6 9044                       		sub.w	d4,d0
00013DD8 6400                       		bcc.s	loc_13220
00013DDA 303C FF80                  		move.w	#-$80,d0
00013DDE                            
00013DDE                            loc_13220:
00013DDE 3140 0014                  		move.w	d0,$14(a0)
00013DE2 4E75                       		rts	
00013DE4                            ; End of function Sonic_RollLeft
00013DE4                            
00013DE4                            
00013DE4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013DE4                            
00013DE4                            
00013DE4                            Sonic_RollRight:			; XREF: Sonic_RollSpeed
00013DE4 3028 0014                  		move.w	$14(a0),d0
00013DE8 6B00                       		bmi.s	loc_1323A
00013DEA 08A8 0000 0022             		bclr	#0,$22(a0)
00013DF0 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
00013DF6 4E75                       		rts	
00013DF8                            ; ===========================================================================
00013DF8                            
00013DF8                            loc_1323A:
00013DF8 D044                       		add.w	d4,d0
00013DFA 6400                       		bcc.s	loc_13242
00013DFC 303C 0080                  		move.w	#$80,d0
00013E00                            
00013E00                            loc_13242:
00013E00 3140 0014                  		move.w	d0,$14(a0)
00013E04 4E75                       		rts	
00013E06                            ; End of function Sonic_RollRight
00013E06                            
00013E06                            ; ---------------------------------------------------------------------------
00013E06                            ; Subroutine to	change Sonic's direction while jumping
00013E06                            ; ---------------------------------------------------------------------------
00013E06                            
00013E06                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013E06                            
00013E06                            
00013E06                            Sonic_ChgJumpDir:		; XREF: Obj01_MdJump; Obj01_MdJump2
00013E06 3C38 F760                  		move.w	($FFFFF760).w,d6
00013E0A 3A38 F762                  		move.w	($FFFFF762).w,d5
00013E0E E345                       		asl.w	#1,d5
00013E10 0828 0004 0022             		btst	#4,$22(a0)	
00013E16 6600                       		bne.s	Obj01_ResetScr2	
00013E18 3028 0010                  		move.w	$10(a0),d0	
00013E1C 0838 0002 F602             		btst	#2,($FFFFF602).w; is left being pressed?	
00013E22 6700                       		beq.s	loc_13278; if not, branch	
00013E24 08E8 0000 0022             		bset	#0,$22(a0)	
00013E2A 9045                       		sub.w	d5,d0	
00013E2C 3206                       		move.w	d6,d1	
00013E2E 4441                       		neg.w	d1	
00013E30 B041                       		cmp.w	d1,d0	
00013E32 6E00                       		bgt.s	loc_13278	
00013E34 D045                       		add.w	d5,d0		; +++ remove this frame's acceleration change
00013E36 B041                       		cmp.w	d1,d0		; +++ compare speed with top speed
00013E38 6F00                       		ble.s	loc_13278	; +++ if speed was already greater than the maximum, branch	
00013E3A 3001                       		move.w	d1,d0
00013E3C                            
00013E3C                            loc_13278:
00013E3C 0838 0003 F602             		btst	#3,($FFFFF602).w; is right being pressed?	
00013E42 6700                       		beq.s	Obj01_JumpMove; if not, branch	
00013E44 08A8 0000 0022             		bclr	#0,$22(a0)	
00013E4A D045                       		add.w	d5,d0	
00013E4C B046                       		cmp.w	d6,d0	
00013E4E 6D00                       		blt.s	Obj01_JumpMove
00013E50 9045                       		sub.w	d5,d0		; +++ remove this frame's acceleration change
00013E52 B046                       		cmp.w	d6,d0		; +++ compare speed with top speed
00013E54 6C00                       		bge.s	Obj01_JumpMove	; +++ if speed was already greater than the maximum, branch
00013E56 3006                       		move.w	d6,d0
00013E58                            
00013E58                            Obj01_JumpMove:
00013E58 3140 0010                  		move.w	d0,$10(a0)	; change Sonic's horizontal speed
00013E5C                            
00013E5C                            Obj01_ResetScr2:
00013E5C 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w ; is	the screen in its default position?
00013E62 6700                       		beq.s	loc_132A4	; if yes, branch
00013E64 6400                       		bcc.s	loc_132A0
00013E66 5878 F73E                  		addq.w	#4,($FFFFF73E).w
00013E6A                            
00013E6A                            loc_132A0:
00013E6A 5578 F73E                  		subq.w	#2,($FFFFF73E).w
00013E6E                            
00013E6E                            loc_132A4:
00013E6E 0C68 FC00 0012             		cmpi.w	#-$400,$12(a0)	; is Sonic moving faster than -$400 upwards?
00013E74 6500                       		bcs.s	locret_132D2	; if yes, branch
00013E76 3028 0010                  		move.w	$10(a0),d0
00013E7A 3200                       		move.w	d0,d1
00013E7C EA41                       		asr.w	#5,d1
00013E7E 6700                       		beq.s	locret_132D2
00013E80 6B00                       		bmi.s	loc_132C6
00013E82 9041                       		sub.w	d1,d0
00013E84 6400                       		bcc.s	loc_132C0
00013E86 303C 0000                  		move.w	#0,d0
00013E8A                            
00013E8A                            loc_132C0:
00013E8A 3140 0010                  		move.w	d0,$10(a0)
00013E8E 4E75                       		rts	
00013E90                            ; ===========================================================================
00013E90                            
00013E90                            loc_132C6:
00013E90 9041                       		sub.w	d1,d0
00013E92 6500                       		bcs.s	loc_132CE
00013E94 303C 0000                  		move.w	#0,d0
00013E98                            
00013E98                            loc_132CE:
00013E98 3140 0010                  		move.w	d0,$10(a0)
00013E9C                            
00013E9C                            locret_132D2:
00013E9C 4E75                       		rts	
00013E9E                            ; End of function Sonic_ChgJumpDir
00013E9E                            
00013E9E                            ; ===========================================================================
00013E9E                            ; ---------------------------------------------------------------------------
00013E9E                            ; Unused subroutine to squash Sonic
00013E9E                            ; ---------------------------------------------------------------------------
00013E9E 1028 0026                  		move.b	$26(a0),d0
00013EA2 0600 0020                  		addi.b	#$20,d0
00013EA6 0200 00C0                  		andi.b	#$C0,d0
00013EAA 6600                       		bne.s	locret_13302
00013EAC 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00013EB0 4A41                       		tst.w	d1
00013EB2 6A00                       		bpl.s	locret_13302
00013EB4 317C 0000 0014             		move.w	#0,$14(a0)	; stop Sonic moving
00013EBA 317C 0000 0010             		move.w	#0,$10(a0)
00013EC0 317C 0000 0012             		move.w	#0,$12(a0)
00013EC6 117C 000B 001C             		move.b	#$B,$1C(a0)	; use "warping"	animation
00013ECC                            
00013ECC                            locret_13302:
00013ECC 4E75                       		rts	
00013ECE                            ; ---------------------------------------------------------------------------
00013ECE                            ; Subroutine to	prevent	Sonic leaving the boundaries of	a level
00013ECE                            ; ---------------------------------------------------------------------------
00013ECE                            
00013ECE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013ECE                            
00013ECE                            
00013ECE                            Sonic_LevelBound:			; XREF: Obj01_MdNormal; et al
00013ECE 2228 0008                  		move.l	8(a0),d1
00013ED2 3028 0010                  		move.w	$10(a0),d0
00013ED6 48C0                       		ext.l	d0
00013ED8 E180                       		asl.l	#8,d0
00013EDA D280                       		add.l	d0,d1
00013EDC 4841                       		swap	d1
00013EDE 3038 F728                  		move.w	($FFFFF728).w,d0
00013EE2 0640 0010                  		addi.w	#$10,d0
00013EE6 B041                       		cmp.w	d1,d0		; has Sonic touched the	side boundary?
00013EE8 6200                       		bhi.s	Boundary_Sides	; if yes, branch
00013EEA 3038 F72A                  		move.w	($FFFFF72A).w,d0
00013EEE 0640 0128                  		addi.w	#$128,d0
00013EF2 4A38 F7AA                  		tst.b	($FFFFF7AA).w
00013EF6 6600                       		bne.s	loc_13332
00013EF8 0640 0040                  		addi.w	#$40,d0
00013EFC                            
00013EFC                            loc_13332:
00013EFC B041                       		cmp.w	d1,d0		; has Sonic touched the	side boundary?
00013EFE 6300                       		bls.s	Boundary_Sides	; if yes, branch
00013F00                            
00013F00                            loc_13336:
00013F00 3038 F72E                  		move.w	($FFFFF72E).w,d0
00013F04 0640 00E0                  		addi.w	#$E0,d0
00013F08 B068 000C                  		cmp.w	$C(a0),d0	; has Sonic touched the	bottom boundary?
00013F0C 6D00                       		blt.s	Boundary_Bottom	; if yes, branch
00013F0E 4E75                       		rts	
00013F10                            ; ===========================================================================
00013F10                            
00013F10                            Jmp_KillSonic:
00013F10 4EF9 0000 0000             	       jmp    KillSonic
00013F16                            
00013F16                            Boundary_Bottom:
00013F16 3038 F726                  		move.w	($FFFFF726).w,d0
00013F1A 3238 F72E                  		move.w	($FFFFF72E).w,d1
00013F1E B240                       		cmp.w	d0,d1			; screen still scrolling down?
00013F20 6D00                       		blt.s	Boundary_Bottom_locret	; if so, don't kill Sonic
00013F22 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w	; is level SBZ2 ?
00013F28 6600 FFE6                  		bne.w	Jmp_KillSonic		; if not, kill Sonic
00013F2C 0C78 2000 D008             		cmpi.w	#$2000,($FFFFD008).w
00013F32 6500 FFDC                  		bcs.w	Jmp_KillSonic
00013F36 4238 FE30                  		clr.b	($FFFFFE30).w		; clear lamppost counter
00013F3A 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w	; restart the level
00013F40 31FC 0103 FE10             		move.w	#$103,($FFFFFE10).w	; set level to SBZ3 (LZ4)
00013F46                            
00013F46                            Boundary_Bottom_locret:
00013F46 4E75                       		rts	
00013F48                            ; ===========================================================================
00013F48                            
00013F48                            
00013F48                            Boundary_Sides:
00013F48 3140 0008                  		move.w	d0,8(a0)
00013F4C 317C 0000 000A             		move.w	#0,$A(a0)
00013F52 317C 0000 0010             		move.w	#0,$10(a0)	; stop Sonic moving
00013F58 317C 0000 0014             		move.w	#0,$14(a0)
00013F5E 60A0                       		bra.s	loc_13336
00013F60                            ; End of function Sonic_LevelBound
00013F60                            
00013F60                            ; ---------------------------------------------------------------------------
00013F60                            ; Subroutine allowing Sonic to roll when he's moving
00013F60                            ; ---------------------------------------------------------------------------
00013F60                            
00013F60                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013F60                            
00013F60                            
00013F60                            Sonic_Roll:				; XREF: Obj01_MdNormal
00013F60 4A38 F7CA                  		tst.b	($FFFFF7CA).w
00013F64 6600                       		bne.s	Obj01_NoRoll
00013F66 3028 0014                  		move.w	$14(a0),d0
00013F6A 6A00                       		bpl.s	loc_13392
00013F6C 4440                       		neg.w	d0
00013F6E                            
00013F6E                            loc_13392:
00013F6E 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic moving at $80 speed or faster?
00013F72 6500                       		bcs.s	Obj01_NoRoll	; if not, branch
00013F74 1038 F602                  		move.b	($FFFFF602).w,d0
00013F78 0200 000C                  		andi.b	#$C,d0		; is left/right	being pressed?
00013F7C 6600                       		bne.s	Obj01_NoRoll	; if yes, branch
00013F7E 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
00013F84 6600                       		bne.s	Obj01_ChkRoll	; if yes, branch
00013F86                            
00013F86                            Obj01_NoRoll:
00013F86 4E75                       		rts	
00013F88                            ; ===========================================================================
00013F88                            
00013F88                            Obj01_ChkRoll:
00013F88 0828 0002 0022             		btst	#2,$22(a0)	; is Sonic already rolling?
00013F8E 6700                       		beq.s	Obj01_DoRoll	; if not, branch
00013F90 4E75                       		rts	
00013F92                            ; ===========================================================================
00013F92                            
00013F92                            Obj01_DoRoll:
00013F92 08E8 0002 0022             		bset	#2,$22(a0)
00013F98 117C 000E 0016             		move.b	#$E,$16(a0)
00013F9E 117C 0007 0017             		move.b	#7,$17(a0)
00013FA4 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
00013FAA 5A68 000C                  		addq.w	#5,$C(a0)
00013FAE 303C 00BE                  		move.w	#$BE,d0
00013FB2 4EB9 0000 147C             		jsr	(PlaySound_Special).l ;	play rolling sound
00013FB8 4A68 0014                  		tst.w	$14(a0)
00013FBC 6600                       		bne.s	locret_133E8
00013FBE 317C 0200 0014             		move.w	#$200,$14(a0)
00013FC4                            
00013FC4                            locret_133E8:
00013FC4 4E75                       		rts	
00013FC6                            ; End of function Sonic_Roll
00013FC6                            
00013FC6                            ; ---------------------------------------------------------------------------
00013FC6                            ; Subroutine allowing Sonic to jump
00013FC6                            ; ---------------------------------------------------------------------------
00013FC6                            
00013FC6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013FC6                            
00013FC6                            
00013FC6                            Sonic_Jump:                ; XREF: Obj01_MdNormal; Obj01_MdRoll
00013FC6 1038 F603                  		move.b	($FFFFF603).w,d0
00013FCA 0200 0070                          andi.b	#$70,d0		; is A,	B or C 
00013FCE 6700 0000                          beq.w    locret_1348E        ; if not, branch
00013FD2 303C 00A0                          move.w    #$A0,d0    ; set jumping sound
00013FD6 4EB9 0000 1476                     jsr    (PlaySound).l ; play jumping sound
00013FDC 7000                               moveq    #0,d0
00013FDE 1028 0026                          move.b    $26(a0),d0
00013FE2 0600 0080                          addi.b    #$80,d0
00013FE6 4EB9 0000 0000                     jsr    sub_14D48
00013FEC 0C41 0006                          cmpi.w    #6,d1
00013FF0 6D00 0000                          blt.w    locret_1348E
00013FF4 343C 0680                          move.w    #$680,d2 ; set normal jump speed
00013FF8 4A38 FE19                          tst.b    ($FFFFFE19).w    ; is Sonic Super?
00013FFC 6700                               beq.s    Sonic_JumpContinue2 ; if not, branch
00013FFE 343C 0880                          move.w    #$880,d2        ; set higher jump speed if super
00014002                            
00014002                            Sonic_JumpContinue2:
00014002 0828 0006 0022                     btst    #6,$22(a0) ; is player underwater?
00014008 6700                               beq.s    loc_1341C ; if not, branch
0001400A 343C 0380                          move.w    #$380,d2 ; if yes, decrease his jump speed
0001400E 4A38 FE19                          tst.b    ($FFFFFE19).w    ; is Sonic Super?
00014012 6700                               beq.s    loc_1341C ; if not, branch
00014014 343C 0530                          move.w    #$530,d2 ; super jump speed
00014018                            
00014018                            loc_1341C:
00014018 7000                       		moveq	#0,d0
0001401A 1028 0026                  		move.b	$26(a0),d0
0001401E 0400 0040                  		subi.b	#$40,d0
00014022 4EB9 0000 33DA             		jsr	(CalcSine).l
00014028 C3C2                       		muls.w	d2,d1
0001402A E081                       		asr.l	#8,d1
0001402C D368 0010                  		add.w	d1,$10(a0)	; make Sonic jump
00014030 C1C2                       		muls.w	d2,d0
00014032 E080                       		asr.l	#8,d0
00014034 D168 0012                  		add.w	d0,$12(a0)	; make Sonic jump
00014038 08E8 0001 0022             		bset	#1,$22(a0)
0001403E 08A8 0005 0022             		bclr	#5,$22(a0)
00014044 588F                       		addq.l	#4,sp
00014046 117C 0001 003C             		move.b	#1,$3C(a0)
0001404C 4228 0038                  		clr.b	$38(a0)
00014050 303C 00A0                  		move.w	#$A0,d0
00014054 4EB9 0000 147C             		jsr	(PlaySound_Special).l ;	play jumping sound
0001405A 117C 0013 0016             		move.b	#$13,$16(a0)
00014060 117C 0009 0017             		move.b	#9,$17(a0)
00014066 0828 0002 0022             		btst	#2,$22(a0)
0001406C 6600                       		bne.s	loc_13490
0001406E 117C 000E 0016             		move.b	#$E,$16(a0)
00014074 117C 0007 0017             		move.b	#7,$17(a0)
0001407A 117C 0002 001C             		move.b	#2,$1C(a0)	; use "jumping"	animation
00014080 08E8 0002 0022             		bset	#2,$22(a0)
00014086 5A68 000C                  		addq.w	#5,$C(a0)
0001408A                            
0001408A                            locret_1348E:
0001408A 4E75                       		rts	
0001408C                            ; ===========================================================================
0001408C                            
0001408C                            loc_13490:
0001408C 08E8 0004 0022             		bset	#4,$22(a0)
00014092 4E75                       		rts	
00014094                            ; End of function Sonic_Jump
00014094                            
00014094                            
00014094                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014094                            
00014094                            
00014094                            Sonic_JumpHeight:			; XREF: Obj01_MdJump; Obj01_MdJump2
00014094 4A28 003C                  		tst.b	$3C(a0)
00014098 6700                       		beq.s	loc_134C4
0001409A 323C FC00                  		move.w	#-$400,d1
0001409E 0828 0006 0022             		btst	#6,$22(a0)
000140A4 6700                       		beq.s	loc_134AE
000140A6 323C FE00                  		move.w	#-$200,d1
000140AA                            
000140AA                            loc_134AE:
000140AA B268 0012                  		cmp.w	$12(a0),d1
000140AE 6F00                       		ble.s	locret_134C2
000140B0 1038 F602                  		move.b	($FFFFF602).w,d0
000140B4 0200 0070                  		andi.b	#$70,d0		; is A,	B or C pressed?
000140B8 6600                       		bne.s	locret_134C2	; if yes, branch
000140BA 3141 0012                  		move.w	d1,$12(a0)
000140BE                            
000140BE                            locret_134C2:
000140BE 4A28 0012                  	tst.b	y_vel(a0)		; is Sonic exactly at the height of his jump?
000140C2 6700                       	beq.s	jmp_Sonic_CheckGoSuper	; if yes, test for turning into Super Sonic	
000140C4 4E75                       		rts	
000140C6                            ; ===========================================================================
000140C6                            
000140C6                            loc_134C4:
000140C6 0C68 F040 0012             		cmpi.w	#-$FC0,$12(a0)
000140CC 6C00                       		bge.s	locret_134D2
000140CE 317C F040 0012             		move.w	#-$FC0,$12(a0)
000140D4                            
000140D4                            locret_134D2:
000140D4 4E75                       		rts	
000140D6                            ; End of function Sonic_JumpHeight
000140D6                            
000140D6                            Jmp_Sonic_CheckGoSuper
000140D6 4EF9 0000 0000             	jmp Sonic_CheckGoSuper
000140DC                            ; ---------------------------------------------------------------------------
000140DC                            ; Subroutine to make Sonic perform a spindash
000140DC                            ; ---------------------------------------------------------------------------
000140DC                             
000140DC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000140DC                             
000140DC                             
000140DC                            Sonic_SpinDash:
000140DC 4A28 0039                  		tst.b	$39(a0)			; already Spin Dashing?
000140E0 6600                       		bne.s	loc2_1AC8E		; if set, branch
000140E2 0C28 0008 001C             		cmpi.b	#8,$1C(a0)		; is anim duck
000140E8 6600                       		bne.s	locret2_1AC8C		; if not, return
000140EA 1038 F603                  		move.b	($FFFFF603).w,d0	; read controller
000140EE 0200 0070                  		andi.b	#$70,d0			; pressing A/B/C ?
000140F2 6700 0000                  		beq.w	locret2_1AC8C		; if not, return
000140F6 117C 001D 001C             		move.b	#$1D,$1C(a0)		; set Spin Dash anim (9 in s2)
000140FC 303C 00D1                  		move.w	#$D1,d0			; spin sound ($E0 in s2)
00014100 4EB9 0000 147C             		jsr	(PlaySound_Special).l	; play spin sound
00014106 588F                       		addq.l	#4,sp			; Add 4 bytes to the stack return address to skip Sonic_Jump on next rts to Obj01_MdNormal, preventing conflicts with button presses.
00014108 117C 0001 0039             		move.b	#1,$39(a0)		; set Spin Dash flag
0001410E 317C 0000 003A             		move.w	#0,$3A(a0)		; set charge count to 0
00014114 0C28 000C 0028             		cmpi.b	#$C,$28(a0)		; ??? oxygen remaining?
0001411A 11FC 0002 D1DC             		move.b	#2,($FFFFD1DC).w	; Set the Spin Dash dust animation to $2.
00014120                            						; the smoke/dust object
00014120                            loc2_1AC84:
00014120 6100 FDAC                  		bsr.w	Sonic_LevelBound
00014124 6100 0000                  		bsr.w	Sonic_AnglePos
00014128                            
00014128                            locret2_1AC8C:
00014128 4E75                       		rts	
0001412A                            ; ---------------------------------------------------------------------------
0001412A                            
0001412A                            loc2_1AC8E:
0001412A 117C 001D 001C             		move.b	#$1D,$1C(a0)
00014130 1038 F602                  		move.b	($FFFFF602).w,d0	; read controller
00014134 0800 0001                  		btst	#1,d0			; check down button
00014138 6600 0000                  		bne.w	loc2_1AD30		; if set, branch
0001413C 117C 000E 0016             		move.b	#$E,$16(a0)		; $16(a0) is height/2
00014142 117C 0007 0017             		move.b	#7,$17(a0)		; $17(a0) is width/2
00014148 117C 0002 001C             		move.b	#2,$1C(a0)		; set animation to roll
0001414E 5A68 000C                  		addq.w	#5,$C(a0)		; $C(a0) is Y coordinate
00014152 117C 0000 0039             		move.b	#0,$39(a0)		; clear Spin Dash flag
00014158 7000                       		moveq	#0,d0
0001415A 1028 003A                  		move.b	$3A(a0),d0		; copy charge count
0001415E D040                       		add.w	d0,d0			; double it
00014160 317B 0000 0014             		move.w	Dash_Speeds(pc,d0.w),$14(a0) ; get normal speed
00014166 3028 0014                  		move.w	$14(a0),d0		; get inertia
0001416A 0440 0800                  		subi.w	#$800,d0		; subtract $800
0001416E D040                       		add.w	d0,d0			; double it
00014170 0240 1F00                  		andi.w	#$1F00,d0		; mask it against $1F00
00014174 4440                       		neg.w	d0			; negate it
00014176 0640 2000                  		addi.w	#$2000,d0		; add $2000
0001417A 31C0 C904                  		move.w	d0,($FFFFC904).w	; move to $C904
0001417E 0828 0000 0022             		btst	#0,$22(a0)		; is sonic facing right?
00014184 6700                       		beq.s	loc2_1ACF4		; if not, branch
00014186 4468 0014                  		neg.w	$14(a0)			; negate inertia
0001418A                            ; ===========================================================================
0001418A                            jmp_loc2_1AD78:
0001418A 4EF9 0000 0000             	jmp loc2_1AD78
00014190                            loc2_1ACF4:
00014190 08E8 0002 0022             		bset	#2,$22(a0)		; set unused (in s1) flag
00014196 11FC 0000 D1DC             		move.b	#0,($FFFFD1DC).w	; clear Spin Dash dust animation.
0001419C 303C 00BC                  		move.w	#$BC,d0			; spin release sound
000141A0 4EB9 0000 147C             		jsr	(PlaySound_Special).l	; play it!
000141A6 60E2                       		bra.s	jmp_loc2_1AD78
000141A8                            ; ===========================================================================
000141A8                            ;zafast:
000141A8                            ;		move.w	SuperDash_Speeds(pc,d0.w),$14(a0) ; get super speed
000141A8                            ;		move.w	$14(a0),d0		; get inertia
000141A8                            ;		subi.w	#$800,d0		; subtract $800
000141A8                            ;		add.w	d0,d0			; double it
000141A8                            ;		andi.w	#$1F00,d0		; mask it against $1F00
000141A8                            ;		neg.w	d0			; negate it
000141A8                            ;		addi.w	#$2000,d0		; add $2000
000141A8                            ;		move.w	d0,($FFFFC904).w	; move to $C904
000141A8                            ;		btst	#0,$22(a0)		; is sonic facing right?
000141A8                            ;		beq.s	loc2_1ACF4		; if not, branch
000141A8                            ;		neg.w	$14(a0)			; negate inertia
000141A8                            
000141A8                            ; ===========================================================================
000141A8                            Dash_Speeds:
000141A8 0800                       		dc.w  $800		; 0
000141AA 0880                       		dc.w  $880		; 1
000141AC 0900                       		dc.w  $900		; 2
000141AE 0980                       		dc.w  $980		; 3
000141B0 0A00                       		dc.w  $A00		; 4
000141B2 0A80                       		dc.w  $A80		; 5
000141B4 0B00                       		dc.w  $B00		; 6
000141B6 0B80                       		dc.w  $B80		; 7
000141B8 0C00                       		dc.w  $C00		; 8
000141BA                            ;SuperDash_Speeds:
000141BA                            ;		dc.w  $B00		; 0
000141BA                            ;		dc.w  $B80		; 1
000141BA                            ;		dc.w  $C00		; 2
000141BA                            ;		dc.w  $C80		; 3
000141BA                            ;		dc.w  $D00		; 4
000141BA                            ;		dc.w  $D80		; 5
000141BA                            ;		dc.w  $E00		; 6
000141BA                            ;		dc.w  $E80		; 7
000141BA                            ;		dc.w  $F00		; 8		
000141BA                            ; ===========================================================================
000141BA                            
000141BA                            loc2_1AD30:				; If still charging the dash...
000141BA 4A68 003A                  		tst.w	$3A(a0)		; check charge count
000141BE 6700                       		beq.s	loc2_1AD48	; if zero, branch
000141C0 3028 003A                  		move.w	$3A(a0),d0	; otherwise put it in d0
000141C4 EA48                       		lsr.w	#5,d0		; shift right 5 (divide it by 32)
000141C6 9168 003A                  		sub.w	d0,$3A(a0)	; subtract from charge count
000141CA 6400                       		bcc.s	loc2_1AD48	; ??? branch if carry clear
000141CC 317C 0000 003A             		move.w	#0,$3A(a0)	; set charge count to 0
000141D2                            
000141D2                            loc2_1AD48:
000141D2 1038 F603                  		move.b	($FFFFF603).w,d0	; read controller
000141D6 0200 0070                  		andi.b	#$70,d0			; pressing A/B/C?
000141DA 6700 0000                  		beq.w	loc2_1AD78		; if not, branch
000141DE 317C 1D00 001C             		move.w	#$1D00,$1C(a0)		; reset spdsh animation
000141E4 303C 00D1                  		move.w	#$D1,d0			; was $E0 in sonic 2
000141E8 11FC 0002 D1DC             		move.b	#2,$FFFFD1DC.w	; Set the Spin Dash dust animation to $2.		
000141EE 4EB9 0000 147C             		jsr	(PlaySound_Special).l	; play charge sound
000141F4 0668 0200 003A             		addi.w	#$200,$3A(a0)		; increase charge count
000141FA 0C68 0800 003A             		cmpi.w	#$800,$3A(a0)		; check if it's maxed
00014200 6500                       		bcs.s	loc2_1AD78		; if not, then branch
00014202 317C 0800 003A             		move.w	#$800,$3A(a0)		; reset it to max
00014208                            
00014208                            loc2_1AD78:
00014208 588F                       		addq.l	#4,sp			; increase stack ptr
0001420A 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w
00014210 6700                       		beq.s	loc2_1AD8C
00014212 6400                       		bcc.s	loc2_1AD88
00014214 5878 F73E                  		addq.w	#4,($FFFFF73E).w
00014218                            
00014218                            loc2_1AD88:
00014218 5578 F73E                  		subq.w	#2,($FFFFF73E).w
0001421C                            
0001421C                            loc2_1AD8C:
0001421C 6100 FCB0                  		bsr.w	Sonic_LevelBound
00014220 6100 0000                  		bsr.w	Sonic_AnglePos
00014224                            		;move.w	#$60,($FFFFF73E).w	; reset looking up/down
00014224 4E75                       		rts
00014226                            ; End of subroutine Sonic_SpinDash
00014226                            
00014226                            SpinDash_dust:
00014226                            Sprite_1DD20:				; DATA XREF: ROM:0001600C?o
00014226 7000                       		moveq	#0,d0
00014228 1028 0024                  		move.b	$24(a0),d0
0001422C 323B 0000                  		move	off_1DD2E(pc,d0.w),d1
00014230 4EFB 1000                  		jmp	off_1DD2E(pc,d1.w)
00014234                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00014234 0000                       off_1DD2E:	dc loc_1DD36-off_1DD2E; 0 ; DATA XREF: h+6DBA?o h+6DBC?o ...
00014236 0000                       		dc loc_1DD90-off_1DD2E; 1
00014238 0000                       		dc loc_1DE46-off_1DD2E; 2
0001423A 0000                       		dc loc_1DE4A-off_1DD2E; 3
0001423C                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
0001423C                            
0001423C                            loc_1DD36:				; DATA XREF: h+6DBA?o
0001423C 5428 0024                  		addq.b	#2,$24(a0)
00014240 217C 0000 0000 0004        		move.l	#MapUnc_1DF5E,4(a0)
00014248 0028 0004 0001             		or.b	#4,1(a0)
0001424E 117C 0001 0018             		move.b	#1,$18(a0)
00014254 117C 0010 0019             		move.b	#$10,$19(a0)
0001425A 317C 07A0 0002             		move	#$7A0,2(a0)
00014260 317C D000 003E             		move	#-$3000,$3E(a0)
00014266 317C F400 003C             		move	#$F400,$3C(a0)
0001426C B0FC D1C0                  		cmp	#-$2E40,a0
00014270 6700                       		beq.s	loc_1DD8C
00014272 117C 0001 0034             		move.b	#1,$34(a0)
00014278                            ;		cmp	#2,($FFFFFF70).w
00014278                            ;		beq.s	loc_1DD8C
00014278                            ;		move	#$48C,2(a0)
00014278                            ;		move	#-$4FC0,$3E(a0)
00014278                            ;		move	#-$6E80,$3C(a0)
00014278                            
00014278                            loc_1DD8C:				; CODE XREF: h+6DF6?j h+6E04?j
00014278                            ;		bsr.w	sub_16D6E
00014278                            
00014278                            loc_1DD90:				; DATA XREF: h+6DBA?o
00014278 3468 003E                  		movea.w	$3E(a0),a2
0001427C 7000                       		moveq	#0,d0
0001427E 1028 001C                  		move.b	$1C(a0),d0
00014282 D040                       		add	d0,d0
00014284 323B 0000                  		move	off_1DDA4(pc,d0.w),d1
00014288 4EFB 1000                  		jmp	off_1DDA4(pc,d1.w)
0001428C                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
0001428C 0000                       off_1DDA4:	dc loc_1DE28-off_1DDA4; 0 ; DATA XREF: h+6E30?o h+6E32?o ...
0001428E 0000                       		dc loc_1DDAC-off_1DDA4; 1
00014290 0000                       		dc loc_1DDCC-off_1DDA4; 2
00014292 0000                       		dc loc_1DE20-off_1DDA4; 3
00014294                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00014294                            
00014294                            loc_1DDAC:				; DATA XREF: h+6E30?o
00014294 3178 F646 000C             		move	($FFFFF646).w,$C(a0)
0001429A 4A28 001D                  		tst.b	$1D(a0)
0001429E 6600                       		bne.s	loc_1DE28
000142A0 316A 0008 0008             		move	8(a2),8(a0)
000142A6 117C 0000 0022             		move.b	#0,$22(a0)
000142AC 0268 7FFF 0002             		and	#$7FFF,2(a0)
000142B2 6000                       		bra.s	loc_1DE28
000142B4                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
000142B4                            
000142B4                            loc_1DDCC:				; DATA XREF: h+6E30?o
000142B4                            ;		cmp.b	#$C,$28(a2)
000142B4                            ;		bcs.s	loc_1DE3E
000142B4 0C2A 0004 0024             		cmp.b	#4,$24(a2)
000142BA 6400                       		bcc.s	loc_1DE3E
000142BC 4A2A 0039                  		tst.b	$39(a2)
000142C0 6700                       		beq.s	loc_1DE3E
000142C2 316A 0008 0008             		move	8(a2),8(a0)
000142C8 316A 000C 000C             		move	$C(a2),$C(a0)
000142CE 116A 0022 0022             		move.b	$22(a2),$22(a0)
000142D4 0228 0001 0022             		and.b	#1,$22(a0)
000142DA 4A28 0034                  		tst.b	$34(a0)
000142DE 6700                       		beq.s	loc_1DE06
000142E0 5968 000C                  		sub	#4,$C(a0)
000142E4                            
000142E4                            loc_1DE06:				; CODE XREF: h+6E8A?j
000142E4 4A28 001D                  		tst.b	$1D(a0)
000142E8 6600                       		bne.s	loc_1DE28
000142EA 0268 7FFF 0002             		and	#$7FFF,2(a0)
000142F0 4A6A 0002                  		tst	2(a2)
000142F4 6A00                       		bpl.s	loc_1DE28
000142F6 0068 8000 0002             		or	#-$8000,2(a0)
000142FC                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
000142FC                            
000142FC                            loc_1DE20:				; DATA XREF: h+6E30?o
000142FC                            loc_1DE28:				; CODE XREF: h+6E42?j h+6E56?j ...
000142FC 43F9 0000 0000             		lea	(off_1DF38).l,a1
00014302 4EB9 0000 B1EE             		jsr	AnimateSprite
00014308 6100 0000                  		bsr.w	loc_1DEE4
0001430C 4EFA 9DC8                  		jmp	DisplaySprite
00014310                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00014310                            
00014310                            loc_1DE3E:				; CODE XREF: h+6E5E?j h+6E66?j ...
00014310 117C 0000 001C             		move.b	#0,$1C(a0)
00014316 4E75                       		rts	
00014318                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00014318                            
00014318                            loc_1DE46:				; DATA XREF: h+6DBA?o
00014318 6000 9DF8                  		bra.w	DeleteObject
0001431C                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
0001431C                            
0001431C                            
0001431C                            
0001431C                            loc_1DE4A:
0001431C 3468 003E                  	movea.w	$3E(a0),a2
00014320 7210                       	moveq	#$10,d1
00014322 0C2A 000D 001C             	cmp.b	#$D,$1C(a2)
00014328 6700                       	beq.s	loc_1DE64
0001432A 7206                       	moveq	#$6,d1
0001432C 0C2A 0003 0021             	cmp.b	#$3,$21(a2)
00014332 6700                       	beq.s	loc_1DE64
00014334 117C 0002 0024             	move.b	#2,$24(a0)
0001433A 117C 0000 0032             	move.b	#0,$32(a0)
00014340 4E75                       	rts
00014342                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00014342                            
00014342                            loc_1DE64:				; CODE XREF: h+6EE0?j
00014342 5328 0032                  		subq.b	#1,$32(a0)
00014346 6A00                       		bpl.s	loc_1DEE0
00014348 117C 0003 0032             		move.b	#3,$32(a0)
0001434E 4EBA A21C                  		jsr	SingleObjLoad
00014352 6600                       		bne.s	loc_1DEE0
00014354 1290                       		move.b	0(a0),0(a1)
00014356 336A 0008 0008             		move	8(a2),8(a1)
0001435C 336A 000C 000C             		move	$C(a2),$C(a1)
00014362 4A28 0034                  		tst.b	$34(a0)
00014366 6700                       		beq.s	loc_1DE9A
00014368 5941                       		sub	#4,d1
0001436A                            
0001436A                            loc_1DE9A:				; CODE XREF: h+6F1E?j
0001436A D369 000C                  		add	d1,$C(a1)
0001436E 137C 0000 0022             		move.b	#0,$22(a1)
00014374 137C 0003 001C             		move.b	#3,$1C(a1)
0001437A 5429 0024                  		addq.b	#2,$24(a1)
0001437E 2368 0004 0004             		move.l	4(a0),4(a1)
00014384 1368 0001 0001             		move.b	1(a0),1(a1)
0001438A 137C 0001 0018             		move.b	#1,$18(a1)
00014390 137C 0004 0019             		move.b	#4,$19(a1)
00014396 3368 0002 0002             		move	2(a0),2(a1)
0001439C 3368 003E 003E             		move	$3E(a0),$3E(a1)
000143A2 0269 7FFF 0002             		and	#$7FFF,2(a1)
000143A8 4A6A 0002                  		tst	2(a2)
000143AC 6A00                       		bpl.s	loc_1DEE0
000143AE 0069 8000 0002             		or	#-$8000,2(a1)
000143B4                            
000143B4                            loc_1DEE0:				; CODE XREF: h+6EF4?j h+6F00?j ...
000143B4 6100                       		bsr.s	loc_1DEE4
000143B6 4E75                       		rts	
000143B8                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
000143B8                            
000143B8                            loc_1DEE4:				; CODE XREF: h+6EC0?p h+6F6C?p
000143B8 7000                       		moveq	#0,d0
000143BA 1028 001A                  		move.b	$1A(a0),d0
000143BE B028 0030                  		cmp.b	$30(a0),d0
000143C2 6700 0000                  		beq.w	locret_1DF36
000143C6 1140 0030                  		move.b	d0,$30(a0)
000143CA 45F9 0000 0000             		lea	(off_1E074).l,a2
000143D0 D040                       		add	d0,d0
000143D2 D4F2 0000                  		add	(a2,d0.w),a2
000143D6 3A1A                       		move	(a2)+,d5
000143D8 5345                       		subq	#1,d5
000143DA 6B00 0000                  		bmi.w	locret_1DF36
000143DE 3828 003C                  		move $3C(a0),d4
000143E2                            
000143E2                            loc_1DF0A:				; CODE XREF: h+6FBE?j
000143E2 7200                       		moveq	#0,d1
000143E4 321A                       		move	(a2)+,d1
000143E6 3601                       		move	d1,d3
000143E8 E04B                       		lsr.w	#8,d3
000143EA 0243 00F0                  		and	#$F0,d3	; 'ð'
000143EE 0643 0010                  		add	#$10,d3
000143F2 0241 0FFF                  		and	#$FFF,d1
000143F6 EB89                       		lsl.l	#5,d1
000143F8 0681 0000 0000             		add.l	#Art_Dust,d1
000143FE 3404                       		move	d4,d2
00014400 D843                       		add	d3,d4
00014402 D843                       		add	d3,d4
00014404 4EB9 0000 1520             		jsr	(QueueDMATransfer).l
0001440A 51CD FFD6                  		dbf	d5,loc_1DF0A
0001440E 4E75                           rts
00014410                            
00014410                            locret_1DF36:				; CODE XREF: h+6F7A?j h+6F90?j
00014410 4E75                       		rts	
00014412                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00014412 0000                       off_1DF38:	dc byte_1DF40-off_1DF38; 0 ; DATA XREF: h+6EB4?o h+6FC4?o ...
00014414 0000                       		dc byte_1DF43-off_1DF38; 1
00014416 0000                       		dc byte_1DF4F-off_1DF38; 2
00014418 0000                       		dc byte_1DF58-off_1DF38; 3
0001441A 1F00 FF                    byte_1DF40:	dc.b $1F,  0,$FF	; 0 ; DATA XREF: h+6FC4?o
0001441D 0301 0203 0405 0607 0809+  byte_1DF43:	dc.b   3,  1,  2,  3,  4,  5,  6,  7,  8,  9,$FD,  0; 0	; DATA XREF: h+6FC4?o
00014429 010A 0B0C 0D0E 0F10 FF     byte_1DF4F:	dc.b   1, $A, $B, $C, $D, $E, $F,$10,$FF; 0 ; DATA XREF: h+6FC4?o
00014432 0311 1213 14FC             byte_1DF58:	dc.b   3,$11,$12,$13,$14,$FC; 0	; DATA XREF: h+6FC4?o
00014438                            
00014438                            return_1ABA4:
00014438 4E75                       	rts
0001443A                            Sonic_CheckGoSuper:
0001443A                            	include "_inc\SuperSonic.asm"
0001443A                            ; ---------------------------------------------------------------------------
0001443A                            ; Subroutine called at the peak of a jump that transforms Sonic into Super Sonic
0001443A                            ; if he has enough rings and emeralds
0001443A                            ; ---------------------------------------------------------------------------
0001443A                            
0001443A                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
0001443A                            ; loc_1AB38: test_set_SS:
0001443A 4A38 FE19                  	tst.b	(Super_Sonic_flag).w	; is Sonic already Super?
0001443E 66F8                       	bne.s	return_1ABA4		; if yes, branch
00014440                            ;	cmpi.b	#6,(Emerald_count).w	; does Sonic have exactly 7 emeralds?
00014440                            ;	bne.s	return_1ABA4		; if not, branch
00014440 0C78 0032 FE20             	cmpi.w	#50,(Ring_count).w	; does Sonic have at least 50 rings?
00014446 65F0                       	bcs.s	return_1ABA4		; if not, branch
00014448                            
00014448 11FC 0001 F65F             	move.b	#1,(Super_Sonic_palette).w
0001444E 11FC 000F F65E             	move.b	#$F,(Palette_frame_count).w
00014454 11FC 0001 FE19             	move.b	#1,(Super_Sonic_flag).w
0001445A 117C 0081 002A             	move.b	#$81,obj_control(a0)
00014460 117C 001F 001C             	move.b	#$1F,anim(a0)			; use transformation animation
00014466                            ;	move.b	#$7E,(Object_RAM+$2040).w	; Obj7E is the ending sonic which is why it's commented out
00014466 31FC 0A00 F760             	move.w	#$A00,(Sonic_top_speed).w
0001446C 31FC 0030 F762             	move.w	#$30,(Sonic_acceleration).w
00014472 31FC 0100 F764             	move.w	#$100,(Sonic_deceleration).w
00014478 317C 0000 0032             	move.w	#0,invincibility_time(a0)
0001447E 11FC 0001 FE2D             		move.b	#1,($FFFFFE2D).w ; make	Sonic invincible		move.b	#$38,($FFFFD200).w ; load stars	object ($3801)
00014484 11FC 0001 D21C             		move.b	#1,($FFFFD21C).w
0001448A 11FC 0038 D240             		move.b	#$38,($FFFFD240).w ; load stars	object ($3802)
00014490 11FC 0002 D25C             		move.b	#2,($FFFFD25C).w
00014496 11FC 0038 D280             		move.b	#$38,($FFFFD280).w ; load stars	object ($3803)
0001449C 11FC 0003 D29C             		move.b	#3,($FFFFD29C).w
000144A2 11FC 0038 D2C0             		move.b	#$38,($FFFFD2C0).w ; load stars	object ($3804)
000144A8 11FC 0004 D2DC             		move.b	#4,($FFFFD2DC).w	
000144AE 303C 00C3                          move.w	#$C3,d0         ; 
000144B2 4EB9 0000 1476             	jsr	(PlaySound).l	; Play special ring sound effect.
000144B8 303C 009F                  	move.w	#$9F,d0         
000144BC 4EF9 0000 147C             	jmp	(PlaySound_Special).l	; load the invincibility song and return also playmusic doesn't exist
000144C2                            
000144C2                            ; End of subroutine Sonic_CheckGoSuper
000144C2                            
000144C2                            ; ---------------------------------------------------------------------------
000144C2                            ; Subroutine doing the extra logic for Super Sonic
000144C2                            ; ---------------------------------------------------------------------------
000144C2                            
000144C2                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
000144C2                            rts:
000144C2 4E75                       	rts
000144C4                            ; loc_1ABA6:
000144C4                            Sonic_Super:
000144C4 4A38 FE19                  	tst.b	(Super_Sonic_flag).w	; Ignore all this code if not Super Sonic
000144C8 6700 0000                  	beq.w	return_1AC3C
000144CC 4A38 FE1E                  	tst.b	(Update_HUD_timer).w
000144D0 6700                       	beq.s	Sonic_RevertToNormal ; ?
000144D2 5378 F670                  	subq.w	#1,(Super_Sonic_frame_count).w
000144D6 6A00 0000                  	bpl.w	return_1AC3C
000144DA 31FC 003C F670             	move.w	#60,(Super_Sonic_frame_count).w	; Reset frame counter to 60
000144E0 4A78 FE20                  	tst.w	(Ring_count).w
000144E4 6700                       	beq.s	Sonic_RevertToNormal
000144E6 0038 0001 FE1D             	ori.b	#1,(Update_HUD_rings).w
000144EC 0C78 0001 FE20             	cmpi.w	#1,(Ring_count).w
000144F2 6700                       	beq.s	@update
000144F4 0C78 000A FE20             	cmpi.w	#10,(Ring_count).w
000144FA 6700                       	beq.s	@update
000144FC 0C78 0064 FE20             	cmpi.w	#100,(Ring_count).w
00014502 6600                       	bne.s	@update2
00014504                            @update
00014504 0038 0080 FE1D             	ori.b	#$80,(Update_HUD_rings).w
0001450A                            @update2
0001450A 5378 FE20                  	subq.w	#1,(Ring_count).w
0001450E 66B2                       	bne.s	rts
00014510                            ; loc_1ABF2:
00014510                            Sonic_RevertToNormal:
00014510 11FC 0002 F65F             	move.b	#2,(Super_Sonic_palette).w	; Remove rotating palette
00014516 31FC 0028 F65C             	move.w	#$28,($FFFFF65C).w	; Unknown
0001451C 11FC 0000 FE19             	move.b	#0,(Super_Sonic_flag).w
00014522 117C 0001 001D             	move.b	#1,next_anim(a0)	; Change animation back to normal ?
00014528 317C 0001 0032             	move.w	#1,invincibility_time(a0)	; Remove invincibility
0001452E 31FC 0600 F760             	move.w	#$600,(Sonic_top_speed).w
00014534 31FC 000C F762             	move.w	#$C,(Sonic_acceleration).w
0001453A 31FC 0080 F764             	move.w	#$80,(Sonic_deceleration).w
00014540 0828 0006 0022             	btst	#6,status(a0)	; Check if underwater, return if not
00014546 6700                       	beq.s	return_1AC3C
00014548 31FC 0300 F760             	move.w	#$300,(Sonic_top_speed).w
0001454E 31FC 0006 F762             	move.w	#6,(Sonic_acceleration).w
00014554 31FC 0040 F764             	move.w	#$40,(Sonic_deceleration).w
0001455A                            
0001455A                            return_1AC3C:
0001455A 4E75                       	rts
0001455C                            ; End of subroutine Sonic_Super
0001455C                            ; End of subroutine Sonic_Super
0001455C                            ; -------------------------------------------------------------------------------
0001455C                            ; Unknown Sprite Mappings
0001455C                            ; -------------------------------------------------------------------------------
0001455C                            MapUnc_1DF5E:
0001455C 0000                       	dc word_1DF8A-MapUnc_1DF5E; 0
0001455E 0000                       	dc word_1DF8C-MapUnc_1DF5E; 1
00014560 0000                       	dc word_1DF96-MapUnc_1DF5E; 2
00014562 0000                       	dc word_1DFA0-MapUnc_1DF5E; 3
00014564 0000                       	dc word_1DFAA-MapUnc_1DF5E; 4
00014566 0000                       	dc word_1DFB4-MapUnc_1DF5E; 5
00014568 0000                       	dc word_1DFBE-MapUnc_1DF5E; 6
0001456A 0000                       	dc word_1DFC8-MapUnc_1DF5E; 7
0001456C 0000                       	dc word_1DFD2-MapUnc_1DF5E; 8
0001456E 0000                       	dc word_1DFDC-MapUnc_1DF5E; 9
00014570 0000                       	dc word_1DFE6-MapUnc_1DF5E; 10
00014572 0000                       	dc word_1DFF0-MapUnc_1DF5E; 11
00014574 0000                       	dc word_1DFFA-MapUnc_1DF5E; 12
00014576 0000                       	dc word_1E004-MapUnc_1DF5E; 13
00014578 0000                       	dc word_1E016-MapUnc_1DF5E; 14
0001457A 0000                       	dc word_1E028-MapUnc_1DF5E; 15
0001457C 0000                       	dc word_1E03A-MapUnc_1DF5E; 16
0001457E 0000                       	dc word_1E04C-MapUnc_1DF5E; 17
00014580 0000                       	dc word_1E056-MapUnc_1DF5E; 18
00014582 0000                       	dc word_1E060-MapUnc_1DF5E; 19
00014584 0000                       	dc word_1E06A-MapUnc_1DF5E; 20
00014586 0000                       	dc word_1DF8A-MapUnc_1DF5E; 21
00014588 00                         word_1DF8A:	dc.b 0
00014589 01                         word_1DF8C:	dc.b 1
0001458A F20D 0000 F0               	dc.b $F2, $0D, $0, 0,$F0; 0
0001458F 01                         word_1DF96:	dc.b 1
00014590 E20F 0000 F0               	dc.b $E2, $0F, $0, 0,$F0; 0
00014595 01                         word_1DFA0:	dc.b 1
00014596 E20F 0000 F0               	dc.b $E2, $0F, $0, 0,$F0; 0
0001459B 01                         word_1DFAA:	dc.b 1
0001459C E20F 0000 F0               	dc.b $E2, $0F, $0, 0,$F0; 0
000145A1 01                         word_1DFB4:	dc.b 1
000145A2 E20F 0000 F0               	dc.b $E2, $0F, $0, 0,$F0; 0
000145A7 01                         word_1DFBE:	dc.b 1
000145A8 E20F 0000 F0               	dc.b $E2, $0F, $0, 0,$F0; 0
000145AD 01                         word_1DFC8:	dc.b 1
000145AE F20D 0000 F0               	dc.b $F2, $0D, $0, 0,$F0; 0
000145B3 01                         word_1DFD2:	dc.b 1
000145B4 F20D 0000 F0               	dc.b $F2, $0D, $0, 0,$F0; 0
000145B9 01                         word_1DFDC:	dc.b 1
000145BA F20D 0000 F0               	dc.b $F2, $0D, $0, 0,$F0; 0
000145BF 01                         word_1DFE6:	dc.b 1
000145C0 040D 0000 E0               	dc.b $4, $0D, $0, 0,$E0; 0
000145C5 01                         word_1DFF0:	dc.b 1
000145C6 040D 0000 E0               	dc.b $4, $0D, $0, 0,$E0; 0
000145CB 01                         word_1DFFA:	dc.b 1
000145CC 040D 0000 E0               	dc.b $4, $0D, $0, 0,$E0; 0
000145D1 02                         word_1E004:	dc.b 2
000145D2 F401 0000 E8               	dc.b $F4, $01, $0, 0,$E8; 0
000145D7 040D 0002 E0               	dc.b $4, $0D, $0, 2,$E0; 4
000145DC 02                         word_1E016:	dc.b 2
000145DD F405 0000 E8               	dc.b $F4, $05, $0, 0,$E8; 0
000145E2 040D 0004 E0               	dc.b $4, $0D, $0, 4,$E0; 4
000145E7 02                         word_1E028:	dc.b 2
000145E8 F409 0000 E0               	dc.b $F4, $09, $0, 0,$E0; 0
000145ED 040D 0006 E0               	dc.b $4, $0D, $0, 6,$E0; 4
000145F2 02                         word_1E03A:	dc.b 2
000145F3 F409 0000 E0               	dc.b $F4, $09, $0, 0,$E0; 0
000145F8 040D 0006 E0               	dc.b $4, $0D, $0, 6,$E0; 4
000145FD 01                         word_1E04C:	dc.b 1
000145FE F805 0000 F8               	dc.b $F8, $05, $0, 0,$F8; 0
00014603 01                         word_1E056:	dc.b 1
00014604 F805 0004 F8               	dc.b $F8, $05, $0, 4,$F8; 0
00014609 01                         word_1E060:	dc.b 1
0001460A F805 0008 F8               	dc.b $F8, $05, $0, 8,$F8; 0
0001460F 01                         word_1E06A:	dc.b 1
00014610 F805 000C F8               	dc.b $F8, $05, $0, $C,$F8; 0
00014615 00                         	dc.b 0
00014616 0000                       off_1E074:	dc word_1E0A0-off_1E074; 0
00014618 0000                       	dc word_1E0A2-off_1E074; 1
0001461A 0000                       	dc word_1E0A6-off_1E074; 2
0001461C 0000                       	dc word_1E0AA-off_1E074; 3
0001461E 0000                       	dc word_1E0AE-off_1E074; 4
00014620 0000                       	dc word_1E0B2-off_1E074; 5
00014622 0000                       	dc word_1E0B6-off_1E074; 6
00014624 0000                       	dc word_1E0BA-off_1E074; 7
00014626 0000                       	dc word_1E0BE-off_1E074; 8
00014628 0000                       	dc word_1E0C2-off_1E074; 9
0001462A 0000                       	dc word_1E0C6-off_1E074; 10
0001462C 0000                       	dc word_1E0CA-off_1E074; 11
0001462E 0000                       	dc word_1E0CE-off_1E074; 12
00014630 0000                       	dc word_1E0D2-off_1E074; 13
00014632 0000                       	dc word_1E0D8-off_1E074; 14
00014634 0000                       	dc word_1E0DE-off_1E074; 15
00014636 0000                       	dc word_1E0E4-off_1E074; 16
00014638 0000                       	dc word_1E0EA-off_1E074; 17
0001463A 0000                       	dc word_1E0EA-off_1E074; 18
0001463C 0000                       	dc word_1E0EA-off_1E074; 19
0001463E 0000                       	dc word_1E0EA-off_1E074; 20
00014640 0000                       	dc word_1E0EC-off_1E074; 21
00014642 0000                       word_1E0A0:	dc 0
00014644 0001                       word_1E0A2:	dc 1
00014646 7000                       	dc $7000
00014648 0001                       word_1E0A6:	dc 1
0001464A F008                       	dc $F008
0001464C 0001                       word_1E0AA:	dc 1
0001464E F018                       	dc $F018
00014650 0001                       word_1E0AE:	dc 1
00014652 F028                       	dc $F028
00014654 0001                       word_1E0B2:	dc 1
00014656 F038                       	dc $F038
00014658 0001                       word_1E0B6:	dc 1
0001465A F048                       	dc $F048
0001465C 0001                       word_1E0BA:	dc 1
0001465E 7058                       	dc $7058
00014660 0001                       word_1E0BE:	dc 1
00014662 7060                       	dc $7060
00014664 0001                       word_1E0C2:	dc 1
00014666 7068                       	dc $7068
00014668 0001                       word_1E0C6:	dc 1
0001466A 7070                       	dc $7070
0001466C 0001                       word_1E0CA:	dc 1
0001466E 7078                       	dc $7078
00014670 0001                       word_1E0CE:	dc 1
00014672 7080                       	dc $7080
00014674 0002                       word_1E0D2:	dc 2
00014676 1088                       	dc $1088
00014678 708A                       	dc $708A
0001467A 0002                       word_1E0D8:	dc 2
0001467C 3092                       	dc $3092
0001467E 7096                       	dc $7096
00014680 0002                       word_1E0DE:	dc 2
00014682 509E                       	dc $509E
00014684 70A4                       	dc $70A4
00014686 0002                       word_1E0E4:	dc 2
00014688 50AC                       	dc $50AC
0001468A 70B2                       	dc $70B2
0001468C 0000                       word_1E0EA:	dc 0
0001468E 0001                       word_1E0EC:	dc 1
00014690 F0BA                       	dc $F0BA
00014692                            	even
00014692                            
00014692                            ; ---------------------------------------------------------------------------
00014692                            ; Subroutine to	slow Sonic walking up a	slope
00014692                            ; ---------------------------------------------------------------------------
00014692                            
00014692                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014692                            
00014692                            
00014692                            Sonic_SlopeResist:			; XREF: Obj01_MdNormal
00014692 1028 0026                  		move.b	$26(a0),d0
00014696 0600 0060                  		addi.b	#$60,d0
0001469A 0C00 00C0                  		cmpi.b	#$C0,d0
0001469E 6400                       		bcc.s	locret_13508
000146A0 1028 0026                  		move.b	$26(a0),d0
000146A4 4EB9 0000 33DA             		jsr	(CalcSine).l
000146AA C1FC 0020                  		muls.w	#$20,d0
000146AE E080                       		asr.l	#8,d0
000146B0 4A68 0014                  		tst.w	$14(a0)
000146B4 6700                       		beq.s	locret_13508
000146B6 6B00                       		bmi.s	loc_13504
000146B8 4A40                       		tst.w	d0
000146BA 6700                       		beq.s	locret_13502
000146BC D168 0014                  		add.w	d0,$14(a0)	; change Sonic's inertia
000146C0                            
000146C0                            locret_13502:
000146C0 4E75                       		rts	
000146C2                            ; ===========================================================================
000146C2                            
000146C2                            loc_13504:
000146C2 D168 0014                  		add.w	d0,$14(a0)
000146C6                            
000146C6                            locret_13508:
000146C6 4E75                       		rts	
000146C8                            ; End of function Sonic_SlopeResist
000146C8                            
000146C8                            ; ---------------------------------------------------------------------------
000146C8                            ; Subroutine to	push Sonic down	a slope	while he's rolling
000146C8                            ; ---------------------------------------------------------------------------
000146C8                            
000146C8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000146C8                            
000146C8                            
000146C8                            Sonic_RollRepel:			; XREF: Obj01_MdRoll
000146C8 1028 0026                  		move.b	$26(a0),d0
000146CC 0600 0060                  		addi.b	#$60,d0
000146D0 0C00 00C0                  		cmpi.b	#-$40,d0
000146D4 6400                       		bcc.s	locret_13544
000146D6 1028 0026                  		move.b	$26(a0),d0
000146DA 4EB9 0000 33DA             		jsr	(CalcSine).l
000146E0 C1FC 0050                  		muls.w	#$50,d0
000146E4 E080                       		asr.l	#8,d0
000146E6 4A68 0014                  		tst.w	$14(a0)
000146EA 6B00                       		bmi.s	loc_1353A
000146EC 4A40                       		tst.w	d0
000146EE 6A00                       		bpl.s	loc_13534
000146F0 E480                       		asr.l	#2,d0
000146F2                            
000146F2                            loc_13534:
000146F2 D168 0014                  		add.w	d0,$14(a0)
000146F6 4E75                       		rts	
000146F8                            ; ===========================================================================
000146F8                            
000146F8                            loc_1353A:
000146F8 4A40                       		tst.w	d0
000146FA 6B00                       		bmi.s	loc_13540
000146FC E480                       		asr.l	#2,d0
000146FE                            
000146FE                            loc_13540:
000146FE D168 0014                  		add.w	d0,$14(a0)
00014702                            
00014702                            locret_13544:
00014702 4E75                       		rts	
00014704                            ; End of function Sonic_RollRepel
00014704                            
00014704                            ; ---------------------------------------------------------------------------
00014704                            ; Subroutine to	push Sonic down	a slope
00014704                            ; ---------------------------------------------------------------------------
00014704                            
00014704                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014704                            
00014704                            
00014704                            Sonic_SlopeRepel:			; XREF: Obj01_MdNormal; Obj01_MdRoll
00014704 4E71                       		nop	
00014706 4A28 0038                  		tst.b	$38(a0)
0001470A 6600                       		bne.s	locret_13580
0001470C 4A68 003E                  		tst.w	$3E(a0)
00014710 6600                       		bne.s	loc_13582
00014712 1028 0026                  		move.b	$26(a0),d0
00014716 0600 0020                  		addi.b	#$20,d0
0001471A 0200 00C0                  		andi.b	#$C0,d0
0001471E 6700                       		beq.s	locret_13580
00014720 3028 0014                  		move.w	$14(a0),d0
00014724 6A00                       		bpl.s	loc_1356A
00014726 4440                       		neg.w	d0
00014728                            
00014728                            loc_1356A:
00014728 0C40 0280                  		cmpi.w	#$280,d0
0001472C 6400                       		bcc.s	locret_13580
0001472E 4268 0014                  		clr.w	$14(a0)
00014732 08E8 0001 0022             		bset	#1,$22(a0)
00014738 317C 001E 003E             		move.w	#$1E,$3E(a0)
0001473E                            
0001473E                            locret_13580:
0001473E 4E75                       		rts	
00014740                            ; ===========================================================================
00014740                            
00014740                            loc_13582:
00014740 5368 003E                  		subq.w	#1,$3E(a0)
00014744 4E75                       		rts	
00014746                            ; End of function Sonic_SlopeRepel
00014746                            
00014746                            ; ---------------------------------------------------------------------------
00014746                            ; Subroutine to	return Sonic's angle to 0 as he jumps
00014746                            ; ---------------------------------------------------------------------------
00014746                            
00014746                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014746                            
00014746                            
00014746                            Sonic_JumpAngle:			; XREF: Obj01_MdJump; Obj01_MdJump2
00014746 1028 0026                  		move.b	$26(a0),d0	; get Sonic's angle
0001474A 6700                       		beq.s	locret_135A2	; if already 0,	branch
0001474C 6A00                       		bpl.s	loc_13598	; if higher than 0, branch
0001474E                            
0001474E 5400                       		addq.b	#2,d0		; increase angle
00014750 6400                       		bcc.s	loc_13596
00014752 7000                       		moveq	#0,d0
00014754                            
00014754                            loc_13596:
00014754 6000                       		bra.s	loc_1359E
00014756                            ; ===========================================================================
00014756                            
00014756                            loc_13598:
00014756 5500                       		subq.b	#2,d0		; decrease angle
00014758 6400                       		bcc.s	loc_1359E
0001475A 7000                       		moveq	#0,d0
0001475C                            
0001475C                            loc_1359E:
0001475C 1140 0026                  		move.b	d0,$26(a0)
00014760                            
00014760                            locret_135A2:
00014760 4E75                       		rts	
00014762                            ; End of function Sonic_JumpAngle
00014762                            
00014762                            ; ---------------------------------------------------------------------------
00014762                            ; Subroutine for Sonic to interact with	the floor after	jumping/falling
00014762                            ; ---------------------------------------------------------------------------
00014762                            
00014762                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014762                            
00014762                            
00014762                            Sonic_Floor:				; XREF: Obj01_MdJump; Obj01_MdJump2
00014762 3228 0010                  		move.w	$10(a0),d1
00014766 3428 0012                  		move.w	$12(a0),d2
0001476A 4EB9 0000 36A8             		jsr	(CalcAngle).l
00014770 11C0 FFEC                  		move.b	d0,($FFFFFFEC).w
00014774 0400 0020                  		subi.b	#$20,d0
00014778 11C0 FFED                  		move.b	d0,($FFFFFFED).w
0001477C 0200 00C0                  		andi.b	#$C0,d0
00014780 11C0 FFEE                  		move.b	d0,($FFFFFFEE).w
00014784 0C00 0040                  		cmpi.b	#$40,d0
00014788 6700 0000                  		beq.w	loc_13680
0001478C 0C00 0080                  		cmpi.b	#$80,d0
00014790 6700 0000                  		beq.w	loc_136E2
00014794 0C00 00C0                  		cmpi.b	#-$40,d0
00014798 6700 0000                  		beq.w	loc_1373E
0001479C 6100 0000                  		bsr.w	Sonic_HitWall
000147A0 4A41                       		tst.w	d1
000147A2 6A00                       		bpl.s	loc_135F0
000147A4 9368 0008                  		sub.w	d1,8(a0)
000147A8 317C 0000 0010             		move.w	#0,$10(a0)
000147AE                            
000147AE                            loc_135F0:
000147AE 6100 0000                  		bsr.w	sub_14EB4
000147B2 4A41                       		tst.w	d1
000147B4 6A00                       		bpl.s	loc_13602
000147B6 D368 0008                  		add.w	d1,8(a0)
000147BA 317C 0000 0010             		move.w	#0,$10(a0)
000147C0                            
000147C0                            loc_13602:
000147C0 6100 0000                  		bsr.w	Sonic_HitFloor
000147C4 11C1 FFEF                  		move.b	d1,($FFFFFFEF).w
000147C8 4A41                       		tst.w	d1
000147CA 6A00                       		bpl.s	locret_1367E
000147CC 1428 0012                  		move.b	$12(a0),d2
000147D0 5002                       		addq.b	#8,d2
000147D2 4402                       		neg.b	d2
000147D4 B202                       		cmp.b	d2,d1
000147D6 6C00                       		bge.s	loc_1361E
000147D8 B002                       		cmp.b	d2,d0
000147DA 6D00                       		blt.s	locret_1367E
000147DC                            
000147DC                            loc_1361E:
000147DC D368 000C                  		add.w	d1,$C(a0)
000147E0 1143 0026                  		move.b	d3,$26(a0)
000147E4 6100 0000                  		bsr.w	Sonic_ResetOnFloor
000147E8 117C 0000 001C             		move.b	#0,$1C(a0)
000147EE 1003                       		move.b	d3,d0
000147F0 0600 0020                  		addi.b	#$20,d0
000147F4 0200 0040                  		andi.b	#$40,d0
000147F8 6600                       		bne.s	loc_1365C
000147FA 1003                       		move.b	d3,d0
000147FC 0600 0010                  		addi.b	#$10,d0
00014800 0200 0020                  		andi.b	#$20,d0
00014804 6700                       		beq.s	loc_1364E
00014806 E0E8 0012                  		asr	$12(a0)
0001480A 6000                       		bra.s	loc_13670
0001480C                            ; ===========================================================================
0001480C                            
0001480C                            loc_1364E:
0001480C 317C 0000 0012             		move.w	#0,$12(a0)
00014812 3168 0010 0014             		move.w	$10(a0),$14(a0)
00014818 4E75                       		rts	
0001481A                            ; ===========================================================================
0001481A                            
0001481A                            loc_1365C:
0001481A 317C 0000 0010             		move.w	#0,$10(a0)
00014820 0C68 0FC0 0012             		cmpi.w	#$FC0,$12(a0)
00014826 6F00                       		ble.s	loc_13670
00014828 317C 0FC0 0012             		move.w	#$FC0,$12(a0)
0001482E                            
0001482E                            loc_13670:
0001482E 3168 0012 0014             		move.w	$12(a0),$14(a0)
00014834 4A03                       		tst.b	d3
00014836 6A00                       		bpl.s	locret_1367E
00014838 4468 0014                  		neg.w	$14(a0)
0001483C                            
0001483C                            locret_1367E:
0001483C 4E75                       		rts	
0001483E                            ; ===========================================================================
0001483E                            
0001483E                            loc_13680:
0001483E 6100 0000                  		bsr.w	Sonic_HitWall
00014842 4A41                       		tst.w	d1
00014844 6A00                       		bpl.s	loc_1369A
00014846 9368 0008                  		sub.w	d1,8(a0)
0001484A 317C 0000 0010             		move.w	#0,$10(a0)
00014850 3168 0012 0014             		move.w	$12(a0),$14(a0)
00014856 4E75                       		rts	
00014858                            ; ===========================================================================
00014858                            
00014858                            loc_1369A:
00014858 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
0001485C 4A41                       		tst.w	d1
0001485E 6A00                       		bpl.s	loc_136B4
00014860 9368 000C                  		sub.w	d1,$C(a0)
00014864 4A68 0012                  		tst.w	$12(a0)
00014868 6A00                       		bpl.s	locret_136B2
0001486A 317C 0000 0012             		move.w	#0,$12(a0)
00014870                            
00014870                            locret_136B2:
00014870 4E75                       		rts	
00014872                            ; ===========================================================================
00014872                            
00014872                            loc_136B4:
00014872 4A68 0012                  		tst.w	$12(a0)
00014876 6B00                       		bmi.s	locret_136E0
00014878 6100 0000                  		bsr.w	Sonic_HitFloor
0001487C 4A41                       		tst.w	d1
0001487E 6A00                       		bpl.s	locret_136E0
00014880 D368 000C                  		add.w	d1,$C(a0)
00014884 1143 0026                  		move.b	d3,$26(a0)
00014888 6100 0000                  		bsr.w	Sonic_ResetOnFloor
0001488C 117C 0000 001C             		move.b	#0,$1C(a0)
00014892 317C 0000 0012             		move.w	#0,$12(a0)
00014898 3168 0010 0014             		move.w	$10(a0),$14(a0)
0001489E                            
0001489E                            locret_136E0:
0001489E 4E75                       		rts	
000148A0                            ; ===========================================================================
000148A0                            
000148A0                            loc_136E2:
000148A0 6100 0000                  		bsr.w	Sonic_HitWall
000148A4 4A41                       		tst.w	d1
000148A6 6A00                       		bpl.s	loc_136F4
000148A8 9368 0008                  		sub.w	d1,8(a0)
000148AC 317C 0000 0010             		move.w	#0,$10(a0)
000148B2                            
000148B2                            loc_136F4:
000148B2 6100 0000                  		bsr.w	sub_14EB4
000148B6 4A41                       		tst.w	d1
000148B8 6A00                       		bpl.s	loc_13706
000148BA D368 0008                  		add.w	d1,8(a0)
000148BE 317C 0000 0010             		move.w	#0,$10(a0)
000148C4                            
000148C4                            loc_13706:
000148C4 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
000148C8 4A41                       		tst.w	d1
000148CA 6A00                       		bpl.s	locret_1373C
000148CC 9368 000C                  		sub.w	d1,$C(a0)
000148D0 1003                       		move.b	d3,d0
000148D2 0600 0020                  		addi.b	#$20,d0
000148D6 0200 0040                  		andi.b	#$40,d0
000148DA 6600                       		bne.s	loc_13726
000148DC 317C 0000 0012             		move.w	#0,$12(a0)
000148E2 4E75                       		rts	
000148E4                            ; ===========================================================================
000148E4                            
000148E4                            loc_13726:
000148E4 1143 0026                  		move.b	d3,$26(a0)
000148E8 6100 0000                  		bsr.w	Sonic_ResetOnFloor
000148EC 3168 0012 0014             		move.w	$12(a0),$14(a0)
000148F2 4A03                       		tst.b	d3
000148F4 6A00                       		bpl.s	locret_1373C
000148F6 4468 0014                  		neg.w	$14(a0)
000148FA                            
000148FA                            locret_1373C:
000148FA 4E75                       		rts	
000148FC                            ; ===========================================================================
000148FC                            
000148FC                            loc_1373E:
000148FC 6100 0000                  		bsr.w	sub_14EB4
00014900 4A41                       		tst.w	d1
00014902 6A00                       		bpl.s	loc_13758
00014904 D368 0008                  		add.w	d1,8(a0)
00014908 317C 0000 0010             		move.w	#0,$10(a0)
0001490E 3168 0012 0014             		move.w	$12(a0),$14(a0)
00014914 4E75                       		rts	
00014916                            ; ===========================================================================
00014916                            
00014916                            loc_13758:
00014916 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
0001491A 4A41                       		tst.w	d1
0001491C 6A00                       		bpl.s	loc_13772
0001491E 9368 000C                  		sub.w	d1,$C(a0)
00014922 4A68 0012                  		tst.w	$12(a0)
00014926 6A00                       		bpl.s	locret_13770
00014928 317C 0000 0012             		move.w	#0,$12(a0)
0001492E                            
0001492E                            locret_13770:
0001492E 4E75                       		rts	
00014930                            ; ===========================================================================
00014930                            
00014930                            loc_13772:
00014930 4A68 0012                  		tst.w	$12(a0)
00014934 6B00                       		bmi.s	locret_1379E
00014936 6100 0000                  		bsr.w	Sonic_HitFloor
0001493A 4A41                       		tst.w	d1
0001493C 6A00                       		bpl.s	locret_1379E
0001493E D368 000C                  		add.w	d1,$C(a0)
00014942 1143 0026                  		move.b	d3,$26(a0)
00014946 6100 0000                  		bsr.w	Sonic_ResetOnFloor
0001494A 117C 0000 001C             		move.b	#0,$1C(a0)
00014950 317C 0000 0012             		move.w	#0,$12(a0)
00014956 3168 0010 0014             		move.w	$10(a0),$14(a0)
0001495C                            
0001495C                            locret_1379E:
0001495C 4E75                       		rts	
0001495E                            ; End of function Sonic_Floor
0001495E                            
0001495E                            ; ---------------------------------------------------------------------------
0001495E                            ; Subroutine to	reset Sonic's mode when he lands on the floor
0001495E                            ; ---------------------------------------------------------------------------
0001495E                            
0001495E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001495E                            
0001495E                            
0001495E                            Sonic_ResetOnFloor:			; XREF: PlatformObject; et al
0001495E 0828 0004 0022             		btst	#4,$22(a0)
00014964 6700                       		beq.s	loc_137AE
00014966 4E71                       		nop	
00014968 4E71                       		nop	
0001496A 4E71                       		nop	
0001496C                            
0001496C                            loc_137AE:
0001496C 08A8 0005 0022             		bclr	#5,$22(a0)
00014972 08A8 0001 0022             		bclr	#1,$22(a0)
00014978 08A8 0004 0022             		bclr	#4,$22(a0)
0001497E 0828 0002 0022             		btst	#2,$22(a0)
00014984 6700                       		beq.s	loc_137E4
00014986 08A8 0002 0022             		bclr	#2,$22(a0)
0001498C 117C 0013 0016             		move.b	#$13,$16(a0)
00014992 117C 0009 0017             		move.b	#9,$17(a0)
00014998 117C 0000 001C             		move.b	#0,$1C(a0)	; use running/walking animation
0001499E 5B68 000C                  		subq.w	#5,$C(a0)
000149A2                            
000149A2                            loc_137E4:
000149A2 117C 0000 003C             		move.b	#0,$3C(a0)
000149A8 31FC 0000 F7D0             		move.w	#0,($FFFFF7D0).w
000149AE 4E75                       		rts	
000149B0                            ; End of function Sonic_ResetOnFloor
000149B0                            
000149B0                            ; ===========================================================================
000149B0                            ; ---------------------------------------------------------------------------
000149B0                            ; Sonic	when he	gets hurt
000149B0                            ; ---------------------------------------------------------------------------
000149B0                            
000149B0                            Obj01_Hurt:				; XREF: Obj01_Index
000149B0 4EBA 96FE                  		jsr	SpeedToPos
000149B4 0668 0030 0012             		addi.w	#$30,$12(a0)
000149BA 0828 0006 0022             		btst	#6,$22(a0)
000149C0 6700                       		beq.s	loc_1380C
000149C2 0468 0020 0012             		subi.w	#$20,$12(a0)
000149C8                            
000149C8                            loc_1380C:
000149C8 6100 0000                  		bsr.w	Sonic_HurtStop
000149CC 6100 F500                  		bsr.w	Sonic_LevelBound
000149D0 6100 EEC6                  		bsr.w	Sonic_RecordPos
000149D4 6100 EEDC                  		bsr.w	Sonic_Water		
000149D8 6100 0000                  		bsr.w	Sonic_Animate
000149DC 6100 0000                  		bsr.w	LoadSonicDynPLC
000149E0 4EFA 96F4                  		jmp	DisplaySprite
000149E4                            
000149E4                            ; ---------------------------------------------------------------------------
000149E4                            ; Subroutine to	stop Sonic falling after he's been hurt
000149E4                            ; ---------------------------------------------------------------------------
000149E4                            
000149E4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000149E4                            
000149E4                            
000149E4                            Sonic_HurtStop:				; XREF: Obj01_Hurt
000149E4 3038 F72E                  		move.w	($FFFFF72E).w,d0
000149E8 0640 00E0                  		addi.w	#$E0,d0
000149EC B068 000C                  		cmp.w	$C(a0),d0
000149F0 6500 F51E                  		bcs.w	Jmp_KillSonic
000149F4 6100 FD6C                  		bsr.w	Sonic_Floor
000149F8 0828 0001 0022             		btst	#1,$22(a0)
000149FE 6600                       		bne.s	locret_13860
00014A00 7000                       		moveq	#0,d0
00014A02 3140 0012                  		move.w	d0,$12(a0)
00014A06 3140 0010                  		move.w	d0,$10(a0)
00014A0A 3140 0014                  		move.w	d0,$14(a0)
00014A0E 117C 0000 001C             		move.b	#0,$1C(a0)
00014A14 5528 0024                  		subq.b	#2,$24(a0)
00014A18 317C 0078 0030             		move.w	#$78,$30(a0)
00014A1E                            
00014A1E                            locret_13860:
00014A1E 4E75                       		rts	
00014A20                            ; End of function Sonic_HurtStop
00014A20                            
00014A20                            ; ===========================================================================
00014A20                            ; ---------------------------------------------------------------------------
00014A20                            ; Sonic	when he	dies
00014A20                            ; ---------------------------------------------------------------------------
00014A20                            
00014A20                            Obj01_Death:				; XREF: Obj01_Index
00014A20 6100 0000                  		bsr.w	GameOver
00014A24 4EBA 965E                  		jsr	ObjectFall
00014A28 6100 EE6E                  		bsr.w	Sonic_RecordPos
00014A2C 6100 0000                  		bsr.w	Sonic_Animate
00014A30 6100 0000                  		bsr.w	LoadSonicDynPLC
00014A34 4EFA 96A0                  		jmp	DisplaySprite
00014A38                            
00014A38                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014A38                            
00014A38                            
00014A38                            GameOver:				; XREF: Obj01_Death
00014A38 3038 F72E                  		move.w	($FFFFF72E).w,d0
00014A3C 0640 0100                  		addi.w	#$100,d0
00014A40 B068 000C                  		cmp.w	$C(a0),d0
00014A44 6C00 0000                  		bge.w	locret_13900
00014A48 317C FFC8 0012             		move.w	#-$38,$12(a0)
00014A4E 5428 0024                  		addq.b	#2,$24(a0)
00014A52 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
00014A56 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; update lives	counter
00014A5A 5338 FE12                  		subq.b	#1,($FFFFFE12).w ; subtract 1 from number of lives
00014A5E 6600                       		bne.s	loc_138D4
00014A60 317C 0000 003A             		move.w	#0,$3A(a0)
00014A66 11FC 0039 D080             		move.b	#$39,($FFFFD080).w ; load GAME object
00014A6C 11FC 0039 D0C0             		move.b	#$39,($FFFFD0C0).w ; load OVER object
00014A72 11FC 0001 D0DA             		move.b	#1,($FFFFD0DA).w ; set OVER object to correct frame
00014A78 4238 FE1A                  		clr.b	($FFFFFE1A).w
00014A7C                            
00014A7C                            loc_138C2:
00014A7C 303C 008F                  		move.w	#$8F,d0
00014A80 4EB9 0000 1476             		jsr	(PlaySound).l	; play game over music
00014A86 7003                       		moveq	#3,d0
00014A88 4EF9 0000 16F0             		jmp	(LoadPLC).l	; load game over patterns
00014A8E                            ; ===========================================================================
00014A8E                            
00014A8E                            loc_138D4:
00014A8E 317C 003C 003A             		move.w	#60,$3A(a0)	; set time delay to 1 second
00014A94 4A38 FE1A                  		tst.b	($FFFFFE1A).w	; is TIME OVER tag set?
00014A98 6700                       		beq.s	locret_13900	; if not, branch
00014A9A 317C 0000 003A             		move.w	#0,$3A(a0)
00014AA0 11FC 0039 D080             		move.b	#$39,($FFFFD080).w ; load TIME object
00014AA6 11FC 0039 D0C0             		move.b	#$39,($FFFFD0C0).w ; load OVER object
00014AAC 11FC 0002 D09A             		move.b	#2,($FFFFD09A).w
00014AB2 11FC 0003 D0DA             		move.b	#3,($FFFFD0DA).w
00014AB8 60C2                       		bra.s	loc_138C2
00014ABA                            ; ===========================================================================
00014ABA                            
00014ABA                            locret_13900:
00014ABA 4E75                       		rts	
00014ABC                            ; End of function GameOver
00014ABC                            
00014ABC                            ; ===========================================================================
00014ABC                            ; ---------------------------------------------------------------------------
00014ABC                            ; Sonic	when the level is restarted
00014ABC                            ; ---------------------------------------------------------------------------
00014ABC                            
00014ABC                            Obj01_ResetLevel:			; XREF: Obj01_Index
00014ABC 4A68 003A                  		tst.w	$3A(a0)
00014AC0 6700                       		beq.s	locret_13914
00014AC2 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time delay
00014AC6 6600                       		bne.s	locret_13914
00014AC8 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart the level
00014ACE                            
00014ACE                            locret_13914:
00014ACE 4E75                       		rts	
00014AD0                            
00014AD0                            ; ---------------------------------------------------------------------------
00014AD0                            ; Subroutine to	make Sonic run around loops (GHZ/SLZ)
00014AD0                            ; ---------------------------------------------------------------------------
00014AD0                            
00014AD0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014AD0                            
00014AD0                            
00014AD0                            Sonic_Loops:				; XREF: Obj01_Control
00014AD0 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; is level SLZ	?
00014AD6 6700                       		beq.s	loc_13926	; if yes, branch
00014AD8 4A38 FE10                  		tst.b	($FFFFFE10).w	; is level GHZ ?
00014ADC 6600 0000                  		bne.w	locret_139C2	; if not, branch
00014AE0                            
00014AE0                            loc_13926:
00014AE0 3028 000C                  		move.w	$C(a0),d0
00014AE4 E248                       		lsr.w	#1,d0
00014AE6 0240 0380                  		andi.w	#$380,d0
00014AEA 1228 0008                  		move.b	8(a0),d1
00014AEE 0241 007F                  		andi.w	#$7F,d1
00014AF2 D041                       		add.w	d1,d0
00014AF4 43F8 A400                  		lea	($FFFFA400).w,a1
00014AF8 1231 0000                  		move.b	(a1,d0.w),d1	; d1 is	the 256x256 tile Sonic is currently on
00014AFC B238 F7AE                  		cmp.b	($FFFFF7AE).w,d1
00014B00 6700 F486                  		beq.w	Obj01_ChkRoll
00014B04 B238 F7AF                  		cmp.b	($FFFFF7AF).w,d1
00014B08 6700 F47E                  		beq.w	Obj01_ChkRoll
00014B0C B238 F7AC                  		cmp.b	($FFFFF7AC).w,d1
00014B10 6700                       		beq.s	loc_13976
00014B12 B238 F7AD                  		cmp.b	($FFFFF7AD).w,d1
00014B16 6700                       		beq.s	loc_13966
00014B18 08A8 0006 0001             		bclr	#6,1(a0)
00014B1E 4E75                       		rts	
00014B20                            ; ===========================================================================
00014B20                            
00014B20                            loc_13966:
00014B20 0828 0001 0022             		btst	#1,$22(a0)
00014B26 6700                       		beq.s	loc_13976
00014B28 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
00014B2E 4E75                       		rts	
00014B30                            ; ===========================================================================
00014B30                            
00014B30                            loc_13976:
00014B30 3428 0008                  		move.w	8(a0),d2
00014B34 0C02 002C                  		cmpi.b	#$2C,d2
00014B38 6400                       		bcc.s	loc_13988
00014B3A 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
00014B40 4E75                       		rts	
00014B42                            ; ===========================================================================
00014B42                            
00014B42                            loc_13988:
00014B42 0C02 00E0                  		cmpi.b	#-$20,d2
00014B46 6500                       		bcs.s	loc_13996
00014B48 08E8 0006 0001             		bset	#6,1(a0)	; send Sonic to	low plane
00014B4E 4E75                       		rts	
00014B50                            ; ===========================================================================
00014B50                            
00014B50                            loc_13996:
00014B50 0828 0006 0001             		btst	#6,1(a0)
00014B56 6600                       		bne.s	loc_139B2
00014B58 1228 0026                  		move.b	$26(a0),d1
00014B5C 6700                       		beq.s	locret_139C2
00014B5E 0C01 0080                  		cmpi.b	#-$80,d1
00014B62 6200                       		bhi.s	locret_139C2
00014B64 08E8 0006 0001             		bset	#6,1(a0)	; send Sonic to	low plane
00014B6A 4E75                       		rts	
00014B6C                            ; ===========================================================================
00014B6C                            
00014B6C                            loc_139B2:
00014B6C 1228 0026                  		move.b	$26(a0),d1
00014B70 0C01 0080                  		cmpi.b	#-$80,d1
00014B74 6300                       		bls.s	locret_139C2
00014B76 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
00014B7C                            
00014B7C                            locret_139C2:
00014B7C 4E75                       		rts	
00014B7E                            ; End of function Sonic_Loops
00014B7E                            
00014B7E                            ; ---------------------------------------------------------------------------
00014B7E                            ; Sonic when he's drowning
00014B7E                            ; ---------------------------------------------------------------------------
00014B7E                             
00014B7E                            ; ||||||||||||||| S	U B	R O	U T	I N	E |||||||||||||||||||||||||||||||||||||||
00014B7E                             
00014B7E                             
00014B7E                            Sonic_Drowned:
00014B7E 6100 9530                  		bsr.w   SpeedToPos		; Make Sonic able to move
00014B82 0668 0010 0012             		addi.w  #$10,$12(a0)	; Apply gravity
00014B88 6100 ED0E                  		bsr.w   Sonic_RecordPos	; Record position
00014B8C 6100                       		bsr.s   Sonic_Animate	; Animate Sonic
00014B8E 6100 0000                  		bsr.w   LoadSonicDynPLC	; Load Sonic's DPLCs
00014B92 6000 9542                  		bra.w   DisplaySprite	; And finally, display Sonic
00014B96                            
00014B96                            ; ---------------------------------------------------------------------------
00014B96                            ; Subroutine to animate Sonic's sprites
00014B96                            ; See also: AnimateSprite
00014B96                            ; ---------------------------------------------------------------------------
00014B96                            
00014B96                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
00014B96                            
00014B96                            ; loc_1B350:
00014B96                            Sonic_Animate:
00014B96 43F9 0000 0000             	lea	(SonicAniData).l,a1
00014B9C 4A38 FE19                  	tst.b	(Super_Sonic_flag).w
00014BA0 6700                       	beq.s	loc1
00014BA2 43F9 0000 0000             	lea	(SuperSonicAniData).l,a1
00014BA8                            loc1
00014BA8 7000                       	moveq	#0,d0
00014BAA 1028 001C                  	move.b	anim(a0),d0
00014BAE B028 001D                  	cmp.b	next_anim(a0),d0	; has animation changed?
00014BB2 6700                       	beq.s	SAnim_Do		; if not, branch
00014BB4 1140 001D                  	move.b	d0,next_anim(a0)	; set to next animation
00014BB8 117C 0000 001B             	move.b	#0,anim_frame(a0)	; reset animation frame
00014BBE 117C 0000 001E             	move.b	#0,anim_frame_duration(a0)	; reset frame duration
00014BC4 08A8 0005 0022             	bclr	#5,status(a0)
00014BCA                            ; loc_1B384:
00014BCA                            SAnim_Do:
00014BCA D040                       	add.w	d0,d0
00014BCC D2F1 0000                  	adda.w	(a1,d0.w),a1	; calculate address of appropriate animation script
00014BD0 1011                       	move.b	(a1),d0
00014BD2 6B00                       	bmi.s	SAnim_WalkRun	; if animation is walk/run/roll/jump, branch
00014BD4 1228 0022                  	move.b	status(a0),d1
00014BD8 0201 0001                  	andi.b	#1,d1
00014BDC 0228 00FC 0001             	andi.b	#$FC,render_flags(a0)
00014BE2 8328 0001                  	or.b	d1,render_flags(a0)
00014BE6 5328 001E                  	subq.b	#1,anim_frame_duration(a0)	; subtract 1 from frame duration
00014BEA 6A00                       	bpl.s	SAnim_Delay			; if time remains, branch
00014BEC 1140 001E                  	move.b	d0,anim_frame_duration(a0)	; load frame duration
00014BF0                            ; loc_1B3AA:
00014BF0                            SAnim_Do2:
00014BF0 7200                       	moveq	#0,d1
00014BF2 1228 001B                  	move.b	anim_frame(a0),d1	; load current frame number
00014BF6 1031 1001                  	move.b	1(a1,d1.w),d0		; read sprite number from script
00014BFA 0C00 00F0                  	cmpi.b	#$F0,d0
00014BFE 6400                       	bcc.s	SAnim_End_FF		; if animation is complete, branch
00014C00                            ; loc_1B3BA:
00014C00                            SAnim_Next:
00014C00 1140 001A                  	move.b	d0,mapping_frame(a0)	; load sprite number
00014C04 5228 001B                  	addq.b	#1,anim_frame(a0)	; go to next frame
00014C08                            ; return_1B3C2:
00014C08                            SAnim_Delay:
00014C08 4E75                       	rts
00014C0A                            ; ===========================================================================
00014C0A                            ; loc_1B3C4:
00014C0A                            SAnim_End_FF:
00014C0A 5200                       	addq.b	#1,d0		; is the end flag = $FF ?
00014C0C 6600                       	bne.s	SAnim_End_FE	; if not, branch
00014C0E 117C 0000 001B             	move.b	#0,anim_frame(a0)	; restart the animation
00014C14 1029 0001                  	move.b	1(a1),d0	; read sprite number
00014C18 60E6                       	bra.s	SAnim_Next
00014C1A                            ; ===========================================================================
00014C1A                            ; loc_1B3D4:
00014C1A                            SAnim_End_FE:
00014C1A 5200                       	addq.b	#1,d0		; is the end flag = $FE ?
00014C1C 6600                       	bne.s	SAnim_End_FD	; if not, branch
00014C1E 1031 1002                  	move.b	2(a1,d1.w),d0	; read the next byte in the script
00014C22 9128 001B                  	sub.b	d0,anim_frame(a0)	; jump back d0 bytes in the script
00014C26 9200                       	sub.b	d0,d1
00014C28 1031 1001                  	move.b	1(a1,d1.w),d0	; read sprite number
00014C2C 60D2                       	bra.s	SAnim_Next
00014C2E                            ; ===========================================================================
00014C2E                            ; loc_1B3E8:
00014C2E                            SAnim_End_FD:
00014C2E 5200                       	addq.b	#1,d0			; is the end flag = $FD ?
00014C30 6600                       	bne.s	SAnim_End		; if not, branch
00014C32 1171 1002 001C             	move.b	2(a1,d1.w),anim(a0)	; read next byte, run that animation
00014C38                            ; return_1B3F2:
00014C38                            SAnim_End:
00014C38 4E75                       	rts
00014C3A                            ; ===========================================================================
00014C3A                            ; loc_1B3F4:
00014C3A                            SAnim_WalkRun:
00014C3A 5200                       	addq.b	#1,d0		; is the start flag = $FF ?
00014C3C 6600 0000                  	bne.w	SAnim_Roll	; if not, branch
00014C40 7000                       	moveq	#0,d0		; is animation walking/running?
00014C42 1028 0027                  	move.b	flip_angle(a0),d0	; if not, branch
00014C46 6600 0000                  	bne.w	SAnim_Tumble
00014C4A 7200                       	moveq	#0,d1
00014C4C 1028 0026                  	move.b	angle(a0),d0	; get Sonic's angle
00014C50 6B00                       	bmi.s	loc2
00014C52 6700                       	beq.s	loc2
00014C54 5300                       	subq.b	#1,d0
00014C56                            loc2
00014C56 1428 0022                  	move.b	status(a0),d2
00014C5A 0202 0001                  	andi.b	#1,d2		; is Sonic mirrored horizontally?
00014C5E 6600                       	bne.s	loc3		; if yes, branch
00014C60 4600                       	not.b	d0		; reverse angle
00014C62                            loc3
00014C62 0600 0010                  	addi.b	#$10,d0		; add $10 to angle
00014C66 6A00                       	bpl.s	loc4		; if angle is $0-$7F, branch
00014C68 7203                       	moveq	#3,d1
00014C6A                            loc4
00014C6A 0228 00FC 0001             	andi.b	#$FC,render_flags(a0)
00014C70 B302                       	eor.b	d1,d2
00014C72 8528 0001                  	or.b	d2,render_flags(a0)
00014C76 0828 0005 0022             	btst	#5,status(a0)
00014C7C 6600 0000                  	bne.w	SAnim_Push
00014C80 E808                       	lsr.b	#4,d0		; divide angle by 16
00014C82 0200 0006                  	andi.b	#6,d0		; angle must be 0, 2, 4 or 6
00014C86 3428 0014                  	move.w	inertia(a0),d2	; get Sonic's "speed" for animation purposes
00014C8A 6A00                       	bpl.s	loc5
00014C8C 4442                       	neg.w	d2
00014C8E                            loc5
00014C8E 4A28 002B                  	tst.b	status_secondary(a0)
00014C92 6A00 0000                  	bpl.w	loc6
00014C96 D442                       	add.w	d2,d2
00014C98                            loc6
00014C98 4A38 FE19                  	tst.b	(Super_Sonic_flag).w
00014C9C 6600                       	bne.s	SAnim_Super
00014C9E 43F9 0000 0000             	lea	(SonAni_Run).l,a1	; use running animation
00014CA4 0C42 0600                  	cmpi.w	#$600,d2		; is Sonic at running speed?
00014CA8 6400                       	bcc.s	loc7			; use running animation
00014CAA 43F9 0000 0000             	lea	(SonAni_Walk).l,a1	; if yes, branch
00014CB0 D000                       	add.b	d0,d0
00014CB2                            loc7
00014CB2 D000                       	add.b	d0,d0
00014CB4 1600                       	move.b	d0,d3
00014CB6 7200                       	moveq	#0,d1
00014CB8 1228 001B                  	move.b	anim_frame(a0),d1
00014CBC 1031 1001                  	move.b	1(a1,d1.w),d0
00014CC0 0C00 00FF                  	cmpi.b	#-1,d0
00014CC4 6600                       	bne.s	loc8
00014CC6 117C 0000 001B             	move.b	#0,anim_frame(a0)
00014CCC 1029 0001                  	move.b	1(a1),d0
00014CD0                            loc8
00014CD0 1140 001A                  	move.b	d0,mapping_frame(a0)
00014CD4 D728 001A                  	add.b	d3,mapping_frame(a0)
00014CD8 5328 001E                  	subq.b	#1,anim_frame_duration(a0)
00014CDC 6A00                       	bpl.s	return_1B4AC
00014CDE 4442                       	neg.w	d2
00014CE0 0642 0800                  	addi.w	#$800,d2
00014CE4 6A00                       	bpl.s	loc81
00014CE6 7400                       	moveq	#0,d2
00014CE8                            loc81
00014CE8 E04A                       	lsr.w	#8,d2
00014CEA 1142 001E                  	move.b	d2,anim_frame_duration(a0)	; modify frame duration
00014CEE 5228 001B                  	addq.b	#1,anim_frame(a0)		; modify frame number
00014CF2                            
00014CF2                            return_1B4AC:
00014CF2 4E75                       	rts
00014CF4                            ; ===========================================================================
00014CF4                            ; loc_1B4AE:
00014CF4                            SAnim_Super:
00014CF4 43F9 0000 0000             	lea	(SupSonAni_Run).l,a1	; use fast animation
00014CFA 0C42 0800                  	cmpi.w	#$800,d2		; is Sonic moving fast?
00014CFE 6400                       	bcc.s	SAnim_SuperRun		; if yes, branch
00014D00 43F9 0000 0000             	lea	(SupSonAni_Walk).l,a1	; use slower animation
00014D06 D000                       	add.b	d0,d0
00014D08 D000                       	add.b	d0,d0
00014D0A 6000                       	bra.s	SAnim_SuperWalk
00014D0C                            ; ---------------------------------------------------------------------------
00014D0C                            ; loc_1B4C6:
00014D0C                            SAnim_SuperRun:
00014D0C E208                       	lsr.b	#1,d0
00014D0E                            ; loc_1B4C8:
00014D0E                            SAnim_SuperWalk:
00014D0E 1600                       	move.b	d0,d3
00014D10 7200                       	moveq	#0,d1
00014D12 1228 001B                  	move.b	anim_frame(a0),d1
00014D16 1031 1001                  	move.b	1(a1,d1.w),d0
00014D1A 0C00 00FF                  	cmpi.b	#-1,d0
00014D1E 6600                       	bne.s	loc9
00014D20 117C 0000 001B             	move.b	#0,anim_frame(a0)
00014D26 1029 0001                  	move.b	1(a1),d0
00014D2A                            loc9
00014D2A 1140 001A                  	move.b	d0,mapping_frame(a0)
00014D2E D728 001A                  	add.b	d3,mapping_frame(a0)
00014D32 1238 FE05                  	move.b	($FFFFFE05).w,d1
00014D36 0201 0003                  	andi.b	#3,d1
00014D3A 6600                       	bne.s	loc10
00014D3C 0C28 00B5 001A             	cmpi.b	#-$4B,mapping_frame(a0)
00014D42 6400                       	bcc.s	loc10
00014D44 0628 0020 001A             	addi.b	#$20,mapping_frame(a0)
00014D4A                            loc10
00014D4A 5328 001E                  	subq.b	#1,anim_frame_duration(a0)
00014D4E 6A00                       	bpl.s	return_1B51E
00014D50 4442                       	neg.w	d2
00014D52 0642 0800                  	addi.w	#$800,d2
00014D56 6A00                       	bpl.s	loc11
00014D58 7400                       	moveq	#0,d2
00014D5A                            loc11
00014D5A E04A                       	lsr.w	#8,d2
00014D5C 1142 001E                  	move.b	d2,anim_frame_duration(a0)
00014D60 5228 001B                  	addq.b	#1,anim_frame(a0)
00014D64                            
00014D64                            return_1B51E:
00014D64 4E75                       	rts
00014D66                            ; ===========================================================================
00014D66                            ; loc_1B520:
00014D66                            SAnim_Tumble:
00014D66 1028 0027                  	move.b	flip_angle(a0),d0
00014D6A 7200                       	moveq	#0,d1
00014D6C 1428 0022                  	move.b	status(a0),d2
00014D70 0202 0001                  	andi.b	#1,d2
00014D74 6600                       	bne.s	SAnim_Tumble_Left
00014D76                            
00014D76 0228 00FC 0001             	andi.b	#$FC,render_flags(a0)
00014D7C 0600 000B                  	addi.b	#$B,d0
00014D80 80FC 0016                  	divu.w	#$16,d0
00014D84 0600 005F                  	addi.b	#$5F,d0
00014D88 1140 001A                  	move.b	d0,mapping_frame(a0)
00014D8C 117C 0000 001E             	move.b	#0,anim_frame_duration(a0)
00014D92 4E75                       	rts
00014D94                            ; ===========================================================================
00014D94                            ; loc_1B54E:
00014D94                            SAnim_Tumble_Left:
00014D94 0228 00FC 0001             	andi.b	#$FC,render_flags(a0)
00014D9A 4A28 0029                  	tst.b	flip_turned(a0)
00014D9E 6700                       	beq.s	loc_1B566
00014DA0 0028 0001 0001             	ori.b	#1,render_flags(a0)
00014DA6 0600 000B                  	addi.b	#$B,d0
00014DAA 6000                       	bra.s	loc_1B572
00014DAC                            ; ===========================================================================
00014DAC                            
00014DAC                            loc_1B566:
00014DAC 0028 0003 0001             	ori.b	#3,render_flags(a0)
00014DB2 4400                       	neg.b	d0
00014DB4 0600 008F                  	addi.b	#$8F,d0
00014DB8                            
00014DB8                            loc_1B572:
00014DB8 80FC 0016                  	divu.w	#$16,d0
00014DBC 0600 005F                  	addi.b	#$5F,d0
00014DC0 1140 001A                  	move.b	d0,mapping_frame(a0)
00014DC4 117C 0000 001E             	move.b	#0,anim_frame_duration(a0)
00014DCA 4E75                       	rts
00014DCC                            ; ===========================================================================
00014DCC                            ; loc_1B586:
00014DCC                            SAnim_Roll:
00014DCC 5328 001E                  	subq.b	#1,anim_frame_duration(a0)	; subtract 1 from frame duration
00014DD0 6A00 FE36                  	bpl.w	SAnim_Delay			; if time remains, branch
00014DD4 5200                       	addq.b	#1,d0		; is the start flag = $FE ?
00014DD6 6600                       	bne.s	SAnim_Push	; if not, branch
00014DD8 3428 0014                  	move.w	inertia(a0),d2
00014DDC 6A00                       	bpl.s	loc12
00014DDE 4442                       	neg.w	d2
00014DE0                            loc12
00014DE0 43F9 0000 0000             	lea	(SonAni_Roll2).l,a1
00014DE6 0C42 0600                  	cmpi.w	#$600,d2
00014DEA 6400                       	bcc.s	loc14
00014DEC 43F9 0000 0000             	lea	(SonAni_Roll).l,a1
00014DF2                            loc14
00014DF2 4442                       	neg.w	d2
00014DF4 0642 0400                  	addi.w	#$400,d2
00014DF8 6A00                       	bpl.s	loc15
00014DFA 7400                       	moveq	#0,d2
00014DFC                            loc15
00014DFC E04A                       	lsr.w	#8,d2
00014DFE 1142 001E                  	move.b	d2,anim_frame_duration(a0)
00014E02 1228 0022                  	move.b	status(a0),d1
00014E06 0201 0001                  	andi.b	#1,d1
00014E0A 0228 00FC 0001             	andi.b	#$FC,render_flags(a0)
00014E10 8328 0001                  	or.b	d1,render_flags(a0)
00014E14 6000 FDDA                  	bra.w	SAnim_Do2
00014E18                            ; ===========================================================================
00014E18                            
00014E18                            SAnim_Push:
00014E18 5328 001E                  	subq.b	#1,anim_frame_duration(a0)	; subtract 1 from frame duration
00014E1C 6A00 FDEA                  	bpl.w	SAnim_Delay			; if time remains, branch
00014E20 3428 0014                  	move.w	inertia(a0),d2
00014E24 6B00                       	bmi.s	loc16
00014E26 4442                       	neg.w	d2
00014E28                            loc16
00014E28 0642 0800                  	addi.w	#$800,d2
00014E2C 6A00                       	bpl.s	loc17
00014E2E 7400                       	moveq	#0,d2
00014E30                            loc17
00014E30 EC4A                       	lsr.w	#6,d2
00014E32 1142 001E                  	move.b	d2,anim_frame_duration(a0)
00014E36 43F9 0000 0000             	lea	(SonAni_Push).l,a1
00014E3C 4A38 FE19                  	tst.b	(Super_Sonic_flag).w
00014E40 6700                       	beq.s	loc18
00014E42 43F9 0000 0000             	lea	(SupSonAni_Push).l,a1
00014E48                            loc18
00014E48 1228 0022                  	move.b	status(a0),d1
00014E4C 0201 0001                  	andi.b	#1,d1
00014E50 0228 00FC 0001             	andi.b	#$FC,render_flags(a0)
00014E56 8328 0001                  	or.b	d1,render_flags(a0)
00014E5A 6000 FD94                  	bra.w	SAnim_Do2
00014E5E                            ; ===========================================================================
00014E5E                            
00014E5E                            ; ---------------------------------------------------------------------------
00014E5E                            ; Animation script - Sonic
00014E5E                            ; ---------------------------------------------------------------------------
00014E5E                            ; off_1B618:
00014E5E                            SonicAniData:
00014E5E                            	include "_anim\Sonic.asm"
00014E5E                            ; ---------------------------------------------------------------------------
00014E5E                            ; Animation script - Sonic
00014E5E                            ; ---------------------------------------------------------------------------
00014E5E 0000                       		dc.w SonAni_Walk-SonicAniData	; 0
00014E60 0000                       		dc.w SonAni_Run-SonicAniData	; 1
00014E62 0000                       		dc.w SonAni_Roll-SonicAniData	; 2
00014E64 0000                       		dc.w SonAni_Roll2-SonicAniData	; 3
00014E66 0000                       		dc.w SonAni_Push-SonicAniData	; 4
00014E68 0000                       		dc.w SonAni_Wait-SonicAniData	; 5
00014E6A 0000                       		dc.w SonAni_Balance-SonicAniData	; 6
00014E6C 0000                       		dc.w SonAni_LookUp-SonicAniData	; 7
00014E6E 0000                       		dc.w SonAni_Duck-SonicAniData	; 8
00014E70 0000                       		dc.w SonAni_Warp1-SonicAniData	; 9
00014E72 0000                       		dc.w SonAni_Warp2-SonicAniData	; A
00014E74 0000                       		dc.w SonAni_Warp3-SonicAniData	; B
00014E76 0000                       		dc.w SonAni_Warp4-SonicAniData	; C
00014E78 0000                       		dc.w SonAni_Stop-SonicAniData	; D
00014E7A 0000                       		dc.w SonAni_Float1-SonicAniData	; E
00014E7C 0000                       		dc.w SonAni_Float2-SonicAniData	; F
00014E7E 0000                       		dc.w SonAni_Spring-SonicAniData	; 10
00014E80 0000                       		dc.w SonAni_LZHang-SonicAniData	; 11
00014E82 0000                       		dc.w SonAni_Leap1-SonicAniData	; 12
00014E84 0000                       		dc.w SonAni_Leap2-SonicAniData	; 13
00014E86 0000                       		dc.w SonAni_Surf-SonicAniData	; 14
00014E88 0000                       		dc.w SonAni_Bubble-SonicAniData	; 15
00014E8A 0000                       		dc.w SonAni_Death-SonicAniData	; 16
00014E8C 0000                       		dc.w SonAni_Drown-SonicAniData	; 17
00014E8E 0000                       		dc.w SonAni_Hurt-SonicAniData	; 18
00014E90 0000                       		dc.w SonAni_LZSlide-SonicAniData	; 19
00014E92 0000                       		dc.w SonAni_Blank-SonicAniData	; 1A
00014E94 0000                       		dc.w SonAni_Float3-SonicAniData	; 1B
00014E96 0000                       		dc.w SonAni_Float4-SonicAniData	; 1C
00014E98 0000                       		dc.w SonAni_Spindash-SonicAniData	; 1D
00014E9A 0000                       		dc.w SonAni_Blink-SonicAniData	; 1E
00014E9C 0000                       		dc.w SonAni_GetUp-SonicAniData	; 1F
00014E9E 0000                       		dc.w SonAni_Balance2-SonicAniData	; 20
00014EA0 0000                       		dc.w SonAni_Hang-SonicAniData		; 2A
00014EA2 0000                       		dc.w SonAni_Dash2-SonicAniData	; 2B
00014EA4 0000                       		dc.w SonAni_Dash3-SonicAniData	; 2C
00014EA6 0000                       		dc.w SonAni_Hang2-SonicAniData	; 2D
00014EA8 0000                       		dc.w SonAni_DeathBW-SonicAniData	; 2E	
00014EAA 0000                       		dc.w SonAni_Balance3-SonicAniData	; 2F
00014EAC 0000                       		dc.w SonAni_Balance4-SonicAniData	; 30		
00014EAE 0000                       		dc.w SonAni_Lying-SonicAniData	; 31
00014EB0 0000                       		dc.w SonAni_LieDown-SonicAniData	; 32
00014EB2 FF0F 1011 1213 140D 0EFF   SonAni_Walk:	dc.b $FF, $F,$10,$11,$12,$13,$14, $D, $E,$FF
00014EBC FF2D 2E2F 30FF FFFF FFFF   SonAni_Run:	dc.b $FF,$2D,$2E,$2F,$30,$FF,$FF,$FF,$FF,$FF
00014EC6 FE3D 413E 413F 4140 41FF   SonAni_Roll:	dc.b $FE,$3D,$41,$3E,$41,$3F,$41,$40,$41,$FF
00014ED0 FE3D 413E 413F 4140 41FF   SonAni_Roll2:	dc.b $FE,$3D,$41,$3E,$41,$3F,$41,$40,$41,$FF
00014EDA FD48 494A 4BFF FFFF FFFF   SonAni_Push:	dc.b $FD,$48,$49,$4A,$4B,$FF,$FF,$FF,$FF,$FF
00014EE4                            SonAni_Wait:
00014EE4 0501 0101 0101 0101 0101+  	dc.b   5,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1
00014EF4 0101 0101 0101 0101 0101+  	dc.b   1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  2
00014F04 0303 0303 0304 0404 0505+  	dc.b   3,  3,  3,  3,  3,  4,  4,  4,  5,  5,  5,  4,  4,  4,  5,  5
00014F14 0504 0404 0505 0504 0404+  	dc.b   5,  4,  4,  4,  5,  5,  5,  4,  4,  4,  5,  5,  5,  6,  6,  6
00014F24 0606 0606 0606 0604 0404+  	dc.b   6,  6,  6,  6,  6,  6,  6,  4,  4,  4,  5,  5,  5,  4,  4,  4
00014F34 0505 0504 0404 0505 0504+  	dc.b   5,  5,  5,  4,  4,  4,  5,  5,  5,  4,  4,  4,  5,  5,  5,  6
00014F44 0606 0606 0606 0606 0604+  	dc.b   6,  6,  6,  6,  6,  6,  6,  6,  6,  4,  4,  4,  5,  5,  5,  4
00014F54 0404 0505 0504 0404 0505+  	dc.b   4,  4,  5,  5,  5,  4,  4,  4,  5,  5,  5,  4,  4,  4,  5,  5
00014F64 0506 0606 0606 0606 0606+  	dc.b   5,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  4,  4,  4,  5,  5
00014F74 0504 0404 0505 0504 0404+  	dc.b   5,  4,  4,  4,  5,  5,  5,  4,  4,  4,  5,  5,  5,  4,  4,  4
00014F84 0505 0506 0606 0606 0606+  	dc.b   5,  5,  5,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  7,  8,  8
00014F94 0809 0909 FE06             	dc.b   8,  9,  9,  9,$FE,  6
00014F9A 09CC CDCE CDFF             SonAni_Balance:	dc.b   9,$CC,$CD,$CE,$CD,$FF
00014FA0 050B 0CFE 01               SonAni_LookUp:	dc.b   5, $B, $C,$FE,  1
00014FA5 054C 4DFE 01               SonAni_Duck:	dc.b   5,$4C,$4D,$FE,  1
00014FAA 3F33 FF00                  SonAni_Warp1:	dc.b $3F, $33, $FF, 0
00014FAE 3F34 FF00                  SonAni_Warp2:	dc.b $3F, $34, $FF, 0
00014FB2 3F35 FF00                  SonAni_Warp3:	dc.b $3F, $35, $FF, 0
00014FB6 3F36 FF00                  SonAni_Warp4:	dc.b $3F, $36, $FF, 0
00014FBA 0102 FD00                  SonAni_Blink:	dc.b   1,  2,$FD,  0
00014FBE 030A FD00                  SonAni_GetUp:	dc.b   3, $A,$FD,  0
00014FC2 03C8 C9CA CBFF             SonAni_Balance2:    dc.b   3,$C8,$C9,$CA,$CB,$FF
00014FC8 05D2 D3D4 D5FD 00          SonAni_Stop:	dc.b   5,$D2,$D3,$D4,$D5,$FD,  0 ; halt/skidding animation
00014FCF 0754 59FF                  SonAni_Float1:	dc.b   7,$54,$59,$FF
00014FD3 0754 5556 5758 FF          SonAni_Float2:	dc.b   7,$54,$55,$56,$57,$58,$FF
00014FDA 2F5B FD00                  SonAni_Spring:	dc.b $2F,$5B,$FD,  0
00014FDE 0441 42FF                  SonAni_LZHang:	dc.b 4,	$41, $42, $FF
00014FE2 0F43 4343 FE01             SonAni_Leap1:	dc.b $F, $43, $43, $43,	$FE, 1
00014FE8 0F43 44FE 0100             SonAni_Leap2:	dc.b $F, $43, $44, $FE,	1, 0
00014FEE 3F49 FF00                  SonAni_Surf:	dc.b $3F, $49, $FF, 0
00014FF2 0B5A 5A11 12FD 00          SonAni_Bubble:	dc.b  $B,$5A,$5A,$11,$12,$FD,  0 ; breathe
00014FF9 205D FF                    SonAni_Drown:	dc.b $20,$5D,$FF
00014FFC 205C FF                    SonAni_Death:	dc.b $20,$5C,$FF
00014FFF 404E FF                    SonAni_Hurt:	dc.b $40,$4E,$FF
00015002 094E 4FFF                  SonAni_LZSlide:	dc.b   9,$4E,$4F,$FF
00015006 7700 FD00                  SonAni_Blank:	dc.b $77, 0, $FD, 0
0001500A 0042 4342 4442 4542 4642+  SonAni_Spindash: dc.b   0,$42,$43,$42,$44,$42,$45,$42,$46,$42,$47,$FF
00015016 0150 51FF                  SonAni_Hang:	dc.b   1,$50,$51,$FF
0001501A 0F43 4343 FE01             SonAni_Dash2:	dc.b  $F,$43,$43,$43,$FE,  1
00015020 0F43 44FE 01               SonAni_Dash3:	dc.b  $F,$43,$44,$FE,  1
00015025 136B 6CFF                  SonAni_Hang2:	dc.b $13,$6B,$6C,$FF
00015029 205E FF                    SonAni_DeathBW:	dc.b $20,$5E,$FF
0001502C 033C 3D53 3E54 FF00        SonAni_Float3:	dc.b 3,	$3C, $3D, $53, $3E, $54, $FF, 0
00015034 033C FD00                  SonAni_Float4:	dc.b 3,	$3C, $FD, 0
00015038 13D0 D1FF                  SonAni_Balance3:dc.b $13,$D0,$D1,$FF
0001503C 03CF C8C9 CACB FE04        SonAni_Balance4:dc.b   3,$CF,$C8,$C9,$CA,$CB,$FE,  4
00015044 0908 09FF                  SonAni_Lying:	dc.b   9,  8,  9,$FF
00015048 0307 FD00                  SonAni_LieDown:	dc.b   3,  7,$FD,  0
0001504C                            		even
0001504C                            ; ---------------------------------------------------------------------------
0001504C                            ; Animation script - Super Sonic
0001504C                            ; (many of these point to the data above this)
0001504C                            ; ---------------------------------------------------------------------------
0001504C                            SuperSonicAniData:
0001504C 0000                       	dc.w SupSonAni_Walk-SuperSonicAniData		; 0
0001504E 0000                       	dc.w SupSonAni_Run-SuperSonicAniData          ; 1
00015050 FE7A                       	dc.w SonAni_Roll-SuperSonicAniData            ; 2
00015052 FE84                       	dc.w SonAni_Roll2-SuperSonicAniData           ; 3
00015054 0000                       	dc.w SupSonAni_Push-SuperSonicAniData         ; 4
00015056 0000                       	dc.w SupSonAni_Stand-SuperSonicAniData        ; 5
00015058 0000                       	dc.w SupSonAni_Balance-SuperSonicAniData      ; 6
0001505A FF54                       	dc.w SonAni_LookUp-SuperSonicAniData          ; 7
0001505C 0000                       	dc.w SupSonAni_Duck-SuperSonicAniData         ; 8
0001505E FFBE                       	dc.w SonAni_Spindash-SuperSonicAniData        ; 9
00015060 FF6E                       	dc.w SonAni_Blink-SuperSonicAniData           ; 10 ; $A
00015062 FF72                       	dc.w SonAni_GetUp-SuperSonicAniData           ; 11 ; $B
00015064 FF76                       	dc.w SonAni_Balance2-SuperSonicAniData        ; 12 ; $C
00015066 FF7C                       	dc.w SonAni_Stop-SuperSonicAniData            ; 13 ; $D
00015068 FF83                       	dc.w SonAni_Float1-SuperSonicAniData           ; 14 ; $E
0001506A FF87                       	dc.w SonAni_Float2-SuperSonicAniData          ; 15 ; $F
0001506C FF8E                       	dc.w SonAni_Spring-SuperSonicAniData          ; 16 ; $10
0001506E FFCA                       	dc.w SonAni_Hang-SuperSonicAniData            ; 17 ; $11
00015070 FFCE                       	dc.w SonAni_Dash2-SuperSonicAniData           ; 18 ; $12
00015072 FFD4                       	dc.w SonAni_Dash3-SuperSonicAniData           ; 19 ; $13
00015074 FFD9                       	dc.w SonAni_Hang2-SuperSonicAniData           ; 20 ; $14
00015076 FFA6                       	dc.w SonAni_Bubble-SuperSonicAniData          ; 21 ; $15
00015078 FFDD                       	dc.w SonAni_DeathBW-SuperSonicAniData         ; 22 ; $16
0001507A FFAD                       	dc.w SonAni_Drown-SuperSonicAniData           ; 23 ; $17
0001507C FFB0                       	dc.w SonAni_Death-SuperSonicAniData           ; 24 ; $18
0001507E FFB3                       	dc.w SonAni_Hurt-SuperSonicAniData            ; 25 ; $19
00015080 FFB3                       	dc.w SonAni_Hurt-SuperSonicAniData            ; 26 ; $1A
00015082 FFB6                       	dc.w SonAni_LZSlide-SuperSonicAniData           ; 27 ; $1B
00015084 FFBA                       	dc.w SonAni_Blank-SuperSonicAniData           ; 28 ; $1C
00015086 FFEC                       	dc.w SonAni_Balance3-SuperSonicAniData        ; 29 ; $1D
00015088 FFF0                       	dc.w SonAni_Balance4-SuperSonicAniData        ; 30 ; $1E
0001508A 0000                       	dc.w SupSonAni_Transform-SuperSonicAniData    ; 31 ; $1F
0001508C                            
0001508C FF77 7879 7A7B 7C75 76FF   SupSonAni_Walk:		dc.b $FF,$77,$78,$79,$7A,$7B,$7C,$75,$76,$FF
00015096 FFB5 B9FF FFFF FFFF FFFF   SupSonAni_Run:		dc.b $FF,$B5,$B9,$FF,$FF,$FF,$FF,$FF,$FF,$FF
000150A0 FDBD BEBF C0FF FFFF FFFF   SupSonAni_Push:		dc.b $FD,$BD,$BE,$BF,$C0,$FF,$FF,$FF,$FF,$FF
000150AA 0772 7374 73FF             SupSonAni_Stand:	dc.b   7,$72,$73,$74,$73,$FF
000150B0 09C2 C3C4 C3C5 C6C7 C6FF   SupSonAni_Balance:	dc.b   9,$C2,$C3,$C4,$C3,$C5,$C6,$C7,$C6,$FF
000150BA 05C1 FF                    SupSonAni_Duck:		dc.b   5,$C1,$FF
000150BD 026D 6D6E 6E6F 7071 7071+  SupSonAni_Transform:	dc.b   2,$6D,$6D,$6E,$6E,$6F,$70,$71,$70,$71,$70,$71,$70,$71,$FD,  0
000150CE 00                         	even		
000150CE 00                         	even		
000150CE                            
000150CE                            
000150CE                            ; ---------------------------------------------------------------------------
000150CE                            ; Sonic	pattern	loading	subroutine
000150CE                            ; ---------------------------------------------------------------------------
000150CE                            
000150CE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000150CE                            
000150CE                            
000150CE                            LoadSonicDynPLC:			; XREF: Obj01_Control; et al
000150CE 7000                       		moveq	#0,d0
000150D0 1028 001A                  		move.b	$1A(a0),d0	; load frame number
000150D4 B038 F766                  		cmp.b	($FFFFF766).w,d0
000150D8 6700                       		beq.s	locret_13C96
000150DA 11C0 F766                  		move.b	d0,($FFFFF766).w
000150DE 45F9 0000 0000             		lea	(SonicDynPLC).l,a2
000150E4 D040                       		add.w	d0,d0
000150E6 D4F2 0000                  		adda.w	(a2,d0.w),a2
000150EA 7A00                       		moveq	#0,d5
000150EC 1A1A                       		move.b	(a2)+,d5
000150EE 5345                       		subq.w	#1,d5
000150F0 6B00                       		bmi.s	locret_13C96
000150F2 383C F000                  		move.w	#$F000,d4
000150F6 2C3C 0000 0000             		move.l	#Art_Sonic,d6
000150FC                            
000150FC                            SPLC_ReadEntry:
000150FC 7200                       		moveq	#0,d1
000150FE 121A                       		move.b	(a2)+,d1
00015100 E149                       		lsl.w	#8,d1
00015102 121A                       		move.b	(a2)+,d1
00015104 3601                       		move.w	d1,d3
00015106 E04B                       		lsr.w	#8,d3
00015108 0243 00F0                  		andi.w	#$F0,d3
0001510C 0643 0010                  		addi.w	#$10,d3
00015110 0241 0FFF                  		andi.w	#$FFF,d1
00015114 EB89                       		lsl.l	#5,d1
00015116 D286                       		add.l	d6,d1
00015118 3404                       		move.w	d4,d2
0001511A D843                       		add.w	d3,d4
0001511C D843                       		add.w	d3,d4
0001511E 4EB9 0000 1520             		jsr	(QueueDMATransfer).l
00015124 51CD FFD6                  		dbf	d5,SPLC_ReadEntry	; repeat for number of entries
00015128                            
00015128                            locret_13C96:
00015128 4E75                       		rts	
0001512A                            ; End of function LoadSonicDynPLC
0001512A                            
0001512A                            ; ===========================================================================
0001512A                            ; ---------------------------------------------------------------------------
0001512A                            ; Object 0A - drowning countdown numbers and small bubbles (LZ)
0001512A                            ; ---------------------------------------------------------------------------
0001512A                            
0001512A                            Obj0A:					; XREF: Obj_Index
0001512A 7000                       		moveq	#0,d0
0001512C 1028 0024                  		move.b	$24(a0),d0
00015130 323B 0000                  		move.w	Obj0A_Index(pc,d0.w),d1
00015134 4EFB 1000                  		jmp	Obj0A_Index(pc,d1.w)
00015138                            ; ===========================================================================
00015138 0000 0000                  Obj0A_Index:	dc.w Obj0A_Main-Obj0A_Index, Obj0A_Animate-Obj0A_Index
0001513C 0000 0000                  		dc.w Obj0A_ChkWater-Obj0A_Index, Obj0A_Display-Obj0A_Index
00015140 0000 0000                  		dc.w Obj0A_Delete2-Obj0A_Index,	Obj0A_Countdown-Obj0A_Index
00015144 0000 0000                  		dc.w Obj0A_AirLeft-Obj0A_Index,	Obj0A_Display-Obj0A_Index
00015148 0000                       		dc.w Obj0A_Delete2-Obj0A_Index
0001514A                            ; ===========================================================================
0001514A                            
0001514A                            Obj0A_Main:				; XREF: Obj0A_Index
0001514A 5428 0024                  		addq.b	#2,$24(a0)
0001514E 217C 0001 34A2 0004        		move.l	#Map_obj64,4(a0)
00015156 317C 8348 0002             		move.w	#$8348,2(a0)
0001515C 117C 0084 0001             		move.b	#$84,1(a0)
00015162 117C 0010 0019             		move.b	#$10,$19(a0)
00015168 117C 0001 0018             		move.b	#1,$18(a0)
0001516E 1028 0028                  		move.b	$28(a0),d0
00015172 6A00                       		bpl.s	loc_13D00
00015174 5028 0024                  		addq.b	#8,$24(a0)
00015178 217C 0000 0000 0004        		move.l	#Map_obj0A,4(a0)
00015180 317C 0440 0002             		move.w	#$440,2(a0)
00015186 0240 007F                  		andi.w	#$7F,d0
0001518A 1140 0033                  		move.b	d0,$33(a0)
0001518E 6000 0000                  		bra.w	Obj0A_Countdown
00015192                            ; ===========================================================================
00015192                            
00015192                            loc_13D00:
00015192 1140 001C                  		move.b	d0,$1C(a0)
00015196 3168 0008 0030             		move.w	8(a0),$30(a0)
0001519C 317C FF78 0012             		move.w	#-$88,$12(a0)
000151A2                            
000151A2                            Obj0A_Animate:				; XREF: Obj0A_Index
000151A2 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
000151A8 4EB9 0000 B1EE             		jsr	AnimateSprite
000151AE                            
000151AE                            Obj0A_ChkWater:				; XREF: Obj0A_Index
000151AE 3038 F646                  		move.w	($FFFFF646).w,d0
000151B2 B068 000C                  		cmp.w	$C(a0),d0	; has bubble reached the water surface?
000151B6 6500                       		bcs.s	Obj0A_Wobble	; if not, branch
000151B8 117C 0006 0024             		move.b	#6,$24(a0)
000151BE 5E28 001C                  		addq.b	#7,$1C(a0)
000151C2 0C28 000D 001C             		cmpi.b	#$D,$1C(a0)
000151C8 6700                       		beq.s	Obj0A_Display
000151CA 6000                       		bra.s	Obj0A_Display
000151CC                            ; ===========================================================================
000151CC                            
000151CC                            Obj0A_Wobble:
000151CC 4A38 F7C7                  		tst.b	($FFFFF7C7).w
000151D0 6700                       		beq.s	loc_13D44
000151D2 5868 0030                  		addq.w	#4,$30(a0)
000151D6                            
000151D6                            loc_13D44:
000151D6 1028 0026                  		move.b	$26(a0),d0
000151DA 5228 0026                  		addq.b	#1,$26(a0)
000151DE 0240 007F                  		andi.w	#$7F,d0
000151E2 43F9 0000 0000             		lea	(Obj0A_WobbleData).l,a1
000151E8 1031 0000                  		move.b	(a1,d0.w),d0
000151EC 4880                       		ext.w	d0
000151EE D068 0030                  		add.w	$30(a0),d0
000151F2 3140 0008                  		move.w	d0,8(a0)
000151F6 6100                       		bsr.s	Obj0A_ShowNumber
000151F8 4EBA 8EB6                  		jsr	SpeedToPos
000151FC 4A28 0001                  		tst.b	1(a0)
00015200 6A00                       		bpl.s	Obj0A_Delete
00015202 4EFA 8ED2                  		jmp	DisplaySprite
00015206                            ; ===========================================================================
00015206                            
00015206                            Obj0A_Delete:
00015206 4EFA 8F0A                  		jmp	DeleteObject
0001520A                            ; ===========================================================================
0001520A                            
0001520A                            Obj0A_Display:				; XREF: Obj0A_Index
0001520A 6100                       		bsr.s	Obj0A_ShowNumber
0001520C 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
00015212 4EB9 0000 B1EE             		jsr	AnimateSprite
00015218 4EFA 8EBC                  		jmp	DisplaySprite
0001521C                            ; ===========================================================================
0001521C                            
0001521C                            Obj0A_Delete2:				; XREF: Obj0A_Index
0001521C 4EFA 8EF4                  		jmp	DeleteObject
00015220                            ; ===========================================================================
00015220                            
00015220                            Obj0A_AirLeft:				; XREF: Obj0A_Index
00015220 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w ; check air remaining
00015226 6200                       		bhi.s	Obj0A_Delete3	; if higher than $C, branch
00015228 5368 0038                  		subq.w	#1,$38(a0)
0001522C 6600                       		bne.s	Obj0A_Display2
0001522E 117C 000E 0024             		move.b	#$E,$24(a0)
00015234 5E28 001C                  		addq.b	#7,$1C(a0)
00015238 60D0                       		bra.s	Obj0A_Display
0001523A                            ; ===========================================================================
0001523A                            
0001523A                            Obj0A_Display2:
0001523A 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
00015240 4EB9 0000 B1EE             		jsr	AnimateSprite
00015246 4A28 0001                  		tst.b	1(a0)
0001524A 6A00                       		bpl.s	Obj0A_Delete3
0001524C 4EFA 8E88                  		jmp	DisplaySprite
00015250                            ; ===========================================================================
00015250                            
00015250                            Obj0A_Delete3:
00015250 4EFA 8EC0                  		jmp	DeleteObject
00015254                            ; ===========================================================================
00015254                            
00015254                            Obj0A_ShowNumber:			; XREF: Obj0A_Wobble; Obj0A_Display
00015254 4A68 0038                  		tst.w	$38(a0)
00015258 6700                       		beq.s	locret_13E1A
0001525A 5368 0038                  		subq.w	#1,$38(a0)
0001525E 6600                       		bne.s	locret_13E1A
00015260 0C28 0007 001C             		cmpi.b	#7,$1C(a0)
00015266 6400                       		bcc.s	locret_13E1A
00015268 317C 000F 0038             		move.w	#$F,$38(a0)
0001526E 4268 0012                  		clr.w	$12(a0)
00015272 117C 0080 0001             		move.b	#$80,1(a0)
00015278 3028 0008                  		move.w	8(a0),d0
0001527C 9078 F700                  		sub.w	($FFFFF700).w,d0
00015280 0640 0080                  		addi.w	#$80,d0
00015284 3140 0008                  		move.w	d0,8(a0)
00015288 3028 000C                  		move.w	$C(a0),d0
0001528C 9078 F704                  		sub.w	($FFFFF704).w,d0
00015290 0640 0080                  		addi.w	#$80,d0
00015294 3140 000A                  		move.w	d0,$A(a0)
00015298 117C 000C 0024             		move.b	#$C,$24(a0)
0001529E                            
0001529E                            locret_13E1A:
0001529E 4E75                       		rts	
000152A0                            ; ===========================================================================
000152A0                            Obj0A_WobbleData:
000152A0 0000 0000 0000 0101 0101+  		dc.b 0, 0, 0, 0, 0, 0,	1, 1, 1, 1, 1, 2, 2, 2,	2, 2, 2
000152B1 0203 0303 0303 0303 0303+  		dc.b 2,	3, 3, 3, 3, 3, 3, 3, 3,	3, 3, 3, 3, 3, 3, 4, 3
000152C2 0303 0303 0303 0303 0303+  		dc.b 3,	3, 3, 3, 3, 3, 3, 3, 3,	3, 3, 3, 3, 2, 2, 2, 2
000152D3 0202 0201 0101 0101 0000+  		dc.b 2,	2, 2, 1, 1, 1, 1, 1, 0,	0, 0, 0, 0, 0, -1, -1
000152E3 FFFF FFFE FEFE FEFE FDFD+  		dc.b -1, -1, -1, -2, -2, -2, -2, -2, -3, -3, -3, -3, -3
000152F0 FDFD FCFC FCFC FCFC FCFC+  		dc.b -3, -3, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
000152FD FCFC FCFC FCFC FCFC FCFC+  		dc.b -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
0001530A FCFC FCFC FCFD FDFD FDFD+  		dc.b -4, -4, -4, -4, -4, -3, -3, -3, -3, -3, -3, -3, -2
00015317 FEFE FEFE FFFF FFFF FF     		dc.b -2, -2, -2, -2, -1, -1, -1, -1, -1
00015320                            ; ===========================================================================
00015320                            
00015320                            Obj0A_Countdown:			; XREF: Obj0A_Index
00015320 4A68 002C                  		tst.w	$2C(a0)
00015324 6600 0000                  		bne.w	loc_13F86
00015328 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0001532E 6400 0000                  		bcc.w	locret_1408C
00015332 0838 0006 D022             		btst	#6,($FFFFD022).w
00015338 6700 0000                  		beq.w	locret_1408C
0001533C 5368 0038                  		subq.w	#1,$38(a0)
00015340 6A00 0000                  		bpl.w	loc_13FAC
00015344 317C 003B 0038             		move.w	#59,$38(a0)
0001534A 317C 0001 0036             		move.w	#1,$36(a0)
00015350 4EB9 0000 33B4             		jsr	(RandomNumber).l
00015356 0240 0001                  		andi.w	#1,d0
0001535A 1140 0034                  		move.b	d0,$34(a0)
0001535E 3038 FE14                  		move.w	($FFFFFE14).w,d0 ; check air remaining
00015362 0C40 0019                  		cmpi.w	#$19,d0
00015366 6700                       		beq.s	Obj0A_WarnSound	; play sound if	air is $19
00015368 0C40 0014                  		cmpi.w	#$14,d0
0001536C 6700                       		beq.s	Obj0A_WarnSound
0001536E 0C40 000F                  		cmpi.w	#$F,d0
00015372 6700                       		beq.s	Obj0A_WarnSound
00015374 0C40 000C                  		cmpi.w	#$C,d0
00015378 6200                       		bhi.s	Obj0A_ReduceAir	; if air is above $C, branch
0001537A 6600                       		bne.s	loc_13F02
0001537C 303C 0092                  		move.w	#$92,d0
00015380 4EB9 0000 1476             		jsr	(PlaySound).l	; play countdown music
00015386                            
00015386                            loc_13F02:
00015386 5328 0032                  		subq.b	#1,$32(a0)
0001538A 6A00                       		bpl.s	Obj0A_ReduceAir
0001538C 1168 0033 0032             		move.b	$33(a0),$32(a0)
00015392 08E8 0007 0036             		bset	#7,$36(a0)
00015398 6000                       		bra.s	Obj0A_ReduceAir
0001539A                            ; ===========================================================================
0001539A                            
0001539A                            Obj0A_WarnSound:			; XREF: Obj0A_Countdown
0001539A 303C 00C2                  		move.w	#$C2,d0
0001539E 4EB9 0000 147C             		jsr	(PlaySound_Special).l ;	play "ding-ding" warning sound
000153A4                            
000153A4                            Obj0A_ReduceAir:
000153A4 5378 FE14                  		subq.w	#1,($FFFFFE14).w ; subtract 1 from air remaining
000153A8 6400 0000                  		bcc.w	Obj0A_GoMakeItem ; if air is above 0, branch
000153AC 6100 0000                  		bsr.w	ResumeMusic
000153B0 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w ; lock controls
000153B6 303C 00B2                  		move.w	#$B2,d0
000153BA 4EB9 0000 147C             		jsr	(PlaySound_Special).l ;	play drowning sound
000153C0 117C 000A 0034             		move.b	#$A,$34(a0)
000153C6 317C 0001 0036             		move.w	#1,$36(a0)
000153CC 317C 0078 002C             		move.w	#$78,$2C(a0)
000153D2 2F08                       		move.l	a0,-(sp)
000153D4 41F8 D000                  		lea	($FFFFD000).w,a0
000153D8 6100 F584                  		bsr.w	Sonic_ResetOnFloor
000153DC 117C 0017 001C             		move.b	#$17,$1C(a0)	; use Sonic's drowning animation
000153E2 08E8 0001 0022             		bset	#1,$22(a0)
000153E8 08E8 0007 0002             		bset	#7,2(a0)
000153EE 317C 0000 0012             		move.w	#0,$12(a0)
000153F4 317C 0000 0010             		move.w	#0,$10(a0)
000153FA 317C 0000 0014             		move.w	#0,$14(a0)
00015400 117C 000A 0024             		move.b	#$A,$24(a0)		; Force the character to drown
00015406 11FC 0001 F744             		move.b	#1,($FFFFF744).w
0001540C 11FC 0000 FE1E             		move.b	#0,($FFFFFE1E).w	; Stop the timer immediately
00015412 205F                       		movea.l	(sp)+,a0
00015414 4E75                       		rts
00015416                            ; ===========================================================================
00015416                            
00015416                            loc_13F86:
00015416 5368 002C                  		subq.w	#1,$2C(a0)
0001541A 6600                       		bne.s	loc_13FAC	; Make it jump straight to this location
0001541C 11FC 0006 D024             		move.b	#6,($FFFFD000+$24).w
00015422 4E75                       		rts
00015424                            ; ===========================================================================
00015424                            
00015424                            Obj0A_GoMakeItem:			; XREF: Obj0A_ReduceAir
00015424 6000                       		bra.s	Obj0A_MakeItem
00015426                            ; ===========================================================================
00015426                            
00015426                            loc_13FAC:
00015426 4A68 0036                  		tst.w	$36(a0)
0001542A 6700 0000                  		beq.w	locret_1408C
0001542E 5368 003A                  		subq.w	#1,$3A(a0)
00015432 6A00 0000                  		bpl.w	locret_1408C
00015436                            
00015436                            Obj0A_MakeItem:
00015436 4EB9 0000 33B4             		jsr	(RandomNumber).l
0001543C 0240 000F                  		andi.w	#$F,d0
00015440 3140 003A                  		move.w	d0,$3A(a0)
00015444 4EBA 9126                  		jsr	SingleObjLoad
00015448 6600 0000                  		bne.w	locret_1408C
0001544C 12BC 000A                  		move.b	#$A,0(a1)	; load object
00015450 3378 D008 0008             		move.w	($FFFFD008).w,8(a1) ; match X position to Sonic
00015456 7006                       		moveq	#6,d0
00015458 0838 0000 D022             		btst	#0,($FFFFD022).w
0001545E 6700                       		beq.s	loc_13FF2
00015460 4440                       		neg.w	d0
00015462 137C 0040 0026             		move.b	#$40,$26(a1)
00015468                            
00015468                            loc_13FF2:
00015468 D169 0008                  		add.w	d0,8(a1)
0001546C 3378 D00C 000C             		move.w	($FFFFD00C).w,$C(a1)
00015472 137C 0006 0028             		move.b	#6,$28(a1)
00015478 4A68 002C                  		tst.w	$2C(a0)
0001547C 6700 0000                  		beq.w	loc_1403E
00015480 0268 0007 003A             		andi.w	#7,$3A(a0)
00015486 0668 0000 003A             		addi.w	#0,$3A(a0)
0001548C 3038 D00C                  		move.w	($FFFFD00C).w,d0
00015490 0440 000C                  		subi.w	#$C,d0
00015494 3340 000C                  		move.w	d0,$C(a1)
00015498 4EB9 0000 33B4             		jsr	(RandomNumber).l
0001549E 1340 0026                  		move.b	d0,$26(a1)
000154A2 3038 FE04                  		move.w	($FFFFFE04).w,d0
000154A6 0200 0003                  		andi.b	#3,d0
000154AA 6600                       		bne.s	loc_14082
000154AC 137C 000E 0028             		move.b	#$E,$28(a1)
000154B2 6000                       		bra.s	loc_14082
000154B4                            ; ===========================================================================
000154B4                            
000154B4                            loc_1403E:
000154B4 0828 0007 0036             		btst	#7,$36(a0)
000154BA 6700                       		beq.s	loc_14082
000154BC 3438 FE14                  		move.w	($FFFFFE14).w,d2
000154C0 E24A                       		lsr.w	#1,d2
000154C2 4EB9 0000 33B4             		jsr	(RandomNumber).l
000154C8 0240 0003                  		andi.w	#3,d0
000154CC 6600                       		bne.s	loc_1406A
000154CE 08E8 0006 0036             		bset	#6,$36(a0)
000154D4 6600                       		bne.s	loc_14082
000154D6 1342 0028                  		move.b	d2,$28(a1)
000154DA 337C 001C 0038             		move.w	#$1C,$38(a1)
000154E0                            
000154E0                            loc_1406A:
000154E0 4A28 0034                  		tst.b	$34(a0)
000154E4 6600                       		bne.s	loc_14082
000154E6 08E8 0006 0036             		bset	#6,$36(a0)
000154EC 6600                       		bne.s	loc_14082
000154EE 1342 0028                  		move.b	d2,$28(a1)
000154F2 337C 001C 0038             		move.w	#$1C,$38(a1)
000154F8                            
000154F8                            loc_14082:
000154F8 5328 0034                  		subq.b	#1,$34(a0)
000154FC 6A00                       		bpl.s	locret_1408C
000154FE 4268 0036                  		clr.w	$36(a0)
00015502                            
00015502                            locret_1408C:
00015502 4E75                       		rts	
00015504                            
00015504                            ; ---------------------------------------------------------------------------
00015504                            ; Subroutine to	play music for LZ/SBZ3 after a countdown
00015504                            ; ---------------------------------------------------------------------------
00015504                            
00015504                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015504                            
00015504                            
00015504                            ResumeMusic:				; XREF: Obj64_Wobble; Sonic_Water; Obj0A_ReduceAir
00015504 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w
0001550A                             
0001550A                            ; Third section of the NineKode - Play correct music after the countdown (if you breathe)
0001550A                             
0001550A 6200 0000                  		bhi.w	loc_140AC	; change to bhi.w!
0001550E                             
0001550E 0C38 0000 FE11             		cmpi.b	#$0,($FFFFFE11).w	; is this act 1?
00015514 6600                       		bne.s	Air_GetBgm2	; if not, branch
00015516 43F9 0000 419A             		lea	(MusicList1).l,a1	; load Music Playlist for Acts 1
0001551C 6000                       		bra.s	Air_PlayMusic	; go to PlayMusic
0001551E                             
0001551E                            Air_GetBgm2:
0001551E 0C38 0001 FE11             		cmpi.b	#$1,($FFFFFE11).w	; is this act 2?
00015524 6600                       		bne.s	Air_GetBgm3	; if not, branch
00015526 43F9 0000 41A0             		lea	(MusicList2).l,a1	; load Music Playlist for Acts 2
0001552C 6000                       		bra.s	Air_PlayMusic	; go to PlayMusic
0001552E                             
0001552E                            Air_GetBgm3:
0001552E 0C38 0002 FE11             		cmpi.b	#$2,($FFFFFE11).w	; is this act 3?
00015534 6600                       		bne.s	Air_GetBgm4	; if not, branch
00015536 43F9 0000 41A6             		lea	(MusicList3).l,a1	; load Music Playlist for Acts 3
0001553C 6000                       		bra.s	Air_PlayMusic	; go to PlayMusic
0001553E                             
0001553E                            Air_GetBgm4:
0001553E 0C38 0003 FE11             		cmpi.b	#$3,($FFFFFE11).w	; is this act 4?
00015544 6600                       		bne.s	Air_PlayMusic	; if not, branch
00015546 43F9 0000 41AC             		lea	(MusicList4).l,a1	; load Music Playlist for Acts 4
0001554C                             
0001554C                            Air_PlayMusic:
0001554C 1029 0001                  		move.b	1(a1),d0	; load entry $1 from the playlist
00015550                             
00015550                            loc_140A6:
00015550 4EB9 0000 1476             		jsr	(PlaySound).l
00015556                             
00015556                            ; NineKode ends here
00015556                            
00015556                            loc_140AC:
00015556 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
0001555C 4238 D372                  		clr.b	($FFFFD372).w
00015560 4E75                       		rts	
00015562                            ; End of function ResumeMusic
00015562                            
00015562                            ; ===========================================================================
00015562                            Ani_obj0A:
00015562                            	include "_anim\obj0A.asm"
00015562                            ; ---------------------------------------------------------------------------
00015562                            ; Animation script - countdown numbers and bubbles (LZ)
00015562                            ; ---------------------------------------------------------------------------
00015562 0000                       		dc.w byte_140D6-Ani_obj0A
00015564 0000                       		dc.w byte_140E0-Ani_obj0A
00015566 0000                       		dc.w byte_140EA-Ani_obj0A
00015568 0000                       		dc.w byte_140F4-Ani_obj0A
0001556A 0000                       		dc.w byte_140FE-Ani_obj0A
0001556C 0000                       		dc.w byte_14108-Ani_obj0A
0001556E 0000                       		dc.w byte_14112-Ani_obj0A
00015570 0000                       		dc.w byte_14118-Ani_obj0A
00015572 0000                       		dc.w byte_14120-Ani_obj0A
00015574 0000                       		dc.w byte_14128-Ani_obj0A
00015576 0000                       		dc.w byte_14130-Ani_obj0A
00015578 0000                       		dc.w byte_14138-Ani_obj0A
0001557A 0000                       		dc.w byte_14140-Ani_obj0A
0001557C 0000                       		dc.w byte_14148-Ani_obj0A
0001557E 0000                       		dc.w byte_1414A-Ani_obj0A
00015580 0500 0102 0304 090D FC00   byte_140D6:	dc.b 5,	0, 1, 2, 3, 4, 9, $D, $FC, 0
0001558A 0500 0102 0304 0C12 FC00   byte_140E0:	dc.b 5,	0, 1, 2, 3, 4, $C, $12,	$FC, 0
00015594 0500 0102 0304 0C11 FC00   byte_140EA:	dc.b 5,	0, 1, 2, 3, 4, $C, $11,	$FC, 0
0001559E 0500 0102 0304 0B10 FC00   byte_140F4:	dc.b 5,	0, 1, 2, 3, 4, $B, $10,	$FC, 0
000155A8 0500 0102 0304 090F FC00   byte_140FE:	dc.b 5,	0, 1, 2, 3, 4, 9, $F, $FC, 0
000155B2 0500 0102 0304 0A0E FC00   byte_14108:	dc.b 5,	0, 1, 2, 3, 4, $A, $E, $FC, 0
000155BC 0E00 0102 FC00             byte_14112:	dc.b $E, 0, 1, 2, $FC, 0
000155C2 0716 0D16 0D16 0DFC        byte_14118:	dc.b 7,	$16, $D, $16, $D, $16, $D, $FC
000155CA 0716 1216 1216 12FC        byte_14120:	dc.b 7,	$16, $12, $16, $12, $16, $12, $FC
000155D2 0716 1116 1116 11FC        byte_14128:	dc.b 7,	$16, $11, $16, $11, $16, $11, $FC
000155DA 0716 1016 1016 10FC        byte_14130:	dc.b 7,	$16, $10, $16, $10, $16, $10, $FC
000155E2 0716 0F16 0F16 0FFC        byte_14138:	dc.b 7,	$16, $F, $16, $F, $16, $F, $FC
000155EA 0716 0E16 0E16 0EFC        byte_14140:	dc.b 7,	$16, $E, $16, $E, $16, $E, $FC
000155F2 0EFC                       byte_14148:	dc.b $E, $FC
000155F4 0E01 0203 04FC             byte_1414A:	dc.b $E, 1, 2, 3, 4, $FC
000155FA                            		even
000155FA                            		even
000155FA                            
000155FA                            ; ---------------------------------------------------------------------------
000155FA                            ; Sprite mappings - drowning countdown numbers (LZ)
000155FA                            ; ---------------------------------------------------------------------------
000155FA                            Map_obj0A:
000155FA                            	include "_maps\obj0A.asm"
000155FA                            ; ---------------------------------------------------------------------------
000155FA                            ; Sprite mappings - drowning countdown numbers (LZ)
000155FA                            ; ---------------------------------------------------------------------------
000155FA 0000                       		dc.w byte_14152-Map_obj0A
000155FC 01                         byte_14152:	dc.b 1
000155FD E80E 0000 F2               		dc.b $E8, $E, 0, 0, $F2
00015602                            		even
00015602                            		even
00015602                            
00015602                            ; ===========================================================================
00015602                            ; ---------------------------------------------------------------------------
00015602                            ; Object 38 - shield and invincibility stars
00015602                            ; ---------------------------------------------------------------------------
00015602                            
00015602                            Obj38:					; XREF: Obj_Index
00015602 7000                       		moveq	#0,d0
00015604 1028 0024                  		move.b	$24(a0),d0
00015608 323B 0000                  		move.w	Obj38_Index(pc,d0.w),d1
0001560C 4EFB 1000                  		jmp	Obj38_Index(pc,d1.w)
00015610                            ; ===========================================================================
00015610 0000                       Obj38_Index:	dc.w Obj38_Main-Obj38_Index
00015612 0000                       		dc.w Obj38_Shield-Obj38_Index
00015614 0000                       		dc.w Obj38_Stars-Obj38_Index
00015616                            ; ===========================================================================
00015616                            
00015616                            Obj38_Main:				; XREF: Obj38_Index
00015616 5428 0024                  		addq.b	#2,$24(a0)
0001561A 217C 0000 0000 0004        		move.l	#Map_obj38,4(a0)
00015622 117C 0004 0001             		move.b	#4,1(a0)
00015628 117C 0001 0018             		move.b	#1,$18(a0)
0001562E 117C 0010 0019             		move.b	#$10,$19(a0)
00015634 4A28 001C                  		tst.b	$1C(a0)		; is object a shield?
00015638 6600                       		bne.s	Obj38_DoStars	; if not, branch
0001563A 317C 0541 0002             		move.w	#$541,2(a0)	; shield specific code
00015640 4E75                       		rts	
00015642                            ; ===========================================================================
00015642                            
00015642                            Obj38_DoStars:
00015642 5428 0024                  		addq.b	#2,$24(a0)	; stars	specific code
00015646 317C 055C 0002             		move.w	#$55C,2(a0)
0001564C 4E75                       		rts	
0001564E                            ; ===========================================================================
0001564E                            
0001564E                            Obj38_Shield:				; XREF: Obj38_Index
0001564E 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
00015652 6600                       		bne.s	Obj38_RmvShield	; if yes, branch
00015654 4A38 FE2C                  		tst.b	($FFFFFE2C).w	; does Sonic have shield?
00015658 6700                       		beq.s	Obj38_Delete	; if not, branch
0001565A 3178 D008 0008             		move.w	($FFFFD008).w,8(a0)
00015660 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0)
00015666 1178 D022 0022             		move.b	($FFFFD022).w,$22(a0)
0001566C 43F9 0000 0000             		lea	(Ani_obj38).l,a1
00015672 4EB9 0000 B1EE             		jsr	AnimateSprite
00015678 4EFA 8A5C                  		jmp	DisplaySprite
0001567C                            ; ===========================================================================
0001567C                            
0001567C                            Obj38_RmvShield:
0001567C 4E75                       		rts	
0001567E                            ; ===========================================================================
0001567E                            
0001567E                            Obj38_Delete:
0001567E 4EFA 8A92                  		jmp	DeleteObject
00015682                            ; ===========================================================================
00015682                            
00015682                            Obj38_Stars:				; XREF: Obj38_Index
00015682 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
00015686 6700                       		beq.s	Obj38_Delete2	; if not, branch
00015688 3038 F7A8                  		move.w	($FFFFF7A8).w,d0
0001568C 1228 001C                  		move.b	$1C(a0),d1
00015690 5301                       		subq.b	#1,d1
00015692 6000                       		bra.s	Obj38_StarTrail
00015694                            ; ===========================================================================
00015694 E909                       		lsl.b	#4,d1
00015696 5801                       		addq.b	#4,d1
00015698 9001                       		sub.b	d1,d0
0001569A 1228 0030                  		move.b	$30(a0),d1
0001569E 9001                       		sub.b	d1,d0
000156A0 5801                       		addq.b	#4,d1
000156A2 0201 000F                  		andi.b	#$F,d1
000156A6 1141 0030                  		move.b	d1,$30(a0)
000156AA 6000                       		bra.s	Obj38_StarTrail2a
000156AC                            ; ===========================================================================
000156AC                            
000156AC                            Obj38_StarTrail:			; XREF: Obj38_Stars
000156AC E709                       		lsl.b	#3,d1
000156AE 1401                       		move.b	d1,d2
000156B0 D201                       		add.b	d1,d1
000156B2 D202                       		add.b	d2,d1
000156B4 5801                       		addq.b	#4,d1
000156B6 9001                       		sub.b	d1,d0
000156B8 1228 0030                  		move.b	$30(a0),d1
000156BC 9001                       		sub.b	d1,d0
000156BE 5801                       		addq.b	#4,d1
000156C0 0C01 0018                  		cmpi.b	#$18,d1
000156C4 6500                       		bcs.s	Obj38_StarTrail2
000156C6 7200                       		moveq	#0,d1
000156C8                            
000156C8                            Obj38_StarTrail2:
000156C8 1141 0030                  		move.b	d1,$30(a0)
000156CC                            
000156CC                            Obj38_StarTrail2a:
000156CC 43F8 CB00                  		lea	($FFFFCB00).w,a1
000156D0 43F1 0000                  		lea	(a1,d0.w),a1
000156D4 3159 0008                  		move.w	(a1)+,8(a0)
000156D8 3159 000C                  		move.w	(a1)+,$C(a0)
000156DC 1178 D022 0022             		move.b	($FFFFD022).w,$22(a0)
000156E2 43F9 0000 0000             		lea	(Ani_obj38).l,a1
000156E8 4EB9 0000 B1EE             		jsr	AnimateSprite
000156EE 4EFA 89E6                  		jmp	DisplaySprite
000156F2                            ; ===========================================================================
000156F2                            
000156F2                            Obj38_Delete2:				; XREF: Obj38_Stars
000156F2 4EFA 8A1E                  		jmp	DeleteObject
000156F6                            ; ===========================================================================
000156F6                            ; ---------------------------------------------------------------------------
000156F6                            ; Object 4A - special stage entry from beta
000156F6                            ; ---------------------------------------------------------------------------
000156F6                            
000156F6                            Obj4A:					; XREF: Obj_Index
000156F6 7000                       		moveq	#0,d0
000156F8 1028 0024                  		move.b	$24(a0),d0
000156FC 323B 0000                  		move.w	Obj4A_Index(pc,d0.w),d1
00015700 4EFB 1000                  		jmp	Obj4A_Index(pc,d1.w)
00015704                            ; ===========================================================================
00015704 0000                       Obj4A_Index:	dc.w Obj4A_Main-Obj4A_Index
00015706 0000                       		dc.w Obj4A_RmvSonic-Obj4A_Index
00015708 0000                       		dc.w Obj4A_LoadSonic-Obj4A_Index
0001570A                            ; ===========================================================================
0001570A                            
0001570A                            Obj4A_Main:				; XREF: Obj4A_Index
0001570A 4AB8 F680                  		tst.l	($FFFFF680).w	; are pattern load cues	empty?
0001570E 6700                       		beq.s	Obj4A_Main2	; if yes, branch
00015710 4E75                       		rts	
00015712                            ; ===========================================================================
00015712                            
00015712                            Obj4A_Main2:
00015712 5428 0024                  		addq.b	#2,$24(a0)
00015716 217C 0000 0000 0004        		move.l	#Map_obj4A,4(a0)
0001571E 117C 0004 0001             		move.b	#4,1(a0)
00015724 117C 0001 0018             		move.b	#1,$18(a0)
0001572A 117C 0038 0019             		move.b	#$38,$19(a0)
00015730 317C 0541 0002             		move.w	#$541,2(a0)
00015736 317C 0078 0030             		move.w	#120,$30(a0)	; set time for Sonic's disappearance to 2 seconds
0001573C                            
0001573C                            Obj4A_RmvSonic:				; XREF: Obj4A_Index
0001573C 3178 D008 0008             		move.w	($FFFFD008).w,8(a0)
00015742 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0)
00015748 1178 D022 0022             		move.b	($FFFFD022).w,$22(a0)
0001574E 43F9 0000 0000             		lea	(Ani_obj4A).l,a1
00015754 4EB9 0000 B1EE             		jsr	AnimateSprite
0001575A 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
00015760 6600                       		bne.s	Obj4A_Display
00015762 4A38 D000                  		tst.b	($FFFFD000).w
00015766 6700                       		beq.s	Obj4A_Display
00015768 11FC 0000 D000             		move.b	#0,($FFFFD000).w ; remove Sonic
0001576E 303C 00A8                  		move.w	#$A8,d0
00015772 4EB9 0000 147C             		jsr	(PlaySound_Special).l ;	play Special Stage "GOAL" sound
00015778                            
00015778                            Obj4A_Display:
00015778 4EFA 895C                  		jmp	DisplaySprite
0001577C                            ; ===========================================================================
0001577C                            
0001577C                            Obj4A_LoadSonic:			; XREF: Obj4A_Index
0001577C 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time
00015780 6600                       		bne.s	Obj4A_Wait	; if time remains, branch
00015782 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
00015788 4EFA 8988                  		jmp	DeleteObject
0001578C                            ; ===========================================================================
0001578C                            
0001578C                            Obj4A_Wait:
0001578C 4E75                       		rts	
0001578E                            ; ===========================================================================
0001578E                            	include "_inc\sub RememberState.asm"
0001578E                            ; ---------------------------------------------------------------------------
0001578E                            ; Subroutine to remember whether an object is destroyed/collected
0001578E                            ; ---------------------------------------------------------------------------
0001578E                            
0001578E                            RememberState:
000157AC 6000 8928                  		bra.w	DisplaySprite
000157B0                            
000157B0                            	@offscreen:
000157B0 45F8 FC00                  		lea	(v_objstate).w,a2
000157B4 7000                       		moveq	#0,d0
000157B6 1028 0023                  		move.b	obRespawnNo(a0),d0
000157BA 6700                       		beq.s	@delete
000157BC 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
000157C2                            
000157C2                            	@delete:
000157C2 6000 894E                  		bra.w	DeleteObject
000157C2 6000 894E                  		bra.w	DeleteObject
000157C6 =00000034                  id_Roll:	equ (SonAni_Roll-SonicAniData)/2	; 2
000157C6 0000 0000                  ptr_sndCC:	dc.l SoundCC
000157CA                            ani_booster:
000157CA                            	include "_anim\speedbooster.asm"
000157CA                            ; ---------------------------------------------------------------------------
000157CA                            ; Animation script - Sonic 4's Speed Booster
000157CA                            ; ---------------------------------------------------------------------------
000157CA 0000                       		dc.w idle-Ani_Booster
000157CC 0101 0101 FE01             idle:	dc.b 1,	1, 1, 1, $FE, 1
000157D2                            		even
000157D2                            		even
000157D2                            speedboosters:
000157D2                            	include "_inc\speedbooster.asm"
000157D2                            ; ----------------------------------------------------------------------------
000157D2                            ; Object 06 - Booster things from CPZ
000157D2                            ; ----------------------------------------------------------------------------
000157D2                            
000157D2                            		; DATA XREF: ROM:0001600Co
000157D2 7000                       		moveq	#0,d0
000157D4 1028 0024                  		move.b	obRoutine(a0),d0
000157D8 323B 0000                  		move.w	Booster_Index(pc,d0.w),d1
000157DC 4EFB 1000                  		jmp	Booster_Index(pc,d1.w)
000157E0                            ; ===========================================================================
000157E0 0000                       Booster_Index:	dc.w Booster_Init-Booster_Index; 0 ; DATA XREF: h+B346o h+B348o
000157E2 0000                       		dc.w Booster_Loop-Booster_Index; 1
000157E4 1000                       word_222BE:	dc.w $1000		; 0
000157E6 0A00                       		dc.w  $A00		; 1
000157E8                            ; ===========================================================================
000157E8                            
000157E8                            Booster_Init:				; DATA XREF: h+B346o
000157E8 5428 0024                  		addq.b	#2,obRoutine(a0)
000157EC 217C 0000 0000 0004        		move.l	#Map_SpeedBooster,obMap(a0)
000157F4                            		
000157F4                            		;move.w	#$372,obGfx(a0) ; SYZ2 specific code
000157F4                            		;cmpi.w	#(id_SYZ<<8)+1,(v_zone).w ; check if level is SY2
000157F4                            		;beq.s	@Continue	; if yes, branch
000157F4 317C 5000 0002             		move.w	#$0400*20,obGfx(a0) ; 0 = palette line, XXX = Tile address (VRAM address / $20)
000157FA                            		
000157FA                            	@Continue:	
000157FA                            		;bsr.w	loc_22402
000157FA 0028 0004 0001             		ori.b	#4,obRender(a0)
00015800 117C 0020 0019             		move.b	#$20,obActWid(a0) ; ' '
00015806 117C 0001 0018             		move.b	#1,obPriority(a0)
0001580C 1028 0028                  		move.b	obSubtype(a0),d0
00015810 0240 0002                  		andi.w	#2,d0
00015814 317B 00CE 0030             		move.w	word_222BE(pc,d0.w),$30(a0)
0001581A                            
0001581A                            Booster_Loop:				; DATA XREF: h+B346o
0001581A                            		;move.b	(obTimeFrame).w,obFrame(a0)
0001581A                            		;andi.b	#2,d0
0001581A                            		;move.b	d0,obFrame(a0)
0001581A                            		;move.b	(v_ani1_frame).w,obFrame(a0)
0001581A 3028 0008                  		move.w	obX(a0),d0
0001581E 3200                       		move.w	d0,d1
00015820 0440 0010                  		subi.w	#$10,d0
00015824 0641 0010                  		addi.w	#$10,d1
00015828 3428 000C                  		move.w	obY(a0),d2
0001582C 3602                       		move.w	d2,d3
0001582E 0442 0010                  		subi.w	#$10,d2
00015832 0643 0010                  		addi.w	#$10,d3
00015836                            		;lea	($FFFFB000).w,a1
00015836 43F8 D000                  		lea	(v_player).w,a1
0001583A 0829 0001 0022             		btst	#1,obStatus(a1)
00015840 6600                       		bne.s	loc_22384
00015842 3829 0008                  		move.w	obX(a1),d4
00015846 B840                       		cmp.w	d0,d4
00015848 6500 0000                  		bcs.w	loc_22384
0001584C B841                       		cmp.w	d1,d4
0001584E 6400 0000                  		bcc.w	loc_22384
00015852 3829 000C                  		move.w	obY(a1),d4
00015856 B842                       		cmp.w	d2,d4
00015858 6500 0000                  		bcs.w	loc_22384
0001585C B843                       		cmp.w	d3,d4
0001585E 6400 0000                  		bcc.w	loc_22384
00015862 3F00                       		move.w	d0,-(sp)
00015864 6100 0000                  		bsr.w	loc_22388
00015868 301F                       		move.w	(sp)+,d0
0001586A                            		;bsr.w	loc_22388
0001586A                            
0001586A                            ;loc_22354:				; CODE XREF: h+B3B6j h+B3BEj ...
0001586A                            		;lea	(v_player).w,a1 ; a1=character
0001586A                            		;btst	#1,$22(a1)
0001586A                            		;bne.s	loc_22384
0001586A                            		;move.w	8(a1),d4
0001586A                            		;cmp.w	d0,d4
0001586A                            		;bcs.w	loc_22384
0001586A                            		;cmp.w	d1,d4
0001586A                            		;bcc.w	loc_22384
0001586A                            		;move.w	$C(a1),d4
0001586A                            		;cmp.w	d2,d4
0001586A                            		;bcs.w	loc_22384
0001586A                            		;cmp.w	d3,d4
0001586A                            		;bcc.w	loc_22384
0001586A                            		;bsr.w	loc_22388
0001586A                            
0001586A                            loc_22384:				; CODE XREF: h+B3EAj h+B3F2j ...
0001586A 4EFA A92C                  		jmp	MarkObjGone		;jsr	loc_223FC
0001586E                            ; ===========================================================================
0001586E                            
0001586E                            loc_22388:				; CODE XREF: h+B3DAp h+B40Cp
0001586E 3029 0010                  		move.w	obVelX(a1),d0
00015872 0828 0000 0022             		btst	#0,obStatus(a0)
00015878 6700                       		beq.s	loc_22396
0001587A 4440                       		neg.w	d0
0001587C                            
0001587C                            loc_22396:				; CODE XREF: h+B41Ej
0001587C 0C40 1000                  		cmpi.w	#$1000,d0 			; is the character already going super fast?
00015880 6C00                       		bge.s	loc_223D8 			; if yes, branch to not change the speed
00015882 3368 0030 0010             		move.w	$30(a0),obVelX(a1)  ; make the character go super fast
00015888 08A9 0000 0022             		bclr	#0,obStatus(a1)		; turn him right
0001588E 0828 0000 0022             		btst	#0,obStatus(a0)		; was that the correct direction?
00015894 6700                       		beq.s	loc_223BA 			; if yes, branch
00015896 08E9 0000 0022             		bset	#0,obStatus(a1)		; turn him left
0001589C 4469 0010                  		neg.w	obVelX(a1)			; make the boosting direction left
000158A0                            
000158A0                            loc_223BA:				; CODE XREF: h+B43Aj
000158A0                            		;move.w	#$F,$2E(a1)
000158A0 3369 0010 0014             		move.w	obVelX(a1),obInertia(a1)
000158A6 08A8 0005 0022             		bclr	#5,obStatus(a0)
000158AC 08A8 0006 0022             		bclr	#6,obStatus(a0)
000158B2 08A9 0005 0022             		bclr	#5,obStatus(a1)
000158B8                            		
000158B8                            		;addq.w	#5,obY(a1)
000158B8                            
000158B8                            loc_223D8:				; CODE XREF: h+B426j
000158B8                            		;move.w	#$D1,d0	; 'Ì'
000158B8                            		;jmp	(play_SFX).l
000158B8                            ;		bset	#2,obStatus(a1)		;set rolling bit
000158B8                            ;		move.b	#$E,obHeight(a1) 	; change hitbox
000158B8                            ;		move.b	#7,obWidth(a1)	  	; change hitbox
000158B8                            ;		move.b	#id_Roll,obAnim(a1) ; use "rolling" animation
000158B8 303C 00D1                  		move.w	#$D1,d0
000158BC 4EF9 0000 147C             		jmp	(PlaySound_Special).l ;	play spring sound
000158C2                            ; ===========================================================================
000158C2                            ; -------------------------------------------------------------------------------
000158C2                            ; sprite mappings
000158C2                            ; -------------------------------------------------------------------------------
000158C2                            Map_SpeedBooster:	incbin "_maps/SpeedBooster.asm"
00015A91                            Nem_SpeedBooster:	incbin "artnem/speedbooster.bin"
00015C88                            ; ===========================================================================
00015C88                            
00015C88                            ;loc_223FC:				; CODE XREF: h+B410j	
00015C88                            ;       out_of_range    DeleteObject
00015C88                            ;		lea	(Ani_Eggman).l,a1
00015C88                            ;		jsr	AnimateSprite
00015C88                            ;		bra.w	RememberState
00015C88                            ;		even
00015C88                            ;		even
00015C88                            ; ---------------------------------------------------------------------------
00015C88                            ; Object 08 - water splash (LZ)
00015C88                            ; ---------------------------------------------------------------------------
00015C88                            
00015C88                            Obj08:					; XREF: Obj_Index
00015C88 7000                       		moveq	#0,d0
00015C8A 1028 0024                  		move.b	$24(a0),d0
00015C8E 323B 0000                  		move.w	Obj08_Index(pc,d0.w),d1
00015C92 4EFB 1000                  		jmp	Obj08_Index(pc,d1.w)
00015C96                            ; ===========================================================================
00015C96 0000                       Obj08_Index:	dc.w Obj08_Main-Obj08_Index
00015C98 0000                       		dc.w Obj08_Display-Obj08_Index
00015C9A 0000                       		dc.w Obj08_Delete-Obj08_Index
00015C9C                            ; ===========================================================================
00015C9C                            
00015C9C                            Obj08_Main:				; XREF: Obj08_Index
00015C9C 5428 0024                  		addq.b	#2,$24(a0)
00015CA0 217C 0000 0000 0004        		move.l	#Map_obj08,4(a0)
00015CA8 0028 0004 0001             		ori.b	#4,1(a0)
00015CAE 117C 0001 0018             		move.b	#1,$18(a0)
00015CB4 117C 0010 0019             		move.b	#$10,$19(a0)
00015CBA 317C 4259 0002             		move.w	#$4259,2(a0)
00015CC0 3178 D008 0008             		move.w	($FFFFD008).w,8(a0) ; copy x-position from Sonic
00015CC6                            
00015CC6                            Obj08_Display:				; XREF: Obj08_Index
00015CC6 3178 F646 000C             		move.w	($FFFFF646).w,$C(a0) ; copy y-position from water height
00015CCC 43F9 0000 0000             		lea	(Ani_obj08).l,a1
00015CD2 4EB9 0000 B1EE             		jsr	AnimateSprite
00015CD8 4EFA 83FC                  		jmp	DisplaySprite
00015CDC                            ; ===========================================================================
00015CDC                            
00015CDC                            Obj08_Delete:				; XREF: Obj08_Index
00015CDC 4EFA 8434                  		jmp	DeleteObject	; delete when animation	is complete
00015CE0                            ; ===========================================================================
00015CE0                            Ani_obj38:
00015CE0                            	include "_anim\obj38.asm"
00015CE0                            ; ---------------------------------------------------------------------------
00015CE0                            ; Animation script - shield and invincibility stars
00015CE0                            ; ---------------------------------------------------------------------------
00015CE0 0000                       		dc.w byte_14356-Ani_obj38
00015CE2 0000                       		dc.w byte_1435E-Ani_obj38
00015CE4 0000                       		dc.w byte_14364-Ani_obj38
00015CE6 0000                       		dc.w byte_1437E-Ani_obj38
00015CE8 0000                       		dc.w byte_14398-Ani_obj38
00015CEA 0101 0002 0003 00FF        byte_14356:	dc.b 1,	1, 0, 2, 0, 3, 0, $FF
00015CF2 0504 0506 07FF             byte_1435E:	dc.b 5,	4, 5, 6, 7, $FF
00015CF8 0004 0400 0404 0005 0500+  byte_14364:	dc.b 0,	4, 4, 0, 4, 4, 0, 5, 5,	0, 5, 5, 0, 6, 6, 0, 6
00015D09 0600 0707 0007 0700 FF     		dc.b 6,	0, 7, 7, 0, 7, 7, 0, $FF
00015D12 0004 0400 0400 0005 0500+  byte_1437E:	dc.b 0,	4, 4, 0, 4, 0, 0, 5, 5,	0, 5, 0, 0, 6, 6, 0, 6
00015D23 0000 0707 0007 0000 FF     		dc.b 0,	0, 7, 7, 0, 7, 0, 0, $FF
00015D2C 0004 0000 0400 0005 0000+  byte_14398:	dc.b 0,	4, 0, 0, 4, 0, 0, 5, 0,	0, 5, 0, 0, 6, 0, 0, 6
00015D3D 0000 0700 0007 0000 FF     		dc.b 0,	0, 7, 0, 0, 7, 0, 0, $FF
00015D46                            		even
00015D46                            		even
00015D46                            
00015D46                            ; ---------------------------------------------------------------------------
00015D46                            ; Sprite mappings - shield and invincibility stars
00015D46                            ; ---------------------------------------------------------------------------
00015D46                            Map_obj38:
00015D46                            	include "_maps\obj38.asm"
00015D46                            ; ---------------------------------------------------------------------------
00015D46                            ; Sprite mappings - shield and invincibility stars
00015D46                            ; ---------------------------------------------------------------------------
00015D46 0000 0000                  		dc.w byte_143CD-Map_obj38, byte_143C2-Map_obj38
00015D4A 0000 0000                  		dc.w byte_143D7-Map_obj38, byte_143EC-Map_obj38
00015D4E 0000 0000                  		dc.w byte_14401-Map_obj38, byte_14416-Map_obj38
00015D52 0000 0000                  		dc.w byte_1442B-Map_obj38, byte_14440-Map_obj38
00015D56 04                         byte_143C2:	dc.b 4
00015D57 E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
00015D5C E80A 0009 00               		dc.b $E8, $A, 0, 9, 0
00015D61 000A 1000 E8               byte_143CD:	dc.b 0,	$A, $10, 0, $E8
00015D66 000A 1009 00               		dc.b 0,	$A, $10, 9, 0
00015D6B 04                         byte_143D7:	dc.b 4
00015D6C E80A 0812 E9               		dc.b $E8, $A, 8, $12, $E9
00015D71 E80A 0012 00               		dc.b $E8, $A, 0, $12, 0
00015D76 000A 1812 E9               		dc.b 0,	$A, $18, $12, $E9
00015D7B 000A 1012 00               		dc.b 0,	$A, $10, $12, 0
00015D80 04                         byte_143EC:	dc.b 4
00015D81 E80A 0809 E8               		dc.b $E8, $A, 8, 9, $E8
00015D86 E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
00015D8B 000A 1809 E8               		dc.b 0,	$A, $18, 9, $E8
00015D90 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
00015D95 04                         byte_14401:	dc.b 4
00015D96 E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
00015D9B E80A 0009 00               		dc.b $E8, $A, 0, 9, 0
00015DA0 000A 1809 E8               		dc.b 0,	$A, $18, 9, $E8
00015DA5 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
00015DAA 04                         byte_14416:	dc.b 4
00015DAB E80A 0809 E8               		dc.b $E8, $A, 8, 9, $E8
00015DB0 E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
00015DB5 000A 1000 E8               		dc.b 0,	$A, $10, 0, $E8
00015DBA 000A 1009 00               		dc.b 0,	$A, $10, 9, 0
00015DBF 04                         byte_1442B:	dc.b 4
00015DC0 E80A 0012 E8               		dc.b $E8, $A, 0, $12, $E8
00015DC5 E80A 001B 00               		dc.b $E8, $A, 0, $1B, 0
00015DCA 000A 181B E8               		dc.b 0,	$A, $18, $1B, $E8
00015DCF 000A 1812 00               		dc.b 0,	$A, $18, $12, 0
00015DD4 04                         byte_14440:	dc.b 4
00015DD5 E80A 081B E8               		dc.b $E8, $A, 8, $1B, $E8
00015DDA E80A 0812 00               		dc.b $E8, $A, 8, $12, 0
00015DDF 000A 1012 E8               		dc.b 0,	$A, $10, $12, $E8
00015DE4 000A 101B 00               		dc.b 0,	$A, $10, $1B, 0
00015DEA 00                         		even
00015DEA 00                         		even
00015DEA                            
00015DEA                            Ani_obj4A:
00015DEA                            	include "_anim\obj4A.asm"
00015DEA                            ; ---------------------------------------------------------------------------
00015DEA                            ; Animation script - special stage entry effect from beta
00015DEA                            ; ---------------------------------------------------------------------------
00015DEA 0000                       		dc.w byte_14458-Ani_obj4A
00015DEC 0500 0100 0100 0701 0702+  byte_14458:	dc.b 5,	0, 1, 0, 1, 0, 7, 1, 7,	2, 7, 3, 7, 4, 7, 5, 7, 6, 7, $FC
00015E00                            		even
00015E00                            		even
00015E00                            
00015E00                            ; ---------------------------------------------------------------------------
00015E00                            ; Sprite mappings - special stage entry	from beta
00015E00                            ; ---------------------------------------------------------------------------
00015E00                            Map_obj4A:
00015E00                            	include "_maps\obj4A.asm"
00015E00                            ; ---------------------------------------------------------------------------
00015E00                            ; Sprite mappings - special stage entry	from beta
00015E00                            ; ---------------------------------------------------------------------------
00015E00 0000 0000                  		dc.w byte_1447C-Map_obj4A, byte_1448C-Map_obj4A
00015E04 0000 0000                  		dc.w byte_1449C-Map_obj4A, byte_144B6-Map_obj4A
00015E08 0000 0000                  		dc.w byte_144E4-Map_obj4A, byte_1453F-Map_obj4A
00015E0C 0000 0000                  		dc.w byte_14595-Map_obj4A, byte_145BF-Map_obj4A
00015E10 03                         byte_1447C:	dc.b 3
00015E11 F800 0000 08               		dc.b $F8, 0, 0,	0, 8
00015E16 0004 0001 00               		dc.b 0,	4, 0, 1, 0
00015E1B 0800 1000 08               		dc.b 8,	0, $10,	0, 8
00015E20 03                         byte_1448C:	dc.b 3
00015E21 F00D 0003 F0               		dc.b $F0, $D, 0, 3, $F0
00015E26 000C 000B F0               		dc.b 0,	$C, 0, $B, $F0
00015E2B 080D 1003 F0               		dc.b 8,	$D, $10, 3, $F0
00015E30 05                         byte_1449C:	dc.b 5
00015E31 E40E 000F F4               		dc.b $E4, $E, 0, $F, $F4
00015E36 EC02 001B EC               		dc.b $EC, 2, 0,	$1B, $EC
00015E3B FC0C 001E F4               		dc.b $FC, $C, 0, $1E, $F4
00015E40 040E 100F F4               		dc.b 4,	$E, $10, $F, $F4
00015E45 0401 101B EC               		dc.b 4,	1, $10,	$1B, $EC
00015E4A 09                         byte_144B6:	dc.b 9
00015E4B F008 0022 F8               		dc.b $F0, 8, 0,	$22, $F8
00015E50 F80E 0025 F0               		dc.b $F8, $E, 0, $25, $F0
00015E55 1008 0031 F0               		dc.b $10, 8, 0,	$31, $F0
00015E5A 0005 0034 10               		dc.b 0,	5, 0, $34, $10
00015E5F F800 0825 10               		dc.b $F8, 0, 8,	$25, $10
00015E64 F000 1836 18               		dc.b $F0, 0, $18, $36, $18
00015E69 F800 1825 20               		dc.b $F8, 0, $18, $25, $20
00015E6E 0000 0825 28               		dc.b 0,	0, 8, $25, $28
00015E73 F800 0025 30               		dc.b $F8, 0, 0,	$25, $30
00015E78 12                         byte_144E4:	dc.b $12
00015E79 0000 1825 F0               		dc.b 0,	0, $18,	$25, $F0
00015E7E F804 0038 F8               		dc.b $F8, 4, 0,	$38, $F8
00015E83 F000 0026 08               		dc.b $F0, 0, 0,	$26, 8
00015E88 0000 0025 00               		dc.b 0,	0, 0, $25, 0
00015E8D 0800 1825 F8               		dc.b 8,	0, $18,	$25, $F8
00015E92 1000 1026 00               		dc.b $10, 0, $10, $26, 0
00015E97 0800 1038 08               		dc.b 8,	0, $10,	$38, 8
00015E9C F800 0029 10               		dc.b $F8, 0, 0,	$29, $10
00015EA1 0000 0026 10               		dc.b 0,	0, 0, $26, $10
00015EA6 0000 002D 18               		dc.b 0,	0, 0, $2D, $18
00015EAB 0800 0826 18               		dc.b 8,	0, 8, $26, $18
00015EB0 0800 0029 20               		dc.b 8,	0, 0, $29, $20
00015EB5 F800 0026 20               		dc.b $F8, 0, 0,	$26, $20
00015EBA F800 002D 28               		dc.b $F8, 0, 0,	$2D, $28
00015EBF 0000 003A 28               		dc.b 0,	0, 0, $3A, $28
00015EC4 F800 1826 30               		dc.b $F8, 0, $18, $26, $30
00015EC9 0000 1025 38               		dc.b 0,	0, $10,	$25, $38
00015ECE F800 1025 40               		dc.b $F8, 0, $10, $25, $40
00015ED3 11                         byte_1453F:	dc.b $11
00015ED4 F800 0825 00               		dc.b $F8, 0, 8,	$25, 0
00015ED9 F000 0038 10               		dc.b $F0, 0, 0,	$38, $10
00015EDE 1000 0825 00               		dc.b $10, 0, 8,	$25, 0
00015EE3 0000 1825 10               		dc.b 0,	0, $18,	$25, $10
00015EE8 0800 1025 18               		dc.b 8,	0, $10,	$25, $18
00015EED F800 1825 20               		dc.b $F8, 0, $18, $25, $20
00015EF2 0000 1026 28               		dc.b 0,	0, $10,	$26, $28
00015EF7 F800 1025 30               		dc.b $F8, 0, $10, $25, $30
00015EFC 0000 0025 30               		dc.b 0,	0, 0, $25, $30
00015F01 0800 0825 30               		dc.b 8,	0, 8, $25, $30
00015F06 0000 0826 38               		dc.b 0,	0, 8, $26, $38
00015F0B 0800 0029 38               		dc.b 8,	0, 0, $29, $38
00015F10 F800 0826 40               		dc.b $F8, 0, 8,	$26, $40
00015F15 0000 002D 40               		dc.b 0,	0, 0, $2D, $40
00015F1A F800 0825 48               		dc.b $F8, 0, 8,	$25, $48
00015F1F 0000 0025 48               		dc.b 0,	0, 0, $25, $48
00015F24 0000 1025 50               		dc.b 0,	0, $10,	$25, $50
00015F29 09                         byte_14595:	dc.b 9
00015F2A FC00 0826 30               		dc.b $FC, 0, 8,	$26, $30
00015F2F 0400 0825 28               		dc.b 4,	0, 8, $25, $28
00015F34 0400 1027 38               		dc.b 4,	0, $10,	$27, $38
00015F39 0400 0826 40               		dc.b 4,	0, 8, $26, $40
00015F3E FC00 1025 40               		dc.b $FC, 0, $10, $25, $40
00015F43 FC00 1026 48               		dc.b $FC, 0, $10, $26, $48
00015F48 0C00 0827 48               		dc.b $C, 0, 8, $27, $48
00015F4D 0400 1826 50               		dc.b 4,	0, $18,	$26, $50
00015F52 04                         		dc.b 4
00015F53 0008 2758 00               byte_145BF:	dc.b 0,	8, $27,	$58, 0
00015F58                            		even
00015F58                            		even
00015F58                            
00015F58                            Ani_obj08:
00015F58                            	include "_anim\obj08.asm"
00015F58                            ; ---------------------------------------------------------------------------
00015F58                            ; Animation script - water splash (LZ)
00015F58                            ; ---------------------------------------------------------------------------
00015F58 0000                       		dc.w byte_145C6-Ani_obj08
00015F5A 0400 0102 FC00             byte_145C6:	dc.b 4,	0, 1, 2, $FC, 0
00015F60                            		even
00015F60                            		even
00015F60                            
00015F60                            ; ---------------------------------------------------------------------------
00015F60                            ; Sprite mappings - water splash (LZ)
00015F60                            ; ---------------------------------------------------------------------------
00015F60                            Map_obj08:
00015F60                            	include "_maps\obj08.asm"
00015F60                            ; ---------------------------------------------------------------------------
00015F60                            ; Sprite mappings - water splash (LZ)
00015F60                            ; ---------------------------------------------------------------------------
00015F60 0000                       		dc.w byte_145D2-Map_obj08
00015F62 0000                       		dc.w byte_145DD-Map_obj08
00015F64 0000                       		dc.w byte_145E8-Map_obj08
00015F66 02                         byte_145D2:	dc.b 2
00015F67 F204 006D F8               		dc.b $F2, 4, 0,	$6D, $F8
00015F6C FA0C 006F F0               		dc.b $FA, $C, 0, $6F, $F0
00015F71 02                         byte_145DD:	dc.b 2
00015F72 E200 0073 F8               		dc.b $E2, 0, 0,	$73, $F8
00015F77 EA0E 0074 F0               		dc.b $EA, $E, 0, $74, $F0
00015F7C 01                         byte_145E8:	dc.b 1
00015F7D E20F 0080 F0               		dc.b $E2, $F, 0, $80, $F0
00015F82                            		even
00015F82                            		even
00015F82                            
00015F82                            ; ---------------------------------------------------------------------------
00015F82                            ; Subroutine to	change Sonic's angle & position as he walks along the floor
00015F82                            ; ---------------------------------------------------------------------------
00015F82                            
00015F82                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015F82                            
00015F82                            
00015F82                            Sonic_AnglePos:				; XREF: Obj01_MdNormal; Obj01_MdRoll
00015F82 0828 0003 0022             		btst	#3,$22(a0)
00015F88 6700                       		beq.s	loc_14602
00015F8A 7000                       		moveq	#0,d0
00015F8C 11C0 F768                  		move.b	d0,($FFFFF768).w
00015F90 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00015F94 4E75                       		rts	
00015F96                            ; ===========================================================================
00015F96                            
00015F96                            loc_14602:
00015F96 7003                       		moveq	#3,d0
00015F98 11C0 F768                  		move.b	d0,($FFFFF768).w
00015F9C 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00015FA0 1028 0026                  		move.b	$26(a0),d0
00015FA4 0600 0020                  		addi.b	#$20,d0
00015FA8 6A00                       		bpl.s	loc_14624
00015FAA 1028 0026                  		move.b	$26(a0),d0
00015FAE 6A00                       		bpl.s	loc_1461E
00015FB0 5300                       		subq.b	#1,d0
00015FB2                            
00015FB2                            loc_1461E:
00015FB2 0600 0020                  		addi.b	#$20,d0
00015FB6 6000                       		bra.s	loc_14630
00015FB8                            ; ===========================================================================
00015FB8                            
00015FB8                            loc_14624:
00015FB8 1028 0026                  		move.b	$26(a0),d0
00015FBC 6A00                       		bpl.s	loc_1462C
00015FBE 5200                       		addq.b	#1,d0
00015FC0                            
00015FC0                            loc_1462C:
00015FC0 0600 001F                  		addi.b	#$1F,d0
00015FC4                            
00015FC4                            loc_14630:
00015FC4 0200 00C0                  		andi.b	#$C0,d0
00015FC8 0C00 0040                  		cmpi.b	#$40,d0
00015FCC 6700 0000                  		beq.w	Sonic_WalkVertL
00015FD0 0C00 0080                  		cmpi.b	#$80,d0
00015FD4 6700 0000                  		beq.w	Sonic_WalkCeiling
00015FD8 0C00 00C0                  		cmpi.b	#$C0,d0
00015FDC 6700 0000                  		beq.w	Sonic_WalkVertR
00015FE0 3428 000C                  		move.w	$C(a0),d2
00015FE4 3628 0008                  		move.w	8(a0),d3
00015FE8 7000                       		moveq	#0,d0
00015FEA 1028 0016                  		move.b	$16(a0),d0
00015FEE 4880                       		ext.w	d0
00015FF0 D440                       		add.w	d0,d2
00015FF2 1028 0017                  		move.b	$17(a0),d0
00015FF6 4880                       		ext.w	d0
00015FF8 D640                       		add.w	d0,d3
00015FFA 49F8 F768                  		lea	($FFFFF768).w,a4
00015FFE 367C 0010                  		movea.w	#$10,a3
00016002 3C3C 0000                  		move.w	#0,d6
00016006 7A0D                       		moveq	#$D,d5
00016008 6100 0000                  		bsr.w	FindFloor
0001600C 3F01                       		move.w	d1,-(sp)
0001600E 3428 000C                  		move.w	$C(a0),d2
00016012 3628 0008                  		move.w	8(a0),d3
00016016 7000                       		moveq	#0,d0
00016018 1028 0016                  		move.b	$16(a0),d0
0001601C 4880                       		ext.w	d0
0001601E D440                       		add.w	d0,d2
00016020 1028 0017                  		move.b	$17(a0),d0
00016024 4880                       		ext.w	d0
00016026 4440                       		neg.w	d0
00016028 D640                       		add.w	d0,d3
0001602A 49F8 F76A                  		lea	($FFFFF76A).w,a4
0001602E 367C 0010                  		movea.w	#$10,a3
00016032 3C3C 0000                  		move.w	#0,d6
00016036 7A0D                       		moveq	#$D,d5
00016038 6100 0000                  		bsr.w	FindFloor
0001603C 301F                       		move.w	(sp)+,d0
0001603E 6100 0000                  		bsr.w	Sonic_Angle
00016042 4A41                       		tst.w	d1
00016044 6700                       		beq.s	locret_146BE
00016046 6A00                       		bpl.s	loc_146C0
00016048 0C41 FFF2                  		cmpi.w	#-$E,d1
0001604C 6D00                       		blt.s	locret_146E6
0001604E D368 000C                  		add.w	d1,$C(a0)
00016052                            
00016052                            locret_146BE:
00016052 4E75                       		rts	
00016054                            ; ===========================================================================
00016054                            
00016054                            loc_146C0:
00016054 0C41 000E                  		cmpi.w	#$E,d1
00016058 6E00                       		bgt.s	loc_146CC
0001605A                            
0001605A                            loc_146C6:
0001605A D368 000C                  		add.w	d1,$C(a0)
0001605E 4E75                       		rts	
00016060                            ; ===========================================================================
00016060                            
00016060                            loc_146CC:
00016060 4A28 0038                  		tst.b	$38(a0)
00016064 66F4                       		bne.s	loc_146C6
00016066 08E8 0001 0022             		bset	#1,$22(a0)
0001606C 08A8 0005 0022             		bclr	#5,$22(a0)
00016072 117C 0001 001D             		move.b	#1,$1D(a0)
00016078 4E75                       		rts	
0001607A                            ; ===========================================================================
0001607A                            
0001607A                            locret_146E6:
0001607A 4E75                       		rts	
0001607C                            ; End of function Sonic_AnglePos
0001607C                            
0001607C                            ; ===========================================================================
0001607C 2428 0008                  		move.l	8(a0),d2
00016080 3028 0010                  		move.w	$10(a0),d0
00016084 48C0                       		ext.l	d0
00016086 E180                       		asl.l	#8,d0
00016088 9480                       		sub.l	d0,d2
0001608A 2142 0008                  		move.l	d2,8(a0)
0001608E 303C 0038                  		move.w	#$38,d0
00016092 48C0                       		ext.l	d0
00016094 E180                       		asl.l	#8,d0
00016096 9680                       		sub.l	d0,d3
00016098 2143 000C                  		move.l	d3,$C(a0)
0001609C 4E75                       		rts	
0001609E                            ; ===========================================================================
0001609E                            
0001609E                            locret_1470A:
0001609E 4E75                       		rts	
000160A0                            ; ===========================================================================
000160A0 2628 000C                  		move.l	$C(a0),d3
000160A4 3028 0012                  		move.w	$12(a0),d0
000160A8 0440 0038                  		subi.w	#$38,d0
000160AC 3140 0012                  		move.w	d0,$12(a0)
000160B0 48C0                       		ext.l	d0
000160B2 E180                       		asl.l	#8,d0
000160B4 9680                       		sub.l	d0,d3
000160B6 2143 000C                  		move.l	d3,$C(a0)
000160BA 4E75                       		rts	
000160BC 4E75                       		rts	
000160BE                            ; ===========================================================================
000160BE 2428 0008                  		move.l	8(a0),d2
000160C2 2628 000C                  		move.l	$C(a0),d3
000160C6 3028 0010                  		move.w	$10(a0),d0
000160CA 48C0                       		ext.l	d0
000160CC E180                       		asl.l	#8,d0
000160CE 9480                       		sub.l	d0,d2
000160D0 3028 0012                  		move.w	$12(a0),d0
000160D4 48C0                       		ext.l	d0
000160D6 E180                       		asl.l	#8,d0
000160D8 9680                       		sub.l	d0,d3
000160DA 2142 0008                  		move.l	d2,8(a0)
000160DE 2143 000C                  		move.l	d3,$C(a0)
000160E2 4E75                       		rts	
000160E4                            
000160E4                            ; ---------------------------------------------------------------------------
000160E4                            ; Subroutine to	change Sonic's angle as he walks along the floor
000160E4                            ; ---------------------------------------------------------------------------
000160E4                            
000160E4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000160E4                            
000160E4                            
000160E4                            Sonic_Angle:				; XREF: Sonic_AnglePos; et al
000160E4 1438 F76A                  		move.b	($FFFFF76A).w,d2
000160E8 B240                       		cmp.w	d0,d1
000160EA 6F00                       		ble.s	loc_1475E
000160EC 1438 F768                  		move.b	($FFFFF768).w,d2
000160F0 3200                       		move.w	d0,d1
000160F2                            
000160F2                            loc_1475E:
000160F2 0802 0000                  		btst	#0,d2
000160F6 6600                       		bne.s	loc_1476A
000160F8 1142 0026                  		move.b	d2,$26(a0)
000160FC 4E75                       		rts	
000160FE                            ; ===========================================================================
000160FE                            
000160FE                            loc_1476A:
000160FE 1428 0026                  		move.b	$26(a0),d2
00016102 0602 0020                  		addi.b	#$20,d2
00016106 0202 00C0                  		andi.b	#$C0,d2
0001610A 1142 0026                  		move.b	d2,$26(a0)
0001610E 4E75                       		rts	
00016110                            ; End of function Sonic_Angle
00016110                            
00016110                            ; ---------------------------------------------------------------------------
00016110                            ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his right
00016110                            ; ---------------------------------------------------------------------------
00016110                            
00016110                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016110                            
00016110                            
00016110                            Sonic_WalkVertR:			; XREF: Sonic_AnglePos
00016110 3428 000C                  		move.w	$C(a0),d2
00016114 3628 0008                  		move.w	8(a0),d3
00016118 7000                       		moveq	#0,d0
0001611A 1028 0017                  		move.b	$17(a0),d0
0001611E 4880                       		ext.w	d0
00016120 4440                       		neg.w	d0
00016122 D440                       		add.w	d0,d2
00016124 1028 0016                  		move.b	$16(a0),d0
00016128 4880                       		ext.w	d0
0001612A D640                       		add.w	d0,d3
0001612C 49F8 F768                  		lea	($FFFFF768).w,a4
00016130 367C 0010                  		movea.w	#$10,a3
00016134 3C3C 0000                  		move.w	#0,d6
00016138 7A0D                       		moveq	#$D,d5
0001613A 6100 0000                  		bsr.w	FindWall
0001613E 3F01                       		move.w	d1,-(sp)
00016140 3428 000C                  		move.w	$C(a0),d2
00016144 3628 0008                  		move.w	8(a0),d3
00016148 7000                       		moveq	#0,d0
0001614A 1028 0017                  		move.b	$17(a0),d0
0001614E 4880                       		ext.w	d0
00016150 D440                       		add.w	d0,d2
00016152 1028 0016                  		move.b	$16(a0),d0
00016156 4880                       		ext.w	d0
00016158 D640                       		add.w	d0,d3
0001615A 49F8 F76A                  		lea	($FFFFF76A).w,a4
0001615E 367C 0010                  		movea.w	#$10,a3
00016162 3C3C 0000                  		move.w	#0,d6
00016166 7A0D                       		moveq	#$D,d5
00016168 6100 0000                  		bsr.w	FindWall
0001616C 301F                       		move.w	(sp)+,d0
0001616E 6100 FF74                  		bsr.w	Sonic_Angle
00016172 4A41                       		tst.w	d1
00016174 6700                       		beq.s	locret_147F0
00016176 6A00                       		bpl.s	loc_147F2
00016178 0C41 FFF2                  		cmpi.w	#-$E,d1
0001617C 6D00 FF20                  		blt.w	locret_1470A
00016180 D368 0008                  		add.w	d1,8(a0)
00016184                            
00016184                            locret_147F0:
00016184 4E75                       		rts	
00016186                            ; ===========================================================================
00016186                            
00016186                            loc_147F2:
00016186 0C41 000E                  		cmpi.w	#$E,d1
0001618A 6E00                       		bgt.s	loc_147FE
0001618C                            
0001618C                            loc_147F8:
0001618C D368 0008                  		add.w	d1,8(a0)
00016190 4E75                       		rts	
00016192                            ; ===========================================================================
00016192                            
00016192                            loc_147FE:
00016192 4A28 0038                  		tst.b	$38(a0)
00016196 66F4                       		bne.s	loc_147F8
00016198 08E8 0001 0022             		bset	#1,$22(a0)
0001619E 08A8 0005 0022             		bclr	#5,$22(a0)
000161A4 117C 0001 001D             		move.b	#1,$1D(a0)
000161AA 4E75                       		rts	
000161AC                            ; End of function Sonic_WalkVertR
000161AC                            
000161AC                            ; ---------------------------------------------------------------------------
000161AC                            ; Subroutine allowing Sonic to walk upside-down
000161AC                            ; ---------------------------------------------------------------------------
000161AC                            
000161AC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000161AC                            
000161AC                            
000161AC                            Sonic_WalkCeiling:			; XREF: Sonic_AnglePos
000161AC 3428 000C                  		move.w	$C(a0),d2
000161B0 3628 0008                  		move.w	8(a0),d3
000161B4 7000                       		moveq	#0,d0
000161B6 1028 0016                  		move.b	$16(a0),d0
000161BA 4880                       		ext.w	d0
000161BC 9440                       		sub.w	d0,d2
000161BE 0A42 000F                  		eori.w	#$F,d2
000161C2 1028 0017                  		move.b	$17(a0),d0
000161C6 4880                       		ext.w	d0
000161C8 D640                       		add.w	d0,d3
000161CA 49F8 F768                  		lea	($FFFFF768).w,a4
000161CE 367C FFF0                  		movea.w	#-$10,a3
000161D2 3C3C 1000                  		move.w	#$1000,d6
000161D6 7A0D                       		moveq	#$D,d5
000161D8 6100 0000                  		bsr.w	FindFloor
000161DC 3F01                       		move.w	d1,-(sp)
000161DE 3428 000C                  		move.w	$C(a0),d2
000161E2 3628 0008                  		move.w	8(a0),d3
000161E6 7000                       		moveq	#0,d0
000161E8 1028 0016                  		move.b	$16(a0),d0
000161EC 4880                       		ext.w	d0
000161EE 9440                       		sub.w	d0,d2
000161F0 0A42 000F                  		eori.w	#$F,d2
000161F4 1028 0017                  		move.b	$17(a0),d0
000161F8 4880                       		ext.w	d0
000161FA 9640                       		sub.w	d0,d3
000161FC 49F8 F76A                  		lea	($FFFFF76A).w,a4
00016200 367C FFF0                  		movea.w	#-$10,a3
00016204 3C3C 1000                  		move.w	#$1000,d6
00016208 7A0D                       		moveq	#$D,d5
0001620A 6100 0000                  		bsr.w	FindFloor
0001620E 301F                       		move.w	(sp)+,d0
00016210 6100 FED2                  		bsr.w	Sonic_Angle
00016214 4A41                       		tst.w	d1
00016216 6700                       		beq.s	locret_14892
00016218 6A00                       		bpl.s	loc_14894
0001621A 0C41 FFF2                  		cmpi.w	#-$E,d1
0001621E 6D00 FE5A                  		blt.w	locret_146E6
00016222 9368 000C                  		sub.w	d1,$C(a0)
00016226                            
00016226                            locret_14892:
00016226 4E75                       		rts	
00016228                            ; ===========================================================================
00016228                            
00016228                            loc_14894:
00016228 0C41 000E                  		cmpi.w	#$E,d1
0001622C 6E00                       		bgt.s	loc_148A0
0001622E                            
0001622E                            loc_1489A:
0001622E 9368 000C                  		sub.w	d1,$C(a0)
00016232 4E75                       		rts	
00016234                            ; ===========================================================================
00016234                            
00016234                            loc_148A0:
00016234 4A28 0038                  		tst.b	$38(a0)
00016238 66F4                       		bne.s	loc_1489A
0001623A 08E8 0001 0022             		bset	#1,$22(a0)
00016240 08A8 0005 0022             		bclr	#5,$22(a0)
00016246 117C 0001 001D             		move.b	#1,$1D(a0)
0001624C 4E75                       		rts	
0001624E                            ; End of function Sonic_WalkCeiling
0001624E                            
0001624E                            ; ---------------------------------------------------------------------------
0001624E                            ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his left
0001624E                            ; ---------------------------------------------------------------------------
0001624E                            
0001624E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001624E                            
0001624E                            
0001624E                            Sonic_WalkVertL:			; XREF: Sonic_AnglePos
0001624E 3428 000C                  		move.w	$C(a0),d2
00016252 3628 0008                  		move.w	8(a0),d3
00016256 7000                       		moveq	#0,d0
00016258 1028 0017                  		move.b	$17(a0),d0
0001625C 4880                       		ext.w	d0
0001625E 9440                       		sub.w	d0,d2
00016260 1028 0016                  		move.b	$16(a0),d0
00016264 4880                       		ext.w	d0
00016266 9640                       		sub.w	d0,d3
00016268 0A43 000F                  		eori.w	#$F,d3
0001626C 49F8 F768                  		lea	($FFFFF768).w,a4
00016270 367C FFF0                  		movea.w	#-$10,a3
00016274 3C3C 0800                  		move.w	#$800,d6
00016278 7A0D                       		moveq	#$D,d5
0001627A 6100 0000                  		bsr.w	FindWall
0001627E 3F01                       		move.w	d1,-(sp)
00016280 3428 000C                  		move.w	$C(a0),d2
00016284 3628 0008                  		move.w	8(a0),d3
00016288 7000                       		moveq	#0,d0
0001628A 1028 0017                  		move.b	$17(a0),d0
0001628E 4880                       		ext.w	d0
00016290 D440                       		add.w	d0,d2
00016292 1028 0016                  		move.b	$16(a0),d0
00016296 4880                       		ext.w	d0
00016298 9640                       		sub.w	d0,d3
0001629A 0A43 000F                  		eori.w	#$F,d3
0001629E 49F8 F76A                  		lea	($FFFFF76A).w,a4
000162A2 367C FFF0                  		movea.w	#-$10,a3
000162A6 3C3C 0800                  		move.w	#$800,d6
000162AA 7A0D                       		moveq	#$D,d5
000162AC 6100 0000                  		bsr.w	FindWall
000162B0 301F                       		move.w	(sp)+,d0
000162B2 6100 FE30                  		bsr.w	Sonic_Angle
000162B6 4A41                       		tst.w	d1
000162B8 6700                       		beq.s	locret_14934
000162BA 6A00                       		bpl.s	loc_14936
000162BC 0C41 FFF2                  		cmpi.w	#-$E,d1
000162C0 6D00 FDDC                  		blt.w	locret_1470A
000162C4 9368 0008                  		sub.w	d1,8(a0)
000162C8                            
000162C8                            locret_14934:
000162C8 4E75                       		rts	
000162CA                            ; ===========================================================================
000162CA                            
000162CA                            loc_14936:
000162CA 0C41 000E                  		cmpi.w	#$E,d1
000162CE 6E00                       		bgt.s	loc_14942
000162D0                            
000162D0                            loc_1493C:
000162D0 9368 0008                  		sub.w	d1,8(a0)
000162D4 4E75                       		rts	
000162D6                            ; ===========================================================================
000162D6                            
000162D6                            loc_14942:
000162D6 4A28 0038                  		tst.b	$38(a0)
000162DA 66F4                       		bne.s	loc_1493C
000162DC 08E8 0001 0022             		bset	#1,$22(a0)
000162E2 08A8 0005 0022             		bclr	#5,$22(a0)
000162E8 117C 0001 001D             		move.b	#1,$1D(a0)
000162EE 4E75                       		rts	
000162F0                            ; End of function Sonic_WalkVertL
000162F0                            
000162F0                            ; ---------------------------------------------------------------------------
000162F0                            ; Subroutine to	find which tile	the object is standing on
000162F0                            ; ---------------------------------------------------------------------------
000162F0                            
000162F0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000162F0                            
000162F0                            
000162F0                            Floor_ChkTile:				; XREF: FindFloor; et al
000162F0 3002                       		move.w	d2,d0
000162F2 E248                       		lsr.w	#1,d0
000162F4 0240 0380                  		andi.w	#$380,d0
000162F8 3203                       		move.w	d3,d1
000162FA E049                       		lsr.w	#8,d1
000162FC 0241 007F                  		andi.w	#$7F,d1
00016300 D041                       		add.w	d1,d0
00016302 72FF                       		moveq	#-1,d1
00016304 43F8 A400                  		lea	($FFFFA400).w,a1
00016308 1231 0000                  		move.b	(a1,d0.w),d1
0001630C 6700                       		beq.s	loc_14996
0001630E 6B00                       		bmi.s	loc_1499A
00016310 5301                       		subq.b	#1,d1
00016312 4881                       		ext.w	d1
00016314 EE59                       		ror.w	#7,d1
00016316 3002                       		move.w	d2,d0
00016318 D040                       		add.w	d0,d0
0001631A 0240 01E0                  		andi.w	#$1E0,d0
0001631E D240                       		add.w	d0,d1
00016320 3003                       		move.w	d3,d0
00016322 E648                       		lsr.w	#3,d0
00016324 0240 001E                  		andi.w	#$1E,d0
00016328 D240                       		add.w	d0,d1
0001632A                            
0001632A                            loc_14996:
0001632A 2241                       		movea.l	d1,a1
0001632C 4E75                       		rts	
0001632E                            ; ===========================================================================
0001632E                            
0001632E                            loc_1499A:
0001632E 0241 007F                  		andi.w	#$7F,d1
00016332 0828 0006 0001             		btst	#6,1(a0)
00016338 6700                       		beq.s	loc_149B2
0001633A 5241                       		addq.w	#1,d1
0001633C 0C41 0029                  		cmpi.w	#$29,d1
00016340 6600                       		bne.s	loc_149B2
00016342 323C 0051                  		move.w	#$51,d1
00016346                            
00016346                            loc_149B2:
00016346 5301                       		subq.b	#1,d1
00016348 EE59                       		ror.w	#7,d1
0001634A 3002                       		move.w	d2,d0
0001634C D040                       		add.w	d0,d0
0001634E 0240 01E0                  		andi.w	#$1E0,d0
00016352 D240                       		add.w	d0,d1
00016354 3003                       		move.w	d3,d0
00016356 E648                       		lsr.w	#3,d0
00016358 0240 001E                  		andi.w	#$1E,d0
0001635C D240                       		add.w	d0,d1
0001635E 2241                       		movea.l	d1,a1
00016360 4E75                       		rts	
00016362                            ; End of function Floor_ChkTile
00016362                            
00016362                            
00016362                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016362                            
00016362                            
00016362                            FindFloor:				; XREF: Sonic_AnglePos; et al
00016362 618C                       		bsr.s	Floor_ChkTile
00016364 3011                       		move.w	(a1),d0
00016366 3800                       		move.w	d0,d4
00016368 0240 07FF                  		andi.w	#$7FF,d0
0001636C 6700                       		beq.s	loc_149DE
0001636E 0B04                       		btst	d5,d4
00016370 6600                       		bne.s	loc_149EC
00016372                            
00016372                            loc_149DE:
00016372 D44B                       		add.w	a3,d2
00016374 6100 0000                  		bsr.w	FindFloor2
00016378 944B                       		sub.w	a3,d2
0001637A 0641 0010                  		addi.w	#$10,d1
0001637E 4E75                       		rts	
00016380                            ; ===========================================================================
00016380                            
00016380                            loc_149EC:
00016380 2478 F796                  		movea.l	($FFFFF796).w,a2 ; load	collision index
00016384 1032 0000                  		move.b	(a2,d0.w),d0
00016388 0240 00FF                  		andi.w	#$FF,d0
0001638C 67E4                       		beq.s	loc_149DE
0001638E 45F9 0000 0000             		lea	(AngleMap).l,a2
00016394 18B2 0000                  		move.b	(a2,d0.w),(a4)
00016398 E948                       		lsl.w	#4,d0
0001639A 3203                       		move.w	d3,d1
0001639C 0804 000B                  		btst	#$B,d4
000163A0 6700                       		beq.s	loc_14A12
000163A2 4641                       		not.w	d1
000163A4 4414                       		neg.b	(a4)
000163A6                            
000163A6                            loc_14A12:
000163A6 0804 000C                  		btst	#$C,d4
000163AA 6700                       		beq.s	loc_14A22
000163AC 0614 0040                  		addi.b	#$40,(a4)
000163B0 4414                       		neg.b	(a4)
000163B2 0414 0040                  		subi.b	#$40,(a4)
000163B6                            
000163B6                            loc_14A22:
000163B6 0241 000F                  		andi.w	#$F,d1
000163BA D240                       		add.w	d0,d1
000163BC 45F9 0000 0000             		lea	(CollArray1).l,a2
000163C2 1032 1000                  		move.b	(a2,d1.w),d0
000163C6 4880                       		ext.w	d0
000163C8 BD44                       		eor.w	d6,d4
000163CA 0804 000C                  		btst	#$C,d4
000163CE 6700                       		beq.s	loc_14A3E
000163D0 4440                       		neg.w	d0
000163D2                            
000163D2                            loc_14A3E:
000163D2 4A40                       		tst.w	d0
000163D4 679C                       		beq.s	loc_149DE
000163D6 6B00                       		bmi.s	loc_14A5A
000163D8 0C00 0010                  		cmpi.b	#$10,d0
000163DC 6700                       		beq.s	loc_14A66
000163DE 3202                       		move.w	d2,d1
000163E0 0241 000F                  		andi.w	#$F,d1
000163E4 D041                       		add.w	d1,d0
000163E6 323C 000F                  		move.w	#$F,d1
000163EA 9240                       		sub.w	d0,d1
000163EC 4E75                       		rts	
000163EE                            ; ===========================================================================
000163EE                            
000163EE                            loc_14A5A:
000163EE 3202                       		move.w	d2,d1
000163F0 0241 000F                  		andi.w	#$F,d1
000163F4 D041                       		add.w	d1,d0
000163F6 6A00 FF7A                  		bpl.w	loc_149DE
000163FA                            
000163FA                            loc_14A66:
000163FA 944B                       		sub.w	a3,d2
000163FC 6100 0000                  		bsr.w	FindFloor2
00016400 D44B                       		add.w	a3,d2
00016402 0441 0010                  		subi.w	#$10,d1
00016406 4E75                       		rts	
00016408                            ; End of function FindFloor
00016408                            
00016408                            
00016408                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016408                            
00016408                            
00016408                            FindFloor2:				; XREF: FindFloor
00016408 6100 FEE6                  		bsr.w	Floor_ChkTile
0001640C 3011                       		move.w	(a1),d0
0001640E 3800                       		move.w	d0,d4
00016410 0240 07FF                  		andi.w	#$7FF,d0
00016414 6700                       		beq.s	loc_14A86
00016416 0B04                       		btst	d5,d4
00016418 6600                       		bne.s	loc_14A94
0001641A                            
0001641A                            loc_14A86:
0001641A 323C 000F                  		move.w	#$F,d1
0001641E 3002                       		move.w	d2,d0
00016420 0240 000F                  		andi.w	#$F,d0
00016424 9240                       		sub.w	d0,d1
00016426 4E75                       		rts	
00016428                            ; ===========================================================================
00016428                            
00016428                            loc_14A94:
00016428 2478 F796                  		movea.l	($FFFFF796).w,a2
0001642C 1032 0000                  		move.b	(a2,d0.w),d0
00016430 0240 00FF                  		andi.w	#$FF,d0
00016434 67E4                       		beq.s	loc_14A86
00016436 45F9 0000 0000             		lea	(AngleMap).l,a2
0001643C 18B2 0000                  		move.b	(a2,d0.w),(a4)
00016440 E948                       		lsl.w	#4,d0
00016442 3203                       		move.w	d3,d1
00016444 0804 000B                  		btst	#$B,d4
00016448 6700                       		beq.s	loc_14ABA
0001644A 4641                       		not.w	d1
0001644C 4414                       		neg.b	(a4)
0001644E                            
0001644E                            loc_14ABA:
0001644E 0804 000C                  		btst	#$C,d4
00016452 6700                       		beq.s	loc_14ACA
00016454 0614 0040                  		addi.b	#$40,(a4)
00016458 4414                       		neg.b	(a4)
0001645A 0414 0040                  		subi.b	#$40,(a4)
0001645E                            
0001645E                            loc_14ACA:
0001645E 0241 000F                  		andi.w	#$F,d1
00016462 D240                       		add.w	d0,d1
00016464 45F9 0000 0000             		lea	(CollArray1).l,a2
0001646A 1032 1000                  		move.b	(a2,d1.w),d0
0001646E 4880                       		ext.w	d0
00016470 BD44                       		eor.w	d6,d4
00016472 0804 000C                  		btst	#$C,d4
00016476 6700                       		beq.s	loc_14AE6
00016478 4440                       		neg.w	d0
0001647A                            
0001647A                            loc_14AE6:
0001647A 4A40                       		tst.w	d0
0001647C 679C                       		beq.s	loc_14A86
0001647E 6B00                       		bmi.s	loc_14AFC
00016480 3202                       		move.w	d2,d1
00016482 0241 000F                  		andi.w	#$F,d1
00016486 D041                       		add.w	d1,d0
00016488 323C 000F                  		move.w	#$F,d1
0001648C 9240                       		sub.w	d0,d1
0001648E 4E75                       		rts	
00016490                            ; ===========================================================================
00016490                            
00016490                            loc_14AFC:
00016490 3202                       		move.w	d2,d1
00016492 0241 000F                  		andi.w	#$F,d1
00016496 D041                       		add.w	d1,d0
00016498 6A00 FF80                  		bpl.w	loc_14A86
0001649C 4641                       		not.w	d1
0001649E 4E75                       		rts	
000164A0                            ; End of function FindFloor2
000164A0                            
000164A0                            
000164A0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000164A0                            
000164A0                            
000164A0                            FindWall:				; XREF: Sonic_WalkVertR; et al
000164A0 6100 FE4E                  		bsr.w	Floor_ChkTile
000164A4 3011                       		move.w	(a1),d0
000164A6 3800                       		move.w	d0,d4
000164A8 0240 07FF                  		andi.w	#$7FF,d0
000164AC 6700                       		beq.s	loc_14B1E
000164AE 0B04                       		btst	d5,d4
000164B0 6600                       		bne.s	loc_14B2C
000164B2                            
000164B2                            loc_14B1E:
000164B2 D64B                       		add.w	a3,d3
000164B4 6100 0000                  		bsr.w	FindWall2
000164B8 964B                       		sub.w	a3,d3
000164BA 0641 0010                  		addi.w	#$10,d1
000164BE 4E75                       		rts	
000164C0                            ; ===========================================================================
000164C0                            
000164C0                            loc_14B2C:
000164C0 2478 F796                  		movea.l	($FFFFF796).w,a2
000164C4 1032 0000                  		move.b	(a2,d0.w),d0
000164C8 0240 00FF                  		andi.w	#$FF,d0
000164CC 67E4                       		beq.s	loc_14B1E
000164CE 45F9 0000 0000             		lea	(AngleMap).l,a2
000164D4 18B2 0000                  		move.b	(a2,d0.w),(a4)
000164D8 E948                       		lsl.w	#4,d0
000164DA 3202                       		move.w	d2,d1
000164DC 0804 000C                  		btst	#$C,d4
000164E0 6700                       		beq.s	loc_14B5A
000164E2 4641                       		not.w	d1
000164E4 0614 0040                  		addi.b	#$40,(a4)
000164E8 4414                       		neg.b	(a4)
000164EA 0414 0040                  		subi.b	#$40,(a4)
000164EE                            
000164EE                            loc_14B5A:
000164EE 0804 000B                  		btst	#$B,d4
000164F2 6700                       		beq.s	loc_14B62
000164F4 4414                       		neg.b	(a4)
000164F6                            
000164F6                            loc_14B62:
000164F6 0241 000F                  		andi.w	#$F,d1
000164FA D240                       		add.w	d0,d1
000164FC 45F9 0000 0000             		lea	(CollArray2).l,a2
00016502 1032 1000                  		move.b	(a2,d1.w),d0
00016506 4880                       		ext.w	d0
00016508 BD44                       		eor.w	d6,d4
0001650A 0804 000B                  		btst	#$B,d4
0001650E 6700                       		beq.s	loc_14B7E
00016510 4440                       		neg.w	d0
00016512                            
00016512                            loc_14B7E:
00016512 4A40                       		tst.w	d0
00016514 679C                       		beq.s	loc_14B1E
00016516 6B00                       		bmi.s	loc_14B9A
00016518 0C00 0010                  		cmpi.b	#$10,d0
0001651C 6700                       		beq.s	loc_14BA6
0001651E 3203                       		move.w	d3,d1
00016520 0241 000F                  		andi.w	#$F,d1
00016524 D041                       		add.w	d1,d0
00016526 323C 000F                  		move.w	#$F,d1
0001652A 9240                       		sub.w	d0,d1
0001652C 4E75                       		rts	
0001652E                            ; ===========================================================================
0001652E                            
0001652E                            loc_14B9A:
0001652E 3203                       		move.w	d3,d1
00016530 0241 000F                  		andi.w	#$F,d1
00016534 D041                       		add.w	d1,d0
00016536 6A00 FF7A                  		bpl.w	loc_14B1E
0001653A                            
0001653A                            loc_14BA6:
0001653A 964B                       		sub.w	a3,d3
0001653C 6100 0000                  		bsr.w	FindWall2
00016540 D64B                       		add.w	a3,d3
00016542 0441 0010                  		subi.w	#$10,d1
00016546 4E75                       		rts	
00016548                            ; End of function FindWall
00016548                            
00016548                            
00016548                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016548                            
00016548                            
00016548                            FindWall2:				; XREF: FindWall
00016548 6100 FDA6                  		bsr.w	Floor_ChkTile
0001654C 3011                       		move.w	(a1),d0
0001654E 3800                       		move.w	d0,d4
00016550 0240 07FF                  		andi.w	#$7FF,d0
00016554 6700                       		beq.s	loc_14BC6
00016556 0B04                       		btst	d5,d4
00016558 6600                       		bne.s	loc_14BD4
0001655A                            
0001655A                            loc_14BC6:
0001655A 323C 000F                  		move.w	#$F,d1
0001655E 3003                       		move.w	d3,d0
00016560 0240 000F                  		andi.w	#$F,d0
00016564 9240                       		sub.w	d0,d1
00016566 4E75                       		rts	
00016568                            ; ===========================================================================
00016568                            
00016568                            loc_14BD4:
00016568 2478 F796                  		movea.l	($FFFFF796).w,a2
0001656C 1032 0000                  		move.b	(a2,d0.w),d0
00016570 0240 00FF                  		andi.w	#$FF,d0
00016574 67E4                       		beq.s	loc_14BC6
00016576 45F9 0000 0000             		lea	(AngleMap).l,a2
0001657C 18B2 0000                  		move.b	(a2,d0.w),(a4)
00016580 E948                       		lsl.w	#4,d0
00016582 3202                       		move.w	d2,d1
00016584 0804 000C                  		btst	#$C,d4
00016588 6700                       		beq.s	loc_14C02
0001658A 4641                       		not.w	d1
0001658C 0614 0040                  		addi.b	#$40,(a4)
00016590 4414                       		neg.b	(a4)
00016592 0414 0040                  		subi.b	#$40,(a4)
00016596                            
00016596                            loc_14C02:
00016596 0804 000B                  		btst	#$B,d4
0001659A 6700                       		beq.s	loc_14C0A
0001659C 4414                       		neg.b	(a4)
0001659E                            
0001659E                            loc_14C0A:
0001659E 0241 000F                  		andi.w	#$F,d1
000165A2 D240                       		add.w	d0,d1
000165A4 45F9 0000 0000             		lea	(CollArray2).l,a2
000165AA 1032 1000                  		move.b	(a2,d1.w),d0
000165AE 4880                       		ext.w	d0
000165B0 BD44                       		eor.w	d6,d4
000165B2 0804 000B                  		btst	#$B,d4
000165B6 6700                       		beq.s	loc_14C26
000165B8 4440                       		neg.w	d0
000165BA                            
000165BA                            loc_14C26:
000165BA 4A40                       		tst.w	d0
000165BC 679C                       		beq.s	loc_14BC6
000165BE 6B00                       		bmi.s	loc_14C3C
000165C0 3203                       		move.w	d3,d1
000165C2 0241 000F                  		andi.w	#$F,d1
000165C6 D041                       		add.w	d1,d0
000165C8 323C 000F                  		move.w	#$F,d1
000165CC 9240                       		sub.w	d0,d1
000165CE 4E75                       		rts	
000165D0                            ; ===========================================================================
000165D0                            
000165D0                            loc_14C3C:
000165D0 3203                       		move.w	d3,d1
000165D2 0241 000F                  		andi.w	#$F,d1
000165D6 D041                       		add.w	d1,d0
000165D8 6A00 FF80                  		bpl.w	loc_14BC6
000165DC 4641                       		not.w	d1
000165DE 4E75                       		rts	
000165E0                            ; End of function FindWall2
000165E0                            
000165E0                            ; ---------------------------------------------------------------------------
000165E0                            ; Unused floor/wall subroutine - logs something	to do with collision
000165E0                            ; ---------------------------------------------------------------------------
000165E0                            
000165E0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000165E0                            
000165E0                            
000165E0                            FloorLog_Unk:				; XREF: Level
000165E0 4E75                       		rts	
000165E2                            
000165E2 43F9 0000 0000             		lea	(CollArray1).l,a1
000165E8 45F9 0000 0000             		lea	(CollArray1).l,a2
000165EE 363C 00FF                  		move.w	#$FF,d3
000165F2                            
000165F2                            loc_14C5E:
000165F2 7A10                       		moveq	#$10,d5
000165F4 343C 000F                  		move.w	#$F,d2
000165F8                            
000165F8                            loc_14C64:
000165F8 7800                       		moveq	#0,d4
000165FA 323C 000F                  		move.w	#$F,d1
000165FE                            
000165FE                            loc_14C6A:
000165FE 3019                       		move.w	(a1)+,d0
00016600 EAA8                       		lsr.l	d5,d0
00016602 D944                       		addx.w	d4,d4
00016604 51C9 FFF8                  		dbf	d1,loc_14C6A
00016608                            
00016608 34C4                       		move.w	d4,(a2)+
0001660A 92FC 0020                  		suba.w	#$20,a1
0001660E 5345                       		subq.w	#1,d5
00016610 51CA FFE6                  		dbf	d2,loc_14C64
00016614                            
00016614 D2FC 0020                  		adda.w	#$20,a1
00016618 51CB FFD8                  		dbf	d3,loc_14C5E
0001661C                            
0001661C 43F9 0000 0000             		lea	(CollArray1).l,a1
00016622 45F9 0000 0000             		lea	(CollArray2).l,a2
00016628 6100                       		bsr.s	FloorLog_Unk2
0001662A 43F9 0000 0000             		lea	(CollArray1).l,a1
00016630 45F9 0000 0000             		lea	(CollArray1).l,a2
00016636                            
00016636                            ; End of function FloorLog_Unk
00016636                            
00016636                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016636                            
00016636                            
00016636                            FloorLog_Unk2:				; XREF: FloorLog_Unk
00016636 363C 0FFF                  		move.w	#$FFF,d3
0001663A                            
0001663A                            loc_14CA6:
0001663A 7400                       		moveq	#0,d2
0001663C 323C 000F                  		move.w	#$F,d1
00016640 3019                       		move.w	(a1)+,d0
00016642 6700                       		beq.s	loc_14CD4
00016644 6B00                       		bmi.s	loc_14CBE
00016646                            
00016646                            loc_14CB2:
00016646 E248                       		lsr.w	#1,d0
00016648 6400                       		bcc.s	loc_14CB8
0001664A 5202                       		addq.b	#1,d2
0001664C                            
0001664C                            loc_14CB8:
0001664C 51C9 FFF8                  		dbf	d1,loc_14CB2
00016650                            
00016650 6000                       		bra.s	loc_14CD6
00016652                            ; ===========================================================================
00016652                            
00016652                            loc_14CBE:
00016652 0C40 FFFF                  		cmpi.w	#-1,d0
00016656 6700                       		beq.s	loc_14CD0
00016658                            
00016658                            loc_14CC4:
00016658 E348                       		lsl.w	#1,d0
0001665A 6400                       		bcc.s	loc_14CCA
0001665C 5302                       		subq.b	#1,d2
0001665E                            
0001665E                            loc_14CCA:
0001665E 51C9 FFF8                  		dbf	d1,loc_14CC4
00016662                            
00016662 6000                       		bra.s	loc_14CD6
00016664                            ; ===========================================================================
00016664                            
00016664                            loc_14CD0:
00016664 303C 0010                  		move.w	#$10,d0
00016668                            
00016668                            loc_14CD4:
00016668 3400                       		move.w	d0,d2
0001666A                            
0001666A                            loc_14CD6:
0001666A 14C2                       		move.b	d2,(a2)+
0001666C 51CB FFCC                  		dbf	d3,loc_14CA6
00016670                            
00016670 4E75                       		rts	
00016672                            
00016672                            ; End of function FloorLog_Unk2
00016672                            
00016672                            
00016672                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016672                            
00016672                            
00016672                            Sonic_WalkSpeed:			; XREF: Sonic_Move
00016672 2628 0008                  		move.l	8(a0),d3
00016676 2428 000C                  		move.l	$C(a0),d2
0001667A 3228 0010                  		move.w	$10(a0),d1
0001667E 48C1                       		ext.l	d1
00016680 E181                       		asl.l	#8,d1
00016682 D681                       		add.l	d1,d3
00016684 3228 0012                  		move.w	$12(a0),d1
00016688 48C1                       		ext.l	d1
0001668A E181                       		asl.l	#8,d1
0001668C D481                       		add.l	d1,d2
0001668E 4842                       		swap	d2
00016690 4843                       		swap	d3
00016692 11C0 F768                  		move.b	d0,($FFFFF768).w
00016696 11C0 F76A                  		move.b	d0,($FFFFF76A).w
0001669A 1200                       		move.b	d0,d1
0001669C 0600 0020                  		addi.b	#$20,d0
000166A0 6A00                       		bpl.s	loc_14D1A
000166A2 1001                       		move.b	d1,d0
000166A4 6A00                       		bpl.s	loc_14D14
000166A6 5300                       		subq.b	#1,d0
000166A8                            
000166A8                            loc_14D14:
000166A8 0600 0020                  		addi.b	#$20,d0
000166AC 6000                       		bra.s	loc_14D24
000166AE                            ; ===========================================================================
000166AE                            
000166AE                            loc_14D1A:
000166AE 1001                       		move.b	d1,d0
000166B0 6A00                       		bpl.s	loc_14D20
000166B2 5200                       		addq.b	#1,d0
000166B4                            
000166B4                            loc_14D20:
000166B4 0600 001F                  		addi.b	#$1F,d0
000166B8                            
000166B8                            loc_14D24:
000166B8 0200 00C0                  		andi.b	#$C0,d0
000166BC 6700 0000                  		beq.w	loc_14DF0
000166C0 0C00 0080                  		cmpi.b	#$80,d0
000166C4 6700 0000                  		beq.w	loc_14F7C
000166C8 0201 0038                  		andi.b	#$38,d1
000166CC 6600                       		bne.s	loc_14D3C
000166CE 5042                       		addq.w	#8,d2
000166D0                            
000166D0                            loc_14D3C:
000166D0 0C00 0040                  		cmpi.b	#$40,d0
000166D4 6700 0000                  		beq.w	loc_1504A
000166D8 6000 0000                  		bra.w	loc_14EBC
000166DC                            
000166DC                            ; End of function Sonic_WalkSpeed
000166DC                            
000166DC                            
000166DC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000166DC                            
000166DC                            
000166DC                            sub_14D48:				; XREF: Sonic_Jump
000166DC 11C0 F768                  		move.b	d0,($FFFFF768).w
000166E0 11C0 F76A                  		move.b	d0,($FFFFF76A).w
000166E4 0600 0020                  		addi.b	#$20,d0
000166E8 0200 00C0                  		andi.b	#$C0,d0
000166EC 0C00 0040                  		cmpi.b	#$40,d0
000166F0 6700 0000                  		beq.w	loc_14FD6
000166F4 0C00 0080                  		cmpi.b	#$80,d0
000166F8 6700 0000                  		beq.w	Sonic_DontRunOnWalls
000166FC 0C00 00C0                  		cmpi.b	#$C0,d0
00016700 6700 0000                  		beq.w	sub_14E50
00016704                            
00016704                            ; End of function sub_14D48
00016704                            
00016704                            ; ---------------------------------------------------------------------------
00016704                            ; Subroutine to	make Sonic land	on the floor after jumping
00016704                            ; ---------------------------------------------------------------------------
00016704                            
00016704                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016704                            
00016704                            
00016704                            Sonic_HitFloor:				; XREF: Sonic_Floor
00016704 3428 000C                  		move.w	$C(a0),d2
00016708 3628 0008                  		move.w	8(a0),d3
0001670C 7000                       		moveq	#0,d0
0001670E 1028 0016                  		move.b	$16(a0),d0
00016712 4880                       		ext.w	d0
00016714 D440                       		add.w	d0,d2
00016716 1028 0017                  		move.b	$17(a0),d0
0001671A 4880                       		ext.w	d0
0001671C D640                       		add.w	d0,d3
0001671E 49F8 F768                  		lea	($FFFFF768).w,a4
00016722 367C 0010                  		movea.w	#$10,a3
00016726 3C3C 0000                  		move.w	#0,d6
0001672A 7A0D                       		moveq	#$D,d5
0001672C 6100 FC34                  		bsr.w	FindFloor
00016730 3F01                       		move.w	d1,-(sp)
00016732 3428 000C                  		move.w	$C(a0),d2
00016736 3628 0008                  		move.w	8(a0),d3
0001673A 7000                       		moveq	#0,d0
0001673C 1028 0016                  		move.b	$16(a0),d0
00016740 4880                       		ext.w	d0
00016742 D440                       		add.w	d0,d2
00016744 1028 0017                  		move.b	$17(a0),d0
00016748 4880                       		ext.w	d0
0001674A 9640                       		sub.w	d0,d3
0001674C 49F8 F76A                  		lea	($FFFFF76A).w,a4
00016750 367C 0010                  		movea.w	#$10,a3
00016754 3C3C 0000                  		move.w	#0,d6
00016758 7A0D                       		moveq	#$D,d5
0001675A 6100 FC06                  		bsr.w	FindFloor
0001675E 301F                       		move.w	(sp)+,d0
00016760 143C 0000                  		move.b	#0,d2
00016764                            
00016764                            loc_14DD0:
00016764 1638 F76A                  		move.b	($FFFFF76A).w,d3
00016768 B240                       		cmp.w	d0,d1
0001676A 6F00                       		ble.s	loc_14DDE
0001676C 1638 F768                  		move.b	($FFFFF768).w,d3
00016770 C141                       		exg	d0,d1
00016772                            
00016772                            loc_14DDE:
00016772 0803 0000                  		btst	#0,d3
00016776 6700                       		beq.s	locret_14DE6
00016778 1602                       		move.b	d2,d3
0001677A                            
0001677A                            locret_14DE6:
0001677A 4E75                       		rts	
0001677C                            
0001677C                            ; End of function Sonic_HitFloor
0001677C                            
0001677C                            ; ===========================================================================
0001677C 3428 000C                  		move.w	$C(a0),d2
00016780 3628 0008                  		move.w	8(a0),d3
00016784                            
00016784                            loc_14DF0:				; XREF: Sonic_WalkSpeed
00016784 0642 000A                  		addi.w	#$A,d2
00016788 49F8 F768                  		lea	($FFFFF768).w,a4
0001678C 367C 0010                  		movea.w	#$10,a3
00016790 3C3C 0000                  		move.w	#0,d6
00016794 7A0E                       		moveq	#$E,d5
00016796 6100 FBCA                  		bsr.w	FindFloor
0001679A 143C 0000                  		move.b	#0,d2
0001679E                            
0001679E                            loc_14E0A:				; XREF: sub_14EB4
0001679E 1638 F768                  		move.b	($FFFFF768).w,d3
000167A2 0803 0000                  		btst	#0,d3
000167A6 6700                       		beq.s	locret_14E16
000167A8 1602                       		move.b	d2,d3
000167AA                            
000167AA                            locret_14E16:
000167AA 4E75                       		rts	
000167AC                            
000167AC                            ; ---------------------------------------------------------------------------
000167AC                            ; Subroutine allowing objects to interact with the floor
000167AC                            ; ---------------------------------------------------------------------------
000167AC                            
000167AC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000167AC                            
000167AC                            
000167AC                            ObjHitFloor:
000167AC 3628 0008                  		move.w	8(a0),d3
000167B0                            
000167B0                            ; End of function ObjHitFloor
000167B0                            
000167B0                            
000167B0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000167B0                            
000167B0                            
000167B0                            ObjHitFloor2:
000167B0 3428 000C                  		move.w	$C(a0),d2
000167B4 7000                       		moveq	#0,d0
000167B6 1028 0016                  		move.b	$16(a0),d0
000167BA 4880                       		ext.w	d0
000167BC D440                       		add.w	d0,d2
000167BE 49F8 F768                  		lea	($FFFFF768).w,a4
000167C2 18BC 0000                  		move.b	#0,(a4)
000167C6 367C 0010                  		movea.w	#$10,a3
000167CA 3C3C 0000                  		move.w	#0,d6
000167CE 7A0D                       		moveq	#$D,d5
000167D0 6100 FB90                  		bsr.w	FindFloor
000167D4 1638 F768                  		move.b	($FFFFF768).w,d3
000167D8 0803 0000                  		btst	#0,d3
000167DC 6700                       		beq.s	locret_14E4E
000167DE 163C 0000                  		move.b	#0,d3
000167E2                            
000167E2                            locret_14E4E:
000167E2 4E75                       		rts	
000167E4                            ; End of function ObjHitFloor2
000167E4                            
000167E4                            
000167E4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000167E4                            
000167E4                            
000167E4                            sub_14E50:				; XREF: sub_14D48
000167E4 3428 000C                  		move.w	$C(a0),d2
000167E8 3628 0008                  		move.w	8(a0),d3
000167EC 7000                       		moveq	#0,d0
000167EE 1028 0017                  		move.b	$17(a0),d0
000167F2 4880                       		ext.w	d0
000167F4 9440                       		sub.w	d0,d2
000167F6 1028 0016                  		move.b	$16(a0),d0
000167FA 4880                       		ext.w	d0
000167FC D640                       		add.w	d0,d3
000167FE 49F8 F768                  		lea	($FFFFF768).w,a4
00016802 367C 0010                  		movea.w	#$10,a3
00016806 3C3C 0000                  		move.w	#0,d6
0001680A 7A0E                       		moveq	#$E,d5
0001680C 6100 FC92                  		bsr.w	FindWall
00016810 3F01                       		move.w	d1,-(sp)
00016812 3428 000C                  		move.w	$C(a0),d2
00016816 3628 0008                  		move.w	8(a0),d3
0001681A 7000                       		moveq	#0,d0
0001681C 1028 0017                  		move.b	$17(a0),d0
00016820 4880                       		ext.w	d0
00016822 D440                       		add.w	d0,d2
00016824 1028 0016                  		move.b	$16(a0),d0
00016828 4880                       		ext.w	d0
0001682A D640                       		add.w	d0,d3
0001682C 49F8 F76A                  		lea	($FFFFF76A).w,a4
00016830 367C 0010                  		movea.w	#$10,a3
00016834 3C3C 0000                  		move.w	#0,d6
00016838 7A0E                       		moveq	#$E,d5
0001683A 6100 FC64                  		bsr.w	FindWall
0001683E 301F                       		move.w	(sp)+,d0
00016840 143C 00C0                  		move.b	#-$40,d2
00016844 6000 FF1E                  		bra.w	loc_14DD0
00016848                            
00016848                            ; End of function sub_14E50
00016848                            
00016848                            
00016848                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016848                            
00016848                            
00016848                            sub_14EB4:				; XREF: Sonic_Floor
00016848 3428 000C                  		move.w	$C(a0),d2
0001684C 3628 0008                  		move.w	8(a0),d3
00016850                            
00016850                            loc_14EBC:
00016850 0643 000A                  		addi.w	#$A,d3
00016854 49F8 F768                  		lea	($FFFFF768).w,a4
00016858 367C 0010                  		movea.w	#$10,a3
0001685C 3C3C 0000                  		move.w	#0,d6
00016860 7A0E                       		moveq	#$E,d5
00016862 6100 FC3C                  		bsr.w	FindWall
00016866 143C 00C0                  		move.b	#-$40,d2
0001686A 6000 FF32                  		bra.w	loc_14E0A
0001686E                            
0001686E                            ; End of function sub_14EB4
0001686E                            
0001686E                            ; ---------------------------------------------------------------------------
0001686E                            ; Subroutine to	detect when an object hits a wall to its right
0001686E                            ; ---------------------------------------------------------------------------
0001686E                            
0001686E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001686E                            
0001686E                            
0001686E                            ObjHitWallRight:
0001686E D668 0008                  		add.w	8(a0),d3
00016872 3428 000C                  		move.w	$C(a0),d2
00016876 49F8 F768                  		lea	($FFFFF768).w,a4
0001687A 18BC 0000                  		move.b	#0,(a4)
0001687E 367C 0010                  		movea.w	#$10,a3
00016882 3C3C 0000                  		move.w	#0,d6
00016886 7A0E                       		moveq	#$E,d5
00016888 6100 FC16                  		bsr.w	FindWall
0001688C 1638 F768                  		move.b	($FFFFF768).w,d3
00016890 0803 0000                  		btst	#0,d3
00016894 6700                       		beq.s	locret_14F06
00016896 163C 00C0                  		move.b	#-$40,d3
0001689A                            
0001689A                            locret_14F06:
0001689A 4E75                       		rts	
0001689C                            
0001689C                            ; End of function ObjHitWallRight
0001689C                            
0001689C                            ; ---------------------------------------------------------------------------
0001689C                            ; Subroutine preventing	Sonic from running on walls and	ceilings when he
0001689C                            ; touches them
0001689C                            ; ---------------------------------------------------------------------------
0001689C                            
0001689C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001689C                            
0001689C                            
0001689C                            Sonic_DontRunOnWalls:			; XREF: Sonic_Floor; et al
0001689C 3428 000C                  		move.w	$C(a0),d2
000168A0 3628 0008                  		move.w	8(a0),d3
000168A4 7000                       		moveq	#0,d0
000168A6 1028 0016                  		move.b	$16(a0),d0
000168AA 4880                       		ext.w	d0
000168AC 9440                       		sub.w	d0,d2
000168AE 0A42 000F                  		eori.w	#$F,d2
000168B2 1028 0017                  		move.b	$17(a0),d0
000168B6 4880                       		ext.w	d0
000168B8 D640                       		add.w	d0,d3
000168BA 49F8 F768                  		lea	($FFFFF768).w,a4
000168BE 367C FFF0                  		movea.w	#-$10,a3
000168C2 3C3C 1000                  		move.w	#$1000,d6
000168C6 7A0E                       		moveq	#$E,d5
000168C8 6100 FA98                  		bsr.w	FindFloor
000168CC 3F01                       		move.w	d1,-(sp)
000168CE 3428 000C                  		move.w	$C(a0),d2
000168D2 3628 0008                  		move.w	8(a0),d3
000168D6 7000                       		moveq	#0,d0
000168D8 1028 0016                  		move.b	$16(a0),d0
000168DC 4880                       		ext.w	d0
000168DE 9440                       		sub.w	d0,d2
000168E0 0A42 000F                  		eori.w	#$F,d2
000168E4 1028 0017                  		move.b	$17(a0),d0
000168E8 4880                       		ext.w	d0
000168EA 9640                       		sub.w	d0,d3
000168EC 49F8 F76A                  		lea	($FFFFF76A).w,a4
000168F0 367C FFF0                  		movea.w	#-$10,a3
000168F4 3C3C 1000                  		move.w	#$1000,d6
000168F8 7A0E                       		moveq	#$E,d5
000168FA 6100 FA66                  		bsr.w	FindFloor
000168FE 301F                       		move.w	(sp)+,d0
00016900 143C 0080                  		move.b	#-$80,d2
00016904 6000 FE5E                  		bra.w	loc_14DD0
00016908                            ; End of function Sonic_DontRunOnWalls
00016908                            
00016908                            ; ===========================================================================
00016908 3428 000C                  		move.w	$C(a0),d2
0001690C 3628 0008                  		move.w	8(a0),d3
00016910                            
00016910                            loc_14F7C:
00016910 0442 000A                  		subi.w	#$A,d2
00016914 0A42 000F                  		eori.w	#$F,d2
00016918 49F8 F768                  		lea	($FFFFF768).w,a4
0001691C 367C FFF0                  		movea.w	#-$10,a3
00016920 3C3C 1000                  		move.w	#$1000,d6
00016924 7A0E                       		moveq	#$E,d5
00016926 6100 FA3A                  		bsr.w	FindFloor
0001692A 143C 0080                  		move.b	#-$80,d2
0001692E 6000 FE6E                  		bra.w	loc_14E0A
00016932                            
00016932                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016932                            
00016932                            
00016932                            ObjHitCeiling:
00016932 3428 000C                  		move.w	$C(a0),d2
00016936 3628 0008                  		move.w	8(a0),d3
0001693A 7000                       		moveq	#0,d0
0001693C 1028 0016                  		move.b	$16(a0),d0
00016940 4880                       		ext.w	d0
00016942 9440                       		sub.w	d0,d2
00016944 0A42 000F                  		eori.w	#$F,d2
00016948 49F8 F768                  		lea	($FFFFF768).w,a4
0001694C 367C FFF0                  		movea.w	#-$10,a3
00016950 3C3C 1000                  		move.w	#$1000,d6
00016954 7A0E                       		moveq	#$E,d5
00016956 6100 FA0A                  		bsr.w	FindFloor
0001695A 1638 F768                  		move.b	($FFFFF768).w,d3
0001695E 0803 0000                  		btst	#0,d3
00016962 6700                       		beq.s	locret_14FD4
00016964 163C 0080                  		move.b	#-$80,d3
00016968                            
00016968                            locret_14FD4:
00016968 4E75                       		rts	
0001696A                            ; End of function ObjHitCeiling
0001696A                            
0001696A                            ; ===========================================================================
0001696A                            
0001696A                            loc_14FD6:				; XREF: sub_14D48
0001696A 3428 000C                  		move.w	$C(a0),d2
0001696E 3628 0008                  		move.w	8(a0),d3
00016972 7000                       		moveq	#0,d0
00016974 1028 0017                  		move.b	$17(a0),d0
00016978 4880                       		ext.w	d0
0001697A 9440                       		sub.w	d0,d2
0001697C 1028 0016                  		move.b	$16(a0),d0
00016980 4880                       		ext.w	d0
00016982 9640                       		sub.w	d0,d3
00016984 0A43 000F                  		eori.w	#$F,d3
00016988 49F8 F768                  		lea	($FFFFF768).w,a4
0001698C 367C FFF0                  		movea.w	#-$10,a3
00016990 3C3C 0800                  		move.w	#$800,d6
00016994 7A0E                       		moveq	#$E,d5
00016996 6100 FB08                  		bsr.w	FindWall
0001699A 3F01                       		move.w	d1,-(sp)
0001699C 3428 000C                  		move.w	$C(a0),d2
000169A0 3628 0008                  		move.w	8(a0),d3
000169A4 7000                       		moveq	#0,d0
000169A6 1028 0017                  		move.b	$17(a0),d0
000169AA 4880                       		ext.w	d0
000169AC D440                       		add.w	d0,d2
000169AE 1028 0016                  		move.b	$16(a0),d0
000169B2 4880                       		ext.w	d0
000169B4 9640                       		sub.w	d0,d3
000169B6 0A43 000F                  		eori.w	#$F,d3
000169BA 49F8 F76A                  		lea	($FFFFF76A).w,a4
000169BE 367C FFF0                  		movea.w	#-$10,a3
000169C2 3C3C 0800                  		move.w	#$800,d6
000169C6 7A0E                       		moveq	#$E,d5
000169C8 6100 FAD6                  		bsr.w	FindWall
000169CC 301F                       		move.w	(sp)+,d0
000169CE 143C 0040                  		move.b	#$40,d2
000169D2 6000 FD90                  		bra.w	loc_14DD0
000169D6                            
000169D6                            ; ---------------------------------------------------------------------------
000169D6                            ; Subroutine to	stop Sonic when	he jumps at a wall
000169D6                            ; ---------------------------------------------------------------------------
000169D6                            
000169D6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000169D6                            
000169D6                            
000169D6                            Sonic_HitWall:				; XREF: Sonic_Floor
000169D6 3428 000C                  		move.w	$C(a0),d2
000169DA 3628 0008                  		move.w	8(a0),d3
000169DE                            
000169DE                            loc_1504A:
000169DE 0443 000A                  		subi.w	#$A,d3
000169E2 0A43 000F                  		eori.w	#$F,d3
000169E6 49F8 F768                  		lea	($FFFFF768).w,a4
000169EA 367C FFF0                  		movea.w	#-$10,a3
000169EE 3C3C 0800                  		move.w	#$800,d6
000169F2 7A0E                       		moveq	#$E,d5
000169F4 6100 FAAA                  		bsr.w	FindWall
000169F8 143C 0040                  		move.b	#$40,d2
000169FC 6000 FDA0                  		bra.w	loc_14E0A
00016A00                            ; End of function Sonic_HitWall
00016A00                            
00016A00                            ; ---------------------------------------------------------------------------
00016A00                            ; Subroutine to	detect when an object hits a wall to its left
00016A00                            ; ---------------------------------------------------------------------------
00016A00                            
00016A00                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016A00                            
00016A00                            
00016A00                            ObjHitWallLeft:
00016A00 D668 0008                  		add.w	8(a0),d3
00016A04 3428 000C                  		move.w	$C(a0),d2
00016A08 49F8 F768                  		lea	($FFFFF768).w,a4
00016A0C 18BC 0000                  		move.b	#0,(a4)
00016A10 367C FFF0                  		movea.w	#-$10,a3
00016A14 3C3C 0800                  		move.w	#$800,d6
00016A18 7A0E                       		moveq	#$E,d5
00016A1A 6100 FA84                  		bsr.w	FindWall
00016A1E 1638 F768                  		move.b	($FFFFF768).w,d3
00016A22 0803 0000                  		btst	#0,d3
00016A26 6700                       		beq.s	locret_15098
00016A28 163C 0040                  		move.b	#$40,d3
00016A2C                            
00016A2C                            locret_15098:
00016A2C 4E75                       		rts	
00016A2E                            ; End of function ObjHitWallLeft
00016A2E                            
00016A2E                            ; ===========================================================================
00016A2E                            ; ---------------------------------------------------------------------------
00016A2E                            ; Object 66 - rotating disc that grabs Sonic (SBZ)
00016A2E                            ; ---------------------------------------------------------------------------
00016A2E                            
00016A2E                            Obj66:					; XREF: Obj_Index
00016A2E 7000                       		moveq	#0,d0
00016A30 1028 0024                  		move.b	$24(a0),d0
00016A34 323B 0000                  		move.w	Obj66_Index(pc,d0.w),d1
00016A38 4EFB 1000                  		jmp	Obj66_Index(pc,d1.w)
00016A3C                            ; ===========================================================================
00016A3C 0000                       Obj66_Index:	dc.w Obj66_Main-Obj66_Index
00016A3E 0000                       		dc.w Obj66_Action-Obj66_Index
00016A40 0000                       		dc.w Obj66_Display-Obj66_Index
00016A42 0000                       		dc.w Obj66_Release-Obj66_Index
00016A44                            ; ===========================================================================
00016A44                            
00016A44                            Obj66_Main:				; XREF: Obj66_Index
00016A44 5428 0024                  		addq.b	#2,$24(a0)
00016A48 323C 0001                  		move.w	#1,d1
00016A4C 2248                       		movea.l	a0,a1
00016A4E 6000                       		bra.s	Obj66_MakeItem
00016A50                            ; ===========================================================================
00016A50                            
00016A50                            jmp_SingleObjLoad:
00016A50 4EF9 0000 E56C             	jmp SingleObjLoad
00016A56                            
00016A56                            Obj66_Loop:
00016A56 6100 FFF8                  		bsr.w	jmp_SingleObjLoad
00016A5A 6600                       		bne.s	loc_150FE
00016A5C 12BC 0066                  		move.b	#$66,0(a1)
00016A60 5829 0024                  		addq.b	#4,$24(a1)
00016A64 3368 0008 0008             		move.w	8(a0),8(a1)
00016A6A 3368 000C 000C             		move.w	$C(a0),$C(a1)
00016A70 137C 0003 0018             		move.b	#3,$18(a1)
00016A76 137C 0010 001A             		move.b	#$10,$1A(a1)
00016A7C                            
00016A7C                            Obj66_MakeItem:				; XREF: Obj66_Main
00016A7C 237C 0000 0000 0004        		move.l	#Map_obj66,4(a1)
00016A84 337C 4348 0002             		move.w	#$4348,2(a1)
00016A8A 0029 0004 0001             		ori.b	#4,1(a1)
00016A90 137C 0038 0019             		move.b	#$38,$19(a1)
00016A96                            
00016A96                            loc_150FE:
00016A96 51C9 FFBE                  		dbf	d1,Obj66_Loop
00016A9A                            
00016A9A 117C 0030 0019             		move.b	#$30,$19(a0)
00016AA0 117C 0004 0018             		move.b	#4,$18(a0)
00016AA6 317C 003C 0030             		move.w	#$3C,$30(a0)
00016AAC 117C 0001 0034             		move.b	#1,$34(a0)
00016AB2 1168 0028 0038             		move.b	$28(a0),$38(a0)
00016AB8                            
00016AB8                            Obj66_Action:				; XREF: Obj66_Index
00016AB8 6100 0000                  		bsr.w	Obj66_ChkSwitch
00016ABC 4A28 0001                  		tst.b	1(a0)
00016AC0 6A00 0000                  		bpl.w	Obj66_Display
00016AC4 323C 0030                  		move.w	#$30,d1
00016AC8 3401                       		move.w	d1,d2
00016ACA 3602                       		move.w	d2,d3
00016ACC 5243                       		addq.w	#1,d3
00016ACE 3828 0008                  		move.w	8(a0),d4
00016AD2 6100 99EC                  		bsr.w	SolidObject
00016AD6 0828 0005 0022             		btst	#5,$22(a0)
00016ADC 6700 0000                  		beq.w	Obj66_Display
00016AE0 43F8 D000                  		lea	($FFFFD000).w,a1
00016AE4 720E                       		moveq	#$E,d1
00016AE6 3029 0008                  		move.w	8(a1),d0
00016AEA B068 0008                  		cmp.w	8(a0),d0
00016AEE 6500                       		bcs.s	Obj66_GrabSonic
00016AF0 7207                       		moveq	#7,d1
00016AF2                            
00016AF2                            Obj66_GrabSonic:
00016AF2 B228 001A                  		cmp.b	$1A(a0),d1
00016AF6 6600                       		bne.s	Obj66_Display
00016AF8 1141 0032                  		move.b	d1,$32(a0)
00016AFC 5828 0024                  		addq.b	#4,$24(a0)
00016B00 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; lock	controls
00016B06 137C 0002 001C             		move.b	#2,$1C(a1)	; make Sonic use "rolling" animation
00016B0C 337C 0800 0014             		move.w	#$800,$14(a1)
00016B12 337C 0000 0010             		move.w	#0,$10(a1)
00016B18 337C 0000 0012             		move.w	#0,$12(a1)
00016B1E 08A8 0005 0022             		bclr	#5,$22(a0)
00016B24 08A9 0005 0022             		bclr	#5,$22(a1)
00016B2A 08E9 0001 0022             		bset	#1,$22(a1)
00016B30 3429 0008                  		move.w	8(a1),d2
00016B34 3629 000C                  		move.w	$C(a1),d3
00016B38 6100 0000                  		bsr.w	Obj66_ChgPos
00016B3C D569 0008                  		add.w	d2,8(a1)
00016B40 D769 000C                  		add.w	d3,$C(a1)
00016B44 E0E9 0008                  		asr	8(a1)
00016B48 E0E9 000C                  		asr	$C(a1)
00016B4C                            
00016B4C                            Obj66_Display:				; XREF: Obj66_Index
00016B4C 6000 964A                  		bra.w	MarkObjGone
00016B50                            ; ===========================================================================
00016B50                            
00016B50                            Obj66_Release:				; XREF: Obj66_Index
00016B50 1028 001A                  		move.b	$1A(a0),d0
00016B54 0C00 0004                  		cmpi.b	#4,d0
00016B58 6700                       		beq.s	loc_151C8
00016B5A 0C00 0007                  		cmpi.b	#7,d0
00016B5E 6600                       		bne.s	loc_151F8
00016B60                            
00016B60                            loc_151C8:
00016B60 B028 0032                  		cmp.b	$32(a0),d0
00016B64 6700                       		beq.s	loc_151F8
00016B66 43F8 D000                  		lea	($FFFFD000).w,a1
00016B6A 337C 0000 0010             		move.w	#0,$10(a1)
00016B70 337C 0800 0012             		move.w	#$800,$12(a1)
00016B76 0C00 0004                  		cmpi.b	#4,d0
00016B7A 6700                       		beq.s	loc_151F0
00016B7C 337C 0800 0010             		move.w	#$800,$10(a1)
00016B82 337C 0800 0012             		move.w	#$800,$12(a1)
00016B88                            
00016B88                            loc_151F0:
00016B88 4238 F7C8                  		clr.b	($FFFFF7C8).w	; unlock controls
00016B8C 5928 0024                  		subq.b	#4,$24(a0)
00016B90                            
00016B90                            loc_151F8:
00016B90 6100                       		bsr.s	Obj66_ChkSwitch
00016B92 6100                       		bsr.s	Obj66_ChgPos
00016B94 6000 9602                  		bra.w	MarkObjGone
00016B98                            
00016B98                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016B98                            
00016B98                            
00016B98                            Obj66_ChkSwitch:			; XREF: Obj66_Action
00016B98 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00016B9C 7000                       		moveq	#0,d0
00016B9E 1028 0038                  		move.b	$38(a0),d0
00016BA2 0832 0000 0000             		btst	#0,(a2,d0.w)	; is switch pressed?
00016BA8 6700                       		beq.s	loc_15224	; if not, branch
00016BAA 4A28 0036                  		tst.b	$36(a0)		; has switch previously	been pressed?
00016BAE 6600                       		bne.s	Obj66_Animate	; if yes, branch
00016BB0 4428 0034                  		neg.b	$34(a0)
00016BB4 117C 0001 0036             		move.b	#1,$36(a0)	; set to "previously pressed"
00016BBA 6000                       		bra.s	Obj66_Animate
00016BBC                            ; ===========================================================================
00016BBC                            
00016BBC                            loc_15224:
00016BBC 4228 0036                  		clr.b	$36(a0)		; set to "not yet pressed"
00016BC0                            
00016BC0                            Obj66_Animate:
00016BC0 5328 001E                  		subq.b	#1,$1E(a0)
00016BC4 6A00                       		bpl.s	locret_15246
00016BC6 117C 0007 001E             		move.b	#7,$1E(a0)
00016BCC 1228 0034                  		move.b	$34(a0),d1
00016BD0 1028 001A                  		move.b	$1A(a0),d0
00016BD4 D001                       		add.b	d1,d0
00016BD6 0200 000F                  		andi.b	#$F,d0
00016BDA 1140 001A                  		move.b	d0,$1A(a0)
00016BDE                            
00016BDE                            locret_15246:
00016BDE 4E75                       		rts	
00016BE0                            ; End of function Obj66_ChkSwitch
00016BE0                            
00016BE0                            
00016BE0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016BE0                            
00016BE0                            
00016BE0                            Obj66_ChgPos:				; XREF: Obj66_GrabSonic
00016BE0 43F8 D000                  		lea	($FFFFD000).w,a1
00016BE4 7000                       		moveq	#0,d0
00016BE6 1028 001A                  		move.b	$1A(a0),d0
00016BEA D040                       		add.w	d0,d0
00016BEC 45FB 0000                  		lea	Obj66_PosData(pc,d0.w),a2
00016BF0 101A                       		move.b	(a2)+,d0
00016BF2 4880                       		ext.w	d0
00016BF4 D068 0008                  		add.w	8(a0),d0
00016BF8 3340 0008                  		move.w	d0,8(a1)
00016BFC 101A                       		move.b	(a2)+,d0
00016BFE 4880                       		ext.w	d0
00016C00 D068 000C                  		add.w	$C(a0),d0
00016C04 3340 000C                  		move.w	d0,$C(a1)
00016C08 4E75                       		rts	
00016C0A                            ; End of function Obj66_ChgPos
00016C0A                            
00016C0A                            ; ===========================================================================
00016C0A E000 E20E                  Obj66_PosData:	dc.b  $E0,   0,	$E2,  $E ; disc	x-pos, Sonic x-pos, disc y-pos,	Sonic y-pos
00016C0E E818 F21E                  		dc.b  $E8, $18,	$F2, $1E
00016C12 0020 0E1E                  		dc.b	0, $20,	 $E, $1E
00016C16 1818 1E0E                  		dc.b  $18, $18,	$1E,  $E
00016C1A 2000 1EF2                  		dc.b  $20,   0,	$1E, $F2
00016C1E 18E8 0EE2                  		dc.b  $18, $E8,	 $E, $E2
00016C22 00E0 F2E2                  		dc.b	0, $E0,	$F2, $E2
00016C26 E8E8 E2F2                  		dc.b  $E8, $E8,	$E2, $F2
00016C2A                            ; ---------------------------------------------------------------------------
00016C2A                            ; Sprite mappings - rotating disc that grabs Sonic (SBZ)
00016C2A                            ; ---------------------------------------------------------------------------
00016C2A                            Map_obj66:
00016C2A                            	include "_maps\obj66.asm"
00016C2A                            ; ---------------------------------------------------------------------------
00016C2A                            ; Sprite mappings - rotating disc that grabs Sonic (SBZ)
00016C2A                            ; ---------------------------------------------------------------------------
00016C2A 0000 0000                  		dc.w byte_152B4-Map_obj66, byte_152D3-Map_obj66
00016C2E 0000 0000                  		dc.w byte_152F2-Map_obj66, byte_15311-Map_obj66
00016C32 0000 0000                  		dc.w byte_15330-Map_obj66, byte_1534F-Map_obj66
00016C36 0000 0000                  		dc.w byte_1536E-Map_obj66, byte_1538D-Map_obj66
00016C3A 0000 0000                  		dc.w byte_153AC-Map_obj66, byte_153CB-Map_obj66
00016C3E 0000 0000                  		dc.w byte_153EA-Map_obj66, byte_15409-Map_obj66
00016C42 0000 0000                  		dc.w byte_15428-Map_obj66, byte_15447-Map_obj66
00016C46 0000 0000                  		dc.w byte_15466-Map_obj66, byte_15485-Map_obj66
00016C4A 0000                       		dc.w byte_154A4-Map_obj66
00016C4C 06                         byte_152B4:	dc.b 6
00016C4D E805 0022 D0               		dc.b $E8, 5, 0,	$22, $D0
00016C52 0805 1022 D0               		dc.b 8,	5, $10,	$22, $D0
00016C57 E80A 0000 C8               		dc.b $E8, $A, 0, 0, $C8
00016C5C E80A 0800 E0               		dc.b $E8, $A, 8, 0, $E0
00016C61 000A 1000 C8               		dc.b 0,	$A, $10, 0, $C8
00016C66 000A 1800 E0               		dc.b 0,	$A, $18, 0, $E0
00016C6B 06                         byte_152D3:	dc.b 6
00016C6C F803 0026 D0               		dc.b $F8, 3, 0,	$26, $D0
00016C71 1805 002A D8               		dc.b $18, 5, 0,	$2A, $D8
00016C76 F60A 0000 CA               		dc.b $F6, $A, 0, 0, $CA
00016C7B F60A 0800 E2               		dc.b $F6, $A, 8, 0, $E2
00016C80 0E0A 1000 CA               		dc.b $E, $A, $10, 0, $CA
00016C85 0E0A 1800 E2               		dc.b $E, $A, $18, 0, $E2
00016C8A 06                         byte_152F2:	dc.b 6
00016C8B 0006 002E D0               		dc.b 0,	6, 0, $2E, $D0
00016C90 2009 0034 E8               		dc.b $20, 9, 0,	$34, $E8
00016C95 000A 0000 D0               		dc.b 0,	$A, 0, 0, $D0
00016C9A 000A 0800 E8               		dc.b 0,	$A, 8, 0, $E8
00016C9F 180A 1000 D0               		dc.b $18, $A, $10, 0, $D0
00016CA4 180A 1800 E8               		dc.b $18, $A, $18, 0, $E8
00016CA9 06                         byte_15311:	dc.b 6
00016CAA 0807 003A D8               		dc.b 8,	7, 0, $3A, $D8
00016CAF 2808 0042 F0               		dc.b $28, 8, 0,	$42, $F0
00016CB4 060A 0000 DA               		dc.b 6,	$A, 0, 0, $DA
00016CB9 060A 0800 F2               		dc.b 6,	$A, 8, 0, $F2
00016CBE 1E0A 1000 DA               		dc.b $1E, $A, $10, 0, $DA
00016CC3 1E0A 1800 F2               		dc.b $1E, $A, $18, 0, $F2
00016CC8 06                         byte_15330:	dc.b 6
00016CC9 2005 0045 E8               		dc.b $20, 5, 0,	$45, $E8
00016CCE 2005 0845 08               		dc.b $20, 5, 8,	$45, 8
00016CD3 080A 0000 E8               		dc.b 8,	$A, 0, 0, $E8
00016CD8 080A 0800 00               		dc.b 8,	$A, 8, 0, 0
00016CDD 200A 1000 E8               		dc.b $20, $A, $10, 0, $E8
00016CE2 200A 1800 00               		dc.b $20, $A, $18, 0, 0
00016CE7 06                         byte_1534F:	dc.b 6
00016CE8 2808 0842 F8               		dc.b $28, 8, 8,	$42, $F8
00016CED 0807 083A 18               		dc.b 8,	7, 8, $3A, $18
00016CF2 060A 0000 F6               		dc.b 6,	$A, 0, 0, $F6
00016CF7 060A 0800 0E               		dc.b 6,	$A, 8, 0, $E
00016CFC 1E0A 1000 F6               		dc.b $1E, $A, $10, 0, $F6
00016D01 1E0A 1800 0E               		dc.b $1E, $A, $18, 0, $E
00016D06 06                         byte_1536E:	dc.b 6
00016D07 2009 0834 00               		dc.b $20, 9, 8,	$34, 0
00016D0C 0006 082E 20               		dc.b 0,	6, 8, $2E, $20
00016D11 000A 0000 00               		dc.b 0,	$A, 0, 0, 0
00016D16 000A 0800 18               		dc.b 0,	$A, 8, 0, $18
00016D1B 180A 1000 00               		dc.b $18, $A, $10, 0, 0
00016D20 180A 1800 18               		dc.b $18, $A, $18, 0, $18
00016D25 06                         byte_1538D:	dc.b 6
00016D26 1805 082A 18               		dc.b $18, 5, 8,	$2A, $18
00016D2B F803 0826 28               		dc.b $F8, 3, 8,	$26, $28
00016D30 F60A 0000 06               		dc.b $F6, $A, 0, 0, 6
00016D35 F60A 0800 1E               		dc.b $F6, $A, 8, 0, $1E
00016D3A 0E0A 1000 06               		dc.b $E, $A, $10, 0, 6
00016D3F 0E0A 1800 1E               		dc.b $E, $A, $18, 0, $1E
00016D44 06                         byte_153AC:	dc.b 6
00016D45 E805 0822 20               		dc.b $E8, 5, 8,	$22, $20
00016D4A 0805 1822 20               		dc.b 8,	5, $18,	$22, $20
00016D4F E80A 0000 08               		dc.b $E8, $A, 0, 0, 8
00016D54 E80A 0800 20               		dc.b $E8, $A, 8, 0, $20
00016D59 000A 1000 08               		dc.b 0,	$A, $10, 0, 8
00016D5E 000A 1800 20               		dc.b 0,	$A, $18, 0, $20
00016D63 06                         byte_153CB:	dc.b 6
00016D64 D805 182A 18               		dc.b $D8, 5, $18, $2A, $18
00016D69 E803 1826 28               		dc.b $E8, 3, $18, $26, $28
00016D6E DA0A 0000 06               		dc.b $DA, $A, 0, 0, 6
00016D73 DA0A 0800 1E               		dc.b $DA, $A, 8, 0, $1E
00016D78 F20A 1000 06               		dc.b $F2, $A, $10, 0, 6
00016D7D F20A 1800 1E               		dc.b $F2, $A, $18, 0, $1E
00016D82 06                         byte_153EA:	dc.b 6
00016D83 D009 1834 00               		dc.b $D0, 9, $18, $34, 0
00016D88 E806 182E 20               		dc.b $E8, 6, $18, $2E, $20
00016D8D D00A 0000 00               		dc.b $D0, $A, 0, 0, 0
00016D92 D00A 0800 18               		dc.b $D0, $A, 8, 0, $18
00016D97 E80A 1000 00               		dc.b $E8, $A, $10, 0, 0
00016D9C E80A 1800 18               		dc.b $E8, $A, $18, 0, $18
00016DA1 06                         byte_15409:	dc.b 6
00016DA2 D008 1842 F8               		dc.b $D0, 8, $18, $42, $F8
00016DA7 D807 183A 18               		dc.b $D8, 7, $18, $3A, $18
00016DAC CA0A 0000 F6               		dc.b $CA, $A, 0, 0, $F6
00016DB1 CA0A 0800 0E               		dc.b $CA, $A, 8, 0, $E
00016DB6 E20A 1000 F6               		dc.b $E2, $A, $10, 0, $F6
00016DBB E20A 1800 0E               		dc.b $E2, $A, $18, 0, $E
00016DC0 06                         byte_15428:	dc.b 6
00016DC1 D005 1045 E8               		dc.b $D0, 5, $10, $45, $E8
00016DC6 D005 1845 08               		dc.b $D0, 5, $18, $45, 8
00016DCB C80A 0000 E8               		dc.b $C8, $A, 0, 0, $E8
00016DD0 C80A 0800 00               		dc.b $C8, $A, 8, 0, 0
00016DD5 E00A 1000 E8               		dc.b $E0, $A, $10, 0, $E8
00016DDA E00A 1800 00               		dc.b $E0, $A, $18, 0, 0
00016DDF 06                         byte_15447:	dc.b 6
00016DE0 D807 103A D8               		dc.b $D8, 7, $10, $3A, $D8
00016DE5 D008 1042 F0               		dc.b $D0, 8, $10, $42, $F0
00016DEA CA0A 0000 DA               		dc.b $CA, $A, 0, 0, $DA
00016DEF CA0A 0800 F2               		dc.b $CA, $A, 8, 0, $F2
00016DF4 E20A 1000 DA               		dc.b $E2, $A, $10, 0, $DA
00016DF9 E20A 1800 F2               		dc.b $E2, $A, $18, 0, $F2
00016DFE 06                         byte_15466:	dc.b 6
00016DFF E806 102E D0               		dc.b $E8, 6, $10, $2E, $D0
00016E04 D009 1034 E8               		dc.b $D0, 9, $10, $34, $E8
00016E09 D00A 0000 D0               		dc.b $D0, $A, 0, 0, $D0
00016E0E D00A 0800 E8               		dc.b $D0, $A, 8, 0, $E8
00016E13 E80A 1000 D0               		dc.b $E8, $A, $10, 0, $D0
00016E18 E80A 1800 E8               		dc.b $E8, $A, $18, 0, $E8
00016E1D 06                         byte_15485:	dc.b 6
00016E1E E803 1026 D0               		dc.b $E8, 3, $10, $26, $D0
00016E23 D805 102A D8               		dc.b $D8, 5, $10, $2A, $D8
00016E28 DA0A 0000 CA               		dc.b $DA, $A, 0, 0, $CA
00016E2D DA0A 0800 E2               		dc.b $DA, $A, 8, 0, $E2
00016E32 F20A 1000 CA               		dc.b $F2, $A, $10, 0, $CA
00016E37 F20A 1800 E2               		dc.b $F2, $A, $18, 0, $E2
00016E3C 0C                         byte_154A4:	dc.b $C
00016E3D C80D 0009 E0               		dc.b $C8, $D, 0, 9, $E0
00016E42 D00A 0011 D0               		dc.b $D0, $A, 0, $11, $D0
00016E47 E007 001A C8               		dc.b $E0, 7, 0,	$1A, $C8
00016E4C C80D 0809 00               		dc.b $C8, $D, 8, 9, 0
00016E51 D00A 0811 18               		dc.b $D0, $A, 8, $11, $18
00016E56 E007 081A 28               		dc.b $E0, 7, 8,	$1A, $28
00016E5B 0007 101A C8               		dc.b 0,	7, $10,	$1A, $C8
00016E60 180A 1011 D0               		dc.b $18, $A, $10, $11,	$D0
00016E65 280D 1009 E0               		dc.b $28, $D, $10, 9, $E0
00016E6A 280D 1809 00               		dc.b $28, $D, $18, 9, 0
00016E6F 180A 1811 18               		dc.b $18, $A, $18, $11,	$18
00016E74 0007 181A 28               		dc.b 0,	7, $18,	$1A, $28
00016E7A 00                         		even
00016E7A 00                         		even
00016E7A                            
00016E7A                            ; ===========================================================================
00016E7A                            ; ---------------------------------------------------------------------------
00016E7A                            ; Object 67 - disc that	you run	around (SBZ)
00016E7A                            ; ---------------------------------------------------------------------------
00016E7A                            
00016E7A                            Obj67:					; XREF: Obj_Index
00016E7A 7000                       		moveq	#0,d0
00016E7C 1028 0024                  		move.b	$24(a0),d0
00016E80 323B 0000                  		move.w	Obj67_Index(pc,d0.w),d1
00016E84 4EFB 1000                  		jmp	Obj67_Index(pc,d1.w)
00016E88                            ; ===========================================================================
00016E88 0000                       Obj67_Index:	dc.w Obj67_Main-Obj67_Index
00016E8A 0000                       		dc.w Obj67_Action-Obj67_Index
00016E8C                            ; ===========================================================================
00016E8C                            
00016E8C                            Obj67_Main:				; XREF: Obj67_Index
00016E8C 5428 0024                  		addq.b	#2,$24(a0)
00016E90 217C 0000 0000 0004        		move.l	#Map_obj67,4(a0)
00016E98 317C C344 0002             		move.w	#$C344,2(a0)
00016E9E 117C 0004 0001             		move.b	#4,1(a0)
00016EA4 117C 0004 0018             		move.b	#4,$18(a0)
00016EAA 117C 0008 0019             		move.b	#8,$19(a0)
00016EB0 3168 0008 0032             		move.w	8(a0),$32(a0)
00016EB6 3168 000C 0030             		move.w	$C(a0),$30(a0)
00016EBC 117C 0018 0034             		move.b	#$18,$34(a0)
00016EC2 117C 0048 0038             		move.b	#$48,$38(a0)
00016EC8 1228 0028                  		move.b	$28(a0),d1	; get object type
00016ECC 0201 000F                  		andi.b	#$F,d1		; read only the	2nd digit
00016ED0 6700                       		beq.s	loc_15546
00016ED2 117C 0010 0034             		move.b	#$10,$34(a0)
00016ED8 117C 0038 0038             		move.b	#$38,$38(a0)
00016EDE                            
00016EDE                            loc_15546:
00016EDE 1228 0028                  		move.b	$28(a0),d1	; get object type
00016EE2 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00016EE6 4881                       		ext.w	d1
00016EE8 E741                       		asl.w	#3,d1
00016EEA 3141 0036                  		move.w	d1,$36(a0)
00016EEE 1028 0022                  		move.b	$22(a0),d0
00016EF2 E418                       		ror.b	#2,d0
00016EF4 0200 00C0                  		andi.b	#-$40,d0
00016EF8 1140 0026                  		move.b	d0,$26(a0)
00016EFC                            
00016EFC                            Obj67_Action:				; XREF: Obj67_Index
00016EFC 6100 0000                  		bsr.w	Obj67_MoveSonic
00016F00 6100 0000                  		bsr.w	Obj67_MoveSpot
00016F04 6000 0000                  		bra.w	Obj67_ChkDel
00016F08                            ; ===========================================================================
00016F08                            
00016F08                            Obj67_MoveSonic:			; XREF: Obj67_Action
00016F08 7400                       		moveq	#0,d2
00016F0A 1428 0038                  		move.b	$38(a0),d2
00016F0E 3602                       		move.w	d2,d3
00016F10 D643                       		add.w	d3,d3
00016F12 43F8 D000                  		lea	($FFFFD000).w,a1
00016F16 3029 0008                  		move.w	8(a1),d0
00016F1A 9068 0032                  		sub.w	$32(a0),d0
00016F1E D042                       		add.w	d2,d0
00016F20 B043                       		cmp.w	d3,d0
00016F22 6400                       		bcc.s	loc_155A8
00016F24 3229 000C                  		move.w	$C(a1),d1
00016F28 9268 0030                  		sub.w	$30(a0),d1
00016F2C D242                       		add.w	d2,d1
00016F2E B243                       		cmp.w	d3,d1
00016F30 6400                       		bcc.s	loc_155A8
00016F32 0829 0001 0022             		btst	#1,$22(a1)
00016F38 6700                       		beq.s	loc_155B8
00016F3A 4228 003A                  		clr.b	$3A(a0)
00016F3E 4E75                       		rts	
00016F40                            ; ===========================================================================
00016F40                            
00016F40                            loc_155A8:
00016F40 4A28 003A                  		tst.b	$3A(a0)
00016F44 6700                       		beq.s	locret_155B6
00016F46 4229 0038                  		clr.b	$38(a1)
00016F4A 4228 003A                  		clr.b	$3A(a0)
00016F4E                            
00016F4E                            locret_155B6:
00016F4E 4E75                       		rts	
00016F50                            ; ===========================================================================
00016F50                            
00016F50                            loc_155B8:
00016F50 4A28 003A                  		tst.b	$3A(a0)
00016F54 6600                       		bne.s	loc_155E2
00016F56 117C 0001 003A             		move.b	#1,$3A(a0)
00016F5C 0829 0002 0022             		btst	#2,$22(a1)
00016F62 6600                       		bne.s	loc_155D0
00016F64 4229 001C                  		clr.b	$1C(a1)
00016F68                            
00016F68                            loc_155D0:
00016F68 08A9 0005 0022             		bclr	#5,$22(a1)
00016F6E 137C 0001 001D             		move.b	#1,$1D(a1)
00016F74 137C 0001 0038             		move.b	#1,$38(a1)
00016F7A                            
00016F7A                            loc_155E2:
00016F7A 3029 0014                  		move.w	$14(a1),d0
00016F7E 4A68 0036                  		tst.w	$36(a0)
00016F82 6A00                       		bpl.s	loc_15608
00016F84 0C40 FC00                  		cmpi.w	#-$400,d0
00016F88 6F00                       		ble.s	loc_155FA
00016F8A 337C FC00 0014             		move.w	#-$400,$14(a1)
00016F90 4E75                       		rts	
00016F92                            ; ===========================================================================
00016F92                            
00016F92                            loc_155FA:
00016F92 0C40 F100                  		cmpi.w	#-$F00,d0
00016F96 6C00                       		bge.s	locret_15606
00016F98 337C F100 0014             		move.w	#-$F00,$14(a1)
00016F9E                            
00016F9E                            locret_15606:
00016F9E 4E75                       		rts	
00016FA0                            ; ===========================================================================
00016FA0                            
00016FA0                            loc_15608:
00016FA0 0C40 0400                  		cmpi.w	#$400,d0
00016FA4 6C00                       		bge.s	loc_15616
00016FA6 337C 0400 0014             		move.w	#$400,$14(a1)
00016FAC 4E75                       		rts	
00016FAE                            ; ===========================================================================
00016FAE                            
00016FAE                            loc_15616:
00016FAE 0C40 0F00                  		cmpi.w	#$F00,d0
00016FB2 6F00                       		ble.s	locret_15622
00016FB4 337C 0F00 0014             		move.w	#$F00,$14(a1)
00016FBA                            
00016FBA                            locret_15622:
00016FBA 4E75                       		rts	
00016FBC                            ; ===========================================================================
00016FBC                            
00016FBC                            Obj67_MoveSpot:				; XREF: Obj67_Action
00016FBC 3028 0036                  		move.w	$36(a0),d0
00016FC0 D168 0026                  		add.w	d0,$26(a0)
00016FC4 1028 0026                  		move.b	$26(a0),d0
00016FC8 4EB9 0000 33DA             		jsr	(CalcSine).l
00016FCE 3428 0030                  		move.w	$30(a0),d2
00016FD2 3628 0032                  		move.w	$32(a0),d3
00016FD6 7800                       		moveq	#0,d4
00016FD8 1828 0034                  		move.b	$34(a0),d4
00016FDC E14C                       		lsl.w	#8,d4
00016FDE 2A04                       		move.l	d4,d5
00016FE0 C9C0                       		muls.w	d0,d4
00016FE2 4844                       		swap	d4
00016FE4 CBC1                       		muls.w	d1,d5
00016FE6 4845                       		swap	d5
00016FE8 D842                       		add.w	d2,d4
00016FEA DA43                       		add.w	d3,d5
00016FEC 3144 000C                  		move.w	d4,$C(a0)
00016FF0 3145 0008                  		move.w	d5,8(a0)
00016FF4 4E75                       		rts	
00016FF6                            ; ===========================================================================
00016FF6                            
00016FF6                            Obj67_ChkDel:				; XREF: Obj67_Action
00016FF6 3028 0032                  		move.w	$32(a0),d0
00016FFA 0240 FF80                  		andi.w	#-$80,d0
00016FFE 3238 F700                  		move.w	($FFFFF700).w,d1
00017002 0441 0080                  		subi.w	#$80,d1
00017006 0241 FF80                  		andi.w	#-$80,d1
0001700A 9041                       		sub.w	d1,d0
0001700C 0C40 0280                  		cmpi.w	#$280,d0
00017010 6200                       		bhi.s	Obj67_Delete
00017012 4EF9 0000 E0D6             		jmp	DisplaySprite
00017018                            ; ===========================================================================
00017018                            
00017018                            Obj67_Delete:
00017018 4EF9 0000 E112             		jmp	DeleteObject
0001701E                            ; ===========================================================================
0001701E                            ; ---------------------------------------------------------------------------
0001701E                            ; Sprite mappings - disc that you run around (SBZ)
0001701E                            ; (It's just a small blob that moves around in a circle. The disc itself is
0001701E                            ; part of the level tiles.)
0001701E                            ; ---------------------------------------------------------------------------
0001701E                            Map_obj67:
0001701E                            	include "_maps\obj67.asm"
0001701E                            ; ---------------------------------------------------------------------------
0001701E                            ; Sprite mappings - disc that you run around (SBZ)
0001701E                            ; (It's just a small blob that moves around in a circle. The disc itself is
0001701E                            ; part of the level tiles.)
0001701E                            ; ---------------------------------------------------------------------------
0001701E 0000                       		dc.w byte_15688-Map_obj67
00017020 01                         byte_15688:	dc.b 1
00017021 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00017026                            		even
00017026                            		even
00017026                            
00017026                            ; ===========================================================================
00017026                            ; ---------------------------------------------------------------------------
00017026                            ; Object 68 - conveyor belts (SBZ)
00017026                            ; ---------------------------------------------------------------------------
00017026                            
00017026                            Obj68:					; XREF: Obj_Index
00017026 7000                       		moveq	#0,d0
00017028 1028 0024                  		move.b	$24(a0),d0
0001702C 323B 0000                  		move.w	Obj68_Index(pc,d0.w),d1
00017030 4EFB 1000                  		jmp	Obj68_Index(pc,d1.w)
00017034                            ; ===========================================================================
00017034 0000                       Obj68_Index:	dc.w Obj68_Main-Obj68_Index
00017036 0000                       		dc.w Obj68_Action-Obj68_Index
00017038                            ; ===========================================================================
00017038                            
00017038                            Obj68_Main:				; XREF: Obj68_Index
00017038 5428 0024                  		addq.b	#2,$24(a0)
0001703C 117C 0080 0038             		move.b	#128,$38(a0)	; set width to 128 pixels
00017042 1228 0028                  		move.b	$28(a0),d1	; get object type
00017046 0201 000F                  		andi.b	#$F,d1		; read only the	2nd digit
0001704A 6700                       		beq.s	loc_156BA	; if zero, branch
0001704C 117C 0038 0038             		move.b	#56,$38(a0)	; set width to 56 pixels
00017052                            
00017052                            loc_156BA:
00017052 1228 0028                  		move.b	$28(a0),d1	; get object type
00017056 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
0001705A 4881                       		ext.w	d1
0001705C E841                       		asr.w	#4,d1
0001705E 3141 0036                  		move.w	d1,$36(a0)	; set belt speed
00017062                            
00017062                            Obj68_Action:				; XREF: Obj68_Index
00017062 6100                       		bsr.s	Obj68_MoveSonic
00017064 3028 0008                  		move.w	8(a0),d0
00017068 0240 FF80                  		andi.w	#$FF80,d0
0001706C 3238 F700                  		move.w	($FFFFF700).w,d1
00017070 0441 0080                  		subi.w	#$80,d1
00017074 0241 FF80                  		andi.w	#$FF80,d1
00017078 9041                       		sub.w	d1,d0
0001707A 0C40 0280                  		cmpi.w	#$280,d0
0001707E 6200                       		bhi.s	Obj68_Delete
00017080 4E75                       		rts	
00017082                            ; ===========================================================================
00017082                            
00017082                            Obj68_Delete:
00017082 4EF9 0000 E112             		jmp	DeleteObject
00017088                            ; ===========================================================================
00017088                            
00017088                            Obj68_MoveSonic:			; XREF: Obj68_Action
00017088 7400                       		moveq	#0,d2
0001708A 1428 0038                  		move.b	$38(a0),d2
0001708E 3602                       		move.w	d2,d3
00017090 D643                       		add.w	d3,d3
00017092 43F8 D000                  		lea	($FFFFD000).w,a1
00017096 3029 0008                  		move.w	8(a1),d0
0001709A 9068 0008                  		sub.w	8(a0),d0
0001709E D042                       		add.w	d2,d0
000170A0 B043                       		cmp.w	d3,d0
000170A2 6400                       		bcc.s	locret_1572E
000170A4 3229 000C                  		move.w	$C(a1),d1
000170A8 9268 000C                  		sub.w	$C(a0),d1
000170AC 0641 0030                  		addi.w	#$30,d1
000170B0 0C41 0030                  		cmpi.w	#$30,d1
000170B4 6400                       		bcc.s	locret_1572E
000170B6 0829 0001 0022             		btst	#1,$22(a1)
000170BC 6600                       		bne.s	locret_1572E
000170BE 3028 0036                  		move.w	$36(a0),d0
000170C2 D169 0008                  		add.w	d0,8(a1)
000170C6                            
000170C6                            locret_1572E:
000170C6 4E75                       		rts	
000170C8                            
000170C8                            ; ===========================================================================
000170C8                            ; ---------------------------------------------------------------------------
000170C8                            ; Object 69 - spinning platforms and trapdoors (SBZ)
000170C8                            ; ---------------------------------------------------------------------------
000170C8                            
000170C8                            Obj69:					; XREF: Obj_Index
000170C8 7000                       		moveq	#0,d0
000170CA 1028 0024                  		move.b	$24(a0),d0
000170CE 323B 0000                  		move.w	Obj69_Index(pc,d0.w),d1
000170D2 4EFB 1000                  		jmp	Obj69_Index(pc,d1.w)
000170D6                            ; ===========================================================================
000170D6 0000                       Obj69_Index:	dc.w Obj69_Main-Obj69_Index
000170D8 0000                       		dc.w Obj69_Trapdoor-Obj69_Index
000170DA 0000                       		dc.w Obj69_Spinner-Obj69_Index
000170DC                            ; ===========================================================================
000170DC                            
000170DC                            Obj69_Main:				; XREF: Obj69_Index
000170DC 5428 0024                  		addq.b	#2,$24(a0)
000170E0 217C 0000 0000 0004        		move.l	#Map_obj69,4(a0)
000170E8 317C 4492 0002             		move.w	#$4492,2(a0)
000170EE 0028 0004 0001             		ori.b	#4,1(a0)
000170F4 117C 0080 0019             		move.b	#$80,$19(a0)
000170FA 7000                       		moveq	#0,d0
000170FC 1028 0028                  		move.b	$28(a0),d0
00017100 0240 000F                  		andi.w	#$F,d0
00017104 C0FC 003C                  		mulu.w	#$3C,d0
00017108 3140 0032                  		move.w	d0,$32(a0)
0001710C 4A28 0028                  		tst.b	$28(a0)
00017110 6A00                       		bpl.s	Obj69_Trapdoor
00017112 5428 0024                  		addq.b	#2,$24(a0)
00017116 217C 0000 0000 0004        		move.l	#Map_obj69a,4(a0)
0001711E 317C 04DF 0002             		move.w	#$4DF,2(a0)
00017124 117C 0010 0019             		move.b	#$10,$19(a0)
0001712A 117C 0002 001C             		move.b	#2,$1C(a0)
00017130 7000                       		moveq	#0,d0
00017132 1028 0028                  		move.b	$28(a0),d0	; get object type
00017136 3200                       		move.w	d0,d1
00017138 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
0001713C C0FC 0006                  		mulu.w	#6,d0		; multiply by 6
00017140 3140 0030                  		move.w	d0,$30(a0)	; set time delay
00017144 3140 0032                  		move.w	d0,$32(a0)
00017148 0241 0070                  		andi.w	#$70,d1
0001714C 0641 0010                  		addi.w	#$10,d1
00017150 E549                       		lsl.w	#2,d1
00017152 5341                       		subq.w	#1,d1
00017154 3141 0036                  		move.w	d1,$36(a0)
00017158 6000                       		bra.s	Obj69_Spinner
0001715A                            ; ===========================================================================
0001715A                            
0001715A                            Obj69_Trapdoor:				; XREF: Obj69_Index
0001715A 5368 0030                  		subq.w	#1,$30(a0)
0001715E 6A00                       		bpl.s	Obj69_Animate
00017160 3168 0032 0030             		move.w	$32(a0),$30(a0)
00017166 0868 0000 001C             		bchg	#0,$1C(a0)
0001716C 4A28 0001                  		tst.b	1(a0)
00017170 6A00                       		bpl.s	Obj69_Animate
00017172 303C 00BB                  		move.w	#$BB,d0
00017176 4EB9 0000 147C             		jsr	(PlaySound_Special).l ;	play door sound
0001717C                            
0001717C                            Obj69_Animate:
0001717C 43F9 0000 0000             		lea	(Ani_obj69).l,a1
00017182 4EB9 0000 B1EE             		jsr	AnimateSprite
00017188 4A28 001A                  		tst.b	$1A(a0)		; is frame number 0 displayed?
0001718C 6600                       		bne.s	Obj69_NotSolid	; if not, branch
0001718E 323C 004B                  		move.w	#$4B,d1
00017192 343C 000C                  		move.w	#$C,d2
00017196 3602                       		move.w	d2,d3
00017198 5243                       		addq.w	#1,d3
0001719A 3828 0008                  		move.w	8(a0),d4
0001719E 6100 9320                  		bsr.w	SolidObject
000171A2 6000 8FF4                  		bra.w	MarkObjGone
000171A6                            ; ===========================================================================
000171A6                            
000171A6                            Obj69_NotSolid:
000171A6 0828 0003 0022             		btst	#3,$22(a0)
000171AC 6700                       		beq.s	Obj69_Display
000171AE 43F8 D000                  		lea	($FFFFD000).w,a1
000171B2 08A9 0003 0022             		bclr	#3,$22(a1)
000171B8 08A8 0003 0022             		bclr	#3,$22(a0)
000171BE 4228 0025                  		clr.b	$25(a0)
000171C2                            
000171C2                            Obj69_Display:
000171C2 6000 8FD4                  		bra.w	MarkObjGone
000171C6                            ; ===========================================================================
000171C6                            
000171C6                            Obj69_Spinner:				; XREF: Obj69_Index
000171C6 3038 FE04                  		move.w	($FFFFFE04).w,d0
000171CA C068 0036                  		and.w	$36(a0),d0
000171CE 6600                       		bne.s	Obj69_Delay
000171D0 117C 0001 0034             		move.b	#1,$34(a0)
000171D6                            
000171D6                            Obj69_Delay:
000171D6 4A28 0034                  		tst.b	$34(a0)
000171DA 6700                       		beq.s	Obj69_Animate2
000171DC 5368 0030                  		subq.w	#1,$30(a0)
000171E0 6A00                       		bpl.s	Obj69_Animate2
000171E2 3168 0032 0030             		move.w	$32(a0),$30(a0)
000171E8 4228 0034                  		clr.b	$34(a0)
000171EC 0868 0000 001C             		bchg	#0,$1C(a0)
000171F2                            
000171F2                            Obj69_Animate2:
000171F2 43F9 0000 0000             		lea	(Ani_obj69).l,a1
000171F8 4EB9 0000 B1EE             		jsr	AnimateSprite
000171FE 4A28 001A                  		tst.b	$1A(a0)		; check	if frame number	0 is displayed
00017202 6600                       		bne.s	Obj69_NotSolid2	; if not, branch
00017204 323C 001B                  		move.w	#$1B,d1
00017208 343C 0007                  		move.w	#7,d2
0001720C 3602                       		move.w	d2,d3
0001720E 5243                       		addq.w	#1,d3
00017210 3828 0008                  		move.w	8(a0),d4
00017214 6100 92AA                  		bsr.w	SolidObject
00017218 6000 8F7E                  		bra.w	MarkObjGone
0001721C                            ; ===========================================================================
0001721C                            
0001721C                            Obj69_NotSolid2:
0001721C 0828 0003 0022             		btst	#3,$22(a0)
00017222 6700                       		beq.s	Obj69_Display2
00017224 43F8 D000                  		lea	($FFFFD000).w,a1
00017228 08A9 0003 0022             		bclr	#3,$22(a1)
0001722E 08A8 0003 0022             		bclr	#3,$22(a0)
00017234 4228 0025                  		clr.b	$25(a0)
00017238                            
00017238                            Obj69_Display2:
00017238 6000 8F5E                  		bra.w	MarkObjGone
0001723C                            ; ===========================================================================
0001723C                            Ani_obj69:
0001723C                            	include "_anim\obj69.asm"
0001723C                            ; ---------------------------------------------------------------------------
0001723C                            ; Animation script - trapdoor (SBZ)
0001723C                            ; ---------------------------------------------------------------------------
0001723C 0000                       		dc.w byte_158AC-Ani_obj69
0001723E 0000                       		dc.w byte_158B2-Ani_obj69
00017240 0000                       		dc.w byte_158B8-Ani_obj69
00017242 0000                       		dc.w byte_158CC-Ani_obj69
00017244 0300 0102 FE01             byte_158AC:	dc.b 3,	0, 1, 2, $FE, 1
0001724A 0302 0100 FE01             byte_158B2:	dc.b 3,	2, 1, 0, $FE, 1
00017250 0100 0102 0304 4342 4140+  byte_158B8:	dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
0001725D 6423 2221 00FE 01          		dc.b $64, $23, $22, $21, 0, $FE, 1
00017264 0100 0102 0304 4342 4140+  byte_158CC:	dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
00017271 6423 2221 00FE 01          		dc.b $64, $23, $22, $21, 0, $FE, 1
00017278                            		even
00017278                            		even
00017278                            
00017278                            ; ---------------------------------------------------------------------------
00017278                            ; Sprite mappings - trapdoor (SBZ)
00017278                            ; ---------------------------------------------------------------------------
00017278                            Map_obj69:
00017278                            	include "_maps\obj69.asm"
00017278                            ; ---------------------------------------------------------------------------
00017278                            ; Sprite mappings - trapdoor (SBZ)
00017278                            ; ---------------------------------------------------------------------------
00017278 0000                       		dc.w byte_158E6-Map_obj69
0001727A 0000                       		dc.w byte_158FB-Map_obj69
0001727C 0000                       		dc.w byte_15924-Map_obj69
0001727E 04                         byte_158E6:	dc.b 4
0001727F F40E 0000 C0               		dc.b $F4, $E, 0, 0, $C0
00017284 F40E 0800 E0               		dc.b $F4, $E, 8, 0, $E0
00017289 F40E 0000 00               		dc.b $F4, $E, 0, 0, 0
0001728E F40E 0800 20               		dc.b $F4, $E, 8, 0, $20
00017293 08                         byte_158FB:	dc.b 8
00017294 F20F 000C B6               		dc.b $F2, $F, 0, $C, $B6
00017299 1A0F 180C D6               		dc.b $1A, $F, $18, $C, $D6
0001729E 020A 001C D6               		dc.b 2,	$A, 0, $1C, $D6
000172A3 120A 181C BE               		dc.b $12, $A, $18, $1C,	$BE
000172A8 F20F 080C 2A               		dc.b $F2, $F, 8, $C, $2A
000172AD 1A0F 100C 0A               		dc.b $1A, $F, $10, $C, $A
000172B2 020A 081C 12               		dc.b 2,	$A, 8, $1C, $12
000172B7 120A 101C 2A               		dc.b $12, $A, $10, $1C,	$2A
000172BC 04                         byte_15924:	dc.b 4
000172BD 000B 0025 B4               		dc.b 0,	$B, 0, $25, $B4
000172C2 200B 1025 B4               		dc.b $20, $B, $10, $25,	$B4
000172C7 000B 0025 34               		dc.b 0,	$B, 0, $25, $34
000172CC 200B 1025 34               		dc.b $20, $B, $10, $25,	$34
000172D2 00                         		even
000172D2 00                         		even
000172D2                            
000172D2                            ; ---------------------------------------------------------------------------
000172D2                            ; Sprite mappings - spinning platforms (SBZ)
000172D2                            ; ---------------------------------------------------------------------------
000172D2                            Map_obj69a:
000172D2                            	include "_maps\obj69a.asm"
000172D2                            ; ---------------------------------------------------------------------------
000172D2                            ; Sprite mappings - spinning platforms (SBZ)
000172D2                            ; ---------------------------------------------------------------------------
000172D2 0000 0000                  		dc.w byte_15944-Map_obj69a, byte_1594F-Map_obj69a
000172D6 0000 0000                  		dc.w byte_1595A-Map_obj69a, byte_15965-Map_obj69a
000172DA 0000                       		dc.w byte_15970-Map_obj69a
000172DC 02                         byte_15944:	dc.b 2
000172DD F805 0000 F0               		dc.b $F8, 5, 0,	0, $F0
000172E2 F805 0800 00               		dc.b $F8, 5, 8,	0, 0
000172E7 02                         byte_1594F:	dc.b 2
000172E8 F00D 0014 F0               		dc.b $F0, $D, 0, $14, $F0
000172ED 000D 001C F0               		dc.b 0,	$D, 0, $1C, $F0
000172F2 02                         byte_1595A:	dc.b 2
000172F3 F009 0004 F0               		dc.b $F0, 9, 0,	4, $F0
000172F8 0009 000A F8               		dc.b 0,	9, 0, $A, $F8
000172FD 02                         byte_15965:	dc.b 2
000172FE F009 0024 F0               		dc.b $F0, 9, 0,	$24, $F0
00017303 0009 002A F8               		dc.b 0,	9, 0, $2A, $F8
00017308 02                         byte_15970:	dc.b 2
00017309 F005 0010 F8               		dc.b $F0, 5, 0,	$10, $F8
0001730E 0005 1010 F8               		dc.b 0,	5, $10,	$10, $F8
00017314 00                         		even
00017314 00                         		even
00017314                            
00017314                            ; ===========================================================================
00017314                            ; ---------------------------------------------------------------------------
00017314                            ; Object 6A - ground saws and pizza cutters (SBZ)
00017314                            ; ---------------------------------------------------------------------------
00017314                            
00017314                            Obj6A:					; XREF: Obj_Index
00017314 7000                       		moveq	#0,d0
00017316 1028 0024                  		move.b	$24(a0),d0
0001731A 323B 0000                  		move.w	Obj6A_Index(pc,d0.w),d1
0001731E 4EFB 1000                  		jmp	Obj6A_Index(pc,d1.w)
00017322                            ; ===========================================================================
00017322 0000                       Obj6A_Index:	dc.w Obj6A_Main-Obj6A_Index
00017324 0000                       		dc.w Obj6A_Action-Obj6A_Index
00017326                            ; ===========================================================================
00017326                            
00017326                            Obj6A_Main:				; XREF: Obj6A_Index
00017326 5428 0024                  		addq.b	#2,$24(a0)
0001732A 217C 0000 0000 0004        		move.l	#Map_obj6A,4(a0)
00017332 317C 43B5 0002             		move.w	#$43B5,2(a0)
00017338 117C 0004 0001             		move.b	#4,1(a0)
0001733E 117C 0004 0018             		move.b	#4,$18(a0)
00017344 117C 0020 0019             		move.b	#$20,$19(a0)
0001734A 3168 0008 003A             		move.w	8(a0),$3A(a0)
00017350 3168 000C 0038             		move.w	$C(a0),$38(a0)
00017356 0C28 0003 0028             		cmpi.b	#3,$28(a0)
0001735C 6400                       		bcc.s	Obj6A_Action
0001735E 117C 00A2 0020             		move.b	#$A2,$20(a0)
00017364                            
00017364                            Obj6A_Action:				; XREF: Obj6A_Index
00017364 7000                       		moveq	#0,d0
00017366 1028 0028                  		move.b	$28(a0),d0
0001736A 0240 0007                  		andi.w	#7,d0
0001736E D040                       		add.w	d0,d0
00017370 323B 0000                  		move.w	Obj6A_TypeIndex(pc,d0.w),d1
00017374 4EBB 1000                  		jsr	Obj6A_TypeIndex(pc,d1.w)
00017378 3028 003A                  		move.w	$3A(a0),d0
0001737C 0240 FF80                  		andi.w	#$FF80,d0
00017380 3238 F700                  		move.w	($FFFFF700).w,d1
00017384 0441 0080                  		subi.w	#$80,d1
00017388 0241 FF80                  		andi.w	#$FF80,d1
0001738C 9041                       		sub.w	d1,d0
0001738E 0C40 0280                  		cmpi.w	#$280,d0
00017392 6200                       		bhi.s	Obj6A_Delete
00017394 4EF9 0000 E0D6             		jmp	DisplaySprite
0001739A                            ; ===========================================================================
0001739A                            
0001739A                            Obj6A_Delete:
0001739A 4EF9 0000 E112             		jmp	DeleteObject
000173A0                            ; ===========================================================================
000173A0 0000 0000                  Obj6A_TypeIndex:dc.w Obj6A_Type00-Obj6A_TypeIndex, Obj6A_Type01-Obj6A_TypeIndex
000173A4 0000 0000                  		dc.w Obj6A_Type02-Obj6A_TypeIndex, Obj6A_Type03-Obj6A_TypeIndex
000173A8 0000                       		dc.w Obj6A_Type04-Obj6A_TypeIndex
000173AA                            ; ===========================================================================
000173AA                            
000173AA                            Obj6A_Type00:				; XREF: Obj6A_TypeIndex
000173AA 4E75                       		rts	
000173AC                            ; ===========================================================================
000173AC                            
000173AC                            Obj6A_Type01:				; XREF: Obj6A_TypeIndex
000173AC 323C 0060                  		move.w	#$60,d1
000173B0 7000                       		moveq	#0,d0
000173B2 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
000173B6 0828 0000 0022             		btst	#0,$22(a0)
000173BC 6700                       		beq.s	Obj6A_Animate01
000173BE 4440                       		neg.w	d0
000173C0 D041                       		add.w	d1,d0
000173C2                            
000173C2                            Obj6A_Animate01:
000173C2 3228 003A                  		move.w	$3A(a0),d1
000173C6 9240                       		sub.w	d0,d1
000173C8 3141 0008                  		move.w	d1,8(a0)	; move saw sideways
000173CC 5328 001E                  		subq.b	#1,$1E(a0)
000173D0 6A00                       		bpl.s	loc_15A46
000173D2 117C 0002 001E             		move.b	#2,$1E(a0)	; time between frame changes
000173D8 0868 0000 001A             		bchg	#0,$1A(a0)	; change frame
000173DE                            
000173DE                            loc_15A46:
000173DE 4A28 0001                  		tst.b	1(a0)
000173E2 6A00                       		bpl.s	locret_15A60
000173E4 3038 FE04                  		move.w	($FFFFFE04).w,d0
000173E8 0240 000F                  		andi.w	#$F,d0
000173EC 6600                       		bne.s	locret_15A60
000173EE 303C 00B0                  		move.w	#$B0,d0
000173F2 4EB9 0000 147C             		jsr	(PlaySound_Special).l ;	play saw sound
000173F8                            
000173F8                            locret_15A60:
000173F8 4E75                       		rts	
000173FA                            ; ===========================================================================
000173FA                            
000173FA                            Obj6A_Type02:				; XREF: Obj6A_TypeIndex
000173FA 323C 0030                  		move.w	#$30,d1
000173FE 7000                       		moveq	#0,d0
00017400 1038 FE64                  		move.b	($FFFFFE64).w,d0
00017404 0828 0000 0022             		btst	#0,$22(a0)
0001740A 6700                       		beq.s	Obj6A_Animate02
0001740C 4440                       		neg.w	d0
0001740E 0640 0080                  		addi.w	#$80,d0
00017412                            
00017412                            Obj6A_Animate02:
00017412 3228 0038                  		move.w	$38(a0),d1
00017416 9240                       		sub.w	d0,d1
00017418 3141 000C                  		move.w	d1,$C(a0)	; move saw vertically
0001741C 5328 001E                  		subq.b	#1,$1E(a0)
00017420 6A00                       		bpl.s	loc_15A96
00017422 117C 0002 001E             		move.b	#2,$1E(a0)
00017428 0868 0000 001A             		bchg	#0,$1A(a0)
0001742E                            
0001742E                            loc_15A96:
0001742E 4A28 0001                  		tst.b	1(a0)
00017432 6A00                       		bpl.s	locret_15AB0
00017434 1038 FE64                  		move.b	($FFFFFE64).w,d0
00017438 0C00 0018                  		cmpi.b	#$18,d0
0001743C 6600                       		bne.s	locret_15AB0
0001743E 303C 00B0                  		move.w	#$B0,d0
00017442 4EB9 0000 147C             		jsr	(PlaySound_Special).l ;	play saw sound
00017448                            
00017448                            locret_15AB0:
00017448 4E75                       		rts	
0001744A                            ; ===========================================================================
0001744A                            
0001744A                            Obj6A_Type03:				; XREF: Obj6A_TypeIndex
0001744A 4A28 003D                  		tst.b	$3D(a0)
0001744E 6600                       		bne.s	Obj6A_Animate03
00017450 3038 D008                  		move.w	($FFFFD008).w,d0
00017454 0440 00C0                  		subi.w	#$C0,d0
00017458 6500                       		bcs.s	loc_15B02
0001745A 9068 0008                  		sub.w	8(a0),d0
0001745E 6500                       		bcs.s	loc_15B02
00017460 3038 D00C                  		move.w	($FFFFD00C).w,d0
00017464 0440 0080                  		subi.w	#$80,d0
00017468 B068 000C                  		cmp.w	$C(a0),d0
0001746C 6400                       		bcc.s	locret_15B04
0001746E 0640 0100                  		addi.w	#$100,d0
00017472 B068 000C                  		cmp.w	$C(a0),d0
00017476 6500                       		bcs.s	locret_15B04
00017478 117C 0001 003D             		move.b	#1,$3D(a0)
0001747E 317C 0600 0010             		move.w	#$600,$10(a0)	; move object to the right
00017484 117C 00A2 0020             		move.b	#$A2,$20(a0)
0001748A 117C 0002 001A             		move.b	#2,$1A(a0)
00017490 303C 00B0                  		move.w	#$B0,d0
00017494 4EB9 0000 147C             		jsr	(PlaySound_Special).l ;	play saw sound
0001749A                            
0001749A                            loc_15B02:
0001749A 588F                       		addq.l	#4,sp
0001749C                            
0001749C                            locret_15B04:
0001749C 4E75                       		rts	
0001749E                            ; ===========================================================================
0001749E                            
0001749E                            Obj6A_Animate03:			; XREF: ROM:00015AB6j
0001749E 4EB9 0000 E0B0             		jsr	SpeedToPos
000174A4 3168 0008 003A             		move.w	8(a0),$3A(a0)
000174AA 5328 001E                  		subq.b	#1,$1E(a0)
000174AE 6A00                       		bpl.s	locret_15B24
000174B0 117C 0002 001E             		move.b	#2,$1E(a0)
000174B6 0868 0000 001A             		bchg	#0,$1A(a0)
000174BC                            
000174BC                            locret_15B24:
000174BC 4E75                       		rts	
000174BE                            ; ===========================================================================
000174BE                            
000174BE                            Obj6A_Type04:				; XREF: Obj6A_TypeIndex
000174BE 4A28 003D                  		tst.b	$3D(a0)
000174C2 6600                       		bne.s	Obj6A_Animate04
000174C4 3038 D008                  		move.w	($FFFFD008).w,d0
000174C8 0640 00E0                  		addi.w	#$E0,d0
000174CC 9068 0008                  		sub.w	8(a0),d0
000174D0 6400                       		bcc.s	loc_15B74
000174D2 3038 D00C                  		move.w	($FFFFD00C).w,d0
000174D6 0440 0080                  		subi.w	#$80,d0
000174DA B068 000C                  		cmp.w	$C(a0),d0
000174DE 6400                       		bcc.s	locret_15B76
000174E0 0640 0100                  		addi.w	#$100,d0
000174E4 B068 000C                  		cmp.w	$C(a0),d0
000174E8 6500                       		bcs.s	locret_15B76
000174EA 117C 0001 003D             		move.b	#1,$3D(a0)
000174F0 317C FA00 0010             		move.w	#-$600,$10(a0)	; move object to the left
000174F6 117C 00A2 0020             		move.b	#$A2,$20(a0)
000174FC 117C 0002 001A             		move.b	#2,$1A(a0)
00017502 303C 00B0                  		move.w	#$B0,d0
00017506 4EB9 0000 147C             		jsr	(PlaySound_Special).l ;	play saw sound
0001750C                            
0001750C                            loc_15B74:
0001750C 588F                       		addq.l	#4,sp
0001750E                            
0001750E                            locret_15B76:
0001750E 4E75                       		rts	
00017510                            ; ===========================================================================
00017510                            
00017510                            Obj6A_Animate04:
00017510 4EB9 0000 E0B0             		jsr	SpeedToPos
00017516 3168 0008 003A             		move.w	8(a0),$3A(a0)
0001751C 5328 001E                  		subq.b	#1,$1E(a0)
00017520 6A00                       		bpl.s	locret_15B96
00017522 117C 0002 001E             		move.b	#2,$1E(a0)
00017528 0868 0000 001A             		bchg	#0,$1A(a0)
0001752E                            
0001752E                            locret_15B96:
0001752E 4E75                       		rts	
00017530                            ; ===========================================================================
00017530                            ; ---------------------------------------------------------------------------
00017530                            ; Sprite mappings - ground saws	and pizza cutters (SBZ)
00017530                            ; ---------------------------------------------------------------------------
00017530                            Map_obj6A:
00017530                            	include "_maps\obj6A.asm"
00017530                            ; ---------------------------------------------------------------------------
00017530                            ; Sprite mappings - ground saws	and pizza cutters (SBZ)
00017530                            ; ---------------------------------------------------------------------------
00017530 0000 0000                  		dc.w byte_15BA0-Map_obj6A, byte_15BC4-Map_obj6A
00017534 0000 0000                  		dc.w byte_15BE8-Map_obj6A, byte_15BFD-Map_obj6A
00017538 07                         byte_15BA0:	dc.b 7
00017539 C401 0020 FC               		dc.b $C4, 1, 0,	$20, $FC
0001753E D401 0020 FC               		dc.b $D4, 1, 0,	$20, $FC
00017543 E403 0020 FC               		dc.b $E4, 3, 0,	$20, $FC
00017548 E00F 0000 E0               		dc.b $E0, $F, 0, 0, $E0
0001754D E00F 0800 00               		dc.b $E0, $F, 8, 0, 0
00017552 000F 1000 E0               		dc.b 0,	$F, $10, 0, $E0
00017557 000F 1800 00               		dc.b 0,	$F, $18, 0, 0
0001755C 07                         byte_15BC4:	dc.b 7
0001755D C401 0020 FC               		dc.b $C4, 1, 0,	$20, $FC
00017562 D401 0020 FC               		dc.b $D4, 1, 0,	$20, $FC
00017567 E403 0020 FC               		dc.b $E4, 3, 0,	$20, $FC
0001756C E00F 0010 E0               		dc.b $E0, $F, 0, $10, $E0
00017571 E00F 0810 00               		dc.b $E0, $F, 8, $10, 0
00017576 000F 1010 E0               		dc.b 0,	$F, $10, $10, $E0
0001757B 000F 1810 00               		dc.b 0,	$F, $18, $10, 0
00017580 04                         byte_15BE8:	dc.b 4
00017581 E00F 0000 E0               		dc.b $E0, $F, 0, 0, $E0
00017586 E00F 0800 00               		dc.b $E0, $F, 8, 0, 0
0001758B 000F 1000 E0               		dc.b 0,	$F, $10, 0, $E0
00017590 000F 1800 00               		dc.b 0,	$F, $18, 0, 0
00017595 04                         byte_15BFD:	dc.b 4
00017596 E00F 0010 E0               		dc.b $E0, $F, 0, $10, $E0
0001759B E00F 0810 00               		dc.b $E0, $F, 8, $10, 0
000175A0 000F 1010 E0               		dc.b 0,	$F, $10, $10, $E0
000175A5 000F 1810 00               		dc.b 0,	$F, $18, $10, 0
000175AA                            		even
000175AA                            		even
000175AA                            
000175AA                            ; ===========================================================================
000175AA                            ; ---------------------------------------------------------------------------
000175AA                            ; Object 6B - stomper (SBZ)
000175AA                            ; ---------------------------------------------------------------------------
000175AA                            
000175AA                            Obj6B:					; XREF: Obj_Index
000175AA 7000                       		moveq	#0,d0
000175AC 1028 0024                  		move.b	$24(a0),d0
000175B0 323B 0000                  		move.w	Obj6B_Index(pc,d0.w),d1
000175B4 4EFB 1000                  		jmp	Obj6B_Index(pc,d1.w)
000175B8                            ; ===========================================================================
000175B8 0000                       Obj6B_Index:	dc.w Obj6B_Main-Obj6B_Index
000175BA 0000                       		dc.w Obj6B_Action-Obj6B_Index
000175BC                            
000175BC 400C 8001                  Obj6B_Var:	dc.b  $40,  $C,	$80,   1 ; width, height, ????,	type number
000175C0 1C20 3803                  		dc.b  $1C, $20,	$38,   3
000175C4 1C20 4004                  		dc.b  $1C, $20,	$40,   4
000175C8 1C20 6004                  		dc.b  $1C, $20,	$60,   4
000175CC 8040 0005                  		dc.b  $80, $40,	  0,   5
000175D0                            ; ===========================================================================
000175D0                            
000175D0                            Obj6B_Main:				; XREF: Obj6B_Index
000175D0 5428 0024                  		addq.b	#2,$24(a0)
000175D4 7000                       		moveq	#0,d0
000175D6 1028 0028                  		move.b	$28(a0),d0
000175DA E448                       		lsr.w	#2,d0
000175DC 0240 001C                  		andi.w	#$1C,d0
000175E0 47FB 00DA                  		lea	Obj6B_Var(pc,d0.w),a3
000175E4 115B 0019                  		move.b	(a3)+,$19(a0)
000175E8 115B 0016                  		move.b	(a3)+,$16(a0)
000175EC E448                       		lsr.w	#2,d0
000175EE 1140 001A                  		move.b	d0,$1A(a0)
000175F2 217C 0000 0000 0004        		move.l	#Map_obj6B,4(a0)
000175FA 317C 22C0 0002             		move.w	#$22C0,2(a0)
00017600 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ/SBZ3
00017606 6600                       		bne.s	Obj6B_SBZ12	; if not, branch
00017608 08F8 0000 F7CB             		bset	#0,($FFFFF7CB).w
0001760E 6700                       		beq.s	Obj6B_SBZ3
00017610                            
00017610                            Obj6B_ChkGone:				; XREF: Obj6B_SBZ3
00017610 45F8 FC00                  		lea	($FFFFFC00).w,a2
00017614 7000                       		moveq	#0,d0
00017616 1028 0023                  		move.b	$23(a0),d0
0001761A 6700                       		beq.s	Obj6B_Delete
0001761C 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00017622                            
00017622                            Obj6B_Delete:
00017622 4EF9 0000 E112             		jmp	DeleteObject
00017628                            ; ===========================================================================
00017628                            
00017628                            Obj6B_SBZ3:				; XREF: Obj6B_Main
00017628 317C 41F0 0002             		move.w	#$41F0,2(a0)
0001762E 0C68 0A80 0008             		cmpi.w	#$A80,8(a0)
00017634 6600                       		bne.s	Obj6B_SBZ12
00017636 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001763A 7000                       		moveq	#0,d0
0001763C 1028 0023                  		move.b	$23(a0),d0
00017640 6700                       		beq.s	Obj6B_SBZ12
00017642 0832 0000 0002             		btst	#0,2(a2,d0.w)
00017648 6700                       		beq.s	Obj6B_SBZ12
0001764A 4238 F7CB                  		clr.b	($FFFFF7CB).w
0001764E 60C0                       		bra.s	Obj6B_ChkGone
00017650                            ; ===========================================================================
00017650                            
00017650                            Obj6B_SBZ12:				; XREF: Obj6B_Main
00017650 0028 0004 0001             		ori.b	#4,1(a0)
00017656 117C 0004 0018             		move.b	#4,$18(a0)
0001765C 3168 0008 0034             		move.w	8(a0),$34(a0)
00017662 3168 000C 0030             		move.w	$C(a0),$30(a0)
00017668 7000                       		moveq	#0,d0
0001766A 101B                       		move.b	(a3)+,d0
0001766C 3140 003C                  		move.w	d0,$3C(a0)
00017670 7000                       		moveq	#0,d0
00017672 1028 0028                  		move.b	$28(a0),d0
00017676 6A00                       		bpl.s	Obj6B_Action
00017678 0200 000F                  		andi.b	#$F,d0
0001767C 1140 003E                  		move.b	d0,$3E(a0)
00017680 1153 0028                  		move.b	(a3),$28(a0)
00017684 0C13 0005                  		cmpi.b	#5,(a3)
00017688 6600                       		bne.s	Obj6B_ChkGone2
0001768A 08E8 0004 0001             		bset	#4,1(a0)
00017690                            
00017690                            Obj6B_ChkGone2:
00017690 45F8 FC00                  		lea	($FFFFFC00).w,a2
00017694 7000                       		moveq	#0,d0
00017696 1028 0023                  		move.b	$23(a0),d0
0001769A 6700                       		beq.s	Obj6B_Action
0001769C 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
000176A2                            
000176A2                            Obj6B_Action:				; XREF: Obj6B_Index
000176A2 3F28 0008                  		move.w	8(a0),-(sp)
000176A6 7000                       		moveq	#0,d0
000176A8 1028 0028                  		move.b	$28(a0),d0
000176AC 0240 000F                  		andi.w	#$F,d0
000176B0 D040                       		add.w	d0,d0
000176B2 323B 0000                  		move.w	Obj6B_TypeIndex(pc,d0.w),d1
000176B6 4EBB 1000                  		jsr	Obj6B_TypeIndex(pc,d1.w)
000176BA 381F                       		move.w	(sp)+,d4
000176BC 4A28 0001                  		tst.b	1(a0)
000176C0 6A00                       		bpl.s	Obj6B_ChkDel
000176C2 7200                       		moveq	#0,d1
000176C4 1228 0019                  		move.b	$19(a0),d1
000176C8 0641 000B                  		addi.w	#$B,d1
000176CC 7400                       		moveq	#0,d2
000176CE 1428 0016                  		move.b	$16(a0),d2
000176D2 3602                       		move.w	d2,d3
000176D4 5243                       		addq.w	#1,d3
000176D6 6100 8DE8                  		bsr.w	SolidObject
000176DA                            
000176DA                            Obj6B_ChkDel:
000176DA 3028 0034                  		move.w	$34(a0),d0
000176DE 0240 FF80                  		andi.w	#$FF80,d0
000176E2 3238 F700                  		move.w	($FFFFF700).w,d1
000176E6 0441 0080                  		subi.w	#$80,d1
000176EA 0241 FF80                  		andi.w	#$FF80,d1
000176EE 9041                       		sub.w	d1,d0
000176F0 0C40 0280                  		cmpi.w	#$280,d0
000176F4 6200                       		bhi.s	loc_15D64
000176F6 4EF9 0000 E0D6             		jmp	DisplaySprite
000176FC                            ; ===========================================================================
000176FC                            
000176FC                            loc_15D64:
000176FC 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00017702 6600                       		bne.s	Obj6B_Delete2
00017704 4238 F7CB                  		clr.b	($FFFFF7CB).w
00017708 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001770C 7000                       		moveq	#0,d0
0001770E 1028 0023                  		move.b	$23(a0),d0
00017712 6700                       		beq.s	Obj6B_Delete2
00017714 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0001771A                            
0001771A                            Obj6B_Delete2:
0001771A 4EF9 0000 E112             		jmp	DeleteObject
00017720                            ; ===========================================================================
00017720 0000 0000                  Obj6B_TypeIndex:dc.w Obj6B_Type00-Obj6B_TypeIndex, Obj6B_Type01-Obj6B_TypeIndex
00017724 0000 0000                  		dc.w Obj6B_Type02-Obj6B_TypeIndex, Obj6B_Type03-Obj6B_TypeIndex
00017728 0000 0000                  		dc.w Obj6B_Type04-Obj6B_TypeIndex, Obj6B_Type05-Obj6B_TypeIndex
0001772C                            ; ===========================================================================
0001772C                            
0001772C                            Obj6B_Type00:				; XREF: Obj6B_TypeIndex
0001772C 4E75                       		rts	
0001772E                            ; ===========================================================================
0001772E                            
0001772E                            Obj6B_Type01:				; XREF: Obj6B_TypeIndex
0001772E 4A28 0038                  		tst.b	$38(a0)
00017732 6600                       		bne.s	loc_15DB4
00017734 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00017738 7000                       		moveq	#0,d0
0001773A 1028 003E                  		move.b	$3E(a0),d0
0001773E 0832 0000 0000             		btst	#0,(a2,d0.w)
00017744 6700                       		beq.s	loc_15DC2
00017746 117C 0001 0038             		move.b	#1,$38(a0)
0001774C                            
0001774C                            loc_15DB4:
0001774C 3028 003C                  		move.w	$3C(a0),d0
00017750 B068 003A                  		cmp.w	$3A(a0),d0
00017754 6700                       		beq.s	loc_15DE0
00017756 5468 003A                  		addq.w	#2,$3A(a0)
0001775A                            
0001775A                            loc_15DC2:
0001775A 3028 003A                  		move.w	$3A(a0),d0
0001775E 0828 0000 0022             		btst	#0,$22(a0)
00017764 6700                       		beq.s	loc_15DD4
00017766 4440                       		neg.w	d0
00017768 0640 0080                  		addi.w	#$80,d0
0001776C                            
0001776C                            loc_15DD4:
0001776C 3228 0034                  		move.w	$34(a0),d1
00017770 9240                       		sub.w	d0,d1
00017772 3141 0008                  		move.w	d1,8(a0)
00017776 4E75                       		rts	
00017778                            ; ===========================================================================
00017778                            
00017778                            loc_15DE0:
00017778 5228 0028                  		addq.b	#1,$28(a0)
0001777C 317C 00B4 0036             		move.w	#$B4,$36(a0)
00017782 4228 0038                  		clr.b	$38(a0)
00017786 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001778A 7000                       		moveq	#0,d0
0001778C 1028 0023                  		move.b	$23(a0),d0
00017790 67C8                       		beq.s	loc_15DC2
00017792 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00017798 60C0                       		bra.s	loc_15DC2
0001779A                            ; ===========================================================================
0001779A                            
0001779A                            Obj6B_Type02:				; XREF: Obj6B_TypeIndex
0001779A 4A28 0038                  		tst.b	$38(a0)
0001779E 6600                       		bne.s	loc_15E14
000177A0 5368 0036                  		subq.w	#1,$36(a0)
000177A4 6600                       		bne.s	loc_15E1E
000177A6 117C 0001 0038             		move.b	#1,$38(a0)
000177AC                            
000177AC                            loc_15E14:
000177AC 4A68 003A                  		tst.w	$3A(a0)
000177B0 6700                       		beq.s	loc_15E3C
000177B2 5568 003A                  		subq.w	#2,$3A(a0)
000177B6                            
000177B6                            loc_15E1E:
000177B6 3028 003A                  		move.w	$3A(a0),d0
000177BA 0828 0000 0022             		btst	#0,$22(a0)
000177C0 6700                       		beq.s	loc_15E30
000177C2 4440                       		neg.w	d0
000177C4 0640 0080                  		addi.w	#$80,d0
000177C8                            
000177C8                            loc_15E30:
000177C8 3228 0034                  		move.w	$34(a0),d1
000177CC 9240                       		sub.w	d0,d1
000177CE 3141 0008                  		move.w	d1,8(a0)
000177D2 4E75                       		rts	
000177D4                            ; ===========================================================================
000177D4                            
000177D4                            loc_15E3C:
000177D4 5328 0028                  		subq.b	#1,$28(a0)
000177D8 4228 0038                  		clr.b	$38(a0)
000177DC 45F8 FC00                  		lea	($FFFFFC00).w,a2
000177E0 7000                       		moveq	#0,d0
000177E2 1028 0023                  		move.b	$23(a0),d0
000177E6 67CE                       		beq.s	loc_15E1E
000177E8 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
000177EE 60C6                       		bra.s	loc_15E1E
000177F0                            ; ===========================================================================
000177F0                            
000177F0                            Obj6B_Type03:				; XREF: Obj6B_TypeIndex
000177F0 4A28 0038                  		tst.b	$38(a0)
000177F4 6600                       		bne.s	loc_15E7C
000177F6 4A68 003A                  		tst.w	$3A(a0)
000177FA 6700                       		beq.s	loc_15E6A
000177FC 5368 003A                  		subq.w	#1,$3A(a0)
00017800 6000                       		bra.s	loc_15E8E
00017802                            ; ===========================================================================
00017802                            
00017802                            loc_15E6A:
00017802 5368 0036                  		subq.w	#1,$36(a0)
00017806 6A00                       		bpl.s	loc_15E8E
00017808 317C 003C 0036             		move.w	#$3C,$36(a0)
0001780E 117C 0001 0038             		move.b	#1,$38(a0)
00017814                            
00017814                            loc_15E7C:
00017814 5068 003A                  		addq.w	#8,$3A(a0)
00017818 3028 003A                  		move.w	$3A(a0),d0
0001781C B068 003C                  		cmp.w	$3C(a0),d0
00017820 6600                       		bne.s	loc_15E8E
00017822 4228 0038                  		clr.b	$38(a0)
00017826                            
00017826                            loc_15E8E:
00017826 3028 003A                  		move.w	$3A(a0),d0
0001782A 0828 0000 0022             		btst	#0,$22(a0)
00017830 6700                       		beq.s	loc_15EA0
00017832 4440                       		neg.w	d0
00017834 0640 0038                  		addi.w	#$38,d0
00017838                            
00017838                            loc_15EA0:
00017838 3228 0030                  		move.w	$30(a0),d1
0001783C D240                       		add.w	d0,d1
0001783E 3141 000C                  		move.w	d1,$C(a0)
00017842 4E75                       		rts	
00017844                            ; ===========================================================================
00017844                            
00017844                            Obj6B_Type04:				; XREF: Obj6B_TypeIndex
00017844 4A28 0038                  		tst.b	$38(a0)
00017848 6600                       		bne.s	loc_15ED0
0001784A 4A68 003A                  		tst.w	$3A(a0)
0001784E 6700                       		beq.s	loc_15EBE
00017850 5168 003A                  		subq.w	#8,$3A(a0)
00017854 6000                       		bra.s	loc_15EF0
00017856                            ; ===========================================================================
00017856                            
00017856                            loc_15EBE:
00017856 5368 0036                  		subq.w	#1,$36(a0)
0001785A 6A00                       		bpl.s	loc_15EF0
0001785C 317C 003C 0036             		move.w	#$3C,$36(a0)
00017862 117C 0001 0038             		move.b	#1,$38(a0)
00017868                            
00017868                            loc_15ED0:
00017868 3028 003A                  		move.w	$3A(a0),d0
0001786C B068 003C                  		cmp.w	$3C(a0),d0
00017870 6700                       		beq.s	loc_15EE0
00017872 5068 003A                  		addq.w	#8,$3A(a0)
00017876 6000                       		bra.s	loc_15EF0
00017878                            ; ===========================================================================
00017878                            
00017878                            loc_15EE0:
00017878 5368 0036                  		subq.w	#1,$36(a0)
0001787C 6A00                       		bpl.s	loc_15EF0
0001787E 317C 003C 0036             		move.w	#$3C,$36(a0)
00017884 4228 0038                  		clr.b	$38(a0)
00017888                            
00017888                            loc_15EF0:
00017888 3028 003A                  		move.w	$3A(a0),d0
0001788C 0828 0000 0022             		btst	#0,$22(a0)
00017892 6700                       		beq.s	loc_15F02
00017894 4440                       		neg.w	d0
00017896 0640 0038                  		addi.w	#$38,d0
0001789A                            
0001789A                            loc_15F02:
0001789A 3228 0030                  		move.w	$30(a0),d1
0001789E D240                       		add.w	d0,d1
000178A0 3141 000C                  		move.w	d1,$C(a0)
000178A4 4E75                       		rts	
000178A6                            ; ===========================================================================
000178A6                            
000178A6                            Obj6B_Type05:				; XREF: Obj6B_TypeIndex
000178A6 4A28 0038                  		tst.b	$38(a0)
000178AA 6600                       		bne.s	loc_15F3E
000178AC 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
000178B0 7000                       		moveq	#0,d0
000178B2 1028 003E                  		move.b	$3E(a0),d0
000178B6 0832 0000 0000             		btst	#0,(a2,d0.w)
000178BC 6700                       		beq.s	locret_15F5C
000178BE 117C 0001 0038             		move.b	#1,$38(a0)
000178C4 45F8 FC00                  		lea	($FFFFFC00).w,a2
000178C8 7000                       		moveq	#0,d0
000178CA 1028 0023                  		move.b	$23(a0),d0
000178CE 6700                       		beq.s	loc_15F3E
000178D0 08F2 0000 0002             		bset	#0,2(a2,d0.w)
000178D6                            
000178D6                            loc_15F3E:
000178D6 04A8 0001 0000 0008        		subi.l	#$10000,8(a0)
000178DE 06A8 0000 8000 000C        		addi.l	#$8000,$C(a0)
000178E6 3168 0008 0034             		move.w	8(a0),$34(a0)
000178EC 0C68 0980 0008             		cmpi.w	#$980,8(a0)
000178F2 6700                       		beq.s	loc_15F5E
000178F4                            
000178F4                            locret_15F5C:
000178F4 4E75                       		rts	
000178F6                            ; ===========================================================================
000178F6                            
000178F6                            loc_15F5E:
000178F6 4228 0028                  		clr.b	$28(a0)
000178FA 4228 0038                  		clr.b	$38(a0)
000178FE 4E75                       		rts	
00017900                            ; ===========================================================================
00017900                            ; ---------------------------------------------------------------------------
00017900                            ; Sprite mappings - stomper and	platforms (SBZ)
00017900                            ; ---------------------------------------------------------------------------
00017900                            Map_obj6B:
00017900                            	include "_maps\obj6B.asm"
00017900                            ; ---------------------------------------------------------------------------
00017900                            ; Sprite mappings - stomper and	platforms (SBZ)
00017900                            ; ---------------------------------------------------------------------------
00017900 0000 0000                  		dc.w byte_15F72-Map_obj6B, byte_15F87-Map_obj6B
00017904 0000 0000                  		dc.w byte_15F87-Map_obj6B, byte_15F87-Map_obj6B
00017908 0000                       		dc.w byte_15FB0-Map_obj6B
0001790A 04                         byte_15F72:	dc.b 4
0001790B F40E 21AF C0               		dc.b $F4, $E, $21, $AF,	$C0
00017910 F40E 21B2 E0               		dc.b $F4, $E, $21, $B2,	$E0
00017915 F40E 21B2 00               		dc.b $F4, $E, $21, $B2,	0
0001791A F40E 29AF 20               		dc.b $F4, $E, $29, $AF,	$20
0001791F 08                         byte_15F87:	dc.b 8
00017920 E00C 000C E4               		dc.b $E0, $C, 0, $C, $E4
00017925 E008 0010 04               		dc.b $E0, 8, 0,	$10, 4
0001792A E80E 2013 E4               		dc.b $E8, $E, $20, $13,	$E4
0001792F E80A 201F 04               		dc.b $E8, $A, $20, $1F,	4
00017934 000E 2013 E4               		dc.b 0,	$E, $20, $13, $E4
00017939 000A 201F 04               		dc.b 0,	$A, $20, $1F, 4
0001793E 180C 000C E4               		dc.b $18, $C, 0, $C, $E4
00017943 1808 0010 04               		dc.b $18, 8, 0,	$10, 4
00017948 0E                         byte_15FB0:	dc.b $E
00017949 C00F 0000 80               		dc.b $C0, $F, 0, 0, $80
0001794E C00F 0010 A0               		dc.b $C0, $F, 0, $10, $A0
00017953 C00F 0020 C0               		dc.b $C0, $F, 0, $20, $C0
00017958 C00F 0010 E0               		dc.b $C0, $F, 0, $10, $E0
0001795D C00F 0020 00               		dc.b $C0, $F, 0, $20, 0
00017962 C00F 0010 20               		dc.b $C0, $F, 0, $10, $20
00017967 C00F 0030 40               		dc.b $C0, $F, 0, $30, $40
0001796C C00D 0040 60               		dc.b $C0, $D, 0, $40, $60
00017971 E00F 0048 80               		dc.b $E0, $F, 0, $48, $80
00017976 E00F 0048 C0               		dc.b $E0, $F, 0, $48, $C0
0001797B E00F 0058 00               		dc.b $E0, $F, 0, $58, 0
00017980 000F 0048 80               		dc.b 0,	$F, 0, $48, $80
00017985 000F 0058 C0               		dc.b 0,	$F, 0, $58, $C0
0001798A 200F 0058 80               		dc.b $20, $F, 0, $58, $80
00017990 00                         		even
00017990 00                         		even
00017990                            
00017990                            ; ===========================================================================
00017990                            ; ---------------------------------------------------------------------------
00017990                            ; Object 6C - vanishing	platforms (SBZ)
00017990                            ; ---------------------------------------------------------------------------
00017990                            
00017990                            Obj6C:					; XREF: Obj_Index
00017990 7000                       		moveq	#0,d0
00017992 1028 0024                  		move.b	$24(a0),d0
00017996 323B 0000                  		move.w	Obj6C_Index(pc,d0.w),d1
0001799A 4EFB 1000                  		jmp	Obj6C_Index(pc,d1.w)
0001799E                            ; ===========================================================================
0001799E 0000                       Obj6C_Index:	dc.w Obj6C_Main-Obj6C_Index
000179A0 0000                       		dc.w Obj6C_Vanish-Obj6C_Index
000179A2 0000                       		dc.w Obj6C_Vanish-Obj6C_Index
000179A4 0000                       		dc.w loc_16068-Obj6C_Index
000179A6                            ; ===========================================================================
000179A6                            
000179A6                            Obj6C_Main:				; XREF: Obj6C_Index
000179A6 5C28 0024                  		addq.b	#6,$24(a0)
000179AA 217C 0000 0000 0004        		move.l	#Map_obj6C,4(a0)
000179B2 317C 44C3 0002             		move.w	#$44C3,2(a0)
000179B8 0028 0004 0001             		ori.b	#4,1(a0)
000179BE 117C 0010 0019             		move.b	#$10,$19(a0)
000179C4 117C 0004 0018             		move.b	#4,$18(a0)
000179CA 7000                       		moveq	#0,d0
000179CC 1028 0028                  		move.b	$28(a0),d0	; get object type
000179D0 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
000179D4 5240                       		addq.w	#1,d0		; add 1
000179D6 EF48                       		lsl.w	#7,d0		; multiply by $80
000179D8 3200                       		move.w	d0,d1
000179DA 5340                       		subq.w	#1,d0
000179DC 3140 0030                  		move.w	d0,$30(a0)
000179E0 3140 0032                  		move.w	d0,$32(a0)
000179E4 7000                       		moveq	#0,d0
000179E6 1028 0028                  		move.b	$28(a0),d0	; get object type
000179EA 0240 00F0                  		andi.w	#$F0,d0		; read only the	1st digit
000179EE 0641 0080                  		addi.w	#$80,d1
000179F2 C0C1                       		mulu.w	d1,d0
000179F4 E088                       		lsr.l	#8,d0
000179F6 3140 0036                  		move.w	d0,$36(a0)
000179FA 5341                       		subq.w	#1,d1
000179FC 3141 0038                  		move.w	d1,$38(a0)
00017A00                            
00017A00                            loc_16068:				; XREF: Obj6C_Index
00017A00 3038 FE04                  		move.w	($FFFFFE04).w,d0
00017A04 9068 0036                  		sub.w	$36(a0),d0
00017A08 C068 0038                  		and.w	$38(a0),d0
00017A0C 6600                       		bne.s	Obj6C_Animate
00017A0E 5928 0024                  		subq.b	#4,$24(a0)
00017A12 6000                       		bra.s	Obj6C_Vanish
00017A14                            ; ===========================================================================
00017A14                            
00017A14                            Obj6C_Animate:
00017A14 43F9 0000 0000             		lea	(Ani_obj6C).l,a1
00017A1A 4EB9 0000 B1EE             		jsr	AnimateSprite
00017A20 6000 8776                  		bra.w	MarkObjGone
00017A24                            ; ===========================================================================
00017A24                            
00017A24                            Obj6C_Vanish:				; XREF: Obj6C_Index
00017A24 5368 0030                  		subq.w	#1,$30(a0)
00017A28 6A00                       		bpl.s	loc_160AA
00017A2A 317C 007F 0030             		move.w	#127,$30(a0)
00017A30 4A28 001C                  		tst.b	$1C(a0)
00017A34 6700                       		beq.s	loc_160A4
00017A36 3168 0032 0030             		move.w	$32(a0),$30(a0)
00017A3C                            
00017A3C                            loc_160A4:
00017A3C 0868 0000 001C             		bchg	#0,$1C(a0)
00017A42                            
00017A42                            loc_160AA:
00017A42 43F9 0000 0000             		lea	(Ani_obj6C).l,a1
00017A48 4EB9 0000 B1EE             		jsr	AnimateSprite
00017A4E 0828 0001 001A             		btst	#1,$1A(a0)	; has platform vanished?
00017A54 6600                       		bne.s	Obj6C_NotSolid	; if yes, branch
00017A56 0C28 0002 0024             		cmpi.b	#2,$24(a0)
00017A5C 6600                       		bne.s	loc_160D6
00017A5E 7200                       		moveq	#0,d1
00017A60 1228 0019                  		move.b	$19(a0),d1
00017A64 4EB9 0000 7ECE             		jsr	(PlatformObject).l
00017A6A 6000 872C                  		bra.w	MarkObjGone
00017A6E                            ; ===========================================================================
00017A6E                            
00017A6E                            loc_160D6:
00017A6E 7200                       		moveq	#0,d1
00017A70 1228 0019                  		move.b	$19(a0),d1
00017A74 4EB9 0000 8042             		jsr	(ExitPlatform).l
00017A7A 3428 0008                  		move.w	8(a0),d2
00017A7E 4EB9 0000 85AC             		jsr	(MvSonicOnPtfm2).l
00017A84 6000 8712                  		bra.w	MarkObjGone
00017A88                            ; ===========================================================================
00017A88                            
00017A88                            Obj6C_NotSolid:				; XREF: Obj6C_Vanish
00017A88 0828 0003 0022             		btst	#3,$22(a0)
00017A8E 6700                       		beq.s	Obj6C_Display
00017A90 43F8 D000                  		lea	($FFFFD000).w,a1
00017A94 08A9 0003 0022             		bclr	#3,$22(a1)
00017A9A 08A8 0003 0022             		bclr	#3,$22(a0)
00017AA0 117C 0002 0024             		move.b	#2,$24(a0)
00017AA6 4228 0025                  		clr.b	$25(a0)
00017AAA                            
00017AAA                            Obj6C_Display:
00017AAA 6000 86EC                  		bra.w	MarkObjGone
00017AAE                            ; ===========================================================================
00017AAE                            Ani_obj6C:
00017AAE                            	include "_anim\obj6C.asm"
00017AAE                            ; ---------------------------------------------------------------------------
00017AAE                            ; Animation script - vanishing platforms (SBZ)
00017AAE                            ; ---------------------------------------------------------------------------
00017AAE 0000                       		dc.w byte_1611A-Ani_obj6C
00017AB0 0000                       		dc.w byte_16122-Ani_obj6C
00017AB2 0700 0102 03FE 0100        byte_1611A:	dc.b 7,	0, 1, 2, 3, $FE, 1, 0
00017ABA 0703 0201 00FE 0100        byte_16122:	dc.b 7,	3, 2, 1, 0, $FE, 1, 0
00017AC2                            		even
00017AC2                            		even
00017AC2                            
00017AC2                            ; ---------------------------------------------------------------------------
00017AC2                            ; Sprite mappings - vanishing platforms	(SBZ)
00017AC2                            ; ---------------------------------------------------------------------------
00017AC2                            Map_obj6C:
00017AC2                            	include "_maps\obj6C.asm"
00017AC2                            ; ---------------------------------------------------------------------------
00017AC2                            ; Sprite mappings - vanishing platforms	(SBZ)
00017AC2                            ; ---------------------------------------------------------------------------
00017AC2 0000 0000                  		dc.w byte_16132-Map_obj6C, byte_16138-Map_obj6C
00017AC6 0000 0000                  		dc.w byte_1613E-Map_obj6C, byte_16144-Map_obj6C
00017ACA 01                         byte_16132:	dc.b 1
00017ACB F80F 0000 F0               		dc.b $F8, $F, 0, 0, $F0
00017AD0 01                         byte_16138:	dc.b 1
00017AD1 F807 0010 F8               		dc.b $F8, 7, 0,	$10, $F8
00017AD6 01                         byte_1613E:	dc.b 1
00017AD7 F803 0018 FC               		dc.b $F8, 3, 0,	$18, $FC
00017ADC 00                         byte_16144:	dc.b 0
00017ADE 00                         		even
00017ADE 00                         		even
00017ADE                            
00017ADE                            ; ===========================================================================
00017ADE                            ; ---------------------------------------------------------------------------
00017ADE                            ; Object 6E - electrocution orbs (SBZ)
00017ADE                            ; ---------------------------------------------------------------------------
00017ADE                            
00017ADE                            Obj6E:					; XREF: Obj_Index
00017ADE 7000                       		moveq	#0,d0
00017AE0 1028 0024                  		move.b	$24(a0),d0
00017AE4 323B 0000                  		move.w	Obj6E_Index(pc,d0.w),d1
00017AE8 4EFB 1000                  		jmp	Obj6E_Index(pc,d1.w)
00017AEC                            ; ===========================================================================
00017AEC 0000                       Obj6E_Index:	dc.w Obj6E_Main-Obj6E_Index
00017AEE 0000                       		dc.w Obj6E_Shock-Obj6E_Index
00017AF0                            ; ===========================================================================
00017AF0                            
00017AF0                            Obj6E_Main:				; XREF: Obj6E_Index
00017AF0 5428 0024                  		addq.b	#2,$24(a0)
00017AF4 217C 0000 0000 0004        		move.l	#Map_obj6E,4(a0)
00017AFC 317C 047E 0002             		move.w	#$47E,2(a0)
00017B02 0028 0004 0001             		ori.b	#4,1(a0)
00017B08 117C 0028 0019             		move.b	#$28,$19(a0)
00017B0E 7000                       		moveq	#0,d0
00017B10 1028 0028                  		move.b	$28(a0),d0	; read object type
00017B14 E948                       		lsl.w	#4,d0		; multiply by $10
00017B16 5340                       		subq.w	#1,d0
00017B18 3140 0034                  		move.w	d0,$34(a0)
00017B1C                            
00017B1C                            Obj6E_Shock:				; XREF: Obj6E_Index
00017B1C 3038 FE04                  		move.w	($FFFFFE04).w,d0
00017B20 C068 0034                  		and.w	$34(a0),d0
00017B24 6600                       		bne.s	Obj6E_Animate
00017B26 117C 0001 001C             		move.b	#1,$1C(a0)	; run "shocking" animation
00017B2C 4A28 0001                  		tst.b	1(a0)
00017B30 6A00                       		bpl.s	Obj6E_Animate
00017B32 303C 00B1                  		move.w	#$B1,d0
00017B36 4EB9 0000 147C             		jsr	(PlaySound_Special).l ;	play electricity sound
00017B3C                            
00017B3C                            Obj6E_Animate:
00017B3C 43F9 0000 0000             		lea	(Ani_obj6E).l,a1
00017B42 4EB9 0000 B1EE             		jsr	AnimateSprite
00017B48 117C 0000 0020             		move.b	#0,$20(a0)
00017B4E 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; is frame number 4 displayed?
00017B54 6600                       		bne.s	Obj6E_Display	; if not, branch
00017B56 117C 00A4 0020             		move.b	#$A4,$20(a0)	; if yes, make object hurt Sonic
00017B5C                            
00017B5C                            Obj6E_Display:
00017B5C 6000 863A                  		bra.w	MarkObjGone
00017B60                            ; ===========================================================================
00017B60                            Ani_obj6E:
00017B60                            	include "_anim\obj6E.asm"
00017B60                            ; ---------------------------------------------------------------------------
00017B60                            ; Animation script - electrocution orbs (SBZ)
00017B60                            ; ---------------------------------------------------------------------------
00017B60 0000                       		dc.w byte_161CC-Ani_obj6E
00017B62 0000                       		dc.w byte_161D0-Ani_obj6E
00017B64 0700 FF00                  byte_161CC:	dc.b 7,	0, $FF,	0
00017B68 0001 0101 0203 0304 0404+  byte_161D0:	dc.b 0,	1, 1, 1, 2, 3, 3, 4, 4,	4, 5, 5, 5, 0, $FD, 0
00017B78                            		even
00017B78                            		even
00017B78                            
00017B78                            ; ---------------------------------------------------------------------------
00017B78                            ; Sprite mappings - electrocution orbs (SBZ)
00017B78                            ; ---------------------------------------------------------------------------
00017B78                            Map_obj6E:
00017B78                            	include "_maps\obj6E.asm"
00017B78                            ; ---------------------------------------------------------------------------
00017B78                            ; Sprite mappings - electrocution orbs (SBZ)
00017B78                            ; ---------------------------------------------------------------------------
00017B78 0000 0000                  		dc.w byte_161EC-Map_obj6E, byte_161F7-Map_obj6E
00017B7C 0000 0000                  		dc.w byte_16207-Map_obj6E, byte_16221-Map_obj6E
00017B80 0000 0000                  		dc.w byte_16236-Map_obj6E, byte_16255-Map_obj6E
00017B84 02                         byte_161EC:	dc.b 2
00017B85 F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
00017B8A 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
00017B8F 03                         byte_161F7:	dc.b 3
00017B90 F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
00017B95 F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
00017B9A 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
00017B9F 05                         byte_16207:	dc.b 5
00017BA0 F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
00017BA5 F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
00017BAA 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
00017BAF F60D 000C 08               		dc.b $F6, $D, 0, $C, 8
00017BB4 F60D 080C DC               		dc.b $F6, $D, 8, $C, $DC
00017BB9 04                         byte_16221:	dc.b 4
00017BBA F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
00017BBF 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
00017BC4 F60D 000C 08               		dc.b $F6, $D, 0, $C, 8
00017BC9 F60D 080C DC               		dc.b $F6, $D, 8, $C, $DC
00017BCE 06                         byte_16236:	dc.b 6
00017BCF F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
00017BD4 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
00017BD9 F60D 100C 08               		dc.b $F6, $D, $10, $C, 8
00017BDE F60D 180C DC               		dc.b $F6, $D, $18, $C, $DC
00017BE3 F60D 000C 24               		dc.b $F6, $D, 0, $C, $24
00017BE8 F60D 080C C0               		dc.b $F6, $D, 8, $C, $C0
00017BED 04                         byte_16255:	dc.b 4
00017BEE F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
00017BF3 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
00017BF8 F60D 100C 24               		dc.b $F6, $D, $10, $C, $24
00017BFD F60D 180C C0               		dc.b $F6, $D, $18, $C, $C0
00017C02                            		even
00017C02                            		even
00017C02                            
00017C02                            ; ===========================================================================
00017C02                            ; ---------------------------------------------------------------------------
00017C02                            ; Object 6F - spinning platforms that move around a conveyor belt (SBZ)
00017C02                            ; ---------------------------------------------------------------------------
00017C02                            
00017C02                            Obj6F:					; XREF: Obj_Index
00017C02 7000                       		moveq	#0,d0
00017C04 1028 0024                  		move.b	$24(a0),d0
00017C08 323B 0000                  		move.w	Obj6F_Index(pc,d0.w),d1
00017C0C 4EBB 1000                  		jsr	Obj6F_Index(pc,d1.w)
00017C10 3028 0030                  		move.w	$30(a0),d0
00017C14 0240 FF80                  		andi.w	#$FF80,d0
00017C18 3238 F700                  		move.w	($FFFFF700).w,d1
00017C1C 0441 0080                  		subi.w	#$80,d1
00017C20 0241 FF80                  		andi.w	#$FF80,d1
00017C24 9041                       		sub.w	d1,d0
00017C26 0C40 0280                  		cmpi.w	#$280,d0
00017C2A 6200                       		bhi.s	loc_1629A
00017C2C                            
00017C2C                            Obj6F_Display:
00017C2C 4EF9 0000 E0D6             		jmp	DisplaySprite
00017C32                            ; ===========================================================================
00017C32                            
00017C32                            loc_1629A:
00017C32 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w ; check if act	is 3
00017C38 6600                       		bne.s	Obj6F_Act1or2	; if not, branch
00017C3A 0C40 FF80                  		cmpi.w	#-$80,d0
00017C3E 64EC                       		bcc.s	Obj6F_Display
00017C40                            
00017C40                            Obj6F_Act1or2:
00017C40 1028 002F                  		move.b	$2F(a0),d0
00017C44 6A00                       		bpl.s	Obj6F_Delete
00017C46 0240 007F                  		andi.w	#$7F,d0
00017C4A 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00017C4E 08B2 0000 0000             		bclr	#0,(a2,d0.w)
00017C54                            
00017C54                            Obj6F_Delete:
00017C54 4EF9 0000 E112             		jmp	DeleteObject
00017C5A                            ; ===========================================================================
00017C5A 0000                       Obj6F_Index:	dc.w Obj6F_Main-Obj6F_Index
00017C5C 0000                       		dc.w loc_163D8-Obj6F_Index
00017C5E                            ; ===========================================================================
00017C5E                            
00017C5E                            Obj6F_Main:				; XREF: Obj6F_Index
00017C5E 1028 0028                  		move.b	$28(a0),d0
00017C62 6B00 0000                  		bmi.w	loc_16380
00017C66 5428 0024                  		addq.b	#2,$24(a0)
00017C6A 217C 0001 72D2 0004        		move.l	#Map_obj69a,4(a0)
00017C72 317C 04DF 0002             		move.w	#$4DF,2(a0)
00017C78 117C 0010 0019             		move.b	#$10,$19(a0)
00017C7E 0028 0004 0001             		ori.b	#4,1(a0)
00017C84 117C 0004 0018             		move.b	#4,$18(a0)
00017C8A 7000                       		moveq	#0,d0
00017C8C 1028 0028                  		move.b	$28(a0),d0
00017C90 3200                       		move.w	d0,d1
00017C92 E648                       		lsr.w	#3,d0
00017C94 0240 001E                  		andi.w	#$1E,d0
00017C98 45FA 0000                  		lea	off_164A6(pc),a2
00017C9C D4F2 0000                  		adda.w	(a2,d0.w),a2
00017CA0 315A 0038                  		move.w	(a2)+,$38(a0)
00017CA4 315A 0030                  		move.w	(a2)+,$30(a0)
00017CA8 214A 003C                  		move.l	a2,$3C(a0)
00017CAC 0241 000F                  		andi.w	#$F,d1
00017CB0 E549                       		lsl.w	#2,d1
00017CB2 1141 0038                  		move.b	d1,$38(a0)
00017CB6 117C 0004 003A             		move.b	#4,$3A(a0)
00017CBC 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00017CC0 6700                       		beq.s	loc_16356
00017CC2 117C 0001 003B             		move.b	#1,$3B(a0)
00017CC8 4428 003A                  		neg.b	$3A(a0)
00017CCC 7200                       		moveq	#0,d1
00017CCE 1228 0038                  		move.b	$38(a0),d1
00017CD2 D228 003A                  		add.b	$3A(a0),d1
00017CD6 B228 0039                  		cmp.b	$39(a0),d1
00017CDA 6500                       		bcs.s	loc_16352
00017CDC 1001                       		move.b	d1,d0
00017CDE 7200                       		moveq	#0,d1
00017CE0 4A00                       		tst.b	d0
00017CE2 6A00                       		bpl.s	loc_16352
00017CE4 1228 0039                  		move.b	$39(a0),d1
00017CE8 5901                       		subq.b	#4,d1
00017CEA                            
00017CEA                            loc_16352:
00017CEA 1141 0038                  		move.b	d1,$38(a0)
00017CEE                            
00017CEE                            loc_16356:
00017CEE 3172 1000 0034             		move.w	(a2,d1.w),$34(a0)
00017CF4 3172 1002 0036             		move.w	2(a2,d1.w),$36(a0)
00017CFA 4A41                       		tst.w	d1
00017CFC 6600                       		bne.s	loc_1636C
00017CFE 117C 0001 001C             		move.b	#1,$1C(a0)
00017D04                            
00017D04                            loc_1636C:
00017D04 0C41 0008                  		cmpi.w	#8,d1
00017D08 6600                       		bne.s	loc_16378
00017D0A 117C 0000 001C             		move.b	#0,$1C(a0)
00017D10                            
00017D10                            loc_16378:
00017D10 6100 B33E                  		bsr.w	Obj63_ChangeDir
00017D14 6000 0000                  		bra.w	loc_163D8
00017D18                            ; ===========================================================================
00017D18                            
00017D18                            loc_16380:				; XREF: Obj6F_Main
00017D18 1140 002F                  		move.b	d0,$2F(a0)
00017D1C 0240 007F                  		andi.w	#$7F,d0
00017D20 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00017D24 08F2 0000 0000             		bset	#0,(a2,d0.w)
00017D2A 6700                       		beq.s	loc_1639A
00017D2C 4EF9 0000 E112             		jmp	DeleteObject
00017D32                            ; ===========================================================================
00017D32                            
00017D32                            loc_1639A:
00017D32 D040                       		add.w	d0,d0
00017D34 0240 001E                  		andi.w	#$1E,d0
00017D38 0640 0080                  		addi.w	#$80,d0
00017D3C 45F9 0000 0000             		lea	(ObjPos_Index).l,a2
00017D42 D4F2 0000                  		adda.w	(a2,d0.w),a2
00017D46 321A                       		move.w	(a2)+,d1
00017D48 2248                       		movea.l	a0,a1
00017D4A 6000                       		bra.s	Obj6F_LoadPform
00017D4C                            ; ===========================================================================
00017D4C                            
00017D4C                            Obj6F_Loop:
00017D4C 4EB9 0000 E56C             		jsr	SingleObjLoad
00017D52 6600                       		bne.s	loc_163D0
00017D54                            
00017D54                            Obj6F_LoadPform:			; XREF: loc_1639A
00017D54 12BC 006F                  		move.b	#$6F,0(a1)
00017D58 335A 0008                  		move.w	(a2)+,8(a1)
00017D5C 335A 000C                  		move.w	(a2)+,$C(a1)
00017D60 301A                       		move.w	(a2)+,d0
00017D62 1340 0028                  		move.b	d0,$28(a1)
00017D66                            
00017D66                            loc_163D0:
00017D66 51C9 FFE4                  		dbf	d1,Obj6F_Loop
00017D6A                            
00017D6A 588F                       		addq.l	#4,sp
00017D6C 4E75                       		rts	
00017D6E                            ; ===========================================================================
00017D6E                            
00017D6E                            loc_163D8:				; XREF: Obj6F_Index
00017D6E 43F9 0000 0000             		lea	(Ani_obj6F).l,a1
00017D74 4EB9 0000 B1EE             		jsr	AnimateSprite
00017D7A 4A28 001A                  		tst.b	$1A(a0)
00017D7E 6600                       		bne.s	loc_16404
00017D80 3F28 0008                  		move.w	8(a0),-(sp)
00017D84 6100 0000                  		bsr.w	loc_16424
00017D88 323C 001B                  		move.w	#$1B,d1
00017D8C 343C 0007                  		move.w	#7,d2
00017D90 3602                       		move.w	d2,d3
00017D92 5243                       		addq.w	#1,d3
00017D94 381F                       		move.w	(sp)+,d4
00017D96 6000 8728                  		bra.w	SolidObject
00017D9A                            ; ===========================================================================
00017D9A                            
00017D9A                            loc_16404:
00017D9A 0828 0003 0022             		btst	#3,$22(a0)
00017DA0 6700                       		beq.s	loc_16420
00017DA2 43F8 D000                  		lea	($FFFFD000).w,a1
00017DA6 08A9 0003 0022             		bclr	#3,$22(a1)
00017DAC 08A8 0003 0022             		bclr	#3,$22(a0)
00017DB2 4228 0025                  		clr.b	$25(a0)
00017DB6                            
00017DB6                            loc_16420:
00017DB6 6000 0002                  		bra.w	*+4
00017DBA                            
00017DBA                            loc_16424:
00017DBA 3028 0008                  		move.w	8(a0),d0
00017DBE B068 0034                  		cmp.w	$34(a0),d0
00017DC2 6600                       		bne.s	loc_16484
00017DC4 3028 000C                  		move.w	$C(a0),d0
00017DC8 B068 0036                  		cmp.w	$36(a0),d0
00017DCC 6600                       		bne.s	loc_16484
00017DCE 7200                       		moveq	#0,d1
00017DD0 1228 0038                  		move.b	$38(a0),d1
00017DD4 D228 003A                  		add.b	$3A(a0),d1
00017DD8 B228 0039                  		cmp.b	$39(a0),d1
00017DDC 6500                       		bcs.s	loc_16456
00017DDE 1001                       		move.b	d1,d0
00017DE0 7200                       		moveq	#0,d1
00017DE2 4A00                       		tst.b	d0
00017DE4 6A00                       		bpl.s	loc_16456
00017DE6 1228 0039                  		move.b	$39(a0),d1
00017DEA 5901                       		subq.b	#4,d1
00017DEC                            
00017DEC                            loc_16456:
00017DEC 1141 0038                  		move.b	d1,$38(a0)
00017DF0 2268 003C                  		movea.l	$3C(a0),a1
00017DF4 3171 1000 0034             		move.w	(a1,d1.w),$34(a0)
00017DFA 3171 1002 0036             		move.w	2(a1,d1.w),$36(a0)
00017E00 4A41                       		tst.w	d1
00017E02 6600                       		bne.s	loc_16474
00017E04 117C 0001 001C             		move.b	#1,$1C(a0)
00017E0A                            
00017E0A                            loc_16474:
00017E0A 0C41 0008                  		cmpi.w	#8,d1
00017E0E 6600                       		bne.s	loc_16480
00017E10 117C 0000 001C             		move.b	#0,$1C(a0)
00017E16                            
00017E16                            loc_16480:
00017E16 6100 B238                  		bsr.w	Obj63_ChangeDir
00017E1A                            
00017E1A                            loc_16484:
00017E1A 4EF9 0000 E0B0             		jmp	SpeedToPos
00017E20                            ; ===========================================================================
00017E20                            Ani_obj6F:
00017E20                            	include "_anim\obj6F.asm"
00017E20                            ; ---------------------------------------------------------------------------
00017E20                            ; Animation script - platform on conveyor belt (SBZ)
00017E20                            ; ---------------------------------------------------------------------------
00017E20 0000                       		dc.w byte_1648E-Ani_obj6F
00017E22 0000                       		dc.w byte_164A2-Ani_obj6F
00017E24 0000 0102 0304 4342 4140+  byte_1648E:	dc.b 0,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
00017E31 6423 2221 00FF 00          		dc.b $64, $23, $22, $21, 0, $FF, 0
00017E38 0F00 FF                    byte_164A2:	dc.b $F, 0, $FF
00017E3C 00                         		even
00017E3C 00                         		even
00017E3C                            
00017E3C 0000 0000 0000             off_164A6:	dc.w word_164B2-off_164A6, word_164C6-off_164A6, word_164DA-off_164A6
00017E42 0000 0000 0000             		dc.w word_164EE-off_164A6, word_16502-off_164A6, word_16516-off_164A6
00017E48 0010 0E80 0E14 0370 0EEF+  word_164B2:	dc.w $10, $E80,	$E14, $370, $EEF, $302,	$EEF, $340, $E14, $3AE
00017E5C 0010 0F80 0F14 02E0 0FEF+  word_164C6:	dc.w $10, $F80,	$F14, $2E0, $FEF, $272,	$FEF, $2B0, $F14, $31E
00017E70 0010 1080 1014 0270 10EF+  word_164DA:	dc.w $10, $1080, $1014,	$270, $10EF, $202, $10EF, $240,	$1014, $2AE
00017E84 0010 0F80 0F14 0570 0FEF+  word_164EE:	dc.w $10, $F80,	$F14, $570, $FEF, $502,	$FEF, $540, $F14, $5AE
00017E98 0010 1B80 1B14 0670 1BEF+  word_16502:	dc.w $10, $1B80, $1B14,	$670, $1BEF, $602, $1BEF, $640,	$1B14, $6AE
00017EAC 0010 1C80 1C14 05E0 1CEF+  word_16516:	dc.w $10, $1C80, $1C14,	$5E0, $1CEF, $572, $1CEF, $5B0,	$1C14, $61E
00017EC0                            ; ===========================================================================
00017EC0                            ; ---------------------------------------------------------------------------
00017EC0                            ; Object 70 - large girder block (SBZ)
00017EC0                            ; ---------------------------------------------------------------------------
00017EC0                            
00017EC0                            Obj70:					; XREF: Obj_Index
00017EC0 7000                       		moveq	#0,d0
00017EC2 1028 0024                  		move.b	$24(a0),d0
00017EC6 323B 0000                  		move.w	Obj70_Index(pc,d0.w),d1
00017ECA 4EFB 1000                  		jmp	Obj70_Index(pc,d1.w)
00017ECE                            ; ===========================================================================
00017ECE 0000                       Obj70_Index:	dc.w Obj70_Main-Obj70_Index
00017ED0 0000                       		dc.w Obj70_Action-Obj70_Index
00017ED2                            ; ===========================================================================
00017ED2                            
00017ED2                            Obj70_Main:				; XREF: Obj70_Index
00017ED2 5428 0024                  		addq.b	#2,$24(a0)
00017ED6 217C 0000 0000 0004        		move.l	#Map_obj70,4(a0)
00017EDE 317C 42F0 0002             		move.w	#$42F0,2(a0)
00017EE4 0028 0004 0001             		ori.b	#4,1(a0)
00017EEA 117C 0004 0018             		move.b	#4,$18(a0)
00017EF0 117C 0060 0019             		move.b	#$60,$19(a0)
00017EF6 117C 0018 0016             		move.b	#$18,$16(a0)
00017EFC 3168 0008 0032             		move.w	8(a0),$32(a0)
00017F02 3168 000C 0030             		move.w	$C(a0),$30(a0)
00017F08 6100 0000                  		bsr.w	Obj70_Move2
00017F0C                            
00017F0C                            Obj70_Action:				; XREF: Obj70_Index
00017F0C 3F28 0008                  		move.w	8(a0),-(sp)
00017F10 4A68 003A                  		tst.w	$3A(a0)
00017F14 6700                       		beq.s	Obj70_Move
00017F16 5368 003A                  		subq.w	#1,$3A(a0)
00017F1A 6600                       		bne.s	Obj70_Solid
00017F1C                            
00017F1C                            Obj70_Move:
00017F1C 4EB9 0000 E0B0             		jsr	SpeedToPos
00017F22 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from movement duration
00017F26 6600                       		bne.s	Obj70_Solid	; if time remains, branch
00017F28 6100 0000                  		bsr.w	Obj70_Move2	; if time is zero, branch
00017F2C                            
00017F2C                            Obj70_Solid:
00017F2C 381F                       		move.w	(sp)+,d4
00017F2E 4A28 0001                  		tst.b	1(a0)
00017F32 6A00                       		bpl.s	Obj70_ChkDel
00017F34 7200                       		moveq	#0,d1
00017F36 1228 0019                  		move.b	$19(a0),d1
00017F3A 0641 000B                  		addi.w	#$B,d1
00017F3E 7400                       		moveq	#0,d2
00017F40 1428 0016                  		move.b	$16(a0),d2
00017F44 3602                       		move.w	d2,d3
00017F46 5243                       		addq.w	#1,d3
00017F48 6100 8576                  		bsr.w	SolidObject
00017F4C                            
00017F4C                            Obj70_ChkDel:
00017F4C 3028 0032                  		move.w	$32(a0),d0
00017F50 0240 FF80                  		andi.w	#$FF80,d0
00017F54 3238 F700                  		move.w	($FFFFF700).w,d1
00017F58 0441 0080                  		subi.w	#$80,d1
00017F5C 0241 FF80                  		andi.w	#$FF80,d1
00017F60 9041                       		sub.w	d1,d0
00017F62 0C40 0280                  		cmpi.w	#$280,d0
00017F66 6200                       		bhi.s	Obj70_Delete
00017F68 4EF9 0000 E0D6             		jmp	DisplaySprite
00017F6E                            ; ===========================================================================
00017F6E                            
00017F6E                            Obj70_Delete:
00017F6E 4EF9 0000 E112             		jmp	DeleteObject
00017F74                            ; ===========================================================================
00017F74                            
00017F74                            Obj70_Move2:				; XREF: Obj70_Main
00017F74 1028 0038                  		move.b	$38(a0),d0
00017F78 0240 0018                  		andi.w	#$18,d0
00017F7C 43F9 0000 0000             		lea	(Obj70_MoveData).l,a1
00017F82 43F1 0000                  		lea	(a1,d0.w),a1
00017F86 3159 0010                  		move.w	(a1)+,$10(a0)
00017F8A 3159 0012                  		move.w	(a1)+,$12(a0)
00017F8E 3159 0034                  		move.w	(a1)+,$34(a0)
00017F92 5028 0038                  		addq.b	#8,$38(a0)	; use next movedata set
00017F96 317C 0007 003A             		move.w	#7,$3A(a0)
00017F9C 4E75                       		rts	
00017F9E                            ; ===========================================================================
00017F9E 0100 0000 0060 0000        Obj70_MoveData:	dc.w   $100,	 0,   $60,     0 ; x-speed, y-speed, duration, blank
00017FA6 0000 0100 0030 0000        		dc.w	  0,  $100,   $30,     0
00017FAE FF00 FFC0 0060 0000        		dc.w  $FF00, $FFC0,   $60,     0
00017FB6 0000 FF00 0018 0000        		dc.w	  0, $FF00,   $18,     0
00017FBE                            ; ---------------------------------------------------------------------------
00017FBE                            ; Sprite mappings - large girder block (SBZ)
00017FBE                            ; ---------------------------------------------------------------------------
00017FBE                            Map_obj70:
00017FBE                            	include "_maps\obj70.asm"
00017FBE                            ; ---------------------------------------------------------------------------
00017FBE                            ; Sprite mappings - large girder block (SBZ)
00017FBE                            ; ---------------------------------------------------------------------------
00017FBE 0000                       		dc.w byte_1662A-Map_obj70
00017FC0 0C                         byte_1662A:	dc.b $C
00017FC1 E80E 0000 A0               		dc.b $E8, $E, 0, 0, $A0
00017FC6 000E 1000 A0               		dc.b 0,	$E, $10, 0, $A0
00017FCB E80E 0006 C0               		dc.b $E8, $E, 0, 6, $C0
00017FD0 000E 1006 C0               		dc.b 0,	$E, $10, 6, $C0
00017FD5 E80E 0006 E0               		dc.b $E8, $E, 0, 6, $E0
00017FDA 000E 1006 E0               		dc.b 0,	$E, $10, 6, $E0
00017FDF E80E 0006 00               		dc.b $E8, $E, 0, 6, 0
00017FE4 000E 1006 00               		dc.b 0,	$E, $10, 6, 0
00017FE9 E80E 0006 20               		dc.b $E8, $E, 0, 6, $20
00017FEE 000E 1006 20               		dc.b 0,	$E, $10, 6, $20
00017FF3 E80E 0006 40               		dc.b $E8, $E, 0, 6, $40
00017FF8 000E 1006 40               		dc.b 0,	$E, $10, 6, $40
00017FFE 00                         		even
00017FFE 00                         		even
00017FFE                            
00017FFE                            ; ===========================================================================
00017FFE                            ; ---------------------------------------------------------------------------
00017FFE                            ; Object 72 - teleporter (SBZ)
00017FFE                            ; ---------------------------------------------------------------------------
00017FFE                            
00017FFE                            Obj72:					; XREF: Obj_Index
00017FFE 7000                       		moveq	#0,d0
00018000 1028 0024                  		move.b	$24(a0),d0
00018004 323B 0000                  		move.w	Obj72_Index(pc,d0.w),d1
00018008 4EBB 1000                  		jsr	Obj72_Index(pc,d1.w)
0001800C 3028 0008                  		move.w	8(a0),d0
00018010 0240 FF80                  		andi.w	#$FF80,d0
00018014 3238 F700                  		move.w	($FFFFF700).w,d1
00018018 0441 0080                  		subi.w	#$80,d1
0001801C 0241 FF80                  		andi.w	#$FF80,d1
00018020 9041                       		sub.w	d1,d0
00018022 0C40 0280                  		cmpi.w	#$280,d0
00018026 6200                       		bhi.s	Obj72_Delete
00018028 4E75                       		rts	
0001802A                            ; ===========================================================================
0001802A                            
0001802A                            Obj72_Delete:
0001802A 4EF9 0000 E112             		jmp	DeleteObject
00018030                            ; ===========================================================================
00018030 0000                       Obj72_Index:	dc.w Obj72_Main-Obj72_Index
00018032 0000                       		dc.w loc_166C8-Obj72_Index
00018034 0000                       		dc.w loc_1675E-Obj72_Index
00018036 0000                       		dc.w loc_16798-Obj72_Index
00018038                            ; ===========================================================================
00018038                            
00018038                            Obj72_Main:				; XREF: Obj72_Index
00018038 5428 0024                  		addq.b	#2,$24(a0)
0001803C 1028 0028                  		move.b	$28(a0),d0
00018040 D040                       		add.w	d0,d0
00018042 0240 001E                  		andi.w	#$1E,d0
00018046 45FA 0000                  		lea	Obj72_Data(pc),a2
0001804A D4F2 0000                  		adda.w	(a2,d0.w),a2
0001804E 315A 003A                  		move.w	(a2)+,$3A(a0)
00018052 214A 003C                  		move.l	a2,$3C(a0)
00018056 315A 0036                  		move.w	(a2)+,$36(a0)
0001805A 315A 0038                  		move.w	(a2)+,$38(a0)
0001805E                            
0001805E                            loc_166C8:				; XREF: Obj72_Index
0001805E 43F8 D000                  		lea	($FFFFD000).w,a1
00018062 3029 0008                  		move.w	8(a1),d0
00018066 9068 0008                  		sub.w	8(a0),d0
0001806A 0828 0000 0022             		btst	#0,$22(a0)
00018070 6700                       		beq.s	loc_166E0
00018072 0640 000F                  		addi.w	#$F,d0
00018076                            
00018076                            loc_166E0:
00018076 0C40 0010                  		cmpi.w	#$10,d0
0001807A 6400                       		bcc.s	locret_1675C
0001807C 3229 000C                  		move.w	$C(a1),d1
00018080 9268 000C                  		sub.w	$C(a0),d1
00018084 0641 0020                  		addi.w	#$20,d1
00018088 0C41 0040                  		cmpi.w	#$40,d1
0001808C 6400                       		bcc.s	locret_1675C
0001808E 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00018092 6600                       		bne.s	locret_1675C
00018094 0C28 0007 0028             		cmpi.b	#7,$28(a0)
0001809A 6600                       		bne.s	loc_1670E
0001809C 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w
000180A2 6500                       		bcs.s	locret_1675C
000180A4                            
000180A4                            loc_1670E:
000180A4 5428 0024                  		addq.b	#2,$24(a0)
000180A8 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w ; lock controls
000180AE 137C 0002 001C             		move.b	#2,$1C(a1)	; use Sonic's rolling animation
000180B4 337C 0800 0014             		move.w	#$800,$14(a1)
000180BA 337C 0000 0010             		move.w	#0,$10(a1)
000180C0 337C 0000 0012             		move.w	#0,$12(a1)
000180C6 08A8 0005 0022             		bclr	#5,$22(a0)
000180CC 08A9 0005 0022             		bclr	#5,$22(a1)
000180D2 08E9 0001 0022             		bset	#1,$22(a1)
000180D8 3368 0008 0008             		move.w	8(a0),8(a1)
000180DE 3368 000C 000C             		move.w	$C(a0),$C(a1)
000180E4 4228 0032                  		clr.b	$32(a0)
000180E8 303C 00BE                  		move.w	#$BE,d0
000180EC 4EB9 0000 147C             		jsr	(PlaySound_Special).l ;	play Sonic rolling sound
000180F2                            
000180F2                            locret_1675C:
000180F2 4E75                       		rts	
000180F4                            ; ===========================================================================
000180F4                            
000180F4                            loc_1675E:				; XREF: Obj72_Index
000180F4 43F8 D000                  		lea	($FFFFD000).w,a1
000180F8 1028 0032                  		move.b	$32(a0),d0
000180FC 5428 0032                  		addq.b	#2,$32(a0)
00018100 4EB9 0000 33DA             		jsr	(CalcSine).l
00018106 EA40                       		asr.w	#5,d0
00018108 3428 000C                  		move.w	$C(a0),d2
0001810C 9440                       		sub.w	d0,d2
0001810E 3342 000C                  		move.w	d2,$C(a1)
00018112 0C28 0080 0032             		cmpi.b	#$80,$32(a0)
00018118 6600                       		bne.s	locret_16796
0001811A 6100 0000                  		bsr.w	sub_1681C
0001811E 5428 0024                  		addq.b	#2,$24(a0)
00018122 303C 00BC                  		move.w	#$BC,d0
00018126 4EB9 0000 147C             		jsr	(PlaySound_Special).l ;	play teleport sound
0001812C                            
0001812C                            locret_16796:
0001812C 4E75                       		rts	
0001812E                            ; ===========================================================================
0001812E                            
0001812E                            loc_16798:				; XREF: Obj72_Index
0001812E 588F                       		addq.l	#4,sp
00018130 43F8 D000                  		lea	($FFFFD000).w,a1
00018134 5328 002E                  		subq.b	#1,$2E(a0)
00018138 6A00                       		bpl.s	loc_167DA
0001813A 3368 0036 0008             		move.w	$36(a0),8(a1)
00018140 3368 0038 000C             		move.w	$38(a0),$C(a1)
00018146 7200                       		moveq	#0,d1
00018148 1228 003A                  		move.b	$3A(a0),d1
0001814C 5801                       		addq.b	#4,d1
0001814E B228 003B                  		cmp.b	$3B(a0),d1
00018152 6500                       		bcs.s	loc_167C2
00018154 7200                       		moveq	#0,d1
00018156 6000                       		bra.s	loc_16800
00018158                            ; ===========================================================================
00018158                            
00018158                            loc_167C2:
00018158 1141 003A                  		move.b	d1,$3A(a0)
0001815C 2468 003C                  		movea.l	$3C(a0),a2
00018160 3172 1000 0036             		move.w	(a2,d1.w),$36(a0)
00018166 3172 1002 0038             		move.w	2(a2,d1.w),$38(a0)
0001816C 6000 0000                  		bra.w	sub_1681C
00018170                            ; ===========================================================================
00018170                            
00018170                            loc_167DA:
00018170 2429 0008                  		move.l	8(a1),d2
00018174 2629 000C                  		move.l	$C(a1),d3
00018178 3029 0010                  		move.w	$10(a1),d0
0001817C 48C0                       		ext.l	d0
0001817E E180                       		asl.l	#8,d0
00018180 D480                       		add.l	d0,d2
00018182 3029 0012                  		move.w	$12(a1),d0
00018186 48C0                       		ext.l	d0
00018188 E180                       		asl.l	#8,d0
0001818A D680                       		add.l	d0,d3
0001818C 2342 0008                  		move.l	d2,8(a1)
00018190 2343 000C                  		move.l	d3,$C(a1)
00018194 4E75                       		rts	
00018196                            ; ===========================================================================
00018196                            
00018196                            loc_16800:
00018196 0269 07FF 000C             		andi.w	#$7FF,$C(a1)
0001819C 4228 0024                  		clr.b	$24(a0)
000181A0 4238 F7C8                  		clr.b	($FFFFF7C8).w
000181A4 337C 0000 0010             		move.w	#0,$10(a1)
000181AA 337C 0200 0012             		move.w	#$200,$12(a1)
000181B0 4E75                       		rts	
000181B2                            
000181B2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000181B2                            
000181B2                            
000181B2                            sub_1681C:
000181B2 7000                       		moveq	#0,d0
000181B4 343C 1000                  		move.w	#$1000,d2
000181B8 3028 0036                  		move.w	$36(a0),d0
000181BC 9069 0008                  		sub.w	8(a1),d0
000181C0 6C00                       		bge.s	loc_16830
000181C2 4440                       		neg.w	d0
000181C4 4442                       		neg.w	d2
000181C6                            
000181C6                            loc_16830:
000181C6 7200                       		moveq	#0,d1
000181C8 363C 1000                  		move.w	#$1000,d3
000181CC 3228 0038                  		move.w	$38(a0),d1
000181D0 9269 000C                  		sub.w	$C(a1),d1
000181D4 6C00                       		bge.s	loc_16844
000181D6 4441                       		neg.w	d1
000181D8 4443                       		neg.w	d3
000181DA                            
000181DA                            loc_16844:
000181DA B240                       		cmp.w	d0,d1
000181DC 6500                       		bcs.s	loc_1687A
000181DE 7200                       		moveq	#0,d1
000181E0 3228 0038                  		move.w	$38(a0),d1
000181E4 9269 000C                  		sub.w	$C(a1),d1
000181E8 4841                       		swap	d1
000181EA 83C3                       		divs.w	d3,d1
000181EC 7000                       		moveq	#0,d0
000181EE 3028 0036                  		move.w	$36(a0),d0
000181F2 9069 0008                  		sub.w	8(a1),d0
000181F6 6700                       		beq.s	loc_16866
000181F8 4840                       		swap	d0
000181FA 81C1                       		divs.w	d1,d0
000181FC                            
000181FC                            loc_16866:
000181FC 3340 0010                  		move.w	d0,$10(a1)
00018200 3343 0012                  		move.w	d3,$12(a1)
00018204 4A41                       		tst.w	d1
00018206 6A00                       		bpl.s	loc_16874
00018208 4441                       		neg.w	d1
0001820A                            
0001820A                            loc_16874:
0001820A 3141 002E                  		move.w	d1,$2E(a0)
0001820E 4E75                       		rts	
00018210                            ; ===========================================================================
00018210                            
00018210                            loc_1687A:
00018210 7000                       		moveq	#0,d0
00018212 3028 0036                  		move.w	$36(a0),d0
00018216 9069 0008                  		sub.w	8(a1),d0
0001821A 4840                       		swap	d0
0001821C 81C2                       		divs.w	d2,d0
0001821E 7200                       		moveq	#0,d1
00018220 3228 0038                  		move.w	$38(a0),d1
00018224 9269 000C                  		sub.w	$C(a1),d1
00018228 6700                       		beq.s	loc_16898
0001822A 4841                       		swap	d1
0001822C 83C0                       		divs.w	d0,d1
0001822E                            
0001822E                            loc_16898:
0001822E 3341 0012                  		move.w	d1,$12(a1)
00018232 3342 0010                  		move.w	d2,$10(a1)
00018236 4A40                       		tst.w	d0
00018238 6A00                       		bpl.s	loc_168A6
0001823A 4440                       		neg.w	d0
0001823C                            
0001823C                            loc_168A6:
0001823C 3140 002E                  		move.w	d0,$2E(a0)
00018240 4E75                       		rts	
00018242                            ; End of function sub_1681C
00018242                            
00018242                            ; ===========================================================================
00018242 0000 0000 0000             Obj72_Data:	dc.w word_168BC-Obj72_Data, word_168C2-Obj72_Data, word_168C8-Obj72_Data
00018248 0000 0000 0000             		dc.w word_168E6-Obj72_Data, word_168EC-Obj72_Data, word_1690A-Obj72_Data
0001824E 0000 0000                  		dc.w word_16910-Obj72_Data, word_1692E-Obj72_Data
00018252 0004 0794 098C             word_168BC:	dc.w 4,	$794, $98C
00018258 0004 0094 038C             word_168C2:	dc.w 4,	$94, $38C
0001825E 001C 0794 02E8             word_168C8:	dc.w $1C, $794,	$2E8
00018264 07A4 02C0 07D0             		dc.w $7A4, $2C0, $7D0
0001826A 02AC 0858 02AC             		dc.w $2AC, $858, $2AC
00018270 0884 0298 0894             		dc.w $884, $298, $894
00018276 0270 0894 0190             		dc.w $270, $894, $190
0001827C 0004 0894 0690             word_168E6:	dc.w 4,	$894, $690
00018282 001C 1194 0470             word_168EC:	dc.w $1C, $1194, $470
00018288 1184 0498 1158             		dc.w $1184, $498, $1158
0001828E 04AC 0FD0 04AC             		dc.w $4AC, $FD0, $4AC
00018294 0FA4 04C0 0F94             		dc.w $FA4, $4C0, $F94
0001829A 04E8 0F94 0590             		dc.w $4E8, $F94, $590
000182A0 0004 1294 0490             word_1690A:	dc.w 4,	$1294, $490
000182A6 001C 1594 FFE8             word_16910:	dc.w $1C, $1594, $FFE8
000182AC 1584 FFC0 1560             		dc.w $1584, $FFC0, $1560
000182B2 FFAC 14D0 FFAC             		dc.w $FFAC, $14D0, $FFAC
000182B8 14A4 FF98 1494             		dc.w $14A4, $FF98, $1494
000182BE FF70 1494 FD90             		dc.w $FF70, $1494, $FD90
000182C4 0004 0894 0090             word_1692E:	dc.w 4,	$894, $90
000182CA                            ; ===========================================================================
000182CA                            ; ---------------------------------------------------------------------------
000182CA                            ; Object 78 - Caterkiller enemy	(MZ, SBZ)
000182CA                            ; ---------------------------------------------------------------------------
000182CA                            
000182CA                            Obj78:					; XREF: Obj_Index
000182CA 7000                       		moveq	#0,d0
000182CC 1028 0024                  		move.b	$24(a0),d0
000182D0 323B 0000                  		move.w	Obj78_Index(pc,d0.w),d1
000182D4 4EFB 1000                  		jmp	Obj78_Index(pc,d1.w)
000182D8                            ; ===========================================================================
000182D8 0000                       Obj78_Index:	dc.w Obj78_Main-Obj78_Index
000182DA 0000                       		dc.w Obj78_Action-Obj78_Index
000182DC 0000                       		dc.w Obj78_BodySeg1-Obj78_Index
000182DE 0000                       		dc.w Obj78_BodySeg2-Obj78_Index
000182E0 0000                       		dc.w Obj78_BodySeg1-Obj78_Index
000182E2 0000                       		dc.w Obj78_Delete-Obj78_Index
000182E4 0000                       		dc.w loc_16CC0-Obj78_Index
000182E6                            ; ===========================================================================
000182E6                            
000182E6                            locret_16950:
000182E6 4E75                       		rts	
000182E8                            ; ===========================================================================
000182E8                            
000182E8                            Obj78_Main:				; XREF: Obj78_Index
000182E8 117C 0007 0016             		move.b	#7,$16(a0)
000182EE 117C 0008 0017             		move.b	#8,$17(a0)
000182F4 4EB9 0000 E084             		jsr	ObjectFall
000182FA 4EBA E4B0                  		jsr	ObjHitFloor
000182FE 4A41                       		tst.w	d1
00018300 6AE4                       		bpl.s	locret_16950
00018302 D368 000C                  		add.w	d1,$C(a0)
00018306 4268 0012                  		clr.w	$12(a0)
0001830A 5428 0024                  		addq.b	#2,$24(a0)
0001830E 217C 0000 0000 0004        		move.l	#Map_obj78,4(a0)
00018316 317C 22B0 0002             		move.w	#$22B0,2(a0)
0001831C 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; if level is SBZ, branch
00018322 6700                       		beq.s	loc_16996
00018324 317C 24FF 0002             		move.w	#$24FF,2(a0)	; MZ specific code
0001832A                            
0001832A                            loc_16996:
0001832A 0228 0003 0001             		andi.b	#3,1(a0)
00018330 0028 0004 0001             		ori.b	#4,1(a0)
00018336 1168 0001 0022             		move.b	1(a0),$22(a0)
0001833C 117C 0004 0018             		move.b	#4,$18(a0)
00018342 117C 0008 0019             		move.b	#8,$19(a0)
00018348 117C 000B 0020             		move.b	#$B,$20(a0)
0001834E 3428 0008                  		move.w	8(a0),d2
00018352 7A0C                       		moveq	#$C,d5
00018354 0828 0000 0022             		btst	#0,$22(a0)
0001835A 6700                       		beq.s	loc_169CA
0001835C 4445                       		neg.w	d5
0001835E                            
0001835E                            loc_169CA:
0001835E 1C3C 0004                  		move.b	#4,d6
00018362 7600                       		moveq	#0,d3
00018364 7804                       		moveq	#4,d4
00018366 2448                       		movea.l	a0,a2
00018368 7202                       		moveq	#2,d1
0001836A                            
0001836A                            Obj78_LoadBody:
0001836A 4EB9 0000 E582             		jsr	SingleObjLoad2
00018370 6600                       		bne.s	Obj78_QuitLoad
00018372 12BC 0078                  		move.b	#$78,0(a1)	; load body segment object
00018376 1346 0024                  		move.b	d6,$24(a1)
0001837A 5406                       		addq.b	#2,d6
0001837C 2368 0004 0004             		move.l	4(a0),4(a1)
00018382 3368 0002 0002             		move.w	2(a0),2(a1)
00018388 137C 0005 0018             		move.b	#5,$18(a1)
0001838E 137C 0008 0019             		move.b	#8,$19(a1)
00018394 137C 00CB 0020             		move.b	#$CB,$20(a1)
0001839A D445                       		add.w	d5,d2
0001839C 3342 0008                  		move.w	d2,8(a1)
000183A0 3368 000C 000C             		move.w	$C(a0),$C(a1)
000183A6 1368 0022 0022             		move.b	$22(a0),$22(a1)
000183AC 1368 0022 0001             		move.b	$22(a0),1(a1)
000183B2 137C 0008 001A             		move.b	#8,$1A(a1)
000183B8 234A 003C                  		move.l	a2,$3C(a1)
000183BC 1344 003C                  		move.b	d4,$3C(a1)
000183C0 5804                       		addq.b	#4,d4
000183C2 2449                       		movea.l	a1,a2
000183C4                            
000183C4                            Obj78_QuitLoad:
000183C4 51C9 FFA4                  		dbf	d1,Obj78_LoadBody ; repeat sequence 2 more times
000183C8                            
000183C8 117C 0007 002A             		move.b	#7,$2A(a0)
000183CE 4228 003C                  		clr.b	$3C(a0)
000183D2                            
000183D2                            Obj78_Action:				; XREF: Obj78_Index
000183D2 4A28 0022                  		tst.b	$22(a0)
000183D6 6B00 0000                  		bmi.w	loc_16C96
000183DA 7000                       		moveq	#0,d0
000183DC 1028 0025                  		move.b	$25(a0),d0
000183E0 323B 0000                  		move.w	Obj78_Index2(pc,d0.w),d1
000183E4 4EBB 1000                  		jsr	Obj78_Index2(pc,d1.w)
000183E8 1228 002B                  		move.b	$2B(a0),d1
000183EC 6A00                       		bpl.s	Obj78_Display
000183EE 43F9 0000 0000             		lea	(Ani_obj78).l,a1
000183F4 1028 0026                  		move.b	$26(a0),d0
000183F8 0240 007F                  		andi.w	#$7F,d0
000183FC 5828 0026                  		addq.b	#4,$26(a0)
00018400 1031 0000                  		move.b	(a1,d0.w),d0
00018404 6A00                       		bpl.s	Obj78_AniHead
00018406 08A8 0007 002B             		bclr	#7,$2B(a0)
0001840C 6000                       		bra.s	Obj78_Display
0001840E                            ; ===========================================================================
0001840E                            
0001840E                            Obj78_AniHead:
0001840E 0201 0010                  		andi.b	#$10,d1
00018412 D001                       		add.b	d1,d0
00018414 1140 001A                  		move.b	d0,$1A(a0)
00018418                            
00018418                            Obj78_Display:
00018418 3028 0008                  		move.w	8(a0),d0
0001841C 0240 FF80                  		andi.w	#$FF80,d0
00018420 3238 F700                  		move.w	($FFFFF700).w,d1
00018424 0441 0080                  		subi.w	#$80,d1
00018428 0241 FF80                  		andi.w	#$FF80,d1
0001842C 9041                       		sub.w	d1,d0
0001842E 0C40 0280                  		cmpi.w	#$280,d0
00018432 6200 0000                  		bhi.w	Obj78_ChkGone
00018436 4EF9 0000 E0D6             		jmp	DisplaySprite
0001843C                            ; ===========================================================================
0001843C                            
0001843C                            Obj78_ChkGone:
0001843C 45F8 FC00                  		lea	($FFFFFC00).w,a2
00018440 7000                       		moveq	#0,d0
00018442 1028 0023                  		move.b	$23(a0),d0
00018446 6700                       		beq.s	loc_16ABC
00018448 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0001844E                            
0001844E                            loc_16ABC:
0001844E 117C 000A 0024             		move.b	#$A,$24(a0)	; run "Obj78_Delete" routine
00018454 4E75                       		rts	
00018456                            ; ===========================================================================
00018456                            
00018456                            Obj78_Delete:				; XREF: Obj78_Index
00018456 4EF9 0000 E112             		jmp	DeleteObject
0001845C                            ; ===========================================================================
0001845C 0000                       Obj78_Index2:	dc.w Obj78_Move-Obj78_Index2
0001845E 0000                       		dc.w loc_16B02-Obj78_Index2
00018460                            ; ===========================================================================
00018460                            
00018460                            Obj78_Move:				; XREF: Obj78_Index2
00018460 5328 002A                  		subq.b	#1,$2A(a0)
00018464 6B00                       		bmi.s	Obj78_Move2
00018466 4E75                       		rts	
00018468                            ; ===========================================================================
00018468                            
00018468                            Obj78_Move2:
00018468 5428 0025                  		addq.b	#2,$25(a0)
0001846C 117C 0010 002A             		move.b	#$10,$2A(a0)
00018472 317C FF40 0010             		move.w	#-$C0,$10(a0)
00018478 317C 0040 0014             		move.w	#$40,$14(a0)
0001847E 0868 0004 002B             		bchg	#4,$2B(a0)
00018484 6600                       		bne.s	loc_16AFC
00018486 4268 0010                  		clr.w	$10(a0)
0001848A 4468 0014                  		neg.w	$14(a0)
0001848E                            
0001848E                            loc_16AFC:
0001848E 08E8 0007 002B             		bset	#7,$2B(a0)
00018494                            
00018494                            loc_16B02:				; XREF: Obj78_Index2
00018494 5328 002A                  		subq.b	#1,$2A(a0)
00018498 6B00                       		bmi.s	loc_16B5E
0001849A 2F28 0008                  		move.l	8(a0),-(sp)
0001849E 2428 0008                  		move.l	8(a0),d2
000184A2 3028 0010                  		move.w	$10(a0),d0
000184A6 0828 0000 0022             		btst	#0,$22(a0)
000184AC 6700                       		beq.s	loc_16B1E
000184AE 4440                       		neg.w	d0
000184B0                            
000184B0                            loc_16B1E:
000184B0 48C0                       		ext.l	d0
000184B2 E180                       		asl.l	#8,d0
000184B4 D480                       		add.l	d0,d2
000184B6 2142 0008                  		move.l	d2,8(a0)
000184BA 4EBA E2F0                  		jsr	ObjHitFloor
000184BE 241F                       		move.l	(sp)+,d2
000184C0 0C41 FFF8                  		cmpi.w	#-8,d1
000184C4 6D00                       		blt.s	loc_16B70
000184C6 0C41 000C                  		cmpi.w	#$C,d1
000184CA 6C00                       		bge.s	loc_16B70
000184CC D368 000C                  		add.w	d1,$C(a0)
000184D0 4842                       		swap	d2
000184D2 B468 0008                  		cmp.w	8(a0),d2
000184D6 6700                       		beq.s	locret_16B5C
000184D8 7000                       		moveq	#0,d0
000184DA 1028 003C                  		move.b	$3C(a0),d0
000184DE 5228 003C                  		addq.b	#1,$3C(a0)
000184E2 0228 000F 003C             		andi.b	#$F,$3C(a0)
000184E8 1181 002C                  		move.b	d1,$2C(a0,d0.w)
000184EC                            
000184EC                            locret_16B5C:
000184EC 4E75                       		rts	
000184EE                            ; ===========================================================================
000184EE                            
000184EE                            loc_16B5E:
000184EE 5528 0025                  		subq.b	#2,$25(a0)
000184F2 117C 0007 002A             		move.b	#7,$2A(a0)
000184F8 317C 0000 0010             		move.w	#0,$10(a0)
000184FE 4E75                       		rts	
00018500                            ; ===========================================================================
00018500                            
00018500                            loc_16B70:
00018500 2142 0008                  		move.l	d2,8(a0)
00018504 0868 0000 0022             		bchg	#0,$22(a0)
0001850A 1168 0022 0001             		move.b	$22(a0),1(a0)
00018510 7000                       		moveq	#0,d0
00018512 1028 003C                  		move.b	$3C(a0),d0
00018516 11BC 0080 002C             		move.b	#$80,$2C(a0,d0.w)
0001851C 5228 003C                  		addq.b	#1,$3C(a0)
00018520 0228 000F 003C             		andi.b	#$F,$3C(a0)
00018526 4E75                       		rts	
00018528                            ; ===========================================================================
00018528                            
00018528                            Obj78_BodySeg2:				; XREF: Obj78_Index
00018528 2268 003C                  		movea.l	$3C(a0),a1
0001852C 1169 002B 002B             		move.b	$2B(a1),$2B(a0)
00018532 6A00                       		bpl.s	Obj78_BodySeg1
00018534 43F9 0000 0000             		lea	(Ani_obj78).l,a1
0001853A 1028 0026                  		move.b	$26(a0),d0
0001853E 0240 007F                  		andi.w	#$7F,d0
00018542 5828 0026                  		addq.b	#4,$26(a0)
00018546 4A31 0004                  		tst.b	4(a1,d0.w)
0001854A 6A00                       		bpl.s	Obj78_AniBody
0001854C 5828 0026                  		addq.b	#4,$26(a0)
00018550                            
00018550                            Obj78_AniBody:
00018550 1031 0000                  		move.b	(a1,d0.w),d0
00018554 5000                       		addq.b	#8,d0
00018556 1140 001A                  		move.b	d0,$1A(a0)
0001855A                            
0001855A                            Obj78_BodySeg1:				; XREF: Obj78_Index
0001855A 2268 003C                  		movea.l	$3C(a0),a1
0001855E 4A28 0022                  		tst.b	$22(a0)
00018562 6B00 0000                  		bmi.w	loc_16C90
00018566 1169 002B 002B             		move.b	$2B(a1),$2B(a0)
0001856C 1169 0025 0025             		move.b	$25(a1),$25(a0)
00018572 6700 0000                  		beq.w	loc_16C64
00018576 3169 0014 0014             		move.w	$14(a1),$14(a0)
0001857C 3029 0010                  		move.w	$10(a1),d0
00018580 D069 0014                  		add.w	$14(a1),d0
00018584 3140 0010                  		move.w	d0,$10(a0)
00018588 2428 0008                  		move.l	8(a0),d2
0001858C 2602                       		move.l	d2,d3
0001858E 3028 0010                  		move.w	$10(a0),d0
00018592 0828 0000 0022             		btst	#0,$22(a0)
00018598 6700                       		beq.s	loc_16C0C
0001859A 4440                       		neg.w	d0
0001859C                            
0001859C                            loc_16C0C:
0001859C 48C0                       		ext.l	d0
0001859E E180                       		asl.l	#8,d0
000185A0 D480                       		add.l	d0,d2
000185A2 2142 0008                  		move.l	d2,8(a0)
000185A6 4843                       		swap	d3
000185A8 B668 0008                  		cmp.w	8(a0),d3
000185AC 6700                       		beq.s	loc_16C64
000185AE 7000                       		moveq	#0,d0
000185B0 1028 003C                  		move.b	$3C(a0),d0
000185B4 1231 002C                  		move.b	$2C(a1,d0.w),d1
000185B8 0C01 0080                  		cmpi.b	#-$80,d1
000185BC 6600                       		bne.s	loc_16C50
000185BE 4843                       		swap	d3
000185C0 2143 0008                  		move.l	d3,8(a0)
000185C4 1181 002C                  		move.b	d1,$2C(a0,d0.w)
000185C8 0868 0000 0022             		bchg	#0,$22(a0)
000185CE 1168 0022 0001             		move.b	$22(a0),1(a0)
000185D4 5228 003C                  		addq.b	#1,$3C(a0)
000185D8 0228 000F 003C             		andi.b	#$F,$3C(a0)
000185DE 6000                       		bra.s	loc_16C64
000185E0                            ; ===========================================================================
000185E0                            
000185E0                            loc_16C50:
000185E0 4881                       		ext.w	d1
000185E2 D368 000C                  		add.w	d1,$C(a0)
000185E6 5228 003C                  		addq.b	#1,$3C(a0)
000185EA 0228 000F 003C             		andi.b	#$F,$3C(a0)
000185F0 1181 002C                  		move.b	d1,$2C(a0,d0.w)
000185F4                            
000185F4                            loc_16C64:
000185F4 0C29 000C 0024             		cmpi.b	#$C,$24(a1)
000185FA 6700                       		beq.s	loc_16C90
000185FC 0C11 0027                  		cmpi.b	#$27,0(a1)
00018600 6700                       		beq.s	loc_16C7C
00018602 0C29 000A 0024             		cmpi.b	#$A,$24(a1)
00018608 6600                       		bne.s	loc_16C82
0001860A                            
0001860A                            loc_16C7C:
0001860A 4229 0020                  		clr.b	$20(a1)	; immediately remove all touch response values when destroying the head to avoid taking damage
0001860E 117C 000A 0024             		move.b	#$A,$24(a0)
00018614                            
00018614                            loc_16C82:
00018614 4EF9 0000 E0D6             		jmp	DisplaySprite
0001861A                            
0001861A                            ; ===========================================================================
0001861A FE00 FE80 0180 0200        Obj78_FragSpeed:dc.w $FE00, $FE80, $180, $200
00018622                            ; ===========================================================================
00018622                            
00018622                            loc_16C90:
00018622 08E9 0007 0022             		bset	#7,$22(a1)
00018628                            
00018628                            loc_16C96:
00018628 7000                       		moveq	#0,d0
0001862A 1028 0024                  		move.b	$24(a0),d0
0001862E 303B 00E8                  		move.w	Obj78_FragSpeed-2(pc,d0.w),d0
00018632 0828 0000 0022             		btst	#0,$22(a0)
00018638 6700                       		beq.s	loc_16CAA
0001863A 4440                       		neg.w	d0
0001863C                            
0001863C                            loc_16CAA:
0001863C 3140 0010                  		move.w	d0,$10(a0)
00018640 317C FC00 0012             		move.w	#-$400,$12(a0)
00018646 117C 000C 0024             		move.b	#$C,$24(a0)
0001864C 0228 00F8 001A             		andi.b	#-8,$1A(a0)
00018652                            
00018652                            loc_16CC0:				; XREF: Obj78_Index
00018652 4EB9 0000 E084             		jsr	ObjectFall
00018658 4A68 0012                  		tst.w	$12(a0)
0001865C 6B00                       		bmi.s	loc_16CE0
0001865E 4EBA E14C                  		jsr	ObjHitFloor
00018662 4A41                       		tst.w	d1
00018664 6A00                       		bpl.s	loc_16CE0
00018666 D368 000C                  		add.w	d1,$C(a0)
0001866A 317C FC00 0012             		move.w	#-$400,$12(a0)
00018670                            
00018670                            loc_16CE0:
00018670 4A28 0001                  		tst.b	1(a0)
00018674 6A00 FDC6                  		bpl.w	Obj78_ChkGone
00018678 4EF9 0000 E0D6             		jmp	DisplaySprite
0001867E                            ; ===========================================================================
0001867E                            Ani_obj78:
0001867E                            	include "_anim\obj78.asm"
0001867E                            ; ---------------------------------------------------------------------------
0001867E                            ; Animation script - Caterkiller enemy (uses non-standard format)
0001867E                            ; ---------------------------------------------------------------------------
0001867E 0000 0000 0000 0000 0000+  	dc.b 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 1
0001868E 0101 0101 0101 0202 0202+  	dc.b 1,	1, 1, 1, 1, 1, 2, 2, 2,	2, 2, 3, 3, 3, 3, 3
0001869E 0404 0404 0404 0505 0505+  	dc.b 4,	4, 4, 4, 4, 4, 5, 5, 5,	5, 5, 6, 6, 6, 6, 6
000186AE 0606 0707 0707 0707 0707+  	dc.b 6,	6, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, $FF, 7, 7, $FF
000186BE 0707 0707 0707 0707 0707+  	dc.b 7,	7, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, 7, 7, 7, 6
000186CE 0606 0606 0606 0505 0505+  	dc.b 6,	6, 6, 6, 6, 6, 5, 5, 5,	5, 5, 4, 4, 4, 4, 4
000186DE 0403 0303 0303 0202 0202+  	dc.b 4,	3, 3, 3, 3, 3, 2, 2, 2,	2, 2, 1, 1, 1, 1, 1
000186EE 0101 0000 0000 0000 0000+  	dc.b 1,	1, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, $FF, 0, 0, $FF
000186FE                            	even
000186FE                            	even
000186FE                            
000186FE                            ; ---------------------------------------------------------------------------
000186FE                            ; Sprite mappings - Caterkiller	enemy (MZ, SBZ)
000186FE                            ; ---------------------------------------------------------------------------
000186FE                            Map_obj78:
000186FE                            	include "_maps\obj78.asm"
000186FE                            ; ---------------------------------------------------------------------------
000186FE                            ; Sprite mappings - Caterkiller	enemy (MZ, SBZ)
000186FE                            ; ---------------------------------------------------------------------------
000186FE 0000 0000                  		dc.w byte_16D9E-Map_obj78, byte_16DA4-Map_obj78
00018702 0000 0000                  		dc.w byte_16DAA-Map_obj78, byte_16DB0-Map_obj78
00018706 0000 0000                  		dc.w byte_16DB6-Map_obj78, byte_16DBC-Map_obj78
0001870A 0000 0000                  		dc.w byte_16DC2-Map_obj78, byte_16DC8-Map_obj78
0001870E 0000 0000                  		dc.w byte_16DCE-Map_obj78, byte_16DD4-Map_obj78
00018712 0000 0000                  		dc.w byte_16DDA-Map_obj78, byte_16DE0-Map_obj78
00018716 0000 0000                  		dc.w byte_16DE6-Map_obj78, byte_16DEC-Map_obj78
0001871A 0000 0000                  		dc.w byte_16DF2-Map_obj78, byte_16DF8-Map_obj78
0001871E 0000 0000                  		dc.w byte_16DFE-Map_obj78, byte_16E04-Map_obj78
00018722 0000 0000                  		dc.w byte_16E0A-Map_obj78, byte_16E10-Map_obj78
00018726 0000 0000                  		dc.w byte_16E16-Map_obj78, byte_16E1C-Map_obj78
0001872A 0000 0000                  		dc.w byte_16E22-Map_obj78, byte_16E28-Map_obj78
0001872E 01                         byte_16D9E:	dc.b 1
0001872F F206 0000 F8               		dc.b $F2, 6, 0,	0, $F8
00018734 01                         byte_16DA4:	dc.b 1
00018735 F106 0000 F8               		dc.b $F1, 6, 0,	0, $F8
0001873A 01                         byte_16DAA:	dc.b 1
0001873B F006 0000 F8               		dc.b $F0, 6, 0,	0, $F8
00018740 01                         byte_16DB0:	dc.b 1
00018741 EF06 0000 F8               		dc.b $EF, 6, 0,	0, $F8
00018746 01                         byte_16DB6:	dc.b 1
00018747 EE06 0000 F8               		dc.b $EE, 6, 0,	0, $F8
0001874C 01                         byte_16DBC:	dc.b 1
0001874D ED06 0000 F8               		dc.b $ED, 6, 0,	0, $F8
00018752 01                         byte_16DC2:	dc.b 1
00018753 EC06 0000 F8               		dc.b $EC, 6, 0,	0, $F8
00018758 01                         byte_16DC8:	dc.b 1
00018759 EB06 0000 F8               		dc.b $EB, 6, 0,	0, $F8
0001875E 01                         byte_16DCE:	dc.b 1
0001875F F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
00018764 01                         byte_16DD4:	dc.b 1
00018765 F705 000C F8               		dc.b $F7, 5, 0,	$C, $F8
0001876A 01                         byte_16DDA:	dc.b 1
0001876B F605 000C F8               		dc.b $F6, 5, 0,	$C, $F8
00018770 01                         byte_16DE0:	dc.b 1
00018771 F505 000C F8               		dc.b $F5, 5, 0,	$C, $F8
00018776 01                         byte_16DE6:	dc.b 1
00018777 F405 000C F8               		dc.b $F4, 5, 0,	$C, $F8
0001877C 01                         byte_16DEC:	dc.b 1
0001877D F305 000C F8               		dc.b $F3, 5, 0,	$C, $F8
00018782 01                         byte_16DF2:	dc.b 1
00018783 F205 000C F8               		dc.b $F2, 5, 0,	$C, $F8
00018788 01                         byte_16DF8:	dc.b 1
00018789 F105 000C F8               		dc.b $F1, 5, 0,	$C, $F8
0001878E 01                         byte_16DFE:	dc.b 1
0001878F F206 0006 F8               		dc.b $F2, 6, 0,	6, $F8
00018794 01                         byte_16E04:	dc.b 1
00018795 F106 0006 F8               		dc.b $F1, 6, 0,	6, $F8
0001879A 01                         byte_16E0A:	dc.b 1
0001879B F006 0006 F8               		dc.b $F0, 6, 0,	6, $F8
000187A0 01                         byte_16E10:	dc.b 1
000187A1 EF06 0006 F8               		dc.b $EF, 6, 0,	6, $F8
000187A6 01                         byte_16E16:	dc.b 1
000187A7 EE06 0006 F8               		dc.b $EE, 6, 0,	6, $F8
000187AC 01                         byte_16E1C:	dc.b 1
000187AD ED06 0006 F8               		dc.b $ED, 6, 0,	6, $F8
000187B2 01                         byte_16E22:	dc.b 1
000187B3 EC06 0006 F8               		dc.b $EC, 6, 0,	6, $F8
000187B8 01                         byte_16E28:	dc.b 1
000187B9 EB06 0006 F8               		dc.b $EB, 6, 0,	6, $F8
000187BE                            		even
000187BE                            		even
000187BE                            
000187BE                            ; ===========================================================================
000187BE                            ; ---------------------------------------------------------------------------
000187BE                            ; Object 79 - lamppost
000187BE                            ; ---------------------------------------------------------------------------
000187BE                            
000187BE                            Obj79:					; XREF: Obj_Index
000187BE 7000                       		moveq	#0,d0
000187C0 1028 0024                  		move.b	$24(a0),d0
000187C4 323B 0000                  		move.w	Obj79_Index(pc,d0.w),d1
000187C8 4EBB 1000                  		jsr	Obj79_Index(pc,d1.w)
000187CC 4EF9 0001 0198             		jmp	MarkObjGone
000187D2                            ; ===========================================================================
000187D2 0000                       Obj79_Index:	dc.w Obj79_Main-Obj79_Index
000187D4 0000                       		dc.w Obj79_BlueLamp-Obj79_Index
000187D6 0000                       		dc.w Obj79_AfterHit-Obj79_Index
000187D8 0000                       		dc.w Obj79_Twirl-Obj79_Index
000187DA                            ; ===========================================================================
000187DA                            
000187DA                            Obj79_Main:				; XREF: Obj79_Index
000187DA 5428 0024                  		addq.b	#2,$24(a0)
000187DE 217C 0000 0000 0004        		move.l	#Map_obj79,4(a0)
000187E6 317C 06C0 0002             		move.w	#($D800/$20),2(a0)
000187EC 117C 0004 0001             		move.b	#4,1(a0)
000187F2 117C 0008 0019             		move.b	#8,$19(a0)
000187F8 117C 0005 0018             		move.b	#5,$18(a0)
000187FE 45F8 FC00                  		lea	($FFFFFC00).w,a2
00018802 7000                       		moveq	#0,d0
00018804 1028 0023                  		move.b	$23(a0),d0
00018808 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0001880E 0832 0000 0002             		btst	#0,2(a2,d0.w)
00018814 6600                       		bne.s	Obj79_RedLamp
00018816 1238 FE30                  		move.b	($FFFFFE30).w,d1
0001881A 0201 007F                  		andi.b	#$7F,d1
0001881E 1428 0028                  		move.b	$28(a0),d2	; get lamppost number
00018822 0202 007F                  		andi.b	#$7F,d2
00018826 B202                       		cmp.b	d2,d1		; is lamppost number higher than the number hit?
00018828 6500                       		bcs.s	Obj79_BlueLamp	; if yes, branch
0001882A                            
0001882A                            Obj79_RedLamp:
0001882A 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00018830 117C 0004 0024             		move.b	#4,$24(a0)	; run "Obj79_AfterHit" routine
00018836 117C 0003 001A             		move.b	#3,$1A(a0)	; use red lamppost frame
0001883C 4E75                       		rts	
0001883E                            ; ===========================================================================
0001883E                            
0001883E                            Obj79_BlueLamp:				; XREF: Obj79_Index
0001883E 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
00018842 6600 0000                  		bne.w	locret_16F90	; if yes, branch
00018846 4A38 F7C8                  		tst.b	($FFFFF7C8).w
0001884A 6B00 0000                  		bmi.w	locret_16F90
0001884E 1238 FE30                  		move.b	($FFFFFE30).w,d1
00018852 0201 007F                  		andi.b	#$7F,d1
00018856 1428 0028                  		move.b	$28(a0),d2
0001885A 0202 007F                  		andi.b	#$7F,d2
0001885E B202                       		cmp.b	d2,d1
00018860 6500                       		bcs.s	Obj79_HitLamp
00018862 45F8 FC00                  		lea	($FFFFFC00).w,a2
00018866 7000                       		moveq	#0,d0
00018868 1028 0023                  		move.b	$23(a0),d0
0001886C 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00018872 117C 0004 0024             		move.b	#4,$24(a0)
00018878 117C 0003 001A             		move.b	#3,$1A(a0)
0001887E 6000 0000                  		bra.w	locret_16F90
00018882                            ; ===========================================================================
00018882                            
00018882                            Obj79_HitLamp:
00018882 3038 D008                  		move.w	($FFFFD008).w,d0
00018886 9068 0008                  		sub.w	8(a0),d0
0001888A 5040                       		addq.w	#8,d0
0001888C 0C40 0010                  		cmpi.w	#$10,d0
00018890 6400 0000                  		bcc.w	locret_16F90
00018894 3038 D00C                  		move.w	($FFFFD00C).w,d0
00018898 9068 000C                  		sub.w	$C(a0),d0
0001889C 0640 0040                  		addi.w	#$40,d0
000188A0 0C40 0068                  		cmpi.w	#$68,d0
000188A4 6400                       		bcc.s	locret_16F90
000188A6 303C 00A1                  		move.w	#$A1,d0
000188AA 4EB9 0000 147C             		jsr	(PlaySound_Special).l ;	play lamppost sound
000188B0 5428 0024                  		addq.b	#2,$24(a0)
000188B4 4EB9 0000 E56C             		jsr	SingleObjLoad
000188BA 6600                       		bne.s	loc_16F76
000188BC 12BC 0079                  		move.b	#$79,0(a1)	; load twirling	lamp object
000188C0 137C 0006 0024             		move.b	#6,$24(a1)	; use "Obj79_Twirl" routine
000188C6 3368 0008 0030             		move.w	8(a0),$30(a1)
000188CC 3368 000C 0032             		move.w	$C(a0),$32(a1)
000188D2 0469 0018 0032             		subi.w	#$18,$32(a1)
000188D8 237C 0000 0000 0004        		move.l	#Map_obj79,4(a1)
000188E0 337C 06C0 0002             		move.w	#($D800/$20),2(a1)
000188E6 137C 0004 0001             		move.b	#4,1(a1)
000188EC 137C 0008 0019             		move.b	#8,$19(a1)
000188F2 137C 0004 0018             		move.b	#4,$18(a1)
000188F8 137C 0002 001A             		move.b	#2,$1A(a1)
000188FE 337C 0020 0036             		move.w	#$20,$36(a1)
00018904                            
00018904                            loc_16F76:
00018904 117C 0001 001A             		move.b	#1,$1A(a0)	; use "post only" frame, with no lamp
0001890A 6100 0000                  		bsr.w	Obj79_StoreInfo
0001890E 45F8 FC00                  		lea	($FFFFFC00).w,a2
00018912 7000                       		moveq	#0,d0
00018914 1028 0023                  		move.b	$23(a0),d0
00018918 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0001891E                            
0001891E                            locret_16F90:
0001891E 4E75                       		rts	
00018920                            ; ===========================================================================
00018920                            
00018920                            Obj79_AfterHit:				; XREF: Obj79_Index
00018920 4E75                       		rts	
00018922                            ; ===========================================================================
00018922                            
00018922                            Obj79_Twirl:				; XREF: Obj79_Index
00018922 5368 0036                  		subq.w	#1,$36(a0)
00018926 6A00                       		bpl.s	loc_16FA0
00018928 117C 0004 0024             		move.b	#4,$24(a0)
0001892E                            
0001892E                            loc_16FA0:
0001892E 1028 0026                  		move.b	$26(a0),d0
00018932 0428 0010 0026             		subi.b	#$10,$26(a0)
00018938 0400 0040                  		subi.b	#$40,d0
0001893C 4EB9 0000 33DA             		jsr	(CalcSine).l
00018942 C3FC 0C00                  		muls.w	#$C00,d1
00018946 4841                       		swap	d1
00018948 D268 0030                  		add.w	$30(a0),d1
0001894C 3141 0008                  		move.w	d1,8(a0)
00018950 C1FC 0C00                  		muls.w	#$C00,d0
00018954 4840                       		swap	d0
00018956 D068 0032                  		add.w	$32(a0),d0
0001895A 3140 000C                  		move.w	d0,$C(a0)
0001895E 4E75                       		rts	
00018960                            ; ===========================================================================
00018960                            ; ---------------------------------------------------------------------------
00018960                            ; Subroutine to	store information when you hit a lamppost
00018960                            ; ---------------------------------------------------------------------------
00018960                            
00018960                            Obj79_StoreInfo:			; XREF: Obj79_HitLamp
00018960 11E8 0028 FE30             		move.b	$28(a0),($FFFFFE30).w 		; lamppost number
00018966 11F8 FE30 FE31             		move.b	($FFFFFE30).w,($FFFFFE31).w
0001896C 31E8 0008 FE32             		move.w	8(a0),($FFFFFE32).w		; x-position
00018972 31E8 000C FE34             		move.w	$C(a0),($FFFFFE34).w		; y-position
00018978 31F8 FE20 FE36             		move.w	($FFFFFE20).w,($FFFFFE36).w 	; rings
0001897E 11F8 FE1B FE54             		move.b	($FFFFFE1B).w,($FFFFFE54).w 	; lives
00018984 21F8 FE22 FE38             		move.l	($FFFFFE22).w,($FFFFFE38).w 	; time
0001898A 11F8 F742 FE3C             		move.b	($FFFFF742).w,($FFFFFE3C).w 	; routine counter for dynamic level mod
00018990 31F8 F72E FE3E             		move.w	($FFFFF72E).w,($FFFFFE3E).w 	; lower y-boundary of level
00018996 31F8 F700 FE40             		move.w	($FFFFF700).w,($FFFFFE40).w 	; screen x-position
0001899C 31F8 F704 FE42             		move.w	($FFFFF704).w,($FFFFFE42).w 	; screen y-position
000189A2 31F8 F708 FE44             		move.w	($FFFFF708).w,($FFFFFE44).w 	; bg position
000189A8 31F8 F70C FE46             		move.w	($FFFFF70C).w,($FFFFFE46).w 	; bg position
000189AE 31F8 F710 FE48             		move.w	($FFFFF710).w,($FFFFFE48).w 	; bg position
000189B4 31F8 F714 FE4A             		move.w	($FFFFF714).w,($FFFFFE4A).w 	; bg position
000189BA 31F8 F718 FE4C             		move.w	($FFFFF718).w,($FFFFFE4C).w 	; bg position
000189C0 31F8 F71C FE4E             		move.w	($FFFFF71C).w,($FFFFFE4E).w 	; bg position
000189C6 31F8 F648 FE50             		move.w	($FFFFF648).w,($FFFFFE50).w 	; water height
000189CC 11F8 F64D FE52             		move.b	($FFFFF64D).w,($FFFFFE52).w 	; rountine counter for water
000189D2 11F8 F64E FE53             		move.b	($FFFFF64E).w,($FFFFFE53).w 	; water direction
000189D8 4E75                       		rts	
000189DA                            
000189DA                            ; ---------------------------------------------------------------------------
000189DA                            ; Subroutine to	load stored info when you start	a level	from a lamppost
000189DA                            ; ---------------------------------------------------------------------------
000189DA                            
000189DA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000189DA                            
000189DA                            
000189DA                            Obj79_LoadInfo:				; XREF: LevelSizeLoad
000189DA 11F8 FE31 FE30             		move.b	($FFFFFE31).w,($FFFFFE30).w
000189E0 31F8 FE32 D008             		move.w	($FFFFFE32).w,($FFFFD008).w
000189E6 31F8 FE34 D00C             		move.w	($FFFFFE34).w,($FFFFD00C).w
000189EC 31F8 FE36 FE20             		move.w	($FFFFFE36).w,($FFFFFE20).w
000189F2 11F8 FE54 FE1B             		move.b	($FFFFFE54).w,($FFFFFE1B).w
000189F8 4278 FE20                  		clr.w	($FFFFFE20).w
000189FC 4238 FE1B                  		clr.b	($FFFFFE1B).w
00018A00 21F8 FE38 FE22             		move.l	($FFFFFE38).w,($FFFFFE22).w
00018A06 11FC 003B FE25             		move.b	#59,($FFFFFE25).w
00018A0C 5338 FE24                  		subq.b	#1,($FFFFFE24).w
00018A10 11F8 FE3C F742             		move.b	($FFFFFE3C).w,($FFFFF742).w
00018A16 11F8 FE52 F64D             		move.b	($FFFFFE52).w,($FFFFF64D).w
00018A1C 31F8 FE3E F72E             		move.w	($FFFFFE3E).w,($FFFFF72E).w
00018A22 31F8 FE3E F726             		move.w	($FFFFFE3E).w,($FFFFF726).w
00018A28 31F8 FE40 F700             		move.w	($FFFFFE40).w,($FFFFF700).w
00018A2E 31F8 FE42 F704             		move.w	($FFFFFE42).w,($FFFFF704).w
00018A34 31F8 FE44 F708             		move.w	($FFFFFE44).w,($FFFFF708).w
00018A3A 31F8 FE46 F70C             		move.w	($FFFFFE46).w,($FFFFF70C).w
00018A40 31F8 FE48 F710             		move.w	($FFFFFE48).w,($FFFFF710).w
00018A46 31F8 FE4A F714             		move.w	($FFFFFE4A).w,($FFFFF714).w
00018A4C 31F8 FE4C F718             		move.w	($FFFFFE4C).w,($FFFFF718).w
00018A52 31F8 FE4E F71C             		move.w	($FFFFFE4E).w,($FFFFF71C).w
00018A58 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00018A5E 6600                       		bne.s	loc_170E4
00018A60 31F8 FE50 F648             		move.w	($FFFFFE50).w,($FFFFF648).w
00018A66 11F8 FE52 F64D             		move.b	($FFFFFE52).w,($FFFFF64D).w
00018A6C 11F8 FE53 F64E             		move.b	($FFFFFE53).w,($FFFFF64E).w
00018A72                            
00018A72                            loc_170E4:
00018A72 4A38 FE30                  		tst.b	($FFFFFE30).w
00018A76 6A00                       		bpl.s	locret_170F6
00018A78 3038 FE32                  		move.w	($FFFFFE32).w,d0
00018A7C 0440 00A0                  		subi.w	#$A0,d0
00018A80 31C0 F728                  		move.w	d0,($FFFFF728).w
00018A84                            
00018A84                            locret_170F6:
00018A84 4E75                       		rts	
00018A86                            ; End of function Obj79_LoadInfo
00018A86                            
00018A86                            ; ===========================================================================
00018A86                            ; ---------------------------------------------------------------------------
00018A86                            ; Sprite mappings - lamppost
00018A86                            ; ---------------------------------------------------------------------------
00018A86                            Map_obj79:
00018A86                            	include "_maps\obj79.asm"
00018A86                            ; ---------------------------------------------------------------------------
00018A86                            ; Sprite mappings - lamppost
00018A86                            ; ---------------------------------------------------------------------------
00018A86 0000 0000                  		dc.w byte_17100-Map_obj79, byte_1711F-Map_obj79
00018A8A 0000 0000                  		dc.w byte_17134-Map_obj79, byte_1713F-Map_obj79
00018A8E 06                         byte_17100:	dc.b 6
00018A8F E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
00018A94 E401 0800 00               		dc.b $E4, 1, 8,	0, 0
00018A99 F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
00018A9E F403 2802 00               		dc.b $F4, 3, $28, 2, 0
00018AA3 D401 0006 F8               		dc.b $D4, 1, 0,	6, $F8
00018AA8 D401 0806 00               		dc.b $D4, 1, 8,	6, 0
00018AAD 04                         byte_1711F:	dc.b 4
00018AAE E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
00018AB3 E401 0800 00               		dc.b $E4, 1, 8,	0, 0
00018AB8 F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
00018ABD F403 2802 00               		dc.b $F4, 3, $28, 2, 0
00018AC2 02                         byte_17134:	dc.b 2
00018AC3 F801 0008 F8               		dc.b $F8, 1, 0,	8, $F8
00018AC8 F801 0808 00               		dc.b $F8, 1, 8,	8, 0
00018ACD 06                         byte_1713F:	dc.b 6
00018ACE E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
00018AD3 E401 0800 00               		dc.b $E4, 1, 8,	0, 0
00018AD8 F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
00018ADD F403 2802 00               		dc.b $F4, 3, $28, 2, 0
00018AE2 D401 0008 F8               		dc.b $D4, 1, 0,	8, $F8
00018AE7 D401 0808 00               		dc.b $D4, 1, 8,	8, 0
00018AEC                            		even
00018AEC                            		even
00018AEC                            
00018AEC                            ; ===========================================================================
00018AEC                            ; ---------------------------------------------------------------------------
00018AEC                            ; Object 7D - hidden points at the end of a level
00018AEC                            ; ---------------------------------------------------------------------------
00018AEC                            
00018AEC                            Obj7D:					; XREF: Obj_Index
00018AEC 7000                       		moveq	#0,d0
00018AEE 1028 0024                  		move.b	$24(a0),d0
00018AF2 323B 0000                  		move.w	Obj7D_Index(pc,d0.w),d1
00018AF6 4EFB 1000                  		jmp	Obj7D_Index(pc,d1.w)
00018AFA                            ; ===========================================================================
00018AFA 0000                       Obj7D_Index:	dc.w Obj7D_Main-Obj7D_Index
00018AFC 0000                       		dc.w Obj7D_DelayDel-Obj7D_Index
00018AFE                            ; ===========================================================================
00018AFE                            
00018AFE                            Obj7D_Main:				; XREF: Obj7D_Index
00018AFE 7410                       		moveq	#$10,d2
00018B00 3602                       		move.w	d2,d3
00018B02 D643                       		add.w	d3,d3
00018B04 43F8 D000                  		lea	($FFFFD000).w,a1
00018B08 3029 0008                  		move.w	8(a1),d0
00018B0C 9068 0008                  		sub.w	8(a0),d0
00018B10 D042                       		add.w	d2,d0
00018B12 B043                       		cmp.w	d3,d0
00018B14 6400                       		bcc.s	Obj7D_ChkDel
00018B16 3229 000C                  		move.w	$C(a1),d1
00018B1A 9268 000C                  		sub.w	$C(a0),d1
00018B1E D242                       		add.w	d2,d1
00018B20 B243                       		cmp.w	d3,d1
00018B22 6400                       		bcc.s	Obj7D_ChkDel
00018B24 4A78 FE08                  		tst.w	($FFFFFE08).w
00018B28 6600                       		bne.s	Obj7D_ChkDel
00018B2A 4A38 F7CD                  		tst.b	($FFFFF7CD).w
00018B2E 6600                       		bne.s	Obj7D_ChkDel
00018B30 5428 0024                  		addq.b	#2,$24(a0)
00018B34 217C 0000 0000 0004        		move.l	#Map_obj7D,4(a0)
00018B3C 317C 84B6 0002             		move.w	#$84B6,2(a0)
00018B42 0028 0004 0001             		ori.b	#4,1(a0)
00018B48 117C 0000 0018             		move.b	#0,$18(a0)
00018B4E 117C 0010 0019             		move.b	#$10,$19(a0)
00018B54 1168 0028 001A             		move.b	$28(a0),$1A(a0)
00018B5A 317C 0077 0030             		move.w	#119,$30(a0)	; set display time to 2	seconds
00018B60 303C 00C9                  		move.w	#$C9,d0
00018B64 4EB9 0000 147C             		jsr	(PlaySound_Special).l ;	play bonus sound
00018B6A 7000                       		moveq	#0,d0
00018B6C 1028 0028                  		move.b	$28(a0),d0
00018B70 D040                       		add.w	d0,d0
00018B72 303B 0000                  		move.w	Obj7D_Points(pc,d0.w),d0 ; load	bonus points array
00018B76 4EB9 0000 0000             		jsr	AddPoints
00018B7C                            
00018B7C                            Obj7D_ChkDel:
00018B7C 3028 0008                  		move.w	8(a0),d0
00018B80 0240 FF80                  		andi.w	#$FF80,d0
00018B84 3238 F700                  		move.w	($FFFFF700).w,d1
00018B88 0441 0080                  		subi.w	#$80,d1
00018B8C 0241 FF80                  		andi.w	#$FF80,d1
00018B90 9041                       		sub.w	d1,d0
00018B92 0C40 0280                  		cmpi.w	#$280,d0
00018B96 6200                       		bhi.s	Obj7D_Delete
00018B98 4E75                       		rts	
00018B9A                            ; ===========================================================================
00018B9A                            
00018B9A                            Obj7D_Delete:
00018B9A 4EF9 0000 E112             		jmp	DeleteObject
00018BA0                            ; ===========================================================================
00018BA0 0000                       Obj7D_Points:	dc.w 0			; Bonus	points array
00018BA2 03E8                       		dc.w 1000
00018BA4 0064                       		dc.w 100
00018BA6 000A                       		dc.w 10
00018BA8                            ; ===========================================================================
00018BA8                            
00018BA8                            Obj7D_DelayDel:				; XREF: Obj7D_Index
00018BA8 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from display time
00018BAC 6B00                       		bmi.s	Obj7D_Delete2	; if time is zero, branch
00018BAE 3028 0008                  		move.w	8(a0),d0
00018BB2 0240 FF80                  		andi.w	#-$80,d0
00018BB6 3238 F700                  		move.w	($FFFFF700).w,d1
00018BBA 0441 0080                  		subi.w	#$80,d1
00018BBE 0241 FF80                  		andi.w	#-$80,d1
00018BC2 9041                       		sub.w	d1,d0
00018BC4 0C40 0280                  		cmpi.w	#$280,d0
00018BC8 6200                       		bhi.s	Obj7D_Delete2
00018BCA 4EF9 0000 E0D6             		jmp	DisplaySprite
00018BD0                            ; ===========================================================================
00018BD0                            
00018BD0                            Obj7D_Delete2:
00018BD0 4EF9 0000 E112             		jmp	DeleteObject
00018BD6                            ; ===========================================================================
00018BD6                            ; ---------------------------------------------------------------------------
00018BD6                            ; Sprite mappings - hidden points at the end of	a level
00018BD6                            ; ---------------------------------------------------------------------------
00018BD6                            Map_obj7D:
00018BD6                            	include "_maps\obj7D.asm"
00018BD6                            ; ---------------------------------------------------------------------------
00018BD6                            ; Sprite mappings - hidden points at the end of	a level
00018BD6                            ; ---------------------------------------------------------------------------
00018BD6 0000 0000                  		dc.w byte_17250-Map_obj7D, byte_17251-Map_obj7D
00018BDA 0000 0000                  		dc.w byte_17257-Map_obj7D, byte_1725D-Map_obj7D
00018BDE 00                         byte_17250:	dc.b 0
00018BDF 01                         byte_17251:	dc.b 1
00018BE0 F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
00018BE5 01                         byte_17257:	dc.b 1
00018BE6 F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
00018BEB 01                         byte_1725D:	dc.b 1
00018BEC F40E 0018 F0               		dc.b $F4, $E, 0, $18, $F0
00018BF2 00                         		even
00018BF2 00                         		even
00018BF2                            
00018BF2                            ; ===========================================================================
00018BF2                            ; ---------------------------------------------------------------------------
00018BF2                            ; Object 8A - "SONIC TEAM PRESENTS" and	credits
00018BF2                            ; ---------------------------------------------------------------------------
00018BF2                            
00018BF2                            Obj8A:					; XREF: Obj_Index
00018BF2 7000                       		moveq	#0,d0
00018BF4 1028 0024                  		move.b	$24(a0),d0
00018BF8 323B 0000                  		move.w	Obj8A_Index(pc,d0.w),d1
00018BFC 4EFB 1000                  		jmp	Obj8A_Index(pc,d1.w)
00018C00                            ; ===========================================================================
00018C00 0000                       Obj8A_Index:	dc.w Obj8A_Main-Obj8A_Index
00018C02 0000                       		dc.w Obj8A_Display-Obj8A_Index
00018C04                            ; ===========================================================================
00018C04                            
00018C04                            Obj8A_Main:				; XREF: Obj8A_Index
00018C04 5428 0024                  		addq.b	#2,$24(a0)
00018C08 317C 0120 0008             		move.w	#$120,8(a0)
00018C0E 317C 00F0 000A             		move.w	#$F0,$A(a0)
00018C14 217C 0000 0000 0004        		move.l	#Map_obj8A,4(a0)
00018C1C 317C 05A0 0002             		move.w	#$5A0,2(a0)
00018C22 3038 FFF4                  		move.w	($FFFFFFF4).w,d0 ; load	credits	index number
00018C26 1140 001A                  		move.b	d0,$1A(a0)	; display appropriate sprite
00018C2A 117C 0000 0001             		move.b	#0,1(a0)
00018C30 117C 0000 0018             		move.b	#0,$18(a0)
00018C36 0C38 0004 F600             		cmpi.b	#4,($FFFFF600).w ; is the scene	number 04 (title screen)?
00018C3C 6600                       		bne.s	Obj8A_Display	; if not, branch
00018C3E 317C 00A6 0002             		move.w	#$A6,2(a0)
00018C44 117C 000A 001A             		move.b	#$A,$1A(a0)	; display "SONIC TEAM PRESENTS"
00018C4A 4A38 FFE3                  		tst.b	($FFFFFFE3).w	; is hidden credits cheat on?
00018C4E 6700                       		beq.s	Obj8A_Display	; if not, branch
00018C50 0C38 0072 F604             		cmpi.b	#$72,($FFFFF604).w ; is	Start+A+C+Down being pressed?
00018C56 6600                       		bne.s	Obj8A_Display	; if not, branch
00018C58 31FC 0EEE FBC0             		move.w	#$EEE,($FFFFFBC0).w ; 3rd pallet, 1st entry = white
00018C5E 31FC 0880 FBC2             		move.w	#$880,($FFFFFBC2).w ; 3rd pallet, 2nd entry = cyan
00018C64 4EF9 0000 E112             		jmp	DeleteObject
00018C6A                            ; ===========================================================================
00018C6A                            
00018C6A                            Obj8A_Display:				; XREF: Obj8A_Index
00018C6A 4EF9 0000 E0D6             		jmp	DisplaySprite
00018C70                            ; ===========================================================================
00018C70                            ; ---------------------------------------------------------------------------
00018C70                            ; Sprite mappings - "SONIC TEAM	PRESENTS" and credits
00018C70                            ; ---------------------------------------------------------------------------
00018C70                            Map_obj8A:
00018C70                            	include "_maps\obj8A.asm"
00018C70                            ; ---------------------------------------------------------------------------
00018C70                            ; Sprite mappings - "SONIC TEAM	PRESENTS" and credits
00018C70                            ; ---------------------------------------------------------------------------
00018C70 0000 0000                  		dc.w byte_172F8-Map_obj8A, byte_1733F-Map_obj8A
00018C74 0000 0000                  		dc.w byte_17390-Map_obj8A, byte_173C3-Map_obj8A
00018C78 0000 0000                  		dc.w byte_1743C-Map_obj8A, byte_174A1-Map_obj8A
00018C7C 0000 0000                  		dc.w byte_17524-Map_obj8A, byte_17598-Map_obj8A
00018C80 0000 0000                  		dc.w byte_17634-Map_obj8A, byte_17680-Map_obj8A
00018C84 0000                       		dc.w byte_176A9-Map_obj8A
00018C86 0E                         byte_172F8:	dc.b $E			 ; SONIC TEAM STAFF
00018C87 F805 002E 88               		dc.b $F8, 5, 0,	$2E, $88
00018C8C F805 0026 98               		dc.b $F8, 5, 0,	$26, $98
00018C91 F805 001A A8               		dc.b $F8, 5, 0,	$1A, $A8
00018C96 F801 0046 B8               		dc.b $F8, 1, 0,	$46, $B8
00018C9B F805 001E C0               		dc.b $F8, 5, 0,	$1E, $C0
00018CA0 F805 003E D8               		dc.b $F8, 5, 0,	$3E, $D8
00018CA5 F805 000E E8               		dc.b $F8, 5, 0,	$E, $E8
00018CAA F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
00018CAF F809 0008 08               		dc.b $F8, 9, 0,	8, 8
00018CB4 F805 002E 28               		dc.b $F8, 5, 0,	$2E, $28
00018CB9 F805 003E 38               		dc.b $F8, 5, 0,	$3E, $38
00018CBE F805 0004 48               		dc.b $F8, 5, 0,	4, $48
00018CC3 F805 005C 58               		dc.b $F8, 5, 0,	$5C, $58
00018CC8 F805 005C 68               		dc.b $F8, 5, 0,	$5C, $68
00018CCD 10                         byte_1733F:	dc.b $10		; GAME PLAN CAROL YAS
00018CCE D805 0000 80               		dc.b $D8, 5, 0,	0, $80
00018CD3 D805 0004 90               		dc.b $D8, 5, 0,	4, $90
00018CD8 D809 0008 A0               		dc.b $D8, 9, 0,	8, $A0
00018CDD D805 000E B4               		dc.b $D8, 5, 0,	$E, $B4
00018CE2 D805 0012 D0               		dc.b $D8, 5, 0,	$12, $D0
00018CE7 D805 0016 E0               		dc.b $D8, 5, 0,	$16, $E0
00018CEC D805 0004 F0               		dc.b $D8, 5, 0,	4, $F0
00018CF1 D805 001A 00               		dc.b $D8, 5, 0,	$1A, 0
00018CF6 0805 001E C8               		dc.b 8,	5, 0, $1E, $C8
00018CFB 0805 0004 D8               		dc.b 8,	5, 0, 4, $D8
00018D00 0805 0022 E8               		dc.b 8,	5, 0, $22, $E8
00018D05 0805 0026 F8               		dc.b 8,	5, 0, $26, $F8
00018D0A 0805 0016 08               		dc.b 8,	5, 0, $16, 8
00018D0F 0805 002A 20               		dc.b 8,	5, 0, $2A, $20
00018D14 0805 0004 30               		dc.b 8,	5, 0, 4, $30
00018D19 0805 002E 44               		dc.b 8,	5, 0, $2E, $44
00018D1E 0A                         byte_17390:	dc.b $A			 ; PROGRAM YU 2
00018D1F D805 0012 80               		dc.b $D8, 5, 0,	$12, $80
00018D24 D805 0022 90               		dc.b $D8, 5, 0,	$22, $90
00018D29 D805 0026 A0               		dc.b $D8, 5, 0,	$26, $A0
00018D2E D805 0000 B0               		dc.b $D8, 5, 0,	0, $B0
00018D33 D805 0022 C0               		dc.b $D8, 5, 0,	$22, $C0
00018D38 D805 0004 D0               		dc.b $D8, 5, 0,	4, $D0
00018D3D D809 0008 E0               		dc.b $D8, 9, 0,	8, $E0
00018D42 0805 002A E8               		dc.b 8,	5, 0, $2A, $E8
00018D47 0805 0032 F8               		dc.b 8,	5, 0, $32, $F8
00018D4C 0805 0036 08               		dc.b 8,	5, 0, $36, 8
00018D51 18                         byte_173C3:	dc.b $18		 ; CHARACTER DESIGN BIGISLAND
00018D52 D805 001E 88               		dc.b $D8, 5, 0,	$1E, $88
00018D57 D805 003A 98               		dc.b $D8, 5, 0,	$3A, $98
00018D5C D805 0004 A8               		dc.b $D8, 5, 0,	4, $A8
00018D61 D805 0022 B8               		dc.b $D8, 5, 0,	$22, $B8
00018D66 D805 0004 C8               		dc.b $D8, 5, 0,	4, $C8
00018D6B D805 001E D8               		dc.b $D8, 5, 0,	$1E, $D8
00018D70 D805 003E E8               		dc.b $D8, 5, 0,	$3E, $E8
00018D75 D805 000E F8               		dc.b $D8, 5, 0,	$E, $F8
00018D7A D805 0022 08               		dc.b $D8, 5, 0,	$22, 8
00018D7F D805 0042 20               		dc.b $D8, 5, 0,	$42, $20
00018D84 D805 000E 30               		dc.b $D8, 5, 0,	$E, $30
00018D89 D805 002E 40               		dc.b $D8, 5, 0,	$2E, $40
00018D8E D801 0046 50               		dc.b $D8, 1, 0,	$46, $50
00018D93 D805 0000 58               		dc.b $D8, 5, 0,	0, $58
00018D98 D805 001A 68               		dc.b $D8, 5, 0,	$1A, $68
00018D9D 0805 0048 C0               		dc.b 8,	5, 0, $48, $C0
00018DA2 0801 0046 D0               		dc.b 8,	1, 0, $46, $D0
00018DA7 0805 0000 D8               		dc.b 8,	5, 0, 0, $D8
00018DAC 0801 0046 E8               		dc.b 8,	1, 0, $46, $E8
00018DB1 0805 002E F0               		dc.b 8,	5, 0, $2E, $F0
00018DB6 0805 0016 00               		dc.b 8,	5, 0, $16, 0
00018DBB 0805 0004 10               		dc.b 8,	5, 0, 4, $10
00018DC0 0805 001A 20               		dc.b 8,	5, 0, $1A, $20
00018DC5 0805 0042 30               		dc.b 8,	5, 0, $42, $30
00018DCA 14                         byte_1743C:	dc.b $14		 ; DESIGN JINYA	PHENIX RIE
00018DCB D005 0042 A0               		dc.b $D0, 5, 0,	$42, $A0
00018DD0 D005 000E B0               		dc.b $D0, 5, 0,	$E, $B0
00018DD5 D005 002E C0               		dc.b $D0, 5, 0,	$2E, $C0
00018DDA D001 0046 D0               		dc.b $D0, 1, 0,	$46, $D0
00018DDF D005 0000 D8               		dc.b $D0, 5, 0,	0, $D8
00018DE4 D005 001A E8               		dc.b $D0, 5, 0,	$1A, $E8
00018DE9 0005 004C E8               		dc.b 0,	5, 0, $4C, $E8
00018DEE 0001 0046 F8               		dc.b 0,	1, 0, $46, $F8
00018DF3 0005 001A 04               		dc.b 0,	5, 0, $1A, 4
00018DF8 0005 002A 14               		dc.b 0,	5, 0, $2A, $14
00018DFD 0005 0004 24               		dc.b 0,	5, 0, 4, $24
00018E02 2005 0012 D0               		dc.b $20, 5, 0,	$12, $D0
00018E07 2005 003A E0               		dc.b $20, 5, 0,	$3A, $E0
00018E0C 2005 000E F0               		dc.b $20, 5, 0,	$E, $F0
00018E11 2005 001A 00               		dc.b $20, 5, 0,	$1A, 0
00018E16 2001 0046 10               		dc.b $20, 1, 0,	$46, $10
00018E1B 2005 0050 18               		dc.b $20, 5, 0,	$50, $18
00018E20 2005 0022 30               		dc.b $20, 5, 0,	$22, $30
00018E25 2001 0046 40               		dc.b $20, 1, 0,	$46, $40
00018E2A 2005 000E 48               		dc.b $20, 5, 0,	$E, $48
00018E2F 1A                         byte_174A1:	dc.b $1A		 ; SOUND PRODUCE MASATO	NAKAMURA
00018E30 D805 002E 98               		dc.b $D8, 5, 0,	$2E, $98
00018E35 D805 0026 A8               		dc.b $D8, 5, 0,	$26, $A8
00018E3A D805 0032 B8               		dc.b $D8, 5, 0,	$32, $B8
00018E3F D805 001A C8               		dc.b $D8, 5, 0,	$1A, $C8
00018E44 D805 0054 D8               		dc.b $D8, 5, 0,	$54, $D8
00018E49 D805 0012 F8               		dc.b $D8, 5, 0,	$12, $F8
00018E4E D805 0022 08               		dc.b $D8, 5, 0,	$22, 8
00018E53 D805 0026 18               		dc.b $D8, 5, 0,	$26, $18
00018E58 D805 0042 28               		dc.b $D8, 5, 0,	$42, $28
00018E5D D805 0032 38               		dc.b $D8, 5, 0,	$32, $38
00018E62 D805 001E 48               		dc.b $D8, 5, 0,	$1E, $48
00018E67 D805 000E 58               		dc.b $D8, 5, 0,	$E, $58
00018E6C 0809 0008 88               		dc.b 8,	9, 0, 8, $88
00018E71 0805 0004 9C               		dc.b 8,	5, 0, 4, $9C
00018E76 0805 002E AC               		dc.b 8,	5, 0, $2E, $AC
00018E7B 0805 0004 BC               		dc.b 8,	5, 0, 4, $BC
00018E80 0805 003E CC               		dc.b 8,	5, 0, $3E, $CC
00018E85 0805 0026 DC               		dc.b 8,	5, 0, $26, $DC
00018E8A 0805 001A F8               		dc.b 8,	5, 0, $1A, $F8
00018E8F 0805 0004 08               		dc.b 8,	5, 0, 4, 8
00018E94 0805 0058 18               		dc.b 8,	5, 0, $58, $18
00018E99 0805 0004 28               		dc.b 8,	5, 0, 4, $28
00018E9E 0809 0008 38               		dc.b 8,	9, 0, 8, $38
00018EA3 0805 0032 4C               		dc.b 8,	5, 0, $32, $4C
00018EA8 0805 0022 5C               		dc.b 8,	5, 0, $22, $5C
00018EAD 0805 0004 6C               		dc.b 8,	5, 0, 4, $6C
00018EB2 17                         byte_17524:	dc.b $17		 ; SOUND PROGRAM JIMITA	MACKY
00018EB3 D005 002E 98               		dc.b $D0, 5, 0,	$2E, $98
00018EB8 D005 0026 A8               		dc.b $D0, 5, 0,	$26, $A8
00018EBD D005 0032 B8               		dc.b $D0, 5, 0,	$32, $B8
00018EC2 D005 001A C8               		dc.b $D0, 5, 0,	$1A, $C8
00018EC7 D005 0054 D8               		dc.b $D0, 5, 0,	$54, $D8
00018ECC D005 0012 F8               		dc.b $D0, 5, 0,	$12, $F8
00018ED1 D005 0022 08               		dc.b $D0, 5, 0,	$22, 8
00018ED6 D005 0026 18               		dc.b $D0, 5, 0,	$26, $18
00018EDB D005 0000 28               		dc.b $D0, 5, 0,	0, $28
00018EE0 D005 0022 38               		dc.b $D0, 5, 0,	$22, $38
00018EE5 D005 0004 48               		dc.b $D0, 5, 0,	4, $48
00018EEA D009 0008 58               		dc.b $D0, 9, 0,	8, $58
00018EEF 0005 004C D0               		dc.b 0,	5, 0, $4C, $D0
00018EF4 0001 0046 E0               		dc.b 0,	1, 0, $46, $E0
00018EF9 0009 0008 E8               		dc.b 0,	9, 0, 8, $E8
00018EFE 0001 0046 FC               		dc.b 0,	1, 0, $46, $FC
00018F03 0005 003E 04               		dc.b 0,	5, 0, $3E, 4
00018F08 0005 0004 14               		dc.b 0,	5, 0, 4, $14
00018F0D 2009 0008 D0               		dc.b $20, 9, 0,	8, $D0
00018F12 2005 0004 E4               		dc.b $20, 5, 0,	4, $E4
00018F17 2005 001E F4               		dc.b $20, 5, 0,	$1E, $F4
00018F1C 2005 0058 04               		dc.b $20, 5, 0,	$58, 4
00018F21 2005 002A 14               		dc.b $20, 5, 0,	$2A, $14
00018F26 1F                         byte_17598:	dc.b $1F		 ; SPECIAL THANKS FUJIO	MINEGISHI PAPA
00018F27 D805 002E 80               		dc.b $D8, 5, 0,	$2E, $80
00018F2C D805 0012 90               		dc.b $D8, 5, 0,	$12, $90
00018F31 D805 000E A0               		dc.b $D8, 5, 0,	$E, $A0
00018F36 D805 001E B0               		dc.b $D8, 5, 0,	$1E, $B0
00018F3B D801 0046 C0               		dc.b $D8, 1, 0,	$46, $C0
00018F40 D805 0004 C8               		dc.b $D8, 5, 0,	4, $C8
00018F45 D805 0016 D8               		dc.b $D8, 5, 0,	$16, $D8
00018F4A D805 003E F8               		dc.b $D8, 5, 0,	$3E, $F8
00018F4F D805 003A 08               		dc.b $D8, 5, 0,	$3A, 8
00018F54 D805 0004 18               		dc.b $D8, 5, 0,	4, $18
00018F59 D805 001A 28               		dc.b $D8, 5, 0,	$1A, $28
00018F5E D805 0058 38               		dc.b $D8, 5, 0,	$58, $38
00018F63 D805 002E 48               		dc.b $D8, 5, 0,	$2E, $48
00018F68 0005 005C B0               		dc.b 0,	5, 0, $5C, $B0
00018F6D 0005 0032 C0               		dc.b 0,	5, 0, $32, $C0
00018F72 0005 004C D0               		dc.b 0,	5, 0, $4C, $D0
00018F77 0001 0046 E0               		dc.b 0,	1, 0, $46, $E0
00018F7C 0005 0026 E8               		dc.b 0,	5, 0, $26, $E8
00018F81 0009 0008 00               		dc.b 0,	9, 0, 8, 0
00018F86 0001 0046 14               		dc.b 0,	1, 0, $46, $14
00018F8B 0005 001A 1C               		dc.b 0,	5, 0, $1A, $1C
00018F90 0005 000E 2C               		dc.b 0,	5, 0, $E, $2C
00018F95 0005 0000 3C               		dc.b 0,	5, 0, 0, $3C
00018F9A 0001 0046 4C               		dc.b 0,	1, 0, $46, $4C
00018F9F 0005 002E 54               		dc.b 0,	5, 0, $2E, $54
00018FA4 0005 003A 64               		dc.b 0,	5, 0, $3A, $64
00018FA9 0001 0046 74               		dc.b 0,	1, 0, $46, $74
00018FAE 2005 0012 F8               		dc.b $20, 5, 0,	$12, $F8
00018FB3 2005 0004 08               		dc.b $20, 5, 0,	4, 8
00018FB8 2005 0012 18               		dc.b $20, 5, 0,	$12, $18
00018FBD 2005 0004 28               		dc.b $20, 5, 0,	4, $28
00018FC2 0F                         byte_17634:	dc.b $F			 ; PRESENTED BY	SEGA
00018FC3 F805 0012 80               		dc.b $F8, 5, 0,	$12, $80
00018FC8 F805 0022 90               		dc.b $F8, 5, 0,	$22, $90
00018FCD F805 000E A0               		dc.b $F8, 5, 0,	$E, $A0
00018FD2 F805 002E B0               		dc.b $F8, 5, 0,	$2E, $B0
00018FD7 F805 000E C0               		dc.b $F8, 5, 0,	$E, $C0
00018FDC F805 001A D0               		dc.b $F8, 5, 0,	$1A, $D0
00018FE1 F805 003E E0               		dc.b $F8, 5, 0,	$3E, $E0
00018FE6 F805 000E F0               		dc.b $F8, 5, 0,	$E, $F0
00018FEB F805 0042 00               		dc.b $F8, 5, 0,	$42, 0
00018FF0 F805 0048 18               		dc.b $F8, 5, 0,	$48, $18
00018FF5 F805 002A 28               		dc.b $F8, 5, 0,	$2A, $28
00018FFA F805 002E 40               		dc.b $F8, 5, 0,	$2E, $40
00018FFF F805 000E 50               		dc.b $F8, 5, 0,	$E, $50
00019004 F805 0000 60               		dc.b $F8, 5, 0,	0, $60
00019009 F805 0004 70               		dc.b $F8, 5, 0,	4, $70
0001900E 08                         byte_17680:	dc.b 8			 ; TRY AGAIN
0001900F 3005 003E C0               		dc.b $30, 5, 0,	$3E, $C0
00019014 3005 0022 D0               		dc.b $30, 5, 0,	$22, $D0
00019019 3005 002A E0               		dc.b $30, 5, 0,	$2A, $E0
0001901E 3005 0004 F8               		dc.b $30, 5, 0,	4, $F8
00019023 3005 0000 08               		dc.b $30, 5, 0,	0, 8
00019028 3005 0004 18               		dc.b $30, 5, 0,	4, $18
0001902D 3001 0046 28               		dc.b $30, 1, 0,	$46, $28
00019032 3005 001A 30               		dc.b $30, 5, 0,	$1A, $30
00019037 11                         byte_176A9:	dc.b $11		 ; SONIC TEAM PRESENTS
00019038 E805 002E B4               		dc.b $E8, 5, 0,	$2E, $B4
0001903D E805 0026 C4               		dc.b $E8, 5, 0,	$26, $C4
00019042 E805 001A D4               		dc.b $E8, 5, 0,	$1A, $D4
00019047 E801 0046 E4               		dc.b $E8, 1, 0,	$46, $E4
0001904C E805 001E EC               		dc.b $E8, 5, 0,	$1E, $EC
00019051 E805 003E 04               		dc.b $E8, 5, 0,	$3E, 4
00019056 E805 000E 14               		dc.b $E8, 5, 0,	$E, $14
0001905B E805 0004 24               		dc.b $E8, 5, 0,	4, $24
00019060 E809 0008 34               		dc.b $E8, 9, 0,	8, $34
00019065 0005 0012 C0               		dc.b 0,	5, 0, $12, $C0
0001906A 0005 0022 D0               		dc.b 0,	5, 0, $22, $D0
0001906F 0005 000E E0               		dc.b 0,	5, 0, $E, $E0
00019074 0005 002E F0               		dc.b 0,	5, 0, $2E, $F0
00019079 0005 000E 00               		dc.b 0,	5, 0, $E, 0
0001907E 0005 001A 10               		dc.b 0,	5, 0, $1A, $10
00019083 0005 003E 20               		dc.b 0,	5, 0, $3E, $20
00019088 0005 002E 30               		dc.b 0,	5, 0, $2E, $30
0001908E 00                         		even
0001908E 00                         		even
0001908E                            
0001908E                            ; ===========================================================================
0001908E                            ; ---------------------------------------------------------------------------
0001908E                            ; Object 3D - Eggman (GHZ)
0001908E                            ; ---------------------------------------------------------------------------
0001908E                            
0001908E                            Obj3D:					; XREF: Obj_Index
0001908E 7000                       		moveq	#0,d0
00019090 1028 0024                  		move.b	$24(a0),d0
00019094 323B 0000                  		move.w	Obj3D_Index(pc,d0.w),d1
00019098 4EFB 1000                  		jmp	Obj3D_Index(pc,d1.w)
0001909C                            ; ===========================================================================
0001909C 0000                       Obj3D_Index:	dc.w Obj3D_Main-Obj3D_Index
0001909E 0000                       		dc.w Obj3D_ShipMain-Obj3D_Index
000190A0 0000                       		dc.w Obj3D_FaceMain-Obj3D_Index
000190A2 0000                       		dc.w Obj3D_FlameMain-Obj3D_Index
000190A4                            
000190A4 0200                       Obj3D_ObjData:	dc.b 2,	0		; routine counter, animation
000190A6 0401                       		dc.b 4,	1
000190A8 0607                       		dc.b 6,	7
000190AA                            ; ===========================================================================
000190AA                            
000190AA                            Obj3D_Main:				; XREF: Obj3D_Index
000190AA 45F9 0001 90A4             		lea	(Obj3D_ObjData).l,a2
000190B0 2248                       		movea.l	a0,a1
000190B2 7202                       		moveq	#2,d1
000190B4 6000                       		bra.s	Obj3D_LoadBoss
000190B6                            ; ===========================================================================
000190B6                            
000190B6                            Obj3D_Loop:
000190B6 4EB9 0000 E582             		jsr	SingleObjLoad2
000190BC 6600                       		bne.s	loc_17772
000190BE                            
000190BE                            Obj3D_LoadBoss:				; XREF: Obj3D_Main
000190BE 135A 0024                  		move.b	(a2)+,$24(a1)
000190C2 12BC 003D                  		move.b	#$3D,0(a1)
000190C6 3368 0008 0008             		move.w	8(a0),8(a1)
000190CC 3368 000C 000C             		move.w	$C(a0),$C(a1)
000190D2 237C 0000 0000 0004        		move.l	#Map_Eggman,4(a1)
000190DA 337C 0400 0002             		move.w	#$400,2(a1)
000190E0 137C 0004 0001             		move.b	#4,1(a1)
000190E6 137C 0020 0019             		move.b	#$20,$19(a1)
000190EC 137C 0003 0018             		move.b	#3,$18(a1)
000190F2 135A 001C                  		move.b	(a2)+,$1C(a1)
000190F6 2348 0034                  		move.l	a0,$34(a1)
000190FA 51C9 FFBA                  		dbf	d1,Obj3D_Loop	; repeat sequence 2 more times
000190FE                            
000190FE                            loc_17772:
000190FE 3168 0008 0030             		move.w	8(a0),$30(a0)
00019104 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001910A 117C 000F 0020             		move.b	#$F,$20(a0)
00019110 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
00019116                            
00019116                            Obj3D_ShipMain:				; XREF: Obj3D_Index
00019116 7000                       		moveq	#0,d0
00019118 1028 0025                  		move.b	$25(a0),d0
0001911C 323B 0000                  		move.w	Obj3D_ShipIndex(pc,d0.w),d1
00019120 4EBB 1000                  		jsr	Obj3D_ShipIndex(pc,d1.w)
00019124 43F9 0000 0000             		lea	(Ani_Eggman).l,a1
0001912A 4EB9 0000 B1EE             		jsr	AnimateSprite
00019130 1028 0022                  		move.b	$22(a0),d0
00019134 0200 0003                  		andi.b	#3,d0
00019138 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001913E 8128 0001                  		or.b	d0,1(a0)
00019142 4EF9 0000 E0D6             		jmp	DisplaySprite
00019148                            ; ===========================================================================
00019148 0000                       Obj3D_ShipIndex:dc.w Obj3D_ShipStart-Obj3D_ShipIndex
0001914A 0000                       		dc.w Obj3D_MakeBall-Obj3D_ShipIndex
0001914C 0000                       		dc.w Obj3D_ShipMove-Obj3D_ShipIndex
0001914E 0000                       		dc.w loc_17954-Obj3D_ShipIndex
00019150 0000                       		dc.w loc_1797A-Obj3D_ShipIndex
00019152 0000                       		dc.w loc_179AC-Obj3D_ShipIndex
00019154 0000                       		dc.w loc_179F6-Obj3D_ShipIndex
00019156                            ; ===========================================================================
00019156                            
00019156                            Obj3D_ShipStart:			; XREF: Obj3D_ShipIndex
00019156 317C 0100 0012             		move.w	#$100,$12(a0)	; move ship down
0001915C 6100 0000                  		bsr.w	BossMove
00019160 0C68 0338 0038             		cmpi.w	#$338,$38(a0)
00019166 6600                       		bne.s	loc_177E6
00019168 317C 0000 0012             		move.w	#0,$12(a0)	; stop ship
0001916E 5428 0025                  		addq.b	#2,$25(a0)	; goto next routine
00019172                            
00019172                            loc_177E6:
00019172 1028 003F                  		move.b	$3F(a0),d0
00019176 4EB9 0000 33DA             		jsr	(CalcSine).l
0001917C EC40                       		asr.w	#6,d0
0001917E D068 0038                  		add.w	$38(a0),d0
00019182 3140 000C                  		move.w	d0,$C(a0)
00019186 3168 0030 0008             		move.w	$30(a0),8(a0)
0001918C 5428 003F                  		addq.b	#2,$3F(a0)
00019190 0C28 0008 0025             		cmpi.b	#8,$25(a0)
00019196 6400                       		bcc.s	locret_1784A
00019198 4A28 0022                  		tst.b	$22(a0)
0001919C 6B00                       		bmi.s	loc_1784C
0001919E 4A28 0020                  		tst.b	$20(a0)
000191A2 6600                       		bne.s	locret_1784A
000191A4 4A28 003E                  		tst.b	$3E(a0)
000191A8 6600                       		bne.s	Obj3D_ShipFlash
000191AA 117C 0020 003E             		move.b	#$20,$3E(a0)	; set number of	times for ship to flash
000191B0 303C 00AC                  		move.w	#$AC,d0
000191B4 4EB9 0000 147C             		jsr	(PlaySound_Special).l ;	play boss damage sound
000191BA                            
000191BA                            Obj3D_ShipFlash:
000191BA 43F8 FB22                  		lea	($FFFFFB22).w,a1 ; load	2nd pallet, 2nd	entry
000191BE 7000                       		moveq	#0,d0		; move 0 (black) to d0
000191C0 4A51                       		tst.w	(a1)
000191C2 6600                       		bne.s	loc_1783C
000191C4 303C 0EEE                  		move.w	#$EEE,d0	; move 0EEE (white) to d0
000191C8                            
000191C8                            loc_1783C:
000191C8 3280                       		move.w	d0,(a1)		; load colour stored in	d0
000191CA 5328 003E                  		subq.b	#1,$3E(a0)
000191CE 6600                       		bne.s	locret_1784A
000191D0 117C 000F 0020             		move.b	#$F,$20(a0)
000191D6                            
000191D6                            locret_1784A:
000191D6 4E75                       		rts	
000191D8                            ; ===========================================================================
000191D8                            
000191D8                            loc_1784C:				; XREF: loc_177E6
000191D8 7064                       		moveq	#100,d0
000191DA 6100 0000                  		bsr.w	AddPoints
000191DE 117C 0008 0025             		move.b	#8,$25(a0)
000191E4 317C 00B3 003C             		move.w	#$B3,$3C(a0)
000191EA 4E75                       		rts	
000191EC                            
000191EC                            ; ---------------------------------------------------------------------------
000191EC                            ; Defeated boss	subroutine
000191EC                            ; ---------------------------------------------------------------------------
000191EC                            
000191EC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000191EC                            
000191EC                            
000191EC                            BossDefeated:
000191EC 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
000191F0 0200 0007                  		andi.b	#7,d0
000191F4 6600                       		bne.s	locret_178A2
000191F6 4EB9 0000 E56C             		jsr	SingleObjLoad
000191FC 6600                       		bne.s	locret_178A2
000191FE 12BC 003F                  		move.b	#$3F,0(a1)	; load explosion object
00019202 3368 0008 0008             		move.w	8(a0),8(a1)
00019208 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001920E 4EB9 0000 33B4             		jsr	(RandomNumber).l
00019214 3200                       		move.w	d0,d1
00019216 7200                       		moveq	#0,d1
00019218 1200                       		move.b	d0,d1
0001921A E409                       		lsr.b	#2,d1
0001921C 0441 0020                  		subi.w	#$20,d1
00019220 D369 0008                  		add.w	d1,8(a1)
00019224 E048                       		lsr.w	#8,d0
00019226 E608                       		lsr.b	#3,d0
00019228 D169 000C                  		add.w	d0,$C(a1)
0001922C                            
0001922C                            locret_178A2:
0001922C 4E75                       		rts	
0001922E                            ; End of function BossDefeated
0001922E                            
0001922E                            ; ---------------------------------------------------------------------------
0001922E                            ; Subroutine to	move a boss
0001922E                            ; ---------------------------------------------------------------------------
0001922E                            
0001922E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001922E                            
0001922E                            
0001922E                            BossMove:
0001922E 2428 0030                  		move.l	$30(a0),d2
00019232 2628 0038                  		move.l	$38(a0),d3
00019236 3028 0010                  		move.w	$10(a0),d0
0001923A 48C0                       		ext.l	d0
0001923C E180                       		asl.l	#8,d0
0001923E D480                       		add.l	d0,d2
00019240 3028 0012                  		move.w	$12(a0),d0
00019244 48C0                       		ext.l	d0
00019246 E180                       		asl.l	#8,d0
00019248 D680                       		add.l	d0,d3
0001924A 2142 0030                  		move.l	d2,$30(a0)
0001924E 2143 0038                  		move.l	d3,$38(a0)
00019252 4E75                       		rts	
00019254                            ; End of function BossMove
00019254                            
00019254                            ; ===========================================================================
00019254                            
00019254                            Obj3D_MakeBall:				; XREF: Obj3D_ShipIndex
00019254 317C FF00 0010             		move.w	#-$100,$10(a0)
0001925A 317C FFC0 0012             		move.w	#-$40,$12(a0)
00019260 6100 FFCC                  		bsr.w	BossMove
00019264 0C68 2A00 0030             		cmpi.w	#$2A00,$30(a0)
0001926A 6600                       		bne.s	loc_17916
0001926C 317C 0000 0010             		move.w	#0,$10(a0)
00019272 317C 0000 0012             		move.w	#0,$12(a0)
00019278 5428 0025                  		addq.b	#2,$25(a0)
0001927C 4EB9 0000 E582             		jsr	SingleObjLoad2
00019282 6600                       		bne.s	loc_17910
00019284 12BC 0048                  		move.b	#$48,0(a1)	; load swinging	ball object
00019288 3368 0030 0008             		move.w	$30(a0),8(a1)
0001928E 3368 0038 000C             		move.w	$38(a0),$C(a1)
00019294 2348 0034                  		move.l	a0,$34(a1)
00019298                            
00019298                            loc_17910:
00019298 317C 0077 003C             		move.w	#$77,$3C(a0)
0001929E                            
0001929E                            loc_17916:
0001929E 6000 FED2                  		bra.w	loc_177E6
000192A2                            ; ===========================================================================
000192A2                            
000192A2                            Obj3D_ShipMove:				; XREF: Obj3D_ShipIndex
000192A2 5368 003C                  		subq.w	#1,$3C(a0)
000192A6 6A00                       		bpl.s	Obj3D_Reverse
000192A8 5428 0025                  		addq.b	#2,$25(a0)
000192AC 317C 003F 003C             		move.w	#$3F,$3C(a0)
000192B2 317C 0100 0010             		move.w	#$100,$10(a0)	; move the ship	sideways
000192B8 0C68 2A00 0030             		cmpi.w	#$2A00,$30(a0)
000192BE 6600                       		bne.s	Obj3D_Reverse
000192C0 317C 007F 003C             		move.w	#$7F,$3C(a0)
000192C6 317C 0040 0010             		move.w	#$40,$10(a0)
000192CC                            
000192CC                            Obj3D_Reverse:
000192CC 0828 0000 0022             		btst	#0,$22(a0)
000192D2 6600                       		bne.s	loc_17950
000192D4 4468 0010                  		neg.w	$10(a0)		; reverse direction of the ship
000192D8                            
000192D8                            loc_17950:
000192D8 6000 FE98                  		bra.w	loc_177E6
000192DC                            ; ===========================================================================
000192DC                            
000192DC                            loc_17954:				; XREF: Obj3D_ShipIndex
000192DC 5368 003C                  		subq.w	#1,$3C(a0)
000192E0 6B00                       		bmi.s	loc_17960
000192E2 6100 FF4A                  		bsr.w	BossMove
000192E6 6000                       		bra.s	loc_17976
000192E8                            ; ===========================================================================
000192E8                            
000192E8                            loc_17960:
000192E8 0868 0000 0022             		bchg	#0,$22(a0)
000192EE 317C 003F 003C             		move.w	#$3F,$3C(a0)
000192F4 5528 0025                  		subq.b	#2,$25(a0)
000192F8 317C 0000 0010             		move.w	#0,$10(a0)
000192FE                            
000192FE                            loc_17976:
000192FE 6000 FE72                  		bra.w	loc_177E6
00019302                            ; ===========================================================================
00019302                            
00019302                            loc_1797A:				; XREF: Obj3D_ShipIndex
00019302 5368 003C                  		subq.w	#1,$3C(a0)
00019306 6B00                       		bmi.s	loc_17984
00019308 6000 FEE2                  		bra.w	BossDefeated
0001930C                            ; ===========================================================================
0001930C                            
0001930C                            loc_17984:
0001930C 08E8 0000 0022             		bset	#0,$22(a0)
00019312 08A8 0007 0022             		bclr	#7,$22(a0)
00019318 4268 0010                  		clr.w	$10(a0)
0001931C 5428 0025                  		addq.b	#2,$25(a0)
00019320 317C FFDA 003C             		move.w	#-$26,$3C(a0)
00019326 4A38 F7A7                  		tst.b	($FFFFF7A7).w
0001932A 6600                       		bne.s	locret_179AA
0001932C 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
00019332                            
00019332                            locret_179AA:
00019332 4E75                       		rts	
00019334                            ; ===========================================================================
00019334                            
00019334                            loc_179AC:				; XREF: Obj3D_ShipIndex
00019334 5268 003C                  		addq.w	#1,$3C(a0)
00019338 6700                       		beq.s	loc_179BC
0001933A 6A00                       		bpl.s	loc_179C2
0001933C 0668 0018 0012             		addi.w	#$18,$12(a0)
00019342 6000                       		bra.s	loc_179EE
00019344                            ; ===========================================================================
00019344                            
00019344                            loc_179BC:
00019344 4268 0012                  		clr.w	$12(a0)
00019348 6000                       		bra.s	loc_179EE
0001934A                            ; ===========================================================================
0001934A                            
0001934A                            loc_179C2:
0001934A 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
00019350 6500                       		bcs.s	loc_179DA
00019352 6700                       		beq.s	loc_179E0
00019354 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
0001935A 6500                       		bcs.s	loc_179EE
0001935C 5428 0025                  		addq.b	#2,$25(a0)
00019360 6000                       		bra.s	loc_179EE
00019362                            ; ===========================================================================
00019362                            
00019362                            loc_179DA:
00019362 5168 0012                  		subq.w	#8,$12(a0)
00019366 6000                       		bra.s	loc_179EE
00019368                            ; ===========================================================================
00019368                            
00019368                            loc_179E0:
00019368 4268 0012                  		clr.w	$12(a0)
0001936C 303C 0081                  		move.w	#$81,d0
00019370 4EB9 0000 1476             		jsr	(PlaySound).l	; play GHZ music
00019376                            
00019376                            loc_179EE:
00019376 6100 FEB6                  		bsr.w	BossMove
0001937A 6000 FDF6                  		bra.w	loc_177E6
0001937E                            ; ===========================================================================
0001937E                            
0001937E                            loc_179F6:				; XREF: Obj3D_ShipIndex
0001937E 317C 0400 0010             		move.w	#$400,$10(a0)
00019384 317C FFC0 0012             		move.w	#-$40,$12(a0)
0001938A 0C78 2AC0 F72A             		cmpi.w	#$2AC0,($FFFFF72A).w
00019390 6700                       		beq.s	loc_17A10
00019392 5478 F72A                  		addq.w	#2,($FFFFF72A).w
00019396 6000                       		bra.s	loc_17A16
00019398                            ; ===========================================================================
00019398                            
00019398                            loc_17A10:
00019398 4A28 0001                  		tst.b	1(a0)
0001939C 6A00                       		bpl.s	Obj3D_ShipDel
0001939E                            
0001939E                            loc_17A16:
0001939E 6100 FE8E                  		bsr.w	BossMove
000193A2 6000 FDCE                  		bra.w	loc_177E6
000193A6                            ; ===========================================================================
000193A6                            
000193A6                            Obj3D_ShipDel:
000193A6 4EF9 0000 E112             		jmp	DeleteObject
000193AC                            ; ===========================================================================
000193AC                            
000193AC                            Obj3D_FaceMain:				; XREF: Obj3D_Index
000193AC 7000                       		moveq	#0,d0
000193AE 7201                       		moveq	#1,d1
000193B0 2268 0034                  		movea.l	$34(a0),a1
000193B4 1029 0025                  		move.b	$25(a1),d0
000193B8 5900                       		subq.b	#4,d0
000193BA 6600                       		bne.s	loc_17A3E
000193BC 0C69 2A00 0030             		cmpi.w	#$2A00,$30(a1)
000193C2 6600                       		bne.s	loc_17A46
000193C4 7204                       		moveq	#4,d1
000193C6                            
000193C6                            loc_17A3E:
000193C6 5D00                       		subq.b	#6,d0
000193C8 6B00                       		bmi.s	loc_17A46
000193CA 720A                       		moveq	#$A,d1
000193CC 6000                       		bra.s	loc_17A5A
000193CE                            ; ===========================================================================
000193CE                            
000193CE                            loc_17A46:
000193CE 4A29 0020                  		tst.b	$20(a1)
000193D2 6600                       		bne.s	loc_17A50
000193D4 7205                       		moveq	#5,d1
000193D6 6000                       		bra.s	loc_17A5A
000193D8                            ; ===========================================================================
000193D8                            
000193D8                            loc_17A50:
000193D8 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
000193DE 6500                       		bcs.s	loc_17A5A
000193E0 7204                       		moveq	#4,d1
000193E2                            
000193E2                            loc_17A5A:
000193E2 1141 001C                  		move.b	d1,$1C(a0)
000193E6 5500                       		subq.b	#2,d0
000193E8 6600                       		bne.s	Obj3D_FaceDisp
000193EA 117C 0006 001C             		move.b	#6,$1C(a0)
000193F0 4A28 0001                  		tst.b	1(a0)
000193F4 6A00                       		bpl.s	Obj3D_FaceDel
000193F6                            
000193F6                            Obj3D_FaceDisp:
000193F6 6000                       		bra.s	Obj3D_Display
000193F8                            ; ===========================================================================
000193F8                            
000193F8                            Obj3D_FaceDel:
000193F8 4EF9 0000 E112             		jmp	DeleteObject
000193FE                            ; ===========================================================================
000193FE                            
000193FE                            Obj3D_FlameMain:			; XREF: Obj3D_Index
000193FE 117C 0007 001C             		move.b	#7,$1C(a0)
00019404 2268 0034                  		movea.l	$34(a0),a1
00019408 0C29 000C 0025             		cmpi.b	#$C,$25(a1)
0001940E 6600                       		bne.s	loc_17A96
00019410 117C 000B 001C             		move.b	#$B,$1C(a0)
00019416 4A28 0001                  		tst.b	1(a0)
0001941A 6A00                       		bpl.s	Obj3D_FlameDel
0001941C 6000                       		bra.s	Obj3D_FlameDisp
0001941E                            ; ===========================================================================
0001941E                            
0001941E                            loc_17A96:
0001941E 3029 0010                  		move.w	$10(a1),d0
00019422 6700                       		beq.s	Obj3D_FlameDisp
00019424 117C 0008 001C             		move.b	#8,$1C(a0)
0001942A                            
0001942A                            Obj3D_FlameDisp:
0001942A 6000                       		bra.s	Obj3D_Display
0001942C                            ; ===========================================================================
0001942C                            
0001942C                            Obj3D_FlameDel:
0001942C 4EF9 0000 E112             		jmp	DeleteObject
00019432                            ; ===========================================================================
00019432                            
00019432                            Obj3D_Display:				; XREF: Obj3D_FaceDisp; Obj3D_FlameDisp
00019432 2268 0034                  		movea.l	$34(a0),a1
00019436 3169 0008 0008             		move.w	8(a1),8(a0)
0001943C 3169 000C 000C             		move.w	$C(a1),$C(a0)
00019442 1169 0022 0022             		move.b	$22(a1),$22(a0)
00019448 43F9 0000 0000             		lea	(Ani_Eggman).l,a1
0001944E 4EB9 0000 B1EE             		jsr	AnimateSprite
00019454 1028 0022                  		move.b	$22(a0),d0
00019458 0200 0003                  		andi.b	#3,d0
0001945C 0228 00FC 0001             		andi.b	#$FC,1(a0)
00019462 8128 0001                  		or.b	d0,1(a0)
00019466 4EF9 0000 E0D6             		jmp	DisplaySprite
0001946C                            ; ===========================================================================
0001946C                            ; ---------------------------------------------------------------------------
0001946C                            ; Object 48 - ball on a	chain that Eggman swings (GHZ)
0001946C                            ; ---------------------------------------------------------------------------
0001946C                            
0001946C                            Obj48:					; XREF: Obj_Index
0001946C 7000                       		moveq	#0,d0
0001946E 1028 0024                  		move.b	$24(a0),d0
00019472 323B 0000                  		move.w	Obj48_Index(pc,d0.w),d1
00019476 4EFB 1000                  		jmp	Obj48_Index(pc,d1.w)
0001947A                            ; ===========================================================================
0001947A 0000                       Obj48_Index:	dc.w Obj48_Main-Obj48_Index
0001947C 0000                       		dc.w Obj48_Base-Obj48_Index
0001947E 0000                       		dc.w Obj48_Display2-Obj48_Index
00019480 0000                       		dc.w loc_17C68-Obj48_Index
00019482 0000                       		dc.w Obj48_ChkVanish-Obj48_Index
00019484                            ; ===========================================================================
00019484                            
00019484                            Obj48_Main:				; XREF: Obj48_Index
00019484 5428 0024                  		addq.b	#2,$24(a0)
00019488 317C 4080 0026             		move.w	#$4080,$26(a0)
0001948E 317C FE00 003E             		move.w	#-$200,$3E(a0)
00019494 217C 0000 0000 0004        		move.l	#Map_BossItems,4(a0)
0001949C 317C 046C 0002             		move.w	#$46C,2(a0)
000194A2 45E8 0028                  		lea	$28(a0),a2
000194A6 14FC 0000                  		move.b	#0,(a2)+
000194AA 7205                       		moveq	#5,d1
000194AC 2248                       		movea.l	a0,a1
000194AE 6000                       		bra.s	loc_17B60
000194B0                            ; ===========================================================================
000194B0                            
000194B0                            Obj48_MakeLinks:
000194B0 4EB9 0000 E582             		jsr	SingleObjLoad2
000194B6 6600                       		bne.s	Obj48_MakeBall
000194B8 3368 0008 0008             		move.w	8(a0),8(a1)
000194BE 3368 000C 000C             		move.w	$C(a0),$C(a1)
000194C4 12BC 0048                  		move.b	#$48,0(a1)	; load chain link object
000194C8 137C 0006 0024             		move.b	#6,$24(a1)
000194CE 237C 0000 86C6 0004        		move.l	#Map_obj15,4(a1)
000194D6 337C 0380 0002             		move.w	#$380,2(a1)
000194DC 137C 0001 001A             		move.b	#1,$1A(a1)
000194E2 5228 0028                  		addq.b	#1,$28(a0)
000194E6                            
000194E6                            loc_17B60:				; XREF: Obj48_Main
000194E6 3A09                       		move.w	a1,d5
000194E8 0445 D000                  		subi.w	#$D000,d5
000194EC EC4D                       		lsr.w	#6,d5
000194EE 0245 007F                  		andi.w	#$7F,d5
000194F2 14C5                       		move.b	d5,(a2)+
000194F4 137C 0004 0001             		move.b	#4,1(a1)
000194FA 137C 0008 0019             		move.b	#8,$19(a1)
00019500 137C 0006 0018             		move.b	#6,$18(a1)
00019506 2368 0034 0034             		move.l	$34(a0),$34(a1)
0001950C 51C9 FFA2                  		dbf	d1,Obj48_MakeLinks ; repeat sequence 5 more times
00019510                            
00019510                            Obj48_MakeBall:
00019510 137C 0008 0024             		move.b	#8,$24(a1)
00019516 237C 0000 8C24 0004        		move.l	#Map_obj48,4(a1) ; load	different mappings for final link
0001951E 337C 43AA 0002             		move.w	#$43AA,2(a1)	; use different	graphics
00019524 137C 0001 001A             		move.b	#1,$1A(a1)
0001952A 137C 0005 0018             		move.b	#5,$18(a1)
00019530 137C 0081 0020             		move.b	#$81,$20(a1)	; make object hurt Sonic
00019536 4E75                       		rts	
00019538                            ; ===========================================================================
00019538                            
00019538 0010 2030 4060             Obj48_PosData:	dc.b 0,	$10, $20, $30, $40, $60	; y-position data for links and	giant ball
0001953E                            
0001953E                            ; ===========================================================================
0001953E                            
0001953E                            Obj48_Base:				; XREF: Obj48_Index
0001953E 47F9 0001 9538             		lea	(Obj48_PosData).l,a3
00019544 45E8 0028                  		lea	$28(a0),a2
00019548 7C00                       		moveq	#0,d6
0001954A 1C1A                       		move.b	(a2)+,d6
0001954C                            
0001954C                            loc_17BC6:
0001954C 7800                       		moveq	#0,d4
0001954E 181A                       		move.b	(a2)+,d4
00019550 ED4C                       		lsl.w	#6,d4
00019552 0684 00FF D000             		addi.l	#$FFD000,d4
00019558 2244                       		movea.l	d4,a1
0001955A 101B                       		move.b	(a3)+,d0
0001955C B029 003C                  		cmp.b	$3C(a1),d0
00019560 6700                       		beq.s	loc_17BE0
00019562 5229 003C                  		addq.b	#1,$3C(a1)
00019566                            
00019566                            loc_17BE0:
00019566 51CE FFE4                  		dbf	d6,loc_17BC6
0001956A                            
0001956A B029 003C                  		cmp.b	$3C(a1),d0
0001956E 6600                       		bne.s	loc_17BFA
00019570 2268 0034                  		movea.l	$34(a0),a1
00019574 0C29 0006 0025             		cmpi.b	#6,$25(a1)
0001957A 6600                       		bne.s	loc_17BFA
0001957C 5428 0024                  		addq.b	#2,$24(a0)
00019580                            
00019580                            loc_17BFA:
00019580 0C68 0020 0032             		cmpi.w	#$20,$32(a0)
00019586 6700                       		beq.s	Obj48_Display
00019588 5268 0032                  		addq.w	#1,$32(a0)
0001958C                            
0001958C                            Obj48_Display:
0001958C 6100 0000                  		bsr.w	sub_17C2A
00019590 1028 0026                  		move.b	$26(a0),d0
00019594 4EB9 0000 8638             		jsr	(Obj15_Move2).l
0001959A 4EF9 0000 E0D6             		jmp	DisplaySprite
000195A0                            ; ===========================================================================
000195A0                            
000195A0                            Obj48_Display2:				; XREF: Obj48_Index
000195A0 6100 0000                  		bsr.w	sub_17C2A
000195A4 4EB9 0000 85F8             		jsr	(Obj48_Move).l
000195AA 4EF9 0000 E0D6             		jmp	DisplaySprite
000195B0                            
000195B0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000195B0                            
000195B0                            
000195B0                            sub_17C2A:				; XREF: Obj48_Display; Obj48_Display2
000195B0 2268 0034                  		movea.l	$34(a0),a1
000195B4 0628 0020 001B             		addi.b	#$20,$1B(a0)
000195BA 6400                       		bcc.s	loc_17C3C
000195BC 0868 0000 001A             		bchg	#0,$1A(a0)
000195C2                            
000195C2                            loc_17C3C:
000195C2 3169 0008 003A             		move.w	8(a1),$3A(a0)
000195C8 3029 000C                  		move.w	$C(a1),d0
000195CC D068 0032                  		add.w	$32(a0),d0
000195D0 3140 0038                  		move.w	d0,$38(a0)
000195D4 1169 0022 0022             		move.b	$22(a1),$22(a0)
000195DA 4A29 0022                  		tst.b	$22(a1)
000195DE 6A00                       		bpl.s	locret_17C66
000195E0 10BC 003F                  		move.b	#$3F,0(a0)
000195E4 117C 0000 0024             		move.b	#0,$24(a0)
000195EA                            
000195EA                            locret_17C66:
000195EA 4E75                       		rts	
000195EC                            ; End of function sub_17C2A
000195EC                            
000195EC                            ; ===========================================================================
000195EC                            
000195EC                            loc_17C68:				; XREF: Obj48_Index
000195EC 2268 0034                  		movea.l	$34(a0),a1
000195F0 4A29 0022                  		tst.b	$22(a1)
000195F4 6A00                       		bpl.s	Obj48_Display3
000195F6 10BC 003F                  		move.b	#$3F,0(a0)
000195FA 117C 0000 0024             		move.b	#0,$24(a0)
00019600                            
00019600                            Obj48_Display3:
00019600 4EF9 0000 E0D6             		jmp	DisplaySprite
00019606                            ; ===========================================================================
00019606                            
00019606                            Obj48_ChkVanish:			; XREF: Obj48_Index
00019606 7000                       		moveq	#0,d0
00019608 4A28 001A                  		tst.b	$1A(a0)
0001960C 6600                       		bne.s	Obj48_Vanish
0001960E 5200                       		addq.b	#1,d0
00019610                            
00019610                            Obj48_Vanish:
00019610 1140 001A                  		move.b	d0,$1A(a0)
00019614 2268 0034                  		movea.l	$34(a0),a1
00019618 4A29 0022                  		tst.b	$22(a1)
0001961C 6A00                       		bpl.s	Obj48_Display4
0001961E 117C 0000 0020             		move.b	#0,$20(a0)
00019624 6100 FBC6                  		bsr.w	BossDefeated
00019628 5328 003C                  		subq.b	#1,$3C(a0)
0001962C 6A00                       		bpl.s	Obj48_Display4
0001962E 10BC 003F                  		move.b	#$3F,(a0)
00019632 117C 0000 0024             		move.b	#0,$24(a0)
00019638                            
00019638                            Obj48_Display4:
00019638 4EF9 0000 E0D6             		jmp	DisplaySprite
0001963E                            ; ===========================================================================
0001963E                            Ani_Eggman:
0001963E                            	include "_anim\Eggman.asm"
0001963E                            ; ---------------------------------------------------------------------------
0001963E                            ; Animation script - Eggman (bosses)
0001963E                            ; ---------------------------------------------------------------------------
0001963E 0000                       		dc.w byte_17CD4-Ani_Eggman
00019640 0000                       		dc.w byte_17CD8-Ani_Eggman
00019642 0000                       		dc.w byte_17CDC-Ani_Eggman
00019644 0000                       		dc.w byte_17CE0-Ani_Eggman
00019646 0000                       		dc.w byte_17CE4-Ani_Eggman
00019648 0000                       		dc.w byte_17CE8-Ani_Eggman
0001964A 0000                       		dc.w byte_17CEC-Ani_Eggman
0001964C 0000                       		dc.w byte_17CF0-Ani_Eggman
0001964E 0000                       		dc.w byte_17CF4-Ani_Eggman
00019650 0000                       		dc.w byte_17CF8-Ani_Eggman
00019652 0000                       		dc.w byte_17CFC-Ani_Eggman
00019654 0000                       		dc.w byte_17D00-Ani_Eggman
00019656 0F00 FF00                  byte_17CD4:	dc.b $F, 0, $FF, 0
0001965A 0501 02FF                  byte_17CD8:	dc.b 5,	1, 2, $FF
0001965E 0301 02FF                  byte_17CDC:	dc.b 3,	1, 2, $FF
00019662 0101 02FF                  byte_17CE0:	dc.b 1,	1, 2, $FF
00019666 0403 04FF                  byte_17CE4:	dc.b 4,	3, 4, $FF
0001966A 1F05 01FF                  byte_17CE8:	dc.b $1F, 5, 1,	$FF
0001966E 0306 01FF                  byte_17CEC:	dc.b 3,	6, 1, $FF
00019672 0F0A FF00                  byte_17CF0:	dc.b $F, $A, $FF, 0
00019676 0308 09FF                  byte_17CF4:	dc.b 3,	8, 9, $FF
0001967A 0108 09FF                  byte_17CF8:	dc.b 1,	8, 9, $FF
0001967E 0F07 FF00                  byte_17CFC:	dc.b $F, 7, $FF, 0
00019682 0209 080B 0C0B 0C09 08FE+  byte_17D00:	dc.b 2,	9, 8, $B, $C, $B, $C, 9, 8, $FE, 2, 0
0001968E                            		even
0001968E                            		even
0001968E                            
0001968E                            ; ---------------------------------------------------------------------------
0001968E                            ; Sprite mappings - Eggman (boss levels)
0001968E                            ; ---------------------------------------------------------------------------
0001968E                            Map_Eggman:
0001968E                            	include "_maps\Eggman.asm"
0001968E                            ; ---------------------------------------------------------------------------
0001968E                            ; Sprite mappings - Eggman (boss levels)
0001968E                            ; ---------------------------------------------------------------------------
0001968E 0000 0000                  		dc.w byte_17D26-Map_Eggman, byte_17D45-Map_Eggman
00019692 0000 0000                  		dc.w byte_17D50-Map_Eggman, byte_17D5B-Map_Eggman
00019696 0000 0000                  		dc.w byte_17D6B-Map_Eggman, byte_17D7B-Map_Eggman
0001969A 0000 0000                  		dc.w byte_17D8B-Map_Eggman, byte_17D9B-Map_Eggman
0001969E 0000 0000                  		dc.w byte_17DB0-Map_Eggman, byte_17DB6-Map_Eggman
000196A2 0000 0000                  		dc.w byte_17DBC-Map_Eggman, byte_17DBD-Map_Eggman
000196A6 0000                       		dc.w byte_17DC8-Map_Eggman
000196A8 06                         byte_17D26:	dc.b 6
000196A9 EC01 000A E4               		dc.b $EC, 1, 0,	$A, $E4
000196AE EC05 000C 0C               		dc.b $EC, 5, 0,	$C, $C
000196B3 FC0E 2010 E4               		dc.b $FC, $E, $20, $10,	$E4
000196B8 FC0E 201C 04               		dc.b $FC, $E, $20, $1C,	4
000196BD 140C 2028 EC               		dc.b $14, $C, $20, $28,	$EC
000196C2 1400 202C 0C               		dc.b $14, 0, $20, $2C, $C
000196C7 02                         byte_17D45:	dc.b 2
000196C8 E404 0000 F4               		dc.b $E4, 4, 0,	0, $F4
000196CD EC0D 0002 EC               		dc.b $EC, $D, 0, 2, $EC
000196D2 02                         byte_17D50:	dc.b 2
000196D3 E404 0000 F4               		dc.b $E4, 4, 0,	0, $F4
000196D8 EC0D 0035 EC               		dc.b $EC, $D, 0, $35, $EC
000196DD 03                         byte_17D5B:	dc.b 3
000196DE E408 003D F4               		dc.b $E4, 8, 0,	$3D, $F4
000196E3 EC09 0040 EC               		dc.b $EC, 9, 0,	$40, $EC
000196E8 EC05 0046 04               		dc.b $EC, 5, 0,	$46, 4
000196ED 03                         byte_17D6B:	dc.b 3
000196EE E408 004A F4               		dc.b $E4, 8, 0,	$4A, $F4
000196F3 EC09 004D EC               		dc.b $EC, 9, 0,	$4D, $EC
000196F8 EC05 0053 04               		dc.b $EC, 5, 0,	$53, 4
000196FD 03                         byte_17D7B:	dc.b 3
000196FE E408 0057 F4               		dc.b $E4, 8, 0,	$57, $F4
00019703 EC09 005A EC               		dc.b $EC, 9, 0,	$5A, $EC
00019708 EC05 0060 04               		dc.b $EC, 5, 0,	$60, 4
0001970D 03                         byte_17D8B:	dc.b 3
0001970E E404 0064 04               		dc.b $E4, 4, 0,	$64, 4
00019713 E404 0000 F4               		dc.b $E4, 4, 0,	0, $F4
00019718 EC0D 0035 EC               		dc.b $EC, $D, 0, $35, $EC
0001971D 04                         byte_17D9B:	dc.b 4
0001971E E409 0066 F4               		dc.b $E4, 9, 0,	$66, $F4
00019723 E408 0057 F4               		dc.b $E4, 8, 0,	$57, $F4
00019728 EC09 005A EC               		dc.b $EC, 9, 0,	$5A, $EC
0001972D EC05 0060 04               		dc.b $EC, 5, 0,	$60, 4
00019732 01                         byte_17DB0:	dc.b 1
00019733 0405 002D 22               		dc.b 4,	5, 0, $2D, $22
00019738 01                         byte_17DB6:	dc.b 1
00019739 0405 0031 22               		dc.b 4,	5, 0, $31, $22
0001973E 00                         byte_17DBC:	dc.b 0
0001973F 02                         byte_17DBD:	dc.b 2
00019740 0008 012A 22               		dc.b 0,	8, 1, $2A, $22
00019745 0808 112A 22               		dc.b 8,	8, $11,	$2A, $22
0001974A 02                         byte_17DC8:	dc.b 2
0001974B F80B 012D 22               		dc.b $F8, $B, 1, $2D, $22
00019750 0001 0139 3A               		dc.b 0,	1, 1, $39, $3A
00019756 00                         		even
00019756 00                         		even
00019756                            
00019756                            ; ---------------------------------------------------------------------------
00019756                            ; Sprite mappings - extra boss items (e.g. swinging ball on a chain in GHZ)
00019756                            ; ---------------------------------------------------------------------------
00019756                            Map_BossItems:
00019756                            	include "_maps\Boss items.asm"
00019756                            ; ---------------------------------------------------------------------------
00019756                            ; Sprite mappings - extra boss items (e.g. swinging ball on a chain in GHZ)
00019756                            ; ---------------------------------------------------------------------------
00019756 0000 0000                  		dc.w byte_17DE4-Map_BossItems, byte_17DEA-Map_BossItems
0001975A 0000 0000                  		dc.w byte_17DF6-Map_BossItems, byte_17DFC-Map_BossItems
0001975E 0000 0000                  		dc.w byte_17E02-Map_BossItems, byte_17E08-Map_BossItems
00019762 0000 0000                  		dc.w byte_17E1E-Map_BossItems, byte_17E2A-Map_BossItems
00019766 01                         byte_17DE4:	dc.b 1
00019767 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0001976C 02                         byte_17DEA:	dc.b 2
0001976D FC04 0004 F8               		dc.b $FC, 4, 0,	4, $F8
00019772 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00019777 00                         		dc.b 0
00019778 01                         byte_17DF6:	dc.b 1
00019779 FC00 0006 FC               		dc.b $FC, 0, 0,	6, $FC
0001977E 01                         byte_17DFC:	dc.b 1
0001977F 1409 0007 F4               		dc.b $14, 9, 0,	7, $F4
00019784 01                         byte_17E02:	dc.b 1
00019785 1405 000D F8               		dc.b $14, 5, 0,	$D, $F8
0001978A 04                         byte_17E08:	dc.b 4
0001978B F004 0011 F8               		dc.b $F0, 4, 0,	$11, $F8
00019790 F801 0013 F8               		dc.b $F8, 1, 0,	$13, $F8
00019795 F801 0813 00               		dc.b $F8, 1, 8,	$13, 0
0001979A 0804 0015 F8               		dc.b 8,	4, 0, $15, $F8
0001979F 00                         		dc.b 0
000197A0 02                         byte_17E1E:	dc.b 2
000197A1 0005 0017 00               		dc.b 0,	5, 0, $17, 0
000197A6 0000 001B 10               		dc.b 0,	0, 0, $1B, $10
000197AB 00                         		dc.b 0
000197AC 02                         byte_17E2A:	dc.b 2
000197AD 1804 001C 00               		dc.b $18, 4, 0,	$1C, 0
000197B2 000B 001E 10               		dc.b 0,	$B, 0, $1E, $10
000197B8 00                         		even
000197B8 00                         		even
000197B8                            
000197B8                            ; ===========================================================================
000197B8                            ; ---------------------------------------------------------------------------
000197B8                            ; Object 77 - Eggman (LZ)
000197B8                            ; ---------------------------------------------------------------------------
000197B8                            
000197B8                            Obj77:					; XREF: Obj_Index
000197B8 7000                       		moveq	#0,d0
000197BA 1028 0024                  		move.b	$24(a0),d0
000197BE 323B 0000                  		move.w	Obj77_Index(pc,d0.w),d1
000197C2 4EFB 1000                  		jmp	Obj77_Index(pc,d1.w)
000197C6                            ; ===========================================================================
000197C6 0000                       Obj77_Index:	dc.w Obj77_Main-Obj77_Index
000197C8 0000                       		dc.w Obj77_ShipMain-Obj77_Index
000197CA 0000                       		dc.w Obj77_FaceMain-Obj77_Index
000197CC 0000                       		dc.w Obj77_FlameMain-Obj77_Index
000197CE                            
000197CE 0200                       Obj77_ObjData:	dc.b 2,	0		; routine number, animation
000197D0 0401                       		dc.b 4,	1
000197D2 0607                       		dc.b 6,	7
000197D4                            ; ===========================================================================
000197D4                            
000197D4                            Obj77_Main:				; XREF: Obj77_Index
000197D4 317C 1E10 0008             		move.w	#$1E10,8(a0)
000197DA 317C 05C0 000C             		move.w	#$5C0,$C(a0)
000197E0 3168 0008 0030             		move.w	8(a0),$30(a0)
000197E6 3168 000C 0038             		move.w	$C(a0),$38(a0)
000197EC 117C 000F 0020             		move.b	#$F,$20(a0)
000197F2 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
000197F8 117C 0004 0018             		move.b	#4,$18(a0)
000197FE 45FA FFCE                  		lea	Obj77_ObjData(pc),a2
00019802 2248                       		movea.l	a0,a1
00019804 7202                       		moveq	#2,d1
00019806 6000                       		bra.s	Obj77_LoadBoss
00019808                            ; ===========================================================================
00019808                            
00019808                            Obj77_Loop:
00019808 4EB9 0000 E582             		jsr	SingleObjLoad2
0001980E 6600                       		bne.s	Obj77_ShipMain
00019810 12BC 0077                  		move.b	#$77,0(a1)
00019814 3368 0008 0008             		move.w	8(a0),8(a1)
0001981A 3368 000C 000C             		move.w	$C(a0),$C(a1)
00019820                            
00019820                            Obj77_LoadBoss:				; XREF: Obj77_Main
00019820 08A8 0000 0022             		bclr	#0,$22(a0)
00019826 4229 0025                  		clr.b	$25(a1)
0001982A 135A 0024                  		move.b	(a2)+,$24(a1)
0001982E 135A 001C                  		move.b	(a2)+,$1C(a1)
00019832 1368 0018 0018             		move.b	$18(a0),$18(a1)
00019838 237C 0001 968E 0004        		move.l	#Map_Eggman,4(a1)
00019840 337C 0400 0002             		move.w	#$400,2(a1)
00019846 137C 0004 0001             		move.b	#4,1(a1)
0001984C 137C 0020 0019             		move.b	#$20,$19(a1)
00019852 2348 0034                  		move.l	a0,$34(a1)
00019856 51C9 FFB0                  		dbf	d1,Obj77_Loop
0001985A                            
0001985A                            Obj77_ShipMain:
0001985A 43F8 D000                  		lea	($FFFFD000).w,a1
0001985E 7000                       		moveq	#0,d0
00019860 1028 0025                  		move.b	$25(a0),d0
00019864 323B 0000                  		move.w	Obj77_ShipIndex(pc,d0.w),d1
00019868 4EBB 1000                  		jsr	Obj77_ShipIndex(pc,d1.w)
0001986C 43F9 0001 963E             		lea	(Ani_Eggman).l,a1
00019872 4EB9 0000 B1EE             		jsr	AnimateSprite
00019878 7003                       		moveq	#3,d0
0001987A C028 0022                  		and.b	$22(a0),d0
0001987E 0228 00FC 0001             		andi.b	#$FC,1(a0)
00019884 8128 0001                  		or.b	d0,1(a0)
00019888 4EF9 0000 E0D6             		jmp	DisplaySprite
0001988E                            ; ===========================================================================
0001988E 0000 0000                  Obj77_ShipIndex:dc.w loc_17F1E-Obj77_ShipIndex,	loc_17FA0-Obj77_ShipIndex
00019892 0000 0000                  		dc.w loc_17FE0-Obj77_ShipIndex,	loc_1801E-Obj77_ShipIndex
00019896 0000 0000                  		dc.w loc_180BC-Obj77_ShipIndex,	loc_180F6-Obj77_ShipIndex
0001989A 0000 0000                  		dc.w loc_1812A-Obj77_ShipIndex,	loc_18152-Obj77_ShipIndex
0001989E                            ; ===========================================================================
0001989E                            
0001989E                            loc_17F1E:				; XREF: Obj77_ShipIndex
0001989E 3029 0008                  		move.w	8(a1),d0
000198A2 0C40 1DA0                  		cmpi.w	#$1DA0,d0
000198A6 6500                       		bcs.s	loc_17F38
000198A8 317C FE80 0012             		move.w	#-$180,$12(a0)
000198AE 317C 0060 0010             		move.w	#$60,$10(a0)
000198B4 5428 0025                  		addq.b	#2,$25(a0)
000198B8                            
000198B8                            loc_17F38:
000198B8 6100 F974                  		bsr.w	BossMove
000198BC 3168 0038 000C             		move.w	$38(a0),$C(a0)
000198C2 3168 0030 0008             		move.w	$30(a0),8(a0)
000198C8                            
000198C8                            loc_17F48:
000198C8 4A28 003D                  		tst.b	$3D(a0)
000198CC 6600                       		bne.s	loc_17F8E
000198CE 4A28 0022                  		tst.b	$22(a0)
000198D2 6B00                       		bmi.s	loc_17F92
000198D4 4A28 0020                  		tst.b	$20(a0)
000198D8 6600                       		bne.s	locret_17F8C
000198DA 4A28 003E                  		tst.b	$3E(a0)
000198DE 6600                       		bne.s	loc_17F70
000198E0 117C 0020 003E             		move.b	#$20,$3E(a0)
000198E6 303C 00AC                  		move.w	#$AC,d0
000198EA 4EB9 0000 147C             		jsr	(PlaySound_Special).l
000198F0                            
000198F0                            loc_17F70:
000198F0 43F8 FB22                  		lea	($FFFFFB22).w,a1
000198F4 7000                       		moveq	#0,d0
000198F6 4A51                       		tst.w	(a1)
000198F8 6600                       		bne.s	loc_17F7E
000198FA 303C 0EEE                  		move.w	#$EEE,d0
000198FE                            
000198FE                            loc_17F7E:
000198FE 3280                       		move.w	d0,(a1)
00019900 5328 003E                  		subq.b	#1,$3E(a0)
00019904 6600                       		bne.s	locret_17F8C
00019906 117C 000F 0020             		move.b	#$F,$20(a0)
0001990C                            
0001990C                            locret_17F8C:
0001990C 4E75                       		rts	
0001990E                            ; ===========================================================================
0001990E                            
0001990E                            loc_17F8E:				; XREF: loc_17F48
0001990E 6000 F8DC                  		bra.w	BossDefeated
00019912                            ; ===========================================================================
00019912                            
00019912                            loc_17F92:				; XREF: loc_17F48
00019912 7064                       		moveq	#100,d0
00019914 6100 0000                  		bsr.w	AddPoints
00019918 117C 00FF 003D             		move.b	#-1,$3D(a0)
0001991E 4E75                       		rts	
00019920                            ; ===========================================================================
00019920                            
00019920                            loc_17FA0:				; XREF: Obj77_ShipIndex
00019920 70FE                       		moveq	#-2,d0
00019922 0C68 1E48 0030             		cmpi.w	#$1E48,$30(a0)
00019928 6500                       		bcs.s	loc_17FB6
0001992A 317C 1E48 0030             		move.w	#$1E48,$30(a0)
00019930 4268 0010                  		clr.w	$10(a0)
00019934 5240                       		addq.w	#1,d0
00019936                            
00019936                            loc_17FB6:
00019936 0C68 0500 0038             		cmpi.w	#$500,$38(a0)
0001993C 6E00                       		bgt.s	loc_17FCA
0001993E 317C 0500 0038             		move.w	#$500,$38(a0)
00019944 4268 0012                  		clr.w	$12(a0)
00019948 5240                       		addq.w	#1,d0
0001994A                            
0001994A                            loc_17FCA:
0001994A 6600                       		bne.s	loc_17FDC
0001994C 317C 0140 0010             		move.w	#$140,$10(a0)
00019952 317C FE00 0012             		move.w	#-$200,$12(a0)
00019958 5428 0025                  		addq.b	#2,$25(a0)
0001995C                            
0001995C                            loc_17FDC:
0001995C 6000 FF5A                  		bra.w	loc_17F38
00019960                            ; ===========================================================================
00019960                            
00019960                            loc_17FE0:				; XREF: Obj77_ShipIndex
00019960 70FE                       		moveq	#-2,d0
00019962 0C68 1E70 0030             		cmpi.w	#$1E70,$30(a0)
00019968 6500                       		bcs.s	loc_17FF6
0001996A 317C 1E70 0030             		move.w	#$1E70,$30(a0)
00019970 4268 0010                  		clr.w	$10(a0)
00019974 5240                       		addq.w	#1,d0
00019976                            
00019976                            loc_17FF6:
00019976 0C68 04C0 0038             		cmpi.w	#$4C0,$38(a0)
0001997C 6E00                       		bgt.s	loc_1800A
0001997E 317C 04C0 0038             		move.w	#$4C0,$38(a0)
00019984 4268 0012                  		clr.w	$12(a0)
00019988 5240                       		addq.w	#1,d0
0001998A                            
0001998A                            loc_1800A:
0001998A 6600                       		bne.s	loc_1801A
0001998C 317C FE80 0012             		move.w	#-$180,$12(a0)
00019992 5428 0025                  		addq.b	#2,$25(a0)
00019996 4228 003F                  		clr.b	$3F(a0)
0001999A                            
0001999A                            loc_1801A:
0001999A 6000 FF1C                  		bra.w	loc_17F38
0001999E                            ; ===========================================================================
0001999E                            
0001999E                            loc_1801E:				; XREF: Obj77_ShipIndex
0001999E 0C68 0100 0038             		cmpi.w	#$100,$38(a0)
000199A4 6E00                       		bgt.s	loc_1804E
000199A6 317C 0100 0038             		move.w	#$100,$38(a0)
000199AC 317C 0140 0010             		move.w	#$140,$10(a0)
000199B2 317C FF80 0012             		move.w	#-$80,$12(a0)
000199B8 4A28 003D                  		tst.b	$3D(a0)
000199BC 6700                       		beq.s	loc_18046
000199BE E1E8 0010                  		asl	$10(a0)
000199C2 E1E8 0012                  		asl	$12(a0)
000199C6                            
000199C6                            loc_18046:
000199C6 5428 0025                  		addq.b	#2,$25(a0)
000199CA 6000 FEEC                  		bra.w	loc_17F38
000199CE                            ; ===========================================================================
000199CE                            
000199CE                            loc_1804E:
000199CE 08E8 0000 0022             		bset	#0,$22(a0)
000199D4 5428 003F                  		addq.b	#2,$3F(a0)
000199D8 1028 003F                  		move.b	$3F(a0),d0
000199DC 4EB9 0000 33DA             		jsr	(CalcSine).l
000199E2 4A41                       		tst.w	d1
000199E4 6A00                       		bpl.s	loc_1806C
000199E6 08A8 0000 0022             		bclr	#0,$22(a0)
000199EC                            
000199EC                            loc_1806C:
000199EC E840                       		asr.w	#4,d0
000199EE 4840                       		swap	d0
000199F0 4240                       		clr.w	d0
000199F2 D0A8 0030                  		add.l	$30(a0),d0
000199F6 4840                       		swap	d0
000199F8 3140 0008                  		move.w	d0,8(a0)
000199FC 3028 0012                  		move.w	$12(a0),d0
00019A00 3238 D00C                  		move.w	($FFFFD00C).w,d1
00019A04 9268 000C                  		sub.w	$C(a0),d1
00019A08 6500                       		bcs.s	loc_180A2
00019A0A 0441 0048                  		subi.w	#$48,d1
00019A0E 6500                       		bcs.s	loc_180A2
00019A10 E240                       		asr.w	#1,d0
00019A12 0441 0028                  		subi.w	#$28,d1
00019A16 6500                       		bcs.s	loc_180A2
00019A18 E240                       		asr.w	#1,d0
00019A1A 0441 0028                  		subi.w	#$28,d1
00019A1E 6500                       		bcs.s	loc_180A2
00019A20 7000                       		moveq	#0,d0
00019A22                            
00019A22                            loc_180A2:
00019A22 48C0                       		ext.l	d0
00019A24 E180                       		asl.l	#8,d0
00019A26 4A28 003D                  		tst.b	$3D(a0)
00019A2A 6700                       		beq.s	loc_180AE
00019A2C D080                       		add.l	d0,d0
00019A2E                            
00019A2E                            loc_180AE:
00019A2E D1A8 0038                  		add.l	d0,$38(a0)
00019A32 3168 0038 000C             		move.w	$38(a0),$C(a0)
00019A38 6000 FE8E                  		bra.w	loc_17F48
00019A3C                            ; ===========================================================================
00019A3C                            
00019A3C                            loc_180BC:				; XREF: Obj77_ShipIndex
00019A3C 70FE                       		moveq	#-2,d0
00019A3E 0C68 1F4C 0030             		cmpi.w	#$1F4C,$30(a0)
00019A44 6500                       		bcs.s	loc_180D2
00019A46 317C 1F4C 0030             		move.w	#$1F4C,$30(a0)
00019A4C 4268 0010                  		clr.w	$10(a0)
00019A50 5240                       		addq.w	#1,d0
00019A52                            
00019A52                            loc_180D2:
00019A52 0C68 00C0 0038             		cmpi.w	#$C0,$38(a0)
00019A58 6E00                       		bgt.s	loc_180E6
00019A5A 317C 00C0 0038             		move.w	#$C0,$38(a0)
00019A60 4268 0012                  		clr.w	$12(a0)
00019A64 5240                       		addq.w	#1,d0
00019A66                            
00019A66                            loc_180E6:
00019A66 6600                       		bne.s	loc_180F2
00019A68 5428 0025                  		addq.b	#2,$25(a0)
00019A6C 08A8 0000 0022             		bclr	#0,$22(a0)
00019A72                            
00019A72                            loc_180F2:
00019A72 6000 FE44                  		bra.w	loc_17F38
00019A76                            ; ===========================================================================
00019A76                            
00019A76                            loc_180F6:				; XREF: Obj77_ShipIndex
00019A76 4A28 003D                  		tst.b	$3D(a0)
00019A7A 6600                       		bne.s	loc_18112
00019A7C 0C69 1EC8 0008             		cmpi.w	#$1EC8,8(a1)
00019A82 6D00                       		blt.s	loc_18126
00019A84 0C69 00F0 000C             		cmpi.w	#$F0,$C(a1)
00019A8A 6E00                       		bgt.s	loc_18126
00019A8C 117C 0032 003C             		move.b	#$32,$3C(a0)
00019A92                            
00019A92                            loc_18112:
00019A92 303C 0082                  		move.w	#$82,d0
00019A96 4EB9 0000 1476             		jsr	(PlaySound).l	; play LZ music
00019A9C 08E8 0000 0022             		bset	#0,$22(a0)
00019AA2 5428 0025                  		addq.b	#2,$25(a0)
00019AA6                            
00019AA6                            loc_18126:
00019AA6 6000 FE10                  		bra.w	loc_17F38
00019AAA                            ; ===========================================================================
00019AAA                            
00019AAA                            loc_1812A:				; XREF: Obj77_ShipIndex
00019AAA 4A28 003D                  		tst.b	$3D(a0)
00019AAE 6600                       		bne.s	loc_18136
00019AB0 5328 003C                  		subq.b	#1,$3C(a0)
00019AB4 6600                       		bne.s	loc_1814E
00019AB6                            
00019AB6                            loc_18136:
00019AB6 4228 003C                  		clr.b	$3C(a0)
00019ABA 317C 0400 0010             		move.w	#$400,$10(a0)
00019AC0 317C FFC0 0012             		move.w	#-$40,$12(a0)
00019AC6 4228 003D                  		clr.b	$3D(a0)
00019ACA 5428 0025                  		addq.b	#2,$25(a0)
00019ACE                            
00019ACE                            loc_1814E:
00019ACE 6000 FDE8                  		bra.w	loc_17F38
00019AD2                            ; ===========================================================================
00019AD2                            
00019AD2                            loc_18152:				; XREF: Obj77_ShipIndex
00019AD2 0C78 2030 F72A             		cmpi.w	#$2030,($FFFFF72A).w
00019AD8 6400                       		bcc.s	loc_18160
00019ADA 5478 F72A                  		addq.w	#2,($FFFFF72A).w
00019ADE 6000                       		bra.s	loc_18166
00019AE0                            ; ===========================================================================
00019AE0                            
00019AE0                            loc_18160:
00019AE0 4A28 0001                  		tst.b	1(a0)
00019AE4 6A00                       		bpl.s	Obj77_ShipDel
00019AE6                            
00019AE6                            loc_18166:
00019AE6 6000 FDD0                  		bra.w	loc_17F38
00019AEA                            ; ===========================================================================
00019AEA                            
00019AEA                            Obj77_ShipDel:
00019AEA 4EF9 0000 E112             		jmp	DeleteObject
00019AF0                            ; ===========================================================================
00019AF0                            
00019AF0                            Obj77_FaceMain:				; XREF: Obj77_Index
00019AF0 2268 0034                  		movea.l	$34(a0),a1
00019AF4 1011                       		move.b	(a1),d0
00019AF6 B010                       		cmp.b	(a0),d0
00019AF8 6600                       		bne.s	Obj77_FaceDel
00019AFA 7000                       		moveq	#0,d0
00019AFC 1029 0025                  		move.b	$25(a1),d0
00019B00 7201                       		moveq	#1,d1
00019B02 4A28 003D                  		tst.b	$3D(a0)
00019B06 6700                       		beq.s	loc_1818C
00019B08 720A                       		moveq	#$A,d1
00019B0A 6000                       		bra.s	loc_181A0
00019B0C                            ; ===========================================================================
00019B0C                            
00019B0C                            loc_1818C:
00019B0C 4A29 0020                  		tst.b	$20(a1)
00019B10 6600                       		bne.s	loc_18196
00019B12 7205                       		moveq	#5,d1
00019B14 6000                       		bra.s	loc_181A0
00019B16                            ; ===========================================================================
00019B16                            
00019B16                            loc_18196:
00019B16 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
00019B1C 6500                       		bcs.s	loc_181A0
00019B1E 7204                       		moveq	#4,d1
00019B20                            
00019B20                            loc_181A0:
00019B20 1141 001C                  		move.b	d1,$1C(a0)
00019B24 0C00 000E                  		cmpi.b	#$E,d0
00019B28 6600                       		bne.s	loc_181B6
00019B2A 117C 0006 001C             		move.b	#6,$1C(a0)
00019B30 4A28 0001                  		tst.b	1(a0)
00019B34 6A00                       		bpl.s	Obj77_FaceDel
00019B36                            
00019B36                            loc_181B6:
00019B36 6000                       		bra.s	Obj77_Display
00019B38                            ; ===========================================================================
00019B38                            
00019B38                            Obj77_FaceDel:
00019B38 4EF9 0000 E112             		jmp	DeleteObject
00019B3E                            ; ===========================================================================
00019B3E                            
00019B3E                            Obj77_FlameMain:			; XREF: Obj77_Index
00019B3E 117C 0007 001C             		move.b	#7,$1C(a0)
00019B44 2268 0034                  		movea.l	$34(a0),a1
00019B48 1011                       		move.b	(a1),d0
00019B4A B010                       		cmp.b	(a0),d0
00019B4C 6600                       		bne.s	Obj77_FlameDel
00019B4E 0C29 000E 0025             		cmpi.b	#$E,$25(a1)
00019B54 6600                       		bne.s	loc_181F0
00019B56 117C 000B 001C             		move.b	#$B,$1C(a0)
00019B5C 4A28 0001                  		tst.b	1(a0)
00019B60 6A00                       		bpl.s	Obj77_FlameDel
00019B62 6000                       		bra.s	loc_181F0
00019B64                            ; ===========================================================================
00019B64 4A69 0010                  		tst.w	$10(a1)
00019B68 6700                       		beq.s	loc_181F0
00019B6A 117C 0008 001C             		move.b	#8,$1C(a0)
00019B70                            
00019B70                            loc_181F0:
00019B70 6000                       		bra.s	Obj77_Display
00019B72                            ; ===========================================================================
00019B72                            
00019B72                            Obj77_FlameDel:				; XREF: Obj77_FlameMain
00019B72 4EF9 0000 E112             		jmp	DeleteObject
00019B78                            ; ===========================================================================
00019B78                            
00019B78                            Obj77_Display:
00019B78 43F9 0001 963E             		lea	(Ani_Eggman).l,a1
00019B7E 4EB9 0000 B1EE             		jsr	AnimateSprite
00019B84 2268 0034                  		movea.l	$34(a0),a1
00019B88 3169 0008 0008             		move.w	8(a1),8(a0)
00019B8E 3169 000C 000C             		move.w	$C(a1),$C(a0)
00019B94 1169 0022 0022             		move.b	$22(a1),$22(a0)
00019B9A 7003                       		moveq	#3,d0
00019B9C C028 0022                  		and.b	$22(a0),d0
00019BA0 0228 00FC 0001             		andi.b	#-4,1(a0)
00019BA6 8128 0001                  		or.b	d0,1(a0)
00019BAA 4EF9 0000 E0D6             		jmp	DisplaySprite
00019BB0                            ; ===========================================================================
00019BB0                            ; ---------------------------------------------------------------------------
00019BB0                            ; Object 73 - Eggman (MZ)
00019BB0                            ; ---------------------------------------------------------------------------
00019BB0                            
00019BB0                            Obj73:					; XREF: Obj_Index
00019BB0 7000                       		moveq	#0,d0
00019BB2 1028 0024                  		move.b	$24(a0),d0
00019BB6 323B 0000                  		move.w	Obj73_Index(pc,d0.w),d1
00019BBA 4EFB 1000                  		jmp	Obj73_Index(pc,d1.w)
00019BBE                            ; ===========================================================================
00019BBE 0000                       Obj73_Index:	dc.w Obj73_Main-Obj73_Index
00019BC0 0000                       		dc.w Obj73_ShipMain-Obj73_Index
00019BC2 0000                       		dc.w Obj73_FaceMain-Obj73_Index
00019BC4 0000                       		dc.w Obj73_FlameMain-Obj73_Index
00019BC6 0000                       		dc.w Obj73_TubeMain-Obj73_Index
00019BC8                            
00019BC8 0200 04                    Obj73_ObjData:	dc.b 2,	0, 4		; routine number, animation, priority
00019BCB 0401 04                    		dc.b 4,	1, 4
00019BCE 0607 04                    		dc.b 6,	7, 4
00019BD1 0800 03                    		dc.b 8,	0, 3
00019BD4                            ; ===========================================================================
00019BD4                            
00019BD4                            Obj73_Main:				; XREF: Obj73_Index
00019BD4 3168 0008 0030             		move.w	8(a0),$30(a0)
00019BDA 3168 000C 0038             		move.w	$C(a0),$38(a0)
00019BE0 117C 000F 0020             		move.b	#$F,$20(a0)
00019BE6 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
00019BEC 45FA FFDA                  		lea	Obj73_ObjData(pc),a2
00019BF0 2248                       		movea.l	a0,a1
00019BF2 7203                       		moveq	#3,d1
00019BF4 6000                       		bra.s	Obj73_LoadBoss
00019BF6                            ; ===========================================================================
00019BF6                            
00019BF6                            Obj73_Loop:
00019BF6 4EB9 0000 E582             		jsr	SingleObjLoad2
00019BFC 6600                       		bne.s	Obj73_ShipMain
00019BFE 12BC 0073                  		move.b	#$73,0(a1)
00019C02 3368 0008 0008             		move.w	8(a0),8(a1)
00019C08 3368 000C 000C             		move.w	$C(a0),$C(a1)
00019C0E                            
00019C0E                            Obj73_LoadBoss:				; XREF: Obj73_Main
00019C0E 08A8 0000 0022             		bclr	#0,$22(a0)
00019C14 4229 0025                  		clr.b	$25(a1)
00019C18 135A 0024                  		move.b	(a2)+,$24(a1)
00019C1C 135A 001C                  		move.b	(a2)+,$1C(a1)
00019C20 135A 0018                  		move.b	(a2)+,$18(a1)
00019C24 237C 0001 968E 0004        		move.l	#Map_Eggman,4(a1)
00019C2C 337C 0400 0002             		move.w	#$400,2(a1)
00019C32 137C 0004 0001             		move.b	#4,1(a1)
00019C38 137C 0020 0019             		move.b	#$20,$19(a1)
00019C3E 2348 0034                  		move.l	a0,$34(a1)
00019C42 51C9 FFB2                  		dbf	d1,Obj73_Loop	; repeat sequence 3 more times
00019C46                            
00019C46                            Obj73_ShipMain:
00019C46 7000                       		moveq	#0,d0
00019C48 1028 0025                  		move.b	$25(a0),d0
00019C4C 323B 0000                  		move.w	Obj73_ShipIndex(pc,d0.w),d1
00019C50 4EBB 1000                  		jsr	Obj73_ShipIndex(pc,d1.w)
00019C54 43F9 0001 963E             		lea	(Ani_Eggman).l,a1
00019C5A 4EB9 0000 B1EE             		jsr	AnimateSprite
00019C60 7003                       		moveq	#3,d0
00019C62 C028 0022                  		and.b	$22(a0),d0
00019C66 0228 00FC 0001             		andi.b	#$FC,1(a0)
00019C6C 8128 0001                  		or.b	d0,1(a0)
00019C70 4EF9 0000 E0D6             		jmp	DisplaySprite
00019C76                            ; ===========================================================================
00019C76 0000                       Obj73_ShipIndex:dc.w loc_18302-Obj73_ShipIndex
00019C78 0000                       		dc.w loc_183AA-Obj73_ShipIndex
00019C7A 0000                       		dc.w loc_184F6-Obj73_ShipIndex
00019C7C 0000                       		dc.w loc_1852C-Obj73_ShipIndex
00019C7E 0000                       		dc.w loc_18582-Obj73_ShipIndex
00019C80                            ; ===========================================================================
00019C80                            
00019C80                            loc_18302:				; XREF: Obj73_ShipIndex
00019C80 1028 003F                  		move.b	$3F(a0),d0
00019C84 5428 003F                  		addq.b	#2,$3F(a0)
00019C88 4EB9 0000 33DA             		jsr	(CalcSine).l
00019C8E E440                       		asr.w	#2,d0
00019C90 3140 0012                  		move.w	d0,$12(a0)
00019C94 317C FF00 0010             		move.w	#-$100,$10(a0)
00019C9A 6100 F592                  		bsr.w	BossMove
00019C9E 0C68 1910 0030             		cmpi.w	#$1910,$30(a0)
00019CA4 6600                       		bne.s	loc_18334
00019CA6 5428 0025                  		addq.b	#2,$25(a0)
00019CAA 4228 0028                  		clr.b	$28(a0)
00019CAE 42A8 0010                  		clr.l	$10(a0)
00019CB2                            
00019CB2                            loc_18334:
00019CB2 4EB9 0000 33B4             		jsr	(RandomNumber).l
00019CB8 1140 0034                  		move.b	d0,$34(a0)
00019CBC                            
00019CBC                            loc_1833E:
00019CBC 3168 0038 000C             		move.w	$38(a0),$C(a0)
00019CC2 3168 0030 0008             		move.w	$30(a0),8(a0)
00019CC8 0C28 0004 0025             		cmpi.b	#4,$25(a0)
00019CCE 6400                       		bcc.s	locret_18390
00019CD0 4A28 0022                  		tst.b	$22(a0)
00019CD4 6B00                       		bmi.s	loc_18392
00019CD6 4A28 0020                  		tst.b	$20(a0)
00019CDA 6600                       		bne.s	locret_18390
00019CDC 4A28 003E                  		tst.b	$3E(a0)
00019CE0 6600                       		bne.s	loc_18374
00019CE2 117C 0028 003E             		move.b	#$28,$3E(a0)
00019CE8 303C 00AC                  		move.w	#$AC,d0
00019CEC 4EB9 0000 147C             		jsr	(PlaySound_Special).l ;	play boss damage sound
00019CF2                            
00019CF2                            loc_18374:
00019CF2 43F8 FB22                  		lea	($FFFFFB22).w,a1
00019CF6 7000                       		moveq	#0,d0
00019CF8 4A51                       		tst.w	(a1)
00019CFA 6600                       		bne.s	loc_18382
00019CFC 303C 0EEE                  		move.w	#$EEE,d0
00019D00                            
00019D00                            loc_18382:
00019D00 3280                       		move.w	d0,(a1)
00019D02 5328 003E                  		subq.b	#1,$3E(a0)
00019D06 6600                       		bne.s	locret_18390
00019D08 117C 000F 0020             		move.b	#$F,$20(a0)
00019D0E                            
00019D0E                            locret_18390:
00019D0E 4E75                       		rts	
00019D10                            ; ===========================================================================
00019D10                            
00019D10                            loc_18392:				; XREF: loc_1833E
00019D10 7064                       		moveq	#100,d0
00019D12 6100 0000                  		bsr.w	AddPoints
00019D16 117C 0004 0025             		move.b	#4,$25(a0)
00019D1C 317C 00B4 003C             		move.w	#$B4,$3C(a0)
00019D22 4268 0010                  		clr.w	$10(a0)
00019D26 4E75                       		rts	
00019D28                            ; ===========================================================================
00019D28                            
00019D28                            loc_183AA:				; XREF: Obj73_ShipIndex
00019D28 7000                       		moveq	#0,d0
00019D2A 1028 0028                  		move.b	$28(a0),d0
00019D2E 303B 0000                  		move.w	off_183C2(pc,d0.w),d0
00019D32 4EBB 0000                  		jsr	off_183C2(pc,d0.w)
00019D36 0228 0006 0028             		andi.b	#6,$28(a0)
00019D3C 6000 FF7E                  		bra.w	loc_1833E
00019D40                            ; ===========================================================================
00019D40 0000                       off_183C2:	dc.w loc_183CA-off_183C2
00019D42 0000                       		dc.w Obj73_MakeLava2-off_183C2
00019D44 0000                       		dc.w loc_183CA-off_183C2
00019D46 0000                       		dc.w Obj73_MakeLava2-off_183C2
00019D48                            ; ===========================================================================
00019D48                            
00019D48                            loc_183CA:				; XREF: off_183C2
00019D48 4A68 0010                  		tst.w	$10(a0)
00019D4C 6600                       		bne.s	loc_183FE
00019D4E 7040                       		moveq	#$40,d0
00019D50 0C68 022C 0038             		cmpi.w	#$22C,$38(a0)
00019D56 6700                       		beq.s	loc_183E6
00019D58 6500                       		bcs.s	loc_183DE
00019D5A 4440                       		neg.w	d0
00019D5C                            
00019D5C                            loc_183DE:
00019D5C 3140 0012                  		move.w	d0,$12(a0)
00019D60 6000 F4CC                  		bra.w	BossMove
00019D64                            ; ===========================================================================
00019D64                            
00019D64                            loc_183E6:
00019D64 317C 0200 0010             		move.w	#$200,$10(a0)
00019D6A 317C 0100 0012             		move.w	#$100,$12(a0)
00019D70 0828 0000 0022             		btst	#0,$22(a0)
00019D76 6600                       		bne.s	loc_183FE
00019D78 4468 0010                  		neg.w	$10(a0)
00019D7C                            
00019D7C                            loc_183FE:
00019D7C 0C28 0018 003E             		cmpi.b	#$18,$3E(a0)
00019D82 6400                       		bcc.s	Obj73_MakeLava
00019D84 6100 F4A8                  		bsr.w	BossMove
00019D88 5968 0012                  		subq.w	#4,$12(a0)
00019D8C                            
00019D8C                            Obj73_MakeLava:
00019D8C 5328 0034                  		subq.b	#1,$34(a0)
00019D90 6400                       		bcc.s	loc_1845C
00019D92 4EB9 0000 E56C             		jsr	SingleObjLoad
00019D98 6600                       		bne.s	loc_1844A
00019D9A 12BC 0014                  		move.b	#$14,0(a1)	; load lava ball object
00019D9E 337C 02E8 000C             		move.w	#$2E8,$C(a1)	; set Y	position
00019DA4 4EB9 0000 33B4             		jsr	(RandomNumber).l
00019DAA 0280 0000 FFFF             		andi.l	#$FFFF,d0
00019DB0 80FC 0050                  		divu.w	#$50,d0
00019DB4 4840                       		swap	d0
00019DB6 0640 1878                  		addi.w	#$1878,d0
00019DBA 3340 0008                  		move.w	d0,8(a1)
00019DBE EE09                       		lsr.b	#7,d1
00019DC0 337C 00FF 0028             		move.w	#$FF,$28(a1)
00019DC6                            
00019DC6                            loc_1844A:
00019DC6 4EB9 0000 33B4             		jsr	(RandomNumber).l
00019DCC 0200 001F                  		andi.b	#$1F,d0
00019DD0 0600 0040                  		addi.b	#$40,d0
00019DD4 1140 0034                  		move.b	d0,$34(a0)
00019DD8                            
00019DD8                            loc_1845C:
00019DD8 0828 0000 0022             		btst	#0,$22(a0)
00019DDE 6700                       		beq.s	loc_18474
00019DE0 0C68 1910 0030             		cmpi.w	#$1910,$30(a0)
00019DE6 6D00                       		blt.s	locret_1849C
00019DE8 317C 1910 0030             		move.w	#$1910,$30(a0)
00019DEE 6000                       		bra.s	loc_18482
00019DF0                            ; ===========================================================================
00019DF0                            
00019DF0                            loc_18474:
00019DF0 0C68 1830 0030             		cmpi.w	#$1830,$30(a0)
00019DF6 6E00                       		bgt.s	locret_1849C
00019DF8 317C 1830 0030             		move.w	#$1830,$30(a0)
00019DFE                            
00019DFE                            loc_18482:
00019DFE 4268 0010                  		clr.w	$10(a0)
00019E02 317C FE80 0012             		move.w	#-$180,$12(a0)
00019E08 0C68 022C 0038             		cmpi.w	#$22C,$38(a0)
00019E0E 6400                       		bcc.s	loc_18498
00019E10 4468 0012                  		neg.w	$12(a0)
00019E14                            
00019E14                            loc_18498:
00019E14 5428 0028                  		addq.b	#2,$28(a0)
00019E18                            
00019E18                            locret_1849C:
00019E18 4E75                       		rts	
00019E1A                            ; ===========================================================================
00019E1A                            
00019E1A                            Obj73_MakeLava2:			; XREF: off_183C2
00019E1A 6100 F412                  		bsr.w	BossMove
00019E1E 3028 0038                  		move.w	$38(a0),d0
00019E22 0440 022C                  		subi.w	#$22C,d0
00019E26 6E00                       		bgt.s	locret_184F4
00019E28 303C 022C                  		move.w	#$22C,d0
00019E2C 4A68 0012                  		tst.w	$12(a0)
00019E30 6700                       		beq.s	loc_184EA
00019E32 4268 0012                  		clr.w	$12(a0)
00019E36 317C 0050 003C             		move.w	#$50,$3C(a0)
00019E3C 0868 0000 0022             		bchg	#0,$22(a0)
00019E42 4EB9 0000 E56C             		jsr	SingleObjLoad
00019E48 6600                       		bne.s	loc_184EA
00019E4A 3368 0030 0008             		move.w	$30(a0),8(a1)
00019E50 3368 0038 000C             		move.w	$38(a0),$C(a1)
00019E56 0669 0018 000C             		addi.w	#$18,$C(a1)
00019E5C 12BC 0074                  		move.b	#$74,(a1)	; load lava ball object
00019E60 137C 0001 0028             		move.b	#1,$28(a1)
00019E66                            
00019E66                            loc_184EA:
00019E66 5368 003C                  		subq.w	#1,$3C(a0)
00019E6A 6600                       		bne.s	locret_184F4
00019E6C 5428 0028                  		addq.b	#2,$28(a0)
00019E70                            
00019E70                            locret_184F4:
00019E70 4E75                       		rts	
00019E72                            ; ===========================================================================
00019E72                            
00019E72                            loc_184F6:				; XREF: Obj73_ShipIndex
00019E72 5368 003C                  		subq.w	#1,$3C(a0)
00019E76 6B00                       		bmi.s	loc_18500
00019E78 6000 F372                  		bra.w	BossDefeated
00019E7C                            ; ===========================================================================
00019E7C                            
00019E7C                            loc_18500:
00019E7C 08E8 0000 0022             		bset	#0,$22(a0)
00019E82 08A8 0007 0022             		bclr	#7,$22(a0)
00019E88 4268 0010                  		clr.w	$10(a0)
00019E8C 5428 0025                  		addq.b	#2,$25(a0)
00019E90 317C FFDA 003C             		move.w	#-$26,$3C(a0)
00019E96 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00019E9A 6600                       		bne.s	locret_1852A
00019E9C 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
00019EA2 4268 0012                  		clr.w	$12(a0)
00019EA6                            
00019EA6                            locret_1852A:
00019EA6 4E75                       		rts	
00019EA8                            ; ===========================================================================
00019EA8                            
00019EA8                            loc_1852C:				; XREF: Obj73_ShipIndex
00019EA8 5268 003C                  		addq.w	#1,$3C(a0)
00019EAC 6700                       		beq.s	loc_18544
00019EAE 6A00                       		bpl.s	loc_1854E
00019EB0 0C68 0270 0038             		cmpi.w	#$270,$38(a0)
00019EB6 6400                       		bcc.s	loc_18544
00019EB8 0668 0018 0012             		addi.w	#$18,$12(a0)
00019EBE 6000                       		bra.s	loc_1857A
00019EC0                            ; ===========================================================================
00019EC0                            
00019EC0                            loc_18544:
00019EC0 4268 0012                  		clr.w	$12(a0)
00019EC4 4268 003C                  		clr.w	$3C(a0)
00019EC8 6000                       		bra.s	loc_1857A
00019ECA                            ; ===========================================================================
00019ECA                            
00019ECA                            loc_1854E:
00019ECA 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
00019ED0 6500                       		bcs.s	loc_18566
00019ED2 6700                       		beq.s	loc_1856C
00019ED4 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
00019EDA 6500                       		bcs.s	loc_1857A
00019EDC 5428 0025                  		addq.b	#2,$25(a0)
00019EE0 6000                       		bra.s	loc_1857A
00019EE2                            ; ===========================================================================
00019EE2                            
00019EE2                            loc_18566:
00019EE2 5168 0012                  		subq.w	#8,$12(a0)
00019EE6 6000                       		bra.s	loc_1857A
00019EE8                            ; ===========================================================================
00019EE8                            
00019EE8                            loc_1856C:
00019EE8 4268 0012                  		clr.w	$12(a0)
00019EEC 303C 0083                  		move.w	#$83,d0
00019EF0 4EB9 0000 1476             		jsr	(PlaySound).l	; play MZ music
00019EF6                            
00019EF6                            loc_1857A:
00019EF6 6100 F336                  		bsr.w	BossMove
00019EFA 6000 FDC0                  		bra.w	loc_1833E
00019EFE                            ; ===========================================================================
00019EFE                            
00019EFE                            loc_18582:				; XREF: Obj73_ShipIndex
00019EFE 317C 0500 0010             		move.w	#$500,$10(a0)
00019F04 317C FFC0 0012             		move.w	#-$40,$12(a0)
00019F0A 0C78 1960 F72A             		cmpi.w	#$1960,($FFFFF72A).w
00019F10 6400                       		bcc.s	loc_1859C
00019F12 5478 F72A                  		addq.w	#2,($FFFFF72A).w
00019F16 6000                       		bra.s	loc_185A2
00019F18                            ; ===========================================================================
00019F18                            
00019F18                            loc_1859C:
00019F18 4A28 0001                  		tst.b	1(a0)
00019F1C 6A00                       		bpl.s	Obj73_ShipDel
00019F1E                            
00019F1E                            loc_185A2:
00019F1E 6100 F30E                  		bsr.w	BossMove
00019F22 6000 FD98                  		bra.w	loc_1833E
00019F26                            ; ===========================================================================
00019F26                            
00019F26                            Obj73_ShipDel:
00019F26 4EF9 0000 E112             		jmp	DeleteObject
00019F2C                            ; ===========================================================================
00019F2C                            
00019F2C                            Obj73_FaceMain:				; XREF: Obj73_Index
00019F2C 7000                       		moveq	#0,d0
00019F2E 7201                       		moveq	#1,d1
00019F30 2268 0034                  		movea.l	$34(a0),a1
00019F34 1029 0025                  		move.b	$25(a1),d0
00019F38 5540                       		subq.w	#2,d0
00019F3A 6600                       		bne.s	loc_185D2
00019F3C 0829 0001 0028             		btst	#1,$28(a1)
00019F42 6700                       		beq.s	loc_185DA
00019F44 4A69 0012                  		tst.w	$12(a1)
00019F48 6600                       		bne.s	loc_185DA
00019F4A 7204                       		moveq	#4,d1
00019F4C 6000                       		bra.s	loc_185EE
00019F4E                            ; ===========================================================================
00019F4E                            
00019F4E                            loc_185D2:
00019F4E 5500                       		subq.b	#2,d0
00019F50 6B00                       		bmi.s	loc_185DA
00019F52 720A                       		moveq	#$A,d1
00019F54 6000                       		bra.s	loc_185EE
00019F56                            ; ===========================================================================
00019F56                            
00019F56                            loc_185DA:
00019F56 4A29 0020                  		tst.b	$20(a1)
00019F5A 6600                       		bne.s	loc_185E4
00019F5C 7205                       		moveq	#5,d1
00019F5E 6000                       		bra.s	loc_185EE
00019F60                            ; ===========================================================================
00019F60                            
00019F60                            loc_185E4:
00019F60 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
00019F66 6500                       		bcs.s	loc_185EE
00019F68 7204                       		moveq	#4,d1
00019F6A                            
00019F6A                            loc_185EE:
00019F6A 1141 001C                  		move.b	d1,$1C(a0)
00019F6E 5900                       		subq.b	#4,d0
00019F70 6600                       		bne.s	loc_18602
00019F72 117C 0006 001C             		move.b	#6,$1C(a0)
00019F78 4A28 0001                  		tst.b	1(a0)
00019F7C 6A00                       		bpl.s	Obj73_FaceDel
00019F7E                            
00019F7E                            loc_18602:
00019F7E 6000                       		bra.s	Obj73_Display
00019F80                            ; ===========================================================================
00019F80                            
00019F80                            Obj73_FaceDel:
00019F80 4EF9 0000 E112             		jmp	DeleteObject
00019F86                            ; ===========================================================================
00019F86                            
00019F86                            Obj73_FlameMain:			; XREF: Obj73_Index
00019F86 117C 0007 001C             		move.b	#7,$1C(a0)
00019F8C 2268 0034                  		movea.l	$34(a0),a1
00019F90 0C29 0008 0025             		cmpi.b	#8,$25(a1)
00019F96 6D00                       		blt.s	loc_1862A
00019F98 117C 000B 001C             		move.b	#$B,$1C(a0)
00019F9E 4A28 0001                  		tst.b	1(a0)
00019FA2 6A00                       		bpl.s	Obj73_FlameDel
00019FA4 6000                       		bra.s	loc_18636
00019FA6                            ; ===========================================================================
00019FA6                            
00019FA6                            loc_1862A:
00019FA6 4A69 0010                  		tst.w	$10(a1)
00019FAA 6700                       		beq.s	loc_18636
00019FAC 117C 0008 001C             		move.b	#8,$1C(a0)
00019FB2                            
00019FB2                            loc_18636:
00019FB2 6000                       		bra.s	Obj73_Display
00019FB4                            ; ===========================================================================
00019FB4                            
00019FB4                            Obj73_FlameDel:				; XREF: Obj73_FlameMain
00019FB4 4EF9 0000 E112             		jmp	DeleteObject
00019FBA                            ; ===========================================================================
00019FBA                            
00019FBA                            Obj73_Display:
00019FBA 43F9 0001 963E             		lea	(Ani_Eggman).l,a1
00019FC0 4EB9 0000 B1EE             		jsr	AnimateSprite
00019FC6                            
00019FC6                            loc_1864A:
00019FC6 2268 0034                  		movea.l	$34(a0),a1
00019FCA 3169 0008 0008             		move.w	8(a1),8(a0)
00019FD0 3169 000C 000C             		move.w	$C(a1),$C(a0)
00019FD6 1169 0022 0022             		move.b	$22(a1),$22(a0)
00019FDC 7003                       		moveq	#3,d0
00019FDE C028 0022                  		and.b	$22(a0),d0
00019FE2 0228 00FC 0001             		andi.b	#-4,1(a0)
00019FE8 8128 0001                  		or.b	d0,1(a0)
00019FEC 4EF9 0000 E0D6             		jmp	DisplaySprite
00019FF2                            ; ===========================================================================
00019FF2                            
00019FF2                            Obj73_TubeMain:				; XREF: Obj73_Index
00019FF2 2268 0034                  		movea.l	$34(a0),a1
00019FF6 0C29 0008 0025             		cmpi.b	#8,$25(a1)
00019FFC 6600                       		bne.s	loc_18688
00019FFE 4A28 0001                  		tst.b	1(a0)
0001A002 6A00                       		bpl.s	Obj73_TubeDel
0001A004                            
0001A004                            loc_18688:
0001A004 217C 0001 9756 0004        		move.l	#Map_BossItems,4(a0)
0001A00C 317C 246C 0002             		move.w	#$246C,2(a0)
0001A012 117C 0004 001A             		move.b	#4,$1A(a0)
0001A018 60AC                       		bra.s	loc_1864A
0001A01A                            ; ===========================================================================
0001A01A                            
0001A01A                            Obj73_TubeDel:
0001A01A 4EF9 0000 E112             		jmp	DeleteObject
0001A020                            ; ===========================================================================
0001A020                            ; ---------------------------------------------------------------------------
0001A020                            ; Object 74 - lava that	Eggman drops (MZ)
0001A020                            ; ---------------------------------------------------------------------------
0001A020                            
0001A020                            Obj74:					; XREF: Obj_Index
0001A020 7000                       		moveq	#0,d0
0001A022 1028 0024                  		move.b	$24(a0),d0
0001A026 303B 0000                  		move.w	Obj74_Index(pc,d0.w),d0
0001A02A 4EBB 0000                  		jsr	Obj74_Index(pc,d0.w)
0001A02E 4EF9 0000 E0D6             		jmp	DisplaySprite
0001A034                            ; ===========================================================================
0001A034 0000                       Obj74_Index:	dc.w Obj74_Main-Obj74_Index
0001A036 0000                       		dc.w Obj74_Action-Obj74_Index
0001A038 0000                       		dc.w loc_18886-Obj74_Index
0001A03A 0000                       		dc.w Obj74_Delete3-Obj74_Index
0001A03C                            ; ===========================================================================
0001A03C                            
0001A03C                            Obj74_Main:				; XREF: Obj74_Index
0001A03C 117C 0008 0016             		move.b	#8,$16(a0)
0001A042 117C 0008 0017             		move.b	#8,$17(a0)
0001A048 217C 0000 BE46 0004        		move.l	#Map_obj14,4(a0)
0001A050 317C 0345 0002             		move.w	#$345,2(a0)
0001A056 117C 0004 0001             		move.b	#4,1(a0)
0001A05C 117C 0005 0018             		move.b	#5,$18(a0)
0001A062 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001A068 117C 0008 0019             		move.b	#8,$19(a0)
0001A06E 5428 0024                  		addq.b	#2,$24(a0)
0001A072 4A28 0028                  		tst.b	$28(a0)
0001A076 6600                       		bne.s	loc_1870A
0001A078 117C 008B 0020             		move.b	#$8B,$20(a0)
0001A07E 5428 0024                  		addq.b	#2,$24(a0)
0001A082 6000 0000                  		bra.w	loc_18886
0001A086                            ; ===========================================================================
0001A086                            
0001A086                            loc_1870A:
0001A086 117C 001E 0029             		move.b	#$1E,$29(a0)
0001A08C 303C 00AE                  		move.w	#$AE,d0
0001A090 4EB9 0000 147C             		jsr	(PlaySound_Special).l ;	play lava sound
0001A096                            
0001A096                            Obj74_Action:				; XREF: Obj74_Index
0001A096 7000                       		moveq	#0,d0
0001A098 1028 0025                  		move.b	$25(a0),d0
0001A09C 303B 0000                  		move.w	Obj74_Index2(pc,d0.w),d0
0001A0A0 4EBB 0000                  		jsr	Obj74_Index2(pc,d0.w)
0001A0A4 4EB9 0000 E0B0             		jsr	SpeedToPos
0001A0AA 43F9 0000 EFA4             		lea	(Ani_obj14).l,a1
0001A0B0 4EB9 0000 B1EE             		jsr	AnimateSprite
0001A0B6 0C68 02E8 000C             		cmpi.w	#$2E8,$C(a0)
0001A0BC 6200                       		bhi.s	Obj74_Delete
0001A0BE 4E75                       		rts	
0001A0C0                            ; ===========================================================================
0001A0C0                            
0001A0C0                            Obj74_Delete:
0001A0C0 4EF9 0000 E112             		jmp	DeleteObject
0001A0C6                            ; ===========================================================================
0001A0C6 0000                       Obj74_Index2:	dc.w Obj74_Drop-Obj74_Index2
0001A0C8 0000                       		dc.w Obj74_MakeFlame-Obj74_Index2
0001A0CA 0000                       		dc.w Obj74_Duplicate-Obj74_Index2
0001A0CC 0000                       		dc.w Obj74_FallEdge-Obj74_Index2
0001A0CE                            ; ===========================================================================
0001A0CE                            
0001A0CE                            Obj74_Drop:				; XREF: Obj74_Index2
0001A0CE 08E8 0001 0022             		bset	#1,$22(a0)
0001A0D4 5328 0029                  		subq.b	#1,$29(a0)
0001A0D8 6A00                       		bpl.s	locret_18780
0001A0DA 117C 008B 0020             		move.b	#$8B,$20(a0)
0001A0E0 4228 0028                  		clr.b	$28(a0)
0001A0E4 0668 0018 0012             		addi.w	#$18,$12(a0)
0001A0EA 08A8 0001 0022             		bclr	#1,$22(a0)
0001A0F0 6100 C6BA                  		bsr.w	ObjHitFloor
0001A0F4 4A41                       		tst.w	d1
0001A0F6 6A00                       		bpl.s	locret_18780
0001A0F8 5428 0025                  		addq.b	#2,$25(a0)
0001A0FC                            
0001A0FC                            locret_18780:
0001A0FC 4E75                       		rts	
0001A0FE                            ; ===========================================================================
0001A0FE                            
0001A0FE                            Obj74_MakeFlame:			; XREF: Obj74_Index2
0001A0FE 5568 000C                  		subq.w	#2,$C(a0)
0001A102 08E8 0007 0002             		bset	#7,2(a0)
0001A108 317C 00A0 0010             		move.w	#$A0,$10(a0)
0001A10E 4268 0012                  		clr.w	$12(a0)
0001A112 3168 0008 0030             		move.w	8(a0),$30(a0)
0001A118 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001A11E 117C 0003 0029             		move.b	#3,$29(a0)
0001A124 4EB9 0000 E582             		jsr	SingleObjLoad2
0001A12A 6600                       		bne.s	loc_187CA
0001A12C 47D1                       		lea	(a1),a3
0001A12E 45D0                       		lea	(a0),a2
0001A130 7003                       		moveq	#3,d0
0001A132                            
0001A132                            Obj74_Loop:
0001A132 26DA                       		move.l	(a2)+,(a3)+
0001A134 26DA                       		move.l	(a2)+,(a3)+
0001A136 26DA                       		move.l	(a2)+,(a3)+
0001A138 26DA                       		move.l	(a2)+,(a3)+
0001A13A 51C8 FFF6                  		dbf	d0,Obj74_Loop
0001A13E                            
0001A13E 4469 0010                  		neg.w	$10(a1)
0001A142 5429 0025                  		addq.b	#2,$25(a1)
0001A146                            
0001A146                            loc_187CA:
0001A146 5428 0025                  		addq.b	#2,$25(a0)
0001A14A 4E75                       		rts	
0001A14C                            
0001A14C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001A14C                            
0001A14C                            
0001A14C                            Obj74_Duplicate2:			; XREF: Obj74_Duplicate
0001A14C 4EB9 0000 E582             		jsr	SingleObjLoad2
0001A152 6600                       		bne.s	locret_187EE
0001A154 3368 0008 0008             		move.w	8(a0),8(a1)
0001A15A 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001A160 12BC 0074                  		move.b	#$74,(a1)
0001A164 337C 0067 0028             		move.w	#$67,$28(a1)
0001A16A                            
0001A16A                            locret_187EE:
0001A16A 4E75                       		rts	
0001A16C                            ; End of function Obj74_Duplicate2
0001A16C                            
0001A16C                            ; ===========================================================================
0001A16C                            
0001A16C                            Obj74_Duplicate:			; XREF: Obj74_Index2
0001A16C 6100 C63E                  		bsr.w	ObjHitFloor
0001A170 4A41                       		tst.w	d1
0001A172 6A00                       		bpl.s	loc_18826
0001A174 3028 0008                  		move.w	8(a0),d0
0001A178 0C40 1940                  		cmpi.w	#$1940,d0
0001A17C 6E00                       		bgt.s	loc_1882C
0001A17E 3228 0030                  		move.w	$30(a0),d1
0001A182 B240                       		cmp.w	d0,d1
0001A184 6700                       		beq.s	loc_1881E
0001A186 0240 0010                  		andi.w	#$10,d0
0001A18A 0241 0010                  		andi.w	#$10,d1
0001A18E B240                       		cmp.w	d0,d1
0001A190 6700                       		beq.s	loc_1881E
0001A192 61B8                       		bsr.s	Obj74_Duplicate2
0001A194 3168 0008 0032             		move.w	8(a0),$32(a0)
0001A19A                            
0001A19A                            loc_1881E:
0001A19A 3168 0008 0030             		move.w	8(a0),$30(a0)
0001A1A0 4E75                       		rts	
0001A1A2                            ; ===========================================================================
0001A1A2                            
0001A1A2                            loc_18826:
0001A1A2 5428 0025                  		addq.b	#2,$25(a0)
0001A1A6 4E75                       		rts	
0001A1A8                            ; ===========================================================================
0001A1A8                            
0001A1A8                            loc_1882C:
0001A1A8 5428 0024                  		addq.b	#2,$24(a0)
0001A1AC 4E75                       		rts	
0001A1AE                            ; ===========================================================================
0001A1AE                            
0001A1AE                            Obj74_FallEdge:				; XREF: Obj74_Index2
0001A1AE 08A8 0001 0022             		bclr	#1,$22(a0)
0001A1B4 0668 0024 0012             		addi.w	#$24,$12(a0)	; make flame fall
0001A1BA 3028 0008                  		move.w	8(a0),d0
0001A1BE 9068 0032                  		sub.w	$32(a0),d0
0001A1C2 6A00                       		bpl.s	loc_1884A
0001A1C4 4440                       		neg.w	d0
0001A1C6                            
0001A1C6                            loc_1884A:
0001A1C6 0C40 0012                  		cmpi.w	#$12,d0
0001A1CA 6600                       		bne.s	loc_18856
0001A1CC 08A8 0007 0002             		bclr	#7,2(a0)
0001A1D2                            
0001A1D2                            loc_18856:
0001A1D2 6100 C5D8                  		bsr.w	ObjHitFloor
0001A1D6 4A41                       		tst.w	d1
0001A1D8 6A00                       		bpl.s	locret_1887E
0001A1DA 5328 0029                  		subq.b	#1,$29(a0)
0001A1DE 6700                       		beq.s	Obj74_Delete2
0001A1E0 4268 0012                  		clr.w	$12(a0)
0001A1E4 3168 0032 0008             		move.w	$32(a0),8(a0)
0001A1EA 3168 0038 000C             		move.w	$38(a0),$C(a0)
0001A1F0 08E8 0007 0002             		bset	#7,2(a0)
0001A1F6 5528 0025                  		subq.b	#2,$25(a0)
0001A1FA                            
0001A1FA                            locret_1887E:
0001A1FA 4E75                       		rts	
0001A1FC                            ; ===========================================================================
0001A1FC                            
0001A1FC                            Obj74_Delete2:
0001A1FC 4EF9 0000 E112             		jmp	DeleteObject
0001A202                            ; ===========================================================================
0001A202                            
0001A202                            loc_18886:				; XREF: Obj74_Index
0001A202 08E8 0007 0002             		bset	#7,2(a0)
0001A208 5328 0029                  		subq.b	#1,$29(a0)
0001A20C 6600                       		bne.s	Obj74_Animate
0001A20E 117C 0001 001C             		move.b	#1,$1C(a0)
0001A214 5968 000C                  		subq.w	#4,$C(a0)
0001A218 4228 0020                  		clr.b	$20(a0)
0001A21C                            
0001A21C                            Obj74_Animate:
0001A21C 43F9 0000 EFA4             		lea	(Ani_obj14).l,a1
0001A222 4EF9 0000 B1EE             		jmp	AnimateSprite
0001A228                            ; ===========================================================================
0001A228                            
0001A228                            Obj74_Delete3:				; XREF: Obj74_Index
0001A228 4EF9 0000 E112             		jmp	DeleteObject
0001A22E                            ; ===========================================================================
0001A22E                            
0001A22E                            Obj7A_Delete:
0001A22E 4EF9 0000 E112             		jmp	DeleteObject
0001A234                            ; ===========================================================================
0001A234                            ; ---------------------------------------------------------------------------
0001A234                            ; Object 7A - Eggman (SLZ)
0001A234                            ; ---------------------------------------------------------------------------
0001A234                            
0001A234                            Obj7A:					; XREF: Obj_Index
0001A234 7000                       		moveq	#0,d0
0001A236 1028 0024                  		move.b	$24(a0),d0
0001A23A 323B 0000                  		move.w	Obj7A_Index(pc,d0.w),d1
0001A23E 4EFB 1000                  		jmp	Obj7A_Index(pc,d1.w)
0001A242                            ; ===========================================================================
0001A242 0000                       Obj7A_Index:	dc.w Obj7A_Main-Obj7A_Index
0001A244 0000                       		dc.w Obj7A_ShipMain-Obj7A_Index
0001A246 0000                       		dc.w Obj7A_FaceMain-Obj7A_Index
0001A248 0000                       		dc.w Obj7A_FlameMain-Obj7A_Index
0001A24A 0000                       		dc.w Obj7A_TubeMain-Obj7A_Index
0001A24C                            
0001A24C 0200 04                    Obj7A_ObjData:	dc.b 2,	0, 4		; routine number, animation, priority
0001A24F 0401 04                    		dc.b 4,	1, 4
0001A252 0607 04                    		dc.b 6,	7, 4
0001A255 0800 03                    		dc.b 8,	0, 3
0001A258                            ; ===========================================================================
0001A258                            
0001A258                            Obj7A_Main:				; XREF: Obj7A_Index
0001A258 317C 2188 0008             		move.w	#$2188,8(a0)
0001A25E 317C 0228 000C             		move.w	#$228,$C(a0)
0001A264 3168 0008 0030             		move.w	8(a0),$30(a0)
0001A26A 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001A270 117C 000F 0020             		move.b	#$F,$20(a0)
0001A276 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
0001A27C 45FA FFCE                  		lea	Obj7A_ObjData(pc),a2
0001A280 2248                       		movea.l	a0,a1
0001A282 7203                       		moveq	#3,d1
0001A284 6000                       		bra.s	Obj7A_LoadBoss
0001A286                            ; ===========================================================================
0001A286                            
0001A286                            Obj7A_Loop:
0001A286 4EB9 0000 E582             		jsr	SingleObjLoad2
0001A28C 6600                       		bne.s	loc_1895C
0001A28E 12BC 007A                  		move.b	#$7A,0(a1)
0001A292 3368 0008 0008             		move.w	8(a0),8(a1)
0001A298 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001A29E                            
0001A29E                            Obj7A_LoadBoss:				; XREF: Obj7A_Main
0001A29E 08A8 0000 0022             		bclr	#0,$22(a0)
0001A2A4 4229 0025                  		clr.b	$25(a1)
0001A2A8 135A 0024                  		move.b	(a2)+,$24(a1)
0001A2AC 135A 001C                  		move.b	(a2)+,$1C(a1)
0001A2B0 135A 0018                  		move.b	(a2)+,$18(a1)
0001A2B4 237C 0001 968E 0004        		move.l	#Map_Eggman,4(a1)
0001A2BC 337C 0400 0002             		move.w	#$400,2(a1)
0001A2C2 137C 0004 0001             		move.b	#4,1(a1)
0001A2C8 137C 0020 0019             		move.b	#$20,$19(a1)
0001A2CE 2348 0034                  		move.l	a0,$34(a1)
0001A2D2 51C9 FFB2                  		dbf	d1,Obj7A_Loop	; repeat sequence 3 more times
0001A2D6                            
0001A2D6                            loc_1895C:
0001A2D6 43F8 D040                  		lea	($FFFFD040).w,a1
0001A2DA 45E8 002A                  		lea	$2A(a0),a2
0001A2DE 705E                       		moveq	#$5E,d0
0001A2E0 723E                       		moveq	#$3E,d1
0001A2E2                            
0001A2E2                            loc_18968:
0001A2E2 B011                       		cmp.b	(a1),d0
0001A2E4 6600                       		bne.s	loc_18974
0001A2E6 4A29 0028                  		tst.b	$28(a1)
0001A2EA 6700                       		beq.s	loc_18974
0001A2EC 34C9                       		move.w	a1,(a2)+
0001A2EE                            
0001A2EE                            loc_18974:
0001A2EE D2FC 0040                  		adda.w	#$40,a1
0001A2F2 51C9 FFEE                  		dbf	d1,loc_18968
0001A2F6                            
0001A2F6                            Obj7A_ShipMain:				; XREF: Obj7A_Index
0001A2F6 7000                       		moveq	#0,d0
0001A2F8 1028 0025                  		move.b	$25(a0),d0
0001A2FC 303B 0000                  		move.w	Obj7A_ShipIndex(pc,d0.w),d0
0001A300 4EBB 0000                  		jsr	Obj7A_ShipIndex(pc,d0.w)
0001A304 43F9 0001 963E             		lea	(Ani_Eggman).l,a1
0001A30A 4EB9 0000 B1EE             		jsr	AnimateSprite
0001A310 7003                       		moveq	#3,d0
0001A312 C028 0022                  		and.b	$22(a0),d0
0001A316 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001A31C 8128 0001                  		or.b	d0,1(a0)
0001A320 4EF9 0000 E0D6             		jmp	DisplaySprite
0001A326                            ; ===========================================================================
0001A326 0000                       Obj7A_ShipIndex:dc.w loc_189B8-Obj7A_ShipIndex
0001A328 0000                       		dc.w loc_18A5E-Obj7A_ShipIndex
0001A32A 0000                       		dc.w Obj7A_MakeBall-Obj7A_ShipIndex
0001A32C 0000                       		dc.w loc_18B48-Obj7A_ShipIndex
0001A32E 0000                       		dc.w loc_18B80-Obj7A_ShipIndex
0001A330 0000                       		dc.w loc_18BC6-Obj7A_ShipIndex
0001A332                            ; ===========================================================================
0001A332                            
0001A332                            loc_189B8:				; XREF: Obj7A_ShipIndex
0001A332 317C FF00 0010             		move.w	#-$100,$10(a0)
0001A338 0C68 2120 0030             		cmpi.w	#$2120,$30(a0)
0001A33E 6400                       		bcc.s	loc_189CA
0001A340 5428 0025                  		addq.b	#2,$25(a0)
0001A344                            
0001A344                            loc_189CA:
0001A344 6100 EEE8                  		bsr.w	BossMove
0001A348 1028 003F                  		move.b	$3F(a0),d0
0001A34C 5428 003F                  		addq.b	#2,$3F(a0)
0001A350 4EB9 0000 33DA             		jsr	(CalcSine).l
0001A356 EC40                       		asr.w	#6,d0
0001A358 D068 0038                  		add.w	$38(a0),d0
0001A35C 3140 000C                  		move.w	d0,$C(a0)
0001A360 3168 0030 0008             		move.w	$30(a0),8(a0)
0001A366 6000                       		bra.s	loc_189FE
0001A368                            ; ===========================================================================
0001A368                            
0001A368                            loc_189EE:
0001A368 6100 EEC4                  		bsr.w	BossMove
0001A36C 3168 0038 000C             		move.w	$38(a0),$C(a0)
0001A372 3168 0030 0008             		move.w	$30(a0),8(a0)
0001A378                            
0001A378                            loc_189FE:
0001A378 0C28 0006 0025             		cmpi.b	#6,$25(a0)
0001A37E 6400                       		bcc.s	locret_18A44
0001A380 4A28 0022                  		tst.b	$22(a0)
0001A384 6B00                       		bmi.s	loc_18A46
0001A386 4A28 0020                  		tst.b	$20(a0)
0001A38A 6600                       		bne.s	locret_18A44
0001A38C 4A28 003E                  		tst.b	$3E(a0)
0001A390 6600                       		bne.s	loc_18A28
0001A392 117C 0020 003E             		move.b	#$20,$3E(a0)
0001A398 303C 00AC                  		move.w	#$AC,d0
0001A39C 4EB9 0000 147C             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001A3A2                            
0001A3A2                            loc_18A28:
0001A3A2 43F8 FB22                  		lea	($FFFFFB22).w,a1
0001A3A6 7000                       		moveq	#0,d0
0001A3A8 4A51                       		tst.w	(a1)
0001A3AA 6600                       		bne.s	loc_18A36
0001A3AC 303C 0EEE                  		move.w	#$EEE,d0
0001A3B0                            
0001A3B0                            loc_18A36:
0001A3B0 3280                       		move.w	d0,(a1)
0001A3B2 5328 003E                  		subq.b	#1,$3E(a0)
0001A3B6 6600                       		bne.s	locret_18A44
0001A3B8 117C 000F 0020             		move.b	#$F,$20(a0)
0001A3BE                            
0001A3BE                            locret_18A44:
0001A3BE 4E75                       		rts	
0001A3C0                            ; ===========================================================================
0001A3C0                            
0001A3C0                            loc_18A46:
0001A3C0 7064                       		moveq	#100,d0
0001A3C2 6100 0000                  		bsr.w	AddPoints
0001A3C6 117C 0006 0025             		move.b	#6,$25(a0)
0001A3CC 117C 0078 003C             		move.b	#$78,$3C(a0)
0001A3D2 4268 0010                  		clr.w	$10(a0)
0001A3D6 4E75                       		rts	
0001A3D8                            ; ===========================================================================
0001A3D8                            
0001A3D8                            loc_18A5E:				; XREF: Obj7A_ShipIndex
0001A3D8 3028 0030                  		move.w	$30(a0),d0
0001A3DC 317C 0200 0010             		move.w	#$200,$10(a0)
0001A3E2 0828 0000 0022             		btst	#0,$22(a0)
0001A3E8 6600                       		bne.s	loc_18A7C
0001A3EA 4468 0010                  		neg.w	$10(a0)
0001A3EE 0C40 2008                  		cmpi.w	#$2008,d0
0001A3F2 6E00                       		bgt.s	loc_18A88
0001A3F4 6000                       		bra.s	loc_18A82
0001A3F6                            ; ===========================================================================
0001A3F6                            
0001A3F6                            loc_18A7C:
0001A3F6 0C40 2138                  		cmpi.w	#$2138,d0
0001A3FA 6D00                       		blt.s	loc_18A88
0001A3FC                            
0001A3FC                            loc_18A82:
0001A3FC 0868 0000 0022             		bchg	#0,$22(a0)
0001A402                            
0001A402                            loc_18A88:
0001A402 3028 0008                  		move.w	8(a0),d0
0001A406 72FF                       		moveq	#-1,d1
0001A408 7402                       		moveq	#2,d2
0001A40A 45E8 002A                  		lea	$2A(a0),a2
0001A40E 7828                       		moveq	#$28,d4
0001A410 4A68 0010                  		tst.w	$10(a0)
0001A414 6A00                       		bpl.s	loc_18A9E
0001A416 4444                       		neg.w	d4
0001A418                            
0001A418                            loc_18A9E:
0001A418 321A                       		move.w	(a2)+,d1
0001A41A 2641                       		movea.l	d1,a3
0001A41C 082B 0003 0022             		btst	#3,$22(a3)
0001A422 6600                       		bne.s	loc_18AB4
0001A424 362B 0008                  		move.w	8(a3),d3
0001A428 D644                       		add.w	d4,d3
0001A42A 9640                       		sub.w	d0,d3
0001A42C 6700                       		beq.s	loc_18AC0
0001A42E                            
0001A42E                            loc_18AB4:
0001A42E 51CA FFE8                  		dbf	d2,loc_18A9E
0001A432                            
0001A432 1142 0028                  		move.b	d2,$28(a0)
0001A436 6000 FF0C                  		bra.w	loc_189CA
0001A43A                            ; ===========================================================================
0001A43A                            
0001A43A                            loc_18AC0:
0001A43A 1142 0028                  		move.b	d2,$28(a0)
0001A43E 5428 0025                  		addq.b	#2,$25(a0)
0001A442 117C 0028 003C             		move.b	#$28,$3C(a0)
0001A448 6000 FEFA                  		bra.w	loc_189CA
0001A44C                            ; ===========================================================================
0001A44C                            
0001A44C                            Obj7A_MakeBall:				; XREF: Obj7A_ShipIndex
0001A44C 0C28 0028 003C             		cmpi.b	#$28,$3C(a0)
0001A452 6600                       		bne.s	loc_18B36
0001A454 70FF                       		moveq	#-1,d0
0001A456 1028 0028                  		move.b	$28(a0),d0
0001A45A 4880                       		ext.w	d0
0001A45C 6B00                       		bmi.s	loc_18B40
0001A45E 5540                       		subq.w	#2,d0
0001A460 4440                       		neg.w	d0
0001A462 D040                       		add.w	d0,d0
0001A464 43E8 002A                  		lea	$2A(a0),a1
0001A468 3031 0000                  		move.w	(a1,d0.w),d0
0001A46C 2440                       		movea.l	d0,a2
0001A46E 43F8 D040                  		lea	($FFFFD040).w,a1
0001A472 723E                       		moveq	#$3E,d1
0001A474                            
0001A474                            loc_18AFA:
0001A474 B0A9 003C                  		cmp.l	$3C(a1),d0
0001A478 6700                       		beq.s	loc_18B40
0001A47A D2FC 0040                  		adda.w	#$40,a1
0001A47E 51C9 FFF4                  		dbf	d1,loc_18AFA
0001A482                            
0001A482 2F08                       		move.l	a0,-(sp)
0001A484 41D2                       		lea	(a2),a0
0001A486 4EB9 0000 E582             		jsr	SingleObjLoad2
0001A48C 205F                       		movea.l	(sp)+,a0
0001A48E 6600                       		bne.s	loc_18B40
0001A490 12BC 007B                  		move.b	#$7B,(a1)	; load spiked ball object
0001A494 3368 0008 0008             		move.w	8(a0),8(a1)
0001A49A 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001A4A0 0669 0020 000C             		addi.w	#$20,$C(a1)
0001A4A6 136A 0022 0022             		move.b	$22(a2),$22(a1)
0001A4AC 234A 003C                  		move.l	a2,$3C(a1)
0001A4B0                            
0001A4B0                            loc_18B36:
0001A4B0 5328 003C                  		subq.b	#1,$3C(a0)
0001A4B4 6700                       		beq.s	loc_18B40
0001A4B6 6000 FEC0                  		bra.w	loc_189FE
0001A4BA                            ; ===========================================================================
0001A4BA                            
0001A4BA                            loc_18B40:
0001A4BA 5528 0025                  		subq.b	#2,$25(a0)
0001A4BE 6000 FE84                  		bra.w	loc_189CA
0001A4C2                            ; ===========================================================================
0001A4C2                            
0001A4C2                            loc_18B48:				; XREF: Obj7A_ShipIndex
0001A4C2 5328 003C                  		subq.b	#1,$3C(a0)
0001A4C6 6B00                       		bmi.s	loc_18B52
0001A4C8 6000 ED22                  		bra.w	BossDefeated
0001A4CC                            ; ===========================================================================
0001A4CC                            
0001A4CC                            loc_18B52:
0001A4CC 5428 0025                  		addq.b	#2,$25(a0)
0001A4D0 4268 0012                  		clr.w	$12(a0)
0001A4D4 08E8 0000 0022             		bset	#0,$22(a0)
0001A4DA 08A8 0007 0022             		bclr	#7,$22(a0)
0001A4E0 4268 0010                  		clr.w	$10(a0)
0001A4E4 117C 00E8 003C             		move.b	#-$18,$3C(a0)
0001A4EA 4A38 F7A7                  		tst.b	($FFFFF7A7).w
0001A4EE 6600                       		bne.s	loc_18B7C
0001A4F0 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
0001A4F6                            
0001A4F6                            loc_18B7C:
0001A4F6 6000 FE80                  		bra.w	loc_189FE
0001A4FA                            ; ===========================================================================
0001A4FA                            
0001A4FA                            loc_18B80:				; XREF: Obj7A_ShipIndex
0001A4FA 5228 003C                  		addq.b	#1,$3C(a0)
0001A4FE 6700                       		beq.s	loc_18B90
0001A500 6A00                       		bpl.s	loc_18B96
0001A502 0668 0018 0012             		addi.w	#$18,$12(a0)
0001A508 6000                       		bra.s	loc_18BC2
0001A50A                            ; ===========================================================================
0001A50A                            
0001A50A                            loc_18B90:
0001A50A 4268 0012                  		clr.w	$12(a0)
0001A50E 6000                       		bra.s	loc_18BC2
0001A510                            ; ===========================================================================
0001A510                            
0001A510                            loc_18B96:
0001A510 0C28 0020 003C             		cmpi.b	#$20,$3C(a0)
0001A516 6500                       		bcs.s	loc_18BAE
0001A518 6700                       		beq.s	loc_18BB4
0001A51A 0C28 002A 003C             		cmpi.b	#$2A,$3C(a0)
0001A520 6500                       		bcs.s	loc_18BC2
0001A522 5428 0025                  		addq.b	#2,$25(a0)
0001A526 6000                       		bra.s	loc_18BC2
0001A528                            ; ===========================================================================
0001A528                            
0001A528                            loc_18BAE:
0001A528 5168 0012                  		subq.w	#8,$12(a0)
0001A52C 6000                       		bra.s	loc_18BC2
0001A52E                            ; ===========================================================================
0001A52E                            
0001A52E                            loc_18BB4:
0001A52E 4268 0012                  		clr.w	$12(a0)
0001A532 303C 0084                  		move.w	#$84,d0
0001A536 4EB9 0000 1476             		jsr	(PlaySound).l	; play SLZ music
0001A53C                            
0001A53C                            loc_18BC2:
0001A53C 6000 FE2A                  		bra.w	loc_189EE
0001A540                            ; ===========================================================================
0001A540                            
0001A540                            loc_18BC6:				; XREF: Obj7A_ShipIndex
0001A540 317C 0400 0010             		move.w	#$400,$10(a0)
0001A546 317C FFC0 0012             		move.w	#-$40,$12(a0)
0001A54C 0C78 2160 F72A             		cmpi.w	#$2160,($FFFFF72A).w
0001A552 6400                       		bcc.s	loc_18BE0
0001A554 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0001A558 6000                       		bra.s	loc_18BE8
0001A55A                            ; ===========================================================================
0001A55A                            
0001A55A                            loc_18BE0:
0001A55A 4A28 0001                  		tst.b	1(a0)
0001A55E 6A00 FCCE                  		bpl.w	Obj7A_Delete
0001A562                            
0001A562                            loc_18BE8:
0001A562 6100 ECCA                  		bsr.w	BossMove
0001A566 6000 FDDC                  		bra.w	loc_189CA
0001A56A                            ; ===========================================================================
0001A56A                            
0001A56A                            Obj7A_FaceMain:				; XREF: Obj7A_Index
0001A56A 7000                       		moveq	#0,d0
0001A56C 7201                       		moveq	#1,d1
0001A56E 2268 0034                  		movea.l	$34(a0),a1
0001A572 1029 0025                  		move.b	$25(a1),d0
0001A576 0C00 0006                  		cmpi.b	#6,d0
0001A57A 6B00                       		bmi.s	loc_18C06
0001A57C 720A                       		moveq	#$A,d1
0001A57E 6000                       		bra.s	loc_18C1A
0001A580                            ; ===========================================================================
0001A580                            
0001A580                            loc_18C06:
0001A580 4A29 0020                  		tst.b	$20(a1)
0001A584 6600                       		bne.s	loc_18C10
0001A586 7205                       		moveq	#5,d1
0001A588 6000                       		bra.s	loc_18C1A
0001A58A                            ; ===========================================================================
0001A58A                            
0001A58A                            loc_18C10:
0001A58A 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
0001A590 6500                       		bcs.s	loc_18C1A
0001A592 7204                       		moveq	#4,d1
0001A594                            
0001A594                            loc_18C1A:
0001A594 1141 001C                  		move.b	d1,$1C(a0)
0001A598 0C00 000A                  		cmpi.b	#$A,d0
0001A59C 6600                       		bne.s	loc_18C32
0001A59E 117C 0006 001C             		move.b	#6,$1C(a0)
0001A5A4 4A28 0001                  		tst.b	1(a0)
0001A5A8 6A00 FC84                  		bpl.w	Obj7A_Delete
0001A5AC                            
0001A5AC                            loc_18C32:
0001A5AC 6000                       		bra.s	loc_18C6C
0001A5AE                            ; ===========================================================================
0001A5AE                            
0001A5AE                            Obj7A_FlameMain:			; XREF: Obj7A_Index
0001A5AE 117C 0008 001C             		move.b	#8,$1C(a0)
0001A5B4 2268 0034                  		movea.l	$34(a0),a1
0001A5B8 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
0001A5BE 6600                       		bne.s	loc_18C56
0001A5C0 4A28 0001                  		tst.b	1(a0)
0001A5C4 6A00 FC68                  		bpl.w	Obj7A_Delete
0001A5C8 117C 000B 001C             		move.b	#$B,$1C(a0)
0001A5CE 6000                       		bra.s	loc_18C6C
0001A5D0                            ; ===========================================================================
0001A5D0                            
0001A5D0                            loc_18C56:
0001A5D0 0C29 0008 0025             		cmpi.b	#8,$25(a1)
0001A5D6 6E00                       		bgt.s	loc_18C6C
0001A5D8 0C29 0004 0025             		cmpi.b	#4,$25(a1)
0001A5DE 6D00                       		blt.s	loc_18C6C
0001A5E0 117C 0007 001C             		move.b	#7,$1C(a0)
0001A5E6                            
0001A5E6                            loc_18C6C:
0001A5E6 43F9 0001 963E             		lea	(Ani_Eggman).l,a1
0001A5EC 4EB9 0000 B1EE             		jsr	AnimateSprite
0001A5F2                            
0001A5F2                            loc_18C78:
0001A5F2 2268 0034                  		movea.l	$34(a0),a1
0001A5F6 3169 0008 0008             		move.w	8(a1),8(a0)
0001A5FC 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001A602 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001A608 7003                       		moveq	#3,d0
0001A60A C028 0022                  		and.b	$22(a0),d0
0001A60E 0228 00FC 0001             		andi.b	#-4,1(a0)
0001A614 8128 0001                  		or.b	d0,1(a0)
0001A618 4EF9 0000 E0D6             		jmp	DisplaySprite
0001A61E                            ; ===========================================================================
0001A61E                            
0001A61E                            Obj7A_TubeMain:				; XREF: Obj7A_Index
0001A61E 2268 0034                  		movea.l	$34(a0),a1
0001A622 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
0001A628 6600                       		bne.s	loc_18CB8
0001A62A 4A28 0001                  		tst.b	1(a0)
0001A62E 6A00 FBFE                  		bpl.w	Obj7A_Delete
0001A632                            
0001A632                            loc_18CB8:
0001A632 217C 0001 9756 0004        		move.l	#Map_BossItems,4(a0)
0001A63A 317C 246C 0002             		move.w	#$246C,2(a0)
0001A640 117C 0003 001A             		move.b	#3,$1A(a0)
0001A646 60AA                       		bra.s	loc_18C78
0001A648                            ; ===========================================================================
0001A648                            ; ---------------------------------------------------------------------------
0001A648                            ; Object 7B - exploding	spikeys	that Eggman drops (SLZ)
0001A648                            ; ---------------------------------------------------------------------------
0001A648                            
0001A648                            Obj7B:					; XREF: Obj_Index
0001A648 7000                       		moveq	#0,d0
0001A64A 1028 0024                  		move.b	$24(a0),d0
0001A64E 303B 0000                  		move.w	Obj7B_Index(pc,d0.w),d0
0001A652 4EBB 0000                  		jsr	Obj7B_Index(pc,d0.w)
0001A656 3028 0030                  		move.w	$30(a0),d0
0001A65A 0240 FF80                  		andi.w	#$FF80,d0
0001A65E 3238 F700                  		move.w	($FFFFF700).w,d1
0001A662 0441 0080                  		subi.w	#$80,d1
0001A666 0241 FF80                  		andi.w	#$FF80,d1
0001A66A 9041                       		sub.w	d1,d0
0001A66C 6B00 FBC0                  		bmi.w	Obj7A_Delete
0001A670 0C40 0280                  		cmpi.w	#$280,d0
0001A674 6200 FBB8                  		bhi.w	Obj7A_Delete
0001A678 4EF9 0000 E0D6             		jmp	DisplaySprite
0001A67E                            ; ===========================================================================
0001A67E 0000                       Obj7B_Index:	dc.w Obj7B_Main-Obj7B_Index
0001A680 0000                       		dc.w Obj7B_Fall-Obj7B_Index
0001A682 0000                       		dc.w loc_18DC6-Obj7B_Index
0001A684 0000                       		dc.w loc_18EAA-Obj7B_Index
0001A686 0000                       		dc.w Obj7B_Explode-Obj7B_Index
0001A688 0000                       		dc.w Obj7B_MoveFrag-Obj7B_Index
0001A68A                            ; ===========================================================================
0001A68A                            
0001A68A                            Obj7B_Main:				; XREF: Obj7B_Index
0001A68A 217C 0001 24D6 0004        		move.l	#Map_obj5Ea,4(a0)
0001A692 317C 0518 0002             		move.w	#$518,2(a0)
0001A698 117C 0001 001A             		move.b	#1,$1A(a0)
0001A69E 0028 0004 0001             		ori.b	#4,1(a0)
0001A6A4 117C 0004 0018             		move.b	#4,$18(a0)
0001A6AA 117C 008B 0020             		move.b	#$8B,$20(a0)
0001A6B0 117C 000C 0019             		move.b	#$C,$19(a0)
0001A6B6 2268 003C                  		movea.l	$3C(a0),a1
0001A6BA 3169 0008 0030             		move.w	8(a1),$30(a0)
0001A6C0 3169 000C 0034             		move.w	$C(a1),$34(a0)
0001A6C6 08E8 0000 0022             		bset	#0,$22(a0)
0001A6CC 3028 0008                  		move.w	8(a0),d0
0001A6D0 B069 0008                  		cmp.w	8(a1),d0
0001A6D4 6E00                       		bgt.s	loc_18D68
0001A6D6 08A8 0000 0022             		bclr	#0,$22(a0)
0001A6DC 117C 0002 003A             		move.b	#2,$3A(a0)
0001A6E2                            
0001A6E2                            loc_18D68:
0001A6E2 5428 0024                  		addq.b	#2,$24(a0)
0001A6E6                            
0001A6E6                            Obj7B_Fall:				; XREF: Obj7B_Index
0001A6E6 4EB9 0000 E084             		jsr	ObjectFall
0001A6EC 2268 003C                  		movea.l	$3C(a0),a1
0001A6F0 45F9 0000 0000             		lea	(word_19018).l,a2
0001A6F6 7000                       		moveq	#0,d0
0001A6F8 1029 001A                  		move.b	$1A(a1),d0
0001A6FC 3228 0008                  		move.w	8(a0),d1
0001A700 9268 0030                  		sub.w	$30(a0),d1
0001A704 6400                       		bcc.s	loc_18D8E
0001A706 5440                       		addq.w	#2,d0
0001A708                            
0001A708                            loc_18D8E:
0001A708 D040                       		add.w	d0,d0
0001A70A 3228 0034                  		move.w	$34(a0),d1
0001A70E D272 0000                  		add.w	(a2,d0.w),d1
0001A712 B268 000C                  		cmp.w	$C(a0),d1
0001A716 6E00                       		bgt.s	locret_18DC4
0001A718 2268 003C                  		movea.l	$3C(a0),a1
0001A71C 7202                       		moveq	#2,d1
0001A71E 0828 0000 0022             		btst	#0,$22(a0)
0001A724 6700                       		beq.s	loc_18DAE
0001A726 7200                       		moveq	#0,d1
0001A728                            
0001A728                            loc_18DAE:
0001A728 317C 00F0 0028             		move.w	#$F0,$28(a0)
0001A72E 117C 000A 001F             		move.b	#10,$1F(a0)	; set frame duration to	10 frames
0001A734 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
0001A73A 6000 0000                  		bra.w	loc_18FA2
0001A73E                            ; ===========================================================================
0001A73E                            
0001A73E                            locret_18DC4:
0001A73E 4E75                       		rts	
0001A740                            ; ===========================================================================
0001A740                            
0001A740                            loc_18DC6:				; XREF: Obj7B_Index
0001A740 2268 003C                  		movea.l	$3C(a0),a1
0001A744 7000                       		moveq	#0,d0
0001A746 1028 003A                  		move.b	$3A(a0),d0
0001A74A 9029 003A                  		sub.b	$3A(a1),d0
0001A74E 6700                       		beq.s	loc_18E2A
0001A750 6400                       		bcc.s	loc_18DDA
0001A752 4400                       		neg.b	d0
0001A754                            
0001A754                            loc_18DDA:
0001A754 323C F7E8                  		move.w	#-$818,d1
0001A758 343C FEEC                  		move.w	#-$114,d2
0001A75C 0C00 0001                  		cmpi.b	#1,d0
0001A760 6700                       		beq.s	loc_18E00
0001A762 323C F6A0                  		move.w	#-$960,d1
0001A766 343C FF0C                  		move.w	#-$F4,d2
0001A76A 0C69 09C0 0038             		cmpi.w	#$9C0,$38(a1)
0001A770 6D00                       		blt.s	loc_18E00
0001A772 323C F5E0                  		move.w	#-$A20,d1
0001A776 343C FF80                  		move.w	#-$80,d2
0001A77A                            
0001A77A                            loc_18E00:
0001A77A 3141 0012                  		move.w	d1,$12(a0)
0001A77E 3142 0010                  		move.w	d2,$10(a0)
0001A782 3028 0008                  		move.w	8(a0),d0
0001A786 9068 0030                  		sub.w	$30(a0),d0
0001A78A 6400                       		bcc.s	loc_18E16
0001A78C 4468 0010                  		neg.w	$10(a0)
0001A790                            
0001A790                            loc_18E16:
0001A790 117C 0001 001A             		move.b	#1,$1A(a0)
0001A796 317C 0020 0028             		move.w	#$20,$28(a0)
0001A79C 5428 0024                  		addq.b	#2,$24(a0)
0001A7A0 6000 0000                  		bra.w	loc_18EAA
0001A7A4                            ; ===========================================================================
0001A7A4                            
0001A7A4                            loc_18E2A:				; XREF: loc_18DC6
0001A7A4 45F9 0000 0000             		lea	(word_19018).l,a2
0001A7AA 7000                       		moveq	#0,d0
0001A7AC 1029 001A                  		move.b	$1A(a1),d0
0001A7B0 343C 0028                  		move.w	#$28,d2
0001A7B4 3228 0008                  		move.w	8(a0),d1
0001A7B8 9268 0030                  		sub.w	$30(a0),d1
0001A7BC 6400                       		bcc.s	loc_18E48
0001A7BE 4442                       		neg.w	d2
0001A7C0 5440                       		addq.w	#2,d0
0001A7C2                            
0001A7C2                            loc_18E48:
0001A7C2 D040                       		add.w	d0,d0
0001A7C4 3228 0034                  		move.w	$34(a0),d1
0001A7C8 D272 0000                  		add.w	(a2,d0.w),d1
0001A7CC 3141 000C                  		move.w	d1,$C(a0)
0001A7D0 D468 0030                  		add.w	$30(a0),d2
0001A7D4 3142 0008                  		move.w	d2,8(a0)
0001A7D8 4268 000E                  		clr.w	$E(a0)
0001A7DC 4268 000A                  		clr.w	$A(a0)
0001A7E0 5368 0028                  		subq.w	#1,$28(a0)
0001A7E4 6600                       		bne.s	loc_18E7A
0001A7E6 317C 0020 0028             		move.w	#$20,$28(a0)
0001A7EC 117C 0008 0024             		move.b	#8,$24(a0)
0001A7F2 4E75                       		rts	
0001A7F4                            ; ===========================================================================
0001A7F4                            
0001A7F4                            loc_18E7A:
0001A7F4 0C68 0078 0028             		cmpi.w	#$78,$28(a0)
0001A7FA 6600                       		bne.s	loc_18E88
0001A7FC 117C 0005 001F             		move.b	#5,$1F(a0)
0001A802                            
0001A802                            loc_18E88:
0001A802 0C68 003C 0028             		cmpi.w	#$3C,$28(a0)
0001A808 6600                       		bne.s	loc_18E96
0001A80A 117C 0002 001F             		move.b	#2,$1F(a0)
0001A810                            
0001A810                            loc_18E96:
0001A810 5328 001E                  		subq.b	#1,$1E(a0)
0001A814 6E00                       		bgt.s	locret_18EA8
0001A816 0868 0000 001A             		bchg	#0,$1A(a0)
0001A81C 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
0001A822                            
0001A822                            locret_18EA8:
0001A822 4E75                       		rts	
0001A824                            ; ===========================================================================
0001A824                            
0001A824                            loc_18EAA:				; XREF: Obj7B_Index
0001A824 43F8 D040                  		lea	($FFFFD040).w,a1
0001A828 707A                       		moveq	#$7A,d0
0001A82A 7240                       		moveq	#$40,d1
0001A82C 743E                       		moveq	#$3E,d2
0001A82E                            
0001A82E                            loc_18EB4:
0001A82E B011                       		cmp.b	(a1),d0
0001A830 6700                       		beq.s	loc_18EC0
0001A832 D2C1                       		adda.w	d1,a1
0001A834 51CA FFF8                  		dbf	d2,loc_18EB4
0001A838                            
0001A838 6000                       		bra.s	loc_18F38
0001A83A                            ; ===========================================================================
0001A83A                            
0001A83A                            loc_18EC0:
0001A83A 3029 0008                  		move.w	8(a1),d0
0001A83E 3229 000C                  		move.w	$C(a1),d1
0001A842 3428 0008                  		move.w	8(a0),d2
0001A846 3628 000C                  		move.w	$C(a0),d3
0001A84A 45FA 0000                  		lea	byte_19022(pc),a2
0001A84E 47FA 0000                  		lea	byte_19026(pc),a3
0001A852 181A                       		move.b	(a2)+,d4
0001A854 4884                       		ext.w	d4
0001A856 D044                       		add.w	d4,d0
0001A858 181B                       		move.b	(a3)+,d4
0001A85A 4884                       		ext.w	d4
0001A85C D444                       		add.w	d4,d2
0001A85E B440                       		cmp.w	d0,d2
0001A860 6500                       		bcs.s	loc_18F38
0001A862 181A                       		move.b	(a2)+,d4
0001A864 4884                       		ext.w	d4
0001A866 D044                       		add.w	d4,d0
0001A868 181B                       		move.b	(a3)+,d4
0001A86A 4884                       		ext.w	d4
0001A86C D444                       		add.w	d4,d2
0001A86E B042                       		cmp.w	d2,d0
0001A870 6500                       		bcs.s	loc_18F38
0001A872 181A                       		move.b	(a2)+,d4
0001A874 4884                       		ext.w	d4
0001A876 D244                       		add.w	d4,d1
0001A878 181B                       		move.b	(a3)+,d4
0001A87A 4884                       		ext.w	d4
0001A87C D644                       		add.w	d4,d3
0001A87E B641                       		cmp.w	d1,d3
0001A880 6500                       		bcs.s	loc_18F38
0001A882 181A                       		move.b	(a2)+,d4
0001A884 4884                       		ext.w	d4
0001A886 D244                       		add.w	d4,d1
0001A888 181B                       		move.b	(a3)+,d4
0001A88A 4884                       		ext.w	d4
0001A88C D644                       		add.w	d4,d3
0001A88E B243                       		cmp.w	d3,d1
0001A890 6500                       		bcs.s	loc_18F38
0001A892 5428 0024                  		addq.b	#2,$24(a0)
0001A896 4268 0028                  		clr.w	$28(a0)
0001A89A 4229 0020                  		clr.b	$20(a1)
0001A89E 5329 0021                  		subq.b	#1,$21(a1)
0001A8A2 6600                       		bne.s	loc_18F38
0001A8A4 08E9 0007 0022             		bset	#7,$22(a1)
0001A8AA 4268 0010                  		clr.w	$10(a0)
0001A8AE 4268 0012                  		clr.w	$12(a0)
0001A8B2                            
0001A8B2                            loc_18F38:
0001A8B2 4A68 0012                  		tst.w	$12(a0)
0001A8B6 6A00                       		bpl.s	loc_18F5C
0001A8B8 4EB9 0000 E084             		jsr	ObjectFall
0001A8BE 3028 0034                  		move.w	$34(a0),d0
0001A8C2 0440 002F                  		subi.w	#$2F,d0
0001A8C6 B068 000C                  		cmp.w	$C(a0),d0
0001A8CA 6E00                       		bgt.s	loc_18F58
0001A8CC 4EB9 0000 E084             		jsr	ObjectFall
0001A8D2                            
0001A8D2                            loc_18F58:
0001A8D2 6000 FF20                  		bra.w	loc_18E7A
0001A8D6                            ; ===========================================================================
0001A8D6                            
0001A8D6                            loc_18F5C:
0001A8D6 4EB9 0000 E084             		jsr	ObjectFall
0001A8DC 2268 003C                  		movea.l	$3C(a0),a1
0001A8E0 45F9 0000 0000             		lea	(word_19018).l,a2
0001A8E6 7000                       		moveq	#0,d0
0001A8E8 1029 001A                  		move.b	$1A(a1),d0
0001A8EC 3228 0008                  		move.w	8(a0),d1
0001A8F0 9268 0030                  		sub.w	$30(a0),d1
0001A8F4 6400                       		bcc.s	loc_18F7E
0001A8F6 5440                       		addq.w	#2,d0
0001A8F8                            
0001A8F8                            loc_18F7E:
0001A8F8 D040                       		add.w	d0,d0
0001A8FA 3228 0034                  		move.w	$34(a0),d1
0001A8FE D272 0000                  		add.w	(a2,d0.w),d1
0001A902 B268 000C                  		cmp.w	$C(a0),d1
0001A906 6ECA                       		bgt.s	loc_18F58
0001A908 2268 003C                  		movea.l	$3C(a0),a1
0001A90C 7202                       		moveq	#2,d1
0001A90E 4A68 0010                  		tst.w	$10(a0)
0001A912 6B00                       		bmi.s	loc_18F9C
0001A914 7200                       		moveq	#0,d1
0001A916                            
0001A916                            loc_18F9C:
0001A916 317C 0000 0028             		move.w	#0,$28(a0)
0001A91C                            
0001A91C                            loc_18FA2:
0001A91C 1341 003A                  		move.b	d1,$3A(a1)
0001A920 1141 003A                  		move.b	d1,$3A(a0)
0001A924 B229 001A                  		cmp.b	$1A(a1),d1
0001A928 6700                       		beq.s	loc_19008
0001A92A 08A9 0003 0022             		bclr	#3,$22(a1)
0001A930 6700                       		beq.s	loc_19008
0001A932 4229 0025                  		clr.b	$25(a1)
0001A936 137C 0002 0024             		move.b	#2,$24(a1)
0001A93C 45F8 D000                  		lea	($FFFFD000).w,a2
0001A940 3568 0012 0012             		move.w	$12(a0),$12(a2)
0001A946 446A 0012                  		neg.w	$12(a2)
0001A94A 0C29 0001 001A             		cmpi.b	#1,$1A(a1)
0001A950 6600                       		bne.s	loc_18FDC
0001A952 E0EA 0012                  		asr	$12(a2)
0001A956                            
0001A956                            loc_18FDC:
0001A956 08EA 0001 0022             		bset	#1,$22(a2)
0001A95C 08AA 0003 0022             		bclr	#3,$22(a2)
0001A962 422A 003C                  		clr.b	$3C(a2)
0001A966 2F08                       		move.l	a0,-(sp)
0001A968 41D2                       		lea	(a2),a0
0001A96A 4EBA 961C                  		jsr	Obj01_ChkRoll
0001A96E 205F                       		movea.l	(sp)+,a0
0001A970 157C 0002 0024             		move.b	#2,$24(a2)
0001A976 303C 00CC                  		move.w	#$CC,d0
0001A97A 4EB9 0000 147C             		jsr	(PlaySound_Special).l ;	play "spring" sound
0001A980                            
0001A980                            loc_19008:
0001A980 4268 0010                  		clr.w	$10(a0)
0001A984 4268 0012                  		clr.w	$12(a0)
0001A988 5428 0024                  		addq.b	#2,$24(a0)
0001A98C 6000 FE66                  		bra.w	loc_18E7A
0001A990                            ; ===========================================================================
0001A990 FFF8 FFE4 FFD1 FFE4 FFF8   word_19018:	dc.w $FFF8, $FFE4, $FFD1, $FFE4, $FFF8
0001A99A                            		even
0001A99A E830 E830                  byte_19022:	dc.b $E8, $30, $E8, $30
0001A99E                            		even
0001A99E 08F0 08F0                  byte_19026:	dc.b 8,	$F0, 8,	$F0
0001A9A2                            		even
0001A9A2                            ; ===========================================================================
0001A9A2                            
0001A9A2                            Obj7B_Explode:				; XREF: Obj7B_Index
0001A9A2 10BC 003F                  		move.b	#$3F,(a0)
0001A9A6 4228 0024                  		clr.b	$24(a0)
0001A9AA 0C68 0020 0028             		cmpi.w	#$20,$28(a0)
0001A9B0 6700                       		beq.s	Obj7B_MakeFrag
0001A9B2 4E75                       		rts	
0001A9B4                            ; ===========================================================================
0001A9B4                            
0001A9B4                            Obj7B_MakeFrag:
0001A9B4 3168 0034 000C             		move.w	$34(a0),$C(a0)
0001A9BA 7203                       		moveq	#3,d1
0001A9BC 45FA 0000                  		lea	Obj7B_FragSpeed(pc),a2
0001A9C0                            
0001A9C0                            Obj7B_Loop:
0001A9C0 4EB9 0000 E56C             		jsr	SingleObjLoad
0001A9C6 6600                       		bne.s	loc_1909A
0001A9C8 12BC 007B                  		move.b	#$7B,(a1)	; load shrapnel	object
0001A9CC 137C 000A 0024             		move.b	#$A,$24(a1)
0001A9D2 237C 0000 0000 0004        		move.l	#Map_obj7B,4(a1)
0001A9DA 137C 0003 0018             		move.b	#3,$18(a1)
0001A9E0 337C 0518 0002             		move.w	#$518,2(a1)
0001A9E6 3368 0008 0008             		move.w	8(a0),8(a1)
0001A9EC 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001A9F2 335A 0010                  		move.w	(a2)+,$10(a1)
0001A9F6 335A 0012                  		move.w	(a2)+,$12(a1)
0001A9FA 137C 0098 0020             		move.b	#$98,$20(a1)
0001AA00 0029 0004 0001             		ori.b	#4,1(a1)
0001AA06 08E9 0007 0001             		bset	#7,1(a1)
0001AA0C 137C 000C 0019             		move.b	#$C,$19(a1)
0001AA12                            
0001AA12                            loc_1909A:
0001AA12 51C9 FFAC                  		dbf	d1,Obj7B_Loop	; repeat sequence 3 more times
0001AA16                            
0001AA16 4E75                       		rts	
0001AA18                            ; ===========================================================================
0001AA18 FF00 FCC0                  Obj7B_FragSpeed:dc.w $FF00, $FCC0	; horizontal, vertical
0001AA1C FF60 FDC0                  		dc.w $FF60, $FDC0
0001AA20 0100 FCC0                  		dc.w $100, $FCC0
0001AA24 00A0 FDC0                  		dc.w $A0, $FDC0
0001AA28                            ; ===========================================================================
0001AA28                            
0001AA28                            Obj7B_MoveFrag:				; XREF: Obj7B_Index
0001AA28 4EB9 0000 E0B0             		jsr	SpeedToPos
0001AA2E 3168 0008 0030             		move.w	8(a0),$30(a0)
0001AA34 3168 000C 0034             		move.w	$C(a0),$34(a0)
0001AA3A 0668 0018 0012             		addi.w	#$18,$12(a0)
0001AA40 7004                       		moveq	#4,d0
0001AA42 C078 FE0E                  		and.w	($FFFFFE0E).w,d0
0001AA46 E448                       		lsr.w	#2,d0
0001AA48 1140 001A                  		move.b	d0,$1A(a0)
0001AA4C 4A28 0001                  		tst.b	1(a0)
0001AA50 6A00 F7DC                  		bpl.w	Obj7A_Delete
0001AA54 4E75                       		rts	
0001AA56                            ; ===========================================================================
0001AA56                            ; ---------------------------------------------------------------------------
0001AA56                            ; Sprite mappings - exploding spikeys that the SLZ boss	drops
0001AA56                            ; ---------------------------------------------------------------------------
0001AA56                            Map_obj7B:
0001AA56                            	include "_maps\obj7B.asm"
0001AA56                            ; ---------------------------------------------------------------------------
0001AA56                            ; Sprite mappings - exploding spikeys that the SLZ boss	drops
0001AA56                            ; ---------------------------------------------------------------------------
0001AA56 0000                       		dc.w byte_190E2-Map_obj7B
0001AA58 0000                       		dc.w byte_190E8-Map_obj7B
0001AA5A 01                         byte_190E2:	dc.b 1
0001AA5B FC00 0027 FC               		dc.b $FC, 0, 0,	$27, $FC
0001AA60 01                         byte_190E8:	dc.b 1
0001AA61 FC00 0028 FC               		dc.b $FC, 0, 0,	$28, $FC
0001AA66                            		even
0001AA66                            		even
0001AA66                            
0001AA66                            ; ===========================================================================
0001AA66                            ; ---------------------------------------------------------------------------
0001AA66                            ; Object 75 - Eggman (SYZ)
0001AA66                            ; ---------------------------------------------------------------------------
0001AA66                            
0001AA66                            Obj75:					; XREF: Obj_Index
0001AA66 7000                       		moveq	#0,d0
0001AA68 1028 0024                  		move.b	$24(a0),d0
0001AA6C 323B 0000                  		move.w	Obj75_Index(pc,d0.w),d1
0001AA70 4EFB 1000                  		jmp	Obj75_Index(pc,d1.w)
0001AA74                            ; ===========================================================================
0001AA74 0000                       Obj75_Index:	dc.w Obj75_Main-Obj75_Index
0001AA76 0000                       		dc.w Obj75_ShipMain-Obj75_Index
0001AA78 0000                       		dc.w Obj75_FaceMain-Obj75_Index
0001AA7A 0000                       		dc.w Obj75_FlameMain-Obj75_Index
0001AA7C 0000                       		dc.w Obj75_SpikeMain-Obj75_Index
0001AA7E                            
0001AA7E 0200 05                    Obj75_ObjData:	dc.b 2,	0, 5		; routine number, animation, priority
0001AA81 0401 05                    		dc.b 4,	1, 5
0001AA84 0607 05                    		dc.b 6,	7, 5
0001AA87 0800 05                    		dc.b 8,	0, 5
0001AA8A                            ; ===========================================================================
0001AA8A                            
0001AA8A                            Obj75_Main:				; XREF: Obj75_Index
0001AA8A 317C 2DB0 0008             		move.w	#$2DB0,8(a0)
0001AA90 317C 04DA 000C             		move.w	#$4DA,$C(a0)
0001AA96 3168 0008 0030             		move.w	8(a0),$30(a0)
0001AA9C 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001AAA2 117C 000F 0020             		move.b	#$F,$20(a0)
0001AAA8 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
0001AAAE 45FA FFCE                  		lea	Obj75_ObjData(pc),a2
0001AAB2 2248                       		movea.l	a0,a1
0001AAB4 7203                       		moveq	#3,d1
0001AAB6 6000                       		bra.s	Obj75_LoadBoss
0001AAB8                            ; ===========================================================================
0001AAB8                            
0001AAB8                            Obj75_Loop:
0001AAB8 4EB9 0000 E582             		jsr	SingleObjLoad2
0001AABE 6600                       		bne.s	Obj75_ShipMain
0001AAC0 12BC 0075                  		move.b	#$75,(a1)
0001AAC4 3368 0008 0008             		move.w	8(a0),8(a1)
0001AACA 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001AAD0                            
0001AAD0                            Obj75_LoadBoss:				; XREF: Obj75_Main
0001AAD0 08A8 0000 0022             		bclr	#0,$22(a0)
0001AAD6 4229 0025                  		clr.b	$25(a1)
0001AADA 135A 0024                  		move.b	(a2)+,$24(a1)
0001AADE 135A 001C                  		move.b	(a2)+,$1C(a1)
0001AAE2 135A 0018                  		move.b	(a2)+,$18(a1)
0001AAE6 237C 0001 968E 0004        		move.l	#Map_Eggman,4(a1)
0001AAEE 337C 0400 0002             		move.w	#$400,2(a1)
0001AAF4 137C 0004 0001             		move.b	#4,1(a1)
0001AAFA 137C 0020 0019             		move.b	#$20,$19(a1)
0001AB00 2348 0034                  		move.l	a0,$34(a1)
0001AB04 51C9 FFB2                  		dbf	d1,Obj75_Loop	; repeat sequence 3 more times
0001AB08                            
0001AB08                            Obj75_ShipMain:				; XREF: Obj75_Index
0001AB08 7000                       		moveq	#0,d0
0001AB0A 1028 0025                  		move.b	$25(a0),d0
0001AB0E 323B 0000                  		move.w	Obj75_ShipIndex(pc,d0.w),d1
0001AB12 4EBB 1000                  		jsr	Obj75_ShipIndex(pc,d1.w)
0001AB16 43F9 0001 963E             		lea	(Ani_Eggman).l,a1
0001AB1C 4EB9 0000 B1EE             		jsr	AnimateSprite
0001AB22 7003                       		moveq	#3,d0
0001AB24 C028 0022                  		and.b	$22(a0),d0
0001AB28 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001AB2E 8128 0001                  		or.b	d0,1(a0)
0001AB32 4EF9 0000 E0D6             		jmp	DisplaySprite
0001AB38                            ; ===========================================================================
0001AB38 0000 0000                  Obj75_ShipIndex:dc.w loc_191CC-Obj75_ShipIndex,	loc_19270-Obj75_ShipIndex
0001AB3C 0000 0000                  		dc.w loc_192EC-Obj75_ShipIndex,	loc_19474-Obj75_ShipIndex
0001AB40 0000 0000                  		dc.w loc_194AC-Obj75_ShipIndex,	loc_194F2-Obj75_ShipIndex
0001AB44                            ; ===========================================================================
0001AB44                            
0001AB44                            loc_191CC:				; XREF: Obj75_ShipIndex
0001AB44 317C FF00 0010             		move.w	#-$100,$10(a0)
0001AB4A 0C68 2D38 0030             		cmpi.w	#$2D38,$30(a0)
0001AB50 6400                       		bcc.s	loc_191DE
0001AB52 5428 0025                  		addq.b	#2,$25(a0)
0001AB56                            
0001AB56                            loc_191DE:
0001AB56 1028 003F                  		move.b	$3F(a0),d0
0001AB5A 5428 003F                  		addq.b	#2,$3F(a0)
0001AB5E 4EB9 0000 33DA             		jsr	(CalcSine).l
0001AB64 E440                       		asr.w	#2,d0
0001AB66 3140 0012                  		move.w	d0,$12(a0)
0001AB6A                            
0001AB6A                            loc_191F2:
0001AB6A 6100 E6C2                  		bsr.w	BossMove
0001AB6E 3168 0038 000C             		move.w	$38(a0),$C(a0)
0001AB74 3168 0030 0008             		move.w	$30(a0),8(a0)
0001AB7A                            
0001AB7A                            loc_19202:
0001AB7A 3028 0008                  		move.w	8(a0),d0
0001AB7E 0440 2C00                  		subi.w	#$2C00,d0
0001AB82 EA48                       		lsr.w	#5,d0
0001AB84 1140 0034                  		move.b	d0,$34(a0)
0001AB88 0C28 0006 0025             		cmpi.b	#6,$25(a0)
0001AB8E 6400                       		bcc.s	locret_19256
0001AB90 4A28 0022                  		tst.b	$22(a0)
0001AB94 6B00                       		bmi.s	loc_19258
0001AB96 4A28 0020                  		tst.b	$20(a0)
0001AB9A 6600                       		bne.s	locret_19256
0001AB9C 4A28 003E                  		tst.b	$3E(a0)
0001ABA0 6600                       		bne.s	loc_1923A
0001ABA2 117C 0020 003E             		move.b	#$20,$3E(a0)
0001ABA8 303C 00AC                  		move.w	#$AC,d0
0001ABAC 4EB9 0000 147C             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001ABB2                            
0001ABB2                            loc_1923A:
0001ABB2 43F8 FB22                  		lea	($FFFFFB22).w,a1
0001ABB6 7000                       		moveq	#0,d0
0001ABB8 4A51                       		tst.w	(a1)
0001ABBA 6600                       		bne.s	loc_19248
0001ABBC 303C 0EEE                  		move.w	#$EEE,d0
0001ABC0                            
0001ABC0                            loc_19248:
0001ABC0 3280                       		move.w	d0,(a1)
0001ABC2 5328 003E                  		subq.b	#1,$3E(a0)
0001ABC6 6600                       		bne.s	locret_19256
0001ABC8 117C 000F 0020             		move.b	#$F,$20(a0)
0001ABCE                            
0001ABCE                            locret_19256:
0001ABCE 4E75                       		rts	
0001ABD0                            ; ===========================================================================
0001ABD0                            
0001ABD0                            loc_19258:				; XREF: loc_19202
0001ABD0 7064                       		moveq	#100,d0
0001ABD2 6100 0000                  		bsr.w	AddPoints
0001ABD6 117C 0006 0025             		move.b	#6,$25(a0)
0001ABDC 317C 00B4 003C             		move.w	#$B4,$3C(a0)
0001ABE2 4268 0010                  		clr.w	$10(a0)
0001ABE6 4E75                       		rts	
0001ABE8                            ; ===========================================================================
0001ABE8                            
0001ABE8                            loc_19270:				; XREF: Obj75_ShipIndex
0001ABE8 3028 0030                  		move.w	$30(a0),d0
0001ABEC 317C 0140 0010             		move.w	#$140,$10(a0)
0001ABF2 0828 0000 0022             		btst	#0,$22(a0)
0001ABF8 6600                       		bne.s	loc_1928E
0001ABFA 4468 0010                  		neg.w	$10(a0)
0001ABFE 0C40 2C08                  		cmpi.w	#$2C08,d0
0001AC02 6E00                       		bgt.s	loc_1929E
0001AC04 6000                       		bra.s	loc_19294
0001AC06                            ; ===========================================================================
0001AC06                            
0001AC06                            loc_1928E:
0001AC06 0C40 2D38                  		cmpi.w	#$2D38,d0
0001AC0A 6D00                       		blt.s	loc_1929E
0001AC0C                            
0001AC0C                            loc_19294:
0001AC0C 0868 0000 0022             		bchg	#0,$22(a0)
0001AC12 4228 003D                  		clr.b	$3D(a0)
0001AC16                            
0001AC16                            loc_1929E:
0001AC16 0440 2C10                  		subi.w	#$2C10,d0
0001AC1A 0240 001F                  		andi.w	#$1F,d0
0001AC1E 0440 001F                  		subi.w	#$1F,d0
0001AC22 6A00                       		bpl.s	loc_192AE
0001AC24 4440                       		neg.w	d0
0001AC26                            
0001AC26                            loc_192AE:
0001AC26 5340                       		subq.w	#1,d0
0001AC28 6E00                       		bgt.s	loc_192E8
0001AC2A 4A28 003D                  		tst.b	$3D(a0)
0001AC2E 6600                       		bne.s	loc_192E8
0001AC30 3238 D008                  		move.w	($FFFFD008).w,d1
0001AC34 0441 2C00                  		subi.w	#$2C00,d1
0001AC38 EA41                       		asr.w	#5,d1
0001AC3A B228 0034                  		cmp.b	$34(a0),d1
0001AC3E 6600                       		bne.s	loc_192E8
0001AC40 7000                       		moveq	#0,d0
0001AC42 1028 0034                  		move.b	$34(a0),d0
0001AC46 EB40                       		asl.w	#5,d0
0001AC48 0640 2C10                  		addi.w	#$2C10,d0
0001AC4C 3140 0030                  		move.w	d0,$30(a0)
0001AC50 6100 0000                  		bsr.w	Obj75_FindBlocks
0001AC54 5428 0025                  		addq.b	#2,$25(a0)
0001AC58 4268 0028                  		clr.w	$28(a0)
0001AC5C 4268 0010                  		clr.w	$10(a0)
0001AC60                            
0001AC60                            loc_192E8:
0001AC60 6000 FEF4                  		bra.w	loc_191DE
0001AC64                            ; ===========================================================================
0001AC64                            
0001AC64                            loc_192EC:				; XREF: Obj75_ShipIndex
0001AC64 7000                       		moveq	#0,d0
0001AC66 1028 0028                  		move.b	$28(a0),d0
0001AC6A 303B 0000                  		move.w	off_192FA(pc,d0.w),d0
0001AC6E 4EFB 0000                  		jmp	off_192FA(pc,d0.w)
0001AC72                            ; ===========================================================================
0001AC72 0000                       off_192FA:	dc.w loc_19302-off_192FA
0001AC74 0000                       		dc.w loc_19348-off_192FA
0001AC76 0000                       		dc.w loc_1938E-off_192FA
0001AC78 0000                       		dc.w loc_193D0-off_192FA
0001AC7A                            ; ===========================================================================
0001AC7A                            
0001AC7A                            loc_19302:				; XREF: off_192FA
0001AC7A 317C 0180 0012             		move.w	#$180,$12(a0)
0001AC80 3028 0038                  		move.w	$38(a0),d0
0001AC84 0C40 0556                  		cmpi.w	#$556,d0
0001AC88 6500                       		bcs.s	loc_19344
0001AC8A 317C 0556 0038             		move.w	#$556,$38(a0)
0001AC90 4268 003C                  		clr.w	$3C(a0)
0001AC94 70FF                       		moveq	#-1,d0
0001AC96 3028 0036                  		move.w	$36(a0),d0
0001AC9A 6700                       		beq.s	loc_1933C
0001AC9C 2240                       		movea.l	d0,a1
0001AC9E 137C 00FF 0029             		move.b	#-1,$29(a1)
0001ACA4 117C 00FF 0029             		move.b	#-1,$29(a0)
0001ACAA 2348 0034                  		move.l	a0,$34(a1)
0001ACAE 317C 0032 003C             		move.w	#$32,$3C(a0)
0001ACB4                            
0001ACB4                            loc_1933C:
0001ACB4 4268 0012                  		clr.w	$12(a0)
0001ACB8 5428 0028                  		addq.b	#2,$28(a0)
0001ACBC                            
0001ACBC                            loc_19344:
0001ACBC 6000 FEAC                  		bra.w	loc_191F2
0001ACC0                            ; ===========================================================================
0001ACC0                            
0001ACC0                            loc_19348:				; XREF: off_192FA
0001ACC0 5368 003C                  		subq.w	#1,$3C(a0)
0001ACC4 6A00                       		bpl.s	loc_19366
0001ACC6 5428 0028                  		addq.b	#2,$28(a0)
0001ACCA 317C F800 0012             		move.w	#-$800,$12(a0)
0001ACD0 4A68 0036                  		tst.w	$36(a0)
0001ACD4 6600                       		bne.s	loc_19362
0001ACD6 E0E8 0012                  		asr	$12(a0)
0001ACDA                            
0001ACDA                            loc_19362:
0001ACDA 7000                       		moveq	#0,d0
0001ACDC 6000                       		bra.s	loc_1937C
0001ACDE                            ; ===========================================================================
0001ACDE                            
0001ACDE                            loc_19366:
0001ACDE 7000                       		moveq	#0,d0
0001ACE0 0C68 001E 003C             		cmpi.w	#$1E,$3C(a0)
0001ACE6 6E00                       		bgt.s	loc_1937C
0001ACE8 7002                       		moveq	#2,d0
0001ACEA 0828 0001 003D             		btst	#1,$3D(a0)
0001ACF0 6700                       		beq.s	loc_1937C
0001ACF2 4440                       		neg.w	d0
0001ACF4                            
0001ACF4                            loc_1937C:
0001ACF4 D068 0038                  		add.w	$38(a0),d0
0001ACF8 3140 000C                  		move.w	d0,$C(a0)
0001ACFC 3168 0030 0008             		move.w	$30(a0),8(a0)
0001AD02 6000 FE76                  		bra.w	loc_19202
0001AD06                            ; ===========================================================================
0001AD06                            
0001AD06                            loc_1938E:				; XREF: off_192FA
0001AD06 303C 04DA                  		move.w	#$4DA,d0
0001AD0A 4A68 0036                  		tst.w	$36(a0)
0001AD0E 6700                       		beq.s	loc_1939C
0001AD10 0440 0018                  		subi.w	#$18,d0
0001AD14                            
0001AD14                            loc_1939C:
0001AD14 B068 0038                  		cmp.w	$38(a0),d0
0001AD18 6D00                       		blt.s	loc_193BE
0001AD1A 317C 0008 003C             		move.w	#8,$3C(a0)
0001AD20 4A68 0036                  		tst.w	$36(a0)
0001AD24 6700                       		beq.s	loc_193B4
0001AD26 317C 002D 003C             		move.w	#$2D,$3C(a0)
0001AD2C                            
0001AD2C                            loc_193B4:
0001AD2C 5428 0028                  		addq.b	#2,$28(a0)
0001AD30 4268 0012                  		clr.w	$12(a0)
0001AD34 6000                       		bra.s	loc_193CC
0001AD36                            ; ===========================================================================
0001AD36                            
0001AD36                            loc_193BE:
0001AD36 0C68 FFC0 0012             		cmpi.w	#-$40,$12(a0)
0001AD3C 6C00                       		bge.s	loc_193CC
0001AD3E 0668 000C 0012             		addi.w	#$C,$12(a0)
0001AD44                            
0001AD44                            loc_193CC:
0001AD44 6000 FE24                  		bra.w	loc_191F2
0001AD48                            ; ===========================================================================
0001AD48                            
0001AD48                            loc_193D0:				; XREF: off_192FA
0001AD48 5368 003C                  		subq.w	#1,$3C(a0)
0001AD4C 6E00                       		bgt.s	loc_19406
0001AD4E 6B00                       		bmi.s	loc_193EE
0001AD50 70FF                       		moveq	#-1,d0
0001AD52 3028 0036                  		move.w	$36(a0),d0
0001AD56 6700                       		beq.s	loc_193E8
0001AD58 2240                       		movea.l	d0,a1
0001AD5A 137C 000A 0029             		move.b	#$A,$29(a1)
0001AD60                            
0001AD60                            loc_193E8:
0001AD60 4268 0036                  		clr.w	$36(a0)
0001AD64 6000                       		bra.s	loc_19406
0001AD66                            ; ===========================================================================
0001AD66                            
0001AD66                            loc_193EE:
0001AD66 0C68 FFE2 003C             		cmpi.w	#-$1E,$3C(a0)
0001AD6C 6600                       		bne.s	loc_19406
0001AD6E 4228 0029                  		clr.b	$29(a0)
0001AD72 5528 0025                  		subq.b	#2,$25(a0)
0001AD76 117C 00FF 003D             		move.b	#-1,$3D(a0)
0001AD7C 6000                       		bra.s	loc_19446
0001AD7E                            ; ===========================================================================
0001AD7E                            
0001AD7E                            loc_19406:
0001AD7E 7001                       		moveq	#1,d0
0001AD80 4A68 0036                  		tst.w	$36(a0)
0001AD84 6700                       		beq.s	loc_19410
0001AD86 7002                       		moveq	#2,d0
0001AD88                            
0001AD88                            loc_19410:
0001AD88 0C68 04DA 0038             		cmpi.w	#$4DA,$38(a0)
0001AD8E 6700                       		beq.s	loc_19424
0001AD90 6D00                       		blt.s	loc_1941C
0001AD92 4440                       		neg.w	d0
0001AD94                            
0001AD94                            loc_1941C:
0001AD94 4A68 0036                  		tst.w	$36(a0)
0001AD98 D168 0038                  		add.w	d0,$38(a0)
0001AD9C                            
0001AD9C                            loc_19424:
0001AD9C 7000                       		moveq	#0,d0
0001AD9E 4A68 0036                  		tst.w	$36(a0)
0001ADA2 6700                       		beq.s	loc_19438
0001ADA4 7002                       		moveq	#2,d0
0001ADA6 0828 0000 003D             		btst	#0,$3D(a0)
0001ADAC 6700                       		beq.s	loc_19438
0001ADAE 4440                       		neg.w	d0
0001ADB0                            
0001ADB0                            loc_19438:
0001ADB0 D068 0038                  		add.w	$38(a0),d0
0001ADB4 3140 000C                  		move.w	d0,$C(a0)
0001ADB8 3168 0030 0008             		move.w	$30(a0),8(a0)
0001ADBE                            
0001ADBE                            loc_19446:
0001ADBE 6000 FDBA                  		bra.w	loc_19202
0001ADC2                            
0001ADC2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001ADC2                            
0001ADC2                            
0001ADC2                            Obj75_FindBlocks:			; XREF: loc_192AE
0001ADC2 4268 0036                  		clr.w	$36(a0)
0001ADC6 43F8 D040                  		lea	($FFFFD040).w,a1
0001ADCA 703E                       		moveq	#$3E,d0
0001ADCC 7276                       		moveq	#$76,d1
0001ADCE 1428 0034                  		move.b	$34(a0),d2
0001ADD2                            
0001ADD2                            Obj75_FindLoop:
0001ADD2 B211                       		cmp.b	(a1),d1		; is object a SYZ boss block?
0001ADD4 6600                       		bne.s	loc_1946A	; if not, branch
0001ADD6 B429 0028                  		cmp.b	$28(a1),d2
0001ADDA 6600                       		bne.s	loc_1946A
0001ADDC 3149 0036                  		move.w	a1,$36(a0)
0001ADE0 6000                       		bra.s	locret_19472
0001ADE2                            ; ===========================================================================
0001ADE2                            
0001ADE2                            loc_1946A:
0001ADE2 43E9 0040                  		lea	$40(a1),a1	; next object RAM entry
0001ADE6 51C8 FFEA                  		dbf	d0,Obj75_FindLoop
0001ADEA                            
0001ADEA                            locret_19472:
0001ADEA 4E75                       		rts	
0001ADEC                            ; End of function Obj75_FindBlocks
0001ADEC                            
0001ADEC                            ; ===========================================================================
0001ADEC                            
0001ADEC                            loc_19474:				; XREF: Obj75_ShipIndex
0001ADEC 5368 003C                  		subq.w	#1,$3C(a0)
0001ADF0 6B00                       		bmi.s	loc_1947E
0001ADF2 6000 E3F8                  		bra.w	BossDefeated
0001ADF6                            ; ===========================================================================
0001ADF6                            
0001ADF6                            loc_1947E:
0001ADF6 5428 0025                  		addq.b	#2,$25(a0)
0001ADFA 4268 0012                  		clr.w	$12(a0)
0001ADFE 08E8 0000 0022             		bset	#0,$22(a0)
0001AE04 08A8 0007 0022             		bclr	#7,$22(a0)
0001AE0A 4268 0010                  		clr.w	$10(a0)
0001AE0E 317C FFFF 003C             		move.w	#-1,$3C(a0)
0001AE14 4A38 F7A7                  		tst.b	($FFFFF7A7).w
0001AE18 6600                       		bne.s	loc_194A8
0001AE1A 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
0001AE20                            
0001AE20                            loc_194A8:
0001AE20 6000 FD58                  		bra.w	loc_19202
0001AE24                            ; ===========================================================================
0001AE24                            
0001AE24                            loc_194AC:				; XREF: Obj75_ShipIndex
0001AE24 5268 003C                  		addq.w	#1,$3C(a0)
0001AE28 6700                       		beq.s	loc_194BC
0001AE2A 6A00                       		bpl.s	loc_194C2
0001AE2C 0668 0018 0012             		addi.w	#$18,$12(a0)
0001AE32 6000                       		bra.s	loc_194EE
0001AE34                            ; ===========================================================================
0001AE34                            
0001AE34                            loc_194BC:
0001AE34 4268 0012                  		clr.w	$12(a0)
0001AE38 6000                       		bra.s	loc_194EE
0001AE3A                            ; ===========================================================================
0001AE3A                            
0001AE3A                            loc_194C2:
0001AE3A 0C68 0020 003C             		cmpi.w	#$20,$3C(a0)
0001AE40 6500                       		bcs.s	loc_194DA
0001AE42 6700                       		beq.s	loc_194E0
0001AE44 0C68 002A 003C             		cmpi.w	#$2A,$3C(a0)
0001AE4A 6500                       		bcs.s	loc_194EE
0001AE4C 5428 0025                  		addq.b	#2,$25(a0)
0001AE50 6000                       		bra.s	loc_194EE
0001AE52                            ; ===========================================================================
0001AE52                            
0001AE52                            loc_194DA:
0001AE52 5168 0012                  		subq.w	#8,$12(a0)
0001AE56 6000                       		bra.s	loc_194EE
0001AE58                            ; ===========================================================================
0001AE58                            
0001AE58                            loc_194E0:
0001AE58 4268 0012                  		clr.w	$12(a0)
0001AE5C 303C 0085                  		move.w	#$85,d0
0001AE60 4EB9 0000 1476             		jsr	(PlaySound).l	; play SYZ music
0001AE66                            
0001AE66                            loc_194EE:
0001AE66 6000 FD02                  		bra.w	loc_191F2
0001AE6A                            ; ===========================================================================
0001AE6A                            
0001AE6A                            loc_194F2:				; XREF: Obj75_ShipIndex
0001AE6A 317C 0400 0010             		move.w	#$400,$10(a0)
0001AE70 317C FFC0 0012             		move.w	#-$40,$12(a0)
0001AE76 0C78 2D40 F72A             		cmpi.w	#$2D40,($FFFFF72A).w
0001AE7C 6400                       		bcc.s	loc_1950C
0001AE7E 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0001AE82 6000                       		bra.s	loc_19512
0001AE84                            ; ===========================================================================
0001AE84                            
0001AE84                            loc_1950C:
0001AE84 4A28 0001                  		tst.b	1(a0)
0001AE88 6A00                       		bpl.s	Obj75_ShipDelete
0001AE8A                            
0001AE8A                            loc_19512:
0001AE8A 6100 E3A2                  		bsr.w	BossMove
0001AE8E 6000 FCC6                  		bra.w	loc_191DE
0001AE92                            ; ===========================================================================
0001AE92                            
0001AE92                            Obj75_ShipDelete:
0001AE92 4EF9 0000 E112             		jmp	DeleteObject
0001AE98                            ; ===========================================================================
0001AE98                            
0001AE98                            Obj75_FaceMain:				; XREF: Obj75_Index
0001AE98 7201                       		moveq	#1,d1
0001AE9A 2268 0034                  		movea.l	$34(a0),a1
0001AE9E 7000                       		moveq	#0,d0
0001AEA0 1029 0025                  		move.b	$25(a1),d0
0001AEA4 303B 0000                  		move.w	off_19546(pc,d0.w),d0
0001AEA8 4EBB 0000                  		jsr	off_19546(pc,d0.w)
0001AEAC 1141 001C                  		move.b	d1,$1C(a0)
0001AEB0 1010                       		move.b	(a0),d0
0001AEB2 B011                       		cmp.b	(a1),d0
0001AEB4 6600                       		bne.s	Obj75_FaceDelete
0001AEB6 6000                       		bra.s	loc_195BE
0001AEB8                            ; ===========================================================================
0001AEB8                            
0001AEB8                            Obj75_FaceDelete:
0001AEB8 4EF9 0000 E112             		jmp	DeleteObject
0001AEBE                            ; ===========================================================================
0001AEBE 0000 0000                  off_19546:	dc.w loc_19574-off_19546, loc_19574-off_19546
0001AEC2 0000 0000                  		dc.w loc_1955A-off_19546, loc_19552-off_19546
0001AEC6 0000 0000                  		dc.w loc_19552-off_19546, loc_19556-off_19546
0001AECA                            ; ===========================================================================
0001AECA                            
0001AECA                            loc_19552:				; XREF: off_19546
0001AECA 720A                       		moveq	#$A,d1
0001AECC 4E75                       		rts	
0001AECE                            ; ===========================================================================
0001AECE                            
0001AECE                            loc_19556:				; XREF: off_19546
0001AECE 7206                       		moveq	#6,d1
0001AED0 4E75                       		rts	
0001AED2                            ; ===========================================================================
0001AED2                            
0001AED2                            loc_1955A:				; XREF: off_19546
0001AED2 7000                       		moveq	#0,d0
0001AED4 1029 0028                  		move.b	$28(a1),d0
0001AED8 303B 0000                  		move.w	off_19568(pc,d0.w),d0
0001AEDC 4EFB 0000                  		jmp	off_19568(pc,d0.w)
0001AEE0                            ; ===========================================================================
0001AEE0 0000 0000                  off_19568:	dc.w loc_19570-off_19568, loc_19572-off_19568
0001AEE4 0000 0000                  		dc.w loc_19570-off_19568, loc_19570-off_19568
0001AEE8                            ; ===========================================================================
0001AEE8                            
0001AEE8                            loc_19570:				; XREF: off_19568
0001AEE8 6000                       		bra.s	loc_19574
0001AEEA                            ; ===========================================================================
0001AEEA                            
0001AEEA                            loc_19572:				; XREF: off_19568
0001AEEA 7206                       		moveq	#6,d1
0001AEEC                            
0001AEEC                            loc_19574:				; XREF: off_19546
0001AEEC 4A29 0020                  		tst.b	$20(a1)
0001AEF0 6600                       		bne.s	loc_1957E
0001AEF2 7205                       		moveq	#5,d1
0001AEF4 4E75                       		rts	
0001AEF6                            ; ===========================================================================
0001AEF6                            
0001AEF6                            loc_1957E:
0001AEF6 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
0001AEFC 6500                       		bcs.s	locret_19588
0001AEFE 7204                       		moveq	#4,d1
0001AF00                            
0001AF00                            locret_19588:
0001AF00 4E75                       		rts	
0001AF02                            ; ===========================================================================
0001AF02                            
0001AF02                            Obj75_FlameMain:			; XREF: Obj75_Index
0001AF02 117C 0007 001C             		move.b	#7,$1C(a0)
0001AF08 2268 0034                  		movea.l	$34(a0),a1
0001AF0C 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
0001AF12 6600                       		bne.s	loc_195AA
0001AF14 117C 000B 001C             		move.b	#$B,$1C(a0)
0001AF1A 4A28 0001                  		tst.b	1(a0)
0001AF1E 6A00                       		bpl.s	Obj75_FlameDelete
0001AF20 6000                       		bra.s	loc_195B6
0001AF22                            ; ===========================================================================
0001AF22                            
0001AF22                            loc_195AA:
0001AF22 4A69 0010                  		tst.w	$10(a1)
0001AF26 6700                       		beq.s	loc_195B6
0001AF28 117C 0008 001C             		move.b	#8,$1C(a0)
0001AF2E                            
0001AF2E                            loc_195B6:
0001AF2E 6000                       		bra.s	loc_195BE
0001AF30                            ; ===========================================================================
0001AF30                            
0001AF30                            Obj75_FlameDelete:
0001AF30 4EF9 0000 E112             		jmp	DeleteObject
0001AF36                            ; ===========================================================================
0001AF36                            
0001AF36                            loc_195BE:
0001AF36 43F9 0001 963E             		lea	(Ani_Eggman).l,a1
0001AF3C 4EB9 0000 B1EE             		jsr	AnimateSprite
0001AF42 2268 0034                  		movea.l	$34(a0),a1
0001AF46 3169 0008 0008             		move.w	8(a1),8(a0)
0001AF4C 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001AF52                            
0001AF52                            loc_195DA:
0001AF52 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001AF58 7003                       		moveq	#3,d0
0001AF5A C028 0022                  		and.b	$22(a0),d0
0001AF5E 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001AF64 8128 0001                  		or.b	d0,1(a0)
0001AF68 4EF9 0000 E0D6             		jmp	DisplaySprite
0001AF6E                            ; ===========================================================================
0001AF6E                            
0001AF6E                            Obj75_SpikeMain:			; XREF: Obj75_Index
0001AF6E 217C 0001 9756 0004        		move.l	#Map_BossItems,4(a0)
0001AF76 317C 246C 0002             		move.w	#$246C,2(a0)
0001AF7C 117C 0005 001A             		move.b	#5,$1A(a0)
0001AF82 2268 0034                  		movea.l	$34(a0),a1
0001AF86 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
0001AF8C 6600                       		bne.s	loc_1961C
0001AF8E 4A28 0001                  		tst.b	1(a0)
0001AF92 6A00                       		bpl.s	Obj75_SpikeDelete
0001AF94                            
0001AF94                            loc_1961C:
0001AF94 3169 0008 0008             		move.w	8(a1),8(a0)
0001AF9A 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001AFA0 3028 003C                  		move.w	$3C(a0),d0
0001AFA4 0C29 0004 0025             		cmpi.b	#4,$25(a1)
0001AFAA 6600                       		bne.s	loc_19652
0001AFAC 0C29 0006 0028             		cmpi.b	#6,$28(a1)
0001AFB2 6700                       		beq.s	loc_1964C
0001AFB4 4A29 0028                  		tst.b	$28(a1)
0001AFB8 6600                       		bne.s	loc_19658
0001AFBA 0C40 0094                  		cmpi.w	#$94,d0
0001AFBE 6C00                       		bge.s	loc_19658
0001AFC0 5E40                       		addq.w	#7,d0
0001AFC2 6000                       		bra.s	loc_19658
0001AFC4                            ; ===========================================================================
0001AFC4                            
0001AFC4                            loc_1964C:
0001AFC4 4A69 003C                  		tst.w	$3C(a1)
0001AFC8 6A00                       		bpl.s	loc_19658
0001AFCA                            
0001AFCA                            loc_19652:
0001AFCA 4A40                       		tst.w	d0
0001AFCC 6F00                       		ble.s	loc_19658
0001AFCE 5B40                       		subq.w	#5,d0
0001AFD0                            
0001AFD0                            loc_19658:
0001AFD0 3140 003C                  		move.w	d0,$3C(a0)
0001AFD4 E440                       		asr.w	#2,d0
0001AFD6 D168 000C                  		add.w	d0,$C(a0)
0001AFDA 117C 0008 0019             		move.b	#8,$19(a0)
0001AFE0 117C 000C 0016             		move.b	#$C,$16(a0)
0001AFE6 4228 0020                  		clr.b	$20(a0)
0001AFEA 2268 0034                  		movea.l	$34(a0),a1
0001AFEE 4A29 0020                  		tst.b	$20(a1)
0001AFF2 6700                       		beq.s	loc_19688
0001AFF4 4A29 0029                  		tst.b	$29(a1)
0001AFF8 6600                       		bne.s	loc_19688
0001AFFA 117C 0084 0020             		move.b	#$84,$20(a0)
0001B000                            
0001B000                            loc_19688:
0001B000 6000 FF50                  		bra.w	loc_195DA
0001B004                            ; ===========================================================================
0001B004                            
0001B004                            Obj75_SpikeDelete:
0001B004 4EF9 0000 E112             		jmp	DeleteObject
0001B00A                            ; ===========================================================================
0001B00A                            ; ---------------------------------------------------------------------------
0001B00A                            ; Object 76 - blocks that Eggman picks up (SYZ)
0001B00A                            ; ---------------------------------------------------------------------------
0001B00A                            
0001B00A                            Obj76:					; XREF: Obj_Index
0001B00A 7000                       		moveq	#0,d0
0001B00C 1028 0024                  		move.b	$24(a0),d0
0001B010 323B 0000                  		move.w	Obj76_Index(pc,d0.w),d1
0001B014 4EFB 1000                  		jmp	Obj76_Index(pc,d1.w)
0001B018                            ; ===========================================================================
0001B018 0000                       Obj76_Index:	dc.w Obj76_Main-Obj76_Index
0001B01A 0000                       		dc.w Obj76_Action-Obj76_Index
0001B01C 0000                       		dc.w loc_19762-Obj76_Index
0001B01E                            ; ===========================================================================
0001B01E                            
0001B01E                            Obj76_Main:				; XREF: Obj76_Index
0001B01E 7800                       		moveq	#0,d4
0001B020 3A3C 2C10                  		move.w	#$2C10,d5
0001B024 7C09                       		moveq	#9,d6
0001B026 43D0                       		lea	(a0),a1
0001B028 6000                       		bra.s	Obj76_MakeBlock
0001B02A                            ; ===========================================================================
0001B02A                            
0001B02A                            Obj76_Loop:
0001B02A 4EB9 0000 E56C             		jsr	SingleObjLoad
0001B030 6600                       		bne.s	Obj76_ExitLoop
0001B032                            
0001B032                            Obj76_MakeBlock:			; XREF: Obj76_Main
0001B032 12BC 0076                  		move.b	#$76,(a1)
0001B036 237C 0000 0000 0004        		move.l	#Map_obj76,4(a1)
0001B03E 337C 4000 0002             		move.w	#$4000,2(a1)
0001B044 137C 0004 0001             		move.b	#4,1(a1)
0001B04A 137C 0010 0019             		move.b	#$10,$19(a1)
0001B050 137C 0010 0016             		move.b	#$10,$16(a1)
0001B056 137C 0003 0018             		move.b	#3,$18(a1)
0001B05C 3345 0008                  		move.w	d5,8(a1)	; set x-position
0001B060 337C 0582 000C             		move.w	#$582,$C(a1)
0001B066 3344 0028                  		move.w	d4,$28(a1)
0001B06A 0644 0101                  		addi.w	#$101,d4
0001B06E 0645 0020                  		addi.w	#$20,d5		; add $20 to next x-position
0001B072 5429 0024                  		addq.b	#2,$24(a1)
0001B076 51CE FFB2                  		dbf	d6,Obj76_Loop	; repeat sequence 9 more times
0001B07A                            
0001B07A                            Obj76_ExitLoop:
0001B07A 4E75                       		rts	
0001B07C                            ; ===========================================================================
0001B07C                            
0001B07C                            Obj76_Action:				; XREF: Obj76_Index
0001B07C 1028 0029                  		move.b	$29(a0),d0
0001B080 B028 0028                  		cmp.b	$28(a0),d0
0001B084 6700                       		beq.s	Obj76_Solid
0001B086 4A00                       		tst.b	d0
0001B088 6B00                       		bmi.s	loc_19718
0001B08A                            
0001B08A                            loc_19712:
0001B08A 6100 0000                  		bsr.w	Obj76_Break
0001B08E 6000                       		bra.s	Obj76_Display
0001B090                            ; ===========================================================================
0001B090                            
0001B090                            loc_19718:
0001B090 2268 0034                  		movea.l	$34(a0),a1
0001B094 4A29 0021                  		tst.b	$21(a1)
0001B098 67F0                       		beq.s	loc_19712
0001B09A 3169 0008 0008             		move.w	8(a1),8(a0)
0001B0A0 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001B0A6 0668 002C 000C             		addi.w	#$2C,$C(a0)
0001B0AC B2C8                       		cmpa.w	a0,a1
0001B0AE 6500                       		bcs.s	Obj76_Display
0001B0B0 3029 0012                  		move.w	$12(a1),d0
0001B0B4 48C0                       		ext.l	d0
0001B0B6 E080                       		asr.l	#8,d0
0001B0B8 D168 000C                  		add.w	d0,$C(a0)
0001B0BC 6000                       		bra.s	Obj76_Display
0001B0BE                            ; ===========================================================================
0001B0BE                            
0001B0BE                            Obj76_Solid:				; XREF: Obj76_Action
0001B0BE 323C 001B                  		move.w	#$1B,d1
0001B0C2 343C 0010                  		move.w	#$10,d2
0001B0C6 363C 0011                  		move.w	#$11,d3
0001B0CA 3828 0008                  		move.w	8(a0),d4
0001B0CE 4EB9 0001 04C0             		jsr	SolidObject
0001B0D4                            
0001B0D4                            Obj76_Display:				; XREF: Obj76_Action
0001B0D4 4EF9 0000 E0D6             		jmp	DisplaySprite
0001B0DA                            ; ===========================================================================
0001B0DA                            
0001B0DA                            loc_19762:				; XREF: Obj76_Index
0001B0DA 4A28 0001                  		tst.b	1(a0)
0001B0DE 6A00                       		bpl.s	Obj76_Delete
0001B0E0 4EB9 0000 E084             		jsr	ObjectFall
0001B0E6 4EF9 0000 E0D6             		jmp	DisplaySprite
0001B0EC                            ; ===========================================================================
0001B0EC                            
0001B0EC                            Obj76_Delete:
0001B0EC 4EF9 0000 E112             		jmp	DeleteObject
0001B0F2                            
0001B0F2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B0F2                            
0001B0F2                            
0001B0F2                            Obj76_Break:				; XREF: Obj76_Action
0001B0F2 49FA 0000                  		lea	Obj76_FragSpeed(pc),a4
0001B0F6 4BFA 0000                  		lea	Obj76_FragPos(pc),a5
0001B0FA 7801                       		moveq	#1,d4
0001B0FC 7203                       		moveq	#3,d1
0001B0FE 7438                       		moveq	#$38,d2
0001B100 5428 0024                  		addq.b	#2,$24(a0)
0001B104 117C 0008 0019             		move.b	#8,$19(a0)
0001B10A 117C 0008 0016             		move.b	#8,$16(a0)
0001B110 43D0                       		lea	(a0),a1
0001B112 6000                       		bra.s	Obj76_MakeFrag
0001B114                            ; ===========================================================================
0001B114                            
0001B114                            Obj76_LoopFrag:
0001B114 4EB9 0000 E582             		jsr	SingleObjLoad2
0001B11A 6600                       		bne.s	loc_197D4
0001B11C                            
0001B11C                            Obj76_MakeFrag:
0001B11C 45D0                       		lea	(a0),a2
0001B11E 47D1                       		lea	(a1),a3
0001B120 7603                       		moveq	#3,d3
0001B122                            
0001B122                            loc_197AA:
0001B122 26DA                       		move.l	(a2)+,(a3)+
0001B124 26DA                       		move.l	(a2)+,(a3)+
0001B126 26DA                       		move.l	(a2)+,(a3)+
0001B128 26DA                       		move.l	(a2)+,(a3)+
0001B12A 51CB FFF6                  		dbf	d3,loc_197AA
0001B12E                            
0001B12E 335C 0010                  		move.w	(a4)+,$10(a1)
0001B132 335C 0012                  		move.w	(a4)+,$12(a1)
0001B136 361D                       		move.w	(a5)+,d3
0001B138 D769 0008                  		add.w	d3,8(a1)
0001B13C 361D                       		move.w	(a5)+,d3
0001B13E D769 000C                  		add.w	d3,$C(a1)
0001B142 1344 001A                  		move.b	d4,$1A(a1)
0001B146 5244                       		addq.w	#1,d4
0001B148 51C9 FFCA                  		dbf	d1,Obj76_LoopFrag ; repeat sequence 3 more times
0001B14C                            
0001B14C                            loc_197D4:
0001B14C 303C 00CB                  		move.w	#$CB,d0
0001B150 4EF9 0000 147C             		jmp	(PlaySound_Special).l ;	play smashing sound
0001B156                            ; End of function Obj76_Break
0001B156                            
0001B156                            ; ===========================================================================
0001B156 FE80 FE00                  Obj76_FragSpeed:dc.w $FE80, $FE00
0001B15A 0180 FE00                  		dc.w $180, $FE00
0001B15E FF00 FF00                  		dc.w $FF00, $FF00
0001B162 0100 FF00                  		dc.w $100, $FF00
0001B166 FFF8 FFF8                  Obj76_FragPos:	dc.w $FFF8, $FFF8
0001B16A 0010 0000                  		dc.w $10, 0
0001B16E 0000 0010                  		dc.w 0,	$10
0001B172 0010 0010                  		dc.w $10, $10
0001B176                            ; ---------------------------------------------------------------------------
0001B176                            ; Sprite mappings - blocks that	Eggman picks up (SYZ)
0001B176                            ; ---------------------------------------------------------------------------
0001B176                            Map_obj76:
0001B176                            	include "_maps\obj76.asm"
0001B176                            ; ---------------------------------------------------------------------------
0001B176                            ; Sprite mappings - blocks that	Robotnik picks up (SYZ)
0001B176                            ; ---------------------------------------------------------------------------
0001B176 0000 0000                  		dc.w byte_19808-Map_obj76, byte_19814-Map_obj76
0001B17A 0000 0000                  		dc.w byte_1981A-Map_obj76, byte_19820-Map_obj76
0001B17E 0000                       		dc.w byte_19826-Map_obj76
0001B180 02                         byte_19808:	dc.b 2
0001B181 F00D 0071 F0               		dc.b $F0, $D, 0, $71, $F0
0001B186 000D 0079 F0               		dc.b 0,	$D, 0, $79, $F0
0001B18B 00                         		dc.b 0
0001B18C 01                         byte_19814:	dc.b 1
0001B18D F805 0071 F8               		dc.b $F8, 5, 0,	$71, $F8
0001B192 01                         byte_1981A:	dc.b 1
0001B193 F805 0075 F8               		dc.b $F8, 5, 0,	$75, $F8
0001B198 01                         byte_19820:	dc.b 1
0001B199 F805 0079 F8               		dc.b $F8, 5, 0,	$79, $F8
0001B19E 01                         byte_19826:	dc.b 1
0001B19F F805 007D F8               		dc.b $F8, 5, 0,	$7D, $F8
0001B1A4                            		even
0001B1A4                            		even
0001B1A4                            
0001B1A4                            ; ===========================================================================
0001B1A4                            
0001B1A4                            loc_1982C:				; XREF: loc_19C62; loc_19C80
0001B1A4 4EF9 0000 E112             		jmp	DeleteObject
0001B1AA                            ; ===========================================================================
0001B1AA                            ; ---------------------------------------------------------------------------
0001B1AA                            ; Object 82 - Eggman (SBZ2)
0001B1AA                            ; ---------------------------------------------------------------------------
0001B1AA                            
0001B1AA                            Obj82:					; XREF: Obj_Index
0001B1AA 7000                       		moveq	#0,d0
0001B1AC 1028 0024                  		move.b	$24(a0),d0
0001B1B0 323B 0000                  		move.w	Obj82_Index(pc,d0.w),d1
0001B1B4 4EFB 1000                  		jmp	Obj82_Index(pc,d1.w)
0001B1B8                            ; ===========================================================================
0001B1B8 0000                       Obj82_Index:	dc.w Obj82_Main-Obj82_Index
0001B1BA 0000                       		dc.w Obj82_Eggman-Obj82_Index
0001B1BC 0000                       		dc.w Obj82_Switch-Obj82_Index
0001B1BE                            
0001B1BE 0200 03                    Obj82_ObjData:	dc.b 2,	0, 3		; routine number, animation, priority
0001B1C1 0400 03                    		dc.b 4,	0, 3
0001B1C4                            ; ===========================================================================
0001B1C4                            
0001B1C4                            Obj82_Main:				; XREF: Obj82_Index
0001B1C4 45FA FFF8                  		lea	Obj82_ObjData(pc),a2
0001B1C8 317C 2160 0008             		move.w	#$2160,8(a0)
0001B1CE 317C 05A4 000C             		move.w	#$5A4,$C(a0)
0001B1D4 117C 000F 0020             		move.b	#$F,$20(a0)
0001B1DA 117C 0010 0021             		move.b	#$10,$21(a0)
0001B1E0 08A8 0000 0022             		bclr	#0,$22(a0)
0001B1E6 4228 0025                  		clr.b	$25(a0)
0001B1EA 115A 0024                  		move.b	(a2)+,$24(a0)
0001B1EE 115A 001C                  		move.b	(a2)+,$1C(a0)
0001B1F2 115A 0018                  		move.b	(a2)+,$18(a0)
0001B1F6 217C 0000 0000 0004        		move.l	#Map_obj82,4(a0)
0001B1FE 317C 0400 0002             		move.w	#$400,2(a0)
0001B204 117C 0004 0001             		move.b	#4,1(a0)
0001B20A 08E8 0007 0001             		bset	#7,1(a0)
0001B210 117C 0020 0019             		move.b	#$20,$19(a0)
0001B216 4EB9 0000 E582             		jsr	SingleObjLoad2
0001B21C 6600                       		bne.s	Obj82_Eggman
0001B21E 2348 0034                  		move.l	a0,$34(a1)
0001B222 12BC 0082                  		move.b	#$82,(a1)	; load switch object
0001B226 337C 2130 0008             		move.w	#$2130,8(a1)
0001B22C 337C 05BC 000C             		move.w	#$5BC,$C(a1)
0001B232 4228 0025                  		clr.b	$25(a0)
0001B236 135A 0024                  		move.b	(a2)+,$24(a1)
0001B23A 135A 001C                  		move.b	(a2)+,$1C(a1)
0001B23E 135A 0018                  		move.b	(a2)+,$18(a1)
0001B242 237C 0000 C976 0004        		move.l	#Map_obj32,4(a1)
0001B24A 337C 04A4 0002             		move.w	#$4A4,2(a1)
0001B250 137C 0004 0001             		move.b	#4,1(a1)
0001B256 08E9 0007 0001             		bset	#7,1(a1)
0001B25C 137C 0010 0019             		move.b	#$10,$19(a1)
0001B262 137C 0000 001A             		move.b	#0,$1A(a1)
0001B268                            
0001B268                            Obj82_Eggman:				; XREF: Obj82_Index
0001B268 7000                       		moveq	#0,d0
0001B26A 1028 0025                  		move.b	$25(a0),d0
0001B26E 323B 0000                  		move.w	Obj82_EggIndex(pc,d0.w),d1
0001B272 4EBB 1000                  		jsr	Obj82_EggIndex(pc,d1.w)
0001B276 43FA 0000                  		lea	Ani_obj82(pc),a1
0001B27A 4EB9 0000 B1EE             		jsr	AnimateSprite
0001B280 4EF9 0000 E0D6             		jmp	DisplaySprite
0001B286                            ; ===========================================================================
0001B286 0000                       Obj82_EggIndex:	dc.w Obj82_ChkSonic-Obj82_EggIndex
0001B288 0000                       		dc.w Obj82_PreLeap-Obj82_EggIndex
0001B28A 0000                       		dc.w Obj82_Leap-Obj82_EggIndex
0001B28C 0000                       		dc.w loc_19934-Obj82_EggIndex
0001B28E                            ; ===========================================================================
0001B28E                            
0001B28E                            Obj82_ChkSonic:				; XREF: Obj82_EggIndex
0001B28E 3028 0008                  		move.w	8(a0),d0
0001B292 9078 D008                  		sub.w	($FFFFD008).w,d0
0001B296 0C40 0080                  		cmpi.w	#128,d0		; is Sonic within 128 pixels of	Eggman?
0001B29A 6400                       		bcc.s	loc_19934	; if not, branch
0001B29C 5428 0025                  		addq.b	#2,$25(a0)
0001B2A0 317C 00B4 003C             		move.w	#180,$3C(a0)	; set delay to 3 seconds
0001B2A6 117C 0001 001C             		move.b	#1,$1C(a0)
0001B2AC                            
0001B2AC                            loc_19934:				; XREF: Obj82_EggIndex
0001B2AC 4EF9 0000 E0B0             		jmp	SpeedToPos
0001B2B2                            ; ===========================================================================
0001B2B2                            
0001B2B2                            Obj82_PreLeap:				; XREF: Obj82_EggIndex
0001B2B2 5368 003C                  		subq.w	#1,$3C(a0)	; subtract 1 from time delay
0001B2B6 6600                       		bne.s	loc_19954	; if time remains, branch
0001B2B8 5428 0025                  		addq.b	#2,$25(a0)
0001B2BC 117C 0002 001C             		move.b	#2,$1C(a0)
0001B2C2 5868 000C                  		addq.w	#4,$C(a0)
0001B2C6 317C 000F 003C             		move.w	#15,$3C(a0)
0001B2CC                            
0001B2CC                            loc_19954:
0001B2CC 60DE                       		bra.s	loc_19934
0001B2CE                            ; ===========================================================================
0001B2CE                            
0001B2CE                            Obj82_Leap:				; XREF: Obj82_EggIndex
0001B2CE 5368 003C                  		subq.w	#1,$3C(a0)
0001B2D2 6E00                       		bgt.s	loc_199D0
0001B2D4 6600                       		bne.s	loc_1996A
0001B2D6 317C FF04 0010             		move.w	#-$FC,$10(a0)	; make Eggman leap
0001B2DC 317C FC40 0012             		move.w	#-$3C0,$12(a0)
0001B2E2                            
0001B2E2                            loc_1996A:
0001B2E2 0C68 2132 0008             		cmpi.w	#$2132,8(a0)
0001B2E8 6E00                       		bgt.s	loc_19976
0001B2EA 4268 0010                  		clr.w	$10(a0)
0001B2EE                            
0001B2EE                            loc_19976:
0001B2EE 0668 0024 0012             		addi.w	#$24,$12(a0)
0001B2F4 4A68 0012                  		tst.w	$12(a0)
0001B2F8 6B00                       		bmi.s	Obj82_FindBlocks
0001B2FA 0C68 0595 000C             		cmpi.w	#$595,$C(a0)
0001B300 6500                       		bcs.s	Obj82_FindBlocks
0001B302 317C 5357 0028             		move.w	#$5357,$28(a0)
0001B308 0C68 059B 000C             		cmpi.w	#$59B,$C(a0)
0001B30E 6500                       		bcs.s	Obj82_FindBlocks
0001B310 317C 059B 000C             		move.w	#$59B,$C(a0)
0001B316 4268 0012                  		clr.w	$12(a0)
0001B31A                            
0001B31A                            Obj82_FindBlocks:
0001B31A 3028 0010                  		move.w	$10(a0),d0
0001B31E 8068 0012                  		or.w	$12(a0),d0
0001B322 6600                       		bne.s	loc_199D0
0001B324 43F8 D000                  		lea	($FFFFD000).w,a1 ; start at the	first object RAM
0001B328 703E                       		moveq	#$3E,d0
0001B32A 7240                       		moveq	#$40,d1
0001B32C                            
0001B32C                            Obj82_FindLoop:	
0001B32C D2C1                       		adda.w	d1,a1		; jump to next object RAM
0001B32E 0C11 0083                  		cmpi.b	#$83,(a1)	; is object a block? (object $83)
0001B332 57C8 FFF8                  		dbeq	d0,Obj82_FindLoop ; if not, repeat (max	$3E times)
0001B336                            
0001B336 6600                       		bne.s	loc_199D0
0001B338 337C 474F 0028             		move.w	#$474F,$28(a1)	; set block to disintegrate
0001B33E 5428 0025                  		addq.b	#2,$25(a0)
0001B342 117C 0001 001C             		move.b	#1,$1C(a0)
0001B348                            
0001B348                            loc_199D0:
0001B348 6000 FF62                  		bra.w	loc_19934
0001B34C                            ; ===========================================================================
0001B34C                            
0001B34C                            Obj82_Switch:				; XREF: Obj82_Index
0001B34C 7000                       		moveq	#0,d0
0001B34E 1028 0025                  		move.b	$25(a0),d0
0001B352 303B 0000                  		move.w	Obj82_SwIndex(pc,d0.w),d0
0001B356 4EFB 0000                  		jmp	Obj82_SwIndex(pc,d0.w)
0001B35A                            ; ===========================================================================
0001B35A 0000                       Obj82_SwIndex:	dc.w loc_199E6-Obj82_SwIndex
0001B35C 0000                       		dc.w Obj82_SwDisplay-Obj82_SwIndex
0001B35E                            ; ===========================================================================
0001B35E                            
0001B35E                            loc_199E6:				; XREF: Obj82_SwIndex
0001B35E 2268 0034                  		movea.l	$34(a0),a1
0001B362 0C69 5357 0028             		cmpi.w	#$5357,$28(a1)
0001B368 6600                       		bne.s	Obj82_SwDisplay
0001B36A 117C 0001 001A             		move.b	#1,$1A(a0)
0001B370 5428 0025                  		addq.b	#2,$25(a0)
0001B374                            
0001B374                            Obj82_SwDisplay:			; XREF: Obj82_SwIndex
0001B374 4EF9 0000 E0D6             		jmp	DisplaySprite
0001B37A                            ; ===========================================================================
0001B37A                            Ani_obj82:
0001B37A                            	include "_anim\obj82.asm"
0001B37A                            ; ---------------------------------------------------------------------------
0001B37A                            ; Animation script - Eggman (SBZ2)
0001B37A                            ; ---------------------------------------------------------------------------
0001B37A 0000                       		dc.w byte_19A10-Ani_obj82
0001B37C 0000                       		dc.w byte_19A14-Ani_obj82
0001B37E 0000                       		dc.w byte_19A18-Ani_obj82
0001B380 0000                       		dc.w byte_19A20-Ani_obj82
0001B382 0000                       		dc.w byte_19A24-Ani_obj82
0001B384 0000                       		dc.w byte_19A2A-Ani_obj82
0001B386 0000                       		dc.w byte_19A30-Ani_obj82
0001B388 7E00 FF00                  byte_19A10:	dc.b $7E, 0, $FF, 0
0001B38C 0601 02FF                  byte_19A14:	dc.b 6,	1, 2, $FF
0001B390 0E03 0404 0000 00FF        byte_19A18:	dc.b $E, 3, 4, 4, 0, 0,	0, $FF
0001B398 0005 09FF                  byte_19A20:	dc.b 0,	5, 9, $FF
0001B39C 0607 0408 04FF             byte_19A24:	dc.b 6,	7, 4, 8, 4, $FF
0001B3A2 0F04 0303 FF00             byte_19A2A:	dc.b $F, 4, 3, 3, $FF, 0
0001B3A8 7E06 FF00                  byte_19A30:	dc.b $7E, 6, $FF, 0
0001B3AC                            		even
0001B3AC                            		even
0001B3AC                            
0001B3AC                            ; ---------------------------------------------------------------------------
0001B3AC                            ; Sprite mappings - Eggman (SBZ2)
0001B3AC                            ; ---------------------------------------------------------------------------
0001B3AC                            Map_obj82:
0001B3AC                            	include "_maps\obj82.asm"
0001B3AC                            ; ---------------------------------------------------------------------------
0001B3AC                            ; Sprite mappings - Eggman (SBZ2)
0001B3AC                            ; ---------------------------------------------------------------------------
0001B3AC 0000 0000                  		dc.w byte_19A4A-Map_obj82, byte_19A5A-Map_obj82
0001B3B0 0000 0000                  		dc.w byte_19A70-Map_obj82, byte_19A86-Map_obj82
0001B3B4 0000 0000                  		dc.w byte_19A9C-Map_obj82, byte_19AB2-Map_obj82
0001B3B8 0000 0000                  		dc.w byte_19AC8-Map_obj82, byte_19AEC-Map_obj82
0001B3BC 0000 0000                  		dc.w byte_19B06-Map_obj82, byte_19B26-Map_obj82
0001B3C0 0000                       		dc.w byte_19B4F-Map_obj82
0001B3C2 03                         byte_19A4A:	dc.b 3
0001B3C3 FC00 008F E8               		dc.b $FC, 0, 0,	$8F, $E8
0001B3C8 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
0001B3CD 000F 006F F0               		dc.b 0,	$F, 0, $6F, $F0
0001B3D2 04                         byte_19A5A:	dc.b 4
0001B3D3 E80D 000E F0               		dc.b $E8, $D, 0, $E, $F0
0001B3D8 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
0001B3DD 000F 006F F0               		dc.b 0,	$F, 0, $6F, $F0
0001B3E2 FC00 008F E8               		dc.b $FC, 0, 0,	$8F, $E8
0001B3E7 00                         		dc.b 0
0001B3E8 04                         byte_19A70:	dc.b 4
0001B3E9 E90D 000E F0               		dc.b $E9, $D, 0, $E, $F0
0001B3EE E90E 0000 F0               		dc.b $E9, $E, 0, 0, $F0
0001B3F3 010F 007F F0               		dc.b 1,	$F, 0, $7F, $F0
0001B3F8 FD00 008F E8               		dc.b $FD, 0, 0,	$8F, $E8
0001B3FD 00                         		dc.b 0
0001B3FE 04                         byte_19A86:	dc.b 4
0001B3FF F40F 0820 F0               		dc.b $F4, $F, 8, $20, $F0
0001B404 F504 0830 10               		dc.b $F5, 4, 8,	$30, $10
0001B409 0809 084E F0               		dc.b 8,	9, 8, $4E, $F0
0001B40E EC0E 0000 F0               		dc.b $EC, $E, 0, 0, $F0
0001B413 00                         		dc.b 0
0001B414 04                         byte_19A9C:	dc.b 4
0001B415 F00F 0820 F0               		dc.b $F0, $F, 8, $20, $F0
0001B41A F104 0830 10               		dc.b $F1, 4, 8,	$30, $10
0001B41F 0806 083E F8               		dc.b 8,	6, 8, $3E, $F8
0001B424 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
0001B429 00                         		dc.b 0
0001B42A 04                         byte_19AB2:	dc.b 4
0001B42B E80D 0016 EC               		dc.b $E8, $D, 0, $16, $EC
0001B430 E801 001E 0C               		dc.b $E8, 1, 0,	$1E, $C
0001B435 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
0001B43A 000F 006F F0               		dc.b 0,	$F, 0, $6F, $F0
0001B43F 00                         		dc.b 0
0001B440 07                         byte_19AC8:	dc.b 7
0001B441 E80D 0016 EC               		dc.b $E8, $D, 0, $16, $EC
0001B446 E801 001E 0C               		dc.b $E8, 1, 0,	$1E, $C
0001B44B 0409 0834 00               		dc.b 4,	9, 8, $34, 0
0001B450 0405 083A E8               		dc.b 4,	5, 8, $3A, $E8
0001B455 F00F 0820 F0               		dc.b $F0, $F, 8, $20, $F0
0001B45A F104 0854 10               		dc.b $F1, 4, 8,	$54, $10
0001B45F F104 0054 E0               		dc.b $F1, 4, 0,	$54, $E0
0001B464 05                         byte_19AEC:	dc.b 5
0001B465 F00F 0820 F0               		dc.b $F0, $F, 8, $20, $F0
0001B46A F104 0830 10               		dc.b $F1, 4, 8,	$30, $10
0001B46F 0409 0834 00               		dc.b 4,	9, 8, $34, 0
0001B474 0405 083A E8               		dc.b 4,	5, 8, $3A, $E8
0001B479 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
0001B47E 06                         byte_19B06:	dc.b 6
0001B47F EE0F 0820 F0               		dc.b $EE, $F, 8, $20, $F0
0001B484 EF04 0830 10               		dc.b $EF, 4, 8,	$30, $10
0001B489 0905 0844 00               		dc.b 9,	5, 8, $44, 0
0001B48E 0301 0848 F8               		dc.b 3,	1, 8, $48, $F8
0001B493 0B05 084A E8               		dc.b $B, 5, 8, $4A, $E8
0001B498 E60E 0000 F0               		dc.b $E6, $E, 0, 0, $F0
0001B49D 00                         		dc.b 0
0001B49E 08                         byte_19B26:	dc.b 8
0001B49F E80D 0016 EC               		dc.b $E8, $D, 0, $16, $EC
0001B4A4 E801 001E 0C               		dc.b $E8, 1, 0,	$1E, $C
0001B4A9 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
0001B4AE 000F 006F F0               		dc.b 0,	$F, 0, $6F, $F0
0001B4B3 E00D 3EF0 F0               		dc.b $E0, $D, $3E, $F0,	$F0
0001B4B8 F00D 3EF0 F0               		dc.b $F0, $D, $3E, $F0,	$F0
0001B4BD 000D 3EF0 F0               		dc.b 0,	$D, $3E, $F0, $F0
0001B4C2 100D 3EF0 F0               		dc.b $10, $D, $3E, $F0,	$F0
0001B4C7 03                         byte_19B4F:	dc.b 3
0001B4C8 EC0D 0056 E4               		dc.b $EC, $D, 0, $56, $E4
0001B4CD F408 005E 04               		dc.b $F4, 8, 0,	$5E, 4
0001B4D2 EC0D 0061 FC               		dc.b $EC, $D, 0, $61, $FC
0001B4D8 00                         		even
0001B4D8 00                         		even
0001B4D8                            
0001B4D8                            ; ===========================================================================
0001B4D8                            ; ---------------------------------------------------------------------------
0001B4D8                            ; Object 83 - blocks that disintegrate Eggman	presses	a switch (SBZ2)
0001B4D8                            ; ---------------------------------------------------------------------------
0001B4D8                            
0001B4D8                            Obj83:					; XREF: Obj_Index
0001B4D8 7000                       		moveq	#0,d0
0001B4DA 1028 0024                  		move.b	$24(a0),d0
0001B4DE 323B 0000                  		move.w	Obj83_Index(pc,d0.w),d1
0001B4E2 4EFB 1000                  		jmp	Obj83_Index(pc,d1.w)
0001B4E6                            ; ===========================================================================
0001B4E6 0000                       Obj83_Index:	dc.w Obj83_Main-Obj83_Index
0001B4E8 0000                       		dc.w Obj83_ChkBreak-Obj83_Index
0001B4EA 0000                       		dc.w loc_19C36-Obj83_Index
0001B4EC 0000                       		dc.w loc_19C62-Obj83_Index
0001B4EE 0000                       		dc.w loc_19C72-Obj83_Index
0001B4F0 0000                       		dc.w loc_19C80-Obj83_Index
0001B4F2                            ; ===========================================================================
0001B4F2                            
0001B4F2                            Obj83_Main:				; XREF: Obj83_Index
0001B4F2 317C 2080 0008             		move.w	#$2080,8(a0)
0001B4F8 317C 05D0 000C             		move.w	#$5D0,$C(a0)
0001B4FE 117C 0080 0019             		move.b	#$80,$19(a0)
0001B504 117C 0010 0016             		move.b	#$10,$16(a0)
0001B50A 117C 0004 0001             		move.b	#4,1(a0)
0001B510 08E8 0007 0001             		bset	#7,1(a0)
0001B516 7800                       		moveq	#0,d4
0001B518 3A3C 2010                  		move.w	#$2010,d5
0001B51C 7C07                       		moveq	#7,d6
0001B51E 45E8 0030                  		lea	$30(a0),a2
0001B522                            
0001B522                            Obj83_MakeBlock:
0001B522 4EB9 0000 E56C             		jsr	SingleObjLoad
0001B528 6600                       		bne.s	Obj83_ExitMake
0001B52A 34C9                       		move.w	a1,(a2)+
0001B52C 12BC 0083                  		move.b	#$83,(a1)	; load block object
0001B530 237C 0000 0000 0004        		move.l	#Map_obj83,4(a1)
0001B538 337C 4518 0002             		move.w	#$4518,2(a1)
0001B53E 137C 0004 0001             		move.b	#4,1(a1)
0001B544 137C 0010 0019             		move.b	#$10,$19(a1)
0001B54A 137C 0010 0016             		move.b	#$10,$16(a1)
0001B550 137C 0003 0018             		move.b	#3,$18(a1)
0001B556 3345 0008                  		move.w	d5,8(a1)	; set X	position
0001B55A 337C 05D0 000C             		move.w	#$5D0,$C(a1)
0001B560 0645 0020                  		addi.w	#$20,d5		; add $20 for next X position
0001B564 137C 0008 0024             		move.b	#8,$24(a1)
0001B56A 51CE FFB6                  		dbf	d6,Obj83_MakeBlock ; repeat sequence 7 more times
0001B56E                            
0001B56E                            Obj83_ExitMake:
0001B56E 5428 0024                  		addq.b	#2,$24(a0)
0001B572 4E75                       		rts	
0001B574                            ; ===========================================================================
0001B574                            
0001B574                            Obj83_ChkBreak:				; XREF: Obj83_Index
0001B574 0C68 474F 0028             		cmpi.w	#$474F,$28(a0)	; is object set	to disintegrate?
0001B57A 6600                       		bne.s	Obj83_Solid	; if not, branch
0001B57C 4228 001A                  		clr.b	$1A(a0)
0001B580 5428 0024                  		addq.b	#2,$24(a0)	; next subroutine
0001B584                            
0001B584                            Obj83_Solid:
0001B584 7000                       		moveq	#0,d0
0001B586 1028 001A                  		move.b	$1A(a0),d0
0001B58A 4400                       		neg.b	d0
0001B58C 4880                       		ext.w	d0
0001B58E 5040                       		addq.w	#8,d0
0001B590 E940                       		asl.w	#4,d0
0001B592 383C 2100                  		move.w	#$2100,d4
0001B596 9840                       		sub.w	d0,d4
0001B598 1140 0019                  		move.b	d0,$19(a0)
0001B59C 3144 0008                  		move.w	d4,8(a0)
0001B5A0 720B                       		moveq	#$B,d1
0001B5A2 D240                       		add.w	d0,d1
0001B5A4 7410                       		moveq	#$10,d2
0001B5A6 7611                       		moveq	#$11,d3
0001B5A8 4EF9 0001 04C0             		jmp	SolidObject
0001B5AE                            ; ===========================================================================
0001B5AE                            
0001B5AE                            loc_19C36:				; XREF: Obj83_Index
0001B5AE 0428 000E 001E             		subi.b	#$E,$1E(a0)
0001B5B4 6400                       		bcc.s	Obj83_Solid2
0001B5B6 70FF                       		moveq	#-1,d0
0001B5B8 1028 001A                  		move.b	$1A(a0),d0
0001B5BC 4880                       		ext.w	d0
0001B5BE D040                       		add.w	d0,d0
0001B5C0 3030 0030                  		move.w	$30(a0,d0.w),d0
0001B5C4 2240                       		movea.l	d0,a1
0001B5C6 337C 474F 0028             		move.w	#$474F,$28(a1)
0001B5CC 5228 001A                  		addq.b	#1,$1A(a0)
0001B5D0 0C28 0008 001A             		cmpi.b	#8,$1A(a0)
0001B5D6 6700                       		beq.s	loc_19C62
0001B5D8                            
0001B5D8                            Obj83_Solid2:
0001B5D8 60AA                       		bra.s	Obj83_Solid
0001B5DA                            ; ===========================================================================
0001B5DA                            
0001B5DA                            loc_19C62:				; XREF: Obj83_Index
0001B5DA 08A8 0003 0022             		bclr	#3,$22(a0)
0001B5E0 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001B5E6 6000 FBBC                  		bra.w	loc_1982C
0001B5EA                            ; ===========================================================================
0001B5EA                            
0001B5EA                            loc_19C72:				; XREF: Obj83_Index
0001B5EA 0C68 474F 0028             		cmpi.w	#$474F,$28(a0)	; is object set	to disintegrate?
0001B5F0 6700                       		beq.s	Obj83_Break	; if yes, branch
0001B5F2 4EF9 0000 E0D6             		jmp	DisplaySprite
0001B5F8                            ; ===========================================================================
0001B5F8                            
0001B5F8                            loc_19C80:				; XREF: Obj83_Index
0001B5F8 4A28 0001                  		tst.b	1(a0)
0001B5FC 6A00 FBA6                  		bpl.w	loc_1982C
0001B600 4EB9 0000 E084             		jsr	ObjectFall
0001B606 4EF9 0000 E0D6             		jmp	DisplaySprite
0001B60C                            ; ===========================================================================
0001B60C                            
0001B60C                            Obj83_Break:				; XREF: loc_19C72
0001B60C 49FA 0000                  		lea	Obj83_FragSpeed(pc),a4
0001B610 4BFA 0000                  		lea	Obj83_FragPos(pc),a5
0001B614 7801                       		moveq	#1,d4
0001B616 7203                       		moveq	#3,d1
0001B618 7438                       		moveq	#$38,d2
0001B61A 5428 0024                  		addq.b	#2,$24(a0)
0001B61E 117C 0008 0019             		move.b	#8,$19(a0)
0001B624 117C 0008 0016             		move.b	#8,$16(a0)
0001B62A 43D0                       		lea	(a0),a1
0001B62C 6000                       		bra.s	Obj83_MakeFrag
0001B62E                            ; ===========================================================================
0001B62E                            
0001B62E                            Obj83_LoopFrag:
0001B62E 4EB9 0000 E582             		jsr	SingleObjLoad2
0001B634 6600                       		bne.s	Obj83_BreakSnd
0001B636                            
0001B636                            Obj83_MakeFrag:				; XREF: Obj83_Break
0001B636 45D0                       		lea	(a0),a2
0001B638 47D1                       		lea	(a1),a3
0001B63A 7603                       		moveq	#3,d3
0001B63C                            
0001B63C                            loc_19CC4:
0001B63C 26DA                       		move.l	(a2)+,(a3)+
0001B63E 26DA                       		move.l	(a2)+,(a3)+
0001B640 26DA                       		move.l	(a2)+,(a3)+
0001B642 26DA                       		move.l	(a2)+,(a3)+
0001B644 51CB FFF6                  		dbf	d3,loc_19CC4
0001B648                            
0001B648 335C 0012                  		move.w	(a4)+,$12(a1)
0001B64C 361D                       		move.w	(a5)+,d3
0001B64E D769 0008                  		add.w	d3,8(a1)
0001B652 361D                       		move.w	(a5)+,d3
0001B654 D769 000C                  		add.w	d3,$C(a1)
0001B658 1344 001A                  		move.b	d4,$1A(a1)
0001B65C 5244                       		addq.w	#1,d4
0001B65E 51C9 FFCE                  		dbf	d1,Obj83_LoopFrag ; repeat sequence 3 more times
0001B662                            
0001B662                            Obj83_BreakSnd:
0001B662 303C 00CB                  		move.w	#$CB,d0
0001B666 4EB9 0000 147C             		jsr	(PlaySound_Special).l ;	play smashing sound
0001B66C 4EF9 0000 E0D6             		jmp	DisplaySprite
0001B672                            ; ===========================================================================
0001B672 0080 0000                  Obj83_FragSpeed:dc.w $80, 0
0001B676 0120 00C0                  		dc.w $120, $C0
0001B67A FFF8 FFF8                  Obj83_FragPos:	dc.w $FFF8, $FFF8
0001B67E 0010 0000                  		dc.w $10, 0
0001B682 0000 0010                  		dc.w 0,	$10
0001B686 0010 0010                  		dc.w $10, $10
0001B68A                            ; ---------------------------------------------------------------------------
0001B68A                            ; Sprite mappings - blocks that	disintegrate when Eggman presses a switch
0001B68A                            ; ---------------------------------------------------------------------------
0001B68A                            Map_obj83:
0001B68A                            	include "_maps\obj83.asm"
0001B68A                            ; ---------------------------------------------------------------------------
0001B68A                            ; Sprite mappings - blocks that	disintegrate when Eggman presses a switch
0001B68A                            ; ---------------------------------------------------------------------------
0001B68A 0000 0000                  		dc.w byte_19D1C-Map_obj83, byte_19D22-Map_obj83
0001B68E 0000 0000                  		dc.w byte_19D2E-Map_obj83, byte_19D3A-Map_obj83
0001B692 0000                       		dc.w byte_19D46-Map_obj83
0001B694 01                         byte_19D1C:	dc.b 1
0001B695 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0001B69A 02                         byte_19D22:	dc.b 2
0001B69B F801 0000 F8               		dc.b $F8, 1, 0,	0, $F8
0001B6A0 F801 0004 00               		dc.b $F8, 1, 0,	4, 0
0001B6A5 00                         		dc.b 0
0001B6A6 02                         byte_19D2E:	dc.b 2
0001B6A7 F801 0008 F8               		dc.b $F8, 1, 0,	8, $F8
0001B6AC F801 000C 00               		dc.b $F8, 1, 0,	$C, 0
0001B6B1 00                         		dc.b 0
0001B6B2 02                         byte_19D3A:	dc.b 2
0001B6B3 F801 0002 F8               		dc.b $F8, 1, 0,	2, $F8
0001B6B8 F801 0006 00               		dc.b $F8, 1, 0,	6, 0
0001B6BD 00                         		dc.b 0
0001B6BE 02                         byte_19D46:	dc.b 2
0001B6BF F801 000A F8               		dc.b $F8, 1, 0,	$A, $F8
0001B6C4 F801 000E 00               		dc.b $F8, 1, 0,	$E, 0
0001B6CA 00                         		even
0001B6CA 00                         		even
0001B6CA                            
0001B6CA                            ; ===========================================================================
0001B6CA                            ; ---------------------------------------------------------------------------
0001B6CA                            ; Object 85 - Eggman (FZ)
0001B6CA                            ; ---------------------------------------------------------------------------
0001B6CA                            
0001B6CA                            Obj85_Delete:
0001B6CA 4EF9 0000 E112             		jmp	DeleteObject
0001B6D0                            ; ===========================================================================
0001B6D0                            
0001B6D0                            Obj85:					; XREF: Obj_Index
0001B6D0 7000                       		moveq	#0,d0
0001B6D2 1028 0024                  		move.b	$24(a0),d0
0001B6D6 303B 0000                  		move.w	Obj85_Index(pc,d0.w),d0
0001B6DA 4EFB 0000                  		jmp	Obj85_Index(pc,d0.w)
0001B6DE                            ; ===========================================================================
0001B6DE 0000                       Obj85_Index:	dc.w Obj85_Main-Obj85_Index
0001B6E0 0000                       		dc.w Obj85_Eggman-Obj85_Index
0001B6E2 0000                       		dc.w loc_1A38E-Obj85_Index
0001B6E4 0000                       		dc.w loc_1A346-Obj85_Index
0001B6E6 0000                       		dc.w loc_1A2C6-Obj85_Index
0001B6E8 0000                       		dc.w loc_1A3AC-Obj85_Index
0001B6EA 0000                       		dc.w loc_1A264-Obj85_Index
0001B6EC                            
0001B6EC 0100 0100 0470             Obj85_ObjData:	dc.w $100, $100, $470	; X pos, Y pos,	VRAM setting
0001B6F2 0001 B3AC                  		dc.l Map_obj82		; mappings pointer
0001B6F6 25B0 0590 0300             		dc.w $25B0, $590, $300
0001B6FC 0000 0000                  		dc.l Map_obj84
0001B700 26E0 0596 03A0             		dc.w $26E0, $596, $3A0
0001B706 0000 0000                  		dc.l Map_FZBoss
0001B70A 26E0 0596 0470             		dc.w $26E0, $596, $470
0001B710 0001 B3AC                  		dc.l Map_obj82
0001B714 26E0 0596 0400             		dc.w $26E0, $596, $400
0001B71A 0001 968E                  		dc.l Map_Eggman
0001B71E 26E0 0596 0400             		dc.w $26E0, $596, $400
0001B724 0001 968E                  		dc.l Map_Eggman
0001B728                            
0001B728 0200 0420 19               Obj85_ObjData2:	dc.b 2,	0, 4, $20, $19	; routine num, animation, sprite priority, width, height
0001B72D 0400 0112 08               		dc.b 4,	0, 1, $12, 8
0001B732 0600 0300 00               		dc.b 6,	0, 3, 0, 0
0001B737 0800 0300 00               		dc.b 8,	0, 3, 0, 0
0001B73C 0A00 0320 20               		dc.b $A, 0, 3, $20, $20
0001B741 0C00 0300 00               		dc.b $C, 0, 3, 0, 0
0001B746                            ; ===========================================================================
0001B746                            
0001B746                            Obj85_Main:				; XREF: Obj85_Index
0001B746 45FA FFA4                  		lea	Obj85_ObjData(pc),a2
0001B74A 47FA FFDC                  		lea	Obj85_ObjData2(pc),a3
0001B74E 2248                       		movea.l	a0,a1
0001B750 7205                       		moveq	#5,d1
0001B752 6000                       		bra.s	Obj85_LoadBoss
0001B754                            ; ===========================================================================
0001B754                            
0001B754                            Obj85_Loop:
0001B754 4EB9 0000 E582             		jsr	SingleObjLoad2
0001B75A 6600                       		bne.s	loc_19E20
0001B75C                            
0001B75C                            Obj85_LoadBoss:				; XREF: Obj85_Main
0001B75C 12BC 0085                  		move.b	#$85,(a1)
0001B760 335A 0008                  		move.w	(a2)+,8(a1)
0001B764 335A 000C                  		move.w	(a2)+,$C(a1)
0001B768 335A 0002                  		move.w	(a2)+,2(a1)
0001B76C 235A 0004                  		move.l	(a2)+,4(a1)
0001B770 135B 0024                  		move.b	(a3)+,$24(a1)
0001B774 135B 001C                  		move.b	(a3)+,$1C(a1)
0001B778 135B 0018                  		move.b	(a3)+,$18(a1)
0001B77C 135B 0017                  		move.b	(a3)+,$17(a1)
0001B780 135B 0016                  		move.b	(a3)+,$16(a1)
0001B784 137C 0004 0001             		move.b	#4,1(a1)
0001B78A 08E8 0007 0001             		bset	#7,1(a0)
0001B790 2348 0034                  		move.l	a0,$34(a1)
0001B794 51C9 FFBE                  		dbf	d1,Obj85_Loop
0001B798                            
0001B798                            loc_19E20:
0001B798 45E8 0036                  		lea	$36(a0),a2
0001B79C 4EB9 0000 E56C             		jsr	SingleObjLoad
0001B7A2 6600                       		bne.s	loc_19E5A
0001B7A4 12BC 0086                  		move.b	#$86,(a1)	; load energy ball object
0001B7A8 3489                       		move.w	a1,(a2)
0001B7AA 2348 0034                  		move.l	a0,$34(a1)
0001B7AE 45E8 0038                  		lea	$38(a0),a2
0001B7B2 7400                       		moveq	#0,d2
0001B7B4 7203                       		moveq	#3,d1
0001B7B6                            
0001B7B6                            loc_19E3E:
0001B7B6 4EB9 0000 E582             		jsr	SingleObjLoad2
0001B7BC 6600                       		bne.s	loc_19E5A
0001B7BE 34C9                       		move.w	a1,(a2)+
0001B7C0 12BC 0084                  		move.b	#$84,(a1)	; load crushing	cylinder object
0001B7C4 2348 0034                  		move.l	a0,$34(a1)
0001B7C8 1342 0028                  		move.b	d2,$28(a1)
0001B7CC 5442                       		addq.w	#2,d2
0001B7CE 51C9 FFE6                  		dbf	d1,loc_19E3E
0001B7D2                            
0001B7D2                            loc_19E5A:
0001B7D2 317C 0000 0034             		move.w	#0,$34(a0)
0001B7D8 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
0001B7DE 317C FFFF 0030             		move.w	#-1,$30(a0)
0001B7E4                            
0001B7E4                            Obj85_Eggman:				; XREF: Obj85_Index
0001B7E4 7000                       		moveq	#0,d0
0001B7E6 1028 0034                  		move.b	$34(a0),d0
0001B7EA 303B 0000                  		move.w	off_19E80(pc,d0.w),d0
0001B7EE 4EBB 0000                  		jsr	off_19E80(pc,d0.w)
0001B7F2 4EF9 0000 E0D6             		jmp	DisplaySprite
0001B7F8                            ; ===========================================================================
0001B7F8 0000 0000                  off_19E80:	dc.w loc_19E90-off_19E80, loc_19EA8-off_19E80
0001B7FC 0000 0000                  		dc.w loc_19FE6-off_19E80, loc_1A02A-off_19E80
0001B800 0000 0000                  		dc.w loc_1A074-off_19E80, loc_1A112-off_19E80
0001B804 0000 0000                  		dc.w loc_1A192-off_19E80, loc_1A1D4-off_19E80
0001B808                            ; ===========================================================================
0001B808                            
0001B808                            loc_19E90:				; XREF: off_19E80
0001B808 4AB8 F680                  		tst.l	($FFFFF680).w
0001B80C 6600                       		bne.s	loc_19EA2
0001B80E 0C78 2450 F700             		cmpi.w	#$2450,($FFFFF700).w
0001B814 6500                       		bcs.s	loc_19EA2
0001B816 5428 0034                  		addq.b	#2,$34(a0)
0001B81A                            
0001B81A                            loc_19EA2:
0001B81A 52B8 F636                  		addq.l	#1,($FFFFF636).w
0001B81E 4E75                       		rts	
0001B820                            ; ===========================================================================
0001B820                            
0001B820                            loc_19EA8:				; XREF: off_19E80
0001B820 4A68 0030                  		tst.w	$30(a0)
0001B824 6A00                       		bpl.s	loc_19F10
0001B826 4268 0030                  		clr.w	$30(a0)
0001B82A 4EB9 0000 33B4             		jsr	(RandomNumber).l
0001B830 0240 000C                  		andi.w	#$C,d0
0001B834 3200                       		move.w	d0,d1
0001B836 5441                       		addq.w	#2,d1
0001B838 4A80                       		tst.l	d0
0001B83A 6A00                       		bpl.s	loc_19EC6
0001B83C C340                       		exg	d1,d0
0001B83E                            
0001B83E                            loc_19EC6:
0001B83E 43FA 0000                  		lea	word_19FD6(pc),a1
0001B842 3031 0000                  		move.w	(a1,d0.w),d0
0001B846 3231 1000                  		move.w	(a1,d1.w),d1
0001B84A 3140 0030                  		move.w	d0,$30(a0)
0001B84E 74FF                       		moveq	#-1,d2
0001B850 3430 0038                  		move.w	$38(a0,d0.w),d2
0001B854 2242                       		movea.l	d2,a1
0001B856 137C 00FF 0029             		move.b	#-1,$29(a1)
0001B85C 337C FFFF 0030             		move.w	#-1,$30(a1)
0001B862 3430 1038                  		move.w	$38(a0,d1.w),d2
0001B866 2242                       		movea.l	d2,a1
0001B868 137C 0001 0029             		move.b	#1,$29(a1)
0001B86E 337C 0000 0030             		move.w	#0,$30(a1)
0001B874 317C 0001 0032             		move.w	#1,$32(a0)
0001B87A 4228 0035                  		clr.b	$35(a0)
0001B87E 303C 00B7                  		move.w	#$B7,d0
0001B882 4EB9 0000 147C             		jsr	(PlaySound_Special).l ;	play rumbling sound
0001B888                            
0001B888                            loc_19F10:
0001B888 4A68 0032                  		tst.w	$32(a0)
0001B88C 6B00 0000                  		bmi.w	loc_19FA6
0001B890 08A8 0000 0022             		bclr	#0,$22(a0)
0001B896 3038 D008                  		move.w	($FFFFD008).w,d0
0001B89A 9068 0008                  		sub.w	8(a0),d0
0001B89E 6500                       		bcs.s	loc_19F2E
0001B8A0 08E8 0000 0022             		bset	#0,$22(a0)
0001B8A6                            
0001B8A6                            loc_19F2E:
0001B8A6 323C 002B                  		move.w	#$2B,d1
0001B8AA 343C 0014                  		move.w	#$14,d2
0001B8AE 363C 0014                  		move.w	#$14,d3
0001B8B2 3828 0008                  		move.w	8(a0),d4
0001B8B6 4EB9 0001 04C0             		jsr	SolidObject
0001B8BC 4A44                       		tst.w	d4
0001B8BE 6E00                       		bgt.s	loc_19F50
0001B8C0                            
0001B8C0                            loc_19F48:
0001B8C0 4A28 0035                  		tst.b	$35(a0)
0001B8C4 6600                       		bne.s	loc_19F88
0001B8C6 6000                       		bra.s	loc_19F96
0001B8C8                            ; ===========================================================================
0001B8C8                            
0001B8C8                            loc_19F50:
0001B8C8 5E78 F636                  		addq.w	#7,($FFFFF636).w
0001B8CC 0C38 0002 D01C             		cmpi.b	#2,($FFFFD01C).w
0001B8D2 66EC                       		bne.s	loc_19F48
0001B8D4 303C 0300                  		move.w	#$300,d0
0001B8D8 0828 0000 0022             		btst	#0,$22(a0)
0001B8DE 6600                       		bne.s	loc_19F6A
0001B8E0 4440                       		neg.w	d0
0001B8E2                            
0001B8E2                            loc_19F6A:
0001B8E2 31C0 D010                  		move.w	d0,($FFFFD010).w
0001B8E6 4A28 0035                  		tst.b	$35(a0)
0001B8EA 6600                       		bne.s	loc_19F88
0001B8EC 5328 0021                  		subq.b	#1,$21(a0)
0001B8F0 117C 0064 0035             		move.b	#$64,$35(a0)
0001B8F6 303C 00AC                  		move.w	#$AC,d0
0001B8FA 4EB9 0000 147C             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001B900                            
0001B900                            loc_19F88:
0001B900 5328 0035                  		subq.b	#1,$35(a0)
0001B904 6700                       		beq.s	loc_19F96
0001B906 117C 0003 001C             		move.b	#3,$1C(a0)
0001B90C 6000                       		bra.s	loc_19F9C
0001B90E                            ; ===========================================================================
0001B90E                            
0001B90E                            loc_19F96:
0001B90E 117C 0001 001C             		move.b	#1,$1C(a0)
0001B914                            
0001B914                            loc_19F9C:
0001B914 43FA FA64                  		lea	Ani_obj82(pc),a1
0001B918 4EF9 0000 B1EE             		jmp	AnimateSprite
0001B91E                            ; ===========================================================================
0001B91E                            
0001B91E                            loc_19FA6:
0001B91E 4A28 0021                  		tst.b	$21(a0)
0001B922 6700                       		beq.s	loc_19FBC
0001B924 5428 0034                  		addq.b	#2,$34(a0)
0001B928 317C FFFF 0030             		move.w	#-1,$30(a0)
0001B92E 4268 0032                  		clr.w	$32(a0)
0001B932 4E75                       		rts	
0001B934                            ; ===========================================================================
0001B934                            
0001B934                            loc_19FBC:
0001B934 117C 0006 0034             		move.b	#6,$34(a0)
0001B93A 317C 25C0 0008             		move.w	#$25C0,8(a0)
0001B940 317C 053C 000C             		move.w	#$53C,$C(a0)
0001B946 117C 0014 0016             		move.b	#$14,$16(a0)
0001B94C 4E75                       		rts	
0001B94E                            ; ===========================================================================
0001B94E 0000 0002 0002 0004 0004+  word_19FD6:	dc.w 0,	2, 2, 4, 4, 6, 6, 0
0001B95E                            ; ===========================================================================
0001B95E                            
0001B95E                            loc_19FE6:				; XREF: off_19E80
0001B95E 70FF                       		moveq	#-1,d0
0001B960 3028 0036                  		move.w	$36(a0),d0
0001B964 2240                       		movea.l	d0,a1
0001B966 4A68 0030                  		tst.w	$30(a0)
0001B96A 6A00                       		bpl.s	loc_1A000
0001B96C 4268 0030                  		clr.w	$30(a0)
0001B970 137C 00FF 0029             		move.b	#-1,$29(a1)
0001B976 6100                       		bsr.s	loc_1A020
0001B978                            
0001B978                            loc_1A000:
0001B978 700F                       		moveq	#$F,d0
0001B97A C078 FE0E                  		and.w	($FFFFFE0E).w,d0
0001B97E 6600                       		bne.s	loc_1A00A
0001B980 6100                       		bsr.s	loc_1A020
0001B982                            
0001B982                            loc_1A00A:
0001B982 4A68 0032                  		tst.w	$32(a0)
0001B986 6700                       		beq.s	locret_1A01E
0001B988 5528 0034                  		subq.b	#2,$34(a0)
0001B98C 317C FFFF 0030             		move.w	#-1,$30(a0)
0001B992 4268 0032                  		clr.w	$32(a0)
0001B996                            
0001B996                            locret_1A01E:
0001B996 4E75                       		rts	
0001B998                            ; ===========================================================================
0001B998                            
0001B998                            loc_1A020:
0001B998 303C 00B1                  		move.w	#$B1,d0
0001B99C 4EF9 0000 147C             		jmp	(PlaySound_Special).l ;	play electricity sound
0001B9A2                            ; ===========================================================================
0001B9A2                            
0001B9A2                            loc_1A02A:				; XREF: off_19E80
0001B9A2 117C 0030 0017             		move.b	#$30,$17(a0)
0001B9A8 08E8 0000 0022             		bset	#0,$22(a0)
0001B9AE 4EB9 0000 E0B0             		jsr	SpeedToPos
0001B9B4 117C 0006 001A             		move.b	#6,$1A(a0)
0001B9BA 0668 0010 0012             		addi.w	#$10,$12(a0)
0001B9C0 0C68 059C 000C             		cmpi.w	#$59C,$C(a0)
0001B9C6 6500                       		bcs.s	loc_1A070
0001B9C8 317C 059C 000C             		move.w	#$59C,$C(a0)
0001B9CE 5428 0034                  		addq.b	#2,$34(a0)
0001B9D2 117C 0020 0017             		move.b	#$20,$17(a0)
0001B9D8 317C 0100 0010             		move.w	#$100,$10(a0)
0001B9DE 317C FF00 0012             		move.w	#-$100,$12(a0)
0001B9E4 5438 F742                  		addq.b	#2,($FFFFF742).w
0001B9E8                            
0001B9E8                            loc_1A070:
0001B9E8 6000 0000                  		bra.w	loc_1A166
0001B9EC                            ; ===========================================================================
0001B9EC                            
0001B9EC                            loc_1A074:				; XREF: off_19E80
0001B9EC 08E8 0000 0022             		bset	#0,$22(a0)
0001B9F2 117C 0004 001C             		move.b	#4,$1C(a0)
0001B9F8 4EB9 0000 E0B0             		jsr	SpeedToPos
0001B9FE 0668 0010 0012             		addi.w	#$10,$12(a0)
0001BA04 0C68 05A3 000C             		cmpi.w	#$5A3,$C(a0)
0001BA0A 6500                       		bcs.s	loc_1A09A
0001BA0C 317C FFC0 0012             		move.w	#-$40,$12(a0)
0001BA12                            
0001BA12                            loc_1A09A:
0001BA12 317C 0400 0010             		move.w	#$400,$10(a0)
0001BA18 3028 0008                  		move.w	8(a0),d0
0001BA1C 9078 D008                  		sub.w	($FFFFD008).w,d0
0001BA20 6A00                       		bpl.s	loc_1A0B4
0001BA22 317C 0500 0010             		move.w	#$500,$10(a0)
0001BA28 6000 0000                  		bra.w	loc_1A0F2
0001BA2C                            ; ===========================================================================
0001BA2C                            
0001BA2C                            loc_1A0B4:
0001BA2C 0440 0070                  		subi.w	#$70,d0
0001BA30 6500                       		bcs.s	loc_1A0F2
0001BA32 0468 0100 0010             		subi.w	#$100,$10(a0)
0001BA38 5140                       		subq.w	#8,d0
0001BA3A 6500                       		bcs.s	loc_1A0F2
0001BA3C 0468 0100 0010             		subi.w	#$100,$10(a0)
0001BA42 5140                       		subq.w	#8,d0
0001BA44 6500                       		bcs.s	loc_1A0F2
0001BA46 0468 0080 0010             		subi.w	#$80,$10(a0)
0001BA4C 5140                       		subq.w	#8,d0
0001BA4E 6500                       		bcs.s	loc_1A0F2
0001BA50 0468 0080 0010             		subi.w	#$80,$10(a0)
0001BA56 5140                       		subq.w	#8,d0
0001BA58 6500                       		bcs.s	loc_1A0F2
0001BA5A 0468 0080 0010             		subi.w	#$80,$10(a0)
0001BA60 0440 0038                  		subi.w	#$38,d0
0001BA64 6500                       		bcs.s	loc_1A0F2
0001BA66 4268 0010                  		clr.w	$10(a0)
0001BA6A                            
0001BA6A                            loc_1A0F2:
0001BA6A 0C68 26A0 0008             		cmpi.w	#$26A0,8(a0)
0001BA70 6500                       		bcs.s	loc_1A110
0001BA72 317C 26A0 0008             		move.w	#$26A0,8(a0)
0001BA78 317C 0240 0010             		move.w	#$240,$10(a0)
0001BA7E 317C FB40 0012             		move.w	#-$4C0,$12(a0)
0001BA84 5428 0034                  		addq.b	#2,$34(a0)
0001BA88                            
0001BA88                            loc_1A110:
0001BA88 6000                       		bra.s	loc_1A15C
0001BA8A                            ; ===========================================================================
0001BA8A                            
0001BA8A                            loc_1A112:				; XREF: off_19E80
0001BA8A 4EB9 0000 E0B0             		jsr	SpeedToPos
0001BA90 0C68 26E0 0008             		cmpi.w	#$26E0,8(a0)
0001BA96 6500                       		bcs.s	loc_1A124
0001BA98 4268 0010                  		clr.w	$10(a0)
0001BA9C                            
0001BA9C                            loc_1A124:
0001BA9C 0668 0034 0012             		addi.w	#$34,$12(a0)
0001BAA2 4A68 0012                  		tst.w	$12(a0)
0001BAA6 6B00                       		bmi.s	loc_1A142
0001BAA8 0C68 0592 000C             		cmpi.w	#$592,$C(a0)
0001BAAE 6500                       		bcs.s	loc_1A142
0001BAB0 317C 0592 000C             		move.w	#$592,$C(a0)
0001BAB6 4268 0012                  		clr.w	$12(a0)
0001BABA                            
0001BABA                            loc_1A142:
0001BABA 3028 0010                  		move.w	$10(a0),d0
0001BABE 8068 0012                  		or.w	$12(a0),d0
0001BAC2 6600                       		bne.s	loc_1A15C
0001BAC4 5428 0034                  		addq.b	#2,$34(a0)
0001BAC8 317C FE80 0012             		move.w	#-$180,$12(a0)
0001BACE 117C 0001 0021             		move.b	#1,$21(a0)
0001BAD4                            
0001BAD4                            loc_1A15C:
0001BAD4 43FA F8A4                  		lea	Ani_obj82(pc),a1
0001BAD8 4EB9 0000 B1EE             		jsr	AnimateSprite
0001BADE                            
0001BADE                            loc_1A166:
0001BADE 0C78 2700 F72A             		cmpi.w	#$2700,($FFFFF72A).w
0001BAE4 6C00                       		bge.s	loc_1A172
0001BAE6 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0001BAEA                            
0001BAEA                            loc_1A172:
0001BAEA 0C28 000C 0034             		cmpi.b	#$C,$34(a0)
0001BAF0 6C00                       		bge.s	locret_1A190
0001BAF2 323C 001B                  		move.w	#$1B,d1
0001BAF6 343C 0070                  		move.w	#$70,d2
0001BAFA 363C 0071                  		move.w	#$71,d3
0001BAFE 3828 0008                  		move.w	8(a0),d4
0001BB02 4EF9 0001 04C0             		jmp	SolidObject
0001BB08                            ; ===========================================================================
0001BB08                            
0001BB08                            locret_1A190:
0001BB08 4E75                       		rts	
0001BB0A                            ; ===========================================================================
0001BB0A                            
0001BB0A                            loc_1A192:				; XREF: off_19E80
0001BB0A 217C 0001 968E 0004        		move.l	#Map_Eggman,4(a0)
0001BB12 317C 0400 0002             		move.w	#$400,2(a0)
0001BB18 117C 0000 001C             		move.b	#0,$1C(a0)
0001BB1E 08E8 0000 0022             		bset	#0,$22(a0)
0001BB24 4EB9 0000 E0B0             		jsr	SpeedToPos
0001BB2A 0C68 0544 000C             		cmpi.w	#$544,$C(a0)
0001BB30 6400                       		bcc.s	loc_1A1D0
0001BB32 317C 0180 0010             		move.w	#$180,$10(a0)
0001BB38 317C FFE8 0012             		move.w	#-$18,$12(a0)
0001BB3E 117C 000F 0020             		move.b	#$F,$20(a0)
0001BB44 5428 0034                  		addq.b	#2,$34(a0)
0001BB48                            
0001BB48                            loc_1A1D0:
0001BB48 6000 FF8A                  		bra.w	loc_1A15C
0001BB4C                            ; ===========================================================================
0001BB4C                            
0001BB4C                            loc_1A1D4:				; XREF: off_19E80
0001BB4C 08E8 0000 0022             		bset	#0,$22(a0)
0001BB52 4EB9 0000 E0B0             		jsr	SpeedToPos
0001BB58 4A68 0030                  		tst.w	$30(a0)
0001BB5C 6600                       		bne.s	loc_1A1FC
0001BB5E 4A28 0020                  		tst.b	$20(a0)
0001BB62 6600                       		bne.s	loc_1A216
0001BB64 317C 001E 0030             		move.w	#$1E,$30(a0)
0001BB6A 303C 00AC                  		move.w	#$AC,d0
0001BB6E 4EB9 0000 147C             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001BB74                            
0001BB74                            loc_1A1FC:
0001BB74 5368 0030                  		subq.w	#1,$30(a0)
0001BB78 6600                       		bne.s	loc_1A216
0001BB7A 4A28 0022                  		tst.b	$22(a0)
0001BB7E 6A00                       		bpl.s	loc_1A210
0001BB80 317C 0060 0012             		move.w	#$60,$12(a0)
0001BB86 6000                       		bra.s	loc_1A216
0001BB88                            ; ===========================================================================
0001BB88                            
0001BB88                            loc_1A210:
0001BB88 117C 000F 0020             		move.b	#$F,$20(a0)
0001BB8E                            
0001BB8E                            loc_1A216:
0001BB8E 0C78 2790 D008             		cmpi.w	#$2790,($FFFFD008).w
0001BB94 6D00                       		blt.s	loc_1A23A
0001BB96 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w
0001BB9C 31FC 0000 F602             		move.w	#0,($FFFFF602).w
0001BBA2 4278 D014                  		clr.w	($FFFFD014).w
0001BBA6 4A68 0012                  		tst.w	$12(a0)
0001BBAA 6A00                       		bpl.s	loc_1A248
0001BBAC 31FC 0100 F602             		move.w	#$100,($FFFFF602).w
0001BBB2                            
0001BBB2                            loc_1A23A:
0001BBB2 0C78 27E0 D008             		cmpi.w	#$27E0,($FFFFD008).w
0001BBB8 6D00                       		blt.s	loc_1A248
0001BBBA 31FC 27E0 D008             		move.w	#$27E0,($FFFFD008).w
0001BBC0                            
0001BBC0                            loc_1A248:
0001BBC0 0C68 2900 0008             		cmpi.w	#$2900,8(a0)
0001BBC6 6500                       		bcs.s	loc_1A260
0001BBC8 4A28 0001                  		tst.b	1(a0)
0001BBCC 6B00                       		bmi.s	loc_1A260
0001BBCE 11FC 0018 F600             		move.b	#$18,($FFFFF600).w
0001BBD4 6000 FAF4                  		bra.w	Obj85_Delete
0001BBD8                            ; ===========================================================================
0001BBD8                            
0001BBD8                            loc_1A260:
0001BBD8 6000 FEFA                  		bra.w	loc_1A15C
0001BBDC                            ; ===========================================================================
0001BBDC                            
0001BBDC                            loc_1A264:				; XREF: Obj85_Index
0001BBDC 2268 0034                  		movea.l	$34(a0),a1
0001BBE0 1011                       		move.b	(a1),d0
0001BBE2 B010                       		cmp.b	(a0),d0
0001BBE4 6600 FAE4                  		bne.w	Obj85_Delete
0001BBE8 117C 0007 001C             		move.b	#7,$1C(a0)
0001BBEE 0C29 000C 0034             		cmpi.b	#$C,$34(a1)
0001BBF4 6C00                       		bge.s	loc_1A280
0001BBF6 6000                       		bra.s	loc_1A2A6
0001BBF8                            ; ===========================================================================
0001BBF8                            
0001BBF8                            loc_1A280:
0001BBF8 4A69 0010                  		tst.w	$10(a1)
0001BBFC 6700                       		beq.s	loc_1A28C
0001BBFE 117C 000B 001C             		move.b	#$B,$1C(a0)
0001BC04                            
0001BC04                            loc_1A28C:
0001BC04 43FA DA38                  		lea	Ani_Eggman(pc),a1
0001BC08 4EB9 0000 B1EE             		jsr	AnimateSprite
0001BC0E                            
0001BC0E                            loc_1A296:
0001BC0E 2268 0034                  		movea.l	$34(a0),a1
0001BC12 3169 0008 0008             		move.w	8(a1),8(a0)
0001BC18 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001BC1E                            
0001BC1E                            loc_1A2A6:
0001BC1E 2268 0034                  		movea.l	$34(a0),a1
0001BC22 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001BC28 7003                       		moveq	#3,d0
0001BC2A C028 0022                  		and.b	$22(a0),d0
0001BC2E 0228 00FC 0001             		andi.b	#-4,1(a0)
0001BC34 8128 0001                  		or.b	d0,1(a0)
0001BC38 4EF9 0000 E0D6             		jmp	DisplaySprite
0001BC3E                            ; ===========================================================================
0001BC3E                            
0001BC3E                            loc_1A2C6:				; XREF: Obj85_Index
0001BC3E 2268 0034                  		movea.l	$34(a0),a1
0001BC42 1011                       		move.b	(a1),d0
0001BC44 B010                       		cmp.b	(a0),d0
0001BC46 6600 FA82                  		bne.w	Obj85_Delete
0001BC4A 0CA9 0001 968E 0004        		cmpi.l	#Map_Eggman,4(a1)
0001BC52 6700                       		beq.s	loc_1A2E4
0001BC54 117C 000A 001A             		move.b	#$A,$1A(a0)
0001BC5A 60C2                       		bra.s	loc_1A2A6
0001BC5C                            ; ===========================================================================
0001BC5C                            
0001BC5C                            loc_1A2E4:
0001BC5C 117C 0001 001C             		move.b	#1,$1C(a0)
0001BC62 4A29 0021                  		tst.b	$21(a1)
0001BC66 6F00                       		ble.s	loc_1A312
0001BC68 117C 0006 001C             		move.b	#6,$1C(a0)
0001BC6E 217C 0001 968E 0004        		move.l	#Map_Eggman,4(a0)
0001BC76 317C 0400 0002             		move.w	#$400,2(a0)
0001BC7C 43FA D9C0                  		lea	Ani_Eggman(pc),a1
0001BC80 4EB9 0000 B1EE             		jsr	AnimateSprite
0001BC86 6000 FF86                  		bra.w	loc_1A296
0001BC8A                            ; ===========================================================================
0001BC8A                            
0001BC8A                            loc_1A312:
0001BC8A 4A28 0001                  		tst.b	1(a0)
0001BC8E 6A00 FA3A                  		bpl.w	Obj85_Delete
0001BC92 6100 D558                  		bsr.w	BossDefeated
0001BC96 117C 0002 0018             		move.b	#2,$18(a0)
0001BC9C 117C 0000 001C             		move.b	#0,$1C(a0)
0001BCA2 217C 0000 0000 0004        		move.l	#Map_Eggman2,4(a0)
0001BCAA 317C 03A0 0002             		move.w	#$3A0,2(a0)
0001BCB0 43FA 0000                  		lea	Ani_obj85(pc),a1
0001BCB4 4EB9 0000 B1EE             		jsr	AnimateSprite
0001BCBA 6000 FF52                  		bra.w	loc_1A296
0001BCBE                            ; ===========================================================================
0001BCBE                            
0001BCBE                            loc_1A346:				; XREF: Obj85_Index
0001BCBE 08E8 0000 0022             		bset	#0,$22(a0)
0001BCC4 2268 0034                  		movea.l	$34(a0),a1
0001BCC8 0CA9 0001 968E 0004        		cmpi.l	#Map_Eggman,4(a1)
0001BCD0 6700                       		beq.s	loc_1A35E
0001BCD2 6000 FF4A                  		bra.w	loc_1A2A6
0001BCD6                            ; ===========================================================================
0001BCD6                            
0001BCD6                            loc_1A35E:
0001BCD6 3169 0008 0008             		move.w	8(a1),8(a0)
0001BCDC 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001BCE2 4A28 001E                  		tst.b	$1E(a0)
0001BCE6 6600                       		bne.s	loc_1A376
0001BCE8 117C 0014 001E             		move.b	#$14,$1E(a0)
0001BCEE                            
0001BCEE                            loc_1A376:
0001BCEE 5328 001E                  		subq.b	#1,$1E(a0)
0001BCF2 6E00                       		bgt.s	loc_1A38A
0001BCF4 5228 001A                  		addq.b	#1,$1A(a0)
0001BCF8 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0001BCFE 6E00 F9CA                  		bgt.w	Obj85_Delete
0001BD02                            
0001BD02                            loc_1A38A:
0001BD02 6000 FF0A                  		bra.w	loc_1A296
0001BD06                            ; ===========================================================================
0001BD06                            
0001BD06                            loc_1A38E:				; XREF: Obj85_Index
0001BD06 117C 000B 001A             		move.b	#$B,$1A(a0)
0001BD0C 3038 D008                  		move.w	($FFFFD008).w,d0
0001BD10 9068 0008                  		sub.w	8(a0),d0
0001BD14 6500                       		bcs.s	loc_1A3A6
0001BD16 4A28 0001                  		tst.b	1(a0)
0001BD1A 6A00 F9AE                  		bpl.w	Obj85_Delete
0001BD1E                            
0001BD1E                            loc_1A3A6:
0001BD1E 4EF9 0000 E0D6             		jmp	DisplaySprite
0001BD24                            ; ===========================================================================
0001BD24                            
0001BD24                            loc_1A3AC:				; XREF: Obj85_Index
0001BD24 117C 0000 001A             		move.b	#0,$1A(a0)
0001BD2A 08E8 0000 0022             		bset	#0,$22(a0)
0001BD30 2268 0034                  		movea.l	$34(a0),a1
0001BD34 0C29 000C 0034             		cmpi.b	#$C,$34(a1)
0001BD3A 6600                       		bne.s	loc_1A3D0
0001BD3C 0CA9 0001 968E 0004        		cmpi.l	#Map_Eggman,4(a1)
0001BD44 6700 F984                  		beq.w	Obj85_Delete
0001BD48                            
0001BD48                            loc_1A3D0:
0001BD48 6000 FED4                  		bra.w	loc_1A2A6
0001BD4C                            ; ===========================================================================
0001BD4C                            Ani_obj85:
0001BD4C                            	include "_anim\obj85.asm"
0001BD4C                            ; ---------------------------------------------------------------------------
0001BD4C                            ; Animation script - Eggman (FZ)
0001BD4C                            ; ---------------------------------------------------------------------------
0001BD4C 0000                       		dc.w byte_1A3D6-Ani_obj85
0001BD4E 0300 01FF                  byte_1A3D6:	dc.b 3,	0, 1, $FF
0001BD52                            		even
0001BD52                            		even
0001BD52                            
0001BD52                            Map_Eggman2:
0001BD52                            	include "_maps\Eggman2.asm"
0001BD52                            ; ---------------------------------------------------------------------------
0001BD52                            ; Sprite mappings - Eggman (FZ)
0001BD52                            ; ---------------------------------------------------------------------------
0001BD52 0000                       		dc.w byte_1A3DE-Map_Eggman2
0001BD54 0000                       		dc.w byte_1A3FD-Map_Eggman2
0001BD56 06                         byte_1A3DE:	dc.b 6
0001BD57 E408 0020 F4               		dc.b $E4, 8, 0,	$20, $F4
0001BD5C EC0D 0023 E4               		dc.b $EC, $D, 0, $23, $E4
0001BD61 EC09 002B 04               		dc.b $EC, 9, 0,	$2B, 4
0001BD66 FC05 203A E4               		dc.b $FC, 5, $20, $3A, $E4
0001BD6B FC0E 203E 04               		dc.b $FC, $E, $20, $3E,	4
0001BD70 1404 204A 04               		dc.b $14, 4, $20, $4A, 4
0001BD75 06                         byte_1A3FD:	dc.b 6
0001BD76 E40A 0031 F4               		dc.b $E4, $A, 0, $31, $F4
0001BD7B EC05 0023 E4               		dc.b $EC, 5, 0,	$23, $E4
0001BD80 EC09 002B 04               		dc.b $EC, 9, 0,	$2B, 4
0001BD85 FC05 203A E4               		dc.b $FC, 5, $20, $3A, $E4
0001BD8A FC0E 203E 04               		dc.b $FC, $E, $20, $3E,	4
0001BD8F 1404 204A 04               		dc.b $14, 4, $20, $4A, 4
0001BD94                            		even
0001BD94                            		even
0001BD94                            
0001BD94                            Map_FZBoss:
0001BD94                            	include "_maps\FZ boss.asm"
0001BD94                            ; ---------------------------------------------------------------------------
0001BD94                            ; Sprite mappings - boss (FZ)
0001BD94                            ; ---------------------------------------------------------------------------
0001BD94 0000                       		dc.w byte_1A422-Map_FZBoss
0001BD96 0000                       		dc.w byte_1A42D-Map_FZBoss
0001BD98 0000                       		dc.w byte_1A43D-Map_FZBoss
0001BD9A 02                         byte_1A422:	dc.b 2
0001BD9B 140E 2800 F4               		dc.b $14, $E, $28, 0, $F4
0001BDA0 2400 280C EC               		dc.b $24, 0, $28, $C, $EC
0001BDA5 03                         byte_1A42D:	dc.b 3
0001BDA6 0C05 280D 0C               		dc.b $C, 5, $28, $D, $C
0001BDAB 1C00 2811 0C               		dc.b $1C, 0, $28, $11, $C
0001BDB0 140D 2812 EC               		dc.b $14, $D, $28, $12,	$EC
0001BDB5 02                         byte_1A43D:	dc.b 2
0001BDB6 0C01 281A 0C               		dc.b $C, 1, $28, $1A, $C
0001BDBB 140C 281C EC               		dc.b $14, $C, $28, $1C,	$EC
0001BDC0                            		even
0001BDC0                            		even
0001BDC0                            
0001BDC0                            ; ===========================================================================
0001BDC0                            
0001BDC0                            Obj84_Delete:
0001BDC0 4EF9 0000 E112             		jmp	DeleteObject
0001BDC6                            ; ===========================================================================
0001BDC6                            ; ---------------------------------------------------------------------------
0001BDC6                            ; Object 84 - cylinder Eggman	hides in (FZ)
0001BDC6                            ; ---------------------------------------------------------------------------
0001BDC6                            
0001BDC6                            Obj84:					; XREF: Obj_Index
0001BDC6 7000                       		moveq	#0,d0
0001BDC8 1028 0024                  		move.b	$24(a0),d0
0001BDCC 303B 0000                  		move.w	Obj84_Index(pc,d0.w),d0
0001BDD0 4EFB 0000                  		jmp	Obj84_Index(pc,d0.w)
0001BDD4                            ; ===========================================================================
0001BDD4 0000                       Obj84_Index:	dc.w Obj84_Main-Obj84_Index
0001BDD6 0000                       		dc.w loc_1A4CE-Obj84_Index
0001BDD8 0000                       		dc.w loc_1A57E-Obj84_Index
0001BDDA                            
0001BDDA 24D0 0620                  Obj84_PosData:	dc.w $24D0, $620
0001BDDE 2550 0620                  		dc.w $2550, $620
0001BDE2 2490 04C0                  		dc.w $2490, $4C0
0001BDE6 2510 04C0                  		dc.w $2510, $4C0
0001BDEA                            ; ===========================================================================
0001BDEA                            
0001BDEA                            Obj84_Main:				; XREF: Obj84_Index
0001BDEA 43FA FFEE                  		lea	Obj84_PosData(pc),a1
0001BDEE 7000                       		moveq	#0,d0
0001BDF0 1028 0028                  		move.b	$28(a0),d0
0001BDF4 D040                       		add.w	d0,d0
0001BDF6 D2C0                       		adda.w	d0,a1
0001BDF8 117C 0004 0001             		move.b	#4,1(a0)
0001BDFE 08E8 0007 0001             		bset	#7,1(a0)
0001BE04 08E8 0004 0001             		bset	#4,1(a0)
0001BE0A 317C 0300 0002             		move.w	#$300,2(a0)
0001BE10 217C 0000 0000 0004        		move.l	#Map_obj84,4(a0)
0001BE18 3159 0008                  		move.w	(a1)+,8(a0)
0001BE1C 3151 000C                  		move.w	(a1),$C(a0)
0001BE20 3159 0038                  		move.w	(a1)+,$38(a0)
0001BE24 117C 0020 0016             		move.b	#$20,$16(a0)
0001BE2A 117C 0060 0017             		move.b	#$60,$17(a0)
0001BE30 117C 0020 0019             		move.b	#$20,$19(a0)
0001BE36 117C 0060 0016             		move.b	#$60,$16(a0)
0001BE3C 117C 0003 0018             		move.b	#3,$18(a0)
0001BE42 5428 0024                  		addq.b	#2,$24(a0)
0001BE46                            
0001BE46                            loc_1A4CE:				; XREF: Obj84_Index
0001BE46 0C28 0002 0028             		cmpi.b	#2,$28(a0)
0001BE4C 6F00                       		ble.s	loc_1A4DC
0001BE4E 08E8 0001 0001             		bset	#1,1(a0)
0001BE54                            
0001BE54                            loc_1A4DC:
0001BE54 42A8 003C                  		clr.l	$3C(a0)
0001BE58 4A28 0029                  		tst.b	$29(a0)
0001BE5C 6700                       		beq.s	loc_1A4EA
0001BE5E 5428 0024                  		addq.b	#2,$24(a0)
0001BE62                            
0001BE62                            loc_1A4EA:
0001BE62 2028 003C                  		move.l	$3C(a0),d0
0001BE66 2228 0038                  		move.l	$38(a0),d1
0001BE6A D280                       		add.l	d0,d1
0001BE6C 4841                       		swap	d1
0001BE6E 3141 000C                  		move.w	d1,$C(a0)
0001BE72 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0001BE78 6600                       		bne.s	loc_1A524
0001BE7A 4A68 0030                  		tst.w	$30(a0)
0001BE7E 6A00                       		bpl.s	loc_1A524
0001BE80 70F6                       		moveq	#-$A,d0
0001BE82 0C28 0002 0028             		cmpi.b	#2,$28(a0)
0001BE88 6F00                       		ble.s	loc_1A514
0001BE8A 700E                       		moveq	#$E,d0
0001BE8C                            
0001BE8C                            loc_1A514:
0001BE8C D240                       		add.w	d0,d1
0001BE8E 2268 0034                  		movea.l	$34(a0),a1
0001BE92 3341 000C                  		move.w	d1,$C(a1)
0001BE96 3368 0008 0008             		move.w	8(a0),8(a1)
0001BE9C                            
0001BE9C                            loc_1A524:
0001BE9C 323C 002B                  		move.w	#$2B,d1
0001BEA0 343C 0060                  		move.w	#$60,d2
0001BEA4 363C 0061                  		move.w	#$61,d3
0001BEA8 3828 0008                  		move.w	8(a0),d4
0001BEAC 4EB9 0001 04C0             		jsr	SolidObject
0001BEB2 7000                       		moveq	#0,d0
0001BEB4 3228 003C                  		move.w	$3C(a0),d1
0001BEB8 6A00                       		bpl.s	loc_1A550
0001BEBA 4441                       		neg.w	d1
0001BEBC 5141                       		subq.w	#8,d1
0001BEBE 6500                       		bcs.s	loc_1A55C
0001BEC0 5200                       		addq.b	#1,d0
0001BEC2 E841                       		asr.w	#4,d1
0001BEC4 D041                       		add.w	d1,d0
0001BEC6 6000                       		bra.s	loc_1A55C
0001BEC8                            ; ===========================================================================
0001BEC8                            
0001BEC8                            loc_1A550:
0001BEC8 0441 0027                  		subi.w	#$27,d1
0001BECC 6500                       		bcs.s	loc_1A55C
0001BECE 5200                       		addq.b	#1,d0
0001BED0 E841                       		asr.w	#4,d1
0001BED2 D041                       		add.w	d1,d0
0001BED4                            
0001BED4                            loc_1A55C:
0001BED4 1140 001A                  		move.b	d0,$1A(a0)
0001BED8 3038 D008                  		move.w	($FFFFD008).w,d0
0001BEDC 9068 0008                  		sub.w	8(a0),d0
0001BEE0 6B00                       		bmi.s	loc_1A578
0001BEE2 0440 0140                  		subi.w	#$140,d0
0001BEE6 6B00                       		bmi.s	loc_1A578
0001BEE8 4A28 0001                  		tst.b	1(a0)
0001BEEC 6A00 FED2                  		bpl.w	Obj84_Delete
0001BEF0                            
0001BEF0                            loc_1A578:
0001BEF0 4EF9 0000 E0D6             		jmp	DisplaySprite
0001BEF6                            ; ===========================================================================
0001BEF6                            
0001BEF6                            loc_1A57E:				; XREF: Obj84_Index
0001BEF6 7000                       		moveq	#0,d0
0001BEF8 1028 0028                  		move.b	$28(a0),d0
0001BEFC 303B 0000                  		move.w	off_1A590(pc,d0.w),d0
0001BF00 4EBB 0000                  		jsr	off_1A590(pc,d0.w)
0001BF04 6000 FF5C                  		bra.w	loc_1A4EA
0001BF08                            ; ===========================================================================
0001BF08 0000                       off_1A590:	dc.w loc_1A598-off_1A590
0001BF0A 0000                       		dc.w loc_1A598-off_1A590
0001BF0C 0000                       		dc.w loc_1A604-off_1A590
0001BF0E 0000                       		dc.w loc_1A604-off_1A590
0001BF10                            ; ===========================================================================
0001BF10                            
0001BF10                            loc_1A598:				; XREF: off_1A590
0001BF10 4A28 0029                  		tst.b	$29(a0)
0001BF14 6600                       		bne.s	loc_1A5D4
0001BF16 2268 0034                  		movea.l	$34(a0),a1
0001BF1A 4A29 0021                  		tst.b	$21(a1)
0001BF1E 6600                       		bne.s	loc_1A5B4
0001BF20 6100 D2CA                  		bsr.w	BossDefeated
0001BF24 04A8 0001 0000 003C        		subi.l	#$10000,$3C(a0)
0001BF2C                            
0001BF2C                            loc_1A5B4:
0001BF2C 06A8 0002 0000 003C        		addi.l	#$20000,$3C(a0)
0001BF34 6400                       		bcc.s	locret_1A602
0001BF36 42A8 003C                  		clr.l	$3C(a0)
0001BF3A 2268 0034                  		movea.l	$34(a0),a1
0001BF3E 5369 0032                  		subq.w	#1,$32(a1)
0001BF42 4269 0030                  		clr.w	$30(a1)
0001BF46 5528 0024                  		subq.b	#2,$24(a0)
0001BF4A 4E75                       		rts	
0001BF4C                            ; ===========================================================================
0001BF4C                            
0001BF4C                            loc_1A5D4:
0001BF4C 0C68 FFF0 003C             		cmpi.w	#-$10,$3C(a0)
0001BF52 6C00                       		bge.s	loc_1A5E4
0001BF54 04A8 0002 8000 003C        		subi.l	#$28000,$3C(a0)
0001BF5C                            
0001BF5C                            loc_1A5E4:
0001BF5C 04A8 0000 8000 003C        		subi.l	#$8000,$3C(a0)
0001BF64 0C68 FF60 003C             		cmpi.w	#-$A0,$3C(a0)
0001BF6A 6E00                       		bgt.s	locret_1A602
0001BF6C 4268 003E                  		clr.w	$3E(a0)
0001BF70 317C FF60 003C             		move.w	#-$A0,$3C(a0)
0001BF76 4228 0029                  		clr.b	$29(a0)
0001BF7A                            
0001BF7A                            locret_1A602:
0001BF7A 4E75                       		rts	
0001BF7C                            ; ===========================================================================
0001BF7C                            
0001BF7C                            loc_1A604:				; XREF: off_1A590
0001BF7C 08E8 0001 0001             		bset	#1,1(a0)
0001BF82 4A28 0029                  		tst.b	$29(a0)
0001BF86 6600                       		bne.s	loc_1A646
0001BF88 2268 0034                  		movea.l	$34(a0),a1
0001BF8C 4A29 0021                  		tst.b	$21(a1)
0001BF90 6600                       		bne.s	loc_1A626
0001BF92 6100 D258                  		bsr.w	BossDefeated
0001BF96 06A8 0001 0000 003C        		addi.l	#$10000,$3C(a0)
0001BF9E                            
0001BF9E                            loc_1A626:
0001BF9E 04A8 0002 0000 003C        		subi.l	#$20000,$3C(a0)
0001BFA6 6400                       		bcc.s	locret_1A674
0001BFA8 42A8 003C                  		clr.l	$3C(a0)
0001BFAC 2268 0034                  		movea.l	$34(a0),a1
0001BFB0 5369 0032                  		subq.w	#1,$32(a1)
0001BFB4 4269 0030                  		clr.w	$30(a1)
0001BFB8 5528 0024                  		subq.b	#2,$24(a0)
0001BFBC 4E75                       		rts	
0001BFBE                            ; ===========================================================================
0001BFBE                            
0001BFBE                            loc_1A646:
0001BFBE 0C68 0010 003C             		cmpi.w	#$10,$3C(a0)
0001BFC4 6D00                       		blt.s	loc_1A656
0001BFC6 06A8 0002 8000 003C        		addi.l	#$28000,$3C(a0)
0001BFCE                            
0001BFCE                            loc_1A656:
0001BFCE 06A8 0000 8000 003C        		addi.l	#$8000,$3C(a0)
0001BFD6 0C68 00A0 003C             		cmpi.w	#$A0,$3C(a0)
0001BFDC 6D00                       		blt.s	locret_1A674
0001BFDE 4268 003E                  		clr.w	$3E(a0)
0001BFE2 317C 00A0 003C             		move.w	#$A0,$3C(a0)
0001BFE8 4228 0029                  		clr.b	$29(a0)
0001BFEC                            
0001BFEC                            locret_1A674:
0001BFEC 4E75                       		rts	
0001BFEE                            ; ===========================================================================
0001BFEE                            ; ---------------------------------------------------------------------------
0001BFEE                            ; Sprite mappings - cylinders Eggman hides in (FZ)
0001BFEE                            ; ---------------------------------------------------------------------------
0001BFEE                            Map_obj84:
0001BFEE                            	include "_maps\obj84.asm"
0001BFEE                            ; ---------------------------------------------------------------------------
0001BFEE                            ; Sprite mappings - cylinders Eggman hides in (FZ)
0001BFEE                            ; ---------------------------------------------------------------------------
0001BFEE 0000 0000                  		dc.w byte_1A68E-Map_obj84, byte_1A6AD-Map_obj84
0001BFF2 0000 0000                  		dc.w byte_1A6D6-Map_obj84, byte_1A709-Map_obj84
0001BFF6 0000 0000                  		dc.w byte_1A746-Map_obj84, byte_1A788-Map_obj84
0001BFFA 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A788-Map_obj84
0001BFFE 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A788-Map_obj84
0001C002 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A7CF-Map_obj84
0001C006 06                         byte_1A68E:	dc.b 6
0001C007 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001C00C A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001C011 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001C016 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001C01B B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001C020 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001C025 08                         byte_1A6AD:	dc.b 8
0001C026 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001C02B A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001C030 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001C035 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001C03A B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001C03F B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001C044 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001C049 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001C04E 0A                         byte_1A6D6:	dc.b $A
0001C04F A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001C054 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001C059 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001C05E B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001C063 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001C068 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001C06D D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001C072 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001C077 F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001C07C F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001C081 0C                         byte_1A709:	dc.b $C
0001C082 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001C087 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001C08C B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001C091 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001C096 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001C09B B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001C0A0 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001C0A5 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001C0AA F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001C0AF F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001C0B4 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001C0B9 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001C0BE 0D                         byte_1A746:	dc.b $D
0001C0BF A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001C0C4 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001C0C9 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001C0CE B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001C0D3 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001C0D8 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001C0DD D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001C0E2 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001C0E7 F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001C0EC F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001C0F1 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001C0F6 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001C0FB 380F 4050 F0               		dc.b $38, $F, $40, $50,	$F0
0001C100 0E                         byte_1A788:	dc.b $E
0001C101 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001C106 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001C10B B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001C110 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001C115 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001C11A B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001C11F D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001C124 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001C129 F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001C12E F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001C133 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001C138 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001C13D 380F 4050 F0               		dc.b $38, $F, $40, $50,	$F0
0001C142 580F 4050 F0               		dc.b $58, $F, $40, $50,	$F0
0001C147 02                         byte_1A7CF:	dc.b 2
0001C148 F804 0068 F0               		dc.b $F8, 4, 0,	$68, $F0
0001C14D 000C 006A F0               		dc.b 0,	$C, 0, $6A, $F0
0001C152                            		even
0001C152                            		even
0001C152                            
0001C152                            ; ===========================================================================
0001C152                            ; ---------------------------------------------------------------------------
0001C152                            ; Object 86 - energy balls (FZ)
0001C152                            ; ---------------------------------------------------------------------------
0001C152                            
0001C152                            Obj86:					; XREF: Obj_Index
0001C152 7000                       		moveq	#0,d0
0001C154 1028 0024                  		move.b	$24(a0),d0
0001C158 303B 0000                  		move.w	Obj86_Index(pc,d0.w),d0
0001C15C 4EFB 0000                  		jmp	Obj86_Index(pc,d0.w)
0001C160                            ; ===========================================================================
0001C160 0000                       Obj86_Index:	dc.w Obj86_Main-Obj86_Index
0001C162 0000                       		dc.w Obj86_Generator-Obj86_Index
0001C164 0000                       		dc.w Obj86_MakeBalls-Obj86_Index
0001C166 0000                       		dc.w loc_1A962-Obj86_Index
0001C168 0000                       		dc.w loc_1A982-Obj86_Index
0001C16A                            ; ===========================================================================
0001C16A                            
0001C16A                            Obj86_Main:				; XREF: Obj86_Index
0001C16A 317C 2588 0008             		move.w	#$2588,8(a0)
0001C170 317C 053C 000C             		move.w	#$53C,$C(a0)
0001C176 317C 0300 0002             		move.w	#$300,2(a0)
0001C17C 217C 0000 0000 0004        		move.l	#Map_obj86,4(a0)
0001C184 117C 0000 001C             		move.b	#0,$1C(a0)
0001C18A 117C 0003 0018             		move.b	#3,$18(a0)
0001C190 117C 0008 0017             		move.b	#8,$17(a0)
0001C196 117C 0008 0016             		move.b	#8,$16(a0)
0001C19C 117C 0004 0001             		move.b	#4,1(a0)
0001C1A2 08E8 0007 0001             		bset	#7,1(a0)
0001C1A8 5428 0024                  		addq.b	#2,$24(a0)
0001C1AC                            
0001C1AC                            Obj86_Generator:			; XREF: Obj86_Index
0001C1AC 2268 0034                  		movea.l	$34(a0),a1
0001C1B0 0C29 0006 0034             		cmpi.b	#6,$34(a1)
0001C1B6 6600                       		bne.s	loc_1A850
0001C1B8 10BC 003F                  		move.b	#$3F,(a0)
0001C1BC 117C 0000 0024             		move.b	#0,$24(a0)
0001C1C2 4EF9 0000 E0D6             		jmp	DisplaySprite
0001C1C8                            ; ===========================================================================
0001C1C8                            
0001C1C8                            loc_1A850:
0001C1C8 117C 0000 001C             		move.b	#0,$1C(a0)
0001C1CE 4A28 0029                  		tst.b	$29(a0)
0001C1D2 6700                       		beq.s	loc_1A86C
0001C1D4 5428 0024                  		addq.b	#2,$24(a0)
0001C1D8 117C 0001 001C             		move.b	#1,$1C(a0)
0001C1DE 117C 003E 0028             		move.b	#$3E,$28(a0)
0001C1E4                            
0001C1E4                            loc_1A86C:
0001C1E4 323C 0013                  		move.w	#$13,d1
0001C1E8 343C 0008                  		move.w	#8,d2
0001C1EC 363C 0011                  		move.w	#$11,d3
0001C1F0 3828 0008                  		move.w	8(a0),d4
0001C1F4 4EB9 0001 04C0             		jsr	SolidObject
0001C1FA 3038 D008                  		move.w	($FFFFD008).w,d0
0001C1FE 9068 0008                  		sub.w	8(a0),d0
0001C202 6B00                       		bmi.s	loc_1A89A
0001C204 0440 0140                  		subi.w	#$140,d0
0001C208 6B00                       		bmi.s	loc_1A89A
0001C20A 4A28 0001                  		tst.b	1(a0)
0001C20E 6A00 FBB0                  		bpl.w	Obj84_Delete
0001C212                            
0001C212                            loc_1A89A:
0001C212 43FA 0000                  		lea	Ani_obj86(pc),a1
0001C216 4EB9 0000 B1EE             		jsr	AnimateSprite
0001C21C 4EF9 0000 E0D6             		jmp	DisplaySprite
0001C222                            ; ===========================================================================
0001C222                            
0001C222                            Obj86_MakeBalls:			; XREF: Obj86_Index
0001C222 4A28 0029                  		tst.b	$29(a0)
0001C226 6700 0000                  		beq.w	loc_1A954
0001C22A 4228 0029                  		clr.b	$29(a0)
0001C22E D068 0030                  		add.w	$30(a0),d0
0001C232 0240 001E                  		andi.w	#$1E,d0
0001C236 D4C0                       		adda.w	d0,a2
0001C238 5868 0030                  		addq.w	#4,$30(a0)
0001C23C 4268 0032                  		clr.w	$32(a0)
0001C240 7403                       		moveq	#3,d2
0001C242                            
0001C242                            Obj86_Loop:
0001C242 4EB9 0000 E582             		jsr	SingleObjLoad2
0001C248 6600 0000                  		bne.w	loc_1A954
0001C24C 12BC 0086                  		move.b	#$86,(a1)
0001C250 3368 0008 0008             		move.w	8(a0),8(a1)
0001C256 337C 053C 000C             		move.w	#$53C,$C(a1)
0001C25C 137C 0008 0024             		move.b	#8,$24(a1)
0001C262 337C 2300 0002             		move.w	#$2300,2(a1)
0001C268 237C 0000 0000 0004        		move.l	#Map_obj86a,4(a1)
0001C270 137C 000C 0016             		move.b	#$C,$16(a1)
0001C276 137C 000C 0017             		move.b	#$C,$17(a1)
0001C27C 137C 0000 0020             		move.b	#0,$20(a1)
0001C282 137C 0003 0018             		move.b	#3,$18(a1)
0001C288 337C 003E 0028             		move.w	#$3E,$28(a1)
0001C28E 137C 0004 0001             		move.b	#4,1(a1)
0001C294 08E9 0007 0001             		bset	#7,1(a1)
0001C29A 2348 0034                  		move.l	a0,$34(a1)
0001C29E 4EB9 0000 33B4             		jsr	(RandomNumber).l
0001C2A4 3228 0032                  		move.w	$32(a0),d1
0001C2A8 C3FC FFB1                  		muls.w	#-$4F,d1
0001C2AC 0641 2578                  		addi.w	#$2578,d1
0001C2B0 0240 001F                  		andi.w	#$1F,d0
0001C2B4 0440 0010                  		subi.w	#$10,d0
0001C2B8 D041                       		add.w	d1,d0
0001C2BA 3340 0030                  		move.w	d0,$30(a1)
0001C2BE 5268 0032                  		addq.w	#1,$32(a0)
0001C2C2 3168 0032 0038             		move.w	$32(a0),$38(a0)
0001C2C8 51CA FF78                  		dbf	d2,Obj86_Loop	; repeat sequence 3 more times
0001C2CC                            
0001C2CC                            loc_1A954:
0001C2CC 4A68 0032                  		tst.w	$32(a0)
0001C2D0 6600                       		bne.s	loc_1A95E
0001C2D2 5428 0024                  		addq.b	#2,$24(a0)
0001C2D6                            
0001C2D6                            loc_1A95E:
0001C2D6 6000 FF0C                  		bra.w	loc_1A86C
0001C2DA                            ; ===========================================================================
0001C2DA                            
0001C2DA                            loc_1A962:				; XREF: Obj86_Index
0001C2DA 117C 0002 001C             		move.b	#2,$1C(a0)
0001C2E0 4A68 0038                  		tst.w	$38(a0)
0001C2E4 6600                       		bne.s	loc_1A97E
0001C2E6 117C 0002 0024             		move.b	#2,$24(a0)
0001C2EC 2268 0034                  		movea.l	$34(a0),a1
0001C2F0 337C FFFF 0032             		move.w	#-1,$32(a1)
0001C2F6                            
0001C2F6                            loc_1A97E:
0001C2F6 6000 FEEC                  		bra.w	loc_1A86C
0001C2FA                            ; ===========================================================================
0001C2FA                            
0001C2FA                            loc_1A982:				; XREF: Obj86_Index
0001C2FA 7000                       		moveq	#0,d0
0001C2FC 1028 0025                  		move.b	$25(a0),d0
0001C300 303B 0000                  		move.w	Obj86_Index2(pc,d0.w),d0
0001C304 4EBB 0000                  		jsr	Obj86_Index2(pc,d0.w)
0001C308 43FA 0000                  		lea	Ani_obj86a(pc),a1
0001C30C 4EB9 0000 B1EE             		jsr	AnimateSprite
0001C312 4EF9 0000 E0D6             		jmp	DisplaySprite
0001C318                            ; ===========================================================================
0001C318 0000                       Obj86_Index2:	dc.w loc_1A9A6-Obj86_Index2
0001C31A 0000                       		dc.w loc_1A9C0-Obj86_Index2
0001C31C 0000                       		dc.w loc_1AA1E-Obj86_Index2
0001C31E                            ; ===========================================================================
0001C31E                            
0001C31E                            loc_1A9A6:				; XREF: Obj86_Index2
0001C31E 3028 0030                  		move.w	$30(a0),d0
0001C322 9068 0008                  		sub.w	8(a0),d0
0001C326 E940                       		asl.w	#4,d0
0001C328 3140 0010                  		move.w	d0,$10(a0)
0001C32C 317C 00B4 0028             		move.w	#$B4,$28(a0)
0001C332 5428 0025                  		addq.b	#2,$25(a0)
0001C336 4E75                       		rts	
0001C338                            ; ===========================================================================
0001C338                            
0001C338                            loc_1A9C0:				; XREF: Obj86_Index2
0001C338 4A68 0010                  		tst.w	$10(a0)
0001C33C 6700                       		beq.s	loc_1A9E6
0001C33E 4EB9 0000 E0B0             		jsr	SpeedToPos
0001C344 3028 0008                  		move.w	8(a0),d0
0001C348 9068 0030                  		sub.w	$30(a0),d0
0001C34C 6400                       		bcc.s	loc_1A9E6
0001C34E 4268 0010                  		clr.w	$10(a0)
0001C352 D168 0008                  		add.w	d0,8(a0)
0001C356 2268 0034                  		movea.l	$34(a0),a1
0001C35A 5369 0032                  		subq.w	#1,$32(a1)
0001C35E                            
0001C35E                            loc_1A9E6:
0001C35E 117C 0000 001C             		move.b	#0,$1C(a0)
0001C364 5368 0028                  		subq.w	#1,$28(a0)
0001C368 6600                       		bne.s	locret_1AA1C
0001C36A 5428 0025                  		addq.b	#2,$25(a0)
0001C36E 117C 0001 001C             		move.b	#1,$1C(a0)
0001C374 117C 009A 0020             		move.b	#$9A,$20(a0)
0001C37A 317C 00B4 0028             		move.w	#$B4,$28(a0)
0001C380 7000                       		moveq	#0,d0
0001C382 3038 D008                  		move.w	($FFFFD008).w,d0
0001C386 9068 0008                  		sub.w	8(a0),d0
0001C38A 3140 0010                  		move.w	d0,$10(a0)
0001C38E 317C 0140 0012             		move.w	#$140,$12(a0)
0001C394                            
0001C394                            locret_1AA1C:
0001C394 4E75                       		rts	
0001C396                            ; ===========================================================================
0001C396                            
0001C396                            loc_1AA1E:				; XREF: Obj86_Index2
0001C396 4EB9 0000 E0B0             		jsr	SpeedToPos
0001C39C 0C68 05E0 000C             		cmpi.w	#$5E0,$C(a0)
0001C3A2 6400                       		bcc.s	loc_1AA34
0001C3A4 5368 0028                  		subq.w	#1,$28(a0)
0001C3A8 6700                       		beq.s	loc_1AA34
0001C3AA 4E75                       		rts	
0001C3AC                            ; ===========================================================================
0001C3AC                            
0001C3AC                            loc_1AA34:
0001C3AC 2268 0034                  		movea.l	$34(a0),a1
0001C3B0 5369 0038                  		subq.w	#1,$38(a1)
0001C3B4 6000 FA0A                  		bra.w	Obj84_Delete
0001C3B8                            ; ===========================================================================
0001C3B8                            Ani_obj86:
0001C3B8                            	include "_anim\obj86.asm"
0001C3B8                            ; ---------------------------------------------------------------------------
0001C3B8                            ; Animation script - energy ball launcher (FZ)
0001C3B8                            ; ---------------------------------------------------------------------------
0001C3B8 0000                       		dc.w byte_1AA46-Ani_obj86
0001C3BA 0000                       		dc.w byte_1AA4A-Ani_obj86
0001C3BC 0000                       		dc.w byte_1AA50-Ani_obj86
0001C3BE 7E00 FF00                  byte_1AA46:	dc.b $7E, 0, $FF, 0
0001C3C2 0100 0200 03FF             byte_1AA4A:	dc.b 1,	0, 2, 0, 3, $FF
0001C3C8 0101 0201 03FF             byte_1AA50:	dc.b 1,	1, 2, 1, 3, $FF
0001C3CE                            		even
0001C3CE                            		even
0001C3CE                            
0001C3CE                            ; ---------------------------------------------------------------------------
0001C3CE                            ; Sprite mappings - energy ball	launcher (FZ)
0001C3CE                            ; ---------------------------------------------------------------------------
0001C3CE                            Map_obj86:
0001C3CE                            	include "_maps\obj86.asm"
0001C3CE                            ; ---------------------------------------------------------------------------
0001C3CE                            ; Sprite mappings - energy ball	launcher (FZ)
0001C3CE                            ; ---------------------------------------------------------------------------
0001C3CE 0000 0000                  		dc.w byte_1AA5E-Map_obj86, byte_1AA64-Map_obj86
0001C3D2 0000 0000                  		dc.w byte_1AA6A-Map_obj86, byte_1AA70-Map_obj86
0001C3D6 01                         byte_1AA5E:	dc.b 1
0001C3D7 F805 006E F8               		dc.b $F8, 5, 0,	$6E, $F8
0001C3DC 01                         byte_1AA64:	dc.b 1
0001C3DD F805 0076 F8               		dc.b $F8, 5, 0,	$76, $F8
0001C3E2 01                         byte_1AA6A:	dc.b 1
0001C3E3 F805 0072 F8               		dc.b $F8, 5, 0,	$72, $F8
0001C3E8 01                         byte_1AA70:	dc.b 1
0001C3E9 F805 1072 F8               		dc.b $F8, 5, $10, $72, $F8
0001C3EE                            		even
0001C3EE                            		even
0001C3EE                            
0001C3EE                            Ani_obj86a:
0001C3EE                            	include "_anim\obj86a.asm"
0001C3EE                            ; ---------------------------------------------------------------------------
0001C3EE                            ; Animation script - energy balls (FZ)
0001C3EE                            ; ---------------------------------------------------------------------------
0001C3EE 0000                       		dc.w byte_1AA7A-Ani_obj86a
0001C3F0 0000                       		dc.w byte_1AA9C-Ani_obj86a
0001C3F2 0100 0A08 0A01 0A09 0A06+  byte_1AA7A:	dc.b 1,	0, $A, 8, $A, 1, $A, 9,	$A, 6, $A, 7, $A, 0, $A
0001C401 080A 010A 090A 060A 070A+  		dc.b 8,	$A, 1, $A, 9, $A, 6, $A, 7, $A,	2, $A, 3, $A, 4
0001C410 0A05 FF00                  		dc.b $A, 5, $FF, 0
0001C414 0006 0501 0507 0501 05FF   byte_1AA9C:	dc.b 0,	6, 5, 1, 5, 7, 5, 1, 5,	$FF
0001C41E                            		even
0001C41E                            		even
0001C41E                            
0001C41E                            ; ---------------------------------------------------------------------------
0001C41E                            ; Sprite mappings - energy balls (FZ)
0001C41E                            ; ---------------------------------------------------------------------------
0001C41E                            Map_obj86a:
0001C41E                            	include "_maps\obj86a.asm"
0001C41E                            ; ---------------------------------------------------------------------------
0001C41E                            ; Sprite mappings - energy balls (FZ)
0001C41E                            ; ---------------------------------------------------------------------------
0001C41E 0000 0000                  		dc.w byte_1AABC-Map_obj86a, byte_1AAC7-Map_obj86a
0001C422 0000 0000                  		dc.w byte_1AAD2-Map_obj86a, byte_1AADD-Map_obj86a
0001C426 0000 0000                  		dc.w byte_1AAE8-Map_obj86a, byte_1AAF3-Map_obj86a
0001C42A 0000 0000                  		dc.w byte_1AAFE-Map_obj86a, byte_1AB04-Map_obj86a
0001C42E 0000 0000                  		dc.w byte_1AB0A-Map_obj86a, byte_1AB15-Map_obj86a
0001C432 0000                       		dc.w byte_1AB20-Map_obj86a
0001C434 02                         byte_1AABC:	dc.b 2
0001C435 F00D 007A F0               		dc.b $F0, $D, 0, $7A, $F0
0001C43A 000D 187A F0               		dc.b 0,	$D, $18, $7A, $F0
0001C43F 02                         byte_1AAC7:	dc.b 2
0001C440 F406 0082 F4               		dc.b $F4, 6, 0,	$82, $F4
0001C445 F402 1882 04               		dc.b $F4, 2, $18, $82, 4
0001C44A 02                         byte_1AAD2:	dc.b 2
0001C44B F804 0088 F8               		dc.b $F8, 4, 0,	$88, $F8
0001C450 0004 1088 F8               		dc.b 0,	4, $10,	$88, $F8
0001C455 02                         byte_1AADD:	dc.b 2
0001C456 F804 008A F8               		dc.b $F8, 4, 0,	$8A, $F8
0001C45B 0004 108A F8               		dc.b 0,	4, $10,	$8A, $F8
0001C460 02                         byte_1AAE8:	dc.b 2
0001C461 F804 008C F8               		dc.b $F8, 4, 0,	$8C, $F8
0001C466 0004 108C F8               		dc.b 0,	4, $10,	$8C, $F8
0001C46B 02                         byte_1AAF3:	dc.b 2
0001C46C F406 008E F4               		dc.b $F4, 6, 0,	$8E, $F4
0001C471 F402 188E 04               		dc.b $F4, 2, $18, $8E, 4
0001C476 01                         byte_1AAFE:	dc.b 1
0001C477 F805 0094 F8               		dc.b $F8, 5, 0,	$94, $F8
0001C47C 01                         byte_1AB04:	dc.b 1
0001C47D F805 0098 F8               		dc.b $F8, 5, 0,	$98, $F8
0001C482 02                         byte_1AB0A:	dc.b 2
0001C483 F00D 087A F0               		dc.b $F0, $D, 8, $7A, $F0
0001C488 000D 107A F0               		dc.b 0,	$D, $10, $7A, $F0
0001C48D 02                         byte_1AB15:	dc.b 2
0001C48E F406 1082 F4               		dc.b $F4, 6, $10, $82, $F4
0001C493 F402 0882 04               		dc.b $F4, 2, 8,	$82, 4
0001C498 00                         byte_1AB20:	dc.b 0
0001C49A 00                         		even
0001C49A 00                         		even
0001C49A                            
0001C49A                            ; ===========================================================================
0001C49A                            ; ---------------------------------------------------------------------------
0001C49A                            ; Object 3E - prison capsule
0001C49A                            ; ---------------------------------------------------------------------------
0001C49A                            
0001C49A                            Obj3E:					; XREF: Obj_Index
0001C49A 7000                       		moveq	#0,d0
0001C49C 1028 0024                  		move.b	$24(a0),d0
0001C4A0 323B 0000                  		move.w	Obj3E_Index(pc,d0.w),d1
0001C4A4 4EBB 1000                  		jsr	Obj3E_Index(pc,d1.w)
0001C4A8 3028 0008                  		move.w	8(a0),d0
0001C4AC 0240 FF80                  		andi.w	#$FF80,d0
0001C4B0 3238 F700                  		move.w	($FFFFF700).w,d1
0001C4B4 0441 0080                  		subi.w	#$80,d1
0001C4B8 0241 FF80                  		andi.w	#$FF80,d1
0001C4BC 9041                       		sub.w	d1,d0
0001C4BE 0C40 0280                  		cmpi.w	#$280,d0
0001C4C2 6200                       		bhi.s	Obj3E_Delete
0001C4C4 4EF9 0000 E0D6             		jmp	DisplaySprite
0001C4CA                            ; ===========================================================================
0001C4CA                            
0001C4CA                            Obj3E_Delete:
0001C4CA 4EF9 0000 E112             		jmp	DeleteObject
0001C4D0                            ; ===========================================================================
0001C4D0 0000                       Obj3E_Index:	dc.w Obj3E_Main-Obj3E_Index
0001C4D2 0000                       		dc.w Obj3E_BodyMain-Obj3E_Index
0001C4D4 0000                       		dc.w Obj3E_Switched-Obj3E_Index
0001C4D6 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001C4D8 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001C4DA 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001C4DC 0000                       		dc.w Obj3E_Animals-Obj3E_Index
0001C4DE 0000                       		dc.w Obj3E_EndAct-Obj3E_Index
0001C4E0                            
0001C4E0 0220 0400                  Obj3E_Var:	dc.b 2,	$20, 4,	0	; routine, width, priority, frame
0001C4E4 040C 0501                  		dc.b 4,	$C, 5, 1
0001C4E8 0610 0403                  		dc.b 6,	$10, 4,	3
0001C4EC 0810 0305                  		dc.b 8,	$10, 3,	5
0001C4F0                            ; ===========================================================================
0001C4F0                            
0001C4F0                            Obj3E_Main:				; XREF: Obj3E_Index
0001C4F0 217C 0000 0000 0004        		move.l	#Map_obj3E,4(a0)
0001C4F8 317C 049D 0002             		move.w	#$49D,2(a0)
0001C4FE 117C 0004 0001             		move.b	#4,1(a0)
0001C504 3168 000C 0030             		move.w	$C(a0),$30(a0)
0001C50A 7000                       		moveq	#0,d0
0001C50C 1028 0028                  		move.b	$28(a0),d0
0001C510 E548                       		lsl.w	#2,d0
0001C512 43FB 00CC                  		lea	Obj3E_Var(pc,d0.w),a1
0001C516 1159 0024                  		move.b	(a1)+,$24(a0)
0001C51A 1159 0019                  		move.b	(a1)+,$19(a0)
0001C51E 1159 0018                  		move.b	(a1)+,$18(a0)
0001C522 1159 001A                  		move.b	(a1)+,$1A(a0)
0001C526 0C40 0008                  		cmpi.w	#8,d0		; is object type number	02?
0001C52A 6600                       		bne.s	Obj3E_Not02	; if not, branch
0001C52C 117C 0006 0020             		move.b	#6,$20(a0)
0001C532 117C 0008 0021             		move.b	#8,$21(a0)
0001C538                            
0001C538                            Obj3E_Not02:
0001C538 4E75                       		rts	
0001C53A                            ; ===========================================================================
0001C53A                            
0001C53A                            Obj3E_BodyMain:				; XREF: Obj3E_Index
0001C53A 0C38 0002 F7A7             		cmpi.b	#2,($FFFFF7A7).w
0001C540 6700                       		beq.s	Obj3E_ChkOpened
0001C542 323C 002B                  		move.w	#$2B,d1
0001C546 343C 0018                  		move.w	#$18,d2
0001C54A 363C 0018                  		move.w	#$18,d3
0001C54E 3828 0008                  		move.w	8(a0),d4
0001C552 4EF9 0001 04C0             		jmp	SolidObject
0001C558                            ; ===========================================================================
0001C558                            
0001C558                            Obj3E_ChkOpened:
0001C558 4A28 0025                  		tst.b	$25(a0)		; has the prison been opened?
0001C55C 6700                       		beq.s	Obj3E_DoOpen	; if yes, branch
0001C55E 4228 0025                  		clr.b	$25(a0)
0001C562 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001C568 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001C56E                            
0001C56E                            Obj3E_DoOpen:
0001C56E 117C 0002 001A             		move.b	#2,$1A(a0)	; use frame number 2 (destroyed	prison)
0001C574 4E75                       		rts	
0001C576                            ; ===========================================================================
0001C576                            
0001C576                            Obj3E_Switched:				; XREF: Obj3E_Index
0001C576 323C 0017                  		move.w	#$17,d1
0001C57A 343C 0008                  		move.w	#8,d2
0001C57E 363C 0008                  		move.w	#8,d3
0001C582 3828 0008                  		move.w	8(a0),d4
0001C586 4EB9 0001 04C0             		jsr	SolidObject
0001C58C 43F9 0000 0000             		lea	(Ani_obj3E).l,a1
0001C592 4EB9 0000 B1EE             		jsr	AnimateSprite
0001C598 3168 0030 000C             		move.w	$30(a0),$C(a0)
0001C59E 4A28 0025                  		tst.b	$25(a0)
0001C5A2 6700                       		beq.s	locret_1AC60
0001C5A4 5068 000C                  		addq.w	#8,$C(a0)
0001C5A8 117C 000A 0024             		move.b	#$A,$24(a0)
0001C5AE 317C 003C 001E             		move.w	#$3C,$1E(a0)
0001C5B4 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0001C5B8 4238 F7AA                  		clr.b	($FFFFF7AA).w	; lock screen position
0001C5BC 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
0001C5C2 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; make Sonic run to	the right
0001C5C8 4228 0025                  		clr.b	$25(a0)
0001C5CC 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001C5D2 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001C5D8                            
0001C5D8                            locret_1AC60:
0001C5D8 4E75                       		rts	
0001C5DA                            ; ===========================================================================
0001C5DA                            
0001C5DA                            Obj3E_Explosion:			; XREF: Obj3E_Index
0001C5DA 7007                       		moveq	#7,d0
0001C5DC C038 FE0F                  		and.b	($FFFFFE0F).w,d0
0001C5E0 6600                       		bne.s	loc_1ACA0
0001C5E2 4EB9 0000 E56C             		jsr	SingleObjLoad
0001C5E8 6600                       		bne.s	loc_1ACA0
0001C5EA 12BC 003F                  		move.b	#$3F,0(a1)	; load explosion object
0001C5EE 3368 0008 0008             		move.w	8(a0),8(a1)
0001C5F4 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001C5FA 4EB9 0000 33B4             		jsr	(RandomNumber).l
0001C600 7200                       		moveq	#0,d1
0001C602 1200                       		move.b	d0,d1
0001C604 E409                       		lsr.b	#2,d1
0001C606 0441 0020                  		subi.w	#$20,d1
0001C60A D369 0008                  		add.w	d1,8(a1)
0001C60E E048                       		lsr.w	#8,d0
0001C610 E608                       		lsr.b	#3,d0
0001C612 D169 000C                  		add.w	d0,$C(a1)
0001C616                            
0001C616                            loc_1ACA0:
0001C616 5368 001E                  		subq.w	#1,$1E(a0)
0001C61A 6700                       		beq.s	Obj3E_MakeAnimal
0001C61C 4E75                       		rts	
0001C61E                            ; ===========================================================================
0001C61E                            
0001C61E                            Obj3E_MakeAnimal:
0001C61E 11FC 0002 F7A7             		move.b	#2,($FFFFF7A7).w
0001C624 117C 000C 0024             		move.b	#$C,$24(a0)	; replace explosions with animals
0001C62A 117C 0006 001A             		move.b	#6,$1A(a0)
0001C630 317C 0096 001E             		move.w	#$96,$1E(a0)
0001C636 0668 0020 000C             		addi.w	#$20,$C(a0)
0001C63C 7C07                       		moveq	#7,d6
0001C63E 3A3C 009A                  		move.w	#$9A,d5
0001C642 78E4                       		moveq	#-$1C,d4
0001C644                            
0001C644                            Obj3E_Loop:
0001C644 4EB9 0000 E56C             		jsr	SingleObjLoad
0001C64A 6600                       		bne.s	locret_1ACF8
0001C64C 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
0001C650 3368 0008 0008             		move.w	8(a0),8(a1)
0001C656 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001C65C D969 0008                  		add.w	d4,8(a1)
0001C660 5E44                       		addq.w	#7,d4
0001C662 3345 0036                  		move.w	d5,$36(a1)
0001C666 5145                       		subq.w	#8,d5
0001C668 51CE FFDA                  		dbf	d6,Obj3E_Loop	; repeat 7 more	times
0001C66C                            
0001C66C                            locret_1ACF8:
0001C66C 4E75                       		rts	
0001C66E                            ; ===========================================================================
0001C66E                            
0001C66E                            Obj3E_Animals:				; XREF: Obj3E_Index
0001C66E 7007                       		moveq	#7,d0
0001C670 C038 FE0F                  		and.b	($FFFFFE0F).w,d0
0001C674 6600                       		bne.s	loc_1AD38
0001C676 4EB9 0000 E56C             		jsr	SingleObjLoad
0001C67C 6600                       		bne.s	loc_1AD38
0001C67E 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
0001C682 3368 0008 0008             		move.w	8(a0),8(a1)
0001C688 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001C68E 4EB9 0000 33B4             		jsr	(RandomNumber).l
0001C694 0240 001F                  		andi.w	#$1F,d0
0001C698 5D40                       		subq.w	#6,d0
0001C69A 4A41                       		tst.w	d1
0001C69C 6A00                       		bpl.s	loc_1AD2E
0001C69E 4440                       		neg.w	d0
0001C6A0                            
0001C6A0                            loc_1AD2E:
0001C6A0 D169 0008                  		add.w	d0,8(a1)
0001C6A4 337C 000C 0036             		move.w	#$C,$36(a1)
0001C6AA                            
0001C6AA                            loc_1AD38:
0001C6AA 5368 001E                  		subq.w	#1,$1E(a0)
0001C6AE 6600                       		bne.s	locret_1AD48
0001C6B0 5428 0024                  		addq.b	#2,$24(a0)
0001C6B4 317C 00B4 001E             		move.w	#180,$1E(a0)
0001C6BA                            
0001C6BA                            locret_1AD48:
0001C6BA 4E75                       		rts	
0001C6BC                            ; ===========================================================================
0001C6BC                            
0001C6BC                            Obj3E_EndAct:				; XREF: Obj3E_Index
0001C6BC 703E                       		moveq	#$3E,d0
0001C6BE 7228                       		moveq	#$28,d1
0001C6C0 7440                       		moveq	#$40,d2
0001C6C2 43F8 D040                  		lea	($FFFFD040).w,a1 ; load	object RAM
0001C6C6                            
0001C6C6                            Obj3E_FindObj28:
0001C6C6 B211                       		cmp.b	(a1),d1		; is object $28	(animal) loaded?
0001C6C8 6700                       		beq.s	Obj3E_Obj28Found ; if yes, branch
0001C6CA D2C2                       		adda.w	d2,a1		; next object RAM
0001C6CC 51C8 FFF8                  		dbf	d0,Obj3E_FindObj28 ; repeat $3E	times
0001C6D0                            
0001C6D0 4EB9 0000 F77C             		jsr	GotThroughAct
0001C6D6 4EF9 0000 E112             		jmp	DeleteObject
0001C6DC                            ; ===========================================================================
0001C6DC                            
0001C6DC                            Obj3E_Obj28Found:
0001C6DC 4E75                       		rts	
0001C6DE                            ; ===========================================================================
0001C6DE                            Ani_obj3E:
0001C6DE                            	include "_anim\obj3E.asm"
0001C6DE                            ; ---------------------------------------------------------------------------
0001C6DE                            ; Animation script - prison capsule
0001C6DE                            ; ---------------------------------------------------------------------------
0001C6DE 0000                       		dc.w byte_1AD70-Ani_obj3E
0001C6E0 0000                       		dc.w byte_1AD70-Ani_obj3E
0001C6E2 0201 03FF                  byte_1AD70:	dc.b 2,	1, 3, $FF
0001C6E6                            		even
0001C6E6                            		even
0001C6E6                            
0001C6E6                            ; ---------------------------------------------------------------------------
0001C6E6                            ; Sprite mappings - prison capsule
0001C6E6                            ; ---------------------------------------------------------------------------
0001C6E6                            Map_obj3E:
0001C6E6                            	include "_maps\obj3E.asm"
0001C6E6                            ; ---------------------------------------------------------------------------
0001C6E6                            ; Sprite mappings - prison capsule
0001C6E6                            ; ---------------------------------------------------------------------------
0001C6E6 0000 0000                  		dc.w byte_1AD82-Map_obj3E, byte_1ADA6-Map_obj3E
0001C6EA 0000 0000                  		dc.w byte_1ADAC-Map_obj3E, byte_1ADCB-Map_obj3E
0001C6EE 0000 0000                  		dc.w byte_1ADD1-Map_obj3E, byte_1ADDC-Map_obj3E
0001C6F2 0000                       		dc.w byte_1ADE2-Map_obj3E
0001C6F4 07                         byte_1AD82:	dc.b 7
0001C6F5 E00C 2000 F0               		dc.b $E0, $C, $20, 0, $F0
0001C6FA E80D 2004 E0               		dc.b $E8, $D, $20, 4, $E0
0001C6FF E80D 200C 00               		dc.b $E8, $D, $20, $C, 0
0001C704 F80E 2014 E0               		dc.b $F8, $E, $20, $14,	$E0
0001C709 F80E 2020 00               		dc.b $F8, $E, $20, $20,	0
0001C70E 100D 202C E0               		dc.b $10, $D, $20, $2C,	$E0
0001C713 100D 2034 00               		dc.b $10, $D, $20, $34,	0
0001C718 01                         byte_1ADA6:	dc.b 1
0001C719 F809 003C F4               		dc.b $F8, 9, 0,	$3C, $F4
0001C71E 06                         byte_1ADAC:	dc.b 6
0001C71F 0008 2042 E0               		dc.b 0,	8, $20,	$42, $E0
0001C724 080C 2045 E0               		dc.b 8,	$C, $20, $45, $E0
0001C729 0004 2049 10               		dc.b 0,	4, $20,	$49, $10
0001C72E 080C 204B 00               		dc.b 8,	$C, $20, $4B, 0
0001C733 100D 202C E0               		dc.b $10, $D, $20, $2C,	$E0
0001C738 100D 2034 00               		dc.b $10, $D, $20, $34,	0
0001C73D 01                         byte_1ADCB:	dc.b 1
0001C73E F809 004F F4               		dc.b $F8, 9, 0,	$4F, $F4
0001C743 02                         byte_1ADD1:	dc.b 2
0001C744 E80E 2055 F0               		dc.b $E8, $E, $20, $55,	$F0
0001C749 000E 2061 F0               		dc.b 0,	$E, $20, $61, $F0
0001C74E 01                         byte_1ADDC:	dc.b 1
0001C74F F007 206D F8               		dc.b $F0, 7, $20, $6D, $F8
0001C754 00                         byte_1ADE2:	dc.b 0
0001C756 00                         		even
0001C756 00                         		even
0001C756                            
0001C756                            ; ---------------------------------------------------------------------------
0001C756                            ; Object touch response	subroutine - $20(a0) in	the object RAM
0001C756                            ; ---------------------------------------------------------------------------
0001C756                            
0001C756                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C756                            
0001C756                            
0001C756                            TouchResponse:				; XREF: Obj01
0001C756 4E71                       		nop	
0001C758 3428 0008                  		move.w	8(a0),d2	; load Sonic's x-axis value
0001C75C 3628 000C                  		move.w	$C(a0),d3	; load Sonic's y-axis value
0001C760 5142                       		subq.w	#8,d2
0001C762 7A00                       		moveq	#0,d5
0001C764 1A28 0016                  		move.b	$16(a0),d5	; load Sonic's height
0001C768 5705                       		subq.b	#3,d5
0001C76A 9645                       		sub.w	d5,d3
0001C76C 0C28 0039 001A             		cmpi.b	#$39,$1A(a0)	; is Sonic ducking?
0001C772 6600                       		bne.s	Touch_NoDuck	; if not, branch
0001C774 0643 000C                  		addi.w	#$C,d3
0001C778 7A0A                       		moveq	#$A,d5
0001C77A                            
0001C77A                            Touch_NoDuck:
0001C77A 383C 0010                  		move.w	#$10,d4
0001C77E DA45                       		add.w	d5,d5
0001C780 43F8 D800                  		lea	($FFFFD800).w,a1 ; begin checking the object RAM
0001C784 3C3C 005F                  		move.w	#$5F,d6
0001C788                            
0001C788                            Touch_Loop:
0001C788 4A29 0001                  		tst.b	1(a1)
0001C78C 6A00                       		bpl.s	Touch_NextObj
0001C78E 1029 0020                  		move.b	$20(a1),d0	; load touch response number
0001C792 6600                       		bne.s	Touch_Height	; if touch response is not 0, branch
0001C794                            
0001C794                            Touch_NextObj:
0001C794 43E9 0040                  		lea	$40(a1),a1	; next object RAM
0001C798 51CE FFEE                  		dbf	d6,Touch_Loop	; repeat $5F more times
0001C79C                            
0001C79C 7000                       		moveq	#0,d0
0001C79E 4E75                       		rts	
0001C7A0                            ; ===========================================================================
0001C7A0 1414                       Touch_Sizes:	dc.b  $14, $14		; width, height
0001C7A2 0C14                       		dc.b   $C, $14
0001C7A4 140C                       		dc.b  $14,  $C
0001C7A6 0410                       		dc.b	4, $10
0001C7A8 0C12                       		dc.b   $C, $12
0001C7AA 1010                       		dc.b  $10, $10
0001C7AC 0606                       		dc.b	6,   6
0001C7AE 180C                       		dc.b  $18,  $C
0001C7B0 0C10                       		dc.b   $C, $10
0001C7B2 100C                       		dc.b  $10,  $C
0001C7B4 0808                       		dc.b	8,   8
0001C7B6 1410                       		dc.b  $14, $10
0001C7B8 1408                       		dc.b  $14,   8
0001C7BA 0E0E                       		dc.b   $E,  $E
0001C7BC 1818                       		dc.b  $18, $18
0001C7BE 2810                       		dc.b  $28, $10
0001C7C0 1018                       		dc.b  $10, $18
0001C7C2 0810                       		dc.b	8, $10
0001C7C4 2070                       		dc.b  $20, $70
0001C7C6 4020                       		dc.b  $40, $20
0001C7C8 8020                       		dc.b  $80, $20
0001C7CA 2020                       		dc.b  $20, $20
0001C7CC 0808                       		dc.b	8,   8
0001C7CE 0404                       		dc.b	4,   4
0001C7D0 2008                       		dc.b  $20,   8
0001C7D2 0C0C                       		dc.b   $C,  $C
0001C7D4 0804                       		dc.b	8,   4
0001C7D6 1804                       		dc.b  $18,   4
0001C7D8 2804                       		dc.b  $28,   4
0001C7DA 0408                       		dc.b	4,   8
0001C7DC 0418                       		dc.b	4, $18
0001C7DE 0428                       		dc.b	4, $28
0001C7E0 0420                       		dc.b	4, $20
0001C7E2 1818                       		dc.b  $18, $18
0001C7E4 0C18                       		dc.b   $C, $18
0001C7E6 4808                       		dc.b  $48,   8
0001C7E8                            ; ===========================================================================
0001C7E8                            
0001C7E8                            Touch_Height:				; XREF: TouchResponse
0001C7E8 0240 003F                  		andi.w	#$3F,d0
0001C7EC D040                       		add.w	d0,d0
0001C7EE 45FB 00AE                  		lea	Touch_Sizes-2(pc,d0.w),a2
0001C7F2 7200                       		moveq	#0,d1
0001C7F4 121A                       		move.b	(a2)+,d1
0001C7F6 3029 0008                  		move.w	8(a1),d0
0001C7FA 9041                       		sub.w	d1,d0
0001C7FC 9042                       		sub.w	d2,d0
0001C7FE 6400                       		bcc.s	loc_1AE98
0001C800 D241                       		add.w	d1,d1
0001C802 D041                       		add.w	d1,d0
0001C804 6500                       		bcs.s	Touch_Width
0001C806 6000 FF8C                  		bra.w	Touch_NextObj
0001C80A                            ; ===========================================================================
0001C80A                            
0001C80A                            loc_1AE98:
0001C80A B044                       		cmp.w	d4,d0
0001C80C 6200 FF86                  		bhi.w	Touch_NextObj
0001C810                            
0001C810                            Touch_Width:
0001C810 7200                       		moveq	#0,d1
0001C812 121A                       		move.b	(a2)+,d1
0001C814 3029 000C                  		move.w	$C(a1),d0
0001C818 9041                       		sub.w	d1,d0
0001C81A 9043                       		sub.w	d3,d0
0001C81C 6400                       		bcc.s	loc_1AEB6
0001C81E D241                       		add.w	d1,d1
0001C820 D240                       		add.w	d0,d1
0001C822 6500                       		bcs.s	Touch_ChkValue
0001C824 6000 FF6E                  		bra.w	Touch_NextObj
0001C828                            ; ===========================================================================
0001C828                            
0001C828                            loc_1AEB6:
0001C828 B045                       		cmp.w	d5,d0
0001C82A 6200 FF68                  		bhi.w	Touch_NextObj
0001C82E                            
0001C82E                            Touch_ChkValue:
0001C82E 1229 0020                  		move.b	$20(a1),d1	; load touch response number
0001C832 0201 00C0                  		andi.b	#$C0,d1		; is touch response $40	or higher?
0001C836 6700 0000                  		beq.w	Touch_Enemy	; if not, branch
0001C83A 0C01 00C0                  		cmpi.b	#$C0,d1		; is touch response $C0	or higher?
0001C83E 6700 0000                  		beq.w	Touch_Special	; if yes, branch
0001C842 4A01                       		tst.b	d1		; is touch response $80-$BF ?
0001C844 6B00 0000                  		bmi.w	Touch_ChkHurt	; if yes, branch
0001C848                            
0001C848                            ; touch	response is $40-$7F
0001C848                            
0001C848 1029 0020                  		move.b	$20(a1),d0
0001C84C 0200 003F                  		andi.b	#$3F,d0
0001C850 0C00 0006                  		cmpi.b	#6,d0		; is touch response $46	?
0001C854 6700                       		beq.s	Touch_Monitor	; if yes, branch
0001C856 0C68 005A 0030             		cmpi.w	#$5A,$30(a0)
0001C85C 6400 0000                  		bcc.w	locret_1AEF2
0001C860 5429 0024                  		addq.b	#2,$24(a1)	; advance the object's routine counter
0001C864                            
0001C864                            locret_1AEF2:
0001C864 4E75                       		rts	
0001C866                            ; ===========================================================================
0001C866                            
0001C866                            Touch_Monitor:
0001C866 4A68 0012                  		tst.w	$12(a0)		; is Sonic moving upwards?
0001C86A 6A00                       		bpl.s	loc_1AF1E	; if not, branch
0001C86C 3028 000C                  		move.w	$C(a0),d0
0001C870 0440 0010                  		subi.w	#$10,d0
0001C874 B069 000C                  		cmp.w	$C(a1),d0
0001C878 6500                       		bcs.s	locret_1AF2E
0001C87A 4468 0012                  		neg.w	$12(a0)		; reverse Sonic's y-motion
0001C87E 337C FE80 0012             		move.w	#-$180,$12(a1)
0001C884 4A29 0025                  		tst.b	$25(a1)
0001C888 6600                       		bne.s	locret_1AF2E
0001C88A 5829 0025                  		addq.b	#4,$25(a1)	; advance the monitor's routine counter
0001C88E 4E75                       		rts	
0001C890                            ; ===========================================================================
0001C890                            
0001C890                            loc_1AF1E:
0001C890 0C28 0002 001C             		cmpi.b	#2,$1C(a0)	; is Sonic rolling/jumping?
0001C896 6600                       		bne.s	locret_1AF2E
0001C898 4468 0012                  		neg.w	$12(a0)		; reverse Sonic's y-motion
0001C89C 5429 0024                  		addq.b	#2,$24(a1)	; advance the monitor's routine counter
0001C8A0                            
0001C8A0                            locret_1AF2E:
0001C8A0 4E75                       		rts	
0001C8A2                            ; ===========================================================================
0001C8A2                            
0001C8A2                            Touch_Enemy:				; XREF: Touch_ChkValue
0001C8A2 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0001C8A6 6600                       		bne.s	loc_1AF40	; if yes, branch
0001C8A8 0C28 001D 001C             		cmpi.b	#$1D,$1C(a0)	; is Sonic Spin Dashing?
0001C8AE 6700 0000                  		beq.w	loc_1AF40	; if yes, branch
0001C8B2 0C28 0002 001C             		cmpi.b	#2,$1C(a0)	; is Sonic rolling?
0001C8B8 6600 0000                  		bne.w	Touch_ChkHurt	; if not, branch
0001C8BC                            
0001C8BC                            loc_1AF40:
0001C8BC 4A29 0021                  		tst.b	$21(a1)
0001C8C0 6700                       		beq.s	Touch_KillEnemy
0001C8C2 4468 0010                  		neg.w	$10(a0)
0001C8C6 4468 0012                  		neg.w	$12(a0)
0001C8CA E0E8 0010                  		asr	$10(a0)
0001C8CE E0E8 0012                  		asr	$12(a0)
0001C8D2 137C 0000 0020             		move.b	#0,$20(a1)
0001C8D8 5329 0021                  		subq.b	#1,$21(a1)
0001C8DC 6600                       		bne.s	locret_1AF68
0001C8DE 08E9 0007 0022             		bset	#7,$22(a1)
0001C8E4                            
0001C8E4                            locret_1AF68:
0001C8E4 4E75                       		rts	
0001C8E6                            ; ===========================================================================
0001C8E6                            
0001C8E6                            Touch_KillEnemy:
0001C8E6 08E9 0007 0022             		bset	#7,$22(a1)
0001C8EC 7000                       		moveq	#0,d0
0001C8EE 3038 F7D0                  		move.w	($FFFFF7D0).w,d0
0001C8F2 5478 F7D0                  		addq.w	#2,($FFFFF7D0).w ; add 2 to item bonus counter
0001C8F6 0C40 0006                  		cmpi.w	#6,d0
0001C8FA 6500                       		bcs.s	loc_1AF82
0001C8FC 7006                       		moveq	#6,d0
0001C8FE                            
0001C8FE                            loc_1AF82:
0001C8FE 3340 003E                  		move.w	d0,$3E(a1)
0001C902 303B 0000                  		move.w	Enemy_Points(pc,d0.w),d0
0001C906 0C78 0020 F7D0             		cmpi.w	#$20,($FFFFF7D0).w ; have 16 enemies been destroyed?
0001C90C 6500                       		bcs.s	loc_1AF9C	; if not, branch
0001C90E 303C 03E8                  		move.w	#1000,d0	; fix bonus to 10000
0001C912 337C 000A 003E             		move.w	#$A,$3E(a1)
0001C918                            
0001C918                            loc_1AF9C:
0001C918 6100 0000                  		bsr.w	AddPoints
0001C91C 12BC 0027                  		move.b	#$27,0(a1)	; change object	to points
0001C920 137C 0000 0024             		move.b	#0,$24(a1)
0001C926 4A68 0012                  		tst.w	$12(a0)
0001C92A 6B00                       		bmi.s	loc_1AFC2
0001C92C 3028 000C                  		move.w	$C(a0),d0
0001C930 B069 000C                  		cmp.w	$C(a1),d0
0001C934 6400                       		bcc.s	loc_1AFCA
0001C936 4468 0012                  		neg.w	$12(a0)
0001C93A 4E75                       		rts	
0001C93C                            ; ===========================================================================
0001C93C                            
0001C93C                            loc_1AFC2:
0001C93C 0668 0100 0012             		addi.w	#$100,$12(a0)
0001C942 4E75                       		rts	
0001C944                            ; ===========================================================================
0001C944                            
0001C944                            loc_1AFCA:
0001C944 0468 0100 0012             		subi.w	#$100,$12(a0)
0001C94A 4E75                       		rts	
0001C94C                            ; ===========================================================================
0001C94C 000A 0014 0032 0064        Enemy_Points:	dc.w 10, 20, 50, 100
0001C954                            ; ===========================================================================
0001C954                            
0001C954                            loc_1AFDA:				; XREF: Touch_CatKiller
0001C954 08E9 0007 0022             		bset	#7,$22(a1)
0001C95A                            
0001C95A                            Touch_ChkHurt:				; XREF: Touch_ChkValue
0001C95A 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0001C95E 6700                       		beq.s	Touch_Hurt	; if not, branch
0001C960                            
0001C960                            loc_1AFE6:				; XREF: Touch_Hurt
0001C960 70FF                       		moveq	#-1,d0
0001C962 4E75                       		rts	
0001C964                            ; ===========================================================================
0001C964                            
0001C964                            Touch_Hurt:				; XREF: Touch_ChkHurt
0001C964 4E71                       		nop	
0001C966 4A68 0030                  		tst.w	$30(a0)
0001C96A 66F4                       		bne.s	loc_1AFE6
0001C96C 2449                       		movea.l	a1,a2
0001C96E                            
0001C96E                            ; End of function TouchResponse
0001C96E                            ; continue straight to HurtSonic
0001C96E                            
0001C96E                            ; ---------------------------------------------------------------------------
0001C96E                            ; Hurting Sonic	subroutine
0001C96E                            ; ---------------------------------------------------------------------------
0001C96E                            
0001C96E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C96E                            
0001C96E                            
0001C96E                            HurtSonic:
0001C96E 4A38 FE2C                  		tst.b	($FFFFFE2C).w	; does Sonic have a shield?
0001C972 6600                       		bne.s	Hurt_Shield	; if yes, branch
0001C974 4A78 FE20                  		tst.w	($FFFFFE20).w	; does Sonic have any rings?
0001C978 6700 0000                  		beq.w	Hurt_NoRings	; if not, branch
0001C97C 4EB9 0000 E56C             		jsr	SingleObjLoad
0001C982 6600                       		bne.s	Hurt_Shield
0001C984 12BC 0037                  		move.b	#$37,0(a1)	; load bouncing	multi rings object
0001C988 3368 0008 0008             		move.w	8(a0),8(a1)
0001C98E 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001C994                            
0001C994                            Hurt_Shield:
0001C994 11FC 0000 FE2C             		move.b	#0,($FFFFFE2C).w ; remove shield
0001C99A 117C 0004 0024             		move.b	#4,$24(a0)
0001C9A0 4EB9 0001 495E             		jsr	Sonic_ResetOnFloor
0001C9A6 08E8 0001 0022             		bset	#1,$22(a0)
0001C9AC 317C FC00 0012             		move.w	#-$400,$12(a0)	; make Sonic bounce away from the object
0001C9B2 317C FE00 0010             		move.w	#-$200,$10(a0)
0001C9B8 0828 0006 0022             		btst	#6,$22(a0)
0001C9BE 6700                       		beq.s	Hurt_Reverse
0001C9C0 317C FE00 0012             		move.w	#-$200,$12(a0)
0001C9C6 317C FF00 0010             		move.w	#-$100,$10(a0)
0001C9CC                            
0001C9CC                            Hurt_Reverse:
0001C9CC 3028 0008                  		move.w	8(a0),d0
0001C9D0 B06A 0008                  		cmp.w	8(a2),d0
0001C9D4 6500                       		bcs.s	Hurt_ChkSpikes	; if Sonic is left of the object, branch
0001C9D6 4468 0010                  		neg.w	$10(a0)		; if Sonic is right of the object, reverse
0001C9DA                            
0001C9DA                            Hurt_ChkSpikes:
0001C9DA 117C 0000 0039             		move.b	#0,$39(a0)	; clear Spin Dash flag
0001C9E0 317C 0000 0014             		move.w	#0,$14(a0)
0001C9E6 117C 001A 001C             		move.b	#$1A,$1C(a0)
0001C9EC 317C 0078 0030             		move.w	#$78,$30(a0)
0001C9F2 303C 00A3                  		move.w	#$A3,d0		; load normal damage sound
0001C9F6 0C12 0036                  		cmpi.b	#$36,(a2)	; was damage caused by spikes?
0001C9FA 6600                       		bne.s	Hurt_Sound	; if not, branch
0001C9FC 0C12 0016                  		cmpi.b	#$16,(a2)	; was damage caused by LZ harpoon?
0001CA00 6600                       		bne.s	Hurt_Sound	; if not, branch
0001CA02 303C 00A6                  		move.w	#$A6,d0		; load spikes damage sound
0001CA06                            
0001CA06                            Hurt_Sound:
0001CA06 4EB9 0000 147C             		jsr	(PlaySound_Special).l
0001CA0C 70FF                       		moveq	#-1,d0
0001CA0E 4E75                       		rts	
0001CA10                            ; ===========================================================================
0001CA10                            
0001CA10                            Hurt_NoRings:
0001CA10 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug mode	cheat on?
0001CA14 6600 FF7E                  		bne.w	Hurt_Shield	; if yes, branch
0001CA18                            ; End of function HurtSonic
0001CA18                            
0001CA18                            ; ---------------------------------------------------------------------------
0001CA18                            ; Subroutine to	kill Sonic
0001CA18                            ; ---------------------------------------------------------------------------
0001CA18                            
0001CA18                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CA18                            
0001CA18                            
0001CA18                            KillSonic:
0001CA18 4238 FE19                  		clr.b   (Super_Sonic_Flag).w ; Revert Sonic to Normal
0001CA1C 31FC 0600 F760             		move.w  #$600,(Sonic_top_speed).w ; Revert speeds
0001CA22 31FC 000C F762             		move.w  #$C,(Sonic_acceleration).w ; ^^^
0001CA28 31FC 0080 F764             		move.w  #$80,(Sonic_deceleration).w ; ^^^
0001CA2E 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	active?
0001CA32 6600                       		bne.s	Kill_NoDeath	; if yes, branch
0001CA34 11FC 0000 FE2D             		move.b	#0,($FFFFFE2D).w ; remove invincibility
0001CA3A 117C 0006 0024             		move.b	#6,$24(a0)
0001CA40 4EB9 0001 495E             		jsr	Sonic_ResetOnFloor
0001CA46 08E8 0001 0022             		bset	#1,$22(a0)
0001CA4C 317C F900 0012             		move.w	#-$700,$12(a0)
0001CA52 317C 0000 0010             		move.w	#0,$10(a0)
0001CA58 317C 0000 0014             		move.w	#0,$14(a0)
0001CA5E 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001CA64 117C 0016 001C             		move.b	#$16,$1C(a0)
0001CA6A 08E8 0007 0002             		bset	#7,2(a0)
0001CA70 303C 00A3                  		move.w	#$A3,d0		; play normal death sound
0001CA74 0C12 0036                  		cmpi.b	#$36,(a2)	; check	if you were killed by spikes
0001CA78 6600                       		bne.s	Kill_Sound
0001CA7A 303C 00A6                  		move.w	#$A6,d0		; play spikes death sound
0001CA7E                            
0001CA7E                            Kill_Sound:
0001CA7E 4EB9 0000 147C             		jsr	(PlaySound_Special).l
0001CA84                            
0001CA84                            Kill_NoDeath:
0001CA84 70FF                       		moveq	#-1,d0
0001CA86 4E75                       		rts	
0001CA88                            ; End of function KillSonic
0001CA88                            
0001CA88                            
0001CA88                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CA88                            
0001CA88                            
0001CA88                            Touch_Special:				; XREF: Touch_ChkValue
0001CA88 1229 0020                  		move.b	$20(a1),d1
0001CA8C 0201 003F                  		andi.b	#$3F,d1
0001CA90 0C01 000B                  		cmpi.b	#$B,d1		; is touch response $CB	?
0001CA94 6700                       		beq.s	Touch_CatKiller	; if yes, branch
0001CA96 0C01 000C                  		cmpi.b	#$C,d1		; is touch response $CC	?
0001CA9A 6700                       		beq.s	Touch_Yadrin	; if yes, branch
0001CA9C 0C01 0017                  		cmpi.b	#$17,d1		; is touch response $D7	?
0001CAA0 6700                       		beq.s	Touch_D7orE1	; if yes, branch
0001CAA2 0C01 0021                  		cmpi.b	#$21,d1		; is touch response $E1	?
0001CAA6 6700                       		beq.s	Touch_D7orE1	; if yes, branch
0001CAA8 4E75                       		rts	
0001CAAA                            ; ===========================================================================
0001CAAA                            
0001CAAA                            Touch_CatKiller:			; XREF: Touch_Special
0001CAAA 6000 FEA8                  		bra.w	loc_1AFDA
0001CAAE                            ; ===========================================================================
0001CAAE                            
0001CAAE                            Touch_Yadrin:				; XREF: Touch_Special
0001CAAE 9A40                       		sub.w	d0,d5
0001CAB0 0C45 0008                  		cmpi.w	#8,d5
0001CAB4 6400                       		bcc.s	loc_1B144
0001CAB6 3029 0008                  		move.w	8(a1),d0
0001CABA 5940                       		subq.w	#4,d0
0001CABC 0829 0000 0022             		btst	#0,$22(a1)
0001CAC2 6700                       		beq.s	loc_1B130
0001CAC4 0440 0010                  		subi.w	#$10,d0
0001CAC8                            
0001CAC8                            loc_1B130:
0001CAC8 9042                       		sub.w	d2,d0
0001CACA 6400                       		bcc.s	loc_1B13C
0001CACC 0640 0018                  		addi.w	#$18,d0
0001CAD0 6500                       		bcs.s	loc_1B140
0001CAD2 6000                       		bra.s	loc_1B144
0001CAD4                            ; ===========================================================================
0001CAD4                            
0001CAD4                            loc_1B13C:
0001CAD4 B044                       		cmp.w	d4,d0
0001CAD6 6200                       		bhi.s	loc_1B144
0001CAD8                            
0001CAD8                            loc_1B140:
0001CAD8 6000 FE80                  		bra.w	Touch_ChkHurt
0001CADC                            ; ===========================================================================
0001CADC                            
0001CADC                            loc_1B144:
0001CADC 6000 FDC4                  		bra.w	Touch_Enemy
0001CAE0                            ; ===========================================================================
0001CAE0                            
0001CAE0                            Touch_D7orE1:				; XREF: Touch_Special
0001CAE0 5229 0021                  		addq.b	#1,$21(a1)
0001CAE4 4E75                       		rts	
0001CAE6                            ; End of function Touch_Special
0001CAE6                            
0001CAE6                            ; ---------------------------------------------------------------------------
0001CAE6                            ; Subroutine to	show the special stage layout
0001CAE6                            ; ---------------------------------------------------------------------------
0001CAE6                            
0001CAE6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CAE6                            
0001CAE6                            
0001CAE6                            SS_ShowLayout:				; XREF: SpecialStage
0001CAE6 6100 0000                  		bsr.w	SS_AniWallsRings
0001CAEA 6100 0000                  		bsr.w	SS_AniItems
0001CAEE 3F05                       		move.w	d5,-(sp)
0001CAF0 43F8 8000                  		lea	($FFFF8000).w,a1
0001CAF4 1038 F780                  		move.b	($FFFFF780).w,d0
0001CAF8                            ;		andi.b	#$FC,d0
0001CAF8 4EB9 0000 33DA             		jsr	(CalcSine).l
0001CAFE 3800                       		move.w	d0,d4
0001CB00 3A01                       		move.w	d1,d5
0001CB02 C9FC 0018                  		muls.w	#$18,d4
0001CB06 CBFC 0018                  		muls.w	#$18,d5
0001CB0A 7400                       		moveq	#0,d2
0001CB0C 3438 F700                  		move.w	($FFFFF700).w,d2
0001CB10 84FC 0018                  		divu.w	#$18,d2
0001CB14 4842                       		swap	d2
0001CB16 4442                       		neg.w	d2
0001CB18 0642 FF4C                  		addi.w	#-$B4,d2
0001CB1C 7600                       		moveq	#0,d3
0001CB1E 3638 F704                  		move.w	($FFFFF704).w,d3
0001CB22 86FC 0018                  		divu.w	#$18,d3
0001CB26 4843                       		swap	d3
0001CB28 4443                       		neg.w	d3
0001CB2A 0643 FF4C                  		addi.w	#-$B4,d3
0001CB2E 3E3C 000F                  		move.w	#$F,d7
0001CB32                            
0001CB32                            loc_1B19E:
0001CB32 48A7 E000                  		movem.w	d0-d2,-(sp)
0001CB36 48A7 C000                  		movem.w	d0-d1,-(sp)
0001CB3A 4440                       		neg.w	d0
0001CB3C C3C2                       		muls.w	d2,d1
0001CB3E C1C3                       		muls.w	d3,d0
0001CB40 2C00                       		move.l	d0,d6
0001CB42 DC81                       		add.l	d1,d6
0001CB44 4C9F 0003                  		movem.w	(sp)+,d0-d1
0001CB48 C1C2                       		muls.w	d2,d0
0001CB4A C3C3                       		muls.w	d3,d1
0001CB4C D280                       		add.l	d0,d1
0001CB4E 2406                       		move.l	d6,d2
0001CB50 3C3C 000F                  		move.w	#$F,d6
0001CB54                            
0001CB54                            loc_1B1C0:
0001CB54 2002                       		move.l	d2,d0
0001CB56 E080                       		asr.l	#8,d0
0001CB58 32C0                       		move.w	d0,(a1)+
0001CB5A 2001                       		move.l	d1,d0
0001CB5C E080                       		asr.l	#8,d0
0001CB5E 32C0                       		move.w	d0,(a1)+
0001CB60 D485                       		add.l	d5,d2
0001CB62 D284                       		add.l	d4,d1
0001CB64 51CE FFEE                  		dbf	d6,loc_1B1C0
0001CB68                            
0001CB68 4C9F 0007                  		movem.w	(sp)+,d0-d2
0001CB6C 0643 0018                  		addi.w	#$18,d3
0001CB70 51CF FFC0                  		dbf	d7,loc_1B19E
0001CB74                            
0001CB74 3A1F                       		move.w	(sp)+,d5
0001CB76 41F9 00FF 0000             		lea	($FF0000).l,a0
0001CB7C 7000                       		moveq	#0,d0
0001CB7E 3038 F704                  		move.w	($FFFFF704).w,d0
0001CB82 80FC 0018                  		divu.w	#$18,d0
0001CB86 C0FC 0080                  		mulu.w	#$80,d0
0001CB8A D1C0                       		adda.l	d0,a0
0001CB8C 7000                       		moveq	#0,d0
0001CB8E 3038 F700                  		move.w	($FFFFF700).w,d0
0001CB92 80FC 0018                  		divu.w	#$18,d0
0001CB96 D0C0                       		adda.w	d0,a0
0001CB98 49F8 8000                  		lea	($FFFF8000).w,a4
0001CB9C 3E3C 000F                  		move.w	#$F,d7
0001CBA0                            
0001CBA0                            loc_1B20C:
0001CBA0 3C3C 000F                  		move.w	#$F,d6
0001CBA4                            
0001CBA4                            loc_1B210:
0001CBA4 7000                       		moveq	#0,d0
0001CBA6 1018                       		move.b	(a0)+,d0
0001CBA8 6700                       		beq.s	loc_1B268
0001CBAA 0C00 004E                  		cmpi.b	#$4E,d0
0001CBAE 6200                       		bhi.s	loc_1B268
0001CBB0 3614                       		move.w	(a4),d3
0001CBB2 0643 0120                  		addi.w	#$120,d3
0001CBB6 0C43 0070                  		cmpi.w	#$70,d3
0001CBBA 6500                       		bcs.s	loc_1B268
0001CBBC 0C43 01D0                  		cmpi.w	#$1D0,d3
0001CBC0 6400                       		bcc.s	loc_1B268
0001CBC2 342C 0002                  		move.w	2(a4),d2
0001CBC6 0642 00F0                  		addi.w	#$F0,d2
0001CBCA 0C42 0070                  		cmpi.w	#$70,d2
0001CBCE 6500                       		bcs.s	loc_1B268
0001CBD0 0C42 0170                  		cmpi.w	#$170,d2
0001CBD4 6400                       		bcc.s	loc_1B268
0001CBD6 4BF9 00FF 4000             		lea	($FF4000).l,a5
0001CBDC E748                       		lsl.w	#3,d0
0001CBDE 4BF5 0000                  		lea	(a5,d0.w),a5
0001CBE2 225D                       		movea.l	(a5)+,a1
0001CBE4 321D                       		move.w	(a5)+,d1
0001CBE6 D241                       		add.w	d1,d1
0001CBE8 D2F1 1000                  		adda.w	(a1,d1.w),a1
0001CBEC 365D                       		movea.w	(a5)+,a3
0001CBEE 7200                       		moveq	#0,d1
0001CBF0 1219                       		move.b	(a1)+,d1
0001CBF2 5301                       		subq.b	#1,d1
0001CBF4 6B00                       		bmi.s	loc_1B268
0001CBF6 4EB9 0000 E236             		jsr	sub_D762
0001CBFC                            
0001CBFC                            loc_1B268:
0001CBFC 584C                       		addq.w	#4,a4
0001CBFE 51CE FFA4                  		dbf	d6,loc_1B210
0001CC02                            
0001CC02 41E8 0070                  		lea	$70(a0),a0
0001CC06 51CF FF98                  		dbf	d7,loc_1B20C
0001CC0A                            
0001CC0A 11C5 F62C                  		move.b	d5,($FFFFF62C).w
0001CC0E 0C05 0050                  		cmpi.b	#$50,d5
0001CC12 6700                       		beq.s	loc_1B288
0001CC14 24BC 0000 0000             		move.l	#0,(a2)
0001CC1A 4E75                       		rts	
0001CC1C                            ; ===========================================================================
0001CC1C                            
0001CC1C                            loc_1B288:
0001CC1C 157C 0000 FFFB             		move.b	#0,-5(a2)
0001CC22 4E75                       		rts	
0001CC24                            ; End of function SS_ShowLayout
0001CC24                            
0001CC24                            ; ---------------------------------------------------------------------------
0001CC24                            ; Subroutine to	animate	walls and rings	in the special stage
0001CC24                            ; ---------------------------------------------------------------------------
0001CC24                            
0001CC24                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CC24                            
0001CC24                            
0001CC24                            SS_AniWallsRings:			; XREF: SS_ShowLayout
0001CC24 43F9 00FF 400C             		lea	($FF400C).l,a1
0001CC2A 7000                       		moveq	#0,d0
0001CC2C 1038 F780                  		move.b	($FFFFF780).w,d0
0001CC30 E408                       		lsr.b	#2,d0
0001CC32 0240 000F                  		andi.w	#$F,d0
0001CC36 7223                       		moveq	#$23,d1
0001CC38                            
0001CC38                            loc_1B2A4:
0001CC38 3280                       		move.w	d0,(a1)
0001CC3A 5049                       		addq.w	#8,a1
0001CC3C 51C9 FFFA                  		dbf	d1,loc_1B2A4
0001CC40                            
0001CC40 43F9 00FF 4005             		lea	($FF4005).l,a1
0001CC46 5338 FEC2                  		subq.b	#1,($FFFFFEC2).w
0001CC4A 6A00                       		bpl.s	loc_1B2C8
0001CC4C 11FC 0007 FEC2             		move.b	#7,($FFFFFEC2).w
0001CC52 5238 FEC3                  		addq.b	#1,($FFFFFEC3).w
0001CC56 0238 0003 FEC3             		andi.b	#3,($FFFFFEC3).w
0001CC5C                            
0001CC5C                            loc_1B2C8:
0001CC5C 1378 FEC3 01D0             		move.b	($FFFFFEC3).w,$1D0(a1)
0001CC62 5338 FEC4                  		subq.b	#1,($FFFFFEC4).w
0001CC66 6A00                       		bpl.s	loc_1B2E4
0001CC68 11FC 0007 FEC4             		move.b	#7,($FFFFFEC4).w
0001CC6E 5238 FEC5                  		addq.b	#1,($FFFFFEC5).w
0001CC72 0238 0001 FEC5             		andi.b	#1,($FFFFFEC5).w
0001CC78                            
0001CC78                            loc_1B2E4:
0001CC78 1038 FEC5                  		move.b	($FFFFFEC5).w,d0
0001CC7C 1340 0138                  		move.b	d0,$138(a1)
0001CC80 1340 0160                  		move.b	d0,$160(a1)
0001CC84 1340 0148                  		move.b	d0,$148(a1)
0001CC88 1340 0150                  		move.b	d0,$150(a1)
0001CC8C 1340 01D8                  		move.b	d0,$1D8(a1)
0001CC90 1340 01E0                  		move.b	d0,$1E0(a1)
0001CC94 1340 01E8                  		move.b	d0,$1E8(a1)
0001CC98 1340 01F0                  		move.b	d0,$1F0(a1)
0001CC9C 1340 01F8                  		move.b	d0,$1F8(a1)
0001CCA0 1340 0200                  		move.b	d0,$200(a1)
0001CCA4 5338 FEC6                  		subq.b	#1,($FFFFFEC6).w
0001CCA8 6A00                       		bpl.s	loc_1B326
0001CCAA 11FC 0004 FEC6             		move.b	#4,($FFFFFEC6).w
0001CCB0 5238 FEC7                  		addq.b	#1,($FFFFFEC7).w
0001CCB4 0238 0003 FEC7             		andi.b	#3,($FFFFFEC7).w
0001CCBA                            
0001CCBA                            loc_1B326:
0001CCBA 1038 FEC7                  		move.b	($FFFFFEC7).w,d0
0001CCBE 1340 0168                  		move.b	d0,$168(a1)
0001CCC2 1340 0170                  		move.b	d0,$170(a1)
0001CCC6 1340 0178                  		move.b	d0,$178(a1)
0001CCCA 1340 0180                  		move.b	d0,$180(a1)
0001CCCE 5338 FEC0                  		subq.b	#1,($FFFFFEC0).w
0001CCD2 6A00                       		bpl.s	loc_1B350
0001CCD4 11FC 0007 FEC0             		move.b	#7,($FFFFFEC0).w
0001CCDA 5338 FEC1                  		subq.b	#1,($FFFFFEC1).w
0001CCDE 0238 0007 FEC1             		andi.b	#7,($FFFFFEC1).w
0001CCE4                            
0001CCE4                            loc_1B350:
0001CCE4 43F9 00FF 4016             		lea	($FF4016).l,a1
0001CCEA 41F9 0000 0000             		lea	(SS_WaRiVramSet).l,a0
0001CCF0 7000                       		moveq	#0,d0
0001CCF2 1038 FEC1                  		move.b	($FFFFFEC1).w,d0
0001CCF6 D040                       		add.w	d0,d0
0001CCF8 41F0 0000                  		lea	(a0,d0.w),a0
0001CCFC 3290                       		move.w	(a0),(a1)
0001CCFE 3368 0002 0008             		move.w	2(a0),8(a1)
0001CD04 3368 0004 0010             		move.w	4(a0),$10(a1)
0001CD0A 3368 0006 0018             		move.w	6(a0),$18(a1)
0001CD10 3368 0008 0020             		move.w	8(a0),$20(a1)
0001CD16 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001CD1C 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001CD22 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001CD28 D0FC 0020                  		adda.w	#$20,a0
0001CD2C D2FC 0048                  		adda.w	#$48,a1
0001CD30 3290                       		move.w	(a0),(a1)
0001CD32 3368 0002 0008             		move.w	2(a0),8(a1)
0001CD38 3368 0004 0010             		move.w	4(a0),$10(a1)
0001CD3E 3368 0006 0018             		move.w	6(a0),$18(a1)
0001CD44 3368 0008 0020             		move.w	8(a0),$20(a1)
0001CD4A 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001CD50 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001CD56 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001CD5C D0FC 0020                  		adda.w	#$20,a0
0001CD60 D2FC 0048                  		adda.w	#$48,a1
0001CD64 3290                       		move.w	(a0),(a1)
0001CD66 3368 0002 0008             		move.w	2(a0),8(a1)
0001CD6C 3368 0004 0010             		move.w	4(a0),$10(a1)
0001CD72 3368 0006 0018             		move.w	6(a0),$18(a1)
0001CD78 3368 0008 0020             		move.w	8(a0),$20(a1)
0001CD7E 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001CD84 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001CD8A 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001CD90 D0FC 0020                  		adda.w	#$20,a0
0001CD94 D2FC 0048                  		adda.w	#$48,a1
0001CD98 3290                       		move.w	(a0),(a1)
0001CD9A 3368 0002 0008             		move.w	2(a0),8(a1)
0001CDA0 3368 0004 0010             		move.w	4(a0),$10(a1)
0001CDA6 3368 0006 0018             		move.w	6(a0),$18(a1)
0001CDAC 3368 0008 0020             		move.w	8(a0),$20(a1)
0001CDB2 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001CDB8 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001CDBE 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001CDC4 D0FC 0020                  		adda.w	#$20,a0
0001CDC8 D2FC 0048                  		adda.w	#$48,a1
0001CDCC 4E75                       		rts	
0001CDCE                            ; End of function SS_AniWallsRings
0001CDCE                            
0001CDCE                            ; ===========================================================================
0001CDCE 0142 6142 0142 0142 0142+  SS_WaRiVramSet:	dc.w $142, $6142, $142,	$142, $142, $142, $142,	$6142
0001CDDE 0142 6142 0142 0142 0142+  		dc.w $142, $6142, $142,	$142, $142, $142, $142,	$6142
0001CDEE 2142 0142 2142 2142 2142+  		dc.w $2142, $142, $2142, $2142,	$2142, $2142, $2142, $142
0001CDFE 2142 0142 2142 2142 2142+  		dc.w $2142, $142, $2142, $2142,	$2142, $2142, $2142, $142
0001CE0E 4142 2142 4142 4142 4142+  		dc.w $4142, $2142, $4142, $4142, $4142,	$4142, $4142, $2142
0001CE1E 4142 2142 4142 4142 4142+  		dc.w $4142, $2142, $4142, $4142, $4142,	$4142, $4142, $2142
0001CE2E 6142 4142 6142 6142 6142+  		dc.w $6142, $4142, $6142, $6142, $6142,	$6142, $6142, $4142
0001CE3E 6142 4142 6142 6142 6142+  		dc.w $6142, $4142, $6142, $6142, $6142,	$6142, $6142, $4142
0001CE4E                            ; ---------------------------------------------------------------------------
0001CE4E                            ; Subroutine to	remove items when you collect them in the special stage
0001CE4E                            ; ---------------------------------------------------------------------------
0001CE4E                            
0001CE4E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CE4E                            
0001CE4E                            
0001CE4E                            SS_RemoveCollectedItem:			; XREF: Obj09_ChkItems
0001CE4E 45F9 00FF 4400             		lea	($FF4400).l,a2
0001CE54 303C 001F                  		move.w	#$1F,d0
0001CE58                            
0001CE58                            loc_1B4C4:
0001CE58 4A12                       		tst.b	(a2)
0001CE5A 6700                       		beq.s	locret_1B4CE
0001CE5C 504A                       		addq.w	#8,a2
0001CE5E 51C8 FFF8                  		dbf	d0,loc_1B4C4
0001CE62                            
0001CE62                            locret_1B4CE:
0001CE62 4E75                       		rts	
0001CE64                            ; End of function SS_RemoveCollectedItem
0001CE64                            
0001CE64                            ; ---------------------------------------------------------------------------
0001CE64                            ; Subroutine to	animate	special	stage items when you touch them
0001CE64                            ; ---------------------------------------------------------------------------
0001CE64                            
0001CE64                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CE64                            
0001CE64                            
0001CE64                            SS_AniItems:				; XREF: SS_ShowLayout
0001CE64 41F9 00FF 4400             		lea	($FF4400).l,a0
0001CE6A 3E3C 001F                  		move.w	#$1F,d7
0001CE6E                            
0001CE6E                            loc_1B4DA:
0001CE6E 7000                       		moveq	#0,d0
0001CE70 1010                       		move.b	(a0),d0
0001CE72 6700                       		beq.s	loc_1B4E8
0001CE74 E548                       		lsl.w	#2,d0
0001CE76 227B 0000                  		movea.l	SS_AniIndex-4(pc,d0.w),a1
0001CE7A 4E91                       		jsr	(a1)
0001CE7C                            
0001CE7C                            loc_1B4E8:
0001CE7C 5048                       		addq.w	#8,a0
0001CE7E                            
0001CE7E                            loc_1B4EA:
0001CE7E 51CF FFEE                  		dbf	d7,loc_1B4DA
0001CE82                            
0001CE82 4E75                       		rts	
0001CE84                            ; End of function SS_AniItems
0001CE84                            
0001CE84                            ; ===========================================================================
0001CE84 0000 0000                  SS_AniIndex:	dc.l SS_AniRingSparks
0001CE88 0000 0000                  		dc.l SS_AniBumper
0001CE8C 0000 0000                  		dc.l SS_Ani1Up
0001CE90 0000 0000                  		dc.l SS_AniReverse
0001CE94 0000 0000                  		dc.l SS_AniEmeraldSparks
0001CE98 0000 0000                  		dc.l SS_AniGlassBlock
0001CE9C                            ; ===========================================================================
0001CE9C                            
0001CE9C                            SS_AniRingSparks:			; XREF: SS_AniIndex
0001CE9C 5328 0002                  		subq.b	#1,2(a0)
0001CEA0 6A00                       		bpl.s	locret_1B530
0001CEA2 117C 0005 0002             		move.b	#5,2(a0)
0001CEA8 7000                       		moveq	#0,d0
0001CEAA 1028 0003                  		move.b	3(a0),d0
0001CEAE 5228 0003                  		addq.b	#1,3(a0)
0001CEB2 2268 0004                  		movea.l	4(a0),a1
0001CEB6 103B 0000                  		move.b	SS_AniRingData(pc,d0.w),d0
0001CEBA 1280                       		move.b	d0,(a1)
0001CEBC 6600                       		bne.s	locret_1B530
0001CEBE 4290                       		clr.l	(a0)
0001CEC0 42A8 0004                  		clr.l	4(a0)
0001CEC4                            
0001CEC4                            locret_1B530:
0001CEC4 4E75                       		rts	
0001CEC6                            ; ===========================================================================
0001CEC6 4243 4445 0000             SS_AniRingData:	dc.b $42, $43, $44, $45, 0, 0
0001CECC                            ; ===========================================================================
0001CECC                            
0001CECC                            SS_AniBumper:				; XREF: SS_AniIndex
0001CECC 5328 0002                  		subq.b	#1,2(a0)
0001CED0 6A00                       		bpl.s	locret_1B566
0001CED2 117C 0007 0002             		move.b	#7,2(a0)
0001CED8 7000                       		moveq	#0,d0
0001CEDA 1028 0003                  		move.b	3(a0),d0
0001CEDE 5228 0003                  		addq.b	#1,3(a0)
0001CEE2 2268 0004                  		movea.l	4(a0),a1
0001CEE6 103B 0000                  		move.b	SS_AniBumpData(pc,d0.w),d0
0001CEEA 6600                       		bne.s	loc_1B564
0001CEEC 4290                       		clr.l	(a0)
0001CEEE 42A8 0004                  		clr.l	4(a0)
0001CEF2 12BC 0025                  		move.b	#$25,(a1)
0001CEF6 4E75                       		rts	
0001CEF8                            ; ===========================================================================
0001CEF8                            
0001CEF8                            loc_1B564:
0001CEF8 1280                       		move.b	d0,(a1)
0001CEFA                            
0001CEFA                            locret_1B566:
0001CEFA 4E75                       		rts	
0001CEFC                            ; ===========================================================================
0001CEFC 3233 3233 0000             SS_AniBumpData:	dc.b $32, $33, $32, $33, 0, 0
0001CF02                            ; ===========================================================================
0001CF02                            
0001CF02                            SS_Ani1Up:				; XREF: SS_AniIndex
0001CF02 5328 0002                  		subq.b	#1,2(a0)
0001CF06 6A00                       		bpl.s	locret_1B596
0001CF08 117C 0005 0002             		move.b	#5,2(a0)
0001CF0E 7000                       		moveq	#0,d0
0001CF10 1028 0003                  		move.b	3(a0),d0
0001CF14 5228 0003                  		addq.b	#1,3(a0)
0001CF18 2268 0004                  		movea.l	4(a0),a1
0001CF1C 103B 0000                  		move.b	SS_Ani1UpData(pc,d0.w),d0
0001CF20 1280                       		move.b	d0,(a1)
0001CF22 6600                       		bne.s	locret_1B596
0001CF24 4290                       		clr.l	(a0)
0001CF26 42A8 0004                  		clr.l	4(a0)
0001CF2A                            
0001CF2A                            locret_1B596:
0001CF2A 4E75                       		rts	
0001CF2C                            ; ===========================================================================
0001CF2C 4647 4849 0000             SS_Ani1UpData:	dc.b $46, $47, $48, $49, 0, 0
0001CF32                            ; ===========================================================================
0001CF32                            
0001CF32                            SS_AniReverse:				; XREF: SS_AniIndex
0001CF32 5328 0002                  		subq.b	#1,2(a0)
0001CF36 6A00                       		bpl.s	locret_1B5CC
0001CF38 117C 0007 0002             		move.b	#7,2(a0)
0001CF3E 7000                       		moveq	#0,d0
0001CF40 1028 0003                  		move.b	3(a0),d0
0001CF44 5228 0003                  		addq.b	#1,3(a0)
0001CF48 2268 0004                  		movea.l	4(a0),a1
0001CF4C 103B 0000                  		move.b	SS_AniRevData(pc,d0.w),d0
0001CF50 6600                       		bne.s	loc_1B5CA
0001CF52 4290                       		clr.l	(a0)
0001CF54 42A8 0004                  		clr.l	4(a0)
0001CF58 12BC 002B                  		move.b	#$2B,(a1)
0001CF5C 4E75                       		rts	
0001CF5E                            ; ===========================================================================
0001CF5E                            
0001CF5E                            loc_1B5CA:
0001CF5E 1280                       		move.b	d0,(a1)
0001CF60                            
0001CF60                            locret_1B5CC:
0001CF60 4E75                       		rts	
0001CF62                            ; ===========================================================================
0001CF62 2B31 2B31 0000             SS_AniRevData:	dc.b $2B, $31, $2B, $31, 0, 0
0001CF68                            ; ===========================================================================
0001CF68                            
0001CF68                            SS_AniEmeraldSparks:			; XREF: SS_AniIndex
0001CF68 5328 0002                  		subq.b	#1,2(a0)
0001CF6C 6A00                       		bpl.s	locret_1B60C
0001CF6E 117C 0005 0002             		move.b	#5,2(a0)
0001CF74 7000                       		moveq	#0,d0
0001CF76 1028 0003                  		move.b	3(a0),d0
0001CF7A 5228 0003                  		addq.b	#1,3(a0)
0001CF7E 2268 0004                  		movea.l	4(a0),a1
0001CF82 103B 0000                  		move.b	SS_AniEmerData(pc,d0.w),d0
0001CF86 1280                       		move.b	d0,(a1)
0001CF88 6600                       		bne.s	locret_1B60C
0001CF8A 4290                       		clr.l	(a0)
0001CF8C 42A8 0004                  		clr.l	4(a0)
0001CF90 11FC 0004 D024             		move.b	#4,($FFFFD024).w
0001CF96 303C 00A8                  		move.w	#$A8,d0
0001CF9A 4EB9 0000 147C             		jsr	(PlaySound_Special).l ;	play special stage GOAL	sound
0001CFA0                            
0001CFA0                            locret_1B60C:
0001CFA0 4E75                       		rts	
0001CFA2                            ; ===========================================================================
0001CFA2 4647 4849 0000             SS_AniEmerData:	dc.b $46, $47, $48, $49, 0, 0
0001CFA8                            ; ===========================================================================
0001CFA8                            
0001CFA8                            SS_AniGlassBlock:			; XREF: SS_AniIndex
0001CFA8 5328 0002                  		subq.b	#1,2(a0)
0001CFAC 6A00                       		bpl.s	locret_1B640
0001CFAE 117C 0001 0002             		move.b	#1,2(a0)
0001CFB4 7000                       		moveq	#0,d0
0001CFB6 1028 0003                  		move.b	3(a0),d0
0001CFBA 5228 0003                  		addq.b	#1,3(a0)
0001CFBE 2268 0004                  		movea.l	4(a0),a1
0001CFC2 103B 0000                  		move.b	SS_AniGlassData(pc,d0.w),d0
0001CFC6 1280                       		move.b	d0,(a1)
0001CFC8 6600                       		bne.s	locret_1B640
0001CFCA 12A8 0004                  		move.b	4(a0),(a1)
0001CFCE 4290                       		clr.l	(a0)
0001CFD0 42A8 0004                  		clr.l	4(a0)
0001CFD4                            
0001CFD4                            locret_1B640:
0001CFD4 4E75                       		rts	
0001CFD6                            ; ===========================================================================
0001CFD6 4B4C 4D4E 4B4C 4D4E 0000   SS_AniGlassData:dc.b $4B, $4C, $4D, $4E, $4B, $4C, $4D,	$4E, 0,	0
0001CFE0                            ; ---------------------------------------------------------------------------
0001CFE0                            ; Special stage	layout pointers
0001CFE0                            ; ---------------------------------------------------------------------------
0001CFE0                            SS_LayoutIndex:
0001CFE0                            	include "_inc\Special stage layout pointers.asm"
0001CFE0                            ; ---------------------------------------------------------------------------
0001CFE0                            ; Special stage	layout pointers
0001CFE0                            ; ---------------------------------------------------------------------------
0001CFE0 0000 0000                  	dc.l SS_1
0001CFE4 0000 0000                  	dc.l SS_2
0001CFE8 0000 0000                  	dc.l SS_3
0001CFEC 0000 0000                  	dc.l SS_4
0001CFF0 0000 0000                  	dc.l SS_5
0001CFF4 0000 0000                  	dc.l SS_6
0001CFF8                            	even
0001CFF8                            	even
0001CFF8                            
0001CFF8                            ; ---------------------------------------------------------------------------
0001CFF8                            ; Special stage	start locations
0001CFF8                            ; ---------------------------------------------------------------------------
0001CFF8                            SS_StartLoc:	incbin	misc\sloc_ss.bin
0001D010                            		even
0001D010                            
0001D010                            ; ---------------------------------------------------------------------------
0001D010                            ; Subroutine to	load special stage layout
0001D010                            ; ---------------------------------------------------------------------------
0001D010                            
0001D010                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D010                            
0001D010                            
0001D010                            SS_Load:				; XREF: SpecialStage
0001D010 7000                       		moveq	#0,d0
0001D012 1038 FE16                  		move.b	($FFFFFE16).w,d0 ; load	number of last special stage entered
0001D016 5238 FE16                  		addq.b	#1,($FFFFFE16).w
0001D01A 0C38 0006 FE16             		cmpi.b	#6,($FFFFFE16).w
0001D020 6500                       		bcs.s	SS_ChkEmldNum
0001D022 11FC 0000 FE16             		move.b	#0,($FFFFFE16).w ; reset if higher than	6
0001D028                            
0001D028                            SS_ChkEmldNum:
0001D028 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all emeralds?
0001D02E 6700                       		beq.s	SS_LoadData	; if yes, branch
0001D030 7200                       		moveq	#0,d1
0001D032 1238 FE57                  		move.b	($FFFFFE57).w,d1
0001D036 5301                       		subq.b	#1,d1
0001D038 6500                       		bcs.s	SS_LoadData
0001D03A 47F8 FE58                  		lea	($FFFFFE58).w,a3 ; check which emeralds	you have
0001D03E                            
0001D03E                            SS_ChkEmldLoop:	
0001D03E B033 1000                  		cmp.b	(a3,d1.w),d0
0001D042 6600                       		bne.s	SS_ChkEmldRepeat
0001D044 60CA                       		bra.s	SS_Load
0001D046                            ; ===========================================================================
0001D046                            
0001D046                            SS_ChkEmldRepeat:
0001D046 51C9 FFF6                  		dbf	d1,SS_ChkEmldLoop
0001D04A                            
0001D04A                            SS_LoadData:
0001D04A E548                       		lsl.w	#2,d0
0001D04C 43FB 00AA                  		lea	SS_StartLoc(pc,d0.w),a1
0001D050 31D9 D008                  		move.w	(a1)+,($FFFFD008).w
0001D054 31D9 D00C                  		move.w	(a1)+,($FFFFD00C).w
0001D058 207B 0086                  		movea.l	SS_LayoutIndex(pc,d0.w),a0
0001D05C 43F9 00FF 4000             		lea	($FF4000).l,a1
0001D062 303C 0000                  		move.w	#0,d0
0001D066 4EB9 0000 188E             		jsr	(EniDec).l
0001D06C 43F9 00FF 0000             		lea	($FF0000).l,a1
0001D072 303C 0FFF                  		move.w	#$FFF,d0
0001D076                            
0001D076                            SS_ClrRAM3:
0001D076 4299                       		clr.l	(a1)+
0001D078 51C8 FFFC                  		dbf	d0,SS_ClrRAM3
0001D07C                            
0001D07C 43F9 00FF 1020             		lea	($FF1020).l,a1
0001D082 41F9 00FF 4000             		lea	($FF4000).l,a0
0001D088 723F                       		moveq	#$3F,d1
0001D08A                            
0001D08A                            loc_1B6F6:
0001D08A 743F                       		moveq	#$3F,d2
0001D08C                            
0001D08C                            loc_1B6F8:
0001D08C 12D8                       		move.b	(a0)+,(a1)+
0001D08E 51CA FFFC                  		dbf	d2,loc_1B6F8
0001D092                            
0001D092 43E9 0040                  		lea	$40(a1),a1
0001D096 51C9 FFF2                  		dbf	d1,loc_1B6F6
0001D09A                            
0001D09A 43F9 00FF 4008             		lea	($FF4008).l,a1
0001D0A0 41F9 0000 0000             		lea	(SS_MapIndex).l,a0
0001D0A6 724D                       		moveq	#$4D,d1
0001D0A8                            
0001D0A8                            loc_1B714:
0001D0A8 22D8                       		move.l	(a0)+,(a1)+
0001D0AA 32FC 0000                  		move.w	#0,(a1)+
0001D0AE 1368 FFFC FFFF             		move.b	-4(a0),-1(a1)
0001D0B4 32D8                       		move.w	(a0)+,(a1)+
0001D0B6 51C9 FFF0                  		dbf	d1,loc_1B714
0001D0BA                            
0001D0BA 43F9 00FF 4400             		lea	($FF4400).l,a1
0001D0C0 323C 003F                  		move.w	#$3F,d1
0001D0C4                            
0001D0C4                            loc_1B730:
0001D0C4                            
0001D0C4 4299                       		clr.l	(a1)+
0001D0C6 51C9 FFFC                  		dbf	d1,loc_1B730
0001D0CA                            
0001D0CA 4E75                       		rts	
0001D0CC                            ; End of function SS_Load
0001D0CC                            
0001D0CC                            ; ===========================================================================
0001D0CC                            ; ---------------------------------------------------------------------------
0001D0CC                            ; Special stage	mappings and VRAM pointers
0001D0CC                            ; ---------------------------------------------------------------------------
0001D0CC                            SS_MapIndex:
0001D0CC                            	include "_inc\Special stage mappings and VRAM pointers.asm"
0001D0CC                            ; ---------------------------------------------------------------------------
0001D0CC                            ; Special stage	mappings and VRAM pointers
0001D0CC                            ; ---------------------------------------------------------------------------
0001D0CC 0000 0000                  	dc.l Map_SSWalls	; address of mappings
0001D0D0 0142                       	dc.w $142		; VRAM setting
0001D0D2 0000 0000                  	dc.l Map_SSWalls
0001D0D6 0142                       	dc.w $142
0001D0D8 0000 0000                  	dc.l Map_SSWalls
0001D0DC 0142                       	dc.w $142
0001D0DE 0000 0000                  	dc.l Map_SSWalls
0001D0E2 0142                       	dc.w $142
0001D0E4 0000 0000                  	dc.l Map_SSWalls
0001D0E8 0142                       	dc.w $142
0001D0EA 0000 0000                  	dc.l Map_SSWalls
0001D0EE 0142                       	dc.w $142
0001D0F0 0000 0000                  	dc.l Map_SSWalls
0001D0F4 0142                       	dc.w $142
0001D0F6 0000 0000                  	dc.l Map_SSWalls
0001D0FA 0142                       	dc.w $142
0001D0FC 0000 0000                  	dc.l Map_SSWalls
0001D100 0142                       	dc.w $142
0001D102 0000 0000                  	dc.l Map_SSWalls
0001D106 2142                       	dc.w $2142
0001D108 0000 0000                  	dc.l Map_SSWalls
0001D10C 2142                       	dc.w $2142
0001D10E 0000 0000                  	dc.l Map_SSWalls
0001D112 2142                       	dc.w $2142
0001D114 0000 0000                  	dc.l Map_SSWalls
0001D118 2142                       	dc.w $2142
0001D11A 0000 0000                  	dc.l Map_SSWalls
0001D11E 2142                       	dc.w $2142
0001D120 0000 0000                  	dc.l Map_SSWalls
0001D124 2142                       	dc.w $2142
0001D126 0000 0000                  	dc.l Map_SSWalls
0001D12A 2142                       	dc.w $2142
0001D12C 0000 0000                  	dc.l Map_SSWalls
0001D130 2142                       	dc.w $2142
0001D132 0000 0000                  	dc.l Map_SSWalls
0001D136 2142                       	dc.w $2142
0001D138 0000 0000                  	dc.l Map_SSWalls
0001D13C 4142                       	dc.w $4142
0001D13E 0000 0000                  	dc.l Map_SSWalls
0001D142 4142                       	dc.w $4142
0001D144 0000 0000                  	dc.l Map_SSWalls
0001D148 4142                       	dc.w $4142
0001D14A 0000 0000                  	dc.l Map_SSWalls
0001D14E 4142                       	dc.w $4142
0001D150 0000 0000                  	dc.l Map_SSWalls
0001D154 4142                       	dc.w $4142
0001D156 0000 0000                  	dc.l Map_SSWalls
0001D15A 4142                       	dc.w $4142
0001D15C 0000 0000                  	dc.l Map_SSWalls
0001D160 4142                       	dc.w $4142
0001D162 0000 0000                  	dc.l Map_SSWalls
0001D166 4142                       	dc.w $4142
0001D168 0000 0000                  	dc.l Map_SSWalls
0001D16C 4142                       	dc.w $4142
0001D16E 0000 0000                  	dc.l Map_SSWalls
0001D172 6142                       	dc.w $6142
0001D174 0000 0000                  	dc.l Map_SSWalls
0001D178 6142                       	dc.w $6142
0001D17A 0000 0000                  	dc.l Map_SSWalls
0001D17E 6142                       	dc.w $6142
0001D180 0000 0000                  	dc.l Map_SSWalls
0001D184 6142                       	dc.w $6142
0001D186 0000 0000                  	dc.l Map_SSWalls
0001D18A 6142                       	dc.w $6142
0001D18C 0000 0000                  	dc.l Map_SSWalls
0001D190 6142                       	dc.w $6142
0001D192 0000 0000                  	dc.l Map_SSWalls
0001D196 6142                       	dc.w $6142
0001D198 0000 0000                  	dc.l Map_SSWalls
0001D19C 6142                       	dc.w $6142
0001D19E 0000 0000                  	dc.l Map_SSWalls
0001D1A2 6142                       	dc.w $6142
0001D1A4 0000 F5DE                  	dc.l Map_obj47
0001D1A8 023B                       	dc.w $23B
0001D1AA 0000 0000                  	dc.l Map_SS_R
0001D1AE 0570                       	dc.w $570
0001D1B0 0000 0000                  	dc.l Map_SS_R
0001D1B4 0251                       	dc.w $251
0001D1B6 0000 0000                  	dc.l Map_SS_R
0001D1BA 0370                       	dc.w $370
0001D1BC 0000 0000                  	dc.l Map_SS_Up
0001D1C0 0263                       	dc.w $263
0001D1C2 0000 0000                  	dc.l Map_SS_Down
0001D1C6 0263                       	dc.w $263
0001D1C8 0000 0000                  	dc.l Map_SS_R
0001D1CC 22F0                       	dc.w $22F0
0001D1CE 0000 0000                  	dc.l Map_SS_Glass
0001D1D2 0470                       	dc.w $470
0001D1D4 0000 0000                  	dc.l Map_SS_Glass
0001D1D8 05F0                       	dc.w $5F0
0001D1DA 0000 0000                  	dc.l Map_SS_Glass
0001D1DE 65F0                       	dc.w $65F0
0001D1E0 0000 0000                  	dc.l Map_SS_Glass
0001D1E4 25F0                       	dc.w $25F0
0001D1E6 0000 0000                  	dc.l Map_SS_Glass
0001D1EA 45F0                       	dc.w $45F0
0001D1EC 0000 0000                  	dc.l Map_SS_R
0001D1F0 02F0                       	dc.w $2F0
0001D1F2 0100 F5DE                  	dc.l Map_obj47+$1000000	; add frame no.	* $1000000
0001D1F6 023B                       	dc.w $23B
0001D1F8 0200 F5DE                  	dc.l Map_obj47+$2000000
0001D1FC 023B                       	dc.w $23B
0001D1FE 0000 0000                  	dc.l Map_SS_R
0001D202 0797                       	dc.w $797
0001D204 0000 0000                  	dc.l Map_SS_R
0001D208 07A0                       	dc.w $7A0
0001D20A 0000 0000                  	dc.l Map_SS_R
0001D20E 07A9                       	dc.w $7A9
0001D210 0000 0000                  	dc.l Map_SS_R
0001D214 0797                       	dc.w $797
0001D216 0000 0000                  	dc.l Map_SS_R
0001D21A 07A0                       	dc.w $7A0
0001D21C 0000 0000                  	dc.l Map_SS_R
0001D220 07A9                       	dc.w $7A9
0001D222 0000 AA30                  	dc.l Map_obj25
0001D226 27B2                       	dc.w $27B2
0001D228 0000 0000                  	dc.l Map_SS_Chaos3
0001D22C 0770                       	dc.w $770
0001D22E 0000 0000                  	dc.l Map_SS_Chaos3
0001D232 2770                       	dc.w $2770
0001D234 0000 0000                  	dc.l Map_SS_Chaos3
0001D238 4770                       	dc.w $4770
0001D23A 0000 0000                  	dc.l Map_SS_Chaos3
0001D23E 6770                       	dc.w $6770
0001D240 0000 0000                  	dc.l Map_SS_Chaos1
0001D244 0770                       	dc.w $770
0001D246 0000 0000                  	dc.l Map_SS_Chaos2
0001D24A 0770                       	dc.w $770
0001D24C 0000 0000                  	dc.l Map_SS_R
0001D250 04F0                       	dc.w $4F0
0001D252 0400 AA30                  	dc.l Map_obj25+$4000000
0001D256 27B2                       	dc.w $27B2
0001D258 0500 AA30                  	dc.l Map_obj25+$5000000
0001D25C 27B2                       	dc.w $27B2
0001D25E 0600 AA30                  	dc.l Map_obj25+$6000000
0001D262 27B2                       	dc.w $27B2
0001D264 0700 AA30                  	dc.l Map_obj25+$7000000
0001D268 27B2                       	dc.w $27B2
0001D26A 0000 0000                  	dc.l Map_SS_Glass
0001D26E 23F0                       	dc.w $23F0
0001D270 0000 0000                  	dc.l Map_SS_Glass+$1000000
0001D274 23F0                       	dc.w $23F0
0001D276 0000 0000                  	dc.l Map_SS_Glass+$2000000
0001D27A 23F0                       	dc.w $23F0
0001D27C 0000 0000                  	dc.l Map_SS_Glass+$3000000
0001D280 23F0                       	dc.w $23F0
0001D282 0000 0000                  	dc.l Map_SS_R+$2000000
0001D286 04F0                       	dc.w $4F0
0001D288 0000 0000                  	dc.l Map_SS_Glass
0001D28C 05F0                       	dc.w $5F0
0001D28E 0000 0000                  	dc.l Map_SS_Glass
0001D292 65F0                       	dc.w $65F0
0001D294 0000 0000                  	dc.l Map_SS_Glass
0001D298 25F0                       	dc.w $25F0
0001D29A 0000 0000                  	dc.l Map_SS_Glass
0001D29E 45F0                       	dc.w $45F0
0001D29E 45F0                       	dc.w $45F0
0001D2A0                            
0001D2A0                            ; ---------------------------------------------------------------------------
0001D2A0                            ; Sprite mappings - special stage "R" block
0001D2A0                            ; ---------------------------------------------------------------------------
0001D2A0                            Map_SS_R:
0001D2A0                            	include "_maps\SSRblock.asm"
0001D2A0                            ; ---------------------------------------------------------------------------
0001D2A0                            ; Sprite mappings - special stage "R" block
0001D2A0                            ; ---------------------------------------------------------------------------
0001D2A0 0000 0000                  		dc.w byte_1B912-Map_SS_R, byte_1B918-Map_SS_R
0001D2A4 0000                       		dc.w byte_1B91E-Map_SS_R
0001D2A6 01                         byte_1B912:	dc.b 1
0001D2A7 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001D2AC 01                         byte_1B918:	dc.b 1
0001D2AD F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001D2B2 00                         byte_1B91E:	dc.b 0
0001D2B4 00                         		even
0001D2B4 00                         		even
0001D2B4                            
0001D2B4                            ; ---------------------------------------------------------------------------
0001D2B4                            ; Sprite mappings - special stage breakable glass blocks and red-white blocks
0001D2B4                            ; ---------------------------------------------------------------------------
0001D2B4                            Map_SS_Glass:
0001D2B4                            	include "_maps\SSglassblock.asm"
0001D2B4                            ; ---------------------------------------------------------------------------
0001D2B4                            ; Sprite mappings - special stage breakable glass blocks and red-white blocks
0001D2B4                            ; ---------------------------------------------------------------------------
0001D2B4 0000 0000                  		dc.w byte_1B928-Map_SS_Glass, byte_1B92E-Map_SS_Glass
0001D2B8 0000 0000                  		dc.w byte_1B934-Map_SS_Glass, byte_1B93A-Map_SS_Glass
0001D2BC 01                         byte_1B928:	dc.b 1
0001D2BD F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001D2C2 01                         byte_1B92E:	dc.b 1
0001D2C3 F40A 0800 F4               		dc.b $F4, $A, 8, 0, $F4
0001D2C8 01                         byte_1B934:	dc.b 1
0001D2C9 F40A 1800 F4               		dc.b $F4, $A, $18, 0, $F4
0001D2CE 01                         byte_1B93A:	dc.b 1
0001D2CF F40A 1000 F4               		dc.b $F4, $A, $10, 0, $F4
0001D2D4                            		even
0001D2D4                            		even
0001D2D4                            
0001D2D4                            ; ---------------------------------------------------------------------------
0001D2D4                            ; Sprite mappings - special stage "UP" block
0001D2D4                            ; ---------------------------------------------------------------------------
0001D2D4                            Map_SS_Up:
0001D2D4                            	include "_maps\SSUPblock.asm"
0001D2D4                            ; ---------------------------------------------------------------------------
0001D2D4                            ; Sprite mappings - special stage "UP" block
0001D2D4                            ; ---------------------------------------------------------------------------
0001D2D4 0000                       		dc.w byte_1B944-Map_SS_Up
0001D2D6 0000                       		dc.w byte_1B94A-Map_SS_Up
0001D2D8 01                         byte_1B944:	dc.b 1
0001D2D9 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001D2DE 01                         byte_1B94A:	dc.b 1
0001D2DF F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001D2E4                            		even
0001D2E4                            		even
0001D2E4                            
0001D2E4                            ; ---------------------------------------------------------------------------
0001D2E4                            ; Sprite mappings - special stage "DOWN" block
0001D2E4                            ; ---------------------------------------------------------------------------
0001D2E4                            Map_SS_Down:
0001D2E4                            	include "_maps\SSDOWNblock.asm"
0001D2E4                            ; ---------------------------------------------------------------------------
0001D2E4                            ; Sprite mappings - special stage "DOWN" block
0001D2E4                            ; ---------------------------------------------------------------------------
0001D2E4 0000                       		dc.w byte_1B954-Map_SS_Down
0001D2E6 0000                       		dc.w byte_1B95A-Map_SS_Down
0001D2E8 01                         byte_1B954:	dc.b 1
0001D2E9 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001D2EE 01                         byte_1B95A:	dc.b 1
0001D2EF F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001D2F4                            		even
0001D2F4                            		even
0001D2F4                            
0001D2F4                            ; ---------------------------------------------------------------------------
0001D2F4                            ; Sprite mappings - special stage chaos	emeralds
0001D2F4                            ; ---------------------------------------------------------------------------
0001D2F4 0000                       Map_SS_Chaos1:	dc.w byte_1B96C-Map_SS_Chaos1
0001D2F6 0000                       		dc.w byte_1B97E-Map_SS_Chaos1
0001D2F8 0000                       Map_SS_Chaos2:	dc.w byte_1B972-Map_SS_Chaos2
0001D2FA 0000                       		dc.w byte_1B97E-Map_SS_Chaos2
0001D2FC 0000                       Map_SS_Chaos3:	dc.w byte_1B978-Map_SS_Chaos3
0001D2FE 0000                       		dc.w byte_1B97E-Map_SS_Chaos3
0001D300 01                         byte_1B96C:	dc.b 1
0001D301 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0001D306 01                         byte_1B972:	dc.b 1
0001D307 F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
0001D30C 01                         byte_1B978:	dc.b 1
0001D30D F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
0001D312 01                         byte_1B97E:	dc.b 1
0001D313 F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
0001D318                            		even
0001D318                            ; ===========================================================================
0001D318                            ; ---------------------------------------------------------------------------
0001D318                            ; Object 09 - Sonic (special stage)
0001D318                            ; ---------------------------------------------------------------------------
0001D318                            
0001D318                            Obj09:					; XREF: Obj_Index
0001D318 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
0001D31C 6700                       		beq.s	Obj09_Normal	; if not, branch
0001D31E 6100 0000                  		bsr.w	SS_FixCamera
0001D322 6000 0000                  		bra.w	DebugMode
0001D326                            ; ===========================================================================
0001D326                            
0001D326                            Obj09_Normal:
0001D326 7000                       		moveq	#0,d0
0001D328 1028 0024                  		move.b	$24(a0),d0
0001D32C 323B 0000                  		move.w	Obj09_Index(pc,d0.w),d1
0001D330 4EFB 1000                  		jmp	Obj09_Index(pc,d1.w)
0001D334                            ; ===========================================================================
0001D334 0000                       Obj09_Index:	dc.w Obj09_Main-Obj09_Index
0001D336 0000                       		dc.w Obj09_ChkDebug-Obj09_Index
0001D338 0000                       		dc.w Obj09_ExitStage-Obj09_Index
0001D33A 0000                       		dc.w Obj09_Exit2-Obj09_Index
0001D33C                            ; ===========================================================================
0001D33C                            
0001D33C                            Obj09_Main:				; XREF: Obj09_Index
0001D33C 5428 0024                  		addq.b	#2,$24(a0)
0001D340 117C 000E 0016             		move.b	#$E,$16(a0)
0001D346 117C 0007 0017             		move.b	#7,$17(a0)
0001D34C 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
0001D354 317C 0780 0002             		move.w	#$780,2(a0)
0001D35A 117C 0004 0001             		move.b	#4,1(a0)
0001D360 117C 0000 0018             		move.b	#0,$18(a0)
0001D366 117C 0002 001C             		move.b	#2,$1C(a0)
0001D36C 08E8 0002 0022             		bset	#2,$22(a0)
0001D372 08E8 0001 0022             		bset	#1,$22(a0)
0001D378                            
0001D378                            Obj09_ChkDebug:				; XREF: Obj09_Index
0001D378 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug mode	cheat enabled?
0001D37C 6700                       		beq.s	Obj09_NoDebug	; if not, branch
0001D37E 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button B pressed?
0001D384 6700                       		beq.s	Obj09_NoDebug	; if not, branch
0001D386 31FC 0001 FE08             		move.w	#1,($FFFFFE08).w ; change Sonic	into a ring
0001D38C                            
0001D38C                            Obj09_NoDebug:
0001D38C 117C 0000 0030             		move.b	#0,$30(a0)
0001D392 7000                       		moveq	#0,d0
0001D394 1028 0022                  		move.b	$22(a0),d0
0001D398 0240 0002                  		andi.w	#2,d0
0001D39C 323B 0000                  		move.w	Obj09_Modes(pc,d0.w),d1
0001D3A0 4EBB 1000                  		jsr	Obj09_Modes(pc,d1.w)
0001D3A4 4EB9 0001 50CE             		jsr	LoadSonicDynPLC
0001D3AA 4EF9 0000 E0D6             		jmp	DisplaySprite
0001D3B0                            ; ===========================================================================
0001D3B0 0000                       Obj09_Modes:	dc.w Obj09_OnWall-Obj09_Modes
0001D3B2 0000                       		dc.w Obj09_InAir-Obj09_Modes
0001D3B4                            ; ===========================================================================
0001D3B4                            
0001D3B4                            Obj09_OnWall:				; XREF: Obj09_Modes
0001D3B4 6100 0000                  		bsr.w	Obj09_Jump
0001D3B8 6100 0000                  		bsr.w	Obj09_Move
0001D3BC 6100 0000                  		bsr.w	Obj09_Fall
0001D3C0 6000                       		bra.s	Obj09_Display
0001D3C2                            ; ===========================================================================
0001D3C2                            
0001D3C2                            Obj09_InAir:				; XREF: Obj09_Modes
0001D3C2 6100 0000                  		bsr.w	nullsub_2
0001D3C6 6100 0000                  		bsr.w	Obj09_Move
0001D3CA 6100 0000                  		bsr.w	Obj09_Fall
0001D3CE                            
0001D3CE                            Obj09_Display:				; XREF: Obj09_OnWall
0001D3CE 6100 0000                  		bsr.w	Obj09_ChkItems
0001D3D2 6100 0000                  		bsr.w	Obj09_ChkItems2
0001D3D6 4EB9 0000 E0B0             		jsr	SpeedToPos
0001D3DC 6100 0000                  		bsr.w	SS_FixCamera
0001D3E0 3038 F780                  		move.w	($FFFFF780).w,d0
0001D3E4 D078 F782                  		add.w	($FFFFF782).w,d0
0001D3E8 31C0 F780                  		move.w	d0,($FFFFF780).w
0001D3EC 4EB9 0001 4B96             		jsr	Sonic_Animate
0001D3F2 4E75                       		rts	
0001D3F4                            
0001D3F4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D3F4                            
0001D3F4                            
0001D3F4                            Obj09_Move:				; XREF: Obj09_OnWall; Obj09_InAir
0001D3F4 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
0001D3FA 6700                       		beq.s	Obj09_ChkRight	; if not, branch
0001D3FC 6100 0000                  		bsr.w	Obj09_MoveLeft
0001D400                            
0001D400                            Obj09_ChkRight:
0001D400 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
0001D406 6700                       		beq.s	loc_1BA78	; if not, branch
0001D408 6100 0000                  		bsr.w	Obj09_MoveRight
0001D40C                            
0001D40C                            loc_1BA78:
0001D40C 1038 F602                  		move.b	($FFFFF602).w,d0
0001D410 0200 000C                  		andi.b	#$C,d0
0001D414 6600                       		bne.s	loc_1BAA8
0001D416 3028 0014                  		move.w	$14(a0),d0
0001D41A 6700                       		beq.s	loc_1BAA8
0001D41C 6B00                       		bmi.s	loc_1BA9A
0001D41E 0440 000C                  		subi.w	#$C,d0
0001D422 6400                       		bcc.s	loc_1BA94
0001D424 303C 0000                  		move.w	#0,d0
0001D428                            
0001D428                            loc_1BA94:
0001D428 3140 0014                  		move.w	d0,$14(a0)
0001D42C 6000                       		bra.s	loc_1BAA8
0001D42E                            ; ===========================================================================
0001D42E                            
0001D42E                            loc_1BA9A:
0001D42E 0640 000C                  		addi.w	#$C,d0
0001D432 6400                       		bcc.s	loc_1BAA4
0001D434 303C 0000                  		move.w	#0,d0
0001D438                            
0001D438                            loc_1BAA4:
0001D438 3140 0014                  		move.w	d0,$14(a0)
0001D43C                            
0001D43C                            loc_1BAA8:
0001D43C 1038 F780                  		move.b	($FFFFF780).w,d0
0001D440 0600 0020                  		addi.b	#$20,d0
0001D444 0200 00C0                  		andi.b	#$C0,d0
0001D448 4400                       		neg.b	d0
0001D44A 4EB9 0000 33DA             		jsr	(CalcSine).l
0001D450 C3E8 0014                  		muls.w	$14(a0),d1
0001D454 D3A8 0008                  		add.l	d1,8(a0)
0001D458 C1E8 0014                  		muls.w	$14(a0),d0
0001D45C D1A8 000C                  		add.l	d0,$C(a0)
0001D460 48E7 C000                  		movem.l	d0-d1,-(sp)
0001D464 2428 000C                  		move.l	$C(a0),d2
0001D468 2628 0008                  		move.l	8(a0),d3
0001D46C 6100 0000                  		bsr.w	sub_1BCE8
0001D470 6700                       		beq.s	loc_1BAF2
0001D472 4CDF 0003                  		movem.l	(sp)+,d0-d1
0001D476 93A8 0008                  		sub.l	d1,8(a0)
0001D47A 91A8 000C                  		sub.l	d0,$C(a0)
0001D47E 317C 0000 0014             		move.w	#0,$14(a0)
0001D484 4E75                       		rts	
0001D486                            ; ===========================================================================
0001D486                            
0001D486                            loc_1BAF2:
0001D486 4CDF 0003                  		movem.l	(sp)+,d0-d1
0001D48A 4E75                       		rts	
0001D48C                            ; End of function Obj09_Move
0001D48C                            
0001D48C                            
0001D48C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D48C                            
0001D48C                            
0001D48C                            Obj09_MoveLeft:				; XREF: Obj09_Move
0001D48C 08E8 0000 0022             		bset	#0,$22(a0)
0001D492 3028 0014                  		move.w	$14(a0),d0
0001D496 6700                       		beq.s	loc_1BB06
0001D498 6A00                       		bpl.s	loc_1BB1A
0001D49A                            
0001D49A                            loc_1BB06:
0001D49A 0440 000C                  		subi.w	#$C,d0
0001D49E 0C40 F800                  		cmpi.w	#-$800,d0
0001D4A2 6E00                       		bgt.s	loc_1BB14
0001D4A4 303C F800                  		move.w	#-$800,d0
0001D4A8                            
0001D4A8                            loc_1BB14:
0001D4A8 3140 0014                  		move.w	d0,$14(a0)
0001D4AC 4E75                       		rts	
0001D4AE                            ; ===========================================================================
0001D4AE                            
0001D4AE                            loc_1BB1A:
0001D4AE 0440 0040                  		subi.w	#$40,d0
0001D4B2 6400                       		bcc.s	loc_1BB22
0001D4B4 4E71                       		nop	
0001D4B6                            
0001D4B6                            loc_1BB22:
0001D4B6 3140 0014                  		move.w	d0,$14(a0)
0001D4BA 4E75                       		rts	
0001D4BC                            ; End of function Obj09_MoveLeft
0001D4BC                            
0001D4BC                            
0001D4BC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D4BC                            
0001D4BC                            
0001D4BC                            Obj09_MoveRight:			; XREF: Obj09_Move
0001D4BC 08A8 0000 0022             		bclr	#0,$22(a0)
0001D4C2 3028 0014                  		move.w	$14(a0),d0
0001D4C6 6B00                       		bmi.s	loc_1BB48
0001D4C8 0640 000C                  		addi.w	#$C,d0
0001D4CC 0C40 0800                  		cmpi.w	#$800,d0
0001D4D0 6D00                       		blt.s	loc_1BB42
0001D4D2 303C 0800                  		move.w	#$800,d0
0001D4D6                            
0001D4D6                            loc_1BB42:
0001D4D6 3140 0014                  		move.w	d0,$14(a0)
0001D4DA 6000                       		bra.s	locret_1BB54
0001D4DC                            ; ===========================================================================
0001D4DC                            
0001D4DC                            loc_1BB48:
0001D4DC 0640 0040                  		addi.w	#$40,d0
0001D4E0 6400                       		bcc.s	loc_1BB50
0001D4E2 4E71                       		nop	
0001D4E4                            
0001D4E4                            loc_1BB50:
0001D4E4 3140 0014                  		move.w	d0,$14(a0)
0001D4E8                            
0001D4E8                            locret_1BB54:
0001D4E8 4E75                       		rts	
0001D4EA                            ; End of function Obj09_MoveRight
0001D4EA                            
0001D4EA                            
0001D4EA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D4EA                            
0001D4EA                            
0001D4EA                            Obj09_Jump:				; XREF: Obj09_OnWall
0001D4EA 1038 F603                  		move.b	($FFFFF603).w,d0
0001D4EE 0200 0070                  		andi.b	#$70,d0		; is A,	B or C pressed?
0001D4F2 6700                       		beq.s	Obj09_NoJump	; if not, branch
0001D4F4 1038 F780                  		move.b	($FFFFF780).w,d0
0001D4F8 0200 00FC                  		andi.b	#$FC,d0
0001D4FC 4400                       		neg.b	d0
0001D4FE 0400 0040                  		subi.b	#$40,d0
0001D502 4EB9 0000 33DA             		jsr	(CalcSine).l
0001D508 C3FC 0680                  		muls.w	#$680,d1
0001D50C E081                       		asr.l	#8,d1
0001D50E 3141 0010                  		move.w	d1,$10(a0)
0001D512 C1FC 0680                  		muls.w	#$680,d0
0001D516 E080                       		asr.l	#8,d0
0001D518 3140 0012                  		move.w	d0,$12(a0)
0001D51C 08E8 0001 0022             		bset	#1,$22(a0)
0001D522 303C 00A0                  		move.w	#$A0,d0
0001D526 4EB9 0000 147C             		jsr	(PlaySound_Special).l ;	play jumping sound
0001D52C                            
0001D52C                            Obj09_NoJump:
0001D52C 4E75                       		rts	
0001D52E                            ; End of function Obj09_Jump
0001D52E                            
0001D52E                            
0001D52E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D52E                            
0001D52E                            
0001D52E                            nullsub_2:				; XREF: Obj09_InAir
0001D52E 4E75                       		rts	
0001D530                            ; End of function nullsub_2
0001D530                            
0001D530                            ; ===========================================================================
0001D530                            ; ---------------------------------------------------------------------------
0001D530                            ; unused subroutine to limit Sonic's upward vertical speed
0001D530                            ; ---------------------------------------------------------------------------
0001D530 323C FC00                  		move.w	#-$400,d1
0001D534 B268 0012                  		cmp.w	$12(a0),d1
0001D538 6F00                       		ble.s	locret_1BBB4
0001D53A 1038 F602                  		move.b	($FFFFF602).w,d0
0001D53E 0200 0070                  		andi.b	#$70,d0
0001D542 6600                       		bne.s	locret_1BBB4
0001D544 3141 0012                  		move.w	d1,$12(a0)
0001D548                            
0001D548                            locret_1BBB4:
0001D548 4E75                       		rts	
0001D54A                            ; ---------------------------------------------------------------------------
0001D54A                            ; Subroutine to	fix the	camera on Sonic's position (special stage)
0001D54A                            ; ---------------------------------------------------------------------------
0001D54A                            
0001D54A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D54A                            
0001D54A                            
0001D54A                            SS_FixCamera:				; XREF: Obj09
0001D54A 3428 000C                  		move.w	$C(a0),d2
0001D54E 3628 0008                  		move.w	8(a0),d3
0001D552 3038 F700                  		move.w	($FFFFF700).w,d0
0001D556 0443 00A0                  		subi.w	#$A0,d3
0001D55A 6500                       		bcs.s	loc_1BBCE
0001D55C 9043                       		sub.w	d3,d0
0001D55E 9178 F700                  		sub.w	d0,($FFFFF700).w
0001D562                            
0001D562                            loc_1BBCE:
0001D562 3038 F704                  		move.w	($FFFFF704).w,d0
0001D566 0442 0070                  		subi.w	#$70,d2
0001D56A 6500                       		bcs.s	locret_1BBDE
0001D56C 9042                       		sub.w	d2,d0
0001D56E 9178 F704                  		sub.w	d0,($FFFFF704).w
0001D572                            
0001D572                            locret_1BBDE:
0001D572 4E75                       		rts	
0001D574                            ; End of function SS_FixCamera
0001D574                            
0001D574                            ; ===========================================================================
0001D574                            
0001D574                            Obj09_ExitStage:			; XREF: Obj09_Index
0001D574 0678 0040 F782             		addi.w	#$40,($FFFFF782).w
0001D57A 0C78 1800 F782             		cmpi.w	#$1800,($FFFFF782).w
0001D580 6600                       		bne.s	loc_1BBF4
0001D582 11FC 000C F600             		move.b	#$C,($FFFFF600).w
0001D588                            
0001D588                            loc_1BBF4:
0001D588 0C78 3000 F782             		cmpi.w	#$3000,($FFFFF782).w
0001D58E 6D00                       		blt.s	loc_1BC12
0001D590 31FC 0000 F782             		move.w	#0,($FFFFF782).w
0001D596 31FC 4000 F780             		move.w	#$4000,($FFFFF780).w
0001D59C 5428 0024                  		addq.b	#2,$24(a0)
0001D5A0 317C 003C 0038             		move.w	#$3C,$38(a0)
0001D5A6                            
0001D5A6                            loc_1BC12:
0001D5A6 3038 F780                  		move.w	($FFFFF780).w,d0
0001D5AA D078 F782                  		add.w	($FFFFF782).w,d0
0001D5AE 31C0 F780                  		move.w	d0,($FFFFF780).w
0001D5B2 4EB9 0001 4B96             		jsr	Sonic_Animate
0001D5B8 4EB9 0001 50CE             		jsr	LoadSonicDynPLC
0001D5BE 6100 FF8A                  		bsr.w	SS_FixCamera
0001D5C2 4EF9 0000 E0D6             		jmp	DisplaySprite
0001D5C8                            ; ===========================================================================
0001D5C8                            
0001D5C8                            Obj09_Exit2:				; XREF: Obj09_Index
0001D5C8 5368 0038                  		subq.w	#1,$38(a0)
0001D5CC 6600                       		bne.s	loc_1BC40
0001D5CE 11FC 000C F600             		move.b	#$C,($FFFFF600).w
0001D5D4                            
0001D5D4                            loc_1BC40:
0001D5D4 4EB9 0001 4B96             		jsr	Sonic_Animate
0001D5DA 4EB9 0001 50CE             		jsr	LoadSonicDynPLC
0001D5E0 6100 FF68                  		bsr.w	SS_FixCamera
0001D5E4 4EF9 0000 E0D6             		jmp	DisplaySprite
0001D5EA                            
0001D5EA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D5EA                            
0001D5EA                            
0001D5EA                            Obj09_Fall:				; XREF: Obj09_OnWall; Obj09_InAir
0001D5EA 2428 000C                  		move.l	$C(a0),d2
0001D5EE 2628 0008                  		move.l	8(a0),d3
0001D5F2 1038 F780                  		move.b	($FFFFF780).w,d0
0001D5F6 0200 00FC                  		andi.b	#$FC,d0
0001D5FA 4EB9 0000 33DA             		jsr	(CalcSine).l
0001D600 3828 0010                  		move.w	$10(a0),d4
0001D604 48C4                       		ext.l	d4
0001D606 E184                       		asl.l	#8,d4
0001D608 C1FC 002A                  		muls.w	#$2A,d0
0001D60C D084                       		add.l	d4,d0
0001D60E 3828 0012                  		move.w	$12(a0),d4
0001D612 48C4                       		ext.l	d4
0001D614 E184                       		asl.l	#8,d4
0001D616 C3FC 002A                  		muls.w	#$2A,d1
0001D61A D284                       		add.l	d4,d1
0001D61C D680                       		add.l	d0,d3
0001D61E 6100 0000                  		bsr.w	sub_1BCE8
0001D622 6700                       		beq.s	loc_1BCB0
0001D624 9680                       		sub.l	d0,d3
0001D626 7000                       		moveq	#0,d0
0001D628 3140 0010                  		move.w	d0,$10(a0)
0001D62C 08A8 0001 0022             		bclr	#1,$22(a0)
0001D632 D481                       		add.l	d1,d2
0001D634 6100 0000                  		bsr.w	sub_1BCE8
0001D638 6700                       		beq.s	loc_1BCC6
0001D63A 9481                       		sub.l	d1,d2
0001D63C 7200                       		moveq	#0,d1
0001D63E 3141 0012                  		move.w	d1,$12(a0)
0001D642 4E75                       		rts	
0001D644                            ; ===========================================================================
0001D644                            
0001D644                            loc_1BCB0:
0001D644 D481                       		add.l	d1,d2
0001D646 6100 0000                  		bsr.w	sub_1BCE8
0001D64A 6700                       		beq.s	loc_1BCD4
0001D64C 9481                       		sub.l	d1,d2
0001D64E 7200                       		moveq	#0,d1
0001D650 3141 0012                  		move.w	d1,$12(a0)
0001D654 08A8 0001 0022             		bclr	#1,$22(a0)
0001D65A                            
0001D65A                            loc_1BCC6:
0001D65A E080                       		asr.l	#8,d0
0001D65C E081                       		asr.l	#8,d1
0001D65E 3140 0010                  		move.w	d0,$10(a0)
0001D662 3141 0012                  		move.w	d1,$12(a0)
0001D666 4E75                       		rts	
0001D668                            ; ===========================================================================
0001D668                            
0001D668                            loc_1BCD4:
0001D668 E080                       		asr.l	#8,d0
0001D66A E081                       		asr.l	#8,d1
0001D66C 3140 0010                  		move.w	d0,$10(a0)
0001D670 3141 0012                  		move.w	d1,$12(a0)
0001D674 08E8 0001 0022             		bset	#1,$22(a0)
0001D67A 4E75                       		rts	
0001D67C                            ; End of function Obj09_Fall
0001D67C                            
0001D67C                            
0001D67C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D67C                            
0001D67C                            
0001D67C                            sub_1BCE8:				; XREF: Obj09_Move; Obj09_Fall
0001D67C 43F9 00FF 0000             		lea	($FF0000).l,a1
0001D682 7800                       		moveq	#0,d4
0001D684 4842                       		swap	d2
0001D686 3802                       		move.w	d2,d4
0001D688 4842                       		swap	d2
0001D68A 0644 0044                  		addi.w	#$44,d4
0001D68E 88FC 0018                  		divu.w	#$18,d4
0001D692 C8FC 0080                  		mulu.w	#$80,d4
0001D696 D3C4                       		adda.l	d4,a1
0001D698 7800                       		moveq	#0,d4
0001D69A 4843                       		swap	d3
0001D69C 3803                       		move.w	d3,d4
0001D69E 4843                       		swap	d3
0001D6A0 0644 0014                  		addi.w	#$14,d4
0001D6A4 88FC 0018                  		divu.w	#$18,d4
0001D6A8 D2C4                       		adda.w	d4,a1
0001D6AA 7A00                       		moveq	#0,d5
0001D6AC 1819                       		move.b	(a1)+,d4
0001D6AE 6100                       		bsr.s	sub_1BD30
0001D6B0 1819                       		move.b	(a1)+,d4
0001D6B2 6100                       		bsr.s	sub_1BD30
0001D6B4 D2FC 007E                  		adda.w	#$7E,a1
0001D6B8 1819                       		move.b	(a1)+,d4
0001D6BA 6100                       		bsr.s	sub_1BD30
0001D6BC 1819                       		move.b	(a1)+,d4
0001D6BE 6100                       		bsr.s	sub_1BD30
0001D6C0 4A05                       		tst.b	d5
0001D6C2 4E75                       		rts	
0001D6C4                            ; End of function sub_1BCE8
0001D6C4                            
0001D6C4                            
0001D6C4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D6C4                            
0001D6C4                            
0001D6C4                            sub_1BD30:				; XREF: sub_1BCE8
0001D6C4 6700                       		beq.s	locret_1BD44
0001D6C6 0C04 0028                  		cmpi.b	#$28,d4
0001D6CA 6700                       		beq.s	locret_1BD44
0001D6CC 0C04 003A                  		cmpi.b	#$3A,d4
0001D6D0 6500                       		bcs.s	loc_1BD46
0001D6D2 0C04 004B                  		cmpi.b	#$4B,d4
0001D6D6 6400                       		bcc.s	loc_1BD46
0001D6D8                            
0001D6D8                            locret_1BD44:
0001D6D8 4E75                       		rts	
0001D6DA                            ; ===========================================================================
0001D6DA                            
0001D6DA                            loc_1BD46:
0001D6DA 1144 0030                  		move.b	d4,$30(a0)
0001D6DE 2149 0032                  		move.l	a1,$32(a0)
0001D6E2 7AFF                       		moveq	#-1,d5
0001D6E4 4E75                       		rts	
0001D6E6                            ; End of function sub_1BD30
0001D6E6                            
0001D6E6                            
0001D6E6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D6E6                            
0001D6E6                            
0001D6E6                            Obj09_ChkItems:				; XREF: Obj09_Display
0001D6E6 43F9 00FF 0000             		lea	($FF0000).l,a1
0001D6EC 7800                       		moveq	#0,d4
0001D6EE 3828 000C                  		move.w	$C(a0),d4
0001D6F2 0644 0050                  		addi.w	#$50,d4
0001D6F6 88FC 0018                  		divu.w	#$18,d4
0001D6FA C8FC 0080                  		mulu.w	#$80,d4
0001D6FE D3C4                       		adda.l	d4,a1
0001D700 7800                       		moveq	#0,d4
0001D702 3828 0008                  		move.w	8(a0),d4
0001D706 0644 0020                  		addi.w	#$20,d4
0001D70A 88FC 0018                  		divu.w	#$18,d4
0001D70E D2C4                       		adda.w	d4,a1
0001D710 1811                       		move.b	(a1),d4
0001D712 6600                       		bne.s	Obj09_ChkCont
0001D714 4A28 003A                  		tst.b	$3A(a0)
0001D718 6600 0000                  		bne.w	Obj09_MakeGhostSolid
0001D71C 7800                       		moveq	#0,d4
0001D71E 4E75                       		rts	
0001D720                            ; ===========================================================================
0001D720                            
0001D720                            Obj09_ChkCont:
0001D720 0C04 003A                  		cmpi.b	#$3A,d4		; is the item a	ring?
0001D724 6600                       		bne.s	Obj09_Chk1Up
0001D726 6100 F726                  		bsr.w	SS_RemoveCollectedItem
0001D72A 6600                       		bne.s	Obj09_GetCont
0001D72C 14BC 0001                  		move.b	#1,(a2)
0001D730 2549 0004                  		move.l	a1,4(a2)
0001D734                            
0001D734                            Obj09_GetCont:
0001D734 4EB9 0000 A6D6             		jsr	CollectRing
0001D73A 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; check if you have 50 rings
0001D740 6500                       		bcs.s	Obj09_NoCont
0001D742 08F8 0000 FE1B             		bset	#0,($FFFFFE1B).w
0001D748 6600                       		bne.s	Obj09_NoCont
0001D74A 5238 FE18                  		addq.b	#1,($FFFFFE18).w ; add 1 to number of continues
0001D74E 303C 00BF                  		move.w	#$BF,d0
0001D752 4EB9 0000 1476             		jsr	(PlaySound).l	; play extra continue sound
0001D758                            
0001D758                            Obj09_NoCont:
0001D758 7800                       		moveq	#0,d4
0001D75A 4E75                       		rts	
0001D75C                            ; ===========================================================================
0001D75C                            
0001D75C                            Obj09_Chk1Up:
0001D75C 0C04 0028                  		cmpi.b	#$28,d4		; is the item an extra life?
0001D760 6600                       		bne.s	Obj09_ChkEmer
0001D762 6100 F6EA                  		bsr.w	SS_RemoveCollectedItem
0001D766 6600                       		bne.s	Obj09_Get1Up
0001D768 14BC 0003                  		move.b	#3,(a2)
0001D76C 2549 0004                  		move.l	a1,4(a2)
0001D770                            
0001D770                            Obj09_Get1Up:
0001D770 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to number of lives
0001D774 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to lives counter
0001D778 303C 0088                  		move.w	#$88,d0
0001D77C 4EB9 0000 1476             		jsr	(PlaySound).l	; play extra life music
0001D782 7800                       		moveq	#0,d4
0001D784 4E75                       		rts	
0001D786                            ; ===========================================================================
0001D786                            
0001D786                            Obj09_ChkEmer:
0001D786 0C04 003B                  		cmpi.b	#$3B,d4		; is the item an emerald?
0001D78A 6500                       		bcs.s	Obj09_ChkGhost
0001D78C 0C04 0040                  		cmpi.b	#$40,d4
0001D790 6200                       		bhi.s	Obj09_ChkGhost
0001D792 6100 F6BA                  		bsr.w	SS_RemoveCollectedItem
0001D796 6600                       		bne.s	Obj09_GetEmer
0001D798 14BC 0005                  		move.b	#5,(a2)
0001D79C 2549 0004                  		move.l	a1,4(a2)
0001D7A0                            
0001D7A0                            Obj09_GetEmer:
0001D7A0 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all the emeralds?
0001D7A6 6700                       		beq.s	Obj09_NoEmer	; if yes, branch
0001D7A8 0404 003B                  		subi.b	#$3B,d4
0001D7AC 7000                       		moveq	#0,d0
0001D7AE 1038 FE57                  		move.b	($FFFFFE57).w,d0
0001D7B2 45F8 FE58                  		lea	($FFFFFE58).w,a2
0001D7B6 1584 0000                  		move.b	d4,(a2,d0.w)
0001D7BA 5238 FE57                  		addq.b	#1,($FFFFFE57).w ; add 1 to number of emeralds
0001D7BE                            
0001D7BE                            Obj09_NoEmer:
0001D7BE 303C 0093                  		move.w	#$93,d0
0001D7C2 4EB9 0000 147C             		jsr	(PlaySound_Special).l ;	play emerald music
0001D7C8 7800                       		moveq	#0,d4
0001D7CA 4E75                       		rts	
0001D7CC                            ; ===========================================================================
0001D7CC                            
0001D7CC                            Obj09_ChkGhost:
0001D7CC 0C04 0041                  		cmpi.b	#$41,d4		; is the item a	ghost block?
0001D7D0 6600                       		bne.s	Obj09_ChkGhostTag
0001D7D2 117C 0001 003A             		move.b	#1,$3A(a0)	; mark the ghost block as "passed"
0001D7D8                            
0001D7D8                            Obj09_ChkGhostTag:
0001D7D8 0C04 004A                  		cmpi.b	#$4A,d4		; is the item a	switch for ghost blocks?
0001D7DC 6600                       		bne.s	Obj09_NoGhost
0001D7DE 0C28 0001 003A             		cmpi.b	#1,$3A(a0)	; have the ghost blocks	been passed?
0001D7E4 6600                       		bne.s	Obj09_NoGhost	; if not, branch
0001D7E6 117C 0002 003A             		move.b	#2,$3A(a0)	; mark the ghost blocks	as "solid"
0001D7EC                            
0001D7EC                            Obj09_NoGhost:
0001D7EC 78FF                       		moveq	#-1,d4
0001D7EE 4E75                       		rts	
0001D7F0                            ; ===========================================================================
0001D7F0                            
0001D7F0                            Obj09_MakeGhostSolid:
0001D7F0 0C28 0002 003A             		cmpi.b	#2,$3A(a0)	; is the ghost marked as "solid"?
0001D7F6 6600                       		bne.s	Obj09_GhostNotSolid ; if not, branch
0001D7F8 43F9 00FF 1020             		lea	($FF1020).l,a1
0001D7FE 723F                       		moveq	#$3F,d1
0001D800                            
0001D800                            Obj09_GhostLoop2:
0001D800 743F                       		moveq	#$3F,d2
0001D802                            
0001D802                            Obj09_GhostLoop:
0001D802 0C11 0041                  		cmpi.b	#$41,(a1)	; is the item a	ghost block?
0001D806 6600                       		bne.s	Obj09_NoReplace	; if not, branch
0001D808 12BC 002C                  		move.b	#$2C,(a1)	; replace ghost	block with a solid block
0001D80C                            
0001D80C                            Obj09_NoReplace:
0001D80C 5249                       		addq.w	#1,a1
0001D80E 51CA FFF2                  		dbf	d2,Obj09_GhostLoop
0001D812 43E9 0040                  		lea	$40(a1),a1
0001D816 51C9 FFE8                  		dbf	d1,Obj09_GhostLoop2
0001D81A                            
0001D81A                            Obj09_GhostNotSolid:
0001D81A 4228 003A                  		clr.b	$3A(a0)
0001D81E 7800                       		moveq	#0,d4
0001D820 4E75                       		rts	
0001D822                            ; End of function Obj09_ChkItems
0001D822                            
0001D822                            
0001D822                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D822                            
0001D822                            
0001D822                            Obj09_ChkItems2:			; XREF: Obj09_Display
0001D822 1028 0030                  		move.b	$30(a0),d0
0001D826 6600                       		bne.s	Obj09_ChkBumper
0001D828 5328 0036                  		subq.b	#1,$36(a0)
0001D82C 6A00                       		bpl.s	loc_1BEA0
0001D82E 117C 0000 0036             		move.b	#0,$36(a0)
0001D834                            
0001D834                            loc_1BEA0:
0001D834 5328 0037                  		subq.b	#1,$37(a0)
0001D838 6A00                       		bpl.s	locret_1BEAC
0001D83A 117C 0000 0037             		move.b	#0,$37(a0)
0001D840                            
0001D840                            locret_1BEAC:
0001D840 4E75                       		rts	
0001D842                            ; ===========================================================================
0001D842                            
0001D842                            Obj09_ChkBumper:
0001D842 0C00 0025                  		cmpi.b	#$25,d0		; is the item a	bumper?
0001D846 6600                       		bne.s	Obj09_GOAL
0001D848 2228 0032                  		move.l	$32(a0),d1
0001D84C 0481 00FF 0001             		subi.l	#$FF0001,d1
0001D852 3401                       		move.w	d1,d2
0001D854 0241 007F                  		andi.w	#$7F,d1
0001D858 C2FC 0018                  		mulu.w	#$18,d1
0001D85C 0441 0014                  		subi.w	#$14,d1
0001D860 EE4A                       		lsr.w	#7,d2
0001D862 0242 007F                  		andi.w	#$7F,d2
0001D866 C4FC 0018                  		mulu.w	#$18,d2
0001D86A 0442 0044                  		subi.w	#$44,d2
0001D86E 9268 0008                  		sub.w	8(a0),d1
0001D872 9468 000C                  		sub.w	$C(a0),d2
0001D876 4EB9 0000 36A8             		jsr	(CalcAngle).l
0001D87C 4EB9 0000 33DA             		jsr	(CalcSine).l
0001D882 C3FC F900                  		muls.w	#-$700,d1
0001D886 E081                       		asr.l	#8,d1
0001D888 3141 0010                  		move.w	d1,$10(a0)
0001D88C C1FC F900                  		muls.w	#-$700,d0
0001D890 E080                       		asr.l	#8,d0
0001D892 3140 0012                  		move.w	d0,$12(a0)
0001D896 08E8 0001 0022             		bset	#1,$22(a0)
0001D89C 6100 F5B0                  		bsr.w	SS_RemoveCollectedItem
0001D8A0 6600                       		bne.s	Obj09_BumpSnd
0001D8A2 14BC 0002                  		move.b	#2,(a2)
0001D8A6 2028 0032                  		move.l	$32(a0),d0
0001D8AA 5380                       		subq.l	#1,d0
0001D8AC 2540 0004                  		move.l	d0,4(a2)
0001D8B0                            
0001D8B0                            Obj09_BumpSnd:
0001D8B0 303C 00B4                  		move.w	#$B4,d0
0001D8B4 4EF9 0000 147C             		jmp	(PlaySound_Special).l ;	play bumper sound
0001D8BA                            ; ===========================================================================
0001D8BA                            
0001D8BA                            Obj09_GOAL:
0001D8BA 0C00 0027                  		cmpi.b	#$27,d0		; is the item a	"GOAL"?
0001D8BE 6600                       		bne.s	Obj09_UPblock
0001D8C0 5428 0024                  		addq.b	#2,$24(a0)	; run routine "Obj09_ExitStage"
0001D8C4 303C 00A8                  		move.w	#$A8,d0		; change item
0001D8C8 4EB9 0000 147C             		jsr	(PlaySound_Special).l ;	play "GOAL" sound
0001D8CE 4E75                       		rts	
0001D8D0                            ; ===========================================================================
0001D8D0                            
0001D8D0                            Obj09_UPblock:
0001D8D0 0C00 0029                  		cmpi.b	#$29,d0		; is the item an "UP" block?
0001D8D4 6600                       		bne.s	Obj09_DOWNblock
0001D8D6 4A28 0036                  		tst.b	$36(a0)
0001D8DA 6600 0000                  		bne.w	Obj09_NoGlass
0001D8DE 117C 001E 0036             		move.b	#$1E,$36(a0)
0001D8E4 0838 0006 F783             		btst	#6,($FFFFF783).w
0001D8EA 6700                       		beq.s	Obj09_UPsnd
0001D8EC E1F8 F782                  		asl	($FFFFF782).w	; increase stage rotation speed
0001D8F0 2268 0032                  		movea.l	$32(a0),a1
0001D8F4 5389                       		subq.l	#1,a1
0001D8F6 12BC 002A                  		move.b	#$2A,(a1)	; change item to a "DOWN" block
0001D8FA                            
0001D8FA                            Obj09_UPsnd:
0001D8FA 303C 00A9                  		move.w	#$A9,d0
0001D8FE 4EF9 0000 147C             		jmp	(PlaySound_Special).l ;	play up/down sound
0001D904                            ; ===========================================================================
0001D904                            
0001D904                            Obj09_DOWNblock:
0001D904 0C00 002A                  		cmpi.b	#$2A,d0		; is the item a	"DOWN" block?
0001D908 6600                       		bne.s	Obj09_Rblock
0001D90A 4A28 0036                  		tst.b	$36(a0)
0001D90E 6600 0000                  		bne.w	Obj09_NoGlass
0001D912 117C 001E 0036             		move.b	#$1E,$36(a0)
0001D918 0838 0006 F783             		btst	#6,($FFFFF783).w
0001D91E 6600                       		bne.s	Obj09_DOWNsnd
0001D920 E0F8 F782                  		asr	($FFFFF782).w	; reduce stage rotation	speed
0001D924 2268 0032                  		movea.l	$32(a0),a1
0001D928 5389                       		subq.l	#1,a1
0001D92A 12BC 0029                  		move.b	#$29,(a1)	; change item to an "UP" block
0001D92E                            
0001D92E                            Obj09_DOWNsnd:
0001D92E 303C 00A9                  		move.w	#$A9,d0
0001D932 4EF9 0000 147C             		jmp	(PlaySound_Special).l ;	play up/down sound
0001D938                            ; ===========================================================================
0001D938                            
0001D938                            Obj09_Rblock:
0001D938 0C00 002B                  		cmpi.b	#$2B,d0		; is the item an "R" block?
0001D93C 6600                       		bne.s	Obj09_ChkGlass
0001D93E 4A28 0037                  		tst.b	$37(a0)
0001D942 6600 0000                  		bne.w	Obj09_NoGlass
0001D946 117C 001E 0037             		move.b	#$1E,$37(a0)
0001D94C 6100 F500                  		bsr.w	SS_RemoveCollectedItem
0001D950 6600                       		bne.s	Obj09_RevStage
0001D952 14BC 0004                  		move.b	#4,(a2)
0001D956 2028 0032                  		move.l	$32(a0),d0
0001D95A 5380                       		subq.l	#1,d0
0001D95C 2540 0004                  		move.l	d0,4(a2)
0001D960                            
0001D960                            Obj09_RevStage:
0001D960 4478 F782                  		neg.w	($FFFFF782).w	; reverse stage	rotation
0001D964 303C 00A9                  		move.w	#$A9,d0
0001D968 4EF9 0000 147C             		jmp	(PlaySound_Special).l ;	play sound
0001D96E                            ; ===========================================================================
0001D96E                            
0001D96E                            Obj09_ChkGlass:
0001D96E 0C00 002D                  		cmpi.b	#$2D,d0		; is the item a	glass block?
0001D972 6700                       		beq.s	Obj09_Glass	; if yes, branch
0001D974 0C00 002E                  		cmpi.b	#$2E,d0
0001D978 6700                       		beq.s	Obj09_Glass
0001D97A 0C00 002F                  		cmpi.b	#$2F,d0
0001D97E 6700                       		beq.s	Obj09_Glass
0001D980 0C00 0030                  		cmpi.b	#$30,d0
0001D984 6600                       		bne.s	Obj09_NoGlass	; if not, branch
0001D986                            
0001D986                            Obj09_Glass:
0001D986 6100 F4C6                  		bsr.w	SS_RemoveCollectedItem
0001D98A 6600                       		bne.s	Obj09_GlassSnd
0001D98C 14BC 0006                  		move.b	#6,(a2)
0001D990 2268 0032                  		movea.l	$32(a0),a1
0001D994 5389                       		subq.l	#1,a1
0001D996 2549 0004                  		move.l	a1,4(a2)
0001D99A 1011                       		move.b	(a1),d0
0001D99C 5200                       		addq.b	#1,d0		; change glass type when touched
0001D99E 0C00 0030                  		cmpi.b	#$30,d0
0001D9A2 6300                       		bls.s	Obj09_GlassUpdate ; if glass is	still there, branch
0001D9A4 4200                       		clr.b	d0		; remove the glass block when it's destroyed
0001D9A6                            
0001D9A6                            Obj09_GlassUpdate:
0001D9A6 1540 0004                  		move.b	d0,4(a2)	; update the stage layout
0001D9AA                            
0001D9AA                            Obj09_GlassSnd:
0001D9AA 303C 00BA                  		move.w	#$BA,d0
0001D9AE 4EF9 0000 147C             		jmp	(PlaySound_Special).l ;	play glass block sound
0001D9B4                            ; ===========================================================================
0001D9B4                            
0001D9B4                            Obj09_NoGlass:
0001D9B4 4E75                       		rts	
0001D9B6                            ; End of function Obj09_ChkItems2
0001D9B6                            
0001D9B6                            ; ===========================================================================
0001D9B6                            ; ---------------------------------------------------------------------------
0001D9B6                            ; Object 10 - blank
0001D9B6                            ; ---------------------------------------------------------------------------
0001D9B6                            
0001D9B6                            Obj10:					; XREF: Obj_Index
0001D9B6 4E75                       		rts	
0001D9B8                            ; ---------------------------------------------------------------------------
0001D9B8                            ; Subroutine to	animate	level graphics
0001D9B8                            ; ---------------------------------------------------------------------------
0001D9B8                            
0001D9B8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D9B8                            
0001D9B8                            
0001D9B8                            AniArt_Load:				; XREF: Demo_Time; loc_F54
0001D9B8 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
0001D9BC 6600                       		bne.s	AniArt_Pause	; if yes, branch
0001D9BE 4DF9 00C0 0000             		lea	($C00000).l,a6
0001D9C4 6100 0000                  		bsr.w	AniArt_GiantRing
0001D9C8 7000                       		moveq	#0,d0
0001D9CA 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001D9CE D040                       		add.w	d0,d0
0001D9D0 303B 0000                  		move.w	AniArt_Index(pc,d0.w),d0
0001D9D4 4EFB 0000                  		jmp	AniArt_Index(pc,d0.w)
0001D9D8                            ; ===========================================================================
0001D9D8                            
0001D9D8                            AniArt_Pause:
0001D9D8 4E75                       		rts	
0001D9DA                            ; End of function AniArt_Load
0001D9DA                            
0001D9DA                            ; ===========================================================================
0001D9DA 0000 0000                  AniArt_Index:	dc.w AniArt_GHZ-AniArt_Index, AniArt_none-AniArt_Index
0001D9DE 0000 0000                  		dc.w AniArt_MZ-AniArt_Index, AniArt_none-AniArt_Index
0001D9E2 0000 0000                  		dc.w AniArt_none-AniArt_Index, AniArt_SBZ-AniArt_Index
0001D9E6 0000                       		dc.w AniArt_Ending-AniArt_Index
0001D9E8                            ; ===========================================================================
0001D9E8                            ; ---------------------------------------------------------------------------
0001D9E8                            ; Animated pattern routine - Green Hill
0001D9E8                            ; ---------------------------------------------------------------------------
0001D9E8                            
0001D9E8                            AniArt_GHZ:				; XREF: AniArt_Index
0001D9E8 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001D9EC 6A00                       		bpl.s	loc_1C08A
0001D9EE 11FC 0005 F7B1             		move.b	#5,($FFFFF7B1).w ; time	to display each	frame for
0001D9F4 43F9 0000 0000             		lea	(Art_GhzWater).l,a1 ; load waterfall patterns
0001D9FA 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001D9FE 5238 F7B0                  		addq.b	#1,($FFFFF7B0).w
0001DA02 0240 0001                  		andi.w	#1,d0
0001DA06 6700                       		beq.s	loc_1C078
0001DA08 43E9 0100                  		lea	$100(a1),a1	; load next frame
0001DA0C                            
0001DA0C                            loc_1C078:
0001DA0C 23FC 6F00 0001 00C0 0004   		move.l	#$6F000001,($C00004).l ; VRAM address
0001DA16 323C 0007                  		move.w	#7,d1		; number of 8x8	tiles
0001DA1A 6000 0000                  		bra.w	LoadTiles
0001DA1E                            ; ===========================================================================
0001DA1E                            
0001DA1E                            loc_1C08A:
0001DA1E 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001DA22 6A00                       		bpl.s	loc_1C0C0
0001DA24 11FC 000F F7B3             		move.b	#$F,($FFFFF7B3).w
0001DA2A 43F9 0000 0000             		lea	(Art_GhzFlower1).l,a1 ;	load big flower	patterns
0001DA30 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001DA34 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001DA38 0240 0001                  		andi.w	#1,d0
0001DA3C 6700                       		beq.s	loc_1C0AE
0001DA3E 43E9 0200                  		lea	$200(a1),a1
0001DA42                            
0001DA42                            loc_1C0AE:
0001DA42 23FC 6B80 0001 00C0 0004   		move.l	#$6B800001,($C00004).l
0001DA4C 323C 000F                  		move.w	#$F,d1
0001DA50 6000 0000                  		bra.w	LoadTiles
0001DA54                            ; ===========================================================================
0001DA54                            
0001DA54                            loc_1C0C0:
0001DA54 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001DA58 6A00                       		bpl.s	locret_1C10C
0001DA5A 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001DA60 1038 F7B4                  		move.b	($FFFFF7B4).w,d0
0001DA64 5238 F7B4                  		addq.b	#1,($FFFFF7B4).w
0001DA68 0240 0003                  		andi.w	#3,d0
0001DA6C 103B 0000                  		move.b	byte_1C10E(pc,d0.w),d0
0001DA70 0800 0000                  		btst	#0,d0
0001DA74 6600                       		bne.s	loc_1C0E8
0001DA76 11FC 007F F7B5             		move.b	#$7F,($FFFFF7B5).w
0001DA7C                            
0001DA7C                            loc_1C0E8:
0001DA7C EF48                       		lsl.w	#7,d0
0001DA7E 3200                       		move.w	d0,d1
0001DA80 D040                       		add.w	d0,d0
0001DA82 D041                       		add.w	d1,d0
0001DA84 23FC 6D80 0001 00C0 0004   		move.l	#$6D800001,($C00004).l
0001DA8E 43F9 0000 0000             		lea	(Art_GhzFlower2).l,a1 ;	load small flower patterns
0001DA94 43F1 0000                  		lea	(a1,d0.w),a1
0001DA98 323C 000B                  		move.w	#$B,d1
0001DA9C 6100 0000                  		bsr.w	LoadTiles
0001DAA0                            
0001DAA0                            locret_1C10C:
0001DAA0 4E75                       		rts	
0001DAA2                            ; ===========================================================================
0001DAA2 0001 0201                  byte_1C10E:	dc.b 0,	1, 2, 1
0001DAA6                            ; ===========================================================================
0001DAA6                            ; ---------------------------------------------------------------------------
0001DAA6                            ; Animated pattern routine - Marble
0001DAA6                            ; ---------------------------------------------------------------------------
0001DAA6                            
0001DAA6                            AniArt_MZ:				; XREF: AniArt_Index
0001DAA6 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001DAAA 6A00                       		bpl.s	loc_1C150
0001DAAC 11FC 0013 F7B1             		move.b	#$13,($FFFFF7B1).w
0001DAB2 43F9 0000 0000             		lea	(Art_MzLava1).l,a1 ; load lava surface patterns
0001DAB8 7000                       		moveq	#0,d0
0001DABA 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001DABE 5200                       		addq.b	#1,d0
0001DAC0 0C00 0003                  		cmpi.b	#3,d0
0001DAC4 6600                       		bne.s	loc_1C134
0001DAC6 7000                       		moveq	#0,d0
0001DAC8                            
0001DAC8                            loc_1C134:
0001DAC8 11C0 F7B0                  		move.b	d0,($FFFFF7B0).w
0001DACC C0FC 0100                  		mulu.w	#$100,d0
0001DAD0 D2C0                       		adda.w	d0,a1
0001DAD2 23FC 5C40 0001 00C0 0004   		move.l	#$5C400001,($C00004).l
0001DADC 323C 0007                  		move.w	#7,d1
0001DAE0 6100 0000                  		bsr.w	LoadTiles
0001DAE4                            
0001DAE4                            loc_1C150:
0001DAE4 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001DAE8 6A00                       		bpl.s	loc_1C1AE
0001DAEA 11FC 0001 F7B3             		move.b	#1,($FFFFF7B3).w
0001DAF0 7000                       		moveq	#0,d0
0001DAF2 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001DAF6 49F9 0000 0000             		lea	(Art_MzLava2).l,a4 ; load lava patterns
0001DAFC EE58                       		ror.w	#7,d0
0001DAFE D8C0                       		adda.w	d0,a4
0001DB00 23FC 5A40 0001 00C0 0004   		move.l	#$5A400001,($C00004).l
0001DB0A 7600                       		moveq	#0,d3
0001DB0C 1638 F7B2                  		move.b	($FFFFF7B2).w,d3
0001DB10 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001DB14 1638 FE68                  		move.b	($FFFFFE68).w,d3
0001DB18 343C 0003                  		move.w	#3,d2
0001DB1C                            
0001DB1C                            loc_1C188:
0001DB1C 3003                       		move.w	d3,d0
0001DB1E D040                       		add.w	d0,d0
0001DB20 0240 001E                  		andi.w	#$1E,d0
0001DB24 47F9 0000 0000             		lea	(AniArt_MZextra).l,a3
0001DB2A 3033 0000                  		move.w	(a3,d0.w),d0
0001DB2E 47F3 0000                  		lea	(a3,d0.w),a3
0001DB32 224C                       		movea.l	a4,a1
0001DB34 323C 001F                  		move.w	#$1F,d1
0001DB38 4E93                       		jsr	(a3)
0001DB3A 5843                       		addq.w	#4,d3
0001DB3C 51CA FFDE                  		dbf	d2,loc_1C188
0001DB40 4E75                       		rts	
0001DB42                            ; ===========================================================================
0001DB42                            
0001DB42                            loc_1C1AE:
0001DB42 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001DB46 6A00 0000                  		bpl.w	locret_1C1EA
0001DB4A 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001DB50 43F9 0000 0000             		lea	(Art_MzTorch).l,a1 ; load torch	patterns
0001DB56 7000                       		moveq	#0,d0
0001DB58 1038 F7B6                  		move.b	($FFFFF7B6).w,d0
0001DB5C 5238 F7B6                  		addq.b	#1,($FFFFF7B6).w
0001DB60 0238 0003 F7B6             		andi.b	#3,($FFFFF7B6).w
0001DB66 C0FC 00C0                  		mulu.w	#$C0,d0
0001DB6A D2C0                       		adda.w	d0,a1
0001DB6C 23FC 5E40 0001 00C0 0004   		move.l	#$5E400001,($C00004).l
0001DB76 323C 0005                  		move.w	#5,d1
0001DB7A 6000 0000                  		bra.w	LoadTiles
0001DB7E                            ; ===========================================================================
0001DB7E                            
0001DB7E                            locret_1C1EA:
0001DB7E 4E75                       		rts	
0001DB80                            ; ===========================================================================
0001DB80                            ; ---------------------------------------------------------------------------
0001DB80                            ; Animated pattern routine - Scrap Brain
0001DB80                            ; ---------------------------------------------------------------------------
0001DB80                            
0001DB80                            AniArt_SBZ:				; XREF: AniArt_Index
0001DB80 4A38 F7B4                  		tst.b	($FFFFF7B4).w
0001DB84 6700                       		beq.s	loc_1C1F8
0001DB86 5338 F7B4                  		subq.b	#1,($FFFFF7B4).w
0001DB8A 6000                       		bra.s	loc_1C250
0001DB8C                            ; ===========================================================================
0001DB8C                            
0001DB8C                            loc_1C1F8:
0001DB8C 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001DB90 6A00                       		bpl.s	loc_1C250
0001DB92 11FC 0007 F7B1             		move.b	#7,($FFFFF7B1).w
0001DB98 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1 ; load smoke patterns
0001DB9E 23FC 4900 0002 00C0 0004   		move.l	#$49000002,($C00004).l
0001DBA8 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001DBAC 5238 F7B0                  		addq.b	#1,($FFFFF7B0).w
0001DBB0 0240 0007                  		andi.w	#7,d0
0001DBB4 6700                       		beq.s	loc_1C234
0001DBB6 5340                       		subq.w	#1,d0
0001DBB8 C0FC 0180                  		mulu.w	#$180,d0
0001DBBC 43F1 0000                  		lea	(a1,d0.w),a1
0001DBC0 323C 000B                  		move.w	#$B,d1
0001DBC4 6000 0000                  		bra.w	LoadTiles
0001DBC8                            ; ===========================================================================
0001DBC8                            
0001DBC8                            loc_1C234:
0001DBC8 11FC 00B4 F7B4             		move.b	#$B4,($FFFFF7B4).w
0001DBCE                            
0001DBCE                            loc_1C23A:
0001DBCE 323C 0005                  		move.w	#5,d1
0001DBD2 6100 0000                  		bsr.w	LoadTiles
0001DBD6 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1
0001DBDC 323C 0005                  		move.w	#5,d1
0001DBE0 6000 0000                  		bra.w	LoadTiles
0001DBE4                            ; ===========================================================================
0001DBE4                            
0001DBE4                            loc_1C250:
0001DBE4 4A38 F7B5                  		tst.b	($FFFFF7B5).w
0001DBE8 6700                       		beq.s	loc_1C25C
0001DBEA 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001DBEE 6000                       		bra.s	locret_1C2A0
0001DBF0                            ; ===========================================================================
0001DBF0                            
0001DBF0                            loc_1C25C:
0001DBF0 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001DBF4 6A00                       		bpl.s	locret_1C2A0
0001DBF6 11FC 0007 F7B3             		move.b	#7,($FFFFF7B3).w
0001DBFC 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1
0001DC02 23FC 4A80 0002 00C0 0004   		move.l	#$4A800002,($C00004).l
0001DC0C 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001DC10 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001DC14 0240 0007                  		andi.w	#7,d0
0001DC18 6700                       		beq.s	loc_1C298
0001DC1A 5340                       		subq.w	#1,d0
0001DC1C C0FC 0180                  		mulu.w	#$180,d0
0001DC20 43F1 0000                  		lea	(a1,d0.w),a1
0001DC24 323C 000B                  		move.w	#$B,d1
0001DC28 6000 0000                  		bra.w	LoadTiles
0001DC2C                            ; ===========================================================================
0001DC2C                            
0001DC2C                            loc_1C298:
0001DC2C 11FC 0078 F7B5             		move.b	#$78,($FFFFF7B5).w
0001DC32 609A                       		bra.s	loc_1C23A
0001DC34                            ; ===========================================================================
0001DC34                            
0001DC34                            locret_1C2A0:
0001DC34 4E75                       		rts	
0001DC36                            ; ===========================================================================
0001DC36                            ; ---------------------------------------------------------------------------
0001DC36                            ; Animated pattern routine - ending sequence
0001DC36                            ; ---------------------------------------------------------------------------
0001DC36                            
0001DC36                            AniArt_Ending:				; XREF: AniArt_Index
0001DC36 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001DC3A 6A00                       		bpl.s	loc_1C2F4
0001DC3C 11FC 0007 F7B3             		move.b	#7,($FFFFF7B3).w
0001DC42 43F9 0000 0000             		lea	(Art_GhzFlower1).l,a1 ;	load big flower	patterns
0001DC48 45F8 9400                  		lea	($FFFF9400).w,a2
0001DC4C 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001DC50 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001DC54 0240 0001                  		andi.w	#1,d0
0001DC58 6700                       		beq.s	loc_1C2CE
0001DC5A 43E9 0200                  		lea	$200(a1),a1
0001DC5E 45EA 0200                  		lea	$200(a2),a2
0001DC62                            
0001DC62                            loc_1C2CE:
0001DC62 23FC 6B80 0001 00C0 0004   		move.l	#$6B800001,($C00004).l
0001DC6C 323C 000F                  		move.w	#$F,d1
0001DC70 6100 0000                  		bsr.w	LoadTiles
0001DC74 224A                       		movea.l	a2,a1
0001DC76 23FC 7200 0001 00C0 0004   		move.l	#$72000001,($C00004).l
0001DC80 323C 000F                  		move.w	#$F,d1
0001DC84 6000 0000                  		bra.w	LoadTiles
0001DC88                            ; ===========================================================================
0001DC88                            
0001DC88                            loc_1C2F4:
0001DC88 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001DC8C 6A00                       		bpl.s	loc_1C33C
0001DC8E 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001DC94 1038 F7B4                  		move.b	($FFFFF7B4).w,d0
0001DC98 5238 F7B4                  		addq.b	#1,($FFFFF7B4).w
0001DC9C 0240 0007                  		andi.w	#7,d0
0001DCA0 103B 0000                  		move.b	byte_1C334(pc,d0.w),d0
0001DCA4 EF48                       		lsl.w	#7,d0
0001DCA6 3200                       		move.w	d0,d1
0001DCA8 D040                       		add.w	d0,d0
0001DCAA D041                       		add.w	d1,d0
0001DCAC 23FC 6D80 0001 00C0 0004   		move.l	#$6D800001,($C00004).l
0001DCB6 43F9 0000 0000             		lea	(Art_GhzFlower2).l,a1 ;	load small flower patterns
0001DCBC 43F1 0000                  		lea	(a1,d0.w),a1
0001DCC0 323C 000B                  		move.w	#$B,d1
0001DCC4 6000 0000                  		bra.w	LoadTiles
0001DCC8                            ; ===========================================================================
0001DCC8 0000 0001 0202 0201        byte_1C334:	dc.b 0,	0, 0, 1, 2, 2, 2, 1
0001DCD0                            ; ===========================================================================
0001DCD0                            
0001DCD0                            loc_1C33C:
0001DCD0 5338 F7B9                  		subq.b	#1,($FFFFF7B9).w
0001DCD4 6A00                       		bpl.s	loc_1C37A
0001DCD6 11FC 000E F7B9             		move.b	#$E,($FFFFF7B9).w
0001DCDC 1038 F7B8                  		move.b	($FFFFF7B8).w,d0
0001DCE0 5238 F7B8                  		addq.b	#1,($FFFFF7B8).w
0001DCE4 0240 0003                  		andi.w	#3,d0
0001DCE8 103B 0000                  		move.b	byte_1C376(pc,d0.w),d0
0001DCEC E148                       		lsl.w	#8,d0
0001DCEE D040                       		add.w	d0,d0
0001DCF0 23FC 7000 0001 00C0 0004   		move.l	#$70000001,($C00004).l
0001DCFA 43F8 9800                  		lea	($FFFF9800).w,a1 ; load	special	flower patterns	(from RAM)
0001DCFE 43F1 0000                  		lea	(a1,d0.w),a1
0001DD02 323C 000F                  		move.w	#$F,d1
0001DD06 6000 0000                  		bra.w	LoadTiles
0001DD0A                            ; ===========================================================================
0001DD0A 0001 0201                  byte_1C376:	dc.b 0,	1, 2, 1
0001DD0E                            ; ===========================================================================
0001DD0E                            
0001DD0E                            loc_1C37A:
0001DD0E 5338 F7BB                  		subq.b	#1,($FFFFF7BB).w
0001DD12 6A00                       		bpl.s	locret_1C3B4
0001DD14 11FC 000B F7BB             		move.b	#$B,($FFFFF7BB).w
0001DD1A 1038 F7BA                  		move.b	($FFFFF7BA).w,d0
0001DD1E 5238 F7BA                  		addq.b	#1,($FFFFF7BA).w
0001DD22 0240 0003                  		andi.w	#3,d0
0001DD26 103B 00E2                  		move.b	byte_1C376(pc,d0.w),d0
0001DD2A E148                       		lsl.w	#8,d0
0001DD2C D040                       		add.w	d0,d0
0001DD2E 23FC 6800 0001 00C0 0004   		move.l	#$68000001,($C00004).l
0001DD38 43F8 9E00                  		lea	($FFFF9E00).w,a1 ; load	special	flower patterns	(from RAM)
0001DD3C 43F1 0000                  		lea	(a1,d0.w),a1
0001DD40 323C 000F                  		move.w	#$F,d1
0001DD44 6000 0000                  		bra.w	LoadTiles
0001DD48                            ; ===========================================================================
0001DD48                            
0001DD48                            locret_1C3B4:
0001DD48 4E75                       		rts	
0001DD4A                            ; ===========================================================================
0001DD4A                            
0001DD4A                            AniArt_none:				; XREF: AniArt_Index
0001DD4A 4E75                       		rts	
0001DD4C                            
0001DD4C                            ; ---------------------------------------------------------------------------
0001DD4C                            ; Subroutine to	load (d1 - 1) 8x8 tiles
0001DD4C                            ; ---------------------------------------------------------------------------
0001DD4C                            
0001DD4C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DD4C                            
0001DD4C                            
0001DD4C                            LoadTiles:
0001DD4C 2C99                       		move.l	(a1)+,(a6)
0001DD4E 2C99                       		move.l	(a1)+,(a6)
0001DD50 2C99                       		move.l	(a1)+,(a6)
0001DD52 2C99                       		move.l	(a1)+,(a6)
0001DD54 2C99                       		move.l	(a1)+,(a6)
0001DD56 2C99                       		move.l	(a1)+,(a6)
0001DD58 2C99                       		move.l	(a1)+,(a6)
0001DD5A 2C99                       		move.l	(a1)+,(a6)
0001DD5C 51C9 FFEE                  		dbf	d1,LoadTiles
0001DD60 4E75                       		rts	
0001DD62                            ; End of function LoadTiles
0001DD62                            
0001DD62                            ; ===========================================================================
0001DD62                            ; ---------------------------------------------------------------------------
0001DD62                            ; Animated pattern routine - more Marble Zone
0001DD62                            ; ---------------------------------------------------------------------------
0001DD62 0000 0000                  AniArt_MZextra:	dc.w loc_1C3EE-AniArt_MZextra, loc_1C3FA-AniArt_MZextra
0001DD66 0000 0000                  		dc.w loc_1C410-AniArt_MZextra, loc_1C41E-AniArt_MZextra
0001DD6A 0000 0000                  		dc.w loc_1C434-AniArt_MZextra, loc_1C442-AniArt_MZextra
0001DD6E 0000 0000                  		dc.w loc_1C458-AniArt_MZextra, loc_1C466-AniArt_MZextra
0001DD72 0000 0000                  		dc.w loc_1C47C-AniArt_MZextra, loc_1C48A-AniArt_MZextra
0001DD76 0000 0000                  		dc.w loc_1C4A0-AniArt_MZextra, loc_1C4AE-AniArt_MZextra
0001DD7A 0000 0000                  		dc.w loc_1C4C4-AniArt_MZextra, loc_1C4D2-AniArt_MZextra
0001DD7E 0000 0000                  		dc.w loc_1C4E8-AniArt_MZextra, loc_1C4FA-AniArt_MZextra
0001DD82                            ; ===========================================================================
0001DD82                            
0001DD82                            loc_1C3EE:				; XREF: AniArt_MZextra
0001DD82 2C91                       		move.l	(a1),(a6)
0001DD84 43E9 0010                  		lea	$10(a1),a1
0001DD88 51C9 FFF8                  		dbf	d1,loc_1C3EE
0001DD8C 4E75                       		rts	
0001DD8E                            ; ===========================================================================
0001DD8E                            
0001DD8E                            loc_1C3FA:				; XREF: AniArt_MZextra
0001DD8E 2029 0002                  		move.l	2(a1),d0
0001DD92 1029 0001                  		move.b	1(a1),d0
0001DD96 E098                       		ror.l	#8,d0
0001DD98 2C80                       		move.l	d0,(a6)
0001DD9A 43E9 0010                  		lea	$10(a1),a1
0001DD9E 51C9 FFEE                  		dbf	d1,loc_1C3FA
0001DDA2 4E75                       		rts	
0001DDA4                            ; ===========================================================================
0001DDA4                            
0001DDA4                            loc_1C410:				; XREF: AniArt_MZextra
0001DDA4 2CA9 0002                  		move.l	2(a1),(a6)
0001DDA8 43E9 0010                  		lea	$10(a1),a1
0001DDAC 51C9 FFF6                  		dbf	d1,loc_1C410
0001DDB0 4E75                       		rts	
0001DDB2                            ; ===========================================================================
0001DDB2                            
0001DDB2                            loc_1C41E:				; XREF: AniArt_MZextra
0001DDB2 2029 0004                  		move.l	4(a1),d0
0001DDB6 1029 0003                  		move.b	3(a1),d0
0001DDBA E098                       		ror.l	#8,d0
0001DDBC 2C80                       		move.l	d0,(a6)
0001DDBE 43E9 0010                  		lea	$10(a1),a1
0001DDC2 51C9 FFEE                  		dbf	d1,loc_1C41E
0001DDC6 4E75                       		rts	
0001DDC8                            ; ===========================================================================
0001DDC8                            
0001DDC8                            loc_1C434:				; XREF: AniArt_MZextra
0001DDC8 2CA9 0004                  		move.l	4(a1),(a6)
0001DDCC 43E9 0010                  		lea	$10(a1),a1
0001DDD0 51C9 FFF6                  		dbf	d1,loc_1C434
0001DDD4 4E75                       		rts	
0001DDD6                            ; ===========================================================================
0001DDD6                            
0001DDD6                            loc_1C442:				; XREF: AniArt_MZextra
0001DDD6 2029 0006                  		move.l	6(a1),d0
0001DDDA 1029 0005                  		move.b	5(a1),d0
0001DDDE E098                       		ror.l	#8,d0
0001DDE0 2C80                       		move.l	d0,(a6)
0001DDE2 43E9 0010                  		lea	$10(a1),a1
0001DDE6 51C9 FFEE                  		dbf	d1,loc_1C442
0001DDEA 4E75                       		rts	
0001DDEC                            ; ===========================================================================
0001DDEC                            
0001DDEC                            loc_1C458:				; XREF: AniArt_MZextra
0001DDEC 2CA9 0006                  		move.l	6(a1),(a6)
0001DDF0 43E9 0010                  		lea	$10(a1),a1
0001DDF4 51C9 FFF6                  		dbf	d1,loc_1C458
0001DDF8 4E75                       		rts	
0001DDFA                            ; ===========================================================================
0001DDFA                            
0001DDFA                            loc_1C466:				; XREF: AniArt_MZextra
0001DDFA 2029 0008                  		move.l	8(a1),d0
0001DDFE 1029 0007                  		move.b	7(a1),d0
0001DE02 E098                       		ror.l	#8,d0
0001DE04 2C80                       		move.l	d0,(a6)
0001DE06 43E9 0010                  		lea	$10(a1),a1
0001DE0A 51C9 FFEE                  		dbf	d1,loc_1C466
0001DE0E 4E75                       		rts	
0001DE10                            ; ===========================================================================
0001DE10                            
0001DE10                            loc_1C47C:				; XREF: AniArt_MZextra
0001DE10 2CA9 0008                  		move.l	8(a1),(a6)
0001DE14 43E9 0010                  		lea	$10(a1),a1
0001DE18 51C9 FFF6                  		dbf	d1,loc_1C47C
0001DE1C 4E75                       		rts	
0001DE1E                            ; ===========================================================================
0001DE1E                            
0001DE1E                            loc_1C48A:				; XREF: AniArt_MZextra
0001DE1E 2029 000A                  		move.l	$A(a1),d0
0001DE22 1029 0009                  		move.b	9(a1),d0
0001DE26 E098                       		ror.l	#8,d0
0001DE28 2C80                       		move.l	d0,(a6)
0001DE2A 43E9 0010                  		lea	$10(a1),a1
0001DE2E 51C9 FFEE                  		dbf	d1,loc_1C48A
0001DE32 4E75                       		rts	
0001DE34                            ; ===========================================================================
0001DE34                            
0001DE34                            loc_1C4A0:				; XREF: AniArt_MZextra
0001DE34 2CA9 000A                  		move.l	$A(a1),(a6)
0001DE38 43E9 0010                  		lea	$10(a1),a1
0001DE3C 51C9 FFF6                  		dbf	d1,loc_1C4A0
0001DE40 4E75                       		rts	
0001DE42                            ; ===========================================================================
0001DE42                            
0001DE42                            loc_1C4AE:				; XREF: AniArt_MZextra
0001DE42 2029 000C                  		move.l	$C(a1),d0
0001DE46 1029 000B                  		move.b	$B(a1),d0
0001DE4A E098                       		ror.l	#8,d0
0001DE4C 2C80                       		move.l	d0,(a6)
0001DE4E 43E9 0010                  		lea	$10(a1),a1
0001DE52 51C9 FFEE                  		dbf	d1,loc_1C4AE
0001DE56 4E75                       		rts	
0001DE58                            ; ===========================================================================
0001DE58                            
0001DE58                            loc_1C4C4:				; XREF: AniArt_MZextra
0001DE58 2CA9 000C                  		move.l	$C(a1),(a6)
0001DE5C 43E9 0010                  		lea	$10(a1),a1
0001DE60 51C9 FFF6                  		dbf	d1,loc_1C4C4
0001DE64 4E75                       		rts	
0001DE66                            ; ===========================================================================
0001DE66                            
0001DE66                            loc_1C4D2:				; XREF: AniArt_MZextra
0001DE66 2029 000C                  		move.l	$C(a1),d0
0001DE6A E198                       		rol.l	#8,d0
0001DE6C 1011                       		move.b	0(a1),d0
0001DE6E 2C80                       		move.l	d0,(a6)
0001DE70 43E9 0010                  		lea	$10(a1),a1
0001DE74 51C9 FFF0                  		dbf	d1,loc_1C4D2
0001DE78 4E75                       		rts	
0001DE7A                            ; ===========================================================================
0001DE7A                            
0001DE7A                            loc_1C4E8:				; XREF: AniArt_MZextra
0001DE7A 3CA9 000E                  		move.w	$E(a1),(a6)
0001DE7E 3C91                       		move.w	0(a1),(a6)
0001DE80 43E9 0010                  		lea	$10(a1),a1
0001DE84 51C9 FFF4                  		dbf	d1,loc_1C4E8
0001DE88 4E75                       		rts	
0001DE8A                            ; ===========================================================================
0001DE8A                            
0001DE8A                            loc_1C4FA:				; XREF: AniArt_MZextra
0001DE8A 2011                       		move.l	0(a1),d0
0001DE8C 1029 000F                  		move.b	$F(a1),d0
0001DE90 E098                       		ror.l	#8,d0
0001DE92 2C80                       		move.l	d0,(a6)
0001DE94 43E9 0010                  		lea	$10(a1),a1
0001DE98 51C9 FFF0                  		dbf	d1,loc_1C4FA
0001DE9C 4E75                       		rts	
0001DE9E                            
0001DE9E                            ; ---------------------------------------------------------------------------
0001DE9E                            ; Animated pattern routine - giant ring
0001DE9E                            ; ---------------------------------------------------------------------------
0001DE9E                            
0001DE9E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DE9E                            
0001DE9E                            
0001DE9E                            AniArt_GiantRing:			; XREF: AniArt_Load
0001DE9E 4A78 F7BE                  		tst.w	($FFFFF7BE).w
0001DEA2 6600                       		bne.s	loc_1C518
0001DEA4 4E75                       		rts	
0001DEA6                            ; ===========================================================================
0001DEA6                            
0001DEA6                            loc_1C518:
0001DEA6 0478 01C0 F7BE             		subi.w	#$1C0,($FFFFF7BE).w
0001DEAC 43F9 0000 0000             		lea	(Art_BigRing).l,a1 ; load giant	ring patterns
0001DEB2 7000                       		moveq	#0,d0
0001DEB4 3038 F7BE                  		move.w	($FFFFF7BE).w,d0
0001DEB8 43F1 0000                  		lea	(a1,d0.w),a1
0001DEBC 0640 8000                  		addi.w	#$8000,d0
0001DEC0 E588                       		lsl.l	#2,d0
0001DEC2 E448                       		lsr.w	#2,d0
0001DEC4 0040 4000                  		ori.w	#$4000,d0
0001DEC8 4840                       		swap	d0
0001DECA 2D40 0004                  		move.l	d0,4(a6)
0001DECE 323C 000D                  		move.w	#$D,d1
0001DED2 6000 FE78                  		bra.w	LoadTiles
0001DED6                            ; End of function AniArt_GiantRing
0001DED6                            
0001DED6                            ; ===========================================================================
0001DED6                            ; ---------------------------------------------------------------------------
0001DED6                            ; Object 21 - SCORE, TIME, RINGS
0001DED6                            ; ---------------------------------------------------------------------------
0001DED6                            
0001DED6                            Obj21:					; XREF: Obj_Index
0001DED6 7000                       		moveq	#0,d0
0001DED8 1028 0024                  		move.b	$24(a0),d0
0001DEDC 323B 0000                  		move.w	Obj21_Index(pc,d0.w),d1
0001DEE0 4EFB 1000                  		jmp	Obj21_Index(pc,d1.w)
0001DEE4                            ; ===========================================================================
0001DEE4 0000                       Obj21_Index:	dc.w Obj21_Main-Obj21_Index
0001DEE6 0000                       		dc.w Obj21_Flash-Obj21_Index
0001DEE8                            ; ===========================================================================
0001DEE8                            
0001DEE8                            Obj21_Main:				; XREF: Obj21_Main
0001DEE8 5428 0024                  		addq.b	#2,$24(a0)
0001DEEC 317C 0090 0008             		move.w	#$90,8(a0)
0001DEF2 317C 0108 000A             		move.w	#$108,$A(a0)
0001DEF8 217C 0000 0000 0004        		move.l	#Map_obj21,4(a0)
0001DF00 317C 06CA 0002             		move.w	#$6CA,2(a0)
0001DF06 117C 0000 0001             		move.b	#0,1(a0)
0001DF0C 117C 0000 0018             		move.b	#0,$18(a0)
0001DF12                            
0001DF12                            Obj21_Flash:				; XREF: Obj21_Main
0001DF12 7000                       		moveq	#0,d0
0001DF14 0838 0003 FE05             		btst	#3,($FFFFFE05).w
0001DF1A 6600                       		bne.s	Obj21_Display
0001DF1C 4A78 FE20                  		tst.w	($FFFFFE20).w	; do you have any rings?
0001DF20 6600                       		bne.s	Obj21_Flash2	; if not, branch
0001DF22 5240                       		addq.w	#1,d0		; make ring counter flash red
0001DF24                            ; ===========================================================================
0001DF24                            
0001DF24                            Obj21_Flash2:
0001DF24 0C38 0009 FE23             		cmpi.b	#9,($FFFFFE23).w ; have	9 minutes elapsed?
0001DF2A 6600                       		bne.s	Obj21_Display	; if not, branch
0001DF2C 5440                       		addq.w	#2,d0		; make time counter flash red
0001DF2E                            
0001DF2E                            Obj21_Display:
0001DF2E 1140 001A                  		move.b	d0,$1A(a0)
0001DF32 4EF9 0000 E0D6             		jmp	DisplaySprite
0001DF38                            ; ===========================================================================
0001DF38                            ; ---------------------------------------------------------------------------
0001DF38                            ; Sprite mappings - SCORE, TIME, RINGS
0001DF38                            ; ---------------------------------------------------------------------------
0001DF38                            Map_obj21:
0001DF38                            	include "_maps\obj21.asm"
0001DF38                            ; ---------------------------------------------------------------------------
0001DF38                            ; Sprite mappings - SCORE, TIME, RINGS
0001DF38                            ; ---------------------------------------------------------------------------
0001DF38 0000 0000                  		dc.w byte_1C5BC-Map_obj21, byte_1C5F0-Map_obj21
0001DF3C 0000 0000                  		dc.w byte_1C624-Map_obj21, byte_1C658-Map_obj21
0001DF40 0A                         byte_1C5BC:	dc.b $A
0001DF41 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001DF46 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001DF4B 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001DF50 900D 8010 00               		dc.b $90, $D, $80, $10,	0
0001DF55 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001DF5A A00D 8008 00               		dc.b $A0, $D, $80, 8, 0
0001DF5F A001 8000 20               		dc.b $A0, 1, $80, 0, $20
0001DF64 A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001DF69 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001DF6E 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001DF73 00                         		dc.b 0
0001DF74 0A                         byte_1C5F0:	dc.b $A
0001DF75 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001DF7A 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001DF7F 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001DF84 900D 8010 00               		dc.b $90, $D, $80, $10,	0
0001DF89 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001DF8E A00D A008 00               		dc.b $A0, $D, $A0, 8, 0
0001DF93 A001 A000 20               		dc.b $A0, 1, $A0, 0, $20
0001DF98 A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001DF9D 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001DFA2 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001DFA7 00                         		dc.b 0
0001DFA8 0A                         byte_1C624:	dc.b $A
0001DFA9 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001DFAE 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001DFB3 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001DFB8 900D A010 00               		dc.b $90, $D, $A0, $10,	0
0001DFBD 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001DFC2 A00D 8008 00               		dc.b $A0, $D, $80, 8, 0
0001DFC7 A001 8000 20               		dc.b $A0, 1, $80, 0, $20
0001DFCC A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001DFD1 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001DFD6 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001DFDB 00                         		dc.b 0
0001DFDC 0A                         byte_1C658:	dc.b $A
0001DFDD 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001DFE2 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001DFE7 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001DFEC 900D A010 00               		dc.b $90, $D, $A0, $10,	0
0001DFF1 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001DFF6 A00D A008 00               		dc.b $A0, $D, $A0, 8, 0
0001DFFB A001 A000 20               		dc.b $A0, 1, $A0, 0, $20
0001E000 A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001E005 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001E00A 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001E010 00                         		even
0001E010 00                         		even
0001E010                            
0001E010                            ; ---------------------------------------------------------------------------
0001E010                            ; Add points subroutine
0001E010                            ; ---------------------------------------------------------------------------
0001E010                            
0001E010                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E010                            
0001E010                            
0001E010                            AddPoints:
0001E010 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; set score counter to	update
0001E016 45F8 FFC0                  		lea	($FFFFFFC0).w,a2
0001E01A 47F8 FE26                  		lea	($FFFFFE26).w,a3
0001E01E D193                       		add.l	d0,(a3)		; add d0*10 to the score
0001E020 223C 000F 423F             		move.l	#999999,d1
0001E026 B293                       		cmp.l	(a3),d1		; is #999999 higher than the score?
0001E028 6200 0000                  		bhi.w	loc_1C6AC	; if yes, branch
0001E02C 2681                       		move.l	d1,(a3)		; reset	score to #999999
0001E02E 2481                       		move.l	d1,(a2)
0001E030                            
0001E030                            loc_1C6AC:
0001E030 2013                       		move.l	(a3),d0
0001E032 B092                       		cmp.l	(a2),d0
0001E034 6500 0000                  		bcs.w	locret_1C6B6
0001E038 2480                       		move.l	d0,(a2)
0001E03A                            
0001E03A                            locret_1C6B6:
0001E03A 4E75                       		rts	
0001E03C                            ; End of function AddPoints
0001E03C                            
0001E03C                            ; ---------------------------------------------------------------------------
0001E03C                            ; Subroutine to	update the HUD
0001E03C                            ; ---------------------------------------------------------------------------
0001E03C                            
0001E03C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E03C                            
0001E03C                            
0001E03C                            HudUpdate:
0001E03C 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug mode	on?
0001E040 6600 0000                  		bne.w	HudDebug	; if yes, branch
0001E044 4A38 FE1F                  		tst.b	($FFFFFE1F).w	; does the score need updating?
0001E048 6700                       		beq.s	Hud_ChkRings	; if not, branch
0001E04A 4238 FE1F                  		clr.b	($FFFFFE1F).w
0001E04E 203C 5C80 0003             		move.l	#$5C800003,d0	; set VRAM address
0001E054 2238 FE26                  		move.l	($FFFFFE26).w,d1 ; load	score
0001E058 6100 0000                  		bsr.w	Hud_Score
0001E05C                            
0001E05C                            Hud_ChkRings:
0001E05C 4A38 FE1D                  		tst.b	($FFFFFE1D).w	; does the ring	counter	need updating?
0001E060 6700                       		beq.s	Hud_ChkTime	; if not, branch
0001E062 6A00                       		bpl.s	loc_1C6E4
0001E064 6100 0000                  		bsr.w	Hud_LoadZero
0001E068                            
0001E068                            loc_1C6E4:
0001E068 4238 FE1D                  		clr.b	($FFFFFE1D).w
0001E06C 203C 5F40 0003             		move.l	#$5F400003,d0	; set VRAM address
0001E072 7200                       		moveq	#0,d1
0001E074 3238 FE20                  		move.w	($FFFFFE20).w,d1 ; load	number of rings
0001E078 6100 0000                  		bsr.w	Hud_Rings
0001E07C                            
0001E07C                            Hud_ChkTime:
0001E07C 4A38 FE1E                  		tst.b	($FFFFFE1E).w	; does the time	need updating?
0001E080 6700                       		beq.s	Hud_ChkLives	; if not, branch
0001E082 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
0001E086 6600                       		bne.s	Hud_ChkLives	; if yes, branch
0001E088 43F8 FE22                  		lea	($FFFFFE22).w,a1
0001E08C 0C99 0009 3B3B             		cmpi.l	#$93B3B,(a1)+	; is the time 9.59?
0001E092 6700                       		beq.s	TimeOver	; if yes, branch
0001E094 5221                       		addq.b	#1,-(a1)
0001E096 0C11 003C                  		cmpi.b	#60,(a1)
0001E09A 6500                       		bcs.s	Hud_ChkLives
0001E09C 12BC 0000                  		move.b	#0,(a1)
0001E0A0 5221                       		addq.b	#1,-(a1)
0001E0A2 0C11 003C                  		cmpi.b	#60,(a1)
0001E0A6 6500                       		bcs.s	loc_1C734
0001E0A8 12BC 0000                  		move.b	#0,(a1)
0001E0AC 5221                       		addq.b	#1,-(a1)
0001E0AE 0C11 0009                  		cmpi.b	#9,(a1)
0001E0B2 6500                       		bcs.s	loc_1C734
0001E0B4 12BC 0009                  		move.b	#9,(a1)
0001E0B8                            
0001E0B8                            loc_1C734:
0001E0B8 203C 5E40 0003             		move.l	#$5E400003,d0
0001E0BE 7200                       		moveq	#0,d1
0001E0C0 1238 FE23                  		move.b	($FFFFFE23).w,d1 ; load	minutes
0001E0C4 6100 0000                  		bsr.w	Hud_Mins
0001E0C8 203C 5EC0 0003             		move.l	#$5EC00003,d0
0001E0CE 7200                       		moveq	#0,d1
0001E0D0 1238 FE24                  		move.b	($FFFFFE24).w,d1 ; load	seconds
0001E0D4 6100 0000                  		bsr.w	Hud_Secs
0001E0D8                            
0001E0D8                            Hud_ChkLives:
0001E0D8 4A38 FE1C                  		tst.b	($FFFFFE1C).w	; does the lives counter need updating?
0001E0DC 6700                       		beq.s	Hud_ChkBonus	; if not, branch
0001E0DE 4238 FE1C                  		clr.b	($FFFFFE1C).w
0001E0E2 6100 0000                  		bsr.w	Hud_Lives
0001E0E6                            
0001E0E6                            Hud_ChkBonus:
0001E0E6 4A38 F7D6                  		tst.b	($FFFFF7D6).w	; do time/ring bonus counters need updating?
0001E0EA 6700                       		beq.s	Hud_End		; if not, branch
0001E0EC 4238 F7D6                  		clr.b	($FFFFF7D6).w
0001E0F0 23FC 6E00 0002 00C0 0004   		move.l	#$6E000002,($C00004).l
0001E0FA 7200                       		moveq	#0,d1
0001E0FC 3238 F7D2                  		move.w	($FFFFF7D2).w,d1 ; load	time bonus
0001E100 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001E104 7200                       		moveq	#0,d1
0001E106 3238 F7D4                  		move.w	($FFFFF7D4).w,d1 ; load	ring bonus
0001E10A 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001E10E                            
0001E10E                            Hud_End:
0001E10E 4E75                       		rts	
0001E110                            ; ===========================================================================
0001E110                            
0001E110                            TimeOver:				; XREF: Hud_ChkTime
0001E110 4238 FE1E                  		clr.b	($FFFFFE1E).w
0001E114 41F8 D000                  		lea	($FFFFD000).w,a0
0001E118 2448                       		movea.l	a0,a2
0001E11A 6100 E8FC                  		bsr.w	KillSonic
0001E11E 11FC 0001 FE1A             		move.b	#1,($FFFFFE1A).w
0001E124 4E75                       		rts	
0001E126                            ; ===========================================================================
0001E126                            
0001E126                            HudDebug:				; XREF: HudUpdate
0001E126 6100 0000                  		bsr.w	HudDb_XY
0001E12A 4A38 FE1D                  		tst.b	($FFFFFE1D).w	; does the ring	counter	need updating?
0001E12E 6700                       		beq.s	HudDb_ObjCount	; if not, branch
0001E130 6A00                       		bpl.s	HudDb_Rings
0001E132 6100 0000                  		bsr.w	Hud_LoadZero
0001E136                            
0001E136                            HudDb_Rings:
0001E136 4238 FE1D                  		clr.b	($FFFFFE1D).w
0001E13A 203C 5F40 0003             		move.l	#$5F400003,d0	; set VRAM address
0001E140 7200                       		moveq	#0,d1
0001E142 3238 FE20                  		move.w	($FFFFFE20).w,d1 ; load	number of rings
0001E146 6100 0000                  		bsr.w	Hud_Rings
0001E14A                            
0001E14A                            HudDb_ObjCount:
0001E14A 203C 5EC0 0003             		move.l	#$5EC00003,d0	; set VRAM address
0001E150 7200                       		moveq	#0,d1
0001E152 1238 F62C                  		move.b	($FFFFF62C).w,d1 ; load	"number	of objects" counter
0001E156 6100 0000                  		bsr.w	Hud_Secs
0001E15A 4A38 FE1C                  		tst.b	($FFFFFE1C).w	; does the lives counter need updating?
0001E15E 6700                       		beq.s	HudDb_ChkBonus	; if not, branch
0001E160 4238 FE1C                  		clr.b	($FFFFFE1C).w
0001E164 6100 0000                  		bsr.w	Hud_Lives
0001E168                            
0001E168                            HudDb_ChkBonus:
0001E168 4A38 F7D6                  		tst.b	($FFFFF7D6).w	; does the ring/time bonus counter need	updating?
0001E16C 6700                       		beq.s	HudDb_End	; if not, branch
0001E16E 4238 F7D6                  		clr.b	($FFFFF7D6).w
0001E172 23FC 6E00 0002 00C0 0004   		move.l	#$6E000002,($C00004).l ; set VRAM address
0001E17C 7200                       		moveq	#0,d1
0001E17E 3238 F7D2                  		move.w	($FFFFF7D2).w,d1 ; load	time bonus
0001E182 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001E186 7200                       		moveq	#0,d1
0001E188 3238 F7D4                  		move.w	($FFFFF7D4).w,d1 ; load	ring bonus
0001E18C 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001E190                            
0001E190                            HudDb_End:
0001E190 4E75                       		rts	
0001E192                            ; End of function HudUpdate
0001E192                            
0001E192                            ; ---------------------------------------------------------------------------
0001E192                            ; Subroutine to	load "0" on the	HUD
0001E192                            ; ---------------------------------------------------------------------------
0001E192                            
0001E192                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E192                            
0001E192                            
0001E192                            Hud_LoadZero:				; XREF: HudUpdate
0001E192 23FC 5F40 0003 00C0 0004   		move.l	#$5F400003,($C00004).l
0001E19C 45FA 0000                  		lea	Hud_TilesZero(pc),a2
0001E1A0 343C 0002                  		move.w	#2,d2
0001E1A4 6000                       		bra.s	loc_1C83E
0001E1A6                            ; End of function Hud_LoadZero
0001E1A6                            
0001E1A6                            ; ---------------------------------------------------------------------------
0001E1A6                            ; Subroutine to	load uncompressed HUD patterns ("E", "0", colon)
0001E1A6                            ; ---------------------------------------------------------------------------
0001E1A6                            
0001E1A6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E1A6                            
0001E1A6                            
0001E1A6                            Hud_Base:				; XREF: Level; SS_EndLoop; EndingSequence
0001E1A6 4DF9 00C0 0000             		lea	($C00000).l,a6
0001E1AC 6100 0000                  		bsr.w	Hud_Lives
0001E1B0 23FC 5C40 0003 00C0 0004   		move.l	#$5C400003,($C00004).l
0001E1BA 45FA 0000                  		lea	Hud_TilesBase(pc),a2
0001E1BE 343C 000E                  		move.w	#$E,d2
0001E1C2                            
0001E1C2                            loc_1C83E:				; XREF: Hud_LoadZero
0001E1C2 43FA 0000                  		lea	Art_Hud(pc),a1
0001E1C6                            
0001E1C6                            loc_1C842:
0001E1C6 323C 000F                  		move.w	#$F,d1
0001E1CA 101A                       		move.b	(a2)+,d0
0001E1CC 6B00                       		bmi.s	loc_1C85E
0001E1CE 4880                       		ext.w	d0
0001E1D0 EB48                       		lsl.w	#5,d0
0001E1D2 47F1 0000                  		lea	(a1,d0.w),a3
0001E1D6                            
0001E1D6                            loc_1C852:
0001E1D6 2C9B                       		move.l	(a3)+,(a6)
0001E1D8 51C9 FFFC                  		dbf	d1,loc_1C852
0001E1DC                            
0001E1DC                            loc_1C858:
0001E1DC 51CA FFE8                  		dbf	d2,loc_1C842
0001E1E0                            
0001E1E0 4E75                       		rts	
0001E1E2                            ; ===========================================================================
0001E1E2                            
0001E1E2                            loc_1C85E:
0001E1E2 2CBC 0000 0000             		move.l	#0,(a6)
0001E1E8 51C9 FFF8                  		dbf	d1,loc_1C85E
0001E1EC                            
0001E1EC 60EE                       		bra.s	loc_1C858
0001E1EE                            ; End of function Hud_Base
0001E1EE                            
0001E1EE                            ; ===========================================================================
0001E1EE 16FF FFFF FFFF FF00 0014+  Hud_TilesBase:	dc.b $16, $FF, $FF, $FF, $FF, $FF, $FF,	0, 0, $14, 0, 0
0001E1FA FFFF 0000                  Hud_TilesZero:	dc.b $FF, $FF, 0, 0
0001E1FE                            ; ---------------------------------------------------------------------------
0001E1FE                            ; Subroutine to	load debug mode	numbers	patterns
0001E1FE                            ; ---------------------------------------------------------------------------
0001E1FE                            
0001E1FE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E1FE                            
0001E1FE                            
0001E1FE                            HudDb_XY:				; XREF: HudDebug
0001E1FE 23FC 5C40 0003 00C0 0004   		move.l	#$5C400003,($C00004).l ; set VRAM address
0001E208 3238 F700                  		move.w	($FFFFF700).w,d1 ; load	camera x-position
0001E20C 4841                       		swap	d1
0001E20E 3238 D008                  		move.w	($FFFFD008).w,d1 ; load	Sonic's x-position
0001E212 6100                       		bsr.s	HudDb_XY2
0001E214 3238 F704                  		move.w	($FFFFF704).w,d1 ; load	camera y-position
0001E218 4841                       		swap	d1
0001E21A 3238 D00C                  		move.w	($FFFFD00C).w,d1 ; load	Sonic's y-position
0001E21E                            ; End of function HudDb_XY
0001E21E                            
0001E21E                            
0001E21E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E21E                            
0001E21E                            
0001E21E                            HudDb_XY2:
0001E21E 7C07                       		moveq	#7,d6
0001E220 43F9 0000 0592             		lea	(Art_Text).l,a1
0001E226                            
0001E226                            HudDb_XYLoop:
0001E226 E959                       		rol.w	#4,d1
0001E228 3401                       		move.w	d1,d2
0001E22A 0242 000F                  		andi.w	#$F,d2
0001E22E 0C42 000A                  		cmpi.w	#$A,d2
0001E232 6500                       		bcs.s	loc_1C8B2
0001E234 5E42                       		addq.w	#7,d2
0001E236                            
0001E236                            loc_1C8B2:
0001E236 EB4A                       		lsl.w	#5,d2
0001E238 47F1 2000                  		lea	(a1,d2.w),a3
0001E23C 2C9B                       		move.l	(a3)+,(a6)
0001E23E 2C9B                       		move.l	(a3)+,(a6)
0001E240 2C9B                       		move.l	(a3)+,(a6)
0001E242 2C9B                       		move.l	(a3)+,(a6)
0001E244 2C9B                       		move.l	(a3)+,(a6)
0001E246 2C9B                       		move.l	(a3)+,(a6)
0001E248 2C9B                       		move.l	(a3)+,(a6)
0001E24A 2C9B                       		move.l	(a3)+,(a6)
0001E24C 4841                       		swap	d1
0001E24E 51CE FFD6                  		dbf	d6,HudDb_XYLoop	; repeat 7 more	times
0001E252                            
0001E252 4E75                       		rts	
0001E254                            ; End of function HudDb_XY2
0001E254                            
0001E254                            ; ---------------------------------------------------------------------------
0001E254                            ; Subroutine to	load rings numbers patterns
0001E254                            ; ---------------------------------------------------------------------------
0001E254                            
0001E254                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E254                            
0001E254                            
0001E254                            Hud_Rings:				; XREF: HudUpdate
0001E254 45F9 0000 0000             		lea	(Hud_100).l,a2
0001E25A 7C02                       		moveq	#2,d6
0001E25C 6000                       		bra.s	Hud_LoadArt
0001E25E                            ; End of function Hud_Rings
0001E25E                            
0001E25E                            ; ---------------------------------------------------------------------------
0001E25E                            ; Subroutine to	load score numbers patterns
0001E25E                            ; ---------------------------------------------------------------------------
0001E25E                            
0001E25E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E25E                            
0001E25E                            
0001E25E                            Hud_Score:				; XREF: HudUpdate
0001E25E 45F9 0000 0000             		lea	(Hud_100000).l,a2
0001E264 7C05                       		moveq	#5,d6
0001E266                            
0001E266                            Hud_LoadArt:
0001E266 7800                       		moveq	#0,d4
0001E268 43FA 0000                  		lea	Art_Hud(pc),a1
0001E26C                            
0001E26C                            Hud_ScoreLoop:
0001E26C 7400                       		moveq	#0,d2
0001E26E 261A                       		move.l	(a2)+,d3
0001E270                            
0001E270                            loc_1C8EC:
0001E270 9283                       		sub.l	d3,d1
0001E272 6500                       		bcs.s	loc_1C8F4
0001E274 5242                       		addq.w	#1,d2
0001E276 60F8                       		bra.s	loc_1C8EC
0001E278                            ; ===========================================================================
0001E278                            
0001E278                            loc_1C8F4:
0001E278 D283                       		add.l	d3,d1
0001E27A 4A42                       		tst.w	d2
0001E27C 6700                       		beq.s	loc_1C8FE
0001E27E 383C 0001                  		move.w	#1,d4
0001E282                            
0001E282                            loc_1C8FE:
0001E282 4A44                       		tst.w	d4
0001E284 6700                       		beq.s	loc_1C92C
0001E286 ED4A                       		lsl.w	#6,d2
0001E288 2D40 0004                  		move.l	d0,4(a6)
0001E28C 47F1 2000                  		lea	(a1,d2.w),a3
0001E290 2C9B                       		move.l	(a3)+,(a6)
0001E292 2C9B                       		move.l	(a3)+,(a6)
0001E294 2C9B                       		move.l	(a3)+,(a6)
0001E296 2C9B                       		move.l	(a3)+,(a6)
0001E298 2C9B                       		move.l	(a3)+,(a6)
0001E29A 2C9B                       		move.l	(a3)+,(a6)
0001E29C 2C9B                       		move.l	(a3)+,(a6)
0001E29E 2C9B                       		move.l	(a3)+,(a6)
0001E2A0 2C9B                       		move.l	(a3)+,(a6)
0001E2A2 2C9B                       		move.l	(a3)+,(a6)
0001E2A4 2C9B                       		move.l	(a3)+,(a6)
0001E2A6 2C9B                       		move.l	(a3)+,(a6)
0001E2A8 2C9B                       		move.l	(a3)+,(a6)
0001E2AA 2C9B                       		move.l	(a3)+,(a6)
0001E2AC 2C9B                       		move.l	(a3)+,(a6)
0001E2AE 2C9B                       		move.l	(a3)+,(a6)
0001E2B0                            
0001E2B0                            loc_1C92C:
0001E2B0 0680 0040 0000             		addi.l	#$400000,d0
0001E2B6 51CE FFB4                  		dbf	d6,Hud_ScoreLoop
0001E2BA                            
0001E2BA 4E75                       		rts	
0001E2BC                            ; End of function Hud_Score
0001E2BC                            
0001E2BC                            ; ---------------------------------------------------------------------------
0001E2BC                            ; Subroutine to	load countdown numbers on the continue screen
0001E2BC                            ; ---------------------------------------------------------------------------
0001E2BC                            
0001E2BC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E2BC                            
0001E2BC                            
0001E2BC                            ContScrCounter:				; XREF: ContinueScreen
0001E2BC 23FC 5F80 0003 00C0 0004   		move.l	#$5F800003,($C00004).l ; set VRAM address
0001E2C6 4DF9 00C0 0000             		lea	($C00000).l,a6
0001E2CC 45F9 0000 0000             		lea	(Hud_10).l,a2
0001E2D2 7C01                       		moveq	#1,d6
0001E2D4 7800                       		moveq	#0,d4
0001E2D6 43FA 0000                  		lea	Art_Hud(pc),a1 ; load numbers patterns
0001E2DA                            
0001E2DA                            ContScr_Loop:
0001E2DA 7400                       		moveq	#0,d2
0001E2DC 261A                       		move.l	(a2)+,d3
0001E2DE                            
0001E2DE                            loc_1C95A:
0001E2DE 9283                       		sub.l	d3,d1
0001E2E0 6500                       		bcs.s	loc_1C962
0001E2E2 5242                       		addq.w	#1,d2
0001E2E4 60F8                       		bra.s	loc_1C95A
0001E2E6                            ; ===========================================================================
0001E2E6                            
0001E2E6                            loc_1C962:
0001E2E6 D283                       		add.l	d3,d1
0001E2E8 ED4A                       		lsl.w	#6,d2
0001E2EA 47F1 2000                  		lea	(a1,d2.w),a3
0001E2EE 2C9B                       		move.l	(a3)+,(a6)
0001E2F0 2C9B                       		move.l	(a3)+,(a6)
0001E2F2 2C9B                       		move.l	(a3)+,(a6)
0001E2F4 2C9B                       		move.l	(a3)+,(a6)
0001E2F6 2C9B                       		move.l	(a3)+,(a6)
0001E2F8 2C9B                       		move.l	(a3)+,(a6)
0001E2FA 2C9B                       		move.l	(a3)+,(a6)
0001E2FC 2C9B                       		move.l	(a3)+,(a6)
0001E2FE 2C9B                       		move.l	(a3)+,(a6)
0001E300 2C9B                       		move.l	(a3)+,(a6)
0001E302 2C9B                       		move.l	(a3)+,(a6)
0001E304 2C9B                       		move.l	(a3)+,(a6)
0001E306 2C9B                       		move.l	(a3)+,(a6)
0001E308 2C9B                       		move.l	(a3)+,(a6)
0001E30A 2C9B                       		move.l	(a3)+,(a6)
0001E30C 2C9B                       		move.l	(a3)+,(a6)
0001E30E 51CE FFCA                  		dbf	d6,ContScr_Loop	; repeat 1 more	time
0001E312                            
0001E312 4E75                       		rts	
0001E314                            ; End of function ContScrCounter
0001E314                            
0001E314                            ; ===========================================================================
0001E314                            ; ---------------------------------------------------------------------------
0001E314                            ; HUD counter sizes
0001E314                            ; ---------------------------------------------------------------------------
0001E314 0001 86A0                  Hud_100000:	dc.l 100000		; XREF: Hud_Score
0001E318 0000 2710                  Hud_10000:	dc.l 10000
0001E31C 0000 03E8                  Hud_1000:	dc.l 1000		; XREF: Hud_TimeRingBonus
0001E320 0000 0064                  Hud_100:	dc.l 100		; XREF: Hud_Rings
0001E324 0000 000A                  Hud_10:		dc.l 10			; XREF: ContScrCounter; Hud_Secs; Hud_Lives
0001E328 0000 0001                  Hud_1:		dc.l 1			; XREF: Hud_Mins
0001E32C                            
0001E32C                            ; ---------------------------------------------------------------------------
0001E32C                            ; Subroutine to	load time numbers patterns
0001E32C                            ; ---------------------------------------------------------------------------
0001E32C                            
0001E32C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E32C                            
0001E32C                            
0001E32C                            Hud_Mins:				; XREF: Hud_ChkTime
0001E32C 45F9 0001 E328             		lea	(Hud_1).l,a2
0001E332 7C00                       		moveq	#0,d6
0001E334 6000                       		bra.s	loc_1C9BA
0001E336                            ; End of function Hud_Mins
0001E336                            
0001E336                            
0001E336                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E336                            
0001E336                            
0001E336                            Hud_Secs:				; XREF: Hud_ChkTime
0001E336 45F9 0001 E324             		lea	(Hud_10).l,a2
0001E33C 7C01                       		moveq	#1,d6
0001E33E                            
0001E33E                            loc_1C9BA:
0001E33E 7800                       		moveq	#0,d4
0001E340 43FA 0000                  		lea	Art_Hud(pc),a1
0001E344                            
0001E344                            Hud_TimeLoop:
0001E344 7400                       		moveq	#0,d2
0001E346 261A                       		move.l	(a2)+,d3
0001E348                            
0001E348                            loc_1C9C4:
0001E348 9283                       		sub.l	d3,d1
0001E34A 6500                       		bcs.s	loc_1C9CC
0001E34C 5242                       		addq.w	#1,d2
0001E34E 60F8                       		bra.s	loc_1C9C4
0001E350                            ; ===========================================================================
0001E350                            
0001E350                            loc_1C9CC:
0001E350 D283                       		add.l	d3,d1
0001E352 4A42                       		tst.w	d2
0001E354 6700                       		beq.s	loc_1C9D6
0001E356 383C 0001                  		move.w	#1,d4
0001E35A                            
0001E35A                            loc_1C9D6:
0001E35A ED4A                       		lsl.w	#6,d2
0001E35C 2D40 0004                  		move.l	d0,4(a6)
0001E360 47F1 2000                  		lea	(a1,d2.w),a3
0001E364 2C9B                       		move.l	(a3)+,(a6)
0001E366 2C9B                       		move.l	(a3)+,(a6)
0001E368 2C9B                       		move.l	(a3)+,(a6)
0001E36A 2C9B                       		move.l	(a3)+,(a6)
0001E36C 2C9B                       		move.l	(a3)+,(a6)
0001E36E 2C9B                       		move.l	(a3)+,(a6)
0001E370 2C9B                       		move.l	(a3)+,(a6)
0001E372 2C9B                       		move.l	(a3)+,(a6)
0001E374 2C9B                       		move.l	(a3)+,(a6)
0001E376 2C9B                       		move.l	(a3)+,(a6)
0001E378 2C9B                       		move.l	(a3)+,(a6)
0001E37A 2C9B                       		move.l	(a3)+,(a6)
0001E37C 2C9B                       		move.l	(a3)+,(a6)
0001E37E 2C9B                       		move.l	(a3)+,(a6)
0001E380 2C9B                       		move.l	(a3)+,(a6)
0001E382 2C9B                       		move.l	(a3)+,(a6)
0001E384 0680 0040 0000             		addi.l	#$400000,d0
0001E38A 51CE FFB8                  		dbf	d6,Hud_TimeLoop
0001E38E                            
0001E38E 4E75                       		rts	
0001E390                            ; End of function Hud_Secs
0001E390                            
0001E390                            ; ---------------------------------------------------------------------------
0001E390                            ; Subroutine to	load time/ring bonus numbers patterns
0001E390                            ; ---------------------------------------------------------------------------
0001E390                            
0001E390                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E390                            
0001E390                            
0001E390                            Hud_TimeRingBonus:			; XREF: Hud_ChkBonus
0001E390 45F9 0001 E31C             		lea	(Hud_1000).l,a2
0001E396 7C03                       		moveq	#3,d6
0001E398 7800                       		moveq	#0,d4
0001E39A 43FA 0000                  		lea	Art_Hud(pc),a1
0001E39E                            
0001E39E                            Hud_BonusLoop:
0001E39E 7400                       		moveq	#0,d2
0001E3A0 261A                       		move.l	(a2)+,d3
0001E3A2                            
0001E3A2                            loc_1CA1E:
0001E3A2 9283                       		sub.l	d3,d1
0001E3A4 6500                       		bcs.s	loc_1CA26
0001E3A6 5242                       		addq.w	#1,d2
0001E3A8 60F8                       		bra.s	loc_1CA1E
0001E3AA                            ; ===========================================================================
0001E3AA                            
0001E3AA                            loc_1CA26:
0001E3AA D283                       		add.l	d3,d1
0001E3AC 4A42                       		tst.w	d2
0001E3AE 6700                       		beq.s	loc_1CA30
0001E3B0 383C 0001                  		move.w	#1,d4
0001E3B4                            
0001E3B4                            loc_1CA30:
0001E3B4 4A44                       		tst.w	d4
0001E3B6 6700                       		beq.s	Hud_ClrBonus
0001E3B8 ED4A                       		lsl.w	#6,d2
0001E3BA 47F1 2000                  		lea	(a1,d2.w),a3
0001E3BE 2C9B                       		move.l	(a3)+,(a6)
0001E3C0 2C9B                       		move.l	(a3)+,(a6)
0001E3C2 2C9B                       		move.l	(a3)+,(a6)
0001E3C4 2C9B                       		move.l	(a3)+,(a6)
0001E3C6 2C9B                       		move.l	(a3)+,(a6)
0001E3C8 2C9B                       		move.l	(a3)+,(a6)
0001E3CA 2C9B                       		move.l	(a3)+,(a6)
0001E3CC 2C9B                       		move.l	(a3)+,(a6)
0001E3CE 2C9B                       		move.l	(a3)+,(a6)
0001E3D0 2C9B                       		move.l	(a3)+,(a6)
0001E3D2 2C9B                       		move.l	(a3)+,(a6)
0001E3D4 2C9B                       		move.l	(a3)+,(a6)
0001E3D6 2C9B                       		move.l	(a3)+,(a6)
0001E3D8 2C9B                       		move.l	(a3)+,(a6)
0001E3DA 2C9B                       		move.l	(a3)+,(a6)
0001E3DC 2C9B                       		move.l	(a3)+,(a6)
0001E3DE                            
0001E3DE                            loc_1CA5A:
0001E3DE 51CE FFBE                  		dbf	d6,Hud_BonusLoop ; repeat 3 more times
0001E3E2                            
0001E3E2 4E75                       		rts	
0001E3E4                            ; ===========================================================================
0001E3E4                            
0001E3E4                            Hud_ClrBonus:
0001E3E4 7A0F                       		moveq	#$F,d5
0001E3E6                            
0001E3E6                            Hud_ClrBonusLoop:
0001E3E6 2CBC 0000 0000             		move.l	#0,(a6)
0001E3EC 51CD FFF8                  		dbf	d5,Hud_ClrBonusLoop
0001E3F0                            
0001E3F0 60EC                       		bra.s	loc_1CA5A
0001E3F2                            ; End of function Hud_TimeRingBonus
0001E3F2                            
0001E3F2                            ; ---------------------------------------------------------------------------
0001E3F2                            ; Subroutine to	load uncompressed lives	counter	patterns
0001E3F2                            ; ---------------------------------------------------------------------------
0001E3F2                            
0001E3F2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E3F2                            
0001E3F2                            
0001E3F2                            Hud_Lives:				; XREF: Hud_ChkLives
0001E3F2 203C 7BA0 0003             		move.l	#$7BA00003,d0	; set VRAM address
0001E3F8 7200                       		moveq	#0,d1
0001E3FA 1238 FE12                  		move.b	($FFFFFE12).w,d1 ; load	number of lives
0001E3FE 45F9 0001 E324             		lea	(Hud_10).l,a2
0001E404 7C01                       		moveq	#1,d6
0001E406 7800                       		moveq	#0,d4
0001E408 43FA 0000                  		lea	Art_LivesNums(pc),a1
0001E40C                            
0001E40C                            Hud_LivesLoop:
0001E40C 2D40 0004                  		move.l	d0,4(a6)
0001E410 7400                       		moveq	#0,d2
0001E412 261A                       		move.l	(a2)+,d3
0001E414                            
0001E414                            loc_1CA90:
0001E414 9283                       		sub.l	d3,d1
0001E416 6500                       		bcs.s	loc_1CA98
0001E418 5242                       		addq.w	#1,d2
0001E41A 60F8                       		bra.s	loc_1CA90
0001E41C                            ; ===========================================================================
0001E41C                            
0001E41C                            loc_1CA98:
0001E41C D283                       		add.l	d3,d1
0001E41E 4A42                       		tst.w	d2
0001E420 6700                       		beq.s	loc_1CAA2
0001E422 383C 0001                  		move.w	#1,d4
0001E426                            
0001E426                            loc_1CAA2:
0001E426 4A44                       		tst.w	d4
0001E428 6700                       		beq.s	Hud_ClrLives
0001E42A                            
0001E42A                            loc_1CAA6:
0001E42A EB4A                       		lsl.w	#5,d2
0001E42C 47F1 2000                  		lea	(a1,d2.w),a3
0001E430 2C9B                       		move.l	(a3)+,(a6)
0001E432 2C9B                       		move.l	(a3)+,(a6)
0001E434 2C9B                       		move.l	(a3)+,(a6)
0001E436 2C9B                       		move.l	(a3)+,(a6)
0001E438 2C9B                       		move.l	(a3)+,(a6)
0001E43A 2C9B                       		move.l	(a3)+,(a6)
0001E43C 2C9B                       		move.l	(a3)+,(a6)
0001E43E 2C9B                       		move.l	(a3)+,(a6)
0001E440                            
0001E440                            loc_1CABC:
0001E440 0680 0040 0000             		addi.l	#$400000,d0
0001E446 51CE FFC4                  		dbf	d6,Hud_LivesLoop ; repeat 1 more time
0001E44A                            
0001E44A 4E75                       		rts	
0001E44C                            ; ===========================================================================
0001E44C                            
0001E44C                            Hud_ClrLives:
0001E44C 4A46                       		tst.w	d6
0001E44E 67DA                       		beq.s	loc_1CAA6
0001E450 7A07                       		moveq	#7,d5
0001E452                            
0001E452                            Hud_ClrLivesLoop:
0001E452 2CBC 0000 0000             		move.l	#0,(a6)
0001E458 51CD FFF8                  		dbf	d5,Hud_ClrLivesLoop
0001E45C 60E2                       		bra.s	loc_1CABC
0001E45E                            ; End of function Hud_Lives
0001E45E                            
0001E45E                            ; ===========================================================================
0001E45E                            Art_Hud:	incbin	artunc\HUD.bin		; 8x16 pixel numbers on HUD
0001E75E                            		even
0001E75E                            Art_LivesNums:	incbin	artunc\livescnt.bin	; 8x8 pixel numbers on lives counter
0001E89E                            		even
0001E89E                            ; ===========================================================================
0001E89E                            ; ---------------------------------------------------------------------------
0001E89E                            ; When debug mode is currently in use
0001E89E                            ; ---------------------------------------------------------------------------
0001E89E                            
0001E89E                            DebugMode:				; XREF: Obj01; Obj09
0001E89E 7000                       		moveq	#0,d0
0001E8A0 1038 FE08                  		move.b	($FFFFFE08).w,d0
0001E8A4 323B 0000                  		move.w	Debug_Index(pc,d0.w),d1
0001E8A8 4EFB 1000                  		jmp	Debug_Index(pc,d1.w)
0001E8AC                            ; ===========================================================================
0001E8AC 0000                       Debug_Index:	dc.w Debug_Main-Debug_Index
0001E8AE 0000                       		dc.w Debug_Skip-Debug_Index
0001E8B0                            ; ===========================================================================
0001E8B0                            
0001E8B0                            Debug_Main:				; XREF: Debug_Index
0001E8B0 5438 FE08                  		addq.b	#2,($FFFFFE08).w
0001E8B4 31F8 F72C FEF0             		move.w	($FFFFF72C).w,($FFFFFEF0).w ; buffer level x-boundary
0001E8BA 31F8 F726 FEF2             		move.w	($FFFFF726).w,($FFFFFEF2).w ; buffer level y-boundary
0001E8C0 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
0001E8C6 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
0001E8CC 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
0001E8D2 0278 07FF F704             		andi.w	#$7FF,($FFFFF704).w
0001E8D8 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
0001E8DE 117C 0000 001A             		move.b	#0,$1A(a0)
0001E8E4 117C 0000 001C             		move.b	#0,$1C(a0)
0001E8EA 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode = $10	(special stage)?
0001E8F0 6600                       		bne.s	Debug_Zone	; if not, branch
0001E8F2 31FC 0000 F782             		move.w	#0,($FFFFF782).w ; stop	special	stage rotating
0001E8F8 31FC 0000 F780             		move.w	#0,($FFFFF780).w ; make	special	stage "upright"
0001E8FE 7006                       		moveq	#6,d0		; use 6th debug	item list
0001E900 6000                       		bra.s	Debug_UseList
0001E902                            ; ===========================================================================
0001E902                            
0001E902                            Debug_Zone:
0001E902 7000                       		moveq	#0,d0
0001E904 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001E908                            
0001E908                            Debug_UseList:
0001E908 45F9 0000 0000             		lea	(DebugList).l,a2
0001E90E D040                       		add.w	d0,d0
0001E910 D4F2 0000                  		adda.w	(a2,d0.w),a2
0001E914 3C1A                       		move.w	(a2)+,d6
0001E916 BC38 FE06                  		cmp.b	($FFFFFE06).w,d6
0001E91A 6200                       		bhi.s	loc_1CF9E
0001E91C 11FC 0000 FE06             		move.b	#0,($FFFFFE06).w
0001E922                            
0001E922                            loc_1CF9E:
0001E922 6100 0000                  		bsr.w	Debug_ShowItem
0001E926 11FC 000C FE0A             		move.b	#$C,($FFFFFE0A).w
0001E92C 11FC 0001 FE0B             		move.b	#1,($FFFFFE0B).w
0001E932                            
0001E932                            Debug_Skip:				; XREF: Debug_Index
0001E932 7006                       		moveq	#6,d0
0001E934 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w
0001E93A 6700                       		beq.s	loc_1CFBE
0001E93C 7000                       		moveq	#0,d0
0001E93E 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001E942                            
0001E942                            loc_1CFBE:
0001E942 45F9 0000 0000             		lea	(DebugList).l,a2
0001E948 D040                       		add.w	d0,d0
0001E94A D4F2 0000                  		adda.w	(a2,d0.w),a2
0001E94E 3C1A                       		move.w	(a2)+,d6
0001E950 6100 0000                  		bsr.w	Debug_Control
0001E954 4EF9 0000 E0D6             		jmp	DisplaySprite
0001E95A                            
0001E95A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E95A                            
0001E95A                            
0001E95A                            Debug_Control:
0001E95A 7800                       		moveq	#0,d4
0001E95C 323C 0001                  		move.w	#1,d1
0001E960 1838 F605                  		move.b	($FFFFF605).w,d4
0001E964 0244 000F                  		andi.w	#$F,d4		; is up/down/left/right	pressed?
0001E968 6600                       		bne.s	loc_1D018	; if yes, branch
0001E96A 1038 F604                  		move.b	($FFFFF604).w,d0
0001E96E 0240 000F                  		andi.w	#$F,d0
0001E972 6600                       		bne.s	loc_1D000
0001E974 11FC 000C FE0A             		move.b	#$C,($FFFFFE0A).w
0001E97A 11FC 000F FE0B             		move.b	#$F,($FFFFFE0B).w
0001E980 6000 0000                  		bra.w	Debug_BackItem
0001E984                            ; ===========================================================================
0001E984                            
0001E984                            loc_1D000:
0001E984 5338 FE0A                  		subq.b	#1,($FFFFFE0A).w
0001E988 6600                       		bne.s	loc_1D01C
0001E98A 11FC 0001 FE0A             		move.b	#1,($FFFFFE0A).w
0001E990 5238 FE0B                  		addq.b	#1,($FFFFFE0B).w
0001E994 6600                       		bne.s	loc_1D018
0001E996 11FC 00FF FE0B             		move.b	#-1,($FFFFFE0B).w
0001E99C                            
0001E99C                            loc_1D018:
0001E99C 1838 F604                  		move.b	($FFFFF604).w,d4
0001E9A0                            
0001E9A0                            loc_1D01C:
0001E9A0 7200                       		moveq	#0,d1
0001E9A2 1238 FE0B                  		move.b	($FFFFFE0B).w,d1
0001E9A6 5241                       		addq.w	#1,d1
0001E9A8 4841                       		swap	d1
0001E9AA E881                       		asr.l	#4,d1
0001E9AC 2428 000C                  		move.l	$C(a0),d2
0001E9B0 2628 0008                  		move.l	8(a0),d3
0001E9B4 0804 0000                  		btst	#0,d4		; is up	being pressed?
0001E9B8 6700                       		beq.s	loc_1D03C	; if not, branch
0001E9BA 9481                       		sub.l	d1,d2
0001E9BC 6400                       		bcc.s	loc_1D03C
0001E9BE 7400                       		moveq	#0,d2
0001E9C0                            
0001E9C0                            loc_1D03C:
0001E9C0 0804 0001                  		btst	#1,d4		; is down being	pressed?
0001E9C4 6700                       		beq.s	loc_1D052	; if not, branch
0001E9C6 D481                       		add.l	d1,d2
0001E9C8 0C82 07FF 0000             		cmpi.l	#$7FF0000,d2
0001E9CE 6500                       		bcs.s	loc_1D052
0001E9D0 243C 07FF 0000             		move.l	#$7FF0000,d2
0001E9D6                            
0001E9D6                            loc_1D052:
0001E9D6 0804 0002                  		btst	#2,d4
0001E9DA 6700                       		beq.s	loc_1D05E
0001E9DC 9681                       		sub.l	d1,d3
0001E9DE 6400                       		bcc.s	loc_1D05E
0001E9E0 7600                       		moveq	#0,d3
0001E9E2                            
0001E9E2                            loc_1D05E:
0001E9E2 0804 0003                  		btst	#3,d4
0001E9E6 6700                       		beq.s	loc_1D066
0001E9E8 D681                       		add.l	d1,d3
0001E9EA                            
0001E9EA                            loc_1D066:
0001E9EA 2142 000C                  		move.l	d2,$C(a0)
0001E9EE 2143 0008                  		move.l	d3,8(a0)
0001E9F2                            
0001E9F2                            Debug_BackItem:
0001E9F2 0838 0006 F604             		btst	#6,($FFFFF604).w ; is button A pressed?
0001E9F8 6700                       		beq.s	Debug_MakeItem	; if not, branch
0001E9FA 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
0001EA00 6700                       		beq.s	Debug_NextItem	; if not, branch
0001EA02 5338 FE06                  		subq.b	#1,($FFFFFE06).w ; go back 1 item
0001EA06 6400                       		bcc.s	Debug_NoLoop
0001EA08 DD38 FE06                  		add.b	d6,($FFFFFE06).w
0001EA0C 6000                       		bra.s	Debug_NoLoop
0001EA0E                            ; ===========================================================================
0001EA0E                            
0001EA0E                            Debug_NextItem:
0001EA0E 0838 0006 F605             		btst	#6,($FFFFF605).w ; is button A pressed?
0001EA14 6700                       		beq.s	Debug_MakeItem	; if not, branch
0001EA16 5238 FE06                  		addq.b	#1,($FFFFFE06).w ; go forwards 1 item
0001EA1A BC38 FE06                  		cmp.b	($FFFFFE06).w,d6
0001EA1E 6200                       		bhi.s	Debug_NoLoop
0001EA20 11FC 0000 FE06             		move.b	#0,($FFFFFE06).w ; loop	back to	first item
0001EA26                            
0001EA26                            Debug_NoLoop:
0001EA26 6000 0000                  		bra.w	Debug_ShowItem
0001EA2A                            ; ===========================================================================
0001EA2A                            
0001EA2A                            Debug_MakeItem:
0001EA2A 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
0001EA30 6700                       		beq.s	Debug_Exit	; if not, branch
0001EA32 4EB9 0000 E56C             		jsr	SingleObjLoad
0001EA38 6600                       		bne.s	Debug_Exit
0001EA3A 3368 0008 0008             		move.w	8(a0),8(a1)
0001EA40 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001EA46 12A8 0004                  		move.b	4(a0),0(a1)	; create object
0001EA4A 1368 0001 0001             		move.b	1(a0),1(a1)
0001EA50 1368 0001 0022             		move.b	1(a0),$22(a1)
0001EA56 0229 007F 0022             		andi.b	#$7F,$22(a1)
0001EA5C 7000                       		moveq	#0,d0
0001EA5E 1038 FE06                  		move.b	($FFFFFE06).w,d0
0001EA62 E748                       		lsl.w	#3,d0
0001EA64 1372 0004 0028             		move.b	4(a2,d0.w),$28(a1)
0001EA6A 4E75                       		rts	
0001EA6C                            ; ===========================================================================
0001EA6C                            
0001EA6C                            Debug_Exit:
0001EA6C 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button B pressed?
0001EA72 6700                       		beq.s	Debug_DoNothing	; if not, branch
0001EA74 7000                       		moveq	#0,d0
0001EA76 31C0 FE08                  		move.w	d0,($FFFFFE08).w ; deactivate debug mode
0001EA7A 21FC 0000 0000 D004        		move.l	#Map_Sonic,($FFFFD004).w
0001EA82 31FC 0780 D002             		move.w	#$780,($FFFFD002).w
0001EA88 11C0 D01C                  		move.b	d0,($FFFFD01C).w
0001EA8C 3140 000A                  		move.w	d0,$A(a0)
0001EA90 3140 000E                  		move.w	d0,$E(a0)
0001EA94 31F8 FEF0 F72C             		move.w	($FFFFFEF0).w,($FFFFF72C).w ; restore level boundaries
0001EA9A 31F8 FEF2 F726             		move.w	($FFFFFEF2).w,($FFFFF726).w
0001EAA0 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; are you in	the special stage?
0001EAA6 6600                       		bne.s	Debug_DoNothing	; if not, branch
0001EAA8 4278 F780                  		clr.w	($FFFFF780).w
0001EAAC 31FC 0040 F782             		move.w	#$40,($FFFFF782).w ; set new level rotation speed
0001EAB2 21FC 0000 0000 D004        		move.l	#Map_Sonic,($FFFFD004).w
0001EABA 31FC 0780 D002             		move.w	#$780,($FFFFD002).w
0001EAC0 11FC 0002 D01C             		move.b	#2,($FFFFD01C).w
0001EAC6 08F8 0002 D022             		bset	#2,($FFFFD022).w
0001EACC 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001EAD2                            
0001EAD2                            Debug_DoNothing:
0001EAD2 4E75                       		rts	
0001EAD4                            ; End of function Debug_Control
0001EAD4                            
0001EAD4                            
0001EAD4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EAD4                            
0001EAD4                            
0001EAD4                            Debug_ShowItem:				; XREF: Debug_Main
0001EAD4 7000                       		moveq	#0,d0
0001EAD6 1038 FE06                  		move.b	($FFFFFE06).w,d0
0001EADA E748                       		lsl.w	#3,d0
0001EADC 2172 0000 0004             		move.l	(a2,d0.w),4(a0)	; load mappings	for item
0001EAE2 3172 0006 0002             		move.w	6(a2,d0.w),2(a0) ; load	VRAM setting for item
0001EAE8 1172 0005 001A             		move.b	5(a2,d0.w),$1A(a0) ; load frame	number for item
0001EAEE 4E75                       		rts	
0001EAF0                            ; End of function Debug_ShowItem
0001EAF0                            
0001EAF0                            ; ===========================================================================
0001EAF0                            ; ---------------------------------------------------------------------------
0001EAF0                            ; Debug	list pointers
0001EAF0                            ; ---------------------------------------------------------------------------
0001EAF0                            DebugList:
0001EAF0                            	include "_inc\Debug list pointers.asm"
0001EAF0                            ; ---------------------------------------------------------------------------
0001EAF0                            ; Debug	list pointers
0001EAF0                            ; ---------------------------------------------------------------------------
0001EAF0 0000                       	dc.w Debug_GHZ-DebugList
0001EAF2 0000                       	dc.w Debug_LZ-DebugList
0001EAF4 0000                       	dc.w Debug_MZ-DebugList
0001EAF6 0000                       	dc.w Debug_SLZ-DebugList
0001EAF8 0000                       	dc.w Debug_SYZ-DebugList
0001EAFA 0000                       	dc.w Debug_SBZ-DebugList
0001EAFC 0000                       	dc.w Debug_Ending-DebugList
0001EAFC 0000                       	dc.w Debug_Ending-DebugList
0001EAFE                            
0001EAFE                            ; ---------------------------------------------------------------------------
0001EAFE                            ; Debug	list - Green Hill
0001EAFE                            ; ---------------------------------------------------------------------------
0001EAFE                            Debug_GHZ:
0001EAFE                            	include "_inc\Debug list - GHZ.asm"
0001EAFE                            ; ---------------------------------------------------------------------------
0001EAFE                            ; Debug	list - Green Hill
0001EAFE                            ; ---------------------------------------------------------------------------
0001EAFE 0010                       	dc.w $10			; number of items in list
0001EB00 2500 AA30                  	dc.l Map_obj25+$25000000	; mappings pointer, object type * 10^6
0001EB04 0000 27B2                  	dc.b 0,	0, $27,	$B2		; subtype, frame, VRAM setting (2 bytes)
0001EB08 2600 B060                  	dc.l Map_obj26+$26000000
0001EB0C 0000 0680                  	dc.b 0,	0, 6, $80
0001EB10 1F00 A1B8                  	dc.l Map_obj1F+$1F000000
0001EB14 0000 0400                  	dc.b 0,	0, 4, 0
0001EB18 2200 A498                  	dc.l Map_obj22+$22000000
0001EB1C 0000 0444                  	dc.b 0,	0, 4, $44
0001EB20 2B00 B6A6                  	dc.l Map_obj2B+$2B000000
0001EB24 0000 047B                  	dc.b 0,	0, 4, $7B
0001EB28 3600 DAB6                  	dc.l Map_obj36+$36000000
0001EB2C 0000 051B                  	dc.b 0,	0, 5, $1B
0001EB30 1800 8BB6                  	dc.l Map_obj18+$18000000
0001EB34 0000 4000                  	dc.b 0,	0, $40,	0
0001EB38 3B00 DBDC                  	dc.l Map_obj3B+$3B000000
0001EB3C 0000 63D0                  	dc.b 0,	0, $63,	$D0
0001EB40 4001 028A                  	dc.l Map_obj40+$40000000
0001EB44 0000 04F0                  	dc.b 0,	0, 4, $F0
0001EB48 4100 E7FE                  	dc.l Map_obj41+$41000000
0001EB4C 0000 0523                  	dc.b 0,	0, 5, $23
0001EB50 4200 EA24                  	dc.l Map_obj42+$42000000
0001EB54 0000 249B                  	dc.b 0,	0, $24,	$9B
0001EB58 4400 ED32                  	dc.l Map_obj44+$44000000
0001EB5C 0000 434C                  	dc.b 0,	0, $43,	$4C
0001EB60 1900 8C24                  	dc.l Map_obj48+$19000000
0001EB64 0000 43AA                  	dc.b 0,	0, $43,	$AA
0001EB68 7901 8A86                  	dc.l Map_obj79+$79000000
0001EB6C 0100 07A0                  	dc.b 1,	0, 7, $A0
0001EB70 4B00 AA70                  	dc.l Map_obj4B+$4B000000
0001EB74 0000 2400                  	dc.b 0,	0, $24,	0
0001EB78 7D01 8BD6                  	dc.l Map_obj7D+$7D000000
0001EB7C 0101 84B6                  	dc.b 1,	1, $84,	$B6
0001EB80                            	even
0001EB80                            	even
0001EB80                            
0001EB80                            ; ---------------------------------------------------------------------------
0001EB80                            ; Debug	list - Labyrinth
0001EB80                            ; ---------------------------------------------------------------------------
0001EB80                            Debug_LZ:
0001EB80                            	include "_inc\Debug list - LZ.asm"
0001EB80                            ; ---------------------------------------------------------------------------
0001EB80                            ; Debug	list - Labyrinth
0001EB80                            ; ---------------------------------------------------------------------------
0001EB80 0019                       	dc.w $19
0001EB82 2500 AA30                  	dc.l Map_obj25+$25000000
0001EB86 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001EB8A 2600 B060                  	dc.l Map_obj26+$26000000
0001EB8E 0000 0680                  	dc.b 0,	0, 6, $80
0001EB92 4100 E7FE                  	dc.l Map_obj41+$41000000
0001EB96 0000 0523                  	dc.b 0,	0, 5, $23
0001EB9A 2C00 B74C                  	dc.l Map_obj2C+$2C000000
0001EB9E 0800 2486                  	dc.b 8,	0, $24,	$86
0001EBA2 2D00 B938                  	dc.l Map_obj2D+$2D000000
0001EBA6 0002 84A6                  	dc.b 0,	2, $84,	$A6
0001EBAA 1601 2A7E                  	dc.l Map_obj16+$16000000
0001EBAE 0000 03CC                  	dc.b 0,	0, 3, $CC
0001EBB2 1601 2A7E                  	dc.l Map_obj16+$16000000
0001EBB6 0203 03CC                  	dc.b 2,	3, 3, $CC
0001EBBA 3300 CDB6                  	dc.l Map_obj33+$33000000
0001EBBE 0000 43DE                  	dc.b 0,	0, $43,	$DE
0001EBC2 3200 C976                  	dc.l Map_obj32+$32000000
0001EBC6 0000 0513                  	dc.b 0,	0, 5, $13
0001EBCA 3600 DAB6                  	dc.l Map_obj36+$36000000
0001EBCE 0000 051B                  	dc.b 0,	0, 5, $1B
0001EBD2 5201 0BA0                  	dc.l Map_obj52a+$52000000
0001EBD6 0400 43BC                  	dc.b 4,	0, $43,	$BC
0001EBDA 6101 2CA6                  	dc.l Map_obj61+$61000000
0001EBDE 0100 43E6                  	dc.b 1,	0, $43,	$E6
0001EBE2 6101 2CA6                  	dc.l Map_obj61+$61000000
0001EBE6 1301 43E6                  	dc.b $13, 1, $43, $E6
0001EBEA 6101 2CA6                  	dc.l Map_obj61+$61000000
0001EBEE 0500 43E6                  	dc.b 5,	0, $43,	$E6
0001EBF2 6201 2DFA                  	dc.l Map_obj62+$62000000
0001EBF6 0000 443E                  	dc.b 0,	0, $44,	$3E
0001EBFA 6101 2CA6                  	dc.l Map_obj61+$61000000
0001EBFE 2702 43E6                  	dc.b $27, 2, $43, $E6
0001EC02 6101 2CA6                  	dc.l Map_obj61+$61000000
0001EC06 3003 43E6                  	dc.b $30, 3, $43, $E6
0001EC0A 6301 315C                  	dc.l Map_obj63+$63000000
0001EC0E 7F00 03F6                  	dc.b $7F, 0, 3,	$F6
0001EC12 6001 29C8                  	dc.l Map_obj60+$60000000
0001EC16 0000 0467                  	dc.b 0,	0, 4, $67
0001EC1A 6401 34A2                  	dc.l Map_obj64+$64000000
0001EC1E 8413 8348                  	dc.b $84, $13, $83, $48
0001EC22 6501 362A                  	dc.l Map_obj65+$65000000
0001EC26 0202 C259                  	dc.b 2,	2, $C2,	$59
0001EC2A 6501 362A                  	dc.l Map_obj65+$65000000
0001EC2E 0909 C259                  	dc.b 9,	9, $C2,	$59
0001EC32 0B01 1E18                  	dc.l Map_obj0B+$B000000
0001EC36 0000 43DE                  	dc.b 0,	0, $43,	$DE
0001EC3A 0C01 1EE8                  	dc.l Map_obj0C+$C000000
0001EC3E 0200 4328                  	dc.b 2,	0, $43,	$28
0001EC42 7901 8A86                  	dc.l Map_obj79+$79000000
0001EC46 0100 07A0                  	dc.b 1,	0, 7, $A0
0001EC4A                            	even
0001EC4A                            	even
0001EC4A                            
0001EC4A                            ; ---------------------------------------------------------------------------
0001EC4A                            ; Debug	list - Marble
0001EC4A                            ; ---------------------------------------------------------------------------
0001EC4A                            Debug_MZ:
0001EC4A                            	include "_inc\Debug list - MZ.asm"
0001EC4A                            ; ---------------------------------------------------------------------------
0001EC4A                            ; Debug	list - Marble
0001EC4A                            ; ---------------------------------------------------------------------------
0001EC4A 0012                       	dc.w $12
0001EC4C 2500 AA30                  	dc.l Map_obj25+$25000000
0001EC50 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001EC54 2600 B060                  	dc.l Map_obj26+$26000000
0001EC58 0000 0680                  	dc.b 0,	0, 6, $80
0001EC5C 2200 A498                  	dc.l Map_obj22+$22000000
0001EC60 0000 0444                  	dc.b 0,	0, 4, $44
0001EC64 3600 DAB6                  	dc.l Map_obj36+$36000000
0001EC68 0000 051B                  	dc.b 0,	0, 5, $1B
0001EC6C 4100 E7FE                  	dc.l Map_obj41+$41000000
0001EC70 0000 0523                  	dc.b 0,	0, 5, $23
0001EC74 1300 BE46                  	dc.l Map_obj14+$13000000
0001EC78 0000 0345                  	dc.b 0,	0, 3, $45
0001EC7C 4600 F3E4                  	dc.l Map_obj46+$46000000
0001EC80 0000 4000                  	dc.b 0,	0, $40,	0
0001EC84 4C00 FD36                  	dc.l Map_obj4C+$4C000000
0001EC88 0000 63A8                  	dc.b 0,	0, $63,	$A8
0001EC8C 4E01 001A                  	dc.l Map_obj4E+$4E000000
0001EC90 0000 63A8                  	dc.b 0,	0, $63,	$A8
0001EC94 3300 CDB6                  	dc.l Map_obj33+$33000000
0001EC98 0000 42B8                  	dc.b 0,	0, $42,	$B8
0001EC9C 5001 0418                  	dc.l Map_obj50+$50000000
0001ECA0 0000 247B                  	dc.b 0,	0, $24,	$7B
0001ECA4 5101 08D4                  	dc.l Map_obj51+$51000000
0001ECA8 0000 42B8                  	dc.b 0,	0, $42,	$B8
0001ECAC 5201 0B4A                  	dc.l Map_obj52+$52000000
0001ECB0 0000 02B8                  	dc.b 0,	0, 2, $B8
0001ECB4 5300 91BC                  	dc.l Map_obj53+$53000000
0001ECB8 0000 62B8                  	dc.b 0,	0, $62,	$B8
0001ECBC 5400 FCFC                  	dc.l Map_obj54+$54000000
0001ECC0 0000 8680                  	dc.b 0,	0, $86,	$80
0001ECC4 5501 0D3E                  	dc.l Map_obj55+$55000000
0001ECC8 0000 04B8                  	dc.b 0,	0, 4, $B8
0001ECCC 7801 86FE                  	dc.l Map_obj78+$78000000
0001ECD0 0000 24FF                  	dc.b 0,	0, $24,	$FF
0001ECD4 7901 8A86                  	dc.l Map_obj79+$79000000
0001ECD8 0100 07A0                  	dc.b 1,	0, 7, $A0
0001ECDC                            	even
0001ECDC                            	even
0001ECDC                            
0001ECDC                            ; ---------------------------------------------------------------------------
0001ECDC                            ; Debug	list - Star Light
0001ECDC                            ; ---------------------------------------------------------------------------
0001ECDC                            Debug_SLZ:
0001ECDC                            	include "_inc\Debug list - SLZ.asm"
0001ECDC                            ; ---------------------------------------------------------------------------
0001ECDC                            ; Debug	list - Star Light
0001ECDC                            ; ---------------------------------------------------------------------------
0001ECDC 000F                       	dc.w $F
0001ECDE 2500 AA30                  	dc.l Map_obj25+$25000000
0001ECE2 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001ECE6 2600 B060                  	dc.l Map_obj26+$26000000
0001ECEA 0000 0680                  	dc.b 0,	0, 6, $80
0001ECEE 5901 1840                  	dc.l Map_obj59+$59000000
0001ECF2 0000 4000                  	dc.b 0,	0, $40,	0
0001ECF6 5300 91BC                  	dc.l Map_obj53+$53000000
0001ECFA 0002 44E0                  	dc.b 0,	2, $44,	$E0
0001ECFE 1800 8C14                  	dc.l Map_obj18b+$18000000
0001ED02 0000 4000                  	dc.b 0,	0, $40,	0
0001ED06 5A01 197A                  	dc.l Map_obj5A+$5A000000
0001ED0A 0000 4000                  	dc.b 0,	0, $40,	0
0001ED0E 5B01 1B32                  	dc.l Map_obj5B+$5B000000
0001ED12 0000 4000                  	dc.b 0,	0, $40,	0
0001ED16 5D01 2102                  	dc.l Map_obj5D+$5D000000
0001ED1A 0000 43A0                  	dc.b 0,	0, $43,	$A0
0001ED1E 5E01 2494                  	dc.l Map_obj5E+$5E000000
0001ED22 0000 0374                  	dc.b 0,	0, 3, $74
0001ED26 4100 E7FE                  	dc.l Map_obj41+$41000000
0001ED2A 0000 0523                  	dc.b 0,	0, 5, $23
0001ED2E 1300 BE46                  	dc.l Map_obj14+$13000000
0001ED32 0000 0480                  	dc.b 0,	0, 4, $80
0001ED36 1C00 92CC                  	dc.l Map_obj1C+$1C000000
0001ED3A 0000 44D8                  	dc.b 0,	0, $44,	$D8
0001ED3E 5F01 2712                  	dc.l Map_obj5F+$5F000000
0001ED42 0000 0400                  	dc.b 0,	0, 4, 0
0001ED46 6001 29C8                  	dc.l Map_obj60+$60000000
0001ED4A 0000 2429                  	dc.b 0,	0, $24,	$29
0001ED4E 7901 8A86                  	dc.l Map_obj79+$79000000
0001ED52 0100 07A0                  	dc.b 1,	0, 7, $A0
0001ED56                            	even
0001ED56                            	even
0001ED56                            
0001ED56                            ; ---------------------------------------------------------------------------
0001ED56                            ; Debug	list - Spring Yard
0001ED56                            ; ---------------------------------------------------------------------------
0001ED56                            Debug_SYZ:
0001ED56                            	include "_inc\Debug list - SYZ.asm"
0001ED56                            ; ---------------------------------------------------------------------------
0001ED56                            ; Debug	list - Spring Yard
0001ED56                            ; ---------------------------------------------------------------------------
0001ED56 000F                       	dc.w $F
0001ED58 2500 AA30                  	dc.l Map_obj25+$25000000
0001ED5C 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001ED60 2600 B060                  	dc.l Map_obj26+$26000000
0001ED64 0000 0680                  	dc.b 0,	0, 6, $80
0001ED68 3600 DAB6                  	dc.l Map_obj36+$36000000
0001ED6C 0000 051B                  	dc.b 0,	0, 5, $1B
0001ED70 4100 E7FE                  	dc.l Map_obj41+$41000000
0001ED74 0000 0523                  	dc.b 0,	0, 5, $23
0001ED78 4300 EC84                  	dc.l Map_obj43+$43000000
0001ED7C 0000 04B8                  	dc.b 0,	0, 4, $B8
0001ED80 1200 F462                  	dc.l Map_obj12+$12000000
0001ED84 0000 0000                  	dc.b 0,	0, 0, 0
0001ED88 4700 F5DE                  	dc.l Map_obj47+$47000000
0001ED8C 0000 0380                  	dc.b 0,	0, 3, $80
0001ED90 1F00 A1B8                  	dc.l Map_obj1F+$1F000000
0001ED94 0000 0400                  	dc.b 0,	0, 4, 0
0001ED98 2200 A498                  	dc.l Map_obj22+$22000000
0001ED9C 0000 0444                  	dc.b 0,	0, 4, $44
0001EDA0 5001 0418                  	dc.l Map_obj50+$50000000
0001EDA4 0000 247B                  	dc.b 0,	0, $24,	$7B
0001EDA8 1800 8C02                  	dc.l Map_obj18a+$18000000
0001EDAC 0000 4000                  	dc.b 0,	0, $40,	0
0001EDB0 5601 1200                  	dc.l Map_obj56+$56000000
0001EDB4 0000 4000                  	dc.b 0,	0, $40,	0
0001EDB8 3200 C976                  	dc.l Map_obj32+$32000000
0001EDBC 0000 0513                  	dc.b 0,	0, 5, $13
0001EDC0 7801 86FE                  	dc.l Map_obj78+$78000000
0001EDC4 0000 24FF                  	dc.b 0,	0, $24,	$FF
0001EDC8 7901 8A86                  	dc.l Map_obj79+$79000000
0001EDCC 0100 07A0                  	dc.b 1,	0, 7, $A0
0001EDD0                            	even
0001EDD0                            	even
0001EDD0                            
0001EDD0                            ; ---------------------------------------------------------------------------
0001EDD0                            ; Debug	list - Scrap Brain
0001EDD0                            ; ---------------------------------------------------------------------------
0001EDD0                            Debug_SBZ:
0001EDD0                            	include "_inc\Debug list - SBZ.asm"
0001EDD0                            ; ---------------------------------------------------------------------------
0001EDD0                            ; Debug	list - Scrap Brain
0001EDD0                            ; ---------------------------------------------------------------------------
0001EDD0 001D                       	dc.w $1D
0001EDD2 2500 AA30                  	dc.l Map_obj25+$25000000
0001EDD6 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001EDDA 2600 B060                  	dc.l Map_obj26+$26000000
0001EDDE 0000 0680                  	dc.b 0,	0, 6, $80
0001EDE2 5F01 2712                  	dc.l Map_obj5F+$5F000000
0001EDE6 0000 0400                  	dc.b 0,	0, 4, 0
0001EDEA 6001 29C8                  	dc.l Map_obj60+$60000000
0001EDEE 0000 0429                  	dc.b 0,	0, 4, $29
0001EDF2 7801 86FE                  	dc.l Map_obj78+$78000000
0001EDF6 0000 22B0                  	dc.b 0,	0, $22,	$B0
0001EDFA 1501 159C                  	dc.l Map_obj15b+$15000000
0001EDFE 0702 4391                  	dc.b 7,	2, $43,	$91
0001EE02 6701 701E                  	dc.l Map_obj67+$67000000
0001EE06 E000 C344                  	dc.b $E0, 0, $C3, $44
0001EE0A 5201 0B4A                  	dc.l Map_obj52+$52000000
0001EE0E 2802 22C0                  	dc.b $28, 2, $22, $C0
0001EE12 3200 C976                  	dc.l Map_obj32+$32000000
0001EE16 0000 0513                  	dc.b 0,	0, 5, $13
0001EE1A 6901 7278                  	dc.l Map_obj69+$69000000
0001EE1E 0300 4492                  	dc.b 3,	0, $44,	$92
0001EE22 6901 72D2                  	dc.l Map_obj69a+$69000000
0001EE26 8300 04DF                  	dc.b $83, 0, 4,	$DF
0001EE2A 6A01 7530                  	dc.l Map_obj6A+$6A000000
0001EE2E 0200 43B5                  	dc.b 2,	0, $43,	$B5
0001EE32 5300 91BC                  	dc.l Map_obj53+$53000000
0001EE36 0000 43F5                  	dc.b 0,	0, $43,	$F5
0001EE3A 5201 0B4A                  	dc.l Map_obj52+$52000000
0001EE3E 3903 4460                  	dc.b $39, 3, $44, $60
0001EE42 6B01 7900                  	dc.l Map_obj6B+$6B000000
0001EE46 0000 22C0                  	dc.b 0,	0, $22,	$C0
0001EE4A 2A00 9462                  	dc.l Map_obj2A+$2A000000
0001EE4E 0000 42E8                  	dc.b 0,	0, $42,	$E8
0001EE52 6B01 7900                  	dc.l Map_obj6B+$6B000000
0001EE56 1301 22C0                  	dc.b $13, 1, $22, $C0
0001EE5A 6A01 7530                  	dc.l Map_obj6A+$6A000000
0001EE5E 0100 43B5                  	dc.b 1,	0, $43,	$B5
0001EE62 6B01 7900                  	dc.l Map_obj6B+$6B000000
0001EE66 2401 22C0                  	dc.b $24, 1, $22, $C0
0001EE6A 6A01 7530                  	dc.l Map_obj6A+$6A000000
0001EE6E 0402 43B5                  	dc.b 4,	2, $43,	$B5
0001EE72 6B01 7900                  	dc.l Map_obj6B+$6B000000
0001EE76 3401 22C0                  	dc.b $34, 1, $22, $C0
0001EE7A 6C01 7AC2                  	dc.l Map_obj6C+$6C000000
0001EE7E 0000 44C3                  	dc.b 0,	0, $44,	$C3
0001EE82 6D00 F0D4                  	dc.l Map_obj6D+$6D000000
0001EE86 6400 83D9                  	dc.b $64, 0, $83, $D9
0001EE8A 6D00 F0D4                  	dc.l Map_obj6D+$6D000000
0001EE8E 640B 83D9                  	dc.b $64, $B, $83, $D9
0001EE92 6E01 7B78                  	dc.l Map_obj6E+$6E000000
0001EE96 0400 047E                  	dc.b 4,	0, 4, $7E
0001EE9A 7001 7FBE                  	dc.l Map_obj70+$70000000
0001EE9E 0000 42F0                  	dc.b 0,	0, $42,	$F0
0001EEA2 7101 1FA8                  	dc.l Map_obj71+$71000000
0001EEA6 1100 8680                  	dc.b $11, 0, $86, $80
0001EEAA 1E00 98D0                  	dc.l Map_obj1E+$1E000000
0001EEAE 0400 2302                  	dc.b 4,	0, $23,	2
0001EEB2 7901 8A86                  	dc.l Map_obj79+$79000000
0001EEB6 0100 07A0                  	dc.b 1,	0, 7, $A0
0001EEBA                            	even
0001EEBA                            	even
0001EEBA                            
0001EEBA                            ; ---------------------------------------------------------------------------
0001EEBA                            ; Debug	list - ending sequence / special stage
0001EEBA                            ; ---------------------------------------------------------------------------
0001EEBA                            Debug_Ending:
0001EEBA                            	include "_inc\Debug list - Ending and SS.asm"
0001EEBA                            ; ---------------------------------------------------------------------------
0001EEBA                            ; Debug	list - ending sequence / special stage
0001EEBA                            ; ---------------------------------------------------------------------------
0001EEBA 000D                       	dc.w $D
0001EEBC 2500 AA30                  	dc.l Map_obj25+$25000000
0001EEC0 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001EEC4 4700 F5DE                  	dc.l Map_obj47+$47000000
0001EEC8 0000 0380                  	dc.b 0,	0, 3, $80
0001EECC 2800 9EEA                  	dc.l Map_obj28a+$28000000
0001EED0 0A00 05A0                  	dc.b $A, 0, 5, $A0
0001EED4 2800 9EEA                  	dc.l Map_obj28a+$28000000
0001EED8 0B00 05A0                  	dc.b $B, 0, 5, $A0
0001EEDC 2800 9EEA                  	dc.l Map_obj28a+$28000000
0001EEE0 0C00 05A0                  	dc.b $C, 0, 5, $A0
0001EEE4 2800 9ED2                  	dc.l Map_obj28+$28000000
0001EEE8 0D00 0553                  	dc.b $D, 0, 5, $53
0001EEEC 2800 9ED2                  	dc.l Map_obj28+$28000000
0001EEF0 0E00 0553                  	dc.b $E, 0, 5, $53
0001EEF4 2800 9ED2                  	dc.l Map_obj28+$28000000
0001EEF8 0F00 0573                  	dc.b $F, 0, 5, $73
0001EEFC 2800 9ED2                  	dc.l Map_obj28+$28000000
0001EF00 1000 0573                  	dc.b $10, 0, 5,	$73
0001EF04 2800 9EEA                  	dc.l Map_obj28a+$28000000
0001EF08 1100 0585                  	dc.b $11, 0, 5,	$85
0001EF0C 2800 9F02                  	dc.l Map_obj28b+$28000000
0001EF10 1200 0593                  	dc.b $12, 0, 5,	$93
0001EF14 2800 9EEA                  	dc.l Map_obj28a+$28000000
0001EF18 1300 0565                  	dc.b $13, 0, 5,	$65
0001EF1C 2800 9F02                  	dc.l Map_obj28b+$28000000
0001EF20 1400 05B3                  	dc.b $14, 0, 5,	$B3
0001EF24                            	even
0001EF24                            	even
0001EF24                            
0001EF24                            ; ---------------------------------------------------------------------------
0001EF24                            ; Main level load blocks
0001EF24                            ; ---------------------------------------------------------------------------
0001EF24                            MainLoadBlocks:
0001EF24                            	include "_inc\Main level load blocks.asm"
0001EF24                            ; ---------------------------------------------------------------------------
0001EF24                            ; Main level load blocks
0001EF24                            ;
0001EF24                            ; ===FORMAT===
0001EF24                            ; level	patterns + (1st	PLC num	* 10^6)
0001EF24                            ; 16x16	mappings + (2nd	PLC num	* 10^6)
0001EF24                            ; 256x256 mappings
0001EF24                            ; blank, music (unused), pal index (unused), pal index
0001EF24                            ; ---------------------------------------------------------------------------
0001EF24 0000 0000                  	dc.l Nem_GHZ+$4000000
0001EF28 0000 0000                  	dc.l Blk16_GHZ+$5000000
0001EF2C 0000 0000                  	dc.l Blk256_GHZ
0001EF30 0081 0404                  	dc.b 0,	$81, 4,	4
0001EF34 0000 0000                  	dc.l Nem_LZ+$6000000
0001EF38 0000 0000                  	dc.l Blk16_LZ+$7000000
0001EF3C 0000 0000                  	dc.l Blk256_LZ
0001EF40 0082 0505                  	dc.b 0,	$82, 5,	5
0001EF44 0000 0000                  	dc.l Nem_MZ+$8000000
0001EF48 0000 0000                  	dc.l Blk16_MZ+$9000000
0001EF4C 0000 0000                  	dc.l Blk256_MZ
0001EF50 0083 0606                  	dc.b 0,	$83, 6,	6
0001EF54 0000 0000                  	dc.l Nem_SLZ+$A000000
0001EF58 0000 0000                  	dc.l Blk16_SLZ+$B000000
0001EF5C 0000 0000                  	dc.l Blk256_SLZ
0001EF60 0084 0707                  	dc.b 0,	$84, 7,	7
0001EF64 0000 0000                  	dc.l Nem_SYZ+$C000000
0001EF68 0000 0000                  	dc.l Blk16_SYZ+$D000000
0001EF6C 0000 0000                  	dc.l Blk256_SYZ
0001EF70 0085 0808                  	dc.b 0,	$85, 8,	8
0001EF74 0000 0000                  	dc.l Nem_SBZ+$E000000
0001EF78 0000 0000                  	dc.l Blk16_SBZ+$F000000
0001EF7C 0000 0000                  	dc.l Blk256_SBZ
0001EF80 0086 0909                  	dc.b 0,	$86, 9,	9
0001EF84 0000 0000                  	dc.l Nem_GHZ_2nd	; main load block for ending
0001EF88 0000 0000                  	dc.l Blk16_GHZ
0001EF8C 0000 0000                  	dc.l Blk256_GHZ
0001EF90 0086 1313                  	dc.b 0,	$86, $13, $13
0001EF94                            	even
0001EF94                            	even
0001EF94                            
0001EF94                            ; ---------------------------------------------------------------------------
0001EF94                            ; Pattern load cues
0001EF94                            ; ---------------------------------------------------------------------------
0001EF94                            ArtLoadCues:
0001EF94                            	include "_inc\Pattern load cues.asm"
0001EF94                            ; ---------------------------------------------------------------------------
0001EF94                            ; Pattern load cues - index
0001EF94                            ; ---------------------------------------------------------------------------
0001EF94 0000 0000                  	dc.w PLC_Main-ArtLoadCues, PLC_Main2-ArtLoadCues
0001EF98 0000 0000                  	dc.w PLC_Explode-ArtLoadCues, PLC_GameOver-ArtLoadCues
0001EF9C 0000 0000                  	dc.w PLC_GHZ-ArtLoadCues, PLC_GHZ2-ArtLoadCues
0001EFA0 0000 0000                  	dc.w PLC_LZ-ArtLoadCues, PLC_LZ2-ArtLoadCues
0001EFA4 0000 0000                  	dc.w PLC_MZ-ArtLoadCues, PLC_MZ2-ArtLoadCues
0001EFA8 0000 0000                  	dc.w PLC_SLZ-ArtLoadCues, PLC_SLZ2-ArtLoadCues
0001EFAC 0000 0000                  	dc.w PLC_SYZ-ArtLoadCues, PLC_SYZ2-ArtLoadCues
0001EFB0 0000 0000                  	dc.w PLC_SBZ-ArtLoadCues, PLC_SBZ2-ArtLoadCues
0001EFB4 0000 0000                  	dc.w PLC_TitleCard-ArtLoadCues,	PLC_Boss-ArtLoadCues
0001EFB8 0000 0000                  	dc.w PLC_Signpost-ArtLoadCues, PLC_Warp-ArtLoadCues
0001EFBC 0000 0000                  	dc.w PLC_SpeStage-ArtLoadCues, PLC_GHZAnimals-ArtLoadCues
0001EFC0 0000 0000                  	dc.w PLC_LZAnimals-ArtLoadCues,	PLC_MZAnimals-ArtLoadCues
0001EFC4 0000 0000                  	dc.w PLC_SLZAnimals-ArtLoadCues, PLC_SYZAnimals-ArtLoadCues
0001EFC8 0000 0000                  	dc.w PLC_SBZAnimals-ArtLoadCues, PLC_SpeStResult-ArtLoadCues
0001EFCC 0000 0000                  	dc.w PLC_Ending-ArtLoadCues, PLC_TryAgain-ArtLoadCues
0001EFD0 0000 0000                  	dc.w PLC_EggmanSBZ2-ArtLoadCues, PLC_FZBoss-ArtLoadCues
0001EFD4                            ; ---------------------------------------------------------------------------
0001EFD4                            ; Pattern load cues - standard block 1
0001EFD4                            ; ---------------------------------------------------------------------------
0001EFD4 0004                       PLC_Main:	dc.w 4
0001EFD6 0000 0000                  		dc.l Nem_Lamp		; lamppost
0001EFDA D800                       		dc.w $D800
0001EFDC 0000 0000                  		dc.l Nem_Hud		; HUD
0001EFE0 D940                       		dc.w $D940
0001EFE2 0000 0000                  		dc.l Nem_Lives		; lives	counter
0001EFE6 FA80                       		dc.w $FA80
0001EFE8 0000 0000                  		dc.l Nem_Ring		; rings
0001EFEC F640                       		dc.w $F640
0001EFEE 0000 0000                  		dc.l Nem_Points		; points from enemy
0001EFF2 F2E0                       		dc.w $F2E0
0001EFF4                            ; ---------------------------------------------------------------------------
0001EFF4                            ; Pattern load cues - standard block 2
0001EFF4                            ; ---------------------------------------------------------------------------
0001EFF4 0002                       PLC_Main2:	dc.w 2
0001EFF6 0000 0000                  		dc.l Nem_Monitors	; monitors
0001EFFA D000                       		dc.w $D000
0001EFFC 0000 0000                  		dc.l Nem_Shield		; shield
0001F000 A820                       		dc.w $A820
0001F002 0000 0000                  		dc.l Nem_Stars		; invincibility	stars
0001F006 AB80                       		dc.w $AB80
0001F008                            ; ---------------------------------------------------------------------------
0001F008                            ; Pattern load cues - explosion
0001F008                            ; ---------------------------------------------------------------------------
0001F008 0000                       PLC_Explode:	dc.w 0
0001F00A 0000 0000                  		dc.l Nem_Explode	; explosion
0001F00E B400                       		dc.w $B400
0001F010                            ; ---------------------------------------------------------------------------
0001F010                            ; Pattern load cues - game/time	over
0001F010                            ; ---------------------------------------------------------------------------
0001F010 0000                       PLC_GameOver:	dc.w 0
0001F012 0000 0000                  		dc.l Nem_GameOver	; game/time over
0001F016 ABC0                       		dc.w $ABC0
0001F018                            ; ---------------------------------------------------------------------------
0001F018                            ; Pattern load cues - Green Hill
0001F018                            ; ---------------------------------------------------------------------------
0001F018 000A                       PLC_GHZ:	dc.w $A
0001F01A 0000 0000                  		dc.l Nem_GHZ	; GHZ main patterns
0001F01E 0000                       		dc.w 0
0001F020 0000 0000                  		dc.l Nem_Stalk		; flower stalk
0001F024 6B00                       		dc.w $6B00
0001F026 0000 0000                  		dc.l Nem_PplRock	; purple rock
0001F02A 7A00                       		dc.w $7A00
0001F02C 0000 0000                  		dc.l Nem_Crabmeat	; crabmeat enemy
0001F030 8000                       		dc.w $8000
0001F032 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001F036 8880                       		dc.w $8880
0001F038 0000 0000                  		dc.l Nem_Chopper	; chopper enemy
0001F03C 8F60                       		dc.w $8F60
0001F03E 0000 0000                  		dc.l Nem_Newtron	; newtron enemy
0001F042 9360                       		dc.w $9360
0001F044 0000 0000                  		dc.l Nem_Motobug	; motobug enemy
0001F048 9E00                       		dc.w $9E00
0001F04A 0000 0000                  		dc.l Nem_Spikes		; spikes
0001F04E A360                       		dc.w $A360
0001F050 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001F054 A460                       		dc.w $A460
0001F056 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001F05A A660                       		dc.w $A660
0001F05C 0000 0000                  		dc.l ArtNem_DignlSprng	; diagonal spring
0001F060 A860                       		dc.W $A860
0001F062 0005                       PLC_GHZ2:	dc.w 5
0001F064 0000 0000                  		dc.l Nem_Swing		; swinging platform
0001F068 7000                       		dc.w $7000
0001F06A 0000 0000                  		dc.l Nem_Bridge		; bridge
0001F06E 71C0                       		dc.w $71C0
0001F070 0000 0000                  		dc.l Nem_SpikePole	; spiked pole
0001F074 7300                       		dc.w $7300
0001F076 0000 0000                  		dc.l Nem_Ball		; giant	ball
0001F07A 7540                       		dc.w $7540
0001F07C 0000 0000                  		dc.l Nem_GhzWall1	; breakable wall
0001F080 A1E0                       		dc.w $A1E0
0001F082 0000 0000                  		dc.l Nem_GhzWall2	; normal wall
0001F086 6980                       		dc.w $6980
0001F088                            ; ---------------------------------------------------------------------------
0001F088                            ; Pattern load cues - Labyrinth
0001F088                            ; ---------------------------------------------------------------------------
0001F088 000B                       PLC_LZ:		dc.w $B
0001F08A 0000 0000                  		dc.l Nem_LZ		; LZ main patterns
0001F08E 0000                       		dc.w 0
0001F090 0000 0000                  		dc.l Nem_LzBlock1	; block
0001F094 3C00                       		dc.w $3C00
0001F096 0000 0000                  		dc.l Nem_LzBlock2	; blocks
0001F09A 3E00                       		dc.w $3E00
0001F09C 0000 0000                  		dc.l Nem_Splash		; waterfalls and splash
0001F0A0 4B20                       		dc.w $4B20
0001F0A2 0000 0000                  		dc.l Nem_Water		; water	surface
0001F0A6 6000                       		dc.w $6000
0001F0A8 0000 0000                  		dc.l Nem_LzSpikeBall	; spiked ball
0001F0AC 6200                       		dc.w $6200
0001F0AE 0000 0000                  		dc.l Nem_FlapDoor	; flapping door
0001F0B2 6500                       		dc.w $6500
0001F0B4 0000 0000                  		dc.l Nem_Bubbles	; bubbles and numbers
0001F0B8 6900                       		dc.w $6900
0001F0BA 0000 0000                  		dc.l Nem_LzBlock3	; block
0001F0BE 7780                       		dc.w $7780
0001F0C0 0000 0000                  		dc.l Nem_LzDoor1	; vertical door
0001F0C4 7880                       		dc.w $7880
0001F0C6 0000 0000                  		dc.l Nem_Harpoon	; harpoon
0001F0CA 7980                       		dc.w $7980
0001F0CC 0000 0000                  		dc.l Nem_Burrobot	; burrobot enemy
0001F0D0 94C0                       		dc.w $94C0
0001F0D2 000C                       PLC_LZ2:	dc.w $C
0001F0D4 0000 0000                  		dc.l Nem_LzPole		; pole that breaks
0001F0D8 7BC0                       		dc.w $7BC0
0001F0DA 0000 0000                  		dc.l Nem_LzDoor2	; large	horizontal door
0001F0DE 7CC0                       		dc.w $7CC0
0001F0E0 0000 0000                  		dc.l Nem_LzWheel	; wheel
0001F0E4 7EC0                       		dc.w $7EC0
0001F0E6 0000 0000                  		dc.l Nem_Gargoyle	; gargoyle head
0001F0EA 5D20                       		dc.w $5D20
0001F0EC 0000 0000                  		dc.l Nem_LzSonic	; Sonic	holding	his breath
0001F0F0 8800                       		dc.w $8800
0001F0F2 0000 0000                  		dc.l Nem_LzPlatfm	; rising platform
0001F0F6 89E0                       		dc.w $89E0
0001F0F8 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001F0FC 8CE0                       		dc.w $8CE0
0001F0FE 0000 0000                  		dc.l Nem_Jaws		; jaws enemy
0001F102 90C0                       		dc.w $90C0
0001F104 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001F108 A1E0                       		dc.w $A1E0
0001F10A 0000 0000                  		dc.l Nem_Cork		; cork block
0001F10E A000                       		dc.w $A000
0001F110 0000 0000                  		dc.l Nem_Spikes		; spikes
0001F114 A360                       		dc.w $A360
0001F116 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001F11A A460                       		dc.w $A460
0001F11C 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001F120 A660                       		dc.w $A660
0001F122 0000 0000                  		dc.l ArtNem_DignlSprng	; diagonal spring
0001F126 A860                       		dc.W $A860
0001F128                            ; ---------------------------------------------------------------------------
0001F128                            ; Pattern load cues - Marble
0001F128                            ; ---------------------------------------------------------------------------
0001F128 0009                       PLC_MZ:		dc.w 9
0001F12A 0000 0000                  		dc.l Nem_MZ		; MZ main patterns
0001F12E 0000                       		dc.w 0
0001F130 0000 0000                  		dc.l Nem_MzMetal	; metal	blocks
0001F134 6000                       		dc.w $6000
0001F136 0000 0000                  		dc.l Nem_MzFire		; fireballs
0001F13A 68A0                       		dc.w $68A0
0001F13C 0000 0000                  		dc.l Nem_Swing		; swinging platform
0001F140 7000                       		dc.w $7000
0001F142 0000 0000                  		dc.l Nem_MzGlass	; green	glassy block
0001F146 71C0                       		dc.w $71C0
0001F148 0000 0000                  		dc.l Nem_Lava		; lava
0001F14C 7500                       		dc.w $7500
0001F14E 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001F152 8880                       		dc.w $8880
0001F154 0000 0000                  		dc.l Nem_Yadrin		; yadrin enemy
0001F158 8F60                       		dc.w $8F60
0001F15A 0000 0000                  		dc.l Nem_Basaran	; basaran enemy
0001F15E 9700                       		dc.w $9700
0001F160 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001F164 9FE0                       		dc.w $9FE0
0001F166 0004                       PLC_MZ2:	dc.w 4
0001F168 0000 0000                  		dc.l Nem_MzSwitch	; switch
0001F16C A260                       		dc.w $A260
0001F16E 0000 0000                  		dc.l Nem_Spikes		; spikes
0001F172 A360                       		dc.w $A360
0001F174 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001F178 A460                       		dc.w $A460
0001F17A 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001F17E A660                       		dc.w $A660
0001F180 0000 0000                  		dc.l ArtNem_DignlSprng	; diagonal spring
0001F184 A860                       		dc.W $A860
0001F186 0000 0000                  		dc.l Nem_MzBlock	; green	stone block
0001F18A 5700                       		dc.w $5700
0001F18C                            ; ---------------------------------------------------------------------------
0001F18C                            ; Pattern load cues - Star Light
0001F18C                            ; ---------------------------------------------------------------------------
0001F18C 0008                       PLC_SLZ:	dc.w 8
0001F18E 0000 0000                  		dc.l Nem_SLZ		; SLZ main patterns
0001F192 0000                       		dc.w 0
0001F194 0000 0000                  		dc.l Nem_Bomb		; bomb enemy
0001F198 8000                       		dc.w $8000
0001F19A 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001F19E 8520                       		dc.w $8520
0001F1A0 0000 0000                  		dc.l Nem_MzFire		; fireballs
0001F1A4 9000                       		dc.w $9000
0001F1A6 0000 0000                  		dc.l Nem_SlzBlock	; block
0001F1AA 9C00                       		dc.w $9C00
0001F1AC 0000 0000                  		dc.l Nem_SlzWall	; breakable wall
0001F1B0 A260                       		dc.w $A260
0001F1B2 0000 0000                  		dc.l Nem_Spikes		; spikes
0001F1B6 A360                       		dc.w $A360
0001F1B8 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001F1BC A460                       		dc.w $A460
0001F1BE 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001F1C2 A660                       		dc.w $A660
0001F1C4 0000 0000                  		dc.l ArtNem_DignlSprng	; diagonal spring
0001F1C8 A860                       		dc.W $A860
0001F1CA 0005                       PLC_SLZ2:	dc.w 5
0001F1CC 0000 0000                  		dc.l Nem_Seesaw		; seesaw
0001F1D0 6E80                       		dc.w $6E80
0001F1D2 0000 0000                  		dc.l Nem_Fan		; fan
0001F1D6 7400                       		dc.w $7400
0001F1D8 0000 0000                  		dc.l Nem_Pylon		; foreground pylon
0001F1DC 7980                       		dc.w $7980
0001F1DE 0000 0000                  		dc.l Nem_SlzSwing	; swinging platform
0001F1E2 7B80                       		dc.w $7B80
0001F1E4 0000 0000                  		dc.l Nem_SlzCannon	; fireball launcher
0001F1E8 9B00                       		dc.w $9B00
0001F1EA 0000 0000                  		dc.l Nem_SlzSpike	; spikeball
0001F1EE 9E00                       		dc.w $9E00
0001F1F0                            ; ---------------------------------------------------------------------------
0001F1F0                            ; Pattern load cues - Spring Yard
0001F1F0                            ; ---------------------------------------------------------------------------
0001F1F0 0004                       PLC_SYZ:	dc.w 4
0001F1F2 0000 0000                  		dc.l Nem_SYZ		; SYZ main patterns
0001F1F6 0000                       		dc.w 0
0001F1F8 0000 0000                  		dc.l Nem_Crabmeat	; crabmeat enemy
0001F1FC 8000                       		dc.w $8000
0001F1FE 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001F202 8880                       		dc.w $8880
0001F204 0000 0000                  		dc.l Nem_Yadrin		; yadrin enemy
0001F208 8F60                       		dc.w $8F60
0001F20A 0000 0000                  		dc.l Nem_Roller		; roller enemy
0001F20E 9700                       		dc.w $9700
0001F210 0007                       PLC_SYZ2:	dc.w 7
0001F212 0000 0000                  		dc.l Nem_Bumper		; bumper
0001F216 7000                       		dc.w $7000
0001F218 0000 0000                  		dc.l Nem_SyzSpike1	; large	spikeball
0001F21C 72C0                       		dc.w $72C0
0001F21E 0000 0000                  		dc.l Nem_SyzSpike2	; small	spikeball
0001F222 7740                       		dc.w $7740
0001F224 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001F228 9FE0                       		dc.w $9FE0
0001F22A 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001F22E A1E0                       		dc.w $A1E0
0001F230 0000 0000                  		dc.l Nem_Spikes		; spikes
0001F234 A360                       		dc.w $A360
0001F236 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001F23A A460                       		dc.w $A460
0001F23C 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001F240 A660                       		dc.w $A660
0001F242 0000 0000                  		dc.l ArtNem_DignlSprng	; diagonal spring
0001F246 A860                       		dc.W $A860
0001F248                            ; ---------------------------------------------------------------------------
0001F248                            ; Pattern load cues - Scrap Brain
0001F248                            ; ---------------------------------------------------------------------------
0001F248 000B                       PLC_SBZ:	dc.w $B
0001F24A 0000 0000                  		dc.l Nem_SBZ		; SBZ main patterns
0001F24E 0000                       		dc.w 0
0001F250 0000 0000                  		dc.l Nem_Stomper	; moving platform and stomper
0001F254 5800                       		dc.w $5800
0001F256 0000 0000                  		dc.l Nem_SbzDoor1	; door
0001F25A 5D00                       		dc.w $5D00
0001F25C 0000 0000                  		dc.l Nem_Girder		; girder
0001F260 5E00                       		dc.w $5E00
0001F262 0000 0000                  		dc.l Nem_BallHog	; ball hog enemy
0001F266 6040                       		dc.w $6040
0001F268 0000 0000                  		dc.l Nem_SbzWheel1	; spot on large	wheel
0001F26C 6880                       		dc.w $6880
0001F26E 0000 0000                  		dc.l Nem_SbzWheel2	; wheel	that grabs Sonic
0001F272 6900                       		dc.w $6900
0001F274 0000 0000                  		dc.l Nem_SyzSpike1	; large	spikeball
0001F278 7220                       		dc.w $7220
0001F27A 0000 0000                  		dc.l Nem_Cutter		; pizza	cutter
0001F27E 76A0                       		dc.w $76A0
0001F280 0000 0000                  		dc.l Nem_FlamePipe	; flaming pipe
0001F284 7B20                       		dc.w $7B20
0001F286 0000 0000                  		dc.l Nem_SbzFloor	; collapsing floor
0001F28A 7EA0                       		dc.w $7EA0
0001F28C 0000 0000                  		dc.l Nem_SbzBlock	; vanishing block
0001F290 9860                       		dc.w $9860
0001F292 000C                       PLC_SBZ2:	dc.w $C
0001F294 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001F298 5600                       		dc.w $5600
0001F29A 0000 0000                  		dc.l Nem_Bomb		; bomb enemy
0001F29E 8000                       		dc.w $8000
0001F2A0 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001F2A4 8520                       		dc.w $8520
0001F2A6 0000 0000                  		dc.l Nem_SlideFloor	; floor	that slides away
0001F2AA 8C00                       		dc.w $8C00
0001F2AC 0000 0000                  		dc.l Nem_SbzDoor2	; horizontal door
0001F2B0 8DE0                       		dc.w $8DE0
0001F2B2 0000 0000                  		dc.l Nem_Electric	; electric orb
0001F2B6 8FC0                       		dc.w $8FC0
0001F2B8 0000 0000                  		dc.l Nem_TrapDoor	; trapdoor
0001F2BC 9240                       		dc.w $9240
0001F2BE 0000 0000                  		dc.l Nem_SbzFloor	; collapsing floor
0001F2C2 7F20                       		dc.w $7F20
0001F2C4 0000 0000                  		dc.l Nem_SpinPform	; small	spinning platform
0001F2C8 9BE0                       		dc.w $9BE0
0001F2CA 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001F2CE A1E0                       		dc.w $A1E0
0001F2D0 0000 0000                  		dc.l Nem_Spikes		; spikes
0001F2D4 A360                       		dc.w $A360
0001F2D6 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001F2DA A460                       		dc.w $A460
0001F2DC 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001F2E0 A660                       		dc.w $A660
0001F2E2 0000 0000                  		dc.l ArtNem_DignlSprng	; diagonal spring
0001F2E6 A860                       		dc.W $A860
0001F2E8                            ; ---------------------------------------------------------------------------
0001F2E8                            ; Pattern load cues - title card
0001F2E8                            ; ---------------------------------------------------------------------------
0001F2E8 0000                       PLC_TitleCard:	dc.w 0
0001F2EA 0000 0000                  		dc.l Nem_TitleCard
0001F2EE B000                       		dc.w $B000
0001F2F0                            ; ---------------------------------------------------------------------------
0001F2F0                            ; Pattern load cues - act 3 boss
0001F2F0                            ; ---------------------------------------------------------------------------
0001F2F0 0005                       PLC_Boss:	dc.w 5
0001F2F2 0000 0000                  		dc.l Nem_Eggman		; Eggman main patterns
0001F2F6 8000                       		dc.w $8000
0001F2F8 0000 0000                  		dc.l Nem_Weapons	; Eggman's weapons
0001F2FC 8D80                       		dc.w $8D80
0001F2FE 0000 0000                  		dc.l Nem_Prison		; prison capsule
0001F302 93A0                       		dc.w $93A0
0001F304 0000 0000                  		dc.l Nem_Bomb		; bomb enemy (gets overwritten)
0001F308 A300                       		dc.w $A300
0001F30A 0000 0000                  		dc.l Nem_SlzSpike	; spikeball (SLZ boss)
0001F30E A300                       		dc.w $A300
0001F310 0000 0000                  		dc.l Nem_Exhaust	; exhaust flame
0001F314 A540                       		dc.w $A540
0001F316                            ; ---------------------------------------------------------------------------
0001F316                            ; Pattern load cues - act 1/2 signpost
0001F316                            ; ---------------------------------------------------------------------------
0001F316 0002                       PLC_Signpost:	dc.w 2
0001F318 0000 0000                  		dc.l Nem_SignPost	; signpost
0001F31C D000                       		dc.w $D000
0001F31E 0000 0000                  		dc.l Nem_Bonus		; hidden bonus points
0001F322 96C0                       		dc.w $96C0
0001F324 0000 0000                  		dc.l Nem_BigFlash	; giant	ring flash effect
0001F328 8C40                       		dc.w $8C40
0001F32A                            ; ---------------------------------------------------------------------------
0001F32A                            ; Pattern load cues - beta special stage warp effect
0001F32A                            ; ---------------------------------------------------------------------------
0001F32A 0000                       PLC_Warp:	dc.w 0
0001F32C 0000 0000                  		dc.l Nem_Warp
0001F330 A820                       		dc.w $A820
0001F332                            ; ---------------------------------------------------------------------------
0001F332                            ; Pattern load cues - special stage
0001F332                            ; ---------------------------------------------------------------------------
0001F332 0010                       PLC_SpeStage:	dc.w $10
0001F334 0000 0000                  		dc.l Nem_SSBgCloud	; bubble and cloud background
0001F338 0000                       		dc.w 0
0001F33A 0000 0000                  		dc.l Nem_SSBgFish	; bird and fish	background
0001F33E 0A20                       		dc.w $A20
0001F340 0000 0000                  		dc.l Nem_SSWalls	; walls
0001F344 2840                       		dc.w $2840
0001F346 0000 0000                  		dc.l Nem_Bumper		; bumper
0001F34A 4760                       		dc.w $4760
0001F34C 0000 0000                  		dc.l Nem_SSGOAL		; GOAL block
0001F350 4A20                       		dc.w $4A20
0001F352 0000 0000                  		dc.l Nem_SSUpDown	; UP and DOWN blocks
0001F356 4C60                       		dc.w $4C60
0001F358 0000 0000                  		dc.l Nem_SSRBlock	; R block
0001F35C 5E00                       		dc.w $5E00
0001F35E 0000 0000                  		dc.l Nem_SS1UpBlock	; 1UP block
0001F362 6E00                       		dc.w $6E00
0001F364 0000 0000                  		dc.l Nem_SSEmStars	; emerald collection stars
0001F368 7E00                       		dc.w $7E00
0001F36A 0000 0000                  		dc.l Nem_SSRedWhite	; red and white	block
0001F36E 8E00                       		dc.w $8E00
0001F370 0000 0000                  		dc.l Nem_SSGhost	; ghost	block
0001F374 9E00                       		dc.w $9E00
0001F376 0000 0000                  		dc.l Nem_SSWBlock	; W block
0001F37A AE00                       		dc.w $AE00
0001F37C 0000 0000                  		dc.l Nem_SSGlass	; glass	block
0001F380 BE00                       		dc.w $BE00
0001F382 0000 0000                  		dc.l Nem_SSEmerald	; emeralds
0001F386 EE00                       		dc.w $EE00
0001F388 0000 0000                  		dc.l Nem_SSZone1	; ZONE 1 block
0001F38C F2E0                       		dc.w $F2E0
0001F38E 0000 0000                  		dc.l Nem_SSZone2	; ZONE 2 block
0001F392 F400                       		dc.w $F400
0001F394 0000 0000                  		dc.l Nem_SSZone3	; ZONE 3 block
0001F398 F520                       		dc.w $F520
0001F39A 0000 0000                  		dc.l Nem_SSZone4	; ZONE 4 block
0001F39E F2E0                       		dc.w $F2E0
0001F3A0 0000 0000                  		dc.l Nem_SSZone5	; ZONE 5 block
0001F3A4 F400                       		dc.w $F400
0001F3A6 0000 0000                  		dc.l Nem_SSZone6	; ZONE 6 block
0001F3AA F520                       		dc.w $F520
0001F3AC                            ; ---------------------------------------------------------------------------
0001F3AC                            ; Pattern load cues - GHZ animals
0001F3AC                            ; ---------------------------------------------------------------------------
0001F3AC 0001                       PLC_GHZAnimals:	dc.w 1
0001F3AE 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001F3B2 B000                       		dc.w $B000
0001F3B4 0000 0000                  		dc.l Nem_Flicky		; flicky
0001F3B8 B240                       		dc.w $B240
0001F3BA                            ; ---------------------------------------------------------------------------
0001F3BA                            ; Pattern load cues - LZ animals
0001F3BA                            ; ---------------------------------------------------------------------------
0001F3BA 0001                       PLC_LZAnimals:	dc.w 1
0001F3BC 0000 0000                  		dc.l Nem_BlackBird	; blackbird
0001F3C0 B000                       		dc.w $B000
0001F3C2 0000 0000                  		dc.l Nem_Seal		; seal
0001F3C6 B240                       		dc.w $B240
0001F3C8                            ; ---------------------------------------------------------------------------
0001F3C8                            ; Pattern load cues - MZ animals
0001F3C8                            ; ---------------------------------------------------------------------------
0001F3C8 0001                       PLC_MZAnimals:	dc.w 1
0001F3CA 0000 0000                  		dc.l Nem_Squirrel	; squirrel
0001F3CE B000                       		dc.w $B000
0001F3D0 0000 0000                  		dc.l Nem_Seal		; seal
0001F3D4 B240                       		dc.w $B240
0001F3D6                            ; ---------------------------------------------------------------------------
0001F3D6                            ; Pattern load cues - SLZ animals
0001F3D6                            ; ---------------------------------------------------------------------------
0001F3D6 0001                       PLC_SLZAnimals:	dc.w 1
0001F3D8 0000 0000                  		dc.l Nem_Pig		; pig
0001F3DC B000                       		dc.w $B000
0001F3DE 0000 0000                  		dc.l Nem_Flicky		; flicky
0001F3E2 B240                       		dc.w $B240
0001F3E4                            ; ---------------------------------------------------------------------------
0001F3E4                            ; Pattern load cues - SYZ animals
0001F3E4                            ; ---------------------------------------------------------------------------
0001F3E4 0001                       PLC_SYZAnimals:	dc.w 1
0001F3E6 0000 0000                  		dc.l Nem_Pig		; pig
0001F3EA B000                       		dc.w $B000
0001F3EC 0000 0000                  		dc.l Nem_Chicken	; chicken
0001F3F0 B240                       		dc.w $B240
0001F3F2                            ; ---------------------------------------------------------------------------
0001F3F2                            ; Pattern load cues - SBZ animals
0001F3F2                            ; ---------------------------------------------------------------------------
0001F3F2 0001                       PLC_SBZAnimals:	dc.w 1
0001F3F4 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001F3F8 B000                       		dc.w $B000
0001F3FA 0000 0000                  		dc.l Nem_Chicken	; chicken
0001F3FE B240                       		dc.w $B240
0001F400                            ; ---------------------------------------------------------------------------
0001F400                            ; Pattern load cues - special stage results screen
0001F400                            ; ---------------------------------------------------------------------------
0001F400 0001                       PLC_SpeStResult:dc.w 1
0001F402 0000 0000                  		dc.l Nem_ResultEm	; emeralds
0001F406 A820                       		dc.w $A820
0001F408 0000 0000                  		dc.l Nem_MiniSonic	; mini Sonic
0001F40C AA20                       		dc.w $AA20
0001F40E                            ; ---------------------------------------------------------------------------
0001F40E                            ; Pattern load cues - ending sequence
0001F40E                            ; ---------------------------------------------------------------------------
0001F40E 000E                       PLC_Ending:	dc.w $E
0001F410 0000 0000                  		dc.l Nem_GHZ_1st	; GHZ main patterns
0001F414 0000                       		dc.w 0
0001F416 0000 0000                  		dc.l Nem_GHZ_2nd	; GHZ secondary	patterns
0001F41A 39A0                       		dc.w $39A0
0001F41C 0000 0000                  		dc.l Nem_Stalk		; flower stalk
0001F420 6B00                       		dc.w $6B00
0001F422 0000 0000                  		dc.l Nem_EndFlower	; flowers
0001F426 7400                       		dc.w $7400
0001F428 0000 0000                  		dc.l Nem_EndEm		; emeralds
0001F42C 78A0                       		dc.w $78A0
0001F42E 0000 0000                  		dc.l Nem_EndSonic	; Sonic
0001F432 7C20                       		dc.w $7C20
0001F434 0000 0000                  		dc.l Nem_EndEggman	; Eggman's death (unused)
0001F438 A480                       		dc.w $A480
0001F43A 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001F43E AA60                       		dc.w $AA60
0001F440 0000 0000                  		dc.l Nem_Chicken	; chicken
0001F444 ACA0                       		dc.w $ACA0
0001F446 0000 0000                  		dc.l Nem_BlackBird	; blackbird
0001F44A AE60                       		dc.w $AE60
0001F44C 0000 0000                  		dc.l Nem_Seal		; seal
0001F450 B0A0                       		dc.w $B0A0
0001F452 0000 0000                  		dc.l Nem_Pig		; pig
0001F456 B260                       		dc.w $B260
0001F458 0000 0000                  		dc.l Nem_Flicky		; flicky
0001F45C B4A0                       		dc.w $B4A0
0001F45E 0000 0000                  		dc.l Nem_Squirrel	; squirrel
0001F462 B660                       		dc.w $B660
0001F464 0000 0000                  		dc.l Nem_EndStH		; "SONIC THE HEDGEHOG"
0001F468 B8A0                       		dc.w $B8A0
0001F46A                            ; ---------------------------------------------------------------------------
0001F46A                            ; Pattern load cues - "TRY AGAIN" and "END" screens
0001F46A                            ; ---------------------------------------------------------------------------
0001F46A 0002                       PLC_TryAgain:	dc.w 2
0001F46C 0000 0000                  		dc.l Nem_EndEm		; emeralds
0001F470 78A0                       		dc.w $78A0
0001F472 0000 0000                  		dc.l Nem_TryAgain	; Eggman
0001F476 7C20                       		dc.w $7C20
0001F478 0000 0000                  		dc.l Nem_CreditText	; credits alphabet
0001F47C B400                       		dc.w $B400
0001F47E                            ; ---------------------------------------------------------------------------
0001F47E                            ; Pattern load cues - Eggman on SBZ 2
0001F47E                            ; ---------------------------------------------------------------------------
0001F47E 0002                       PLC_EggmanSBZ2:	dc.w 2
0001F480 0000 0000                  		dc.l Nem_SbzBlock	; block
0001F484 A300                       		dc.w $A300
0001F486 0000 0000                  		dc.l Nem_Sbz2Eggman	; Eggman
0001F48A 8000                       		dc.w $8000
0001F48C 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001F490 9400                       		dc.w $9400
0001F492                            ; ---------------------------------------------------------------------------
0001F492                            ; Pattern load cues - final boss
0001F492                            ; ---------------------------------------------------------------------------
0001F492 0004                       PLC_FZBoss:	dc.w 4
0001F494 0000 0000                  		dc.l Nem_FzEggman	; Eggman after boss
0001F498 7400                       		dc.w $7400
0001F49A 0000 0000                  		dc.l Nem_FzBoss		; FZ boss
0001F49E 6000                       		dc.w $6000
0001F4A0 0000 0000                  		dc.l Nem_Eggman		; Eggman main patterns
0001F4A4 8000                       		dc.w $8000
0001F4A6 0000 0000                  		dc.l Nem_Sbz2Eggman	; Eggman without ship
0001F4AA 8E00                       		dc.w $8E00
0001F4AC 0000 0000                  		dc.l Nem_Exhaust	; exhaust flame
0001F4B0 A540                       		dc.w $A540
0001F4B2                            		even
0001F4B2                            		even
0001F4B2                            
0001F4B2                            		incbin	misc\padding.bin
0001F5A0                            		even
0001F5A0                            Nem_SegaLogo:	incbin	artnem\segalogo.bin	; large Sega logo
0001FA02                            		even
0001FA02                            Eni_SegaLogo:	incbin	mapeni\segalogo.bin	; large Sega logo (mappings)
0001FAFA                            		even
0001FAFA                            Eni_Title:	incbin	mapeni\titlescr.bin	; title screen foreground (mappings)
0001FC0E                            		even
0001FC0E                            Nem_TitleFg:	incbin	artnem\titlefor.bin	; title screen foreground
00020C1A                            		even
00020C1A                            Nem_TitleSonic:	incbin	artnem\titleson.bin	; Sonic on title screen
000225E8                            		even
000225E8                            Nem_TitleTM:	incbin	artnem\titletm.bin	; TM on title screen
0002261C                            		even
0002261C                            Eni_JapNames:	incbin	mapeni\japcreds.bin	; Japanese credits (mappings)
000226DA                            		even
000226DA                            Nem_JapNames:	incbin	artnem\japcreds.bin	; Japanese credits
00022B82                            		even
00022B82                            ; ---------------------------------------------------------------------------
00022B82                            ; Sprite mappings - Sonic
00022B82                            ; ---------------------------------------------------------------------------
00022B82                            Map_Sonic:
00022B82                            	include "_maps\Sonic.asm"
00022B82                            ; --------------------------------------------------------------------------------
00022B82                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00022B82                            ; --------------------------------------------------------------------------------
00022B82                            
00022B82                            SME_N6hqJ:	
00022B82 0000 0000                  		dc.w SME_N6hqJ_1AC-SME_N6hqJ, SME_N6hqJ_1AD-SME_N6hqJ	
00022B86 0000 0000                  		dc.w SME_N6hqJ_1C2-SME_N6hqJ, SME_N6hqJ_1CD-SME_N6hqJ	
00022B8A 0000 0000                  		dc.w SME_N6hqJ_1E2-SME_N6hqJ, SME_N6hqJ_1F7-SME_N6hqJ	
00022B8E 0000 0000                  		dc.w SME_N6hqJ_211-SME_N6hqJ, SME_N6hqJ_221-SME_N6hqJ	
00022B92 0000 0000                  		dc.w SME_N6hqJ_22C-SME_N6hqJ, SME_N6hqJ_237-SME_N6hqJ	
00022B96 0000 0000                  		dc.w SME_N6hqJ_242-SME_N6hqJ, SME_N6hqJ_24D-SME_N6hqJ	
00022B9A 0000 0000                  		dc.w SME_N6hqJ_262-SME_N6hqJ, SME_N6hqJ_277-SME_N6hqJ	
00022B9E 0000 0000                  		dc.w SME_N6hqJ_287-SME_N6hqJ, SME_N6hqJ_29C-SME_N6hqJ	
00022BA2 0000 0000                  		dc.w SME_N6hqJ_2AC-SME_N6hqJ, SME_N6hqJ_2B7-SME_N6hqJ	
00022BA6 0000 0000                  		dc.w SME_N6hqJ_2C7-SME_N6hqJ, SME_N6hqJ_2DC-SME_N6hqJ	
00022BAA 0000 0000                  		dc.w SME_N6hqJ_2EC-SME_N6hqJ, SME_N6hqJ_2F7-SME_N6hqJ	
00022BAE 0000 0000                  		dc.w SME_N6hqJ_30C-SME_N6hqJ, SME_N6hqJ_326-SME_N6hqJ	
00022BB2 0000 0000                  		dc.w SME_N6hqJ_33B-SME_N6hqJ, SME_N6hqJ_350-SME_N6hqJ	
00022BB6 0000 0000                  		dc.w SME_N6hqJ_36A-SME_N6hqJ, SME_N6hqJ_384-SME_N6hqJ	
00022BBA 0000 0000                  		dc.w SME_N6hqJ_399-SME_N6hqJ, SME_N6hqJ_3B3-SME_N6hqJ	
00022BBE 0000 0000                  		dc.w SME_N6hqJ_3C3-SME_N6hqJ, SME_N6hqJ_3D3-SME_N6hqJ	
00022BC2 0000 0000                  		dc.w SME_N6hqJ_3E3-SME_N6hqJ, SME_N6hqJ_3EE-SME_N6hqJ	
00022BC6 0000 0000                  		dc.w SME_N6hqJ_3FE-SME_N6hqJ, SME_N6hqJ_40E-SME_N6hqJ	
00022BCA 0000 0000                  		dc.w SME_N6hqJ_41E-SME_N6hqJ, SME_N6hqJ_429-SME_N6hqJ	
00022BCE 0000 0000                  		dc.w SME_N6hqJ_43E-SME_N6hqJ, SME_N6hqJ_458-SME_N6hqJ	
00022BD2 0000 0000                  		dc.w SME_N6hqJ_46D-SME_N6hqJ, SME_N6hqJ_482-SME_N6hqJ	
00022BD6 0000 0000                  		dc.w SME_N6hqJ_497-SME_N6hqJ, SME_N6hqJ_4B1-SME_N6hqJ	
00022BDA 0000 0000                  		dc.w SME_N6hqJ_4C6-SME_N6hqJ, SME_N6hqJ_4DB-SME_N6hqJ	
00022BDE 0000 0000                  		dc.w SME_N6hqJ_4E6-SME_N6hqJ, SME_N6hqJ_4F1-SME_N6hqJ	
00022BE2 0000 0000                  		dc.w SME_N6hqJ_4FC-SME_N6hqJ, SME_N6hqJ_507-SME_N6hqJ	
00022BE6 0000 0000                  		dc.w SME_N6hqJ_51C-SME_N6hqJ, SME_N6hqJ_52C-SME_N6hqJ	
00022BEA 0000 0000                  		dc.w SME_N6hqJ_541-SME_N6hqJ, SME_N6hqJ_551-SME_N6hqJ	
00022BEE 0000 0000                  		dc.w SME_N6hqJ_55C-SME_N6hqJ, SME_N6hqJ_567-SME_N6hqJ	
00022BF2 0000 0000                  		dc.w SME_N6hqJ_572-SME_N6hqJ, SME_N6hqJ_57D-SME_N6hqJ	
00022BF6 0000 0000                  		dc.w SME_N6hqJ_58D-SME_N6hqJ, SME_N6hqJ_598-SME_N6hqJ	
00022BFA 0000 0000                  		dc.w SME_N6hqJ_5A8-SME_N6hqJ, SME_N6hqJ_5B3-SME_N6hqJ	
00022BFE 0000 0000                  		dc.w SME_N6hqJ_5B9-SME_N6hqJ, SME_N6hqJ_5BF-SME_N6hqJ	
00022C02 0000 0000                  		dc.w SME_N6hqJ_5C5-SME_N6hqJ, SME_N6hqJ_5CB-SME_N6hqJ	
00022C06 0000 0000                  		dc.w SME_N6hqJ_5D1-SME_N6hqJ, SME_N6hqJ_5D7-SME_N6hqJ	
00022C0A 0000 0000                  		dc.w SME_N6hqJ_5DD-SME_N6hqJ, SME_N6hqJ_5E3-SME_N6hqJ	
00022C0E 0000 0000                  		dc.w SME_N6hqJ_5E9-SME_N6hqJ, SME_N6hqJ_5EF-SME_N6hqJ	
00022C12 0000 0000                  		dc.w SME_N6hqJ_5F5-SME_N6hqJ, SME_N6hqJ_605-SME_N6hqJ	
00022C16 0000 0000                  		dc.w SME_N6hqJ_615-SME_N6hqJ, SME_N6hqJ_625-SME_N6hqJ	
00022C1A 0000 0000                  		dc.w SME_N6hqJ_635-SME_N6hqJ, SME_N6hqJ_63B-SME_N6hqJ	
00022C1E 0000 0000                  		dc.w SME_N6hqJ_641-SME_N6hqJ, SME_N6hqJ_64C-SME_N6hqJ	
00022C22 0000 0000                  		dc.w SME_N6hqJ_657-SME_N6hqJ, SME_N6hqJ_667-SME_N6hqJ	
00022C26 0000 0000                  		dc.w SME_N6hqJ_677-SME_N6hqJ, SME_N6hqJ_682-SME_N6hqJ	
00022C2A 0000 0000                  		dc.w SME_N6hqJ_68D-SME_N6hqJ, SME_N6hqJ_69D-SME_N6hqJ	
00022C2E 0000 0000                  		dc.w SME_N6hqJ_6B2-SME_N6hqJ, SME_N6hqJ_6C2-SME_N6hqJ	
00022C32 0000 0000                  		dc.w SME_N6hqJ_6D2-SME_N6hqJ, SME_N6hqJ_6E2-SME_N6hqJ	
00022C36 0000 0000                  		dc.w SME_N6hqJ_6F2-SME_N6hqJ, SME_N6hqJ_702-SME_N6hqJ	
00022C3A 0000 0000                  		dc.w SME_N6hqJ_70D-SME_N6hqJ, SME_N6hqJ_722-SME_N6hqJ	
00022C3E 0000 0000                  		dc.w SME_N6hqJ_737-SME_N6hqJ, SME_N6hqJ_747-SME_N6hqJ	
00022C42 0000 0000                  		dc.w SME_N6hqJ_757-SME_N6hqJ, SME_N6hqJ_767-SME_N6hqJ	
00022C46 0000 0000                  		dc.w SME_N6hqJ_772-SME_N6hqJ, SME_N6hqJ_778-SME_N6hqJ	
00022C4A 0000 0000                  		dc.w SME_N6hqJ_783-SME_N6hqJ, SME_N6hqJ_793-SME_N6hqJ	
00022C4E 0000 0000                  		dc.w SME_N6hqJ_7A3-SME_N6hqJ, SME_N6hqJ_7B3-SME_N6hqJ	
00022C52 0000 0000                  		dc.w SME_N6hqJ_7BE-SME_N6hqJ, SME_N6hqJ_7C9-SME_N6hqJ	
00022C56 0000 0000                  		dc.w SME_N6hqJ_7D9-SME_N6hqJ, SME_N6hqJ_7E4-SME_N6hqJ	
00022C5A 0000 0000                  		dc.w SME_N6hqJ_7F4-SME_N6hqJ, SME_N6hqJ_804-SME_N6hqJ	
00022C5E 0000 0000                  		dc.w SME_N6hqJ_80A-SME_N6hqJ, SME_N6hqJ_81A-SME_N6hqJ	
00022C62 0000 0000                  		dc.w SME_N6hqJ_82A-SME_N6hqJ, SME_N6hqJ_844-SME_N6hqJ	
00022C66 0000 0000                  		dc.w SME_N6hqJ_85E-SME_N6hqJ, SME_N6hqJ_869-SME_N6hqJ	
00022C6A 0000 0000                  		dc.w SME_N6hqJ_874-SME_N6hqJ, SME_N6hqJ_87F-SME_N6hqJ	
00022C6E 0000 0000                  		dc.w SME_N6hqJ_88F-SME_N6hqJ, SME_N6hqJ_8A4-SME_N6hqJ	
00022C72 0000 0000                  		dc.w SME_N6hqJ_8B4-SME_N6hqJ, SME_N6hqJ_8BF-SME_N6hqJ	
00022C76 0000 0000                  		dc.w SME_N6hqJ_8CF-SME_N6hqJ, SME_N6hqJ_8E4-SME_N6hqJ	
00022C7A 0000 0000                  		dc.w SME_N6hqJ_8F4-SME_N6hqJ, SME_N6hqJ_8FF-SME_N6hqJ	
00022C7E 0000 0000                  		dc.w SME_N6hqJ_914-SME_N6hqJ, SME_N6hqJ_92E-SME_N6hqJ	
00022C82 0000 0000                  		dc.w SME_N6hqJ_948-SME_N6hqJ, SME_N6hqJ_962-SME_N6hqJ	
00022C86 0000 0000                  		dc.w SME_N6hqJ_981-SME_N6hqJ, SME_N6hqJ_9A0-SME_N6hqJ	
00022C8A 0000 0000                  		dc.w SME_N6hqJ_9BA-SME_N6hqJ, SME_N6hqJ_9D4-SME_N6hqJ	
00022C8E 0000 0000                  		dc.w SME_N6hqJ_9E4-SME_N6hqJ, SME_N6hqJ_9F4-SME_N6hqJ	
00022C92 0000 0000                  		dc.w SME_N6hqJ_A04-SME_N6hqJ, SME_N6hqJ_A0F-SME_N6hqJ	
00022C96 0000 0000                  		dc.w SME_N6hqJ_A1F-SME_N6hqJ, SME_N6hqJ_A2F-SME_N6hqJ	
00022C9A 0000 0000                  		dc.w SME_N6hqJ_A3F-SME_N6hqJ, SME_N6hqJ_A4A-SME_N6hqJ	
00022C9E 0000 0000                  		dc.w SME_N6hqJ_A5F-SME_N6hqJ, SME_N6hqJ_A79-SME_N6hqJ	
00022CA2 0000 0000                  		dc.w SME_N6hqJ_A8E-SME_N6hqJ, SME_N6hqJ_AA3-SME_N6hqJ	
00022CA6 0000 0000                  		dc.w SME_N6hqJ_AB8-SME_N6hqJ, SME_N6hqJ_AD2-SME_N6hqJ	
00022CAA 0000 0000                  		dc.w SME_N6hqJ_AE7-SME_N6hqJ, SME_N6hqJ_AFC-SME_N6hqJ	
00022CAE 0000 0000                  		dc.w SME_N6hqJ_B0C-SME_N6hqJ, SME_N6hqJ_B21-SME_N6hqJ	
00022CB2 0000 0000                  		dc.w SME_N6hqJ_B31-SME_N6hqJ, SME_N6hqJ_B3C-SME_N6hqJ	
00022CB6 0000 0000                  		dc.w SME_N6hqJ_B4C-SME_N6hqJ, SME_N6hqJ_B61-SME_N6hqJ	
00022CBA 0000 0000                  		dc.w SME_N6hqJ_B71-SME_N6hqJ, SME_N6hqJ_B7C-SME_N6hqJ	
00022CBE 0000 0000                  		dc.w SME_N6hqJ_B96-SME_N6hqJ, SME_N6hqJ_BB5-SME_N6hqJ	
00022CC2 0000 0000                  		dc.w SME_N6hqJ_BCF-SME_N6hqJ, SME_N6hqJ_BE9-SME_N6hqJ	
00022CC6 0000 0000                  		dc.w SME_N6hqJ_C08-SME_N6hqJ, SME_N6hqJ_C27-SME_N6hqJ	
00022CCA 0000 0000                  		dc.w SME_N6hqJ_C41-SME_N6hqJ, SME_N6hqJ_C60-SME_N6hqJ	
00022CCE 0000 0000                  		dc.w SME_N6hqJ_C70-SME_N6hqJ, SME_N6hqJ_C80-SME_N6hqJ	
00022CD2 0000 0000                  		dc.w SME_N6hqJ_C90-SME_N6hqJ, SME_N6hqJ_C9B-SME_N6hqJ	
00022CD6 0000 0000                  		dc.w SME_N6hqJ_CAB-SME_N6hqJ, SME_N6hqJ_CBB-SME_N6hqJ	
00022CDA 0000 0000                  		dc.w SME_N6hqJ_CCB-SME_N6hqJ, SME_N6hqJ_CD6-SME_N6hqJ	
00022CDE 0000 0000                  		dc.w SME_N6hqJ_CEB-SME_N6hqJ, SME_N6hqJ_D05-SME_N6hqJ	
00022CE2 0000 0000                  		dc.w SME_N6hqJ_D1F-SME_N6hqJ, SME_N6hqJ_D34-SME_N6hqJ	
00022CE6 0000 0000                  		dc.w SME_N6hqJ_D49-SME_N6hqJ, SME_N6hqJ_D63-SME_N6hqJ	
00022CEA 0000 0000                  		dc.w SME_N6hqJ_D7D-SME_N6hqJ, SME_N6hqJ_D97-SME_N6hqJ	
00022CEE 0000 0000                  		dc.w SME_N6hqJ_DAC-SME_N6hqJ, SME_N6hqJ_DC1-SME_N6hqJ	
00022CF2 0000 0000                  		dc.w SME_N6hqJ_DD6-SME_N6hqJ, SME_N6hqJ_DF0-SME_N6hqJ	
00022CF6 0000 0000                  		dc.w SME_N6hqJ_E05-SME_N6hqJ, SME_N6hqJ_E1A-SME_N6hqJ	
00022CFA 0000 0000                  		dc.w SME_N6hqJ_E2F-SME_N6hqJ, SME_N6hqJ_E49-SME_N6hqJ	
00022CFE 0000 0000                  		dc.w SME_N6hqJ_E5E-SME_N6hqJ, SME_N6hqJ_E73-SME_N6hqJ	
00022D02 0000 0000                  		dc.w SME_N6hqJ_E88-SME_N6hqJ, SME_N6hqJ_E9D-SME_N6hqJ	
00022D06 0000 0000                  		dc.w SME_N6hqJ_EA8-SME_N6hqJ, SME_N6hqJ_EB8-SME_N6hqJ	
00022D0A 0000 0000                  		dc.w SME_N6hqJ_EC8-SME_N6hqJ, SME_N6hqJ_ED8-SME_N6hqJ	
00022D0E 0000 0000                  		dc.w SME_N6hqJ_EE8-SME_N6hqJ, SME_N6hqJ_EF8-SME_N6hqJ	
00022D12 0000 0000                  		dc.w SME_N6hqJ_F08-SME_N6hqJ, SME_N6hqJ_F18-SME_N6hqJ	
00022D16 0000 0000                  		dc.w SME_N6hqJ_F28-SME_N6hqJ, SME_N6hqJ_F38-SME_N6hqJ	
00022D1A 0000 0000                  		dc.w SME_N6hqJ_F52-SME_N6hqJ, SME_N6hqJ_F67-SME_N6hqJ	
00022D1E 0000 0000                  		dc.w SME_N6hqJ_F7C-SME_N6hqJ, SME_N6hqJ_F91-SME_N6hqJ	
00022D22 0000 0000                  		dc.w SME_N6hqJ_FA1-SME_N6hqJ, SME_N6hqJ_FB1-SME_N6hqJ	
00022D26 0000 0000                  		dc.w SME_N6hqJ_FC1-SME_N6hqJ, SME_N6hqJ_FD6-SME_N6hqJ	
00022D2A 0000 0000                  		dc.w SME_N6hqJ_FEB-SME_N6hqJ, SME_N6hqJ_1000-SME_N6hqJ	
00022D2E 00                         SME_N6hqJ_1AC:	dc.b 0	
00022D2F 04                         SME_N6hqJ_1AD:	dc.b 4	
00022D30 E405 0000 F8               		dc.b $E4, 5, 0, 0, $F8	
00022D35 EC03 0004 F0               		dc.b $EC, 3, 0, 4, $F0	
00022D3A F409 0008 F8               		dc.b $F4, 9, 0, 8, $F8	
00022D3F 0409 000E F8               		dc.b 4, 9, 0, $E, $F8	
00022D44 02                         SME_N6hqJ_1C2:	dc.b 2	
00022D45 EC0B 0000 F0               		dc.b $EC, $B, 0, 0, $F0	
00022D4A 0C09 000C F8               		dc.b $C, 9, 0, $C, $F8	
00022D4F 04                         SME_N6hqJ_1CD:	dc.b 4	
00022D50 EC03 0000 F0               		dc.b $EC, 3, 0, 0, $F0	
00022D55 EC05 0004 F8               		dc.b $EC, 5, 0, 4, $F8	
00022D5A FC05 0008 F8               		dc.b $FC, 5, 0, 8, $F8	
00022D5F 0C09 000C F8               		dc.b $C, 9, 0, $C, $F8	
00022D64 04                         SME_N6hqJ_1E2:	dc.b 4	
00022D65 EC03 0000 F0               		dc.b $EC, 3, 0, 0, $F0	
00022D6A EC05 0004 F8               		dc.b $EC, 5, 0, 4, $F8	
00022D6F FC05 0008 F8               		dc.b $FC, 5, 0, 8, $F8	
00022D74 0C09 000C F8               		dc.b $C, 9, 0, $C, $F8	
00022D79 05                         SME_N6hqJ_1F7:	dc.b 5	
00022D7A EC03 0000 F0               		dc.b $EC, 3, 0, 0, $F0	
00022D7F EC05 0004 F8               		dc.b $EC, 5, 0, 4, $F8	
00022D84 FC05 0008 F8               		dc.b $FC, 5, 0, 8, $F8	
00022D89 0C01 000C F8               		dc.b $C, 1, 0, $C, $F8	
00022D8E 0C05 000E 00               		dc.b $C, 5, 0, $E, 0	
00022D93 03                         SME_N6hqJ_211:	dc.b 3	
00022D94 EC03 0000 F0               		dc.b $EC, 3, 0, 0, $F0	
00022D99 EC07 0004 F8               		dc.b $EC, 7, 0, 4, $F8	
00022D9E 0C09 000C F8               		dc.b $C, 9, 0, $C, $F8	
00022DA3 02                         SME_N6hqJ_221:	dc.b 2	
00022DA4 F40B 0000 F0               		dc.b $F4, $B, 0, 0, $F0	
00022DA9 0401 000C 08               		dc.b 4, 1, 0, $C, 8	
00022DAE 02                         SME_N6hqJ_22C:	dc.b 2	
00022DAF F40B 0000 E8               		dc.b $F4, $B, 0, 0, $E8	
00022DB4 0405 000C 00               		dc.b 4, 5, 0, $C, 0	
00022DB9 02                         SME_N6hqJ_237:	dc.b 2	
00022DBA F40B 0000 E8               		dc.b $F4, $B, 0, 0, $E8	
00022DBF 0405 000C 00               		dc.b 4, 5, 0, $C, 0	
00022DC4 02                         SME_N6hqJ_242:	dc.b 2	
00022DC5 E40B 0000 F0               		dc.b $E4, $B, 0, 0, $F0	
00022DCA 040D 000C F0               		dc.b 4, $D, 0, $C, $F0	
00022DCF 04                         SME_N6hqJ_24D:	dc.b 4	
00022DD0 E405 0000 F8               		dc.b $E4, 5, 0, 0, $F8	
00022DD5 EC03 0004 F0               		dc.b $EC, 3, 0, 4, $F0	
00022DDA F409 0008 F8               		dc.b $F4, 9, 0, 8, $F8	
00022DDF 0409 000E F8               		dc.b 4, 9, 0, $E, $F8	
00022DE4 04                         SME_N6hqJ_262:	dc.b 4	
00022DE5 EC03 0000 F0               		dc.b $EC, 3, 0, 0, $F0	
00022DEA E405 0004 F8               		dc.b $E4, 5, 0, 4, $F8	
00022DEF F405 0008 F8               		dc.b $F4, 5, 0, 8, $F8	
00022DF4 0409 000C F8               		dc.b 4, 9, 0, $C, $F8	
00022DF9 03                         SME_N6hqJ_277:	dc.b 3	
00022DFA EB0D 0000 EE               		dc.b $EB, $D, 0, 0, $EE	
00022DFF 0301 0008 EC               		dc.b 3, 1, 0, 8, $EC	
00022E04 FB0F 000A F4               		dc.b $FB, $F, 0, $A, $F4	
00022E09 04                         SME_N6hqJ_287:	dc.b 4	
00022E0A EC0D 0000 EE               		dc.b $EC, $D, 0, 0, $EE	
00022E0F 0401 0008 EC               		dc.b 4, 1, 0, 8, $EC	
00022E14 FC0B 000A F4               		dc.b $FC, $B, 0, $A, $F4	
00022E19 0401 0016 0C               		dc.b 4, 1, 0, $16, $C	
00022E1E 03                         SME_N6hqJ_29C:	dc.b 3	
00022E1F ED0D 0000 ED               		dc.b $ED, $D, 0, 0, $ED	
00022E24 FD09 0008 F4               		dc.b $FD, 9, 0, 8, $F4	
00022E29 0D05 000E F7               		dc.b $D, 5, 0, $E, $F7	
00022E2E 02                         SME_N6hqJ_2AC:	dc.b 2	
00022E2F EC09 0000 F4               		dc.b $EC, 9, 0, 0, $F4	
00022E34 FC0F 0006 EE               		dc.b $FC, $F, 0, 6, $EE	
00022E39 03                         SME_N6hqJ_2B7:	dc.b 3	
00022E3A EB09 0000 F4               		dc.b $EB, 9, 0, 0, $F4	
00022E3F FB0F 0006 EE               		dc.b $FB, $F, 0, 6, $EE	
00022E44 FB01 0016 0E               		dc.b $FB, 1, 0, $16, $E	
00022E49 04                         SME_N6hqJ_2C7:	dc.b 4	
00022E4A EC09 0000 F4               		dc.b $EC, 9, 0, 0, $F4	
00022E4F 0401 0006 EC               		dc.b 4, 1, 0, 6, $EC	
00022E54 FC0B 0008 F4               		dc.b $FC, $B, 0, 8, $F4	
00022E59 0401 0014 0C               		dc.b 4, 1, 0, $14, $C	
00022E5E 03                         SME_N6hqJ_2DC:	dc.b 3	
00022E5F ED0D 0000 ED               		dc.b $ED, $D, 0, 0, $ED	
00022E64 FD09 0008 F4               		dc.b $FD, 9, 0, 8, $F4	
00022E69 0D05 000E F7               		dc.b $D, 5, 0, $E, $F7	
00022E6E 02                         SME_N6hqJ_2EC:	dc.b 2	
00022E6F EC0D 0000 EE               		dc.b $EC, $D, 0, 0, $EE	
00022E74 FC0B 0008 F3               		dc.b $FC, $B, 0, 8, $F3	
00022E79 04                         SME_N6hqJ_2F7:	dc.b 4	
00022E7A EB09 0000 EA               		dc.b $EB, 9, 0, 0, $EA	
00022E7F FB09 0006 EA               		dc.b $FB, 9, 0, 6, $EA	
00022E84 F305 000C 02               		dc.b $F3, 5, 0, $C, 2	
00022E89 0B01 0010 FA               		dc.b $B, 1, 0, $10, $FA	
00022E8E 05                         SME_N6hqJ_30C:	dc.b 5	
00022E8F EC09 0000 EB               		dc.b $EC, 9, 0, 0, $EB	
00022E94 EC01 0006 03               		dc.b $EC, 1, 0, 6, 3	
00022E99 FC0D 0008 EB               		dc.b $FC, $D, 0, 8, $EB	
00022E9E FC05 0010 0B               		dc.b $FC, 5, 0, $10, $B	
00022EA3 0C01 0014 FB               		dc.b $C, 1, 0, $14, $FB	
00022EA8 04                         SME_N6hqJ_326:	dc.b 4	
00022EA9 ED07 0000 EC               		dc.b $ED, 7, 0, 0, $EC	
00022EAE ED03 0008 FC               		dc.b $ED, 3, 0, 8, $FC	
00022EB3 F501 000C 04               		dc.b $F5, 1, 0, $C, 4	
00022EB8 0505 000E 04               		dc.b 5, 5, 0, $E, 4	
00022EBD 04                         SME_N6hqJ_33B:	dc.b 4	
00022EBE EC09 0000 EB               		dc.b $EC, 9, 0, 0, $EB	
00022EC3 EC01 0006 03               		dc.b $EC, 1, 0, 6, 3	
00022EC8 FC05 0008 EB               		dc.b $FC, 5, 0, 8, $EB	
00022ECD FC0B 000C FB               		dc.b $FC, $B, 0, $C, $FB	
00022ED2 05                         SME_N6hqJ_350:	dc.b 5	
00022ED3 EB09 0000 EA               		dc.b $EB, 9, 0, 0, $EA	
00022ED8 EB01 0006 02               		dc.b $EB, 1, 0, 6, 2	
00022EDD FB0D 0008 EA               		dc.b $FB, $D, 0, 8, $EA	
00022EE2 F301 0010 0A               		dc.b $F3, 1, 0, $10, $A	
00022EE7 0B05 0012 F2               		dc.b $B, 5, 0, $12, $F2	
00022EEC 05                         SME_N6hqJ_36A:	dc.b 5	
00022EED EC09 0000 EB               		dc.b $EC, 9, 0, 0, $EB	
00022EF2 EC01 0006 03               		dc.b $EC, 1, 0, 6, 3	
00022EF7 FC0D 0008 EB               		dc.b $FC, $D, 0, 8, $EB	
00022EFC FA05 0010 0B               		dc.b $FA, 5, 0, $10, $B	
00022F01 0C01 0014 FB               		dc.b $C, 1, 0, $14, $FB	
00022F06 04                         SME_N6hqJ_384:	dc.b 4	
00022F07 ED07 0000 EC               		dc.b $ED, 7, 0, 0, $EC	
00022F0C ED03 0008 FC               		dc.b $ED, 3, 0, 8, $FC	
00022F11 F501 000C 04               		dc.b $F5, 1, 0, $C, 4	
00022F16 0505 000E 04               		dc.b 5, 5, 0, $E, 4	
00022F1B 05                         SME_N6hqJ_399:	dc.b 5	
00022F1C EC09 0000 EB               		dc.b $EC, 9, 0, 0, $EB	
00022F21 FC09 0006 EB               		dc.b $FC, 9, 0, 6, $EB	
00022F26 F401 000C 03               		dc.b $F4, 1, 0, $C, 3	
00022F2B 0C01 000E FB               		dc.b $C, 1, 0, $E, $FB	
00022F30 0405 0010 03               		dc.b 4, 5, 0, $10, 3	
00022F35 03                         SME_N6hqJ_3B3:	dc.b 3	
00022F36 F207 0000 EB               		dc.b $F2, 7, 0, 0, $EB	
00022F3B EC0B 0008 FB               		dc.b $EC, $B, 0, 8, $FB	
00022F40 0C05 0014 03               		dc.b $C, 5, 0, $14, 3	
00022F45 03                         SME_N6hqJ_3C3:	dc.b 3	
00022F46 F207 0000 EC               		dc.b $F2, 7, 0, 0, $EC	
00022F4B EC0B 0008 FC               		dc.b $EC, $B, 0, 8, $FC	
00022F50 0C05 0014 04               		dc.b $C, 5, 0, $14, 4	
00022F55 03                         SME_N6hqJ_3D3:	dc.b 3	
00022F56 F307 0000 ED               		dc.b $F3, 7, 0, 0, $ED	
00022F5B F403 0008 FD               		dc.b $F4, 3, 0, 8, $FD	
00022F60 F905 000C 05               		dc.b $F9, 5, 0, $C, 5	
00022F65 02                         SME_N6hqJ_3E3:	dc.b 2	
00022F66 F407 0000 EC               		dc.b $F4, 7, 0, 0, $EC	
00022F6B F20B 0008 FC               		dc.b $F2, $B, 0, 8, $FC	
00022F70 03                         SME_N6hqJ_3EE:	dc.b 3	
00022F71 F407 0000 EB               		dc.b $F4, 7, 0, 0, $EB	
00022F76 E305 0008 FB               		dc.b $E3, 5, 0, 8, $FB	
00022F7B F30B 000C FB               		dc.b $F3, $B, 0, $C, $FB	
00022F80 03                         SME_N6hqJ_3FE:	dc.b 3	
00022F81 F407 0000 EC               		dc.b $F4, 7, 0, 0, $EC	
00022F86 EC0B 0008 FC               		dc.b $EC, $B, 0, 8, $FC	
00022F8B 0C05 0014 04               		dc.b $C, 5, 0, $14, 4	
00022F90 03                         SME_N6hqJ_40E:	dc.b 3	
00022F91 F307 0000 ED               		dc.b $F3, 7, 0, 0, $ED	
00022F96 F403 0008 FD               		dc.b $F4, 3, 0, 8, $FD	
00022F9B F905 000C 05               		dc.b $F9, 5, 0, $C, 5	
00022FA0 02                         SME_N6hqJ_41E:	dc.b 2	
00022FA1 F207 0000 EC               		dc.b $F2, 7, 0, 0, $EC	
00022FA6 F40B 0008 FC               		dc.b $F4, $B, 0, 8, $FC	
00022FAB 04                         SME_N6hqJ_429:	dc.b 4	
00022FAC EE05 0000 F3               		dc.b $EE, 5, 0, 0, $F3	
00022FB1 FE07 0004 EB               		dc.b $FE, 7, 0, 4, $EB	
00022FB6 FE0D 000C FB               		dc.b $FE, $D, 0, $C, $FB	
00022FBB 0E01 0014 FB               		dc.b $E, 1, 0, $14, $FB	
00022FC0 05                         SME_N6hqJ_43E:	dc.b 5	
00022FC1 DD05 0000 FC               		dc.b $DD, 5, 0, 0, $FC	
00022FC6 ED09 0004 F4               		dc.b $ED, 9, 0, 4, $F4	
00022FCB FD07 000A EC               		dc.b $FD, 7, 0, $A, $EC	
00022FD0 FD0D 0012 FC               		dc.b $FD, $D, 0, $12, $FC	
00022FD5 0D01 001A FC               		dc.b $D, 1, 0, $1A, $FC	
00022FDA 04                         SME_N6hqJ_458:	dc.b 4	
00022FDB EC0D 0000 F5               		dc.b $EC, $D, 0, 0, $F5	
00022FE0 FC07 0008 ED               		dc.b $FC, 7, 0, 8, $ED	
00022FE5 FC05 0010 FD               		dc.b $FC, 5, 0, $10, $FD	
00022FEA 0C01 0014 FD               		dc.b $C, 1, 0, $14, $FD	
00022FEF 04                         SME_N6hqJ_46D:	dc.b 4	
00022FF0 ED0D 0000 F4               		dc.b $ED, $D, 0, 0, $F4	
00022FF5 FD07 0008 EC               		dc.b $FD, 7, 0, 8, $EC	
00022FFA FD09 0010 FC               		dc.b $FD, 9, 0, $10, $FC	
00022FFF 0D01 0016 FC               		dc.b $D, 1, 0, $16, $FC	
00023004 04                         SME_N6hqJ_482:	dc.b 4	
00023005 EE09 0000 F3               		dc.b $EE, 9, 0, 0, $F3	
0002300A FE07 0006 EB               		dc.b $FE, 7, 0, 6, $EB	
0002300F FE0D 000E FB               		dc.b $FE, $D, 0, $E, $FB	
00023014 0E01 0016 FB               		dc.b $E, 1, 0, $16, $FB	
00023019 05                         SME_N6hqJ_497:	dc.b 5	
0002301A DD05 0000 FA               		dc.b $DD, 5, 0, 0, $FA	
0002301F ED09 0004 F4               		dc.b $ED, 9, 0, 4, $F4	
00023024 FD07 000A EC               		dc.b $FD, 7, 0, $A, $EC	
00023029 FD0D 0012 FC               		dc.b $FD, $D, 0, $12, $FC	
0002302E 0D01 001A FC               		dc.b $D, 1, 0, $1A, $FC	
00023033 04                         SME_N6hqJ_4B1:	dc.b 4	
00023034 EC0D 0000 F5               		dc.b $EC, $D, 0, 0, $F5	
00023039 FC07 0008 ED               		dc.b $FC, 7, 0, 8, $ED	
0002303E FC05 0010 FD               		dc.b $FC, 5, 0, $10, $FD	
00023043 0C01 0014 FD               		dc.b $C, 1, 0, $14, $FD	
00023048 04                         SME_N6hqJ_4C6:	dc.b 4	
00023049 ED0D 0000 F4               		dc.b $ED, $D, 0, 0, $F4	
0002304E FD07 0008 EC               		dc.b $FD, 7, 0, 8, $EC	
00023053 FD09 0010 FC               		dc.b $FD, 9, 0, $10, $FC	
00023058 0D01 0016 FC               		dc.b $D, 1, 0, $16, $FC	
0002305D 02                         SME_N6hqJ_4DB:	dc.b 2	
0002305E EE09 0000 F8               		dc.b $EE, 9, 0, 0, $F8	
00023063 FE0F 0006 F0               		dc.b $FE, $F, 0, 6, $F0	
00023068 02                         SME_N6hqJ_4E6:	dc.b 2	
00023069 EE09 0000 F8               		dc.b $EE, 9, 0, 0, $F8	
0002306E FE0F 0006 F0               		dc.b $FE, $F, 0, 6, $F0	
00023073 02                         SME_N6hqJ_4F1:	dc.b 2	
00023074 EE09 0000 F8               		dc.b $EE, 9, 0, 0, $F8	
00023079 FE0F 0006 F0               		dc.b $FE, $F, 0, 6, $F0	
0002307E 02                         SME_N6hqJ_4FC:	dc.b 2	
0002307F EE09 0000 F8               		dc.b $EE, 9, 0, 0, $F8	
00023084 FE0F 0006 F0               		dc.b $FE, $F, 0, 6, $F0	
00023089 04                         SME_N6hqJ_507:	dc.b 4	
0002308A EC09 0000 ED               		dc.b $EC, 9, 0, 0, $ED	
0002308F EC01 0006 05               		dc.b $EC, 1, 0, 6, 5	
00023094 FC0D 0008 F4               		dc.b $FC, $D, 0, 8, $F4	
00023099 0C09 0010 FA               		dc.b $C, 9, 0, $10, $FA	
0002309E 03                         SME_N6hqJ_51C:	dc.b 3	
0002309F EC0D 0000 ED               		dc.b $EC, $D, 0, 0, $ED	
000230A4 FC0D 0008 F5               		dc.b $FC, $D, 0, 8, $F5	
000230A9 0C09 0010 F8               		dc.b $C, 9, 0, $10, $F8	
000230AE 04                         SME_N6hqJ_52C:	dc.b 4	
000230AF EC09 0000 ED               		dc.b $EC, 9, 0, 0, $ED	
000230B4 EC01 0006 05               		dc.b $EC, 1, 0, 6, 5	
000230B9 FC0D 0008 F4               		dc.b $FC, $D, 0, 8, $F4	
000230BE 0C09 0010 FD               		dc.b $C, 9, 0, $10, $FD	
000230C3 03                         SME_N6hqJ_541:	dc.b 3	
000230C4 EC0D 0000 ED               		dc.b $EC, $D, 0, 0, $ED	
000230C9 FC0D 0008 F5               		dc.b $FC, $D, 0, 8, $F5	
000230CE 0C09 0010 F8               		dc.b $C, 9, 0, $10, $F8	
000230D3 02                         SME_N6hqJ_551:	dc.b 2	
000230D4 F007 0000 EE               		dc.b $F0, 7, 0, 0, $EE	
000230D9 F00B 0008 FE               		dc.b $F0, $B, 0, 8, $FE	
000230DE 02                         SME_N6hqJ_55C:	dc.b 2	
000230DF F007 0000 EE               		dc.b $F0, 7, 0, 0, $EE	
000230E4 F00B 0008 FE               		dc.b $F0, $B, 0, 8, $FE	
000230E9 02                         SME_N6hqJ_567:	dc.b 2	
000230EA F007 0000 EE               		dc.b $F0, 7, 0, 0, $EE	
000230EF F00B 0008 FE               		dc.b $F0, $B, 0, 8, $FE	
000230F4 02                         SME_N6hqJ_572:	dc.b 2	
000230F5 F007 0000 EE               		dc.b $F0, 7, 0, 0, $EE	
000230FA F00B 0008 FE               		dc.b $F0, $B, 0, 8, $FE	
000230FF 03                         SME_N6hqJ_57D:	dc.b 3	
00023100 E901 0000 F4               		dc.b $E9, 1, 0, 0, $F4	
00023105 F907 0002 EC               		dc.b $F9, 7, 0, 2, $EC	
0002310A EC0B 000A FC               		dc.b $EC, $B, 0, $A, $FC	
0002310F 02                         SME_N6hqJ_58D:	dc.b 2	
00023110 F307 0000 EC               		dc.b $F3, 7, 0, 0, $EC	
00023115 EB0B 0008 FC               		dc.b $EB, $B, 0, 8, $FC	
0002311A 03                         SME_N6hqJ_598:	dc.b 3	
0002311B E901 0000 F4               		dc.b $E9, 1, 0, 0, $F4	
00023120 F907 0002 EC               		dc.b $F9, 7, 0, 2, $EC	
00023125 EC0B 000A FC               		dc.b $EC, $B, 0, $A, $FC	
0002312A 02                         SME_N6hqJ_5A8:	dc.b 2	
0002312B F307 0000 EC               		dc.b $F3, 7, 0, 0, $EC	
00023130 EB0B 0008 FC               		dc.b $EB, $B, 0, 8, $FC	
00023135 01                         SME_N6hqJ_5B3:	dc.b 1	
00023136 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
0002313B 01                         SME_N6hqJ_5B9:	dc.b 1	
0002313C F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
00023141 01                         SME_N6hqJ_5BF:	dc.b 1	
00023142 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
00023147 01                         SME_N6hqJ_5C5:	dc.b 1	
00023148 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
0002314D 01                         SME_N6hqJ_5CB:	dc.b 1	
0002314E F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
00023153 01                         SME_N6hqJ_5D1:	dc.b 1	
00023154 F80F 0000 F4               		dc.b $F8, $F, 0, 0, $F4	
00023159 01                         SME_N6hqJ_5D7:	dc.b 1	
0002315A F80F 0000 F4               		dc.b $F8, $F, 0, 0, $F4	
0002315F 01                         SME_N6hqJ_5DD:	dc.b 1	
00023160 F80F 0000 F4               		dc.b $F8, $F, 0, 0, $F4	
00023165 01                         SME_N6hqJ_5E3:	dc.b 1	
00023166 F80F 0000 F4               		dc.b $F8, $F, 0, 0, $F4	
0002316B 01                         SME_N6hqJ_5E9:	dc.b 1	
0002316C F80F 0000 F4               		dc.b $F8, $F, 0, 0, $F4	
00023171 01                         SME_N6hqJ_5EF:	dc.b 1	
00023172 F80F 0000 F4               		dc.b $F8, $F, 0, 0, $F4	
00023177 03                         SME_N6hqJ_5F5:	dc.b 3	
00023178 E509 0000 F3               		dc.b $E5, 9, 0, 0, $F3	
0002317D F509 0006 F3               		dc.b $F5, 9, 0, 6, $F3	
00023182 050D 000C EB               		dc.b 5, $D, 0, $C, $EB	
00023187 03                         SME_N6hqJ_605:	dc.b 3	
00023188 E409 0000 F3               		dc.b $E4, 9, 0, 0, $F3	
0002318D F409 0006 F3               		dc.b $F4, 9, 0, 6, $F3	
00023192 0409 000C F3               		dc.b 4, 9, 0, $C, $F3	
00023197 03                         SME_N6hqJ_615:	dc.b 3	
00023198 E509 0000 F3               		dc.b $E5, 9, 0, 0, $F3	
0002319D F509 0006 F3               		dc.b $F5, 9, 0, 6, $F3	
000231A2 050D 000C EB               		dc.b 5, $D, 0, $C, $EB	
000231A7 03                         SME_N6hqJ_625:	dc.b 3	
000231A8 E509 0000 F3               		dc.b $E5, 9, 0, 0, $F3	
000231AD F509 0006 F3               		dc.b $F5, 9, 0, 6, $F3	
000231B2 0509 000C F3               		dc.b 5, 9, 0, $C, $F3	
000231B7 01                         SME_N6hqJ_635:	dc.b 1	
000231B8 F40B 0000 F6               		dc.b $F4, $B, 0, 0, $F6	
000231BD 01                         SME_N6hqJ_63B:	dc.b 1	
000231BE F40F 0000 F2               		dc.b $F4, $F, 0, 0, $F2	
000231C3 02                         SME_N6hqJ_641:	dc.b 2	
000231C4 F801 0000 EC               		dc.b $F8, 1, 0, 0, $EC	
000231C9 F00F 0002 F4               		dc.b $F0, $F, 0, 2, $F4	
000231CE 02                         SME_N6hqJ_64C:	dc.b 2	
000231CF F003 0000 EC               		dc.b $F0, 3, 0, 0, $EC	
000231D4 F00F 0004 F4               		dc.b $F0, $F, 0, 4, $F4	
000231D9 03                         SME_N6hqJ_657:	dc.b 3	
000231DA E80F 0000 E8               		dc.b $E8, $F, 0, 0, $E8	
000231DF E801 0010 08               		dc.b $E8, 1, 0, $10, 8	
000231E4 F805 0012 08               		dc.b $F8, 5, 0, $12, 8	
000231E9 03                         SME_N6hqJ_667:	dc.b 3	
000231EA E80F 0000 E8               		dc.b $E8, $F, 0, 0, $E8	
000231EF E801 0010 08               		dc.b $E8, 1, 0, $10, 8	
000231F4 F805 0012 08               		dc.b $F8, 5, 0, $12, 8	
000231F9 02                         SME_N6hqJ_677:	dc.b 2	
000231FA E80B 0000 F4               		dc.b $E8, $B, 0, 0, $F4	
000231FF 0809 000C F4               		dc.b 8, 9, 0, $C, $F4	
00023204 02                         SME_N6hqJ_682:	dc.b 2	
00023205 E80B 0000 F4               		dc.b $E8, $B, 0, 0, $F4	
0002320A 0809 000C F4               		dc.b 8, 9, 0, $C, $F4	
0002320F 03                         SME_N6hqJ_68D:	dc.b 3	
00023210 FC05 0000 EC               		dc.b $FC, 5, 0, 0, $EC	
00023215 F40B 0004 FC               		dc.b $F4, $B, 0, 4, $FC	
0002321A F401 0010 14               		dc.b $F4, 1, 0, $10, $14	
0002321F 04                         SME_N6hqJ_69D:	dc.b 4	
00023220 F401 0000 E8               		dc.b $F4, 1, 0, 0, $E8	
00023225 F407 0002 F0               		dc.b $F4, 7, 0, 2, $F0	
0002322A F407 0802 00               		dc.b $F4, 7, 8, 2, 0	
0002322F F401 0800 10               		dc.b $F4, 1, 8, 0, $10	
00023234 03                         SME_N6hqJ_6B2:	dc.b 3	
00023235 FC05 0800 04               		dc.b $FC, 5, 8, 0, 4	
0002323A F40B 0804 EC               		dc.b $F4, $B, 8, 4, $EC	
0002323F F401 0810 E4               		dc.b $F4, 1, 8, $10, $E4	
00023244 03                         SME_N6hqJ_6C2:	dc.b 3	
00023245 F401 0000 E4               		dc.b $F4, 1, 0, 0, $E4	
0002324A F40B 0002 EC               		dc.b $F4, $B, 0, 2, $EC	
0002324F FC01 000E 04               		dc.b $FC, 1, 0, $E, 4	
00023254 03                         SME_N6hqJ_6D2:	dc.b 3	
00023255 F401 0800 14               		dc.b $F4, 1, 8, 0, $14	
0002325A F40B 0802 FC               		dc.b $F4, $B, 8, 2, $FC	
0002325F FC01 080E F4               		dc.b $FC, 1, 8, $E, $F4	
00023264 03                         SME_N6hqJ_6E2:	dc.b 3	
00023265 FC05 0000 EC               		dc.b $FC, 5, 0, 0, $EC	
0002326A F40B 0004 FC               		dc.b $F4, $B, 0, 4, $FC	
0002326F F401 0010 14               		dc.b $F4, 1, 0, $10, $14	
00023274 03                         SME_N6hqJ_6F2:	dc.b 3	
00023275 E409 0000 F4               		dc.b $E4, 9, 0, 0, $F4	
0002327A F40F 0006 EC               		dc.b $F4, $F, 0, 6, $EC	
0002327F 0401 0016 0C               		dc.b 4, 1, 0, $16, $C	
00023284 02                         SME_N6hqJ_702:	dc.b 2	
00023285 E80B 0000 F4               		dc.b $E8, $B, 0, 0, $F4	
0002328A 0805 000C FC               		dc.b 8, 5, 0, $C, $FC	
0002328F 04                         SME_N6hqJ_70D:	dc.b 4	
00023290 EA01 0000 E8               		dc.b $EA, 1, 0, 0, $E8	
00023295 EA0B 0002 F0               		dc.b $EA, $B, 0, 2, $F0	
0002329A EA01 000E 08               		dc.b $EA, 1, 0, $E, 8	
0002329F 0A0D 0010 F0               		dc.b $A, $D, 0, $10, $F0	
000232A4 04                         SME_N6hqJ_722:	dc.b 4	
000232A5 EA01 0000 E8               		dc.b $EA, 1, 0, 0, $E8	
000232AA EA0B 0002 F0               		dc.b $EA, $B, 0, 2, $F0	
000232AF EA01 000E 08               		dc.b $EA, 1, 0, $E, 8	
000232B4 0A0D 0010 F0               		dc.b $A, $D, 0, $10, $F0	
000232B9 03                         SME_N6hqJ_737:	dc.b 3	
000232BA EA0D 0000 E8               		dc.b $EA, $D, 0, 0, $E8	
000232BF EA01 0008 08               		dc.b $EA, 1, 0, 8, 8	
000232C4 FA0B 000A F0               		dc.b $FA, $B, 0, $A, $F0	
000232C9 03                         SME_N6hqJ_747:	dc.b 3	
000232CA E409 0000 F0               		dc.b $E4, 9, 0, 0, $F0	
000232CF F40B 0006 F0               		dc.b $F4, $B, 0, 6, $F0	
000232D4 F401 0012 08               		dc.b $F4, 1, 0, $12, 8	
000232D9 03                         SME_N6hqJ_757:	dc.b 3	
000232DA E50B 0000 F0               		dc.b $E5, $B, 0, 0, $F0	
000232DF F401 000C 08               		dc.b $F4, 1, 0, $C, 8	
000232E4 0505 000E F8               		dc.b 5, 5, 0, $E, $F8	
000232E9 02                         SME_N6hqJ_767:	dc.b 2	
000232EA EC0B 0000 F1               		dc.b $EC, $B, 0, 0, $F1	
000232EF FC01 000C 09               		dc.b $FC, 1, 0, $C, 9	
000232F4 01                         SME_N6hqJ_772:	dc.b 1	
000232F5 EE0F 0000 F0               		dc.b $EE, $F, 0, 0, $F0	
000232FA 02                         SME_N6hqJ_778:	dc.b 2	
000232FB F20B 0000 F0               		dc.b $F2, $B, 0, 0, $F0	
00023300 FA01 000C 08               		dc.b $FA, 1, 0, $C, 8	
00023305 03                         SME_N6hqJ_783:	dc.b 3	
00023306 E401 0000 00               		dc.b $E4, 1, 0, 0, 0	
0002330B F40B 0002 F0               		dc.b $F4, $B, 0, 2, $F0	
00023310 F401 000E 08               		dc.b $F4, 1, 0, $E, 8	
00023315 03                         SME_N6hqJ_793:	dc.b 3	
00023316 E509 0000 F0               		dc.b $E5, 9, 0, 0, $F0	
0002331B F50B 0006 F0               		dc.b $F5, $B, 0, 6, $F0	
00023320 ED03 0012 08               		dc.b $ED, 3, 0, $12, 8	
00023325 03                         SME_N6hqJ_7A3:	dc.b 3	
00023326 E405 0000 F8               		dc.b $E4, 5, 0, 0, $F8	
0002332B F40B 0004 F0               		dc.b $F4, $B, 0, 4, $F0	
00023330 F401 0010 08               		dc.b $F4, 1, 0, $10, 8	
00023335 02                         SME_N6hqJ_7B3:	dc.b 2	
00023336 ED0B 0000 F0               		dc.b $ED, $B, 0, 0, $F0	
0002333B F501 000C 08               		dc.b $F5, 1, 0, $C, 8	
00023340 02                         SME_N6hqJ_7BE:	dc.b 2	
00023341 F401 0000 F0               		dc.b $F4, 1, 0, 0, $F0	
00023346 F10B 0002 F8               		dc.b $F1, $B, 0, 2, $F8	
0002334B 03                         SME_N6hqJ_7C9:	dc.b 3	
0002334C E405 0000 F1               		dc.b $E4, 5, 0, 0, $F1	
00023351 F40B 0004 F0               		dc.b $F4, $B, 0, 4, $F0	
00023356 F401 0010 08               		dc.b $F4, 1, 0, $10, 8	
0002335B 02                         SME_N6hqJ_7D9:	dc.b 2	
0002335C E105 0000 F0               		dc.b $E1, 5, 0, 0, $F0	
00023361 F10F 0004 F0               		dc.b $F1, $F, 0, 4, $F0	
00023366 03                         SME_N6hqJ_7E4:	dc.b 3	
00023367 E807 0000 F0               		dc.b $E8, 7, 0, 0, $F0	
0002336C E003 0008 00               		dc.b $E0, 3, 0, 8, 0	
00023371 0009 000C 00               		dc.b 0, 9, 0, $C, 0	
00023376 03                         SME_N6hqJ_7F4:	dc.b 3	
00023377 E807 0000 F0               		dc.b $E8, 7, 0, 0, $F0	
0002337C E003 0008 00               		dc.b $E0, 3, 0, 8, 0	
00023381 0009 000C 00               		dc.b 0, 9, 0, $C, 0	
00023386 01                         SME_N6hqJ_804:	dc.b 1	
00023387 F00B 0000 F5               		dc.b $F0, $B, 0, 0, $F5	
0002338C 03                         SME_N6hqJ_80A:	dc.b 3	
0002338D E60B 0000 F0               		dc.b $E6, $B, 0, 0, $F0	
00023392 EE01 000C 08               		dc.b $EE, 1, 0, $C, 8	
00023397 0609 000E F0               		dc.b 6, 9, 0, $E, $F0	
0002339C 03                         SME_N6hqJ_81A:	dc.b 3	
0002339D E40A 0000 F0               		dc.b $E4, $A, 0, 0, $F0	
000233A2 FC00 0009 08               		dc.b $FC, 0, 0, 9, 8	
000233A7 FC0A 000A F0               		dc.b $FC, $A, 0, $A, $F0	
000233AC 05                         SME_N6hqJ_82A:	dc.b 5	
000233AD E408 0000 F0               		dc.b $E4, 8, 0, 0, $F0	
000233B2 EC01 0003 F0               		dc.b $EC, 1, 0, 3, $F0	
000233B7 EC05 0005 F8               		dc.b $EC, 5, 0, 5, $F8	
000233BC FC0A 0009 F0               		dc.b $FC, $A, 0, 9, $F0	
000233C1 FD00 0012 08               		dc.b $FD, 0, 0, $12, 8	
000233C6 05                         SME_N6hqJ_844:	dc.b 5	
000233C7 E408 0000 F0               		dc.b $E4, 8, 0, 0, $F0	
000233CC EC01 0003 F0               		dc.b $EC, 1, 0, 3, $F0	
000233D1 EC05 0005 F8               		dc.b $EC, 5, 0, 5, $F8	
000233D6 FC0A 0009 F0               		dc.b $FC, $A, 0, 9, $F0	
000233DB FD00 0012 08               		dc.b $FD, 0, 0, $12, 8	
000233E0 02                         SME_N6hqJ_85E:	dc.b 2	
000233E1 E70A 0000 F1               		dc.b $E7, $A, 0, 0, $F1	
000233E6 FF0A 0009 F3               		dc.b $FF, $A, 0, 9, $F3	
000233EB 02                         SME_N6hqJ_869:	dc.b 2	
000233EC E70A 0000 F1               		dc.b $E7, $A, 0, 0, $F1	
000233F1 FF0A 0009 F3               		dc.b $FF, $A, 0, 9, $F3	
000233F6 02                         SME_N6hqJ_874:	dc.b 2	
000233F7 E70A 0000 F1               		dc.b $E7, $A, 0, 0, $F1	
000233FC FF0A 0009 F3               		dc.b $FF, $A, 0, 9, $F3	
00023401 03                         SME_N6hqJ_87F:	dc.b 3	
00023402 E30E 0000 EE               		dc.b $E3, $E, 0, 0, $EE	
00023407 0301 000C EC               		dc.b 3, 1, 0, $C, $EC	
0002340C FB0F 000E F4               		dc.b $FB, $F, 0, $E, $F4	
00023411 04                         SME_N6hqJ_88F:	dc.b 4	
00023412 E40E 0000 EE               		dc.b $E4, $E, 0, 0, $EE	
00023417 0401 000C EC               		dc.b 4, 1, 0, $C, $EC	
0002341C FC0B 000E F4               		dc.b $FC, $B, 0, $E, $F4	
00023421 0401 001A 0C               		dc.b 4, 1, 0, $1A, $C	
00023426 03                         SME_N6hqJ_8A4:	dc.b 3	
00023427 E50E 0000 ED               		dc.b $E5, $E, 0, 0, $ED	
0002342C FD09 000C F4               		dc.b $FD, 9, 0, $C, $F4	
00023431 0D05 0012 F7               		dc.b $D, 5, 0, $12, $F7	
00023436 02                         SME_N6hqJ_8B4:	dc.b 2	
00023437 E40A 0000 F4               		dc.b $E4, $A, 0, 0, $F4	
0002343C FC0F 0009 EE               		dc.b $FC, $F, 0, 9, $EE	
00023441 03                         SME_N6hqJ_8BF:	dc.b 3	
00023442 E30A 0000 F4               		dc.b $E3, $A, 0, 0, $F4	
00023447 FB0F 0009 EE               		dc.b $FB, $F, 0, 9, $EE	
0002344C FB01 0019 0E               		dc.b $FB, 1, 0, $19, $E	
00023451 04                         SME_N6hqJ_8CF:	dc.b 4	
00023452 E40A 0000 F4               		dc.b $E4, $A, 0, 0, $F4	
00023457 0401 0009 EC               		dc.b 4, 1, 0, 9, $EC	
0002345C FC0B 000B F4               		dc.b $FC, $B, 0, $B, $F4	
00023461 0401 0017 0C               		dc.b 4, 1, 0, $17, $C	
00023466 03                         SME_N6hqJ_8E4:	dc.b 3	
00023467 E50E 0000 ED               		dc.b $E5, $E, 0, 0, $ED	
0002346C FD09 000C F4               		dc.b $FD, 9, 0, $C, $F4	
00023471 0D05 0012 F7               		dc.b $D, 5, 0, $12, $F7	
00023476 02                         SME_N6hqJ_8F4:	dc.b 2	
00023477 E40E 0000 EE               		dc.b $E4, $E, 0, 0, $EE	
0002347C FC0B 000C F3               		dc.b $FC, $B, 0, $C, $F3	
00023481 04                         SME_N6hqJ_8FF:	dc.b 4	
00023482 EB0D 0000 E2               		dc.b $EB, $D, 0, 0, $E2	
00023487 F305 0008 02               		dc.b $F3, 5, 0, 8, 2	
0002348C FB09 000C EA               		dc.b $FB, 9, 0, $C, $EA	
00023491 0B01 0012 FA               		dc.b $B, 1, 0, $12, $FA	
00023496 05                         SME_N6hqJ_914:	dc.b 5	
00023497 EC0D 0000 E3               		dc.b $EC, $D, 0, 0, $E3	
0002349C EC01 0008 03               		dc.b $EC, 1, 0, 8, 3	
000234A1 FC0D 000A EB               		dc.b $FC, $D, 0, $A, $EB	
000234A6 FC05 0012 0B               		dc.b $FC, 5, 0, $12, $B	
000234AB 0C01 0016 FB               		dc.b $C, 1, 0, $16, $FB	
000234B0 05                         SME_N6hqJ_92E:	dc.b 5	
000234B1 ED0A 0000 E4               		dc.b $ED, $A, 0, 0, $E4	
000234B6 ED03 0009 FC               		dc.b $ED, 3, 0, 9, $FC	
000234BB 0500 000D F4               		dc.b 5, 0, 0, $D, $F4	
000234C0 F501 000E 04               		dc.b $F5, 1, 0, $E, 4	
000234C5 0505 0010 04               		dc.b 5, 5, 0, $10, 4	
000234CA 05                         SME_N6hqJ_948:	dc.b 5	
000234CB E400 0000 F1               		dc.b $E4, 0, 0, 0, $F1	
000234D0 EC0D 0001 E3               		dc.b $EC, $D, 0, 1, $E3	
000234D5 EC01 0009 03               		dc.b $EC, 1, 0, 9, 3	
000234DA FC05 000B EB               		dc.b $FC, 5, 0, $B, $EB	
000234DF FC0B 000F FB               		dc.b $FC, $B, 0, $F, $FB	
000234E4 06                         SME_N6hqJ_962:	dc.b 6	
000234E5 E300 0000 F0               		dc.b $E3, 0, 0, 0, $F0	
000234EA EB0D 0001 E2               		dc.b $EB, $D, 0, 1, $E2	
000234EF EB01 0009 02               		dc.b $EB, 1, 0, 9, 2	
000234F4 F301 000B 0A               		dc.b $F3, 1, 0, $B, $A	
000234F9 FB0D 000D EA               		dc.b $FB, $D, 0, $D, $EA	
000234FE 0B05 0015 F2               		dc.b $B, 5, 0, $15, $F2	
00023503 06                         SME_N6hqJ_981:	dc.b 6	
00023504 E400 0000 F1               		dc.b $E4, 0, 0, 0, $F1	
00023509 EC0D 0001 E3               		dc.b $EC, $D, 0, 1, $E3	
0002350E EC01 0009 03               		dc.b $EC, 1, 0, 9, 3	
00023513 FC0D 000B EB               		dc.b $FC, $D, 0, $B, $EB	
00023518 FA05 0013 0B               		dc.b $FA, 5, 0, $13, $B	
0002351D 0C01 0017 FB               		dc.b $C, 1, 0, $17, $FB	
00023522 05                         SME_N6hqJ_9A0:	dc.b 5	
00023523 ED0A 0000 E4               		dc.b $ED, $A, 0, 0, $E4	
00023528 ED03 0009 FC               		dc.b $ED, 3, 0, 9, $FC	
0002352D 0500 000D F4               		dc.b 5, 0, 0, $D, $F4	
00023532 F501 000E 04               		dc.b $F5, 1, 0, $E, 4	
00023537 0505 0010 04               		dc.b 5, 5, 0, $10, 4	
0002353C 05                         SME_N6hqJ_9BA:	dc.b 5	
0002353D EC0D 0000 E3               		dc.b $EC, $D, 0, 0, $E3	
00023542 F401 0008 03               		dc.b $F4, 1, 0, 8, 3	
00023547 FC09 000A EB               		dc.b $FC, 9, 0, $A, $EB	
0002354C 0C00 0010 FB               		dc.b $C, 0, 0, $10, $FB	
00023551 0405 0011 03               		dc.b 4, 5, 0, $11, 3	
00023556 03                         SME_N6hqJ_9D4:	dc.b 3	
00023557 F20B 0000 E3               		dc.b $F2, $B, 0, 0, $E3	
0002355C EC0B 000C FB               		dc.b $EC, $B, 0, $C, $FB	
00023561 0C05 0018 03               		dc.b $C, 5, 0, $18, 3	
00023566 03                         SME_N6hqJ_9E4:	dc.b 3	
00023567 F20B 0000 E4               		dc.b $F2, $B, 0, 0, $E4	
0002356C EC0B 000C FC               		dc.b $EC, $B, 0, $C, $FC	
00023571 0C05 0018 04               		dc.b $C, 5, 0, $18, 4	
00023576 03                         SME_N6hqJ_9F4:	dc.b 3	
00023577 F30B 0000 E5               		dc.b $F3, $B, 0, 0, $E5	
0002357C F403 000C FD               		dc.b $F4, 3, 0, $C, $FD	
00023581 F905 0010 05               		dc.b $F9, 5, 0, $10, 5	
00023586 02                         SME_N6hqJ_A04:	dc.b 2	
00023587 F40A 0000 E4               		dc.b $F4, $A, 0, 0, $E4	
0002358C F20B 0009 FC               		dc.b $F2, $B, 0, 9, $FC	
00023591 03                         SME_N6hqJ_A0F:	dc.b 3	
00023592 F40A 0000 E3               		dc.b $F4, $A, 0, 0, $E3	
00023597 E305 0009 FB               		dc.b $E3, 5, 0, 9, $FB	
0002359C F30B 000D FB               		dc.b $F3, $B, 0, $D, $FB	
000235A1 03                         SME_N6hqJ_A1F:	dc.b 3	
000235A2 F40A 0000 E4               		dc.b $F4, $A, 0, 0, $E4	
000235A7 EC0B 0009 FC               		dc.b $EC, $B, 0, 9, $FC	
000235AC 0C05 0015 04               		dc.b $C, 5, 0, $15, 4	
000235B1 03                         SME_N6hqJ_A2F:	dc.b 3	
000235B2 F30B 0000 E5               		dc.b $F3, $B, 0, 0, $E5	
000235B7 F403 000C FD               		dc.b $F4, 3, 0, $C, $FD	
000235BC F905 0010 05               		dc.b $F9, 5, 0, $10, 5	
000235C1 02                         SME_N6hqJ_A3F:	dc.b 2	
000235C2 F40B 0000 E4               		dc.b $F4, $B, 0, 0, $E4	
000235C7 F20B 000C FC               		dc.b $F2, $B, 0, $C, $FC	
000235CC 04                         SME_N6hqJ_A4A:	dc.b 4	
000235CD EE05 0000 F3               		dc.b $EE, 5, 0, 0, $F3	
000235D2 FE07 0004 EB               		dc.b $FE, 7, 0, 4, $EB	
000235D7 FE0D 000C FB               		dc.b $FE, $D, 0, $C, $FB	
000235DC 0E00 0014 FB               		dc.b $E, 0, 0, $14, $FB	
000235E1 05                         SME_N6hqJ_A5F:	dc.b 5	
000235E2 DD05 0000 FC               		dc.b $DD, 5, 0, 0, $FC	
000235E7 ED09 0004 F4               		dc.b $ED, 9, 0, 4, $F4	
000235EC FD07 000A EC               		dc.b $FD, 7, 0, $A, $EC	
000235F1 FD0D 0012 FC               		dc.b $FD, $D, 0, $12, $FC	
000235F6 0D00 001A FC               		dc.b $D, 0, 0, $1A, $FC	
000235FB 04                         SME_N6hqJ_A79:	dc.b 4	
000235FC EC0D 0000 F5               		dc.b $EC, $D, 0, 0, $F5	
00023601 FC07 0008 ED               		dc.b $FC, 7, 0, 8, $ED	
00023606 FC05 0010 FD               		dc.b $FC, 5, 0, $10, $FD	
0002360B 0C01 0014 FD               		dc.b $C, 1, 0, $14, $FD	
00023610 04                         SME_N6hqJ_A8E:	dc.b 4	
00023611 ED0D 0000 F4               		dc.b $ED, $D, 0, 0, $F4	
00023616 FD0B 0008 E4               		dc.b $FD, $B, 0, 8, $E4	
0002361B FD09 0014 FC               		dc.b $FD, 9, 0, $14, $FC	
00023620 0D00 001A FC               		dc.b $D, 0, 0, $1A, $FC	
00023625 04                         SME_N6hqJ_AA3:	dc.b 4	
00023626 EE09 0000 F3               		dc.b $EE, 9, 0, 0, $F3	
0002362B FE0B 0006 E3               		dc.b $FE, $B, 0, 6, $E3	
00023630 FE0D 0012 FB               		dc.b $FE, $D, 0, $12, $FB	
00023635 0E00 001A FB               		dc.b $E, 0, 0, $1A, $FB	
0002363A 05                         SME_N6hqJ_AB8:	dc.b 5	
0002363B DD05 0000 FA               		dc.b $DD, 5, 0, 0, $FA	
00023640 ED09 0004 F4               		dc.b $ED, 9, 0, 4, $F4	
00023645 FD0B 000A E4               		dc.b $FD, $B, 0, $A, $E4	
0002364A FD0D 0016 FC               		dc.b $FD, $D, 0, $16, $FC	
0002364F 0D00 001E FC               		dc.b $D, 0, 0, $1E, $FC	
00023654 04                         SME_N6hqJ_AD2:	dc.b 4	
00023655 EC0D 0000 F5               		dc.b $EC, $D, 0, 0, $F5	
0002365A FC07 0008 ED               		dc.b $FC, 7, 0, 8, $ED	
0002365F FC05 0010 FD               		dc.b $FC, 5, 0, $10, $FD	
00023664 0C01 0014 FD               		dc.b $C, 1, 0, $14, $FD	
00023669 04                         SME_N6hqJ_AE7:	dc.b 4	
0002366A ED0D 0000 F4               		dc.b $ED, $D, 0, 0, $F4	
0002366F FD07 0008 EC               		dc.b $FD, 7, 0, 8, $EC	
00023674 FD09 0010 FC               		dc.b $FD, 9, 0, $10, $FC	
00023679 0D00 0016 FC               		dc.b $D, 0, 0, $16, $FC	
0002367E 03                         SME_N6hqJ_AFC:	dc.b 3	
0002367F E30E 0000 EE               		dc.b $E3, $E, 0, 0, $EE	
00023684 0301 000C EC               		dc.b 3, 1, 0, $C, $EC	
00023689 FB0F 000E F4               		dc.b $FB, $F, 0, $E, $F4	
0002368E 04                         SME_N6hqJ_B0C:	dc.b 4	
0002368F E40E 0000 EE               		dc.b $E4, $E, 0, 0, $EE	
00023694 0401 000C EC               		dc.b 4, 1, 0, $C, $EC	
00023699 FC0B 000E F4               		dc.b $FC, $B, 0, $E, $F4	
0002369E 0401 001A 0C               		dc.b 4, 1, 0, $1A, $C	
000236A3 03                         SME_N6hqJ_B21:	dc.b 3	
000236A4 E50E 0000 ED               		dc.b $E5, $E, 0, 0, $ED	
000236A9 FD09 000C F4               		dc.b $FD, 9, 0, $C, $F4	
000236AE 0D05 0012 F7               		dc.b $D, 5, 0, $12, $F7	
000236B3 02                         SME_N6hqJ_B31:	dc.b 2	
000236B4 E40A 0000 F4               		dc.b $E4, $A, 0, 0, $F4	
000236B9 FC0F 0009 EE               		dc.b $FC, $F, 0, 9, $EE	
000236BE 03                         SME_N6hqJ_B3C:	dc.b 3	
000236BF E30A 0000 F4               		dc.b $E3, $A, 0, 0, $F4	
000236C4 FB0F 0009 EE               		dc.b $FB, $F, 0, 9, $EE	
000236C9 FB01 0019 0E               		dc.b $FB, 1, 0, $19, $E	
000236CE 04                         SME_N6hqJ_B4C:	dc.b 4	
000236CF E40A 0000 F4               		dc.b $E4, $A, 0, 0, $F4	
000236D4 0401 0009 EC               		dc.b 4, 1, 0, 9, $EC	
000236D9 FC0B 000B F4               		dc.b $FC, $B, 0, $B, $F4	
000236DE 0401 0017 0C               		dc.b 4, 1, 0, $17, $C	
000236E3 03                         SME_N6hqJ_B61:	dc.b 3	
000236E4 E50E 0000 ED               		dc.b $E5, $E, 0, 0, $ED	
000236E9 FD09 000C F4               		dc.b $FD, 9, 0, $C, $F4	
000236EE 0D05 0012 F7               		dc.b $D, 5, 0, $12, $F7	
000236F3 02                         SME_N6hqJ_B71:	dc.b 2	
000236F4 E40E 0000 EE               		dc.b $E4, $E, 0, 0, $EE	
000236F9 FC0B 000C F3               		dc.b $FC, $B, 0, $C, $F3	
000236FE 05                         SME_N6hqJ_B7C:	dc.b 5	
000236FF E304 0000 EA               		dc.b $E3, 4, 0, 0, $EA	
00023704 EB0D 0002 E2               		dc.b $EB, $D, 0, 2, $E2	
00023709 FB09 000A EA               		dc.b $FB, 9, 0, $A, $EA	
0002370E F305 0010 02               		dc.b $F3, 5, 0, $10, 2	
00023713 0B01 0014 FA               		dc.b $B, 1, 0, $14, $FA	
00023718 06                         SME_N6hqJ_B96:	dc.b 6	
00023719 E404 0000 EB               		dc.b $E4, 4, 0, 0, $EB	
0002371E EC0D 0002 E3               		dc.b $EC, $D, 0, 2, $E3	
00023723 EC01 000A 03               		dc.b $EC, 1, 0, $A, 3	
00023728 FC0D 000C EB               		dc.b $FC, $D, 0, $C, $EB	
0002372D FC05 0014 0B               		dc.b $FC, 5, 0, $14, $B	
00023732 0C01 0018 FB               		dc.b $C, 1, 0, $18, $FB	
00023737 05                         SME_N6hqJ_BB5:	dc.b 5	
00023738 EB09 0000 E4               		dc.b $EB, 9, 0, 0, $E4	
0002373D FB05 0006 EC               		dc.b $FB, 5, 0, 6, $EC	
00023742 ED03 000A FC               		dc.b $ED, 3, 0, $A, $FC	
00023747 F501 000E 04               		dc.b $F5, 1, 0, $E, 4	
0002374C 0505 0010 04               		dc.b 5, 5, 0, $10, 4	
00023751 05                         SME_N6hqJ_BCF:	dc.b 5	
00023752 E404 0000 EB               		dc.b $E4, 4, 0, 0, $EB	
00023757 EC0D 0002 E3               		dc.b $EC, $D, 0, 2, $E3	
0002375C EC01 000A 03               		dc.b $EC, 1, 0, $A, 3	
00023761 FC05 000C EB               		dc.b $FC, 5, 0, $C, $EB	
00023766 FC0B 0010 FB               		dc.b $FC, $B, 0, $10, $FB	
0002376B 06                         SME_N6hqJ_BE9:	dc.b 6	
0002376C E304 0000 EA               		dc.b $E3, 4, 0, 0, $EA	
00023771 EB0D 0002 E2               		dc.b $EB, $D, 0, 2, $E2	
00023776 EB01 000A 02               		dc.b $EB, 1, 0, $A, 2	
0002377B F301 000C 0A               		dc.b $F3, 1, 0, $C, $A	
00023780 FB0D 000E EA               		dc.b $FB, $D, 0, $E, $EA	
00023785 0B05 0016 F2               		dc.b $B, 5, 0, $16, $F2	
0002378A 06                         SME_N6hqJ_C08:	dc.b 6	
0002378B E404 0000 EB               		dc.b $E4, 4, 0, 0, $EB	
00023790 EC0D 0002 E3               		dc.b $EC, $D, 0, 2, $E3	
00023795 EC01 000A 03               		dc.b $EC, 1, 0, $A, 3	
0002379A FC0D 000C EB               		dc.b $FC, $D, 0, $C, $EB	
0002379F FA05 0014 0B               		dc.b $FA, 5, 0, $14, $B	
000237A4 0C01 0018 FB               		dc.b $C, 1, 0, $18, $FB	
000237A9 05                         SME_N6hqJ_C27:	dc.b 5	
000237AA EB09 0000 E4               		dc.b $EB, 9, 0, 0, $E4	
000237AF FB05 0006 EC               		dc.b $FB, 5, 0, 6, $EC	
000237B4 ED03 000A FC               		dc.b $ED, 3, 0, $A, $FC	
000237B9 F501 000E 04               		dc.b $F5, 1, 0, $E, 4	
000237BE 0505 0010 04               		dc.b 5, 5, 0, $10, 4	
000237C3 06                         SME_N6hqJ_C41:	dc.b 6	
000237C4 E404 0000 EB               		dc.b $E4, 4, 0, 0, $EB	
000237C9 EC0D 0002 E3               		dc.b $EC, $D, 0, 2, $E3	
000237CE FC09 000A EB               		dc.b $FC, 9, 0, $A, $EB	
000237D3 F401 0010 03               		dc.b $F4, 1, 0, $10, 3	
000237D8 0405 0012 03               		dc.b 4, 5, 0, $12, 3	
000237DD 0C01 0016 FB               		dc.b $C, 1, 0, $16, $FB	
000237E2 03                         SME_N6hqJ_C60:	dc.b 3	
000237E3 F20B 0000 E3               		dc.b $F2, $B, 0, 0, $E3	
000237E8 EC0B 000C FB               		dc.b $EC, $B, 0, $C, $FB	
000237ED 0C05 0018 03               		dc.b $C, 5, 0, $18, 3	
000237F2 03                         SME_N6hqJ_C70:	dc.b 3	
000237F3 F20B 0000 E4               		dc.b $F2, $B, 0, 0, $E4	
000237F8 EC0B 000C FC               		dc.b $EC, $B, 0, $C, $FC	
000237FD 0C05 0018 04               		dc.b $C, 5, 0, $18, 4	
00023802 03                         SME_N6hqJ_C80:	dc.b 3	
00023803 F30B 0000 E5               		dc.b $F3, $B, 0, 0, $E5	
00023808 F403 000C FD               		dc.b $F4, 3, 0, $C, $FD	
0002380D F905 0010 05               		dc.b $F9, 5, 0, $10, 5	
00023812 02                         SME_N6hqJ_C90:	dc.b 2	
00023813 F40A 0000 E4               		dc.b $F4, $A, 0, 0, $E4	
00023818 F20B 0009 FC               		dc.b $F2, $B, 0, 9, $FC	
0002381D 03                         SME_N6hqJ_C9B:	dc.b 3	
0002381E F40A 0000 E3               		dc.b $F4, $A, 0, 0, $E3	
00023823 E305 0009 FB               		dc.b $E3, 5, 0, 9, $FB	
00023828 F30B 000D FB               		dc.b $F3, $B, 0, $D, $FB	
0002382D 03                         SME_N6hqJ_CAB:	dc.b 3	
0002382E F40A 0000 E4               		dc.b $F4, $A, 0, 0, $E4	
00023833 EC0B 0009 FC               		dc.b $EC, $B, 0, 9, $FC	
00023838 0C05 0015 04               		dc.b $C, 5, 0, $15, 4	
0002383D 03                         SME_N6hqJ_CBB:	dc.b 3	
0002383E F30B 0000 E5               		dc.b $F3, $B, 0, 0, $E5	
00023843 F403 000C FD               		dc.b $F4, 3, 0, $C, $FD	
00023848 F905 0010 05               		dc.b $F9, 5, 0, $10, 5	
0002384D 02                         SME_N6hqJ_CCB:	dc.b 2	
0002384E F20B 0000 E4               		dc.b $F2, $B, 0, 0, $E4	
00023853 F40B 000C FC               		dc.b $F4, $B, 0, $C, $FC	
00023858 04                         SME_N6hqJ_CD6:	dc.b 4	
00023859 EE05 0000 F3               		dc.b $EE, 5, 0, 0, $F3	
0002385E FE0B 0004 E3               		dc.b $FE, $B, 0, 4, $E3	
00023863 FE0D 0010 FB               		dc.b $FE, $D, 0, $10, $FB	
00023868 0E00 0018 FB               		dc.b $E, 0, 0, $18, $FB	
0002386D 05                         SME_N6hqJ_CEB:	dc.b 5	
0002386E DD05 0000 FC               		dc.b $DD, 5, 0, 0, $FC	
00023873 ED09 0004 F4               		dc.b $ED, 9, 0, 4, $F4	
00023878 FD0B 000A E4               		dc.b $FD, $B, 0, $A, $E4	
0002387D FD0D 0016 FC               		dc.b $FD, $D, 0, $16, $FC	
00023882 0D00 001E FC               		dc.b $D, 0, 0, $1E, $FC	
00023887 05                         SME_N6hqJ_D05:	dc.b 5	
00023888 EC0D 0000 F5               		dc.b $EC, $D, 0, 0, $F5	
0002388D 0401 0008 E5               		dc.b 4, 1, 0, 8, $E5	
00023892 FC07 000A ED               		dc.b $FC, 7, 0, $A, $ED	
00023897 FC05 0012 FD               		dc.b $FC, 5, 0, $12, $FD	
0002389C 0C00 0016 FD               		dc.b $C, 0, 0, $16, $FD	
000238A1 04                         SME_N6hqJ_D1F:	dc.b 4	
000238A2 ED0D 0000 F4               		dc.b $ED, $D, 0, 0, $F4	
000238A7 FD0B 0008 E4               		dc.b $FD, $B, 0, 8, $E4	
000238AC FD09 0014 FC               		dc.b $FD, 9, 0, $14, $FC	
000238B1 0D00 001A FC               		dc.b $D, 0, 0, $1A, $FC	
000238B6 04                         SME_N6hqJ_D34:	dc.b 4	
000238B7 EE09 0000 F3               		dc.b $EE, 9, 0, 0, $F3	
000238BC FE0B 0006 E3               		dc.b $FE, $B, 0, 6, $E3	
000238C1 FE0D 0012 FB               		dc.b $FE, $D, 0, $12, $FB	
000238C6 0E00 001A FB               		dc.b $E, 0, 0, $1A, $FB	
000238CB 05                         SME_N6hqJ_D49:	dc.b 5	
000238CC DD05 0000 FA               		dc.b $DD, 5, 0, 0, $FA	
000238D1 ED09 0004 F4               		dc.b $ED, 9, 0, 4, $F4	
000238D6 FD0B 000A E4               		dc.b $FD, $B, 0, $A, $E4	
000238DB FD0D 0016 FC               		dc.b $FD, $D, 0, $16, $FC	
000238E0 0D00 001E FC               		dc.b $D, 0, 0, $1E, $FC	
000238E5 05                         SME_N6hqJ_D63:	dc.b 5	
000238E6 EC0D 0000 F5               		dc.b $EC, $D, 0, 0, $F5	
000238EB 0401 0008 E5               		dc.b 4, 1, 0, 8, $E5	
000238F0 FC07 000A ED               		dc.b $FC, 7, 0, $A, $ED	
000238F5 FC05 0012 FD               		dc.b $FC, 5, 0, $12, $FD	
000238FA 0C00 0016 FD               		dc.b $C, 0, 0, $16, $FD	
000238FF 05                         SME_N6hqJ_D7D:	dc.b 5	
00023900 ED0D 0000 F4               		dc.b $ED, $D, 0, 0, $F4	
00023905 0501 0008 E4               		dc.b 5, 1, 0, 8, $E4	
0002390A FD07 000A EC               		dc.b $FD, 7, 0, $A, $EC	
0002390F FD09 0012 FC               		dc.b $FD, 9, 0, $12, $FC	
00023914 0D00 0018 FC               		dc.b $D, 0, 0, $18, $FC	
00023919 04                         SME_N6hqJ_D97:	dc.b 4	
0002391A F008 0000 FC               		dc.b $F0, 8, 0, 0, $FC	
0002391F F800 0003 FC               		dc.b $F8, 0, 0, 3, $FC	
00023924 F805 0004 04               		dc.b $F8, 5, 0, 4, 4	
00023929 0009 0008 EC               		dc.b 0, 9, 0, 8, $EC	
0002392E 04                         SME_N6hqJ_DAC:	dc.b 4	
0002392F E604 0000 FA               		dc.b $E6, 4, 0, 0, $FA	
00023934 EE0B 0002 F2               		dc.b $EE, $B, 0, 2, $F2	
00023939 EE02 000E 0A               		dc.b $EE, 2, 0, $E, $A	
0002393E 0E04 0011 FA               		dc.b $E, 4, 0, $11, $FA	
00023943 04                         SME_N6hqJ_DC1:	dc.b 4	
00023944 EC02 0000 F0               		dc.b $EC, 2, 0, 0, $F0	
00023949 EC05 0003 F8               		dc.b $EC, 5, 0, 3, $F8	
0002394E FC08 0007 F8               		dc.b $FC, 8, 0, 7, $F8	
00023953 0405 000A 00               		dc.b 4, 5, 0, $A, 0	
00023958 05                         SME_N6hqJ_DD6:	dc.b 5	
00023959 EE08 0000 EE               		dc.b $EE, 8, 0, 0, $EE	
0002395E F60D 0003 E6               		dc.b $F6, $D, 0, 3, $E6	
00023963 F605 000B 06               		dc.b $F6, 5, 0, $B, 6	
00023968 0604 000F EE               		dc.b 6, 4, 0, $F, $EE	
0002396D 0600 0011 06               		dc.b 6, 0, 0, $11, 6	
00023972 04                         SME_N6hqJ_DF0:	dc.b 4	
00023973 E809 0000 FC               		dc.b $E8, 9, 0, 0, $FC	
00023978 F800 0006 FC               		dc.b $F8, 0, 0, 6, $FC	
0002397D F805 0007 04               		dc.b $F8, 5, 0, 7, 4	
00023982 0009 000B EC               		dc.b 0, 9, 0, $B, $EC	
00023987 04                         SME_N6hqJ_E05:	dc.b 4	
00023988 E604 0000 FA               		dc.b $E6, 4, 0, 0, $FA	
0002398D EE0B 0002 F2               		dc.b $EE, $B, 0, 2, $F2	
00023992 EE02 000E 0A               		dc.b $EE, 2, 0, $E, $A	
00023997 0E00 0011 FA               		dc.b $E, 0, 0, $11, $FA	
0002399C 04                         SME_N6hqJ_E1A:	dc.b 4	
0002399D EC06 0000 E8               		dc.b $EC, 6, 0, 0, $E8	
000239A2 EC05 0006 F8               		dc.b $EC, 5, 0, 6, $F8	
000239A7 FC00 000A F8               		dc.b $FC, 0, 0, $A, $F8	
000239AC FC06 000B 00               		dc.b $FC, 6, 0, $B, 0	
000239B1 05                         SME_N6hqJ_E2F:	dc.b 5	
000239B2 EE08 0000 EE               		dc.b $EE, 8, 0, 0, $EE	
000239B7 F60D 0003 E6               		dc.b $F6, $D, 0, 3, $E6	
000239BC F605 000B 06               		dc.b $F6, 5, 0, $B, 6	
000239C1 0604 000F EE               		dc.b 6, 4, 0, $F, $EE	
000239C6 0600 0011 06               		dc.b 6, 0, 0, $11, 6	
000239CB 04                         SME_N6hqJ_E49:	dc.b 4	
000239CC E509 0000 EE               		dc.b $E5, 9, 0, 0, $EE	
000239D1 F505 0006 EB               		dc.b $F5, 5, 0, 6, $EB	
000239D6 F505 000A FB               		dc.b $F5, 5, 0, $A, $FB	
000239DB 050D 000E EB               		dc.b 5, $D, 0, $E, $EB	
000239E0 04                         SME_N6hqJ_E5E:	dc.b 4	
000239E1 E409 0000 EE               		dc.b $E4, 9, 0, 0, $EE	
000239E6 F405 0006 EB               		dc.b $F4, 5, 0, 6, $EB	
000239EB F405 000A FB               		dc.b $F4, 5, 0, $A, $FB	
000239F0 040D 000E EB               		dc.b 4, $D, 0, $E, $EB	
000239F5 04                         SME_N6hqJ_E73:	dc.b 4	
000239F6 E509 0000 EE               		dc.b $E5, 9, 0, 0, $EE	
000239FB F505 0006 EB               		dc.b $F5, 5, 0, 6, $EB	
00023A00 F505 000A FB               		dc.b $F5, 5, 0, $A, $FB	
00023A05 050D 000E EB               		dc.b 5, $D, 0, $E, $EB	
00023A0A 04                         SME_N6hqJ_E88:	dc.b 4	
00023A0B E409 0000 EE               		dc.b $E4, 9, 0, 0, $EE	
00023A10 F405 0006 EB               		dc.b $F4, 5, 0, 6, $EB	
00023A15 F405 000A FB               		dc.b $F4, 5, 0, $A, $FB	
00023A1A 040D 000E EB               		dc.b 4, $D, 0, $E, $EB	
00023A1F 02                         SME_N6hqJ_E9D:	dc.b 2	
00023A20 FC02 0000 F0               		dc.b $FC, 2, 0, 0, $F0	
00023A25 F40B 0003 F8               		dc.b $F4, $B, 0, 3, $F8	
00023A2A 03                         SME_N6hqJ_EA8:	dc.b 3	
00023A2B E40A 0000 EC               		dc.b $E4, $A, 0, 0, $EC	
00023A30 FC08 0009 EC               		dc.b $FC, 8, 0, 9, $EC	
00023A35 0405 000C F1               		dc.b 4, 5, 0, $C, $F1	
00023A3A 03                         SME_N6hqJ_EB8:	dc.b 3	
00023A3B E40A 0000 EC               		dc.b $E4, $A, 0, 0, $EC	
00023A40 FC08 0009 EC               		dc.b $FC, 8, 0, 9, $EC	
00023A45 0405 000C F1               		dc.b 4, 5, 0, $C, $F1	
00023A4A 03                         SME_N6hqJ_EC8:	dc.b 3	
00023A4B E40A 0000 EC               		dc.b $E4, $A, 0, 0, $EC	
00023A50 FC08 0009 EC               		dc.b $FC, 8, 0, 9, $EC	
00023A55 0405 000C F1               		dc.b 4, 5, 0, $C, $F1	
00023A5A 03                         SME_N6hqJ_ED8:	dc.b 3	
00023A5B E50A 0000 ED               		dc.b $E5, $A, 0, 0, $ED	
00023A60 FD08 0009 ED               		dc.b $FD, 8, 0, 9, $ED	
00023A65 0505 000C F1               		dc.b 5, 5, 0, $C, $F1	
00023A6A 03                         SME_N6hqJ_EE8:	dc.b 3	
00023A6B E50A 0000 ED               		dc.b $E5, $A, 0, 0, $ED	
00023A70 FD08 0009 ED               		dc.b $FD, 8, 0, 9, $ED	
00023A75 0505 000C F1               		dc.b 5, 5, 0, $C, $F1	
00023A7A 03                         SME_N6hqJ_EF8:	dc.b 3	
00023A7B E50A 0000 ED               		dc.b $E5, $A, 0, 0, $ED	
00023A80 FD08 0009 ED               		dc.b $FD, 8, 0, 9, $ED	
00023A85 0505 000C F1               		dc.b 5, 5, 0, $C, $F1	
00023A8A 03                         SME_N6hqJ_F08:	dc.b 3	
00023A8B EC0B 0000 F0               		dc.b $EC, $B, 0, 0, $F0	
00023A90 EC03 000C 08               		dc.b $EC, 3, 0, $C, 8	
00023A95 0C05 0010 F1               		dc.b $C, 5, 0, $10, $F1	
00023A9A 03                         SME_N6hqJ_F18:	dc.b 3	
00023A9B EC0B 0000 F0               		dc.b $EC, $B, 0, 0, $F0	
00023AA0 EC03 000C 08               		dc.b $EC, 3, 0, $C, 8	
00023AA5 0C05 0010 F1               		dc.b $C, 5, 0, $10, $F1	
00023AAA 03                         SME_N6hqJ_F28:	dc.b 3	
00023AAB EC0B 0000 F0               		dc.b $EC, $B, 0, 0, $F0	
00023AB0 EC03 000C 08               		dc.b $EC, 3, 0, $C, 8	
00023AB5 0C05 0010 F1               		dc.b $C, 5, 0, $10, $F1	
00023ABA 05                         SME_N6hqJ_F38:	dc.b 5	
00023ABB EC0B 0000 F0               		dc.b $EC, $B, 0, 0, $F0	
00023AC0 EC01 000C 08               		dc.b $EC, 1, 0, $C, 8	
00023AC5 EC01 000E 10               		dc.b $EC, 1, 0, $E, $10	
00023ACA FC01 0010 08               		dc.b $FC, 1, 0, $10, 8	
00023ACF 0C05 0012 F1               		dc.b $C, 5, 0, $12, $F1	
00023AD4 04                         SME_N6hqJ_F52:	dc.b 4	
00023AD5 EC07 0000 EB               		dc.b $EC, 7, 0, 0, $EB	
00023ADA EC09 0008 FB               		dc.b $EC, 9, 0, 8, $FB	
00023ADF FC05 000E FB               		dc.b $FC, 5, 0, $E, $FB	
00023AE4 0C09 0012 EE               		dc.b $C, 9, 0, $12, $EE	
00023AE9 04                         SME_N6hqJ_F67:	dc.b 4	
00023AEA EC07 0000 EC               		dc.b $EC, 7, 0, 0, $EC	
00023AEF EC09 0008 FC               		dc.b $EC, 9, 0, 8, $FC	
00023AF4 FC05 000E FC               		dc.b $FC, 5, 0, $E, $FC	
00023AF9 0C09 0012 EF               		dc.b $C, 9, 0, $12, $EF	
00023AFE 04                         SME_N6hqJ_F7C:	dc.b 4	
00023AFF EC07 0000 EC               		dc.b $EC, 7, 0, 0, $EC	
00023B04 EC09 0008 FC               		dc.b $EC, 9, 0, 8, $FC	
00023B09 FC09 000E FC               		dc.b $FC, 9, 0, $E, $FC	
00023B0E 0C09 0014 F0               		dc.b $C, 9, 0, $14, $F0	
00023B13 03                         SME_N6hqJ_F91:	dc.b 3	
00023B14 F403 0000 E8               		dc.b $F4, 3, 0, 0, $E8	
00023B19 EC0B 0004 F0               		dc.b $EC, $B, 0, 4, $F0	
00023B1E 0C05 0010 F0               		dc.b $C, 5, 0, $10, $F0	
00023B23 03                         SME_N6hqJ_FA1:	dc.b 3	
00023B24 F403 0800 0C               		dc.b $F4, 3, 8, 0, $C	
00023B29 EC0B 0804 F4               		dc.b $EC, $B, 8, 4, $F4	
00023B2E 0C05 0810 FC               		dc.b $C, 5, 8, $10, $FC	
00023B33 03                         SME_N6hqJ_FB1:	dc.b 3	
00023B34 F403 0800 0C               		dc.b $F4, 3, 8, 0, $C	
00023B39 EC0B 0804 F4               		dc.b $EC, $B, 8, 4, $F4	
00023B3E 0C05 0810 FC               		dc.b $C, 5, 8, $10, $FC	
00023B43 04                         SME_N6hqJ_FC1:	dc.b 4	
00023B44 EC0D 0000 ED               		dc.b $EC, $D, 0, 0, $ED	
00023B49 FC0D 0008 EF               		dc.b $FC, $D, 0, 8, $EF	
00023B4E FC01 0010 0F               		dc.b $FC, 1, 0, $10, $F	
00023B53 0C05 0012 01               		dc.b $C, 5, 0, $12, 1	
00023B58 04                         SME_N6hqJ_FD6:	dc.b 4	
00023B59 EC0D 0000 EE               		dc.b $EC, $D, 0, 0, $EE	
00023B5E FC0D 0008 EF               		dc.b $FC, $D, 0, 8, $EF	
00023B63 FC01 0010 0F               		dc.b $FC, 1, 0, $10, $F	
00023B68 0C05 0012 01               		dc.b $C, 5, 0, $12, 1	
00023B6D 04                         SME_N6hqJ_FEB:	dc.b 4	
00023B6E EC0D 0000 EF               		dc.b $EC, $D, 0, 0, $EF	
00023B73 FC0D 0008 EF               		dc.b $FC, $D, 0, 8, $EF	
00023B78 FC01 0010 0F               		dc.b $FC, 1, 0, $10, $F	
00023B7D 0C05 0012 01               		dc.b $C, 5, 0, $12, 1	
00023B82 02                         SME_N6hqJ_1000:	dc.b 2	
00023B83 EC09 0000 F4               		dc.b $EC, 9, 0, 0, $F4	
00023B88 FC0B 0006 F7               		dc.b $FC, $B, 0, 6, $F7	
00023B8E 00                         		even
00023B8E 00                         		even
00023B8E                            
00023B8E                            ; ---------------------------------------------------------------------------
00023B8E                            ; Uncompressed graphics	loading	array for Sonic
00023B8E                            ; ---------------------------------------------------------------------------
00023B8E                            SonicDynPLC:
00023B8E                            	include "_inc\Sonic dynamic pattern load cues.asm"
00023B8E                            ; --------------------------------------------------------------------------------
00023B8E                            ; Dynamic Pattern Loading Cues - output from SonMapEd - Sonic 1 format; --------------------------------------------------------------------------------
00023B8E                            
00023B8E                            SME_QQU6s:	
00023B8E 0000 0000                  		dc.w SME_QQU6s_1AC-SME_QQU6s, SME_QQU6s_1AD-SME_QQU6s	
00023B92 0000 0000                  		dc.w SME_QQU6s_1B6-SME_QQU6s, SME_QQU6s_1BB-SME_QQU6s	
00023B96 0000 0000                  		dc.w SME_QQU6s_1C4-SME_QQU6s, SME_QQU6s_1CD-SME_QQU6s	
00023B9A 0000 0000                  		dc.w SME_QQU6s_1D8-SME_QQU6s, SME_QQU6s_1DF-SME_QQU6s	
00023B9E 0000 0000                  		dc.w SME_QQU6s_1E4-SME_QQU6s, SME_QQU6s_1E9-SME_QQU6s	
00023BA2 0000 0000                  		dc.w SME_QQU6s_1EE-SME_QQU6s, SME_QQU6s_1F3-SME_QQU6s	
00023BA6 0000 0000                  		dc.w SME_QQU6s_1FC-SME_QQU6s, SME_QQU6s_205-SME_QQU6s	
00023BAA 0000 0000                  		dc.w SME_QQU6s_20C-SME_QQU6s, SME_QQU6s_215-SME_QQU6s	
00023BAE 0000 0000                  		dc.w SME_QQU6s_21C-SME_QQU6s, SME_QQU6s_221-SME_QQU6s	
00023BB2 0000 0000                  		dc.w SME_QQU6s_228-SME_QQU6s, SME_QQU6s_231-SME_QQU6s	
00023BB6 0000 0000                  		dc.w SME_QQU6s_238-SME_QQU6s, SME_QQU6s_23D-SME_QQU6s	
00023BBA 0000 0000                  		dc.w SME_QQU6s_246-SME_QQU6s, SME_QQU6s_251-SME_QQU6s	
00023BBE 0000 0000                  		dc.w SME_QQU6s_25A-SME_QQU6s, SME_QQU6s_263-SME_QQU6s	
00023BC2 0000 0000                  		dc.w SME_QQU6s_26E-SME_QQU6s, SME_QQU6s_279-SME_QQU6s	
00023BC6 0000 0000                  		dc.w SME_QQU6s_282-SME_QQU6s, SME_QQU6s_28D-SME_QQU6s	
00023BCA 0000 0000                  		dc.w SME_QQU6s_294-SME_QQU6s, SME_QQU6s_29B-SME_QQU6s	
00023BCE 0000 0000                  		dc.w SME_QQU6s_2A2-SME_QQU6s, SME_QQU6s_2A7-SME_QQU6s	
00023BD2 0000 0000                  		dc.w SME_QQU6s_2AE-SME_QQU6s, SME_QQU6s_2B5-SME_QQU6s	
00023BD6 0000 0000                  		dc.w SME_QQU6s_2BC-SME_QQU6s, SME_QQU6s_2C1-SME_QQU6s	
00023BDA 0000 0000                  		dc.w SME_QQU6s_2CA-SME_QQU6s, SME_QQU6s_2D5-SME_QQU6s	
00023BDE 0000 0000                  		dc.w SME_QQU6s_2DE-SME_QQU6s, SME_QQU6s_2E7-SME_QQU6s	
00023BE2 0000 0000                  		dc.w SME_QQU6s_2F0-SME_QQU6s, SME_QQU6s_2FB-SME_QQU6s	
00023BE6 0000 0000                  		dc.w SME_QQU6s_304-SME_QQU6s, SME_QQU6s_30D-SME_QQU6s	
00023BEA 0000 0000                  		dc.w SME_QQU6s_312-SME_QQU6s, SME_QQU6s_317-SME_QQU6s	
00023BEE 0000 0000                  		dc.w SME_QQU6s_31C-SME_QQU6s, SME_QQU6s_321-SME_QQU6s	
00023BF2 0000 0000                  		dc.w SME_QQU6s_32A-SME_QQU6s, SME_QQU6s_331-SME_QQU6s	
00023BF6 0000 0000                  		dc.w SME_QQU6s_33A-SME_QQU6s, SME_QQU6s_341-SME_QQU6s	
00023BFA 0000 0000                  		dc.w SME_QQU6s_346-SME_QQU6s, SME_QQU6s_34B-SME_QQU6s	
00023BFE 0000 0000                  		dc.w SME_QQU6s_350-SME_QQU6s, SME_QQU6s_355-SME_QQU6s	
00023C02 0000 0000                  		dc.w SME_QQU6s_35C-SME_QQU6s, SME_QQU6s_361-SME_QQU6s	
00023C06 0000 0000                  		dc.w SME_QQU6s_368-SME_QQU6s, SME_QQU6s_36D-SME_QQU6s	
00023C0A 0000 0000                  		dc.w SME_QQU6s_370-SME_QQU6s, SME_QQU6s_373-SME_QQU6s	
00023C0E 0000 0000                  		dc.w SME_QQU6s_376-SME_QQU6s, SME_QQU6s_379-SME_QQU6s	
00023C12 0000 0000                  		dc.w SME_QQU6s_37C-SME_QQU6s, SME_QQU6s_37F-SME_QQU6s	
00023C16 0000 0000                  		dc.w SME_QQU6s_382-SME_QQU6s, SME_QQU6s_385-SME_QQU6s	
00023C1A 0000 0000                  		dc.w SME_QQU6s_388-SME_QQU6s, SME_QQU6s_38B-SME_QQU6s	
00023C1E 0000 0000                  		dc.w SME_QQU6s_38E-SME_QQU6s, SME_QQU6s_395-SME_QQU6s	
00023C22 0000 0000                  		dc.w SME_QQU6s_39C-SME_QQU6s, SME_QQU6s_3A3-SME_QQU6s	
00023C26 0000 0000                  		dc.w SME_QQU6s_3AA-SME_QQU6s, SME_QQU6s_3AD-SME_QQU6s	
00023C2A 0000 0000                  		dc.w SME_QQU6s_3B0-SME_QQU6s, SME_QQU6s_3B5-SME_QQU6s	
00023C2E 0000 0000                  		dc.w SME_QQU6s_3BA-SME_QQU6s, SME_QQU6s_3C1-SME_QQU6s	
00023C32 0000 0000                  		dc.w SME_QQU6s_3C8-SME_QQU6s, SME_QQU6s_3CD-SME_QQU6s	
00023C36 0000 0000                  		dc.w SME_QQU6s_3D2-SME_QQU6s, SME_QQU6s_3D9-SME_QQU6s	
00023C3A 0000 0000                  		dc.w SME_QQU6s_3DE-SME_QQU6s, SME_QQU6s_3E5-SME_QQU6s	
00023C3E 0000 0000                  		dc.w SME_QQU6s_3EC-SME_QQU6s, SME_QQU6s_3F3-SME_QQU6s	
00023C42 0000 0000                  		dc.w SME_QQU6s_3FA-SME_QQU6s, SME_QQU6s_401-SME_QQU6s	
00023C46 0000 0000                  		dc.w SME_QQU6s_406-SME_QQU6s, SME_QQU6s_40F-SME_QQU6s	
00023C4A 0000 0000                  		dc.w SME_QQU6s_418-SME_QQU6s, SME_QQU6s_41F-SME_QQU6s	
00023C4E 0000 0000                  		dc.w SME_QQU6s_426-SME_QQU6s, SME_QQU6s_42D-SME_QQU6s	
00023C52 0000 0000                  		dc.w SME_QQU6s_432-SME_QQU6s, SME_QQU6s_435-SME_QQU6s	
00023C56 0000 0000                  		dc.w SME_QQU6s_43A-SME_QQU6s, SME_QQU6s_441-SME_QQU6s	
00023C5A 0000 0000                  		dc.w SME_QQU6s_448-SME_QQU6s, SME_QQU6s_44F-SME_QQU6s	
00023C5E 0000 0000                  		dc.w SME_QQU6s_454-SME_QQU6s, SME_QQU6s_459-SME_QQU6s	
00023C62 0000 0000                  		dc.w SME_QQU6s_460-SME_QQU6s, SME_QQU6s_465-SME_QQU6s	
00023C66 0000 0000                  		dc.w SME_QQU6s_46C-SME_QQU6s, SME_QQU6s_473-SME_QQU6s	
00023C6A 0000 0000                  		dc.w SME_QQU6s_476-SME_QQU6s, SME_QQU6s_47D-SME_QQU6s	
00023C6E 0000 0000                  		dc.w SME_QQU6s_484-SME_QQU6s, SME_QQU6s_48F-SME_QQU6s	
00023C72 0000 0000                  		dc.w SME_QQU6s_49A-SME_QQU6s, SME_QQU6s_49F-SME_QQU6s	
00023C76 0000 0000                  		dc.w SME_QQU6s_4A4-SME_QQU6s, SME_QQU6s_4A9-SME_QQU6s	
00023C7A 0000 0000                  		dc.w SME_QQU6s_4B0-SME_QQU6s, SME_QQU6s_4B9-SME_QQU6s	
00023C7E 0000 0000                  		dc.w SME_QQU6s_4C0-SME_QQU6s, SME_QQU6s_4C5-SME_QQU6s	
00023C82 0000 0000                  		dc.w SME_QQU6s_4CC-SME_QQU6s, SME_QQU6s_4D5-SME_QQU6s	
00023C86 0000 0000                  		dc.w SME_QQU6s_4DC-SME_QQU6s, SME_QQU6s_4E1-SME_QQU6s	
00023C8A 0000 0000                  		dc.w SME_QQU6s_4EA-SME_QQU6s, SME_QQU6s_4F5-SME_QQU6s	
00023C8E 0000 0000                  		dc.w SME_QQU6s_500-SME_QQU6s, SME_QQU6s_50B-SME_QQU6s	
00023C92 0000 0000                  		dc.w SME_QQU6s_518-SME_QQU6s, SME_QQU6s_525-SME_QQU6s	
00023C96 0000 0000                  		dc.w SME_QQU6s_530-SME_QQU6s, SME_QQU6s_53B-SME_QQU6s	
00023C9A 0000 0000                  		dc.w SME_QQU6s_542-SME_QQU6s, SME_QQU6s_549-SME_QQU6s	
00023C9E 0000 0000                  		dc.w SME_QQU6s_550-SME_QQU6s, SME_QQU6s_555-SME_QQU6s	
00023CA2 0000 0000                  		dc.w SME_QQU6s_55C-SME_QQU6s, SME_QQU6s_563-SME_QQU6s	
00023CA6 0000 0000                  		dc.w SME_QQU6s_56A-SME_QQU6s, SME_QQU6s_56F-SME_QQU6s	
00023CAA 0000 0000                  		dc.w SME_QQU6s_578-SME_QQU6s, SME_QQU6s_583-SME_QQU6s	
00023CAE 0000 0000                  		dc.w SME_QQU6s_58C-SME_QQU6s, SME_QQU6s_595-SME_QQU6s	
00023CB2 0000 0000                  		dc.w SME_QQU6s_59E-SME_QQU6s, SME_QQU6s_5A9-SME_QQU6s	
00023CB6 0000 0000                  		dc.w SME_QQU6s_5B2-SME_QQU6s, SME_QQU6s_5BB-SME_QQU6s	
00023CBA 0000 0000                  		dc.w SME_QQU6s_5C2-SME_QQU6s, SME_QQU6s_5CB-SME_QQU6s	
00023CBE 0000 0000                  		dc.w SME_QQU6s_5D2-SME_QQU6s, SME_QQU6s_5D7-SME_QQU6s	
00023CC2 0000 0000                  		dc.w SME_QQU6s_5DE-SME_QQU6s, SME_QQU6s_5E7-SME_QQU6s	
00023CC6 0000 0000                  		dc.w SME_QQU6s_5EE-SME_QQU6s, SME_QQU6s_5F3-SME_QQU6s	
00023CCA 0000 0000                  		dc.w SME_QQU6s_5FE-SME_QQU6s, SME_QQU6s_60B-SME_QQU6s	
00023CCE 0000 0000                  		dc.w SME_QQU6s_616-SME_QQU6s, SME_QQU6s_621-SME_QQU6s	
00023CD2 0000 0000                  		dc.w SME_QQU6s_62E-SME_QQU6s, SME_QQU6s_63B-SME_QQU6s	
00023CD6 0000 0000                  		dc.w SME_QQU6s_646-SME_QQU6s, SME_QQU6s_653-SME_QQU6s	
00023CDA 0000 0000                  		dc.w SME_QQU6s_65A-SME_QQU6s, SME_QQU6s_661-SME_QQU6s	
00023CDE 0000 0000                  		dc.w SME_QQU6s_668-SME_QQU6s, SME_QQU6s_66D-SME_QQU6s	
00023CE2 0000 0000                  		dc.w SME_QQU6s_674-SME_QQU6s, SME_QQU6s_67B-SME_QQU6s	
00023CE6 0000 0000                  		dc.w SME_QQU6s_682-SME_QQU6s, SME_QQU6s_687-SME_QQU6s	
00023CEA 0000 0000                  		dc.w SME_QQU6s_690-SME_QQU6s, SME_QQU6s_69B-SME_QQU6s	
00023CEE 0000 0000                  		dc.w SME_QQU6s_6A6-SME_QQU6s, SME_QQU6s_6AF-SME_QQU6s	
00023CF2 0000 0000                  		dc.w SME_QQU6s_6B8-SME_QQU6s, SME_QQU6s_6C3-SME_QQU6s	
00023CF6 0000 0000                  		dc.w SME_QQU6s_6CE-SME_QQU6s, SME_QQU6s_6D9-SME_QQU6s	
00023CFA 0000 0000                  		dc.w SME_QQU6s_6E2-SME_QQU6s, SME_QQU6s_6EB-SME_QQU6s	
00023CFE 0000 0000                  		dc.w SME_QQU6s_6F4-SME_QQU6s, SME_QQU6s_6FF-SME_QQU6s	
00023D02 0000 0000                  		dc.w SME_QQU6s_708-SME_QQU6s, SME_QQU6s_711-SME_QQU6s	
00023D06 0000 0000                  		dc.w SME_QQU6s_71A-SME_QQU6s, SME_QQU6s_725-SME_QQU6s	
00023D0A 0000 0000                  		dc.w SME_QQU6s_72E-SME_QQU6s, SME_QQU6s_737-SME_QQU6s	
00023D0E 0000 0000                  		dc.w SME_QQU6s_740-SME_QQU6s, SME_QQU6s_749-SME_QQU6s	
00023D12 0000 0000                  		dc.w SME_QQU6s_74E-SME_QQU6s, SME_QQU6s_755-SME_QQU6s	
00023D16 0000 0000                  		dc.w SME_QQU6s_75C-SME_QQU6s, SME_QQU6s_763-SME_QQU6s	
00023D1A 0000 0000                  		dc.w SME_QQU6s_76A-SME_QQU6s, SME_QQU6s_771-SME_QQU6s	
00023D1E 0000 0000                  		dc.w SME_QQU6s_778-SME_QQU6s, SME_QQU6s_77F-SME_QQU6s	
00023D22 0000 0000                  		dc.w SME_QQU6s_786-SME_QQU6s, SME_QQU6s_78D-SME_QQU6s	
00023D26 0000 0000                  		dc.w SME_QQU6s_798-SME_QQU6s, SME_QQU6s_7A1-SME_QQU6s	
00023D2A 0000 0000                  		dc.w SME_QQU6s_7AA-SME_QQU6s, SME_QQU6s_7B3-SME_QQU6s	
00023D2E 0000 0000                  		dc.w SME_QQU6s_7BA-SME_QQU6s, SME_QQU6s_7C1-SME_QQU6s	
00023D32 0000 0000                  		dc.w SME_QQU6s_7C8-SME_QQU6s, SME_QQU6s_7D1-SME_QQU6s	
00023D36 0000 0000                  		dc.w SME_QQU6s_7DA-SME_QQU6s, SME_QQU6s_7E3-SME_QQU6s	
00023D3A 00                         SME_QQU6s_1AC:	dc.b 0	
00023D3B 0430 0030 0450 0850 0E     SME_QQU6s_1AD:	dc.b 4, $30, 0, $30, 4, $50, 8, $50, $E	
00023D44 02B0 1450 20               SME_QQU6s_1B6:	dc.b 2, $B0, $14, $50, $20	
00023D49 0430 2630 2A30 2E50 32     SME_QQU6s_1BB:	dc.b 4, $30, $26, $30, $2A, $30, $2E, $50, $32	
00023D52 0430 2630 3830 2E50 32     SME_QQU6s_1C4:	dc.b 4, $30, $26, $30, $38, $30, $2E, $50, $32	
00023D5B 0530 2630 3830 2E10 3230+  SME_QQU6s_1CD:	dc.b 5, $30, $26, $30, $38, $30, $2E, $10, $32, $30, $3C	
00023D66 0330 2670 4050 32          SME_QQU6s_1D8:	dc.b 3, $30, $26, $70, $40, $50, $32	
00023D6D 02B0 4810 54               SME_QQU6s_1DF:	dc.b 2, $B0, $48, $10, $54	
00023D72 02B0 5630 62               SME_QQU6s_1E4:	dc.b 2, $B0, $56, $30, $62	
00023D77 02B0 5630 66               SME_QQU6s_1E9:	dc.b 2, $B0, $56, $30, $66	
00023D7C 02B0 6A70 76               SME_QQU6s_1EE:	dc.b 2, $B0, $6A, $70, $76	
00023D81 0430 7E30 8250 8650 0E     SME_QQU6s_1F3:	dc.b 4, $30, $7E, $30, $82, $50, $86, $50, $E	
00023D8A 0430 8C30 9030 9450 0E     SME_QQU6s_1FC:	dc.b 4, $30, $8C, $30, $90, $30, $94, $50, $E	
00023D93 0370 9810 A0F0 A2          SME_QQU6s_205:	dc.b 3, $70, $98, $10, $A0, $F0, $A2	
00023D9A 0470 9810 B2B0 B410 C0     SME_QQU6s_20C:	dc.b 4, $70, $98, $10, $B2, $B0, $B4, $10, $C0	
00023DA3 0370 C250 CA30 D0          SME_QQU6s_215:	dc.b 3, $70, $C2, $50, $CA, $30, $D0	
00023DAA 0250 D4F0 DA               SME_QQU6s_21C:	dc.b 2, $50, $D4, $F0, $DA	
00023DAF 0350 D4F0 EA10 FA          SME_QQU6s_221:	dc.b 3, $50, $D4, $F0, $EA, $10, $FA	
00023DB6 0450 D410 FCB0 FE11 0A     SME_QQU6s_228:	dc.b 4, $50, $D4, $10, $FC, $B0, $FE, $11, $A	
00023DBF 0370 C251 0C31 12          SME_QQU6s_231:	dc.b 3, $70, $C2, $51, $C, $31, $12	
00023DC6 0270 98B1 16               SME_QQU6s_238:	dc.b 2, $70, $98, $B1, $16	
00023DCB 0451 2251 2831 2E11 32     SME_QQU6s_23D:	dc.b 4, $51, $22, $51, $28, $31, $2E, $11, $32	
00023DD4 0551 2211 3471 3631 3E11+  SME_QQU6s_246:	dc.b 5, $51, $22, $11, $34, $71, $36, $31, $3E, $11, $42	
00023DDF 0471 4431 4C11 5031 52     SME_QQU6s_251:	dc.b 4, $71, $44, $31, $4C, $11, $50, $31, $52	
00023DE8 0451 5611 5C31 5EB1 62     SME_QQU6s_25A:	dc.b 4, $51, $56, $11, $5C, $31, $5E, $B1, $62	
00023DF1 0551 5611 6E71 7011 7831+  SME_QQU6s_263:	dc.b 5, $51, $56, $11, $6E, $71, $70, $11, $78, $31, $7A	
00023DFC 0551 5611 7E71 8031 8811+  SME_QQU6s_26E:	dc.b 5, $51, $56, $11, $7E, $71, $80, $31, $88, $11, $8C	
00023E07 0471 4431 8E11 9231 94     SME_QQU6s_279:	dc.b 4, $71, $44, $31, $8E, $11, $92, $31, $94	
00023E10 0551 2251 9811 9E11 A031+  SME_QQU6s_282:	dc.b 5, $51, $22, $51, $98, $11, $9E, $11, $A0, $31, $A2	
00023E1B 0371 A6B1 AE31 BA          SME_QQU6s_28D:	dc.b 3, $71, $A6, $B1, $AE, $31, $BA	
00023E22 0371 A6B1 BE31 CA          SME_QQU6s_294:	dc.b 3, $71, $A6, $B1, $BE, $31, $CA	
00023E29 0371 CE31 D631 DA          SME_QQU6s_29B:	dc.b 3, $71, $CE, $31, $D6, $31, $DA	
00023E30 0271 DEB1 E6               SME_QQU6s_2A2:	dc.b 2, $71, $DE, $B1, $E6	
00023E35 0371 DE31 F2B1 F6          SME_QQU6s_2A7:	dc.b 3, $71, $DE, $31, $F2, $B1, $F6	
00023E3C 0371 DEB2 0232 0E          SME_QQU6s_2AE:	dc.b 3, $71, $DE, $B2, 2, $32, $E	
00023E43 0371 CE32 1232 16          SME_QQU6s_2B5:	dc.b 3, $71, $CE, $32, $12, $32, $16	
00023E4A 0271 A6B2 1A               SME_QQU6s_2BC:	dc.b 2, $71, $A6, $B2, $1A	
00023E4F 0432 2672 2A72 3212 3A     SME_QQU6s_2C1:	dc.b 4, $32, $26, $72, $2A, $72, $32, $12, $3A	
00023E58 0532 3C52 4072 2A72 4612+  SME_QQU6s_2CA:	dc.b 5, $32, $3C, $52, $40, $72, $2A, $72, $46, $12, $3A	
00023E63 0472 4E72 5632 5E12 62     SME_QQU6s_2D5:	dc.b 4, $72, $4E, $72, $56, $32, $5E, $12, $62	
00023E6C 0472 6472 6C52 7412 7A     SME_QQU6s_2DE:	dc.b 4, $72, $64, $72, $6C, $52, $74, $12, $7A	
00023E75 0452 7C72 6C72 8212 7A     SME_QQU6s_2E7:	dc.b 4, $52, $7C, $72, $6C, $72, $82, $12, $7A	
00023E7E 0532 8A52 8E72 6C72 9412+  SME_QQU6s_2F0:	dc.b 5, $32, $8A, $52, $8E, $72, $6C, $72, $94, $12, $7A	
00023E89 0472 9C72 5632 A412 62     SME_QQU6s_2FB:	dc.b 4, $72, $9C, $72, $56, $32, $A4, $12, $62	
00023E92 0472 A872 2A52 B012 3A     SME_QQU6s_304:	dc.b 4, $72, $A8, $72, $2A, $52, $B0, $12, $3A	
00023E9B 0252 B6F2 BC               SME_QQU6s_30D:	dc.b 2, $52, $B6, $F2, $BC	
00023EA0 0252 CCF2 D2               SME_QQU6s_312:	dc.b 2, $52, $CC, $F2, $D2	
00023EA5 0252 B6F2 E2               SME_QQU6s_317:	dc.b 2, $52, $B6, $F2, $E2	
00023EAA 0252 CCF2 F2               SME_QQU6s_31C:	dc.b 2, $52, $CC, $F2, $F2	
00023EAF 0453 0213 0873 0A53 12     SME_QQU6s_321:	dc.b 4, $53, 2, $13, 8, $73, $A, $53, $12	
00023EB8 0373 1873 2053 28          SME_QQU6s_32A:	dc.b 3, $73, $18, $73, $20, $53, $28	
00023EBF 0453 0213 2E73 3053 38     SME_QQU6s_331:	dc.b 4, $53, 2, $13, $2E, $73, $30, $53, $38	
00023EC8 0373 1873 3E53 46          SME_QQU6s_33A:	dc.b 3, $73, $18, $73, $3E, $53, $46	
00023ECF 0273 4CB3 54               SME_QQU6s_341:	dc.b 2, $73, $4C, $B3, $54	
00023ED4 0273 60B3 68               SME_QQU6s_346:	dc.b 2, $73, $60, $B3, $68	
00023ED9 0273 4CB3 74               SME_QQU6s_34B:	dc.b 2, $73, $4C, $B3, $74	
00023EDE 0273 60B3 80               SME_QQU6s_350:	dc.b 2, $73, $60, $B3, $80	
00023EE3 0313 8C73 8EB3 96          SME_QQU6s_355:	dc.b 3, $13, $8C, $73, $8E, $B3, $96	
00023EEA 0273 A2B3 AA               SME_QQU6s_35C:	dc.b 2, $73, $A2, $B3, $AA	
00023EEF 0313 B673 8EB3 C0          SME_QQU6s_361:	dc.b 3, $13, $B6, $73, $8E, $B3, $C0	
00023EF6 0273 A2B3 CC               SME_QQU6s_368:	dc.b 2, $73, $A2, $B3, $CC	
00023EFB 01F4 00                    SME_QQU6s_36D:	dc.b 1, $F4, 0	
00023EFE 01F4 10                    SME_QQU6s_370:	dc.b 1, $F4, $10	
00023F01 01F4 20                    SME_QQU6s_373:	dc.b 1, $F4, $20	
00023F04 01F4 30                    SME_QQU6s_376:	dc.b 1, $F4, $30	
00023F07 01F4 40                    SME_QQU6s_379:	dc.b 1, $F4, $40	
00023F0A 01F4 50                    SME_QQU6s_37C:	dc.b 1, $F4, $50	
00023F0D 01F4 60                    SME_QQU6s_37F:	dc.b 1, $F4, $60	
00023F10 01F4 70                    SME_QQU6s_382:	dc.b 1, $F4, $70	
00023F13 01F4 80                    SME_QQU6s_385:	dc.b 1, $F4, $80	
00023F16 01F4 90                    SME_QQU6s_388:	dc.b 1, $F4, $90	
00023F19 01F4 A0                    SME_QQU6s_38B:	dc.b 1, $F4, $A0	
00023F1C 0353 D853 DE73 E4          SME_QQU6s_38E:	dc.b 3, $53, $D8, $53, $DE, $73, $E4	
00023F23 0353 D853 EC53 F2          SME_QQU6s_395:	dc.b 3, $53, $D8, $53, $EC, $53, $F2	
00023F2A 0353 D853 DE73 B8          SME_QQU6s_39C:	dc.b 3, $53, $D8, $53, $DE, $73, $B8	
00023F31 0353 D853 EC54 B0          SME_QQU6s_3A3:	dc.b 3, $53, $D8, $53, $EC, $54, $B0	
00023F38 01B4 B6                    SME_QQU6s_3AA:	dc.b 1, $B4, $B6	
00023F3B 01F4 C2                    SME_QQU6s_3AD:	dc.b 1, $F4, $C2	
00023F3E 0214 D2F4 D4               SME_QQU6s_3B0:	dc.b 2, $14, $D2, $F4, $D4	
00023F43 0234 E4F4 E8               SME_QQU6s_3B5:	dc.b 2, $34, $E4, $F4, $E8	
00023F48 03F4 F815 0835 0A          SME_QQU6s_3BA:	dc.b 3, $F4, $F8, $15, 8, $35, $A	
00023F4F 03F5 0E15 1E35 20          SME_QQU6s_3C1:	dc.b 3, $F5, $E, $15, $1E, $35, $20	
00023F56 02B5 2455 30               SME_QQU6s_3C8:	dc.b 2, $B5, $24, $55, $30	
00023F5B 02B5 3655 42               SME_QQU6s_3CD:	dc.b 2, $B5, $36, $55, $42	
00023F60 0335 48B5 4C15 58          SME_QQU6s_3D2:	dc.b 3, $35, $48, $B5, $4C, $15, $58	
00023F67 0215 5A75 5C               SME_QQU6s_3D9:	dc.b 2, $15, $5A, $75, $5C	
00023F6C 0335 48B5 4C15 58          SME_QQU6s_3DE:	dc.b 3, $35, $48, $B5, $4C, $15, $58	
00023F73 0315 64B5 6615 72          SME_QQU6s_3E5:	dc.b 3, $15, $64, $B5, $66, $15, $72	
00023F7A 0315 64B5 6615 72          SME_QQU6s_3EC:	dc.b 3, $15, $64, $B5, $66, $15, $72	
00023F81 0335 74B5 7815 84          SME_QQU6s_3F3:	dc.b 3, $35, $74, $B5, $78, $15, $84	
00023F88 0355 86F5 8C15 9C          SME_QQU6s_3FA:	dc.b 3, $55, $86, $F5, $8C, $15, $9C	
00023F8F 02B5 9E35 AA               SME_QQU6s_401:	dc.b 2, $B5, $9E, $35, $AA	
00023F94 0415 AEB5 B015 BC75 BE     SME_QQU6s_406:	dc.b 4, $15, $AE, $B5, $B0, $15, $BC, $75, $BE	
00023F9D 0415 AEB5 C615 BC75 BE     SME_QQU6s_40F:	dc.b 4, $15, $AE, $B5, $C6, $15, $BC, $75, $BE	
00023FA6 0375 D215 DAB5 DC          SME_QQU6s_418:	dc.b 3, $75, $D2, $15, $DA, $B5, $DC	
00023FAD 0355 E8B5 EE15 FA          SME_QQU6s_41F:	dc.b 3, $55, $E8, $B5, $EE, $15, $FA	
00023FB4 03B5 FC16 0836 0A          SME_QQU6s_426:	dc.b 3, $B5, $FC, $16, 8, $36, $A	
00023FBB 02B6 0E16 1A               SME_QQU6s_42D:	dc.b 2, $B6, $E, $16, $1A	
00023FC0 01F6 1C                    SME_QQU6s_432:	dc.b 1, $F6, $1C	
00023FC3 02B6 2C16 38               SME_QQU6s_435:	dc.b 2, $B6, $2C, $16, $38	
00023FC8 0316 3AB6 3C16 48          SME_QQU6s_43A:	dc.b 3, $16, $3A, $B6, $3C, $16, $48	
00023FCF 0356 4AB6 5036 5C          SME_QQU6s_441:	dc.b 3, $56, $4A, $B6, $50, $36, $5C	
00023FD6 0336 60B6 6416 70          SME_QQU6s_448:	dc.b 3, $36, $60, $B6, $64, $16, $70	
00023FDD 02B6 7216 7E               SME_QQU6s_44F:	dc.b 2, $B6, $72, $16, $7E	
00023FE2 0216 80B6 82               SME_QQU6s_454:	dc.b 2, $16, $80, $B6, $82	
00023FE7 0336 8EB6 9216 9E          SME_QQU6s_459:	dc.b 3, $36, $8E, $B6, $92, $16, $9E	
00023FEE 0236 A0F6 A4               SME_QQU6s_460:	dc.b 2, $36, $A0, $F6, $A4	
00023FF3 0376 B436 BC56 C0          SME_QQU6s_465:	dc.b 3, $76, $B4, $36, $BC, $56, $C0	
00023FFA 0376 C636 BC56 CE          SME_QQU6s_46C:	dc.b 3, $76, $C6, $36, $BC, $56, $CE	
00024001 01B7 D6                    SME_QQU6s_473:	dc.b 1, $B7, $D6	
00024004 03B7 E217 EE57 F0          SME_QQU6s_476:	dc.b 3, $B7, $E2, $17, $EE, $57, $F0	
0002400B 0387 F60A 1888 00          SME_QQU6s_47D:	dc.b 3, $87, $F6, $A, $18, $88, 0	
00024012 0528 0918 0C38 0E88 1208+  SME_QQU6s_484:	dc.b 5, $28, 9, $18, $C, $38, $E, $88, $12, 8, $1B	
0002401D 0528 1C18 1F38 0E88 1208+  SME_QQU6s_48F:	dc.b 5, $28, $1C, $18, $1F, $38, $E, $88, $12, 8, $1B	
00024028 0288 2188 2A               SME_QQU6s_49A:	dc.b 2, $88, $21, $88, $2A	
0002402D 0288 3388 2A               SME_QQU6s_49F:	dc.b 2, $88, $33, $88, $2A	
00024032 0288 3C88 2A               SME_QQU6s_4A4:	dc.b 2, $88, $3C, $88, $2A	
00024037 03B6 D410 A0F0 A2          SME_QQU6s_4A9:	dc.b 3, $B6, $D4, $10, $A0, $F0, $A2	
0002403E 04B6 D410 B2B0 B410 C0     SME_QQU6s_4B0:	dc.b 4, $B6, $D4, $10, $B2, $B0, $B4, $10, $C0	
00024047 03B6 E050 CA30 D0          SME_QQU6s_4B9:	dc.b 3, $B6, $E0, $50, $CA, $30, $D0	
0002404E 0286 ECF0 DA               SME_QQU6s_4C0:	dc.b 2, $86, $EC, $F0, $DA	
00024053 0386 ECF0 EA10 FA          SME_QQU6s_4C5:	dc.b 3, $86, $EC, $F0, $EA, $10, $FA	
0002405A 0486 EC10 FCB0 FE11 0A     SME_QQU6s_4CC:	dc.b 4, $86, $EC, $10, $FC, $B0, $FE, $11, $A	
00024063 03B6 E051 0C31 12          SME_QQU6s_4D5:	dc.b 3, $B6, $E0, $51, $C, $31, $12	
0002406A 02B6 D4B1 16               SME_QQU6s_4DC:	dc.b 2, $B6, $D4, $B1, $16	
0002406F 0476 F531 2E51 2811 32     SME_QQU6s_4E1:	dc.b 4, $76, $F5, $31, $2E, $51, $28, $11, $32	
00024078 0576 F511 3471 3631 3E11+  SME_QQU6s_4EA:	dc.b 5, $76, $F5, $11, $34, $71, $36, $31, $3E, $11, $42	
00024083 0586 FD31 4C07 0611 5031+  SME_QQU6s_4F5:	dc.b 5, $86, $FD, $31, $4C, 7, 6, $11, $50, $31, $52	
0002408E 0507 0777 0811 5C31 5EB1+  SME_QQU6s_500:	dc.b 5, 7, 7, $77, 8, $11, $5C, $31, $5E, $B1, $62	
00024099 0607 0777 0811 6E11 7871+  SME_QQU6s_50B:	dc.b 6, 7, 7, $77, 8, $11, $6E, $11, $78, $71, $70, $31, $7A	
000240A6 0607 0777 0811 7E71 8031+  SME_QQU6s_518:	dc.b 6, 7, 7, $77, 8, $11, $7E, $71, $80, $31, $88, $11, $8C	
000240B3 0586 FD31 8E07 0611 9231+  SME_QQU6s_525:	dc.b 5, $86, $FD, $31, $8E, 7, 6, $11, $92, $31, $94	
000240BE 0576 F511 9E51 9801 A031+  SME_QQU6s_530:	dc.b 5, $76, $F5, $11, $9E, $51, $98, 1, $A0, $31, $A2	
000240C9 03B7 10B1 AE31 BA          SME_QQU6s_53B:	dc.b 3, $B7, $10, $B1, $AE, $31, $BA	
000240D0 03B7 10B1 BE31 CA          SME_QQU6s_542:	dc.b 3, $B7, $10, $B1, $BE, $31, $CA	
000240D7 03B7 1C31 D631 DA          SME_QQU6s_549:	dc.b 3, $B7, $1C, $31, $D6, $31, $DA	
000240DE 0287 28B1 E6               SME_QQU6s_550:	dc.b 2, $87, $28, $B1, $E6	
000240E3 0387 2831 F2B1 F6          SME_QQU6s_555:	dc.b 3, $87, $28, $31, $F2, $B1, $F6	
000240EA 0387 28B2 0232 0E          SME_QQU6s_55C:	dc.b 3, $87, $28, $B2, 2, $32, $E	
000240F1 03B7 1C32 1232 16          SME_QQU6s_563:	dc.b 3, $B7, $1C, $32, $12, $32, $16	
000240F8 02B7 10B2 1A               SME_QQU6s_56A:	dc.b 2, $B7, $10, $B2, $1A	
000240FD 0432 2677 3172 3207 39     SME_QQU6s_56F:	dc.b 4, $32, $26, $77, $31, $72, $32, 7, $39	
00024106 0532 3C52 4077 3172 4607+  SME_QQU6s_578:	dc.b 5, $32, $3C, $52, $40, $77, $31, $72, $46, 7, $39	
00024111 0472 4E77 3A32 5E17 42     SME_QQU6s_583:	dc.b 4, $72, $4E, $77, $3A, $32, $5E, $17, $42	
0002411A 0472 64B7 4452 7407 50     SME_QQU6s_58C:	dc.b 4, $72, $64, $B7, $44, $52, $74, 7, $50	
00024123 0452 7CB7 4472 8207 50     SME_QQU6s_595:	dc.b 4, $52, $7C, $B7, $44, $72, $82, 7, $50	
0002412C 0532 8A52 8EB7 4472 9407+  SME_QQU6s_59E:	dc.b 5, $32, $8A, $52, $8E, $B7, $44, $72, $94, 7, $50	
00024137 0472 9C77 3A32 A417 42     SME_QQU6s_5A9:	dc.b 4, $72, $9C, $77, $3A, $32, $A4, $17, $42	
00024140 0472 A877 3152 B007 39     SME_QQU6s_5B2:	dc.b 4, $72, $A8, $77, $31, $52, $B0, 7, $39	
00024149 03B7 5110 A0F0 A2          SME_QQU6s_5BB:	dc.b 3, $B7, $51, $10, $A0, $F0, $A2	
00024150 04B7 5110 B2B0 B410 C0     SME_QQU6s_5C2:	dc.b 4, $B7, $51, $10, $B2, $B0, $B4, $10, $C0	
00024159 03B7 5D50 CA30 D0          SME_QQU6s_5CB:	dc.b 3, $B7, $5D, $50, $CA, $30, $D0	
00024160 0287 69F0 DA               SME_QQU6s_5D2:	dc.b 2, $87, $69, $F0, $DA	
00024165 0387 69F0 EA10 FA          SME_QQU6s_5D7:	dc.b 3, $87, $69, $F0, $EA, $10, $FA	
0002416C 0487 6910 FCB0 FE11 0A     SME_QQU6s_5DE:	dc.b 4, $87, $69, $10, $FC, $B0, $FE, $11, $A	
00024175 03B7 5D51 0C31 12          SME_QQU6s_5E7:	dc.b 3, $B7, $5D, $51, $C, $31, $12	
0002417C 02B7 51B1 16               SME_QQU6s_5EE:	dc.b 2, $B7, $51, $B1, $16	
00024181 0517 7277 7451 2831 2E11+  SME_QQU6s_5F3:	dc.b 5, $17, $72, $77, $74, $51, $28, $31, $2E, $11, $32	
0002418C 0617 7277 7411 3471 3631+  SME_QQU6s_5FE:	dc.b 6, $17, $72, $77, $74, $11, $34, $71, $36, $31, $3E, $11, $42	
00024199 0557 7C37 8231 4C11 5031+  SME_QQU6s_60B:	dc.b 5, $57, $7C, $37, $82, $31, $4C, $11, $50, $31, $52	
000241A4 0517 8677 8811 5C31 5EB1+  SME_QQU6s_616:	dc.b 5, $17, $86, $77, $88, $11, $5C, $31, $5E, $B1, $62	
000241AF 0617 8677 8811 6E11 7871+  SME_QQU6s_621:	dc.b 6, $17, $86, $77, $88, $11, $6E, $11, $78, $71, $70, $31, $7A	
000241BC 0617 8677 8811 7E71 8031+  SME_QQU6s_62E:	dc.b 6, $17, $86, $77, $88, $11, $7E, $71, $80, $31, $88, $11, $8C	
000241C9 0557 7C37 8231 8E11 9231+  SME_QQU6s_63B:	dc.b 5, $57, $7C, $37, $82, $31, $8E, $11, $92, $31, $94	
000241D4 0617 7277 7451 9811 9E31+  SME_QQU6s_646:	dc.b 6, $17, $72, $77, $74, $51, $98, $11, $9E, $31, $A2, $11, $A0	
000241E1 03B7 90B1 AE31 BA          SME_QQU6s_653:	dc.b 3, $B7, $90, $B1, $AE, $31, $BA	
000241E8 03B7 90B1 BE31 CA          SME_QQU6s_65A:	dc.b 3, $B7, $90, $B1, $BE, $31, $CA	
000241EF 03B7 9C31 D631 DA          SME_QQU6s_661:	dc.b 3, $B7, $9C, $31, $D6, $31, $DA	
000241F6 0287 A8B1 E6               SME_QQU6s_668:	dc.b 2, $87, $A8, $B1, $E6	
000241FB 0387 A831 F2B1 F6          SME_QQU6s_66D:	dc.b 3, $87, $A8, $31, $F2, $B1, $F6	
00024202 0387 A8B2 0232 0E          SME_QQU6s_674:	dc.b 3, $87, $A8, $B2, 2, $32, $E	
00024209 03B7 9C32 1232 16          SME_QQU6s_67B:	dc.b 3, $B7, $9C, $32, $12, $32, $16	
00024210 02B7 90B2 1A               SME_QQU6s_682:	dc.b 2, $B7, $90, $B2, $1A	
00024215 0432 26B7 B172 3207 BD     SME_QQU6s_687:	dc.b 4, $32, $26, $B7, $B1, $72, $32, 7, $BD	
0002421E 0532 3C52 40B7 B172 4607+  SME_QQU6s_690:	dc.b 5, $32, $3C, $52, $40, $B7, $B1, $72, $46, 7, $BD	
00024229 0572 4E17 BE77 C032 5E07+  SME_QQU6s_69B:	dc.b 5, $72, $4E, $17, $BE, $77, $C0, $32, $5E, 7, $C8	
00024234 0472 64B7 C952 7407 D5     SME_QQU6s_6A6:	dc.b 4, $72, $64, $B7, $C9, $52, $74, 7, $D5	
0002423D 0452 7CB7 C972 8207 D5     SME_QQU6s_6AF:	dc.b 4, $52, $7C, $B7, $C9, $72, $82, 7, $D5	
00024246 0532 8A52 8EB7 C972 9407+  SME_QQU6s_6B8:	dc.b 5, $32, $8A, $52, $8E, $B7, $C9, $72, $94, 7, $D5	
00024251 0572 9C17 BE77 C032 A407+  SME_QQU6s_6C3:	dc.b 5, $72, $9C, $17, $BE, $77, $C0, $32, $A4, 7, $C8	
0002425C 0572 A817 B277 B552 B007+  SME_QQU6s_6CE:	dc.b 5, $72, $A8, $17, $B2, $77, $B5, $52, $B0, 7, $BD	
00024267 0428 4508 4838 4958 4D     SME_QQU6s_6D9:	dc.b 4, $28, $45, 8, $48, $38, $49, $58, $4D	
00024270 0418 53B8 5528 6118 64     SME_QQU6s_6E2:	dc.b 4, $18, $53, $B8, $55, $28, $61, $18, $64	
00024279 0428 6638 6928 6D38 70     SME_QQU6s_6EB:	dc.b 4, $28, $66, $38, $69, $28, $6D, $38, $70	
00024282 0528 7478 7738 7F18 8308+  SME_QQU6s_6F4:	dc.b 5, $28, $74, $78, $77, $38, $7F, $18, $83, 8, $85	
0002428D 0458 8608 8C38 4958 8D     SME_QQU6s_6FF:	dc.b 4, $58, $86, 8, $8C, $38, $49, $58, $8D	
00024296 0418 93B8 9528 6108 A1     SME_QQU6s_708:	dc.b 4, $18, $93, $B8, $95, $28, $61, 8, $A1	
0002429F 0458 A238 6908 A858 A9     SME_QQU6s_711:	dc.b 4, $58, $A2, $38, $69, 8, $A8, $58, $A9	
000242A8 0528 7478 AF38 B718 BB08+  SME_QQU6s_71A:	dc.b 5, $28, $74, $78, $AF, $38, $B7, $18, $BB, 8, $85	
000242B3 0458 BD38 C338 C778 CB     SME_QQU6s_725:	dc.b 4, $58, $BD, $38, $C3, $38, $C7, $78, $CB	
000242BC 0458 D338 D938 C778 DD     SME_QQU6s_72E:	dc.b 4, $58, $D3, $38, $D9, $38, $C7, $78, $DD	
000242C5 0458 BD38 C338 C778 E5     SME_QQU6s_737:	dc.b 4, $58, $BD, $38, $C3, $38, $C7, $78, $E5	
000242CE 0458 D338 D938 C778 ED     SME_QQU6s_740:	dc.b 4, $58, $D3, $38, $D9, $38, $C7, $78, $ED	
000242D7 0228 F5B8 F8               SME_QQU6s_749:	dc.b 2, $28, $F5, $B8, $F8	
000242DC 0389 0429 0D39 10          SME_QQU6s_74E:	dc.b 3, $89, 4, $29, $D, $39, $10	
000242E3 0388 3329 0D39 10          SME_QQU6s_755:	dc.b 3, $88, $33, $29, $D, $39, $10	
000242EA 0388 3C29 0D39 10          SME_QQU6s_75C:	dc.b 3, $88, $3C, $29, $D, $39, $10	
000242F1 0389 0429 0D39 14          SME_QQU6s_763:	dc.b 3, $89, 4, $29, $D, $39, $14	
000242F8 0388 3329 0D39 14          SME_QQU6s_76A:	dc.b 3, $88, $33, $29, $D, $39, $14	
000242FF 0388 3C29 0D39 14          SME_QQU6s_771:	dc.b 3, $88, $3C, $29, $D, $39, $14	
00024306 03B9 1839 2439 28          SME_QQU6s_778:	dc.b 3, $B9, $18, $39, $24, $39, $28	
0002430D 03B9 2C39 3839 28          SME_QQU6s_77F:	dc.b 3, $B9, $2C, $39, $38, $39, $28	
00024314 03B9 3C39 4839 28          SME_QQU6s_786:	dc.b 3, $B9, $3C, $39, $48, $39, $28	
0002431B 05B9 4C19 2419 5819 3A39+  SME_QQU6s_78D:	dc.b 5, $B9, $4C, $19, $24, $19, $58, $19, $3A, $39, $28	
00024326 0479 5A59 6239 6859 6C     SME_QQU6s_798:	dc.b 4, $79, $5A, $59, $62, $39, $68, $59, $6C	
0002432F 0479 7259 6239 7A59 7E     SME_QQU6s_7A1:	dc.b 4, $79, $72, $59, $62, $39, $7A, $59, $7E	
00024338 0479 8459 6259 8C59 92     SME_QQU6s_7AA:	dc.b 4, $79, $84, $59, $62, $59, $8C, $59, $92	
00024341 0339 98B9 9C39 A8          SME_QQU6s_7B3:	dc.b 3, $39, $98, $B9, $9C, $39, $A8	
00024348 0339 ACB9 B039 BC          SME_QQU6s_7BA:	dc.b 3, $39, $AC, $B9, $B0, $39, $BC	
0002434F 0339 C0B9 C439 BC          SME_QQU6s_7C1:	dc.b 3, $39, $C0, $B9, $C4, $39, $BC	
00024356 0479 D079 D819 E039 E2     SME_QQU6s_7C8:	dc.b 4, $79, $D0, $79, $D8, $19, $E0, $39, $E2	
0002435F 0479 E679 EE19 E039 E2     SME_QQU6s_7D1:	dc.b 4, $79, $E6, $79, $EE, $19, $E0, $39, $E2	
00024368 0479 F679 FE19 E039 E2     SME_QQU6s_7DA:	dc.b 4, $79, $F6, $79, $FE, $19, $E0, $39, $E2	
00024371 025A 06BA 0C               SME_QQU6s_7E3:	dc.b 2, $5A, 6, $BA, $C	
00024376                            		even
00024376                            		even
00024376                            
00024376                            ; ---------------------------------------------------------------------------
00024376                            ; Uncompressed graphics	- Sonic
00024376                            ; ---------------------------------------------------------------------------
00024376                            Art_Sonic:	incbin	artunc\sonic.bin	; Sonic
00038696                            		even
00038696                            Art_Dust:	incbin	artunc\spindust.bin		
00039FD6                            		even
00039FD6                            ; ---------------------------------------------------------------------------
00039FD6                            ; Compressed graphics - various
00039FD6                            ; ---------------------------------------------------------------------------
00039FD6                            Nem_Smoke:	incbin	artnem\xxxsmoke.bin	; unused smoke
0003A0DA                            		even
0003A0DA                            Nem_SyzSparkle:	incbin	artnem\xxxstars.bin	; unused stars
0003A114                            		even
0003A114                            Nem_Shield:	incbin	artnem\shield.bin	; shield
0003A2AA                            		even
0003A2AA                            Nem_Stars:	incbin	artnem\invstars.bin	; invincibility stars
0003A3F2                            		even
0003A3F2                            Nem_LzSonic:	incbin	artnem\xxxlzson.bin	; unused LZ Sonic holding his breath
0003A4FC                            		even
0003A4FC                            Nem_UnkFire:	incbin	artnem\xxxfire.bin	; unused fireball
0003A54E                            		even
0003A54E                            Nem_Warp:	incbin	artnem\xxxflash.bin	; unused entry to special stage flash
0003A796                            		even
0003A796                            Nem_Goggle:	incbin	artnem\xxxgoggl.bin	; unused goggles
0003A91C                            		even
0003A91C                            ; ---------------------------------------------------------------------------
0003A91C                            ; Sprite mappings - walls of the special stage
0003A91C                            ; ---------------------------------------------------------------------------
0003A91C                            Map_SSWalls:
0003A91C                            	include "_maps\SSwalls.asm"
0003A91C                            ; ---------------------------------------------------------------------------
0003A91C                            ; Sprite mappings - walls of the special stage
0003A91C                            ; ---------------------------------------------------------------------------
0003A91C 0000 0000                  		dc.w byte_2C584-Map_SSWalls, byte_2C58A-Map_SSWalls
0003A920 0000 0000                  		dc.w byte_2C590-Map_SSWalls, byte_2C596-Map_SSWalls
0003A924 0000 0000                  		dc.w byte_2C59C-Map_SSWalls, byte_2C5A2-Map_SSWalls
0003A928 0000 0000                  		dc.w byte_2C5A8-Map_SSWalls, byte_2C5AE-Map_SSWalls
0003A92C 0000 0000                  		dc.w byte_2C5B4-Map_SSWalls, byte_2C5BA-Map_SSWalls
0003A930 0000 0000                  		dc.w byte_2C5C0-Map_SSWalls, byte_2C5C6-Map_SSWalls
0003A934 0000 0000                  		dc.w byte_2C5CC-Map_SSWalls, byte_2C5D2-Map_SSWalls
0003A938 0000 0000                  		dc.w byte_2C5D8-Map_SSWalls, byte_2C5DE-Map_SSWalls
0003A93C 01                         byte_2C584:	dc.b 1
0003A93D F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0003A942 01                         byte_2C58A:	dc.b 1
0003A943 F00F 0009 F0               		dc.b $F0, $F, 0, 9, $F0
0003A948 01                         byte_2C590:	dc.b 1
0003A949 F00F 0019 F0               		dc.b $F0, $F, 0, $19, $F0
0003A94E 01                         byte_2C596:	dc.b 1
0003A94F F00F 0029 F0               		dc.b $F0, $F, 0, $29, $F0
0003A954 01                         byte_2C59C:	dc.b 1
0003A955 F00F 0039 F0               		dc.b $F0, $F, 0, $39, $F0
0003A95A 01                         byte_2C5A2:	dc.b 1
0003A95B F00F 0049 F0               		dc.b $F0, $F, 0, $49, $F0
0003A960 01                         byte_2C5A8:	dc.b 1
0003A961 F00F 0059 F0               		dc.b $F0, $F, 0, $59, $F0
0003A966 01                         byte_2C5AE:	dc.b 1
0003A967 F00F 0069 F0               		dc.b $F0, $F, 0, $69, $F0
0003A96C 01                         byte_2C5B4:	dc.b 1
0003A96D F00F 0079 F0               		dc.b $F0, $F, 0, $79, $F0
0003A972 01                         byte_2C5BA:	dc.b 1
0003A973 F00F 0089 F0               		dc.b $F0, $F, 0, $89, $F0
0003A978 01                         byte_2C5C0:	dc.b 1
0003A979 F00F 0099 F0               		dc.b $F0, $F, 0, $99, $F0
0003A97E 01                         byte_2C5C6:	dc.b 1
0003A97F F00F 00A9 F0               		dc.b $F0, $F, 0, $A9, $F0
0003A984 01                         byte_2C5CC:	dc.b 1
0003A985 F00F 00B9 F0               		dc.b $F0, $F, 0, $B9, $F0
0003A98A 01                         byte_2C5D2:	dc.b 1
0003A98B F00F 00C9 F0               		dc.b $F0, $F, 0, $C9, $F0
0003A990 01                         byte_2C5D8:	dc.b 1
0003A991 F00F 00D9 F0               		dc.b $F0, $F, 0, $D9, $F0
0003A996 01                         byte_2C5DE:	dc.b 1
0003A997 F00F 00E9 F0               		dc.b $F0, $F, 0, $E9, $F0
0003A99C                            		even
0003A99C                            		even
0003A99C                            ; ---------------------------------------------------------------------------
0003A99C                            ; Compressed graphics - special stage
0003A99C                            ; ---------------------------------------------------------------------------
0003A99C                            Nem_SSWalls:	incbin	artnem\sswalls.bin	; special stage walls
0003B2D4                            		even
0003B2D4                            Eni_SSBg1:	incbin	mapeni\ssbg1.bin	; special stage background (mappings)
0003B408                            		even
0003B408                            Nem_SSBgFish:	incbin	artnem\ssbg1.bin	; special stage birds and fish background
0003C098                            		even
0003C098                            Eni_SSBg2:	incbin	mapeni\ssbg2.bin	; special stage background (mappings)
0003C398                            		even
0003C398                            Nem_SSBgCloud:	incbin	artnem\ssbg2.bin	; special stage clouds background
0003C88C                            		even
0003C88C                            Nem_SSGOAL:	incbin	artnem\ssgoal.bin	; special stage GOAL block
0003C97A                            		even
0003C97A                            Nem_SSRBlock:	incbin	artnem\ssr.bin		; special stage R block
0003CA4A                            		even
0003CA4A                            Nem_SS1UpBlock:	incbin	artnem\ss1up.bin	; special stage 1UP block
0003CB40                            		even
0003CB40                            Nem_SSEmStars:	incbin	artnem\ssemstar.bin	; special stage stars from a collected emerald
0003CB9E                            		even
0003CB9E                            Nem_SSRedWhite:	incbin	artnem\ssredwhi.bin	; special stage red/white block
0003CC30                            		even
0003CC30                            Nem_SSZone1:	incbin	artnem\sszone1.bin	; special stage ZONE1 block
0003CCF2                            		even
0003CCF2                            Nem_SSZone2:	incbin	artnem\sszone2.bin	; ZONE2 block
0003CDC0                            		even
0003CDC0                            Nem_SSZone3:	incbin	artnem\sszone3.bin	; ZONE3 block
0003CE8C                            		even
0003CE8C                            Nem_SSZone4:	incbin	artnem\sszone4.bin	; ZONE4 block
0003CF54                            		even
0003CF54                            Nem_SSZone5:	incbin	artnem\sszone5.bin	; ZONE5 block
0003D01E                            		even
0003D01E                            Nem_SSZone6:	incbin	artnem\sszone6.bin	; ZONE6 block
0003D0EE                            		even
0003D0EE                            Nem_SSUpDown:	incbin	artnem\ssupdown.bin	; special stage UP/DOWN block
0003D2E2                            		even
0003D2E2                            Nem_SSEmerald:	incbin	artnem\ssemeral.bin	; special stage chaos emeralds
0003D44A                            		even
0003D44A                            Nem_SSGhost:	incbin	artnem\ssghost.bin	; special stage ghost block
0003D4FA                            		even
0003D4FA                            Nem_SSWBlock:	incbin	artnem\ssw.bin		; special stage W block
0003D5D4                            		even
0003D5D4                            Nem_SSGlass:	incbin	artnem\ssglass.bin	; special stage destroyable glass block
0003D658                            		even
0003D658                            Nem_ResultEm:	incbin	artnem\ssresems.bin	; chaos emeralds on special stage results screen
0003D7D6                            		even
0003D7D6                            ; ---------------------------------------------------------------------------
0003D7D6                            ; Compressed graphics - GHZ stuff
0003D7D6                            ; ---------------------------------------------------------------------------
0003D7D6                            Nem_Stalk:	incbin	artnem\ghzstalk.bin	; GHZ flower stalk
0003D820                            		even
0003D820                            Nem_Swing:	incbin	artnem\ghzswing.bin	; GHZ swinging platform
0003D93A                            		even
0003D93A                            Nem_Bridge:	incbin	artnem\ghzbridg.bin	; GHZ bridge
0003DA26                            		even
0003DA26                            Nem_GhzUnkBlock:incbin	artnem\xxxghzbl.bin	; unused GHZ block
0003DA6E                            		even
0003DA6E                            Nem_Ball:	incbin	artnem\ghzball.bin	; GHZ giant ball
0003DC0C                            		even
0003DC0C                            Nem_Spikes:	incbin	artnem\spikes.bin	; spikes
0003DC88                            		even
0003DC88                            Nem_GhzLog:	incbin	artnem\xxxghzlo.bin	; unused GHZ log
0003DE9C                            		even
0003DE9C                            Nem_SpikePole:	incbin	artnem\ghzlog.bin	; GHZ spiked log
0003DFC8                            		even
0003DFC8                            Nem_PplRock:	incbin	artnem\ghzrock.bin	; GHZ purple rock
0003E0F6                            		even
0003E0F6                            Nem_GhzWall1:	incbin	artnem\ghzwall1.bin	; GHZ destroyable wall
0003E194                            		even
0003E194                            Nem_GhzWall2:	incbin	artnem\ghzwall2.bin	; GHZ normal wall
0003E1F4                            		even
0003E1F4                            ; ---------------------------------------------------------------------------
0003E1F4                            ; Compressed graphics - LZ stuff
0003E1F4                            ; ---------------------------------------------------------------------------
0003E1F4                            Nem_Water:	incbin	artnem\lzwater.bin	; LZ water surface
0003E318                            		even
0003E318                            Nem_Splash:	incbin	artnem\lzsplash.bin	; LZ waterfalls and splashes
0003EB0C                            		even
0003EB0C                            Nem_LzSpikeBall:incbin	artnem\lzspball.bin	; LZ spiked ball on chain
0003EC8C                            		even
0003EC8C                            Nem_FlapDoor:	incbin	artnem\lzflapdo.bin	; LZ flapping door
0003EDF6                            		even
0003EDF6                            Nem_Bubbles:	incbin	artnem\lzbubble.bin	; LZ bubbles and countdown numbers
0003F44C                            		even
0003F44C                            Nem_LzBlock3:	incbin	artnem\lzblock3.bin	; LZ 32x16 block
0003F502                            		even
0003F502                            Nem_LzDoor1:	incbin	artnem\lzvdoor.bin	; LZ vertical door
0003F5A4                            		even
0003F5A4                            Nem_Harpoon:	incbin	artnem\lzharpoo.bin	; LZ harpoon
0003F700                            		even
0003F700                            Nem_LzPole:	incbin	artnem\lzpole.bin	; LZ pole that breaks
0003F764                            		even
0003F764                            Nem_LzDoor2:	incbin	artnem\lzhdoor.bin	; LZ large horizontal door
0003F8B6                            		even
0003F8B6                            Nem_LzWheel:	incbin	artnem\lzwheel.bin	; LZ wheel from corner of conveyor belt
0003FD98                            		even
0003FD98                            Nem_Gargoyle:	incbin	artnem\lzgargoy.bin	; LZ gargoyle head and spitting fire
0003FF08                            		even
0003FF08                            Nem_LzBlock2:	incbin	artnem\lzblock2.bin	; LZ blocks
000401C0                            		even
000401C0                            Nem_LzPlatfm:	incbin	artnem\lzptform.bin	; LZ rising platforms
000402F8                            		even
000402F8                            Nem_Cork:	incbin	artnem\lzcork.bin	; LZ cork block
00040422                            		even
00040422                            Nem_LzBlock1:	incbin	artnem\lzblock1.bin	; LZ 32x32 block
00040532                            		even
00040532                            ; ---------------------------------------------------------------------------
00040532                            ; Compressed graphics - MZ stuff
00040532                            ; ---------------------------------------------------------------------------
00040532                            Nem_MzMetal:	incbin	artnem\mzmetal.bin	; MZ metal blocks
000407C0                            		even
000407C0                            Nem_MzSwitch:	incbin	artnem\mzswitch.bin	; MZ switch
0004087E                            		even
0004087E                            Nem_MzGlass:	incbin	artnem\mzglassy.bin	; MZ green glassy block
00040936                            		even
00040936                            Nem_GhzGrass:	incbin	artnem\xxxgrass.bin	; unused grass (GHZ or MZ?)
0004098A                            		even
0004098A                            Nem_MzFire:	incbin	artnem\mzfire.bin	; MZ fireballs
00040C68                            		even
00040C68                            Nem_Lava:	incbin	artnem\mzlava.bin	; MZ lava
0004157E                            		even
0004157E                            Nem_MzBlock:	incbin	artnem\mzblock.bin	; MZ green pushable block
000416E2                            		even
000416E2                            Nem_MzUnkBlock:	incbin	artnem\xxxmzblo.bin	; MZ unused background block
0004176A                            		even
0004176A                            ; ---------------------------------------------------------------------------
0004176A                            ; Compressed graphics - SLZ stuff
0004176A                            ; ---------------------------------------------------------------------------
0004176A                            Nem_Seesaw:	incbin	artnem\slzseesa.bin	; SLZ seesaw
000419A6                            		even
000419A6                            Nem_SlzSpike:	incbin	artnem\slzspike.bin	; SLZ spikeball that sits on a seesaw
00041AEC                            		even
00041AEC                            Nem_Fan:	incbin	artnem\slzfan.bin	; SLZ fan
00041D30                            		even
00041D30                            Nem_SlzWall:	incbin	artnem\slzwall.bin	; SLZ smashable wall
00041D92                            		even
00041D92                            Nem_Pylon:	incbin	artnem\slzpylon.bin	; SLZ foreground pylon
00041E74                            		even
00041E74                            Nem_SlzSwing:	incbin	artnem\slzswing.bin	; SLZ swinging platform
00042056                            		even
00042056                            Nem_SlzBlock:	incbin	artnem\slzblock.bin	; SLZ 32x32 block
00042162                            		even
00042162                            Nem_SlzCannon:	incbin	artnem\slzcanno.bin	; SLZ fireball launcher cannon
00042206                            		even
00042206                            ; ---------------------------------------------------------------------------
00042206                            ; Compressed graphics - SYZ stuff
00042206                            ; ---------------------------------------------------------------------------
00042206                            Nem_Bumper:	incbin	artnem\syzbumpe.bin	; SYZ bumper
00042370                            		even
00042370                            Nem_SyzSpike2:	incbin	artnem\syzsspik.bin	; SYZ small spikeball
000423D2                            		even
000423D2                            Nem_LzSwitch:	incbin	artnem\switch.bin	; LZ/SYZ/SBZ switch
000424B4                            		even
000424B4                            Nem_SyzSpike1:	incbin	artnem\syzlspik.bin	; SYZ/SBZ large spikeball
00042742                            		even
00042742                            ; ---------------------------------------------------------------------------
00042742                            ; Compressed graphics - SBZ stuff
00042742                            ; ---------------------------------------------------------------------------
00042742                            Nem_SbzWheel1:	incbin	artnem\sbzwhee1.bin	; SBZ spot on rotating wheel that Sonic runs around
00042796                            		even
00042796                            Nem_SbzWheel2:	incbin	artnem\sbzwhee2.bin	; SBZ wheel that grabs Sonic
00042A32                            		even
00042A32                            Nem_Cutter:	incbin	artnem\sbzcutte.bin	; SBZ pizza cutter
00042C36                            		even
00042C36                            Nem_Stomper:	incbin	artnem\sbzstomp.bin	; SBZ stomper
00042DD4                            		even
00042DD4                            Nem_SpinPform:	incbin	artnem\sbzpform.bin	; SBZ spinning platform
00043104                            		even
00043104                            Nem_TrapDoor:	incbin	artnem\sbztrapd.bin	; SBZ trapdoor
000432E2                            		even
000432E2                            Nem_SbzFloor:	incbin	artnem\sbzfloor.bin	; SBZ collapsing floor
0004333A                            		even
0004333A                            Nem_Electric:	incbin	artnem\sbzshock.bin	; SBZ electric shock orb
000434BA                            		even
000434BA                            Nem_SbzBlock:	incbin	artnem\sbzvanis.bin	; SBZ vanishing block
000435B8                            		even
000435B8                            Nem_FlamePipe:	incbin	artnem\sbzflame.bin	; SBZ flaming pipe
00043744                            		even
00043744                            Nem_SbzDoor1:	incbin	artnem\sbzvdoor.bin	; SBZ small vertical door
00043794                            		even
00043794                            Nem_SlideFloor:	incbin	artnem\sbzslide.bin	; SBZ floor that slides away
000437EC                            		even
000437EC                            Nem_SbzDoor2:	incbin	artnem\sbzhdoor.bin	; SBZ large horizontal door
000438E8                            		even
000438E8                            Nem_Girder:	incbin	artnem\sbzgirde.bin	; SBZ crushing girder
000439FE                            		even
000439FE                            ; ---------------------------------------------------------------------------
000439FE                            ; Compressed graphics - enemies
000439FE                            ; ---------------------------------------------------------------------------
000439FE                            Nem_BallHog:	incbin	artnem\ballhog.bin	; ball hog
00043DBE                            		even
00043DBE                            Nem_Crabmeat:	incbin	artnem\crabmeat.bin	; crabmeat
000442AC                            		even
000442AC                            Nem_Buzz:	incbin	artnem\buzzbomb.bin	; buzz bomber
00044652                            		even
00044652                            Nem_UnkExplode:	incbin	artnem\xxxexplo.bin	; unused explosion
0004483A                            		even
0004483A                            Nem_Burrobot:	incbin	artnem\burrobot.bin	; burrobot
00044F24                            		even
00044F24                            Nem_Chopper:	incbin	artnem\chopper.bin	; chopper
0004518C                            		even
0004518C                            Nem_Jaws:	incbin	artnem\jaws.bin		; jaws
00045416                            		even
00045416                            Nem_Roller:	incbin	artnem\roller.bin	; roller
0004593A                            		even
0004593A                            Nem_Motobug:	incbin	artnem\motobug.bin	; moto bug
00045BC4                            		even
00045BC4                            Nem_Newtron:	incbin	artnem\newtron.bin	; newtron
000461E2                            		even
000461E2                            Nem_Yadrin:	incbin	artnem\yadrin.bin	; yadrin
000465CA                            		even
000465CA                            Nem_Basaran:	incbin	artnem\basaran.bin	; basaran
000468C6                            		even
000468C6                            Nem_Splats:	incbin	artnem\splats.bin	; splats
00046B0E                            		even
00046B0E                            Nem_Bomb:	incbin	artnem\bomb.bin		; bomb
00046DA6                            		even
00046DA6                            Nem_Orbinaut:	incbin	artnem\orbinaut.bin	; orbinaut
00046F84                            		even
00046F84                            Nem_Cater:	incbin	artnem\caterkil.bin	; caterkiller
00047112                            		even
00047112                            ; ---------------------------------------------------------------------------
00047112                            ; Compressed graphics - various
00047112                            ; ---------------------------------------------------------------------------
00047112                            Nem_TitleCard:	incbin	artnem\ttlcards.bin	; title cards
00047720                            		even
00047720                            Nem_Hud:	incbin	artnem\hud.bin		; HUD (rings, time, score)
00047816                            		even
00047816                            Nem_Lives:	incbin	artnem\lifeicon.bin	; life counter icon
0004791C                            		even
0004791C                            Nem_Ring:	incbin	artnem\rings.bin	; rings
00047A10                            		even
00047A10                            Nem_Monitors:	incbin	artnem\monitors.bin	; monitors
00047E70                            		even
00047E70                            Nem_Explode:	incbin	artnem\explosio.bin	; explosion
000484D6                            		even
000484D6                            Nem_Points:	incbin	artnem\points.bin	; points from destroyed enemy or object
00048586                            		even
00048586                            Nem_GameOver:	incbin	artnem\gameover.bin	; game over / time over
00048718                            		even
00048718                            Nem_HSpring:	incbin	artnem\springh.bin	; horizontal spring
0004881A                            		even
0004881A                            Nem_VSpring:	incbin	artnem\springv.bin	; vertical spring
000488F6                            		even
000488F6                            ArtNem_DignlSprng:	incbin	"artnem\Diagonal spring.bin" ; diagonal spring
00048ACA 00                         		even
00048ACA                            Nem_SignPost:	incbin	artnem\signpost.bin	; end of level signpost
00048F46                            		even
00048F46                            Nem_Lamp:	incbin	artnem\lamppost.bin	; lamppost
00049006                            		even
00049006                            Nem_BigFlash:	incbin	artnem\rngflash.bin	; flash from giant ring
0004917A                            		even
0004917A                            Nem_Bonus:	incbin	artnem\bonus.bin	; hidden bonuses at end of a level
0004947C                            		even
0004947C                            ; ---------------------------------------------------------------------------
0004947C                            ; Compressed graphics - continue screen
0004947C                            ; ---------------------------------------------------------------------------
0004947C                            Nem_ContSonic:	incbin	artnem\cntsonic.bin	; Sonic on continue screen
0004972C                            		even
0004972C                            Nem_MiniSonic:	incbin	artnem\cntother.bin	; mini Sonic and text on continue screen
00049966                            		even
00049966                            ; ---------------------------------------------------------------------------
00049966                            ; Compressed graphics - animals
00049966                            ; ---------------------------------------------------------------------------
00049966                            Nem_Rabbit:	incbin	artnem\rabbit.bin	; rabbit
00049ABE                            		even
00049ABE                            Nem_Chicken:	incbin	artnem\chicken.bin	; chicken
00049C1A                            		even
00049C1A                            Nem_BlackBird:	incbin	artnem\blackbrd.bin	; blackbird
00049D96                            		even
00049D96                            Nem_Seal:	incbin	artnem\seal.bin		; seal
00049EB2                            		even
00049EB2                            Nem_Pig:	incbin	artnem\pig.bin		; pig
00049FE8                            		even
00049FE8                            Nem_Flicky:	incbin	artnem\flicky.bin	; flicky
0004A122                            		even
0004A122                            Nem_Squirrel:	incbin	artnem\squirrel.bin	; squirrel
0004A27E                            		even
0004A27E                            ; ---------------------------------------------------------------------------
0004A27E                            ; Compressed graphics - primary patterns and block mappings
0004A27E                            ; ---------------------------------------------------------------------------
0004A27E                            Blk16_GHZ:	incbin	map16\ghz.bin
0004AB92                            		even
0004AB92                            Nem_GHZ:	incbin	artnem\8x8ghz.bin	; GHZ primary patterns
0004C1A4                            		even
0004C1A4                            Nem_GHZ_1st:	incbin	artnem\8x8ghz1.bin	; Title Screen and Ending only
0004D804                            		even
0004D804                            Nem_GHZ_2nd:	incbin	artnem\8x8ghz2.bin	; Title Screen and Ending only
0004EBAC                            		even
0004EBAC                            Blk256_GHZ:	incbin	map256\ghz.bin
00050C66                            		even
00050C66                            Blk16_TS:	incbin	map16\ts.bin
00050D68                            		even
00050D68                            Nem_TS_1st:	incbin	artnem\8x8ts1.bin; GHZ primary patterns
000519BE                            		even
000519BE                            Blk256_TS:	incbin	map256\ts.bin
00051F0C                            		even
00051F0C                            Blk16_LZ:	incbin	map16\lz.bin
00052236                            		even
00052236                            Nem_LZ:		incbin	artnem\8x8lz.bin	; LZ primary patterns
00053D7E                            		even
00053D7E                            Blk256_LZ:	incbin	map256\lz.bin
0005656E                            		even
0005656E                            Blk16_MZ:	incbin	map16\mz.bin
00056D78                            		even
00056D78                            Nem_MZ:		incbin	artnem\8x8mz.bin	; MZ primary patterns
000595BC                            		even
000595BC                            Blk256_MZ:	incbin	map256\mz.bin
0005AD7C                            		even
0005AD7C                            Blk16_SLZ:	incbin	map16\slz.bin
0005B560                            		even
0005B560                            Nem_SLZ:	incbin	artnem\8x8slz.bin	; SLZ primary patterns
0005F0B4                            		even
0005F0B4                            Blk256_SLZ:	incbin	map256\slz.bin
000614E4                            		even
000614E4                            Blk16_SYZ:	incbin	map16\syz.bin
00061E52                            		even
00061E52                            Nem_SYZ:	incbin	artnem\8x8syz.bin	; SYZ primary patterns
0006557E                            		even
0006557E                            Blk256_SYZ:	incbin	map256\syz.bin
0006792E                            		even
0006792E                            Blk16_SBZ:	incbin	map16\sbz.bin
000687C8                            		even
000687C8                            Nem_SBZ:	incbin	artnem\8x8sbz.bin	; SBZ primary patterns
0006AF74                            		even
0006AF74                            Blk256_SBZ:	incbin	map256\sbz.bin
0006D9C4                            		even
0006D9C4                            ; ---------------------------------------------------------------------------
0006D9C4                            ; Compressed graphics - bosses and ending sequence
0006D9C4                            ; ---------------------------------------------------------------------------
0006D9C4                            Nem_Eggman:	incbin	artnem\bossmain.bin	; boss main patterns
0006E228                            		even
0006E228                            Nem_Weapons:	incbin	artnem\bossxtra.bin	; boss add-ons and weapons
0006E512                            		even
0006E512                            Nem_Prison:	incbin	artnem\prison.bin	; prison capsule
0006ED96                            		even
0006ED96                            Nem_Sbz2Eggman:	incbin	artnem\sbz2boss.bin	; Eggman in SBZ2 and FZ
0006F5C2                            		even
0006F5C2                            Nem_FzBoss:	incbin	artnem\fzboss.bin	; FZ boss
0006FD2A                            		even
0006FD2A                            Nem_FzEggman:	incbin	artnem\fzboss2.bin	; Eggman after the FZ boss
000702AA                            		even
000702AA                            Nem_Exhaust:	incbin	artnem\bossflam.bin	; boss exhaust flame
000703CA                            		even
000703CA                            Nem_EndEm:	incbin	artnem\endemera.bin	; ending sequence chaos emeralds
000705C8                            		even
000705C8                            Nem_EndSonic:	incbin	artnem\endsonic.bin	; ending sequence Sonic
000717A6                            		even
000717A6                            Nem_TryAgain:	incbin	artnem\tryagain.bin	; ending "try again" screen
000720EA                            		even
000720EA                            Nem_EndEggman:	incbin	artnem\xxxend.bin	; unused boss sequence on ending
000724C0                            		even
000724C0                            Kos_EndFlowers:	incbin	artkos\flowers.bin	; ending sequence animated flowers
00072A50                            		even
00072A50                            Nem_EndFlower:	incbin	artnem\endflowe.bin	; ending sequence flowers
00072CD8                            		even
00072CD8                            Nem_CreditText:	incbin	artnem\credits.bin	; credits alphabet
000732D6                            		even
000732D6                            Nem_EndStH:	incbin	artnem\endtext.bin	; ending sequence "Sonic the Hedgehog" text
0007355E                            		even
0007355E                            		incbin	misc\padding2.bin
00073662                            		even
00073662                            ; ---------------------------------------------------------------------------
00073662                            ; Collision data
00073662                            ; ---------------------------------------------------------------------------
00073662                            AngleMap:	incbin	collide\anglemap.bin	; floor angle map
00073762                            		even
00073762                            CollArray1:	incbin	collide\carray_n.bin	; normal collision array
00074762                            		even
00074762                            CollArray2:	incbin	collide\carray_r.bin	; rotated collision array
00075762                            		even
00075762                            Col_GHZ:	incbin	collide\ghz.bin		; GHZ index
0007591A 00                         		even
0007591A                            Col_LZ:		incbin	collide\lz.bin		; LZ index
000759E2                            		even
000759E2                            Col_MZ:		incbin	collide\mz.bin		; MZ index
00075B72                            		even
00075B72                            Col_SLZ:	incbin	collide\slz.bin		; SLZ index
00075D66                            		even
00075D66                            Col_SYZ:	incbin	collide\syz.bin		; SYZ index
00075F5A                            		even
00075F5A                            Col_SBZ:	incbin	collide\sbz.bin		; SBZ index
000761B2                            		even
000761B2                            ; ---------------------------------------------------------------------------
000761B2                            ; Special layouts
000761B2                            ; ---------------------------------------------------------------------------
000761B2                            SS_1:		incbin	sslayout\1.bin
0007642C                            		even
0007642C                            SS_2:		incbin	sslayout\2.bin
0007683E                            		even
0007683E                            SS_3:		incbin	sslayout\3.bin
00076B9A                            		even
00076B9A                            SS_4:		incbin	sslayout\4.bin
00077074                            		even
00077074                            SS_5:		incbin	sslayout\5.bin
00077546                            		even
00077546                            SS_6:		incbin	sslayout\6.bin
00077856                            		even
00077856                            ; ---------------------------------------------------------------------------
00077856                            ; Animated uncompressed graphics
00077856                            ; ---------------------------------------------------------------------------
00077856                            Art_GhzWater:	incbin	artunc\ghzwater.bin	; GHZ waterfall
00077A56                            		even
00077A56                            Art_GhzFlower1:	incbin	artunc\ghzflowl.bin	; GHZ large flower
00077E56                            		even
00077E56                            Art_GhzFlower2:	incbin	artunc\ghzflows.bin	; GHZ small flower
000782D6                            		even
000782D6                            Art_MzLava1:	incbin	artunc\mzlava1.bin	; MZ lava surface
000785D6                            		even
000785D6                            Art_MzLava2:	incbin	artunc\mzlava2.bin	; MZ lava
00078BD6                            		even
00078BD6                            Art_MzTorch:	incbin	artunc\mztorch.bin	; MZ torch in background
00078ED6                            		even
00078ED6                            Art_SbzSmoke:	incbin	artunc\sbzsmoke.bin	; SBZ smoke in background
00079956                            		even
00079956                            
00079956                            ; ---------------------------------------------------------------------------
00079956                            ; Level	layout index
00079956                            ; ---------------------------------------------------------------------------
00079956 0000 0000 0000             Level_Index:	dc.w Level_GHZ1-Level_Index, Level_GHZbg-Level_Index, byte_68D70-Level_Index
0007995C 0000 0000 0000             		dc.w Level_GHZ2-Level_Index, Level_GHZbg-Level_Index, byte_68E3C-Level_Index
00079962 0000 0000 0000             		dc.w Level_GHZ3-Level_Index, Level_GHZbg-Level_Index, byte_68F84-Level_Index
00079968 0000 0000 0000             		dc.w byte_68F88-Level_Index, byte_68F88-Level_Index, byte_68F88-Level_Index
0007996E 0000 0000 0000             		dc.w Level_LZ1-Level_Index, Level_LZbg-Level_Index, byte_69190-Level_Index
00079974 0000 0000 0000             		dc.w Level_LZ2-Level_Index, Level_LZbg-Level_Index, byte_6922E-Level_Index
0007997A 0000 0000 0000             		dc.w Level_LZ3-Level_Index, Level_LZbg-Level_Index, byte_6934C-Level_Index
00079980 0000 0000 0000             		dc.w Level_SBZ3-Level_Index, Level_LZbg-Level_Index, byte_6940A-Level_Index
00079986 0000 0000 0000             		dc.w Level_MZ1-Level_Index, Level_MZ1bg-Level_Index, Level_MZ1-Level_Index
0007998C 0000 0000 0000             		dc.w Level_MZ2-Level_Index, Level_MZ2bg-Level_Index, byte_6965C-Level_Index
00079992 0000 0000 0000             		dc.w Level_MZ3-Level_Index, Level_MZ3bg-Level_Index, byte_697E6-Level_Index
00079998 0000 0000 0000             		dc.w byte_697EA-Level_Index, byte_697EA-Level_Index, byte_697EA-Level_Index
0007999E 0000 0000 0000             		dc.w Level_SLZ1-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
000799A4 0000 0000 0000             		dc.w Level_SLZ2-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
000799AA 0000 0000 0000             		dc.w Level_SLZ3-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
000799B0 0000 0000 0000             		dc.w byte_69B84-Level_Index, byte_69B84-Level_Index, byte_69B84-Level_Index
000799B6 0000 0000 0000             		dc.w Level_SYZ1-Level_Index, Level_SYZbg-Level_Index, byte_69C7E-Level_Index
000799BC 0000 0000 0000             		dc.w Level_SYZ2-Level_Index, Level_SYZbg-Level_Index, byte_69D86-Level_Index
000799C2 0000 0000 0000             		dc.w Level_SYZ3-Level_Index, Level_SYZbg-Level_Index, byte_69EE4-Level_Index
000799C8 0000 0000 0000             		dc.w byte_69EE8-Level_Index, byte_69EE8-Level_Index, byte_69EE8-Level_Index
000799CE 0000 0000 0000             		dc.w Level_SBZ1-Level_Index, Level_SBZ1bg-Level_Index, Level_SBZ1bg-Level_Index
000799D4 0000 0000 0000             		dc.w Level_SBZ2-Level_Index, Level_SBZ2bg-Level_Index, Level_SBZ2bg-Level_Index
000799DA 0000 0000 0000             		dc.w Level_SBZ2-Level_Index, Level_SBZ2bg-Level_Index, byte_6A2F8-Level_Index
000799E0 0000 0000 0000             		dc.w byte_6A2FC-Level_Index, byte_6A2FC-Level_Index, byte_6A2FC-Level_Index
000799E6 0000 0000 0000             		dc.w Level_End-Level_Index, Level_GHZbg-Level_Index, byte_6A320-Level_Index
000799EC 0000 0000 0000             		dc.w Level_End-Level_Index, Level_GHZbg-Level_Index, byte_6A320-Level_Index
000799F2 0000 0000 0000             		dc.w byte_6A320-Level_Index, byte_6A320-Level_Index, byte_6A320-Level_Index
000799F8 0000 0000 0000             		dc.w byte_6A320-Level_Index, byte_6A320-Level_Index, byte_6A320-Level_Index
000799FE                            
000799FE                            Level_GHZ1:	incbin	levels\ghz1.bin
00079AF0                            		even
00079AF0 0000 0000                  byte_68D70:	dc.b 0,	0, 0, 0
00079AF4                            Level_GHZ2:	incbin	levels\ghz2.bin
00079BBC                            		even
00079BBC 0000 0000                  byte_68E3C:	dc.b 0,	0, 0, 0
00079BC0                            Level_GHZ3:	incbin	levels\ghz3.bin
00079CE2                            		even
00079CE2                            Level_GHZbg:	incbin	levels\ghzbg.bin
00079D04                            		even
00079D04 0000 0000                  byte_68F84:	dc.b 0,	0, 0, 0
00079D08 0000 0000                  byte_68F88:	dc.b 0,	0, 0, 0
00079D0C                            
00079D0C                            Level_LZ1:	incbin	levels\lz1.bin
00079E0E                            		even
00079E0E                            Level_LZbg:	incbin	levels\lzbg.bin
00079F10                            		even
00079F10 0000 0000                  byte_69190:	dc.b 0,	0, 0, 0
00079F14                            Level_LZ2:	incbin	levels\lz2.bin
00079FAE                            		even
00079FAE 0000 0000                  byte_6922E:	dc.b 0,	0, 0, 0
00079FB2                            Level_LZ3:	incbin	levels\lz3.bin
0007A0CC                            		even
0007A0CC 0000 0000                  byte_6934C:	dc.b 0,	0, 0, 0
0007A0D0                            Level_SBZ3:	incbin	levels\sbz3.bin
0007A18A                            		even
0007A18A 0000 0000                  byte_6940A:	dc.b 0,	0, 0, 0
0007A18E                            
0007A18E                            Level_MZ1:	incbin	levels\mz1.bin
0007A22C                            		even
0007A22C                            Level_MZ1bg:	incbin	levels\mz1bg.bin
0007A2A6                            		even
0007A2A6                            Level_MZ2:	incbin	levels\mz2.bin
0007A34A                            		even
0007A34A                            Level_MZ2bg:	incbin	levels\mz2bg.bin
0007A3DC                            		even
0007A3DC 0000 0000                  byte_6965C:	dc.b 0,	0, 0, 0
0007A3E0                            Level_MZ3:	incbin	levels\mz3.bin
0007A4C2                            		even
0007A4C2                            Level_MZ3bg:	incbin	levels\mz3bg.bin
0007A566                            		even
0007A566 0000 0000                  byte_697E6:	dc.b 0,	0, 0, 0
0007A56A 0000 0000                  byte_697EA:	dc.b 0,	0, 0, 0
0007A56E                            
0007A56E                            Level_SLZ1:	incbin	levels\slz1.bin
0007A680                            		even
0007A680                            Level_SLZbg:	incbin	levels\slzbg.bin
0007A6FA                            		even
0007A6FA                            Level_SLZ2:	incbin	levels\slz2.bin
0007A7EA                            		even
0007A7EA                            Level_SLZ3:	incbin	levels\slz3.bin
0007A904                            		even
0007A904 0000 0000                  byte_69B84:	dc.b 0,	0, 0, 0
0007A908                            
0007A908                            Level_SYZ1:	incbin	levels\syz1.bin
0007A9C4                            		even
0007A9C4                            Level_SYZbg:	incbin	levels\syzbg.bin
0007A9FE                            		even
0007A9FE 0000 0000                  byte_69C7E:	dc.b 0,	0, 0, 0
0007AA02                            Level_SYZ2:	incbin	levels\syz2.bin
0007AB06                            		even
0007AB06 0000 0000                  byte_69D86:	dc.b 0,	0, 0, 0
0007AB0A                            Level_SYZ3:	incbin	levels\syz3.bin
0007AC64                            		even
0007AC64 0000 0000                  byte_69EE4:	dc.b 0,	0, 0, 0
0007AC68 0000 0000                  byte_69EE8:	dc.b 0,	0, 0, 0
0007AC6C                            
0007AC6C                            Level_SBZ1:	incbin	levels\sbz1.bin
0007AD8E                            		even
0007AD8E                            Level_SBZ1bg:	incbin	levels\sbz1bg.bin
0007ADCC                            		even
0007ADCC                            Level_SBZ2:	incbin	levels\sbz2.bin
0007AF0E                            		even
0007AF0E                            Level_SBZ2bg:	incbin	levels\sbz2bg.bin
0007B078                            		even
0007B078 0000 0000                  byte_6A2F8:	dc.b 0,	0, 0, 0
0007B07C 0000 0000                  byte_6A2FC:	dc.b 0,	0, 0, 0
0007B080                            Level_End:	incbin	levels\ending.bin
0007B0B0 00                         		even
0007B0B0 0000 0000                  byte_6A320:	dc.b 0,	0, 0, 0
0007B0B4                            
0007B0B4                            ; ---------------------------------------------------------------------------
0007B0B4                            ; Animated uncompressed giant ring graphics
0007B0B4                            ; ---------------------------------------------------------------------------
0007B0B4                            Art_BigRing:	incbin	artunc\bigring.bin
0007BCF4                            		even
0007BCF4                            
0007BCF4                            		incbin	misc\padding3.bin
0007BD90                            		even
0007BD90                            
0007BD90                            ; ---------------------------------------------------------------------------
0007BD90                            ; Sprite locations index
0007BD90                            ; ---------------------------------------------------------------------------
0007BD90 0000 0000                  ObjPos_Index:	dc.w ObjPos_GHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007BD94 0000 0000                  		dc.w ObjPos_GHZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007BD98 0000 0000                  		dc.w ObjPos_GHZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007BD9C 0000 0000                  		dc.w ObjPos_GHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007BDA0 0000 0000                  		dc.w ObjPos_LZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007BDA4 0000 0000                  		dc.w ObjPos_LZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007BDA8 0000 0000                  		dc.w ObjPos_LZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007BDAC 0000 0000                  		dc.w ObjPos_SBZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007BDB0 0000 0000                  		dc.w ObjPos_MZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007BDB4 0000 0000                  		dc.w ObjPos_MZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007BDB8 0000 0000                  		dc.w ObjPos_MZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007BDBC 0000 0000                  		dc.w ObjPos_MZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007BDC0 0000 0000                  		dc.w ObjPos_SLZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007BDC4 0000 0000                  		dc.w ObjPos_SLZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007BDC8 0000 0000                  		dc.w ObjPos_SLZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007BDCC 0000 0000                  		dc.w ObjPos_SLZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007BDD0 0000 0000                  		dc.w ObjPos_SYZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007BDD4 0000 0000                  		dc.w ObjPos_SYZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007BDD8 0000 0000                  		dc.w ObjPos_SYZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007BDDC 0000 0000                  		dc.w ObjPos_SYZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007BDE0 0000 0000                  		dc.w ObjPos_SBZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007BDE4 0000 0000                  		dc.w ObjPos_SBZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007BDE8 0000 0000                  		dc.w ObjPos_FZ-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007BDEC 0000 0000                  		dc.w ObjPos_SBZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007BDF0 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007BDF4 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007BDF8 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007BDFC 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007BE00 0000 0000                  		dc.w ObjPos_LZ1pf1-ObjPos_Index, ObjPos_LZ1pf2-ObjPos_Index
0007BE04 0000 0000                  		dc.w ObjPos_LZ2pf1-ObjPos_Index, ObjPos_LZ2pf2-ObjPos_Index
0007BE08 0000 0000                  		dc.w ObjPos_LZ3pf1-ObjPos_Index, ObjPos_LZ3pf2-ObjPos_Index
0007BE0C 0000 0000                  		dc.w ObjPos_LZ1pf1-ObjPos_Index, ObjPos_LZ1pf2-ObjPos_Index
0007BE10 0000 0000                  		dc.w ObjPos_SBZ1pf1-ObjPos_Index, ObjPos_SBZ1pf2-ObjPos_Index
0007BE14 0000 0000                  		dc.w ObjPos_SBZ1pf3-ObjPos_Index, ObjPos_SBZ1pf4-ObjPos_Index
0007BE18 0000 0000                  		dc.w ObjPos_SBZ1pf5-ObjPos_Index, ObjPos_SBZ1pf6-ObjPos_Index
0007BE1C 0000 0000                  		dc.w ObjPos_SBZ1pf1-ObjPos_Index, ObjPos_SBZ1pf2-ObjPos_Index
0007BE20 FFFF 0000 0000             		dc.b $FF, $FF, 0, 0, 0,	0
0007BE26                            ObjPos_GHZ1:	incbin	objpos\ghz1.bin
0007C330                            		even
0007C330                            ObjPos_GHZ2:	incbin	objpos\ghz2.bin
0007C8EE                            		even
0007C8EE                            ObjPos_GHZ3:	incbin	objpos\ghz3.bin
0007CFA8                            		even
0007CFA8                            ObjPos_LZ1:	incbin	objpos\lz1.bin
0007D416                            		even
0007D416                            ObjPos_LZ2:	incbin	objpos\lz2.bin
0007D758                            		even
0007D758                            ObjPos_LZ3:	incbin	objpos\lz3.bin
0007DD3A                            		even
0007DD3A                            ObjPos_SBZ3:	incbin	objpos\sbz3.bin
0007E1D2                            		even
0007E1D2                            ObjPos_LZ1pf1:	incbin	objpos\lz1pf1.bin
0007E204                            		even
0007E204                            ObjPos_LZ1pf2:	incbin	objpos\lz1pf2.bin
0007E236                            		even
0007E236                            ObjPos_LZ2pf1:	incbin	objpos\lz2pf1.bin
0007E268                            		even
0007E268                            ObjPos_LZ2pf2:	incbin	objpos\lz2pf2.bin
0007E29A                            		even
0007E29A                            ObjPos_LZ3pf1:	incbin	objpos\lz3pf1.bin
0007E2E4                            		even
0007E2E4                            ObjPos_LZ3pf2:	incbin	objpos\lz3pf2.bin
0007E322                            		even
0007E322                            ObjPos_MZ1:	incbin	objpos\mz1.bin
0007E68E                            		even
0007E68E                            ObjPos_MZ2:	incbin	objpos\mz2.bin
0007EB38                            		even
0007EB38                            ObjPos_MZ3:	incbin	objpos\mz3.bin
0007F0AE                            		even
0007F0AE                            ObjPos_SLZ1:	incbin	objpos\slz1.bin
0007F5EE                            		even
0007F5EE                            ObjPos_SLZ2:	incbin	objpos\slz2.bin
0007FA56                            		even
0007FA56                            ObjPos_SLZ3:	incbin	objpos\slz3.bin
00080038                            		even
00080038                            ObjPos_SYZ1:	incbin	objpos\syz1.bin
000804C4                            		even
000804C4                            ObjPos_SYZ2:	incbin	objpos\syz2.bin
00080A2E                            		even
00080A2E                            ObjPos_SYZ3:	incbin	objpos\syz3.bin
00081034                            		even
00081034                            ObjPos_SBZ1:	incbin	objpos\sbz1.bin
00081772                            		even
00081772                            ObjPos_SBZ2:	incbin	objpos\sbz2.bin
00081E50                            		even
00081E50                            ObjPos_FZ:	incbin	objpos\fz.bin
00081E62                            		even
00081E62                            ObjPos_SBZ1pf1:	incbin	objpos\sbz1pf1.bin
00081E94                            		even
00081E94                            ObjPos_SBZ1pf2:	incbin	objpos\sbz1pf2.bin
00081EC6                            		even
00081EC6                            ObjPos_SBZ1pf3:	incbin	objpos\sbz1pf3.bin
00081EF8                            		even
00081EF8                            ObjPos_SBZ1pf4:	incbin	objpos\sbz1pf4.bin
00081F2A                            		even
00081F2A                            ObjPos_SBZ1pf5:	incbin	objpos\sbz1pf5.bin
00081F5C                            		even
00081F5C                            ObjPos_SBZ1pf6:	incbin	objpos\sbz1pf6.bin
00081F94                            		even
00081F94                            ObjPos_End:	incbin	objpos\ending.bin
000820F0                            		even
000820F0 FFFF 0000 0000             ObjPos_Null:	dc.b $FF, $FF, 0, 0, 0,	0
000820F6                            ; ---------------------------------------------------------------------------
000820F6                            		incbin	misc\padding4.bin
00082720                            		even
00082720                            
00082720 0000 0000                  Go_SoundTypes:	dc.l SoundTypes		; XREF: Sound_Play
00082724 0000 0000                  Go_SoundD0:	dc.l SoundD0Index	; XREF: Sound_D0toDF
00082728 0000 0000                  Go_MusicIndex:	dc.l MusicIndex		; XREF: Sound_81to9F
0008272C 0000 0000                  Go_SoundIndex:	dc.l SoundIndex		; XREF: Sound_A0toCF
00082730 0000 0000                  off_719A0:	dc.l byte_71A94		; XREF: Sound_81to9F
00082734 0000 0000                  Go_PSGIndex:	dc.l PSG_Index		; XREF: sub_72926
00082738                            ; ---------------------------------------------------------------------------
00082738                            ; PSG instruments used in music
00082738                            ; ---------------------------------------------------------------------------
00082738 0000 0000 0000 0000 0000+  PSG_Index:	dc.l PSG1, PSG2, PSG3
00082744 0000 0000 0000 0000 0000+  		dc.l PSG4, PSG5, PSG6
00082750 0000 0000 0000 0000 0000+  		dc.l PSG7, PSG8, PSG9
0008275C                            PSG1:		incbin	sound\psg1.bin
00082773                            PSG2:		incbin	sound\psg2.bin
0008277A                            PSG3:		incbin	sound\psg3.bin
0008278B                            PSG4:		incbin	sound\psg4.bin
00082796                            PSG6:		incbin	sound\psg6.bin
000827A5                            PSG5:		incbin	sound\psg5.bin
000827CF                            PSG7:		incbin	sound\psg7.bin
000827EB                            PSG8:		incbin	sound\psg8.bin
00082813                            PSG9:		incbin	sound\psg9.bin
00082824                            
00082824 0772 7326 1508 FF05        byte_71A94:	dc.b 7,	$72, $73, $26, $15, 8, $FF, 5
0008282C                            ; ---------------------------------------------------------------------------
0008282C                            ; Music	Pointers
0008282C                            ; ---------------------------------------------------------------------------
0008282C 0000 0000 0000 0000        MusicIndex:	dc.l Music81, Music82
00082834 0000 0000 0000 0000        		dc.l Music83, Music84
0008283C 0000 0000 0000 0000        		dc.l Music85, Music86
00082844 0000 0000 0000 0000        		dc.l Music87, Music88
0008284C 0000 0000 0000 0000        		dc.l Music89, Music8A
00082854 0000 0000 0000 0000        		dc.l Music8B, Music8C
0008285C 0000 0000 0000 0000        		dc.l Music8D, Music8E
00082864 0000 0000 0000 0000        		dc.l Music8F, Music90
0008286C 0000 0000 0000 0000        		dc.l Music91, Music92
00082874 0000 0000 0000 0000        		dc.l Music93, Music94
0008287C 0000 0000 0000 0000        		dc.l Music95, Music96
00082884 0000 0000 0000 0000        		dc.l Music97, Music98
0008288C 0000 0000 0000 0000        		dc.l Music99, Music9A
00082894 0000 0000 0000 0000        		dc.l Music9B, Music9C
0008289C 0000 0000 0000 0000        		dc.l Music9D, Music9E
000828A4 0000 0000                  		dc.l Music9F										
000828A8                            ; ---------------------------------------------------------------------------
000828A8                            ; Type of sound	being played ($90 = music; $70 = normal	sound effect)
000828A8                            ; ---------------------------------------------------------------------------
000828A8 9090 9090 9090 9090 9090+  SoundTypes:	dc.b $90, $90, $90, $90, $90, $90, $90,	$90, $90, $90, $90, $90, $90, $90, $90,	$90
000828B8 9090 9090 9090 9090 9090+  		dc.b $90, $90, $90, $90, $90, $90, $90,	$90, $90, $90, $90, $90, $90, $90, $90,	$80
000828C8 7070 7070 7070 7070 7068+  		dc.b $70, $70, $70, $70, $70, $70, $70,	$70, $70, $68, $70, $70, $70, $60, $70,	$70
000828D8 6070 6070 7070 7070 7070+  		dc.b $60, $70, $60, $70, $70, $70, $70,	$70, $70, $70, $70, $70, $70, $70, $7F,	$60
000828E8 7070 7070 7070 7070 7070+  		dc.b $70, $70, $70, $70, $70, $70, $70,	$70, $70, $70, $70, $70, $70, $70, $70,	$80
000828F8 8080 8080 8080 8080 8080+  		dc.b $80, $80, $80, $80, $80, $80, $80,	$80, $80, $80, $80, $80, $80, $80, $80,	$90
00082908 9090 9090                  		dc.b $90, $90, $90, $90
0008290C                            
0008290C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008290C                            
0008290C                            YM_Access_WaitRead:
0008290C 33FC 0000 00A1 1100        		StartZ80					; EXT: request Z80 stop off (allow it to continue)
00082914                            		rept	$10					; EXT: delay for a long enough time to allow the...
00082914                            		nop						; EXT: '' ...68k pointer to be saved correctly.
00082914 4E71 4E71 4E71 4E71 4E71+  		endr						; EXT: ''
00082934                            
00082934                            sub_71B4C:	
00082934 4DF9 00FF F000             		lea	($FFF000).l,a6
0008293A                            
0008293A 41F9 00A0 02EF             		lea	($A00000+YM_Access).l,a0		; EXT: load access address in Z80
00082940 203C 00A0 0000             		move.l	#$A00000,d0				; EXT: prepare Z80 RAM address in d0 (i.e. start of Cue list address)
00082946 33FC 0100 00A1 1100 0839+  		StopZ80						; EXT: request Z80 stop on
00082958 4A18                       		tst.b	(a0)+					; EXT: is the Z80 accessing the 68k pointer?
0008295A 66B0                       		bne.s	YM_Access_WaitRead			; EXT: if so, branch and wait for it to finish...
0008295C 1218                       		move.b	(a0)+,d1				; EXT: load lower byte of pointer
0008295E 1018                       		move.b	(a0)+,d0				; EXT: load upper byte of pointer
00082960 33FC 0000 00A1 1100        		StartZ80					; EXT: request Z80 stop off
00082968 E148                       		lsl.w	#$08,d0					; EXT: shift upper byte up
0008296A 1001                       		move.b	d1,d0					; EXT: put lower byte with it
0008296C 2D40 0010                  		move.l	d0,$10(a6)				; EXT: store the cue address
00082970                            
00082970 422E 000E                  		clr.b	$E(a6)
00082974 4A2E 0003                  		tst.b	3(a6)		; is music paused?
00082978 6600 0000                  		bne.w	loc_71E50	; if yes, branch
0008297C 532E 0001                  		subq.b	#1,1(a6)
00082980 6600                       		bne.s	loc_71B9E
00082982 4EBA 0000                  		jsr	sub_7260C(pc)
00082986                            
00082986                            loc_71B9E:
00082986 102E 0004                  		move.b	4(a6),d0
0008298A 6700                       		beq.s	loc_71BA8
0008298C 4EBA 0000                  		jsr	sub_72504(pc)
00082990                            
00082990                            loc_71BA8:
00082990 4A2E 0024                  		tst.b	$24(a6)
00082994 6700                       		beq.s	loc_71BB2
00082996 4EBA 0000                  		jsr	sub_7267C(pc)
0008299A                            
0008299A                            loc_71BB2:
0008299A 4A6E 000A                  		tst.w	$A(a6)		; is music or sound being played?
0008299E 6700                       		beq.s	loc_71BBC	; if not, branch
000829A0 4EBA 0000                  		jsr	Sound_Play(pc)
000829A4                            
000829A4                            loc_71BBC:
000829A4 0C2E 0080 0009             		cmpi.b	#$80,9(a6)
000829AA 6700                       		beq.s	loc_71BC8
000829AC 4EBA 0000                  		jsr	Sound_ChkValue(pc)
000829B0                            
000829B0                            loc_71BC8:
000829B0 4BEE 0010                  		lea	$40-$30(a6),a5			; MJ: making correction for flow below
000829B4 7E01                       		moveq	#2-1,d7				; MJ: set number of PCM channels to run
000829B6 1D7C 007F 0008             		move.b	#$80-1,$08(a6)			; MJ: reset as PCM channel
000829BC                            
000829BC                            SD_NextPCM:
000829BC 522E 0008                  		addq.b	#$01,$08(a6)			; MJ: advance PCM channel ID
000829C0 4BED 0030                  		lea	$30(a5),a5			; MJ: advance to next channel
000829C4 4A15                       		tst.b	(a5)
000829C6 6A00                       		bpl.s	loc_71BD4
000829C8 4EBA 0000                  		jsr	sub_71C4E(pc)
000829CC                            
000829CC                            loc_71BD4:
000829CC 51CF FFEE                  		dbf	d7,SD_NextPCM			; MJ: repeat for number of PCM channels available
000829D0 422E 0008                  		clr.b	8(a6)
000829D4 7E05                       		moveq	#5,d7
000829D6                            
000829D6                            loc_71BDA:
000829D6 DAFC 0030                  		adda.w	#$30,a5
000829DA 4A15                       		tst.b	(a5)
000829DC 6A00                       		bpl.s	loc_71BE6
000829DE 4EBA 0000                  		jsr	sub_71CCA(pc)
000829E2                            
000829E2                            loc_71BE6:
000829E2 51CF FFF2                  		dbf	d7,loc_71BDA
000829E6                            
000829E6 7E02                       		moveq	#2,d7
000829E8                            
000829E8                            loc_71BEC:
000829E8 DAFC 0030                  		adda.w	#$30,a5
000829EC 4A15                       		tst.b	(a5)
000829EE 6A00                       		bpl.s	loc_71BF8
000829F0 4EBA 0000                  		jsr	sub_72850(pc)
000829F4                            
000829F4                            loc_71BF8:
000829F4 51CF FFF2                  		dbf	d7,loc_71BEC
000829F8                            
000829F8 1D7C 0080 000E             		move.b	#$80,$E(a6)
000829FE 7E02                       		moveq	#2,d7
00082A00                            
00082A00                            loc_71C04:
00082A00 DAFC 0030                  		adda.w	#$30,a5
00082A04 4A15                       		tst.b	(a5)
00082A06 6A00                       		bpl.s	loc_71C10
00082A08 4EBA 0000                  		jsr	sub_71CCA(pc)
00082A0C                            
00082A0C                            loc_71C10:
00082A0C 51CF FFF2                  		dbf	d7,loc_71C04
00082A10                            
00082A10 7E02                       		moveq	#2,d7
00082A12                            
00082A12                            loc_71C16:
00082A12 DAFC 0030                  		adda.w	#$30,a5
00082A16 4A15                       		tst.b	(a5)
00082A18 6A00                       		bpl.s	loc_71C22
00082A1A 4EBA 0000                  		jsr	sub_72850(pc)
00082A1E                            
00082A1E                            loc_71C22:
00082A1E 51CF FFF2                  		dbf	d7,loc_71C16
00082A22 1D7C 0040 000E             		move.b	#$40,$E(a6)
00082A28 DAFC 0030                  		adda.w	#$30,a5
00082A2C 4A15                       		tst.b	(a5)
00082A2E 6A00                       		bpl.s	loc_71C38
00082A30 4EBA 0000                  		jsr	sub_71CCA(pc)
00082A34                            
00082A34                            loc_71C38:
00082A34 DAFC 0030                  		adda.w	#$30,a5
00082A38 4A15                       		tst.b	(a5)
00082A3A 6A00                       		bpl.s	loc_71C44
00082A3C 4EBA 0000                  		jsr	sub_72850(pc)
00082A40                            
00082A40                            loc_71C44:
00082A40 6000                       		bra.s	YM_Access_TestWrite			; EXT: jump into the access loop
00082A42                            
00082A42                            YM_Access_WaitWrite:
00082A42 33FC 0000 00A1 1100        		StartZ80					; EXT: request Z80 stop off (allow it to continue)
00082A4A                            		rept	$10					; EXT: delay for a long enough time to let the Z80...
00082A4A                            		nop						; EXT: '' ...finish writing the 68k pointer, so it doesn't...
00082A4A 4E71 4E71 4E71 4E71 4E71+  		endr						; EXT: '' ...clash with 68k's pointer writing.
00082A6A                            
00082A6A                            YM_Access_TestWrite:
00082A6A 41F9 00A0 02EF             		lea	($A00000+YM_Access).l,a0		; EXT: load access address in Z80
00082A70 43EE 0013                  		lea	$13(a6),a1				; EXT: load the 68k's pointer finish location
00082A74 33FC 0100 00A1 1100 0839+  		StopZ80						; EXT: request Z80 stop on
00082A86 4A18                       		tst.b	(a0)+					; EXT: is the Z80 accessing the 68k pointer?
00082A88 66B8                       		bne.s	YM_Access_WaitWrite			; EXT: if so, branch and wait for it to finish...
00082A8A 10D1                       		move.b	(a1),(a0)+				; EXT: save lower byte of pointer
00082A8C 10A1                       		move.b	-(a1),(a0)				; EXT: save upper byte of pointer
00082A8E 33FC 0000 00A1 1100        		StartZ80					; EXT: request Z80 stop off
00082A96                            
00082A96 4E75                       		rts	
00082A98                            
00082A98                            ; End of function sub_71B4C
00082A98                            
00082A98                            
00082A98                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00082A98                            
00082A98                            
00082A98                            sub_71C4E:				; XREF: sub_71B4C
00082A98 532D 000E                  		subq.b	#1,$E(a5)
00082A9C 6600 0000                  		bne.w	locret_71CAA
00082AA0 286D 0004                  		movea.l	4(a5),a4
00082AA4                            
00082AA4                            loc_71C5E:
00082AA4 7A00                       		moveq	#0,d5
00082AA6 1A1C                       		move.b	(a4)+,d5
00082AA8 0C05 00E0                  		cmpi.b	#-$20,d5
00082AAC 6500                       		bcs.s	loc_71C6E
00082AAE 4EBA 0000                  		jsr	sub_72A5A(pc)
00082AB2 60F0                       		bra.s	loc_71C5E
00082AB4                            ; ===========================================================================
00082AB4                            
00082AB4                            loc_71C6E:
00082AB4 4A05                       		tst.b	d5
00082AB6 6A00                       		bpl.s	loc_71C84
00082AB8 1B45 0010                  		move.b	d5,$10(a5)
00082ABC 1A1C                       		move.b	(a4)+,d5
00082ABE 6A00                       		bpl.s	loc_71C84
00082AC0 534C                       		subq.w	#1,a4
00082AC2 1B6D 000F 000E             		move.b	$F(a5),$E(a5)
00082AC8 6000                       		bra.s	loc_71C88
00082ACA                            ; ===========================================================================
00082ACA                            
00082ACA                            loc_71C84:
00082ACA 4EBA 0000                  		jsr	sub_71D40(pc)
00082ACE                            
00082ACE                            loc_71C88:
00082ACE 2B4C 0004                  		move.l	a4,4(a5)
00082AD2 0815 0002                  		btst	#2,(a5)
00082AD6 6600                       		bne.s	locret_71CAA
00082AD8 7000                       		moveq	#0,d0
00082ADA 102D 0010                  		move.b	$10(a5),d0
00082ADE 0400 0080                  		subi.b	#$80,d0					; MJ: minus 80
00082AE2 D040                       		add.w	d0,d0					; MJ: multiply by 4 (long-word size)
00082AE4 D040                       		add.w	d0,d0					; MJ: ''
00082AE6 48E7 00C0                  		movem.l	a0/a1,-(sp)				; MJ: store register data
00082AEA 41F9 0000 0000             		lea	(SampleList).l,a0			; MJ: load sample list
00082AF0 2070 0000                  		move.l	(a0,d0.w),a0				; MJ: load correct sample z80 pointer address
00082AF4                            
00082AF4 0C2E 0080 0008             		cmpi.b	#$80,$08(a6)				; MJ: is this PCM 1?
00082AFA 6600                       		bne.s	WritePCM2				; MJ: if not, branch for PCM 2 writing
00082AFC                            
00082AFC                            	; --- Writing to PCM 1 ---
00082AFC                            
00082AFC 33FC 0100 00A1 1100 0839+  		StopZ80
00082B0E 43F9 00A0 02E6             		lea	($A00000+PCM1_Sample).l,a1			; MJ: load PCM 1 slot address
00082B14 12D8                       		move.b	(a0)+,(a1)+					; MJ: set address of sample
00082B16 12D8                       		move.b	(a0)+,(a1)+					; MJ: ''
00082B18 12D8                       		move.b	(a0)+,(a1)+					; MJ: ''
00082B1A 13FC 0064 00A0 0047        		move.b	#(CUPCM1_NewSample&$FF),($A00000+CU_Stack).l	; MJ: set routine to run
00082B22 13FC 0002 00A0 0048        		move.b	#(CUPCM1_NewSample>>$08),($A00000+CU_Stack+1).l	; MJ: ''
00082B2A 13FC 00C9 00A0 01D2        		move.b	#%11001001,($A00000+CUPCM1_RET).l		; MJ: change "NOP" to "RET"
00082B32 33FC 0000 00A1 1100        		StartZ80
00082B3A                            
00082B3A 4CDF 0300                  		movem.l	(sp)+,a0/a1				; MJ: restore register data
00082B3E                            
00082B3E                            locret_71CAA:
00082B3E 4E75                       		rts						; MJ: return
00082B40                            
00082B40                            	; --- Writing to PCM 2 ---
00082B40                            
00082B40                            WritePCM2:
00082B40 33FC 0100 00A1 1100 0839+  		StopZ80
00082B52 43F9 00A0 02E9             		lea	($A00000+PCM2_Sample).l,a1			; MJ: load PCM 2 slot address
00082B58 12D8                       		move.b	(a0)+,(a1)+					; MJ: ''
00082B5A 12D8                       		move.b	(a0)+,(a1)+					; MJ: ''
00082B5C 12D8                       		move.b	(a0)+,(a1)+					; MJ: ''
00082B5E 13FC 0028 00A0 01D3        		move.b	#%00101000,($A00000+CUPCM2_RET).l		; change "JR NZ" to "JR Z"
00082B66 33FC 0000 00A1 1100        		StartZ80
00082B6E                            
00082B6E 4CDF 0300                  		movem.l	(sp)+,a0/a1				; MJ: restore register data
00082B72 4E75                       		rts						; MJ: return
00082B74                            
00082B74                            ; ===========================================================================
00082B74                            
00082B74                            sub_71CCA:				; XREF: sub_71B4C
00082B74 532D 000E                  		subq.b	#1,$E(a5)
00082B78 6600                       		bne.s	loc_71CE0
00082B7A 0895 0004                  		bclr	#4,(a5)
00082B7E 4EBA 0000                  		jsr	sub_71CEC(pc)
00082B82 4EBA 0000                  		jsr	sub_71E18(pc)
00082B86 6000 0000                  		bra.w	loc_726E2
00082B8A                            ; ===========================================================================
00082B8A                            
00082B8A                            loc_71CE0:
00082B8A 4EBA 0000                  		jsr	sub_71D9E(pc)
00082B8E 4EBA 0000                  		jsr	sub_71DC6(pc)
00082B92 6000 0000                  		bra.w	loc_71E24
00082B96                            ; End of function sub_71CCA
00082B96                            
00082B96                            
00082B96                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00082B96                            
00082B96                            
00082B96                            sub_71CEC:				; XREF: sub_71CCA
00082B96 286D 0004                  		movea.l	4(a5),a4
00082B9A 0895 0001                  		bclr	#1,(a5)
00082B9E                            
00082B9E                            loc_71CF4:
00082B9E 7A00                       		moveq	#0,d5
00082BA0 1A1C                       		move.b	(a4)+,d5
00082BA2 0C05 00E0                  		cmpi.b	#-$20,d5
00082BA6 6500                       		bcs.s	loc_71D04
00082BA8 4EBA 0000                  		jsr	sub_72A5A(pc)
00082BAC 60F0                       		bra.s	loc_71CF4
00082BAE                            ; ===========================================================================
00082BAE                            
00082BAE                            loc_71D04:
00082BAE 4EBA 0000                  		jsr	sub_726FE(pc)
00082BB2 4A05                       		tst.b	d5
00082BB4 6A00                       		bpl.s	loc_71D1A
00082BB6 4EBA 0000                  		jsr	sub_71D22(pc)
00082BBA 1A1C                       		move.b	(a4)+,d5
00082BBC 6A00                       		bpl.s	loc_71D1A
00082BBE 534C                       		subq.w	#1,a4
00082BC0 6000 0000                  		bra.w	sub_71D60
00082BC4                            ; ===========================================================================
00082BC4                            
00082BC4                            loc_71D1A:
00082BC4 4EBA 0000                  		jsr	sub_71D40(pc)
00082BC8 6000 0000                  		bra.w	sub_71D60
00082BCC                            ; End of function sub_71CEC
00082BCC                            
00082BCC                            
00082BCC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00082BCC                            
00082BCC                            
00082BCC                            sub_71D22:				; XREF: sub_71CEC
00082BCC 0405 0080                  		subi.b	#$80,d5
00082BD0 6700                       		beq.s	loc_71D58
00082BD2 DA2D 0008                  		add.b	8(a5),d5
00082BD6 0245 007F                  		andi.w	#$7F,d5
00082BDA E34D                       		lsl.w	#1,d5
00082BDC 41FA 0000                  		lea	word_72790(pc),a0
00082BE0 3C30 5000                  		move.w	(a0,d5.w),d6
00082BE4 3B46 0010                  		move.w	d6,$10(a5)
00082BE8 4E75                       		rts	
00082BEA                            ; End of function sub_71D22
00082BEA                            
00082BEA                            
00082BEA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00082BEA                            
00082BEA                            
00082BEA                            sub_71D40:				; XREF: sub_71C4E; sub_71CEC; sub_72878
00082BEA 1005                       		move.b	d5,d0
00082BEC 122D 0002                  		move.b	2(a5),d1
00082BF0                            
00082BF0                            loc_71D46:
00082BF0 5301                       		subq.b	#1,d1
00082BF2 6700                       		beq.s	loc_71D4E
00082BF4 D005                       		add.b	d5,d0
00082BF6 60F8                       		bra.s	loc_71D46
00082BF8                            ; ===========================================================================
00082BF8                            
00082BF8                            loc_71D4E:
00082BF8 1B40 000F                  		move.b	d0,$F(a5)
00082BFC 1B40 000E                  		move.b	d0,$E(a5)
00082C00 4E75                       		rts	
00082C02                            ; End of function sub_71D40
00082C02                            
00082C02                            ; ===========================================================================
00082C02                            
00082C02                            loc_71D58:				; XREF: sub_71D22
00082C02 08D5 0001                  		bset	#1,(a5)
00082C06 426D 0010                  		clr.w	$10(a5)
00082C0A                            
00082C0A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00082C0A                            
00082C0A                            
00082C0A                            sub_71D60:				; XREF: sub_71CEC; sub_72878; sub_728AC
00082C0A 2B4C 0004                  		move.l	a4,4(a5)
00082C0E 1B6D 000F 000E             		move.b	$F(a5),$E(a5)
00082C14 0815 0004                  		btst	#4,(a5)
00082C18 6600                       		bne.s	locret_71D9C
00082C1A 1B6D 0013 0012             		move.b	$13(a5),$12(a5)
00082C20 422D 000C                  		clr.b	$C(a5)
00082C24 0815 0003                  		btst	#3,(a5)
00082C28 6700                       		beq.s	locret_71D9C
00082C2A 206D 0014                  		movea.l	$14(a5),a0
00082C2E 1B58 0018                  		move.b	(a0)+,$18(a5)
00082C32 1B58 0019                  		move.b	(a0)+,$19(a5)
00082C36 1B58 001A                  		move.b	(a0)+,$1A(a5)
00082C3A 1018                       		move.b	(a0)+,d0
00082C3C E208                       		lsr.b	#1,d0
00082C3E 1B40 001B                  		move.b	d0,$1B(a5)
00082C42 426D 001C                  		clr.w	$1C(a5)
00082C46                            
00082C46                            locret_71D9C:
00082C46 4E75                       		rts	
00082C48                            ; End of function sub_71D60
00082C48                            
00082C48                            
00082C48                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00082C48                            
00082C48                            
00082C48                            sub_71D9E:				; XREF: sub_71CCA; sub_72850
00082C48 4A2D 0012                  		tst.b	$12(a5)
00082C4C 6700                       		beq.s	locret_71DC4
00082C4E 532D 0012                  		subq.b	#1,$12(a5)
00082C52 6600                       		bne.s	locret_71DC4
00082C54 08D5 0001                  		bset	#1,(a5)
00082C58 4A2D 0001                  		tst.b	1(a5)
00082C5C 6B00 0000                  		bmi.w	loc_71DBE
00082C60 4EBA 0000                  		jsr	sub_726FE(pc)
00082C64 584F                       		addq.w	#4,sp
00082C66 4E75                       		rts	
00082C68                            ; ===========================================================================
00082C68                            
00082C68                            loc_71DBE:
00082C68 4EBA 0000                  		jsr	sub_729A0(pc)
00082C6C 584F                       		addq.w	#4,sp
00082C6E                            
00082C6E                            locret_71DC4:
00082C6E 4E75                       		rts	
00082C70                            ; End of function sub_71D9E
00082C70                            
00082C70                            
00082C70                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00082C70                            
00082C70                            
00082C70                            sub_71DC6:				; XREF: sub_71CCA; sub_72850
00082C70 584F                       		addq.w	#4,sp
00082C72 0815 0003                  		btst	#3,(a5)
00082C76 6700                       		beq.s	locret_71E16
00082C78 4A2D 0018                  		tst.b	$18(a5)
00082C7C 6700                       		beq.s	loc_71DDA
00082C7E 532D 0018                  		subq.b	#1,$18(a5)
00082C82 4E75                       		rts	
00082C84                            ; ===========================================================================
00082C84                            
00082C84                            loc_71DDA:
00082C84 532D 0019                  		subq.b	#1,$19(a5)
00082C88 6700                       		beq.s	loc_71DE2
00082C8A 4E75                       		rts	
00082C8C                            ; ===========================================================================
00082C8C                            
00082C8C                            loc_71DE2:
00082C8C 206D 0014                  		movea.l	$14(a5),a0
00082C90 1B68 0001 0019             		move.b	1(a0),$19(a5)
00082C96 4A2D 001B                  		tst.b	$1B(a5)
00082C9A 6600                       		bne.s	loc_71DFE
00082C9C 1B68 0003 001B             		move.b	3(a0),$1B(a5)
00082CA2 442D 001A                  		neg.b	$1A(a5)
00082CA6 4E75                       		rts	
00082CA8                            ; ===========================================================================
00082CA8                            
00082CA8                            loc_71DFE:
00082CA8 532D 001B                  		subq.b	#1,$1B(a5)
00082CAC 1C2D 001A                  		move.b	$1A(a5),d6
00082CB0 4886                       		ext.w	d6
00082CB2 DC6D 001C                  		add.w	$1C(a5),d6
00082CB6 3B46 001C                  		move.w	d6,$1C(a5)
00082CBA DC6D 0010                  		add.w	$10(a5),d6
00082CBE 594F                       		subq.w	#4,sp
00082CC0                            
00082CC0                            locret_71E16:
00082CC0 4E75                       		rts	
00082CC2                            ; End of function sub_71DC6
00082CC2                            
00082CC2                            
00082CC2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00082CC2                            
00082CC2                            
00082CC2                            sub_71E18:				; XREF: sub_71CCA
00082CC2 0815 0001                  		btst	#1,(a5)
00082CC6 6600                       		bne.s	locret_71E48
00082CC8 3C2D 0010                  		move.w	$10(a5),d6
00082CCC 6700                       		beq.s	loc_71E4A
00082CCE                            
00082CCE                            loc_71E24:				; XREF: sub_71CCA
00082CCE 102D 001E                  		move.b	$1E(a5),d0
00082CD2 4880                       		ext.w	d0
00082CD4 DC40                       		add.w	d0,d6
00082CD6 0815 0002                  		btst	#2,(a5)
00082CDA 6600                       		bne.s	locret_71E48
00082CDC 3206                       		move.w	d6,d1
00082CDE E049                       		lsr.w	#8,d1
00082CE0 103C 00A4                  		move.b	#-$5C,d0
00082CE4 4EBA 0000                  		jsr	sub_72722(pc)
00082CE8 1206                       		move.b	d6,d1
00082CEA 103C 00A0                  		move.b	#-$60,d0
00082CEE 4EBA 0000                  		jsr	sub_72722(pc)
00082CF2                            
00082CF2                            locret_71E48:
00082CF2 4E75                       		rts	
00082CF4                            ; ===========================================================================
00082CF4                            
00082CF4                            loc_71E4A:
00082CF4 08D5 0001                  		bset	#1,(a5)
00082CF8 4E75                       		rts	
00082CFA                            ; End of function sub_71E18
00082CFA                            
00082CFA                            ; ===========================================================================
00082CFA                            
00082CFA                            loc_71E50:				; XREF: sub_71B4C
00082CFA 6B00                       		bmi.s	loc_71E94
00082CFC 0C2E 0002 0003             		cmpi.b	#2,3(a6)
00082D02 6700 0000                  		beq.w	loc_71EFE
00082D06 1D7C 0002 0003             		move.b	#2,3(a6)
00082D0C 7602                       		moveq	#2,d3
00082D0E 103C 00B4                  		move.b	#-$4C,d0
00082D12 7200                       		moveq	#0,d1
00082D14                            
00082D14                            loc_71E6A:
00082D14 4EBA 0000                  		jsr	sub_7272E(pc)
00082D18 4EBA 0000                  		jsr	sub_72764(pc)
00082D1C 5200                       		addq.b	#1,d0
00082D1E 51CB FFF4                  		dbf	d3,loc_71E6A
00082D22                            
00082D22 7602                       		moveq	#2,d3
00082D24 7028                       		moveq	#$28,d0
00082D26                            
00082D26                            loc_71E7C:
00082D26 1203                       		move.b	d3,d1
00082D28 4EBA 0000                  		jsr	sub_7272E(pc)
00082D2C 5801                       		addq.b	#4,d1
00082D2E 4EBA 0000                  		jsr	sub_7272E(pc)
00082D32 51CB FFF2                  		dbf	d3,loc_71E7C
00082D36                            
00082D36 4EBA 0000                  		jsr	sub_729B6(pc)
00082D3A 6000 FD04                  		bra.w	loc_71C44
00082D3E                            ; ===========================================================================
00082D3E                            
00082D3E                            loc_71E94:				; XREF: loc_71E50
00082D3E 422E 0003                  		clr.b	3(a6)
00082D42 7630                       		moveq	#$30,d3
00082D44 4BEE 0040                  		lea	$40(a6),a5
00082D48 7807                       		moveq	#7,d4					; MJ: number of YM2612 based channels
00082D4A                            
00082D4A                            loc_71EA0:
00082D4A 0815 0007                  		btst	#7,(a5)
00082D4E 6700                       		beq.s	loc_71EB8
00082D50 0815 0002                  		btst	#2,(a5)
00082D54 6600                       		bne.s	loc_71EB8
00082D56 103C 00B4                  		move.b	#-$4C,d0
00082D5A 122D 000A                  		move.b	$A(a5),d1
00082D5E 4EBA 0000                  		jsr	sub_72722(pc)
00082D62                            
00082D62                            loc_71EB8:
00082D62 DAC3                       		adda.w	d3,a5
00082D64 51CC FFE4                  		dbf	d4,loc_71EA0
00082D68                            
00082D68 4BEE 0250                  		lea	$250(a6),a5				; MJ: new SFX location
00082D6C 7802                       		moveq	#2,d4
00082D6E                            
00082D6E                            loc_71EC4:
00082D6E 0815 0007                  		btst	#7,(a5)
00082D72 6700                       		beq.s	loc_71EDC
00082D74 0815 0002                  		btst	#2,(a5)
00082D78 6600                       		bne.s	loc_71EDC
00082D7A 103C 00B4                  		move.b	#-$4C,d0
00082D7E 122D 000A                  		move.b	$A(a5),d1
00082D82 4EBA 0000                  		jsr	sub_72722(pc)
00082D86                            
00082D86                            loc_71EDC:
00082D86 DAC3                       		adda.w	d3,a5
00082D88 51CC FFE4                  		dbf	d4,loc_71EC4
00082D8C                            
00082D8C 4BEE 0370                  		lea	$370(a6),a5				; MJ: new SFX location
00082D90 0815 0007                  		btst	#7,(a5)
00082D94 6700                       		beq.s	loc_71EFE
00082D96 0815 0002                  		btst	#2,(a5)
00082D9A 6600                       		bne.s	loc_71EFE
00082D9C 103C 00B4                  		move.b	#-$4C,d0
00082DA0 122D 000A                  		move.b	$A(a5),d1
00082DA4 4EBA 0000                  		jsr	sub_72722(pc)
00082DA8                            
00082DA8                            loc_71EFE:
00082DA8 6000 FC96                  		bra.w	loc_71C44
00082DAC                            
00082DAC                            ; ---------------------------------------------------------------------------
00082DAC                            ; Subroutine to	play a sound or	music track
00082DAC                            ; ---------------------------------------------------------------------------
00082DAC                            
00082DAC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00082DAC                            
00082DAC                            
00082DAC                            Sound_Play:				; XREF: sub_71B4C
00082DAC 2079 0008 2720             		movea.l	(Go_SoundTypes).l,a0
00082DB2 43EE 000A                  		lea	$A(a6),a1	; load music track number
00082DB6 1616                       		move.b	0(a6),d3
00082DB8 7802                       		moveq	#2,d4
00082DBA                            
00082DBA                            loc_71F12:
00082DBA 1011                       		move.b	(a1),d0		; move track number to d0
00082DBC 1200                       		move.b	d0,d1
00082DBE 4219                       		clr.b	(a1)+
00082DC0 0400 0081                  		subi.b	#$81,d0
00082DC4 6500                       		bcs.s	loc_71F3E
00082DC6 0C2E 0080 0009             		cmpi.b	#$80,9(a6)
00082DCC 6700                       		beq.s	loc_71F2C
00082DCE 1D41 000A                  		move.b	d1,$A(a6)
00082DD2 6000                       		bra.s	loc_71F3E
00082DD4                            ; ===========================================================================
00082DD4                            
00082DD4                            loc_71F2C:
00082DD4 0240 007F                  		andi.w	#$7F,d0
00082DD8 1430 0000                  		move.b	(a0,d0.w),d2
00082DDC B403                       		cmp.b	d3,d2
00082DDE 6500                       		bcs.s	loc_71F3E
00082DE0 1602                       		move.b	d2,d3
00082DE2 1D41 0009                  		move.b	d1,9(a6)	; set music flag
00082DE6                            
00082DE6                            loc_71F3E:
00082DE6 51CC FFD2                  		dbf	d4,loc_71F12
00082DEA                            
00082DEA 4A03                       		tst.b	d3
00082DEC 6B00                       		bmi.s	locret_71F4A
00082DEE 1C83                       		move.b	d3,0(a6)
00082DF0                            
00082DF0                            locret_71F4A:
00082DF0 4E75                       		rts	
00082DF2                            ; End of function Sound_Play
00082DF2                            
00082DF2                            
00082DF2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00082DF2                            
00082DF2                            
00082DF2                            Sound_ChkValue:				; XREF: sub_71B4C
00082DF2 7E00                       		moveq	#0,d7
00082DF4 1E2E 0009                  		move.b	9(a6),d7
00082DF8 6700 0000                  		beq.w	Sound_E4
00082DFC 6A00                       		bpl.s	locret_71F8C
00082DFE 1D7C 0080 0009             		move.b	#$80,9(a6)	; reset	music flag
00082E04 0C07 009F                  		cmpi.b	#$9F,d7
00082E08 6300 0000                  		bls.w	Sound_81to9F	; music	$81-$9F
00082E0C 0C07 00A0                  		cmpi.b	#$A0,d7
00082E10 6500 0000                  		bcs.w	locret_71F8C
00082E14 0C07 00CF                  		cmpi.b	#$CF,d7
00082E18 6300 0000                  		bls.w	Sound_A0toCF	; sound	$A0-$CF
00082E1C 0C07 00D0                  		cmpi.b	#$D0,d7
00082E20 6500 0000                  		bcs.w	locret_71F8C
00082E24 0C07 00D1                  		cmpi.b	#$D1,d7
00082E28 6500 0000                  		bcs.w	Sound_D0toDF	; sound	$D0-$DF
00082E2C 0C07 00DF                  		cmpi.b	#$DF,d7
00082E30 6500 0000                  		blo.w	Sound_D1toDF	; sound	$D1-$DF
00082E34 0C07 00E4                  		cmpi.b	#$E4,d7
00082E38 6300                       		bls.s	Sound_E0toE4	; sound	$E0-$E4
00082E3A                            
00082E3A                            locret_71F8C:
00082E3A 4E75                       		rts	
00082E3C                            ; ===========================================================================
00082E3C                            
00082E3C                            Sound_E0toE4:				; XREF: Sound_ChkValue
00082E3C 0407 00E0                  		subi.b	#$E0,d7
00082E40 E54F                       		lsl.w	#2,d7
00082E42 4EFB 7000                  		jmp	Sound_ExIndex(pc,d7.w)
00082E46                            ; ===========================================================================
00082E46                            
00082E46                            Sound_ExIndex:
00082E46 6000 0000                  		bra.w	Sound_E0
00082E4A                            ; ===========================================================================
00082E4A 6000 0000                  		bra.w	Sound_E1
00082E4E                            ; ===========================================================================
00082E4E 6000 0000                  		bra.w	Sound_E2
00082E52                            ; ===========================================================================
00082E52 6000 0000                  		bra.w	Sound_E3
00082E56                            ; ===========================================================================
00082E56 6000 0000                  		bra.w	Sound_E4
00082E5A                            ; ===========================================================================
00082E5A                            ; ---------------------------------------------------------------------------
00082E5A                            ; Play "Say-gaa" PCM sound
00082E5A                            ; ---------------------------------------------------------------------------
00082E5A                            
00082E5A                            Sound_E1:
00082E5A 33FC 0100 00A1 1100 0839+  		StopZ80						; MJ: request Z80 stop "ON"
00082E6C 45F9 0000 0000             		lea	(SegaPCM).l,a2				; MJ: load sample address
00082E72 47F9 00A0 4000             		lea	($A04000).l,a3				; MJ: load YM2612 port
00082E78 16FC 002A                  		move.b	#$2A,(a3)+				; MJ: set YM2612 address to the PCM data port
00082E7C 283C 0000 0000             		move.l	#(SegaPCM_End-SegaPCM)-$01,d4		; MJ: prepare size
00082E82 3604                       		move.w	d4,d3					; MJ: get lower word size
00082E84 4844                       		swap	d4					; MJ: get upper word size
00082E86                            
00082E86                            PlayPCM_Loop:
00082E86 169A                       		move.b	(a2)+,(a3)				; MJ: save sample data to port
00082E88 702B                       		moveq	#$2B,d0					; MJ: set delay time
00082E8A 51C8 FFFE                  		dbf	d0,*					; MJ: delay...
00082E8E 51CB FFF6                  		dbf	d3,PlayPCM_Loop				; MJ: repeat til done
00082E92 51CC FFF2                  		dbf	d4,PlayPCM_Loop				; MJ: ''
00082E96 16BC 0080                  		move.b	#$80,(a3)				; MJ: save mute data to port
00082E9A 584F                       		addq.w	#$04,sp					; MJ: skip return address
00082E9C 534B                       		subq.w	#$01,a3					; MJ: move back to address port
00082E9E 4A13                       		tst.b	(a3)					; MJ: is the YM2612 busy?
00082EA0 6BFC                       		bmi.s	*-$02					; MJ: if so, branch and recheck
00082EA2 16BC 002A                  		move.b	#$2A,(a3)				; MJ: write address (set it back to DAC port for the Z80)
00082EA6 33FC 0000 00A1 1100        		StartZ80					; MJ: request Z80 stop "OFF"
00082EAE 4E75                       		rts						; MJ: return
00082EB0                            
00082EB0                            ; ===========================================================================
00082EB0                            ; ---------------------------------------------------------------------------
00082EB0                            ; Play music track $81-$9F
00082EB0                            ; ---------------------------------------------------------------------------
00082EB0                            
00082EB0                            Sound_81to9F:				; XREF: Sound_ChkValue
00082EB0                            
00082EB0                            
00082EB0 33FC 0100 00A1 1100 0839+  		StopZ80
00082EC2 41F9 0000 0000             		lea	(StopSample).l,a0				; MJ: load stop sample address
00082EC8 43F9 00A0 02E6             		lea	($A00000+PCM1_Sample).l,a1			; MJ: load PCM 1 slot address
00082ECE 12D8                       		move.b	(a0)+,(a1)+					; MJ: set address of sample
00082ED0 12D8                       		move.b	(a0)+,(a1)+					; MJ: ''
00082ED2 12D8                       		move.b	(a0)+,(a1)+					; MJ: ''
00082ED4 13FC 0064 00A0 0047        		move.b	#(CUPCM1_NewSample&$FF),($A00000+CU_Stack).l	; MJ: set routine to run
00082EDC 13FC 0002 00A0 0048        		move.b	#(CUPCM1_NewSample>>$08),($A00000+CU_Stack+1).l	; MJ: ''
00082EE4 13FC 00C9 00A0 01D2        		move.b	#%11001001,($A00000+CUPCM1_RET).l		; MJ: change "NOP" to "RET"
00082EEC 41F9 0000 0000             		lea	(StopSample).l,a0				; MJ: load stop sample address
00082EF2 43F9 00A0 02E9             		lea	($A00000+PCM2_Sample).l,a1			; MJ: load PCM 2 slot address
00082EF8 12D8                       		move.b	(a0)+,(a1)+					; MJ: ''
00082EFA 12D8                       		move.b	(a0)+,(a1)+					; MJ: ''
00082EFC 12D8                       		move.b	(a0)+,(a1)+					; MJ: ''
00082EFE 13FC 0028 00A0 01D3        		move.b	#%00101000,($A00000+CUPCM2_RET).l		; MJ: change "JR NZ" to "JR Z"
00082F06 33FC 0000 00A1 1100        		StartZ80
00082F0E                            
00082F0E                            
00082F0E                            
00082F0E 0C07 0088                  		cmpi.b	#$88,d7		; is "extra life" music	played?
00082F12 6600                       		bne.s	loc_72024	; if not, branch
00082F14 4A2E 0027                  		tst.b	$27(a6)
00082F18 6600 0000                  		bne.w	loc_721B6
00082F1C 4BEE 0040                  		lea	$40(a6),a5
00082F20 700A                       		moveq	#10,d0					; MJ: number of channels in total
00082F22                            
00082F22                            loc_71FE6:
00082F22 0895 0002                  		bclr	#2,(a5)
00082F26 DAFC 0030                  		adda.w	#$30,a5
00082F2A 51C8 FFF6                  		dbf	d0,loc_71FE6
00082F2E                            
00082F2E 4BEE 0250                  		lea	$250(a6),a5				; MJ: new SFX location
00082F32 7005                       		moveq	#5,d0
00082F34                            
00082F34                            loc_71FF8:
00082F34 0895 0007                  		bclr	#7,(a5)
00082F38 DAFC 0030                  		adda.w	#$30,a5
00082F3C 51C8 FFF6                  		dbf	d0,loc_71FF8
00082F40 4216                       		clr.b	0(a6)
00082F42 204E                       		movea.l	a6,a0
00082F44 43EE 03D0                  		lea	$3D0(a6),a1				; MJ: new SFX location
00082F48 303C 0087                  		move.w	#$87,d0
00082F4C                            
00082F4C                            loc_72012:
00082F4C 22D8                       		move.l	(a0)+,(a1)+
00082F4E 51C8 FFFC                  		dbf	d0,loc_72012
00082F52                            
00082F52 1D7C 0080 0027             		move.b	#$80,$27(a6)
00082F58 4216                       		clr.b	0(a6)
00082F5A 6000                       		bra.s	loc_7202C
00082F5C                            ; ===========================================================================
00082F5C                            
00082F5C                            loc_72024:
00082F5C 422E 0027                  		clr.b	$27(a6)
00082F60 422E 0026                  		clr.b	$26(a6)
00082F64                            
00082F64                            loc_7202C:
00082F64 4EBA 0000                  		jsr	sub_725CA(pc)
00082F68 2879 0008 2730             		movea.l	(off_719A0).l,a4
00082F6E 0407 0081                  		subi.b	#$81,d7
00082F72 1D74 7000 0029             		move.b	(a4,d7.w),$29(a6)
00082F78 2879 0008 2728             		movea.l	(Go_MusicIndex).l,a4
00082F7E E54F                       		lsl.w	#2,d7
00082F80 2874 7000                  		movea.l	(a4,d7.w),a4
00082F84 7000                       		moveq	#0,d0
00082F86 3014                       		move.w	(a4),d0
00082F88 D08C                       		add.l	a4,d0
00082F8A 2D40 0018                  		move.l	d0,$18(a6)
00082F8E 102C 0005                  		move.b	5(a4),d0
00082F92 1D40 0028                  		move.b	d0,$28(a6)
00082F96 4A2E 002A                  		tst.b	$2A(a6)
00082F9A 6700                       		beq.s	loc_72068
00082F9C 102E 0029                  		move.b	$29(a6),d0
00082FA0                            
00082FA0                            loc_72068:
00082FA0 1D40 0002                  		move.b	d0,2(a6)
00082FA4 1D40 0001                  		move.b	d0,1(a6)
00082FA8 7200                       		moveq	#0,d1
00082FAA 264C                       		movea.l	a4,a3
00082FAC 5C4C                       		addq.w	#6,a4
00082FAE 7E00                       		moveq	#0,d7
00082FB0 1E2B 0002                  		move.b	2(a3),d7
00082FB4 6700 0000                  		beq.w	loc_72114
00082FB8 5307                       		subq.b	#1,d7
00082FBA 123C 00C0                  		move.b	#-$40,d1
00082FBE 182B 0004                  		move.b	4(a3),d4
00082FC2 7C30                       		moveq	#$30,d6
00082FC4 1A3C 0001                  		move.b	#1,d5
00082FC8 43EE 0040                  		lea	$40(a6),a1
00082FCC 45FA 0000                  		lea	byte_721BA(pc),a2
00082FD0                            
00082FD0                            loc_72098:
00082FD0 08D1 0007                  		bset	#7,(a1)
00082FD4 135A 0001                  		move.b	(a2)+,1(a1)
00082FD8 1344 0002                  		move.b	d4,2(a1)
00082FDC 1346 000D                  		move.b	d6,$D(a1)
00082FE0 1341 000A                  		move.b	d1,$A(a1)
00082FE4 1345 000E                  		move.b	d5,$E(a1)
00082FE8 7000                       		moveq	#0,d0
00082FEA 3340 0010                  		move.w	d0,$10(a1)				; MJ: clear FM's frequency (ensures no frequency writing)
00082FEE 301C                       		move.w	(a4)+,d0
00082FF0 D08B                       		add.l	a3,d0
00082FF2 2340 0004                  		move.l	d0,4(a1)
00082FF6 335C 0008                  		move.w	(a4)+,8(a1)
00082FFA D2C6                       		adda.w	d6,a1
00082FFC 51CF FFD2                  		dbf	d7,loc_72098
00083000 702B                       		moveq	#$2B,d0					; MJ: set YM2612 address to DAC/FM6 switch
00083002 123C 0080                  		move.b	#%10000000,d1				; MJ: set to turn DAC on
00083006 0C2B 0008 0002             		cmpi.b	#8,2(a3)				; MJ: changed to 8 (8 = 6FM channels, no DAC)
0008300C 6600                       		bne.s	loc_720D8
0008300E                            	;	moveq	#$2B,d0					; MJ: removed...
0008300E 7200                       		moveq	#0,d1
00083010 4EBA 0000                  		jsr	sub_7272E(pc)
00083014 6000 0000                  		bra.w	loc_72114
00083018                            ; ===========================================================================
00083018                            
00083018                            loc_720D8:
00083018 4EBA 0000                  		jsr	sub_7272E(pc)				; MJ: added... (turn DAC on)
0008301C 7028                       		moveq	#$28,d0
0008301E 7206                       		moveq	#6,d1
00083020 4EBA 0000                  		jsr	sub_7272E(pc)
00083024 103C 0042                  		move.b	#$42,d0
00083028 727F                       		moveq	#$7F,d1
0008302A 4EBA 0000                  		jsr	sub_72764(pc)
0008302E 103C 004A                  		move.b	#$4A,d0
00083032 727F                       		moveq	#$7F,d1
00083034 4EBA 0000                  		jsr	sub_72764(pc)
00083038 103C 0046                  		move.b	#$46,d0
0008303C 727F                       		moveq	#$7F,d1
0008303E 4EBA 0000                  		jsr	sub_72764(pc)
00083042 103C 004E                  		move.b	#$4E,d0
00083046 727F                       		moveq	#$7F,d1
00083048 4EBA 0000                  		jsr	sub_72764(pc)
0008304C 103C 00B6                  		move.b	#-$4A,d0
00083050 123C 00C0                  		move.b	#-$40,d1
00083054 4EBA 0000                  		jsr	sub_72764(pc)
00083058                            
00083058                            loc_72114:
00083058 7A02                       		moveq	#$02,d5					; EXT: set PSG to delay for 1 extra frame (This is to match the PSG with the FM/DAC which is delayed a frame by the Z80)
0008305A 7E00                       		moveq	#0,d7
0008305C 1E2B 0003                  		move.b	3(a3),d7
00083060 6700                       		beq.s	loc_72154
00083062 5307                       		subq.b	#1,d7
00083064 43EE 01C0                  		lea	$1C0(a6),a1				; MJ: new BGM/SFX location
00083068 45FA 0000                  		lea	byte_721C2(pc),a2
0008306C                            
0008306C                            loc_72126:
0008306C 08D1 0007                  		bset	#7,(a1)
00083070 135A 0001                  		move.b	(a2)+,1(a1)
00083074 1344 0002                  		move.b	d4,2(a1)
00083078 1346 000D                  		move.b	d6,$D(a1)
0008307C 1345 000E                  		move.b	d5,$E(a1)
00083080 337C FFFF 0010             		move.w	#$FFFF,$10(a1)				; MJ: clear PSG's frequency (ensures no frequency writing)
00083086 137C 0001 0012             		move.b	#$01,$12(a1)				; MJ: set key release rate to 1
0008308C 7000                       		moveq	#0,d0
0008308E 301C                       		move.w	(a4)+,d0
00083090 D08B                       		add.l	a3,d0
00083092 2340 0004                  		move.l	d0,4(a1)
00083096 335C 0008                  		move.w	(a4)+,8(a1)
0008309A 101C                       		move.b	(a4)+,d0
0008309C 135C 000B                  		move.b	(a4)+,$B(a1)
000830A0 D2C6                       		adda.w	d6,a1
000830A2 51CF FFC8                  		dbf	d7,loc_72126
000830A6                            
000830A6                            loc_72154:
000830A6 43EE 0250                  		lea	$250(a6),a1				; MJ: new SFX location
000830AA 7E05                       		moveq	#5,d7
000830AC                            
000830AC                            loc_7215A:
000830AC 4A11                       		tst.b	(a1)
000830AE 6A00 0000                  		bpl.w	loc_7217C
000830B2 7000                       		moveq	#0,d0
000830B4 1029 0001                  		move.b	1(a1),d0
000830B8 6B00                       		bmi.s	loc_7216E
000830BA 5500                       		subq.b	#2,d0
000830BC E508                       		lsl.b	#2,d0
000830BE 6000                       		bra.s	loc_72170
000830C0                            ; ===========================================================================
000830C0                            
000830C0                            loc_7216E:
000830C0 E608                       		lsr.b	#3,d0
000830C2                            
000830C2                            loc_72170:
000830C2 41FA 0000                  		lea	dword_722CC(pc),a0
000830C6 2070 0000                  		movea.l	(a0,d0.w),a0
000830CA 08D0 0002                  		bset	#2,(a0)
000830CE                            
000830CE                            loc_7217C:
000830CE D2C6                       		adda.w	d6,a1
000830D0 51CF FFDA                  		dbf	d7,loc_7215A
000830D4                            
000830D4 4A6E 0370                  		tst.w	$370(a6)				; MJ: new SFX location
000830D8 6A00                       		bpl.s	loc_7218E
000830DA 08EE 0002 0130             		bset	#2,$130(a6)				; MJ: new BGM location
000830E0                            
000830E0                            loc_7218E:
000830E0 4A6E 03A0                  		tst.w	$3A0(a6)				; MJ: new SFX location
000830E4 6A00                       		bpl.s	loc_7219A
000830E6 08EE 0002 0220             		bset	#2,$220(a6)				; MJ: new BGM location
000830EC                            
000830EC                            
000830EC                            loc_7219A:
000830EC 4BEE 00A0                  		lea	$A0(a6),a5				; MJ: new FM location
000830F0 7805                       		moveq	#5,d4
000830F2                            
000830F2                            loc_721A0:
000830F2 4EBA 0000                  		jsr	sub_726FE(pc)
000830F6 DAC6                       		adda.w	d6,a5
000830F8 51CC FFF8                  		dbf	d4,loc_721A0
000830FC 7802                       		moveq	#2,d4
000830FE                            
000830FE                            loc_721AC:
000830FE 4EBA 0000                  		jsr	sub_729A0(pc)
00083102 DAC6                       		adda.w	d6,a5
00083104 51CC FFF8                  		dbf	d4,loc_721AC
00083108                            
00083108                            loc_721B6:
00083108 584F                       		addq.w	#4,sp
0008310A 4E75                       		rts	
0008310C                            ; ===========================================================================
0008310C 0606 0001 0204 0506 00     byte_721BA:	dc.b 6,	6, 0, 1, 2, 4, 5, 6, 0			; MJ: extra 6 (for PCM 2)
00083116 00                         		even
00083116 80A0 C000                  byte_721C2:	dc.b $80, $A0, $C0, 0
0008311A                            		even
0008311A                            ; ===========================================================================
0008311A                            ; ---------------------------------------------------------------------------
0008311A                            ; Play normal sound effect
0008311A                            ; ---------------------------------------------------------------------------
0008311A                            
0008311A                            Sound_D1toDF:
0008311A 4A2E 0027                  		tst.b	$27(a6)
0008311E 6600 0000                  		bne.w	loc_722C6
00083122 4A2E 0004                  		tst.b	4(a6)
00083126 6600 0000                  		bne.w	loc_722C6
0008312A 4A2E 0024                  		tst.b	$24(a6)
0008312E 6600 0000                  		bne.w	loc_722C6
00083132 4238 C900                  		clr.b	($FFFFC900).w
00083136 0C07 00D1                  		cmp.b	#$D1,d7		; is this the Spin Dash sound?
0008313A 6600                       		bne.s	@cont3	; if not, branch
0008313C 3F00                       		move.w	d0,-(sp)
0008313E 1038 C902                  		move.b	($FFFFC902).w,d0	; store extra frequency
00083142 4A38 C901                  		tst.b	($FFFFC901).w	; is the Spin Dash timer active?
00083146 6600                       		bne.s	@cont1		; if it is, branch
00083148 103C 00FF                  		move.b	#-1,d0		; otherwise, reset frequency (becomes 0 on next line)
0008314C                            		
0008314C                            @cont1:
0008314C 5200                       		addq.b	#1,d0
0008314E 0C00 000C                  		cmp.b	#$C,d0		; has the limit been reached?
00083152 6400                       		bcc.s	@cont2		; if it has, branch
00083154 11C0 C902                  		move.b	d0,($FFFFC902).w	; otherwise, set new frequency
00083158                            		
00083158                            @cont2:
00083158 11FC 0001 C900             		move.b	#1,($FFFFC900).w	; set flag
0008315E 11FC 003C C901             		move.b	#60,($FFFFC901).w	; set timer
00083164 301F                       		move.w	(sp)+,d0
00083166                            		
00083166                            @cont3:
00083166 2079 0008 272C             		movea.l	(Go_SoundIndex).l,a0
0008316C 0407 00A1                  		sub.b	#$A1,d7
00083170 6000 0000                  		bra	SoundEffects_Common
00083174                            
00083174                            Sound_A0toCF:				; XREF: Sound_ChkValue
00083174 4A2E 0027                  		tst.b	$27(a6)
00083178 6600 0000                  		bne.w	loc_722C6
0008317C 4A2E 0004                  		tst.b	4(a6)
00083180 6600 0000                  		bne.w	loc_722C6
00083184 4A2E 0024                  		tst.b	$24(a6)
00083188 6600 0000                  		bne.w	loc_722C6
0008318C 4238 C900                  		clr.b	($FFFFC900).w		
00083190 0C07 00B5                  		cmpi.b	#$B5,d7		; is ring sound	effect played?
00083194 6600                       		bne.s	Sound_notB5	; if not, branch
00083196 4A2E 002B                  		tst.b	$2B(a6)
0008319A 6600                       		bne.s	loc_721EE
0008319C 1E3C 00CE                  		move.b	#$CE,d7		; play ring sound in left speaker
000831A0                            
000831A0                            loc_721EE:
000831A0 086E 0000 002B             		bchg	#0,$2B(a6)	; change speaker
000831A6                            
000831A6                            Sound_notB5:
000831A6 0C07 00A7                  		cmpi.b	#$A7,d7		; is "pushing" sound played?
000831AA 6600                       		bne.s	Sound_notA7	; if not, branch
000831AC 4A2E 002C                  		tst.b	$2C(a6)
000831B0 6600 0000                  		bne.w	locret_722C4
000831B4 1D7C 0080 002C             		move.b	#$80,$2C(a6)
000831BA                            
000831BA                            Sound_notA7:
000831BA 2079 0008 272C             		movea.l	(Go_SoundIndex).l,a0
000831C0 0407 00A0                  		subi.b	#$A0,d7
000831C4                            SoundEffects_Common:
000831C4 E54F                       		lsl.w	#2,d7
000831C6 2670 7000                  		movea.l	(a0,d7.w),a3
000831CA 224B                       		movea.l	a3,a1
000831CC 7200                       		moveq	#0,d1
000831CE 3219                       		move.w	(a1)+,d1
000831D0 D28B                       		add.l	a3,d1
000831D2 1A19                       		move.b	(a1)+,d5
000831D4 1E19                       		move.b	(a1)+,d7
000831D6 5307                       		subq.b	#1,d7
000831D8 7C30                       		moveq	#$30,d6
000831DA                            
000831DA                            loc_72228:
000831DA 7600                       		moveq	#0,d3
000831DC 1629 0001                  		move.b	1(a1),d3
000831E0 7402                       		moveq	#$02,d2					; EXT: set PSG to delay for 1 extra frame (This is to match the PSG with the FM/DAC which is delayed a frame by the Z80)
000831E2 1803                       		move.b	d3,d4
000831E4 6B00                       		bmi.s	loc_72244
000831E6 143C 0001                  		move.b	#$01,d2					; EXT: set DAC/FM to delay for 0 frames like normal (these have an auto delay of 1 frame in the Z80)
000831EA 5543                       		subq.w	#2,d3
000831EC E54B                       		lsl.w	#2,d3
000831EE 4BFA 0000                  		lea	dword_722CC(pc),a5
000831F2 2A75 3000                  		movea.l	(a5,d3.w),a5
000831F6 08D5 0002                  		bset	#2,(a5)
000831FA 6000                       		bra.s	loc_7226E
000831FC                            		
000831FC                            ; ===========================================================================
000831FC                            
000831FC                            loc_72244:
000831FC E64B                       		lsr.w	#3,d3
000831FE 4BFA 0000                  		lea	dword_722CC(pc),a5
00083202 2A75 3000                  		movea.l	(a5,d3.w),a5
00083206 08D5 0002                  		bset	#2,(a5)
0008320A 0C04 00C0                  		cmpi.b	#$C0,d4
0008320E 6600                       		bne.s	loc_7226E
00083210 1004                       		move.b	d4,d0
00083212 0000 001F                  		ori.b	#$1F,d0
00083216 13C0 00C0 0011             		move.b	d0,($C00011).l
0008321C 0840 0005                  		bchg	#5,d0
00083220 13C0 00C0 0011             		move.b	d0,($C00011).l
00083226                            
00083226                            loc_7226E:
00083226 4BFA 0000                  		lea	dword_722EC(pc),a5
0008322A 2A75 3000                  		movea.l	(a5,d3.w),a5
0008322E 244D                       		movea.l	a5,a2
00083230 700B                       		moveq	#$B,d0
00083232                            
00083232                            loc_72276:
00083232 429A                       		clr.l	(a2)+
00083234 51C8 FFFC                  		dbf	d0,loc_72276
00083238                            
00083238 3A99                       		move.w	(a1)+,(a5)
0008323A 1B45 0002                  		move.b	d5,2(a5)
0008323E 7000                       		moveq	#0,d0
00083240 3019                       		move.w	(a1)+,d0
00083242 D08B                       		add.l	a3,d0
00083244 2B40 0004                  		move.l	d0,4(a5)
00083248 3B59 0008                  		move.w	(a1)+,8(a5)
0008324C 4A38 C900                  		tst.b	($FFFFC900).w	; is the Spin Dash sound playing?
00083250 6700                       		beq.s	@cont		; if not, branch
00083252 3F00                       		move.w	d0,-(sp)
00083254 1038 C902                  		move.b	($FFFFC902).w,d0
00083258 D12D 0008                  		add.b	d0,8(a5)
0008325C 301F                       		move.w	(sp)+,d0
0008325E                            		
0008325E                            @cont:
0008325E 1B42 000E                  		move.b	d2,$E(a5)				; EXT: moving d2 contents (1 for FM/4 for PSG)
00083262 1B46 000D                  		move.b	d6,$D(a5)
00083266 4A04                       		tst.b	d4
00083268 6B00                       		bmi.s	loc_722A8
0008326A 1B7C 00C0 000A             		move.b	#$C0,$A(a5)
00083270 2B41 0020                  		move.l	d1,$20(a5)
00083274                            
00083274                            loc_722A8:
00083274 51CF FF64                  		dbf	d7,loc_72228
00083278                            
00083278 4A2E 0280                  		tst.b	$280(a6)				; MJ: new SFX location
0008327C 6A00                       		bpl.s	loc_722B8
0008327E 08EE 0002 0370             		bset	#2,$370(a6)				; MJ: new SFX location
00083284                            
00083284                            loc_722B8:
00083284 4A2E 0340                  		tst.b	$340(a6)				; MJ: new SFX location
00083288 6A00                       		bpl.s	locret_722C4
0008328A 08EE 0002 03A0             		bset	#2,$3A0(a6)				; MJ: new SFX location
00083290                            
00083290                            locret_722C4:
00083290 4E75                       		rts	
00083292                            ; ===========================================================================
00083292                            
00083292                            loc_722C6:
00083292 4216                       		clr.b	0(a6)
00083294 4E75                       		rts	
00083296                            ; ===========================================================================
00083296 00FF F100                  dword_722CC:	dc.l $FFF0D0+$30				; MJ: new locations (see all +$30)
0008329A 0000 0000                  		dc.l 0
0008329E 00FF F130                  		dc.l $FFF100+$30
000832A2 00FF F160                  		dc.l $FFF130+$30
000832A6 00FF F1C0                  		dc.l $FFF190+$30
000832AA 00FF F1F0                  		dc.l $FFF1C0+$30
000832AE 00FF F220                  		dc.l $FFF1F0+$30
000832B2 00FF F220                  		dc.l $FFF1F0+$30
000832B6 00FF F250                  dword_722EC:	dc.l $FFF220+$30
000832BA 0000 0000                  		dc.l 0
000832BE 00FF F280                  		dc.l $FFF250+$30
000832C2 00FF F2B0                  		dc.l $FFF280+$30
000832C6 00FF F2E0                  		dc.l $FFF2B0+$30
000832CA 00FF F310                  		dc.l $FFF2E0+$30
000832CE 00FF F340                  		dc.l $FFF310+$30
000832D2 00FF F340                  		dc.l $FFF310+$30
000832D6                            ; ===========================================================================
000832D6                            ; ---------------------------------------------------------------------------
000832D6                            ; Play GHZ waterfall sound
000832D6                            ; ---------------------------------------------------------------------------
000832D6                            
000832D6                            Sound_D0toDF:				; XREF: Sound_ChkValue
000832D6 4A2E 0027                  		tst.b	$27(a6)
000832DA 6600 0000                  		bne.w	locret_723C6
000832DE 4A2E 0004                  		tst.b	4(a6)
000832E2 6600 0000                  		bne.w	locret_723C6
000832E6 4A2E 0024                  		tst.b	$24(a6)
000832EA 6600 0000                  		bne.w	locret_723C6
000832EE 2079 0008 2724             		movea.l	(Go_SoundD0).l,a0
000832F4 0407 00D0                  		subi.b	#$D0,d7
000832F8 E54F                       		lsl.w	#2,d7
000832FA 2670 7000                  		movea.l	(a0,d7.w),a3
000832FE 224B                       		movea.l	a3,a1
00083300 7000                       		moveq	#0,d0
00083302 3019                       		move.w	(a1)+,d0
00083304 D08B                       		add.l	a3,d0
00083306 2D40 0020                  		move.l	d0,$20(a6)
0008330A 1A19                       		move.b	(a1)+,d5
0008330C 1E19                       		move.b	(a1)+,d7
0008330E 5307                       		subq.b	#1,d7
00083310 7C30                       		moveq	#$30,d6
00083312                            
00083312                            loc_72348:
00083312 1829 0001                  		move.b	1(a1),d4
00083316 6B00                       		bmi.s	loc_7235A
00083318 08EE 0002 0130             		bset	#2,$130(a6)				; MJ: new BGM location
0008331E 4BEE 0370                  		lea	$370(a6),a5				; MJ: new SFX location
00083322 6000                       		bra.s	loc_72364
00083324                            ; ===========================================================================
00083324                            
00083324                            loc_7235A:
00083324 08EE 0002 0220             		bset	#2,$220(a6)				; MJ: new BGM location
0008332A 4BEE 03A0                  		lea	$3A0(a6),a5				; MJ: new SFX location
0008332E                            
0008332E                            loc_72364:
0008332E 244D                       		movea.l	a5,a2
00083330 700B                       		moveq	#$B,d0
00083332                            
00083332                            loc_72368:
00083332 429A                       		clr.l	(a2)+
00083334 51C8 FFFC                  		dbf	d0,loc_72368
00083338                            
00083338 3A99                       		move.w	(a1)+,(a5)
0008333A 1B45 0002                  		move.b	d5,2(a5)
0008333E 7000                       		moveq	#0,d0
00083340 3019                       		move.w	(a1)+,d0
00083342 D08B                       		add.l	a3,d0
00083344 2B40 0004                  		move.l	d0,4(a5)
00083348 3B59 0008                  		move.w	(a1)+,8(a5)
0008334C 1B7C 0001 000E             		move.b	#1,$E(a5)
00083352 1B46 000D                  		move.b	d6,$D(a5)
00083356 4A04                       		tst.b	d4
00083358 6B00                       		bmi.s	loc_72396
0008335A 1B7C 00C0 000A             		move.b	#$C0,$A(a5)
00083360                            
00083360                            loc_72396:
00083360 51CF FFB0                  		dbf	d7,loc_72348
00083364                            
00083364 4A2E 0280                  		tst.b	$280(a6)				; MJ: new SFX location
00083368 6A00                       		bpl.s	loc_723A6
0008336A 08EE 0002 0370             		bset	#2,$370(a6)				; MJ: new SFX location
00083370                            
00083370                            loc_723A6:
00083370 4A2E 0340                  		tst.b	$340(a6)				; MJ: new SFX location
00083374 6A00                       		bpl.s	locret_723C6
00083376 08EE 0002 03A0             		bset	#2,$3A0(a6)				; MJ: new SFX location
0008337C 0004 001F                  		ori.b	#$1F,d4
00083380 13C4 00C0 0011             		move.b	d4,($C00011).l
00083386 0844 0005                  		bchg	#5,d4
0008338A 13C4 00C0 0011             		move.b	d4,($C00011).l
00083390                            
00083390                            locret_723C6:
00083390 4E75                       		rts	
00083392                            ; End of function Sound_ChkValue
00083392                            
00083392                            ; ===========================================================================
00083392 00FF F130                  		dc.l $FFF100+$30				; MJ: new channel locations (see +$30)
00083396 00FF F220                  		dc.l $FFF1F0+$30
0008339A 00FF F280                  		dc.l $FFF250+$30
0008339E 00FF F340                  		dc.l $FFF310+$30
000833A2 00FF F370                  		dc.l $FFF340+$30
000833A6 00FF F3A0                  		dc.l $FFF370+$30
000833AA                            
000833AA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000833AA                            
000833AA                            
000833AA                            Snd_FadeOut1:				; XREF: Sound_E0
000833AA 4216                       		clr.b	0(a6)
000833AC 4BEE 0250                  		lea	$250(a6),a5				; MJ: new SFX location
000833B0 7E05                       		moveq	#5,d7
000833B2                            
000833B2                            loc_723EA:
000833B2 4A15                       		tst.b	(a5)
000833B4 6A00 0000                  		bpl.w	loc_72472
000833B8 0895 0007                  		bclr	#7,(a5)
000833BC 7600                       		moveq	#0,d3
000833BE 162D 0001                  		move.b	1(a5),d3
000833C2 6B00                       		bmi.s	loc_7243C
000833C4 4EBA 0000                  		jsr	sub_726FE(pc)
000833C8 0C03 0004                  		cmpi.b	#4,d3
000833CC 6600                       		bne.s	loc_72416
000833CE 4A2E 0370                  		tst.b	$370(a6)				; MJ: new SFX location
000833D2 6A00                       		bpl.s	loc_72416
000833D4 4BEE 0370                  		lea	$370(a6),a5				; MJ: new SFX location
000833D8 226E 0020                  		movea.l	$20(a6),a1
000833DC 6000                       		bra.s	loc_72428
000833DE                            ; ===========================================================================
000833DE                            
000833DE                            loc_72416:
000833DE 5503                       		subq.b	#2,d3
000833E0 E50B                       		lsl.b	#2,d3
000833E2 41FA FEB2                  		lea	dword_722CC(pc),a0
000833E6 264D                       		movea.l	a5,a3
000833E8 2A70 3000                  		movea.l	(a0,d3.w),a5
000833EC 226E 0018                  		movea.l	$18(a6),a1
000833F0                            
000833F0                            loc_72428:
000833F0 0895 0002                  		bclr	#2,(a5)
000833F4 08D5 0001                  		bset	#1,(a5)
000833F8 102D 000B                  		move.b	$B(a5),d0
000833FC 4EBA 0000                  		jsr	sub_72C4E(pc)
00083400 2A4B                       		movea.l	a3,a5
00083402 6000                       		bra.s	loc_72472
00083404                            ; ===========================================================================
00083404                            
00083404                            loc_7243C:
00083404 4EBA 0000                  		jsr	sub_729A0(pc)
00083408 41EE 03A0                  		lea	$3A0(a6),a0				; MJ: new SFX location
0008340C 0C03 00E0                  		cmpi.b	#$E0,d3
00083410 6700                       		beq.s	loc_7245A
00083412 0C03 00C0                  		cmpi.b	#$C0,d3
00083416 6700                       		beq.s	loc_7245A
00083418 E60B                       		lsr.b	#3,d3
0008341A 41FA FE7A                  		lea	dword_722CC(pc),a0
0008341E 2070 3000                  		movea.l	(a0,d3.w),a0
00083422                            
00083422                            loc_7245A:
00083422 0890 0002                  		bclr	#2,(a0)
00083426 08D0 0001                  		bset	#1,(a0)
0008342A 0C28 00E0 0001             		cmpi.b	#$E0,1(a0)
00083430 6600                       		bne.s	loc_72472
00083432 13E8 001F 00C0 0011        		move.b	$1F(a0),($C00011).l
0008343A                            
0008343A                            loc_72472:
0008343A DAFC 0030                  		adda.w	#$30,a5
0008343E 51CF FF72                  		dbf	d7,loc_723EA
00083442                            
00083442 4E75                       		rts	
00083444                            ; End of function Snd_FadeOut1
00083444                            
00083444                            
00083444                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00083444                            
00083444                            
00083444                            Snd_FadeOut2:				; XREF: Sound_E0
00083444 4BEE 0370                  		lea	$370(a6),a5				; MJ: new SFX location
00083448 4A15                       		tst.b	(a5)
0008344A 6A00                       		bpl.s	loc_724AE
0008344C 0895 0007                  		bclr	#7,(a5)
00083450 0815 0002                  		btst	#2,(a5)
00083454 6600                       		bne.s	loc_724AE
00083456 4EBA 0000                  		jsr	loc_7270A(pc)
0008345A 4BEE 0130                  		lea	$130(a6),a5				; MJ: new BGM location
0008345E 0895 0002                  		bclr	#2,(a5)
00083462 08D5 0001                  		bset	#1,(a5)
00083466 4A15                       		tst.b	(a5)
00083468 6A00                       		bpl.s	loc_724AE
0008346A 226E 0018                  		movea.l	$18(a6),a1
0008346E 102D 000B                  		move.b	$B(a5),d0
00083472 4EBA 0000                  		jsr	sub_72C4E(pc)
00083476                            
00083476                            loc_724AE:
00083476 4BEE 03A0                  		lea	$3A0(a6),a5				; MJ: new SFX location
0008347A 4A15                       		tst.b	(a5)
0008347C 6A00                       		bpl.s	locret_724E4
0008347E 0895 0007                  		bclr	#7,(a5)
00083482 0815 0002                  		btst	#2,(a5)
00083486 6600                       		bne.s	locret_724E4
00083488 4EBA 0000                  		jsr	loc_729A6(pc)
0008348C 4BEE 0220                  		lea	$220(a6),a5				; MJ: new BGM location
00083490 0895 0002                  		bclr	#2,(a5)
00083494 08D5 0001                  		bset	#1,(a5)
00083498 4A15                       		tst.b	(a5)
0008349A 6A00                       		bpl.s	locret_724E4
0008349C 0C2D 00E0 0001             		cmpi.b	#-$20,1(a5)
000834A2 6600                       		bne.s	locret_724E4
000834A4 13ED 001F 00C0 0011        		move.b	$1F(a5),($C00011).l
000834AC                            
000834AC                            locret_724E4:
000834AC 4E75                       		rts	
000834AE                            ; End of function Snd_FadeOut2
000834AE                            
000834AE                            ; ===========================================================================
000834AE                            ; ---------------------------------------------------------------------------
000834AE                            ; Fade out music
000834AE                            ; ---------------------------------------------------------------------------
000834AE                            
000834AE                            Sound_E0:				; XREF: Sound_ExIndex
000834AE 4EBA FEFA                  		jsr	Snd_FadeOut1(pc)
000834B2 4EBA FF90                  		jsr	Snd_FadeOut2(pc)
000834B6 1D7C 0003 0006             		move.b	#3,6(a6)
000834BC 1D7C 0028 0004             		move.b	#$28,4(a6)
000834C2 422E 0040                  		clr.b	$40(a6)
000834C6 422E 0070                  		clr.b	$70(a6)					; MJ: stop PCM 2 as well
000834CA 422E 002A                  		clr.b	$2A(a6)
000834CE 4E75                       		rts	
000834D0                            
000834D0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000834D0                            
000834D0                            
000834D0                            sub_72504:				; XREF: sub_71B4C
000834D0 102E 0006                  		move.b	6(a6),d0
000834D4 6700                       		beq.s	loc_72510
000834D6 532E 0006                  		subq.b	#1,6(a6)
000834DA 4E75                       		rts	
000834DC                            ; ===========================================================================
000834DC                            
000834DC                            loc_72510:
000834DC 532E 0004                  		subq.b	#1,4(a6)
000834E0 6700 0000                  		beq.w	Sound_E4
000834E4 1D7C 0003 0006             		move.b	#3,6(a6)
000834EA 4BEE 00A0                  		lea	$A0(a6),a5				; MJ: new FM location
000834EE 7E05                       		moveq	#5,d7
000834F0                            
000834F0                            loc_72524:
000834F0 4A15                       		tst.b	(a5)
000834F2 6A00                       		bpl.s	loc_72538
000834F4 522D 0009                  		addq.b	#1,9(a5)
000834F8 6A00                       		bpl.s	loc_72534
000834FA 0895 0007                  		bclr	#7,(a5)
000834FE 6000                       		bra.s	loc_72538
00083500                            ; ===========================================================================
00083500                            
00083500                            loc_72534:
00083500 4EBA 0000                  		jsr	sub_72CB4(pc)
00083504                            
00083504                            loc_72538:
00083504 DAFC 0030                  		adda.w	#$30,a5
00083508 51CF FFE6                  		dbf	d7,loc_72524
0008350C                            
0008350C 7E02                       		moveq	#2,d7
0008350E                            
0008350E                            loc_72542:
0008350E 4A15                       		tst.b	(a5)
00083510 6A00                       		bpl.s	loc_72560
00083512 522D 0009                  		addq.b	#1,9(a5)
00083516 0C2D 0010 0009             		cmpi.b	#$10,9(a5)
0008351C 6500                       		bcs.s	loc_72558
0008351E 0895 0007                  		bclr	#7,(a5)
00083522 6000                       		bra.s	loc_72560
00083524                            ; ===========================================================================
00083524                            
00083524                            loc_72558:
00083524 1C2D 0009                  		move.b	9(a5),d6
00083528 4EBA 0000                  		jsr	sub_7296A(pc)
0008352C                            
0008352C                            loc_72560:
0008352C DAFC 0030                  		adda.w	#$30,a5
00083530 51CF FFDC                  		dbf	d7,loc_72542
00083534                            
00083534 4E75                       		rts	
00083536                            ; End of function sub_72504
00083536                            
00083536                            
00083536                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00083536                            
00083536                            
00083536                            sub_7256A:				; XREF: Sound_E4; sub_725CA
00083536 7602                       		moveq	#2,d3
00083538 7028                       		moveq	#$28,d0
0008353A                            
0008353A                            loc_7256E:
0008353A 1203                       		move.b	d3,d1
0008353C 4EBA 0000                  		jsr	sub_7272E(pc)
00083540 5801                       		addq.b	#4,d1
00083542 4EBA 0000                  		jsr	sub_7272E(pc)
00083546 51CB FFF2                  		dbf	d3,loc_7256E
0008354A                            
0008354A 7040                       		moveq	#$40,d0
0008354C 727F                       		moveq	#$7F,d1
0008354E 7802                       		moveq	#2,d4
00083550                            
00083550                            loc_72584:
00083550 7603                       		moveq	#3,d3
00083552                            
00083552                            loc_72586:
00083552 4EBA 0000                  		jsr	sub_7272E(pc)
00083556 4EBA 0000                  		jsr	sub_72764(pc)
0008355A 5840                       		addq.w	#4,d0
0008355C 51CB FFF4                  		dbf	d3,loc_72586
00083560                            
00083560 0400 000F                  		subi.b	#$F,d0
00083564 51CC FFEA                  		dbf	d4,loc_72584
00083568                            
00083568 4E75                       		rts	
0008356A                            ; End of function sub_7256A
0008356A                            
0008356A                            ; ===========================================================================
0008356A                            ; ---------------------------------------------------------------------------
0008356A                            ; Stop music
0008356A                            ; ---------------------------------------------------------------------------
0008356A                            
0008356A                            Sound_E4:
0008356A 33FC 0100 00A1 1100 0839+  		StopZ80
0008357C 41F9 0000 0000             		lea	(StopSample).l,a0				; EXT: load stop sample address
00083582 43F9 00A0 02E6             		lea	($A00000+PCM1_Sample).l,a1			; EXT: load PCM 1 slot address
00083588 12D8                       		move.b	(a0)+,(a1)+					; EXT: set address of sample
0008358A 12D8                       		move.b	(a0)+,(a1)+					; EXT: ''
0008358C 12D8                       		move.b	(a0)+,(a1)+					; EXT: ''
0008358E 13FC 0064 00A0 0047        		move.b	#(CUPCM1_NewSample&$FF),($A00000+CU_Stack).l	; EXT: set routine to run
00083596 13FC 0002 00A0 0048        		move.b	#(CUPCM1_NewSample>>$08),($A00000+CU_Stack+1).l	; EXT: ''
0008359E 13FC 00C9 00A0 01D2        		move.b	#%11001001,($A00000+CUPCM1_RET).l		; EXT: change "NOP" to "RET"
000835A6 41F9 0000 0000             		lea	(StopSample).l,a0				; EXT: load stop sample address
000835AC 43F9 00A0 02E9             		lea	($A00000+PCM2_Sample).l,a1			; EXT: load PCM 2 slot address
000835B2 12D8                       		move.b	(a0)+,(a1)+					; EXT: ''
000835B4 12D8                       		move.b	(a0)+,(a1)+					; EXT: ''
000835B6 12D8                       		move.b	(a0)+,(a1)+					; EXT: ''
000835B8 13FC 0028 00A0 01D3        		move.b	#%00101000,($A00000+CUPCM2_RET).l		; EXT: change "JR NZ" to "JR Z"
000835C0 33FC 0000 00A1 1100        		StartZ80
000835C8                            
000835C8 702B                       		moveq	#$2B,d0
000835CA 123C 0080                  		move.b	#$80,d1
000835CE 4EBA 0000                  		jsr	sub_7272E(pc)
000835D2 7027                       		moveq	#$27,d0
000835D4 7200                       		moveq	#0,d1
000835D6 4EBA 0000                  		jsr	sub_7272E(pc)
000835DA 204E                       		movea.l	a6,a0
000835DC 2C2E 0010                  		move.l	$10(a6),d6					; EXT: store YM Cue list pointer
000835E0 303C 00EF                  		move.w	#$EF,d0						; MJ: new size of data to clear
000835E4                            
000835E4                            loc_725B6:
000835E4 4298                       		clr.l	(a0)+
000835E6 51C8 FFFC                  		dbf	d0,loc_725B6
000835EA                            
000835EA 2D46 0010                  		move.l	d6,$10(a6)					; EXT: restore YM Cue list pointer
000835EE 1D7C 0080 0009             		move.b	#$80,9(a6)	; set music to $80 (silence)
000835F4 4EBA FF40                  		jsr	sub_7256A(pc)
000835F8 6000 0000                  		bra.w	sub_729B6
000835FC                            
000835FC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000835FC                            
000835FC                            
000835FC                            sub_725CA:				; XREF: Sound_ChkValue
000835FC 204E                       		movea.l	a6,a0
000835FE 1216                       		move.b	0(a6),d1
00083600 142E 0027                  		move.b	$27(a6),d2
00083604 162E 002A                  		move.b	$2A(a6),d3
00083608 182E 0026                  		move.b	$26(a6),d4
0008360C 3A2E 000A                  		move.w	$A(a6),d5
00083610 2C2E 0010                  		move.l	$10(a6),d6					; EXT: store YM Cue list pointer
00083614 303C 0093                  		move.w	#$93,d0						; MJ: new size
00083618                            
00083618                            loc_725E4:
00083618 4298                       		clr.l	(a0)+
0008361A 51C8 FFFC                  		dbf	d0,loc_725E4
0008361E                            
0008361E 1C81                       		move.b	d1,0(a6)
00083620 1D42 0027                  		move.b	d2,$27(a6)
00083624 1D43 002A                  		move.b	d3,$2A(a6)
00083628 1D44 0026                  		move.b	d4,$26(a6)
0008362C 3D45 000A                  		move.w	d5,$A(a6)
00083630 2D46 0010                  		move.l	d6,$10(a6)					; EXT: restore YM Cue list pointer
00083634 1D7C 0080 0009             		move.b	#$80,9(a6)
0008363A 4EBA FEFA                  		jsr	sub_7256A(pc)
0008363E 6000 0000                  		bra.w	sub_729B6
00083642                            ; End of function sub_725CA
00083642                            
00083642                            
00083642                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00083642                            
00083642                            
00083642                            sub_7260C:				; XREF: sub_71B4C
00083642 1D6E 0002 0001             		move.b	2(a6),1(a6)
00083648 41EE 004E                  		lea	$4E(a6),a0
0008364C 7030                       		moveq	#$30,d0
0008364E 720A                       		moveq	#10,d1				; MJ: new number of channels
00083650                            
00083650                            loc_7261A:
00083650 5210                       		addq.b	#1,(a0)
00083652 D0C0                       		adda.w	d0,a0
00083654 51C9 FFFA                  		dbf	d1,loc_7261A
00083658                            
00083658 4E75                       		rts	
0008365A                            ; End of function sub_7260C
0008365A                            
0008365A                            ; ===========================================================================
0008365A                            ; ---------------------------------------------------------------------------
0008365A                            ; Speed	up music
0008365A                            ; ---------------------------------------------------------------------------
0008365A                            
0008365A                            Sound_E2:				; XREF: Sound_ExIndex
0008365A 4A2E 0027                  		tst.b	$27(a6)
0008365E 6600                       		bne.s	loc_7263E
00083660 1D6E 0029 0002             		move.b	$29(a6),2(a6)
00083666 1D6E 0029 0001             		move.b	$29(a6),1(a6)
0008366C 1D7C 0080 002A             		move.b	#$80,$2A(a6)
00083672 4E75                       		rts	
00083674                            ; ===========================================================================
00083674                            
00083674                            loc_7263E:
00083674 1D6E 03F9 03D2             		move.b	$3F9(a6),$3D2(a6)			; MJ: new location
0008367A 1D6E 03F9 03D1             		move.b	$3F9(a6),$3D1(a6)			; MJ: new location
00083680 1D7C 0080 03FA             		move.b	#$80,$3FA(a6)
00083686 4E75                       		rts	
00083688                            ; ===========================================================================
00083688                            ; ---------------------------------------------------------------------------
00083688                            ; Change music back to normal speed
00083688                            ; ---------------------------------------------------------------------------
00083688                            
00083688                            Sound_E3:				; XREF: Sound_ExIndex
00083688 4A2E 0027                  		tst.b	$27(a6)
0008368C 6600                       		bne.s	loc_7266A
0008368E 1D6E 0028 0002             		move.b	$28(a6),2(a6)
00083694 1D6E 0028 0001             		move.b	$28(a6),1(a6)
0008369A 422E 002A                  		clr.b	$2A(a6)
0008369E 4E75                       		rts	
000836A0                            ; ===========================================================================
000836A0                            
000836A0                            loc_7266A:
000836A0 1D6E 03F8 03D2             		move.b	$3F8(a6),$3D2(a6)
000836A6 1D6E 03F8 03D1             		move.b	$3F8(a6),$3D1(a6)
000836AC 422E 03FA                  		clr.b	$3FA(a6)
000836B0 4E75                       		rts	
000836B2                            
000836B2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000836B2                            
000836B2                            
000836B2                            sub_7267C:				; XREF: sub_71B4C
000836B2 4A2E 0025                  		tst.b	$25(a6)
000836B6 6700                       		beq.s	loc_72688
000836B8 532E 0025                  		subq.b	#1,$25(a6)
000836BC 4E75                       		rts	
000836BE                            ; ===========================================================================
000836BE                            
000836BE                            loc_72688:
000836BE 4A2E 0026                  		tst.b	$26(a6)
000836C2 6700                       		beq.s	loc_726D6
000836C4 532E 0026                  		subq.b	#1,$26(a6)
000836C8 1D7C 0002 0025             		move.b	#2,$25(a6)
000836CE 4BEE 00A0                  		lea	$A0(a6),a5				; MJ: new SFX location
000836D2 7E05                       		moveq	#5,d7
000836D4                            
000836D4                            loc_7269E:
000836D4 4A15                       		tst.b	(a5)
000836D6 6A00                       		bpl.s	loc_726AA
000836D8 532D 0009                  		subq.b	#1,9(a5)
000836DC 4EBA 0000                  		jsr	sub_72CB4(pc)
000836E0                            
000836E0                            loc_726AA:
000836E0 DAFC 0030                  		adda.w	#$30,a5
000836E4 51CF FFEE                  		dbf	d7,loc_7269E
000836E8 7E02                       		moveq	#2,d7
000836EA                            
000836EA                            loc_726B4:
000836EA 4A15                       		tst.b	(a5)
000836EC 6A00                       		bpl.s	loc_726CC
000836EE 532D 0009                  		subq.b	#1,9(a5)
000836F2 1C2D 0009                  		move.b	9(a5),d6
000836F6 0C06 0010                  		cmpi.b	#$10,d6
000836FA 6500                       		bcs.s	loc_726C8
000836FC 7C0F                       		moveq	#$F,d6
000836FE                            
000836FE                            loc_726C8:
000836FE 4EBA 0000                  		jsr	sub_7296A(pc)
00083702                            
00083702                            loc_726CC:
00083702 DAFC 0030                  		adda.w	#$30,a5
00083706 51CF FFE2                  		dbf	d7,loc_726B4
0008370A 4E75                       		rts	
0008370C                            ; ===========================================================================
0008370C                            
0008370C                            loc_726D6:
0008370C 08AE 0002 0040             		bclr	#2,$40(a6)
00083712 08AE 0002 0070             		bclr	#2,$70(a6)				; MJ: do PCM 2 as well...
00083718 422E 0024                  		clr.b	$24(a6)
0008371C 4E75                       		rts	
0008371E                            ; End of function sub_7267C
0008371E                            
0008371E                            ; ===========================================================================
0008371E                            
0008371E                            loc_726E2:				; XREF: sub_71CCA
0008371E 0815 0001                  		btst	#1,(a5)
00083722 6600                       		bne.s	locret_726FC
00083724 0815 0002                  		btst	#2,(a5)
00083728 6600                       		bne.s	locret_726FC
0008372A 7028                       		moveq	#$28,d0
0008372C 122D 0001                  		move.b	1(a5),d1
00083730 0001 00F0                  		ori.b	#-$10,d1
00083734 6000 0000                  		bra.w	sub_7272E
00083738                            ; ===========================================================================
00083738                            
00083738                            locret_726FC:
00083738 4E75                       		rts	
0008373A                            
0008373A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008373A                            
0008373A                            
0008373A                            sub_726FE:				; XREF: sub_71CEC; sub_71D9E; Sound_ChkValue; Snd_FadeOut1
0008373A 0815 0004                  		btst	#4,(a5)
0008373E 6600                       		bne.s	locret_72714
00083740 0815 0002                  		btst	#2,(a5)
00083744 6600                       		bne.s	locret_72714
00083746                            
00083746                            loc_7270A:				; XREF: Snd_FadeOut2
00083746 7028                       		moveq	#$28,d0
00083748 122D 0001                  		move.b	1(a5),d1
0008374C 6000 0000                  		bra.w	sub_7272E
00083750                            ; ===========================================================================
00083750                            
00083750                            locret_72714:
00083750 4E75                       		rts	
00083752                            ; End of function sub_726FE
00083752                            
00083752                            ; ===========================================================================
00083752                            
00083752                            loc_72716:				; XREF: sub_72A5A
00083752 0815 0002                  		btst	#2,(a5)
00083756 6600                       		bne.s	locret_72720
00083758 6000 0000                  		bra.w	sub_72722
0008375C                            ; ===========================================================================
0008375C                            
0008375C                            locret_72720:
0008375C 4E75                       		rts
0008375E                            
0008375E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008375E                            
0008375E                            
0008375E                            sub_72722:				; XREF: sub_71E18; sub_72C4E; sub_72CB4
0008375E 082D 0002 0001             		btst	#2,1(a5)
00083764 6600                       		bne.s	loc_7275A
00083766 D02D 0001                  		add.b	1(a5),d0
0008376A                            ; End of function sub_72722
0008376A                            
0008376A                            
0008376A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008376A                            
0008376A                            sub_7272E:
0008376A 48E7 2080                  		movem.l	d2/a0,-(sp)				; EXT: store register data
0008376E 206E 0010                  		movea.l	$10(a6),a0				; EXT: load Cue pointer
00083772 5248                       		addq.w	#$01,a0					; EXT: skip $40
00083774 143C 0000                  		move.b	#$00,d2					; EXT: prepare d2 for YM2612 port address ($4000 - $4001)
00083778 33FC 0100 00A1 1100 0839+  		StopZ80						; EXT: request Z80 stop "ON"
0008378A 10C2                       		move.b	d2,(a0)+				; EXT: write YM2612 port address
0008378C 10C1                       		move.b	d1,(a0)+				; EXT: write YM2612 data
0008378E 10C0                       		move.b	d0,(a0)+				; EXT: write YM2612 address
00083790 33FC 0000 00A1 1100        		StartZ80					; EXT: request Z80 stop "OFF"
00083798 3408                       		move.w	a0,d2					; EXT: load Cue pointer
0008379A 0242 0FFF                  		andi.w	#$0FFF,d2				; EXT: wrap it
0008379E 0042 1000                  		ori.w	#$1000,d2				; EXT: ''
000837A2 3D42 0012                  		move.w	d2,$12(a6)				; EXT: update it
000837A6 4CDF 0104                  		movem.l	(sp)+,d2/a0				; EXT: restore register data
000837AA 4E75                       		rts						; EXT: return
000837AC                            
000837AC                            ; ===========================================================================
000837AC                            
000837AC                            loc_7275A:				; XREF: sub_72722
000837AC 142D 0001                  		move.b	1(a5),d2
000837B0 0882 0002                  		bclr	#2,d2
000837B4 D002                       		add.b	d2,d0
000837B6                            
000837B6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000837B6                            
000837B6                            
000837B6                            sub_72764:
000837B6 48E7 2080                  		movem.l	d2/a0,-(sp)				; EXT: store register data
000837BA 206E 0010                  		movea.l	$10(a6),a0				; EXT: load Cue pointer
000837BE 5248                       		addq.w	#$01,a0					; EXT: skip $40
000837C0 143C 0002                  		move.b	#$02,d2					; EXT: prepare d2 for YM2612 port address ($4002 - $4003)
000837C4 33FC 0100 00A1 1100 0839+  		StopZ80						; EXT: request Z80 stop "ON"
000837D6 10C2                       		move.b	d2,(a0)+				; EXT: write YM2612 port address
000837D8 10C1                       		move.b	d1,(a0)+				; EXT: write YM2612 data
000837DA 10C0                       		move.b	d0,(a0)+				; EXT: write YM2612 address
000837DC 33FC 0000 00A1 1100        		StartZ80					; EXT: request Z80 stop "OFF"
000837E4 3408                       		move.w	a0,d2					; EXT: load Cue pointer
000837E6 0242 0FFF                  		andi.w	#$0FFF,d2				; EXT: wrap it
000837EA 0042 1000                  		ori.w	#$1000,d2				; EXT: ''
000837EE 3D42 0012                  		move.w	d2,$12(a6)				; EXT: update it
000837F2 4CDF 0104                  		movem.l	(sp)+,d2/a0				; EXT: restore register data
000837F6 4E75                       		rts						; EXT: return
000837F8                            
000837F8                            ; ===========================================================================
000837F8 025E 0284 02AB 02D3 02FE+  word_72790:	dc.w $25E, $284, $2AB, $2D3, $2FE, $32D, $35C, $38F, $3C5
0008380A 03FF 043C 047C 0A5E 0A84+  		dc.w $3FF, $43C, $47C, $A5E, $A84, $AAB, $AD3, $AFE, $B2D
0008381C 0B5C 0B8F 0BC5 0BFF 0C3C+  		dc.w $B5C, $B8F, $BC5, $BFF, $C3C, $C7C, $125E,	$1284
0008382C 12AB 12D3 12FE 132D 135C+  		dc.w $12AB, $12D3, $12FE, $132D, $135C,	$138F, $13C5, $13FF
0008383C 143C 147C 1A5E 1A84 1AAB+  		dc.w $143C, $147C, $1A5E, $1A84, $1AAB,	$1AD3, $1AFE, $1B2D
0008384C 1B5C 1B8F 1BC5 1BFF 1C3C+  		dc.w $1B5C, $1B8F, $1BC5, $1BFF, $1C3C,	$1C7C, $225E, $2284
0008385C 22AB 22D3 22FE 232D 235C+  		dc.w $22AB, $22D3, $22FE, $232D, $235C,	$238F, $23C5, $23FF
0008386C 243C 247C 2A5E 2A84 2AAB+  		dc.w $243C, $247C, $2A5E, $2A84, $2AAB,	$2AD3, $2AFE, $2B2D
0008387C 2B5C 2B8F 2BC5 2BFF 2C3C+  		dc.w $2B5C, $2B8F, $2BC5, $2BFF, $2C3C,	$2C7C, $325E, $3284
0008388C 32AB 32D3 32FE 332D 335C+  		dc.w $32AB, $32D3, $32FE, $332D, $335C,	$338F, $33C5, $33FF
0008389C 343C 347C 3A5E 3A84 3AAB+  		dc.w $343C, $347C, $3A5E, $3A84, $3AAB,	$3AD3, $3AFE, $3B2D
000838AC 3B5C 3B8F 3BC5 3BFF 3C3C+  		dc.w $3B5C, $3B8F, $3BC5, $3BFF, $3C3C,	$3C7C
000838B8                            
000838B8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000838B8                            
000838B8                            
000838B8                            sub_72850:				; XREF: sub_71B4C
000838B8 532D 000E                  		subq.b	#1,$E(a5)
000838BC 6600                       		bne.s	loc_72866
000838BE 0895 0004                  		bclr	#4,(a5)
000838C2 4EBA 0000                  		jsr	sub_72878(pc)
000838C6 4EBA 0000                  		jsr	sub_728DC(pc)
000838CA 6000 0000                  		bra.w	loc_7292E
000838CE                            ; ===========================================================================
000838CE                            
000838CE                            loc_72866:
000838CE 4EBA F378                  		jsr	sub_71D9E(pc)
000838D2 4EBA 0000                  		jsr	sub_72926(pc)
000838D6 4EBA F398                  		jsr	sub_71DC6(pc)
000838DA 4EBA 0000                  		jsr	sub_728E2(pc)
000838DE 4E75                       		rts	
000838E0                            ; End of function sub_72850
000838E0                            
000838E0                            
000838E0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000838E0                            
000838E0                            
000838E0                            sub_72878:				; XREF: sub_72850
000838E0 0895 0001                  		bclr	#1,(a5)
000838E4 286D 0004                  		movea.l	4(a5),a4
000838E8                            
000838E8                            loc_72880:
000838E8 7A00                       		moveq	#0,d5
000838EA 1A1C                       		move.b	(a4)+,d5
000838EC 0C05 00E0                  		cmpi.b	#$E0,d5
000838F0 6500                       		bcs.s	loc_72890
000838F2 4EBA 0000                  		jsr	sub_72A5A(pc)
000838F6 60F0                       		bra.s	loc_72880
000838F8                            ; ===========================================================================
000838F8                            
000838F8                            loc_72890:
000838F8 4A05                       		tst.b	d5
000838FA 6A00                       		bpl.s	loc_728A4
000838FC 4EBA 0000                  		jsr	sub_728AC(pc)
00083900 1A1C                       		move.b	(a4)+,d5
00083902 4A05                       		tst.b	d5
00083904 6A00                       		bpl.s	loc_728A4
00083906 534C                       		subq.w	#1,a4
00083908 6000 F300                  		bra.w	sub_71D60
0008390C                            ; ===========================================================================
0008390C                            
0008390C                            loc_728A4:
0008390C 4EBA F2DC                  		jsr	sub_71D40(pc)
00083910 6000 F2F8                  		bra.w	sub_71D60
00083914                            ; End of function sub_72878
00083914                            
00083914                            
00083914                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00083914                            
00083914                            
00083914                            sub_728AC:				; XREF: sub_72878
00083914 0405 0081                  		subi.b	#$81,d5
00083918 6500                       		bcs.s	loc_728CA
0008391A DA2D 0008                  		add.b	8(a5),d5
0008391E 0245 007F                  		andi.w	#$7F,d5
00083922 E34D                       		lsl.w	#1,d5
00083924 41FA 0000                  		lea	word_729CE(pc),a0
00083928 3B70 5000 0010             		move.w	(a0,d5.w),$10(a5)
0008392E 6000 F2DA                  		bra.w	sub_71D60
00083932                            ; ===========================================================================
00083932                            
00083932                            loc_728CA:
00083932 08D5 0001                  		bset	#1,(a5)
00083936 3B7C FFFF 0010             		move.w	#-1,$10(a5)
0008393C 4EBA F2CC                  		jsr	sub_71D60(pc)
00083940 6000 0000                  		bra.w	sub_729A0
00083944                            ; End of function sub_728AC
00083944                            
00083944                            
00083944                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00083944                            
00083944                            
00083944                            sub_728DC:				; XREF: sub_72850
00083944 3C2D 0010                  		move.w	$10(a5),d6
00083948 6B00                       		bmi.s	loc_72920
0008394A                            ; End of function sub_728DC
0008394A                            
0008394A                            
0008394A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008394A                            
0008394A                            
0008394A                            sub_728E2:				; XREF: sub_72850
0008394A 102D 001E                  		move.b	$1E(a5),d0
0008394E 4880                       		ext.w	d0
00083950 DC40                       		add.w	d0,d6
00083952 0815 0002                  		btst	#2,(a5)
00083956 6600                       		bne.s	locret_7291E
00083958 0815 0001                  		btst	#1,(a5)
0008395C 6600                       		bne.s	locret_7291E
0008395E 102D 0001                  		move.b	1(a5),d0
00083962 0C00 00E0                  		cmpi.b	#$E0,d0
00083966 6600                       		bne.s	loc_72904
00083968 103C 00C0                  		move.b	#$C0,d0
0008396C                            
0008396C                            loc_72904:
0008396C 3206                       		move.w	d6,d1
0008396E 0201 000F                  		andi.b	#$F,d1
00083972 8001                       		or.b	d1,d0
00083974 E84E                       		lsr.w	#4,d6
00083976 0206 003F                  		andi.b	#$3F,d6
0008397A 13C0 00C0 0011             		move.b	d0,($C00011).l
00083980 13C6 00C0 0011             		move.b	d6,($C00011).l
00083986                            
00083986                            locret_7291E:
00083986 4E75                       		rts	
00083988                            ; End of function sub_728E2
00083988                            
00083988                            ; ===========================================================================
00083988                            
00083988                            loc_72920:				; XREF: sub_728DC
00083988 08D5 0001                  		bset	#1,(a5)
0008398C 4E75                       		rts	
0008398E                            
0008398E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008398E                            
0008398E                            
0008398E                            sub_72926:				; XREF: sub_72850
0008398E 4A2D 000B                  		tst.b	$B(a5)
00083992 6700 0000                  		beq.w	locret_7298A
00083996                            
00083996                            loc_7292E:				; XREF: sub_72850
00083996 1C2D 0009                  		move.b	9(a5),d6
0008399A 7000                       		moveq	#0,d0
0008399C 102D 000B                  		move.b	$B(a5),d0
000839A0 6700                       		beq.s	sub_7296A
000839A2 2079 0008 2734             		movea.l	(Go_PSGIndex).l,a0
000839A8 5340                       		subq.w	#1,d0
000839AA E548                       		lsl.w	#2,d0
000839AC 2070 0000                  		movea.l	(a0,d0.w),a0
000839B0 102D 000C                  		move.b	$C(a5),d0
000839B4 1030 0000                  		move.b	(a0,d0.w),d0
000839B8 522D 000C                  		addq.b	#1,$C(a5)
000839BC 0800 0007                  		btst	#7,d0
000839C0 6700                       		beq.s	loc_72960
000839C2 0C00 0080                  		cmpi.b	#$80,d0
000839C6 6700                       		beq.s	loc_7299A
000839C8                            
000839C8                            loc_72960:
000839C8 DC40                       		add.w	d0,d6
000839CA 0C06 0010                  		cmpi.b	#$10,d6
000839CE 6500                       		bcs.s	sub_7296A
000839D0 7C0F                       		moveq	#$F,d6
000839D2                            ; End of function sub_72926
000839D2                            
000839D2                            
000839D2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000839D2                            
000839D2                            
000839D2                            sub_7296A:				; XREF: sub_72504; sub_7267C; sub_72926
000839D2 0815 0001                  		btst	#1,(a5)
000839D6 6600                       		bne.s	locret_7298A
000839D8 0815 0002                  		btst	#2,(a5)
000839DC 6600                       		bne.s	locret_7298A
000839DE 0815 0004                  		btst	#4,(a5)
000839E2 6600                       		bne.s	loc_7298C
000839E4                            
000839E4                            loc_7297C:
000839E4 8C2D 0001                  		or.b	1(a5),d6
000839E8 0606 0010                  		addi.b	#$10,d6
000839EC 13C6 00C0 0011             		move.b	d6,($C00011).l
000839F2                            
000839F2                            locret_7298A:
000839F2 4E75                       		rts	
000839F4                            ; ===========================================================================
000839F4                            
000839F4                            loc_7298C:
000839F4 4A2D 0013                  		tst.b	$13(a5)
000839F8 67EA                       		beq.s	loc_7297C
000839FA 4A2D 0012                  		tst.b	$12(a5)
000839FE 66E4                       		bne.s	loc_7297C
00083A00 4E75                       		rts	
00083A02                            ; End of function sub_7296A
00083A02                            
00083A02                            ; ===========================================================================
00083A02                            
00083A02                            loc_7299A:				; XREF: sub_72926
00083A02 532D 000C                  		subq.b	#1,$C(a5)
00083A06 4E75                       		rts	
00083A08                            
00083A08                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00083A08                            
00083A08                            
00083A08                            sub_729A0:				; XREF: sub_71D9E; Sound_ChkValue; Snd_FadeOut1; sub_728AC
00083A08 0815 0002                  		btst	#2,(a5)
00083A0C 6600                       		bne.s	locret_729B4
00083A0E                            
00083A0E                            loc_729A6:				; XREF: Snd_FadeOut2
00083A0E 102D 0001                  		move.b	1(a5),d0
00083A12 0000 001F                  		ori.b	#$1F,d0
00083A16 13C0 00C0 0011             		move.b	d0,($C00011).l
00083A1C                            
00083A1C                            locret_729B4:
00083A1C 4E75                       		rts	
00083A1E                            ; End of function sub_729A0
00083A1E                            
00083A1E                            
00083A1E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00083A1E                            
00083A1E                            
00083A1E                            sub_729B6:				; XREF: loc_71E7C
00083A1E 41F9 00C0 0011             		lea	($C00011).l,a0
00083A24 10BC 009F                  		move.b	#$9F,(a0)
00083A28 10BC 00BF                  		move.b	#$BF,(a0)
00083A2C 10BC 00DF                  		move.b	#$DF,(a0)
00083A30 10BC 00FF                  		move.b	#$FF,(a0)
00083A34 4E75                       		rts	
00083A36                            ; End of function sub_729B6
00083A36                            
00083A36                            ; ===========================================================================
00083A36 0356 0326 02F9 02CE 02A5+  word_729CE:	dc.w $356, $326, $2F9, $2CE, $2A5, $280, $25C, $23A, $21A
00083A48 01FB 01DF 01C4 01AB 0193+  		dc.w $1FB, $1DF, $1C4, $1AB, $193, $17D, $167, $153, $140
00083A5A 012E 011D 010D 00FE 00EF+  		dc.w $12E, $11D, $10D, $FE, $EF, $E2, $D6, $C9,	$BE, $B4
00083A6E 00A9 00A0 0097 008F 0087+  		dc.w $A9, $A0, $97, $8F, $87, $7F, $78,	$71, $6B, $65
00083A82 005F 005A 0055 0050 004B+  		dc.w $5F, $5A, $55, $50, $4B, $47, $43,	$40, $3C, $39
00083A96 0036 0033 0030 002D 002B+  		dc.w $36, $33, $30, $2D, $2B, $28, $26,	$24, $22, $20
00083AAA 001F 001D 001B 001A 0018+  		dc.w $1F, $1D, $1B, $1A, $18, $17, $16,	$15, $13, $12
00083ABE 0011 0000                  		dc.w $11, 0
00083AC2                            
00083AC2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00083AC2                            
00083AC2                            
00083AC2                            sub_72A5A:				; XREF: sub_71C4E; sub_71CEC; sub_72878
00083AC2 0445 00E0                  		subi.w	#$E0,d5
00083AC6 E54D                       		lsl.w	#2,d5
00083AC8 4EFB 5000                  		jmp	loc_72A64(pc,d5.w)
00083ACC                            ; End of function sub_72A5A
00083ACC                            
00083ACC                            ; ===========================================================================
00083ACC                            
00083ACC                            loc_72A64:
00083ACC 6000 0000                  		bra.w	loc_72ACC
00083AD0                            ; ===========================================================================
00083AD0 6000 0000                  		bra.w	loc_72AEC
00083AD4                            ; ===========================================================================
00083AD4 6000 0000                  		bra.w	loc_72AF2
00083AD8                            ; ===========================================================================
00083AD8 6000 0000                  		bra.w	loc_72AF8
00083ADC                            ; ===========================================================================
00083ADC 6000 0000                  		bra.w	loc_72B14
00083AE0                            ; ===========================================================================
00083AE0 6000 0000                  		bra.w	loc_72B9E
00083AE4                            ; ===========================================================================
00083AE4 6000 0000                  		bra.w	loc_72BA4
00083AE8                            ; ===========================================================================
00083AE8 6000 0000                  		bra.w	loc_72BAE
00083AEC                            ; ===========================================================================
00083AEC 6000 0000                  		bra.w	loc_72BB4
00083AF0                            ; ===========================================================================
00083AF0 6000 0000                  		bra.w	loc_72BBE
00083AF4                            ; ===========================================================================
00083AF4 6000 0000                  		bra.w	loc_72BC6
00083AF8                            ; ===========================================================================
00083AF8 6000 0000                  		bra.w	loc_72BD0
00083AFC                            ; ===========================================================================
00083AFC 6000 0000                  		bra.w	loc_72BE6
00083B00                            ; ===========================================================================
00083B00 6000 0000                  		bra.w	loc_72BEE
00083B04                            ; ===========================================================================
00083B04 6000 0000                  		bra.w	loc_72BF4
00083B08                            ; ===========================================================================
00083B08 6000 0000                  		bra.w	loc_72C26
00083B0C                            ; ===========================================================================
00083B0C 6000 0000                  		bra.w	loc_72D30
00083B10                            ; ===========================================================================
00083B10 6000 0000                  		bra.w	loc_72D52
00083B14                            ; ===========================================================================
00083B14 6000 0000                  		bra.w	loc_72D58
00083B18                            ; ===========================================================================
00083B18 6000 0000                  		bra.w	loc_72E06
00083B1C                            ; ===========================================================================
00083B1C 6000 0000                  		bra.w	loc_72E20
00083B20                            ; ===========================================================================
00083B20 6000 0000                  		bra.w	loc_72E26
00083B24                            ; ===========================================================================
00083B24 6000 0000                  		bra.w	loc_72E2C
00083B28                            ; ===========================================================================
00083B28 6000 0000                  		bra.w	loc_72E38
00083B2C                            ; ===========================================================================
00083B2C 6000 0000                  		bra.w	loc_72E52
00083B30                            ; ===========================================================================
00083B30 6000 0000                  		bra.w	loc_72E64
00083B34                            ; ===========================================================================
00083B34                            
00083B34                            loc_72ACC:				; XREF: loc_72A64
00083B34 121C                       		move.b	(a4)+,d1
00083B36 4A2D 0001                  		tst.b	1(a5)
00083B3A 6B00                       		bmi.s	locret_72AEA
00083B3C 102D 000A                  		move.b	$A(a5),d0
00083B40 0200 0037                  		andi.b	#$37,d0
00083B44 8200                       		or.b	d0,d1
00083B46 1B41 000A                  		move.b	d1,$A(a5)
00083B4A 103C 00B4                  		move.b	#$B4,d0
00083B4E 6000 FC02                  		bra.w	loc_72716
00083B52                            ; ===========================================================================
00083B52                            
00083B52                            locret_72AEA:
00083B52 4E75                       		rts	
00083B54                            ; ===========================================================================
00083B54                            
00083B54                            loc_72AEC:				; XREF: loc_72A64
00083B54 1B5C 001E                  		move.b	(a4)+,$1E(a5)
00083B58 4E75                       		rts	
00083B5A                            ; ===========================================================================
00083B5A                            
00083B5A                            loc_72AF2:				; XREF: loc_72A64
00083B5A 1D5C 0007                  		move.b	(a4)+,7(a6)
00083B5E 4E75                       		rts	
00083B60                            ; ===========================================================================
00083B60                            
00083B60                            loc_72AF8:				; XREF: loc_72A64
00083B60 7000                       		moveq	#0,d0
00083B62 102D 000D                  		move.b	$D(a5),d0
00083B66 2875 0000                  		movea.l	(a5,d0.w),a4
00083B6A 2BBC 0000 0000 0000        		move.l	#0,(a5,d0.w)
00083B72 544C                       		addq.w	#2,a4
00083B74 5800                       		addq.b	#4,d0
00083B76 1B40 000D                  		move.b	d0,$D(a5)
00083B7A 4E75                       		rts	
00083B7C                            ; ===========================================================================
00083B7C                            
00083B7C                            loc_72B14:				; XREF: loc_72A64
00083B7C 204E                       		movea.l	a6,a0
00083B7E 43EE 03D0                  		lea	$3D0(a6),a1				; MJ: new SFX location
00083B82 303C 0093                  		move.w	#$93,d0					; MJ: new size to store
00083B86                            
00083B86                            loc_72B1E:
00083B86 20D9                       		move.l	(a1)+,(a0)+
00083B88 51C8 FFFC                  		dbf	d0,loc_72B1E
00083B8C                            
00083B8C 08EE 0002 0040             		bset	#2,$40(a6)
00083B92 08EE 0002 0070             		bset	#2,$70(a6)				; MJ: enable PCM 2
00083B98 264D                       		movea.l	a5,a3
00083B9A 1C3C 0028                  		move.b	#$28,d6
00083B9E 9C2E 0026                  		sub.b	$26(a6),d6
00083BA2 7E05                       		moveq	#5,d7
00083BA4 4BEE 00A0                  		lea	$A0(a6),a5				; MJ: new FM location
00083BA8                            
00083BA8                            loc_72B3A:
00083BA8 0815 0007                  		btst	#7,(a5)
00083BAC 6700                       		beq.s	loc_72B5C
00083BAE 08D5 0001                  		bset	#1,(a5)
00083BB2 DD2D 0009                  		add.b	d6,9(a5)
00083BB6 0815 0002                  		btst	#2,(a5)
00083BBA 6600                       		bne.s	loc_72B5C
00083BBC 7000                       		moveq	#0,d0
00083BBE 102D 000B                  		move.b	$B(a5),d0
00083BC2 226E 0018                  		movea.l	$18(a6),a1
00083BC6 4EBA 0000                  		jsr	sub_72C4E(pc)
00083BCA                            
00083BCA                            loc_72B5C:
00083BCA DAFC 0030                  		adda.w	#$30,a5
00083BCE 51CF FFD8                  		dbf	d7,loc_72B3A
00083BD2                            
00083BD2 7E02                       		moveq	#2,d7
00083BD4                            
00083BD4                            loc_72B66:
00083BD4 0815 0007                  		btst	#7,(a5)
00083BD8 6700                       		beq.s	loc_72B78
00083BDA 08D5 0001                  		bset	#1,(a5)
00083BDE 4EBA FE28                  		jsr	sub_729A0(pc)
00083BE2 DD2D 0009                  		add.b	d6,9(a5)
00083BE6                            
00083BE6                            loc_72B78:
00083BE6 DAFC 0030                  		adda.w	#$30,a5
00083BEA 51CF FFE8                  		dbf	d7,loc_72B66
00083BEE 2A4B                       		movea.l	a3,a5
00083BF0 1D7C 0080 0024             		move.b	#$80,$24(a6)
00083BF6 1D7C 0028 0026             		move.b	#$28,$26(a6)
00083BFC 422E 0027                  		clr.b	$27(a6)
00083C00 504F                       		addq.w	#8,sp
00083C02 4E75                       		rts	
00083C04                            ; ===========================================================================
00083C04                            
00083C04                            loc_72B9E:				; XREF: loc_72A64
00083C04 1B5C 0002                  		move.b	(a4)+,2(a5)
00083C08 4E75                       		rts	
00083C0A                            ; ===========================================================================
00083C0A                            
00083C0A                            loc_72BA4:				; XREF: loc_72A64
00083C0A 101C                       		move.b	(a4)+,d0
00083C0C D12D 0009                  		add.b	d0,9(a5)
00083C10 6000 0000                  		bra.w	sub_72CB4
00083C14                            ; ===========================================================================
00083C14                            
00083C14                            loc_72BAE:				; XREF: loc_72A64
00083C14 08D5 0004                  		bset	#4,(a5)
00083C18 4E75                       		rts	
00083C1A                            ; ===========================================================================
00083C1A                            
00083C1A                            loc_72BB4:				; XREF: loc_72A64
00083C1A 1B54 0012                  		move.b	(a4),$12(a5)
00083C1E 1B5C 0013                  		move.b	(a4)+,$13(a5)
00083C22 4E75                       		rts	
00083C24                            ; ===========================================================================
00083C24                            
00083C24                            loc_72BBE:				; XREF: loc_72A64
00083C24 101C                       		move.b	(a4)+,d0
00083C26 D12D 0008                  		add.b	d0,8(a5)
00083C2A 4E75                       		rts	
00083C2C                            ; ===========================================================================
00083C2C                            
00083C2C                            loc_72BC6:				; XREF: loc_72A64
00083C2C 1D54 0002                  		move.b	(a4),2(a6)
00083C30 1D5C 0001                  		move.b	(a4)+,1(a6)
00083C34 4E75                       		rts	
00083C36                            ; ===========================================================================
00083C36                            
00083C36                            loc_72BD0:				; XREF: loc_72A64
00083C36 41EE 0040                  		lea	$40(a6),a0
00083C3A 101C                       		move.b	(a4)+,d0
00083C3C 7230                       		moveq	#$30,d1
00083C3E 740A                       		moveq	#10,d2				; MJ: extra channel
00083C40                            
00083C40                            loc_72BDA:
00083C40 1140 0002                  		move.b	d0,2(a0)
00083C44 D0C1                       		adda.w	d1,a0
00083C46 51CA FFF8                  		dbf	d2,loc_72BDA
00083C4A                            
00083C4A 4E75                       		rts	
00083C4C                            ; ===========================================================================
00083C4C                            
00083C4C                            loc_72BE6:				; XREF: loc_72A64
00083C4C 101C                       		move.b	(a4)+,d0
00083C4E D12D 0009                  		add.b	d0,9(a5)
00083C52 4E75                       		rts	
00083C54                            ; ===========================================================================
00083C54                            
00083C54                            loc_72BEE:				; XREF: loc_72A64
00083C54 422E 002C                  		clr.b	$2C(a6)
00083C58 4E75                       		rts	
00083C5A                            ; ===========================================================================
00083C5A                            
00083C5A                            loc_72BF4:				; XREF: loc_72A64
00083C5A 0895 0007                  		bclr	#7,(a5)
00083C5E 0895 0004                  		bclr	#4,(a5)
00083C62 4EBA FAD6                  		jsr	sub_726FE(pc)
00083C66 4A2E 0280                  		tst.b	$280(a6)				; MJ: new SFX location
00083C6A 6B00                       		bmi.s	loc_72C22
00083C6C 264D                       		movea.l	a5,a3
00083C6E 4BEE 0130                  		lea	$130(a6),a5				; MJ: new BGM location
00083C72 226E 0018                  		movea.l	$18(a6),a1
00083C76 0895 0002                  		bclr	#2,(a5)
00083C7A 08D5 0001                  		bset	#1,(a5)
00083C7E 102D 000B                  		move.b	$B(a5),d0
00083C82 4EBA 0000                  		jsr	sub_72C4E(pc)
00083C86 2A4B                       		movea.l	a3,a5
00083C88                            
00083C88                            loc_72C22:
00083C88 504F                       		addq.w	#8,sp
00083C8A 4E75                       		rts	
00083C8C                            ; ===========================================================================
00083C8C                            
00083C8C                            loc_72C26:				; XREF: loc_72A64
00083C8C 7000                       		moveq	#0,d0
00083C8E 101C                       		move.b	(a4)+,d0
00083C90 1B40 000B                  		move.b	d0,$B(a5)
00083C94 0815 0002                  		btst	#2,(a5)
00083C98 6600 0000                  		bne.w	locret_72CAA
00083C9C 226E 0018                  		movea.l	$18(a6),a1
00083CA0 4A2E 000E                  		tst.b	$E(a6)
00083CA4 6700                       		beq.s	sub_72C4E
00083CA6 226D 0020                  		movea.l	$20(a5),a1
00083CAA 4A2E 000E                  		tst.b	$E(a6)
00083CAE 6B00                       		bmi.s	sub_72C4E
00083CB0 226E 0020                  		movea.l	$20(a6),a1
00083CB4                            
00083CB4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00083CB4                            
00083CB4                            
00083CB4                            sub_72C4E:				; XREF: Snd_FadeOut1; et al
00083CB4 5340                       		subq.w	#1,d0
00083CB6 6B00                       		bmi.s	loc_72C5C
00083CB8 323C 0019                  		move.w	#$19,d1
00083CBC                            
00083CBC                            loc_72C56:
00083CBC D2C1                       		adda.w	d1,a1
00083CBE 51C8 FFFC                  		dbf	d0,loc_72C56
00083CC2                            
00083CC2                            loc_72C5C:
00083CC2 1219                       		move.b	(a1)+,d1
00083CC4 1B41 001F                  		move.b	d1,$1F(a5)
00083CC8 1801                       		move.b	d1,d4
00083CCA 103C 00B0                  		move.b	#$B0,d0
00083CCE 4EBA FA8E                  		jsr	sub_72722(pc)
00083CD2 45FA 0000                  		lea	byte_72D18(pc),a2
00083CD6 7613                       		moveq	#$13,d3
00083CD8                            
00083CD8                            loc_72C72:
00083CD8 101A                       		move.b	(a2)+,d0
00083CDA 1219                       		move.b	(a1)+,d1
00083CDC 4EBA FA80                  		jsr	sub_72722(pc)
00083CE0 51CB FFF6                  		dbf	d3,loc_72C72
00083CE4 7A03                       		moveq	#3,d5
00083CE6 0244 0007                  		andi.w	#7,d4
00083CEA 183B 4000                  		move.b	byte_72CAC(pc,d4.w),d4
00083CEE 162D 0009                  		move.b	9(a5),d3
00083CF2                            
00083CF2                            loc_72C8C:
00083CF2 101A                       		move.b	(a2)+,d0
00083CF4 1219                       		move.b	(a1)+,d1
00083CF6 E20C                       		lsr.b	#1,d4
00083CF8 6400                       		bcc.s	loc_72C96
00083CFA D203                       		add.b	d3,d1
00083CFC                            
00083CFC                            loc_72C96:
00083CFC 4EBA FA60                  		jsr	sub_72722(pc)
00083D00 51CD FFF0                  		dbf	d5,loc_72C8C
00083D04 103C 00B4                  		move.b	#$B4,d0
00083D08 122D 000A                  		move.b	$A(a5),d1
00083D0C 4EBA FA50                  		jsr	sub_72722(pc)
00083D10                            
00083D10                            locret_72CAA:
00083D10 4E75                       		rts	
00083D12                            ; End of function sub_72C4E
00083D12                            
00083D12                            ; ===========================================================================
00083D12 0808 0808 0A0E 0E0F        byte_72CAC:	dc.b 8,	8, 8, 8, $A, $E, $E, $F
00083D1A                            
00083D1A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00083D1A                            
00083D1A                            
00083D1A                            sub_72CB4:				; XREF: sub_72504; sub_7267C; loc_72BA4
00083D1A 0815 0002                  		btst	#2,(a5)
00083D1E 6600                       		bne.s	locret_72D16
00083D20 7000                       		moveq	#0,d0
00083D22 102D 000B                  		move.b	$B(a5),d0
00083D26 226E 0018                  		movea.l	$18(a6),a1
00083D2A 4A2E 000E                  		tst.b	$E(a6)
00083D2E 6700                       		beq.s	loc_72CD8
00083D30 226E 0020                  		movea.l	$20(a6),a1
00083D34 4A2E 000E                  		tst.b	$E(a6)
00083D38 6B00                       		bmi.s	loc_72CD8
00083D3A 226E 0020                  		movea.l	$20(a6),a1
00083D3E                            
00083D3E                            loc_72CD8:
00083D3E 5340                       		subq.w	#1,d0
00083D40 6B00                       		bmi.s	loc_72CE6
00083D42 323C 0019                  		move.w	#$19,d1
00083D46                            
00083D46                            loc_72CE0:
00083D46 D2C1                       		adda.w	d1,a1
00083D48 51C8 FFFC                  		dbf	d0,loc_72CE0
00083D4C                            
00083D4C                            loc_72CE6:
00083D4C D2FC 0015                  		adda.w	#$15,a1
00083D50 45FA 0000                  		lea	byte_72D2C(pc),a2
00083D54 102D 001F                  		move.b	$1F(a5),d0
00083D58 0240 0007                  		andi.w	#7,d0
00083D5C 183B 00B4                  		move.b	byte_72CAC(pc,d0.w),d4
00083D60 162D 0009                  		move.b	9(a5),d3
00083D64 6B00                       		bmi.s	locret_72D16
00083D66 7A03                       		moveq	#3,d5
00083D68                            
00083D68                            loc_72D02:
00083D68 101A                       		move.b	(a2)+,d0
00083D6A 1219                       		move.b	(a1)+,d1
00083D6C E20C                       		lsr.b	#1,d4
00083D6E 6400                       		bcc.s	loc_72D12
00083D70 D203                       		add.b	d3,d1
00083D72 6500                       		bcs.s	loc_72D12
00083D74 4EBA F9E8                  		jsr	sub_72722(pc)
00083D78                            
00083D78                            loc_72D12:
00083D78 51CD FFEE                  		dbf	d5,loc_72D02
00083D7C                            
00083D7C                            locret_72D16:
00083D7C 4E75                       		rts	
00083D7E                            ; End of function sub_72CB4
00083D7E                            
00083D7E                            ; ===========================================================================
00083D7E 3038 343C 5058 545C 6068   byte_72D18:	dc.b $30, $38, $34, $3C, $50, $58, $54,	$5C, $60, $68
00083D88 646C 7078 747C 8088 848C   		dc.b $64, $6C, $70, $78, $74, $7C, $80,	$88, $84, $8C
00083D92 4048 444C                  byte_72D2C:	dc.b $40, $48, $44, $4C
00083D96                            ; ===========================================================================
00083D96                            
00083D96                            loc_72D30:				; XREF: loc_72A64
00083D96 08D5 0003                  		bset	#3,(a5)
00083D9A 2B4C 0014                  		move.l	a4,$14(a5)
00083D9E 1B5C 0018                  		move.b	(a4)+,$18(a5)
00083DA2 1B5C 0019                  		move.b	(a4)+,$19(a5)
00083DA6 1B5C 001A                  		move.b	(a4)+,$1A(a5)
00083DAA 101C                       		move.b	(a4)+,d0
00083DAC E208                       		lsr.b	#1,d0
00083DAE 1B40 001B                  		move.b	d0,$1B(a5)
00083DB2 426D 001C                  		clr.w	$1C(a5)
00083DB6 4E75                       		rts	
00083DB8                            ; ===========================================================================
00083DB8                            
00083DB8                            loc_72D52:				; XREF: loc_72A64
00083DB8 08D5 0003                  		bset	#3,(a5)
00083DBC 4E75                       		rts	
00083DBE                            ; ===========================================================================
00083DBE                            
00083DBE                            loc_72D58:				; XREF: loc_72A64
00083DBE 0895 0007                  		bclr	#7,(a5)
00083DC2 0895 0004                  		bclr	#4,(a5)
00083DC6 4A2D 0001                  		tst.b	1(a5)
00083DCA 6B00                       		bmi.s	loc_72D74
00083DCC 4A2E 0008                  		tst.b	8(a6)
00083DD0 6B00 0000                  		bmi.w	loc_72E02
00083DD4 4EBA F964                  		jsr	sub_726FE(pc)
00083DD8 6000                       		bra.s	loc_72D78
00083DDA                            ; ===========================================================================
00083DDA                            
00083DDA                            loc_72D74:
00083DDA 4EBA FC2C                  		jsr	sub_729A0(pc)
00083DDE                            
00083DDE                            loc_72D78:
00083DDE 4A2E 000E                  		tst.b	$E(a6)
00083DE2 6A00 0000                  		bpl.w	loc_72E02
00083DE6 4216                       		clr.b	0(a6)
00083DE8 7000                       		moveq	#0,d0
00083DEA 102D 0001                  		move.b	1(a5),d0
00083DEE 6B00                       		bmi.s	loc_72DCC
00083DF0 41FA F4A4                  		lea	dword_722CC(pc),a0
00083DF4 264D                       		movea.l	a5,a3
00083DF6 0C00 0004                  		cmpi.b	#4,d0
00083DFA 6600                       		bne.s	loc_72DA8
00083DFC 4A2E 0370                  		tst.b	$370(a6)				; MJ: new SFX location
00083E00 6A00                       		bpl.s	loc_72DA8
00083E02 4BEE 0370                  		lea	$370(a6),a5				; MJ: new SFX location
00083E06 226E 0020                  		movea.l	$20(a6),a1
00083E0A 6000                       		bra.s	loc_72DB8
00083E0C                            ; ===========================================================================
00083E0C                            
00083E0C                            loc_72DA8:
00083E0C 5500                       		subq.b	#2,d0
00083E0E E508                       		lsl.b	#2,d0
00083E10 2A70 0000                  		movea.l	(a0,d0.w),a5
00083E14 4A15                       		tst.b	(a5)
00083E16 6A00                       		bpl.s	loc_72DC8
00083E18 226E 0018                  		movea.l	$18(a6),a1
00083E1C                            
00083E1C                            loc_72DB8:
00083E1C 0895 0002                  		bclr	#2,(a5)
00083E20 08D5 0001                  		bset	#1,(a5)
00083E24 102D 000B                  		move.b	$B(a5),d0
00083E28 4EBA FE8A                  		jsr	sub_72C4E(pc)
00083E2C                            
00083E2C                            loc_72DC8:
00083E2C 2A4B                       		movea.l	a3,a5
00083E2E 6000                       		bra.s	loc_72E02
00083E30                            ; ===========================================================================
00083E30                            
00083E30                            loc_72DCC:
00083E30 41EE 03A0                  		lea	$3A0(a6),a0				; MJ: new SFX location
00083E34 4A10                       		tst.b	(a0)
00083E36 6A00                       		bpl.s	loc_72DE0
00083E38 0C00 00E0                  		cmpi.b	#$E0,d0
00083E3C 6700                       		beq.s	loc_72DEA
00083E3E 0C00 00C0                  		cmpi.b	#$C0,d0
00083E42 6700                       		beq.s	loc_72DEA
00083E44                            
00083E44                            loc_72DE0:
00083E44 41FA F450                  		lea	dword_722CC(pc),a0
00083E48 E608                       		lsr.b	#3,d0
00083E4A 2070 0000                  		movea.l	(a0,d0.w),a0
00083E4E                            
00083E4E                            loc_72DEA:
00083E4E 0890 0002                  		bclr	#2,(a0)
00083E52 08D0 0001                  		bset	#1,(a0)
00083E56 0C28 00E0 0001             		cmpi.b	#$E0,1(a0)
00083E5C 6600                       		bne.s	loc_72E02
00083E5E 13E8 001F 00C0 0011        		move.b	$1F(a0),($C00011).l
00083E66                            
00083E66                            loc_72E02:
00083E66 584F                       		addq.w	#4,sp					; MJ: changed to 4 (go back, but not out of sound driver)
00083E68 4A2E 0008                  		tst.b	$08(a6)					; MJ: is this a PCM channel?
00083E6C 6600                       		bne.s	FlagF2_NoWaitFrame			; MJ: if so, branch
00083E6E 584F                       		addq.w	#4,sp					; MJ: go back outside the sound driver like normal
00083E70                            
00083E70                            FlagF2_NoWaitFrame:
00083E70 4E75                       		rts	
00083E72                            ; ===========================================================================
00083E72                            
00083E72                            loc_72E06:				; XREF: loc_72A64
00083E72 1B7C 00E0 0001             		move.b	#$E0,1(a5)
00083E78 1B5C 001F                  		move.b	(a4)+,$1F(a5)
00083E7C 0815 0002                  		btst	#2,(a5)
00083E80 6600                       		bne.s	locret_72E1E 
00083E82 102C FFFF                  		move.b	-1(a4),d0				; MJ: reload F3 setting to d0
00083E86 13C0 00C0 0011             		move.b	d0,($C00011).l				; MJ: save F3 setting (should be EX (PSG 4) related)
00083E8C 0200 0003                  		andi.b	#%00000011,d0				; MJ: get only frequency mode bits
00083E90 0C00 0003                  		cmpi.b	#%00000011,d0				; MJ: has it been set to use PSG 3's frequency?
00083E94 6600                       		bne.s	locret_72E1E				; MJ: if not, branch
00083E96 13FC 00DF 00C0 0011        		move.b	#%11011111,($C00011).l			; MJ: mute PSG 3's volume
00083E9E                            
00083E9E                            locret_72E1E:
00083E9E 4E75                       		rts	
00083EA0                            ; ===========================================================================
00083EA0                            
00083EA0                            loc_72E20:				; XREF: loc_72A64
00083EA0 0895 0003                  		bclr	#3,(a5)
00083EA4 4E75                       		rts	
00083EA6                            ; ===========================================================================
00083EA6                            
00083EA6                            loc_72E26:				; XREF: loc_72A64
00083EA6 1B5C 000B                  		move.b	(a4)+,$B(a5)
00083EAA 4E75                       		rts	
00083EAC                            ; ===========================================================================
00083EAC                            
00083EAC                            loc_72E2C:				; XREF: loc_72A64
00083EAC 101C                       		move.b	(a4)+,d0
00083EAE E148                       		lsl.w	#8,d0
00083EB0 101C                       		move.b	(a4)+,d0
00083EB2 D8C0                       		adda.w	d0,a4
00083EB4 534C                       		subq.w	#1,a4
00083EB6 4E75                       		rts	
00083EB8                            ; ===========================================================================
00083EB8                            
00083EB8                            loc_72E38:				; XREF: loc_72A64
00083EB8 7000                       		moveq	#0,d0
00083EBA 101C                       		move.b	(a4)+,d0
00083EBC 121C                       		move.b	(a4)+,d1
00083EBE 4A35 0024                  		tst.b	$24(a5,d0.w)
00083EC2 6600                       		bne.s	loc_72E48
00083EC4 1B81 0024                  		move.b	d1,$24(a5,d0.w)
00083EC8                            
00083EC8                            loc_72E48:
00083EC8 5335 0024                  		subq.b	#1,$24(a5,d0.w)
00083ECC 66DE                       		bne.s	loc_72E2C
00083ECE 544C                       		addq.w	#2,a4
00083ED0 4E75                       		rts	
00083ED2                            ; ===========================================================================
00083ED2                            
00083ED2                            loc_72E52:				; XREF: loc_72A64
00083ED2 7000                       		moveq	#0,d0
00083ED4 102D 000D                  		move.b	$D(a5),d0
00083ED8 5900                       		subq.b	#4,d0
00083EDA 2B8C 0000                  		move.l	a4,(a5,d0.w)
00083EDE 1B40 000D                  		move.b	d0,$D(a5)
00083EE2 60C8                       		bra.s	loc_72E2C
00083EE4                            ; ===========================================================================
00083EE4                            
00083EE4                            loc_72E64:				; XREF: loc_72A64
00083EE4 103C 0088                  		move.b	#$88,d0
00083EE8 123C 000F                  		move.b	#$F,d1
00083EEC 4EBA F87C                  		jsr	sub_7272E(pc)
00083EF0 103C 008C                  		move.b	#$8C,d0
00083EF4 123C 000F                  		move.b	#$F,d1
00083EF8 6000 F870                  		bra.w	sub_7272E
00083EFC                            ; ===========================================================================
00083EFC                            Z80ROM:		incbin	"Dual PCM\Z80.bin"
00085EFC                            Z80ROM_End:	even
00085EFC                            Music81:	incbin	sound\music81.bin
000872CA 00                         		even
000872CA                            Music82:	incbin	sound\music82.bin
0008CDF4                            		even
0008CDF4                            Music83:	incbin	sound\music83.bin
0008E2BC 00                         		even
0008E2BC                            Music84:	incbin	sound\music84.bin
0008F98C 00                         		even
0008F98C                            Music85:	incbin	sound\music85.bin
000908B8                            		even
000908B8                            Music86:	incbin	sound\music86.bin
00093ADA 00                         		even
00093ADA                            Music87:	incbin	sound\music87.bin
00093CC6 00                         		even
00093CC6                            Music88:	incbin	sound\music88.bin
00093DBA 00                         		even
00093DBA                            Music89:	incbin	sound\music89.bin
0009513E 00                         		even
0009513E                            Music8A:	incbin	sound\music8A.bin
000A787E 00                         		even
000A787E                            Music8B:	incbin	sound\music8B.bin
000A895E 00                         		even
000A895E                            Music8C:	incbin	sound\music8C.bin
000AB794 00                         		even
000AB794                            Music8D:	incbin	sound\music8D.bin
000AC726 00                         		even
000AC726                            Music8E:	incbin	sound\music8E.bin
000ACA38 00                         		even
000ACA38                            Music8F:	incbin	sound\music8F.bin
000ACB8E 00                         		even
000ACB8E                            Music90:	incbin	sound\music90.bin
000ACCF2 00                         		even
000ACCF2                            Music91:	incbin	sound\music91.bin
000BA4EE 00                         		even
000BA4EE                            Music92:	incbin	sound\music92.bin
000BA61E 00                         		even
000BA61E                            Music93:	incbin	sound\music93.bin
000BA6F2 00                         		even
000BA6F2                            Music94:	incbin	sound\music94.bin
000BC38C                            		even
000BC38C                            Music95:	incbin	sound\music95.bin
000BF134 00                         		even
000BF134                            Music96:	incbin	sound\music96.bin
000C0824 00                         		even
000C0824                            Music97:	incbin	sound\music97.bin
000C6C3E 00                         		even
000C6C3E                            Music98:	incbin	sound\music98.bin
000CAA00 00                         		even
000CAA00                            Music99:	incbin	sound\music92.bin
000CAB30 00                         		even
000CAB30                            Music9A:	incbin	sound\music9A.bin
000CCAFE                            		even
000CCAFE                            Music9B:	incbin	sound\music9B.bin
000D2EB0                            		even
000D2EB0                            Music9C:	incbin	sound\music9C.bin
000D5306                            		even
000D5306                            Music9D:	incbin	sound\music9D.bin
000D8498                            		even
000D8498                            Music9E:	incbin	sound\music9E.bin
000DF048 00                         		even
000DF048                            Music9F:	incbin	sound\music9F.bin
000E6168 00                         		even
000E6168                            ; ---------------------------------------------------------------------------
000E6168                            ; Sound	effect pointers
000E6168                            ; ---------------------------------------------------------------------------
000E6168 0000 0000 0000 0000 0000+  SoundIndex:	dc.l SoundA0, SoundA1, SoundA2
000E6174 0000 0000 0000 0000 0000+  		dc.l SoundA3, SoundA4, SoundA5
000E6180 0000 0000 0000 0000 0000+  		dc.l SoundA6, SoundA7, SoundA8
000E618C 0000 0000 0000 0000 0000+  		dc.l SoundA9, SoundAA, SoundAB
000E6198 0000 0000 0000 0000 0000+  		dc.l SoundAC, SoundAD, SoundAE
000E61A4 0000 0000 0000 0000 0000+  		dc.l SoundAF, SoundB0, SoundB1
000E61B0 0000 0000 0000 0000 0000+  		dc.l SoundB2, SoundB3, SoundB4
000E61BC 0000 0000 0000 0000 0000+  		dc.l SoundB5, SoundB6, SoundB7
000E61C8 0000 0000 0000 0000 0000+  		dc.l SoundB8, SoundB9, SoundBA
000E61D4 0000 0000 0000 0000 0000+  		dc.l SoundBB, SoundBC, SoundBD
000E61E0 0000 0000 0000 0000 0000+  		dc.l SoundBE, SoundBF, SoundC0
000E61EC 0000 0000 0000 0000 0000+  		dc.l SoundC1, SoundC2, SoundC3
000E61F8 0000 0000 0000 0000 0000+  		dc.l SoundC4, SoundC5, SoundC6
000E6204 0000 0000 0000 0000 0000+  		dc.l SoundC7, SoundC8, SoundC9
000E6210 0000 0000 0000 0000 0000+  		dc.l SoundCA, SoundCB, SoundCC
000E621C 0000 0000 0000 0000 0000+  		dc.l SoundCD, SoundCE, SoundCF
000E6228 0000 0000                  		dc.l SoundD1
000E622C                            
000E622C 0000 0000                  SoundD0Index:	dc.l SoundD0
000E6230                            SoundA0:	incbin	sound\soundA0.bin
000E6246                            		even
000E6246                            SoundA1:	incbin	sound\soundA1.bin
000E6270                            		even
000E6270                            SoundA2:	incbin	sound\soundA2.bin
000E6290                            		even
000E6290                            SoundA3:	incbin	sound\soundA3.bin
000E62C2                            		even
000E62C2                            SoundA4:	incbin	sound\soundA4.bin
000E62F8                            		even
000E62F8                            SoundA5:	incbin	sound\soundA5.bin
000E6324                            		even
000E6324                            SoundA6:	incbin	sound\soundA6.bin
000E6354                            		even
000E6354                            SoundA7:	incbin	sound\soundA7.bin
000E6384                            		even
000E6384                            SoundA8:	incbin	sound\soundA8.bin
000E63B8                            		even
000E63B8                            SoundA9:	incbin	sound\soundA9.bin
000E63CA                            		even
000E63CA                            SoundAA:	incbin	sound\soundAA.bin
000E640C                            		even
000E640C                            SoundAB:	incbin	sound\soundAB.bin
000E642C                            		even
000E642C                            SoundAC:	incbin	sound\soundAC.bin
000E6460                            		even
000E6460                            SoundAD:	incbin	sound\soundAD.bin
000E6496                            		even
000E6496                            SoundAE:	incbin	sound\soundAE.bin
000E64E0                            		even
000E64E0                            SoundAF:	incbin	sound\soundAF.bin
000E650E                            		even
000E650E                            SoundB0:	incbin	sound\soundB0.bin
000E6540                            		even
000E6540                            SoundB1:	incbin	sound\soundB1.bin
000E656C                            		even
000E656C                            SoundB2:	incbin	sound\soundB2.bin
000E65BC                            		even
000E65BC                            SoundB3:	incbin	sound\soundB3.bin
000E6606                            		even
000E6606                            SoundB4:	incbin	sound\soundB4.bin
000E6662                            		even
000E6662                            SoundB5:	incbin	sound\soundB5.bin
000E6690                            		even
000E6690                            SoundB6:	incbin	sound\soundB6.bin
000E66AE                            		even
000E66AE                            SoundB7:	incbin	sound\soundB7.bin
000E66EA                            		even
000E66EA                            SoundB8:	incbin	sound\soundB8.bin
000E6708                            		even
000E6708                            SoundB9:	incbin	sound\soundB9.bin
000E676C                            		even
000E676C                            SoundBA:	incbin	sound\soundBA.bin
000E6794                            		even
000E6794                            SoundBB:	incbin	sound\soundBB.bin
000E67C0                            		even
000E67C0                            SoundBC:	incbin	sound\soundBC.bin
000E6802                            		even
000E6802                            SoundBD:	incbin	sound\soundBD.bin
000E6856                            		even
000E6856                            SoundBE:	incbin	sound\soundBE.bin
000E6890                            		even
000E6890                            SoundBF:	incbin	sound\soundBF.bin
000E6902                            		even
000E6902                            SoundC0:	incbin	sound\soundC0.bin
000E6930                            		even
000E6930                            SoundC1:	incbin	sound\soundC1.bin
000E696A                            		even
000E696A                            SoundC2:	incbin	sound\soundC2.bin
000E6994                            		even
000E6994                            SoundC3:	incbin	sound\soundC3.bin
000E6A0E                            		even
000E6A0E                            SoundC4:	incbin	sound\soundC4.bin
000E6A36                            		even
000E6A36                            SoundC5:	incbin	sound\soundC5.bin
000E6A9E                            		even
000E6A9E                            SoundC6:	incbin	sound\soundC6.bin
000E6AE0                            		even
000E6AE0                            SoundC7:	incbin	sound\soundC7.bin
000E6B0E                            		even
000E6B0E                            SoundC8:	incbin	sound\soundC8.bin
000E6B20                            		even
000E6B20                            SoundC9:	incbin	sound\soundC9.bin
000E6B4E                            		even
000E6B4E                            SoundCA:	incbin	sound\soundCA.bin
000E6B7C                            		even
000E6B7C                            SoundCB:	incbin	sound\soundCB.bin
000E6BC8                            		even
000E6BC8                            SoundCC:	incbin	sound\soundCC.bin
000E6C02                            		even
000E6C02                            SoundCD:	incbin	sound\soundCD.bin
000E6C10                            		even
000E6C10                            SoundCE:	incbin	sound\soundCE.bin
000E6C3E                            		even
000E6C3E                            SoundCF:	incbin	sound\soundCF.bin
000E6C76                            		even
000E6C76                            SoundD0:	incbin	sound\soundD0.bin
000E6CB0                            		even
000E6CB0                            SoundD1:	incbin	sound\soundD1.bin
000E6CEC                            		even			
000E6CEC                            SegaPCM:	incbin	sound\segapcm.wav,$3A
000F8372 00                         SegaPCM_End:	even
000F8372                            
000F8372                            ; ===========================================================================
000F8372                            ; ---------------------------------------------------------------------------
000F8372                            ; Sample 68k PCM list
000F8372                            ; ---------------------------------------------------------------------------
000F8372                            
000F8372 0000 0000                  SampleList:		dc.l	StopSample			; 80 (THIS IS A REST NOTE, DO NOT EDIT...)
000F8376 0000 0000                  			dc.l	Sonic1Kick			; 81
000F837A 0000 0000                  			dc.l	Sonic1Snare			; 82
000F837E 0000 0000                  			dc.l	Sonic1TimpaniLow		; 83
000F8382 0000 0000                  			dc.l	ChaotixCrash			; 84
000F8386 0000 0000                   			dc.l	ChaotixSplash			; 85
000F838A 0000 0000                  			dc.l	ChaotixTom1			; 86
000F838E 0000 0000                  			dc.l	ChaotixTom2			; 87
000F8392 0000 0000                  			dc.l	Sonic1TimpaniHigh		; 88
000F8396 0000 0000                  			dc.l	Sonic1TimpaniMid		; 89
000F839A 0000 0000                  			dc.l	Sonic1TimpaniLow		; 8A
000F839E 0000 0000                  			dc.l	Sonic1TimpaniLower		; 8B
000F83A2 0000 0000                  			dc.l	Sonic3CleanSnare		; 8C
000F83A6 0000 0000                  			dc.l	KSTHi		; 8D
000F83AA 0000 0000                  			dc.l	KSTLo		; 8E
000F83AE 0000 0000                  			dc.l	MainCrash		; 8F
000F83B2 0000 0000                  			dc.l	RideCymbal		; 90
000F83B6 0000 0000                  			dc.l	Sonic1SnareSonic3Kick		; 91
000F83BA 0000 0000                  			dc.l	Sonic3Kick		; 92
000F83BE 0000 0000                  			dc.l	Tom1		; 93
000F83C2 0000 0000                  			dc.l	Tom2		; 94
000F83C6 0000 0000                  			dc.l	Tom3		; 95
000F83CA 0000 0000                  			dc.l	Tom4		; 96
000F83CE 0000 0000                  			dc.l	Sonic2Clap		; 97
000F83D2 0000 0000                  			dc.l	Sonic1SnareSonic2Clap		; 98
000F83D6 0000 0000                  			dc.l	S1STom1		; 99	
000F83DA 0000 0000                  			dc.l	S1STom2		; 9A			
000F83DE 0000 0000                  			dc.l	S1STom3		; 9B
000F83E2 0000 0000                  			dc.l	S1STom4		; 9C			
000F83E6 0000 0000                  			dc.l	S1SLLZK		; 9D
000F83EA 0000 0000                  			dc.l	LLZK		; 9E			
000F83EE 0000 0000                  			dc.l	Bongo1		; 9F
000F83F2 0000 0000                  			dc.l	Bongo2		; A0
000F83F6 0000 0000                  			dc.l	S1SnareCrash	;A1
000F83FA 0000 0000                  			dc.l	S1SnareKick	;A2
000F83FE 0000 0000                  			dc.l	MainCrashWoo	;A3
000F8402 0000 0000                  			dc.l	Woo		;A4
000F8406 0000 0000                  			dc.l	GoS1Snare	;A5
000F840A 0000 0000                  			dc.l	CmonRoll	;A6
000F840E 0000 0000                  			dc.l	ReverseCymbal	;A7
000F8412 0000 0000                  			dc.l	Cutscene1	;A8
000F8416 0000 0000                  			dc.l	Cutscene2	;A9
000F841A 0000 0000                  			dc.l	Snare3	;AA
000F841E 0000 0000                  			dc.l	Snare3Crash	;AB
000F8422 0000 0000                  			dc.l	EGGStation	;AC
000F8426                            ; ---------------------------------------------------------------------------
000F8426                            ; Sample z80 pointers
000F8426                            ; ---------------------------------------------------------------------------
000F8426                            
000F8426 0000 00                    StopSample:		dcz80	SWF_StopSample
000F8429 0000 00                    Sonic1Kick:		dcz80	SWF_S1Kick
000F842C 0000 00                    Sonic1Snare:		dcz80	SWF_S1Snare
000F842F 0000 00                    Sonic1TimpaniHigh:	dcz80	SWF_S1TimpaniHigh
000F8432 0000 00                    Sonic1TimpaniMid:	dcz80	SWF_S1TimpaniMid
000F8435 0000 00                    Sonic1TimpaniLow:	dcz80	SWF_S1TimpaniLow
000F8438 0000 00                    Sonic1TimpaniLower:	dcz80	SWF_S1TimpaniLower
000F843B 0000 00                    ChaotixCrash:	dcz80	SWF_ChaotixCrash
000F843E 0000 00                    ChaotixSplash:	dcz80	SWF_ChaotixSplash
000F8441 0000 00                    ChaotixTom1:	dcz80	SWF_ChaotixTom1
000F8444 0000 00                    ChaotixTom2:	dcz80	SWF_ChaotixTom2
000F8447 0000 00                    Sonic3CleanSnare:	dcz80	SWF_Sonic3CleanSnare
000F844A 0000 00                    KSTHi:	dcz80	SWF_KSTHi
000F844D 0000 00                    KSTLo:	dcz80	SWF_KSTLo
000F8450 0000 00                    MainCrash:	dcz80	SWF_MainCrash
000F8453 0000 00                    RideCymbal:	dcz80	SWF_RideCymbal
000F8456 0000 00                    Sonic1SnareSonic3Kick:	dcz80	SWF_Sonic1SnareSonic3Kick
000F8459 0000 00                    Sonic3Kick:	dcz80	SWF_Sonic3Kick
000F845C 0000 00                    Tom1:	dcz80	SWF_Tom1
000F845F 0000 00                    Tom2:	dcz80	SWF_Tom2
000F8462 0000 00                    Tom3:	dcz80	SWF_Tom3
000F8465 0000 00                    Tom4:	dcz80	SWF_Tom4
000F8468 0000 00                    Sonic2Clap:	dcz80	SWF_Sonic2Clap
000F846B 0000 00                    Sonic1SnareSonic2Clap:	dcz80	SWF_Sonic1SnareSonic2Clap
000F846E 0000 00                    S1STom1:	dcz80	SWF_S1STom1
000F8471 0000 00                    S1STom2:	dcz80	SWF_S1STom2
000F8474 0000 00                    S1STom3:	dcz80	SWF_S1STom3
000F8477 0000 00                    S1STom4:	dcz80	SWF_S1STom4
000F847A 0000 00                    LLZK:	dcz80	SWF_LLZK
000F847D 0000 00                    S1SLLZK:	dcz80	SWF_S1SLLZK
000F8480 0000 00                    Bongo1:	dcz80	SWF_Bongo1
000F8483 0000 00                    Bongo2:	dcz80	SWF_Bongo2
000F8486 0000 00                    S1SnareCrash: dcz80 SWF_S1SnareCrash
000F8489 0000 00                    S1SnareKick: dcz80 SWF_S1SnareKick
000F848C 0000 00                    MainCrashWoo: dcz80 SWF_MainCrashWoo
000F848F 0000 00                    Woo: dcz80 SWF_Woo
000F8492 0000 00                    GoS1Snare: dcz80 SWF_GoS1Snare
000F8495 0000 00                    CmonRoll: dcz80 SWF_CmonRoll
000F8498 0000 00                    ReverseCymbal: dcz80 SWF_ReverseCymbal
000F849B 0000 00                    Cutscene1: dcz80 SWF_Cutscene1
000F849E 0000 00                    Cutscene2: dcz80 SWF_Cutscene2
000F84A1 0000 00                    Snare3: dcz80 SWF_Snare3
000F84A4 0000 00                    Snare3Crash: dcz80 SWF_Snare3Crash
000F84A7 0000 00                    EGGStation: dcz80 SWF_EGGStation
000F84AA                            ; ---------------------------------------------------------------------------
000F84AA                            ; Sample file includes
000F84AA                            ; ---------------------------------------------------------------------------
000F84AA 0000 0000 0000 0000 0000+  			align	$20,$FF
000F84C0                            SWF_StopSample:		dcb.b	$7FFF,$00
001004BF 80                         			dc.b	$80
001004C0                            ; ---------------------------------------------------------------------------
001004C0                            SWF_S1Kick:		incbin	"Dual PCM\Samples\incswf\Sonic 1 Kick.swf"
001015E0                            SWF_S1Snare:		incbin	"Dual PCM\Samples\incswf\Sonic 1 Snare.swf"
00102320                            SWF_S1TimpaniHigh:	incbin	"Dual PCM\Samples\incswf\Sonic 1 Timpani High.swf"
001069C0                            SWF_S1TimpaniMid:	incbin	"Dual PCM\Samples\incswf\Sonic 1 Timpani Mid.swf"
0010B900                            SWF_S1TimpaniLow:	incbin	"Dual PCM\Samples\incswf\Sonic 1 Timpani Low.swf"
00111740                            SWF_S1TimpaniLower:	incbin	"Dual PCM\Samples\incswf\Sonic 1 Timpani Lower.swf"
00117B20                            SWF_ChaotixCrash:	incbin	"Dual PCM\Samples\incswf\Knuckles Chaotix Crash Cymbal.swf"
0011F320                            SWF_ChaotixSplash:	incbin	"Dual PCM\Samples\incswf\Knuckles Chaotix Splash Cymbal.swf"
001219C0                            SWF_ChaotixTom1:	incbin	"Dual PCM\Samples\incswf\Knuckles Chaotix Tom 1.swf"
00128A00                            SWF_ChaotixTom2:	incbin	"Dual PCM\Samples\incswf\Knuckles Chaotix Tom 2.swf"
00129B60                            SWF_Sonic3CleanSnare:	incbin	"Dual PCM\Samples\incswf\Sonic 3 Cleaner Snare.swf"
0012AA40                            SWF_KSTHi:	incbin	"Dual PCM\Samples\incswf\KSTHi.swf"
0012F0E0                            SWF_KSTLo:	incbin	"Dual PCM\Samples\incswf\KSTLo.swf"
00134F20                            SWF_MainCrash:	incbin	"Dual PCM\Samples\incswf\MainCrash.swf"
00139E60                            SWF_RideCymbal:	incbin	"Dual PCM\Samples\incswf\RideCymbal.swf"
0013BCC0                            SWF_Sonic1SnareSonic3Kick:	incbin	"Dual PCM\Samples\incswf\Sonic 1 Snare and Sonic 3 Kick.swf"
0013C9E0                            SWF_Sonic3Kick:	incbin	"Dual PCM\Samples\incswf\Sonic 3 Kick.swf"
0013D000                            SWF_Tom1:	incbin	"Dual PCM\Samples\incswf\Tom1.swf"
0013DEE0                            SWF_Tom2:	incbin	"Dual PCM\Samples\incswf\Tom2.swf"
0013F0C0                            SWF_Tom3:	incbin	"Dual PCM\Samples\incswf\Tom3.swf"
001406A0                            SWF_Tom4:	incbin	"Dual PCM\Samples\incswf\Tom4.swf"
00142640                            SWF_Sonic2Clap:	incbin	"Dual PCM\Samples\incswf\Sonic 2 Clap.swf"
00143360                            SWF_Sonic1SnareSonic2Clap:	incbin	"Dual PCM\Samples\incswf\Sonic 1 Snare and Sonic 2 Clap.swf"
001440A0                            SWF_S1STom1:	incbin	"Dual PCM\Samples\incswf\S1STom1.swf"
00144F80                            SWF_S1STom2:	incbin	"Dual PCM\Samples\incswf\S1STom2.swf"
00146160                            SWF_S1STom3:	incbin	"Dual PCM\Samples\incswf\S1STom3.swf"
00147740                            SWF_S1STom4:	incbin	"Dual PCM\Samples\incswf\S1STom4.swf"
001496E0                            SWF_LLZK:	incbin	"Dual PCM\Samples\incswf\LLZK.swf"
0014B160                            SWF_S1SLLZK:	incbin	"Dual PCM\Samples\incswf\S1SLLZK.swf"
0014CBE0                            SWF_Bongo1:	incbin	"Dual PCM\Samples\incswf\Bongo1.swf"
0014D580                            SWF_Bongo2:	incbin	"Dual PCM\Samples\incswf\Bongo2.swf"
0014E2C0                            SWF_S1SnareCrash:	incbin	"Dual PCM\Samples\incswf\S1Snare and MainCrash.swf"
001531E0                            SWF_S1SnareKick:	incbin	"Dual PCM\Samples\incswf\S1SnareKick.swf"
00154300                            SWF_MainCrashWoo:	incbin	"Dual PCM\Samples\incswf\MainCrashWoo.swf"
00159220                            SWF_Woo:	incbin	"Dual PCM\Samples\incswf\Woo.swf"
0015A760                            SWF_GoS1Snare:	incbin	"Dual PCM\Samples\incswf\GoS1Snare.swf"
0015BB60                            SWF_CmonRoll:	incbin	"Dual PCM\Samples\incswf\CmonRoll.swf"
0015E8A0                            SWF_ReverseCymbal:	incbin	"Dual PCM\Samples\incswf\Reverse cymbal.swf"
00162120                            SWF_Cutscene1:	incbin	"Dual PCM\Samples\incswf\Cutscene1.swf"
00167040                            SWF_Cutscene2:	incbin	"Dual PCM\Samples\incswf\Cutscene2.swf"
0016BF60                            SWF_Snare3:	incbin	"Dual PCM\Samples\incswf\Snare3.swf"
0016D460                            SWF_Snare3Crash:	incbin	"Dual PCM\Samples\incswf\Snare3Crash.swf"
00172380                            SWF_EGGStation:	incbin	"Dual PCM\Samples\incswf\EGGStation.swf"
001772A0                            ; ===============================================================
001772A0                            ; ---------------------------------------------------------------
001772A0                            ; Error handling module
001772A0                            ; ---------------------------------------------------------------
001772A0                             
001772A0 4EBA 0000                  BusError:   jsr ErrorHandler(pc)
001772A4 4255 5320 4552 524F 5200           dc.b    "BUS ERROR",0           ; text
001772AE 01                                 dc.b    1               ; extended stack frame
001772B0 00                                 even
001772B0                             
001772B0 4EBA 0000                  AddressError:   jsr ErrorHandler(pc)
001772B4 4144 4452 4553 5320 4552+          dc.b    "ADDRESS ERROR",0       ; text
001772C2 01                                 dc.b    1               ; extended stack frame
001772C4 00                                 even
001772C4                             
001772C4 4EBA 0000                  IllegalInstr:   jsr ErrorHandler(pc)
001772C8 494C 4C45 4741 4C20 494E+          dc.b    "ILLEGAL INSTRUCTION",0     ; text
001772DC 00                                 dc.b    0               ; extended stack frame
001772DE 00                                 even
001772DE                             
001772DE 4EBA 0000                  ZeroDivide: jsr ErrorHandler(pc)
001772E2 5A45 524F 2044 4956 4944+          dc.b    "ZERO DIVIDE",0         ; text
001772EE 00                                 dc.b    0               ; extended stack frame
001772F0 00                                 even
001772F0                             
001772F0 4EBA 0000                  ChkInstr:   jsr ErrorHandler(pc)
001772F4 4348 4B20 494E 5354 5255+          dc.b    "CHK INSTRUCTION",0         ; text
00177304 00                                 dc.b    0               ; extended stack frame
00177306 00                                 even
00177306                             
00177306 4EBA 0000                  TrapvInstr: jsr ErrorHandler(pc)
0017730A 5452 4150 5620 494E 5354+          dc.b    "TRAPV INSTRUCTION",0       ; text
0017731C 00                                 dc.b    0               ; extended stack frame
0017731E 00                                 even
0017731E                             
0017731E 4EBA 0000                  PrivilegeViol:  jsr ErrorHandler(pc)
00177322 5052 4956 494C 4547 4520+          dc.b    "PRIVILEGE VIOLATION",0     ; text
00177336 00                                 dc.b    0               ; extended stack frame
00177338 00                                 even
00177338                             
00177338 4EBA 0000                  Trace:      jsr ErrorHandler(pc)
0017733C 5452 4143 4500                     dc.b    "TRACE",0           ; text
00177342 00                                 dc.b    0               ; extended stack frame
00177344 00                                 even
00177344                             
00177344 4EBA 0000                  Line1010Emu:    jsr ErrorHandler(pc)
00177348 4C49 4E45 2031 3031 3020+          dc.b    "LINE 1010 EMULATOR",0      ; text
0017735B 00                                 dc.b    0               ; extended stack frame
0017735C                                    even
0017735C                             
0017735C 4EBA 0000                  Line1111Emu:    jsr ErrorHandler(pc)
00177360 4C49 4E45 2031 3131 3120+          dc.b    "LINE 1111 EMULATOR",0      ; text
00177373 00                                 dc.b    0               ; extended stack frame
00177374                                    even
00177374                             
00177374 4EBA 0000                  ErrorExcept:    jsr ErrorHandler(pc)
00177378 4552 524F 5220 4558 4345+          dc.b    "ERROR EXCEPTION",0         ; text
00177388 00                                 dc.b    0               ; extended stack frame
0017738A 00                                 even
0017738A                             
0017738A                            ErrorHandler:   incbin  "ErrorHandler.bin"
00177B6E                            
00177B6E                            	include	"s2_menu.asm"	; Sonic 2 level select
00177B6E                            ;===============================================================================
00177B6E                            ; Menu do Sonic 2 No Sonic 1 reprogramado por Esrael L. G. Neto
00177B6E                            ; [ In�cio ]
00177B6E                            ;
00177B6E                            ; O c�digo deste menu foi desenvolvido para funcionar com
00177B6E                            ; o disassembly do Sonic 1 feito por -> drx (www.hacking-cult.org)
00177B6E                            ; 
00177B6E                            ; Se estiver usando um disassembly diferente modifique os jumps no final do 
00177B6E                            ; c�digo para que aponte para as rotinas equivalentes.
00177B6E                            ; 
00177B6E                            ; Para pode utilizar este menu basta fazer a seguinte modifica��o no c�digo 
00177B6E                            ; original:
00177B6E                            ; Localize o label  -> loc_3242 adicione -> jmp     Level_Select_Menu
00177B6E                            ; O c�digo deve ficar como abaixo
00177B6E                            ;               ......................
00177B6E                            ; loc_3242:
00177B6E                            ;		tst.b	($FFFFFFE0).w
00177B6E                            ;		beq.w	PlayLevel	
00177B6E                            ;		btst	#6,($FFFFF604).w 
00177B6E                            ;		beq.w	PlayLevel	  		
00177B6E                            ;		jmp     Level_Select_Menu ; <- Carrega o Menu do Sonic 2	
00177B6E                            ;		moveq	#2,d0		
00177B6E                            ;		bsr.w	PalLoad		 
00177B6E                            ;               ...............
00177B6E                            ;
00177B6E                            ; N�o esque�a de incluir este asm em seu c�digo com a diretiva include:
00177B6E                            ;               include 's2_menu.asm'
00177B6E                            ;===============================================================================  
00177B6E =FFFFFFE1                  Slow_Motion_Flag      equ $FFFFFFE1
00177B6E =FFFFFFE2                  Debug_Mode_Flag       equ $FFFFFFE2
00177B6E                            
00177B6E =00000083                  Level_Select_Menu_snd   = $0083
00177B6E =00000093                  Emerald_Snd             = $0093
00177B6E =000000B5                  Ring_Snd                = $00B5
00177B6E =000000E0                  Volume_Down             = $00E0
00177B6E =000000E4                  Stop_Sound              = $00E4
00177B6E                            ;-------------------------------------------------------------------------------
00177B6E                            Level_Select_Menu:
00177B6E 103C 00E4                                  move.b  #Stop_Sound, D0
00177B72 6100 0000                                  bsr     Menu_Play_Music
00177B76 6100 0000                                  bsr     Menu_Pal_FadeFrom
00177B7A 46FC 2700                                  move    #$2700, SR
00177B7E 3038 F60C                                  move.w  ($FFFFF60C).w, D0
00177B82 0200 00BF                                  andi.b  #$BF, D0
00177B86 33C0 00C0 0004                             move.w  D0, ($00C00004)
00177B8C 6100 0000                                  bsr     Menu_ClearScreen
00177B90 4DF9 00C0 0004                             lea     ($00C00004), A6
00177B96 3CBC 8004                                  move.w  #$8004, (A6)
00177B9A 3CBC 8230                                  move.w  #$8230, (A6)
00177B9E 3CBC 8407                                  move.w  #$8407, (A6)
00177BA2 3CBC 8230                                  move.w  #$8230, (A6)
00177BA6 3CBC 8700                                  move.w  #$8700, (A6)
00177BAA 3CBC 8C81                                  move.w  #$8C81, (A6)
00177BAE 3CBC 9001                                  move.w  #$9001, (A6)
00177BB2 43F8 AC00                                  lea     ($FFFFAC00).w, A1
00177BB6 7000                                       moveq   #$00, D0
00177BB8 323C 00FF                                  move.w  #$00FF, D1
00177BBC                            Offset_0x026ACA:
00177BBC 22C0                                       move.l  D0, (A1)+
00177BBE 51C9 FFFC                                  dbra    D1, Offset_0x026ACA
00177BC2 43F8 B000                                  lea     ($FFFFB000).w, A1
00177BC6 7000                                       moveq   #$00, D0
00177BC8 323C 07FF                                  move.w  #$07FF, D1
00177BCC                            Offset_0x026ADA:
00177BCC 22C0                                       move.l  D0, (A1)+
00177BCE 51C9 FFFC                                  dbra    D1, Offset_0x026ADA
00177BD2 4278 DC00                                  clr.w   ($FFFFDC00).w
00177BD6 21FC FFFF DC00 DCFC                        move.l  #$FFFFDC00, ($FFFFDCFC).w
00177BDE 23FC 4200 0000 00C0 0004                   move.l  #$42000000, ($00C00004)
00177BE8 41F9 0000 0000                             lea     (Menu_Font), A0
00177BEE 6100 0000                                  bsr     Menu_NemesisDec
00177BF2 23FC 5200 0000 00C0 0004                   move.l  #$52000000, ($00C00004)
00177BFC 41F9 0000 0000                             lea     (Level_Icons), A0
00177C02 4EB9 0000 0000                             jsr     Menu_NemesisDec
00177C08                            ;-------------------------------------------------------------------------------                
00177C08                            ; Carrega o Mapeamento do Fundo Sonic/Miles               
00177C08                            ;-------------------------------------------------------------------------------
00177C08 43F9 FFFF 0000                             lea     ($FFFF0000), A1
00177C0E 41F9 0000 0000                             lea     (Menu_Mappings), A0
00177C14 303C 6000                                  move.w  #$6000, D0
00177C18 6100 0000                                  bsr     Menu_EnigmaDec
00177C1C 43F9 FFFF 0000                             lea     ($FFFF0000), A1
00177C22 203C 6000 0003                             move.l  #$60000003, D0
00177C28 7227                                       moveq   #$27, D1
00177C2A 741B                                       moveq   #$1B, D2
00177C2C 6100 0000                                  bsr     Menu_ShowVDPGraphics
00177C30                            ;-------------------------------------------------------------------------------                
00177C30                            ; Carrega o Texto do Menu de Seleзгo de Fases               
00177C30                            ;-------------------------------------------------------------------------------
00177C30 47F9 FFFF 0000             		lea		($FFFF0000),a3
00177C36 323C 045F                  		move.w	#$045F,d1
00177C3A                            
00177C3A                            Offset_0x026B4E:
00177C3A 36FC 0000                  		move.w	#$0000,(a3)+
00177C3E 51C9 FFFA                  		dbra	d1,Offset_0x026B4E
00177C42 47F9 FFFF 0000             		lea		($FFFF0000),a3
00177C48 43F9 0000 0000             		lea		(Menu_Level_Select_Text),a1
00177C4E 4BF9 0000 0000             		lea		(Menu_Text_Positions),a5
00177C54 7000                       		moveq	#$00,d0
00177C56 323C 0009                  		move.w	#$0009,d1	; Quantidade de textos a ser carregada e posiзгo do Sound Test
00177C5A                            
00177C5A                            Menu_Loop_Load_Text:
00177C5A 361D                       		move.w	(a5)+,d3
00177C5C 45F3 3000                  		lea		$00(a3,d3),a2
00177C60 7400                       		moveq	#$00,d2
00177C62 1419                       		move.b	(a1)+,d2
00177C64 3602                       		move.w	d2,d3
00177C66                            
00177C66                            Offset_0x026B7A:
00177C66 1019                       		move.b	(a1)+,d0
00177C68 34C0                       		move.w	d0,(a2)+
00177C6A 51CA FFFA                  		dbra	d2,Offset_0x026B7A
00177C6E 343C 000D                  		move.w	#$000D,d2
00177C72 9443                       		sub.w	d3,d2
00177C74 6500                       		bcs.s	Offset_0x026B92
00177C76                            
00177C76                            Offset_0x026B8A:
00177C76 34FC 0000                  		move.w	#$0000,(a2)+
00177C7A 51CA FFFA                  		dbra	d2,Offset_0x026B8A
00177C7E                            
00177C7E                            Offset_0x026B92:
00177C7E 34BC 0011                  		move.w	#$0011,(a2) 	 	 	 ; Load "1"
00177C82 45EA 0050                  		lea		$0050(a2),a2
00177C86 34BC 0012                  		move.w	#$0012,(a2) 	 	 	 ; Load "2"
00177C8A 45EA 0050                  		lea		$0050(a2),a2
00177C8E 34BC 0013                  		move.w	#$0013,(a2) 	 	 	 ; Load "3"
00177C92 51C9 FFC6                  		dbra	d1,Menu_Loop_Load_Text
00177C96                            ;-------------------------------------------------------------------------------
00177C96 720E                       		moveq	#$0E,d1
00177C98 45EA FBA0                  		lea		$FFFFFBA0(a2),a2
00177C9C                            
00177C9C                            Menu_Clear_Act_x:						; Limpa os nъmeros dos acts nгo usados e carrega o "*" do Sound Test
00177C9C 34BC 0000                  		move.w	#$0000,(a2)				; Load " "
00177CA0 45EA 0050                  		lea		$0050(a2),a2
00177CA4 51C9 FFF6                  		dbra	d1,Menu_Clear_Act_x
00177CA8                            ;		lea     $FF10(a2), a2
00177CA8                            ;		move.w  #$001A, (a2)          ; Load "*"
00177CA8                            ;-------------------------------------------------------------------------------
00177CA8                            ; Carrega o Mapeamento das Asas onde s�o mostrados os �cones
00177CA8                            ;------------------------------------------------------------------------------- 
00177CA8 41F9 0000 0000                             lea     (Wings_Mappings), A0
00177CAE 43F9 FFFF 0670                             lea     ($FFFF0670), A1
00177CB4 323C 0006                                  move     #$06, D1
00177CB8                            Menu_Loop_Next_Line:
00177CB8 303C 0009                                  move     #$09, D0
00177CBC                            Menu_Loop_Load_Wings:
00177CBC 32D8                                       move.w   (A0)+, (A1)+
00177CBE 51C8 FFFC                                  dbra     D0, Menu_Loop_Load_Wings
00177CC2 D2FC 003C                                  add.w    #$3C, A1
00177CC6 51C9 FFF0                                  dbra     D1, Menu_Loop_Next_Line
00177CCA                            ;-------------------------------------------------------------------------------                
00177CCA                            ; Carrega o Mapeamento dos �cones               
00177CCA                            ;-------------------------------------------------------------------------------                                    
00177CCA 43F9 FFFF 08C0                             lea     ($FFFF08C0), A1
00177CD0 41F9 0000 0000                             lea     (Icons_Mappings), A0
00177CD6 303C 0090                                  move.w  #$0090, D0
00177CDA 6100 0000                                  bsr     Menu_EnigmaDec
00177CDE 43F9 FFFF 0000                             lea     ($FFFF0000), A1
00177CE4 203C 4000 0003                             move.l  #$40000003, D0
00177CEA 7227                                       moveq   #$27, D1
00177CEC 741B                                       moveq   #$1B, D2
00177CEE 6100 0000                                  bsr     Menu_ShowVDPGraphics
00177CF2                            ;-------------------------------------------------------------------------------                
00177CF2 7600                                       moveq   #$00, D3
00177CF4 6100 0000                                  bsr     Offset_0x027040
00177CF8 4278 FF70                                  clr.w   ($FFFFFF70).w
00177CFC 4278 FE40                                  clr.w   ($FFFFFE40).w
00177D00 4238 F711                                  clr.b   ($FFFFF711).w
00177D04 4278 F7F0                                  clr.w   ($FFFFF7F0).w
00177D08                            ;------------------------------------------------------------------------------- 
00177D08 31FC 0000 F7B8                             move.w  #$0000, ($FFFFF7B8).w  ; Inicializa os quadros das anima��es do menu
00177D0E 31FC 0000 F7DA                             move.w  #$0000, ($FFFFF7DA).w  ; Inicializa o contador das anima��es do menu 
00177D14 4EB9 0000 0000                             jsr     Dynamic_Menu           ; Chama a rotina de anima��o
00177D1A                            ;-------------------------------------------------------------------------------
00177D1A                            
00177D1A 7014                                       moveq   #$14, D0
00177D1C 6100 0000                                  bsr     Menu_PalLoad1
00177D20 43F8 FB40                                  lea     ($FFFFFB40).w, A1
00177D24 45F8 FBC0                                  lea     ($FFFFFBC0).w, A2
00177D28 7207                                       moveq   #$07, D1
00177D2A                            Offset_0x026C26:
00177D2A 24D1                                       move.l  (A1), (A2)+
00177D2C 4299                                       clr.l   (A1)+
00177D2E 51C9 FFFA                                  dbra    D1, Offset_0x026C26
00177D32 103C 0083                                  move.b  #Level_Select_Menu_snd, D0
00177D36 6100 0000                                  bsr     Menu_Play_Music
00177D3A 7000                                       moveq   #$00, D0
00177D3C 4EB9 0000 0000                             jsr     Menu_LoadPLC2
00177D42 31FC 0707 F614                             move.w  #$0707, ($FFFFF614).w
00177D48 4278 FFDC                                  clr.w   ($FFFFFFDC).w
00177D4C 42B8 EE00                                  clr.l   ($FFFFEE00).w
00177D50 42B8 EE04                                  clr.l   ($FFFFEE04).w
00177D54 4278 FF0C                                  clr.w   ($FFFFFF0C).w
00177D58 4278 FF0E                                  clr.w   ($FFFFFF0E).w
00177D5C 11FC 0018 F62A                             move.b  #$18, ($FFFFF62A).w
00177D62 6100 0000                                  bsr     Menu_DelayProgram
00177D66 3038 F60C                                  move.w  ($FFFFF60C).w, D0
00177D6A 0000 0040                                  ori.b   #$40, D0
00177D6E 33C0 00C0 0004                             move.w  D0, ($00C00004)
00177D74 6100 0000                                  bsr     Menu_Pal_FadeTo
00177D78                            Menu_Main_Loop:
00177D78 11FC 0018 F62A                             move.b  #$18, ($FFFFF62A).w
00177D7E 6100 0000                                  bsr     Menu_DelayProgram
00177D82 46FC 2700                                  move    #$2700, SR
00177D86 7600                                       moveq   #$00, D3
00177D88 6100 0000                                  bsr     Offset_0x026ED8
00177D8C 6100 0000                                  bsr     Offset_0x026DEC
00177D90 363C 6000                                  move.w  #$6000, D3
00177D94 6100 0000                                  bsr     Offset_0x027048
00177D98 46FC 2300                                  move    #$2300, SR
00177D9C 4EB9 0000 0000                             jsr     Dynamic_Menu
00177DA2 6100 0000                                  bsr     Menu_RunPLC
00177DA6 0838 0004 F604                             btst    #$04, ($FFFFF604).w
00177DAC 6700                                       beq.s   Offset_0x026CC6
00177DAE 31FC 0001 FFD8                             move.w  #$0001, ($FFFFFFD8).w
00177DB4                            Offset_0x026CC6:
00177DB4 1038 F605                                  move.b  ($FFFFF605).w, D0
00177DB8 8038 F607                                  or.b    ($FFFFF607).w, D0
00177DBC 0200 0080                                  andi.b  #$80, D0
00177DC0 6600                                       bne.s   Offset_0x026CD8
00177DC2 60B4                                       bra     Menu_Main_Loop
00177DC4                            Offset_0x026CD8:
00177DC4 3038 FF82                                  move.w  ($FFFFFF82).w, D0
00177DC8 D040                                       add.w   D0, D0
00177DCA 303B 0000                                  move.w  Menu_Level_Select_Array(PC, D0), D0
00177DCE 6B00 0000                                  bmi     Menu_Game_Reset
00177DD2 0C40 0600                                  cmpi.w  #$0600, D0
00177DD6 6700 0000                                  beq     Menu_Ending_Sequence
00177DDA 0C40 5555                                  cmpi.w  #$5555, D0
00177DDE 6798                                       beq     Menu_Main_Loop
00177DE0 0C40 4000                                  cmpi.w  #$4000, D0
00177DE4 6600 0000                                  bne     Menu_Load_Level
00177DE8 11FC 0010 F600                             move.b  #$10, ($FFFFF600).w
00177DEE 4278 FE10                                  clr.w   ($FFFFFE10).w
00177DF2 11FC 0003 FE12                             move.b  #$03, ($FFFFFE12).w
00177DF8 11FC 0003 FEC6                             move.b  #$03, ($FFFFFEC6).w
00177DFE 7000                                       moveq   #$00, D0
00177E00 31C0 FE20                                  move.w  D0, ($FFFFFE20).w
00177E04 21C0 FE22                                  move.l  D0, ($FFFFFE22).w
00177E08 21C0 FE26                                  move.l  D0, ($FFFFFE26).w
00177E0C 31C0 FED0                                  move.w  D0, ($FFFFFED0).w
00177E10 21C0 FED2                                  move.l  D0, ($FFFFFED2).w
00177E14 21C0 FED6                                  move.l  D0, ($FFFFFED6).w
00177E18 21FC 0000 1388 FFC0                        move.l  #$00001388, ($FFFFFFC0).w
00177E20 21FC 0000 1388 FFC4                        move.l  #$00001388, ($FFFFFFC4).w
00177E28 31F8 FF72 FF70                             move.w  ($FFFFFF72).w, ($FFFFFF70).w
00177E2E 4E75                                       rts
00177E30                            Menu_Game_Reset:
00177E30 11FC 0000 F600                             move.b  #$0000, ($FFFFF600).w
00177E36 4E75                                       rts
00177E38                            Menu_Ending_Sequence:
00177E38 11FC 0018 F600                             move.b	#$0018,($FFFFF600).w
00177E3E 31FC 0600 FE10             		move.w	#$0600,($FFFFFE10).w
00177E44 4E75                       		rts
00177E46                            Menu_Level_Select_Array:
00177E46 0000 0001 0002                             dc.w    $0000, $0001, $0002	;GHZ
00177E4C 0200 0201 0202                             dc.w    $0200, $0201, $0202	;MZ
00177E52 0400 0401 0402                             dc.w    $0400, $0401, $0402	;SYZ				
00177E58 0100 0101 0102                             dc.w    $0100, $0101, $0102 ;LZ
00177E5E 0300 0301 0302                             dc.w    $0300, $0301, $0302	;SLZ
00177E64 0500 0501 0103                             dc.w    $0500, $0501, $0103	;SBZ
00177E6A 0502 4000 0600                             dc.w    $0502, $4000, $0600	
00177E70 FFFF                                       dc.w    $FFFF
00177E72                            Menu_Load_Level:
00177E72 0240 3FFF                                  andi.w  #$3FFF, D0
00177E76 31C0 FE10                                  move.w  D0, ($FFFFFE10).w
00177E7A 11FC 000C F600                             move.b  #$0C, ($FFFFF600).w
00177E80 11FC 0003 FE12                             move.b  #$03, ($FFFFFE12).w
00177E86 11FC 0003 FEC6                             move.b  #$03, ($FFFFFEC6).w
00177E8C 7000                                       moveq   #$00, D0
00177E8E 31C0 FE20                                  move.w  D0, ($FFFFFE20).w
00177E92 21C0 FE22                                  move.l  D0, ($FFFFFE22).w
00177E96 21C0 FE26                                  move.l  D0, ($FFFFFE26).w
00177E9A 31C0 FED0                                  move.w  D0, ($FFFFFED0).w
00177E9E 21C0 FED2                                  move.l  D0, ($FFFFFED2).w
00177EA2 21C0 FED6                                  move.l  D0, ($FFFFFED6).w
00177EA6 4E71                                       nop
00177EA8 4E71                                       nop
00177EAA 21FC 0000 1388 FFC0                        move.l  #$00001388, ($FFFFFFC0).w
00177EB2 21FC 0000 1388 FFC4                        move.l  #$00001388, ($FFFFFFC4).w
00177EBA 103C 00E0                                  move.b  #Volume_Down, D0
00177EBE 6100 0000                                  bsr     Menu_Play_Music     
00177EC2 7000                                       moveq   #$00, D0
00177EC4 31C0 FF8A                                  move.w  D0, ($FFFFFF8A).w
00177EC8 31C0 FFDC                                  move.w  D0, ($FFFFFFDC).w
00177ECC 4E75                                       rts
00177ECE                            Offset_0x026DEC:
00177ECE 1238 F605                                  move.b  ($FFFFF605).w, D1
00177ED2 0201 0003                                  andi.b  #$03, D1
00177ED6 6600                                       bne.s   Offset_0x026DFC
00177ED8 5378 FF80                                  subq.w  #$01, ($FFFFFF80).w
00177EDC 6A00                                       bpl.s   Offset_0x026E32
00177EDE                            Offset_0x026DFC:
00177EDE 31FC 000B FF80                             move.w  #$000B, ($FFFFFF80).w
00177EE4 1238 F604                                  move.b  ($FFFFF604).w, D1
00177EE8 0201 0003                                  andi.b  #$03, D1
00177EEC 6700                                       beq.s   Offset_0x026E32
00177EEE 3038 FF82                                  move.w  ($FFFFFF82).w, D0
00177EF2 0801 0000                                  btst    #$00, D1
00177EF6 6700                                       beq.s   Offset_0x026E1C
00177EF8 5340                                       subq.w  #$01, D0
00177EFA 6400                                       bcc.s   Offset_0x026E1C
00177EFC 7015                                       moveq   #$15, D0     ; �ltimo item ap�s apertar para cima
00177EFE                            Offset_0x026E1C:
00177EFE 0801 0001                                  btst    #$01, D1
00177F02 6700                                       beq.s   Offset_0x026E2C
00177F04 5240                                       addq.w  #$01, D0
00177F06 0C40 0016                                  cmpi.w  #$0016, D0   ; Verifica qual o �ltimo item da lista
00177F0A 6500                                       bcs.s   Offset_0x026E2C
00177F0C 7000                                       moveq   #$00, D0
00177F0E                            Offset_0x026E2C:
00177F0E 31C0 FF82                                  move.w  D0, ($FFFFFF82).w
00177F12 4E75                                       rts
00177F14                            Offset_0x026E32:
00177F14 0C78 0015 FF82                             cmpi.w  #$0015, ($FFFFFF82).w ; se o item for igual muda as fun��es de esquerda e direita 
00177F1A 6600                                       bne.s   Offset_0x026E9C
00177F1C 3038 FF84                                  move.w  ($FFFFFF84).w, D0
00177F20 1238 F605                                  move.b  ($FFFFF605).w, D1
00177F24 0801 0002                                  btst    #$02, D1
00177F28 6700                                       beq.s   Offset_0x026E4E
00177F2A 5300                                       subq.b  #$01, D0
00177F2C 6400                                       bcc.s   Offset_0x026E4E
00177F2E 707F                                       moveq   #$7F, D0
00177F30                            Offset_0x026E4E:
00177F30 0801 0003                                  btst    #$03, D1
00177F34 6700                                       beq.s   Offset_0x026E5E
00177F36 5200                                       addq.b  #$01, D0
00177F38 0C40 0080                                  cmpi.w  #$0080, D0
00177F3C 6500                                       bcs.s   Offset_0x026E5E
00177F3E 7000                                       moveq   #$00, D0
00177F40                            Offset_0x026E5E:
00177F40 0801 0006                                  btst    #$06, D1
00177F44 6700                                       beq.s   Offset_0x026E6C
00177F46 0600 0010                                  addi.b  #$10, D0
00177F4A 0200 007F                                  andi.b  #$7F, D0
00177F4E                            Offset_0x026E6C:
00177F4E 31C0 FF84                                  move.w  D0, ($FFFFFF84).w
00177F52 0241 0030                                  andi.w  #$0030, D1
00177F56 6700                                       beq.s   Offset_0x026E9A
00177F58 3038 FF84                                  move.w  ($FFFFFF84).w, D0
00177F5C 0640 0080                                  addi.w  #$0080, D0
00177F60 6100 0000                                  bsr     Menu_Play_Music 
00177F64 41F9 0000 0000                             lea     (Code_Debug_Mode), A0   
00177F6A 45F9 0000 0000                             lea     (Code_All_Emeralds), A2 
00177F70 43F8 FF0A                                  lea     ($FFFFFF0A).w, A1
00177F74 7401                                       moveq   #$01, D2
00177F76 6100 0000                                  bsr     Menu_Code_Test 
00177F7A                            Offset_0x026E9A:
00177F7A 4E75                                       rts
00177F7C                            Offset_0x026E9C:
00177F7C 1238 F605                                  move.b  ($FFFFF605).w, D1
00177F80 0201 000C                                  andi.b  #$0C, D1
00177F84 6700                                       beq.s   Offset_0x026EB2
00177F86 3038 FF82                                  move.w  ($FFFFFF82).w, D0
00177F8A 103B 0000                                  move.b  Menu_Left_Right_Select(PC, D0), D0
00177F8E 31C0 FF82                                  move.w  D0, ($FFFFFF82).w
00177F92                            Offset_0x026EB2:
00177F92 4E75                                       rts
00177F94                            Menu_Left_Right_Select:                   
00177F94 0F10 1112 1212 1313 1314+                  dc.b    $0F, $10, $11, $12, $12, $12, $13, $13, $13, $14, $14, $14, $15, $15, $15
00177FA3 0001 0203 0609 0C                          dc.b    $00, $01, $02, $03, $06, $09, $0C
00177FAA                            Offset_0x026ED8:
00177FAA 49F9 FFFF 0000                             lea     ($FFFF0000), A4
00177FB0 4BF9 0000 0000                             lea     (Menu_Text_Highlight), A5
00177FB6 4DF9 00C0 0000                             lea     ($00C00000), A6
00177FBC 7000                                       moveq   #$00, D0
00177FBE 3038 FF82                                  move.w  ($FFFFFF82).w, D0
00177FC2 E548                                       lsl.w   #$02, D0
00177FC4 47F5 0000                                  lea     $00(A5, D0), A3
00177FC8 7000                                       moveq   #$00, D0
00177FCA 1013                                       move.b  (A3), D0
00177FCC C0FC 0050                                  mulu.w  #$0050, D0
00177FD0 7200                                       moveq   #$00, D1
00177FD2 122B 0001                                  move.b  $0001(A3), D1
00177FD6 D041                                       add.w   D1, D0
00177FD8 43F4 0000                                  lea     $00(A4, D0), A1
00177FDC 7200                                       moveq   #$00, D1
00177FDE 1213                                       move.b  (A3), D1
00177FE0 EF49                                       lsl.w   #$07, D1
00177FE2 D22B 0001                                  add.b   $0001(A3), D1
00177FE6 0641 C000                                  addi.w  #$C000, D1
00177FEA E589                                       lsl.l   #$02, D1
00177FEC E449                                       lsr.w   #$02, D1
00177FEE 0041 4000                                  ori.w   #$4000, D1
00177FF2 4841                                       swap.w  D1
00177FF4 2D41 0004                                  move.l  D1, $0004(A6)
00177FF8 740E                                       moveq   #$0E, D2    ; Quantidade de letras a selecionar (Highlight)
00177FFA                            Offset_0x026F28:                
00177FFA 3019                                       move.w  (A1)+, D0
00177FFC D043                                       add.w   D3, D0
00177FFE 3C80                                       move.w  D0, (A6)
00178000 51CA FFF8                                  dbra    D2, Offset_0x026F28
00178004 544B                                       addq.w  #$02, A3
00178006 7000                                       moveq   #$00, D0
00178008 1013                                       move.b  (A3), D0
0017800A 6700                                       beq.s   Offset_0x026F6C
0017800C C0FC 0050                                  mulu.w  #$0050, D0
00178010 7200                                       moveq   #$00, D1
00178012 122B 0001                                  move.b  $0001(A3), D1
00178016 D041                                       add.w   D1, D0
00178018 43F4 0000                                  lea     $00(A4, D0), A1
0017801C 7200                                       moveq   #$00, D1
0017801E 1213                                       move.b  (A3), D1
00178020 EF49                                       lsl.w   #$07, D1
00178022 D22B 0001                                  add.b   $0001(A3), D1
00178026 0641 C000                                  addi.w  #$C000, D1
0017802A E589                                       lsl.l   #$02, D1
0017802C E449                                       lsr.w   #$02, D1
0017802E 0041 4000                                  ori.w   #$4000, D1
00178032 4841                                       swap.w  D1
00178034 2D41 0004                                  move.l  D1, $0004(A6)
00178038 3019                                       move.w  (A1)+, D0
0017803A D043                                       add.w   D3, D0
0017803C 3C80                                       move.w  D0, (A6)
0017803E                            Offset_0x026F6C:
0017803E 0C78 0015 FF82                             cmpi.w  #$0015, ($FFFFFF82).w  ; Se for igual seleciona o n�mero do Sound Test
00178044 6600                                       bne.s   Offset_0x026F78
00178046 6100 0000                                  bsr     Offset_0x026F7A
0017804A                            Offset_0x026F78:
0017804A 4E75                                       rts
0017804C                            Offset_0x026F7A:
0017804C 23FC 49C6 0003 00C0 0004                   move.l  #$49C60003, ($00C00004) ; Posi��o dos n�meros do Sound Test
00178056 3038 FF84                                  move.w  ($FFFFFF84).w, D0
0017805A 1400                                       move.b  D0, D2
0017805C E808                                       lsr.b   #$04, D0
0017805E 6100                                       bsr.s   Offset_0x026F90
00178060 1002                                       move.b  D2, D0
00178062                            Offset_0x026F90:
00178062 0240 000F                                  andi.w  #$000F, D0
00178066 0C00 000A                                  cmpi.b  #$0A, D0
0017806A 6500                                       bcs.s   Offset_0x026F9E
0017806C 5800                                       addi.b  #$04, D0
0017806E                            Offset_0x026F9E:
0017806E 0600 0010                                  addi.b  #$10, D0
00178072 D043                                       add.w   D3, D0
00178074 3C80                                       move.w  D0, (A6)
00178076 4E75                                       rts
00178078                            ;-------------------------------------------------------------------------------                
00178078                            Menu_Code_Test: 
00178078 3038 FF0C                                  move.w  ($FFFFFF0C).w, D0
0017807C D0C0                                       adda.w  D0, A0
0017807E 3038 FF84                                  move.w  ($FFFFFF84).w, D0
00178082 B010                                       cmp.b   (A0), D0
00178084 6600                                       bne.s   Menu_Reset_Debug_Mode_Code_Counter
00178086 5278 FF0C                                  addq.w  #$01, ($FFFFFF0C).w
0017808A 4A28 0001                                  tst.b   $0001(A0)
0017808E 6A00                                       bpl.s   Menu_All_Emeralds_Code_Test 
00178090 32BC 0101                                  move.w  #$0101, (A1)
00178094 6000 0000                                  bra     Menu_Set_Debug_Flag 
00178098                            Menu_Reset_Debug_Mode_Code_Counter: 
00178098 31FC 0000 FF0C                             move.w  #$0000, ($FFFFFF0C).w
0017809E                            Menu_All_Emeralds_Code_Test: 
0017809E 3038 FF0E                                  move.w  ($FFFFFF0E).w, D0
001780A2 D4C0                                       adda.w  D0, A2
001780A4 3038 FF84                                  move.w  ($FFFFFF84).w, D0
001780A8 B012                                       cmp.b   (A2), D0
001780AA 6600                                       bne.s   Menu_Reset_All_Emerald_Code_Counter 
001780AC 5278 FF0E                                  addq.w  #$01, ($FFFFFF0E).w
001780B0 4A2A 0001                                  tst.b   $0001(A2)
001780B4 6A00                                       bpl.s   Menu_Code_Not_0xFF 
001780B6 4A42                                       tst.w   D2
001780B8 6600                                       bne.s   Menu_Set_All_Emeralds 
001780BA                            Menu_Set_Debug_Flag: 
001780BA 11FC 0001 FFE1                             move.b  #$01, (Slow_Motion_Flag).w
001780C0 11FC 0001 FFE2                             move.b  #$01, (Debug_Mode_Flag).w
001780C6 103C 00B5                                  move.b  #Ring_Snd, D0
001780CA 6100 0000                                  bsr     Menu_Play_Music 
001780CE 6000                                       bra.s   Menu_Reset_All_Emerald_Code_Counter 
001780D0                            Menu_Set_All_Emeralds: 
001780D0 31FC 0006 FE56                             move.w  #$0006, ($FFFFFE56).w
001780D6 103C 0093                                  move.b  #Emerald_Snd, D0
001780DA 6100 0000                                  bsr     Menu_Play_Music 
001780DE                            Menu_Reset_All_Emerald_Code_Counter: 
001780DE 31FC 0000 FF0E                             move.w  #$0000, ($FFFFFF0E).w
001780E4                            Menu_Code_Not_0xFF: 
001780E4 4E75                                       rts               
001780E6                            Code_Debug_Mode: 
001780E6 0109 0902 0101 0204 FF                     dc.b    $01, $09, $09, $02, $01, $01, $02, $04, $FF
001780EF                            Code_All_Emeralds: 
001780EF 0401 0206 FF                               dc.b    $04, $01, $02, $06, $FF
001780F4                            ;-------------------------------------------------------------------------------                 
001780F4                            Offset_0x027040:
001780F4 6100 FF56                                  bsr     Offset_0x026F7A
001780F8 6000 0000                                  bra     Offset_0x027050
001780FC                            Offset_0x027048:
001780FC 6100 FEAC                                  bsr     Offset_0x026ED8
00178100 6000 0000                                  bra     Offset_0x027050
00178104                            Offset_0x027050:
00178104 3038 FF82                                  move.w  ($FFFFFF82).w, D0
00178108 47F9 0000 0000                             lea     (Menu_Icon_List), A3
0017810E 47F3 0000                                  lea     $00(A3, D0), A3
00178112 43F9 FFFF 08C0                             lea     ($FFFF08C0), A1
00178118 7000                                       moveq   #$00, D0
0017811A 1013                                       move.b  (A3), D0
0017811C E748                                       lsl.w   #$03, D0
0017811E 3200                                       move.w  D0, D1
00178120 D040                                       add.w   D0, D0
00178122 D041                                       add.w   D1, D0
00178124 43F1 0000                                  lea     $00(A1, D0), A1
00178128 203C 4B36 0003                             move.l  #$4B360003, D0        ; Posi��o Horizontal dos �cones
0017812E 7203                                       moveq   #$03, D1
00178130 7402                                       moveq   #$02, D2
00178132 6100 0000                                  bsr     Menu_ShowVDPGraphics 
00178136 43F9 0000 0000                             lea     (Icon_Palettes), A1  
0017813C 7000                                       moveq   #$00, D0
0017813E 1013                                       move.b  (A3), D0
00178140 EB48                                       lsl.w   #$05, D0
00178142 43F1 0000                                  lea     $00(A1, D0), A1
00178146 45F8 FB40                                  lea     ($FFFFFB40).w, A2
0017814A 7207                                       moveq   #$07, D1
0017814C                            Offset_0x027098:                
0017814C 24D9                                       move.l  (A1)+, (A2)+
0017814E 51C9 FFFC                                  dbra    D1, Offset_0x027098
00178152 4E75                                       rts
00178154                            ;-------------------------------------------------------------------------------                            
00178154                            Dynamic_Menu:                           
00178154 5338 F7DA                                  subq.b  #$01, ($FFFFF7DA).w          ; Decrementa em 1 o Tempo
00178158 6A00                                       bpl.s   Exit_Dinamic_Menu            ; Se for maior ou igual a 0 sai da fun��o
0017815A 11FC 0007 F7DA                             move.b  #$07, ($FFFFF7DA).w          ; Inicializa o tempo de dura��o de cada frame
00178160 1038 F7B8                                  move.b  ($FFFFF7B8).w, D0            ; Carrega o Id do Frame Atual em D0
00178164 5238 F7B8                                  addq.b  #$01, ($FFFFF7B8).w          ; Carrega o pr�ximo frame em $FFFFFFB8
00178168 0240 001F                                  andi.w  #$001F, D0
0017816C 103B 0000                                  move.b  Sonic_Miles_Frame_Select(PC, D0), D0  ; Carrega o Id do frame em D0
00178170                                          ; muls.w  #$0140, D0                   ; Multiplica o Id pelo tamanho em bytes de cada frame
00178170 ED48                                       lsl.w   #$06, D0
00178172 4DF9 00C0 0000                             lea     ($00C00000), A6
00178178 2D7C 4020 0000 0004                        move.l  #$40200000, $0004(A6)
00178180 43F9 0000 0000                             lea     (Sonic_Miles_Spr), A1
00178186 43F1 0000                                  lea     $00(A1, D0), A1
0017818A 303C 0009                                  move.w  #$0009, D0                   ; Tiles-1 a serem carregados por vez 
0017818E                            Menu_Loop_Load_Tiles:
0017818E 2C99                                       move.l  (A1)+, (A6)
00178190 2C99                                       move.l  (A1)+, (A6)     
00178192 2C99                                       move.l  (A1)+, (A6)     
00178194 2C99                                       move.l  (A1)+, (A6)     
00178196 2C99                                       move.l  (A1)+, (A6)     
00178198 2C99                                       move.l  (A1)+, (A6)
0017819A 2C99                                       move.l  (A1)+, (A6)
0017819C 2C99                                       move.l  (A1)+, (A6)
0017819E 51C8 FFEE                                  dbra    D0, Menu_Loop_Load_Tiles
001781A2                            Exit_Dinamic_Menu:                
001781A2 4E75                                       rts              
001781A4                            Sonic_Miles_Frame_Select:     
001781A4 0000 0000 0000 0000 0000+                  dc.b    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
001781B2 050A                                       dc.b    $05, $0A
001781B4 0F0F 0F0F 0F0F 0F0F 0F0F+                  dc.b    $0F, $0F, $0F, $0F, $0F, $0F, $0F, $0F, $0F, $0F, $0F, $0F, $0F, $0F
001781C2 0A05                                       dc.b    $0A, $05   
001781C4                                            ; 0 = 0000000000  ; 1 = 0101000000  ; 2 = 1010000000 ; 3 = 1111000000
001781C4                            ;------------------------------------------------------------------------------                  
001781C4 =00000000                  __ = $00
001781C4 =0000001E                  _A = $1E
001781C4 =0000001F                  _B = $1F
001781C4 =00000020                  _C = $20
001781C4 =00000021                  _D = $21
001781C4 =00000022                  _E = $22    
001781C4 =00000023                  _F = $23
001781C4 =00000024                  _G = $24
001781C4 =00000025                  _H = $25
001781C4 =00000026                  _I = $26
001781C4 =00000027                  _J = $27
001781C4 =00000028                  _K = $28
001781C4 =00000029                  _L = $29
001781C4 =0000002A                  _M = $2A
001781C4 =0000002B                  _N = $2B
001781C4 =0000002C                  _O = $2C
001781C4 =0000002D                  _P = $2D
001781C4 =0000002E                  _Q = $2E
001781C4 =0000002F                  _R = $2F
001781C4 =00000030                  _S = $30
001781C4 =00000031                  _T = $31
001781C4 =00000032                  _U = $32
001781C4 =00000033                  _V = $33
001781C4 =00000034                  _W = $34
001781C4 =00000035                  _X = $35
001781C4 =00000036                  _Y = $36
001781C4 =00000037                  _Z = $37
001781C4 =0000001A                  _st = $1A
001781C4                            ;-------------------------------------------------------------------------------  
001781C4                            Icon_Palettes: 
001781C4 0000 0000 0048 006A 008E+                  dc.w    $0000, $0000, $0048, $006A, $008E, $00CE, $0EEE, $00E0
001781D4 00A4 0082 0062 0000 0E86+                  dc.w    $00A4, $0082, $0062, $0000, $0E86, $0026, $0E42, $0C00
001781E4 0000 0000 0420 0820 0C00+                  dc.w    $0000, $0000, $0420, $0820, $0C00, $0E60, $0A00, $0000
001781F4 0E00 0000 0000 0000 0444+                  dc.w    $0E00, $0000, $0000, $0000, $0444, $0666, $0AAA, $0EEE
00178204 0000 0204 0026 0248 046A+                  dc.w    $0000, $0204, $0026, $0248, $046A, $048C, $06CE, $0002
00178214 0000 0220 0040 0060 0080+                  dc.w    $0000, $0220, $0040, $0060, $0080, $02A0, $06E0, $0A0C
00178224 0000 0000 0A00 0660 0C80+                  dc.w    $0000, $0000, $0A00, $0660, $0C80, $0EC0, $006A, $0008
00178234 028A 00AE 004C 006E 0060+                  dc.w    $028A, $00AE, $004C, $006E, $0060, $0066, $00C0, $00CA
00178244 0000 0000 0CE2 0000 0480+                  dc.w    $0000, $0000, $0CE2, $0000, $0480, $0240, $0EEE, $04AC
00178254 006A 0026 0842 0620 0400+                  dc.w    $006A, $0026, $0842, $0620, $0400, $0000, $0000, $0000
00178264 0000 0000 0EEE 0ECA 0E86+                  dc.w    $0000, $0000, $0EEE, $0ECA, $0E86, $0E64, $0E42, $06AE
00178274 048A 0268 0246 0024 0888+                  dc.w    $048A, $0268, $0246, $0024, $0888, $0444, $000E, $0008
00178284 0000 0000 0A26 0C48 0E8C+                  dc.w    $0000, $0000, $0A26, $0C48, $0E8C, $00CE, $00C4, $0080
00178294 0C00 0000 0EEE 0EEA 0EC8+                  dc.w    $0C00, $0000, $0EEE, $0EEA, $0EC8, $006E, $004A, $0028
001782A4 0000 0000 0048 006A 008E+                  dc.w    $0000, $0000, $0048, $006A, $008E, $00CE, $0EEE, $00E0
001782B4 00A4 0082 0062 0808 0A4A+                  dc.w    $00A4, $0082, $0062, $0808, $0A4A, $0026, $0626, $0404
001782C4 0000 0000 0EEE 0ECA 0E86+                  dc.w    $0000, $0000, $0EEE, $0ECA, $0E86, $0E64, $0E42, $06AE
001782D4 048A 0268 0246 0024 0888+                  dc.w    $048A, $0268, $0246, $0024, $0888, $0444, $000E, $0008
001782E4 0000 0000 0048 006A 008E+                  dc.w    $0000, $0000, $0048, $006A, $008E, $00CE, $0EEE, $00E0
001782F4 00A4 0082 0062 0400 0E86+                  dc.w    $00A4, $0082, $0062, $0400, $0E86, $006E, $0E42, $0C00
00178304 0000 0000 0CE2 08C0 0480+                  dc.w    $0000, $0000, $0CE2, $08C0, $0480, $0240, $0EEE, $02AC
00178314 006A 0026 0AA6 0000 060A+                  dc.w    $006A, $0026, $0AA6, $0000, $060A, $0408, $0204, $0000
00178324 0000 0000 0C06 0C0A 0C6E+                  dc.w    $0000, $0000, $0C06, $0C0A, $0C6E, $0068, $008A, $0000
00178334 02CE 00EC 00AE 006E 0EEE+                  dc.w    $02CE, $00EC, $00AE, $006E, $0EEE, $0000, $000E, $00C4
00178344 0000 0000 0EEE 0AAA 0000+                  dc.w    $0000, $0000, $0EEE, $0AAA, $0000, $0666, $0444, $0E40
00178354 0C00 0800 00CE 028E 000E+                  dc.w    $0C00, $0800, $00CE, $028E, $000E, $0084, $0062, $0020
00178364 0000 0000 0004 0044 0084+                  dc.w    $0000, $0000, $0004, $0044, $0084, $0088, $00A8, $00AC
00178374 006C 002C 0028 0006 0666+                  dc.w    $006C, $002C, $0028, $0006, $0666, $0888, $0CCC, $0EEE
00178384 0000 0000 06CE 04AC 028A+                  dc.w    $0000, $0000, $06CE, $04AC, $028A, $0068, $0046, $00E8
00178394 00C4 0080 0040 0EEE 0C00+                  dc.w    $00C4, $0080, $0040, $0EEE, $0C00, $0EC0, $0860, $0000
001783A4 0000 0000 0E64 0E86 0EA8+                  dc.w    $0000, $0000, $0E64, $0E86, $0EA8, $0ECA, $0EEE, $0000
001783B4 00AE 006E 0E22 00E0 0000+                  dc.w    $00AE, $006E, $0E22, $00E0, $0000, $0000, $0000, $0000
001783C4 0000 0E20 004E 006E 0048+                  dc.w    $0000, $0E20, $004E, $006E, $0048, $008C, $00CE, $08EE
001783D4 0800 0400 0000 0EE8 0E80+                  dc.w    $0800, $0400, $0000, $0EE8, $0E80, $0E60, $0000, $0000
001783E4 0000 0000 0A22 0C42 0000+                  dc.w    $0000, $0000, $0A22, $0C42, $0000, $0E66, $0EEE, $0AAA
001783F4 0888 0444 08AE 046A 000E+                  dc.w    $0888, $0444, $08AE, $046A, $000E, $0000, $00EE, $0000
00178404 0000 0000 0A22 0C42 0000+                  dc.w    $0000, $0000, $0A22, $0C42, $0000, $0E66, $0EEE, $0AAA
00178414 0888 0444 08AE 046A 000E+                  dc.w    $0888, $0444, $08AE, $046A, $000E, $0000, $00EE, $0000
00178424                            ;-------------------------------------------------------------------------------  
00178424                            Menu_Icon_List: 
00178424 0000 000E 0E0E 0606 060B+                  dc.b    $00, $00, $00, $0E, $0E, $0E, $06, $06, $06, $0B, $0B, $0B, $0D, $0D, $0D, $09
00178434 0909 0410 0F11                             dc.b    $09, $09, $04, $10, $0F, $11
0017843A                            ;-------------------------------------------------------------------------------                 
0017843A                            Menu_Text_Highlight:                  
0017843A 0306 0324 0306 0424 0306+                  dc.w    $0306, $0324, $0306, $0424, $0306, $0524, $0706, $0724
0017844A 0706 0824 0706 0924 0B06+                  dc.w    $0706, $0824, $0706, $0924, $0B06, $0B24, $0B06, $0C24
0017845A 0B06 0D24 0F06 0F24 0F06+                  dc.w    $0B06, $0D24, $0F06, $0F24, $0F06, $1024, $0F06, $1124
0017846A 1306 1324 1306 1424 1306+                  dc.w    $1306, $1324, $1306, $1424, $1306, $1524, $032C, $034A
0017847A 032C 044A 032C 054A 072C+                  dc.w    $032C, $044A, $032C, $054A, $072C, $0000, $0B2C, $0000
0017848A 0F2C 0000 132C 134A                        dc.w    $0F2C, $0000, $132C, $134A
00178492                            ;-------------------------------------------------------------------------------                
00178492                            Menu_Text_Positions:                   
00178492 00F6 0236 0376 04B6 05F6+                  dc.w    $00F6, $0236, $0376, $04B6, $05F6, $011C, $025C, $039C
001784A2 04DC 061C                                  dc.w    $04DC, $061C
001784A6                            ;-------------------------------------------------------------------------------                          
001784A6                            Menu_Level_Select_Text: 
001784A6 0E30 2D29 1E30 2500 2526+                  dc.b    $0E, _S, _P, _L, _A, _S, _H, __, _H, _I, _L, _L, __, __, __, __
001784B6 0E2A 222B 3200 0000 0000+                  dc.b    $0E, _M, _E, _N, _U, __, __, __, __, __, __, __, __, __, __, __
001784C6 0E20 1E30 262B 2C00 3031+                  dc.b    $0E, _C, _A, _S, _I, _N, _O, __, _S, _T, _R, _E, _E, _T, __, __
001784D6 0E29 2C30 3100 291E 1F36+                  dc.b    $0E, _L, _O, _S, _T, __, _L, _A, _B, _Y, _R, _I, _N, _T, _H, __
001784E6 0E34 2C2F 2921 002A 1E2D+                  dc.b    $0E, _W, _O, _R, _L, _D, __, _M, _A, _P, __, __, __, __, __, __
001784F6 0E2A 1E21 0024 221E 2F00+                  dc.b    $0E, _M, _A, _D, __, _G, _E, _A, _R, __, __, __, __, __, __, __
00178506 0E22 2424 0030 311E 3126+                  dc.b    $0E, _E, _G, _G, __, _S, _T, _A, _T, _I, _O, _N, __, __, __, __   
00178516 0E30 2D22 2026 1E29 0030+                  dc.b    $0E, _S, _P, _E, _C, _I, _A, _L, __, _S, _T, _A, _G, _E, __, __
00178526 0E22 2B21 262B 2400 3022+                  dc.b    $0E, _E, _N, _D, _I, _N, _G, __, _S, _E, _Q, _U, _E, _N, _C, _E
00178536 0E30 2C32 2B21 0031 2230+                  dc.b    $0E, _S, _O, _U, _N, _D, __, _T, _E, _S, _T, __, __, _st,__, __
00178546                            ;-------------------------------------------------------------------------------
00178546                            Wings_Mappings: 
00178546 6000 6000 6000 604D 604E+                  dc.w    $6000, $6000, $6000, $604D, $604E, $684E, $684D, $6000, $6000, $6000   
0017855A                            ;Wings_Line_1:                 
0017855A 604F 6050 6051 6052 6053+                  dc.w    $604F, $6050, $6051, $6052, $6053, $6853, $6852, $6851, $6850, $684F
0017856E                            ;Wings_Line_2:
0017856E 6054 6055 6056 6057 6057+                  dc.w    $6054, $6055, $6056, $6057, $6057, $6057, $6057, $6856, $6855, $6854
00178582                            ;Wings_Line_3:
00178582 6058 6059 605A 6057 6057+                  dc.w    $6058, $6059, $605A, $6057, $6057, $6057, $6057, $685A, $6859, $6858
00178596                            ;Wings_Line_4:
00178596 605B 605C 605D 6057 6057+                  dc.w    $605B, $605C, $605D, $6057, $6057, $6057, $6057, $685D, $685C, $685B
001785AA                            ;Wings_Line_5:
001785AA 6000 605E 605F 6060 6061+                  dc.w    $6000, $605E, $605F, $6060, $6061, $6062, $6063, $6064, $685E, $6000
001785BE                            ;Wings_Line_6:
001785BE 6000 6000 6065 6066 6067+                  dc.w    $6000, $6000, $6065, $6066, $6067, $6867, $6866, $6865, $6000, $6000 
001785D2                            ;-------------------------------------------------------------------------------    
001785D2                            Menu_Palette:
001785D2                                            incbin  'data\menu\menu.pal'            
00178652                            Menu_ClearScreen:
00178652 4EF8 1386                                  jmp     ClearScreen
00178656                            Menu_ShowVDPGraphics:                
00178656 4EF8 1500                                  jmp     ShowVDPGraphics                
0017865A                            Menu_NemesisDec: 
0017865A 4EF8 15B0                                  jmp     NemDec  
0017865E                            Menu_LoadPLC2:      
0017865E 4EF8 1722                                  jmp     LoadPLC2
00178662                            Menu_RunPLC:                    
00178662 4EF8 175C                                  jmp     RunPLC_RAM                           
00178666                            Menu_EnigmaDec
00178666 4EF8 188E                                  jmp     EniDec
0017866A                            Menu_Pal_FadeTo:
0017866A 4EF8 20D0                                  jmp     Pal_FadeTo
0017866E                            Menu_Pal_FadeFrom:
0017866E 4EF8 2186                                  jmp     Pal_FadeFrom     
00178672                            Menu_Play_Music:
00178672 4EF8 1476                                  jmp     PlaySound  
00178676                            Menu_PalLoad1:
00178676 4EF8 2434                                  jmp     PalLoad1
0017867A                            Menu_DelayProgram:
0017867A 4EF8 33A8                                  jmp     DelayProgram
0017867E                            ;-------------------------------------------------------------------------------
0017867E                            Menu_Font:
0017867E                                            incbin  'data\menu\menufont.nem' 
00178BF2                            Level_Icons:
00178BF2                                            incbin  'data\menu\levelico.nem'   
00179EEE                            Menu_Mappings:
00179EEE                                            incbin  'data\menu\menubg.eni'
0017A09A                            Icons_Mappings:
0017A09A                                            incbin  'data\menu\iconsmap.eni'
0017A0B0                            Sonic_Miles_Spr:                                         
0017A0B0                                            incbin  'data\menu\soncmils.dat'   
0017A5B0                            ;===============================================================================
0017A5B0                            ; Menu do Sonic 2 No Sonic 1 reprogramado por Esrael L. G. Neto
0017A5B0                            ; [ Fim ]
0017A5B0                            ;===============================================================================
0017A5B0                            ;===============================================================================
0017A5B0                            ; end of 'ROM'
0017A5B0                            EndOfRom:
0017A5B0                            
0017A5B0                            
